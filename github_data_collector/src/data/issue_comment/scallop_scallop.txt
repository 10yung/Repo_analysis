I have a `MyConfig(...) extends ScallopConf(...)` with loads (~40) of options, none of which should have a short version. Setting `noshort = true` for each option is certainly possible, but I would be splendid if it sufficed to only set it once :-) E.g. by passing an argument to `ScallopConf` or overriding a field.
I'm writing a tool at the moment with many options. It would be helpful to be able to divide the --help message into sections (e.g. basic options and advanced options, options specific to a particular capability of the tool that would otherwise be alphabetically sorted and scattered through the --help listing)

The only way I can see to do this currently is with subcommands, which changes the syntax of the command in non-meaningful way. I suppose I could also add a prefix to options to group them, but this also seems a bit silly as I'm making the user type extraneous characters so that the help message can be better, which seems like a silly and orthogonal trade-off.

I think it would be ideal to have some sort of group directive that would have a name and produce a help output similar to how subcommands work. This could perhaps also be done as a string or symbol as an extra optional parameter on opt/ScallopOption.
Integrate with [refined](https://github.com/fthomas/refined)

[scopt](https://github.com/fthomas/refined/tree/master/modules/scopt/shared/src) does it, would be nice to have for scallop as well.
Hey,
In a previous project, long time ago. I designed a command line parser library.

One feature that I had, which I thought was great, was to be able to turn off a command line.

Let's say you have this big jar, with a lot of arguments:

```
....jar --something value --foo bar ...
```

If you want to remove one parameter, you will need to erase the `--foo bar` and it can sometime be a pain if the value is long, of a path somewhere and you dont want to lose it just because you are testing something.

What I implemented what that you can use `//` instead of `--` and the parser will parse the command but not save the result. It will act as if it was not there and ignore all the values associated with it as well.

So you would have 
```
...jar --something value //foo bar --somethingelse value
```
And `//foo bar` will just be ignored. 

Maybe we could add that to Scallop.

Thanks ! 
Is is possible to have something like `--<keyword>` which would automatically create a 
`conf.keyword` boolean type argument ? 
The same way we can have the `--<number>` but with strings.
Hi there,

First, I would like to thank the creator(s) of this library, it is quite awesome and I have been
using it for a few years for my own project now:  https://github.com/flaminem/flamy

Several users often asked me if it could be possible to add options 
at the end of the command line, _i.e._ after the trailing args.

Here is a simple example of what I mean:

```
import org.rogach.scallop._

class Conf(arguments: Seq[String]) extends ScallopConf(arguments) {
  val apples = opt[Int](required = true)
  val bananas = opt[Int]()
  val name = trailArg[String]()
  verify()
}

object ScallopDemo extends App {

/* 
 * this works: 
 */
//  val conf = new Conf("--apples 4 --bananas 10 strangeTree".split(" "))

  
/* 
 * This returns an error: 
 * [scallop] Error: Required option 'name' not found
*/ 
  val conf = new Conf("--bananas 10 strangeTree --apples 4".split(" "))

  println("tree name is: " + conf.name())
  println("apples are: " + conf.apples())
  println("bananas are: " + conf.bananas())

}
```

Do you think it would be possible to make the second string work ? 
I can't think of a reason why not, as many projects with a CLI allow it, but perhaps 
there is I reason why Scallop cannot do it.


P.S. : If you are interested, for my project I even made a interactive shell with autocomplete for command, options and even their arguments. Now that it is done, thanks to scallop, when I add a new command or option to my project, I get auto-completion for free ! 
I even use custom ValueConverters to get autocomplete for the arguments.
You can see some asciicast demonstrating the project [here](http://flamy.readthedocs.io/en/latest/Demo.html)

The code behind it is not very clean at the moment, and is too specific for my project to be used for another, but if you want to have a look, you can try [this class](https://github.com/flaminem/flamy/blob/master/src/main/scala/com/flaminem/flamy/exec/shell/CliArgs.scala) or [this one](https://github.com/flaminem/flamy/blob/master/src/main/scala/com/flaminem/flamy/exec/shell/OptionCompleter.scala).
 
Also, beware that I use an old version of Scallop (0.9.5) at the moment, I need to upgrade it.

If anyone is interested to do something similar for his/her project, I would be glad to discuss about it, and perhaps I could even try making a generic library for others to use.

Have a nice day
