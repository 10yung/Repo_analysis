Most of the code for community and commercial regarding docker configs can be shared.

This PR moves out from this repository all these configs and keep the minimal configuration that needs to be overwritten in this repo.

Notes:

- Added a new environment variable to change the prefix of the containers (`community_web`). We can't use the name of the directory anymore since the docker-compose file is in a shared directory under common
- Download the requirements file directly instead of copying it from the context. We don't have access to from the context anymore since it's in an upper directory
- YAML for search is completely moved to common

Requires: https://github.com/readthedocs/common/pull/43
I have deleted my project from "Read The Docs" a long time ago. But the PDF versions of the docs are still present and referenced in Google. These documents are obsolete. This creates confusion for my users.

Deleting a project from "Read The Docs" should automatically remove all associated artifacts on your object storage/CDN.

Examples:

- `https://buildmedia.readthedocs.org/media/pdf/miniflux/2.0.12/miniflux.pdf`
- `https://buildmedia.readthedocs.org/media/pdf/miniflux/2.0.14/miniflux.pdf`
- `https://buildmedia.readthedocs.org/media/pdf/miniflux/2.0.15/miniflux.pdf`
- etc.

The folder `https://buildmedia.readthedocs.org/media/pdf/miniflux/` should be removed.

Thank you
## Details

* Read the Docs project URL: https://readthedocs.org/projects/pandas-ml-utils/
* Build URL (if applicable): https://readthedocs.org/projects/pandas-ml-utils/builds/10283494/
* Read the Docs username (if applicable):

## Expected Result

Passing build

## Actual Result

Build fails to provide requirement 

Collecting tensorflow==1.* (from -r requirements.txt (line 5))
  Downloading https://files.pythonhosted.org/packages/92/2b/e3af15221da9ff323521565fa3324b0d7c7c5b1d7a8ca66984c8d59cb0ce/tensorflow-1.15.0-cp37-cp37m-manylinux2010_x86_64.whl (412.3MB)
Killed

Command killed due to excessive memory consumption

Actually the build was passing many times, I have got problems only recently.

I am using system packages - so my configuration reads:
```
version: 2

# Build documentation in the docs/ directory with Sphinx
sphinx:
  configuration: docs/conf.py

# Optionally set the version of Python and requirements required to build your docs
python:
  version: 3.7
  system_packages: true
  install:
    - requirements: docs/requirements.txt
    - requirements: requirements.txt
```

## Details
The "view the docs" button should get an animation when you hover over it, as every other button on the page are animated it would make it look more standardised
gif can found at the bottom of the issue

## Expected Result
Animation when hovered over it



## Actual Result
No animation present

##GIF 
![ezgif com-crop](https://user-images.githubusercontent.com/33775493/72666265-7e4f6980-3a36-11ea-847a-eab97f3d07ff.gif)

After working on #6326 and realizing that PR will introduce a breaking change, I started playing around by removing more code that we know is not going to be needed once El Proxito is fully rolled out. The idea is to make just one breaking change with all of these remotions together if that is possible. This PR removes these,

- Syncers: all the files generated by the builders are copied directly from there to the Django Storage backend configured
- Some web server tasks: there is no need to remove, sync or copy files anymore since these servers won't have any documentation or state on them
- Symlink code: files are not served from disk anymore. They are served from storage backend via El Proxito
- Subdomain and SingleVersion logic + urls: this is not handled by El Proxito

This PR will introduce a big breaking change and force core team and contributors to use our docker-compose based solution for their development environment.
## Details

I'm trying to build the Python docs for the protocol buffers package, but hitting a roadblock in the installation of the protobuf package. It attempts to generate Python code for some proto files in the C++ build, but these are unavailable, as only the `./python` directory appears to be copied over for the pip installation.

My `.readthedocs.yml`:

```
# .readthedocs.yml
# Read the Docs configuration file
# See https://docs.readthedocs.io/en/stable/config-file/v2.html for details

# Required
version: 2

sphinx:
  configuration: python/docs/conf.py

# Setup build requirements for docs.
# Use conda so that we can install the latest libprotobuf package without
# having to build from scratch just for docs builds.
conda:
  environment: python/docs/environment.yml

python:
  version: 3.7
  install:
    - method: pip
      path: python
```

My `environment.yml`

```
name: protobuf
channels:
  - conda-forge
  - defaults
dependencies:
  - libprotobuf=3.11.2
  - make=4.2.1
  - pip=19.3.1
  - python=3.7.6
  - sphinx=2.3.1
  - sphinx_rtd_theme=0.4.3
  - sphinxcontrib-napoleon=0.7
```

* Read the Docs project URL: https://readthedocs.org/projects/tswast-protobuf/
* Build URL (if applicable): https://readthedocs.org/projects/tswast-protobuf/builds/10280344/
* Read the Docs username (if applicable): tswast

## Expected Result

*A description of what you wanted to happen*

I'd like to run the `pip install .` / `python setup.py install` in-place, rather than copy the subdirectory to a `tmp` folder.

## Actual Result

*A description of what actually happened*

I get file-not-found errors.
#6525 the link https://github.com/readthedocs/readthedocs.org/blob/master/fabfile.py is updated to https://github.com/readthedocs/readthedocs.org/blob/master/tasks.py.
This commit changes the bad link to fabfile.py to tasks.py file in Internationalization page.

Fixes #6525.
Still WIP, everything may change
Right now we are using the package from intersphinx itself to handle operations like this.

https://github.com/readthedocs/readthedocs.org/blob/0be5a61c457a1eb09265ca1962e7c76db1b6f02d/readthedocs/projects/tasks.py#L1433-L1484

Which as you can see, it doesn't have a great API. The `sphobjinv` package (https://sphobjinv.readthedocs.io/en/latest/) has a great API and can be used as a CLI too. We could use it for a future feature for intersphinx too.