- Horizon Version: v3.4.4
- Laravel Version: v6.9.0
- PHP Version: 7.4.0
- Redis Driver & Version: phpredis 5.1.1

### Description:

This issue has been haunting us a long time now. Initially we did not know why this was randomly happening (Issue #708 ) later we found out that the re-connecting in general was not working (Issue #716 ) which was fixed by taylor (thank you!) but this only is now working correctly for redis instances that are not password protected.

In a situation where horizon is running against a redis instances that is password protected, and redis is shortly (or long) unavailable, even after redis is back, horizon will not recover spitting out NOAUTH errors like this one:

```
ERROR: NOAUTH Authentication required. {"exception":"[object] (RedisException(code: 0): NOAUTH Authentication required. at /var/www/vendor/laravel/framework/src/Illuminate/Redis/Connections/Connection.php:111)
[stacktrace]
#0 /var/www/vendor/laravel/framework/src/Illuminate/Redis/Connections/Connection.php(111): Redis->lLen('commands:master...')
#1 /var/www/vendor/laravel/framework/src/Illuminate/Redis/Connections/PhpRedisConnection.php(440): Illuminate\\Redis\\Connections\\Connection->command('llen', Array)
#2 /var/www/vendor/laravel/framework/src/Illuminate/Redis/Connections/Connection.php(211): Illuminate\\Redis\\Connections\\PhpRedisConnection->command('llen', Array)
#3 /var/www/vendor/laravel/framework/src/Illuminate/Redis/Connections/PhpRedisConnection.php(482): Illuminate\\Redis\\Connections\\Connection->__call('llen', Array)
#4 /var/www/vendor/laravel/horizon/src/RedisHorizonCommandQueue.php(51): Illuminate\\Redis\\Connections\\PhpRedisConnection->__call('llen', Array)
#5 /var/www/vendor/laravel/horizon/src/MasterSupervisor.php(263): Laravel\\Horizon\\RedisHorizonCommandQueue->pending('master:d4711be9...')
#6 /var/www/vendor/laravel/horizon/src/MasterSupervisor.php(240): Laravel\\Horizon\\MasterSupervisor->processPendingCommands()
#7 /var/www/vendor/laravel/horizon/src/MasterSupervisor.php(213): Laravel\\Horizon\\MasterSupervisor->loop()
#8 /var/www/vendor/laravel/horizon/src/Console/HorizonCommand.php(63): Laravel\\Horizon\\MasterSupervisor->monitor()
#9 [internal function]: Laravel\\Horizon\\Console\\HorizonCommand->handle(Object(Laravel\\Horizon\\Repositories\\RedisMasterSupervisorRepository))
#10 /var/www/vendor/laravel/framework/src/Illuminate/Container/BoundMethod.php(32): call_user_func_array(Array, Array)
#11 /var/www/vendor/laravel/framework/src/Illuminate/Container/Util.php(36): Illuminate\\Container\\BoundMethod::Illuminate\\Container\\{closure}()
#12 /var/www/vendor/laravel/framework/src/Illuminate/Container/BoundMethod.php(90): Illuminate\\Container\\Util::unwrapIfClosure(Object(Closure))
#13 /var/www/vendor/laravel/framework/src/Illuminate/Container/BoundMethod.php(34): Illuminate\\Container\\BoundMethod::callBoundMethod(Object(App\\Extensions\\Illuminate\\Foundation\\Application), Array, Object(Closure))
#14 /var/www/vendor/laravel/framework/src/Illuminate/Container/Container.php(590): Illuminate\\Container\\BoundMethod::call(Object(App\\Extensions\\Illuminate\\Foundation\\Application), Array, Array, NULL)
#15 /var/www/vendor/laravel/framework/src/Illuminate/Console/Command.php(202): Illuminate\\Container\\Container->call(Array)
#16 /var/www/vendor/symfony/console/Command/Command.php(255): Illuminate\\Console\\Command->execute(Object(Symfony\\Component\\Console\\Input\\ArgvInput), Object(Illuminate\\Console\\OutputStyle))
#17 /var/www/vendor/laravel/framework/src/Illuminate/Console/Command.php(189): Symfony\\Component\\Console\\Command\\Command->run(Object(Symfony\\Component\\Console\\Input\\ArgvInput), Object(Illuminate\\Console\\OutputStyle))
#18 /var/www/vendor/symfony/console/Application.php(1011): Illuminate\\Console\\Command->run(Object(Symfony\\Component\\Console\\Input\\ArgvInput), Object(Symfony\\Component\\Console\\Output\\ConsoleOutput))
#19 /var/www/vendor/symfony/console/Application.php(272): Symfony\\Component\\Console\\Application->doRunCommand(Object(Laravel\\Horizon\\Console\\HorizonCommand), Object(Symfony\\Component\\Console\\Input\\ArgvInput), Object(Symfony\\Component\\Console\\Output\\ConsoleOutput))
#20 /var/www/vendor/symfony/console/Application.php(148): Symfony\\Component\\Console\\Application->doRun(Object(Symfony\\Component\\Console\\Input\\ArgvInput), Object(Symfony\\Component\\Console\\Output\\ConsoleOutput))
#21 /var/www/vendor/laravel/framework/src/Illuminate/Console/Application.php(93): Symfony\\Component\\Console\\Application->run(Object(Symfony\\Component\\Console\\Input\\ArgvInput), Object(Symfony\\Component\\Console\\Output\\ConsoleOutput))
#22 /var/www/vendor/laravel/framework/src/Illuminate/Foundation/Console/Kernel.php(131): Illuminate\\Console\\Application->run(Object(Symfony\\Component\\Console\\Input\\ArgvInput), Object(Symfony\\Component\\Console\\Output\\ConsoleOutput))
#23 /var/www/artisan(37): Illuminate\\Foundation\\Console\\Kernel->handle(Object(Symfony\\Component\\Console\\Input\\ArgvInput), Object(Symfony\\Component\\Console\\Output\\ConsoleOutput))
#24 {main}
```
Important. This ONLY happens with the phpredis driver, predis is not affected.

### Steps To Reproduce:

* Have a fresh (or not fresh) laravel installation with horizon.
* Have a redis instance that is password protected (for example running it from this dockerfile)
* configure your database.php in laravel accordingly to have correct redis password set
```
FROM redis:5.0.2
COPY redis.conf /usr/local/etc/redis/redis.conf
CMD [ "redis-server", "/usr/local/etc/redis/redis.conf" ]
```
where the redis.conf looks like this
```
requirepass testpassword
```
* Then start horizon, let it warm up
* turn off your redis instance or break the connection between horizon & redis somehow.
* turn on redis instance again (or enable connection between horizon & redis again)
* horizon will continuously spit out errors as specified above (NOAUTH)
Add the ability to purge individual queues with a confirmation.

Fixes https://github.com/laravel/horizon/issues/328

![image](https://user-images.githubusercontent.com/7295774/72201517-d7eaed80-34a4-11ea-8edf-51266608ca73.png)

![image](https://user-images.githubusercontent.com/7295774/72201564-5ba4da00-34a5-11ea-89d4-74e283d2979e.png)

- Horizon Version: 3.0
- Laravel Version: 5.8
- PHP Version: 7.2
- Redis Driver & Version: predis/phpredis 5.1
- Database Driver & Version: Postgres 11.6

### Description:
Laravel Horizon consuming more connections than workers. My setup has 150 workers taking care of approx. 2000 jobs in an hour and I have 197 connections available for Postgres. I believe technicall laravel horizon should only consume max 150 connections if we have workers. Please correct if I am wrong. 

However, the connections usage go beyond 197 and thus simple halts my application. The Jobs include update operations using Eloquent and raw queries - mainly INSERT FROM SELECT. 

Overall laravel horizon taking care of approx. 2000 jobs / HOUR and the run time depends on job which varies from 1 second to max 5 minutes.  

- Horizon Version:  v3.4.3
- Laravel Version: v6.6.0
- PHP Version: 7.3.11
- Redis Driver & Version: predis/phpredis 1.1.1 or php-redis extension 5.1.1, same result
- Database Driver & Version:

### Description:

After we upgraded from Laravel 5.8 to 6.6 / Horizon 3.2.2 to 3.4.3 the resource consumption of our redis 4 server started to grow exponentially, sitting at around 5Gb.

Horizon Dashboard:
![horizon-dashboard](https://user-images.githubusercontent.com/10168637/70083601-77d27300-15eb-11ea-9da5-3718097068bd.png)

Redis instance dedicated to horizon:
![redis-usage](https://user-images.githubusercontent.com/10168637/70083581-7143fb80-15eb-11ea-8511-0aa624706bb3.png)

Previous version vs new (the release was pushed Nov 25):

![Screenshot_1575402597](https://user-images.githubusercontent.com/10168637/70084480-14494500-15ed-11ea-8a09-692f7fbf36f5.png)




### Steps To Reproduce:

We have no clue of what is causing this behavior, but our number of jobs is almost the same as before, the only difference is the framework and horizon versions.
Isn't it nice to be able to remove a job from a queue by its identifier or by its tags ?
consider I have job which manipulate my main image and create multiple versions of each image (thumb, ... )
when an image is replaced and uploaded again, I need to be able to remove older job.
This is how I think it should be :
when dispatching a job we can give it and identifier or some tags or ...,
and there is a builtin laravel functionality which helps us remove the job .

for example 
```php
Job::removeById($id);
```
or
```php
Job::removeByTag($tag);
```
- Horizon Version: 3.4.3
- Laravel Version: 6.6.0
- PHP Version: 7.2.24
- Redis Driver & Version: phpredis 5.1.1
- Database Driver & Version: mysql

### Description:
When running 

### Steps To Reproduce:
- Create a job that needs more than 60 seconds and to run and uses a lot of memory (I generated 3,000,000 unique strings using $faker->unique()->regexify() for the sake of testing). I'll attach the job file. 
- (Re)start horizon
- Queue the job

### What happens:

- Despite the memory limit being specified as 64MB in config/horizon.php the worker threads are started with the option --memory=128 which is also ignored and the processes are allowed to consume nearly a whole gigabyte of resident memory without failing

- Despite the job completing without issue, Laravel logs an exception (local.ERROR: ... attempted too many times or run too long. The job may have previously timed out. {"exception":"[object] (Illuminate\\Queue\\MaxAttemptsExceededException(code: 0): App\\Jobs\\SendOrderEmail ... at /work/jsong/vendor/laravel/framework/src/Illuminate/Queue/Worker.php:612...) 

- A job that took 1 minute and 36 seconds to complete is displayed in the horizon recent jobs list as having taken 3.63 seconds. Another that took 1m32s displays as 0.68s. Another that also took 1m32s displays as 0.18s. 

Looking at the timing of the exceptions and when the job was completed it seems that Horizon is logging the difference between when the exception was thrown and when the job was completed.  I thought that perhaps this is more of a laravel issue than a horizon issue. But when I work the queue manually with `php artisan queue:work` or `php artisan queue:work --deamon` the exception is not thrown and the horizon interface reports time correctly

[SendOrderEmail.php.txt](https://github.com/laravel/horizon/files/3900586/SendOrderEmail.php.txt)



After changing to Horizon we had a lot of jobs failing which didn't fail before, so this means our failed jobs table is getting a lot of entries.

We can easily retry them from the UI, however going through 4-5 pages and finding which failed jobs has been retries and which hasn't is pretty tiresome. 

I would be awesome if we could filter away all the failed jobs which has been completed, so we only have a list of the failed jobs we need to handle still.
- Horizon Version: 4.4.2
- Laravel Version: 6.3
- PHP Version: 7.3.11
- Redis Driver & Version: predis/phpredis 1.1
- Database Driver & Version: MariaDB 10.4.10

### Description:
See the following job example:
```
<?php

namespace App\Jobs\Media;

use Illuminate\Bus\Queueable;
use Illuminate\Contracts\Queue\ShouldQueue;
use Illuminate\Foundation\Bus\Dispatchable;
use Illuminate\Queue\InteractsWithQueue;
use Illuminate\Queue\SerializesModels;
use Illuminate\Support\Facades\Redis;

class Import implements ShouldQueue
{
    use Dispatchable;
    use InteractsWithQueue;
    use Queueable;
    use SerializesModels;

    public function __construct()
    {
        //
    }

    /**
     * @return \DateTime
     */
    public function retryUntil()
    {
        return now()->addMinutes(30);
    }

    /**
     * Execute the job.
     */
    public function handle()
    {
        Redis::funnel(static::class)->limit(1)->then(function () {
            // Import media logic (no job)

            return true;
        }, function () {
            return $this->release(10);
        });
    }
}
```

Results in:
```
Illuminate\Queue\MaxAttemptsExceededException:  App\Jobs\Media\Import has been attempted too many times or run too  long. The job may have previously timed out. in  /../vendor/laravel/framework/src/Illuminate/Queue/Worker.php:612
--
Stack trace:
#0   /../vendor/laravel/framework/src/Illuminate/Queue/Worker.php(156):   Illuminate\Queue\Worker->maxAttemptsExceededException(Object(Illuminate\Queue\Jobs\RedisJob))
```

### Steps To Reproduce:
1. Set retryUntil in job
2. Dispatch job
3. Job fails around ~60 seconds
- Horizon Version: v3.4.2
- Laravel Version: v6.0.3
- PHP Version: 7.2.23
- Redis Driver & Version: predis/predis:v1.1.1

### Description:
We are deploying horizon onto 2 separate kubernetes pods. In some cases one of the pods that starts horizon outputs:

````
Horizon started successfully.
A supervisor with this name is already running.
````

and stays in that state for ever. It seems like it's not trying to boot up a new supervisor again.
Firstly i can not explain why there is already that name taken (as every pod has unique hostname) but this is not the issue currently.

My question is: in the SupervisorCommand class the 'handle' method will return 13 but i can not see that horizon in any way considers this and tries to boot up a new supervisor again. The state after this is a horizon master instance running without any supervisors, is this really by design?

the test-config i used is rather straight forward:

````
        'integration' => [
            'supervisor-1' => [
                'connection' => 'redis',
                'queue' => ['low', 'medium', 'high'],
                'balance' => 'auto',
                'minProcesses' => 3,
                'maxProcesses' => 10,
                'tries' => 1,
                'timeout' => 30,
                'sleep' => 1,
            ],
        ],
````

### Steps To Reproduce:

In SupervisorCommand class, throw any Exception after the line `$supervisor->ensureNoDuplicateSupervisors();` in the `handle` method.
Then run `php artisan horizon`

You should receive the output i mentioned earlier, and `php artisan horizon:list` should output something like this:

````
+-----------------------------+-----+--------------+---------+
| Name                        | PID | Supervisors  | Status  |
+-----------------------------+-----+--------------+---------+
| worker-f847fbbfd-zdzrw-8ovz | 1   | None         | running |
+-----------------------------+-----+--------------+---------+
````
There is a great feature that notifies when a job need our attention for `Long Wait Detected`.

It would be great there will be also a notification when the `Long Wait Detected` is resolved.