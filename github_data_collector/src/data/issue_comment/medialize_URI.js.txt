Are things like `directory()` and `suffix()` really necessary? The RFC doesn't say much about this, and there are plenty of cases where "all but the last non-empty segment" is not actually the directory. For example: in `/x/index.php/y/z`, the directory is `x`, the file is `index.php`, and `/y/z` is an additional argument passed to the php script.

I note that Mozilla URL and Node.js URL don't offer these conveniences.

I ask, because I am modeling my C++ URL library after this one and I am hearing a lot of voices from self-professed experts that "these features are not necessary." So before I do a bunch of possibly unnecessary work, are there use cases for manipulating the directory? For replacing path segments in the middle (i.e. replace the middle path segment with these 3 new segments)? Do you have any links to projects that make heavy use of URI.js?

Thanks!

update href of Google Closure Uri
When running

```js
  const uri = urijs(href)
  console.log(href, defaultScheme)
  uri.scheme(defaultScheme)
  console.log(uri.toString())
```

in version 1.19.1 the console reads:

```
example.com https
https://example.com
```

Which is what's intended, however, in version 1.19.2 it reads:

```
example.com https
https:///example.com
```

looks like there's an extra `/` getting in there somehow?
Coming from `qs` we would control how arrays in query parameters would be with the `arrayFormat` option (quote from `qs` docs below):

> You may use the arrayFormat option to specify the format of the output array:
>
>     qs.stringify({ a: ['b', 'c'] }, { arrayFormat: 'indices' })
>     // 'a[0]=b&a[1]=c'
>     qs.stringify({ a: ['b', 'c'] }, { arrayFormat: 'brackets' })
>     // 'a[]=b&a[]=c'
>     qs.stringify({ a: ['b', 'c'] }, { arrayFormat: 'repeat' })
>     // 'a=b&a=c'
>     qs.stringify({ a: ['b', 'c'] }, { arrayFormat: 'comma' })
>     // 'a=b,c'

How can we control the format with `urijs`?

Hi,

I don't see any URITemplate extraction method... did I miss it or is there a recommanded companion to do it, please?
Using your library inside a Microsoft SharePoint project, it rendered some SharePoint functionality on a page invalid, because SharePoint seems to have some own JavaScript "`URI`" identifier.

Including your library resulted in JavaScript errors generated by SharePoint.

Solution for me was to download your library from the [Build page](https://medialize.github.io/URI.js/build.html) and then use a text editor to replace all text occurances of "URI" with "MyOwnURI".

Later, I used "MyOwnURI" when accessing your library.

### Suggestion

Maybe an option on that [Build page](https://medialize.github.io/URI.js/build.html) to specify a prefix or alternative name for "URI" would be helpful.

subdomain("http://my-subdomain.localhost") -> empty
domain("http://my-subdomain.localhost") -> my-subdomain.localhost
When initializing with a string that is missing the protocol, like `URI('somesite.com');`, the string is parsed as a path and not a URI.

Because of this, `domain(), host(), and port()` do not function as expected and return "";

See https://jsfiddle.net/Ln9c0jpy/1/

Related issues:
https://github.com/medialize/URI.js/issues/260
https://github.com/medialize/URI.js/issues/232
https://github.com/medialize/URI.js/issues/187

This change adds a `toUri` method that allows the user to do this:

`let uri = new URI(URI.toUri('somesite.com', {scheme: 'http'}));`

after which, `uri.domain()` will return the expected `somesite.com`

Is it possible to lower the requirement for ` "punycode": "^2.1.0"`  to ` "punycode": "^1.4.1"`?

The difference between punycode 1.4.1 and punycode 2.1.0 is just that the latter is written in ES6. 

> The current version supports recent versions of Node.js only. It provides a CommonJS module and an ES6 module. For the old version that offers the same functionality with broader support, including Rhino, Ringo, Narwhal, and web browsers, see v1.4.1.
-- [punycode.js](https://github.com/bestiejs/punycode.js/)

When punycode 2.1.0 is used under IE11, it breaks with _SCRIPT1002: Syntax error_ , because some ES6 constructs aren't supported.

I had this problem on the application I'm developing, and I fixed it by downgrading punycode to 1.4.1. Unfortunately your package doesn't allow a version lower than 2.1.0 and I'm afraid that it would break again if the punycode you are dependent on is used under IE11.