
I followed the [instructions](https://vamp.io/documentation/installation/v0.9.5/kubernetes/) to install Vamp on a Kubernetes cluster, I installed it using Minikube v0.28.2 and Kubernetes v1.10.0.
Since RBAC is enabled by default, Vamp cannot create resource:

```
deployments.extensions is forbidden: User "system:serviceaccount:default:default" cannot create deployments.extensions in the namespace "default"
```

`vamp_kube_quickstart.sh` used in the instruction is missing the service account and role/rolebinding configuration.

Maybe not all the features would work, but with the following configuration I'm able to deploy/delete/update a deployment:
```
apiVersion: v1
kind: ServiceAccount
metadata:
  name: vamp
  namespace: default
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: vamp
rules:
- apiGroups:
  - ""
  resources:
  - services
  - namespaces
  - pods
  verbs:
  - create
  - delete
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - extensions
  resources:
  - deployments
  - replicasets
  verbs:
  - create
  - delete
  - get
  - list
  - patch
  - update
  - watch
- nonResourceURLs:
  - "*"
  verbs:
  - get
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: vamp
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: vamp
subjects:
- kind: ServiceAccount
  name: vamp
  namespace: default
```
Hi,
just noticed that the client doesn't sets proper exit code.
Example:
`$ vamp list namespacesxxx`
`Please choose the artifact to list: deployments, gateways, blueprints, breeds, workflows, roles, users, tokens.`
`$ echo $?`
`0`
and even worst
`$vamp create blueprint --namespace XXXXXX --file ~/order-intake_first.yaml`
`Cannot execute the request command: Unexpected type for path 'memory'.`
`$ echo $?`
`0`

It would be lovely if we can have an appropriate exit code cos otherwise in automated deployment like ansible we need to check every command.

`vamp -V`
0.5.0

Even though the Vamp httpClient is configured to follow redirects, it's not following the Mesos-specific HTTP/307 that redirects to the current cluster leader.

Hm, or is it? https://github.com/magneticio/vamp/commit/1a5b460954e53ac7665879334238eb29033174d9 Not sure if that's the API in use here.
It is impossible to get more than 30 items from the `/events` endpoint due to pagination not working as described in https://vamp.io/documentation/api/v0.9.5/using-the-api/#pagination.
The `per_page` and `page` parameters seem to be completely ignored.

Easy to reproduce with the following bash command or just by counting items.
```bash
http GET "localhost/service/vamp/api/v1/events?per_page=40" | jq '.[].id' | wc -l
      30
```
Using Vamp 0.9.5 on DC/OS but this is most probably unrelated to orchestrator.

after running Vamp sync-fix issue with event-based workflows for more than 24 hours it seems Metronome has become unresponsive, i cannot access the metronome jobs page anymore, Vamp shows errors in the log that i cannot access the metronome endpoint:

```
rsp [HttpMethod(GET) http://metronome.mesos:9000/v1/jobs] - exception: TCP idle-timeout encountered on connection to [metronome.mesos:9000], no bytes passed in the last 1 minute
```

, and i do see a set of outstanding metronome offers:

<img width="1274" alt="screen shot 2017-11-02 at 10 37 19" src="https://user-images.githubusercontent.com/355268/32319275-4e08add4-bfba-11e7-95c9-205d5e116645.png">

My hunch is that we don't handle the creation and/or termination of jobs correctly, and thus overload metronome jobs at some point and make it unresponsive. 

How to reproduce: spin up Vamp DCOS sync-fix docker package on DCOS 1.10, it should work with metronome out of the box, create an event based workflow with timeout and execution period both 0 (zero) so they run as one-shots, and let it run for a while. Also try to suspend and restart the workflows and check metronome jobs status, often they stay in "running" status in DCOS jobs view. Trigger the event with another workflow/script. Let it run for a few hours or days.

when creating Vamp workflow scripts the development experience is very "raw", there is no valuation, no debugging, no auto-suggestion.

It would greatly improve the experience of creating Vamp workflow scripts if we can add:

- validation of Node.js syntax in editor
- highlighting of Node.js syntax
- highlighting and validation of Vamp API objects/structures/constructs/functions/endpoints
- auto-suggestion of Vamp API objects/structures/constructs/functions/endpoints
- live running and debugging of a workflow in the browser (in a sandbox environment f.e.)
- provide scaffolding/templates for common workflow scenarios
- provide higher-level constructs using f.e. an embedded Vamp CLI
- make it easy to extend the Workflow Agent with custom Node.js libraries f.e. for Slack integration
The docs don't state what metrics are available on the metrics endpoint or directly on elasticsearch.
It's very unclear how to query them either using the REST endpoint `/metrics` or using direct queries to elasticsearch. Furthermore there seem to be three naming schemes:

1. haproxy acronyms like "Tt" and "ft", see https://gist.github.com/ayosec/8112308
2. hyphened full words, "response-time", see https://vamp.io/documentation/api/v0.9.5/api-metrics/
3. camelCased full words, responseTime in the event tab in the UI.
https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options
Vamp UI uses iframes in combination with Vamp reverse proxy: app output, workflow UI's etc. 
All of them require the same origin directive (SAMEORIGIN).
when modifying a gateway it's possible to create an invalid config template for VGA, even though the YAML is valid. VGA will throw an error when it's not able to parse this config file. This error is not shown in the Vamp log, so there is no info on why the new VGA config is not being applied. We should show an error in the Vamp log. More generic this means that Vamp agents do need to send error messages to Vamp for logging and alerting.