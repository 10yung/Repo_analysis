**Is your feature request related to a problem? Please describe.**
My problem is the following :
I want to connect to a known device, from which I stored the UUID, but timeout after 30s if the device is not reachable.
I use peripheral.establishConnection observable, and I put a timeOut operator on establishConnection observable.
I works well when the device is not reachable, the onError.
But when the device is reachable, it disconnects it after 30s (when the timeout is reached).
I tried to add a .take(1) operator, but it then completes and dispose the observable and thus disconnect the device just after connection.

**Describe the solution you'd like**
I would like to be able to apply a timeout on peripheral.establishConnection that just fires if the device is not found, but does not close the connection if it is found

**Additional context**
Here is my code snippet :
```
let connectObservableCreator = {
                return peripheral.establishConnection( options: [
                    CBConnectPeripheralOptionNotifyOnConnectionKey: true,
                    CBConnectPeripheralOptionNotifyOnDisconnectionKey: true,
                    CBConnectPeripheralOptionNotifyOnNotificationKey: true
                    ])
                   
                    .do(onNext: { [weak self] _ in
                        //SdkLogger.logError(textToLog: "connectPeripheral : do onNext connected")
                        self?.observeDisconnect(for: peripheral, timeout: timeout, failed: failed)
                    })
                    .timeout(RxTimeInterval(BleManager.connectTimeoutValue), scheduler: MainScheduler.instance)
                    .take(1)
            }
            let disposable = connectObservableCreator()
            
                .subscribe(onNext: { _ in
                    SdkLogger.logError(textToLog: "connectPeripheral : connected")
                    
                    
                    // discover its services and characteristics
                    _ = self.discoverServices(for: peripheral, hardwareDevice: hardwareDevice, connected: connected, timeout: timeout, failed: failed)
                
                    
                }, onError : { [weak self] error in
                    DispatchQueue.main.async(execute : {
                        
                        self?.onError(error: error, failed: failed, timeout:  timeout)}
                    )}, onCompleted: {
                        //SdkLogger.logError(textToLog: "connection completed")
                }, onDisposed: {
                    //SdkLogger.logError(textToLog: "connection disposed")
                })
```
This task is in regards to the Communication team:
+ Normal links were replaced by UTM links in terms of tracking.

Best regards,
Nam Bui
This also resolves an issue when including RxBluetoothKit with RxSwift for the watchOS platform
iOS 13.2.2
<img width="1536" alt="Screen Shot 2019-11-16 at 11 48 33" src="https://user-images.githubusercontent.com/22592185/68987654-bd164700-086e-11ea-839a-cb69dd012f1e.png">


Hello,

There is something I don't understand here:

```
manager.scanForPeripherals(withServices: [serviceId])
    .take(1)
    .flatMap { $0.peripheral.establishConnection() }
    .flatMap { $0.discoverServices([serviceId]) }
    .flatMap { Observable.from($0) }
    .flatMap { $0.discoverCharacteristics([characteristicId]) }
    .flatMap { Observable.from($0) }
    .flatMap { $0.readValue() }
    .subscribe(onNext: { print("Value: \($0.value)") })
```

What is the reason of using discoverServices if we already know that the device has the service we want? (using scanForPeripherals)

And another question, in iOS, can I use a service that is not being advertised? 
It seems in android is possible but according to this, that is not possible in iOS (second response):
https://stackoverflow.com/questions/45896372/ios-how-to-discover-unadvertised-services-on-a-ble-peripheral

What do you think about that? Thanks a lot.

I understand we have observeValueUpdateAndSetNotification method to get notifications whenever a characteristic changes. 

What about subscribe to indications? Do we use the same method to subscribe to indications instead of notifications?
**Describe the bug**
Getting compilation errors while trying to build RxBluetoothKit with Swift 5.1
error: module compiled with Swift 5.0.1 cannot be imported by the Swift 5.1 compiler:

**To Reproduce**
Steps to reproduce the behavior:
Cleared XCode DerivedData,  set command line tools to XCode 11.0, ran "rm -rf ~/Library/Caches/org.carthage.*"

My cartfile has the following:
github "ReactiveX/RxSwift" "5.0.0"
github "Polidea/RxBluetoothKit" "5.2.0"

along with other stuff such as AlamoFire, Reachability, SnapKit etc

If I comment out RxBluetoothKit on cartfile, "carthage update --platform iOS --no-use-binaries" goes through just fine. However if I include  RxBluetoothKit, I see this "error: module compiled with Swift 5.0.1 cannot be imported by the Swift 5.1 compiler:"  

I already have RxSwift rebuilt using Swift 5.1, "swift --version" shows "Apple Swift version 5.1"

I think RxBluetoothKit picks up its own version of an older RxSwift. 


Is there a workaround ? I can't use an older version of XCode because of an XCode bug 
https://developer.apple.com/documentation/xcode_release_notes/xcode_10_2_release_notes - #47598583

**Expected behavior**
RxBluetoothKit compiles successfully on "carthage update  --platform iOS --no-use-binaries" with Swift 5.1/XCode 11

**Environment:**
 - Device: [Macbook Pro]
 - OS: [macOS 10.14.6]
 - Library version [RxBluetoothKit 5.2.0]
 - Swift version [5.1]
- XCode Version 11.0 beta 6 (11M392r)

Hi! We are implementing Bluetooth scanning in our App, it's my first time using RxBluetoothKit and I am loving it!

I am having trouble writing my tests for our Bluetooth service:

```
protocol BluetoothScanServiceProtocol {
    func startScanForBluetoothDevices(with service: String) -> Observable<ScannedPeripheral>
    func stopScanningBluetoothDevices()
}
```

How can I mock the ScannedPeripheral class? 
I won't have a real ScannedPeripheral on my tests of course 

My mock class: 
```
final class MockBluetoothService: BluetoothScanServiceProtocol {
    func startScanForBluetoothDevices(with service: String) -> Observable<ScannedPeripheral> {
        return Observable.just(ScannedPeripheral()) // I can't initialize ScannedPeripheral 
    }

    func stopScanningBluetoothDevices() {}
}
```
**Describe the bug**
Trying to scan the device which brodcasts serviceA
```
manager.observeState()
            .startWith(manager.state)
            .filter { $0 == .poweredOn }
            .timeout(3.0, scheduler: MainScheduler.instance)
            .take(1)
            .flatMap { _ in self.manager.scanForPeripherals(withServices: [BLEService.serviceA.uuid]) }
            .take(5.0, scheduler: MainScheduler.instance)
            .toArray()
            .subscribe(onNext: { peripheral in
                print("Scanned: \(peripheral)")
            })
```

**To Reproduce**
Use above code. Im trying to scan a device that broadcasts serviceA. After executing the above code, i get `Scanned: []`
**Environment:**
 - Device:  iPhone7, Macbook Pro 2018
 - OS: iOS12.2, macOS 10.14
 - Library version latest
 - Swift version 4.1
