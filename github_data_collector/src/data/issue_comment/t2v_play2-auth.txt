On MvnRepository a new version of play2-auth is available (many thanks!). However, any git commits are 3+ years old here? Using play-2.7.x-auth-0.15-RC1 gives too many errors. Is there any documentation available what the changes are and how migration from previous version should be done?
Many Thanks
Jens
I came across a problem with Facebook authenticator.

Error log:
```
[ERROR] from controllers.FacebookAuthController in application-akka.actor.default-dispatcher-11 - Failed to retrieve access token. {"access_token":"EAADn...SUu","token_type":"bearer","expires_in":5183538}
jp.t2v.lab.play2.auth.social.core.AccessTokenRetrievalFailedException: Failed to retrieve access token. {"access_token":"EAADn...SUu","token_type":"bearer","expires_in":5183538}
	at jp.t2v.lab.play2.auth.social.providers.facebook.FacebookAuthenticator.parseAccessTokenResponse(FacebookAuthenticator.scala:68)
	at jp.t2v.lab.play2.auth.social.providers.facebook.FacebookAuthenticator$$anonfun$retrieveAccessToken$1.apply(FacebookAuthenticator.scala:42)
	at jp.t2v.lab.play2.auth.social.providers.facebook.FacebookAuthenticator$$anonfun$retrieveAccessToken$1.apply(FacebookAuthenticator.scala:40)
Caused by: scala.MatchError: List({"access_token":"EAADn...SUu","token_type":"bearer","expires_in":5183538}) (of class scala.collection.immutable.$colon$colon)
	at jp.t2v.lab.play2.auth.social.providers.facebook.FacebookAuthenticator$$anonfun$parseAccessTokenResponse$2.apply(FacebookAuthenticator.scala:59)
	at jp.t2v.lab.play2.auth.social.providers.facebook.FacebookAuthenticator$$anonfun$parseAccessTokenResponse$2.apply(FacebookAuthenticator.scala:58)
```

The problem is that FacebookAuthenticator.scala:59 is decoding response wrong.

``` 
params <- response.body.split("&").toList
key :: value :: Nil = params.split("=").toList
if key == "access_token"
```
The code above is trying to decode this response body in json format:
```
{"access_token":"EAADn...SUu","token_type":"bearer","expires_in":5182252}
```
The readme suggests you use "new CookieIdContainer" at the bottom for a stateless play app, but the class was renamed in this commit to TransparentIdContainer https://github.com/t2v/play2-auth/commit/06599bb92715ded6c8254f755394f9130d643a8d
Support for play 2.6

* before

<img width="382" alt="2017-11-25 23 30 47" src="https://user-images.githubusercontent.com/379820/33231428-c2b788f4-d238-11e7-9942-5b502d2a0afc.png">

* after

<img width="384" alt="2017-11-25 23 31 08" src="https://user-images.githubusercontent.com/379820/33231432-cab3dad0-d238-11e7-9b51-6684e0402782.png">

I'm on Play 2.4 using Slack auth and noted that I need to include the `ws` Play dependency manually or I get "no class def WS" type errors.
Hello,

Do you plan to add support for Play 2.6.x

Thank you
This is your code: 
authorize(request.user, authority) collect {
        case true => None
      } recoverWith {
        case _ => authorizationFailed(request, request.user, Some(authority)).map(Some.apply)
      }
How should I do?
Hi,

I recently upgraded my Scala/Play project from Play! 2.3 to 2.4; and upgraded the play2-auth dependency from 0.14.1 to 0.14.2 at the same time.
Since then I've had troubles with user log in: if the login contains a white space, then it won't be possible.
The error trace was the following:

```
21 Jun 2016 11:40:02.166 [error] p.c.s.n.PlayDefaultUpstreamHandler - Cannot invoke the action
java.lang.IllegalArgumentException: Cookie value contains an invalid char:
        at play.core.netty.utils.CookieEncoder.validateCookie(CookieEncoder.java:47) ~[play-netty-utils-2.4.6.jar:2.4.6]
        [...]
```

As written in https://curl.haxx.se/rfc/cookie_spec.html, space must be encoded to be accepted in cookies.
Therefore, as a workaround, I updated the code of my trait extending AuthConfig:

``` scala
  override lazy val idContainer: AsyncIdContainer[Id] = AsyncIdContainer(new TransparentIdContainer[Id])
```

becomes

``` scala
override lazy val idContainer: AsyncIdContainer[Id] = AsyncIdContainer(new EncodedIdContainer[Id])

class EncodedIdContainer[Id: ToString: FromString] extends TransparentIdContainer[Id] {

  override def startNewSession(userId: Id, timeoutInSeconds: Int) = {
    encodeTokenString( implicitly[ToString[Id]].apply(userId) )
  }

  override def get(token: AuthenticityToken) = {
    implicitly[FromString[Id]].apply(decodeTokenString(token))
  }

  private def encodeTokenString(tokenStr: String): String = {
    java.net.URLEncoder.encode(tokenStr, "UTF-8")
  }

  private def decodeTokenString(tokenStr: String): String = {
    java.net.URLDecoder.decode(tokenStr, "UTF-8")
  }
```

Am I missing something or is that a limitation of the module?
Thanks in advance!

_PS: note that I am using a particular implementation mixing AuthElement and OptionalAuthElement (see https://github.com/t2v/play2-auth/issues/148)._
