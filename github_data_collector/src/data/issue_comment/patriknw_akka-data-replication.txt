Designing for eventual consistency is difficult, or at least different. We should provide guidelines for various design choices, such as read/write consistency levels.

Let's collect some topics in this issue. Please contribute. Links to blog posts or other related reading/presentations?

i noticed akka-Data-Replication also use VectorClock(source from Akka), i have some question:
      use ordered UniqueAddress for compare in Akka's VectorClock maybe it is ok, because the akka memberships status maintained by one 'leader' node,and leader is in the first place in UniqueAddress of nodes ring (my understanding is correct?)
       but for ORSet's merge, it use Set's VectorClock to compare element's 'birth dot', in the 'mergeDisjointKeys' function 'if (vclock > dots || vclock == dots)'
this '>' compare also use ordered UniqueAddress, is it necessary? or just maybe compare 'vclock.versions.get(node)' vs dots?
       if i miss something, please correct me, thanks!

_Only for discussion not finished yet_
