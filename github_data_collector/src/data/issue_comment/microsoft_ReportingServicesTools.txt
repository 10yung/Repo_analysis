I'm attempting to run a command like this:
Out-RsRestFolderContent -RsFolder / -ReportPortalUri 'https://reports.site.com/Reports' -Destination C:\_TestingPBIRS -Recurse

IT works for the first couple of folders as we don't have linked reports, but as soon as I get to a folder with one the script just stops with this error:
Unsupported item type! We only support items which are of type Report, DataSet, DataSource, Mobile Report or Power BI Report

I'm using this power shell version.
Major  Minor  Build  Revision
-----  -----  -----  --------
5      1      17763  771
**Do you want to request a *feature* or report a *bug*?**
Feature

**What is the current behavior?**
I wanted to move old Report Builder items (older than X days) from one folder to another, but the only way I saw to do it was to download the object(s) locally, delete them from the source folder, then upload the items to another folder... which had some timeout side-effects. Also, doing this changed the "modified date" of the object so that I could no longer treat those files as "old" ones by checking for that value.

The option to move a file exists in the Details View of the web ui... and it keeps the modified value as the old value. Would be GREAT to have this as a function in your module.

**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem.**

**What is the expected behavior?**
Move object(s) from one folder to another... keeping timestamps intact.

**Which versions of Powershell and which OS are affected by this issue? Did this work in previous versions of our scripts?**

Changes proposed in this pull request:
 - implemented a check for windows credentials which presumably should have existed (similar to the counterpart function, Set-RsDatabase).  The Set-RsDatabaseCredentials function was incorrectly forcing a windows authentication even if SQL was specified as the DatabaseCredentialType.

How to test this code:
 - Make a call to the Set-RsDatabaseCredentials function, specifying SQL as the DatabaseCredentialType.  Be sure to provide a correct value for DatabaseCredential, ReportServerInstance, and if applicable, ReportServerVersion.

Has been tested on (remove any that don't apply):
 - Powershell 5
 - Windows Server 2019
 - SQL Server 2016

**Do you want to request a *feature* or report a *bug*?**
Feature request

**What is the current behavior?**
Command does not exist

The command should allow you to enable or disable Report Execution Logging, and to specify the `Remove log entries older than this number of days` setting, as seen in the below SSMS screenshot while connected to an SSRS instance and going to `Server Properties`

![SSMS Report Execution Logging](https://user-images.githubusercontent.com/28710553/68964391-1f4b4b00-078e-11ea-9065-f6b99b451484.png)

Feature Request: Augment **Out-RsCatalogItem** and **Out-RsFolderContent** to allow the _LastWriteDate_ to be set with the server's _LastModifiedDate_.
### Need help to resolve the error in following script

```powershell 
$Report PortalUri "http://localhost/serverpath/
$Session - New-Rest Session Report Portaluri $SReport Portaluri
dataSource Get-RsRestIte DataSource -WebSession $session -RsItes /Report Name
```
##### throws following error

```error

Failed to get data sources for 101-Population: The remote server returned an error (14) Not Found
At C:\Program Files\Windows PowerShell Modules Reporting ServicesTools-masterReporting ServicesTools Functions CatalogItem RestGetRs>
Restaurant DataSource.psi: 114 char: 13

throw (New-Object System Exception("Failed to get data so

CategoryInfo
OperationStopped: (:) 11. Exception
FullyQualifiedErrorid : Failed to get data sources for e1- Population

The remote server returned an error: (404) Not Found.
```
##### after debugging the code getting following errors

```error
1.Get-RsPortalUrlHelper: The term Get-RsPortalUrlHelper is not recognized that of a cmdlet fonction, script file, or
operable program.
2. New-RswebServiceProxyHelper The term New-Rswebservice ProxyHelper is not recognized as the name of a cmdlet, function, script
file, or operable program
````
##### I am using Powershell 5.1/Windows10 OS
*Bug*

Error received when Restore-RSEncryptionKey attempts to stop and restart the SQL reporting services service

When using SSRS 2017 the service name is set to 'SQLServerReportingServices' changing from the previous SSRS versions default of 'ReportServer' or 'ReportServer$<Instance Name>'.

Code needs to establish if the version of SSRS is 2017 and change the service name accordingly to to the above mentioned name

We're using the Powershell script concept from here, to push Power BI reports up to our on-prem Power BI report server.

https://github.com/microsoft/ReportingServicesTools
 
Have some across something bizarre.  
 
This works great for  pushing PBIX files from a network drive up to our on-prem Report Server.
Unfortunately, we're having problems setting credentials securely via PowerShell (so that we can set a refresh definition)

Basically, in the core Powershell script, we are doing this: 
(By the way, our actual code is using the full iteration through the data sources object, I'm just stripping it down to the bare essentials) 
 
$dataSource.CredentialRetrieval = "Store"
$dataSource.DataModelDataSource.AuthType = "UsernamePassword"
$dataSource.DataModelDataSource.Username = "SQLUserName" 
$dataSource.DataModelDataSource.Secret = '"SQLPassword"
 Set-RsRestItemDataSource
                             -WebSession $session -RsItem "$folderPath/$PBIXName"
                                        -RsItemType PowerBIReport -DataSources $datasource
 
This "appears" to work.  When we go up to the Report Server and look at the data source screen, it seems to show what we'd otherwise type in manually.  If we do a "test connection", without changing anything, it works.  
 
However, when we defined a scheduled refresh and try to refresh immediately, we get an authentication error on the stored credentials.
 
And now - here's where it gets WEIRD!!!

If we go back to the data source screen, and simply click SAVE (without making any changes) and then try to do the refresh again, it works.    
 
If someone told me that, I don't know if I'd believe them.  But we can reproduce this every time.   It's like we have to go into the Power BI report server page and click SAVE.  (More on that in a minute) 
 
So at the moment, our Powershell script just pushes the PBIX up to the report server, without setting credentials.  Then we set the credentials manually.   OK, it "works" but hardly a good DevOps solution.

Now, this had me really curious - what was in the Report Server database (specifically in DataModelDataSource) for the User and Password....when I first tried to push it up through PowerShell, and then after I clicked SAVE in the web interface.
 
Turns out, they were different.
The varbinary values for our user ID and password (they are the same) were initially:
 
0xB237E58B0D24F50A6C870A22478EB5C4
 
However, after I go into the interface and click save  (even though it shows the same text), it saves in the DataModelDataSource table as this (and this is the one that works with the refresh):
 
0xB237E58B0D24F50A2EA3C3477345C01580996198BE863F3B2CAE6FC45159A3A3
 
So the first 18 characters are the same, but it seems that the remainder is necessary.
 
Suffice it to say, I'm not an encryption expert.   
Is there a way to "jam in" an encrypted varbinary(max) value into DataModelSource, to satisfy the credential requirements?
 
Thanks,
Kevin



Set-RsEmailSettings defaults the SMTPUseSSL property of the SetAuthenticatedEmailConfiguration method to true. In many cases, this might be the desired outcome; however, I'm trying to configure a 2016 report server to use Azure SendGrid and this needs to be unchecked in the reporting configuration.

Feels like we should expose SMTPUseSSL as a parameter to Set-RsEmailSettings (perhaps with a default to true) so that it can be configured for all situations instead of forcing it to true.

While doing some testing of Get-RsCatalogItemRole between two servers that can see each other, I noticed that while running the cmdlet locally, there was not an error, but when it was used with -ReportServerUri to another server, it returned the output, but still complained.  Please see attachment.

![Githibsubmission_error](https://user-images.githubusercontent.com/32223642/65653253-62c4dc80-dfc9-11e9-8164-8aa9b7524065.png)
![Githubsubmission_error2](https://user-images.githubusercontent.com/32223642/65653257-65bfcd00-dfc9-11e9-8a60-d50e006f2f9a.png)

Thank you.