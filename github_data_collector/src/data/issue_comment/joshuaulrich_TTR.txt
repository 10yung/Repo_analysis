### Description

If there is no money flow for 'n' consecutive time frames (this is sometimes the case for less popular securities towards end of the day), or if there is no negative money flow for 'n' consecutive time frames (e.g. during a strong up-trend), the denominator in
```r
mr <- runSum( pmf, n ) / runSum( nmf, n )
``` 
becomes zero, resulting in NA.

### Expected behavior

No NAs in these cases.

Suggest to fix by setting 'mfi' to 100 if denominator of 'mr' is 0 because for limit denominator -> 0: 'mr' -> infinity and limit 'mr' -> infinity: 'mfi' -> 100.

Special case: both numerator and denominator are 0. Suggest to fix by setting 'mfi' to 50 in this case because for limit numerator and denominator -> 0: 'mr' -> 1 and thus 'mfi' = 50.

```r
mfi[is.infinite(mr)] <- 100
mfi[is.nan(mr)] <- 50
```

For better "diff-ability" the following changes are separated into multiple commits:
1. runSum/runMin/runMax have no dependency to n in cumulative case (parameter n is ignored and calculation is done for n=1)
-> remove dependency to n for NA padding
2. correct algorithmic errors resulting from copy+paste mistakes in implementation of stoch(), SMI(), and TRIX()
3. fix growth function:
- old implementation just returned series of NA because first value in cumprod was always NA due to na.pad in ROC()
  => set nad.pad=FALSE and pad with zero
- ROC type must be discrete (not continuous) because we need factors (not differences) for use with cumprod
- using factors we need 1/x values (not -x values) for sell signals
- strip off last value from signals if signals has the same length as price because the outcome of the actions in signals is lagged by one
  (thus zero padding for first value == initial investment == 100%)
4. add optional parameter accurate.instead.of.fast with default FALSE to runSum() function because if x contains a mixture of very large and small numbers, the fast version becomes inaccurate; this can lead to small negative running sums on all positive input data, which can lead to various secondary errors in other TTR functions (see 5. and 6.) built upon runSum
5. add optional parameter accurate.instead.of.fast with default FALSE to SMA() and WMA() to be passed on to runSum()
6. use accurate.instead.of.fast=TRUE in VWAP(), CMF(), DVI(), MFI(), rollSFM(), and volatility()
Adding tests to runCov for x and y as xts objects.  Currently, the unit tests only use x and y as numeric vectors.

I believe the performance of runCov() could be improved,particularly in terms of memory usage, if the following lines are removed.  

The conversion with try.xts() seems unnecessary, and the xy <- cbind() is unnecessary since the "xy" variable is never used. 

```
"runCov" <- function(x, y, n=10, use="all.obs", sample=TRUE, cumulative=FALSE) {

  x <- try.xts(x, error=as.matrix)
  y <- try.xts(y, error=as.matrix)
  if(is.xts(x) && is.xts(y)) {
    xy <- cbind(x,y)
  } else {
    xy <- cbind( as.vector(x), as.vector(y) )
  }
  ...
```

I can submit a pull request, but I have validated that deleting the rows will pass the unit tests.
hma <- function(data, n){
  hmaout <- HMA(data, n )
}

when I call this function with n <- 3,5,7,9,11,etc it is not working, but it is working fine for even numbers like 2,4,6,8,10,etc
Here

https://github.com/joshuaulrich/TTR/blob/master/R/ADX.R#L80
```R
...
  DMIn <- ifelse( dH==dL | (dH< 0 & dL< 0), 0, ifelse( dH <dL, dL, 0 ) )
## HERE
  TR    <- ATR(HLC)[,"tr"]
  TRsum <- wilderSum(TR, n=n)

  DIp <- 100 * wilderSum(DMIp, n=n) / TRsum
...
```

And pretty much for all of the other functions. Could the `n` (and whatever else) be passed in with `...`?
Hi Joshua,  In: https://github.com/joshuaulrich/TTR/blob/master/R/stochastics.R

Line 152ff: 
  if(bounded) {
    hmax <- runMax(high, nFastK)
    lmin <- runMin( low, nFastK)
  } else {
    hmax <- runMax(c(high[1],high[-NROW(HLC)]), nFastK)
    lmin <- runMax(c( low[1], low[-NROW(HLC)]), nFastK)  #  this is the line!!!
}

    lmin <- runMin(c( low[1], low[-NROW(HLC)]), nFastK)  #  this is the line!!!

I stumbled over this just by looking at the code.  No testing was performed. 
Thanks for the great package.  I just started studying it.  

Regards, A. 

Version 0.23-3

> TTR::runPercentRank(1:10, n = 5, cumulative = TRUE)
[1] 0.5000000 0.7500000 0.8333333 0.8750000 0.9000000 0.9166667 0.9285714 0.9375000 0.9444444
[10] 0.9500000

with `cumulative=FALSE`, it works fine

> TTR::runPercentRank(1:10, n = 5, cumulative = FALSE)
 [1]  NA  NA  NA  NA 0.9 0.9 0.9 0.9 0.9 0.9

Are there a Least Squares Moving Averages function?
Hi Joshua, 

This is a pull request discussed in [this issue](https://github.com/joshuaulrich/TTR/issues/67). The pull request __is not intended to be merged__ but was made so you could compare the proposed changes that might be incorporated into an alternate ZigZag.R function. 

Regards,
Nathanael