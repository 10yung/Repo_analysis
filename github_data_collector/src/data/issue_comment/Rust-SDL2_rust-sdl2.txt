I'm trying to add raw-window-handle #910 to rust-sdl2 which requires running bindgen to get the right bindings, but the build fails with a bunch of import errors in `pixels.rs`: https://gist.github.com/lmcgrath/8cc694479c63f8f6451b69eb08e6d7d8. The project builds fine without bindgen, so it looks like the references to the pixel format enum values needs to be updated (`use sys::SDL_PixelFormatEnum::*` instead of `sys::*`). Would I be ok to fix this myself?
Some were i32, others (for mouse) were u32. It cannot be negative because it's not an error variable, so it's always positive and thus safe to use u32 here.

<!-- Reviewable:start -->
---
This change isâ€‚[<img src="https://reviewable.io/review_button.svg" height="34" align="absmiddle" alt="Reviewable"/>](https://reviewable.io/reviews/rust-sdl2/rust-sdl2/955)
<!-- Reviewable:end -->

As discussed in issue https://github.com/Rust-SDL2/rust-sdl2/issues/942.
_I tried searching through the existing issues and didn't see this discussed, so I'm opening this issue mostly for information. Feel free to close it, if it doesn't apply here for some reason. I'm not really a user of SDL2 anyway - just got referred to the `unsafe_textures` solution when discussing scoped lifetimes elsewhere._

The underlying issue is that features are compiler-wide. If I've got a project with a binary crate that depends on `rust-sdl2` and a third party library crate that also depends on `rust-sdl2`, then specifying one of these crates to use `unsafe_textures` will change the API for both of them.

Or alternatively, if I've got a project that compiles just fine without using `unsafe_textures` and then I add a new dependency that also depends on `rust-sdl2` but specifies the `unsafe_textures` feature, then my original project will fail to compile.

This isn't limited to compilation fails though. The implementation of `Texture::drop` changes based on that feature as well. So if one crate depends on the `Texture` cleaning up on `Drop`, then even if the crates somehow manage to compile, all of those textures will start leaking if another crate in the same project depends on the `unsafe_textures` feature.

As long as there are no third party helper libraries for `rust-sdl2` that handle `Texture`s, this isn't really a problem. If these start appearing, then the `unsafe_textures` feature may have an effect of splitting the ecosystem into "libraries that require unsafe_textures" and "libraries that are not compatible with unsafe_textures".


Some of the errors returned by the library implement the `std::error::Error` trait and some are just `String`s. I propose all errors returned by the library implement `std::error::Error` to simplify error handling for consumers.

In the cases where we only have a `String` to return, this can be wrapped in an `enum` that implements `Error`.

This would of course be a breaking change.

Would you be interested in a PR for this?
Hello there,

I recently have been trying to get multiple viewports to work using `rust-sdl2` but haven't been having much luck. I have some code that looks like this:

```rust
// window is 800x600
'running: loop {
    ...
    // cornflower blue clear color :)
    canvas.set_draw_color(Color::RGB(100, 149, 237));
    canvas.clear();

    // set viewport to be top left quadrant
    canvas.set_viewport(sdl2::rect::Rect::new(0i32, 0i32, 400u32, 300u32));
    canvas.set_draw_color(Color::RGB(255, 255, 255));
    canvas.fill_rect(rect); // draw rect calculated from ndc to viewport dimensions

    // update viewport to be top right quadrant
    canvas.set_viewport(sdl2::rect::Rect::new(400i32, 0i32, 400u32, 300u32));
    canvas.set_draw_color(Color::RGB(255, 255, 255));
    canvas.fill_rect(rect); // draw same rect

    canvas.present();
}
```

However when I run I only see this:

![image](https://user-images.githubusercontent.com/1136625/68423595-42786800-019a-11ea-953f-3c4e6b9eded6.png)

If I swap the order of the top left and right quadrant I see this instead:

![image](https://user-images.githubusercontent.com/1136625/68423711-76538d80-019a-11ea-9a43-0d8965710694.png)

So it appears only the first viewport set is rendered. I've played around with adding an extra present but then I wind up getting some horrible strobing effects where one quad draws fine and the other flickers non-stop.

Is what I'm trying to do something that should be possible or do I need to draw to an offscreen texture first and then present those?

Apologies if I've missed something blindingly obvious ðŸ˜¬ 

Thank you very much for your time,


Tom

I'm really struggling to design my app with some of the limitations of lifetimes related to font's.

I basically have a struct that gets initialised on my app start and doesn't get dropped.

it looks like this:
```
pub struct Context {
    pub canvas: Canvas<sdl2::video::Window>,
    pub texture_creator: TextureCreator<sdl2::video::WindowContext>,
    pub input: Input,
    pub tff: Sdl2TtfContext,
}
```
I was able to get around the texture lifecycle issue with `unsafe_textures` is there a way I can do something similar with font's?


Likely optimized away by the compiler since not marked as "volatile".

OS: Windows 10
Rust:  active toolchain:
```
stable-x86_64-pc-windows-msvc (default)
rustc 1.38.0 (625451e37 2019-09-23)
```

Steps to reproduce:
1. Run  `cargo run  --example renderer-target --release`

Expected:
rotating rectangle on screen

Actual:
black screen

Note: 
1. All OK in debug mode
2. Potential fix using the `volatile` crate: https://docs.rs/volatile/0.2.6/volatile/



This PR tries to address Issue #700 .

Remarks:

- I'd like to get rid of the magic numbers here and create constants for these boundaries, what would be the best way to do this?

- I've added custom messages to the assertions, I don't know if this is desirable or not.

- Big plus, a MacOS system user that's able to test this would be awesome ðŸ˜„.