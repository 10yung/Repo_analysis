## Look at here

- → Did you conform to the [Rules](https://github.com/JessYanCoding/MVPArms/issues/150)?
- → Did you read the [Wiki](https://github.com/JessYanCoding/MVPArms/wiki) **Carefully**?
- → Did you search in Google?
- → Did you search in openned&closed Issues?
- → **Receive only bugs and suggestions**

### Environment

- [x] MVPArms Version: <!-- like: v2.3.1 -->
- [x] AndroidStudio Version: <!-- like: v3.0.0 -->
- [x] Gradle Plugin Version: <!-- like: v3.0.0 -->
- [x] Target Android Version: <!-- like: Android 5.0 -->
- [x] Device Model: <!-- like: Nexus 6 -->


### Bug Description:
<!-- 不接受框架之外的任何问题, 比如说 Retrofit 怎么使用, 不接受基础的问题以及 Google 或者百度能搜索到的问题, 比如说 Gradle 怎么下载不了三方库, 不接受已经回答过的 issues, 比如说 DaggerAppComponent, DaggerUserComponent 文件怎么不存在, 提问前最好先看下 https://github.com/JessYanCoding/MVPArms/issues/150, 当发现此 issues 不符合要求, 会在未被告知的情况下直接被 close!-->


### Related Code:
```java
  

```

### Bug Log:
```log


```

### Others:

我在通用资源模块中写了个 commonActivity继承BaseActivity 使用dagger2注解，其它凡是继承了该BaseActivity的模块都会生成一个CommonActivity_injector ,这样直接连接运行没问题，但是打包出现
Program type already present: me.jessyan.armscomponent.commonres.ui.CommonActivity_MembersInjector, 这个类被重复定UI了,导致无法打包，大神怎么解决这个
请教一下：fragment继承自BaseLazyLoadFragment，在lazyLoadData中获取数据，但是界面可见的时候，没有执行该方法。
## Look at here

- → Did you conform to the [Rules](https://github.com/JessYanCoding/MVPArms/issues/150)?
- → Did you read the [Wiki](https://github.com/JessYanCoding/MVPArms/wiki) **Carefully**?
- → Did you search in Google?
- → Did you search in openned&closed Issues?
- → **Receive only bugs and suggestions**

### Environment

- [x] MVPArms Version: <!-- like: v2.3.1 -->
- [x] AndroidStudio Version: <!-- like: v3.0.0 -->
- [x] Gradle Plugin Version: <!-- like: v3.0.0 -->
- [x] Target Android Version: <!-- like: Android 5.0 -->
- [x] Device Model: <!-- like: Nexus 6 -->


### Bug Description:
<!-- 不接受框架之外的任何问题, 比如说 Retrofit 怎么使用, 不接受基础的问题以及 Google 或者百度能搜索到的问题, 比如说 Gradle 怎么下载不了三方库, 不接受已经回答过的 issues, 比如说 DaggerAppComponent, DaggerUserComponent 文件怎么不存在, 提问前最好先看下 https://github.com/JessYanCoding/MVPArms/issues/150, 当发现此 issues 不符合要求, 会在未被告知的情况下直接被 close!-->


### Related Code:
```java
  

```

### Bug Log:
```log

 App has crashed, executing CustomActivityOnCrash's UncaughtExceptionHandler
    java.lang.IllegalStateException: GeneratedAppGlideModuleImpl is implemented incorrectly. If you've manually implemented this class, remove your implementation. The Annotation processor will generate a correct implementation.
        at com.bumptech.glide.Glide.throwIncorrectGlideModule(Glide.java:341)
        at com.bumptech.glide.Glide.getAnnotationGeneratedGlideModules(Glide.java:333)
        at com.bumptech.glide.Glide.get(Glide.java:176)
        at com.bumptech.glide.Glide.getRetriever(Glide.java:714)
        at com.bumptech.glide.Glide.with(Glide.java:741)
        at com.view.GlideUitls.loadGlide(GlideUitls.java:179)
        at com.view.GlideUitls.load(GlideUitls.java:38)
        at com.hardlove.wallet.utils.ImageLoadUtils.load(ImageLoadUtils.java:44)
```

### Others:
![image](https://user-images.githubusercontent.com/11812893/68734560-b4770400-0615-11ea-8e11-cf1a3d8880e8.png)
貌似新版的glide更框架中的GeneratedAppGlideModuleImpl 冲突了。
目前已经迁移到AndroidX,使用x86架构模拟器会出现Crash,Bugly上报为Jsonobject有问题,
Q的适配及Android的X迁移有在考虑吗
Fragment在框架中，ButterKnife在onDestoryView中销毁View，然后RxLifecycle绑定Fragment的生命周期是FragmentEvent.onDestoryView,那么会出现问题，在出现一个Activity嵌套多个Fragment切换时（Fragment的initData中请求了网络），快速切换，然后退出Activity，Fragment销毁，这时的销毁顺序是ButterKnife解除绑定，View置空，然后RxLifecycle解绑，停止请求，这时候会走到RxUtils中applySchedulers的doFinally方法中的view.hideLoading()，如果Fragment实现的hideLoading并在其中使用到了相关View，这时候View是null，会出现异常，建议Fragment销毁顺序同步Activity，先进行RxLifecycle解绑，再进行ButterKnife解绑，这样就解决了这个问题
> 每个组件 (模块) 在测试阶段都可以独立运行, 在独立运行时每个组件都可以指定自己的 Application, 这时组件自己管理生命周期就轻而易举, 比如想在 onCreate 中初始化一些代码都可以轻松做到, 但是当进入集成调试阶段, 组件自己的 Application 已不可用, 每个组件都只能依赖于宿主的生命周期, 这时每个组件如果需要初始化自己独有的代码, 该怎么办?

> 在基础层中提供一个用于管理组件生命周期的管理类, 每个组件都手动将自己的生命周期实现类注册进这个管理类, 在集成调试时, 宿主在自己的 Application 对应生命周期方法中通过管理类去遍历调用注册的所有生命周期实现类即可

如果某个业务模块自己依赖的库，需要一个比较高的初始化优先级，MVPArms是否支持呢？

再进一步，如果MPVArms支持初始化优先级，那不同模块都要求初始化优先级，各自都把自己注册为high（因为它们互不知道彼此），又该如何呢？
目前框架通过反射来获取ConfigModule，能否改进一下通过ASM和TransformAPI，在编译过程中将Module自动注册到静态List，在dagger2初始化注入时直接调用，避免反射带来的影响。
可以参考
https://github.com/luckybilly/AutoRegister 

**MVPArms** 经过两年的不断迭代，逐渐地被领域内更多的开发者认可，现在每天都有新的开发者加入 **MVPArms** 大家庭，但还有更多的开发者在观望，迟迟不敢使用 **MVPArms**，为了增强这部分开发者的信心，鼓励他们开始使用 **MVPArms**，现在向全社会征集已经使用了 **MVPArms** 的线上项目，商业项目、公益项目、内部项目都可以，格式如下，复制并补全信息即可:

```
- [x] 公司名:
- [x] 项目名:
- [x] 公司官网/项目下载地址:
```

如果您的项目方便公开的的话，请尽量把信息补全，虽然 **MVPArms** 不够完美，也有很多各式各样的问题，但本人已经尽自己所能的把 **MVPArms**  做得足够的完善，努力的响应大家的优化建议，不光是代码，注释、文档、demo、更新日志、issues 汇总，我都在很努力的做到极致，以帮助大家可以更全面的理解并使用这个框架，所以请大家积极响应我的这个信息征集请求，将项目信息公布到在这里，您的项目和公司也可以获得更多的曝光度，感谢 🙏

如果您基于 **MVPArms** 开发了开源的 **APP** 或者 **Framework**，请把项目地址提交到 [这里](https://github.com/JessYanCoding/MVPArms/blob/master/CONTRIBUTING_APP.md)，以获得更多的曝光度，感谢 🙏

### 以下为部分已知的使用 **MVPArms** 开发的商业项目:

**天府通** | **小顶家装 工长端** | **小顶家装 工人端** | **小顶家装 材料端** | **小顶网** |
:-------------------------------------------------------------------:|:----------:|:---------------:|:--------:|:--------------:|
[<img src="https://raw.githubusercontent.com/JessYanCoding/MVPArms/master/image/tianfutong_logo.png" width="80" height="80">](https://android.myapp.com/myapp/detail.htm?apkName=com.chinarainbow.tft) | [<img src="https://raw.githubusercontent.com/JessYanCoding/MVPArms/master/image/xiaoding_foreman_logo.png" width="80" height="80">](http://www.dggxdjz.com) | [<img src="https://raw.githubusercontent.com/JessYanCoding/MVPArms/master/image/xiaoding_worker_logo.png" width="80" height="80">](http://www.dggxdjz.com) | [<img src="https://raw.githubusercontent.com/JessYanCoding/MVPArms/master/image/xiaoding_material_logo.png" width="80" height="80">](http://www.dggxdjz.com) | [<img src="https://raw.githubusercontent.com/JessYanCoding/MVPArms/master/image/top_net_work_logo.png" width="80" height="80">](http://www.dgg.net/appload.htm) |
**天天视频** | **天天直播** | **中斗通航** | **中斗祥云** | **麋鹿旅行** |
[<img src="https://raw.githubusercontent.com/JessYanCoding/MVPArms/master/image/tiantian_video_logo.png" width="80" height="80">](http://sj.qq.com/myapp/detail.htm?apkName=com.dzwh.ttys) | [<img src="https://raw.githubusercontent.com/JessYanCoding/MVPArms/master/image/tiantian_live_logo.png" width="80" height="80">](http://www.25pp.com/android/detail_7611392/) | [<img src="https://raw.githubusercontent.com/JessYanCoding/MVPArms/master/image/tong_hang_logo.png" width="80" height="80">](https://fir.im/3176) | <img src="https://raw.githubusercontent.com/JessYanCoding/MVPArms/master/image/xiang_yun_logo.png" width="80" height="80">  | [<img src="https://raw.githubusercontent.com/JessYanCoding/MVPArms/master/image/mi_lu_logo.png" width="80" height="80">](http://android.myapp.com/myapp/detail.htm?apkName=com.elk.tourist) |
**汇财富** | **觅窝** | **晒墨宝** | **智播**  | **(Your App ...)** |
[<img src="https://raw.githubusercontent.com/JessYanCoding/MVPArms/master/image/hui_cai_fu_logo.png" width="80" height="80">](http://android.myapp.com/myapp/detail.htm?apkName=com.tahone.client) | [<img src="https://raw.githubusercontent.com/JessYanCoding/MVPArms/master/image/mi_wo_logo.png" width="80" height="80">](http://miwo.ai/) | [<img src="https://raw.githubusercontent.com/JessYanCoding/MVPArms/master/image/shaimobao_logo.png" width="80" height="80">](http://sj.qq.com/myapp/search.htm?kw=%E6%99%92%E5%A2%A8%E5%AE%9D)  | [<img src="https://raw.githubusercontent.com/JessYanCoding/MVPArms/master/image/zhibo_logo.png" width="80" height="80">](http://www.zhibocloud.cn/) | <img src="https://raw.githubusercontent.com/JessYanCoding/MVPArms/master/image/android_logo.png" width="80" height="80">
在使用框架过程中碰到 mvp 架构需创建文件数量庞问题，可能我的做法不正确，特请教下如何优化？

希望大佬能增加 DEMO 功能，提供多功能下如何设计和组织代码，为大家提供参考。以下是我的一些设计疑问，也贴出了源码希望和大家一起探讨如何设计。


比如用户模块下有以下功能
- 登录
- 注册

由于两个页面的 UI 、逻辑、网络请求都不一样，所以普通的做法是单独为每个功能创建 XXXActivity、XXXPresenter、创建 Contract 协议类、创建Model，比如一个登录功能就要创建四个文件吗？注册功能又要创建 4 个文件，意味着每个小功能都要创建 4 个文件，带来的问题是文件数量太过于庞大了，所以我想问有什么好的方案优化，你们是怎么处理的？

我的优化：
##### 优化了协议类。不为每个功能创建 XXXContract ，由于我的是组件化工程，每个子工程下公用一个 Contract， 用内部类区分每个功能协议，这样减少了协议类的创建，比如用户模块
代码大致这样子：
```ruby
public class UserContract {

    //--------- 微信授权 ----------
    public interface WxAuthView extends IView {
    }

    public interface WxAuthModel extends IModel {
        Observable<LoginBean> getLoginInfo(Map<String, String> reqMap);
    }

    //--------- 绑定手机 ----------
    public interface BindPhoneView extends IView {

        void enableVerificationCodeBtn(boolean enable);

        void setVerificationCodeText(String verificationCodeText);

    }

    public interface BindPhoneModel extends IModel {

        Observable<BaseBean> getVerificationCode(Map<String, String> reqMap);

        Observable<LoginBean> putBindPhoneNumber(Map<String, String> reqMap);
    }

    //--------- 选择区号 ----------
    public interface AreaCodeView extends IView {

        void showAreaCodeList(List<ShellAreaCodeBean.DataBean.AreaCodeBean> areaCodeBeanList);

        void onNetWorkError(String errorMsg);
    }

    public interface AreaCodeModel extends IModel {
        Observable<ShellAreaCodeBean> getAreaCodeList(Map<String, String> reqMap);
    }

    //--------- 登录 ----------
    public interface LoginView extends IView {
        void enableVerificationCodeBtn(boolean enable);

        void setVerificationCodeText(String verificationCodeText);

        void llCodeVisible(boolean visible, int loginType);
    }

    public interface LoginModel extends IModel {
        Observable<BaseBean> getVerificationCode(Map<String, String> reqMap);
        Observable<LoginBean> getLoginInfo(Map<String, String> reqMap);
    }

    //--------- 找回密码 ----------
    public interface FindPasswordView extends IView {

        void enableVerificationCodeBtn(boolean enable);

        void setVerificationCodeText(String verificationCodeText);

    }
    public interface FindPasswordModel extends IModel {
        Observable<BaseBean> getVerificationCode(Map<String, String> reqMap);
        Observable<BaseBean> putResetPassword(Map<String, String> reqMap);
    }

    //--------- 预填资料 ----------
    public interface PrepareInfoView extends IView {

    }
    public interface PrepareInfoModel extends IModel {
        Observable<BaseBean> postPrepareInfo(Map<String, String> reqMap);
    }

}
```

协议类复用好不好，提出来探讨，你们有什么好的优化方案？

##### 优化了 Model 层，不为每个功能创建 Model ，由于我的组件化工程， 每个子工程复用 Model
代码大致这样子：
```ruby
@ActivityScope
public class UserModel extends BaseModel
        implements UserContract.WxAuthModel, UserContract.BindPhoneModel,
        UserContract.AreaCodeModel, UserContract.LoginModel,
        UserContract.FindPasswordModel, UserContract.PrepareInfoModel {

    @Inject
    public UserModel(IRepositoryManager mRepositoryManager) {
        super(mRepositoryManager);
    }


    @Override
    public Observable<LoginBean> getLoginInfo(Map<String, String> reqMap) {
        return mRepositoryManager.obtainRetrofitService(UserService.class)
                .getLoginInfo(reqMap);
    }

    @Override
    public Observable<ShellAreaCodeBean> getAreaCodeList(Map<String, String> reqMap) {
        return mRepositoryManager.obtainRetrofitService(UserService.class)
                .getAreaCodeList(reqMap);
    }

    @Override
    public Observable<BaseBean> getVerificationCode(Map<String, String> reqMap) {
        return mRepositoryManager.obtainRetrofitService(UserService.class)
                .getVerificationCode(reqMap);
    }

    @Override
    public Observable<BaseBean> putResetPassword(Map<String, String> reqMap) {
        return mRepositoryManager.obtainRetrofitService(UserService.class)
                .putResetPassword(reqMap);
    }

    @Override
    public Observable<LoginBean> putBindPhoneNumber(Map<String, String> reqMap) {
        return mRepositoryManager.obtainRetrofitService(UserService.class)
                .putBindPhoneNumber(reqMap);
    }

    @Override
    public Observable<BaseBean> postPrepareInfo(Map<String, String> reqMap) {
        return mRepositoryManager.obtainRetrofitService(UserService.class)
                .postPrepareInfo(reqMap);
    }
}
```
Model复用好不好，提出来探讨，你们有什么好的优化方案？

经过上面优化可以大幅度 Contract 和 Model 的数量，只需要为每个功能创建 XXXActivity 和 XXXPresenter 类，应该每个功能都有自己的逻辑，所以我不建议复用 XXXPresenter。

这样优化的代价是让 DI 层的 XXXModule 层变得臃肿了
代码如下：
```ruby
@Module
public class UserModule {

    private UserContract.WxAuthView wxAuthView;
    private UserContract.BindPhoneView bindPhoneView;
    private UserContract.AreaCodeView areaCodeView;
    private UserContract.LoginView loginView;
    private UserContract.FindPasswordView findPasswordView;
    private UserContract.PrepareInfoView prepareInfoView;

    /**
     * 构建 ActivityModule 时，将 View 的实现类传入，这样就可以提供 View 的实现类给 Presenter
     * @param view
     */
    public UserModule(UserContract.WxAuthView view) {
        this.wxAuthView = view;
    }

    public UserModule(UserContract.BindPhoneView view) {
        this.bindPhoneView = view;
    }

    public UserModule(UserContract.AreaCodeView view) {
        this.areaCodeView = view;
    }

    public UserModule(UserContract.LoginView view) {
        this.loginView = view;
    }

    public UserModule(UserContract.FindPasswordView view) {
        this.findPasswordView = view;
    }

    public UserModule(UserContract.PrepareInfoView view) {
        this.prepareInfoView = view;
    }

    //------ 微信授权 ---------
    @ActivityScope
    @Provides
    UserContract.WxAuthView provideWxAuthView() {
        return wxAuthView;
    }

    @ActivityScope
    @Provides
    UserContract.WxAuthModel provideWxAuthModel(UserModel model) {
        return model;
    }

    //------ 绑定手机号 ---------
    @ActivityScope
    @Provides
    UserContract.BindPhoneView provideBindPhoneView() {
        return bindPhoneView;
    }

    @ActivityScope
    @Provides
    UserContract.BindPhoneModel provideBindPhoneModel(UserModel model) {
        return model;
    }

    //------ 选择区号 ---------
    @ActivityScope
    @Provides
    UserContract.AreaCodeView provideAreaCodeView() {
        return areaCodeView;
    }

    @ActivityScope
    @Provides
    UserContract.AreaCodeModel provideAreaCodeModel(UserModel model) {
        return model;
    }

    //------ 登录 ---------
    @ActivityScope
    @Provides
    UserContract.LoginView provideLoginView() {
        return loginView;
    }

    @ActivityScope
    @Provides
    UserContract.LoginModel provideLoginModel(UserModel model) {
        return model;
    }

    //------ 发现密码 ---------
    @ActivityScope
    @Provides
    UserContract.FindPasswordView provideFindPasswordView() {
        return findPasswordView;
    }

    @ActivityScope
    @Provides
    UserContract.FindPasswordModel provideFindPasswordModel(UserModel model) {
        return model;
    }

    //------ 提交预填资料 ---------
    @ActivityScope
    @Provides
    UserContract.PrepareInfoView providePrepareInfoView() {
        return prepareInfoView;
    }

    @ActivityScope
    @Provides
    UserContract.PrepareInfoModel providePrepareInfoModel(UserModel model) {
        return model;
    }

    //------ Other ---------
    @ActivityScope
    @Provides
    Interrupter provideInterrupter() {
        Interrupter nsxInterrupter = new Interrupter();
        return nsxInterrupter;
    }

}
```

