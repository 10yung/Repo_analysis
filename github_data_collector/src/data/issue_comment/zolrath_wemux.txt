By reading the README.md, I get the message that command 'wemux users' will output the users connecting to the server now. Something like:

```bash
$ wemux users
Users connected to 'wemux':
  1. zolrath
  2. csagan[m]
```
While, after some exam, I can't report the same output. Here is what I've done.
1. ssh to my machine with two user: UA and UB seperately.
2. In the UA's terminal, run wemux start;
3. In the UB's terminal, run wemux join;
4. In the UA's terminal, run wemux users;
The output of wemux users is : 
```bash
Users connected to 'wemux':
  1. UA
  2. UA
```
While, what I'm expected is : 
```bash
Users connected to 'wemux':
  1. UA
  2. UB
```
how can i get such output?

It would be awesome for hosts to be able to define which users/groups are allowed to connect to a specific instance (instead of disconnecting users after reviewing `wemux list`).
This commit changes wemux to also read configuration from the home directory for when users have no write access to `/usr/local/etc/`.

In the future it might be useful to add an option (e.g. `-c`) to let users define other locations.
Output from wemux kick says:
Kicking userx from the server. Sudo required.
userx kicked successfully!

However userx still shows up in the 'wemux users' list

' sudo wemux kick userx' also fails saying:
unknown command: kick
I think because the wemux session isn't being hosted by root and the kick command is only available inside a session since 'sudo wemux help' shows a different set of commands available.
I'm not seeing the source for the man page in the git repo.
In tmux I've been using Command Mode but it doesn't behave well with wemux.

Setup:
* macOS running iterm2 with tmux integration

Replicate
* open iterm2
* ssh example.com -t 'wemux -CC'

Once logged in this way I appear to be able to see the current server.
```
$ wemux l
Currently active wemux servers:
  1. wemux    <- current server
```
I can not see that I'm attached.
```
$ wemux u
Users connected to 'wemux':
  1. 
```
If I use `ssh example.com -t 'wemux'` the integration is lost but wemux works as expected.
```
$ wemux u
Users connected to 'wemux':
  1. WOC\atlad003
```


Where can I see logs?

`sudo wemux start`
`sudo wemux stop`
`No wemux server to log out of on 'wemux'.`

Decided not to rest on my laurels and just went ahead and fixed it.

**WARNING:** I'm new to wemux and haven't tested all the edge cases. All I did was go through and replace all non-zero (and non-1) `return` statements with `exit`, and redirect any preceding `echos` to STDERR. There were a couple `return 1` statements that are only function returns and shouldn't exit out of the program (as far as I can tell).

Please give this a very critical eye before merging. Thanks for an awesome utility.
I've noticed that, for instance, `wemux mirror` returns exit code 0 (success) and prints the error message `No wemux server to mirror on 'wemux'` to STDOUT rather than STDERR. Is there any chance we could see this fixed to conform to UNIX standards?

### Solution

After [looking at the code](https://github.com/zolrath/wemux/blob/master/wemux#L525), I see that the exit codes are in there already. However, since they're being sent with `return` rather than `exit`, they don't actually get sent upon the termination of the program. (According to [this SO answer](https://stackoverflow.com/a/4419956/4865822), “`return` has nothing to do with exit codes.”)

Error messages can be [echoed to STDERR](https://stackoverflow.com/a/23550347/4865822) with `>&2 echo`.

@zolrath, would you be open to making these changes in wemux? If so, would you prefer to do it yourself, or would you like me to submit a PR?

---

### Context

What I'm trying to do is use wemux to create a safe sandbox for other users to SSH into my machine for pair programming. I've created a new user solely for this purpose, whose `.profile` file consists only of the following:

```
wemux mirror 2>/dev/null || echo "Ryan isn't ready to pair yet!"
exit
```

If wemux conformed to UNIX standards, this code would work; unfortunately, the failure case (the part after `||`) never runs, because `wemux mirror` always returns exit code 0.

#### Security implications

N.b. that if you consider doing this, you must separately disable users from directly executing commands on your machine via SSH (_i.e.,_ protect against `ssh pair@your-machine <command>`).
In a configuration where multiple users can host wemux, suppose user foo starts a wemux session and then ends the tmux session without using `wemux stop` (say, by closing all tmux windows). In this scenario, the wemux socket will be left as something like...
`srw-rw-rw- 1 foo foo 0 Sep 6 10:55 wemux-wemux=`
... and another user, baz, won't be able to successfully run `wemux start` because the server isn't running and foo owns the socket. If baz has sudo access, baz can `sudo chown baz /tmp/wemux/wemux` and then remove it.

The wemux script currently responds to both `wemux stop` and `wemux kill` by calling the `stop_server` function. In this PR, we differentiate `wemux kill` by attempting to forcibly change the ownership of the socket (using sudo, as above) before calling `stop_server`. This is convenient in a multi-tenant compute instance and should help ease some frustration when colleagues forget to cleanly stop the wemux session.