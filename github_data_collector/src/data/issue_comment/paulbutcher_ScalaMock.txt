### ScalaMock Version
4.1.0

### Scala Version
2.12.8

### Runtime
Scalac - JVM

### Please describe the expected behavior of the issue
`org.scalamock.scalatest.MockFactory` should be able to mock the trait.

### Please provide a description of what actually happens
Compiler error:
```
type mismatch;
 found   : r.type (with underlying type X)
 required: X
Parameter type in structural refinement may not refer to an abstract type defined outside that refinement
Parameter type in structural refinement may not refer to a type member of that refinement
```

### Reproducible Test Case
Scastie: https://scastie.scala-lang.org/lbY7ItfvQa60owC3nhZvfg

```scala
import org.scalamock.scalatest.MockFactory

class SmallSpec extends MockFactory {
  trait Broken[T] {
    def bad[X <: T](r: X): Unit
  }

  val debug = stub[Broken[Unit]]
}
```
# Pull Request Checklist

* [x] I agree to licence my contributions under the [MIT licence](https://github.com/paulbutcher/ScalaMock/blob/master/LICENCE)
* ~~[ ] I have added copyright headers to new files~~
* [ ] I have added tests for any changed functionality

## Fixes

Fixes #223 

## Purpose

Introduces `MockFactoryRecordingUnexpectedCalls`, which reports all unexpected calls after each test. This is usable especially with asynchronous tests since the original exception can be silently dropped.

## Background Context

> Why did you take this approach?

Fully backward compatible, records all unexpected call to be replayed later. Then optionally mixed in Factory verifies the empty call log of unexpected calls.

This approach is 1) backward compatible since it does not change current behavior, 2) still eagerly fails on an unexpected call, and 3) optionally fails again in the event the original failure was ignored.
### ScalaMock Version 4.1.0


### Scala Version 2.12


### Runtime JVM


### Please describe the expected behavior of the issue
trying to stub/mock a java class which accepts varargs in a constructor should work

### Please provide a description of what actually happens
But compilation fails with the following message
```
[error]  found   : String*
[error]  required: String
[error]   val site         = stub[MyClass]
[error]                          ^
```

### Reproducible Test Case

```java
public class MyClass {
    public MyClass(String... varargs) {

    }
}
```

```scala
test("my failing test") {
  val s = stub[MyClass]
}
```

### ScalaMock Version 
3.6.0

### Scala Version 
2.11

### Runtime 
JVM

### Please describe the expected behavior of the issue
I would expect to mock Java Generic interfaces having overloaded method with different number of params in the same way I mock other Java interfaces or Scala traits

### Please provide a description of what actually happens
When trying to mock this interface I get the following compile error:
```bash
 error: value expects is not a member of (String, java.util.concurrent.Callable[String]) => Unit
[ERROR]     (m.send(_: String, _: Callable[String])).expects(*, *)
[ERROR]                                              ^

 error: value expects is not a member of String => Unit
[ERROR]     (m.send(_: String)).expects(*).once
[ERROR]                         ^
```

### Reproducible Test Case
```java
import java.util.concurrent.Callable;

public interface GOInterface<T> {
    void send(T record);
    void send(T record, Callable<T> onComplete);
}
```

```scala
it should "mock java generic interface with overloaded method (with different number of parameters)" in {
    import java.util.concurrent.Callable
    var result = ""
    val m = mock[GOInterface[String]]
    (m.send(_: String, _: Callable[String])).expects(*, *)
      .onCall{ case(s: String, c: Callable[String]) => c.call()}.once

    m.send("hello", new Callable[String] {
      override def call(): String = {result = "world"; result}
    })

    result should be("world")
  }

it should "mock java generic interface with overloaded method (with different number of parameters) 2" in {
    import java.util.concurrent.Callable
    var result = ""
    val m = mock[GOInterface[String]]
    (m.send(_: String)).expects(*).once

    m.send("hello")

    result should be("")
  }
```

An unexpected call to one of the method of a mock raise an `org.scalatest.exceptions.TestFailedException`.  But if this exception is somehow suppressed, the failure is silently ignored. 

### ScalaMock Version (e.g. 3.5.0)

4.1.0

### Scala Version (e.g. 2.12)

2.12.4

### Runtime (JVM or JS)

JVM

### Please describe the expected behavior of the issue

The test should fail with an "Unexpected call: ..." error.

### Please provide a description of what actually happens

The test doesn't fails.

### Reproducible Test Case

```scala
import org.scalamock.scalatest.MockFactory
import org.scalatest.FlatSpec

import scala.util.control.NonFatal

trait Foo {
  def bar()
}

class FooBarTest extends FlatSpec with MockFactory {
  "foo" should "bar" in {
    val m = mock[Foo]

    try {
      m.bar()
    } catch {
      case NonFatal(e) => println(e)
    }
  }
}

```
### ScalaMock Version (e.g. 3.5.0)
4.0.0

### Scala Version (e.g. 2.12)
2.11

### Runtime (JVM or JS)
JVM

### Please describe the expected behavior of the issue
There should be a way to mock traits/classes that have functions returning `this.type`

### Please provide a description of what actually happens
There's either a compile-time error or a `NoSuchMethod` (with proxies)

### Reproducible Test Case
```scala
  it should "work" in {
    trait A { def foo: this.type }

    val a = stub[A]
    a.foo
    (a.foo _).verify
  }
```

You can try this with both `MockFactory` and `MockFactory with ProxyMockFactory`. First
one results in compile error:
```
overriding method foo in trait A of type => xx.XxSpec.$anon.type;
method foo has incompatible type
```

Second one - in `NoSuchMethod`:
```
java.lang.NoSuchMethodException: com.sun.proxy.$Proxy7.mock$foo$0()
```

This is probably related to https://github.com/paulbutcher/ScalaMock/issues/63

thanks
### ScalaMock Version (e.g. 3.5.0)
3.5.0
### Scala Version (e.g. 2.12)
2.11
### Runtime (JVM or JS)
JVM
### Please describe the expected behavior of the issue
Mock should be created correctly. No exceptions thrown.

### Please provide a description of what actually happens
Compilation exception is thrown when pass as parameter a List of internal classes.

```
[error] method method overrides nothing.
[error] Note: the super classes of <$anon: services.assessmentcentre.Some> contain the following, non final members named method:
[error] def method: ((i: Long, p: List[_10.Param])Unit) forSome { val _10: services.assessmentcentre.Some{val mock$special$mockName: String; override def method(i: Long,p: List[Some.this.Param]): Unit; val mock$method$0: org.scalamock.function.MockFunction2[Long,List[Some.this.Param],Unit]} }
[error]     val mockSome = mock[Some]
[error]                        ^
[error] one error found
[error] (test:compileIncremental) Compilation failed
```



### Reproducible Test Case

```scala

trait Some {
  case class Param(name: String)
  def method(i: Long, p: List[Param]): Unit = ???
}

// in test
val mockSome = mock[Some] 
// will fail to compile
```


Woraround:
Move Param case class outside or at least to object with the same name.
*If you want to discuss a new feature, please ignore/clear this form.*

### ScalaMock Version (e.g. 3.5.0)
3.5.0

### Scala Version (e.g. 2.12)
2.11.8

### Runtime (JVM or JS)
JS

### Please describe the expected behavior of the issue
Mocking the CanvasRenderingContext2D class should yield a mock object

### Please provide a description of what actually happens
Compilation failure:

Error:(18, 24) When overriding a native method with default arguments, the overriding method must explicitly repeat the default arguments.
      val canvas = mock[CanvasRenderingContext2D]

### Reproducible Test Case
Here's a really simple test case that won't compile (yields the error shown above, with different row/col values because not the same code as used above). Note that this test case works fine with Mockito, so I'll switch to Mockito for now, but would love to be able to use ScalaMock.

```scala
import org.scalajs.dom.CanvasRenderingContext2D
import org.scalamock.scalatest.MockFactory
import org.scalatest.FunSpec

class BadSpec extends FunSpec with MockFactory {
  describe("Bad") {
    it("makes a mock") {
      val canvas = mock[CanvasRenderingContext2D]
    }
  }
}
```
worked in 3.4.2, broken in 3.5.0

real example:
```scala
      class MockableBroadcast[T: ClassTag] extends org.apache.spark.broadcast.Broadcast[T](42L) {
        override protected def getValue(): Nothing = ???
        override protected def doUnpersist(blocking: Boolean): Unit = ???
        override protected def doDestroy(blocking: Boolean): Unit = ???
      }
      val lookup= mock[MockableBroadcast[Map[String, Long]]]
```

minified example:
```scala
      class Foo[T: ClassTag]
      val mf = mock[Foo[Nothing]]
```

compiler error:
```
Error:(55, 20) type mismatch;
 found   : scala.reflect.ClassTag[T]
 required: scala.reflect.ClassTag[Nothing]
Note: T >: Nothing, but trait ClassTag is invariant in type T.
You may wish to investigate a wildcard type such as `_ >: Nothing`. (SLS 3.2.10)
      val mf = mock[Foo[Nothing]]
```
Mock testing in Specs2, came across a compiler crash that is easily reproducible.

Mock testing works on curried functions in this style:
`def func(arg1: A)(arg2: A): A`

But it blows up when using the function return style:
`def func(arg1: A): A => A`

I have reproduced it in a very simple test, using the exact format my actual code contained:

```
trait IntFunctions {
    def cf(i: Int): Int => Int
  }

  class Implemented extends IntFunctions {
    override def cf(i: Int) = i2 => {
      i + i2
    }
  }

  "Test for github" >> new MockContext {
    val additionFunc = mock[IntFunctions]

    (additionFunc.cf(_: Int)(_: Int)).expects(*, *)

    val firstStep = additionFunc.cf(1)
    firstStep(2)
  }
```

Changing the final bit of the test to `additionFunc.cf(1)(2)` results in the exact same issue.

Here is the compiler crash (snippet):

```
[error] 
[error]   last tree to typer: This(<$anon: org#15.scalamock#12204.specs2#13246.MockContext#13286>)
[error]        tree position: line 26 of test.scala
[error]             tree tpe: test#8865.anon$1#90473
[error]               symbol: final <$anon: org#15.scalamock#12204.specs2#13246.MockContext#13286> in package tests#8865
[error]    symbol definition: final class anon$1#90473 extends org#15.scalamock#12204.specs2#13246.MockContext#13286 (a ClassSymbol)
[error]       symbol package: tests
[error]        symbol owners: <$anon: org#15.scalamock#12204.specs2#13246.MockContext#13286>
[error]            call site: <$anon: Function0#2089> in package tests#8865 in package tests#8864
[error] 
[error] == Source file context for tree position ==
[error] 
[error]     23   }
[error]     24 
[error]     25   "Test for github" >> new MockContext {
[error]     26     val additionFunc = mock[IntFunctions]
[error]     27 
[error]     28     (additionFunc.cf(_: Int)(_: Int)).expects(*, *)
[error]     29 
[error] Total time: 3 s, completed Aug 8, 2016 4:59:38 PM
```

But if I change the implementation to what we see in the documentation:

```
trait IntFunctions {
    def cf(i: Int)(i2: Int) : Int
  }

  class Implemented extends IntFunctions {
    override def cf(i: Int)(i2: Int) = {
      i + i2
    }
  }

  "Test for github" >> new MockContext {
    val additionFunc = mock[IntFunctions]

    (additionFunc.cf(_: Int)(_: Int)).expects(*, *)

    val firstStep = additionFunc.cf(1) _
    firstStep(2)
  }
```

Then we get a successful test case
`[success] Total time: 7 s, completed Aug 8, 2016 5:15:02 PM`
