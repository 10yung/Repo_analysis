### Contribution description

This PR fixes the following problems of the ADC line mapping for the analog on-board peripherals of the  [mega-xplained](http://ww1.microchip.com/downloads/en/Appnotes/doc8377.pdf) board definition:

1. Instead of defining the ADC line for the analog on-board peripherals, the corresponding GPIOs were specified in the board definition. However, for the ATmega platform, as for all other platforms, the ADC lines are not the GPIOs. Instead, they are defined from 0 to `ADC_NUMOF`-1. For the ATmega platform, the ADC line represents the bit in the corresponding ADC registers. The mapping of the ADC line to the corresponding ADC register/bit combination is realized by the peripheral/ADC implementation.

    Therefore, the definitions of the analogue on-board peripherals have use the `ADC_LINE` macro instead of the `GPIO_PIN` macro. For ATmega1284P, the ADC line is mapped to `PORTA:(1 << line)`. That is, the ADC line corresponds to the according bit in registers for port A.

2. The order of the definition was wrong. According to the data sheet it has to be:

    Pin | J2 | ATmega1284P pin | Shared with onboard functionality
    -----| ----| ------------------------- | --------------------------------------------
    6 | ADC5 | PA5 | Filter output
    7 | ADC6 | PA6 | Light sensor
    8 | ADC7 | PA7 | NTC sensor 

The problem was figured out while going through the compile errors of PR #12877 where the `gpio_t` is no longer compatible with `adc_t`.

### Testing procedure

The mapping is straight forward so that a source code review should be sufficient. If the hardware is at hand, flash and test:
```
make BOARD=mega-xplained -C examples/default flash term
```

### Issues/PRs references

Required for #12877 
### Contribution description

MTD configuration for the SPI NOR flash on the PineTime.

### Testing procedure

`tests/pkg_littlefs` should succeed. `examples/filesystem` should also work.

### Issues/PRs references

None
### Contribution description

While testing the mtd device in the PineTime, I found it rather confusing that no newline was included in the output of the `cat` shell command on the device. Without it RIOT appears to hang and the content of the file was not printed until I executed a next shell command. While the `cat` shell command is not to blame here, including a `\n` in the output makes it a bit more user friendly.

output on the PineTime **without** this PR:
```
2020-01-17 20:40:22,648 #  main(): This is RIOT! (Version: 2020.01-devel-1908-g670c5-work/pinetime)
2020-01-17 20:40:22,648 # constfs mounted successfully
> mount
2020-01-17 20:40:25,360 #  mount
2020-01-17 20:40:25,370 # /sda successfully mounted
> cat /sda/test
2020-01-17 20:40:28,066 #  cat /sda/test
help
2020-01-17 20:40:30,566 # testtesttest> help
2020-01-17 20:40:30,566 # Command              Description
2020-01-17 20:40:30,566 # ---------------------------------------
2020-01-17 20:40:30,567 # mount                mount flash filesystem
2020-01-17 20:40:30,567 # format               format flash file system
2020-01-17 20:40:30,578 # umount               unmount flash filesystem
...
```
output on the PineTime **with** this PR:
```
2020-01-17 20:42:11,440 # main(): This is RIOT! (Version: 2020.01-devel-1908-g670c5-work/pinetime)
2020-01-17 20:42:11,440 # constfs mounted successfully
> mount
2020-01-17 20:42:12,637 #  mount
2020-01-17 20:42:12,637 # /sda successfully mounted
> cat /sda/test
2020-01-17 20:42:15,644 #  cat /sda/test
2020-01-17 20:42:15,644 # testtesttest
>
```

On native the `cat` command (without this PR) produces output along the lines of:
```
testtesttest>
```
(note the trailing `>` of the prompt)

### Testing procedure

Reproduce the above on master with and without this PR.

### Issues/PRs references

None


<!--
The RIOT community cares a lot about code quality.
Therefore, before describing what your contribution is about, we would like
you to make sure that your modifications are compliant with the RIOT
coding conventions, see https://github.com/RIOT-OS/RIOT/wiki/Coding-conventions.
-->

### Contribution description

It seems that this script has been removed from Uniflash version 5.2.0 and
resides now on the Code Composer Studio IDE.

<!--
Put here the description of your contribution:
- describe which part(s) of RIOT is (are) involved
- if it's a bug fix, describe the bug that it solves and how it is solved
- you can also give more information to reviewers about how to test your changes
-->


### Testing procedure

`make debug-server` to launch the debug server on a RIOT application, you need to specify a `BOARD` that uses the `uniflash.inc.mk` file like the `cc1312-launchpad`.

<!--
Details steps to test your contribution:
- which test/example to compile for which board and is there a 'test' command
- how to know that it was not working/available in master
- the expected success test output
-->


### Issues/PRs references

Fixes #13158 .

<!--
Examples: Fixes #1234. See also #5678. Depends on PR #9876.

Please use keywords (e.g., fixes, resolve) with the links to the issues you
resolved, this way they will be automatically closed when your pull request
is merged. See https://help.github.com/articles/closing-issues-using-keywords/.
-->

<!--
====================================
IF YOUR ISSUE IS RELATED TO SECURITY
====================================
please submit it to the security mailing-list security@riot-os.org.

If your issue is a question related to the usage of RIOT, please submit it to
the user mailing-list users@riot-os.org or to the developer mailing-list
devel@riot-os.org.
-->

#### Description
<!--
Example: Cannot build gnrc_networking application for samr21-xpro board.
-->

Cannot launch the debug server (`gdb_agent_console`) on boards using the `makefiles/tools/uniflash.inc.mk` script. It seems that this script has been removed from Uniflash version 5.2.0 and resides now on the [Code Composer Studio IDE][link-to-editor].

[link-to-editor]: https://www.ti.com/tool/CCSTUDIO

#### Steps to reproduce the issue
<!--
Try to describe as precisely as possible here the steps required to reproduce
the issue. Here you can also describe your hardware configuration, the network
setup, etc.
-->

Use `make debug-server` on any example and specifying a board that uses the CC26xx/CC13xx processors, for example the `cc1352-launchpad`.

#### Expected results
<!--
Example: The gnrc_networking application builds on samr21-xpro.
-->
Getting the debugging server running.

#### Actual results
<!--
Please paste or specifically describe the actual output.
-->
```
Debug server program /home/jeandudey/.local/opt/ti/uniflash_5.2.0/ccs_base/common/uscif/gdb_agent_console is required but not found in PATH.  Aborting.
/home/jeandudey/Dev/RIOT/examples/hello-world/../../Makefile.include:704: recipe for target 'debug-server' failed
make: *** [debug-server] Error 1
```
#### Versions
<!--
Operating system: Mac OSX, Linux, Vagrant VM
Build environment: GCC, CLang versions (you can run the following command from
the RIOT base directory: make print-versions).
-->
```
Operating System Environment
-----------------------------
         Operating System: "Ubuntu" "18.04.3 LTS (Bionic Beaver)"
                   Kernel: Linux 5.0.0-37-generic x86_64 x86_64
             System shell: /bin/dash (probably dash)
             make's shell: /bin/dash (probably dash)

Installed compiler toolchains
-----------------------------
               native gcc: gcc (Ubuntu 7.4.0-1ubuntu1~18.04.1) 7.4.0
        arm-none-eabi-gcc: arm-none-eabi-gcc (GNU Tools for Arm Embedded Processors 9-2019-q4-major) 9.2.1 20191025 (release) [ARM/arm-9-branch revision 277599]
                  avr-gcc: missing
         mips-mti-elf-gcc: missing
               msp430-gcc: missing
     riscv-none-embed-gcc: missing
     xtensa-esp32-elf-gcc: missing
   xtensa-esp8266-elf-gcc: missing
                    clang: clang version 6.0.0-1ubuntu2 (tags/RELEASE_600/final)

Installed compiler libs
-----------------------
     arm-none-eabi-newlib: "3.1.0"
      mips-mti-elf-newlib: missing
  riscv-none-embed-newlib: missing
  xtensa-esp32-elf-newlib: missing
xtensa-esp8266-elf-newlib: missing
                 avr-libc: missing (missing)

Installed development tools
---------------------------
                   ccache: ccache version 3.4.1
                    cmake: cmake version 3.10.2
                 cppcheck: missing
                  doxygen: missing
                      git: git version 2.17.1
                     make: GNU Make 4.1
                  openocd: Open On-Chip Debugger 0.10.0+dev-01012-ged8fa09c (2020-01-15-14:01)
                   python: Python 2.7.17
                  python2: Python 2.7.17
                  python3: Python 3.6.9
                   flake8: error: /usr/bin/python3: No module named flake8
               coccinelle: missing
```

<!-- Thanks for contributing! -->

## Contribution description

This pull requests proposes a simple framework for fuzzing RIOT network
applications. Inspired by the `examples/` subdirectory it adds an
additional directory called `fuzzing/` with applications for fuzzing
certain network modules. The fuzzing setup is based on Michal
Zalewski's [AFL][AFL website] fuzzer.

AFL generates random network packets from an input corpus and writes the
generated data to standard input. As such, each application in `fuzzing/`
reads from standard input, converts the data to a `gnrc_pktsnip_t`, and
passes it to the network module under test using RIOT's message passing
mechanism.

The fuzzing applications are terminated as soon as the RIOT network
module under test finished processing the input data (fuzzing packet).
This is achieved differently for applications using GNRC directly and
applications using the sock interface. For the former, RIOT is
terminated using `exit(3)` as soon as the generated fuzzing
packet is passed to `gnrc_pktbuf_release`. For the latter, it is
assumed that `gnrc_sock_recv` is called in a loop, if it is
called again and the previously returned packet equals the
fuzzing packet, RIOT is terminated using `exit(3)`.

I have written fuzzing applications for different modules and discovered
various bugs using these fuzzing applications (see related issues
below). This PR only contains a fuzzing applications for `gnrc_tcp`.
Additional applications have been omitted for now to ease code review.
If desired, I will submit those separately later.

Needless to say, the fuzzing setup only works on `native` currently.
Besides, it only sends a single packet and does not fuzz any sending
functions, only receiving functions. I don't think that this setup is
perfect as is, but is definitely usable in the sense that it finds
existing bugs. In my opinion, it is definitely superior to testing
network applications with hardcoded "malcious" packets as done currently
(e.g. #12369), if at all.

## Testing procedure

Usage instructions are provided in `fuzzing/README.md`. The best way to
test the `gnrc_tcp` fuzzing application and the fuzzing setup in
general is reverting some of the fixes listed below and checking whether
the fuzzing setup finds the underlying bugs again.

For instance:

```
$ git revert 9e91d21625867f73825c3fc61588749118ad1a6f 0fff1b35ecc06bb2ff7971ebefa4d590ca5c5b7b
$ make -C fuzzing/gnrc_tcp all-asan
$ make -C fuzzing/gnrc_tcp fuzz
```

At some point AFL will find a crash, keep in mind that this might take
a while though.

## Issues/PRs references

The following lists issues found using the proposed fuzzing setup.

### gnrc_tftp

* #11737
* #11766
* #11772
* #11795

### gnrc_tcp

* #11999
* #12001
* #12079
* #12081
* #12084
* #12086
* #12088
* #12245
* #12249
* #12253

### asymcute

* #12293

### emcute

* #12382

### dtls-sock

* #12905
* #12904

---

@miri64 you were involved in most issues listed above. Do you have any
though on the changes proposed here?

[AFL website]: http://lcamtuf.coredump.cx/afl/


<!--
The RIOT community cares a lot about code quality.
Therefore, before describing what your contribution is about, we would like
you to make sure that your modifications are compliant with the RIOT
coding conventions, see https://github.com/RIOT-OS/RIOT/wiki/Coding-conventions.
-->

### Contribution description
The reassembly buffer only needs (and stores) the headers *before* the fragment header (called per-fragment headers in [RFC 8200, section 4.5](https://tools.ietf.org/html/rfc8200#section-4.5)). Currently, when a subsequent IPv6 fragment is received before the first fragment the fragment header is however not removed. With this fix it does.

<!--
Put here the description of your contribution:
- describe which part(s) of RIOT is (are) involved
- if it's a bug fix, describe the bug that it solves and how it is solved
- you can also give more information to reviewers about how to test your changes
-->


### Testing procedure
See [Release-Specs 4, Task 10](https://github.com/RIOT-OS/Release-Specs/blob/8f394349d965891c96dfa505db36b1e5127a5740/04-single-hop-6lowpan-icmp/example_test_guide.md#task-10-exprimental---icmpv6-echo-with-large-payload-ipv6-fragmentation). They should succeed for multiple runs, especially if packets get lost. To make sure loss is due to the first fragment missing I applied the following patch (which causes an `E` to appear in the output whenever a packet is lost under this circumstance in the given test run):

```diff
diff --git a/sys/net/gnrc/network_layer/ipv6/ext/frag/gnrc_ipv6_ext_frag.c b/sys/net/gnrc/network_layer/ipv6/ext/frag/gnrc_ipv6_ext_frag.c
index e7025a4eff..2ecbabae87 100644
--- a/sys/net/gnrc/network_layer/ipv6/ext/frag/gnrc_ipv6_ext_frag.c
+++ b/sys/net/gnrc/network_layer/ipv6/ext/frag/gnrc_ipv6_ext_frag.c
@@ -700,6 +700,7 @@ static gnrc_pktsnip_t *_completed(gnrc_ipv6_ext_frag_rbuf_t *rbuf)
         gnrc_ipv6_ext_frag_rbuf_free(rbuf);
         return res;
     }
+    puts("E");
     return NULL;
 }
```
<!--
Details steps to test your contribution:
- which test/example to compile for which board and is there a 'test' command
- how to know that it was not working/available in master
- the expected success test output
-->


### Issues/PRs references
Cause of https://github.com/RIOT-OS/Release-Specs/issues/145#issuecomment-575227596
<!--
Examples: Fixes #1234. See also #5678. Depends on PR #9876.

Please use keywords (e.g., fixes, resolve) with the links to the issues you
resolved, this way they will be automatically closed when your pull request
is merged. See https://help.github.com/articles/closing-issues-using-keywords/.
-->

I am trying to get a gclk generator to connect to a timer/counter, and hooking up the generator to a GCLK_IO (as clock source). Only the generator 0 is active and makes the timers count, but other generators aren't starting, even though I try to enable them. Here is my [code](https://github.com/Alturon/counting_external_source).

Would anyone know what is going on here? Is RIOT disabling them somehow?
While trying to expose a boards actuators and sensors via gCoAP, I noticed, that it is not yet as easy and  as it could be using SAUL. There are several features missing for that:

- [x] **Adding a dynamic list of resources to a gCoAP listener**: While SAUL manages its resources in a linked list to allow for extensions from basically anywhere (heterogenous drivers), gCoAP has uses fixed-sized arrays to manage the resources of a listener. A way to deal with this could be to have "wildcard resources" that can be expanded by the resource handler. A way to add those `.well-known/core` would be to have a special handler for those kind of resources.
- [ ] **`phydat` de-/serializer** so that the data read from a device can be converted into JSON, CBOR, etc. and vice-versa
- [ ] **"reactive" SAUL** to implement events that trigger a CoAP OBSERVE notification
<!-- Please describe your use case, why you need this feature and why this
feature is important for RIOT. -->
# Backport of #13040

### Contribution description
This adds information regarding the usage of Kconfig from an user perspective and in-depth information on how it is currently integrated into RIOT's build system.

### Testing procedure
Run `make doc` and read 'Kconfig in RIOT' section.

### Issues/PRs references
None