I read: Search results return object identifiers, and want to know does the search results also return snippets?

Thanks.
First, thank you for creating this library - I, too, was disappointed in the lack of a lightweight alternative to Elasticsearch. Our use case is a search feature for our website - we're talking hundreds of blog posts, not PB of data!

I've searched but have been unable to find if it's possible to sort the SUGGEST results by popularity (i.e. the number of objects containing that term). It seems all the search terms are alphabetical.

Is such a capability existing, or if not, is it planned? I did take a look at the source code and didn't see an obvious way to incorporate it, but I have no knowledge of Rust so may be missing something obvious.

My proposed workaround in the absence of such a feature is to run the SUGGEST and then a QUERY on each of the suggested terms, counting the results for each. Given the small data sets and the speed of Sonic, I think this is viable for our use case, but open to other ideas too!
Just curious if supported or planned to be?
I've seen reports at scale that Sonic would not behave well in certain cases w/ searches committed to Sonic Channel in non-Latin alphabets. Need to investigate on this.
First thanks for the amazing project. I'm the developer the python client, my team noticed the count is always off by one?
![err](https://user-images.githubusercontent.com/21218053/69153949-c6f6af00-0ae7-11ea-8a18-fc49ed8a9270.png)

Is there a specific reason?
Is there a plan to add a CONTRIBUTING.md? This could include template to do a PR, guidelines to add tests, coding standards, etc. 

I'm currently learning Rust and am very interested in contributing on this project somehow. Thanks!
What would it take to point Kibana to instances of `Sonic` instead of `Elasticsearch`? `sonic` would need to speak fragments of the Elasticsearch API so that Kibana could send requests and then display the responses
Similarly to #135, I'm considering using this to replace an ElasticSearch cluster. We have more than a couple of fields:

- Message text
- User
- Tags
- Message date

However, it should be reasonably straightforward to implement these using multiple searches and buckets, with frontend filtering. It may or may not be any faster than ES; that's part of what I'd like to find out.

The biggest problem is date, which is a range query. Is there any guaranteed ordering to query returns? If they're in any order other than insertion time, then we'd need to retriever *every* match and filter them in the frontend, which is unlikely to be net-positive.
does sonic support pinyin?
Because we are from China,
Chinese users often use pinyin to search
Hello,

at first sight it looks like stopword list is the only requirement for a language to be supported by Sonic.

Is it possible to include following (MIT licensed) stopword list to support Slovak (slo, slk) and possibly other missing languages?

https://github.com/stopwords-iso/stopwords-sk/blob/master/stopwords-sk.txt