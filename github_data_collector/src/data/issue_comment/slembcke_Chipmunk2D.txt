When I try to add a body to a space that is not initialized, I get the error:

```
Aborting due to Chipmunk error: You have already added this body to this space. You must not add it a second time.
        Failed condition: body->space != space
```
That error message is completely unrelated to the mistake that I made, and I spent a few minutes being very confused, as I was sure I had only added the body once.
Cherry-picked https://github.com/slembcke/Chipmunk2D/commit/2902da3eed413924230545d6f6df9a722816d2f7 on 6.2.x branch.

(I'm stuck on v6 due to #104 atm)
Sorry, this is not a bug. I just wanted ask a question. 
I could not figure out how to search the forums, although the FAQ mentions a search field. I cannot find it anywhere. Also, it seems that posting is only possible when you are logged in. But how do I register a new account? Is it possible at all?

Actually, I was looking for some detail information on how transferred impulse(s) are calculated during collisions. I want to simulate objects that "break" during collision when the magnitude of transferred impulse exceeds a certain threshold. If this happens, I want to lower the restitution coefficient or even set it to zero. But for this to work, I need to know the (approximate) transferred impulse *BEFORE* the actual impulse(s) is/are applied. Does this make sense at all? Any ideas how to achieve this?




If you do a segment query from point A to point B, and there is a shape covering point A that the query intersects, it will call for that shape at point B instead of point A.
Here's the simplest reproduction I could come up with in C:

```
#include <chipmunk/chipmunk.h>
void foundShape(cpShape*, cpVect point, cpVect, cpFloat alpha, void*) {
    printf("Found shape at (%g,%g) with alpha=%g",point.x,point.y,alpha);
}
int main() {
    cpSpace* space = nmGetPhysicsWorld();
    cpBody* body = cpSpaceGetStaticBody(space);
    cpSpaceAddShape(space, cpCircleShapeNew(body, 1.0, cpvzero));
    cpSpaceSegmentQuery(space,cpv(0.0,0.0),cpv(5.0,5.0), 0.0, CP_SHAPE_FILTER_ALL, &foundShape, NULL);
    return 0;
}
```

The output is `Found shape at (5,5) with alpha=0`.
It should be `Found shape at (0,0) with alpha=0`.
Might be worth checking other query types for similar edge cases.
There is no CMAKE toggle that can be used to chose single precision floating point.

Currently, the floating point precision is hard-coded in the header, depending on platform.

Hey, and forever cheers for this wonderful Chipmunk project, which I keep sticking to over the years :')

I also recently dove into [Rust](https://www.rust-lang.org/), which is, I think, a *very* promising low-level language, both modern and efficient.

Wondering how Rust and Chipmunk could interact, I came accross this page listing known [Chipmunk binding and ports](https://chipmunk-physics.net/), which does not include Rust yet.  
On the Rust side I found two crates: the first, [chipmunk-sys](https://github.com/TyOverby/chipmunk-sys), claims it only wraps sys-level calls for the second, [chipmunk](https://crates.io/crates/chipmunk), claiming it's work in progress but seems abandonned since 2015.

Did you know about them? Is a port to Rust or a neat binding already on the roadmap somewhere? Has anybody else started anything in this direction?
When bridging this library into Swift, the stricter typing means that all the CGFloat values from UIKit have to be cast back and forth from cpFloat. With this change, cpFloat is typedefed CGFloat if CP_USE_CGTYPES is set, which means no casts are required. This should have no effect when used from C, as CGFloat should be either float or double depending on the same conditions as cpFloat uses.
A user of pymunk made me aware that cpSpacePointQuery and cpSpacePointQueryNearest treats sensor shapes differently. The *Nearest version ignore senor shapes while the other does not. It seems a bit inconsistent and confusing. (The code itself is clear so I dont really know if this is a bug or a feature)

https://github.com/viblo/pymunk/issues/113
May be useful for tracking API/ABI changes in the library: https://abi-laboratory.pro/tracker/timeline/chipmunk/

The report is created with the help of open-source abi-tracker tool: https://github.com/lvc/abi-tracker

![chipmunk2d-1](https://cloud.githubusercontent.com/assets/1517837/25081240/3c0cb992-235a-11e7-8003-a4e2ab32961e.png)
![chipmunk2d-2](https://cloud.githubusercontent.com/assets/1517837/25081243/4250019c-235a-11e7-9d14-8aeb00d6823a.png)

## Environment
* Linux x86_64
* GCC 4.9
* Chipmunk2D 6.0.0 and higher