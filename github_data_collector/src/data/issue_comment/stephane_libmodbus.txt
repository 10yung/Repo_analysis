Hello,

I am using libmodbus version 3.1.4.

In this library I am not able to identify which modbus protocol version  is supported..

Could you  please provide modbus protocol version?

Also in latest release which modbus protocol version is supported?
## libmodbus version

 3.1.6

## OS and/or distribution

 Linux Gentoo

## Environment

All (documentation)

## Description

 libmodbus 3.1.6 on Linux does not install the NEWS and AUTHORS files as part of it's installed documentation (in /usr/share/doc/libmodbus-3.1.6/). This is a problem because they may be needed, and are referred to from other files which are installed in that directory.

Michael Weber patched this in the Gentoo package for 3.1.4 (https://gitweb.gentoo.org/repo/gentoo.git/tree/dev-libs/libmodbus/files/libmodbus-3.1.4-doc.patch) but the patch has not made it upstream. It's only a one-line change to append `AUTHORS NEWS` to the value of `dist_doc_DATA`

```
--- libmodbus-3.1.4/Makefile.in
+++ libmodbus-3.1.4/Makefile.in
@@ -379,7 +379,7 @@
 pkgconfigdir = $(libdir)/pkgconfig
 pkgconfig_DATA = libmodbus.pc
 EXTRA_DIST = libmodbus.pc.in
-dist_doc_DATA = MIGRATION README.md
+dist_doc_DATA = MIGRATION README.md AUTHORS NEWS
 SUBDIRS = src doc $(am__append_1)
 all: config.h
 	$(MAKE) $(AM_MAKEFLAGS) all-recursive
```
(apparently you cannot attach a patch file to this tracker, so content pasted or download from URL above).
Issue #511 describes it all
Suggest fixing by adding a new pair of solution file / project file to the Win32 directory:
modbus.vs16.sln - A new solution file with recent file format
modbus.vs16.vcxproj - A new project file with recent file format (note extension changed from vcproj to vcxproj - this is the new format).

Also, updated .gitignore file, to accommodate the new way Visual Studio is doing things.


## libmodbus version

Version 3.1.6
Commit: f9fe3b0a5343f7fbb3f5c74196bd0fce88df39d5

## OS and/or distribution

Windows 10

## Environment

x64 bits
Visual Studio 2019

## Description

Open modbus-9.sln solution with recent versions of Visual Studio will trigger a "One-Way-Update" dialog, for the solution file and the project file. In its current state, both files have a very old format (Since VS 2008, which is 5 releases ago. Current release is VS 2019).
Moreover, the project file has a build break when trying to build Debug. Bad link argument as version format, which currently is 1.0.0 (Windows support only <major>.<minor>).
Moreover, the project doesn't have x64 build at all

## Expected behaviour

Project build successfully and any Debug/Release, and x86/x64 combination.

## Actual behaviour

Currently x64 doesn't exist. Debug has a break

## Steps to reproduce the behavior (commands or source code)

Open the project with recent Visual Studio


previous test would fail if one byte was non zero. But the whole ID need to be 0
Hey, the `assert()` in `modbus-rtu.c` causes the entire program to abort when the RTU slave ID hasn't been set, which is a bummer.

Here are changes to libmodbus-3.1.6 which seem to do what I want (cause a later `modbus_read_registers()` to fail with the message "Slave not set").  I did not look very closely at the places where I added `return -1` to confirm that it was appropriate, but all tests still pass...

```
--- src/modbus.h.orig   2019-12-09 12:15:24.000000000 -0800
+++ src/modbus.h        2019-12-09 12:41:49.000000000 -0800
@@ -126,6 +126,7 @@
     MODBUS_EXCEPTION_NOT_DEFINED,
     MODBUS_EXCEPTION_GATEWAY_PATH,
     MODBUS_EXCEPTION_GATEWAY_TARGET,
+    MODBUS_EXCEPTION_NO_SLAVE_SET,
     MODBUS_EXCEPTION_MAX
 };
 
@@ -139,14 +140,15 @@
 #define EMBXMEMPAR (MODBUS_ENOBASE + MODBUS_EXCEPTION_MEMORY_PARITY)
 #define EMBXGPATH  (MODBUS_ENOBASE + MODBUS_EXCEPTION_GATEWAY_PATH)
 #define EMBXGTAR   (MODBUS_ENOBASE + MODBUS_EXCEPTION_GATEWAY_TARGET)
+#define EMBXNSLAVE (MODBUS_ENOBASE + MODBUS_EXCEPTION_NO_SLAVE_SET)
 
 /* Native libmodbus error codes */
-#define EMBBADCRC  (EMBXGTAR + 1)
-#define EMBBADDATA (EMBXGTAR + 2)
-#define EMBBADEXC  (EMBXGTAR + 3)
-#define EMBUNKEXC  (EMBXGTAR + 4)
-#define EMBMDATA   (EMBXGTAR + 5)
-#define EMBBADSLAVE (EMBXGTAR + 6)
+#define EMBBADCRC  (EMBXNSLAVE + 1)
+#define EMBBADDATA (EMBXNSLAVE + 2)
+#define EMBBADEXC  (EMBXNSLAVE + 3)
+#define EMBUNKEXC  (EMBXNSLAVE + 4)
+#define EMBMDATA   (EMBXNSLAVE + 5)
+#define EMBBADSLAVE (EMBXNSLAVE + 6)
 
 extern const unsigned int libmodbus_version_major;
 extern const unsigned int libmodbus_version_minor;
```

```
--- src/modbus.c.orig   2019-12-09 12:16:40.000000000 -0800
+++ src/modbus.c        2019-12-09 12:36:07.000000000 -0800
@@ -63,6 +63,8 @@
         return "Gateway path unavailable";
     case EMBXGTAR:
         return "Target device failed to respond";
+    case EMBXNSLAVE:
+        return "Slave not set";
     case EMBBADCRC:
         return "Invalid CRC";
     case EMBBADDATA:
@@ -1048,6 +1050,9 @@
     uint8_t rsp[MAX_MESSAGE_LENGTH];
 
     req_length = ctx->backend->build_request_basis(ctx, function, addr, nb, req);
+    if (req_length == -1) {
+        return -1;
+    }
 
     rc = send_msg(ctx, req, req_length);
     if (rc > 0) {
@@ -1159,6 +1164,9 @@
     }
 
     req_length = ctx->backend->build_request_basis(ctx, function, addr, nb, req);
+    if (req_length == -1) {
+        return -1;
+    }
 
     rc = send_msg(ctx, req, req_length);
     if (rc > 0) {
@@ -1250,6 +1258,9 @@
     }
 
     req_length = ctx->backend->build_request_basis(ctx, function, addr, (int) value, req);
+    if (req_length == -1) {
+        return -1;
+    }
 
     rc = send_msg(ctx, req, req_length);
     if (rc > 0) {
@@ -1317,6 +1328,9 @@
     req_length = ctx->backend->build_request_basis(ctx,
                                                    MODBUS_FC_WRITE_MULTIPLE_COILS,
                                                    addr, nb, req);
+    if (req_length == -1) {
+        return -1;
+    }
     byte_count = (nb / 8) + ((nb % 8) ? 1 : 0);
     req[req_length++] = byte_count;
 
@@ -1379,6 +1393,9 @@
     req_length = ctx->backend->build_request_basis(ctx,
                                                    MODBUS_FC_WRITE_MULTIPLE_REGISTERS,
                                                    addr, nb, req);
+    if (req_length == -1) {
+        return -1;
+    }
     byte_count = nb * 2;
     req[req_length++] = byte_count;
 
@@ -1413,6 +1430,9 @@
     req_length = ctx->backend->build_request_basis(ctx,
                                                    MODBUS_FC_MASK_WRITE_REGISTER,
                                                    addr, 0, req);
+    if (req_length == -1) {
+        return -1;
+    }
 
     /* HACKISH, count is not used */
     req_length -= 2;
@@ -1480,6 +1500,9 @@
     req_length = ctx->backend->build_request_basis(ctx,
                                                    MODBUS_FC_WRITE_AND_READ_REGISTERS,
                                                    read_addr, read_nb, req);
+    if (req_length == -1) {
+        return -1;
+    }
 
     req[req_length++] = write_addr >> 8;
     req[req_length++] = write_addr & 0x00ff;
@@ -1531,6 +1554,9 @@
 
     req_length = ctx->backend->build_request_basis(ctx, MODBUS_FC_REPORT_SLAVE_ID,
                                                    0, 0, req);
+    if (req_length == -1) {
+        return -1;
+    }
 
     /* HACKISH, addr and count are not used */
     req_length -= 4;
```

```
--- src/modbus-rtu.c.orig       2019-12-09 12:12:42.000000000 -0800
+++ src/modbus-rtu.c    2019-12-09 12:42:24.000000000 -0800
@@ -12,7 +12,6 @@
 #ifndef _MSC_VER
 #include <unistd.h>
 #endif
-#include <assert.h>
 
 #include "modbus-private.h"
 
@@ -107,7 +106,10 @@
                                            int addr, int nb,
                                            uint8_t *req)
 {
-    assert(ctx->slave != -1);
+    if (ctx->slave == -1) {
+        errno = EMBXNSLAVE;
+        return -1;
+    }
     req[0] = ctx->slave;
     req[1] = function;
     req[2] = addr >> 8;
```

https://github.com/stephane/libmodbus/blob/f1eb4bc7ccb09cd8d19ab641ee37637f8c34d16d/src/modbus-tcp.c#L202

shouldn't there be an || instead of an &&?
https://github.com/stephane/libmodbus/blob/f1eb4bc7ccb09cd8d19ab641ee37637f8c34d16d/src/modbus.c#L964
hello!
I am currently writing a program that reads and writes multiple 485 ID registers with a bit machine.
Password verification is required before writing;
Password verification process is need to send command to the serial port, and then a serial port to write write register function called after confirmation, the situation is that I can write, and write a success, but there will be some errors, after the write about reading the register, I analyze the reason may be I receive password confirm function of no use for.
Please advise what function to select and how to use to receive password confirmation.
thank you

The program source code is as follows:
 ///////////////////////////////
         printf("send password begin....\n");
         uint8_t raw_req[] = {0xC3,0xDC,0xC2,0xEB,0xD1,0xE9,0xD6,0xA4,0xA3,0xBA,0x01,0x02,0x03,0x04,0x05,0x06};
         int rsp = 16 * sizeof(uint8_t);
		 printf("send raw_..\n");
         int W_S =modbus_send_raw_request(ctx,raw_req,rsp);
         sleep(3);  
       	 if (W_S != -1) printf("send...is .OK..W_S=%d\n",W_S); 
         //int rsp_an = 2 * sizeof(uint8_t);
		 printf("waiting for replay..\n");
		 uint8_t rsp_an[MODBUS_RTU_MAX_ADU_LENGTH];
         int rec_con = modbus_receive_confirmation(ctx, rsp_an);
	     printf("res_con=%d\n",rec_con);
		 if (rec_con != -1) printf("receive....OK..rec_con=%d\n",rec_con); 
  ////////////////////////////////


The results are as follows
//////////////////////////////////////////////////////////////
send password begin....
send raw_..
[C3][DC][C2][EB][D1][E9][D6][A4][A3][BA][01][02][03][04][05][06][56][D3]
send...is .OK..W_S=18


waiting for replay..
Waiting for a confirmation...
ERROR Operation timed out: select

<6F><6B>res_con=-1
start write CDMOS...
[03][10][00][D7][00][02][04][00][00][00][01][75][6D]
Waiting for a confirmation...

<03><10><00><D7><00><02><F0><12>
ERROR modbus_write_register (2)
Address =D7, Val =215(0x0)
/////////////////////////////////////////////////////////////////////////////
Hi, im trying to read data from a modbus device on my network.

I have the libmbus example code:

- #include <stdio.h>
- #include <modbus.h>
- 
- int main(void) {
-   modbus_t *mb;
-   uint16_t tab_reg[32];
- 
-   mb = modbus_new_tcp("127.0.0.1", 1502);
-   modbus_connect(mb);
- 
-   /* Read 5 registers from the address 0 */
-   modbus_read_registers(mb, 0, 5, tab_reg);
- 
-   modbus_close(mb);
-   modbus_free(mb);
- }

And I compile it with the next command:
gcc test1.c -o test.o $(pkg-config --libs --cflags libmodbus)

The issue is that i dont know how to open test.o file. when I open it with nano or cat commands, there is nothing readable on it.

Iḿ new on libmbus, so any help will be apreciated

have a nice day :)
