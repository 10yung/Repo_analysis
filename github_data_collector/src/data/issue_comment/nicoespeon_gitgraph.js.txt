Use like this: 

```js
const master = gitgraph.branch('master');
master.commit('something');
const develop = gitgraph.branch('master');
develop.commit('something');

develop.merge({
  branch: master,
  commitOption: {
    renderDot: () => <text>hello</text>
  }
});
```
Has anyone ever been successful on parsing a git log into an accurate graph using this library?

I initially started a project to make my own graph but this library somewhat starts with all branches connecting to a single root.
Ive also ran into this where commits merged into its own branch formed a straight line instead of a leaf.(might have something to do with my bad algorithm)

anyway. I ditched that project but I plan to try again. but before I try again I wanna make sure that someone has actually done this before using this library
**Describe the bug**
I am trying to do something like this
master.merge(develop, { subject: "Add feature" });
but it is not adding the subject. The same happens with hash etc.

You can try with
https://codepen.io/nicoespeon/pen/arqPWb?editors=1010
just replacing develop.merge(aFeature);
with develop.merge(aFeature, {subject: "The subject" });



**Is your feature request related to a problem? Please describe.**

GitgraphUserApi.import() is very useful when drawing complex git graphs.
However, I recognize that there is no way to manipulate commit attributes such as style and onClick.
Especially typescript is restricted by type, so I cannot access commit attributes.
I want to change the style for some commits or set an onClick handler for all commits.

**Describe the solution you'd like**

I propose passing a function to GitgraphUserApi.import() to translate CommitOptions.

**Describe alternatives you've considered**

I propose to change https://github.com/nicoespeon/gitgraph.js/blob/a4a26a280bdb4027e9747e05148c9c7a3baf19bc/packages/gitgraph-core/src/user-api/gitgraph-user-api.ts#L188 to

```ts
  public import(data: unknown, translator?: (CommitOptions<TNode>) => CommitOptions<TNode>) {
```

and https://github.com/nicoespeon/gitgraph.js/blob/a4a26a280bdb4027e9747e05148c9c7a3baf19bc/packages/gitgraph-core/src/user-api/gitgraph-user-api.ts#L225-L228 to

```ts
      }))
      .map(translator)
      // Git2json outputs is reverse-chronological.
      // We need to commit it chronological order.
      .reverse();
```

In this case, I think it can be used as follows.

```ts
gitgraph.import(data, (commit)  => {
  commit.onClick = () => { alert("clicked") };
  
  if (commit.subject.indexOf("bug") != -1) {
    commit.dotText = "üêõ";
  }

  return commit;
}
```

**Additional context**

I am a beginner in typescript. 
I'm sorry if gitgraphjs already has another solution.

Love this library!

**Is your feature request related to a problem? Please describe.**
A clear and concise description of what the problem is. Ex. I'm always frustrated when [‚Ä¶]

It would be great to distinguish between a merge/rebase and a pull request.

**Describe the solution you'd like**
A clear and concise description of what you want to happen.

master.pullRequest('feature')

It could look like this:

https://octicons.github.com/icon/git-pull-request/

**Additional context**
Add any other context or screenshots about the feature request here.

I understand you're looking for maintainers, so hopefully this is something that would be great to be built!

Can I use html (img / a) in the long text / commit
https://codepen.io/nicoespeon/pen/arqPWb?editors=0010

You can easily reproduce this bug.
Just add two line.
```
console.log(gitgraph._graph.commits[0].branches)
setTimeout(()=>{console.log(gitgraph._graph.commits[0].branches)},0)
```
In this example https://codepen.io/nicoespeon/pen/arqPWb?editors=0010.

![image](https://user-images.githubusercontent.com/14165451/67380864-8aee2e00-f5bd-11e9-93e8-047acb07c0c0.png)

Why I found this because I have to change commit color of stroke.
```
graphData.commits.forEach(commit=>{
        commit.style.dot.strokeColor = graphData.branches.get(commit.branches[0]).computedColor
    })
    commit.style.dot.strokeWidth = 3
    commit.style.dot.strokeColor = '#e60000'
```
I want to reset the stroke of color to same like color of branch.
Then I found this bug? or my scenario is wrong .

Is there any one know this ? I am use ```@gitgraph/js.```
Thanks
![image](https://user-images.githubusercontent.com/14165451/67374881-693c7900-f5b4-11e9-83ce-a56fceb65d3a.png)

I have a long line of commit.
In the version of  v1.15.1, I can scroll to the far right by this way.
```
graphContainer.scrollLeft( graphContainer[0].scrollWidth )
```
But now, 1.3.2,I found that it may be a race condition.
I have to do that after rendering graph be done.
I am use ```@gitgraph/js```.
Is there any way to handle this callback ?
Thanks
Hi everyone!

I just became dad few days ago üéâ üçº  

Thus, it became clear to me that I need to focus my energy and **limit the number of project I run in parallel**. In terms of personal open-source side-projects, I'll focus my efforts on [Abracadabra](https://github.com/nicoespeon/abracadabra), a VS Code extension that provides automated refactorings for JS / TS.

It has been a long time I'm running Gitgraph.js with my friend @fabien0102. We created this project so we could easily draw simple git graphs, directly in the browser, to use for blog posts and presentations. These days however, **I don't use it much anymore**.

However, you can see with the currently open issues that people have different, interesting suggestions to cover more use-cases. Also, there are bugs to fix. Finally, the overall documentation of the library could be improved.

I won't have the time & energy to tackle these. Not in my foreseeable future at least. Thus, **I'm looking for new people to maintain the library and take over the project**.

I'll be able to provide guidance and onboard you on the project if you want. You'll see that the dev environment is "not that bad", with features essentially covered with tests (unit & E2E).

Let me know if you're interested. In the meantime, be aware that I won't work on the open issues myself.

![hack-tv](https://user-images.githubusercontent.com/1094774/66678520-1967c480-ec3a-11e9-91b2-11bfd6a84f02.gif)

**Is your feature request related to a problem? Please describe.**

I was analysing the problem mentioned in feature request https://github.com/nicoespeon/gitgraph.js/issues/290 and I realised this is bigger change and demands more discussion and proper planning and design so I decided to open a proper feature proposal issue.

Briefly for those unfamiliar with https://github.com/nicoespeon/gitgraph.js/issues/290, every time we branch a new column gets assigned to new branch even if there is available space. For projects with many short-lived branches layout grows really large pretty quickly. I prepared an example that demonstrates it pretty clearly:

<img width="486" alt="Screenshot 2019-09-10 at 11 48 04 AM" src="https://user-images.githubusercontent.com/8202674/64582714-fc34a180-d3c0-11e9-8f1e-9849f62ae5d9.png">

**Describe the solution you'd like**

I came across the article [commit graph drawing algorithms](https://pvigier.github.io/2019/05/06/commit-graph-drawing-algorithms.html) by @pvigier the developer of [Gitamine](https://github.com/pvigier/gitamine) who written a master thesis about this subject.

It appears like the process of rendering git graph consists of three steps

1. finding appropriate order of commits (`x-coordinate` of each commits)
2. finding appropriate column (compute `y-coordinates`)
3. optimise the layout

I propose to isolate those steps and implement separate functions for them so that user can select which algorithm would like to use

```javascript
const options = {
  "sorting": "topological",
  "algorithm": "curved",
  "optimisation": "all-nodes-and-all-edges"
}
```

that gives full customisation regarding the output layout, for less advanced users who would want to replicate the behaviour of their favourite software we could prepare pre-defined layout, each consisting of sorting and column order algorithm and eventual optimisation, such as

```javascript
const options = {
  "layout": "SourceTree"
}
```

would replicate the output as similar to SourceTree as we can reproduce

the disadvantage is, there would be a lot of code to take into account all those algorithms and possibly not enough contributors to implement all of those, so I also suggest and alternative solution

**Describe alternatives you've considered**

We could also adapt some code from [Gitamine](https://github.com/pvigier/gitamine) which is GPL-3.0 licenced, I briefly researched it and it looks like it is possible to include GPL-3.0 code in MIT licence project as stated [here](https://stackoverflow.com/a/5610965/2398574).

My alternative proposal is to still abstract out part of the code that assigns order to columns and keep the `layout` option proposed earlier as

```javascript
const options = {
  "layout": "gitamine"
}
```

would use the Gitamine-based algorithm and

```javascript
const options = {
  "layout": "regular"
}
```

would render everything exactly as it is now, also `regular` would be the default value so update would not break backwards compatibility and in the future we could consider using different layout as default if community demands it.

**Additional context**

I attach some figures from [article](https://pvigier.github.io/2019/05/06/commit-graph-drawing-algorithms.html) by @pvigier, they demonstrate quite nicely the possible variety of layouts.

Also, I'd like to mention that I already forked and briefly researched the source and if there would be positive feedback on proposal I'll be happy to discuss techy details based on my notes and I can take care of the implementation.

I'd like to mention that the adapted algorithm by @pvigier I would commit separately and set him as the author of that commit.

| ![Git_Cola](https://user-images.githubusercontent.com/8202674/65381654-59691500-dd28-11e9-9fea-e7bf92cc1d7c.png) GitCola 	| ![GitExtensions](https://user-images.githubusercontent.com/8202674/65381657-5d953280-dd28-11e9-9271-d2debade2778.png) GitExtension 	|
|---------------------------------------------------------------------------------------------------------------------------	|------------------------------------------------------------------------------------------------------------------------------------	|
| ![gitk](https://user-images.githubusercontent.com/8202674/65381658-62f27d00-dd28-11e9-9eb1-356e3fd2445f.png) gitk 	| ![GitKraken](https://user-images.githubusercontent.com/8202674/65381660-6980f480-dd28-11e9-8c04-efe32e570c4d.png) GitKraken 	|
| ![SmartGit](https://user-images.githubusercontent.com/8202674/65381662-6e45a880-dd28-11e9-8b82-990b78d8769b.png) SmartGit 	| ![SourceTree](https://user-images.githubusercontent.com/8202674/65381688-22473380-dd29-11e9-93cd-e529064df6e7.png) SourceTree 	|