```
D:\pro\node_modules\async-profile\node_modules\async-listener\index.js:3
if (process.addAsyncListener) throw new Error("Don't require polyfill unless n
eeded");
                              ^

Error: Don't require polyfill unless needed
    at Object.<anonymous> (D:\pro\node_modules\async-profile\node_modules\asyn
c-listener\index.js:3:37)
    at Module._compile (module.js:569:30)
    at Module._extensions..js (module.js:580:10)
    at Object.require.extensions.(anonymous function) [as .js] (D:\pro\apm\nod
e_modules\babel-register\lib\node.js:152:7)
    at Module.load (module.js:503:32)
    at tryModuleLoad (module.js:466:12)
    at Function.Module._load (module.js:458:3)
    at Module.require (module.js:513:17)
    at require (internal/module.js:11:18)
    at Object.<anonymous> (D:\pro\node_modules\async-profile\lib\polyfill.js:5
:3)
    at Object.<anonymous> (D:\pro\node_modules\async-profile\lib\polyfill.js:4
9:4)
    at Module._compile (module.js:569:30)
    at Module._extensions..js (module.js:580:10)
    at Object.require.extensions.(anonymous function) [as .js] (D:\pro\apm\nod
e_modules\babel-register\lib\node.js:152:7)
    at Module.load (module.js:503:32)
    at tryModuleLoad (module.js:466:12)
    at Function.Module._load (module.js:458:3)
    at Module.require (module.js:513:17)
    at require (internal/module.js:11:18)
    at Object.<anonymous> (D:\pro\node_modules\async-profile\lib\index.js:8:15
)
    at Object.<anonymous> (D:\pro\node_modules\async-profile\lib\index.js:175:
4)
    at Module._compile (module.js:569:30)
    at Module._extensions..js (module.js:580:10)
    at Object.require.extensions.(anonymous function) [as .js] (D:\pro\apm\nod
e_modules\babel-register\lib\node.js:152:7)
    at Module.load (module.js:503:32)
    at tryModuleLoad (module.js:466:12)
    at Function.Module._load (module.js:458:3)
    at Module.require (module.js:513:17)
    at require (internal/module.js:11:18)
    at Object.<anonymous> (D:/pro/apm/apis/index.js:5:20)
    at Module._compile (module.js:569:30)
    at loader (D:\pro\apm\node_modules\babel-register\lib\node.js:144:5)
    at Object.require.extensions.(anonymous function) [as .js] (D:\pro\apm\nod
e_modules\babel-register\lib\node.js:154:7)
    at Module.load (module.js:503:32)
    at tryModuleLoad (module.js:466:12)
    at Function.Module._load (module.js:458:3)
    at Module.require (module.js:513:17)
    at require (internal/module.js:11:18)
    at Object.<anonymous> (D:/pro/apm/routes/users.js:5:22)
    at Module._compile (module.js:569:30)
    at loader (D:\pro\apm\node_modules\babel-register\lib\node.js:144:5)
    at Object.require.extensions.(anonymous function) [as .js] (D:\pro\apm\nod
e_modules\babel-register\lib\node.js:154:7)
    at Module.load (module.js:503:32)
    at tryModuleLoad (module.js:466:12)
    at Function.Module._load (module.js:458:3)
    at Module.require (module.js:513:17)
    at require (internal/module.js:11:18)
    at Object.<anonymous> (D:/pro/apm/app.js:10:13)
    at Module._compile (module.js:569:30)
    at loader (D:\pro\apm\node_modules\babel-register\lib\node.js:144:5)
    at Object.require.extensions.(anonymous function) [as .js] (D:\pro\apm\nod
e_modules\babel-register\lib\node.js:154:7)
    at Module.load (module.js:503:32)
    at tryModuleLoad (module.js:466:12)
    at Function.Module._load (module.js:458:3)
    at Module.require (module.js:513:17)
    at require (internal/module.js:11:18)
    at Object.<anonymous> (D:\pro\apm\bin\www:7:11)
    at Module._compile (module.js:569:30)
    at Object.Module._extensions..js (module.js:580:10)
    at Module.load (module.js:503:32)
    at tryModuleLoad (module.js:466:12)
    at Function.Module._load (module.js:458:3)
    at Function.Module.runMain (module.js:605:10)
    at startup (bootstrap_node.js:158:16)
    at bootstrap_node.js:575:3
```
Is It caused by `babel-register`??? I hava tried:

- re-assign value to process.addAsyncListener

```
if(process.addAsyncListener) {
  process.addAsyncListener = null;
}
```

- comment source code
```
// if(process.addAsyncListener){ throw new Error(...) }
```
but there is a new problem
```
D:\pro\node_modules\async-profile\node_modules\async-listener\glue.js:351
  for (var i = 0; i < length; ++i) list[i].listener();
                                           ^

TypeError: list[i].listener is not a function
```

I must be misunderstanding something, but wherever I use async-profiler it doesn't actually profile anything. I immediately get the result, like this:

```
total: 0.009ms (in 2.350ms real time, CPU load: 0.0, wait time: 4.299ms)
2.348: 0.002ms  at AsyncProfile.create (/srv/www/node_modules/async-profile/lib/index.js:61:27) (0.000)  
2.352: 0.002ms  at AsyncProfile.create (/srv/www/node_modules/async-profile/lib/index.js:61:27) (0.000)  
2.356: 0.003ms  at AsyncProfile.create (/srv/www/node_modules/async-profile/lib/index.js:61:27) (0.000)  
2.361: 0.002ms  at AsyncProfile.create (/srv/www/node_modules/async-profile/lib/index.js:61:27) (0.000)
```

Now, most of my callbacks are truly asynchronous, there are multiple `setImmediate` calls down the line. I guess it should be able to catch these, because otherwise there isn't a lot of 'async' about it, right?

I've also tried the advanced configuration (where I call p.stop() in the final callback) but no dice.

```
0.127: 0.455ms  at AsyncProfile.create (/Users/dan/test-async-profile/node_modules/async-profile/lib/index.js:61:27) (0.072)
5.560: 2.849ms    at AsyncProfile.create (/Users/dan/test-async-profile/node_modules/async-profile/lib/index.js:61:27) (0.169)
8.590: 0.006ms      at AsyncProfile.create (/Users/dan/test-async-profile/async-profile/lib/index.js:61:27) (0.000)
8.600: 0.003ms      at AsyncProfile.create
```

I tried using async-profile within an endpoint of an express app, but I can't get it to work. Its immediately returning of making a instance an within the endpoint. Here a stripped down demo of my code:

``` javascript
//controller.js

var AsyncProfile = require('async-profile');

function someEndpoint(req, res){

    var profiler = new AsyncProfile({
        callback: function(results){
            console.log("error", "CPU profiling", results);
        }
    });

   //Its return immediately after the instantiation 

   dosomething(function returnCallback(){

    profiler.stop();
    //Expected it to stop here
 });



}
```

The default print function was built for the use-case I originally had, which was a few callbacks each taking a significant time. The example in #3 generates N identical frames, which it'd be nice to group together by default.

Hi @ConradIrwin,

Do you happen to have any code examples on how to properly use your module? Do I just drop the usage code anywhere?

Thanks
Marcello
