I know the issue sounds super-vague, but it's all I have... none of the example code is interactive at all; sprites and meshes either flicker or stay completely still.

I don't even know where to begin in terms of debugging this (not really a graphics kind of guy) so ask me any information you need on my system and I will gladly share it to solve this.

I am using Ubuntu 18.04, cargo 1.39.0 and ggez 0.5.1.

Any will help will be greatly appreciated.
I'm working on a pixel art-ish game and using a `SpriteBatch` to render groups of sprites at a time. Sometimes these renders include transforms on the batch itself, such as flipping the batch horizontally via scaling it by `[-1.0, 1.0]` from the center of the image. According to the documentation for `DrawParam::offset`, this should be doable via `offset([0.5, 0.5])`, a la:

```rust
let params = DrawParam::new()
    .scale([-1.0, 1.0])
    .offset([0.5, 0.5]);
graphics::draw(&mut ctx, &batch, params)?;
```

 However, that does not work. Instead, I need to scale by the dimensions of the batch itself: 

```rust
let batch_dims = batch.dimensions(&mut ctx).unwrap_or_else(Rect::zero);
let params = DrawParam::new()
    .scale([-1.0, 1.0])
    .offset([0.5 * batch_dims.w, 0.5 * batch_dims.h]);
graphics::draw(&mut ctx, &batch, params)?;
```

Is this intended behavior? If so, can the documentation be updated to reflect that?
I've added a new example/tutorial to the Projects.md. This is an example of using specs with ggez, including some basic systems for movement and collision detection.
Added a link to a version of the ggez-template using `legion` in place of `specs`.
Hi,

My application involves some distance field rendering on the GPU, which needs a floating point render target. I've added an extra parameter to Canvas::new() function and a bunch of other really minor things.

The other thing is the "MeshBatch" struct that can be used to render instanced geometry, works similarly to the current "SpriteBatch"-es, but tries to cache instance data and only update it when necessary.

Thanks.
**Describe the bug**

`WindowMode::maximized` has no effect, unless `WindowMode::resizable` is set to `true`.

Note: I actually want `resizable` to be `true`, so this bug has no negative effect on me. I just noticed it, and thought I'd report it, hoping it will save someone else some trouble.

**To Reproduce**

Run this program (depends on ggez 0.5.1).
``` rust
use std::env;

use ggez::{
    Context,
    ContextBuilder,
    GameResult,
    conf::{
        FullscreenType,
        WindowMode,
    },
    event::{
        EventHandler,
        run,
    },
};


fn main() -> GameResult {
    // Workaround for https://github.com/ggez/ggez/issues/579.
    // I don't know, if this is required to reproduce this bug. It's
    // just the only way I found to get ggez working on my machine.
    env::set_var("WINIT_UNIX_BACKEND", "x11");

    let (mut context, mut event_loop) =
        ContextBuilder::new("window-maximize-bug", "Hanno Braun")
            .window_mode(
                WindowMode::default()
                    .fullscreen_type(FullscreenType::Windowed)
                    // This has no effect.
                    .maximized(true),
            )
            .build()?;

    let mut event_handler = Handler;

    run(&mut context, &mut event_loop, &mut event_handler)?;
    Ok(())
}


struct Handler;
```

**Expected behavior**

The program starts with a maximized window.

**Hardware and Software:**
 - ggez version: 0.5.1 (latest release, at the time of writing)
 - OS: Arch Linux
 - Graphics card: Intel UHD Graphics 620
 - Graphics card drivers: Whatever the default is. `lshw` says `driver=i915`
https://github.com/not-fl3/good-web-game

And miniquad: https://github.com/not-fl3/miniquad
> Osspial: have you considered creating a ggez-specific Path struct? The std::Path struct is pretty clearly intended to map onto the actual filesystem, and I can definitely see why repurposing that directly for ggez's virtual filesystem would be confusing
> icefox Not until 15 minutes ago but it might be worth trying.  `std::path::Path` 's assumptions make the internals of ggez::filesystem a bit more of a headache than they need to be also.

Anyone have any thoughts for or against?
**Describe the bug**
Keycodes to represent certain keys are missing or not recognised.

**To Reproduce**
add `println!("KeyDownEvent Key:{:?}, Mods:{:?}", keycode, _keymod);` to the `key_down_event(...)` function in your event handler. Use the output to note the results of pushing various keys. 

**Expected behaviour**
I expect every key to return _something_ even if it is incorrect, current behaviour has multiple dead keys in my layout including the `(` and `)` (shift + 8 and 9 on my keyboard) 

notibly `LBracket` and `RBracket` are fired on the square brackets. (Altgr + 8 and 9)

Also noteworthy is the # key doesn't even have an associated keycode listed in the docs and is also dead on my layout.

On my system the following lablelled key functions result in no event being fired:
`^ ° ! " § $ % & ( ) ? ß ´ € Ü Ö Ä * ~ [Capslock] { } # < > | _ [PrintScrn] [WinKey]`

**Hardware and Software:**
 - ggez version: 0.5.1
 - OS: Linux (Arch)
 - Graphics card: Not applicable
 - Graphics card drivers: Not applicable
 - Keyboard layout: German

fixes https://github.com/ggez/ggez/issues/724