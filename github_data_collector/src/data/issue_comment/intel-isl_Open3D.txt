Merge rendering -> gui.

Maksim, can you review this merge?  Everything looks okay to me, but the click-dragging the mouse in SceneWidget looks really weird, it's not rotating around an axis like I'm expecting, more like gimbal lock or something. I'm worried that I missed something, but if that's expected behavior, just merge it.

<!-- Reviewable:start -->
---
This change is [<img src="https://reviewable.io/review_button.svg" height="34" align="absmiddle" alt="Reviewable"/>](https://reviewable.io/reviews/intel-isl/open3d/1451)
<!-- Reviewable:end -->

Minimum example:
```python
# Numpy -> Open3D -> PyTorch all share the same memory
a = np.ones((2, 2))
b = o3d.Tensor.from_numpy(a)
c = torch.utils.dlpack.from_dlpack(b.to_dlpack())
```
See `src/UnitTest/Python/test_core.py` for usage examples.

<!-- Reviewable:start -->
---
This change is [<img src="https://reviewable.io/review_button.svg" height="34" align="absmiddle" alt="Reviewable"/>](https://reviewable.io/reviews/intel-isl/open3d/1450)
<!-- Reviewable:end -->

Adds the following for the tensorflow reduce_subarrays op:
- GPU implementation
- Unit test

<!-- Reviewable:start -->
---
This change is [<img src="https://reviewable.io/review_button.svg" height="34" align="absmiddle" alt="Reviewable"/>](https://reviewable.io/reviews/intel-isl/open3d/1449)
<!-- Reviewable:end -->

I get a 
TypeError: can't pickle open3d.open3d.geometry.PointCloud objects
when I try to parallelize a for loop to (multiple) query the KDTree.
I have tried joblib and numba and both give me same error.

my code is basically
```def myfunc(i):
         [k, idx, _] = pcd_tree.search_knn_vector_3d(pcd.points[i], 1000)
          return idx
results = Parallel(n_jobs=num_cores, verbose=50)(delayed(
    myfunc)(i)for i in my_list)
```

Is there an alternate fast method for multiple querying the KD Tree?

Thanks!
Some cameras are flipped (in the z-axis) when the bounding_box center of the scene is not visible (i.e. center is behind the camera). This situation could happen when you are in an indoor scene, for instance, and looking at the walls instead of towards the center of the room.

The fix is simple, basically adding a absolute value to the result of the dot product (projection to the 'front_' vector).

<!-- Reviewable:start -->
---
This change is [<img src="https://reviewable.io/review_button.svg" height="34" align="absmiddle" alt="Reviewable"/>](https://reviewable.io/reviews/intel-isl/open3d/1447)
<!-- Reviewable:end -->

I'm using the new Azure Kinect and can get interesting results but open3d uses the Azure Kinect is just used as an images recorder. Is it possible to use the IMU to get more precises results ? It could be used also with the DR400 realsense with IMU ..
Do you have any projects about using IMU data ?

Hi, i still have a question.
In your demo:

    print("Optimizing PoseGraph ...")
    option = GlobalOptimizationOption(
            max_correspondence_distance = max_correspondence_distance_fine,
            edge_prune_threshold = 0.25,
            reference_node = 0)
    global_optimization(pose_graph,
            GlobalOptimizationLevenbergMarquardt(),
            GlobalOptimizationConvergenceCriteria(), option)
And graph is defined as :

pose_graph.nodes.append(PoseGraphNode(np.linalg.inv(odometry)))
pose_graph.edges.append(PoseGraphEdge(source_id, target_id,
transformation_icp, information_icp, uncertain = False))

It seems that, the whole optimization process requires no point clouds as input. I can hardly understand it.  Could you please explain it? i am a new learner for this area.
Hi all,

I have several point clouds of the same environment and each of them have more or less height. Instead of loading everything at the same time, I am loading each cloud at a time, and register it against the previous loaded one and then show the result in a non-blocking visualizer. When I am trying to move the camera to place it in the center of each new point cloud and in a top-view (like birds eye view), I have problems setting the view to keep at the same height, meaning, if the new point cloud has more height than the previous one, the camera zoom shouldn't move. Right now I am trying to do it like this:

```
Eigen::Vector3d minBound = cloud->GetMinBound();
Eigen::Vector3d maxBound = cloud->GetMaxBound();
open3d::visualization::ViewParameters viewParams;
viewParams.boundingbox_min_ = minBound;
viewParams.boundingbox_max_ = maxBound;
viewParams.lookat_ = (minBound + maxBound) / 2;
viewParams.field_of_view_ = 60.0;
viewParams.zoom_ = 0.7;
viewParams.up_ << 0.0, 1.0, 0.0;
viewParams.front_ << 0.0, 0.0, 1.0;
visualiser.GetViewControl().ConvertFromViewParameters(viewParams);
```
while the view is moving to keep it to the center of the x,y coords of the new cloud, the zoom keeps changing all the time.
Is there any way of keeping the same Z position in the viewer? Keeping a global variable for it or recomputing it every time, doesn't matter.
I cannot find anything indicating or explaining how to do it.

Thanks for the help
From the documenation for VoxelGrid.carve_depth_map:

> The point is not carved if none of the boundary points of the voxel projects to a valid image location.

However, the implementation does carve voxels when no points project into the image:
https://github.com/intel-isl/Open3D/blob/master/src/Open3D/Geometry/VoxelGrid.cpp#L288-L309

The question is which behavior is desired.  I'm in favor of doing what the documentation says and not carving voxels if they do not project into the image.  If other agree with that, I can fix the function to adhere to that contract.



<!-- Reviewable:start -->
This change is [<img src="https://reviewable.io/review_button.svg" height="34" align="absmiddle" alt="Reviewable"/>](https://reviewable.io/reviews/intel-isl/open3d/1438)
<!-- Reviewable:end -->
