Hi there, 

I'm newbie in Swift and for now I am facing this kind of issue. I tried various solutions which I found on StackOverflow, but errors did not disappeared. I have no idea what's going on, maybe something with imported settings. Please, can you give me some advice?

Thanks!

<img width="1086" alt="Snímka obrazovky 2019-12-20 o 22 09 31" src="https://user-images.githubusercontent.com/32091206/71293359-6f14c780-2375-11ea-9812-0fb5bfa34cc1.png">


我之前用的是Kanna，运行都正常，但是有少许内存泄漏。
换Ji库后，macOS下运行很完美，但是相同代码到Linux上所有XPath都会报错。
XPath error : Invalid expression

```
let data = try? Data(contentsOf: URL(string: "http://m.263xs.com/info-83441/")!)		
let gbk = CFStringConvertEncodingToNSStringEncoding(CFStringEncoding(CFStringEncodings.GB_18030_2000.rawValue))
let string = String(data: data!, encoding: String.Encoding(rawValue: gbk)) // **it's OK!**
let doc = Ji(data: data, encoding: String.Encoding(rawValue: gbk), isXML: false) // **it show error: "encoding error : input conversion failed due to input error"**
```
Evaluating XPath strings fails if one of the elements is defined with XML namespace.
Most of the frameworks offer a method to register namespaces but I found no way for Ji.
So I guess many of the common XML/HTML files can't be queried by your xPath function.

Since Swift isn't ABI stable yet, the prebuilt binaries that Carthage gets from Github on the releases page are not working with the latest versions of XCode/Swift. Would recommend that they be removed, as XCode won't build with them.
As far as I can tell, libxml2 supports CSS selector in addtion to XPath selector.

And https://github.com/cezheng/Fuzi does support CSS selector.

Hey again :)

I've been running into some issues trying to correctly decode the content of a specific page. The response header says it's utf-8, the page itself says is latin-1. Decoding with utf-8 works when done by hand, but I kept having encoding issues when creating an HTML document with Ji.

``` swift
let htmlDoc = Ji(htmlData: data, encoding: NSUTF8StringEncoding)
```

I tried a bunch of different `NSStringEncoding`s, most with the same results, which seemed weird. Having a look at Ji's code I found cEncoding to be a null pointer every time so `htmlReadMemory()` probably defaults to something besides utf-8.

``` swift
let cEncoding: UnsafePointer<CChar> = CFStringGetCStringPtr(cfEncodingAsString, 0)
if cEncoding == nil {
    print("cEncoding is a null pointer")
}
```

If I hardcode the encoding of the page as a string literal a few lines lower everything seems to be working.

``` swift
htmlDoc = htmlReadMemory(cBuffer, cSize, nil, "utf-8", options)
```

I hope this helps debugging this issue, I don't have much of a clue^^
