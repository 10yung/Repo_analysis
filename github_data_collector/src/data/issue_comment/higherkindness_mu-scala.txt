Updates [co.fs2:fs2-core](https://github.com/functional-streams-for-scala/fs2) [from 2.1.0 to 2.2.0](https://github.com/functional-streams-for-scala/fs2/compare/v2.1.0...v2.2.0).
[Release Notes/Changelog](https://github.com/functional-streams-for-scala/fs2/blob/master/CHANGELOG.md)

I'll automatically update this PR to resolve conflicts as long as you don't change it yourself.

If you'd like to skip this version, you can just close this PR. If you have any feedback, just mention me in the comments below.

Have a fantastic day writing Scala!

<details>
<summary>Ignore future updates</summary>

Add this to your `.scala-steward.conf` file to ignore future updates of this dependency:
```
updates.ignore = [ { groupId = "co.fs2", artifactId = "fs2-core" } ]
```
</details>

labels: library-update, semver-minor
It looks renaming rooms are not fully supported. The way to do it is to create a new one, write an email to support to migrate the messages and then delete the old one.

https://gitlab.com/gitlab-org/gitter/webapp/issues/1162

As part of this issue, we should verify the conf to point to the right room name

https://github.com/higherkindness/mu-scala/blob/9743fca38096a0a375f10c92a85ef76a82830021/project/ProjectPlugin.scala#L394

Updates 
* [io.grpc:grpc-netty](https://github.com/grpc/grpc-java)
* [io.grpc:grpc-okhttp](https://github.com/grpc/grpc-java)
* [io.grpc:grpc-stub](https://github.com/grpc/grpc-java)
* [io.grpc:grpc-testing](https://github.com/grpc/grpc-java)

 [from 1.24.2 to 1.26.0](https://github.com/grpc/grpc-java/compare/v1.24.2...v1.26.0).
[Release Notes/Changelog](https://github.com/grpc/grpc-java/releases/tag/v1.26.0)

I'll automatically update this PR to resolve conflicts as long as you don't change it yourself.

If you'd like to skip this version, you can just close this PR. If you have any feedback, just mention me in the comments below.

Have a fantastic day writing Scala!

<details>
<summary>Ignore future updates</summary>

Add this to your `.scala-steward.conf` file to ignore future updates of this dependency:
```
updates.ignore = [ { groupId = "io.grpc" } ]
```
</details>

labels: semver-minor
Updates [org.scalatest:scalatest](https://github.com/scalatest/scalatest) [from 3.0.8 to 3.1.0](https://github.com/scalatest/scalatest/compare/release-3.0.8...release-3.1.0).
[Release Notes/Changelog](https://github.com/scalatest/scalatest/releases/tag/release-3.1.0)

I'll automatically update this PR to resolve conflicts as long as you don't change it yourself.

If you'd like to skip this version, you can just close this PR. If you have any feedback, just mention me in the comments below.

Have a fantastic day writing Scala!

<details>
<summary>Ignore future updates</summary>

Add this to your `.scala-steward.conf` file to ignore future updates of this dependency:
```
updates.ignore = [ { groupId = "org.scalatest", artifactId = "scalatest" } ]
```
</details>
<details>
<summary>Applied Migrations</summary>

* https://raw.githubusercontent.com/scalatest/autofix/e4de53fa40fac423bd64d165ff36bde38ce52388/3.0.x/rules/src/main/scala/org/scalatest/autofix/v3_0_x/RenameDeprecatedPackage.scala
* https://raw.githubusercontent.com/scalatest/autofix/e4de53fa40fac423bd64d165ff36bde38ce52388/3.1.x/rules/src/main/scala/org/scalatest/autofix/v3_1_x/RewriteDeprecatedNames.scala
</details>

labels: semver-minor, scalafix-migrations
Updates 
* [io.grpc:grpc-netty](https://github.com/grpc/grpc-java)
* [io.grpc:grpc-okhttp](https://github.com/grpc/grpc-java)
* [io.grpc:grpc-stub](https://github.com/grpc/grpc-java)
* [io.grpc:grpc-testing](https://github.com/grpc/grpc-java)

 [from 1.24.1 to 1.25.0](https://github.com/grpc/grpc-java/compare/v1.24.1...v1.25.0).
[Release Notes/Changelog](https://github.com/grpc/grpc-java/releases/tag/v1.25.0)

I'll automatically update this PR to resolve conflicts as long as you don't change it yourself.

If you'd like to skip this version, you can just close this PR. If you have any feedback, just mention me in the comments below.

Have a fantastic day writing Scala!

<details>
<summary>Ignore future updates</summary>

Add this to your `.scala-steward.conf` file to ignore future updates of this dependency:
```
updates.ignore = [ { groupId = "io.grpc" } ]
```
</details>

labels: semver-minor
Some of the last PRs didn't update the docs accordingly to their contributions:
 - Healthcheck https://github.com/higherkindness/mu/pull/630 @mrtmmr 
 - OpenApi Generation https://github.com/higherkindness/mu/pull/659 @juanpedromoreno @BeniVF 
 - Kafka management https://github.com/higherkindness/mu/pull/638 @BenFradet
Comes from #674 

We need to add a section in mu docs clarifying what is needed for exposing the metrics. We can take the information from here: https://www.47deg.com/blog/metrics-integration-with-mu/#checking-metrics-through-prometheus-server-11
It'd be great if we could have a link to the scala docs of this library in a place that's easily accessible. I don't use IntelliJ and often have to refer to the docs to look at API signature.

Thanks
We recently upgraded a service from `v0.14.1` to `v0.18.4`. In the old version there was a way to [opt in](https://github.com/higherkindness/mu/blob/v0.14.1/modules/prometheus/server/src/main/scala/ServerMetrics.scala#L55) to latency metrics with [labels per service and method](https://github.com/higherkindness/mu/blob/v0.14.1/modules/prometheus/server/src/main/scala/ServerMetricsForMethod.scala#L47). I may be missing something, but I'm not seeing a mechanism provided that would allow for the same sort of per-endpoint latency metrics. If that is the case, is there maybe a reason those were removed that I might be missing? And if there is no reason, would anyone be opposed to adding something back in? I would be happy to submit a PR if there are no objections to the idea.
There's a first version of health check service resolved in issue #626. Right now, unary service uses `protobuf` protocol, it should also support `avro`. 

Here, the improvement suggestion:
```
[...]
We could have the following modules:
* `health-check-protocol-unary`: With the current unary `@service`
* `health-check-service-unary`: Depending on `channel` and `health-check-protocol-unary-scala` with the `% provided`

We could also include the `avdl` and `proto` files in the `channel` resources, providing instructions about how to add the sbt settings for generating your protocol definition.
[...]
```
_Originally posted by @fedefernandez in https://github.com/higherkindness/mu/pull/630#issuecomment-516792561_