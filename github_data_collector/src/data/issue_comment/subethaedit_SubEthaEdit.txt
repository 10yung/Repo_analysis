This PR prevents multiple calls to `[editor storePosition]` and `[editor restorePositionAfterOperations:]` during block editing as these methods require the LayoutManager to perform layout which causes a crash if used between `[textStorage beginEditing]...[textStorage endEditing]`.

Instead, the restoration takes place, after `[textStorage endEditing]` has been called
I use iTerm2 and I hope open a iTerm2 window
SEE 5.1.1, iMac Retina 5K, 27-inch, 2017, 40GB RAM, Radeon Pro 580 8GB, MacOS 10.14.6

Had 3 windows open with 2 files in each window (the same 2 files).

Selected a chunk for block edit.
Placed cursor inside blocked area, hit Delete.

It did not delete the character and from that moment forward I could place the cursor anywhere in my file but could not type anything in any window. I chose to Save the files, which thankfully did work. After clicking around for a while, selecting various windows and tabs it got to the point where I could not select anything with the mouse. I finally Quit the app and 2 of the 3 windows closed but 1 stayed open. Finally had to force quit the app to regain control. I lost my highlighted changed text doing the app restart, which really really hurt. :( I wish we could choose when to forget the highlighting on the changed text.
Here's my approach to tackle #119: If a mode contains a resource called `WebPreview.js` the script will be used to transform the text to HTML by calling `webPreview(text) -> string`

An example is implemented in the `Markdown.seemode` using showdown.js

Things to be done before making this available as public API:

- [x] error handling & reporting (right now it just fails silently)
- [x] settle on naming
- [x] document this feature: https://github.com/subethaedit/SubEthaEdit-Modes/pull/6
- [x] move the webPreview work on a background queue
e.g. 

file:///Users/dom/Library/Containers/de.codingmonkeys.SubEthaEdit.MacFULL/Data/Desktop/foobar.txt

which should just be 

file:///Users/dom/Desktop/foobar.txt

to the user. 


### Steps
* join a network document, e.g. by left clicking it in the Document Hub
* close the now open document window

### Results
* The hosting SubEthaEdit does not see this document as left

### Expected Results
* The host should be acutely aware of the window having been closed

### Notes

Actually can't make this happen reliably. But if it happens there is certainly bad state around that is unhelpful, as the document even can't be rejoined.
## Short Description

A collaborator and I have been using SEE to meet remotely (weekly) since 2004. Since I upgraded to Catalina, we have weird behavior: I have trouble joining sessions he is hosting.

## Steps to Reproduce the Issue

1. I click the SEE url and my window only partially opens; it hangs on "joining session"

2. I can join the session if I open a bug report tab: then suddenly the session is visiable as a tab and we can meet.

3. I can export our session as a webpage but I can't save it ("save" and "save as" etc. are all grey).

- SubEthaEdit: Version 5.1.1 (9639)
- System: Version 10.15 (Build 19A602)
- Language: English

```
Hardware:

   Hardware Overview:

     Model Name: MacBook Air
     Model Identifier: MacBookAir8,2
     Processor Name: Dual-Core Intel Core i5
     Processor Speed: 1.6 GHz
     Number of Processors: 1
     Total Number of Cores: 2
     L2 Cache (per Core): 256 KB
     L3 Cache: 4 MB
     Hyper-Threading Technology: Enabled
     Memory: 16 GB
     Boot ROM Version: 1037.0.78.0.0 (iBridge: 17.16.10572.0.0,0)
     Serial Number (system): FVFZF0VALYWP
     Hardware UUID: BB7F9670-8EBA-5A45-A050-646FD6D387D3

Now that there's finally an API for [NSFont.monospacedSystemFont(ofSize:weight:)](https://developer.apple.com/documentation/appkit/nsfont/3042659-monospacedsystemfont), it would be nice if we could choose that font (SF Mono) in SubEthaEdit's Styles preferences.

Currently, the system (San Francisco) fonts do not show up in the standard Fonts panel unless the user installs a local copy of them. But it is possible to get at them programmatically by using the various `NSFont` `systemFont`… API calls.

I haven't seen much UI convention for choosing a system font yet. Some apps, e.g. Bear, just include "System" as an entry in their font selection preference popup menu. (Terminal and Xcode have cheated and just bundled their own copies of SF Mono so that it shows up in the Fonts panel.)
This PR implements @monkeydom s concept from #120. However it does not introduce any additional knobs & switches to turn the feature on or off.
It would be nice to have AppleScript as an available language for syntax highlighting. 