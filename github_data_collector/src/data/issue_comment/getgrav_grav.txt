Hi
with the new 1.7 is loaded in the head tag.
is it possible to load the jquery file at the bottom like in the grav's versione 1.6.19 ?

![1](https://user-images.githubusercontent.com/653230/72666518-5995ca80-3a13-11ea-9070-717a2b5612aa.png)

thanks

Grav v1.7.0-rc.3 - Admin v1.10.0-rc.3
Hi
I've found a little bug in "Configuration - Media" there are two tabs with the same name "Media" that point to the same configuration page

![1](https://user-images.githubusercontent.com/653230/72666454-bba20000-3a12-11ea-9779-27957a0cc941.png)

Grav v1.7.0-rc.3 - Admin v1.10.0-rc.3

bye
Hello all,
I discovered a weird issue with admin plugin and theme (maybe also plugins) blueprints.
When using a list field in a theme blueprint, I can't remove all elements from the list.

**Tested on a clean install, how to reproduce :**
- `composer create-project getgrav/grav .`
- `bin/gpm install admin`
- Edit `user/theme/quark/blueprint.yaml`
- Add a list type field with any child fields
- Go back to admin and go to theme options
- When adding fields in list everything works, but when removing all items, nothing happens when saving.

I check on front-end size before sending, when nothing is in the list, the form is correct, checked with `$('form').serializeArray()`. But in `onAdminSave` hook the old value is still present. I would love to make a PR for this but I have no idea where this can come from.

Thanks for your help and for this amazing product which I use very often !
I added a twig extension for the PHP methods `preg_split` and `preg_match` (including code documentation) to cover those aspects not only within Gantry but also in Grav as well. For more information please also check this FR (gantry/gantry5#2586) and this PR (gantry/gantry5#2590).
Simple extensible e-commerce plugin based on client-side only integration with the new Stripe Checkout.

Supports SCA2 and GDPR rules

More details found [here](https://github.com/ricardo118/grav-plugin-stripe-checkout)
I have a link like this:
`[text](xmpp:room@server.org?join)`

I wanted to add a class to this link so:
`[text](xmpp:room@server.org?join?classes=button)`

But it doesn't work. If I remove the "?join" part it works.
When i created a new user using Flex-users a cryptic-username.yaml is created in /accounts.
This user can't login unless you rename to correct-username.yaml 

Tested with 1.7rc3 on Linux with php7.3 
The pipeline option `assets.css_rewrite` breaks URL-encoded IDs of linear gradients defined within the SVG.

SVG structure (example):
```svg
<svg height="200" width="200">
  <defs>
    <linearGradient id="linear-gradient" x1="0%" y1="0%" x2="100%" y2="0%">
      <stop offset="0%" stop-color="#000" />
      <stop offset="100%" stop-color="#fff" />
    </linearGradient>
  </defs>
  <ellipse cx="100" cy="100" rx="100" ry="100" fill="#ccc" />
</svg>
```

Before pipeline:
```css
svg {
    fill: url(#linear-gradient);
}
```

After pipeline:
```css
svg {
    fill: url(/user/themes/my-theme/css/#linear-gradient);
}
```
With the newer, explicit [erroring out in Toolbox](https://github.com/rockettheme/toolbox/blame/develop/Blueprints/src/BlueprintForm.php#L496-L498), which was implemented from static analysis, the error - `\InvalidArgumentException(__METHOD__ . '(): Parameter #1 does not contain array of filenames');` - is rather unspecific.

It would be beneficial to include the `$filename` to tell the developer/user what caused this error specifically. As [shown in a recent error-report](https://discourse.getgrav.org/t/parameter-1-does-not-contain-array-of-filenames/10978), this can be confusing and obscure.

Tagging @mahagr [by request](https://discordapp.com/channels/501836936584101899/506916956637495306/662705500093153281). Feel free to move to Toolbox-repo if desirable, just thought it more pertinent and potentially time-sensitive for Core if it is a pervasive error.
**Grav version:** grav-admin-v1.7.0-rc.2

**Problem:**
AssetManager creates different hashes for pipelined files when extra asset is added in 'before' or 'after' position. The contents of the different pipelined files are exactly the same though.

**Expected result:**
Assets in position before/after should not change hash of pipelined assets.

**Example:**

I have the following in base.html.twig:
```
{% block javascripts %}
   {% do assets.addJs('https://code.jquery.com/jquery-3.4.1.min.js', { priority: 100, loading: 'defer' }) %}
   {% do assets.addJs('theme://js/popper.min.js', { priority: 98, loading: 'defer' }) %}
   {% do assets.addJs('theme://js/bootstrap.min.js', { priority: 97, loading: 'defer' }) %}
 {% endblock %}

{{ assets.js('head', {loading: 'defer'}) }}
```
The output is:
```
<script src="/grav/site-base/assets/3c4701a9a8e3c486b719e9d09e64a839.js" defer></script>
```

On same pages I add a plugin.  My plugins add assets as follows:
```
$this->grav['assets']->addJs("plugin://contactform/js/contactform.min.js", [
   'group' => 'head',
   'position' => 'after',
   'loading' => 'defer',
]);
```
The output is:
```
<script src="/grav/site-base/assets/24180c8c0af4f6c7bc1b1f1f95235033.js" defer></script>
<script src="/grav/site-base/user/plugins/contactform/js/contactform.min.js" defer></script>
```

The contents of '3c4701a9a8e3c486b719e9d09e64a839.js' and '24180c8c0af4f6c7bc1b1f1f95235033.js' are according to diff exactly the same.