I'd like to submit this sample file for a new updated toolchain based on gcc v6.5.0. It is built over the latest trunk of crosstools-ng
I cannot add new debugger, unknown...

Raspberry Pi 3B

> /tools/arm-bcm2708/arm-rpi-4.9.3-linux-gnueabihf/bin/arm-linux-gnueabihf-gdb

![p1](https://user-images.githubusercontent.com/25495466/65372716-d6868280-dc73-11e9-90d1-9c2a5117be68.png)


Any plan to upgrade raspberrypi's cross compile tool to gcc 8.3.0? Some times, it's seriously slow to compile the source code on raspberry pi directly...

Hi, trying to cross-compile toybox and failing:
No arm-linux-gnueabihf-cc found

Is there a missing symbolic link in tools/arm-bcm2708/gcc-linaro-arm-linux-gnueabihf-raspbian-x64/bin/ ?
I'm trying to cross compile a QT based application that depends on a few libraries -

> [vsomeIP](https://github.com/GENIVI/vsomeip)
> [CommonAPI](https://github.com/GENIVI/capicxx-core-runtime)
> [CommonAPI-SomeIP](https://github.com/GENIVI/capicxx-someip-runtime) 

These libraries are cmake based and depends on boost. I Initially downloaded boost by apt-get and mounted my PI rootfs at `/mnt` as `/mnt/rpi_rootfs`. This however had problems when I tried to link them to the application as the toolchain had a different gcc version from that used to compile boost. I downloaded boost source and cross compiled it with the toolchain. I compiled the above libs by linking boost. I could also compile my QT application. At runtime however,  I'm now getting this strange error - 

```
20:37:24: Starting /home/pi/InfotainmentCluster/bin/InfotainmentCluster...
QML debugging is enabled. Only use this in a safe environment.
Unable to query physical screen size, defaulting to 100 dpi.
To override, set QT_QPA_EGLFS_PHYSICAL_WIDTH and QT_QPA_EGLFS_PHYSICAL_HEIGHT (in millimeters).
FT_New_Face failed with index 0 : 1
libpng warning: bKGD: invalid
2018-07-24 12:29:09.568359 [info] Parsed vsomeip configuration in 0ms
2018-07-24 12:29:09.569341 [info] Default configuration module loaded.
2018-07-24 12:29:09.569465 [info] Initializing vsomeip application "".
2018-07-24 12:29:09.569945 [warning] Routing Manager seems to be inactive. Taking over...
2018-07-24 12:29:09.570410 [warning] unlink failed for /tmp/vsomeip-f. Client identifier 0xf can't be reused!
2018-07-24 12:29:09.570477 [warning] unlink failed for /tmp/vsomeip-10. Client identifier 0x10 can't be reused!
2018-07-24 12:29:09.570534 [warning] unlink failed for /tmp/vsomeip-11. Client identifier 0x11 can't be reused!
2018-07-24 12:29:09.570603 [warning] unlink failed for /tmp/vsomeip-13. Client identifier 0x13 can't be reused!
2018-07-24 12:29:09.570742 [warning] unlink failed for /tmp/vsomeip-1b. Client identifier 0x1b can't be reused!
2018-07-24 12:29:09.570812 [warning] unlink failed for /tmp/vsomeip-1d. Client identifier 0x1d can't be reused!
2018-07-24 12:29:09.570946 [info] SOME/IP client identifier configured. Using 002f (was: 0000)
2018-07-24 12:29:09.571064 [info] No routing manager configured. Using auto-configuration.
2018-07-24 12:29:09.571099 [info] Instantiating routing manager [Host].
2018-07-24 12:29:09.571397 [error] routing_manager_stub::init_endpoint unlink failed (/tmp/vsomeip-0): Operation not permitted
2018-07-24 12:29:09.571761 [info] init_routing_endpoint Routing endpoint at /tmp/vsomeip-0
2018-07-24 12:29:09.572781 [error] Server endpoint creation failed (3)
2018-07-24 12:29:09.572847 [error] routing_manager_stub::init_routing_endpoint Client ID: 0: acceptor bind: Address already in use
2018-07-24 12:29:09.573129 [info] Client [2f] is connecting to [0] at /tmp/vsomeip-0
2018-07-24 12:29:09.573225 [info] Service Discovery enabled. Trying to load module.
2018-07-24 12:29:09.575122 [info] Service Discovery module loaded.
2018-07-24 12:29:09.575757 [info] Application(unnamed, 2f) is initialized (11, 100).
2018-07-24 12:29:09.576370 [info] Starting vsomeip application "" using 2 threads
2018-07-24 12:29:09.576546 [info] REGISTER EVENT(002f): [0040.5676.84d0:is_provider=false]
2018-07-24 12:29:09.576722 [info] REQUEST(002f): [0040.5676:1.4294967295]
2018-07-24 12:29:09.576846 [info] shutdown thread id from application: 002f () is: 6daff440 TID: 19554
2018-07-24 12:29:09.576933 [info] main dispatch thread id from application: 002f () is: 6e2ff440 TID: 19553
2018-07-24 12:29:09.577210 [error] routing_manager_stub::init_endpoint unlink failed (/tmp/vsomeip-0): Operation not permitted
2018-07-24 12:29:09.577339 [info] init_routing_endpoint Routing endpoint at /tmp/vsomeip-0
2018-07-24 12:29:09.577613 [error] Server endpoint creation failed (3)
2018-07-24 12:29:09.577672 [error] routing_manager_stub::init_routing_endpoint Client ID: 0: acceptor bind: Address already in use
terminate called after throwing an instance of '__gnu_cxx::__concurrence_lock_error'
  what():  __gnu_cxx::__concurrence_lock_error
2018-07-24 12:29:09.577882 [info] Watchdog is disabled!
20:37:26: Process killed by signal
```

I couldn't find much help elsewhere for this particular issue. I'm cross compiling the above 3 library using a toolchain file 

```
set(CMAKE_SYSTEM_NAME Linux)
set(CMAKE_SYSTEM_PROCESSOR arm)

include(CMakeForceCompiler)
set (tools /home/i18350/toolchain/rpi/tools/arm-bcm2708/gcc-linaro-arm-linux-gnueabihf-raspbian-x64/bin)
set(CMAKE_C_COMPILER ${tools}/arm-linux-gnueabihf-gcc-4.8.3)
set(CMAKE_CXX_COMPILER ${tools}/arm-linux-gnueabihf-g++)
set(CMAKE_AR ${tools}/arm-linux-gnueabihf-ar)
set(CMAKE_LD ${tools}/arm-linux-gnueabihf-ld)
# here is the target environment located
set(CMAKE_FIND_ROOT_PATH /mnt/rpi_rootfs) 
set(CMAKE_SYSROOT /mnt/rpi_rootfs)

set(Boost_INCLUDE_DIR /home/i18350/appsteam/linux/boost_1_62_0/)
set(boost_library_dir /home/i18350/appsteam/linux/boost_1_62_0/stage/lib)
set(Boost_LIBRARY_DIR /home/i18350/appsteam/linux/boost_1_62_0/stage/lib)
set(CommonAPI_DIR /home/i18350/appsteam/linux/libraries/common-api/capicxx-core-runtime/build)
set(vsomeip_DIR /home/i18350/appsteam/linux/libraries/common-api/vsomeip/build)

set(CMAKE_C_COMPILER_WORKS 1)
set(CMAKE_CXX_COMPILER_WORKS 1)
set(_GLIBCXX_USE_CXX11_ABI 0)

set(CMAKE_FIND_ROOT_PATH_MODE_PROGRAM NEVER)
set(CMAKE_FIND_ROOT_PATH_MODE_LIBRARY ONLY)
set(CMAKE_FIND_ROOT_PATH_MODE_INCLUDE ONLY)
set(CMAKE_FIND_ROOT_PATH_MODE_PACKAGE ONLY)
```
Since the default CMakeList.txt uses find_package for finding boost, I'm overriding them from the toolchain file using my custom boost include and lib path. Can someone please shed some light into what I'm doing wrong ??

My target uses a stretch with gcc/g++ 6.3.0. My host is Ubuntu16-04. 
This is the ldd result on my QT application
```
	linux-vdso.so.1 (0x7ee7e000)
	/usr/lib/arm-linux-gnueabihf/libarmmem.so (0x76fa0000)
	libCommonAPI.so.3.1.12 => /usr/QTlibs/libCommonAPI.so.3.1.12 (0x76f7d000)
	libCommonAPI-SomeIP.so.3.1.12 => /usr/QTlibs/libCommonAPI-SomeIP.so.3.1.12 (0x76ef3000)
	libvsomeip.so.2 => /usr/QTlibs/libvsomeip.so.2 (0x76d92000)
	libboost_log.so.1.62.0 => /usr/QTlibs/libboost_log.so.1.62.0 (0x76cf0000)
	libboost_system.so.1.62.0 => /usr/QTlibs/libboost_system.so.1.62.0 (0x76fd7000)
	libboost_thread.so.1.62.0 => /usr/QTlibs/libboost_thread.so.1.62.0 (0x76ccd000)
	libboost_filesystem.so.1.62.0 => /usr/QTlibs/libboost_filesystem.so.1.62.0 (0x76cb0000)
	libboost_regex.so.1.62.0 => /usr/QTlibs/libboost_regex.so.1.62.0 (0x76bdf000)
	libboost_date_time.so.1.62.0 => /usr/QTlibs/libboost_date_time.so.1.62.0 (0x76bc9000)
	libboost_chrono.so.1.62.0 => /usr/QTlibs/libboost_chrono.so.1.62.0 (0x76bbb000)
	libQt5Quick.so.5 => /usr/local/qt5pi/lib/libQt5Quick.so.5 (0x76803000)
	libQt5Gui.so.5 => /usr/local/qt5pi/lib/libQt5Gui.so.5 (0x7632d000)
	libQt5Qml.so.5 => /usr/local/qt5pi/lib/libQt5Qml.so.5 (0x75f5c000)
	libQt5Network.so.5 => /usr/local/qt5pi/lib/libQt5Network.so.5 (0x75e27000)
	libQt5Core.so.5 => /usr/local/qt5pi/lib/libQt5Core.so.5 (0x75894000)
	libbrcmGLESv2.so => /opt/vc/lib/libbrcmGLESv2.so (0x75856000)
	libpthread.so.0 => /lib/arm-linux-gnueabihf/libpthread.so.0 (0x7582d000)
	libstdc++.so.6 => /usr/lib/arm-linux-gnueabihf/libstdc++.so.6 (0x756e5000)
	libm.so.6 => /lib/arm-linux-gnueabihf/libm.so.6 (0x75666000)
	libgcc_s.so.1 => /lib/arm-linux-gnueabihf/libgcc_s.so.1 (0x75639000)
	libc.so.6 => /lib/arm-linux-gnueabihf/libc.so.6 (0x754fa000)
	/lib/ld-linux-armhf.so.3 (0x76fb6000)
	libdl.so.2 => /lib/arm-linux-gnueabihf/libdl.so.2 (0x754e5000)
	librt.so.1 => /lib/arm-linux-gnueabihf/librt.so.1 (0x754ce000)
	libboost_atomic.so.1.62.0 => /usr/QTlibs/libboost_atomic.so.1.62.0 (0x754c3000)
	libgthread-2.0.so.0 => /usr/lib/arm-linux-gnueabihf/libgthread-2.0.so.0 (0x754b1000)
	libglib-2.0.so.0 => /lib/arm-linux-gnueabihf/libglib-2.0.so.0 (0x753a9000)
	libbrcmEGL.so => /opt/vc/lib/libbrcmEGL.so (0x75370000)
	libbcm_host.so => /opt/vc/lib/libbcm_host.so (0x75349000)
	libvchiq_arm.so => /opt/vc/lib/libvchiq_arm.so (0x75333000)
	libvcos.so => /opt/vc/lib/libvcos.so (0x75319000)
	libpcre.so.3 => /lib/arm-linux-gnueabihf/libpcre.so.3 (0x7529e000)

```
I have set the rpath to `/usr/QTLibs`. However I can see that `libstdc++.so` is the one that is coming with the system. I believe this is not the one that the application used for linking (not sure) as the toolchain also provides a `libstdc++.so`  and `libc.so`.
Added a tutorial with instructions found on Stack Overflow.
I think giving a link to the origina post is mandatory.
If you think I should write my own tutorial and do not link to stack overflow, I apologize for wasting your time.
It moves 0x33ff into cptr_el3. 

Cortex A53 TRM lists all bits except 10,20 and 31 as RES0.
Luckily, 0x33ff is a value where those 3 bits are 0 (and the 12 ON bits in the value are RES0 in the register), thus resulting in disabling of fp/simd traps to el3, as expected. Storing a zero into, or read-modify-write of, cptr_el3, would be proper.

The number 0x33ff fits more appropriately into cptr_el2, given the intention of disabling fp/simd traps to el2.
Hi all,

I faced a problem while using this toolchain for my raspberry pi with paho cpp library. Detailed explanation can be found in [this issue](https://github.com/eclipse/paho.mqtt.cpp/issues/179).

Long story short, I need newer version of toolchain to compile my project. Is there a way to update this toolchain or are there any newer version of this repository?


I am hitting cross compiling issues with gcc6.4
./configure AR=aarch64-linux-gnu-ar CC=aarch64-linux-gnu-gcc RANLIB=aarch64-linux-gnu-ranlib STRIP=aarch64-linux-gnu-strip --host=arm-linux --target=arm-linux LDFLAGS="-static -pthread"
-linux-gnu-strip --host=arm-linux --target=arm-linux 
checking for a BSD-compatible install... /usr/bin/install -c
checking whether build environment is sane... yes
checking for arm-linux-strip... aarch64-linux-gnu-strip
checking for a thread-safe mkdir -p... /bin/mkdir -p
checking for gawk... gawk
checking whether make sets $(MAKE)... yes
checking whether make supports nested variables... yes
checking whether to enable maintainer-specific portions of Makefiles... yes
checking build system type... x86_64-pc-linux-gnu
checking host system type... arm-unknown-linux-gnu
checking for arm-linux-gcc... aarch64-linux-gnu-gcc
checking whether the C compiler works... no
configure: error: in `/tmp/Bhavya/LTP/ltp-full-20180515':
configure: error: C compiler cannot create executables
See `config.log' for more details

i was trying to cross compile my OpenDDS software through it but  i keep getting errors while running the make command  
 i ran configure command which had no errors 
**syedli@ubuntu:~/Desktop/OpenDDS-3.12$ ./configure --target=linux-cross\



  --target-compiler="/home/syedli/Desktop/tools-master/arm-bcm2708/gcc-linaro-arm-linux-gnueabihf-raspbian-x64/bin/arm-linux-gnueabihf-g++"**

But when i ran make command 
syedli@ubuntu:~ make 
i got the following errors

[CRosscompiling Error.txt](https://github.com/raspberrypi/tools/files/1753927/CRosscompiling.Error.txt)

