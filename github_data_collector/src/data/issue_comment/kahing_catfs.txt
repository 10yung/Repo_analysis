Hello guys and thank you for this great package! I tried adding pretty much exactly the same command to my /etc/fstab, but it refuses to work with it, getting this:

    error: The following required arguments were not provided:
        <mountpoint>
    
    USAGE:
        catfs <from> <to> <mountpoint> -o <option>...
    
    For more information try --help

v0.8.0

For small files that's fine but for large, multi-gigabyte files it's inefficient to download the entire thing on access because certain operations might only require a quick open/close of the file to read the first few megabytes (for instance reading media metadata using mediainfo or ffmpeg).
I consistently get this panic when using catfs (with a backing sshfs). The accesses that were going on at the time were concurrent reads.

This is on fedora linux 30.

```
thread '<unnamed>' panicked at 'ino 0x0000000000005dc6 refcnt 1 deref 2', src/catfs/inode.rs:325:13
stack backtrace:
   0:     0x5567456c48d3 - std::sys::unix::backtrace::tracing::imp::unwind_backtrace::h50ebfb8734a81144
                               at src/libstd/sys/unix/backtrace/tracing/gcc_s.rs:39
   1:     0x5567456c009b - std::sys_common::backtrace::_print::hc7fdae4fb6b58d2d
                               at src/libstd/sys_common/backtrace.rs:71
   2:     0x5567456c3516 - std::panicking::default_hook::{{closure}}::hc55d0892611a29ff
                               at src/libstd/sys_common/backtrace.rs:59
                               at src/libstd/panicking.rs:197
   3:     0x5567456c32a9 - std::panicking::default_hook::h3c8a3df5d3469668
                               at src/libstd/panicking.rs:211
   4:     0x5567456c3c1f - std::panicking::rust_panic_with_hook::h24c9a1c35b1f49cc
                               at src/libstd/panicking.rs:474
   5:     0x5567456c37a1 - std::panicking::continue_panic_fmt::h8ed9632bdd4b9299
                               at src/libstd/panicking.rs:381
   6:     0x5567456c36ee - std::panicking::begin_panic_fmt::h000a944fb20c1b89
                               at src/libstd/panicking.rs:336
   7:     0x55674523a9f8 - catfs::catfs::inode::Inode::deref::ha80f5d680059df59
                               at src/catfs/inode.rs:325
   8:     0x55674527b818 - catfs::catfs::CatFS::forget::he60bc4926a9150db
                               at src/catfs/mod.rs:497
   9:     0x5567452b10b2 - <catfs::pcatfs::PCatFS as fuse::Filesystem>::forget::heaa21df26af5b057
                               at src/pcatfs/mod.rs:114
  10:     0x55674529efae - fuse::request::Request::dispatch::h8a112763bca046d5
                               at /home/yiding/.cargo/registry/src/github.com-1ecc6299db9ec823/fuse-0.3.1/src/request.rs:152
  11:     0x5567452a6b2c - fuse::request::dispatch::h04448e37e6d4b14e
                               at /home/yiding/.cargo/registry/src/github.com-1ecc6299db9ec823/fuse-0.3.1/src/request.rs:34
  12:     0x55674523fbb0 - fuse::session::Session<FS>::run::hb63d616c2d340913
                               at /home/yiding/.cargo/registry/src/github.com-1ecc6299db9ec823/fuse-0.3.1/src/session.rs:79
  13:     0x55674529c0c6 - catfs::main_internal::{{closure}}::he583d75e88ea67ec
                               at src/main.rs:252
  14:     0x556745240162 - std::sys_common::backtrace::__rust_begin_short_backtrace::h701448e976ab0c85
                               at /rustc/3c235d5600393dfe6c36eeed34042efad8d4f26e/src/libstd/sys_common/backtrace.rs:136
  15:     0x5567452b37f4 - std::thread::Builder::spawn_unchecked::{{closure}}::{{closure}}::hda067f3acb6e46b0
                               at /rustc/3c235d5600393dfe6c36eeed34042efad8d4f26e/src/libstd/thread/mod.rs:470
  16:     0x556745259cd4 - <std::panic::AssertUnwindSafe<F> as core::ops::function::FnOnce<()>>::call_once::h68ddc649c0763ecb
                               at /rustc/3c235d5600393dfe6c36eeed34042efad8d4f26e/src/libstd/panic.rs:309
  17:     0x556745259c37 - std::panicking::try::do_call::h88297ddea77f2617
                               at /rustc/3c235d5600393dfe6c36eeed34042efad8d4f26e/src/libstd/panicking.rs:293
  18:     0x5567456c7109 - __rust_maybe_catch_panic
                               at src/libpanic_unwind/lib.rs:87
  19:     0x556745259b18 - std::panicking::try::h9ebff07a775c52f5
                               at /rustc/3c235d5600393dfe6c36eeed34042efad8d4f26e/src/libstd/panicking.rs:272
  20:     0x556745259d64 - std::panic::catch_unwind::h9fefc47ce2c1cb0d
                               at /rustc/3c235d5600393dfe6c36eeed34042efad8d4f26e/src/libstd/panic.rs:388
  21:     0x5567452b32db - std::thread::Builder::spawn_unchecked::{{closure}}::h33b8858a911913a8
                               at /rustc/3c235d5600393dfe6c36eeed34042efad8d4f26e/src/libstd/thread/mod.rs:469
  22:     0x556745208ab2 - core::ops::function::FnOnce::call_once{{vtable.shim}}::h5c4bbb01fcb79527
                               at /rustc/3c235d5600393dfe6c36eeed34042efad8d4f26e/src/libcore/ops/function.rs:231
  23:     0x5567456b7a0e - <alloc::boxed::Box<F> as core::ops::function::FnOnce<A>>::call_once::h4cac16ae2114a837
                               at /rustc/3c235d5600393dfe6c36eeed34042efad8d4f26e/src/liballoc/boxed.rs:702
  24:     0x5567456c67df - std::sys::unix::thread::Thread::new::thread_start::h2adc1b80820f790e
                               at /rustc/3c235d5600393dfe6c36eeed34042efad8d4f26e/src/liballoc/boxed.rs:702
                               at src/libstd/sys_common/thread.rs:14
                               at src/libstd/sys/unix/thread.rs:80
  25:     0x7fc8442705a1 - start_thread
  26:     0x7fc844183162 - __clone
  27:                0x0 - <unknown>

```
I am currently designing a file system agnostic automated tiered storage solution in rust, which I plan to release under the same MIT/Apache2 dual licence rustlang uses.

I could safe quite a lot of time If I was able to reuse some catfs code, but to do so catfs would need to be under the same dual license.

Do you mind dual licensing catfs as Apache2/MIT? I would highly appreciate it.
fixes https://github.com/kahing/catfs/issues/10

 - most missing syscalls (like `fdopendir`) are fixed by updating `libc` crate, that's why `Cargo.lock` is updated to latest
 - some other syscalls are emulated (like `splice`)
 - type errors (`u16` vs `u32`) are fixed by adding castings.
Scenario: a remote file changes.
Problem: While the cache content is good and up-to date, the view presented at the mountpoint (third argument to catfs) is truncated. The file is there, but it's only partially present if I display it via cat. Other times a bunch of NULL bytes appear at the end.

So the cache directory content is fine, but through the mountpoint I get garbage.
catfs was actually one of the very first ones I tried!

I am running ubuntu 18.04.1 and here is how I installed catfs:
```
sudo apt-get install cargo git libfuse-dev fuse python-fuse
git clone https://github.com/kahing/catfs.git
cd catfs
sudo cargo install catfs
```

Here is how I tried it out using a sshfs mount /media/remote with catfs :
```
sshfs -o reconnect,noatime,ServerAliveInterval=15,ServerAliveCountMax=3,cache_timeout=14400,entry_timeout=1200,large_read,max_read=65536,cache=yes,kernel_cache,workaround=nodelaysrv,cache_stat_timeout=600 admin007@myremotefs:/ /media/remote

~/.cargo/bin/catfs /media/remote /media/cache /media/video
```

and then launched kodi media player (which is configured to read from /media/video), kodi just gave me a spinning progress indicator while trying to play a file from the catfs /media/video mount, and I could see monitoring bandwidth that the file was transferring, so it seemed to be trying to transfer the entire file before playback. I did not have this issue with mcachefs or pcachefs.

Currently I am using mcachefs because of the ones I tried it performed the fastest.

Is there anything else I should try? maybe I am just missing a small option or setting to get this party going :)
Previously, if either splice() call failed, the function would return
without closing pin or pout.  (One way it might fail is if the process
reading from the file system closes its fd without consuming the whole
file.)

To fix this, wrap the pair of fds in a new struct PipeFds with an
idempotent close() function, () and a Drop impl that calls it.  This
allows copy_splice() to propagate errors encountered while closing
either pipe fd after an otherwise-successful copy, while guaranteeing
that close() will be called on both pipe fds.

If close() fails on both pipe fds, return the error from the 'in' side,
which matches the old behaviour.

This addresses the fd-leak part of #18.
I am attempting to use goofys + catfs to mount a local, read-only view of an S3 bucket as follows:

```
$ /usr/local/bin/goofys -o allow_other --cache -o:allow_other:/var/cache/mirror --dir-mode 493 --file-mode 292 images-dl.endlessm.com /srv/images-dl.endlessm.com_s3
```

I'm then pointing [mirrorbits](https://github.com/etix/mirrorbits) at a subtree of this directory. It will walk all files in that tree. It's configured to never actually read the contents of any of the files (I have disabled all hashing) but as an [implementation detail](https://github.com/etix/mirrorbits/blob/eb636ee7ce3f62a2e7e7f025a89a837ec0c2e796/filesystem/hash.go#L20-L59) it will `open` every file it encounters for reading, and then immediately `close` it. 
The net effect is that every file in the tree is read in quick succession, then closed. There are 27582 files in the subtree in question.

It looks from the logs like like goofys/catfs to do some read-ahead on each file as it is opened. Unfortunately, mid-way through the scan, catfs runs out of file descriptors:

```
catfs.INFO 2018-07-13 15:30:56 ERROR - read ahead "release/3.4.5/eos-amd64-amd64/base/eos-eos3.4-amd64-amd64.180712-201651.base.img.xz.asc" failed: Too many open files (os error 24) stack backtrace:
catfs.INFO    0:     0x55ee812f12bc - backtrace::backtrace::trace::h7544cb300c8adc70
catfs.INFO    1:     0x55ee812f12f2 - backtrace::capture::Backtrace::new::h0e3ca146bdded087
catfs.INFO    2:     0x55ee81217255 - <catfs::catfs::error::RError<E>>::from::hc6f3000dd77f7864
catfs.INFO    3:     0x55ee8121aabf - catfs::catfs::file::Handle::copy::hb749b1d9c173f302
catfs.INFO    4:     0x55ee811f57dc - <F as threadpool::FnBox>::call_box::h20dacdcfe2491af7
catfs.INFO    5:     0x55ee812bcb41 - std::sys_common::backtrace::__rust_begin_short_backtrace::h69ffcb2ce386e3c5
catfs.INFO    6:     0x55ee81342d3e - panic_unwind::__rust_maybe_catch_panic
catfs.INFO                         at /checkout/src/libpanic_unwind/lib.rs:101
catfs.INFO    7:     0x55ee812c0030 - <F as alloc::boxed::FnBox<A>>::call_box::hfbaa7f762fcf229f
catfs.INFO    8:     0x55ee8133950b - alloc::boxed::{{impl}}::call_once<(),()>
catfs.INFO                         at /checkout/src/liballoc/boxed.rs:772
catfs.INFO                          - std::sys_common::thread::start_thread
catfs.INFO                         at /checkout/src/libstd/sys_common/thread.rs:24
catfs.INFO                          - std::sys::imp::thread::{{impl}}::new::thread_start
catfs.INFO                         at /checkout/src/libstd/sys/unix/thread.rs:90
catfs.INFO    9:     0x7f165f762493 - start_thread
catfs.INFO   10:     0x7f165f28dace - __clone
catfs.INFO   11:                0x0 - <unknown>
```

Even after the scan has finished and mirrorbits is shut down (so no files should be open), attempting to read most files causes this error. Looking at the output of lsof, catfs has over 100,000 FIFO fds open; they mostly come in r/w pairs with the same NODE.

```
$ sudo lsof  | grep catfs | grep FIFO | wc -l
109404
$ sudo lsof | head -n1; sudo lsof  | grep catfs | grep FIFO | head -n 10
COMMAND     PID   TID        USER   FD      TYPE             DEVICE SIZE/OFF       NODE NAME
catfs     14161            mirror    2w     FIFO               0,10      0t0     234581 pipe
catfs     14161            mirror   10r     FIFO               0,10      0t0     234783 pipe
catfs     14161            mirror   12w     FIFO               0,10      0t0     234783 pipe
catfs     14161            mirror   13r     FIFO               0,10      0t0     234785 pipe
catfs     14161            mirror   14w     FIFO               0,10      0t0     234785 pipe
catfs     14161            mirror   15r     FIFO               0,10      0t0     234786 pipe
catfs     14161            mirror   16w     FIFO               0,10      0t0     234786 pipe
catfs     14161            mirror   17r     FIFO               0,10      0t0     234790 pipe
catfs     14161            mirror   18w     FIFO               0,10      0t0     234790 pipe
catfs     14161            mirror   19r     FIFO               0,10      0t0     234794 pipe
```

Reading certain files returns EMFILE; reading others returns content of the correct length but with the contents of the wrong file. For example, `$mountpoint/release/3.4.5/eos-amd64-amd64/base/eos-eos3.4-amd64-amd64.180712-201651.base.iso.asc` is 833 bytes long (correct) but those bytes are the first 833 bytes of an adjacent file `$mountpoint/release/3.4.5/eos-amd64-amd64/base/eos-eos3.4-amd64-amd64.180712-201651.base.iso`. 

Any suggestions for how to begin debugging this? I'm afraid I have never written a line of Go or Rust in my life!

```
$ catfs --version
catfs 0.7.0
$ sha256sum $(which catfs)
306466bea43aaa2e14f980479fa49774913043bab35f6b27044e8150419ae97c  /usr/local/bin/catfs
```

despite what `catfs --version` says, it's actually https://github.com/kahing/catfs/releases/download/v0.8.0/catfs . 