 at com.squareup.otto.Bus.throwRuntimeException(Bus.java:460)
                                                                           at com.squareup.otto.Bus.dispatch(Bus.java:387)
                                                                           at com.squareup.otto.Bus.dispatchQueuedEvents(Bus.java:368)
                                                                           at com.squareup.otto.Bus.post(Bus.java:337)
at com.squareup.otto.Bus.throwRuntimeException(Bus.java:460)
                                                                           at com.squareup.otto.Bus.dispatch(Bus.java:387)
                                                                           at com.squareup.otto.Bus.dispatchQueuedEvents(Bus.java:368)
                                                                           at com.squareup.otto.Bus.post(Bus.java:337)
It would be nice if EventHandler was package public, so that subclasses of Bus could override dispatch. I have that change in a local fork, but I'd rather depend on the official library.

So I said:
`
bus.post(228); //int`

and then tried to get it inside my Fragment and it haven't worked.

Then I changed it to String and everything became fine.

Is it ok?

Good morning, it is the first time I will use Otto and I wonder if you could give an example of that class should be created and where it should place the functions, which will be @Subscribes.
I understand the operation, but I can not understand where they are to be the functions that are activated by the certain event, which want to capture to make a sincrinización between threads.
Thank you and I hope your help.

PS: if I do not explained well, ask and I write otherwise

This website http://square.github.io/otto/ should include a notice that otto is deprecated.

When registering/unregistering within parent classes consumers now have the ability to point to the parent and use producer/subscriber annotated methods within. This uses the child class instance to reflectively trigger the parent class method.

Based on http://stackoverflow.com/questions/19692711/illegalargumentexception-with-otto-event-bus-in-fragment-instance/19737191#19737191

I just lost 3 days and a lot of hair because of a usecase where my subscriber did not get an event. I changed my bus registration from onResume/onPause (which is used e.g. at https://github.com/square/otto/blob/master/otto-sample/src/main/java/com/squareup/otto/sample/LocationHistoryFragment.java#L33)  to onStart/onStop and everything works.

Moved the android specific code to its own project, thereby making the core otto android independent.
This enables core-otto to be used in a cross platform project. The bus can still be initialized with a ThreadEnforcerAndroid.MAIN thread enforcer and injected using e.g. Dagger.
The purpose of this exercise is to support translation of code using j2objc

The two licences show different copyright holders and dates, this can cause confusion when it comes to providing licence details.

The licence in the readme specifies the copyright holder to be

```
Copyright 2012 Square, Inc.
Copyright 2010 Google, Inc.
```

Whereas the site states

```
Copyright 2013 Square, Inc.
```

I want to use otto in different activity.
I write some code:

```
public class MainActivity extends ActionBarActivity {

    @Bind(R.id.name)
    TextView name;

    public static final float DEFAULT_LAT = 40.440866f;
    public static final float DEFAULT_LON = -79.994085f;
    private static final float OFFSET = 0.1f;
    private static final Random RANDOM = new Random();


    public static float lastLatitude = DEFAULT_LAT;
    public static float lastLongitude = DEFAULT_LON;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);
        ButterKnife.bind(this);
    }

    @OnClick(R.id.button)
    public void SayHi(Button button){

        BusProvider.getInstance().post(new LocationClearEvent());

        lastLatitude = DEFAULT_LAT;
        lastLongitude = DEFAULT_LON;
        BusProvider.getInstance().post(produceLocationEvent());

        button.setText("hi");
    }

    @OnClick(R.id.change)
    public void ChangeLocation(){
        lastLatitude += (RANDOM.nextFloat() * OFFSET *2) -OFFSET;
        lastLongitude += (RANDOM.nextFloat() * OFFSET *2) -OFFSET;
        BusProvider.getInstance().post(produceLocationEvent());
    }

    @OnClick(R.id.view)
    public void changeView() {
        Intent intent = new Intent(this,MainActivity2Activity.class);
        startActivity(intent);
    }

    @Override protected void onResume() {
        super.onResume();

        // Register ourselves so that we can provide the initial value.
        BusProvider.getInstance().register(this);
    }

    @Override protected void onPause() {
        super.onPause();


        // Always unregister when an object no longer should be on the bus.
        BusProvider.getInstance().unregister(this);
    }


    @Produce
    static public LocationChangedEvent produceLocationEvent() {
        // Provide an initial value for location based on the last known position.
        return new LocationChangedEvent(lastLatitude, lastLongitude);
    }

    @Subscribe
    public void listenLocation(LocationChangedEvent event){
        Log.i("main", event.toString());
    }
```

Second Activity:

```
public class MainActivity2Activity extends ActionBarActivity {

    @Bind(R.id.location)
    TextView change;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main_activity2);
        BusProvider.getInstance().register(this);
    }

    @Subscribe
    public void onLocationChanged2(LocationChangedEvent event){
        if(event == null) Log.i("null","event is null");
        Log.i("location change", event.toString());
        change.setText(event.toString());
    }


    @Override
    protected void onResume() {
        super.onResume();
        BusProvider.getInstance().register(this);
    }

    @Produce
    public LocationChangedEvent voichang(){
        LocationChangedEvent a = new LocationChangedEvent(1.1f,1.1f);
        return a;
    }

    @Override
    protected void onPause() {
        super.onPause();
        BusProvider.getInstance().unregister(this);
    }
}
```

When i start second activity. there is an error happened.

```
07-08 10:50:44.666  23212-23212/com.pp.kpm.test W/dalvikvm﹕ threadid=1: thread exiting with uncaught exception (group=0xa6270288)
07-08 10:50:44.666  23212-23212/com.pp.kpm.test E/AndroidRuntime﹕ FATAL EXCEPTION: main
    java.lang.RuntimeException: Unable to start activity ComponentInfo{com.pathprint.kpm.test/com.pathprint.kpm.test.MainActivity2Activity}: java.lang.RuntimeException: Could not dispatch event: class com.pathprint.kpm.test.LocationChangedEvent to handler [EventHandler public void com.pathprint.kpm.test.MainActivity2Activity.onLocationChanged2(com.pathprint.kpm.test.LocationChangedEvent)]: null
            at android.app.ActivityThread.performLaunchActivity(ActivityThread.java:2059)
            at android.app.ActivityThread.handleLaunchActivity(ActivityThread.java:2084)
            at android.app.ActivityThread.access$600(ActivityThread.java:130)
            at android.app.ActivityThread$H.handleMessage(ActivityThread.java:1195)
            at android.os.Handler.dispatchMessage(Handler.java:99)
            at android.os.Looper.loop(Looper.java:137)
            at android.app.ActivityThread.main(ActivityThread.java:4745)
            at java.lang.reflect.Method.invokeNative(Native Method)
            at java.lang.reflect.Method.invoke(Method.java:511)
            at com.android.internal.os.ZygoteInit$MethodAndArgsCaller.run(ZygoteInit.java:786)
            at com.android.internal.os.ZygoteInit.main(ZygoteInit.java:553)
            at dalvik.system.NativeStart.main(Native Method)
```

I don't know why?
