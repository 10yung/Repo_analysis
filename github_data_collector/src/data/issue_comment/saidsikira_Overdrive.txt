**Overdrive:** `0.3`
**Package manager (SPM, Carthage, CocoaPods, Manual):** `n/a`
**Xcode:** `8.3.2 (macOS 10.12.5)`
**Platform:** `iOS`

When TaskQueue.maximumConcurrentTaskCount = 1`, only one task is executed. (The 2nd task is not executed.)

Here is a test case that indicates the issue.

```
    func testTwoTaskShouldBothCompleteWhenMaxConcurrentTaskCountIsOne() {

        queue.maxConcurrentTaskCount = 1

        let expectation1 = self.expectation(description: "a")
        let expectation2 = self.expectation(description: "b")

        let task = anyTask(withResult: .value(1))
        task.onValue { _ in
            expectation1.fulfill()
        }
        let task2 = anyTask(withResult: .value(1))
        task2.onValue { _ in
            expectation2.fulfill()
        }
        queue.add(task: task)
        queue.add(task: task2)

        waitForExpectations(timeout: 5)

    }
```

The test fails as the "b" expectation is unfulfilled. Any ideas what could be wrong?
**Overdrive:** `0.3`
**Package manager (SPM, Carthage, CocoaPods, Manual):** `CocoaPods`
**Xcode:** `9.0 beta 6`
**Platform:** `iOS`

The dependency system seems to be failing in iOS 11. I have tried this with Xcode 9 betas 6 & 7 (latest right now). Quite a few tests are failing, especially an assertion failure TaskConditionTests, which seems to be the most severe, which actually is affecting our production users on iOS betas with crashes.
