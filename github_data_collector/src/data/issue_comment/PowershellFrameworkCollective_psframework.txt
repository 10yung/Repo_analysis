
The documentation says that using the -ErrorRecord, will append the error record to the $error variable.

https://psframework.org/documentation/commands/PSFramework/Write-PSFMessage.html

But how does it work? I have been playing around for some time, and I don't seem to understand how it works.

I can make the classic Write-Error fill out the `$Error` variable and passed `-ErrorVariable`

```
function Test-Function {
[CmdletBinding()]
param() 
Write-Error "This is an error"
}
```

Calling it with the following fills out the things like expected:

```
Test-Function -ErrorVariable temp1 -ErrorAction SilentlyContinue
```

When trying to build the same with Write-PsfMessage (with the documentation in mind)

```
function Test-Function {[CmdletBinding()]param()
$errorRecord = New-Object System.Management.Automation.ErrorRecord $(New-Object System.Exception "This is the expetion"), "This is the error string", ([System.Management.Automation.ErrorCategory]::InvalidArgument), $null;

Write-PSFMessage -Level Warning -Message "Test is an error" -ErrorRecord $errorRecord
}
```

Calling it with the following yields a result in the warning variable, which makes sense, based on the level used.

```
Test-Function -ErrorVariable temp2 -ErrorAction SilentlyContinue -WarningAction SilentlyContinue -WarningVariable temp3
```

It don't have a error level, so I'm calling it with the Critical level

```
function Test-Function {[CmdletBinding()]param()
$errorRecord = New-Object System.Management.Automation.ErrorRecord $(New-Object System.Exception "This is the expetion"), "This is the error string", ([System.Management.Automation.ErrorCategory]::InvalidArgument), $null;

Write-PSFMessage -Level Critical -Message "Test is an error" -ErrorRecord $errorRecord
}
```

But calling the critical version, doesn't give me what I expected:

```
Test-Function -ErrorVariable temp2 -ErrorAction SilentlyContinue -WarningAction SilentlyContinue -WarningVariable temp3
```

So - I wondering if it is possible to have Write-PsfMessage put the error record into the $error variable and the -ErrorVariable specified for the Test-Function. If not possible, could you guide me towards how I could implement it, beyond using the Write-Error?
Hey,

As mentioned on Twitter the other day, I'm trying to make it easier for me and my different tools, to write Azure DevOps specific "tags" as part of the output from the Write-PsfMessage function.

I was inspired by some of the people that consumes my modules and they requested some capabilities to write these tags during an execution from within a pipeline.

http://hauge.cloud/2018/06/22/improving-logs-in-visual-studio-team-services-vsts-with-special-tags/

This my attempt to provide that to the module. I'm happy to refactor it to fit your design principles, but I need a bit of guidance, before being able to do so ðŸ˜‰

Current state would work for me and my needs, but I tried think outside my needs only and I hope you see that in the names used and so on.
The Set-PSFConfig should allow pipeline input. The primary reason for this is being able to do something like:
```powershell
Get-PSFConfig -name <module.config.setting> | set-PSFConfig -value <new value>
```


# Logging Upgrades

General Plans for the upcoming sprint:

## Core System

- Simplify Provider Development & Reduce configuration handling requirements
- Upgrade installation requirements system
  - Option 1) Installation Script
  - Option 2) Module Dependency list
- Global prerequisites and installation management
  - Centrally define repository for installation of required modules
  - Central configuration to enable auto-install for module-dependencies
- Make logging cycle interval configurable (CPU impact vs. logging latency)
- Support multi-instance logging providers (e.g. multiple instances of the logfile provider logging with different sets of configurations)

## Provider Deployment

- Support defining an update / installation source of logging providers from a central source
- Support requiring signed logging providers
- Support defining list of approved certificates for signed providers

## Provider Filtering

- Level Based Filtering
- Path Based Filtering

## New & Upgraded Providers

Planned:

- CMTrace support for logfile provider
- Logrotate for logfile provider
- CMTrace support for filesystem provider
- Eventlog provider
- SQL Provider
- Splunk Provider
- Azure Log Analytics Provider
- AWS Cloudwatch Provider

Potentially:

- Serilog Provider (High potential power, unsure about effort required)
- Slack

General:

- Where applicable, logging providers shall support picking the output encoding

## Documentation

- Set up an entire documentation node with deep info on psframework.org

## Comments

Ideas and suggestions highly welcome
- Command should be rewritten in C#
- Should consume a static C# method that does the heavy lifting and can be called standalone
- That routine should also be integrated into PSFCmdlet
- Should support registering path replacements, allowing the user to redirect path resolutions to a different path. (E.g. to redirect requests to a mounted volume shadow copy)
- Configuration-based updates do not execute properly
- Add support for minimum level and maximum level
Validation attribute that accepts a list of enum values, any combination of which being legal as input
Have experienced locks in the console when triggering `Set-PSFTaskEngineCache`.  The locks have been noted on Windows 7, 8.1, and 10 with Windows PowerShell 5.1.  Have also experienced it with Core 6.1.4 on a Windows 8.1 system with PSF v1.0.19.  No delays were present with Core on v1.0.12 or v1.0.13.

Testing has been completed with versions:
1.0.12
1.0.13
1.0.19

Method of testing is executing the following code:
``` PowerShell
Import-Module -Name PSFramework -RequiredVersion 1.0.19
Set-PSFTaskEngineCache -Module MyModule -Name Cache01 -Collector {
    Start-Sleep -Seconds 15
    Get-Date
}

Register-PSFTaskEngineTask -Name MyModule.Cache01 -ScriptBlock {
    $null = Get-PSFTaskEngineCache -Module MyModule -Name Cache01
} -Once
```

The `RequiredVersion` is altered to force the module version for each test.  The console was closed and reopened between tests.  Locks were observed by repeatedly hitting the Enter key.  Within a few seconds the console will stop accepting input and will not return for the duration of the execution of the engine cache.

v1.0.11 is the first version with the parameters to support this method.  That errored in Core and WinPS.
v1.0.12 resulted in successful execution of the code.  Core worked without locks and WinPS had locks.
v1.0.13 Core worked without locks and WinPS had locks.
v1.0.19 Core had locks and WinPS had locks
Is it possible to have a similar feature to NoNewline for Write-Host? This would be quite helpful to write the progress of a task in a sequence of dots that should be in the same line.