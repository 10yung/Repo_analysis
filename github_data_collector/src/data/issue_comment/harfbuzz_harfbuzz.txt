Implemented _TODO Drop empty onesâ€¦_ comment in `Lookup::subset` in hb-ot-layout-common.h.
For this, added a variant of `subset_offset_array` taking an extra argument passed to `serialize_subset`.

Added `intersects` to GPOS `PosLookupSubtable` and GSUB `SubstLookupSubTable` to determine which subtables are empty.

Added an API test `test-subset-gpos.c` initially with only one test case to subset GPOS LookupType 2 (Pair) in Roboto-Regular containing two sub-tables PairPos1 and PairPos2 to one sub-table PairPos2.

I seem to remember Behdad saying that Harfbuzz will not just be able to shape but also instantiate static instances of variable fonts. This will be helpful for me because, as a layout engine, SILE needs to pass fonts to a PDF generator, and the PDF library doesn't support variable fonts.

I just found the shaping example in the documentation (oops), but is the instantiator done yet? Is it on the radar?

I'm trying to find out the effect of the miscellaneous font size arguments to the `hb-shape` tool.

    $ hb-shape LiberationSans-Regular.ttf LaVAT
    [L=0+1139|a=1+1139|V=2+1214|A=3+1214|T=4+1251]

When typesetting this text af fontsize 20 I get correct displacements when multiplied by fontsize/1000. Good.
Now with a font size:

    $ hb-shape --font-size=20 LiberationSans-Regular.ttf LaVAT
    [L=0+36|a=1+36|V=2+42|A=3+42|T=4+39]
    $ hb-shape --font-size=40 LiberationSans-Regular.ttf LaVAT
    [L=0+36|a=1+36|V=2+40|A=3+40|T=4+39]

These metrics are definitely not proportional to the font size.

If I understood the harfbuzz basics correctly, the metrics are based on the desired font size (important for hinting) but since the results are integer scaling is required to get accurate precision. The `hello-harfbuzz-opentype` demo program uses font size 36 and gives advance width 20.0156 for the initial `L`. 

What magic arguments do I need to supply to `hb-shape` to get the same, and as I assume correct, values as the demo program?
I could not find any CFF, CFF2 related tests. Afaiu, we need CFF and CFF2 only to get glyph extents during fallback shaping. And we have tests only for `glyf`,`CBDT` and `sbix` tables.

I can work on pull request if needed.
I'm trying to understand how to use harfbuzz, and I understand the most important function is `hb_shape`.  As such, I'm going through the documentation trying to understand what the parameters mean, and I've come across the "simple shaping example" from https://harfbuzz.github.io/ch03s03.html

This describes how to allocate a buffer, set its direction, load a font, and perform shaping.

However, the example does not work.

I have installed both harfbuzz and freetype2, and I'm compiling with `gcc $(pkg-config freetype2 harfbuzz --libs --cflags) test.c -o test`.

All is well up until Step 3: "Create a face and a font, using FreeType for now. ".  This is where things start to go wrong.

It has the following code:

```cpp
      #include <hb-ft.h>
      FT_New_Face(ft_library, font_path, index, &face);
      FT_Set_Char_Size(face, 0, 1000, 0, 0);
      hb_font_t *font = hb_ft_font_create(face);
```

None of these arguments are defined inside the header file.  There is `FT_Library`, which appears to be a typedef, but it doesn't actually work.

The example in the manual should be fixed so that it works.  The introductory sentence " Below is the simplest HarfBuzz shaping example possible." doesn't seem correct, because the example does not appear to contain everything it needs.
I've been working on [dlang](https://dlang.org) bindings for harfbuzz ([bindbc-harfbuzz](https://github.com/DlangGraphicsWG/bindbc-harfbuzz)) and I gathered some of the experience and difficulties in the process.  
Here is a simplified version of how I generate bindings, let's take this sample header as a starting point:
```C
typedef enum {
  HB_MEMORY_MODE_DUPLICATE,
  HB_MEMORY_MODE_READONLY,
  HB_MEMORY_MODE_WRITABLE,
  HB_MEMORY_MODE_READONLY_MAY_MAKE_WRITABLE
} hb_memory_mode_t;

typedef struct hb_blob_t hb_blob_t;

HB_EXTERN hb_blob_t *
hb_blob_create (const char        *data,
		unsigned int       length,
		hb_memory_mode_t   mode,
		void              *user_data,
		hb_destroy_func_t  destroy);

HB_EXTERN hb_blob_t *
hb_blob_create_from_file (const char *file_name);
```
- Use [DStep](https://github.com/jacob-carlborg/dstep) to generate D stubs from headers:
	```D
	enum hb_memory_mode_t
	{
		HB_MEMORY_MODE_DUPLICATE = 0,
		HB_MEMORY_MODE_READONLY = 1,
		HB_MEMORY_MODE_WRITABLE = 2,
		HB_MEMORY_MODE_READONLY_MAY_MAKE_WRITABLE = 3
	}

	struct hb_blob_t;

	hb_blob_t* hb_blob_create (
		const(char)* data,
		uint length,
		hb_memory_mode_t mode,
		void* user_data,
		hb_destroy_func_t destroy);
	}

	hb_blob_t* hb_blob_create_from_file (const(char)* file_name);
	```
- Use [Binding-Dynamizer](https://github.com/ahmetsait/Binding-Dynamizer) to create dynamic bindings from static bindings:
	```D
	enum hb_memory_mode_t
	{
		HB_MEMORY_MODE_DUPLICATE = 0,
		HB_MEMORY_MODE_READONLY = 1,
		HB_MEMORY_MODE_WRITABLE = 2,
		HB_MEMORY_MODE_READONLY_MAY_MAKE_WRITABLE = 3
	}

	struct hb_blob_t;

	version(BindHB_Static)
		hb_blob_t* hb_blob_create (
			const(char)* data,
			uint length,
			hb_memory_mode_t mode,
			void* user_data,
			hb_destroy_func_t destroy);
	else
	{
		private alias fp_hb_blob_create = hb_blob_t* function (
			const(char)* data,
			uint length,
			hb_memory_mode_t mode,
			void* user_data,
			hb_destroy_func_t destroy);
		__gshared fp_hb_blob_create hb_blob_create;
	}

	version(BindHB_Static)
		hb_blob_t* hb_blob_create_from_file (const(char)* file_name);
	else
	{
		private alias fp_hb_blob_create_from_file = hb_blob_t* function (const(char)* file_name);
		__gshared fp_hb_blob_create_from_file hb_blob_create_from_file;
	}
	```
- Lots of manual editing:
	```D
	enum : int // Assumed to be int but I'm not a C guru
	{
		HB_MEMORY_MODE_DUPLICATE = 0,
		HB_MEMORY_MODE_READONLY = 1,
		HB_MEMORY_MODE_WRITABLE = 2,
		HB_MEMORY_MODE_READONLY_MAY_MAKE_WRITABLE = 3
	}
	alias hb_memory_mode_t = int; // C doesn't have type-safe enums anyway

	struct hb_blob_t;

	version(BindHB_Static)
		hb_blob_t* hb_blob_create (
			const(char)* data,
			uint length,
			hb_memory_mode_t mode,
			void* user_data,
			hb_destroy_func_t destroy);
	else
	{
		private alias fp_hb_blob_create = hb_blob_t* function (
			const(char)* data,
			uint length,
			hb_memory_mode_t mode,
			void* user_data,
			hb_destroy_func_t destroy);
		__gshared fp_hb_blob_create hb_blob_create;
	}

	static if (hbSupport >= HBSupport.v2_6_3) // Somewhere between 1.7.2 ~ 2.6.3 this appears
	{
		version(BindHB_Static)
			hb_blob_t* hb_blob_create_from_file (const(char)* file_name);
		else
		{
			private alias fp_hb_blob_create_from_file = hb_blob_t* function (const(char)* file_name);
			__gshared fp_hb_blob_create_from_file hb_blob_create_from_file;
		}
	}
	```
Essentially it looks something like this: [generate-hb.bat](https://gist.github.com/ahmetsait/8bc1835f812fb70cbc31de6a5cf58bb4) + editing

Aside from all the improvements that can be done for DStep to make the process smoother and require less hand editing, there are many things that would immensely help for an easier and also higher quality binding on library developers' side:
- **Proper `#include` instead of abusing preprocessor**  
  D (among many other languages) do not use preprocessor for accessing symbols outside of the file. The fact that harfbuzz requires people to include `hb.h` instead of allowing invidual headers to be used is neither replicatable in other languages (or necessary) nor does it makes sense. This makes the process hacky in that I had to use `-DHB_H_IN`, `-DHB_OT_H_IN` and such so libclang doesn't just error out. The problem is further enchanced by some headers that do not include all files it uses such as `hb-shape-plan.h` not including `hb-face.h` because it is recursively done so by `hb-font.h`. This makes automation of import statements hard to pull off unless they are all marked as public. (I tried to avoid this so global namespace is not polluted as much)  
  Since C has no concept of local include/import, I couldn't decide whether to generate public imports or add private ones by hand.
  
- **Versioning of symbols in machine readable form**  
  BindBC-HarfBuzz currently supports choosing 2 different versions of the library: 1.7.2+ and 2.6.3+. Ideally I would want to support choosing any version possible but since there is no machine readable list of added/removed symbols for every version (also no semantic versioning what-so-ever); which means it is unfeasable to handcraft such capability thus I've chosen to just support 1.7.2 and the latest (2.6.3). What I did was to extract exported symbols via `dumpbin /exports libharfbuzz-0.dll` (which is also annoying to parse) as to easily determine which symbols are introduced between two versions (1.7.2 and 2.6.3). But this is not even reliable because what symbols gets compiled in changes based on configurations & environment.  
  I was expecting ABI Laboratory to have all these functionality but reality is often disappointing. If header files had easy to parse version comments something like: `/* Since: 1.6.0 BEGIN */` ~ `/* Since: 1.6.0 END */` I could wrap them with `static if (hbSupport >= 10600) { ... }` as well. I hope you consider this option.
  
- **64bit binaries with DirectWrite & Uniscribe glue on windows for testing**  
  Providing these would allow me to test the dynamic binding better without having to compile harfbuzz myself (something I don't want to bother) but I'm not holding my breath.
  
- **Less macros if possible**  
  Some of the macro functions are especially interesting that they cause name collisions with actual functions and screw up the automation but I don't know what could be done here as those are probably made for manual inlining & performance. I manually converted them and disabled the dynamic lib symbols entirely.  
  Maybe an `#ifdef` could enable body of those actual functions inside the headers but not much solution comes to my mind.
  
- **GLib / GObject introspection + template files (.tmpl)**  
  I have no idea what to do here. Currently the binding has no support for these because (1) I never use GTK-related libs, (2) I couldn't find proper documentation on how this works, and (3) I don't want to torture myself trying to build GLib or HarfBuzz on Windows. D actually does have complete [GTK bindings](https://gtkd.org) so I could hook them up easily.  
  At least a bit of documentation could help people like me. (Tell me if I'm missing something.)
  
- **Having always explicit enum types**  
  Some of the enums are bit flags but not defined to be `unsigned int`. Most (all?) enums are just not explicitly typed and I don't remember if C standard is reliable in this case. I can't tell slapping int onto them is the right thing but that's what I did for the time being.
  
- **Knowing library names for different distro & platforms**  
  https://github.com/DlangGraphicsWG/bindbc-harfbuzz/blob/v0.2.1/src/bindbc/hb/dynload.d#L47-L89  
  Complete speculation, I don't know whether same library name is something guaranteed across distros or not. I also don't own a Mac to check actual names myself. If there is an easy way to learn these let me know. Also, FreeType Windows builds are named `freetype.dll` but harfbuzz depends on `libfreetype-6.dll` and I would expect a `harfbuzz.dll` rather than a `libharfbuzz-0.dll` per Windows naming convention sake.
  
- **Dependency hell**  
  This isn't exactly binding related but Windows download of FreeType dll doesn't depend on anything meanwhile the one that comes with HarfBuzz depends on libraries that depends on other libraries that depends on other libraries that depends on...  
  `libgcc_s_sjlj-1.dll` seems to be there for error handling?  
  I don't know if it is all that hard to support Windows without things like GLib or not but I hope to be able see better _native_ Windows support in the future.

I think these are all the things that came to my mind. I wish library developers could remember that the world doesn't consist of C/C++/Python only :) That would make us miserable binding creators' life easier.

All that being said, I'm thankful for the hard work of you developers and I'm glad that this library exist.
In this line

https://github.com/harfbuzz/harfbuzz/blob/8ffc9add2237899afc57184ad3297404659bc1cd/src/hb-common.cc#L805

if `feature->start` is `HB_FEATURE_GLOBAL_END`, `feature->end` will have a random value.

It doesn't seem to affect anything, but maybe we should check it anyway.
I've wrote a simple script to find unused fonts and actually found some.

```
data/aots/classdef1_font1.otf
data/aots/cmap0_font1.otf
data/aots/cmap10_font1.otf
data/aots/cmap10_font2.otf
data/aots/cmap12_font1.otf
data/aots/cmap14_font1.otf
data/aots/cmap2_font1.otf
data/aots/cmap4_font1.otf
data/aots/cmap4_font2.otf
data/aots/cmap4_font3.otf
data/aots/cmap4_font4.otf
data/aots/cmap6_font1.otf
data/aots/cmap6_font2.otf
data/aots/cmap8_font1.otf
data/aots/cmap_composition_font1.otf
data/aots/cmap_subtableselection_font1.otf
data/aots/cmap_subtableselection_font2.otf
data/aots/cmap_subtableselection_font3.otf
data/aots/cmap_subtableselection_font4.otf
data/aots/cmap_subtableselection_font5.otf
data/in-house/46669c8860cbfea13562a6ca0d83130ee571137b.ttf
data/text-rendering-tests/NotoSansKannada-Regular.ttf
data/text-rendering-tests/Selawik-README.md
data/text-rendering-tests/Selawik-variable.ttf
data/text-rendering-tests/TestCMAPMacTurkish.ttf
data/text-rendering-tests/TestGVAR-Composite-0.ttf
data/text-rendering-tests/TestGVAR-Composite-Missing.ttf
data/text-rendering-tests/TestShapeAran.ttf
data/text-rendering-tests/TestShapeKndaV3.ttf
data/text-rendering-tests/TestTRAKOne.ttf
```

The script itself:

```python
#!/usr/bin/env python

import os


IGNORE_TESTS = [
    'macos.tests',
]

def check(dir):
    test_files = sorted(os.listdir(dir + '/tests'))
    test_files = [f for f in test_files if f.endswith('.tests')]

    used_fonts = set()

    for file in test_files:
        if file in IGNORE_TESTS:
            continue

        with open(dir + '/tests/' + file, 'r') as f:
            for idx, test in enumerate(f.read().splitlines()):
                # check for fonts in comments too
                if test.startswith('#'):
                    test = test[1:]

                # skip empty lines
                if len(test) == 0:
                    continue

                fontfile = test.split(':')[0]
                fontfile = os.path.split(fontfile)[1]
                used_fonts.add(fontfile)

    font_files = set(os.listdir(dir + '/fonts'))
    for font in sorted(list(font_files.difference(used_fonts))):
        print(dir + '/' + font)


check('data/aots')
check('data/in-house')
check('data/text-rendering-tests')
```

It's not perfect, since it checks only tests and not all sources. So I've double-checked all the listed font via recursive grep.

Should we remove those files?
Change in https://github.com/harfbuzz/harfbuzz/pull/2091 is wrong.

Calling `add` on a null object should silently do nothing.  Callsites should not need to check.

`add_set` can be called `extend` to reflect Python naming, and should accept any iterator of `hb_codepoint_t`, not just set.
Does anyone know if there's a way (supported or otherwise) to manually add a lookup, specified by index ID, to the shaping plan? This'll be needed for implementing OpenType justification, which embeds lookup IDs in the JSTF table.