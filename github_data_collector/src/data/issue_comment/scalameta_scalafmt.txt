This template is a guideline, not a strict requirement.
- **Version**: 0.5
- **Integration**: IntelliJ
- **Configuration**:
```
version = 2.0.1
maxColumn = 100
```

## Steps

Given code like this:
```scala
ORIGINAL CODE
```

When I run scalafmt like this:

```bash
scalafmt
```

## Problem

Scalafmt formats code like this:
```scala
//dotty : 0.21.0-rc1
error: identifier expected but ( found
def (xs: Seq[String]) longestStrings = {
```

## Expectation

I would like the formatted output to look like this:
```scala
EXPECTED FORMATTING OUTPUT
```

## Workaround


```

## Notes

See also..

* If the block is part of an infix expression, rewrite only if it also contains an infix expression
* do not rewrite infix block if its closing brace is the first non-whitespace character on the line
* don't apply the special if-within-if logic when the nested expression is not `if`
* change how and when we remove newlines after a brace is removed

Fixes #1631.
Fixes #1633.
* non-value generating statements #1631 
* Incorrect newlines in infix
```
  a ~> {
    b
  } ~> c
```
is rewritten as
```
  a ~>
    b
  ~> c
```
instead of
```
  a ~>
    b ~> c
```
* Infix lambda calls:
```
  a map { _.toString }
```
to
```
  a map _.toString
```
* lambda expressions:
```
  val a = if (b) { (c: Int) => d } else { (c: Int) => e }
```
to
```
  val a = if (b) (c: Int) => d else (c: Int) => e
```
We already have native images pipeline in Github Actions. It might make sense to move the rest jobs to Actions for unified CI system.
Rf: https://youtrack.jetbrains.com/issue/SCL-16861

I originally raised the above issue with the Intellij team but I think now it is a scalafmt issue. Please see above link for the actual bug details.

This is my scalafmt config:

```
addSbtPlugin("org.scalameta"     % "sbt-scalafmt"    % "latest.integration")
```

```
version=2.0.0-RC5
style = defaultWithAlign
maxColumn = 120
lineEndings = unix
importSelectors = singleLine

project {
  git = true
}

align = most

align {
  tokens = [ {code = "=>", owner = "Case|Type.Arg.ByName"}, "=", "<-", "->", "%", "%%", "should", "shouldBe", "must" ]
  arrowEnumeratorGenerator = true
  openParenCallSite = false
  openParenDefnSite = false
}

binPack {
  parentConstructors = false
}

continuationIndent {
  callSite = 2
  defnSite = 2
}

newlines {
  penalizeSingleSelectMultiArgList = false
  sometimesBeforeColonInMethodReturnType = true
}

rewrite {
  rules = [RedundantBraces, RedundantParens, AsciiSortImports]
  redundantBraces {
    maxLines = 100
    includeUnitMethods = true
    stringInterpolation = true
    generalExpressions = true
  }
}

spaces {
  inImportCurlyBraces = false
  beforeContextBoundColon = false
}
```
- **Version**: 2.2.1
- **Integration**: IntelliJ
- **Configuration**:
```
version = 2.2.1
maxColumn = 100
project.git = true
project.excludeFilters = [ "\\Wsbt-test\\W", "\\Winput_sources\\W", "\\Wcontraband-scala\\W" ]

# http://docs.scala-lang.org/style/scaladoc.html recommends the JavaDoc style.
# scala/scala is written that way too https://github.com/scala/scala/blob/v2.12.2/src/library/scala/Predef.scala
docstrings = JavaDoc

# This also seems more idiomatic to include whitespace in import x.{ yyy }
spaces.inImportCurlyBraces = true

# This is more idiomatic Scala.
# http://docs.scala-lang.org/style/indentation.html#methods-with-numerous-arguments
align.openParenCallSite = false
align.openParenDefnSite = false

# For better code clarity
danglingParentheses = true

trailingCommas = preserve
```

## Steps

Set intellij to autoformat on save.
## Problem

Intellij is unable to resolve scalafmt to 2.2.1 so no formatting on save occurs.

## Expectation

Intellij should correctly resolve scalafmt 2.2.1

## Workaround

If I bump the version to 2.3.1, then intellij resolves it fine. Unfortunately, this creates many format changes in the sbt project (where I noticed the issue). It is annoying for my local development that I have to upgrade scalafmt, generate a huge diff, check it in, keep working on my feature and when I'm done revert the scalafmt diff.

## Notes
The no formatting is especially annoying with intellij because sbt has scalafmtOnCompile set to true (I know...) so the file ends up being changed out from underneath intellij if any formatting is done.

Also, I've noticed this behavior since early in the 2.x series. It seems like intelij will almost always be ok resolving the latest scalafmt versions but not always the older ones.
I tried upgrading to 2.3.3-RC1 and I always get

 ```[error] scalafmt version 2.3.3-RC1 classpath is corrupted```

I've tried running `sbt clean update` and that did not help. This issue is not present with 2.3.2 so I do not believe it is my setup.

Thanks for the great tool, looking forward to using 2.3.3!

My configuration is:

```
version = "2.3.3-RC1"
maxColumn = 120 
rewrite.rules = [PreferCurlyFors, SortModifiers, AvoidInfix, SortImports]
trailingCommas = always
assumeStandardLibraryStripMargin = true
optIn.breakChainOnFirstMethodDot = false
spaces.inImportCurlyBraces = true
includeCurlyBraceInSelectChains = true
spaces.beforeContextBoundColon = Always
// These are copied from  https://scalameta.org/scalafmt/docs/configuration.html#other
rewrite.neverInfix.excludeFilters = [
  until
  to
  by
  eq
  ne
  "should.*"
  "contain.*"
  "must.*"
  in
  ignore
  be
  taggedAs
  thrownBy
  synchronized
  have
  when
  size
  only
  noneOf
  oneElementOf
  noElementsOf
  atLeastOneElementOf
  atMostOneElementOf
  allElementsOf
  inOrderElementsOf
  theSameElementsAs
  // these are new
  throws
  returns
  satisfy
]
```
To avoid frequent discussions in code review requesting formatting changes in the code to induce `scalafmt` to produce different output, I would like to introduce an option to format input and ignore input newlines (except adjacent to comments).

Propose 4 options:

* flag not specified, produces current mixed approach of sometimes ignoring input line breaks and sometimes following them;
* option to keep line breaks as specified;
* two options to try and ignore line breaks, one for fewer lines and another for shorter lines; both are affected by config style, select chains bin pack and other similar options, not sure if they should supercede then)

As this requires a lot of changes, I'd like to consider this option as work-in-progress until all changes have been merged, and larger community had time to comment. It will not be subject to edition guards until the logic has been finalized and declared completed.

NB: Follow-on to #1560 
Updates [org.scalameta:sbt-mdoc](https://github.com/scalameta/mdoc) [from 2.1.0 to 2.1.1](https://github.com/scalameta/mdoc/compare/v2.1.0...v2.1.1).
[Release Notes/Changelog](https://github.com/scalameta/mdoc/releases/tag/v2.1.1)

I'll automatically update this PR to resolve conflicts as long as you don't change it yourself.

If you'd like to skip this version, you can just close this PR. If you have any feedback, just mention me in the comments below.

Have a fantastic day writing Scala!

<details>
<summary>Ignore future updates</summary>

Add this to your `.scala-steward.conf` file to ignore future updates of this dependency:
```
updates.ignore = [ { groupId = "org.scalameta", artifactId = "sbt-mdoc" } ]
```
</details>

labels: sbt-plugin-update, semver-patch
Updates [org.scalamacros:paradise](git://github.com/scalamacros/paradise.git) from 2.1.0 to 2.1.1.


I'll automatically update this PR to resolve conflicts as long as you don't change it yourself.

If you'd like to skip this version, you can just close this PR. If you have any feedback, just mention me in the comments below.

Have a fantastic day writing Scala!

<details>
<summary>Ignore future updates</summary>

Add this to your `.scala-steward.conf` file to ignore future updates of this dependency:
```
updates.ignore = [ { groupId = "org.scalamacros", artifactId = "paradise" } ]
```
</details>

labels: library-update, semver-patch