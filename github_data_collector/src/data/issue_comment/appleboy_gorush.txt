@appleboy  This ties in to PR https://github.com/appleboy/go-fcm/pull/22 from gofcm
Hey @appleboy ran into a little issue here need this tweak to be able send and process background notifications on android


If you want to process android notifications in the BACKGROUND, they need to be data notifications, as in not contain the "notification" key in the payload.


This little change achieves it, because omitempty on structs for the json encoding does not work on sub-structs except if it is a pointer to it and set to nil.
Hey, I did have some failed push notifications:

```
time="2019/12/21 - 02:40:12" level=error msg="| failed-push | android [**********Y:xxxxxxxxxx.....**********] | <MESSAGE> | Error Message: unregistered device"
```

And I did set the env vars `GORUSH_CORE_SYNC` as false and the `GORUSH_CORE_FEEDBACK_HOOK_URL` with the API hook URL, but the failed event is never dispatched to my hook API. Do I need to configure another stuff?
## Steps that I have done before I ask this question

- I've successfully built `gorush` binary file and sent push notification to my android phone.

- I've also successfully sent push notification using `POST /api/push` web API. 
To accomplish this, I git cloned this project and created `config.toml` inside [gorush](https://github.com/appleboy/gorush/tree/master/gorush) folder and changed some params into my own.

## What I am trying to accomplish

However, what I am trying to accomplish here is to import this library in my own web server project and build custom push notification `web APIs`. 

Iis it standalone?

If it is plausible to accomplish, I will be appreciated if you could provide some resources or examples I can take a reference to because I can't seem to find it anywhere in this project.


This is all you need to deploy application directly to Heroku 
gorush/worker.go    

```go
// SendNotification is send message to iOS or Android
func SendNotification(req PushNotification) {
	if PushConf.Core.Sync {
		defer req.WaitDone()
	}

	select {
	case <-req.ctx.Done():
	default:
		switch req.Platform {
		case PlatFormIos:
			PushToIOS(req)
		case PlatFormAndroid:
			PushToAndroid(req)
		}
	}
}
```
Hi, how to specify analytics_label parameter in push payload for Firebase Messages?
https://firebase.google.com/docs/reference/fcm/rest/v1/projects.messages#fcmoptions
SETUP:
lambda + apigateway ( /{proxy+} - ANY - Method Execution )
Virtual Private Cloud (VPC) - no VPC

> By default, Lambda runs your functions in a secure VPC with access to AWS services and the internet. When you connect a function to a VPC in your account, it does not have access to the internet unless your VPC provides access.

CloudWatch Logs for lambda

```
time="2019/12/03 - 13:11:23" level=debug msg="Init App Status Engine as memory"
time="2019/12/03 - 13:11:23" level=debug msg="worker number is 1, queue number is 8192"
time="2019/12/03 - 13:11:23" level=debug msg="gRPC server is disabled."
time="2019/12/03 - 13:11:23" level=debug msg="HTTPD server is running on 8088 port."
START RequestId: 577298fc-391b-45f8-8b71-0276ae6ef285 Version: $LATEST
time="2019/12/03 - 13:11:23" level=info msg="| header | POST /api/push ***.***.***.** application/x-www-form-urlencoded curl/7.64.0"
[GIN] 2019/12/03 - 13:11:23 | 200 |   19.856858ms |  ***.***.***.** | POST     /api/push
END RequestId: 577298fc-391b-45f8-8b71-0276ae6ef285
REPORT RequestId: 577298fc-391b-45f8-8b71-0276ae6ef285	Duration: 22.44 ms	Billed Duration: 100 ms	Memory Size: 256 MB	Max Memory Used: 37 MB	Init Duration: 165.13 ms	
time="2019/12/03 - 13:22:23" level=debug msg="Start push notification for iOS"
```
```
time="2019/12/03 - 13:09:16" level=debug msg="Init App Status Engine as memory"
time="2019/12/03 - 13:09:16" level=debug msg="worker number is 1, queue number is 8192"
time="2019/12/03 - 13:09:16" level=debug msg="gRPC server is disabled."
time="2019/12/03 - 13:09:16" level=debug msg="HTTPD server is running on 8088 port."
START RequestId: ec315752-52be-44d3-9449-370e0c82c5bd Version: $LATEST
time="2019/12/03 - 13:09:16" level=info msg="| header | POST /api/push ***.***.***.** application/x-www-form-urlencoded curl/7.64.0"
[GIN] 2019/12/03 - 13:09:16 | 200 |   21.243728ms |  ***.***.***.** | POST     /api/push
END RequestId: ec315752-52be-44d3-9449-370e0c82c5bd
REPORT RequestId: ec315752-52be-44d3-9449-370e0c82c5bd	Duration: 41.48 ms	Billed Duration: 100 ms	Memory Size: 256 MB	Max Memory Used: 37 MB	Init Duration: 160.80 ms	
START RequestId: 2d4bef34-c9d1-4df0-a991-f8c490c9f49b Version: $LATEST
time="2019/12/03 - 13:09:16" level=debug msg="Start push notification for Android"
END RequestId: 2d4bef34-c9d1-4df0-a991-f8c490c9f49b
REPORT RequestId: 2d4bef34-c9d1-4df0-a991-f8c490c9f49b	Duration: 1.12 ms	Billed Duration: 100 ms	Memory Size: 256 MB	Max Memory Used: 38 MB	
START RequestId: c6e28c9c-0b66-41cb-a187-6942dba42931 Version: $LATEST
time="2019/12/03 - 13:09:23" level=info msg="| header | POST /api/push ***.***.***.** application/x-www-form-urlencoded curl/7.64.0"
[GIN] 2019/12/03 - 13:09:23 | 200 |     136.232µs |  ***.***.***.** | POST     /api/push
time="2019/12/03 - 13:10:49" level=error msg="FCM server send message error: Post https://fcm.googleapis.com/fcm/send: context deadline exceeded"
time="2019/12/03 - 13:10:49" level=debug msg="Start push notification for Android"
time="2019/12/03 - 13:10:49" level=info msg="| header | POST /api/push ***.***.***.** application/x-www-form-urlencoded curl/7.64.0"
[GIN] 2019/12/03 - 13:10:49 | 200 |     137.488µs |  ***.***.***.** | POST     /api/push
END RequestId: c6e28c9c-0b66-41cb-a187-6942dba42931
REPORT RequestId: c6e28c9c-0b66-41cb-a187-6942dba42931	Duration: 1.43 ms	Billed Duration: 100 ms	Memory Size: 256 MB	Max Memory Used: 38 MB	
```

Config file ( GET from https://*************.execute-api.us-west-1.amazonaws.com/prod/api/config)

```
core:
  enabled: true
  address: ""
  port: "8088"
  max_notification: 100
  worker_num: 2
  queue_num: 8192
  mode: release
  sync: false
  ssl: false
  cert_path: cert.pem
  key_path: key.pem
  cert_base64: ""
  key_base64: ""
  http_proxy: ""
  feedback_hook_url: ""
  pid:
    enabled: false
    path: gorush.pid
    override: true
  auto_tls:
    enabled: false
    folder: .cache
    host: ""
api:
  push_uri: /api/push
  stat_go_uri: /api/stat/go
  stat_app_uri: /api/stat/app
  config_uri: /api/config
  sys_stat_uri: /sys/stats
  metric_uri: /metrics
  health_uri: /healthz
android:
  enabled: true
  apikey: **************************************************************_vGI
  max_retry: 0
ios:
  enabled: false
  key_path: key.pem
  key_base64: ""
  key_type: pem
  password: ""
  production: false
  max_retry: 0
  key_id: ""
  team_id: ""
log:
  format: string
  access_log: stdout
  access_level: debug
  error_log: stderr
  error_level: error
  hide_token: true
stat:
  engine: memory
  redis:
    addr: localhost:6379
    password: ""
    db: 0
  boltdb:
    path: bolt.db
    bucket: gorush
  buntdb:
    path: bunt.db
  leveldb:
    path: level.db
grpc:
  enabled: false
  port: "9000"
```


Does the gorush support 'graceful shutdown' ?
The 'graceful shutdown' I say means that notifications workers and queue have are sent to APNs/FCM before a push notification service is shutdown.
I have an option to use sync mode, but I use async mode if possible.

If the gorush doesn't support 'graceful shutdown', I would like to try to contribute your project.

Thank you.
Hi, I've recently switched to using `gorush` to deliver notifications to my app.

I am checking if my app is receiving notifications (in my case, while the app is in the foreground) by implementing the following in `AppDelegate.swift`:

```swift
func application(_ application: UIApplication, didReceiveRemoteNotification userInfo: [AnyHashable : Any], fetchCompletionHandler completionHandler: @escaping (UIBackgroundFetchResult) -> Void) {
    print("USER INFO", userInfo)
    completionHandler(.noData)
}
```

If I don't set the delegate function `userNotificationCenter(_, willPresent: withCompletionHandler:)`, then all remote notifications will be processed in the `AppDelegate` function.

If I send the following data, the function is not called, implying that the notification was not received:
```
{
    "notifications": [
        {
            "tokens": ["my_token"],
            "data": {"custom_data_field": 3},
            "platform": 1,
            "topic": "my_topic",
            "development": true, 
            "content_available": true
        }
    ]
}
```

If I add a `title: "my_title"` to the notification, with or without the `content_available` field, the function is called, which means the notification has most definitely been received.

This seems to imply that silent notifications are not being delivered correctly. Any ideas?