> You have answered 30 of 30 questions correctly.

Questions repeat if I keep on pressing "Next Question". But where is my Rustacean Level?
Obviously, it's not "30/30", as I remember there were also fails.

This would make it easier to iterate on the rs and md files.
I don't quite understand, how the revealing the details explains the behavior:

```rust
struct S;

impl Drop for S {
    fn drop(&mut self) {
        print!("1");
    }
}

fn main() {
    let s = S;
    let _ = s;
    print!("2");
}
```

> The relevant line is let _ = s. If this line does not move s then s will continue to live until the close curly brace and the program would print 21. But if this line does move s, without binding it, then the moved value of type S would be dropped immediately and the program would print 12.
>
> In fact s does not get moved and the output is 21.

If an object is moved, we do not need to call destructor (`Drop::drop`). So, if `let _ = s` performs a move, we don't care what it was with `s` object as the ownership has already been transferred to another object, and we are tracking another object's lifetime for calling `Drop::drop` on it instead of original one. Also if it is moved then it can't be dropped immediately, as again, the ownership has already been transferred, so dropping it immediately will leave another object (to which the original one was moved) in an invalid state.

Did I misinterpret this explanation or it is really incorrect or just written in a difficult-to-understand manner? Anyways, I'd like it to also explain move semantics in Rust (at least because it differs from C++ a bit).

P.S. Perhaps you meant `copying` or `cloning` in some places of the explanation, because if it was cloned and not moved, then it can be dropped safely. But again, as far as I saw the LLVM IR code and optimized rust, the drops are performed just before cleaning up the stack frame, so after all the code, the object was not dropped immediately.

This corresponds to the "The program is unspecified / implementation defined" answer choice on cppquiz.org which applies just as much to Rust. It would apply for example to the following Rust program.

```rust
fn main() {
    print!("{}", std::mem::size_of::<usize>());
}
```
Struct literals are not accepted in some positions within a loop- or if-condition.

```rust
struct S {}

if S{} {
    /* ... */
}

// parsed as
if S {
}
{
    /* ... */
}
```