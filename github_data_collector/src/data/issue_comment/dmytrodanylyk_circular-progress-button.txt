As "compile" is going to be deprecated end-2018, this PR replaces with "implementation" that is the new usage.
I updated the gradle plugin to 3.x for a legacy project since the library caused crashes.
Maybe somone else can also benefit from this.
- Fixed behavior when orientation changes.
When switching from indeterminate progress state to other states, it
seems that stop() method of  CircularAnimatedDrawable is not invoked
which causes the high CPU utility in other states because an invisible
CircularAnimatedDrawable view still animates in the background.

Simply check if is in edit mode , if so, gives a default value for stroke width

I have been using this library a lot lately. It works really well. But when I use proguard, the drawable seems a bit off. And it shows that `setStrokeColor` method not found. This change fixed it.

ProGuard Enabled without keeping setStrokColor
![circ1](https://cloud.githubusercontent.com/assets/1256649/7630085/47258cc6-fa50-11e4-8798-478695e36192.png)

ProGuard Enabled with keep setStrokeColor
![circ2](https://cloud.githubusercontent.com/assets/1256649/7630099/735c640e-fa50-11e4-92ee-8854d919722a.png)

add gradle version 1.1.0;
change runproguard to minifyEnabled;
change outputfile task;

-the button can show the icon and text at the same time:
add  value "iconIdle","iconWidth","iconHeight","iconPadding"
change the method setIcon(), for caculate the text's length then set the content at the center.
-update gradle version

I just added the check isInEditMode so that when you look at your layout in in design mode, you don't get the following exception : 
Rendering problem:
The following class could not be instanciated : com.dd.CircularProgressButton
Tip : Use View.isInEditMode() in your custom view to skip code or shown in the IDE

java.lang.AssertionError
    at android.content.res.BridgeResources.getDimension(BridgeResources.java:335)
    at com.dd.CircularProgressButton.init(CircularProgressButton.java:82)
    at com.dd.CircularProgressButton.<init>(CircularProgressButton.java:73)
    at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)
    at sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:39)
    at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:27)
    at java.lang.reflect.Constructor.newInstance(Constructor.java:513)
    at org.jetbrains.android.uipreview.ViewLoader.createNewInstance(ViewLoader.java:413)
    at org.jetbrains.android.uipreview.ViewLoader.loadView(ViewLoader.java:105)
    at com.android.tools.idea.rendering.LayoutlibCallback.loadView(LayoutlibCallback.java:176)
    at android.view.BridgeInflater.loadCustomView(BridgeInflater.java:207)
    at android.view.BridgeInflater.createViewFromTag(BridgeInflater.java:132)
    at android.view.LayoutInflater.rInflate_Original(LayoutInflater.java:806)
    at android.view.LayoutInflater_Delegate.rInflate(LayoutInflater_Delegate.java:64)
    at android.view.LayoutInflater.rInflate(LayoutInflater.java:782)
    at android.view.LayoutInflater.inflate(LayoutInflater.java:504)
    at android.view.LayoutInflater.inflate(LayoutInflater.java:385)
    at com.android.layoutlib.bridge.impl.RenderSessionImpl.inflate(RenderSessionImpl.java:400)
    at com.android.layoutlib.bridge.Bridge.createSession(Bridge.java:332)
    at com.android.ide.common.rendering.LayoutLibrary.createSession(LayoutLibrary.java:350)
    at com.android.tools.idea.rendering.RenderService$5.compute(RenderService.java:708)
    at com.android.tools.idea.rendering.RenderService$5.compute(RenderService.java:697)
    at com.intellij.openapi.application.impl.ApplicationImpl.runReadAction(ApplicationImpl.java:932)
    at com.android.tools.idea.rendering.RenderService.createRenderSession(RenderService.java:697)
    at com.android.tools.idea.rendering.RenderService.render(RenderService.java:816)
    at com.intellij.android.designer.designSurface.AndroidDesignerEditorPanel$6.run(AndroidDesignerEditorPanel.java:480)
    at com.intellij.util.ui.update.MergingUpdateQueue.execute(MergingUpdateQueue.java:320)
    at com.intellij.util.ui.update.MergingUpdateQueue.execute(MergingUpdateQueue.java:310)
    at com.intellij.util.ui.update.MergingUpdateQueue$2.run(MergingUpdateQueue.java:254)
    at com.intellij.util.ui.update.MergingUpdateQueue.flush(MergingUpdateQueue.java:269)
    at com.intellij.util.ui.update.MergingUpdateQueue.flush(MergingUpdateQueue.java:227)
    at com.intellij.util.ui.update.MergingUpdateQueue.run(MergingUpdateQueue.java:217)
    at com.intellij.util.concurrency.QueueProcessor.runSafely(QueueProcessor.java:238)
    at com.intellij.util.Alarm$Request$1.run(Alarm.java:327)
    at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:439)
    at java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:303)
    at java.util.concurrent.FutureTask.run(FutureTask.java:138)
    at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:895)
    at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:918)
    at java.lang.Thread.run(Thread.java:695)

It is convenient to be able to tune the stroke width when the button is shown as idle and when a progress indicator is shown.
