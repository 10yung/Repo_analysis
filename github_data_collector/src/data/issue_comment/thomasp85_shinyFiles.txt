Prepare for release: 
 
* [x] Check [current CRAN check results](https://cran.rstudio.org/web/checks/check_results_shinyFiles.html) 
* [x] `devtools::check(remote = TRUE, manual = TRUE)` 
* [x] `devtools::check_win_devel()` 
* [x] `rhub::check_for_cran()` 
* [x] `revdepcheck::revdep_check(num_workers = 4)` 
* [x] Update `cran-comments.md` 
* [x] [Polish NEWS](https://style.tidyverse.org/news.html#news-release) 
 
Submit to CRAN: 
 
* [x] `usethis::use_version('patch')` 
* [x] `devtools::submit_cran()` 
* [x] Approve email 
 
Wait for CRAN... 
 
* [x] Accepted :tada: 
* [x] `usethis::use_github_release()` 
* [ ] `usethis::use_dev_version()` 

`shiny::fileInput()` sets the corresponding input variable to a dataframe upon file upload completion, which allows the user to user the corresponding input variable as the `eventExpr` to `shiny::observeEvent()` for observing a file upload.

As for `shinyFiles::shinyFilesButton()`, the corresponding input variable is updated every time the shinyFiles button is clicked or a file is uploaded. As such, to achieve the same function, one has to add a `shiny::req()` call to check if the corresponding input variable is empty.

Reprex:
```
runApp(list(
  
  ui = shinyUI(
    fluidPage(    
      shinyFilesButton('file', 'Load Dataset', 'Please select a dataset', FALSE),
      textOutput("txt")
    )
  ),
  
  server =shinyServer(function(input, output,session) {
    shinyFileChoose(input, 'file', roots=c(wd='.'))
    input_file <- reactive({
      parseFilePaths(roots=c(wd='.'), input$file)
    })
    rv <- reactiveValues()
    
    observeEvent(input_file(), {
      #if this req() line is commented, we get an error
      req(nrow(input_file())!=0 )
      rv$file <- input_file()$datapath %>% readLines()
    })
  })
))
```

Would you be open to a pull request that isolates the updating of the corresponding input variable until a file upload is completed to mimic `shiny:fileInput()` behaviour?
How to set the progress bar in shinyFileChoose, when i upload the data?
Hi, 

  I am working with `shinyDirButton` and `shinyDirChoose` to allow selection of a folder, starting from a specific default folder specified throgh `defaultPath` and `defaultRoot`. The problem is that when I then invoke  `parseDirPath` to get the selected folder name, apparently the `defaultPath` value is ignored.

In practice, the returned path is 

     `defaultRoot/name_of_folder`

while  if I get the expected functionality right, it should be: 

     `defaultRoot/defaultPath/name_of_folder`

Below you can find an example (not really reprex because it is related to my "paths"): 

```
library(shiny)
library(shinyFiles)

ui <- {
  volumes <- c(main = "/home/lb/")
  shinyUI(fluidPage(
  
  titlePanel("Example"),
  shinyDirButton("savedir", "Save folder", "Save folder")
  ))
}
server <- shinyServer(function(input, output, session) {
  
  shinyDirChoose(input, "savedir",
                 roots=volumes,
                 defaultPath = "tmp", 
                 defaultRoot = "main",
                 session=session)
  
  observeEvent(input$savedir, {
     dirinfo <- parseDirPath(volumes, input$savedir)
     print(dirinfo)
  })
})

shinyApp(ui = ui, server = server)
```

If I run the example, I correctly  get a "list of folders" starting from my "/home/lb/tmp" (although I see "main" on the top instead than "tmp" or "main/tmp"):

![image](https://user-images.githubusercontent.com/4480397/49016622-f39f1180-f186-11e8-8c78-f124392f4cb3.png)

However, if I now select the "buttami" subfolder and click on "select", the path returned by 

`dirinfo <- parseDirPath(volumes, input$savedir)`

is **"/home/lb/buttami"**, while I would expect it to be **"/home/lb/tmp/buttami"**

Am I missing something/misunderstanding the functionality, here?
Hi,
I see that a lot of new features are being built into shinyFiles lately, and that's great, thanks for your hard work!

I have come across a problem that occurs when a shinyFilesButton/ shinyDirButton/ shinySaveButton is placed inside a shiny::modalDialog:
The shinyFiles Dialog pops up and works, except that you cannot browse/change the root folder selection. The dropdown menu shows up for a half second sometimes if you keep clicking on the rootFolder selection input, but no chance to change the folder. Here is an example based on shinyFilesExample(). Note how the folder selection works for the buttons in the main page, but not the 
modal dialog:


```
library(shiny)
library(shinyFiles)
library(fs)

server <- shinyServer(function(input, output, session) {
  volumes <- c(Home = fs::path_home(), "R Installation" = R.home())
  shinyFileChoose(input, "file", roots = volumes, session = session)
  shinyDirChoose(input, "directory", roots = volumes, session = session, restrictions = system.file(package = "base"))
  shinyFileSave(input, "save", roots = volumes, session = session, restrictions = system.file(package = "base"))
  
  shinyFileChoose(input, "fileInModal", roots = volumes, session = session)
  shinyDirChoose(input, "directoryInModal", roots = volumes, session = session, restrictions = system.file(package = "base"))
  shinyFileSave(input, "saveInModal", roots = volumes, session = session, restrictions = system.file(package = "base"))

  observeEvent(input$openModal,{
    showModal(modalDialog(
      shinyFilesButton("fileInModal", "File select", "Please select a file", multiple = TRUE),
      shinyDirButton("directoryInModal", "Folder select", "Please select a folder"),
      shinySaveButton("saveInModal", "Save file", "Save file as...", filetype = list(text = "txt", picture = c("jpeg", "jpg"))),
      title = "Folder selection does not work in these:",
      easyClose = F
    ))
    
  })
})

ui <- shinyUI(pageWithSidebar(
  headerPanel(
    "Selections with shinyFiles",
    "shinyFiles example"
  ),
  sidebarPanel(
    tags$hr(),
    shinyFilesButton("file", "File select", "Please select a file", multiple = TRUE),
    tags$hr(),
    shinyDirButton("directory", "Folder select", "Please select a folder"),
    tags$hr(),
    shinySaveButton("save", "Save file", "Save file as...", filetype = list(text = "txt", picture = c("jpeg", "jpg"))),
    tags$hr(),
    actionButton("openModal","Here is the Problem")
  ),
  mainPanel(
  )
))
shinyApp(ui,server)
```

The weird thing is that this worked for me until I updated shinyFiles (and possibly some other packages), but I cannot make it work again by installing older versions of shinyFiles from github, so maybe it's a problem with other packages. Have that problem on both Windows and Linux.

```
R version 3.5.1 (2018-07-02)
Platform: x86_64-pc-linux-gnu (64-bit)
Running under: Ubuntu 18.04.1 LTS

Matrix products: default
BLAS: /usr/lib/x86_64-linux-gnu/blas/libblas.so.3.7.1
LAPACK: /usr/lib/x86_64-linux-gnu/lapack/liblapack.so.3.7.1

locale:
 [1] LC_CTYPE=en_US.UTF-8       LC_NUMERIC=C               LC_TIME=en_US.UTF-8        LC_COLLATE=en_US.UTF-8     LC_MONETARY=en_US.UTF-8   
 [6] LC_MESSAGES=en_US.UTF-8    LC_PAPER=en_US.UTF-8       LC_NAME=C                  LC_ADDRESS=C               LC_TELEPHONE=C            
[11] LC_MEASUREMENT=en_US.UTF-8 LC_IDENTIFICATION=C       

attached base packages:
[1] stats     graphics  grDevices utils     datasets  methods   base     

other attached packages:
[1] fs_1.2.6              shinyFiles_0.7.1.0001 shiny_1.1.0          

loaded via a namespace (and not attached):
 [1] Rcpp_0.12.17    crayon_1.3.4    digest_0.6.15   later_0.7.3     mime_0.5        R6_2.2.2        xtable_1.8-2    jsonlite_1.5    magrittr_1.5   
[10] pillar_1.3.0    rlang_0.2.1     rstudioapi_0.7  promises_1.0.1  tools_3.5.1     httpuv_1.4.5    compiler_3.5.1  htmltools_0.3.6 tibble_1.4.2   
```
It would be useful if entering the first few letters of a file or directory name would select the correct icon, similar to Finder (macOS) of File Explorer (Windows)
By default, the file picker forces the UI to use large icons and sorts by name. Our users like using lists and want to sort by creation date. Could we add an input option to specify these filters prior to opening?

Any idea how do I use the shinyFilesButton and shinyFileChoose functions in flexdashboard...

I used it as it is with Shiny UI and Server functions but then its a bit limited to pass variables out of it. 

Will be nice to know if anyone tried this already.
Hello,

First thank you for this great package. It was really useful to me in building a graphical user interface inside my own package. On user asked me if it was possible to add ability to type the file path in the shinyFiles file access to gain time ? It might be on good improvement of the existing file access engine.

Have a nice day,

Sylvain