A type alias makes this code more manageable by reducing the repetition.
I was just wondering why the benchmarks on techempower has a very slow speed on multiple queries? 
![bench](https://user-images.githubusercontent.com/37842273/47252171-d2633c80-d3f4-11e8-94a8-4783073014e5.jpeg)

Decoder recieve empty buf twice after first complete buf.

Why decoder recieve empty buf twice? 
It is issue for tokio-io?

I found it like that
```diff
diff --git a/src/lib.rs b/src/lib.rs
index fc36848..ca56d08 100644
--- a/src/lib.rs
+++ b/src/lib.rs
@@ -42,6 +42,7 @@ impl Decoder for HttpCodec {
     type Error = io::Error;
 
     fn decode(&mut self, buf: &mut BytesMut) -> io::Result<Option<Request>> {
+        println!("is buf empty - {}", buf.is_empty());
         request::decode(buf)
     }
 }
```

Run `hello-world`
```bash
$ cargo run --example hello-world
is buf empty - false
is buf empty - true
is buf empty - true
```

On simplest GET request
```bash
$ curl -X GET -v http://127.0.0.1:8080/ -v
Note: Unnecessary use of -X or --request, GET is already inferred.
*   Trying 127.0.0.1...
* TCP_NODELAY set
* Connected to 127.0.0.1 (127.0.0.1) port 8080 (#0)
> GET / HTTP/1.1
> Host: 127.0.0.1:8080
> User-Agent: curl/7.57.0
> Accept: */*
>
< HTTP/1.1 200 OK
< Server: Example
< Content-Length: 13
< Date: Thu, 25 Jan 2018 23:01:55
<
* Connection #0 to host 127.0.0.1 left intact
Hello, world!
```

Any way this PR skip parsing of empty buf as request, that must improve tokio-minihttp performance.

Sorry about my poor English.

To use it's necessary to have access to a body of the request.
I just add couple lines for it.
I'm trying to find a way to get access to the peer's name (i.e., `sockaddr_in` equivalent) but this information doesn't seem to get propagated past the `tokio-proto` and `tokio-io` layers. Is this by design or just a missing feature? If this is by design, is the appropriate place to implement my idea (something that needs access to peer's name but also implementing a protocol/service) directly atop `tokio-core`?

Really, what I want is what is described in https://tokio.rs/docs/getting-started/pipeline-server/ examples, but with the socket and/or peer name passed through to the service.
I've seen a bit of data from @alexcrichton 's blog suggesting the minihttp framework built on top of tokio performs extremely well while sporting a fairly ergonomic design. Unfortunately a couple of the links are dead and the current benchmarks on the page don't have any other frameworks for comparison.

Would the possibility of pushing a benchmark to the [techempower benchmarks](https://www.techempower.com/benchmarks/#section=data-r12) be something that you guys could do? These benchmarks get a fair amount of traffic and promising results would increase visibility to the tokio project. It would help validate any performance claims that're being made about the project as well.

Right now, in [preliminary results](https://www.techempower.com/benchmarks/previews/round13/), rust isn't fairing too well across the board.

[Techempower's github](https://github.com/TechEmpower/FrameworkBenchmarks)
