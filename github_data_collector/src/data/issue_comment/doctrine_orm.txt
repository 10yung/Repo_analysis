

This PR is basically #7986 but targetted on 2.8 as suggested.

I'll copy the text from there:

> Hi,
> 
> This PR is the result of fixing easy issues from the two first levels of Psalm.
> 
> This is the starting point of trying to begin #7762. If this goes smoothly, my goal is to continue fixing errors by slowly increasing the Psalm's levels. Eventually, the idea would be to add Psalm to the CI and to add template annotation to interfaces and exposed classes to help tools like phpstan and psalm understand Doctrine without the need of stubs or plugins.
> 
> I'm always trying to learn so don't hesitate to ask for changes or anything!
> 
> Thanks!

I didn't expect such difference between master and 2.8! Great job guys, I can't wait for future versions!

It seems that the CI is broken on 2.8. I tried to run phpcbf locally but there are massive changes, I didn't dare apply them here, so there may be some CS errors. If the CI is fixed and the errors are still there in the future, I'll correct them.

I'll close #7986, some changes there were specific to the master branch due to code movements but let's fix that later.
Fixes #7982 
### Feature Request

<!-- Fill in the relevant information below to help triage your issue. -->

|    Q        |   A
|------------ | ------
| New Feature | yes
| RFC         | no
| BC Break    | no

#### Summary

Laravel has the insertOrIgnore method in his querybuilder (https://github.com/laravel/framework/blob/5.8/src/Illuminate/Database/Query/Builder.php#L2656), it would be great if doctrine also included it


What do you think about it?

<!-- Provide a summary of the feature you would like to see implemented. -->

Proposing patch: Throw LogicException if region is tried to use for READ_WRITE while implementation doesn't implement ConcurrentRegion.

This PR is missing Tests as this is draft. I will be adding them later, if this is approved approach to handle this case.
### Bug Report

|    Q        |   A
|------------ | ------
| BC Break    | no
| Version     | 2.7.0

#### Summary

When executing a DQL query of "0", it throws a PHP fatal error

#### Current behavior

```
Fatal error: Uncaught Error: Call to a member function getSqlExecutor() on null in /home/nat/Code/personal/fuzzer-test/doctrine-dql/vendor/doctrine/orm/lib/Doctrine/ORM/Query.php:298
Stack trace:
#0 /home/nat/Code/personal/fuzzer-test/doctrine-dql/vendor/doctrine/orm/lib/Doctrine/ORM/AbstractQuery.php(992): Doctrine\ORM\Query->_doExecute()
#1 /home/nat/Code/personal/fuzzer-test/doctrine-dql/vendor/doctrine/orm/lib/Doctrine/ORM/AbstractQuery.php(947): Doctrine\ORM\AbstractQuery->executeIgnoreQueryCache(NULL, NULL)
#2 /home/nat/Code/personal/fuzzer-test/doctrine-dql/test.php(12): Doctrine\ORM\AbstractQuery->execute()
#3 {main}
  thrown in /home/nat/Code/personal/fuzzer-test/doctrine-dql/vendor/doctrine/orm/lib/Doctrine/ORM/Query.php on line 298
```

#### How to reproduce

```
<?php

require __DIR__ . '/vendor/autoload.php';

$config = \Doctrine\ORM\Tools\Setup::createAnnotationMetadataConfiguration(['/empty'], true);
$em = \Doctrine\ORM\EntityManager::create([
    'driver' => 'pdo_sqlite',
], $config);

$em->createQuery('0')->execute();
```

#### Expected behavior

Parse error


### Bug Report

|    Q        |   A
|------------ | ------
| BC Break    | ?
| Version     | 2.7.0

#### Summary

Entity:
```
 * @ORM\Entity
 * @ORM\Table(name="stock_inventory")
 * @ORM\Cache(usage="READ_WRITE", region="locking")
```

Configuration (Bundle for Symfony)
```yaml
    orm:
        auto_generate_proxy_classes: '%kernel.debug%'
        entity_managers:
            default:
                naming_strategy: doctrine.orm.naming_strategy.underscore_number_aware
                auto_mapping: true
                second_level_cache:
                    region_cache_driver:
                        type: service
                        id: cache.doctrine.redis
                        pool: 'dl2_'
                    enabled: true
                    regions:
                        locking:
                            cache_driver:
                                type: service
                                id: cache.doctrine.redis
                                pool: 'dl2l_'
                            lock_path: '%kernel.cache_dir%/doctrine/orm/lock'
```

**While correct configuration would be**
```yaml
    orm:
        ...
        entity_managers:
            default:
                ...
                second_level_cache:
                    ...
                    regions:
                        locking:
                            lock_path: '%kernel.cache_dir%/doctrine/orm/lock'
                            type: filelock
```

#### Current behavior

Running a write into the database will cause
```php
 [TypeError]                                                                                                                                                                                                     
  Argument 2 passed to Doctrine\ORM\Cache\Persister\Entity\ReadWriteCachedEntityPersister::__construct() must be an instance of Doctrine\ORM\Cache\ConcurrentRegion, instance of Doctrine\ORM\Cache\Region\Defau  
  ltRegion given, called in /app/vendor/doctrine/orm/lib/Doctrine/ORM/Cache/DefaultCacheFactory.php on line 132  

Exception trace:
  at /app/vendor/doctrine/orm/lib/Doctrine/ORM/Cache/Persister/Entity/ReadWriteCachedEntityPersister.php:44
 Doctrine\ORM\Cache\Persister\Entity\ReadWriteCachedEntityPersister->__construct() at /app/vendor/doctrine/orm/lib/Doctrine/ORM/Cache/DefaultCacheFactory.php:132
 Doctrine\ORM\Cache\DefaultCacheFactory->buildCachedEntityPersister() at /app/vendor/doctrine/orm/lib/Doctrine/ORM/UnitOfWork.php:3133
 Doctrine\ORM\UnitOfWork->getEntityPersister() at /app/vendor/doctrine/orm/lib/Doctrine/ORM/UnitOfWork.php:1065
 Doctrine\ORM\UnitOfWork->executeInserts() at /app/vendor/doctrine/orm/lib/Doctrine/ORM/UnitOfWork.php:400
 Doctrine\ORM\UnitOfWork->commit() at /app/vendor/doctrine/orm/lib/Doctrine/ORM/EntityManager.php:368
 Doctrine\ORM\EntityManager->flush() at projectRelatedFile.php:50
```

#### Digging the issue
So this is caused due [here](https://github.com/doctrine/orm/blob/master/lib/Doctrine/ORM/Cache/DefaultCacheFactory.php#L72) we are expecting Region interface. This is propably correct functionality. [Here](https://github.com/doctrine/orm/blob/master/lib/Doctrine/ORM/Cache/DefaultCacheFactory.php#L100) we pass it to the next class, which causes this error. The problem is, in the Persister [constructor](https://github.com/doctrine/orm/blob/master/lib/Doctrine/ORM/Cache/Persister/Entity/ReadWriteCachedEntityPersister.php#L24) we are declaring we want this one specific type.

This should be fixed with a interface, abstract class or something. Any toughts? Or is this something for 3.0/wontfix?


#### How to reproduce

Configure previous settings and try persist something to the database.

#### Expected behavior

Throw a handled exception, not a type error. 

#### Notes
I'm not sure how this architecture fully works, so I would like if somebody else familiar with this would take this. With correct configuration this works, but I wasn't sure if I should post bug about this, however I decided to post it just to make sure this is intended functionality.


I created a pull request for an issue with SQLFilters related to the EntityManager, which is a dependency of the `SQLFilter` class but not exposed to child classes.  However, I'm now faced with another issue related to SQLFilters that is more of the result of the same mentality that continues to haunt me with Doctrine.

I'm certain this won't be met with open arms, because it's honestly just an disagreement with approach.  But everything in Doctrine makes the assumption that developers using the library do not know what they're doing and do not need to extend it freely.

Situation:

I need to create an `SQLFilter` that reads annotations.  Due to performance implications, I need to be able to used the `CachedReader`, as the annotations are already cached, and being that it's a filter which is applied on every query, using the standard `AnnotationReader` without cache, isn't really sufficient.  The performance hit is real.

Problem:

Filters are locked down tight.  You do not have access to the constructor and the filters, after being constructed, are not easily accessible.  So, adding dependencies is a bit more of a challenge, and nasty, and prone to future BC breaks.

```php
$entityManager->getFilters()->getEnabledFilters()['multi-tenancy']->setAnnotationReader($cachedAnnotationReader);
```

That is really nasty.  It shouldn't be.  I also should be able to write filters and use this lib as needed for proper implementation.  Without SQLFitlers, this ORM simply wouldn't work.  We need proper multi-tenancy support, which needs to be applied via Filters for relational entity access, etc.  Annotations are the most logical way of handling this.

I'm requesting that SQLFilter design be re-visited.  I'd also encourage a bit of a change in mentality towards locking down the library, but I realize that's just a difference in opinion and most likely unwelcomed.
There is no reason for the EntityManager to not be accessible within filters.  It causes extension writers to do code gymnastics to get the EntityManager.

Example:
https://github.com/Atlantic18/DoctrineExtensions/blob/master/src/SoftDeleteable/Filter/SoftDeleteableFilter.php