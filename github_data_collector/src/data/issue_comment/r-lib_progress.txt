The example packaged linked to in the "C++ API" section no longer seems to exist.
Hi there,

I often use `base::replicate` for simulations but not knowing when my replication will end was killing me.

Therefore, here is a simple rewriting of `base::replicate` that can use your progress bars.

For instance:

```
library(dplyr)
replicate_pb(50000, {rnorm(1)>1.65}) %>% {paste(mean(.), " - ", sd(.))}
```

This might need some rewriting to conform to your standards, naming, etc but I thought it could be interesting.

Kudos for this wonderful package!
Dan
I used {progress} in a package, because I expect it to mostly be used in interactive sessions. However, I want to make a demo with Shiny for an upcoming conference, and I don't see a good way to capture the printed bars and show them in the app.

I tried using solutions like https://stackoverflow.com/questions/30474538/possible-to-show-console-messages-written-with-message-in-a-shiny-ui, but only got `[1] "\r"` printed in my HTML element.

I could rewrite my package to check for the context, and if it's Shiny instead of `interactive()`, switch to using the Shiny-native progress bars, but that's... not the best solution. Are there any straightforward ideas I'm missing here?
I'm starting to use Rstudio server and found that progress bars fail to print correctly. This is what I'm getting:

```r
pbar_test <- function() {
  pb <- progress::progress_bar$new(total = 100)
  
  for (i in 1:100) {
    Sys.sleep(0.1)
    pb$tick()
  }
}

pbar_test()
```

![pbar_server](https://user-images.githubusercontent.com/8617595/63461982-38af5600-c430-11e9-8744-d45d2a774bf7.gif)

As a sanity check, the same testing function works properly on my local instance

![pbar_local](https://user-images.githubusercontent.com/8617595/63462075-7b712e00-c430-11e9-9214-5fcd26703ad3.gif)

Rstudio Server version is 1.0.153 if that helps (I don't admin have access to update it, unfortunately :( ) 

I played around with [this question](https://stackoverflow.com/questions/7349570/wrapper-to-for-loops-with-progress-bar) on SO. 

My solution that I packaged [there](https://github.com/moodymudskipper/pbfor)  wraps around *progress* and allows one to use either of the following syntaxes : 

```
pb_for()
for (i in 1:10) {
  # DO SOMETHING
}

pb <- progress_bar$new(format = "Something: [:bar] :percent :elapsed")
pb  -> for (i in 1:10) {
  # DO SOMETHING
}
```

It uses some quirks of the R language but it offers an intuitive interface and avoids the current issue of having to type "2 things".

You can find more by following either link above. The code might be too weird for this package but if you think it might have a place here it's yours to take and tweak.
This is a kind of reboot of this issue I opened up on `cli`: https://github.com/r-lib/cli/issues/56

My symptoms with `progress` are similar to those I describe there, i.e. I have bulk text blowing up my REPL because the progress bars are 10000 characters long. I use this setting because it makes printing of dataframes and tibbles nicer (in ESS).

So right now I have this in my `.Rprofile`:

```
options(
  cli.width = 80,
  width = 10000
)
```
It would be nice if I could limit the progress bars to 80 chars.
Hello.
I get this warning:
trying to get slot "new" from an object (class "R6ClassGenerator") that is not an S4 object 
in RStudio 1.1.463 and R version 3.5.2 in MacOS Mojave 10.14.2
It seems that the packages does not support Jupyter notebook yet.
Can you please add such a feature?
Summarizing a Slack discussion: progress should provide more centralized support for client packages that expose a logical argument that controls whether progress should be displayed.

We need a helper we can call as the default strategy and it will have a lot in common with this function I've nicked from readr:

``` r
show_progress <- function() {
  isTRUE(getOption("readr.show_progress")) && # user disables progress bar
  interactive() && # an interactive session
  !isTRUE(getOption("rstudio.notebook.executing")) && # Not running in an RStudio notebook chunk
  !isTRUE(getOption("knitr.in.progress")) # Not actively knitting a document
}
```
Related to my readxl usage of a common progress bar (spinner, actually) for a couple distinct steps. Could we ever update the `format` of an existing progress bar? Or maybe in the simple case of a spinner?