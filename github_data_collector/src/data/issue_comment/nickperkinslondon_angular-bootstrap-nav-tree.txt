Can i get this tree support in Angular 7?
Need to find an optimal way to reset selected branch , my was was is to destroy the whole table then re-initialize it which makes no sense , so is there any better way to do that?
There is no way to initially select nav-tree with uid. This development is to meet this mentoined need. Thanks
â€¦branch when we click on it

    <ul class="nav nav-list nav-pills nav-stacked abn-tree">
    
        <li ng-repeat="row in tree_rows | filter:{visible:true} track by row.branch.uid" ng-animate="'abn-tree-animate'"
            ng-class="'level-' + {{ row.level }} + (row.branch.selected ? ' active':'')" class="abn-tree-row">
    </li>
    </ul>

But the data is tree_rows is big and it is trying to loop through all the children and construct tree and it has performance hit in IE.

Is it possible to load all the parent nodes first once we click on expand, it constructs children from the list.

So let's say I have a list of filepaths in an Arraylist.
```
Arraylist<String> list = new Arraylist<String>();
list.add("folder1 > folder2 > folder3 > file1.jpg");
list.add("folder1 > folder2 > folder3 > file2.jpg");
```

Are there anyway to efficiently transform this list of filepaths into the node structure at my Java side.

Here's what I did at my Java API side.
```
@RequestMapping(value = "/retrieveTreeNodes", method = RequestMethod.GET, produces = MediaType.APPLICATION_JSON_VALUE)
public Object[] retrieveTreeNodes() {
       JSONArray jsonArray = new JSONArray();
       int index=0;
       for(int i=0; i<list.size();i++){
            jsonArray.put(function(list.get(i), index, jsonArray));
       }
       JacksonHandle jacksonHandle = new JacksonHandle();
       try{
           return jacksonHandle.getMapper().readValue(jsonArray.toString(), Object[].class);
        }catch(Exception e){}
}

public JSONObject function(String str, int index, JSONArray jsonArray) {
	String[] paths = str.split(">");						
	return pathsToJSONObject(paths, index, jsonArray);		
}
	
public JSONObject pathsToJSONObject(String[] paths, int index, JSONArray jsonArray) {
	JSONObject jsono = new JSONObject();
		
	if(paths.length==1) {			
		jsono.put("name", paths[0].trim());
		jsono.put("id", index); index++;
                return jsono;
	} else {
		jsono.put("name",paths[0].trim());
		jsono.put("id", index); index++;			
		jsono.append("children", 
                    pathsToJSONObject(ArrayUtils.removeElement(paths,paths[0]),index,jsonarrayNodes));			
		return jsono;
	}
}
```
Eventually this Object[] will be parsed into my Angular website example:

component.ts as
```
this.restclient.getjson('/api/retrieveTreeNodes').subscribe(nodes=>{
           this.nodes = nodes;
           this.tree.treeModel.update();
          });
```
component.html as
```
<tree-root #tree [nodes]="nodes"></tree-root>
```

The Object expected to be returned:
```
[
 {
    "children": [
      {
        "children": [
          {
            "children": [
              {
                "name": "file1.jpg",
                "id": 3
              },
              {
                "name": "file2.jpg",
                "id": 4
              }
            ],
            "name": "folder3",
            "id": 2
          }
        ],
        "name": "folder2",
        "id": 1
      }
    ],
    "name": "folder1",
    "id": 0
  }
]
```
This is the expected result:
```
>folder1
    >folder2
        >folder3
           >file1.jpg
           >file2.jpg
```

But this is the actual Object[] returned:
```
[
 {
    "children": [
      {
        "children": [
          {
            "children": [
              {
                "name": "file1.jpg",
                "id": 3
              }              
            ],
            "name": "folder3",
            "id": 2
          }
        ],
        "name": "folder2",
        "id": 1
      }
    ],
    "name": "folder1",
    "id": 0
  },
  {
    "children": [
      {
        "children": [
          {
            "children": [
              {
                "name": "file2.jpg",
                "id": 7
              }              
            ],
            "name": "folder3",
            "id": 6
          }
        ],
        "name": "folder2",
        "id": 5
      }
    ],
    "name": "folder1",
    "id": 4
  }
]
```
and This is the actual result:
```
>folder1
    >folder2
        >folder3
           >file1.jpg
>folder1
    >folder2
        >folder3
           >file2.jpg
```


Where did I go wrong... what else should I do...

Adding on, what if one day I'll have to add a few new files to the list of filepaths e.g
```
list.add("folder1 > folder2 > file3.jpg");
list.add("folder4 > folder5 > folder6 > folder7 > file4.jpg");
```
Is there any possibility in  tree that I can only see expand node at a time ?


Is it possible to use this with angular2 in current form?
Do you also plan to upgrade it?
