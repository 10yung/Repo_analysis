https://github.com/rstudio/rsconnect/blob/050a7f7cb533bc1c689a631d64458aabeb23f807/R/auth.R#L156

Two things,

1.  There appears to be a typo in `showUsers`, where `listApplicationAuthoization` should read `listApplicationAuthorization`. 

```r
  res <- api$listApplicationAuthorization(application$id)
```

The code is currently outputting this error because of this,

```r
Error in api$listApplicationAuthoization(application$id) : 
  attempt to apply non-function
```

2. There is no function on the `api` object called `listApplicationAuthorization.` Which means that despite fixing the typo code still doesn't work. Is there another function in the `api` object that should be used?

```r
# At line 155
 application <- rsconnect:::resolveApplication(accountDetails, appName)
 api <- rsconnect:::clientForAccount(accountDetails)
 str(api)

List of 16
 $ serverSettings      :function ()  
 $ addUser             :function (userRecord)  
 $ getUser             :function (userId)  
 $ currentUser         :function ()  
 $ addToken            :function (token)  
 $ listApplications    :function (accountId, filters = NULL)  
 $ createApplication   :function (name, title, template, accountId)  
 $ terminateApplication:function (applicationId)  
 $ uploadApplication   :function (appId, bundlePath)  
 $ deployApplication   :function (applicationId, bundleId = NULL)  
 $ configureApplication:function (applicationId)  
 $ getApplication      :function (applicationId)  
 $ listTasks           :function ()  
 $ getTask             :function (taskId)  
 $ killTask            :function (taskId)  
 $ waitForTask         :function (taskId, quiet)  
```



### Repro

1. Create a new application
2. Set the following repo option:

```r
options(repos = c(
  `CRAN` = "https://cran.rstudio.com/",
  `Oregon State University` = "https://ftp.osuosl.org/pub/cran/",
  `University of California, Berkeley` = "https://cran.cnr.berkeley.edu/"
))
```

3. Deploy the application using `deployApp` in the R console

### Observe

Error. Traceback:

```
9.
lapply(X = X, FUN = FUN, ...) 
8.
sapply(repos, "[[", 2) at dependencies.R#71
7.
setNames(sapply(repos, "[[", 2), sapply(repos, "[[", 1)) at dependencies.R#71
6.
snapshotDependencies(appDir, inferDependencies(appMode, hasParameters, 
    python, hasPythonRmd)) at bundle.R#547
5.
createAppManifest(appDir = bundleDir, appMode = appMode, contentCategory = contentCategory, 
    hasParameters = hasParameters, appPrimaryDoc = appPrimaryDoc, 
    assetTypeName = assetTypeName, users = users, python = python, 
    hasPythonRmd = hasPythonRmd) at bundle.R#211
4.
bundleApp(target$appName, appDir, appFiles, appPrimaryDoc, assetTypeName, 
    contentCategory, verbose, python) at deployApp.R#356
3.
force(code) at utils.R#53
2.
withStatus(paste0("Uploading bundle for ", assetTypeName, ": ", 
    application$id), {
    python <- getPythonForTarget(python, accountDetails)
    bundlePath <- bundleApp(target$appName, appDir, appFiles,  ... at deployApp.R#351
1.
rsconnect::deployApp(appName = "shiiiiny", account = "jonathan") 
```

### Expect

App deploys successfully

### Details

Probably happens because we use commas to delimit repos in the lockfile.

https://github.com/rstudio/rsconnect/blob/050a7f7cb533bc1c689a631d64458aabeb23f807/R/dependencies.R#L68-L74
Enable the rsconnect package to sync the dcf deployment files with the server so metadata (like Title) aren't out of date and confusing.

- syncs based on the configuration option `rsconnect.metadata.sync.hours`
- does not update shinyapps or rpubs
- deletes dcf deployment files that don't point to a valid application on the server

Companion PR on RStudio open source will accompany this.
Not sure where this error message is coming from, but it fires during / after the publishing flow in the IDE when using the "default rsconnect server" setting inside RStudio Server Pro.

```
Error in `$<-.data.frame`(`*tmp*`, "config_url", value = "http://ec2-3-135-192-92.us-east-2.compute.amazonaws.com/rsconnect/connect/#/apps/") : 
  replacement has 1 row, data has 0
> packageVersion("rsconnect")
[1] ‘0.8.15.9000.0.0.0.1575505082’
> packageDescription("rsconnect")
Package: rsconnect
Type: Package
Title: Deployment Interface for R Markdown Documents and Shiny
       Applications
Author: JJ Allaire
Maintainer: Jonathan McPherson <jonathan@rstudio.com>
Description: Programmatic deployment interface for 'RPubs',
       'shinyapps.io', and 'RStudio Connect'. Supported content
       types include R Markdown documents, Shiny applications,
       Plumber APIs, plots, and static web content.
Depends: R (>= 3.0.0)
Imports: curl, digest, jsonlite, openssl, packrat (>= 0.4.8-1),
       rstudioapi (>= 0.5), yaml (>= 2.1.5)
Suggests: RCurl, callr, httpuv, knitr, plumber (>= 0.3.2),
       reticulate, rmarkdown (>= 1.1), shiny, sourcetools,
       testthat, xtable
License: GPL-2
RoxygenNote: 6.1.1
Roxygen: list(markdown = TRUE)
URL: https://github.com/rstudio/rsconnect
BugReports: https://github.com/rstudio/rsconnect/issues
Repository: RSPM
RemoteSha: 7dd2453d1b73b30b06e88f7ebc286c6bb39f2645
Version: 0.8.15-9000.0.0.0.1575505082
Date: 2019-12-04
NeedsCompilation: no
Packaged: 2019-12-05 00:20:29 UTC; root
Built: R 3.5.3; ; 2019-12-11 15:13:07 UTC; unix

-- File: /opt/R/3.5.3/lib/R/library/rsconnect/Meta/package.rds 
```
Would it be possible to offer feedback when using a case-preserving, case-insensitive file system and referencing on-disk files using different-case names? For example, we may have an on-disk file named `images/RStudio.svg` and then use it from an R Markdown document with:

```markdown
![](images/rstudio.svg)
```

This renders fine on a macOS system, for example, but will probably err if that same content is rendered on a Linux system. The image reference is non-portable.

File-system differences will cause problems when migrating code from RStudio desktop to RStudio server, for example, or when deploying code to shinyapps.io or RStudio Connect.

Could we attempt to identify these situations?

Note: We sometimes avoid this problem when deploying content, as the filename for detected dependencies uses the case from the Rmd source - and that case is preserved in the deployment bundle.
![image](https://user-images.githubusercontent.com/362187/68310104-727e1900-007d-11ea-8da6-eb8e65399903.png)

The on-disk case is used when dependencies are manually included in a deployment.

It is already possible to provide a `appFileManifest` in `deployApp` to list the files that should be bundle. 

I am often in the case like with `.gitignore` or `.Rbuildignore` : it is easier to tell what we don't want at all instead of listing everything we want. 

I would find it interesting to have a feature like that, a `.rscignore` file that would allow to always exclude some files to be bundled by `rsconnect`. 
This is like `.Rbuildignore` that prevent bundling in R CMD build.

We encountered this need in some scenarios where 
* we have projects that push in RStudio Connect 
* the development is done externally and the code is delivered in a gitlab. when tagged, it should be published in one of the url
* One person of the project in charge of deployment need to publish. This require to recreate the dev env and publish the file. Some files used in development do not need be be published but is is not easy to exclude them. 

Publishing unneeded file is not a problem, but can cause issues because they are scanned for dependencies and can increase the bundle size. 

What do you think ? 

In a way this issue relates to #342 about how to manage bundle files.
We currently use OpenSSL's MD5 algorithm to add content checksums in several places. Generally we use this wrapper:

https://github.com/rstudio/rsconnect/blob/e6a7248acfb76d81e2ffff0837c43c34c70bf959/R/utils.R#L218-L219

However, some systems, most notably RHEL, can be placed into a FIPS compliant mode. The version of OpenSSL on these systems does not include MD5 since it's not considered a secure hash algorithm. Consequently, enabling FIPS mode on these systems removes the content checksums and with them the ability to publish content to Connect.

We should deprecate MD5 as a hash algorithm for content checksums; SHA-256 would be a better choice.

(Internal note: see support ticket 36904)
Hi, 

I was trying to understand where records of deployment are written to. My use case is for internal use to deploy the pkgdown website to RStudio Connect. Currently, the `rsconnect` folder is inside the `docs` folder and not at the root of the package. not an issue per se but I find something odd: 

Doc is saying
> recordDir Directory where publish record is written. Can be NULL in which case record will be written to the location specified with **appDir**.

However, in the code we have
https://github.com/rstudio/rsconnect/blob/b1194acf79acdd1f207c77e898a33b2f380bdc60/R/deployApp.R#L190-L192
where `appPath` can be modified to `appPrimaryDoc` or `appSourceDoc`, so not always `appDir`

Should the documentation be improve or is there something wrong where the record is written ?  

Just for sharing, I use this to have the record file in the root directory
```r
# working directory is package root file
rsconnect::deployApp(
  "docs", # the directory containing the content
  appFiles = list.files("docs", recursive = TRUE), # the list of files to include as dependencies (all of them)
  appPrimaryDoc = "index.html",                 # the primary file
  appSourceDoc = "docs/index.html",                 # the source doc
  recordDir = '.', # folder where to write deployement records
  appName = "appName",                          # name of the endpoint (unique to your account on Connect)
  appTitle = "My app title",                         # display name for the content
  account = "myuser",                # your Connect username
  server = "myconnect.server.com",              # the Connect server, see rsconnect::accounts()
  forceUpdate = TRUE
)
```
Just in case there is something that I missed...
When deploying to Connect with writemanifest for projects depending on the BH library, rsconnect errors, as BH contains more than 10,000 files. Many tidyverse packages depends directly or indirectly on BH, so perhaps a more sensible default is needed.
Thanks 
I am trying to publish a shinyApp with Python3 to shinyApps.io. I added the following code in the app.R file as instructed by the Rstudio community.
`
virtualenv_create('pyDev',python = 'python3')
virtualenv_install("pyDev", packages = c('gensim', 'pandas','numpy','nltk','paramiko'))
reticulate::use_virtualenv("pyDev", required = TRUE)
`
However, when I publish the app, I got the following error:

`
Required version of Python '~/.virtualenvs/pyDev/bin/python' cannot be used because another version of Python ('/usr/bin/python') is already initialized for this process.
`

I can still open the published application, but it will "disconnect from server" whenever it tries to run python codes. I checked the log and the app is actually still running on Python2.7. 