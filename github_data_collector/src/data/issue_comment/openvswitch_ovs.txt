There was no way to initialize the serial number in ofproto.c.
Added it as a configuration parameter "dp-sn"
# Conflicts:
#	appveyor.yml

While checking unit tests with valgrind tool (make check-algrind)  I have 
noticed several memory leaks detected in column parsing functions, 
for example ovsrec_port_parse_interfaces(), ovsrec_bridge_parse_ports(), 
ovsrec_bridge_parse_protocols() as can be seen in the following example report:

.....
==28601== Memcheck, a memory error detector
==28601== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==28601== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==28601== Command: ovs-vsctl --timeout=20 -- add-br br0 -- set bridge br0 datapath-type=dummy fail-mode=secure other-config:datapath-id=fedcba9876543210 other-config:hwaddr=aa:55:aa:55:00:00 protocols=[Op
enFlow10,OpenFlow11,OpenFlow12,\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ OpenFlow13,OpenFlow14,OpenFlow15] -- add-port br0 p0 -- set Interface p0 type=dummy
==28601== Parent PID: 28600
==28601==
==28601==
==28601== HEAP SUMMARY:
==28601==     in use at exit: 18,673 bytes in 154 blocks
==28601==   total heap usage: 6,848 allocs, 6,694 frees, 292,729 bytes allocated
==28601==
==28601== 8 bytes in 1 blocks are definitely lost in loss record 2 of 59
==28601==    at 0x4C2DB8F: malloc (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==28601==    by 0x430B74: xmalloc (util.c:138)
==28601==    by 0x4414F0: ovsrec_port_parse_interfaces (vswitch-idl.c:29174)
==28601==    by 0x41F99E: ovsdb_idl_txn_write__ (ovsdb-idl.c:4488)
==28601==    by 0x45A884: ovsrec_port_set_interfaces (vswitch-idl.c:31033)
==28601==    by 0x40B229: cmd_add_br (ovs-vsctl.c:1227)
==28601==    by 0x406C2E: do_vsctl (ovs-vsctl.c:2626)
==28601==    by 0x406C2E: main (ovs-vsctl.c:183)
==28601==
==28601== 8 bytes in 1 blocks are definitely lost in loss record 3 of 59
==28601==    at 0x4C2DB8F: malloc (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==28601==    by 0x430B74: xmalloc (util.c:138)
==28601==    by 0x4414F0: ovsrec_port_parse_interfaces (vswitch-idl.c:29174)
==28601==    by 0x41F99E: ovsdb_idl_txn_write__ (ovsdb-idl.c:4488)
==28601==    by 0x45A884: ovsrec_port_set_interfaces (vswitch-idl.c:31033)
==28601==    by 0x40A355: add_port (ovs-vsctl.c:1585)
==28601==    by 0x40A6D5: cmd_add_port (ovs-vsctl.c:1616)
==28601==    by 0x406C2E: do_vsctl (ovs-vsctl.c:2626)
==28601==    by 0x406C2E: main (ovs-vsctl.c:183)
==28601==
==28601== 16 bytes in 1 blocks are definitely lost in loss record 11 of 59
==28601==    at 0x4C2DB8F: malloc (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==28601==    by 0x430B74: xmalloc (util.c:138)
==28601==    by 0x440EC0: ovsrec_bridge_parse_ports (vswitch-idl.c:1070)
==28601==    by 0x41F99E: ovsdb_idl_txn_write__ (ovsdb-idl.c:4488)
==28601==    by 0x443654: ovsrec_bridge_set_ports (vswitch-idl.c:2979)
==28601==    by 0x40839B: bridge_insert_port (ovs-vsctl.c:950)
==28601==    by 0x40A3E1: add_port (ovs-vsctl.c:1601)
==28601==    by 0x40A6D5: cmd_add_port (ovs-vsctl.c:1616)
==28601==    by 0x406C2E: do_vsctl (ovs-vsctl.c:2626)
==28601==    by 0x406C2E: main (ovs-vsctl.c:183)
==28601==
==28601== 48 bytes in 1 blocks are definitely lost in loss record 44 of 59
==28601==    at 0x4C2DB8F: malloc (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==28601==    by 0x430B74: xmalloc (util.c:138)
==28601==    by 0x43E326: ovsrec_bridge_parse_protocols (vswitch-idl.c:1085)
==28601==    by 0x41F99E: ovsdb_idl_txn_write__ (ovsdb-idl.c:4488)
==28601==    by 0x40D058: set_column (db-ctl-base.c:1366)
==28601==    by 0x40EDD2: cmd_set (db-ctl-base.c:1418)
==28601==    by 0x406C2E: do_vsctl (ovs-vsctl.c:2626)
==28601==    by 0x406C2E: main (ovs-vsctl.c:183)
.....

After the investigation I have found out the origin of these memory leaks 
lies in the design of column parse/unparse functionality. ovsdb_idl module 
deals with several table classes (AutoAttach, Bridge, Controller,....), 
which are depicted in ovsrec_table_classes instance. Each of entry in this 
instance refers to ovsdb_idl_column instance, what is actually a 
description of certain table class (number of colums, column type, column 
flags, column parse/unparse functions). Column value of certain table row 
is modified by calling calling apparent column parse() function and passing 
datum argument with new data. There exist bunch of different column parse 
functions and some of them (like aforementioned 
ovsrec_port_parse_interfaces(), ovsrec_bridge_parse_ports(), 
ovsrec_bridge_parse_protocols()) dynamically allocates memory. In order not
to leak memory it is important that before calling parse() function
apparent unparse() function is called which frees previously allocated 
memory. Also before the row itself is freed, the apparent unparse() function
should be called. And here is the catch of leaking the memory.

It looks in the past rows were modified in a somehow transnational way. 
First modifications were collected in new_datum array and later on after 
all new data were collected modification/transaction was applied by calling 
ovsdb_idl_row_parse() function with its counterpart ovsdb_idl_row_unparse()
function. At the end, just before the row was deallocated 
ovsdb_idl_row_unparse() function is called as well in order to deallocate 
memory previously allocated in parse() function. The problem was that both
ovsdb_idl_row_parse() and ovsdb_idl_row_unparse() function were guarded by
"ovsdb_idl_row.parsed" flag which was modified at the end for transaction
or cancellation. As a result, unparse() functions were not called in case
transaction was not applied at all. The problem actually started (I don't 
know if this is actually in the original design or not) when fields/column
of table row were modified directly outside of transactions. In this case
appropriate parse() function was called while its counterpart unparse() 
function was not called before row deallocation because 
"ovsdb_idl_row.parsed" was not set.

In aforementioned valgrind example report the problem was in 
cmd_add_port() function:

   ......
   port = ovsrec_port_insert(ctx->txn);
   ovsrec_port_set_name(port, br_name);
   ovsrec_port_set_interfaces(port, &iface, 1);  <= here memory was 
                                                    allocated in parse() 
                                                    function, while 
                                                    "parsed" flag was not set

   br = ovsrec_bridge_insert(ctx->txn);
   ovsrec_bridge_set_name(br, br_name);
   ovsrec_bridge_set_ports(br, &port, 1);        <= the same issue
        ......

At the end, when "port" and "br" rows were deallocated memory allocated 
in parse() functions were not deallocated.

I have overcame this issue by replacing "ovsdb_idl_row.parsed"
guard flag (which implies that all columns/fields were parsed or not)
with "ovsdb_idl_row.parsed_columns" bitmap, which for each individual
column marks if it is parsed or not.

Signed-off-by: damijans <damjan.skvarc@gmail.com>



Even if pmd-rxq-affinity have been set,
the pmd that this interface RX queue map to
will no been isolated, if this value set to true.
'passthrough' expects source network in 'logical_ip' column and destination network in 'external_ip' column.
For the traffic that goes from source to destination 'passthrough' disables NAT by adding a priority-100 flow with a match of 'ip && ip4.src == A && ip4.dst == B' and an action of 'next;'.

Signed-off-by: Rostyslav Fridman <rostyslav_fridman@epam.com>
This patch modifies system-traffic.at at points of some long lines, that results in the patch getting corrupted by gmail by the time it reaches patchwork. Hence, I am submitting as a pull request.


commit 7d8aeabff4253677b8ba889f80f0d2dfabfaa333
Added pkg-config support for libovn and the corresponding modifications
This patch update information for faucet.rst with:
1. Update from "docker build -t faucet/faucet ." to "docker build -t faucet/faucet -f Dockerfile.faucet ." 
Because the Dockerfile name is not standard, so need to pass Dockerfile name. Here are link to Dockerfile, https://github.com/faucetsdn/faucet/blob/master/Dockerfile.faucet.
2. Update the requirement for MAC learning and ARP timeouts.
When ovsdb-server.service is restarted, there's a time window during which clients aren't able to connect to the socket. To cope with this, systemd is able to manage the sockets and pass it to the services. This patch set makes use of the facility.