# Problem
- The CA certs that are bundled with traveling ruby are expired. This is problematic because we can no longer verify certificates in `https` requests.

# Solution
- Mozilla has public Certificate Authorities (CA) available in its source tree: https://hg.mozilla.org/releases/mozilla-release/raw-file/default/security/nss/lib/ckfw/builtins/certdata.txt
- cURL parses this certdata.txt and extracts CA Root Certificates into PEM format, and makes it publicly available on their website
- Every time traveling ruby is released, bundle it with cURL's most up to date ca certs.

# Assumes
- we trust Mozilla and cURL

# Verification that problem exists
```
# taking a look at the cert expiration dates
quins-mbp:shared quin$ openssl x509 -enddate -noout -in ca-bundle.crt
notAfter=Aug 17 22:00:00 2015 GMT
```

How can I build ruby binaries for other arch? for example : mips and arm. Using rvm to build ruby on that machine was succeedï¼Œ docker was available too
How does the packaged binary protect source code?

I am concerned that people will be able to unpack the binary and view the proprietary source code of my application.
When I start rake on linux (centos7 machine) then I get the following error: 


Start: yum update
ERROR: Command failed:
 # ['/usr/bin/yum', '--installroot', '/var/lib/mock/epel-5-x86_64-2.1.6-x86_64/root/', '--releasever', '5', 'install', 'buildsys-build']
Error: Cannot retrieve repository metadata (repomd.xml) for repository: core. Please verify its path and try again
YumRepo Error: All mirror URLs are not using ftp, http[s] or file.
 Eg. Invalid release/repo/arch combination/
removing mirrorlist with no valid mirrors: /var/lib/mock/epel-5-x86_64-2.1.6-x86_64/root/var/cache/yum/core/mirrorlist.txt

rake aborted!
Command failed with status (30): [./setup-runtime -a x86_64 -r 2.1.6 runtime...]
/home/instana/traveling-ruby/linux/Rakefile:67:in `block (3 levels) in <top (required)>'
/home/instana/.gem/ruby/gems/rake-12.3.2/exe/rake:27:in `<top (required)>'
Tasks: TOP => default => package => package:2.1.6:x86_64 => traveling-ruby-20150715-2.1.6-linux-x86_64.tar.gz => output/2.1.6-x86_64/bin => runtime/2.1.6-x86_64/ok
(See full trace by running task with --trace)

When peeking into the yum conf that gets thrown in root, I see that there is a mirrorlist being used that got moved to archive servers. 

Can someone tell me how I can build otherwise?
# cannot execute binary file
Thanks for the useful tool though first

I am following the instruction on the Github page but I got a `cannot execute binary file` on AWS Lambda.
So I try to test on my local and get the same error message. Here is the error
```
/Users/xxx/Documents/lambda_ruby_2/tmp_rumbda/ruby/bin/ruby: line 6: /Users/xxx/Documents/lambda_ruby_2/tmp_rumbda/ruby/bin.real/ruby: cannot execute binary file

/Users/xxx/Documents/lambda_ruby_2/tmp_rumbda/ruby/bin/ruby: line 6: /Users/xxx/Documents/lambda_ruby_2/tmp_rumbda/ruby/bin.real/ruby: Undefined error: 0
```

The above error shows up when I want to run the wrapper.
I went through the bash file and feel like maybe it's because of the binary ruby in `bin.real` folder

I'm testing with the 'Hello World' tutorial (without the rake part), made the package with the [linux x86_64 binary](https://d6r77u77i8pq3.cloudfront.net/releases/traveling-ruby-20141215-2.1.5-linux-x86_64.tar.gz) and run it on VM Ubuntu 17.10.1 64bits and it showed the 'hello world' message.

Before run it on VM OpenBSD 6.3 64bits, I installed bash and copied the bash file from `/usr/local/bin/` to `/bin/` , since the shebang used is `#!/bin/bash`.

However when running, it shows this error message:

![sem titulo](https://user-images.githubusercontent.com/30904875/40976242-6608e7be-68c5-11e8-8a92-8c6abf25ba23.png)

I'm a newbie in linux, so I'm not sure if it's my mistake or if it's not supported because it needs a diferent binary for OpenBSD.
Consolidates issues #91 #90 #84 #74 #59 #46

Traveling Ruby currently supports Ruby 2.1.5 and Ruby 2.2.0 for Linux and OS X. For Windows, only Ruby 2.1.5 is supported. This is because the RubyInstaller project hadn't released Ruby >2.1.5 binaries last time Traveling Ruby saw some work. We're a bit past that 2.1.x point now: https://rubyinstaller.org/

What is the necessary work for getting Native extensions working with Windows? #91
Document building for windows #90
Win32-api giving issue creating packages for Windows #84
windows version supported? #74
Another approach to Windows packaging #59 > which @FooBarWidget agreed might be a good approach
Native extensions support for Windows #46 
This issue consolidates #92 #89 #87 #60 #50 #22

- Update Gem support
-- Support gtk3 gem?
- Bump Bundler version to support newer gems
- Addition to the docs for gem maintainers (#22)

Installing to any directory with spaces in the path failed because of `GEM_HOME` and `GEM_PATH` having not enough quotes around them and ruby failing to parse the options from `RUBYOPT` when the `-r` option had spaces in it.

Fixed this by adding the necessary escapes to add doublequotes around the env variables and moved `restore_environment.rb` to the `lib/ruby/site_ruby/` folder, which is in the ruby load path, so the `-r` option doesn't need to reference the full absolute path.

Fixes #38.
As a starting step, I need to get the gem dependency `unf_ext` working with traveling ruby, what kind of things would I need to change. I can do the work, just would appreciate some guidance. Thanks. 