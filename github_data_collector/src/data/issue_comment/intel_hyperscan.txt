Add aarch64 platform branch, which is fully compatible with armv8-a, and at the same time ensure that the use of x86 platform is not affected.

The modification can be divided into the following aspects :
(1) CMakeLists.txt: add branches to judge x86 and aaarch64 platforms.
(2) simd_arm.h: Use the neon instruction to implement 128 operation functions.
(3) simd_x86.h: Save the original simd_utils.h file contents.
(4) simd_utils.h: Select different header files (simd_x86.h or simd_arm.h) according to the platform judgment results.
(5) Intrinsic function: There are multiple calls to the intrinsic function in the code, and the intrinsic function is encapsulated in the modification.
(6) control_verbs.cpp / ExpressionParser.cpp / control_verbs.cpp / Parser.cpp: There are errors in generating these four files under the aarch64 platform. So the files are generated on the x86 platform and copied to the corresponding directory for use. Does not affect the functionality of the x86 platform.

On the basis of support the aarch64 platform, we also carried out a large performance optimization. The optimization effect also improved the performance of hyperscan on the x86 platform. The currently submitted PR is a successful migration version, and we expect to submit a performance version later.


There seems to be an error in `db_check_platform` function. When database is compiled on machine with AVX2, but without AVX512, database platform features bitmask equals to `HS_PLATFORM_NOAVX512`. As this is equal to `hs_current_platform_no_avx512` constant, such a database passes  `db_check_platform` check on any machine, including ones without AVX2 support.

Pull request fixes this error.
If I were to change the scratch size in alloc_scratch() in scratch.c and compile the library, would it have any impact on performance?
As mentioned in the introduction video of Hyperscan, "https://www.usenix.org/conference/nsdi19/presentation/wang-xiang". Hyperscan has been integrated into 37 open source projects. What are these open source projects? Hope to get an answer, thank you very much.
Is free-spacing support in the roadmap per chance?
hs_compile_lit_multi crashes in strlen when compiled with clang and ASAN on hyperscan 5.2.0

Unless I'm mistaken, hs_compile_lit_multi can take arbitrary byte arrays which can have a zero byte in the middle or not have any zero bytes at all. So it seems like it should use expLength instead of strlen in addLitExpression.

Minimal repro:

```
void                                                                            
strlen_crash(void)                                                              
{                                                                               
    uint8_t buf[4] = {'a', 'b', 'c', 'd'};                                      
    const char *const exprs[1] = { [0] = (char *)buf };                         
    size_t expr_lens[1] = { [0] = 4};                                           
    unsigned int flags[1] = { [0] = HS_FLAG_SOM_LEFTMOST};                      
    unsigned int ids[1] = { [0] = 0 };                                          
    struct hs_database *hs_db = NULL;                                           
    hs_error_t hs_rc;                                                           
    hs_compile_error_t *hs_err = NULL;                                          
                                                                                
    hs_rc = hs_compile_lit_multi(exprs,                                         
                                 flags,                                         
                                 ids,                                           
                                 expr_lens,                                     
                                 1,                                             
                                 HS_MODE_STREAM | HS_MODE_SOM_HORIZON_SMALL,    
                                 NULL,                                          
                                 &hs_db, &hs_err);                              
    assert(hs_rc == HS_SUCCESS);                                                
}
```

```
==23178==ERROR: AddressSanitizer: stack-buffer-overflow on address 0x7ffcc3493084 at pc 0x00000042fd3f bp 0x7ffcc34926f0 sp 0x7ffcc3491e98
READ of size 5 at 0x7ffcc3493084 thread T0                       
    #0 0x42fd3e in __interceptor_strlen /var/tmp/portage/sys-libs/compiler-rt-sanitizers-8.0.1/work/compiler-rt-8.0.1.src/lib/asan/../sanitizer_common/sanitizer_common_interceptor
s.inc:366:5                                                      
    #1 0x7f22ed7d02dc in ue2::addLitExpression(ue2::NG&, unsigned int, char const*, unsigned int, hs_expr_ext const*, unsigned int, unsigned long) (/usr/lib64/libhs.so.5+0x1482dc)
    #2 0x7f22ed7cb99c in ue2::hs_compile_lit_multi_int(char const* const*, unsigned int const*, unsigned int const*, hs_expr_ext const* const*, unsigned long const*, unsigned int,
 unsigned int, hs_platform_info const*, hs_database**, hs_compile_error**, ue2::Grey const&) (/usr/lib64/libhs.so.5+0x14399c)
    #3 0x7f22ed7cc540 in hs_compile_lit_multi (/usr/lib64/libhs.so.5+0x144540)
    #4 0x4f84ea in strlen_crash <redacted>
    #5 0x4f84ea in <redacted>
    #6 0x4f7c5e in run_test_from_files <redacted>
    #7 0x4f77a9 in main <redacted>
    #8 0x7f22ece6de5a in __libc_start_main (/lib64/libc.so.6+0x23e5a)
    #9 0x41c709 in _start (<redacted>)
                             
Address 0x7ffcc3493084 is located in stack of thread T0 at offset 132 in frame
    #0 0x4f825f in <redacted>
                             
  This frame has 11 object(s):
    [32, 40) 'stream.i' (line 346)
    [64, 72) 'scratch.i' (line 347)
    [96, 104) 'hs_err.i18' (line 85)
    [128, 132) 'buf.i' (line 487) <== Memory access at offset 132 overflows this variable
    [144, 152) 'exprs.i' (line 488)
    [176, 184) 'expr_lens.i' (line 489)
    [208, 212) 'flags.i' (line 490)
    [224, 228) 'ids.i' (line 491)
    [240, 248) 'hs_db.i' (line 492)
    [272, 280) 'hs_err.i' (line 494)
HINT: this may be a false positive if your program uses some custom stack unwind mechanism, swapcontext or vfork                                                                   
      (longjmp and C++ exceptions *are* supported)                                                                                                                                 
SUMMARY: AddressSanitizer: stack-buffer-overflow /var/tmp/portage/sys-libs/compiler-rt-sanitizers-8.0.1/work/compiler-rt-8.0.1.src/lib/asan/../sanitizer_common/sanitizer_common_i$
terceptors.inc:366:5 in __interceptor_strlen
Shadow bytes around the buggy address:
  0x10001868a5c0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x10001868a5d0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x10001868a5e0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x10001868a5f0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x10001868a600: f1 f1 f1 f1 f8 f2 f2 f2 f8 f2 f2 f2 f8 f2 f2 f2
=>0x10001868a610:[04]f2 00 f2 f2 f2 00 f2 f2 f2 04 f2 04 f2 00 f2
  0x10001868a620: f2 f2 00 f2 f2 f2 00 00 00 00 00 00 00 00 00 00
  0x10001868a630: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x10001868a640: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x10001868a650: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x10001868a660: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
Shadow byte legend (one shadow byte represents 8 application bytes):
  Addressable:           00
  Partially addressable: 01 02 03 04 05 06 07
  Heap left redzone:       fa
  Freed heap region:       fd
  Stack left redzone:      f1
  Stack mid redzone:       f2
  Stack right redzone:     f3
  Stack after return:      f5
  Stack use after scope:   f8
  Global redzone:          f9
  Global init order:       f6
  Poisoned by user:        f7
  Container overflow:      fc
  Array cookie:            ac
  Intra object redzone:    bb
  ASan internal:           fe
  Left alloca redzone:     ca
  Right alloca redzone:    cb
  Shadow gap:              cc
==23178==ABORTING
```

```
void addLitExpression(NG &ng, unsigned index, const char *expression,           
                      unsigned flags, const hs_expr_ext *ext, ReportID id,      
                      size_t expLength) {                                       
...                
    if (strlen(expression) > cc.grey.limitPatternLength) {                      
        throw CompileError("Pattern length exceeds limit.");                    
    }
```
Would Hyperscan patch for Snort 2.9.9.0 work for 2.9.15? I have successfully applied the patch on 2.9.9.0 but it's gonna be obsolete by new year and there is no patch available for 2.9.15.
This is a proposition to add two fuzz targets to be used with libfuzzer or other tools, especially for continuous fuzzing such as oss-fuzz cf https://github.com/google/oss-fuzz/pull/2990

What do you think of it ?
Hi there 

According the hyperscan website hyperscan follows the regular expression syntax of the PCRE library. The regex `\N\.rocks` is causing an error in rspamd which is using hyperscan. 

The regex `\N\.rocks` is PCRE compliant according to several check in documentation:
Match any single character that is NOT a line break character (line feed) «\N»
Match the character “.” literally «.»
Match the character string “rocks” literally (case sensitive) «rocks»

But I still get the following error with that RE:
`cannot create tree of regexp when processing '\\N\\.rocks': '\\N' at index 0 not supported.`

Can anyone help with getting the proper syntax for this RE? 

Thanks in advance
Hi hyperscan team,

I'm an newbee for hyperscan project. I'm so excited to have a conversation with you.

We have a plan to make hyperscan to support ARM64 function. And we will propose a series of PRs to make this happen, including hardware platform logical judgement code ,ARM NEON instruction set support and etc.. We won't propose intrusive changes to existing code. Now the detailed design are still uncertain, just a draft. Hope community can take part in the detailed feature design at the beginning.

But before the whole work begins, we want to know community attitude about this. We hope the kind feedback from your side.

Thanks very much.