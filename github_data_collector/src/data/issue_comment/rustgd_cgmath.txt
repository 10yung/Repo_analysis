I'm implementing skeletal animation and there were glitches for a very short time. After some debugging, it seems that a call to `slerp` gives different results:

```rs
use cgmath::Quaternion;

fn main() {
    let a = Quaternion::<f32>::new(0.00052311074, 0.9999999, 0.00014682197, -0.000016342687);
    let b = Quaternion::<f32>::new(0.019973433, -0.99980056, -0.00015678025, 0.000013882192);

    println!("{:?}", a.slerp(b, 0.5));
}
```

This prints:

```
Quaternion { s: 1.0001583, v: Vector3 [0.009726516, -0.0004859287, -0.000120063356] }
```

I've tried the same quaternions with gl-matrix:

```
const a = quat.fromValues(0.9999999, 0.00014682197, -0.000016342687, 0.00052311074);
const b = quat.fromValues(-0.99980056, -0.00015678025, 0.000013882192, 0.019973433);

const r = quat.create();
quat.slerp(r, a, b, 0.5);
console.log(r);
```

And this prints (the scalar part is the last component here):

```
Float32Array(4)Â [0.9999527335166931, 0.00015180908667389303, -0.000015113232620933559, -0.009725671261548996]
```
Would it be possible to add a trait to downcast `&[Vector<T>]` to `&[[T; N]]` and `&[T]` ?
I work with buffers of vectors, and I need to pass them to other libraries, that are using `&[T]` for compatibility. For now I only copy it element by element, but I think that copy could be avoided with a simple reference cast.

For example, something like that 
```rust
impl Into<&[T]> for &[Vector3<T>] {
    fn into(self) -> &[T] {
         unsafe { std::slice::from_raw_parts(self.as_ptr() as *const [T], self.len() * 3) }
    }
}
```
and maybe also the inverse
```rust
impl Into<&[Vector<T>]> for &[T] {
    fn into(self) -> &[Vector<T>] {
         assert_eq!(self.len() % 3, 0);
         unsafe { std::slice::from_raw_parts(self.as_ptr() as *const [Vector3<T>], self.len() / 3) }
    }
}
```

I think it's possible because the `Vector` struct is marked `repr(C)` and its fields are all of the same type (so there is no alignment concerns). Plus all slices are contiguous data storages
This kind of cast would get it much more simple to get from a buffer type to an other. (slices, vec, ndarray, with grouped components or not).

This is possibly more of a question. Would it be of any interest to the users of cgmath to have more fine grained trait bounds on methods from std::ops to eliminate the need to add BaseNum or BaseFloat trait bounds into generic code in libraries that use cgmath? The motivation here is that it may perhaps be easier to swap in/out cgmath in libraries without modifying the trait bounds on all generic code. I know this may be a moot point at this moment, but seeing as cgmath aims to be one of the simpler and more light-weight matrix libs this might make sense here.
Hello,
The current cgmath version in crates.io (0.17.0) depends on rand 0.6, but I see that the current version in the repository depends in rand 0.7 since august, which would be nice to have to avoid having projects depending on both rand 0.6 and 0.7. It's not a breaking change afaik, so it would probably be a 0.17.1 version, right?
I found that cgmath has optional support for simd, which does not compile since Rust 1.33 and is deprecated in favor of packed_simd (see https://crates.io/crates/simd)

From what I can see, packed_simd is significantly different from simd, so migrating may be a tremendous effort. Has anyone looked into this? Is it feasible at all?
These methods are quite useful whenever you have to make sure that a value stays inside a specified range. Although there is `f32::clamp` and `f64::clamp` these are not stabilized yet so it would be nice to have them inside `cgmath`.

`wraparound` should have a signature like this:
```rust
fn wraparound<S>(x: S, min: S, max: S) -> S
```

See also https://stackoverflow.com/questions/4633177/c-how-to-wrap-a-float-to-the-interval-pi-pi#
Does it make sense to add a `zip` function to array-like types? Doing so will make it less error-prone to do custom element wise operations:

```rust
/// Compute the element wise minimum. If any of the elements are incomparable,
/// the element from v2 is returned.
fn vec3_ew_min<T: PartialOrd>(v1: Vector3<T>, v2: Vector3<T>) -> Vector3<T> {
    Vector3::zip(v1, v2, |a, b| if a < b { a } else { b })
}
```

## Motivation 
I tried to write a simple axis aligned bounding box data structure today which requires keeping track of the min_x, max_x, min_y, etc. I figured I'd use a `Point3` for the min and max values but couldn't find a nice way to compute the element wise minimum and maximum. We could consider adding those to the ElementWise trait but since floating-point values aren't `Ord` we would have to make choices that are best left for the library consumers to make. Having `zip` would be fairly natural seeing that `map` is already there.

## Implementation
In its simplest form we would add: 

```rust
impl<S> Vector3<S> {
    fn zip<U, F>(self, v2: Self, f: F) -> Vector3<U> where F: Fn(S, S) -> U {
        Vector3 {
           x: f(self.x, v2.x),
           y: f(self.y, v2.y),
           z: f(self.z, v2.z),
        }
    }
}
```

It is possible to have v2 be a different type but I have a feeling there aren't many use cases for that.

Additionally I'd like to see a three-way-merge (zipzip?) and fold1 (fold/reduce without initial value) implemented. Writing other operations like the element sum, element product, the dot product becomes quite easy. However, since these methods are generated from macros it would probably introduce unnecessary compiler work.

```rust
impl<S> Vector3<S> {
    fn zipzip<U, F>(self, v2: Self, v3: Self, f: F) -> Vector3<U>
    where
        F: Fn(S, S, S) -> U,
    {
        Vector3 {
            x: f(self.x, v2.x, v3.x),
            y: f(self.y, v2.y, v3.y),
            z: f(self.z, v2.z, v3.z),
        }
    }
}

fn vec3_ew_clamp<T: PartialOrd>(v: Vector3<T>, min: Vector3<T>, max: Vector3<T>) -> Vector3<T> {
    Vector3::zipzip(v, min, max, |s, min, max| {
        if s < min {
            min
        } else if s > max {
            max
        } else {
            s
        }
    })
}
```

It is also possible to generalize these functions into traits which I've experimented [here](https://play.rust-lang.org/?version=stable&mode=release&edition=2018&gist=b90d3186e6adeaf64e0dffe3efb6e9b6), but perhaps that is going too far.


If I'm treating `Matrix3` as a homogeneous matrix for 2D coordinates, the equivalent of `Matrix4`'s `from_translation` is missing.
Taking the element-wise absolute value of a vector is a pretty common operation in GLSL. It would be lovely to have an `abs_element_wise()`.

Maybe also a `.abs()` added to `VectorSpace` for consistency with numeric types.
porting simple function from nalgebra:

```rust
let scale: isize = 2 * normal.0.dot(&self.0);
```

fails with:

```
error[E0599]: no method named `dot` found for type `cgmath::vector::Vector3<isize>` in the current scope
  --> src/vel.rs:26:41
   |
26 |         let scale: isize = 2 * normal.0.dot(&self.0);
   |                                         ^^^
   |
   = note: the method `dot` exists but the following trait bounds were not satisfied:
           `cgmath::vector::Vector3<isize> : cgmath::structure::InnerSpace`
```

Is there a reason why I can't take the dot product of isize vectors? (which is defined and mathematically sensible)

Or am I missing something and need to import something?