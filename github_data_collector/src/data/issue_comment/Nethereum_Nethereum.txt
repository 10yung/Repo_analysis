Currently our Nethereum library detects a functionABI using the keyword "constant":

![image](https://user-images.githubusercontent.com/28551011/72411213-6614eb80-37a5-11ea-97f9-dfdb20fbc32a.png)

With Solidity 0.6.0, ABIs generated will no longer have the "constant" keyword, but is replaced with stateMutability = "view":

> [{"inputs":[{"internalType":"string","name":"_a","type":"string"}],"stateMutability":"nonpayable","type":"constructor"},{"inputs":[{"internalType":"uint256","name":"_number","type":"uint256"}],"name":"giveMeNumber","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],**"stateMutability":"view"**,"type":"function"},{"inputs":[{"internalType":"uint256","name":"_number","type":"uint256"}],"name":"giveMeString","outputs":[{"internalType":"string","name":"someString","type":"string"}],**"stateMutability":"view"**,"type":"function"},{"inputs":[],"name":"myNumber","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],**"stateMutability":"view"**,"type":"function"},{"inputs":[{"internalType":"uint256","name":"test","type":"uint256"}],"name":"sendMeMoney","outputs":[],"stateMutability":"payable","type":"function"},{"inputs":[],"name":"someString","outputs":[{"internalType":"string","name":"","type":"string"}],**"stateMutability"**:"view","type":"function"}]


## Current Behavior
Attempting to deploy (also to interact with) a contract >=0.6.0 will return an error:
![image](https://user-images.githubusercontent.com/28551011/72412208-c4db6480-37a7-11ea-9653-6fe538a9f4dd.png)



## Possible Solution
We might want to look into supporting both constant (for backwards compatibility) and stateMutability when looking up FunctionABI. I believe also the payable flag changed on the ABI too, where for example `"payable":false` is deprecated in favour of `"stateMutability":"nonpayable"`
Hi.
I'm a beginner coin developer.
for use Nethereum need to install ethereum core?
Best Regards.
I've got a solidity method that returns address: 

       `      
       function getAssetBuyer() public view returns(address) 
       {
            return buyerAddress;
       }
     `

The call from c# (Nethereum) is :

    `
        public async Task<string> getBuyerAddress() //get the address of the buyer which included in the deal
        {
            var getAssetBuyerFunction = deployedContractIsntance.GetFunction("getAssetBuyer");
            var assetBuyerAddress = await getAssetBuyerFunction.CallAsync<string>();
            return assetBuyerAddress;
        }

But the output is incorrect, Nethereum return string in lower case letters:
Instead of:   0x9Bd6dc66e611Ae28344D52C4CF6167C98A1Aac43
I get: 0x9bd6dc66e611ae28344d52c4cf6167c98a1aac43

Remix at testnet returns 0x9Bd6dc66e611Ae28344D52C4CF6167C98A1Aac43 (correct)
    `
For anyone trying to crawl the chain and get the initial genesis, it  will simplify adding the genesis to Nethereum for information as probably Genesis Transactions like Etherscan does.  
https://github.com/ethereum/ethereumj/blob/develop/ethereumj-core/src/main/resources/genesis/frontier.json
### Detailed Description
In my .Net Core 2.2 project, I have created an API to check eth balance using Nethereum. Each API call will open a new TCP connection to RPC and doesnt dispose it after. In linux, it will generate too many close_wait connection then eventually crash due to error of **Too many open files in system** 

![image](https://user-images.githubusercontent.com/58496109/70106657-3390b280-167f-11ea-856d-bd04213d0eb4.png)

```
ERROR 32 Microsoft.AspNetCore.Server.Kestrel - Connection id "0HLRNQKQ9FLGR", Request id "0HLRNQKQ9FLGR:00000001": An unhandled exception was thrown by the application.
Nethereum.JsonRpc.Client.RpcClientUnknownException: Error occurred when trying to send rpc requests(s) ---> System.Net.Http.HttpRequestException: Too many open files in system ---> System.Net.Sockets.SocketException: Too many open files in system
   at System.Net.Sockets.Socket..ctor(AddressFamily addressFamily, SocketType socketType, ProtocolType protocolType)
   at System.Net.Sockets.DualSocketMultipleConnectAsync..ctor(SocketType socketType, ProtocolType protocolType)
   at System.Net.Sockets.Socket.ConnectAsync(SocketType socketType, ProtocolType protocolType, SocketAsyncEventArgs e)
   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)
```

### Screenshots 


### Current Behavior

![image](https://user-images.githubusercontent.com/58496109/70107092-8a4abc00-1680-11ea-97c6-be011a4b2740.png)


This will open a new connection each time but doesnt terminate or dispose it after.

### Expected Behavior
Should dispose and terminate the web3 connection

### Possible Solution
Allow to dispose the web3




Issue tracker is **ONLY** used for reporting bugs. New features, questions and support should be discussed on our gitter channel first. [Gitter](https://gitter.im/Nethereum/Nethereum)

## Current Behavior
When the JSON RPC payload size return from Ethereum is mulitplies of 512, we will get this exception below.

`
Nethereum.JsonRpc.Client.RpcClientUnknownException: Error occurred when trying to web socket requests(s) ---> Nethereum.JsonRpc.Client.RpcClientTimeoutException: Rpc timeout after 20000 milliseconds ---> System.Threading.Tasks.TaskCanceledException: The operation was canceled. ---> System.IO.IOException: Unable to read data from the transport connection: The I/O operation has been aborted because of either a thread exit or an application request. ---> System.Net.Sockets.SocketException: The I/O operation has been aborted because of either a thread exit or an application request
   --- End of inner exception stack trace ---
   at System.Net.Sockets.Socket.AwaitableSocketAsyncEventArgs.ThrowException(SocketError error)
   at System.Net.Sockets.Socket.AwaitableSocketAsyncEventArgs.GetResult(Int16 token)
   at System.Net.Security.SslStreamInternal.<FillBufferAsync>g__InternalFillBufferAsync|38_0[TReadAdapter](TReadAdapter adap, ValueTask`1 task, Int32 min, Int32 initial)
   at System.Net.Security.SslStreamInternal.ReadAsyncInternal[TReadAdapter](TReadAdapter adapter, Memory`1 buffer)
   at System.Net.Http.HttpConnection.ReadBufferedAsyncCore(Memory`1 destination)
   at System.Net.Http.HttpConnection.RawConnectionStream.ReadAsync(Memory`1 buffer, CancellationToken cancellationToken)
   --- End of inner exception stack trace ---
   at System.Net.Http.HttpConnection.RawConnectionStream.ReadAsync(Memory`1 buffer, CancellationToken cancellationToken)
   at System.Net.WebSockets.ManagedWebSocket.EnsureBufferContainsAsync(Int32 minimumRequiredBytes, CancellationToken cancellationToken, Boolean throwOnPrematureClosure)
   at System.Net.WebSockets.ManagedWebSocket.         Private[TWebSocketReceiveResultGetter,TWebSocketReceiveResult](Memory`1 payloadBuffer, CancellationToken cancellationToken, TWebSocketReceiveResultGetter resultGetter)
   at Nethereum.JsonRpc.WebSocketClient.WebSocketClient.ReceiveBufferedResponseAsync(ClientWebSocket client, Byte[] buffer)
   --- End of inner exception stack trace ---
   at Nethereum.JsonRpc.WebSocketClient.WebSocketClient.ReceiveBufferedResponseAsync(ClientWebSocket client, Byte[] buffer)
   at Nethereum.JsonRpc.WebSocketClient.WebSocketClient.ReceiveFullResponseAsync(ClientWebSocket client)
   at Nethereum.JsonRpc.WebSocketClient.WebSocketClient.SendAsync(RpcRequestMessage request, String route)
   --- End of inner exception stack trace ---
   at Nethereum.JsonRpc.WebSocketClient.WebSocketClient.SendAsync(RpcRequestMessage request, String route)
   at Nethereum.JsonRpc.Client.ClientBase.SendInnerRequestAsync[T](RpcRequestMessage reqMsg, String route)
   at Nethereum.JsonRpc.Client.ClientBase.SendInnerRequestAsync[T](RpcRequest request, String route)
   at Nethereum.JsonRpc.Client.ClientBase.SendRequestAsync[T](RpcRequest request, String route)
`

We suspect this code will make additional read call which cause this RpcClientTimeoutException  eventually.  The variable  bytesRead will be 512 in this situation.

https://github.com/Nethereum/Nethereum/blob/master/src/Nethereum.JsonRpc.WebSocketClient/WebSocketClient.cs

                if (lastByte == 10 || bytesRead < 512)  //return signalled with a line feed / or just less than the full message
                {
                    bytesRead = 0;
                }
                else
                {
                    bytesRead = await ReceiveBufferedResponseAsync(client, buffer).ConfigureAwait(false);
                }


## Possible Solution
WebSocketReceiveResult.EndOfMessage can help us to check if the message is well received or we shall take additional read call to get left message from server. 
https://docs.microsoft.com/en-us/dotnet/api/system.net.websockets.websocketreceiveresult.endofmessage?view=netframework-4.8#System_Net_WebSockets_WebSocketReceiveResult_EndOfMessage

We can make ReceiveBufferedResponseAsync to return WebSocketReceiveResult object directly. 

            do
            {
                receiveResult = await ReceiveBufferedResponseAsync(client, buffer).ConfigureAwait(false);
                if (receiveResult.Count > 0)
                {
                    memoryStream.Write(buffer, 0, receiveResult.Count);
                }

            } while (receiveResult.EndOfMessage == false);



I am trying to transfer ether to a contract and from contract to another account. 
So far I succeded to run the solidity code in Remix using javascript VM and injected web3 (contract deployed on Remix+Metamask too).
I succeded to send ether to the contract using Nethereum, but when it comes to triggering the transfer function in Nethereum -> it`s not working (nothing happen). 
Here is the Solidity code :

    `pragma solidity ^0.5.11;
    contract MyFirstContract
    {
        function() external payable { }
            function getBalance() public view returns(uint)
            {
                return address(this).balance;
            }
            
        function send(address payable _to, uint256 _value) public returns (bool) 
        {
           require(_value <= address(this).balance);
           _to.transfer(_value);
           return true;
        }
    } `

And Nethereum code (Infura -Ropsten):

                   `var contractAddress = "0xEf0cFd55488895E63cA368D989405ab348F1BBd7";
                    var transactionHash =    0x14b5678436c492ab468e67ca5ec8356deee566017b1d158491fa92cc35e0b80";
                    var contractABI = @"[ { ... ]";
                    var senderAddressTest = acc.AccountAddress;
                    var recipientAddressTest = "0x7988dfD8E9ceCb888C1AeA7Cb416D44C6160Ef80";
                    var senderPrivateKeyTest = acc.AccountPassword;
                    var accountTest = new Nethereum.Web3.Accounts.Account( senderPrivateKeyTest );
                    var web3Test = new Web3(accountTest , acc.AccountNetwork + "" + acc.InfuraApiKey);
                    var contractTest = web3Test.Eth.GetContract(contractABI, contractAddress);
                    var transaction = await web3Test.Eth.GetEtherTransferService().TransferEtherAndWaitForReceiptAsync(contractAddress, 2.00m, 2, new BigInteger(25000)); //=> This function sends ether to the contract, It worked and confirmed on ropsten.etherscan.io
                    var function = contractTest.GetFunction("send");
                    var wie = 2000000000000000000; // => the ether I want to send from the smart contract for example
                    object[] parameters = new object[2] { recipientAddressTest, wie };
                    var result = await function.CallAsync<bool>(parameters); //==>***
                    //***=> I guess this line initiates the send function, it work on Remix, 
                    //***=>but not in Nethereum. However, the result is true (strange...) 
                    //***=>and recipientAddressTest  doesn`t get ether, etherscan didn`t update too
 
                   `



Is it possible to deploy a smart contract in Nethereum using Infura?
I know we cannot use web3.Personal.UnlockAccount.SendRequestAsync because Infura doesn`t hold private keys, but Nethereum allow us to use their Account object =>

( var account = new Account(privateKey) ).

In addition, the command await web3.Miner.Start.SendRequestAsync(6) doesn`t compiled because Miner doesnt exist...

Haim

**WARNING - this PR depends (in part) on 3 previous PR's (585, 586, 587) which are primarily subscription based fixes and unit tests.**

Before these changes, the existing RPC integration tests can not be run easily or reliably.  They depended on data only present on specific local test nets.  Some tests were failing as they were out of date with current clients.

The aim was to to run this suite of tests against different clients, local or hosted, and to be more consistent with other integration tests in Nethereum.   This will allow the tests to be run in CI against geth and parity and therefore raise problems related to new client versions.  

Different RPC tests are more suited to one test net than another.   To avoid heavy duty test data setup routines, which are likely to be fragile, most tests now use a hosted test net to provide data (particularly for subscription tests).  Efforts have been made to reference as little static data as possible to ease future maintenance.   Some tests target the local test net as hosted test nets do not support all RPC methods.  A few tests target mainnet to provide known reliable data.

# Environmental Variable Based Client Configuration
Test settings are driven by the ETHEREUM_CLIENT environmental variable (e.g. geth, parity).  This is the same variable the Ethereum Client Integration Fixture references.  

**NOTE:** Whilst running tests in Visual Studio on Windows 10 - the ETHEREUM_CLIENT environmental variable, which I had set via "setx" in the command line was not being picked up.  I added a class and a setup step to ensure user environmental variables which are user targeted or stored in the launchSettings.json file are loaded. 

## TestSettingsCategory
Each unit test defines a test settings category. 
+ localTestNet
+ hostedTestNet
+ live

**The combination of the current client and category determines the settings at run time.**

# Current Configuration (via test-Settings.json)
## *WHEN ETHEREUM_CLIENT = is geth*
 + localTestNet = geth via Ethereum Client Test Fixture
 + hostedTestNet = geth via Infura against Rinkeby
 + live = infura against mainnet
## *WHEN ETHEREUM_CLIENT = is parity*
 + localTestNet = parity via Ethereum Client Test Fixture
 + hostedTestNet = parity via Infura against Ropsten
 + live = infura against mainnet



New integration tests for reactive and event based subscriptions.  They target rinkeby as they require a source of frequent blockchain data which is faster than live.

Test settings configuration has changed in this PR to support the subscription tests, BUT it is only a transitional change.  MVP is you like.  A forthcoming PR applies configuration changes for all RPC integration tests and allows the same suite of tests to be run against different client (i.e. geth and parity) based upon the ETHEREUM_CLIENT environmental variable.