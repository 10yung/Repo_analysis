

Hello everyone,

at first glance, the following code should not compile (in this example, the author forgot to call .toString() on the class instance):

```
class Test {
    override fun toString(): String = "Hello"
}

Test() shouldBe "Hello"
```

However, not only does it compile, it produces the output `Exception in thread "main" org.opentest4j.AssertionFailedError: expected: "Hello" but was: Hello`, which is very confusing.

The reason this happens is that the signature for `io.kotlintest.shouldBe` is `infix fun <T, U : T> T.shouldBe(any: U?)`, and the compiler infers T to be Any, which allows it to compile, and then the toString() method is called when generating the exception message. But this is clearly not the intended behavior. I asked about this [in the Kotlin forums](https://discuss.kotlinlang.org/t/incorrect-type-check-when-using-shouldbe-on-class-with-overloaded-tostring-method/15447/5).

I recently stumbled on a solution: add the @OnlyInputTypes annotation to the type parameter T in the signature of `shouldBe`, which prevents the compiler from raising the type to Any. This annotation is internal, but [there is a way to make it work](https://youtrack.jetbrains.com/issue/KT-13198#focus=streamItem-27-1649043.0-0) (basically by copy-pasting it).

It doesn't seem like that much work to implement this in the various functions in KotlinTest and I wanted to get the teams opinion on this - do you consider it the right thing to do and would you be open to accepting a pull request?

Thanks!

Edit: Just noticed that according to the YouTrack ticket, the annotation is scheduled to be made public in 1.4. If that's the case, it would probably be worth postponing the implementation until then.
Add matchers from konform integration to matchers.md documentation
Occasionally, I have to assert value-equality of Java class instances that do not implement `equals()` with kotlintest (also see [this](https://stackoverflow.com/questions/12147297/how-do-i-assert-equality-on-two-classes-without-an-equals-method)). For these cases, it would be nice to have a matcher that iterates over all fields via reflection (recursively) and asserts value equality for each.
This function repeatedly invoke the given code block till it fails with either AssertionError or any other given exception until the max retry limit or max duration limit is reached.
Klock is an [MPP Kotlin Library](https://github.com/korlibs/klock) to handle Date and Time in a MPP fashion.

We should add some matchers to their types, similar to the ones we have for `java.time`
Working on the latest snapshot version, the new property based testing code does not appear to include Gen.list which could be used to create a list of values.

Is there another way to generate a list of values which in turn are generated from one of the arbitrary generator functions i.e. generate a list of random size of random integers?
Which generators are available? How to use them?

We should have more samples on how to use and implement gens, and an exhaustive list on all the gens we have available (similar to the list we have for matchers)
We have suspend and non suspend.
Let's consider inline, see what performance it has.