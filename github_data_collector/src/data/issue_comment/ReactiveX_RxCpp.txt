I am curious about an optimization problem
When a stream is not used directly, will it be compressed to the next stream?

This problem comes from the following code

observable<MessagePtr> getMessage$()
{
    return m_clientChanged$.get_observable ().scan (observable<Message>()
            , [] (observable<MessagePtr> sendMessage$
                , std::pair<Client, bool> client)
    {
        if (client.second)
        {
            sendMessage$ = sendMessage$.merge (client.first->getMessage$ ());
        }
        else
        {
            sendMessage$ = sendMessage$.filter ([ = ] (MessagePtr message)
            {
                return message->getMessage ()->getTo () == client.first->getServer ();
            });
        }
        return sendMessage$;
    }).switch_on_next();
}

I worry that this code will cause more and more nesting of merge and filter due to the increase of time, causing performance problems
I have the following code:

```
std::cout << "start" << std::endl;
std::vector<uint8_t> in{....};  //24 items
auto obs = rxcpp::observable<>::iterate(in);
obs.window(12)
   .map([](rxcpp::observable<uint8_t> w) {
     return w.reduce(
       std::vector<uint8_t> {},
       [](auto v, auto b) {v.push_back(b);return v; },
       [](auto v) { return v; })
   .map([](auto v) { 
      std::cout << "a " << v.size() << std::endl;
      return std::vector(v.begin(), std::next(v.begin(),6));
   })
   .as_dynamic();
})
.merge()
.subscribe(
   [](auto v) { std::cout << "b: " << v.size() << std::endl; },
   [](std::exception_ptr ep) { std::cout << "c: " << rxcpp::rxu::what(ep) << std::endl; },
   []() { std::cout << "d:" << std::endl; });
std::cout << "end" << std::endl;
```

What I expected to see:

```
start
a: 12
b: 6
a: 12
b: 6
d:
end
```

What I do see is:

```
start
a 12
b: 6
a 12
b: 6
a 0
```

and then a segmentation fault on the `std::next(v.begin(),6)` part.

If I have an `in` of size 30 though I see my expected result of:

```
start
a 12
b: 6
a 12
b: 6
a 6
b: 6
d:
end
```


hello, i'm a little new to cpp and rxCpp community, i was wondering if i could perform operators on a dynamic number of observables. it seems that these operators only accept Variadic arguments, which i couldn't work dynamically with.
to elaborate my problem with an example, how to merge a std::list of observables?
Thanks in advance.
Hello!

Is there currently a way to be notified of an "unsubscribe()" call?
For my use case, I am connecting to a websocket and using rxcpp to stream incoming messages to subscribers.
What I would like to achieve is disconnecting the websocket when there are no longer any subscribers.
I would like this to happen whenever the last subscriber calls "unsubscribe()" (as opposed to waiting for the next message to arrive and checking if there are any more subscribers at that point).

Is this possible with RxCpp?

pseudo-code to illustrate what I am trying to do
```cpp
    rxcpp::observable<>::create<message>([=](const rxcpp::subscriber<message>& s){
        websocket->onMessage([=](const message& message) {
            s.on_next(message);
        });

        // return unsubscribe callback?
        return [](){
            // close websocket if there are no longer any subscribers
            websocket->close();
        };
    })
```
Is this behavior intentional?

Calling `std::thread::detach` in the `new_worker` constructor will always throw `std::system_error`
https://github.com/ReactiveX/RxCpp/blob/master/Rx/v2/src/rxcpp/schedulers/rx-newthread.hpp#L84

                if (keepAlive->worker.joinable() && keepAlive->worker.get_id() != std::this_thread::get_id()) {
                    guard.unlock();
                    keepAlive->worker.join();
                }
                else {
                    keepAlive->worker.detach();   // always throws system_error
                }

The above `detach` could get executed when `joinable` returns `false`, but according to https://en.cppreference.com/w/cpp/thread/thread/detach if `joinable` returns `false` then system_error is always thrown.

Should lines 83-85 be changed to add an `if joinable`?

                else if (keepAlive->worker.joinable()) {
                    keepAlive->worker.detach();
                }

I'm used to RxJS and loved the concept, so I wanted to use it in C++ as well. Seeing #501, I thought this would be a good opportunity for me to get a little deeper into understanding the implementation of RxCpp.

This is mostly a copy&paste of the `debounce` operator implementation, edited to implement `throttle` semantics ([ref. RxJS](https://rxjs-dev.firebaseapp.com/api/operators/throttleTime)).

The `throttle` operator re-emits the first value emitted by the source, then swallows all following emissions until the specified timeout has occurred. After that, the next value emitted by the source is emitted again and the cycle continues.

The RxJS implementation also supports emitting the last value emitted by the source when the timeout completes. If this is a feature you would like to see, I can add support for that as well.
This is a possible fix for the issue #512 based on my own explanations and suggestions.
I encountered a strange behavior when using a behavior subject (no pun intended :D) to spread a state change. Sometimes the subscriber won't get a state change by an on_next call, although you get the value from before the call when you subscribe. 

This then results in heavilly unwanted behavior, because in my example you could endlessly wait for a state change to a certain value, which you should always get by concept.

I tracked this down and came to the understanding that this can happen due to the implementation of behavior::get_observable()  in rx-behavior.hpp
```
observable<T> get_observable() const {
        auto keepAlive = s;
        return make_observable_dynamic<T>([=](subscriber<T> o){
            if (keepAlive.get_subscription().is_subscribed()) {
                o.on_next(get_value());
            }
            keepAlive.add(s.get_subscriber(), std::move(o));
        });
    }
```
after get_value is called there is a gap until the subscriber is properly added where the state of the behavior_observer could be updated by a parallel occuring on_next. The new subscriber o then won't get the new value.

A quick fix that works for me and stays local would be, that you change the mutex of the behavior_observer_state into a recursive mutex and then make it properly accessible and lock it in the lamba function above, see the following pseudo sample implementation:

```
class behavior_observer : public detail::multicast_observer<T>
{...
   class behavior_observer_state
   { 
     mutable std::recursive_mutex lock;
     public:
     ....
     std::recursive_mutex &mutex() const
     {
       return lock;
     }
   };
....
  public:
....
      std::recursive_mutex& mutex() const
      {
        return state->mutex();
       }
 };

class behavior
{
 ...
public:
....
    observable<T> get_observable() const {
        auto keepAlive = s;
        return make_observable_dynamic<T>([=](subscriber<T> o)  
           std::lock_guard<std::recursive_mutex> guard(keepAlive.mutex());
            if (keepAlive.get_subscription().is_subscribed()) {
                o.on_next(get_value());
            }
            keepAlive.add(s.get_subscriber(), std::move(o));
        });
    }
};
```
But maybe some of you have a better solution for this.
If desired i can provide a little test example that can reproduce the problem.

Some side questions, while having a deeper look into the implementations in  rx-behavior.hpp:

1. Why using unique_lock instead of lock_guard in behavior_observer_state? Isn't lock_guard for this case to prefer in general because unique_lock is the complexer object, even though it may be optimized away that it wouldn't matter (but this is not ensured)?

2. in the current implemantation of behavior::get_observable() the keepAlive object seems to be unnecessary redundant and this code, would also do the trick, or am i missing something? (compare with the first code section):
```
observable<T> get_observable() const
            {
                return make_observable_dynamic<T>([=](subscriber<T> o) {
                    if (s.get_subscription().is_subscribed())
                    {
                        o.on_next(get_value());
                    }
                    s.add(s.get_subscriber(), std::move(o));
                });
            }
```
BR
Paul
Hi,

I'm trying to integrate rxcpp into **libuv**, utilizing it's timers, thread pool, etc. through the rxcpp constructs.

I'm currently trying to make a scheduler which delegates the scheduling over to libuv.
As part of this I guess I need to implement different versions of logic for either "timer" operations and "interval" operations.

How would you recommend me to go about that? :)
I'm kind of new to the library and still struggling to grasp these concepts and their relations.

Thank you :) :)
Hi! I know issues is not the best place for asking any technical doubts. But in this matter I've searched everywhere e tried lots of approaches to solve my problem that is: I am writing a custom operator to serialize Protobuf messages to json. The Protobuf's API has a helper method to do that and it uses inheritance polymorphism to do so:

```cpp
std::function<observable<protobuf::Message*>(observable<std::string>)> proto_to_json() {
  google::protobuf::util::JsonOptions opt;
  opt.always_print_primitive_fields = true;
  std::string jstr;
  google::protobuf::util::MessageToJsonString(referee, &jstr, opt);
  return jstr;
}
```
(I'm used to shared_ptr, but this was my first attempt to just test the functionality.)
Sounds like a good place to start. But when I attempt to compile, an error issuing the type of my function raises. I have the following code in my main function:
```cpp

int main() {
  // Constructing an object to receive datagrams in the group_ip, port and buffer_max_size
  MulticastReceiver mr("224.5.23.1", 10003, 4096);
  auto ref_stream = mr.datagram$() | // a std::string observable with received datagram - ok
    parse_referee() | // parses string to a shraed_ptr<SSL_Referee> proto message - ok
    proto_to_json(); // compile error
}
```

I omitted the rest of the code for brevity.
I also tried using a different approach with runtime polymorphism writing a type _json_serializable_t_ to encapsulate the method _to_json_ and also a static method _to_json(cont T&)_, then I write my own implementation of _to_json_ with a const reference to SSL_Referee:

```cpp
template<typename T>
std::string to_json(const T& x) {}
class json_serializable_t {
  public:
    template<typename T>
    json_serializable_t(T x) : self_(std::make_shared<model<T>>(std::move(x))) {}
    friend std::string to_json(const json_serializable_t& x)
    { return x.self_->to_json_(); }
  private:
    struct concept_t {
      virtual ~concept_t() = default;
      virtual std::string to_json_() const = 0;
    };
    template<typename T>
    struct model final : concept_t {
      model(T x) : data_(std::move(x)) {}
      std::string to_json_() const override
      { return to_json(data_); }
      T data_;
    };
    sptr<const concept_t> self_;
};
```
And then:
```cpp
std::string to_json(const SSL_Referee& referee) {
  google::protobuf::util::JsonOptions opt;
  opt.always_print_primitive_fields = true;
  std::string jstr;
  google::protobuf::util::MessageToJsonString(referee, &jstr, opt);
  return jstr;
}

std::function<observable<std::string>(std::shared_ptr<json_serializable_t>)> serialize_to_json() {
  return [](observable<std::shared_ptr<json_serializable_t>> object$) {
    return object$ |
      operators::map([](std::shared_ptr<json_serializable_t> object) { 
        return to_json(*object); }); };
}
```

Any of those approaches give me the following error with different signatures:

```
main.cc:46:21: error: no match for ‘operator|’ (operand types are ‘rxcpp::observable<std::shared_ptr<SSL_Referee>, rxcpp::dynamic_observable<std::shared_ptr<SSL_Referee> > >’ and ‘std::function<rxcpp::observable<std::__cxx11::basic_string<char> >(rxcpp::observable<std::shared_ptr<furgbol::models::json_serializable_t> >)>’)
   observable<sptr<SSL_Referee>> referee$ = ref_mr.datagram() |
                                            ~~~~~~~~~~~~~~~~~~~
     parse_referee() |
     ~~~~~~~~~~~~~~~~^
     serialize_to_json();
```

Then am stuck at this for like two weeks and still didn't find any helpful material to help me with that (although I've learned a lot of other things on the way, whats a very good thing). The only thing that I didn't tried yet was writing something to use with the lift operator, which I can't find much about but saw an example that looked like could implement what I'm trying.

Well I apologize for any spelling errors and atrocities with the C++ usage, although it's one of my favorite languages and I am really engaged into learning everything as possible. Also it's the first time I'm writing anything on the web, even to ask something, in a large community like that. Am I giving to little information? Or (already know the answer) asking in the wrong place? But anything will help even if it is to learn to behave in the community. :smiley: 
Thank you for your time.
