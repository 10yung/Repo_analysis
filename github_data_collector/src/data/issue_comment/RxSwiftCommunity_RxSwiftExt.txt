Adding WatchOS target to the project that enables Carthage to build it.
Based on the request in #242. IRT other traits - there's no real value to add it to Completable... we could add to Maybe and Single in a separate PR.

This PR has a single failing test, I can't really put my finger on what's going on there (the same test passes for Signal but fails for Driver). 

If anyone can take a poke at it, that'd be great :) 

Thanks ! 
Currently, `withUnretained` defined only for Observable. Wouldn't it be useful to add it for all traits?
https://github.com/RxSwiftCommunity/RxSwiftExt/issues/142
I am open for discussion about Dangerfile. Sadly, I failed to found generic example in RxSwiftCommunity
```swift
.compactMap { predicate($0) ?$0 : nil }
// prefered over
.filterMap { predicate($0)  ? .map($0) : nil }
```
Hi everyone,

I'm using the `cascade` operator in many kinds of scenarios and I'm very grateful for it.

There is an issue though, when for some reason the last observable completes immediately (i.e. in a synchronous manner), the resulting cascading observable will not complete.

I believe that is because of the `if initialized` test when subscribing to underlying observables: https://github.com/RxSwiftCommunity/RxSwiftExt/blob/master/Source/RxSwift/cascade.swift#L57

For example, if the last observable in the list is a `.just(whatever)`, the cascade will never complete.

It looks like it's a regression that was introduced with commit https://github.com/RxSwiftCommunity/RxSwiftExt/commit/4ba2dd68934fd0915012ed74d89a9c5a144da7e1

The following test can help understand the issue (it's red at the moment):

```swift
    func testSynchronousCompletion() {
        let xs = scheduler.createHotObservable([
            .next(110, 1),
            .next(180, 2),
            .next(230, 3),
            .next(270, 4),
            .next(340, 5),
            .completed(200)
            ])
            .asObservable()

        let ys = scheduler.createHotObservable([
            .next(100, 21),
            .completed(210, Int.self)
            ])
            .asObservable()

        let zs = Observable<Int>.just(31)

        let res = scheduler.start { () -> Observable<Int> in
            Observable.cascade([xs, ys, zs])
        }

        XCTAssertEqual(res.events, [
            .next(200, 31),
            .completed(200)
            ]) // <--- it's just `[.next(200, 31)`
    }
```
`PublishSubject` is not working with `ignoreErrors` function because `ignoreErrors` is synonym of `retry`. But `PublishSubject` can't `retry` by contract cause it's not operation.

```swift
        let subject = PublishSubject<Int>()
        _ = subject.ignoreErrors().subscribe(onNext: {
            print($0)
        })
        subject.onNext(1)
        subject.onError(RxError.unknown)
        subject.onNext(2)
        subject.onNext(3)

// output: INFINIRY_LOOP
```

In this code **I can think** the sequence can't terminated on error (and yes it's not terminated ðŸ˜º) but it's not right by contract of `Observable`. So I think this operator is mislead and I suggest to remove it.
RxSwift 5 added the CompactMap operator which overlaps with the current RxSwiftExt `unwrap()` method. 

Should we deprecate the use of the unwrap method in favour of the new compactMap naming? 
Hello, I tried to include RxSwiftExt in my carthfile and had some errors, my env:

```
swift --version
Apple Swift version 5.0.1 (swiftlang-1001.0.82.4 clang-1001.0.46.5)
Target: x86_64-apple-darwin18.5.0
```

`Xcode 10.2.1 (10E1001)`

`swiftlint 0.32.0`

`carthage 0.33.0`

My carthfile:

```
github "Alamofire/Alamofire" == 4.8.2
github "Alamofire/AlamofireImage" == 3.5.2
github "Moya/Moya" ~> 13.0
github "ReactiveX/RxSwift" "5.0.1"
github "ReactiveCocoa/ReactiveSwift" "5.0.1"
github "RxSwiftCommunity/RxSwiftExt" "5.0.0"
github "RxSwiftCommunity/RxGesture" "2.2.0"
github "RxSwiftCommunity/RxDataSources" "4.0.1"
```

Xcode throws a lots of `Use of undeclared type 'Element'`.
Greetings!

I came up with an operator I would like to propose. The WIP name is `overridingScan`, but I would gladly consider better names you might suggest. The idea behind it is to make an operator that works the same way `scan` does, but so that an accumulated value can be reset to some other value that comes from a different observable, like so:
```
a       -----------------------(10)----------------->
                                |
b       -----(1)---(2)---(3)----|----(4)---(5)------>
              |     |     |     |     |     |
              \/    \/    \/    \/    \/    \/
scan(+) -----(1)---(3)---(6)---(10)--(14)--(19)--->
```
Here, the intermediate sum produced by applying the accumulation function of the `scan` operator over the sequence `b` is overridden by a value coming from the sequence `a`. Once this happens, this value becomes the new "seed" and the following accumulating operation uses it as the last sum for all the subsequent values from `b`.
This idea came to my mind when I wanted to achieve the behavior when the new items can be appended to an array using the `scan` operator, but so that the array can also be refreshed and filled with completely new values, e.g. scrolling down a table view loads new cells, but scrolling it up refreshes it entirely. Normally this is achieved using `a.flatMapLatest { b.scan(...).startWith($0) }`, but in this scenario `a` should always come before `b`. A possible workaround is `a.startWith(seed)`, but it will emit an initial value that might be unwanted.
The usefulness of this operator might seem questionable, but I decided to propose it anyway. This PR doesn't include a readme section or a playground demo yet.

Any feedback is greatly appreciated!