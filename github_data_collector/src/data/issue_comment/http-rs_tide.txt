When the same path is registered but with another method respond with `405` instead of `404`
Follow-up to https://github.com/http-rs/tide/pull/347. Disables console printing by default. Thanks!
This is the part of the effort described [here](https://github.com/async-rs/async-std/issues/658)

# Problem

Short summary for the problem that `async-listen` and this PR solves, is: before the PR I get the error:
```
$ cargo run --example hello          
   Compiling tide v0.5.1 (/work)
    Finished dev [unoptimized + debuginfo] target(s) in 5.47s
     Running `target/debug/examples/hello`
Server is listening on: http://127.0.0.1:8080
Error: Custom { kind: Other, error: Error(Accept, Os { code: 24, kind: Other, message: "Too many open files" }) }
```
If I run wrk against the app (i.e 1100 simultaneous connections):
```
wrk -c1100  http://localhost:8080/
```
(this is with `ulimit -n` of 1024 which is default on many linuxes)

And after the pull request there is no error.

# Benchmarks

Before the PR (tested on the same `--example hello`, release build):
```
$ wrk -c 1000 http://locahost:8080/
Running 10s test @ http://localhost:8080/
  2 threads and 1000 connections
  Thread Stats   Avg      Stdev     Max   +/- Stdev
    Latency     8.69ms    3.02ms  26.77ms   71.23%
    Req/Sec    49.68k     2.74k   56.27k    71.72%
  986188 requests in 10.01s, 139.19MB read
Requests/sec:  98481.58
Transfer/sec:     13.90MB
```
And after the PR:
```
$ wrk -c 1000 http://locahost:8080/
Running 10s test @ http://localhost:8080/                                      
  2 threads and 1000 connections                                               
  Thread Stats   Avg      Stdev     Max   +/- Stdev
    Latency     9.08ms    2.66ms  28.08ms   74.56% 
    Req/Sec    49.91k     3.05k   70.36k    71.36%
  995705 requests in 10.10s, 140.54MB read                                     
Requests/sec:  98597.23                                                        
Transfer/sec:     13.92MB                 
```
Which means performance is basically whiting the measurement error.

# Questions

1. What default limit should be? I thought it could depend on resource limit, but then it's another dependency, and still it's not clear how to transform ulimit to max-connections, for some apps it could be `max_connections = ulimit - 10` for others `max_connections = ulimit / 2`. So I've set a 1000 as default.
2. Will this PR be accepted?
Tide version: v0.5.1
OS: ubuntu linux 18.04 x64

Hi! I tried putting tide server behind a reverse proxy. For testing purposes, I tried the same with hyper.
Tried both with caddy, and here's the finding:

1. Both hyper and tide works when request with the binded url. (http://ip:port)
2. When reverse proxy with root path, both server works.
3. When proxy tide behind a supbath, for example domain/tide, tide server becomes unresponsive and returns 404 in firefox and 400 in chromium. But the hyper proxy works in the path /hyper.

Is there anything about header that needs changed manually when proxying tide behind a proxy server?
This closes #371 - it turns out there was already an implementation, it was just commented out :grin: 


It makes it hard to use `StatusCode::OK` or `StatusCode::NOT_FOUNT` for semantic coding.

Note that `Response::status` and `Response::set_status` are using `StatusCode`.
The `new` method is quite an inconsistency.

This is a port of the cookies implementation from the time when the tide was split into multiple crates.
Changes are:

- ContextExt into RequestExt
- StringError was needed again
- appendHeader also needed

Tests have been ported as well. I was unsure how the strategy will be regarding Error handling so feel free to comment and suggest alternatives. So far I have tried to stay as close to the original version.

Cheers,
Niko


Adds https://blog.yoshuawuyts.com/tide/ to the reading list. Thanks!
Hey!

I have started to port https://github.com/colinbankier/realworld-tide from `v0.3.0` to `v0.4.0` - so far so good, no major issues.

I noticed that `cargo build` fails if I try to mount a route with following signature:
```rust
pub async fn list_articles(cx: Request<Repo>) -> tide::Result<Response> {
    [...]
}
```
with the following error
```
error[E0277]: the trait bound `std::result::Result<tide::response::Response, tide::error::Error>: tide::response::into_response::IntoResponse` is not satisfied
  --> src/main.rs:28:29
   |
28 |         api.at("/articles").get(web::articles::list_articles);
   |                             ^^^ the trait `tide::response::into_response::IntoResponse` is not implemented for `std::result::Result<tide::response::Response, tide::error::Error>`
   |
   = note: required because of the requirements on the impl of `tide::endpoint::Endpoint<db::Repo<diesel::PgConnection>>` for `fn(tide::request::Request<db::Repo<diesel::PgConnection>>) -> impl core::future::future::Future {web::articles::list_articles}`
```

I'd be happy to submit a PR to implement `IntoResponse` for `tide::Result<tide::Response>`, but I'd like to understand first if this implementation is missing on purpose due to some pending discussions around error handling in `tide` :grin:   
If we want to execute multiple times `cx.set_local(value)`.