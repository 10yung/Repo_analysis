
    * Treat Unit as a regular Kotlin object which Unit is.
    * Ensure SerialDescriptor invariants in ObjectDescriptor

Also, fixes #645
**What is your use-case and why do you need this feature?**
I have multiple classes with field `id`. When I get a serialization error it's pretty time consuming to understand where exactly is the problem. Here is an example:
```
kotlinx.serialization.MissingFieldException: Field 'id' is required, but it was missing
        at 0   SharedCode                          0x000000010a38fd83 kfun:kotlin.RuntimeException.<init>(kotlin.String?;kotlin.Throwable?)kotlin.RuntimeException + 115
        at 1   SharedCode                          0x000000010a620503 kfun:kotlinx.serialization.SerializationException.<init>(kotlin.String;kotlin.Throwable?)kotlinx.serialization.SerializationException + 115
        at 2   SharedCode                          0x000000010a62069d kfun:kotlinx.serialization.SerializationException.<init>(kotlin.String;kotlin.Throwable?;kotlin.Int;kotlin.native.internal.DefaultConstructorMarker)kotlinx.serialization.SerializationException + 381
        at 3   SharedCode                          0x000000010a620962 kfun:kotlinx.serialization.MissingFieldException.<init>(kotlin.String)kotlinx.serialization.MissingFieldException + 594
        at 4   SharedCode                          0x000000010a670f1d kfun:podlodka.mpp.model.Category.<init>(kotlin.Int;kotlin.String?;kotlin.String?;kotlin.String?;kotlin.collections.List<podlodka.mpp.model.ShortEpisode>?;kotlinx.serialization.SerializationConstructorMarker?)podlodka.mpp.model.Category + 509
        at 5   SharedCode                          0x000000010a66f3cb kfun:podlodka.mpp.model.Category.$serializer.deserialize(kotlinx.serialization.Decoder)podlodka.mpp.model.Category + 2123
        at 6   SharedCode                          0x000000010a653611 kfun:kotlinx.serialization.json.internal.decodeSerializableValuePolymorphic$kotlinx-serialization-runtime@kotlinx.serialization.json.JsonInput.(kotlinx.serialization.DeserializationStrategy<#GENERIC>)Generic + 2529
        at 7   SharedCode                          0x000000010a6543ef kfun:kotlinx.serialization.json.internal.StreamingJsonInput.decodeSerializableValue(kotlinx.serialization.DeserializationStrategy<#GENERIC>)Generic + 191
        at 8   SharedCode                          0x000000010a61fc47 kfun:kotlinx.serialization.ElementValueDecoder.decodeSerializableElement(kotlinx.serialization.SerialDescriptor;kotlin.Int;kotlinx.serialization.DeserializationStrategy<#GENERIC>)Generic + 263
        at 9   SharedCode                          0x000000010a62fff4 kfun:kotlinx.serialization.internal.ListLikeSerializer.readElement(kotlinx.serialization.CompositeDecoder;kotlin.Int;#GENERIC;kotlin.Boolean) + 516
        at 10  SharedCode                          0x000000010a62efaa kfun:kotlinx.serialization.internal.AbstractCollectionSerializer.readElement$default(kotlinx.serialization.CompositeDecoder;kotlin.Int;#GENERIC;kotlin.Boolean;kotlin.Int) + 474
        at 11  SharedCode                          0x000000010a62e852 kfun:kotlinx.serialization.internal.AbstractCollectionSerializer.patch(kotlinx.serialization.Decoder;#GENERIC)#GENERIC + 1826
        at 12  SharedCode                          0x000000010a62eb55 kfun:kotlinx.serialization.internal.AbstractCollectionSerializer.deserialize(kotlinx.serialization.Decoder)#GENERIC + 405
        at 13  SharedCode                          0x000000010a653611 kfun:kotlinx.serialization.json.internal.decodeSerializableValuePolymorphic$kotlinx-serialization-runtime@kotlinx.serialization.json.JsonInput.(kotlinx.serialization.DeserializationStrategy<#GENERIC>)Generic + 2529
        at 14  SharedCode                          0x000000010a6543ef kfun:kotlinx.serialization.json.internal.StreamingJsonInput.decodeSerializableValue(kotlinx.serialization.DeserializationStrategy<#GENERIC>)Generic + 191
        at 15  SharedCode                          0x000000010a61fc47 kfun:kotlinx.serialization.ElementValueDecoder.decodeSerializableElement(kotlinx.serialization.SerialDescriptor;kotlin.Int;kotlinx.serialization.DeserializationStrategy<#GENERIC>)Generic + 263
        at 16  SharedCode                          0x000000010a6738c1 kfun:podlodka.mpp.model.Episode.$serializer.deserialize(kotlinx.serialization.Decoder)podlodka.mpp.model.Episode + 3633
        at 17  SharedCode                          0x000000010a653611 kfun:kotlinx.serialization.json.internal.decodeSerializableValuePolymorphic$kotlinx-serialization-runtime@kotlinx.serialization.json.JsonInput.(kotlinx.serialization.DeserializationStrategy<#GENERIC>)Generic + 2529
        at 18  SharedCode                          0x000000010a6543ef kfun:kotlinx.serialization.json.internal.StreamingJsonInput.decodeSerializableValue(kotlinx.serialization.DeserializationStrategy<#GENERIC>)Generic + 191
        at 19  SharedCode                          0x000000010a61fc47 kfun:kotlinx.serialization.ElementValueDecoder.decodeSerializableElement(kotlinx.serialization.SerialDescriptor;kotlin.Int;kotlinx.serialization.DeserializationStrategy<#GENERIC>)Generic + 263
        at 20  SharedCode                          0x000000010a62fff4 kfun:kotlinx.serialization.internal.ListLikeSerializer.readElement(kotlinx.serialization.CompositeDecoder;kotlin.Int;#GENERIC;kotlin.Boolean) + 516
        at 21  SharedCode                          0x000000010a62efaa kfun:kotlinx.serialization.internal.AbstractCollectionSerializer.readElement$default(kotlinx.serialization.CompositeDecoder;kotlin.Int;#GENERIC;kotlin.Boolean;kotlin.Int) + 474
        at 22  SharedCode                          0x000000010a62e852 kfun:kotlinx.serialization.internal.AbstractCollectionSerializer.patch(kotlinx.serialization.Decoder;#GENERIC)#GENERIC + 1826
        at 23  SharedCode                          0x000000010a62eb55 kfun:kotlinx.serialization.internal.AbstractCollectionSerializer.deserialize(kotlinx.serialization.Decoder)#GENERIC + 405
        at 24  SharedCode                          0x000000010a653611 kfun:kotlinx.serialization.json.internal.decodeSerializableValuePolymorphic$kotlinx-serialization-runtime@kotlinx.serialization.json.JsonInput.(kotlinx.serialization.DeserializationStrategy<#GENERIC>)Generic + 2529
        at 25  SharedCode                          0x000000010a6543ef kfun:kotlinx.serialization.json.internal.StreamingJsonInput.decodeSerializableValue(kotlinx.serialization.DeserializationStrategy<#GENERIC>)Generic + 191
        at 26  SharedCode                          0x000000010a61fc47 kfun:kotlinx.serialization.ElementValueDecoder.decodeSerializableElement(kotlinx.serialization.SerialDescriptor;kotlin.Int;kotlinx.serialization.DeserializationStrategy<#GENERIC>)Generic + 263
        at 27  SharedCode                          0x000000010a62d5a0 kfun:kotlinx.serialization.internal.MapLikeSerializer.readElement(kotlinx.serialization.CompositeDecoder;kotlin.Int;#GENERIC_kotlin.collections.MutableMap<#GENERIC,#GENERIC>;kotlin.Boolean) + 2096
        at 28  SharedCode                          0x000000010a62efaa kfun:kotlinx.serialization.internal.AbstractCollectionSerializer.readElement$default(kotlinx.serialization.CompositeDecoder;kotlin.Int;#GENERIC;kotlin.Boolean;kotlin.Int) + 474
```

**Describe the solution you'd like**
Print out the class name in error message, like `Field 'id' is required in Category, but it was missing`
**What is your use-case and why do you need this feature?**
For object classes, it should be a way to find a serializer. Currently, both `KClass<*>.serializer()` and `serializer<T>()` do not work.

The reason why we need this is that we should somehow serialize objects (that is accepted to be allowed). However, it is not possible if an object is a serialization root.


**What is your use-case and why do you need this feature?**
Unfortunately, I have a json string like this:
`[{ "value": "hello"}, {"value": 42}]`

To serialize this types, I use a sealed class with two implementations, StringValue and IntValue.
The default serializer adds the class with a type property, which is critical when a property is named type, and the receiver did not expect this additional attribute during desialization.

 
**Describe the solution you'd like**
```

class TestValuesTest {

    @Serializable
    sealed class TestValues {
        @Serializable
        data class StringValue(val value: String): TestValues()
        @Serializable
        data class IntValue(val value: Int): TestValues()
    }

    private val json = Json(JsonConfiguration.Stable)

    private val expected = """
         [{ "value": "hello"}, {"value": 42}]
    """.trimIndent()

    @Test
    fun incomingJson() {
        val values = json.parse(TestValues.serializer().list, expected)
        assertEquals("hello", (values[0] as TestValues.StringValue).value)
        assertEquals(42, (values[1] as TestValues.IntValue).value)
    }

    @Test
    fun outgoingJson() {
        val testString = TestValues.StringValue("hello")
        val testInt = TestValues.IntValue(42)

        val outgoing = json.stringify(TestValues.serializer().list, listOf(testString, testInt))
        assertEquals(expected, outgoing)
    }
}
```
**What is your use-case and why do you need this feature?**
As described [here](https://stackoverflow.com/questions/53344033/moshi-parse-single-object-or-list-of-objects-kotlin): sometimes api's will return a json value which could contain a single object or a list of objects.


Also see the "data" json values in the json:api [example](https://jsonapi.org/)

**json:api example**
```
{
  "links": {
    "self": "http://example.com/articles",
    "next": "http://example.com/articles?page[offset]=2",
    "last": "http://example.com/articles?page[offset]=10"
  },
  "data": [{
    "type": "articles",
    "id": "1",
    "attributes": {
      "title": "JSON:API paints my bikeshed!"
    },
    "relationships": {
      "author": {
        "links": {
          "self": "http://example.com/articles/1/relationships/author",
          "related": "http://example.com/articles/1/author"
        },
        "data": { "type": "people", "id": "9" }
      },
      "comments": {
        "links": {
          "self": "http://example.com/articles/1/relationships/comments",
          "related": "http://example.com/articles/1/comments"
        },
        "data": [
          { "type": "comments", "id": "5" },
          { "type": "comments", "id": "12" }
        ]
      }
    },
    "links": {
      "self": "http://example.com/articles/1"
    }
  }],
  "included": [{
    "type": "people",
    "id": "9",
    "attributes": {
      "firstName": "Dan",
      "lastName": "Gebhardt",
      "twitter": "dgeb"
    },
    "links": {
      "self": "http://example.com/people/9"
    }
  }, {
    "type": "comments",
    "id": "5",
    "attributes": {
      "body": "First!"
    },
    "relationships": {
      "author": {
        "data": { "type": "people", "id": "2" }
      }
    },
    "links": {
      "self": "http://example.com/comments/5"
    }
  }, {
    "type": "comments",
    "id": "12",
    "attributes": {
      "body": "I like XML better"
    },
    "relationships": {
      "author": {
        "data": { "type": "people", "id": "9" }
      }
    },
    "links": {
      "self": "http://example.com/comments/12"
    }
  }]
}

```

**Describe the solution you'd like**
Maybe use of `vararg`, or an `SingleToArray` annotation like in that moshi example to read single objects into a list



I am attempting to write a custom serializer to handle this case... but is there an example anywhere of how to do this in a clean way?


It seems that protobuf well-known types are not supported out-of-the-box with kotlinx.serialization. It could be nice to have out-of-the-box serialization/deserialization support for at least some protobuf well-known-types ie. in my case com.google.protobuf.Timestamp.

Ie. following example code would work without custom serializer (or some workaround)

`@Serializable
data class Moment(
     @SerialId(1)
    val time: Timestamp
)`

[List of Well-known types can be found in here](https://developers.google.com/protocol-buffers/docs/reference/google.protobuf)

Is there any plans to add some kind of support into kotlinx.serialization for these types in future?

**Describe the bug**

If I have an abstract class with a field, and other classes which extend this abstract class, the field from the abstract class will have the same property name as the first field from the concrete class.

**To Reproduce**

```
@Serializable
abstract class Snippet(
    @SerialName("objectFieldName") val objectFieldName: String
)

@Serializable
data class TestSnippet(
    @SerialName("experiments") val experiments: List<KrakenExperiment>
) : Snippet("test")

@Serializable
data class ScreenSnippet(
    @SerialName("name") val name: String,
    @SerialName("uuid") val uuid: String? = null,
    @SerialName("source") val source: String? = null
) : Snippet("screen")

val snippetModule = SerializersModule {
            polymorphic(Snippet::class) {
                ScreenSnippet::class with ScreenSnippet.serializer()
                TestSnippet::class with TestSnippet.serializer()
            }
        }

        val json = Json(
                configuration = JsonConfiguration.Stable,
                context = snippetModule
        )

val testSnippet = TestSnippet(emptyList())
val screenSnippet = ScreenSnippet("one", "two", "three")

println (json.stringify(TestSnippet.serializer(), testSnippet))
println (json.stringify(ScreenSnippet.serializer(), screenSnippet))
```
Outputs:
```
{"experiments":"test","experiments":[]}
{"name":"screen","name":"one","uuid":"two","source":"three"}
```

**Expected behavior**
It should output:
```
{"objectFieldName":"test","experiments":[]}
{"objectFieldName":"screen","name":"one","uuid":"two","source":"three"}
```

**Environment**
 - Kotlin version: 1.3.61
 - Library version: 0.14.0
 - Kotlin platforms: JVM, android; this code is in kotlin MP "common" source set
 - Gradle version: 5.6.4
 - IDE version: Android Studio 4 Canary 8
 - Other relevant context: (AdoptOpenJDK)(build 1.8.0_232-b09)

Porting a project using the *Java ProtoBuf library* to *kotlinx.serialization* can become quite hard since optional properties are not supported in the same way.

On the one hand it is not possible to omit optional properties during serialization (this is possible by not setting an optional property while building the message in Java).
On the other hand it is not possible to check if a property has been omitted by the sender during de-serialization (this is possible via `Message.hasA()` in Java).

Allowing to set `ProtoBuf.shouldEncodeElementDefault()` to `false` allows to create `@Serializable data classes` that support optional properties during serialization and de-serialization. Additionally, it makes `null` values possible for optional properties as well.

Closes #397 Make skipping null values default behavior for protobuf
Closes #71 NULLs are not supported when writing to protobuf
I created a `libraryA` that uses Kotlin Serialization and Kotlin Reflect. This lib uses `api` instead of `implementation` for both dependencies.

The problem is I am having to add manually the serialization dependency to the project that wants to use the `libraryA`, if not I got `java.lang.ClassNotFoundException: kotlinx.serialization.json.Json`

If I am using `api`, the correct behavior should be I don't need to add the serialization dependency to the project because it is as `api` dependency?

**Environment**
 - Kotlin version: 1.3.61
 - Library version: 0.14.0
 - Kotlin platforms: JVM
