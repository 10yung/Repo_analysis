See https://github.com/rtomayko/tilt/blob/master/docs/TEMPLATES.md#escape_html--truefalse

Supersedes #350
Accept `:UNSAFE` options for commonmarker config. 

Behaviour was changed to SAFE by default: gjtorikian/commonmarker#87 gjtorikian/commonmarker#81

Starting with Tilt 2.0.10, methods defined in a template can't be used later in the template, it seems. Here's a self-contained reproducer that works with Tilt 2.0.9, but not Tilt 2.0.10:

```bash
$ cat <<EOF > repro.erb.txt
<%
  def foo(x)
    puts x
  end
%>
<%= foo('hello') %>
EOF

$ ruby -r tilt -e "Tilt::ERBTemplate.new('repro.erb.txt').render"
```

The output with Tilt 2.0.9 is `hello`, but the output with Tilt 2.0.10 is:

```
Traceback (most recent call last):
    4: from -e:1:in `<main>'
    3: from <...>/tilt-2.0.10/lib/tilt/template.rb:109:in `render'
    2: from <...>/tilt-2.0.10/lib/tilt/template.rb:170:in `evaluate'
    1: from <...>/tilt-2.0.10/lib/tilt/template.rb:170:in `call'
repro.erb.txt:6:in `__tilt_70208412901580': undefined method `foo' for #<Object:0x00007fb546938d40> (NoMethodError)
```

Pug is a JavaScript templating language equivalent to slim, with a similar syntax.

But pug is much powerful and featureful with mixins, block and extends (template inheritance), etc.

Hopefully there is [pug-ruby](https://github.com/yivo/pug-ruby) that allow to compile Jade and Pug templates from Ruby.

Other leads are:
- [pug-rails](https://github.com/yivo/pug-rails)
- [jekyll-pug](https://github.com/DougBeney/jekyll-pug)
- [Jekyll-Bliss](https://github.com/DougBeney/Jekyll-Bliss) ([website](https://jekyll-pug.dougie.io/))
I'm trying to pass Redcarpet render options through Tilt but not sure where to pass in my options. (I saw that this is supported via this issue: https://github.com/rtomayko/tilt/issues/238).

In my rails application I have `Tilt.prefer Tilt::RedcarpetTemplate` in `sprockets.rb`. Since I'm passing in the class `Tilt::RedcarpetTemplate` itself and not an instance of that class, I'm not sure how to pass options through
I am working on new format called [hamdown](https://github.com/inem/hamdown), and would like to add its support to tilt.
In 1.x, I could glob for all tilt-registered file extensions like this: `"*.{#{Tilt.mappings.keys.join(',')}}"`

Is there any way in 2.X to enumerate the file extensions supported by Tilt at runtime?
Hi, I'm using tilt within [middleman](https://github.com/middleman/middleman).

In my situation, I don't want '.rst' files in my source to path renderer, and want to remove 'rst' from mappings.

I found the good tips [here](https://github.com/middleman/middleman/issues/822) like...

```
Tilt.mappings.delete('rst')
```

But this couldn't work, maybe because it's for the older version of tilt.
I'm using tilt v2.0.8.

I looked into source code, but couldn't find the way to remove the specific mapping from outside.
Any idea?

Thank you.
Given the following chunk of Ruby code:

```ruby
require "tilt"

def render(content, &block)
  Tilt::HamlTemplate.new('haml'){ content }.render(self, &block)
end

haml_block_chunk =%[%h1 I am the title
=render "%center=yield" do
  %h2 This stuff is all center aligned
  %p=yield]

template_nested_output = render haml_block_chunk do
  "I should appear inside of the center element"
end

puts template_nested_output
```

I expect `template_nested_output` to return the following result:

```html
<h1>I am the title</h1>
<center>
<h2>This stuff is all center aligned</h2>
<p>I should appear inside of the center element</p>
</center>
```

but the actual result for `template_nested_output` is:

```html
<h1>I am the title</h1>
<h2>This stuff is all center aligned</h2>
<p>I should appear inside of the center element</p>
<center><h1>I am the title</h1>
<h2>This stuff is all center aligned</h2>
<p>I should appear inside of the center element</p>
</center>
```

The code above my appear to be convoluted, but its the same pattern that I'm trying to use in a static site generator to get a `render` method working from within a template.

I'm not sure if this is a bug or if I'm making too big of an assumption for this to work. Maybe Tilt wasn't designed for this use case? Assuming that's true I'd propose either documentation that states this or documentation that shows potential work arounds.
