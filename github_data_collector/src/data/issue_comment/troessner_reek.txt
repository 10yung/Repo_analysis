I've come across two instances of a false positive ModuleInitialize warnings when using anonymous class definitions.

First the RSpec related one:

```ruby
module Alfa
  RSpec.describe Bravo do
    let(:klass) do
      Class.new do
        def initialize; end
      end
    end
  end
end
```

And secondly a DSL-based one:

```ruby
module Alfa
  bravo Class.new do
    def initialize; end
  end
end
```

The DSL variant is probably not very likely to be done in a real-world scenario, but technically the `initialize` method is not defined on the module that Reek warns about. The RSpec variant is something I've come across in the real world however.

If the anonymous class is assigned to a constant it does not fail however, which makes sense cause it's no longer an anonymous class:

```ruby
module Alfa
  Bravo = Class.new do
    def initialize; end
  end
end
```

A slightly different variant of this was reported in #1137 and fixed in #1287, but it specifically requires the anonymous class definition to be within a method definition on the module. Hence both of these are not reported:

```ruby
module Alfa
  def self.bravo
    Class.new do
      def initialize; end
    end
  end
end
```

```ruby
module Alfa
  def bravo
    Class.new do
      def initialize; end
    end
  end
end
```


Hello! ðŸ™‚ 

I would like to propose a new smell, which I named after [one of the worst web design trends of the mid 2000's](https://en.wikipedia.org/wiki/Tag_cloud): the "word cloud". It happens when large arrays or string- or symbol literals are arranged with several elements on the same line.

**Example from RuboCop:**

```ruby
MANY_CHILD_NODES  = %i[dstr dsym xstr regexp array hash pair
                       mlhs masgn or_asgn and_asgn
                       undef alias args super yield or and
                       while_post until_post iflipflop eflipflop
                       match_with_lvasgn begin kwbegin return
                       in_match case_match in_pattern match_alt
                       match_as array_pattern array_pattern_with_tail
                       hash_pattern const_pattern].freeze
```

This layout makes it nearly impossible to add, edit, or remove an entry without re-arranging the entire array, lest you want to end up with line length offenses. The resulting git diff is a total mess, with little indication of what was actually changed.

(You can actually see from this example that something was probably removed from the second line of the array at some point, leaving it jarringly short. Fixing that would require all subsequent lines to be shifted.)

I speculate that this kind of layout is a result of an irrational fear of vertical space, that RuboCop itself is probably at least partially responsible for, with its `Metric/MethodLength` and `Metric/ClassLength` rules. ðŸ˜¬ 
- Run on xenial distribution
- Stop unsetting _JAVA_OPTIONS. This value is not set in VM-based builds
- Always use latest micro versons of JRuby 9.1 and 9.2
- Build on Rubinius 4
Given the following code:

~~~ ruby
def method
  case x
  when :a
    if y.method || a.method
    end
  when :b
    if y.method || b.method
    end
  end
end
~~~

reek reports a DuplicateMethodCall for `y.method`.

Yes, `y.method` appears two times in this method, however, it is only called at most once. Therefore I think that this is a false positive.
Hi, I found an issue about [Instance Variable Assumption][instance-variable-assumption] that occurs when a class have a `Struct` with its own `initialize` method in its block.

[instance-variable-assumption]: https://github.com/troessner/reek/blob/master/docs/Instance-Variable-Assumption.md

Example code:

```ruby
class Foo
  Bar = Struct.new(:a) do
    def initialize(a)
      super
      p 'bar created'
    end
  end

  def initialize
    @foo = :foo
  end

  def foo?
    @foo == :foo
  end
end
```

When I run `reek` against this file, Reek reports a warning of `Instance Variable Assumption`, even though `@foo` in `Foo` class is initialized correctly.

```
[1]:InstanceVariableAssumption: Foo assumes too much for instance variable '@foo' [https://github.com/troessner/reek/blob/v5.4.0/docs/Instance-Variable-Assumption.md]
```

It looks like the cause is `Bar` which has a block containing an `initialize` method.
I confirmed that Reek did not warn if:

- `Bar` does not have an `initialize` method.
- `Bar` is defined by normal class syntax (`class Bar ... end`).
- `Bar` is defined after the `initialize` method of `Foo`.

Similar issue: #1137

CSV (from standard library) uses a lot of methods that yield a `csv` file (that is opened and closed at the end of the block), `Tempfile.create` do the same:

Sample code:

~~~ ruby
CSV.generate headers: ['metric', 'value'], write_headers: true do |csv|
  metric_types.map do |id, value_type|
    csv << [id, SAMPLE_VALUE[value_type]]
  end
end

Tempfile.create('foo', '/home/temp') do |f|
   array.each do |element|
     f.puts element
  end
end
~~~

I'm not sure if I can list all the method names, but, I would use `open`, `create` and `generate`.

On CSV, there is also the `new` method that receives a block, but I'm not sure if it can be ignored (I can't think on an example where it is used as an iterator, but I'm not sure).

Currently `tap` is the only ignored method, what you thing about it?
## Setup

Rails app, where helpers smell of _UtilityFunction_

### _.reek.yml_
```yml
directories:
  "app/helpers":
    UtilityFunction:
      enabled: false
```

### _app/helpers/foo_helper.rb_
```ruby
module FooHelper
  def smelly_method(bar)
    bar.presence
  end
end
```

## Happy Path

```sh
reek --show-configuration-path app/helpers/foo_helper.rb
```

```
Using '.reek.yml' as configuration file.
Inspecting 1 file(s):
.
```

## Possible Bug

When linting through atom-linter, the current working directory (cwd) is set to the one the file being linted exists, in this case: _app/helpers_. Reek will still find the correct _.reek.yml_ from it's ancestors, first in _app_ and ultimately on the project's root. But, it won't match the directory `"app/helpers"`, because it's looking for `"app/helpers"` relative to the **cwd**  instead of relative to the configuration file.

```sh
cd app/helpers
reek --show-configuration-path foo_helper.rb
```

```
Using '../../.reek.yml' as configuration file.
Inspecting 1 file(s):
S

foo_helper.rb -- 1 warning:
  [5]:UtilityFunction: FooHelper#smelly_method doesn't depend on instance state (maybe move it to another class?) [https://github.com/troessner/reek/blob/v5.4.0/docs/Utility-Function.md]
```

I'm on **reek 5.4.0**
Is there any way to get `reek` to analyze `.thor` files? They seem to be ignored no matter what.
So that text editors highlight this file better.
When updating from `v5.3.2` to `v5.4.0` running `reek` from _CLI_ and  _Rake::Task_ has different outcomes:

<img width="1274" alt="Screen Shot 2019-06-04 at 12 09 08 PM" src="https://user-images.githubusercontent.com/5222997/58895354-b2e9fd00-86c1-11e9-9bec-5b8229c3a20e.png">

My rake configuration is:
```ruby
Reek::Rake::Task.new do |t|
  t.config_file   = '.reek.yml'
  t.source_files  = FileList['./**/*.rb'].exclude('./vendor/**/*.rb')
end
```

The problem is that the rake task finds the configuration file (changing its name causes a "file not found" error), but doesn't consider the directories rules, like:
```yml
directories:
  "db/migrate":
    FeatureEnvy:
      enabled: false
    UncommunicativeVariableName:
      enabled: false
    IrresponsibleModule:
      enabled: false
    UtilityFunction:
      enabled: false
    TooManyStatements:
      enabled: false
```