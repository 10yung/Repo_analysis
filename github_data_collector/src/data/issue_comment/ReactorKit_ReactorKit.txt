i don't known how to use catchError to set error in State
Have you used Reactors to have local state tied to a view, and also Reactors for shared state? We have shared stores built around certain features, and then local view models to derive/combine those where needed, and also dispatch updates. I'm trying to determine if there's a clean way to do this with ReactorKit.

In the Drrrble sample I see a couple different things that look similar. One is sending an action to a shared `Reactor` inside a reducer:

```
func reduce(state: State, mutation: Mutation) -> State {
    var state = state
    switch mutation {
    case let .setRefreshing(isRefreshing):
      state.isRefreshing = isRefreshing
      return state

    case let .setShot(shot):
      state.shotSectionReactor.action.onNext(.updateShot(shot))
      return state

    case let .setComments(comments):
      state.commentSectionItems = comments
        .map(ShotViewCommentCellReactor.init)
        .map(ShotViewSectionItem.comment)
      return state
    }
  }
```

This seems a little clunky (no offense). Then I see that you have shared state that _isn't_ a `Reactor` in the `UserService` class, and that doesn't use the action/reducer flow at all.

It seems like there's probably a solution where you could have a method for converting local actions to global actions and dispatching them to a global `Reactor`. Any thoughts?
for ex.
func transform(action: Observable<Action>) -> Observable<Action>
func transform(state: Observable<State>) -> Observable<State>
i don't known how to use, thanks
I need to run this code "self?.currentState = state" in currentThread immediately not queueing.
Please check my code. "MainScheduler.instance" sometimes queueing such as user tying keyboard rapidly.

```
public func createStateStream() -> Observable<State> {
    let action = self._action.asObservable()
    let transformedAction = self.transform(action: action)
    let mutation = transformedAction
      .flatMap { [weak self] action -> Observable<Mutation> in
        guard let self = self else { return .empty() }
        return self.mutate(action: action).catchError { _ in .empty() }
      }
    let transformedMutation = self.transform(mutation: mutation)
    let state = transformedMutation
      .scan(self.initialState) { [weak self] state, mutation -> State in
        guard let self = self else { return state }
        return self.reduce(state: state, mutation: mutation)
      }
      .catchError { _ in .empty() }
      .startWith(self.initialState)
      .observeOn(getScheduler())
    let transformedState = self.transform(state: state)
      .do(onNext: { [weak self] state in
        self?.currentState = state
      })
      .replay(1)
    
    transformedState.connect().disposed(by: self.disposeBag)
    
    return transformedState
  }

  private func getScheduler() ->  RxSwift.ImmediateSchedulerType {
    if Thread.isMainThread {
        return CurrentThreadScheduler.instance
    } else {
        return MainScheduler.instance
    }
  }

reactor.state
            .subscribe(onNext: { (state) in
                   // here is currentThread. Not queueing.
             })
            .disposed(by: self.disposeBag)
```

I have a Reactor like this:

```swift
class ProductReactor: Reactor {
    
    enum Action {
        case getProduct
        case getLocation(Int)
    }
    
    enum Mutation {
        case updateProduct(Product)
        case updateLocation(Location)
    }
    
    struct State {
        var product: Product?
        var location: Location?
    }
    
    func mutate(action: Action) -> Observable<Mutation> {
        switch action {
        case .getProduct:
            return getProduct().map({ Mutation.updateProduct($0) })
        case .getLocation(let id):
            return getLocation(id).map({ Mutation.updateLocation($0) })
        }
    }
    
    func reduce(state: State, mutation: Mutation) -> State {
        var state = state
        switch mutation {
        case .updateProduct(let p):
            state.product = p
        case .updateLocation(let l):
            state.location = l
        }
        
        return state
    }
    
    func getProduct() -> Observable<Product> {
        return Observable.empty()
    }
    
    func getLocation(_ id: Int) -> Observable<Location> {
        return Observable.empty()
    }
}
```

Initially I trigger `getProduct` action from `viewDidLoad` to get the product. Now I want that after `product` state changed, the `getLocation(_)` action will be triggered automatically inside Reactor to get location from `product.locationId`, without subscribing to state in view. So how to do that, where should I put the action trigger?
100 % reproducible crash on app launch

<img width="1420" alt="image" src="https://user-images.githubusercontent.com/915933/62282103-47b57080-b44f-11e9-9205-813f625a3eaa.png">

This PR is blocked by https://github.com/devxoul/RxExpect/pull/16
This PR closes https://github.com/ReactorKit/ReactorKit/issues/103
This PR closes https://github.com/ReactorKit/ReactorKit/issues/62
First load succeeds but when I try to append the next items and bind it to rxdatasources, it always crushes with the error which says

`Terminating app due to uncaught exception 'NSInternalInconsistencyException', reason: 'attempt to insert row 0 into section 0, but there are only 0 rows in section 0 after the update'`

ViewController
```
func bind(reactor: Reactor) {
        
        // DATASOURCES
        self.tableView.rx.setDelegate(self).disposed(by: self.disposeBag)
        self.tableView.rx.willDisplayCell
            .filter { (arg) -> Bool in
                let (_, indexPath) = arg
                guard arg.indexPath.section == 1 else { return false }
                let rows = self.tableView.numberOfRows(inSection: 1)
                return (self.tableView.cellForRow(at: IndexPath(row: indexPath.row - 1, section: indexPath.section)) != nil && rows - 3 == indexPath.row)
            }
            .filter { _ in reactor.currentState.hasNext }
            .filter { _ in !reactor.currentState.isLoading }
            .map { _ in Reactor.Action.loadNext }
            .bind(to: reactor.action)
            .disposed(by: disposeBag)
        
        let dataSource = RxTableViewSectionedAnimatedDataSource<ItemSection>.init(animationConfiguration: AnimationConfiguration(insertAnimation: .fade, reloadAnimation: .fade, deleteAnimation: .fade), configureCell: { [weak self] dataSource, table, indexPath, item in
            guard let self = self else { return UITableViewCell() }
            if indexPath.section == 0 {
                guard let cell = self.tableView.dequeueReusableCell(withIdentifier: "ProfileCell", for: indexPath) as? MyProfileCell else { return UITableViewCell() }
                guard case let Item.User(user) = item else { return UITableViewCell() }
                cell.reactor = MyProfileCellReactor(parent: self, user: user)
                cell.selectionStyle = UITableViewCell.SelectionStyle.none
                return cell
            } else {
                guard let cell = self.tableView.dequeueReusableCell(withIdentifier: "PostCell", for: indexPath) as? PostCell else { return UITableViewCell() }
                guard case let Item.Post(post) = item else { return UITableViewCell() }
                cell.reactor = PostCellReactor(post: post, likeService: reactor.likeService, commentService: reactor.commentService, viewService: reactor.viewService, likeCount: post.likeCount, commentCount: post.commentCount, viewCount: post.viewCount, isLiked: reactor.likeService.checkIsLiked(post: post), parent: self)
                return cell
            }
        })
        
        // ACTION
        Observable<Void>.just(())
            .map { _ in Reactor.Action.load }
            .bind(to: reactor.action)
            .disposed(by: disposeBag)
        
        // STATE
        reactor.state.asObservable()
            .map { $0.sections }
            .distinctUntilChanged()
            .bind(to: self.tableView.rx.items(dataSource: dataSource))
            .disposed(by: self.disposeBag)
    }
```

Reactor
   ```
 struct State {
        var user: User?
        var posts: [Item]
        var isLoading: Bool
        var sections: [ItemSection] {
            guard let user = user else { return [] }
            guard !self.posts.isEmpty else { return [] }
            let sections: [ItemSection] = [
                ItemSection(model: .MyProfile, items: [Item.User(user)]),
                ItemSection(model: .MyPosts, items: self.posts),
            ]
            return sections.filter { !$0.items.isEmpty }
        }
        var hasNext: Bool
        var lastSnapshot: DocumentSnapshot?
    }

    func reduce(state: State, mutation: Mutation) -> State {
        var newState = state
        switch mutation {
        case let .setUser(user):
            newState.user = user
            newState.user = user
        case let .setPosts(posts, lastSnapshot: lastSnapshot, hasNext: hasNext):
            newState.posts = posts.map({ Item.Post($0) })
            newState.lastSnapshot = lastSnapshot
            newState.hasNext = hasNext
        case let .appendPosts(posts, lastSnapshot: lastSnapshot, hasNext: hasNext):
            newState.posts.append(contentsOf: posts.map({ Item.Post($0) }))
            newState.lastSnapshot = lastSnapshot
            newState.hasNext = hasNext
        case let .setLoading(isLoading):
            newState.isLoading = isLoading
        case .empty:
            print("empty")
        }
        return newState
    }

```

I am so happy if you would help me. Thanks! in advance.
This example is the MVVM project architecture I use for daily development, and I hope it will help beginners like RxSwift and MVVM