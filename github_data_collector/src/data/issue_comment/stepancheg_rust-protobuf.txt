I have a directory which contains other directories which contain .proto files. In the end, I want to have generated .rs files from that proto files in 1 folder. In the examples, I see I need to manually add all the protobuf files, this isn't really what I want, because that is too much handwork.

Is it possible to just say: this is a directory, find and generate all rs files and put them into the output directory?
The `Chars` struct can't use the serde Serialize or Deserialize traits. I've uploaded a repo to show what I'm doing that causes the issue:

* https://github.com/stevethedev/rust-protobuf-chars-bug

It includes the proto file (`proto/user.proto`), the generated file (`src/user.rs`), and the build script that converts them.

The issue is this:

```
$ cargo check
   Compiling protobuf-bug v0.1.0 (_/protobuf-bug)
error[E0277]: the trait bound `protobuf::chars::Chars: serde::Serialize` is not satisfied
  --> src/user.rs:30:43
   |
30 | #[cfg_attr(feature = "with-serde", derive(Serialize, Deserialize))]
   |                                           ^^^^^^^^^ the trait `serde::Serialize` is not implemented for `protobuf::chars::Chars`
   |
   = note: required by `serde::ser::SerializeStruct::serialize_field`

error[E0277]: the trait bound `protobuf::chars::Chars: serde::Deserialize<'_>` is not satisfied
  --> src/user.rs:30:54
   |
30 | #[cfg_attr(feature = "with-serde", derive(Serialize, Deserialize))]
   |                                                      ^^^^^^^^^^^ the trait `serde::Deserialize<'_>` is not implemented for `protobuf::chars::Chars`
   |
   = note: required by `serde::de::SeqAccess::next_element`

error[E0277]: the trait bound `protobuf::chars::Chars: serde::Deserialize<'_>` is not satisfied
  --> src/user.rs:30:54
   |
30 | #[cfg_attr(feature = "with-serde", derive(Serialize, Deserialize))]
   |                                                      ^^^^^^^^^^^ the trait `serde::Deserialize<'_>` is not implemented for `protobuf::chars::Chars`
   |
   = note: required by `serde::de::MapAccess::next_value`

error: aborting due to 3 previous errors

For more information about this error, try `rustc --explain E0277`.
error: could not compile `protobuf-bug`.

To learn more, run the command again with --verbose.
```

System info:
```
$ protoc --version
libprotoc 3.6.1

$ uname -a
Linux _ 5.3.0-2-amd64 #1 SMP Debian 5.3.9-3 (2019-11-19) x86_64 GNU/Linux
```

Turning off the CarlLerche_Bytes option for Strings fixes the issue, but then you're not using bytes for strings anymore.
Hi,

Could you please let me know how to get EnumDescriptor and MessageDescriptor since they are removed? (latest master branch)

https://github.com/stepancheg/rust-protobuf/commit/fb0de59dc027b9c3b845dfc4838bb922ebf0a7a5

Thanks so much,
C
The standard protobuf implementation provides methods to pack and unpack Any values.  These methods automatically set and check the type_url field.

https://developers.google.com/protocol-buffers/docs/reference/cpp-generated#any

protobuf 2.9 release has broken prometheus 0.7.

Could you yank it and re-release it as 3.0?


```cpp
google::protobuf::Descriptor* desc =
    google::protobuf::DescriptorPool::generated_pool()
        ->FindMessageTypeByName("mypkg.MyType");
google::protobuf::Message* message =
    google::protobuf::MessageFactory::generated_factory()
        ->GetPrototype(desc)->New();

```

how can i create a Message instance by `mpkg.MyType`?
thanks a lot
I'm working with hundreds of `.proto` files, so it's not practical for me to manually set up a module hierarchy to mirror the protobuf package hierarchy.

Some of these `.proto` files have the same name as others. So even if I did something in my `build.rs` like suggested here https://github.com/stepancheg/rust-protobuf/issues/324#issuecomment-476109276 then I'd still run into trouble with the output.

What I'd really like is an option in `protobuf-codegen-pure` (controlled via [`Customize`](https://docs.rs/protobuf-codegen-pure/2.8.0/protobuf_codegen_pure/struct.Customize.html)) to automatically generate a directory hierarchy and Rust module hierarchy to match the protobuf package hierarchy. If you're open to the idea, I could take a swing at implementing this.
First of all, thanks for this great repository @stepancheg!

I find my self wanting to implement the enum slightly differently for some reasons:
1. simplified `match`.
2. unknown value from future proto definition expansion is kept.

something like:
```rust
pub enum EnumType {
    UNKNOWN = 0,
    VALUE1 = 1,
    VALUE2 = 2,
    Undefined(i32),
}

impl ::protobuf::ProtobufEnum for EnumType {
    ....
    fn from_i32(value: i32) -> EnumType {
        match value {
            0 => EnumType::UNKNOWN,
            1 => EnumType::VALUE1,
            2 => EnumType::VALUE2,
            i => EnumType::Undefined(i),
        }
    }
    ....
}
```
So in the place where I want to `match` the emun value, instead of matching for `option` as well as the enum, I can just do:
```rust
fn do_some_thing() {
    match property.enum_type_value {
        EnumType::UNKNOWN => {},
        EnumType::VALUE1 => {},
        EnumType::VALUE2 => {},
        EnumType::Undefined(i) => {
            println!(format!("undefined enum type value {}", i));
        },
    }
}
```
compares to:
```rust
fn do_some_thing() {
    match property.enum_type_value {
        Some(value) => {
            match value {
                EnumType::UNKNOWN => {},
                EnumType::VALUE1 => {},
                EnumType::VALUE2 => {},
            }
        },
        None => {
            println!("undefined enum type value, and it is lost");
        },
    }
}
```

I'm new to rust, so the code gen macro is a bit overwhelming to me, I could not figure out where I can try this change unfortunately. I think this implementation certainly simplifies the usage of enum utilising of the more powerful rust enum compares to other languages, and makes the generated code more future prove following the same concept how protobuf definition can be expanded.

Thanks!
When using codegen to generate codes, it can fail on windows platform when the input protos are scanned instead listed by hand:

```
'file not found in file descriptors: "grpc/testing\\control.proto", files: ["grpc/testing/payloads.proto", "grpc/testing/stats.proto", "grpc/testing/control.proto", "grpc/testing/empty.proto", "grpc/testing/messages.proto", "grpc/testing/services.proto", "grpc/testing/test.proto"]', src\libcore\option.rs:1036:5
stack backtrace:
   0: std::sys::windows::backtrace::set_frames
             at /rustc/a53f9df32fbb0b5f4382caaad8f1a46f36ea887c\/src\libstd\sys\windows\backtrace\mod.rs:95
   1: std::sys::windows::backtrace::unwind_backtrace
             at /rustc/a53f9df32fbb0b5f4382caaad8f1a46f36ea887c\/src\libstd\sys\windows\backtrace\mod.rs:82
   2: std::sys_common::backtrace::_print
             at /rustc/a53f9df32fbb0b5f4382caaad8f1a46f36ea887c\/src\libstd\sys_common\backtrace.rs:71
   3: std::sys_common::backtrace::print
             at /rustc/a53f9df32fbb0b5f4382caaad8f1a46f36ea887c\/src\libstd\sys_common\backtrace.rs:59
   4: std::panicking::default_hook::{{closure}}
             at /rustc/a53f9df32fbb0b5f4382caaad8f1a46f36ea887c\/src\libstd\panicking.rs:197
   5: std::panicking::default_hook
             at /rustc/a53f9df32fbb0b5f4382caaad8f1a46f36ea887c\/src\libstd\panicking.rs:211
   6: std::panicking::rust_panic_with_hook
             at /rustc/a53f9df32fbb0b5f4382caaad8f1a46f36ea887c\/src\libstd\panicking.rs:474
   7: std::panicking::continue_panic_fmt
             at /rustc/a53f9df32fbb0b5f4382caaad8f1a46f36ea887c\/src\libstd\panicking.rs:381
   8: std::panicking::rust_begin_panic
             at /rustc/a53f9df32fbb0b5f4382caaad8f1a46f36ea887c\/src\libstd\panicking.rs:308
   9: core::panicking::panic_fmt
             at /rustc/a53f9df32fbb0b5f4382caaad8f1a46f36ea887c\/src\libcore\panicking.rs:85
  10: core::option::expect_failed
             at /rustc/a53f9df32fbb0b5f4382caaad8f1a46f36ea887c\/src\libcore\option.rs:1036
  11: core::option::Option<protobuf::descriptor::FileDescriptorProto**>::expect<protobuf::descriptor::FileDescriptorProto**>
             at /rustc/a53f9df32fbb0b5f4382caaad8f1a46f36ea887c\src\libcore\option.rs:314
  12: protobuf_codegen::gen
             at C:\Users\travis\.cargo\registry\src\github.com-1ecc6299db9ec823\protobuf-codegen-2.8.0\src\lib.rs:209
  13: protobuf_codegen::gen_and_write
             at C:\Users\travis\.cargo\registry\src\github.com-1ecc6299db9ec823\protobuf-codegen-2.8.0\src\lib.rs:224
```
Developer may not have protoc installed, bundle binaries inside the crate can solve a common compilation error that protoc is missing.