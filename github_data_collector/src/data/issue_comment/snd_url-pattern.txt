- [x] convert coffeescript to high quality typescript
- [x] make all tests pass again
- [x] fix all typescript linter and compiler errors
- [x] make node tests work again on CI
- [x] convert all tests to typescript
- [x] tests for named wildcards
- [x] document `segmentNameEndChar`
- [x] document named wildcards
- [ ] make browser tests run again with zuul on saucelabs
- [x] get code coverage working again
- [ ] reach 100% code coverage
- [ ] push code coverage to codecov.io
- [x] figure out typescript build
- [ ] use babel to add set polyfill in parcel build
- [Â ] freshen up README.md
- [ ] freshen up package.json
- [x] remove returns and autogenerated comments in tape tests
- [x] support `segmentNameEndChar` https://github.com/snd/url-pattern/issues/49
- [x] change default charset https://github.com/snd/url-pattern/issues/33
- [x] tests for new default charset
- [x] add support for named wildcards https://github.com/snd/url-pattern/pull/44/files
- [ ] auto generate documentation and link to it
  - `npm run doc`
- [ ] update changelog
- [ ] publish 2.0.0 to NPM
  - https://www.typescriptlang.org/docs/handbook/declaration-files/publishing.html
  - https://medium.com/cameron-nokes/the-30-second-guide-to-publishing-a-typescript-package-to-npm-89d93ff7bccd
  - https://codeburst.io/https-chidume-nnamdi-com-npm-module-in-typescript-12b3b22f0724
- [ ] publish to deno third party modules https://deno.land/x/
I understand most libraries use:

/users/:id

but Swagger, the no1 lib for defining API contracts and mocking, uses:

/users/{id}

I need to parse the Swagger-style syntax.

This is a request for that support to be added.

Thanks
Firstly - I have already created a pull request for this feature, I realise the contributing guidelines say not to do this, but in my case I needed the feature anyway and am using that build in my routing library: https://github.com/downplay/jarl-react

So, I will not be too concerned if the pull request is ultimately declined, as I will carry on using my fork anyway, but I am opening this issue as it would still be nice to see the functionality in the main package, and am happy to discuss any changes to make this happen. I am also aware that this feature has been mentioned elsewhere and is probably desirable (but maybe you were thinking of different syntax).

The pull request is here: https://github.com/snd/url-pattern/pull/44

The syntax I have implemented for named wildcards is: `/*:path` which will capture everything into `path` instead of `_`. I chose this syntax because it is unambiguous compared to existing syntax and did not break any existing tests, and I feel the meaning is instantly clear when reading the syntax.

I've added a complete set of tests for the syntax, BUT I did not update any documentation - if discussion is positive then I am happy to also update the docs and add to the pull request.

I look forward to feedback!
It felt weird and inconsistent that wildcard captures cannot be named. As I am using url-pattern in a routing library I want to make the interface simple for catch-all routes and a named wildcard seems a far better API than making the user map `_` to something more friendly later.

This patch allows the syntax `*:name` to name a wildcard rather than using the magic key `_`. Wildcards can still be unnamed so this does not break any existing functionality.

This syntax was chosen because it was in any case ambiguous under the old parsing rules, this clears up an ambiguity whilst adding useful new behaviour.

Tests have been added but docs have not been updated yet, if this functionality is desired in master then I will write some updates to the readme as well. 
How do you feel about making urlPatternInstance.names a part of the public API?  It helps my use case to know what parameter names are used in the pattern string.

the current default is unexpected to some.

it's likely that this change will meet more expectations than the current default.

breaking change

see #32 
