Does SwS support multi-part data transfer? Or how I can use 3rd-party lib to do this in SwS? 
Currently, successive calls to `Response::send` may queue data to be sent twice. For example, the following will send "foo.foo.foo.bar.bar.baz.", when it should only send "foo.bar.baz.":

```c++
*response << "foo.";
response->send();
*response << "bar.";
response->send();
*response << "baz.";
response->send();
```

This pull request fixes the issue by taking a snapshot of the buffer before sending it. It also contains a unit test that fails with the old code but passes with the new. No other unit tests are broken by this code.
Hi 

How can avoid the SSL Pinning in this ?
Fool the domain name using hosts file where the server runs.

warning C4996

'boost::asio::basic_socket<Protocol>::cancel': By default, this function always fails with operation_not_supported when used on Windows XP, Windows Server 2003, or earlier. Consult documentation for details.	

test	C:\lib\simplewebserver\client_http.hpp	129	


It would be very useful if the HttpClient::request() function would return an awaitable type for use in coroutines. ([See the "Naked Coroutines" talk by Gor Nishanov.](https://www.youtube.com/watch?v=UL3TtTgt3oU))
The library can use standalone ASIO and Boost ASIO. Because ASIO has a [new incarnation in the C++ standard itself (The Networking TS)](http://cplusplus.github.io/networking-ts/draft.pdf) AND [a compatibility layer](https://www.boost.org/doc/libs/1_66_0/doc/html/boost_asio/net_ts.html), the Networking TS should be the sole target in future versions. This should make Simple-Web-Server more portable and I believe removes ALL external dependencies.
We get an error in 

  Server(const std::string& cert_file, const std::string& private_key_file, const std::string& verify_file=std::string()):
                ServerBase<HTTPS>::ServerBase(443), context(boost::asio::ssl::context::tlsv12) {
            context.use_certificate_chain_file(cert_file);
            context.use_private_key_file(private_key_file, boost::asio::ssl::context::pem);
            
            if(verify_file.size()>0) {
                context.load_verify_file(verify_file);
                context.set_verify_mode(boost::asio::ssl::verify_peer | boost::asio::ssl::verify_fail_if_no_peer_cert |
                                        boost::asio::ssl::verify_client_once);
                set_session_id_context=true;
            }
        }

we get four error

1. function "boost::asio::ssl::context::context(const boost::asio::ssl::context &)" (declared implicitly) cannot be referenced -- it is a deleted function	server_https.hpp	

2. class "boost::asio::ssl::context" has no member "tlsv12" server_https.hpp

3. 'tlsv12': is not a member of 'boost::asio::ssl::context' server_https.hpp	

4. 'tlsv12': undeclared identifier server_https.hpp	
I find a problem when I use server_http.hpp(old version) in http.
![qq 20180418201558](https://user-images.githubusercontent.com/22476651/38931524-0277b97e-4303-11e8-9c8e-ecd4d276770e.png)
"response" is a shared_ptr<HttpServer:: Response> type. In this way, *response can send data to the client.
However,
![qq 20180418201650](https://user-images.githubusercontent.com/22476651/38931639-64551902-4303-11e8-81b2-3ce956b41f42.png)
![qq 20180418202443](https://user-images.githubusercontent.com/22476651/38931707-9f59ef0a-4303-11e8-9999-b58e50a1e48c.jpg)
When I let "Res" equal to "response",*response can not send data to the client.

Why I can't pass  a shared_ptr<HttpServer:: Response> to another.

![image](https://user-images.githubusercontent.com/31401782/37883051-d35db632-30da-11e8-94c8-0072ecbcfa4b.png)
![image](https://user-images.githubusercontent.com/31401782/37883099-094f7816-30db-11e8-8348-f6e7367e86b3.png)
