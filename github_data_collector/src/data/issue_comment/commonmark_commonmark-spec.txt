Sometimes I will have to deal with a long link, like this:

https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/String/lastIndexOf

I prefer to wrap long links if possible. This is allowed with reStructuredText:

~~~
lastIndexOf_

.. _lastIndexOf: https://developer.mozilla.org/docs/Web/JavaScript/
   Reference/Global_Objects/String/lastIndexOf
~~~

and also with AsciiDoc via link syntax:

~~~
link:++https://developer.mozilla.org/docs/Web/JavaScript/Reference/
Global_Objects/String/lastIndexOf++[lastIndexOf]
~~~

or variable syntax:

~~~
:js: https://developer.mozilla.org/docs/Web/JavaScript/Reference

{js}/Global_Objects/String/lastIndexOf
~~~

Does MarkDown have some way to deal with this?

- https://asciidoctor.org/docs/asciidoc-syntax-quick-reference#links
- https://asciidoctor.org/docs/user-manual#attributes
- https://docutils.sourceforge.io/docs/user/rst/quickref.html#hyperlink-targets

If I wish to include a file, it is possible with reStructuredText:

~~~
.. include:: app.php
~~~

https://docutils.sourceforge.io/docs/ref/rst/directives.html#include

and AsciiDoc:

~~~
include::app.php[]
~~~

https://asciidoctor.org/docs/asciidoc-syntax-quick-reference#include-files

and Org Mode:

~~~
#+INCLUDE: "app.php"
~~~

https://orgmode.org/manual/Include-files.html

I think it should be possible to do this with MarkDown.

What the spec says:

> A link title consists of either
>
> - a sequence of zero or more characters between straight double-quote characters ("), including a " character only if it is backslash-escaped, or
>
> - a sequence of zero or more characters between straight single-quote characters ('), including a ' character only if it is backslash-escaped, or
>
> - a sequence of zero or more characters between matching parentheses ((...)), including a ( or ) character only if it is backslash-escaped.
>
> Although link titles may span multiple lines, they may not contain a blank line.

But if block starts like `#`, `>`, `*` start a new line of link title. The Link will be broken.

I see that the reference CommonMark javascript implementation first parses link reference definition lines into a paragraph, then tries to parse it as a link reference definition. But block starts like `#`,`*` and `>` as well as blank lines break Paragraphs. So, the link reference definitions are also broken.

```javascript
    paragraph: {
        continue: function(parser) {
            return (parser.blank ? 1 : 0);
        },
        finalize: function(parser, block) {
            var pos;
            var hasReferenceDefs = false;

            // try parsing the beginning as link reference definitions:
            while (peek(block._string_content, 0) === C_OPEN_BRACKET &&
                   (pos =
                    parser.inlineParser.parseReference(block._string_content,
                                                       parser.refmap))) {
                block._string_content = block._string_content.slice(pos);
                hasReferenceDefs = true;
            }
            if (hasReferenceDefs && isBlank(block._string_content)) {
                block.unlink();
            }
        },
        canContain: function() { return false; },
        acceptsLines: true
    }
```

Example link reference definition ([dingus link](https://spec.commonmark.org/dingus/?text=%5Bfoo%5D%3A%20%2Furl%20%22%0Afirst%20line%0A%23%20this%20should%20be%20a%20heading%0Asecond%20line%0A%22)):

```markdown
[foo]: /url "
first line
# this should be a heading
second line
"
```

Just think that `#`, `>`,`*`, especially blank lines are  common in Titles, for example, [a commit message in commonmark.js](https://github.com/commonmark/commonmark.js/commit/a7eb3af149a7e22526a3eb40216504d2ecdd0c8a):

```plain
dingus: add dependency version requirements (#159)

* dingus: add dependency version requirements

Dingus was rendering incorrectly with Bootstrap 4. Added a bower.json
which requires Bootstrap, jQuery and Lodash with major version equal
to what's currently live. Likewise the minimum patch version.

* dingus: require lodash ^4.17.11.
```

what GitHub rendered:

```html
<a data-pjax="true" title="dingus: add dependency version requirements (#159)

* dingus: add dependency version requirements

Dingus was rendering incorrectly with Bootstrap 4. Added a bower.json
which requires Bootstrap, jQuery and Lodash with major version equal
to what's currently live. Likewise the minimum patch version.

* dingus: require lodash ^4.17.11." class="link-gray" href="/commonmark/commonmark.js/commit/a7eb3af149a7e22526a3eb40216504d2ecdd0c8a">dingus: add dependency version requirements (</a>
```

Adding backslashs seems to work. but the spec doesn't statement this.

If I try to use backslash to escape a new line, the new line preserves (not be a space), so does the backslash. ([dingus link](https://spec.commonmark.org/dingus/?text=%5Bfoo%5D%3A%20%2Furl%20%22%0Afirst%20line%0A%5C%23%20not%20a%20heading%0A%5C%0Asecond%20line%0A%22%0A%0A%5Bfoo%5D))

```markdown
[foo]: /url "
first line
\# not a heading
\
second line
"

[foo]
```

The CommonMark-spec.json document contains the examples from the specification in a machine readable format. These examples are divided into "matches" and "non matches". However, the only way to know this is by interpreting the HTML example, which requires further analyzation.

Therefore I would like to ask for inclusion of an indicator, that associates the example with one of the current states valid/invalid, by adding a boolean to the JSON as shown in the following example via the `valid` key:

```json
  {
    "markdown": "Foo\n\nbar\n---\nbaz\n",
    "html": "<p>Foo</p>\n<h2>bar</h2>\n<p>baz</p>\n",
    "example": 73,
    "start_line": 1331,
    "end_line": 1341,
    "section": "Setext headings",
    "valid": false
  }
```

Additional comfort may be reached by adding the chapter number and a direct URL to the document fragment, like:

```json
  {
    "markdown": "Foo\n\nbar\n---\nbaz\n",
    "html": "<p>Foo</p>\n<h2>bar</h2>\n<p>baz</p>\n",
    "example": 73,
    "start_line": 1331,
    "end_line": 1341,
    "chapter": "4-3",
    "section": "Setext headings",
	"url": "https://spec.commonmark.org/0.29/#example-74",
    "valid": false
  }
```

This is more for the human reader, to be able to quickly look up the example in the spec.

It may also be interesting to evaluate, whether the HTML is better or whether it would be better to use the XML AST in place of the `html` key. Since not all implementations are going to be AST based, that may be a bad idea, though, the AST may be added in addition via an `ast` key.

Background: currently I am trying to write a CommonMark parser against `CommonMark-spec.json` and find it tedious to create an extra parser, just to verify, that the data associated with the `html` key represents the desired result in the specification. Of course, I am open for suggestions, should there be an easy way, that escaped my understanding. Thank you.

EDIT: I am aware, that the results the tests express are often not as simple as match/nomatch, but for the start of developing a tokenizer, such a division would already be a lot of help.
* Remove line tab and form feed from “whitespace”
* Rename `newline` to line feed (the LF, `\n` character) or line ending (the concept)
* Remove the “whitespace” grouping, and be explicit everywhere whether spaces as indentation; spaces; spaces or tabs; spaces, tabs, and up to one line ending; is allowed
* Rename “Punctuation” to “Unicode punctuation”, to disambiguate it more clearly from “ASCII punctuation”
* Reword line breaks, in some cases they meant line endings, blank lines, or either hard or soft line breaks

---

This is a substantial change and needs a thorough review

Open questions:
- Do tabs play a role in how spaces in the inline code span algorithm are stripped and merged?
- What about whitespace in HTML tags? Those are used block HTML of kind 7, which can only be on one line and therefore does not support line endings as whitespace, and inline HTML. HTML [understands form feed as whitespace](https://infra.spec.whatwg.org/#ascii-whitespace) here
- Character references are allowed everywhere, except in fenced code, indented code, or code spans
- They represent their resolved character, not syntax

There’s even [example 318](https://spec.commonmark.org/0.29/#example-318) of having them in link definition destinations and link definition titles.

But, [the following does not resolve into a link](https://spec.commonmark.org/dingus/?text=%5B%26copy%3B%5D%3A%20example.com%0A%0A%5B©%5D%0A):

```markdown
[&copy;]: example.com

[©][]
```

---

I interpret the spec as saying that it should resolve, but then the dingus doesn’t.
This may be a bug for the dingus implementation, rather than the spec.
The HTML spec (no longer?) does not reference “entities”. Instead, there are two/three types of character references: named, numerical (hexadecimal or decimal). (for reference: <https://html.spec.whatwg.org/multipage/parsing.html#character-reference-state>)

I think rewording the CM spec to use the term “character references” is good, it would be more in line with HTML, and simplify phrases such as “Entity and character references”, or naming escapes and character references as two mechanisms similar mechanisms.
[Decimal numeric character references](https://spec.commonmark.org/0.29/#decimal-numeric-character) references “Invalid Unicode code points”, but nowhere is it defined what those are.

Hexadecimal numeric character references do not mention this limitation, but I guess imply it (with “They too are parsed as the corresponding Unicode character”).

The HTML spec defines several limitations on numerical character references: <https://html.spec.whatwg.org/multipage/parsing.html#numeric-character-reference-end-state>, so I’m guessing some or all of that applies to CM as well.

However, HTML defines that some “invalid” references map to other characters (the table at the bottom of the linked section).

---

Why mention code points instead of characters? Is it just surrogates?
The input `    ***` without a newline at the end gets a newline added by the current [dingus](https://spec.commonmark.org/dingus/?text=%20%20%20%20***). This is sensible, because a normal fenced code block as a trailing newline.

~~~
```
code to the end
~~~

The same should be required for [fenced code blocks without a closing fence](https://spec.commonmark.org/dingus/?text=~~~%0A***).
In [Example 379](https://spec.commonmark.org/0.29/#example-379),

```markdown
a**"foo"**
```

is not strong emphasis, because the opening ** is preceded by an alphanumeric and followed by punctuation, and hence not part of a left-flanking delimiter run.

So the result is : 
```html
<p>a**&quot;foo&quot;**</p>
```

However, punctuation includes some meaningful characters such as `(backtick), < and >. So the opening ** in the following examples are not valid delimiters. 

```markdown
a**`foo`**

a**<span>foo</span>**
```
is converted to :

```html
<p>a**<code>foo</code>**</p>
<p>a**<span>foo</span>**</p>
```

The problem is that without the exception of these meaningful punctuations, there is no way to express these use cases without inserting unnecessary whitespace between ** and preceding alphanumeric. 

```markdown
a **`foo`**

a **<span>foo</span>**
```
is converted to :  

```html
<p>a <strong><code>foo</code></strong></p>
<p>a <strong><span>foo</span></strong></p>
```

Is this intended behavior or something not considered as a specification?