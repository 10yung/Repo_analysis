I've been following the tutorial at https://nphysics.org/nphysics_testbed/ with some minor alterations but I can't understand what the `look_at()` method is doing. I have created a window and set the look_at position to the center of the view window (in theory) but this is not what appears.

Example code:
```rust
const WIDTH: f32 = 60.0;
const HEIGHT: f32 = 40.0;

fn main() {
    let mechanical_world = DefaultMechanicalWorld::new(Vector2::new(0.0, 0.0));
    let geometrical_world = DefaultGeometricalWorld::new();

    let mut bodies = DefaultBodySet::new();
    let mut colliders = DefaultColliderSet::new();
    let joint_constraints = DefaultJointConstraintSet::new();
    let force_generators = DefaultForceGeneratorSet::new();

    // Build a static ground body and add it to the body set.
    let ground_handle = bodies.insert(Ground::new());

   /// .. Spawn some objects at center and axis ...

    let mut testbed = Testbed::new_empty();

    // Tell the testbed your ground has an handle equal to `ground_handle`.
    // This will make it be drawn in gray.
    testbed.set_ground_handle(Some(ground_handle));
    // Provide to the testbed all the components of our physics simulation.
    testbed.set_world(
        mechanical_world,
        geometrical_world,
        bodies,
        colliders,
        joint_constraints,
        force_generators,
    );
    // Adjust the initial camera pose.
    let center = Point2::new(WIDTH / 2.0, HEIGHT / 2.0);
    println!("Center = {}", center);
    testbed.look_at(center, 20.0);
    testbed.add_callback(tick);
    testbed.run();
}
```
When run I get this window which is not the center I put in:
![Screenshot from 2019-12-19 12-37-53](https://user-images.githubusercontent.com/1353401/71174229-9d52b400-225c-11ea-9240-6daede89ba6e.png)

Is there a bug in the `look_at()` method or is there something we could add to the documentation to make it clearer what the expected behavior is?
In the 2D plasticity web demo, rapidly clicking on any of the platforms causes a panic.
```
Panic error message: called `Option::unwrap()` on a `None` value
__cargo_web_snippet_97495987af1720d8a9a923fa4683a7b683e3acd6
_ZN6stdweb7webcore14initialization10initialize28_$u7b$$u7b$closure$u7d$$u7d$17he157f34f8c851715E
_ZN3std9panicking20rust_panic_with_hook17h868a29d5aa6e3f6fE
_ZN3std9panicking18continue_panic_fmt17h5bc0f5dc42367f4bE
rust_begin_unwind
_ZN4core9panicking9panic_fmt17h52bd9c4c06b66d8dE
_ZN4core9panicking5panic17h1fb303f1c113605dE
_ZN85_$LT$nphysics_testbed2d..testbed..Testbed$u20$as$u20$kiss3d..window..state..State$GT$4step17h8f216363b0a9a2dbE
_ZN229_$LT$stdweb..webcore..newtype..Newtype$LT$$LP$stdweb..webcore..serialization..FunctionTag$C$$u20$$LP$A12$C$$RP$$RP$$C$stdweb..webcore..once..Once$LT$F$GT$$GT$$u20$as$u20$stdweb..webcore..serialization..FuncallAdapter$LT$F$GT$$GT$15funcall_adapter17hfa87527c98056e7dE
Module.STDWEB_PRIVATE.dyncall
output
```
Everything in the demo is at default settings. Replicated in Firefox 60.8.0esr and Chrome 78.0.3904.87 on Windows 10.
HEAD: 314bade

The first kind of crash can be reproduced pretty reliably by making a single ragdoll stuck in the platform and then dragging it around furiously until it passes through:
https://youtu.be/6nXL79nJV7M

On one occasion this happened randomly even before any ragdoll stuck:
https://youtu.be/KhtL3aqTDm8

Backtrace:
```
thread 'main' panicked at 'assertion failed: min_bound == min_bound', /home/burjui/.cargo/registry/src/github.com-1ecc6299db9ec823/ncollide3d-0.20.1/src/query/algorithms/gjk.rs:318:9
stack backtrace:
   0:     0x557960fea298 - backtrace::backtrace::libunwind::trace::hfe5db90796807973
                               at /cargo/registry/src/github.com-1ecc6299db9ec823/backtrace-0.3.29/src/backtrace/libunwind.rs:88
   1:     0x557960fea298 - backtrace::backtrace::trace_unsynchronized::h34b865a835594335
                               at /cargo/registry/src/github.com-1ecc6299db9ec823/backtrace-0.3.29/src/backtrace/mod.rs:66
   2:     0x557960fea298 - std::sys_common::backtrace::_print::h527254ae44989167
                               at src/libstd/sys_common/backtrace.rs:47
   3:     0x557960fea298 - std::sys_common::backtrace::print::he85dd5ddddf46503
                               at src/libstd/sys_common/backtrace.rs:36
   4:     0x557960fea298 - std::panicking::default_hook::{{closure}}::h847a2eb38b396f14
                               at src/libstd/panicking.rs:200
   5:     0x557960fe99f8 - std::panicking::default_hook::h2ca0f9a30a0e206b
                               at src/libstd/panicking.rs:214
   6:     0x557960fe99f8 - std::panicking::rust_panic_with_hook::hffcefc09751839d1
                               at src/libstd/panicking.rs:477
   7:     0x557960d8a9a4 - std::panicking::begin_panic::hdaa2c6457d26e4a5
   8:     0x557960d5b181 - ncollide3d::query::algorithms::gjk::cast_ray::h798d373ebdde898a
   9:     0x557960d5d9b6 - ncollide3d::query::ray::ray_support_map::<impl ncollide3d::query::ray::ray::RayCast<N> for ncollide3d::shape::capsule::Capsule<N>>::toi_and_normal_with_ray::h4e84db7c3da5c371
  10:     0x557960db0725 - <ncollide3d::pipeline::glue::query::InterferencesWithRay<N,Objects> as core::iter::traits::iterator::Iterator>::next::h91028a1fee708dcc
  11:     0x557960df4435 - <nphysics_testbed3d::testbed::Testbed as kiss3d::window::state::State>::step::hbeba048060d708e1
  12:     0x557960def8f2 - nphysics_testbed3d::testbed::Testbed::run::h97fe67eb43f5fe3e
  13:     0x557960d98bd5 - ragdoll3::main::ha5e53870a40f6722
  14:     0x557960d8a973 - std::rt::lang_start::{{closure}}::h26d49a7699508ac5
  15:     0x557960d993ce - main
  16:     0x7f3a6fb4eee3 - __libc_start_main
  17:     0x557960d4830e - _start
  18:                0x0 - <unknown>
```

The second kind happens usually when multiple ragdolls are stuck:
https://youtu.be/i7PrM-kAQTQ
https://youtu.be/nTEpTm-BBzA

Backtrace:
```
thread 'main' panicked at 'index out of bounds: the len is 0 but the index is 0', /rustc/eae3437dfe991621e8afdc82734f4a172d7ddf9b/src/libcore/slice/mod.rs:2681:10
stack backtrace:
   0:     0x55654e4e8298 - backtrace::backtrace::libunwind::trace::hfe5db90796807973
                               at /cargo/registry/src/github.com-1ecc6299db9ec823/backtrace-0.3.29/src/backtrace/libunwind.rs:88
   1:     0x55654e4e8298 - backtrace::backtrace::trace_unsynchronized::h34b865a835594335
                               at /cargo/registry/src/github.com-1ecc6299db9ec823/backtrace-0.3.29/src/backtrace/mod.rs:66
   2:     0x55654e4e8298 - std::sys_common::backtrace::_print::h527254ae44989167
                               at src/libstd/sys_common/backtrace.rs:47
   3:     0x55654e4e8298 - std::sys_common::backtrace::print::he85dd5ddddf46503
                               at src/libstd/sys_common/backtrace.rs:36
   4:     0x55654e4e8298 - std::panicking::default_hook::{{closure}}::h847a2eb38b396f14
                               at src/libstd/panicking.rs:200
   5:     0x55654e4e79f8 - std::panicking::default_hook::h2ca0f9a30a0e206b
                               at src/libstd/panicking.rs:214
   6:     0x55654e4e79f8 - std::panicking::rust_panic_with_hook::hffcefc09751839d1
                               at src/libstd/panicking.rs:477
   7:     0x55654e4e751f - std::panicking::continue_panic_fmt::hc0f142c930c846fc
                               at src/libstd/panicking.rs:384
   8:     0x55654e4f34a6 - rust_begin_unwind
                               at src/libstd/panicking.rs:311
   9:     0x55654e4fd8fc - core::panicking::panic_fmt::h2daf88b2616ca2b2
                               at src/libcore/panicking.rs:85
  10:     0x55654e4fd3e4 - core::panicking::panic_bounds_check::h0537ade040df571e
                               at src/libcore/panicking.rs:61
  11:     0x55654e2668c4 - ncollide3d::shape::convex_polygonal_feature3::ConvexPolygonalFeature<N>::clip::hd64aeb96e0b16387
  12:     0x55654e287cde - <ncollide3d::pipeline::narrow_phase::contact_generator::convex_polyhedron_convex_polyhedron_manifold_generator::ConvexPolyhedronConvexPolyhedronManifoldGenerator<N> as ncollide3d::pipeline::narrow_phase::contact_generator::contact_manifold_generator::ContactManifoldGenerator<N>>::generate_contacts::h7a6e1e0f464eb4f7
  13:     0x55654e267d37 - ncollide3d::pipeline::narrow_phase::contact_generator::capsule_shape_manifold_generator::CapsuleShapeManifoldGenerator<N>::do_update::hb4bfa1b436000e39
  14:     0x55654e28209b - <ncollide3d::pipeline::narrow_phase::contact_generator::capsule_shape_manifold_generator::CapsuleShapeManifoldGenerator<N> as ncollide3d::pipeline::narrow_phase::contact_generator::contact_manifold_generator::ContactManifoldGenerator<N>>::generate_contacts::h24f8fb9935b1f12b
  15:     0x55654e31176a - ncollide3d::pipeline::narrow_phase::narrow_phase::NarrowPhase<N,Handle>::update_contact::hecb048bc6cab1937
  16:     0x55654e306fe9 - nphysics3d::world::geometrical_world::GeometricalWorld<N,Handle,CollHandle>::perform_narrow_phase::he9795cfd01e0fcc1
  17:     0x55654e3046ac - nphysics3d::world::mechanical_world::MechanicalWorld<N,Bodies,CollHandle>::step::hb55ac3b528b496a8
  18:     0x55654e2f3629 - <nphysics_testbed3d::testbed::Testbed as kiss3d::window::state::State>::step::hbeba048060d708e1
  19:     0x55654e2ed8f2 - nphysics_testbed3d::testbed::Testbed::run::h97fe67eb43f5fe3e
  20:     0x55654e296bd5 - ragdoll3::main::ha5e53870a40f6722
  21:     0x55654e288973 - std::rt::lang_start::{{closure}}::h26d49a7699508ac5
  22:     0x55654e2973ce - main
  23:     0x7fceed906ee3 - __libc_start_main
  24:     0x55654e24630e - _start
  25:                0x0 - <unknown>
```
I notice that `DefaultMechanicalWorld` is not really a replacement for `nphyics3d::world::World` from v0.11 but rather a sub-set. Whatever reason the geometry/collider world, body, collider, joint and force sets are now separate, the examples show that these often do not need to be used separately.

Is it worth adding a type akin to the old `World` to wrap all the above (and likely also ease migration from v0.11)?
To demonstrate the issue I made the following test, which should be self-explaining.
Notice the use of `position` in the collider description builder vs. `set_position`.

```

#[test]
pub fn test() {
    use nalgebra::{Isometry3, Vector3};
    use ncollide3d::shape::{Cuboid, ShapeHandle};
    use nphysics3d::{
        force_generator::DefaultForceGeneratorSet,
        joint::DefaultJointConstraintSet,
        object::{BodyPartHandle, ColliderDesc, DefaultBodySet, DefaultColliderSet, Ground},
        world::{DefaultGeometricalWorld, DefaultMechanicalWorld},
    };

    // world
    let mut mechanical_world = DefaultMechanicalWorld::new(Vector3::new(0.0, -9.81, 0.0));
    let mut geometrical_world = DefaultGeometricalWorld::<f32>::new();
    let mut bodies = DefaultBodySet::<f32>::new();
    let mut colliders = DefaultColliderSet::new();
    let mut joint_constraints = DefaultJointConstraintSet::<f32>::new();
    let mut force_generators = DefaultForceGeneratorSet::<f32>::new();

    // ground
    let ground_thickness = 0.2;
    let ground_shape = ShapeHandle::new(Cuboid::new(Vector3::new(3.0, ground_thickness, 3.0)));

    let ground_handle = bodies.insert(Ground::new());
    let co = ColliderDesc::new(ground_shape)
        .translation(Vector3::y() * -ground_thickness)
        .build(BodyPartHandle(ground_handle, 0));
    colliders.insert(co);

    let cuboid = ShapeHandle::new(Cuboid::new(Vector3::repeat(0.2)));
    let isometry = Isometry3::translation(1.0, 1.0, 1.0);

    // collider 1
    let co_1 = ColliderDesc::new(cuboid.clone())
        .position(Isometry3::translation(1.0, 1.0, 1.0))
        .build(BodyPartHandle(ground_handle, 0));
    let co_handle_1 = colliders.insert(co_1);

    assert_eq!(colliders.get(co_handle_1).unwrap().position(), &isometry);

    // collider 2
    let mut co_2 = ColliderDesc::new(cuboid.clone()).build(BodyPartHandle(ground_handle, 0));
    co_2.set_position(Isometry3::translation(1.0, 1.0, 1.0));
    let co_handle_2 = colliders.insert(co_2);

    assert_eq!(colliders.get(co_handle_2).unwrap().position(), &isometry);

    mechanical_world.step(
        &mut geometrical_world,
        &mut bodies,
        &mut colliders,
        &mut joint_constraints,
        &mut force_generators,
    );

    // passes
    assert_eq!(colliders.get(co_handle_1).unwrap().position(), &isometry);

    // fails!
    assert_eq!(colliders.get(co_handle_2).unwrap().position(), &isometry);
}
```
The link to https://nphysics.org/demo_sensor3/ found on https://nphysics.org/interaction_handling_and_sensors/ in the sentence "The sensor demo shows a ball-shaped sensor attached to a cube. All colliders (except the ground) that intersect this ball are colored in yellow." is broken.
Hi, it would be great to enable/disable a collider separately from a rigid body.

This would also allow cases where some specific colliders on a body could be enabled/disabled without disabling the body itself.
Currently, only one constraint solver is available and implemented in the `MoreauJeanSolver` struct. For research purposes I'm working on other constraint solver implementations (though they are far too specialized at the moment to contribute them anytime soon). At the moment there is no simple way of implementing and switching between different solvers in `nphysics` without forking it and implementing everything inside of the fork.

First of all, I would propose to add a `ConstraintSolver` trait that requires all functions that are currently called on the [`MoreauJeanSolver`](https://nphysics.org/rustdoc/nphysics3d/solver/struct.MoreauJeanSolver.html) by the `MechanicalWorld` or should be part of the solver interface in general. This includes at least the functions [`step`](https://nphysics.org/rustdoc/nphysics3d/solver/struct.MoreauJeanSolver.html#method.step) and [`step_ccd`](https://nphysics.org/rustdoc/nphysics3d/solver/struct.MoreauJeanSolver.html#method.step_ccd). It might also include the `set_contact_model` function but I'm not 100% sure if this has to be required for the trait.

The second point would be how different solver types get handled by the world. This could be done either through generics or using a trait object. 

The first approach would be easier to combine with the current design of the `MechanicalWorld` and its methods. I think this would just require to add a generic `Solver: ConstraintSolver` parameter to the world and accordingly change the type of the `solver` field. This should be enough to make it work.

Alternatively, one could also use a trait object to access the solver. This would technically allow changing the solver between steps without constructing a new `MechanicalWorld`.
However this requires more changes from the current design.

1. The method `step` of the `MechanicalWorld` and the methods `step` and `step_ccd` along with some internal methods of `MoreauJeanSolver` are generic wrt. `Colliders: ColliderSet<N, Bodies::Handle, Handle = CollHandle>` and `Constraints: JointConstraintSet<N, Bodies>`. They have to be removed from the methods to support creating a `ContstraintSolver` trait object. The only possible solution I can think of is moving the generic parameters to the `ConstraintSolver` and `MechanicalWorld` traits themselves. Inside of the constraint solver implementations this would require adding phantom data fields because the types are only used be the respective methods.
2. Changing the solver to a trait object requires adding an additional lifetime bound of `` `static`` to some of its generic parameters which includes `Bodies`, `Colliders` and `Constraint`. I'm not sure if this is ok because I think a goal of making these set types generic parameters was to move lifetime handling out of the world.

Any thoughts on this?
So I noticed there doesn't seem to be much work going on here at the moment and figured this *might* be a good time to make this PR since the likelyhood of massive quantities of merge conflicts is severely reduced. If this is not the right time then feel free to close this PR and schedule these changes for another time, all changes were made completely automated by running `cargo fix` after adding `#![deny(bare_trait_objects)]` to lib.rs.

rustsim/ncollide#297 provides a bit of background for the reasons why it's preferable to enforce `dyn` in front of every trait-object but in short it enhances their visibility by distinguishing them from structs.
Consider this program:

```rust
let mut world = World::new();

let shape = ShapeHandle::new(Cuboid::new(Vector3::repeat(0.5)));
let collider = ColliderDesc::new(shape)
    .density(1.0);

let top_joint = FreeJoint::new(Isometry3::identity());
let body_desc = MultibodyDesc::new(top_joint)
    .collider(&collider)
    .parent_shift(Vector3::repeat(1000.0))
    .build(&mut world);

Testbed::new(world).run()
```

When running this program I notice that the cube is still suspiciously close to the global origin. Considering that the `parent_shift` should shift it by 1000 units on each axis, I would expect the cube to be visibly moved or probably even completely out of sight, but no such thing happens and the cube seems to remain comfortably seated at the coordinate origin.

When I use a `PrismaticJoint` instead of a `FreeJoint`, the cube is nowhere to be found, as expected. So this seems to be some kind of special behaviour that only affects `FreeJoint`s, but I didn't see such behaviour mentioned anywhere in the documentation, so I guess this is a bug.