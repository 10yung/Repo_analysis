This fix #108 

I already published a snapshot version from that branch.
```2.2.6.1-fixCircuitBreaker2-SNAPSHOT```
and tested it against this repro: https://github.com/mliarakos/akkajs-circuit-breaker
and everything looks fine.
@mliarakos do you mind to double-check and validate?
Thanks again for the report.
The [Akka CircuitBreaker](https://github.com/akka/akka/blob/master/akka-actor/src/main/scala/akka/pattern/CircuitBreaker.scala) uses `java.util.function.Consumer`, which is not implemented in Scala.js. I've submitted https://github.com/scala-js/scala-js/pull/3916 to add an implementation. Once it's merged Akka.js will need to update to the latest Scala.js.

If that takes a while for that PR to be merged and released, I can provide a PR to Akka.js with the implementation until a new Scala.js is released.
The [Akka CircuitBreaker](https://doc.akka.io/docs/akka/current/common/circuitbreaker.html) should transition from the Closed state to the Open state when a call fails. However, in Akka.js the CircuitBreaker appears to fail to transition state from Closed to Open with an IllegalStateException.

To reproduce the issue checkout the [akkajs-circuit-breaker](https://github.com/mliarakos/akkajs-circuit-breaker) project. The stack trace is:

```
java.lang.IllegalStateException: exception in sameThreadExecutionContext
  at $c_jl_IllegalStateException.$c_jl_Throwable.fillInStackTrace__jl_Throwable(akkajs-circuit-breaker/target/scala-2.12/akkajs-circuit-breaker-test-fastopt.js:43697:14)
  at $c_jl_IllegalStateException.$c_jl_Throwable.init___T__jl_Throwable__Z__Z(akkajs-circuit-breaker/target/scala-2.12/akkajs-circuit-breaker-test-fastopt.js:43805:10)
  at java.lang.IllegalStateException.<init>(akkajs-circuit-breaker/target/scala-2.12/akkajs-circuit-breaker-test-fastopt.js:70673:58)
  at akka.dispatch.ExecutionContexts$sameThreadExecutionContext$.reportFailure(akkajs-circuit-breaker/target/scala-2.12/akkajs-circuit-breaker-test-fastopt.js:57643:43)
  at scala.concurrent.impl.CallbackRunnable.executeWithValue(akkajs-circuit-breaker/target/scala-2.12/akkajs-circuit-breaker-test-fastopt.js:55834:27)
  at scala.concurrent.impl.Promise$KeptPromise$Kept.onComplete(akkajs-circuit-breaker/target/scala-2.12/akkajs-circuit-breaker-test-fastopt.js:62151:104)
  at scala.concurrent.impl.Promise$KeptPromise$Failed.onComplete(akkajs-circuit-breaker/target/scala-2.12/akkajs-circuit-breaker-test-fastopt.js:88820:3)
  at akka.pattern.CircuitBreaker$State.callThrough(akkajs-circuit-breaker/target/scala-2.12/akkajs-circuit-breaker-test-fastopt.js:4522:133)
  at akka.pattern.CircuitBreaker$Closed$.invoke(akkajs-circuit-breaker/target/scala-2.12/akkajs-circuit-breaker-test-fastopt.js:78842:10)
  at com.github.mliarakos.CircuitBreakerSpec.failedCall(akkajs-circuit-breaker/target/scala-2.12/akkajs-circuit-breaker-test-fastopt.js:120301:159)
Caused by: java.lang.IllegalStateException: exception in sameThreadExecutionContext
  at $c_jl_IllegalStateException.$c_jl_Throwable.fillInStackTrace__jl_Throwable(akkajs-circuit-breaker/target/scala-2.12/akkajs-circuit-breaker-test-fastopt.js:43697:14)
  at $c_jl_IllegalStateException.$c_jl_Throwable.init___T__jl_Throwable__Z__Z(akkajs-circuit-breaker/target/scala-2.12/akkajs-circuit-breaker-test-fastopt.js:43805:10)
  at java.lang.IllegalStateException.<init>(akkajs-circuit-breaker/target/scala-2.12/akkajs-circuit-breaker-test-fastopt.js:70673:58)
  at akka.dispatch.ExecutionContexts$sameThreadExecutionContext$.reportFailure(akkajs-circuit-breaker/target/scala-2.12/akkajs-circuit-breaker-test-fastopt.js:57643:43)
  at scala.concurrent.impl.CallbackRunnable.run(akkajs-circuit-breaker/target/scala-2.12/akkajs-circuit-breaker-test-fastopt.js:55806:27)
  at $c_Lakka_dispatch_BatchingExecutor$Batch.$c_Lakka_dispatch_BatchingExecutor$AbstractBatch.processBatch__Lakka_dispatch_BatchingExecutor$AbstractBatch__V(akkajs-circuit-breaker/target/scala-2.12/akkajs-circuit-breaker-test-fastopt.js:109512:46)
  at akka.dispatch.BatchingExecutor$Batch.run(akkajs-circuit-breaker/target/scala-2.12/akkajs-circuit-breaker-test-fastopt.js:111476:10)
  at akka.dispatch.BatchingExecutor.execute(akkajs-circuit-breaker/target/scala-2.12/akkajs-circuit-breaker-test-fastopt.js:8003:16)
  at akka.dispatch.ExecutionContexts$sameThreadExecutionContext$.execute(akkajs-circuit-breaker/target/scala-2.12/akkajs-circuit-breaker-test-fastopt.js:57646:3)
  at scala.concurrent.impl.CallbackRunnable.executeWithValue(akkajs-circuit-breaker/target/scala-2.12/akkajs-circuit-breaker-test-fastopt.js:55826:21)
Caused by: scala.scalajs.js.JavaScriptException: TypeError: this.currentStateCallMeDirectly$und$eq__O__ is not a function
  at akka.pattern.CircuitBreaker.transition(akkajs-circuit-breaker/target/scala-2.12/akkajs-circuit-breaker-test-fastopt.js:36256:23)
  at akka.pattern.CircuitBreaker$Closed$.callFails(akkajs-circuit-breaker/target/scala-2.12/akkajs-circuit-breaker-test-fastopt.js:78850:12)
  at {anonymous}()(akkajs-circuit-breaker/target/scala-2.12/akkajs-circuit-breaker-test-fastopt.js:4504:18)
  at scala.scalajs.runtime.AnonFunction1.apply(akkajs-circuit-breaker/target/scala-2.12/akkajs-circuit-breaker-test-fastopt.js:56903:23)
  at scala.concurrent.impl.CallbackRunnable.run(akkajs-circuit-breaker/target/scala-2.12/akkajs-circuit-breaker-test-fastopt.js:55798:23)
  at $c_Lakka_dispatch_BatchingExecutor$Batch.$c_Lakka_dispatch_BatchingExecutor$AbstractBatch.processBatch__Lakka_dispatch_BatchingExecutor$AbstractBatch__V(akkajs-circuit-breaker/target/scala-2.12/akkajs-circuit-breaker-test-fastopt.js:109512:46)
  ... 4 more
```

It looks like the underlying issue is that `currentStateCallMeDirectly` is not defined properly during the state transition. The property is initially defined as an IR patch in [PatternIrPatch](https://github.com/akka-js/akka.js/blob/master/akka-js-actor-ir-patches/src/main/scala/PatternIrPatch.scala) and is changed using the [Unsafe](https://github.com/akka-js/akka.js/blob/master/akka-js-unsafe/src/main/scala/akka/util/Unsafe.scala) macros.
Hi,

it seems that TestProbe can only be called 5 times. after that it breaks the test. I have a unit test like this:
```
class DatasetViewTest extends TestKit(ActorSystem("test")) with FlatSpecLike with Matchers {

  trait TestContext {
    val controller = TestProbe()
  }

  it should "1" in new TestContext  {}
  it should "2" in new TestContext  {}
  it should "3" in new TestContext  {}
  it should "4" in new TestContext  {}
  it should "5" in new TestContext  {}
  it should "6" in new TestContext  {}
  it should "7" in new TestContext  {}
  it should "8" in new TestContext  {}
  it should "9" in new TestContext  {}
  it should "10" in new TestContext {}
}
```
Only test 1-5 could run. then it stops with this error:
```
[error] (management / Test / testOnly) org.scalajs.testcommon.RPCCore$ClosedException: org.scalajs.jsenv.ComJSEnv$ComClosedException: JSCom has been closed
```

I could put `val controller = TestProbe()` outsite scope of TestContext as a workaround, but some cases I have to redeclare it.

Thanks.
Since scala-native is similar to scala-js and currently also works with a single thread this should not be to hard?
Have you thought about also incorporating akka-http?

Any thoughts?
there is one single test that is somehow failing without any evident reason only with scala 2.11 in PatternSpec.

Cannot reproduce locally, only happens on Travis CI.
Any ETA, anything one could help with?
Hi,
As discussed in the akka.js gitter room, here's a space where to discuss possible support for akka-persistence in scala.js.
The idea is to use localstorage or indexedDb as a backend, i have a use case where i need to save mouse event data locally when an app goes offline, and then stream them to a backend server once it's back online, for now i use akka-stream to handle buffer and throttling, and pouchdb to avoid using low level indexedDb api.
Check instatiation of actors with 1 default argument.
Though I will not expect running a HTTP server on Scala.js, some data structures from akka-http like `Path` and `Uri` are useful in Scala.js .

Another usage of akka-http.js is creating an in-memory mock server to handler fake HTTP requests (for testing purpose).
