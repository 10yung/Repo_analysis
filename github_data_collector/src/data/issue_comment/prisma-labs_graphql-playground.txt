Let's say each comment around field and definitions is an entity. Is it possible to group those entities in some logical sections?

e.g. group documentation regarding Credentials in 1 sections and other data in another. So they are all not generated always in Queries/Mutations, but

-> Queries -> Credentials section
-> Mutation -> Credentials section

or

-> Credentials:
      - Queries
      - Mutations

#### This issue pertains to the following package(s):

- [ ] GraphQL Playground - Electron App
- [x] GraphQL Playground HTML
- [ ] GraphQL Playground
- [ ] GraphQL Playground Express Middleware
- [ ] GraphQL Playground Hapi Middleware
- [ ] GraphQL Playground Koa Middleware
- [ ] GraphQL Playground Lambda Middleware

Just downloaded `graphql-playground-electron-1.8.10.dmg` and issued a request.
It came to the server like this:
```
{
    "variables": {},
    "query": "...",
    "operationName": {}
}
```
Server cannot deserialize `operationName` as it expects a `String` there but found an object `{}`.
Any particular reason you want to make it an object? Altair client doesn't supply `operationName` field at all and it works
Changes proposed in this pull request:

- Add ability to search by exact type name using quotes, e.g. searching for `"Asset"` would give the `Asset` type only.

- Add ability to search within a type e.g. `query.asset` would give `Query.allAssets` `Query._allAssetsMeta` and `Query.Asset`

- Combining the two methods `"Query.allAssets"` would only give `Query.allAssets`

Bump dependency versions for react, webpack, babel, eslint, graphiql, graphql, redux, redux-saga.

Changes proposed in this pull request:

- Re-order keys in package.json
- Updated dependencies - Following are the major ones:
        react
        webpack
        babel
        eslint
        graphiql
        graphql
        redux
        redux-saga
- Updated Webpack scripts to match latest ones from create-react-app.
- Switched from tslint to eslint, to match what create-react-app uses.
#### This issue pertains to the following package(s):

- [ ] GraphQL Playground - Electron App
- [x] GraphQL Playground HTML
- [x] GraphQL Playground
- [ ] GraphQL Playground Express Middleware
- [ ] GraphQL Playground Hapi Middleware
- [ ] GraphQL Playground Koa Middleware
- [ ] GraphQL Playground Lambda Middleware

#### What OS and OS version are you experiencing the issue(s) on?
macOS Catalina version 10.15.2 (19C57)

#### What version of graphql-playground(-electron/-middleware) are you experiencing the issue(s) on?
Desktop app version 1.8.10 (1.8.10.5129) 

#### What is the expected behavior?
When setting a header `cookie: foo=bar` I expect that header to be sent so I can get the cookie in my express app.

#### What is the actual behavior?
I'm specifying a `cookie: foo=bar` header but `req.cookies` is empty. If I copy curl command, I do see the header being specified in the curl command, and upon executing it in my terminal `req.cookies` is populated. That's why I think the playground app may not be sending the cookie header. 


Other headers seems to work, because if I send the `authorization: Bearer bar` header, `req.authorization` will contain the `Bearer bar` value.

#### What steps may we take to reproduce the behavior?
1. Open desktop app
2. Write a GraphQL query
3. Add header 
```
{
	"cookie": "foo=bar"
}
```
4. Add logs in your app to verify content of `req.cookies`
5. Play the query

Alternative
1. Open playground at your GraphQL URL
2. Write a GraphQL query
3. Add header 
```
{
	"cookie": "foo=bar"
}
```
4. Play query
5. Inspect request headers from network tab in your browser
6. cookie header is missing

**Let me know if you need more information or if I'm missing something obvious :)**
_Please provide a gif or image of the issue for a quicker response/fix._

If there is one, I can't find what it is.
How can I send connection parameters with my subscriptions?
Bumps [handlebars](https://github.com/wycats/handlebars.js) from 4.0.11 to 4.5.3.
<details>
<summary>Changelog</summary>

*Sourced from [handlebars's changelog](https://github.com/wycats/handlebars.js/blob/master/release-notes.md).*

> ## v4.5.3 - November 18th, 2019
> Bugfixes:
> 
> - fix: add "no-prototype-builtins" eslint-rule and fix all occurences - f7f05d7
> - fix: add more properties required to be enumerable - 1988878
> 
> Chores / Build:
> - fix: use !== 0 instead of != 0 - c02b05f
> - add chai and dirty-chai and sinon, for cleaner test-assertions and spies, 
>   deprecate old assertion-methods  - 93e284e, 886ba86, 0817dad, 93516a0
> 
> Security:
> 
> - The properties `__proto__`, `__defineGetter__`, `__defineSetter__` and `__lookupGetter__` 
>   have been added to the list of "properties that must be enumerable".
>   If a property by that name is found and not enumerable on its parent, 
>   it will silently evaluate to `undefined`. This is done in both the compiled template and the "lookup"-helper. 
>   This will prevent new Remote-Code-Execution exploits that have been
>   published recently.
> 
> Compatibility notes: 
> 
> - Due to the security-fixes. The semantics of the templates using
>   `__proto__`, `__defineGetter__`, `__defineSetter__` and `__lookupGetter__` in the respect that those expression now return 
>   `undefined` rather than their actual value from the proto.
> - The semantics have not changed in cases where the properties are  enumerable, as in:
> 
> ```js
> {
>   __proto__: 'some string'
> }
> ```
> 
> - The change may be breaking in that respect, but we still only 
>   increase the patch-version, because the incompatible use-cases
>   are not intended, undocumented and far less important than fixing
>   Remote-Code-Execution exploits on existing systems.
> 
> 
> 
> [Commits](https://github.com/wycats/handlebars.js/compare/v4.5.2...v4.5.3)
> 
> ## v4.5.2 - November 13th, 2019
> # Bugfixes
> 
> - fix: use String(field) in lookup when checking for "constructor" - d541378
> - test: add fluent API for testing Handlebars - c2ac79c
> 
> Compatibility notes:
> - no incompatibility are to be expected
></tr></table> ... (truncated)
</details>
<details>
<summary>Commits</summary>

- [`c819c8b`](https://github.com/wycats/handlebars.js/commit/c819c8b533934d2ac18001d7eb27a3205b00c2f3) v4.5.3
- [`827c9d0`](https://github.com/wycats/handlebars.js/commit/827c9d0747bef7d7f89829779523b6b2dcf3051d) Update release notes
- [`f7f05d7`](https://github.com/wycats/handlebars.js/commit/f7f05d7558e674856686b62a00cde5758f3b7a08) fix: add "no-prototype-builtins" eslint-rule and fix all occurences
- [`1988878`](https://github.com/wycats/handlebars.js/commit/198887808780bbef9dba67a8af68ece091d5baa7) fix: add more properties required to be enumerable
- [`886ba86`](https://github.com/wycats/handlebars.js/commit/886ba86c2f9cc71b7d99b9018fbe2d72a57085cc) test/chore: add chai/expect and sinon to "runtime"-environment
- [`0817dad`](https://github.com/wycats/handlebars.js/commit/0817dad7e72c51d07f7700547d0c69aa79a4976b) test: add sinon as global variable to eslint in the specs
- [`93516a0`](https://github.com/wycats/handlebars.js/commit/93516a0b07026ebd23c84fddf270a0c8b570bc59) test: add sinon.js for spies, deprecate current assertions
- [`93e284e`](https://github.com/wycats/handlebars.js/commit/93e284ed9be1e38c5e6945f15af1ccd689f2ada6) chore: add chai and dirty-chai for better test assertions
- [`c02b05f`](https://github.com/wycats/handlebars.js/commit/c02b05fa819f46bb66c878bebc6e8006408ebd5c) fix: use !== 0 instead of != 0
- [`8de121d`](https://github.com/wycats/handlebars.js/commit/8de121d21c88a6ab877e3a0eec9daaac483f3bf0) v4.5.2
- Additional commits viewable in [compare view](https://github.com/wycats/handlebars.js/compare/v4.0.11...v4.5.3)
</details>
<br />

[![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=handlebars&package-manager=npm_and_yarn&previous-version=4.0.11&new-version=4.5.3)](https://help.github.com/articles/configuring-automated-security-fixes)

Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.

[//]: # (dependabot-automerge-start)
[//]: # (dependabot-automerge-end)

---

<details>
<summary>Dependabot commands and options</summary>
<br />

You can trigger Dependabot actions by commenting on this PR:
- `@dependabot rebase` will rebase this PR
- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it
- `@dependabot merge` will merge this PR after your CI passes on it
- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it
- `@dependabot cancel merge` will cancel a previously requested merge and block automerging
- `@dependabot reopen` will reopen this PR if it is closed
- `@dependabot ignore this [patch|minor|major] version` will close this PR and stop Dependabot creating any more for this minor/major version (unless you reopen the PR or upgrade to it yourself)
- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)
- `@dependabot use these labels` will set the current labels as the default for future PRs for this repo and language
- `@dependabot use these reviewers` will set the current reviewers as the default for future PRs for this repo and language
- `@dependabot use these assignees` will set the current assignees as the default for future PRs for this repo and language
- `@dependabot use this milestone` will set the current milestone as the default for future PRs for this repo and language

You can disable automated security fix PRs for this repo from the [Security Alerts page](https://github.com/prisma-labs/graphql-playground/network/alerts).

</details>
#### This issue pertains to the following package(s):

- [ ] GraphQL Playground - Electron App
- [ ] GraphQL Playground

#### What OS and OS version are you experiencing the issue(s) on?
Linux

#### What version of graphql-playground(-electron/-middleware) are you experiencing the issue(s) on?
1.7.31 and from master branch

#### What is the expected behavior?
Schema view displays schema

#### What is the actual behavior?
Empty screen, Syntax error in web browser console

#### What steps may we take to reproduce the behavior?
Have a schema with comments like this
```
# Defined queries available
type Query {
  # Fetches an object given its ID
  # **@namespace**: common
  #
  Node(
    # The ID of an object
    id: ID!
  ): Node
}
```

I found, that problem is caused by this line of code in `packages/graphql-playground-react/src/components/Playground/util/createSDL.ts` at line `92`:

```js
const sdlWithNewLines = rawSdl.replace(/(\#[\w\'\s\r\n\*](.*)$)/gm, '')
```

If to comment it out everything works fine, but comments are preserved. So I think there is a problem in regexp which does the jom. Actually, because I have empty-line comment it also removes the next line, so schema code looks like this:

```

type Query {




 
    id: ID!
  ): Node
}
```
which is definitely broken schema.

I use apollo-graphql-express as Apollo server, so it can be fixed by forcing `"schema.disableComments": false` from server side to make sure initial load will not cause a problem, but if user change this property locally - bug happen! Of course, I can fix it by removing new lines from comments, BTW, despite this fact there is a buggy software behavior...

Server is based on code-first schema generation, so the javascript schema is provided to server instance instead of `typeDefs` and `resolvers`. So schema code is built on playground side itself (guess with printSchema...)

This also causes the need to restart electron app, as there is no way to get back or close the blank scree after pressing "Schema" button.

Fixes # NA

Changes proposed in this pull request:

Some packages should be installed as a `devDependency` and not as `dependency`. It can induce `yarn` in bad behaviors.