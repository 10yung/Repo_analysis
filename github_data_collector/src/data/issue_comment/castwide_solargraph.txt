
```ruby
# frozen_string_literal: true

class A
  def initialize
    @a = 1
  end

  # @return [Boolean]
  def sss? # ERROR: report @return type `Boolean` does not match inferred type `Integer`
    b = @a == 1 # NOTE: b infer to Boolean
    @a == 1
  end
end
```

by the way, can we have a feature, only report the mismatch type, but ignore the uptyped warning? so I don't have to comment every simple code, just add what I need. sorbet `typed: true` is this behaviour
VSCode can't use it:

Failed to start Solargraph: Error: [LoadError] incompatible library version - /Users/eos/.rvm/gems/ruby-2.6.3/gems/nokogiri-1.10.7/lib/nokogiri/nokogiri.bundle

[LoadError] incompatible library version - /Users/eos/.rvm/gems/ruby-2.6.3/gems/nokogiri-1.10.7/lib/nokogiri/nokogiri.bundle
The PR is in relation to issue #261. Initial profiling looks promising as seen here:

|master|this pr|
|--|--|
|<img width="1605" alt="Screen Shot 2020-01-10 at 4 34 49 PM" src="https://user-images.githubusercontent.com/5347312/72187975-27f38280-33c7-11ea-90a2-deb0b1cef613.png">|<img width="1608" alt="Screen Shot 2020-01-10 at 4 35 49 PM" src="https://user-images.githubusercontent.com/5347312/72188029-4eb1b900-33c7-11ea-9fc7-4188c3a8dd06.png">|

The rbspy reports its flamegraph in svg which github doesn't support unfortunately. Both of these profiles were ~8 minutes of `solargraph scan` on our main repo. The main take away from the current master branch is the wide flat region of the chart corresponding the determine the correct requires is essentially gone in this PR. While this is only one repo, a deep dive into the data shows this snippet went from 31599 profile samples to 174 a ~170X speedup. 

Currently this PR doesn't pass a test in `spec/language_server/message/text_document/definition_spec.rb`. It appears that it doesn't correctly resolve a require. I've been trying to track down the reason but have not been successful so far. The current suite of api_map_spec test pass so there seems to be an edge case that I haven't covered yet. Any help would be appreciated.


Hi! First off let me say awesome job to getting this project up and running! I personally have a language-server as my own side project and I know how much of an undertaking it can be!

I've know there is some consideration on replacing the parser with a more high performance implementation but do some profiling I've identified that on very large projects the bottleneck isn't parsing speed. I've been running [rbspy](https://rbspy.github.io/) against our companies main rails server project using `solargraph scan`. Solargraph identifies 12k files, so I would definitely say this is on the higher end use cases. 

Long story short rbspy identified [this chunk](https://github.com/castwide/solargraph/blob/master/lib/solargraph/api_map.rb#L105-L118) of `api_map.rb` as contributing something in the ballpark of 90% of the runtime, potentially more. Here is the same chunk of code below:

``` rb
unless bundle.workspace.require_paths.empty?
  reqs.delete_if do |r|
    result = false
    bundle.workspace.require_paths.each do |l|
      pn = Pathname.new(bundle.workspace.directory).join(l, "#{r}.rb")
      if new_map_hash.keys.include?(pn.to_s)
        local_path_hash[r] = pn.to_s
        result = true
        break
      end
    end
    result
  end
end
```

My understanding of what this chunk of code is trying to do is identify `require`s diff. I'm assuming the idea is to only process things that have changed since last time `catalog` was run. as I've tried to come up with a new algorithm to speed this up I believe I've identified a bug in this implementation. Specifically this line
```rb
pn = Pathname.new(bundle.workspace.directory).join(l, "#{r}.rb")
```

running `api_map_spec.rb` I've noticed that `bundle.workspace.directory` is the empty string causing the tests to pass. I've noticed in the general case this won't remove any reqs. Consider this example

```rb
# input
reqs = ['lib1', 'lib2]
new_map_hash = {
  'some/path/lib1.rb': # ...
  'some/other/path/lib3.rb': # ...
}
bundle.workspace.directory = 'some'
bundle.workspace.require_paths = [
  'some/path',
  'some/other/path',
]

# paths tested in the code snippet above
tested_paths = [
  'some/some/path/lib1.rb',
  'some/some/path/lib2.rb',
  'some/some/other/path/lib1.rb',
  'some/some/other/path/lib2.rb',
]

# output
req_final = ['lib1', 'lib2']
expected_req_final = ['lib2']
```

Is this the the correct expected behavior? I've got some ideas about speeding this up mostly using a trie but I want to make sure that I've got the correct behavior nailed down.
suppose following code:

```
class BBB
  def initialize(*args)
    a = A.new(1) # <-- a can't be infer
  end
  A = Struct.new(:foo) do |o|
    self # <-- self is class<BBB>
  end
end
```

can we support Struct, or through some comment annotation?
The Ruby core documentation packages have been updated to take advantage of a [new feature in YARD](https://github.com/lsegal/yard/pull/1274).

You can update your documentation with the following command:

```
solargraph download-core
```

Check "Updating Core Documentation" in the README for more information.

To make sure you have the most recent docs, test the following code in your editor:

```ruby
require 'securerandom'
SecureRandom
```

Entering a dot after `SecureRandom` should include `uuid` among the autocomplete suggestions.

An update to the master branch removes `irb` from the runtime dependencies. It breaks jruby due to its `io-console` dependency. As far as I can tell, Solargraph doesn't use `irb` directly. I'm noting the change here in case it causes unexpected issues.
Currently the code allows you to specific a custom location for the cache files (which I was looking to do for XDG ) but doesn't actually mention it anywhere in the readme. 

It would help people take advantage of it as a cool feature. I only stumbled across it while looking at where the gem actually specified the home directory for the cache file. 
currently, solargraph relies on thor
```ruby
s.add_runtime_dependency 'thor', '~> 0.19', '>= 0.19.4'
```
I think it is time to upgrade as some core frameworks like rails are forcing thor to a min of thor version 1 . This might cause some issues with beginners who do not know how to fix dependencies 

0.19.4 is getting pretty old now

```
VERSIONS:
1.0.1 - December 17, 2019 (55 KB)
1.0.0 - December 13, 2019 (55 KB)
0.20.3 - November 10, 2018 (54.5 KB)
0.20.2 - November 10, 2018 (54.5 KB)
```

has anyone done any tests with the new version of thor?
```
[DEPRECATED] `Bundler.with_clean_env` has been deprecated in favor of `Bundler.with_unbundled_env`. If you instead want the environment before bundler was originally loaded, use `Bundler.with_original_env` (called at /.../solargraph-0.38.0/lib/solargraph/documentor.rb:56)
```