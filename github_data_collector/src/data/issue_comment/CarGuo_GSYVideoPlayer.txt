## （！！！！请务必务必按照issue模板，*修改* 后提交问题！！！！，不按模板提Isuue删除处理）

（ps 首页问题集锦和demo请先了解一下！）

## 提问前建议先看看： https://mp.weixin.qq.com/s/HjSdmAsHuvixCH_EWdvk3Q

## 问题描述：播放的视频的同时 需要使用MusicPlayer播放音频，会导致播放音频无声音

XXXX发生了这样的问题！

## 问题机型/系统：

真机 华为mate 20pro 10.0

## GSY依赖版本

 `implementation 'com.shuyu:gsyVideoPlayer-java:6.0.3'`

## Demo中的复现步骤
打开demo的简单播放   在同时打开qq音乐就会有

问题代码：(如果有)
```
xxxxxxx
```

## 问题log（如果有）

```

xxxxxxx

```

## 问题描述：

在Activity1播放了当前视频，然后跳转到Activity2后，从Activity2返回后，在Activity1里执行跳转到Activity3，然后执行Activity1的finish方法并且在onDestroy()方法里执行了MyGSYVideoManager.releaseAllVideos()，发现页面已退出，但是声音还在继续播放。

## 问题机型/系统：
跟机型没有关系，测了好几款都一样。

## GSY依赖版本

`implementation 'com.shuyu:gsyVideoPlayer-java:6.0.3'`



## 问题描述：
小米电视 65寸  exo内核无法播放m3u8格式 (播放前2秒正常 后有声音无图像(图片卡住,声音都正常 )) cpu为A53
以上机型  iJK内核可以播放,但是特别卡
小米电视 35寸 EXO内核是可以正常播放的 
## 问题机型/系统：

例如  小米TV Android6.0

## GSY依赖版本

//完整版引入
implementation 'com.shuyu:GSYVideoPlayer:7.1.2'

## Demo中的复现步骤
每次必出
单页面播放 播放2秒后 可见BUG

## 问题log

12-26 00:26:45.172 17139-17237/com.tv.kanmovie V/OmxComponentManagerImpl: loadLibrary:258 Loading OMX library libOmxVideo.so.
12-26 00:26:45.173 17139-17237/com.tv.kanmovie E/omx_video: amvenc_avc open failed!set default instance number as 1,ret=-1,Permission denied(13)
12-26 00:26:45.173 17139-17237/com.tv.kanmovie I/omx_core: Core library has 14 components
12-26 00:26:45.173 17139-17237/com.tv.kanmovie E/OMXMaster: A component of name 'OMX.google.alac.decoder' already exists, ignoring this one.
12-26 00:26:45.179 17139-17237/com.tv.kanmovie E/OMXNodeInstance: setConfig(1:google.aac.decoder, ConfigPriority(0x6f800002)) ERROR: Undefined(0x80001001)
12-26 00:26:45.179 17139-17237/com.tv.kanmovie I/ACodec: codec does not support config priority (err -2147483648)
12-26 00:26:45.183 17139-17242/com.tv.kanmovie I/SoftAAC2: limiting to stereo output
12-26 00:26:45.192 17139-17242/com.tv.kanmovie I/SoftAAC2: Reconfiguring decoder: 0->44100 Hz, 0->2 channels
12-26 00:26:45.221 17139-17221/com.tv.kanmovie I/AudioTrack: set(): streamType -1, sampleRate 44100, format 0x1, channelMask 0x3, frameCount 15104, flags #0, notificationFrames 0, sessionId 0, transferType 3, uid -1, pid -1
12-26 00:26:47.346 17139-17139/com.tv.kanmovie D/EventLogger: state [5.37, false, R]
12-26 00:26:47.348 17139-17139/com.tv.kanmovie D/EventLogger: state [5.37, true, R]
12-26 00:26:47.372 17139-17230/com.tv.kanmovie I/MediaCodec: [OMX.amlogic.avc.decoder.awesome] setting surface generation to 17550338
12-26 00:26:47.373 17139-17231/com.tv.kanmovie D/SurfaceUtils: set up nativeWindow 0xeb8bb608 for 1080x452, color 0x11, rotation 0, usage 0x2002900
12-26 00:26:47.379 17139-17231/com.tv.kanmovie E/ACodec: dequeueBuffer failed: WOULD_BLOCK(-11).
12-26 00:26:47.380 17139-17231/com.tv.kanmovie E/ACodec: dequeueBuffer failed: WOULD_BLOCK(-11).
12-26 00:26:47.406 17139-17221/com.tv.kanmovie W/AudioTrack: retrograde timestamp position corrected, -29 = 0 - 29
12-26 00:26:47.436 17139-17231/com.tv.kanmovie E/ACodec: dequeueBuffer failed: WOULD_BLOCK(-11).
12-26 00:26:47.488 17139-17231/com.tv.kanmovie E/ACodec: dequeueBuffer failed: WOULD_BLOCK(-11).
12-26 00:26:47.526 17139-17231/com.tv.kanmovie E/ACodec: dequeueBuffer failed: WOULD_BLOCK(-11).
12-26 00:26:47.576 17139-17231/com.tv.kanmovie E/ACodec: dequeueBuffer failed: WOULD_BLOCK(-11).

一般 ijk 默认内核，如果存在卡顿或者不同步，一般是因为软解码处理不过来，可以尝试问题集锦的丢帧处理，或者切到都 exoplayer 内核。

同时有的MP4写的不合理。
近似位置的audio video pts相差比较大。
导致不断的请求206 partial content来回seek读取流内容。曾经遇到过1个100多M的视频，播放消耗掉移动流量几个G的情况。查了很久才发现是媒体文件有缺陷。本地播放不会有这个问题。

https://github.com/bilibili/ijkplayer/issues/4808#issuecomment-519835764

## 问题描述：
使用opengl （高斯模糊） 之后手机录制的视频会旋转（竖屏变成横屏）
![QQ图片20190422120401](https://user-images.githubusercontent.com/11958737/56482431-bd2baf80-64f6-11e9-94b8-50ade851dff5.jpg)


## 问题机型/系统：

所有机型

## GSY依赖版本

 `implementation 'com.shuyu:gsyVideoPlayer-java:7.0.1'`

## Demo中的复现步骤

滤镜 里面的视频改成自己手机录制的



![231](https://user-images.githubusercontent.com/12826258/54114262-fd424180-4424-11e9-84c0-eba46a5bbf74.png)
设备机型
M5 Note
java.lang.IllegalStateException
    at android.media.MediaPlayer.getVideoHeight(Native Method)
    at tv.danmaku.ijk.media.player.AndroidMediaPlayer.getVideoHeight(AndroidMediaPlayer.java:201)
    at com.shuyu.gsyvideoplayer.f.d.getVideoHeight(SystemPlayerManager.java:160)
    at com.shuyu.gsyvideoplayer.c.getVideoHeight(GSYVideoBaseManager.java:483)
    at com.shuyu.gsyvideoplayer.video.base.GSYVideoView.getCurrentVideoHeight(GSYVideoView.java:224)
    at com.shuyu.gsyvideoplayer.video.base.GSYBaseVideoPlayer.isVerticalVideo(GSYBaseVideoPlayer.java:473)
    at com.shuyu.gsyvideoplayer.video.base.GSYBaseVideoPlayer.isVerticalFullByVideoSize(GSYBaseVideoPlayer.java:523)
    at com.shuyu.gsyvideoplayer.utils.OrientationUtils$1.onOrientationChanged(OrientationUtils.java:49)
    at android.view.OrientationEventListener$SensorEventListenerImpl.onSensorChanged(OrientationEventListener.java:143)
    at android.hardware.SystemSensorManager$SensorEventQueue.dispatchSensorEvent(SystemSensorManager.java:713)
    at android.os.MessageQueue.nativePollOnce(Native Method)
    at android.os.MessageQueue.next(MessageQueue.java:328)
    at android.os.Looper.loop(Looper.java:148)
    at android.app.ActivityThread.main(ActivityThread.java:6519)
    at java.lang.reflect.Method.invoke(Native Method)
    at com.android.internal.os.ZygoteInit$MethodAndArgsCaller.run(ZygoteInit.java:1113)
    at com.android.internal.os.ZygoteInit.main(ZygoteInit.java:974)
#### 1.项目背景
需要在一个界面中，展示5个播放器，用楼主提供的MultiSampleVideo类。

**视频协议**：RTSP。
**音频**:    G.722.1
**视频来源** :大华，海康
**硬件设备**： Android TV 8.0

下面我将记录下在使用GSYVideoPlayer 各种问题，希望能帮助到大家：



##### 问题 1
**1.播放器**播放了一会崩溃，bugly，本地异常拦截都无法拦截。log的提示"Channel is unrecoverably broken and will be disposed!"

答：导致产生上述的log的原因 有很多种。我遇到的是手机上可以播放，Android TV 上不行，**原因**是 Android TV的运行内存太低。播放器占用的native 内存太大 超过了运行内存剩余的空间。ps：播放的码流越大，占用的运行内存越高

##### 问题 2
**2.多个播放器**的url没有错，但是有几个播放不出来。

答：检查下是否是因为设置的setPlayPosition 数值，重复，尤其是视频切换轮播的时候。


##### 问题 3
**3.播放**的时候频繁走 onError 方法，并且报-10000的异常

答：我产生这个原因是因为rtsp的地址有错误，检查下rtsp的通道，镜头等数值是否正常。


##### 问题 4
**4.播放**7.8分钟 然后视频界面，一直在加载状态  不在显示视频，即使网络等都是正常

答：去后台查看镜头的设置。有些摄像头 带有ACC编解码的音频。那么GSYVideoPlayer 就会播放不出来，一直在那里 加载。

##### 问题 5
**5.切换** url的过程中，总有黑屏，而且需要等待几秒钟。

答：可以尝试重写
changeUiToPreparingShow
changeUiToPauseShow
releasePauseCover
showPauseCover


基本上就是这些问题。等遇到了在继续补充。
## 问题描述：
我在使用GSYVideoPlayer框架在盒子上播放视频时遇到一个问题：用遥控器没法控制播放（例如：播放、暂停、快进、快退），据我开发Android机顶盒的经验来看，主要原因在于播放器布局里的控件没处理焦点，我通过自定义播放器解决了用遥控器控制播放、暂停、快进、快退（快进快退时小窗口预览），但这种方式比较麻烦，使用上体验也不够好，代码也不优雅，可能会因为GSYVideoPlayer的更新而不得不更改，希望大神改一改GSYVideoPlayer，以便在Android盒子上用遥控器方便的控制播放。

```
public class VodVideoPlayer extends CustomGSYVideoPlayer {

    public VodVideoPlayer(Context context) {
        super(context);
    }

    public VodVideoPlayer(Context context, Boolean fullFlag) {
        super(context, fullFlag);
    }

    public VodVideoPlayer(Context context, AttributeSet attrs) {
        super(context, attrs);
        getDisplay(context);
    }

    @Override
    public int getLayoutId() {
        return R.layout.video_layout_custom;
    }

    /**
     * 亮度、进度、音频
     */
    @Override
    public boolean onTouch(View v, MotionEvent event) {
        int id = v.getId();
        float x = event.getX();
        float y = event.getY();
        if (mIfCurrentIsFullscreen && mLockCurScreen && mNeedLockFull) {
            onClickUiToggle();
            startDismissControlViewTimer();
            return true;
        }
        if (id == R.id.fullscreen) {
            return false;
        }
        if (id == R.id.surface_container) {
            switch (event.getAction()) {
                case MotionEvent.ACTION_DOWN:
                    touchSurfaceDown(x, y);
                    break;
                case MotionEvent.ACTION_MOVE:
                    //触摸的X
//                    protected float mDownX;
                    //触摸的Y
//                    protected float mDownY;
                    float deltaX = x - mDownX;
                    float deltaY = y - mDownY;
                    float absDeltaX = Math.abs(deltaX);
                    float absDeltaY = Math.abs(deltaY);
                    if ((mIfCurrentIsFullscreen && mIsTouchWigetFull)
                            || (mIsTouchWiget && !mIfCurrentIsFullscreen)) {
                        if (!mChangePosition && !mChangeVolume && !mBrightness) {
                            touchSurfaceMoveFullLogic(absDeltaX, absDeltaY);
                        }
                    }
                    touchSurfaceMove(deltaX, deltaY, y);
                    break;
                case MotionEvent.ACTION_UP:
                    startDismissControlViewTimer();
                    touchSurfaceUp();
                    startProgressTimer();
                    //不要和隐藏虚拟按键后，滑出虚拟按键冲突
                    if (mHideKey && mShowVKey) {
                        return true;
                    }
                    break;
            }
            gestureDetector.onTouchEvent(event);
        } else if (id == R.id.progress) {
            switch (event.getAction()) {
                case MotionEvent.ACTION_DOWN:
                    cancelDismissControlViewTimer();
                case MotionEvent.ACTION_MOVE:
                    cancelProgressTimer();
                    ViewParent vpdown = getParent();
                    while (vpdown != null) {
                        vpdown.requestDisallowInterceptTouchEvent(true);
                        vpdown = vpdown.getParent();
                    }
                    break;
                case MotionEvent.ACTION_UP:
                    startDismissControlViewTimer();
                    startProgressTimer();
                    ViewParent vpup = getParent();
                    while (vpup != null) {
                        vpup.requestDisallowInterceptTouchEvent(false);
                        vpup = vpup.getParent();
                    }
                    mBrightnessData = -1f;
                    break;
            }
        }
        return false;
    }

    //点击屏幕的默认值：屏幕中心点X,Y数值
    private static int pointX;
    private static int pointY;
    private static int moveX;
    private static int moveY;

    public static Point getDisplaySize(Context context) {
        WindowManager wm = (WindowManager) context.getSystemService(Context.WINDOW_SERVICE);
        Display display = wm.getDefaultDisplay();
        Point size = new Point();
        display.getSize(size);
        return size;
    }

    private static void getDisplay(Context context) {
        //获得屏幕宽高
        Point size = getDisplaySize(context);
        pointX = size.x / 2;
        pointY = size.y / 2;
        moveX = pointX;
        moveY = pointY;
    }

    //处理按键快进和快退
    @Override
    public boolean onKeyDown(int keyCode, KeyEvent event) {
        switch (keyCode) {
            case KeyEvent.ACTION_DOWN:
                break;
            case KeyEvent.ACTION_UP:
                break;
            case KeyEvent.KEYCODE_DPAD_LEFT:
                onClickUi();
                firstKeyDown();
                mHandler.sendEmptyMessage(LEFT);
                mHandler.sendEmptyMessageDelayed(CANCLE, 2500);
                resetTime();
                break;
            case KeyEvent.KEYCODE_DPAD_RIGHT:
                onClickUi();
                firstKeyDown();
                mHandler.sendEmptyMessage(RIGHT);
                mHandler.sendEmptyMessageDelayed(CANCLE, 2500);
                resetTime();
                break;
            case KeyEvent.KEYCODE_DPAD_CENTER:
            case KeyEvent.KEYCODE_ENTER:
            case KeyEvent.KEYCODE_MEDIA_PLAY_PAUSE:
                int state = getCurrentState();
                switch (state) {
                    case GSYVideoPlayer.CURRENT_STATE_PLAYING:
                        onVideoPause();
                        break;
                    case GSYVideoPlayer.CURRENT_STATE_PAUSE:
                        onVideoResume();
                        break;
                    case GSYVideoPlayer.CURRENT_STATE_AUTO_COMPLETE:
                        startPlayLogic();
                        isPlayComplete = false;
                        mSeekTimePosition = 0;
                        mProgressBar.setProgress(0);
                        break;
                    default:
                        break;
                }
                break;
            default:
                break;
        }
        return super.onKeyDown(keyCode, event);
    }

    private static boolean firstKeyDown = true;

    private void onClickUi() {
        if (mIfCurrentIsFullscreen && mLockCurScreen && mNeedLockFull) {
            onClickUiToggle();
            startDismissControlViewTimer();
//                    return true;
        }
    }

    //第一次按下左右键
    private void firstKeyDown() {
        if (firstKeyDown) {
            touchSurfaceDown(pointX, pointY);
            firstKeyDown = false;
            if (mSeekTimePosition >= getDuration() || isPlayComplete) {

            } else {
                onStartTrackingTouch(mProgressBar);
            }
        }
    }

    public static boolean isPlayComplete = false;

    public static void setPlayComplete(boolean PlayComplete) {
        isPlayComplete = PlayComplete;
    }

    //连续按下左右键
    private void keyMove() {
        if ((mIfCurrentIsFullscreen && mIsTouchWigetFull)
                || (mIsTouchWiget && !mIfCurrentIsFullscreen)) {
            if (!mChangePosition && !mChangeVolume && !mBrightness) {
                touchSurfaceMoveFullLogic(Math.abs(moveX - pointX), 0);
            }
        }
        if (mSeekTimePosition >= getDuration() || isPlayComplete) {
            mHandler.sendEmptyMessageDelayed(CANCLE, 2500);
            mBottomContainer.setVisibility(GONE);
        } else {
            touchSurfaceMove(moveX - pointX, 0, pointY);
            mBottomContainer.setVisibility(VISIBLE);
            onProgressChanged(mProgressBar, mSeekTimePosition * 100 / getDuration(), true);
        }
    }

    //定义变量
    private static final int LEFT = 0;
    private static final int RIGHT = 1;
    private static final int CANCLE = 2;

    private static int tim = 2;

    //程序启动时，初始化并发送消息
    private Handler mHandler = new Handler() {
        @Override
        public void handleMessage(Message msg) {
            switch (msg.what) {
                case LEFT:
                    if (tim > 0) {
                        if (tim > 1) {
                            moveX = moveX - pointX / 13;
                        } else {
                            moveX = moveX - pointX / 20;
                        }
                        tim -= 1;
                    } else {
                        moveX = moveX - pointX / 200;
                    }
                    keyMove();
                    break;
                case RIGHT:
                    if (tim > 0) {
                        if (tim > 1) {
                            moveX = moveX + pointX / 13;//13-20
                        } else {
                            moveX = moveX + pointX / 20;
                        }
                        tim -= 1;
                    } else {
                        moveX = moveX + pointX / 200;
                    }
                    keyMove();
                    break;
                case CANCLE:                        //停止按键
                    firstKeyDown = true;
                    moveX = pointX;
                    firstKeyDown = true;
                    tim = 2;
                    onStopTrackingTouch(mProgressBar);
                    mBottomContainer.setVisibility(GONE);
                    startDismissControlViewTimer();
                    touchSurfaceUp();
                    startProgressTimer();
                    //不要和隐藏虚拟按键后，滑出虚拟按键冲突
                    if (mHideKey && mShowVKey) {
//                        return true;
                    }
                    break;
            }
        }
    };

    //重置
    public void resetTime() {
        mHandler.removeMessages(CANCLE);
        mHandler.sendEmptyMessageDelayed(CANCLE, 2500);
    }

    @Override
    protected void dismissProgressDialog() {
        try {
            if (mProgressDialog != null) {
                mProgressDialog.dismiss();
                mProgressDialog = null;
            }
        } catch (IllegalArgumentException e) {
            e.printStackTrace();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
}

```

