hi
I used zerorpc server with python2. 
with msgpack==0.5.6, invoking methods from any client would make the server end raise an exception as below:

> Traceback (most recent call last):
  File "/opt/work/.pyenv/versions/mtas/lib/python2.7/site-packages/zerorpc/channel.py", line 78, in _channel_dispatcher
    event = self._events.recv()
  File "/opt/work/.pyenv/versions/mtas/lib/python2.7/site-packages/zerorpc/events.py", line 365, in recv
    event = Event.unpack(get_pyzmq_frame_buffer(blob))
  File "/opt/work/.pyenv/versions/mtas/lib/python2.7/site-packages/zerorpc/events.py", line 213, in unpack
    unpacker = msgpack.Unpacker(raw=False)
  File "msgpack/_unpacker.pyx", line 252, in msgpack._unpacker.Unpacker.__init__ (msgpack/_unpacker.cpp:254)
TypeError: __init__() got an unexpected keyword argument 'raw'

and this obviously resulted from incompatible use of msgpack.Unpacker with arg 'raw' which could only be used in python3
so I made this fix.
If I run the server or client in a thread other than the main thread, it seems to trigger the missing event bug:

```python
import zerorpc
import threading
import time


def run_server():
    class HelloRPC:
        def hello(self, name, age):
            return f"Hello, {name} of age {age}"

    s = zerorpc.Server(HelloRPC())
    s.bind("tcp://0.0.0.0:1234")
    s.run()


# Start server in background
server_thread = threading.Thread(target=run_server)

server_thread.daemon = True
server_thread.start()

# Run client
c = zerorpc.Client("tcp://127.0.0.1:1234")

for _ in range(2):
    print(c.hello("Thread", 1234))
    time.sleep(2)
```

Output:

```
$ python experiments/rpc_threading/gevent_bug.py
Hello, Thread of age 1234
/!\ gevent_zeromq BUG /!\ catching up after missing event (RECV) /!\
Hello, Thread of age 1234
```

How do I fix this? Shouldn't it work fine since the client and server both have their own thread-local event loop with gevent?
zerorpc is build by pyzmq, and it has the ip v6 option: zmq.IPV6, this may make zerorpc-python  better. thanks
is there any way to cancel a zerorpc call? 

I have a frontend (zerorpc-node) communicating with a backend (zerorpc-python) that needs to:
a) be able to send requests to the backend [standard zerorpc call]
b) be able to run multiple backend processes simultaneously [followed the architecture in https://github.com/0rpc/zerorpc-node/issues/96)
**c) be able to cancel a backend process at will [not sure how to do this with current architecture]**

Any guidance would be much appreciated. 



 I can import zerorpc, and confirm Server class was in zerorpc.core module. but the interpreter always report "AttributeError: 'module' object has no attribute 'Server'"
- Test platform:

 windows 10,python 2.7.15
Traceback (most recent call last):
  File "e:/Tool_development/python_resource/py27virenv/testAutomation/zerorpcproject/zerorpc.py", line 7, in <module>
    import zerorpc
  File "e:\Tool_development\python_resource\py27virenv\testAutomation\zerorpcproject\zerorpc.py", line 8, in <module>
    s = zerorpc. Server()
AttributeError: 'module' object has no attribute 'Server'

- Test Script:
class HelloRPC(object):
    def hello(self, name):
        return "Hello, %s" % name


import zerorpc
test = zerorpc.Server(HelloRPC())
s = zerorpc.Server()
s.bind("tcp://0.0.0.0:4242")
s.run()
-  pip list:
DEPRECATION: Python 2.7 will reach the end of its life on January 1st, 2020. Please upgrade your Python as Python 2.7 won't be maintained after that date. A future version of pip will drop support for Python 2.7.
Package    Version
---------- -------
cffi       1.12.3
future     0.17.1
gevent     1.4.0
greenlet   0.4.15
msgpack    0.6.1
pip        19.1.1
pycparser  2.19
pyzmq      18.0.2
setuptools 41.0.1
wheel      0.33.4
zerorpc    0.6.3

I have two rpc server and the code is below

```
# file Server.py

import zerorpc
class Server(object):
    def __init__(self):
        pass

    def add(self, a, b):
        return a + b

if __name__ == "__main__":
    s = zerorpc.Server(Server())
    s.bind("tcp://127.0.0.1:9888")
    s.run()
```

```
# file Server2.py

import zerorpc
class Server2(object):
    def __init__(self):
        pass

    def mul(self, a, b):
        return a * b

if __name__ == "__main__":
    s = zerorpc.Server(Server2())
    s.bind("tcp://127.0.0.1:9889")
    s.run()
```
I constructed a rpc client in main process and connect to Server and then start a subprocess to connect to Server2. However, the rpc call was stucked.
```
# file clinet2.py

import zerorpc
import multiprocessing as mp

def sub_func():
    sub_client = zerorpc.Client()
    sub_client.connect("tcp://127.0.0.1:9889")
    print(sub_client.mul(3, 3))

if __name__ == "__main__":
    client = zerorpc.Client()
    client.connect("tcp://127.0.0.1:9888")
    ps = mp.Process(target=sub_func, args=())
    ps.start()
    print(client.add(3, 3))
    ps.join()
```

When I start subprocess and then constructed client in main process, both calls sucess.
```
# file client2.py

import zerorpc
import multiprocessing as mp

def sub_func():
    sub_client = zerorpc.Client()
    sub_client.connect("tcp://127.0.0.1:9889")
    print(sub_client.mul(3, 3))

if __name__ == "__main__":
    ps = mp.Process(target=sub_func, args=())
    ps.start()
    client = zerorpc.Client()
    client.connect("tcp://127.0.0.1:9888")
    print(client.add(3, 3))
    ps.join()
```

Python version: 3.6.8
zerorpc version: 0.6.1
How can I use zerorpc client in Django? I put connection in django settings, and try to use the rpc connection in anywhere in Django project. However it always hangs, it shows the error: 

  File "/Users/kimi/how/env/athena/lib/python3.6/site-packages/zerorpc/events.py", line 136, in __call__
    self._send_queue.put(parts, timeout=timeout)
  File "src/gevent/queue.py", line 629, in gevent._queue.Channel.put
  File "src/gevent/queue.py", line 624, in gevent._queue.Channel.put
  File "src/gevent/_waiter.py", line 151, in gevent.__waiter.Waiter.get
  File "src/gevent/_greenlet_primitives.py", line 61, in gevent.__greenlet_primitives.SwitchOutGreenletWithLoop.switch
  File "src/gevent/_greenlet_primitives.py", line 61, in gevent.__greenlet_primitives.SwitchOutGreenletWithLoop.switch
  File "src/gevent/_greenlet_primitives.py", line 65, in gevent.__greenlet_primitives.SwitchOutGreenletWithLoop.switch
  File "src/gevent/__greenlet_primitives.pxd", line 35, in gevent.__greenlet_primitives._greenlet_switch
gevent.exceptions.LoopExit: This operation would block forever
        Hub: <Hub '' at 0x119ba7cc0 select pending=0 ref=0 thread_ident=0x700001482000>
        Handles:
[]

Is it possible to reduce the time before the TIME_WAIT turns to closed connection?

Once the client has finished the connection remains opened on TIME_WAIT for 30 seconds or so. 

I have a multithread task task that executes every 10 seconds opening a new connection.

If I can't find a way to reduce the time before the connection closes I risk to exhaust all the available ports.
It looks like that scheduling jobs with Apscheduler doesn't go along with zerorpc.

- When testing using test(some_value) zerorpc works wll.
- When stating the scheduler I get always the following exception:
```
gevent.exceptions.LoopExit: This operation would block forever
	Hub: <Hub '' at 0x1074aff60 select pending=0 ref=0 thread_ident=0x70000c356000>
	Handles:
[]
```

This is my code:

```python
import zerorpc
from apscheduler.schedulers.background import BlockingScheduler
from datetime import datetime

rpc = zerorpc.Client()
rpc.connect("tcp://{}:{}".format('127.0.0.1', 4242))

def test(x):
    rpc.write('variable_name', x)

def run():
    def test():
        rpc.write('variable_name', 0)
        rpc.write('variable_name', 1)

    scheduler = BlockingScheduler()
    scheduler.add_job(
        func=test,
        trigger='interval',
        seconds=1,
        start_date=datetime.now(),
    )

    scheduler.start()
```
Would it be possible to have Decimal values correctly serialized?