```
$ vagrant box add ubuntu/bionic64
```
Vagrant failed to initialize at a very early stage:

The plugins failed to load properly. The error message given is
shown below.

cannot load such file -- vagrant/ip/show

Resolved with: 
```
$ vagrant plugin uninstall vagrant-ip-show
```
Uninstalling the 'vagrant-ip-show' plugin...
Successfully uninstalled vagrant-ip-show-0.0.4

### Provider
VirtualBox 

### Vagrant version
Vagrant 2.2.5

### Host OS
macOS

### Guest OS
ubuntu/bionic64


since Vagrant version 2.2.6 vagrant creates wrong entry on very first line in /etc/hosts:

> 127.0.0.1  myserver1.domain myserver1



### Vagrant version
2.2.6

### Host operating system
Windows 10 (1903)

### Guest operating system
N/A

### Vagrantfile
```ruby
Vagrant.configure("2") do |config|

    config.vm.box = "ubuntu/xenial64"
    config.vm.define "XXX"

    config.vm.network "forwarded_port", guest: 443, host: 8443

    config.vm.provision :shell, :path => "vagrant/bash/bootstrap.sh"
    config.vm.provision :shell, :path => "vagrant/bash/start.sh", run: 'always'

    config.vm.synced_folder ".", "/XXX"

end
```
### Debug output
N/A

### Expected behavior
Executing `vagrant up` as part of an NPM-script should bring up the Vagrant-box.

### Actual behavior
Upon trying to execute `vagrant up` inside an NPM-script, the following error is raised:

```
C:/HashiCorp/Vagrant/embedded/gems/2.2.6/gems/vagrant-2.2.6/lib/vagrant/bundler.rb:54:in `[]=': Invalid argument - ruby_setenv(GEMRC) (Errno::EINVAL)
        from C:/HashiCorp/Vagrant/embedded/gems/2.2.6/gems/vagrant-2.2.6/lib/vagrant/bundler.rb:54:in `initialize'
        from C:/HashiCorp/Vagrant/embedded/gems/2.2.6/gems/vagrant-2.2.6/lib/vagrant/bundler.rb:32:in `new'
        from C:/HashiCorp/Vagrant/embedded/gems/2.2.6/gems/vagrant-2.2.6/lib/vagrant/bundler.rb:32:in `instance'
        from C:/HashiCorp/Vagrant/embedded/gems/2.2.6/gems/vagrant-2.2.6/bin/vagrant:95:in `<main>'
```

Running `vagrant up` directly on the console (i.e. executing `vagrant up` instead of `npm run vagrant`) does not give the error &ndash; Vagrant starts the VM just fine.

### Steps to reproduce
1. `npm init`
2. In the `scripts`-section of `package.json`, add  `"vagrant": "vagrant up"`
3. Exectue `npm run vagrant`

### References
It appears a workaround for a Windows-related `ENV['GEMRC']` problem in RubyGems is causing this behaviour. Removing the workaround code solves the issue described above. See the below pull-request and the original RubyGems issue for more details.

 - https://github.com/hashicorp/vagrant/pull/11306
 - https://github.com/rubygems/rubygems/pull/2735
So the call in:

https://github.com/hashicorp/vagrant/blob/a4d5ee6ac1aa88d827fc05e2ba85a90bc40ba004/plugins/provisioners/salt/provisioner.rb#L379

must fail because the minion(s) is/are not setup yet (if there is one minion different from the local master vagrant guest to be setup)!
This can be ignored by general salt option `--hide-timeout`
# Vagrant version
2.2.6

# Host operating system
Windows 10/Ubuntu 18.04 (WSL2)`

# Guest operating system
Ubuntu 18.04

# Request
With WSL2 Microsoft has moved to a complete Linux VM. Would it be possible to integrate Vagrant in such a way with WSL2 that installing Vagrant/VirtualBox on the Windows side would not be necessary?

Windows commands that run over SSH are wrapped in a script that writes a
special marker to the two output streams (stdout and stderr).  This
allows Vagrant to consume the output streams.

Unfortunately, this leads to a sort of chicken-and-egg problem where no
commands can be run before a wrapper script exists. For example, you
can't make a destination directory to upload the wrapper script without
first creating a wrapper script to make the directory. :)

This commit changes the behavior of the WinSSH communicator to assume
that the destination directory already exists for provisioning scripts.

It also moves the default `upload_path` from the shell provisioner
config so we can have OS-specific defaults.

Known issues:
- File uploads do not work if the file path has a space in it.

Fixes #11232.
### Host operating system
macOS

### Guest operating system
Linux

### Actual behavior
Vagrant is often used for web development where the developer runs his/her IDE on the host system and executes the code on the guest (web or application server). When using languages like PHP (Composer, vendor folder) or JavaScript (NPM, node_modules folder), many small files are required to develop and run the system. The currently provided mechanisms for shared folders (VBoxSF, NFS and SMB) are not very performant when it comes to many small files. In NFS for example, the guest is acting as a client, so calling composer install or npm install takes a very very long time. I made some benchmarks and saw that I can achieve ~100 MB/s with large files over NFS but only 3 MB/s with many small files. Changing to rsync resolves the performance issues in the guest, but files being created in the guest are not synchronized back to the host. Not having node_modules on the host means less IDE support when trying to check references etc.

### Expected behavior
This is a feature enhancement request.
It's out of scope of HashiCorp/Vagrant to improve VBoxSF, NFS or SMB. NFS or SMB are not suitable for many small files as they produce too much overhead. But I think with some additional rsync options the issues web developers face can be addressed easily.

My ideas:
- Add an option like rsync_auto_background to let vagrant start rsync-auto instead of requiring the user to do so
- Add an option like rsync_direction with options "to_guest", "to_host" or "bidirectional" to not only sync from host to guest but also the other way around or even bidirectional
- Add an option like rsync_direction_master with options "host" or "guest" to tell a bidirectional sync system who is right in case of conflicts

Having bidirectional rsync will solve the currently existing performance issues while still allowing sharing files. There will be a slight delay in the syncing, but I think this is an acceptable trade-off.
remove this warning:
NOTE: Gem::Specification.default_specifications_dir is deprecated; use Gem.default_specifications_dir instead. It will be removed on or after 2020-02-01.
Gem::Specification.default_specifications_dir called from /opt/vagrant/embedded/gems/gems/vagrant-2.2.6/lib/vagrant/bundler.rb:428.

Happens on ruby 2.6.5
The RubyGems pull-request (https://github.com/rubygems/rubygems/pull/2735) this temporary fix/workaround was waiting for to land, got merged in April of 2019.

The workaround is causing Vagrant to crash for many of our Windows users when they try to run `vagrant up` through a NPM-script. Removing the workaround code appears to solve their issue.
### Vagrant version
Vagrant 2.2.6

### Host operating system
Ubuntu Bionic

### Guest operating system
Ubuntu Bionic

### Vagrantfile
N/A

### Debug output
N/A

### Expected behavior
When I run "vagrant cloud search --provider hyperv ubuntu" for instance, i would expect the results to be those boxes that support hyperv.

### Actual behavior
```
vagrant cloud search --provider=hyperv ubuntu
| NAME                | VERSION     | DOWNLOADS | PROVIDERS                                          |
+---------------------+-------------+-----------+----------------------------------------------------+
| hashicorp/precise64 | 1.1.0       | 6,764,219 | virtualbox,vmware_fusion,hyperv                    |
| bento/ubuntu-16.04  | 201912.15.0 | 1,777,728 | virtualbox                                         |
| bento/ubuntu-14.04  | 201808.24.0 |   982,369 | hyperv,parallels,vmware_desktop,virtualbox         |
| generic/ubuntu1604  | 2.0.6       |   654,031 | vmware_desktop,virtualbox,parallels,libvirt,hyperv |
| generic/ubuntu1804  | 2.0.6       |   564,825 | vmware_desktop,virtualbox,parallels,libvirt,hyperv |
| generic/ubuntu1810  | 2.0.6       |   216,323 | vmware_desktop,virtualbox,parallels,libvirt,hyperv |
| generic/ubuntu1704  | 2.0.6       |   143,936 | vmware_desktop,virtualbox,parallels,libvirt,hyperv |
| generic/ubuntu1710  | 2.0.6       |   113,518 | vmware_desktop,virtualbox,parallels,libvirt,hyperv |
| bento/ubuntu-18.04  | 201912.14.0 |    96,306 | virtualbox                                         |
| generic/ubuntu1610  | 2.0.6       |    95,200 | vmware_desktop,virtualbox,parallels,libvirt,hyperv |
+---------------------+-------------+-----------+----------------------------------------------------+
```

### Steps to reproduce
1. Search

### References
