Upgraded to latest packages incl. webpack 4.

Bumps [lodash](https://github.com/lodash/lodash) from 4.17.5 to 4.17.15.
<details>
<summary>Commits</summary>

- [`ddfd9b1`](https://github.com/lodash/lodash/commit/ddfd9b11a0126db2302cb70ec9973b66baec0975) Bump to v4.17.15.
- [`b185fce`](https://github.com/lodash/lodash/commit/b185fcee26b2133bd071f4aaca14b455c2ed1008) Rebuild lodash and docs.
- [`be87d30`](https://github.com/lodash/lodash/commit/be87d303941222b97c482755afc0f4a77ce46c30) Bump to v4.17.14.
- [`a6fe6b1`](https://github.com/lodash/lodash/commit/a6fe6b1e174fd02b5e60eb2664405f4c1262c300) Rebuild lodash and docs.
- [`e371828`](https://github.com/lodash/lodash/commit/e37182845f16715a0d1c391c8662d83c55609cee) Bump to v4.17.13.
- [`357e899`](https://github.com/lodash/lodash/commit/357e899e685872b4af5403ecc4b2a928f961ae63) Rebuild lodash and docs.
- [`fd9a062`](https://github.com/lodash/lodash/commit/fd9a062d57646450b61f74029315abd4cc834b08) Bump to v4.17.12.
- [`e77d681`](https://github.com/lodash/lodash/commit/e77d68121ff00ba86b53eed5893d35adfe94c9dd) Rebuild lodash and docs.
- [`629d186`](https://github.com/lodash/lodash/commit/629d1865793182cd967196716f4beff223aa4a91) Update OpenJS references.
- [`2406eac`](https://github.com/lodash/lodash/commit/2406eac542b2a1282be8d812a6d8a45433ade80a) Fix minified build.
- Additional commits viewable in [compare view](https://github.com/lodash/lodash/compare/4.17.5...4.17.15)
</details>
<br />

[![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=lodash&package-manager=npm_and_yarn&previous-version=4.17.5&new-version=4.17.15)](https://help.github.com/articles/configuring-automated-security-fixes)

Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.

[//]: # (dependabot-automerge-start)
[//]: # (dependabot-automerge-end)

---

<details>
<summary>Dependabot commands and options</summary>
<br />

You can trigger Dependabot actions by commenting on this PR:
- `@dependabot rebase` will rebase this PR
- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it
- `@dependabot merge` will merge this PR after your CI passes on it
- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it
- `@dependabot cancel merge` will cancel a previously requested merge and block automerging
- `@dependabot reopen` will reopen this PR if it is closed
- `@dependabot ignore this [patch|minor|major] version` will close this PR and stop Dependabot creating any more for this minor/major version (unless you reopen the PR or upgrade to it yourself)
- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)
- `@dependabot use these labels` will set the current labels as the default for future PRs for this repo and language
- `@dependabot use these reviewers` will set the current reviewers as the default for future PRs for this repo and language
- `@dependabot use these assignees` will set the current assignees as the default for future PRs for this repo and language
- `@dependabot use this milestone` will set the current milestone as the default for future PRs for this repo and language

You can disable automated security fix PRs for this repo from the [Security Alerts page](https://github.com/vuejs/vue-hackernews-2.0/network/alerts).

</details>

Howdy! Trying to learn Vue and the whole stack. Are you open to a contributor on this demo? Noticing some minor details that could use an update (e.g., stuff that was valid in Webpack 3.x but not 4.x). Would help me to learn/familiarize but also would be nice to contribute back to what you folks are building :)
Hello.
For seo, I need to generate meta tags. For this, I have a mixin that is used globally.
```
const serverHeadMixin = {
  created() {
    const { head } = this.$options;

    if (head) {
      const {title} = head;
      if (title)
        this.$ssrContext.title = getString(this, title);

      const {meta} = head;
      if (meta)
        this.$ssrContext.meta = `\n${getMeta(this, meta, true)}`
    }
  }
};
```

It takes data from head

The head itself is located in the component.

```
head: {
    title: 'title',
    meta: []
},
```

And here I need to turn to `$route.params`

I managed to reach out to i18n, which is in the project this way.

```
<script>
     import {createI18n} from 'Util / i18n';
     const i18n = createI18n ();
     export default {
...

```

and use it in head `title: i18n.t ('meta.mainPage.title')`

i18n.js itself

```
export function createI18n () {
   return new VueI18n ({
     locale: 'ua',
     fallbackLocale: 'ua',
     messages: {...}
   })
}
```

But with a router in any way.
I need to get the parameters of the current route.
How can I do that?

file router/index.js
```
export function createRouter (i18n) {
    const router = new Router ({
        mode: 'history',
        fallback: false,
        routes: [...]
    });
    return router;
}
```


I managed to reach the router like this
```
import {createApp} from '../app';
const {router} = createApp ();
```


But `currentRoute` mutable object

app.js file
```
import Vue from 'vue'
import App from './App'
import {createStore} from './store'
import {createRouter} from './router'
import {createI18n} from "Util / i18n";
import {sync} from 'vuex-router-sync'
import headMixin from './util/title'


Vue.mixin (headMixin);

export function createApp () {
  const store = createStore ();
  const i18n = createI18n ();
  const router = createRouter (i18n);


  sync (store, router);
  
  const app = new Vue ({
    router
    store,
    i18n,
    render: h => h (App)
  });

  return {app, router, store}
}
```

`ERROR in ./src/router/index.js
Module build failed: SyntaxError: Unexpected token (7:35)

   5 | 
   6 | // route-level code splitting
>  7 | const createListView = id => () => import('../views/CreateListView').then(m => m.default(id))
     |                                    ^
   8 | const ItemView = () => import('../views/ItemView.vue')
   9 | const UserView = () => import('../views/UserView.vue')
  10 | 

 @ ./src/app.js 4:0-40
 @ ./src/entry-client.js

ERROR in app.850d387d367a9dc568c3.js from UglifyJs
Unexpected token: punc (,) [app.850d387d367a9dc568c3.js:95,28]`
 I cloned this, now,
This app listens on port 8080, while my api server listens on 3000 in my local dev environment.I am trying to implement user authentication in it, using jwt.

when the client recieves the token from api server,the client state updates with the token, But How do I make the server side state aware that the user is logged in ?

In general, how to sync client side and server side state?

An ugly hack I thought of is that when the user logs in with correct credentials, the api server should open a socket connection with the 8080 server and trigger a state update on server side? Is it an acceptable/scalable solution? What are the best practices regarding this?

MORE DETAILS.. (a) in router I implemented the navigation guard :

      ....
      if (router.app.$store.getters.isLoggedIn)  next()
      else  next('/login')
      ...
Now on login in my Login page, I post an action to my api server (NOT the vue server on port 8080) , and store the token in client side state. But when I reload the logged in dashboard page, it can't find the token on server side state, the function isLoggedIn above returns false, and it tries to render the login page please see the code above, the client side DOM thus doesn't match the server rendered page, and client tries to re-render the DOM on client side.
In file `src/entry-client.js`, we have `beforeRouteUpdate` mixin:

```
Vue.mixin({
  beforeRouteUpdate (to, from, next) {
    const { asyncData } = this.$options
    if (asyncData) {
      asyncData({
        store: this.$store,
        route: to
      }).then(next).catch(next)
    } else {
      next()
    }
  }
})
```

And in `src/views/ItemList.vue`, we have been watching for vue-router's page:
```
  watch: {
    page (to, from) {
      this.loadItems(to, from)
    }
  },
```

And I thought these two code fragments are doing the same thing, is it just for demonstrating or other purposes? Thanks!