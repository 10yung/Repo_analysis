there are so many problems. I tried to compile the program successfully, but when i run the samples, many has errors such as can not load gltf, corrupted suddennly , so i think you should do more work to make it stable
![图片](https://user-images.githubusercontent.com/25721262/72318876-790dba00-36d8-11ea-9cd7-7d5f02b8e059.png)

There are so much terms here: bgfx, mud, two, etc.
What I need is to be able to pop up an OS window, which has two buttons, with a hotkey.
And close that window with a second press of the same hotkey.
Where can I find a tutorial of how to create such example with Visual Studio?
I tried to compile two as described in `README.md` but i got those compiler errors, i'm on Debian 9:
```console
BgfxSystem.cpp
In file included from ../../../src/ctx/Context.h:10:0,
                 from ../../../src/ctx-glfw/GlfwContext.h:11,
                 from ../../../src/bgfx/BgfxSystem.h:13,
                 from ../../../src/bgfx/BgfxSystem.cpp:17:
../../../src/math/Vec.h:208:32: error: ‘two::x3’ declared as an ‘inline’ variable
  export_ constexpr inline vec3 x3 = { 1.f, 0.f, 0.f };
                                ^~
../../../src/math/Vec.h:209:32: error: ‘two::y3’ declared as an ‘inline’ variable
  export_ constexpr inline vec3 y3 = { 0.f, 1.f, 0.f };
                                ^~
../../../src/math/Vec.h:210:32: error: ‘two::z3’ declared as an ‘inline’ variable
  export_ constexpr inline vec3 z3 = { 0.f, 0.f, 1.f };
                                ^~
../../../src/math/Vec.h:212:32: error: ‘two::ZeroQuat’ declared as an ‘inline’ variable
  export_ constexpr inline quat ZeroQuat = { 0.f, 0.f, 0.f, 1.f };
                                ^~~~~~~~
../../../src/math/Vec.h:214:32: error: ‘two::Rect4’ declared as an ‘inline’ variable
  export_ constexpr inline vec4 Rect4 = { 0.f, 0.f, 1.f, 1.f };
                                ^~~~~
```
### hugoam/two now has a Chat Room on Gitter

@hugoam has just created a chat room. You can visit it here: [https://gitter.im/hugoam/two](https://gitter.im/hugoam/two?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&content=body_link).

This pull-request adds this badge to your README.md:


[![Gitter](https://badges.gitter.im/hugoam/two.svg)](https://gitter.im/hugoam/two?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=body_badge)

If my aim is a little off, please [let me know](https://gitlab.com/gitlab-org/gitter/readme-badger/issues).

Happy chatting.


PS: [Click here](https://gitter.im/settings/badger/opt-out) if you would prefer not to receive automatic pull-requests from Gitter in future.

Ubuntu 18
bgfx works for me for the most part. a lot of the compiled scenes will fail. e.g. 08_sky_d, xx_three_d, etc. 
```
[info] ui - window init - resource path /home/pgruenbacher/Code/cpp/two/data
[info] ui - loading images from path /home/pgruenbacher/Code/cpp/two/data/interface/uisprites
[info] ui - loading resources
[info] ui - init input
[info] ui window - resize to (1600, 900) - pixel size (1600, 900)
[warning] ui - style TypeLabel not found
[warning] ui - style TypeLabel not found
[warning] ui - style Tree not found
[warning] ui - style Dockbox not found
[warning] ui - style Section not found
[warning] ui - style Dockbox not found
08_sky_d: malloc.c:2401: sysmalloc: Assertion `(old_top == initial_top (av) && old_size == 0) || ((unsigned long) (old_size) >= MINSIZE && prev_inuse (old_top) && ((unsigned long) old_end & (pagesize - 1)) == 0)' failed.
````
I'll try a quick investigation.

crisper font rendering in particular would go a long way in the examples.
To compile example `05_character` I had to modify the file name for the character model (the trivial patch is attached after the text.)

After doing that I get the following output instead of the expected animated character:

![2019-01-09_18-39-54](https://user-images.githubusercontent.com/35998/50917540-0bcca680-143e-11e9-8c73-0e76e5d139ae.gif)

 (Built from the latest master (00fc8af) using VS2017 on Windows 10 Pro 64 bit with GeForce GTX 1080 graphics card, driver version 417.35, 4k monitor.)

[05_example_file_name_fix.zip](https://github.com/hugoam/mud/files/2741943/05_example_file_name_fix.zip)


Example `03_materials` throws an unhandled exception from `nvoglv64.dll` when I try to run it. (Built from the latest master (00fc8afc) using VS2017 on Windows 10 Pro 64 bit with GeForce GTX 1080 graphics card, driver version 417.35, 4k monitor.)

Unfortunately the exception details are not particularly helpful (at least to me):

````
Unhandled exception at 0x00000000678D0AD9 (nvoglv64.dll) in 03_materials_d.exe: Fatal program exit requested. occurred
````

Neither is the backtrace of the thread that raises the exception:

![image](https://user-images.githubusercontent.com/35998/50914492-f0aa6880-1436-11e9-9442-59f50f9fda52.png)

I tried to find debugging symbols, but it seems that nVidia does not provide .pdb files for their drivers.

Backtrace of the main thread:

![image](https://user-images.githubusercontent.com/35998/50915896-0f5e2e80-143a-11e9-9f3d-6320dc1a70c5.png)


The last two lines of the console log before entering the debugger are:

````
INFO: loading program filter/prefilter_envmap_v0 with options
INFO: loaded program c:/Users/tc/Programming/Games/Toy/mud/data//shaders/compiled/filter/prefilter_envmap_v0 id 19
````

I've also attached the full console log in case there is anything helpful in there: [03_materials_console_output.txt](https://github.com/hugoam/mud/files/2741778/03_materials_console_output.txt)

The debug output is as follows:
[03_materials_debug_output.txt](https://github.com/hugoam/mud/files/2741888/03_materials_debug_output.txt)
I followed the Linux build instructions in the README. From the build log:
```
==== Building 00_cube (debug64) ====
Creating ../../linux64_gcc/obj/x64/Debug/02_camera
Creating ../../linux64_gcc/obj/x64/Debug/00_tutorial
Creating ../../linux64_gcc/obj/x64/Debug/02_camera/example/02_camera
Creating ../../linux64_gcc/obj/x64/Debug/00_tutorial/example/00_tutorial
Creating ../../linux64_gcc/obj/x64/Debug/00_cube
Creating ../../linux64_gcc/obj/x64/Debug/01_shapes
Creating ../../linux64_gcc/obj/x64/Debug/02_camera/example/03_materials
Creating ../../linux64_gcc/obj/x64/Debug/00_tutorial/example/meta/00_tutorial
Creating ../../linux64_gcc/obj/x64/Debug/02_camera/src/mud
Creating ../../linux64_gcc/obj/x64/Debug/01_shapes/example/01_shapes
Creating ../../linux64_gcc/obj/x64/Debug/00_cube/example/00_cube
Creating ../../linux64_gcc/obj/x64/Debug/00_tutorial/src/mud
02_camera.cpp
Creating ../../linux64_gcc/obj/x64/Debug/01_shapes/src/mud
Creating ../../linux64_gcc/obj/x64/Debug/00_cube/src/mud
00_tutorial.cpp
01_shapes.cpp
00_cube.cpp
In file included from ../../../src/noise/Structs.h:9:0,
                 from ../../../src/noise/Api.h:2,
                 from ../../../src/mud/mud.h:13,
                 from ../../../example/02_camera/02_camera.cpp:1:
../../../src/noise/Noise.h:11:23: fatal error: FastNoise.h: No such file or directory
compilation terminated.
02_camera.make:226: recipe for target '../../linux64_gcc/obj/x64/Debug/02_camera/example/02_camera/02_camera.o' failed
make[1]: *** [../../linux64_gcc/obj/x64/Debug/02_camera/example/02_camera/02_camera.o] Error 1
Makefile:108: recipe for target '02_camera' failed
make: *** [02_camera] Error 2
make: *** Waiting for unfinished jobs....
In file included from ../../../src/noise/Structs.h:9:0,
                 from ../../../src/noise/Api.h:2,
                 from ../../../src/mud/mud.h:13,
                 from ../../../example/00_tutorial/00_tutorial.cpp:1:
../../../src/noise/Noise.h:11:23: fatal error: FastNoise.h: No such file or directory
compilation terminated.
```

The include path for 02_camera needs to contain `3rdparty/FastNoise`, and that's missing from the generated makefile in `build/projects/gmake-linux/02_camera.make`.

Looking at the Lua build scripts, 'uses_mud_noise' in 'mud.lua' defines this include directory. That is part of 'mud.noise', which is part of 'mud.mud'. So, 02_camera needs to depend on 'mud.mud'.

So, in 'scripts/mud_example.lua', I added 'mud.mud' to the dependencies for 02_camera:
```
    mud_example("02_camera",            { mud.mud, mud.gfx, mud.gfx.ui, mud.gfx.pbr },   { _G["03_materials"] })
```
I guess that's appropriate since 02_camera.cpp includes "mud.mud"? But it fails, GENie blows up with an error if I do this.