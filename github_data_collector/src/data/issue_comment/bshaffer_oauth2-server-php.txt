
In my application, I'm using this configuration:
```
$config = [
    'use_openid_connect'             => true,
    'issuer'                         => 'mydomain.com',
    'require_exact_redirect_uri'     => false,
    'enforce_state'                  => false,
    'allow_implicit'                 => true,
    'always_issue_new_refresh_token' => true
];
```

As a first step, I request and receive an `authorization_code` at the authentication endpoint with `response_type=code`, `scope=openid email address`.

Then, I call the token endpoint using the `authentication_code` retrieved from the authentication endpoint. As required by the documentation at https://openid.net/specs/openid-connect-core-1_0.html#TokenResponse the id_token is included in the response, however the user claims are missing. Debugging learns the `getUserClaims()` method in my custom storage class is never called, neither by the authentication endpoint (id_token in my database also has no user claims), nor by the token endpoint.

Does anybody have a clue, why the user claims are missing? Or can anybody clarify if the user claims should be put into the storage by the authentication endpoint, or should be added afterwards in the token endpoint?
Is there a way to enforce TLS 1.2. Our cloud site got automatically upgraded to TLS 1.3 and the SSO is not working.
Looking into the code i couldn't figure out how to forcefully accept TLS 1.2
Is it missing `/.well-known/openid-configuration` endpoint that is required by openid client. ??

Or I don't know how to get this endpoint. 

Can somebody please help me about it? 
There is a lot of focus on not using weakly  encrypted passwords. adding an optional salt to 

`protected checkPassword($user, $password, $salt= '')`

and 

`protected function hashPassword($password, $salt='')`

would allow for more flexibility in the implementation
Hi,

Trying to give an answer to : https://github.com/bshaffer/oauth2-server-php/issues/606

This is a "minimal and compatible implementation", see the presentation here : https://oa.dnc.global/web/-Json-Web-Token-JWT-40-.html?lang=en#moreaboutintrospection

You will find there a test application : https://github.com/bdegoy/oauth2-server-php-introspection-test
 
I hope a few will test and comment!
Regards,
Bertrand Degoy
When passing invalid client credentials (either client_id or client_secret) when requesting an access token, instead of returning a 400 response code, it should be returning a 401 response code for unauthorized. Limited it to the case where all conditions (public/non public etc) are passed and its only about the credentials. TokenControllerTest modified accordingly.
We want use the library to facilitate sso. Currently we have logged in users that we wish to authenticate/authorize for external resources. 

The problem is getting the userid into the process. In test the userid was just hardcoded into the authorize.php script. Like this:

$user_id = '5bd0ad6b-12d0-43c6-ab26-7908a2d14985'; // A value on your server that identifies the user

$server->handleAuthorizeRequest($request, $response, $is_authorized, $user_id);

What is the proper way to do this in production? Thanks!

Here is the code in the AuthorizeControllerInterface .php we are most interested in, specifically  
$user_id = $this->somehowDetermineUserId(); 

```
/**
 *  This controller is called when a user should be authorized
 *  by an authorization server.  As OAuth2 does not handle
 *  authorization directly, this controller ensures the request is valid, but
 *  requires the application to determine the value of $is_authorized
 *
 *  @code
 *      $user_id = $this->somehowDetermineUserId(); 
 *      $is_authorized = $this->somehowDetermineUserAuthorization();
 *      $response = new OAuth2\Response();
 *      $authorizeController->handleAuthorizeRequest(
 *          OAuth2\Request::createFromGlobals(),
 *          $response,
 *          $is_authorized,
 *          $user_id
 *      );
 *      $response->send();
 * @endcode
 */
```
Hi,

Is it possible to renew access token using refresh token - But without using client ID?

curl -u clientid:clientpassword http://<>/authorise -d 'grant_type=refresh_token&refresh_token=d05d9da823cdbcbe4eff16f0faf547cb2f575db6'


Hi,
An authorization code is not being store in **oauth_authorization_codes** table in db while I am getting authorization code in $response object. In **authorize.php** page when I comment the line 

> $response->send();

 then authorization code is storing in database. Am I missing something here?
Below is my authorization testing URL
[http://localhost/my-code/authorize.php?response_type=code&client_id=1&state=100&user_id=100](url)