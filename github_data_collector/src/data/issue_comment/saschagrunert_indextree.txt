When dealing with the tree structure, sometimes we want to remove the all children nodes of a specific node but keeping the node itself. For example, removing anything between tags `<p>`  and `</p>`.

Here is a snippet demonstrating how to implement `detach_children` with indextree:

```rust
fn detach_children<T>(self, arena: &mut Arena<T>) {
    for child in self.children(arena) {
        let node = arena[child];
        node.parent = None;
        node.next_sibling = None;
        node.previous_sibling = None;
    }
    
    let node = arena[self];
    node.first_child = None;
    node.last_child = None;
}
```

I haven't tried it yet, so it may not be compiled. 
This is a PoC implementation of #12.

I noticed:
* Updating neighbors are O(1) cost, **if all the nodes have parents**.
    + `indextree` does not provide implicit root nodes, and toplevel nodes can have siblings without parents.
      For such nodes, updating neighbors are O(`num_of_siblings`).
      <https://github.com/saschagrunert/indextree/blob/8e7fafa1c2bca83430192733ae137eba7e7ec1e3/src/relations.rs#L83-L90>
* Now all neighors getters (such as `Node::parent()`) should receive `&Arena<T>`.
  This is not intrinsic difficutly, because when people wanted to get `NodeId` from `Node<T>`, then they would have `&Arena<T>`.
  (However, I feel it is just annoying to pass `&arena` as an argument all the time).

If this change is worth merging, then I think `indextree` should support some mechanism for pseudo-parent node or implicit root node to make updates constant time.
See "Data structures for the document object model" http://www.aosabook.org/en/posa/parsing-xml-at-the-speed-of-light.html section for a neat trick to save one pointer per node while maintaining O(1) operations.