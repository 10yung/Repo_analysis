This one is pretty strange and I can't figure out what's going on.

# The gist

If you have a spec like this:

```ruby
require "rails_helper"

describe "home", js: true do
  it "foo" do
    WebMock.enable!
    WebMock.disable_net_connect!(allow_localhost: true)

    visit root_path

    WebMock.disable!
  end

  it "bar" do
    WebMock.disable_net_connect!(allow_localhost: false)
  end

  it "baz" do
    visit root_path
  end
end
```

and run it in order (`rspec --order defined`) then you get two failures in "baz":

```
          WebMock::NetConnectNotAllowedError:
            Real HTTP connections are disabled. Unregistered request: POST http://127.0.0.1:4444/session/e3eddb2c-cf51-494f-8e73-7ff862ee39fa/url with body '{"url":"http://127.0.0.1:54289/"}' with headers {'Accept'=>'application/json', 'Accept-Encoding'=>'gzip;q=1.0,deflate;q=0.6,identity;q=0.3', 'Content-Length'=>'33', 'Content-Type'=>'application/json; charset=UTF-8', 'User-Agent'=>'selenium/3.142.7 (ruby macosx)'}

          WebMock::NetConnectNotAllowedError:
            Real HTTP connections are disabled. Unregistered request: GET http://127.0.0.1:4444/session/e3eddb2c-cf51-494f-8e73-7ff862ee39fa/alert/text with headers {'Accept'=>'application/json', 'Accept-Encoding'=>'gzip;q=1.0,deflate;q=0.6,identity;q=0.3', 'Cache-Control'=>'no-cache', 'Content-Type'=>'application/json; charset=UTF-8', 'User-Agent'=>'selenium/3.142.7 (ruby macosx)'}
```

If we remove the first test and only keep the last two:

```ruby
require "rails_helper"

describe "home", js: true do
  # it "foo" do
  #   WebMock.enable!
  #   WebMock.disable_net_connect!(allow_localhost: true)

  #   visit root_path

  #   WebMock.disable!
  # end

  it "bar" do
    WebMock.disable_net_connect!(allow_localhost: false)
  end

  it "baz" do
    visit root_path
  end
end
```

and run the specs with `rspec --order defined`, the tests pass.

Note that in both cases when we reach "baz", WebMock is disabled and configured to disallow net connections, but in the first case it fails... I don't know why, but it seems that allowing localhost and visiting the first path somehow affects what happens with subsequent test.

# Where is the problem?

The problem seems to be a weird interaction of WebMock, RSPec, Selenium and Capybara. Maybe the problem is not in WebMock.

Also, if we remove `js: true` from the first snippet, it works fine... so maybe Capybara is setting up something that eventually messes up the way WebMock works?

But maybe you have an idea of why this is happening?

# Full steps to reproduce

## The short method

You can download this zip file 
[test_capybara_webmock.zip](https://github.com/bblimke/webmock/files/4030681/test_capybara_webmock.zip) , uncompress it, and inside that directory run:

```
bundle exec rspec spec/features/home_spec.rb
```

## The long method

- `rails new test_capybara_webmock -T`
- `cd test_capybara_webmock`
- Add this to the Gemfile:
  ```ruby
  group :test do
    gem 'rspec-rails'
    gem 'capybara'
    gem 'selenium-webdriver'
    gem 'geckodriver-helper'
    gem 'webmock'
  end
  ```
- Run `bundle`
- Create a `spec/features/home_spec.rb` file with the contents of the first snippet in this post.
- Run `bundle exec rspec spec/features/home_spec.rb` and see it fail

# The End

Let me know if something is not clear! I'm happy to help figuring out what's going on, and fixing it if possible.

Thank you!
This is an attempted fix for this issue https://github.com/bblimke/webmock/issues/552
NOTE: Faraday::Error::ConnectionFailed.new is deprecated; use Faraday::ConnectionFailed.new instead. It will be removed in or after version 1.0
Faraday::Error::ConnectionFailed.new called from .rbenv/versions/2.6.5/lib/ruby/gems/2.6.0/gems/webmock-3.7.6/lib/webmock/response.rb:60.
I was recently working on mocking out some requests and ran into an issue where I was using webmock to forward mocked requests to a rack app.

I had wrapped a bunch of specs like:

```
Rspec.configure do |config|
  config.around(:each) do |example|
    some_mocking_setup
    example.run  # <- makes a bunch of requests to the mocked endpoints
    some_mocking_teardown # <- uses some of my mocked requests to tell the rack service to reset 
  end
end
```

And was surprised when `some_mocking_teardown` was throwing errors about me attempting my mocking teardown.

I am able to successfully accomplish what I need by doing:
```
Rspec.configure do |config|
  config.before(:each) do |example|
    some_mocking_setup
    example.run  # <- makes a bunch of requests to the mocked endpoints
  end

  config.after(:each) do |example|
    some_mocking_teardown # <- uses some of my mocked requests to tell the rack service to reset 
  end
end
```

I would expect either option to work.

I have included a proposed pr to only reset webmock after the `config.around(:each)` in the webmock configuration. 

Thoughts on this?


A common mistake when testing API's is accidentally including a `/` in a url in one place, while omitting that `/` in another endpoint.  Effectively the endpoint works, yet WebMock will say they are different. 

 E.g. writing `www.example.com/foo` in `assert_requested` when the actual API hits `http://example.com/foo/`. When POSTing to an endpoint with parameters, this imperceptible  difference is easy to miss and can lead to many hours of frustration as developers parse the long comparison output between the two requests to figure out what they did wrong in their API call versus the test case.

---

My suggestion is that WebMock treats URL's ending in `/` the same as urls without the last slash.  For those wanting the old behaviour, the gem could add a flag to reenable it for the few oddball projects actually treating calls to `http://example.com/foo/` and `http://example.com/foo` differently.
This stub, chained with `with()`, will never match its intended request...

```ruby
stub_request(:post, /urlmatcher/).
  with(headers: { 
    "SOAPAction" => "https://some.soap.endpoint/where/things/happen" 
  })
```

because the stub's `HeadersPattern` has been normalized and no longer matches the given header. Note `Soapaction` instead of `SOAPAction`.
```
#<WebMock::HeadersPattern:0x00007fe38db8b078                                                                                                             
     @pattern={"Soapaction"=>"https://www.assuresign.net/Services/DocumentNOW/Envelopes/IEnvelopeService/CreateEnvelope"}>
```
I've put in a PR (#860) to fix up a lot of the deprecation warnings but I haven't the time or understanding to dig into the actual failures. Looks like CI has been red for a while tho.

ETA: 2.7 comes out in mere weeks...
Is there a recommended way to verify the order stubbed requests were called in? This is useful to ensure stubs are called in a correct order due to API limitations.


Stubbing an `Async::HTTP::Client` or `Async::HTTP::Internet` does not return any response for me, but hangs for ever.

Using async-http (0.48.2), webmock (3.7.6), rspec-rails (3.9.0), rails (6.0.1)

Here's some sample code to illustrate:

```ruby
RSpec.describe "Async::HTTP" do
  before { WebMock.disable_net_connect! }

  context "with Internet" do
    class InternetClient
      def initialize(http)
        @http = http
        @host = 'http://example.com'
        @headers =  Protocol::HTTP::Headers[{
          content_type: 'application/json',
          accept: 'application/json'
        }]
      end
      attr_reader :http, :host, :headers

      def post_stuff(body)
        response = http.post("#{host}/stuff", headers, [body])

        if response.success?
          [true, response.read]
        else
          [false, response.read, response.status]
        end
      end
    end

    subject { InternetClient.new(Async::HTTP::Internet.new) }

    specify do
      stub_request(:post, "http://example.com/stuff")
        .with(body: '"request body"')
        .to_return(body: '"response body"')

      expect(subject.post_stuff('"request body"')).to eq([true, '"response body"'])
    end
  end

  context "with Client" do
    class HttpClient
      def initialize(http)
        @http = http
        @headers = {
          content_type: 'application/json',
          accept: 'application/json'
        }
      end
      attr_reader :http, :headers

      def post_stuff(body)
        response = http.post("/stuff", headers, [body])

        if response.success?
          [true, response.read]
        else
          [false, response.read, response.status]
        end
      end
    end

    subject { HttpClient.new(Async::HTTP::Client.new(Async::HTTP::Endpoint.parse('http://example.com'))) }

    specify do
      stub_request(:post, "http://example.com/stuff")
        .with(body: '"request body"')
        .to_return(body: '"response body"')

      expect(subject.post_stuff('"request body"')).to eq([true, '"response body"'])
    end
  end
end
```
I recently ran into an annoying issue with WebMock when implementing stubs the way the gem recommended.  I.e. the gem recommends copying over the `User-Agent` header of each request when pasting in what to stub.

Since most ruby http gems append their gem name and version number as the `User-Agent` in requests, [this means that `WebMock` will automatically break whenever you update your http client, even if nothing else about the request has changed](https://github.com/httprb/http/issues/573).  These breaks from updates are difficult to debug.

Rather than need to hack my HTTP gem to find way to keep my `User-Agent` stable in WebMock across gem updates, it dawned on me that it might be a lot simpler for most developers if WebMock by default just excluded the user-agent altogether from what it recommends stubbing... so that developer's using this tool don't see their tests break in confusing ways when they _inevitably_ update their http client gems.

This will make WebMock tests less brittle, developer's more productive, and if people need the `User-Agent` recommended in their stubbing output they should just add it to their web mock tests manually.

----

It may also be worth thinking about ways to reduce HTTP boilerplate in what webmock's mock.  If so I would recommend removing the `Connection` header also.