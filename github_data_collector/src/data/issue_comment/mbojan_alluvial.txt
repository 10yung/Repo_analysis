Federico writes:

I am using the 'alluvial' R package to generate some plots for my research work and I am very happy about its semplicity and the nice figures I get from it.
I found some problems using the 'ordering' argument in the 'alluvial' function. When I pass a list object to the 'ordering' argument in a three axes data frame (list object with three numerical vectors) I only get the order I expected to the first axes, but not the second and the third.
I had a look at the source code 'alluvial.R' in GitHub and I found a solution (working in my case) by commenting lines 140, 141 and replacing line 134 with:

```r
a <- i
and replacing line 142 with:
o <- ordering[[i]]
```

Actually I did not understand exactly how that part of the code works, but in my case the abovementioned edits did the job.

Hope this feedback may help you to improve the package.

The "matrix-aesthetics" branch includes the option of singleton, vector, or matrix assignments to the four aesthetic parameters (`col`, `alpha`, `border`, and `hide`). Except for some quirky code to combine the `col` and `alpha` assignments, they are all treated the same way, using the internal `flow_matrix()` function. (In **ggalluvial**, i've taken to calling the alluvial segments "flows".) I tried a bunch of different input styles, which seem to hold up. Since the examples include a variety of inputs for these parameters, it didn't seem necessary to include specific ones in a **testthat** script. Though i'm glad to add any extra examples or specific tests if you'd like to see them!


Currently ribbon aesthetics, e.g. color, transparency, border, can be applied for each row in the data frame. In other words, given that there are _k_ variables to be plotted and _n_ combinations of the values of these variables, it is only possible to set color for _n_ ribbons.

However, each ribbon consists of _k-1_ segments. It would be nice to be able to set aesthetics to every one of _n(k-1)_ segments.

What would be the most user-friendly way to specify these aesthetics?

This is related to #11 and #15 

Ideas:

(1) A list of length _n(k-1)_ with `dim` equal to `c(n, k-1)` with each component being a named list of arguments to the spline-plotting function?

Many thanks for the great work

Currently, each xspline represents a single row in the source data.frame.

Is it possible to split the xspline into segments, each one between two consequent columns? This would allow assigning different colour to each segment, e.g., depending on the location of the segment in the whole xspline. I need this in my work to highlight transitions between two specific categories.

Regards,

anassal
