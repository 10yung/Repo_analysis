The `net` package has some good examples for writing socket servers, but it doesn't provide a full example for a robust echo server that reads all data from clients around errors and EOFs.

`io.Reader`'s docs say:

>When Read encounters an error or end-of-file condition after successfully reading n > 0 bytes, it returns the number of bytes read. It may return the (non-nil) error from the same call or return the error (and n == 0) from a subsequent call. An instance of this general case is that a Reader returning a non-zero number of bytes at the end of the input stream may return either err == EOF or err == nil. The next Read should return 0, EOF. 

This is something that's not hard to demonstrate with fairly little amount of code, and a robust socket echo server would make a good example.
In the example of directory, I try to run the program but meet a bug in my VS Code.

**cannot use visit (type func(string, os.FileInfo, error) error) as type filepath.WalkFunc in argument to filepath.Walk**
`golang.org/x/sync/errgroup` is a semi-official package for managing multiple goroutines and propertly propagating their errors, with cancellation support via a context.

We should add an example of `errgroup`, or at least mention it in the WaitGroup example - pointing folks to it for more advanced use cases.

- Removes vendor directory and uses chroma syntax highlighting instead
[github.com/alecthomas/chroma]()
- Add gomod 
- Generates files with new generate.go
- Syntax highlighting seems to be slightly different
I found this greatly simplifies the code dependencies

Refer #287 
Via personal email:

> One function that might be worth adding to https://gobyexample.com/time is how to change the location from UTC to California time.

```
ny,_ := time.LoadLocation("America/New_York")
fmt.Println( "Location: ", ny, "\n\n", "Time: ", time.Now().In(ny))
```

I haven't thought about if I want to include this, just noting for now.
[Coming from this reddit comment](https://www.reddit.com/r/golang/comments/d4q0n2/should_syncwaitgroup_be_passed_to_function/), I think the WaitGroup example could be improved by having the worker function just be a worker function, and performing the wg.Done an anonymous goroutine in the calling context.

You could still mention that sync.WaitGroups need to be passed by pointer at the bottom of the example, if you felt that was important.

See 37740d69. Maybe upgrade to v2 of BlackFriday.
