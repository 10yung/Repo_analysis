Child process is not stop when we call method `markAsTimedOut` it continue work on background

- Added call stop method in markAsTimedOut
- Added possibility modify timeout
I detect some problem when call command in linux terminal  `ps aux | grep ChildRuntime.php | wc -l` result it is number of running processes in system. 
My setting for Pool object concurrency - 5 and timeout - 2. 
When we check expression https://github.com/spatie/async/blob/9ddad44886aa63ddc94a6bb32f00f22aafda11d9/src/Pool.php#L133 
we call  `markAsTimedOut` but the child process is not stoped it continue work on background
I have a project where I need to call 100 cURL calls and I am using this library.
first I create an example 

```
Route::post("data/testx", function (Illuminate\Http\Request $request) {
    $x = [1, 2, 3, 4, 5, 6];
    $start = microtime(true);
    $pool = Pool::create();
    foreach ($x as $y) {
        $pool[] = async(function () use ($y) {
            sleep($y);
            return ($y);
        })->then(function ($output) {
            print $output;
        })->catch(function ($exception) {
        });
    }
    await($pool);
    $time_elapsed_secs = microtime(true) - $start;
    print "---------------\n";
    print $time_elapsed_secs;
});
```

And this work correctly but when I use cURL times double
in data.zip you can find measurements of time how long cURL need to execute but full time is much more, I am expecting the longest response with maybe 2-3 seconds more but whole execution it goes up to 38 sec, you can see in JSON example 

[data.zip](https://github.com/spatie/async/files/3996531/data.zip)

  ```
$pool = Pool::create()->concurrency(60)->sleepTime(50000);
        foreach ($urls as $url) {
            $pool[] = async(function () use ($url) {
                $start = microtime(true);
                $curl = curl_init();
                curl_setopt_array($curl, array(
                    CURLOPT_URL => $url['url'],
                    CURLOPT_RETURNTRANSFER => true,
                    CURLOPT_ENCODING => "",
                    CURLOPT_MAXREDIRS => 3,
                    CURLOPT_TIMEOUT => 20,
                    CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
                    CURLOPT_CUSTOMREQUEST => "POST",
                    CURLOPT_POSTFIELDS => $url['postdata'],
                    CURLOPT_HTTPHEADER => array(),
                    CURLOPT_CONNECTTIMEOUT => 20,
                ));

                $response = curl_exec($curl);
                curl_close($curl);

                $time_elapsed_secs = microtime(true) - $start;
                return ["url" => $url['url'], "time" => $time_elapsed_secs];
            })->then(function ($output) use (&$data) {
                $data["key" . rand(999, 99999)] = $output;
            });
        }

```
In data.zip you can find results
Can you check and guide me on what I am doing wrong here?

I've decided it would be good to make a dedicated issue explaining about what this package does and doesn't do. Lots of people open keep opening the same kind of issue, so I hope to explain it once and for all in this one.

Sometimes your async tasks don't work, they throw strange errors and what not. It's important to realise how tasks are run asynchronously. Each task is a new PHP process created on the fly, which can execute time-consuming code. This package aims to run these kinds of time consuming tasks in parallel, so that instead of waiting 60 seconds for 10 6-seconds tasks to finish, you could run 10 processes at the same time, finishing the task in 6 seconds (actually it's a little more because process management also adds some overhead).

That's rule number one: **this package is only useful if you're dealing with several tasks which take _at least_ a few seconds each to process**.

So what about strange errors you don't understand? Since parallel tasks are executed in their own process, there's no concept of a booted framework. I often see people trying to use Laravel models in tasks, while they don't realise Laravel doesn't exist in these child processes. You can of course boot Laravel, or whatever framework you want, manually in child processes, though chances are your use case isn't what this package is meant for.

That's rule number two: **parallel tasks are run in _clean_ PHP processes, there's no concept of a framework unless you boot it manually within that task**.

In case you need lots of framework-specific functionality, I'd suggest to first look at the existing queueing systems of your framework, instead of using this package.
I'm not sure what the exact cut-off is, though at least on outputs of several megabytes (now possible thanks to the changes in 1.1.0) on RHEL 7, the Pool seems to enter a hang state -- I don't understand the exact mechanism, but I'm guessing the output pipe is filling its buffer and then blocking for the parent process to read it, which isn't happening. Subsequently, the child process never exits, never fires SIGCHILD, and thus the Pool never completes, entering an infinite wait.

One simple solution, which may not be the best, is here: https://github.com/FreezeWarp/async/commit/deab44eef721cf1b7ac6af88fd95c4ffbf7e9351

I'm happy to open a pull request if this seems like a satisfactory solution.

Regards,
JTP
My hoster has multiple php executables installed. The „php“ command defaults to php 5.6 which wont work as the parent app runs php 7.3 because this lib spawns childs at php 5.6.
I think its this line of code:
https://github.com/spatie/async/blob/5ac27b358058d88ae74e53e590c4c89bccc6630e/src/Runtime/ParentRuntime.php#L67

How can I get it to work so the child progess also uses PHP 7.3?
