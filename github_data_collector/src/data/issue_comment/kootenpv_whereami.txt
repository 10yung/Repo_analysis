I would like to track my phone, to get its location and obtain RSSI values as well. How can it be done? Any ideas? 
Fixes #51
The names of locations lose any number of trailing 't' or 'x' characters, e.g.

```console
$ whereami learn -l couch-right &>/dev/null
$ whereami locations
couch-righ: 1
```

This is due to using `rstrip(".txt")` on the filename at [get_data.py:42](https://github.com/kootenpv/whereami/blob/master/whereami/get_data.py#L42), which will strip any number of '.', 't', or 'x' characters. 
When running `whereami crossval`, I get

    ValueError: n_splits=10 cannot be greater than the number of members in each class.

I suspect this happens when the total number of samples is >= 10, but one of the locations has < 10 samples. This case should be checked for and handled gracefully the same way as the case when the total number of samples is < 10, i.e. not throw an exception.
On python3.3.6:
```
/usr/local/lib64/python3.6/site-packages/sklearn/ensemble/weight_boosting.py:29: DeprecationWarning: numpy.core.umath_tests is an internal NumPy module and should not be imported. It will be removed in a future NumPy release.
  from numpy.core.umath_tests import inner1d
```
None
Ambient conditions (fog, storms, air quality, etc.) regularly affect radio transmissions in the suburban neighborhoods I've lived at. Some ambient conditions--like storms and fog--occur less regularly than the nighttime drops in temperature and humidity. (On the average, for any given geographic location, temperature and humidity are correlated by time of day.) The influences of ambient conditions on wifi RSSI will be less pronounced in denser, urban environments than suburban environments. The same goes for more climate-controlled environments (large libraries, universities, etc.). So, this may not be applicable in all use cases.

Nonetheless, given this time constant, I think factoring time-of-day into measurements and samples would be an interesting and useful addition to the project. I've kinda implemented this by changing the names of my classes, e.g., "shop-bedroom-day" and "shop-bedroom-night" or "shop-office-day" and "shop-office-night."

Is there a way the project could make this more formal? Like, adding a time-of-day component to locations?
Installed with `sudo pip install -U whereami` with system's python. My current locations are : 
```
shop-bedroom-bed: 8
shop-window: 5
shop-couch: 4
shop-frontporch: 3
shop-kitchen: 4
shop-bathroom: 2
shop-backporch: 3
shop-bedroom-desk: 5
```
When I run `whereami crossval`, I get a stacktrace ending with `ValueError: n_splits=10 cannot be greater than the number of members in each class.` I'm not sure how to fix this error, but in searching around for a fix, I feel like the existing project documentation could be a little clearer, e.g., where the trained data is, whether it's different from data in ~/.whereami/*.txt, what exactly `whereami train` does, what's the benefit of the `-n 4` samples option, and how to use the `rename` option. If this is already documented, could you please point me in the right direction?

**EDIT** for the n_splits error, this link [https://stackoverflow.com/questions/48313387/valueerror-n-splits-10-cannot-be-greater-than-the-number-of-members-in-each-cla](url) is helpful.

So it follows that one benefit of setting samples option during learn is that one sooner reaches the minimum of 10 samples necessary to run `whereami crossval`.
The system currently prints contents as a Python dictionary, which is a hassle to parse. Adding support for JSON and text outputs.
In windows 10, Wi-Fi sampling must be done between every iteration. Otherwise, the method used here will return data of the same values, and there is no point in collecting n-records. It will all represent a single value. The program needs to call the Windows API to refresh the API points before gathering a new sample. 