for example, this does not work

`import com.github.salomonbrys.kotson.*
import com.google.gson.*

fun main (args: Array <String>) {
    val obj:JsonObject = jsonObject(
            "name" to "kotson",
            "files" to 4
    )
    println(" ${obj}")
    class Person(public val obj: JsonObject) {
        val name: String by obj.byString("name") 
        val files: Int by obj.byInt("files")   
    }
    val person=Gson().fromJson(obj,Person ::class.java)
}`
It would be nice if there was a option (or if it was the default behavior) to evaluate delegates when serializing objects.

For example, `val jumps by json.byInt` would serialize to something like `"jumps": 3`.

This would extremely helpful when using a class that generated from json using the json delegates (byInt, etc).  Right now, using these requires a custom serializer to be serializable properly.
Does this support Kotlin's default values? With Gson when deserializing, if a value does not exist, it becomes null. Since this is supposed to support Kotson, does that value now get set to default value if it does not exist?
I have a json like this
```kotlin
    val JSON_LIST_STRING = """
{
  "code": "0",
  "msg": "Success",
  "subcode": "0",
  "data": [{
    "test": 10
  }
  ]
}
""".trimIndent()
```
model like this
``` kotlin
    data class TestObject(val test: Int)

public class ApiResult<T> {
    private int code;
    private int subcode;
    private String msg;
    private T data;

    public int getCode() {
        return code;
    }

    public void setCode(int code) {
        this.code = code;
    }

    public String getMsg() {
        return msg;
    }

    public void setMsg(String msg) {
        this.msg = msg;
    }

    public T getData() {
        return data;
    }

    public void setData(T data) {
        this.data = data;
    }

    public boolean isOk() {
        return code == 0;
    }

    @Override
    public String toString() {
        return "ApiResult{" +
                "code='" + code + '\'' +
                ", msg='" + msg + '\'' +
                ", data=" + data +
                '}';
    }

    public int getSubcode() {
        return subcode;
    }

    public void setSubcode(int subcode) {
        this.subcode = subcode;
    }
}

```
test code like this
``` kotlin
  @Test
    fun testFunListGson() {

        val result = data<List<TestObject>>()
        assertThat(result.data[0].test).isEqualTo(10)
    }

    @Test
    fun testDirectListGson() {

        val result = gson.fromJson<ApiResult<List<TestObject>>>(JSON_LIST_STRING)
        assertThat(result.data[0].test).isEqualTo(10)
    }

    fun <T> data(): ApiResult<T> {
        return gson.fromJson(JSON_LIST_STRING)
    }
```

Expect `testFunListGson` will pass, but it failed like this
```
java.lang.ClassCastException: com.google.gson.internal.LinkedTreeMap cannot be cast to com.xxx.GsonTest$TestObject
```
It looks like it's not getting past the underneath generic type.
Would be nice to map directly to Array of Strings if possible.  Might be missing how to do this, but this is my current way of doing so:

```
    private val _modes by obj.byNullableArray("MODES")
    val modes: Array<String>? by lazy {
        _modes?.map { it.string }?.toTypedArray()
    }
```
Hi,

What Kotlin's field modifier that compatible with **Java Modifier.PRIVATE, Modifier.PROTECTED, Modifier.PUBLIC**?

I tried with the following

```
class Config(activity: Activity) {
    var remoteUrl: String = "ABC"
    var localUrl: String = "DEF"
    protected val preferences: SharedPreferences = activity.getPreferences(Context.MODE_PRIVATE)

    fun save() {
        val gson = GsonBuilder().excludeFieldsWithModifiers(Modifier.PROTECTED).create()
        Log.e(">> SAVE", gson.toJson(this))
    }
}
```

But **preferences** field still included on the json output

Thanks

I have this class: 
```kotlin
class Project {
    val nameProperty = SimpleStringProperty("foobar")
    val name by nameProperty
}
````

I use [Fx-GSON](https://github.com/joffrey-bion/fx-gson) library to serialize JavaFx Properties.

When I serialize it to JSON I get this:

```json
{
    "nameProperty": "foobar",
    "name$delegate": "foobar"
}
```

But when I deserialize it back to the object of type `Project` the `name` and `nameProperty` are **2 different objects**.

How to make `name` property delegate to the new `nameProperty`?

Update to Kotlin 1.5.1, Gradle wrapper 4.2.1 and to newer Spek
![image](https://user-images.githubusercontent.com/456499/28280483-2777eb66-6b24-11e7-9027-a7b01ac56e6c.png)

ðŸ˜¢ 
From the readme:

> Attention: gson.fromJson<MyType> will return a non-nullable type whereas gson.fromJson<MyType?> will return a nullable type. Therefore the code gson.fromJson<MyType>("null") is correct and will throw a null-pointer exception!

But it is not possible to use `MyType?`, Kotlin says the following: `Type argument not within its bounds`, which it's expected since it's expecting `Any`, non-nullable.