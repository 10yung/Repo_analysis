Please ensure the following before submitting a PR:

 - [x] if suggesting code changes or improvements, [open an issue](https://github.com/leeper/rio/issues/new) first
 - [x] for all but trivial changes (e.g., typo fixes), add your name to [DESCRIPTION](https://github.com/leeper/rio/blob/master/DESCRIPTION)
 - [x] for all but trivial changes (e.g., typo fixes), documentation your change in [NEWS.md](https://github.com/leeper/rio/blob/master/NEWS.md) with a parenthetical reference to the issue number being addressed
_Will add entry in the final version of this currently draft PR_
 - [ ] if changing documentation, edit files in `/R` not `/man` and run `devtools::document()` to update documentation
_No documentation changes_
 - [x] add code or new test files to [`/tests`](https://github.com/leeper/rio/tree/master/tests/testthat) for any new functionality or bug fix
 - [x] make sure `R CMD check` runs without error before submitting the PR

This is a draft PR because, like the others, it depends on #251 first being merged. Once #251 is merged, I will start working to apply the approach demonstrated here to the other haven-supported formats unless I receive feedback that for some reason I should not do this.

Once complete, this will address the issue raised in #248 as well as any (or at least most) new arguments haven might add in the future.

Please ensure the following before submitting a PR:

 - [x] if suggesting code changes or improvements, [open an issue](https://github.com/leeper/rio/issues/new) first
_This is related to closed issues #221, #222, #223, and #224... but is a cleaner refactoring of those solutions_
 - [x] for all but trivial changes (e.g., typo fixes), add your name to [DESCRIPTION](https://github.com/leeper/rio/blob/master/DESCRIPTION)
 - [ ] for all but trivial changes (e.g., typo fixes), documentation your change in [NEWS.md](https://github.com/leeper/rio/blob/master/NEWS.md) with a parenthetical reference to the issue number being addressed
_No changes visible to end-user_
 - [ ] if changing documentation, edit files in `/R` not `/man` and run `devtools::document()` to update documentation
_No changes_
 - [x] add code or new test files to [`/tests`](https://github.com/leeper/rio/tree/master/tests/testthat) for any new functionality or bug fix
 - [x] make sure `R CMD check` runs without error before submitting the PR

This is a draft PR for the same reason that #255 is-- it's contingent on #251.
Please ensure the following before submitting a PR:

 - [ ] if suggesting code changes or improvements, [open an issue](https://github.com/leeper/rio/issues/new) first
 - [x] for all but trivial changes (e.g., typo fixes), add your name to [DESCRIPTION](https://github.com/leeper/rio/blob/master/DESCRIPTION)
 - [ ] for all but trivial changes (e.g., typo fixes), documentation your change in [NEWS.md](https://github.com/leeper/rio/blob/master/NEWS.md) with a parenthetical reference to the issue number being addressed
_My changes should be invisible except that errors caused by unknown arguments are prevented_
 - [ ] if changing documentation, edit files in `/R` not `/man` and run `devtools::document()` to update documentation
_`import_delim()` is not exported, and its usage has not been altered_
 - [ ] add code or new test files to [`/tests`](https://github.com/leeper/rio/tree/master/tests/testthat) for any new functionality or bug fix
_All tests continue to pass_
 - [x] make sure `R CMD check` runs without error before submitting the PR

Closes #241 and in the process shortens `import_delim()` by letting `arg_reconcile()` handle both the mapping and filtering of arguments (all `import_delim()` has left to do is converting `sep` and `header` if either of them are equal to `'auto'`). 

This is submitted as a draft request because it depends on #251 which is still under review. I wanted to provide a use-case for #251.
Hello, I noticed `csv.gz` is not loaded via data.table while data.table now natively reads gzipped files. Is there a reason for it ?
Also, can I suggest adding support for [qs](https://github.com/traversc/qs), qs provides fast serialization for R objects, and is even faster than fst. The huge plus is that it works for ALL types, so it should really replace rds as it does the same thing but much better.
Regards

Please ensure the following before submitting a PR:

 - [x] if suggesting code changes or improvements, [open an issue](https://github.com/leeper/rio/issues/new) first 
      closes #245 and maybe #231 
 - [x] for all but trivial changes (e.g., typo fixes), add your name to [DESCRIPTION](https://github.com/leeper/rio/blob/master/DESCRIPTION)
 - [x] for all but trivial changes (e.g., typo fixes), documentation your change in [NEWS.md](https://github.com/leeper/rio/blob/master/NEWS.md) with a parenthetical reference to the issue number being addressed
 - [x] if changing documentation, edit files in `/R` not `/man` and run `devtools::document()` to update documentation
 - [x] add code or new test files to [`/tests`](https://github.com/leeper/rio/tree/master/tests/testthat) for any new functionality or bug fix
 - [x] make sure `R CMD check` runs without error before submitting the PR

An arg_reconcile() function to generically remap and de-duplicate arguments for the function specified as its first argument.
Please specify whether your issue is about:

 - [ ] a possible bug
 - [ ] a question about package functionality
 - [x] a suggested code or documentation change, improvement to the code, or feature request



Please specify whether your issue is about:

 - [ ] a possible bug
 - [ ] a question about package functionality
 - [x] a suggested code or documentation change, improvement to the code, or feature request


I would like to volunteer to fix #241 (actually I meant to submit a PR after I posted it, but got busy with a few other things). Looking over it I see an opportunity to simplify the individual import and export functions and make them more maintainable. Namely generalizing the `args <- args[intersect(args,formals(fn))]` pattern in the function sketched out below (not yet thoroughly tested, just proof of concept). While we're at it, we could include additional safeguards: removing duplicate arguments and unnamed arguments, and re-mapping certain argument names. This function could safely be run on all underlying functions-- if they don't need argument filtering because they have `...` among their formals, they would still benefit from remapping and protection against duplication (to which `...` functions are particularly vulnerable otherwise).

I am _not_ proposing to cut over all the functions at once. I am proposing to use this for fixing current and future unknown-argument bugs as they are noticed. Possibly updating and testing and already patched functions such as in #221 and #223 individually as time permits.

I understand reluctance to introduce an upstream dependency on `R.utils::DoCall` which has similar functionality. The below code only uses base R.

So, if this is acceptable, I would like to submit this as a PR, and follow that one with a PR that actually closes #241 

Put your code here:

```R
#' Adapt an argument list to a function excluding arguments that will not be 
#' recognized by it, redundant arguments, and un-named arguments.
#'
#' @param fn A function to which an argument list needs to be adapted.
#' @param ... An arbitrary list of named arguments (unnamed ones will be ignored)
#' @param .args A list or \code{alist} of named arguments, to be merged with \code{...}
#' @param .docall If set to \code{TRUE} will not only clean up the arguments but 
#'                also execute \code{fn} with those arguments (\code{FALSE} by
#'                default)
#' @param .remap An optional named character vector or named list of character 
#'               values for standardizing arguments that play the same role but
#'               have different names in different functions.
#' @param .warn Whether to issue a warning message (default) when invalid 
#'              arguments need to be discarded.
#'
#' @return Either a named list or the result of calling \code{fn} with the 
#'         supplied arguments
#'
#' @examples
#' 
#' arg_reconcile(p.adjust,bla='aaa',baz='xzzz',n=40,q=c(.1,.2,.02,.3,1,0,1),.remap = c(q='p'))
#' arg_reconcile(import,file='hello.csv',file='goodbye.csv',
#'               bla='aaa',baz='xzzz',format='csv')
arg_reconcile <- function(fn,...,.args=alist(),.docall=FALSE,
                          .remap=list(),
                          .warn=TRUE){
  # capture the formal arguments of the target function
  frmls <- formals(fn)
  # capture the arguments, both freeform and an explicit list
  args <- c(list(...),.args)
  # get rid of duplicate arguments
  for(ii in names(args)) {
    if( sum(dupe <- names(args) %in% ii)>1) {
      args[seq_along(args)[dupe][-which(TRUE,dupe)]] <- NULL
    }
  }
  # if any remappings of one argument to another are specified, perform them
  for( ii in names(.remap) ){
    if( !.remap[[ii]] %in% names(args) && ii %in% names(args) ){
      args[[.remap[[ii]] ]] <- args[[ii]]}
  }
  # remove any unnamed arguments
  args[names(args)==""] <- NULL
  # if the target function doesn't have '...' as an argument, check to make sure
  # only recognized arguments get passed, optionally with a warning
  if ( !'...' %in% names(frmls) ){
    unused <- setdiff(names(args),names(frmls))
    if ( length(unused)>0 && .warn ){
      warning("The following arguments were ignored for ",substitute(fn),":\n",
              paste(unused, collapse = ', '))
      args <- args[intersect(names(args),names(frmls))]
    }
  }
  # the final, cleaned-up arguments either get used on the function or returned
  # as a list, depending on how .docall is set
  if ( .docall ) return(do.call(fn,args)) else return(args);
}

```


This is analogous to previously implemented enhancements from issues #221 and #223 except now it's for `rio:::import_delim()`

i.e. cross-checking the arguments passed via `...` against the arguments understood by `data.table::fread()` so that there is a warning instead of an error when an unsupported argument is passed. 

If a PR is welcome for this I will try to submit one this week.


Please specify whether your issue is about:

 - [ ] a possible bug
 - [ ] a question about package functionality
 - [x] a suggested code or documentation change, improvement to the code, or feature request

If you are reporting (1) a bug or (2) a question about code, please supply:

 - [a fully reproducible example](http://stackoverflow.com/questions/5963269/how-to-make-a-great-r-reproducible-example) using a publicly available dataset (or provide your data)
 - if an error is occurring, include the output of `traceback()` run immediately after the error occurs
 - the output of `sessionInfo()`

Put your code here:

```R
## load package
library("rio")
library("datasets")

## code goes here
export(iris,"iris.txt")
foo <- import(iris,"iris.txt", foo=42)
# Error in fread(dec = ".", foo = 42, input = "iris.txt", sep = "auto",  : 
# unused argument (foo = 42)
```
<details><summary>traceback</summary>
<pre>
5: do.call("fread", dots) at import_methods.R#12
4: import_delim(file = file, sep = sep, fread = fread, dec = dec, 
       ...) at import_methods.R#50
3: .import.rio_tsv(file = file, ...) at extensions.R#17
2: .import(file = file, ...) at import.R#132
1: import("iris.txt", foo = 42)
</pre>
</details>

<details><summary>session info for your system</summary>
<pre>
R version 3.4.4 (2018-03-15)
Platform: x86_64-pc-linux-gnu (64-bit)
Running under: Ubuntu 14.04.6 LTS

Matrix products: default
BLAS: /usr/lib/openblas-base/libblas.so.3
LAPACK: /usr/lib/lapack/liblapack.so.3.0

locale:
 [1] LC_CTYPE=en_US.UTF-8       LC_NUMERIC=C               LC_TIME=en_US.UTF-8       
 [4] LC_COLLATE=en_US.UTF-8     LC_MONETARY=en_US.UTF-8    LC_MESSAGES=en_US.UTF-8   
 [7] LC_PAPER=en_US.UTF-8       LC_NAME=C                  LC_ADDRESS=C              
[10] LC_TELEPHONE=C             LC_MEASUREMENT=en_US.UTF-8 LC_IDENTIFICATION=C       

attached base packages:
[1] stats     graphics  grDevices utils     datasets  methods   base     

other attached packages:
[1] rio_0.5.20     testthat_2.2.1

loaded via a namespace (and not attached):
 [1] zip_2.0.4           Rcpp_1.0.2          cellranger_1.1.0    compiler_3.4.4     
 [5] pillar_1.4.2        prettyunits_1.0.2   forcats_0.4.0       remotes_2.1.0      
 [9] tools_3.4.4         zeallot_0.1.0       digest_0.6.21       pkgbuild_1.0.6     
[13] pkgload_1.0.2       memoise_1.1.0       tibble_2.1.3        pkgconfig_2.0.3    
[17] rlang_0.4.0         openxlsx_4.1.0.1    cli_1.1.0           rstudioapi_0.10    
[21] curl_4.2            yaml_2.2.0          haven_2.1.1         withr_2.1.2        
[25] desc_1.2.0          fs_1.3.1            vctrs_0.2.0         devtools_2.2.1.9000
[29] hms_0.5.1           rprojroot_1.3-2     glue_1.3.1          data.table_1.12.4  
[33] R6_2.4.0            processx_3.4.1      readxl_1.3.1        foreign_0.8-70     
[37] sessioninfo_1.1.1   callr_3.3.2         magrittr_1.5        backports_1.1.5    
[41] ps_1.3.0            ellipsis_0.3.0      usethis_1.5.1       assertthat_0.2.1   
[45] crayon_1.3.4       
</pre>
</details>
I'm not super keen on trying to parse with every imaginable import function. That might produce some kind of unanticipated weird behavior if one of those underlying functions changes to start supporting different kind of file or if we add future functionality that changes the deterministic order of import attempts.

We could add a separate function that does that, though, like `try_import()`.

_Originally posted by @leeper in https://github.com/leeper/rio/issues/180#issuecomment-538634953_
I'm watching a series of related issues and PRs here re: `...`.

The tidyverse/r-lib packages are using the [ellipsis](https://ellipsis.r-lib.org) package for similar functionality, in case that holds any interest. Yes, it would be a dependency. But it would also eliminate the need to grow your own solution here. YMMV 🤷‍♀️

_Originally posted by @jennybc in https://github.com/leeper/rio/pull/225#issuecomment-534315342_