Have looked around the internet for a proper answer but haven't found one.

How do I ignore props added to my component using the `&` operator in Typescript?

ie.
```
import { TextFieldProps } from "@material-ui/core/TextField";

type Props = {
   /** The ID of the element */
   id: string;
   /** @ignore */
} & TextFieldProps;
```

Does not work. All of the props from TextField Props are displayed, as opposed to solely the `id` prop
the npm run compile fails on windows 10. 
The single quote are not something that the cmd terminal accepts easily.
Since the single quotes are not necessary on linux or macos, we could get rid of them.


https://github.com/vue-styleguidist/vue-styleguidist/issues/689#issuecomment-574705479

In my collapsible section PR I believe I have made one more mistake.

Before, only the current section was getting the selected flag. Now, all its parent do to. This is a fix for it. (see attached comment)
**Current behavior**

<!-- A clear and concise description of what the bug is -->
The documentation for the release of v10.0.0 states that:

`Node 8.9 is the lowest supported version`

While attempting to update our project to v10 of React, my co-worker couldn't build the project but I could. His local machine is running Node 8.11.1. Mine is 8.12. 

After combing through RSG release notes, he found that the package `mini-html-webpack-plugin` was updated in v10 and [checked the release notes on that version](https://github.com/styleguidist/mini-html-webpack-plugin/releases/tag/v1.0.0), which state: 

`Node 8.12 is the minimum required version.`

This is especially an issue for our group because other internal processes required to build projects are below the 8.12 version of Node as well. 

**To reproduce**
Attempt to run Styleguidist in an environment with a Node version that less than 8.12. (I'm not certain how to provide an example for this, as it depends on a developer's local environment)
<!--
Post a link to a reproducible demo repository here.

  1. Fork the example project repository: https://github.com/styleguidist/example
     (please donâ€™t use the main, styleguidist/react-styleguidist, repository).
  2. Modify it to reproduce the issue.
  3. Push to GitHub and paste the link here.

Most likely youâ€™ll find an issue yourself, while creating a demo.

Make sure youâ€™re using the latest version of React Styleguidist.

ðŸ’€ Issues without a demo will be closed! ðŸ’€
-->

**Expected behavior**
Updates to Styleguidist documentation that provide clarity about the current minimum required version of Node. I had already done some custom styling and other additional work that now unfortunately must be cherrypicked out of my branch to implement, so some form of documentation with this clarity would be useful to other developers.
<!-- A clear and concise description of what you expected to happen -->

documentation update for #1508 
I am trying hard to get a working configuration with expo SDK36:

## Reproduction:

```
git clone https://github.com/kopax/expo-bug-reports.git
cd expo-bug-reports
git checkout react-styleguidist
npm i
npm run styleguide
```

As soon as I import thing, I get:

```jsx
./node_modules/react-native-gesture-handler/touchables/TouchableHighlight.js 10:22
Module parse failed: Unexpected token (10:22)
You may need an appropriate loader to handle this file type, currently no loaders are configured to process this file. See https://webpack.js.org/concepts#loaders
|  */
| export default class TouchableHighlight extends Component {
>   static defaultProps = {
|     ...GenericTouchable.defaultProps,
|     activeOpacity: 0.85,
 @ ./node_modules/react-native-gesture-handler/touchables/index.js 6:0-69 6:0-69
 @ ./node_modules/react-native-gesture-handler/index.js
```

or 

```
./node_modules/react-native/Libraries/ReactNative/UIManager.js 12:12
Module parse failed: Unexpected token (12:12)
You may need an appropriate loader to handle this file type, currently no loaders are configured to process this file. See https://webpack.js.org/concepts#loaders
| 'use strict';
| 
> import type {Spec} from './NativeUIManager';
```

My `webpack.config.js` look like this:

```javascript
const createExpoWebpackConfigAsync = require('@expo/webpack-config');
module.exports = async function (env, argv) {
  const config = await createExpoWebpackConfigAsync(env, argv);
  return config;
};
```


My `babel.config.js` look like this:

```javascript
module.exports = function (api) {
  api.cache(true);
  return {
    presets: ['babel-preset-expo'],
  };
};
```

Did anybody succeed to work with expo and react-styleguidist?

<!-- Consider opening a pull request instead: itâ€™s a more productive way to discuss new features -->

At present, we can show docs only for latest version of component library.

<!-- A clear and concise description of what the problem is. Ex. I'm always frustrated when [...] -->

Would be awesome if there is a way for user to browse to older version of component library.

<!-- A clear and concise description of what you want to happen. Add any considered drawbacks. -->



<!-- A clear and concise description of any alternative solutions or features youâ€™ve considered. -->


<!-- Add any other context or screenshots about the feature request here. -->

Example of implementation can be [emberjs api documentation](https://api.emberjs.com/ember/release) where you have a dropdown to select version. 

![image](https://user-images.githubusercontent.com/1515160/71777088-723cc400-2fc1-11ea-94fc-60a0dee5d9e6.png)


On top of my mind, an easy implementation can be code split the generated component library and use webpack to name chunks with version names. Only issue i can see with this is cache busting won't work.




I want to use `react-styleguidist` with `expo` for the web development of react-native components.

I am able to start the styleguide for simple components, but as soon as I test for example this component:

```jsx
import React from 'react';
import PropTypes from 'prop-types';
import { Platform, View } from 'react-native';
import { AppLoading, SplashScreen as ExpoSplashScreen } from 'expo';
import { Asset } from 'expo-asset';
import * as Font from 'expo-font';

/* eslint-disable global-require, no-underscore-dangle */
/**
 * This component is used before displaying the HomeView
 * It is in charge of handling splash image, then react splash screen, and displaying the home.
 * It can also handle assets loading while splash screen is displayed
 * @example
 * <SplashScreenCore
 *   splash={require('./splash.png')}
 *   fonts={{ roboto: require('./roboto.ttf') }}
 *   imageList={['./bg.png', './appstore.png', './googleplay.png']}
 * >
 *   <AppContainer />
 * </SplashScreen>
 */
class SplashScreenCore extends React.Component {
  constructor(props) {
    super(props);
    this.state = {
      isSplashReady: false,
      isAppReady: false,
    };
  }

  _removeWebLoading = () => {
    const { loadingContainerId } = this.props;
    const loadingContainer = document.getElementById(loadingContainerId);
    if (!loadingContainer) return;
    const eventList = ['webkitTransitionEnd', 'transitionend', 'otransitionend'];
    function clear() {
      document.body.removeChild(loadingContainer);
      eventList.forEach((event) => loadingContainer.removeEventListener(event, clear, false));
    }
    eventList.forEach((event) => loadingContainer.addEventListener(event, clear, false));
    loadingContainer.classList.add('out');
  };

  _cacheSplashResourcesAsync = async () => {
    const { splash } = this.props;
    return Asset.fromModule(splash).downloadAsync();
  };

  _cacheResourcesAsync = async () => {
    const { imageList, fonts } = this.props;
    ExpoSplashScreen.hide();
    try {
      if (fonts) {
        await Font.loadAsync(fonts);
      }
    } catch (e) {
      // we have found that Safari on iPhone 6 was failing even if fonts are loaded
    }
    const cacheImages = imageList.map((image) => Asset.fromModule(image).downloadAsync());
    await Promise.all(cacheImages);
    this.setState({ isAppReady: true }, () => {
      if (Platform.OS === 'web') {
        try {
          this._removeWebLoading();
        } catch (e) {
          // we have found that native build will log warning otherwise due to 'document' being undefined in removeWebLoading
        }
      }
    });
  };

  render() {
    const { splashScreen: SplashScreen, children } = this.props;
    const { isSplashReady, isAppReady } = this.state;
    if (!isSplashReady) {
      return (
        <AppLoading
          startAsync={this._cacheSplashResourcesAsync}
          onFinish={() => this.setState({ isSplashReady: true })}
          onError={process.env.NODE_ENV === 'production' ? undefined : console.warn /* eslint-disable-line no-console */}
          autoHideSplash={false}
        />
      );
    }
    return (
      <View style={{ flex: 1 }}>
        {!isAppReady ? ( // eslint-disable-line no-nested-ternary
          React.isValidElement(SplashScreen) ? React.cloneElement(SplashScreen, { onLoad: this._cacheResourcesAsync })
            : <SplashScreen onLoad={this._cacheResourcesAsync} />
        ) : children}
      </View>
    );
  }
}

SplashScreenCore.propTypes = {
  /** a splash screen instance for your app, used while pre caching the assets  */
  splashScreen: PropTypes.oneOfType([
    PropTypes.node,
    PropTypes.elementType,
  ]).isRequired,
  /** the path to a png splash screen, used while loading the splashScreen */
  splash: PropTypes.node.isRequired,
  /** a list of image that will be added to cache before displaying the main screen */
  imageList: PropTypes.array,
  /** a font object with the key as the font name, and the value the font that will loaded */
  fonts: PropTypes.object,
  /** a containerId in index.html, it will be removed after react splash screen is loaded */
  loadingContainerId: PropTypes.string,
  /** @ignore */
  children: PropTypes.node.isRequired,
};

SplashScreenCore.defaultProps = {
  fonts: null,
  imageList: [],
  loadingContainerId: 'loading-container',
};

export default SplashScreenCore;
```

I have the following error:


So far, I have the following when I run `npm run styleguide`:

```js
./node_modules/react-native-safe-area-view/index.js 124:28
Module parse failed: Unexpected token (124:28)
You may need an appropriate loader to handle this file type, currently no loaders are configured to process this file. See https://webpack.js.org/concepts#loaders
| 
| class SafeView extends Component {
>   static setStatusBarHeight = height => {
|     _customStatusBarHeight = height;
|   };
 @ ./node_modules/@react-navigation/native/dist/index.js 25:11-49
 @ ./node_modules/react-navigation/src/react-navigation.js
 @ ./src/core/AppCore.js
 @ ./node_modules/react-styleguidist/lib/loaders/styleguide-loader.js!./node_modules/react-styleguidist/lib/client/index.js
 @ ./node_modules/react-styleguidist/lib/client/index.js
 @ multi ./styleguide/setup.js ./node_modules/react-styleguidist/lib/client/index ./node_modules/react-dev-utils/webpackHotDevClient.js
```

I use expo and never had to configure `webpack` myself in the expo project project. What else do I need to add in the default `react-styleguidist` **webpack config** in order to run the styleguide with an expo web/native app?

Did anyone ever tried to use react-styleguidist with react-native-web context?
**Current behavior**

RSG v11's automatic Typescript support does not seem to play well with 3rd party components. 
In <v11, in combination with react-docgen-typescript, props and methods were correctly parsed after setting the propsparser property in the config. From > v11 react-docgen was upgraded so react-docgen-typescript was no longer required.

**To reproduce**

Clone https://github.com/dysticus/example . It contains 2 branches: notworking and working. Not working is with v11, working is with <v11 and react-docgen-typescript.

Start the styleguide. You'll see in the the non-functional version no props and no methods, in the working branch they do appear.

**Expected behavior**

Props and methods should be extracted for 3rd parties to, like in versions before v11.

Thanks!

