My project currently uses a wrapper type around globset's `GlobMatcher` in order to implement `Serialize` and `Deserialize`. The implementation [is pretty trivial](https://github.com/rojo-rbx/rojo/blob/c82bc8a3583a65279d7aa28cde4b53977cd78fc4/src/glob.rs#L38-L50)!

Does it make sense for the globset crate to implement `Serialize`/`Deserialize`? I'd like to have them on both the `Glob` and `GlobMatcher` types for myself, but it's possible other types make sense. This would probably want to be behind a feature flag.

If this sounds okay, I'll file a PR! I think this change is similar to the spirit of #1447, but that PR hasn't been reviewed yet as of time of this writing.
The `GlobMatcher` type holds onto the `Glob` object that was used to create it. This PR exposes a reference to it through a getter.

My main use is that I have a project that uses globset by wrapping the `GlobMatcher` type in a type that I can implement Serde's `Serialize` and `Deserialize` on. In order to get access to the original pattern, I [currently need to redundantly keep my own copy of the `Glob` struct](https://github.com/rojo-rbx/rojo/blob/c82bc8a3583a65279d7aa28cde4b53977cd78fc4/src/glob.rs) to get access to its string pattern.

This API would enable me to only need to keep around `GlobMatcher`.
#### What version of ripgrep are you using?

ripgrep 11.0.1
-SIMD -AVX (compiled)
+SIMD +AVX (runtime)

#### How did you install ripgrep?

yum install ripgrep

#### What operating system are you using ripgrep on?

RHEL 7.7

#### Describe your question, feature request, or bug.

I would like to use ripgrep in a way that I can tell it to ignore files on certain filesystems. ripgrep can ignore certain filenames and paths, and it can be told not to cross filesystem boundaries with "--one-file-system". Taking this one step further, I'd like to be able to say, for example, to ignore nfs filesystems. A similar feature can be found in updatedb (mlocate 0.26), which has a "--add-prunefs" option used to "Add entries in white-space-separated list FS to PRUNEFS". The daily cron job for updatedb, on my system, does this:
```
nodevs=$(awk '$1 == "nodev" && $2 != "rootfs" && $2 != "zfs" { print $2 }' < /proc/filesystems)
/usr/bin/updatedb -f "$nodevs"
```
This basically looks in the kernel's table of known filesystems and pulls out the ones marked "nodev", then tells updatedb to ignore files located on a filesystem that is one of those types. It would be awesome to have an option for ripgrep to tell it to do something like that. I very rarely want to search files under /proc or /run or so on. This would help with that. And this option would be especially useful to me to be able to avoid searching NFS mounts. Obviously sometimes you want to be able to search NFS mounts, but I have servers with NFS mounts that are terabytes in size and it's just user data, so I want ripgrep to ignore those and just search local filesystems.

I would like to see this implemented as an environment variable and a command line option.

To fix properly #946
The `globset::Glob` type [`new`] function creates a new value with an `&str` parameter which returns an `Result<Glob, Error>` object. This is exactly what [`std::str::FromStr::from_str`][`std::str::FromStr`] defines. Libraries like [`clap`] use [`std::str::FromStr`] to create objects from provided commandline arguments. This change makes this library usable without a newtype wrapper.

[`std::str::FromStr`]: 	https://doc.rust-lang.org/std/str/trait.FromStr.html
[`clap`]:		https://docs.rs/clap/2.33.0/clap/macro.value_t.html
[`new`]:		https://docs.rs/globset/0.4.4/globset/struct.Glob.html#method.new
Git looks for this file in GIT_COMMON_DIR, which is usually the same
as GIT_DIR (.git). However, when searching inside a linked worktree,
.git is usually a file that contains the path of the actual git dir,
which in turn contains a file "commondir" which references the directory
where info/exclude may reside, alongside other configuration shared across
all worktrees. This directory is usually the git dir of the main worktree.

Unlike git this does *not* read environment variables GIT_DIR and
GIT_COMMON_DIR, because it is not clear how to interpret them when
searching multiple repositories.

Fixes #1445
#### What version of ripgrep are you using?

ripgrep 11.0.2 (same in master I think)

#### How did you install ripgrep?

https://www.archlinux.org/packages/community/x86_64/ripgrep/

#### What operating system are you using ripgrep on?

Arch Linux

#### Describe your question, feature request, or bug.

If I exclude a file privately in `.git/info/exclude`, ripgrep ignores that file as expected - but only when searching inside the main worktree. In linked worktrees, the file is not ignored.

#### If this is a bug, what are the steps to reproduce the behavior?

```sh
#!/bin/sh
rm -rf repro repro-worktree

git init repro
cd repro
touch committed
git add committed
git commit -m 'initial commit'
echo ignored > .git/info/exclude
git worktree add ../repro-worktree
cd ../repro-worktree
touch ignored

echo
echo '$ rg --files'
rg --files
echo '$ git ls-files; git ls-files --exclude-standard --others'
git ls-files; git ls-files --exclude-standard --others
```

#### If this is a bug, what is the actual behavior?

```
$ rg --files
ignored
committed
```

#### If this is a bug, what is the expected behavior?

I think it should behave like `git ls-files; git ls-files --exclude-standard --others`:

```
$ rg --files
committed
```

#### What version of ripgrep are you using?

```
▶ rg --version                                                                                                                                                                    
ripgrep 11.0.1
-SIMD -AVX (compiled)
+SIMD +AVX (runtime)
```

#### How did you install ripgrep?

Compiled from source

#### What operating system are you using ripgrep on?

MacOS (Catalina)

#### Describe your question, feature request, or bug.

I think that passing a plain directory as argument to `-g` should match files in that directory. Moreover, prefixing a match string with `!` should negate the results. This seems to the behaviour most of the time.

#### If this is a bug, what are the steps to reproduce the behavior?

```
## from temp, empty directory
mkdir a b
echo hello > a/test.txt
cp a/test.txt b
rg -g a hello ## return nothing
rg -g '!b' hello ## returns match from file in 'a'
```

#### If this is a bug, what is the actual behavior?

Above script yields following (showing output of negated search only)
```
▶ sh /tmp/run.sh                                                                                                                                                                  
a/test.txt
1:hello
```

#### If this is a bug, what is the expected behavior?

Should have yielded results for either both or neither (preferably both) the invocations in the reproduction steps.

#### What version of ripgrep are you using?

11.0.2

#### What operating system are you using ripgrep on?

openSUSE Tumbleweed

#### Describe your question, feature request, or bug.

While working on reproducible builds for openSUSE, I found that
ripgrep man page content differs on different CPUs

```diff
--- /usr/share/man/man1/rg.1.gz
-11\&.0\&.2 \-SIMD \-AVX (compiled) +SIMD +AVX (runtime)
+11\&.0\&.2 \-SIMD \-AVX (compiled) \-SIMD \-AVX (runtime)
```

The strings come from `ripgrep-11.0.2/src/app.rs  fn runtime_cpu_features()`

#### If this is a bug, what are the steps to reproduce the behavior?

use my "rbk" script from the reproducibleopensuse repo (needs some setup and an openSUSE account) or do a distribution/release build on different CPUs (e.g. I use `kvm -cpu qemu64` and `-cpu host` )

#### If this is a bug, what is the actual behavior?

The man page differs depending on build machine CPU.

#### If this is a bug, what is the expected behavior?

The man page should be the same on every build (everytime, everywhere)

See https://reproducible-builds.org/ for why this matters.
Using ripgrep 11.0.2 I ran into a hang using ripgrep from GNU Emacs via helm-rg on Windows. Window creates a stdin and ripgrep detects that stdin exists and waits for data, making it look like ripgrep is hung. I was able to easily work around the issue once I saw that I could explicitly specify the directory to search. Having this in the doc may save others confusion. Also having the note about .gitignore's are only respected if .git exists.

The man page intro currently contains:

       ripgrep (rg) recursively searches your current directory for a regex pattern. By default,
       ripgrep will respect your .gitignore and automatically skip hidden files/directories and
       binary files.

Could it be updated to:

       ripgrep (rg) recursively searches your current directory for a regex pattern. By default,
       ripgrep will respect your .gitignore files when a .git directory exists and automatically skip
       hidden files/directories and binary files.

       ripgrep will automatically detect if stdin exists and search stdin for a regex pattern, e.g.
       "ls | rg foo". In some environments, stdin may exist when it shouldn't. To turn off stdin
       detection explicitly specify the directory to search, e.g. "rg foo ./".

It would also be nice to mention why you need a .git directory to have .gitignores but that may be lost in time?

Thanks