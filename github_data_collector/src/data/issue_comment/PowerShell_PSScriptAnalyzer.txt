## PR Summary

Fixes https://github.com/PowerShell/PSScriptAnalyzer/issues/1217.

When PowerShell throws an error due to not being able to resolve an attribute type, we sift through the AST to determine whether `SupportsShouldProcess` has been set on a function.

Also cleans up some of the logic so it's not all nested `as`s.

## PR Checklist

- [x] [PR has a meaningful title](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)
    - Use the present tense and imperative mood when describing your changes
- [x] [Summarized changes](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)
- [x] [Change is not breaking](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#making-breaking-changes)
- [x] [Make sure all `.cs`, `.ps1` and `.psm1` files have the correct copyright header](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)
- [x] Make sure you've added a new test if existing tests do not effectively test the code changed and/or updated documentation
- [x] This PR is ready to merge and is not [Work in Progress](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---work-in-progress).
    - If the PR is work in progress, please add the prefix `WIP:` to the beginning of the title and remove the prefix when the PR is ready.
## PR Summary

Fixes https://github.com/PowerShell/PSScriptAnalyzer/issues/1384.

UseCompatibleSyntax used to erroneously advise that dynamic member expressions don't work in PS 3. Now it does not.

## PR Checklist

- [x] [PR has a meaningful title](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)
    - Use the present tense and imperative mood when describing your changes
- [x] [Summarized changes](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)
- [x] [Change is not breaking](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#making-breaking-changes)
- [x] [Make sure all `.cs`, `.ps1` and `.psm1` files have the correct copyright header](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)
- [x] Make sure you've added a new test if existing tests do not effectively test the code changed and/or updated documentation
- [x] This PR is ready to merge and is not [Work in Progress](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---work-in-progress).
    - If the PR is work in progress, please add the prefix `WIP:` to the beginning of the title and remove the prefix when the PR is ready.

## PR Summary

Fixes #1369
Unfortunately this issue could only be reproduced when PSSA is hosted within PSES where the root of the workspace becomes the working directory of the runspace pool, which causes `Get-Command ..\PathToScript.ps1` to return a command type of ExternalScript, which then makes it into the command cache and causes the false positve.
The fix is to search only for cmdlets/functions where the implicit `Get-` aliasing applies.

## PR Checklist

- [x] [PR has a meaningful title](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)
    - Use the present tense and imperative mood when describing your changes
- [x] [Summarized changes](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)
- [x] [Change is not breaking](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#making-breaking-changes)
- [x] [Make sure all `.cs`, `.ps1` and `.psm1` files have the correct copyright header](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)
- [ ] Make sure you've added a new test if existing tests do not effectively test the code changed and/or updated documentation
- [x] This PR is ready to merge and is not [Work in Progress](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---work-in-progress).
    - If the PR is work in progress, please add the prefix `WIP:` to the beginning of the title and remove the prefix when the PR is ready.
The [UseLiteralInitializerForHashtable](https://github.com/PowerShell/PSScriptAnalyzer/blob/development/RuleDocumentation/UseLiteralInitializerForHashtable.md) should prevent programmers to inconsiderately build hash tables with a default comparison other then the default case sensitive PowerShell behavior. It should not prevent a programmer from building a case sensitive hash table at all.  
Hash tables are often used to handle program data but they might also be used to store custom input data (whether or not case sensitive) and the desired output might highly depend on the customer's used-case.

In other words, it is good that I get a warning on 
```PowerShell
$hashtable = [hashtable]::new()
```
and:
```PowerShell
$hashtable = New-Object -TypeName hashtable
```

But if I well-considerate explicitly set the comparison mode, like:
```PowerShell
$hashtable = [HashTable]::New(0, [StringComparer]::Ordinal)
```
I expect the warning to be suppressed.

see also: [How to create a case sensitive Hashtable without generating a PSScriptAnalyzer warning?](https://stackoverflow.com/questions/59358064/how-to-create-a-case-sensitive-hashtable-without-generating-a-psscriptanalyzer-w)

Steps to reproduce
------------------

```PowerShell
Invoke-ScriptAnalyzer -ScriptDefinition '[HashTable]::New(0, [StringComparer]::Ordinal)'
```

Expected behavior
-----------------

No warnings

Actual behavior
---------------

```none
Use literal initializer, @{{}}, for creating a hashtable as  they are case-insensitive by default
```

Environment data
----------------

PSScriptAnalyzer version: **1.18.3**
Tested both Windows PowerShell (**5.1**) and PowerShell Core (**6.2.3**)
I use this script with Powershell v3 ( Citrix farm with W 2008)
```Powershell
$h=@{}
$h.Test='Ok'
$controlName='Test'

writeLog "$($psversiontable|out-string)"
writeLog "Test compatibility"

if ($h.$controlName -eq 'ok')
{ writeLog "Test= $($h.$controlName )"}
else
{ writeLog "dont works"}

$a = 10,20,30
$property = "Length"
writeLog "Array =$($a.$property)"

$typeExpression=[int]
$staticMember='MaxValue'
writeLog "Static=$($typeExpression::$staticMember)"

$method = 'Trim'
$sb= { writeLog "Method =$($Method.$method())" } #Avoid ParseError
&$sb
```
I run PSSA  version 1.8.3 with this settings :
```Powershell
@{
    ExcludeRules = @('PSAvoidGlobalVars','PSAvoidUsingWMICmdlet')

     # Check if the scripts uses cmdlets that are compatible PS 3.0,
    Rules = @{
        PSUseCompatibleSyntax = @{
            # This turns the rule on (setting it to false will turn it off)
            Enable = $true
    
            # List the targeted versions of PowerShell here
            TargetVersions = @(
                '3.0'
            )
        }

        PSUseCompatibleCommands = @{
            # Turns the rule on
            Enable = $true
    
            # Lists the PowerShell platforms we want to check compatibility with
            TargetProfiles = @(
                #PowerShell Version 3.0 Operating System Windows Server 2012
                'win-8_x64_6.2.9200.0_3.0_x64_4.0.30319.42000_framework'
            )
        }
    }
}
```
When I run PSSA under PS 5.v0 I get this result :
```Powershell
Invoke-ScriptAnalyzer -path  .\pssa.ps1 -Settings .\ScriptAnalyzerSettings.psd1

# RuleName                            Severity     ScriptName Line  Message
# --------                            --------     ---------- ----  -------
# PSUseCompatibleSyntax               Warning      pssa.ps1   6     The dynamic member invocation syntax
#                                                                   '$h.$controlName' is not available by default in
#                                                                   PowerShell versions 3
# PSUseCompatibleSyntax               Warning      pssa.ps1   7     The dynamic member invocation syntax
#                                                                   '$h.$controlName' is not available by default in
#                                                                   PowerShell versions 3
# PSUseCompatibleSyntax               Warning      pssa.ps1   13    The dynamic member invocation syntax '$a.$property'
#                                                                   is not available by default in PowerShell versions 3
# PSUseCompatibleSyntax               Warning      pssa.ps1   16    The dynamic member invocation syntax
#                                                                   '$typeExpression::$staticMember' is not available by
#                                                                   default in PowerShell versions 3
# PSUseCompatibleSyntax               Warning      pssa.ps1   19    The dynamic member invocation syntax '$x.$member' is
#                                                                   not available by default in PowerShell versions 3
# PSUseCompatibleSyntax               Warning      pssa.ps1   22    The dynamic method invocation syntax
#                                                                   '$Method.$method()' is not available by default in
#                                                                   PowerShell versions 3
# PSUseCompatibleSyntax               Warning      pssa.ps1   26    The dynamic member invocation syntax
#                                                                   '[EnvironmentVariableTarget]::$enumVal' is not
#                                                                   available by default in PowerShell versions 3
```
But when I read my logs, the rule message 'The dynamic member invocation syntax' seems incorrect  and do not match the specifications in the 'Windows PowerShell Language Specification Version 3.0' file, chapter _7.1.2 Member access_ :
```
Name                           Value                                                                                               
----                           -----                                                                                               
PSVersion                      3.0                                                                                                 
WSManStackVersion              3.0                                                                                                 
SerializationVersion           1.1.0.1                                                                                             
CLRVersion                     4.0.30319.42000                                                                                     
BuildVersion                   6.2.9200.22198                                                                                      
PSCompatibleVersions           {1.0, 2.0, 3.0}                                                                                     
PSRemotingProtocolVersion      2.2                                                                                                 


Test compatibility
Test= Ok
 Array =3
Static=2147483647
Error:
```
The following Error (see $Method.$method() ), is saved by Export-CliXml:
```Powershell
$e=import-clixml "\\Server\Path\file.ps1xml"
$e
# invoke member w/ expression name
# Au caractère \\\\Server\Path\file.ps1:99 : 1
# + &$sb
# + ~~~~
#     + CategoryInfo          : OperationStopped: (:) [], NotImplementedException
#     + FullyQualifiedErrorId : System.NotImplementedException

$e.Exception|select *

# Message        : invoke member w/ expression name
# Data           : {System.Management.Automation.Interpreter.InterpretedFrameInfo}
# InnerException :
# TargetSite     : System.Object
#                  VisitInvokeMemberExpression(System.Management.Automation.Language.InvokeMemberExpressionAst)
# StackTrace     :    à
#                  System.Management.Automation.Language.Compiler.VisitInvokeMemberExpression(InvokeMemberExpressionAst
#                  invokeMemberExpressionAst)
#                     à System.Management.Automation.Language.Compiler.VisitCommandExpression(CommandExpressionAst
#                  commandExpressionAst)
#                     à System.Management.Automation.Language.Compiler.VisitPipeline(PipelineAst pipelineAst)
#                     à System.Management.Automation.Language.Compiler.CompileTrappableExpression(List`1 exprList,
#                  StatementAst stmt)
#                     à
#                  System.Management.Automation.Language.Compiler.CompileStatementListWithTraps(ReadOnlyCollection`1
#                  statements, ReadOnlyCollection`1 traps, List`1 exprs, List`1 temps)
#                     à System.Management.Automation.Language.Compiler.VisitStatementBlock(StatementBlockAst
#                  statementBlockAst)
#                     à System.Management.Automation.Language.Compiler.CaptureAstResults(Ast ast, CaptureAstContext
#                  context, MergeRedirectExprs generateRedirectExprs)
#                     à System.Management.Automation.Language.Compiler.<>c__DisplayClass5e.<VisitExpandableStringExpressi
#                  on>b__5d(ExpressionAst e)
#                     à System.Linq.Enumerable.WhereSelectEnumerableIterator`2.MoveNext()
#                     à System.Collections.Generic.List`1..ctor(IEnumerable`1 collection)
#                     à System.Dynamic.Utils.CollectionExtensions.ToReadOnly[T](IEnumerable`1 enumerable)
#                     à System.Linq.Expressions.Expression.NewArrayInit(Type type, IEnumerable`1 initializers)
#                     à System.Management.Automation.Language.Compiler.VisitExpandableStringExpression(ExpandableStringEx
#                  pressionAst expandableStringExpressionAst)
#                     à System.Management.Automation.Language.Compiler.GetCommandArgumentExpression(CommandElementAst
#                  element)
#                     à System.Management.Automation.Language.Compiler.VisitCommand(CommandAst commandAst)
#                     à System.Management.Automation.Language.Compiler.VisitPipeline(PipelineAst pipelineAst)
#                     à System.Management.Automation.Language.Compiler.CompileTrappableExpression(List`1 exprList,
#                  StatementAst stmt)
#                     à
#                  System.Management.Automation.Language.Compiler.CompileStatementListWithTraps(ReadOnlyCollection`1
#                  statements, ReadOnlyCollection`1 traps, List`1 exprs, List`1 temps)
#                     à System.Management.Automation.Language.Compiler.CompileSingleLambda(ReadOnlyCollection`1
#                  statements, ReadOnlyCollection`1 traps, String funcName, IScriptExtent entryExtent, IScriptExtent
#                  exitExtent)
#                     à System.Management.Automation.Language.Compiler.CompileNamedBlock(NamedBlockAst namedBlockAst,
#                  String funcName)
#                     à System.Management.Automation.Language.Compiler.VisitScriptBlock(ScriptBlockAst scriptBlockAst)
#                     à System.Management.Automation.Language.Compiler.Compile(CompiledScriptBlockData scriptBlock,
#                  Boolean optimize)
#                     à System.Management.Automation.CompiledScriptBlockData.CompileUnoptimized()
#                     à System.Management.Automation.CompiledScriptBlockData.Compile(Boolean optimized)
#                     à System.Management.Automation.DlrScriptCommandProcessor.Init()
#                     à System.Management.Automation.CommandDiscovery.CreateCommandProcessorForScript(ScriptBlock
#                  scriptblock, ExecutionContext context, Boolean useNewScope, SessionStateInternal sessionState)
#                     à System.Management.Automation.PipelineOps.AddCommand(PipelineProcessor pipe,
#                  CommandParameterInternal[] commandElements, CommandBaseAst commandBaseAst, CommandRedirection[]
#                  redirections, ExecutionContext context)
#                     à System.Management.Automation.PipelineOps.InvokePipeline(Object input, Boolean ignoreInput,
#                  CommandParameterInternal[][] pipeElements, CommandBaseAst[] pipeElementAsts, CommandRedirection[][]
#                  commandRedirections, FunctionContext funcContext)
#                     à System.Management.Automation.Interpreter.ActionCallInstruction`6.Run(InterpretedFrame frame)
#                     à System.Management.Automation.Interpreter.EnterTryCatchFinallyInstruction.Run(InterpretedFrame
#                  frame)
# HelpLink       :
# Source         : System.Management.Automation
# HResult        : -2147467263
```
Moreover the rule should be of severity 'Error' when I try to know if my code is compatible with Powershell v3, unless I did not understand the use and the behavior of this rule.

Why indicate that some syntax is problematic when it is not?
Steps to reproduce
------------------

Input script, formatted already as expected.

```PowerShell
Function a {
    Function b {
        Get-Content blah | ? {
            $_ -match foo    
        } | Set-Content bleh

        $AnotherStatement = 1
    }

    Write-Host "hi"
    b
    exit 1
}

a

```

Expected behavior
-----------------

The example above after formatted looks the same.

Actual behavior
---------------

After a chain of more than 2 commands which spans several lines, the formatter loses one level of indentation. Using `$(...)` triggers the same problem.

```powershell
Function a {
    Function b {
        Get-Content blah | ? {
            $_ -match foo
        } | Set-Content bleh

    $AnotherStatement = 1
}

Write-Host "hi"
b
exit 1
}

a
```

Environment data
----------------

<!-- Provide the output of the following 2 commands -->

```PowerShell
> $PSVersionTable
Name                           Value
----                           -----
PSVersion                      5.1.15063.1805
PSEdition                      Desktop
PSCompatibleVersions           {1.0, 2.0, 3.0, 4.0...}
BuildVersion                   10.0.15063.1805
CLRVersion                     4.0.30319.42000
WSManStackVersion              3.0
PSRemotingProtocolVersion      2.3
SerializationVersion           1.1.0.1

> (Get-Module -ListAvailable PSScriptAnalyzer).Version | ForEach-Object { $_.ToString() }
1.18.3
```

# Problem to be solved

PowerShell (theoretically) supports parameters whose name can consist only from numbers. For example, this is a valid declaration:

```powershell
function p1([switch]$1) {if ($1) {'Yes'} else {'No'}}
```

However, it is very hard to call properly this script. This one will not work:
```none
PS /home/iiric> p1
No
PS /home/iiric> p1 -1
No
```
This is because parser will think -1 is a negative number rather than a parameter name in this instance.

Proper (=hard) way would be to use splatting.
```powershell
$params = @{ '1' = $true }
PS> p1 @params
Yes
```

Generally, this is not the only example of such unusable parameters. See [response ](https://github.com/PowerShell/PowerShell/issues/11120#issuecomment-555644898) by @vexx32 in [PowerShell repo issue](https://github.com/PowerShell/PowerShell/issues/11120).

# Summary of the new feature

Create a PSSA rule that warns when such parameters are created, so users are aware ahead of time that they're making parameters that they won't be able to refer to.



Hi,

I run this command in powershell and encounter this error. Possible to advice me on the error?

Invoke-ScriptAnalyzer -Path "D:\ABC\Folder1\SubFolder\Device6969.ps1" -fix

Error
Invoke-ScriptAnalyzer : Cannot determine line endings as the text probably contain mixed line endings.
Parameter name: text
At line:1 char:1
+ Invoke-ScriptAnalyzer -Path "D:\ABC\Folder1\SubFolder\Device6969.ps1 ...
+ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    + CategoryInfo          : NotSpecified: (:) [Invoke-ScriptAnalyzer], ArgumentException
    + FullyQualifiedErrorId : System.ArgumentException,Microsoft.Windows.PowerShell.ScriptAnalyzer.Commands.InvokeScriptAnalyzerCommand
 
Steps to reproduce
------------------
![image](https://user-images.githubusercontent.com/6960531/68667738-65ff3200-054f-11ea-9e9f-69f2e5bb9cdb.png)
Create file/folder structure as how in the image:
1. create "test" folder.
2. create "Target.ps1" in it (can be empty).
3. create file in 2 sub folders ".\sub\sub2\test.ps1" with `& ..\..\Target.ps1`
4. open "test" folder in VSCode (if it already open then F1 > "Reload Window" 

get false positive:
```
{
	"resource": "/c:/temp/sub/sub2/test.ps1",
	"owner": "_generated_diagnostic_collection_name_#3",
	"code": "PSAvoidUsingCmdletAliases",
	"severity": 4,
	"message": "'..\\..\\Target.ps1' is implicitly aliasing 'Get-..\\..\\Target.ps1' because it is missing the 'Get-' prefix. This can introduce possible problems and make scripts hard to maintain. Please consider changing command to its full name.",
	"source": "PSScriptAnalyzer",
	"startLineNumber": 1,
	"startColumn": 3,
	"endLineNumber": 1,
	"endColumn": 19
}
```

Environment data
----------------

<!-- Provide the output of the following 2 commands -->

```PowerShell
PS C:\temp> $PSVersionTable

Name                           Value
----                           -----
PSVersion                      7.0.0-preview.5
PSEdition                      Core
GitCommitId                    7.0.0-preview.5
OS                             Microsoft Windows 10.0.18362
Platform                       Win32NT
PSCompatibleVersions           {1.0, 2.0, 3.0, 4.0…}       
PSRemotingProtocolVersion      2.3
SerializationVersion           1.1.0.1
WSManStackVersion              3.0

PS C:\temp> (Get-Module -ListAvailable PSScriptAnalyzer).Version | ForEach-Object { $_.ToString() }
1.18.3
1.18.1      
1.18.0      

```

Currently you can create functions / cmdlets with parameters with ValueFromPipeline or ValueFromPipelineByPropertyName, but if you forget the process { } block, only the last pipeline object will be processed by the cmdlet, instead of all of them, resulting in unexpected behavior that can slip through the cracks unnoticed until you pipe a batch of objects to the commandlet and realize that it only processed one of them. PSScriptAnalyzer should default to warning developers to use the process { } block when they use ValueFromPipeline or ValueFromPipelineByPropertyName attributes in a function / cmdlet.

``` PowerShell
Function Broken
{
	[CmdletBinding()]
	Param(
		[Parameter(ValueFromPipeline)]
		[int]
		$ToPrint
	)
	$ToPrint
}

Function Correct
{
	[CmdletBinding()]
	Param(
		[Parameter(ValueFromPipeline)]
		[int]
		$ToPrint
	)
	process
	{
		$ToPrint	
	}
}

1..10 | Broken
# only 10 was output. PSScriptAnalyzer ought to be catching this

1..10 | Correct
# 1 - 10 were each output, as you would expect
```