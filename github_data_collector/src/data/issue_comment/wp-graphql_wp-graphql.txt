Adding docs for a new plugin

https://github.com/moonmeister/wp-graphql-seopress

On master User.databaseId doesn't exist but on release/next it does and querying for it causes this error `Cannot return null for non-nullable field User.databaseId.`

```graphql
query {
  viewer {
    databaseId
  }
}

```
Using WP-GQL v0.5.1, this query gives an error:

```
query MyQuery {
  posts(where: {categoryName: "us", orderby: {field: AUTHOR}}) {
    nodes {
      title
    }
  }
}
```

Error is `Notice: Undefined index: order in /www/wp-content/plugins/wp-graphql/src/Data/Connection/PostObjectConnectionResolver.php on line 270`

The `field: AUTHOR` seems to be the source of the error. Any valid setting of that gives the same error.

This query will work though:
```
query MyQuery {
  posts(where: {categoryName: "us", orderby: {field: AUTHOR, order: ASC}}) {
    nodes {
      title
    }
  }
}
```



What does this implement/fix? Explain your changes.
---------------------------------------------------

This changes the fields `terms`, `termNames` and `termSlugs` to only be added to the PostObject Types that have registered taxonomy connections, and doesn't define the fields at the Interface level as not all Types will have them.


Does this close any currently open issues?
------------------------------------------
closes #1116 

What does this implement/fix? Explain your changes.
---------------------------------------------------
Fix UniformResourceIdentifiable Interface to define field types the same as how they're implemented elsewhere


Does this close any currently open issues?
------------------------------------------
closes #1115 

```
Interface field ContentNode.termNames expected but Page does not provide it.
Interface field ContentNode.termSlugs expected but Page does not provide it.
Interface field ContentNode.terms expected but Page does not provide it.
Interface field ContentNode.termNames expected but MediaItem does not provide it.
Interface field ContentNode.termSlugs expected but MediaItem does not provide it.
Interface field ContentNode.terms expected but MediaItem does not provide it.
```
While I'm pulling the whole schema I'm getting these errors
```
Interface field UniformResourceIdentifiable.databaseId expects type String! but Category.databaseId is type Int.
Interface field UniformResourceIdentifiable.id expects type String! but Category.id is type ID!.
Interface field UniformResourceIdentifiable.uri expects type String! but Category.uri is type String.
Interface field UniformResourceIdentifiable.databaseId expects type String! but Post.databaseId is type Int!.
Interface field UniformResourceIdentifiable.id expects type String! but Post.id is type ID!.
Interface field UniformResourceIdentifiable.uri expects type String! but Post.uri is type String.
Interface field UniformResourceIdentifiable.databaseId expects type String! but Page.databaseId is type Int!.
Interface field UniformResourceIdentifiable.id expects type String! but Page.id is type ID!.
Interface field UniformResourceIdentifiable.uri expects type String! but Page.uri is type String.
Interface field UniformResourceIdentifiable.databaseId expects type String! but MediaItem.databaseId is type Int!.
Interface field UniformResourceIdentifiable.id expects type String! but MediaItem.id is type ID!.
Interface field UniformResourceIdentifiable.uri expects type String! but MediaItem.uri is type String.
Interface field UniformResourceIdentifiable.databaseId expects type String! but PostFormat.databaseId is type Int.
Interface field UniformResourceIdentifiable.id expects type String! but PostFormat.id is type ID!.
Interface field UniformResourceIdentifiable.uri expects type String! but PostFormat.uri is type String.
Interface field UniformResourceIdentifiable.databaseId expects type String! but Tag.databaseId is type Int.
Interface field UniformResourceIdentifiable.id expects type String! but Tag.id is type ID!.
Interface field UniformResourceIdentifiable.uri expects type String! but Tag.uri is type String.
```
In 0.5.1 I can view the admin user publicly from a non-authed request. If I switch to the 0.6.0 branch that user is now private and I get
```
Internal server error
Cannot return null for non-nullable field User.databaseId.
```
# Release Notes

## Summary

This release focused primarily on adding Interfaces for Post and Term objects.

Interfaces in GraphQL allow for common fields to be registered and shared across Types. Similar to Unions, they allow for multiple types to be queried from the same field. 

By having Post Objects (posts, pages, etc) and Terms (Tags, Categories, etc) implement common interfaces, various Types can be queried for from the same entry point. So, instead of having to query _only_ Posts or _only_ Pages, interfaces make it possible to query for Post Objects of any type and have predictable results. 

See below for examples of such queries.

## Breaking Changes

- updated formatting of URI resolvers across types to be consistent. May be a breaking change depending on your current use of `uri` fields when querying nodes
- placed many fields of PostObject mutations behind conditionals to only allow inputs on Post Types that support said fields. For example, a Post Type that doesn't support author won't have an `author` input on its mutation anymore. Or a non-hierarchical Post Type doesn't have a `parent` input field by default in its mutation anymore. Might be a breaking change depending on your use of mutations and fields that a Post Type doesn't support
- fixed a bug with settings with dashes not properly being mapped to the schema. This fix in behavior could cause a breaking change depending on what types of settings you had registered and were querying from the schema.
- Made many fields of Post Object types (Post, Page, etc) part of Interfaces instead of the PostObject type itself, and the Types now implement the interfaces if the Post Type supports said feature. This might cause breaking changes if you were querying for fields on a Post Object Type that the Post Type doesn't actually support. For example, if you registered a post type without support for `author`, you could have queried for the `author` on that node, and got null. Now the author field will not exist on that Type and your query would not work. 
- remove `__get` methods from WPObjectType, WPUnionType, etc in favor of making the type_registry a public property (@kidunot89 this will affect WPGraphQL for WooCommerce)
- Deprecate Types.php static methods
- changed `parent` field to `revisionOf` field for Types that support revisions. If the node is a revision, the `revisionOf` field will return the node that it is a revision of. This is applied only to post types that support revisions via the `NodeWithRevisions` Interface
- added `abstract public function is_valid_offset( $offset );` to AbstractConnectionResolver. If you extend the AbstractConnectionResolver in your code, you will need to have your extending class implement this method. It is used for pagination to respect the Relay spec.

## New Features
- add support for the `post format` taxonomy - thanks @aberkow!
- update testing matrix for Travis CI to cover PHP 7.1 - 7.4
- misc updates to documentation - Thanks @aberkow, @jacobarriola, @craigfay 
- better support for respecting the Relay spec for pagination. (#1111) Thanks @let00!
- RootQuery.contentNodes connection added, allowing for lists of Posts of any Post Type to be queried from a single Root entry point
- All Post Object Types (Post, Page, etc) implement the ContentNode interface
- Most fields defined in PostObjects.php have been moved into interfaces to be defined
- Add new `RootQuery.terms` connection to query terms of any Taxonomy type from the root of the graph
- Add new NodeResolver class that resolves any node (Post, Term, User) from a URI. This allows for users to pass a URI (path of the resource) to fetch nodes by
- Update UserMutation.php to use string definition of types, instead of the Types static definitions
- added `pageTemplate` field to the Post model layer
- added uri field to the User model
- Added the following Interfaces: 
  - ContentNode
  - ContentTemplate
  - HierarchicalContentNode
  - NodeWithAuthor
  - NodeWithComments
  - NodeWithContentEditor
  - NodeWithExcerpt
  - NodeWithFeaturedImage
  - NodeWithRevisions
  - NodeWithTitle
  - NodeWithTrackbacks
  - TermNode
  - UniformResourceIdentifiable
- Added the following Enums
  - ContentNodeIdTypeEnum
  - TermNodeIdTypeEnum
  - UserNodeIdTypeEnum
- added ContentTemplateUnion, allowing for templates to be queried for on Post objects
- added description to various fields missing descriptions
- deprecated the $postType.by fields. They will still work, but they won't show in Schema docs and may be removed from the codebase in the future. This means that you can no longer query like so: `postBy( slug: "slug" ) { ...postFields }`, but are encouraged to query by the single entry point with the newly added `idType` input instead, like so: `post( id: "slug" idType: SLUG ) { ...postFields }` 
- added  RootQuery.contentNode field for querying an individual content node from the root of the graph
- added RootQuery.nodeByUri field for querying any node by it's resource path. 
- added RootQuery.termNode field for querying any type of term node from the root of the graph
- updated single resource entry points by adding `idType` inputs. Now single resources can be queried for using various types of unique identifiers such as database id, slug, name, uri. The type of ID available depends on the type of node. 


## Bugfixes
- Fixed a bug causing use of the `graphql()` function in PHP to break the admin bar
- throw an exception if WPGraphQL is being used on a server with a PHP version below what WPGraphQL supports (#1099)

## Issues Closed

- #405, #263, #278, #1086, #1066, #899, #1088, #944, #1101, #1100, #1096, #1083, #1063, #1059 

# Examples of new functionality

## Posts
We're deprecating the `$postType.'By'` entry points, and have added a new `idType` field and enum for single entry points. 

This means queries such as the following will still work, but will not show in the Schema documentation, and may be formally removed from the codebase at a later date:

### Deprecated Queries

```
{
  postBy( slug: "some-slug" ) {
    id
    title
  }
}
```
```
{
  pageBy( uri: "some-uri" ) {
    id
    title
  }
}
```

These are deprecated in favor of existing single entry points for each post type, and the newly added `idType` field on those entry points.

### New Singular Post Object Queries

With the added `idType` field on the singular post object entry points, below is a series of example queries now made possible:

#### Query Single Post By Database ID

```
{
  post(id: 1739, idType: DATABASE_ID) {
    id
    title
    uri
    slug
    postId
  }
}
```

![Screen Shot 2019-12-31 at 3 34 28 PM](https://user-images.githubusercontent.com/1260765/71635570-15b55f80-2be3-11ea-8931-6e5c608cfba6.png)


#### Query Single Post by URI

```
{
  post(id: "/test-5/", idType: URI) {
    id
    title
    uri
    slug
    postId
  }
}
```

![Screen Shot 2019-12-31 at 3 35 31 PM](https://user-images.githubusercontent.com/1260765/71635600-34b3f180-2be3-11ea-80f9-c3a5f4707f41.png)


#### Query Single Post by Global Hashed ID

```
{
  post(id: "cG9zdDoxNzM5", idType: ID) {
    id
    title
    uri
    slug
    postId
  }
}
```
![Screen Shot 2019-12-31 at 3 34 06 PM](https://user-images.githubusercontent.com/1260765/71635636-70e75200-2be3-11ea-8b8d-26484b9dd8a8.png)


or without specifying `idType` as the default is the hashed ID

```
{
  post(id: "cG9zdDoxNzM5") {
    id
    title
    uri
    slug
  }
}
```

![Screen Shot 2019-12-31 at 3 33 53 PM](https://user-images.githubusercontent.com/1260765/71635630-6af17100-2be3-11ea-93a1-dbf3c3120348.png)


#### Query Post (non-hierarchical post type) by Slug

```
{
  post(id: "test-5", idType: SLUG) {
    id
    title
    uri
    slug
  }
}
```

![Screen Shot 2019-12-31 at 3 36 46 PM](https://user-images.githubusercontent.com/1260765/71635625-62009f80-2be3-11ea-8b01-ae2b9595b7d3.png)

### ContentNodeInterface
This release also introduces the `ContentNode` Interface that is implemented by all Post Object types (posts, pages, custom post types). 

This Interface allows for new types of queries to be executed that span many post types. 

#### Content Nodes Connection
Here's an example of a new query: 

```
{
  contentNodes {
    nodes {
      __typename
      id
      title
      link
      uri
      isRevision
      ... on Page {
        isFrontPage
      }
    }
  }
}
```

![Screen Shot 2019-12-31 at 3 49 33 PM](https://user-images.githubusercontent.com/1260765/71635842-66c65300-2be5-11ea-8ec0-9280ad24a1ee.png)

In the results above, we can see that a mix of Posts and Pages have been returned.

We can also pass arguments to do things like search across multiple post types: 

```
{
  contentNodes(where: {search: "test"}) {
    nodes {
      __typename
      id
      title
      link
      uri
      isRevision
      ... on Page {
        isFrontPage
      }
    }
  }
}
```

![Screen Shot 2019-12-31 at 3 53 04 PM](https://user-images.githubusercontent.com/1260765/71635870-bb69ce00-2be5-11ea-83a1-cfdb72022e59.png)

#### ContentNode single entry point

We can now also fetch single Content (post) nodes like so: 

```
{
  contentNode(id: "cG9zdDoxNzM5") {
    __typename
    id
    title
    link
    uri
    isRevision
    ... on Page {
      isFrontPage
    }
  }
}
```

![Screen Shot 2019-12-31 at 3 59 15 PM](https://user-images.githubusercontent.com/1260765/71635946-c5400100-2be6-11ea-9f01-48dbb18bb321.png)

But, we can fetch single nodes of any Post type by other unique identifiers as well, such as the URI: 

```
{
  contentNode(id: "/2019/12/05/test-5/", idType: URI) {
    __typename
    id
    title
    link
    uri
    isRevision
    ... on Page {
      isFrontPage
    }
  }
}
```
![Screen Shot 2019-12-31 at 4 02 25 PM](https://user-images.githubusercontent.com/1260765/71635963-03d5bb80-2be7-11ea-945b-3afb3e1a772d.png)


or

```
{
  contentNode(id: "/test/", idType: URI) {
    __typename
    id
    title
    link
    uri
    isRevision
    ... on Page {
      isFrontPage
    }
  }
}
```

![Screen Shot 2019-12-31 at 4 02 38 PM](https://user-images.githubusercontent.com/1260765/71635967-09cb9c80-2be7-11ea-8614-a7a312ee8207.png)

This is a SUPER powerful feature as it allows for fragments to be more easily shared and re-used across queries and components.

## Terms 

Prior to this release, there wasn't really great ways of fetching singular term objects. You could do a query for a connection of terms and limit it to the `first: 1`, and in some cases that worked fine, but it wasn't always ideal. 

This release adds better support for fetching individual Term Nodes. 



### Example Term Node Queries

Instead of only fetching by the hashed global ID, we can now fetch by other unique identifiers using the `idType` field.

#### Query Tag by Hashed Global ID

```
{
  tag(id: "cG9zdF90YWc6Mw==") {
    id
    name
    slug
    tagId
  }
}
```

![Screen Shot 2019-12-31 at 4 09 37 PM](https://user-images.githubusercontent.com/1260765/71636023-f79e2e00-2be7-11ea-951b-ba294f5c3d5e.png)

#### Query Tag by Database ID

```
{
  tag(id: 3, idType: DATABASE_ID) {
    id
    name
    slug
    tagId
  }
}
```

![Screen Shot 2019-12-31 at 4 12 14 PM](https://user-images.githubusercontent.com/1260765/71636049-56fc3e00-2be8-11ea-951f-90d37f7b6718.png)

#### Query Tag by Name

```
{
  tag(id: "Another Test", idType: NAME) {
    id
    name
    slug
    tagId
  }
}
```

![Screen Shot 2019-12-31 at 4 12 47 PM](https://user-images.githubusercontent.com/1260765/71636064-71ceb280-2be8-11ea-8340-af901a0d2d63.png)

#### Query Tag by Slug

```
{
  tag(id: "another-test", idType: SLUG) {
    id
    name
    slug
    tagId
  }
}
```

![Screen Shot 2019-12-31 at 4 14 06 PM](https://user-images.githubusercontent.com/1260765/71636074-99257f80-2be8-11ea-86ff-f20f3d583cd7.png)


#### Query Tag by URI

```
{
  tag(id: "tag/another-test/", idType: URI) {
    id
    name
    slug
    tagId
    uri
  }
}
```

![Screen Shot 2019-12-31 at 4 14 46 PM](https://user-images.githubusercontent.com/1260765/71636079-b1959a00-2be8-11ea-9274-4334b505b70a.png)

### TermNode Interface

This release also introduces the TermNode interface, which allows for querying terms across Taxonomy types. 

For example: 

#### Query TermNodes Connection

```
{
  terms {
    nodes {
      id
      __typename
      name
      uri
    }
  }
}
```
![Screen Shot 2019-12-31 at 4 22 31 PM](https://user-images.githubusercontent.com/1260765/71636180-e22a0380-2be9-11ea-95bd-3e655582a459.png)

This enables us to do things, like search terms across multiple taxonomies and get both Categories and Tags (and custom taxonomies) back in the same query: 

```
{
  terms(where: {search: "test"}) {
    nodes {
      id
      __typename
      name
      uri
      ... on Tag {
        tagId
      }
      ... on Category {
        categoryId
      }
    }
  }
}
```

![Screen Shot 2019-12-31 at 4 24 38 PM](https://user-images.githubusercontent.com/1260765/71636192-10a7de80-2bea-11ea-896d-b06092a94995.png)

### Query Single Terms by Unique Identifiers
We can also query single term nodes by various identifiers, such as `Database ID`, `ID`, `Name`, `Slug` or `URI`: 

#### Query Single Term Node by (hashed) ID

```
{
  termNode(id: "cG9zdF90YWc6Mw==") {
    __typename
    id
    name
    link
    slug
    uri
  }
}
```

![Screen Shot 2019-12-31 at 4 28 01 PM](https://user-images.githubusercontent.com/1260765/71636235-8b70f980-2bea-11ea-8a26-c070e87a9541.png)

#### Query Single Term Node by Database ID

```
{
  termNode(id: 3, idType: DATABASE_ID) {
    __typename
    id
    name
    link
    slug
    uri
    databaseId
  }
}
```

<img width="1022" alt="Screen Shot 2020-01-01 at 3 53 24 PM" src="https://user-images.githubusercontent.com/1260765/71647102-e1a77080-2cae-11ea-93f3-8632ecb698e1.png">


#### Query Single Term Node by Name

```
{
  termNode(id: "Another Test", idType: NAME, taxonomy: TAG) {
    __typename
    id
    name
    link
    slug
    uri
    databaseId
  }
}
```
<img width="1022" alt="Screen Shot 2020-01-01 at 3 53 24 PM" src="https://user-images.githubusercontent.com/1260765/71647118-36e38200-2caf-11ea-9761-45b33c62a40e.png">


#### Query Single Term Node by Slug

```
{
  termNode(id: "another-test", idType: SLUG, taxonomy: TAG) {
    __typename
    id
    name
    link
    slug
    uri
    databaseId
  }
}
```

<img width="1026" alt="Screen Shot 2020-01-01 at 3 56 32 PM" src="https://user-images.githubusercontent.com/1260765/71647130-54185080-2caf-11ea-9e6d-c30551f3842f.png">


#### Query Single Term Node by URI

```
{
  termNode(id: "tag/another-test/", idType: URI) {
    __typename
    id
    name
    link
    slug
    uri
    databaseId
  }
}
```

<img width="1031" alt="Screen Shot 2020-01-01 at 3 57 44 PM" src="https://user-images.githubusercontent.com/1260765/71647144-7b6f1d80-2caf-11ea-9dc7-e0eac435c414.png">

## Node By URI

Another thing this release provides is a way to get any node by URI, across types. This comes in handy because in many cases when a URI is provided, the type of content it is isn't always known ahead of time. By having an entry point for _all_ Types that implement the 1UniformResourceIdentifiable` Interface, we can create a main entry point for entire applications. 

Below is an example. This is showing many queries at once, but this could easily be one query with fragments for each Type, controlled by their appropriate component for rendering said type of content:

```
{
  page: nodeByUri(uri: "about/") {
    ...URI
  }
  post: nodeByUri(uri: "2019/12/05/test-5/") {
    ...URI
  }
  tag: nodeByUri(uri: "tag/8bit/") {
    ...URI
  }
  category: nodeByUri(uri: "category/alignment/") {
    ...URI
  }
  user: nodeByUri(uri: "author/jasonbahl/") {
    ...URI
  }
}

fragment URI on UniformResourceIdentifiable {
  __typename
  ... on Page {
    pageId
  }
  ... on Post {
    postId
  }
  ... on Category {
    categoryId
  }
  ... on Tag {
    tagId
  }
  ... on User {
    userId
  }
}
```

<img width="1119" alt="Screen Shot 2020-01-01 at 4 05 25 PM" src="https://user-images.githubusercontent.com/1260765/71647226-b1f96800-2cb0-11ea-9b10-07565a1641d0.png">

```
query {
  revisions {
    nodes {
      ... on Post {
        categories(where: {shouldOutputInFlatList: true}) {
          nodes {
            id
          }
        }
      }
    }
  }
}

```

The response:
```
{
  "data": {
    "revisions": {
      "nodes": [
        {
          "categories": {
            "nodes": []
          }
        }
      ]
    }
  }
}
```

This query will not return categories, as Wordpress Core does not support revisions for categories. I think we should still return the parent post's categories, rather return an empty array of categories. Seems like this should be an easy change in the [TermObjectConnectionResolver](https://github.com/wp-graphql/wp-graphql/blob/dd11205fc9ef572d0cbb5ddcc32d9d58b95475cc/src/Data/Connection/TermObjectConnectionResolver.php#L130), if we replace the `source ID` with the `parent ID` for revision post types.

### When reporting a _bug_, please be sure to include the following:
- [x] A descriptive title
- [x] An *isolated* way to reproduce the behavior (example: GitHub repository with code isolated to the issue that anyone can clone to observe the problem)
- [x] What version of `WPGraphQL` you're using, and the platform(s) you're running it on
WPGraphQL 0.5.0, OSX Mojave
- [x] What other plugins you're using
WPGraphQL ACF
- [x] The behavior you expect to see, and the actual behavior

### When you open an _issue_ for a feature request, please add as much detail as possible:
- [x] A descriptive title
- [x] A description of the problem you're trying to solve, including *why* you think this is a problem
- [x] An overview of the suggested solution
- [x] If the feature changes current behavior, reasons why your solution is better
