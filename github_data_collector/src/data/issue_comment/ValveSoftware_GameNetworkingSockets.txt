Great work on the open source side of things!
I forked and created a gateway example specific to the Syscoin cryptocurrency network for UDP propogation of mempool transaction packets to help with the real-time double-spend detection of ZDAG (our point-of-sale crypto currency algorithm). I needed a high throughput UDP propogation for messages, without verification (just hash dedup's was enough). You can find my work here: https://github.com/syscoin/GameNetworkingSockets/blob/master/gateway/gateway.cpp#L229

I noticed that if I used the global interface that you created in GNS library I get call backs on the client as a server, it seems that the callbacks get confused and then the GatewayServer incoming messages don't pick up the actual request and times out, I get the "AssertMsg( false, "Application didn't accept or close incoming connection in a reasonable amount of time.  This is probably a bug." );" message leading me to believe either I'm not setting up the callbacks properly or that the interface is incompatible with incoming and outgoing at the same time (being the same IP doesn't matter).

I created a network to illustrate the error:

From gateway A I set outgoing to gateway B and from B I set outgoign to gateway C and from C I set outgoing back to A and A throws up soon as C tries to /connect because the client poller gets the message instead of the server for some reason. This led me to believe that each outgoing client and server needed its own ISteamNetworkingSockets interface which handles its own message queue (on the server it handles child connections, but incoming and outgoing connections don't confuse the interface): https://github.com/syscoin/GameNetworkingSockets/blob/master/src/steamnetworkingsockets/clientlib/csteamnetworkingsockets.cpp#L1598

So I actually return the new interface from GameNetworkingSockets_Init() and take care of deleting the object (had to add virtual Destroy() to the base class so Destroy() can be called on the interface as well), this way my outgoing GatewayClient's all have their own interface, and the server creates one (GatewayServer) to manage incoming connections, which does work.. so question is, is it a bug in the internal guts which causes confusion between interface reuse between listening/outgoing connections or is the pattern I'm using wrong or is the right way to have the application manage their own interface and take care of destroying it when they are done? If having your own interface makes sense I can PR that in.

Thanks!
For the visual studio building instructions for protobuf this cmake command is used
`C:\dev\protobuf\cmake_build> cmake -G Ninja -DCMAKE_BUILD_TYPE=Release -Dprotobuf_BUILD_TESTS=OFF -Dprotobuf_BUILD_SHARED_LIBS=ON -DCMAKE_INSTALL_PREFIX=c:\sdk\protobuf-amd64 ..\cmake`

And for GameNetworkingSockets cmake this command is used
`cmake -G Ninja ..`

Not sure if this is just an issue with my setup but this caused a whole bunch of errors and had to use this command for the GameNetworkingSockets cmake to get it working
`cmake -G Ninja -DCMAKE_BUILD_TYPE=Release ..`

So not sure if this is an issue for anyone else but if it is it might be good to update the building instructions.
Added compile-time option for using libsodium for crypto, as well as setup for the CI to build and test it. Main caveat is that AES is only supported in libsodium if the CPU has instructions for it.

Probably could do with some cleanup, especially around formatting; is there a style guide and/or a clang-format file for the house style I've overlooked?

Change to abstract Protobuf ByteSize() / ByteSizeLong() is there because one of the Travis builds broke without changing to ByteSizeLong(), and other builds broke if everything was changed to ByteSizeLong(). An alternative solution would be to ignore the deprecation warning.
While this library has shown to scale up to larger server based use cases and cross-continent P2P connections, the lack of a LAN discovery tool for quick and dirty LAN play makes it hard to scale down. I'm working on direct 1v1 games that will largely benefit from avoiding a hop to the nearest relay/authoritative server to establish a game over the same subnet.
This PR improves the global locking mechanism to prevent a thread from being starved out of execution due to the inability to acquire a lock in favor of other threads. It also eliminates the hacky MSVC workaround. Proposed mutex is based on first-in first-out scheduling which guarantees fairness. 

This implementation tested and compatible with:
- Linux G++ 5.4
- Linux Clang 3.7
- macOS Clang (Xcode 8.3)
- Windows MSVC 14.0 (Visual Studio 2015)
- Windows G++ (MinGW 5.4)

Improves https://github.com/ValveSoftware/GameNetworkingSockets/issues/50

Hello,

When running the library without OpenSSL's 25519 implementation and using valve's implementation will result in an error when connecting server side in
`bool CECSigningPublicKey::VerifySignature( const void *pData, size_t cbData, const CryptoSignature_t &signature ) const`

To reproduce simply build the examples in 32 bits with the defines to toggle Valve's implementation.
Are there any plans to expose flattened interface for IGameNetworkingSockets in the Steamworks SDK like it has been done in open-source version? Is there any ETA for this?
I was about to integrate the library into [NetDynamics](https://github.com/nxrighthere/NetDynamics) for tests, but unreliable ordered/sequenced message delivery is not supported unlike in other modern network transports. It solves a vector of design and gameplay problems in practice where a developer doesn't need a manual frame buffering and sequence tracking, but still needs a properly sequenced logic, so from my point of view this delivery type should be available.
Hello!

I've been excitedly watching this project for a while, I'd love to switch to it as the primary transport protocol for my project.

Since we don't have dedicated servers yet, multiplayer sessions are user-hosted, so NAT piercing and relay servers are crucial. 

I just wanted to ask if you have any rough estimate when this might be implemented?

Thanks for your time and hard work on this!
Hi there,

I'm just trying to build the sample(C/S demo in GameNetworkingSockets\examples) ,
but it turns out a access error when I'm trying to connect to server:
![image](https://user-images.githubusercontent.com/28585405/53866340-5462a380-402c-11e9-9e28-62f3f00a0f66.png)
Access exception when try to write into  0x0000000000000000
bool CCryptoKeyBase::GetRawDataAsStdString( std::string *pString ) const
{
	pString->clear();
	uint32 cbSize = GetRawData(nullptr);
...

IDE: VS2017 Community
Codebase: Latest commit on master
Thanks.