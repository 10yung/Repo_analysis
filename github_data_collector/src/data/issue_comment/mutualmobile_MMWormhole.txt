When running the code below on iOS 13:

`MMWormhole.defaultWormhole().passMessageObject(session.asDictionary() as NSCoding, identifier: MMWormholeMessageIdentifiers.session.forDirection(.send))`

I'm getting the error:

```
2019-12-05 04:08:44.649148-0800 Perfect Run[4104:1225521] [WC] EXCEPTION: -[WCSession updateApplicationContext:error:]: applicationContext cannot be nil.
2019-12-05 04:08:44.652923-0800 Perfect Run[4104:1225521] *** Terminating app due to uncaught exception 'NSInvalidArgumentException', reason: '-[WCSession updateApplicationContext:error:]: applicationContext cannot be nil.'
*** First throw call stack:
(0x1bca46278 0x1bc76f0a4 0x1bc93bac8 0x1db7f4878 0x102e43e90 0x102e42464 0x100618864 0x1006188e4 0x100534ab8 0x1003434b8 0x10034318c 0x1003414dc 0x10034191c 0x1c0a1d870 0x1c0a1f640 0x1c0a24c08 0x1c020f2b8 0x1c0699d60 0x1c020fd9c 0x1c020f8ac 0x1c020fbc4 0x1c020f488 0x1c0213758 0x1c05cdb58 0x1c06b2f1c 0x1c02134ac 0x1c06b2e18 0x1c0213318 0x1c008bf20 0x1c008aa88 0x1c008bc58 0x1c0a22f88 0x1c05ee1c4 0x1c1aa5764 0x1c1acc538 0x1c1ab0390 0x1c1acc1f4 0x104472c88 0x1044760ac 0x1c1af2210 0x1c1af1edc 0x1c1af2404 0x1bc9c4090 0x1bc9c3fe8 0x1bc9c3780 0x1bc9be8cc 0x1bc9be16c 0x1c67e8328 0x1c0a26e1c 0x1003447bc 0x1bc849424)
libc++abi.dylib: terminating with uncaught exception of type NSException
```

The error the error does not occurs on iOS 12
ensure the parameter is not nil before passing it to [NSURL fileURLWithPath:]


Hello Team,

Your example is so old. I am create new project and working with your pod file with create new group app id but data or message not transfer and get ,Please suggest what is the actual error on my side.

Thanks and Regards,
Saurav Singh

I am using Xcode 10.0 and with 4 I am passMessageObject from phone to watch and it's working fine but when I am trying to passMessageObject from watch to phone using the same way 
`self.watchConnectivityWormhole!.passMessageObject(message, identifier: "identifier")`

I am getting this error in the watch 

> [WCSession _onqueue_notifyOfMessageError:messageID:withErrorHandler:] errorHandler: NO with WCErrorCodeDeliveryFailed

Any idea? 
Thanks.
`- (void)passMessageObject:(nullable id <NSCoding>)messageObject identifier:(nullable NSString *)identifier`
when this api is called with nil `messageObject` parameter, it will not remove the existing message, causing the other side receive the stale data, instead of nil data. Is this an expected behavior? 

related code logic is here https://github.com/mutualmobile/MMWormhole/blob/master/Source/MMWormholeFileTransiting.m#L105-L118
Hi guys,

I am using your nice library to communicate watchOS and iOS, I did use it before for watchOS 1 and no problems at all, but now trying to handle from watchOS 2 on I am facing something confusion.

------------------------------------------------
If I initialize with:

`self.wormhole = [[MMWormhole alloc] initWithApplicationGroupIdentifier:@"xx" optionalDirectory:@"x" transitingType:MMWormholeTransitingTypeSessionMessage];`

and then

`id messageObject = [self.wormhole messageWithIdentifier:@"identifier"];`

the messageObject is nil always.

------------------------------------------------
If I initialize with:

`self.wormhole = [[MMWormhole alloc] initWithApplicationGroupIdentifier:@"xx" optionalDirectory:@"x" transitingType:MMWormholeTransitingTypeSessionContext];`

and then

`id messageObject = [self.wormhole messageWithIdentifier:@"identifier"];`

the messageObject isn't nil. But when I pass a message

`[self.wormhole passMessageObject:@"x.x" identifier:@"identifier"];`

Every listener's block will be called.

```
[self.listeningWormhole listenForMessageWithIdentifier:@"x.x" listener:^(id  _Nullable messageObject) {

}];
```
------------------------------------------------

The example also does the same for me on my machine.
Perhaps I got it wrong. Hope to get some help. 

Thanks!

ilion

Is the main queue used to invoke listener blocks out of necessity or was it simply a convenient choice at the time? https://github.com/mutualmobile/MMWormhole/blob/8fdc7d7e44fc0ca9f1b9d7debf9d013256b5a2f9/Source/MMWormhole.m#L194

I'm wondering if there's any reason why this shouldn't be updated to be user-configurable (besides lack of demand).
Hi guys,

I am updating my app to be compatible with iOS 11 and watch os 4 and the sync stopped working. 
Building time is giving me this messages 
`Class 'MMWormholeSession' does not conform to protocol 'WCSessionDelegate'`
`Add stubs for missing protocol requirements`
`Class 'MMWormholeSessionFileTransiting' does not conform to protocol 'WCSessionDelegate'`
`Add stubs for missing protocol requirements`

and when I build and run the app, I am getting these messages in console and not working for real devices (iPhone 6 and Apple Watch Series 1):

```
2017-10-18 22:02:59.698239+0200 QuickCart Watch Extension[190:14852] refreshPreferences: HangTracerEnabled: 0
2017-10-18 22:02:59.705363+0200 QuickCart Watch Extension[190:14852] refreshPreferences: HangTracerDuration: 2000
2017-10-18 22:02:59.726820+0200 QuickCart Watch Extension[190:14852] refreshPreferences: ActivationLoggingEnabled: 0 ActivationLoggingTaskedOffByDA:0
2017-10-18 22:07:25.606248+0200 QuickCart Watch Extension[192:15788] [WC] activate session semaphore timed out
```


but the app is running fine on simulator with iOS 11 and watch os 4.... Don't get it.
Could you help me with this ?

Thanks !

Maxi