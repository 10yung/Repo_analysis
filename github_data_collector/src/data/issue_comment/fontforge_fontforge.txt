Opening [Libertinus Serif Italic](https://github.com/alif-type/libertinus/blob/master/sources/LibertinusSerif-Italic.sfd) in FontForge and saving it immediately (CTRL+S) without touching any glyph results in some automatic changes. There are about a dozen of them, here is one example: (Anything between `[-...-]` is removed and replaced by `{+...+}`)

```
StartChar: longs
Encoding: 383 383 499
Width: 299
GlyphClass: 2
Flags: MW
LayerCount: 2
Fore
SplineSet
463 698 m [-1028,20,21-]{+1028+}
277.152249135 429 m [-2,22,-1-]{+2+}
 231 195 l [-2,23,24-]{+2+}
 197.2 26.8 168 -121 121 -184.2 c [-0,25,26-]{+0+}
 97.5 -215.8 59.2 -233 7 -233 c [-0,27,28-]{+0+}
 -27 -233 -66 -212 -66 -187 c [-0,29,30-]{+0+}
 -66 -165 -48 -150 -33 -150 c [-0,31,32-]{+0+}
 -15 -150 1.1 -161.9 12 -182 c [-0,33,34-]{+0+}
 18 -193 22 -197 38 -197 c [-0,35,36-]{+0+}
 57.9 -197 70.8 -190.4 84.5 -160 c [-0,37,38-]{+0+}
 120.2 -80.7 114 -15 168.6 276 c [-2,39,-1-]{+2+}
 186.5 372 l [-2,40,41-]{+2+}
 189.4 387.3 184 391.4 166 392.6 c [-2,42,-1-]{+2+}
 130 395 l [-1,43,44-]{+1+}
 124 410 123 417 134 425 c [-1,45,46-]{+1+}
 165.881330125 428.446630284 192.565483863 429.665899259 204.456347867 449.769256815 c [-1,47,48-]{+1+}
 223.766589369 534.695776328 254.148305186 606.786528856 304.400390625 651.299804688 c [-0,49,50-]{+0+}
 338.5 681.5 381.799804688 699 437 699 c [-0,51,52-]{+0+}
 511 699 585 634 585 588 c [-0,53,54-]{+0+}
 585 554 559 533 537 533 c [-0,55,56-]{+0+}
 512 533 495 551 495 579 c [-0,57,58-]{+0+}
 495 619 495 624 477 648 c [-0,59,60-]{+0+}
 467 661 443 666 427 666 c [-0,61,62-]{+0+}
 407 666 364 662 330 602 c [-0,63,64-]{+0+}
 297.96628699 545.324969289 289 491 277.152249135 429 c [-2,22,-1-]{+2+}
EndSplineSet
Refer: 421 305 N 1 0 0 1 279 0 2
EndChar
```

The font compiles just fine with or without these automatic changes. I'm wondering how I can disable such changes, as they make it harder to contribute to the upstream font repository. Or maybe these automatic changes are in fact desirable and should be changed in the upstream font?

I'm using FontForge 20190801 on Fedora 31.
…pe feature file, merging the feature fails.

Add an option to skip the erroring out in merging feature file. This helps with feature files of Indic scripts with many hundreds of ligatures; some of the glyphs may not be present in all fonts,
yet the feature file can be reused.
This is WIP patch. Completed: extended the 'font.mergeFeature()' python interface and associated C code, with documentation update. TODO: extending the 'Merge Feauture' menu in GUI.

### Motivation
Main reason for this pull request is that — Indic fonts can have many hundreds of ligatures (conjuncts formed from many base glyphs) and the OpenType featurefile holds the lookup rules. This feature file can currently be reused in Fontforge based workflow, if the new font have exactly same (or more) glyphs. But if the font has lesser glyphs (usually with a variant such as Bold of an existing font), the featurefile cannot be merged because Fontforge taps out with error
```
Reference to a non-existent glyph name on line 1067 of font-feature.fea: shr3
No substitution specified on line 1067 of font-feature.fea
There were errors when parsing the feature file and the features have not been applied
```

This enhancement preserves the warnings, but skips the error so that applicable lines of the feature file are applied.

### Suggestions/comments required
1.  Does this feature make sense and is the approach technically good?
2.  Not happy with the flag name `ignore_na_feature`, something more intuitive required.
3.  Any guidance on making the flag visible when chosen from the GUI menu.

<!-- Provide a description of the change here. -->
<!-- See also: https://github.com/fontforge/fontforge/blob/master/CONTRIBUTING.md -->

### Type of change
<!-- What kind of change is this? Remove non applicable types. -->
<!-- If this fixes a bug, please reference the issue, e.g. 'Fixes #1234' -->
- **New feature**
Load the attached font, select the letter, change weight: remove anything in "fuzz", embolden by 9.

[test.zip](https://github.com/fontforge/fontforge/files/4043010/test.zip)

Based on sources from 2019-12-24 15:30 UTC-ML-D-GDK3.
Internal Error (overlap): The end of the monotonic does not match that of the containing spline.
Internal Error (overlap): The end of the monotonic does not match that of the containing spline.
Internal Error (overlap): The end of the monotonic does not match that of the containing spline.
Internal Error (overlap): The end of the monotonic does not match that of the containing spline.
Internal Error (overlap): The end of the monotonic does not match that of the containing spline.
Internal Error (overlap): The end of the monotonic does not match that of the containing spline.
Internal Error (overlap): The end of the monotonic does not match that of the containing spline.
Internal Error (overlap): Winding number did not return to 0 when y=554,842
Internal Error (overlap): Winding number did not return to 0 when y=554,889
Internal Error (overlap): Winding number did not return to 0 when y=554,842
Internal Error (overlap): Winding number did not return to 0 when y=554,889
Internal Error (overlap): Winding number did not return to 0 when y=554,842
Internal Error (overlap): The start of the monotonic does not match that of the containing spline.
malloc_consolidate(): invalid chunk size
Aborted (core dumped)

hi
fontforge skew function could be improved to support skew angle, it's a good idea to to merge 3 sub-function below into one new skew function with skew angle support:

![fontforge_2020-01-05_13-36-37](https://user-images.githubusercontent.com/25493297/71778241-7ae0ca80-2fc0-11ea-90d6-c484bd63e85a.png)

I have two cases (two different native languages): one of them works as a normal abc, but some of the sane sounds have different figures; the other one is a silabary and a mix of vocals and consonants (but different figure as in hiragana)

* I have watched some pngs that say there are 1 to 4 drawings for the same sound a.
* Watching another drawing it says that is something like hiragana/katakana with vowels, consonants and a table like that.

So my question is... I just start drawing them in the places of A, B, C for lower case and uppercase... or should I first choose the code point of the character? becuse as far as I know, there is no codes defined for those symbols because they are indigenous langs... so, how to approach this? (I gess for start it is ok to have only the drawings of each char??)
After I updated the system version to Catalina, I found that I was no longer able to use FontForge. It seems that it doesn't ask for the authority to access folders and it shows below in each folder when I try to find font file to open. 
<img width="369" alt="Snip 2019-12-31, 01-00-50" src="https://user-images.githubusercontent.com/47198693/71611786-e1518d00-2b69-11ea-9861-e8634cc748aa.png">
<img width="369" alt="Snip 2019-12-31, 01-05-45" src="https://user-images.githubusercontent.com/47198693/71611787-e3b3e700-2b69-11ea-96c6-e9db6596a965.png">
<img width="369" alt="Snip 2019-12-31, 01-05-54" src="https://user-images.githubusercontent.com/47198693/71611789-e57daa80-2b69-11ea-8acb-6a2d3f5a4899.png">

Since FontForge doesn't request authority of accessing, I couldn't find it in system privacy&safety setting and authorize it... I don't know why but the `+`/`-` buttons under the authorized apps list are grey and not available to click, which might mean that I couldn't add fontforge to the list manually..

OS version is macOS Catalina 10.15.2, FontForge version is 20190801.
Thanks for your time!

And this is a security risk. I doubt too many people installing e.g. `fontforge-git` from the AUR think about how many people can push.

And remember, since none of us active developers are in the habit of signing our commits, anyone with push access can push in one of our names.

Just because nothing has happened yet doesn't mean nothing will happen.

56 people can push to the head of the repository. That's 56 random people we're trusting to all have great security, and not to troll the repository, and not to sell their account to someone who would troll the repository.

In the new year, we should cut down severely on those who have push access. If this results in me myself losing access that's the a cost I'm willing to bear if it means that only a select few can merge PRs. (Though I would argue on my behalf that given how active I am and that I develop all my fonts on master, I should have access so I can quickly revert bad changes, as I've done in the past.)

I'm not saying any of the 56 are bad people. I'm just saying that this is wildly insecure.

To edify, let's see how little had to be contributed to get access.

* @cicku authored a single merge commit, 714747a1d4b465c9962d0a6200308674b6bd819f, which updated a translation. He now has seemingly lifelong push access.
* @monkeyiq was an employee and makes a point of ignoring requests for comment. He definitely should lose access.
* I love @behdad but he doesn't even seem to have made any commits at all to the project!

Some contributed a lot, like @blipvert. The problem is, they last contributed in 2014. Ditto for @mskala, who can do even more destruction as they are an Owner; they last contributed in 2016.

We need to come up with criteria for having push access. Like being a Wikipedia admin, I'd say the two most important criteria are:

* needing the extra power it grants you over normal members, and
* actually using that power to some degree in the present.

The ["Core" team](https://github.com/orgs/fontforge/teams/core) is a good start for who should have push access. I'd add myself to that (duh :joy:), @skef, Joe, and maybe one or two others that aren't coming to mind right now. (Very tired, this is my last e-mail of the night.)
I believe this was originally a bug, but due to how long it has endured, it has now become a feature.

Consider:

* if `OpenCharsInNewWindow` be `false`, and;
* if a char be double-clicked,

it will open a new tab in an existing window. But if all the same is true, except that the user pressed Return instead, a new window is opened, despite the setting of `OpenCharsInNewWindow`.

So, the bug is that there's no way to open new CharView tabs from the keyboard when `OpenCharsInNewWindow` is false. I decided `Shift+Return` is just as good as any other way.

### Type of change
<!-- What kind of change is this? Remove non applicable types. -->
<!-- If this fixes a bug, please reference the issue, e.g. 'Fixes #1234' -->
- **Non-breaking change**

# This is not yet ready for merge!

I'm opening this to get comment, hopefully.

I'll at least need this, _or something like this_, to get COLR/CPAL working...

This fixes a crash if you add font-level layers when a glyph has its own layers. It correctly moves the glyph-level layers, and their data, after the font-level layers.

I also need to make it so that "multi-layer" (that is to say, fonts where glyphs can have their own number of "extra" layers) fonts can have qudaratic layers, so as you can see, I'm removing a lot of the rules, and I added a "Q/C" marker to the UI for type 3 fonts. More UI work certainly needs to be done.

I'm opening this now and early because if we can't even agree to do this simple stuff COLR/CPAL support will never get approved.

# An example file

Compare to master, especially when adding glyph-only layers in the CharView, and font-level layers in &laquo;Font Info&rarr;Layers&raquo;.

[COLR_CLAP_WIP.sfd](https://github.com/fontforge/fontforge/files/3994898/CCW.zip)

Apparently there is a desire to eventually get FontForge back to a BSD-compatible state. This is something the project has recently made great, but seemingly un-noted, progress towards. And the current state of the messaging is a little embarrassing. 

Given the desire, this is what the current LICENSE file says about GPL:

```
These files were created under the GPL License:

fontforge-20120731-b/
aclocal.m4      configure.dynamic       configure.static.in
config.guess    configure.dynamic.in    ltmain.sh
config.sub      configure.in            Makefile.dynamic.in
configure       configure.static        Makefile.static.in

fontforge-20120731-b/fontforge:
Makefile.dynamic.in     Makefile.static.in

fontforge-20120731-b/gdraw:
Makefile.dynamic.in     Makefile.static.in

fontforge-20120731-b/gutils:
giomime.c       Makefile.dynamic.in     Makefile.static.in

fontforge-20120731-b/inc:
fontforge-config.h.in

fontforge-20120731-b/plugins:
ANALYZE_MAP.COM Makefile.in

fontforge-20120731-b/Unicode:
Makefile.dynamic.in     Makefile.static.in
```
Obviously almost all of these have been removed by @jtanx's CMake work. 

`fontforge-config.h.in` now claims a BSD license at the top, in contrast with the statement in `LICENSE`, but has commented out lines at the end that presumably aren't BSD, strictly speaking. Perhaps those could be removed? 

`giomime.c` is now `g_giomime.c` and may be the only remaining stumbling block. The authors, and therefore copyright holders, of each commit from when @JoesCat moved the function out of `giomime.c` are:

 * Joe Da Silva (Joe) @JoesCat 
 * Khaled Hosny @khaledhosny 
 * Jeremy Tan @jtanx 
 * Skef Iterum @skef 
 * Thomas Shinnick @tshinnic 
 * Adrien Tétar @adrientetar 

Suppose we add a section to `LICENSE` for copyright holders of `g_giomime.c` to re-license their portion as BSD by adding a statement of agreement via a PR. Then we ask each author above to do so. Then, assuming that has happened, we change the license at the top of the file to BSD with a note that it is also available under GPL and pointing to the LICENSE file notations. Assuming the Open Group License is more or less BSD equivalent, would the project then be validly BSD, at least by its own standards? 