opensnitch uses high cpu while qbittorrent running.
I'm using Arch Linux and installed opensnitch through the AUR package. The `opensnitchd` daemon starts and runs just fine. Whenever an application tries to access the network, the notification window pops up

However, I cannot launch the ui that shows all the connections made. When I run `opensnitch-ui`, I get the following message
`Attribute Qt::AA_EnableHighDpiScaling must be set before QCoreApplication is created.`
and the terminal hangs there
My gui has grown and there is no option to resize it.

see: https://imgur.com/a/5G1q8Vq
Does OpenSnitch manage only the outcoming connections?
I don't see any option to manage incoming connections too like GUFW does.
Fix `requirements.txt` for fresh install using python3 and update `make_ads_rules.py` to python3.
If the daemon exits due to an unexpected reason (segfault, etc), the iptables rules are not deleted. 
When it starts again, the iptables rules are added without deleting the existing ones:

> Chain OUTPUT (policy ACCEPT 0 packets, 0 bytes)
>  pkts bytes target     prot opt in     out     source               destination         
>  6621  439K NFQUEUE    all  --  *      *       0.0.0.0/0            0.0.0.0/0            ctstate NEW NFQUEUE num 0 bypass
>     0     0 NFQUEUE    all  --  *      *       0.0.0.0/0            0.0.0.0/0            ctstate NEW NFQUEUE num 0 bypass

> Chain OUTPUT (policy ACCEPT 0 packets, 0 bytes)
>  pkts bytes target     prot opt in     out     source               destination         
>     0     0 DROP       all  --  *      *       0.0.0.0/0            0.0.0.0/0            mark match 0x18ba5
>     0     0 DROP       all  --  *      *       0.0.0.0/0            0.0.0.0/0            mark match 0x18ba5
Each connection will be filtered by one rule - the first match - it seems that the order of rules is based off the name of the rule.

So for example, if I had the following rules
* Block some advertising domain
* Allow port 80

If the port 80 rule had a name that sorted earlier than the blocking rule, then it would still permit http requests to the domain.

I can't be sure whether its the rule name or the filename of the rule that controls that ordering.
If I'm reading the golang code correctly, it supports the use of an operator type "list" - but there is no example in the README of that.

I think that it would be something like
```json
{
  "created": "2019-08-29T08:08:04.998109722+01:00",
  "updated": "2019-08-29T08:08:04.998151386+01:00",
  "name": "allow-firefox-80",
  "enabled": true,
  "action": "allow",
  "duration": "always",
  "operator": {
    "type": "list",
    "operand": "ignored",
    "data": "ignored",
    "list": [
      { "type": "simple", "operand": "dest.port", "data": "80", "list": [] },
      { "type": "simple", "operand": "process.path", "data": "/usr/lib/firefox/firefox", "list": [] }
    ]
  }
}
```

This feels like it should be the default setting (process and port)
Hi,
simple question how to uninstall ?
Thank you in advance
When adding a new permanent rule, the temporary ones are deleted, so the
user is prompted again to allow/deny connections.

fixes #271 