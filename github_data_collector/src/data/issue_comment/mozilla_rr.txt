I think I encountered an unknown ioctl:

```
[FATAL /home/philipp/install/rr/src/record_syscall.cc:5146:rec_process_syscall_arch()] 
 (task 1803 (rec:1803) at time 567)
 -> Assertion `t->regs().syscall_result_signed() == -syscall_state.expect_errno' failed to hold. Expected EINVAL for 'ioctl' but got result 0 (errno SUCCESS); Unknown ioctl(0x802c542a): type:0x54 nr:0x2a dir:0x2 size:44 addr:0x7ffe36514950
Tail of trace dump:
{
  real_time:95.554672 global_time:547, event:`SYSCALL: ioctl' (state:EXITING_SYSCALL) tid:1803, ticks:840951
rax:0x0 rbx:0x10 rcx:0xffffffffffffffff rdx:0x7ffe365150d0 rsi:0x5401 rdi:0x2 rbp:0x681fffa0 rsp:0x681ffe10 r8:0x7ffe36515110 r9:0x0 r10:0x8080808080808080 r11:0x246 r12:0x7ffe3652e640 r13:0x7ffe3652e6c0 r14:0x0 r15:0x0 rip:0x70000002 eflags:0x246 cs:0x33 ss:0x2b ds:0x0 es:0x0 fs:0x0 gs:0x0 orig_rax:0x10 fs_base:0x7f5c3ab70ac0 gs_base:0x0
  { tid:1803, addr:0x7ffe365150d0, length:0x3c }
}
{
  real_time:95.562649 global_time:548, event:`PATCH_SYSCALL' tid:1803, ticks:841760
rax:0x101 rbx:0x0 rcx:0xffffffffffffffff rdx:0x902 rsi:0x7ffe36513e44 rdi:0xffffff9c rbp:0x7ffe36513e44 rsp:0x7ffe36513cd0 r8:0x7ffe36514f84 r9:0x5562a61fce00 r10:0x0 r11:0x246 r12:0x902 r13:0x7ffe3652e6c0 r14:0x0 r15:0x0 rip:0x7f5c3ad4fe09 eflags:0x246 cs:0x33 ss:0x2b ds:0x0 es:0x0 fs:0x0 gs:0x0 orig_rax:0xffffffffffffffff fs_base:0x7f5c3ab70ac0 gs_base:0x0
  { tid:1803, addr:0x7f5c3b13f62c, length:0x4f }
  { tid:1803, addr:0x7f5c3ad4fe09, length:0x5 }
  { tid:1803, addr:0x7f5c3ad4fe0e, length:0x3 }
}
```
[Complete log](https://github.com/mozilla/rr/files/4076632/log.txt)

This happens when I try to debug a proprietary software (which means I can't share the source). 
But maybe this is easy to add - if not: Is there anything I can do to add support for this myself? Or should I try to create a minimal example?


Even though we now pin counters, tests show that multiplexing
is still happening.

NEW: Fixes the original commit to use tmp_attr properly for the
case of `IN_TXCP`.

This reverts commit 3677e44cf0b996abcbba2546b351126df8f4f03a.

Our use case:
A host is running linux perf now and then to get machine stats, in parallel to `rr`. 
Without this detection, rr silently succeeds.

I get the following when trying to replay a recording of Firefox on Ubuntu 19.10
```
FATAL /build/rr-Stwazj/rr-5.2.0/src/ReplaySession.cc:1023:check_ticks_consistency()] 
 (task 20251 (rec:18138) at time 5571)
 -> Assertion `ticks_now == trace_ticks' failed to hold. ticks mismatch for 'SYSCALL: munmap'; expected 106734163, got 106734145
=== Start rr backtrace:
rr(_ZN2rr13dump_rr_stackEv+0x41)[0x55cc30ebb581]
rr(_ZN2rr9GdbServer15emergency_debugEPNS_4TaskE+0x605)[0x55cc30debdd5]
rr(_ZN2rr21EmergencyDebugOstreamD2Ev+0x122)[0x55cc30dfbe82]
rr(_ZN2rr13ReplaySession23check_ticks_consistencyEPNS_10ReplayTaskERKNS_5EventE+0xaa)[0x55cc30e65f2a]
rr(_ZN2rr13ReplaySession11replay_stepERKNS0_15StepConstraintsE+0x84e)[0x55cc30e6bf1e]
rr(_ZN2rr14ReplayTimeline19replay_step_forwardENS_10RunCommandEl+0xce)[0x55cc30e828de]
rr(_ZN2rr9GdbServer12serve_replayERKNS0_15ConnectionFlagsE+0x85)[0x55cc30deec25]
rr(+0x10c7a7)[0x55cc30e627a7]
rr(_ZN2rr13ReplayCommand3runERSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS7_EE+0x750)[0x55cc30e63310]
rr(main+0x282)[0x55cc30da6992]
/lib/x86_64-linux-gnu/libc.so.6(__libc_start_main+0xeb)[0x7f205f1bfb6b]
rr(_start+0x2a)[0x55cc30da6aaa]
=== End rr backtrace
Launch gdb with
  gdb '-l' '10000' '-ex' 'set sysroot /' '-ex' 'target extended-remote 127.0.0.1:20251' /home/jrmuizel/.rr/firefox-0/mmap_hardlink_3_firefox
```
On Ubuntu 19.04 with rr 5.2 I get:
```
$ rr snap run gnome-calculator
rr: Saving execution to trace directory `/home/jrmuizel/.rr/snap-0'.
[FATAL /build/rr-Stwazj/rr-5.2.0/src/AutoRemoteSyscalls.cc:483:check_syscall_result()] 
 (task 21513 (rec:21513) at time 5498)
 -> Assertion `false' failed to hold. Syscall mmap failed with errno EACCES
=== Start rr backtrace:
rr(_ZN2rr13dump_rr_stackEv+0x41)[0x5558c16c7581]
rr(_ZN2rr9GdbServer15emergency_debugEPNS_4TaskE+0x605)[0x5558c15f7dd5]
rr(_ZN2rr21EmergencyDebugOstreamD2Ev+0x122)[0x5558c1607e82]
rr(_ZN2rr18AutoRemoteSyscalls20check_syscall_resultEli+0x159)[0x5558c15c39e9]
rr(_ZN2rr18AutoRemoteSyscalls23infallible_mmap_syscallENS_10remote_ptrIvEEmiiim+0x168)[0x5558c15c4d68]
rr(_ZN2rr12AddressSpace11map_rr_pageERNS_18AutoRemoteSyscallsE+0x340)[0x5558c15b8b80]
rr(_ZN2rr12AddressSpace17post_exec_syscallEPNS_4TaskE+0x6b)[0x5558c15ba2db]
rr(_ZN2rr4Task17post_exec_syscallEv+0x39)[0x5558c16a8549]
rr(+0xdfd78)[0x5558c1641d78]
rr(+0xf79b0)[0x5558c16599b0]
rr(_ZN2rr19rec_process_syscallEPNS_10RecordTaskE+0x196)[0x5558c165d576]
rr(_ZN2rr13RecordSession21syscall_state_changedEPNS_10RecordTaskEPNS0_9StepStateE+0xcf8)[0x5558c1626758]
rr(_ZN2rr13RecordSession11record_stepEv+0x4c3)[0x5558c162c3d3]
rr(_ZN2rr13RecordCommand3runERSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS7_EE+0x8f4)[0x5558c16223f4]
rr(main+0x282)[0x5558c15b2992]
/lib/x86_64-linux-gnu/libc.so.6(__libc_start_main+0xeb)[0x7f70ec33ab6b]
rr(_start+0x2a)[0x5558c15b2aaa]
=== End rr backtrace
Launch gdb with
  gdb '-l' '10000' '-ex' 'set sysroot /' '-ex' 'target extended-remote 127.0.0.1:21513' /snap/snapd/5306/usr/lib/snapd/snap-confine
```
It would be great if rr could be used to debug Firefox for Android (or other Android applications).

Since Android can run on an x86 device or emulator, hopefully this is easier to do than supporting ARM.

cc @jrmuizel
if(NOT (COMPILER_32BIT_RESULT EQUAL 0))
    message(FATAL_ERROR "Your toolchain doesn't support 32-bit cross-compilation. Install the required packages or pass -Ddisable32bit=ON to cmake.")
  endif()
while excute ‘CMake ../rr’，appears errors bellow:
CMake Error at CMakeLists.txt:132 (message):
  Your toolchain doesn't support 32-bit cross-compilation.  Install the
  required packages or pass -Ddisable32bit=ON to cmake.
how can i solve this?
i would like to either set up github actions myself on this repo or have one of hte current collaborators do it.  it should start with the requirements and go from the up/
An assertion failure takes place on a debian VM running on i7-8550U when replaying a trace of code that is seemingly waiting on a subprocess to finish.
The relevant output from `rr replay` -
```
[FATAL /home/roc/rr/rr/src/Task.cc:2239:write_bytes_helper()]
 (task 11576 (rec:28769) at time 94583)
 -> Assertion `nwritten == buf_size' failed to hold. Should have written 2368 bytes to 0x7f8b7ccf9738, but only wrote 2248
=== Start rr backtrace:
rr(_ZN2rr13dump_rr_stackEv+0x28)[0x55faa8]
rr(_ZN2rr9GdbServer15emergency_debugEPNS_4TaskE+0x385)[0x49c9e5]
rr(_ZN2rr21EmergencyDebugOstreamD2Ev+0xd6)[0x4a8656]
rr(_ZN2rr4Task18write_bytes_helperENS_10remote_ptrIvEElPKvPbj+0x395)[0x547615]
rr(_ZN2rr10ReplayTask19set_data_from_traceEv+0x83)[0x51f963]
rr(_ZN2rr13ReplaySession23emulate_signal_deliveryEPNS_10ReplayTaskEi+0xd8)[0x50bdc8]
rr(_ZN2rr13ReplaySession18try_one_trace_stepEPNS_10ReplayTaskERKNS0_15StepConstraintsE+0x131)[0x510e21]
rr(_ZN2rr13ReplaySession11replay_stepERKNS0_15StepConstraintsE+0xe9)[0x511a19]
rr(_ZN2rr14ReplayTimeline19replay_step_forwardENS_10RunCommandEl+0xc3)[0x527543]
rr(_ZN2rr9GdbServer14debug_one_stepERNS_10GdbRequestE+0xe20)[0x49b100]
rr(_ZN2rr9GdbServer12serve_replayERKNS0_15ConnectionFlagsE+0x4c0)[0x49c2c0]
rr[0x50750e]
rr(_ZN2rr13ReplayCommand3runERSt6vectorISsSaISsEE+0x7cb)[0x508d3b]
rr(main+0x244)[0x452504]
/lib/x86_64-linux-gnu/libc.so.6(__libc_start_main+0xf1)[0x7f22ac69b2e1]
rr[0x4529ef]
=== End rr backtrace
```
Backtrace of `rr` from GDB
```
#0  0x0000000070000002 in ?? ()
#1  0x00007f8bf3f2b5ba in _raw_syscall () at /home/roc/rr/rr/src/preload/raw_syscall.S:120
#2  0x00007f8bf3f27cd5 in traced_raw_syscall (call=call@entry=0x7f8b7ccf9fa0) at /home/roc/rr/rr/src/preload/syscallbuf.c:222
#3  0x00007f8bf3f2a389 in syscall_hook_internal (call=0x7f8b7ccf9fa0) at /home/roc/rr/rr/src/preload/syscallbuf.c:2653
#4  syscall_hook (call=0x7f8b7ccf9fa0) at /home/roc/rr/rr/src/preload/syscallbuf.c:2687
#5  0x00007f8bf3f27b3a in _syscall_hook_trampoline () at /home/roc/rr/rr/src/preload/syscall_hook.S:282
#6  0x00007f8bf3f27b6a in __morestack () at /home/roc/rr/rr/src/preload/syscall_hook.S:417
#7  0x00007f8bf3f27b88 in _syscall_hook_trampoline_48_3d_00_f0_ff_ff () at /home/roc/rr/rr/src/preload/syscall_hook.S:428
#8  0x00007f8bf31b0147 in __waitid (idtype=P_PID, id=28773, infop=0x7f8b90bf6608, options=16777220) at ../sysdeps/unix/sysv/linux/waitid.c:29
#9  0x000056358cedb02d in shared_child::sys::sys::wait_without_reaping::h572512d81fc9a2d5 (handle=...) at /home/e/.cargo/registry/src/github.com-1ecc6299db9ec823/shared_child-0.3.4/src/sys/unix.rs:19
#10 0x000056358ced9ca7 in shared_child::SharedChild::wait::hbacca39975165a30 (self=0x7f8b74001808) at /home/e/.cargo/registry/src/github.com-1ecc6299db9ec823/shared_child-0.3.4/src/lib.rs:146
#11 0x000056358ce99ab0 in duct::ChildHandle::wait::h0c7b4987065e7e92 (self=0x7f8b74001808, mode=duct::WaitMode::Blocking) at /home/e/.cargo/registry/src/github.com-1ecc6299db9ec823/duct-0.12.0/src/lib.rs:1162
#12 0x000056358ce97b0a in duct::HandleInner::wait::h1ec1575ebc092812 (self=0x7f8b74001800, mode=duct::WaitMode::Blocking) at /home/e/.cargo/registry/src/github.com-1ecc6299db9ec823/duct-0.12.0/src/lib.rs:1103
#13 0x000056358ce97bd1 in duct::HandleInner::wait::h1ec1575ebc092812 (self=0x7f8b90bf7380, mode=duct::WaitMode::Blocking) at /home/e/.cargo/registry/src/github.com-1ecc6299db9ec823/duct-0.12.0/src/lib.rs:1108
#14 0x000056358ce95b46 in duct::Handle::wait::h0cf81bb2e796cc89 (self=0x7f8b90bf7380) at /home/e/.cargo/registry/src/github.com-1ecc6299db9ec823/duct-0.12.0/src/lib.rs:987
#15 0x000056358ce96b8a in duct::Handle::output::h1c201b396d3a2140 (self=...) at /home/e/.cargo/registry/src/github.com-1ecc6299db9ec823/duct-0.12.0/src/lib.rs:1051
#16 0x000056358ce94bba in duct::Expression::run::hd4a5adf37e06182e (self=0x7f8b90bf7970) at /home/e/.cargo/registry/src/github.com-1ecc6299db9ec823/duct-0.12.0/src/lib.rs:272
#17 0x000056358ca65c68 in talpid_core::ping_monitor::imp::internal_ping::h73ac6a194424f703 (ip=..., timeout_secs=2000, interface=..., exit_on_first_reply=true) at talpid-core/src/ping_monitor/unix.rs:49
#18 0x000056358ca65bb0 in talpid_core::ping_monitor::imp::ping::h6c109e5440063362 (ip=..., timeout_secs=2000, interface=...) at talpid-core/src/ping_monitor/unix.rs:40
#19 0x000056358c945427 in talpid_core::tunnel::wireguard::WireguardTunnel::start::_$u7b$$u7b$closure$u7d$$u7d$::h940b91200810c3cd () at talpid-core/src/tunnel/wireguard/mod.rs:211
#20 0x000056358ca94623 in std::sys_common::backtrace::__rust_begin_short_backtrace::h6830289098e3adee (f=...) at /rustc/96d07e0ac9f0c56b95a2561c6cedac0b23a5d2a3/src/libstd/sys_common/backtrace.rs:127
#21 0x000056358ca45306 in std::thread::Builder::spawn_unchecked::_$u7b$$u7b$closure$u7d$$u7d$::_$u7b$$u7b$closure$u7d$$u7d$::h38128cbbe6913176 ()
    at /rustc/96d07e0ac9f0c56b95a2561c6cedac0b23a5d2a3/src/libstd/thread/mod.rs:470
#22 0x000056358c9487a6 in _$LT$std..panic..AssertUnwindSafe$LT$F$GT$$u20$as$u20$core..ops..function..FnOnce$LT$$LP$$RP$$GT$$GT$::call_once::h50e33431d8ef77cb (self=..., _args=())
    at /rustc/96d07e0ac9f0c56b95a2561c6cedac0b23a5d2a3/src/libstd/panic.rs:315
#23 0x000056358caaa97e in std::panicking::try::do_call::hf5f330ca0b702647 (data=0x7f8b90bf81f0 "") at /rustc/96d07e0ac9f0c56b95a2561c6cedac0b23a5d2a3/src/libstd/panicking.rs:296
#24 0x000056358da7a64a in __rust_maybe_catch_panic () at src/libpanic_unwind/lib.rs:80
#25 0x000056358caa9160 in std::panicking::try::h0312c923bb3aafbd (f=...) at /rustc/96d07e0ac9f0c56b95a2561c6cedac0b23a5d2a3/src/libstd/panicking.rs:275
#26 0x000056358c948b16 in std::panic::catch_unwind::h8cdec8d8359e01b3 (f=...) at /rustc/96d07e0ac9f0c56b95a2561c6cedac0b23a5d2a3/src/libstd/panic.rs:394
#27 0x000056358ca4498d in std::thread::Builder::spawn_unchecked::_$u7b$$u7b$closure$u7d$$u7d$::hd940cc09039793ad () at /rustc/96d07e0ac9f0c56b95a2561c6cedac0b23a5d2a3/src/libstd/thread/mod.rs:469
#28 0x000056358c97c494 in core::ops::function::FnOnce::call_once$u7b$$u7b$vtable.shim$u7d$$u7d$::h2367c41653d298bc () at /rustc/96d07e0ac9f0c56b95a2561c6cedac0b23a5d2a3/src/libcore/ops/function.rs:227
#29 0x000056358da5f7ff in _$LT$alloc..boxed..Box$LT$F$GT$$u20$as$u20$core..ops..function..FnOnce$LT$A$GT$$GT$::call_once::hcc647de57eb732d8 ()
    at /rustc/96d07e0ac9f0c56b95a2561c6cedac0b23a5d2a3/src/liballoc/boxed.rs:922
#30 0x000056358da799c0 in _$LT$alloc..boxed..Box$LT$F$GT$$u20$as$u20$core..ops..function..FnOnce$LT$A$GT$$GT$::call_once::h4fb327f2066a5953 ()
    at /rustc/96d07e0ac9f0c56b95a2561c6cedac0b23a5d2a3/src/liballoc/boxed.rs:922
#31 std::sys_common::thread::start_thread::h267750d1d78a965d () at src/libstd/sys_common/thread.rs:13
#32 std::sys::unix::thread::Thread::new::thread_start::h645c01e371e9ae8e () at src/libstd/sys/unix/thread.rs:79
#33 0x00007f8bf36b54a4 in start_thread (arg=0x7f8b90bfa700) at pthread_create.c:456
#34 0x00007f8bf31e0d0f in clone () at ../sysdeps/unix/sysv/linux/x86_64/clone.S:97
```

Could the differences between Ubuntu and Debian be the cause of this?
Pretty much any debug workflow with `rr` comes down to rewinding the record back and forth in attempts to narrow the section where a problem *(or maybe just interesting piece of code)* manifests itself.

However, when either the record is big, or the part of code gets executed many times in irrelevant places, narrowing down that section is time-consuming, so one might desire to "save" the progress. 

If one could "truncate" the record to start later than the actual start was, or finish earlier than the actual end was, this would help one to save just the interesting section of code with the problem, so one could explore it without having to spend time on narrowing the section down again.
Similarly to #2286 and #2292.

I can hit this reliably running llvm/llvm-project clang @ master, but unfortunately I'm going away for a few weeks now. I've run out of time but trying to put as much information here as I can. Notably, gdb has a problem with what I'm doing too.

I'm invoking the clang frontend and trying to put a breakpoint on `clang::ExecuteCompilerInvocation`, then single step into it.

LLVM/Clang is built with `-DBUILD_SHARED_LIBS -DLLVM_USE_SPLIT_DWARF=On CMAKE_EXE_LINKER_FLAGS:STRING='-Wl,-gdb-index -fuse-ld=lld '`.

Interestingly, gdb also crashes if I try to step through this call. The call itself shows up as `clang::ExecuteCompilerInvocation@plt` during the breakpoint.

If I get time I'll try and add more information, but no promises! I hope there is something useful in what I have written above.