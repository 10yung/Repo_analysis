The LIBUSB_TRANSFER_ADD_ZERO_PACKET flag does not work properly because the maximum packet size is determined incorrectly. The maximum packet size should be 1024 bytes for USB 3.0 and 512 bytes for USB 2.0. Without the suggested patch a maximum packet size of 16384 bytes was determined on my test machine and therefore no zero length packets were sent.
How can I run libusb applications under Mac OS X if there is already a kernel extension installed for the device? On Catalina

Because under Catalina AppleUSBFTDI.kext doesn't exist anymore.

I have this Problem:
Platform does not support kernel detachment
Unable to claim USB device interface
Hi,

The Control Transfer function (sync) [_libusb_control_transfer_] not returning the actual length returned by the DATA packet but instead returning the size of the assigned buffer.

The issue appears to be the result of the _ControlTransfer_ returning True at which point the overlapped structure has the  _overlapped->InternalHigh_ set with the correct number of data bytes. 
The _windows_force_sync_completion_ function is called with the buffer size which is then used to set the _overlapped->InternalHigh_ to the buffer size overriding the actual received byte count.

I used _Wireshark_ to sniff the packets to verify the actual data  count returned by the Overlapped structure when returning from the ControlTransfer function is correct and not the buffer size.

**Example:**
My application is expecting 2 bytes but the _libusb_control_transfer_ returns 8 bytes which is the size of the buffer passed into the libusb_control_transfer.

**OS: Windows 10**




I tried to run the libusb sample code on macOS Majave

https://github.com/libusb/libusb/blob/master/examples/hotplugtest.c

only to find that the callbacks are not fired up when hotplugging in my iPhone to my Mac.

Is this a known issue?

The initialization and registration are all fine and the program was in the while loop waiting for events. It's just that the callbacks don't fire up.

I use libusb-1.0.22 binary version in my windos qt project.  l also use Zadig to install WinUSB driver.
Now the problem is the first libusb_open operation can success,but the second time ,the libusb_open operation return LIBUSB_ERROR_ACCESS. I need to claim two interface ,so i must open the device twice,how to solve this problem.  Below is my code：

int r = 0;
    int i = 0;
    ssize_t cnt = libusb_get_device_list(context, &devs); 

    if (cnt <= 0)
    {
        qDebug() << "failed to get device list";
        return;
    }

    while ((dev = devs[i++]) != nullptr)
    {
        struct libusb_device_descriptor desc; 

        r = libusb_get_device_descriptor(dev, &desc); 
        if (r < 0)
        {
            qDebug() << "failed to get device descriptor"; //fail to get device descriptor
            return;
        }

        struct libusb_config_descriptor *config;
        r = libusb_get_config_descriptor(dev,0,&config);
        qDebug() << "interface number:" << config->bNumInterfaces;

        qDebug() << "vid = " << desc.idVendor << ",pid = " << desc.idProduct;
        if (desc.idVendor == MY_VID && desc.idProduct == MY_PID) 
        {

            r = libusb_open(dev, &CDCDATADEV); //打开设备，获取设备操作符
            if (r < 0)
            {
                qDebug() << "failed to open CDCDATADEV"; //fail to open device
                qDebug() << libusb_error_name(r) << " " << r;
                return;
            }

            r = libusb_open(dev, &VIDEODEV); 
            if (r < 0)
            {
                qDebug() << "failed to open VIDEODEV";
                qDebug() << libusb_error_name(r) << " " << r;
                return;
            } else {
                qDebug() << "success open VIDEODEV";
            }
            break;
        }
    }

    if (COMMONDEV != NULL)
    {
        if ((r = libusb_claim_interface(COMMONDEV, CDC_COMMOM_INTF)) < 0)
        { 

            r = libusb_detach_kernel_driver(COMMONDEV,CDC_COMMOM_INTF);
            if(r < 0) {
                qDebug() << "*** libusb_detach_kernel_driver failed! r = " << r;
            }

            r = libusb_claim_interface(COMMONDEV,CDC_COMMOM_INTF);
            if(r < 0)
            {
                qDebug() << "*** libusb_claim_interface failed! r = " << r;
                libusb_close(COMMONDEV);
                COMMONDEV = NULL;
            }

        }
    }

    if (CDCDATADEV != NULL)
    {
        if ((r = libusb_claim_interface(CDCDATADEV, CDC_DATA_INTF)) < 0)
        { 

            r = libusb_detach_kernel_driver(CDCDATADEV,CDC_DATA_INTF);
            if(r < 0) {
                qDebug() << "*** libusb_detach_kernel_driver failed! r = " << r;
            }

            r = libusb_claim_interface(CDCDATADEV,CDC_DATA_INTF);
            if(r < 0)
            {
                qDebug() << "*** libusb_claim_interface failed! r = " << r;
                libusb_close(CDCDATADEV);
                CDCDATADEV = NULL;
            }

        }
    }
    if (VIDEODEV != NULL)
    {
        // if ((r = libusb_set_configuration(VIDEODEV, MY_CONFIG)) < 0)
        // { //设置usb设备配置模式为1
        //     qDebug("error setting config #1: %s", libusb_error_name(r));
        //     libusb_close(VIDEODEV);
        //     VIDEODEV = NULL;
        // }

        if ((r = libusb_claim_interface(VIDEODEV, CDC_VIDEO_INTF)) < 0)
        { 
            r = libusb_detach_kernel_driver(VIDEODEV,CDC_VIDEO_INTF);
            if(r < 0) {
                qDebug() << "*** libusb_detach_kernel_driver failed! r = " << r;
            }

            r = libusb_claim_interface(VIDEODEV,CDC_VIDEO_INTF);
            if(r < 0)
            {
                qDebug() << "*** libusb_claim_interface failed! r = " << r;
                libusb_close(VIDEODEV);
                VIDEODEV = NULL;
            }

        }
    }
I use a simple program to test libusb 1.0.23 with clang 8.0 on macOS 10.13.6.

But LeakSanitizer report error like this:

```
$ ASAN_OPTIONS=detect_leaks=1 ./clang_test
start!
[timestamp] [threadID] facility level [function call] <message>
--------------------------------------------------------------------------------
[ 0.005150] [00000307] libusb: debug [libusb_get_device_list] 
[ 0.005239] [00000307] libusb: debug [libusb_exit] 
[ 0.005243] [00000307] libusb: debug [libusb_exit] destroying default context
[ 0.005248] [00000307] libusb: debug [libusb_get_next_timeout] no URBs, no timeout!
[ 0.005257] [00000307] libusb: debug [libusb_handle_events_timeout_completed] doing our own event handling
[ 0.005271] [00000307] libusb: debug [handle_events] poll fds modified, reallocating
[ 0.005285] [00000307] libusb: debug [handle_events] poll() 1 fds with timeout in 0ms
[ 0.005308] [00000307] libusb: debug [handle_events] poll() returned 0
[ 0.005317] [00000307] libusb: debug [libusb_unref_device] destroy device 20.31
[ 0.005332] [00000307] libusb: debug [libusb_unref_device] destroy device 20.4
[ 0.005336] [00000307] libusb: debug [libusb_unref_device] destroy device 20.0
[ 0.005339] [00000307] libusb: debug [usbi_remove_pollfd] remove fd 3
[ 0.005408] [00001507] libusb: debug [darwin_event_thread_main] darwin event thread exiting
end!


=================================================================
==89874==ERROR: LeakSanitizer: detected memory leaks

Direct leak of 136 byte(s) in 1 object(s) allocated from:
    #0 0x10b195612 in wrap_calloc (libclang_rt.asan_osx_dynamic.dylib:x86_64h+0x45612)
    #1 0x7fff5d4f6ce9 in class_createInstance (libobjc.A.dylib:x86_64h+0x6ce9)
    #2 0x7fff5e0e4c11 in _os_object_alloc_realized (libdispatch.dylib:x86_64+0x1c11)
    #3 0x7fff5e0e5f25 in dispatch_source_create (libdispatch.dylib:x86_64+0x2f25)
    #4 0x7fff5e102ade in _dispatch_kq_poll (libdispatch.dylib:x86_64+0x1fade)
    #5 0x7fff5e102741 in _dispatch_kq_drain (libdispatch.dylib:x86_64+0x1f741)
    #6 0x7fff5e1022dd in _dispatch_event_loop_poke (libdispatch.dylib:x86_64+0x1f2dd)
    #7 0x7fff5e0f5f65 in _dispatch_queue_resume_finalize_activation (libdispatch.dylib:x86_64+0x12f65)
    #8 0x7fff361ae26a in __CFRunLoopFindMode (CoreFoundation:x86_64h+0x5326a)
    #9 0x7fff361adec5 in __CFRunLoopCreate (CoreFoundation:x86_64h+0x52ec5)
    #10 0x7fff361adbc1 in _CFRunLoopGet0 (CoreFoundation:x86_64h+0x52bc1)
    #11 0x10b095e00 in darwin_event_thread_main darwin_usb.c:486
    #12 0x7fff5e436660 in _pthread_body (libsystem_pthread.dylib:x86_64+0x3660)
    #13 0x7fff5e43650c in _pthread_start (libsystem_pthread.dylib:x86_64+0x350c)
    #14 0x7fff5e435bf8 in thread_start (libsystem_pthread.dylib:x86_64+0x2bf8)

Direct leak of 44 byte(s) in 1 object(s) allocated from:
    #0 0x10b19523d in wrap_malloc (libclang_rt.asan_osx_dynamic.dylib:x86_64h+0x4523d)
    #1 0x7fff5e16c8b2 in _Block_copy (libsystem_blocks.dylib:x86_64+0x8b2)
    #2 0x7fff5e0e503b in _dispatch_Block_copy (libdispatch.dylib:x86_64+0x203b)
    #3 0x7fff5e0e60d8 in dispatch_source_set_event_handler (libdispatch.dylib:x86_64+0x30d8)
    #4 0x10b194989 in wrap_dispatch_source_set_event_handler (libclang_rt.asan_osx_dynamic.dylib:x86_64h+0x44989)
    #5 0x7fff361ae23d in __CFRunLoopFindMode (CoreFoundation:x86_64h+0x5323d)
    #6 0x7fff361adec5 in __CFRunLoopCreate (CoreFoundation:x86_64h+0x52ec5)
    #7 0x7fff361adbc1 in _CFRunLoopGet0 (CoreFoundation:x86_64h+0x52bc1)
    #8 0x10b095e00 in darwin_event_thread_main darwin_usb.c:486
    #9 0x7fff5e436660 in _pthread_body (libsystem_pthread.dylib:x86_64+0x3660)
    #10 0x7fff5e43650c in _pthread_start (libsystem_pthread.dylib:x86_64+0x350c)
    #11 0x7fff5e435bf8 in thread_start (libsystem_pthread.dylib:x86_64+0x2bf8)

Indirect leak of 64 byte(s) in 1 object(s) allocated from:
    #0 0x10b195612 in wrap_calloc (libclang_rt.asan_osx_dynamic.dylib:x86_64h+0x45612)
    #1 0x7fff5e0e57ad in _dispatch_calloc (libdispatch.dylib:x86_64+0x27ad)
    #2 0x7fff5e10160c in _dispatch_unote_create (libdispatch.dylib:x86_64+0x1e60c)
    #3 0x7fff5e0e5f08 in dispatch_source_create (libdispatch.dylib:x86_64+0x2f08)
    #4 0x7fff5e102ade in _dispatch_kq_poll (libdispatch.dylib:x86_64+0x1fade)
    #5 0x7fff5e102741 in _dispatch_kq_drain (libdispatch.dylib:x86_64+0x1f741)
    #6 0x7fff5e1022dd in _dispatch_event_loop_poke (libdispatch.dylib:x86_64+0x1f2dd)
    #7 0x7fff5e0f5f65 in _dispatch_queue_resume_finalize_activation (libdispatch.dylib:x86_64+0x12f65)
    #8 0x7fff361ae26a in __CFRunLoopFindMode (CoreFoundation:x86_64h+0x5326a)
    #9 0x7fff361adec5 in __CFRunLoopCreate (CoreFoundation:x86_64h+0x52ec5)
    #10 0x7fff361adbc1 in _CFRunLoopGet0 (CoreFoundation:x86_64h+0x52bc1)
    #11 0x10b095e00 in darwin_event_thread_main darwin_usb.c:486
    #12 0x7fff5e436660 in _pthread_body (libsystem_pthread.dylib:x86_64+0x3660)
    #13 0x7fff5e43650c in _pthread_start (libsystem_pthread.dylib:x86_64+0x350c)
    #14 0x7fff5e435bf8 in thread_start (libsystem_pthread.dylib:x86_64+0x2bf8)

Indirect leak of 40 byte(s) in 1 object(s) allocated from:
    #0 0x10b19523d in wrap_malloc (libclang_rt.asan_osx_dynamic.dylib:x86_64h+0x4523d)
    #1 0x7fff5e16c8b2 in _Block_copy (libsystem_blocks.dylib:x86_64+0x8b2)
    #2 0x7fff5e16cb3d in _Block_object_assign (libsystem_blocks.dylib:x86_64+0xb3d)
    #3 0x7fff5e16c8ef in _Block_copy (libsystem_blocks.dylib:x86_64+0x8ef)
    #4 0x7fff5e0e503b in _dispatch_Block_copy (libdispatch.dylib:x86_64+0x203b)
    #5 0x7fff5e0e60d8 in dispatch_source_set_event_handler (libdispatch.dylib:x86_64+0x30d8)
    #6 0x10b194989 in wrap_dispatch_source_set_event_handler (libclang_rt.asan_osx_dynamic.dylib:x86_64h+0x44989)
    #7 0x7fff361ae23d in __CFRunLoopFindMode (CoreFoundation:x86_64h+0x5323d)
    #8 0x7fff361adec5 in __CFRunLoopCreate (CoreFoundation:x86_64h+0x52ec5)
    #9 0x7fff361adbc1 in _CFRunLoopGet0 (CoreFoundation:x86_64h+0x52bc1)
    #10 0x10b095e00 in darwin_event_thread_main darwin_usb.c:486
    #11 0x7fff5e436660 in _pthread_body (libsystem_pthread.dylib:x86_64+0x3660)
    #12 0x7fff5e43650c in _pthread_start (libsystem_pthread.dylib:x86_64+0x350c)
    #13 0x7fff5e435bf8 in thread_start (libsystem_pthread.dylib:x86_64+0x2bf8)

Indirect leak of 32 byte(s) in 1 object(s) allocated from:
    #0 0x10b19523d in wrap_malloc (libclang_rt.asan_osx_dynamic.dylib:x86_64h+0x4523d)
    #1 0x7fff5e16cbbb in _Block_object_assign (libsystem_blocks.dylib:x86_64+0xbbb)
    #2 0x7fff5e16c8ef in _Block_copy (libsystem_blocks.dylib:x86_64+0x8ef)
    #3 0x7fff5e16cb3d in _Block_object_assign (libsystem_blocks.dylib:x86_64+0xb3d)
    #4 0x7fff5e16c8ef in _Block_copy (libsystem_blocks.dylib:x86_64+0x8ef)
    #5 0x7fff5e0e503b in _dispatch_Block_copy (libdispatch.dylib:x86_64+0x203b)
    #6 0x7fff5e0e60d8 in dispatch_source_set_event_handler (libdispatch.dylib:x86_64+0x30d8)
    #7 0x10b194989 in wrap_dispatch_source_set_event_handler (libclang_rt.asan_osx_dynamic.dylib:x86_64h+0x44989)
    #8 0x7fff361ae23d in __CFRunLoopFindMode (CoreFoundation:x86_64h+0x5323d)
    #9 0x7fff361adec5 in __CFRunLoopCreate (CoreFoundation:x86_64h+0x52ec5)
    #10 0x7fff361adbc1 in _CFRunLoopGet0 (CoreFoundation:x86_64h+0x52bc1)
    #11 0x10b095e00 in darwin_event_thread_main darwin_usb.c:486
    #12 0x7fff5e436660 in _pthread_body (libsystem_pthread.dylib:x86_64+0x3660)
    #13 0x7fff5e43650c in _pthread_start (libsystem_pthread.dylib:x86_64+0x350c)
    #14 0x7fff5e435bf8 in thread_start (libsystem_pthread.dylib:x86_64+0x2bf8)

SUMMARY: AddressSanitizer: 316 byte(s) leaked in 5 allocation(s).
```
my code like this:

```
extern "C"{
#include <libusb.h>
}
#include <cstdio>
#include <cstdlib>

int main(){
    printf("start!\n");
    libusb_device **devs;
    ssize_t cnt;
    libusb_init(nullptr);
    cnt = libusb_get_device_list(nullptr, &devs);
    if (cnt < 0)
        return (int)cnt;
    libusb_free_device_list(devs, 1);
    libusb_exit(nullptr);
    printf("end!\n");
    return 0;
}

```
The compilation parameter that I am using is "-fno-omit-frame-pointer   -fsanitize=leak  -g "

Hello. My program uses your library (v1.0.18). 

Recently, I've noticed that a lot of users have problems with it. Some of usb devices don't get recognized by the program on some computers. When I started looking for a reason of errors I've found out that for devices which contain '//' symbols, a backslash is replaced by a sharp. It happens in sanitize_path function. For example, device path "\\\\?\\hid#vid_0a89&pid_0091#7&8ad5edf&0&0000#{4d1e55b2-f16f-11cf-88cb-001111000030}\\kbd" was format as "\\\\.\\HID#VID_0A89&PID_0091#7&8ad5edf&0&0000#{4d1e55b2-f16f-11cf-88cb-001111000030}#KBD" (last backslash was replaced by sharp).

I didn't find any reason for this behaviour and made a patch for my version of library. Everything works after this patch.

You can find it  here (https://github.com/lo1ol/libusb/tree/sharp_path_fixing in last commit).

Can you say if my patch is right? And if not, can you please explain the reason for this replacement. 
I replaced libusb1.0.so from 1.0.22 to 1.0.23 on my Android studio.
But libusb_get_device_list() always reports no device.
1.0.22 is OK.
linux_default_scan_devices() is not called because of compiler switch.
I think UDEV option have to be ON when compiling. 
Do you know how to turn it on?
I compile libusb1.0.so using ndk-build command on Windows10.

I have an issue with lib_usb failing to open the composite device on Windows if one of the interfaces is HID keyboard, automatically claimed by the system HID driver.
The issue is somehow system-dependent, since calling CreateFileA without generic R/W on the KBD interface succeeds on most systems.

I have a device that has these interfaces:
- [0] HID Joystick
- [1] HID (generic)
- [2] HID Keyboard
- [3] Bulk endpoint (WinUSB driver installed)

hid_open in windows_winusb.c tries to open file handles to each interface and if it fails in at least one (in my case the interface 2), the libusb_open returns the error.
Commenting the lines 3280 to 3290 results in perfectly functioning library for my device - interface 2 is claimed by the HID driver and I can claim interfaces 1 and 3 in my own application.
I am not sure whether such behavior is really necessary - the error should be thrown not before the 'locked' interface is accesssed.