All the documentation at docs.rs are broken for 0.68.0
my application every loop sleep 10ms (fixed refresh rate), add some data to a string (limited to 500 valid ascii) and put them into a Text widget.

Quite often I get the error:



```
thread 'main' panicked at 'called `Result::unwrap()` on an `Err` value: NoRoomForWholeQueue', src/libcore/result.rs:1084:5
stack backtrace:
   0:     0x560bf8d499cb - backtrace::backtrace::libunwind::trace::h89fcc71e59e3bc5b
                               at /cargo/registry/src/github.com-1ecc6299db9ec823/backtrace-0.3.34/src/backtrace/libunwind.rs:88
   1:     0x560bf8d499cb - backtrace::backtrace::trace_unsynchronized::h0bad9be1379e729a
                               at /cargo/registry/src/github.com-1ecc6299db9ec823/backtrace-0.3.34/src/backtrace/mod.rs:66
   2:     0x560bf8d499cb - std::sys_common::backtrace::_print::hd3382a1f33c473da
                               at src/libstd/sys_common/backtrace.rs:47
   3:     0x560bf8d499cb - std::sys_common::backtrace::print::h0ec6f03cfb8e76a6
                               at src/libstd/sys_common/backtrace.rs:36
   4:     0x560bf8d499cb - std::panicking::default_hook::{{closure}}::h96cbf7b454e3f557
                               at src/libstd/panicking.rs:200
   5:     0x560bf8d496a6 - std::panicking::default_hook::h95a8f00337383d83
                               at src/libstd/panicking.rs:214
   6:     0x560bf8d4a13d - std::panicking::rust_panic_with_hook::h92f98b46e22f14ed
                               at src/libstd/panicking.rs:477
   7:     0x560bf8d49cc2 - std::panicking::continue_panic_fmt::h25abfbb4e5b7043a
                               at src/libstd/panicking.rs:384
   8:     0x560bf8d49ba6 - rust_begin_unwind
                               at src/libstd/panicking.rs:311
   9:     0x560bf8d6530d - core::panicking::panic_fmt::h7e9f94035af782b3
                               at src/libcore/panicking.rs:85
  10:     0x560bf8d65407 - core::result::unwrap_failed::hf7591c1dd9412006
                               at src/libcore/result.rs:1084
  11:     0x560bf86bd97e - core::result::Result<T,E>::unwrap::hd1e53e065ce7d550
                               at /rustc/625451e376bb2e5283fc4741caa0a3e8a2ca4d54/src/libcore/result.rs:852
  12:     0x560bf86a845b - conrod_glium::Renderer::fill::he1c55c11b096ccb8
                               at /home/mauro/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_glium-0.68.0/./src/lib.rs:661
  13:     0x560bf86aeccf - cargo_term::main::h4704b93cd0c2b45d
                               at src/main.rs:187
  14:     0x560bf866e750 - std::rt::lang_start::{{closure}}::h7f3609663d0777e4
                               at /rustc/625451e376bb2e5283fc4741caa0a3e8a2ca4d54/src/libstd/rt.rs:64
  15:     0x560bf8d49b43 - std::rt::lang_start_internal::{{closure}}::h4e93c1949c7a1955
                               at src/libstd/rt.rs:49
  16:     0x560bf8d49b43 - std::panicking::try::do_call::h9440ccd4dc467eaa
                               at src/libstd/panicking.rs:296
  17:     0x560bf8d4d88a - __rust_maybe_catch_panic
                               at src/libpanic_unwind/lib.rs:80
  18:     0x560bf8d4a70d - std::panicking::try::hc046e7ee42ee744f
                               at src/libstd/panicking.rs:275
  19:     0x560bf8d4a70d - std::panic::catch_unwind::h27dfc457c200aee0
                               at src/libstd/panic.rs:394
  20:     0x560bf8d4a70d - std::rt::lang_start_internal::hea1b49a567afe309
                               at src/libstd/rt.rs:48
  21:     0x560bf866e729 - std::rt::lang_start::h84e61967cd219275
                               at /rustc/625451e376bb2e5283fc4741caa0a3e8a2ca4d54/src/libstd/rt.rs:64
  22:     0x560bf86af6aa - main
  23:     0x7fc3c8332153 - __libc_start_main
  24:     0x560bf862d1ae - _start
  25:                0x0 - <unknown>
```
Allow querying the state of redraw count. 
Fixes #1320 
Adding Rendy as a backend for Conrod.
It would be useful to allow applications to query if draw_if_changed would return Some, to allow integration with winit's request redraw function. For some applications this allows a blocking event loop rather than continuous polling more effectively.
I just realized that `conrod` had been moved to `conrod_core` after spending too much time trying to debug a compatibility issue. It would be nice if this could be avoided for future users by updating the crate docs for conrod, and perhaps with a [`compile_warning`](https://github.com/huonw/compile_msg).
It is very good for me if `conrod_glium` uses latest `glium` and `winit` in my use case.

This PR updates `glium` and `winit` to the latest version.
I've updated hello_world.rs example only but I'll update other examples if this PR is OK.
I'm trying to learn Conrod, and I though I would vist http://docs.piston.rs/ to find some examples. When I clicked to top link that said `Conrod`, it gave 404.
I am writing a book on Rust. Surveying indicates GUI related materials are the most in demand. I realize you are doing fantastic work; however, I would enjoy to be able to show more sleek looking widgets and the like. Is it possible to work with you to implement some range of basic widgets, and to help pay for the graphic design work to give a modern, professional looking set of UI elements to the Rust community, even if it is just a collection of buttons, text input boxes, and the like?

I may be able to contribute like 20 hours of coding and $500, upon double checking my financial situation, but am only going to think more about it if I know that you are likely to incorporate the skins I pay for, and to perhaps work with me toward ensuring a basic collection of widgets like check boxes, radio boxes, and the like.

Ultimately, I would like to work with you to skin all piston widgets with professional UI elements that will be provided with a very friendly license like MIT or something that we agree on, with the hope that you will make these the default widget skins; moreover, I would like to contribute some specific widgets, and to request a couple be implemented as well, and to sort of collaborate together for a brief period of time --- perhaps two weeks or so --- just toward making things a bit sleek and modern looking, and adding some additional widget functionality to try to get a baseline collection of standard GUI feature set that looks a little aesthetically pleasing and modern.

I would want to be able to demonstrate all pertinent code that I write in my commercial book, and any related code of yours that I am integrating it into; as well as to be able to use the resultant code I write and widgets I write to commercial ends (while not restricting the ability of others to do so as well); not certain your license regarding the products produced by your toolkit.
I'm trying to set the background of the list_select example to a transparent color. On lines 112 - 114 I have 
```
widget::Canvas::new()
  .color(conrod_core::color::TRANSPARENT)
  .set(ids.canvas, ui);
```
The background remains opaque, however. What is the correct way for setting the background alpha?