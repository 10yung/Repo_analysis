When the cursor is on a delimiter whose match should be highlighted, this patch limits the search to the viewport. If the matching delimiter is out of sight there's no point in highlighting it.

I found this when I had a very large binary file opened, and the cursor got stuck for a long time when i moved over a parenthesis.
Check for end-of-text.
- Fixed order of rules.
- Some “keywords” were identified as “type”, now corrected.
- Added compiler-specific common __keywords.
- Added boolean and additional integer constants.
- Added support for number suffixes.
- Removed “#if 0“ comments, because it needs some work on the else
  branch. Now it just makes things unreadable.
With Fedora 31, gcc 9.2.1, and glibc 2.30 I get this:
```
cc          -std=c99 -D_POSIX_C_SOURCE=200809L -D_XOPEN_SOURCE=700 -DNDEBUG -DVERSION=\"v0.5-62-ge136e34\" -DHAVE_MEMRCHR=0 -DVIS_PATH=\"/vis\" -DCONFIG_HELP=1 -DCONFIG_CURSES=1 -DCONFIG_LUA=1 -DCONFIG_LPEG=0 -DCONFIG_TRE=0 -DCONFIG_SELINUX=0 -DCONFIG_ACL=0  array.c buffer.c libutf.c main.c map.c sam.c text.c text-motions.c text-objects.c text-util.c ui-terminal.c view.c vis.c vis-lua.c vis-modes.c vis-motions.c vis-operators.c vis-registers.c vis-marks.c vis-prompt.c vis-text-objects.c text-regex.c          -lc -o vis
In file included from text.c:28:
util.h:28:14: error: static declaration of ‘memrchr’ follows non-static declaration
   28 | static void *memrchr(const void *m, int c, size_t n)
      |              ^~~~~~~
In file included from text.c:7:
/usr/include/string.h:114:14: note: previous declaration of ‘memrchr’ was here
  114 | extern void *memrchr (const void *__s, int __c, size_t __n)
      |              ^~~~~~~
make: *** [Makefile:61: vis] Error 1
```
## Summary:
Extracting org-mode sections skips every second one.
(Could very well be that my command is incorrect but I can't see where...)

![snapshot](https://user-images.githubusercontent.com/8690075/66882961-0416df80-f018-11e9-8581-051c2999cdd1.png)

## Command:
`x/^\*(.*\n)(^[^\*]*\n)+`

## Test data:
```
* title1
sentence

paragraph

* title2
sentence

paragraph

* title3
sentence
paragraph

p2
* title4
sen.
```
The [lua docs](http://martanne.github.io/vis/doc/#Core_Events) state that both `file_save_post` and `file_save_pre` expose `file` and `path` where `path` is the full path to the file being written. If I open vis without specifying a filename, however, and then run `:w filename`, the respective variables don't seem to be set to the correct values.

Here's a small `visrc.lua` you can use to confirm this behaviour:

```lua
require "vis"

vis.events.subscribe(vis.events.FILE_SAVE_PRE, function (file, path)
  print()
  print("FILE_SAVE_PRE file.path is:") print(file.path)
  print("FILE_SAVE_PRE path is:") print(path)
end)

vis.events.subscribe(vis.events.FILE_SAVE_POST, function (file, path)
  print()
  print("FILE_SAVE_POST file.path is:") print(file.path)
  print("FILE_SAVE_POST path is:") print(path)
end)
```

I get the following output when running `:w filename` (indentation cleaned up):

```
FILE_SAVE_PRE file.path is:  nil
FILE_SAVE_PRE path is:       filename
FILE_SAVE_POST file.path is: /tmp/filename
FILE_SAVE_POST path is:
```

If I run `:w` again afterwards, the output is as expected:

```
FILE_SAVE_PRE file.path is:  /tmp/filename
FILE_SAVE_PRE path is:       /tmp/filename
FILE_SAVE_POST file.path is: /tmp/filename
FILE_SAVE_POST path is:      /tmp/filename
```

---

```
$ vis -v
vis v0.5-62-ge136e34 +curses +lua +tre +acl
```
Currently doing `vis +$` to hit end of file results in last line being centered in the terminal window - how can I override this and draw the bottom line at the bottom of the screen?

Neither `vis +zb` nor `vis +vis-window-redraw-bottom` worked.  Ideally I'd like to avoid having to add a custom command in either `config.h` or `visrc.lua`.

Is there a `vis +action:vis-window-redraw-bottom` or similar?


My (succesful?) attempt at fixing my own issue #767 

In this issue the cursorline dissapears to late when mode switching.

Even when the vis.c draw_cursorline() (or something like that) is called
and propperly returns without drawing.

so the issue seems to be that the screen (or at least the portion what contains 
the cursor since the status bar [insert] does change to [normal] )

The PR is open for suggestions, this is my first contribution to the project and hope it is of any use, greetings o/
Hi I am trying to change my cursorline based on the mode I am in.

Since there are no mode change events in lua yet I tryed this.

```
vis.events.subscribe(vis.events.WIN_STATUS, function(win)
    if vis.mode == vis.modes.INSERT then
	vis:command('set cursorline on')
    end
    if vis.mode == vis.modes.NORMAL then
	vis:command('set cursorline off')
    end
end)
```

Unfortunately this throws two stack overflow exceptions many times upon user input.

```
vis-std.lua:83: C stack overflow
vis-std.lua:41: C stack overflow
```

Can anyone help me out to get the desired out behavior and understand the project a bit more?