Closes: https://github.com/tildeio/router.js/issues/291

It seems with Babel polyfill included `Object.isFrozen` vs `Object.isExtensible` has different meaning:

<img width="841" alt="chrome-37-original-failure" src="https://user-images.githubusercontent.com/659945/72669867-af806780-3a3f-11ea-81d1-a35a4a5b32c5.png">

This change was tested on:

* IE 10
* Chrome v27+
* Chrome latest
* IE 9 (has some other non related failure)

See screenshots below:

**IE 9:**
<img width="504" alt="ie9" src="https://user-images.githubusercontent.com/659945/72669712-fcfbd500-3a3d-11ea-9cb3-ef2267da99ad.png">

**IE 10:**
<img width="450" alt="ie10" src="https://user-images.githubusercontent.com/659945/72669714-fec59880-3a3d-11ea-8636-d0bb64e37053.png">

**Chrome v27**
<img width="789" alt="chrome-27" src="https://user-images.githubusercontent.com/659945/72669715-008f5c00-3a3e-11ea-9f56-fd0b464b6564.png">


I am hitting this error with Ember.js v3.13+:

![Screenshot 2020-01-17 at 13 29 12](https://user-images.githubusercontent.com/659945/72610854-2da21880-3931-11ea-92e9-1f93708f346d.png)

This is happening on older browsers like Android 5 with Chrome v37 etc.

My app also includes Babel polyfill.

--
Here's my `targets.js` setup:

```
'use strict';

const browsers = [
  'last 1 Chrome versions',
  'last 1 Firefox versions',
  'last 1 Safari versions'
];

const isCI = !!process.env.CI;
const isProduction = process.env.EMBER_ENV === 'production';

if (isCI || isProduction) {
  browsers.push('Android >= 4.4');
  browsers.push('iOS >= 10');
  browsers.push('ie 11');
}

module.exports = {
  browsers
};
```
```
node_modules/router_js/dist/cjs/transition.d.ts:208:78 - error TS2677: A type predicate's type must be assignable to its parameter's type.
  Type 'typeof Transition' is not assignable to type 'Dict<unknown>'.
    Index signature is missing in type 'typeof Transition'.

208 export declare function isTransition(obj: Dict<unknown> | undefined): obj is typeof Transition;
```

Discovered during the most recent Glimmer-VM upgrade in Ember: https://github.com/emberjs/ember.js/pull/18621
Seems there's still some incorrect typing need to be fixed.
Perhaps I am misunderstanding the very first step of the README, that shows the following example of 'newing' up the Router class but the Typescript definition of Router is an abstract class.  

import Router from 'router_js'

var router = new Router();
Upon upgrading to Ember 3.7.x, I found that the JavaScript console had strange messages being logged from this library, like:
```
Transition #Attempting URL transition to /myroute/123: undefined
Preparing to transition from '' to 'myroute'
0
Transitioned into 'myroute'
0
```

The 1st, 3rd, and 5th, messages all seem to stem from an incorrect check in the ``log`` function at:
https://github.com/tildeio/router.js/blob/master/lib/router/utils.ts#L74

I think ``if (arguments.length === 2)`` should be replaced with ``if (args.length === 2)``.
I'm using the new Ember 3.7 routerService to build the browser's history in js-land for the purposes of showing nav back/forward buttons (think iOS app nav buttons).

One issue I'm facing is when to detect that a `routeDidChange` was the consequence of a browser back/forward event.

This can be known if I hook into the `window.onpopstate` event, but unfortunately, this fires after `routeDidChange`.

So, I've delved into the transition object in the hope of some clue as to whether a specific transition was browser initiated rather than a usual ember routing event.

It seems that `transition.urlMethod` may be this, from my limited testing it seems that `transition.urlMethod` will be `null` when a browser back/forward action triggered the transition and I can therefore use a null value as a indication that some kind of back/forward was used.

I've searched the codebase to see whether this is a safe assumption, but it seems that none of the comments specifically identify this.

So my question is... can I safely use `transition.urlMethod` to indicate in my code that a transition was not triggered by Ember and therefore is likely a browser-triggered back/forward transition?

The README.md file says:

```
  router.getHandler = function(name) {
    return myHandlers[name];
  };
```

This doesn't seem to do anything, but having dug into the library it seems to error on `this.router.getRoute()` not being defined. Should the README.md say that `router.getRoute` needs to be set instead?

With that said, I did change my code to set getRoute, which did stop the error, but my handler is still not being called. Is there a working example anywhere that I could follow?
For the most part a `Transition` is immutable. The exception to this is query params. We should investigate a strategy where we `Transition`s are always immutable.