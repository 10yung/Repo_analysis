Readme examples are showing code that no longer builds.

```
error[E0433]: failed to resolve: could not find `builder` in `lettre`
 --> src/main.rs:3:44
  |
3 | use lettre::{SmtpClient, Transport, Email, builder::mime::TEXT_PLAIN};
  |                                            ^^^^^^^ could not find `builder` in `lettre`

error[E0432]: unresolved import `lettre::Email`
 --> src/main.rs:3:37
  |
3 | use lettre::{SmtpClient, Transport, Email, builder::mime::TEXT_PLAIN};
  |                                     ^^^^^ no `Email` in the root

error[E0425]: cannot find value `TEXT_PLAIN` in this scope
  --> src/main.rs:14:63
   |
14 |         .attachment_from_file(Path::new("Cargo.toml"), None, &TEXT_PLAIN)
   |                                                               ^^^^^^^^^^ not found in this scope

error: aborting due to 3 previous errors
```

Add async support based on https://github.com/async-email/async-smtp
**Describe the bug**

When using `FileTransport` to send to a tmp file, the contents of the email are displayed in bytes rather than plain text. This makes it difficult to easily manually verify that an email contains what you want it to contain, especially when developing.

This changed in [this commit](https://github.com/lettre/lettre/commit/f07fe8687d7bb3e9d7b87ced60ef5cf063757f0f#diff-501dc37ff125121e2d8a968da995316aL36-R37) as demonstrated by that test.

Is there a reason the email couldn't be printed as plain text in the file?

**To Reproduce**

Inspired by the test linked to above, using lettre at 3995ea2:

```rust
#[test]
fn email_file_should_contain_plain_text() {
    use lettre::{Email, EmailAddress, Envelope, FileTransport, Transport};
    use std::fs;
    use std::path::Path;

    let email = Email::new(
        Envelope::new(
            Some(EmailAddress::new("user@localhost".to_string()).unwrap()),
            vec![EmailAddress::new("root@localhost".to_string()).unwrap()],
        )
        .unwrap(),
        "id".to_string(),
        "Hello file".to_string().into_bytes(),
    );
    let mut sender = FileTransport::new(Path::new("/tmp"));
    let message_id = email.message_id().to_string();

    let result = sender.send(email);
    assert!(result.is_ok());

    let file = format!("/tmp/{}.json", message_id);
    let contents = fs::read_to_string(file).unwrap();

    assert_eq!(
        contents,
        "{\"envelope\":\
         {\"forward_path\":[\"root@localhost\"],\"reverse_path\":\"user@localhost\"},\
         \"message_id\":\"id\",\"message\":\"Hello file\"}"
    );
}
```

**Expected behavior**

I expected to be able to read the contents of the email in the file without any additional processing.

**Environment (please complete the following information):**

- Lettre version: 0.9.2, test written above is against lettre master 3995ea2
- OS: macOS
- Rust: 1.39.0 stable

**Additional context**

This makes [developing crates.io more difficult](https://github.com/rust-lang/crates.io/issues/1998).


> spin is no longer actively maintained

| Details             |                                                |
| ------------------- | ---------------------------------------------- |
| Status              | unmaintained                |
| Package             | `spin`                      |
| Version             | `0.5.2`                   |
| URL                 | [https://github.com/mvdnes/spin-rs/commit/7516c80](https://github.com/mvdnes/spin-rs/commit/7516c80) |
| Date                | 2019-11-21                         |
| Unaffected versions | `> 0.5.2`               |

The author of the `spin` crate does not have time or interest to maintain it.

Consider [`lock_api`](https://crates.io/crates/lock_api) (a subproject of
`parking_lot`) as an alternative which also supports `no_std` environments.


See [advisory page](https://rustsec.org/advisories/RUSTSEC-2019-0031.html) for additional details.

First this library is awesome and thank you for your work

from what i have seen in documentation i think this library doesn't seem async ( maybe i am wrong ) while it seems like it should be

also as async/.await syntax is close to stable it would be perfect time to make this library async

P.S: I would like to help making this transaction but i am not very good with rust
**Describe the bug**
when send() with SmtpClient, met the UTF-8 Error

**To Reproduce**
```rust
let email = Email::builder()
        .to(addr)
        .from("xxx")
        .subject("xxx")
        .body("xxx")
        .build()
        .unwrap();

    let creds = Credentials::new(
        "xxxx@xxx".to_string(),
        "123456".to_string(),
    );
    let addr = "smtp.qq.com:587";
    let connector = TlsConnector::new().unwrap();
    let tls_params = ClientTlsParameters::new("smtp.qq.com".to_string(), connector);

    let security = ClientSecurity::Required(tls_params);
    let mut mailer = SmtpClient::new(addr, security)
        .unwrap()
        .credentials(creds)
        .transport();

    // here
    match mailer.send(email.into()){
        Ok(_) => {},
        Err(e) => println!("Error! :\n{:?}", e),
    }
```

**Expected behavior**
I dont know the reason why it is like that... how can i fix it?

**Environment (please complete the following information):**
- Lettre version
- OS

**Additional context**
version 0.9.0

**Describe the bug**
The library sends lines to SMTP servers that are longer than the protocol's limit (998 bytes).

**To Reproduce**
Using an attachment that is bigger that the limit will send incorrect lines (the entire file is sent as a base64 line). Depending on the server's configuration, it may trigger an error or not. 

Attachments and the message's body should by split into correct lines.

I can try to fix this myself if its ok.


**Is your feature request related to a problem? Please describe.**
When using `Mailbox::new_with_name()` the mailbox name in the From header is inserted within quotes ("). I'm not sure if this is part of the applicable standards, but most emails that I receive do not use quotes around the name.

**Describe the solution you'd like**
It would be great if displaying the name within quotes was optional.

**Describe alternatives you've considered**
No workaround that I can see.

**Additional context**
Nothing at this point.
