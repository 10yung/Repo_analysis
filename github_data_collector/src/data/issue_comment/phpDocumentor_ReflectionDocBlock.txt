When an anonymous class is given to a context, it is unable to resolve the classes of properties in the docblock, even if they are imported.

By removing the error on the given line (phpDocumentor/ReflectionCommon#21), I was able to get it to function; however it was still not resolving the namespace of the property.

Code sample:
https://gist.github.com/iggyvolz/5061fe63090588d0f4f96874380b5ef3
I use the reflectiondockblock to extract types from properties defined on phpunit test cases. Since [PHPUnit implemented improvements](https://github.com/sebastianbergmann/phpunit/commit/5e020a146f30701c11936f06a33701313d350edf) in their type hints the type resolver fails to parse types for some properties.

`array<string,array<int,string>>` seems to be an issue in particular.

An example test failure on my side:

```
1) Zalas\PHPUnit\Doubles\Tests\TestCase\TestDoubles\Inheritance\InheritanceTest::test_it_initialises_parent_private_properties
InvalidArgumentException: "\PHPUnit\Framework\array<string,array<int,string>>" is not a valid Fqsen.

/phpunit-doubles/vendor/phpdocumentor/reflection-common/src/Fqsen.php:48
/phpunit-doubles/vendor/phpdocumentor/type-resolver/src/FqsenResolver.php:70
/phpunit-doubles/vendor/phpdocumentor/type-resolver/src/FqsenResolver.php:32
/phpunit-doubles/vendor/phpdocumentor/type-resolver/src/TypeResolver.php:264
/phpunit-doubles/vendor/phpdocumentor/type-resolver/src/TypeResolver.php:118
/phpunit-doubles/src/PhpDocumentor/ReflectionExtractor.php:87
/phpunit-doubles/src/PhpDocumentor/ReflectionExtractor.php:59
/phpunit-doubles/src/PhpDocumentor/ReflectionExtractor.php:48
/phpunit-doubles/src/PhpDocumentor/ReflectionExtractor.php:33
/phpunit-doubles/src/PhpDocumentor/ReflectionExtractor.php:34
/phpunit-doubles/src/PhpDocumentor/ReflectionExtractor.php:34
/phpunit-doubles/src/PhpDocumentor/ReflectionExtractor.php:25
/phpunit-doubles/src/TestCase/Doubler.php:69
/phpunit-doubles/src/TestCase/Doubler.php:39
/phpunit-doubles/src/TestCase/TestDoubles.php:35
```

in order to make conversion of existig Description to custom Description class easier (e.g. new MyDescriptionClass($origionalDescription->getBodyTemplate(), $origionalDescription->getTags();)
… implement custom tags which might want to allow or require this character in the tag body.

A leading square bracket might not be necessary for standard tags, but StandardTagFactory allows registering or overriding of tag implementations which might want to accept this character right after the tag.
Is this really meant to be that way:

the render method of Description allows to pass a formatter to format a the tag, but always encloses the result in braces:

```
    /**
     * Renders this description as a string where the provided formatter will format the tags in the expected string
     * format.
     */
    public function render(?Formatter $formatter = null): string
    {
        if ($formatter === null) {
            $formatter = new PassthroughFormatter();
        }

        $tags = [];
        foreach ($this->tags as $tag) {
            $tags[] = '{' . $formatter->format($tag) . '}';
        }

        return vsprintf($this->bodyTemplate, $tags);
    }
```

This would mean that some kind of re-parsing is always needed to get rid of them. Is it meant to be that way? Somehow I think it would make more sense to add the braces inside the default formatter. This way custom formatters could output whatever they want without having to deal with the braces again. 

**Edit***

I made this change:

https://github.com/phpDocumentor/ReflectionDocBlock/pull/171

By this change it's easy to override the default DescriptionFactory without having to do a copy&paste-implementation: override create in DescriptionFactory, let parent::create create a default Description and then create a custom description object using what's in the originally created. 

This way it's easy to overcome the behavior of always created {} in the standard Description output which I do not really would like to have there when I use the formatter to turn inline tags into markdown syntax. 

When a tag body starts with a "[", an exception is raised:
```
   public function create(string $tagLine, ?TypeContext $context = null): ?Tag
    {
        if (! $context) {
            $context = new TypeContext('');
        }

        [$tagName, $tagBody] = $this->extractTagParts($tagLine);

        if ($tagBody !== '' && $tagBody[0] === '[') {
            throw new \InvalidArgumentException(
                'The tag "' . $tagLine . '" does not seem to be wellformed, please check it for errors'
            );
        }

        return $this->createTag($tagBody, $tagName, $context);
    }
```

Is there a reason for that?

We try to use some kind of markdown syntax in our project and the parser failes on a tag like "@see [xxx](yyy)"

Is there a description somewhere where to hook in to do some pre-processing? In the new version many things are declared final and it looks quite difficult to extend (or I just have not found the right place to hook in). 


@method line fails to come back from parseTagBlock in DocBlockFactory
```
/**
  * togglecheckboxitem
  *
  * Toggle checkbox item
  * @method togglecheckboxitem
  */
 ```

However this doc block works (minus the **m** at the end of the method name)
```
/**
  * togglecheckboxitem
  *
  * Toggle checkbox item
  * @method togglecheckboxite
  */
 ```

Im still debugging what comes from the call below
```
//DocBlockFactory:231
$result[$key] = $this->tagFactory->create(trim($tagLine), $context);
```
as the $tagLine goes in but **null** is returned. If you have any ideas in the mean time that would be great. I am using the latest release.

Thanks


When parsing a docblock generated by https://github.com/barryvdh/laravel-ide-helper , I recently noticed how arguments would always get the type Void_  . When rebuilding the docblock, suddenly you have `void $foo` everywhere. I'll try to get some more insight in what's happening and a clear reproducable case, but this report is to let you know in case I don't get around to it anymore.

------
` * @method static \Foo\Bar baz(array $context = array())`  , will get this:
```
51 => Method {#1625 ▼
      #name: "method"
      -methodName: "category"
      -arguments: array:1 [▼
        0 => array:2 [▼
          "name" => "context"
          "type" => Void_ {#1624}
        ]
      ]
      -isStatic: true
      -returnType: Compound {#1629 ▶}
      #description: Description {#1626 ▶}
    }
```

edit:

Think this is the problem (from quick glance), at least when NO type hint is provided:
https://github.com/phpDocumentor/ReflectionDocBlock/blob/master/src/DocBlock/Tags/Method.php#L141

It would *not* explain the problem with `array $context = array()` like above.
When parsing multiple classes defined in a group, only the first class keeps the fully qualified namespace.

```php
use My\Namespace\{Foo, Bar};
```

Will result in `My\Namespace\Foo` and `Bar`
I am using this package in the open PHP language server, which provides static analysis for any IDE through the open language server protocol. One of these features is "Go to Definition". This is currently implemented for the actual PHP code through nikic's great PHPParser, where every node has a file start/end offset so I can calculate which node the user clicked. It would be nice to have this feature for types in docblock tags like `@var` too, but the tags don't have any start/end offset data. Would it be possible to add this?