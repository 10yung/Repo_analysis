If there is a stash, the stash symbol for the git-radar display overlaps the first character of my command. Here's an example where I've typed `OOO` into the command line, you can see how it overlaps the first `O`.

![image](https://user-images.githubusercontent.com/2403521/45275173-ce9cdb80-b480-11e8-948b-2c28bc039e60.png)

My `PS1` line in .bashrc is: 

    PS1="$PS1\$(git-radar --bash --fetch)"

If I add a trailing space to `PS1` like:

    PS1="$PS1\$(git-radar --bash --fetch) "

but then in any non-git repos there are two spaces after the the `$` in my prompt which I find annoying.
typing `ls` when inside a git repo

```./test-radar-base.sh: 3: ./test-radar-base.sh: source: not found
test_show_remote_status
./test-radar-base.sh: 6: eval: show_remote_status: not found
ASSERT:
./test-radar-base.sh: 9: eval: show_remote_status: not found
ASSERT:
./test-radar-base.sh: 12: eval: show_remote_status: not found
ASSERT:
./test-radar-base.sh: 15: eval: show_remote_status: not found
./test-radar-base.sh: 18: eval: show_remote_status: not found
./test-radar-base.sh: 21: eval: show_remote_status: not found
./test-radar-base.sh: 24: eval: show_remote_status: not found

Ran 1 test.

FAILED (failures=3)
./test-directories.sh: 3: ./test-directories.sh: source: not found
test_git_root_in_repo
./test-directories.sh: 20: eval: git_root: not found
ASSERT:expected:</tmp/.git-radar> but was:<>
test_git_root_not_in_repo
./test-directories.sh: 8: eval: time_now: not found
./test-directories.sh: 26: eval: git_root: not found
test_dot_git_location_not_in_repo
./test-directories.sh: 8: eval: time_now: not found
./test-directories.sh: 33: eval: dot_git: not found
```

When inside a non git repo

``` ls                                                                                                                                 05:21:45  
/tmp/.git-radar/test: 3: /tmp/.git-radar/test: ./test-radar-base.sh: not found
/tmp/.git-radar/test: 4: /tmp/.git-radar/test: ./test-directories.sh: not found
/tmp/.git-radar/test: 5: /tmp/.git-radar/test: ./test-commits.sh: not found
/tmp/.git-radar/test: 6: /tmp/.git-radar/test: ./test-branches.sh: not found
/tmp/.git-radar/test: 7: /tmp/.git-radar/test: ./test-files.sh: not found
/tmp/.git-radar/test: 8: /tmp/.git-radar/test: ./test-status.sh: not found
/tmp/.git-radar/test: 9: /tmp/.git-radar/test: ./test-stash.sh: not found
/tmp/.git-radar/test: 10: /tmp/.git-radar/test: ./test-colors.sh: not found
/tmp/.git-radar/test: 11: /tmp/.git-radar/test: ./test-format-config.sh: not found
config-err-Yagkx2  Discord Crashes  git-prompt-tests-new  git-prompt-tests-remote  ssh-WwKuXpcjm3IE  Temp-f28e30e8-1c49-4897-bcac-4965d9886fe0
```

This adds a `--tmux` option allowing for `git-radar` to be used in a tmux status prompt.
In a repository with a .git folder that is ~30MB big, it's takes around ~6 seconds to run `git-radar --bash` which is too slow, especially when constantly opening new terminal sessions. Is there any way to speed up the command or is this a limitation that can't can't be optimized? Thanks.
This is a somewhat odd message and I cannot really get the ins and outs of why this is happening:

```
me@laptop:~.*⟫ mkdir radar-test/
me@laptop:~.*⟫ cd radar-test/
me@laptop:~/radar-test.*⟫ touch Makefile
me@laptop:~/radar-test.*⟫ Makefile
bash: /home/me/code/forks/git-radar/Makefile: Permission denied
126 me@laptop:~/radar-test.*⟫ ls -ld /home/me/code/forks/git-radar/Makefile
-rw-rw-r-- 1 me me 1030 jun 14  2016 /home/me/code/forks/git-radar/Makefile
me@laptop:~.*⟫ 
```

Notice that I don't prefix the Makefile with `./Makefile`, and of course the Makefile is not executable (no exec bit and no shebang), not the Makefile in the test directory, and neither the Makefile in git-radar.
#112 

I needed to make this change in order for git-radar to look normal using fish
Perhaps it is because I am new to fish (as in, I just started trying to use it about a half hour ago), but I can't seem to get git-radar to work with it...

I added this line to my fish_prompt.fish file:

```fish
echo -n (git-radar --fish --fetch)
```

and I get this:

![image](https://cloud.githubusercontent.com/assets/5404143/24637385/9b88e6ae-1895-11e7-885b-367f70056131.png)

Everything looks as it should except for git-radar (and the fact that I don't actually want a full path listed in my prompt, but I will ignore that for now until I figure out how to shorten it in fish).

Not sure what has gone wrong here.

I came across "typechanged" the other day in my git status. It occurs when (for example) you change a file from being a regular file, to a symlink.

Not sure if you want this in. I am using "TC" in the terminal to show this.

I would also like a check on the grep's in the lines that I added. I understand that everything inside of the square brackets can be matched, but I am unsure what letters I would also need with this.
Now, you can add a prefix and/or suffix to your git-radar prompt that
will only show if you are in a git repo.

Note: The PROMPT_FORMAT line was changed to remove the leading space in
the string. With it in, if you define a prefix a space will still be
there even if the user may not want it. So it can be overridden by the
user with one of the new variables, but by default, the prefix still
adds that space anyways.
I have a strange issue with the _not upstream_ indicator. For some reason it's taking up more space than it should and is shifting the rest of the characters in the line across.

![image](https://cloud.githubusercontent.com/assets/897369/23378168/2a83283e-fd7e-11e6-8b14-d7f18dd152b7.png)

It doesn't look that bad in the screenshot, but it actually causes issues occasionally where the cursor will be offset with the character it's modifying, which is confusing and annoying. If I manage to trigger it again, I'll update this issue with a screenshot...

I'm running git-radar _master_ branch (2ac25e3) in bash on Ubuntu 16.06 with `export PS1="$PS1\$(git-radar --bash --fetch)"`. (Need any other info?)