In order to prevent AWS employees from using the non-existent IAM privilege `s3:HeadBucket`, that string could be viewed as a secret, which maybe would cause an alert every time someone tries to use that in the AWS docs. For example, this doc just appeared: https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_evaluation-logic-cross-account.html

That privilege does not exist. AWS should stop mentioning it in their docs.

The text pattern could be added at https://github.com/awslabs/git-secrets/blob/8450ad79fdb31fb685cd38a1bb8a62b3788a9858/git-secrets#L238
This is a feature request that includes similar issues such as #131.

In addition to solving the lack of case insensitive regex, allowing Perl Compatible Regex (PCRE) also adds more features, e.g. negative lookahead and single or multi line mode. 
PCRE features can be consulted [here](https://perldoc.perl.org/perlre.html#Modifiers).

I'll submit a PR to address this.
Greetings git-secrets developers and contributors,

We’re reaching out because your project is an important part of the open source ecosystem, and we’d like to invite you to integrate with our [fuzzing](https://www.owasp.org/index.php/Fuzzing) service, [OSS-Fuzz]( https://opensource.googleblog.com/2016/12/announcing-oss-fuzz-continuous-fuzzing.html ). OSS-Fuzz is a free fuzzing infrastructure you can use to identify security vulnerabilities and stability bugs in your project. OSS-Fuzz will:

- Continuously run at scale all the fuzzers you write.
- Alert you when it finds issues.
- Automatically close issues after they’ve been fixed by a commit.

Many widely used [open source projects]( https://github.com/google/oss-fuzz/tree/master/projects ) like OpenSSL, FFmpeg, LibreOffice, and ImageMagick are fuzzing via OSS-Fuzz, which helps them find and remediate [critical issues]( https://bugs.chromium.org/p/oss-fuzz/issues/list?can=1&q=status%3AFixed%2CVerified+Type%3ABug%2CBug-Security+-component%3AInfra+ ). 

Even though typical integrations can be done in < 100 LoC, we have a [reward program]( https://www.google.com/about/appsecurity/patch-rewards/ ) in place which aims to recognize folks who are not just contributing to open source, but are also working hard to make it more secure.

We want to stress that anyone who meets the eligibility criteria and integrates a project with OSS-Fuzz is eligible for a reward.

If you're not interested in integrating with OSS-Fuzz, it would be helpful for us to understand why—lack of interest, lack of time, or something else—so we can better support projects like yours in the future.

If we’ve missed your question in our [FAQ]( https://google.github.io/oss-fuzz/faq/ ), feel free to reply or reach out to us at oss-fuzz-outreach@googlegroups.com.


Thanks!

Tommy
OSS-Fuzz Team

Hi,

As is required, I would like to inform you that I'm in the process of packaging git-secrets for Fedora. The spec file and Bugzilla URL can be found in [this](https://github.com/AquaL1te/git-secrets/tree/master) temporary git repo.
What are the differences with [git secret](https://git-secret.io/) ?

See https://github.com/sobolevn/git-secret/issues/562
Hi!

Please, consider add git-secrets to Chocolatey.

https://chocolatey.org/courses/creating-chocolatey-packages

Thank you.
So I recently added a SECRET to our repo by accident. To prevent this from happening in the future I found this repo. I installed it and I tested it but it doesn't seem to work at all.

The password I committed is in the `README.md` and was formed as follows:

    export OURCOMPANYNAME_OBJECTSTORE_PASSWORD=16_character_random_string

I tried using the following commands from the root of the repo (the `README.md` is also in the root dir of the repo):
```
$ git secrets --scan -r
$ git secrets --scan README.md
$ git secrets --scan --scan-history
$ git secrets --scan --scan-history -r
$ git secrets --scan --scan-history -r .
$ git secrets --scan README.md
$ git secrets --scan -r .
$ git secrets --scan -r ./*
```
All these tries gave no output at all. The string even includes the word `PASSWORD` in there so I presumed that would be the simplest thing to find. 

Am I doing something wrong? Am I misunderstanding what this project should be doing? Or is this some kind of extremely rare exception that it can't find it?

All tips are welcome!
**Problem:**
    On Windows 10, when run the command "git commit -m <some message>", git-secrets will throw an error message: "git-secrets: line 255: [: too many arguments"
**Reproduce:** 
1.      Create new account with username have a space (ex: this is my account).
2.      Install git-secrets to that account (please refer the READ.ME of this repository  for more details)
3.      The error message will be shown anytime we run git commit

*Description of changes:*
Allow users to customize the failure message via git configuration option `secrets.failureMessage`.

By submitting this pull request, I confirm that my contribution is made under the terms of the Apache 2.0 license.
Would be nice to document a good way to test out expressions before adding

I've been using [ripgrep](https://github.com/BurntSushi/ripgrep) to test

```
$ rg 'password\s+=\s*".*"$'
```

then adding

```
$ git secrets --add 'password\s+=\s*".*"$'
```