Hey @noahlz! 

Is there any work or plans to upgrade to support newer versions of Mongo? Based on [compatibility charts](https://docs.mongodb.com/ecosystem/drivers/driver-compatibility-reference/#casbah-compatibility), believe Casbah only goes up to 3.4. Has anyone gotten Salat working with 3.6+ or is there plans to move to https://github.com/mongodb/mongo-scala-driver?

Thanks for maintaining over the years!

I have a case class
`case class A(a: Int, b: Int)`

I m seeing sometimes that the resulting serialized value is 
`{a:1,b:1}` and sometimes `{b:1,a:1}`

Does salat provide any guarantees as to the order of serialization in a case class? Can this be done?
`Grater.scala` has multiple calls to `sys.error` that place unnecessary cognitive load on users debugging errors. For example

```
java.lang.RuntimeException: class com.app.Foo requires value for 'someField'
    at scala.sys.package$.error(package.scala:27)
    at com.novus.salat.DefaultArg.safeValue$lzycompute(Grater.scala:477)
    at com.novus.salat.DefaultArg.safeValue(Grater.scala:473)
    at com.novus.salat.ConcreteGrater.safeDefault(Grater.scala:428)
    at com.novus.salat.ConcreteGrater$$anonfun$8$$anonfun$apply$5.apply(Grater.scala:380)
    at com.novus.salat.ConcreteGrater$$anonfun$8$$anonfun$apply$5.apply(Grater.scala:380)
    at scala.Option.orElse(Option.scala:257)
    at com.novus.salat.ConcreteGrater$$anonfun$8.apply(Grater.scala:380)
    at com.novus.salat.ConcreteGrater$$anonfun$8.apply(Grater.scala:363)
    at scala.collection.TraversableLike$$anonfun$map$1.apply(TraversableLike.scala:244)
    at scala.collection.TraversableLike$$anonfun$map$1.apply(TraversableLike.scala:244)
    at scala.collection.immutable.List.foreach(List.scala:318)
    at scala.collection.TraversableLike$class.map(TraversableLike.scala:244)
    at scala.collection.AbstractTraversable.map(Traversable.scala:105)
    at com.novus.salat.ConcreteGrater.fromJSON(Grater.scala:363)
    at com.novus.salat.json.FromJValue$$anonfun$1.apply(ToJValue.scala:201)
    at com.novus.salat.json.FromJValue$$anonfun$1.apply(ToJValue.scala:149)
    at scala.Option.map(Option.scala:145)
    at com.novus.salat.json.FromJValue$.apply(ToJValue.scala:149)
    at com.novus.salat.ConcreteGrater$$anonfun$8.apply(Grater.scala:368)
    at com.novus.salat.ConcreteGrater$$anonfun$8.apply(Grater.scala:363)
    at scala.collection.TraversableLike$$anonfun$map$1.apply(TraversableLike.scala:244)
    at scala.collection.TraversableLike$$anonfun$map$1.apply(TraversableLike.scala:244)
    at scala.collection.immutable.List.foreach(List.scala:318)
    at scala.collection.TraversableLike$class.map(TraversableLike.scala:244)
    at scala.collection.AbstractTraversable.map(Traversable.scala:105)
    at com.novus.salat.ConcreteGrater.fromJSON(Grater.scala:363)
    at com.novus.salat.Grater.fromJSON(Grater.scala:74)
```

could be `salat.SalatDeserializationException: class com.app.Foo requires value for 'someField'`

`case class SalatDeserializationException(msg: String) extends RuntimeException(msg)`

Perhaps have more specific sub-classes such as `SalatMissingFieldValueException(msg: String)` etc.

See the following pending test:

https://github.com/salat/salat/blob/f4ff8fb5d7173dc57b3e04c1d7d8d9f06ceba444/salat-core/src/test/scala/com/novus/salat/test/json/JsonSpec.scala#L304

``` scala
    "fail fast when coercing Double -> In in a conversion that would lose precision - for Map and List fields" in {
      grater[Ulrich].fromJSON("{\"i\":9, \"oi\":9, \"mi\": {\"x\":9.001}, \"list\":[1] }") must throwAn[IncompatibleTargetFieldType]

      grater[Ulrich].fromJSON("{\"i\":9, \"oi\":9, \"mi\": {\"x\":9}, \"list\":[1.001] }") must throwAn[IncompatibleTargetFieldType]

      grater[Ulrich].fromJSON(JObject(JField("i", JDouble(9)) :: JField("oi", JDouble(9)) :: JField("mi", JObject(JField("x", JDouble(9.001)) :: Nil)) :: JField("list", JArray(JInt(9) :: Nil)) :: Nil)) must throwAn[IncompatibleTargetFieldType]

      grater[Ulrich].fromJSON(JObject(JField("i", JDouble(9)) :: JField("oi", JDouble(9)) :: JField("mi", JObject(JField("x", JDouble(9)) :: Nil)) :: JField("list", JArray(JDouble(9.001) :: Nil)) :: Nil)) must throwAn[IncompatibleTargetFieldType]
    }.pendingUntilFixed("SKIPPED: Maps and List contents get narrowed with information loss. Issue #148")
```

I fixed this in #178 for `Option` fields, but not Maps and Collections (JArrays). 

Upgrading from sbt 0.13.12 has a particular obstacle: Salat uses the [Scalariform](https://github.com/sbt/sbt-scalariform) plugin, and its current version would also have to change with the sbt upgrade. This also requires editing the project build.

Per the Scalariform Plugin README, some configuration that goes the sbt build file changed with their later versions.

Steps:
- Update sbt version in `project/build.properties`
- Update `project/plugins.sbt` to use a later version of Scalariform that is compatible with sbt 0.3.12.
- Edit `project/SalatBuild.scala` so that the project loads and builds successfully.
- Other as yet unknown steps?!?!

This is a good opportunity for someone to contribute to an open source project without having to know much about the actual project - just update the sbt version and make it build!

NOTE: Please open the PR against the `1.10.x-branch`

sbt test, while mongod is running and mongod will show >200 connections from the test suite. It seems to be using up one connection per test and not recycling.

My rlimit is defaulted to 256 so the test suite dies when it can no longer connect to Mongo.

This is to resolve issue https://github.com/salat/salat/issues/135

I haven't convinced myself this is the very best solution (I.e. Seq[Byte] <-> BSON Binary) but this is surely better than what is there currently where it goes
Seq[Byte] -> Array[Int] -> Seq[Int].asInstanceOf[Seq[Byte]]
and we die of type erasure runtime confusion

I am running into this with serializing a case class correct, when that class is contained in another case class.

Concrete example

Class definitions:

``` scala
@Salat abstract class DescClass(name: String)
case object ExampleDesc extends DescClas("An Example Desc")

@Salat abstract class TestExample(val desc: DescClass, val numberOfMonths: Option[Int])
case class TestExample2(numMonth: Int)
  extends TestExample(desc = ExampleDesc, numberOfMonths = Option(numMonth)) 


case class ContainerClass(
  instId: Int,
  name: String,
  distinctCount: Int,
  sourceCount: Int,
  previousRunDate: DateTime = DateTime.now,
  exampleClass: TestExample,
  startDate: Option[DateTime] = None,
  endDate: Option[DateTime] = None,
  recoverMode: Boolean = false)


// correctly serializes and deserialize this class

// Step1 : create an instance
scala> val pp = TestExample2(2)
pp: com.novus.analytics.model.test.TestExample2 = TestExample2(2)

// Step2 : Serialize this instance
scala> val dbo1 = grater[TestExample].asDBObject(pp)
DEB [20150829-17:51:11.209] [in-0] c.n.a.g.NovusContext$ neverSuppressThisField[NovusContext]: never suppress field with key 'filterId'
dbo1: com.mongodb.casbah.Imports.DBObject = { "t" : <Binary Data> , "numMonth" : 2}

// Step 3: Deserialize it
scala> val prt1_* = grater[RefreshType].asObject(dbo1)
prt1_*: com.novus.analytics.model.test.TestExample2 = TestExample2(2)

// completed successfully

// Now create the Container class and serialize that to demonstrate  failure.

// Create an instance of the Container class
scala> val seed = ContainerTestClass(11, "Test", 20, 20, DateTime.now, Example2(2))
seed: com.novus.analytics.model.test.ContainerTestClass = ContainerTestClass(11,Test,20,20,2015-08-29T17:51:24.831-04:00,Example2(2),None,None,false)

// serialize it - notice the missing numMonth param
scala> val dbo2 = grater[RefreshResultSeed].asDBObject(seed)
dbo2: com.mongodb.casbah.Imports.DBObject = { "institutionId" : 158386 , "name" : "Test" , "distinctCount" : 20 , "sourceCount" : 20 , "previousRunDate" : { "$date" : "2015-08-29T21:51:24.831Z"} , "exampleClass" : { "t" : <Binary Data>}}

// try to deserialize this - fails with 

com.novus.salat.util.ToObjectGlitch:

  argument type mismatch
```

I'm using my custom `TypeHintStrategy` implementation with overridden `encode` and `decode` methods. It works fine in  BSON serialization. but JSON doesn't seem to supports any custom type hint strategy excepts `StringTypeHintStrategy`.

From `ToJField` class:

```
val field = ctx.typeHintStrategy match {
    case s: StringTypeHintStrategy => JString(clazz.getName)
    case x                         => sys.error("typeHint: unsupported type hint strategy '%s'".format(x))
}
```

I would appreciate the support for custom type hint strategies in JSON.

Thanks.

Courtesy of https://github.com/dwhjames/datomisca/blob/master/build.sbt

```
scalacOptions in ThisBuild ++= Seq(
    "-deprecation",
    "-encoding", "UTF-8",
    "-feature",
    "-unchecked",
    "-Xfatal-warnings",
    "-Xfuture",
    "-Xlint",
    "-Yno-adapted-args",
    "-Ywarn-dead-code",
    "-Ywarn-numeric-widen",
    "-Ywarn-value-discard"
  )

scalacOptions in ThisBuild ++= (
    if (scalaVersion.value.startsWith("2.10")) Nil
    else List("-Ywarn-unused-import")
  )
```
