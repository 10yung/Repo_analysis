Valgrind reports that `m_Sql` and `m_pixperdb` are used before initialization during Gqrx startup. The `m_Sql` value is read prior to initialization if Gqrx is started without `[receiver] sql_level` set in default.conf, and the `m_pixperdb` value is read prior to initialization if a `sql_level` value is present in default.conf.

I've fixed both errors by setting initial values in the `CMeter` constructor.
From time to time, I run into a bug where the FFT / panadapter does not display. This appears to be the same issue described in #383. I also frequently see participants run into this bug during Capture The Flag competitions involving SDR problems. So far I've been working around the bug by deleting `.config/gqrx/default.conf`.

I dug into this to see what the problem was, and found that the issue can be reliably produced by setting the FFT averaging to 50 in `.config/gqrx/default.conf`:

```
[fft]
averaging=50
```

If the value is different from 50, the problem does not occur. 50 happens to be the default value of the averaging slider:

https://github.com/csete/gqrx/blob/4e6cfd1b7d41d83da97cd88faea4e75d5d4f88f7/src/qtgui/dockfft.ui#L369-L377

The bug occurs because `MainWindow::setIqFftAvg` is the only thing that sets `d_fftAvg`:

https://github.com/csete/gqrx/blob/4e6cfd1b7d41d83da97cd88faea4e75d5d4f88f7/src/applications/gqrx/mainwindow.cpp#L1631-L1635

And the only thing that calls `MainWindow::setIqFftAvg` is `DockFft::on_fftAvgSlider_valueChanged`:

https://github.com/csete/gqrx/blob/4e6cfd1b7d41d83da97cd88faea4e75d5d4f88f7/src/qtgui/dockfft.cpp#L425-L430

So if Gqrx starts up without the value of the slider being changed then `d_fftAvg` is left uninitialized, resulting in undefined behaviour. Valgrind reports hundreds of thousands of warnings in this case, because the following line of code uses the uninitialized `d_fftAvg`:

https://github.com/csete/gqrx/blob/4e6cfd1b7d41d83da97cd88faea4e75d5d4f88f7/src/applications/gqrx/mainwindow.cpp#L1287

To fix the problem, I've set a default value of 0.25 for `d_fftAvg`, which corresponds to the default slider value of 75, which is defined here:

https://github.com/csete/gqrx/blob/4e6cfd1b7d41d83da97cd88faea4e75d5d4f88f7/src/qtgui/dockfft.cpp#L36

In addition, i set the default value of the slider in `dockfft.ui` to match `DEFAULT_FFT_AVG` so that the slider is always updated when the config file has a non-default value.
Since macOS 10.15 banned the 32bit application, Gqrx could not work.
Could you please build the application for macOS 10.15 using 64bit?
A really useful addition to the remote control:
1. Set/Reset waterfall retention time span
2. Export waterfall
3. Reset waterfall.

For such a feature to be *really* nice, some other waterfall-export fixes would be needed:
- image full quality (0.1 sec resolution) even for multi-hours export. For a 1.5 Mhz bandwidth @32k fft, that would be ~1 GB, but it's client responsibility to export & flush before an OOM.
- more precise X graduations (and actually reaching the right border).
- avoid Y time label overlapping on the waterfall.
Hi,
I'm in the process to debug and develop an application based on gqrx source file as a benchmark using qt5 development ide.

I'm already success compile all the dependencies required for gqrx. I'm also successfully compile gqrx application using qt5 ide without any error.

But the problem is when I run gqrx in the debug mode, the system throw segmentation fault with the message:     Program received signal SIGSEGV, Segmentation fault.

Below are my GDB traces:

GNU gdb (Ubuntu 7.7.1-0ubuntu5~14.04.3) 7.7.1
Copyright (C) 2014 Free Software Foundation, Inc.
License GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.  Type "show copying"
and "show warranty" for details.
This GDB was configured as "x86_64-linux-gnu".
Type "show configuration" for configuration details.
For bug reporting instructions, please see:
<http://www.gnu.org/software/gdb/bugs/>.
Find the GDB manual and other documentation resources online at:
<http://www.gnu.org/software/gdb/documentation/>.
For help, type "help".
Type "apropos word" to search for commands related to "word"...
Reading symbols from gqrx...done.
(gdb) r
Starting program: /home/mylinux/MyWorks/sourceCode/gqrx/build-gqrx-Desktop_Qt_5_3_0_GCC_64bit-Debug/gqrx 
[Thread debugging using libthread_db enabled]
Using host libthread_db library "/lib/x86_64-linux-gnu/libthread_db.so.1".

Program received signal SIGSEGV, Segmentation fault.
0x00007ffff3ca6cd0 in std::locale::locale(std::locale const&) () from /usr/lib/x86_64-linux-gnu/libstdc++.so.6
(gdb) bt
#0  0x00007ffff3ca6cd0 in std::locale::locale(std::locale const&) () from /usr/lib/x86_64-linux-gnu/libstdc++.so.6
#1  0x00007ffff2371228 in boost::filesystem::path::imbue(std::locale const&) () from /usr/lib/x86_64-linux-gnu/libboost_filesystem.so.1.55.0
#2  0x00007ffff23712d1 in boost::filesystem::path::codecvt() () from /usr/lib/x86_64-linux-gnu/libboost_filesystem.so.1.55.0
#3  0x00007ffff607d9c1 in gr::prefs::_sys_prefs_filenames() () from /usr/local/lib/libgnuradio-runtime-3.7.10.so.0.0.0
#4  0x00007ffff607df54 in gr::prefs::prefs() () from /usr/local/lib/libgnuradio-runtime-3.7.10.so.0.0.0
#5  0x00007ffff607e0d4 in gr::prefs::singleton() () from /usr/local/lib/libgnuradio-runtime-3.7.10.so.0.0.0
#6  0x00007ffff0e48b0a in ?? () from /usr/lib/x86_64-linux-gnu/libgnuradio-blocks.so.3.7.10
#7  0x00007ffff7dea1da in call_init (l=<optimized out>, argc=argc@entry=1, argv=argv@entry=0x7fffffffe3e8, env=env@entry=0x7fffffffe3f8) at dl-init.c:78
#8  0x00007ffff7dea2c3 in call_init (env=<optimized out>, argv=<optimized out>, argc=<optimized out>, l=<optimized out>) at dl-init.c:36
#9  _dl_init (main_map=0x7ffff7ffe1c8, argc=1, argv=0x7fffffffe3e8, env=0x7fffffffe3f8) at dl-init.c:126
#10 0x00007ffff7ddb29a in _dl_start_user () from /lib64/ld-linux-x86-64.so.2
#11 0x0000000000000001 in ?? ()
#12 0x00007fffffffe686 in ?? ()
#13 0x0000000000000000 in ?? ()
(gdb) 

What is really the cause of this problem? For your information I'm using gnuradio version 3.7.10 and I'm compile it from source. For gr-osmosdr I'm using the latest pull from github and I'm also compile it from source. 
Hello there!

I've spent my night trying to configure an rtl_tcp server on my Raspberry Pi 4, and I heard that GQRX could connect to an rtl_tcp server just fine and listen to it from there, but, unfortunately, whenever I attempt to start GQRX, it refuses unless I have my device connected to it, which ultimately defeats the purpose of the rtl_tcp server.

Here's the log whenever I try to start GQRX on my PC:
`gr-osmosdr v0.1.4-134-gf3905d35 (0.1.5git) gnuradio 3.8.0.0
built-in source types: rtl uhd hackrf bladerf rfspace airspy soapy redpitaya 
[INFO] [UHD] linux; GNU C++ version 9.1.0; Boost_107100; UHD_3.14.1.0-0-unknown
terminate called after throwing an instance of 'std::runtime_error'
  what():  No supported devices found (check the connection and/or udev rules).
Aborted (core dumped)`

The AppImage version of Gqrx crashes with `This application failed to start because it could not find or load the Qt platform plugin "xcb".` error printed on stdout.

This was already reported before as #667, but got closed afterwards. However the issue is still present.

By the way, Gqrx also needs _libnsl.so.1_ that is not bundled in the AppImage. It would be great if the Gqrx AppImage had all the needed libraries included so it would work out-of-box on most big distributions without the need to install any packages.

I am using fully updated Fedora 30 Workstation with default set of packages.
Ok, so I’m running into an issue trying to get gqrx running properly. I asked on the pi forums first but they couldn’t find a solution for me so I’ll try here next. I’ll copy/paste the description I gave there.

“I’ve been running into an error with my new raspberry pi 4.

I’m trying to use gqrx, I installed it via the add/remove software option since attempting too directly from the website the old way always gave me far more errors than this one ever since buster released.

So i get it installed, and it seemed like it worked at first...problem was there was no audio, I tried to switch to the analog function since I’m trying to run it through a Bluetooth speaker via its auxiliary/headphone jack, problem with that is as soon as i check the analog option it gets stuck at 2% volume, and soon as i try to raise the volume it immediately disables the analog AND hdmi options so neither is checked.

After this I just straight up reinstalled raspbian to see if maybe something some how got corrupted in the install(has happened before and figured no big deal since I didn’t have anything else on the pi) soon as I did this I’d get the pulseaudio error mentioned in the title and gqrx won’t start at all.

I then attempted something I read online about the error about completely uninstalling and reinstalling pulseaudio through terminal, and after doing that it went right back to the other issue where the analog and hdmi would get stuck at 2% volume and any attempts at increasing it would disable them.


When the issue with the volume being stuck on 2% happens, gqrx “technically” runs, as in its picking up signals can change frequencies etc, and I’m sure if i just recorded and saved a session and played it back as a file it’d probably work (haven’t tested this yet of course), but when I get the pulseaudio error it just stops the program from even starting.”



I’ve already attempted both recommendations from two posters there, neither recommendation helped, one had me install Pavucontrol, but it still wouldn’t let me increase the volume on either the 3.5mm jack or hdmi, disabling them once again as soon as I attempted to increase it. The other had me do a fresh install of pulseaudio and then attempt puIseaudio -D which didn’t do anything. also attempted to install gqrx the “old way” by navigating directly to the website, downloading the files, going through the readme text and copying udev rules to the gqrx folder etc., that brings its own slew of issues however since it was setup for rasbian stretch or older and not buster, it just completely terminates itself soon as it’s started.

Also forgive me for the dumb question since I’m still new to the pi and linux systems, but is there a way to install gqrx without pulseaudio attached to it? Since the analog/hdmi volume works fine when gqrx and pulseaudio aren’t installed.
Right now, rx_fft_c throws samples as they come into the circular buffer even if no FFT is requested. This affects the performance a bit, noticeable especially at high sample rates.
I have modified the code to do the following:

- Don't use a circular buffer and do no work if FFT points are not requested by other threads.
- Skip one memory copy operation by throwing incoming samples directly on the FFT inbuf
- Calculate power spectrum using Volk optimized routines
- Shift the FFT points in rx_fft_c (but not on the GR thread).

This has the effect of lowering the CPU time spent in these calculations (highest effect on higher sample rates). It requires linking directly agains libvolk, but GNU radio already links it. Sorry, don't have the time to do a pull request, but feel free to use the code from here if it suits you: https://github.com/kantooon/qradiolink/blob/next/gr/rx_fft.cpp
https://ai.googleblog.com/2019/08/turbo-improved-rainbow-colormap-for.html

Inspired by something @devnulling said on twitter a while ago, this patch adds an implementation of "Turbo, An Improved Rainbow Colormap for Visualization"

![turbo](https://user-images.githubusercontent.com/1131751/64916204-28884f00-d72e-11e9-94d3-4ab95d737f25.png)