I am having a $resource defined as factory like below,

product-svc.js
=========

(function() {
	'use strict';
	angular.module('module-name').factory('factory-name', factoryImplementation);
	factoryImplementation.$inject = ['$resource'];

	/* @ngInject */
	function factoryImplementation($resource) {
		return $resource('', {}, {
			getProducts : {
				method : 'GET',
				url : 'http://locahost:8080/product',
				params : {}
			},
			getProductById : {
				method : 'GET',
				url : 'http://locahost:8080/product/:id',
				params : {}
			}		
		});
	}
})();


I just replaced $resource with $cachedResource.  It is not working.

Can you help how can I do this?



Fix for https://github.com/goodeggs/angular-cached-resource/issues/94
Hi Everybody,

I receive such errors from my error tracking system for users with iOS. Unfortunately, I can't reproduce this, but I think, that this case should be handled.

Stacktrace:
```
TypeError: null is not an object (evaluating 'cacheKey.indexOf')
File app.min.js line 18 col 23065 in _cacheKeyHasPrefix
File app.min.js line 18 col 22298 in clear
File app.min.js line 18 col 19365 in $clearCache
```
As per the angular-cached-resource, it is storing array list of object into each array item as object.

But want to store full response in localstorage as array.

Is there any flag or solution possible for this?

LocalForage is a wrap that support too indexdb, websql and others with same localstorage api. 
This makes the HTTP headers accessible when doing a query request (reading an array) in a .headers attribute in the response.
I'm trying to handle login timeouts (and idling) by prompting an unlock screen overlaid to the page that's shown through an HttpInterceptor on 401 requests
I've also queued the failed requests to send them again manually since your plugin doesn't do that for GET but I must've missed something cause the resent request doesn't seem to trigger the plugin to update the data/promise/whatever I've linked to it... how can I handle this?

I really like the approach of "Reading from the server, and also from the cache"  

> The first time this module downloads (or saves) any resource, it will cache a copy of that resource in your browser. That means that the next time you try and load the resource, the $promise will immediately resolve (and, in the code snippet above, you'll see the alert with the title of the post right away). This should provide you with a nice speed boost.
> 
> The module will, however, still make a request against the server endpoint. When it receives a response, it will update the cache entry with the new values, and it will also update the value of otherPost in place. It will also trigger a $digest, so that angular can update its views if there are any that use that data. Magic! (Finally, if you need to listen specifically for the completed HTTP request, you can use the $httpPromise on the resource object instead of the regular $promise object.)

We have build several Angular apps where we grouped all interactions with REST points in "services" and we use the basic $http.get() to get data with promises.

It's not so simple to switch to the "resource" way of working to be able to plug your "angular-cached-resource" in.

Have you come across similar angular plugins that support this "Reading from the server, and also from the cache" approach but then for the basic $http?

Or is there a way that we can implement your logic in our services without converting them all to the Resource method?

Hi,

Thanks forr the library. I played a few with him and I saw that the library returns first the data from the cache and refresh then the data in the cache.

Can you have the inverse behaviour? Return the data from the server, and if there isn't no connections, return in fallback the data in the cache ? 
