While trying to understand why my project pulled in
`google.golang.org/appengine/cloudsql` indirectly, I noticed that it's pulled in
through this library's dependency on `github.com/go-sql-driver/mysql`.

``` shell
$ go mod why -m google.golang.org/appengine
# google.golang.org/appengine
github.com/mpolden/zdns/sql
github.com/jmoiron/sqlx
github.com/jmoiron/sqlx.test
github.com/go-sql-driver/mysql
google.golang.org/appengine/cloudsql
```

However, I then noticed that a newer version of the dependency removes
`google.golang.org/appengine/cloudsql` as it's obsolete: https://github.com/go-sql-driver/mysql/pull/1007.
You must add the ability to filter by the deleted_at field 
http://gorm.io/docs/delete.html#Soft-Delete
Hi 
When using NamedQuery with structs if the struct filed not annotated with db tag the response is
"could not find name"
my opinion is to use filed name in this case of db tag not avilable
` http: panic serving 10.255.13.175:52450: runtime error: invalid memory address or nil pointer dereference
goroutine 106 [running]:
net/http.(*conn).serve.func1(0xc00021ed20)
        /usr/local/go/src/net/http/server.go:1767 +0x139
panic(0x83a400, 0xc217d0)
        /usr/local/go/src/runtime/panic.go:679 +0x1b2
github.com/tokopedia/risk-automation/test_dashboard/api.Handler.InsertTestSuite(0xc000091110, 0x959fa0, 0xc0002288c0, 0xc000224c00)
        /home/nakama/go/src/github.com/tokopedia/risk-automation/test_dashboard/api/api.go:81 +0x4d5
net/http.HandlerFunc.ServeHTTP(0xc000021260, 0x959fa0, 0xc0002288c0, 0xc000224c00)
        /usr/local/go/src/net/http/server.go:2007 +0x44
github.com/gorilla/mux.(*Router).ServeHTTP(0xc0000ee000, 0x959fa0, 0xc0002288c0, 0xc000224a00)
        /home/nakama/ht3/hammertime/src/github.com/gorilla/mux/mux.go:210 +0xe2
net/http.serverHandler.ServeHTTP(0xc00012a1c0, 0x959fa0, 0xc0002288c0, 0xc000224a00)
        /usr/local/go/src/net/http/server.go:2802 +0xa4
net/http.(*conn).serve(0xc00021ed20, 0x95aca0, 0xc000200cc0)
        /usr/local/go/src/net/http/server.go:1890 +0x875
created by net/http.(*Server).Serve
        /usr/local/go/src/net/http/server.go:2928 +0x384`




Hi i encounter this issue  when using prepare  statement like below:
`sqldb := h.DB

		tx, _ := sqldb.Beginx()
		stmt, err := tx.Prepare("INSERT INTO te_risk_test_execution (test_suite_name, service, status, create_time, xray_key, environment) VALUES($1,$2, '0', now(), 'simulation aja', $3) returning execution_id")
		if err != nil {
			fmt.Println(err)
			errMessage := ErrorMessage{Message: "internal server error"}
			json.NewEncoder(w).Encode(errMessage)
			return
		}

		defer stmt.Close()

		var testinsert = TestSuiteStatus{Service: params["service"], Environment: testSuite.Environment}
		err = stmt.QueryRow(testSuite.TestSuite, testSuite.Service, testSuite.Environment).Scan(&testinsert.ID)
		if err != nil {
			log.Fatal(err)
		}

		tx.Commit()

		json.NewEncoder(w).Encode(testinsert)`




any idea why this  happen ?
small fix for godror support after goracle package name changed while goracle is deprecated because of naming (trademark) issues.
Project [goracle ](https://github.com/go-goracle/goracle) is deprecated because of naming (trademark) issues and now it has name `godror`. But sqlx not supports it for rebind and not changes `?` placeholder to `named` params. 




Add SCRAM-SHA-256 authentication to the pq library

See https://github.com/lib/pq/pull/833
In the course of attempting to address #577, before abandoning that (see [my comment there](/jmoiron/sqlx/issues/577#issuecomment-562151902)), I added tests to ensure #285 is working properly.
To ignore comments, understand Unicode, and have fewer false positives.

This doesn't meet the original contract at the moment. The original expected any colon to be doubled up to be escaped. The double-colon (`::` -> `:`) wasn't strictly necessary but seemed to be as a result of not properly parsing string literals and comments.

It's probably worth maintaining backward compatibility but having to double-colon could trip up someone new to the package.

There's also likely more cases of how string literals can be defined based on the driver. This implementation understands Postgres.

Related issues:
https://github.com/jmoiron/sqlx/issues/394
https://github.com/jmoiron/sqlx/issues/368
https://github.com/jmoiron/sqlx/issues/304
https://github.com/jmoiron/sqlx/issues/302
https://github.com/jmoiron/sqlx/issues/206
https://github.com/jmoiron/sqlx/issues/166

This one can be done fairly easily too:
https://github.com/jmoiron/sqlx/issues/350

first off, coming from `database/sql`, I am really enjoying the benefits leveraged by using `sqlx`. thank you, the team and contributors, for all the work you put into this library.

I've especially enjoyed the fact that this library can mostly be dropped in and used side-by-side with existing `database/sql` code. that being said, it seems I've run into a bit of a snag.

it appears that Postgres arrays won't properly scan into my structs.

Using this as a example struct definition closely representing my scenario:

``` go
type Person struct {
    Name      string   `db:"name"`
    Languages []string `db:"languages"`
}
```

Using this as an example table definition closely representing my scenario:

``` pgsql
CREATE TABLE "person" (
    "name"      text   NOT NULL,
    "languages" text[] NOT NULL,
);
```

Using this example `Select` call closely representing my scenario:

``` go
people := []Person{}
if err := tx.Select(&people, `SELECT * FROM "person"`); err != nil {
    return err
}
```

I receive this error:

```
sql: Scan error on column index 9, name "languages": unsupported Scan, storing driver.Value type []uint8 into type *[]string
```

changing the struct definition to use `pq.StringArray` does solve the issue:

``` go
type Person struct {
    Name      string         `db:"name"`
    Languages pq.StringArray `db:"languages"`
}
```

but forces a dependency on the rest of my code to rely on `pq` which I don't find ideal.

normally in `database/sql`-land, you would just wrap the binding struct field with `pq.Array(...)` and the helper function would be responsible for converting to and from the type but in this case I have no way of using that helper function. or do I?

I'm not sure if this is a bug or by design. if it's by design, is there any advice you could impart to make this easier to manage?

any advice would be appreciated.

thanks in advance.