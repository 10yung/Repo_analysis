Since issue [CLI equivalent for fs-extra #184](https://github.com/jprichardson/node-fs-extra/issues/184), it doesn't seem the situation has changed...

So as my first attempt to create an actual project of CLI with npm: [@atao60/fse-cli](https://www.npmjs.com/package/@atao60/fse-cli).

I'll try in the next days to add more tests and more functionalities of fs-extra. Already existings: copy, ensureDir, remove, emptyDir, ensureFile, move.

I'd be pleased to receive any of yours comments.


@types does not seem to be handling returned promises.

In VS Code the following information is provided(fs.exists as an example):
```
function exists(path: PathLike, callback: (exists: boolean) => void): void
namespace exists
Expected 2 arguments, but got 1
```

- **Operating System: Windows 10**
- **Node.js version: 12.1.0**
- **`fs-extra` version: 8.1.0**

Hi, 

Function `readDirFiles` may due to some race return object `srcFiles` with different structures. In particular, if property `sub` (an object) comes before `a` (string), function `filter` fails to remove `a` as it returns after the recursive call. This case makes the test flaky. 

Error:
```
      Uncaught AssertionError [ERR_ASSERTION]: Input A expected to strictly deep-equal input B:
+ expected - actual ... Lines skipped

  {
-   a: 'Hello world\n',
    b: 'Hello ncp\n',
...
    }
  }
      + expected - actual

       {
      -  "a": "Hello world\n"
         "b": "Hello ncp\n"
         "c": ""
         "d": ""
         "e": ""
      
      at readDirFiles (lib/copy/__tests__/ncp/ncp.test.js:58:20)

```
<!-- First ensure you installed the latest version of fs-extra -->
<!-- If your bug still exists please fill out the following information if it applies to your issue: -->
- **Operating System:** Windows, and online REPLs
- **Node.js version:** `12.13.0`
- **`fs-extra` version:** `8.1.0`

First reported within https://github.com/facebook/create-react-app/issues/7892 - `moveSync` errors thrown when the destination already exist do not have `EEXISTS` as a `code` property, causing defensive try catches (in that thread) to fall through

I [isolated this behavior](https://github.com/facebook/create-react-app/issues/7892#issuecomment-557137738) outside of CRA, and I think it serves as a proper reduced test case to discuss further.

‚úîÔ∏è  [fs-extra@7.0.1 `moveSync` behavior with error.code](https://repl.it/repls/DopeyMarvelousSynergy)
‚ùå  [fs-extra@8.1.0 `moveSync` behavior without error.code](https://repl.it/repls/LimitedImmaterialDefinitions)
üö®DO NOT MERGE until https://github.com/jprichardson/node-jsonfile/pull/125 is merged. To make this all work, I had to propagate the same pattern to the `jsonfile` library, so this PR won't work unless you check out that PR and `npm link` it (instructions below)

Fixes #274.

We wanted to use the well-beloved `fs-extra` API in build systems that use a virtual FS under the hood for streaming and pluggability. This might include Webpack, Gulp, or other cool things we might use in the future. The nice thing about using `fs-extra` is that it already has a well-thought-out, well-maintained, and useful API.

However, you can't attach it to a different filesystem object without doing some dangerous monkeypatching.

This PR makes only small logic changes, though they look like large code changes. Instead of the individual module files creating methods based on the `graceful-fs` module directly, they return factory functions which receive an `fs` object to use.

#### Example of the change
(Highly simplified version of `ensureFile` for illustration purposes)

**Before:**
```js
const fs = require('graceful-fs')

module.exports = function createFile(file, callback) {
  fs.writeFile(file, '', callback)
}
```

**After:**
```js
module.exports = function createFileFactory(fs) {
  return function createFile(file, callback) {
    fs.writeFile(file, '', callback)
  }
}
```

This pattern is spread across the codebase so that the `fs` object can be injected from the top down.

This may cause concerns about performance of the constructor. This PR includes memoization of the method factories, based on the reference identity of the `fs` object being pushed in. This means that while you can create many `FsExtra` objects using the exact same filesystem, the methods themselves will be declared and constructed only once.

All tests pass on all supported OSes. The one area of concern is `utimes`, which uses `os.tmpdir()` to briefly test file timestamps. In a virtual filesystem, `os.tmpdir()` might not exist, so the test methods simply return false here, which is probably safest--virtual filesystems are not guaranteed to do timestamping right.

#### Verification

1. Pull and check out this branch and run `npm install`
2. In a sibling directory, clone the `node-jsonfile` dependency:

   ```sh
   git clone https://github.com/zetlen/node-jsonfile.git && \
   cd node-jsonfile && \
   git checkout zetlen/fs-injection && \
   npm install && \
   npm link
   ```

3. Complete the link in your `node-fs-extra` directory:

   ```sh
   npm link jsonfile
   ```

4. Run test suites and user acceptance experiments

Remember that until https://github.com/jprichardson/node-jsonfile/pull/125 is merged and released, you'll need to do that procedure after every reinstall of the node modules!
<!-- First ensure you installed the latest version of fs-extra -->
<!-- If your bug still exists please fill out the following information if it applies to your issue: -->
- **Operating System:** macOS
- **Node.js version:** v12.12.0
- **`fs-extra` version:** 8.1.0

```js
fs.copySync(newImagePath, oldImagePath, {preserveTimestamps: true});
console.log(fs.statSync(newImagePath).mtimeMs); // 1573110917678
console.log(fs.statSync(oldImagePath).mtimeMs); // 1573110917677.5437
```

Comparing `mtime` produces false results, which can be a problem. 

This is my use case.  
And I do not expect the default behavior.



To add another case where it'd be nice to support this: I use a glob to find a bunch of files in different directories, and I'd like to copy them all to the same directory.  So I've got something like:

```js
// Not really hardcoded, but returned from a glob query
const input = [
    'absolute/path/to/some/file.img',
    'absolute/path/to/some/other/file.img',
    'absolute/path/to/somewhere/else.img'
];
```

What I'd like to do is:

```js
input.map(path => fs.copy(filePath, 'ouputDir'))
```

But instead I've got to do:

```js
input.map(path => fs.copy(filePath, path.join('outputDir', path.basename(filePath))
```

It's not a showstopper, but I find the first hypothetical snippet a lot more readable.

_Originally posted by @Retsam in https://github.com/jprichardson/node-fs-extra/issues/323#issuecomment-424500664_
<!-- First ensure you installed the latest version of fs-extra -->
<!-- If your bug still exists please fill out the following information if it applies to your issue: -->
- **Operating System:**
Windows 10 Pro 64 bit
- **Node.js version:**
v10.16.0
- **`fs-extra` version:**
v8.1.0

If i use copy or copySync to copy the Documents Folder on Windows i get the following Error:
```
RROR Error: Uncaught (in promise): Error: EPERM: operation not permitted, symlink 'C:\Users\daniel.ehrhardt\Pictures' -> 'C:\temp\Eigene Bilder'
Error: EPERM: operation not permitted, symlink 'C:\Users\daniel.ehrhardt\Pictures' -> 'C:\temp\Eigene Bilder'
```

My User is a AD User. 
My Command:
`copySync('C:\\Users\\daniel.ehrhardt\\Documents', 'C:\\temp');`

I do not Understand why, the folder Pictures is not in the Documents Folder.
We may depreciate Node version >=6 <7 for using async functions more free. 
chmodr is a library I feel similarly to ncp, mkdirp, etc. I feel like it has a place in this package.