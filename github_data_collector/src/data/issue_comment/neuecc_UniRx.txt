I've created an extension method for the legacy Animation clips when you hit Play. Under the hood it creates an AniamtionEvent at the end of the AnimationClip.

Do you think this is useful to create a pull request?

What are your thoughts?

Example code:

```
  animation
            .PlayAsObservable("Anim01")
            .SelectMany(_ => animation.PlayAsObservable("Anim02"))
            .SelectMany(_ => animation.PlayAsObservable("Anim03"))
            .SelectMany(_ => animation.PlayAsObservable("Anim04"))
            .Subscribe();
```


![demo_playasobservable mov](https://user-images.githubusercontent.com/4130008/71673914-bd07d300-2d58-11ea-9f04-8a8d3e98ccb5.gif)

Some time ago I suggested creating a place where the UniRx community could focus. Now I decided to do it myself. I hope it will be a community that is dying a little.
I am not a specialist in UniRx, but I will try to help with using it and I hope that there will be more people wanting to help new users.
https://www.reddit.com/r/UniRxCommunity/new/
Fix typo.
fix https://github.com/neuecc/UniRx/issues/441
example:
```cs
        private IEnumerator Work1() {
            yield return null;
            yield return Work2();
        }

        private IEnumerator Work2() {
            yield return null;
            throw new Exception();
        }

        void Test() {
            Debug.LogError("test begin.");
            Observable.FromCoroutine(Work1).Subscribe(
                _ => { }, 
                err => { Debug.LogError("work1 error!"); }, 
                () => {Debug.LogError("work1 complete!");}
            );
            Observable.FromCoroutine(Work2).Subscribe(
                _ => { }, 
                err => { Debug.LogError("work2 error!"); }, 
                () => {Debug.LogError("work2 complete!");}
            );
        }
```

when invoke Test(), the output would be:
```
test begin.
work2 error!
Exception: Exception of type 'System.Exception' was thrown.
```
the expected output should be:
```
test begin.
work2 error!
work1 error!
```
The observable below will not emit anything when the space bar is pressed.
`Observable.EveryUpdate().Where(_ => Input.GetKeyDown(KeyCode.Space))`

Meanwhile using an Input.GetKey() predicate does capture the key being held down as expected.

Input.anyKeyDown predicate captures mouse events, but again fails to capture keyboard key presses.

Any idea what's going on here?

this fixes #350 .

Merging operators (Merge, Switch, and SelectMany) doesn't dispose parent subscription when inner subscription calls OnError, and this causes some odd behaviours.
- this is different from other combining operators (Zip, CombineLatest for instance)
- this may send `InvalidOperationException: Disposable is already set` in some conditions
- appending a operator (even AsObservable() ) changes the result

This change let they behave same as other operators.
(for example https://github.com/neuecc/UniRx/blob/master/Assets/Plugins/UniRx/Scripts/Operators/Zip.cs#L135-L141 )
`ObserveOn(Scheduler.Immediate)` causes an infinite loop.

```cs
// Sample

var subject = new Subject<int>();

var observable = subject.ObserveOn(Scheduler.Immediate);

observable
    .Where(x => x == 0)
    .Subscribe(_ => subject.OnNext(1));

subject.OnNext(0); // !

subject.OnCompleted();
```

`ObserveOn` has `LinkedListNode<SchedulableAction>`, and push `SchedulableAction` to it.
But `ProcessNext()` take only first value. 
Therefore, the same `SchedulableAction` is executed many times, and never stop.
I wonder if I could get a better callstack/stacktrace to detect where the change did happen.
It goes since MainThreadDispatcher, but I want to know the place where a transform had been really changed 

```
  at System.Environment.get_StackTrace () [0x00000] in <d7ac571ca2d04b2f981d0d886fa067cf>:0 

  at Tengio.TransformDebugger+<>c.<GatherDataAndRunLogger>b__3_2 (UnityEngine.Vector3 x) [0x00001] in C:\Users\kiril\Documents\canvas-creator\Assets\Scripts\App\TransformDebugger.cs:109 

  at UniRx.Operators.DoObservable`1+Do[T].OnNext (T value) [0x00002] in C:\Users\kiril\Documents\canvas-creator\Assets\Plugins\UniRx\Scripts\Operators\Do.cs:49 

  at UniRx.Operators.FromMicroCoroutineObservable`1+FromMicroCoroutine[T].OnNext (T value) [0x00002] in C:\Users\kiril\Documents\canvas-creator\Assets\Plugins\UniRx\Scripts\UnityEngineBridge\Operators\FromCoroutine.cs:119 

  at UniRx.ObserveExtensions+<PublishUnityObjectValueChanged>d__5`2[TSource,TProperty].MoveNext () [0x00290] in C:\Users\kiril\Documents\canvas-creator\Assets\Plugins\UniRx\Scripts\UnityEngineBridge\ObserveExtensions.cs:245 

  at UniRx.InternalUtil.MicroCoroutine.Run () [0x00067] in C:\Users\kiril\Documents\canvas-creator\Assets\Plugins\UniRx\Scripts\InternalUtil\MicroCoroutine.cs:70 

  at UniRx.MainThreadDispatcher+<RunUpdateMicroCoroutine>d__32.MoveNext () [0x0003a] in C:\Users\kiril\Documents\canvas-creator\Assets\Plugins\UniRx\Scripts\UnityEngineBridge\MainThreadDispatcher.cs:535 

  at UnityEngine.SetupCoroutine.InvokeMoveNext (System.Collections.IEnumerator enumerator, System.IntPtr returnValueAddress) [0x00028] in C:\buildslave\unity\build\Runtime\Export\Coroutines.cs:17
``` 
```
tran.ObserveEveryValueChanged(x =>
        {
            switch (property)
            {
                case DebugTransformAttributeProperties.position:
                    return x.position;
                case DebugTransformAttributeProperties.localPosition:
                    return x.localPosition;
                default:
                    throw new ArgumentOutOfRangeException();
            }
        }).Do(x =>
        {
            Debug.Log(Environment.StackTrace);
        })
        .TakeUntilDestroy(this)
        .Subscribe(x =>
        {
            string trace = Environment.StackTrace;
            string message = $"{tran.name}.{property} -> {x}";
            Debug.Log($"{message}\n{trace}");
        });
```
Here is my code:
using UnityEngine;
using System.Threading.Tasks;
using UniRx.Async;


public class Test : MonoBehaviour
{
	private Task task = Task.CompletedTask;
	private UniTask uniTask = UniTask.CompletedTask;


	private async void Start()
	{
		await (task = Task.Delay(1000));
		print("task.IsCompleted= " + task.IsCompleted);


		await (uniTask = UniTask.Delay(1000));
		print("uniTask.IsCompleted= " + uniTask.IsCompleted);
	}
}

In the output console: "task.IsCompleted= True"
"uniTask.IsCompeleted= False"
