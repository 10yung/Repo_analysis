### Dotliquid version
2.0.314
### Expected behavior
I can't create a tag with params
 for example data:"%d" ->date is tag and %d parametr 
### Dotliquid version

### Expected behavior

### Actual behavior

### Steps to reproduce the Problem (you can add files)
### Dotliquid version
2.0.254

### Expected behavior
Following code

{%- assign rate = 0.733675715 -%}
{{ rate }}
Expected: 0.733675715

### Actual behavior
Results in: 0.7336757

### Steps to reproduce the Problem (you can add files)

[https://stackoverflow.com/questions/58615060/displaying-numeric-values-with-9-decimal-points-in-liquid-templates-using-dotliq/58632095#58632095](https://stackoverflow.com/questions/58615060/displaying-numeric-values-with-9-decimal-points-in-liquid-templates-using-dotliq/58632095#58632095)

Pull request to fix exists at [https://github.com/dotliquid/dotliquid/pull/353](https://github.com/dotliquid/dotliquid/pull/353)
This is a WIP PR that is **not really intended to be merged**, but I am creating it for discussion. (Hence it is created as a draft.)

It is a significant breaking change that changes the file system and rendering operations to be async-by-default.

I would like to create some side-by-side benchmarking to understand the perf impact of these changes in various scenarios.
I found an issue when trying to render a `double`.

Steps to reproduce:
```
{% assign double = 1.1234567891234 %}
{{ double }}
```

**Expected**
`1.1234567891234`

**Actual**
`1.123457`

I've added a test to the PR and checked other tests. The change doesn't seem to be that big, but please let me know if should add something to the PR.
Does dotliquid have any introspection/metadata statistics on the template?

Example, to prevent users from creating many loops or if statements, does dotliquid have the ability to tell me how many loops/if statements a given template has?

The goal is the prevent spam or malicious templates from taking too much CPU time.
I would like to refer to this comment [https://github.com/dotliquid/dotliquid/issues/258#issuecomment-542934693](url)

Which, in short, says that there is no way to retrieve errors when template is set as "Thread Safe".

I believe, what should happen, simply, need the following overload for `Template.Render`:

```
public TemplateRenderResult Render(. . . . . )
```
Where result has, as minimum `Status`, `Output`, `Errors`. This way, template will be perfectly thread safe and will return result with values, rather than I have to obtain these values from template itself.
### Dotliquid version
2.0.314.0

### Expected behavior
```cs
public class ExpandoModel
{
    public int IntProp { get; set; }
    public string StrProp { get; set; }
    public ExpandoObject Props { get; set; }
}
private static void RunUsingExpando()
{
    const string templateString = @"Int: '{{IntProp}}'; String: '{{StrProp}}'; Expando: '{{Props.Key1}}'";
    Template.NamingConvention = new CSharpNamingConvention();
    Template.RegisterSafeType(typeof(ExpandoModel), new[] { "IntProp", "StrProp", "Props" });
    var t = Template.Parse(templateString);
    var model = new ExpandoModel()
    {
        IntProp = 23,
        StrProp = "from string prop",
        Props = new ExpandoObject()
    };
    var dic = (IDictionary<string, object>)model.Props;
    dic.Add("Key1", "from expando prop");

    string output = t.Render(Hash.FromAnonymousObject(model));
    Console.WriteLine("RunUsingExpando --> " + output);
}
```

**Expected Output:**
>Int: '23'; String: 'from string prop'; Expando: 'from expando prop'

### Actual behavior
**Actual Output:**
>Int: '23'; String: 'from string prop'; Expando: ''

### Observations
If I replace 
```public ExpandoObject Props { get; set; }```
with 
```public Dictionary<string, object> Props { get; set; }``` <-- this works
**Dotliquid version** 
dll v2.0.3.314.0; nuget package v2.0.314 

**Expected behavior** 
Code
```c#
var templTxt = "{{ExtendedProps.Key2|Currency}}"

var model = new CompositeModel()
{
    ExtendedProps = new Dictionary<string, object>() { { "Key2", 22.33 } } 
};
Hash hash = Hash.FromAnonymousObject(model);
var rendParams = new RenderParameters(CultureInfo.GetCultureInfo("fr-Fr"))
{
    LocalVariables = hash,
    ErrorsOutputMode = ErrorsOutputMode.Suppress
};
string output = templ.Render(rendParams);`
```

When I run the code, I expect output like below, because I set culture info for the entire job
>29/8/2019 18:17:04 22.33 €

Instead I get
>8/29/2019 6:17:04 PM $22.33

And yes, without filter I get it rendered correctly but not in specific format.
It seems that culture info should be propagated to filters. I know that I can set filter as `{{ExtendedProps.Key2|Currency:"fr-Fr"}}` but this is not super good. Because the real issue is that I want to write custom filters and have culture info available for them. Can custom filter become `IContextAware`? Thanks
… that overwrite the indexer to get their values.

With the current implementation of the `RespondTo` and `Send` methods in `DotLiquid.Util.ObjectExtensionMethods`, if you have a `Drop` derived class that overrides the indexer in `DropBase` so that it can return arbitrary properties (such as those defined in the Front-Matter of a file), the current methods aren't able to deal with them. **This prevents being able to sort using those arbitrary properties with the sort filter**.

Fortunately, the solution is pretty straight forward: just 2 and 6 lines of code respectively, as you can see in the PR.

In the following block, below, I've pasted a simple console program that you can use to test how this works with the original code and with the fixed one. It tries to sort bu name or length the Markdown files inside a folder. In a real situation the fields would be taken from the Front-Matter.

Hope you can accept the PR, generate a new version and update the NuGet package. 

Thanks for your great work on this library!!

-----
**Sample code below**:

```csharp
using System;
using System.Linq;
using System.IO;
using DotLiquid;

namespace TestSort
{
    class Program
    {
        static void Main(string[] args)
        {
            DirectoryInfo di = new DirectoryInfo(@"C:\TestFiles\");
            var allFiles = (from file in di.EnumerateFiles("*.md", SearchOption.TopDirectoryOnly)
                            select new MarkdownFile(file.Name, file.Length)
                           );
            Template parser = Template.Parse(@"
{% assign sorted = allFiles | sort: 'length' %}
{% for file in sorted %}
- {{file.Name}}
{% endfor %}");
            Hash context = new Hash(allFiles);
            string res = parser.Render(context);
            Console.WriteLine(res);
            Console.ReadLine();
        }
    }

    //A sample Drop overriding the indexer from the base class
    public class MarkdownFile : Drop
    {
        private string fullName;
        private long length;

        public MarkdownFile(string fullName, long length)
        {
            this.fullName = fullName;
            this.length = length;
        }

        public override object this[object fieldName]
        {
            get
            {
                //Tries to return a real property form the object if present
                object res = base[fieldName];
                if (res == null)
                {
                    switch (fieldName.ToString().ToLowerInvariant())
                    {
                        case "name":
                            res = fullName.ToLowerInvariant();
                            break;
                        case "length":
                            res = length;
                            break;
                        default:
                            res = "";
                            break;
                    }
                }

                return res;
            }
        }
    }
}
```