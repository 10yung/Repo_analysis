This PR builds on the work in #6428, but extends it to update the documentation and actually include `/usr/local` by default as the "extra" configuration directory.

Closes #5029.
## Description

What would be the best practice for (optional) arguments like `--host=[USER@]HOST` or `--raw[=payload|packet]`?

## TODOs:
<!-- Just check off what what we know been done so far. We can help you with this stuff. -->
- [ ] Changes to fish usage are reflected in user documentation/manpages.
- [ ] Tests have been added for regressions fixed
- [x] User-visible changes noted in CHANGELOG.md

As asked for by @ridiculousfish in #5696:

We should have a nicer, custom, doc theme.
Let's figure out what the fish history file format should be. There's some discussion in #3341 and also [here](https://news.ycombinator.com/item?id=20732197).

The goal is to settle on a fish history format, and then eventually re-use the format to persist configuration data, like universal variables and abbreviations. The user is never expected to look at or edit these files manually. But they may choose to.

## State of the world

fish history is currently a broken psuedo-YAML. Mea culpa: I added this about 8 years ago, without thinking hard enough. It is ad-hoc, underspecified and buggy (#6032). This complicates adding new fields while maintaining backwards compatibility, and it prevents the format from being successfully parsed by any other libraries.

The goal here is to settle on a widely-recognized, fully-specified format.

## Desirable Properties for fish

These are my opinions only and are totally fair game for discussion.

- **Textual**. Shells are built on text, which rules out binary formats like SQLite or protobuf. It should be obvious to the user how the history file is stored.


- **Self Describing**. fish history should be a sequence of key-value pairs, not a positional list, so that new fields may be added in the future. This rules out formats like CSV or zsh's [extended history](https://unix.stackexchange.com/questions/416309/what-does-extended-history-in-zsh-do).


- **Not Ad-Hoc**. The new history format should be a real and commonly understood format, not something that we just make up.


- **Trivial Appending**. The file must not require "closing." fish's normal history-saving is O\_APPEND writes with best-effort file locking. This rules out formats like XML (`</xml>`) or JSON (`}`) that require explicit closing.

- **Streamable Searching**. fish should be able to search the history without decoding the entire history file into memory. A SAX-style parser would satisfy this; so also is easily-identifiable record boundaries.

## Candidates

I know of two plausible options: JSON Lines and TOML. I don't have a strong opinion between them - I keep going back and forth, and am open to alternatives. IMO YAML is out because of the complexity of the spec, and to avoid ambiguity with the existing format.

### JSON Lines

[JSON Lines](http://jsonlines.org), also known as JSON Object Streams, is simply newline-delimited JSON objects. Of course JSON is ubiquitous, but newline-delimited JSON objects is itself a fairly common serialization format - it [is understood by `jq`](http://jsonlines.org/examples/), which is the JSON Swiss Army knife. `jq` can slice and dice, filter, query, etc.

fish history in JSON lines might look like:
  
    {"cmd":"git branch -D tmp_fchown","when":1457678810}
    {"cmd":"git checkout pr/2809","when":1457678814}
    {"cmd":"cat ~/file.txt","when":1457678820}
    {"cmd":"git diff src/fallback.h","paths":["src/fallback.h"],"when":1460230565}

__Advantages__

- Ubiquitous, including support in `jq`.
- Good library support for both reading and writing. This PR uses [SimpleJSON](https://github.com/nbsdx/SimpleJSON).
- Trivial record separators (just newlines) allows efficient streaming reads.

__Disadvantages__

- Ugly.
- Bad for human editing. If we used this to persist configuration data, like universal variables and abbreviations, they will be harder to edit by hand.

### TOML

[TOML](https://github.com/toml-lang/toml) is a configuration file format aimed at human-editability. It supports appending via the "list of tables" syntax. Here we might use its support for real dates: 

    [[item]]
    cmd = "git branch -D tmp_fchown"
    when = 2019-05-27T05:32:00
    
    [[item]]
    cmd = "git branch -D tmp_fchown"
    when = 2017-06-2T11:16:05
    
    [[item]]
    cmd = "git diff src/fallback.h"
    when = 2020-05-15T1:2:4
    paths = ["src/fallback.h"]

__Advantages__

- Visually nice
- Excellent for configuration due to its human editability support.

__Disadvantages__

- Existing libraries are not ideal for fish's use case:
    - We'll need some hacks to detect record boundaries.
    - Generating TOML is not a priority for most libraries, we might have to write our own.

## What Other Shells Do

AFAICT fish would be the only shell doing this:

- PowerShell stores commands as naive newline-delimited, with no metadata.

- ksh stores the commands with two nul bytes as delimiters. There is no metadata.

- zsh has a fixed list of [positional fields](http://zsh.sourceforge.net/Doc/Release/Options.html#History).

- elvish uses a binary database called [bolt](https://github.com/boltdb/bolt).


## Compatibility

The new format will be incompatible with the old format. For that reason, the filename should be different: it will be (for example) `fish_history.json` instead of merely `fish_history`. This avoids the problem where you test the new fish, then revert back, and now your history is mangled.

Ideally this is the last time we wholesale replace the fish history file format. Future changes will be adding new key/value pairs, which will be ignored by previous fish shells.

fish 3.0.2

fish_indent does not support range based format (range specified by a start and end line number). Some editor's auto format plugins (e.g. vim-codefmt) would benefit from this feature for range based formatting.
<!--
Please tell us which fish version you are using by executing the following:

  fish --version
  echo $version

Please tell us which operating system and terminal you are using. The output of `uname -a` and `echo $TERM` may be helpful in this regard although other commands might be relevant in your specific situation.

Please tell us if you tried fish without third-party customizations by executing this command and whether it affected the behavior you are reporting:

  sh -c 'env HOME=$(mktemp -d) fish'

Tell us how to reproduce the problem. Including an asciinema.org recording is useful for problems that involve the visual display of fish output such as its prompt.
-->
`fish --version`
Fish version 3.02

`echo $TERM`
Xterm-256color

`uname -a`
Linux xxxxxx 4.4.0-18362-Microsoft #476-Microsoft Fri Nov 01 16:53:00 PST 2019 x86_64 x86_64 x86_64 GNU/Linux

`sh -c 'env HOME=$(mktemp -d) fish'`
The problem persists

- Windows 10 version 1909
- Windows new terminal version 0.7.345.10

fish_user_key_bindings.fish

```javascript
function fish_user_key_bindings
  fish_vi_key_bindings
  fzf_key_bindings
  set -g fish_cursor_insert line
  set -g fish_cursor_replace_one underscore
  set -g fish_cursor_visual block
  bind -M insert -m default jj backward-char force-repaint
  bind -M insert hh forward-word force-repaint
  bind -M insert \r 'replace_then_execute'
end
```

config.fish

```javascript
set -U fish_greeting ""
set theme_color_scheme dracula
set -g FZF_CTRL_T_COMMAND "fd --type f --hidden --follow --exclude .git"
```
Cursor shape (solid box) is same in all modes...
Any suggestion ?
Thank you,
P.

Again, on sr.ht (https://builds.sr.ht/~faho/job/133042), this time with OpenBSD:

```

Testing history merge
Error: Test failed on line 3889: history_contains(reader, more_texts[j])
Error: Test failed on line 3889: history_contains(reader, more_texts[j])
Error: Test failed on line 3889: history_contains(reader, more_texts[j])
Error: Test failed on line 3889: history_contains(reader, more_texts[j])
Error: Test failed on line 3889: history_contains(reader, more_texts[j])
Error: Test failed on line 3889: history_contains(reader, more_texts[j])
Error: Test failed on line 3889: history_contains(reader, more_texts[j])
Error: Test failed on line 3889: history_contains(reader, more_texts[j])
Error: Test failed on line 3889: history_contains(reader, more_texts[j])
Error: Test failed on line 3889: history_contains(reader, more_texts[j])
Error: Test failed on line 3889: history_contains(reader, more_texts[j])
Error: Test failed on line 3889: history_contains(reader, more_texts[j])
Error: Test failed on line 3889: history_contains(reader, more_texts[j])
Error: Test failed on line 3889: history_contains(reader, more_texts[j])
Error: Test failed on line 3889: history_contains(reader, more_texts[j])
Testing history race conditions
Error: Item dropped from history: 90318 113
Error: Item dropped from history: 65161 38
Error: Item dropped from history: 65161 37
Error: Item dropped from history: 65161 36
Error: Item dropped from history: 65161 35
Error: Item dropped from history: 65161 34
Error: Item dropped from history: 65161 33
Error: Item dropped from history: 65161 32
Error: Item dropped from history: 65161 31
Error: Item dropped from history: 65161 30
Error: Item dropped from history: 65161 29
Error: Item dropped from history: 65161 28
```

and so on.

(again with 33a234e19, which is 484e590b7 without a rebase)
It would be convenient if Fish published an [AppImage](https://appimage.org/) along with its other release artifacts.

My use-case for such a thing: It would be very useful to be able to curl an AppImage on a system that I do not have administrative access over, and start using fish-shell even there.  The workflow looks like:

```
curl -LO <..>/fish.AppImage
chmod +x fish.AppImage
./fish.AppImage
... fish starts ...
```

If there is any interest in this, I can investigate putting together a PR that would build an AppImage.
<!--
Please tell us which fish version you are using by executing the following:

  fish --version
  echo $version

Please tell us which operating system and terminal you are using. The output of `uname -a` and `echo $TERM` may be helpful in this regard although other commands might be relevant in your specific situation.

Please tell us if you tried fish without third-party customizations by executing this command and whether it affected the behavior you are reporting:

  sh -c 'env HOME=$(mktemp -d) fish'

Tell us how to reproduce the problem. Including an asciinema.org recording is useful for problems that involve the visual display of fish output such as its prompt.
-->
I have installed Cygwin on windows and set fish as default shell. I did this by right clicking Cygwin.bat(inside the location `C:\cygwin64`) file and changing the last line to (note fish there)

`cd /d "%~dp0bin" && .\fish --login -i`

Now when I double click Cygwin.bat, I get a nice prompt from fish as shown.
![image](https://user-images.githubusercontent.com/18495886/71770306-14dd4000-2ef9-11ea-8f89-220442dfb42c.png)

Now when I type `kill -9` however, this is what I get. The thing is it straight away prints not enough arguments even though I have not yet pressed the return key. Even before I type the pid, it throws this error. 
![image](https://user-images.githubusercontent.com/18495886/71770338-756c7d00-2ef9-11ea-9bdc-8b0dbe6acf93.png)


Initially I thought this was Cygwin's problem, so I changed the shell to bash and tried to do the same. I have no problems with kill command if I used bash as my default shell in Cygwin. So I am assuming this has to with fish shell. 

Fish Version: 2.7.0
Operating System: Windows 10
Terminal: Cygwin (echo $TERM shows xterm-256color)
What do you all think about supporting hyphen/underscore insensitivity? So that

```
$ mkdir test
$ cd test
$ touch a-b
$ touch a_b
$ ./a-<TAB><TAB>
```

would open a completion menu with a-b and a_b.

Zsh for example can be configured to do this. (Emulating Zsh is of course not the goal but for the record one way to do that is

```shell
# zshrc
zstyle ':completion:*' matcher-list 'm:{a-zA-Z-_}={A-Za-z_-}' 'r:|=*' 'l:|=* r:|=*'
```

in case you want to try it out.)

I personally find this useful. Don't know if it'd be bad news on certain systems.

I'm on
fish, version 3.0.2
macOs 10.14.6 (18G1012)
