Hi,
One thing which can make prototool even better is custom config path.
In large projects there may be many configs for different tools and it would be extremely convenient to keep them all in a dedicated directory (e.g. `configs`) rather than cluttering repository's root.

Imagine the following project structure: 
```
repo/
  api/
    api.proto
  cmd/
  configs/
    prototool.yaml
  internal/
  pkg/
  README.md
```
Working directory is repo root.
The config path flag would be passed like: `prototool generate --config configs/prototool.yaml`
Prototool should work the same as if the config was in the working directory (i.e. repo root).


Please let me know what you think about this feature request. 
P.S. There is a PR open already #519, but it seem to be left without attention.

Fixes #520 
A few places to replace `it's` with `its`.
This PR adds a linter to ensure `ruby_package` file option is set. This file option is [part of protobuf](https://github.com/protocolbuffers/protobuf/blob/5a578d2a5cd3bce73b4b4a4ebd9ba40ff7fa1931/src/google/protobuf/descriptor.proto#L429).
Hi,

I am using uber2 lint check in my project. I can see there is a java package prefix check already added but I am not able to find a way how can I enforce a check on package name?

Below is the example of what I am trying to achieve
prototool.yaml
lint:
  group: uber2
  package_prefix: test.abc.xyz

The package name in proto file should start with test.abc.xyz else it should throw an error.

Thanks



great tool, and we migrate all microservice to your standard.
but, we have a question. what you do to use grpc client in another service?
we have service `store`
```
proto
  vendor
    store
      v1
        store_api.proto
        store.proto
    stock
      v1
        stock_api.proto
        stock.proto
```
`store` use files from `stock`

Now, we want to use `store` microservice in `webcam` microservice.
- We can copy and paste generated `go` code, but it won't work, because generated `go` code has invalid import path (`v1 "bitbucket.com/mic/store/internal/grpc/gen/go/vendor/store/stock/v1"`), it can't import, because valid import path should start from `bitbucket.com/mic/webcam`

we decided to make package `grpc_client`, where copy and paste all `proto` and make special `prototool.yaml`. And generate all clients in `webcam` microservice.

What the right way? Maybe the right way is generate all clients in place? (We only start integrate grpc, and have a lot of questions...)
To be able to use more flexible file paths was added support of ENV vars in the config-provider.

The main idea is the possibility to use the include paths from the system environment.

For example:

```yml
protoc:
  version: 3.8.0

  includes:
    - ".."
    - ${GOPATH}/pkg/mod/github.com/grpc-ecosystem/grpc-gateway@v1.12.1/third_party/googleapis
    - ${GOPATH}/pkg/mod/github.com/grpc-ecosystem/grpc-gateway@v1.12.1

lint:
  file_header:
    content: |
      // ${USER} - Document generation
    is_commented: true
```

Also, was extended `generate.go_options.import_path`, `lint.file_header.path`, `lint.file_header.content` and `lint.ignores.files` with the same reason.

NOTE: Originally it was implemented only for several fields of config but can be extended for the whole config file.

We're trying to use grpc_tools_node_protoc with prototool, we're getting the message definitions translated to JS but it doesn't seem to be generating the service definition so we can actually use the JS grpc client code in our project.

**prototool.yaml**
```yaml
protoc:
  version: 3.8.0

generate:
  plugins:
    - name: js
      flags: import_style=commonjs,binary
      output: ./test
      path: grpc_tools_node_protoc
```
brand_api.proto
```proto
syntax = "proto3";

package ibu.brand.v1;

// Handles Brands and their configuration.
service BrandAPI {
  // Get the Brand specified by the code.
  rpc GetBrand (GetBrandRequest) returns (GetBrandResponse) {}
}

// Request for getting a Brand
message GetBrandRequest {
  string brand_id = 1;
}

// Response for getting a Brand
message GetBrandResponse {
  string brand = 1;
}
```

Using Prototool with these files only results in `brand_api_pb.js` being generated, but if I try using grpc_tools_node_protoc by itself it will generate the service definition
`grpc_tools_node_protoc --js_out=import_style=commonjs,binary:./test --grpc_out=./test *.proto` 

It seems the only thing different between the two methods is that you can define a grpc_out flag for `grpc_tools_node_protoc` but not in the prototool.yml file. But I'm not quite sure what the flag or option looks like in the prototool.yml file

prototool version info:
```
Version:                 1.9.0
Default protoc version:  3.8.0
Go version:              go1.13.1
OS/Arch:                 darwin/amd64
```

Has anyone had any luck with prototool and JS? I'm guessing I'm completely missing some setting or not quite understanding some basic concept of how this is supposed to work. Any help would be greatly appreciated.
Make files in `/usr/include/google/protobuf` world readable in the docker image.

Also update gRPC and Protobuf versions that are installed, to fix the docker image build.