
 The repo is still using Swift 2, should upgrade to Swift 3 or 4.
It's pretty excellent, and it's just _begging_ for a React-style API. Few can make this happen. @joshaber Any interest? 

@joshaber This one's a biggie, sorry. I wanted to get the demo working in decent shape before PR. What we've got is 
- Add `Switch` element for `UISwitch`
- Make `Button` lay itself out correctly
- Make `Button` respect more control states
- Use `isEqualToAttributedString:` when possible
- Add `contentInset` and `scrollIndicatorInsets` to `TableView`
- Spruce up the demo with a fancy navigation controller

The changes seemed to have exposed layout bugs in other chunks of the framework, so we'll tackle those later. The layout of elements in the table header is wonky when you switch between demo screens and on first appearance. Curious if you have ideas about the causes there.

@joshaber We call `reloadData()` every time we diff a TableView, and that kills our selection. I'll work on this one â€“ just putting it here as a reminder.

Current thinking is we need to make `Element` equatable, and not call `reloadData()` unless our row data has actually changed. Thoughts?

@joshaber Sometimes it would be nice to be able to customize a Component's behavior from outside, after the render. For example I want to set some scroll view insets after a component is realized, and subclassing component seems like a bit much. What do you think?

Now that protocols can have concrete implementations, we should re-visit whether Few can be designed around value types and protocols. :sparkles: 

The `Input` element does not seem to follow the `.childAlignment(.Stretch)` property. I have attached a screenshot (I'm bad at designing but these colors are used for clarity of the issue :wink:) and the example view code. I _believe_ my code is right as the "Welcome!" `Label` and the bottom border views are stretched. **BUT** please let me know if it is something with just my code :innocent: 
## Screenshot (duh)

![ios simulator screen shot jun 23 2015 9 33 48 pm](https://cloud.githubusercontent.com/assets/401294/8321677/8a927e92-19ef-11e5-97c6-0f4761e44776.png)
## Code (even more duh)

``` swift
return View(backgroundColor: UIColor.lightGrayColor())
    .justification(.FlexStart)
    .childAlignment(.Center)
    .direction(.Column)
    .children([

        View(backgroundColor: UIColor.orangeColor())
            .childAlignment(.Stretch)
            .direction(.Column)
            .width(300)
            .margin(Edges(left: 0, right: 0, bottom: 0, top: 80))
            .padding(Edges(left: 20, right: 20, bottom: 20, top: 20))
            .children([

                // Label
                { () -> Label in
                    let l = Label("Welcome!",
                        textColor: UIColor.darkGrayColor(),
                        font: UIFont.boldSystemFontOfSize(26))
                        .margin(Edges(left: 0, right: 0, bottom: 20, top: 0))
                    l.selfAlignment(.Center)
                    return l
                }(),

                // Input - Email
                Input(textColor: UIColor.blackColor(),
                    placeholder: "Email",
                    keyboardType: UIKeyboardType.EmailAddress,
                    returnKeyType: UIReturnKeyType.Next,
                    borderStyle: UITextBorderStyle.RoundedRect)
                    .margin(Edges(left: 0, right: 0, bottom: 0, top: 0)),

                // Border View
                View(backgroundColor: UIColor.darkGrayColor())
                    .height(1)
                    .margin(Edges(left: 0, right: 0, bottom: 20, top: 2)),

                // Input - Password
                Input(textColor: UIColor.blackColor(),
                    placeholder: "Password",
                    returnKeyType: UIReturnKeyType.Done,
                    secure: true),

                // Border View
                View(backgroundColor: UIColor.darkGrayColor())
                    .height(1)
                    .margin(Edges(left: 0, right: 0, bottom: 10, top: 2))

            ])
```

We use flexbox for layout but different terminology. We should use the same so it's easy to share existing knowledge and resources.

This'll obviously require changes to SwiftBox.

Currently each component re-renders itself when its state changes. This works, but it's less than ideal.

Consider a component A which renders a component B. If both update their state in the same runloop, component B will be rendered twice: once by itself because of its state update, and once when component A re-renders itself.

We should start each re-render from the topmost dirty component.

(I don't think there are any correctness problems here, but it's certainly less performant.)
