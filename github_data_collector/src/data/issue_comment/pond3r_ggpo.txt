After two months of inactivity on https://github.com/pond3r/ggpo/pull/37 I took the liberty to apply most of the requested changes.

The big open question is the implementation of the `Poll` functionality. Currently, the code still uses the POSIX implementation of the Win32 API. As a first version (and since the code is not being used in the vectorwar example) I think it's better to have this than nothing (or nothing that compiles).

For the case that you want to implement a more POSIX-style API before merging this, I looked into how to implement such an API. I think using file descriptors for signaling of events could be the most appropriate way to handle these (if I understood this API correctly). Then we could use either [`select(3P)`](http://man7.org/linux/man-pages/man3/select.3p.html) (available on both MacOSX and Linux) or [`epoll`](http://man7.org/linux/man-pages/man7/epoll.7.html) (Linux) and [`kqueue`](https://developer.apple.com/library/archive/documentation/System/Conceptual/ManPages_iPhoneOS/man2/kqueue.2.html) (MacOSX, though I have read online that this function can be [buggy](https://discussions.apple.com/thread/4783301?tstart=0)) to check which event has fired (i. e. which file descriptor is readable).

What do you think?
Granted I have never done extensive C style programming, it might be my lack of familiarity talking.

- what use is that empty struct https://github.com/pond3r/ggpo/blob/e4e11d8e3e7ff5246a935727f05801997fe2909b/src/include/ggponet.h#L79 I found some info about tagging structs but I'm not sure that's what is happening here.
- is there a reason to return a `GGPOErrorCode` when there is only one return value possible? Maybe for async uses?
- https://github.com/pond3r/ggpo/blob/e4e11d8e3e7ff5246a935727f05801997fe2909b/src/lib/ggpo/poll.cpp#L51 I've seen these kinds of `while` in a few places, and they scare me :p
I don't know how tightly coupled they are but it would be nice if they could be isolated from each other and maybe show how to combine them in an example. For example if I use an engine which has its own protocol I might want to skip ggpo's implementation and only use the rollback.
Is there a plan to add tests in the future? In my opinion it is very hard to recommend ggpo in a professional setting when there are possible breaking points such as custom data structures.

Tests could make it easier to understand each working parts of the lib as well. I find that the vector war example is a bit bloated because you have to parse through rendering and game logic. I only care about what happens with the inputs and the game state.
I propose that a technical specifications document should be created for GGPO.  I believe this will make it easier for people to create their own implementations vs having to parse the reference implementation.  

I'm currently going through the source code and willing to volunteer to do the bulk of the work on a technical specification document as I was considering making one for myself. 

Things that should be included
- User Interface specification 
- Protocol specification (packet formats, sequence diagrams, etc for the low level protocol [found in udp_proto.cpp/h]) 
- Event handling 
- Application flow

etc etc 
When I translated it into Japanese, there was a part I didn't understand.
(By the way, I'm not good at English.)

> your 2-second flash will be entirely consumed by the rollback (line 180)

Is this "2-second" a mistake of "2-frame"?

> GGPO will call your advance frame callback many times during a rollback. (line 208)

Does this "advance frame" mean "ggpo_advance_frame" or user defined callback function?
I can look into a fix for this something to with the printf format specifiers.
This pull request is to propose an abstraction layer for the network connection to sit between the upd class and the actual socket calls. The idea is to add dependency injection to the library to both enable easy mocking of the socket calls and to allow easier swapping of other network apis (like steam or console api calls) into GGPO. The change as is doesn't work because it assumes the user will pass a ConnectionManager derived object into the ggposession. I had a change that basically broke the C style bindings for the library and was able to build run and test the program, and everything worked fine. I reverted those changes and this version shows how I thought it could be used. But, I don't have a clear vision for how to provide this functionality to the user while maintaining the C support and current DLL style wrapping for the lib. I'm looking for input on what the best way to provide this as an external interface would be.

It may be that we add explicit struct typing or c style function to the supported networking apis and anyone who wants to fork and add their own support will need to create their own functions that know what parameters the apis require for creating a ConnectionManager.

Hoping for feedback. I tried to match style as much as possible. VS defaulted to tabs and I forgot to change that so I know in the new files I need to swap to spaces. But if I missed some other style or formatting stuff I'll make sure to fix that before submitting a CL that I'm hoping to get in. I'm looking to start a design conversation with this.
Merges #17 and #21 to conform to the new cross-platform abstraction. Build succeeded on OSX and Ubuntu.
The license section of the readme states:

> GGPO is available under The MIT License. This means GGPO is free for commercial and non-commercial use. Attribution is not required, but appreciated.

The MIT licence requires some degree of attribution, but this line says GGPO doesn't require attribution. Can this be clarified? Is the intent "no attribution beyond what the licence otherwise requires"?