Hi, I need help to deserialize the ClientToGC GC message since I am using Steamkit2 server side. Regards
```
steamClient.DebugNetworkListener = new NetHookNetworkListener();
```

logs the following for me in debuglog:
```
[Created nethook directory: {0}]: C:\Users\xPaw\.nuget\packages\steamkit2\2.2.0\lib\netstandard2.0\nethook\1576878392
```

It should be taking the executing assembly and making the folder there, shouldn't it?
Updated MsgInfo_t struct, 2 members swapped position.
Updated signature for MessageList, strings are stored in HEAP, therefore removed the steamclient.dll range check.
Hello Guys,

My bot can´t join my csgo lobby.

With best regards.

```
JoinLobby();

static void JoinLobby()
        {
           
            var joinRequest = new ClientMsgProtobuf<CMsgClientMMSJoinLobby>(EMsg.ClientMMSJoinLobby);
            joinRequest.ProtoHeader.routing_appid = 730;
            joinRequest.Header.Proto.routing_appid = 730;
            joinRequest.Body.app_id = 730;
            joinRequest.Body.steam_id_lobby = 109775241051578180;
            joinRequest.Body.persona_name = "blabla";
            steamClient.Send(joinRequest);
        }
```
The method GetMessageList is not being hooked with the new versions of the Steam Client.
If I got this right, all these enums are automatically extracted from steam's client to this intermediate language called steamd.

I am currently porting the codebase to rust, and now I am at the step to write a parser to generate the msgs and enums.. so I am wondering what rule should I follow, remove the second repetition or if it shouldn't be there in the first place. I checked that the C# file has both, but the rust compiler doesn't accept that, so there has to be a rule?

Take for example the enum `EWorkshopFileType`, it has the same discriminant for both `First` and `Community`.

https://github.com/SteamRE/SteamKit/blob/8fb6ba88569c538404e6d17680fb979d8a3047a2/Resources/SteamLanguage/enums.steamd#L1039

Also, there are some discriminants with commentaries such as  `// removed` and `// obselete`. If the discriminant was renamed why not erase the whole line and put it on a changelog instead? It adds some unnecessary rules that make the parsing with a lot of edge cases.

https://github.com/SteamRE/SteamKit/blob/8fb6ba88569c538404e6d17680fb979d8a3047a2/Resources/SteamLanguage/enums.steamd#L212

 Thanks!
Hi there.
I have a very strange behaviour.
I work with SteamKit2 and with Dota2.
Task: programmatically create a lobby and invite friends.

_How I do it in the game:_
I create a 1x1 lobby with first account, join this lobby from the second account, exit the lobby in the first account and do not join back (or join - no difference), I launch the lobby from the second account, the game starts, everything is fine!

_How I do it with SteamKit2:_
(1) I create a lobby using **CMsgPracticeLobbyCreate** with the same settings as when I do it right in the game.
Now there are two options that both do not work:
(2.1) I join from the second account to the created lobby, then using **CMsgPracticeLobbyLeave** I exit the lobby in the first account, at this moment the lobby rights goes to the second account, I try to start the lobby from the second account, and I get an endless loading -> **FINDING SERVER**.
(2.2) I send a request to **CMsgPracticeLobbyLaunch**, looks like lobby trying to launch, but nothing happens. When I open the dota2, I see the same thing as in point 2.1 -> **FINDING SERVER**.

Update: This is not related to the region.

What is the problem?
Why, performing the same actions using SteamKit2, as in the game, I can’t start the lobby?
I tried different lobby creation ways, but all to no avail.

Thanks.

Screen:
![image](https://user-images.githubusercontent.com/23352829/69328262-859a0700-0c81-11ea-9247-431d70aff5b9.png)

Create/Leave/Launch lobby code:
```
        private void CreateLobby()
        {
            var createLobby =
                new ClientGCMsgProtobuf<CMsgPracticeLobbyCreate>((uint) EDOTAGCMsg.k_EMsgGCPracticeLobbyCreate);

            createLobby.Body.search_key = "STEAMKIT2.DOTA.LOBBY";
            createLobby.Body.lobby_details = new CMsgPracticeLobbySetDetails();
            createLobby.Body.lobby_details.game_mode = (uint) DOTA_GameMode.DOTA_GAMEMODE_1V1MID;
            createLobby.Body.lobby_details.game_name = "STEAMKIT2.DOTA.LOBBY";
            createLobby.Body.lobby_details.visibility = DOTALobbyVisibility.DOTALobbyVisibility_Public;
            createLobby.Body.lobby_details.game_version = DOTAGameVersion.GAME_VERSION_CURRENT;
            createLobby.Body.lobby_details.server_region = 2;
            createLobby.Body.lobby_details.custom_max_players = 2;
            createLobby.Body.lobby_details.intro_mode = false;
            createLobby.Body.lobby_details.lan = false;
            
            _gameCoordinator.Send(createLobby, DOTA_APP_ID);
        }
        
        private void LaunchLobby()
        {
            var launchLobby = new ClientGCMsgProtobuf<CMsgPracticeLobbyLaunch>((uint) EDOTAGCMsg.k_EMsgGCPracticeLobbyLaunch);
            _gameCoordinator.Send(launchLobby, DOTA_APP_ID);
        }
        
        private void LeaveLobby()
        {
            var leaveLobby = new ClientGCMsgProtobuf<CMsgPracticeLobbyLeave>((uint) EDOTAGCMsg.k_EMsgGCPracticeLobbyLeave);
            _gameCoordinator.Send(leaveLobby, DOTA_APP_ID);
        }
```
Hello,
i can't get called by UpdateMachineAuthCallback after a successfull logon on a steamguard (no 2FA) protected account (mail verification code once)

My Code: https://pastebin.com/hAr2TstB

I've double checked my code, and i think this callback method should be called, but doesn't 

Many thanks for help

Bye
Remoz
Implements generating auth token, which can be used by games to authenticate user.

Would welcome feedback, as I'm not sure about some stuff.
https://github.com/SteamRE/SteamKit/blob/58562fcc6f6972181615a6d1ff98103b06f0e33f/SteamKit2/SteamKit2/Steam/SteamClient/SteamClient.cs#L384-L385

I couldn't figure out what was happening last time this happened because it silently logs the exception into the debug log (with no stacktrace) and just disconnects.

This time I had debug log enabled and got this:
```
18:01:12 [DEBUG] FreeLicense: Received free license: OK (5 apps: 375750, 1077600, 797410, 517630, 517630, 3 packages: 407024, 409937, 410395)
18:01:12 [STEAMKIT] SteamClient: Unhandled 'ArgumentException' exception from 'SteamApps' handler: 'An item with the same key has already been added. Key: 517630'
```

After that, SK2 started to constantly keep disconnecting with the same message (but without freelicense grant this time). Which eventually got me rate limited by the CM.