Handling requests from an upstream server, or tor, is a must!  If the upstream server is local it becomes encumbering to use ports on a localhost interface for IPC.  Enter Unix Domain Sockets.
Some typos and depreacation warnings addressed.
Is this repo still in active development? And if so, who are the users that have the rights to review/merge pull requests?

cc @phlmn which is the only one I know for sure can merge.
For some reason query strings were no longer being taken into consideration
and the routes would get no query string value at all if they wanted to.
So this fixes #617 and adds a test to ensure it won't come back.

Several compilation errors related to try! macro were fixed as well.
I've just started looking at possible web frameworks to use with Rust, and based on the crates.io Web programming::HTTP server category and the list of five other frameworks on the homepage of arewewebyet.org, I wasn't considering Iron. I just found it in other searches. Looking at the Cargo.toml in the `iron` directory, I see that it doesn't have category nor keyword entries, which presumably explains why it's not listed in the aforementioned category. I was wondering if at least the category and perhaps some suitable keywords should be added to that Cargo.toml.
I'm having trouble getting the example in the documentation to work. Even the examples throw errors. UrlEncodedQuery parses fine, no problems. Is Params still supported?

Url: 
http://localhost:5000/myApiEndpoint?name=jason&age=2

Handler:
fn getStatesByCountryId(req: &mut Request) -> IronResult<Response>{ ...

Code:

        println!("Params = {:?}", req.get_ref::<Params>());

        match req.get_ref::<UrlEncodedQuery>() {
            Ok(ref hashmap) => println!("Parsed GET request query string:\n {:?}", hashmap),
            Err(ref e) => println!("{:?}", e)
        };

Output:

Params = Err(InvalidPath)
Parsed GET request query string:
 {"name": ["jason"], "age": ["2"]}

This seems to be a regression between 0.6.0 and master. The issue currently exists on master and I'm not exactly sure why, but it is very easy to reproduce.

```rust
extern crate iron;
extern crate hyper;

use hyper::StatusCode;
use iron::prelude::*;

fn test_handler(_: &mut Request) -> IronResult<Response> {
    Ok(Response::with((StatusCode::OK, "Test response\n")))
}

fn main() {
    Iron::new(test_handler).http("[::1]:9292");
}
```

Running the code above has Iron successfully listen on the port. Using curl the request fails with a 400 Bad Request like so:

```
$ curl -v http://[::1]:9292/
*   Trying ::1...
* TCP_NODELAY set
* Connected to ::1 (::1) port 9292 (#0)
> GET / HTTP/1.1
> Host: [::1]:9292
> User-Agent: curl/7.59.0
> Accept: */*
> 
< HTTP/1.1 400 Bad Request
< content-length: 0
< date: Sun, 31 Mar 2019 22:01:34 GMT
< 
* Connection #0 to host ::1 left intact
```

And the server produces the following error when I setup and configure the rust logger:

```
ERROR 2019-03-31T22:01:01Z: iron::iron: Error creating request:
    Couldn't parse requested URL: invalid IPv6 address
```
Can we replace `WriteBody` with a boxed `Into<Body>`? (or a custom trait). It seems that the whole response is now loaded into memory and I'd like to avoid that in some cases :-)

https://github.com/iron/iron/blob/1909e5b02c93645acddc06ec196c6b2ccbe1bc9c/src/response.rs#L152-L154

This is probably also related to #423 
Simplify `Chain`'s handle method, by using `iter` and `fold` on the
`BeforeMiddleware` and `AfterMiddleware` and `and_then` on the intermediate
result.

As a result the 6 functions that were previously used are now unneeded
and the code is therefore shorter, cleaner and more concise.
We should compile a list containing all middlewares and plugins we can find. It should be categorized and include links to the corresponding documentations and repositories.

**Edit:** We could use the GitHub API to check which version they support and if they are being updated.

This issue is used to collect them.

## Official

### Middlewares

* mount
* persistent
* router
* urlencoded
* logger
* iron-sessionstorage
* staticfile

### Plugins

* params
* body-parser

## Community

### Middlewares
* [iron-csrf](https://github.com/heartsucker/iron-csrf)
* [rust-secure-session](https://github.com/heartsucker/rust-secure-session)
* [handlebars-iron](https://github.com/sunng87/handlebars-iron)
* [iron-json-response](https://github.com/sunng87/iron-json-response)
* [iron_middlefiddle](https://github.com/elliotekj/iron-middlefiddle)
* [corsware](https://github.com/atorstling/corsware)
* [iron-hmac](https://github.com/jwilm/iron-hmac)
* [iron-cors](https://github.com/dbrgn/iron-cors-rs)
* [iron-error-router](https://github.com/untitaker/iron-error-router)
* [oven](https://github.com/flosse/oven)

### Plugins

### Other

* [maud](https://github.com/lfairy/maud)
* [multipart](https://github.com/abonander/multipart)
* [askama](https://github.com/djc/askama)

## Projects that use Iron

* [rustless](https://crates.io/crates/rustless)
* [mdbook](https://crates.io/crates/mdbook)
* [aurelius](https://github.com/euclio/aurelius)
* [simple-http-server](https://github.com/TheWaWaR/simple-http-server)
* [gauc](https://crates.io/crates/gauc)