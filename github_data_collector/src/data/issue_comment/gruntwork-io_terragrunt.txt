fix broken links
I am a new user of terragrunt. We have a lot of different terraform directories corresponding to different bits of infrastructure. Since it is just a wrapper around terraform I would expect the default behavior to simply call terraform, but instead it gives me an error "terragrunt.hcl: no such file or directory". 

I noticed that simply adding an empty file "terragrunt.hcl" in the directory gets around this issue. So why require the file to be there at all? It seems to just needlessly complicate things and clutter the filesystem. As of now we either need to add a blank terragrunt.hcl file to each terraform directory that we have (which is quite a few), or switch back and forth between the terraform and terragrunt command depending on if the configuration file exists, but obviously it would be nice if we could just use the same command for all workflows.
Hi,
I would like to use a dynamic for_each block within the child terragrunt.hcl file:
```
terraform {
  dynamic "before_hook" {
    for_each = local.file.releases
    content {
      commands     = ["apply", "plan"]
      execute      = ["helm", "diff", "upgrade", "--allow-unreleased", before_hook.value.name, before_hook.value.chart, "--version", before_hook.value.version]
    }
  }
}
```

This causes the following error:
```
Unsupported block type; Blocks of type "dynamic" are not expected here.
```

I'm would like to use this as a workaround to the fact that the Terraform helm provider does not provide a helm-diff output in the terraform plan.

Is there a way to use for_each blocks in a similar way to the example above?
Is it possible to run a command during/before the terraform plan natively within the terraform code?

Thanks!


Hi there

I've been using this successfully in 0.19.24 

      before_hook "open_tunnel_through_bastion" {
        commands = ["plan", "apply", "show", "destroy"]
        execute  = ["screen", "-d", "-m", "ssh", "-L", "12345:${dependency.instance.outputs.this_db_instance_address}:${dependency.instance.outputs.this_db_instance_port}", dependency.bastion.outputs.hostname, "-p", "22000", "sleep", "60"]
      }

Got a laptop issue, reinstalled latest Terragrunt 0.21.10, I ended up with 

> [terragrunt] 2020/01/09 17:27:59 /home/remy/work/terraform-live/development/aws/eu-west-1/postgres/databases/swarm-accessd/terragrunt.hcl:11,16-17: Unsuitable value type; Unsuitable value: element 6: string required

Does that ring a bell ? 

(edited to fix code block)
We are running into a crash when run in a pipeline on an m5.xlarge instance in docker alpine.   The terraform runs fine on a t3 instance through the same pipeline but not in m5 for some reason.   


--- Stack trace --- 

panic: runtime error: invalid memory address or nil pointer dereference
[signal SIGSEGV: segmentation violation code=0x1 addr=0x18 pc=0xd02d21]
goroutine 8 [running]:
github.com/gruntwork-io/terragrunt/cli.runTerraformWithRetry(0xc0000c2000, 0x3, 0x0)
/go/src/github.com/gruntwork-io/terragrunt/cli/cli_app.go:487 +0x121
github.com/gruntwork-io/terragrunt/cli.runTerragruntWithConfig.func1(0xc0002d4510, 0x2)
/go/src/github.com/gruntwork-io/terragrunt/cli/cli_app.go:440 +0x2a
github.com/gruntwork-io/terragrunt/cli.runActionWithHooks(0xf56322, 0x9, 0xc0000c2000, 0xc0002d4750, 0xc0001c9bf0, 0x0, 0x44)
/go/src/github.com/gruntwork-io/terragrunt/cli/cli_app.go:451 +0x2ae
github.com/gruntwork-io/terragrunt/cli.runTerragruntWithConfig(0xc0000c2000, 0xc0002d4750, 0xc0000c2000, 0x0, 0x0)
/go/src/github.com/gruntwork-io/terragrunt/cli/cli_app.go:439 +0x2c7
github.com/gruntwork-io/terragrunt/cli.runTerraformInit(0xc0000c38c0, 0xc0002d4750, 0x0, 0x0, 0x0)
/go/src/github.com/gruntwork-io/terragrunt/cli/cli_app.go:632 +0xaa
github.com/gruntwork-io/terragrunt/cli.prepareNonInitCommand(0xc0000c38c0, 0xc0002d4750, 0x0, 0x0)
/go/src/github.com/gruntwork-io/terragrunt/cli/cli_app.go:575 +0x8b
github.com/gruntwork-io/terragrunt/cli.runTerragruntWithConfig(0xc0000c38c0, 0xc0002d4750, 0x0, 0x0, 0x0)
/go/src/github.com/gruntwork-io/terragrunt/cli/cli_app.go:430 +0x211
github.com/gruntwork-io/terragrunt/cli.RunTerragrunt(0xc0000c38c0, 0xf6082b, 0x15)
/go/src/github.com/gruntwork-io/terragrunt/cli/cli_app.go:327 +0x51b
github.com/gruntwork-io/terragrunt/configstack.(*runningModule).runNow(0xc000482500, 0x0, 0x0)
/go/src/github.com/gruntwork-io/terragrunt/configstack/running_module.go:238 +0x17a
github.com/gruntwork-io/terragrunt/configstack.(*runningModule).runModuleWhenReady(0xc000482500)
/go/src/github.com/gruntwork-io/terragrunt/configstack/running_module.go:201 +0x6a
github.com/gruntwork-io/terragrunt/configstack.runModules.func1(0xc0003a3b80, 0xc000482500)
/go/src/github.com/gruntwork-io/terragrunt/configstack/running_module.go:171 +0x51
created by github.com/gruntwork-io/terragrunt/configstack.runModules
/go/src/github.com/gruntwork-io/terragrunt/configstack/running_module.go:169 +0xe1
I have a parent terragrunt.hcl which defines the backend as :
```
remote_state {
    backend = "azurerm"
    config = {
        resource_group_name = "AOBTfStateResourceGroup"
        storage_account_name = "aobtfstatestorageaccount"
        container_name       = get_env("TG_STATE_CONTAINER", "livetrial-tfstate-${local.env.environment}")
        key = "${path_relative_to_include()}/terraform.tfstate"   
  }
}
locals {
  default_yaml_path     = find_in_parent_folders("empty.yml")
  env                   = yamldecode(file("${get_terragrunt_dir()}/${find_in_parent_folders("env.yml", local.default_yaml_path)}"))
  # common_resource_group = "demo-terraform-live"
  # subscription          = "be62f057-87be-48e5-9c5f-c6fc74ac9d19"
}
inputs = merge(
  yamldecode(file("${get_terragrunt_dir()}/${find_in_parent_folders("env.yml", local.default_yaml_path)}")),
  yamldecode(file("${get_terragrunt_dir()}/${find_in_parent_folders("location.yml", local.default_yaml_path)}")),
  yamldecode(file("${get_terragrunt_dir()}/${find_in_parent_folders("appplan.yml", local.default_yaml_path)}")),
  yamldecode(file("${get_terragrunt_dir()}/${find_in_parent_folders("gateway.yml", local.default_yaml_path)}")),
)
```
And i have a child terragrunt.hcl which deploys a web appas:
```
include {
    path = find_in_parent_folders()
}
terraform {
    source = "git::https://__PATTF__@dev.azure.com/Trial-Org/IacTF/_git/terraform-azure-liveportalwebapp"
}
inputs = {
    app_service_name = "dev1-livetrial"
    gateway_resource_group_name = "LiveTrial-Shared"
    # resource_group_name = "LiveTrial-Shared"
}
```
And i purposefully did not define terraform backend block in module.
Now when i do terragrunt apply it throws warning instead of error as follows:
```
Warning: Missing backend configuration

-backend-config was used without a "backend" block in the configuration.

If you intended to override the default local backend configuration,
no action is required, but you may add an explicit backend block to your
configuration to clear this warning:

terraform {
  backend "local" {}
}

However, if you intended to override a defined backend, please verify that
the backend configuration is present and valid
```
And if we miss this warning the state file will be stored in .terragrunt-cache directory, which will be a big issue if we run terragrunt apply on agents.
Earlier i remember seeing an error rather than warning which is nice to have.
How to deal with such situation
Terragrunt Version: v0.21.6
Terraform Version: v0.12.17
OSX
Golang Version: 1.13.3

I have a Terraform module for creating VirtualNetwork with the following folder layout 
![Screen Shot 2019-12-23 at 1 42 20 PM](https://user-images.githubusercontent.com/47507148/71374797-123e2a80-258a-11ea-966a-f98fa66d3b15.png)

And I have Terraform Live Repo with the following layout 
![Screen Shot 2019-12-23 at 1 44 09 PM](https://user-images.githubusercontent.com/47507148/71374874-54676c00-258a-11ea-99f8-d159d381d458.png)

The Terragrunt File for the Virtual Network declares a dependency on Resource group and uses the output of Resource Group. The configuration file is as follows:
![Screen Shot 2019-12-23 at 1 45 48 PM](https://user-images.githubusercontent.com/47507148/71374944-9c868e80-258a-11ea-966e-7c59be480676.png)
 
When i run  terragrunt plan --terragrunt-source "/Users/dkonasani/Desktop/Go/src/TFModules/terraform-azure-demovn" in the Virtual Network folder i receive the following error:
![Screen Shot 2019-12-23 at 1 48 00 PM](https://user-images.githubusercontent.com/47507148/71375035-dfe0fd00-258a-11ea-8c56-0633a5a1ca5a.png)

I see that it is complaining about a file in the Vendor folder for the testsusing Terratest in the Terraform Module. Now when i go back to the Module and delete the vendor folder and run 
terragrunt plan --terragrunt-source "/Users/dkonasani/Desktop/Go/src/TFModules/terraform-azure-demovn"
It gives the desired output. 
To reproduce the error when i go back to the Terraform Module run tests (it creates the vendor folder) and come back to live repo Virtual Network folder and run terragrunt plan it gives the same error as above. 
Any guidance with this issue will be helpful


Right now, writing code such as

```hcl
terraform {
  extra_arguments "common_var" {
    commands  = get_terraform_commands_that_need_vars()
    arguments = ["-var-file=${get_aws_account_id()}.tfvars"]
  }
}
```

will work with a `terragrunt apply`, as `apply` is listed here: https://github.com/gruntwork-io/terragrunt/blob/7f563c6fe3abe41764aff642f01edc180288a9af/config/config_helpers.go#L33

However, running a `terragrunt plan -out plan` and then `terragrunt apply plan` will fail because you are passing tfvars to an `apply` that already knows what it's doing.

Likewise, if you set: `commands = ["plan"]` you will get the reverse problem. You will be able to use plan files, but unable to not use plan files.

It would be great if terragrunt could figure out for `apply` commands if the `tfvars` should be included or not based on the other arguments passed to the `apply`.
addressing https://github.com/terraform-providers/terraform-provider-aws/issues/1082
Hey guys,

I have following structure:

└── gcp(Cloud)
    ├── main.tf (create projects)
    ├── terragrunt.hcl
    **├── management(Environment)**
    │   ├── environment.yaml
    **│   └── us-central1(Region)**
    │       ├── cloud-dns
    │       ├── kubernetes-engine
    │       └── region.yaml
    **├── pre-production(Environment)**
    │   ├── environment.yaml
    **│   └── us-central1(Region)**
    │       ├── cloud-dns
    │       ├── kubernetes-engine
    │       └── region.yaml
    **├── production(Environment)**
   │   ├── environment.yaml
    **│   └── us-central1(Region)**
    │       ├── cloud-dns
    │       ├── kubernetes-engine
    │       └── region.yaml

In `main.tf` I have created projects(google resource) for each environment (Production, Pre-Production, Management), generating project_id outputs for each one. In terragrunt.hcl(parent) I have configured a GCS backend. But, I would like to create one state into each region, for this reason I put the files region.yaml and environment.yaml in the root at each corresponding level, defining a string(name) of each region and environment. My question is:

1 - How to interpolate outputs created in main.tf(parent level) for define project parameter in remote backend params? Where I should save root main.tf state?

2 -  How to interpolate region.yaml and environment.yaml for define location and bucket in remote backend params?

terragrunt.hcl (parent):
```
# Configure Terragrunt to automatically store tfstate files in an GCS bucket
remote_state {
  backend = "gcs"
  config = {
    # location = "${var.region.name}" ?? How to setup this?
    # project  = "all-timing-${outputs.project_id}" ?? How to setup this?
    # bucket   = "all-timing-${var.environment.name}-terraform-state" ?? How to setup this?
    prefix   = "${path_relative_to_include()}/terraform.tfstate"
  }
}
```

terragrunt.hcl (child):
```
 dependency "project" {
  #dependency of main.tf
  config_path = "../../../"

  mock_outputs = {
    project_id = "temporary-dummy-id"
  }

  mock_outputs_allowed_terraform_commands = ["plan", "validate"]
}

inputs = {
  project_id = "${dependency.all_timing_management_project.outputs.project_id}"
}
```

3 - Does anyone have any other suggestions, please?

