Minimal example:

```rust
use syn::LitInt;
use proc_macro2::Span;

fn main() {
    LitInt::new("-1", Span::call_site());
}
```

`cargo run` backtrace:

```text
thread 'main' panicked at 'internal error: entered unreachable code', /home/jhpratt/.cargo/registry/src/github.com-1ecc6299db9ec823/syn-1.0.13/src/lit.rs:1379:18
stack backtrace:
   0: backtrace::backtrace::libunwind::trace
             at /cargo/registry/src/github.com-1ecc6299db9ec823/backtrace-0.3.40/src/backtrace/libunwind.rs:88
   1: backtrace::backtrace::trace_unsynchronized
             at /cargo/registry/src/github.com-1ecc6299db9ec823/backtrace-0.3.40/src/backtrace/mod.rs:66
   2: std::sys_common::backtrace::_print_fmt
             at src/libstd/sys_common/backtrace.rs:84
   3: <std::sys_common::backtrace::_print::DisplayBacktrace as core::fmt::Display>::fmt
             at src/libstd/sys_common/backtrace.rs:61
   4: core::fmt::write
             at src/libcore/fmt/mod.rs:1025
   5: std::io::Write::write_fmt
             at src/libstd/io/mod.rs:1426
   6: std::sys_common::backtrace::_print
             at src/libstd/sys_common/backtrace.rs:65
   7: std::sys_common::backtrace::print
             at src/libstd/sys_common/backtrace.rs:50
   8: std::panicking::default_hook::{{closure}}
             at src/libstd/panicking.rs:193
   9: std::panicking::default_hook
             at src/libstd/panicking.rs:210
  10: std::panicking::rust_panic_with_hook
             at src/libstd/panicking.rs:475
  11: std::panicking::begin_panic
             at /rustc/0de96d37fbcc54978458c18f5067cd9817669bc8/src/libstd/panicking.rs:404
  12: syn::lit::value::to_literal
             at /home/jhpratt/.cargo/registry/src/github.com-1ecc6299db9ec823/syn-1.0.13/src/lit.rs:1379
  13: syn::lit::LitInt::new
             at /home/jhpratt/.cargo/registry/src/github.com-1ecc6299db9ec823/syn-1.0.13/src/lit.rs:407
  14: tmp::main
             at src/main.rs:5
  15: std::rt::lang_start::{{closure}}
             at /rustc/0de96d37fbcc54978458c18f5067cd9817669bc8/src/libstd/rt.rs:67
  16: std::rt::lang_start_internal::{{closure}}
             at src/libstd/rt.rs:52
  17: std::panicking::try::do_call
             at src/libstd/panicking.rs:292
  18: __rust_maybe_catch_panic
             at src/libpanic_unwind/lib.rs:78
  19: std::panicking::try
             at src/libstd/panicking.rs:270
  20: std::panic::catch_unwind
             at src/libstd/panic.rs:394
  21: std::rt::lang_start_internal
             at src/libstd/rt.rs:51
  22: std::rt::lang_start
             at /rustc/0de96d37fbcc54978458c18f5067cd9817669bc8/src/libstd/rt.rs:67
  23: main
  24: __libc_start_main
  25: _start
```

Versions:
- syn: 1.0.13
- proc-macro2: 1.0.7

After taking a quick look at `lit.rs`, it looks like this should work. At the minimum, it definitely shouldn't reach an "unreachable!()" declaration.

I ran into this in real-world code, so it's certainly not unheard of to want to do something like this.
This function is quite usefult for patching error messages, like
```rust
let res: Visibility = syn::parse_str("...").map_err(|e| {
    // the current span is call_site(), but we have the more fitting place to point to 
    e.set_span(some);
    e
})?;
This snippet of code from `dtoa` fails parsing with `syn` 1.0.13:

```rust
pub trait Floating {
    fn write<W: io::Write>(self, W) -> io::Result<usize>;
}
```

Giving the error ``Error("expected `:`")``. This is valid code _in edition 2015_, edition 2018 has made it a hard error, here's [a playground](https://play.rust-lang.org/?version=stable&mode=debug&edition=2015&gist=e8e7d13fae9f41d52858197e42c9d06d) which compiles successfully with the code, and shows the error from `syn`.

I have also locally tested defining an identity `proc-macro-attribute` which attempts to parse whatever it's applied to as an `syn::Item`. That also fails with the same error message.
We can get complete AST with `full` feature for Rust code it contains below fields. 

Is there any way to exclude some of the items from the list. 
ex: exclude externCrate, Use etc.
```
pub enum Item {
    ExternCrate(ItemExternCrate),
    Use(ItemUse),
    Static(ItemStatic),
    Const(ItemConst),
    Fn(ItemFn),
    Mod(ItemMod),
    ForeignMod(ItemForeignMod),
    Type(ItemType),
    Existential(ItemExistential),
    Struct(ItemStruct),
    Enum(ItemEnum),
    Union(ItemUnion),
    Trait(ItemTrait),
    TraitAlias(ItemTraitAlias),
    Impl(ItemImpl),
    Macro(ItemMacro),
    Macro2(ItemMacro2),
    Verbatim(ItemVerbatim),
}
```
Thanks
I ran into a case today where this would have been useful as a wrapper around https://docs.rs/syn/1.0.13/syn/struct.Error.html#method.combine.
In https://github.com/95th/defaults/issues/1, I want to get inner span of string literal.

For e.g. for this:

```
#[derive(Defaults)]
#[def = "Foo::A"]
enum Foo {
    A(usize),
    B,
}
```

I want to get span of `Foo::A`  but I get span of `"Foo::A"` instead.

https://github.com/95th/defaults/blob/e90cf084bc25b3adc3ce3ae74582163bbe42f320/src/lib.rs#L95

Is there a way to get the inner span?
Like what Tokio does:

https://github.com/tokio-rs/tokio/blob/0e729aa341028c121b9c39fe552ed4309bae6b6a/tokio/src/macros/cfg.rs#L241

https://docs.rs/tokio/0.2.2/tokio/task/fn.block_in_place.html

This turns into a blue cfg banner that is nicer than our current notes about <b>"</b>*This type is available if Syn is built with the "full" feature.*<b>"</b>

---

![doccfg](https://user-images.githubusercontent.com/1940490/70179905-c6d3e300-1693-11ea-9686-d69b291b1db3.png)


The link to `TokenStream` in https://docs.rs/syn/1.0.11/syn/enum.Type.html is broken.
This is the link: https://docs.rs/proc-macro2/1.0.6/proc_macro2/struct.TokenStream.html
Not sure if this is a bug or just me. I'm using syn version 1.0.8 I have tried this multiple ways
using `syn::parse2()` on a `quote! { co: Co<'_> }` also fails.
```rust
let arg = parse_str::<Pat>("co: Co<'_>").expect("Pat parse failed Co<'_>");
// then push it into the input `Vec<Punctuated<Pat, Comma>`
```
for adding an argument to
```rust
let hello = async || {
        co.yield_("hello").await;
    };
```
in order to get it to compile without giving me `unknown token` error I have to destructure
a `FnArg`
```rust
    let arg = match parse_str::<FnArg>("co: Co<'_>") {
            Ok(FnArg::Typed(x)) => x,
            _ => panic!("string Pat parse failed Co<'_>"),
        };
    punct.push(Pat::Type(arg))
```
I'm trying to parse a macro call (along the lines of `foo! { }`) inside an `ItemFn`. When looking at `Stmt`, I initially guessed this would be an expression, and I found the `Macro` expression type. However, it turned out to be an `Item` of type `Macro` instead. As far as I can tell, macros can be used either way. How does syn decide which to use? Should the documentation (for `Stmt`, for example) talk about this a little bit?