Hi, I'm using node-cache v5.1.0 on node v10 and setting my NodeCache instances to not delete automatically expired entries. Also, I added an event handler associated to "expired" event, however, the refreshExpiredCache callback function is getting executed twice in rapid fire, just a few milliseconds apart from each other.

```
const domainDataCache = new NodeCache({
    stdTTL: 60 * 60 * 4, // entries will live for 4 hours before eviction
    checkperiod: 120, // checks every 2 min for expired entries
    deleteOnExpire: false,
    useClones: true,
    errorOnMissing: false,
});

/ handles the cache expiration event - old data is not evicted automatically
function refreshExpiredCache(cacheType, oldDomainCacheMap) {
    logger.info(`Cache ${cacheType} has expired, it currently has ${oldDomainCacheMap.size} entries`);
    retrieveFromStorage(cacheType)
        .then(newDomainCacheMap => {
            logger.info(`Replacing expired cache ${cacheType} with a new map containing ${newDomainCacheMap.size} entries`);
            setAll(cacheType, newDomainCacheMap);
        })
        .catch(error => {
            logger.error(`Error - Could not refresh expired ${cacheType}: ${JSON.stringify(error, Object.getOwnPropertyNames(error))}`);
        });
}

// event handlers
domainDataCache.on('expired', refreshExpiredCache);
```


At this point I'm not clear if I'm using wrong settings or if this is a bug in the library.  Please advice.

When using the module with high values for ttl and checkperiod the cpu consumption increases a lot.

I use the module as follows:
const day = 1000 * 60 * 60 * 24; // day in ms
const mtImageCache = new NodeCache({ stdTTL: day*5, checkperiod: day, useClones : false });

After using lower values like 
const mtImageCache = new NodeCache({ stdTTL: 1000000, checkperiod: 1000000, useClones : false });

the consumption comes back to a normal level.

Version: 5.0.2
Node: 8.x
So it looks like the default `stdTTL` and `maxKeys` are both set to "unlimited". 
Wouldn't this cause memory problems for those that don't "read the docs" or forget to set these values?
I'd like to propose setting these defaults to `{ stdTTL: 3600, maxKeys: 1000000 }`, unless there's another way to handle perceived memory leak when not setting these values.

🍻 
This error has cropped up recently, I have not modified this code in some time.  Looks related to some internal package :  URL.onParseComplete (internal/url.js:226:13) .. no clue what is going on.  If I stringify my object it seems to work no problem 

working code:

`
this.tokenCache.set(token, json.stringify(object), ttl);
`

non-working code:

`
this.tokenCache.set(token, object, ttl);
`

package.json :

> "node-cache": "^4.2.0",

Stack Trace : 
> Cannot set property 'flags' of undefined .. TypeError: Cannot set property 'flags' of undefined
>     at URL.onParseComplete (internal/url.js:226:13)
>     at URL.set [as href] (internal/url.js:444:7)
>     at _clone (../node_modules/clone/clone.js:162:16)
>     at _clone (../node_modules/clone/clone.js:162:18)
>     at clone (../node_modules/clone/clone.js:202:10)
>     at NodeCache.module.exports.NodeCache._wrap (../node_modules/node-cache/lib/node_cache.js:406:22)
It would be nice to have a documentation with internal version switch

coffescript is just overhead and makes the compiled app bloated, harder to debug, larger in size inconsistent with the es6 

https://gofore.com/make-es6-coffee/
