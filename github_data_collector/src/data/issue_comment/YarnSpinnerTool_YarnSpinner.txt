This is not a bug, but I thought it was bug and spent much time for this problem.

The Yarn Editor auto completes [[ and ]], and there's one white space after the linked node title.
![image](https://user-images.githubusercontent.com/42833717/72661691-a207b500-3a20-11ea-990f-0de40dd36b52.png)

I thought the whitespace will be trimmed, so I wrote like this...
![image](https://user-images.githubusercontent.com/42833717/72661726-25c1a180-3a21-11ea-898f-78416ae6092e.png)

Yarn parser in Unity cannot find my 'first' node because the parser tried to find ' first '. I thought it was fatal bug, but it was just a silly mistake.

I don't think Yarn parser should auto-trim the white space in node title, but it should warn about that. It's just adding one line code, but I think it will be very useful.

Edit: little spell change
Small oversight. When using the built-in _wait_ command to wait some time before progressing in the current script, the duration is parsed differently depending on your system locale. On a German install of Windows a duration of _18.5_ is parsed as _185_ because the parser is locale-aware and will not interpret a dot as a decimal separator. It will only do so with a comma.

Can be fixed by altering the _float.TryParse_ call in the _HandleWaitCommand_ method in _DialogueRunner.cs_.

This line:
```
if (float.TryParse(durationString, out var duration) == false) {
```

Should be this:
```
if (float.TryParse(durationString, System.Globalization.NumberStyles.AllowDecimalPoint, System.Globalization.CultureInfo.InvariantCulture, out var duration) == false) {
```

This will prevent the parser from parsing the duration string according to the current locale, which will make it parse dots as decimal separators correctly. But there might be a more elegant way.
Recently noticed a bug that makes some commands not run.

I have a Yarn script without dialogue that I use to set up a cutscene upon first visit of the scene:
```
title: [Start]
tags: 
colorID: 0
position: 0,0
---
<<if not $visited_l01 >>
	<<set $visited_l01 to true>>
	<<createcutscene cutscene000>>
	<<playcutscene cutscene000>>
<<endif>>
===
```
The first of the two custom commands will spawn a prefab (named _cutscene000_) that contains everything needed for the cutscene. The second one will go to that newly spawned object's PlayableDirector for the Timeline-based cutscene and play it. The second command is not executed.

I've tracked it down to an error in _DispatchCommandToGameObject_ in _DialogueRunner.cs_. At the end of the method the variable _wasValidCommand_ is defined and not used when returning from the method. The _methodFound_ boolean to be returned is always returned as true, which means that the call will not be passed on to my handler definition that is not in any Component on the target GameObject.

This code block:
```
var wasValidCommand = numberOfMethodsFound > 0;

if (startedCoroutine) {
	// Signal to the Dialogue that execution should wait. 
	return (true, Dialogue.HandlerExecutionType.PauseExecution);
} else {
	// This wasn't a coroutine, so no need to wait for it.
	return (true, Dialogue.HandlerExecutionType.ContinueExecution);
}
```

Should be this:
```
var wasValidCommand = numberOfMethodsFound > 0;

if (startedCoroutine) {
	// Signal to the Dialogue that execution should wait. 
	return (wasValidCommand, Dialogue.HandlerExecutionType.PauseExecution);
} else {
	// This wasn't a coroutine, so no need to wait for it.
	return (wasValidCommand, Dialogue.HandlerExecutionType.ContinueExecution);
}
```
Importing a yarn file in Unity with a header line without content causes a bug in the parser to break at syntactically valid instructions. Examples are:
```
title: Start
tags: 
colorID: 0
position: 0,0
parent: 
---
Test
===
```
or
```
title: Start
tags: 
colorID: 0
position: 0,0
parent: 
---
A: Test
// You can make comments with '//' and the player won't see it.
===
```
Removing the `parent: ` line or adding content to it like `parent: 123456` 
Hello,

First of all, thank you for making Yarn open source! It is great software and I believe many game developers use it in their games. 

I propose to change the coding style to follow  [C# Coding Conventions](https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/inside-a-program/coding-conventions) and best practices in order to make the code easier to read and maintain for C# developers. 

In most cases, it would be just fixing spacing, moving opening brackets to the new lines and using `var` when declaring local variables.

Also, why not use `for` in this case? This is a very weird implementation
https://github.com/YarnSpinnerTool/YarnSpinner/blob/3feed068e7c76e7e05baa37e9713f2b6edfad3ec/Unity/Assets/YarnSpinner/Examples/DemoScripts/ExampleDialogueUI.cs#L140-L146

I would be happy to contribute with updated `Yarn.Unity` part because I already updated it in my own project. I made the issue instead of PR to get your feedback first. 

Thank you.
Hello everyone,

We've just pushed a new [markdown document](https://github.com/YarnSpinnerTool/YarnSpinner/blob/master/ROADMAP.md) showing our road map for what we think the future of Yarn Spinner should be.

We really, really want your feedback on that so please shout out any concerns, issues, or thoughts you might have here or in the Slack.
In a new build, when I try to do the taglines command, I get an IndexOutOfBounds error

Indeed, the line number each line gets is not based on the node, but on the entire yarn file...
I based my tests on this yarn file:
[taglinestest.yarn.txt](https://github.com/YarnSpinnerTool/YarnSpinner/files/3676007/taglinestest.yarn.txt)

The error happens in the LineAdder Script around this point:
```
var lines = nodeInfo.body.Split(new string[] { "\r\n", "\n" }, StringSplitOptions.None);

Console.WriteLine("Node: " + line.Value.nodeName);
Console.WriteLine("Get line number: " + line.Value.lineNumber);
Console.WriteLine("All lines length: " + lines.Length);
// Get the original line
var existingLine = lines[line.Value.lineNumber - 1];
Console.WriteLine("Existing Line: " + lines.Length);
```

I've added Console.WriteLine for debugging purposes and get:
```
Node: Node1
Get line number: 6
All lines length: 1
```
"Existing Line" is not printed since the out of bounds happens there
Ability to save, serialize and restore dialogue from some point before it's end.




I'm running the following command and getting the error "The node null does not exist"
```
YarnSpinnerConsole.exe run -d -s Sally -T sally.yarn_lines.csv sally2.yarn.yarn.bytes
Note: Running node Sally
Warning: Yarn Error: The node null does not exist.
Player: Hey, Sally.
Sally: Oh! Hi.
Sally: You snuck up on me.
Sally: Don't do that.
Warning: Yarn Error: The node null does not exist.
Warning: Yarn Error: The node null does not exist.
Options:
1. Anything exciting happen on your watch?
2. See you later.
```

The steps I took
1) Run taglines on the script
2) Run genstrings to create the CSV
3) Compile the program
4) Run the command above.

It works fine if I just run the script without pre-compiling it first. It looks like the error happens on the condition lines such as `<<if not visited("Sally.Watch")>>` because it doesn't seem to find the node correctly.
When I try to use the "taglines" console command, it says "skipping file due to compilation errors."

To debug the problem, I had to add stack trace logging to the console tool (the given error message was not helpful). The program fails when it encounters a custom function of mine.

I poked around the code a bit more, and found this in Main.cs:

```
            // Note that we're passing in with a null library - this means
            // that all function checking will be disabled, and missing funcs
            // will not cause a compile error. If a func IS missing at runtime,
            // THAT will throw an exception.

            // We do this because this tool has no idea about any of the custom
            // functions that you might be using.

            Dialogue d = new Dialogue(null);
```

However, the constructor for Dialogue looks like this...

```
        public Dialogue(Yarn.VariableStorage continuity) {
            this.continuity = continuity;
            loader = new Loader (this);
            library = new Library ();

            library.ImportLibrary (new StandardLibrary ());
```

It seems like the library is set regardless of constructor input. This causes GetFunction() to fail during the parser step.

I'm able to hack around this problem for the moment, but I'm not sure what the proper fix should look like.