Came up in #381.  May not be used?  

It could be deprecated in 1.3.0 and removed in 2.0.
While working on #383, I noticed that links to Javadoc don't work for JDK 11 and later with Scala 2.13.  The warnings in the sbt console bear this out.

```
[warn] shared/src/main/scala/scala/xml/package.scala:11:1: Could not
[warn] find any member to link for "javax.xml.parsers.SAXParser".
[warn] /**
[warn] ^
[warn] shared/src/main/scala/scala/xml/parsing/FactoryAdapter.scala:188:3:
[warn] Could not find any member to link for "org.xml.sax.SAXException".
[warn]   /**
[warn]   ^
[warn] shared/src/main/scala/scala/xml/include/XIncludeException.scala:13:1:
[warn] Could not find any member to link for
[warn] "java.lang.Throwable#getMessage".
[warn] /**
[warn] ^
[warn] shared/src/main/scala/scala/xml/include/sax/EncodingHeuristics.scala:38:3:
[warn] Could not find any member to link for "java.io.IOException".
[warn]   /**
[warn]   ^
```
In order to increase compatibility on JDK versions with modules consider adding Automatic-Module-Name in the MANIFEST.INF along the lines of akka/akka#23960 or perhaps even implement properly the module-info descriptor.
Is this needed any longer?

https://github.com/scala/scala-xml/blob/5dac609d66/build.sbt#L146

Is the scala-compiler dependency an actual dependency?  If the point is to avoid getting a redundant scala-xml on the classpath in this build or downstream users, that shouldn't be a problem with sbt 1.2 or later.  I know there are compiler and reflection tests, but maybe they can be moved elsewhere or sunset.  

If the point is to avoid a redundant scala-xml dependency from the compiler for downstream users, that was fixed in 2.13.  It seems it shouldn't be an issue with 2.12, but it would take an investigation.
Hello everyone, 

I am trying to implement xml validation through the use of an xsd schema. 
I used a code similar to the one provided in the wiki however I find no way to handle the errors thrown during validation.
I think this is done normally through associating an ErrorHandler to the underlying XmlReader instance. Is there a way to do this in scala-xml? 
Putting an unclosed character ref (`&#`) in XML causes an infinite loop.
Example code:

```
import scala.io.Source
import scala.xml.parsing.XhtmlParser
val text = "<html><body>test &# test </body></html>"
XhtmlParser(Source.fromString(text))
```

When an XML file starts like this:

```
<?xml-stylesheet type='text/xsl' href='https://zzz.xsl' alternate='no' title='Default'?>
<rootTag>
      <tag1>
      <tag2>
```

since there is no xml declaration, it gives a warning:

```
:1:6: whitespace expectedstylesheet type='text/xsl' href='https://zzz.xsl' alternate='no' title='Default'?>     ^
:1:6: '?' expected instead of '-'<rootTag xmlns="something" xmlns:xsi="http://www.w3.org/something">     ^
:1:6: '>' expected instead of '-'	<tag1 code="QQ" />     ^
```
And then it processes normally as if tag2 is the first tag. It does not give any error, but parse the file wrongly. If an xml declaration is added it works fine:
```
<?xml version = "1.0" ?>
<?xml-stylesheet type='text/xsl' href='https://zzz.xsl' alternate='no' title='Default'?>
<rootTag>
      <tag1>
      <tag2>
```
Shouldn't it be giving an error, if xml declaration was the issue?

````scala
import scala.xml._
import scala.xml.transform.{RewriteRule, RuleTransformer}

object TransformIssue {
  def addNewElement(): RewriteRule = new RewriteRule {
    override def transform(n: Node): Seq[Node] = n match {
      case <element></element> => <element><new></new></element>
    }
  }

  def addThingElement(): RewriteRule = new RewriteRule {
    override def transform(n: Node): Seq[Node] = n match {
      case <element>{ children@_*}</element> => <element>{ children  }</element>
      case <new></new> => <new><thing></thing></new>
    }
  }

  def change(node: Node): Node =
    new RuleTransformer(
      addNewElement(),
      addThingElement()
    ).transform(node).head

  def changeWorkaround(node: Node): Node = {
    val out1 = new RuleTransformer(
      addNewElement()
    ).transform(node).head

    new RuleTransformer(
      addThingElement()
    ).transform(out1).head
  }

}
````

````scala
import org.scalatest.{FlatSpec, FunSpec}
import org.scalatest._

class TransformIssueSpec extends FlatSpec with Matchers {

  it should "apply transform to created elements" in {
    val output = TransformIssue.change(<element></element>)
    output should be(<element><new><thing></thing></new></element>)
  } // fails

  it should "work the same as the workaround imo" in {
    TransformIssue.change(<element></element>) should equal(TransformIssue.changeWorkaround(<element></element>))
  } // fails

}
````

When we apply a transform with two rewrite rules: the first one adding a new element, the second one adding children to the new element; then the second rewrite rule does not match on the elements added in the first rule.

When we apply the same RewriteRules in two separate RuleTransformers it does add the children to the elements added in the first step.  We would expect the `change` and `changeWorkaround` functions to produce the same output.
after scala/scala#7068 was merged, in the 2.13 community build (https://scala-ci.typesafe.com/job/scala-2.13.x-integrate-community-build/1371/consoleFull) we have:

```
[scala-xml] [error] /home/jenkins/workspace/scala-2.13.x-integrate-community-build/target-0.9.14/project-builds/scala-xml-e1a7e0a64e2727f6b5e8cd3bed61e97ced6504ee/shared/src/main/scala/scala/xml/Utility.scala:47: error during expansion of this match (this is a scalac bug).
[scala-xml] [error] The underlying error was: type mismatch;
[scala-xml] [error]  found   : Seq[scala.xml.Node] (in scala.collection) 
[scala-xml] [error]  required: Seq[scala.xml.Node] (in scala.collection.immutable) 
[scala-xml] [error]   def trim(x: Node): Node = x match {
[scala-xml] [error]                               ^
```

and a few more such errors.

does this indicate that there is code in scala-xml that needs to be adjusted to the new scheme for name-based extractors? or is there a flaw in scala/scala#7068?