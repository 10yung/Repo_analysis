Bumps [handlebars](https://github.com/wycats/handlebars.js) from 4.1.2 to 4.5.3.
<details>
<summary>Changelog</summary>

*Sourced from [handlebars's changelog](https://github.com/wycats/handlebars.js/blob/master/release-notes.md).*

> ## v4.5.3 - November 18th, 2019
> Bugfixes:
> 
> - fix: add "no-prototype-builtins" eslint-rule and fix all occurences - f7f05d7
> - fix: add more properties required to be enumerable - 1988878
> 
> Chores / Build:
> - fix: use !== 0 instead of != 0 - c02b05f
> - add chai and dirty-chai and sinon, for cleaner test-assertions and spies, 
>   deprecate old assertion-methods  - 93e284e, 886ba86, 0817dad, 93516a0
> 
> Security:
> 
> - The properties `__proto__`, `__defineGetter__`, `__defineSetter__` and `__lookupGetter__` 
>   have been added to the list of "properties that must be enumerable".
>   If a property by that name is found and not enumerable on its parent, 
>   it will silently evaluate to `undefined`. This is done in both the compiled template and the "lookup"-helper. 
>   This will prevent new Remote-Code-Execution exploits that have been
>   published recently.
> 
> Compatibility notes: 
> 
> - Due to the security-fixes. The semantics of the templates using
>   `__proto__`, `__defineGetter__`, `__defineSetter__` and `__lookupGetter__` in the respect that those expression now return 
>   `undefined` rather than their actual value from the proto.
> - The semantics have not changed in cases where the properties are  enumerable, as in:
> 
> ```js
> {
>   __proto__: 'some string'
> }
> ```
> 
> - The change may be breaking in that respect, but we still only 
>   increase the patch-version, because the incompatible use-cases
>   are not intended, undocumented and far less important than fixing
>   Remote-Code-Execution exploits on existing systems.
> 
> 
> 
> [Commits](https://github.com/wycats/handlebars.js/compare/v4.5.2...v4.5.3)
> 
> ## v4.5.2 - November 13th, 2019
> # Bugfixes
> 
> - fix: use String(field) in lookup when checking for "constructor" - d541378
> - test: add fluent API for testing Handlebars - c2ac79c
> 
> Compatibility notes:
> - no incompatibility are to be expected
></tr></table> ... (truncated)
</details>
<details>
<summary>Commits</summary>

- [`c819c8b`](https://github.com/wycats/handlebars.js/commit/c819c8b533934d2ac18001d7eb27a3205b00c2f3) v4.5.3
- [`827c9d0`](https://github.com/wycats/handlebars.js/commit/827c9d0747bef7d7f89829779523b6b2dcf3051d) Update release notes
- [`f7f05d7`](https://github.com/wycats/handlebars.js/commit/f7f05d7558e674856686b62a00cde5758f3b7a08) fix: add "no-prototype-builtins" eslint-rule and fix all occurences
- [`1988878`](https://github.com/wycats/handlebars.js/commit/198887808780bbef9dba67a8af68ece091d5baa7) fix: add more properties required to be enumerable
- [`886ba86`](https://github.com/wycats/handlebars.js/commit/886ba86c2f9cc71b7d99b9018fbe2d72a57085cc) test/chore: add chai/expect and sinon to "runtime"-environment
- [`0817dad`](https://github.com/wycats/handlebars.js/commit/0817dad7e72c51d07f7700547d0c69aa79a4976b) test: add sinon as global variable to eslint in the specs
- [`93516a0`](https://github.com/wycats/handlebars.js/commit/93516a0b07026ebd23c84fddf270a0c8b570bc59) test: add sinon.js for spies, deprecate current assertions
- [`93e284e`](https://github.com/wycats/handlebars.js/commit/93e284ed9be1e38c5e6945f15af1ccd689f2ada6) chore: add chai and dirty-chai for better test assertions
- [`c02b05f`](https://github.com/wycats/handlebars.js/commit/c02b05fa819f46bb66c878bebc6e8006408ebd5c) fix: use !== 0 instead of != 0
- [`8de121d`](https://github.com/wycats/handlebars.js/commit/8de121d21c88a6ab877e3a0eec9daaac483f3bf0) v4.5.2
- Additional commits viewable in [compare view](https://github.com/wycats/handlebars.js/compare/v4.1.2...v4.5.3)
</details>
<br />

[![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=handlebars&package-manager=npm_and_yarn&previous-version=4.1.2&new-version=4.5.3)](https://help.github.com/articles/configuring-automated-security-fixes)

Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.

[//]: # (dependabot-automerge-start)
[//]: # (dependabot-automerge-end)

---

<details>
<summary>Dependabot commands and options</summary>
<br />

You can trigger Dependabot actions by commenting on this PR:
- `@dependabot rebase` will rebase this PR
- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it
- `@dependabot merge` will merge this PR after your CI passes on it
- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it
- `@dependabot cancel merge` will cancel a previously requested merge and block automerging
- `@dependabot reopen` will reopen this PR if it is closed
- `@dependabot ignore this [patch|minor|major] version` will close this PR and stop Dependabot creating any more for this minor/major version (unless you reopen the PR or upgrade to it yourself)
- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)
- `@dependabot use these labels` will set the current labels as the default for future PRs for this repo and language
- `@dependabot use these reviewers` will set the current reviewers as the default for future PRs for this repo and language
- `@dependabot use these assignees` will set the current assignees as the default for future PRs for this repo and language
- `@dependabot use this milestone` will set the current milestone as the default for future PRs for this repo and language

You can disable automated security fix PRs for this repo from the [Security Alerts page](https://github.com/stimulusjs/stimulus/network/alerts).

</details>
The old example HTML seems very 4.01 â€”Â unless compatibility with old IE is a goal of Stimulus, moving to more idiomatic, accessible, and user-friendly HTML seems like an improvement.
Using it with [Rollup](https://rollupjs.org) I'm receiving 4 warnings:

```log
(!) `this` has been rewritten to `undefined`
https://rollupjs.org/guide/en/#error-this-is-undefined
node_modules\@stimulus\core\dist\src\application.js
1: var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
                    ^
2:     return new (P || (P = Promise))(function (resolve, reject) {
3:         function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
...and 3 other occurrences
node_modules\@stimulus\core\dist\src\definition.js
1: var __extends = (this && this.__extends) || (function () {
                    ^
2:     var extendStatics = Object.setPrototypeOf ||
3:         ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
...and 1 other occurrence
node_modules\@stimulus\multimap\dist\src\indexed_multimap.js
1: var __extends = (this && this.__extends) || (function () {
                    ^
2:     var extendStatics = Object.setPrototypeOf ||
3:         ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
...and 1 other occurrence
```

I'm using this `rollup.config.js`:

```js
import resolve from 'rollup-plugin-node-resolve'
import commonjs from 'rollup-plugin-commonjs'
import stimulus from 'rollup-plugin-stimulus'

export default {
  input: 'root.js',
  output: {
    format: 'esm',
    dir: 'dist/js'
  },
  plugins: [
    stimulus(),
    resolve({
      browser: true
    }),
    commonjs()
  ]
}
```
I have a stimulus controller that has a button inside of it with a stimulus action associated. When I click the button, it invokes a method in a controller that copies the html of a form I have inside of a template (Also marked with a data-target value) into a another div (again, also marked a data-target value). It works, but as soon you see the form, it immediately disappears.

After adding some console log statements on both the `disconnect()` and `connect()` methods, I see that as soon as I click the button, the controller disconnects and then reconnects, which is what I assume to be the culprit behind my immediately disappearing form.

Is that supposed to happen? I hope that isn't normal behavior. It's a really weird bug. Here's my code:

```ruby
<%= link_to fa_icon('plus'),
           '#',
            class: 'btn btn-sm btn-success',
            data: { action: 'tasklist#newTask' } %>

<div class="card-body text-primary">
    <template data-target='tasklist.taskFormTemplate'>
      <%= simple_form_for Task.new, url: '', remote: true do |f| %>
        <%= f.date_field :start_date %>
        <%= f.date_field :end_date %>
      <% end %>
    </template>
    <div data-target='tasklist.taskFormContainer'>
    </div>
  </div>
```

here is my controller:


```javascript
import { Controller } from "stimulus"

export default class extends Controller {
  static targets = [ 'taskFormTemplate', 'taskFormContainer' ]

  newTask() {
    this.taskFormContainerTarget.innerHTML = this.taskFormTemplateTarget.innerHTML
  }

  connect() {
    console.log('connected')
  }

  disconnect() {
    console.log('disconnect')
  }
}
```
Hi there ðŸ‘‹,

I noticed that this package [includes sourcemaps](https://github.com/stimulusjs/stimulus/blob/a82a8a5dddcc0a15089f269fc4be8a8c36b17b97/packages/tsconfig.build.json#L9), but the mapped files are not actually included in the `npm` package. Would you consider removing `src` from `.npmignore` so that the sourcemaps will work?

If you look at [`@stimulus/core/dist/index.js`](https://unpkg.com/browse/@stimulus/core@1.1.1/dist/index.js), for example, the `sourceMappingURL` decodes to...

```jsc
{ "file":"index.js", "sources":["../index.ts"] }
```

But none of the `*.ts` files are actually included in the package.
Very often the question comes up on how to [pass arguments to Stimulus action methods](https://github.com/stimulusjs/stimulus/issues/64).

Global parameters can be passed to the action using the _data_ API but when a controller has multiple elements and individual parameters (an `id` by example) for each of those elements, it is a common practice to pass the value using the standard _dataset_ API: `event.currentTarget.dataset.id` 

One typical example would be for a set of buttons with `ids` and associated _fetch_ actions 

```html
<div data-controller="items" data-items-base-url="https://api.stimulus.org/upvote/">
  <button data-action="items#upvote" data-id='1'></button>
  <button data-action="items#upvote" data-id='2'></button>
  <button data-action="items#upvote" data-id='3'></button>
</div>
```

```js
...
upvote(e) {
  const id = e.currentTarget.dataset.id
  fetch(this.baseUrl + id, { method: "POST" })
}

get baseUrl() {
  return this.data.get("baseUrl")
}
...
``` 

### Proposal
This PR is a draft proposal for a more concise API by passing all data attributes value of the `currentTarget` as a parameter of the action.
```js 
action(event, data) {}
```

Using basic destructuring the above example can be simplified like this:
```js
...
upvote(e, { id }) {
  fetch(this.baseUrl + id, { method: "POST" })
}
...
``` 

I think this could make it simpler to understand and avoids confusions around `target` and `currentTarget`.
If the element is of a type `HTMLFormElement` we could also pass the `value` at the same time.

Just wanted to propose this for now if you feel this could make sense, I ll add some associated test 

In regards to @sstephenson's answer here: https://discourse.stimulusjs.org/t/possible-to-stop-calls-with-multiple-actions/628 I thought I'd add this to the Reference manual for future generations!
This pull request introduces two new APIs to Stimulus: _Values_ and _Classes_. These APIs are designed to improve upon, and ultimately obviate, the current [Data Map API](https://stimulusjs.org/reference/data-maps). We plan to ship them together in the upcoming Stimulus 2.0 release.

## Values

Most uses of the Data Map API in Basecamp fall under the following categories:

* Storing small strings, such as URLs, dates, or color values
* Keeping track of a numeric index into a collection
* Bootstrapping a controller with a JSON object or array
* Conditioning behavior on a per-controller basis

However, the Data Map API only works with string values. That means we must [manually convert to and from other types](https://stimulusjs.org/handbook/managing-state#reading-initial-state-from-the-dom) as needed. The Values API handles this type conversion work automatically.

### Value properties

The Values API adds support for a static `values` object on controllers. The keys of this object are Data Map keys, and the values declare their data type:

```js
export default class extends Controller {
  static values = {
    url: String,
    refreshInterval: Number,
    loadOnConnect: Boolean
  }

  connect() {
    if (this.loadOnConnectValue) {
      this.load()
    }
  }

  async load() {
    const response = await fetch(this.urlValue)
    // ...
    setTimeout(() => this.load(), this.refreshIntervalValue)
  }
}
```

### Supported types and defaults

This pull request implements support for five built-in types:

Type | Serialized attribute value | Default value
---- | -------------------------- | -------------
Array | `JSON.stringify(array)` | `[]`
Boolean | `boolean.toString()` | `false`
Number | `number.toString()` | `0`
Object | `JSON.stringify(object)` | `{}`
String | Itself | `""`

Each type has a default value. If a value is declared in a controller but its associated data attribute is missing, the getter property will return its type's default.

### Controller properties

Stimulus automatically generates three properties for each entry in the object:

Type | Kind | Property name | Effect
---- | ---- | ------------- | -----------
Boolean, Number, Object, String | Getter | `this.[name]Value` | Reads `data-[identifier]-[name]-value`
Array | Getter | `this.[name]Values` | Reads `data-[identifier]-[name]-values`
Boolean, Number, Object, String | Setter | `this.[name]Value=` | Writes `data-[identifier]-[name]-value`
Array | Setter | `this.[name]Values=` | Writes `data-[identifier]-[name]-values`
Boolean, Number, Object, String | Existential | `this.has[Name]Value` | Tests for presence of `data-[identifier]-[name]-value`
Array | Existential | `this.has[Name]Values` | Tests for presence of `data-[identifier]-[name]-values`

Note that array values are always pluralized, both as properties and as attributes.

### Value changed callbacks

In addition to value properties, the Values API introduces _value changed callbacks_. A value changed callback is a specially named method called by Stimulus whenever a value's data attribute is modified.

To observe changes to a value, define a method named `[name]ValueChanged()`. For example, a slideshow controller with a numeric `index` property might define an `indexValueChanged()` method to display the specified slide:

```js
export default class extends Controller {
  static values = { index: Number }

  indexValueChanged() {
    this.showSlide(this.indexValue)
  }

  // ...
}
```

Stimulus invokes each value changed callback once when the controller is initialized, and again any time the value's data attribute changes.

Even if a value's data attribute is missing when the controller is initialized, Stimulus will still invoke its value changed callback. Use the existential property to determine whether the data attribute is present.

<br>

## Classes

Another common use of the Data Map API is to store CSS class names.

For example, Basecamp's copy-to-clipboard controller applies a CSS class to its element after a successful copy. To avoid inlining a long [BEM string](https://css-tricks.com/bem-101/) in our controller, and to keep things loosely coupled, we declare the class in a `data-clipboard-success-class` attribute:

```html
<div data-controller="clipboard"
     data-clipboard-success-class="copy-to-clipboard--success">
```

and access it using `this.data.get("successClass")` in the controller:

```js
this.element.classList.add(this.data.get("successClass"))
```

The Classes API formalizes and refines this pattern.

### Class properties

The Classes API adds a static `classes` array on controllers. As with [targets](https://stimulusjs.org/reference/targets#definitions), Stimulus automatically adds properties for each class listed in the array:

```js
// clipboard_controller.js
export default class extends Controller {
  static classes = [ "success", "supported" ]

  initialize() {
    if (/* ... */) {
      this.element.classList.add(this.supportedClass)
    }
  }

  copy() {
    // ...
    this.element.classList.add(this.successClass)
  }
}
```

Kind | Property name | Effect
---- | ------------- | -----------
Getter | `this.[name]Class` | Reads the `data-[identifier]-[name]-class` attribute
Existential | `this.has[Name]Class` | Tests whether the `data-[identifier]-[name]-class` attribute is present

#### Declarations are assumed to be present

When you access a class property in a controller, such as `this.supportedClass`, you assert that the corresponding data attribute is present on the controller element. If the declaration is missing, Stimulus throws a descriptive error:

![Screenshot showing error message: "Missing attribute 'data-clipboard-supported-class'"](https://user-images.githubusercontent.com/5355/62792040-685b7700-ba9c-11e9-94f3-a5271634a12f.png)

If a class is optional, you must first use the existential property (e.g. `this.hasSupportedClass`) to determine whether its declaration is present.

<br>


----

## Unifying target attributes

We've made a change to the target attribute syntax to align them with values and classes, and also to make the controller identifier more prominent by moving it into the attribute name.

The original syntax is:

```html
<div data-target="[identifier].[name]">
````

and the updated syntax is:

```html
<div data-[identifier]-target="[name]">
```

### The original syntax is supported but deprecated

Stimulus 2.0 will support both syntaxes, but using the original syntax will display a deprecation message in the developer console. We intend to remove the original syntax in Stimulus 3.0.

----

### Try it out in your application

Update the Stimulus entry in `package.json` to point to the latest development build:

```
"stimulus": "https://github.com/stimulusjs/dev-builds/archive/b8cc8c4/stimulus.tar.gz"
```

