Web API nested entities - throwing System.NotSupported Exception 
while trying to display records on web page (using .include on html)



![web api](https://user-images.githubusercontent.com/40576690/62423109-ad695d00-b6da-11e9-8354-45c39718b0cc.png)

Hi, i have a problem in angular when send data in post method, in my client

```javascript
this.prueba = function (id, nombre) {
        return $http.post(ApiURL + "AEmpleado/prueba", { id: id, nombre: nombre })
            .then(
                function (respuesta) {
                    MensajeServices.MostarMensaje("", "Se elimino el Registro Correctamente", "success", null);
                    //vm.CargarTabla();
                    return respuesta
                },
                function (respuesta) {
                    console.log(respuesta.data.Message);
                    return false;
                }
        );
}
```
in my server

```csharp
[RoutePrefix("api/AEmpleado")]
[MvcStyleBinding]
public class AEmpleadoController : ApiController
{   
    [HttpPost, Route("prueba")]
    public IHttpActionResult prueba(int id, string nombre)
    {
        return Ok();
    }
}
```
The error is:

>Cannot deserialize the current JSON object (e.g. {"name":"value"}) into type 'System.Net.Http.Formatting.FormDataCollection' because the type requires a JSON array (e.g. [1,2,3]) to deserialize correctly.
To fix this error either change the JSON to a JSON array (e.g. [1,2,3]) or change the deserialized type so that it is a normal .NET type (e.g. not a primitive type like integer, not a collection type like an array or List<T>) that can be deserialized from a JSON object. JsonObjectAttribute can also be added to the type to force it to deserialize from a JSON object.
Path 'id', line 1, position 6.

in

```csharp
private class MvcActionBinding : HttpActionBinding
{
    // Read the body upfront , add as a ValueProvider
    public override Task ExecuteBindingAsync(HttpActionContext actionContext, CancellationToken cancellationToken)
    {
        HttpRequestMessage request = actionContext.ControllerContext.Request;
        HttpContent content = request.Content;
        if (content != null)
        {
            FormDataCollection fd = content.ReadAsAsync<FormDataCollection>().Result;
            if (fd != null)
            {
                IValueProvider vp = new NameValuePairsValueProvider(fd, CultureInfo.InvariantCulture);
                request.Properties.Add(Key, vp);
            }
        }

        return base.ExecuteBindingAsync(actionContext, cancellationToken);
    }
}
```

anybody help?
Sorry for my english
This fixes the problem that if you make a response with no content eg. a redirect, HeadContent will be called with a null value and throw a NullReferenceException.

If I have a controller with two GET actions - e.g /api/get and /api/get/:id, when I add `[MvsStyleBinding]` to my controller, I get the following error:

```
An error has occurred.
ExceptionMessage: Multiple actions were found that match the request: 
Get on type MvcStyleBindingProblem.ValuesController
GetById on type MvcStyleBindingProblem.ValuesController
ExceptionType:System.InvalidOperationException
StackTrace:  at System.Web.Http.Controllers.ApiControllerActionSelector.ActionSelectorCacheItem.SelectAction(HttpControllerContext controllerContext)
   at System.Web.Http.Controllers.ApiControllerActionSelector.SelectAction(HttpControllerContext controllerContext)
   at System.Web.Http.ApiController.ExecuteAsync(HttpControllerContext controllerContext, CancellationToken cancellationToken)
   at System.Web.Http.Dispatcher.HttpControllerDispatcher.<SendAsync>d__1.MoveNext()
```

I have a very simple api project here demonstrating the problem:
https://github.com/freeranger/MvcStyleBindingProblem

If I remove the`[MvcStyleBinding]` then the error goes away but obviously the whole point is to actually use it ;)

Probably this topic was described before but I could not find a solution. 

There are two ways to registrate routes in MVC and WebApi projects:
1. MVC Project you call RouteConfig.RegisterRoutes( RouteTable.Routes ) which adds routes into routes table. This way is used in your example (here: http://www.carolynvanslyck.com/blog/2013/01/webapi-route-testing/)
2. WebApi Project by default use GlobalConfiguration.Configure( WebApiConfig.Register ). The following example shows how to register routes in unit tests file.

```
private HttpConfiguration _config;
[SetUp]
public void BeforeEach()
{
    _config = new HttpConfiguration();
    WebApiConfig.Register( _config );
    _config.EnsureInitialized();  // we need to call this method after all other initialization code.
}
```

The problem that your framework is using RouteTable to check routes. If I register routes in second way then RouteTable would be empty and route tests also would fails.

Could you please provide some link or explanation how to register WebApi routes without moving code into RouteTable.Routes method?
I'm not sure that you understand me so please ask a questions if you want.
Thanks in advance!


Right now I'm trying to pass multiple parameters to the action MyRecentActivity, but when I run the test below, an exception is thrown saying that the first parameter was 0, while it was expecting 1. This the method it should be mapping to: 

```
public Result MyRecentActivity(int offset = 1, int limit = 15){}. 
```

Could you shed some light on the problem

```
const string url = "~/MobileServices/Dashboard/Tickets/my_recent_activity/1?limit=15";
url.ShouldMapTo<TicketsController>(x => x.MyRecentActivity(1, 15), "GET");
```
