Add the ability to create pseudo-ttys and to use them to communicate with child processes.
 
PTY support has so far been rejected because of (lack of) Windows support but Windows 10 gained a `CreatePseudoConsole()` kernel32.dll API that does what it says.

It's possible to emulate ptys on older Windows versions but it's [_very_ involved](https://github.com/rprichard/winpty/blob/7e59fe2d09adf0fa2aa606492e7ca98efbc5184e/src/libwinpty/winpty.cc). I doubt we want to go down that road.

There are some platform differences to work out on the UNIX side, see node's [pty_helper.py](https://github.com/nodejs/node/blob/b3189266347fa05395860f9f6e8949e447977284/test/pseudo-tty/pty_helper.py) for examples.

Refs: https://github.com/nodejs/node/issues/31409
See #2638
Can not compile it because of the following lines.

https://github.com/libuv/libuv/blob/7a914e7f3d3d53ccbde50d0933cbaf576720c24e/src/unix/core.c#L536-L542

Since there NO `close$NOCANCEL$UNIX2003` function in iOS SDK, can we changed the first line to `#if defined(__LP64__) || defined(TARGET_OS_IPHONE)`? likes:
```
#if defined(__LP64__) || defined(TARGET_OS_IPHONE)
  extern int close$NOCANCEL(int);
  return close$NOCANCEL(fd);
#else
  extern int close$NOCANCEL$UNIX2003(int);
  return close$NOCANCEL$UNIX2003(fd);
#endif
```

ip_mreq_source struct are not defined in Android NDK <= 16, regardless
 of the API level.

Fix proposal for #2633 
```
not ok 191 - poll_unidirectional
# timeout
# Output from process `poll_unidirectional`: (no output)
```
observed https://ci.nodejs.org/job/libuv-test-commit-osx/1708/ on origin/ibmi_ifaddr at https://github.com/libuv/libuv/commit/3162efe20520d33a33d9ef31d59d61a2c0f6ffc2#diff-564d321f5718b4ed067d21caf87d4b59
<!--
If you want to report a bug, you are in the right place!

If you need help or have a question, go here:
https://github.com/libuv/help/issues/new

If you are reporting a libuv test failure, please ensure that you are not
running the test as root.

Please include code that demonstrates the bug and keep it short and simple.
-->
* **Version**: 1.x
* **Platform**:  Linux Ubu 5.0.0-37-generic #40~18.04.1-Ubuntu SMP Thu Nov 14 12:06:39 UTC 2019 x86_64 x86_64 x86_64 GNU/Linux


When following your build instructions:
```
jzer0@Ubu:/media/jzer0/Dev/git/libuv$ source ./android-configure-arm64 /media/jzer0/Dev/development/android-ndk-r15c gyp 23
HOST_OS=linux
HOST_EXE=
HOST_ARCH=x86_64
HOST_TAG=linux-x86_64
HOST_NUM_CPUS=1
BUILD_NUM_CPUS=2
Toolchain installed to /media/jzer0/Dev/git/libuv/android-toolchain-arm64.
['-Dtarget_arch=arm64', '-DOS=android', '-f', 'make-android', '-I', 'common.gypi', 'test/test.gyp', '--depth=.', '-Goutput_dir=/media/jzer0/Dev/git/libuv/out', '--generator-output', '/media/jzer0/Dev/git/libuv/out', '-Dhost_arch=x64', '-Duv_library=static_library']


jzer0@Ubu:/media/jzer0/Dev/git/libuv$ make -C out
make: Entering directory `/media/jzer0/Dev/git/libuv/out'
  CC(target) /media/jzer0/Dev/git/libuv/out/Debug/obj.target/libuv/src/unix/udp.o
../src/unix/udp.c: In function 'uv__udp_set_source_membership4':
../src/unix/udp.c:673:68: error: request for member 's_addr' in something not a structure or union
     err = uv_inet_pton(AF_INET, interface_addr, &mreq.imr_interface.s_addr);
                                                                    ^
../src/unix/udp.c:677:23: error: request for member 's_addr' in something not a structure or union
     mreq.imr_interface.s_addr = htonl(INADDR_ANY);
                       ^
../src/unix/udp.c:680:21: error: request for member 's_addr' in something not a structure or union
   mreq.imr_multiaddr.s_addr = multicast_addr->sin_addr.s_addr;
                     ^
../src/unix/udp.c:681:22: error: request for member 's_addr' in something not a structure or union
   mreq.imr_sourceaddr.s_addr = source_addr->sin_addr.s_addr;
                      ^
make: *** [/media/jzer0/Dev/git/libuv/out/Debug/obj.target/libuv/src/unix/udp.o] Error 1
make: Leaving directory `/media/jzer0/Dev/git/libuv/out'
```
While thinking about issues we could address in v2, I was looking at the set of types we have that keep around `unused` fields or need to malloc some extra fields to hang off of it in order to make fixes and enhancements without breaking ABI (sizeof).

I'd like to request feedback on a proposal to make the libuv structs more opaque: instead of declaring the whole struct in the public header, have libuv only declare the public fields there. To allocate a struct, you must call the appropriate libuv function. For instance, instead of:
```c
uv_tty_t* tty = malloc(sizeof(uv_tty_t));
uv_tty_init(tty, UV_STDIN_FD);
```
You'd write:
```c
uv_tty_t* uv_tty_new(UV_STDIN_FD);
```
Where `uv_tty_t` is just:
```c
typedef struct uv_handle_s {
  void* data; /* user pointer */
  uv_loop_t* loop; /* read-only */
  uv_handle_type type; /* read-only */
} uv_handle_t;
typedef struct uv_handle_s uv_handle_t;
typedef struct uv_handle_s uv_stream_t;
typedef struct uv_handle_s uv_tty_t;
```

This would have been more constraining a few years ago, but now all of these public fields should have accessors, so completely opaque objects may be entirely acceptable.

And similar for `uv_req_t` (though a few `req_t` subtypes may expose some additional fields).

Transition strategy I think could also be pretty reasonable: For v1.x, we can introduce the new API as an optional usage. If you use the `uv_*_new` API, then `uv_close` will automatically free the memory after returning from the user callback. Otherwise, everything'd continue working as it does now. In v2.x, the old `uv_*_init` APIs would be removed, making it possible for libuv to then freely alter fields.
On IBMi PASE, we need to skip some file permission tests for `root`.
And the file stat of symbolic links are different as well.
The mutex also needs to protect the access to the state->loop variable,
since that's owned by the child thread and will be destroyed as soon as
it processes our message.

This previously caused shutdown of libuv loops (especially the stress test fs_event_error_reporting) to segfault occasionally.

Fixes: https://github.com/libuv/libuv/issues/2625
Observed locally on 33cb9f4a3ff6aa44296690a87af5b781946de13f about half of the time in repeated runs. Cf. #2071
```
./test/run-tests fs_event_error_reporting
2020-01-13 10:56 run-tests[62452] (FSEvents.framework) FSEventStreamStart: register_with_server: ERROR: f2d_register_rpc() => (null) (-21)
Segmentation fault: 11
```

FWIW, this is a stress test to make sure that this code is written correctly. So the message (or some message) is expected, the segfault is the issue.

```
Process 62452 stopped
* thread #1, queue = 'com.apple.main-thread', stop reason = EXC_BAD_ACCESS (code=EXC_I386_GPFLT)
    frame #0: 0x00007fff338cb69a CoreFoundation`CFRunLoopWakeUp + 96
CoreFoundation`CFRunLoopWakeUp:
->  0x7fff338cb69a <+96>:  cmpl   $0x0, 0xc(%rax)
    0x7fff338cb69e <+100>: je     0x7fff338cb6c9            ; <+143>
    0x7fff338cb6a0 <+102>: movq   0x5b18ba39(%rip), %rax    ; (void *)0x00007fff95fb0070: __stack_chk_guard
    0x7fff338cb6a7 <+109>: movq   (%rax), %rax
Target 0: (run-tests) stopped.
(lldb) bt
* thread #1, queue = 'com.apple.main-thread', stop reason = EXC_BAD_ACCESS (code=EXC_I386_GPFLT)
  * frame #0: 0x00007fff338cb69a CoreFoundation`CFRunLoopWakeUp + 96
    frame #1: 0x00000001006aac6e libuv.dylib`uv__fsevents_loop_delete [inlined] uv__cf_loop_signal(loop=0x00007ffeefb1a7e0, handle=<unavailable>, type=kUVCFLoopSignalRegular) at fsevents.c:807:3 [opt]
    frame #2: 0x00000001006aabec libuv.dylib`uv__fsevents_loop_delete(loop=0x00007ffeefb1a7e0) at fsevents.c:705 [opt]
    frame #3: 0x00000001006a1097 libuv.dylib`uv__loop_close(loop=0x00007ffeefb1a7e0) at loop.c:148:3 [opt]
    frame #4: 0x000000010069a108 libuv.dylib`uv_loop_close(loop=0x00007ffeefb1a7e0) at uv-common.c:766:3 [opt]
    frame #5: 0x0000000100008ca4 run-tests`run_test_fs_event_error_reporting at test-fs-event.c:1127:5 [opt]
    frame #6: 0x00007fff5f8373d5 libdyld.dylib`start + 1
    frame #7: 0x00007fff5f8373d5 libdyld.dylib`start + 1
(lldb) up
libuv.dylib was compiled with optimization - stepping may behave oddly; variables may not be available.
frame #1: 0x00000001006aac6e libuv.dylib`uv__fsevents_loop_delete [inlined] uv__cf_loop_signal(loop=0x00007ffeefb1a7e0, handle=<unavailable>, type=kUVCFLoopSignalRegular) at fsevents.c:807:3 [opt]
   804 	  state = loop->cf_state;
   805 	  assert(state != NULL);
   806 	  pCFRunLoopSourceSignal(state->signal_source);
-> 807 	  pCFRunLoopWakeUp(state->loop);
   808 	
   809 	  return 0;
   810 	}
```

This is inside uv_loop_close while closing loop 107 of 512.