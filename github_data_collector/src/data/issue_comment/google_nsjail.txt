
I'm running the following command for a CTF binary `chal`. `chal` is basically an echo server, so after the following, I connect to it with netcat and get the last two lines below. Anything sent is not returned. I'm very new to nsjail and I'm not sure how to troubleshoot the problem. The binary works fine without nsjail of course.

`chal` is 64bit and uses the normal socket functions (socket, listen, bind. connect, send, recv, write, read, etc..), `system()`, `fork()`, `dlsym()`, `memset()` and others. Nothing really out of the ordinary.

This is on Ubuntu Server 18.04 using commit `a78019993fe7cffd9865300036133b8a54a23019`.

```
$ nsjail -Ml --port 50085 --cwd /home/user/ctf_final/ --chroot /  -R /bin -R /lib -R /lib32 -R /lib64 --rw -- /home/user/ctf_final/chal
[I][2019-10-25T21:21:35-0500] Mode: LISTEN_TCP
[I][2019-10-25T21:21:35-0500] Jail parameters: hostname:'NSJAIL', chroot:'/', process:'/home/user/ctf_final/chal', bind:[::]:50085, max_conns_per_ip:0, time_limit:0, personality:0, daemonize:false, clone_newnet:true, clone_newuser:true, clone_newns:true, clone_newpid:true, clone_newipc:true, clone_newuts:true, clone_newcgroup:true, keep_caps:false, disable_no_new_privs:false, max_cpus:0
[I][2019-10-25T21:21:35-0500] Mount: '/' -> '/' flags:MS_BIND|MS_REC|MS_PRIVATE type:'' options:'' dir:true
[I][2019-10-25T21:21:35-0500] Mount: '/bin' -> '/bin' flags:MS_RDONLY|MS_BIND|MS_REC|MS_PRIVATE type:'' options:'' dir:true
[I][2019-10-25T21:21:35-0500] Mount: '/lib' -> '/lib' flags:MS_RDONLY|MS_BIND|MS_REC|MS_PRIVATE type:'' options:'' dir:true
[I][2019-10-25T21:21:35-0500] Mount: '/lib32' -> '/lib32' flags:MS_RDONLY|MS_BIND|MS_REC|MS_PRIVATE type:'' options:'' dir:true
[I][2019-10-25T21:21:35-0500] Mount: '/lib64' -> '/lib64' flags:MS_RDONLY|MS_BIND|MS_REC|MS_PRIVATE type:'' options:'' dir:true
[I][2019-10-25T21:21:35-0500] Mount: '/proc' flags:MS_RDONLY type:'proc' options:'' dir:true
[I][2019-10-25T21:21:35-0500] Uid map: inside_uid:1000 outside_uid:1000 count:1 newuidmap:false
[I][2019-10-25T21:21:35-0500] Gid map: inside_gid:1000 outside_gid:1000 count:1 newgidmap:false
[I][2019-10-25T21:21:35-0500] Listening on [::]:50085
[I][2019-10-25T21:21:39-0500] New connection from: [::ffff:192.168.131.1]:54972 on: [::ffff:192.168.131.150]:50085
[I][2019-10-25T21:21:39-0500] Executing '/home/user/ctf_final/chal' for '[::ffff:192.168.131.1]:54972'
```
When I first saw `--chroot` with `--rw`, I was under the impression that if I do `--chroot /`, then the whole system is mounted RO, so nothing can be modified (this is how `--ro-bind` in bubblewrap works). If not for the quick test, I'd still assume that's the case. Then I saw `--bindmount_ro`, but it seems that it works the same way.

While my case is not important, it's not impossible that some other users could misinterpret those options the same way I did (especially `--bindmount_ro` if they've used bubblewrap before).

Now I see that this behaviour is intended, but maybe the doc could be improved a bit? (I don't really know how)
Is there any plan to add report statistics of the execution? Something like the cpu and wall time elapsed, max memory usage, exit code, kill signal, etc. I think this can be added easily with cgroups, for example. I'm thinking something like what [ioi/isolate](https://github.com/ioi/isolate) does with the [meta file](https://github.com/ioi/isolate/blob/master/isolate.1.txt#L248). Or is this outside the scope of the project?
I couldn't find a simple tool that defines the syscalls, permissions of a program, etc.
I created this simple script, based on strace and grep, that get's a list of all the unique syscalls of a binary, on the run.
This way, one can whitelist some flows of a program easily, without disassembling.
I'd be happy to create something bigger then that, a solution for nsjail+firejail policies definitions.

https://github.com/avilum/syscalls
It would be awesome if you could add support to join an existing namespaces üëç 
Hi,
While running nodejs script inside nsjail, execution fails with following error.

contents of test.js
```javascript
console.log('test');
```
Verbose output follows:

```
# ./nsjail/nsjail -Me  -c /  -v  --keep_caps -- node test.js
[2018-05-20T19:21:12+0000] Mode: STANDALONE_EXECVE
[2018-05-20T19:21:12+0000] Jail parameters: hostname:'NSJAIL', chroot:'/', process:'node', bind:[::]:0, max_conns_per_ip:0, time_limit:0, personality:0, daemonize:false, clone_newnet:true, clone_newuser:true, clone_newns:true, clone_newpid:true, clone_newipc:true, clonew_newuts:true, clone_newcgroup:true, keep_caps:true, disable_no_new_privs:false, max_cpus:0
[2018-05-20T19:21:12+0000] Mount point: src:'/' dst:'/' flags:'MS_RDONLY|MS_BIND|MS_REC|MS_PRIVATE|0' type:'' options:'' is_dir:true
[2018-05-20T19:21:12+0000] Mount point: src:'' dst:'/proc' flags:'MS_RDONLY|0' type:'proc' options:'' is_dir:true
[2018-05-20T19:21:12+0000] Uid map: inside_uid:0 outside_uid:0 count:1 newuidmap:false
[2018-05-20T19:21:12+0000] [W][13820] void cmdline::logParams(nsjconf_t*)():254 Process will be UID/EUID=0 in the global user namespace, and will have user root-level access to files
[2018-05-20T19:21:12+0000] Gid map: inside_gid:0 outside_gid:0 count:1 newgidmap:false
[2018-05-20T19:21:12+0000] [W][13820] void cmdline::logParams(nsjconf_t*)():265 Process will be GID/EGID=0 in the global user namespace, and will have group root-level access to files
[2018-05-20T19:21:12+0000] [D][13820] bool nsjailSetSigHandler(int)():58 Setting sighandler for signal SIGINT (2)
[2018-05-20T19:21:12+0000] [D][13820] bool nsjailSetSigHandler(int)():58 Setting sighandler for signal SIGQUIT (3)
[2018-05-20T19:21:12+0000] [D][13820] bool nsjailSetSigHandler(int)():58 Setting sighandler for signal SIGUSR1 (10)
[2018-05-20T19:21:12+0000] [D][13820] bool nsjailSetSigHandler(int)():58 Setting sighandler for signal SIGALRM (14)
[2018-05-20T19:21:12+0000] [D][13820] bool nsjailSetSigHandler(int)():58 Setting sighandler for signal SIGCHLD (17)
[2018-05-20T19:21:12+0000] [D][13820] bool nsjailSetSigHandler(int)():58 Setting sighandler for signal SIGTERM (15)
[2018-05-20T19:21:12+0000] [D][13820] bool nsjailSetSigHandler(int)():58 Setting sighandler for signal SIGTTIN (21)
[2018-05-20T19:21:12+0000] [D][13820] bool nsjailSetSigHandler(int)():58 Setting sighandler for signal SIGTTOU (22)
[2018-05-20T19:21:12+0000] [D][13820] void subproc::runChild(nsjconf_t*, int, int, int)():405 Entering namespace with flags:CLONE_NEWNS|CLONE_NEWCGROUP|CLONE_NEWUTS|CLONE_NEWIPC|CLONE_NEWUSER|CLONE_NEWPID|CLONE_NEWNET|SIGUNKNOWN(0)
[2018-05-20T19:21:12+0000] [D][13820] bool util::writeBufToFile(const char*, const void*, size_t, int)():109 Written '4' bytes to '/proc/13820/setgroups'
[2018-05-20T19:21:12+0000] [D][13820] bool user::gidMapSelf(nsjconf_t*, pid_t)():146 Writing '0 0 1
' to '/proc/13820/gid_map'
[2018-05-20T19:21:12+0000] [D][13820] bool util::writeBufToFile(const char*, const void*, size_t, int)():109 Written '6' bytes to '/proc/13820/gid_map'
[2018-05-20T19:21:12+0000] [D][13820] bool user::uidMapSelf(nsjconf_t*, pid_t)():118 Writing '0 0 1
' to '/proc/13820/uid_map'
[2018-05-20T19:21:12+0000] [D][13820] bool util::writeBufToFile(const char*, const void*, size_t, int)():109 Written '6' bytes to '/proc/13820/uid_map'
[2018-05-20T19:21:12+0000] [D][13820] bool user::initNsFromChild(nsjconf_t*)():240 setgroups(0, NULL)
[2018-05-20T19:21:12+0000] [D][13820] bool user::initNsFromChild(nsjconf_t*)():243 setgroups(NULL) failed: Operation not permitted
[2018-05-20T19:21:12+0000] [D][13820] bool user::setResGid(gid_t)():49 setresgid(0)
[2018-05-20T19:21:12+0000] [D][13820] bool user::setResUid(uid_t)():65 setresuid(0)
[2018-05-20T19:21:12+0000] [D][13820] bool pid::initNs(nsjconf_t*)():44 Creating a dummy 'init' process
[2018-05-20T19:21:12+0000] [D][13820] pid_t subproc::cloneProc(uintptr_t)():480 Cloning process with flags:CLONE_FS|SIGUNKNOWN(0)
[2018-05-20T19:21:12+0000] [D][13820] pid_t subproc::cloneProc(uintptr_t)():480 Cloning process with flags:CLONE_FS|SIGCHLD
[2018-05-20T19:21:12+0000] [D][2] bool mnt::mkdirAndTest(const char*)():270 Couldn't create '/run/user/0/nsjail.root' directory: No such file or directory
[2018-05-20T19:21:12+0000] [D][2] bool mnt::mkdirAndTest(const char*)():277 Created accessible directory in '/tmp/nsjail.root'
[2018-05-20T19:21:12+0000] [D][2] bool mnt::mkdirAndTest(const char*)():270 Couldn't create '/run/user/0/nsjail.tmp' directory: No such file or directory
[2018-05-20T19:21:12+0000] [D][2] bool mnt::mkdirAndTest(const char*)():277 Created accessible directory in '/tmp/nsjail.tmp'
[2018-05-20T19:21:12+0000] [D][2] bool mnt::mountPt(mount_t*, const char*, const char*)():124 Mounting 'src:'/' dst:'/' flags:'MS_RDONLY|MS_BIND|MS_REC|MS_PRIVATE|0' type:'' options:'' is_dir:true'
[2018-05-20T19:21:12+0000] [D][2] bool mnt::mountPt(mount_t*, const char*, const char*)():124 Mounting 'src:'' dst:'/proc' flags:'MS_RDONLY|0' type:'proc' options:'' is_dir:true'
[2018-05-20T19:21:12+0000] [D][2] bool mnt::remountRO(const mount_t&)():259 Re-mounting R/O '/' (flags:MS_RDONLY|MS_REMOUNT|MS_BIND|MS_RELATIME|0)
[2018-05-20T19:21:12+0000] [D][2] bool mnt::remountRO(const mount_t&)():259 Re-mounting R/O '/proc' (flags:MS_RDONLY|MS_NODEV|MS_REMOUNT|MS_BIND|MS_RELATIME|0)
[2018-05-20T19:21:12+0000] [D][13820] bool uts::initNs(nsjconf_t*)():36 Setting hostname to 'NSJAIL'
[2018-05-20T19:21:12+0000] [D][13820] bool caps::initNsKeepCaps(cap_user_data_t)():180 Adding the following capabilities to the inheritable set: CAP_CHOWN CAP_DAC_OVERRIDE CAP_DAC_READ_SEARCH CAP_FOWNER CAP_FSETID CAP_KILL CAP_SETGID CAP_SETUID CAP_SETPCAP CAP_LINUX_IMMUTABLE CAP_NET_BIND_SERVICE CAP_NET_BROADCAST CAP_NET_ADMIN CAP_NET_RAW CAP_IPC_LOCK CAP_IPC_OWNER CAP_SYS_MODULE CAP_SYS_RAWIO CAP_SYS_CHROOT CAP_SYS_PTRACE CAP_SYS_PACCT CAP_SYS_ADMIN CAP_SYS_BOOT CAP_SYS_NICE CAP_SYS_RESOURCE CAP_SYS_TIME CAP_SYS_TTY_CONFIG CAP_MKNOD CAP_LEASE CAP_AUDIT_WRITE CAP_AUDIT_CONTROL CAP_SETFCAP CAP_MAC_OVERRIDE CAP_MAC_ADMIN CAP_SYSLOG CAP_WAKE_ALARM CAP_BLOCK_SUSPEND
[2018-05-20T19:21:12+0000] [D][13820] bool caps::initNsKeepCaps(cap_user_data_t)():199 Added the following capabilities to the ambient set: CAP_CHOWN CAP_DAC_OVERRIDE CAP_DAC_READ_SEARCH CAP_FOWNER CAP_FSETID CAP_KILL CAP_SETGID CAP_SETUID CAP_SETPCAP CAP_LINUX_IMMUTABLE CAP_NET_BIND_SERVICE CAP_NET_BROADCAST CAP_NET_ADMIN CAP_NET_RAW CAP_IPC_LOCK CAP_IPC_OWNER CAP_SYS_MODULE CAP_SYS_RAWIO CAP_SYS_CHROOT CAP_SYS_PTRACE CAP_SYS_PACCT CAP_SYS_ADMIN CAP_SYS_BOOT CAP_SYS_NICE CAP_SYS_RESOURCE CAP_SYS_TIME CAP_SYS_TTY_CONFIG CAP_MKNOD CAP_LEASE CAP_AUDIT_WRITE CAP_AUDIT_CONTROL CAP_SETFCAP CAP_MAC_OVERRIDE CAP_MAC_ADMIN CAP_SYSLOG CAP_WAKE_ALARM CAP_BLOCK_SUSPEND
[2018-05-20T19:21:12+0000] [D][13820] bool cpu::initCpu(nsjconf_t*)():67 No max_cpus limit set
[2018-05-20T19:21:12+0000] [D][13820] bool contain::containMakeFdsCOEProc(nsjconf_t*)():194 open('/proc/self/fd', O_DIRECTORY|O_RDONLY|O_CLOEXEC): No such file or directory
[2018-05-20T19:21:12+0000] [D][13820] bool contain::containMakeFdsCOENaive(nsjconf_t*)():176 FD=0 will be passed to the child process
[2018-05-20T19:21:12+0000] [D][13820] bool contain::containMakeFdsCOENaive(nsjconf_t*)():176 FD=1 will be passed to the child process
[2018-05-20T19:21:12+0000] [D][13820] bool contain::containMakeFdsCOENaive(nsjconf_t*)():176 FD=2 will be passed to the child process
[2018-05-20T19:21:12+0000] Executing '/var/vcap/packages/node/bin/node' for '[STANDALONE MODE]'
[2018-05-20T19:21:12+0000] [D][13820] int subproc::subprocNewProc(nsjconf_t*, int, int, int, int)():175  Arg: '/var/vcap/packages/node/bin/node'
[2018-05-20T19:21:12+0000] [D][13820] int subproc::subprocNewProc(nsjconf_t*, int, int, int, int)():175  Arg: '-r'
[2018-05-20T19:21:12+0000] [D][13820] int subproc::subprocNewProc(nsjconf_t*, int, int, int, int)():175  Arg: 'test.js'
node[13820]: pthread_create: Invalid argument

#
# Fatal error in heap setup
# Allocation failed - process out of memory
#

Illegal instruction
```
How to launch a process with a custom selinux label?
From my very coarse understanding of macvlan, it doesn't seem possible to use it if the adapter is virtualized or otherwise allow for multiple MAC addresses (e.g. on VMWare or a cloud hosting provider).

Either I misunderstand how to configure macvlan in these scenarios (and I hope I do!), or is there an alternative to macvlan for forwarding network packets to the jail?
### Question of use
**what's the best way to integrate nsjail with systemd?** 
systemd has some features that overlaps with nsjail and could conflict
ideas:
* nsjail as setuid, capabilities?
* systemd unit running as root
* dont use systemd security features at all
* ....