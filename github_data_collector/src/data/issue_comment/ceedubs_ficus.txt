

Ficus seems awesome at reading config files, but what about writing or updating them? There is nearly no reference to how it writes back.

I would be helpful if ArbitraryTypeReader offered a mode/setting that adds a runtime check that all keys for a Config object were mapped into the instantiation parameters successfully and that no keys were left un-mapped after instantiation. Current behavior silently ignores Config keys that don't match a parameter when that parameter is optional (Option or default value), allowing simple typo bugs that could be caught at instantiation time to slip into runtime.

Example:

``` scala
case class Test(foo: String = "foo", bar: Option[String])

val cfg = ConfigFactory.parseString("""
    test {
        fooTypo: overrideFoo
        barTypo: overrideBar
    }
    """)                                            

val test = cfg.as[Test]("test")  
//> test  : worksheet.Test = Test(foo,None)
// note default values are not overridden

```

This is a draft PR to implement #7 using [Guava's `CaseFormat` class](http://docs.guava-libraries.googlecode.com/git/javadoc/com/google/common/base/CaseFormat.html) for the camelCase to hyphen-case conversion. 

Created separate `HyphenCaseArbitraryTypeReader` trait and object (existing `ArbitraryTypeReader` API/behavior is unchanged) that invokes a new macro that specifies a hyphen-case `NameMapper` trait implementation that gets passed down to the `extractMethodArgsFromConfig()` method. Added a test case to `ArbitraryTypeReaderSpec`.

Probably could be reorganized a bit. Please advise.

I have an example like this:

```
 "load embedded config with ficus" in {
      import net.ceedubs.ficus.readers.ArbitraryTypeReader._
      import net.ceedubs.ficus.Ficus._
      val config = ConfigFactory.parseString(
        """a { value = 2 }
          |b { value = 3 }""".stripMargin)

      case class Conf(value:Int)

      config.as[Conf]("a").value must_==(2)
      config.as[Conf]("b").value must_==(3)

      def getConf(config:Config) : Conf = {
        config.as[Conf]
      }

      val a:Conf = getConf(config.getConfig("a"))
      val b:Conf = getConf(config.getConfig("b"))
    }
```

where 'getConf' does not compile. What I want is to make 'getConf' method working as a config parser, which is given config part only, without knowing what the surrounding  key was.

currently I nned to do config.as[Conf]("key") or else I do not get a 'Conf' instance.

is it something missing in Ficus, or am I doing something wrong?

[HOCON specification](https://github.com/typesafehub/config/blob/master/HOCON.md#hyphen-separated-vs-camelcase) recommends `hyphen-separated` settings over `camelCase`

Using case classes like the following works

```
    case class MySetting(`hyphen-separated-setting`: String)
```

but it is a bit clumsy in the source code.

Wouldn't it be nice to have an option to automagically convert `camelCase` into `hyphen-separated`?
