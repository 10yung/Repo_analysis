I'm trying to build a dynamic module for use with the standard RHEL 8 1.14.1 nginx deploy. 
When I run ./configure with the values scraped directly from the nginx -V command the compile gets casting errors.

The code compiles when using the --with-compat configuration flag, but is then binary incompatible with the standard RHEL 8 nginx since that was not compiled with the --with-compat flag. 

There are four cast errors in ngx_stream_script.c (lines 590, 680, 770, and 862). 
Errors are all:
`cast between incompatible function types from ‘size_t (*)(ngx_stream_script_engine_t *)’ {aka ‘long unsigned int (*)(struct <anonymous> *)’} to ‘void (*)(ngx_stream_script_engine_t *)’ {aka ‘void (*)(struct <anonymous> *)’} [-Werror=cast-function-type]`


Currently the documentation specifies:

> Existing response headers with the same name are always overridden. If you want to add headers incrementally, use the standard add_header directive instead.

But the `add_header` has the drawback that it removes ALL previously defined `add_headers` in upper sections.

It could be very useful to add parameters to an already defined header.  For example, we can have a global `Vary`, but need to add more itens just inside a location.  Or we may want to expand headers received from a proxy.
`header_filter_by_lua_block` can not unset header if set by `more_set_headers`

Example:
```
more_set_headers 'test: test';

header_filter_by_lua_block {
    -- some custom logic to unset previously set header from
    -- upstream or by more_set_headers
    if 1 = 1 then
        ngx.header["test"] = nil
    end
}


```
I found a problem: if I use the following construction, then the header is missing in the answer:
```
location {
  include /etc/nginx/default.d/cors.conf;
  ..
}
```

/etc/nginx/default.d/cors.conf:
```
more_set_headers 'Access-Control-Allow-Origin: *';
more_set_headers 'Access-Control-Allow-Methods: GET, POST, OPTIONS, PUT, DELETE';
more_set_headers 'Access-Control-Allow-Headers: DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range';
more_set_headers 'Access-Control-Expose-Headers: Content-Length,Content-Range';

if ( $request_method = 'OPTIONS' ) {
  more_set_headers 'Access-Control-Max-Age: 1728000';
  more_set_headers 'Content-Type: text/plain; charset=utf-8';
  more_set_headers 'Content-Length: 0';
  return 204;
}
```

The answer is present only the first part to the block 'if'

When using schemes 'include -> more_set_headers' and 'if -> more_set_headers' all heders will be added correctly.

nginx version 1.17.0
headers-more-nginx-module 0.33

```
# nginx -V
nginx version: nginx/1.17.0
built by gcc 4.8.5 20150623 (Red Hat 4.8.5-36) (GCC) 
built with LibreSSL 2.9.2
TLS SNI support enabled
configure arguments: --prefix=/var/www/html --sbin-path=/usr/sbin/nginx --modules-path=/usr/lib64/nginx/modules/ --conf-path=/etc/nginx/nginx.conf --error-log-path=/var/log/nginx/error.log --http-log-path=/var/log/nginx/access.log --http-client-body-temp-path=/var/lib/nginx/tmp/client_body --http-proxy-temp-path=/var/lib/nginx/tmp/proxy --http-fastcgi-temp-path=/var/lib/nginx/tmp/fastcgi --http-uwsgi-temp-path=/var/lib/nginx/tmp/uwsgi --http-scgi-temp-path=/var/lib/nginx/tmp/scgi --pid-path=/var/run/nginx.pid --lock-path=/var/lock/subsys/nginx --user=nginx --group=nginx --with-threads --with-file-aio --with-http_ssl_module --with-http_v2_module --with-http_realip_module --with-http_addition_module --with-http_xslt_module --with-http_image_filter_module --with-http_geoip_module --with-http_sub_module --with-http_dav_module --with-http_flv_module --with-http_mp4_module --with-http_gunzip_module --with-http_gzip_static_module --with-http_auth_request_module --with-http_random_index_module --with-http_secure_link_module --with-http_degradation_module --with-http_stub_status_module --with-http_perl_module --with-mail --with-mail_ssl_module --with-stream --with-stream_ssl_module --with-pcre --with-openssl=./libressl-2.9.2 --add-module=ngx_devel_kit-0.3.1rc1 --add-module=lua-nginx-module-0.10.15 --add-module=njs-0.3.2/nginx --add-module=nginx-module-vts-0.1.18 --add-module=ngx_brotli --add-module=ngx_cache_purge-2.3 --add-module=ngx_http_geoip2_module-3.2 --add-module=echo-nginx-module-0.61 --add-module=nginx_upstream_check_module --add-module=nginx-auth-ldap-git20170725 --add-module=headers-more-nginx-module-0.33 --add-module=nginx-vod-module-1.24 --with-cc-opt='-O2 -g -pipe -Wall -Wp,-D_FORTIFY_SOURCE=2 -fexceptions -fstack-protector-strong --param=ssp-buffer-size=4 -grecord-gcc-switches -m64 -mtune=generic -DNGX_HAVE_MD5=0 -DNGX_LUA_USE_ASSERT -DNGX_LUA_ABORT_AT_PANIC -I/usr/include/luajit-2.0 -I/usr/include/httpd' --with-ld-opt='-Wl,-E -lrt'
```

server {
...
location / {
...
more_set_input_headers 'myheader: test123';
..
}
...
}

html-code:  img src="http://x.x.x.x:xxxx/test/1.jpg"

it doesn't send request header to x.x.x.x?
I was using nginx 1.13.6 with headers_more_module to remove the "Server: nginx" header from all requests. Now, I have recompiled nginx with ngx_pagespeed module using the following command: 

`bash <(curl -f -L -sS https://ngxpagespeed.com/install) \ --nginx-version latest `

The header starts to show up again after this(not shown earlier). When pagespeed is disabled, the header is not shown anymore. Is there anything that can be done to stop showing the headers when pagespeed is enabled?
`more_set_input_headers` [pushes](https://github.com/openresty/headers-more-nginx-module/blob/4512b82a8230892388811bb4510f00380b30b29e/src/ngx_http_headers_more_headers_in.c#L315) to the `request->headers_in.headers` list. 

While it behaves as expected most of the time, according to [this post](http://mailman.nginx.org/pipermail/nginx-devel/2018-March/010988.html), you're not allowed to modify `headers_in` like that.
Hello.
This PR is about the issue #60 for @SamMousa . It would add header if not present the specified header.
new option (-i) usage as the following:

``` bash
 # add input header X-Foo *only* if it `X-Foo` doesnt exist
 more_set_input_headers -i 'X-Foo: howdy';

 # add output header X-Foo *only* if it `X-Foo` doesnt exist
 more_set_headers -i 'X-Foo: howdy';
```

@agentzh please review this PR :grin:

This is the Copyright & License portion of the README.markdown file. It is a convention to place this info in a LICENSE or COPYING file, so make it easy to find.
