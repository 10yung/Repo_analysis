Also, increase timeout for the build step.
While unsucessfully trying to pass through some environment variables for a crate to find libs to link to within the cross container, I built a simple snippet to verify env vars were correctly being read within the container.

Some sort of caching is going on, in which if the rust code built successfully, modifications to `Cross.toml` or the environment provided to cross are ignored. In the example snippets below, `TEST_VAR` could be changed to `TEST_FOO` in `Cross.toml` or the value of `TEST_VAR` changed in the command, and performing a compile would claim it was successful(output `Finished release [optimized] target(s) in 0.07s`), but the previous build artifact remains instead.

I've removed the old binary, and run the command again. It is the same old binary(modification date is exactly the same, does not reflect the current time). Deleting `release/.fingerprint/` remedies the issue. Alternatively, modifying the rust source code will also invalidate the cache, raising an error if the example change on `Cross.toml` was performed. Correcting `Cross.toml` from a failed compile works fine without needing to modify the rust code again.

`Cross.toml`:
```TOML
[build.env]
passthrough = [
  "TEST_VAR",
]
```
`src/main.rs`:
```Rust
fn main() {
    const envvar: &'static str = env!("TEST_VAR");
    println!("Environment Variable is: {}", envvar);   
}
```

Command: `TEST_VAR="Hello World" cross build --target=x86_64-unknown-linux-gnu --release`

System:
```
Manjaro Linux x86_64
cross 0.1.16
cargo 1.39.0 (1c6ec66d5 2019-09-30)
```

Hi,

What's the best way of using cross with [sccache](https://github.com/mozilla/sccache)?

I tried to first `cross install sccache --target x86_64-unknown-linux-musl` (from a mac) but cross ended up running cargo directly on macos instead of inside a linux-musl docker container, so the install failed.

I managed to install it with [another docker image](https://github.com/mozilla/sccache/issues/216#issuecomment-357822514):
```bash
CARGO_HOME=$HOME/.cargo-x86_64-unknown-linux-musl docker run -e PKG_CONFIG_ALLOW_CROSS=1 --rm -e CARGO_HOME=/cargo -e CARGO_TARGET_DIR=/target -v $HOME/.cargo-x86_64-unknown-linux-musl:/cargo -v /cargo/bin -v $PWD/target:/target:Z -i -t messense/rust-musl-cross:x86_64-musl sh -c "cargo install sccache --target x86_64-unknown-linux-musl"
```

but trying to use it still failed:

```
$ uname -a
Darwin localhost 18.7.0 Darwin Kernel Version 18.7.0: Sun Dec  1 18:59:03 PST 2019; root:xnu-4903.278.19~1/RELEASE_X86_64 x86_64

$ file target/x86_64-unknown-linux-musl/release/sccache
target/x86_64-unknown-linux-musl/release/sccache: ELF 64-bit LSB executable, x86-64, version 1 (SYSV), statically linked, BuildID[sha1]=af3680ace9411ab7bb1fb98fdc28d90b69079ed3, with debug_info, not stripped

$ cat Cross.toml
[build.env]
passthrough = [
    "RUST_BACKTRACE",
    "RUST_LOG",
    "RUSTC_WRAPPER",
    "TRAVIS",
    "CARGO_HOME",
]

$ RUSTC_WRAPPER=target/x86_64-unknown-linux-musl/release/sccache CARGO_HOME=$HOME/.cargo-x86_64-unknown-linux-musl cross build --target x86_64-unknown-linux-musl

error: failed to run `rustc` to learn about target-specific information

Caused by:
  process didn't exit successfully: `/project/target/x86_64-unknown-linux-musl/release/sccache rustc - --crate-name ___ --print=file-names --crate-type bin --crate-type rlib --crate-type dylib --crate-type cdylib --crate-type staticlib --crate-type proc-macro --print=sysroot --print=cfg` (exit code: 2)
--- stderr
error: Connection to server timed out
```

Does cross need any extra steps to use the RUSTC_WRAPPER environment variable?
Could you please release a new version of cross that includes #358. This issue is blocking CI on a number of projects.
A build of my (quite small) app with no changes using `cross` takes 5 seconds. Using `cargo build` it only takes 0.1 second.

It would be nice if a nop `cross` build were as fast as that, so that I can have subsequent steps in my build process depend on it. Currently it makes editing files further down in the build DAG very annoying because you *always* have to wait 5 seconds for `cross`, even if you didn't change anything it consumes.

The ARMv7 soft-float targets were [new in rustc 1.38](https://github.com/rust-lang/rust/commit/2b0f4483d2f16e6c51a276665bff750fc40c9da9).
Sources:

https://github.com/MabezDev/rust-xtensa
https://github.com/ctron/rust-esp-container


Hi, thanks for Cross --- it's a great tool!

I'm trying to use cross from a Mac to build a binary for Raspberry Pi 0 (arm-unknown-linux-musleabihf).
Plain rust code works great, but I'm having trouble linking to a C library, `pigpio`.
The error is:

      = note: /usr/local/bin/../lib/gcc/arm-linux-musleabihf/6.4.0/../../../../arm-linux-musleabihf/bin/ld: cannot find -lpigpio

Here's what I've done so far:

1. Built a Docker image that contains my library. I've verified that it exists:

    ```
    root@e3c15482d660:/usr/local/lib# file libpigpio.so.1
    libpigpio.so.1: ELF 32-bit LSB shared object, ARM, EABI5 version 1 (SYSV), dynamically linked, stripped
    ```

2. Specified library search path by adding to `build.rs`: `println!(r"cargo:rustc-link-search=/usr/local/lib");`
I've verified that `= note: "arm-linux-musleabihf-gcc" "-Wl,--as-needed" ... [lots of output]` contains both `"-L" "/usr/local/lib"` and `"-lpigpio"`.

I'm running cross via:

    cross build --target arm-unknown-linux-musleabihf

and in my `Cross.toml` have

    [target.arm-unknown-linux-musleabihf]
    image = "lynaghk/arm-unknown-linux-musleabihf-0.1.16-pigpio"

Within my rust program itself, I'm declaring the C externs:

```rust
#[link(name = "pigpio", kind = "dylib")]
extern "C" {
    fn gpioInitialise() -> i32;
}
```

As far as I understand, this should all work.
I've done it plenty of times when compiling rust natively.
Hopefully I just have a typo somewhere...

Anyway, thanks again for the great tool.
Aside from this linking issue, it's working wonderfully!

https://travis-ci.org/rossmacarthur/sheldon/jobs/608753799

```
fatal runtime error: failed to initiate panic, error 9

qemu: uncaught target signal 6 (Aborted) - core dumped

error: process didn't exit successfully: `qemu-arm /target/armv7-unknown-linux-musleabihf/debug/deps/sheldon-4be4084973670074` (signal: 6, SIGABRT: process abort signal)
```
Difficult, but apparently it can be done. See the discussion [here](https://github.com/japaric/rust-cross/issues/22) and [the linked repo](https://github.com/zmoazeni/rust-crossbuild).