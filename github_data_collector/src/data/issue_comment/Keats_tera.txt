Would it be possible to make `globwalk` an optional feature? I'm using [templates from strings](https://tera.netlify.com/docs/#loading-templates-from-strings) in a wasm app and it works great! I'd like to trim the dependencies and reduce the size os the wasm a bit. `globwalk` pulls in a whole tree of crates.
Hi

I'm trying to build a collaborative wiki and I'd like to use Tera's template system. However some problems arise and I wonder if Tera can be used in this kind of use case.

The system is quite simple: a user can write a page that will be registered on a database (we are doing this because we are going to have a lot of pages). What I'm trying to build is the rendering server, which will fetch the template from the database and send the result of the rendering.

The first problem is that I don't have control over the [template cache system](https://github.com/Keats/tera/blob/master/src/tera.rs#L29): I'd like to implement a custom LFU strategy. This is currently impossible because even if `Template` is exposed, `Renderer` is not.

I'm imagining something that would look like this:

```rust
use tera::{Context, Renderer, Template, Tera};

fn main() {
  // I use Tera for everything that is static and won't (probably) change like macro, base template...
  let tera = Tera::new("./template/**/*.html").unwrap();
  let name = "my-custom-page-slug-to-render";
  // database
  let raw = fetch(&name);

  let result = {
    let template = get_cached_template_or_generate_a_new_one(&name, &raw);
    Renderer::new(template, &tera, Context::default())
      .render()
      .unwrap()
  };

  send(result);
}
```

Is that possible? Other problems appear in a more advanced implementation (module definition by users) but I want to discuss custom rendering first: I know that `Template` is only exported for Benchmarks etc, but isn't the use legitimate here?

Thanks,
When rendering with an invalid template that refers to an `Object` instead of strings/integers/bools/arrays, the rendering silent fails by rendering "`[object]`", due to:
https://github.com/Keats/tera/blob/b91a985951fccf6896c7192ea7c78ba64608bb62/src/context.rs#L119
(by the way, this could be `Cow::Borrowed`)

This is does not match the rust philosophy of being explicit and quickly failing so that we know what went wrong (be it, here, the template being invalid). - Feels like JS :((

I could see pretty-printing or JSON serialization make some sense here, but my favorite option by far would be a rendering failure, telling to whoever wrote the template to update it because this was probably a mistake.
In most programming languages, [`and` is evaluated before `or`](https://en.wikipedia.org/wiki/Order_of_operations#Programming_languages). But in Tera it is the other way around.

This can be seen by evaluating the expression `false and true or true`. In Tera, this expression evaluates to `false`. In a language where `and` has higher or equal precedence to `or`, the expression would evaluate to `true`.

Since the Tera documentation does not mention precedence levels, I assume it is not intentional that `or` has a higher precedence.

Conforming the precedence levers of Tera operators to other programming languages is preferable.
In Tera 0.11 an expression like this was possibe:
```
{%- set tags = (query.tags ~ ' ' ~ tags) | trim -%}
```
In Tera 1, this gives an error:
```
Failed to parse "template.html"
  --> 32:30
   |
32 |   {%- set tags = (query.tags ~ ' ' ~ tags) | trim -%}␊
   |                              ^---
   |
   = expected `+`, `-`, `*`, `/`, or `%`\"
```

Following template (`f` returns the value passed to it):
```jinja
{% if true %}
   {{ "a" }}   b
{% endif %}
{% filter f %}
   {{ "c" }}   d
{% endfilter %}
```
renders as follows:
```

   a   b

cd

```
For filter section any whitespace following `{{ "c" }}` appears to be discarded which is unexpected.
Hi,

Jinja has this nice support for formatting like:

```HTML+Django
{{ '0x%0X' % payload.id }}
```
It would be nice to have something like this in tera, specially for integers file types. Maybe something more rust like:
```HTML+Django
0x{{ payload.id | format(":X") }}
or 
0x{{ payload.id | format=":X" }}
```
It is the main bottleneck in terms of performance.

Some previous thoughts are on https://github.com/Keats/tera/issues/340
As stated here: https://zola.discourse.group/t/how-to-sort-taxonomies-taking-in-account-accentuated-letters

We badly sort the strings with accents. "écriture" is sorted after "zola" for instance.
Zola version: 0.8.0

I'd like to have a non-bloated `base.html` template so I made it this way.

```
{# base.html #}
<!DOCTYPE html>
<html>
	{% include "head.html" %}
	{% include "body.html" %}
</html>
```

```
{# body.html #}
<body>
	{% block content %}{% endblock content %}
</body>
```

I though I could override the `content` bloc inside my `about.html` template that extends `base.html` but it appears to not be working, without any compilation issue though.

```
{# about.html #}
{% extends "base.html" %}
{% block content %}
Hello world in about.html
{% endblock content %}
```

My `about.html` page is rendered exactly as my `base.html` page so it appears that we cannot override an "included" block in inherited templates.

It is quite surprising but is that the intended behavior?