I'm using mdbook v0.3.5.

Here's the markdown I tried to write:

```
## Blockquote with included code inside

Lorum ipsum dolor sit amet.

> But do included code blocks...?
>
> ```rust
> {{#include another-included-test.rs}}
> ```
>
> By Quote Author
```

And here's the HTML I get when doing `mdbook build`, note the multiple `<blockquote>`s (I'd expect only one opening and one closing):

```
<h2><a class="header" href="#blockquote-with-included-code-inside" id="blockquote-with-included-code-inside">Blockquote with included code inside</a></h2>
<p>Lorum ipsum dolor sit amet.</p>
<blockquote>
<p>But do included code blocks...?</p>
<pre><pre class="playpen"><code class="language-rust">fn main() {
</code></pre></pre>
</blockquote>
<pre><code>println!(&quot;This is a file!&quot;);
</code></pre>
<p>}</p>
<blockquote>
<pre><code>
By Quote Author
</code></pre>
</blockquote>
```

And a screenshot of this:

<img width="780" alt="Screen Shot of unexpected rendered HTML" src="https://user-images.githubusercontent.com/193874/72565438-d7c16800-387f-11ea-933c-f0eecaa6345f.png">


If I use the markdown renderer instead, I see that after processing the `include`, the markdown looks like this:

```
## Blockquote with included code inside

Lorum ipsum dolor sit amet.

> But do included code blocks...?
>
> ```rust
> fn main() {
    println!("This is a file!");
}
> ```
>
> By Quote Author
```

but the markdown that needs to be generated is this:

```
## Blockquote with included code inside

Lorum ipsum dolor sit amet.

> But do included code blocks...?
>
> ```rust
> fn main() {
>     println!("This is a file!");
> }
> ```
>
> By Quote Author
```

I was going to try to fix this by taking whatever text appears on the same line before the `include` directive (so in this case `> `) and then repeating that text before each line of the included file, but tests like [this one](https://github.com/rust-lang/mdBook/blob/2f59943c04f0aa204a9238d6a699ba9cc06c88d9/src/preprocess/links.rs#L428-L452) show that inline `include`s are supported (that example would mean "Some random text with " would be prepended to every included line :().

Limiting the recognized text to something like only `> ` would miss cases where there's a blockquote inside a blockquote or a blockquote inside a list or other edge cases I'm not thinking of.

So I don't know how to fix this, and I'm opening this to see if anyone else has ideas, or at least to document that this doesn't work :(
In response to issue #893.
can't search chinese
maybe it's necessary
![image](https://user-images.githubusercontent.com/58855704/71105921-541d4880-21f9-11ea-9320-fbb507af0b07.png)

https://github.com/stardussttx/mao-sama-retry

(New issue as per https://github.com/rust-lang/mdBook/issues/884#issuecomment-566772116)

At the moment, search result highlights can be either removed by editing the page URL or [pressing Esc](https://github.com/rust-lang/mdBook/blame/c068703028d19fb6c5a4690e904ae6f2bd74292f/src/theme/searcher/searcher.js#L316-L325). This is a papercut especially (but not only) on mobile:

1. there is no Esc key
2. editing the URL is even more fiddly than it is on a desktop

Besides, I had only found out about removing highlights with Esc after searching online and stumbling upon https://github.com/rust-lang/mdBook/issues/884.

Adding a UI element to clear the highlights seems like the most straightforward solution.
Hi

I have searched the document, it seemed that there were no any configurations about ***GFM (GitHub Flavored Markdown)*** mode support. Does mdBook support GitHub Flavored Markdown mode ?

Thanks.
WIP, not sure if right approach 
Hi there, it has been a while since I contributed. :sweat_smile: 

For this PR I want to brink back an old feature I miss: "draft chapters"
Draft chapters are chapters that don't have any content, no file associated with them and only show up in the table of contents. They were previously (a long time ago) supported by mdBook but at some point there was a regression and they were never brought back.

I found them particularly useful in two situations:

1. When I wanted to show that a specific chapter was planned for the future. It has no content, no file, but as it shows up in the TOC, users know that I plan to write it.
2. When I am playing with the structure of a new book or a series of new chapters. In this case, as the structure still changes a lot and I only want an overview, I don't want the files to be created. Having the possibility to first freely map out the structure of the table of contents before worrying about the actual files on disk is a huge advantage to me.

So with this PR I implemented draft chapters explicitly, they are a new kind of item in the summary and book. This means that the changes are **breaking changes**.

This is what it looks like:
![Screenshot_mdbook_draft_chapters](https://user-images.githubusercontent.com/7647338/70002973-fe427280-1561-11ea-9448-f2d19daa1fda.png)

As you can see in the image:
- Draft chapters can be used wherever a chapter can be used
- Draft chapters are rendered in the TOC but are not clickable
- Draft chapters can be the first chapter of the book, in that case the index page will be blank
- Navigation skips over draft chapters

It has been a while since I have been involved in the project and since I have actively programmed with Rust so feel free to point out anything that could be improved. :+1: 
https://github.com/rust-lang/mdBook/blob/e3717ad47bf5a659c7b7084b8b006fa05e9d9ff8/Cargo.toml#L60

Grepping all `feature` doesn't show anything about `output` feature:
```console
% git grep -F -w 'feature' -- '*.rs'
src/cmd/mod.rs:6:#[cfg(feature = "serve")]
src/cmd/mod.rs:9:#[cfg(feature = "watch")]
src/cmd/serve.rs:1:#[cfg(feature = "watch")]
src/cmd/serve.rs:114:    #[cfg(feature = "watch")]
src/config.rs:533:    /// Enable the search feature. Default: `true`.
src/main.rs:40:    #[cfg(feature = "watch")]
src/main.rs:42:    #[cfg(feature = "serve")]
src/main.rs:50:        #[cfg(feature = "watch")]
src/main.rs:52:        #[cfg(feature = "serve")]
src/renderer/html_handlebars/hbs_renderer.rs:104:    #[cfg_attr(feature = "cargo-clippy", allow(clippy::let_and_return))]
src/renderer/html_handlebars/hbs_renderer.rs:368:        #[cfg(feature = "search")]
src/renderer/html_handlebars/hbs_renderer.rs:471:    if cfg!(feature = "search") {
src/renderer/html_handlebars/hbs_renderer.rs:482:             search feature"
src/renderer/html_handlebars/mod.rs:8:#[cfg(feature = "search")]
src/theme/mod.rs:5:#[cfg(feature = "search")]
src/theme/searcher/mod.rs:2://! the "search" cargo feature is disabled.
tests/dummy_book/src/first/nested-test-with-anchors.rs:1:// The next line will cause a `testing` test to fail if the anchor feature is broken in such a way
tests/dummy_book/src/first/nested-test-with-anchors.rs:7:// The next line will cause a `rendered_output` test to fail if the anchor feature is broken in
tests/rendered_output.rs:510:#[cfg(feature = "search")]
```
As things stand now, rendering of mathematics is very slow and jarring. I believe one solution for this is to render math as MathML or SVG during the build process rather than handling it on the client side. Both Mathjax and KaTeX offer this ability, albeit in Javascript (Node). I assume there are rust equivalents for the same. I suggest that mathematics be rendered when running the build command. 