

Hi everyone,

Has anyone try running this project on Google Kaggle (similar to Colab) ? Thanks.

Amber Ji

@luanfujun Hi Dr. Luan! I admire your great work (this + deep-painterly-harmonization)! May I add you on QQ please? Mine is 1543386340.

就是论文里提到的fupplrmrntsl material
You say this is published for “non-commercial use only”, yet it is published on a commercial site. Is the site allowed to make money off it, but us ordinary users are not?
hi, @luanfujun 
I run this code with my example. the temporary results is okay, but the final results is not good enough.Could you give me some advice?Here are my result.

![1](https://user-images.githubusercontent.com/33566026/43197368-905c408e-903d-11e8-9cb9-22012345879d.jpg)

Help is greatly appreciated!
I have read your code. I am confused with [this line](https://github.com/luanfujun/deep-photo-styletransfer/blob/4801fa2dca2e2b52847c377f451246a39eae154a/gen_laplacian/matting/getLaplacian1.m#L39), why not compute the covariance using built-in function  `cov` directly. Can you explain why the covariance is written this way ? thanks.
function deepcopy(orig)
    local orig_type = type(orig)
    local copy
    if orig_type == 'table' then
        copy = {}
        for orig_key, orig_value in next, orig, nil do
            copy[deepcopy(orig_key)] = deepcopy(orig_value)
        end
        setmetatable(copy, deepcopy(getmetatable(orig)))
    else -- number, string, boolean, etc
        copy = orig
    end
    return copy
end
Interested in this cause the effect looks amazing.
Hi,  I'm running the code on one picture on Tesla K80 and 1000 steps takes like 0.5-1 hour (after laplacian calculations), 
is it normal? 
In your article you said it takes only 3-5 min on Titan X (this is for one example or all?)

