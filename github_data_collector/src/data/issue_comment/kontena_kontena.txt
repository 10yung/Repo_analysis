I'm forwarding the logs of my grid using fluentd to elasticsearch (the `kontena/fluentd-elasticsearch` stack). The format of the tag is `<node>.<grid>.<stack>.<service>`.

I launched Kibana and noticed that `node`, `grid`, `stack` and `service` were wrong. I quickly realized it was due to the node name that contains dots. So, if the hostname of the node is `my.company.com` the tag becomes `my.company.com.mygrid.mystack.myservice`. Since the tag is separated by dots, fluentd will parse `my` as the node, `company` as the grid, `com` as the stack and `mygrid` as the service.

I had to change the node name by removing it from the grid, renaming it and joining it back to the grid and suffer the painful consequences of doing so. Luckily it was a test grid.
Hi. First time user here. I'm trying to create Kontena cluster on DigitalOcean.
I'm following this guide: https://blog.kontena.io/how-to-set-up-kontena-on-digitalocean/

Steps I did:
```Shell
kontena plugin install digitalocean
kontena digitalocean master create --token <ACCESS_TOKEN> --ssh-key <PATH_TO_SSH_PUBLIC_KEY>
```
After that when I try to login to new master server it says this:

```Shell
$ kontena master login
 [error] The server uses a certificate signed by an unknown authority.
         You can trust this server by copying server CA pem file to: ~/.kontena/certs/<hostname>.pem
         If kontena cannot find your system ca bundle, you can set SSL_CERT_DIR=/etc/ssl/certs env variable to load them from another location.
         Protip: you can bypass the certificate check by setting SSL_IGNORE_ERRORS=true env variable, but any data you send to the server could be intercepted by others.
```

.pem file exists in my ~/.kontena/certs/ folder.
How can I login to master server?
When running list commands, a deprecation notice appears:

```
NOTE: Gem.gunzip is deprecated; use Gem::Util.gunzip instead. It will be removed on or after 2018-12-01.
Gem.gunzip called from /opt/kontena/embedded/lib/ruby/gems/2.5.0/gems/unicode-display_width-1.1.3/lib/unicode/display_width/index.rb:5.
```

This has been fixed in https://github.com/janlelis/unicode-display_width/pull/15

Updating the dependency should make the message disappear.

Fixes [CVE-2018-1000539](https://nvd.nist.gov/vuln/detail/CVE-2018-1000539) by upgrading to Acme::Client that drops json-jwt dependency.


Kontena master, at least when installed following the instructions at https://kontena.io/docs/advanced/install-master/docker-compose.html,  uses https://github.com/kontena/kontena-haproxy which does not properly configure strong ciphers or protocol versions and gets F rating from e.g. SSLLabs check.

It seems that https://github.com/kontena/kontena-loadbalancer on the other hand allows configuring the ciphers and also disables sslv3. I'm not sure why there are two separate repos for loadbalancer/haproxy, but if there's a reason, then the kontena-loadbalancer PRs adding the secure configuration should be ported to kontena-haproxy as well.

Weak protocols:
SSL 3   INSECURE | Yes
(TLS 1.0 | Yes)

Weak ciphers:
TLS_DHE_RSA_WITH_AES_256_GCM_SHA384 (0x9f)   DH 1024 bits   FS   WEAK	256
TLS_DHE_RSA_WITH_AES_256_CBC_SHA256 (0x6b)   DH 1024 bits   FS   WEAK	256
TLS_DHE_RSA_WITH_AES_256_CBC_SHA (0x39)   DH 1024 bits   FS   WEAK	256
TLS_DHE_RSA_WITH_CAMELLIA_256_CBC_SHA (0x88)   DH 1024 bits   FS   WEAK	256
TLS_RSA_WITH_AES_256_GCM_SHA384 (0x9d)   WEAK	256
TLS_RSA_WITH_AES_256_CBC_SHA256 (0x3d)   WEAK	256
TLS_RSA_WITH_AES_256_CBC_SHA (0x35)   WEAK	256
TLS_RSA_WITH_CAMELLIA_256_CBC_SHA (0x84)   WEAK	256
TLS_ECDHE_RSA_WITH_3DES_EDE_CBC_SHA (0xc012)   ECDH secp256r1 (eq. 3072 bits RSA)   FS   WEAK	112
TLS_DHE_RSA_WITH_3DES_EDE_CBC_SHA (0x16)   DH 1024 bits   FS   WEAK	112
TLS_RSA_WITH_3DES_EDE_CBC_SHA (0xa)   WEAK	112
TLS_DHE_RSA_WITH_AES_128_GCM_SHA256 (0x9e)   DH 1024 bits   FS   WEAK | 128
TLS_DHE_RSA_WITH_AES_128_CBC_SHA256 (0x67)   DH 1024 bits   FS   WEAK | 128
TLS_DHE_RSA_WITH_AES_128_CBC_SHA (0x33)   DH 1024 bits   FS   WEAK | 128
TLS_DHE_RSA_WITH_SEED_CBC_SHA (0x9a)   DH 1024 bits   FS   WEAK | 128
TLS_DHE_RSA_WITH_CAMELLIA_128_CBC_SHA (0x45)   DH 1024 bits   FS   WEAK | 128
TLS_RSA_WITH_AES_128_GCM_SHA256 (0x9c)   WEAK | 128
TLS_RSA_WITH_AES_128_CBC_SHA256 (0x3c)   WEAK | 128
TLS_RSA_WITH_AES_128_CBC_SHA (0x2f)   WEAK | 128
TLS_RSA_WITH_SEED_CBC_SHA (0x96)   WEAK | 128
TLS_RSA_WITH_CAMELLIA_128_CBC_SHA (0x41)   WEAK | 128
TLS_ECDHE_RSA_WITH_RC4_128_SHA (0xc011)   ECDH secp256r1 (eq. 3072 bits RSA)   FS   INSECURE | 128
TLS_RSA_WITH_RC4_128_SHA (0x5)   INSECURE | 128
TLS_RSA_WITH_RC4_128_MD5 (0x4)   INSECURE | 128
TLS_DHE_RSA_WITH_DES_CBC_SHA (0x15)   DH 1024 bits   FS   INSECURE | 56
TLS_RSA_WITH_DES_CBC_SHA (0x9)   INSECURE | 56
Pressing ctrl-c on a prompt will just skip to the next prompt.

![image](https://user-images.githubusercontent.com/224971/39702189-a01c2eae-520c-11e8-98e7-6eb6b1707b64.png)

This is because of `SystemExit` rescuing `Kontena.run(..)` used in `Kontena::Cli::Stack::ValidateCommand`.


```
$ bundle exec kontena cloud platform use
/usr/local/Cellar/rbenv/1.1.1/versions/2.4.2/lib/ruby/gems/2.4.0/gems/tty-screen-0.6.4/lib/tty/version.rb:3: warning: already initialized constant TTY::Screen::VERSION
/usr/local/opt/rbenv/versions/2.4.2/lib/ruby/gems/2.4.0/gems/tty-screen-0.6.4/lib/tty/version.rb:3: warning: previous definition of VERSION was here
```

For a stateful service bind-mounting a file that exists in the container image:

```
stack: test/stateful-bind-file
services:
  test:
    image: redis
    stateful: true
    volumes:
      - /tmp/bashrc:/root/.bashrc
```

This fails to create the data volume container, regardless of what form the file exists on the host as:

```
 [done] Creating stack stateful-bind-file      
 [done] Triggering deployment of stack stateful-bind-file     
 [done] Waiting for deployment to start     
 [fail] Deploying service test     
Deployment of service e2e/stateful-bind-file/test failed:
  - halting deploy of e2e/stateful-bind-file/test, one or more instances failed
  - GridServiceInstanceDeployer::ServiceError: Docker::Error::ServerError: cannot mount volume over existing file, file exists /var/lib/docker/overlay2/35a69c2c53252d197ef8a3096353891772cd7b70bc87c3ee427c9b235bd6b477/merged/root/.bashrc (on node terom-e2e-dev)
```

This happens because the data volume container only gets the [`.Config.Volumes`](https://github.com/kontena/kontena/blob/d4dc9bd01fc8931e7b2fbf1478b98a0590260a76/agent/lib/kontena/models/service_pod.rb#L259) containing all of the mounted volume paths, but the [`.Config.Binds`](https://github.com/kontena/kontena/blob/d4dc9bd01fc8931e7b2fbf1478b98a0590260a76/agent/lib/kontena/models/service_pod.rb#L218) only gets configured on the service container. This means that the volume container is configured to mount an empty local volume as a directory rather than bind-mounting from the host, which fails if the path already exists as a file in the container image.

Workaround is to not use `stateful: true`, or bind-mount the file at a path that does not exist in the image.

Testing with `/root/.bashrc2` as a file that does not exist in the image, the volume container will erroneously mount an empty local volume as a directory, but the service container will correctly bind-mount the file from the host.

```
$ docker run --rm -it --volumes-from=stateful-bind-file.test-1-volumes redis ls -la /root
total 20
drwx------ 1 root root 4096 Apr 17 13:00 .
drwxr-xr-x 1 root root 4096 Apr 17 13:00 ..
-rw-r--r-- 1 root root  570 Jan 31  2010 .bashrc
drwxr-xr-x 2 root root 4096 Apr 17 12:57 .bashrc2
-rw-r--r-- 1 root root  140 Nov 19  2007 .profile
```

```
$ docker exec stateful-bind-file.test-1 ls -la /root
total 16
drwx------ 1 root root  4096 Apr 17 12:57 .
drwxr-xr-x 1 root root  4096 Apr 17 12:57 ..
-rw-r--r-- 1 root root   570 Jan 31  2010 .bashrc
-rw-r--r-- 1 1001 users    0 Apr 17 12:52 .bashrc2
-rw-r--r-- 1 root root   140 Nov 19  2007 .profile
```
Now that Letsencrypt finally supports wildcard certificates it would be nice to get wildcard support directly to the Kontena loadbalancer.
It's currently not even possible to use wildcard certificate manually imported certificates as the loadbalancer stack fails with the error: ``` [error] Psych::SyntaxError : (loadbalancer.yml): did not find expected alphabetic or numeric character while scanning an alias at line 16 column 18``` Where that line is the subject line of the certificates using the *.domain.tld format.
From Slack:
> LE starts sending expiration mails when theres 20 days left.
> ```Your certificate (or certificates) for the names listed below will expire in
> 20 days (on 06 Apr 18 15:52 +0000).```
> And again after 10 days.
> So why not set it to 21 days, to avoid expirations mails 4 times a year ?

Would make sense to bump the renew threshold into 21 days.