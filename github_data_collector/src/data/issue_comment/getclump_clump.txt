Currently a lot of confusion at work comes from the fact that Clumps can be in one of 3 states:
State 1: Successful - contains the expected element
State 2: Failed - contains an exception
State 3: Undefined - key was missing from batch get, contains neither element nor exception

This commit unifies states 2 and 3 into a single "Failed" state by introducing ClumpNoSuchElementException which gets thrown when a key is missing from a batch get.

Currently, this only changes the internal implementation and not the public API. (It greatly simplifies the internal implementation because Clumps don't store Options anymore). In the future, I would like to expose ClumpNoSuchElementException and allow it to be the main way of dealing with missing keys.

The two main goals I have with this commit are:
- reduce the number of possible states a Clump can be in
- simplify the API by removing extraneous/confusing methods

To accomplish these goals, I've deprecated the following things so that they can be removed in version 2.0:

Methods that only dealt with state 3:
- `orElse`
- `orDefault`
- `getOrElse`
- `list`
- `get`

With the ClumpNoSuchElementException exposed these methods could all be implemented in user code instead of special subclasses of Clump.

Methods that are synonyms for other methods:
- `handle`
- `rescue`
- `Clump.apply`
- `Clump.value`
- `Clump.exception`
- `Clump.traverse` and `Clump.collect` and `Clump.sequence` that had parameters lists
- `Clump.collect`

The following behaviour changes will be introduced in version 2.0:
- Clump.sequence will no longer filter out undefined clumps. Instead, mark each Clump as optional and then flatten the resulting list
- recover and recoverWith will allow you to match on ClumpNoSuchElementException
- fallback and fallbackTo will catch ClumpNoSuchElementExceptions

Somewhat unrelated, I would also like to rename `Clump.future` to `Clump.apply` because it gets used so often, but the current `apply` method has to be deprecated first.

This commit will turn into version 1.2, which follows versioning rules because no behaviour is changing. The only other change is that `.apply` now throws a ClumpNoSuchElementException, but this is a subclass on NoSuchElementException so it's backwards compatible.

I'd like to be able to use clump from ScalaJS. The cross build itself is simple, but the pull request has many changes because `specs2` isn't compatible with ScalaJS so I had to migrate the tests to use http://github.com/lihaoyi/utest.
