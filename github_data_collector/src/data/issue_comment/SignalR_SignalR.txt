I download complete source code and use Visual Studio Professional 2017  to open the solution(After cloning the repository, run build.cmd.)

But I find Microsoft.AspNet.SignalR.Client.Samples's dependence .NETCoreApp 2.1 has errors.
Could somebody know how to solve this problem？

Severity	Code	Description	Project	File	Line	Suppression State
Error		The current .NET SDK does not support targeting .NET Core 2.1.  Either target .NET Core 1.1 or lower, or use a version of the .NET SDK that supports .NET Core 2.1.	Microsoft.AspNet.SignalR.Client.Samples	C:\Program Files (x86)\Microsoft Visual Studio\2017\Professional\MSBuild\Sdks\Microsoft.NET.Sdk\build\Microsoft.NET.TargetFrameworkInference.targets	112	

Error		The current .NET SDK does not support targeting .NET Standard 2.0.  Either target .NET Standard 1.6 or lower, or use a version of the .NET SDK that supports .NET Standard 2.0.	Microsoft.AspNet.SignalR.Client	C:\Program Files (x86)\Microsoft Visual Studio\2017\Professional\MSBuild\Sdks\Microsoft.NET.Sdk\build\Microsoft.NET.TargetFrameworkInference.targets	126	

Error	NETSDK1050	The version of Microsoft.NET.Sdk used by this project is insufficient to support references to libraries targeting .NET Standard 1.5 or higher.  Please install version 2.0 or higher of the .NET Core SDK.	Microsoft.AspNet.SignalR.Client.JS.Tests	C:\Program Files (x86)\Microsoft Visual Studio\2017\Professional\MSBuild\Microsoft\Microsoft.NET.Build.Extensions\Microsoft.NET.Build.Extensions.NETFramework.targets	67

I want to write three projects: Windows Form, Web Client、SignalR Server. Does somebody suggest me to see which book or website?
SignalR Server can be a bridge between Windows Form and Web Client by SignalR.
Fixes #4412 
Hello all!
I`m trying to start simple selfhost app, but got error:

> System.EntryPointNotFoundException: "The following errors occurred while attempting to load the app.
>  - No assembly found containing an OwinStartupAttribute.
>  - No assembly found containing a Startup or [AssemblyName].Startup class."

here:
**using (WebApp.Start(url))**

```
static void Main(string[] args)
        {
            string url = "http://localhost:8080";
            using (WebApp.Start(url))
            {
                Console.WriteLine("Server running on {0}", url);
                Console.ReadLine();
            }
        }

```

full code u can see here: 
https://docs.microsoft.com/en-us/aspnet/signalr/overview/deployment/tutorial-signalr-self-host
i`m not add any new lines to code, all just copy-pasted from tutorial

please, help to start!

### Steps to reproduce
https://docs.microsoft.com/en-us/aspnet/signalr/overview/deployment/tutorial-signalr-self-host

I have an MVC application which uses signalR for event . In my view I have 4 buttons login, open, refreshToken, Logout.  In my view clieck event of all 3 buttons works i.e login, refreshToken & Logout but onClick of open button is not working. 
below is my code for client side
   $.connection.hub.start().done(function () {
                $('#login').click(function () {
                    // call the Login method on the hub
                    var tokenRequestResponse = IShub.server
                        .login($('#server').val(), false, $('#username').val(), $('#password').val())
                        .done(processTokenRequestResponse);
                });
                $('#refresh').click(function () {
                    $('#events').prepend("refresh.click" + "\n");
                    // call the Refresh method on the hub
                    var tokenRequestResponse = IShub.server
                        .refreshToken($('#accessToken').val(), $('#refreshToken').val())
                        .done();
                });
                $('#logout').click(function () {
                    $('#events').prepend("logout.click" + "\n");
                    // call the Logout method on the hub
                    IShub.server
                        .logout($('#accessToken').val())
                        .done(function (tokenRequestResponse) {
                    });
                });
                $('#open').click(function () {
                    $('#events').prepend("open.click" + "\n");
                    //Call Set Sing on method on hub
                    IShub.server.SignOn($('#accessToken').val())
                        .done();
                });
            });

I have SignOn method on hub. But when I click open button nothing happens. But other 3 button works as expected.  Is there anything I am missing?

### Actual behavior

### Steps to reproduce


Hi, I'm using Redis + SiganlR and I'm  radomlly reciving this exception :

`System.InvalidOperationException: The queue is full. at Microsoft.AspNet.SignalR.Messaging.ScaleoutStream.Send(Func2 send, Object state) at Microsoft.AspNet.SignalR.Infrastructure.Connection.Send(ConnectionMessage message) at Microsoft.AspNet.SignalR.Hubs.HubDispatcher.Outgoing(IHubOutgoingInvokerContext context) at ....`

my configuration is copy/paste from https://docs.microsoft.com/en-US/aspnet/signalr/overview/performance/scaleout-with-redis + I looked into Redis cache. It seems that it's ok. It has enough space. 

Does anyone have any idea why this is happening or how can I debug this?

We have MVC 5 application which holds SignalR Hub and hosted in IIS an we have WPF Clients deployed in user machines which talks with Hub for receiving and sending text information and system works fine. 

On the server Hub I have override OnCOnnect, Onreconnect and OnDisconnect events to update user information who are offline and online. So at any point of time I want to hold active users at a particular time.

Need help in identifying the below use case ( I tried googling for the info and I have not found online) so posting here
1. User Logs off or shutdown the system. 
2. when internet disconnects or he is way for sometime i.e system went to idle state 
so that I will update them as inactive in my database. 

I have followed MSDN article to register onConnected and OnReconnected and deregister Ondisconnected.

Thank you


I pushed LoadTestHarness to my server on AWS and to a regular server. Second one works just fine, the first one is intermitent.

If i open a couple of Load Generator tabs, and start the broadcast, only one or two are getting packages. If i refresh the main page (the dashboard) and start the broadcast again, now the previous load generators that were receiving packages stop receiving and maybe another load generator tab starts getting.  

I did this test because i have the same problem on my signal r app. If i have multiple users subscribed to notifications, only a few of them are getting the notifications. But after a while they stop getting the notifications and other users start getting but not them. And after a while the opposite happens, the firsts users are getting again but not the other ones. 

All the web-sockets are connected, i don't see disconnections or re-connections. 

This is only one server on AWS. 
Any idea ?
Thanks. 



Using Microsoft.AspNet.SignalR.Core 2.4.1 with asp.net webapi and .net 4.5.

After connecting i create a group "abc".

With a button in the web ui i send a normal http request to the webapi. In the controller i inject  IHubContext<IMessageHub> argMessageHub and try to send the a message only for the group "abc": _messageHub.Clients.Group("abc").NewMessage("dsdfdfdf");

Setup:
I use simpleinjector to inject the container into my MessageHub.

    `GlobalHost.DependencyResolver.Register(typeof(Controllers.MessageHub), () =>
            {
                return new Controllers.MessageHub(argContainer);
            });
            
            var hubConfiguration = new HubConfiguration
            {
                // You can enable JSONP by uncommenting line below.
                // JSONP requests are insecure but some older browsers (and some
                // versions of IE) require JSONP to work cross domain
                // EnableJSONP = true
                EnableDetailedErrors = true,
                EnableJavaScriptProxies = false,
                Resolver = GlobalHost.DependencyResolver
            };

            argApp.Map("/MessageHub", map =>
            {
                // Setup the CORS middleware to run before SignalR.
                // By default this will allow all origins. You can 
                // configure the set of origins and/or http verbs by
                // providing a cors options with a different policy.
                map.UseCors(CorsOptions.AllowAll);
                map.UseOAuthBearerAuthentication(new Microsoft.Owin.Security.OAuth.OAuthBearerAuthenticationOptions
                {
                    Provider = new QueryStringOAuthBearerProvider()
                });


                // Run the SignalR pipeline. We're not using MapSignalR
                // since this branch already runs under the "/signalr"
                // path.
                map.RunSignalR(hubConfiguration);
                // map.MapSignalR("", hubConfiguration);
            });`

Mein MessageHub

    `using System;
    using System.Linq;
    using System.Threading.Tasks;
    using Liebherr.SmartApp.Common.Extensions;
    using Liebherr.SmartApp.Contracts.Data.Interfaces;
    using Liebherr.SmartApp.Contracts.Services;
    using Liebherr.SmartApp.WebAPI.Attributes;
    using Liebherr.SmartApp.WebAPI.MessageHub;
    using Microsoft.AspNet.SignalR;
    using Microsoft.AspNet.SignalR.Hubs;
    using Newtonsoft.Json;
    using SimpleInjector;
    using SimpleInjector.Lifestyles;
    
    namespace Liebherr.SmartApp.WebAPI.Controllers
    {
        /// <summary>
        /// Message Hub
        /// </summary>
        [Authorize]
        public class MessageHub : Hub<IMessageHub>
        {
            private readonly Container _container;
    
            /// <summary>
            /// Constructor
            /// </summary>
            /// <param name="argContainer"></param>
            public MessageHub(Container argContainer)
            {
                _container = argContainer;
            }
    
            public override Task OnConnected()
            {
                var connectionId2 = GetConnectionId();
                Groups.Add(connectionId2, "abc");
    
                return base.OnConnected();
            }
    
            private string GetConnectionId()
            {
                string connectionId = null;
                foreach (var keyValue in Context.QueryString)
                {
                    if (keyValue.Key.ToLower() == "connectiontoken")
                    {
                        connectionId = keyValue.Value;
                    }
                }
                return connectionId;
            }
        }
    }`

Webapi Controller:



As Client i use angular-signalr-hub with transport "websocket" not long polling.

    `[AllowAnonymous]
    [RoutePrefix("")]
    public class AppController : ControllerBase
    {
    	public AppController(IHubContext<IMessageHub> argMessageHub)
    	{
    		_messageHub = argMessageHub;
    	}
    	[HttpGet]
    	[AllowAnonymous]
    	[Route("new-message")]
    	public void NewMessage()
    	{
    		_messageHub.Clients.Group("abc").NewMessage("dsdfdfdf");
    	}
    }`

### Expected  behavior
_messageHub.Clients.Group("abc").NewMessage("dsdfdfdf"); should send the message to registered groups
### Actual behavior
nothing happens
### Steps to reproduce


after upgrading from Microsoft.AspNet.SignalR.Client.2.2.0 to Microsoft.AspNet.SignalR.Client.2.2.1, our application had a few crashes with the stack trace below.

It all works fine in version 2.2.0, it seems the changes in HeartbeatMonitor.CheckKeepAlive() has caused this issue, can you please take a look?


Framework Version: v4.0.30319
Description: The process was terminated due to an unhandled exception.
Exception Info: System.NullReferenceException
   at Microsoft.AspNet.SignalR.Client.Transports.AutoTransport.LostConnection(Microsoft.AspNet.SignalR.Client.IConnection)
   at Microsoft.AspNet.SignalR.Client.HeartbeatMonitor.CheckKeepAlive(System.TimeSpan)
   at Microsoft.AspNet.SignalR.Client.HeartbeatMonitor.Beat()
   at System.Threading.ExecutionContext.RunInternal(System.Threading.ExecutionContext, System.Threading.ContextCallback, System.Object, Boolean)
   at System.Threading.ExecutionContext.Run(System.Threading.ExecutionContext, System.Threading.ContextCallback, System.Object, Boolean)
   at System.Threading.TimerQueueTimer.CallCallback()
   at System.Threading.TimerQueueTimer.Fire()
   at System.Threading.QueueUserWorkItemCallback.System.Threading.IThreadPoolWorkItem.ExecuteWorkItem()
   at System.Threading.ThreadPoolWorkQueue.Dispatch()


### Expected  behavior

### Actual behavior

### Steps to reproduce


Based on issue #3850 we implemented the configuration setting DefaultMessageBufferSize set to 32. But SignalR is still falling in a memory leak. Analyzing the dump file gives roughly 131.000 objects in 26 seconds. Our SignalR version is 2.4.0.

### Expected  behavior
Implementing the setting DefaultMessageBufferSize to 32 should prevent this memory leak based on issue #3850 

### Actual behavior
In-depth objects:
![image](https://user-images.githubusercontent.com/4120383/67015076-37c83700-f0f6-11e9-8604-620a1c5ab232.png)

Heap snapshots:
![image](https://user-images.githubusercontent.com/4120383/67015796-6397ec80-f0f7-11e9-8ca0-258329239770.png)

Memory stack:
![image](https://user-images.githubusercontent.com/4120383/67015833-74e0f900-f0f7-11e9-9a2f-ab56de10f1cc.png)

Memory stack 2:
![image](https://user-images.githubusercontent.com/4120383/67015928-9fcb4d00-f0f7-11e9-84e9-845990f6f89c.png)

### Steps to reproduce
I can only reproduce this issue when starting the SignalR service and immidetialy connect over 200 clients, this by either production activity or the Loadtest tool Crank.

Thanks in advance,

Tim