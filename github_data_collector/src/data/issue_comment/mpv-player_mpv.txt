Hi!
Hable tone mapping operator produces darker output when used "correctly" to tonemap to 100nits, comparable with the 2390 tm curve at 200 nits.
A dirty trick would be multiply by 2 the exposure bias.

For example for hdr10 1000nits the values in 0-10 range have to be multiplied by 2 and the W parameter has to be set to 20.

[http://www.framecompare.com/image-compare/screenshotcomparison/D66GPNNX](url)



I noticed an oversight when using ytdl-hook -- if the path is a URL, we
try to `stat()` it, which obviously doesn't work. To mitigate that,
don't check or update mtimes for URLs.
This will ensure that we don't discard watch-later information
if playback cannot resume due to the file not existing yet or
network issues.

Fixes: 3427
### Important Information
- mpv 0.31.0
- macOS Version 10.15.2 (19C57)
- Source of the mpv binary: [Homebrew Casks](https://github.com/Homebrew/homebrew-cask/blob/master/Casks/mpv.rb)

### Reproduction steps
1. Open a video file
2. Make it pause
3. Get a FaceTime call
4. The video automatically resume

### Expected behavior
When receiving a FaceTime call the video paused shouldn't resume automatically.

### Actual behavior
The video resume automatically

### Log file
https://paste.clic2000.net/413172

Thanks in advance!
## Expected behavior of the wanted feature

### Desired feature

I want a function that copies a string containing unicode text to the clipboard, including newlines. This can of course be used to implement #4695 in a script much more gracefully than the solution the responses to it came up with, but I'm not asking for what's described in #4695, just a function for scripts to use.

I last looked for a function like this several months ago. If one was silently added in the meantime without an issue being created for it then this feature request doesn't really mean anything, I guess!

### Motivation

I wrote [a script](https://gist.github.com/wareya/0e090dca608bcc91df95ae198aceef94) that automatically copies subtitles to the clipboard so that they can be access more easily by "clipboard grabbers".

Copying text to the clipboard *automatically* (not after a hotkey press) is an accessibility design pattern that's started appearing in games, having options to copy onscreen text to the clipboard so that screen readers can verbalize it.

This idea is not limited to disability accessibility, though; it's also used when consuming media that uses very difficult vocabulary or is in foreign languages. Having access to plain text on the clipboard makes looking up words that you don't know extremely easy, to the point where it's becoming increasingly common for people who start learning Japanese to set up clipboard reading systems and mouseover dictionaries when playing games in Japanese just so that they never have to worry about manually looking up kanji.

In turn, that's the motivation for my script. I don't personally need it, but some of my friends did, and they found it helpful.

It has a few problems, though:

- It only works on Windows (entirely different scripts are needed on different platforms)
- It's laggy, because it involves invoking a new process, and AV software (including windows defender) can block it for several seconds
- It's *locale sensitive*, because it involves invoking a shell
- It's incredibly hacky, because safely invoking processes through the shell containing arbitrary strings for arguments is ***hard*** on windows

The third point is the biggest problem. The script doesn't *just work*, and it's not possible for it to *just work*. It needs to be edited if the user is using certain locales for non-unicode programs, and using strange locales is *very* common among people who are learning Japanese.

It would be much, much simpler, more stable, and more reliable if there were just a function for copying text to the clipboard made available to scripts.
Hello,

please supports `--ab-loop=<N|inf|no>`
So I have a Samsung LC27HG70 monitor that apparently supports up to 600 cd/m2. In Windows I want to be able to watch HDR content at optimized settings. I have searched with "mpv + hdr",  multiple results including github issues came up from few years back. And the more I read the more I got confused. I tried applying each different setting, they were all okay in a different fashion so I was not sure if I was doing it right.
I have noticed if I enable Windows HDR mode and maximize my monitor's brightness and finally set `target-peak` to `600`, HDR seems to be okay. But then everything on video overlay gets grayed out. So it obviously seems like a hack instead of a proper fix. I have a .icc profile that was generated in SDR mode and some people suggest enabling it in mpv config, some people suggest playing with hdr-peak and target-x options etc. It's just confusing. And manual only lists each option as a reference, it doesn't tell you what to do.
Can you write what one needs to do watch HDR content from scratch with step-by-step instructions along with assumptions (e.g. Your monitor's brightness must be set at 100%, mpv should be fullscreen, Windows HDR should be enabled and calibrated to this etc.) you make for those instructions? How you do it and test it out in your environment?
### Important Information

Provide following Information:
- mpv version: 0.31.0
- Linux Distribution and Version: void linux
- Source of the mpv binary: xbps
- Window Manager and version: wmutils
- Screenshot: https://0x0.st/z7K4.jpg

### Reproduction steps

\mpv --msg-level=cplayer=no,mpvhistory=no,ffmpeg/demuxer=no,file=no --msg-module --display-tags-clr --term-status-msg='${time-pos} [${percent-pos}] ${path} (${duration})' *.mp3

Press enter to go to next song a few times

### Expected behavior

Expected to get a list of all songs played/skipped, one pr line.

### Actual behavior

Sometimes when skipping a song it reuses the same line to print the statusline, other times it makes a newline. Also if the ${path} is too long for the terminal, it will continiusly spam the terminal with the statusline.

### Log file
http://0x0.st/z7KV.txt

### Sample files


Read this before you submit this pull request:
https://github.com/mpv-player/mpv/blob/master/DOCS/contribute.md

Reading this link and following the rules will get your pull request reviewed
and merged faster. Nobody wants lazy pull requests.
### Important Information

```
Windows 10 x64 1909

mpv 0.31.0-35-g9eb399193e Copyright Â© 2000-2020 mpv/MPlayer/mplayer2 projects
 built on Sun Jan  5 11:21:23 +08 2020
ffmpeg library versions:
   libavutil       56.38.100
   libavcodec      58.65.102
   libavformat     58.35.101
   libswscale      5.6.100
   libavfilter     7.70.101
   libswresample   3.6.100
ffmpeg version: git-2020-01-04-c3a17fff
```

From: https://sourceforge.net/projects/mpv-player-windows/files/64bit/

### Reproduction steps

Add `no-border` in `mpv.conf` then play any video.

### Expected behavior

Alternate window controls (minimize, maximize, exit) to work.

### Actual behavior

They do not work, only exit (x) works.

### Log file

https://0x0.st/zRD6.txt
