The following code fails when trying to verify a json body that starts with an array.

```
        server.verify("search").called(
            jsonBody = inlineBody(
                """
                  [ { "value": "+15555555555" } ]
                """.trimIndent()
            )
        )
```

I believe it is because the matcher is attempting to normalize the json into a linked hash map, but the map type adapter doesn't know how to convert a standard array into a map. The below code shows how the `MapTypeAdapterFactory` assumes the payload would be an array of arrays but instead is getting an array of objects...

```
      if (peek == JsonToken.BEGIN_ARRAY) {
        in.beginArray();
        while (in.hasNext()) {
          in.beginArray(); // entry array
          K key = keyTypeAdapter.read(in);
          V value = valueTypeAdapter.read(in);
          V replaced = map.put(key, value);
          if (replaced != null) {
            throw new JsonSyntaxException("duplicate key: " + key);
          }
          in.endArray();
        }
        in.endArray();
      }
```
Support for mocking requests forever with a same response. 

The API will look like: 

```
server.whenever(GET, "v2/top-headlines")
   .thenRespondForever(success(jsonBody = fileBody("GetNews.json")))
```

Whenever the request for `top-headlines` is called, it will always return the same json. 

This will make the API more powerful. And also make it closer to what mockito does for class mocking.

**Considerations:**
- When it is called again, it should maybe `reset` and do the setup again. 
- When the regular `thenRespond` is called after `thenRespondForever`, it should reset and enqueue only ` response`. 
- Consider adding `reset` functionality for requests. 
Support jUnit5 extension. It is super easy to do, the question is how to distribute it. A new module with new artifact? Or include them together? I also don't know what is the best practice. 

Here is how it would look like

```
class MockServerExtension : BeforeEachCallback, AfterEachCallback {

    lateinit var server: MockWebServer

    override fun beforeEach(context: ExtensionContext) {
        server = MockWebServer()
        DispatcherRetainer.registerRetainer()
        DispatcherRetainer.resetDispatchers()
        server.start()
    }

    override fun afterEach(context: ExtensionContext) {
        server.shutdown()
        DispatcherRetainer.resetDispatchers()
        server.setDispatcher(DispatcherRetainer.queueDispatcher)
    }
}
```
Android Pie has changed the behavior so that the app would crash by default in case non https request was made. So this happens on UI tests.

Tests should disable this feature. 
What is the reason that the public class mentioned in the Readme is inside a package named `internal`?

I realized that since we have a lint check that warns imports with `internal` in them. 

Moving them would be an backward incompatible change but would you considering doing that?
Perhaps I'm not understanding correctly how query parameters should be tested but right now the usage of their verification seems to be working in an unexpected way to me. I assumed that it would work as an exact match, where it would check for each query parameter and result in an error whenever one is missing or there are some unmatched parameters.

For example, if I verified a call like this

```kt
server.verify("path").called(
    queryParams = params(
        "param1" to "value1",
        "param2" to "value2"
    )
)
```

Then I would expect it to be successful for `/path?param1=value1&param2=value2` (which works correctly) and fail for `/path?param1=value1` (also works correctly) or for  `/path?param1=value1&param2=value2&param3=value3` (which is not the case). Is there something that I'm missing which would make it ok to not fail when there is incorrect number of params? And if there is, then is there a way to make these cases result in failure?