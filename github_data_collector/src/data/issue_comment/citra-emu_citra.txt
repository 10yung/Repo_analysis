See yuzu-emu/yuzu#3084 for more details.

**Original description**:
This blocks future commits from introducing implicit casts in video_core's code base.

<!-- Reviewable:start -->
---
This change is [<img src="https://reviewable.io/review_button.svg" height="34" align="absmiddle" alt="Reviewable"/>](https://reviewable.io/reviews/citra-emu/citra/5064)
<!-- Reviewable:end -->

See yuzu-emu/yuzu#3298 for more details.

Originally this started out as just a port, but I realized we had almost no hotkey displayed in the menu, so I added a lot more than in the original PR.

<!-- Reviewable:start -->
---
This change is [<img src="https://reviewable.io/review_button.svg" height="34" align="absmiddle" alt="Reviewable"/>](https://reviewable.io/reviews/citra-emu/citra/5063)
<!-- Reviewable:end -->

See yuzu-emu/yuzu#3173 for more details.

**Original description**:
Fixes a race condition.

<!-- Reviewable:start -->
---
This change is [<img src="https://reviewable.io/review_button.svg" height="34" align="absmiddle" alt="Reviewable"/>](https://reviewable.io/reviews/citra-emu/citra/5062)
<!-- Reviewable:end -->

See yuzu-emu/yuzu#3316 for more details.

**Original description**:
Fixes yuzu-emu/yuzu#1898.

<!-- Reviewable:start -->
---
This change is [<img src="https://reviewable.io/review_button.svg" height="34" align="absmiddle" alt="Reviewable"/>](https://reviewable.io/reviews/citra-emu/citra/5061)
<!-- Reviewable:end -->

VERSION: HEAD-aa8fe2a4d (2020-01-05)
OS VERSION: Ubuntu 19.10
GAME PLAYING ON: Pokemon Omega Ruby
STEP TO PRODUCE: 

-  On the menu
-  Right Click  -> click 'Open save data location' on context menu.
-  Nothing happened. (expected that 'Files' should be open up and navigate to ~/.local/share/citra-emu/.../main)

'Open Texture Dump Location' & 'Open Custom Dump Location' same issue

MORE INFORMATION: 
/home/qvanphong/.local/share/citra-emu/sdmc/Nintendo 3DS/00000000000000000000000000000000/00000000000000000000000000000000/title/00040000/0011c400/data/00000001 folder is exist, and "main" file is int there.

LOG THAT I GET FROM '~/.local/share/citra-emu/log'
[citra_log.txt](https://github.com/citra-emu/citra/files/4077311/citra_log.txt)

i have noticed that the suction effect has been reduced alot
![Movies   TV 1_16_2020 9_51_05 PM](https://user-images.githubusercontent.com/59988414/72581919-03a81200-38af-11ea-8c53-030d99f39c6b.png)
![I'm Too Fragile - YouTube - Google Chrome 1_16_2020 9_52_22 PM](https://user-images.githubusercontent.com/59988414/72581932-128ec480-38af-11ea-91ec-0679fec07fa8.png)

The suggestions here are low priority, as we aren't in the business of recording video, we are an emulator project. BUT that said, this could be a nice task for someone who wants to start contributing to the project, so I'm going to write some suggestions here. 

I recently did some investigation into what makes our video recording so slow, and found the following performance bottlenecks:

* VP9 is a CPU encoder and is very slow
* We flip the image on the CPU on the emu thread.
* We use loseless encoding in VP9 with no way to configure it for real time streaming

As such, I want to make the following recommendations (and will put this in a new issue so we can track it if someone wants to improve this further)

> VP9 is a CPU encoder and is very slow

Allow users to configure their choice of codec and encoder. Originally we stuck just with VP9 because its completely patent free and so we can ship the encoder, but in practice, we can use the operating system's encoders without issue. Theres no reason we can't use FFMPEG wrappers for NVENC or AMD/Intel or OS specific encoders since we aren't shipping the encoder, just a wrapper for the encoder which the user must have installed separately. Additionally, we can use compute shaders when available to skip downloading and reuploading the frame if needed, but this is probably not worth the effort if move the download to its own thread. See next section

> We flip the image on the CPU on the emu thread.

GL coord space and the encoder coord space is different, so we need to flip the image. This should be simple enough to flip as part of the draw step in the renderer. Now that we support shared contexts, video encoding should go on its own graphics thread entirely, and use the mailbox system to get the latest image to render so that the backend isn't blocked on the download or flipping. The should be a somewhat easy change to make without having to dive into making more UI settings or make a new encoder, and it would speed up all future encoders as well.

> We use loseless encoding in VP9 with no way to configure it for real time streaming

This could be done by someone with very limited encoder experience or graphics experience. Instead of using the hardcoded settings in the encoder, add a new settings window to allow the user to change the parameters of the encoder. The current settings are for loseless encoding, but some people just want to record while they play, so lossy encoding is acceptable. As a quick ascii example of what i'm thinking about for the settings menu, see the following diagram:

```
File to write to [____________]

Encoder          [_Software__V]
                 [_others...__]

Codec            [_VP9_______V]
                 [_others...__]

Quality          [_Loseless__V]
                 [_Good_______]
                 [_Realtime___]

Average Bitrate  |----[]------]
```

More settings could be added as we add support for more codecs.


You can't play the game "Moko Moko friends" on citra at this point, because the game softlocks very early on. It boots up fine, but after pressing the A-button a couple of times in order to progress through some dialog, the game just softlocks while displaying "Chapter 1 - I'm home Master". The music keeps playing, but no matter which button you might press, you won't be able to progress any further.

Citra version (canary build): HEAD-aa8fe2a (2020-01-50)
[citra_log.txt](https://github.com/citra-emu/citra/files/4060437/citra_log.txt)

In preparation for using texture views which require immutable storage, we need to add a separate allocation path for when immutable storage is available.

Immutable storage is basically the "sane" way to allocate textures in modern GL. You need only a single call to preallocate all of the storage that the texture might need and then thats that. No need to later add on mipmap levels like you do with glTexImage. The downside is that it might not be available on all cards that we support with a minimum of GL 3.3, so we have to support the old way as well.

I plan to use texture views for two things coming up soon:
* Faster subrect - useful for games that render into a power of two framebuffer, which we then need to subrect for the final frame. Subrect can be costly since it uses `glBlitFramebuffer` to blit the full size framebuffer to a smaller texture and then tracks both in the cache. With texture views, we can make a new subrect texture that uses the same underlying texture memory for free.
* Faster depth/stencil reinterpret - With texture views + stencil texturing, we can attach the depth/stencil to a single draw pass and render them into a new texture. This should avoid the slow `glReadPixels` that we have to do currently to do for reinterpret, but once again, this is limited in device support.

No guarantees that I'll finish them, but immutable storage is a small patch i'd need for both, so might as well get it merged first and make sure we aren't breaking anything.

<!-- Reviewable:start -->
---
This change is [<img src="https://reviewable.io/review_button.svg" height="34" align="absmiddle" alt="Reviewable"/>](https://reviewable.io/reviews/citra-emu/citra/5053)
<!-- Reviewable:end -->

I always say that if a picture is worth a thousand words, a video is worth ten thousand, soo...

The effect that appears when you kill a demon with a spell called "Bufu" should look like this: https://streamable.com/zpmh5

However, it currently looks like this: https://streamable.com/q9qkq

With Citra, there's like a black square that appears before the freezing effect kicks in, which is not how it should look as you can see in the first video.

The issue could be related to #2272 but I decided to open a new issue not only because that one was pretty old and inactive, but because SMTIVA is a separate game too.

**PC Specs**
**CPU**: i3 2120 (2c/4t running at 3.29-3.30 GHz)
**RAM**: 4 GB (Single Channel)
**GPU**: NVIDIA GeForce GT 1030 (Graphics Driver v441.66)
**OS**: Windows 8.1 Embedded Industry Pro (64 Bits)

Here's my citra_log file: https://pastebin.com/ZThwCZT8