
补充写优先读写锁实现，变量和状态应该算是比较简洁的了，参考了内核写优先设计。
UT里有性能相关测试
**Is your feature request related to a problem? (你需要的功能是否与某个问题有关?)**

写优先bthread读写锁的实现
**Describe the solution you'd like (描述你期望的解决方法)**

我们提供了一种实现，参考内核写优先的设计
**Describe alternatives you've considered (描述你想到的折衷方案)**

https://github.com/hairet/brpc/commit/b2f23243ba3127db82d7ee17e6caba40bead0ef3

**Additional context/screenshots (更多上下文/截图)**


**Describe the bug (描述bug)**
日前在做压测时发现，在高并发的情况下，大量bthread被创建，bthread_stack_count迅速增长，在压测结束后，bthread_stack_count 未释放，同样内存也未释放。查看代码发现与ObjectPool机制可能有关。想知道这一块的内存释放的时机是如何确定的？是否ObjectPool申请的内存不会释放？

**To Reproduce (复现方法)**
高并发情况下的压测，必现。

**Expected behavior (期望行为)**
内存释放的机制。

**Versions (各种版本)**
OS:
Compiler:
brpc:
protobuf:

**Additional context/screenshots (更多上下文/截图)**



we want to use bthread_rwlock_t in our program, but it seems that brpc did not implemented.


```cmake
include(FindProtobuf)
include(FindThreads)
```

In practice they should be
```cmake
find_package(Protobuf REQUIRED)
find_package(Threads REQUIRED)
```

these include thing caused many integration problem. `find_package` have many special handling of search path, which will let users have fine-grind control over where to find the package.
I do not like the magic number(10000) in the futex wake up operation.
 
在华为arm64服务器上编译 brpc，  各种问题， 尝试多次也没成功，   真心希望brpc开发团队， 早日支持一下arm64平台，  
**Describe the bug (描述bug)**
在proto文件中使用了“errno”字段，编译时报错
/echo_c++/build/echo.pb.h:199:44: error: 'bthread_errno_location' declared as function returning a function
   inline ::google::protobuf::int32 errno() const;
/echo_c++/build/echo.pb.h:448:56: error: 'bthread_errno_location' declared as function returning a function
 inline ::google::protobuf::int32 EchoResponse::errno() const {
make[2]: *** [CMakeFiles/brpc_server.dir/server.cpp.o] Error 1
make[1]: *** [CMakeFiles/brpc_server.dir/all] Error 2
make: *** [all] Error 2

**To Reproduce (复现方法)**
在protobuf中定义message

message EchoResponse {
      required string message = 1;
      required int32 errno = 2;
};
然后编译时就会报上面的错误

**Versions (各种版本)**
OS: centos7
Compiler:  gcc4.8.5
brpc: master
protobuf:  libprotoc 2.5.0


