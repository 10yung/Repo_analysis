I spent some time reading through color settings, tmux configuration, the issues here on github and in the wiki, and I still can not get nice output. 

Command 'ghi list' on Ubuntu 19.10 in bash + tmux.
I see green color first while ghi is processing, but can not read that message as it disappears fast, the terminal blanks, and shows the list in between ESC[38;5;34.... sequences.
I press q to close the view, the list disappears (not what I want), my cursor is at the wrong position (newline missing).

That should really not cause users headaches. I'd suggest a feature to simply disable all this fancy color stuff. Or whatever is the easiest way to resolve these troubles once and for all. 



<img width="667" alt="Screen Shot 2019-10-11 at 11 37 09 PM" src="https://user-images.githubusercontent.com/54291317/66645521-2d361980-ec80-11e9-9a8d-3fbc05c99e8a.png">

Why does it occasionally say this when I add an issue?
`ghi list` includes repository names while `ghi list -v` doesn't. Is this intended? Thanks!
```
$ ghi list
# slarsar/leetcode_solutions open issues
Traceback (most recent call last):
        15: from /usr/bin/ghi:3157:in `<main>'
        14: from /usr/bin/ghi:94:in `execute'
        13: from /usr/bin/ghi:1526:in `execute'
        12: from /usr/bin/ghi:2602:in `execute'
        11: from /usr/bin/ghi:1105:in `throb'
        10: from /usr/bin/ghi:2604:in `block in execute'
         9: from /usr/bin/ghi:1337:in `get'
         8: from /usr/bin/ghi:1392:in `request'
         7: from /usr/lib/ruby/2.6.0/net/http.rb:919:in `start'
         6: from /usr/lib/ruby/2.6.0/net/http.rb:930:in `do_start'
         5: from /usr/lib/ruby/2.6.0/net/http.rb:969:in `connect'
         4: from /usr/lib/ruby/2.6.0/net/http/response.rb:29:in `read_new'
         3: from /usr/lib/ruby/2.6.0/net/http/response.rb:40:in `read_status_line'
         2: from /usr/lib/ruby/2.6.0/net/protocol.rb:201:in `readline'
         1: from /usr/lib/ruby/2.6.0/net/protocol.rb:191:in `readuntil'
/usr/lib/ruby/2.6.0/net/protocol.rb:225:in `rbuf_fill': end of file reached (EOFError)

```
Hi, first of all, awesome stuff ! thank you for maintaining it.

what I am trying to achieve is a comment on a pull request that keeps being updated from my continuous integration builds .
using `ghi comment --amend $comment $pullRequestNumber` i'm getting No recent comment found. even tho few seconds before, when i ran it with -m instead of --amend, i was able to post a comment correctly on my PR.
i was trying to look on ghi edit rb file but couldn't find a way to edit the specific comment of the pull request, or even step before that, how am i able to get the comment id from my previous post using ghi comment

![](https://raw.githubusercontent.com/forrestchang/img-repo/master/20190411112406.png)
Here is a small change to support viewing open and closed issues.

Tested in a separate repo, test results:

``` bash
psypete@windows:~/git/devopsyoga-content-local/edit-ghi (gh-pages)$ ~/git/ghi/ghi list      
# peterwwillis/devopsyoga-content open issues
  1: Test issue: open  test 
psypete@windows:~/git/devopsyoga-content-local/edit-ghi (gh-pages)$ ~/git/ghi/ghi list -s closed
# peterwwillis/devopsyoga-content closed issues
  2: Test issue: closed  test  1
psypete@windows:~/git/devopsyoga-content-local/edit-ghi (gh-pages)$ ~/git/ghi/ghi list --all
# peterwwillis/devopsyoga-content all issues
  2: Test issue: closed  test  1
  1: Test issue: open  test 
psypete@windows:~/git/devopsyoga-content-local/edit-ghi (gh-pages)$ ~/git/ghi/ghi list -s all
# peterwwillis/devopsyoga-content all issues
  2: Test issue: closed  test  1
  1: Test issue: open  test 
```
I did a fresh install of latest rubyinstaller and after gem-installing GHI this is what I see in powershell:

```Windows PowerShell
Copyright (C) Microsoft Corporation. All rights reserved.

PS C:\Windows\system32> ghi
fatal: --local can only be used inside a git repository
Traceback (most recent call last):
        12: from C:/Ruby25-x64/bin/ghi:23:in `<main>'
        11: from C:/Ruby25-x64/bin/ghi:23:in `load'
        10: from C:/Ruby25-x64/lib/ruby/gems/2.5.0/gems/ghi-1.2.0/bin/ghi:4:in `<top (required)>'
         9: from C:/Ruby25-x64/lib/ruby/gems/2.5.0/gems/ghi-1.2.0/lib/ghi.rb:80:in `execute'
         8: from C:/Ruby25-x64/lib/ruby/gems/2.5.0/gems/ghi-1.2.0/lib/ghi/commands/command.rb:17:in `execute'
         7: from C:/Ruby25-x64/lib/ruby/gems/2.5.0/gems/ghi-1.2.0/lib/ghi/commands/list.rb:143:in `execute'
         6: from C:/Ruby25-x64/lib/ruby/gems/2.5.0/gems/ghi-1.2.0/lib/ghi/formatting.rb:167:in `format_issues_header'
         5: from C:/Ruby25-x64/lib/ruby/gems/2.5.0/gems/ghi-1.2.0/lib/ghi/formatting.rb:337:in `format_state'
         4: from C:/Ruby25-x64/lib/ruby/gems/2.5.0/gems/ghi-1.2.0/lib/ghi/formatting/colors.rb:17:in `fg'
         3: from C:/Ruby25-x64/lib/ruby/gems/2.5.0/gems/ghi-1.2.0/lib/ghi/formatting/colors.rb:228:in `escape'
         2: from C:/Ruby25-x64/lib/ruby/gems/2.5.0/gems/ghi-1.2.0/lib/ghi/formatting/colors.rb:236:in `escape_256'
         1: from C:/Ruby25-x64/lib/ruby/gems/2.5.0/gems/ghi-1.2.0/lib/ghi/formatting/colors.rb:240:in `supports_256_colors?'
C:/Ruby25-x64/lib/ruby/gems/2.5.0/gems/ghi-1.2.0/lib/ghi/formatting/colors.rb:240:in ``': No such file or directory - tput colors (Errno::ENOENT)
```
Same if I try any other commands, which makes the interactive one return back to console:

```PS C:\Windows\system32> ghi config -auth xxxx@gmail.com
Enter uth's GitHub password (never stored): Traceback (most recent call last):
        7: from C:/Ruby25-x64/bin/ghi:23:in `<main>'
        6: from C:/Ruby25-x64/bin/ghi:23:in `load'
        5: from C:/Ruby25-x64/lib/ruby/gems/2.5.0/gems/ghi-1.2.0/bin/ghi:4:in `<top (required)>'
        4: from C:/Ruby25-x64/lib/ruby/gems/2.5.0/gems/ghi-1.2.0/lib/ghi.rb:80:in `execute'
        3: from C:/Ruby25-x64/lib/ruby/gems/2.5.0/gems/ghi-1.2.0/lib/ghi/commands/command.rb:17:in `execute'
        2: from C:/Ruby25-x64/lib/ruby/gems/2.5.0/gems/ghi-1.2.0/lib/ghi/commands/config.rb:28:in `execute'
        1: from C:/Ruby25-x64/lib/ruby/gems/2.5.0/gems/ghi-1.2.0/lib/ghi/commands/config.rb:53:in `get_password'
C:/Ruby25-x64/lib/ruby/gems/2.5.0/gems/ghi-1.2.0/lib/ghi/commands/config.rb:53:in `ensure in get_password': undefined method `empty?' for nil:NilClass (NoMethodError)
```

I did another fresh install of ruby, making sure it's pristine and nothing else is messing it up or system patches but also to no avail. Any ideas how to fix it?

UPDATE: same happens in cmd.exe
```
: [ether@aquavit git/conch]$; ghi -V
ghi version 1.2.0

: [ether@aquavit git/conch]$; git remote -v
origin	git@github.com:joyent/conch.git (fetch)
origin	git@github.com:joyent/conch.git (push)

: [ether@aquavit git/conch]$; ghi edit 517 -H
Invalid request.

For 'properties/issue', "517" is not an integer.
```

This error still occurs just after doing `brew update ghi` just now.  Let me know what other diagnostics I can provide.
I was stuck in a loop of `security: SecKeychainSearchCopyNext: The specified item could not be found in the keychain.` similarly to what was described in https://github.com/stephencelis/ghi/issues/189. The issue was that another tool, [fue](https://github.com/dblock/fue) also wants to store a password in the keychain and the latter doesn't support multiple labels for the same website.

### Repro

To reproduce the problem do  `security add-internet-password -a [your username] -s github.com -l Whatever`.

```
security add-internet-password -a dblock -s github.com -l Whatever

~$ security add-internet-password -a dblock -s github.com -l Whatever
~$ ghi config --auth
Enter dblock's GitHub password (never stored):       ⠠security: SecKeychainSearchCopyNext: The specified item could not be found in the keychain.
                                                     ✔
Two-factor authentication code: ...
✔︎ Token saved to keychain.
~$ ghi list
fatal: --local can only be used inside a git repository
⠐security: SecKeychainSearchCopyNext: The specified item could not be found in the keychain.
#
Authorization required.

Please run 'ghi config --auth <username>'
~$ 
```

### Why does this happen?

Let's store a password.

```
~$ security add-internet-password -a dblock -s dblock.org -l Label1  

~$ security add-internet-password -a dblock -s dblock.org -l Label2  
security: SecKeychainAddInternetPassword <NULL>: The specified item already exists in the keychain.
```

Now find it.

```
~$ security find-internet-password -a dblock -s dblock.org -l Label1 -w
 ...

~$ security find-internet-password -a dblock -s dblock.org -l Label2 -w
security: SecKeychainSearchCopyNext: The specified item could not be found in the keychain.

~$ security find-internet-password -a dblock -s dblock.org -l -w
security: SecKeychainSearchCopyNext: The specified item could not be found in the keychain.
```

This makes it impossible for 2 separate tools to store different passwords for github.com?!

### Workaround if you use fue

1. Delete the fue token from OSX keychain
2. Configure GHI with `ghi config --auth`
3. Fue will work too because it looks for a password without a label

### What's next?

One improvement would be that ghi doesn't look for the password using a label. This way it will find any password for github.com. That's what fue does, but it's far from ideal since the token required for ghi needs write permissions (fue is read only and needs the least privilege so any token will work).

So I am not sure what the best way to fix this is? I wrote fue so it could get out of the way, but it's not really a general solution.