<!--
# General contribution criteria

Please have a look at our contribution guidelines: https://github.com/fluxcd/flux/blob/master/CONTRIBUTING.md
Particularly the sections about the:

 - DCO;
 - contribution workflow; and
 - how to get your fix accepted

To help the maintainers out when they're writing release notes, please
try to include a sentence or two here describing your change for end
users. See the CHANGELOG.md file in the top-level directory for examples.

Particularly for ground-breaking changes and new features, it's important to
make users and developers aware of what's changing and where those changes
were documented or discussed.

Even for smaller changes it's useful to see things documented as well, as it
gives everybody a chance to see at a glance what's coming up in the next
release. It makes the life of the project maintainer a lot easier as well.

The following short checklist can be used to make sure your PR is of good
quality, and can be merged easily:

- [ ] if it resolves an issue;
      is a reference (i.e. #1) to this issue included?
- [ ] if it introduces a new functionality or configuration flag;
      did you document this in the references or guides?
- [ ] optional but much appreciated;
      do you think many users would profit from a dedicated setting
      for this functionality in the Helm chart?
-->
Hi!

Just a small change that I stumbled upon when attempting to build flux from source to work one some features and I kept getting the following error when running make. Running macOS Catalina `10.15`

```
/docker/image-tag: line 30: syntax error near unexpected token `;'
mkdir -p ./build/docker/flux
cp docker/Dockerfile.flux build/fluxd build/kubectl build/sops build/kustomize docker/ssh_config docker/kubeconfig docker/known_hosts.sh ./build/docker/flux/
sudo docker build -t docker.io/fluxcd/flux -t docker.io/fluxcd/flux: \
		--build-arg VCS_REF="a8edbc06f1a8ff08189e1da12e51ac7e86a01533" \
		--build-arg BUILD_DATE="2020-01-18T21:36:45Z" \
		-f build/docker/flux/Dockerfile.flux ./build/docker/flux
invalid argument "docker.io/fluxcd/flux:" for "-t, --tag" flag: invalid reference format
```

I took a the file and replaced the `;&' line on 30 with the follow `;;` and the build works perfect after the fix is applied.

```
make
mkdir -p ./build/docker/flux
cp docker/Dockerfile.flux build/fluxd build/kubectl build/sops build/kustomize docker/ssh_config docker/kubeconfig docker/known_hosts.sh ./build/docker/flux/
sudo docker build -t docker.io/fluxcd/flux -t docker.io/fluxcd/flux:image-tag-fix-a8edbc06-wip \
		--build-arg VCS_REF="a8edbc06f1a8ff08189e1da12e51ac7e86a01533" \
		--build-arg BUILD_DATE="2020-01-18T21:37:11Z" \
		-f build/docker/flux/Dockerfile.flux ./build/docker/flux
```
Docs at https://docs.fluxcd.io/projects/helm-operator/en/latest/faq.html

*Iâ€™ve deleted a HelmRelease file from Git. Why is the Helm release still running on my cluster?*

Point to https://github.com/fluxcd/flux/issues/738

Which claims fixed.

Docs should be updated to be correct.
Hey there ðŸ‘‹ 

[As discussed on Slack](https://cloud-native.slack.com/archives/CLAJ40HV3/p1579275380025500), I would like to override the default readiness probe for Flux deployment. To do so, I suggest we make probes configurable through the chart.
**Describe the feature**
Today flux applies the manifest in the order according to:
https://github.com/fluxcd/flux/blob/16b85905da6285736735d1e3b29747726970ae68/pkg/cluster/kubernetes/sync.go#L470-L492

Namespaces have the highest priority and are first applied during a sync. However, OpenShift has a higher level definition of a namespace called a [Project](https://docs.openshift.com/container-platform/3.11/rest_api/apis-project.openshift.io/v1.Project.html). This means that OpenShift users do not have a Namespace manifest defined in their git repos, but instead a Project manifest.

It would be great if Flux could take this into account in some way, preferably without adding openshift specific code into the codebase.

**What would the new user story look like?**
A possible solution could be to add  a command line argument that defines the sort order of a given kind.

Maybe something like this:

1. A user starts up Flux with the `--kind-sort-order=project=0`
2. New commits in git branch happen
3. project.openshift.io/Project manifests are applied as the first kind during the next sync.

**Expected behavior**
I expect that the defined kind from the command line argument are applied to the cluster in the order that I have specified.

**Describe the bug**
When deciding what files to pass to kubectl, flux ignores `.json` files in its target repository/branch/path.

**To Reproduce**
Set up a cluster with flux. Add a valid namespace manifest file such as the one below to the target git repo/branch/path and name it `*.json`

```json
{
  "apiVersion": "v1",
  "kind": "Namespace",
  "metadata": {
    "namespace": "test-namespace"
  }
}
```

**Expected behavior**
Flux should pick up this file and apply it to the cluster under management.

**What actually happens**
Flux notices that the git repo has changed, and re-runs kubectl, but omits the JSON file from the things it passes to kubectl's stdin.

**Additional notes**
`.yaml`, `.yml` and `.json` files are all accepted by kubectl, and flux should mirror this behaviour.
All tests until now run without using the registry scanner, so I thought it was about time to have an end-to-end test for image releases (which is a fundamental Flux feature)

We probably shouldn't depend on external registries (particularly on `stefanprodan/podinfo` since it is often updated) for tests. I plan to add an internal registry to the tests, but that will come later. If this test becomes too flakey I am happy to disable it until then.

Addresses part of #2593 (adds a test covering `fluxctl release`).

TODO:
- [x] Test automatic image releases
- [x] Test `HelmRelease` image updates
**Describe the feature**
In my organization, we're not storing sensitive tokens inside K8s secrets but instead using Vault for storing it and inject the secret directly into the pod.


**What would the new user story look like?**
Users who already runs Bank Vaults (or Vault) would like to pass the tokens as the environment variables.
For example this project: https://banzaicloud.com/blog/inject-secrets-into-pods-vault-revisited/

This solution is tested and working with other projects such as cert-manager and externalDNS.
**Expected behavior**
Assuming users have an existing Vault server running, they will provide the following changes in the deployment:
```yaml
...
annotations:
    vault.security.banzaicloud.io/vault-addr: "https://vault.infra:8200"
    vault.security.banzaicloud.io/vault-tls-secret: vault-tls
    vault.security.banzaicloud.io/vault-role: "default"
...
extraEnvs:
  - name: GIT_AUTHUSER
    value: "vault:secret/data/accounts/flux#GIT_AUTHUSER"
  - name: GIT_AUTHKEY
    value: "vault:secret/data/accounts/flux#GIT_AUTHUSER"
...
```
Those annotations will use Kubernetes Auth into Vault and will store the values as environment variables which later will be used by `git.url` instead of storing the token inside K8s Secret.

**Current behavior**
I've tested this implementation and those are my results so far:

1. When the `extraEnvs` are set as above and git.url is configured with `$(GIT_AUTHUSER):$(GIT_AUTHKEY)` - it results with the following url in the logs: `url=https://$GIT_AUTHUSER@github.com/myrepo/flux-test.git` and the following error: 
```
Authentication failed for 'https://github.com/myrepo/flux-test.git/', full output:\n Cloning into bare repository '/tmp/flux-gitclone898767176'...\nremote: Invalid username or password.\nfatal: Authentication failed for 'https://github.com/myrepo/flux-test.git/'\n" 
```

2. When the `extraEnvs` are set as above and git.url is configured with `$GIT_AUTHUSER:$GIT_AUTHKEY` - it results with the following url  ```url=ssh://@https//$%28GIT_AUTHUSER%29:$%28GIT_AUTHKEY%29@github.com:myrepo/temp-charts.git``` 
and the following error:
```
err="git repo not ready: git clone --mirror: fatal: unable to access 'https://github.com:myrepo/temp-charts.git/': URL using bad/illegal format or missing URL
```

This adds the ability to set your own upstream service (ie. `Fluxcloud` or other) when installing the helm chart
**Describe the bug**
A docker image repository that contains an empty tag (ie `my.repo.com/app:`) will fail to sync with the image repository with the following messages:

```
ts=2020-01-10T19:57:01.113606079Z caller=images.go:159 component=daemon err="fetching image metadata for repo.azurecr.io/app: empty tag in fetched tags"
ts=2020-01-10T20:03:48.084791767Z caller=warming.go:188 component=warmer err="empty tag in fetched tags" tags="unsupported value type"
```

**To Reproduce**
Steps to reproduce the behaviour:
0. What's your setup?
Azure container registry.  Unsure as to how a image such as `my.repo.com/app:` ever got set but .. here we are.

```
flux                 	4       	Thu Jan  9 18:35:07 2020	DEPLOYED	flux-1.0.0                 	1.17.0     	flux
helm-operator        	1       	Thu Jan  9 17:10:40 2020	DEPLOYED	helm-operator-0.4.0        	1.0.0-rc6  	flux
```

1. Push image named as such to your repository: `my.repo.com/app:`
1. Setup `HelmRelease` like below
```yaml
apiVersion: helm.fluxcd.io/v1
kind: HelmRelease
metadata:
  name: myapp
  namespace: prod
  annotations:
    fluxcd.io/automated: "true"
    filter.fluxcd.io/app: "glob:master-*"

    tag.fluxcd.io/app: image.tag
    repository.fluxcd.io/app: image.repository

spec:
  releaseName: app-prod
  targetNamespace: prod
  timeout: 300
  resetValues: true
  forceUpgrade: false

  chart:
    git: git@github.com:myorg/app.git
    path: charts/app
    ref: master

  values:
    image:
      repository: my.repo.com/app
      tag: latest
```

1. Look at logs and see messages pasted above.

**Expected behavior**
Image get updated on git commit 

**Logs**

Relevant ones pasted above

**Additional context**
Add any other context about the problem here, e.g 
- Kubernetes version:
```
Client Version: version.Info{Major:"1", Minor:"16", GitVersion:"v1.16.2", GitCommit:"c97fe5036ef3df2967d086711e6c0c405941e14b", GitTreeState:"clean", BuildDate:"2019-11-13T23:50:10Z", GoVersion:"go1.12.13", Compiler:"gc", Platform:"darwin/amd64"}
Server Version: version.Info{Major:"1", Minor:"16", GitVersion:"v1.16.1", GitCommit:"d647ddbd755faf07169599a625faf302ffc34458", GitTreeState:"clean", BuildDate:"2019-10-02T16:51:36Z", GoVersion:"go1.12.10", Compiler:"gc", Platform:"linux/amd64"}
```
- Git provider: github
- Container registry provider: Azure Container Registry

**Describe the feature**
Actual there exist 3 filter pattern types: glob, regexp and semver. [semver](https://docs.fluxcd.io/en/1.17.0/references/fluxctl.html#semver)  is documented to filter for Semantic Versioning, but it isnt. While [semver.org](https://semver.org/) describes a valid semver with the X.Y.Z patter, this implementation allows a lot more. So for flux just an integer is seen as a semver. Pls have a look at this: [regex101](https://regex101.com/r/Ly7O1x/3/). I would call this a bug..., but as changing this behavior would break things I would go for another filter: `strict-semver`

To describe the actual failure that occured:
* We build images with 8 chars - git sha as tag.
* It happens that this 8 chars is composed of only digits (=integer).
* We also build images with a **valid** semver. (Releases)

This integer is detected as a semver and deployed. 
Deployments stuck on this tag as a 8 digit integer is > the valid semver releases.

**What would the new user story look like?**
0. Use `strict-semver` as tag filter.
1. Only **valid** Semantic Versions are filtered.

**Expected behavior**
 Because a change/fix of this behavior would break things for others, I would like to have a filter like: `strict-semver`. `strict-semver` should filter only valid Semantic Versions.
