In PHP 7.0, a Throwable interface was added that allows catching and handling errors in more cases than Exception previously allowed. So, if the catch statement contained Exception on PHP 5.x, it means it should probably be rewritten to reference Throwable on PHP 7.x.

_Contains commit from #773_
Let's bump PHP to secure supported version. So we can make further improvements to the lib without pain. Eg. see #774. There is v0.4 released with PHP5 support so should be no deal to consumers.

I tried to keep changes at minimum but eg. it's impossible to decently test code with ini_get/ini_set so I had to do small modifications (see Changelog).
Hello,
I am receiving various error codes, 522,521 and net::ERR_SSL_PROTOCOL_ERROR
when creating a connection `var conn = new WebSocket('wss://X.X.X.X:8080');`
when pointing to my ip address. I can get a connection from **WS**, but since my implementation is loaded of HTTPS I cannot go with  **WS**
I tried enabling proxy pass with Apache, and all other signs show OK , also considering **WS** connection worked from the console.

I would sincerely appreciate any support, no other issues aside from that, really excited to see it work!

Thank you

updates: Well since I am able to connect from WS, I am calling it an issue somewheres else...may update this later...

Thanks
I've the following code:

```php
use Ratchet\Http\HttpServer;
use Ratchet\WebSocket\WsServer;

$loop = \React\EventLoop\Factory::create();

$socketServer = new \React\Socket\Server('127.0.0.1:8080', $loop);

$httpServer = new \React\Http\Server(function(\Psr\Http\Message\ServerRequestInterface $request) {
  return new \React\Http\Response(200, [
      'Content-Type' => 'text/plain'
    ],
    'Hello, World'
  );
});

$httpServer->listen($socketServer);

$rrServer = new RRServer(); // Implements MessageComponentInterface

$webSocketServer = new IoServer(
  new HttpServer(
    new WsServer(
      $rrServer
    )
  ),
  $socketServer,
  $loop
);

$webSocketServer->run();
```
The code works, but I'm only able to access it using http://localhost:8080, and when I try to connect using WebSocket, the connection is opened, and then it immediately closes. Also, When I create a new socket with different port then I'm able to access both using http:// and ws://

Is it possible to run HTTP Server and WebSockets on the same port, and if yes, how to implement it?

Thanks.
So I'm trying to send updated serialized data via websockets to the client's browser. Unfortunately, my set up is all in Windows, and I've got the script below running via task scheduler.

```php
use Ratchet\Server\IoServer;
use App\RemotePCAServer;
use App\LocalSocketServer;
use App\SocketServerBridge;

use Ratchet\Http\HttpServer;
use Ratchet\WebSocket\WsServer;

$bridge = new SocketServerBridge;
$loop = React\EventLoop\Factory::create();

// get the config.ini file to obtain websocket info
$config_file = new ReadConfigIni;

// setting up socket (IP address and port) for the remote server
$config_file->SocketConfigValues($socket_ip, $socket_port);
$socket1 = new React\Socket\Server($socket_ip . ':' . $socket_port, $loop);

// setting up socket (IP address and port) for the web browser server
$config_file->WebSocketConfigValues($websocket_ip, $websocket_port);
$socket2 = new React\Socket\Server($websocket_ip . ':' . $websocket_port, $loop);

$RemServer = new IoServer(new RemoteServer($bridge), $socket1, $loop);
$localSocketServer = new LocalSocketServer($bridge);
$wsServer = new WsServer($localSocketServer);
$WebServer = new IoServer(new HttpServer($wsServer), $socket2, $loop);

// implemented the keep alive capability to keep alive a connection with a user
$wsServer->enableKeepAlive($WebServer->loop, 30);

$a = new DataOutput;
	
// loops every 2 seconds
$WebServer->loop->addPeriodicTimer(1, function() use (&$a, $localSocketServer) {
	$data = $a->SerializedData();
	$localSocketServer->sendDataToClients($data);
});

$loop->run();
```

The SocketServerBridge and RemoteServer are boilerplate. Nothing crazy. Only thing added to LocakSocketServer was: 

```php
    /**
     * sends data to all the client webbrowsers, since only client web browsers connect here!
     *
     * @param      <type>  $msg    The message
     */
    public function sendDataToClients($msg) {
        foreach ($this->clients as $client) {
            $client->send($msg);
        }
    }
```

As a test, I opened multiple tabs that connects to the LocalSocketServer, and I'm seeing all of my serialized data updating. However, after trying to let it run for about 5-6 hours, the server seemed to have crash in task scheduler (getting a 0xFF error). Wondering if using the addPeriodicTimer method isn't the best way to go? I'm trying to avoid dealing with a ZeroMQ approach. I mean, why do I need to do that if I can just add a reoccuring timer that will constantly push data every second? Thoughts?
Hi!
Is there a plan to raise compatibility for ^5.0?

Best Regards,
David
There is a new option in burp suite, we can send the particular socket message to repeater or intruder to send multiple spam message using socket connection.

Is there anyway to avoid this kind of socket spam?. If i use some php check on the backend, it will eat all my server resources. Becoz, it should check each message of hundreds of chatters.

So, give me a solution to avoid this issue and fix the websocket spam.

Hello, can you help me? One client have a server that send me a JSON in random time, and i like to create a "script" or "app" that when i recive this i have a popup in my desktop. I think that best option is Websockets, Is it? Can you help me? thanks
The problem is that i don't know how can send this json to websocket-server.
Attempting to telnet into the "Hello World" and on message:
HTTP/1.1 500 Internal Server Error
X-Powered-By: Ratchet/0.4.1
