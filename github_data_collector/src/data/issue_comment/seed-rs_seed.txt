Hey guys, I'm thinking about implementing first-class support for not-only-Rust [Web Components](https://developer.mozilla.org/en-US/docs/Web/Web_Components).
Before I write some reasoning about it I would like to know your opinions and experience.
So.. what do you think?
```rust
input![
            attrs![
                At::Value => "400",
                At::Type => "range",
                At::Min => "100",
                At::Max => "800",
                At::Step => "50",
            ]
        ]
```
Rendered: 
![image](https://user-images.githubusercontent.com/703150/72523233-a769d180-385f-11ea-8003-c7115fb81ac2.png)

while it should look like this:
![image](https://user-images.githubusercontent.com/703150/72523205-991bb580-385f-11ea-928c-e2a7842304e0.png)

To get a proper behavior `value` need to be placed after `step`:
```rust
input![
            attrs![
                At::Type => "range",
                At::Min => "100",
                At::Max => "800",
                At::Step => "50",
                At::Value => "400",
            ]
        ] 
```
while it should work independent of attributes order.
So I was doing some experimental UI library and I think I reach state where I can publish this library.

I didn't add any docs yet. but the code is there if anyone would like to help :D.

https://gitlab.com/muhannad_alrusayni/khalas

This is also response for:

> If we want to continue with the discussion, I suggest to create a bigger example with nested components so we can compare current and proposed API and architecture properly. Then, if that example would look promising, we would need to rewrite at least real-world example and quickstart-with-webpack. After that there will be a chance to merge it into the master because it would be a really big change

in https://github.com/seed-rs/seed/issues/310#issuecomment-564551187

I am not sure if opening issue is the right way to tell :D.. I will close this issue after a few days. if you think this is not the right place to post about it, feel free to close the issue now.
- We should design something like https://github.com/seed-rs/seed/issues/312#issuecomment-565832751 for styles.
- We should design something like https://github.com/seed-rs/seed/issues/312#issuecomment-565832751 for events.
- You can read about custom events here - https://github.com/seed-rs/seed/issues/208.
Setup a benchmark with [other WASM front end frameworks](https://github.com/flosse/rust-web-framework-comparison#frontend-frameworks-wasm) like Yew, Percy

Also add Seed to [this benchmark ](https://github.com/krausest/js-framework-benchmark) which will allow us to compare Seed with front-end JS frameworks/libraries, currently Yew is there.

**Point of benchmarking**

- Way to compare with other frameworks/libraries
- To identify places where we could improve performance
- To know about performance regressions
What do you think about uniting `Model`, `Msg`, `update` and `view`?
`Model` is represented by `Self` in this approach.
```rust
/// Page is a trait representing one page of the application.
pub trait Page {
    type Msg: Clone + 'static;
    type View: View<Self::Msg>;

    fn update(&mut self, msg: Self::Msg, order: &mut impl Orders<Self::Msg>);
    fn view(&self) -> Self::View;
}
```
And the implementation:
```rust
#[derive(Default)]
pub struct HomePage {
    counter: usize,
}

#[derive(Clone)]
pub enum Msg {
    Inc,
}

impl Page for HomePage {
    type Msg = Msg;
    type View = Node<Msg>;

    fn update(&mut self, msg: Msg, orders: &mut impl Orders<Msg>) {
        match msg {
            Msg::Inc => self.counter += 1,
        }
    }

    fn view(&self) -> Self::View {
        div![format!("Got {}", self.counter)]
    }
}
```
so you can finally:
```rust
let app = App::builder(HomePage::default()).build_and_start();
```

This should simplify reasoning, because now you only need to learn 1 thing, `Page` trait.
The rest will be guided by the compiler.
See https://github.com/seed-rs/seed/pull/311#issuecomment-565406617.
Hi!
We want to make Seed's website and documentation as good as possible.

If you want to help a little bit, please see those issues for more info:
- Feedback for **Website** - https://github.com/seed-rs/seed-rs.org/issues/3
- Feedback for **Readme.md** - https://github.com/seed-rs/seed/issues/302

Thank you!
Hi!
We want to make Seed's documentation as good as possible. 
Could you help us to make `Readme.md` better?

- Do you think that something is missing?
- Are code examples good enough? (too simple? too complex? too few comments?, ..)
- Is it beginner-friendly?
- Are there any unnecessary sections?
- Did you find a typo?
- Are any parts hard to read or understand?
- Are any parts ugly / not formatted or not styled enough?
- Did you find out-of-date info or dead links?
- etc.

Thank you!