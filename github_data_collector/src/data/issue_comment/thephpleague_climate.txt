I'm trying to check if an argument is defined. I need to distinguish between the default value, which is valid to be passed manually, and the argument not being defined at all.

I'm aware of the `Manager::defined()` method, but that requires reparsing `$argv` and in my particular use case, `$argv` isn't even available in this section of code.

What I'd like is something like `$climate->arguments->provided( $name )`. Though that might be a bit confusing with `exists` and `defined` already available on that object. Having it only accessible on the `Argument` object would work too I think.

The method would check if `Argument::$values` is non-empty.

Happy to PR if you think this is workable.
Per issue #70 the Spinner was added in release [3.5.0](https://github.com/thephpleague/climate/releases/tag/3.5.0)

Aside from the above closed issue there isn't any documentation I could find for Spinner.

Thanks for creating and maintaining Climate (what great fun it is to use).
Hi, I really like this little lib because of its minimalism, very quick to get up! Thank you very much! 

However, after adding some functions to a small tool I need to start thinking about how to organize multiple levels of (mostly radiobutton) menus - do you have some hints or examples for how to handle this? Or is there any other library / extension / addon that helps with that? I really would like to make it a little bit more declarative, so menus could be defined with a config file with the option key as function name to execute when selected, but before I get lost I just wanted to ask if I could learn from someone who has solved that already...?

Thanks for your attention!

Hey there,
what do you think of centering column contents, or aligning (numbers) to the right?

As far as I can see, there is a [_buildCell_](https://github.com/thephpleague/climate/blob/1a91bfbfa40c9ee5a1a55b06a4a68d223a94b75a/src/TerminalObject/Basic/Table.php#L163) method that calls another _pad_ method and also already knows the column width. Roughly outline as use example:

```php
<?php
$climate->table($data, [
    // STR_PAD_RIGHT or null is default anyway
    // 'name' => STR_PAD_RIGHT,
    'age' => STR_PAD_LEFT,
    'centered' => STR_PAD_BOTH
]);
```

And inside the Table class, I imagine:

```php
protected function buildCell($key, $column)
{
    $align = $this->column_aligns[$key];
    $width = $this->column_widths[$key];
    return  $this->pad($column, $width, $align);
}
```

Regards

pcntl_signal is used to handle signals, it would be useful to give CLImate the ability to do something when, for example CTRL+C (SIGTERM) is pressed.
No one seems to be able to understand the argument parsing (including myself whenever I go back in there), it's time to re-do it. `getopt` seems like the way to go to simplify the whole thing.

I'd like to be able to grab the trailing args:

```
php foo.php -d val foo bar
php foo.php -d val -- foo bar
```

Then I want to get an array `["foo", "bar"]` back.

(`--` is common as an argument separator, like everything, including arguments with a leading `-`, following is passed literally to somewhere else.)

I've searched for it in the docs, but actually found no way how to grab every trailing arg. I've only found a way to grab a single arg...

Was this an oversight in the implementation or was there just some undocumented feature?

Unless I missed this in the docs, there doesn't seem to be an easy way to set up multiple "commands". The argument parsing is nice, but it would be great to handle multiple commands with seperate argument configurations.

Commander refers to them "Git-style sub-commands".

https://www.npmjs.com/package/commander#git-style-sub-commands

Maybe the symfony/console component would be better for what I'm trying to do, but just thought I'd mention the issue to see if I'm missing something or in case it's something we'd like to add to the roadmap.

It is often a possibility to disable interactive console when running an application.

Is it possible to have it in CLImate? It probably only makes sense with the Input.

So when the interactive mode is disabled, prompts should either return their default value or null. It is the application's responsibility to handle any other cases, like getting the data from an option.
