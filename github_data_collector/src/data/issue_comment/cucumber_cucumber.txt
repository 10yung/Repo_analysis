Utility to process many message files with the same formatter. Used for integration testing.
We should pass them through a Markdown processor such as [Marked](https://marked.js.org)
I have rewritten the query objects and split them up. They are now more focussed, and I believe, simpler. They are also more decoupled so it should be easier to use with Markdown in the future. The React components have also been simplified a little, adding a new `<Wrapper>` component that sets up query objects and creates the necessary contexts.
<!-- NAMING YOUR ISSUE: Please prefix your issue with the name of the sub-project -->
<!-- e.g. `messages: Define new StepDef message` -->
<!-- This makes it easier to get some context when reading the names of issues -->

<!-- These sections are meant as guidance for you, to help you give the kind of information we'll need to help with your issue. If a section  doesn't seem to fit, just skip it.

In general: Please provide as much information as you can to help us solving your problem -->

## Summary

<!--- Provide a general summary description of the issue -->
When using `gherkin-javascript` standalone in a Node.JS script `fromPaths` seems non-accessible

## Expected Behavior

I should be able to use `fromPaths`

<!--- If you're describing a bug, tell us what should happen -->
<!--- If you're suggesting a change/improvement, tell us how it should work -->
<!--- Feel free to use Given / Then / Then if that helps, but please add some plain-language context too -->

## Current Behavior

Can't use `fromPaths`
<!--- If describing a bug, tell us what happens instead of the expected behavior -->
<!--- If suggesting a change/improvement, explain the difference from current behavior -->

<!--- If you have got some output place it in the code block below. Otherwise remove it. -->
~~~
(node:60095) UnhandledPromiseRejectionWarning: TypeError: Gherkin.fromPaths is not a function
    at parseConfigs (/Users/msalvia/repos/jwplayer-mobile-sdk-workspace/mobileqa/wdio/makeCoverageReport.js:14:17)
    at Object.<anonymous> (/Users/msalvia/repos/jwplayer-mobile-sdk-workspace/mobileqa/wdio/makeCoverageReport.js:28:1)
    at Module._compile (internal/modules/cjs/loader.js:778:30)
    at Object.Module._extensions..js (internal/modules/cjs/loader.js:789:10)
    at Module.load (internal/modules/cjs/loader.js:653:32)
    at tryModuleLoad (internal/modules/cjs/loader.js:593:12)
    at Function.Module._load (internal/modules/cjs/loader.js:585:3)
    at Function.Module.runMain (internal/modules/cjs/loader.js:831:12)
    at startup (internal/bootstrap/node.js:283:19)
    at bootstrapNodeJSCore (internal/bootstrap/node.js:622:3)
(node:60095) UnhandledPromiseRejectionWarning: Unhandled promise rejection. This error originated either by throwing inside of an async function without a catch block, or by rejecting a promise which was not handled with .catch(). (rejection id: 2)
(node:60095) [DEP0018] DeprecationWarning: Unhandled promise rejections are deprecated. In the future, promise rejections that are not handled will terminate the Node.js process with a non-zero exit code.
~~~

## Possible Solution
8.2.1 does work properly and `fromPaths` is valid

<!--- Not obligatory, but suggest a fix/reason for the bug, -->
<!--- or ideas how to implement the addition or change -->

## Steps to Reproduce (for bugs)

<!--- Provide a link to a live example, or an unambiguous set of steps to -->
<!--- reproduce this bug. Include code to reproduce, if relevant -->
1. Write vanilla JS file using `.fromPaths`
2. Run file

```
const Gherkin = require('gherkin');
const fs = require('fs');

const options = {
    defaultDialect: 'en',
    includeSource: true,
    includeGherkinDocument: true,
    includePickles: true,
    createReadStream: (path) => fs.createReadStream(path, {encoding: 'utf-8'})
};

async function parseConfigs() {
    const envelopes = await streamToArray(
        Gherkin.fromPaths(['features/basic/basic_mp4.feature'], options)
    )
}

async function streamToArray(readableStream) {
    return new Promise((resolve, reject) => {
            const items = [];
            readableStream.on('data', items.push.bind(items));
            readableStream.on('error', (err) => reject(err));
            readableStream.on('end', () => resolve(items));
        }
    )
}

parseConfigs().then(r =>
    console.log(`Parsing: ${r}.`)
);
```
## Context & Motivation
I am attempting to create statistics regarding Cucumber features.

<!--- How has this issue affected you? What are you trying to accomplish? -->
<!--- Providing context helps us come up with a solution that is most useful in the real world -->

## Your Environment

<!--- If you're reporting a bug, include as many relevant details about the environment you experienced the bug in -->
* Version used: 9.0.0
* Operating System and version: macOS
* Link to your project: Private

Using the `(?i)` flag expression to turn on case insensitive matching causes runtime errors because `TreeRegexp` mistakenly considers it to be a capturing group.

I didn't even know about flag expressions. Here is a list of what's supported:

* [Ruby](https://ruby-doc.org/core-2.7.0/Regexp.html#class-Regexp-label-Options)
* [Java](https://docs.oracle.com/javase/8/docs/api/java/util/regex/Pattern.html) - search for "embedded flag expression"
* Go - not sure what's supported
* [General List](https://www.regular-expressions.info/refmodifiers.html)

JavaScript does not appear to support them, but I think we should implement this in JavaScript as well, as if they were. The different implementations are more similar that way.
## Summary

When querying `Gherkin::Query.location` and that the `id` of the node is unknown, we get an exception raised with message:

```
"No location found for eee. Known: aaa bbb ccc ddd fff
```
(with `aaa`, `bbb` etc being UIDs).

A nice-to-have (in order to ease debugging) would be information about which kind of AST node is referenced by each uid.

This was raised by @mattwynne on Slack.
The Go `cucumber-json-formatter-*` executables should print the version when invoked with `--version`. Otherwise it is impossible for users to know what version they have.

See how this is done in gherkin:

https://github.com/cucumber/cucumber/blob/1c5c668264f45d32468c19e0cf5cfc987d801064/gherkin/go/cmd/main.go#L34-L37
We should add RuboCop and integrate it in the build in the same way as tslint/eslint for TypeScript.

This is a start, there are a lot of warnings to fix/ignore. The config and execution of rubocop also needs to be lifted up to `.templates/ruby`
## Summary

#657 has changed the behaviour of the snippet generator such that it no longer behaves as expected with numerical parameters.

## Expected Behavior

"Given Sean is 15m from Lucy" -> "Sean is {int}m from Lucy"
"Given a coffee costs $2.50" -> "a coffee costs ${double}" - or maybe {float}, or historically {int}.{int}

## Current Behavior

"Given Sean is 15m from Lucy" -> "Sean is 15m from Lucy"
"Given a coffee costs $2.50" -> "a coffee costs $2.{int}"
~~~
~~~

## Possible Solution

Numerical parameters should be bounded by whitespace at one side at least.

* $1.50 -> ${double} or ${int}.{int}
* 15m -> {int}m
* 500ms -> {int}ms
* i18n -> i18n
* $15m -> $15m

Careful consideration of whether punctuation counts as whitespace is needed. "." and "," are used differently by locale.

## Context & Motivation

This change results in non-intuitive Cucumber expressions in snippets.

## Your Environment

* Version used: Cucumber-JVM 4.7.4
* Operating System and version: Macos Catalina
* Link to your project: https://github.com/cucumber-ltd/cucumber-school-java

We should explain more of the vision behind `cucumber-messages`. In particular the various consumers of messages. This is necessary in order to explain to Cucumber implementors why they should implement the message protocol.