I'm working on a Slack bot where I have one subclass of `SlackRubyBot::Commands::Base` per file. I also have my logger and Slack token that gets set within a Rails initializer file. What I have is equivalent to:

```ruby
require 'slack-ruby-bot'
require 'logger'

SlackRubyBot.configure do |config|
  config.token = ENV['MY_SLACK_TOKEN']
  config.logger = Logger.new(STDOUT, level: Logger::INFO)
end

class FirstCommand < SlackRubyBot::Commands::Base
  command 'first' do |client, data, match|
    client.say(text: '1!', channel: data.channel)
  end
end

class SecondCommand < SlackRubyBot::Commands::Base
  command 'second' do |client, data, match|
    client.say(text: '2!', channel: data.channel)
  end
end

class MySlackBot < SlackRubyBot::Bot
end

MySlackBot.run
```

1. Is this a reasonable structure? I didn't see anything in the README or examples to suggest otherwise
2. `config.token` doesn't seem to work. I get the following stack trace when I run my code:

    ```
    $ MY_SLACK_TOKEN=my-token-here bundle exec ruby my_slack_bot.rb
    Traceback (most recent call last):
            7: from my_slack_bot.rb:25:in `<main>'
            6: from /Users/jeff.rabovsky/.gem/ruby/2.6.5/gems/slack-ruby-bot-0.12.0/lib/slack-ruby-bot/bot.rb:6:in `run'
            5: from /Users/jeff.rabovsky/.gem/ruby/2.6.5/gems/slack-ruby-bot-0.12.0/lib/slack-ruby-bot/bot.rb:10:in `instance'
            4: from /Users/jeff.rabovsky/.gem/ruby/2.6.5/gems/slack-ruby-bot-0.12.0/lib/slack-ruby-bot/app.rb:19:in `instance'
            3: from /Users/jeff.rabovsky/.gem/ruby/2.6.5/gems/slack-ruby-bot-0.12.0/lib/slack-ruby-bot/app.rb:19:in `new'
            2: from /Users/jeff.rabovsky/.gem/ruby/2.6.5/gems/slack-ruby-bot-0.12.0/lib/slack-ruby-bot/app.rb:4:in `initialize'
            1: from /Users/jeff.rabovsky/.gem/ruby/2.6.5/gems/slack-ruby-bot-0.12.0/lib/slack-ruby-bot.rb:12:in `configure'
    /Users/jeff.rabovsky/.gem/ruby/2.6.5/gems/slack-ruby-bot-0.12.0/lib/slack-ruby-bot/app.rb:5:in `block in initialize': Missing ENV['SLACK_API_TOKEN']. (RuntimeError)
    ```

    But when I run my code like `SLACK_API_TOKEN=my-token-here bundle exec ruby my_slack_bot.rb` instead, it works as expected
3. It seems odd to have an empty subclass of `SlackRubyBot::Bot`. Is that the right way to combine and run multiple subclasses of `SlackRubyBot::Commands::Base`?

Thanks for your help
Seriously, although we had a good laugh, this is almost PEGI 18. My team thought I did it on purpose =_=

![Screenshot-2019-10-15-at-18 33 24](https://user-images.githubusercontent.com/7388889/66851164-8224a900-ef7a-11e9-89b1-aafb1093c236.gif)

Slack performs encoding of special characters `&` `<` `>`. Those should be unencoded by the app but currently aren't. 

So when in slack I type `@myBot find students of MSc & MBA` what is actually returned by `match` is 

`#<MatchData "find students of MSc &amp; MBA"`
Hi there,

We are using this gem in a simple project that uses a database. We've noticed that when we let the app idle for some time (unsure exactly for how long, maybe about an hour) then the bot processes text commands multiple times. The gems `slack-ruby-bot` and `slack-ruby-client` are on the latest version.

I have created a minimal setup with which I am able to reproduce this issue: https://github.com/jillguyonnet/slack_ruby_bot_minimal. This is a very simple app that manages a list of items. Note that it was based on https://github.com/slack-ruby/slack-ruby-bot/blob/master/TUTORIAL.md and uses the MVC approach. The available commands are:
* `hi`
* `show`: print a list of items
* `add`: add an item to the list
* `clear`: clear the list

Similar to our real project, the issue of multiple command processing happens when I let the app run for a while. Here is a screenshot where the bot responds twice to `hi`:
<img width="236" alt="Screenshot 2019-09-09 at 16 33 58" src="https://user-images.githubusercontent.com/23701614/64544862-a9ef7400-d31f-11e9-925f-8bb41c7ebe36.png">

The steps to reproduce are:
1. Run the app, check that it works by running some commands.
1. Let it running for a while (at least an hour but possibly several hours).
1. Run some commands again. More often than not (but not always), the issue will present itself.

We are currently investigating potential sources for this issue. Without confirmation, we think these might include:
* `websocket_ping` setting on the realtime client (https://github.com/slack-ruby/slack-ruby-client/blob/master/README.md#configuring-slackrealtimeclient) currently not set to zero. Could this issue be caused by the client attempting to reestablish its connection to the message server?
* The `CONCURRENCY` environment variable is not set.

Would you, based on this information, be able to suggest the cause of this issue and the best way to fix it?

Thanks
Hi,

When trying to rspec test a command such as:
```
command('support', &->(client, data, match){
        channel_real_name = client.channels.dig(data.channel, :name)
        client.say(channel: data.channel,
                         text: "#{channel_real_name} support url: https://url")
})
```

with the following spec file:
```
require_relative '../commands/support'
require 'pry'


describe MyBot::Commands::Support do

  it 'gives support link' do
    expect(message: "#{SlackRubyBot.config.user} support").to respond_with_slack_message(/support url/)
  end
end
```

and spec_helper:
```
require 'slack-ruby-bot/rspec'
require 'webmock/rspec'

$LOAD_PATH.unshift(File.dirname(__FILE__))

require 'yaml'
require 'json'
require 'async'

require_relative '../mybot'
```

When running rspec I get:
```
1) MyBot::Commands::Support gives support link
     Failure/Error: client.channels.dig(data.channel, :name)
     
     NoMethodError:
       undefined method `dig' for nil:NilClass
```

Whereas I'm expecting to get a green passing test.

In order to get over the error I think I need to connect to slack but I canâ€™t find the proper documentation for doing so.

Thanks
Avoid constantly logging ping worker connect/disconnect. Companion change to https://github.com/slack-ruby/slack-ruby-client/pull/288.
It's possible that I'm doing something wrong, but I have my aliases working if I don't use any whitespace, but I was hoping to use a two word phrase to trigger my bot (ie, "okay google")
I noticed that my Bot had problems with ephemeral messages, in particular with unfolding URLs.

**How it can be reproduced**

1. bot posts an URL to a channel
2. slackbot unfolds it
3. bot posts the same URL to the channel
4. slackbot sends message: `"Pssst! I didn\u2019t unfurl <https:\/\/example.com> because it was already shared in this channel quite recently (within the last hour) and I didn\u2019t want to clutter things up."`
5. my bot responds with a `Sorry @slackbot, I don't understand that command!`
6. now slackbot responds that he didn't understand
7. ...there is a pingpong


**Possible solution**

The message hook should filter out those ephemeral messages. I think it will be something like:

`lib/slack-ruby-bot/hooks/message.rb:`

```rb
module SlackRubyBot
  module Hooks
    class Message
      def call(client, data)
        return if message_to_self_not_allowed? && message_to_self?(client, data)
        return if ephemeral_message?(data) # this would be new
        data.text = data.text.strip if data.text
        result = child_command_classes.detect { |d| d.invoke(client, data) }
        result ||= built_in_command_classes.detect { |d| d.invoke(client, data) }
        result ||= SlackRubyBot::Commands::Unknown.tap { |d| d.invoke(client, data) }
        result
      end

      ...

      private

      def  ephemeral_message?(data)
          data.is_ephemeral
          # and you could also check for the data.subtype == 'bot_message'
      end
```

I would be willing to contribute this fix if you like the solution.
Hi,

Thanks for this project, it's been 9 months since I've been using it for my bot.

I am now turning the bot into a Slack app which requires a web server and I chose Rails, Rails has auto loading and eager loading mechanisms and usually load files in alphabetical order.

Looking at the implementation of [`match`](https://github.com/slack-ruby/slack-ruby-bot/blob/master/lib/slack-ruby-bot/commands/base.rb#L84-L86), `scan` and `routes`, it seems (and this is how the app behave in production) that the order of command registration matters.

Meaning, requiring a file that matches all first, e.g. `match(/^(?<answer>.*)$/m)` would prevent other files from matching at all. (This is our "unknown" command, it has "did you mean" and implements our conversation logic)

We also want to guarantee `help` to be available at all times, so that one would need to be the first route that is checked when [`routes.each_pair`](https://github.com/slack-ruby/slack-ruby-bot/blob/master/lib/slack-ruby-bot/commands/base.rb#L58).

It would be nice if there was a way to specify where a command should be put in the ordered list of routes. At this moment the I named the command `zzz_unknown` to get the correct behaviour.

My suggestion is to draw inspiration from [Ruby Array insert method](http://ruby-doc.org/core-2.0.0/Array.html#method-i-insert), so our commands for example: 

```ruby
# catch all
match(/^(?<answer>.*)$/m, insert: -1) do |client, data, match|
  client.say "I was the last match"
end

command('help', insert: 0) do |client, data, match|
  client.say "No one can ever match help before me"
end
```

The obvious problem with this solution is that if another command used `insert: 0` and it was required after help, then that command would be first.

The other potential idea is to separate the matches/commands into a separate file like Rails routes, I haven't thought much about this approach but it could be a nice looking one.

Thanks for taking the time to read and consider this issue / feature request.
ðŸ’œ 
I'm writing a command and I want to `client.say` something then reply to that in a thread with more details. At the moment, I have no way of getting the `data.ts` or `data.thread_ts` that I need to make a threaded message. `client.say` just returns true/false.

Thanks