I haven't been able to correctly pass in objects allocated in Java to methods that take a unique_ptr "sink" argument.  I'm attaching a simple example that contains a very small interface and implementations of that interface in C++ and Java.  There is a C++ factory class with a factory method that returns instantiations of the C++ implementation as a unique_ptr.  There is a simple registry class that accepts a unique_ptr of that interface.  The registry "moves" the argument into a vector.

There is a Java test app that creates some of the C++ implementation objects using the factory method and adds them to the registry.  It then creates some Java implementation objects and passes them to the registry.  Once the add method returns, it appears the underlying memory is free'd as the element in the vector is no longer valid.  Note that this same thing happens if I manually allocate a C++ implementation without the factory method and pass it through.

How can I get unique_ptr semantics to work correctly when passing in an object that wasn't allocated as a unique_ptr from a C++ factory method?

Use build.sh to compile.  Use run.sh to run.

[example3.tar.gz](https://github.com/bytedeco/javacpp/files/4048674/example3.tar.gz)


On some machines we are getting Error on Tesseract, This occures when creating new instance of 
TessBaseAPI()

`java.util.concurrent.ExecutionException: java.lang.InternalError: Should not get here
	at java.util.concurrent.FutureTask.report(Unknown Source)
	at java.util.concurrent.FutureTask.get(Unknown Source)
	at javax.swing.SwingWorker.get(Unknown Source)
	at com.imviewer.worker.OCRTask.done(OCRTask.java:163)
	at javax.swing.SwingWorker$5.run(Unknown Source)
	at javax.swing.SwingWorker$DoSubmitAccumulativeRunnable.run(Unknown Source)
	at sun.swing.AccumulativeRunnable.run(Unknown Source)
	at javax.swing.SwingWorker$DoSubmitAccumulativeRunnable.actionPerformed(Unknown Source)
	at javax.swing.Timer.fireActionPerformed(Unknown Source)
	at javax.swing.Timer$DoPostEvent.run(Unknown Source)
	at java.awt.event.InvocationEvent.dispatch(Unknown Source)
	at java.awt.EventQueue.dispatchEventImpl(Unknown Source)
	at java.awt.EventQueue.access$500(Unknown Source)
	at java.awt.EventQueue$3.run(Unknown Source)
	at java.awt.EventQueue$3.run(Unknown Source)
	at java.security.AccessController.doPrivileged(Native Method)
	at java.security.ProtectionDomain$JavaSecurityAccessImpl.doIntersectionPrivilege(Unknown Source)
	at java.awt.EventQueue.dispatchEvent(Unknown Source)
	at java.awt.EventDispatchThread.pumpOneEventForFilters(Unknown Source)
	at java.awt.EventDispatchThread.pumpEventsForFilter(Unknown Source)
	at java.awt.EventDispatchThread.pumpEventsForHierarchy(Unknown Source)
	at java.awt.EventDispatchThread.pumpEvents(Unknown Source)
	at java.awt.EventDispatchThread.pumpEvents(Unknown Source)
	at java.awt.EventDispatchThread.run(Unknown Source)
Caused by: java.lang.InternalError: Should not get here
	at sun.nio.fs.WindowsNativeDispatcher.CreateSymbolicLink0(Native Method)
	at sun.nio.fs.WindowsNativeDispatcher.CreateSymbolicLink(Unknown Source)
	at sun.nio.fs.WindowsFileSystemProvider.createSymbolicLink(Unknown Source)
	at java.nio.file.Files.createSymbolicLink(Unknown Source)
	at org.bytedeco.javacpp.Loader.loadLibrary(Loader.java:1445)
	at org.bytedeco.javacpp.Loader.load(Loader.java:1143)
	at org.bytedeco.javacpp.Loader.load(Loader.java:1042)
	at org.bytedeco.tesseract.global.tesseract.<clinit>(tesseract.java:15)
	at java.lang.Class.forName0(Native Method)
	at java.lang.Class.forName(Unknown Source)
	at org.bytedeco.javacpp.Loader.load(Loader.java:1109)
	at org.bytedeco.javacpp.Loader.load(Loader.java:1042)
	at org.bytedeco.tesseract.TessBaseAPI.<clinit>(TessBaseAPI.java:25)
	at com.imviewer.worker.OCRTask$OCRChecker.<init>(OCRTask.java:182)
	at com.imviewer.worker.OCRTask.doInBackground(OCRTask.java:80)
	at javax.swing.SwingWorker$1.call(Unknown Source)
	at java.util.concurrent.FutureTask.run(Unknown Source)
	at javax.swing.SwingWorker.run(Unknown Source)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(Unknown Source)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(Unknown Source)
	at java.lang.Thread.run(Unknown Source)`

Motivation: https://github.com/eclipse/deeplearning4j/issues/8582

The main challenges here are of course the numerical ranges vs. java types, in terms of API for getting/setting values.
uint32 isn't so bad, as it fits in a long (like UByteIndexer uses int)
However uint64 can clearly represent values larger than long.

Not sure what the best solution for uint64 is, but some options are:
* use long (ignoring the overflow)
* add a new/custom Number class (uint64 stored as a long, converted as required)
* BigInt (not exactly a low overhead solution however)

For example, for this Java code:
```Java
@Namespace("NativeLibrary") @Properties(inherit = org.example.NativeLibraryConfig.class)
public class NativeClass extends Pointer {
        static { Loader.load(); }
        /** Default native constructor. */
        public NativeClass() { super((Pointer)null); allocate(); }
        private native void allocate();

        @Virtual public native @StdString BytePointer get_property();
}
```

Following C++ class is generated:
```C++
class JavaCPP_hidden JavaCPP_NativeLibrary_0003a_0003aNativeClass : public NativeLibrary::NativeClass {
public:
    jobject obj;
    static jmethodID get_1property__;

    JavaCPP_NativeLibrary_0003a_0003aNativeClass() : NativeLibrary::NativeClass(), obj(NULL) { }
    using NativeLibrary::NativeClass::get_property;
    virtual std::basic_string< char >& get_property();
    std::basic_string< char >& super_get_property() { return NativeLibrary::NativeClass::get_property(); }
};
````

Where JavaCPP_NativeLibrary_0003a_0003aNativeClass::get_property() is:
```C++
std::basic_string< char >& JavaCPP_NativeLibrary_0003a_0003aNativeClass::get_property() {
    // Skip boring stuff

    // Dangling reference!
    return StringAdapter< char >(rptr, rsize, rowner);
}
```
JavaCPP_NativeLibrary_0003a_0003aNativeClass::get_property() should return by value, not reference. It also means that generated override actually overrides nothing, since NativeLibrary::NativeClass::get_property() returns by value.
I suspect that it is caused by StdString.java having `@Cast({"std::basic_string", "&"})` annotation, but I'm not sure why it is there.
Im trying to create a opencv build off master with some custom flags, however im getting errors like this when trying to compile. What would be the cause of this? Im not to familiar with javacpp yet so i really dont know where to start fixing this issue.

But to me it looks like I either need to map a  CvBox2D() constructor with the float argument, or create the missing converter somewhere? What is your take on this?

```
/home/netbrain/dev/javacpp-presets/opencv/target/native/org/bytedeco/opencv/linux-x86_64-gpu/jniopencv_core.cpp:55942:118: error: no matching function for call to ‘CvBox2D::CvBox2D(jfloat&)’
In file included from /home/netbrain/dev/javacpp-presets/opencv/target/native/org/bytedeco/opencv/linux-x86_64-gpu/jniopencv_core.cpp:113:0:
/home/netbrain/dev/javacpp-presets/opencv/cppbuild/linux-x86_64-gpu/include/opencv2/core/types_c.h:1273:16: note: candidate: CvBox2D::CvBox2D()
 typedef struct CvBox2D
                ^~~~~~~
/home/netbrain/dev/javacpp-presets/opencv/cppbuild/linux-x86_64-gpu/include/opencv2/core/types_c.h:1273:16: note:   candidate expects 0 arguments, 1 provided
/home/netbrain/dev/javacpp-presets/opencv/cppbuild/linux-x86_64-gpu/include/opencv2/core/types_c.h:1273:16: note: candidate: constexpr CvBox2D::CvBox2D(const CvBox2D&)
/home/netbrain/dev/javacpp-presets/opencv/cppbuild/linux-x86_64-gpu/include/opencv2/core/types_c.h:1273:16: note:   no known conversion for argument 1 from ‘jfloat {aka float}’ to ‘const CvBox2D&’
/home/netbrain/dev/javacpp-presets/opencv/cppbuild/linux-x86_64-gpu/include/opencv2/core/types_c.h:1273:16: note: candidate: constexpr CvBox2D::CvBox2D(CvBox2D&&)
/home/netbrain/dev/javacpp-presets/opencv/cppbuild/linux-x86_64-gpu/include/opencv2/core/types_c.h:1273:16: note:   no known conversion for argument 1 from ‘jfloat {aka float}’ to ‘CvBox2D&&’
/home/netbrain/dev/javacpp-presets/opencv/target/native/org/bytedeco/opencv/linux-x86_64-gpu/jniopencv_core.cpp: In function ‘void Java_org_bytedeco_opencv_opencv_1core_CvBox2D_allocate__Ljava_nio_FloatBuffer_2Lorg_bytedeco_opencv_opencv_1core_CvSize2D32f_2F(JNIEnv*, jobject, jobject, jobject, jfloat)’:

```
I am trying to write a faiss index to a java output stream. The `write_index` method accept an IOWriter struct, and write data using its `()` operator. The generated code contains a `super_operator ()` method that fails to compile. Some kind of name escaping seems required for it to work.

```c++
void write_index (const Index *idx, IOWriter *writer);
```

```c++
struct IOWriter {
    // name that can be used in error messages
    std::string name;

    // fwrite
    virtual size_t operator()(
         const void *ptr, size_t size, size_t nitems) = 0;

    // return a file number that can be memory-mapped
    virtual int fileno ();

    virtual ~IOWriter() {}
};
```


```java
@Namespace("faiss")
@NoOffset
@Properties(@Platform(
        link = { "faiss", "gomp" },
        preload = "faiss",
        include = { "faiss/impl/io.h" }))
public class IOWriter extends Pointer {
    static { Loader.load(); }

    public IOWriter() { allocate(); }

    private native void allocate();

    @Cast("size_t")
    @Name("operator ()")
    @Virtual(true)
    public native long apply(@Const Pointer ptr, @Cast("size_t") long size, @Cast("size_t") long nitems);
}
```

```c++
class JavaCPP_hidden JavaCPP_faiss_0003a_0003aIOWriter : public faiss::IOWriter {
public:
    jobject obj;
    static jmethodID apply__Lorg_bytedeco_javacpp_Pointer_2JJ;

    using faiss::IOWriter::operator ();
    virtual size_t operator ()(const void* arg0, size_t arg1, size_t arg2);
    size_t super_operator ()(const void* arg0, size_t arg1, size_t arg2) { throw JavaCPP_exception("Cannot call pure virtual function faiss::IOWriter::operator ()()."); }
    JavaCPP_faiss_0003a_0003aIOWriter() : faiss::IOWriter(), obj(NULL) { }
};
```

Here is my example code:
https://github.com/AnDevi/javacpp_example/tree/master/example 

What I want do is generate class MyClass (https://github.com/AnDevi/javacpp_example/blob/master/example/libs/example/include/example.hpp) without generating BaseA, BaseB and BaseC classes in java file (https://github.com/AnDevi/javacpp_example/blob/master/example/ExampleLibrary.java). 
MyClass have to inherit after 3+ classes. 
Is it possible ? I assume that it is, but I have to some special tricks in config file (https://github.com/AnDevi/javacpp_example/blob/master/example/ExampleConfig.java) to handle it.

Thanks a lot for help !
Well this project is for C++ i know but.
Rust is becoming more popular.
It would be good for support binding 
Java <=> Rust

Rust can import C++ libs.
Maybe it wont be hard to do this.

https://stackoverflow.com/questions/24105186/can-i-call-c-or-c-functions-from-rust-code
Hi everyone. The issue is the following. I have to transfer ownership of an allocated data (an array) from C++ to Java. How would I do that?

As a side note: I've tried to work something out with `@ArrayAllocator` annotation but haven't quite understood the idea of how it works. I got a couple of `NullPointerExceptions` during my experiments that look like this:
```
javac -cp javacpp.jar:/home/vasniktel/javacpp-test test/Lib.java 
Generating /home/vasniktel/javacpp-test/jnijavacpp.cpp
Generating /home/vasniktel/javacpp-test/test/jniLib.cpp
Warning: Method "public static native void test.Lib.allocateArray(int)" cannot behave like a "ArrayAllocator". No code will be generated.
Exception in thread "main" java.lang.NullPointerException
        at org.bytedeco.javacpp.tools.Generator.methods(Generator.java:1748)
        at org.bytedeco.javacpp.tools.Generator.classes(Generator.java:1645)
        at org.bytedeco.javacpp.tools.Generator.generate(Generator.java:206)
        at org.bytedeco.javacpp.tools.Builder.generateAndCompile(Builder.java:604)
        at org.bytedeco.javacpp.tools.Builder.build(Builder.java:1107)
        at org.bytedeco.javacpp.tools.Builder.main(Builder.java:1341)
```

The question is how those annotations work and whether this exception is an intended behaviour?
Yes, I know you already know but that was tagged on to the HDF5 stuff so proper bug report time

Is there still a skip tests switch? I  wanna do presets hdf5 for you.

This is an ARMHF 32bit on a Raspberry Pi4 with stock OS (a Debian Buster fork)

Of note is this which occurs right at the start - possibly the problem? Full log attached.

[debug.jcpp.zip](https://github.com/bytedeco/javacpp/files/3694898/debug.jcpp.zip)

WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by com.google.inject.internal.cglib.core.$ReflectUtils$1 (file:/usr/share/maven/lib/guice.jar) to method java.lang.ClassLoader.defineClass(java.lang.String,byte[],int,int,java.security.ProtectionDomain)
WARNING: Please consider reporting this to the maintainers of com.google.inject.internal.cglib.core.$ReflectUtils$1
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release
