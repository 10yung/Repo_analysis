Hi,
It appears that when we create a `new_enum` and then iterate over it with Lua's `pairs` it works fine, but only when the enum is marked with `read_only=false`, here is my reproducer:

```cpp
void test_enum() {
  sol::state st;
  st.open_libraries( sol::lib::base );
  enum class color { red, blue };
  constexpr bool ro = true; // with `false` it works.
  st.new_enum<color, /*read_only=*/ro>(
      "color", {{"red", color::red}, {"blue", color::blue}} );
  auto script = R"lua(
    print( "start" )
    for k, v in pairs( color ) do
      print( tostring(k) .. ": " .. tostring(v) )
    end
    print( "end" )
  )lua";
  st.safe_script( script );
}
```

When `ro` is `false` I get:

```
start
red: 0
blue: 1
end
```

but with `ro` equal to `true` I get:

```
start
end
```

Is that expected and/or am I doing something wrong?  Thanks
I want to unregister an usertype for a sol::state, but as far as I know it would also unregister all for all the other sol::states, can I do this on only 1 sol::state.

(I want to do it for safety, in some instances using some data structures is UB)
Hi,

i wanted to ask this in gitter but i cannot find the channel anymore. So i try here.
I use sol2 in an embedded project and in general it works really great. The problem i have right now is that even small ```new_usertypes``` with only one function binded seem to consume around 4kB of RAM when using Lua 5.3. If the number of functions which are bound increase the memory consumption goes up to 8kB and more.
So my questions is, is there a way to use sol2 more memory efficient in regards to ram usage?

I just use the ```collectgarbage('count')``` function from Lua 5.3 to measure the total memory with different bindings compiled.
Beside that i'm using Lua5.3 and the GNU Arm Embedded Toolchain, arm-none-eabi-g++ 8.2.1

Thanks in advance for any comments :)
Maybe sol2 will support the package Manager from the conan ?
Hello, users of sol2! This issue was made so that I could get a better idea of what you all use for Lua and how much you like / dislike sol2 compared to what you used to use (if anything) and sol2 now. If anyone could just reply to this issue with their thoughts, perhaps answer some of the questions below (or go on a tangent, really anything), I'd appreciate it. I'm going to be writing a paper about sol2 and the Lua landscape, so I'd like to get to know what my users use sol2 for:
- How did you find out / hear about sol2?
- What're you using it for?
- What Lua library did you use before you found sol2?
- What do you like about sol2?
- What do you dislike about sol2?
- Is it easier or harder from the last Lua library you used? (If you did use a library or the plain C API before this)
- Is the [documentation](http://sol2.readthedocs.io/en/latest/) or [examples](https://github.com/ThePhD/sol2/tree/develop/examples) helpful?
- Anything else about the library you feel like adding or pointing out?

Thanks for much for reading and considering, and double thanks if you do reply!

If you don't have a github, nag me on twitter with @thephantomderp or just shoot me an e-mail or something. :+1: 
