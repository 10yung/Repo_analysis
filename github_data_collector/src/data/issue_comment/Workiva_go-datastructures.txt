when producer are put faster then consumer, the ringbuffer will be full.  put function will infinite loop.
switch dif := seq - pos will always gt 0 so alway case default, this infinite loop is a cpu hog
Dtrie.Get() currently panics if called with a key that does not exist (due to calling `nil.Value()` in this case). Adding a nil check here will prevent this panic from happening, and ensure that the behaviour is as described in documentation.
Tested on v1.0.50:

From the documentation, it sounds like the dtrie is intended to be an immutable, [hash array mapped trie][initial-pr] implementation:

> Dtrie
> A persistent hash trie that dynamically expands or shrinks to provide efficient memory allocation. Being persistent, the Dtrie is immutable and any modification yields a new version of the Dtrie rather than changing the original. Bitmapped nodes allow for O(log32(n)) get, remove, and update operations. Insertions are O(n) and iteration is O(1).

However, this doesn't appear true:

```go
t0 := dtrie.New(nil)
t1 := t0.Insert("a", "b")
t2 := t1.Insert("c", "d")

fmt.Println("trie sizes", t0.Size(), t1.Size(), t2.Size()) // yields 2, 2, 2; should be 0, 1, 2
fmt.Println(t0.Get("c")) // "d"; should be nil
fmt.Println(t1.Get("c")) // "d"; should be nil
fmt.Println(t2.Get("c")) // "d"; which is correct
```

It's also pretty easy to trigger a panic with concurrent access. This will reliably result in a panic on my machine - 

```go
insertLots := func() {
	for i := 0; i < 1000000; i++ {
		m0.Insert(stringEntry("v"), "value")
	}
}
	
go func() {
	insertLots()
}()
go func() {
	insertLots()
}()
```

Now, I know that this project hasn't seen a ton of updates in the past couple of years, and I'd understand if no-one wants to dig in to fix it properly. Nonetheless, I feel like a limitation like this would at least be worth documenting if it's not going to be fixed. I'd be happy to make a PR to that effect.

[initial-pr]:https://github.com/Workiva/go-datastructures/pull/131
Hi,

Thanks for creating this library. Great work!

It seems to me that in RingBuffer we can reduce the number of heap allocations by changing nodes
from an array of node **pointers**: `type nodes []*node`
to an array of node **values**: `type nodes []node`

It should also increase locality, cache efficiency and increase performance in theory.

As you can see the benchmark results below, this change reduced ns/op, B/ops and allocs/op of BenchmarkRBAllocation a lot, while having no significant impact on other benchmarks.

```
type nodes []*node
$ go test -bench BenchmarkRB.* -benchmem
goos: linux
goarch: amd64
pkg: github.com/chrisxue815/go-datastructures/queue
BenchmarkRBLifeCycle-8                   2000000               889 ns/op             200 B/op          3 allocs/op
BenchmarkRBLifeCycleContention-8          100000             12167 ns/op            1999 B/op         29 allocs/op
BenchmarkRBPut-8                        50000000                33.6 ns/op             8 B/op          0 allocs/op
BenchmarkRBGet-8                        100000000               12.1 ns/op             0 B/op          0 allocs/op
BenchmarkRBAllocation-8                    50000             28084 ns/op           40960 B/op       1025 allocs/op
PASS
ok      github.com/chrisxue815/go-datastructures/queue  20.987s
```

```
type nodes []node
$ go test -bench BenchmarkRB.* -benchmem
goos: linux
goarch: amd64
pkg: github.com/chrisxue815/go-datastructures/queue
BenchmarkRBLifeCycle-8                   2000000               875 ns/op             200 B/op          3 allocs/op
BenchmarkRBLifeCycleContention-8          200000             12002 ns/op            1999 B/op         29 allocs/op
BenchmarkRBPut-8                        50000000                26.6 ns/op             8 B/op          0 allocs/op
BenchmarkRBGet-8                        100000000               13.6 ns/op             0 B/op          0 allocs/op
BenchmarkRBAllocation-8                   500000              3833 ns/op           24576 B/op          1 allocs/op
PASS
ok      github.com/chrisxue815/go-datastructures/queue  16.446s
```

this test will fail
```
func TestTrieSuccessorBigGaps(t *testing.T) {
        yfast := New(uint64(0))

        e3 := newMockEntry(13 << 32)
        yfast.Insert(e3)

        successor := yfast.Successor(0)
        assert.Equal(t, e3, successor)

        e1 := newMockEntry(3 << 32)
        e2 := newMockEntry(7 << 32)

        yfast.Insert(e1, e2)

        successor = yfast.Successor(0)
        assert.Equal(t, e1, successor)

        successor = yfast.Successor(1)
        assert.Equal(t, e1, successor)

        successor = yfast.Successor(3<<32 + 1)
        assert.Equal(t, e2, successor)

        successor = yfast.Successor(8 << 32)
        assert.Equal(t, e3, successor)

        successor = yfast.Successor(14 << 32)
        assert.Nil(t, successor)

        successor = yfast.Successor(100 << 32)
        assert.Nil(t, successor)
}
```
```
// Get returns the value for the associated key or returns nil if the
// key does not exist.
func (d *Dtrie) Get(key interface{}) interface{} {
	return get(d.root, d.hasher(key), key).Value()
}
```

`get()` returns `nil` if the key is not found and thus `Value()` raises a panic. Is that by design?
q := queue.NewPriorityQueue(1, true)
q.Put(buffersItem{data, priority})
result, err := q.Get(1)
diff should be int64 else it never less than 0
Java 5 introduced:

https://docs.oracle.com/javase/7/docs/api/java/util/concurrent/CopyOnWriteArrayList.html

It's very efficient if you have a List where you mostly need to iterate the ArrayList and don't modify it too often. 

I used this data structure at Java and have an idea how to make it right at Go. I am willing to work on it and create a Pull request then. Just want to make sure there is no active development or it was discussed and rejected by some reason.

go get github.com/Workiva/go-datastructures/...

```
# github.com/Workiva/go-datastructures/btree/immutable
D:\go_project\src\github.com\Workiva\go-datastructures\btree\immutable\node.go:123:26: multiple-value uuid.NewV4() in single-value context
D:\go_project\src\github.com\Workiva\go-datastructures\btree\immutable\node.go:300:22: multiple-value uuid.NewV4() in single-value context
D:\go_project\src\github.com\Workiva\go-datastructures\btree\immutable\node.go:323:22: multiple-value uuid.NewV4() in single-value context
D:\go_project\src\github.com\Workiva\go-datastructures\btree\immutable\node.go:424:17: multiple-value uuid.NewV4() in single-value context
D:\go_project\src\github.com\Workiva\go-datastructures\btree\immutable\rt.go:152:24: multiple-value uuid.NewV4() in single-value context
D:\go_project\src\github.com\Workiva\go-datastructures\btree\immutable\rt.go:200:21: multiple-value uuid.NewV4() in single-value context

```