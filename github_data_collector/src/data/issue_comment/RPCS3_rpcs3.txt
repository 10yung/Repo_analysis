Handles Qt deprecation warnings (see #7131).
Handles some random warnings in cellVideoOut and RSXThread (shouldn't affect anything)
Fixes a weird change in the VS filters that moved some random files to unwanted places.

closes #7131
Nowadays the game seems to be running and rendering nearly perfectly, with the exception of cubemap reflections flickering. It would seem like cubemaps render properly every other frame, for example:

(ignore transparency issues, they are not present in the game nor on captures, looks like I just chose wrong settings while saving the JPG)

"Good" frame, notice reflections on the car:
![good-frame](https://user-images.githubusercontent.com/7947461/72678625-015cd800-3aa8-11ea-8072-ac8733aa600d.jpg)

"Bad" frame - reflections are downgraded, most noticeably on the rear windshield:
![bad-frame](https://user-images.githubusercontent.com/7947461/72678643-2c472c00-3aa8-11ea-9434-5f077f7e9761.jpg)

Basing on my observations in RenderDoc, it seems like reflections are rendered to a 256x256 cubemap texture and every other frame seems to have this cubemap either fully black or have only one side rendered. Attached "bad frame" capture only have 1 out of 6 sides rendered, while a "good frame" capture has them all.

As for the log file, there seems to be nothing of use there except for the fact game **spams**
`E {RSX [0x00d2cc0]} RSX: Could not gather all required slices for cubemap/3d generation`

Attaching an RSX capture (don't know if it comes from a "good" or a "bad" frame) and two RDC captures. I bookmarked the draw call drawing the car's body in both captures, as I consider it a good starting point for the analysis.
https://mega.nz/#!u3pTBaKD!XeZkMBXmwniGLj4NXiYMemOWs_KfaPk04i4GMGCJxjg
when you go to pick your character the wizards portrait is glitched 
the other 2 are correct
here is a rsx capture
![realms](https://user-images.githubusercontent.com/2696404/72677443-890e0b00-3ad7-11ea-8eb1-9de1fe80bdfa.PNG)
[NPUB30793_20200119160048_capture.zip](https://github.com/RPCS3/rpcs3/files/4082410/NPUB30793_20200119160048_capture.zip)
here is a renderdoc aswell
https://mega.nz/#!tnYxRaxQ!dD1m7hcKCJuQypIxrKv6iY-Aa7ilLf70bIAb-y3k3W8


Crashes on Kreeli Comet Clank section with:
F {RSX [0x1c6209c]} RSX: class std::runtime_error thrown: Verification failed: 
(in file C:\projects\rpcs3\rpcs3\Emu\RSX\Common\texture_cache.h:2601)

This affects Vulkan and OpenGL backends.

* When passing unmapped memory to those functions something unexpected happens:
The first memory transaction (64k unless cellFsSetIoBuffer is used, todo) is checked with EFAULT, but the rest don't!
Instead they abort the operation, return CELL_OK and nread/nwrite is set to what succeeded to write/read until then.
To implement this functionality I added a new capability to vm::check_addr and vm::try_access:
Return number of bytes obey page flags requirements from start address.

Some other good side effects of this new functionality:

* Simplified stack bounds check in PPU debugger.
* fmt formatting of char* no longer checks allocation of single bytes but as much as possible with one call of vm::check_addr.
* Fixed underflow of vm::check_addr(0,0).

Testcase: https://github.com/elad335/myps3tests/tree/master/ppu_tests/cellFsWrite-Read%20unallocated%20memory%20bound .

This also potentially fixes some page faults with some Unity games when passing page faults notifications enabled unmapped memory to those functions.
I'll wait for #7281 to be merged first as it simplifies this.

Hello Guys,

thanks for fixing the Vulkan API error in #7263. But now i get MEM: Access violation at the exact same points in the game.
Partial display offset ingame (very old bug, but appears to be not reported)
(I tried approx every options but it is always present even with OpenGL)

![Image2](https://user-images.githubusercontent.com/45921529/72668733-23b01080-3a2a-11ea-9c2d-c469954ba41b.jpg)




A purely speculative fix on my part. I noticed OpenAL constantly ran out of buffer only when buffering(which resulted in audio being worse than unbuffered). 

The calculations that are there seems sound but if unbuffered gets 2 buffers, buffered should get buffers for buffering + 2 presumably(which ends up as +3 because of div roundup).

This fixes OpenAL audio when buffering.
This is running on Manjaro, with RADV LLVM 9.0.1 on an RX 570.
Happens always when loading into a race, either just before starting to show 3D graphics or after a few seconds.
Example of the moment when it crashes:
![image](https://user-images.githubusercontent.com/16805474/72654908-6d3c2500-3970-11ea-8c9f-eac3cf1c6e55.png)

Doesn't seem to be a regression. I've always had this issue on Linux, but I don't remember ever having it on Windows.
Attaching a log with Debug Output enabled:
[RPCS3.log.gz](https://github.com/RPCS3/rpcs3/files/4079765/RPCS3.log.gz)

Let me know if you need anything else.