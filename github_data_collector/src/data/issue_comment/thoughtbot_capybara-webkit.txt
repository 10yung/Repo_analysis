I'm trying to use Cucumber/Capybara/WebKit under an Ubuntu 18.04 installation in WSL, so it's possible there's something about the WSL environment that's creating the following issue.

I've already tried following the solutions [here](https://github.com/thoughtbot/capybara-webkit/issues/912) and [here](https://github.com/thoughtbot/capybara-webkit/issues/678), and as best as I can tell, everything installed correctly (xvfb, Qt). I then uninstalled and reinstalled capybara-webkit, and I have added the `headless` gem. 

At the command line of the WSL instance, webkit-server still reports:
```
QStandardPaths: XDG_RUNTIME_DIR not set, defaulting to '/tmp/runtime-derrell'
qt.qpa.screen: QXcbConnection: Could not connect to display 
Could not connect to any X display.
```

And running `xvfb-run -a cucumber` reports in part: 
```
11:48:14.665 Received "Visit(http://127.0.0.1:57233/dashboard)"
11:48:14.666 Started "Visit(http://127.0.0.1:57233/dashboard)"
11:48:14.669 Load started
11:48:14.670 "Visit(http://127.0.0.1:57233/dashboard)" started page load
11:48:14.691 Started request to "http://127.0.0.1:57233/dashboard"
11:48:14.692 Finished "Visit(http://127.0.0.1:57233/dashboard)" with response "Success()"
11:48:34.713 Received 0 from "http://127.0.0.1:57233/dashboard"
11:48:34.714 Page finished with true
11:48:34.715 Load finished
11:48:34.715 Page load from command finished
11:48:34.716 Wrote response false "{\"class\":\"TimeoutError\",\"message\":\"Request timed out after 20 second(s)\"}"
  @javascript
  Scenario: Going to the page and entering a number in the form results in the display of the current weather for that many locations # features/display_weather_at_random_locations.feature:3
    Given I have a page that has a form that accepts a number                                                                         # features/step_definitions/display_weather_steps.rb:1
      Request timed out after 20 second(s) (Capybara::Webkit::TimeoutError)
```

I'm open to any suggestions for what's missing and for trying anything you can suggest. I'd wager I'm unusual in attempting to use this environment in this way.
I'm upgrading my Capybara to the latest version (up from 2.18.0) This causes the `normalized_whitespace` deprecation running to show up a lot when running my tests. I read that pulling the master branch of the gem fixes the issue, effectively it does but now my CI on Gitlab fails with:

```
Errno::ENOENT: No such file or directory - /builds/products/micheticket/vendor/ruby/2.5.0/bundler/gems/capybara-webkit-77fdac424cd6/bin/webkit_server
```

Does anyone have any Idea on how to fix this?
Hello!
There's already a couple of issues (https://github.com/thoughtbot/capybara-webkit/issues/822, https://github.com/thoughtbot/capybara-webkit/issues/1056) related with the problematic usage of `flexbox`. We're in 2019 and now everyone either uses it or `display: grid` for creating layouts (floats are dead). 

I am migrating an old Rails codebase from sprockets to webpacker and without changing a single line of CSS, just migrating the bundling part, i was breaking a lot of tests. Just spend a full day bashing my head against the screen trying to figure out what have i done, as everything was working before. 

The issue was that my new `autoprefixer` config had this subtle difference: `flexbox: no-2009`. Which made total sense: we're in 2019, browser support as per [`.browserlistrc` of the project](https://browserl.ist/?q=last+4+version%2C+not+ie+%3C+10) is `last 4 version, not ie < 10` so why add "garbage" css to my bundles? 

According to [Autoprefixer](https://github.com/postcss/autoprefixer#features)
> flexbox: "no-2009" will add prefixes only for final and IE versions of specification.

Which is not enough to make correct tests rendering. 

# Proposal
Using this https://github.com/thoughtbot/capybara-webkit/issues/822#issuecomment-125331289,  I got the following output:

```
Capybara: 2.4.4
capybara-webkit: 1.15.1
Qt: 5.5.1
WebKit: 538.1
QtWebKit: 5.5.1
```
A quick google search for `WebKit: 538.1` lead me to believe that we're taking about a circa [2013/2014 engine](https://github.com/flowhub/jsjob/issues/7) which matches to something like **Safari 8** kind of browser according to [this table](https://en.wikipedia.org/wiki/Safari_version_history)

The comment also states:
> Which CSS properties are supported will depend on the version of Qt you have installed.

We can't have a one size fits all, be we can advise sensible defaults. Based on all this i think adding a section to readme **would be really helpful**, here's a sample:

----  

## Flexbox
For testing bundles, use the oldest flexbox syntax possible. If you're using `autoprefixer` make sure that, for test environment, that's `last 8 versions` as browser targets and also make sure you haven't set [`flex: 'no-2019'` config property](https://github.com/postcss/autoprefixer#feature)

----  

Happy to make a PR if you guys agree!
Thanks for the work on this!
Cheers ✌️ 
Currently I am unable to maximize the window. I tried maximum functions(resize_window, Capybara.current_window.maximize, execute_script("window.resizeTo(1024, screen.height)")) to maximize the window with no luck.


Gem version
'capybara-webkit', '~> 1.15.1'


Hello. I'm having some issues with a few tests. The weird thing is that on my other development machine, everything's working smoothly.

Here's the version output.

```
Capybara: 2.13.0
capybara-webkit: 1.15.0
Qt: 5.9.1
WebKit: 538.1
QtWebKit: 5.9.1
```

What's interesting is that on my laptop, the one that runs without issues, both Qt and QtWebkit are at 5.5.1.

Here's the output:

```
  1) Error:
Onboarding2018Test#test_registro:_layout_test:
EOFError: end of file reached
    test/integration/onboarding_2018_test.rb:17:in `block (2 levels) in <class:Onboarding2018Test>'
    test/integration/onboarding_2018_test.rb:16:in `block in <class:Onboarding2018Test>'

Error:
Onboarding2018Test#test_registro:_layout_test:
Capybara::Webkit::CrashError: The webkit_server process crashed!

  Broken pipe

This is a bug in capybara-webkit. For help with this crash, please visit:

https://github.com/thoughtbot/capybara-webkit/wiki/Reporting-Crashes
    test/test_helper.rb:77:in `teardown'
```

And here's the [debug output](https://gist.github.com/faelsoto/e5b1bd21d9dd345fbed8275aa68c9a96).
Hi!

Since [this commit](https://github.com/teamcapybara/capybara/commit/b0e82b092531b2fb7def85e4e6350a2493097fcd#diff-1267c558eb1eedb953ffd99b2ed187ec) on Capybara, first released with capybara  3.0.0.rc2, this deprecation warning is thrown:

> DEPRECATED: Capybara::Helpers::normalize_whitespace is deprecated, please update your driver

This seems to be fixed on master in [this commit](https://github.com/thoughtbot/capybara-webkit/commit/778ec7f43cd1e8de272c2fc7023ce9d52fa74f9d#diff-6377fd92e58358ecd94b575d89c6f709). Any chance of a new release?

Thank you!
If a crash occurs during `reset!`, options such as `allowed_urls`, `blocked_urls`, etc aren't correctly set for the next test.  This adds a retry to `reset!` in an attempt to work around the crashes.
The Capybara::Webkit::Browser `command` method used to send commands and read responses over the socket to the Webkit process can become out-of-sync.  When this happens, `read_response` returns a prior response, which does not match up to the most recent command.

This often manifests to the user as errors such as `JSON::ParserError: 757: unexpected token at 'true'`  or `JSON::ParserError: A JSON text must at least contain two octets!` or possibly issues such as #957.  There may be other errors possible since it depends on what the code does with response message.

I'm not sure what conditions this occurs under, but can almost 100% reliably reproduce it locally by calling `page.evaluate_script` followed by a call to `page.driver.console_messages`, on a page that is performing AJAX requests.  The response for the first **Evaluate** command is accidentally read by the subsequent **ConsoleMessages** command, which attempts to parse the evaluate response as JSON.

Here is an example with logging I added.  Note how the 'CHECK COMMAND Evaluate' never finishes reading a response and `READ COMMAND ConsoleMessages` reads the evaluate response string '1':

```
STARTING COMMAND Evaluate@1541370685
CHECK COMMAND Evaluate@1541370685
12:54:09.300 Received 200 from "http://127.0.0.1:56578/catering/menu_packages?max_budget=10002&menu_date=2018-11-07&min_budget=0&page=6"
12:54:09.302 Started request to "http://127.0.0.1:56578/catering/menu_packages?max_budget=10002&menu_date=2018-11-07&min_budget=0&page=7"
12:54:09.432 Received 200 from "http://127.0.0.1:56578/catering/menu_packages?max_budget=10002&menu_date=2018-11-07&min_budget=0&page=7"
12:54:09.433 Started request to "http://127.0.0.1:56578/catering/menu_packages?max_budget=10002&menu_date=2018-11-07&min_budget=0&page=8"
Page is Capybara::Session
Page driver is Capybara::Webkit::Driver
[DEPRECATION] Capybara::Webkit::Driver#browser is deprecated.
STARTING COMMAND ConsoleMessages@1541370685
CHECK COMMAND ConsoleMessages@1541370685
12:54:09.666 Received 200 from "http://127.0.0.1:56578/catering/menu_packages?max_budget=10002&menu_date=2018-11-07&min_budget=0&page=8"
12:54:09.669 Started request to "http://127.0.0.1:56578/catering/menu_packages?max_budget=10002&menu_date=2018-11-07&min_budget=0&page=9"
12:54:09.787 Received "Evaluate(angular.element(document.querySelector('[ng-app]')).injector().get('$http').pendingRequests.length, [])"
12:54:09.838 Started "Evaluate(angular.element(document.querySelector('[ng-app]')).injector().get('$http').pendingRequests.length, [])"
12:54:09.838 Finished "Evaluate(angular.element(document.querySelector('[ng-app]')).injector().get('$http').pendingRequests.length, [])" with response "Success(1)"
12:54:09.838 Wrote response true "1"
12:54:09.838 Received "ConsoleMessages()"
12:54:09.839 Received 200 from "http://127.0.0.1:56578/catering/menu_packages?max_budget=10002&menu_date=2018-11-07&min_budget=0&page=9"
12:54:09.840 Started request to "http://127.0.0.1:56578/catering/menu_packages?max_budget=10002&menu_date=2018-11-07&min_budget=0&page=10"
12:54:10.006 Started "ConsoleMessages()"
12:54:10.006 Finished "ConsoleMessages()" with response "Success([{\"line_number\":34,\"message\":\"This page does not have a Lish metrics_page_name or page_identity_js set and will not be enabled for UTM attribution tracking.\",\"source\":\"http://127.0.0.1:56578/catering/orders/C517346447/checkout\"}])"
12:54:10.007 Wrote response true "[{\"line_number\":34,\"message\":\"This page does not have a Lish metrics_page_name or page_identity_js set and will not be enabled for UTM attribution tracking.\",\"source\":\"http://127.0.0.1:56578/catering/orders/C517346447/checkout\"}]"
12:54:10.008 Received 200 from "http://127.0.0.1:56578/catering/menu_packages?max_budget=10002&menu_date=2018-11-07&min_budget=0&page=10"
12:54:10.010 Started request to "http://127.0.0.1:56578/catering/menu_packages?max_budget=10002&menu_date=2018-11-07&min_budget=0&page=11"
check=<ok>
READ COMMAND ConsoleMessages@1541370685
response_length=<1>
response=<1>
FINISHED COMMAND ConsoleMessages@1541370685 with response <1>
```
This appears to happen because the `rescue IO::WaitReadable` in `connection.read` never triggers for the **Evaluate** command.

When I remove the `evaluate_script` call everything works as expected.

I'm using `ruby 2.2.4p230 (2015-12-16 revision 53155) [x86_64-darwin15]` with _page.driver.version_
```
Capybara: 2.13.0
capybara-webkit: 1.15.0
Qt: 5.5.1
WebKit: 538.1
QtWebKit: 5.5.1
```

In our test environment, we inject a javascript file into the page to provide us with some extra support code.  This works great when I run the application locally without SSL.  However, when attempting to do the same with the application deployed to the test environment, the debug output reports a status code of 0 when trying to fetch the file over HTTPS.  The server logs do not show any request.  I tried to use wireshark, and I see a certification negotiation, but couldn't glean anything else from the capture since the payloads are encrypted.  The server certificate is self signed, but I have set the ignore_ssl_errors option.  I will start digging into the code, but any pointers on where to look would be appreciated.

![screen shot 2018-03-02 at 12 05 09 pm](https://user-images.githubusercontent.com/40162/36911598-022ab05e-1e12-11e8-8598-bdbc491ca805.png)

When a preflight CORS request fails, capybara webkit crashes:

```
Capybara::Webkit::CrashError:
    The webkit_server process crashed!

     Connection reset by peer

    This is a bug in capybara-webkit. For help with this crash, please visit:

    https://github.com/thoughtbot/capybara-webkit/wiki/Reporting-Crashes
```

If it helps, this is the preflight options check that appears to kill webkit:

```
curl -v -X OPTIONS  --insecure https://api.github.com
* Rebuilt URL to: https://api.github.com/
*   Trying 127.0.0.1...
* TCP_NODELAY set
* Connection failed
* connect to 127.0.0.1 port 49153 failed: Connection refused
* Failed to connect to localhost port 49153: Connection refused
* Closing connection 0
curl: (7) Failed to connect to localhost port 49153: Connection refused
```

### Example

I have made the [following project](https://github.com/AlanFoster/rspec-capybara-feature-testing/commit/cafd034e29a083299e985b9cecfe0c7560920cf9) as an example:

```
git clone -b webkit-crashes-with-preflight-failure git@github.com:AlanFoster/rspec-capybara-feature-testing.git
cd rspec-capybara-feature-testing/website
bundle
```

Running the following command will cause webkit to crash 100% of the time:

```
$ FORCE_WEBKIT_CRASH=true DEBUG=true rspec ./spec/features/javascript_spec.rb
> ...
     Failure/Error: expect(page).to have_content('Successfully retrieved server response')

     Capybara::Webkit::CrashError:
       The webkit_server process crashed!

         Broken pipe

       This is a bug in capybara-webkit. For help with this crash, please visit:

       https://github.com/thoughtbot/capybara-webkit/wiki/Reporting-Crashes

```

Whilst correctly stubbing the preflight CORS request will not crash webkit:

```
DEBUG=true rspec ./spec/features/javascript_spec.rb
...

Finished in 2.15 seconds (files took 1.91 seconds to load)
1 example, 0 failures
```

Context: I am using puffing billy to stub requests made during feature tests.