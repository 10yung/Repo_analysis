When you're working with a large tree and you begin marking trees containing branches as complete, you can no longer see the + sign that indicates subtrees as the skull seems to clobber/hide the symbol, consider instead, making it only prepend the skull. In addition, consider making it so that the plus sign and skull symbols do not cover the first part of the node text. Instead of covering the text, have it prepend the node text.
Is there any way to export one's data? Many thanks in advance!
Does anyone have a solution to backup the .void.db file. A private/public gist or github repo would be ideal.

A general and agnostic implementation would be to enable pre and post hooks for void. (pre-open?? post-close??). This would allow the implementation details for backups and other operations to be though out later.

----

## git back up implementation assuming pre/post hooks

#### personally I use void only on one computer so my commands would look as follows
- pre-hook would do a `git pull`
- post-hook would do a `git push`
- failure due to network or other reasons would fail silently.. maybe a place to show error messages within void??

I am getting an error when trying to use KEYFILE env var. The contents of the `void.keys` file is a copy of the `default.keys` from the repo.

Let me know if I can help debug.

```
➜  ~ export KEYFILE=/Users/toidiu/void.keys
➜  ~ void
thread 'main' panicked at 'called `Result::unwrap()` on an `Err` value: Custom { kind: Other, error: StringError("invalid config at line 0: # Comments are supported.") }', src/libcore/result.rs:997:5
note: Run with `RUST_BACKTRACE=1` environment variable to display a backtrace.
➜  ~
```


<details>
<summary>file content</summary>
<p>

```
# Comments are supported.

unselect:esc
scroll_up:pgup
scroll_down:pgdn
delete:del
select_up:up
select_down:down
select_left:left
select_right:right
erase:backspace
create_sibling:enter
create_child:tab
create_free_node:C-n
execute:C-k
drill_down:C-w
pop_up:C-q
jump:C-f
toggle_completed:C-a
toggle_hide_completed:C-h
arrow:C-r
auto_arrange:C-p
toggle_collapsed:C-t
quit:C-c
save:C-x
toggle_show_logs:C-l
enter_command:C-e
find_task:C-v
yank_paste_node:C-y
raise_selected:C-g
lower_selected:C-d
search:C-u
undo_delete:C-z
help:?
```

</p>
</details>

It would be nice to be able to hit a key combo to move the current item up one scope level. By default I would suggest "Shift + Tab" (to de-indent). This would move the currently selected item to be at the same level as its' parent.
This pull request aims to add signal-handling to void

- [x] add nix as dependency
- [x] add `signals` to the `Config` structure
- [x] initialize `Config.signals` with various signals that bind to `Action::Quit`
- [ ] add `handle_signal()` akin to `handle_event()`
- [ ] call it in `run()`
Hi,

I am the author of the [imag project](https://imag-pim.org).

Would you like to collaborate on implementing a terminal based organizer? I have a big infrastructure for implementing PIM-related domains for CLI/TUI usage and I would love to collaborate to build a terminal based organizer tool based on the imag infrastructure...

Let me hear what you think!
There have been a lot of new features implemented recently by PR's (mostly by @alok :wink:). I'd be happy to do a release soon but I really want to improve the CI and testing of the project first.

Pinning an old version of `void` to write a datafile and then opening it again in the current `master` branch would catch most data loss issues.
If you've got ideas for more testing opportunities, please post them as comments.

I'll try to find the time to take a stab at it this week
I noticed that if you hit c-k on a node with no special handling, it just executes it as a shell command. If you want to open it in an editor, you have to type `txt:` first. Wouldn't a better default be to open text in a text editor and for shelling out to require explicit handling with something like a `shell:` prefix?
From the PR (#18) initially implementing this:

> I often use deep trees, and currently every time you reopen void, the view gets reset to the `home` level. This makes it so the view stack and the current focus view are restored between runs. Maybe it's not the best way to things (just exposing fields with `pub`), but it might be helpful anyway.
> The changes should work on existing documents, as all the new proto fields are optional, but I haven't done exhaustive testing of this.

An alternative implementation was added with PR #27. Unfortunately adding this feature isn't quite that simple. It requires an update to the protobuf generated code which leads to horrible data loss if not done correctly.

Therefore this feature is blocked on a few changes around configurable data formats

- Existing data files (`legacy`) need to keep working without data loss
- [ ] New storage format needs to include current selection
- [ ] There needs to be a convenient way to migrate from the legacy format to the new one

I'll also add a milestone to this once we can estimate how much work is _actually_ required for this