Hello, I'm running into this issue, not sure if I'm doing something wrong or not.

```scala
import $ivy.`io.trane::arrows-stdlib:0.1.22`
import arrows.stdlib._
import scala.concurrent._
import scala.concurrent.ExecutionContext.Implicits.global
import scala.concurrent.duration._

Await.result(Future.sequence(List(Future.firstCompletedOf(List(Future.successful(1))))), Duration.Inf)
// List(1)

Task.sequence(List(Task.firstCompletedOf(List(Task.async(Future.successful(1)))))).run(())
// java.lang.ClassCastException: java.base/[Ljava.lang.Object; cannot be cast to [Lscala.concurrent.Future;
//   arrows.stdlib.ArrowImpl$Sequence.runSync(ArrowImpl.scala:226)
//   arrows.stdlib.ArrowRun$.apply(ArrowRun.scala:186)
//   arrows.stdlib.Arrow.run(Arrow.scala:90)
```
Is there any plans of providing https://github.com/traneio/future backend? Current stdlib lacks of some useful features
I know of how you feel of having Cats as dependency ðŸ™‚ but providing [cats-effect](https://typelevel.org/cats-effect/) integration in a different sub-project would be cool.

Consider that cool libraries like [Monix](https://monix.io/), [FS2](https://github.com/functional-streams-for-scala/fs2), [Http4s](https://github.com/http4s/http4s), [Doobie](https://github.com/tpolecat/doobie) and others now have `cats-effect` integration and would be usable with your `Task` implementation, if those type class instances are provided.

You also get tests for free via `cats-effect-laws`, so it would be a win at least for that ðŸ™‚