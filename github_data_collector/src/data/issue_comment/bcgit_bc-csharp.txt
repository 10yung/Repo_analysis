Iâ€™m working on a .Net application that is consuming BouncyCastle  v 1.8.5.  We are considering migrating to NuGet PackageReferences https://docs.microsoft.com/en-us/nuget/reference/migrate-packages-config-to-package-reference#package-compatibility-issues.  But migrating the project that consumes BouncyCastle is failing because BouncyCastle.Crypto.dll is directly in the lib folder of this package which is not supported as per above link - section " Assemblies in the lib root are ignored when the package is installed after the migration".  Is there a plan to repackage Bouncy Castle so that  the dll is under the supported target frameworks sub folder?

BouncyCastle includes many symmetric encryption engines, as well as RSA and ElGamal encryption engines (asymmetric engines). It also has a lot of online resources about how to use these engines to perform encryption/decryption processes. However, a bouncy castle provides no Elliptic Curve engine. After reviewing the code, all asymmetric engines implement the AsymmetricBlockCipher interface and none of them is an EC engine.

There are some engines, like IESEngine, that provides a public/private EC agreement on top of the encryption/decryption process (e.g. ECDHBasicAgreement), however, it doesn't use the public/private keys directly, instead, it calculates a new symmetric key from both keys that are then used to encrypt the plaintext message using a predefined symmetric cipher.

Q: How to implement a safe EC encryption/decryption process using directly the ECKeyParameters generated using the above function (if possible)?
At the moment the key encryption algorithm, when generating a cms envelope, is taken from the subjectPublicKeyInfo of the recipients certificate.
It is not possible to set another padding scheme, e.g. RSAES-OAEP with parameters (like...sha256, mgf1sha256) to the KeyTransferRecipient.
Meanwhile decryption of encrypted data within an cms envelope with this padding scheme (created with NetCore 3.1) is possible and works well.

I tried changing the key encryption algorithm (hard coded) to "RSA//OAEPWITHSHA-256ANDMGF1PADDING. And added the appropriate algorithm and parameters to the KeyTransferRecipient.
This seemed to work: encryption parameters where set correctly, encryption was possible.
Decryption worked with BC api like a charm.

But when validating with other libraries the encrypted data couldn't be decrypted (OpenSSL, NetCore 3.1)
My apologies if this isn't the right place to voice.

The file version for BouncyCastle.Crypto.dll in the 1.8.5.2 NuGet package is lower than the 1.8.5 package:
1.8.5: 1.8.5.50
1.8.5.2: 1.8.5.2

When used as part of an installer this creates a problem where the older version will be left behind because it's a higher/newer version or removed entirely (weird decade-long MSI upgrade bug).

Honestly, not much you can do about it now and we're going to solve our installation issue by sticking to the 1.8.5 release until 1.8.6 hits.  I just figured I'd mention it since it's very likely going to impact anyone who creates installers and followed the 1.8.5 to 1.85.2 upgrade path as we did.

Thanks for all your work on this project!
          Bryan
https://github.com/bcgit/bc-csharp/blob/7248688e6f513cbdde1ccc1d39904cb964b0c88a/crypto/test/src/asn1/test/ASN1IntegerTest.cs#L31


```
Test Name:	TestFunction
Test FullName:	UnitTests.Org.BouncyCastle.Asn1.Tests.Asn1IntegerTest.TestFunction
Test Source:	C:\Projects\GitHub\bc-csharp\crypto\test\src\asn1\test\ASN1IntegerTest.cs : line 359
Test Outcome:	Failed
Test Duration:	0:00:00

Test Name:	TestFunction
Test Outcome:	Failed
Result StackTrace:	at Org.BouncyCastle.Asn1.Tests.Asn1IntegerTest.TestFunction() in C:\Projects\GitHub\bc-csharp\crypto\test\src\asn1\test\ASN1IntegerTest.cs:line 363
Result Message:	
Expected string length 17 but was 23. Strings differ at index 13.
  Expected: "Asn1Integer: Okay"
  But was:  "Asn1Integer: no message"
  ------------------------^

```
Does BC support any of the methods of Format Preserving Encryption, or are there any better options?

https://en.wikipedia.org/wiki/Format-preserving_encryption
Hi, faced some issue with Gost-2012 signature verification.
For example for such signature: [signature_with_file.zip](https://github.com/bcgit/bc-csharp/files/3845325/signature_with_file.zip)

If I call `SignerInformation.Verify(signerCert)` it throws [SecurityUtilityException ](https://github.com/bcgit/bc-csharp/blob/f18a2dbbc2c1b4277e24a2e51f09cac02eedf1f5/crypto/src/security/SignerUtilities.cs#L563)
"1.2.643.7.1.1.2.2WITH1.2.643.7.1.1.1.1 not recognised"

Bouncy castle doesn't know anything about Gost2012 signature algorithm widespread oids (1.2.643.7.1.1.1.1, 1.2.643.7.1.1.1.2), so it can't create DigestSigner object with correct signer and digest at `SignerUtilities.GetSigner(...)`

In PR I add this correct mappings.

By the way, if such configuration can be done by library user, It would be perfect:)


When i  use encrypt with key store in memory stream in C#

```
var keyStream = new MemoryStream(Encoding.UTF8.GetBytes("Public key"));
var publicKeyStream = PgpUtilities.GetDecoderStream(keyStream );
var pgpObjectFactory = new PgpObjectFactory(publicKeyStream);
var gpgObject = pgpObjectFactory.AllPgpObjects(); // return null

```

Key file like this

> -----BEGIN PGP PUBLIC KEY BLOCK-----
> Version: GnuPG v1
> 
> -----END PGP PUBLIC KEY BLOCK-----

 gpgObject  is null, since i can get key with command line and encrypt successfully 
[gnupg](https://gnupg.org/index.html)

Hi, I'm trying to connect to server 91.195.106.137 using TLS1.2. The first handshake is OK and connection is established, but when I send first HTTP request, the server sends HandshakeType.hello_request in response (server probably wants to send HandshakeType.certificate_request in order to authenticate client and return response). But client sends RefuseRenegotiation(); and server returns handshake_failure(40).

So instead of RefuseRenegotiation, I tried this code:
SendClientHelloMessage();
this.mConnectionState = CS_CLIENT_HELLO;
BlockForHandshake();
It doesn't work, I get handshake_failure as well. Can you give me any tips how to implement renegotiation? Thanks for your great work!
The `EVP_CipherUpdate` of `OpenSSL` is able to do this.