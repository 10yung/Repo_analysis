Trying to add unit tests for wonton. I haven't read the wonton code carefully but I thought I found something.

Top-level arrays are not supported
```
列也
```
```
Expected: []
Received: {}
```

```
列 
  物也 
  物也
也
```
```
Expected: [{}, {}]
Received: {"也": {}}
``` 
# WONTON 
*Wenyan's Own Number, Text & Object Notation*

Inspired by #539 (thanks!), An object serialization method made its way to wenyan-lang STDLIB 🚀

The parser/serializer is written in **pure wenyan** and can be found in [`lib/渾沌經.wy`](https://github.com/wenyan-lang/wenyan/blob/master/lib/%E6%B8%BE%E6%B2%8C%E7%B6%93.wy) - Yet another small step towards bootstrapping :)

## Syntax

李白.wonton:
```
物
    之「名」言「李白」
    之「字」言「太白」
    之「號」言「青蓮」
    之「壽考」數「六一」
    之「生年」言「長安元年」
    之「卒年」言「上元三年」
    之「存詩」數「九〇〇」
    之「擅詩」爻「陽」
    之「官」物
        之「銜」言「翰林」。
        之「年」言「天寶元年」。
    也
    之「名句」列
        物
            之「題」言「清平調」
            之「文」言「雲想衣裳花相容。春風拂檻露華濃。」
        也
        物
            之「題」言「長相思」
            之「文」言「長相思。在長安。絡緯秋啼金井闌。微霜淒淒簟色寒。」
        也
        物
            之「題」言「襄陽歌」
            之「文」言「落日欲沒峴山西。倒著接蘺花下迷。襄陽小兒齊拍手。攔街爭唱「白銅鞮」。」
        也
        物
            之「題」言「楊叛兒」
            之「文」言「烏啼隱楊花。君醉留妾家。博山爐中沉香火。雙煙一氣凌紫霞。」
        也
    也
    之「子女」列
        言「伯禽」言「平陽」言「頗黎」
    也
也
```

And to parse, (assuming you have loaded the .wonton file with appropriate `fs` hacks ;)

```
吾嘗觀「「渾沌經」」之書。方悟「包渾沌」「食渾沌」之義。

施「食渾沌」於「李翰林」。名之曰「太白餛飩」。
```

To serialize, use:

```
施「包渾沌」於「太白餛飩」。書之。
```

You can use `JSON.stringify` to check correctness of result:

```
{
    "名": "李白",
    "字": "太白",
    "號": "青蓮",
    "壽考": 61,
    "生年": "長安元年",
    "卒年": "上元三年",
    "存詩": 900,
    "擅詩": true,
    "官": {
        "銜": "翰林",
        "年": "天寶元年"
    },
    "名句": [{
        "題": "清平調",
        "文": "雲想衣裳花相容。春風拂檻露華濃。"
    }, {
        "題": "長相思",
        "文": "長相思。在長安。絡緯秋啼金井闌。微霜淒淒簟色寒。"
    }, {
        "題": "襄陽歌",
        "文": "落日欲沒峴山西。倒著接蘺花下迷。襄陽小兒齊拍手。攔街爭唱「白銅鞮」。"
    }, {
        "題": "楊叛兒",
        "文": "烏啼隱楊花。君醉留妾家。博山爐中沉香火。雙煙一氣凌紫霞。"
    }],
    "子女": ["伯禽", "平陽", "頗黎"]
}
```

This also means that for printing `物`, we will no longer need JSON.stringify hack, being able to replace them with 「包渾沌」

You can check out more usage in `examples/serialization.wy`.

- All types of data are surrounded by single quotes `「」` for simplicity.
- Unlike wenyan-lang, where literary merits of the code are more heavily valued, wonton's design philosophy is to be concise.
- Limitation: only positional number notation is supported, i.e. 九〇 instead of 九十九... Until we rewrite the sophisticated algorithms in hanzi2num in wenyan 

Haven't tested heavily, just excited to show off the new feature. So please Let me know if you spot any bugs or have any suggestion/ideas!
https://opencollective.com/

I am not sure whether this project should accept donations. But open collective does offer this nice badges :)

*Screenshot from Vue.js*
![image](https://user-images.githubusercontent.com/11247099/72645252-17b14980-396b-11ea-93f3-cf1ae1373b89.png)
https://opencollective.com/vuejs/contributors.svg?width=890

I tried 
```
npm i
npm run build
npm t (with several tests failed)
tsc .\src\cli.ts
```
, and 12 errors were found.

余认为，当建一私塾师于此，以授众生文言语法，以通文言。

古人云: 学好文言文，走遍天下都不怕。X)

如果作者同意，可以建一个仓库专门教授相关语法，只有README和案例还是远远不够。

这里有一个案例
# 关于文言文编程语言的变量

> 类型

|类型|解释|字面量例子|
|---|---|---|
|`數`|`number`类型，数字类型，可以是浮点型或者整型|`三千二百零一`，`二〇二〇`|
|`言`|`string`类型，是字符串类型，可以是空字符串|`『予观夫巴陵胜状』`，`「「君子好逑」」`
|`爻`|`boolean`类型，是布尔类型，只有两个值|`陰`，`陽`|
|`列`|`array`类型，是数组类型|`...`|
|`物`|`object`类型，定义对象|`...`|
|`元`|`auto type`,可以反推类型|`...`|

> 声明变量的表达式

通用表达式:

吾有\[N\]\[type\]。曰\[value1\]。曰\[value2\]...曰\[valueN\]。名之曰\[name1\]曰\[name2\]....\[nameN\]

###### 通用例子 

1. 數 言 爻
    * 今/吾有一數/言/爻，曰三/「「问天地好在」」/陰，名之曰「甲」
    * 吾有三數。曰一。曰三。曰五。名之曰「甲」曰「乙」曰「丙」。
2. 元
    * 今/吾有一元，曰三/「「问天地好在」」/陰，名之曰「甲」
3. 列
    * 今/吾有一列，曰「甲」。充「甲」以四。以二。
4. 物
    * 今/吾有一物。名之曰「甲」。其物如是。物之「「乙」」者。數曰三。物之「「丙」」者。言曰「「丁」」。是謂「甲」之物也

PS: 今关键字在javascript编译器中是编译为var name = this.name = value,java版编译器暂时没有做处理

###### 简化写法

有\[type\]\[value\]。名之曰\[name\]

有數五十。名之曰「大衍」。

> 替换

昔之\[before\]，今\[after\]是也/矣

译作: before = after

PS: `也`一般作为`若非`和`若....者`的结束标志，如果不结束代码块，请使用`矣`

> 其他

您可以可以在初始化的时候使用其他变量，如

吾有一數，曰「甲」，名之曰「乙」

译作: var 乙 = 甲;
As stdlib getting big, should we consider precompile stdlib (into asc or something) into the package and make it treeshakeable?

For example, example `畫心` imports over 60kbs of stdlib because it uses

```
吾嘗觀「「算經」」之書。方悟「絕對」「平方根」之義。
```

![image](https://user-images.githubusercontent.com/11247099/72504386-b27d2b80-3878-11ea-8e20-72f7107ea519.png)

Or maybe performance is not the main focus for now? 
## Value/reference semantic

```
吾有一列。名之曰「甲」。
有列「甲」。名之曰「乙」。
充「乙」以一。
噫。夫「甲」。書之。
噫。夫「乙」。書之。
```
Should the code above print [] [1] or [1] [1]?

```
吾有一列。名之曰「空列」。
吾有一物。名之曰「甲」。其物如是。
	物之「「數」」者。數曰一。
	物之「「列」」者。列曰「空列」。
是謂「甲」之物也。
有物「甲」。名之曰「乙」。
昔之「乙」之「「數」」者。今二是矣。
夫「乙」之「「列」」。充其以三。
噫。夫「甲」之「「數」」。夫「甲」之「「列」」。書之。
噫。夫「乙」之「「數」」。夫「乙」之「「列」」。書之。
```
Should the code above print 1 [] 2 [3] or 1 [3] 2 [3] or 2 [3] 2 [3]?

```
吾有一術。名之曰「反」。欲行是術。必先得一數。曰「甲」。是術曰。
	乘「甲」以負一。昔之「甲」者。今其是矣。乃得「甲」。
是謂「反」之術也。

有數一。名之曰「乙」。
施「反」於「乙」。
噫。夫「乙」。書之。
```
Should the code above compile? If so, should it print 1 or -1?

```
吾有一術。名之曰「充」。欲行是術。必先得一列。曰「甲」。是術曰。
	充「甲」以一。乃得「甲」。
是謂「充」之術也。

吾有一列。名之曰「列」。
施「充」於「列」。
噫。夫「列」。書之。
```
Should the code above compile? If so, should it print [] or [1]?

```
吾有一術。名之曰「充」。欲行是術。必先得一列。曰「甲」。是術曰。
	吾有一列。名之曰「乙」。
	凡「甲」中之「丙」。充「乙」以「丙」也。
	充「乙」以一。昔之「甲」者。今「乙」是矣。
	乃得「甲」。
是謂「充」之術也。

吾有一列。名之曰「列」。
施「充」於「列」。
噫。夫「列」。書之。
```
Should the code above compile? If so, should it print [] or [1]?

## Closure capture

```
吾有一術。名之曰「外」。是術曰。
	吾有一術。名之曰「內」。欲行是術。必先得二數。曰「甲」。曰「乙」。是術曰。
		加「甲」於「乙」。乃得矣。
	是謂「內」之術也。
	施「內」於一。乃得矣。
是謂「外」之術也。

施「外」。名之曰「甲」。
噫。施「甲」於一。書之。
```
Should the code above compile and print 2?

```
吾有一術。名之曰「外」。是術曰。
	有數一。名之曰「甲」。
	吾有一術。名之曰「內」。欲行是術。必先得一數。曰「乙」。是術曰。
		加「甲」於「乙」。乃得矣。
	是謂「內」之術也。
	乃得「內」。
是謂「外」之術也。

施「外」。名之曰「甲」。
噫。施「甲」於一。書之。
```
Should the code above compile and print 2?

```
吾有一術。名之曰「外」。是術曰。
	有數一。名之曰「甲」。
	吾有一術。名之曰「內」。欲行是術。必先得一數。曰「乙」。是術曰。
		加「甲」於「乙」。乃得矣。
	是謂「內」之術也。
	昔之「甲」者。今二是矣。
	乃得「內」。
是謂「外」之術也。

施「外」。名之曰「甲」。
噫。施「甲」於一。書之。
```
Should the code above compile? If so, should it print 2 or 3?

```
吾有一術。名之曰「外」。是術曰。
	有數零。名之曰「甲」。
	吾有一術。名之曰「內」。欲行是術。必先得一數。曰「乙」。是術曰。
		加「甲」以「乙」。昔之「甲」者。今其是矣。乃得「甲」。
	是謂「內」之術也。
	乃得「內」。
是謂「外」之術也。

施「外」。名之曰「甲」。
噫。施「甲」於一。書之。
噫。施「甲」於二。書之。
噫。施「甲」於三。書之。
施「外」。名之曰「乙」。
噫。施「乙」於三。書之。
噫。施「乙」於二。書之。
噫。施「乙」於一。書之。
```
Should the code above compile? If so, should it print 1 2 3 3 2 1 or 1 3 6 3 5 6 or 1 3 6 9 11 12?
Hi

首先感谢 @LingDong- 开辟了这么个有趣的项目。我之前都未尝在 github 上提过这么多 issue 。在多次讨论中也使我触发了更多的思考。由此我想到了将 json 结构化数据也用文言表达出来。不过这或许与 wenyan-lang 的发展方向未必十分吻合，所以我新建了一个独立项目：

https://github.com/lymslive/wenyan-json

欢迎品评。有兴趣的也可以用其熟悉的语言实现下 wenyan-json ，标准 json 的语法很简单的。

wenyan-lang 代码文件后缀名已提议推广用 `.文言` 了，所以我将 wenyan-json 数据文件后缀名提议 `.wson` 或 `.文语`。

由于个人兴趣原因，目前我先用非主流脚本语言 viml 实现了 wson 标准语法（有些细节尚待优化）。后面有时间可能考虑写个 C++ 版（也可呼唤大神援助）。等 wenyan-lang 成熟了，定是要用它实现一遍的，因为那将是 wenyan-lang 自举的初步试炼。

还是觉得用母语中文打字比较舒适，直达胸臆，请莫见怪。
We hold a work shop by Wenyan project in Chengdu, Sichuan, China. I think this is first workshop about the project in Global ; )

This is the summary link: https://github.com/FreeCodeCamp-Chengdu/Wiki/issues/20