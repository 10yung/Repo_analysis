Do you have any plans to add Scala 2.12 support?
This happens in certain cases when the data class is defined in a different file from where it is used.

Reproducer:
https://github.com/jeroentervoorde/offheap-error-reproducer
Support of multiple dimensions for Arrays would be very useful

It should support following basic operations:
- `update` - put element at given key
- `get` / `apply` - return underlying value in an Option
- `contains`
- `remove`
- `foreach`
- `map`
- `mapValues`
- `transform`
- `transformValues`
- `toMap`

Implementation could use ideas from non/debox Map:
https://github.com/non/debox/blob/master/src/main/scala/debox/Map.scala

It should support following basic operations:
- `apply` - check if argument is contained in this set
- `add`
- `remove`
- `foreach`
- `transform`
- `map`
- `toSet`

Implementation could use ideas from non/debox Set:
https://github.com/non/debox/blob/master/src/main/scala/debox/Set.scala


Find first element fulfilling given predicate. If no value is found then it will return either empty/null value of data class or empty Option proposed in #100.

It would work like one-element off-heap array. Option.empty would be just a null reference, otherwise it will point to address containing value of this Option.

The use case for this class is return value of some off-heap collection methods, such as find or get in Map.

The implementation could be based on [util.Sorting.quickSort](https://github.com/scala/scala/blob/v2.11.7/src/library/scala/util/Sorting.scala#L55). 

I'm not sure if we should also support sortBy function, since it would require client to provide a reference to an on-heap implementation of Ordering typeclass. Perhaps our interface of sortWith (or we could name it just as "sort" in that case) could take additional mapping argument with identity function as a default value.

Scan the array from left/right with cumulative result as off-heap array.
