> Actually, regarding my suggestion, it would also work if you could supply an EqualityComparer for EquivalencyAssertionOptions, or is it already possible? I'm just saying because EqualityComparer is the "standard" .NET way of doing it, and often there is already a suitable equality comparer available that could be reused as is. At least in our case, I like writing EqualityComparers because they nicely encapsulate the equivalency. I don't like repeating equivalency rules in-line, because usually the same rules are needed in many places. I guess you could encapsulate them as IEquivalencySteps, but why do that if you already have EqualityComparer?


For example

`orderDto.Should().BeEquivalentTo(order, options => options
    .Using<DateTimeEqualityComparer>());`
or

`orderDto.Should().BeEquivalentTo(order, options => options
    .Using<DateTime>(new DateTimeEqualityComparer()));`

Closes #1192.

Nothing special, simple wrapper, feels more fluent than existing `ToDateTimeOffset`.
Closes #1223 
See #1232.

I noticed in the source code that `GenericDictionaryAssertions` uses intersect to compare the keys from the dictionary and the unexpected keys, which does not use the equality comparer of the dictionary. The dual ContainKeys implementation as well as the other methods all use the ContainsKey on the dictionary which is correct.

To illustrate the issue I added two unit tests and changed the implementation in the pull request.

I also updated the xml documentation of all `(Not)ContainKey(s)` to reflect the code. The documentation was saying that the keys were compared using object.Equals which is not the case in the code.
I noticed in the source code that GenericDictionaryAssertions uses `intersect` to compare the keys from the dictionary and the unexpected keys, which does not use the equality comparer of the dictionary.  The dual `ContainKeys` implementation as well as the other methods all use the `ContainsKey` on the dictionary which is correct.

To illustrate the issue I added two unit tests and changed the implementation in the pull request.

I also updated the xml documentation of all `(Not)ContainKey(s)` to reflect the code. The documentation was saying that the keys were compared using object.Equals which is not the case in the code.
* [x] Keep only .NET Core 2.1, .NET Core 3.0, .NET 4.7, .NET Standard 2.0 and 2.1
* [x] Remove older test frameworks
* [ ] Make everything under `Common` that is supposed to be used internally `internal`
* [ ] Remove `IAssertionRule`
* [ ] Capitalize `CallerIdentifier.logger`?
* [ ] Remove `#if NETCOREAPP1_1` from all specs
* [ ] Dog feed betas against extension projects like FluentAssertions.Json, etc.
* [ ] Check that all `#if`s are necessary in both core and specs projects
* [ ] Remove ncrunch files
* [ ] global.json per specs project?
* [ ] Remove references to Gallio and MbUnit
### Description

The output for failed string.Should().Be() shows the incorrect actual value when the value contains JSON strings ending with }}}}.

### Complete minimal example reproducing the issue

```csharp
string expect = "{\"a\":{\"b\":1}}";
string actual = "{\"a\":{\"b\":1}}}}";
actual.Should().Be(expect);
```

### Expected behavior:

```
FluentAssertions.Execution.AssertionFailedException: Expected actual to be
"{"a":{"b":1}}" with a length of 13, but
"{"a":{"b":1}}}}" has a length of 15, differs near "}}" (index 13).
```

### Actual behavior:

```
FluentAssertions.Execution.AssertionFailedException: Expected actual to be
"{"a":{"b":1}}" with a length of 13, but
"{"a":{"b":1}}" has a length of 15, differs near "}}" (index 13).
```

### Versions
Fluent Assertions 5.10.0 Targetting .Net Core 2.0/2.1/2.2/3.0/3.1
Fluent Assertions 5.10.0 Targetting .Net Framework 4.7.2 (not tried others)

### Description

The `SatisfyRespectively` method is a great way to validate fixed elements in a collection, and I've been using it extensively since it was recently introduced.

However, I've come across a few cases where I want to perform the checks on all elements on a sequence, but I don't care about the order that they are returned (as long as they match the exact amount of assertions and only once each).

I'd like to propose the creation of a variation of `SatisfyRespectively` that ignores the order where the assertions are found in the collection, but otherwise work similarly.

### Example

```csharp
// Arrange
var numbers = new [] { 1, 2 };

// Assert
numbers.Should().SatisfyDistinctly(
    n => n.Should().Be(2),
    n => n.Should().Be(1));
```

I used the name `SatisfyDistinctly` here as `Distinctly` was the first logical antonym of `Respectively` that I found, but any fitting name would suffice.

### Description

The `IAsyncEnumerable<T>` type was introduced in C#8 to allow for async streams of data (basically, iterator blocks that can `await` for inner tasks to produce values and can be iterated over using the new `await foreach` construct).

Currently, FA doesn't provide any support for this general-purpose iterator type, forcing people to create their own, or materialize the async stream into a standard collection (using `System.Linq.Async`'s `ToListAsync` for example).

Right after starting to use C#8 more, we've already identified several real-world use-cases for `IAsyncEnumerable` and have been struggling to do assertions on them using FA.

It would be great if most (if not all) collection-based assertions were also available for `IAsyncEnumerable`.

### Versions

Missing on the most recent version, 5.9.0

`BeEquivalentTo` fails if an `internal` property has a different value.

The [documentation](https://fluentassertions.com/objectgraphs/), section "Including properties and/or fields" states:

> Barring other configuration, Fluent Assertions will include all **public** properties and fields

However, it also seems to take into account all `internal` properties and fields.

Who is wrong? The documentation or the implementation? What is `BeEquivalentTo` supposed to do?

In the following code sample, PrivateMembersShouldNotBeCompared succeeds but InternalMembersShouldNotBeCompared fails on the compare of property `InternalProperty`.
```C#
using FluentAssertions;
using Microsoft.VisualStudio.TestTools.UnitTesting;

namespace UnitTestProject
{
    [TestClass]
    public class TestBeEquivalentTo
    {
        class TestSubject
        {
            private string PrivateProperty { get; }
            internal string InternalProperty { get; }
            public string PublicProperty { get; }

            public TestSubject(string privateString, string internalString, string publicString)
            {
                PrivateProperty = privateString;
                InternalProperty = internalString;
                PublicProperty = publicString;
            }
        }

        [TestMethod]
        public void PrivateMembersShouldNotBeCompared()
        {
            TestSubject first = new TestSubject("A", "A", "A");
            TestSubject second = new TestSubject("B", "A", "A");

            first.Should().BeEquivalentTo(second);
        }

        [TestMethod]
        public void InternalMembersShouldNotBeCompared()
        {
            TestSubject first = new TestSubject("A", "A", "A");
            TestSubject second = new TestSubject("B", "B", "A");

            first.Should().BeEquivalentTo(second);
        }
    }
}
```