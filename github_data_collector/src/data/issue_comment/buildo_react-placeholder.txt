
With react 16.9+, `componentWillReceiveProps` has been deprecated. Due to the large range of supported react versions with react-placeholder, a fix for this will require a major version change. The current uses could be moved to `UNSAFE_componentWillReceiveProps`, but I'm not sure if that is available as far back as react 0.14. Is it time for a version that requires react 16.8+ and is built with hooks? ðŸ˜„
I've all my dependencies updated to the latest versions (react-placeholder, typescript, tslint, ...) and only since the last `npm i` I ran I get this error on all the jsx instances of ReactPlaceholder:

```
(alias) class ReactPlaceholder
import ReactPlaceholder

Type '{ children: Element; type: "text"; rows: number; ready: boolean; showLoadingAnimation: true; className: any; }' is missing the following properties from type 'Pick<Pick<(Readonly<CommonProps & { type: "rect" | "text" | "media" | "textRow" | "round"; rows?: number; color?: string; showLoadingAnimation?: boolean; customPlaceholder?: undefined; }> & Readonly<...>) | (Readonly<...> & Readonly<...>), "children" | ... 9 more ... | "customPlaceholder"> & Pick<...> & Pick<...>, "...': style, firstLaunchOnly, customPlaceholder

ts(2739)
```

an example of one of my components it's like:
```
<ReactPlaceholder
      type="text"
      rows={1}
      ready={ready}
      showLoadingAnimation
      className={styles.labelFieldPlaceholder}
    >
      <div className={classNames(styles.labelField, className)}>
        Test
      </div>
    </ReactPlaceholder>
```

this TS error is a blocker e.g. Jest would break
I've encountered a bug with the `delay` prop which would result in the placeholder showing indefinitely, with `{ready: true}` in props but `{ready: false}` in state.

I believe the events which lead to this are, when delay is set to n milliseconds, all of the following happen before n milliseconds is up:

1. `ready` prop is set to false, a timeout to set `ready` state is set and the ID stored in `this.timeout`
2. Some detail in `props.children` is changed, cause `componentWillReceiveProps` to be called again; this causes another timeout to set `ready` state to be created, and the ID stored in `this.timeout` is overwritten
3. `ready` prop is set to true, which sets state to `{ready: true}` and which also deletes the timeout set in step 2 (but, crucially, not the timeout set in step 1)
4. The timeout set in step 1 fires, setting state incorrectly back to `{ready: false}`

The pull request is one approach among many to fix this. You could also clear any existing timeout in `this.timeout` before setting a new one, or change the render method to 
```javascript
return (this.props.ready || this.state.ready) ? this.props.children : this.getFiller();
```

Thanks!
For my use case, I am using this (awesome) component for purposes that don't relate to content loading: https://codesandbox.io/s/zz6o1ok56l

I am using this component in a small example project. I just have the component sitting there. It works perfectly well and does what I want. But I get console errors because I'm not passing `children` or the `ready` prop.

What does the author think of the above props being made optional?
I want the `textRow ` style with with multiple rows . 
Why cant this be done, I dont see it in the documentation but there should be a feature to do this.
```
<ReactPlaceholder type='textRow' rows={10} ready={false}>
     <MyComponent/>	
</ReactPlaceholder>
```
At the moment React Placeholder provides only a .css file for the styles.
Currently @import includes are non-standard for Sass and they'll be removed.

I think there's the need to have the styles even in a .scss file directly in the package.
Hello
how can I have multiple placeholder to point out the list view?
the way I achieved this:
screen.js
```
isLoading ? [...Array(5)].map((o, i) => (<LoadingComponent key={i} />)) : (<List />)
```
and in LoadingComponent (actual code is more complicated):
```
<div style={styles.wrapper}>
    <ReactPlaceholder type='rect' showLoadingAnimation />
    <ReactPlaceholder type='text' showLoadingAnimation />
</div>
```
the problem here is I wanted to have an animation so I used ReactPlaceholder instead of RectShape or TextBlock, so I encounter warning: 
```The prop `ready` is marked as required in `ReactPlaceholder` ```
and 
```The prop `children` is marked as required in `ReactPlaceholder```

It would be great if you could think of adding some placeholder for charts. For example, at least something like text placeholder, but oriented vertically :) (like bar chart), or something like [this](https://d33wubrfki0l68.cloudfront.net/02fb31443b2b4a55ad03aa767ba58b044f1de489/35906/images/svg-vs-gif--sprout-chart.svg).
The opposite from `delay`, to keep the placeholder for some milliseconds even after the content is ready

See #54