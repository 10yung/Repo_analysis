
https://github.com/pathikrit/scalgos/blob/9e99f73b4241f42cc40a1fd890e72dbeda2df54f/src/main/scala/com/github/pathikrit/scalgos/DynamicProgramming.scala#L146
When call editDistance(List("c"),List("b"),2,1,5), the expected cost should be 3 (one deletion + one addition).  Now it returns 2.

Probably it can be modified as below?
```scala
    case (a, b) => (delete + f(a.tail, b)) min (insert + f(a.tail, a.head :: b)) min (replace + f(a.tail, b.tail))
```
https://github.com/pathikrit/scalgos/blob/9e99f73b4241f42cc40a1fd890e72dbeda2df54f/src/main/scala/com/github/pathikrit/scalgos/Greedy.scala#L15

```scala
def maxRectangleInHistogram(heights: List[Int]): Int = {
    @tailrec def solve(stack: List[(Int, Int)], remaining: List[(Int, Int)],maxArea:Int): Int = {
      def area(x: Int, y: Int) = (heights.length - remaining.length - x) * y
      (stack, remaining) match {
        case (           Nil,          Nil)           => maxArea
        case ((y, x) :: rest,          Nil)           => solve(          rest,          Nil, maxArea max area(x, y)) 
        case ((y, x) :: rest, (h, i) :: hs) if h <= y => solve(          rest, (h, x) :: hs, maxArea max area(x, y)) 
        case (             _,  block :: hs)           => solve(block :: stack,           hs, maxArea)
      }
    }
    solve(Nil, heights.zipWithIndex,0)
  }
```
See: http://zafar.cc/2017/7/19/hungarian-algorithm/ and http://www.math.harvard.edu/archive/20_spring_05/handouts/assignment_overheads.pdf
Just stumbled upon this very nice repo but couldn't find any info on the LICENSE on the contained code.

Adding some LICENSE information to the README and/or some file headers (e.g with [sbt-header](https://github.com/sbt/sbt-header)) would be great.
```scala
class ModularArithmetic(val mod: Long) {
  class Mod(val value: Long) {
    override val toString = value.toString
  }
  implicit def fromMod(mod: Mod): Long = mod.value
  implicit def toMod(x: Long): Mod = new Mod(x%mod)

  val factorial: IndexedSeq[Mod] = {
    val N = 5500
    val f = Array.ofDim[Mod](N)
    f(0) = 1L
    (1 until N).foreach(i => f(i) = f(i-1) * i)
    f
  }

  def modularInverse(n: Long): Mod = BigInt(n).modInverse(mod).toLong //If mod is prime override this with BigInt(n).modPow(mod - 2, mod).toLong

  def modDiv(a: Long, b: Long): Mod = a * modularInverse(b)

  def permutations(n: Int, k: Int): Mod = modDiv(factorial(n), factorial(n - k))

  def combinations(n: Int, k: Int): Mod = modDiv(permutations(n, k), factorial(k))
}
```
See [Codeforces #816B](http://codeforces.com/contest/816/problem/B)
```scala
// O(n^3) version
def countPalindromes3(s: String): Int =
  (1 to s.length).flatMap(s.sliding).count(t => t.reverse == t)
```


 ```scala
// O(n^2) version
def countPalindromes2(s: String): Int = {

  def countBetween(left: Int, right: Int): Int = {
    if (s.isDefinedAt(left) && s.isDefinedAt(right) && s(left) == s(right)) {
      1 + countBetween(left - 1, right + 1)
    } else {
      0
    }
  }

  s.indices.map(i => countBetween(left = i, right = i) + countBetween(left = i, right = i+1)).sum
}
```


 ```scala
// O(n) version
def countPalindromes1(s: String): Int = {
  // Manacher's algo - non trivial
  ???
}```
```java
int maxFlow(int[][] cap, int source, int sink) {
  for (int flow = 0; ; ++flow)
    if (!augmentPath(cap, new boolean[cap.length], source, sink))
      return flow;
}

boolean augmentPath(int[][] cap, boolean[] vis, int i, int sink) {
  if (i == sink) return true;
  vis[i] = true;
  for (int j = 0; j < vis.length; j++)
    if (!vis[j] && cap[i][j] > 0 && augmentPath(cap, vis, j, sink)) {
      --cap[i][j];
      ++cap[j][i];
      return true;
    }
  return false;
}
```
```
// return Map of prime to count
def primeFactors(n: Int): Map[Int, Int]
```