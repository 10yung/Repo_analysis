I am trying to make a basic mobile app where the phone number is the identifier and the user receives a pin which they use to do one time authentication.  I have everything setup and working.  The only issue is that simple_token_authentication returns an authentication token when registering but I don't want the user to have a token until they have returned the pin.  Essentially, how do you separate it so that you can create a user without signing them in?
i have installed this gem and have done configuration as are described in docs. But i wonder that this gem doesn't protect  data. I imagine that i should do api request with valid email + token in header and get response with data and if email or token are wrong then i should get error in response, but i all time get Ok response. For example here of my simple controller:
```
class Api::V1::PropertiesController < ApplicationController
	acts_as_token_authentication_handler_for User	
	respond_to :json

	def index
		properties = Property.all
		respond_with properties
	end
end
```	
and even with invalid data i get properties in server response. Why? Do i miss something or it is incorrect work of the gem?
I have my controller
```ruby
 class BaseController < ActionController::API
    acts_as_token_authentication_handler_for User, fallback: :exception
end 
```
I expect to it to render json error. But it redirect me to /user/sign_in page of devise. 
And what kind of exception you raise?
While working through the PR for #300 I found that adding an override for the attribute `authentication_token` caused one of my Rails apps to fail. This was reporting **ActiveRecord::DangerousAttributeError** on the attribute.

After digging around I found that `acts_as_token_authenticatable` really doesn't do much. The file it is defined in gets applied to `ActiveRecord::Base`, which meant that all changes made in there become part of that Base class. This led to ActiveRecord noticing that the attribute I was attempting to override was overriding what it considered to be core ActiveRecord functionality.

I have worked up a PR to split out `acts_as_token_authenticatable` so that the underlying functionality is only applied to the models the method call appears in. This follows the approach I see you already have for the controller handler `acts_as_token_authentication_handler`.

Unfortunately this PR was worked up based on the work already done for #300. It doesn't make sense in my opinion to go back and rework everything against the current version, so I propose that the PRs for this issue and #300 be adopted together. I hope you are OK with that.

I'll submit the new PR once we've made progress on the first one.
This PR relates to the discussion in issue #300 regarding the storage of plain text authentication tokens in the database.

The default operation of the gem has not been altered. Some configuration has been added to allow the developer to select to use **digest** rather than **plain** persistence of authentication tokens. The digest tokens are generated with the default Devise password hasher (BCrypt by default).

The challenge was not the generation or comparison of the digest tokens, but preventing a horrible slow-down. BCrypt is computationally expensive by design, to prevent somebody being able to brute-force the digests. For a stateless API this is no good, since there is no session and instead there is a reauthentication on each request. For this I implemented a cache mechanism, allowing an existing in-memory cache to be used to hold the previous authentication by a user.

I think that the update I have made to the README explains things best, so I'll quote here:

> 
> ### Persisting Tokens
> 
> The configuration allows for tokens to be stored as either plain text or as a
> digest generated by the default Devise password hashing function (typically BCrypt). This configuration is set with the item `config.persist_token_as`.
> 
> #### Plain Text
> If `:plain` is set, the `authentication_token` field will hold the generated
> authentication token in plain text. This is the default, and was in fact the only
> option before version **1.16.0**.
> 
> In *plain text* mode tokens are checked for uniqueness when generated, and if a token
> is found not to be unique it is regenerated.
> 
> The record attribute `authentication_token` returns the stored value, which
> continues to be plain text.
> 
> #### Digest
> If `:digest` is set, the `authentication_token` field will hold the digest of the
> generated authentication token, along with a randomly generated salt. This has the
> benefit of preventing tokens being exposed if the database or a backup is
> compromised, or a DB role views the users table.
> 
> In *digest* mode, authentication tokens can not be realistically checked for
> uniqueness, so the generation of unique tokens is not guaranteed,
> even if it is highly likely.
> 
> The record attribute `authentication_token` returns the stored value, the digest.
> In order to access the plain text token when it is initially
> generated, instead read the attribute `plain_authentication_token`. This plain
> text version is only retained in the instance after `authentication_token` is set,
> therefore should be communicated to the user for future use immediately. Tokens
> can not be recreated from the digest and are not persisted in the datatabase.
> 
> #### Caching Authentications with Stored Digest Tokens
> BCrypt hashing is computationally expensive by design. If the configuration uses
> `config.sign_in_token = false` then the initial sign in is performed once per
> session and there will be a delay only on the initial authentication. If instead
> the configuration uses `config.sign_in_token = true` then the email and
> authentication token will be required for every request. This will lead to a slow
> response on every request, since the token must be hashed every time.
> For API use this is likely to lead to poor performance.
> 
> To avoid the penalty of rehashing on every request, `cache_provider` and
> `cache_connection` options enable caching using an existing in-memory cache
> (such as memcached). The approach is to cache the user id, the authentication token
> (as an SHA2 digest), and the authentication status. On a
> subsequent request, the cache is checked to see if the authentication has already
> happened successfully. If the token is regenerated, the cached value is
> invalidated. Comments in the file `lib/simple_token_authentication/cache.rb` provide
> additional detail.
> 
> The rspec example in `spec/lib/simple_token_authentication/test_caching_spec.rb`
> *tests the speed of the cache versus uncached authentication* shows the speed up.
> When using a BCrypt hashing cost of 13 (set by Devise.stretches), the speed up
> between using the ActiveSupport MemoryStore cache against not caching is greater than
> 2000 times.
> 
> It should be noted that hashing uses the same Devise defaults as for entity
> passwords (including hashing cost and the Devise secret). Currently there is no
> way to configure this differently for passwords and authentication tokens.
> 
> 


Overall it looks like there are lot of changes, but the reality is that most of this new stuff is around allowing the configuration of the cache in a clean way, plus some tests to show that it doesn't break things. To be honest, it was around the specs that I struggled most in trying to see if there was anywhere that the authentication is actually tested as a black box that I could extend. I may well have not followed your existing patterns perfectly here, but the tests do pass, and seem to have good coverage.

The other thing that I had to work around was the configuration. In a Rails app I used for testing the initializer file for configuration kept skipping the configurations for the ORM adapters, a model I attempted to follow with the cache provider. I have added a small callback after the configuration has been evaluated to attach the cache provider. Since I don't see how the Adapters get configured in the current setup, this may be an area worth discussing.

Anyway, I believe that this is a decent set of changes that meets the requirements of the discussion in the original issue. I considered separating out the changes into two PRs, one for digest persistence, and one for cache, but since they are so closely related in terms of needs it didn't make sense.

BTW I took the liberty of bumping the version (used in the gemspec) to 1.16.0, to ensure any builds reflect these changes. You should feel fee to own the actual numbering. Maybe this is worth a 2.0?

I'm having to spend some time getting this incorporated into my production systems this week (with tons of extra app testing) so I'm hoping that we can keep any changes to this PR well focused. I appreciate any feedback though in making it better and more secure!
Hi there,

I'm trying to use the gem to implement a 1-click login via email.

    # config/initializers/simple_token_authentication.rb
    SimpleTokenAuthentication.configure do |config|

        config.sign_in_token = true

    end

    # app/models/user.rb
    class User < ActiveRecord::Base
        acts_as_token_authenticatable
    end

    # app/controllers/application_controller.rb
    class ApplicationController < ActionController::Base
        acts_as_token_authentication_handler_for User

        # .....
 
        def after_successful_token_authentication
            # Make the authentication token to be disposable
            current_user.authentication_token = nil
            current_user.save!
        end

    end

A visit to `http://localhost:3000/?user_email=user@example.com&user_token=zeb_htxXLs4myJR591ac` goes on to load the view. However fails to correctly load anything wrapped in a `user_signed_in?` called in a `before_action`. The `after_successful_token_authentication` hook correctly invalidates the token so on another refresh I get directed to the the Device sign in. At first I thought the initializer was ignored but I can successfully authenticate with another field by specifying the `config.identifiers`. Just lacking the session persistence.

Can you give me some advice?  Probably not a bug - just me being dim.
We're having a great experience with the library so far, but noticed a puzzling issue with trackable. In the sample initializer, I noticed and configured the following:

```
SimpleTokenAuthentication.configure do |config|
  # Configure the Devise trackable strategy integration.
  #
  # If true, tracking is disabled for token authentication: signing in through
  # token authentication won't modify the Devise trackable statistics.
  #
  # If false, given Devise trackable is configured for the relevant model,
  # then signing in through token authentication will be tracked as any other sign in.
  #
  config.skip_devise_trackable = false
end
```

While using tokens, I'm not seeing any changes to devise trackable module attributes (e.g., sign_in_count, etc). My devise model is configured as follows:

```
class User < ActiveRecord::Base
  acts_as_token_authenticatable

  devise :database_authenticatable, :registerable, :confirmable,
         :recoverable, :rememberable, :trackable, :validatable, :invitable
  end
end
```

Any idea as to what the cause might be?

Thanks
Is there any option where I, as a user, can get an authentication token?
Because I want to use it for simple email/password[token] authorization in external mobile app through json API.

@gonzalo-bulnes Please review it for me 😆 
Hello, 

I'm using a typeForm in my app. 
This is the Json it's sends to my API : 

`Parameters: {"event_id"=>"LtWXD3crgy", "event_type"=>"form_response", "form_response"=>{"form_id"=>"lT4Z3j", "token"=>"a3a12ec67a1365927098a606107fac15", "submitted_at"=>"2018-01-18T18:17:02Z", 

 "hidden"=>{"source"=>"xxxxx", "user_email"=>"g.user@fmail.com", "user_token"=>"HbLYEWD7fbWk1DqMZJ3z"},

 "landed_at"=>"2018-01-18T18:07:02Z", "calculated"=>{"score"=>9}, "definition"=>{"id"=>"lT4Z3j", "title"=>"Webhooks example", "fields"=>[{"id"=>"DlXFaesGBpoF", "title"=>"Thanks, {{answer_60906475}}! What's it like where you live? Tell us in a few sentences.", "type"=>"long_text", "ref"=>"[readable_ref_long_text", "allow_multiple_selections"=>false, "allow_other_choice"=>false}, {"id"=>"SMEUb7VJz92Q", "title"=>"If you're OK with our city management following up if they have further questions, please give us your email address.", "type"=>"email", "ref"=>"readable_ref_email", "allow_multiple_selections"=>false, "allow_other_choice"=>false}, {"id"=>"JwWggjAKtOkA", "title"=>"What is your first name?", "type"=>"short_text", "ref"=>"readable_ref_short_text", "allow_multiple_selections"=>false, "allow_other_choice"=>false}, {"id"=>"KoJxDM3c6x8h", "title"=>"When did you move to the place where you live?", "type"=>"date", "ref"=>"readable_ref_date", "allow_multiple_selections"=>false, "allow_other_choice"=>false}, {"id"=>"PNe8ZKBK8C2Q", "title"=>"Which pictures do you like? You can choose as many as you like.", "type"=>"picture_choice", "ref"=>"readable_ref_picture_choice", "allow_multiple_selections"=>true, "allow_other_choice"=>false}, {"id"=>"Q7M2XAwY04dW", "title"=>"On a scale of 1 to 5, what rating would you give the weather in Sydney? 1 is poor weather, 5 is excellent weather", "type"=>"number", "ref"=>"readable_ref_number1", "allow_multiple_selections"=>false, "allow_other_choice"=>false}, {"id"=>"gFFf3xAkJKsr", "title"=>"By submitting this form, you understand and accept that we will share your answers with city management. Your answers will be anonymous will not be shared.", "type"=>"legal", "ref"=>"readable_ref_legal", "allow_multiple_selections"=>false, "allow_other_choice"=>false}, {"id"=>"k6TP9oLGgHjl", "title"=>"Which of these cities is your favorite?", "type"=>"multiple_choice", "ref"=>"readable_ref_multiple_choice", "allow_multiple_selections"=>false, "allow_other_choice"=>false}, {"id"=>"RUqkXSeXBXSd", "title"=>"Do you have a favorite city we haven't listed?", "type"=>"yes_no", "ref"=>"readable_ref_yes_no", "allow_multiple_selections"=>false, "allow_other_choice"=>false}, {"id"=>"NRsxU591jIW9", "title"=>"How important is the weather to your opinion about a city? 1 is not important, 5 is very important.", "type"=>"opinion_scale", "ref"=>"readable_ref_opinion_scale", "allow_multiple_selections"=>false, "allow_other_choice"=>false}, {"id"=>"WOTdC00F8A3h", "title"=>"How would you rate the weather where you currently live? 1 is poor weather, 5 is excellent weather.", "type"=>"rating", "ref"=>"readable_ref_rating", "allow_multiple_selections"=>false, "allow_other_choice"=>false}, {"id"=>"pn48RmPazVdM", "title"=>"On a scale of 1 to 5, what rating would you give the general quality of life in Sydney? 1 is poor, 5 is excellent", "type"=>"number", "ref"=>"readable_ref_number2", "allow_multiple_selections"=>false, "allow_other_choice"=>false}]}}`

I'd like to use "hidden" witch contains user_token and user_mail to authenticate my user. 
What should I do ? 