Xalan has a few META-INF/services files that specify default implementations for its services. Rather than require every Xalan-using app to include these files as resources, we should use scripts/gen_resource_source.py to embed them into the iOS library.
Updates GeneratedMessageLite support.

I get the following error when I try to compile iOS project to work with Mac Catalyst (for **macOS Catalina**):

`.../lib/libjre_emul.a(ErrnoException.o), building for Mac Catalyst, but linking in object file built for iOS Simulator, file '/Users/admin/Documents/Workspaces/j2objc/lib/libjre_emul.a' for architecture x86_64`
Attempt to translate a class that uses the `java.nio.channels.AsynchronousFileChannel` nd `java.nio.channels.CompletionHandler` fails with:

```
Main.java:1: error: cannot find symbol
import java.nio.channels.AsynchronousFileChannel;
symbol:   class AsynchronousFileChannel
location: package java.nio.channels

Main.java:2: error: cannot find symbol
import java.nio.channels.CompletionHandler;
symbol:   class CompletionHandler
location: package java.nio.channels
```

I have seen [J2OBJC Reference](https://developers.google.com/j2objc/javadoc/jre/reference/java/nio/channels/package-summary). It seems to be a JRE Emulation limitation. Will support for these classes `java.nio.channels.AsynchronousFileChannel, java.nio.channels.CompletionHandler` be added?


import java.io.IOException;
import java.net.DatagramPacket;
import java.net.InetAddress;
import java.net.MulticastSocket;
import java.net.NetworkInterface;
import java.util.Enumeration;

public class UDPMulticastClient  {

   public static void main(String[] args) throws IOException{
       System.out.println("in main");

receiveUDPMessage("230.0.0.0", 4321);   }

   public static void receiveUDPMessage(String ip, int port) throws
         IOException {
             System.setProperty("java.net.preferIPv4Stack", "true");
             System.out.println("in function");
      byte[] buffer=new byte[1024];
      MulticastSocket socket=new MulticastSocket(4321);
      InetAddress group=InetAddress.getByName("230.0.0.0");
             Enumeration<NetworkInterface> networkInterfaces = NetworkInterface.getNetworkInterfaces();
             while (networkInterfaces.hasMoreElements()) {
                 NetworkInterface networkInterface = networkInterfaces.nextElement();
                 Enumeration<InetAddress> addressesFromNetworkInterface = networkInterface.getInetAddresses();
                 while (addressesFromNetworkInterface.hasMoreElements()) {
                     InetAddress inetAddress = addressesFromNetworkInterface.nextElement();
                     if (inetAddress.isSiteLocalAddress()
                         && !inetAddress.isAnyLocalAddress()
                         && !inetAddress.isLinkLocalAddress()
                         && !inetAddress.isLoopbackAddress()
                         && !inetAddress.isMulticastAddress()) {
                         socket.setNetworkInterface(NetworkInterface.getByName(networkInterface.getName()));
                     }
                 }
             }
             System.out.println("before joining group");
      socket.joinGroup(group);
             System.out.println("after joining group");
      while(true){
         System.out.println("Waiting for multicast message...");
         DatagramPacket packet=new DatagramPacket(buffer,
            buffer.length);
         socket.receive(packet);
         String msg=new String(packet.getData(),
         packet.getOffset(),packet.getLength());
         System.out.println("[Multicast UDP message received] >> "+msg);
         if("OK".equals(msg)) {
            System.out.println("No more message. Exiting : "+msg);
            break;
         }
      }
      socket.leaveGroup(group);
      socket.close();
   
}
}

By Compiling and Running through javac it is working fine.
But by using,
j2objcc -g -o UDPMulticastClient UDPMulticastClient.m 
./UDPMulticastClient UDPMulticastClient
It got terminated at socket.setNetworkInterface.


With Xcode 11, `xcodebuild` provides the `-create-xcframework` command. This packages multiple framework architectures into one distributable. This feature replaces fat-frameworks and Xcode 11 is able to provide the correct framework file based on the architecture being ran. 

A xcframework of the JRE.framework would allow all the architectures (iOS, iOS Simulator, tvOS, tvOS Simulator, MacOS, and one day iOS (UIKitForMac)) to be released as one `.xcframework` file. 
See the discussion here: https://groups.google.com/forum/#!searchin/j2objc-discuss/riand%7Csort:date/j2objc-discuss/_fIt8pTKdCw/qGkfA09SDAAJ

When the outputStyle is set to SOURCE, it should still generate full path for the included header files, as the files are generated hierarchically. Currently, it only generates the full path when the option is PACKAGE.
I fixed the issue in `HeaderMap.outpDirFromPackage`, by simply adding the `case SOURCE:`

```
  private String outputDirFromPackage(PackageElement pkg) {
    if (pkg == null || pkg.isUnnamed()) {
      return "";
    }
    String pkgName = ElementUtil.getName(pkg);
    OutputStyleOption style = outputStyle;
    if (isPlatformPackage(pkgName)) {
      // Use package directories for platform classes if they do not have an entry in the header
      // mapping.
      style = OutputStyleOption.PACKAGE;
    }
    switch (style) {
      case SOURCE:
      case PACKAGE:
        return ElementUtil.getName(pkg).replace('.', File.separatorChar) + File.separatorChar;
      default:
        return "";
    }
  }
```

The request is for a new command line argument for j2objc to optionally consider all outer references "weak". In this mode all outer references are week and a new annotation `@StrongOuter` can be used to make a specific inner class reference outer object strongly.
[yegor.k wrote on j2objc-discuss](https://groups.google.com/forum/#!topic/j2objc-discuss/DaDjhW4ePtA):

With the existing @ObjectiveCName annotation it is easy for a Java class to implement UIKit protocols, but it's impossible to mark the class as conforming to a given protocol. My suggestion is to use an annotation to specify the list of protocols the translated ObjC class is confirming to, for example:

```
@ObjectiveCConforms("UITextFieldDelegate")
public class MyClass
{
  @ObjectiveCName("textFieldDidBeginEditing:")
  void textFieldDidBeginEditing(textField: Object)
  {
    // Do Something
  }
}
```

Now, as in the previous case, this is mostly (see below) optional: one can skip protocol specification and cast in assignment, but as with the previous case, this would remove the need for a cast and add ObjC type checking, which is always good.

Also, with such a new annotation, the ObjC "conformsToProtocol:" function will actually work correctly for Java classes; granted, most libraries don't actually check the protocol itself, only checking "respondsToSelector:", but some do (for example, Google Maps SDK is checking for conformance to GMSMapViewDelegate and the delegate won't work if conformity is not declared).
[yegor.k wrote on j2objc-discuss](https://groups.google.com/forum/#!topic/j2objc-discuss/DaDjhW4ePtA):

Consider the following code example:
```
public class MyClass
{
  Object view;
  public native void setAlpha(float alpha)
  /*-[
    [(UIView*)view_ setAlpha:alpha];
  ]-*/;
}
```

Obviously this works. But my suggestion is to use an annotation to specify the type to use in ObjC code, for example:

```
public class MyClass
{
  @ObjectiveCType("UIView*") Object view;
  public native void setNativeAlpha(float alpha, int animate)
  /*-[
    [view_ setAlpha:alpha];
  ]-*/;
}
```

This way there is no need to cast in the native code, so the code looks cleaner and there is now type safety on the ObjC side! A win-win.