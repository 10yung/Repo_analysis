## Summary
As a modern, cross platform developer
I need to be able to add a project type for web assembly to my Xamarin Forms solution and deploy a webassembly package/version/build of my application
It should work the exact same as a UWP app, maximized into the current size of the browser's rendering window.

## API Changes

None.

## Intended Use Case
Deploy my applications to a web assembly container that runs within a sandbox and has default access to local sandboxed storage on the device. As is expected when running a UWP app.

<!-- Bug report best practices: https://github.com/xamarin/Xamarin.Forms/wiki/Submitting-Issues -->

### Description
You can test the problem in the MainPage.xaml.cs file in our sample project.
https://github.com/BitooBit/BitooBitImageEditor
On Android and IOS, there is no such problem.

### Basic Information
- Platform Target Frameworks: 
  - UWP:  
### Description of Change ###

Modifies the UWP EntryRenderer, FormsTextBox and FormsTextBoxTemplate to support optionally hiding the Delete Button as support by the other platforms.

Method used to implement this is to extract the ButtonVisible visual state and remove it from the control template when the entry is set to not display the delete button.  If it is changed back the ButtonVisible state is added back to the control template.

### Issues Resolved ### 
 - Fixes #8836

### API Changes ###
None
 
### Platforms Affected ### 
- UWP

### Behavioral/Visual Changes ###
<!-- Describe any changes that may change how a user's app behaves or appears when upgrading to this version of the codebase. -->

Delete button will be shown or not shown based on the Entry's ClearButtonVisibility value.

### Before/After Screenshots ### 
<!-- If possible, take a screenshot of your test case before these changes were made and another screenshot after the changes were made to show possible visual changes. -->

Default Behavior
![image](https://user-images.githubusercontent.com/15127788/72667478-3d316800-39ea-11ea-8013-1298d1f58428.png)

Updated behavior when clear button is set to never
![image](https://user-images.githubusercontent.com/15127788/72667486-46223980-39ea-11ea-90b3-b1cab5b4cfb6.png)


### Testing Procedure ###
Open the issue 8836 page in the control gallery and follow the instructions.  Just clicking the toggle button will flip the state back and forth.

### PR Checklist ###
<!-- To be completed by reviewers -->

- [ ] Targets the correct branch
- [ ] Tests are passing (or failures are unrelated)

### Description
The Image (and Button Image) that it's source is set to FontImageSource disappears on UWP after you lock the screen for few seconds (or just Ctrl + Alt + Del then Cancel after few seconds)

### Steps to Reproduce
1.  Create Xamarin forms app add UWP only, copy this code 
```Xaml
<Button Margin="10">
        <Button.ImageSource>
	    <FontImageSource FontFamily="Arial" Glyph="X"  Size="20"   Color="Blue"/>
	</Button.ImageSource>
</Button>
```
2. Ctrl + Alt + Del
3. Wait like 5 seconds (It is interesting that the issue will not appear if you cancel quickly)
4. Cancel 
5. You will see the images gone

### Expected Behavior
Images should still be showing

### Actual Behavior
Anything assigned to FontImageSource will disappear

### Basic Information
Latest everything
* It doesn't matter which UWP target it is.
* It doesn't matter if you use Image or Button or if you use custom fonts or not.

### Screenshots
![font-img-1](https://user-images.githubusercontent.com/13087546/72667252-e66d7200-3a6d-11ea-8116-ea8e6baf0130.PNG)
![font-img-2](https://user-images.githubusercontent.com/13087546/72667260-f6855180-3a6d-11ea-8ef0-311c581e59b1.PNG)

### Description

If I bind a Stepper and an Entry to the same double property, they do not always seem to stay in sync and many strange behaviors occur.

### Steps to Reproduce

Representative XAML:

    <StackLayout>
        <Entry Text="{Binding DurationSeconds}" />
        <Label Text="{Binding DurationSeconds}" />
        <Stepper Minimum="1" Maximum="100" Increment="1" Value="{Binding DurationSeconds}" />
    </StackLayout>

Representative ViewModel:

    public class MainPageViewModel : INotifyPropertyChanged
    {

        private double _durationSeconds;
        public double DurationSeconds
        {
            get
            {
                return _durationSeconds;
            }
            set
            {
                if (value != _durationSeconds)
                {
                    _durationSeconds = value;
                    RaisePropertyChanged();
                }
            }
        }

        public MainPageViewModel()
        {
            DurationSeconds = 3;
        }

        private void RaisePropertyChanged([CallerMemberName]string propertyName = null)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }

        public event PropertyChangedEventHandler PropertyChanged;
    }

1. Start the application.
2. Tap the Entry and wait for the keyboard to appear.
3. Push backspace until the field is blank.
4. Type ".5".
5. The application freezes.

A handful of other quirks are described below under "actual behavior".

### Expected Behavior

I expect the value to be clamped up to 1 if I type a value less than 1, and clamped to 100 if I type a value greater than 100. 

### Actual Behavior

* Typing values greater than 100 such as 100.5 is allowed, and the values are not clamped. The stepper properly alters its button state properly. 
* Attempting to type a value like "0.5" usually properly clamps to 1. 
    * However, if you type ".", then use the arrows to add a 0 in front, then use the arrows to finish typing "0.5", the value will not clamp.
* If the first thing you type is ".5" after starting the app, an infinite loop begins:
    * It appears the Stepper tries to clamp the value to 1, but for some reason the Entry refuses to accept the new value and publishes ".5" as a newly-entered value. Then the Stepper and Entry fight over it forever.
* HOWEVER, if you type any amount of text, then clear it, then type .5, it "clamps" to 0.5. 
    * This is weird because in any other circumstance, typing "0" clamps up to 1.
    * In this state it seems typing any value below the minimum is allowed.

All of the above is true on multiple Android devices I've tried. On iOS, trying to type ".5" clamps to 0.5, which is still incorrect but better than crashing. But 100.5 won't clamp down to 100, although typing values like "300" will.

It feels like a bug, particularly the infinite loop since typing some amount of text will cause the behavior to change. 

### Basic Information

- Version with issue: Tested with Xamarin Forms 4.4.0.991477 and 4.2.0.848062.
- Last known good version: N/A
- IDE: Visual Studio for Mac 8.4.1 build 4
- Platform Target Frameworks: 
  - iOS:  11.3.1
  - Android: 9.0
  - UWP:  N/A
- Android Support Library Version: Whatever the default template includes
- Nuget Packages: N/A
- Affected Devices:

* Samsung Galaxy Tab Active 2
* Samsung Galaxy Tab 3
* Two prototype industrial Android devices I can't name
* iPhone 6



### Description of Change ###
Because of visual differences that occur when setting TargetPlatformVersion to 18362 we should be testing our CG against 18362 . Otherwise we aren't getting the full truth when trying to fix issues

https://github.com/xamarin/Xamarin.Forms/pull/9211#pullrequestreview-344336372


### Platforms Affected ### 
- UWP

### Testing Procedure ###
- Make sure the gallery runs

### PR Checklist ###
<!-- To be completed by reviewers -->

- [x] Targets the correct branch
- [ ] Tests are passing (or failures are unrelated)

### Description
If you create a UWP (I know beta) app and use Shell and in the App.xaml.cs register a route that isn't defined in the Shell markup and then navigate to that page, the page code (Constructor, onappearing etc) executes but it's never displayed in the UI.

### Steps to Reproduce

1. Create a shell app
2. Add UWP per the documentation
3. Add a custom route registration
3. Add a page in tabs and have a link on it to the custom route.

### Expected Behavior

Should display exactly like Android and iOS.

### Actual Behavior

Doesn't display.

### Basic Information

- Version with issue:  4.4.0.991477
- Last known good version: (none)
- IDE: VS.net 2019
- Platform Target Frameworks: 
  - UWP:   18362

<!-- Bug report best practices: https://github.com/xamarin/Xamarin.Forms/wiki/Submitting-Issues -->

### Description
Setting a button with `CharacterSpacing` does not respect it.
### Steps to Reproduce

1.  Add a button with `Text="Test"` and `CharacterSpacing=200` (for example). Also add it with a Label instead to see the difference.
2. Run in UWP
3. Label respects CharacterSpacing, Button does not.

### Expected Behavior
Same behavior than Label
### Actual Behavior
Does not have same behavior than Label -> No spacing
### Basic Information

Version with issue: 4.4.0.991477
Last known good version: -
IDE: Visual Studio 2019 16.4.2
Platform Target Frameworks:
UWP: 18362
Affected Devices: Windows PC
Be able to set Shell.NavBarIsVisible="False" but still have a nav-icon floating on top of content. Basically, push all content to the top of the screen and have a hamburger icon overlayed on top.

Refer to this question for more details:

https://stackoverflow.com/questions/59790108/xamarin-forms-shell-is-there-anyway-to-remove-the-navigation-bar-but-keep-the-ha


### Description of Change ###

All these changes were applied to both iPhone and iPad based implementations

- Calculate the flyout positioning based on RTL settings
- propagate RTL to search handler
- propagate RTL to ContentPage
- propagate RTL to Navigation Bar
- Modify EffectiveFLowDirection so that it's set during FlowDirectionChanging not FlowDirectionChanged

### Issues Resolved ### 
<!-- Please use the format "fixes #xxxx" for each issue this PR addresses -->

- fixes #6227 

### Platforms Affected ### 
- iOS

### Behavioral/Visual Changes ###
#### RTL Store Shell

![image](https://user-images.githubusercontent.com/5375137/72569538-ed329400-3877-11ea-8084-a2e836ddc988.png)

![image](https://user-images.githubusercontent.com/5375137/72569551-f3287500-3877-11ea-844f-fc4b5ba164f1.png)

![image](https://user-images.githubusercontent.com/5375137/72569679-32ef5c80-3878-11ea-990c-b7a4d89bba65.png)
![image](https://user-images.githubusercontent.com/5375137/72569683-371b7a00-3878-11ea-87f6-9da2d6a07bd7.png)




### Testing Procedure ###
- Go into Store shell and play with the Flow Direction button that has been added

### PR Checklist ###
<!-- To be completed by reviewers -->

- [ ] Targets the correct branch
- [ ] Tests are passing (or failures are unrelated)
