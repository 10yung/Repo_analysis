With the error:
```
Writing tags has failed. This means that any eventsByTag query will be out of date. The write will be retried. Reason java.util.concurrent.ExecutionException: com.datastax.driver.core.exceptions.InvalidQueryException: Batch too large
```
It would be very helpful to know the size we're trying to write, and potentially the max. That way it would have some idea on how much to back off the `max-message-batch-size`from the default.
Install multi DC cassandra on two separate Openshift Origin clusters to get HA and DR

We are in the process of installing Cassandra as multi DC on Openshift origin and running into challenges.

So we have two openshift clusters which are separated by Datacenter

Openshift Origin AB hosted in datacenter ELC

Openshift Origin CD hosted in datacenter CLC

Going to install cassandra cluster on AB and CD. Both cassandra cluster on AB and CD should be able to talk with each other. So that we get HA and DR.

Current challenge cassandra cluster in AB and CD they are not able to talk with each other.

Cassandra broadcasts on pod ip and unfortunately pod ips are accessible only in local origin cluster not across remote. How to make the pod ip accessible across open shift origin clusters?

One don't need a keystore unless you use client-authentication. We should not force the user to configure stuff (s)he doesn't need.

For troubleshooting, it is possible to log queries that takes more
than a certain amount of time with:

```
cassandra-journal.log-slow-query = true
cassandra-journal.slow-query-time = 2s
```

Then if one of the journal or snapshot query takes more than 2 seconds it will be
logged at the DEBUG level to the "com.datastax.driver.core.QueryLogger.SLOW"
slf4j logger.

This adds an index table to cassandra, so events can be queried "roughly" by time. The akka journal query plugin implementation is in [a separate library](https://github.com/jypma/akka-persistence-cassandra-query).

The way this works, is for every time window (say, 1 minute) to add a persistenceId to the index table once, if it's changed in that time window. Index size will be somewhat limited by only indexing the first change to a persistenceId during a time window.

The query API can then find what changed when, up to the accuracy of a time window. This allows remote / distributed views to resume into the event stream, without having to re-start from 0.

There are working integration tests in [the query implementation repository](https://github.com/jypma/akka-persistence-cassandra-query/blob/master/src/test/scala/akka/persistence/cassandra/query/CassandraReadJournalIntegrationSpec.scala).

Part of https://github.com/krasserm/akka-persistence-cassandra/issues/77

The new master/index data management structure defined in https://github.com/krasserm/akka-persistence-cassandra/issues/77#issuecomment-137366007 will require migration from older akka-persistence-cassandra versions.

Part of https://github.com/krasserm/akka-persistence-cassandra/issues/77

Requirements https://github.com/krasserm/akka-persistence-cassandra/issues/77#issuecomment-137366007 and https://github.com/krasserm/akka-persistence-cassandra/issues/77#issuecomment-145325125

Part of https://github.com/krasserm/akka-persistence-cassandra/issues/77

Requirements https://github.com/krasserm/akka-persistence-cassandra/issues/77#issuecomment-137366007

Part of https://github.com/krasserm/akka-persistence-cassandra/issues/77

Requirements https://github.com/krasserm/akka-persistence-cassandra/issues/77#issuecomment-137366007 and https://github.com/krasserm/akka-persistence-cassandra/issues/77#issuecomment-145325125.

Part of https://github.com/krasserm/akka-persistence-cassandra/issues/77

Requirements https://github.com/krasserm/akka-persistence-cassandra/issues/77#issuecomment-141632778 and https://github.com/krasserm/akka-persistence-cassandra/issues/77#issuecomment-145322596.
