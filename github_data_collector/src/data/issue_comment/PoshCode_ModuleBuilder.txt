Fixes #87 by not using ModuleManifest explicitly anymore
Fixes #88 by not loosing the value of the prefix
Address #44 because #87 was so darn close. The build.psd1 is optional

I don't _think_ this will break anything, but I'd like some reassurance.
If there's any doubt, I'll do a 2.0.0-alpha01 and we can beg people to test it.

Regardless, even if nobody finds any bugs, I'm willing to bump major because of the build.psd1 change if y'all think it's necessary
I have this `build.psd1` file:

```powershell
@{
    ModuleManifest = "ModuleName.psd1"
    CopyDirectories = @("Formats", "Lib")
    Target = "CleanBuild"
    Prefix = "./Prefix.ps1"
    Suffix = "./Suffix.ps1"
}
```

When I run `Build-Module .\build.psd1` the contents of the prefix file are not copied in to the resulting psm1 file, but the suffix is included.

I verified that this works if I load the v1.0.0 module.
Hi @Jaykul ,
The module creates the PSM1 as UTF8 no BOM in PS6+ but as UTF8 (with BOM) in WinPS 5.1.
Could we update the code here:
https://github.com/PoshCode/ModuleBuilder/blob/master/Source/Private/SetModuleContent.ps1#L38-L40

So we can Set the file content without the BOM in WinPS5.1?
I guess that you have some specific requirements here for perf, so what approach you think would work best?
the bootstrap build.ps1 file uses something called `gitversion` which is not listed in RequiredModules and I have no idea what it is or how to get it.

I'm aware of the gitversion project but this `gitversion` uses Powershell style parameter passing but doesn't follow Powershell cmdlet naming functions, and also I can't find any reference to a `showvariable` parameter in the gitversion documentation.  I also can't find anything in the powershell gallery related to gitversion.  Looking through the sourcecode of gitversion there does appear to be a `/showvariable` parameter but it also requires `/output json` which isn't being specified here so I don't think this is just merely the gitversion executable.

And IF IT IS just the gitversion executable, that needs to be called out in the documentation.
When I'm building multiple modules on a build server, and need to force them all to go in a specific output folder. I want:

```
$(Build.BinariesDirectory)\ModuleOne\1.0.4\ModuleOne.psm1
$(Build.BinariesDirectory)\ModuleTwo\2.3.0\ModuleTwo.psm1
$(Build.BinariesDirectory)\ModuleThree\8.1.1\ModuleThree.psm1
```

So I would like to specify: 

```PowerShell
Build-Module ... -Destination "$(Build.BinariesDirectory)" -NamedOutputDirectory -VersionedOutputDirectory
```

And have Build-Module automatically do `[IO.Path]::FileNameWithoutExtension(` on the `Path` parameter (after reading build.psd1) and guarantee that the actual OutputDirectory either already ends with that or if not, add that before adding the version.
When invoking the command Build-Module with required Parameters like this:
`Build-Module -Path .\Source\ModuleBuilder.psd1 -OutputDirectory ..\ -VersionedOutputDirectory`
but the `Build.psd1` file is absent, we get the error below.
The only way to work around it is to create a `Build.psd1` with an empty hashtable.

I think we should make that file optional when required parameters are provided, and clearer error when not.

```
> build-module -Path .\Source\ModuleBuilder.psd1 -OutputDirectory ..\ -VersionedOutputDirectory
Import-Metadata : Can't find file C:\src\ModuleBuilder\Source\[Bb]uild.psd1
At C:\src\ModuleBuilder\output\ModuleBuilder\1.0.0\ModuleBuilder.psm1:83 char:18
+ ... BuildInfo = Import-Metadata -Path (Join-Path $ModuleSource [Bb]uild.p ...
+                 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    + CategoryInfo          : ObjectNotFound: (:) [Import-Metadata], ItemNotFoundException
    + FullyQualifiedErrorId : PathNotFound,Metadata\Import-Metadata,Import-Metadata

InitializeBuild : You cannot call a method on a null-valued expression.
At C:\src\ModuleBuilder\output\ModuleBuilder\1.0.0\ModuleBuilder.psm1:610 char:27
+             $ModuleInfo = InitializeBuild $SourcePath
+                           ~~~~~~~~~~~~~~~~~~~~~~~~~~~
    + CategoryInfo          : InvalidOperation: (:) [InitializeBuild], RuntimeException
    + FullyQualifiedErrorId : InvokeMethodOnNull,InitializeBuild
```
With this setting:
```PowerShell
@{
    Path = "MyModule.psd1"
    OutputDirectory = "C:\temp\Delivery\MyModule"
    VersionedOutputDirectory = $true
    CopyDirectories=@('.\Demos','.\fr-FR','.\TypeData')
    Prefix='.\Initialzation.ps1' 
    Suffix='.\Finalization.ps1'
}     
```
If the file does not exist, no errors are triggered:
![image](https://user-images.githubusercontent.com/4894452/49684868-224baf00-fada-11e8-8c6a-f4ea4c644a7e.png)

If I correct the file name, the addition is done correctly :
![image](https://user-images.githubusercontent.com/4894452/49684871-2d9eda80-fada-11e8-85d1-c34a23f29856.png)

The error exists but is not displayed  : 
![image](https://user-images.githubusercontent.com/4894452/49684804-4c50a180-fad9-11e8-9a93-0fbcd593e93d.png)
Same behavior with Suffix :
![image](https://user-images.githubusercontent.com/4894452/49684909-b1f15d80-fada-11e8-8b07-2224c441bac0.png)


Its possible values are not explained :

> [ValidateSet("Clean", "Build", "CleanBuild")]

Regarding its behavior, should the value Clean delete the versioned directory?
![image](https://user-images.githubusercontent.com/4894452/49588548-489d0d80-f967-11e8-84b2-321b88ff261c.png)

build.pds1:
```Powershell
@{
    Path = "MyModule.psd1"
    OutputDirectory = "C:\temp\Delivery\MyModule"
    VersionedOutputDirectory = $true
    CopyDirectories=@('.\Demos','.\fr-FR','.\TypeData')
}
```
Internally we have begun using a module builder that is heavily inspired by this project and tweaked a bit for our environment. One piece of feedback I received was that arranging the code so that classes and functions live in separate files makes debugging harder.

Assuming you were working with a monolithic psm1, It would be possible to debug and refactor within the same file with VS Code. With code living in separate files you have to build the module, set your breakpoints in the compiled psm1, follow the code to its bug, then fix the bug in a similar location in the actual source file. 

While tooling for converting source line to compiled line and vice versa is somewhat helpful here, it does make the debugging experience more cumbersome.

I have tried to consider a way in which you can debug and code in the source files, but I'm at a loss. One thing I considered was allowing a Debug Build which would create a psm1 that dot sources the function files. This is doable but would only work for functions because classes have to live in the psm1 to support using each other (class a uses class b and class b uses class a). As I vaguely recall there are other caveats to dot sourcing classes.

Or maybe there is some way to allow for edits in the compiled psm1 to be pushed back to the source file or something.

Anyway, I never ran into this issue because my module coding workflows don't rely heavily on the debugging engine. However, a few of my co-workers do rely on it.

I'm looking for feedback on how we either document debugging modules built from this project or tools to make it much easier.


The -Passthru switch doesn't work when the build is skipped because it's already up to date.