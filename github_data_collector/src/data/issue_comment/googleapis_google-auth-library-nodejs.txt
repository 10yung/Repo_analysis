I am trying to let a user log in to Firebase Auth using the identity from IAP, but I'm pretty lost on how to do it - if it's even possible at all.

To me, it just seems ridiculous to have the user log in twice (first IAP, then Firebase).

I also made a post on SO about this, but so far only one answer about minting my own token - which I could do with or without IAP: https://stackoverflow.com/questions/59648429/can-you-use-iap-to-log-in-to-firebase/59648827#59648827
From @frankyn on an issue about cold start performance: https://github.com/googleapis/nodejs-storage/issues/951#issuecomment-566416370

> The auth library is using an [older version of SignBlob](https://github.com/googleapis/google-auth-library-nodejs/blob/master/src/auth/googleauth.ts#L811) and should be using the [newer version of SignBlob](https://cloud.google.com/iam/credentials/reference/rest/v1/projects.serviceAccounts/signBlob). A similar issue was hit in [Java](https://github.com/googleapis/google-cloud-java/issues/4557).
Hi, I have some functionality that currently uses this very old NPM library https://www.npmjs.com/package/google-auto-auth to programmatically retrieve the client email property assigned to the default service account directly, without having to download the credentials JSON file.

It works fine but this google-auto-auth library is very old and has multiple security vulnerabilities reported, not to mention that is no longer maintained.  I would like to migrate this functionality to use the official google-auth-library library, but I couldn't find in documentation or examples anything close to my use case.

```
const rp = require('request-promise-native');
const googleAuth = require('google-auto-auth');
const auth = googleAuth();

function generateTokenForCurrentServiceAccount(ttlObj, host) {
	    return new Promise((resolve, reject) => {
	        // A series of calls into google-auto-auth follow. As of Feb '18 this library does not appear
	        // to easily support promises, even using util.promisify(), so callbacks are used below.
	
	        // Get the credentials object for the current service account, so we can access the email address
	        auth.getCredentials((credErr, credentials) => {
	            if (credErr) {
	                logger.error(`Error in getCredentials step: ${credErr}`);
	                reject(credErr);
	            } else {
	                auth.getProjectId((prjErr, projectId) => {
	                    if (prjErr) {
	                        logger.error(`Error in getProjectId step: ${prjErr}`);
	                        reject(prjErr);
	                    } else {
	                        auth.authorizeRequest({
	                            method: 'post',
	                            uri: `https://iam.googleapis.com/v1/projects/${projectId}/serviceAccounts/${credentials.client_email}:signJwt`,
	                        }, (authErr, authorizedReqOpts) => {
	                            if (authErr) {
	                                logger.error(`Error in authorizeRequest step: ${authErr}`);
	                                reject(authErr);
	                            } else {
	                                const currentTime = moment();
	                                const currentTimeSeconds = currentTime.unix();
	                                const expirationTimeSeconds = currentTimeSeconds + ttlObj.ttlInSeconds;
	
	                                // Form and send web service request to Google to have a JWT claim set signed by the service account.
	                                // This request has the OAuth token in the header.
	
	                                const options = {
	                                    method: 'POST',
	                                    uri: authorizedReqOpts.uri,
	                                    headers: {
	                                        Authorization: authorizedReqOpts.headers.Authorization,
	                                        'content-type': 'application/json',
	                                    },
	                                    body: {
	                                        payload: JSON.stringify({
	                                            iat: currentTimeSeconds,
	                                            exp: expirationTimeSeconds,
	                                            aud: host,
	                                            iss: credentials.client_email,
	                                            sub: credentials.client_email,
	                                        }),
	                                    },
	                                    json: true,
	                                };
	
	                                logger.debug(`Submitting this request to Google: ${JSON.stringify(options.body)}`);
	
	                                rp(options).then(parsedBody => {
	                                    // Successfully signed token, returning it to client
	                                    const token = parsedBody.signedJwt;
	                                    resolve({
	                                        token,
	                                        tokenExpiry: expirationTimeSeconds,
	                                    });
	                                }).catch(err => {
	                                    logger.error(`Error calling GCP to sign JWT: ${err}`);
	                                    reject(err);
	                                });
	                            }
	                        });
	                    }
	                });
	            }
	        });
	    });
	}
```

can you please point me in the right direction ?
The release PR #649 is still in a pending state after several hours
**Is your feature request related to a problem? Please describe.**
I want to make a react app talk to an Apollo GraphQL server but I'm frustrated with the google oauth2 setup process because there's no example ... it's unclear from a big picture perspective

 the user clicks "Sign In" we get a code. We send the code to the server. Then what? 

if the offline flow only returns a code, how do you get the user's email and name and id without making a request to your server? 

Most of the examples use Express, with redirects, but GraphQL uses post, they're maintained by one random guy, they don't explain how to refresh the token / access user id on subsequent page views.

**Describe the solution you'd like**
How do you make sure the user doesn't have to sign in over and over and over? 

**What happens on subsequent signins?** 

Does the user have to re-consent or do we have to send a different button? 

Do you need to check if the user already consented and render different button settings? 

How do you get the id_token if you're doing offline flow?

Should I just give up on google and switch to Github or Facebook login?

Is there a CLIENT AND SERVER full-stack example of how to set this up that is actively maintained by google? 

Also, would it be possible to condense all the boilerplate?

I just want an official well maintained working example / developer guide for how to set up a react app and apollo graphql server so the user signs in ONE time and they don't have to re-sign-in hourly. Or, if offline flow is gonna be a huge mess, you guys should drop it, stop supporting it, and just simplify your docs so 50,000 devs don't waste multiple days trying and failing and trying and failing to set up single-sign-on with their react apps

Specifically, I want to:
1. import a google sign in button react component (right now, we have to use one guy's react component instead of officially maintained google code ... ) on my React app
2. when the user clicks it and consents to sign up for the app, I get the user's code to send to my graphql server, along with an id, name, and email.
3. With the id_token and access code, I want to fire a graphql mutation to save the refresh code, in the database with the id ? (or access ?) token as authorization header. 
4. clarify what happens the N+1 infinity times the user revisits the site. 

And I want it all to be published so other people don't have the same headaches I had

**Describe alternatives you've considered**
I tried cognito but it's super not-secure. 
Auth0 is a middleman, 
I'd use facebook or github and I probably should, because I'm frustrated with Google Sign In right now 
It's relatively doable to just make the user click on the button every hour, but that's also terrible UX

I just want to set up google sign in with react and graphql without days of annoying guesswork, 100s of lines of boilerplate, reading 50 random dude's blogs, not knowing which of 50 different google documentation pages to use. 
**Additional context**
https://www.apollographql.com/docs/apollo-server/security/authentication/
https://www.npmjs.com/package/react-google-login
https://github.com/anthonyjgrove/react-google-login/issues/175#
https://github.com/anthonyjgrove/react-google-login/pull/191
https://developers.google.com/identity/sign-in/web/server-side-flow (no nodejs server example, only java and python ... ?!)
https://developers.google.com/identity/sign-in/web/reference#googleauthgrantofflineaccessoptions
https://github.com/Shahzayb/mern-google-login/blob/master/controllers/auth.js
Here: https://github.com/googleapis/google-auth-library-nodejs/blob/3646b7f9deb296aaff602dd2168ce93f014ce840/src/auth/googleauth.ts#L427:13
#### Environment details:

  - Node.js version: v10.15.3
  - npm version: 6.9.0
  - `google-auth-library` version: 5.5.1

#### Steps to reproduce

Code is as follows. It has been working fine for about a year, and now, as of this morning, the client is no longer returning the `picture` attribute in the JWT.

```
const { OAuth2Client } = require('google-auth-library')

const client = new OAuth2Client(['list', 'of', 'clientids'])
const ticket = await client.verifyIdToken({
  idToken: token,
  audience: allowedClientIds
})

console.log(ticket.getPayload())
```

  - OS: macOS 10.14.6
  - Node.js version: 12.6.0
  - npm version: 6.9.0
  - `google-auth-library` version: 5.4.0

I'm struggling to get a client using a P12/PEM file, and I'm wondering if it's my fault!

```js
const GoogleAuth = require('google-auth-library').GoogleAuth
const auth = new GoogleAuth({ keyFilename: '/path/to/key.p12' })
await auth.getClient() // crashes with below output
```
```
 SyntaxError: Unexpected token � in JSON at position 1
    at JSON.parse (<anonymous>)
    at ReadStream.<anonymous> (/Users/stephen/dev/play/gissue-218/node_modules/google-auth-library/build/src/auth/googleauth.js:347:39)
    at ReadStream.emit (events.js:208:15)
    at ReadStream.EventEmitter.emit (domain.js:494:23)
    at endReadableNT (_stream_readable.js:1154:12)
    at processTicksAndRejections (internal/process/task_queues.js:77:11)
```

The key file is being passed around the "googleauth.js" file, and after a read stream is opened to digest the key file, it is parsed as JSON, which throws the error. The JWT file handles a key file path by checking the mime-type.

Does it look like I'm doing something wrong here?
See googleapis/nodejs-googleapis-common#175.
I'm experiencing different behaviours when trying to perform requests using domain wide delegation, which is required for a number of G Suite services (e.g. https://developers.google.com/cloud-search/docs/guides/delegation)

The following code works correctly on my local machine with a service account JSON key file set and specified by the environment variable: GOOGLE_APPLICATION_CREDENTIALS

```
    this.authClient = new google.auth.GoogleAuth({
      scopes: ['https://www.googleapis.com/auth/cloud_search.query'],
      clientOptions: { subject: 'someuser@mydomain.com' },
    });
```
The code correctly makes any subsequent API call using the standard Google API client library as the user specified in clientOptions.subject.

When the same code is deployed to Google Cloud Run with the same service account, the subject is ignored and the code attempts to make the API call with the service account's identity, not that of the expected delegated user.

Digging deeper, it seems that when a key file is provided a JWT is being used, which supports setting the "subject" via client options. However, when on GCP the instance metadata service provides an Oauth access token and the client options subject field provided in the constructor is ignored.

Is there a way to set the subject field when running with the injected service account in Cloud Run, AppEngine, etc? The documentation doesn't describe this use case.

Without this working I will have to provide JSON key file to my Cloud Run app - which increases the code complexity and operational complexity.

Google Auth library: 5.3.0
