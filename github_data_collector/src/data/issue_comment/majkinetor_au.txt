need a flag to toggle [skip ci]

Use case:
If CI (example Jenkins) is completely skipped with this flag, and a gitrepo is updated in a way unbeknownst to the CI server, then the CI server's concept of PREVIOUS_COMMIT will be the last commit `it` knows about.  

In the case where [skip ci] is used, it would be the commits before AU ran, instead of the actual last commit.  

So in this case the workaround is to allow AU to run thru CI/CD tools, and have a conditional that checks to see if this is an AU commit and noop it, providing a functionally equivlant outcome.


## Push-Package
#### Lines 23-36
The changes made rely on a new environment variable, $Env:au_PushForce. When set, a push with no package will be attempted against $push_url in order to determine if the source is insecure (this is to avoid the risk of needlessly using force against a secure source, and forcing a different operation). If it is insecure, the string variable $ForceParam will be define as '--Force' and cleared if not.

#### Lines 41 & 43
Regardless of the above evaluation, the contents of $ForceParam will be appended to the push command. If the conditions to set --Force were not met above, nothing will be added due to the empty value.

## Update-Package
I was unable to get the variable $au_GalleryUrl to make a difference with various other changes to the code, so I can only conclude that a mistake was made here and it should have been an environment variable to begin with.
Currently, if you have 2 streams where one fails and other is updated, you can either use 'ignore' to publish updated stream and ignore error from failed one or throw an exception and fail the whole update process for that package without publishing stream which got updated. However there is no way to "throw" an exception for one stream without failing whole package.

So I think, there should be an option to put `StreamsErrors` along with `Streams` in hashtable that `au_GetLatest` returns. It would contain catched exceptions thrown by failed streams (or possibly just error messages, but I think passing whole exception will allow more control) for streams that failed and also increment error count returned by vars like `$global:info.error_count.total`, so we could fail AppVeyor build on that kind of "partial" package error too.
It would be good to have a plugin that records errors on packages, count them and after a threshold is reached it creates an issue on the Github/lab... 

Only single active ticket should exist for any package

Plugin could remember package counts in json file (the same as used in streams). We would need to slightly change the stream impl to use key for it  - i.e. put everything under `streams` key so that file could be used for other plugin statuses too. (breaks compatibility but acceptable since streams are still new), or use special stream for other stuff which is compatible with current system but semantics are bad for the eternity. 
Chocolatey have plans to add support for the ARM architecture.
As such it would be useful to have the automatic checksum feature supporting this when it is available in chocolatey.

Ref issue: https://github.com/chocolatey/choco/issues/1803

/cc @majkinetor 
For large files, when you pretty sure that checksums are valid, you may want to skip AU checksums validation.
https://github.com/majkinetor/au/blob/b976947bbf473444912acaf95512846c0ee2d66a/AU/Public/Update-Package.ps1#L339
Is it safe to use `-Raw`?
```ps1
$fileContent = gc $fileName -Encoding UTF8 -Raw
``` 
Just a recommendation, currently run `script.ps1` will encounter:
```
Exception setting "SecurityProtocol": "The requested security protocol is not supported."
At C:\Program Files\PowerShell\Modules\au\2018.5.18\Public\Update-Package.ps1:384 char:5
+     [System.Net.ServicePointManager]::SecurityProtocol = 'Ssl3,Tls,Tl ...
+     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
+ CategoryInfo          : NotSpecified: (:) [], SetValueInvocationException
+ FullyQualifiedErrorId : ExceptionWhenSetting
```
and
```
Get-WebFile : Exception calling "IsBypassed" with "1" argument(s): "Operation is not supported on this platform."
At C:\Users\Ruiyang\AppData\Local\Temp\chocolatey\au\chocolatey\helpers\functions\Get-ChocolateyWebFile.ps1:345 char:7
+       Get-WebFile -Url $url -FileName $fileFullPath -Options $options
+       ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
+ CategoryInfo          : NotSpecified: (:) [Get-WebFile], MethodInvocationException
+ FullyQualifiedErrorId : PlatformNotSupportedException,Get-WebFile
```
I have a package (hashtab) that the publisher apparently changes the downloadable installer without changing the version or any indication of changes.  When I expressed concern about the changing checksums without a corresponding changelog or version, they responded that their installer is digitally signed and that is the best way to know it is safe.  

I can always manually increment using `$AU_Force = $true`, but it would be great if the download check/compare the signature were automated.  Thus, it would be super useful if there were an easy way to optionally have an additional function in AU that would:

1. download an installer 
2. use SysInternals' SigCheck to collect signature details
3. Verify the installer is signed by the expected publisher
4. Compare the signing date with the previous version
5. If newer, increment the package version as with AU_Force

Not only would the ability to check the signature of an installer be useful for situations like HashTab, but (for publishers who sign) it could provide one additional security check against hacked websites and hijacked downloads.

Anyway, thanks for a great utility.
