
Issue Type: <b>Performance Issue</b>

Any webpage I open fails to render clearly. Plz fix this. An example is shown below.
![ÂõæÁâá](https://user-images.githubusercontent.com/44731563/70289550-0cb5b600-1810-11ea-9a27-ae6df15a975e.png)


Extension version: 0.5.9
VS Code version: Code 1.40.2 (f359dd69833dd8800b54d458f6d37ab7c78df520, 2019-11-25T14:54:45.096Z)
OS version: Windows_NT x64 10.0.18362

<details>
<summary>System Info</summary>

|Item|Value|
|---|---|
|CPUs|Intel(R) Core(TM) i7-8550U CPU @ 1.80GHz (8 x 1992)|
|GPU Status|2d_canvas: enabled<br>flash_3d: enabled<br>flash_stage3d: enabled<br>flash_stage3d_baseline: enabled<br>gpu_compositing: enabled<br>metal: disabled_off<br>multiple_raster_threads: enabled_on<br>oop_rasterization: disabled_off<br>protected_video_decode: enabled<br>rasterization: enabled<br>skia_renderer: disabled_off<br>surface_control: disabled_off<br>surface_synchronization: enabled_on<br>video_decode: enabled<br>viz_display_compositor: enabled_on<br>viz_hit_test_surface_layer: disabled_off<br>webgl: enabled<br>webgl2: enabled|
|Load (avg)|undefined|
|Memory (System)|15.87GB (8.08GB free)|
|Process Argv||
|Screen Reader|no|
|VM|0%|
</details><details>
<summary>Process Info</summary>

```
CPU %	Mem MB	   PID	Process
    5	   112	 16588	code main
    0	    68	   488	   shared-process
    0	    45	  2844	   window (undefined)
    4	   466	  3868	   gpu-process
    6	   166	  8736	   window (undefined)
    1	   242	  9400	   window (Browser Preview (È¶ñÈ°µ - Ê¥õË∞∑ | ËÆ°ÁÆóÊú∫ÁßëÂ≠¶ÊïôËÇ≤Êñ∞ÁîüÊÄÅ) - VendingMachine - Visual Studio Code)
    0	    23	  2732	     searchService
    0	    41	  3696	     C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
    0	    11	  7016	     watcherService 
    0	     5	  9804	       console-window-host (Windows internal process)
    0	   171	  7604	     extensionHost
    0	    33	  3456	       "C:\Users\Power_tile\AppData\Local\Programs\Microsoft VS Code\Code.exe" "c:\Users\Power_tile\AppData\Local\Programs\Microsoft VS Code\resources\app\extensions\json-language-features\server\dist\jsonServerMain" --node-ipc --clientProcessId=7604
    1	    42	  8292	       "C:\Program Files (x86)\Google\Chrome\Application\chrome.exe" --disable-background-networking --disable-background-timer-throttling --disable-backgrounding-occluded-windows --disable-breakpad --disable-client-side-phishing-detection --disable-default-apps --disable-dev-shm-usage --disable-extensions --disable-features=site-per-process --disable-hang-monitor --disable-ipc-flooding-protection --disable-popup-blocking --disable-prompt-on-repost --disable-renderer-backgrounding --disable-sync --disable-translate --metrics-recording-only --no-first-run --safebrowsing-disable-auto-update --enable-automation --password-store=basic --use-mock-keychain --headless --hide-scrollbars --mute-audio --disable-gpu about:blank --remote-debugging-port=9222 --user-data-dir=C:\Users\POWER_~1\AppData\Local\Temp\puppeteer_dev_profile-g01e5r
    0	    27	  5136	         utility
    0	     6	  6196	         crashpad-handler
    0	    24	  6756	         window (undefined)
    0	     9	  9820	         watcher
    0	   148	 15636	         window (undefined)
    1	    60	 16156	         gpu-process
    0	   494	 11616	       "C:\Program Files\OpenJDK\jdk-12.0.2\bin\java" --add-modules=ALL-SYSTEM --add-opens java.base/java.util=ALL-UNNAMED --add-opens java.base/java.lang=ALL-UNNAMED -Declipse.application=org.eclipse.jdt.ls.core.id1 -Dosgi.bundles.defaultStartLevel=4 -Declipse.product=org.eclipse.jdt.ls.core.product -Dfile.encoding=utf8 -DwatchParentProcess=false -noverify -Xmx1G -XX:+UseG1GC -XX:+UseStringDeduplication -jar c:\Users\Power_tile\.vscode\extensions\redhat.java-0.54.2\server\plugins\org.eclipse.equinox.launcher_1.5.600.v20191014-2022.jar -configuration c:\Users\Power_tile\.vscode\extensions\redhat.java-0.54.2\server\config_win -data c:\Users\Power_tile\AppData\Roaming\Code\User\workspaceStorage\46f3600e4644bf12498adb261fe63742\redhat.java\jdt_ws
    0	     5	 17400	         console-window-host (Windows internal process)
    0	     5	 13364	     console-window-host (Windows internal process)
    1	    69	  9952	   window (Issue Reporter)
    0	    13	 11864	   electron-crash-reporter
    0	   104	 12624	   window (applicationContext.xml - SpringPlayground - Visual Studio Code)
    0	     8	  6152	     watcherService 
    0	     5	  8888	       console-window-host (Windows internal process)
    0	    23	  9124	     searchService
    0	    63	 10828	     extensionHost
    0	    69	 15684	       "C:\Program Files\OpenJDK\jdk-12.0.2\bin\java" --add-modules=ALL-SYSTEM --add-opens java.base/java.util=ALL-UNNAMED --add-opens java.base/java.lang=ALL-UNNAMED -Declipse.application=org.eclipse.jdt.ls.core.id1 -Dosgi.bundles.defaultStartLevel=4 -Declipse.product=org.eclipse.jdt.ls.core.product -Dfile.encoding=utf8 -DwatchParentProcess=false -noverify -Xmx1G -XX:+UseG1GC -XX:+UseStringDeduplication -jar c:\Users\Power_tile\.vscode\extensions\redhat.java-0.54.2\server\plugins\org.eclipse.equinox.launcher_1.5.600.v20191014-2022.jar -configuration c:\Users\Power_tile\.vscode\extensions\redhat.java-0.54.2\server\config_win -data c:\Users\Power_tile\AppData\Roaming\Code\User\workspaceStorage\25706411572e1741c6c3e4c1b2817ca5\redhat.java\jdt_ws
    0	     5	 15700	         console-window-host (Windows internal process)
    0	    42	 15112	     C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
    0	     5	 16600	     console-window-host (Windows internal process)
```

</details>
<details>
<summary>Workspace Info</summary>

```
|  Window (applicationContext.xml - SpringPlayground - Visual Studio Code)
|  Window (Browser Preview (È¶ñÈ°µ - Ê¥õË∞∑ | ËÆ°ÁÆóÊú∫ÁßëÂ≠¶ÊïôËÇ≤Êñ∞ÁîüÊÄÅ) - VendingMachine - Visual Studio Code)
|    Folder (SpringPlayground): 42 files
|      File types: class(6) java(6) prefs(4) xml(3) json(2) classpath(1)
|                  project(1)
|      Conf files: launch.json(1) settings.json(1)
|      Launch Configs: java(2)
|    Folder (VendingMachine): 89 files
|      File types: java(26) class(25) prefs(4) xml(3) classpath(1) project(1)
|                  json(1)
|      Conf files: launch.json(1)
|      Launch Configs: java(2);
```

</details>

<!-- generated by issue reporter -->
Observations from https://github.com/auchenberg/vscode-browser-preview/issues/122

There is a test but it doesn't look to be in use. I can't quite figure out what it does.

I want to have at least 3 sanity tests.

One that tests that the extension can be launched from vscode. I have no idea how to do this.
One that drives the current stable chrome and current chrome canary and verifies we can get a screencast and inspect a node.
One that tests that the UI shows up.
Observations from https://github.com/auchenberg/vscode-browser-preview/issues/122

**Observations**
Puppeteer only supports the version of chromium that it is bundled with. That means when we pick a version of chrome off of the users system, there is no guarantee that puppeteer can control it properly. This project only seems to use puppeteer to launch the browser and obtain a CDP connection. That shields us from most of the incompatibilities between puppeteer and various versions of chrome, but there have been times when old puppeteer can't launch and connect to new chrome, and vice versa.

**Recommendation**
I'd recommend switching to something that intentionally supports multiple versions of chrome, like lighthouse's chrome-launcher. Or maybe just steal the launcher code from puppeteer and bake it in, and then if it ever breaks we can modify it ourselves to support multiple versions.
I was poking around the code today to figure out how this project works. There is a very good chance that I am missing some key info or just wrong, but [the best way to get answers is to first be wrong](https://meta.wikimedia.org/wiki/Cunningham%27s_Law) üòä.

### Experimental CDP methods are being used being used
The best solution would be to not use experimental protocol. Stick to the stable methods or use a first party client like puppeteer/chromedriver. This is unlikely to happen though because most of the CDP methods being used are pretty niche and outside the scope of those projects.

It would be nice to know when something breaks though. I'm thinking we could lint the methods used against the current version of the protocol. There are some nice d.ts files in puppeteer and the devtools-protocol repo on github. Even better would be to run the tests against a variety of chrome versions, but the tests seem pretty sparse at the moment.

### Puppeteer-core is being used to launch undefined chrome versions
Puppeteer only supports the version of chromium that it is bundled with. That means when we pick a version of chrome off of the users system, there is no guarantee that puppeteer can control it properly. This project only seems to use puppeteer to launch the browser and obtain a CDP connection. That shields us from most of the incompatibilities between puppeteer and various versions of chrome, but there have been times when old puppeteer can't launch and connect to new chrome, and vice versa.

I'd recommend switching to something that intentionally supports multiple versions of chrome, like lighthouse's [chrome-launcher](https://github.com/GoogleChrome/chrome-launcher). Or maybe just steal the launcher code from puppeteer and bake it in, and then if it ever breaks we can modify it ourselves to support multiple versions.

### Tests
There is a test but it doesn't look to be in use. I can't quite figure out what it does.

I want to have at least 3 sanity tests.
- One that tests that the extension can be launched from vscode. I have no idea how to do this.
- One that drives the current stable chrome and current chrome canary and verifies we can get a screencast and inspect a node.
- One that tests that the UI shows up.
![image](https://user-images.githubusercontent.com/18731681/66805568-b2634c00-ef68-11e9-9ed1-8da1a531dc60.png)

I don't know how to change title of menu entry to something like `Browser Preview: Preview file`
Sample: https://www.w3schools.com/tags/tryit.asp?filename=tryhtml5_ev_ondblclick
Nothing happens when we double click on the button. The same works properly in a regular browser.
## Overview
VS Code 1.37 added a proposed api to help webviews create uris for local resources: https://github.com/microsoft/vscode/blob/192e15b613dd4f4dab9c735b7556e175580c6011/src/vs/vscode.proposed.d.ts#L1166

The main addition is a `toWebviewResource` method property on webviews that translates a local file uri into a webview uri (i.e. one that uses the special `vscode-resource:` scheme). This api is being added primarily to support running VS Code on the web where the existing `vscode-resource:` scheme will not work

## Request
As a popular user of the VS Code webview API, we'd appreciate your feedback on this api proposal. Does it work as advertised? Does the documentation for it make sense? Is it missing any functionality? Feel free to leave your feedback on this issue or on https://github.com/microsoft/vscode/issues/79242

You can try out the proposed api in VS Code 1.38 insiders by following [these instructions](https://code.visualstudio.com/api/advanced-topics/using-proposed-api). Please let me know if you have any questions about testing it out

*PS: There are no plans at the moment to remove the `vscode-resource:` scheme so your extension should continue to work on desktop VS Code even if it does not adopt this new API*
I have tried this in my react app but selecting an element does not do anything. Its a custom boilerplate - is that the issue or is something I have to setup first?

I find this feature pretty neat!
My configuration requires me to use `ng serve` from Angular CLI to start a Webpack-based dev server. 

The same configuration should work with both `chrome` and `browser-preview`, however preLaunchTask is not started when using `browser-preview`.

```
{
    "name": "Launch",
    "type": "chrome",
    "request": "launch",
    "url": "http://localhost:4200/english1200",
    "preLaunchTask": "serve",
    "postDebugTask": "stop-serve",
    "skipFiles": [
        "node_modules/**"
    ],
    "sourceMapPathOverrides": {
        "webpack:///./*": "${webRoot}/*",
        "ng:///*": "${webRoot}/projects/*"
    },
    "webRoot": "${workspaceFolder}"
}
```
I switched to dark theme in Windows 10. Google Chrome displays with the dark theme, Google Chrome Debugger also displays with the dark theme. Will it be possible also for Browser Preview to have a dark theme?

In the screenshot bellow it can be seen that the address bar is a little to aggressive with the white color. Also when refreshing the background is white for a moment. A setting somewhere, I'll be happy, if possible.

![theme](https://user-images.githubusercontent.com/42435633/60045113-afe49a00-96cc-11e9-98c7-5f609acceb9b.png)
