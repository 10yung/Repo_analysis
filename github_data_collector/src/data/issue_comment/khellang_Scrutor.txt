I've been having some problems with Lamar working with Rebus. I got things working ok with Autofac, but what I actually wanted was ServiceProvider with the ability to scan, and some kind of service module concept (i.e. StructureMap/Lamar ServiceRegistry or Autofac Module).

I found Scrutor, which gave me the scanning, and knocked up a quick version that does what I want:

https://github.com/michaeldtaylor/RebusLamar/tree/feature/scrutor

````csharp
// Add Registries
services.AddRegistries<Program>(r => r.Name.StartsWith("Overlord"));
````

https://github.com/michaeldtaylor/RebusLamar/blob/feature/scrutor/src/Overlord.Other/ServiceProvider/ServiceProviderExtensions.cs

A registry then looks something like this:

````csharp
    public class OverlordRegistry : ServiceRegistry
    {
        public override void Load(IServiceCollection services)
        {
            services.ScanWithDefaultConventions<OverlordRegistry>();

            services.AddTransient<IAppNameProvider, HostEnvironmentAppNameProvider>();
        }
    }
````

The code works, but isn't tested yet (proof of concept to substitute Lamar). Any plans to have any basic module support such as this? It would be great if I didn't have to maintain this code :)
Scrutor API provides an easy way to actually replace service instead of decorating it. For example:
```
services.Decorate<ISeeder>((seeder, provider) => provider.CreateInstance<NoMigrationsAppSeeder>());
```
where `CreateInstance` is extension around `ActivatorUtilities`:
```
public static T CreateInstance<T>(this IServiceProvider serviceProvider, params object[] parameters) =>
ActivatorUtilities.CreateInstance<T>(serviceProvider, parameters);
```
and `NoMigrationsAppSeeder` uses default constructor.

Unfortunately this approach sometimes lead to stack overflow since Scrutor tries to resolve implementation instance even so it's not needed in this case.

My suggestion is to provide `Replace` extension methods which won't resolve previous implementation and provide callbacks with `IServiceProvider` only.

I understand that this could be done manually but existing Scrutor infrastructure makes it much easier to implement.
Hi! I'm running into an issue with Scrutor 3.1 when multitargeting .Net 4.8 and .Net Core 3.0. The offending code is occurring in a .Net Standard 2.0 library:

```c#
var collection = new ServiceCollection()
    .Scan(scan =>
        scan.FromApplicationDependencies()
            .AddClasses(classes => classes.AssignableTo<IMyInterface>())
            .AsSelfWithInterfaces()
            .WithTransientLifetime()
        );
```

This code works fine for the .Net Core 3.0 runtime, but fails on 4.8 with a "Value cannot be null" ArgumentNullException. Are there possibly additional explicit Scrutor dependencies I need to add for .Net Framework 4.8? 

The source for this project is [here](https://github.com/dcuccia/VTS/blob/master/src/Vts/MonteCarlo/DataStructures/DetectorInputProvider.cs). The multitargeted test project contains the following:

```xml
<PropertyGroup>
    <TargetFrameworks>netcoreapp3.0;net48</TargetFrameworks>
</PropertyGroup>
```

the exception details with partial stack trace are below:

> System.ArgumentNullException
>   HResult=0x80004003
>   Message=Value cannot be null.
> Parameter name: assembly
>   Source=Scrutor
>   StackTrace:
>    at Scrutor.Preconditions.NotNull[T](T value, String parameterName)
>    at Scrutor.TypeSourceSelector.FromAssemblyDependencies(Assembly assembly)
>    at Scrutor.TypeSourceSelector.FromApplicationDependencies(Func`2 predicate)
>    at Scrutor.TypeSourceSelector.FromApplicationDependencies()
>    at Vts.MonteCarlo.DetectorInputProvider.<>c.<get_ServiceProvider>b__2_0(ITypeSourceSelector scan) in C:\Projects\dcuccia-vts\src\Vts\MonteCarlo\DataStructures\DetectorInputProvider.cs:line 23
>    at Microsoft.Extensions.DependencyInjection.ServiceCollectionExtensions.Scan(IServiceCollection services, Action`1 action)

I'm quite new to this tool, so it's likely I'm just not setting things up properly. Let me know if there's more information I can provide to help resolve.

Thanks!
David

Scans of non-public classes result in registrations of compiler-generated classes on C# closures.  E.g.:
```cs
internal class Foo
{
    public void Bar(int i)
    {
        async Task Baz()
        {
            i = i;
        }
    }
}
```

And then:
```cs
services.Scan(s => s.FromCallingAssembly().AddClasses(false));
```

This results in the following unexpected registration:

> ServiceType = {Name = "<<Bar>g__Baz\|0>d" FullName = "MyApp.Foo+<>c__DisplayClass0_0+<<Bar>g__Baz\|0>d"}, ImplementationType = {Name = "<<Bar>g__Baz\|0>d" FullName = "MyApp.Foo+<>c__DisplayClass0_0+<<Bar>g__Baz\|0>d"}

If I derive `Foo` from a new (empty) interface `IFoo` and add `.AsImplementedInterfaces()` to the `Scan` call, I get the following unexpected registration instead:

> ServiceType = {Name = "IAsyncStateMachine" FullName = "System.Runtime.CompilerServices.IAsyncStateMachine"}, ImplementationType = {Name = "<<Bar>g__Baz\|0>d" FullName = "MyApp.Foo+<>c__DisplayClass0_0+<<Bar>g__Baz\|0>d"}
I am a fairly inexperienced developer who might benefit from a wiki page explaining when you'd use this library and what it solves that the base .net framework does not.

I was under the impression that .Net core had assembly scanning already. Does this just make it more user-friendly or is it something else?
When the implementation class is a generic class that is implementing a generic interface as below, it's not able to detect `IEventHandler<CustomEvent>` and `IEventHandler` from `ActionableEventHandler<CustomEvent>`

```csharp
class CustomEvent { } 
interface IEventHandler { }
interface IEventHandler<TEvent> : IEventHandler { }
class EventHandler<TEvent> : IEventHandler<TEvent> { }
class ActionableEventHandler<TEvent> : EventHandler<TEvent> { }
```

Possible fix can be:

```csharp
public static bool HasMatchingGenericArity(this Type interfaceType, TypeInfo typeInfo) {
            if (typeInfo.IsGenericType) {
                var interfaceTypeInfo = interfaceType.GetTypeInfo();
                if (interfaceTypeInfo.IsGenericType) {
                    var interfaceArgCount = interfaceType.GenericTypeArguments.Length;
                    var implementationArgCount = typeInfo.GenericTypeArguments.Length;

                    return interfaceArgCount == implementationArgCount;
                }
                // return false;
            }
            return true;
        }
```
This PR adds extension methods for defining cutom dependencies on specific services.

I came up with this idea because a lot of people didn't like the approach MS have taken with the generic `ILogger<T>` and the named `IOptions<TOptions>` (If you have multiple `IOptions<TOptions>` of the same type you have to retrive the correct instance by name inside of the costructor of the service where they are being injected)

### Common usages:
- Inject the desired service when multiple implementations are registered:

```csharp
var services = new ServiceCollection();

services.AddSingleton<SomeService1>();
services.AddSingleton<SomeService2>();

services.AddWithDependencies(() =>
{
    services.AddSingleton<MainService>();
}, typeof(SomeService2));

public interface ISomeService { }

public class SomeService1 : ISomeService { }
public class SomeService2 : ISomeService { }

public class MainService 
{
    public MainService(ISomeService someService)
    {
        // someService.GetType() == typeof(SomeService2)
    }
}
```

- Avoid injecting the generic `ILogger<T>`:

```csharp
var services = new ServiceCollection();

services.AddLogging();

services.AddWithDependencies(() =>
{
    services.AddSingleton<SomeService>();
    services.AddSingleton<SomeOtherService>();
},
(serviceProvider, injectionContext) => new [] {
     serviceProvider.GetRequiredService<ILoggerFactory>().CreateLogger(injectionContext.CreatingServiceType)
});

public class SomeService
{
    public SomeService(ILogger logger) 
    { 
        // logger.GetType() == typeof(Logger<SomeService>)
    }
}

public class SomeOtherService
{
    public SomeOtherService(ILogger logger) 
    { 
        // logger.GetType() == typeof(Logger<SomeOtherService>)
    }
}
```
Hello, 

I stumbled upon this https://github.com/microsoft/AspNetCoreInjection.TypedFactories but this project is pretty much dead.

I use scrutor and some kind of feature like typed factory would be cool addition.

this is the basic idea of this feature, you can define interface 
```c#
public interface ITestServiceFactory
{
    ITestService Create(string factoryParam1);
}
```
this feature auto generates implementation of this interface on the fly, that creates ITestService 
with dependencies from service provider and also those from Create method itself.

this project uses castle dynamic proxy (castle has this feature built in), but System.Reflection.DispatchProxy.dll works also.

what do you think?


Hi. I have a generic mediatr request handler which looks like this:

```
  public class GetOneByIdHandler<T> : IRequestHandler<GetOneByIdRequest<T>, T> where T : IBaseEntity
    {
        private readonly IAsyncRepository<T> _asyncRepository;

        public GetOneByIdHandler(IAsyncRepository<T> asyncRepository)
        {
            _asyncRepository = asyncRepository;
        }

        public async Task<T> Handle(GetOneByIdRequest<T> request, CancellationToken cancellationToken)
        {
            return await _asyncRepository.GetOneByIdAsync(request.Id);
        }
    }
```

Right now I have to add the handler for every DTO manually. How can I automate this with Scrutor? Thanks!

`            services.AddTransient<IRequestHandler<GetOneByIdRequest<MyDto>, MyDto>, GetOneByIdHandler<MyDto>>();
`
I've created a method of registering adaptors. I basically took your decorator implementation and augmented it for Adaptors. It works for my use case, but I haven't written tests for it. 