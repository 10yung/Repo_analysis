Hello im having this issue, i use prisma2@alpha and this is the repo https://github.com/GolfredoPerezFernandez/PrismaServer .

```
Error:Oops, an unknown error occured! This is on us, you did nothing wrong.
It occured in the `return await ctx.photon.posts.create()` invocation in C:\Users\owner\Documents\modern-apps\lightmatter\new\src\types\Mutation.ts:353:43

  349
  350 console.log(evarepsilon1Y.length)
  351
  352 console.log(malla.length)
â†’ 353   return await ctx.photon.posts.create({

Reason: called `Option::unwrap()` on a `None` value in src\libcore\option.rs:378:21

Please create an issue in the photonjs repo with
your `schema.prisma` and the Photon method you tried to use ï¿½:
https://github.com/prisma/photonjs/issues/new

    at PhotonFetcher.<anonymous> (C:\Users\owner\Documents\modern-apps\lightmatter\new\node_modules\@prisma\photon\index.js:65:27)
    at Generator.throw (<anonymous>)
    at rejected (C:\Users\owner\Documents\modern-apps\lightmatter\new\node_modules\@prisma\photon\index.js:6:65)
    at process._tickCallback (internal/process/next_tick.js:68:7)
There a plenty of `private` fields in the `PrismaClient` class which are properly hidden when using TypeScript but are visible when a user is working with plain JS. I suggest we move all top-level properties/functions that are not intended for the user to a `_` prefixed wrapper property.

![image](https://user-images.githubusercontent.com/1567498/72615635-7a87ee00-3935-11ea-954e-79c083361341.png)


![image](https://user-images.githubusercontent.com/1567498/72615144-46f89400-3934-11ea-90b6-b583da55872a.png)

In the generated Prisma Client, we export `dmmf` in the `index.js` file. However, the `PrismaClient` constructor then goes ahead and mutates this export, establishing circular relations.
This means that the exported DMMF can no longer be stringified easily.
Studio needs the DMMF to be stringify-able so it can be transported via HTTP / Websockets etc.
In previous versions of Prisma we could pass this `2020-01-01` inside a resolver if we had a `DateTime` type and then use it to query items from database.

I'll provide an example of what I want to be able to do.

So suppose we have many different rows inside our table, which has a `createdAt` column. There is multiple rows which have the same date of creation but the time is different, like so `2020-01-01T21:00:00`, `2020-01-01T00:00:00` and so on. If I'll pass `2020-01-01` I'll get all of those rows which have a `2020-01-01` as a date. Besides that it would be nice to be able to pass an array of dates like so [`2020-01-01`, `2020-01-02`] and use it inside `in` parameter so it would return all of the rows within those days with all possible time values.

I hope this is a clear explanation. Would like to hear some comments on that.
Hello there !

> Reason: called `Result::unwrap()` on an `Err` value: Error { kind: Closed, cause: None } in src/libcore/result.rs:1165:5

This error occurred when a mutation was running and the app was restarting on Expo. It might be the same as if the app was purely killed.

Hope you can fix this.
I'm getting an unknown error when running `create()`.

mysql
linux
2.0.0-preview019


Function Call:
```
photon.annotations.create({
  data: {
    text: 'Hello world',
    author: { connect:{ id: 0 } },
    verse: { connect: {id: 1} }
  }
});
```

Schema:
```
model User {
  id          Int          @id @default(autoincrement())
  name        String       @unique
  email       String       @unique
  password    String
  authTokens  AuthToken[]
  annotations Annotation[]
  role        Role
}

model Role {
  id          Int          @id @default(autoincrement())
  name        String
  permissions Permission[]
}

model Permission {
  id    Int    @id @default(autoincrement())
  name  String
  roles Role[]
}

model AuthToken {
  id        Int      @id @default(autoincrement())
  token     String
  createdAt DateTime @default(now())
  user      User
}

model Annotation {
  id        Int      @id @default(autoincrement())
  text      String
  verse     verse?
  chapter   chapter?
  author    User
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model verse {
  chapter        chapter?     @map(name: "chapter_id") @relation(name: "chapter_id")
  id             Int          @id
  scripture_text String
  verse_number   Int          @default(0)
  annotations    Annotation[]
}
```

Debug output:
```
photon Request: +0ms
  photon mutation {
  photon   createOneAnnotation(data: {
  photon     text: "Hello world"
  photon     author: {
  photon       connect: {
  photon         id: 0
  photon       }
  photon     }
  photon     verse: {
  photon       connect: {
  photon         id: 1
  photon       }
  photon     }
  photon   }) {
  photon     id
  photon     text
  photon     createdAt
  photon     updatedAt
  photon   }
  photon } +0ms
  engine {
  engine   error: CancelError: Promise was canceled
  engine       at PCancelable.cancel (/opt/korihor/server/node_modules/@prisma/photon/runtime/index.js:24533:17)
  engine       at NodeEngine.handlePanic (/opt/korihor/server/node_modules/@prisma/photon/runtime/index.js:3306:40)
  engine       at EventEmitter.<anonymous> (/opt/korihor/server/node_modules/@prisma/photon/runtime/index.js:3262:26)
  engine       at EventEmitter.emit (events.js:223:5)
  engine       at LineStream.<anonymous> (/opt/korihor/server/node_modules/@prisma/photon/runtime/index.js:3431:41)
  engine       at LineStream.emit (events.js:223:5)
  engine       at addChunk (_stream_readable.js:309:12)
  engine       at readableAddChunk (_stream_readable.js:290:11)
  engine       at LineStream.Readable.push (_stream_readable.js:224:10)
  engine       at LineStream.Transform.push (_stream_transform.js:150:32) {
  engine     name: 'CancelError'
  engine   }
  engine } +6s
Error:
Oops, an unknown error occured! This is on us, you did nothing wrong.
It occured in the `photon.()` invocation in /opt/korihor/server/src/resolvers/index.js:57:41



Reason: called `Option::unwrap()` on a `None` value in src/libcore/option.rs:378:21

Please create an issue in the photonjs repo with
your `schema.prisma` and the Photon method you tried to use ï¿½ðŸš€:
https://github.com/prisma/photonjs/issues/new

    at PhotonFetcher.<anonymous> (/opt/korihor/server/node_modules/@prisma/photon/index.js:65:27)
    at Generator.throw (<anonymous>)
    at rejected (/opt/korihor/server/node_modules/@prisma/photon/index.js:6:65)
    at processTicksAndRejections (internal/process/task_queues.js:94:5)
```
see https://github.com/prisma/photonjs/issues/250
(Internal: https://www.notion.so/prismaio/Prisma-Client-Logic-Integration-Testing-a3ee0fa1d8044045b33b012878a75098)
This is a continuation of the [comment](https://github.com/prisma/photonjs/issues/364#issuecomment-574362631) left on #364.

I've created a minimal repository with instructions on how to recreate the issue: https://github.com/stephensamra/photon-self-relations-issue

---
Original comment:

Given this schema:
```prisma
model Person {
  id     String  @id @default(cuid())
  parent Person? @relation(name: "ParentChildRelation")
}
```

When I create 2 people: parent and child:
```js
await photon.people.create({
  data: {
    id: 'parent'
  }
})

await photon.people.create({
  data: {
    id: 'child'
  }
})
```

Then, update the child to have parent as its parent:
```js
await photon.people.update({
  where: {
    id: 'child'
  },
  data: {
    parent: {
      connect: {
        id: 'parent'
      }
    }
  }
})
```

This is what I get:
![image](https://user-images.githubusercontent.com/8583469/72380499-71b4d380-370d-11ea-9689-0a3d2b45968f.png)

I would have assumed that the row with the id of child to have `parent` in its parent column. Instead, it's the other way around. Is this supposed to be how this works?

Thanks
