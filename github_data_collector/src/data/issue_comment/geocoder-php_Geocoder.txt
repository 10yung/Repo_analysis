Asking on behalf of @tanthammar, who posted this issue here: https://github.com/geocoder-php/GeocoderLaravel/issues/163

----------

### General Information
GeocoderLaravel Version: ^4.2
Laravel Version: 6
PHP Version: 7.3.8
Operating System and Version: OSX 10.14.6

### Issue Description
I do understand that this might not be the proper place to ask, but I was hoping that someone might have a solution. :)

Unable to get this to work with the Algolia geocoder provider
No errors, but always an empty collection returned.

(I have it working with the Nominatim and GoogleMaps)

### Steps to Replicate
```
composer require geocoder-php/algolia-places-provider^0.1.1
```
in `config/geocoder.php`
```js
'providers' => [
        Chain::class => [
            AlgoliaPlaces::class => [
                'my-api-key',
                'my-app-id'
            ],
            Nominatim::class => [
                'https://nominatim.openstreetmap.org',
                'en'
            ],
            GoogleMaps::class => [
                env('GOOGLE_MAPS_LOCALE', 'en-US'),
                env('GOOGLE_MAPS_API_KEY'),
            ],
            GeoPlugin::class  => [],
        ],
    ],
```
### Stack Trace
[if an error is occuring, provide the complete stack trace here]

Im not sure if this is a good idea or not... 
We will not notice this on PullRequests anyways..
Hi
Adding provider ipfinder.
MapTiler (@maptiler) just announced their new Geocoding API : <https://www.maptiler.com/blog/2019/09/announcing-maptiler-cloud-geocoding-api.html>

I didn't find the documentation yet but thought it could be interesting ðŸ˜ƒ 
I think we should a a section/table to the documentation with all of the framework integrations. 

I'll PR soon :)

Relates to #881 

Would be interested in your thoughts @geodeveloper @Nyholm @jbelien 
This allows the chain to execute as it does currently, but adds the ability to handle the exceptions if they occured.

For example, you could log `QuotaExceeded` exceptions and ignore `UnsupportedOperation` ones.

Example:
```php
$chain->geocodeQuery($query);

if ($chain->getPreviousQueryExceptions()) {
    $exceptionsToLog = array_filter($chain->getPreviousQueryExceptions(), function (\Throwable $e) {
         return $e instanceof QuotaExceeded;
    })
}
```
example adoption:

From BeforeAdoption.
a.) class: `Geocoder\ProviderAggregator`
b.) method def: `registerProviders(array $providers = []);`
c.) sample method call: `$geocoder->registerProviders([new \Geocoder\Provider\GoogleMaps\GoogleMaps($adapter), new \Geocoder\Provider\Yandex\Yandex($adapter),]);`

To AfterAdoption.
a.) class: `Geocoder\ProviderAggregator`
b.) method def: `registerProviders(Providers ...$providers);`
c.) method call: `$geocoder->registerProviders(new \Geocoder\Provider\GoogleMaps\GoogleMaps($adapter));`
d.) method call: `$geocoder->registerProviders(new \Geocoder\Provider\GoogleMaps\GoogleMaps($adapter), new XXProvider);`
e.) method call:` $providers = [new \Geocoder\Provider\GoogleMaps\GoogleMaps($adapter), new \Geocoder\Provider\Yandex\Yandex($adapter),]; $geocoder->registerProviders(... $providers);`
First of all, thanks for this great php package!

I have a feature request for getting address information by id instead of doing a full search again. I think many applications will store part of the geocoding response and eventually will re-fetch information for the stored part. 

At the moment, with GoogleMapsProvider and NominatimProvider you can only do a reverse lookup by lat/lng or re-do the query. However both of the endpoints have a dedicated API for lookup (for google maps this even is the preferred way, because it will not count as a request as far as I know). 

For OpenStreetMap it looks like this: https://nominatim.openstreetmap.org/lookup?osm_ids=NXXXXX.

It would be great if the providers would have a lookup method for this.
An even better solution would be to extend the provider Interface (or have a 2nd interface "LookupAwareProvider" with a lookup action or the GeocodeQuery object with an id property and maybe also the Location interface.

If a provider defines an id for a location, it could be used for a lookup call.

I know, that I can easily achieve this by creating my own provider, however, if this feature is interesting for you, we could discus an solution and I could provide a PR for this.
The following was submitted in the GeocoderLaravel repo by @xSoulRootx (https://github.com/geocoder-php/GeocoderLaravel/issues/144), but probably belongs here:

============

### General Information
GeocoderLaravel Version: ^4.0
Laravel Version: 5.7.*
PHP Version: 7.2
Operating System and Version: Ubuntu

### Issue Description
Output language in reverse query don't work

### **Resolve**
vendor\geocoder-php\google-maps-provider\GoogleMaps.php

in 
```
public function reverseQuery(ReverseQuery $query): Collection
```
before
```
return $this->fetchUrl($url, $query->getLocale(), $query->getLimit(), $query->getData('region', $this->region));
```
add
```
        if (null !== $query->getLocale()) {
            $url .= '&result_type='.urlencode($resultType);
        } else {
            $url .= '&language='.env('GOOGLE_MAPS_LOCALE', 'en-US');
        }
```
or something like this