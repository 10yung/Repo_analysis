Probably using https://github.com/r-hub/r-minimal or https://gitlab.com/artemklevtsov/r-alpine



The Dockerfile created from the same script looks different if built on Windows or OSX - is this expected? See https://github.com/MarkEdmondson1234/googleCloudRunner/issues/32 for background.

Dockerfile on OSX:

```
FROM trestletech/plumber

RUN ["install2.r", "crayon", "httpuv", "jsonlite", "later", "magrittr", "plumber", "promises", "R6", "Rcpp", "rstudioapi", "stringi"]
COPY ["./", "./"]
ENTRYPOINT ["R", "-e", "pr <- plumber::plumb(commandArgs()[4]); pr$run(host='0.0.0.0', port=as.numeric(Sys.getenv('PORT')))"]
CMD ["api.R"]
```

Dockerfile on Windows:

```
FROM trestletech/plumber
RUN export DEBIAN_FRONTEND=noninteractive; apt-get -y update \
  && apt-get install -y make
RUN ["install2.r", "crayon", "httpuv", "jsonlite", "later", "magrittr", "plumber", "promises", "R6", "Rcpp", "rstudioapi", "stringi"]
COPY ["./", "./"]
ENTRYPOINT ["R", "-e", "pr <- plumber::plumb(commandArgs()[4]); pr$run(host='0.0.0.0', port=as.numeric(Sys.getenv('PORT')))"]
CMD ["api.R"]
```

Normally this wouldn't break things but it triggered another bug in `trestletech/plumber` where you can't use apt-get

The `trestletech/plumber` image also sets an `ENTRYPOINT`, which breaks detection of installed packages:

```R
> containerit::get_installed_packages("trestletech/plumber")
Detected API version '1.40' is above max version '1.39'; downgrading
INFO [2019-11-12 12:29:31] Running command Rscript -e write.csv(x = as.data.frame(installed.packages())[,c("Version")]) in trestletech/plumber
Detected API version '1.40' is above max version '1.39'; downgrading
ARGUMENT 'Rscript' __ignored__


R version 3.6.0 (2019-04-26) -- "Planting of a Tree"
Copyright (C) 2019 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> pr <- plumber::plumb(commandArgs()[4]); pr$run(host='0.0.0.0', port=8000)
Error in plumber::plumb(commandArgs()[4]) : File does not exist: Rscript
Execution halted
```

Here are a few attempts to fix that, none of them working yet:

```
cmd = c("Rscript", "-e", "write.csv(x = as.data.frame(installed.packages())[,c(\"Version\")])")

> client$container$run(image = "trestletech/plumber", cmd = cmd, rm = TRUE, entrypoint = "/bin/bash")
/usr/bin/Rscript: /usr/bin/Rscript: cannot execute binary file
Error: Command 'Rscript -e write.csv(x = as.data.frame(installed.packages())[,c("Version")])' in image 'trestletech/plumber:latest' returned non-zero exit status 126
/usr/bin/Rscript: /usr/bin/Rscript: cannot execute binary file
> client$container$run(image = "trestletech/plumber", cmd = cmd, rm = TRUE, entrypoint = "/bin/sh")
/bin/sh: 0: Can't open Rscript
Error: Command 'Rscript -e write.csv(x = as.data.frame(installed.packages())[,c("Version")])' in image 'trestletech/plumber:latest' returned non-zero exit status 127
/bin/sh: 0: Can't open Rscript
> client$container$run(image = "trestletech/plumber", cmd = cmd, rm = TRUE, entrypoint = "bash")
/usr/bin/Rscript: /usr/bin/Rscript: cannot execute binary file
Error: Command 'Rscript -e write.csv(x = as.data.frame(installed.packages())[,c("Version")])' in image 'trestletech/plumber:latest' returned non-zero exit status 126
/usr/bin/Rscript: /usr/bin/Rscript: cannot execute binary file
> client$container$run(image = "trestletech/plumber", cmd = cmd, rm = TRUE, entrypoint = "/bin/sh")
/bin/sh: 0: Can't open Rscript
Error: Command 'Rscript -e write.csv(x = as.data.frame(installed.packages())[,c("Version")])' in image 'trestletech/plumber:latest' returned non-zero exit status 127
/bin/sh: 0: Can't open Rscript
> client$container$run(image = "trestletech/plumber", cmd = c("Rscript", "-e", "sessionInfo()"), rm = TRUE, entrypoint = "/bin/sh")
/bin/sh: 0: Can't open Rscript
Error: Command 'Rscript -e sessionInfo()' in image 'trestletech/plumber:latest' returned non-zero exit status 127
/bin/sh: 0: Can't open Rscript
> client$container$run(image = "trestletech/plumber", cmd = c("Rscript -e 'sessionInfo()'"), rm = TRUE, entrypoint = "/bin/sh")
/bin/sh: 0: Can't open Rscript -e 'sessionInfo()'
Error: Command 'Rscript -e 'sessionInfo()'' in image 'trestletech/plumber:latest' returned non-zero exit status 127
/bin/sh: 0: Can't open Rscript -e 'sessionInfo()'
```
Hello :)

I was trying to replicate the exact Dockerfile from a folder, but had to override the COPY line as there was no option to add a custom one like `Cmd()` - I had to use the below:

```r
 docker <- suppressWarnings(dockerfile(deploy_folder,
     image = "trestletech/plumber",
     offline = FALSE,
     cmd = Cmd("api.R"),
     maintainer = NULL,
     container_workdir = NULL,
     entrypoint = Entrypoint("R",
                   params = list("-e",
                                 "pr <- plumber::plumb(commandArgs()[4]); pr$run(host='0.0.0.0', port=as.numeric(Sys.getenv('PORT')))")),
     filter_baseimage_pkgs = TRUE,
     ...))

  addInstruction(docker) <-containerit:::Copy(".","./")

print(docker)
#FROM trestletech/plumber
#COPY ["./", "./"]
#ENTRYPOINT ["R", "-e", "pr <- plumber::plumb(commandArgs()[4]); pr$run(host='0.0.0.0', port=as.numeric(Sys.getenv('PORT')))"]
#CMD ["api.R"]
```

Could there be a `Copy()` function exported to achieve similar to above?
Instead of our own R > Dockerfile-string conversion, use the `dockerfiler`package: https://github.com/ColinFay/dockerfiler

- create a PR to `dockerfiler` to not use deprecated `MAINTAINER` but create a label?
- ..
I got this error message when generating from a script that produced the start of the Dockerfile below:

```
FROM trestletech/plumber
LABEL maintainer="IIH-Nordic"
RUN export DEBIAN_FRONTEND=noninteractive; apt-get -y update  \
  && apt-get install -y git-core \
	libcurl4-openssl-dev \
	libssl-dev \
	make
...etc...
```

It seems the debian lists are updating, that I gleaned from this SO answer:
https://unix.stackexchange.com/questions/528751/cannot-update-apt-list-repository-no-longer-has-a-release-file

The answer there to add `--allow-releaseinfo-change` to the below worked:

```
 apt-get -y update --allow-releaseinfo-change
```

I am trying set up a container based on a script and then have that script run on start-up using the CMD_RScript  command. I can build the container, but when I try to run it I get the error `No such file or directory` referencing the `.R` script, which I thought was supposed to be copied to the working directory in the container. I've gone back and tried using the simple example in the containRit help, where I seem to get the same error. (at this point don't care about the script output, I'm just trying to see if the script is found).

```
# create simple script file
scriptFile <- tempfile(pattern = "containerit_", fileext = ".R")
writeLines(c('library(rgdal)',
             'nc <- rgdal::readOGR(system.file("shapes/", package="maptools"), "sids", verbose = FALSE)',
             'proj4string(nc) <- CRS("+proj=longlat +datum=NAD27")',
             'plot(nc)'), scriptFile)

# use a custom startup command
scriptCmd <- CMD_Rscript(basename(scriptFile))

# create Dockerfile for the script
dockerfile_object <- dockerfile(from = scriptFile, silent = TRUE, cmd = scriptCmd)
containerit::write(dockerfile_object, file = './Dockerfile')
```
Then at the terminal I set up a  'virtualbox'
```
docker-machine create  "virtualbox"
docker-machine env virtualbox
eval $(docker-machine env virtualbox)
```
And run  
`build -t testing:v1 .`  
which works... generates an image which I can see using `docker image ls`.  
And then I run  
`run --rm  testing:v1`  
which gives the error `cannot open file 'containerit_ad95cd542a1.R': No such file or directory` which references the image id.   
Is the .R script not being copied to the container properly so that `cmd = containerit_ad95cd542a1.R` can be run at start up? Is it missing a component of the path to the script that isn't mentioned in the help?
See how xml2 is doing it!
Stevedore does not work on appveyor, so the vignettes and some tests do not work:

```
Rscript -e "stevedore::docker_available(); stevedore::docker_client()$api_version()"
[1] FALSE
Error in py_module_import(module, convert = convert) : 
  ImportError: cannot import name 'NpipeAdapter'
Detailed traceback: 
  File "c:/RLibrary/stevedore/py\httppipe.py", line 9, in <module>
    from docker.transport import NpipeAdapter as HttpAdapter
Calls: <Anonymous> ... httppipe_prepare -> <Anonymous> -> py_module_import
Execution halted
Command exited with code 1
7z a failure.zip *.Rcheck\*
```

See full build output at https://ci.appveyor.com/project/nuest/containerit/builds/26171500