I've implemented custom components in Percy, similar to what you see in React, so users can use a `<MyComponent/>` pattern rather than `{my_component()}` which feels a bit more up to date with competitor frameworks.

I've had to implement a list of valid html tags to do this (I took them from [here](https://react-cn.github.io/react/docs/tags-and-attributes.html)).

If this isn't the best way of going around this please let me know, or if this is an unwanted change then that's fine too.

I tried to implement children in the same way React handles them, ie a children prop gets added into the child component but I've been round in circles with this - I kept hitting borrowing problems. I also had a look how Yew does it (which is similar to React) and still couldn't figure out a nice way of doing it. Any help on this would be appreciated. Children actually do work but they're just appended to the end of the parent, like in the normal HTML tags. I'm hoping it wouldn't require a huge refactor for it.
When running client-side, the `unsafe_inner_html` attribute does not update the inner html when passed to `DomUpdater`. For example, the second and third assertions fail in:
```rust
#![feature(proc_macro_hygiene)]

extern crate wasm_bindgen_test;

use wasm_bindgen::JsCast;
use wasm_bindgen_test::*;
use web_sys::Element;

use virtual_dom_rs::prelude::*;

wasm_bindgen_test_configure!(run_in_browser);

#[wasm_bindgen_test]
fn test_inner() {
    let div = html!{
        <div unsafe_inner_html="<span>hi</span>"></div>
    };
    let mut updater = DomUpdater::new(div);
    let node: Element = updater.root_node().unchecked_into();
    assert_eq!(node.inner_html(), "<span>hi</span>");

    let div = html!{
        <div><span>hello</span></div>
    };
    updater.update(div);
    let node: Element = updater.root_node().unchecked_into();
    assert_eq!(node.inner_html(), "<span>hello</span>");
    
    let div = html!{
        <div unsafe_inner_html="<span>goodbye</span>"></div>
    };
    updater.update(div);
    let node: Element = updater.root_node().unchecked_into();
    assert_eq!(node.inner_html(), "<span>goodbye</span>");
}
```
* There seems to be a bug when navigating to the catch_all route but not contributors, ex. localhost:7878/test. The current implementation panics using both rocket and actix as server.
* Rocket currently has 404 for unknown routes and this should be added to the actix example as well.
I was wondering if Percy is looking into integration and/or contribution to alternative templating libraries (such as maud).
Investigate memory usage a bit by clicking between the contributors page and home page in the demo. Make the `DOMUpdater` free closures that are no longer being used

![image](https://user-images.githubusercontent.com/2099811/58762453-26530980-851e-11e9-867c-148b5f99ea94.png)

Hi!

I'd like to trigger a change to state (in this case, to hide an element) when a page is visited. To do so I put a `.msg()` in an `on_visit` handler, like so:
```
#[route(
  path = "/mypage",
  on_visit = hide_side_nav
)]
fn my_route(store: Provided<Rc<RefCell<Store>>>) -> VirtualNode {
    MyView::new(Rc::clone(&store)).render()
}

fn hide_side_nav(store: Provided<Rc<RefCell<Store>>>) {
    store.borrow_mut().msg(&Msg::HideSideNav);
}
```

### Expected behavior
Page loads and the element I've specified is hidden as a result of the above message being sent

### Actual behavior
This runtime error:
```
panicked at 'already borrowed: BorrowMutError'
```

### Minimal Reproducible Example
In the [`isomorphic example`](https://github.com/chinedufn/percy/tree/master/examples/isomorphic), you can reproduce by changing `download_contributers_json` to send a message like so:
```
#[route(
  path = "/contributors",
  on_visit = download_contributors_json
)]
fn contributors_route(store: Provided<Rc<RefCell<Store>>>) -> VirtualNode {
    ContributorsView::new(Rc::clone(&store)).render()
}

fn download_contributors_json(store: Provided<Rc<RefCell<Store>>>) {
    store.borrow_mut().msg(&Msg::InitiatedContributorsDownload); // Arbitrary message
}
```

### Notes
From reading a little bit about the error is that it's more of an `Rc/RefCell` problem than a `percy` problem. I thought would be useful to post it here anyways because I imagine others will get snagged on it at some point.
./build-wasm.sh: line 8: wasm-pack: command not found
error: toolchain 'nightly-x86_64-unknown-linux-gnu' is not installed

But it is installed...
Is it possible to use Percy to develop applications with [Sciter](https://github.com/sciter-sdk/rust-sciter) for front-end ?
Is there already a way to initialize a Virtual DOM from an actual DOM element?
This is despite https://github.com/rustwasm/wasm-bindgen/issues/1283

I think that the requirement can be removed from https://github.com/chinedufn/percy/blob/master/crates/virtual-node/Cargo.toml

I'll give this a shot locally and open a PR if it's working