Specify a version of bundler to use with Travis as it seems like the CI tests for older versions of Ruby are failing because of version incompatibilities with Bundler

![image](https://user-images.githubusercontent.com/9844923/71549482-273b1380-29f9-11ea-974a-f91713675862.png)

`URI.escape` and `URI.encode` are deprecated, this PR replaces the `URI.encode` method call with `CGI.escape`

![image](https://user-images.githubusercontent.com/9844923/71549468-e9d68600-29f8-11ea-84a4-59fce2e80bef.png)

Hi maintainers. I'm curious if you'd be open to transferring the maintenance of this gem to Chef (https://chef.io). We utilize this gem in our compliance offering Chef InSpec and for systems testing in our Chef Workstation product. It's pretty critical to us and we'd like to see that things are updated to at least a new enough API revision that it will support Docker on Windows. Let me know at tsmith@chef.io.
When attempting to call `Docker.version`, I get the following error:
```
bundle exec rake apply
[--] DEBUG (): [:get, "/v1.16/version", {}, nil]
rake aborted!
Docker::Error::TimeoutError: connect_write timeout reached
C:/code/project/Rakefile:103:in `<top (required)>'

Caused by:
Excon::Error::Timeout: connect_write timeout reached
C:/code/project/Rakefile:103:in `<top (required)>'

Caused by:
IO::EINPROGRESSWaitWritable: A blocking operation is currently executing. - connect(2) would block
C:/code/project/Rakefile:103:in `<top (required)>'

Caused by:
Excon::Error::Timeout: connect_write timeout reached
C:/code/project/Rakefile:103:in `<top (required)>'

Caused by:
IO::EINPROGRESSWaitWritable: A blocking operation is currently executing. - connect(2) would block
C:/code/project/Rakefile:103:in `<top (required)>'

Caused by:
Excon::Error::Timeout: connect_write timeout reached
C:/code/project/Rakefile:103:in `<top (required)>'

Caused by:
IO::EINPROGRESSWaitWritable: A blocking operation is currently executing. - connect(2) would block
C:/code/project/Rakefile:103:in `<top (required)>'

Caused by:
Excon::Error::Timeout: connect_write timeout reached
C:/code/project/Rakefile:103:in `<top (required)>'

Caused by:
IO::EINPROGRESSWaitWritable: A blocking operation is currently executing. - connect(2) would block
C:/code/project/Rakefile:103:in `<top (required)>'
(See full trace by running task with --trace)
```
Here's the code I'm running:
```ruby
gem 'docker-api', '~> 1.34'
---
require 'docker-api'
...
Docker.logger = $logger
Docker.url = File.exist?('/var/run/docker.sock') \
	? 'unix:///var/run/docker.sock' \
	: 'tcp://localhost:2375'
Docker.options = {
	connect_timeout: 5
}

Docker.version
Docker.info
```
Environment details:
```
>ruby --version
ruby 2.5.3p105 (2018-10-18 revision 65156) [x64-mingw32]

>curl http://localhost:2375/v1.16/version
{"Platform":{"Name":"Docker Engine - Community"},"Components":[{"Name":"Engine","Version":"18.09.3","Details":{"ApiVersion":"1.39","Arch":"amd64","BuildTime":"2019-02-28T06:40:58.000000000+00:00","Experimental":"true","GitCommit":"774a1f4","GoVersion":"go1.10.8","KernelVersion":"4.9.125-linuxkit","MinAPIVersion":"1.12","Os":"linux"}}],"Version":"18.09.3","ApiVersion":"1.39","MinAPIVersion":"1.12","GitCommit":"774a1f4","GoVersion":"go1.10.8","Os":"linux","Arch":"amd64","KernelVersion":"4.9.125-linuxkit","Experimental":true,"BuildTime":"2019-02-28T06:40:58.000000000+00:00"}

>docker version
Client: Docker Engine - Community
 Version:           18.09.3
 API version:       1.39
 Go version:        go1.10.8
 Git commit:        774a1f4
 Built:             Thu Feb 28 06:32:50 2019
 OS/Arch:           windows/amd64
 Experimental:      false

Server: Docker Engine - Community
 Engine:
  Version:          18.09.3
  API version:      1.39 (minimum version 1.12)
  Go version:       go1.10.8
  Git commit:       774a1f4
  Built:            Thu Feb 28 06:40:58 2019
  OS/Arch:          linux/amd64
  Experimental:     true
```
Relevant resolved ruby versions:
```
docker-api (1.34.2)
excon (0.62.0)
multi_json (1.13.1)
```
The choice bits of the stacktraces:
```
Docker::Error::TimeoutError: connect_write timeout reached
C:/apps/Ruby25-x64/lib/ruby/gems/2.5.0/gems/docker-api-1.34.2/lib/docker/connection.rb:52:in `rescue in request'
C:/apps/Ruby25-x64/lib/ruby/gems/2.5.0/gems/docker-api-1.34.2/lib/docker/connection.rb:37:in `request'
C:/apps/Ruby25-x64/lib/ruby/gems/2.5.0/gems/docker-api-1.34.2/lib/docker/connection.rb:65:in `block (2 levels) in <class:Connection>'
C:/apps/Ruby25-x64/lib/ruby/gems/2.5.0/gems/docker-api-1.34.2/lib/docker.rb:109:in `version'
Caused by:
Excon::Error::Timeout: connect_write timeout reached
C:/apps/Ruby25-x64/lib/ruby/gems/2.5.0/gems/excon-0.62.0/lib/excon/socket.rb:268:in `select_with_timeout'
C:/apps/Ruby25-x64/lib/ruby/gems/2.5.0/gems/excon-0.62.0/lib/excon/socket.rb:132:in `rescue in block in connect'
C:/apps/Ruby25-x64/lib/ruby/gems/2.5.0/gems/excon-0.62.0/lib/excon/socket.rb:113:in `block in connect'
C:/apps/Ruby25-x64/lib/ruby/gems/2.5.0/gems/excon-0.62.0/lib/excon/socket.rb:104:in `each'
C:/apps/Ruby25-x64/lib/ruby/gems/2.5.0/gems/excon-0.62.0/lib/excon/socket.rb:104:in `connect'
C:/apps/Ruby25-x64/lib/ruby/gems/2.5.0/gems/excon-0.62.0/lib/excon/socket.rb:30:in `initialize'
C:/apps/Ruby25-x64/lib/ruby/gems/2.5.0/gems/excon-0.62.0/lib/excon/connection.rb:431:in `new'
C:/apps/Ruby25-x64/lib/ruby/gems/2.5.0/gems/excon-0.62.0/lib/excon/connection.rb:431:in `socket'
C:/apps/Ruby25-x64/lib/ruby/gems/2.5.0/gems/excon-0.62.0/lib/excon/connection.rb:111:in `request_call'
C:/apps/Ruby25-x64/lib/ruby/gems/2.5.0/gems/excon-0.62.0/lib/excon/middlewares/base.rb:16:in `request_call'
C:/apps/Ruby25-x64/lib/ruby/gems/2.5.0/gems/excon-0.62.0/lib/excon/middlewares/mock.rb:48:in `request_call'
C:/apps/Ruby25-x64/lib/ruby/gems/2.5.0/gems/excon-0.62.0/lib/excon/middlewares/instrumentor.rb:26:in `request_call'
C:/apps/Ruby25-x64/lib/ruby/gems/2.5.0/gems/excon-0.62.0/lib/excon/middlewares/base.rb:16:in `request_call'
C:/apps/Ruby25-x64/lib/ruby/gems/2.5.0/gems/excon-0.62.0/lib/excon/middlewares/base.rb:16:in `request_call'
C:/apps/Ruby25-x64/lib/ruby/gems/2.5.0/gems/excon-0.62.0/lib/excon/middlewares/base.rb:16:in `request_call'
C:/apps/Ruby25-x64/lib/ruby/gems/2.5.0/gems/excon-0.62.0/lib/excon/middlewares/base.rb:16:in `request_call'
C:/apps/Ruby25-x64/lib/ruby/gems/2.5.0/gems/excon-0.62.0/lib/excon/connection.rb:260:in `request'
C:/apps/Ruby25-x64/lib/ruby/gems/2.5.0/gems/excon-0.62.0/lib/excon/middlewares/idempotent.rb:33:in `error_call'
C:/apps/Ruby25-x64/lib/ruby/gems/2.5.0/gems/excon-0.62.0/lib/excon/middlewares/base.rb:11:in `error_call'
C:/apps/Ruby25-x64/lib/ruby/gems/2.5.0/gems/excon-0.62.0/lib/excon/middlewares/base.rb:11:in `error_call'
C:/apps/Ruby25-x64/lib/ruby/gems/2.5.0/gems/excon-0.62.0/lib/excon/middlewares/base.rb:11:in `error_call'
C:/apps/Ruby25-x64/lib/ruby/gems/2.5.0/gems/excon-0.62.0/lib/excon/connection.rb:283:in `rescue in request'
C:/apps/Ruby25-x64/lib/ruby/gems/2.5.0/gems/excon-0.62.0/lib/excon/connection.rb:225:in `request'
C:/apps/Ruby25-x64/lib/ruby/gems/2.5.0/gems/excon-0.62.0/lib/excon/middlewares/idempotent.rb:33:in `error_call'
C:/apps/Ruby25-x64/lib/ruby/gems/2.5.0/gems/excon-0.62.0/lib/excon/middlewares/base.rb:11:in `error_call'
C:/apps/Ruby25-x64/lib/ruby/gems/2.5.0/gems/excon-0.62.0/lib/excon/middlewares/base.rb:11:in `error_call'
C:/apps/Ruby25-x64/lib/ruby/gems/2.5.0/gems/excon-0.62.0/lib/excon/middlewares/base.rb:11:in `error_call'
C:/apps/Ruby25-x64/lib/ruby/gems/2.5.0/gems/excon-0.62.0/lib/excon/connection.rb:283:in `rescue in request'
C:/apps/Ruby25-x64/lib/ruby/gems/2.5.0/gems/excon-0.62.0/lib/excon/connection.rb:225:in `request'
C:/apps/Ruby25-x64/lib/ruby/gems/2.5.0/gems/excon-0.62.0/lib/excon/middlewares/idempotent.rb:33:in `error_call'
C:/apps/Ruby25-x64/lib/ruby/gems/2.5.0/gems/excon-0.62.0/lib/excon/middlewares/base.rb:11:in `error_call'
C:/apps/Ruby25-x64/lib/ruby/gems/2.5.0/gems/excon-0.62.0/lib/excon/middlewares/base.rb:11:in `error_call'
C:/apps/Ruby25-x64/lib/ruby/gems/2.5.0/gems/excon-0.62.0/lib/excon/middlewares/base.rb:11:in `error_call'
C:/apps/Ruby25-x64/lib/ruby/gems/2.5.0/gems/excon-0.62.0/lib/excon/connection.rb:283:in `rescue in request'
C:/apps/Ruby25-x64/lib/ruby/gems/2.5.0/gems/excon-0.62.0/lib/excon/connection.rb:225:in `request'
C:/apps/Ruby25-x64/lib/ruby/gems/2.5.0/gems/docker-api-1.34.2/lib/docker/connection.rb:40:in `request'
C:/apps/Ruby25-x64/lib/ruby/gems/2.5.0/gems/docker-api-1.34.2/lib/docker/connection.rb:65:in `block (2 levels) in <class:Connection>'
C:/apps/Ruby25-x64/lib/ruby/gems/2.5.0/gems/docker-api-1.34.2/lib/docker.rb:109:in `version'
Caused by:
IO::EINPROGRESSWaitWritable: A blocking operation is currently executing. - connect(2) would block
C:/apps/Ruby25-x64/lib/ruby/2.5.0/socket.rb:1213:in `__connect_nonblock'
C:/apps/Ruby25-x64/lib/ruby/2.5.0/socket.rb:1213:in `connect_nonblock'
C:/apps/Ruby25-x64/lib/ruby/gems/2.5.0/gems/excon-0.62.0/lib/excon/socket.rb:126:in `block in connect'
C:/apps/Ruby25-x64/lib/ruby/gems/2.5.0/gems/excon-0.62.0/lib/excon/socket.rb:104:in `each'
C:/apps/Ruby25-x64/lib/ruby/gems/2.5.0/gems/excon-0.62.0/lib/excon/socket.rb:104:in `connect'
C:/apps/Ruby25-x64/lib/ruby/gems/2.5.0/gems/excon-0.62.0/lib/excon/socket.rb:30:in `initialize'
C:/apps/Ruby25-x64/lib/ruby/gems/2.5.0/gems/excon-0.62.0/lib/excon/connection.rb:431:in `new'
C:/apps/Ruby25-x64/lib/ruby/gems/2.5.0/gems/excon-0.62.0/lib/excon/connection.rb:431:in `socket'
C:/apps/Ruby25-x64/lib/ruby/gems/2.5.0/gems/excon-0.62.0/lib/excon/connection.rb:111:in `request_call'
C:/apps/Ruby25-x64/lib/ruby/gems/2.5.0/gems/excon-0.62.0/lib/excon/middlewares/base.rb:16:in `request_call'
C:/apps/Ruby25-x64/lib/ruby/gems/2.5.0/gems/excon-0.62.0/lib/excon/middlewares/mock.rb:48:in `request_call'
C:/apps/Ruby25-x64/lib/ruby/gems/2.5.0/gems/excon-0.62.0/lib/excon/middlewares/instrumentor.rb:26:in `request_call'
C:/apps/Ruby25-x64/lib/ruby/gems/2.5.0/gems/excon-0.62.0/lib/excon/middlewares/base.rb:16:in `request_call'
C:/apps/Ruby25-x64/lib/ruby/gems/2.5.0/gems/excon-0.62.0/lib/excon/middlewares/base.rb:16:in `request_call'
C:/apps/Ruby25-x64/lib/ruby/gems/2.5.0/gems/excon-0.62.0/lib/excon/middlewares/base.rb:16:in `request_call'
C:/apps/Ruby25-x64/lib/ruby/gems/2.5.0/gems/excon-0.62.0/lib/excon/middlewares/base.rb:16:in `request_call'
C:/apps/Ruby25-x64/lib/ruby/gems/2.5.0/gems/excon-0.62.0/lib/excon/connection.rb:260:in `request'
C:/apps/Ruby25-x64/lib/ruby/gems/2.5.0/gems/excon-0.62.0/lib/excon/middlewares/idempotent.rb:33:in `error_call'
C:/apps/Ruby25-x64/lib/ruby/gems/2.5.0/gems/excon-0.62.0/lib/excon/middlewares/base.rb:11:in `error_call'
C:/apps/Ruby25-x64/lib/ruby/gems/2.5.0/gems/excon-0.62.0/lib/excon/middlewares/base.rb:11:in `error_call'
C:/apps/Ruby25-x64/lib/ruby/gems/2.5.0/gems/excon-0.62.0/lib/excon/middlewares/base.rb:11:in `error_call'
C:/apps/Ruby25-x64/lib/ruby/gems/2.5.0/gems/excon-0.62.0/lib/excon/connection.rb:283:in `rescue in request'
C:/apps/Ruby25-x64/lib/ruby/gems/2.5.0/gems/excon-0.62.0/lib/excon/connection.rb:225:in `request'
C:/apps/Ruby25-x64/lib/ruby/gems/2.5.0/gems/excon-0.62.0/lib/excon/middlewares/idempotent.rb:33:in `error_call'
C:/apps/Ruby25-x64/lib/ruby/gems/2.5.0/gems/excon-0.62.0/lib/excon/middlewares/base.rb:11:in `error_call'
C:/apps/Ruby25-x64/lib/ruby/gems/2.5.0/gems/excon-0.62.0/lib/excon/middlewares/base.rb:11:in `error_call'
C:/apps/Ruby25-x64/lib/ruby/gems/2.5.0/gems/excon-0.62.0/lib/excon/middlewares/base.rb:11:in `error_call'
C:/apps/Ruby25-x64/lib/ruby/gems/2.5.0/gems/excon-0.62.0/lib/excon/connection.rb:283:in `rescue in request'
C:/apps/Ruby25-x64/lib/ruby/gems/2.5.0/gems/excon-0.62.0/lib/excon/connection.rb:225:in `request'
C:/apps/Ruby25-x64/lib/ruby/gems/2.5.0/gems/excon-0.62.0/lib/excon/middlewares/idempotent.rb:33:in `error_call'
C:/apps/Ruby25-x64/lib/ruby/gems/2.5.0/gems/excon-0.62.0/lib/excon/middlewares/base.rb:11:in `error_call'
C:/apps/Ruby25-x64/lib/ruby/gems/2.5.0/gems/excon-0.62.0/lib/excon/middlewares/base.rb:11:in `error_call'
C:/apps/Ruby25-x64/lib/ruby/gems/2.5.0/gems/excon-0.62.0/lib/excon/middlewares/base.rb:11:in `error_call'
C:/apps/Ruby25-x64/lib/ruby/gems/2.5.0/gems/excon-0.62.0/lib/excon/connection.rb:283:in `rescue in request'
C:/apps/Ruby25-x64/lib/ruby/gems/2.5.0/gems/excon-0.62.0/lib/excon/connection.rb:225:in `request'
C:/apps/Ruby25-x64/lib/ruby/gems/2.5.0/gems/docker-api-1.34.2/lib/docker/connection.rb:40:in `request'
C:/apps/Ruby25-x64/lib/ruby/gems/2.5.0/gems/docker-api-1.34.2/lib/docker/connection.rb:65:in `block (2 levels) in <class:Connection>'
C:/apps/Ruby25-x64/lib/ruby/gems/2.5.0/gems/docker-api-1.34.2/lib/docker.rb:109:in `version'
...
```
This is my ruby of code:

```ruby
require 'docker'

container = Docker::Container.get('ba8ef6fcdf01')
result = container.attach(:stream => true, :stdin => StringIO.new("console.log(' ->->-> 7 ~~')\n"), :stdout => true, :stderr => true, :logs => true, :tty => true)
p '-----------'
p result[0]
p '-----------'
p '>>>>> ', container.logs(stdout: true)
```


![90074f9e-b566-405d-9479-b7f7b1672881](https://user-images.githubusercontent.com/18432680/54989258-1cc79580-4ff3-11e9-8482-2d2f48e42a86.png)

My question is `container.logs(stdout: true)` can't take latest tty data 

Is there anyone willing to help me 😂


```
container = Docker::Container.create(Image: 'debian:latest', Cmd: ['sleep', 'infinity'])
container.start
container.exec(['sleep', 'infinity'], wait: 5)
# Docker::Error::TimeoutError (read timeout reached)

container.exec(['sleep', 'infinity'], wait: 5, stdin: StringIO.new('hello'))
# hangs

container.exec(['bash', '-c', 'cat; sleep infinity'], wait: 5, stdin: StringIO.new('hello'))
# hangs
```

Hijacking the Excon socket instead of the underlying socket gets the timeout to work again but I don't know if that would break anything else:

```
diff --git a/lib/docker/util.rb b/lib/docker/util.rb
index 2ca8dc6..432f26e 100644
--- a/lib/docker/util.rb
+++ b/lib/docker/util.rb
@@ -65,10 +65,10 @@ module Docker::Util
       debug "hijack: starting stdin copy thread"
       threads << Thread.start do
         debug "hijack: copying stdin => socket"
-        IO.copy_stream stdin, socket
+        socket.write stdin.read
 
         debug "hijack: closing write end of hijacked socket"
-        close_write(socket)
+        close_write(socket.instance_variable_get(:@socket))
       end
 
       debug "hijack: starting hijacked socket read thread"
@@ -76,7 +76,7 @@ module Docker::Util
         debug "hijack: reading from hijacked socket"
 
         begin
-          while chunk = socket.readpartial(512)
+          while chunk = socket.read(512)
             debug "hijack: got #{chunk.bytesize} bytes from hijacked socket"
             attach_block.call chunk, nil, nil
           end
diff --git a/lib/excon/middlewares/hijack.rb b/lib/excon/middlewares/hijack.rb
index 727cf29..b2b731c 100644
--- a/lib/excon/middlewares/hijack.rb
+++ b/lib/excon/middlewares/hijack.rb
@@ -39,7 +39,7 @@ module Excon
           datum[:response] = build_response(status, socket)
 
           Excon::Response.parse_headers(socket, datum)
-          datum[:hijack_block].call socket.instance_variable_get(:@socket)
+          datum[:hijack_block].call(socket)
         end
 
         @stack.response_call(datum)
~
````

I had an issue trying to build a project called pixelfed:

    require 'git'
    require 'docker'
    git = Git.clone('https://github.com/pixelfed/pixelfed', '.', :path => '/tmp/pxf')
    git.checkout('v0.7.6')
    Docker::Image.build_from_dir('/tmp/pxf')

This gave me the following:

    Docker::Error::ServerError (Cannot locate specified Dockerfile: Dockerfile)

However doing this manually on the command line works fine:

   git clone https://github.com/pixelfed/pixelfed
   git checkout v0.7.6
   docker build . -t pixelfed

At first I thought it was due to Dockerfile being a symbolic link, but after some debugging, it turns out in pixelfed, they keep their Dockerfiles in .dockerignore for some reason. This is probably not correct on their part, but I find it interesting the CLI tool still transmits everything in .dockerignore to the daemon itself (and the daemon then ignores those files in building/copying).

I found the issue where this support was added: https://github.com/swipely/docker-api/issues/313

I can see the advantage of doing this before sending the data to the Docker daemon, but this behavior doesn't match the docker CLI and should probably have a configuration setting to enable it or disable it. 

I'm not sure what the best/correct solution is, but if anyone else encounters this, here's a quick and dirty monkey patch:

```ruby
require ' docker'

module Docker::Util
  def self.remove_ignored_files!(directory, files)
    # Remove this function as it breaks compatiablity
    # with the docker CLI; discovered with Pixelfed
  end
end
```
Seems like the travis CI tests cover ruby >2.0:

```
spec.required_ruby_version = '>= 2.0'
```
Test on currently supported releases of Ruby

Signed-off-by: Tim Smith <tsmith@chef.io>
Always exclude Dockerfile and .dockerignore from being ignored.

https://docs.docker.com/engine/reference/builder/#dockerignore-file
> You can even use the .dockerignore file to exclude the Dockerfile and .dockerignore files.
> These files are still sent to the daemon because it needs them to do its job.
> But the ADD and COPY instructions do not copy them to the image.

resolves #484