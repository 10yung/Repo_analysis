**Describe the bug**
Rendering a variable size collection with `vg-for` shows the wrong number of elements when the size of the collection decreased after an update. 

**Software Versions**
Vugu version: v0.1.1-0.20191230174203-fe17e20eb6ce
Go version: go1.13.4 linux/amd64
Browser and version: Chrome, Version 79.0.3945.117 (Official Build) (64-bit)

**To Reproduce**
The .vugu file below illustrates the issue:

```
<div>
    <button @click='c.Make(2, event)'>Make 2</button>
    <button @click='c.Make(6, event)'>Make 6</button>

    <div vg-for='_,n := range c.Numbers' vg-key='n' >            
        <div vg-html='n'></div>        
    </div>
</div>

<script type="application/x-go">
import(
    "fmt"
    "log"    

    "github.com/vugu/vugu"
)

type Root struct {       
    Numbers []string `vugu:"data"`
}

func (c *Root) Make(cnt int, event *vugu.DOMEvent) {
        event.PreventDefault()	
	go func() {        
		ee := event.EventEnv()
		ee.Lock()
		defer ee.UnlockRender()

               log.Printf("show %d", cnt)
		c.Numbers = make([]string, cnt)
		for i := 0; i < cnt; i++ {
			c.Numbers[i] = fmt.Sprintf("Number %d", i+1)
		}
	}()
}
</script>
```

When clicking "Make 2", two items are shown.
When clicking "Make 6", six items are shown.
When clicking "Make 2" again, five items are shown.

**Expected behavior**
When clicking "Make 2", two items are shown.
When clicking "Make 6", six items are shown.
When clicking "Make 2" again, two items are shown.

**Describe the bug**
When switching back and forth between 'views' selected by using vg-if the DOM events of re-visited views won't fire anymore.

**Software Versions**
Vugu version: v0.1.1-0.20191230174203-fe17e20eb6ce
Go version: 1.13.5
Browser and version: 79.0.3945.88 (Official Build) (64-bit) (Linux)

**To Reproduce**
The .vugu file below illustrates the issue:
```
<html>
    <head>
        <title>Test page</title>
    </head>
    <body>
        <div>
            <label vg-html='c.text'></label>
            <div vg-if='c.ActiveView == "view1"'>
                <input type="text" @keyup="c.Update(event)"/>
                <h3>This is view1</h3>
                <button @mouseup='c.SwitchView(event, "view2")'>Switch</button>
            </div>
            <div vg-if='c.ActiveView == "view2"'>
                <input type="text" @keyup="c.Update(event)"/>
                <h3>This is view2</h3>
                <button @mouseup='c.SwitchView(event, "view1")'>Switch</button>
            </div>
        </div>
        
    </body>
</html>

<script type="application/x-go">

type Root struct {
    ActiveView string `vugu:"data"`
    text string
}

var CurrentView = "view1"

func (c *Root) BeforeBuild() {
    c.ActiveView = CurrentView
}

func (c *Root) SwitchView(event *vugu.DOMEvent, viewname string) {
    fmt.Println("switching to "+viewname)
    go func() {
        ee := event.EventEnv()
        ee.Lock()
        CurrentView = viewname
        c.text = ""
        ee.UnlockRender()
    }()
}

func (c *Root) Update(event *vugu.DOMEvent) {
    fmt.Println("updating")
    c.text = event.PropString("target", "value")
}

</script>

```
**Expected behavior**
I expected the DOM events attached to buttons and input box to continue working after switching back to a previously rendered 'view'.
It would be better practice to be able to instantiate components which have a New... method by calling that method. 

The main question is the syntax.  If we can come up with an appropriate syntax that isn't at odds with everything else and isn't too clumsy, this should be implemented.
In addition to https://github.com/vugu/vugu/issues/41 another round of size optimization should be done:

- **const folding** for strings (tag names and attributes) - there are a bunch of places tag names are used we should try to optimize that size (maybe the Vugu library could contain or have a sub package with all the tag names as consts and we use that to deduplicate (have to be careful about how this is done, test if folding the strings into one is better or if having each as a const allows the unused ones to be left out 
- **the difference between multiple similar tag constructions might be useful to compress** - most programs construct a lot of text nodes and simple tags - if these could be made into the most compact form possible (the binary representation i mean)
- **text compression** - depending on the size of the decoder it may or may not be smart to use a “slow” compression algorithm to compress this text - we’d need to analyze how much of it there is and how well it compresses - maybe not for tag names but for large blocks of text it could be useful
- **verify that there are not unused functions in the default Go binary.**  There shouldn't be, but this is worth double checking.
- **size analysis tool** to whatever extent is feasible - there is no way right now to tell what is causing the "bloat".
- **check out the Brotli compressor** (dev server and also easy serving separately static wasm binary pre-compressed with brotli).  I also didn't see a way to enable Brotli on Github Pages but it's probably worth the effort to host the wasm binary serving separately so we can get faster page loads for vugu.org, as well as provide an example of how this is can be done in production.
- **try to remove large packages from core Vugu** - `fmt` is a prime example, there may be others
- **provide a suggested simple logging mechanism that doesn't take up much space** - perhaps just telling people to `println` is fine, or maybe we need a `vlog` package with a `Print` method that doesn't incur a lot of the same overhead as the full log and fmt packages.
- **if we can compress or CDN or something the renderer-js-script.js** that is another 40k+ we can do something about.  What we have right now where we embed it in every executable is convenient but not particularly size efficient.  renderer-js-script-maker.go could also try using an "uglify" tool to reduce size that way (see https://github.com/tdewolff/minify#js)
For example , a new child component is needed for appending in root.vugu(parent component) . I see that "vg-if" can be used for visible or not , but that would occupy running resource  . Another case is to replace one child component with the other in parent component  to show a new page. 

Thanks .
**Describe the bug**
With the latest refactor, the stylesheets are added to the `<head>` element during a synchronization mechanism. This creates a quick flickering because the page is first rendered w/o the style applied, then re-rendered with it.

**Software Versions**
Vugu version: d1cd4bcee583c7d794f2d1278962e98662b39a6e
Go version: 1.13.5
Browser and version: Brave Version 1.0.0 Chromium: 78.0.3904.97 (Official Build) unknown (64-bit)

**To Reproduce**
Create a root.vugu with a big stylesheet (like https://cdn.jsdelivr.net/npm/bulma@0.8.0/css/bulma.min.css) and display it. 
```
<html>
  <head>
    <link rel="stylesheet" href="bulma.min.css">
  </head>
  <body>
      <p>TEST</p>
  </body>
</html>
```
You should see a quick flickering on the TEST text rendering.
 
**Expected behavior**
No flickering.

**Additional Notes**
If instead of a local file you use an URL, the flickering appears only the first time, but then it seems the browser cache is fast enough to erase it.



**Describe the bug**
Inside a loop, when using `value` or `key` variable inside a event attribute (like `@click`), the last value of `key/value` of the loop is always used, because they are not captured.

**Software Versions**
Vugu version: d1cd4bcee583c7d794f2d1278962e98662b39a6e
Go version: 1.13.5
Browser and version: Brave Version 1.0.0 Chromium: 78.0.3904.97 (Official Build) unknown (64-bit)

**To Reproduce**
A PR will follow with a failing test case.

**Expected behavior**
`key/value` inside event attribute should keep their value at the moment they are used.

**Additional Notes**
There's a TODO for that, but I have no idea on how to achieve that properly :
https://github.com/vugu/vugu/blob/master/gen/parser-go.go#L794

The sample (wasm-test-suite/test-003-prop) is very helpful .
A child component can let me get its value by  
event.PropString("target", "value")
in the child component event's code .

If the component has no event , how can I get its value ?
And how can I pass the component value to its root(parent) component ?

Thanks for any information .
Good job . Thanks .
Any plan about  updating documents ?
https://github.com/vugu/vugu/wiki/Refactor-Notes---Sep-2019

Q1:
JS Property Assignment Syntax
Example:
<input type="checkbox" .checked="false"/>

Should  "/" before ">"  be deleted ? 
I means no closed label "/" is needed for "input" html element .
 Errors still appear after I run "go run" and access it by browser ,even if I delete the above "/" .

Q2:
New and Improved DOM Event Handling
Example:
<input type="text" @ changed="c.HandleChanged(event)">

This is really cool for having resolved my prior question partly at #65 .
In my opinion , Vugu Event "@ click" stands for JS Event "onclick" , so  JS Event "onchange" should be written as "@ change" in Vugu file. Your sample code defined unknown JS Event "onchanged" and "event.PropString" returned nothing.

New updated documents are expected eagerly .
Thanks .  Good job !