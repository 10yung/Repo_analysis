__LP64__ is not defined default when build for armv7. line 89 causes a error. It might be `#ifdef __LP64__` instead of `#if __LP64__`

```objc
@implementation UIViewController (Hook1)
+(void)load {
    struct rebinding _request_binding = { "CFReadStreamCreateForHTTPRequest", wt_CFReadStreamCreateForHTTPRequest, (void *)&original_CFReadStreamCreateForHTTPRequest};

    struct rebinding rebs[]={_request_binding};
    rebind_symbols(rebs, 1);
}

static CFReadStreamRef
wt_CFReadStreamCreateForHTTPRequest(CFAllocatorRef __nullable alloc, CFHTTPMessageRef request);
CFReadStreamRef wt_CFReadStreamCreateForHTTPRequest(CFAllocatorRef __nullable alloc, CFHTTPMessageRef request) {
    
    NSURL *url = (__bridge NSURL *)CFHTTPMessageCopyRequestURL(request);
    NSString *method = (__bridge NSString *)CFHTTPMessageCopyRequestMethod(request);
    
    CFReadStreamRef readStream = original_CFReadStreamCreateForHTTPRequest(alloc, request);
    
    return readStream;
}

static CFReadStreamRef (*original_CFReadStreamCreateForHTTPRequest)(CFAllocatorRef, CFHTTPMessageRef);
@end
```
This's my code, bind CFNetwork `CFReadStreamCreateForHttpRequest` function, I want monitoring network status, but, i don't recive result in `wt_CFReadStreamCreateForHTTPRequest` function, please help me, thanks
CIFilter <CIQRCodeGenerator>* qrFilter = [CIFilter QRCodeGenerator];  Thread 1: EXC_BAD_ACCESS (code=2, address=0x1287b4390)


rebind_symbols_for_image(_rebindings_head, header, slide);   Thread 1: EXC_BAD_ACCESS (code=2, address=0x1287b4390)


 rcd_perform_rebinding_with_section(rebindings, sect, slide, symtab, strtab, indirect_symtab); Thread 1: EXC_BAD_ACCESS (code=2, address=0x1287b4390)


symtab_cmd.symoff is relative to linkedit_segment.fileoff, so the computation should reflect the relationship, it's more instinctive and easy to understand.
I try to hook malloc_zone_malloc, but I get crash.Why?


void *my_malloc_zone_malloc(malloc_zone_t *zone, size_t size){
    printf("Calling real malloc( %zu)\n", size);
    return malloc_zone_malloc(zone, size);
}

void my_malloc_zone_free(malloc_zone_t *zone, void *ptr){
    printf("Calling real free( %zu)\n",malloc_size(ptr));
    
    return malloc_zone_free(zone, ptr);
}

rebind_symbols((struct rebinding[2]){{"malloc_zone_malloc", my_malloc_zone_malloc,(void*)&malloc_zone_malloc}, {"malloc_zone_free", my_malloc_zone_free,(void*)&malloc_zone_free}}, 2);
```objective-c
static int (*orig_strlen)(const char *__s);
int my_strlen(const char *__s) {
    printf("===\n");
    return orig_strlen(__s);
} 

int main(int argc, const char * argv[]) {
    @autoreleasepool {
        strlen("s"); // 1
        struct rebinding strlen_rebinding = { "strlen", my_strlen,
            (void *)&orig_strlen };
        
        rebind_symbols((struct rebinding[1]){ strlen_rebinding }, 1);
        
        char *str = "HelloWorld";
        
        strlen(str);
}
```

hello : 
I think the old method (`strlen("s")`) should be called before calling the `rebind_symbols` method to ensure that lazy bind is already the real address, right?
# What crash

When I hook fonction `object_setClass`, then call `object_setClass`, it works. but when I call `[NSString stringWithFormat:@"%@", @""];`, It crash.

# Demo code

```c

#import <UIKit/UIKit.h>
#import "fishhook.h"
#import <objc/runtime.h>

Class _Nullable
(*orig_object_setClass)(id _Nullable obj, Class _Nonnull cls);

Class _Nullable
my_object_setClass(id _Nullable obj, Class _Nonnull cls)
{
    return orig_object_setClass(obj, cls);
}


int main(int argc, char * argv[]) {
    @autoreleasepool {
        rebind_symbols((struct rebinding[]){
            {"object_setClass", my_object_setClass, (void *)&orig_object_setClass}
        }, 1);
        
        object_setClass(@"", NSObject.class);
        
        [NSString stringWithFormat:@"%@", @""];
        
        return 0;
    }
}

```
Version less than 11.3 is valid
I hook socket relevant c function in my project, like getaddrinfo,connect,socket and so on. When I open address sanitizer for debug I found some error like this:
![image](https://user-images.githubusercontent.com/9973076/31976212-bc3c55dc-b8fb-11e7-99b8-af82ecacaf78.png)
It seems that both address sanitizer and fishhook hooked getaddrinfo() , and result in a conflict.

The following WWDC video said sanitizer hook standard c library.
reference: https://developer.apple.com/videos/play/wwdc2015/413/