Currently, Octant is invoked from the command line. To extend the reach of the project, Octant will be converted to an application.

This Epic will track the process of this conversion
If metrics server is installed while Octant is viewing workloads, it will error during the content generation proceeds until metrics are created for pods.

Error message looks like this:

```
2020-01-17T19:29:06.130-0500    ERROR   api/content_manager.go:103      generate content        {"client-id": "fde0caf4-3987-11ea-8d88-e450ebbc2e8c", "err": "generate content: collect workload cards: load workloads: get metrics for pod 'example-75778c488-655sb': get pod metrics: get pod metrics: podmetrics.metrics.k8s.io \"default/example-75778c488-655sb\" not found", "content-path": "workloads/namespace/default"}
github.com/vmware-tanzu/octant/internal/api.(*ContentManager).runUpdate.func1
        /Users/bryan/Development/projects/octant/internal/api/content_manager.go:103
github.com/vmware-tanzu/octant/internal/api.(*job).run.func1
        /Users/bryan/Development/projects/octant/internal/api/poller.go:111
```
* When viewing a CRD, show all versions and the custom resources if they exist
* Update URL to custom resources to include the version
* Show custom resource version in titles

Signed-off-by: bryanl <bryanliles@gmail.com>
CRDs with multiple versions have ambiguous paths. Create
a way to differentiate those paths.
Following the instructions in https://github.com/vmware-tanzu/octant/blob/master/HACKING.md yields an error from the go run build.go ci-quick command:
```
npm ERR! errno 130
npm ERR! @angular/cli@8.3.4 postinstall: `node ./bin/postinstall/script.js`
npm ERR! Exit status 130
npm ERR!
npm ERR! Failed at the @angular/cli@8.3.4 postinstall script.
npm ERR! This is probably not a problem with npm. There is likely additional logging output above.

npm ERR! A complete log of this run can be found in:
npm ERR!     /root/.npm/_logs/2020-01-17T19_52_39_751Z-debug.log
2020/01/17 19:52:39 web-deps: exit status 130
exit status 1
```
A quick look at the logs reveals this:
```
8560 verbose linkBins [ { ng: './bin/ng' },
8560 verbose linkBins   '/root/octant/web/node_modules/.bin',
8560 verbose linkBins   false ]
8561 info lifecycle @angular/cli@8.3.4~install: @angular/cli@8.3.4
8562 info lifecycle @angular/cli@8.3.4~postinstall: @angular/cli@8.3.4
8563 verbose lifecycle @angular/cli@8.3.4~postinstall: unsafe-perm in lifecycle false
8564 verbose lifecycle @angular/cli@8.3.4~postinstall: PATH: /usr/local/lib/node_modules/npm/node_modules/npm-lifecycle/node-gyp-bin:/root/octant/web/node_modules/@angular/cli/node_
modules/.bin:/root/octant/web/node_modules/.bin:/root/go/bin:/usr/lib/go-1.13/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin:
:/bin
8565 verbose lifecycle @angular/cli@8.3.4~postinstall: CWD: /root/octant/web/node_modules/@angular/cli
8566 silly lifecycle @angular/cli@8.3.4~postinstall: Args: [ '-c', 'node ./bin/postinstall/script.js' ]
8567 silly lifecycle @angular/cli@8.3.4~postinstall: Returned: code: 130  signal: null
8568 info lifecycle @angular/cli@8.3.4~postinstall: Failed to exec postinstall script
8569 verbose teardown shutting down workers.
8570 info teardown Done in 0.001s
8571 verbose stack Error: @angular/cli@8.3.4 postinstall: `node ./bin/postinstall/script.js`
8571 verbose stack Exit status 130
8571 verbose stack     at EventEmitter.<anonymous> (/usr/local/lib/node_modules/npm/node_modules/npm-lifecycle/index.js:301:16)
8571 verbose stack     at EventEmitter.emit (events.js:189:13)
8571 verbose stack     at ChildProcess.<anonymous> (/usr/local/lib/node_modules/npm/node_modules/npm-lifecycle/lib/spawn.js:55:14)
8571 verbose stack     at ChildProcess.emit (events.js:189:13)
8571 verbose stack     at maybeClose (internal/child_process.js:970:16)
8571 verbose stack     at Process.ChildProcess._handle.onexit (internal/child_process.js:259:5)
8572 verbose pkgid @angular/cli@8.3.4
8573 verbose cwd /root/octant/web
8574 verbose Linux 4.15.0-74-generic
8575 verbose argv "/usr/local/bin/node" "/usr/local/bin/npm" "ci"
8576 verbose node v10.15.3
8577 verbose npm  v6.4.1
8578 error code ELIFECYCLE
8579 error errno 130
8580 error @angular/cli@8.3.4 postinstall: `node ./bin/postinstall/script.js`
8580 error Exit status 130
8581 error Failed at the @angular/cli@8.3.4 postinstall script.
8581 error This is probably not a problem with npm. There is likely additional logging output above.
8582 verbose exit [ 130, true ]
```
This is on ubunut 18.04 running node 10.15.3 and npm 6.4.1

I was able to work around this by following these steps suggested by @GarySmith :
cd web
npm install
npm run build
cd .. 
go generate ./web
go run build.go build

Also the https://github.com/vmware-tanzu/octant/blob/master/web/README.md has build instructions that include using a make from the top level dir, I don't believe a makefile exists at this level.

The resource viewer explicitly bails when an object has
more than one owner reference. I'm not sure why it 
someone would do this, but we should handle the case
gracefully. 

Example: 

```yaml
---
apiVersion: v1
kind: Service
metadata:
  creationTimestamp: "2020-01-15T13:49:15Z"
  name: v1-packages-operators-coreos-com
  namespace: olm
  ownerReferences:
  - apiVersion: operators.coreos.com/v1alpha1
    blockOwnerDeletion: false
    controller: false
    kind: ClusterServiceVersion
    name: packageserver
    uid: e2bdc207-8f58-4ef8-afe4-212704dbe060
  - apiVersion: operators.coreos.com/v1alpha1
    blockOwnerDeletion: false
    controller: false
    kind: ClusterServiceVersion
    name: packageserver
    uid: e2bdc207-8f58-4ef8-afe4-212704dbe060
  resourceVersion: "201176"
  selfLink: /api/v1/namespaces/olm/services/v1-packages-operators-coreos-com
  uid: 7a1f2c82-e2ae-4adb-a10d-dee40c8a76ae
spec:
  clusterIP: 10.96.68.225
  ports:
  - port: 443
    protocol: TCP
    targetPort: 5443
  selector:
    app: packageserver
  sessionAffinity: None
  type: ClusterIP
status:
  loadBalancer: {}
```

In this case, there are multiple owner references to the same object. 
Most likely this is a bug in the controller, but it should still
not make Octant upset.
My plugin is generating the following error message in the console the first time that the user navigates to the plugin in the UI when the `Get` function in the dashboard client is executed:

`grpc: server failed to encode response:  rpc error: code = Internal desc = grpc: error while marshaling: proto: Marshal called with nil`

and after the first time navigating there, every invocation of the function works flawlessly. To reproduce the error:

1. modify the sample plugin in the octant source code, so that its handleNavigation and initRoutes functions (in main.go) are replaced with:

```
func handleNavigation(request *service.NavigationRequest) (navigation.Navigation, error) {
        return navigation.Navigation{
                Title:    "Sample Plugin",
                Path:     request.GeneratePath(),
                IconName: "cloud",
        }, nil
}

func initRoutes(router *service.Router) {
        router.HandleFunc("*", func(request *service.Request) (component.ContentResponse, error) {
                contentResponse := component.NewContentResponse(component.TitleFromString("Example"))

                ctx := request.Context()
                client := request.DashboardClient()
                key := store.Key{APIVersion: "apps/v1", Kind: "Deployment", Namespace: "argo", Name: "argo-ui"}

                _, _, err := client.Get(ctx, key)
                if err != nil {
                        contentResponse.Add(component.NewText("Failed"))
                } else {
                        contentResponse.Add(component.NewText("Success"))
                }
                return *contentResponse, nil
        })
}
```
2. Install argo with the two commands listed at https://github.com/argoproj/argo . (This is needed since the `Get` is trying to fetch the argo deployment)
3. Compile octant, install the plugin, and Launch octant
4. When you navigate to the Sample plugin you will see the error in the console. "Success" is displayed in the UI, indicating that things are fine. Navigate around and notice that the console error does not appear again.
The metadata card should be a tab.
currently we just have delete for nodes, we should have proper action representations for nodes
# Preamble

Thank you so much for this wonderful project :) it saved my life today when navigating a sea of CRDs.. Here's the first issue i found ... im sure more to come.  Happy to contribute a fix but time is limited for me as im commited to other things for my day job. 

# what was expected 

Assuming arbitrarily long CRDs would be viewable/copyable from the octant sidebar.

# what was observed 

CRDs w longer then 32 characters are not viewable in octant's sidebar, making exploring a complex cluster w/ lots of CRDs a little tricky

# Deets 
In the UI, If you have long CRDs, like .
 
```
bgpconfigurations.crd.projectcalico.org                   2020-01-13T22:26:38Z
bgppeers.crd.projectcalico.org                            2020-01-13T22:26:37Z
blockaffinities.crd.projectcalico.org                     2020-01-13T22:26:37Z
clusterinformations.crd.projectcalico.org                 2020-01-13T22:26:38Z
clusters.cluster.x-k8s.io                                 2020-01-13T22:26:42Z
felixconfigurations.crd.projectcalico.org                 2020-01-13T22:26:37Z
globalnetworkpolicies.crd.projectcalico.org               2020-01-13T22:26:39Z
globalnetworksets.crd.projectcalico.org                   2020-01-13T22:26:39Z
hostendpoints.crd.projectcalico.org                       2020-01-13T22:26:38Z
ipamblocks.crd.projectcalico.org                          2020-01-13T22:26:37Z
ipamconfigs.crd.projectcalico.org                         2020-01-13T22:26:37Z
ipamhandles.crd.projectcalico.org                         2020-01-13T22:26:37Z
kubeadmconfigs.bootstrap.cluster.x-k8s.io                 2020-01-13T22:26:43Z
kubeadmconfigtemplates.bootstrap.cluster.x-k8s.io         2020-01-13T22:26:43Z
machinedeployments.cluster.x-k8s.io                       2020-01-13T22:26:43Z
machines.cluster.x-k8s.io                                 2020-01-13T22:26:44Z
networkpolicies.crd.projectcalico.org                     2020-01-13T22:26:39Z
vsphereclusters.infrastructure.cluster.x-k8s.io           2020-01-13T22:26:44Z
vspheremachines.infrastructure.cluster.x-k8s.io           2020-01-13T22:26:44Z
vspheremachinetemplates.infrastructure.cluster.x-k8s.io   2020-01-13T22:26:45Z
```

Then you can't see them in the side bar.  It looks like 32 characters is the limit for the sidebar.  Can we make it resizable ? 
## Examples of CRD's that work ok 

```
ippools.crd.projectcalico.org  (31 chars)                           2020-01-13T22:26:38Z
machinesets.cluster.x-k8s.io (32 chars)                              2020-01-13T22:26:44Z
```
