I'm getting a null reference exception from Zeroformatter, I can not find why is this happening.
I'm just trying to read an object from MongoDb which has a ZeroFormattable attribute. It has nothing to do with MongoDB, I'm just using Zeroformatter for other purposes (caching in Redis).

Dotnet core 2.2
Zeroformatter 1.6.4
On Linux Docker image

Here is the error log:
```
System.NullReferenceException

Object reference not set to an instance of an object.

System.NullReferenceException: Object reference not set to an instance of an object.
   at ZeroFormatter.DynamicObjectSegments.ZeroFormatter_Formatters_DefaultResolver.GameServer.Models.User.set_Id(String )
   at MongoDB.Bson.Serialization.BsonClassMapSerializer`1.DeserializeClass(BsonDeserializationContext context)
   at MongoDB.Bson.Serialization.BsonClassMapSerializer`1.Deserialize(BsonDeserializationContext context, BsonDeserializationArgs args)
   at MongoDB.Bson.Serialization.Serializers.SerializerBase`1.MongoDB.Bson.Serialization.IBsonSerializer.Deserialize(BsonDeserializationContext context, BsonDeserializationArgs args)
   at MongoDB.Bson.Serialization.IBsonSerializerExtensions.Deserialize(IBsonSerializer serializer, BsonDeserializationContext context)
   at MongoDB.Bson.Serialization.BsonClassMapSerializer`1.Deserialize(BsonDeserializationContext context, BsonDeserializationArgs args)
   at MongoDB.Bson.Serialization.IBsonSerializerExtensions.Deserialize[TValue](IBsonSerializer`1 serializer, BsonDeserializationContext context)
   at MongoDB.Driver.Core.Operations.CursorBatchDeserializationHelper.DeserializeBatch[TDocument](RawBsonArray batch, IBsonSerializer`1 documentSerializer, MessageEncoderSettings messageEncoderSettings)
   at MongoDB.Driver.Core.Operations.FindCommandOperation`1.CreateCursorBatch(BsonDocument commandResult)
   at MongoDB.Driver.Core.Operations.FindCommandOperation`1.CreateCursor(IChannelSourceHandle channelSource, BsonDocument commandResult)
   at MongoDB.Driver.Core.Operations.FindCommandOperation`1.ExecuteAsync(RetryableReadContext context, CancellationToken cancellationToken)
   at MongoDB.Driver.Core.Operations.FindOperation`1.ExecuteAsync(RetryableReadContext context, CancellationToken cancellationToken)
   at MongoDB.Driver.Core.Operations.FindOperation`1.ExecuteAsync(IReadBinding binding, CancellationToken cancellationToken)
   at MongoDB.Driver.OperationExecutor.ExecuteReadOperationAsync[TResult](IReadBinding binding, IReadOperation`1 operation, CancellationToken cancellationToken)
   at MongoDB.Driver.MongoCollectionImpl`1.ExecuteReadOperationAsync[TResult](IClientSessionHandle session, IReadOperation`1 operation, ReadPreference readPreference, CancellationToken cancellationToken)
   at MongoDB.Driver.MongoCollectionImpl`1.UsingImplicitSessionAsync[TResult](Func`2 funcAsync, CancellationToken cancellationToken)
   at GameServer.Services.LeaderboardService.SaveScoreToLeaderboards(Game game)
```

The User Model is This:
```
    [BsonDiscriminator("MyUser")]
    [ZeroFormattable]
    public class User
    {
        [Index(0)]
        [BsonId]
        [BsonRepresentation(BsonType.ObjectId)]
        public virtual string Id { get; set; }
        [Index(1)]
        public virtual string Username { get; set; }
        [Index(2)]
        public virtual string ActiveDeviceId { get; set; }
        [Index(3)]
        public virtual string Email { get; set; }
        [Index(4)]
        public virtual int Coin { get; set; }
        [Index(5)]
        public virtual int Gem { get; set; }
        [Index(6)]
        public virtual int Cup { get; set; } = -1;
        [Index(7)]
        public virtual int Ticket { get; set; }
        [Index(8)]
        public virtual int GoldenTicket { get; set; }
        [Index(9)]
        public virtual int Level { get; set; }
        [Index(10)]
        public virtual int XP { get; set; }
        [Index(11)]
        public virtual string ActiveKitchen { get; set; }
        [Index(12)]
        public virtual int ActiveKitchenMission { get; set; } = 0;
        [Index(13)]
        public virtual Dictionary<string, Kitchen> UserKitchens { get; set; } = new Dictionary<string, Kitchen>();
        [Index(14)]
        public virtual DateTime CreatedAt { get; set; }
        [Index(15)]
        public virtual DateTime UpdatedAt { get; set; }
        [Index(16)]
        public virtual int GasCapsules { get; set; }
        [Index(17)]
        public virtual List<KitchenInventoryItem> KitchenInventory { get; set; } = new List<KitchenInventoryItem>();
        [Index(18)]
        public virtual List<Friend> FriendsList { get; set; }
        [Index(19)]
        public virtual List<FriendRequest> FriendRequestsReceived { get; set; }
        [Index(20)]
        public virtual UserClan Clan { get; set; }
        [Index(21)]
        public virtual string ProfilePic { get; set; }
        [Index(22)]
        public virtual List<UserPowerup> Powerups { get; set; } = new List<UserPowerup>();
        [Index(23)]
        public virtual UserDaubChest DaubChest { get; set; }
        [Index(24)]
        public virtual int LastSuccessDaubChest { get; set; }
    }
```
Hi,

first of all, thanks for MsgPack and ZeroFormatter. 

today I tested ZeroFormatter to serialize a dictionary and write the array to a file. 
First tested it with a small set and all worked fine. Was able to serialize to binary and save to a file, read the file en deserialize back to the dict. All great.

But now that I want to process the actual dataset, the serializer takes like forever. The dictionary contains about 4.5 million rows with key and value being a custom class.

Is there a limit to the amount of rows for a dictionary to work smoothly?

here a sample of my code:

```
        public void ZeroFormatterSerializeToFile()
        {
            try
            {
                if(MsgEvent != null)
                    MsgEvent.Invoke(this, MethodBase.GetCurrentMethod().Name + " Start serializing");

                var bytes = ZeroFormatterSerializer.Serialize(dict);

                if(MsgEvent != null)
                    MsgEvent.Invoke(this, MethodBase.GetCurrentMethod().Name + " Serializing done. Start write to file");

                File.WriteAllBytes(_serializeFileName ?? "ZF_" + _defaultFileName, bytes);

                if(MsgEvent != null)
                    MsgEvent.Invoke(this, MethodBase.GetCurrentMethod().Name + " End write to file");
            }
            catch(Exception ex)
            {
                ex = ex;
                throw ex;
            }
        }
```

It's taking over 20 minutes now and counting :-( (in release by the way)
Thanks,

Matthijs

Processor	Intel(R) Core(TM) i7-3930K CPU @ 3.20GHz, 3201 Mhz, 6 Core(s), 12 Logical Processor(s)
Installed Physical Memory (RAM)	32.0 GB
OS Name	Microsoft Windows 10 Pro
.Net 4.8


# Steps to reproduce this issue
### 1. Write code
```cs
// Program.cs
using System;
using ZeroFormatter;

namespace ZeroFormatterTest
{
  [ZeroFormattable]
  public class MyClass
  {
    [Index(0)]
    public virtual int Age { get; set; }
  }

  class Program
  {
    static void Main(string[] args)
    {
      var mc = new MyClass { Age = 1 };
      ZeroFormatterSerializer.Serialize(mc);
    }
  }
}
```

### 2. Execute
```txt
Unhandled exception. System.BadImageFormatException: Bad IL format.
  at ZeroFormatter.DynamicObjectSegments.ZeroFormatter_Formatters_DefaultResolver.ZeroFormatterTest.MyClass$Formatter.Serialize(Byte[]& , Int32 , MyClass )
  at ZeroFormatter.ZeroFormatterSerializer.CustomSerializer`1.Serialize[T](Byte[]& buffer, Int32 offset, T obj)
  at ZeroFormatter.ZeroFormatterSerializer.CustomSerializer`1.Serialize[T](T obj)
  at ZeroFormatter.ZeroFormatterSerializer.Serialize[T](T obj)
  at ZeroFormatterTest.Program.Main(String[] args) in C:\Programs\VC\ZeroFormatterTest\ZeroFormatterTest\Program.cs:line 20
```

### Possible solution
- use `.NET Core 2.2`, instead of `.NET Core 3.0`

# Environment
- Windows 10 64bit 1903 (Build 18362.30)
- .NET Core 3.0.100
- ZeroFormatter 1.6.4
- Visual Studio Community 2019
I came across this library when looking for a way to do something like so..
`buffer.Write<T>(T data)`
'buffer.Read<T>()'

does this library support this and if not can it be added?
Fix ImmutableList<T> deserialize example: now byteSize is updated.
I get the error below when deserializing on android . The code is in a net standard 2 library, the file deserilaizes fine in a net core unit test runner.

The data type is:
`
Dictionary<int, Dictionary<string, Dictionary<string, SimpleObject>>>`

```
Unhandled Exception:

System.TypeInitializationException: The type initializer for 'ZeroFormatter.Comparers.ZeroFormatterEqualityComparer`1' threw an exception. occurred


at ZeroFormatter.Formatters.DictionaryFormatter`3[TTypeResolver,TKey,TValue].Deserialize (System.Byte[]& bytes, System.Int32 offset, ZeroFormatter.DirtyTracker tracker, System.Int32& byteSize) [0x00025] in <be1feee373484d2195f08309177a3679>:0 
  at ZeroFormatter.ZeroFormatterSerializer+CustomSerializer`1[TTypeResolver].Deserialize[T] (System.Byte[] bytes) [0x00034] in <be1feee373484d2195f08309177a3679>:0 
  at ZeroFormatter.ZeroFormatterSerializer.Deserialize[T] (System.Byte[] bytes) [0x00000] in <be1feee373484d2195f08309177a3679>:0 
```

Any ideas what could be wrong?

Hello, I want to choose a suitable serialization and deserialization library for the data table reading function in the Unity mobile game project. Which one do you recommend? @neuecc 
I use your assembly in my signing assembly. But I have a problem with your strong name. Can sign an assembly, please?
There were no activity for a few years and a lot of open issues/pull requests. Does it have any future? It is quite promising so I wonder if the author can add more maintainers to the project who are interested and can improve this lovely serializer.