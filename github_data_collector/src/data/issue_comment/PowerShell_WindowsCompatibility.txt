There seems to be an issue when attempting to import the module as a part of a users profile. In my profile I determine which version of PowerShell I'm using and the platform. If its Core edition on Windows, install the module, if its not found, and then immediately import it. After the install (successful), immediately on the import, I get the following error:
![image](https://user-images.githubusercontent.com/925581/65819381-6c289180-e1e1-11e9-9275-0845dbea8a6b.png)

Regardless of attempts to suppress the error ('-ErrorAction SilentlyContinue', assignment to $null, or pipe to Out-Null), the error persists. I can, however, immediately import the module without issue once I get the prompt. 

For your information:
```[MICHEAL-PC] C:\
PS > $PSVersionTable                                                                                                    
Name                           Value
----                           -----
PSVersion                      6.2.3
PSEdition                      Core
GitCommitId                    6.2.3
OS                             Microsoft Windows 10.0.18362
Platform                       Win32NT
PSCompatibleVersions           {1.0, 2.0, 3.0, 4.0…}
PSRemotingProtocolVersion      2.3
SerializationVersion           1.1.0.1
WSManStackVersion              3.0
```
Using the IIS WebAdministration module with WIndowsCompatibilty does not load the IIS: provider. into a PowerShell 7 session.

To reproduce:
1. Install Web-Server 
2. Using WInCompat: Load-WinModule -Name WebAdminstration
3. Do: DIR IIS:\ and you get the error.

If I try to install the docker package I get an error, even using WInCompat:
```powershell
PS C:\Foo> Install-package -Name Docker -ProviderName DOckerMSFTProvider -Force
Install-package : The term 'Get-WindowsFeature' is not recognized as the name of a cmdlet, function, script file, or operable program.
Check the spelling of the name, or if a path was included, verify that the path is correct and try again.
At line:1 char:1
+ Install-package -name Docker -providername DOckerMSFTProvider -Force
+ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
+ CategoryInfo          : InvalidOperation: (Microsoft.PowerShel…lets.InstallPackage:InstallPackage) [Install-Package], Exception
+ FullyQualifiedErrorId : FailedToDownload,Install-Package,Microsoft.PowerShell.PackageManagement.Cmdlets.InstallPackage
```

The Get-WindowsFeature command does indeed exist.
The best practices module, a standard module in WIndows can not be loaded by PowerShell 7 as it's not based (yet) on  .NET Core. However, it also does not load with WIndows Compatibility module:
```powershell
PS [C:\foo> ]> import-winmodule bestpractices
Import-Module : Failed to generate proxies for remote module 'BestPractices'. Running the Get-FormatData command in a remote session reported the following error: Unable to cast object of type 'Microsoft.PowerShell.Commands.Internal.Format.ControlReference' to type 'Microsoft.PowerShell.Commands.Internal.Format.ComplexControlBody'..
At C:\Program Files\PowerShell\Modules\WindowsCompatibility\1.0.0\WindowsCompatibility.psm1:531 char:13
+             Import-Module  -Name $ImportNames -NoClobber:$NoClobber @ ...
+             ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
+ CategoryInfo          : NotSpecified: (:) [Import-Module], InvalidOperationException
+ FullyQualifiedErrorId : CmdletInvocationException,Microsoft.PowerShell.Commands.ImportModuleCommand
```

Installed WindowsCompatibility module and imported PKI module.

Created certificate as follows:
`$cert = New-SelfSignedCertificate -Subject 'test' -KeyExportPolicy Exportable -CertStoreLocation Cert:\CurrentUser\My
`

When exporting (and yes $pw is a securestring) I get an error that the key is not exportable:
`Export-PfxCertificate -Cert $cert -Password $pw -FilePath c:\temp\test.pfx
Cannot export non-exportable private key.
+ CategoryInfo          : NotSpecified: (:) [Export-PfxCertificate], Win32Exception
+ FullyQualifiedErrorId : System.ComponentModel.Win32Exception,Microsoft.CertificateServices.Commands.ExportPfxCertificate
+ PSComputerName        : localhost
`

If I retrieve the cert by thumbprint in PS 5 and then export, it works fine:
`$cert = ls 'Cert:\CurrentUser\My\FD5D219C9245E09C4EFA72110E6C03997C3CDC76'
Export-PfxCertificate -Cert $cert -Password $pw -FilePath c:\temp\test.pfx


    Directory: C:\temp


Mode                LastWriteTime         Length Name
----                -------------         ------ ----
-a----        8/21/2019  11:53 AM           2630 test.pfx
`

Any help would be appreciated!

Maybe not the best fix, but it helps to use it with Visual Studio Code
Using WIndows Server 2019 1903 and PowerShell Core 6.2.1

Cannot load the ADDSDeploymeht module which means I cannot use the Install-ADDSForest and other cmdlets from that module.

If I try to import the module, I see this:

```powershell
PS C:\Foo> Import-Module ADDSDeployment -verbose
VERBOSE: Loading module from path 'C:\Windows\system32\WindowsPowerShell\v1.0\Modules\ADDSDeployment\ADDSDeployment.psd1'.
VERBOSE: Loading 'Assembly' from path 'C:\Windows\Microsoft.NET\assembly\GAC_MSIL\Microsoft.DirectoryServices.Deployment\v4.0_10.0.0.0__31bf3856ad364e35\Microsoft.DirectoryServices.Deployment.dll'.
VERBOSE: Loading 'Executable' from path 'C:\Windows\Microsoft.NET\assembly\GAC_MSIL\Microsoft.DirectoryServices.Deployment\v4.0_10.0.0.0__31bf3856ad364e35\Microsoft.DirectoryServices.Deployment.dll'.
VERBOSE: Loading 'Assembly' from path 'C:\Windows\Microsoft.NET\assembly\GAC_MSIL\Microsoft.ADRoles.Deployment.Common\v4.0_10.0.0.0__31bf3856ad364e35\Microsoft.ADRoles.Deployment.Common.dll'.
VERBOSE: Loading 'Executable' from path 'C:\Windows\Microsoft.NET\assembly\GAC_MSIL\Microsoft.ADRoles.Deployment.Common\v4.0_10.0.0.0__31bf3856ad364e35\Microsoft.ADRoles.Deployment.Common.dll'.
VERBOSE: Loading 'Assembly' from path 'C:\Windows\Microsoft.NET\assembly\GAC_MSIL\Microsoft.DirectoryServices.Deployment.Types\v4.0_10.0.0.0__31bf3856ad364e35\Microsoft.DirectoryServices.Deployment.Types.dll'.0__31bf3856ad364e35\Microsoft.DirectoryServices.Deployment.Types.dll'.                                                                     0.0__31bf3856ad364e35\Microsoft.DirectoryServices.Deployment.Types.dll'.
VERBOSE: Loading 'Executable' from path 'C:\Windows\Microsoft.NET\assembly\GAC_MSIL\Microsoft.DirectoryServices.Deployment.Types\v4.0_10.0.erShell edition 'Core'. Its supported editions are 'Desktop'. Use 'Import-Modul0.0__31bf3856ad364e35\Microsoft.DirectoryServices.Deployment.Types.dll'.
Import-Module : Module 'C:\Windows\system32\WindowsPowerShell\v1.0\Modules\ADDSDeployment\ADDSDeployment.psd1' does not support current PowerShell edition 'Core'. Its supported editions are 'Desktop'. Use 'Import-Module -SkipEditionCheck' to ignore the compatibility of this module.
At line:1 char:1                                                                                                                           tion
+ Import-Module ADDSDeployment -verbose
+ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
+ CategoryInfo          : ResourceUnavailable: (C:\Windows\system32\u2026ADDSDeployment.psd1:String) [Import-Module], InvalidOperationExcep
```

If I use the -SkipEditionCheck, I See this:

```powershell
PS C:\Foo> Import-Module ADDSDeployment -verbose -SkipEditionCheck
VERBOSE: Loading module from path 'C:\Windows\system32\WindowsPowerShell\v1.0\Modules\ADDSDeployment\ADDSDeployment.psd1'.
VERBOSE: Loading 'Assembly' from path 'C:\Windows\Microsoft.NET\assembly\GAC_MSIL\Microsoft.DirectoryServices.Deployment\v4.0_10.0.0.0__31bf3856ad364e35\Microsoft.DirectoryServices.Deployment.dll'.VERBOSE: Loading 'Executable' from path 'C:\Windows\Microsoft.NET\assembly\GAC_MSIL\Microsoft.DirectoryServices.Deployment\v4.0_10.0.0.0__31bf3856ad364e35\Microsoft.DirectoryServices.Deployment.dll'.
VERBOSE: Loading 'Assembly' from path 'C:\Windows\Microsoft.NET\assembly\GAC_MSIL\Microsoft.ADRoles.Deployment.Common\v4.0_10.0.0.0__31bf3856ad364e35\Microsoft.ADRoles.Deployment.Common.dll'.VERBOSE: Loading 'Executable' from path 'C:\Windows\Microsoft.NET\assembly\GAC_MSIL\Microsoft.ADRoles.Deployment.Common\v4.0_10.0.0.0__31bf3856ad364e35\Microsoft.ADRoles.Deployment.Common.dll'.
VERBOSE: Loading 'Assembly' from path 'C:\Windows\Microsoft.NET\assembly\GAC_MSIL\Microsoft.DirectoryServices.Deployment.Types\v4.0_10.0.0.0__31bf3856ad364e35\Microsoft.DirectoryServices.Deployment.Types.dll'.VERBOSE: Loading 'Executable' from path 'C:\Windows\Microsoft.NET\assembly\GAC_MSIL\Microsoft.DirectoryServices.Deployment.Types\v4.0_10.0.0.0__31bf3856ad364e35\Microsoft.DirectoryServices.Deployment.Types.dll'.
Import-Module : Could not load type 'System.Management.Automation.CustomPSSnapIn' from assembly 'System.Management.Automation, Version=6.2.1.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.At line:1 char:1
+ Import-Module ADDSDeployment -verbose -SkipEditionCheck+ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
+ CategoryInfo          : NotSpecified: (:) [Import-Module], TypeLoadException+ FullyQualifiedErrorId : System.TypeLoadException,Microsoft.PowerShell.Commands.ImportModuleCommand
```

Can we get a fix for this?
From https://github.com/aspnet/AspNetCore.Docs/issues/12332.

Full description of the problem from @scottluskcis:

> The first command succeeds but the Import-WinModule command fails with this error
>
> ```
> PS C:\Users\MyUser> Import-WinModule Microsoft.PowerShell.LocalAccounts
> New-PSSession : [localhost] Connecting to remote server localhost failed with th
> e following error message : The client cannot connect to the destination specifi
> ed in the request. Verify that the service on the destination is running and is
> accepting requests. Consult the logs and documentation for the WS-Management ser
> vice running on the destination, most commonly IIS or WinRM. If the destination
> is the WinRM service, run the following command on the destination to analyze an
> d configure the WinRM service: "winrm quickconfig". For more information, see th
> e about_Remote_Troubleshooting Help topic.
> At C:\Users\MyUser\Documents\PowerShell\Modules\WindowsCompatibility\1.0.0\Wi
> ndowsCompatibility.psm1:232 char:20
> +         $session = New-PSSession @newPSSessionParameters | Select-Obj ...
> +                    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
> + CategoryInfo          : OpenError: (System.Management.A\u2026tion.RemoteRunspa
> ce:RemoteRunspace) [New-PSSession], PSRemotingTransportException
> + FullyQualifiedErrorId : CannotConnect,PSSessionOpenFailed
> ```
>
> I am trying this on Windows 8.1 Enterprise for example. Are there any additional steps that need to be mentioned in the NOTE?


There is nothing stopping PowerShell core of installing a module that requires the full .net framework. For example, I've developed this [WcfPS](https://github.com/Sarafian/WcfPS) and within it I do heavy use of .net code from the `System.ServiceModel` assembly.

- If I install the module from the **Windows PowerShell** environment then I can do `Import-WinModule WcfPS` and it works. 
- If I install the module from the **PowerShell** (Core) environment then I can't do  `Import-WinModule WcfPS` although it won't complain.

When I first read about **WindowsCompatibility** I understood that it will offer the ability to execute any module that depends on the full .net framework, as people work with from their environment **PowerShell Core**. While experimenting with **WindowsCompatibility** module, I am positively surprised by the fact that is based on the implicit importing of modules but I'm also disappointed because it has failed to communicate the following two points:
- It is designed primarily to load the modules available in the up to version 5.1 Windows PowerShell installation.
- It doesn't offer a seamless experience when working from withing **PowerShell Core** console when a person wants to work with a non-default module. In essence, I need to open the **Windows PowerShell** console, install a module from there and then try to use it from **PowerShell Core** console.

I suggest one of the following
1) clarify this aspect in the documentation. More honest advertisement wouldn't hurt as well
2) provide a parameter to work with modules available in the **PowerShell Core**'s `$PSModulePath`. For example 

- `Import-WinModule WcfPS -Name ModuleName -Core`
- `Import-WinModule WcfPS -Name ModuleName -LocalOnly`

or just another cmdlet name for simplicity and keeping all the others clean.

In the second case, the cmdlet shouldn't accept a computer name any longer, as it needs by design to create a session to `localhost`.

Let me know what your thoughts are especially on the second's suggestion parameter name. I think that it shouldn't be this difficult to implement.
This is a great module, however it still requires scripts to be "rewritten" that have import-module natively in them.

I propose adding a command Register-WinImportModule, that will add a proxy command to import-module and use the following logic:

1. If the module is available in PSCore PSModulePath, import it natively
2. If not, check the Win5.1 PSModulePath. If the module is present and is supported in Core via CompatiblePSEditions manifest setting, import it natively.
3. If it is present in PSModulePath but either not supported in core or CompatiblePSEditions is unspecified, Import-WinModule it.

I would end up using this in my PSCore scripts natively as well, so if I were to run, say, Import-Module ActiveDirectory, it will implicitly use the WindowsPowershell version until I get a PSCore Compatible version in place, and when I do, I don't have to rewrite my script to take advantage of it later. This would probably also require a small proxy to Get-Module to at least do a write-warning about the behavior and that Get-Module won't show all potential modules present. In the future, have the logic return all modules regardless of where they live.

I already have a version of this scaffolded, I'll be happy to write the PR if there is interest.