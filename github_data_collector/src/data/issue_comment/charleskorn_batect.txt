This is a draft of support for custom logconfig type.  
This issue happens when I am trying to run batect (which is going to run a docker) in our Jenkin agent which is a dockerised agent hosted on ecs. I have mounted docker socket into docker in batect.yaml as below:
containers:
  build-env:
    build_directory: dev-infra/build-env
    volumes:
    - local: .
      container: /code
      options: cached
    - /var/run/docker.sock:/var/run/docker.sock 
........

any idea what could cause this issue. 
Hi there,

I started playing with batect (very great tool!) and I noticed host environment variables aren't taken into account when mounting volumes.

Here is my test: I want to build and run a container that writes a simple file to my host through a Docker volume.

- Batect description (v0.38.0)
```yml
containers:
  test:
    build_directory: .
    volumes:
      - local: /home/$USER/test
        container: /home/test

tasks:
  setup:
    run:
      container: test
```
- Dockerfile
```Dockerfile
FROM alpine

RUN mkdir -p /home/test

WORKDIR /home/test

CMD touch my-shared-file
```
- Trace
```bash
[gobah@labs batect-issue]$ ls /home
gobah
[gobah@labs batect-issue]$ echo $USER
gobah
[gobah@labs batect-issue]$ ./batect setup
Running setup...
test: running
setup finished with exit code 0 in 0.9s.
[gobah@labs batect-issue]$ ls /home
'$USER'   gobah
```

It would be great to allow environment variable interpretation for volume paths.

For a specific case, I want to run integration tests via batect inside GitlabCI. It works very well but I need to mount a volume from `/builds/$CI_PROJECT_PATH/` to get my output files. I can obviously read the environment variable and then dynamically "rewrite" my batect file but it would be more elegant to use the env variable directly in the volume paths.
Continuation of discussion in #105, for the more advanced use case:

> some way to run commands in another container after another container becomes healthy but before any containers that depend on it start
From what I've read in the documentation, tasks can be executed with additional arguments passed to the specified command like so: `batect my-task -- arg1 arg2`. Also, when attempting to use shell interpolation in the command, it is required to modify the entrypoint to be something like `/bin/bash -c`, necessitating the command be quoted.

Unfortunately, because the command is considered a single unit, passing additional arguments to the task doesn't add them on the inside. Instead of `my command` being executed as `/bin/bash -c "my command arg1 arg2"`, it gets executed as `/bin/bash -c "my command" arg1 arg2`.

Some fiddling around shows that this can be worked-around by specifying the command as `"my command ${*}" --`. Though adding this to all commands that require any kind of interpolation seems like it could be standardised with an option of some description.
It would be amazing if batect supported bash/shell autocompletion (e.g. so I can type `./batect bu`, hit <tab>, and have it autocomplete to `./batect build`).
As a user,
When I mis-type the task name
And...batect gives you a suggestion of what I mostlikely meant,
I want batect to ask me to confirm if that is the command i meant (probably with y/n) and if i confirm...i want batect to run that command
It would be great if you could define a task that executes on the host (not in a Docker container).

This is useful because:

- It means you can use batect as your task runner for **all** tasks, even the ones that can't/shouldn't run in Docker
- It means when you're setting up task workflows using dependencies, you can include these

A prime example: I want to run a bash script that build a Docker image for my Java app. The Dockerfile includes a COPY that takes my app.zip, which was built by Gradle, and extracts it into the image.

I want to use that bash script/task as a dependency of a task that then uses the new Docker image as part of a Terraform deployment.

This means my task flow goes:

1. Compile the Java (done in a batect java-env)
2. Run shell script to build and push the Docker image
3. Run the Terraform (done in a terraform-env)
4. More steps

Right now, 2. is done in a "docker-env" which actually doesn't contain much, and mounts the Docker socket from the host. Ideally it would be run directly on the host, but I can't do that and still have my end-to-end task workflow with batect.

Our batect.yml currently has many many lines under `environment` blocks that look like:

```
environment:
    HOSTNAME: $HOSTNAME
```

When you want to pass a host variable through to the container as the same name and value, a more concise format could be helpful. This is something [Docker-Compose](https://docs.docker.com/compose/environment-variables/#pass-environment-variables-to-containers) and Buildkite do well.

E.g.:

```
environment:
    - HOSTNAME
```
Hi,
I am using [cntlm](http://cntlm.sourceforge.net/) to go through a proxy.
The environment variables that I have set in my host are something like this: 
```bash
https_proxy=http://localhost:3333
http_proxy=http://localhost:3333
...
```

I have to set the variables in `batect.yml` to something like this:
```yml
....
   environment:
      - https_proxy=http://host.docker.internal:3333
      - http_proxy=http://host.docker.internal:3333
..
```
Otherwise batect.yml picks up the ones set in the environment which wouldn't work within the container.