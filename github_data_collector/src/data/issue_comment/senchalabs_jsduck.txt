exception code:
```
Here's a full backtrace:
C:/Users/l/AppData/Local/Temp/ocr2F8E.tmp/lib/ruby/gems/1.9.1/gems/rkelly-remix-0.0.4/lib/rkelly/tokenizer.rb:158:in `raw_tokens'
C:/Users/l/AppData/Local/Temp/ocr2F8E.tmp/lib/ruby/gems/1.9.1/gems/rkelly-remix-0.0.4/lib/rkelly/parser.rb:40:in `parse'
C:/Users/l/AppData/Local/Temp/ocr2F8E.tmp/lib/ruby/gems/1.9.1/gems/jsduck-5.3.2/lib/jsduck/js/parser.rb:22:in `parse'
C:/Users/l/AppData/Local/Temp/ocr2F8E.tmp/lib/ruby/gems/1.9.1/gems/jsduck-5.3.2/lib/jsduck/parser.rb:44:in `parse_js_or_css'
C:/Users/l/AppData/Local/Temp/ocr2F8E.tmp/lib/ruby/gems/1.9.1/gems/jsduck-5.3.2/lib/jsduck/parser.rb:30:in `parse'
C:/Users/l/AppData/Local/Temp/ocr2F8E.tmp/lib/ruby/gems/1.9.1/gems/jsduck-5.3.2/lib/jsduck/batch_parser.rb:25:in `block in parse'
C:/Users/l/AppData/Local/Temp/ocr2F8E.tmp/lib/ruby/gems/1.9.1/gems/jsduck-5.3.2/lib/jsduck/util/parallel.rb:26:in `map'
C:/Users/l/AppData/Local/Temp/ocr2F8E.tmp/lib/ruby/gems/1.9.1/gems/jsduck-5.3.2/lib/jsduck/util/parallel.rb:26:in `map'
C:/Users/l/AppData/Local/Temp/ocr2F8E.tmp/lib/ruby/gems/1.9.1/gems/jsduck-5.3.2/lib/jsduck/batch_parser.rb:17:in `parse'
C:/Users/l/AppData/Local/Temp/ocr2F8E.tmp/lib/ruby/gems/1.9.1/gems/jsduck-5.3.2/lib/jsduck/app.rb:41:in `parse'
C:/Users/l/AppData/Local/Temp/ocr2F8E.tmp/lib/ruby/gems/1.9.1/gems/jsduck-5.3.2/lib/jsduck/app.rb:21:in `run'
C:/Users/l/AppData/Local/Temp/ocr2F8E.tmp/lib/ruby/gems/1.9.1/gems/jsduck-5.3.2/bin/jsduck:25:in `<main>'
```
I haven't found a way to inject (via --tags) option custom guide tag handler. Currently the https://github.com/senchalabs/jsduck/wiki/Guides says about two custom guide tags: {@img and {@link ... 

I would like to create a few custom tags e.g.: {@pdf that would expand into:

`<object width="100%" height="100%" data="" type="application/pdf">   <embed src="" type="application/pdf" /></object>`

or even more generic such {@html ... as html passthrough section.

Is there any way to achieve it with current implementation?
This is mine:
![image](https://user-images.githubusercontent.com/1990992/36888099-ffe63148-1e2e-11e8-900f-a662c36186cd.png)

This is http://docs.sencha.com/extjs/4.2.6/#!/api/Ext.button.Button:
![image](https://user-images.githubusercontent.com/1990992/36888131-1fa8b636-1e2f-11e8-96df-123b61fda013.png)


![image](https://user-images.githubusercontent.com/15663474/31539801-5a37940e-b03c-11e7-84a4-a7a98833c794.png)


With ExtJS, in a project using both classic & modern toolkits...
See attached config json file...
It seems that once duck finds the first instance of a class (e.g. in the classic src folders or even the common app source folders) , it ignores any subsequent instance of that class (e.g. in the modern src folders)

Am I correct or am I missing a vital setting in my json file?
[jsduck.json.txt](https://github.com/senchalabs/jsduck/files/1226954/jsduck.json.txt)
Thanks.



Please work on getting the windows exe whitelisted so that developers at companies with ridiculously unreasonable security policies are able to use the tool.

Our company is using virustotal and the windows exe is listed by 7 lesser known engines to be malicious.
They refuse to obtain any files which are listed as malicious by ANY of the engines run by virustotal.
Any plans on adding documentation coverage reports, like [this one from esdoc](https://doc.esdoc.org/github.com/esdoc/esdoc/source.html)?

'Cause that would be awesome!
I currently try to include guides in our docs and read
https://github.com/senchalabs/jsduck/wiki/Guides

It mentions the "description" field, but never says what the field actually does.
See the corresponding pull request to fix it
https://github.com/senchalabs/jsduck/pull/663
I assume it was forgotten that the getBaseUrl regular expression should be adapted, after it was decided that index.html shall become index.php.

Currently I have to use a pretty ugly hack with the --body-html config

```
var getBaseUrl = Docs.controller.Content.prototype.getBaseUrl;
Docs.controller.Content.prototype.getBaseUrl = function(){
    var r = getBaseUrl.apply(this,arguments);
    r = r.replace('/index.php','');
    return r;
}
```