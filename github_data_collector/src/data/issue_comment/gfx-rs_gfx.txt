Reproduction involves just getting the latest version from crates.io with a `Cargo.toml`, and the crate itself wont compile.

```toml
# ...
[dependencies]
gfx-backend-gl = "*" 
```

More specifically, I was trying to get the example to compile locally, as opposed to building from the example repository itself, and couldn't get it working.

The error:

```
   Compiling gfx-backend-gl v0.4.0
error[E0308]: mismatched types
    --> /home/simon/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-backend-gl-0.4.0/src/device.rs:1945:21
     |
1945 |                     config.extent.width as f64,
     |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^ expected u32, found f64

error[E0308]: mismatched types
    --> /home/simon/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-backend-gl-0.4.0/src/device.rs:1946:21
     |
1946 |                     config.extent.height as f64,
     |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected u32, found f64

error: aborting due to 2 previous errors

For more information about this error, try `rustc --explain E0308`.
error: could not compile `gfx-backend-gl`.
```

It looks like the version on https://crates.io/crates/gfx-backend-gl is 3 months old, while the version in the Github master is 11 days old https://github.com/gfx-rs/gfx/tree/master/src/backend/gl
Short info header:
- GFX version: `gfx-hal 0.4.0`
- OS: Windows 10
- GPU: `Adapter Vulkan AdapterInfo { name: "Intel(R) UHD Graphics 630", vendor: 32902, device: 16027, device_type: IntegratedGpu }`
- Driver version: `24.20.100.6195`

See https://github.com/parasyte/pixels/issues/49#issuecomment-575665724 for additional information. Updating to driver version `26.20.100.7584` fixes the crash.

I think you might want to blacklist these old drivers that can cause crashes. The original report was filed against `pixels`, which only draws a single textured quad. Nothing fancy...
Short info header:
- GFX version: 0.4.1 (commit: f999b5295ca30dc38f33b0a4770a31d50138687c)
- OS: macOS High Sierra/Mojave
- GPU: NVIDIA GeForce GT 750M 2 GB/Intel UHD Graphics 630 1536 MB

When running the colour-uniform example on multiple Macbook Pros, I noticed a lot of swapchain recreated events triggered by: "Swapchain is out of date and needs to be re-created" error when presenting. This happens when I am not resizing the window. Also, this doesn't happen for the quad example. Anyone have any ideas about what might be going on?
Currently, Warden can't be used for reftesting and benchmarking on many platforms because it assumes the support for time queries. We need to make it more flexible. This will open the road to enable it on Travis for CI headless.

In order to repro, either run `make reftests` if you are not on Windows, or specifically `cd src/warden && cargo run --bin reftest --features gl -- ci` if you are on Windows.
In DX11 (and DX12), read-only storage becomes an SRV, while writable storage becomes an UAV. This means, we don't know what exact binding to use at the level of Vulkan pipeline layout. What we do in DX12 is having both SRV and UAV associated with a storage binding. This plays well "combined" descriptors, which also happen to have 2 different associated things with them. This task is about introducing a similarly generic model for dx11.
The coherent memory is disabled by #3118 because it's not working correctly. It currently tries to re-sync the whole coherent buffer on every submit, which isn't acceptable. We need to support a case where the mapping is closed, and we don't do any extra work. For this to happen, we need to track the epochs of coherent memory mapping and ranges being mapped.

Related to #2941 
I recently asked in the gfx riot channel about the feasibility of pre-compiling shaders for each target as an alternative to depending on `spirv-cross`:

> Hi folks! Is it possible to opt-out of using the spirv-cross dependency in favour of pre-compiling the shaders for each target?

@kvark provided some insight:

> Basically, there are many factors that affect how the native shader is generated: pipeline layout, specialization, capabilities of the target platform, and other things. The best we can do if you want to run without spirv_cross is: pre-polulate pipeline caches and ship them, add a mode that just returns an error if you are creating a pipeline that is not in the given cache.
That path would require a few changes, mostly getting the pipeline cache to a good state (currently, DX12/11 don't implement it).

I've opened this issue so that it's easier to track/discuss this. While I'm at it, I thought I'd add some of our motivation for working around `spirv-cross` as we transition to `gfx` for [`nannou`](https://github.com/nannou-org/nannou)'s graphics:

We've had a few people testing our `conrod-rendy` backend on macOS run into some compilation issues that required updating their xcode toolchain to build `spirv-cross` properly. We're aiming to remove the need for any of the 3rd party C deps as they (particularly `shaderc`) have been the source of the vast majority of our issues at the nannou repo over the past couple years and working around them are often the biggest blockers in our creative coding workshops. So far we're managing to avoid `shaderc` and `spirv-reflect` by pre-compiling the spirv and specifying layout manually, I think `spirv-cross` is that last we want to work around before we should have a theoretically smooth story for building on all platforms.

The [javelin project](https://gfx-rs.github.io/2019/07/13/javelin.html) looks like a very exciting long-term solution to this, but I wonder if it's worth spending time enabling some feature-gated workaround in the meantime? I'm not sure I'd want to ask to sacrifice time that could have been spent on `javelin` though :)
Short info header:
- GFX version: master / 6612aaaf0c50b750bbe528384cf693e819950f20
- OS:Ubuntu 18
- GPU:Jetson Nano

It's great that Vulkan support works ootb.
I don't know the importance of this error yet. I just started working with a physical Jetson Nano.
TIL - the Jetson nano is running the CPU in 64-bit mode (aarch64 / armv8l).

I don't get this error with an Nvidia 1070ti on Windows 10. 
Creating this bug report to track this issue - perhaps there is some small extra cleanup that needs to be done on the Nano.

$ cargo run --bin compute --features vulkan 1 2 3 4
    Finished dev [unoptimized + debuginfo] target(s) in 0.31s
     Running `/home/jetson/src/gfx/target/debug/compute 1 2 3 4`
Times: [0, 1, 7, 2]
nvdc: start nvdcEventThread
nvdc: nvdcEventThread select failed: Bad file descriptor

Discovered with my app, reproducible with the quad and colour-uniform examples. In all cases opt-level = 0 works.

Tested configurations (all with approx. identical behavior):
- gfx-backend-dx11 version: 0.4.3, latest master
- OS: Windows 10, Windows 7
- GPU: Nvidia Geforce 840M, Intel HD Graphics 4600, AMD Radeon HD 7770
- Rustc: 1.40, 1.42-Nightly 12-25
- opt-level:  1, 2, 3



I was just wondering what the feasibility of implementing a software-renderer target for gfx-hal would be, and whether or not there are any WIPs out there? This would be amazingly useful for testing/CI/debugging and perhaps as a reference implementation, but I can imagine it might be a massive amount of work?