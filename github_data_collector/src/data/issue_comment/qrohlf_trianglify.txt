Hi, thanks for this nice library!

I was playing around with it and made this Dockerfile. What do you think of it?
Apparently I somehow managed to publish a 2.0.0 by accident from [this branch](https://github.com/qrohlf/trianglify/tree/bump_canvas_dep), hopefully it's working well for everybody but apologies to any users that got bit by any untested functionality! I'll do some final testing 

**This means a few things:**
- I'll be fast-tracking my work on the next release
- Because the next release will include breaking changes relative to the current 2.0.0 on npm, this means it will be published under the `3.0.0` version.

**3.0.0 release checklist:**
- [ ] Improved test suite
- [x] support the latest version of node-canvas, remove from optionalDependencies<sup>1</sup>
- [x] Default includeNamespace to true for SVG generation (https://github.com/qrohlf/trianglify/issues/74)
- [x] Switch from gulp/browserify to microbundle
- [x] Add two new color functions: “sparkle”, “shadows”
- [ ] Write Changelog
- [ ] Update README
- [ ] Update [live docs](http://qrohlf.com/trianglify/)
- [ ] Update Trianglify.io
- [ ] Merge `next` branch into `master`, announce release

-----
<sup>1</sup> I'm removing node-canvas from optionalDependencies because the default behavior of npm/yarn is to attempt to install all optionalDependencies, display any install errors, but not fail the full `npm install` operation if installation of an optionalDependency fails. This is proving to be extremely confusing for many users that are consuming the browser version of Trianglify, and seeing a bunch of install errors for a totally unnecessary node-related package when they try to `npm install`. 
Trianglify 3.0.0 working PR.

**TODO**
- [ ] Replace gulp/browserify with microbundle
- [ ] Remove compiled files from repo (generate in a prepublish script)
- [ ] Update CDNJS definition/link
… can relate triangle with its poly vector.

Motivation: post process generated svg with d3.js for instance. 
This solves part of issue #84.
I'd want to create an svg background looking like an irregular mesh, maybe it's possible to achieve without changes of source code?
compilation is best left to CI
There are probably people running into https://github.com/qrohlf/trianglify/issues/41 who don't know about the config option and don't find it in the readme. It should probably default to true, and those who know that none of their use cases for generated SVG content require an `xmlns` can turn it off. 
This will make it possible to remove the `/dist` folder from source control, and also prevent me from having to remember to version-bump the CDNJS link in the README and provide support for it. 

See https://github.com/qrohlf/trianglify/issues/68 for an example of issues caused by CDNJS (in this case, min/non-min version issues)
The current sanity checks for cell_size are not sufficient, it is still possible to create an infinite loop by passing in a string (i.e. `"40"` instead of `40`) for cell_size.

Oops.
