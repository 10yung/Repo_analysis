See https://github.com/spekframework/spek/issues/474
Use
```kt
val varName by value { expression }
```
to declare a _let value_, and
```kt
value(varName) { expression }
```
to override its value within a context. Values are memoized per-test and accessed by invocation:
```kt
println(varName())
```

Fixes #807.
Found some issues in the sample code snippet, while going through the docs. Fixed it.
Using Gherkin style of tests. Using plugin in Idea(2019.2) and running Spek with plugin(v. 2.0.9).

When I run Scenario B, some part of code defined in Scenario A is also executed. Anything written between Scenario and 1st step (Given, When, Then), respectively code out of scope of test steps is executed first. Im not sure if this is valid behaviour or should I avoid using any code in this place?  For example: I usually define properties used in whole scenario that are initialise in later steps. It is confusing during debug, if I run one specific scenario and as "side effect" code from different scenario is executed as well, causing issues. 

In example screenshot: Running scenario B, expected print message in log to be: E,B,F
But was actually: A,D,E,F,B


![Screenshot 2019-12-19 at 13 29 07](https://user-images.githubusercontent.com/15251514/71173671-9b402380-2263-11ea-90db-0bfcf3f47cc0.png)


When right clicking on a folder in IntelliJ without Spek plugin installed, JUnit plugin will display normal "Run tests in [folder name]" action.

However, with Spek plugin installed, this action will be REPLACED with "Run speks in [folder name]". Spek action only runs Spek tests and ignores JUnit tests. Thus, there is no way to bulk-run regular JUnit tests apart from creating run configuration manually.

This applies even for projects that do not use Spek at all, which is especially annoying (I have to create manual configuration for every tests in those projects).
I have a number of tests that require to be executed on a known thread (one that has an OpenGL context associated to it). Currently it doesn't seem possible to change Spek's execution behaviour. 
WIP: most likely contains bugs.

## Noteworthy changes

### The following blocks are now _suspending_:
- tests (`its`, `Then`s, etc...)
- fixtures (`beforeEachTest`, etc...)
- scope value's constructor and destructor

### Scope values are eagerly invoked now.
This won't be an issue if your tests are passing on Spek `2.0.8`. Since that version (#789) accessing scope values became stricter which is in preparation for this. This change is necessary to be able to make the scope value's constructor and destructor suspending.

---

Big bonus with this change: integration tests regarding the timeout feature runs more faster now :)

Resolves #426 
Please release updated version of plugin that supports Intellij IDEA 2019.3
don't know when this happened, saw it in the reporting functionality of IDEA:
```
During querying provider Run line marker (class com.intellij.execution.lineMarker.RunLineMarkerProvider)

java.lang.IllegalStateException: Required value was null.
	at org.spekframework.intellij.domain.ScopeDescriptorCache.fromClassOrObject(ScopeDescriptorCache.kt:38)
	at org.spekframework.intellij.SpekRunLineMarkerContributor.getInfo(SpekRunLineMarkerContributor.kt:35)
	at com.intellij.execution.lineMarker.RunLineMarkerProvider.getLineMarkerInfo(RunLineMarkerProvider.java:49)
	at com.intellij.codeInsight.daemon.impl.LineMarkersPass.queryProviders(LineMarkersPass.java:171)
	at com.intellij.codeInsight.daemon.impl.LineMarkersPass.lambda$doCollectInformation$3(LineMarkersPass.java:96)
	at com.intellij.codeInsight.daemon.impl.Divider.divideInsideAndOutsideInOneRoot(Divider.java:79)
	at com.intellij.codeInsight.daemon.impl.LineMarkersPass.doCollectInformation(LineMarkersPass.java:91)
	at com.intellij.codeHighlighting.TextEditorHighlightingPass.collectInformation(TextEditorHighlightingPass.java:55)
	at com.intellij.codeInsight.daemon.impl.PassExecutorService$ScheduledPass.lambda$null$1(PassExecutorService.java:429)
	at com.intellij.openapi.application.impl.ApplicationImpl.tryRunReadAction(ApplicationImpl.java:1106)
	at com.intellij.codeInsight.daemon.impl.PassExecutorService$ScheduledPass.lambda$doRun$2(PassExecutorService.java:422)
	at com.intellij.openapi.progress.impl.CoreProgressManager.registerIndicatorAndRun(CoreProgressManager.java:591)
	at com.intellij.openapi.progress.impl.CoreProgressManager.executeProcessUnderProgress(CoreProgressManager.java:537)
	at com.intellij.openapi.progress.impl.ProgressManagerImpl.executeProcessUnderProgress(ProgressManagerImpl.java:59)
	at com.intellij.codeInsight.daemon.impl.PassExecutorService$ScheduledPass.doRun(PassExecutorService.java:421)
	at com.intellij.codeInsight.daemon.impl.PassExecutorService$ScheduledPass.lambda$run$0(PassExecutorService.java:397)
	at com.intellij.openapi.application.impl.ReadMostlyRWLock.executeByImpatientReader(ReadMostlyRWLock.java:164)
	at com.intellij.openapi.application.impl.ApplicationImpl.executeByImpatientReader(ApplicationImpl.java:204)
	at com.intellij.codeInsight.daemon.impl.PassExecutorService$ScheduledPass.run(PassExecutorService.java:395)
	at com.intellij.concurrency.JobLauncherImpl$VoidForkJoinTask$1.exec(JobLauncherImpl.java:161)
	at java.base/java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:290)
	at java.base/java.util.concurrent.ForkJoinPool$WorkQueue.topLevelExec(ForkJoinPool.java:1020)
	at java.base/java.util.concurrent.ForkJoinPool.scan(ForkJoinPool.java:1656)
	at java.base/java.util.concurrent.ForkJoinPool.runWorker(ForkJoinPool.java:1594)
	at java.base/java.util.concurrent.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:177)
```
Sorry, I'm pretty inexperienced with the general contribution process. 
So here is my pull request.
The pull request introduces a new Inspection, detecting Spek classes without no-arg constructors (Constructors, where all parameters have default values are considered no-arg as well). 
In general, the wording may be improved a little bit since I am not really proficient in English. 
- The name of the Inspection class could be improved
- The wording in the message of the Inspection could be better
I tested the Inspection locally and it seems to work reliably (including check for @Ignore or abstract classes). Two quickfixes are provided, one making the class abstract and one adding the `@Ignore` annotation.
I observed that the `plugin.xml` files are duplicated for the `spek-ide-plugin-intellij-idea` and `spek-ide-plugin-intellij-android-studio` modules. So I added the configuration in both files. Maybe it would make sense to at least extract some common parts out of it, although I don't really know how to do it.