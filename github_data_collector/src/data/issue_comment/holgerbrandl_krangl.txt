java11 should be supported to build, test and use krangl.
Hello,

When reading a CSV file, I was wondering if there was any way I could specify not to "peek" into the first 100 samples of a column, but rather, intuit the column type from all the data in the column.  Is there such functionality possible when reading a CSV file?

Fred
Running on Android I get:

> Error: Method name '=' in class 'krangl.Extensions' cannot be represented in dex format on Android
`text` is supported by postgresql, see http://www.postgresqltutorial.com/postgresql-char-varchar-text/
Hi,

I am currently going through the tutorial
https://krangl.gitbook.io/docs/tutorials/statistics 

At the bottom of the page there is a code listing:

```kotlin
// PC1 vs PC2 scatter
plotOf(projection.transpose().array().withIndex()) {
    mark(MarkType.point)
    encoding(x) { value[0] }
    encoding(y) { value[1] }
    encoding(text){ "PC"+index}
}.render()
```

This uses plotOf, which isn't in any of the following packages:

```kotlin
dependencies {
    compile(kotlin("stdlib-jdk8"))

    implementation("com.github.holgerbrandl" + ":" + "kravis" + ":0.5")

    compile("com.github.holgerbrandl" + ":" + "krangl" + ":" + "v0.10.3")
    compile("org.apache.commons" + ":" + "commons-math3" + ":" + "3.6.1")
    compile( "com.github.chen0040" + ":" + "java-glm" + ":" + "1.0.6")
    compile("com.github.haifengl" + ":" + "smile-plot" + ":" + "1.5.2")
    //compile("com.github.haifengl" + ":" + "smile-math" + ":" + "1.5.2")
    //compile("com.github.haifengl" + ":" + "smile-data" + ":" + "1.5.2")
    //compile("com.github.haifengl" + ":" + "smile-interpolation" + ":" + "1.5.2")
    // compile("com.github.haifengl" + ":" + "smile-nlp" + ":" + "1.5.2")
    compile("com.github.haifengl" + ":" + "smile-netlib" + ":" + "1.5.2")
}
```

Can you please help me to either update the call or to find it :)

Best,
Marius
Hello Holger Brandl,

I'm not working in the data science domain but find your talks about it super interesting. 
While browsing the Internet, I came accross this thing that may be interesting for Krangl to leverage

----

The Frictionless Data's Datapackage specification consists of a json file of metadata that accompanies a CSV file that describes column types, versions, sources, and how to validate correctness of the CSV's data. This allows for quite a lot of tooling and workflow improvements to CSV files without mucking with the CSV itself

https://frictionlessdata.io/specs/table-schema/

---

I can imagine how you could generate a data class from that JSON and improve the Krangl workflow
Example:
```
val df = someList.deparse({::propName})
```
See https://github.com/square/kotlinpoet
Api would be much more fluent because we would no longer suffer from limited operator overlaoding.

It also would require user to learn fewer verbs. Currently also the vectorized helpers seem more confusing than helpful.

Now:
```
df.addColumn("foo"){ it["bar") + 3)
df.filter { it["weight"] gt 50 }
df.addColumn("with_anz") { it["first_name"].asStrings().map { it!!.contains("anz") } }
```

With element-wise operations:
```
df.addColumn("foo"){ it["bar") + 3)
df.filter { it["weight"] > 50 }
df.addColumn("with_anz") { it["first_name"].s.contains("anz") } }
```

However, this would not work for aggregation:
```
val sumDF = df.summarize(
    "mean_weight" to { it["weight"].mean(removeNA = true) },
    "num_persons" to { nrow }
)
```

Also certain column operations would be harder to implement with a element-wise API  such as
```
val sumDF = df.addColumns(
    "proportion" to { it["weight"]/it["weight"].sum() }
)
```
Maybe the complete vector could be exposed `it.df["weight"`?
