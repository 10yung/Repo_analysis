I am refacting the mapping of  [NHibernate.AspNetCore.Identity](https://github.com/nhibernate/NHibernate.AspNetCore.Identity) to `NHibernate.Mapping.ByCode` ,  as descripted in the issue https://github.com/nhibernate/NHibernate.AspNetCore.Identity/issues/16 .

I have rewrite the orignal xml mapping of `NHibernate.AspNetCore.Identity` with `ClassMapping<T>`, the code looks like this:

```c#
public class IdentityRoleMappingPostgreSql : ClassMapping<IdentityRole> {

    public IdentityRoleMappingPostgreSql() {
        Schema("public");
        Table("aspnet_roles");
        Id(e => e.Id, id => {
            id.Column("id");
            id.Type(NHibernateUtil.String);
            id.Length(32);
            id.Generator(Generators.TriggerIdentity);
        });
        Property(e => e.Name, prop => {
            prop.Column("name");
            prop.Type(NHibernateUtil.String);
            prop.Length(64);
            prop.NotNullable(true);
            prop.Unique(true);
        });
        /* other property mappings ignored here .*/
    }

}
```

The full mapping code is here: 

https://github.com/nhibernate/NHibernate.AspNetCore.Identity/tree/master/src/NHibernate.AspNetCore.Identity/Entities

Then I try to extend these mappings with `joined-sublcass` of xml mapping, like this:

```xml
<?xml version="1.0" encoding="UTF-8" ?>
<hibernate-mapping
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xmlns:xsd="http://www.w3.org/2001/XMLSchema"
  xmlns="urn:nhibernate-mapping-2.2"
  namespace="WebTest.Entities" assembly="WebTest">

  <joined-subclass name="AppRole" schema="public" table="app_roles" extends="NHibernate.AspNetCore.Identity.IdentityRole, NHibernate.AspNetCore.Identity, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null">
    <key column="id" />
    <property name="Description" column="description" type="string" length="256" />
  </joined-subclass>

</hibernate-mapping>
```

I got the following exception when setting up nhibernate:

```
NHibernate.MappingException : These classes referenced by 'extends' were not found:
FullName:NHibernate.AspNetCore.Identity.IdentityRole - Name:NHibernate.AspNetCore.Identity.IdentityRole, NHibernate.AspNetCore.Identity, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
FullName:NHibernate.AspNetCore.Identity.IdentityUser - Name:NHibernate.AspNetCore.Identity.IdentityUser, NHibernate.AspNetCore.Identity, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
   at NHibernate.Cfg.MappingsQueue.CheckNoUnavailableEntries()
   at NHibernate.Cfg.Configuration.SecondPassCompile()
   at NHibernate.Cfg.Configuration.BuildMappings()
   at UnitTest.IdentityTest._02_CanSetupMappingByXml()
```

Then I rewrite the xml mapping with `JoinedSubclassMapping<AppRole>` , which works , can build session factory and query without any exception.

```c#
public class AppRoleMapping : JoinedSubclassMapping<AppRole> {

    public AppRoleMapping() {
        ExplicitDeclarationsHolder
            .AddAsRootEntity(typeof(NHIdentityRole));
        Extends(typeof(NHIdentityRole));
        Schema("public");
        Table("app_roles");
        Key(k => k.Column("id"));
        Property(
            p => p.Description,
            maping => {
                maping.Column("description");
                maping.Type(NHibernateUtil.String);
                maping.Length(256);
            }
        );
    }

}
```

So the issue is:

- when using `JoinedSubclassMapping<T>` to extend the mappings build with `ClassMapping<T>`, it works [_01_CanExtendByCodeWithByCode](https://github.com/nhibernate/NHibernate.AspNetCore.Identity/blob/master/test/UnitTest/IdentityTest.cs#L17);
- when using `joined-subclass` of xml mapping to extend the mappings build with `ClassMapping<T>`,  get an exception of `NHibernate.MappingException : These classes referenced by 'extends' were not found `[_02_CanExtendByCodeWithXml](https://github.com/nhibernate/NHibernate.AspNetCore.Identity/blob/master/test/UnitTest/IdentityTest.cs#L33);
- when using `joined-subclass` xml mapping  to extend `class` xml mapping, it works [_03_CanExtendXmlByXml](https://github.com/nhibernate/NHibernate.AspNetCore.Identity/blob/master/test/UnitTest/IdentityTest.cs#L49);
- when using `JoinedSubclassMapping<AppRole>` to extend `class` mapping of xml, it works [_04_CanExtendXmlByByCode](https://github.com/nhibernate/NHibernate.AspNetCore.Identity/blob/master/test/UnitTest/IdentityTest.cs#L65);

The full test code is here: https://github.com/nhibernate/NHibernate.AspNetCore.Identity/blob/master/test/UnitTest/IdentityTest.cs 

Maybe there something I do wrong, or some issues with nhibernate's mappings?



Now it is impossible to change starting symbol of the parameter or run queries containing local variables.
We are using firebird and it uses : for local variables, while NHibernate recognize them as named parameters and replaces with placeholders. 
Would be nice if NHibernate can parse parameters starting with @ instead of : or do not parse inside part of "execute block" for parameters.
Fix #2298 in 5.1.x, with release commit.
Release ready.
NH disables batching for entities that use an identity generator. I understand why this would be the case for stateful sessions but I'm curious to know why this rule still applies to stateless sessions and why there isn't a way to circumvent the rule.

I have tens of thousands of records to insert and I don't need the the ID values returned, yet each row is being inserted with a roundtrip to the database so that the SCOPE_IDENTITY() is returned.
This is taking minutes to execute. What I'd like to be able to do is to implement a way of forcing batching (regardless of the identity generator) in this particular scenario. Can anyone think of a reason why this would be a bad thing to implement in NH?
Fixed by slightly modifying a few relinq related classes, copied a couple of them from Relinq where it was not possible to override them - 1 was sealed and another had private constructor. Relinq's apache 2 license allows this as far as I understand.
The issue was that NH expected Relinq to evaluate independent subtrees, but RL considers all parameters (defined in lambda expressions) as non-evaluatable and their status is pulled upwards leaving expressions on constants not evaluated.
Modified visitor maintains ancestor list and checks whether parameter accepts values from evaluatable expression by analyzing its ancestors.

Fixes #2276
query by example is an efficient way to implement a multicriteria search, it has limitations (between, or), but not all use cases hit these limitations and it is much easier to use than LINQ when all criteria are optional.

Unfortunately associations are ignored. For instance,SQL generated from this example 
```
var example = new Book() {
    Title = "...", 
    Author = new Author() {Lastname = "..."},
    Category = new Category(){Id = 1}
};
```
will not include restriction on author lastname and category id.

In Java world, spring-data-jpa project's implementation of query by example includes several associations (not sure for 1-n and n-n). It would be nice to have this feature in NHibernate.
I want to create a persisted computed column to be able to have index on it in MSSQL.
Im trying following piece of code for mapping but column isn't getting created in sql:
```cs
classMap.Property(prop.Name, pMap =>
{
    pMap.Formula("CAST(CASE WHEN [Column1] > [Column2] THEN 1 ELSE 0 END AS bit) PERSISTED");
    pMap.Generated(PropertyGeneration.Always);
    pMap.Update(false);
    pMap.Insert(false);
    pMap.Index($"IX_{type.Name}_{prop.Name}");
});
```
Can anyone please tell me what im doing wrong?
Hi everyone,

I currently tried the Discriminator feature  for storing several sub classes in one table.
After starting with the feature and placing the discriminator tag in my mappigns, I discovered a problem. If you are not placing the discriminator tag right after the id tag, the runtime is providing me with a error: 
`MappingException: XML validation error: The element 'class' in namespace 'urn:nhibernate-mapping-2.2' has invalid child element 'discriminator' in namespace 'urn:nhibernate-mapping-2.2'.`

From the error I'm started struggling around. First I thought, something with my discriminator was wrong, so I switched around the type and several other stuff but nothing seems to work. So I started googleing around and after some time I found a blog post, which put me in the right direction. That it is a "must" to place discriminator right below the id tag.

If this "restriction" is correct in the validation schema, I think it would be very helpful, if it would be  mentioned in the official documentation. Right now under 5.1.7 in [https://nhibernate.info/doc/nhibernate-reference/mapping.html](url) nothing to this restriction is stated and so I was more or less lost for the right google search to give me a clue after trying around with no luck. 

Cheers
Simulacruxx
Originally reported under #2244, incorrect query is generated for
```
var selectedProducts = new[] { productDefinition1 };
var query = session.Query<Material>()
	.Where(x => selectedProducts.Contains(x.ProductDefinition) && selectedProducts.Select(y => y.MaterialDefinition).Contains(x.MaterialDefinition));
```
`.Select(y => y.MaterialDefinition) `is ignored and IDs of product definitions are inserted into the list of material definitions, i.e. SQL contains query to the effect of ... `where MaterialDefinitionId in (ProductDefinitionId1, ProductDefinitionId2, ...)`.

Original standalone unit test: https://github.com/v-kabanov/Nh526QueryBug/blob/68498cf1f440db8694474f1b55a5efa31be2ae41/MyTest.cs#L207

New unit test integrated in a fork of NH repo added in commit https://github.com/v-kabanov/nhibernate-core/commit/133b26dbe73c299d3c089fc86d12bb4db87d47e2

It runs and fails but needs some further development.