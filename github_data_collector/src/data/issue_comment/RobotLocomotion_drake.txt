- and enable html5 video conversion in the pyplot animation jupyter notebook

<!-- Reviewable:start -->
---
This change is [<img src="https://reviewable.io/review_button.svg" height="34" align="absmiddle" alt="Reviewable"/>](https://reviewable.io/reviews/robotlocomotion/drake/12603)
<!-- Reviewable:end -->

…the size of the entire state (velocities are ignored)\.  This is a common use case and dramatically simplifies the wiring.

<!-- Reviewable:start -->
---
This change is [<img src="https://reviewable.io/review_button.svg" height="34" align="absmiddle" alt="Reviewable"/>](https://reviewable.io/reviews/robotlocomotion/drake/12602)
<!-- Reviewable:end -->

Remove deprecated method  CalcFrameGeometricJacobianExpressedInWorld()
and instead use CalcJacobianSpatialVelocity().

This issue follows deprecation of other Jacobian methods from issue #12154 and PR#12171.
With the new Velocity-Implicit Integrator Euler integrator #12528, we will have at least four implementations of Newton-Raphson iterations in our implicit integrators. This PR:

- Moves the convergence check in each iteration, which was written based on Hairer 1996, from each implicit integrator into the parent class ImplicitIntegrator.

In other words, it refactors the easiest component, the convergence check, and makes the convergence behavior consistent between the integrators. It will also simplify PR #12543 by moving the logic for this convergence check to a common location.

<!-- Reviewable:start -->
---
This change is [<img src="https://reviewable.io/review_button.svg" height="34" align="absmiddle" alt="Reviewable"/>](https://reviewable.io/reviews/robotlocomotion/drake/12599)
<!-- Reviewable:end -->

PR #12491 changed how friction coefficients are to be defined for drake applications. Currently, when parsing SDF files, we hijack the `<surface><friction><ode>` values. In URDF files we use the "drake_compliance" tag to get friction, youngs_modulus and dissipation.

Those have all been supplanted by the new, uniform paradigm. We need to deprecate and then remove this dependency. Because it's in parsing, it's not a straight-forward compile-time deprecation. It'll have to be one-time warnings when parsing files.


<!-- Reviewable:start -->
This change is [<img src="https://reviewable.io/review_button.svg" height="34" align="absmiddle" alt="Reviewable"/>](https://reviewable.io/reviews/robotlocomotion/drake/12597)
<!-- Reviewable:end -->

MBP offered an interface that would set hydroelastic properties after the fact and attempt to push it through to SceneGraph. This was a short-term stop gap effort. However:

  1. There are now mechanisms to set these either during parsing or registration.
  2. It doesn't work with SceneGraph in its present state.
  3. And there are no invocations of this API any longer.

We'll simply remove it, updating the documentation where appropriate.

<!-- Reviewable:start -->
---
This change is [<img src="https://reviewable.io/review_button.svg" height="34" align="absmiddle" alt="Reviewable"/>](https://reviewable.io/reviews/robotlocomotion/drake/12596)
<!-- Reviewable:end -->

Previously, we had `AddSoftHydroelasticProperties` and `AddRigidHydroelasticProperties` to facilitate setting valid properties without having to worry about the nitty gritty. This does the same for
more general contact material properties and then makes use of it throughout the code base.

<!-- Reviewable:start -->
---
This change is [<img src="https://reviewable.io/review_button.svg" height="34" align="absmiddle" alt="Reviewable"/>](https://reviewable.io/reviews/robotlocomotion/drake/12595)
<!-- Reviewable:end -->

Was added to Anzu due to build issues in Drake (@SeanCurtis-TRI if you could elaborate?).  

We'd like to bring it back into Drake and add more features so it's comparable to RenderEngineVtk, namely adding color and label images. The main benefit is that we believe the purely OpenGL based renderer will be a faster implementation compared to those with VTK. We will also be able to better profile the OpenGL calls and benchmark it against the other render engines to confirm this theory
Currently there is no proper way to configure the lighting in our rendering engines. A temporary method to configure the position of the single default light is in #12440 but is not intended for public usage. Things that we could configure include:
* Number of lights
* Source Type: for example point vs directional vs spot vs area
* Anchor: for example scene vs camera
* Position
* Color
* Attenuation
* Focal Point

Available options for lights in VTK-based render engines can be seen in https://vtk.org/doc/nightly/html/classvtkLight.html

Render Engine API should be generic enough to handle different implementations of Lights, e.g. not all rendering systems support area lights

cc @SeanCurtis-TRI 