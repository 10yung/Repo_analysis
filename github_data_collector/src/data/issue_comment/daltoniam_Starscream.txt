I'm getting no notification when the socket loses connection.
This can be from either server side or the internal socket. I'm using the boilerplate stuff for now.

```
 // MARK:- Websocket
  
  func connectSocket() {
    var request = URLRequest(url: URL(string: webSocketURL)!)
    request.addValue(NetworkManager.shared.accessToken, forHTTPHeaderField: "AccessToken")
    request.addValue(NetworkManager.shared.idToken, forHTTPHeaderField: "IdToken")
    request.timeoutInterval = 10000
    socket = WebSocket(request: request)
    socket?.delegate = self
    socket?.connect()
  }

  func didReceive(event: WebSocketEvent, client: WebSocket) {
    switch event {
      case .connected(let headers):
        isConnected = true
        print("websocket is connected: \(headers)")
      case .disconnected(let reason, let code):
        isConnected = false
        print("websocket is disconnected: \(reason) with code: \(code)")
      case .text(let string):
        print("Received text: \(string)")
      case .binary(let data):
        print("Received data: \(data.count)")
      case .ping(_):
        break
      case .pong(_):
        break
      case .viablityChanged(_):
        break
      case .reconnectSuggested(_):
        break
      case .cancelled:
        isConnected = false
      case .error(let error):
        isConnected = false
        handleError(error)
    }
  }
  
  func handleError(_ error: Error?) {
    if let e = error as? WSError {
      print("websocket encountered an error: \(e.message)")
    } else if let e = error {
      print("websocket encountered an error: \(e.localizedDescription)")
    } else {
      print("websocket encountered an error")
    }
  }
```
  
I was expecting something to come in on the event, specially from the server when it does timeout. That way I can get it to connect again.

Thankful for any help.

Looks like a pretty significant changeset came in from 3.1.1 -> 4.0.0, but the README doc was not properly updated to indicate the new usage. I'm currently working through what I have to migrate and will submit a PR when I have time, but thought opening an issue was a good start.
When importing Starscream version 3.1.1 (currently latest) using SwiftPM I get the warning `couldn't find pc file`. I tried version 3.1.1 and master branch, when using 3.1.0, the warning does not appear.

## Steps to reproduce
- create new iOS project (File > New > Project > iOS > Single View App)
- add SwiftPM dependency (File > Swift Packages > Add Package Dependency...), select either exact version 3.1.1 or branch master
- build

In this use case it's better because it doesn't produce intermediary arrays on every step. And it's more concise.
Tested by adding a completion handler to see if it's being called, but unfortunately, it is not. I swapped out to another library to check if my socket server might have been the issue, but the other swift socket library worked fine; however, I would like to stick to using Starscream. 
I connect to the websocket and then disconnect from it (as it's seen from server-side logs)

The delegate method is being called: 

`func websocketDidConnect(socket: WebSocketClient) {
        webSocket.write(string: "my_user_id=62")
    }`

And then it just disconnects. 

And here is my code from viewDidLoad() 

`override func viewDidLoad() {
        super.viewDidLoad()
        webSocket = WebSocket(url: URL(string: "ws://178.32.48.82:8088/")!)
        webSocket.delegate = self
        webSocket.connect()
    }`

What can be the reason? 
I don't see any logs in XCode console, but on the server-side I just get a message about disconnection.
Hi guys!

First I want to thank you for developing Starscream, it's such a good library and it helped me a lot in my projects. 
But recently I run into a problem :(

I updated my Apple Watch to WatchOS 6, my iPhone to iOS 13.1, Xcode to 11.1. MacOS still 10.14.6.

I've created an Independent Apple Watch project where I test the communication between the Watch and a WebSocket server using Starscream: ws://echo.websocket.org/

It **works perfectly on the Simulator** but on **real Apple Watch** when I try to connect to the server I **got these errors**:

    2019-10-08 18:57:53.064887+0200 BackgroundWebSocketOnlyWatch WatchKit Extension[251:31011] [] nw_connection_get_connected_socket [C1] Client called nw_connection_get_connected_socket on unconnected nw_connection

    2019-10-08 18:57:53.068928+0200 BackgroundWebSocketOnlyWatch WatchKit Extension[251:31011] TCP Conn 0x16d8d5f0 Failed : error 0:50 [50]

    websocket is disconnected: Optional("The operation couldnâ€™t be completed. Network is down")




I'll show you the code of my app:

**InterfaceController.swift**

    import WatchKit
    import Foundation
    import Starscream

    class InterfaceController: WKInterfaceController, WebSocketDelegate {
    
    let socket = WebSocket(url: URL(string: "ws://echo.websocket.org/")!)
    
    @IBOutlet var label: WKInterfaceLabel!
    
    /**************************************************************************************************/
    
    override func awake(withContext context: Any?) {
        super.awake(withContext: context)
        
        socket.delegate = self
    }
    
    override func willActivate() {
        // This method is called when watch view controller is about to be visible to user
        super.willActivate()
    }
    
    override func didDeactivate() {
        // This method is called when watch view controller is no longer visible
        super.didDeactivate()
    }
    
    /************************************************************************************************/
    
    @IBAction func connectButtonPressed() {
        
        socket.connect()
    }
    
    @IBAction func sendButtonPressed() {
        
        socket.write(string: "Hi!")
    }
    
    @IBAction func disconnectButtonPressed() {
        
        socket.disconnect()
    }
    
    /******************************************************************************************/
    
    func websocketDidConnect(socket: WebSocketClient) {
        print("websocket is connected")
        label.setText("Connected")
    }
    func websocketDidDisconnect(socket: WebSocketClient, error: Error?) {
        print("websocket is disconnected: \(error?.localizedDescription)")
        label.setText("Disconnected")
    }
    func websocketDidReceiveMessage(socket: WebSocketClient, text: String) {
        print("got some text: \(text)")
        label.setText("Received: \(text)")
        createVibration()
        
    }
    func websocketDidReceiveData(socket: WebSocketClient, data: Data) {
        print("got some data: \(data.count)")
    }
    /******************************************************************************************/
    
    // Creates vibration
    func createVibration() {
        
        WKInterfaceDevice.current().play(.notification)
        print("Vibration created")
    }
}

I tried using **Starscream** with **iOS 13.1** and it **works perfectly both on Simulator and real iPhone**.

Is this a **bug** of WatchOS 6 or is Starscream that needs an update?

Thanks in advance! :)
I encountered the crash here where `pointer` only contained two bytes, [136, 39] and it was trying to read `closeCode` from outside the buffer. This should fix it.
First of all, thank you for this awesome library. On to the issue:

I've been using a rather bad wifi setup for a while, and I've noticed this issue a couple of times. I don't know if this is an issue on Starscream or maybe on the underlying `URLConnection`. I've thought of building a watchdog that will disconnect and reconnect the socket if it doesn't receive data for X seconds, but I'm not sure that's the best approach.

Any thoughts?