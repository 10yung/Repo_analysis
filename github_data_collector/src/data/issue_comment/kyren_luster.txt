Been going through my open source projects which I've been neglecting and figured I should write something here about where I am with this project.

Unfortunately I'm no longer working on a larger project where I think this might be useful
(for my current needs wasm is a better fit), so I'm not going to update this
project at least in the near term.  I still think the core part of this project (safe interaction with a garbage collector via a futures-ish API) was a neat idea, and I'd still like to explore
this in the future when the hopefully the compiler is a bit more ready.

Before I pick this up again though I think that there needs to be additional
support in the Rust compiler for doing this, because while it is *possible* to use a GC safely via combinators, it is not at all *pleasant*.  What I'd *like* is for it
to be possible to have a safe GC'd API using async / await or generators, but
AFAICT right now it is not possible.  I tried for a while recently to see if I could come up with even a very limited version of the "sequence" API that worked with async / await functions and I couldn't find anything that worked.

You can't auto-generate `Collect` for closures or generators right now which is certainly a
limitiation, but it isn't actually the biggest problem currently.  Right now
there's no way I can find to pass a `Context<'gc>` with a unique, branded `'gc`
lifetime through an async function while having that async function not also be
of the `'gc` lifetime.  We need the async function to strictly outlive `'gc` so
that it can't hold `Gc` pointers across await points, or we need some other
solution.  (Incidentally I can't make this work at *all* right now, but even if
I could I know that you can't make the lifetimes work out so that the async
function lives for longer than `'gc`).

Once I find any way of proceeding that enables generators-like functions instead of combinators, I think I'll pick this back up, but until then I'm not going to update this.

I'll keep thinking about the problem though!  If anybody else has any ideas about how to make this work, let me know!
The static string key is frequently written when creating a standard library, so I can write it simply.
```
[zaoqi@zaoqi-pc lua]$ lua -i lang.lua 
Lua 5.3.5  Copyright (C) 1994-2018 Lua.org, PUC-Rio
> 
[zaoqi@zaoqi-pc lua]$ ............../luster/target/debug/luster -r lang.lua
Error: ThreadError(BadCall(TypeError { expected: "function", found: "nil" }))
```
https://gitlab.com/the-language/the-language/blob/d13341505075cb8cc4fa9b23212fd9c9932bc556/core/pure/lua/lang.lua
I believe that a "sufficiently smart compiler" would compile this String::new to the same machine code as the existing implementation. (Pretty sure rustc isn't that compiler, though.)

Could retain the existing implementation for performance.
Hello,

I have just been pointed to this repository, as I'm currently investigating scripting languages accessible from rust that would support builtins that return `-> impl Future<Output = TheActualResult>` (and thus have all lua functions when accessed from rust that would implicitly return `-> impl Future<Output = TheActualResult>`) in a way that would be transparent to the scripted language, for the configuration file of a server I'm writing.

Until now, the only language I had found that matched this property was [gluon](https://gluon-lang.org/), but going with a brand new scripting language makes me uneasy, as users would have to learn it in addition to understanding how my server works.

So I wonder, is async builtins / callbacks being transparently “async'd” through the lua call stack until the initial rust caller something you are considering for `luster`?

Cheers, and good luck with this rewrite!
  Leo
I've started to have a play with `luster` to see how it might fit into another project.
I was wondering about adding some of the `table` functions, but notice that the [next](https://www.lua.org/manual/5.3/manual.html#pdf-next) function isn't implemented yet.

Before I start poking around in `Table`, do you have thoughts on an approach?  Replacing the `FxHashMap` with something like [IndexMap](https://docs.rs/indexmap/1.0.2/indexmap/map/struct.IndexMap.html) might work (that `IndexMap` doesn't quite do everything needed as far as I can tell).

Thanks,

Chris