Hi, how does CommonMark.NET compete with markdig?
That one is missing from your benchmark.

This is just noise; I forgot to remove it before submitting #122.
* Create NuGet packages during builds, and create a symbol/source package alongside the main package
* Move cmark.exe to a separate NuGet package
* Remove the explicit .nuspec files in favor of project system features

Please see the notes in review and feel free to ask any questions before deciding to merge.
I'm trying to convert the below as a table in HTML. 
## Tables

| Option | Description |
| ------ | ----------- |
| data   | path to data files to supply the data that will be passed into templates. |
| engine | engine to be used for processing templates. Handlebars is the default. |
| ext    | extension to be used for dest files. |

Unfortunately, my HTML output is generated as below when using CommonMark.CommonMarkConverter.Convert(...).

<h2>Tables</h2>
<p>| Option | Description |
| ------ | ----------- |
| data   | path to data files to supply the data that will be passed into templates. |
| engine | engine to be used for processing templates. Handlebars is the default. |
| ext    | extension to be used for dest files. |</p>

Hi,

I took the code from https://github.com/Knagis/CommonMark.NET/pull/90 and tried to fix your comments.

Would close #42.

/ekblom
This implements support for parsing YAML blocks and front-matter following the [Pandoc rules](http://pandoc.org/MANUAL.html#extension-yaml_metadata_block):

  1. Delimited by three hyphens (---) at the top
  2. Delimited by three hyphens (---) or dots (...) at the bottom
  3. May occur anywhere in the document, but if not at the beginning must be preceded by a blank line.

`BlockTag.YamlBlock` is defined, and `FencedCodeData` is used to store the closing fence character (either `-` or `.`) and to indicate whether the closing fence has been seen in the same manner as `BlockTag.FencedCode`.

YAML support may be enabled via two-flavors:

  1. `CommonMarkAdditionalFeatures.YamlBlocks`: this allows for any number of YAML blocks anywhere in the document.

  2. `CommonMarkAdditionalFeatures.YamlFrontMatterOnly`: allows for exactly one YAML block, defined on the first line of the document.

The HTML formatters treat `BlockTag.YamlBlock` blocks the same way as `BlockTag.FencedCode` blocks, except that instead of writing the info string, a `class="language-yaml"` attribute will be written.
What is the easiest way to implement something similar to StackOverflow comments section? They refer to it as 'mini-Markdown': only italic, bold and code is allowed. So a white list of Markdown tags. Everything else, including HTML and other MD tags should be displayed as is (passed through or HtmlEncoded) in order to avoid XSS and to match specific business requirements.

Basically I need to let my users mark some of their text as bold or italic. I would also also allow paragraphs and lists. But everything else (quotations, links, images, headings, any HTML) should be preserved and displayed AS IS (HTML encoded because it will be rendered within bigger HTML page). Essentially I'm inventing my own super strict and limited subset of Markdown, lets call it MarkdownSlim. I want to implement it with CommonMark.NET because I may need to extend it easily in future (allow more MD tags).

I can not simply pass input through CommonMarkConverter.Convert because it may find and convert MD tags that I don't support into HTML. So they will be displayed differently from how they were entered.

Would this be a right approach? I tried it but it will require more debugging and learning since it does not seem to be preserving all input. 

```
if (block.Tag == BlockTag.List || block.Tag == _OTHER_TAGS_ALLOWED_BY_MARKDOWNSLIM ) {

    base.WriteBlock(block, isOpening, isClosing, out ignoreChildNodes);

} else {

    ignoreChildNodes = false;
    if (block.StringContent!= null) {
        this.Write(AntiXss.HtmlEncode(block.StringContent.ToString()));
    }
}

protected override void WriteInline(
    Inline inline, 
    bool isOpening, 
    bool isClosing, 
    out bool ignoreChildNodes) {

    if (inline.Tag == InlineTag.Emphasis 
              || inline.Tag == _OTHER_TAGS_ALLOWED_BY_MARKDOWNSLIM_ ) {

        base.WriteInline(inline, isOpening, isClosing, out ignoreChildNodes);

    } else {

        ignoreChildNodes = false;
        this.Write(AntiXss.HtmlEncode(inline.LiteralContent));      
    }
}
```

I feel like this is a very common use case and I could not find a good example and I'm not sure I'm even on the right track. There seem to be a [`LOT OF INTEREST`](https://talk.commonmark.org/t/make-commonmark-safe-by-default/1265/10) in implementing 'safe markdown' and I think it should boil down to be able to easily implement **subsets** of Markdown like the one I've described. Maybe a good example on a wiki?

We are currently using CommonMark.NET's API to apply some pre-processing steps to markdown documents before rendering - generally by scanning for certain tokens and replacing Blocks/Inlines as necessary.

Currently our code to remove a Block looks like the following:

``` csharp
private static void RemoveBlock(Block block)
{
    var parent = block.Parent;
    var prev = block.Previous;
    var next = block.NextSibling;

    if (parent != null)
    {
        if (parent.FirstChild == block) { parent.FirstChild = next; }
        if (parent.LastChild == block) { parent.LastChild = prev; }
    }

    if (prev != null) { prev.NextSibling = next; }
    if (next != null) { next.Previous = prev; }
}
```

However the `Previous` property is flagged as obsolete, so this code may not work in the future.

`Inline` has a similar problem - In order to remove an `Inline` from a block I must iterate through the Inline sequence from `FirstSibling`, updating the `NextSibling` property as appropriate as I go. It looks like the process will be similar for `Block` after `Previous` is removed.

It would be great to get some guidance on the expected approach here.

I don't want to allow the heading features of markdown for the users.

So the Professor is back on CommonMark, which is great news.

Somewhat less great is his renaming of core terms in both the spec and the C implementation (I understand those modifications are by popular demand -- I guess that's the price one has to pay when seeking community approval for their specification).

The following have changed so far:
- [x] _Header_ --> _Heading_
- [x] _Horizontal Rule_ --> _Thematic Break_ (WTF?)

The following are expected to change:
- [ ] _Emphasis_ -> _Weak Emphasis_
- [x] _Bullet List_ -> _Unordered List_

Should CommonMark.NET reflect those changes? I don't mind renaming everything, but wouldn't changing e.g. `HeaderLevel` to `HeadingLevel` break compatibility?

**P.S.** I noticed cmark has a separate struct for header/ing data. Maybe this is an opportunity to do the same here (while retaining an obsolete `HeaderLevel` property for the time being).
