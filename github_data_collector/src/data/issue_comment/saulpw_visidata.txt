This loader daisy chains with the https:// loader by generating
pre-signed S3 URLs using the S3 API.  Daisy chaining like this keeps the
code simpler and reuses the content-encoding and content-type logic in
the http loader rather than re-implementing against S3 object
properties.

Authentication is handled in the normal way for AWS clients, either
through environment variables¹ or credentials files².

Tests for this will require first setting up an accessible S3 bucket.

¹ https://boto3.readthedocs.io/en/latest/guide/configuration.html#environment-variables
² https://boto3.readthedocs.io/en/latest/guide/configuration.html#shared-credentials-file
**Small description**

If I open a JSON file which contains a single JSON object rather than an array of objects, its columns are duplicated in the VisiData window. Sample contents (`singleitem.json`):

```json
{
  "key1": "val1",
  "key2": "val2"
}
```

**Expected result**

Opening a JSON file with a single object should appear the same as opening a JSON file containing an _array_ containing only that object.

In VisiData 1.5.2, this works as expected:

```
 key1   | key2   ‖
 val1   | val2   ‖
```

**Actual result with screenshot**

In VisiData 2.-3dev:

```
 key1   ╵ key2   ╵ key1   ╵ key2   ║
 val1   ╵ val2   ╵ val1   ╵ val2   ║
```

**Steps to reproduce with sample data and a .vd**

```
echo '{
  "key1": "val1",
  "key2": "val2"
}' > singleitem.json

vd singleitem.json
```

**Additional context**

Version: VisiData 2.-3dev, most recently 0164c10.

Note that this issue appears to be only a _display/UI_ quirk. Saving the file does _not_ cause duplicated columns in the output.
Is it possible to define exact column positions/lengths for fixed format? I have a fixed file and it is impossible for visidata to properly recognize where column begins and where it ends without proper defintion.
It would be good if we were able to pass columns definition to visidata eg:

column 1 - from char 0 to 5
column 2 - from char 6 to 10
column 3 - from char 25 to 30
etc...
Aim is to have something spiritually similar to vim's `.` (dot) command.

Design from @ajkerrigan: If there was a repeat command, my intuition would be for it to run the previous cmd longname with any previous input. A z-prefix alternative would run the last command longname with empty, queried input.

## Example Workflow

User runs `z+` *sum* on current column **Units**.
User moves cursor to column **Items**.
User presses `repeat-command`. `z+` *sum* is calculated on the current column **Items**.
User presses z-prefix `repeat-command`. `z+` is exec'd and queries for an aggregator from the user. Once given, it executes on the current column **Items**.

**Small description**
Fixed format has a traceback  if --fixed_rows is less than --skip 15

This command gives a traceback: vd -f fixed --fixed-rows 10 --skip 15

**Expected result**
Fixed-rows applies after the initial lines are skipped.

**Actual result with screenshot**
```
Traceback (most recent call last):
   File "/usr/lib/python3/site-packages/visidata/threads.py", line 202, in _toplevelTryFunc
     t.status = func(*args, **kwargs)
   File "/usr/lib/python3/site-packages/visidata/sheets.py", line 828, in reload
     list(self.optlines(itsource, 'skip'))
   File "/usr/lib/python3/site-packages/visidata/sheets.py", line 817, in optlines
     yield next(it)
   File "/usr/lib/python3/site-packages/visidata/loaders/fixed_width.py", line 67, in iterload
     self.setColNames(self.headerlines)
 AttributeError: 'FixedWidthColumnsSheet' object has no attribute 'headerlines'        
```

**Steps to reproduce with sample data and a .vd**
vd -f fixed --fixed-rows 10 --skip 15

**Additional context**
Please include the version of VisiData.
latest head from develop v2.3
In some cases a sheet has no name information available (`_name` or a `source` to pull from). The `name` property can error out in that case.

Since we don't have enough information to return a useful name property in these cases, one option is to fall back to an empty name. Callers may have additional local context that can serve as a sheet name substitute (such as a command longname in the case of #432).

This approach may clash with the "no empty sheet name" intent of 751de48, in which case we can handle this differently :).
**Small description**
sheet.addColorizer() only allow you to see the fg or bg color (via the reverse attribute).  But there is no way to independently set both.   It would be nice to have control of both these independently.

It looks like part of the issue is that the curses color_pairs are all created at start up, and there are no free spots.  Perhaps these can be changed later.

I know this is unlikely to be added any time soon, but this would be nice to have.
**Small description** 
This might just be a question, rather than a bug.

It is not clear what the correct way to remove a colorizer that was added via sheet.addColorizer()
If I add one via a command mapping it would be useful to be able to remove it with a command.

**Small description**
From https://github.com/saulpw/visidata/issues/430#issuecomment-570672955
@saulpw says:
sheet.addColorizer seems like it should only add the colorizer to the current sheet, I agree. This is probably just a bug, though it may prove difficult to fix in the short term. We'll look into this, esp as we finalize the API for 2.0.


**Expected result**
Apply only to the sheet that sheet sheet.addColorizer was called on.  Though I could see how it would be useful either way to make a global or local colorizer.

**Small description**
`vd -P longname` was introduced in v2.-2. It replays *longname*. 

Since 751de48351533b3f5fb0ebde35ec638129dc09fd it instead resuts in this stacktrace:
```
Traceback (most recent call last):
  File "visidata/basesheet.py", line 116, in exec_command
    vd.cmdlog.beforeExecHook(self, cmd, '', keystrokes)
  File "visidata/cmdlog.py", line 143, in beforeExecHook
    sheetname = sheet.name
  File "visidata/basesheet.py", line 142, in name
    return self._name or self.source.name + '_'+self.rowtype
AttributeError: 'NoneType' object has no attribute 'name'
```

**Steps to reproduce with sample data and a .vd**
`vd -P open-plugins`

**Additional context**
`develop` branch
