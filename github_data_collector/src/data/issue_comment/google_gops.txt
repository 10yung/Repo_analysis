It's superceded by the standard os package in go 1.8+.
I just noticed that the documentation does not have list golang versions supported by this package.  It cannot run using other golang versions apart from `go1.12`

```shell
go build github.com/google/gops/signal: module requires Go 1.12
go build github.com/google/gops/internal: module requires Go 1.12
``
 Add access control when remote cmd
when only gops agent.Listen()  enabled, but no gops command connects to this agent.
when we run `ps` without any args, its output includes column header like this:
~~~
# ps
  PID TTY          TIME CMD
22671 pts/0    00:00:00 bash
23572 pts/0    00:00:00 ps
~~~

currently gops does not have column header, those newcomer users may not know meanings of  1st and 2nd column
`gops  memstats 27281`
couldn't get port by PID: dial tcp 127.0.0.1:0: connect: can't assign requested address
when i use addr,long time no response.
i use go version go1.10 darwin/amd64.
i remember it works  before,perhaps i updated the go version.
`gops` panics if anything other than `help` was invoked without specifying the `pid`/`addr` of the target:

```
λ gops stats
panic: runtime error: index out of range

goroutine 1 [running]:
main.main()
        E:/Installs/go-tools/src/github.com/google/gops/main.go:68 +0x48a
```

This adds a check and prints the usage if it was not specified.

```
λ go run main.go cmd.go stats
gops: pid/addr of target process not specified
gops is a tool to list and diagnose Go processes.

        gops <cmd> <pid|addr> ...
        gops <pid> # displays process info

...

All commands require the agent running on the Go process.
Symbol "*" indicates the process runs the agent.
exit status 1
```
I use gops on the centos, and when I use gops trace pid, it'll pause when Opening browser.
I hope there is a way to connect browser to the gops, such as links, elinks, etc...
Because it's not safe for us to export a certain http port. So we need use gops on the server instead of local windows computer.
How should i deal with this error? 

## Error
killed     $GOPATH/bin/gops

## go version
go version go1.8 darwin/amd64


## go env

GOARCH="amd64"
GOBIN=""
GOEXE=""
GOHOSTARCH="amd64"
GOHOSTOS="darwin"
GOOS="darwin"
GOPATH="/Users/william/gocode"
GORACE=""
GOROOT="/usr/local/go"
GOTOOLDIR="/usr/local/go/pkg/tool/darwin_amd64"
GCCGO="gccgo"
CC="clang"
GOGCCFLAGS="-fPIC -m64 -pthread -fno-caret-diagnostics -Qunused-arguments -fmessage-length=0 -fdebug-prefix-map=/var/folders/hk/hn36zx657pb9s_509zcdr4cr0000gp/T/go-build134432162=/tmp/go-build -gno-record-gcc-switches -fno-common"
CXX="clang++"
CGO_ENABLED="1"
PKG_CONFIG="pkg-config"
CGO_CFLAGS="-g -O2"
CGO_CPPFLAGS=""
CGO_CXXFLAGS="-g -O2"
CGO_FFLAGS="-g -O2"
CGO_LDFLAGS="-g -O2"
This PR adds communication over HTTP, so it would be possible to use existing server to serve gops traffic. All previous modes are preserved as-is; so both local and rawsocket-remote modes are still there.

I've refactored client code a bit so that both socket and HTTP modes would be possible to use; now there's a `Client` iface implemented by `ClientTCP` and `ClientHTTP` that is passed to every gops command's function instead of raw `TCPAddr`.

To use it run gops like this: `gops pprof-cpu http://localhost:port/handler`