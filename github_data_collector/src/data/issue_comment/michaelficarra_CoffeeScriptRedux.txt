See https://github.com/jashkenas/coffeescript/issues/4143
## 


<bountysource-plugin>
---
Want to back this issue? **[Post a bounty on it!](https://www.bountysource.com/issues/28176988-a-static-module-system-proposal-for-cs?utm_campaign=plugin&utm_content=tracker%2F33145&utm_medium=issues&utm_source=github)** We accept bounties via [Bountysource](https://www.bountysource.com/?utm_campaign=plugin&utm_content=tracker%2F33145&utm_medium=issues&utm_source=github).
</bountysource-plugin>
Minimal reproduction (using node 4):

``` bash
rm -rf /tmp/missing-stack-trace; mkdir $_; cd $_ 
npm install coffee-script-redux coffee-script
echo 'JSON.parse("")' >b.coffee; echo 'require("./b.coffee")' >a.js
```

With redux:

``` bash
> node -r coffee-script-redux/register a
undefined:1



SyntaxError: Unexpected end of input
```

With coffee-script:

``` bash
> node -r coffee-script/register a 
undefined:1



SyntaxError: Unexpected end of input
  at Object.parse (native)
  at Object.<anonymous> (/private/tmp/missing-stack-trace/b.coffee:1:6)
  at Object.<anonymous> (/private/tmp/missing-stack-trace/b.coffee:1:1)
  at Module._compile (module.js:434:26)
  at Object.loadFile (/private/tmp/missing-stack-trace/node_modules/coffee-script/lib/coffee-script/register.js:16:19)
  at Module.load (/private/tmp/missing-stack-trace/node_modules/coffee-script/lib/coffee-script/register.js:45:36)
  at Function.Module._load (module.js:310:12)
  at Module.require (module.js:365:17)
  at require (module.js:384:17)
  at Object.<anonymous> (/private/tmp/missing-stack-trace/a.js:1:63)
  at Module._compile (module.js:434:26)
  at Object.Module._extensions..js (module.js:452:10)
  at Module.load (/private/tmp/missing-stack-trace/node_modules/coffee-script/lib/coffee-script/register.js:45:36)
  at Function.Module._load (module.js:310:12)
  at Function.Module.runMain (module.js:475:10)
  at startup (node.js:118:18)
  at node.js:952:3
```

The stack traces for `JSON.parse` disappear everywhere (and won't come, even in the following event loop ticks) the moment the first coffee-script file is required using -redux.
## 


<bountysource-plugin>
---
Want to back this issue? **[Post a bounty on it!](https://www.bountysource.com/issues/27264424-json-parse-stack-traces-break-when-using-register?utm_campaign=plugin&utm_content=tracker%2F33145&utm_medium=issues&utm_source=github)** We accept bounties via [Bountysource](https://www.bountysource.com/?utm_campaign=plugin&utm_content=tracker%2F33145&utm_medium=issues&utm_source=github).
</bountysource-plugin>
It seems this project has been discontinued, which is sad.
You might add a small note to the Readme, so people don't have to
search the docs to find out.
## 


<bountysource-plugin>
---
Want to back this issue? **[Post a bounty on it!](https://www.bountysource.com/issues/26559507-project-status?utm_campaign=plugin&utm_content=tracker%2F33145&utm_medium=issues&utm_source=github)** We accept bounties via [Bountysource](https://www.bountysource.com/?utm_campaign=plugin&utm_content=tracker%2F33145&utm_medium=issues&utm_source=github).
</bountysource-plugin>
This:

``` coffee
for x in myList
  x ?= 1
```

throws `Error: the variable "x" can't be assigned with ?= because it has not been defined.`
## <bountysource-plugin>

Want to back this issue? **[Post a bounty on it!](https://www.bountysource.com/issues/18023140-assignment-inside-iterator-scope?utm_campaign=plugin&utm_content=tracker%2F33145&utm_medium=issues&utm_source=github)** We accept bounties via [Bountysource](https://www.bountysource.com/?utm_campaign=plugin&utm_content=tracker%2F33145&utm_medium=issues&utm_source=github).
</bountysource-plugin>

You can make the compiler crash by trying to compile this file:

``` coffee
argv[2..-1].join()
```

like this:

```
/bin/coffee --js --input sample.coffee --source-map-file sample.map
```

This change defends against the missing `expression.raw`, since I'm inferring from the surrounding code that `raw` is not always present on every node.

This doesn't parse:

``` coffee
x = myList?[0..12]
```
## 


<bountysource-plugin>
---
Want to back this issue? **[Post a bounty on it!](https://www.bountysource.com/issues/18009657-existential-range-slices?utm_campaign=plugin&utm_content=tracker%2F33145&utm_medium=issues&utm_source=github)** We accept bounties via [Bountysource](https://www.bountysource.com/?utm_campaign=plugin&utm_content=tracker%2F33145&utm_medium=issues&utm_source=github).
</bountysource-plugin>
This is a work-in-progress. I'm sharing in case others are interested or have feedback. This branch creates a new option `--target-es6` that tells the compiler to emit ES6 when possible.

Since many ES6 features are closely aligned with CoffeeScript, we can actually do less and emit smaller, simpler code that takes advantage of native implementations.

Why would you want this?
- because you're targeting an environment with native ES6 support
- because you want to convert an existing CoffeeScript codebase to JS without all the noise introduced by missing ES6 features.

Here's an example of what it can already do:

`$ cat sample.coffee`

``` coffeescript
handleAllThings = (things...) ->
  myThings.map (thing) => this.handle(thing)
```

`$ ./bin/coffee --bare --js --input sample.coffee --target-es6`

``` js
// Generated by CoffeeScript 2.0.0-beta9-dev
var handleAllThings;
handleAllThings = function (...things) {
  return myThings.map(thing => this.handle(thing));
};
```

For comparison, without `--target-es6` we get a lot more code:

`$ ./bin/coffee --bare --js --input sample.coffee`

``` js
// Generated by CoffeeScript 2.0.0-beta9-dev
var handleAllThings;
handleAllThings = function () {
  var things;
  things = arguments.length > 0 ? [].slice.call(arguments, 0) : [];
  return myThings.map(function (this$) {
    return function (thing) {
      return this$.handle(thing);
    };
  }(this));
};
```

Status:
- [x] default params
- [x] class
- [x] array destructuring
- [ ] object destructuring
- [ ] translate `for in` to `for of`
- [x] super must be called before accessing `this` in constructors
- [x] class declarations inside IIFEs need to get lifted to outer scope

This makes the syntax error formatter respect the error's `offset` property.  Here is a file demonstrating the difference:

``` coffee
class A

class B
  method: ->
    console.log('a', 'b', 
      'c', 'd'
    )
```

Before this change, the error is reported at line 1,  column 1. With this change, it is reported correctly on line 6.

I've started a discussion on the ES6 future of CoffeeScript [here](https://github.com/coffeescript-cookbook/coffeescript-cookbook.github.io/issues/128). Let me quote the introduction:

> ES6 is gaining a lot of spread. It introduces a lot of new concepts into JS. Here are nice overviews: [short](https://6to5.org/docs/learn-es6/), [comprehensive](http://code.tutsplus.com/articles/use-ecmascript-6-today--net-31582).
> 
> And people already use those features! Thanks to the effort from such projects as [6to5](https://6to5.org/), [es6-transpiler](https://github.com/termi/es6-transpiler) and [Traceur](https://github.com/google/traceur-compiler), for a modern JS developer who does not use CoffeeScript, **there is simply no reason not to use ES6 nowadays**. Many modern JS projects are already being written in ES6. Moreover, popular JS frameworks already demand that their users code in ES6 out of the box (this includes Angular 2 and EmberJS).
> 
> CoffeeScript is essentially locked at ES5. Some ES6 features are accessible via backticks, but others directly conflict with the CoffeeScript syntax, including said backticks. With CoffeeScript's main contributors having [explicitly refused](https://github.com/jashkenas/coffeescript/issues/3162#issuecomment-24234397) to support ES6, **CoffeeScript is doomed to become a thing of the past**.

I wonder what is the position of CoffeeScriptRedux maintainers on ES6 support. If CoffeeScriptRedux introduces full ES6 support, it is able to take CoffeeScript over completely.
## 


<bountysource-plugin>
---
Want to back this issue? **[Post a bounty on it!](https://www.bountysource.com/issues/7936885-es6-support?utm_campaign=plugin&utm_content=tracker%2F33145&utm_medium=issues&utm_source=github)** We accept bounties via [Bountysource](https://www.bountysource.com/?utm_campaign=plugin&utm_content=tracker%2F33145&utm_medium=issues&utm_source=github).
</bountysource-plugin>
This works in CoffeeScript, but not in CoffeeScriptRedux 2.0.0-beta8:

``` coffeescript
console.log \
  "hi",
  "there"
```

This should either be a documented deviation or fixed.
## <bountysource-plugin>

Want to back this issue? **[Post a bounty on it!](https://www.bountysource.com/issues/4254623-new-line-escaping-doesn-t-work-in-some-cases?utm_campaign=plugin&utm_content=tracker%2F33145&utm_medium=issues&utm_source=github)** We accept bounties via [Bountysource](https://www.bountysource.com/?utm_campaign=plugin&utm_content=tracker%2F33145&utm_medium=issues&utm_source=github).
</bountysource-plugin>
