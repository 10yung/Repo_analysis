Hey Svartalf!

I'm calibrating my postgresql connection pool, choosing total # of connections.  The [recommended formula](https://wiki.postgresql.org/wiki/Number_Of_Database_Connections) is ((core_count * 2) + effective_spindle_count).  num_cpus handles the core count but I don't know of any utility to derive effective_spindle_count, if that is even possible?  This lead me to wonder whether maybe effective_spindle_count is something that can be determined and added to `heim-rs`?  

Does this interest you?
Updates the requirements on [macaddr](https://github.com/svartalf/rust-macaddr) to permit the latest version.
<details>
<summary>Changelog</summary>
<p><em>Sourced from <a href="https://github.com/svartalf/rust-macaddr/blob/master/CHANGELOG.md">macaddr's changelog</a>.</em></p>
<blockquote>
<h2>[1.0.0] - 2020-01-02</h2>
<h3>Added</h3>
<ul>
<li><code>{}</code> formatting render colon-separated MAC address, e.g. <code>AB:0D:EF:12:34:56</code></li>
<li><code>{:-}</code> formatting flag render hyphen-separated MAC address, e.g. <code>AB-0D-EF-12-34-56</code></li>
<li><code>{:#}</code> formatting flag render period-separated MAC address, e.g. <code>AB0.DEF.123.456</code></li>
</ul>
<h2>[0.1.2] - 2019-10-17</h2>
<h3>Added</h3>
<ul>
<li><code>MacAddr6::nil</code> and <code>MacAddr8::nil</code> methods to create new nil MAC addresses</li>
<li><code>MacAddr6::broadcast</code> and <code>MacAddr8::broadcast</code> methods to create new broadcast MAC addresses</li>
</ul>
<h3>Fixed</h3>
<ul>
<li><code>std::fmt::Display</code> implementation for <code>MacAddr8</code> properly renders address in a canonical form (<a href="https://github-redirect.dependabot.com/svartalf/rust-macaddr/issues/1">#1</a>)</li>
</ul>
</blockquote>
</details>
<details>
<summary>Commits</summary>
<ul>
<li><a href="https://github.com/svartalf/rust-macaddr/commit/e8aeb6a628adcdcd3ac97dd4f8d98ab79cb1f252"><code>e8aeb6a</code></a> Release v1.0.0</li>
<li><a href="https://github.com/svartalf/rust-macaddr/commit/52d4cbec12a9f79811f508d6227636a02b51ba6b"><code>52d4cbe</code></a> no_std check for CI</li>
<li><a href="https://github.com/svartalf/rust-macaddr/commit/0f0916a8e32f94f5af66bbca6a6512360fc033dd"><code>0f0916a</code></a> Support <code>core::fmt::Display</code> and alternative formats. (<a href="https://github-redirect.dependabot.com/svartalf/rust-macaddr/issues/2">#2</a>)</li>
<li><a href="https://github.com/svartalf/rust-macaddr/commit/16784c4f98e01056934ed21c59e3e36cdde637ac"><code>16784c4</code></a> Fixing the CI build</li>
<li><a href="https://github.com/svartalf/rust-macaddr/commit/7ea74714307701461d41f5ff2fd267f71389f141"><code>7ea7471</code></a> Updating CHANGELOG for v0.1.2</li>
<li><a href="https://github.com/svartalf/rust-macaddr/commit/224d95e383bf0a00f23b734c73e7dbddae906dba"><code>224d95e</code></a> Release v0.1.2</li>
<li><a href="https://github.com/svartalf/rust-macaddr/commit/3b584bc17e2aa94297f0557df02c168438396924"><code>3b584bc</code></a> Fixing canonical form for MacAddr8</li>
<li><a href="https://github.com/svartalf/rust-macaddr/commit/35d5e0a47f8a67150cf46fb1ccc32aaf7cefff52"><code>35d5e0a</code></a> Updating documentation a little bit</li>
<li>See full diff in <a href="https://github.com/svartalf/rust-macaddr/compare/v0.1.1...v1.0.0">compare view</a></li>
</ul>
</details>
<br />


Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.

[//]: # (dependabot-automerge-start)
[//]: # (dependabot-automerge-end)

---

<details>
<summary>Dependabot commands and options</summary>
<br />

You can trigger Dependabot actions by commenting on this PR:
- `@dependabot rebase` will rebase this PR
- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it
- `@dependabot merge` will merge this PR after your CI passes on it
- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it
- `@dependabot cancel merge` will cancel a previously requested merge and block automerging
- `@dependabot reopen` will reopen this PR if it is closed
- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually
- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)
- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)
- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)
- `@dependabot use these labels` will set the current labels as the default for future PRs for this repo and language
- `@dependabot use these reviewers` will set the current reviewers as the default for future PRs for this repo and language
- `@dependabot use these assignees` will set the current assignees as the default for future PRs for this repo and language
- `@dependabot use this milestone` will set the current milestone as the default for future PRs for this repo and language
- `@dependabot badge me` will comment on this PR with code to add a "Dependabot enabled" badge to your readme

Additionally, you can set the following in your Dependabot [dashboard](https://app.dependabot.com):
- Update frequency (including time of day and day of week)
- Pull request limits (per update run and/or open at any time)
- Out-of-range updates (receive only lockfile updates, if desired)
- Security updates (receive only security updates, if desired)



</details>
Similar to `heim::process::Process::usage` it should calculate the CPU load ratio.

Both aggregated and per-CPU functions should be implemented.
Your FOSSA integration was successful! Attached in this PR is a badge and license report to track scan status in your README.

Below are docs for integrating FOSSA license checks into your CI:

- [CircleCI](https://docs.fossa.io/docs/circleci)
- [TravisCI](https://docs.fossa.io/docs/travisci)
- [Jenkins](https://github.com/fossas/fossa-jenkins-plugin)
- [Other](https://github.com/fossas/fossa-cli)
`heim` could show the same info that [`dmidecode::System`](https://docs.rs/dmidecode/0.3.1/dmidecode/system/struct.System.html) does
Current implementation of `heim::Error` is far from a good one Error type, main problem being is that it is impossible to get source error details, as they are either hidden behind the `Box<dyn Error>` type or would require some additional public API (ex. get `::std::io::ErrorKind` from the `heim::Error`).

As most errors which can happen are some kind of IO failures, it seems that `heim::Error` can be rewritten as a newtype wrapping the `std::io::Error`.

Further investigation is required.
There is a Linux-specific API for a system utilization state exists: https://lwn.net/Articles/759781/

Would be nice to add it to `heim`, as it seems rather important. Things to think about:
 1. Which sub-crate should has it. `/proc/pressure/cpu` suits for `heim-cpu`, `/memory` for `heim-memory`, but what to do with an `/io` file?
 2. Old kernels does not has it, so API should return `Option<T>`
Output for 80d22680e1aa8e6c0427a17151ac190d356c0596 commit:

```
$ cargo bloat --release --time -j 1
Compiling ...

  Time Crate
62.25s syn
34.06s uom
19.20s heim_derive
10.05s nix
 9.82s cc
 6.48s proc_macro2
 5.45s heim_process
 4.89s libc
 4.35s futures_util
 3.87s heim_cpu
 3.56s heim_disk
 3.25s futures_executor
 3.21s raw_cpuid
 3.02s heim_sensors
 2.98s heim_memory
 2.72s heim_net
 2.39s memchr
 2.32s semver_parser
 2.23s num_rational
 2.21s heim_host
 2.12s num_traits
 1.93s threadpool
 1.89s heim_virt
 1.86s quote
 1.71s semver
 1.67s autocfg
 1.54s hex
 1.48s build_script_main
 1.46s num_cpus
 1.32s rustc_version
 1.32s num_integer
 1.19s heim_runtime
 1.04s platforms
 0.96s typenum
 0.91s heim_common
 0.83s bitflags
 0.67s macaddr
 0.63s futures_io
 0.45s futures_core
 0.43s futures_channel
 0.20s heim
 0.16s slab
 0.15s unicode_xid
 0.11s futures
 0.11s void
 0.11s lazy_static
 0.10s futures_sink
 0.07s cfg_if
 0.05s pin_utils
```

* [x] `syn` and `quote`: #111 
* [ ] `uom`? It is going to use the same `syn` version as `heim` does, this should cut the compilation time
* [x] `heim_derive` is based on the `syn` and `quote`, not much can be done there
* [ ] get rid of `nix` dependency? It is not used so much
* [ ] `RUSTFLAGS="-Z self-profile"` & https://github.com/rust-lang/measureme/tree/master/summarize
* [x] #157
Since `async_await` feature is merged now to Rust nightly and going to be published as part of 1.39 version, it is time to RIIAA (Rewrite It In Async-Await)!

It would be nice to publish the finished version right after the 1.39 release.
Since `utmp`/`wtmp` is [not available in musl](https://wiki.musl-libc.org/faq.html#Q:-Why-is-the-utmp/wtmp-functionality-only-implemented-as-stubs?), `host::users` stream will always be empty and any `host::User` method will panic, as there is no data to provide.

As for now, nothing will be implemented instead of the missing utmp routines, and this issue exists only as a note for anyone wondering why it does not work as intended.