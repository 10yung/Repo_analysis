hi, why don't you have a compatibility table or a list of compatibility versions (vs, nodejstools, node)?
I use vs2017, can I update the node js to 12.x lts? will debugging work?
Hi There I saw this information on your code section. 
**The "Output" link can be clicked to display the text that was printed to the console during the test, including the standard unittest output.**

Question 
I have a lot of test and it taking a lot of time to click the link to open the standard output screen .

Is there an option or setting that put the standard output screen were the link is ? so that when i click on a test i can see all the test detail summary in one place  
Breakpoints are not catching right away after I upgraded from Node 8 to Node 10.

When Node 8 was installed I could set a breakpoint on a global statement and it would hit.  Now, AFTER node runs first, I have to remove and re-add a breakpoint.  Once doing so all other breakpoints on the opened code window start working also.  It seems none of the breakpoints get registered properly BEFORE node runs the app.

![image](https://user-images.githubusercontent.com/2531435/66358763-57b36a00-e942-11e9-90bc-0c8de5c05bac.png)

Here you can see the `debugger` statement causes the debugger to hit there only, while all breakpoints do not work. Removing and adding any one breakpoint fixes all of them.

Rolling back to Node 8.16.1 fixes the issue and everything works as expected.

##### Expected Behavior 

Global scope breakpoint hit. 

##### Actual Behavior 

Breakpoint is not hit.

<!---(from Help -> About Microsoft Visual Studio)-->
- OS: Windows 10
- Visual Studio Version: VS 2017 15.9.16
- Node.js Version: 10.16.3

##### Steps to Reproduce
1. Create new node project in Visual Studio.
2. Download node installer to get the latest stable release of node, which is 10.16.3.  Upgrade node 8 to node 10.
3. Upgrade npm to the latest: npm install -g npm stable
4. Upgrade node installed via NPM to match the downloaded version (if necessary): npm install -g node@10.16.3
5. Create a module with a global statement and set a breakpoint on it.
6. Breakpoint is never hit.

I have a Mocha setup that uses module-alias and esm to load modules using ES6 import. That works fine when running that through npm using:
mocha --require module-alias/register --require esm "test/**/*.js"

I've added a mocha.json with the same require:
"require": [ "module-alias/register", "esm" ]

From the test log I can see that this configuration is read correctly, but the test discovery fails with an error message indicating that the ES6 import is not understood:

Test discovery error: mytest.js:1
(function (exports, require, module, __filename, __dirname) { import { assert } from 'chai'; 
                                                                     ^
SyntaxError: Unexpected token {
    at new Script (vm.js:79:7)
    at createScript (vm.js:251:10)
    at Object.runInThisContext (vm.js:303:10)
    [...]

This is the exact same error I get when running through npm without --require esm.
Test discovery not working for the default react template - dotnet new react.
Test adapter assumes that node_modules folder will be in root of a project, but in case of the react template it in ClientApp folder defined by SpaRoot property.
This patch adds code for handling SpaRoot property and overriding work directory based on it.

##### Expected 
Command on context menu `Build` builds .ts files.

##### Actual Behavior 
Command fails to execute as `tsc.exe` file no longer exists.

- NTVS Version: 1.5.10717.1 Commit Hash:c892fc71536f0cf66cc3c34359ae0b7e86fc0d6d
- Visual Studio Version: 16.3.0 Preview 2.0
- Node.js Version: 10.4.1

##### Steps to Reproduce
1. Create a new folder on the file explorer.
2. Open Visual Studio > File > Open > Folder
3. Choose the newly created folder.
4. Add a `tsconfig.json` file.
5. Right click the tsconfig.json > Build.
6. See error on output Tsc.

```
=== Build Started: C:\Program Files (x86)\Microsoft SDKs\TypeScript\3.6\tsc.exe -p "C:\Users\user\source\repos\OpenFolderError\tsconfig.json" ===
System.ComponentModel.Win32Exception (0x80004005): The system cannot find the file specified
   at System.Diagnostics.Process.StartWithCreateProcess(ProcessStartInfo startInfo)
   at System.Diagnostics.Process.Start()
   at Microsoft.VisualStudioTools.Project.ProcessOutput..ctor(Process process, Redirector redirector)
Error - Failed to start 'C:\Program Files (x86)\Microsoft SDKs\TypeScript\3.6\tsc.exe'
```

![image](https://user-images.githubusercontent.com/13305542/62250226-3877e980-b3a1-11e9-9226-de6d7db3a338.png)

I noticed other posts on the issue, which are now quite old.  Is it still the stance that this will not be supported at all?  I'm trying to get a seemingly simple thing to work, which is to not have the Visual Studio (2017) debugger detach when nodemon restarts NodeJS.  I imagine it happens because the NodeJS process terminates and restarts (but a port is being used, so it may just be the connection is lost).  Is there no way at all to have VS auto-reconnect to the port? Is it really that big of a problem to support this? If not, I may be forced to switch to VS Code (I'm sure I'm not the first or the last if this persists). I work for a large company and we are switching over to doing a lot with NodeJS.  If we convert projects over to VS Code we will just use that and stop using VS, which seems like a bad business choice for MS.
##### Expected Behavior 
New tests get discoverer

##### Actual Behavior
VS freezes

Here are the two stacks which contain both the file watcher service and the nodejs TestAdapter when the freeze occurs:

```
Not Flagged		16544	0	Main Thread	Main Thread	Microsoft.VisualStudio.Threading.dll!Microsoft.VisualStudio.Threading.NoMessagePumpSyncContext.Wait
mscorlib.dll!System.Threading.Tasks.Task.Wait(System.TimeSpan timeout)
Microsoft.VisualStudio.Threading.dll!Microsoft.VisualStudio.Threading.JoinableTaskFactory.WaitSynchronouslyCore(System.Threading.Tasks.Task task)
Microsoft.VisualStudio.Threading.dll!Microsoft.VisualStudio.Threading.JoinableTaskFactory.Run<string>(System.Func<System.Threading.Tasks.Task<string>> asyncMethod)
Microsoft.VisualStudio.Shell.UI.Internal.dll!Microsoft.VisualStudio.Services.FileChangeService.RunWithTracing<string>(Microsoft.VisualStudio.Services.FileChangeService.CompletionTracer tracer, System.Func<System.Threading.CancellationToken, System.Threading.Tasks.Task<string>> func)
Microsoft.VisualStudio.Shell.UI.Internal.dll!Microsoft.VisualStudio.Services.FileChangeService.UnadviseFileChange(uint cookie)
Microsoft.VisualStudio.Shell.UI.Internal.dll!Microsoft.VisualStudio.Services.FileChangeService.Microsoft.VisualStudio.Shell.Interop.IVsFileChangeEx.UnadviseFileChange(uint cookie)
Microsoft.NodejsTools.TestAdapterImpl.dll!Microsoft.NodejsTools.TestAdapter.TestFilesUpdateWatcher.RemoveFileWatch(string path)
Microsoft.NodejsTools.TestAdapterImpl.dll!Microsoft.NodejsTools.TestAdapter.TestContainerDiscoverer.OnProjectItemChanged(object sender, Microsoft.NodejsTools.TestAdapter.TestFileChangedEventArgs e)
Microsoft.NodejsTools.TestAdapterImpl.dll!Microsoft.NodejsTools.TestAdapter.TestFilesUpdateWatcher.FilesChanged.AnonymousMethod__0()
mscorlib.dll!System.Runtime.CompilerServices.AsyncMethodBuilderCore.MoveNextRunner.InvokeMoveNext(object stateMachine)
mscorlib.dll!System.Threading.ExecutionContext.RunInternal(System.Threading.ExecutionContext executionContext, System.Threading.ContextCallback callback, object state, bool preserveSyncCtx)
mscorlib.dll!System.Threading.ExecutionContext.Run(System.Threading.ExecutionContext executionContext, System.Threading.ContextCallback callback, object state, bool preserveSyncCtx)
mscorlib.dll!System.Runtime.CompilerServices.AsyncMethodBuilderCore.MoveNextRunner.Run()
mscorlib.dll!System.Runtime.CompilerServices.AsyncMethodBuilderCore.OutputAsyncCausalityEvents.AnonymousMethod__0()
mscorlib.dll!System.Runtime.CompilerServices.AsyncMethodBuilderCore.ContinuationWrapper.Invoke()
Microsoft.VisualStudio.Threading.dll!Microsoft.VisualStudio.Threading.JoinableTaskFactory.SingleExecuteProtector.TryExecute()
Microsoft.VisualStudio.Threading.dll!Microsoft.VisualStudio.Threading.JoinableTaskFactory.Run<bool>(System.Func<System.Threading.Tasks.Task<bool>> asyncMethod, Microsoft.VisualStudio.Threading.JoinableTaskCreationOptions creationOptions)
Microsoft.VisualStudio.Shell.UI.Internal.dll!Microsoft.VisualStudio.Services.FileChangeService.RunWithTracing<bool>(Microsoft.VisualStudio.Services.FileChangeService.CompletionTracer tracer, System.Func<System.Threading.CancellationToken, System.Threading.Tasks.Task<bool>> func)
Microsoft.VisualStudio.Shell.UI.Internal.dll!Microsoft.VisualStudio.Services.FileChangeService.RunWithTracing(Microsoft.VisualStudio.Services.FileChangeService.CompletionTracer tracer, System.Func<System.Threading.CancellationToken, System.Threading.Tasks.Task> func)
Microsoft.VisualStudio.Shell.UI.Internal.dll!Microsoft.VisualStudio.Services.FileChangeService.SyncFile(string filename)
Microsoft.VisualStudio.Shell.UI.Internal.dll!Microsoft.VisualStudio.Services.FileChangeService.Microsoft.VisualStudio.Shell.Interop.IVsFileChangeEx.SyncFile(string filename)
Microsoft.VisualStudio.Editor.Implementation.dll!Microsoft.VisualStudio.Editor.Implementation.TextDocData.SuspendFileChangeNotification(string pszFilename, int fSuspend)
Microsoft.VisualStudio.Editor.Implementation.dll!Microsoft.VisualStudio.Editor.Implementation.TextDocData.BaseSave(string pszFilename, int fRemember)
Microsoft.VisualStudio.Editor.Implementation.dll!Microsoft.VisualStudio.Editor.Implementation.TextDocData.Save(string pszFilename, int fRemember, uint nFormatIndex)
Microsoft.VisualStudio.Editor.Implementation.dll!Microsoft.VisualStudio.Editor.Implementation.TextDocData.Save(string pszFileName, int fRemember)

Not Flagged		25740	0	Worker Thread	Worker Thread	Microsoft.VisualStudio.Threading.dll!Microsoft.VisualStudio.Threading.JoinableTaskFactory.WaitSynchronouslyCore
[Managed to Native Transition]
mscorlib.dll!System.Threading.Monitor.Wait(object obj, int millisecondsTimeout, bool exitContext)
mscorlib.dll!System.Threading.Tasks.Task.Wait(System.TimeSpan timeout)
Microsoft.VisualStudio.Threading.dll!Microsoft.VisualStudio.Threading.JoinableTaskFactory.WaitSynchronouslyCore(System.Threading.Tasks.Task task)
Microsoft.VisualStudio.Threading.dll!Microsoft.VisualStudio.Threading.JoinableTaskFactory.Run<int>(System.Func<System.Threading.Tasks.Task<int>> asyncMethod, Microsoft.VisualStudio.Threading.JoinableTaskCreationOptions creationOptions)
Microsoft.NodejsTools.TestAdapterImpl.dll!Microsoft.NodejsTools.TestAdapter.TestFilesUpdateWatcher.FilesChanged(uint cChanges, string[] rgpszFile, uint[] rggrfChange)
Microsoft.VisualStudio.Shell.UI.Internal.dll!Microsoft.VisualStudio.Services.FileChange.EventSinkBundle.FilesChanged(string[] files, uint[] changes, string traceInfo)
Microsoft.VisualStudio.Shell.UI.Internal.dll!Microsoft.VisualStudio.Services.FileChange.NotificationPool.FileChangeJob.ProcessCore(System.Threading.CancellationToken cancellationToken)
Microsoft.VisualStudio.Shell.UI.Internal.dll!Microsoft.VisualStudio.Services.FileChange.NotificationPool.Job.Process(System.Threading.CancellationToken cancellationToken)
Microsoft.VisualStudio.Shell.UI.Internal.dll!Microsoft.VisualStudio.Services.FileChange.NotificationPool.ProcessNotificationsAsync(Microsoft.VisualStudio.Services.FileChange.NotificationPool.AsyncJobQueue queue, bool callInBackground, System.Threading.CancellationToken token)
[Resuming Async Method]
mscorlib.dll!System.Runtime.CompilerServices.AsyncMethodBuilderCore.MoveNextRunner.InvokeMoveNext(object stateMachine)
mscorlib.dll!System.Runtime.CompilerServices.YieldAwaitable.YieldAwaiter.RunAction(object state)
mscorlib.dll!System.Threading.QueueUserWorkItemCallback.System.Threading.IThreadPoolWorkItem.ExecuteWorkItem()
mscorlib.dll!System.Threading.ThreadPoolWorkQueue.Dispatch()
mscorlib.dll!System.Threading._ThreadPoolWaitCallback.PerformWaitCallback()
[Native to Managed Transition]

```

- NTVS Version: 1.5.10610.1 Commit Hash:529a87de2769e143655e31ea81795c42e5775ef8
- Visual Studio Version: 16.2 preview 4
- Node.js Version: 8.1.4

##### Steps to Reproduce
1. Open a csproj and add a javascript test file
2. Update the file and run build
3. Sometimes the tests get rediscovered and sometimes VS freezes

Note that as part of these I was often closing/reopening projects and deleting/creating the javascript files.

##### Expected Behavior 
The TestContainerDiscoverer class is responsible for notifying the TestWindow of containers where tests should be discovered. It should call the TestContainersUpdated event whenever tests could potentially have changed.

My expectation is that OnProjectLoaded and OnProjectUnloaded should send the TestContainersUpdated event.

##### Actual Behavior
If you would put a breakpoint you can see that the OnTestContainersChanged is called, but the if condition evaluates to false and the event isn't actually sent, meaning that tests don't get removed on project close and don't get discovered on project open.

<!---(from Help -> About Microsoft Visual Studio)-->
- NTVS Version: 1.5.10610.1 Commit Hash:529a87de2769e143655e31ea81795c42e5775ef8
- Visual Studio Version: 16.2 preview 4
- Node.js Version: 8.1.4

##### Steps to Reproduce
1. Open a nodejs project
2. Run build to discover tests
3. Unload the project
4. If the event would have been sent successfully the tests for the unloaded project should disappear

In the OnProjectUnloaded method the project is removed from `knownProjects` and this makes the if condition always fail, whereas in the OnProjectLoaded method the newly created project has HasRequestedContainers set to false making the if condition always fail.

<!--- To report a bug, please fill out the fields below. Feel free to add additional information too.
        For feature requests or questions, you can clear this text.  -->

##### Expected Behavior 
Unable to find RemoteDebug,js
##### Actual Behavior 

<!---(from Help -> About Microsoft Visual Studio)-->
- NTVS Version: Not able to find the version
- Visual Studio Version: 2019 Community 
- Node.js Version: 8.9.1

##### Steps to Reproduce
1. 
2. 
