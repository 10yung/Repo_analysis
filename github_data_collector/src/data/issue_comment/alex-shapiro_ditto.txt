Hi

Could you comment / compare ditto implementation with [JSON CRDT paper](https://arxiv.org/abs/1608.03960) ( [PDF](http://arxiv.org/pdf/1608.03960.pdf) )?

Is it using same principles and algorithms or not? What are the differences?


There are Scala and Haskell implementations of JSON CRDT based on that paper:
- https://github.com/fthomas/crjdt
- https://github.com/amarpotghan/crjdt-haskell

In some cases I'd like to define a specific `site_id` that can now be done with `new_with_id`.

Adds `List::iter(&self)`

I'll likely be wanting iterators for Set and Map soon as well, I'll send PR's as needs come up
Curious if this supports garbage collection concepts?
I'd love to use this with a JavaScript front-end. Any recommendations for having it work with a JavaScript client over HTTP?

Also, are you basing this library on CvRDTs (convergent replicated data types) or CmRDTs (commutative replicated data types)?
It would be nice if Site ID was not limited to `u32` as a datatype, and instead could be anything that implements the traits needed to function.  (I.e, Serde traits + `Eq` and `Hash`).  I'm not sure how tightly coupled the implementation is to u32 at the moment.

This would allow a more decentralised approach at Site IDs, by using something such as a Random [UUID](https://github.com/uuid-rs/uuid) to be used in place of a `u32`
Right now, Ditto discards any REMOVE op that is received before its corresponding INSERT op. This leads to inconsistencies in the following case:

site1: INSERT(A) -> op1
site2: EXECUTE(op1)
site2: REMOVE(A) -> op2
site3: EXECUTE(op2)
site3: EXECUTE(op1)

This PR fixes the bug by caching any REMOVE op received before its corresponding INSERT op and executing the REMOVE op once the INSERT has been executed.