`simple-http-server -p 8080 .` and then run `curl 'localhost:8080/%ff'` and the thread panics. Backtrace says the issue is on line 369 of `main.rs`.
After several times of LAN Gigabit network test download 10G single file, the download speed is never reached the limit, the speed is about 60-80MB / s, but I use the go language version of the HTTP server, the speed can reach the hardware limit, the speed is about 98MB /s, and the speed is very stable.
For example this HTTP SERVER: https://github.com/stewart/http-server
Is it a question of programming language efficiency? Is there room for improvement? Because the go language program is too large, I don't want to use it.
Could be done by using https://github.com/Byron/open-rs
Simple instructions are missing how to use the app with a proxy server like nginx or apache and how to turn it into a self-starting systemd-service.
I would be nice to have a github/gitlab like  feature to automatically render README.md or other markdown files.

It would be nice to create folder within the browser

Hi, this simple http server is a real fantasy one. However, I think if there is a simple file name filter would make it even better. For instance, sometimes, there are lots of log files in a folder, and a filter option like `--filterfalse=*.log` is an easy way to ignore them, and serving a cleaner directory.
While experimenting with WebAssembly I found that (at least in Firefox) WebAssembly.instantiateStreaming() requires `.wasm`-resources to be delivered as `application/wasm`. Otherwise you end up with "TypeError: Response has unsupported MIME type".

Since `application/wasm` doesn't seem to be official, yet (https://www.iana.org/assignments/media-types/media-types.xhtml#application) I cannot expect `simple-http-server` to include this binding.

It would be helpful to be able to add bindings between file extensions and mime types via command line.