There are many files in JUCE that contain `#include "../JuceLibraryCode/JuceHeader.h"`, though there is no such `JuceHeader.h` file at that relative location. For instance:

https://github.com/WeAreROLI/JUCE/blob/724ae27c71ef809b836df06713cf9e50bc14162b/examples/DemoRunner/Source/Demos/JUCEDemos.cpp#L27
but [`JUCE/examples/DemoRunner/Source/JuceLibraryCode/JuceHeader.h` doesn't exist](https://github.com/WeAreROLI/JUCE/blob/724ae27c71ef809b836df06713cf9e50bc14162b/examples/DemoRunner/Source/JuceLibraryCode/JuceHeader.h).

The code compiles because the `JuceLibraryCode` folder itself is part of the include search path. In more details:
- the compiler first fails to find `JuceHeader.h` relatively to the source file that includes it,
- it falls back to the include search path,
- it resolves `../JuceLibraryCode/JuceHeader.h` from `JuceLibraryCode`, which always works for any project generated by Projucer.

Since JUCE 4.2.0, Projucer has always added the `JuceLibraryCode` folder to the include search path, so it is safe to write `#include <JuceHeader.h>` in any project generated by Projucer.

Thus I propose to always use `#include <JuceHeader.h>`. It is shorter, it stands out from the other relative includes, and it is always correct. Also, it simplifies a bit the code of Projucer, which doesn't have to deal with computing relative paths to `JuceHeader.h` anymore.

@ed95 @tpoole feel free to merge at will!
Please include:

  1) detailed steps on how to reproduce the bug, preferably with already
     existing JUCE code such as the demo plugin or the demo code

- Create a class that inherits from `DragAndDropContainer` and implements `dragOperationStarted()`
- Add a child Component that calls `DragAndDropContainer::startDragging()` on `mouseDrag`

See example code below, which can be used as the MainComponent.h in the standard Projucer GUI app:

```


#pragma once

#include "../JuceLibraryCode/JuceHeader.h"

struct DraggableComp : public Component
{
    void paint(Graphics& g)
    {
        g.fillAll(Colours::red);
    }
    
    void mouseDrag(const MouseEvent& event)
    {
        auto *dragContainer = DragAndDropContainer::findParentDragContainerFor(this);
        dragContainer->startDragging("Test", this);
    }
};


class MainComponent   : public Component, public DragAndDropContainer
{
public:
   
    MainComponent()
    {
        addAndMakeVisible(comp);
        setSize (600, 400);
    }
    ~MainComponent() {}

    void paint (Graphics& g) override
    {
        g.fillAll (getLookAndFeel().findColour (ResizableWindow::backgroundColourId));
    }
    
    void resized() override
    {
        comp.setBounds(getLocalBounds().reduced(100));
    }

private:

    DraggableComp comp;
    
    void dragOperationStarted (const DragAndDropTarget::SourceDetails& details)
    {
        DBG(details.localPosition.toString());
    }

    JUCE_DECLARE_NON_COPYABLE_WITH_LEAK_DETECTOR (MainComponent)
};
```

  2) the expected behaviour

`localPosition` contains the actual position of the mouse when drag started.

  3) the operating system

macOS Catalina

  4) the architecture (32-bit or 64-bit)
64-bit

  5) a stack trace - if the bug causes a crash
N/A

  6) the plugin format (VST2, VST3, AU, AAX, RTAS) - if applicable
N/A

  7) which DAW you observed the bug in - if applicable
N/A



  1) detailed steps on how to reproduce the bug, preferably with already
     existing JUCE code such as the demo plugin or the demo code

File: juce_video/native/juce_mac_CameraDevice.h.  

Function: getAvailableDevices()   (line 239)

Since Apple's switch from Quicktime to AV (back in 2017), and the rewrite of this class, this function does not return the available camera devices. Rather, it only returns: "default". 

This issue can be clearly identified in lines 239-244, and shown in practice with the camera demo.

This has also been brought up previously here: https://forum.juce.com/t/webcam-support-incomplete-for-mac/24633/4

  2) the expected behaviour

It should return a list of the available camera devices, not just "default".

  3) the operating system

Only macOS. (juce_**mac**_CameraDevice.h)


  4) the architecture (32-bit or 64-bit)
  5) a stack trace - if the bug causes a crash
  6) the plugin format (VST2, VST3, AU, AAX, RTAS) - if applicable
  7) which DAW you observed the bug in - if applicable
n/a



`getProgramName` unconventionally returns `const String` rather than just `String`, and so triggers various warnings. Besides having no advantage AFAICS*, `clang-tidy` triggers the `readability-const-return-type` warning on this.

This is a breaking change for existing overriders, though (*which is a valid reason to keep as-is, though not a great one), so if the pull request is accepted it should also be listed under the breaking changes.
  1) 
code: latest develop branch.
Juce window doesn't go front sometimes when it first runs.
It shows but it's behind the explorer window, not in the foreground.
![juce](https://user-images.githubusercontent.com/5846696/70788939-f76ef780-1dcc-11ea-929d-45684ddc4966.gif)

  2) the expected behaviour
juce window should go front when I double click it or right open it.
  3) the operating system
Windows 10, Windows 7
  4) the architecture (32-bit or 64-bit)
64-bit
  5) 
```C++
void HWNDComponentPeer::setVisible (bool shouldBeVisible) override
{
    ShowWindow (hwnd, shouldBeVisible ? SW_SHOWNA : SW_HIDE);
    Logger::getCurrentLogger()->writeToLog(
        String::formatted("%lld ShowWindow %p, %d", Time::getHighResolutionTicks(), hwnd, shouldBeVisible));

    if (shouldBeVisible)
        InvalidateRect (hwnd, 0, 0);
    else
        lastPaintTime = 0;
}
```
Juce call ShowWindow(hwnd, SW_HIDE) 4 times before setVisible (true)

194928283613 ShowWindow 000C0876, 0
194928327010 ShowWindow 000D0876, 0
194928354808 ShowWindow 000E0876, 0
194928525014 ShowWindow 000F0876, 0
194928903124 ShowWindow 000F0876, 1


I was testing our plug-ins in Waveform 10 Windows with HiDpi enabled and encountered this bug.

As I assume it’s built with Juce, I believe this is the right place to report this.
All other hosts I’ve tested (Cubase, Studio One, FL Studio, Wavelab, Bitwig …) expect to send and receive mouse coordinates in screen / device pixels (unlike macOS which works in device-indepent coordinates) - this is a legacy of win32 I believe.

The result is that the context menu is displayed at the wrong coordinates (Waveform must be applying dpi ratio a second time), as can be seen on the screenshot below (using a vst3 official sample just to check it’s not a bug in our code).


![image](https://user-images.githubusercontent.com/1681470/69822167-f7d09580-1205-11ea-93f1-c2c521256373.png)



It was a missing feature on Linux.

I declare all my changes are licensed under MIT or ISC or whatever liberal.
- edited modules/juce_core/native/win32_Network.cpp to return a broadcast address for a given IP address on Windows

- no idea how good/correct this is, but it works for me as it should (as far as I can tell)

- see https://forum.juce.com/t/ipaddress-getinterfacebroadcastaddress-on-windows