@kjk 
Whilst testing some bookmarks handling I noticed Bold and Italic fonts as used by Tracker software do not reflect what is shown in SumatraPDF, unclear which is right but Acrobat agrees with Tracker?
Test sample [Tracker bookmarks.pdf](https://github.com/sumatrapdfreader/sumatrapdf/files/4081926/Tracker.bookmarks.pdf)
The difference appears to be due to a reversal in code (there may be more but the obvious ones are)


    src/BaseEngine.h approx line 205
    None = 0x0,
    Bold = 0x1,
    Italic = 0x2,

     src/PdfEngine.cpp  approx line 1700
    // TODO: not sure about the mappings yet
    if (flags & 0x1) {
        res = res | TocItemFlags::Italic;
    }
    if (flags & 0x2) {
        res = res | TocItemFlags::Bold;
    }
    if ((flags & ~0x3) != 0) {
        // TODO: is there more?
        CrashMe();

![image](https://user-images.githubusercontent.com/12754913/72671454-549c3f80-3a42-11ea-87df-0baf89b9d0e6.png)


To check chm handling including utf-8 characters I use Windows 10 System Help files for other languages. That does not mean they are error free, but they should be reasonable?

Since chm can used in two modes I tested in both and with these files there are the expected differences in page numbers per mode.

However, what was unexpected was missing entries after some bookmarks.
 And secondly this was more evident in FixedPageUI
The different behaviours including in the English file suggest it may not be simply down to rogue characters but some other cause.

[chm.bkm from fixedUI-false.zip](https://github.com/sumatrapdfreader/sumatrapdf/files/4080493/chm.bkm.from.fixedUI-false.zip)
[chm.bkm from fixedUI-true.zip](https://github.com/sumatrapdfreader/sumatrapdf/files/4080497/chm.bkm.from.fixedUI-true.zip)




My current comic book reader automatically opens book #2 when I'm at the end of book #1. This feature would help me move over to sumatrapdf as my only cbz, cbr reader. 
Whilst it is commendable there is a settings for default scaling it causes problems that it is initially set to "shrink"
https://github.com/sumatrapdfreader/sumatrapdf/blob/106404f68b2bed7192338304ea038de0042cd8bb/src/SettingsStructs.h#L471

So as to avoid some problems with scale I understand that it is better to set reduced to "shrink" rather than expand to "fit" 

However it would be better if it starts at "none" see forum issue https://forum.sumatrapdfreader.org/t/pdf-will-not-print-to-page-size/2626/7

**P.S there is also the confusion if it should be "none" or "noscale" as used for CLI, thus it would also help if the internal argument and external argument were identical**

see https://github.com/sumatrapdfreader/sumatrapdf/blob/a693cdc0b0195756d6c77b0a7aa0435e013ead87/src/Print.cpp#L494
https://github.com/sumatrapdfreader/sumatrapdf/blob/a693cdc0b0195756d6c77b0a7aa0435e013ead87/src/Print.cpp#L778

I would recommend "noscale" as the more informative
Totally clean installation of windows 10 thus no history
Install SumatraPDF for First user no problems
That's an admin account, So install for a secondary user, expecting all first user pointers would be ignored, Install appeared to go well I should have twigged that I did not need to select options as they were "ALREADY" selected !

![image](https://user-images.githubusercontent.com/12754913/72573102-81bee580-38bc-11ea-8492-4946bd26ac3d.png)

It took hours to fully untangle the registry settings, remove the first user install and revert to "Program Files" for both users
see comment https://github.com/sumatrapdfreader/sumatrapdf/issues/1287#issuecomment-561455503 by @sumatrapeter :-)
I think it is easier to illustrate with screen grabs if you need more info let me know

![image](https://user-images.githubusercontent.com/12754913/72555641-e5cdb380-3894-11ea-95e7-0eec72a6ef65.png)

**Request:** Add method for external programs to get the filepath to the active document in a particular SumatraPDF window via SendMessage.

**Why:** Makes it easier for external programs to interact with the document file and its related .smx annotations file.

**What is already possible:** If advanced setting `FullPathInTitle = true` is set then the active document's filepath can be parsed from the window title. Works, but at the cost of filename not visible to user in the window title if the path is very long.

**Code for illustration/discussion:** Below are my two hacky attempts to add this to SumatraPDF.

**1. clipboard method:** Makes SumatraPDF receptive to a new message and in reaction add the active document filepath to the clipboard.

Gist with code to add to two SumatraPDF source files.
https://gist.github.com/nod5/51c906f89f6a04995f5ced920e4c909d
Tested on SumatraPDF source from 2020-01-15.

This clipboard method works quickly and reliably so far. The external program can be made to backup/restore the previous clipboard data before/after the extraction. But still, it would be better to avoid using clipboard I think.

**2. wm_copydata method:** Makes SumatraPDF receptive to a new message and in reaction pass the active document filepath via WM_COPYDATA

Gist with code to add to two SumatraPDF source files.
https://gist.github.com/nod5/086cd1ebbe7ed94520abae1c17646e2b
Tested on SumatraPDF source from 2020-01-15.

The wm_copydata code is not yet working! I successfully receive a message back to the external program and get correct dwData from it. Looks like cbData is correct too. But lpData turns out garbled/"asian characters". Can you spot errors in my code? (Can also be errors in my receiver code, I'll keep troubleshooting that too.)
**Request:** Add method for external programs to get the document canvas X Y position under the mouse cursor in pt unit (same unit that .smx files use for highlights) via SendMessage.

**Why:** External programs can use the X Y data to interact with annotations under the mouse by parsing the .smx file. Possible use cases: Detect click on annotation or mouse-over annotation. React by adding/removing annotation, change annotation color/style, ...

**What is already possible:** We can send key "m" to make SumatraPDF show a small cursor position helper notification in the top left corner of the document. Then repeat "m" until the notification shows pt units. Then continually parse the text from that control as the mouse cursor moves. That's what I do in sumatra_highlight_helper. Works, but can miss highlights if the mouse moves rapidly. And not silent because of the notification.

**Code for illustration/discussion:** Below is my hacky attempt to add this to SumatraPDF. Compiles and works silently without issues so far in my own very limited tests. It seems this method can read the position more quickly compared to the old method above.

**Gist with code to add to two SumatraPDF source files.**
https://gist.github.com/nod5/ff6f78e9c16e5dfc9442ad607c120234
Tested on SumatraPDF source from 2020-01-15.

**Overview:** The added code makes SumatraPDF listen for a new wm_command message and react by sending back canvas X Y position under mouse cursor as that message's return LRESULT data. The passed X Y data is two numbers with up to 4 digits each so will fit packed in the LRESULT. No extra WM_COPYDATA step needed.

I assumed a gist was best when only discussing the topic. Can make a PR if asked, but assume my code needs changes.

**Partly related issue:**
#884 on error in position notification data in FixedUI .epub (or at least mismatch with data in .smx)
@kjk Probably too premature but out of interest added several random windows.chm together then attempted to print to pdf

[update] just to confirm it is not file type as such since just a few pages of a couple of pdf files will crash when attempting to print the.vbmk

[sumatrapdfcrash.zip](https://github.com/sumatrapdfreader/sumatrapdf/files/4067477/sumatrapdfcrash.zip)

SumatraPDF is historically biased to keyboard usage and the only way to improve on usage for touch users is to ensure many of those key combinations are accessible with minimal cascading of sub menus, via the menu bar or  the context menus which is slower due to the wait after "hold"ing 

Pre-release updates have helped in one or two cases by showing more contextual entries.

The sometimes "impossible" to reach functions are those like "hovering" over a comment which thus requires hold which does NOT ALWAYS show comment then tap copy and paste to a separate window just to see that it could be ignored :-(

This limitation could also impact other feature requested "tooltip" suggestions such as those to say read tab filenames, it would be much better for tablet users if a right click/long touch were to "hint / display" the full path and name and optionally other copyable data much like file properties.

