The quality of the tests must be improved. In my opinion, we must get rid of any single `time.Sleep` which leads to non-deterministic tests.

As a first proposition, I created this PR: https://github.com/ReactiveX/RxGo/pull/206

Basically, we can use a DSL this way:

```go
observables := mockObservables(t, `
1
	2
3
	4
x
	x
`)
```
Each column represents an observable emitting item. The first observable will produce the items `1`, `3` and will close (`x`) whereas the second observable will produce the items `2`, `4` and will close.

This code will produce observables from which iterating over the internal iterator where causality is **guaranteed**. It means `1` will be handled before `2`, `2` before `3` etc. regardless of the execution context. It is also possible to send an error item with the character `e`.

Hi, I've implemented Debounce operator + tests
#200 resolves an infinite loop due to requesting a new iterator for each loop, and break causing a short circuit of the wait group resulting in the Merge observable never terminating.
The emitter lambda of the Merge operator requests a new iterator in each repetition of the for loop. For at least 'iterableFromSlice' and probably in the general case of any iterable which does not consume the iterated (iterableFromRange?), this repeats the first iteration infinitely.
The tests related to hot observables (_when creating a hot observable_) are not deterministic. We need to fix them.
Since I'm not doing much this weekend I've decided to implement another one. ðŸ˜› 

I'm not really sure if `Timestamped` should be an exported interface and have an internal struct implementing it just like `Observable` and `observable`. Let me know if that's the case.

Closes #145 
Hi @teivah, this is my first stab at contributing to a Go project and I'm just getting started with Go.
From what I've seen of the other implementations this one seems right, but I might have missed something.

Could you please review my code so I can then add docs to the operator? :)

Closes #143 
We need to update `.travis.yml` file to use dependencies using Go modules instead of `go get` just like today.
We should create a PR to https://github.com/ReactiveX/reactivex.github.io in order to document how RxGo fits in the existing ReactiveX ecosystem and to add RxGo documentation to existing operators.
Once the v2 becomes to be stable, we need to update the README and the examples provided within the project. 