We have User Activation v2 model in the HTML spec now.  "Triggered by user activation" should now be changed accordingly.  See the HTML issue mentioned below.
The "Security and Privacy Considerations" section focuses primarily on security. It should mention privacy considerations such as device fingerprinting.
Chrome protects a list of USB interface classes from being claimed. As with the vendor and product ID block list this should be part of the specification.
Wireless USB is, roughly, a way for a device to be connected wirelessly to a system and be treated more-or-less transparently like a wired USB device. The current draft doesn't mention Wireless USB at all so it isn't clear if it has been considered. In particular, it isn't clear if there are any special considerations needed for Wireless USB used in conjunction with WebUSB, especially regarding security.

The current draft only mentions "wireless" once: "While wireless protocols such as Bluetooth". I think contrasting USB with wireless protocols doesn't make sense given that USB devices are also potentially wireless.

Note that the Linux kernel's default behavior is "authorizing all wired USB devices but wireless USB devices are de-authorized by default." according to https://www.phoronix.com/scan.php?page=news_item&px=Linux-5.1-USB-Auth-Default-2. This indicates to me that special considerations for Wireless USB are likely necessary for WebUSB too.
Figure out the best way to allow sites to see all of the device permissions that they have, even if the devices are not currently connected to the system.

This could perhaps be done by extending `getDevices()` to have the option to return non-connected devices.

However, it also makes more sense for the Permissions API to return all permissions, including the ones for devices that are not currently connected to the system.

Implementing such a feature would enable developers to skip their permissions request UI if they already have permission to access a devices, and instead tell their users to connect the USB device supported by the site.
I don't think anything needs to change in the algorithms to support Web Workers but we should add a worker example to the spec. I don't think we have to do that in this patch. Wait until we've added a worker to an existing WebUSB app and have a sense of the best practices.

_Originally posted by @reillyeon in https://github.com/WICG/webusb/pull/130_
My computer just received a windows update and now cannot recognize the microcontroller i have programmed via Arduino IDE. It is a Sparkfun Breakout ATmega32u4 programmed as a Arduino Micro. I works fine on a Mac but is not recognized on Windows. I am using chrome for testing through localhost:8000. My microcontroller is also not recognized following the instructions on the demo anymore. Is anyone else having this problem and is their a solution. I was thinking maybe thee was a problem with the serial drivers.
The use case here is that if there is a process which may be repeated over a set of devices or a set of devices act in concert (maybe a bunch of individual WebLights being used for different indicators) then it is a poor user experience to manually repeat the process of selecting them one at a time. The simplest proposal would be a `navigator.usb.requestDevices()` method which returns a `Promise<sequence<USBDevice>>`.
I think the specification leaves unclear that the WebUSB Platform Capability Descriptor is not mandatory for the browser to access the device.

Afaik the Platform Capability Descriptor is as of now only used for Landing Page notifications, and eventually might be used for Operating Systems to provide adequate permissions for the browser to access the device (Linux where browser is not root for eg).

Notes on other prospective uses might be useful for device manufacturers to decide if to include or not the WebUSB Platform Capability Descriptor.
Originally, WebUSB had mandatory whitelist for USB devices

While I sort-of understand the motivation for removing the mandatory descriptor whitelist, please reconsider adding at least an optional whitelist (optional for the HW, but enforced by the browser if present). When a device already implements [WebUSB Platform Capability Descriptor](https://wicg.github.io/webusb/#webusb-platform-capability-descriptor) with welcome page, the implementer can easily add other domains.

---

Access to raw USB device is perhaps more crucial than cross-origin requesting, that is nowadays restricted by CORS headers etc, and can lead to unintended consequences, as has been noted (https://github.com/WICG/webusb/issues/50). We are using WebUSB for our [devices that we are now shipping](https://preorder.trezor.io/), and while we do like the technology (the API is nice!), we would like to be able to restrict websites, that access the device.

Even when the security model of our device assumes that the computer might be compromised (it is the entire point of a hardware wallet), it is still good to have additional checks, as has been highlighted by [some recent attacks](https://www.wired.com/story/chrome-yubikey-phishing-webusb).