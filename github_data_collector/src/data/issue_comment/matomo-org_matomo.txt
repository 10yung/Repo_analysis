When I update matomo from 3.13.0 to 3.13.1, --php-cli-options seems not to be valid with console core:archive.

sudo -u nginx ./console core:archive --force-all-websites --force-all-periods=315576000 --force-date-last-n=1000 --url='http://example.com' --php-cli-options="-d memory_limit=8G"

....

PHP Fatal error:  Allowed memory size of 134217728 bytes exhausted (tried to allocate 16384 bytes) in /var/www/matomo/libs/Zend/Db/Statement/Pdo.php on line 228

Hello everyone,

Over the past few days multiple websites of mine are being targeted by automated SQL injection attempts. While these attacks are significant in numbers, they pose no real threat with proper security.

Unfortunately, these attacks cause something entirely different. They fill up the matomo database with garbage... and I mean... A LOT of garbage. Thousands upon thousands of SQL data that I need to delete manually.

In some cases, the attacker is using the same IP address over and over, which makes things a bit easier. I use the visitor ID with the following SQL command to delete garbage data:

```sql
DELETE piwik_log_visit, piwik_log_link_visit_action, piwik_log_conversion 
FROM piwik_log_visit 
LEFT JOIN piwik_log_link_visit_action ON piwik_log_visit.idvisit = piwik_log_link_visit_action.idvisit 
LEFT JOIN piwik_log_action ON piwik_log_action.idaction = piwik_log_link_visit_action.idaction_url 
LEFT JOIN piwik_log_conversion ON piwik_log_visit.idvisit = piwik_log_conversion.idvisit 
WHERE lower(conv(hex(piwik_log_visit.idvisitor), 16, 16)) = '1234567890123456';
```

So what do these SQL injection attempts look like? Here are two examples, where the attacker is attempting to inject URL encoded SQL commands in the campaign parameter utm_source:

Example 1
```
?utm_source=%28SELECT%20%28CASE%20WHEN%20%282967%3D1288%29%20THEN%202967%20ELSE%202967%2A%28SELECT%202967%20FROM%20INFORMATION_SCHEMA.CHARACTER_SETS%29%20END%29%29
```

Example 2
```
?utm_source=online%29%20UNION%20ALL%20SELECT%20NULL%2CNULL%2CNULL%2CNULL%2CNULL%2CNULL%2CNULL%2CNULL%2CNULL%2CNULL%23
```

Unfortunately these long strings are decoded by matomo and stored as strings in the database, thus they also appear in the user interface.

I'm opening this feature request, to ask for a "better" method to deal with such problems, maybe a new plugin that allows the admin to type certain keywords like the visitor ID, or an IP address, and have everything related deleted from the database.

Thank you.

hy

I am showing Matomo inside an iFrame to my customers. Since I upgraded from 3.13.0 the auto login does not work anymore (HTTP 403).

If I copy the iframe url to a new tab the autologin works as expected.

Best regards

nik


In matomo.log I get:
```
ERROR API[2020-01-17 18:39:17 UTC] [57710] Uncaught exception in API: Piwik\NoAccessException: Ihre Sitzung ist aufgrund Inaktivität abgelaufen. Bitte melden Sie sich an um fortzufahren. in /srv/websites/tracker/piwik/core/Access.php:728
ERROR API[2020-01-17 18:39:17 UTC] [57710] Stack trace:
ERROR API[2020-01-17 18:39:17 UTC] [57710] #0 /srv/websites/tracker/piwik/core/Access.php(491): Piwik\Access->throwNoAccessException('Ihre Sitzung is...')
ERROR API[2020-01-17 18:39:17 UTC] [57710] #1 /srv/websites/tracker/piwik/core/Piwik.php(545): Piwik\Access->checkUserHasSomeViewAccess()
ERROR API[2020-01-17 18:39:17 UTC] [57710] #2 /srv/websites/tracker/piwik/plugins/LiveTab/API.php(23): Piwik\Piwik::checkUserHasSomeViewAccess()
ERROR API[2020-01-17 18:39:17 UTC] [57710] #3 [internal function]: Piwik\Plugins\LiveTab\API->getSettings()
ERROR API[2020-01-17 18:39:17 UTC] [57710] #4 /srv/websites/tracker/piwik/core/API/Proxy.php(237): call_user_func_array(Array, Array)
ERROR API[2020-01-17 18:39:17 UTC] [57710] #5 /srv/websites/tracker/piwik/core/Context.php(28): Piwik\API\Proxy->Piwik\API\{closure}()
ERROR API[2020-01-17 18:39:17 UTC] [57710] #6 /srv/websites/tracker/piwik/core/API/Proxy.php(328): Piwik\Context::executeWithQueryParameters(Array, Object(Closure))
ERROR API[2020-01-17 18:39:17 UTC] [57710] #7 /srv/websites/tracker/piwik/core/API/Request.php(265): Piwik\API\Proxy->call('\\Piwik\\Plugins\\...', 'getSettings', Array)
ERROR API[2020-01-17 18:39:17 UTC] [57710] #8 /srv/websites/tracker/piwik/plugins/API/Controller.php(41): Piwik\API\Request->process()
ERROR API[2020-01-17 18:39:17 UTC] [57710] #9 [internal function]: Piwik\Plugins\API\Controller->index()
ERROR API[2020-01-17 18:39:17 UTC] [57710] #10 /srv/websites/tracker/piwik/core/FrontController.php(589): call_user_func_array(Array, Array)
ERROR API[2020-01-17 18:39:17 UTC] [57710] #11 /srv/websites/tracker/piwik/core/FrontController.php(165): Piwik\FrontController->doDispatch('API', false, Array)
ERROR API[2020-01-17 18:39:17 UTC] [57710] #12 /srv/websites/tracker/piwik/core/dispatch.php(34): Piwik\FrontController->dispatch()
ERROR API[2020-01-17 18:39:17 UTC] [57710] #13 /srv/websites/tracker/piwik/index.php(27): require_once('/srv/websites/t...')
ERROR API[2020-01-17 18:39:17 UTC] [57710] #14 {main}
```

this is the same PR as #11031 and finally fixes #6093

```
➜  ~/public_html/piwik git:(4.x-dev) ✗ l piwik.*
Permissions Size User  Date Modified Name
.rw-r--r--   68k lukas 17 Jän 16:47  piwik.js
.rw-r--r--   59k lukas 17 Jän 16:47  piwik.old.js
➜  ~/public_html/piwik git:(4.x-dev) ✗ gzip piwik.*
➜  ~/public_html/piwik git:(4.x-dev) ✗ l piwik.*
Permissions Size User  Date Modified Name
.rw-r--r--   23k lukas 17 Jän 16:47  piwik.js.gz
.rw-r--r--   19k lukas 17 Jän 16:47  piwik.old.js.gz
related to https://github.com/matomo-org/matomo/pull/12774
also related to https://github.com/matomo-org/matomo/issues/5165

The last release for yuicompressor is nearly 7 years old. Especially for a fast moving language like Javascript this means that it was designed for browsers that have little in common with the ones that exist now.

Of course after replacing it with a maintained minifier we need to test if all features still work and that the minifier doesn't use any features that are missing in ancient browsers,
fix #6559 

* We now store token_auth no longer in the `user` table but hashed in a new table `user_token_auth`
* To not needing to rewrite the entire app re `piwik.token_auth` basically now storing in the session an extra token auth which is randomly generated when a user logs in. This random token is basically just like an `nonce` and because we need to store it in the session, it is stored in plain text in the database (base64 encoded in the session table). The plain text storage is not an issue though since it is not really a token auth but more an `nonce` and it only works if you also have the sessionID. And if you have the sessionId, you are authenticated anyway
* Also created https://github.com/matomo-org/matomo/pull/15390 so sessionIDs are hashed as well.
* Also removes `login` and the weakly hashed `token_auth` from the cookie.
* To not break BC for existing token_auths we migrate them automatically.
* Token auths still have same permission and access as the actual user. Created https://github.com/matomo-org/matomo/issues/15368 which may be interesting in the future.
* We differentiate between system tokens and regular user tokens.
  * User auth token is a token created by the user and a user can delete them etc.
  * A system auth token is created by the system and not visible to the user. It's used in the background when needed. This tokens have an expiry date and are invalidated/deleted typically within a few hours or days. They were needed because eg when we archive using http (when CliMulti cannot be used), then we need to issue an HTTP request from `CoreArchive` and this request has to be authenticated. In this case `CoreArchive` generates a token auth that is valid for say 2 days and it can use this generated token to authenticate the archiving requests.
* We store the tokens hashed as `sha512`. Was going to use `sha3-512` but so far `sha512` seems more "proven". There is a column in the table storing the algorithm for future migrations.
* Introduces a new page "Security" where these tokens can be managed plus the password and 2FA.

## Todo before release
* We'll need to adjust the mobile app before the release to support this new flow of accessing tokens and also to let them enter a token directly.
* We'll need to adjust some docs/faqs as we now only show the token after creation only.
replaces https://github.com/matomo-org/matomo/pull/13443
fix #13202

This PR will create a column in the conversion table and therefore we need to do it in a Matomo 4.0 release.

@sgiehl fyi had somehow trouble pushing into the other branch so creating a new one where I will be fixing the tests

Fixing custom dimensions test might be easier after merging 
fix https://github.com/matomo-org/matomo/issues/14934

should require 2 bytes for the right part, and about 7 byes for the left part.
Better patch for https://github.com/matomo-org/matomo/pull/15401 which was merged last minute...

This way it always works even when someone calls `acquireLock` directly instead of `execute`

Pushing this for now into 3.x-dev but can also put it into 4.x-dev directly but then there might be merge conflicts when merging 3.x-dev into 4.x-dev
fix https://github.com/matomo-org/matomo/issues/6265
fix https://github.com/matomo-org/matomo/issues/12227

Will update minified JS once PR is approved.

We will also need to merge https://github.com/matomo-org/plugin-QueuedTracking/pull/120