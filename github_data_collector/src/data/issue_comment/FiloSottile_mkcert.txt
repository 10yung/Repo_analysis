If the user wants to give mkcert the ability to run as root via sudo then they should explicitly do so.

Having a process fallback to running via sudo automatically itself is very scary.  It basically allows mkcert to piggy back root privileges of the back of another unrelated command's sudo timeout window.

This is pretty ripe for abuse.  It is also very surprising when you run mkcert without sudo and discover that has somehow magically managed to write to your system trust store.  This is exactly what happened to me, and led to me trying to figure out how this happened.

Printing a message saying "That operation requires root - rerun with sudo" should be all that is needed.
Potential change for #229 - first change (and first Go code), so I'm sure there are things that could be improved. :-)

CC @dsebastien
I want to create a certification for a host with a specific port:

```bash
mkcert "localhost:4447"
```

On execute this following command, we get this following result:
```
Using the local CA at "/Users/truongnmt/Library/Application Support/mkcert" âœ¨
ERROR: "localhost:4447" is not a valid hostname, IP, URL or email
```
Related to #47 

I recently installed the latest mkcert and am unable to see the cert in "Certificate Trust Settings". I tried uninstalling, deleting the root, and regenerating, for good measure, but no dice.

![IMG_4EF636D49D4C-1](https://user-images.githubusercontent.com/1441652/72121279-704f6980-330f-11ea-99b6-34e150c53c6d.jpeg)

Windows 10 x64
Chrome 79.0.3945.88

Wildcard certificates created per the doc do not work on Windows 10. The cert shows up in Chrome as Invalid for whoami.localhost.

`mkcert -key-file key.pem -cert-file cert.pem *.localhost`

Non-wildcard certificates with specific subject alternative names do work. This shows up as Valid in Chrome for whoami.localhost.

`mkcert -key-file key.pem -cert-file cert.pem blog.example.com whoami.localhost`
Hi,
I tried to use mkcert on Windows.
However when I use mkcert -install, it is failed because access is denied.
I dont know the problem because I use cmd as administrator.

![Screenshot_3](https://user-images.githubusercontent.com/42040754/71989637-9835c300-3264-11ea-8fd7-06203e0dd4b7.png)



mkcert currently sets the name of the Root CA certificate to "mkcert user@host"; at least that's what I see in my Trusted Root Certification Authorities on Windows.

Would it be possible to customize (even partly) the name (e.g., adding a custom suffix)?
In my case, for isolation purposes, I generate multiple Root CA certificates for each environment of my application. Of course this is only used on the developers machines, but it would be nice for us to be able to distinguish the entries.
- alpine based dockerfile
- multi-stage build
- scratch container
- create Makefile
- use gox for cross go compilation
This PR creates a new package duplicating the truststore logic into its own package.

My intent is for a subsequent PR to refactor `main()` to use the truststore package, and remove truststore logic from the main package.
A simple `mkcert -install` isn't enough to "inject" the Root CA to Chromium from puppeteer.

Anybody have any good advice?

EDIT: Note: I run puppeteer in docker, maybe this is the problem. Whatever. The problem is that `~/.pki/nssdb` doesn't exist. So i came to this work-a-round:

```
mkdir -p $HOME/.pki/nssdb
certutil -d sql:$HOME/.pki/nssdb -N --empty-password
/root/bin/mkcert -install
```

And now, the Chromium called via puppeteer can verify the ssl certificates and `'--ignore-certificate-errors'` is not needed, any more.