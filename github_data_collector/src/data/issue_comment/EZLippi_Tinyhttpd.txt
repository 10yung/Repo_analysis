



解决 cat函数在读取文件的字符数小于fget的单次读取数时 出现的问题 
### 问题

```
void cat(int client, FILE *resource)
{
    char buf[1024];

    fgets(buf, sizeof(buf), resource);
    while (!feof(resource))
    {
        send(client, buf, strlen(buf), 0);
        fgets(buf, sizeof(buf), resource);
    }
}
```

cat 函数在读取长度小于 1024 的文件时，在第一次 fgets 后 resourse 就已经被设为 eof 了，因此也无法进入循环 send 了。

### 测试

**test.txt**

`hello world`

**a.c**

```
#include <stdio.h>

#define MAXLEN 20

int main() {
    FILE *fp;
    char str[MAXLEN];

    fp = fopen("test.txt", "r");
    if (fp == NULL) {
        perror("ERROR OPEN FILE");
        return -1;
    }

    if (fgets(str, sizeof(str), fp) != NULL) {
        puts(str);
    }

    if (feof(fp)) {
        puts("eof");
    } else {
        puts("no eof");
    }
    fclose(fp);

    return 0;
}
```

**执行结果**

![image](https://user-images.githubusercontent.com/21980447/51746654-d4b6f000-20e1-11e9-95b2-a1d71edf7bc7.png)


在execute_cgi()函数中，你在fork()之后 调用sprintf(buf, "HTTP/1.0 200 OK\r\n");send(client, buf, strlen(buf), 0);这会导致这个信息发了两次，发代码之前都不用一下的吗？
path不是html文件的路径吗？并没有执行脚本的操作啊，我这里没有看懂，还有能给我举个测试实例吗？
if (bind(httpd, (struct sockaddr *)&name, sizeof(name)) < 0)
        error_die("bind");
    if (*port == 0)  /* if dynamically allocating a port */
    {
        socklen_t namelen = sizeof(name);
        if (getsockname(httpd, (struct sockaddr *)&name, &namelen) == -1)
            error_die("getsockname");
        *port = ntohs(name.sin_port);
    }

为什么不在bind前判断端口是否为0，为0就调用getsockname让系统自动分配。
现在在bind后，如果bind的端口为0，bind失败、分配了也没用，代码里也没有重新bind。
When request compressed file such as jquery.min.js, broswer cannot get complete content.