We keep our inventory in Gitlab so I was having trouble figuring out how to reference it in semaphore.  Do you think it would work, to create a playbook  for the purpose of downloading our inventory, and then configure an inventory file that points to that inventory?

It seems that I misunderstood how mux works during my last work on routing refactor. This should fix #587 . I now understand better why mulekick was implemented. 

Not sure if the use of middleware in this project is idiomatic in golang (it seems logical to me, of course, but I come from Node.js background, where middleware for request context enrichment and policy control is the de-facto and most importantly - it's applied on separate routes, not router level). 

Seems kinda ugly and because you must split into a separate subrouter every time you need to change a middleware stack, tracking down route path becomes rather difficult (added a function print out registered paths for debugging purposes).

At any rate I don't feel comfortable refactoring this right now, so I just fixed the mux router usage.

@strangeman or @matejkramny can you pls do the honors?
I run semaphore --config config.json,  and service has been started. But there was something wrong with the put and delete api , they all returned 404 , but post and get api is normal.

![image](https://user-images.githubusercontent.com/14037183/62189936-cef8da80-b3a2-11e9-9204-4ba828c789ff.png)

![image](https://user-images.githubusercontent.com/14037183/62189972-df10ba00-b3a2-11e9-8ea3-5ad9be5d84cd.png)



A SSH has been inserted in the Key Store. After running a task, the file 'access_key_1' with private key is created in the Semaphore home directory. Permission 'rw' for the semaphore user.
But after the task has finished, this file is not cleaned up. 
When sharing a project with multiple users, it would be nice to assign SSH to users in stead of a project.
When running a task using a static inventory, provided with a name, is doesn't create this inventory with this name but will use 'inventory_1'. Moreover, when running the task several times, it will recreate the same file as inventory_*.  Is this a bug?
Wouldn't it be logical to save the file the same as the name provided to it, and not to recreate is every time you run the task?
When starting version 2.5.1 we see this
Semaphore v2.5.0
Port :3000
MySQL root@127.0.0.1:3306 semaphore
Tmp Path (projects home) /tmp/semaphore
Checking DB migrations
Executing migration v1.1.0 (at 2019-02-06 08:28:09.564530851 +0000 UTC m=+0.060271208)...
 [1/1]WARN[0000]
 ERR! Query: /* update precision of output logs - also prevents confusion when sorting the table to guarantee it is in the same order */
alter table task__output change `time` `time` datetime(6) not null;


Rolling back v1.1.0 (time: 2019-02-06 08:28:09.565085519 +0000 UTC m=+0.060825789)...
Rollback SQL does not exist.

panic: Error 1064: You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near '(6) not null' at line 2

goroutine 1 [running]:
main.main()
	/go/src/github.com/ansible-semaphore/semaphore/cli/main.go:52 +0x5a1

the datatime on mysql can't be ()
Add environment are different other api interface ï¼Œ haven't return
What do you think about feature in subject?

I have already implemented it for a long time in my fork, but not in the best way. My implementation is very simple:
* Added column `type` to `project__template` table. It can be empty (default), `build` or `deploy`.
* Added column `build_template_id` to `project__template` table. It used for templates with type `deploy` to specify "build" template.
* Added variables `semaphore_task_id` (passed for `build` and `deploy`) and `semaphore_build_task_id` (passed only for `deploy`) witch passes to ansible playbook over environment vars like: 
```
{
	"semaphore_revision": "{{ semaphore_task_id }}",
	"semaphore_build_revision": "{{ semaphore_build_task_id }}"
}
```
That's all. Ansible playbook must support build / deploy stages by using this vars.

I sure support build / deploy stages very important for Semaphore.
Please help.
I tried to execute playbook with semaphore, in my playbook, 
- include_tasks: "{{ network_type }}.yaml"

which tried to pass variables "network_type" to it.  
I add an environment as below, 
{
    "network_type": "calico"
}

but still, it runs with error:
-----------------------------------------------------
The offending line appears to be:


- include_tasks: "{{ network_type }}.yaml"
  ^ here
We could be wrong, but this one looks like it might be an issue with
missing quotes.  Always quote template expression brackets when they
start a value. For instance:

    with_items:
      - {{ foo }}