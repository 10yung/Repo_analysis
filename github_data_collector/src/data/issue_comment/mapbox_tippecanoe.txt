I'm curious about the following error: 
`Internal error: Geometry delta is too big: -4188947,2528672683`

This is coming while tiling about 600 million OSM objects (buildings) with the following flags: 
`-Pf -Z14 -z14 -d18 -pf -pk -pg -pD -ps -b0`

Would changing to `z12 -d20` solve this for any reason? 

Thanks!
I need to generate a tileset containing three layers, boundaries at very different scales. I'd like them to have minzooms of 7, 9 and 11.

As far as I can tell, there are two ways I can do this:

1. Pre-process the geojsons to add a `tippecanoe` object onto every feature with the minzoom/maxzoom I want, then process as normal. Downside: extra processing, and I'm not sure what `minzoom` will end up appearing in the tilejson for each layer.
2. Process each geojson individually into its own mbtiles file with zoom properties passed on the command line, then combine them using tile-join. Downside: extra processing, and it's harder to ensure that the total merged tile size doesn't exceed 500KB.

Ideally I'd be able to do this in one step, perhaps by passing extra flags to `--named-layer`:

```
tippecanoe --named-layer='{"file":"lowzoom.geojson","minzoom":7}' ...
```

Even more ideally, it'd be possible to set all the configuration options for each layer in a separate JSON file, rather than trying to jam JSON into parameters...
I have many vector.pbf how can I convert them to one big vector.pbf?
Or how to convert all vector.pbf to GeoJSON?
We recently noticed a problem with the mean accumulated attributes on our point and polygon tilesets. It was first noticeable when we applied styles to display a property with the accumulated mean values.

I created a small set of points to illustrate the problem using public earthquake data from California:
[earthquakes_points.zip](https://github.com/mapbox/tippecanoe/files/4054907/earthquakes_points.zip)

````
-Z0 -z17 -r0 --cluster-distance=5 --use-attribute-for-id=event_id --accumulate-attribute=depth:mean --accumulate-attribute=magnitude:mean
````

Since this is such a small set of data it's easy to predict what the mean values should be, and the resulting tileset appears to incorrectly generate those values.

Although this is a point feature sample, we noticed the same problem when coalescing polygons.

I have tried the sum, product, max and min functions and they all seam to work. The problem appears limited to the calculated mean values.

Please have a look and confirm what I'm seeing. If this is a bug it'd be nice to get a fix. We have large datasets where the calculated mean value are important properties.
Hi,
I ran into some rendering issues that occur while tiling a dense parcel dataset with `--no-clipping`. I followed along the great work and discussion in #311  and https://github.com/mapbox/mapbox-gl-js/issues/6097.

My requirements are:
- high precision rendering of parcel data at zoom levels >10
- parcel selection on the map, so polygons should not be splitted

Right now I am using the following command
```
tippecanoe -l parcel -o parcels.mbtiles -z 16 -Z 10 --drop-smallest-as-needed --extend-zooms-if-still-dropping --no-clipping --detect-shared-borders file1.json file2.json ...
```
which leads to the following issue while rendering in mbview (artifacts als appear on Mapbox JS & iOS):

Straight line and polygon artifacts when overzoomed (top: zoom level 15.x; bottom: zoom level 16.x):
<img width="1337" alt="Bildschirmfoto 2020-01-11 um 17 19 47" src="https://user-images.githubusercontent.com/2893220/72207183-b97df580-3496-11ea-97be-4af7a5353142.png"><img width="1380" alt="Bildschirmfoto 2020-01-11 um 17 20 04" src="https://user-images.githubusercontent.com/2893220/72207185-bdaa1300-3496-11ea-8907-c9e99935797f.png">

The problems are caused be the `--no-clipping` option. If I leave it out everything is fine besides the fact that large polygons are splitted on tile boundaries. This behaviour is problematic if a want to select and show the selection of one complete polygon on the map. That's why I sticked with `no-clipping` during testing.

I've used the `-zg` option with before without artifacts. But it uses a max zoom of 13. This leads to low precision at high zoom levels (left: max zoom level 13; right: max zoom level 16):
<img width="413" alt="max_zoom_level_13" src="https://user-images.githubusercontent.com/2893220/72207229-445ef000-3497-11ea-8912-ceec8beec0b9.png"><img width="404" alt="max_zoom_level_16" src="https://user-images.githubusercontent.com/2893220/72207234-5476cf80-3497-11ea-96fa-58121c813a83.png">

`--no-polygon-splitting` as mentioned in #311 doesn't seems to have any effects anymore.

Using `--no-duplication` instead of `--no-clipping` screws up rendering completely as it generates a lot of artifacts and missing polygons.

Do you have any idea how to get rid of the artifacts and how to improve tiling for parcel data, while preventing polygons from splitting?

Thanks in advance.




c++ implementation at https://github.com/shortsleeves/visvalingam_simplify
Is it possible to calculated attributes dynamically?For example, The value is relative to the current zoom level?
eg: For a same feature,on zoom 10,the value is 5,on zoom 13,the value is 8.
      


Hello

This pull request fixes the build script of this project.
Specifically, it adds missing Make dependencies so that the targets of the project are re-generated correctly whenever there are updates to any of the dependent source files.

In this way, the project is incrementally built and we no longer sacrifice time in clean builds (i.e., builds after a make clean).

Note that this fix follows the best practices for tracking dependencies automatically (through gcc -MD)

For more details, see here.
https://www.gnu.org/software/make/manual/html_node/Automatic-Prerequisites.html