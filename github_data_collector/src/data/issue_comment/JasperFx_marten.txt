Trim column name and type to get rid of any extraneous white space.  It can cause marten to fail to derive a schema patch.
`truncate` fails when the tables don't exist. This tweak prevents the problem, similar to how it is prevented elsewhere in DocumentCleaner.
Hello. I would store in field with 'GeoJSON' near field 'data'.
Is there such an opportunity now?
Will such functionality appear in the near future?
Hi. 

I'm trying to extend my awesome `DocumentStore` with custom db function based on `UpsertFunction` logic. I've found how you use `SprocCall` to fill `NpgsqlCommand`'s argument list during Insert/Update/... documents. Looks pretty reusable... 

But for now there is no way to invoke custom `IQueryHandler<T>` from the user code (https://github.com/JasperFx/marten/blob/master/src/Marten/QuerySession.cs#L78).

So it might be extreamly usefult to extend `IQuerySession.QueryAsync` api which acceps 'IQueryHandler<IReadOnlyList<T>>' as paramters. No sooner said than done ^____^

Hi, I started to have a lot of these:
```
[106350] ERROR:  could not serialize access due to concurrent update
[106350] CONTEXT:  SQL statement "update documentos.mt_hilo set hi_value = next_value where entity_name = entity"
[106350] STATEMENT:  SELECT * FROM documentos.mt_get_next_hi("entity" := $1)
```
Which I didn't have before, is there anything that changed on that handling that can make this error arise?
As i see it, this shouldn't happen at all, and its making application to throw exception and abort current operation, any ideas?
Using Marten 3.10 + Marten.Nodatime

```csharp
    public class MartenEventListener : DocumentSessionListenerBase
    {        
        public override async Task AfterCommitAsync(IDocumentSession session, IChangeSet commit, CancellationToken token)
        {
            var events = commit.GetEvents();
            foreach (var @event in events)
            {
                //@event.TenantId is null & @event.Timestamp is DateTime.MinValue.
            }
        }
    }
```
The fields are populating correctly on the database, just not appearing here.
Make it more aligned with the current standards. Create proper landing page.

I like personally the look of Hasura web page: https://hasura.io/ and https://docs.hasura.io/1.0/graphql/manual/remote-schemas/index.html.
- Improve the quality of documentation with more coverage, better navigability and search
- Add more hands on tutorials for both document store and event store
- Add more real world use cases, usage and implementation using Marten.
Gather the feedback and recommendations from our users and put it into the documentation.  It should be easily accessible for the new users to be able to quickly see that Marten is production and enterprise ready.
That'd give us the place to contact our users and also write some questions straight to them (eg. about recommendations or new features feedback). Send weekly some information about Marten or best practices (eg. DDD, Event Sourcing, etc.)
Investigate which tool would be best for us for automation (I'm using ActiveCampaign in my private newsletter, but it costs quite some money for bigger number of users).