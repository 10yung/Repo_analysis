I see some commands like `sort` were given the power to write back to same file.
However other commands like `slice` do not have this same power:

~~~
$ xsv slice -e 20 -o sunday.csv worldcitiespop.csv

$ wc sunday.csv
 21  25 970 sunday.csv

$ xsv slice -e 10 -o sunday.csv sunday.csv

$ wc sunday.csv
0 0 0 sunday.csv
~~~

Is this intentional or an oversight?

****Makefile snippet***
**********************
release:
        cargo build --release
        mkdir -p ~/bin/bin
        cp ./target/release/xsv ~/bin/bin/xsv
**********************

~/bin should exist already.

Thus the installer should copy xsv to ~/bin
To use ~/bin/bin, the sub directory must be added to the environment.
This adds a `--nullcount` option to `xsv stats` that keeps track of the number of null values for each column as requested in https://github.com/BurntSushi/xsv/issues/48. I just added a single counter to the Stats struct rather than a new type like `TypedSum`, etc. but happy to refactor however you'd like.   

I do wonder whether this this should be enabld by default? It only requires a counter per field, so it seems more consistent with the current behavior for it to be enabled by default. 
Hi,

I'm trying to partition a very big csv file (5119338774 rows), based on the first column. xsv gets terminated with Too many open files (os error 24) error.

Thanks,,
Just a minor correction. You repeat the word _to_ in the help that is printed as an answer to `xsv cat -h`:

`... the result is always equivalent **to to** the minimum number of rows ...`
Hello everyone,

In `xsv` there is an option to ignore the input's headers, which is fine, but we don't have an option not to output the headers.

Here is why I think it could be useful: I often find myself wanting to pipe the output of a simple `xsv select` to `xargs` and friends. But the presence of the header prevents me from doing so.

Does anyone knows of a clever trick to ignore the first line of a stream (which is always a drag in unix and not straigthforward when dealing with CSV data since adventurous users may use carriage returns in header names, sigh)? Or could this be a useful addition?
Why doesn't this work?

`tail -f file.csv | xsv table`

This works:

`tail file.csv | xsv table`

Thanks.
cargo 1.38.0 (23ef9a4ef 2019-08-20)
rustc 1.38.0 (625451e37 2019-09-23)

Previously:

```
warning: trait objects without an explicit `dyn` are deprecated
  --> src/cmd/headers.rs:60:22
   |
60 |     let mut wtr: Box<io::Write> =
   |                      ^^^^^^^^^ help: use `dyn`: `dyn io::Write`
   |
   = note: `#[warn(bare_trait_objects)]` on by default

warning: trait objects without an explicit `dyn` are deprecated
   --> src/cmd/join.rs:281:44
    |
281 |         -> CliResult<IoState<fs::File, Box<io::Write+'static>>> {
    |                                            ^^^^^^^^^^^^^^^^^ help: use `dyn`: `dyn io::Write+'static`

warning: trait objects without an explicit `dyn` are deprecated
   --> src/cmd/partition.rs:138:36
    |
138 | type BoxedWriter = csv::Writer<Box<io::Write+'static>>;
    |                                    ^^^^^^^^^^^^^^^^^ help: use `dyn`: `dyn io::Write+'static`

warning: trait objects without an explicit `dyn` are deprecated
   --> src/cmd/split.rs:131:36
    |
131 |     ) -> CliResult<csv::Writer<Box<io::Write+'static>>> {
    |                                    ^^^^^^^^^^^^^^^^^ help: use `dyn`: `dyn io::Write+'static`

warning: trait objects without an explicit `dyn` are deprecated
   --> src/config.rs:197:48
    |
197 |                  -> io::Result<csv::Writer<Box<io::Write+'static>>> {
    |                                                ^^^^^^^^^^^^^^^^^ help: use `dyn`: `dyn io::Write+'static`

warning: trait objects without an explicit `dyn` are deprecated
   --> src/config.rs:202:48
    |
202 |                  -> io::Result<csv::Reader<Box<io::Read+'static>>> {
    |                                                ^^^^^^^^^^^^^^^^ help: use `dyn`: `dyn io::Read+'static`

warning: trait objects without an explicit `dyn` are deprecated
   --> src/config.rs:263:47
    |
263 |     pub fn io_reader(&self) -> io::Result<Box<io::Read+'static>> {
    |                                               ^^^^^^^^^^^^^^^^ help: use `dyn`: `dyn io::Read+'static`

warning: trait objects without an explicit `dyn` are deprecated
   --> src/config.rs:293:47
    |
293 |     pub fn io_writer(&self) -> io::Result<Box<io::Write+'static>> {
    |                                               ^^^^^^^^^^^^^^^^^ help: use `dyn`: `dyn io::Write+'static`

warning: trait objects without an explicit `dyn` are deprecated
   --> src/util.rs:190:48
    |
190 |                  -> io::Result<csv::Writer<Box<io::Write+'static>>>
    |                                                ^^^^^^^^^^^^^^^^^ help: use `dyn`: `dyn io::Write+'static`

warning: trait objects without an explicit `dyn` are deprecated
   --> tests/tests.rs:105:29
    |
105 |     fn shrink(&self) -> Box<Iterator<Item=CsvRecord>+'static> {
    |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use `dyn`: `dyn Iterator<Item=CsvRecord>+'static`
    |
    = note: `#[warn(bare_trait_objects)]` on by default

warning: trait objects without an explicit `dyn` are deprecated
   --> tests/tests.rs:151:29
    |
151 |     fn shrink(&self) -> Box<Iterator<Item=CsvData>+'static> {
    |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use `dyn`: `dyn Iterator<Item=CsvData>+'static`

warning: use of deprecated item 'std::sync::atomic::ATOMIC_USIZE_INIT': the `new` function is now preferred
  --> tests/workdir.rs:17:39
   |
17 | static NEXT_ID: atomic::AtomicUsize = atomic::ATOMIC_USIZE_INIT;
   |                                       ^^^^^^^^^^^^^^^^^^^^^^^^^ help: replace the use of the deprecated item: `AtomicUsize::new(0)`
   |
   = note: `#[warn(deprecated)]` on by default

```
This is an attempt at closing #178 and allowing reading from stdin in the join command. I'm not sure if using `Box` is less memory efficient here, but I can make any updates based on suggestions
The join command doesn't work with pipes as second arguments which is probably due to the implementation but it also doesn't fail gracefully. The first input for join can be a pipe but the second argument needs to be a file as it needs to be seekable.

I have the following input file `normal.csv`. Table works fine as it doesn't seek backwards.

```
$ xsv table <(cat normal.csv)
a1  a2  a3
b1  b2  b3
```

The first input is also not seeked

```
$ xsv join a1 <(cat normal.csv) a1 normal.csv
a1,a2,a3,a1,a2,a3
b1,b2,b3,b1,b2,b3
```

But the second argument is seeked and if it is a pipe it leads to the following error:

```
$ xsv join a1 normal.csv a1 <(cat normal.csv)
a1,a2,a3,a1,a2,a3
Illegal seek (os error 29)
```

Possible fixes (ideally both):
* Save the second argument in memory and return to there. This might use a lot of ram so it should be available via command line switch
* Check whether the second argument is a pipe and fail gracefully

Please don't just prevent pipes from being used everywhere. This is really useful when composing a lot of `xsv` commands.