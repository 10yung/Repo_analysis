
It was possible for a failed build to reuse the same version multiple
times for each failed attempt. This happened because the version counter
was only incremeneted *after* the build step and just before the deploy
step.

The changes introduced here ensure we always increment the version
counter in the database before any other action is taken, this
incremented version is then propagated to the provisioner.
**What is the problem?**
It's some time I use tsuru both in production and personal but private environments and I always consider the security a PaaS should provide if we want to provide services to public. As we know, SSL for domains provided on router level and behind the router , traffic transferred  to containers without any encryption; But the problem is all the containers in tsuru (especially docker provision) are connected to same bridge network and listening on default server ip address (public ip address actually).
![image](https://user-images.githubusercontent.com/7995238/71540813-b0ecd180-2964-11ea-855d-7c7944c2fdb3.png)

**A possible solution:**
What we can do about this problem is provide provision-based config to connect created containers to an specific network. This network can use a more advanced driver (e.g. calico, flannel, weave, etc) so we can define policies for containers networking as a result containers cannot communicate each other except through the router and they can still connect to service containers in and outside the docker node.

**How to implement?**
I think it's possible to add network name and driver options to tsuru config yaml (in provision scope) and add these details as NetworkingConfig to CreateContainerOptions when it's bees initiating.

**Additional Notes:**
I'm not very familiar with k8s architecture and development but a similar approach may be possible
even though I don't have an idea about it.
Hi folks

I'm trying to add users to tsuru and I have the following scenario happening:

- I add a user to tsuru using "global" context
- I add several permissions, from the permission list, such as team, app, node and so on
- When he logs in, he can see all other teams, all other applications and so on, which he shouldn't

Ideally that user, should be able to login, create his teams and so on and only see things created by him or teams that he is part of. How can we do that with Tsuru?

Today, because a lot of permissions we need individual users to have are at a global context, users see everything from each other, include the units on "theonepool", which they should not be able to see an use

Ideally, the scenario we want is to have like "sub admins", where they can operate as admins of their own resources, users, teams and others that he adds, but without seeing stuff from other people

Any help is appreciated 
The `platform-info` command only shows the list of build versions of each platform.

It was be great if the command also show information about the platform content, like supported versions, configuration files supported, etc..

One way to do this is creating a yaml file `.spec` inside each platform, with these informations.
ex:

```yaml
name: python
default_version: "2.7.14"
supported_versions: 
    - 2.7.14
    - 3.5.5
    - pypy2.7-5.10.0
requirement_files:
    - requirements.txt
    - requirements.apt
version_file: .python_version
envs: 
    - PYTHON_VERSION
    - PYTHON_PIP_VERSION
```

and in tsuru at platform-build stage, parse this file and save the information to show on `tsuru platform-info python`
**Description**
We use an AWS VPC domain to access our tsuru API and applications (e.g. `tsuru.our-company.vpc`)

If I add the target `http://tsuru.our-company.vpc:8080`, the client I installed using Homebrew fails to resolve this name (when calling `app-info`, for instance), returning:
> Error: Failed to connect to tsuru server (http://tsuru.our-company.vpc:8080), it's probably down.

However, if I clone the tsuru-client repo, build the project and try to run the same command, this time it works.  
Calling `target-list` on both binaries returns the same targets (as expected)

**Steps to reproduce**
1. run `tsuru app-info -a [some-app]` (using Homebrew version)

**Expected result**
The usual `app-info` output.

**Environment information**

* Operating System: macOS Mojave, Catalina (probably older versions too)
* Tsuru client version: 1.7.3

---

My guess is that something during the cross compilation is messing with it, but I can't tell for sure.

**Description**
> make test is failing 

**Steps to reproduce**
> make test

**Expected result**
> no test should failed

**Attachments**
> If applicable, provide logs, screenshots, screencast, etc to help explain your problem.


Even when accessing events via dashboard (dashboard > events > app.deploy), we can see the content of private variables in plain text.

Filter logs by level