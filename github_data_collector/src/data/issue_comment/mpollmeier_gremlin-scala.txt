Hi,

Please see the following SO question. This happened when using `Seq` and `List` for properties on my CC.

https://stackoverflow.com/questions/56568962/unsupported-property-value-type-java-util-linkedhashmap-when-writing-to-neptune

I was able to step through your code, and it appears that for a `List` type `addVertex` proceeds to add the whole list as a property which is unsupported. Is there a way to make it iterate through and add all said items to the property the Gremlin way i.e.

```
g.addV("person").property("friend", "john").property("friend","joe")
```
Hi,

I have neo4j-community-3.5.5, scala 2.11.8 and Idea 2018.3.4 community version and would like to set up gremlin for me to access Neo4j database in Scala

I have this library dependency in build.sbt

`libraryDependencies += "com.michaelpollmeier" %% "gremlin-scala" % "3.4.1.4"`

and in my scala console I have

```
import gremlin.scala._
import org.apache.tinkerpop.gremlin.tinkergraph.structure.TinkerFactory
```

But scala does not recognize `tinkergraph`. What I am missing and is there a link describing how to set it up?

Thanks
I have a use case where I want to look up if a vertex exists based on a property and if it does not create and add relationship to another vertex. how do i go about doing it?

Hi There,
    As per AWS Neptune documentation, if you pass "id" attribute, that will be the vertex id. If you do not, then neptune will generate a uuid.

   I am trying to do local development with gremlin server and trying to create a vertex with uuid as it is id and cannot find any example of that.


Help would be appreciated

We are using gremlin-scala v-3.3.3.4. We use JanusGraph and have the following data model w.r.t case classes. For each vertex, we have two case classes one for writing to the database and one for reading from the database. The only difference is that the case class which is used for writing to the database has the id as `Option[id]` whereas in the case class which used for reading from database the Id is not an `Option`. 

For example, we have the user vertex as follows:

```
@label("user") final case class UserDB(@id id: Option[Long], name: String, createdAt: Long)
@label("user") final case class UserVertex(@id id: Long, name: String, createdAt: Long)

// UserDB is used when the vertex is created
val user = graph + userDB

// UserVertex is when we convert the vertex in to the case class
val userVertex = user.toCC[UserVertex]
```

The reason why we have a different case class during the read is because we are sure that the Id is going to be there when we read from the Database and we can avoid matching on the `Option[id]` to get the Id. Upgrading to the latest version of gremlin-scala is giving the following errors for the all case classes which doesn't have Id as `Option`.

```
[error] java.lang.AssertionError: assertion failed: @id parameter *must* be of type `Option[A]`. In the context of Marshallable, we have to let the graph assign an id
[error] 	at scala.Predef$.assert(Predef.scala:219)
[error] 	at gremlin.scala.Marshallable$.handleId$1(Marshallable.scala:142)
[error] 	at gremlin.scala.Marshallable$.$anonfun$materializeMappableImpl$1(Marshallable.scala:163)
[error] 	at scala.collection.TraversableOnce.$anonfun$foldLeft$1(TraversableOnce.scala:156)
[error] 	at scala.collection.TraversableOnce.$anonfun$foldLeft$1$adapted(TraversableOnce.scala:156)
[error] 	at scala.reflect.internal.Scopes$Scope.foreach(Scopes.scala:408)
[error] 	at scala.collection.TraversableOnce.foldLeft(TraversableOnce.scala:156)
[error] 	at scala.collection.TraversableOnce.foldLeft$(TraversableOnce.scala:154)
[error] 	at scala.reflect.internal.Scopes$Scope.foldLeft(Scopes.scala:60)
[error] 	at gremlin.scala.Marshallable$.materializeMappableImpl(Marshallable.scala:28)
[error]           .map(_.toCC[UserVertex])

```
We understand the error message `we have to let the graph assign an id` which is only when adding the vertex to the database, but  why is this enforced on `toCC[UserVertex]` ?
Here is the error that I am encountering.

`play.api.http.HttpErrorHandlerExceptions$$anon$1: Execution exception[[IllegalStateException: Property addition is not supported]]
	at play.api.http.HttpErrorHandlerExceptions$.throwableToUsefulException(HttpErrorHandler.scala:251)
	at play.api.http.DefaultHttpErrorHandler.onServerError(HttpErrorHandler.scala:178)
	at play.core.server.AkkaHttpServer$$anonfun$1.applyOrElse(AkkaHttpServer.scala:363)
	at play.core.server.AkkaHttpServer$$anonfun$1.applyOrElse(AkkaHttpServer.scala:361)
	at scala.concurrent.Future.$anonfun$recoverWith$1(Future.scala:413)
	at scala.concurrent.impl.Promise.$anonfun$transformWith$1(Promise.scala:37)
	at scala.concurrent.impl.CallbackRunnable.run(Promise.scala:60)
	at akka.dispatch.BatchingExecutor$AbstractBatch.processBatch(BatchingExecutor.scala:55)
	at akka.dispatch.BatchingExecutor$BlockableBatch.$anonfun$run$1(BatchingExecutor.scala:91)
	at scala.runtime.java8.JFunction0$mcV$sp.apply(JFunction0$mcV$sp.java:12)
Caused by: java.lang.IllegalStateException: Property addition is not supported
	at org.apache.tinkerpop.gremlin.structure.Element$Exceptions.propertyAdditionNotSupported(Element.java:133)
	at org.apache.tinkerpop.gremlin.structure.util.detached.DetachedVertex.property(DetachedVertex.java:91)
	at org.apache.tinkerpop.gremlin.structure.util.detached.DetachedVertex.property(DetachedVertex.java:50)
	at gremlin.scala.ScalaElement.$anonfun$updateWith$2(ScalaElement.scala:76)
	at scala.collection.immutable.HashMap$HashMap1.foreach(HashMap.scala:231)
	at scala.collection.immutable.HashMap$HashTrieMap.foreach(HashMap.scala:462)
	at gremlin.scala.ScalaElement.updateWith(ScalaElement.scala:76)
	at gremlin.scala.ScalaElement.updateWith$(ScalaElement.scala:70)
	at gremlin.scala.ScalaVertex.updateWith(ScalaVertex.scala:8)
	at gremlin.scala.ScalaElement.updateAs(ScalaElement.scala:82)
`

Here are my models and the way I have defined it.

```
import java.util. UUID
import gremlin.scala.{Element, Marshallable, Vertex, id, label, underlying}


@label("trip")
case class TripModel(tripId: Option[String] = None,
                     name: String,
                     createdDate: java.time.Instant = java.time.Instant.now(),
                     startDate: java.time.Instant,
                     duration: Int,
                     totalAdults: Int,
                     totalChildrens: Int,
                     @underlying vertex: Option[Vertex] = None
                    )

object TripModel {

  implicit val marshaller = new Marshallable[TripModel] {
    def toCC(element: Element): TripModel = {
      val tripId = Some(element.value[UUID]("tripId").toString)
      val tripName = element.value[String]("name")
      val duration =  element.value[Int]("duration")
      val totalAdults = element.value[Short]("totalAdults")
      val totalChildren =element.value[Short]("totalChildrens")
      val date = element.value[java.time.Instant]("createdDate")
      val startDate = element.value[java.time.Instant]("startDate")

      models.TripModel(tripId = tripId, name = tripName,
        startDate  = startDate, duration = duration,
        totalAdults = totalAdults, totalChildrens = totalChildren, createdDate = date)
    }

    override def fromCC(cc: TripModel): FromCC = {
      val values = Map("name" -> cc.name,
        "createdDate" -> cc.createdDate,
        "startDate" -> cc.startDate,
        "duration"-> cc.duration,
        "totalAdults" -> cc.totalAdults,
        "totalChildrens" -> cc.totalChildrens,
        "tripId" -> UUID.fromString(cc.tripId.get).toString)
      FromCC(None, "trip", values)
    }
  }
}
```

And here is how I update a certain field.


```
  def updateTripDetails(id:String, tripUpdate: UpdateTripRequest) = {
    implicit val g = db.g

    val item = db.g.V().has(KeyValue(tripId, id)).head
    item.updateAs[TripModel](cc => cc.copy(name = tripUpdate.tripName.getOrElse(cc.name)))
  }
```


What I am trying to do is to update a certain vertex property, however I always received the aforementioned error. is there any workaround for this?
Here's a snippet of my code



```
@label("trip")
case class TripModel(tripId: Option[String] = None,
                     name: String,
                     createdDate: Date = new Date(),
                     startDate: Date,
                     duration: Int,
                     totalAdults: Int,
                     totalChildrens: Int,
                     @underlying vertex: Option[Vertex] = None
                    )

```

I am able  to persist a trip model using the following code..

```


    val trip  = TripModel(tripId = Some(randomUUID.toString), name = ctr.tripName,
      startDate = DateUtil.convertStringToDate(ctr.startTo), duration = ctr.totalDays,
      totalAdults = ctr.totalAdults, totalChildrens = ctr.totalChildren, createdDate = new Date())

    val tripVertex = graph + trip
```




However upon retrieval of the persisted vertex I always receive this error.
```

play.api.http.HttpErrorHandlerExceptions$$anon$1: Execution exception[[ClassCastException: java.time.Instant cannot be cast to java.util.Date]]
	at play.api.http.HttpErrorHandlerExceptions$.throwableToUsefulException(HttpErrorHandler.scala:251)
	at play.api.http.DefaultHttpErrorHandler.onServerError(HttpErrorHandler.scala:178)
	at play.core.server.AkkaHttpServer$$anonfun$1.applyOrElse(AkkaHttpServer.scala:363)
	at play.core.server.AkkaHttpServer$$anonfun$1.applyOrElse(AkkaHttpServer.scala:361)
	at scala.concurrent.Future.$anonfun$recoverWith$1(Future.scala:413)
	at scala.concurrent.impl.Promise.$anonfun$transformWith$1(Promise.scala:37)
	at scala.concurrent.impl.CallbackRunnable.run(Promise.scala:60)
	at akka.dispatch.BatchingExecutor$AbstractBatch.processBatch(BatchingExecutor.scala:55)
	at akka.dispatch.BatchingExecutor$BlockableBatch.$anonfun$run$1(BatchingExecutor.scala:91)
	at scala.runtime.java8.JFunction0$mcV$sp.apply(JFunction0$mcV$sp.java:12)
Caused by: java.lang.ClassCastException: java.time.Instant cannot be cast to java.util.Date
	at service.TripService$$anon$1.toCC(TripService.scala:30)
	at service.TripService$$anon$1.toCC(TripService.scala:30)
	at gremlin.scala.ScalaVertex.toCC(ScalaVertex.scala:12)
	at service.TripService.getTrip(TripService.scala:30)
	at controllers.trip.TripController.$anonfun$getTrip$1(TripController.scala:28)
	at play.api.mvc.ActionBuilder.$anonfun$apply$11(Action.scala:363)
	at scala.Function1.$anonfun$andThen$1(Function1.scala:52)
	at play.api.mvc.ActionBuilderImpl.invokeBlock(Action.scala:482)
	at play.api.mvc.ActionBuilderImpl.invokeBlock(Action.scala:480)
	at play.api.mvc.ActionBuilder$$anon$9.invokeBlock(Action.scala:331)
```
I've added this issue to track a discussion related to adding Edge support to the DSL.  I'm happy to push up a PR, but I'd like to make sure it's in the style you would like to see.  A few questions:

1) Adding edge support will require a new Converter.forDomainEdge implicit.  I believe this will require me to create a new DomainEdge marker trait that extends DomainRoot, for use in the Converter.forDomainEdge context bound:

```
  implicit def forDomainEdge[DomainType <: ModelEdge](
      implicit
      marshaller: Marshallable[DomainType],
      graph: Graph): Converter.Aux[DomainType, Edge] = new Converter[DomainType] {
    type GraphType = Edge
    def toDomain(e: Edge): DomainType = marshaller.toCC(e)
    def toGraph(dt: DomainType): Edge = AnonymousEdge(dt)
  }
```

I'm wondering if we should also add a DomainNode marker trait that extends DomainRoot, so that the context-bound of Converter.forDomainNode can be more specific.  That would be a breaking change, which is why I bring it up.  It seems like the right thing to do now, though.

2) It seems like a lot of the things that are going in to NodeSteps that could be shared between NodeSteps and EdgeSteps, so I propose creating an ElementSteps base class and pushing much of what's in NodeSteps into ElementSteps.  It probably still makes sense to leave NodeSteps there, even if it is empty, simply to fix the EndGraph type-parameter to Vertex, and give ourselves a future location for steps that are truly vertex-specific.

3) I think some of the things in NodeSteps should really be in Steps, such as filterOnEnd and sideEffect, which could apply to any EndDomain (such as a selected tuple).

4) Some of the new steps you've added to NodeSteps aren't using the implicit Constructor pattern that you were using earlier.  I presume you're expecting that there will be an implicit to lift NodeSteps to its domain-specific subclass.  Is there a reason why you're moving away from the Constructor pattern?  Should we rely on the runtime conversion moving forward, or should we prefer the Constructor pattern?
I had to implement a vertex query containing an or-Condition and just from reading the documentation it was not obvious for me how the logical operators .or(...) and .and(...) work. In order to find out I went through the LogicalSpec:

https://github.com/mpollmeier/gremlin-scala/blob/f64664c4d5b1731bf92045252b1290dd218b748a/gremlin-scala/src/test/scala/gremlin/scala/LogicalSpec.scala

It would be nice to have an overview of the operator usage in README.md
Here's a cut at adding by modulation for select steps.   Please take a look at the SelectSpec for usage of the tupled version.  It accepts a tuple of StepLabel, followed by a tuple of By.  The method signature for select/by could alternately be expressed as a Tuple of (StepLabel,By) pairs.  I didn't spend terribly much time with it, but during my first pass at the pair-wise signature, I struggled to unzip the pairs HLists into an HList of StepLabel and an HList of Bys, because I'm not deep enough into shapeless to provide it with an implicit Unzip.Aux that the compiler could resolve.  Before I hop into that rabbit hole, I thought I'd inquire with you about the method signature you would prefer to see for select/by (either one I've proposed or an alternate).  Also, if you have any advice on how I could augment the following to supply an unzipper, please let me know.

```
    def select[StepLabelAndByTuplesAsTuples <: Product,
                 StepLabelsAndBysHList <: HList,
                 StepLabels <: HList,
                 Bys <: HList,
                 H0,
                 T0 <: HList,
                 LabelNames <: HList,
                 TupleWithValue,
                 Values <: HList,
                 Z,
                 ValueTuples](stepLabelAndByTuplesAsTuple: StepLabelAndByTuplesAsTuples)(
        implicit stepLabelAndByTuplesAsTupleToHList: ToHList.Aux[StepLabelAndByTuplesAsTuples, StepLabelsAndBysHList],
        unzipper: Unzip.Aux[StepLabelsAndBysHList, (StepLabels, Bys)],
        stepLabelToString: Mapper.Aux[GetLabelName.type, StepLabels, LabelNames],
        labelTrav: ToTraversable.Aux[LabelNames, List, String],
        byTrav: ToTraversable.Aux[Bys, List, By[_]],
        resultMapToHListFolder: RightFolder.Aux[StepLabelsAndBysHList,
                                                (HNil, JMap[String, Any]),
                                                combineModulatorWithValue.type,
                                                (Values, Z)],
        tupler: Tupler.Aux[Values, ValueTuples]
    ): GremlinScala.Aux[ValueTuples, Labels] = {
      // Select each StepLabel
      val stepLabelsAndBysHList: StepLabelsAndBysHList = stepLabelAndByTuplesAsTupleToHList(stepLabelAndByTuplesAsTuple)
      val (stepLabelsHList, bysHList) = stepLabelsAndBysHList.unzip

      val labels: List[String] = stepLabelsHList.map(GetLabelName).toList
      val label1 = labels.head
      val label2 = labels.tail.head
      val remainder = labels.tail.tail
      val selectTraversal = gremlinScala.traversal.select[Any](label1, label2, remainder: _*)

      // Apply By modulators to selected steps
      val bys: List[By[_]] = bysHList.toList
      var byTraversal = selectTraversal
      bys.foreach { by => byTraversal = by.apply(byTraversal) }

      // Extract selected values from the map of labeled values, and construct a
      // result tuple typed by Modulated from By[Modulated]
      GremlinScala(byTraversal).map { selectValues =>
        val resultTuple =
          stepLabelsAndBysHList.foldRight((HNil: HNil, selectValues))(combineModulatorWithValue)
        val values: Values = resultTuple._1
        tupler(values)
      }
    }
```
That fails to compile with:
```
Error:(201, 18) could not find implicit value for parameter unzipper: shapeless.ops.hlist.Unzip.Aux[StepLabelsAndBysHList,(StepLabels, Bys)]
```
Thank you for your efforts on this library!