POC

![image](https://user-images.githubusercontent.com/28386721/65385828-219aa700-dd01-11e9-9d59-390fdd34df73.png)

My command is as follow:
```
#include <iostream>
#include <string>
using namespace std;
string v;
```

But I get an error sometimes:

**input_line_18:3:8: error: no matching constructor for initialization of 'std::__1::string' (aka
      'basic_string<char, char_traits<char>, allocator<char> >')
string v;**

And my enviroment is MacOS 10.13.6 (17G65),I install the cling via the install script on the official site.

Could any one do me a favor? Thanks a lot.


Hi,
I installed cling-xeus according to your instructions:
Installed totally new Miniconda
Created a cling env (tried 3.7 and 3.6)
InstallIed cling-xeus by coping the command on your page onda install xeus-cling notebook -c QuantStack -c conda-forge
installed Jupyter.
Opened a notebook.
With Python it works fine
With C++ not
In the Miniconda terminal I get the following error 👍 

> ERROR in cling::CIFactory::createCI():
>   resource directory C:/bld/xeus-cling_1544660831115/_b_env/Library\lib\clang\5.0.0 not found!
> input_line_1:1:10: fatal error: 'new' file not found
> #include <new>
>          ^~~~~
> Warning in cling::IncrementalParser::CheckABICompatibility():
>   Possible C++ standard library mismatch, compiled with _CRT_MSVCP_CURRENT 'msvcp140.dll'
>   Extraction of runtime standard library version was: ''
> [I 20:39:03.356 NotebookApp] Interrupted...
> [I 20:39:03.364 NotebookApp] Shutting down 1 kernel
> [I 20:39:03.366 NotebookApp] Kernel shutdown: 32b58571-9a4a-41b4-8ad0-8d0f62b22a6f
> 

The OS is Windows 10
Ilan

Attempting to install from source, but when I run `./cpt.py --check-requirements` I get the following crash:

```
+-----------------------------------------------------------------------------+
| Check availability of required softwares                                    |
+-----------------------------------------------------------------------------+
git                 [OK]                          
Traceback (most recent call last):
  File "tools/packaging/cpt.py", line 1916, in <module>
    check_mac('cmake')
  File "tools/packaging/cpt.py", line 1501, in check_mac
    if not check_version_string_ge(exec_subprocess_check_output('{cmake} --version'.format(cmake=CMAKE), '/').strip().split('\n')[0].split()[-1], '3.4.3'):
IndexError: list index out of range
```

I've tried running from both the top level and the packaging folder, with Python 2 and 3. I am running MacOS 10.13. Any ideas?
Are there binaries I can use on Arch Linux?

There is an AUR package: https://aur.archlinux.org/pkgbase/cling-git/

but it builds from source - which takes insanely long to clone the repo and then to build it (it was taking more than 2 hours, which is when I stopped the process.)

I tried using the binaries for Ubuntu but they don't run properly (because of having built for different runtimes etc.) 
Hello,

I could not compile cling after generating a Xcode project using CMAKE.
1) Is it possible to compile cling using Xcode?
2) In case of a affirmative answer, how?

Thanks.
Kind regards,


I was expecting Cling to clear the previous output when pressing Ctrl+L but instead it does nothing. I think the Ctrl+L shortcut has become a standard and recommend this behaviour to be added to cling!
I like the workflow of

1. having my code opened with Vim on a tmux pane on the left
2. having the intepreter opened on a tmux pane on the right
3. editing some code in Vim
4. pasting it with the awesome vim-slime plugin to the interpreter

I can do this with ipython but I'm currently unable to reproduce this with cling for multi-line pastes.

When I paste some multi-line code to cling, each line is executed individually.

So, of course, the following c++ code

```cpp
#include <iostream>
using namespace std;
for (int i = 0; i < 10; ++i)
{
  cout << "hello" << endl;
}
```

when pasted to cling does not work:

```
[cling]$ #include <utility>
[cling]$ #include <iostream>
[cling]$ using namespace std;
for (int i = 0; i < 10; ++i)
{
  cout << "hello" << endl;
}
[cling]$ for (int i = 0; i < 10; ++i)
{
  cout << "hello" << endl;
}
[cling]$ {
[cling]$ ?     cout << "hello" << endl;
}
[cling]$ ?   }
hello
```

Is there an already existing solution to this?
Hi,
I found the AppVeyor build which failing because of:
```
C:\ci\build\cling-src\tools\cling\lib\UserInterface\textinput\TerminalDisplayWin.cpp(36):
error C2664: 'HANDLE CreateFileW(LPCWSTR,DWORD,DWORD,LPSECURITY_ATTRIBUTES,DWORD,DWORD,HANDLE)':
cannot convert argument 1 from 'const char [8]' to 'LPCWSTR' [C:\ci\build\builddir\tools\cling\lib\UserInterface\clingUserInterface.vcxproj]
```

Looks like the "clingUserInterface" is compiled using "UNICODE".

Regards,
TheAifam5
In https://github.com/QuantStack/xeus-cling, we changed a little bit the way to process the input given in a cell notebook in order to write the output cleanly.
To do that, we use the flag `disableValuePrinting` in the process method of the `MetaProcessor` and we found a bug.

Here is a simple example which illustrates the issue in the cling interpreter

```
#include <iostream>
#include "cling/Interpreter/Value.h"
#include "cling/Utils/Output.h"
#include "cling/MetaProcessor/MetaProcessor.h"

cling::MetaProcessor processor(*gCling, cling::errs());
cling::Value output;
cling::Interpreter::CompilationResult compilation_result;

std::string myinput{R"(auto test = [](auto i){std::cout << i << "\n";};)"};

processor.process(myinput, compilation_result, &output, true);
test(5)
```

The error message is

```
input_line_13:2:2: error: type '(lambda at input_line_12:2:14)' does not provide a call operator
 test(5)
```

Note that if you add a semicolon at the end of the `myinput` string, the problem is solved.

```
std::string myinput{R"(auto test = [](auto i){std::cout << i << "\n";};;)"};
```

It's a critical issue for `xeus-cling` and we hope that you can fix it soon in order to add a patch in your build process.