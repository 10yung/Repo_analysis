
Thsi PR is for reproducing https://github.com/scala-js/scala-js/issues/3921

```
$ ./sbt
> clean
> projectJS/fastOptJS
...
[error] stack trace is suppressed; run last airframeJS / Compile / fastOptJS for the full output
[error] stack trace is suppressed; run last metricsJS / Compile / fastOptJS for the full output
[error] stack trace is suppressed; run last codecJS / Compile / fastOptJS for the full output
[error] (airframeJS / Compile / fastOptJS) java.lang.NoClassDefFoundError: jdk/internal/reflect/MethodAccessorImpl
[error] (metricsJS / Compile / fastOptJS) java.lang.NoClassDefFoundError: jdk/internal/reflect/MethodAccessorImpl
[error] (codecJS / Compile / fastOptJS) java.lang.NoClassDefFoundError: jdk/internal/reflect/MethodAccessorImpl
[error] Total time: 22 s, completed Jan 15, 2020, 10:20:59 AM

# Running the same command again finishes the compilation successfully:
> projectJS/fastOptJS
[info] Fast optimizing /Users/leo/work/git/airframe/airframe-metrics/js/target/scala-2.12/airframe-metrics-fastopt.js
[info] Fast optimizing /Users/leo/work/git/airframe/airframe/.js/target/scala-2.12/airframe-fastopt.js
[info] Fast optimizing /Users/leo/work/git/airframe/airframe-codec/.js/target/scala-2.12/airframe-codec-fastopt.js
[success] Total time: 4 s, completed Jan 15, 2020, 11:00:51 AM
sbt:airframe-root> 
```

Splitting the project into multiple sub-projects works:
```
> ; clean; projectJSCore/fastOptJS; projectJSSub/fastOptJS
```


When we need to add a new lifecycle hook to an existing design we need to write code like this:
```scala
val d = newDesign
  .bind[X].toProvider(new X())
  .bind[Y].toSingleton

// Currently we need to replicate the binding
val d2 = d
  .bind[X].toProvider(newX())
  .onStart{ x =>  (initialize x) } 
```

To reduce the code duplication, we need to split the code like this like this:
```scala
val xDesign = bind[X].toProvider(new X())

val d = xDesign
  .bind[Y].toSingleton

val d2 = d + xDesign.onStart{ x => (initialize X) }
```

Can we just add a lifecycle hook like this? 
```scala
val d = newDesign
  .bind[X].toProvider(new X())
  .bind[Y].toSingleton

val d2 = d.bind[X].onStart{ x => (initialize X) }
```

If the return type of a test method is Future[_], we should retrieve the result asynchronously. 

- For JVM, Await.result(Future[_], Duration.Inf) works
- For Scala.js, there is implementing Await.result is not straightforward because JavaScript doesn't have the notion of blocking. 

Approaches to support Async testing in Scala.js would be:
- A) Wait until the Future.value becomes available 
- B) Build a tree of Future results, and run tests asynchronously. 

A) is technically impossible as the waiting context will hold the execution control (so Future will never complete while waiting the completion), so we need to implement B), which is better as we can also use this effort to implement a standalone AirSpec launcher. 


Add a fail-fast behavior to the http client to protect the target API service.

- This should be able to disable with noCircuitBreaker option.
- Support using a custom circuit breaker with withCircuitBreaker(...) 

```scala

val d = newDesign.bind[X].toProvider{ y:Y => new X(Y) }
 
d.newSession { session => // 
  session.withChildSession(Design.empty) { childSession =>
     val x =  sesion.build[X]  // x is initialized in parent session, but Y.close is registered to the child session
  } 
}
```

- Y should be initialized in the parent session as its initialization is hooked at the parent session.
This ticket is a placeholder for tracking goals for Airframe 2020 development.

Reference: Airframe 19 Milestone: #528 

## airframe-benchmark
- [ ] Multi-thread throughput benchmark #509

## airframe-codec
- [ ] Performance improvement by switching to pure-Scala msgpack. 10%~20% performance improvement can be achieved compared to the current version
- [ ] PackSupport/UnpackSupport interface to define custom codec #511 
- [ ] Optimize the pack/unpack performance when input/output types are known
- [ ] Check the presence of non-serializable types #836 

## airframe-control
- [x] CircuitBreaker #763 #758 
- [ ] RateControl (e.g., leaky bucket)
- [ ] Retry throttling
- [ ] copy betwen streams #396 
- [ ] cache (like Guava's Cache). Probably this is the last resort to be free from Guava library dependency. exaple: FaultTolerantCache in robustools https://github.com/frsyuki/robustools
- [ ] Multi-map 

## airframe-di
- [ ] bindConfig { (D1, D2, ...) => C } #650
- Integrating with famous Scala libraries
    - examples:
      - [ ] Using Airframe with Spark. We already have this example in production.

## airframe-http
- Scala As A Microservice IDL
  - [ ] Support separting server/client-side implementations 
  - Generate client code from the server definition #577 #492 
     - [ ] Create sbt-airframe-http sbt plugin
     - [ ] Scala client generation
     - [ ] Scala.js client generation
     - [ ] API doc generation #453 
- [ ] Add http logging #399
- [ ] (under consieration) Generate Open API specification #260 
- [ ] Finagle Scala 2.13 support #648 
- [x] Scala.js 1.0.0 support #821 
- [ ] backend-independent request/response objects #827 
- [ ] Scala.js http client #807 
- [x] CORS filter #846 
- [ ] circuit breaker #874 

## airframe-http-recorder
- [ ] Recording snapshots in YAML or JSON local files for human-readability 

## airframe-http-widget
- [ ] UI widget collection library for Scala.js #806 

## airframe-jdbc
- [ ] Support inserting case class instances as table records

## airframe-jmx
- [ ] remote method call #463
- [ ] json output for complex types #462 

## airframe-launcher
- [ ] Allow passing global option objects to child command

## airframe-msgpack
- [ ] Nested cursor support for the better error handling
- [ ] Handle EOF without using EOFException for stream RPC support
- [ ] Guess a schema of msgpack data #516
- [ ] benchmark to utilize multiple-threads #509

## airframe-sql
- [ ] SQL filter evaluation for msgpack stream
- SQL support
  - [x] SQL typer
  - [ ] SQL decomposer
- SQL processing code generator
  - [ ] Scala target

## airframe-widget
- [ ] variable
- [ ] virtual dom
- [ ] UI widget collection #806 

## airspec
- [x] `test(..., design) { (d1, d2, ...) =>  }` #872 
- [ ] Power assertion for test failures (e.g., show the condition expression and data differences)
- [ ] Use function return values to record test results. There might be more meaningful usage of function return values (e.g., storing test data to DB, sending metrics to fluentd, etc.)
- [ ] Asynchronous tests, returning Future type for Scala.js
- [ ] Support context.run[A](additional design) to support fine-grained design customization.
- [ ] IntelliJ plugin #646
- [ ] Create a standalone launcher for running tests. #685
- Applications to runtime testing
  - [ ] smoke testing
  - [ ] active monitoring

# Scala 3 (dotty)
- [ ] airframe-log support #867 
- [ ] Surface support
- [ ] airframe-di support
- [ ] AirSpec support
- [ ] airframe-config support
- [ ] airframe-http support



When a type X contains non-serializable types in its parameters, MessageCodec.of[X].toXXX will throw a runtime exception. 

For the application safety, we should be able to check whether the type is serializable or not when creating a codec:

```scala
case class X(p:Y)
case class Y(a:NonSerializableType) 

val codec = MessageCodec.of[X] // Throw NonSerializable exception (e.g., "Y.a" is not serializable)
```

