Fixes #301 (this is caused by bad truncation)
cc. #302 (should fix many known cases of this, but theoretically the problem still exists)
cc. #318 (needs more investigation)

This keeps all existing truncation code intact, just doesn't use the resulting substs or goals. But could change it to short-circuit to a bool.

Could add some documentation to `abstract_*_literal` to explain why we discard the goal if it would get truncated, but overall changes are pretty minimal/complete.
Most types with `projection` in the name were renamed to `alias`, but I've kept the projection-specific code (mostly `program_clauses.rs` and `split.rs` mostly the same. It's not entirely clear to me which parts will need to be generalized to all kinds of aliases, and which parts stay specific to associated type projections.

Running the existing `forall_projection_gat` test with a `max_size` of `3` causes a panic with `should have floudered`, which comes from this line https://github.com/rust-lang/chalk/blob/4005b5ff3ee31a197ee3aa7d0c97d670cee0067b/chalk-solve/src/clauses.rs#L346. While using a `max_size` that low usually won't happen, it indicates that logic somewhere is wrong.
I'm testing `rust-analyzer` in Emacs with a large-ish project (~18000 loc excluding dependencies), and running into long pauses spent in chalk. This is a stack trace from a profiler attached to `ra_lsp_server`, showing where most of the time is spent (in ms) from triggering a `highlight` request to the language server:

<img width="854" src="https://user-images.githubusercontent.com/9677694/71523041-18504600-28bf-11ea-881b-cb92d47a1b85.png">

I'm not sure what the problem is based on the output, but happy to run other tests and/or provide private access to the repo.

I'm running on OSX and have also enabled the `useClientWatching` option for `rust-analyzer`.

/cc @matklad 
In #272, @jackh726 [commented](https://github.com/rust-lang/chalk/pull/272#discussion_r360658179):

Ok, so there's a couple things going on here, and I'll try to explain it succinctly since I'm traveling today (so on mobile at least for the minute).

So first, it's maybe not obvious from the PR (and maybe not even *wrong*), but something I found when looking through `CHALK_DEBUG` output. But in `apply_answer_subst`, we can't *properly* check if the delayed subgoals are equal to the table goal, because the delayed subgoals get unique inference variables. (Perhaps this would be easier/quicker to check using the variant3 test and adding dbg statements there.)

Second, I would REALLY prefer to have these be checked *before* they are added to the answer. But, because of 1,  we have to wait until they are both canonicalized, which happens in pursue_answer. At that point it is *too late* because that doesn't know about the subgoal. That was mostly the point of this FIXME: we can be smarter here I think, but it requires a bit of refactoring.

Third, there are essentially two places that do this check. First is in `apply_answer_subst` and second is here. They aren't the same: removing this causes the variant3 test to fail. Removing the other causes...many of the conductive tests to fail (and a never-ending test for one that I don't remember off the top of my head). I'm not convinced that there couldn't be just one check in the right place.

So, overall. I'm a bit skeptical. Between both checks, everything works. But as I said, I don't know if it's perfectly correct and I definitely think there's room for improvement. Whether that needs to be done in this PR or can be done separately idk. 

Nonetheless, I should have some time soon to, at the very least, cleanup this FIXME and a couple other things. (Like the extra apply_binders function that was added but isn't used anymore). If we decide to land the PR as is, I'll file a followup issue with more detailed info.

_Originally posted by @jackh726 in https://github.com/rust-lang/chalk/pull/272_
This PR contains book chapters describing the chalk-ir crate. These chapters are also meant to serve as a proposal that we can discuss at a compiler team meeting, although I would expect such a meeting would focus more on the high-level bits than the *nitty gritty* of the design.

This text does not align precisely with the state of the master branch.
In https://github.com/rust-lang/chalk/pull/294, we opted to stop truncating the environment. The problem was due to an infinite loop that arose in some rust-analyzer cases. The scenario [was described on Zulip](https://rust-lang.zulipchat.com/#narrow/stream/144729-wg-traits/topic/design.20meeting.202019.2E12.2E09/near/182989871) recently but is also covered in #280 and #289.

In short, we would truncate a projection `Foo::Bar` from the environment and replace it with an inference variable `?X`. When we get back an answer, we would unify `Foo::Bar` with the value inferred for `?X` -- which would up being a fresh inference variable. This would create a projection goal, but that projection goal includes the same environment that we started with, and hence that same environment would get truncated again. This would result in the cycle beginning anew.

For now, we opted to just stop truncating the environment, because it isn't really needed at the moment -- Rust doesn't generate queries that grow the environment in indefinite ways. But we may want to revisit this with another fix, or -- depending on how we resolve normalization -- this may become a non-issue in the future. 
It's possible that a new answer may not be ambiguous, but an older answer was. In this case `push_answer` on `Table` does not insert a new answer, but still returns `true`. https://github.com/rust-lang/chalk/blob/3ef20308e7882a3e5fb71a6f28caab8cc71cf5f0/chalk-engine/src/table.rs#L107

However, if `true` is returned, then it's propagated up and eventually the `AnswerIndex` is incremented
https://github.com/rust-lang/chalk/blob/3ef20308e7882a3e5fb71a6f28caab8cc71cf5f0/chalk-engine/src/forest.rs#L231

Then, in the next iteration of checking for an answer, the `AnswerIndex` is not the next index, so this assertion can fail:
https://github.com/rust-lang/chalk/blob/3ef20308e7882a3e5fb71a6f28caab8cc71cf5f0/chalk-engine/src/logic.rs#L194 

Simply changing `push_answer` to panic whenever a new answer would replace an old one doesn't cause any tests to fail. So if this is a valid case, then a test should be added.

Relevant zulip: https://rust-lang.zulipchat.com/#narrow/stream/144729-wg-traits/topic/design.20meeting.202019.2E12.2E02/near/182380076




I've seen the following panic couple of times:

```
thread 'main' panicked at 'truncate extracted a pending value that references internal binder: Ty(StructId(60)<StructId(2112), ^0>)', 
/home/matklad/.cargo/git/checkouts/chalk-af2ed8365b2aac89/095cd38/chalk-solve/src/solve/slg/resolvent.rs:292:17
```

I have not tried to minimize it, but the repro is

```
cargo run -p ra_cli --release -- analysis-stats --with-deps --only replay ~/tmp/parity-ethereum/
```

from rust-analyzer repository where `parity-ethereum` is https://github.com/paritytech/parity-ethereum/commit/cf2cb58e1d0fb5c7bcf59b4456492286907ce66c
