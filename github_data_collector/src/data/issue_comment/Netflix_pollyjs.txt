## Description

Bug - The examples folder `jest-puppeteer` doesn't work, i imagine that is a topic of version because all package are configured to install last version "*".
Installed all packages then run `yarn test`

The console doesn't print that the test failed or not, another thing i did for test was delete the recording folder and it doesn't recorded a new one.

I've tried those packages into my local application and they didn't work as well, when trying puppeteer alone, including the examples folder everything works as expected.

Hey there,

I'm trying to use pollyjs with puppeteer and I'm encountering a problem, some non-critical requests are erroring out when changing the page with puppeteer's `goto()`. This is happening even in `passthrough` mode.
```sh
  console.group node_modules/@pollyjs/core/dist/cjs/pollyjs-core.js:2296
        Errored ➞ POST https://www.google-analytics.com/collect

  console.error node_modules/@pollyjs/core/dist/cjs/pollyjs-core.js:2297
        { errorText: 'net::ERR_ABORTED' }
```
I'm not sure exactly what this error is indicating either.

This causes the whole test to fail. I'm wondering if there is an easy way to have polly ignore requests for this url, or disable throwing errors selectively or entirely.

The test is fairly simple:
```js
it('should do something', async () => {
  await page.setBypassCSP(true)
  await page.setRequestInterception(true)
  const polly = await new Polly(
    `should-do-something`,
    {
      mode: 'passthrough',
      adapters: ['puppeteer'],
      adapterOptions: {
        puppeteer: { page },
      },
      recordFailedRequests: true,
      logging: false,
    }
  )
  await page.goto('http://localhost:3000')
  await page.goto('http://localhost:3000')
})
```

Package versions:
```
"@pollyjs/adapter-puppeteer": "2.6.3",
"@pollyjs/core": "2.6.3",
"@pollyjs/persister-fs": "2.6.3",
"jest": "24.9.0",
"jest-puppeteer": "4.3.0",
"puppeteer": "1.20.0",
```

Trace:
```
    Evaluation failed: TypeError: Failed to fetch

      at ExecutionContext._evaluateInternal (../../node_modules/puppeteer/lib/ExecutionContext.js:122:13)
        -- ASYNC --
      at ExecutionContext.<anonymous> (../../node_modules/puppeteer/lib/helper.js:111:15)
      at DOMWorld.evaluate (../../node_modules/puppeteer/lib/DOMWorld.js:112:20)
        -- ASYNC --
      at Frame.<anonymous> (../../node_modules/puppeteer/lib/helper.js:111:15)
      at Page.evaluate (../../node_modules/puppeteer/lib/Page.js:833:43)
      at Page.<anonymous> (../../node_modules/puppeteer/lib/helper.js:112:23)
      at evaluate (../../node_modules/@pollyjs/adapter-puppeteer/src/index.js:171:14)
      at new F (../../node_modules/core-js/library/modules/_export.js:36:28)
      at PuppeteerAdapter.passthroughRequest (../../node_modules/@pollyjs/adapter-puppeteer/src/index.js:166:30)
      at PuppeteerAdapter.passthroughRequest [as onPassthrough] (../../node_modules/@pollyjs/adapter/src/index.js:269:33)
      at PuppeteerAdapter.onPassthrough [as passthrough] (../../node_modules/@pollyjs/adapter/src/index.js:129:17)
      at PuppeteerAdapter.passthrough (../../node_modules/@pollyjs/adapter/src/index.js:104:19)
        -- ASYNC --
      at Page.<anonymous> (../../node_modules/puppeteer/lib/helper.js:111:15)
      at evaluate (../../node_modules/@pollyjs/adapter-puppeteer/src/index.js:171:14)
      at new F (../../node_modules/core-js/library/modules/_export.js:36:28)
      at PuppeteerAdapter.passthroughRequest (../../node_modules/@pollyjs/adapter-puppeteer/src/index.js:166:30)
      at PuppeteerAdapter.passthroughRequest [as onPassthrough] (../../node_modules/@pollyjs/adapter/src/index.js:269:33)
      at PuppeteerAdapter.onPassthrough [as passthrough] (../../node_modules/@pollyjs/adapter/src/index.js:129:17)
      at PuppeteerAdapter.passthrough (../../node_modules/@pollyjs/adapter/src/index.js:104:19)
      at PuppeteerAdapter.handleRequest (../../node_modules/@pollyjs/adapter/src/index.js:78:13
```

If this is a non-trivial case I can make a repro.
## Description

This is a feature/documentation request. 

My goal is to have a proxy server (node vanilla http or express) which will persist HAR files for any request that goes through it. It seems like in Polly, it's expected to be run on the client that is sending requests. In my scenario, I don't control the client but I do control the server the client is sending requests to over http. So, I want to be able to start a node http server, transparently pass through requests to the proxy target and responses to the client, and have Polly (running on the same server) persist HAR files for these request/response pairs. 

I'm glad to implement this and contribute it back but I'm looking for high-level guidance on if it makes sense to do this with Polly and, if so, how it should be implemented. It seems like I should be able to make an adapter that maps the parsed data from node http.IncomingMessage for the request and http.ServerResponse for the response onto Polly's format and use the fs persister and it should "just work" but I'm not clear on how much from the node-http client example is necessary and how it's different since the flow is a little inverted.

Thoughts?
## Description

I use PollyJS with Puppeteer to record and replay http requests in E2E test context.
I have one never-ending http call, I'm trying to figure out why. I didn't managed to find the root cause of it and started to wonder if it could be a bug.

- Every other requests works as expected, only this one doesn't.
- the request is an http POST to a laravel backend to get an auth token: `/oauth/token`
- Based on body parameters, if username and password are invalid, the backend answer with an error and PollyJS behave correctly
- If username and password are valid, the backend answer code 200 with a token
- Request works as expected when Polly is not enabled and request interception is off

### Manual tests in devtools 

```js
fetch(url, {
        method: 'POST',
        headers: {
	    accept: 'application/json',
            'content-type': 'application/json;charset=UTF-8',
        },
        body: JSON.stringify(credentials),
    }
```

#### Without polly

<img width="972" alt="Capture d'écran 2019-08-06 18 47 32" src="https://user-images.githubusercontent.com/1358738/62550095-b09b4f00-b87a-11e9-9e15-529c922dfd2d.png"><img width="765" alt="Capture d'écran 2019-08-06 18 48 23" src="https://user-images.githubusercontent.com/1358738/62550138-cad52d00-b87a-11e9-9ce6-d0ca58ec3168.png">

#### With polly

<img width="1011" alt="Capture d'écran 2019-08-06 18 41 52" src="https://user-images.githubusercontent.com/1358738/62549645-edb31180-b879-11e9-8cb9-e4188fb984de.png">
Details of the passthrough request:
<img width="846" alt="Capture d'écran 2019-08-06 18 51 31" src="https://user-images.githubusercontent.com/1358738/62550384-3c14e000-b87b-11e9-9963-99c0b7e719ba.png"><img width="649" alt="Capture d'écran 2019-08-06 19 10 29" src="https://user-images.githubusercontent.com/1358738/62551913-df66f480-b87d-11e9-89d9-c61acc5d57ad.png">

I tried to understand what is happening by watching page events in the polly-puppeteer-adapter and have seen my request going through these events : `request / response / request failed (timeout)`

### Dependencies

```json
{
    "@pollyjs/adapter-puppeteer": "^2.6.0",
    "@pollyjs/core": "^2.6.0",
    "@pollyjs/persister-fs": "^2.6.0",
}
```
### Config

```js
new PollyJS('', {
      mode: 'passthrough',
      adapters: ['puppeteer'],
      persister: 'fs',
});
```

## Environment

```
Node.js v11.5.0
darwin 18.7
6.10.2
1.17.3
```

## Description

Because of the use of the InMemoryPersister (#233), we removed all the stored recordings generated by the tests which we used as a crutch to do semi-manual regression testing (e.g. check if certain attributes changed in the HAR file after making a change). Instead, we should write actual snapshot tests to catch these which will be significantly more useful.

## Description

Per convo in #236, it looks like `test/integration/adapter-node-tests.js` is not being run and is most likely dead code. 

### Repro steps

Edit `test/integration/adapter-node-tests.js` and add e.g. `expect(false).to.equal(true);` into one of the `it` blocks.
##  Description

The `startedDateTime` is a timestamp but does not include timezone information.
This could lead to potential problems with [expiration calculation](https://github.com/Netflix/pollyjs/blob/02a476716d67225195842fe7ef92fac6dc383041/packages/%40pollyjs/adapter/src/utils/is-expired.js#L7).

Example situation:

- User A records a network call in GMT -05:00
- `expiresIn` is set to e.g 3 days
- User B replays a network call in GMT +7:00, 2.5 days later

The request will expire since `startedDateTime` will be converted to the local timezone.

Another example would be running code with Polly on CI which hosts servers on a different timezone than your machine. This way you could get inconsistent results compared to localhost.

## Suggested solution

It would be good to save the timezone information into the `startedDateTime` in the har file (or any other persister format), so it can be parsed together with the timestamp & current time converted to the timezone of the recording for comparison to get consistent results regardless of the location.
## Description

I'm using Firestore in my project. Firestore seems to use long-polling on HTTP GET requests to provide its real-time updates. This means firestore js library (i'm using angularfire2) first makes a POST request to firestore servers. That one is fine. Then it does a GET request, which is kept open for a long time, around a minute. If you look at that GET request in Chrome's devtool, it will show you an empty response because devtools are waiting for the request to close I guess to display the response. However the js code already has access to the chunks of data, so firebase already displays it on the page.

When polly.js gets in the picture, even in passthrough mode, it crashes. The POST request works fine, but the subsequent long-lived GET queries, even if passed-through, are breaking firebase js call-site.

The fact that passthrough also breaks firestore means it's a no-go for my project. I'm really eager to use polly.js, and I would love to find a workaround even if it means I can ignore those firebase calls and mock the other calls. Best would be of course to be able to mock those long-polling calls as well.

### Error Message & Stack Trace

In order:

```
Passthrough ➞ POST https://firestore.googleapis.com/google.firestore.v1.Firestore/Listen/channel?database=projects%2Fdrone-advisor-test%2Fdatabases%2F%28default%29&VER=8&RID=12971&CVER=22&X-HTTP-Session-Id=gsessionid&%24httpHeaders=X-Goog-Api-Client%3Agl-js%2F%20fire%2F6.3.1%0D%0A&zx=9db2uev7uvsd&t=1 200 • 26ms
```

At this point, the GET request is intercepted by polly.js, but polly is not logging it cause the request is still not closed.

After 10s, firebase call-site which is wrapped by polly fails to get the data they want, so they print this:

```
index.esm.js:117 [2019-07-26T05:13:21.884Z]  @firebase/firestore: Firestore (6.3.1): Could not reach Cloud Firestore backend. Backend didn't respond within 10 seconds.
This typically indicates that your device does not have a healthy Internet connection at the moment. The client will operate in offline mode until it is able to successfully connect to the backend.
```

After more time, like 1min, the request is closed (I assume by the server), and polly prints:

```
pollyjs-core.js:7152 Passthrough ➞ GET https://firestore.googleapis.com/google.firestore.v1.Firestore/Listen/channel?database=projects%2Fdrone-advisor-test%2Fdatabases%2F%28default%29&gsessionid=Y97JxkYuiOdaHZaj8QPKyNK5tVncDx6m&VER=8&RID=rpc&SID=okOtkYysixnek6sHNypRCQ&CI=0&AID=0&TYPE=xmlhttp&zx=gb8xvyqqxewm&t=1 200 • 47174ms
pollyjs-core.js:7163 Errored ➞ GET https://firestore.googleapis.com/google.firestore.v1.Firestore/Listen/channel?database=projects%2Fdrone-advisor-test%2Fdatabases%2F%28default%29&gsessionid=Y97JxkYuiOdaHZaj8QPKyNK5tVncDx6m&VER=8&RID=rpc&SID=okOtkYysixnek6sHNypRCQ&CI=0&AID=0&TYPE=xmlhttp&zx=gb8xvyqqxewm&t=1
pollyjs-core.js:7164 Error: INVALID_STATE_ERR - 0
    at verifyRequestOpened (pollyjs-adapter-xhr.js:6788) [<root>]
    at FakeXMLHttpRequest.setStatus (pollyjs-adapter-xhr.js:7028) [<root>]
    at FakeXMLHttpRequest.respond (pollyjs-adapter-xhr.js:7193) [<root>]
    at XHRAdapter.respondToRequest (pollyjs-adapter-xhr.js:11071) [<root>]
    at XHRAdapter._callee14$ (pollyjs-adapter-xhr.js:10859) [<root>]
    at tryCatch (pollyjs-adapter-xhr.js:68) [<root>]
    at Generator.invoke [as _invoke] (pollyjs-adapter-xhr.js:294) [<root>]
    at Generator.prototype.<computed> [as next] (pollyjs-adapter-xhr.js:120) [<root>]
    at asyncGeneratorStep (pollyjs-adapter-xhr.js:1961) [<root>]
    at _next (pollyjs-adapter-xhr.js:1983) [<root>]
    at :8100/vendor.js:129842:19 [<root>]
    at new Promise (pollyjs-adapter-xhr.js:1819) [<root>]
    at XHRAdapter.<anonymous> (pollyjs-adapter-xhr.js:1979) [<root>]
    at XHRAdapter.onRequestFinished (pollyjs-adapter-xhr.js:10873) [<root>]
```

I think this class may be the [firestore network implementation](https://github.com/firebase/firebase-js-sdk/blob/7043422243ff0aa8f298a04cbc8f0450856c0908/packages/firestore/src/remote/persistent_stream.ts).

### Config

Copy the config used to setup the Polly instance:

```js
this.polly = new Polly('test-recording', {
      adapters: [adapterFetch, adapterXhr],
      persister: persisterLocalStorage,
      matchRequestsBy: {
        headers: false,
        url: {
          query: false,
        },
      },
      logging: true,
})
const {server} = this.polly
server.any(['/*', 'https://firestore.googleapis.com/*']).passthrough()
```

### Dependencies

Copy the @pollyjs dependencies from `package.json`:

```json
{
   "@pollyjs/adapter-fetch": "^2.6.0",
   "@pollyjs/adapter-xhr": "^2.6.0",
   "@pollyjs/core": "^2.6.0",
   "@pollyjs/persister-local-storage": "^2.6.0"
}
```

## Environment

This is running in-browser

* chrome Version 75.0.3770.142 (Official Build) (64-bit)
* macOS 10.13.6 (17G7024)
Rather than generating a directory named with the [`recordingName`](https://netflix.github.io/pollyjs/#/api?id=recordingname) and then a `recording.har` file inside that, I'd prefer to just have the `recording.har` file named with `recordingName`, thus removing the additional directory depth.
## Description

I'd like to be able to override the method use to log to the console. Rather than assuming we always want to call `console.log`, it would be cool if that is a default but overridable with a user-provided function with some given signature.

One use-case is logging the mocked requests into the Cypress command log, so that it's clear what is going on in Polly during your tests. https://docs.cypress.io/api/commands/log.html

If you are interested in a feature like this, I'm happy to open a pull request for it.

## Proposed Syntax

I would propose that, in addition to configuring logging being enabled or disabled, an alternate `logger` can be provided. That could look something like this:

```js
new Polly("..", {
  logging: true,
  logger: {
    log() { ... }
  }
})
```

it might be interesting to allow `logger` itself to be a function that returns an object with the desired properties, like so:

```js
new Polly("..", {
  logging: true,
  logger: () => ({
    log() { ... }
  })
})
```