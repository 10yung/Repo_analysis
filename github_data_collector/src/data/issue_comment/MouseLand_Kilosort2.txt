I would like to do an analysis that extracts spike waveforms from the raw data (ie, the continuous voltage traces). However, instead of just extracting snippets of the raw data at the spike times of my unit of interest (which would be contaminated by any co-occuring spikes from other templates), I would like to subtract out the spikes from all other templates except for my unit of interest. If I understand correctly, this would be the best "estimate" of every individual spike waveform belonging of the unit of interest because any interference from temporally overlapping spikes from other templates would be subtracted off.

With static templates like in Kilosort1, it is straightforward to subtract out amplitude-scaled templates from the raw data. In Kilosort2, the templates vary over time, and the "predictData.m" script from the GUI shows how to reconstruct the raw data from the templates using rez2.mat. 

This is ALMOST enough...BUT, the "predictData.m" script uses template and spike information from before the automatic merge/split step because it appears that the time-varying template data (rez.W_a, etc) are organized according to the "pre-merge/split" list of templates whereas I need to use the "post-merge/split" list of templates in order to not subtract out my unit of interest. How can I map between the "pre-merge/split" list of templates and the "post-merge/split" list of templates? I can't seem to find this information in the output. 

Related questions about template information for clarification:
1) In rez2.mat, fields like rez.W_a and rez.W contain different numbers of templates. I assume this is because (as mentioned above) rez.W_a refers to "pre-automerge/split" list of templates and rez.W refers to "post-automerge/split" list of templates. Is this true?

2) The 2nd dimension of rez.W is larger than the number of different templates in st3 (ie, length(unique(rez.st3(:,2)), and further if you order the clusterView by ID in phy, you see that the ids are not continous and some IDs are skipped (ie #3 is missing: 0 1 4 5 6 7...). I assume this is just because templates undergoing merge or split in the automatic merge/split step are assigned a new index at the end of rez.W, but the old index is still there in rez.W?

Any help is greatly appreciated.

I have been running into an issue where it looks like fewer spikes are being detected immediately after as well as immediately _before_ (~5-10ms) the onset of LED light for optogenetic manipulation. I am quite certain that it is in fact before the LED comes on because light artifacts that are mistaken for spikes are quite obvious (high amplitude) and line up with my analog signal (blue trace in attached figure) for my light delivery. I've been going through the Kilosort2 code a lot trying to figure out where the problem is arising, and so far my best guess is that is has to do with how the raw signal containing a big deflection in voltage due to light onset is getting filtered in the pre-processing stage. Anyway, I'm wondering if anyone has any explanation for this and suggestions for how to mitigate it (while it's not a huge deal for my analyses because I'm not analyzing spikes during this time period when the LED first comes on, I noticed it because some of PSTHs look weird with a little dip in spikes immediately prior to LED onset)
![NPRH25_LP_detectedspikes](https://user-images.githubusercontent.com/14080286/72642698-d5174f00-3921-11ea-9573-9deb3be690a2.png)


A few other relevant points:
- this effect scales with LED intensity (the greater the intensity, the greater the drop in spikes)
- I still see it in control animals not expressing an opsin (i.e., it's not a legitimate optogenetic effect)
- I only noticed it when I started recording from the thalamus, where spontaneous spike rates are considerably higher than in cortex (and so a dip in spikes is more obvious)
- It seems to mainly effect the detection of lower-amplitude units (which is why I'm thinking it has to do with how the threshold for spike detection is determined from the pre-processed data?)

Thanks in advance for any explanations and/or advice!
The following error comes up when trying to spike sort:

Error using gpuArray/subsasgn
An unexpected error occurred trying to launch a kernel. The CUDA error was:
invalid argument

Error in triageTemplates2 (line 13)
W(:,idrop,:) = []; % remove those templates everywhere

Error in learnTemplates (line 173)
                triageTemplates2(ops, iW, C2C, W, U, dWU, mu, nsp, ndrop);

Error in learnAndSolve8b (line 12)
    rez     = learnTemplates(rez, iorder0);

The error would not occur with an earlier version of kilosort 2.
The open ephys data format saves two files for continuous recordings: continuous.dat and timestamps.npy. If we save the kilosort results in the same folder as these two files (which is useful so that phy can access continuous.dat), the rezToPhy function will delete the timestamps.npy file. I'm not sure how important that file is, but its probably best that it does not get removed unnecessarily.
Hi,
I recorded some monkey data simultaneously from 2*5 electrodes, in 2 distinct brain areas (1 single electrode + 1 tetrode per area).
Will drift correction be correctly performed with only 5 channels per area? Does that make sense to use KS2 with these data? If yes, should I process the 5 channels from one area separately from the 5 channels of the other area or not?
Thanks in advance for your answer. 
Hi, Kilosort community. As I am checking the template changing across time. I've found some pretty unstable templates in the results (it's the dWU template, x axis unit should be 1/40 ms):
![cluster_29_reordered](https://user-images.githubusercontent.com/56739632/72355084-c9732080-36b4-11ea-8ff3-1f94fc1453f3.gif)

![cluster_32](https://user-images.githubusercontent.com/56739632/72356286-04765380-36b7-11ea-9204-f88d287bffed.gif)

The code I used to extract template is this:
```
for iComponent = 1:3
    U{iComponent} = squeeze(rez.UA(:,iCluster,iComponent,iBatch));
    W{iComponent} = squeeze(rez.WA(:,iCluster,iComponent,iBatch));
    template = template + U{iComponent} * W{iComponent}';
end
```
I've tried both with and without reference to `rez.iorig`, and the templates remain unstable either way. And this happens to around 8 clusters out of 45 clusters Kilosort detected. 
I thought the waveform should at least change slowly over the time. Is this something that's expected? Or did I extract the templates wrong somehow?

Thanks for your time!
Hi, I checked the phy github, but I still haven't found the .npy file in which I can find each sorted spike belongs to which channel. So, I can't get the waveform of each spike in matlab if I need it.
We receive an error when trying to run "mexGPUall" (described below). MATLAB correctly recognizes the Quadro RTX 5000 GPU. I am using MATLAB R2019b and have downloaded VS community 2013, Cuda toolkit 10.1, MATLAB Support for MinGW-w64 C/C++ Compiler, and the GUI layout toolbox. Any suggestions.

When I run 
>>mex -setup C++
MEX configured to use 'MinGW64 Compiler (C++)' for C++ language compilation.

when I run 
>>mexGPUall
Warning: The selected C++ compiler is not supported for CUDA compilation. Searching for a supported compiler. 
> In mexcuda (line 94)
  In mexGPUall (line 5) 
Error using mex
No supported compiler was found. For options, visit https://www.mathworks.com/support/compilers.

Error in mexcuda (line 166)
    [varargout{1:nargout}] = mex(mexArguments{:});

Error in mexGPUall (line 5)
    mexcuda -largeArrayDims mexThSpkPC.cu

The problem is that I don't know why mexGPUall will not run successfully, since I believe I do have the supported compiler. 


Hello! Does anyone know how to just process one channel at a time with Kilosort? It doesn't work if I block all other channels.