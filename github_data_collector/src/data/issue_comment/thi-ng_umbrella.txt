following discussion on discord,
https://discordapp.com/channels/445761008837984256/445761258696736790/657739072470646794

TypedArray endianness is platform specific

Malloc supports loading external arraybuffers, that possibly was created & used on a device with different endianness.
For example: passing arraybuffer as binary data from server to client.

**None Goal:**
Fix the whole endianness issue for userspace values.

Possible things to do about it:
* Nothing: almost everything is LE
* Add a header flag, that is readable in an endianness-agnostic way to tell on which endianness the pool's arraybuffer was created on. so we can make sanity check and bail.
*  Add static function on the lib to sniff the endianness on a given arraybuffer, to use before passing to a new instance of pool

* let malloc sniff it when providing existing arraybuffer and fail/transform the arraybuffer to the appropriate endianness.
Pros:
Will allow max heap size of `2^53−1` and not only `2^32−1`

Cons:
Additional 8 bytes overhead for each allocated block + few more constant bytes for the state values.

Middle ground: 
make it configurable?

Need to take into account:
The effect of the pointers on the block alignment 

Why not BigInt:
Not supported on many platforms 
Currently, the `baseline` attribute values used by hdom-canvas remain untranslated when converting to SVG via `convertTree()`. Let's figure out a set of valid mappings, incl. any necessary math (if any) involving font size. If the latter is required, we might need a stack to track the currently active font size to support cases where font size is not defined on the `<text>` element itself, but only defined via parent groups/elements...

References:

- Canvas: https://developer.mozilla.org/en-US/docs/Web/API/Canvas_API/Tutorial/Drawing_text#Styling_text
- SVG: https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/dominant-baseline
Hey, so on the discord server @postspectacular told me about the typesafe versions of paths. I took a look and I was not so happy to see this giant mess (it's actually a lot more but if I make the text even smaller it becomes hard to read):
![this](https://cdn.discordapp.com/attachments/549314199386456114/663334121745022978/unknown.png)

Based on the fact those things are imported from `@thi.ng/api` I'm pretty sure other packages contain code like this as well... But we can do more! Typescript has a pretty neat type system which allows us to write stuff like that without all the repetition!

## Final result:

Before going into more details, here's the final result of the refactor for the code above:
![refactored code](https://media.discordapp.net/attachments/445761258696736790/663338921777823746/unknown.png)

And the good thing is, this works for any path length!

## Building blocks:

To be able to achive that I had to write a few basic types:

> Note: In case you want to see the actual implementations of the types you can take a look at [this typescript playground link](https://www.typescriptlang.org/play/?ssl=1&ssc=1&pln=72&pc=1#code/C4TwDgpgBAEhCGATAPAFQHxQLxVVCAHsBAHaIDOUACvAE7wC2Ext5yAFAG4BcUAliQBmEWlABKAGigA6WXQDm5XvBIgA2gF0AlNkwqQ6AFBQTUAPzjjp3iQicRAbkOHQkWAkSoI5YAEZs7kjIar5SAExSAMwa6A5QAPTxUL4u4NBwSF4+YQEZKJqxCUm29rSpbnlZwJG5HsgARCQA9sBQKm209CD1hYlQJSLOrtCo8HwANmiYOHiExGSU+ppWJhbs7LLSCkq4Olh6qjpzpBRQXMqqUpvbvALComJ7ByArpquWb282doNf-T+0JzlEZjcZVfwzUHBUJQCJQaK9JJqOHRYG4UFVHKQibBGJxPrLYboiZVGrYyaNFptEgdLo9fHFAFDNJQADCTRIAGN4MA0FIAKrTah0RjMERsV7nXBXOS0RS8fn4IgnRaqTTmKCK76lJ7Ul6xZludlcnnggLG7m8gAMUhC4SieKKUDUNuS9vhGjRFtN3mAWLZHMtyFdlNa7TodMR-1KhugYgB5Ag8cQAFdOSI+eIpKyhQBvV5W3je3mobMGt6+Xjx0qJ5NpjN5ZBidBSUY45vZwM8zM5g0AXzUYiV81O6osVqgvF8GiBROr4ogUwCs2VC2dGg16qrCaTEFT6doyEbGFbUJP64NaPnrAgZpw18T0PdCIZzsi7unV53mICD8XBSdQkWT-Ulfx3BpmjDGkI3gbpMD6AYyjRAA1eBxj4RAeQgGhgAACzrA9MwAGSkSQoAAeSFIjhxVKAAGsIBAJpBFwV4LHzT5PkLcRwOLZASIo9By040xKygVD0Mw4gcPwvd60PVA1CIjQpEbDtiUmdS+IEyjhLeAch2ONcxygCcp09P5EKBQgwCaWhWiJCSMKwmTiKomjjIs0wLGWP4nKk7CeVk-cM1LQIUCIlsNP4qKClnYDmFoPh7BkgjQuzKRqKM04lhic0PNOBimJY1A2KgDiRJMbjFNZGdXk4sT42AJKUqCtKFLUWrVLqSLTxxSK9NMAcstXUcN3HSdki8kxtUcZwbLshyEua5LArwtyAhGkdKF87zWL+JqWrW4L5MzRteuigagQEFhBHgdMoAAOV9PdyteeBeAqziACNPvqkTORsFMGG+ubKr7Jx9KcPtY1wX0IXEtDnOkoLkGenw91tep4HqKR6m++pHQJbHcfxwm0R-HB-Jc1H0eIRAsZxvHEEJqNENh0D70S1bXLpzG4Z8Xwo1zKBAf6YHQdEGGiSqAAWMCVta9a+YZgW-TZpkgA)

- Head: returns the first element of a tuple:
```ts
type HeadTest1 = Head<[1, 2, 3]>; // 1
type HeadTest2 = Head<[]>; // never
type HeadTest3 = Head<"not an array">; // never
```
- Tail: returns everything except the first element of a tuple:
```ts
type TailTest1 = Tail<[1, 2, 3]>; // [2, 3]
type TailTest2 = Tail<[]>; // []
type TailTest3 = Tail<"not an array">; // never
```
- Concat: Tried adding an item at the start of a tuple:
```ts
type ConcatTest1 = Concat<0, [1, 2, 3]>; // [0, 1, 2, 3]
type ConcatTest2 = Concat<0, "not an array">; // never
```
- Reverse: pretty explanatory name, reverses the order of elements of a tuple:
```ts
type ReverseTest1 = Reverse<[1, 2, 3]>; // [3,2,1]
type ReverseTest2 = Reverse<[]> // []
type ReverseTest3 = Reverse<"not an array"> // never
```

Those are the building blocks for a lot of more complex types. 
___Question 1___: where should I add these? (I'm thinking of `@thi.ng/api` but I'm not sure

## The actual path stuff

Appying the same logic I was able to build a path validator and a path applier which work with any amount of nesting:

```ts
interface Nested {
    a: {
        b: {
            c: number;
        };
    };
}

type Test1 = ValidatePath<Nested, ["a", "b"]>; // ["a","b"]
type Test2 = ValidatePath<Nested, ["a", "d"]>; // never

type Test3 = RetrivePath<Nested, Test1>; // { c: number }
type Test4 = RetrivePath<Nested, Test2>; // never
```

___Question 2___: Does this seem interesting? Should I open a PR making the entire lib use it?

> Note: The paths package was just an example, this could be applied to a lot of other stuff!!!

So, let's discuss it! What do yall think of this method of typing? Should I open PRs with it?
Most transducers take a source sequence as a final argument.  Since strings are iterable, so you can do this:

```javascript
[...tx.filter(x => true, "abc")]
"abc"
```

However, if you provide an empty string, they will crash:

```javascript
[...tx.filter(x => true, "")]
TypeError: tx.filter(...) is not iterable
```

This is obviously because the transducer functions do a truthiness test on their final argument to determine whether a source was provided:

```typescript
export function map<A, B>(fn: Fn<A, B>): Transducer<A, B>;
export function map<A, B>(fn: Fn<A, B>, src: Iterable<A>): IterableIterator<B>;
export function map<A, B>(fn: Fn<A, B>, src?: Iterable<A>): any {
    return src
        ? iterator1(map(fn), src)
        : (rfn: Reducer<any, B>) => {
              const r = rfn[2];
              return compR(rfn, (acc, x: A) => r(acc, fn(x)));
          };
}
```

This could be corrected by replacing `src` with `isIterable(src)` (using `@thi.ng/checks`).  This would incur the additional work of looking up `Symbol.iterator`, but it would seem to be more correct.  I can't think of a case where this would be a breaking change (i.e. values for `src` that work now but are not iterable by that test).

@postspectacular  I'm willing to PR if you think this is actionable.  I understand there's a lot of branch work going on, so whatever you think best.

A workaround for the time being is to wrap the string argument in `[...s]`.
Similar blocks of code found in 2 locations. Consider refactoring.

https://codeclimate.com/github/thi-ng/umbrella/packages/ecs/src/components/mem-component.ts#issue_5de2913605e8040001000d2d
Similar blocks of code found in 2 locations. Consider refactoring.

https://codeclimate.com/github/thi-ng/umbrella/packages/ecs/src/groups/group.ts#issue_5de2913605e8040001000e35
Similar blocks of code found in 2 locations. Consider refactoring.

https://codeclimate.com/github/thi-ng/umbrella/packages/scenegraph/src/node2.ts#issue_5de2913605e8040001000ce0
This [temporary documentation repo](https://github.com/thi-ng/umbrella-docs-temp/blob/master/index.md) is meant for testing out the [new doc toolchain](https://api-extractor.com/) to provide better cross-package navigation and a (hopefully) generally improved experience... This doc repo consist of over 8000 markdown files and I cannot check them all myself for issues (of which there are still many...)

So this issue here is used to collect a list of links/pages exhibiting serious formatting problems. If you come across any eye sores, please do paste the offending URL as comment (and optionally / if needed, with a brief description). Thanks v.much in advance!
Hi @postspectacular 

I'm smashing my head against this and I'm sure there's a simple explanation or I'm just doing something dumb, but...

In your `hiccup-markdown` [example](https://github.com/thi-ng/umbrella/tree/master/examples/markdown), I'm trying to recreate it, but when I try to use a file string read via `fs.readFileSync` call (with `utf8` encoding) the result is an empty `[]` rather than a hiccup tree:

```js
const blog = readFileSync('./assets/blog.md', 'utf8')
console.log([...iterator(parse(), blog)]) //? -> []
```

It works perfectly (both in console and rendered in hiccup within hdom `start()`) if the string is stored as a standard `var/let/const`. but not when I try to load it in as a file. I can't figure out what I'm doing wrong. When I print/log/return the variable wherein I store the result of `readFileSync` - the markdown is printed. I just can't figure out why the iterator isn't parsing it...

Why? I'm trying to figure out how best to script this up so that I can dynamically load static markdown files (e.g., from `assets/`) as plain strings that can be used by `iterator`.

I also tried to use your [Parcel setup](https://github.com/thi-ng/umbrella/blob/master/examples/markdown/package.json): 
```js
    "scripts": {
... // is this (--global md) where the magic happens:?
        "build-parser": "yarn clean && parcel build src/parser.ts -d out --global md --public-url ./ --no-source-maps --no-cache --experimental-scope-hoisting --detailed-report --experimental-scope-hoisting",
... 
    },
```
...but I noticed you [`.gitignored` the `*.js` files](https://github.com/thi-ng/umbrella/blob/master/examples/markdown/.gitignore)

I'm stuck.

Two questions:
1. is there a better way than using `readFile` from node with Parcel to turn the file string into an iterable that can be consumed by `iterator`?
2. Should I forgo HDOM's `start()` in favor of `transducers-hdom`? I recall you mentioning you prefer using streams rather than RAF/interceptors. It would help me if you have some guidance as what the pros/cons are for the various approaches
