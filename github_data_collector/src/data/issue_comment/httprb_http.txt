Hi,

I'm investigating an error that is raised when making http request to one of the remote APIs. I don't want to post that request as there are some secrets used, but I think I was able to create minimal reproducible example:

```ruby
require 'socket'

Thread.new do
  server = TCPServer.open(3000)

  client_connection = server.accept

  body_1 = "HTTP/1.1 200 OK\r\nContent-Length: 2\r\nContent-Type: application/json\r\nMyHeader"
  body_2 = ": val\r\n\r\n{}"

  client_connection.write(body_1)
  client_connection.write(body_2)
end

require 'http'
HTTP.get('http://localhost:3000/')
```

Here is the error that is returned:

```
Traceback (most recent call last):
       11: from /home/bonias/.rvm/rubies/ruby-2.6.5/bin/irb:23:in `<main>'
       10: from /home/bonias/.rvm/rubies/ruby-2.6.5/bin/irb:23:in `load'
        9: from /home/bonias/.rvm/rubies/ruby-2.6.5/lib/ruby/gems/2.6.0/gems/irb-1.0.0/exe/irb:11:in `<top (required)>'
        8: from (irb):16
        7: from /home/bonias/.rvm/gems/ruby-2.6.5/gems/http-5.0.0.pre/lib/http/chainable.rb:20:in `get'
        6: from /home/bonias/.rvm/gems/ruby-2.6.5/gems/http-5.0.0.pre/lib/http/chainable.rb:75:in `request'
        5: from /home/bonias/.rvm/gems/ruby-2.6.5/gems/http-5.0.0.pre/lib/http/client.rb:31:in `request'
        4: from /home/bonias/.rvm/gems/ruby-2.6.5/gems/http-5.0.0.pre/lib/http/client.rb:75:in `perform'
        3: from /home/bonias/.rvm/gems/ruby-2.6.5/gems/http-5.0.0.pre/lib/http/connection.rb:103:in `read_headers!'
        2: from /home/bonias/.rvm/gems/ruby-2.6.5/gems/http-5.0.0.pre/lib/http/connection.rb:217:in `read_more'
        1: from /home/bonias/.rvm/gems/ruby-2.6.5/gems/http-5.0.0.pre/lib/http/response/parser.rb:31:in `add'
HTTP::ConnectionError (error reading from socket: Could not parse data)
```

Error is not returned when using `http` version <= `4.1.1`
Added documentation for calling parameters I had to research.
I'm trying to troubleshoot a problem with my HTTP.rb requests.

Specifically, we use a set of proxies for our retrieving (from our API). We have a use case where we are doing HEAD requests to handle URL resolution for shortened URLs.  

It seems like HEAD requests are NOT proxied, even with a configured .via on the HTTP client.  

Maybe that's by design? Or, maybe I'm doing something wrong. Or, maybe it's never been tested and I'm doing something unique (which I doubt).  

This is likely a "support" problem versus a code problem. But, I thought I'd reach out, if nothing else, for others that might hit this problem later and search the issues for a solution. 

To test, I created a bit.ly shortened URL, that redirects to httpbin.org. Then, I'm using HTTPlog to check what happens.  This is what I see. 

```
D, [2019-12-23T12:01:25.512948 #172604] DEBUG -- : [httplog] Connecting: bit.ly:80
D, [2019-12-23T12:01:25.669973 #172604] DEBUG -- : [httplog] Sending: HEAD http://bit.ly/2s5daUJ
D, [2019-12-23T12:01:25.670066 #172604] DEBUG -- : [httplog] Data: 
D, [2019-12-23T12:01:25.679363 #172604] DEBUG -- : [httplog] Status: 301
D, [2019-12-23T12:01:25.679540 #172604] DEBUG -- : [httplog] Benchmark: 0.157089 seconds
D, [2019-12-23T12:01:25.679662 #172604] DEBUG -- : [httplog] Response:

D, [2019-12-23T12:01:25.680647 #172604] DEBUG -- : [httplog] Connecting: httpbin.org:443
D, [2019-12-23T12:01:26.203292 #172604] DEBUG -- : [httplog] Sending: HEAD https://httpbin.org/ip
D, [2019-12-23T12:01:26.203380 #172604] DEBUG -- : [httplog] Data: 
D, [2019-12-23T12:01:26.203463 #172604] DEBUG -- : [httplog] Status: 200
D, [2019-12-23T12:01:26.203578 #172604] DEBUG -- : [httplog] Benchmark: 0.522617 seconds
D, [2019-12-23T12:01:26.203732 #172604] DEBUG -- : [httplog] Response:
```

There is nothing in the logs that indicate a proxy connection.  

Thoughts? 


I'm using HTTP with Savon and I'm getting intermittent timeout errors.

> HTTP::TimeoutError: Read timed out after 0.25 seconds

I can assure you I'm not setting the read_timeout to 0.25 but the problem is the API I'm connecting to is private and can only be accessed on whitelisted servers so I'm not able to submit example code that reproduces the issue.

I've now told Savon to use Net::HTTP and the issue is gone but felt I should still see if there is some way for me to help debug and fix the issue.
Auto-detection is based on standard ENV variables used in a UNIX system.
Some documentation can be seen here:
https://www.gnu.org/software/wget/manual/html_node/Proxies.html

The most common and used are "#{schema}_proxy" and no_proxy, but it also
supports other non-recommended formats covered by Ruby URI library.

Fix #356
This library is generating a segfault for me when I do this  - `HTTP.get(s3_object_public_url).body.to_s`

This is on our Heroku workers, they keep crashing with Segfault. Please see details below.

Its starts with the following error -

```
2019-11-14T21:40:44.777135+00:00 app[worker_a.2]: pid=4 tid=grp4a8ox4 WARN: HTTP::ConnectionError: couldn't read response headers
2019-11-14T21:40:44.777281+00:00 app[worker_a.2]: pid=4 tid=grp4a8ox4 WARN: /app/vendor/bundle/ruby/2.6.0/gems/http-4.2.0/lib/http/connection.rb:104:in `read_headers!'
2019-11-14T21:40:44.777285+00:00 app[worker_a.2]: /app/vendor/bundle/ruby/2.6.0/gems/http-4.2.0/lib/http/client.rb:75:in `perform'
2019-11-14T21:40:44.777287+00:00 app[worker_a.2]: /app/vendor/bundle/ruby/2.6.0/gems/http-4.2.0/lib/http/client.rb:31:in `request'
2019-11-14T21:40:44.777289+00:00 app[worker_a.2]: /app/vendor/bundle/ruby/2.6.0/gems/http-4.2.0/lib/http/chainable.rb:75:in `request'
2019-11-14T21:40:44.777291+00:00 app[worker_a.2]: /app/vendor/bundle/ruby/2.6.0/gems/http-4.2.0/lib/http/chainable.rb:20:in `get'
```

Versions -
- gem 'http', '4.2.0'
- gem 'rails', '6.0.1'
- ruby '2.6.5'
- Deployed on Heroku


Segfault - 
``` 
2019-11-15T03:04:25.870353+00:00 app[worker_a.17]: -- Control frame information -----------------------------------------------
2019-11-15T03:04:25.870365+00:00 app[worker_a.17]: c:0047 p:---- s:0249 e:000248 CFUNC  :http_parser_execute
2019-11-15T03:04:25.870382+00:00 app[worker_a.17]: c:0046 p:0025 s:0241 e:000240 METHOD /app/vendor/bundle/ruby/2.6.0/gems/http-parser-1.2.1/lib/http-parser/parser.rb:222
2019-11-15T03:04:25.870386+00:00 app[worker_a.17]: c:0045 p:0011 s:0235 e:000234 METHOD /app/vendor/bundle/ruby/2.6.0/gems/http-4.2.0/lib/http/response/parser.rb:29
2019-11-15T03:04:25.870390+00:00 app[worker_a.17]: c:0044 p:0057 s:0230 e:000229 METHOD /app/vendor/bundle/ruby/2.6.0/gems/http-4.2.0/lib/http/connection.rb:217
2019-11-15T03:04:25.870393+00:00 app[worker_a.17]: c:0043 p:0039 s:0223 e:000222 METHOD /app/vendor/bundle/ruby/2.6.0/gems/http-4.2.0/lib/http/connection.rb:92
2019-11-15T03:04:25.870395+00:00 app[worker_a.17]: c:0042 p:0090 s:0216 e:000215 METHOD /app/vendor/bundle/ruby/2.6.0/gems/http-4.2.0/lib/http/response/body.rb:51
```

I recently upgraded my `http` gem version recently, and the upgrade broke lots of [webmock tests](https://github.com/bblimke/webmock) recording our outgoing http calls, simply because the `User-Agent` header of my `http` gem had changed from `http.rb/4.1.1` to `http.rb/4.2.0`

Needing to manually update web mocks between HTTP gem updates is cumbersome, and what would be nice is if the `http` gem had a class level method like `HTTP.user_agent` to get the default `User-Agent` headers the `http` gem uses, so that web mocks could be written to future-proof them from `http` gem version updates.

E.g. in my tests I have webmock testing code like this:

```ruby
  def stub_confirmations_api(response_code)
    stub_request(:post, "#{my_url}/confirmations").
      with(
        headers: {
          "Auth-Id": ENV.fetch("AUTH_ID"),
          "Auth-Token": ENV.fetch("AUTH_TOKEN"),
          "Connection": 'close',
          "Host": 'localhost',
          "User-Agent": 'http.rb/4.1.1'
        }
      ).to_return(status: response_code, body: nil, headers: {})
  end
```

When I updated my `http` gem's version, `"User-Agent": 'http.rb/4.1.1'` needed to be manually updated to `"User-Agent": 'http.rb/4.2.0'`:

```ruby
  def stub_confirmations_api(response_code)
    stub_request(:post, "#{my_url}/confirmations").
      with(
        headers: {
          "Auth-Id": ENV.fetch("AUTH_ID"),
          "Auth-Token": ENV.fetch("AUTH_TOKEN"),
          "Connection": 'close',
          "Host": 'localhost',
          "User-Agent": 'http.rb/4.2.0'
        }
      ).to_return(status: response_code, body: nil, headers: {})
  end
```

The way these webmock tests fail is not easy to debug, and this maintenance burden could be avoided if for `User-Agent` I could just invoke a `User-Agent` method from the `http` gem to get its _default user-agent_ (e.g. `HTTP.user_agent`) every time.  E.g.:

```ruby
  def stub_confirmations_api(response_code)
    stub_request(:post, "#{my_url}/confirmations").
      with(
        headers: {
          "Auth-Id": ENV.fetch("AUTH_ID"),
          "Auth-Token": ENV.fetch("AUTH_TOKEN"),
          "Connection": 'close',
          "Host": 'localhost',
          "User-Agent": HTTP.user_agent
        }
      ).to_return(status: response_code, body: nil, headers: {})
  end
```

so that upgrading this gem never breaks webmocks for no other reason than the fact that the gem's version was updated.
Basically I want to stream HTTP body to a file.

I tried to do this but sadly it doesn't work

```ruby
File::open('file.dat','w') do |file|
    body = HTTP.get(uri).body
    IO.copy_stream(body, file)
end
```

```
/usr/lib/ruby/gems/2.6.0/gems/http-4.1.1/lib/http/response/body.rb:30:in `readpartial'
/usr/lib/ruby/gems/2.6.0/gems/http-4.1.1/lib/http/connection.rb:86:in `readpartial': wrong number of arguments (given 2, expected 0..1) (ArgumentError)
```

It happens because `HTTP::Connection.readpartial` doesn't accept 2nd argument of buffer which is expected by `IO.copy_stream`

In some rare cases the method `def content_length` raises `TypeError` instead of `nil` or `Fixnum`. For example, you can check the following scenario:

## Reproduction code

```ruby
url = "https://imagery.pragprog.com/products/595/tpp20.jpg"
response = HTTP.get(url)
response.content_length 
```

## Expected behavior
Expected `nil` or `Fixnum` instead I get

`TypeError: can't convert Array into Integer`

The `response` object is:

```
 #<HTTP::Response/1.1 200 OK {"Accept-Ranges"=>["bytes", "bytes"], "Age"=>"4590838", "Cache-Control"=>"public max-age=315360000", "Content-Length"=>["2802494", "2802494"], "Date"=>"Fri, 20 Sep 2019 14:33:37 GMT", "Etag"=>"\"8121dc48ec937ecf919bc2c54aa961a4\"", "Expires"=>"Thu, 31 Dec 2037 23:55:55 GMT", "Last-Modified"=>"Mon, 06 May 2019 20:19:24 GMT", "Server"=>"imagery3", "Via"=>"1.1 varnish", "X-Varnish"=>"312290075 306038822", "X-Amz-Id-2"=>"H6BrRPBmJ2AKray6L+xApTdXlP511cVEXJ6DnDMEYVPcmaWJCGpzs3DTNiRez2x+SuLsQxZcUfI=", "X-Amz-Request-Id"=>"7ED8CC65AA4FCF29", "Connection"=>"Close"}>
```
The value of `Content-Length` is `"Content-Length"=>["2802494", "2802494"]` which is suspicious.
```
HTTP.get(nil)
HTTP::Request::UnsupportedSchemeError (unknown scheme: )

HTTP.get('')
HTTP::Request::UnsupportedSchemeError (unknown scheme: )

HTTP.get('/')
HTTP::Request::UnsupportedSchemeError (unknown scheme: )

HTTP.get(':')
Addressable::URI::InvalidURIError (Cannot assemble URI string with ambiguous path: ':')
```

Ideally it should return InvalidURI exceptions if the URL is invalid instead of UnsupportedSchemeError, as it is less confusing. Ideally also, it should return the same exception for all these cases