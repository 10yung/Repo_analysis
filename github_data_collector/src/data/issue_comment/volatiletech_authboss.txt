I've created a module to integrate authboss and hydra. This allows an authboss backed api to provide login/consent flow for the hydra oauth2 flow. The module adds `/login`,`/consent`, and `/logout` api calls. I'm not that familiar with authboss yet, and wondering if you had any initial feedback. The test folder is currently a mess and not really testing anything properly. Currently planning to address that and improve documentation next.  

I had a couple of initial questions: 
- whats the difference between using the authboss redirector and `http.redirect()`? 
- all of the `POST /login` code, and half the `POST /logout`  are copied from those respective modules, I was wondering if you had any thoughts on re-using that code or not. I've thought about importing the modules directly and attempting to just wrap the function calls required without calling the `Init()` function but wondered what your thoughts were. 
- also any preferences or guidelines for events and errors? 
I think one additional confirm workflow that I _think_ is missing is requiring email/sms confirmation before a user updates their email/sms. 

Example flow for user: 
* registered and confirmed user requests to change email 
* email verification sent to new email 
* user verifies email, and authboss updates related

I would like to create a module(`confirm-email-update`, `confirm-sms-update`) that addresses the above. Current plan is to start with a fork of the confirm module, but I wanted to check with you to see if there was anything I should know or advise you had? 
Hello!

I released example project based on authboss. After login I got panic:
```
2019-10-07T12:17:01.026Z	INFO	middleware/zap_logger.go:28	GET /auth/login	{"ip": "172.18.0.1", "ua": "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/77.0.3865.90 Safari/537.36", "proto": "HTTP/1.1", "path": "/auth/login", "lat": "1.112036ms", "status": 200, "size": 456}
camforchat-signal_1     | 2019-10-07T12:17:09Z [INFO]: user isqad88@gmail.com is confirmed, allowing auth
camforchat-signal_1     | 2019-10-07T12:17:09Z [INFO]: user isqad88@gmail.com logged in
camforchat-signal_1     | Panic: ResponseWriter must be a ClientStateResponseWriter or UnderlyingResponseWriter in (see: authboss.LoadClientStateMiddleware): *middleware.basicWriter
camforchat-signal_1     | goroutine 38 [running]:
camforchat-signal_1     | runtime/debug.Stack(0x9c, 0x0, 0x0)
camforchat-signal_1     | 	/usr/local/go/src/runtime/debug/stack.go:24 +0x9d
camforchat-signal_1     | runtime/debug.PrintStack()
camforchat-signal_1     | 	/usr/local/go/src/runtime/debug/stack.go:16 +0x22
camforchat-signal_1     | github.com/go-chi/chi/middleware.Recoverer.func1.1(0xc000261b00, 0x7f30b1a4d168, 0xc000121440)
camforchat-signal_1     | 	/go/pkg/mod/github.com/go-chi/chi@v4.0.2+incompatible/middleware/recoverer.go:28 +0x1b7
camforchat-signal_1     | panic(0x8a9d00, 0xc00013b370)
camforchat-signal_1     | 	/usr/local/go/src/runtime/panic.go:522 +0x1b5
camforchat-signal_1     | github.com/volatiletech/authboss.MustClientStateResponseWriter(0x7f30b1a4d168, 0xc000121440, 0xc0000fe840)
camforchat-signal_1     | 	/go/pkg/mod/github.com/volatiletech/authboss@v2.3.0+incompatible/client_state.go:188 +0x12e
camforchat-signal_1     | github.com/volatiletech/authboss.setState(0x7f30b1a4d168, 0xc000121440, 0x96a6d3, 0x7, 0x0, 0x967021, 0x3, 0xc00010a9a0, 0x11)
camforchat-signal_1     | 	/go/pkg/mod/github.com/volatiletech/authboss@v2.3.0+incompatible/client_state.go:344 +0x3f
camforchat-signal_1     | github.com/volatiletech/authboss.putState(...)
camforchat-signal_1     | 	/go/pkg/mod/github.com/volatiletech/authboss@v2.3.0+incompatible/client_state.go:332
camforchat-signal_1     | github.com/volatiletech/authboss.PutSession(...)
camforchat-signal_1     | 	/go/pkg/mod/github.com/volatiletech/authboss@v2.3.0+incompatible/client_state.go:303
camforchat-signal_1     | github.com/volatiletech/authboss/auth.(*Auth).LoginPost(0xc00000e680, 0x7f30b1a4d168, 0xc000121440, 0xc000261d00, 0x0, 0xc00028b1d8)
camforchat-signal_1     | 	/go/pkg/mod/github.com/volatiletech/authboss@v2.3.0+incompatible/auth/auth.go:111 +0x76c
camforchat-signal_1     | github.com/volatiletech/authboss/defaults.errorHandler.ServeHTTP(0xc00013a710, 0xa1ef00, 0xc0000fe7d0, 0x7f30b1a4d168, 0xc000121440, 0xc000261d00)
camforchat-signal_1     | 	/go/pkg/mod/github.com/volatiletech/authboss@v2.3.0+incompatible/defaults/error_handler.go:39 +0x62
camforchat-signal_1     | net/http.(*ServeMux).ServeHTTP(0xc0000f8940, 0x7f30b1a4d168, 0xc000121440, 0xc000261d00)
camforchat-signal_1     | 	/usr/local/go/src/net/http/server.go:2375 +0x1d6
camforchat-signal_1     | github.com/volatiletech/authboss/defaults.(*Router).ServeHTTP(0xc0001049e0, 0x7f30b1a4d168, 0xc000121440, 0xc000261d00)
camforchat-signal_1     | 	/go/pkg/mod/github.com/volatiletech/authboss@v2.3.0+incompatible/defaults/router.go:64 +0x77
camforchat-signal_1     | net/http.StripPrefix.func1(0x7f30b1a4d168, 0xc000121440, 0xc000261c00)
camforchat-signal_1     | 	/usr/local/go/src/net/http/server.go:2034 +0x18d
camforchat-signal_1     | net/http.HandlerFunc.ServeHTTP(0xc0001fb860, 0x7f30b1a4d168, 0xc000121440, 0xc000261c00)
camforchat-signal_1     | 	/usr/local/go/src/net/http/server.go:1995 +0x44
camforchat-signal_1     | github.com/go-chi/chi.(*Mux).Mount.func1(0x7f30b1a4d168, 0xc000121440, 0xc000261c00)
camforchat-signal_1     | 	/go/pkg/mod/github.com/go-chi/chi@v4.0.2+incompatible/mux.go:292 +0x127
camforchat-signal_1     | net/http.HandlerFunc.ServeHTTP(0xc00000d800, 0x7f30b1a4d168, 0xc000121440, 0xc000261c00)
camforchat-signal_1     | 	/usr/local/go/src/net/http/server.go:1995 +0x44
camforchat-signal_1     | github.com/volatiletech/authboss.ModuleListMiddleware.func1.1(0x7f30b1a4d168, 0xc000121440, 0xc000261b00)
camforchat-signal_1     | 	/go/pkg/mod/github.com/volatiletech/authboss@v2.3.0+incompatible/module.go:123 +0x400
camforchat-signal_1     | net/http.HandlerFunc.ServeHTTP(0xc00000d8c0, 0x7f30b1a4d168, 0xc000121440, 0xc000261b00)
camforchat-signal_1     | 	/usr/local/go/src/net/http/server.go:1995 +0x44
camforchat-signal_1     | github.com/go-chi/chi.(*ChainHandler).ServeHTTP(0xc0001e5280, 0x7f30b1a4d168, 0xc000121440, 0xc000261b00)
camforchat-signal_1     | 	/go/pkg/mod/github.com/go-chi/chi@v4.0.2+incompatible/chain.go:31 +0x52
camforchat-signal_1     | github.com/go-chi/chi.(*Mux).routeHTTP(0xc000061800, 0x7f30b1a4d168, 0xc000121440, 0xc000261b00)
camforchat-signal_1     | 	/go/pkg/mod/github.com/go-chi/chi@v4.0.2+incompatible/mux.go:425 +0x27f
camforchat-signal_1     | net/http.HandlerFunc.ServeHTTP(0xc00013a850, 0x7f30b1a4d168, 0xc000121440, 0xc000261b00)
camforchat-signal_1     | 	/usr/local/go/src/net/http/server.go:1995 +0x44
camforchat-signal_1     | github.com/go-chi/chi/middleware.Recoverer.func1(0x7f30b1a4d168, 0xc000121440, 0xc000261b00)
camforchat-signal_1     | 	/go/pkg/mod/github.com/go-chi/chi@v4.0.2+incompatible/middleware/recoverer.go:35 +0x9f
camforchat-signal_1     | net/http.HandlerFunc.ServeHTTP(0xc00000d700, 0x7f30b1a4d168, 0xc000121440, 0xc000261b00)
camforchat-signal_1     | 	/usr/local/go/src/net/http/server.go:1995 +0x44
camforchat-signal_1     | gitlab.com/camforchat/server/middleware.CurrentUserDataInject.func1.1(0xa225c0, 0xc0002703f0, 0xc000261b00)
camforchat-signal_1     | 	/app/middleware/current_user_data_inject.go:19 +0x309
camforchat-signal_1     | net/http.HandlerFunc.ServeHTTP(0xc00000d720, 0xa225c0, 0xc0002703f0, 0xc000261800)
camforchat-signal_1     | 	/usr/local/go/src/net/http/server.go:1995 +0x44
camforchat-signal_1     | github.com/volatiletech/authboss.(*Authboss).LoadClientStateMiddleware.func1(0x7f30b1869188, 0xc000121100, 0xc000261600)
camforchat-signal_1     | 	/go/pkg/mod/github.com/volatiletech/authboss@v2.3.0+incompatible/client_state.go:135 +0x1fa
camforchat-signal_1     | net/http.HandlerFunc.ServeHTTP(0xc00000d740, 0x7f30b1869188, 0xc000121100, 0xc000261600)
camforchat-signal_1     | 	/usr/local/go/src/net/http/server.go:1995 +0x44
camforchat-signal_1     | gitlab.com/camforchat/server/middleware.Db.func1.1(0x7f30b1869188, 0xc000121080, 0xc000261500)
camforchat-signal_1     | 	/app/middleware/db.go:30 +0x2fb
camforchat-signal_1     | net/http.HandlerFunc.ServeHTTP(0xc00000d760, 0x7f30b1869188, 0xc000121080, 0xc000261500)
camforchat-signal_1     | 	/usr/local/go/src/net/http/server.go:1995 +0x44
camforchat-signal_1     | gitlab.com/camforchat/server/middleware.ZapLogger.func1.1(0xa22900, 0xc0002721c0, 0xc000261500)
camforchat-signal_1     | 	/app/middleware/zap_logger.go:40 +0x3ab
camforchat-signal_1     | net/http.HandlerFunc.ServeHTTP(0xc00000d780, 0xa22900, 0xc0002721c0, 0xc000261400)
camforchat-signal_1     | 	/usr/local/go/src/net/http/server.go:1995 +0x44
camforchat-signal_1     | github.com/go-chi/chi/middleware.RealIP.func1(0xa22900, 0xc0002721c0, 0xc000261400)
camforchat-signal_1     | 	/go/pkg/mod/github.com/go-chi/chi@v4.0.2+incompatible/middleware/realip.go:34 +0x99
camforchat-signal_1     | net/http.HandlerFunc.ServeHTTP(0xc00000d7a0, 0xa22900, 0xc0002721c0, 0xc000261400)
camforchat-signal_1     | 	/usr/local/go/src/net/http/server.go:1995 +0x44
camforchat-signal_1     | github.com/go-chi/chi.(*Mux).ServeHTTP(0xc000061800, 0xa22900, 0xc0002721c0, 0xc000261300)
camforchat-signal_1     | 	/go/pkg/mod/github.com/go-chi/chi@v4.0.2+incompatible/mux.go:82 +0x294
camforchat-signal_1     | github.com/go-chi/chi.ServerBaseContext.func1(0xa22900, 0xc0002721c0, 0xc000261200)
camforchat-signal_1     | 	/go/pkg/mod/github.com/go-chi/chi@v4.0.2+incompatible/context.go:147 +0x257
camforchat-signal_1     | net/http.HandlerFunc.ServeHTTP(0xc0001fb980, 0xa22900, 0xc0002721c0, 0xc000261200)
camforchat-signal_1     | 	/usr/local/go/src/net/http/server.go:1995 +0x44
camforchat-signal_1     | net/http.serverHandler.ServeHTTP(0xc0001172b0, 0xa22900, 0xc0002721c0, 0xc000261200)
camforchat-signal_1     | 	/usr/local/go/src/net/http/server.go:2774 +0xa8
camforchat-signal_1     | net/http.(*conn).serve(0xc0002921e0, 0xa23680, 0xc000120ec0)
camforchat-signal_1     | 	/usr/local/go/src/net/http/server.go:1878 +0x851
camforchat-signal_1     | created by net/http.(*Server).Serve
camforchat-signal_1     | 	/usr/local/go/src/net/http/server.go:2884 +0x2f4
camforchat-signal_1     | 2019-10-07T12:17:09.830Z	INFO	middleware/zap_logger.go:28	POST /auth/login	{"ip": "172.18.0.1", "ua": "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/77.0.3865.90 Safari/537.36", "proto": "HTTP/1.1", "path": "/auth/login", "lat": "80.964928ms", "status": 500, "size": 22}
```

Here is cite from my code:
```
r := chi.NewRouter()                                                                                                   
    r.Use(                                                                                                                 
        middleware.RealIP,                                                                                                 
        appMiddleware.ZapLogger(logger),                                                                                   
        appMiddleware.Db(dbConn),                                                                                          
        ab.LoadClientStateMiddleware,                                                                                      
        appMiddleware.CurrentUserDataInject(ab),                                                                           
        middleware.Recoverer,                                                                                              
    )                                                                                                                      
    r.Group(func(r chi.Router) {                                                                                           
        r.Use(authboss.Middleware2(ab, authboss.RequireNone, authboss.RespondUnauthorized), confirm.Middleware(ab))        
        r.Post("/sdp", func(w http.ResponseWriter, r *http.Request) {                                                      
        })                                                                                                                 
    })                                                                                                                     
                                                                                                                           
    r.Group(func(r chi.Router) {                                                                                           
        r.Use(authboss.ModuleListMiddleware(ab))                                                                           
        r.Mount("/auth", http.StripPrefix("/auth", ab.Config.Core.Router))                                                 
    })                                                                                                                     
                                                                                                                           
    r.Get("/", impl.HomePage)
```

As you see, I used chi for router and I put `ab.LoadClientStateMiddleware` into middleware stack as required.
But I got  panic.



First off - thanks for building and supporting this package!

I struggled a bit to implement a reasonable email confirmation flow. I documented my eventual solution [in the wiki](https://github.com/volatiletech/authboss/wiki/Custom-confirm-logic)

What I'd like to happen is this:
* User signs up
* User sees a page that says `we've sent a confirmation email to foo@bar.com`
* User can still access _some_ parts of the site before confirmation, but others are blocked off

Ideally, I'd be able to implement this flow just by not using `confirm.Middleware`, and creating my own middleware. But AB registers its confirm checks in the `confirm.Init` method, making it impossible to override.

Two things that would need to change:
* AB should still start a session upon registration even if `confirm` is enabled
* AB should only check `user.GetConfirmed() == true` in the middleware (which it does now) and not as part of a `Before(authboss.EventAuth)` check
_Issue opened for the creation of a wiki page that summarizes the doubts and problems for newbies (https://github.com/volatiletech/authboss/issues/210)._

---

### **I know**
this question has already been asked so many times, but after hours of searching I still don't have a clear answer to my problem.

Even projects like https://github.com/pillarjs/understanding-csrf have been abandoned and have not answered to new questions and doubts over the years like [this](https://github.com/pillarjs/understanding-csrf/issues/6).

### **PROBLEM**

Let's say I have:

- a back-end on `back.domain.com` and
- a front-end on `front.domain.com`.

My back-end is a simply app with these rest endpoints:

1. `POST /login`:

    1. accepts JSON body like: `{"username": "myname", "password": "mypass"}`
    1. verify credentials
    1. if **OK** gives 200 and create a cookie with session
    1. if **NOT** gives 401

1. `GET /players`:

    1. check session in cookie
    1. if **OK** gives 200 with {"players": "[...]"}
    1. if **NOT** gives 401

1. `POST /player/1`:

    1. check session in cookie
    1. if **OK** gives 200 and edit player
    1. if **NOT** gives 401

My front-end app has:

1. `/login` page with a form (with `username` and `password` fields) for issue a `POST` request to `back.domain.com/login`

1. `/players` which request a `GET` request to `back.domain.com/players`

1. a button which issues a `POST` request to `back.domain.com/player/1`

### **QUESTIONS**

1. Do I need CSRF protection in this scenario?

    I think **YES, I need** because an attacker can issue a request to `back.domain.com/player/1` from `malicious.site.com` and use my session cookie to edit player because I'm logged in (and I still have a session cookie) on my `domain.com`.

1. Do I need CSRF protection (e.g. an `X-CSRF-Token` header) when I the first time login on `back.domain.com/login`?

    1. In this scenario I still don't have any session cookie in my browser.
    1. And also I don't know where to get my CSRF token for `X-CSRF-Token` authorization header too.

    I read on https://fractalideas.com/blog/making-react-and-django-play-well-together-single-page-app-model they are creating a dedicated endpoint on back-end for this and [they explain](https://fractalideas.com/blog/making-react-and-django-play-well-together-single-page-app-model/#fn-7) it's not a security vulnerability.

I saw in [`authboss-sample`](https://github.com/volatiletech/authboss-sample/blob/29e50222cef12d221415c4d92338077b23c06d3c/blog.go#L284) you just add the `X-CSRF-TOKEN` header on `OPTIONS` calls.

```go
if *flagAPI {
  // In order to have a "proper" API with csrf protection we allow the options request to return the csrf token that's required to complete the request when using post
  optionsHandler := func(w http.ResponseWriter, r *http.Request) {
    w.Header().Set("X-CSRF-TOKEN", nosurf.Token(r))
    w.WriteHeader(http.StatusOK)
  }

  // We have to add each of the authboss get/post routes specifically because chi sees the 'Mount' above as overriding the '/*' pattern.
  routes := []string{"login", "logout", "recover", "recover/end", "register"}
  mux.MethodFunc("OPTIONS", "/*", optionsHandler)
  for _, r := range routes {
    mux.MethodFunc("OPTIONS", "/auth/"+r, optionsHandler)
  }
}
```

**But why are you using that?**

Are you using that token in javascript after the `OPTIONS` call?

But the very first one call is failing, right?

I'm confused.

What do you think about using the **dataInjector** func to inject csrf token in json response? In fact it is like when we render csrf token in html. Right?

Hi,

There aren't any templates for OTP in authboss-render and OTP doesn't work individually.  
Faced the issue when I am trying to use both modules in an API setting.

Tried returning an error in `Authboss.Storage.Server.Save` under the condition; while it blocks the recovery, the HTTP response is also empty. Wonder if there is a way to signal the caller of the error.
Hello! I am interested in using AuthBoss to handle user login and consent as part of an OAuth2 flow (I am using ORY Hydra). I am wondering:
- Is this something that makes sense to do?
- Is there a built-in way to use AuthBoss as the "Identity Provider" part of OAuth2? I see that there is an OAuth2 module, but it seems like this is for delegating authentication to another provider.
- If it makes sense but there's no built-in way, how can I modify the existing password-based use case to perform the necessary redirects when the user is authenticated and consent is granted?
Discussing with the great developer @valyala in thread https://github.com/valyala/quicktemplate/issues/58 about the amazing `Authboss` he gave us a suggestion to optimize a bit: https://github.com/valyala/quicktemplate/issues/58#issuecomment-517854569

> As for the performance ... superfluous memory allocation when returning the byte slice from `bytes.Buffer`. The memory allocation could be avoided if `Render()` could accept `io.Writer` to write template output to.`

Can we just use `io.Writer` instead of `[]byte` in `Render()` method?
_Issue opened for the creation of a wiki page that summarizes the doubts and problems for newbies (https://github.com/volatiletech/authboss/issues/210)._

---

I have two doubts about the `redir` behaviour of authboss.

**SCENARIO**:

I have two sides:

- backend.mysite.com
- client.mysite.com

Many times I need to disconnect the user so I redirect it from let's say `client.mysite.com/teams/1` to `backend.mysite.com/authboss/logout?redir=/teams/1`.

It doesn't work because `authboss` detects unauthorized account (invalidated from client side) and redirects to `backend.mysite.com/authboss/login?redir=%2F` and I loose my `redir` info.

**DOUBT 1**:

Can we pass `redir` info from `/logout` to `/login`?

**DOUBT 2**:

Even if I use `/login?redir=/teams/1` I read some time ago that it is wrong - from a security point of view - to enter complete URLs in the `redir` info such as: `backend.mysite.com/authboss/login?redir=https://client.mysite.com/teams/1`.

I know authboss automagically adds the `backend.mysite.com/` part after login and before redirect to `redir`.

Is there a way to change this initial part (eg. with `https://client.mysite.com/`)?

Is `Config.Paths.AuthLoginOK` involved here in some way?