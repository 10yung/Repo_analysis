This workaround would download all the required dependencies so they are cached.
When I created a new project via haskell-do, the indicator on the web page kept spinning for several minutes. I finally gave up.

Please add an indication that things can take VERY long initially (ten minutes?), and/or add a better progress indicator. `stack build`, by default, produces progress output -- I assume you hide it on purpose? Not good.


I've been taking a look at the source code of [intero-neovim](https://github.com/parsonsmatt/intero-neovim/tree/master/autoload/intero) and it looks like we can make something like what they do for handling errors.

We can either use `intero` itself, or just parse the output from `stack`.

It is important that #121 has been done first, as it helps with source mapping.
Right now we store the user's project as a Markdown file with some options on top so `inliterate` can render it properly. The thing is that this is not really efficient, because if the user were to use the project as a library on a production system, they would have to drag `inliterate` and all of its dependencies with them. So, we can do something "intelligent" with it:

When the user works within Haskell.do, everything gets stored in a regular (no inliterate) `Lib.hs` Haskell file, replacing Haskell.do blocks like this:

*Everything that is text (except code) gets stored as a multiline comment, for example:*

```text
I'm text

` ` ` haskell top
im :: Code
im = undefined
` ` `

I'm text too,
but
multiline
```

Would get stored as:

```haskell
{-I'm text-}

im :: Code
im = undefined

{-I'm text too
but
multiline-}
```

Same with `haskell eval` and `haskell do` blocks. These are for exploration, and in the end they are just _comments on steroids_ that we use to explain things, the only difference that they would be stored like:

```haskell
{- haskell eval
2 + 2 -}

{- haskell do
x <- readFile "foo" -}
```

The placement of the braces is important, because it allows us to have the same line numbers

See where this is going? Now, the user can safely remove the `inliterate` dependency from their project without having to worry about that (unless they are using it in their library functions of course).

So, how do we render everything? Easy, when we compile the project, we generate a `Main.hs` file with the format that `inliterate` expects. This is great because of two things:

* First, we decouple `inliterate` from the user, which is counter-productive
* Second, we can generate a **source map**, so we can highlight errors

The second point is very important, as right now the output of GHC for errors is quite random for us, because `inliterate` generates the boilerplate required to render everything, so this way we could parse the error strings and highlight the errors on the document.
This would make a much faster compilation, making preview nearly instant:

Instead of running `stack build` each time, which includes compilation **and linking**, we could just run a

```text
> :r
> main
```

In a repl and get the output
GHCJS 7.10.x has support for `ghci`, which means that it would not be needed to recompile all the project each time we want to reload something for the UI
This would improve 2 things:

1. No more need to build GHCJS first time
2. Automatic installation of NodeJS/required libraries.
