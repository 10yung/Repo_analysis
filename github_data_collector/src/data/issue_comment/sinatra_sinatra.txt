Should `session[:session_id]` be `.public_id` because of https://github.com/rack/rack/issues/1432 perhaps?
https://github.com/sinatra/sinatra/commit/26fa5
https://github.com/sinatra/sinatra/commit/26fa5c86220890a02cc0f070ddb2696d74a5b843c86220890a02cc0f070ddb2696d74a5b843
Testing with Ruby 2.7.0-rc2 (which is the currently latest available with RVM), I am getting some warnings when `sinatra/reloader` is required.

### Code to reproduce

```ruby
# test.rb
require 'sinatra'
require "sinatra/reloader"

set :bind, "0.0.0.0"
set :port, 3000

get '/' do
  'Hello world!'
end
```


### Output

```
$ ruby test.rb
/store/gems/ruby-2.7.0-rc2/gems/sinatra-contrib-2.0.8.1/lib/sinatra/reloader.rb:
308: warning: The last argument is used as keyword parameters; maybe ** should b
e added to the call
/store/gems/ruby-2.7.0-rc2/gems/sinatra-2.0.8.1/lib/sinatra/base.rb:1360: warnin
g: The called method `add_filter' is defined here
/store/gems/ruby-2.7.0-rc2/gems/sinatra-contrib-2.0.8.1/lib/sinatra/reloader.rb:275: warning: The last argument is used as keyword parameters; maybe ** should be added to the call
/store/gems/ruby-2.7.0-rc2/gems/sinatra-2.0.8.1/lib/sinatra/base.rb:1622: warning: The called method `compile!' is defined here
== Sinatra (v2.0.8.1) has taken the stage on 3000 for development with backup from Puma
Puma starting in single mode...
...
```

### Versions

```
$ gem list sinatra
sinatra (2.0.8.1)
sinatra-contrib (2.0.8.1)

$ ruby -v
ruby 2.7.0rc2 (2019-12-22 master 75acbd5f00) [x86_64-linux]
```

### Offending code

https://github.com/sinatra/sinatra/blob/a4dd24add24f2dd0e7299b9e68e12038138294d3/sinatra-contrib/lib/sinatra/reloader.rb#L272

and

https://github.com/sinatra/sinatra/blob/a4dd24add24f2dd0e7299b9e68e12038138294d3/sinatra-contrib/lib/sinatra/reloader.rb#L305

I can confirm that changing both `options = {}` to `**options` removes the warnings.
I wanted to submit a PR, but running tests (even before the change) triggers tons of warnings and errors.



These were missed in https://github.com/sinatra/sinatra/pull/1581.

Hi folks,

We have a simple route `/ping and we'd like to prevent logging access to it.

What is the recommended way to do that?

Thank you in advance
Whenever I try to install the sinatra gem, the first install hangs during:

"Installing ri documentation for sinatra-2.0.7"

I manually interrupt it, then do it again, and then it works.

I have no idea what causes it, but all the other gems and their ri
documentation do not have this issue.

I believe that there must be something special for sinatra documentation
done that causes this behaviour since I do not see it at any other gem.

It may be difficult to find out, but I am just reporting here to let you guys
know anyway.
closes: #1369

IMHO it's good to give a nice convention over configuration feeling when running sinatra in development on the local machine or within docker without sacrificing security best practices in regard to exposing development applications to the local network. 

I intentionally didn't change the default hint for the OptionParser, as i consider this a convenience feature for development (one thing less to get wrong), where the best practice should be to declare it.
This is raising an exception on a production application I am running. This should be fine since `nil` is an acceptable return type of the method.
- [x] "Asciidoc templates" in TOC
- [x] "Asciidoc templates" 
- [x] "Mediawiki templates" in TOC
- [x] "Mediawiki templates" 
- [x] "Using custom logic for template lookup" in TOC
- [x] "Using custom logic for template lookup" 
- [x] "Available settings"
- [x] "Errors"
- A few typos and wrong spelling here and there
We're planning to change a lot of things in v3.0.0, probably we'll break some backward-compatibility at the same time.
We should cut some release candidates for the version, of course, but I guess it's not enough.

In order to reduce the number of people who suffer from large changes in v3.0.0, I believe that it's very effective to heads-up in advance to the major dependents.