If an unexpected exception is thrown from a catch2 test case, catch2 will catch exception and print out the contents of `what()` for the failing test case.

This is often fairly useless (for me at least) since it's hard to debug without any information on where the exception was actually thrown (ie. a call stack).

By default (at least on Linux) if exceptions are not caught, `abort()` will be called providing a useful coredump as well as breaking the program at the point the exception was thrown if running in a debugger.

I'm not very experienced with Windows development, but as far as I remember, Windows can do something similar giving the developer an option to debug the program if an exception is not caught if Visual Studio is installed.

There seems to be some options to disable exception handling at compile time, but it would be very useful to have a command line option to disable the catch exception handler at runtime. This could be used for instance, to allow exceptions to be caught without much information when running in a CI environment, while giving the developer an easy option to look into the details when reproducing the issue.

I will be happy to help implement this if it makes any sense.

Thanks a lot.
**Describe the bug**
Using a thread sanitizer setup with clang, our CI seems to hit an assertion; probably in a background thread. After that, our log is flooded with sanitizer violations that seem to be related to Catch, starting like this:
```
terminate called without an active exception
==================
WARNING: ThreadSanitizer: signal-unsafe call inside of a signal (pid=46206)
    #0 operator new(unsigned long) /tmp/llvm-project/compiler-rt/lib/tsan/rtl/tsan_new_delete.cc:64 (sync-test+0x531217)
    #1 __gnu_cxx::new_allocator<char>::allocate(unsigned long, void const*) /opt/rh/devtoolset-7/root/usr/lib/gcc/x86_64-redhat-linux/7/../../../../include/c++/7/ext/new_allocator.h:111:27 (sync-test+0x53c998)
    #2 std::string::_Rep::_S_create(unsigned long, unsigned long, std::allocator<char> const&) /opt/rh/devtoolset-7/root/usr/lib/gcc/x86_64-redhat-linux/7/../../../../include/c++/7/bits/basic_string.tcc:1057:49 (sync-test+0x53c70b)
    #3 char* std::string::_S_construct<char const*>(char const*, char const*, std::allocator<char> const&, std::forward_iterator_tag) /opt/rh/devtoolset-7/root/usr/lib/gcc/x86_64-redhat-linux/7/../../../../include/c++/7/bits/basic_string.tcc:578:14 (sync-test+0x5410b4)
    #4 char* std::string::_S_construct_aux<char const*>(char const*, char const*, std::allocator<char> const&, std::__false_type) /opt/rh/devtoolset-7/root/usr/lib/gcc/x86_64-redhat-linux/7/../../../../include/c++/7/bits/basic_string.h:5033:18 (sync-test+0x540f58)
    #5 char* std::string::_S_construct<char const*>(char const*, char const*, std::allocator<char> const&) /opt/rh/devtoolset-7/root/usr/lib/gcc/x86_64-redhat-linux/7/../../../../include/c++/7/bits/basic_string.h:5054:11 (sync-test+0x540ed8)
    #6 std::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(char const*, unsigned long, std::allocator<char> const&) /opt/rh/devtoolset-7/root/usr/lib/gcc/x86_64-redhat-linux/7/../../../../include/c++/7/bits/basic_string.tcc:657:19 (sync-test+0x5ca878)
    #7 Catch::StringRef::operator std::string() const /home/jenkins/agent/workspace/ObjectBox-Sanitizers_sync_2/cbuild/Debug-tsan/objectbox/src/main/cpp/sync/test/../../../../../../../../external/catch/catch.hpp:610:20 (sync-test+0x5a90aa)
    #8 Catch::RunContext::handleFatalErrorCondition(Catch::StringRef) /home/jenkins/agent/workspace/ObjectBox-Sanitizers_sync_2/cbuild/Debug-tsan/objectbox/src/main/cpp/sync/test/../../../../../../../../external/catch/catch.hpp:12693:55 (sync-test+0x55f2a5)
    #9 (anonymous namespace)::reportFatal(char const*) /home/jenkins/agent/workspace/ObjectBox-Sanitizers_sync_2/cbuild/Debug-tsan/objectbox/src/main/cpp/sync/test/../../../../../../../../external/catch/catch.hpp:10644:56 (sync-test+0x5505dd)
    #10 Catch::FatalConditionHandler::handleSignal(int) /home/jenkins/agent/workspace/ObjectBox-Sanitizers_sync_2/cbuild/Debug-tsan/objectbox/src/main/cpp/sync/test/../../../../../../../../external/catch/catch.hpp:10738:9 (sync-test+0x550443)
    #11 __tsan::CallUserSignalHandler(__tsan::ThreadState*, bool, bool, bool, int, __sanitizer::__sanitizer_siginfo*, void*) /tmp/llvm-project/compiler-rt/lib/tsan/rtl/tsan_interceptors.cc:1914 (sync-test+0x487bd3)
    #12 __gnu_cxx::__verbose_terminate_handler() <null> (libstdc++.so.6+0x607d4)
    #13 [application code stack follows...]
```
Another example:
```
WARNING: ThreadSanitizer: signal-unsafe call inside of a signal (pid=46206)
    #0 operator delete(void*) /tmp/llvm-project/compiler-rt/lib/tsan/rtl/tsan_new_delete.cc:126 (sync-test+0x531ae9)
    #1 __gnu_cxx::new_allocator<std::string>::deallocate(std::string*, unsigned long) /opt/rh/devtoolset-7/root/usr/lib/gcc/x86_64-redhat-linux/7/../../../../include/c++/7/ext/new_allocator.h:125:2 (sync-test+0x5ccde3)
    #2 std::allocator_traits<std::allocator<std::string> >::deallocate(std::allocator<std::string>&, std::string*, unsigned long) /opt/rh/devtoolset-7/root/usr/lib/gcc/x86_64-redhat-linux/7/../../../../include/c++/7/bits/alloc_traits.h:462:13 (sync-test+0x5ccd93)
    #3 std::__cxx1998::_Vector_base<std::string, std::allocator<std::string> >::_M_deallocate(std::string*, unsigned long) /opt/rh/devtoolset-7/root/usr/lib/gcc/x86_64-redhat-linux/7/../../../../include/c++/7/bits/stl_vector.h:180:4 (sync-test+0x612b0b)
    #4 void std::__cxx1998::vector<std::string, std::allocator<std::string> >::_M_realloc_insert<std::string const&>(__gnu_cxx::__normal_iterator<std::string*, std::__cxx1998::vector<std::string, std::allocator<std::string> > >, std::string const&) /opt/rh/devtoolset-7/root/usr/lib/gcc/x86_64-redhat-linux/7/../../../../include/c++/7/bits/vector.tcc:448:7 (sync-test+0x63d638)
    #5 std::__cxx1998::vector<std::string, std::allocator<std::string> >::push_back(std::string const&) /opt/rh/devtoolset-7/root/usr/lib/gcc/x86_64-redhat-linux/7/../../../../include/c++/7/bits/stl_vector.h:948:4 (sync-test+0x63d19e)
    #6 std::__debug::vector<std::string, std::allocator<std::string> >::push_back(std::string const&) /opt/rh/devtoolset-7/root/usr/lib/gcc/x86_64-redhat-linux/7/../../../../include/c++/7/debug/vector:467:9 (sync-test+0x5b9dbe)
    #7 Catch::XmlWriter::startElement(std::string const&, Catch::XmlFormatting) /home/jenkins/agent/workspace/ObjectBox-Sanitizers_sync_2/cbuild/Debug-tsan/objectbox/src/main/cpp/sync/test/../../../../../../../../external/catch/catch.hpp:15326:16 (sync-test+0x5709e7)
    #8 Catch::XmlWriter::scopedElement(std::string const&, Catch::XmlFormatting) /home/jenkins/agent/workspace/ObjectBox-Sanitizers_sync_2/cbuild/Debug-tsan/objectbox/src/main/cpp/sync/test/../../../../../../../../external/catch/catch.hpp:15334:9 (sync-test+0x570c3e)
    #9 Catch::JunitReporter::writeGroup(Catch::CumulativeReporterBase<Catch::JunitReporter>::Node<Catch::TestGroupStats, Catch::CumulativeReporterBase<Catch::JunitReporter>::Node<Catch::TestCaseStats, Catch::CumulativeReporterBase<Catch::JunitReporter>::SectionNode> > const&, double) /home/jenkins/agent/workspace/ObjectBox-Sanitizers_sync_2/cbuild/Debug-tsan/objectbox/src/main/cpp/sync/test/../../../../../../../../external/catch/catch.hpp:16558:42 (sync-test+0x57a2a7)
    #10 Catch::JunitReporter::testGroupEnded(Catch::TestGroupStats const&) /home/jenkins/agent/workspace/ObjectBox-Sanitizers_sync_2/cbuild/Debug-tsan/objectbox/src/main/cpp/sync/test/../../../../../../../../external/catch/catch.hpp:16550:9 (sync-test+0x57a1a6)
    #11 Catch::RunContext::testGroupEnded(std::string const&, Catch::Totals const&, unsigned long, unsigned long) /home/jenkins/agent/workspace/ObjectBox-Sanitizers_sync_2/cbuild/Debug-tsan/objectbox/src/main/cpp/sync/test/../../../../../../../../external/catch/catch.hpp:12505:21 (sync-test+0x55c1b4)
    #12 Catch::RunContext::handleFatalErrorCondition(Catch::StringRef) /home/jenkins/agent/workspace/ObjectBox-Sanitizers_sync_2/cbuild/Debug-tsan/objectbox/src/main/cpp/sync/test/../../../../../../../../external/catch/catch.hpp:12720:9 (sync-test+0x55f5b4)
    #13 (anonymous namespace)::reportFatal(char const*) /home/jenkins/agent/workspace/ObjectBox-Sanitizers_sync_2/cbuild/Debug-tsan/objectbox/src/main/cpp/sync/test/../../../../../../../../external/catch/catch.hpp:10644:56 (sync-test+0x5505dd)
    #14 Catch::FatalConditionHandler::handleSignal(int) /home/jenkins/agent/workspace/ObjectBox-Sanitizers_sync_2/cbuild/Debug-tsan/objectbox/src/main/cpp/sync/test/../../../../../../../../external/catch/catch.hpp:10738:9 (sync-test+0x550443)
    #15 __tsan::CallUserSignalHandler(__tsan::ThreadState*, bool, bool, bool, int, __sanitizer::__sanitizer_siginfo*, void*) /tmp/llvm-project/compiler-rt/lib/tsan/rtl/tsan_interceptors.cc:1914 (sync-test+0x487bd3)
    #16 __gnu_cxx::__verbose_terminate_handler() <null> (libstdc++.so.6+0x607d4)
   [...]
```
In total, there are 68 warnings like that in the log.

**Expected behavior**
Catch should not trigger tsan warnings

**Reproduction steps**
Currently, around 3 out of 4 builds produce an assertion and thus trigger the "warning flood". No simple repro known.

**Platform information:**
<!-- Fill in any extra information that might be important for your issue. -->
 - OS: **CentOS**
 - Compiler+version: **clang 9.0.0**
 - Catch version: **v2.11.0**


**Additional context**
[async-signal-safe functions](http://man7.org/linux/man-pages/man7/signal-safety.7.html)

Of course we will need to fix triggering the assertion and this is not the issue. **The question is** if Catch is doing things in a signal handler that it should not do, like calling new and delete.
**Describe the bug**
Does the link order of _Catch2_ / _Catch2Main_ matter? Linking `Catch2Main Catch2` works, but using the opposite order results in undefined references:

```
[…]/lib/libCatch2Main.a(catch_main.cpp.o): in function `main':
catch_main.cpp:(.text.startup+0x34): undefined reference to `Catch::Session::Session()'
/usr/bin/ld: catch_main.cpp:(.text.startup+0x46): undefined reference to `Catch::Session::~Session()'
/usr/bin/ld: catch_main.cpp:(.text.startup+0x79): undefined reference to `Catch::Session::applyCommandLine(int, char const* const*)'
/usr/bin/ld: catch_main.cpp:(.text.startup+0x88): undefined reference to `Catch::Session::run()'
```

**Expected behavior**
Either _(a)_ this is intentional or _(b)_ a should be fixed (both are OK to me).

**Reproduction steps**

1. Build _v3.0.0-preview1_ as a static library (eg. using CMake)
1. Compile minimal program (see below) and change order of Catch2 / Catch2Main

```cpp
// minimal program
#define CATCH_CONFIG_MAIN
#include <catch2/catch.hpp>
```

```sh
# Fails (undefined references):
$ g++ 000-CatchMain.cpp -I[…]/include -L[…]/lib -lCatch2 -lCatch2Main

# Ok
$ g++ 000-CatchMain.cpp -I[…]/include -L[…]/lib -lCatch2Main -lCatch2
```

**Platform information:**

 - OS: **Linux**
 - Compiler+version: **GCC v9.2.0**
 - Catch version: **v3.0.0-preview1**


**Additional context**
#1823 

I find the [Custom precision](https://github.com/catchorg/Catch2/blob/master/docs/tostring.md#floating-point-precision) feature very useful. However it does not work with implicit conversions.

```
TEST_CASE("Precision bug")
{
    Catch::StringMaker<double>::precision = 20;

    struct Foo {
        double    val;
        operator double() const { return val; }
    };

    Foo    x = { 2600000. };
    double y = 2600000.0;

    REQUIRE(x == y);
    REQUIRE((double)x == y);
}
```

Output with `./tests -s`

```
/Users/kghose/Code/groho/tests/units_test.cpp:98: PASSED:
  REQUIRE( x == y )
with expansion:
  2.6e+06 == 2600000.0

/Users/kghose/Code/groho/tests/units_test.cpp:99: PASSED:
  REQUIRE( (double)x == y )
with expansion:
  2600000.0 == 2600000.0
```

The expected behavior is for these  implicit conversions to behave the same way as explicit casts. Note that this example behaves identically with or without the precision invocation.

Tested with Compiler: clang version 6.0.0

Thank you!
Thanks very much for all work on Catch2.

Checking this code:

~~~cpp
#include <stdexcept>
#include <string>

#define CATCH_CONFIG_MAIN
#include <catch.hpp>

CATCH_TRANSLATE_EXCEPTION( const ::std::invalid_argument & ) {
	return std::string{ "Some invalid_argument was caught here" };
}
~~~

&hellip;with `clang-tidy -checks=cert-err58-cpp <source> -- -isystem <catch_include_dir> -fmacro-backtrace-limit=0` gives:

~~~no-highlight
23 warnings generated.
<source>:7:1: warning: initialization of 'catch_internal_ExceptionRegistrar1' with static storage duration may throw an exception that cannot be caught [cert-err58-cpp]
CATCH_TRANSLATE_EXCEPTION( const ::std::invalid_argument & ) {
^
<catch_include_dir>/catch.hpp:17396:48: note: expanded from macro 'CATCH_TRANSLATE_EXCEPTION'
#define CATCH_TRANSLATE_EXCEPTION( signature ) INTERNAL_CATCH_TRANSLATE_EXCEPTION( signature )
                                               ^
<catch_include_dir>/catch.hpp:3025:57: note: expanded from macro 'INTERNAL_CATCH_TRANSLATE_EXCEPTION'
#define INTERNAL_CATCH_TRANSLATE_EXCEPTION( signature ) INTERNAL_CATCH_TRANSLATE_EXCEPTION2( INTERNAL_CATCH_UNIQUE_NAME( catch_internal_ExceptionTranslator ), signature )
                                                        ^
<catch_include_dir>/catch.hpp:3021:52: note: expanded from macro 'INTERNAL_CATCH_TRANSLATE_EXCEPTION2'
    namespace{ Catch::ExceptionTranslatorRegistrar INTERNAL_CATCH_UNIQUE_NAME( catch_internal_ExceptionRegistrar )( &translatorName ); } \
                                                   ^
note: (skipping 1 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
<catch_include_dir>/catch.hpp:449:55: note: expanded from macro 'INTERNAL_CATCH_UNIQUE_NAME_LINE'
#define INTERNAL_CATCH_UNIQUE_NAME_LINE( name, line ) INTERNAL_CATCH_UNIQUE_NAME_LINE2( name, line )
                                                      ^
<catch_include_dir>/catch.hpp:448:56: note: expanded from macro 'INTERNAL_CATCH_UNIQUE_NAME_LINE2'
#define INTERNAL_CATCH_UNIQUE_NAME_LINE2( name, line ) name##line
                                                       ^
note: expanded from here
<catch_include_dir>/catch.hpp:3009:9: note: possibly throwing constructor declared here
        ExceptionTranslatorRegistrar( std::string(*translateFunction)( T& ) ) {
        ^
Suppressed 22 warnings (22 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.
~~~

(it seems my `-fmacro-backtrace-limit=0` didn't work :unamused:)

This can be seen on Godbolt : https://godbolt.org/z/38M3i4

The check is documented [here](https://clang.llvm.org/extra/clang-tidy/checks/cert-err58-cpp.html) and it refers to [this CERT rule](https://wiki.sei.cmu.edu/confluence/display/cplusplus/ERR58-CPP.+Handle+all+exceptions+thrown+before+main()+begins+executing)

Perhaps you consider this unavoidable or just not worth the effort to address. But I think it would be good to analyse whether judicious use of `catch` and `noexcept` can avoid this security-based warning.

Thanks again.
**Description**
In the [command line description](https://github.com/catchorg/Catch2/blob/master/docs/command-line.md#specifying-which-tests-to-run) for specifying which tests to run, it is not immediately clear how to OR multiple test case names.

I first assumed that I had to separate them by space (and I'm not the only one #1140). Then by reading that tags can have a comma as OR, I deduced that it might also work for test names.

I think it would be much clearer to explicitly say that test case names can be comma separated as well.

I would like some kind of indication of the progress of the tests when running with -d yes. For example, say I am running 10 tests I would like the first test to show 1/10, the second 2/10 and so on until the final test shows 10/10. Such as:
 
1.112 s: RKI 1/3
1.112 s: test-2fx-audusdjpy-wbRKI-changingWindow-smaller-put 2/3
2.063 s: test-2fx-audusdjpy-wbRKI-changingWindow-smaller-put-0 3/3

When I am running tests during the day I would like some kind of indication of how much longer I have to wait before the tests will finish so that I can decide how to best utilise my time. 

Thank you for your consideration.

**Describe the bug**

`v3.0.0-preview1` release has CMake code which states version number is 2.10.2

```cmake
project(Catch2 LANGUAGES CXX VERSION 2.10.2)
```

in this location: https://github.com/catchorg/Catch2/blob/v3.0.0-preview1/CMakeLists.txt#L28

**Expected behavior**

Version number should match the release.


**Describe the bug**
I just test Fibonacci(30) use my own test. its cost about 2.6ms compare your test only 17ns. 
so I test more input data about:  Fibonacci(36)、Fibonacci(37)、Fibonacci(38)、Fibonacci(39)

benchmark name |  samples   |    iterations |   estimated 
------------ | -------------: | -------------: | -------------:
 | | mean   |       low mean   |   high mean|
 | | std dev   |    low std dev |  high std dev|
Fibonacci 20                    |                 100    |     29507   |  2.9507 ms
 | |                 1 ns    |      1 ns   |       1 ns
 | |                 0 ns    |      0 ns     |     0 ns
Fibonacci 25                     |                100   |      29121  |   2.9121 ms
 | |                  10 ns    |     10 ns   |      10 ns
 | |                   0 ns    |      0 ns    |      0 ns
Fibonacci 30             |                       100    |     28862   |  2.8862 ms
 | |                                                                       101 ns    |    101 ns    |    101 ns
 | |                                                                         0 ns     |     0 ns     |     0 ns
Fibonacci 35                |                   100      |         20793 |    2.0793 ms
 | |                                                                   1.543 us  |    1.542 us  |    1.545 us
 | |                                                                       6 ns     |     4 ns   |      12 ns
Fibonacci 36               |                   100           |          17514    | 1.7514 ms
 | |                                                                  2.976 us     |       2.97 us    |   2.99 us
 | |                                                                     43 ns      |         19 ns    |     90 ns
Fibonacci 37                  |                         100      |       5474 |    3.2844 ms
 | |                                                                 15.375 us  |   15.355 us  |   15.418 us
 | |                                                                    145 ns   |          83 ns   |       264 ns
Fibonacci 38                   |                        100      |              1  |   13.5674 s
 | |                                                              136.192 ms  |  136.073 ms  |  136.382 ms
 | |                                                               747.777 us   |  533.426 us |   1.19919 ms
Fibonacci 39                  |                         100     |               1   |  21.9503 s
 | |                                                                   220.642 ms |   220.374 ms |   221.007 ms
 | |                                                                   1.58373 ms  |  1.24929 ms   | 2.09911 ms

**Fibonacci(37)** cost *15.355us*  vs **Fibonacci(38)** cost *136192 us*, there must be something wrong with the benchmark. 

I guess it is the cause of Memoization, which caused the test performance（Fibonacci(37) ） to be more than 10,000 times faster. 
Use global counts to exclude Memoization. I get new result of performance test
```cpp
    std::uint64_t Count = 0; // globle variable  for Unmemoization
    std::uint64_t Fibonacci(std::uint64_t number) {
        Count++; // in case of Memoization
        return number < 2 ? 1 : Fibonacci(number - 1) + Fibonacci(number - 2);
    }
```

benchmark name |  samples   |    iterations |   estimated 
------------ | -------------: | -------------: | -------------:
 | | mean   |       low mean   |   high mean|
 | | std dev   |    low std dev |  high std dev|
Fibonacci 20                   |                           100      |       2      |   5.0722 ms
 | |                                                     25.336 us  |   25.298 us   |      25.433 us
 | |                                                       286 ns      |     132 ns     |        591 ns
Fibonacci 25                    |                          100     |        1     |    28.1119 ms
 | |                                                   280.881 us  |  280.638 us   |    281.442 us
 | |                                                    1.784 us     |        750 ns   |       3.434 us
Fibonacci 30                      |                        100     |        1    |     313.125 ms
| |                                                  3.12925 ms |   3.12139 ms  |  3.14958 ms
| |                                                     59.855 us   |      24.528 us  |  118.954 us
Fibonacci 35                     |                         100     |        1     |      3.46322 s
 | |                                                    34.6978 ms  |  34.6522 ms  |  34.8022 ms
 | |                                                    332.696 us   |   181.874 us  |  662.357 us
Fibonacci 36                       |                       100    |         1     |    5.82233 s
 | |                                                    56.0485 ms |   56.0022 ms |     56.16 ms
 | |                                                    343.304 us   |   177.471 us |   688.673 us
Fibonacci 37                      |                        100   |          1     |     9.17976 s
 | |                                                   90.8303 ms  |  90.7446 ms  |  90.9529 ms
 | |                                                    517.747 us   |   394.599 us |   700.173 us
Fibonacci 38                      |                        100      |       1    |        14.6811 s
 | |                                                    146.763 ms  |  146.653 ms |   146.943 ms
 | |                                                    700.807 us   |   479.224 us   |   992.398 us
Fibonacci 39                     |                         100     |        1    |        23.7022 s
| |                                                   238.143 ms  |  237.878 ms  |  238.484 ms
| |                                                  1.51679 ms  |  1.24295 ms |   1.94789 ms

**Fibonacci(30)** cost about *3ms*,  Close to my own test results *2.6ms*.

**Fibonacci(37)** cost  *90.8303ms*  vs Fibonacci(38) cost *146.763 ms*,

Its  Looks more correct than before.
the time ratio 90.8303 / 146.763 = 0.618891. Also in line with the **Golden Ratio**， haha！


**Platform information:**
<!-- Fill in any extra information that might be important for your issue. -->
 - OS: **Windows 10**
 - Compiler+version: **VC 2017 15.9.14**
 - CPU i9 9900k
 - Catch version: **v1.2.3**




**Description**
To have a `SECTION` variant `SECTION_IF` that would be only executed if condition was true:

```
#define SECTION_IF(cond, ...)
```
The motivational example:
```
TEST_CASE("MyVector")
{
    auto vector = GENERATE(std::vector<int>{}, std::vector<int>{1,2,3,4,5});

    SECTION_IF(!vector.isEmpty(), "operator[]")
    {
        REQUIRE(vector[0] == 1);
    }
}
```
Currently I can skip code inside a section with `if` but the section will still cause the whole test to be needlessly restarted even if it is not relevant for given generated input (e.g. empty vector). Another option would be to have two separate test cases but since the tests share a lots of code it that is less than ideal. Same as putting the generators or initialization code in only the relevant sections. Too much code duplication.

 Instead I resorted to the following workaround:
```
if(condition) 
{
    SECTION("MySection")
    {
    }
}
```
That seems to work but there is a bug report #714 that seems to have issues with this approach (might be outdated though) so this might be buggy way of doing things.

I hope this can be added seemelssly. Not sure if this would greatly upset how SECTIONs are handled by Catch2.