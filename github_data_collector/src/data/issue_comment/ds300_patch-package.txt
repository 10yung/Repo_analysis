**Background:** I have a pull request into a repository where the npm module isn't up-to-date with `master`, and I'd like to test out my branch in a module that depends on it through a bunch of different deep dependencies. It seems like patch-package would be a great solution for this.

**Problem:** When I append `.patch` to my GitHub URL it gives me a patch, but when I pass it to `patch -p1` it fails because the diff between my branch and master is not the same as the diff between my branch and the latest published npm module. I tried to instead use the diff between my branch and the corresponding tag, but it turns out that the npm module and the Git tag aren't 100% in sync. My guess is that the "import a diff from a pull request" isn't documented in the readme because all of the solutions are fraught with errors like the ones I've encountered, but it would be great to have a recommendation of how to import code rather than hand-editing files with Vim.

**Proposal:** Let's document how to import an entire module! After trying a bunch of different solutions for a few hours, the best I can come up with is simple [albeit primitive]:

```sh
# Delete the currently installed module.
rm -rf ./node_modules/foo
# Import your code directly into `node_modules`
cp -r ~/src/foo ./node_modules
# Generate a diff for patch-package
patch-package foo
```

This feels wasteful, since Git already provides a diff for us, but since the npm registry is divorced from the Git history it seems like the only robust solution. I'd be very happy to hear improvements to this workflow. Thanks for your work on this module!
I don't suppose there's a way to do this with the current mechanism of putting `patch-package` in the postinstall script which doesn't run until all other packages' install scripts have run?
Error: Command failed: yarn run postinstall

**ERROR** Failed to apply patch for package bulma-rtl

  This happened because the patch file patches\bulma-rtl+0.7.1.patch could not be parsed.

  If you just upgraded patch-package, you can try running:

    cd patches\bulma-rtl+0.7.1.patc
    patch -p1 -i h
    npx patch-package bulma-rtl
    cd ../..

Looks like it's due to many new files generated under new directory "third-party" after I build my project.
I can fix it by excluding that directory:
`yarn patch-package react-native --exclude third-party`

Below is the error log if not exclude:
`yarn patch-package react-native
yarn run v1.16.0
$ /Users/samuel.cai/Documents/app/node_modules/.bin/patch-package react-native
patch-package 6.2.0
• Creating temporary folder
• Installing react-native@0.59.9 with yarn
• Diffing your files with clean files

{
  error: Error: spawnSync git ENOBUFS
      at Object.spawnSync (internal/child_process.js:1041:20)
      at Object.spawnSync (child_process.js:602:24)
      at Function.spawnSync [as sync] (/Users/samuel.cai/Documents/app/node_modules/patch-package/node_modules/cross-spawn/index.js:26:23)
      at Object.exports.spawnSafeSync (/Users/samuel.cai/Documents/app/node_modules/patch-package/dist/spawnSafe.js:10:32)
      at git (/Users/samuel.cai/Documents/app/node_modules/patch-package/dist/makePatch.js:104:32)
      at Object.makePatch (/Users/samuel.cai/Documents/app/node_modules/patch-package/dist/makePatch.js:135:26)
      at /Users/samuel.cai/Documents/app/node_modules/patch-package/dist/index.js:48:25
      at Array.forEach (<anonymous>)
      at Object.<anonymous> (/Users/samuel.cai/Documents/app/node_modules/patch-package/dist/index.js:47:22)
      at Module._compile (internal/modules/cjs/loader.js:774:30) {
    errno: 'ENOBUFS',
    code: 'ENOBUFS',
    syscall: 'spawnSync git',
    path: 'git',
    spawnargs: [
      'diff',
      '--cached',
      '--no-color',
      '--ignore-space-at-eol',
      '--no-ext-diff'
    ]
  },
  status: null,
  signal: 'SIGTERM',
  output: [
    null,
    <Buffer 64 69 66 66 20 2d 2d 67 69 74 20 61 2f 6e 6f 64 65 5f 6d 6f 64 75 6c 65 73 2f 72 65 61 63 74 2d 6e 61 74 69 76 65 2f 4c 69 62 72 61 72 69 65 73 2f 41 ... 1056718 more bytes>,
    <Buffer >
  ],
  pid: 87610,
  stdout: <Buffer 64 69 66 66 20 2d 2d 67 69 74 20 61 2f 6e 6f 64 65 5f 6d 6f 64 75 6c 65 73 2f 72 65 61 63 74 2d 6e 61 74 69 76 65 2f 4c 69 62 72 61 72 69 65 73 2f 41 ... 1056718 more bytes>,
  stderr: <Buffer >
}

/Users/samuel.cai/Documents/app/node_modules/patch-package/dist/makePatch.js:181
        throw e;
        ^
{
  error: Error: spawnSync git ENOBUFS
      at Object.spawnSync (internal/child_process.js:1041:20)
      at Object.spawnSync (child_process.js:602:24)
      at Function.spawnSync [as sync] (/Users/samuel.cai/Documents/app/node_modules/patch-package/node_modules/cross-spawn/index.js:26:23)
      at Object.exports.spawnSafeSync (/Users/samuel.cai/Documents/app/node_modules/patch-package/dist/spawnSafe.js:10:32)
      at git (/Users/samuel.cai/Documents/app/node_modules/patch-package/dist/makePatch.js:104:32)
      at Object.makePatch (/Users/samuel.cai/Documents/app/node_modules/patch-package/dist/makePatch.js:135:26)
      at /Users/samuel.cai/Documents/app/node_modules/patch-package/dist/index.js:48:25
      at Array.forEach (<anonymous>)
      at Object.<anonymous> (/Users/samuel.cai/Documents/app/node_modules/patch-package/dist/index.js:47:22)
      at Module._compile (internal/modules/cjs/loader.js:774:30) {
    errno: 'ENOBUFS',
    code: 'ENOBUFS',
    syscall: 'spawnSync git',
    path: 'git',
    spawnargs: [
      'diff',
      '--cached',
      '--no-color',
      '--ignore-space-at-eol',
      '--no-ext-diff'
    ]
  },
  status: null,
  signal: 'SIGTERM',
  output: [
    null,
    <Buffer 64 69 66 66 20 2d 2d 67 69 74 20 61 2f 6e 6f 64 65 5f 6d 6f 64 75 6c 65 73 2f 72 65 61 63 74 2d 6e 61 74 69 76 65 2f 4c 69 62 72 61 72 69 65 73 2f 41 ... 1056718 more bytes>,
    <Buffer >
  ],
  pid: 87610,
  stdout: <Buffer 64 69 66 66 20 2d 2d 67 69 74 20 61 2f 6e 6f 64 65 5f 6d 6f 64 75 6c 65 73 2f 72 65 61 63 74 2d 6e 61 74 69 76 65 2f 4c 69 62 72 61 72 69 65 73 2f 41 ... 1056718 more bytes>,
  stderr: <Buffer >
}
error Command failed with exit code 1.
info Visit https://yarnpkg.com/en/docs/cli/run for documentation about this command.`

Hi, first up, thanks for this awesome idea -- I only found patch-package a couple of days ago and I'm already in love!  Simple but so useful. I'm looking forward to removing lots of forked dependencies from my repo in coming days!

I'm on a Mac, and when I first asked patch-package to create a patch, I got a strange error:
> `xcode-select: note: no developer tools were found at '/Applications/Xcode.app', requesting install. Choose an option in the dialog to download the command line developer tools.`

This is the output from /usr/bin/git, which is a small stub on Macs that asks the user to install Xcode. I already have the full git suite installed, and on my $PATH at /usr/local/bin/git, and I use VS Code, so I don't want to install Xcode too.

I found that if I change this line in makePatch.js
> `env: { HOME: tmpRepo.name },`

to
> `env: { ...process.env, HOME: tmpRepo.name },`

patch-package started running the correct version of git, and was able to create a patch. 

I think the unchanged line might discard all existing environment variables in the spawned process, including $PATH. But I don't know how to be sure, because I can't spawn 'set' (it's a built-in) and if I spawn a sub-shell like 'bash -c set', it picks up the correct path from .bashrc.

Needless to say, after getting this working, I used patch-package to patch itself :-D

If you think this is not a bug please feel free to ignore me, it may just be something is weird or broken on my system!  Thanks again

This is not really an issue, but I wanted to say **Thank you** for this awesome idea and package. 

This saved me **a lot** of time today and in past. Thank you so much ❤️ 💯 
Beanstalk does not change into the project directory when doing an npm install. The project folder gets passed as an parameter. As patch-package does lookup the package.json in the current directory, the postinstall process fails.

command is:
```
"/opt/elasticbeanstalk/node-install/node-v10.16.0-linux-x64/bin/node" "/opt/elasticbeanstalk/node-install/node-v10.16.0-linux-x64/bin/npm" "install" "/tmp/deployment/application"
```

in the logs there is something like this:
```
[2019-09-06T12:16:05.350Z] INFO  [16468] - [Configuration update code-pipeline-1567079712160-nmg2-backend-api-dev-build-8da46fc9-75a1-4e86-989e-21f65f908e20@129/ConfigDeployStage0/ConfigDeployPreHook/50npm.sh] : Starting activity...
[2019-09-06T12:16:17.600Z] INFO  [16468] - [Configuration update code-pipeline-1567079712160-nmg2-backend-api-dev-build-8da46fc9-75a1-4e86-989e-21f65f908e20@129/ConfigDeployStage0/ConfigDeployPreHook/50npm.sh] : Activity execution failed, because: + /opt/elasticbeanstalk/containerfiles/ebnode.py --action npm-install
  
  > backend-api@2.5.6 postinstall /tmp/deployment/application
  > patch-package
  
  internal/modules/cjs/loader.js:638
      throw err;
      ^
  
  Error: Cannot find module './package.json'
      at Function.Module._resolveFilename (internal/modules/cjs/loader.js:636:15)
      at Function.Module._load (internal/modules/cjs/loader.js:562:25)
      at Module.require (internal/modules/cjs/loader.js:690:17)
      at require (internal/modules/cjs/helpers.js:25:18)
      at Object.<anonymous> (/tmp/deployment/application/node_modules/.bin/patch-package:4:13)
      at Module._compile (internal/modules/cjs/loader.js:776:30)
      at Object.Module._extensions..js (internal/modules/cjs/loader.js:787:10)
      at Module.load (internal/modules/cjs/loader.js:653:32)
      at tryModuleLoad (internal/modules/cjs/loader.js:593:12)
      at Function.Module._load (internal/modules/cjs/loader.js:585:3)
  npm ERR! code ELIFECYCLE
  npm ERR! errno 1
  npm ERR! backend-api@2.5.6 postinstall: `patch-package`
  npm ERR! Exit status 1
  npm ERR! 
  npm ERR! Failed at the backend-api@2.5.6 postinstall script.
  npm ERR! This is probably not a problem with npm. There is likely additional logging output above.
  
  npm ERR! A complete log of this run can be found in:
  npm ERR!     /tmp/.npm/_logs/2019-09-06T12_16_17_488Z-debug.log
  Running npm install:  /opt/elasticbeanstalk/node-install/node-v10.16.0-linux-x64/bin/npm
  Setting npm config jobs to 1
  npm config jobs set to 1
  Running npm without --production flag
  Failed to run npm install. Snapshot logs for more details.
  UTC 2019/09/06 12:16:17 cannot find application npm debug log at /tmp/deployment/application/npm-debug.log 
  
  Traceback (most recent call last):
    File "/opt/elasticbeanstalk/containerfiles/ebnode.py", line 695, in <module>
      main()
    File "/opt/elasticbeanstalk/containerfiles/ebnode.py", line 677, in main
      node_version_manager.run_npm_install(options.app_path)
    File "/opt/elasticbeanstalk/containerfiles/ebnode.py", line 136, in run_npm_install
      self.npm_install(bin_path, self.config_manager.get_container_config('app_staging_dir'))
    File "/opt/elasticbeanstalk/containerfiles/ebnode.py", line 180, in npm_install
      raise e
  subprocess.CalledProcessError: Command '['/opt/elasticbeanstalk/node-install/node-v10.16.0-linux-x64/bin/npm', 'install']' returned non-zero exit status 1 (ElasticBeanstalk::ExternalInvocationError)
caused by: + /opt/elasticbeanstalk/containerfiles/ebnode.py --action npm-install
  
  > backend-api@2.5.6 postinstall /tmp/deployment/application
  > patch-package
  
  internal/modules/cjs/loader.js:638
      throw err;
      ^
  
  Error: Cannot find module './package.json'
      at Function.Module._resolveFilename (internal/modules/cjs/loader.js:636:15)
      at Function.Module._load (internal/modules/cjs/loader.js:562:25)
      at Module.require (internal/modules/cjs/loader.js:690:17)
      at require (internal/modules/cjs/helpers.js:25:18)
      at Object.<anonymous> (/tmp/deployment/application/node_modules/.bin/patch-package:4:13)
      at Module._compile (internal/modules/cjs/loader.js:776:30)
      at Object.Module._extensions..js (internal/modules/cjs/loader.js:787:10)
      at Module.load (internal/modules/cjs/loader.js:653:32)
      at tryModuleLoad (internal/modules/cjs/loader.js:593:12)
      at Function.Module._load (internal/modules/cjs/loader.js:585:3)
  npm ERR! code ELIFECYCLE
  npm ERR! errno 1
  npm ERR! backend-api@2.5.6 postinstall: `patch-package`
  npm ERR! Exit status 1
  npm ERR! 
  npm ERR! Failed at the backend-api@2.5.6 postinstall script.
  npm ERR! This is probably not a problem with npm. There is likely additional logging output above.
  
  npm ERR! A complete log of this run can be found in:
  npm ERR!     /tmp/.npm/_logs/2019-09-06T12_16_17_488Z-debug.log
  Running npm install:  /opt/elasticbeanstalk/node-install/node-v10.16.0-linux-x64/bin/npm
  Setting npm config jobs to 1
  npm config jobs set to 1
  Running npm without --production flag
  Failed to run npm install. Snapshot logs for more details.
  UTC 2019/09/06 12:16:17 cannot find application npm debug log at /tmp/deployment/application/npm-debug.log 
```


Hey @ds300 

Thanks for creating and maintaining `patch-package`, it has made my life much easier 👍 

### The Problem

I often find myself copy pasting patches from a codebase to another. While not a huge issue, it would be nice to avoid it.

### Possible Solution

Instead of specifying the package name or git commit the user would provide a url pointing to where the patch is located. 

`patch-package` would detect that it's a url, download the patches locally and then work as it does normally. 

Is this something you would be interested to add ? Happy to take a shot at a PR if you are !

Cheers 
#### Small reproduction:

1. Create an empty folder with only one file: `package.json`
    ```json
    {
      "name": "rw",
      "dependencies": {
        "react-window": "1.8.5"
      }
    }
    ````

2. Make some changes inside `node_modules/react-window/dist` files
3. `npx patch-package react-window`
4. If fails with error below:

```shell
[17:05:40] brunolemos:rw $ patch-package react-window
patch-package 6.1.2
• Creating temporary folder
• Installing react-window@1.8.5 with yarn
• Diffing your files with clean files

{
  error: Error: spawnSync git ENOBUFS
      at Object.spawnSync (internal/child_process.js:1041:20)
      at Object.spawnSync (child_process.js:607:24)
      at Function.spawnSync [as sync] (/usr/local/lib/node_modules/patch-package/node_modules/cross-spawn/index.js:26:23)
      at Object.exports.spawnSafeSync (/usr/local/lib/node_modules/patch-package/dist/spawnSafe.js:10:32)
      at git (/usr/local/lib/node_modules/patch-package/dist/makePatch.js:73:32)
      at Object.makePatch (/usr/local/lib/node_modules/patch-package/dist/makePatch.js:104:26)
      at /usr/local/lib/node_modules/patch-package/dist/index.js:48:25
      at Array.forEach (<anonymous>)
      at Object.<anonymous> (/usr/local/lib/node_modules/patch-package/dist/index.js:47:22)
      at Module._compile (internal/modules/cjs/loader.js:868:30) {
    errno: 'ENOBUFS',
    code: 'ENOBUFS',
    syscall: 'spawnSync git',
    path: 'git',
    spawnargs: [
      'diff',
      '--cached',
      '--no-color',
      '--ignore-space-at-eol',
      '--no-ext-diff'
    ]
  },
  status: null,
  signal: 'SIGTERM',
  output: [
    null,
    <Buffer 64 69 66 66 20 2d 2d 67 69 74 20 61 2f 6e 6f 64 65 5f 6d 6f 64 75 6c 65 73 2f 72 65 61 63 74 2d 77 69 6e 64 6f 77 2f 64 69 73 74 2f 69 6e 64 65 78 2d ... 1056718 more bytes>,
    <Buffer >
  ],
  pid: 79859,
  stdout: <Buffer 64 69 66 66 20 2d 2d 67 69 74 20 61 2f 6e 6f 64 65 5f 6d 6f 64 75 6c 65 73 2f 72 65 61 63 74 2d 77 69 6e 64 6f 77 2f 64 69 73 74 2f 69 6e 64 65 78 2d ... 1056718 more bytes>,
  stderr: <Buffer >
}

/usr/local/lib/node_modules/patch-package/dist/makePatch.js:150
        throw e;
        ^
{
  error: Error: spawnSync git ENOBUFS
      at Object.spawnSync (internal/child_process.js:1041:20)
      at Object.spawnSync (child_process.js:607:24)
      at Function.spawnSync [as sync] (/usr/local/lib/node_modules/patch-package/node_modules/cross-spawn/index.js:26:23)
      at Object.exports.spawnSafeSync (/usr/local/lib/node_modules/patch-package/dist/spawnSafe.js:10:32)
      at git (/usr/local/lib/node_modules/patch-package/dist/makePatch.js:73:32)
      at Object.makePatch (/usr/local/lib/node_modules/patch-package/dist/makePatch.js:104:26)
      at /usr/local/lib/node_modules/patch-package/dist/index.js:48:25
      at Array.forEach (<anonymous>)
      at Object.<anonymous> (/usr/local/lib/node_modules/patch-package/dist/index.js:47:22)
      at Module._compile (internal/modules/cjs/loader.js:868:30) {
    errno: 'ENOBUFS',
    code: 'ENOBUFS',
    syscall: 'spawnSync git',
    path: 'git',
    spawnargs: [
      'diff',
      '--cached',
      '--no-color',
      '--ignore-space-at-eol',
      '--no-ext-diff'
    ]
  },
  status: null,
  signal: 'SIGTERM',
  output: [
    null,
    <Buffer 64 69 66 66 20 2d 2d 67 69 74 20 61 2f 6e 6f 64 65 5f 6d 6f 64 75 6c 65 73 2f 72 65 61 63 74 2d 77 69 6e 64 6f 77 2f 64 69 73 74 2f 69 6e 64 65 78 2d ... 1056718 more bytes>,
    <Buffer >
  ],
  pid: 79859,
  stdout: <Buffer 64 69 66 66 20 2d 2d 67 69 74 20 61 2f 6e 6f 64 65 5f 6d 6f 64 75 6c 65 73 2f 72 65 61 63 74 2d 77 69 6e 64 6f 77 2f 64 69 73 74 2f 69 6e 64 65 78 2d ... 1056718 more bytes>,
  stderr: <Buffer >
}
[17:05:44] brunolemos:rw $ 
```