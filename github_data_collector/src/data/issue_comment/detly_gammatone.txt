https://github.com/detly/gammatone/blob/0626328ef7c31d3b33214db2fdcd52e8601eb4c5/gammatone/fftweight.py#L151

By doing so you obtain always a window length two times bigger
If I interpret the code right, the center frequencies are calculated in function `rb_space` as follows
1. divide frequency range from cutoff to fs/2 into N (frequency band number) parts, 
2. separate points and start point are center frequencies of N frequency bands

In this way, the actual upper boundary of frequency range that filter bank can cover is lower than fs/2, especially when N is small. 

Hi there, I was glad to find this port! Not sure to what extent you're intending to fix issues in this repo, but `f_max` is in the documentation but missing from `gtgram()`. Might also rename `cutoff` in `centre_freqs` to `f_min` for consistency?
fix TypeError: slice indices must be integers or None or have an __index__ method

Hi,

Is there a way to reconstruct the time domain signal from the gammatone-gram representation?

Thanks!
Fixed the super calls to be Python 2/3 compatible instead of just Python 3 compatible.

Fixes: #6 

I cloned the gammatone repo and tried "**python -m gammatone -a FurElise.wav -d 20**". I'm getting '**TypeError: super() takes at least 1 argument (0 given)**' error. Below is the stacktrace

```
  File "C:\Python27\Lib\runpy.py", line 162, in _run_module_as_main
    "__main__", fname, loader, pkg_name)
  File "C:\Python27\Lib\runpy.py", line 72, in _run_code
    exec code in run_globals
  File "G:\Experiments\Godrej\gammatone-master\gammatone-master\gammatone\__main__.py", line 6, in <module>
    main()
  File "gammatone\plot.py", line 169, in main
    return render_audio_from_file(args.sound_file, args.duration, args.function)
  File "gammatone\plot.py", line 134, in render_audio_from_file
    twin, thop, channels, fmin)
  File "gammatone\plot.py", line 80, in gtgram_plot
    formatter = ERBFormatter(f_min, fs/2, unit='Hz', places=0)
  File "gammatone\plot.py", line 48, in __init__
    super().__init__(*args, **kwargs)
TypeError: super() takes at least 1 argument (0 given)
```

While testing this for a real signal, I have noticed that the Python implementation of `fft_gtgram` results have less frames than the MATLAB implementation. A test script as well as .mat files containing the input audio and output from MATLAB can be found [here](https://gist.github.com/jfsantos/82de18a9c87b6d3d942a).
