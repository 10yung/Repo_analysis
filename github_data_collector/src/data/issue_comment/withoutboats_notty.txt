I love using markdown, but it just never looks right in the terminal  I think something like this could really fix that.
I realize this project had very lofty goals from the start, and that it would take a *tremendous* amount of time and effort. That being said, the latest commit was nine months ago. I'm not trying to complain about this as I realize people have busy lives, but I am wondering if you plan on picking this back up or if it is abandoned. 
Joyful compiler errors

```
error[E0038]: the trait `cmds::EscCode` cannot be made into an object
 --> /home/seunlanlege/.cargo/git/checkouts/notty-encoding-26bc718f9ba2caca/ba5daba/src/client.rs:6:5
  |
6 |     fn write(&mut self, &EscCode) -> io::Result<()>;
  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `cmds::EscCode` cannot be made into an object
  |
  = note: the trait cannot contain associated consts like `OPCODE`

error[E0038]: the trait `cmds::EscCode` cannot be made into an object
  --> /home/seunlanlege/.cargo/git/checkouts/notty-encoding-26bc718f9ba2caca/ba5daba/src/client.rs:12:5
   |
12 |     fn write(&mut self, code: &EscCode) -> io::Result<()> {
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `cmds::EscCode` cannot be made into an object
   |
   = note: the trait cannot contain associated consts like `OPCODE`

error: aborting due to 2 previous errors

error: Could not compile `notty-encoding`.
warning: build failed, waiting for other jobs to finish...
error: build failed
```

rustc version
`rustc 1.22.0-nightly (f1b5225e8 2017-10-01)`
I have a little idea but don't know how it could be done or if it's even doable or not : 

The magic wormhole is a fifo between multiple terminal. Let's take an example.
 - You open a terminal. You connect to ssh. You then enter a container with "lxc-attach -n foobar".
 - You open another terminal. You start another ssh session on another machine which can't reach the lxc container.
 - You start/enter/trigger the magic wormhole to bind the two terminal to get data from one term to the other. That way you can transfer files or even pipe commands between the two terminals.

 For now you can mimic this with tmux by using buffer copy and all but it's quite complex and not very reliable.

I discussed a bit of this on alacritty's irc channel and was redirected here. What do you think of this ?
Is it out of scope ? technically not feasible ?
Some apps like [debconf](https://packages.debian.org/search?keywords=debconf) support [dialog](http://invisible-island.net/dialog/dialog.html) for drawing various widgets in (traditional) terminals.

If notty can operate as a drop-in replacement for dialog (or [whiptale](https://fedorahosted.org/newt/)), then it may in that way find some customers!
Hi,

I'm trying to compile notty and have run into an error building the encoding package.  Here is the output from my build:

```bash
➜  notty git:(master) cargo build --verbose
       Fresh uuid v0.3.1
       Fresh base64 v0.1.1
       Fresh num-traits v0.1.37
       Fresh unicode-width v0.1.4
       Fresh log v0.3.7
   Compiling notty-encoding v0.1.0 (https://github.com/withoutboats/notty-encoding#ba5daba3)
       Fresh num-integer v0.1.34
     Running `rustc --crate-name notty_encoding /Users/mgrunder/.cargo/git/checkouts/notty-encoding-26bc718f9ba2caca/ba5daba/src/lib.rs --crate-type lib --emit=dep-info,link -C debuginfo=2 -C metadata=46ffb3a5a218e748 -C extra-filename=-46ffb3a5a218e748 --out-dir /Users/mgrunder/dev/rust-foss-projects/notty/scaffolding/target/debug/deps -L dependency=/Users/mgrunder/dev/rust-foss-projects/notty/scaffolding/target/debug/deps --extern base64=/Users/mgrunder/dev/rust-foss-projects/notty/scaffolding/target/debug/deps/libbase64-21fea01bef6f0feb.rlib --cap-lints allow`
       Fresh num-iter v0.1.33
       Fresh num v0.1.37
       Fresh serde v0.6.15
       Fresh mime v0.1.3
error[E0038]: the trait `cmds::EscCode` cannot be made into an object
 --> /Users/mgrunder/.cargo/git/checkouts/notty-encoding-26bc718f9ba2caca/ba5daba/src/client.rs:6:5
  |
6 |     fn write(&mut self, &EscCode) -> io::Result<()>;
  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `cmds::EscCode` cannot be made into an object
  |
  = note: the trait cannot contain associated consts like `OPCODE`

error[E0038]: the trait `cmds::EscCode` cannot be made into an object
  --> /Users/mgrunder/.cargo/git/checkouts/notty-encoding-26bc718f9ba2caca/ba5daba/src/client.rs:12:5
   |
12 |     fn write(&mut self, code: &EscCode) -> io::Result<()> {
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `cmds::EscCode` cannot be made into an object
   |
   = note: the trait cannot contain associated consts like `OPCODE`

error: aborting due to 2 previous errors

error: Could not compile `notty-encoding`.

Caused by:
  process didn't exit successfully: `rustc --crate-name notty_encoding /Users/mgrunder/.cargo/git/checkouts/notty-encoding-26bc718f9ba2caca/ba5daba/src/lib.rs --crate-type lib --emit=dep-info,link -C debuginfo=2 -C metadata=46ffb3a5a218e748 -C extra-filename=-46ffb3a5a218e748 --out-dir /Users/mgrunder/dev/rust-foss-projects/notty/scaffolding/target/debug/deps -L dependency=/Users/mgrunder/dev/rust-foss-projects/notty/scaffolding/target/debug/deps --extern base64=/Users/mgrunder/dev/rust-foss-projects/notty/scaffolding/target/debug/deps/libbase64-21fea01bef6f0feb.rlib --cap-lints allow` (exit code: 101)
```

rustc:
```zsh
➜  notty git:(master) rustc --version
rustc 1.19.0-nightly (06fb4d256 2017-04-30)
```

OS Information:
```zsh
➜  notty git:(master) system_profiler SPSoftwareDataType
Software:

    System Software Overview:

      System Version: OS X 10.11.6 (15G1217)
      Kernel Version: Darwin 15.6.0
      Boot Volume: Macintosh HD
      Boot Mode: Normal
      Computer Name: MG-MBP
      User Name: Michael Grunder (mgrunder)
      Secure Virtual Memory: Enabled
      System Integrity Protection: Disabled
      Time since boot: 2 days 13 minutes
```

I was able to find a few places on the net mentioning this error but unfortunately I don't know nearly enough about rust to figure out a solution.  Hopefully I'm not missing something totally obvious here :smiley:

Edit:  I get the same error in Ubuntu.

Hey i'm really hyped to try out notty, but i haven't been able to compile it.

The compilation always crashes because of `glib v0.0.8` - i've pasted the relevant errors below.

I'm already using the nightly build of rust, so it _should_ compile fine – since there are other OSX users here that have managed to compile it without errors.

I've tried using a newer package of glib, but unfortunately that didn't help. Also searched on Google and stackoverflow and found some similar problems with glib. But the solutions provided there also didn't help. Like reinstalling the glib located at `/usr/local/opt` with `brew`. Didn't help either... Then `cargo update`and re-build – still failing at the same point.

What could be wrong with my installation / settings? 
**Do i need a specific glib version or some extra flags to get past the errors?**


Here are the generated errors:
```bash
sudo sh build_test.sh
   Compiling notty v0.1.0 (file:///Users/david/github/build/notty)
(...)
test terminal::screen::split::tests::into_6_6::max_right ... ok
test terminal::screen::split::tests::into_6_6::percent ... ok
test terminal::styles::tests::styles_update ... ok

test result: ok. 74 passed; 0 failed; 0 ignored; 0 measured

   Doc-tests notty

running 0 tests

test result: ok. 0 passed; 0 failed; 0 ignored; 0 measured

   Compiling either v1.1.0
   Compiling cairo-rs v0.1.2
   Compiling gdk-pixbuf v0.1.2
   Compiling libc v0.2.21
   Compiling gdk v0.5.2
   Compiling c_vec v1.2.0
   Compiling gdk-sys v0.3.3
   Compiling gio-sys v0.3.3
   Compiling itertools v0.5.10
   Compiling gdk-pixbuf-sys v0.3.3
   Compiling bitflags v0.5.0
   Compiling bitflags v0.4.0
   Compiling pango-sys v0.3.3
   Compiling cairo-sys-rs v0.3.3
   Compiling gio v0.1.2
   Compiling glib-sys v0.3.3
   Compiling gobject-sys v0.3.3
   Compiling glib v0.1.2
   Compiling pango v0.1.2
   Compiling glib v0.0.8
error[E0591]: `extern "C" fn(&std::cell::RefCell<std::boxed::Box<std::ops::FnMut() -> source::Continue + 'static>>) -> i32 {source::trampoline}` is zero-sized and can't be transmuted to `std::option::Option<unsafe extern "C" fn(*mut libc::c_void) -> i32>`
  --> /Users/david/.cargo/registry/src/github.com-1ecc6299db9ec823/glib-0.0.8/src/source.rs:73:70
   |
73 |         glib_ffi::g_idle_add_full(glib_ffi::G_PRIORITY_DEFAULT_IDLE, transmute(trampoline),
   |                                                                      ^^^^^^^^^
   |
note: cast with `as` to a pointer instead
  --> /Users/david/.cargo/registry/src/github.com-1ecc6299db9ec823/glib-0.0.8/src/source.rs:73:70
   |
73 |         glib_ffi::g_idle_add_full(glib_ffi::G_PRIORITY_DEFAULT_IDLE, transmute(trampoline),
   |                                                                      ^^^^^^^^^

error[E0591]: `extern "C" fn(&std::cell::RefCell<std::boxed::Box<std::ops::FnMut() -> source::Continue + 'static>>) -> i32 {source::trampoline}` is zero-sized and can't be transmuted to `std::option::Option<unsafe extern "C" fn(*mut libc::c_void) -> i32>`
  --> /Users/david/.cargo/registry/src/github.com-1ecc6299db9ec823/glib-0.0.8/src/source.rs:91:78
   |
91 |         glib_ffi::g_timeout_add_full(glib_ffi::G_PRIORITY_DEFAULT, interval, transmute(trampoline),
   |                                                                              ^^^^^^^^^
   |
note: cast with `as` to a pointer instead
  --> /Users/david/.cargo/registry/src/github.com-1ecc6299db9ec823/glib-0.0.8/src/source.rs:91:78
   |
91 |         glib_ffi::g_timeout_add_full(glib_ffi::G_PRIORITY_DEFAULT, interval, transmute(trampoline),
   |                                                                              ^^^^^^^^^

error[E0591]: `extern "C" fn(&std::cell::RefCell<std::boxed::Box<std::ops::FnMut() -> source::Continue + 'static>>) -> i32 {source::trampoline}` is zero-sized and can't be transmuted to `std::option::Option<unsafe extern "C" fn(*mut libc::c_void) -> i32>`
   --> /Users/david/.cargo/registry/src/github.com-1ecc6299db9ec823/glib-0.0.8/src/source.rs:109:13
    |
109 |             transmute(trampoline), into_raw(func), Some(destroy_closure))
    |             ^^^^^^^^^
    |
note: cast with `as` to a pointer instead
   --> /Users/david/.cargo/registry/src/github.com-1ecc6299db9ec823/glib-0.0.8/src/source.rs:109:13
    |
109 |             transmute(trampoline), into_raw(func), Some(destroy_closure))
    |             ^^^^^^^^^

error: aborting due to 3 previous errors

error: Could not compile `glib`.
Build failed, waiting for other jobs to finish...
error: build failed
```
Hi,

I am the developer of a new terminal emulator, https://github.com/kovidgoyal/kitty and I am considering adding graphics rendering capabilities to it. To that end, I have posted some thoughts here https://github.com/kovidgoyal/kitty/issues/33  

Since you also seem to be trying to develop standards in this space, I thought I would invite you to join the discussion. 
There's a typo in Readme.md  "not have been possible for the physical terminals other terminals emulate."  You probably wanted to remove "other terminals" and replace it with "to"
With this pressing `AltGr` doesn't crash terminal anymore.

There are other keys that do crash it, should I just keep adding them to the `match` ?

Edit: nvm, looks like adding other keys to `match` causes terminal to break
