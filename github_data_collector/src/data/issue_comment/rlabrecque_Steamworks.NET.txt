Hi,
I am trying to implement in-app purchasing in the steam game. I'm using steamwroks.net SDK in-game. but it not working. And I have no idea how to implement in-app in the steam network.
please, anyone, give suggestions.

Thanks in advance. 
Hello!

I've always build for Windows, Mac and Linux from my Windows but now that Apple need to have the Mac builds notarised I need to build the Mac version from my MacBook Pro (2015). I've got the notarisation part fixed. But my builds won't initialise Steam properly.

I'm using **Unity 2019.1.9f1** and **Steamworks.NET_13** 
My OS is **Catalina 10.15.2**

I've tried to move out the **libsteam.api** and rename it to **steam_api.bundle** but that doesn't work.
Project affected: https://github.com/Ratstail91/DecadeDice

I'm also running this non-unity project at the same time: https://github.com/Ratstail91/DecadeDiceServer

I start the game, then enter the lobby screen, then exit. When starting the game again, unity crashes. 

My guess is `SteamMatchmakingServerListResponse` finishes, but doesn't properly release the `HServerListRequest` instance. I've tried everything I can.
https://partner.steamgames.com/doc/api/ISteamGameCoordinator


I can't find this handler in your library. Help please
hi
I am trying to login in steam using 480 appid, but issues are when I am login in unity editor, it work fine. when I make exe build and run it showing error like below :

[Steamworks.NET] SteamAPI_Init() failed. Refer to Valve's documentation or the comment above this line for more information.

What I can do?

Please give me a suggestion, I need help to solve this issue.

Thanks, advance.
![Untitled](https://user-images.githubusercontent.com/45392865/71073268-06c3bb80-21a6-11ea-916c-6313dff81642.png)

So I am trying to connect to the server using Auth Session tickets(To ark official server), in the steamworks docs after you InitiateGameServercnnection it states:

```
The contents of pAuthBlob should then be sent to the game server, for it to use to complete the authentication process.
```
I got the point where I get the blob and it is not 0, but there is no guide/method to use to send the blob to the server, any help?

Current code:
```

            m_Ticket = new byte[1024];
            SteamUser.GetAuthSessionTicket(m_Ticket,1024, out m_pcbTicket);
            Console.WriteLine("SteamUser.GetAuthSessionTicket(Ticket, 1024, out pcbTicket) - " + m_HAuthTicket + " -- " + m_pcbTicket);

            await Task.Delay(500);
            if (m_HAuthTicket != HAuthTicket.Invalid && m_pcbTicket != 0)
            {
                EBeginAuthSessionResult ret = SteamUser.BeginAuthSession(m_Ticket, (int)m_pcbTicket, SteamUser.GetSteamID());
                Console.WriteLine("SteamUser.BeginAuthSession(m_Ticket, " + (int)m_pcbTicket + ", " + SteamUser.GetSteamID() + ") - " + ret);
            }
            else
            {
                Console.WriteLine("Call GetAuthSessionTicket first!");
            }
            Task.Delay(500);
            int blobl = SteamUser.InitiateGameConnection(pAuthBlob, 2048, (CSteamID)90131137696874498, 2147513105, 27019, true);
            Console.WriteLine("Blobl value: " + blobl);
```

When getting SteamUGCDetails_t.m_rgchTitle by calling SteamUGC.GetQueryUGCResult(), non-English values (in my case Japanese and Chinese) will cause an encoding issue.
It seems to be affected by "Administrative Language Settings" in Windows 10.
The return value only appears to be correct when "Beta: Use Unicode UTF-8 for worldwide language support" is enabled.
Unity 2019 requires filenames to be the same as class names for MonoBehaviour components to work. Otherwise the IDE reports a warning or does something worse.

The current implementation of the DISABLESTEAMWORKS define creates a broken component in certain versions of Unity. This causes some real head-scratching bugs as Unity throws a little tantrum whenever I try to put other components on the same gameobject. The SteamManager class will of course not declare itself as the cause because DISABLESTEAMWORKS has hidden the entire class and left nothing in its place. Upgrading Unity is also a nightmare as the project has a fit trying to figure out what the broken component is.

Ideally I would like the component to be empty, but not report warnings or errors when referenced. When I looked at how my coworkers had implemented Steamworks.NET they had rewritten the SteamManager class to avoid this issue.

Eg:
`#if UNITY_ANDROID || UNITY_IOS || UNITY_TIZEN || UNITY_TVOS || UNITY_WEBGL || UNITY_WSA || UNITY_PS4 || UNITY_WII || UNITY_XBOXONE || UNITY_SWITCH || UNITY_EDITOR
#define DISABLESTEAMWORKS
#endif

#if !DISABLESTEAMWORKS

using UnityEngine;
using System.Collections;
using Steamworks;

... etc.

#else
// my coworker's addition
using UnityEngine;
public class SteamManager : MonoBehaviour {
	public static bool Initialized {get { return false;}}

}
#endif // !DISABLESTEAMWORKS
`

Please consider making the SteamManager a bit more conscientious.
@rlabrecque Hi, I'm looking for a Steamworks package version for Unity, but can't find one. So I fork this and modify it to a package. I would like to know if you are planning to do this so I needn't maintain the package by myself. Anyway, thanks for your sharing.
I originally though the implementation was built against an older version of the API, but it seems to be built against 1.46 but the call to invite to Remote Play Together (BSendRemotePlayTogetherInvite in ISteamRemotePlay) is missing. Is there an easy way to add it to the implementation myself or could the code be updated with this part of the API?

Sorry for closing and re-opening, I was a little to fast...