Hey @piotr-oles,

What do you think about releasing v4.0.0?  I've been testing with them in some projects of mine since Christmas and have had a great experience so far.

I think this could be ready to release!
eslint-loader has an option named `emitWarning` to make all errors warnings instead, to help during development so hot-updates etc. do not fail.
It would be great to allow setting this option in fork ts checker as well.
## Current behavior

Error in fork-ts-checker-webpack-plugin after an error occurs outside of fork-ts-checker-webpack-plugin. I had a legitimate error in my postcss config file, which was causing the build to bail early. When this happens, I get the following error.

```
/Users/jonathan/my-app/node_modules/fork-ts-checker-webpack-plugin/lib/index.js:459
            return this.serviceRpc.dispatch(message);
                                   ^
TypeError: Cannot read property 'dispatch' of undefined
    at ChildProcess.service.on.message (/Users/jonathan/my-app/node_modules/fork-ts-checker-webpack-plugin/lib/index.js:459:36)
    at ChildProcess.emit (events.js:189:13)
    at emit (internal/child_process.js:820:12)
    at process._tickCallback (internal/process/next_tick.js:63:19)
```

I'm not familiar with fork-ts-checker-webpack-plugin, but it appears a spawned service is receiving a message after shutting down.

## Expected behavior

Don't fail when a message is received after the service is killed.

## Steps to reproduce the issue

Forcing an error in postcss.config.js reproduces the error for me, but I imagine forcing an error in any other loader may also reproduce the error.

## Note

The fix likely entails adding a null check to [the `this.serviceRpc!.dispatch` call](https://github.com/TypeStrong/fork-ts-checker-webpack-plugin/blob/master/src/index.ts#L708), since the RPC provider dispatches in `promise.resolve` callbacks and doesn't appear to have a way to tear itself down.

## Environment
 - **fork-ts-checker-webpack-plugin**: 3.1.0
 - **typescript**: 3.6.4
 - **tslint**: 5.16.0
 - **webpack**: 4.30.0
 - **os**: macOS 10.15.1

## Current behavior
Sometimes when saving files quickly after another and possibly when many file watchers are active the ApiIncrementalChecker is outputing the previous Diagnostics.

## Expected behavior
Always use new diagnostics

## Steps to reproduce the issue
Change and save files with and without errors repeatedly causes it to randomly not displaying the error but old diagnostics.

## Possible solution
This might be a windows/os issue cause it's related to file watchers.
The reason is that webpack triggers a compile but the filewatcher of the CompilerHost didn't receive that change yet. Therefor the callback of the watched file is not triggered and no compilation happens. There is an if statement saying that if no compilation happened it's assumed to not be a related file to typescript therefore old diagnostics apply.

Possible solutions I can think of: Wait for a set time of ms until at least one change event happend (needs a timeout as unrelated files might have changed).

For tests I made a while loop around 
https://github.com/TypeStrong/fork-ts-checker-webpack-plugin/blob/04581f4a8cc999563e9ba1c63bfee7efb97e380f/src/CompilerHost.ts#L193-L209
until at least one "item.callback" is triggered or 100ms are over. That fixed the problem but I feel like it's not a good solution.

A better approach I can think of is passing the changed files from webpack to that fileWatchers list and call the "callback" as long as the filepath matches, but I'm not familiar with webpack plugins and it might be a bit hard to pass that data down to the service.

## Environment
 - **fork-ts-checker-webpack-plugin**: master
 - **typescript**: ^3.0.1
 - **tslint**: ^5.11.0
 - **webpack**: ^5.0.0-alpha.5
 - **os**: Windows 10

## Current behavior
![image](https://user-images.githubusercontent.com/991675/69349766-f5869e00-0c3d-11ea-86aa-4edeeba40d77.png)


## Expected behavior
Typings should be found by the editor.

## Steps to reproduce the issue
Add package and run `yarn install`

## Issue reproduction repository
None yet

## Environment
 - **fork-ts-checker-webpack-plugin**: 3.1.0
 - **typescript**: 3.7.2
 - **tslint**: 5.14.0
 - **webpack**: 4.29.0
 - **os**: Windows

## Current behavior
My webpack build gets to 95%, and after it emits 'fork-ts-checker-webpack-plugin' the build fails. Although the command exits with status 0, like a success, no build artefacts are generated. With the webpack logs, I see that it only ever gets to 95%, at this step.

```sh
yarn build
yarn run v1.19.1
$ node ./scripts/build_client.js
Ready to start the build.

Creating an optimized production build...
0 'compiling'
0.1 'building' '0/0 modules' '0 active' ''
0.1 'building' '0/1 modules' '1 active' 'multi /home/circleci/project/src/index.tsx'
0.10120000000000001 'building' '1/1 modules' '0 active' ''
...
0.930392156862745 'after chunk asset optimization' 'SourceMapDevToolPlugin'
0.9352941176470588 'asset optimization'
0.9401960784313725 'after asset optimization'
0.9450980392156862 'after seal'
0.95 'emitting'
0.95 'emitting' '@loadable/webpack-plugin'
0.95 'emitting' 'HtmlWebpackPlugin'
0.95 'emitting' 'GenerateSW'
0.95 'emitting' 'fork-ts-checker-webpack-plugin'
 
```

This is the end of the logs, no artefacts are outputted. That is the `build` folder is empty.

## Expected behaviour
The build continues to 100% and the artefacts are outputted.

## Steps to reproduce the issue
I am using a forked version of CRA, but I just run `yarn build` and get this situation.

Here is a sample from my config. [Full config is here](https://hastebin.com/cehagitawe.js).

```js
const ForkTsCheckerWebpackPlugin = require("react-dev-utils/ForkTsCheckerWebpackPlugin");

new ForkTsCheckerWebpackPlugin({
  typescript: resolve.sync("typescript", {
    basedir: paths.appNodeModules
  }),
  async: isEnvDevelopment,
  useTypescriptIncrementalApi: true,
  checkSyntacticErrors: true,
  resolveModuleNameModule: process.versions.pnp
    ? `${__dirname}/pnpTs.js`
    : undefined,
  resolveTypeReferenceDirectiveModule: process.versions.pnp
    ? `${__dirname}/pnpTs.js`
    : undefined,
  tsconfig: paths.appTsConfig,
  reportFiles: [
    "**",
    "!**/__tests__/**",
    "!**/?(*.)(spec|test).*",
    "!**/src/setupProxy.*",
    "!**/src/setupTests.*"
  ],
  watch: [paths.appServer, paths.appSrc],
  silent: true,
  // The formatter is invoked directly in WebpackDevServerUtils during development
  formatter: isEnvProduction ? typescriptFormatter : undefined
});

```

## Environment
 - **fork-ts-checker-webpack-plugin**: react-dev-utils/ForkTsCheckerWebpackPlugin ("react-dev-utils": "^9.0.1",)
 - **typescript**: "typescript": "3.4.5",
 - **webpack**: "webpack": "4.29.6",
 - **os**: circleci

Now that the plugin itself supports ESLint, we should probably migrate to linting the project itself with ESLint instead of TypeScript.

This will probably help:

https://github.com/typescript-eslint/tslint-to-eslint-config
## Feature motivation
Compatibility with nativescript-vue. It uses nativescript-vue-template-compiler instead of vue-template-compiler

## Feature description
Allow to set ```{ vue: {compiler: 'nativescript-vue-template-compiler'}}``` instead of ```vue: true```
To be compatible with nativescript-vue based projects.

## Feature implementation
We need to fix types for vue option from ```boolean``` to ```boolean | { compiler: string }```
Pass vue options to VueProgram.ts if they are available, then update ```require('vue-template-compiler')``` and error message in catch block.

This PR adds a quiet option so that warnings get suppressed in the output.

I definitely would like feedback on if this was the right approach. But also, when I went to write an integration test for this, I couldn't get it working correctly. when incrementalTypsciptApi is on, i get warnings like: 

```
{
   rawMessage: '\u001b[1m\u001b[31mERROR in \u001b[39m\u001b[22m\u001b[
1m\u001b[36mundefined(undefined,undefined)\u001b[39m\u001b[22m\u001b[1m\u001b[
31m:\u001b[39m\u001b[22m\n' +
    "\u001b[90mTS5055: \u001b[39mCannot write file '/test-context/src/lib/otherFunc.js' because it would overwrite input file.",
  message: '\u001b[1m\u001b[31mERROR in \u001b[39m\u001b[22m\u001b[1m\u001b[36mundefined(undefined,undefined)\u001b[39m\u001b[22m\u001b[1m\u001b[31m:\u001b[39m\u001b[22m\n' +
    "\u001b[90mTS5055: \u001b[39mCannot write file '/test-context/src/lib/otherFunc.js' because it would overwrite input file.",
  location: { line: undefined, character: undefined },
  file: undefined
}
```
