I have an older vs 2015 project that I'm trying to get up to 2017 or 2019 and running into all sorts of problems in the migration process.  I found this tool and was hopeful, but both the 2017 and 2019 versions are giving me the same message, that the project is unsupported.

[14:19:19 WRN] Unsupported project[XXXXX] type {8BB2217D-0F2D-49D1-97BC-3654ED321F3B}
[14:19:19 INF] No projects have been found to match your criteria.

It is an older .NET Core 1.1 ASP.NET project.  Is there a particular reason it is not supported?  Can you think of any other options?  VS2017 itself fails to migrate it because dotnet-migrate is no longer around.

Kind of at a loss right now.
We have a nuspec file that contains this:
```    
<dependencies>
      <dependency id="dotnet4.7.1" />
      <dependency id="vfpoledb" version="1.0.0" />
      <dependency id="vcredist2017" />
    </dependencies>
```

The lack of `version` attributes seems to be causing a null ref exception.
```
~\Projects\AMS.Eclipse.Agent > dotnet migrate-2019 migrate
[11:06:17 INF] Reading package info from nuspec C:\Users\jbuedel\Projects\EclipsePro-Design\src\AMS.Eclipse.Agent\eclipse-agent.nuspec.
[11:06:17 ERR] Project C:\Users\jbuedel\Projects\EclipsePro-Design\src\AMS.Eclipse.Agent\AMS.Eclipse.Agent.csproj parsing has thrown an exception, skipping...
System.NullReferenceException: Object reference not set to an instance of an object.
   at void Project2015To2017.Transforms.NuGetPackageTransformation.ConstrainPackageReferences(IReadOnlyList<PackageReference> rawPackageReferences, PackageConfiguration packageConfig)+(XElement dependency) => { } in C:/projects/csprojtovs2017/Project2015To2017.Core/Transforms/NuGetPackageTransformation.cs:line 34
   at TResult[] System.Linq.Enumerable+SelectListIterator<TSource, TResult>.ToArray()
   at TSource[] System.Linq.Enumerable.ToArray<TSource>(IEnumerable<TSource> source)
   at void Project2015To2017.Transforms.NuGetPackageTransformation.ConstrainPackageReferences(IReadOnlyList<PackageReference> rawPackageReferences, PackageConfiguration packageConfig) in C:/projects/csprojtovs2017/Project2015To2017.Core/Transforms/NuGetPackageTransformation.cs:line 34
   at void Project2015To2017.Transforms.NuGetPackageTransformation.Transform(Project definition) in C:/projects/csprojtovs2017/Project2015To2017.Core/Transforms/NuGetPackageTransformation.cs:line 19
   at Project Project2015To2017.ProjectConverter.ProcessProjectFile(FileInfo file, Solution solution, ProjectReference reference) in C:/projects/csprojtovs2017/Project2015To2017.Core/ProjectConverter.cs:line 94
   at (IReadOnlyCollection<Project> projects, IReadOnlyCollection<Solution> solutions) Project2015To2017.MigrationFacility.ParseProjects(IEnumerable<string> items, ITransformationSet transformationSet, ConversionOptions conversionOptions)+ProcessSingleItem(FileInfo file, string extension) in C:/projects/csprojtovs2017/Project2015To2017/MigrationFacility.cs:line 160
```

While the specs [0] do say that a `version` attribute is required, this .nuspec is used to create a chocolatey package, and I guess chocolatey isn't so strict.

I get it if you don't care to support a non-standard file format. However it would be nice if the tool gave a better message as to the problem.

[0] https://docs.microsoft.com/en-us/nuget/reference/nuspec#dependencies-element

The generated project reference dll files and it's supposed to reference the nuget package

so instead of any dll file  which is defined in HintPath:

```
<ItemGroup>
    <Reference Include="Autofac, Version=4.2.1.0, Culture=neutral, PublicKeyToken=17863af14b0044da, processorArchitecture=MSIL">
      <HintPath>..\..\..\packages\Autofac.4.2.1\lib\net45\Autofac.dll</HintPath>
      <Private>True</Private>
    </Reference>
    <Reference Include="System.Data.DataSetExtensions" />
    <Reference Include="Microsoft.CSharp" />
    <Reference Include="System.Net.Http" />
  </ItemGroup>
  <ItemGroup>
    <ProjectReference Include="..\..\Autofac.Extras.Plugins\Autofac.Extras.Plugins.csproj" />
  </ItemGroup>
  ```
  
 It should be:
  
  ```
  <ItemGroup>
    <PackageReference Include="Autofac" Version="4.2.1" />
    <PackageReference Include="Autofac.Extras.Plugins" Version="1.0.0" />
  </ItemGroup>
  ```
 These packages are defined in the file: Packages.config.

 Also, these Assemblies are reference by default in the project, so no need to reference it:
 
 ``` 
System
System.Core
System.Data
System.Drawing
System.Io.Compression.FileSystem
System.Numerics
System.RunTime.Serialization
System.Xml
System.Xml.Linq
```

First of all THANK YOU for this useful tool. Great job!

In my old csproj file I have all cs files to compile specified. When I migrate csproj to new format all cs files disappear and new implicit logic to include cs files to project is used. Is it possible to leave all cs files in csproj for new format as well? Couldn't find any related issue to this one.

Thanks.
Hi there, i just tried to create my own tool based on `Project2015To2017.Migrate2019.Library` as the readme describes.
Sadly `dotnet add package Project2015To2017.Migrate2019.Library` fails because that package does not exist on nuget.org.
Did i miss something or is it just not available there?
If it's not available there could you publish it there?

And thanks for this great tool/library!
When upgrading or cleaning up csproj files that have inline PrivateAssets attributes on PackageReference items, the attributes are incorrectly removed.

Example:
`<PackageReference Include="Microsoft.CodeAnalysis.FxCopAnalyzers" Version="2.9.6" PrivateAssets="All" />`

becomes:
`<PackageReference Include="Microsoft.CodeAnalysis.FxCopAnalyzers" Version="2.9.6" />`

I am not sure if this occurs with any other inline attributes, but all attributes should be preserved on upgrade.
Thank you for the tool, it makes a great job.

Could you migrate the PreBuildEvent and PostBuildEvent too? Because without changes no macros like e.g. $(ProjectDir) are replaced anymore. But if you would convert them into tasks then they are replaced again.  

e.g.
Old:
```
<PropertyGroup>
     <PreBuildEvent>"$(ProjectDir)PreBuildEvent.bat" "$(ProjectDir)..\" "$(ProjectDir)" "$(TargetDir)" 0 />
</PropertyGroup>
```
New:
```
<Target Name="PreBuild" BeforeTargets="PreBuildEvent">
   <Exec Command="&quot;$(ProjectDir)PreBuildEvent.bat&quot; &quot;$(ProjectDir)..\&quot; &quot;$(ProjectDir)&quot; &quot;$(TargetDir)&quot; &quot;$(DevEnvDir)&quot; 0" />
</Target>
```

Details can be found  https://github.com/dotnet/project-system/issues/1569

Thank you and best regards
Helmut
Version used: 4.1.2

How to reproduce:
- Install https://github.com/tom-englert/ProjectMigrationHelper (optional)
- Open https://github.com/tom-englert/ResXResourceManager sources in Visual Studio
- Create a fingerprint "before" with ProjectMigrationHelper (optional)
- Convert ResXResourceManager projects using ```dotnet migrate-2019 wizard```
- Create a fingerprint "after" with ProjectMigrationHelper (optional)
- Compare fingerprints (optional, or manually find the changes)

=> File nesting is lost, item properties like ```CustomTool``` are lost.

Root causes:
1.
```xml
    <None Include="Properties\Settings.settings">
      <Generator>PublicSettingsSingleFileGenerator</Generator>
      <LastGenOutput>Settings.Designer.cs</LastGenOutput>
    </None>
    <Compile Include="Properties\Settings.Designer.cs">
      <AutoGen>True</AutoGen>
      <DependentUpon>Settings.settings</DependentUpon>
      <DesignTimeSharedInput>True</DesignTimeSharedInput>
    </Compile>
```
has been removed at all, but should have been replaced with
```xml
    <None Update="Properties\Settings.settings">
      <Generator>PublicSettingsSingleFileGenerator</Generator>
      <LastGenOutput>Settings.Designer.cs</LastGenOutput>
    </None>
    <Compile Update="Properties\Settings.Designer.cs">
      <AutoGen>True</AutoGen>
      <DependentUpon>Settings.settings</DependentUpon>
      <DesignTimeSharedInput>True</DesignTimeSharedInput>
    </Compile>
```
2.
```xml
    <None Include="Properties\Resources.Designer.tt">
      <Generator>TextTemplatingFileGenerator</Generator>
      <DependentUpon>Resources.resx</DependentUpon>
      <LastGenOutput>Resources.Designer.cs</LastGenOutput>
    </None>
```
has been left unchanged, but should have been replaced with
```xml
    <None Update="Properties\Resources.Designer.tt">
      <Generator>TextTemplatingFileGenerator</Generator>
      <DependentUpon>Resources.resx</DependentUpon>
      <LastGenOutput>Resources.Designer.cs</LastGenOutput>
    </None>
```

Generally any item with properties should not be removed, but changed from ```Include``` to ```Update```
After installing and attempting to run,  I'm consistently getting...
"Specify which project file to use because this 'D:\ATLASSVN\Common\source\Utilities\Utilities' contains more than one project file."

My command line is: _dotnet migrate-2019 wizard "Utilities.csproj"_

The directory actually only contains one .csproj file.   I've attached my .csproj file and a screenshot of my command window.

If there anything I'm obviously doing wrong?


[Utilities.csproj.zip](https://github.com/hvanbakel/CsprojToVs2017/files/3628713/Utilities.csproj.zip)


![2019-09-19 11_12_24-Common- Microsoft Visual Studio (Administrator)](https://user-images.githubusercontent.com/5687119/65193459-54f5ef80-dacf-11e9-8d3c-6dffd1bd709b.png)

For really large projects, it's very difficult to understand where an error is emanating from.  Below is sample output from running the tool with a sln file with 31 projects:

> [14:46:21 WRN] Unsupported project[WixInstallerSetup(2.0.0)] type {930C7802-8A8C-48F9-8165-68863BCCD9DD}
> [14:46:21 WRN] Could not read assembly information, multiple files found:
> ..\GlobalAssemblyInfo.cs, Properties\AssemblyInfo.cs
> [14:46:21 WRN] Could not read assembly information, multiple files found:
> ..\GlobalAssemblyInfo.cs, Properties\AssemblyInfo.cs
> [14:46:21 WRN] Could not read assembly information, multiple files found:
> ..\GlobalAssemblyInfo.cs, Properties\AssemblyInfo.cs
> [14:46:21 WRN] Could not read assembly information, multiple files found:
> ..\GlobalAssemblyInfo.cs, Properties\AssemblyInfo.cs
> [14:46:21 WRN] Could not read assembly information, multiple files found:
> ..\GlobalAssemblyInfo.cs, Properties\AssemblyInfo.cs
> [14:46:21 WRN] Could not read assembly information, multiple files found:
> Properties\GlobalAssemblyInfo.cs, Properties\AssemblyInfo.cs
> [14:46:21 WRN] Could not read assembly information, multiple files found:
> ..\GlobalAssemblyInfo.cs, Properties\AssemblyInfo.cs
> [14:46:21 WRN] Could not read assembly information, multiple files found:
> ..\GlobalAssemblyInfo.cs, Properties\AssemblyInfo.cs
> [14:46:21 WRN] Could not read assembly information, multiple files found:
> ..\GlobalAssemblyInfo.cs, Properties\AssemblyInfo.cs
> [14:46:21 WRN] Could not read assembly information, multiple files found:
> ..\GlobalAssemblyInfo.cs, Properties\AssemblyInfo.cs
> [14:46:21 WRN] Could not read assembly information, multiple files found:
> ..\GlobalAssemblyInfo.cs, Properties\AssemblyInfo.cs
> [14:46:21 WRN] Could not read assembly information, multiple files found:
> ..\GlobalAssemblyInfo.cs, Properties\AssemblyInfo.cs
> [14:46:21 WRN] Could not read assembly information, multiple files found:
> Properties\GlobalAssemblyInfo.cs, Properties\AssemblyInfo.cs
> [14:46:21 WRN] Could not read assembly information, multiple files found:
> ..\GlobalAssemblyInfo.cs, Properties\AssemblyInfo.cs
> [14:46:21 WRN] Could not read assembly information, multiple files found:
> ..\GlobalAssemblyInfo.cs, Properties\AssemblyInfo.cs
> [14:46:21 WRN] Could not read assembly information, multiple files found:
> ..\GlobalAssemblyInfo.cs, Properties\AssemblyInfo.cs
> [14:46:21 WRN] Could not read assembly information, multiple files found:
> ..\GlobalAssemblyInfo.cs, Properties\AssemblyInfo.cs
> [14:46:21 WRN] Could not read assembly information, multiple files found:
> ..\GlobalAssemblyInfo.cs, Properties\AssemblyInfo.cs
> [14:46:21 WRN] Could not read assembly information, multiple files found:
> ..\GlobalAssemblyInfo.cs, Properties\AssemblyInfo.cs
> [14:46:21 WRN] Could not read assembly information, multiple files found:
> ..\GlobalAssemblyInfo.cs, Properties\AssemblyInfo.cs
> [14:46:21 WRN] Could not read assembly information, multiple files found:
> ..\GlobalAssemblyInfo.cs, Properties\AssemblyInfo.cs
> [14:46:21 WRN] Could not read assembly information, multiple files found:
> ..\GlobalAssemblyInfo.cs, Properties\AssemblyInfo.cs
> [14:46:21 WRN] Could not read assembly information, multiple files found:
> ..\GlobalAssemblyInfo.cs, Properties\AssemblyInfo.cs
> [14:46:22 WRN] Could not read assembly information, multiple files found:
> ..\GlobalAssemblyInfo.cs, Properties\AssemblyInfo.cs
> [14:46:22 WRN] Could not read assembly information, multiple files found:
> ..\GlobalAssemblyInfo.cs, Properties\AssemblyInfo.cs
> [14:46:22 ERR] Entity framework was detected. We do not support conversion of these projects.
> [14:46:22 WRN] Could not read assembly information, multiple files found:
> ..\GlobalAssemblyInfo.cs, Properties\AssemblyInfo.cs
> [14:46:22 ERR] Entity framework was detected. We do not support conversion of these projects.
> [14:46:22 WRN] Could not read assembly information, multiple files found:
> ..\GlobalAssemblyInfo.cs, Properties\AssemblyInfo.cs
> [14:46:22 ERR] Entity framework was detected. We do not support conversion of these projects.
> [14:46:22 WRN] Could not read assembly information, multiple files found:
> ..\GlobalAssemblyInfo.cs, Properties\AssemblyInfo.cs
> [14:46:22 ERR] Entity framework was detected. We do not support conversion of these projects.
> [14:46:22 WRN] Could not read assembly information, multiple files found:
> ..\GlobalAssemblyInfo.cs, Properties\AssemblyInfo.cs
> [14:46:22 FTL] Access to the path 'C:\Users\john.zabroski\Application Data' is denied.

Here is an example where ILogger.LogWarning is difficult to read:

https://github.com/hvanbakel/CsprojToVs2017/blob/d7040f870e304e9191e878cdd1b440bc684d1a27/Project2015To2017.Core/Reading/AssemblyInfoReader.cs#L74-L75