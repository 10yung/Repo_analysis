I'd like to be able to replace each selection node according to a `func` which would change `Node` properties:

`Selection.ReplaceFunction(f func(Node) Node) *Selection`
## Problem
Goquery seems to fail with the `has` psudo-class and a direct child selector

## [From MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/:has)
>The following selector matches only <a> elements that directly contain an <img> child:
> `a:has(> img)`

## goquery implementation
```go
package main

import (
	"fmt"
	"strings"

	"github.com/PuerkitoBio/goquery"
)

func main() {
	html := `<html><a><img></img></a></html>`
	doc, _ := goquery.NewDocumentFromReader(strings.NewReader(html))
	fmt.Println(doc.Find("a:has(> img)").Length())
}
```
### Result
Results in 0, while it should be 1
### Playground
https://goplay.space/#BgCuFU-aVvr
Sometimes we shall find an element by id. In general, there is only one element which match a specific id. Is find first is more effecient for no need to  scan whole document? I use doc.Find(id).First to find the element now, is it correctly?
And, it is necessary to add method which can select element by xpath?
This creates a new function `parseHtmlWithContext`, which behaves just like `parseHtml` but takes an `*html.Node` as context.  

It also create a function `eachNodeHtml` which will iterate over each node in a selection, check to see if we have parsed html for this node type already, and if not, will call `parseHtmlWithContext` with either the current node, or it's parent, depending on whether you passed `parent` as `true` or `false`.

It also changes `AfterHtml`, `AppendHtml`, `BeforeHtml`, `PrependHtml`, `ReplaceWithHtml`, `SetHtml`, `WrapHtml`, `WrapAllHtml`, and `WrapInnerHtml` to use one or both of these functions.

New tests were added for all except the `WrapHtml*` functions - changing these functions may have been unncessary - I couldn't think of a way to test this - Go automatically wraps `tr` elements in `tbody`, so I can't wrap those, and I can't think of any other situation that this would occur in.
```
  //node is a sub html*node of doc
  // if ok return the select string such as `.sidebar-reviews article .content-block a`
   sel, ok :=  doc.FindSelector(node) 
```

Could this function be possible?
If I try to `Append("<th>New</th>")`, the 'th' tag is always dropped. Same for td, tr
Consider the following program:

```go
package main

import (
	"fmt"
	"strings"

	"github.com/PuerkitoBio/goquery"
)

const data = `<noscript><a href="http://example.org">click this link</a></noscript>`

func main() {
	d, err := goquery.NewDocumentFromReader(strings.NewReader(data))
	if err != nil {
		fmt.Println(err)
		return
	}
	a, ok := d.Find("noscript a").Attr("href")
	fmt.Printf("URL: '%s', %t\n", a, ok)
}
```

The expected output is:

    URL: 'http://example.org', true

But instead the output is:

    URL: '', false

Changing `noscript` to `div` in both the document and selector causes the expected output, so the problem seems to affect only `<noscript>` elements.