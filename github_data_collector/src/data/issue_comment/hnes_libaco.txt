
This PR is definitely nit-picking over user experience.

Adding build dependencies before build instructions allows the user to build it successfully on the first try.  There are instructions further on that reveal that those dependencies exist, but some people (like me) are impatient and jump right into building it without reading everything.

Thoughts?
This pull request introduces `aco_yield_to()` that enables a non-main co to yield to another co with a single context switch.

The first patch, namely **add aco_yield_to()**, seems a little complicated because part of the code of `aco_resume()` is moved to a new auxiliary function called `aco_own_stack()` to avoid duplicating code at `aco_yield_to()`. Ignoring this code movement, the additions are straightforward.

The second patch adds `test_aco_tutorial_7.c` to test and show how to use `aco_yield_to()`.

This pull request closes #31
In the case I'm considering using libaco, I'll have less than 20 standalone non-main coroutines and the cost to switch between the coroutines is critical. The current cost of 10ns for acosw() fits my application, but having to go through the main coroutine first to switch to another non-main coroutine puts the cost of switching at 20ns, what becomes too much for what I'm trying to accomplish.

Is it possible to have a version of aco_yield() that receives the coroutine to where to yield?
```
void common_entry() {
  call_fp() // call current coroutine's aco_cofuncp
  aco_exit()
}
```
Then the `cofuncp` can return like a normal function without calling `aco_exit`
hi, I am reading the code and have done some benchmark:
https://github.com/guangqianpeng/libaco/blob/master/bench_result
I have two questions: 
1. `tcmalloc` improves the benchmark results. With `aco_amount=1000000` and `copy_stack_size=56B`, the tcmalloc version achieves 37ns per `aco_resume()` operation but the default takes 66ns. Why? In this case, `aco_resume()` does not allocate memory, which is really confusing...
2. When copying stack, you use `%xmm` registers to optimize small memory copying. But according to my benchmark, this does not make many differences. I guess `memcpy()` already takes advantage of these registers. Do you have more benchmark results?

I will be very grateful to you for answering my questions :-)
To avoid being optimized by the compiler, the benchmark coroutines `co_fp_stksz_xx()` and `co_fp_alloca()` use `memset()` . However, it failed on my machine (Ubuntu 16.04, Linux 4.15, gcc 5.4). We can use the following method to correct the stack size:
```
void do_not_optimize(void* value) {
  asm volatile("" : : "r,m"(value) : "memory");
}
```
```
void co_fp_stksz_128() {
    int ip[28];
    do_not_optimize(ip);
    // memset(ip, 1, sizeof(ip));
    while(1){
        aco_yield();
    }
    aco_exit();
}
```
Hello, I'm so sorry, but I'm really interested in this library, but I don't quite understand from the diagrams what is going on.

Do you think we can work together to improve the documentation? My naivety might help to improve the documentation as I can point out what I don't understand and perhaps make a PR with improved documentation.

In the first instance, I don't understand how this differs from normal stackful coroutines (fibres). To me, it looks like you are storing the registers in a private area, but then sharing a single stack between multiple coroutines. Does this mean stack is trashed when switching between coroutines? i.e. local variables can't be used. Is this an implementation of stackless coroutine?
https://github.com/hnes/libaco/blob/c941da6bb94a3800bf014722b7a248795f2b7ee2/acosw.S#L65
按照我的理解，这一行之前的: lea     ecx,[esp+0x4]               // esp， 通过将栈顶指针暂时保存在ecx中是作为一个定点的作用吧，因为前面注释里已经说了，signal可能改变栈顶指针esp的值，那这一行又用esp本身地址+8的方式取得to_co的地址，那万一在这之前esp的值由于signal改变了，那此时ecx里保存的值就不是to_co的地址了吧，不知道我这样配合你上面的注释理解得对不对。探讨一下...
I followed your coding convention, but I think that lowercase macros are evil because it confuses newcomers, [uppercase macros are convention](https://en.wikipedia.org/wiki/Naming_convention_(programming)#C_and_C++).

I took the freedom to add a new macro `aco_mem_calloc` which you can read more details in the commit.

Also I want to point out that this commit "breaks" C++ support, which was already broken by `_Static_assert`, because using `malloc` in C++ is a **really bad** habit and there is no support for `typeof` of something similar in C++.

Issue #3.