This modifier returns the current element as-is and can be used
to retrieve the JSON document itself. It is equivalent to the `#/` JSON Pointer.

Closes #149
The JSON Pointer specification allows to retrieve the root value of a JSON document using the pointer `#/`. I was unable to figure out how to do that with GJSON paths. Is this currently possible?

I've tried several approaches but was unable to get the root element (I know that this is `jj` and not `gjson` but since one uses the other I assume that the inputs would return the same output for gjson too):

```
% echo '{"name":{"first":"Tom","last":"Smith"}}' | jj '.'

% echo '{"name":{"first":"Tom","last":"Smith"}}' | jj '' 

% echo '{"name":{"first":"Tom","last":"Smith"}}' | jj '*'     
{"first":"Tom","last":"Smith"}
```

I was unable to figure this out using the docs, but maybe I missed it.
Hello.

Let's assume I have the following JSON:
```
"192.168.1.1:25"
```
This is a plain string which is a valid JSON

What path should I use for gjson.Get() to get exactly the same string as result?
In the example given
```go
name := gjson.Get(json, `programmers.#(lastName="Hunter").firstName`)
println(name.String())  // prints "Elliotte"`
```
to grab a value from a nested array, how can a parameter from a function be used? i.e. instead of "Hunter", use any lastName to return the firstName.

So far I have been unsuccessful :) I've been thinking of something like this:
```go
func getFirstName (lName string) string {
    input, err := ioutil.ReadFile(jsonFile)
    if err != nil {
        fmt.Println(err)
    }
    jsonLookup := string(input)
    fName := gjson.Get(jsonLookup, `programmers.#(lastName="lName").firstName`)
    return (fName.String())
}
```