https://github.com/zipme/RQShineLabel/blob/master/Classes/RQShineLabel.m#L149

I guess it's
```objectivec
self.endTime = self.beginTime + duration;
```
instead of 
```objectivec
self.endTime = self.beginTime + self.shineDuration;
```
Just wanted to put it out there in case anyone needs it. Here is a swift controller, and changes the text itself with a timer.

//
//  IntroViewController.swift
//
//  Created by Jason wang on 8/16/17.
//

import Foundation
import UIKit
import RQShineLabel
import Parse

class IntroViewController: UIViewController {
    var shineLabel = RQShineLabel()
    var timer = Timer()
    var textArray = ["111", "222", "333"]
    var currentCount = 0
    
    override func viewDidAppear(_ animated: Bool) {
        super.viewDidAppear(animated)
        
        self.shineLabel.shine()
    }
    
    var background1 = UIImageView()
    var background2 = UIImageView()
    
    override func viewDidLoad() {
        super.viewDidLoad()
        
        background1 = UIImageView(image: UIImage(named: "IntroBackground1")!)
        background1.contentMode = .scaleAspectFill
        background1.frame = self.view.bounds
        self.view.addSubview(background1)
        
        background2 = UIImageView(image: UIImage(named: "IntroBackground2")!)
        background2.contentMode = .scaleAspectFill
        background2.frame = self.view.bounds
        background2.alpha = 0
        self.view.addSubview(background2)
        
        self.shineLabel = RQShineLabel(frame: CGRect(x: 16, y: 16, width: 298, height: 300))
        self.shineLabel.numberOfLines = 0;
        self.shineLabel.text = "Welcome to my app"
        self.shineLabel.backgroundColor = UIColor.clear
        self.shineLabel.font = UIFont(name: "HelveticaNeue-Light", size: 18.0)
        self.shineLabel.center = self.view.center;
        self.view.addSubview(self.shineLabel)
        
        scheduledTimerWithTimeInterval()

        self.view.bringSubview(toFront: self.logo)
        self.view.bringSubview(toFront: self.loginView)
    }

    func scheduledTimerWithTimeInterval(){
        // Scheduling timer to Call the function "updateCounting" with the interval of 1 seconds
        timer = Timer.scheduledTimer(timeInterval: 8, target: self, selector: #selector(self.updateCounting), userInfo: nil, repeats: true)
    }
    
    func updateCounting(){
        if (self.shineLabel.isVisible) {
            self.shineLabel.fadeOut(completion: {
                let textIndex = self.currentCount % self.textArray.count
                let text = self.textArray[textIndex]
                self.shineLabel.text = text
                self.currentCount += 1
                UIView.animate(withDuration: 2.5, animations: {
                    if (self.background1.alpha > 0.1) {
                        self.background1.alpha = 0;
                        self.background2.alpha = 1;
                    }
                    else {
                        self.background1.alpha = 1;
                        self.background2.alpha = 0;
                    }
                })
                self.shineLabel.shine()
            })
        } else {
            self.shineLabel.shine()
        }
        
    }
}
Hello i want repeat this animation while calling an API. But it's not happening. Please suggest, how to handle it
I have tried to change the `_fadeoutDuration` from 2.5s to another value, but it doesn't work
I find that you made mistake in this function,

```
- (void)startAnimationWithDuration:(CFTimeInterval)duration
{
  self.beginTime = CACurrentMediaTime();
  self.endTime = self.beginTime + self.shineDuration;
  self.displaylink.paused = NO;
}
```

Maybe you should add `duration` rather than `self.shineDuration`
I fixed it but another bug happen, and I fixed it finally with inserting these code below into your `updateAttributedString`

```
  if (now > self.endTime) {
    self.displaylink.paused = YES;

      for (NSUInteger i = 0; i < self.attributedString.length; i++) {
          self.characterAnimationDelays[i] = @(arc4random_uniform(self.fadeoutDuration / 2 * 100) / 100.0);
          CGFloat remain = self.fadeoutDuration - [self.characterAnimationDelays[i] floatValue];
          self.characterAnimationDurations[i] = @(arc4random_uniform(remain * 100) / 100.0);
      }

    if (self.completion) {
      self.completion();
    }
```

You use `self.shineDuration` in `setAttributedText`, it will affect the fadeoutAnimation, I add those code to update `characterAnimationDurations` to get the right fadeoutAnimation. Need pull request? Hope you can understand my Chiglish  :ï¼‰

I need to repeat the shine when the user touch on a UIButton.  There is a way to reset the label to the initial state and then call the shine again?

Hi, I'd like to ask you how can I use this component with Swift? I'm not familiar with Objective C at all.

Especially lines:
  self.shineLabel = [[RQShineLabel alloc] initWithFrame:CGRectMake(16, 16, 298, 300)];
and 
  [self.shineLabel shine];

Thank you

Edit:

Sorry with stupid question. Here is my solution:
Ad.1  self.shineLabel = RQShineLabel(frame: CGRectMake(16, 16, 298, 300))
Ad.2  self.shineLabel.shine()

when you add this label in the controller, and push out then push back, loop this operation, the memory will rise up , what I should do at this time?

can it be done with a uitextview?

When the label is loading all of the text is compressed onto one line whilst animating, will then appear normal after animation completed.
