Update Ruby, JRuby, Rails versions
I have been struggling with this for a little bit.  My entity model that I have is as follows

```
Deal
  --> Retailer
    --> Categories
    --> Brands
```

In the deal index I would like to be able to include the Retailer and the retailer categories and brands.

I have tried the following
```
  settings do
      indexes :retailer, type: 'object' do
        indexes :name, type: :text
        indexes :categories, type: 'object' do
          indexes :name, type: :text
        end
      end
end
```
And while this does show the hierarchy in the correct structure in the resulting Index, which I can confirm in Kibana.  It will only populate the Retailer, but never populates the category.

I also have a `as_indexed_json` method which looks as follows:
This is the original variant
```
  def as_indexed_json(options = {})
    self.as_json(
        include: {
            retailer: {only: [:name]}
        },
        methods: [])
  end
```

I have tried this variant:
```
  def as_indexed_json(options = {})
    self.as_json(
        include: {
            retailer: {only: [:name, :categories]}
        },
        methods: [])
  end
```

The end result for both of these is that Kibana recognizes the index pattern, but the `retailer.categories` always has no data.

Any ideas would be greatly appreciated.

Thank you,

-John




In production, we can't search in multiple models. it works fine locally. 

`Elasticsearch version v7.4.2`

```ruby
    search_payload = {
      query: {
        bool: {
          must: [
            {
              multi_match: {
                query: params[:search].to_s.downcase
              }
            }
          ],
          must_not: {
            exists: {
              field: 'deleted_at'
            }
          },
          filter: [
            {
              term: {
                user_: user_shop.id,
              }
            }
          ]
        }
      },
      size: 7
    }

records = Elasticsearch::Model.search(search_payload, [Order, Product]).records
records.json
```

```
NoMethodError: undefined method `find' for nil:NilClass
from /usr/local/bundle/gems/elasticsearch-model-7.0.0/lib/elasticsearch/model/adapters/multiple.rb:79:in `__records_for_klass'
```
I see the example for defining settings and mapping for an index/model in the README of https://github.com/elastic/elasticsearch-rails/tree/master/elasticsearch-model:

```ruby
class Article
  settings index: { number_of_shards: 1 } do
    mappings dynamic: 'false' do
      indexes :title, analyzer: 'english', index_options: 'offsets'
    end
  end
end
```

However, I could not find a documentation for `settings` and `mapping`. This got me quite confused. For example, there is no easy way to tell that:

- The `dynamic` value has to be a String and not a boolean
- The `indexes` method allows a block to create nested structures

It is also not shown in the documentation:

- Simple examples for `mapping` class method: https://rubydoc.info/gems/elasticsearch-model/Elasticsearch/Model/Indexing/ClassMethods:mapping
- General overview of the `mapping` structure defines `indexes` but there is no documentation

Would it make sense to at least expand the examples to show how the `indexes` method can be used?
I am using cancancan for authorizations in my rails app. In this code, the ES query returns some records that I already now I am allowed to visualize. I was scratching my head because cancancan always returned false when running the can? method. 

`records = Elasticsearch::Model.search(query, models).records.records
records = records.select{|r| can?(:show, r)}`

Then I noticed that if I have a model 'Test' and run `records.first.class == Test` it returns false!
I think this is the issue that is causing cancancan to always return false

### ability.rb
`can [:show] Test`

I called .to_s.constantize in Elasticsearch::Model::Adapter::Multiple::Records__type_for_hit and fixed it.

Does anyone think this can be considered a bug?

The mongoid integration has the same sorting bug as documented in #546 and others. The records. I'm using elasticsearch-model 7.0.

I have a field in my mapping called `score` (separate from the elasticsearch `_score`). I'm running a search query like this:

```ruby
def do_search
  search(
    query: {
      bool: {
        must: [
          {term: {account_id: '123'}}
        ]
      }
    },
    sort: [ {score: order: 'desc'}} ]
  )

end
```

I've confirmed that the results come back in the proper order from elasticsearch by visually inspecting the results like this: `Model.search.map(&:score)`. However, when I call `.records` on the results, the scores get jumbled, and I have to re-sort them manually in ruby.

I see that there's some code trying to solve this here, because mongoid doesn't return results in id order: https://github.com/elastic/elasticsearch-rails/blob/v7.0.0/elasticsearch-model/lib/elasticsearch/model/adapters/mongoid.rb#L40.

It looks like you can call a mongoid scope method like `order(sort: :desc)` on the object records returns to get the proper order, but the `.to_a` method doesn't seem to be working for some reason.
I'm using elasticsearch to search my records by name using this query:
`{
  "query": {
    "bool": {
      "must": [
        {
          "query_string": {
            "query": "*Pa*",
            "fields": [
              "name"
            ]
          }
        }
      ]
    }
  },
  "filter": {
    "and": [
      {
        "term": {
          "privacy": "world"
        }
      }
    ]
  }
}`


Using rails, when I get the result from elasticsearch, I'm using records method & get the corresponding records in an ActiveRelation, whenever I'm applying order to this relation, it ignores it completely, although the same query generated, when used in PostgreSQL, it gives the correct results.


This is the query:
`SELECT  "branches".* FROM "branches" WHERE ("branches"."id" NOT IN (4438, 185, 122, 188, 2387, 172, 206, 209, 2386, 182, 222, 109, 193, 150, 192, 181, 117)) AND "branches"."id" IN (145, 206, 222, 1035, 1594, 2455, 2505, 2521, 2653, 3168)  ORDER BY point(location[1], location[0]) <@> point(30.01667, -19.01667) asc LIMIT 20 OFFSET 0
`
I'm trying to order the branches by nearest to the point given.

Now from what I understand from this issue #546 , there's a bug related to this & it's been fixed but I can't update the version I'm using currently.  
I have a simple model and a search query that is returning results sorted correctly.

`Model.search("search").records` <- sorted correctly

How do I then use ActiveRecord `select()` to only pull certain fields on the model records returned? An Elasticsearch response records enumerator doesn't respond to the `select()` method that a normal ActiveRecord::Relation would. 

I see that I can do `Model.search("search").records.records.select('some_field')` to select the fields correctly because the 2nd `.records` is an ActiveRecord::Relation but....

`Model.search("search").records.records` <-- not sorted correctly!
 
Is there some other way of approaching this that I am missing or is it just not appropriate to select less than the full list of fields when returning sorted records via an ES search?
The following error appears when upgrading from 6.0.0 to 6.1.0, and disappears when reverting to 6.0.0.

```
/.rvm/gems/elasticsearch-model-6.1.0/lib/elasticsearch/model/proxy.rb:96:in `method_missing': undefined method `model_name' for [PROXY] ContactSearchIndex:Elasticsearch::Model::Proxy::ClassMethodsProxy (NoMethodError)
	from /.rvm/gems/elasticsearch-model-6.1.0/lib/elasticsearch/model/naming.rb:96:in `default_index_name'
	from /.rvm/gems/elasticsearch-model-6.1.0/lib/elasticsearch/model/naming.rb:92:in `implicit'
	from /.rvm/gems/elasticsearch-model-6.1.0/lib/elasticsearch/model/naming.rb:39:in `index_name'
	from /.rvm/gems/elasticsearch-model-6.1.0/lib/elasticsearch/model/indexing.rb:225:in `create_index!'
```