This should probably be merged into all branches.
Base classes are set to be removed in 2.0, they have been deprecated in 1.2. 

- [ ] Remove `_init()` usage, where tests rely on skipping the initialization phase, change classes to accept an alternative less-generically named option to skip certain parts of the initialization phase. The `_init()` class methods will than need to be merged into the constructor.
- [ ] Classes which rely on auto configuration currently present in the base class' `_init()` 
should make use of `AutoConfigurable` instead. 
- [ ] Have the classes that were one level above the old base classes, set `$_config`
- [ ] Stop classes from extending deprecated base classes
- [ ] Ensure all unit tests are green
- [ ] Ensure all integration tests are green

The `_init` removal is being worked upon in the `init-removal` branch.

with branch 2.0 I get:
"PHP message: PHP Fatal error:  Trait 'lithium\core\MergeInheritable' not found in /var/www/bestellsystem/libraries/lithium/action/Controller.php on line 46"

I cannot make sense out of that. Because MergeInheritable.php exists.
In case of Couchdb 2.3 the method:
$this->connection->{$method}($path, $data, $options); in https://github.com/UnionOfRAD/lithium/blob/bec3f4fdf61ea5002904754f43941ad1430ecec7/data/source/http/adapter/CouchDb.php#L122 is an array instead of string..

This breaks the logic inside of the describe function.


How do I set the "base" component of the environment, so that generated URLs are prefixed accordingly?

Consider the following use case:
- A website at example.com (non lithium app)
- Lithium app at portal.example.com
- In the apache vhost settings of example.com, requests to example.com/portal maps to portal.example.com:
````
ProxyRequests On
ProxyPass /portal/ http://portal.example.com/
ProxyPassReverse /portal/ http://portal.example.com/
ProxyPass /portal http://portal.example.com
ProxyPassReverse /portal http://portal.example.com
````

Now, when accessing example.com/portal, portal.example.com is served, but front-end assets are attempted to be loaded as:
````
/css/stylesheets.css
/js/scripts.js
````
Which result in 404s since they don't exist at the root folder of example.com.

I want to set the "base" such that assets, paths, and URLs are properly prefixed with /portal/
````
/portal/css/stylesheets.css
/portal/js/scripts.js
````

In the case where multiple types are registered to `lithium\net\http\Media` with the same content type, even when distinguished by `conditions`, an instance of `lithium\action\Request` will fail to determine the correct type to use to decode the request body. For example, if we register another type which uses 'application/json' as a content type like this:

```php
use lithium\net\http\Media;

Media::type('json_base64', ['application/json'], [
    'encode' => function ($data) {
        return base64_encode(json_encode($data));
    },
    'decode' => function ($data) {
        return json_decode(base64_decode($data), true);
    },
    'cast' => true,
    'conditions' => [
        'http:content_transfer_encoding' => 'base64'
    ]
]);
```
A call to `Media::type('application/json')` will return an array like:

```php
[
	'json_base64',
	'json'
]
```
This case is not handled by `lithium\net\http\Message::type()`, which causes `lithium\action\Request::$_type` to be assigned as the content type of 'application/json'.

Futhermore, when `Request::body()` is called to decode the request body, the Media class fails to find a handler for 'application/json' (it expects a short name like 'json').

To fix this, `lithium\net\http\Message::type()` must be extended by `lithium\action\Request`. In the case that `$type` is a string and equals the result of the parent's call, we can loop over each type returned by `Media::type()` and attempt to match the request to it like this:

```php
public function type($type = null) {                                            
    if (!$type && !empty($this->params['type'])) {                              
        $type = $this->params['type'];                                          
    }                                                                           
    $_type = parent::type($type);                                               
    if (is_string($type) && $_type === $type) {                                 
        $media = $this->_classes['media'];                                      
        $content = $media::type($type);                                         
        if (is_array($content) && !isset($content['content'])) {                
            foreach ($content as $short_type) {                                 
                $conf = $media::type($short_type);                              
                $conf['name'] = $short_type;                                    
                if ($media::match($this, $conf)) {                              
                    $_type = $short_type;                                       
                    break;                                                      
                }                                                               
            }                                                                   
        }                                                                       
    }                                                                           
    return ($this->_type = $_type);                                             
}
```

This will correctly determine a single short name to use for the type of the request data, and it can now correctly decode the request body.
Throwing an Exception inside a controller action, so to trigger an error is quite common.
I've just spent a few days trying to figure out why my console commands no longer work after upgrading my version of Lithium to 1.2.
After much debugging and hair-pulling I discovered they're only broken if used outside of the 'app' directory.

Is this intentional? If so, it will prevent many from upgrading due to the complications this introduces.
[04-Jun-2018 09:57:54 Europe/London] PHP Fatal error:  Uncaught TypeError: Argument 1 passed to app\models\Groups::create() must be of the type array, boolean given, called in /home/niel/dev/www/test/libraries/lithium/data/collection/RecordSet.php on line 106 and defined in /home/niel/dev/www/test/app/models/Groups.php:94
Stack trace:
#0 /home/niel/dev/www/test/libraries/lithium/data/collection/RecordSet.php(106): app\models\Groups::create(false, Array)
#1 /home/niel/dev/www/test/libraries/lithium/data/Collection.php(267): lithium\data\collection\RecordSet->_set(false, 'active')
#2 /home/niel/dev/www/test/libraries/lithium/data/Collection.php(225): lithium\data\Collection->offsetSet('active', false)
#3 /home/niel/dev/www/test/libraries/lithium/data/Collection.php(146): lithium\data\Collection->set(Array)
#4 /home/niel/dev/www/test/libraries/lithium/data/collection/RecordSet.php(65): lithium\data\Collection->_init()
#5 /home/niel/dev/www/test/libraries/lithium/core/Object.php(84): lithium\data\collection\RecordSet->_ in /home/niel/dev/www/test/app/models/Groups.php on line 94

I've no idea what is going on here, as no part of the code should be creating any entries in the DB at this part I'm testing.