I haven't account on airbrake just have only api key from Errbit app. I upgraded rails to 5.2.3 and it forced me to upgrade airbrake from 4.3.8 to 9.4.5 and now airbrake prompt me to pass project_id. What should I pass to that option ? Should it be only integer ?

Thanks.
  * Errbit version: 0.9.0-dev
  * OS: Debian Buster

Errbit seems to not support airbrake v5 api new features.
From logs it sounds like it's related to APM features of airbrake.
Are there any plans to implement this or atleast catch the exception?

Client "airbrake-ruby/4.6.0 Ruby/2.4.7"

#### Steps to reproduce:

  1. Connect latest airbrake/airbrake-ruby client to errbit

#### Observed Results:

  Exception is thrown about the missing routes

#### Expected Results:

Implement missing feature or catch the exception and document comptability.

#### Application Logs:

ActionController::RoutingError (No route matches [PUT] "/api/v5/projects/1/routes-stats"):
ActionController::RoutingError (No route matches [PUT] "/api/v5/projects/1/routes-breakdowns"):
This is the updated (rebased with current master) PR of https://github.com/errbit/errbit/pull/749

--

Added two input fields with a javascript datepicker to problems/search form to filter problems by date range.

  * The date a problem was first noticed is considered when searching. Example: Problem which was first noticed at `2014-01-05` will be found if your search criteria is `2014-01-01 to 2014-02-01`.

  * The date a problem was last noticed is considered when searching. Example: Problem which was last noticed at `2014-01-05` but first noticed at `2013-12-24` will be found if your criteria is `2014-01-01 to 2014-02-01`.

  * The last day of the date range is fully considered in the search. Example: Problem which was first noticed on `2014-03-09` at `06:00` will be found if your search criteria is `2014-03-01 to 2013-03-09`.

By default the first notice date of the very first problem is used as the beginning value of the date range. The end value is by default the date of tomorrow. So searching for something but not a date will not lead to wrong results.
  * Errbit version: 0.8.0-dev
  * OS: Ubuntu (running in Docker)

### Step 3: Describe the problem:

When I go to the errbit interface, I can search for the error title, e.g. "SIGTERM", but I cannot search by the APP SERVER:

![Screenshot 2019-06-22 at 17 44 39](https://user-images.githubusercontent.com/33842342/59966492-6ef65500-9515-11e9-9448-2f1f7e2abe84.png)

![Screenshot 2019-06-22 at 17 45 08](https://user-images.githubusercontent.com/33842342/59966505-81708e80-9515-11e9-8d65-8a7c0209d4e3.png)

#### Steps to reproduce:

  1. Click on an error
  2. Copy paste the APP SERVER value
  3. Try to search for it

#### Observed Results:

Errbit returns no errs here

#### Expected Results:

To see the errors for the matching APP SERVER
The link to [flippa/errbit-php](https://github.com/flippa/errbit-php) is broken, i think the repo has been deleted. There is a similar one [at wasilak/errbit-php](https://github.com/wasilak/errbit-php) which might be a good replacement (it is basically the same repo but with some adjustments to make it work with Composer, a dependency manager for PHP).

If needed I can create create a pull request for this...


Fix crash if hash is not Hash (for example hash is String)

Feb 13 11:41:18 ip-172-31-15-46 errbit[18087]: ActionView::Template::Error (undefined method `keys' for "Error happen while saving charge and recalculating totals.":String):#012    1: .window#012    2:   .raw_data#012    3:     %pre.hash= pretty_hash notice.params#012  app/helpers/hash_helper.rb:9:in `pretty_hash'#012  app/views/notices/_params.html.haml:3:in `_app_views_notices__params_html_haml__1651385043934122128_47254516850340'#012  app/views/problems/show.html.haml:88:in `_app_views_problems_show_html_haml__203825664179844609_47254504613500'
I'd like to try and get support for nested exceptions into errbit.  This current pull request is just a first cut to get some feedback.  Currently there are no tests, but once I get some clarity on my approach I will definitely add them.

Here is the exception I'm raising:

```
#!/usr/bin/env ruby
require_relative "../config/environment"
require 'airbrake/logger'

Rails.logger = Airbrake::AirbrakeLogger.new(Rails.logger)

class One
  Error = Class.new(StandardError)

  def self.run
    raise Error.new("raise one error")
  end
end

class Two
  Error = Class.new(StandardError)

  def self.run
    One.run
  rescue One::Error => e
    raise Error.new("re-raise and wrap one error")
  end
end

begin
  Two.run
rescue Two::Error => e
  Rails.logger.error(e)
end
```

and here is a screenshot of the backtrace in errbit using my nested exception change:

![screen shot 2019-02-11 at 3 05 32 pm](https://user-images.githubusercontent.com/18699/52599806-85293180-2e0e-11e9-9e4d-063386c057fc.png)


this prevents a situation where a process holds onto a bad connection forever after a mongo server failover.
It would be beneficial for some environments to have an endpoint where with a single call (or rake task) an app can be created, with the app key in the response data.
I've added 2 badge types that are available for each app.
Badges are a nice way to communicate quality in a README etc.

Thinks that I am not so sure/could be optimized (if somebody wants to help, please feel free!)

- [x] authenticated key -> I've reused the key usage from the atom feed... that makes the token quasi public, and might be a problem when the Atom feed contain sensitive info. Maybe generate a new token per app only for badge usage?
  - Right now, we will only use the badges in private projects, so for us not urgent, but definitely preferable
  - **update**: added environment BADGE_PUBLIC which the user can decide which approach is more suitable
- [x] Badge Ranges... I've just made some guesses. Not sure how merged problems fell into that etc.
  - Would be great to make the ranges configurable via ENV config etc. (maybe later)
- [ ] only added 2 smoke tests, had not the time to add thorough test of the logic (as ranges not sure right now)
- [ ] other badge ideas? class infrastructure is there to add other badge types easily

![bildschirmfoto 2019-01-29 um 22 46 25](https://user-images.githubusercontent.com/147175/51942824-4c558980-2418-11e9-88db-055748d8cb5d.png)
![bildschirmfoto 2019-01-29 um 22 46 29](https://user-images.githubusercontent.com/147175/51942826-4cee2000-2418-11e9-9872-56c27d7bffe5.png)
