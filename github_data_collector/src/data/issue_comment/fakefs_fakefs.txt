Ruby 2.7 got released some time ago so it makes sense to run the tests
there as well.
Hi there, 

I'm trying to add a feature (more here: https://github.com/whitesmith/rubycritic/pull/319)  to `rubycritic` which depends on `fakefs` and I'm getting this exception:

```
2) Error:
RubyCritic::Generator::LintReport::#generate_report#test_0001_report file has data inside:
NotImplementedError: NotImplementedError
  /Users/etagwerker/.rvm/gems/ruby-2.6.2@rubycritic/gems/fakefs-0.20.1/lib/fakefs/file.rb:577:in `flock'
  /home/rubycritic/lib/rubycritic/analysers/coverage.rb:91:in `block in synchronize_resultset'
  /home/rubycritic/lib/rubycritic/analysers/coverage.rb:90:in `open'
  /home/rubycritic/lib/rubycritic/analysers/coverage.rb:90:in `synchronize_resultset'
  /home/rubycritic/lib/rubycritic/analysers/coverage.rb:74:in `stored_data'
  /home/rubycritic/lib/rubycritic/analysers/coverage.rb:59:in `resultset'
  /home/rubycritic/lib/rubycritic/analysers/coverage.rb:105:in `results'
  /home/rubycritic/lib/rubycritic/analysers/coverage.rb:15:in `initialize'
  /home/rubycritic/lib/rubycritic/analysers_runner.rb:30:in `new'
  /home/rubycritic/lib/rubycritic/analysers_runner.rb:30:in `block in run'
  /home/rubycritic/lib/rubycritic/analysers_runner.rb:29:in `each'
  /home/rubycritic/lib/rubycritic/analysers_runner.rb:29:in `run'
  /home/rubycritic/test/lib/rubycritic/generators/lint_report_test.rb:30:in `create_analysed_modules_collection'
  /home/rubycritic/test/lib/rubycritic/generators/lint_report_test.rb:18:in `block (3 levels) in <top (required)>'
```

I see that `flock` is not implemented in `fakefs`. If one were to try and implement it, what would that look like? 

For now I've solved it by doing this monkeypatch in my project:

```
module FakeFS
  class File < StringIO
    def flock(*)
      true
    end
  end
end
```

I know it is quite hacky and it could have some side effects. 

Any thoughts on how `flock` could be implemented in `fakefs`?

Thanks! 

Greetings
FileTest module looks a little too thin to handle what Pathname wants from him.

```ruby
FakeFS.with_fresh do
      source = Pathname.new("a.txt")
      FileUtils.touch(source)
      target = Pathname.new("b.txt")
      target.make_symlink(source)
      p File.symlink?(target) # Good
      p target.symlink? # Fails with NoMethodError:  undefined method `symlink?' for FakeFS::FileTest:Module
end
```

Don't get the purpose of FileTest file at all, it just passes all responsibility to File module
I believe this is related to #290 (which may still be an issue despite being closed), but it seems that `FakeFS::FileSystem.find` is unable to find files with curly braces in the file name, and perhaps other special characters.  To reproduce:
```
[1] pry(main)> require 'fakefs/safe'
=> true
[2] pry(main)> FakeFS do
[2] pry(main)*   File.open('test_file_with_{curly}_braces', 'w') { |f| f.puts "Can't be found!" }
[2] pry(main)*   File.open('test_file_with_no_braces', 'w') { |f| f.puts "Can be found!" }
[2] pry(main)* end
=> nil
[3] pry(main)> FakeFS::FileSystem.files
=> [(FakeFile name:"test_file_with_{curly}_braces" parent:"/" size:16), (FakeFile name:"test_file_with_no_braces" parent:"/" size:14)]
[4] pry(main)> FakeFS::FileSystem.find('test_file_with_no_braces')
=> (FakeFile name:"test_file_with_no_braces" parent:"/" size:14)
[5] pry(main)> FakeFS::FileSystem.find('test_file_with_{curly}_braces')
=> nil
```
Interestingly, if I use a splat then the file is found!
```
[6] pry(main)> FakeFS::FileSystem.find('test_file_*')
=> [(FakeFile name:"test_file_with_{curly}_braces" parent:"/" size:16), (FakeFile name:"test_file_with_no_braces" parent:"/" size:14)]
```
I'm using MRI Ruby 2.3.1 and FakeFS 0.18
```
[7] pry(main)> `gem list fakefs`
=> "fakefs (0.18.0)\n"
[8] pry(main)> `ruby -v`
=> "ruby 2.3.1p112 (2016-04-26 revision 54768) [x86_64-darwin15]\n"
[9] pry(main)>
```
Ruby allows for us to pass `chmod` arguments in [symbolic mode](https://ruby-doc.org/stdlib-1.9.3/libdoc/fileutils/rdoc/FileUtils.html#method-c-chmod). `fakefs`, however, will error when we try to do this.

For example, with `fakefs`:
```
✔ ~/projects/fakefs/.my_tests/test_chmod_for_non_octal_numbers [master|…33]
19:06 $ lls
total 4
-rw-rw-r-- 1 gnikonorov gnikonorov 705 Jul 17 19:04 chmod_a_lot.rb
✔ ~/projects/fakefs/.my_tests/test_chmod_for_non_octal_numbers [master|…33]
19:06 $ cat chmod_a_lot.rb
require 'fileutils'
require 'fakefs'

file_name = 'test_file.txt'

FileUtils.touch file_name
curr_umask = File.stat(file_name).mode.to_s(8)
puts "Curr file umask is #{curr_umask.to_s}"

FileUtils.chmod("ugo=wrx", file_name)
curr_umask = File.stat(file_name).mode.to_s(8)
puts "Curr file umask is #{curr_umask.to_s}"

FileUtils.chmod("ugo=wr", file_name)
curr_umask = File.stat(file_name).mode.to_s(8)
puts "Curr file umask is #{curr_umask.to_s}"

FileUtils.chmod("ugo=r", file_name)
curr_umask = File.stat(file_name).mode.to_s(8)
puts "curr file umask is #{curr_umask.to_s}"

FileUtils.chmod("ugo=rx", file_name)
curr_umask = File.stat(file_name).mode.to_s(8)
puts "Curr file umask is #{curr_umask.to_s}"
✔ ~/projects/fakefs/.my_tests/test_chmod_for_non_octal_numbers [master|…33]
19:06 $ ruby chmod_a_lot.rb
Curr file umask is 100664
/home/gnikonorov/.gem/ruby/2.3.0/gems/fakefs-0.16.0/lib/fakefs/file.rb:285:in `+': String can't be coerced into Fixnum (TypeError)
	from /home/gnikonorov/.gem/ruby/2.3.0/gems/fakefs-0.16.0/lib/fakefs/file.rb:285:in `chmod'
	from /home/gnikonorov/.gem/ruby/2.3.0/gems/fakefs-0.16.0/lib/fakefs/fileutils.rb:244:in `block in chmod'
	from /home/gnikonorov/.gem/ruby/2.3.0/gems/fakefs-0.16.0/lib/fakefs/fileutils.rb:242:in `each'
	from /home/gnikonorov/.gem/ruby/2.3.0/gems/fakefs-0.16.0/lib/fakefs/fileutils.rb:242:in `chmod'
	from chmod_a_lot.rb:10:in `<main>'
✘-1 ~/projects/fakefs/.my_tests/test_chmod_for_non_octal_numbers [master|…33]
19:06 $
```

while without it:
```
✔ ~/projects/fakefs/.my_tests/test_chmod_for_non_octal_numbers [master|…33]
19:06 $ lls
total 4
-rw-rw-r-- 1 gnikonorov gnikonorov 706 Jul 17 19:06 chmod_a_lot.rb
✔ ~/projects/fakefs/.my_tests/test_chmod_for_non_octal_numbers [master|…33]
19:06 $ cat chmod_a_lot.rb
require 'fileutils'
#require 'fakefs'

file_name = 'test_file.txt'

FileUtils.touch file_name
curr_umask = File.stat(file_name).mode.to_s(8)
puts "Curr file umask is #{curr_umask.to_s}"

FileUtils.chmod("ugo=wrx", file_name)
curr_umask = File.stat(file_name).mode.to_s(8)
puts "Curr file umask is #{curr_umask.to_s}"

FileUtils.chmod("ugo=wr", file_name)
curr_umask = File.stat(file_name).mode.to_s(8)
puts "Curr file umask is #{curr_umask.to_s}"

FileUtils.chmod("ugo=r", file_name)
curr_umask = File.stat(file_name).mode.to_s(8)
puts "curr file umask is #{curr_umask.to_s}"

FileUtils.chmod("ugo=rx", file_name)
curr_umask = File.stat(file_name).mode.to_s(8)
puts "Curr file umask is #{curr_umask.to_s}"
✔ ~/projects/fakefs/.my_tests/test_chmod_for_non_octal_numbers [master|…33]
19:06 $ ruby chmod_a_lot.rb
Curr file umask is 100664
Curr file umask is 100777
Curr file umask is 100666
curr file umask is 100444
Curr file umask is 100555
✔ ~/projects/fakefs/.my_tests/test_chmod_for_non_octal_numbers [master|…34]
19:06 $ lls
total 4
-rw-rw-r-- 1 gnikonorov gnikonorov 706 Jul 17 19:06 chmod_a_lot.rb
-r-xr-xr-x 1 gnikonorov gnikonorov   0 Jul 17 19:06 test_file.txt
✔ ~/projects/fakefs/.my_tests/test_chmod_for_non_octal_numbers [master|…34]
19:06 $
```

I will add in support for `symbolic mode` and chmodding.
I need `IO.read` and `IO.write` to be mocked with the same methods and `File.read` and `File.write` (since 3rd party code, in this case chef, uses `IO.read` and `IO.write` instead of the more common `File.read` and `File.write`)

I tried:

```ruby
module FakeFS

  class IO < ::IO
    def self.read(*args, **kw)
      ::FakeFS::File.read(*args, **kw)
    end
    def self.write(*args, **kw)
      ::FakeFS::File.write(*args, **kw)
    end
  end

  def self.activate!
    @activated = true
    Object.class_eval do
      remove_const(:Dir)
      remove_const(:File)
      remove_const(:FileTest)
      remove_const(:FileUtils)
      #remote_const(:IO) # note this actually breaks things if you do it this way
      remove_const(:Pathname) if RUBY_VERSION >= '1.9.3'

      const_set(:Dir,       FakeFS::Dir)
      const_set(:File,      FakeFS::File)
      const_set(:FileUtils, FakeFS::FileUtils)
      const_set(:FileTest,  FakeFS::FileTest)
      const_set(:IO,        FakeFS::IO)
      const_set(:Pathname,  FakeFS::Pathname) if RUBY_VERSION >= '1.9.3'
      ::FakeFS::Kernel.hijack!
    end
    true
  end
end
```

and that works, but it would be good if that was the default
It would be great to have a symmetric method to grab all the files created in memory and write them back to the real filesystem.

This would enable use cases like:
```
read files into memory ->
perform IO that requires a lot of small changes -> 
write results back
```
The CarrierWave gem invokes File.identical?, resulting in this error in my tests:

```
NoMethodError:
       undefined method `identical?' for FakeFS::File:Class
```
Given a directory with a file `test.rb`:
```ruby

require 'fakefs/safe'

RSpec.describe 'cloning dir' do
  describe 'cloning to root' do
    it 'only loads the directory' do
      FakeFS.clear!
      FakeFS do
        FakeFS::FileSystem.clone('foo', '/')
        expect{ Dir['**/*'] }.to raise_error NoMethodError
        expect(Dir['*']).to eq(['/bar', '/home'])
      end
    end
  end

  describe 'cloning to new dir' do
    it 'loads all the expected files' do
      FakeFS.clear!
      FakeFS do
        FakeFS::FileSystem.clone('foo', '/foo')
        expect(Dir['**/*'].slice(0, 3)).to eq(["/foo", "/foo/bar", "/foo/bar/baz"])
        p Dir['**/*']
      end
    end
  end
end
```

then running the following from that directory:
```bash
mkdir -p foo/bar
touch foo/bar/baz
rspec test.rb
```

Both tests should pass. The second test shows the expected behaviour, that if a directory is cloned to a particular path all descendants of that directory are cloned appropriately. However the first test shows the odd behaviour - only the top level `bar` directory appears, but the file within it (`baz`) is not cloned.

Also possibly related issues:

- You can see that the `Dir['**/*']` in the first test fails (presumably as the glob does not match anything), this gives a not that informative error message:

  ```
     NoMethodError:
       undefined method `match' for nil:NilClass
  ```

  whereas in Ruby a glob which does not match anything gives `[]`

- In the second test you should see the whole path to the current directory on the real filesystem is cloned, whereas in the first only `/home` is - this looks like it could be the same thing happening as for `/foo`, with all child directories disappearing for some reason.

Thanks
We are using FakeFS in the fashion as described in the README:

```
FakeFS do
  # your code
end
```

We noticed that for two independent tests the one run last would start failing, because a certain directory already existed. We solved that by calling `FakeFS::FileSystem.clear`.

The expectation was that the blocked call would behave similar to e.g. `TimeCop.freeze {}` where no state is maintained.

Preferred behaviour would be to start from a clean state. Alternatively I would be helpful to call out this behaviour in the README.
