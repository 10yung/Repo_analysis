## Describe the bug
It's not clear to me on what controls the StateChanged event should work - in the documentations, some button controls are mentioned. However, when applied on a TextBox nothing works - which is strange to me.
I'd expect that any control would have a GazeElement StateChanged event trigged (e.g. the user's gaze enters a TextBox). The docs should be more clear as well, indicating on which controls it would or wouldn't work.

- [ ] Is this bug a regression in the toolkit?  If so, what toolkit version did you last see it work:

## Steps to Reproduce
Steps to reproduce the behavior:
1. Create a TextBox and add a StateChanged event to its GazeElement:

`  <TextBox Height="240" gaze:GazeInput.IsSwitchEnabled="True" TextWrapping="Wrap" HorizontalAlignment="Stretch" >
                    <gaze:GazeInput.GazeElement>
                        <gaze:GazeElement  StateChanged="GazeElement_StateChanged" />
                    </gaze:GazeInput.GazeElement>
                </TextBox>`
2. Use an eye tracker and look at the TextBox - nothing happens.
3. Replacing TextBox with Button will work.


## Expected behavior
The StateChanged event should trigger on any (atleast 'interactive' control) 

## Screenshots
---

## Environment
<!-- Check one or more of the following options with "x" -->
```
NuGet Package(s): 

Package Version(s): 

Windows 10 Build Number:
- [ ] Fall Creators Update (16299)
- [X ] April 2018 Update (17134)
- [ ] October 2018 Update (17763)
- [ ] May 2019 Update (18362)
- [ ] Insider Build (build number: )

App min and target version:
- [ ] Fall Creators Update (16299)
- [ ] April 2018 Update (17134)
- [ ] October 2018 Update (17763)
- [ ] May 2019 Update (18362)
- [ ] Insider Build (xxxxx)

Device form factor:
- [X ] Desktop
- [ ] Xbox
- [ ] Surface Hub
- [ ] IoT

Visual Studio 
- [ ] 2017 (version: )
- [ ] 2019 (version: ) 
- [ X] 2019 Preview (version: )

```

## Additional context
Add any other context about the problem here.

UWP projects are not signed. Get the following error:

System.IO.FileLoadException: Could not load file or assembly 'Microsoft.Toolkit.Uwp.Notifications, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null' or one of its dependencies. A strongly-named assembly is required. (Exception from HRESULT: 0x80131044)
<!--
PLEASE HELP US PROCESS GITHUB ISSUES FASTER BY PROVIDING THE FOLLOWING INFORMATION.
ISSUES MISSING IMPORTANT INFORMATION MAY BE CLOSED WITHOUT INVESTIGATION.
-->

## Describe the bug
I am trying to apply a `DropShadow` to an `Ellispe` filled with a `RadialGradientBrush` I am not able to get this to work. The `DropShadowPanel` works as expected if I change the `Brush` to a `SolidColorBrush`

## Steps to Reproduce
```xaml
<controls:DropShadowPanel Canvas.Left="{Binding Left}"
                            Canvas.Top="{Binding Top}"
                            BlurRadius="20"
                            IsMasked="True"
                            OffsetX="10"
                            OffsetY="10"
                            ShadowOpacity="1"
                            Color="Black">
    <Ellipse Width="{Binding Diameter}"
                Height="{Binding Diameter}"
                Fill="{Binding Fill}">
        <Ellipse.RenderTransform>
            <TranslateTransform X="{Binding Left}" Y="{Binding Top}" />
        </Ellipse.RenderTransform>
    </Ellipse>
</controls:DropShadowPanel>
```
where `Fill` is a `RadialGragientBrush` generated in code behind

![image](https://user-images.githubusercontent.com/47110241/72225125-0985b680-3582-11ea-8f91-c499b0185028.png)
*With RadialGadientBrush*

![image](https://user-images.githubusercontent.com/47110241/72225145-3df97280-3582-11ea-818f-557fc8512ff2.png)
*With SolidColorBrush*
 
## Expected behavior
image 2 with the `RadialGradientBrush` applied

## Screenshots
see above

## Environment
<!-- Check one or more of the following options with "x" -->
```
NuGet Package(s): 

Package Version(s): 

Windows 10 Build Number:
- [ ] Fall Creators Update (16299)
- [ ] April 2018 Update (17134)
- [ ] October 2018 Update (17763)
- [X] May 2019 Update (18362)
- [ ] Insider Build (build number: )

App min and target version:
- [ ] Fall Creators Update (16299)
- [ ] April 2018 Update (17134)
- [X] October 2018 Update (17763)
- [X] May 2019 Update (18362)
- [ ] Insider Build (xxxxx)

Device form factor:
- [X] Desktop
- [ ] Xbox
- [ ] Surface Hub
- [ ] IoT

Visual Studio 
- [ ] 2017 (version: )
- [X] 2019 (version: 16.4.2) 
- [ ] 2019 Preview (version: )

```

## Additional context
Here is a sample App if it helps. Note: I am not a programmer by profession, so maybe this code is not up to your standard ðŸ˜„ https://github.com/timunie/Bubblez 

<!--
PLEASE HELP US PROCESS GITHUB ISSUES FASTER BY PROVIDING THE FOLLOWING INFORMATION.
ISSUES MISSING IMPORTANT INFORMATION MAY BE CLOSED WITHOUT INVESTIGATION.
-->

## Describe the bug
The following code had been working flawlessly for about 2 years until today when I updated a bunch of NuGet packages:
`oneDriveRootFolder = await OneDriveService.Instance.RootFolderForMeAsync();`
Now, it throws the following exception:

> Could not load file or assembly 'Microsoft.IdentityModel.Clients.ActiveDirectory.Platform, Version=3.13.7.964, Culture=neutral, PublicKeyToken=31bf3856ad364e35'. The system cannot find the file specified.
```
   at Microsoft.Toolkit.Services.MicrosoftGraph.MicrosoftGraphService.<LoginAsync>d__54.MoveNext()
   at System.Runtime.CompilerServices.AsyncMethodBuilderCore.Start[TStateMachine](TStateMachine& stateMachine)
   at Microsoft.Toolkit.Services.MicrosoftGraph.MicrosoftGraphService.LoginAsync(String loginHint)
   at Microsoft.Toolkit.Services.OneDrive.OneDriveService.<LoginAsync>d__32.MoveNext()
   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()
   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
   at Microsoft.Toolkit.Services.OneDrive.OneDriveService.<RootFolderForMeAsync>d__33.MoveNext()
   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()
   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
   at System.Runtime.CompilerServices.TaskAwaiter`1.GetResult()
```
I understand OneDriveService is obsolete.  Is this expected?  I would love to have it working now while preparing to use Graph SDK to replace it.

- [x] Is this bug a regression in the toolkit?  If so, what toolkit version did you last see it work:

## Steps to Reproduce
Steps to reproduce the behavior:
                OneDriveService.ServicePlatformInitializer = new OneDriveServicePlatformInitializer();
                OneDriveService.Instance.Initialize(App.ClientId, new string[] { "Files.ReadWrite.All" });
                OneDriveStorageFolder oneDriveRootFolder = await OneDriveService.Instance.RootFolderForMeAsync();

## Expected behavior
No error.

## Screenshots
If applicable, add screenshots to help explain your problem.

## Environment
<!-- Check one or more of the following options with "x" -->
```
NuGet Package(s): 
![image](https://user-images.githubusercontent.com/6095671/72170648-36c63f00-339f-11ea-9210-a6d8af705e16.png)

Package Version(s): 
6.0.0

Windows 10 Build Number:
- [ ] Fall Creators Update (16299)
- [ ] April 2018 Update (17134)
- [ ] October 2018 Update (17763)
- [x] May 2019 Update (18362)
- [ ] Insider Build (build number: )

App min and target version:
- [ ] Fall Creators Update (16299)
- [ ] April 2018 Update (17134)
- [ ] October 2018 Update (17763)
- [x] May 2019 Update (18362)
- [ ] Insider Build (xxxxx)

Device form factor:
- [x] Desktop
- [ ] Xbox
- [ ] Surface Hub
- [ ] IoT

Visual Studio 
- [ ] 2017 (version: )
- [x] 2019 (version: ) 
- [ ] 2019 Preview (version: )

```

## Additional context
Add any other context about the problem here.

Fixes #3070
<!-- Link to relevant issue (for ex: #1234) which will automatically close the issue once the PR is merged -->

## PR Type
What kind of change does this PR introduce?
<!-- Please uncomment one ore more that apply to this PR -->

<!-- - Bugfix -->
<!-- - Feature -->
<!-- - Code style update (formatting) -->
<!-- - Refactoring (no functional changes, no api changes) -->
<!-- - Build or CI related changes -->
<!-- - Documentation content changes -->
<!-- - Sample app changes -->
- Style Change


## What is the current behavior?
<!-- Please describe the current behavior that you are modifying, or link to a relevant issue. -->
The Expander Header is left aligned

## What is the new behavior?
The expander header will stretch to fit it's space. **BREAKING CHANGE**

## PR Checklist

Please check if your PR fulfills the following requirements:

- [x] Tested code with current [supported SDKs](../readme.md#supported)
- [ ] Pull Request has been submitted to the documentation repository [instructions](..\contributing.md#docs). Link: <!-- docs PR link -->
- [ ] Sample in sample app has been added / updated (for bug fixes / features)
    - [ ] Icon has been created (if new sample) following the [Thumbnail Style Guide and templates](https://github.com/windows-toolkit/WindowsCommunityToolkit-design-assets)
- [ ] Tests for the changes have been added (for bug fixes / features) (if applicable)
- [ ] Header has been added to all new source files (run *build/UpdateHeaders.bat*)
- [ ] Contains **NO** breaking changes


<!-- If this PR contains a breaking change, please describe the impact and migration path for existing applications below. 
     Please note that breaking changes are likely to be rejected -->
This is a breaking **style* change. Content that was left aligned will now stretch. This could change how an application looks

## Other information

## Describe the bug

When a UWP app is linked using .NET Native and shipped to the store, toast notifications built using Microsoft.Toolkit.Uwp.Notifications.dll stop working. They still appear, but they lose all context provided by the user and show up as:

```
$AppName
New Notification
```

The workaround is to include the notifications assembly in rd.xml, like so:

```<Assembly Name="Microsoft.Toolkit.Uwp.Notifications" Dynamic="Required All" />```

- [x] Is this bug a regression in the toolkit?

Yes, because this used to work without unnatural acts. But unclear when that was.

## Steps to Reproduce
1. Build a simple app that uses Microsoft.Toolkit.Uwp.Notifications to trigger notifications
2. Confirm it works
3. Compile it with .NET Native (debug builds are fine)
4. Confirm all context is lost in notifications
5. Add the directive mentioned above. Confirm it works again.

## Expected behavior
The Toolkit NuGet package should provide an rd.xml that just works, so apps don't have to figure this out themselves.

cf https://devblogs.microsoft.com/dotnet/net-native-deep-dive-making-your-library-great/

## Screenshots

![image](https://user-images.githubusercontent.com/218865/71758319-ddb45380-2e52-11ea-9da6-50666c5c3558.png)

## Environment

Package Version(s): 6.0.0

Windows 10 Build Number:
- [ ] Fall Creators Update (16299)
- [ ] April 2018 Update (17134)
- [ ] October 2018 Update (17763)
- [x] May 2019 Update (18362)
- [ ] Insider Build (build number: )

App min and target version:
- [ ] Fall Creators Update (16299)
- [x] April 2018 Update (17134)
- [ ] October 2018 Update (17763)
- [ ] May 2019 Update (18362)
- [ ] Insider Build (xxxxx)

Device form factor:
- [x] Desktop
- [ ] Xbox
- [ ] Surface Hub
- [ ] IoT

Visual Studio 
- [ ] 2017 (version: )
- [ ] 2019 (version: ) 
- [x] 2019 (version: 16.4.2)
## CPU usage is taken high 
When we load the 10000 records with 5 columns CPU usage is 8 to 10 %, and when we mouse hover in DataGrid the CPU usage is 6 to 7 %.

- [ ] Is this bug a regression in the toolkit?  If so, what toolkit version did you last see it work:

## Steps to Reproduce
Steps to reproduce the behavior:
1. Run the sample 
2. Click the DataGrid button and note the CPU usage in Task Manager
3. And Mouse hover in DataGrid and note the CPU usage in Task Manager

## Expected behavior
Have to reduce the CPU usage

## Screenshots
**Data Loading** 
<img width="913" alt="DataLoading" src="https://user-images.githubusercontent.com/56529945/71723939-74cddb00-2e54-11ea-8627-12f2414683d9.png">
**Hovering**
<img width="910" alt="Hovering" src="https://user-images.githubusercontent.com/56529945/71723940-74cddb00-2e54-11ea-9774-7bac68911ded.png">


## Environment

NuGet Package(s): 
Microsoft.Toolkit.Uwp.UI.Controls.DataGrid 
Package Version(s): 
6.0.0
Windows 10 Build Number:
- [x] May 2019 Update (18362)

App min and target version:
 - [x] October 2018 Update (17763)

Device form factor:
 - [x] Desktop

Visual Studio 
- [x] 2019 (version:16.2.3) 


Sample Location: [DataGrid_UWP.zip](https://github.com/windows-toolkit/WindowsCommunityToolkit/files/4019131/DataGrid_UWP.zip)
<!--
PLEASE HELP US PROCESS GITHUB ISSUES FASTER BY PROVIDING THE FOLLOWING INFORMATION.
ISSUES MISSING IMPORTANT INFORMATION MAY BE CLOSED WITHOUT INVESTIGATION.
-->

## Describe the bug
I have a GridView in a page(cache enabled),in the GridViewItem data template,
```
<DataTemplate>
            <StackPanel>
                <Button>
                    <RelativePanel>
                        <controls:ImageEx
                            x:Name="ImageExCover"
                            IsCacheEnabled="True"
                            Width="375" Height="212"
                            Source="{x:Bind series_cover_image_url, Converter={StaticResource imageUrlCompress}}"
                            Stretch="UniformToFill"
                            PlaceholderSource="/Assets/Slices/xxx.png"
                            PlaceholderStretch="UniformToFill"/>

                        <Border>
                            <TextBlock"/>
                        </Border>

                        <Border>
                            <Border.Background>
                                <media:BackdropBlurBrush Amount="16"/>
                            </Border.Background>
                            <TextBlock/>
                        </Border>
                    </RelativePanel>
                </Button>

                <TextBlock/>
                <TextBlock/>
            </StackPanel>
        </DataTemplate>
```

When enter an item ,and navigate back, some items may become black....
Does this relate to `ImageEx`'s `IsCacheEnabled`???
Sometimes when I first enter page, there still exists some black.

## Screenshots
I met several times this morning, but now I can't reproduce it.
If this occured, I will put the screenshot here.
![image](https://user-images.githubusercontent.com/14960168/71660003-96f82800-2d84-11ea-927b-ab853344f06c.png)


## Environment
<!-- Check one or more of the following options with "x" -->
```
NuGet Package(s): 

Package Version(s): 
Microsoft.Toolkit.Uwp.UI.Controls 6.0.0

Windows 10 Build Number:
- [ ] Fall Creators Update (16299)
- [ ] April 2018 Update (17134)
- [ ] October 2018 Update (17763)
- [ ] May 2019 Update (18362)
- [x] 1909


Device form factor:
- [x] Desktop
- [x] Xbox
- [ ] Surface Hub
- [ ] IoT

Visual Studio 
- [ ] 2017 (version: )
- [x] 2019 (version:16.4.2 ) 
- [ ] 2019 Preview (version: )

```

## Additional context
Add any other context about the problem here.

It would be great for AdvancedCollectionView to implement ICollectionView.CollectionGroups, based on item's IGrouping, just like the default view implementation of CollectionViewSource does.

This would allow using groping and incremental loading together, which CollectionViewSource doesn't support.

Currently I'm working on inheriting from AdvancedCollectionView and redefining CollectionGroups, to see how far I can go with this scenario.
## Describe the problem this feature would solve
<!-- Please describe or link to any existing issues or discussions.
For example, I want to translate the word "run" as in "run a computer program", but not "run on a track".   Microsoft Translator has a perfect option - [includeAlignment ](https://docs.microsoft.com/en-us/azure/cognitive-services/translator/reference/v3-0-translate)- to do this. 

## Describe the solution
<!-- A clear and concise description of what you want to happen. -->
It would be great if TranslatorService.Instance.TranslateAsync() allows optional parameters. To make the implementation simple, it could return the raw json response and let the user parse it. 

## Describe alternatives you've considered
<!-- A clear and concise description of any alternative solutions or features you've considered. -->

## Additional context & Screenshots
<!-- Add any other context or screenshots about the feature request here.-->
