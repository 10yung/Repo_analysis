
I've worked hard to make sure that I don't import directly or indirectly "fmt" package.

I'm looking at the generated gopher code. For some reason, the `context` package is importing "fmt" when it should not be: https://godoc.org/context?import-graph

I don't seem to know why.

I understand that this package does not allow network access. 
So, I cant use the `net` package or general `net.dial` functionality.

My main aim is to link a Javascript `onClick` event to a local Golang event(which uses `net.dial`) to gain network access.

I tried using `net/http` to start a local server inside(that does server-side events) gopherjs but it failed because it does not allow network access.

How do i link a gopherjs event to a local Golang function dialing a socket? Even if it is to just initialize a bool variable.

As described in #947, go/packages might be an opportunity for GopherJS to shed some maintenance burden and gain better build system support at the same time.

I'm opening this PR mostly as an early preview of my progress, it is **not** ready to be merged just yet. I'm writing the code in such a way that it would be able to coexist with the current implementation until we decide it is good enough to be the default.

The end goal for this PR is to reach feature parity for `gopherjs build` command. At the moment, it is able to produce sensible-ish JS artifacts, but I haven't implemented support for `natives` VFS as well as standard library packages pruning.

I'll be updating this PR as I go.
Earlier this year, Go Team presented [golang.org/x/tools/go/packages](https://godoc.org/golang.org/x/tools/go/packages) as build system-agnostic interface for tooling authors. At the moment GopherJS uses go/build as a main way to load packages, which lacks Go Modules support and is strongly tied to the `go` tool.

In theory, switch to go/packages should offer several advantages:

  * Transparent build system integration, lesser chance to be affected by changes in go build tooling. As a corollary, this should provide Go Module support "for free".
  * An avenue for integrating GopherJS with other build systems (bazel.io and friends).
  * A possibility to remove a lot of custom code from the gopherjs/build package, which is handling loading packages in different ways.

How much of that proves to be true, is yet to be seen, but I'll start an experiment.
Getting some errors here for an init() call which is initializing a pointer to a function with package-level variables (outside of an init() function)... 

`myLocalVar$24ptr is not defined`

```go
var myLocalVar = MyType{}

var AddToLocalVar = myLocalVar.AddToLocalVar
```

While the $24ptr part is not found there is a variable defined named `myLocalVar`.

```js
myLocalVar = new MyType();
$pkg.AddToLocalVar = $methodVal((myLocalVar$24ptr || (myLocalVar$24ptr = new ptrType(function() { return myLocalVar; }, function($v) { myLocalVar = 
```

The error is that the first part of that $methodVal is not defined (the $24ptr variant of the variable)

I'm seeing this against go1.12 and latest gopherjs.
I had run on my system but system throw merage files error then abort the program
$go get -u github.com/gopherjs/gopherjs
How to resolve this error
 
Hi folks, I was trying to see if I can help with Go 1.13 support, but I can't get source-map-support to work properly and deciphering stack traces is becoming difficult :/

My steps:

```shell
$ nvm use 10  # Activate node 10.x
$ npm install --global source-map-support
$ export NODE_PATH="$(npm root --global)"  # Without this node doesn't seem to find the package.
$ node --require source-map-support/register --eval ""  # Completes with no errors.
$ gopherjs test -v fmt

/home/aleks/go/src/github.com/gopherjs/gopherjs/test.784702578:4210
                _r = reflectlite.TypeOf((ptrType.nil)).Elem(); /* */ $s = 2; case 2: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
                                        ^
TypeError: Cannot read property 'Elem' of undefined
    at Object.$init (/home/aleks/go/src/github.com/gopherjs/gopherjs/test.784702578:4210:41)
    at Object.$init (/home/aleks/go/src/github.com/gopherjs/gopherjs/test.784702578:7350:15)
    at Object.$init (/home/aleks/go/src/github.com/gopherjs/gopherjs/test.784702578:8306:14)
    at Object.$init (/home/aleks/go/src/github.com/gopherjs/gopherjs/test.784702578:45090:14)
    at $init (/home/aleks/go/src/github.com/gopherjs/gopherjs/test.784702578:45567:17)
    at $goroutine (/home/aleks/go/src/github.com/gopherjs/gopherjs/test.784702578:1478:19)
    at $runScheduled (/home/aleks/go/src/github.com/gopherjs/gopherjs/test.784702578:1518:7)
    at $schedule (/home/aleks/go/src/github.com/gopherjs/gopherjs/test.784702578:1534:5)
    at $go (/home/aleks/go/src/github.com/gopherjs/gopherjs/test.784702578:1510:3)
    at Object.<anonymous> (/home/aleks/go/src/github.com/gopherjs/gopherjs/test.784702578:45588:1)
    at Object.<anonymous> (/home/aleks/go/src/github.com/gopherjs/gopherjs/test.784702578:45591:4)
    at Module._compile (internal/modules/cjs/loader.js:654:30)
    at Object.Module._extensions..js (internal/modules/cjs/loader.js:665:10)
    at Module.load (internal/modules/cjs/loader.js:566:32)
    at tryModuleLoad (internal/modules/cjs/loader.js:506:12)
    at Function.Module._load (internal/modules/cjs/loader.js:498:3)
    at Function.Module.runMain (internal/modules/cjs/loader.js:695:10)
    at startup (internal/bootstrap/node.js:201:19)
    at bootstrapNodeJSCore (internal/bootstrap/node.js:516:3)
FAIL    fmt     0.620s
```

Note there isn't a warning about missing source-map-support module. It would be there if I didn't do the `export NODE_PATH=...` thing.

I also tried this:

```
$ gopherjs test -v -c fmt
$ ls fmt_test.js*
fmt_test.js  fmt_test.js.map
$ node --require source-map-support/register fmt_test.js

/home/aleks/go/src/github.com/gopherjs/gopherjs/fmt_test.js:4210
                _r = reflectlite.TypeOf((ptrType.nil)).Elem(); /* */ $s = 2; case 2: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
                                        ^
TypeError: Cannot read property 'Elem' of undefined
    at Object.$init (/home/aleks/go/src/github.com/gopherjs/gopherjs/fmt_test.js:4210:41)
    at Object.$init (/home/aleks/go/src/github.com/gopherjs/gopherjs/fmt_test.js:7350:15)
    at Object.$init (/home/aleks/go/src/github.com/gopherjs/gopherjs/fmt_test.js:8306:14)
    at Object.$init (/home/aleks/go/src/github.com/gopherjs/gopherjs/fmt_test.js:45090:14)
    at $init (/home/aleks/go/src/github.com/gopherjs/gopherjs/fmt_test.js:45567:17)
    at $goroutine (/home/aleks/go/src/github.com/gopherjs/gopherjs/fmt_test.js:1478:19)
    at $runScheduled (/home/aleks/go/src/github.com/gopherjs/gopherjs/fmt_test.js:1518:7)
    at $schedule (/home/aleks/go/src/github.com/gopherjs/gopherjs/fmt_test.js:1534:5)
    at $go (/home/aleks/go/src/github.com/gopherjs/gopherjs/fmt_test.js:1510:3)
    at Object.<anonymous> (/home/aleks/go/src/github.com/gopherjs/gopherjs/fmt_test.js:45588:1)
    at Object.<anonymous> (/home/aleks/go/src/github.com/gopherjs/gopherjs/fmt_test.js:45591:4)
    at Module._compile (internal/modules/cjs/loader.js:654:30)
    at Object.Module._extensions..js (internal/modules/cjs/loader.js:665:10)
    at Module.load (internal/modules/cjs/loader.js:566:32)
    at tryModuleLoad (internal/modules/cjs/loader.js:506:12)
    at Function.Module._load (internal/modules/cjs/loader.js:498:3)
    at Function.Module.runMain (internal/modules/cjs/loader.js:695:10)
    at startup (internal/bootstrap/node.js:201:19)
    at bootstrapNodeJSCore (internal/bootstrap/node.js:516:3)
```

The result is exactly the same.

```
$ gopherjs version
GopherJS 1.13-wip
$ node --version
v10.0.0
```

For the reference, the compiled scripts: [fmt_test.zip](https://github.com/gopherjs/gopherjs/files/3649431/fmt_test.zip). Manual inspection doesn't seem to reveal any smoking gun.

Any suggestions? Thanks! :)
Go 1.13 is out by now, but GopherJS doesn't support it yet (that work is tracked in issue #929). I'd like to work on a change that can be made in parallel, unrelated to Go 1.13 support, but it should help with the current situation and buy us more time.

The change can be briefly described as "to allow GopherJS 1.12-n to operate alongside with arbitrary Go distribution versions, rather than hard-requiring it to be Go 1.12.x".

/cc @neelance @hajimehoshi @myitcv

## Background

At this time, it's only possible to build and use GopherJS with one major version of Go at a time. Currently, GopherJS 1.12-n requires Go 1.12.x. This is enforced by a build-time check implemented via build constraints. See:

https://github.com/gopherjs/gopherjs/blob/d3ddacdb130fcd23f77a827e3b599804730be6b5/compiler/version_check.go#L1-L2

The check is necessary because the GopherJS requires a 1.12.x Go distribution. It needs it to be able to read the source code for all of the standard library packages (i.e., the .go files in GOROOT/src), which GopherJS needs to compile.

However, the check doesn't have to be done at compile-time. We can do it at runtime instead, which would enable doing things like:

```
$ go version
go version go1.13 darwin/amd64
$ go get -u github.com/gopherjs/gopherjs

$ gopherjs build some.example/project
GopherJS 1.12-2 requires a Go 1.12.x distribution, but found version go1.13

$ GOROOT=$HOME/sdk/go1.12.9 gopherjs build some.example/project
<success>
```

# Alternatives

### 1. Make it easier to specify a GOROOT value that only GopherJS uses

Let's assume the user wants to have Go 1.13 as their default Go distribution, say in `/usr/local/go`, and a Go 1.12.9 distribution in their `$HOME/sdk/go1.12.9` directory (this is easy by doing `go get golang.org/dl/go1.12.9` and then `go1.12.9 download`).

That means they can either build GopherJS using the Go 1.12.9 distribution so the default `runtime.GOROOT()` value in the `gopherjs` binary is `$HOME/sdk/go1.12.9` (**edit:** based on comments from @inliquid below, this option may not be working correctly today), or explicitly set the `GOROOT` environment variable to `$HOME/sdk/go1.12.9` when running the `gopherjs` binary:

```
GOROOT=$HOME/sdk/go1.11.13 gopherjs build some.example/project
```

However, this has two problems/limitations:

1. Setting `GOROOT` manually for each `gopherjs` invocation is annoying and easy to forget, or accidentally set wrong `GOROOT` for main Go distribution

2. Correct GopherJS-specific `GOROOT` will also need to be set when using GopherJS to compile in-memory (e.g., with [`github.com/shurcooL/gopherjslib`](https://godoc.org/github.com/shurcooL/gopherjslib) or [`github.com/shurcooL/go/gopherjs_http`](https://godoc.org/github.com/shurcooL/go/gopherjs_http) packages)

To avoid both these problems, I propose adding a new GopherJS-specific environment variable:

```
GOPHERJS_GOROOT - if set, GopherJS uses this value as the default GOROOT value,
                  instead of using the system GOROOT as the default GOROOT value
```

The idea would be that if you want to use GopherJS with a mis-matched version of the Go distribution, you permanently set `GOPHERJS_GOROOT` to point to a matching Go distribution version and forget about it (until next major GopherJS version). It won't interfere with your normal Go distribution.

### 2. Embed all of the required files from GOROOT/src into GopherJS itself

Similar to how we already have `natives` and `gopherjspkg` file systems, we can have a third one: a copy of the source code of Go standard library packages (and potentially their tests).

I've explored this idea. It is certainly possible, but the concern is about the size of the generated assets_vfsdata.go file because the Go standard library is quite sizable.

I took GOROOT/src from Go 1.12.9 and trimmed it as follows:

- deleted all of cmd/ directory, GopherJS doesn't need it
- deleted all non .go files (there are many cgo files, assembly files, etc., GopherJS doesn't need them)
- deleted all testdata directories
- deleted all _test.go files (they were pretty small, didn't make a big difference)

The end result size of the src directory was about 15.3 MB. Compressed with gzip it becomes just 4.8 MB, which is pretty small. vfsgen uses gzip compression but encodes bytes in Go byte slice literals, which have an efficiency of 1:4, so the assets_vfsdata.go file ends up being 18.8 MB. If we're checking that into the git repository, it's not small, and it'd need to change whenever we add support for a new Go major version (or minor version).

The advantage of this approach is that it'd be very user friendly: users just `go get -u github.com/gopherjs/gopherjs` on any version of Go and it just works, no mucking around with environment variables.

The disadvantage is the large assets_vfsdata.go file, and complexity when it comes to testing GopherJS (we need the _test.go files and testdata directories to test GopherJS on std lib packages).

I think this is something we should explore more in the future, I don't think we should implement it now.

## Proposal

For now, I'm leaning towards implementing alternative 1: moving the Go distribution version check from build-time to run-time, and adding support for the `GOPHERJS_GOROOT` environment variable. It would have to be documented, and the error messages should mention it.

Thoughts?