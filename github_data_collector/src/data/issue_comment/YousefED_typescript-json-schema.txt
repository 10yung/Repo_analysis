### this report when a class has a (HTMLCanvasElement) property

```
RangeError: Maximum call stack size exceeded
    at JsonSchemaGenerator.getDefinitionForRootType (/home/joelee/projects/richlox-engine/node_modules/typescript-json-schema/typescript-json-schema.ts:527:59)
    at JsonSchemaGenerator.getTypeDefinition (/home/joelee/projects/richlox-engine/node_modules/typescript-json-schema/typescript-json-schema.ts:1077:26)
    at JsonSchemaGenerator.getDefinitionForRootType (/home/joelee/projects/richlox-engine/node_modules/typescript-json-schema/typescript-json-schema.ts:527:59)
    at JsonSchemaGenerator.getTypeDefinition (/home/joelee/projects/richlox-engine/node_modules/typescript-json-schema/typescript-json-schema.ts:1077:26)
    at JsonSchemaGenerator.getDefinitionForRootType (/home/joelee/projects/richlox-engine/node_modules/typescript-json-schema/typescript-json-schema.ts:527:59)
    at JsonSchemaGenerator.getTypeDefinition (/home/joelee/projects/richlox-engine/node_modules/typescript-json-schema/typescript-json-schema.ts:1077:26)
    at JsonSchemaGenerator.getDefinitionForRootType (/home/joelee/projects/richlox-engine/node_modules/typescript-json-schema/typescript-json-schema.ts:527:59)
    at JsonSchemaGenerator.getTypeDefinition (/home/joelee/projects/richlox-engine/node_modules/typescript-json-schema/typescript-json-schema.ts:1077:26)
    at JsonSchemaGenerator.getDefinitionForRootType (/home/joelee/projects/richlox-engine/node_modules/typescript-json-schema/typescript-json-schema.ts:527:59)
    at JsonSchemaGenerator.getTypeDefinition (/home/joelee/projects/richlox-engine/node_modules/typescript-json-schema/typescript-json-schema.ts:1077:26)
error Command failed with exit code 1.
```
# problem

consider `Record<string, true>`, and that it outputs: `$ref: #/definitions/Record<string, true>`, where `#/definitions/Record<string, true>` in the definitions object is:

```
    "Record<string,Record<string,true>>": {
      "description": "Construct a type with a set of properties K of type T",
      "type": "object"
    },
```

# discussion

i would expect that such an abstract type may be unpacked into more specific _things_ or compiled into an intermediate representation that is `{ [key: string]: true }` which would yield nicer definitions.

i'm a rook w/ some of this stuff, so i may have not used the correct verbiage.  thx!
```typescript
enum Fruit {
  Apple = 'apple',
  Orange = 'orange'
}
class Test {
  fruit: Fruit = Fruit.Apple;
}
```
Then I get:
```typescript
{
  fruit: {
    enum: ['apple', 'orange'],
    type: 'string',
  }
}
```
I expect the default can be set in here.

This PR just shows whether or not you can do:

```
type integer = number;

interface MyObject {
  array: integer[];
}
```

and get an array with `items.type` set to `integer`.

Test case for https://github.com/YousefED/typescript-json-schema/issues/322

I think if we switch to a slightly different usage of the typescript API, then the compiler's config loader will handle "extends" in tsconfig files.

As-is, it looks like "extends" is ignored.

ts-node uses the compiler API differently and gets "extends" support for free.

https://github.com/TypeStrong/ts-node/blob/master/src/index.ts#L626-L652
Annotations are not generated for enum types.

```
$ npx typescript-json-schema --version
0.40.0
```
Example types

```
export enum Fruit {
  /**
   * An Apple
   */
  Apple = "apple",
  /**
   * An Orange
   */
  Orange = "orange"
}

export interface Menu {
  /**
   * Type of Fruit
   */
  fruit: Fruit;
}

```
Processed with:

```npx typescript-json-schema ./tsconfig.json Menu```


Generates:

```
{
    "$schema": "http://json-schema.org/draft-07/schema#",
    "definitions": {
        "Fruit": {
            "enum": [
                "apple",
                "orange"
            ],
            "type": "string"
        }
    },
    "properties": {
        "fruit": {
            "$ref": "#/definitions/Fruit",
            "description": "Type of Fruit"
        }
    },
    "type": "object"
}

```






ts-node t.ts
`xxx\node_modules\_typescript@3.7.2@typescript\lib\typescript.js:35954
            function trySymbolTable(symbols, ignoreQualification) {
                                   ^

RangeError: Maximum call stack size exceeded
`

// t.ts
const path = require('path')
const TJS = require('typescript-json-schema')
const glob = require('glob')

// optionally pass argument to schema generator
const settings = {
  required: true,
  uniqueNames: true,
  out: './a.json',
  strictNullChecks: true,
  include: ['**/*schema.ts'],
}

TJS.exec('./tsconfig.json', '*', settings)

// tsconfig.json
`{
  "compilerOptions": {
    /* Basic Options */
    // "incremental": true,                   /* Enable incremental compilation */
    "target": "es5",                          /* Specify ECMAScript target version: 'ES3' (default), 'ES5', 'ES2015', 'ES2016', 'ES2017', 'ES2018', 'ES2019' or 'ESNEXT'. */
    "module": "ESNext",                     /* Specify module code generation: 'none', 'commonjs', 'amd', 'system', 'umd', 'es2015', or 'ESNext'. */
    // "lib": [],                             /* Specify library files to be included in the compilation. */
    "allowJs": true,                       /* Allow javascript files to be compiled. */
    // "checkJs": true,                       /* Report errors in .js files. */
    "jsx": "preserve",                     /* Specify JSX code generation: 'preserve', 'react-native', or 'react'. */
    // "declaration": true,                   /* Generates corresponding '.d.ts' file. */
    // "declarationMap": true,                /* Generates a sourcemap for each corresponding '.d.ts' file. */
    "sourceMap": true,                     /* Generates corresponding '.map' file. */
    // "outFile": "./",                       /* Concatenate and emit output to single file. */
    // "outDir": "./",                        /* Redirect output structure to the directory. */
    // "rootDir": "./",                       /* Specify the root directory of input files. Use to control the output directory structure with --outDir. */
    // "composite": true,                     /* Enable project compilation */
    // "tsBuildInfoFile": "./",               /* Specify file to store incremental compilation information */
    // "removeComments": true,                /* Do not emit comments to output. */
    // "noEmit": true,                        /* Do not emit outputs. */
    // "importHelpers": true,                 /* Import emit helpers from 'tslib'. */
    // "downlevelIteration": true,            /* Provide full support for iterables in 'for-of', spread, and destructuring when targeting 'ES5' or 'ES3'. */
    // "isolatedModules": true,               /* Transpile each file as a separate module (similar to 'ts.transpileModule'). */

    /* Strict Type-Checking Options */
    // "strict": true,                           /* Enable all strict type-checking options. */
    // "noImplicitAny": true,                 /* Raise error on expressions and declarations with an implied 'any' type. */
    // "strictNullChecks": true,              /* Enable strict null checks. */
    // "strictFunctionTypes": true,           /* Enable strict checking of function types. */
    // "strictBindCallApply": true,           /* Enable strict 'bind', 'call', and 'apply' methods on functions. */
    // "strictPropertyInitialization": true,  /* Enable strict checking of property initialization in classes. */
    // "noImplicitThis": true,                /* Raise error on 'this' expressions with an implied 'any' type. */
    // "alwaysStrict": true,                  /* Parse in strict mode and emit "use strict" for each source file. */

    /* Additional Checks */
    // "noUnusedLocals": true,                /* Report errors on unused locals. */
    // "noUnusedParameters": true,            /* Report errors on unused parameters. */
    // "noImplicitReturns": true,             /* Report error when not all code paths in function return a value. */
    // "noFallthroughCasesInSwitch": true,    /* Report errors for fallthrough cases in switch statement. */

    /* Module Resolution Options */
    "moduleResolution": "node",            /* Specify module resolution strategy: 'node' (Node.js) or 'classic' (TypeScript pre-1.6). */
    "baseUrl": "./",                       /* Base directory to resolve non-absolute module names. */
    "paths": {
      "@/*": ["src/*"],
      "utils/*": ["src/utils/*"],
      "components/*": ["src/components/*"]
    },                           /* A series of entries which re-map imports to lookup locations relative to the 'baseUrl'. */
    // "rootDirs": [],                        /* List of root folders whose combined content represents the structure of the project at runtime. */
    // "typeRoots": [],                       /* List of folders to include type definitions from. */
    // "types": [],                           /* Type declaration files to be included in compilation. */
    // "allowSyntheticDefaultImports": true,  /* Allow default imports from modules with no default export. This does not affect code emit, just typechecking. */
    "esModuleInterop": true,                   /* Enables emit interoperability between CommonJS and ES Modules via creation of namespace objects for all imports. Implies 'allowSyntheticDefaultImports'. */
    // "preserveSymlinks": true,              /* Do not resolve the real path of symlinks. */
    // "allowUmdGlobalAccess": true,          /* Allow accessing UMD globals from modules. */

    /* Source Map Options */
    // "sourceRoot": "",                      /* Specify the location where debugger should locate TypeScript files instead of source locations. */
    // "mapRoot": "",                         /* Specify the location where debugger should locate map files instead of generated locations. */
    // "inlineSourceMap": true,               /* Emit a single file with source maps instead of having a separate file. */
    // "inlineSources": true,                 /* Emit the source alongside the sourcemaps within a single file; requires '--inlineSourceMap' or '--sourceMap' to be set. */

    /* Experimental Options */
    "experimentalDecorators": true      /* Enables experimental support for ES7 decorators. */
    // "emitDecoratorMetadata": true,         /* Enables experimental support for emitting type metadata for decorators. */
  }
}
`



It seems integer typing is broken currently; the following code ('foo.ts')
```
/**
 * @minimum 1
 * @TJS-type integer
 */
export type natural = number;

class Foo {
  bar: natural;
}
```
results in the following JSON schema:
```
{
    "$schema": "http://json-schema.org/draft-07/schema#",
    "properties": {
        "bar": {
            "minimum": 1,
            "type": "number"
        }
    },
    "type": "object"
}
```

`bar` should be an integer, but it gets casted to `number`.

We've confirmed this behaviour happening on multiple systems running MacOS, on different versions of this package.

This was working as intended at least 3 months ago (or so), perhaps sooner.
