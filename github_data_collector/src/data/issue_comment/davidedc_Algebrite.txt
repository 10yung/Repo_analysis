**Expected:**
algebrite.org to list latest stable as v1.3.1 and the test boxes to run against v1.3.1

**Actual:**
algebrite.org lists latest stable as v1.2.0 and runs examples off of 1.2.0

Also relevant: http://algebrite.org/sandboxes/latest-stable/sandbox.html
Which releases are considered stable? Would v1.3.0 be the one to update to?
The command "clear" in Algebrite clears all predefined symbols. If you enter:

```
clear
e
```

Algebrite returns:
```
e undefined
```
I'm looking into integrating Algebrite into my javascript web app for comparing math expressions that a user inputs in a text field with the correct solutions.

While testing I'm experiencing that sometimes Algebrite.simplify slows down significantly even though I'm just adding a "+1".

Calling `Algebrite.simplify("x^(-6)+1")` takes ~15-24sec to calculate while `Algebrite.simplify("x^(-6)")` takes roughly 20ms.

Can you fix this issue or at least explain why this is happening?

When running this on your demo website or in the console, I'm getting results almost instantly. I'm using a minified version of the algebrite.bundle-for-browser.js.

Thanks in advance!
By example: if I do
```
defint(x sin(x), x, 1, 2)
```
it gives me:
```
cos(1)-2*cos(2)-sin(1)+sin(2)
```

if I add double number in the range, sometimes it works, sometimes it doesn't.

By example: if I do
```
defint(x sin(x), x, 1.1, 2)
```
it gives me:
```
Stop: integral: sorry, could not find a solution
```
When entering 'float(tan(pi/2))' the result is a big numeric result. Similarly with other spots at which the tangent should be undefined. Maybe output an error message instead?
It'd be nice if there were a way to get (-1)^(1/3) to return -1 instead of a complex number.
I can get it using roots(x^3+1), but it doesn't seem like there's any easy way for me to pick the real root out of the roots list.
e.g. in

```Algebrite.ANY_FUNCTION(Algebrite.factor('1/2x+3/7'));```

ANY_FUNCTION won't get the factored input, cause its argument is evaluated and hence the factors will be re-expanded.

Is this needed? Can this be controlled better? (this came out of the discussion in https://github.com/davidedc/Algebrite/issues/91 )
At the moment rationalize(1/2*x+3/7) returns the term unchanged.
Numerator gives 1/2*x+3/7 and denominator 1

I'd expect/like to get (7*x+6)/14, 7*x+6 and 14.

I guess this behavior is expected, but is there a way to change it, so that I get the results I'd like to have (or an other option)?

Thanks
factor(x*(x+1)/(x+1)) returns x/(x+1) + x^2/(x+1).  It should return x.

It seems that in cases involving fractions, the system tries to distribute first before resolving the fractions.

ASSUMED STEPS IN ALGEBRITE:
x*(x+1)/(x+1) => (x^2 + x) / (x+1) => (x^2)/(x+1) + x/(x+1)

Instead, when factoring, the system should recognise that sums within products can be cancelled out within fractions.
I tried to solve an equation with modular arithmetic, but there seems to be a syntax error here:

`(x % 4)+1=3`

```
(x % ?  4)+1=3
Stop: ) expected
```

Is Algebrite able to solve equations that include modular arithmetic?