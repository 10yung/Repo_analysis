Hi,

I'm looking to parse GFF3 format fasta files, specifically to extract the genomic fasta sequence, which are after the `##FASTA` line. Here's an example gff file that has that in it:
https://www.ebi.ac.uk/metagenomics/api/v1/genomes/MGYG-HGUT-02603/downloads/MGYG-HGUT-02603.gff

Is there any way to extract those data through the rust-bio API? If so I might try helping implement one - any particular pointers on that? For the `##FASTA` directive, perhaps it makes sense to provide an iterator over the sequences as `bio::fasta::Record`s, consuming the reader since it is at the end of the file?

Thanks
Our current implementation of fastq parsing does not strictly handle all [valid forms of fastq](https://academic.oup.com/nar/article/38/6/1767/3112533). In particular, we do not handle when sequence/quality lines are wrapped.  
A simple, failing test case to illustrate

```rust
#[test]
fn test_read_sequence_and_quality_are_wrapped_is_handled() {
    let fq: &'static [u8] = b"@id description\nACGT\nGGGG\nC\n+\n@@@@\n!!!!\n$\n";
    let mut reader = Reader::new(fq);

    let mut actual = Record::new();
    reader.read(&mut actual).unwrap();
    let expected = Record::with_attrs("id", Some("description"), b"ACGTGGGGC", b"@@@@!!!!$");

    assert_eq!(actual, expected)
}
```

This test fails with the following.

```
thread 'io::fastq::tests::test_read_sequence_and_quality_are_wrapped_is_handled' panicked at 'assertion failed: `(left == right)`
  left: `Record { id: "id", desc: Some("description"), seq: "ACGT\n", qual: "C\n" }`,
 right: `Record { id: "id", desc: Some("description"), seq: "ACGTGGGGC", qual: "@@@@!!!!$" }`', src/io/fastq.rs:552:9
```

As an aside, it would also be worth discussing whether my "expected" `Record` is correct. i.e do we want to keep the newline characters in the [`seq` member](https://github.com/rust-bio/rust-bio/blob/f70fed2a6b5c0b8c0938bdfd8b0778069deff810/src/io/fastq.rs#L158) of `Record` and then have the [method `seq()`](https://github.com/rust-bio/rust-bio/blob/f70fed2a6b5c0b8c0938bdfd8b0778069deff810/src/io/fastq.rs#L224) strip them out? Or should we always strip them?

It would be great to come to a collective decision on how Fastq should be handled. I am happy to contribute a bunch of test cases and corners cases and also implement.

I have many similar sequences of different lengths and need to get the consensus of them.
From the docs, the poa module should work for this, but any example provided? 
Rust-bio works fine in wasm32 targets (both `-unknown-unknown` and `-wasi`). But it is easy to start having problems if more dependencies are added, and as the scope of the library increases.

@k3yavi opened an issue about adding [Single-Cell Data related functions](https://github.com/rust-bio/rust-bio/issues/236) and started implementing them in https://github.com/rust-bio/rust-bio/pull/238. Because it depends on HDF5 libraries for input, it is not compiling in wasm32 targets anymore. This is an example of a use case that would break: https://www.smashingmagazine.com/2019/08/beyond-browser-serverless-webassembly/

Are features something that rust-bio would support? Or do they complicate development too much?

I think it's fine to add all features to default, and have full support for them. But being able to pick a smaller feature set also allows compiling to other interesting targets, even if not all functionality is supported.


Hi team rust-bio,

I am excited to make my first PR contribution to this great community effort !
As discussed in https://github.com/rust-bio/rust-bio/issues/236 , the idea is to support parsing, writing and converting various single cell cell-v-feature count matrices. Initial effort for comparing (mtx, loom, H5, EDS, CSV) wrt their size, loading time and memory can be found [here](https://github.com/COMBINE-lab/EDS/blob/master/README.md). As this is my first contribution, please feel free to comment if I missed any contributor guidelines. I do have a few questions.

* what's the guidelines for logging the progress ? I really like progress monitors or at least being able to log at what stage the pipeline has reached but I was unsure how to do that in rust-bio world?
* What are the guidelines for propagating the `Error` object upstream to the library, currently I am working with generic `Box<dyn Error>`?

PS: This PR adds the EDS based parsers, I will add the support for other formats ones I have few more cycles
Hi guys,

I was wondering if we plan to support various single-cell data analyses related packages within rust-bio or may be some sub-ecosystem ? As a starter, I've been writing very basic functions for parsing various matrix formats in single-cell world [here](https://github.com/COMBINE-lab/EDS). My motivation with this PR is to start the discussions to questions like how should we be storing, retrieving the gene/feature expression data (usually in the form of sparse matrix) as efficiently (disk space, RAM usage, loading time) as possible. What would be an optimal interim format we should use to convert one format to other. In [EDS](https://github.com/COMBINE-lab/EDS) repo, I started to explore this a bit. 

While working with [alevin](https://genomebiology.biomedcentral.com/articles/10.1186/s13059-019-1670-y) we have to deal with big matrices ( increasingly moving towards the order of millions of rows/cells) and we have to process it through other tools requiring various types of output matrix formats. I'd love to integrate this with rust-bio as it already provides an awesome suite of libraries but not sure what's the best way to do so, or more fundamentally that if my implementations are the most efficient versions possible.

Also, It'd be great, if in the future we start to integrate various other widely used tools like tSNE, Umap, seurat, monocle etc.

Thanks again !
Firstly, thank you for `rust-bio`! I'm a new user, and enjoying it.
I just want to confirm that `bio::alignment::pairwise::Aligner` does not also align the reverse complement. Is there an aligner in `rust-bio` that does? The workaround is straight forward enough of course: reverse complement one of the two sequences and repeat the alignment, and keep the one with the better alignment score. It seems like a common operation though, that could benefit from a function (if it doesn't already exist).
(I set it as a draft PR to ask for comments before going further)

I want to have an unified one of opening a FASTA or FASTQ stream and parse it. The approach here uses new enums `fastx::Reader` and `fastx::Record` wrapping their `fasta` and `fastq` equivalents:
```
pub enum Reader<R: io::Read> {
    FASTA(fasta::Reader<R>),
    FASTQ(fastq::Reader<R>),
}
```
and then I implemented the `FastqRead` and `FastaRead` traits for the new `fastx::Reader`.
These are closed types (with enums) opposed to using open types (defining a trait and moving trait objects around). But I don't foresee this being adapted to other `Record`/`Reader` formats (especially GFF and BED, the other available in this crate).

I can't do this outside rust-bio because I use the `Reader::new` method to check it is a FASTA or FASTQ file, and then create the appropriate `fasta::Reader` or `fastq::Reader` struct:
https://github.com/rust-bio/rust-bio/pull/222/files#diff-392995b83cc786a5f370f588871b2f92R94
I had to change private fields in both structs, so I made the internals of the struct `pub(crate)` to let them be initialized in the crate (and I don't think the `reader` and `line` fields should be exposed in any way outside the crate).

I also made the `read` method in `fastq::Reader` more into what its counterpart in `fasta::Reader` is doing, avoiding clearing the `line_buf` field in the beginning (which defeated the purpose of setting it during the initialization in `fastx::Reader::new()`.

## TODO

- [x] more tests (I only copied two from the `fasta` and `fastq` modules)
- [x] finish the `unimplemented!` bits
- [x] error handling when creating a new Reader
- [x] maybe avoid reimplementing the Records iterator?
- [ ] docs
I've been toying with building a Wavelet tree for doing rank/select queries over arbitary alphabets. It seems like the RankSelect data structure would be a great choice for the underlying bitmaps.

Things would be easier if the RankSelect structure supported a push operation. Could this be added, or is it designed to be static (constructed from a BitVec and never modified)?