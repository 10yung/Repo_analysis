The given solution in Python throws a `TypeError` for the given example and `IndexError` for other examples. A couple of suggested changes:

1. Use integer division in line 13
2. Adjust k only once

### Something like this:
```
def kth_largest(l, k):
    """
    Shorthand Quicksort
    Runtime: O(n * log n)
    """
    # kth largest element
    # is k-1th element in output
    def qsort(arr, pos):
        middle = len(arr)//2
        pivot = arr[middle]
        smaller = [i for i in arr if i < pivot]
        if pos < len(smaller):
            return qsort(smaller, pos)
        equal = [i for i in arr if i == pivot]
        if pos < len(smaller) + len(equal):
            return pivot
        larger = [i for i in arr if i > pivot]
        return qsort(larger, pos - len(smaller) - len(equal))

    return qsort(l, k-1)
```


Awesome repo, but I came across the quicksort solution done here and I don't believe it's the canonical solution when quicksort is typically described to be an "in-place" sort. The implemented solution allocates new arrays in which values to the left and right are placed into their corresponding auxiliary arrays (lists) -- I've denoted the places that I see them in the code w/ a comment. I believe the implementation should utilize swaps w/o allocating auxiliary data structures. Lastly, the list concatenation also incurs a linear time cost as a new list/array is allocated and all elements in each sub-array must be copied over:
```python
def _sort(self, data):
        if len(data) < 2:
            return data
        equal = [] # extra space
        left = [] # extra space
        right = [] # extra space
        pivot_index = len(data) // 2
        pivot_value = data[pivot_index]
        # Build the left and right partitions
        for item in data:
            if item == pivot_value:
                equal.append(item)
            elif item < pivot_value:
                left.append(item)
            else:
                right.append(item)
        # Recursively apply quick_sort
        left_ = self._sort(left)
        right_ = self._sort(right)
        return left_ + equal + right_ # O(n) [where n is the size of the original input]
```
FAMOUS DP PROBLEM WITH EXPLANATION FOR BEGGINNERS
Fix typo in the test case description for the "mean".  Sum is 55, number of elements is 11, so the mean is 5.  The actual test case is correct.
I think there are some mistakes in sort_stack's pseudocode and test cases description.

The test cases section says:

> * Empty stack -> None

But it should be returning an empty stack, not None.

Under the algorithm section, it says

> "    * While buffer is not empty or buffer top is > than temp\n",

but the code says

```py
while not buff.is_empty() and temp < buff.peek():
```

so that should be an **and**, not an **or**.

It also says

> "* Our buffer will hold elements in reverse sorted order, smallest at the top\n",

but the buffer stores elements in sorted order, largest at the top. Otherwise, how could we return buffer as our answer when the output should have the largest element at the top?

I also suggest changing 

> "* Store the current top element in a temp variable\n",

to 

> "    * Pop the current top element of stack into a temp variable\n",

This clarifies that the top element is not just copied to a temp variable, but rather popped off into the temp variable. Also this happens within the outer while loop, not before.

Here's the code version of the solution for reference:

```py
class MyStackSimplified(Stack):

    def sort(self):
        buff = MyStack()
        while not self.is_empty():
            temp = self.pop()
            while not buff.is_empty() and temp < buff.peek():
                self.push(buff.pop())
            buff.push(temp)
        return buff
```

I've submitted pull request #263 for this issue.
Here are some suggestions I have for the wording of sort_stack_challenge.ipynb and sort_stack_solution.ipynb, to reflect the actual code and test cases more accurately:

- Based on the code and the test cases, the output given an empty stack should be another empty stack, not None
- Buffer stores elements in sorted order, with largest element at top, not reverse sorted order with smallest element at top. Otherwise, how could we return buffer as our answer when the output should have the largest element at the top?
- While buffer is not empty **and** buffer top is > than temp (not **or**)
- Clarify that the top element is not just copied to a temp variable, but rather popped off into the temp variable. This happens within the while loop, not before.

#264 



https://mybinder.org/   Should I make a binder ? :) Or if there is a binder link, it's well hidden.