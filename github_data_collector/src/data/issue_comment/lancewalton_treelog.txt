Updates [com.github.gseitz:sbt-release](https://github.com/sbt/sbt-release) [from 1.0.11 to 1.0.13](https://github.com/sbt/sbt-release/compare/v1.0.11...v1.0.13).
[Release Notes/Changelog](https://github.com/sbt/sbt-release/releases/tag/v1.0.13)

I'll automatically update this PR to resolve conflicts as long as you don't change it yourself.

If you'd like to skip this version, you can just close this PR. If you have any feedback, just mention me in the comments below.

Have a fantastic day writing Scala!

<details>
<summary>Ignore future updates</summary>

Add this to your `.scala-steward.conf` file to ignore future updates of this dependency:
```
updates.ignore = [ { groupId = "com.github.gseitz", artifactId = "sbt-release" } ]
```
</details>

labels: sbt-plugin-update, semver-patch
Updates [org.scala-sbt:sbt](https://github.com/sbt/sbt) [from 1.3.3 to 1.3.7](https://github.com/sbt/sbt/compare/v1.3.3...v1.3.7).
[Release Notes/Changelog](https://github.com/sbt/sbt/releases/tag/v1.3.7)

I'll automatically update this PR to resolve conflicts as long as you don't change it yourself.

If you'd like to skip this version, you can just close this PR. If you have any feedback, just mention me in the comments below.

Have a fantastic day writing Scala!

<details>
<summary>Ignore future updates</summary>

Add this to your `.scala-steward.conf` file to ignore future updates of this dependency:
```
updates.ignore = [ { groupId = "org.scala-sbt", artifactId = "sbt" } ]
```
</details>

labels: library-update, semver-patch
Updates [org.scala-sbt:sbt](https://github.com/sbt/sbt) from 1.3.3 to 1.3.6.


I'll automatically update this PR to resolve conflicts as long as you don't change it yourself.

If you'd like to skip this version, you can just close this PR. If you have any feedback, just mention me in the comments below.

Have a fantastic day writing Scala!

<details>
<summary>Ignore future updates</summary>

Add this to your `.scala-steward.conf` file to ignore future updates of this dependency:
```
updates.ignore = [ { groupId = "org.scala-sbt", artifactId = "sbt" } ]
```
</details>

labels: sbt-plugin-update, semver-patch
Updates com.jsuereth:sbt-pgp from 1.1.2 to 2.0.1.


I'll automatically update this PR to resolve conflicts as long as you don't change it yourself.

If you'd like to skip this version, you can just close this PR. If you have any feedback, just mention me in the comments below.

Have a fantastic day writing Scala!

<details>
<summary>Ignore future updates</summary>

Add this to your `.scala-steward.conf` file to ignore future updates of this dependency:
```
updates.ignore = [ { groupId = "com.jsuereth", artifactId = "sbt-pgp" } ]
```
</details>

labels: semver-major
Updates [org.scala-sbt:sbt](https://github.com/sbt/sbt) [from 1.3.3 to 1.3.5](https://github.com/sbt/sbt/compare/v1.3.3...v1.3.5).
[Release Notes/Changelog](https://github.com/sbt/sbt/releases/tag/v1.3.5)

I'll automatically update this PR to resolve conflicts as long as you don't change it yourself.

If you'd like to skip this version, you can just close this PR. If you have any feedback, just mention me in the comments below.

Have a fantastic day writing Scala!

<details>
<summary>Ignore future updates</summary>

Add this to your `.scala-steward.conf` file to ignore future updates of this dependency:
```
updates.ignore = [ { groupId = "org.scala-sbt", artifactId = "sbt" } ]
```
</details>

labels: semver-patch
Updates [org.scala-sbt:sbt](https://github.com/sbt/sbt) from 1.3.3 to 1.3.4.


I'll automatically update this PR to resolve conflicts as long as you don't change it yourself.

If you'd like to skip this version, you can just close this PR. If you have any feedback, just mention me in the comments below.

Have a fantastic day writing Scala!

<details>
<summary>Ignore future updates</summary>

Add this to your `.scala-steward.conf` file to ignore future updates of this dependency:
```
updates.ignore = [ { groupId = "org.scala-sbt", artifactId = "sbt" } ]
```
</details>

labels: semver-patch
I start using `DescribedComputationT`

```
import cats.effect.IO
import cats.effect.implicits._
import treelog.LogTreeSyntaxWithoutAnnotations._

type DctIO[A] = DescribedComputationT[IO, A]

def good(i: Int): DctIO[Int] = DescribedComputationT(IO(i ~> ("i: " + _)))

def bad(i: Int): DctIO[Int] = DescribedComputationT(IO(i ~>! ("i: " + _)))
```

I had also 
```
def goodIO(i: Int): IO[Int] = IO(i)

def badIO(i: Int): IO[Int] = IO.raiseError(new Throwable(s"Bad $i"))
```

Then I start writing a simple ScalaTest:
```
"TreeLog" - {
  "Basic IO" in goodIO(10).unsafeToFuture().map(v => assert(v === 10))
  "Basic"    in good(10).run.unsafeToFuture().map(v => assert(v.value.value === 10.asRight))

  "<* IO" in (goodIO(10) <* goodIO(42)).unsafeToFuture().map(v => assert(v === 10))
  "<*"    in (good(10) <* good(42)).run.unsafeToFuture().map(v => assert(v.value.value === 10.asRight)) 
                       ^ Error: <* is not a member of DctIO

  "tupled IO" in (goodIO(10), goodIO(42)).tupled.unsafeToFuture().map(v => assert(v === (10, 42)))
  "tupled"    in (good(10), good(42)).tupled.run.unsafeToFuture().map(v => assert(v.value.value === (10, 42).asRight))
                                      ^ Error: could not find implicit value for parameter invariant: cats.Invariant[DctIO]

  "recover IO" in badIO(10).recoverWith { case _ => goodIO(42) }.unsafeToFuture().map(v => assert(v === 42))
  "recover"    in bad(10).recoverWith { case _ => good(42) }.run.unsafeToFuture().map(v => assert(v.value.value === 42.asRight))
                          ^ Error: recoverWith is not a member of DctIO[Int]
}
```


Replace
```
x ← 11 ~> ("x = " + _)
```
By
```
x ← 11 ~>: "x = "
```

`~>:` / `:~>` inspired from `scala.collection.SeqLike` `+:` / `:+`.
Judging on the dependencies. I don't think it would be too hard.

