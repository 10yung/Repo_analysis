Hi, I've been struggling to do one thing, that I think is really easy, but I can figure out how.

So in my case I have a type:
```c#
interface ITest<TT>{
    void Do<TM>(){}
}

class MyClass : ITest<int>
{
    // method I want to create
    void TestTarget<int>.Do<TM>(){}
}
```

I need to call method ```Do``` from within the same module. For this I need a reference to method ```ITest.Do``` so I can set its ```DeclaringType=new GenericInstanceType(  <ITest>, <int>   )``` and then pass the result to ```new GenericInstanceMethod()``` and  ```Method.Overrides.Add()```

I tried:
1. Create a reference by utilizing ```Module.ImportReference()``` - doesn't work - returns the same definition

2. Create a reference manually ```new MethodReference()``` and **copy** all the stuff - sorta works, but here when I copy GenericParameters references they are changed in the way that they now belong to this reference instead of original definition which cause exception on final write

3. Create a reference manually ```new MethodReference()``` and **clone** all the stuff - sorta works unless I try to use resulting reference in ```Method.Overrides.Add()```, because it seems like here I need to have a reference with original ```TM``` generic param and not a clone.

So to recap, I couldn't find a proper way to create MethodReference for definition in the same module with original GenericParameter, so I can use it in ```Method.Overrides.Add()```

There is a repro for this issue at https://github.com/r-bennett/MonoCecilGenerics (see the README there).

The problem occurs when we have a type with fairly complex generics like this:
```
    public class ClassWithConvolutedGenerics<TTools> where TTools : GenericType<TTools>
    {
        public ClassWithConvolutedGenerics(Func<string, GenericType<TTools>.NestedType, TTools> func) {}
    }
```
(which we came across in some 3rd-party JetBrains dlls)

If we build the module containing that type then use Mono Cecil to get a `TypeReference` for the type `GenericType`, the `TypeReference` looks different if we get it via the constructor's parameters or via the class's generic constraint (what we get from the generic constraint looks correct to me, what we get from the constructor parameters looks wrong - in particular `IsGenericInstance` and `HasGenericParameters` differ).

Presumably Mono Cecil is doing some caching of the type, because once we've accessed the `TypeReference` through the class's generic constraint it updates the `TypeReference` we got from the constructor parameters.

Exactly what I mean by the above is in code in the repro at https://github.com/r-bennett/MonoCecilGenerics/blob/master/app/ConsoleApp1/Program.cs

It's worth noting that this is only an issue in the case when `GenericType` is defined in a different module to `ClassWithConvolutedGenerics`.

I'm not sure if this a bug, or expected behaviour which I don't understand, or user error but would appreciate some guidance on it. 

Thanks,
Richard






Hi Jb,

When you rename a TypeReference (reference to a type defined in different assembly), any constants of such type used as attribute constructor parameters are not renamed (their type is not renamed) in exported assembly. 

Example:

```csharp
// LibA
public enum Foo { A }

// LibB
public class CustomAttribute : Attribute {
    public CustomAttribute(Foo f) {}
}

[Custom(Foo.A)]
public class Cat {}

// When you rename TypeReference Foo to e.g. Bar in LibB, exported dll still uses type Foo for the attribute ctor parameter constant, resulting in type not found exception in runtime. 
```

At first glance it seems to me that the type name in blob heap is not updated properly. 
Fix for #628. We'll be losing a bit of performance on `GetType(namespace, name)` and `GetType(fullName)`, but we were not invalidating the cache properly.
TypeDefinitionColleciton.name_cache keeps old namespace and name key. This causes errors when trying to export another assembly where TypeReferences were appriopriately renamed as well - resolving TypeReference to TypeDefinition fails. 

Example:

```csharp
// LibA.dll
public enum Foo { A }

// LibB.dll (references LibA)
public void Bar(Foo x = Foo.A) { } 
```
Currently, it's no picnic to output .NET Standard libs on Cecil. Granted, it is possible, but with a lot of added complexity (such as finding the ref `netstandard.dll` in the NuGet Package Cache manually). It'd be nice if Cecil had some way of handling this within the library, such as a `UseNetStandard` flag which will automatically map `System.Private.CoreLib` and `mscorlib` references to `netstandard`.

There's a number of ways this could be tackled in the library, but I want this issue to serve as a little discussion issue regarding the matter.
Steps to reproduce

```cs
using System.Diagnostics;
using System.IO;
using System.Reflection.PortableExecutable;
using Mono.Cecil;

public class Program
{
    public static void Main()
    {
        const string Path = "executable.dll";

        using (var reader = new PEReader(new FileStream(Path, FileMode.Open)))
        {
            Debug.Assert(reader.PEHeaders.CoffHeader.Characteristics ==
                (Characteristics.ExecutableImage | Characteristics.LargeAddressAware));
        }

        using (var module = ModuleDefinition.ReadModule(Path, new ReaderParameters { ReadWrite = true }))
        {
            module.Write();
        }

        using (var reader = new PEReader(new FileStream(Path, FileMode.Open)))
        {
            Debug.Assert(reader.PEHeaders.CoffHeader.Characteristics ==
                (Characteristics.ExecutableImage | Characteristics.Bit32Machine));
        }
    }
}
```
per https://groups.google.com/forum/#!topic/mono-cecil/AGq0LfBdqjo

@jbevain this is an implementation of the above, very old Google Group discussion, so things may have changed since then other than API specifics. 

Let me know if, with the addition of appropriate tests, that this could be accepted, or if there are alternatives to achieving the same result.
