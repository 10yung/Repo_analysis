The following app displays the value of `x` and has a button that will stop the app.  The value of `x` gets initialized by the `onStart` function. There's an `onSessionEnded` callback which increments `x`.

We'd expect the app to display `x: 1` each time it runs.

```R
library(shiny)

x <- NULL
app <- shinyApp(
  fluidPage(
    textOutput("txt"),
    actionButton("close", "Close app")
  ),
  function(input, output) {
    output$txt <- renderText({
      paste0("x: ", x)
    })
    
    observeEvent(input$close, {
      message("close button was clicked")
      stopApp("close button")
    })

    onSessionEnded(function() {
      message("Executing onSessionEnded callback.")
      x <<- x + 1
    })
  },
  onStart = function() {
    x <<- 1
  }
)
```

When you run it like this, with one `runApp` after the other -- without letting control go to the console -- the app displays `x: 1` on the first run, and then `x: 2` on the second. Also note the strange order that the diagnostic messages are printed out:

```R
{
  runApp(app)
  runApp(app)
}
#> Listening on http://127.0.0.1:7789
#> close button was clicked
#> 
#> Listening on http://127.0.0.1:7789
#> Executing onSessionEnded callback.
#> close button was clicked
#> [1] "close button"
#> Executing onSessionEnded callback.
```


Adding some `run_now()` calls in between makes it display `x: 1` both times.

```R
{
  runApp(app)
  for (i in 1:10) later::run_now()
  runApp(app)
}
#> Listening on http://127.0.0.1:7789
#> close button was clicked
#> Executing onSessionEnded callback.
#> 
#> Listening on http://127.0.0.1:7789
#> close button was clicked
#> [1] "close button"
#> Executing onSessionEnded callback.
```


The problem seems to be that, without the `run_now()` calls after the first app, the `onSessionEnded` callback can bleed into the next app.

cc @schloerke 
* installing *source* package ‘shiny’ ...
** package ‘shiny’ successfully unpacked and MD5 sums checked
** R
** inst
** preparing package for lazy loading
Warning: replacing previous import by ‘Rcpp::evalCpp’ when loading ‘later’
Warning: S3 methods ‘format.staticPath’, ‘format.staticPathOptions’, ‘print.staticPath’, ‘print.staticPathOptions’ were declared in NAMESPACE but not found
Error in library.dynam(lib, package, package.lib) : 
  shared object ‘httpuv.so’ not found
ERROR: lazy loading failed for package ‘shiny’
* removing ‘/home/mmdoka/R/i686-pc-linux-gnu-library/3.2/shiny’
Warning in install.packages :
  installation of package ‘shiny’ had non-zero exit status
ERROR: dependency ‘shiny’ is not available for package ‘crosstalk’
* removing ‘/home/mmdoka/R/i686-pc-linux-gnu-library/3.2/crosstalk’
Warning in install.packages :
  installation of package ‘crosstalk’ had non-zero exit status
ERROR: dependency ‘crosstalk’ is not available for package ‘plotly’
* removing ‘/home/mmdoka/R/i686-pc-linux-gnu-library/3.2/plotly’
Warning in install.packages :
  installation of package ‘plotly’ had non-zero exit status
Shiny offers the `snapshotPreprocessOutput` function to preprocess the output of render functions. This works fine if the render function outputs as intended. If the render function returns an error (such as when `shiny::req()` is used), package authors may not realize this value gets passed directly to the preprocessOutput function.

https://github.com/rstudio/shiny/blob/c332c051f33fe325f6c2e75426daaabb6366d50a/R/snapshot.R#L10-L19
I suggest to simply adapt the documentation to say
```
#' @param fun A function that takes the output value from the render function
#' (either the intended output or an error) as an input and returns a
#'   modified value. The returned value will be used for the test snapshot.
```

Even within shiny itself, code does not consider the possibility that `output` may be a silent error instead of the intended value: https://github.com/rstudio/shiny/blob/5828ea74263d2b374d5284810e342e80d3470cf4/R/shinywrappers.R#L663-L670
See also https://github.com/ropensci/plotly/issues/1685



Furthermore, an error in a single `preprocessOutput` should probably not result in a cryptic 500 error when requesting `shinytest` output.
https://github.com/rstudio/shiny/blob/89be4bdce9dce6f8042087ce6ece0763eb8bb10c/R/shiny.R#L519-L526

# Examples
Gist app.R file: https://gist.github.com/rfaelens/a37898ec1614a0751fbd0a763d25dc59

Shinytest file
```
library(shinytest)

app <- ShinyDriver$new(path="myApp/")
cat(app$.__enclos_env__$private$getTestSnapshotUrl() )
app$getAllValues()

app$setInputs(`go_plot`=FALSE) #this fails...
app$getAllValues()

app$setInputs(`go_plot`=TRUE) # aaand we are back
app$getAllValues()

app$setInputs(`go_table`=FALSE) # this fails...
app$getAllValues()

app$setInputs(`go_table`=TRUE) #aaand we are back
app$getAllValues()
```
Adds an `autoColors` argument to `renderPlot()`, which if `TRUE`, detects the background+foreground color of the containing element (and, if bg is not detected, searches for the nearest ancestor with a defined bg) and applies sensible default theming of ggplot2, lattice, and base graphics based on those colors. This argument also accepts a suitably named vector of R color codes (e.g., `autoColors = c(bg = "gray", fg = "red")`), which is useful if you like the default theming rules, but not the automatically detected colors.

```r
library(shiny)
library(ggplot2)

# Globally set the autoColors argument to TRUE
shinyOptions(plot.autocolors = TRUE)

ui <- fluidPage(
  tags$style(HTML("body{background-color: #6c757d; color: #fff}")),
   tabPanel("ggplot", plotOutput("ggplot")),
   tabPanel("base", plotOutput("base"))
)

server <- function(input, output, session) {
  output$ggplot <- renderPlot({
    ggplot(mtcars) + 
      geom_histogram(aes(mpg, color = factor(cyl))) + 
      facet_wrap(~vs) + 
      labs(title = "mtcars", subtitle = "Such vroom")
  })
  output$base <- renderPlot(plot(1:10))
}

shinyApp(ui, server)
```

### TODO

- [x] Support lattice graphics?
- [x] R docs
- [x] Example testing app (https://github.com/rstudio/shiny-examples/pull/183)
- [ ] Unit tests (test `parseCssColor()` and maybe use vdiffr to test the output of `drawPlot()`?)
- [ ] Maybe an article or blog post?  
- [ ] Allow Bootstrap Sass variables (e.g., `autoColors = list(fg = '$primary')`) if a bootstraplib theme is set?
- [ ] Support renderCachedPlot (note that colors must be stirred into cache key)

### Testing notes

Install `remotes::install_github("rstudio/shiny#2740")` and run the example app https://github.com/rstudio/shiny-examples/pull/183. The plot backgrounds should reflect the document's background and the plot's text/labels should reflect the color of the header tags.
I'm having difficulty serving Rmd files when the file is placed in a subdirectory rather than the main directory of the server.  The problem seems to be that the javascript and other resources (e.g., `shiny.min.js`) are not being loaded (returning 404 errors) and thus the page won't run.

Thus:
https://pluto.coe.fsu.edu/rdemos/NormalCalculator.Rmd
works fine, but
https://pluto.coe.fsu.edu/IntroStats/Correlation.Rmd does not.


### System details
RHEL 7.5, Apache 2.4.6
I'm redirecting the rdemos URL to shiny with Apache.
R version 3.6.0, Shiny version 1.4.0
Browser Version: <!-- If applicable -->

Output of `sessionInfo()`:

```
Error in sessioninfo() : could not find function "sessioninfo"
```

### Example application *or* steps to reproduce the problem

See the two URLs above.  These are publicly available.

The steps would be to create a subdirectory under the shiny-server directory on the host machine, and then copy a Rmd file (e.g., index.Rmd) into that subdirectory.  The Rmd file renders correctly at the top level, but not in a lower level.

### Describe the problem in detail

The problem is that when loading shared resource files, e.g., `shiny.min.js`, the sever returns a 404 error instead of the file.  In particular, if the Rmd file is in the XXX subdirectory, then the browser expands "shared/shiny.min.js" as ".../XXX/shared/shiny.min.js".  This then returns a not-found.

I'm calling this an error under shiny not shiny-server as I've tracked the issue down into the shiny package and not the server code.  

I think the issue is in resourcePathHandler(), as I think that "XXX/shared/shiny.min.js" needs to be remapped to "shared/shiny.min.js", but this is not happening for some reason.

I'm kind of stuck as I'm not sure how to debug further than I've gotten.
This is a stab at implementing https://github.com/rstudio/shiny/issues/2732 and incorporates implementation suggestions by @hadley.

The implementation is very small, but this does bring in the commonmark and glue packages as dependencies (but no transitive dependencies). 

- commonmark is widely used as a dependency of roxygen2 but is unlikely to be installed on user machines not geared toward package development.
- glue is part of the tidyverse, and so probably likelier to exist on user machines.
    - I prototyped a pure-R implementation of glue::trim(), but maintaining and testing it seems onerous (I include it at the bottom). It's also wildly inefficient compared to glue's C version.

## Open questions

* Should this be an addition to htmltools instead of to Shiny?
* Currently input strings are trimmed with `glue::trim()` but are not passed to `glue::glue()`, which would both trim them and support interpolation. If the strings were passed to `glue::glue()`, it's not obvious to me how additional arguments to `glue::glue()` could be passed, since additional arguments are currently passed as commonmark::markdown_html() arguments.

## Remaining dev tasks

- [ ] Update NEWS
- [ ] Add tests
- [ ] Add more examples
- [ ] Add shiny-example

## `trim()` in R

```R
trim1 <- function(txt) {
  stopifnot(is.character(txt) && length(txt) == 1)
  # Remove leading and trailing whitespace
  txt <- gsub("^\\W*", "", txt)
  txt <- gsub("\\W*$", "", txt)
  # Determine and strip leading indentation
  lines <- strsplit(txt, "\n", fixed = TRUE)[[1]]
  rest <- tail(lines, -1)
  indents <- vapply(
    gregexpr("^\\W+", x),
    function (m) attr(m, "match.length"),
    numeric(1)
  )
  stripped <- gsub(paste0("^\\W{", min(indents), "}"), "", lines)
  paste0(stripped, collapse = "\n")
}
```

### System details

```
Browser Version: Chrome

R version 3.6.1 (2019-07-05)
Platform: x86_64-w64-mingw32/x64 (64-bit)
Running under: Windows 10 x64 (build 18362)

Matrix products: default

locale:
[1] LC_COLLATE=Portuguese_Brazil.1252 
[2] LC_CTYPE=Portuguese_Brazil.1252   
[3] LC_MONETARY=Portuguese_Brazil.1252
[4] LC_NUMERIC=C                      
[5] LC_TIME=Portuguese_Brazil.1252    

attached base packages:
[1] stats     graphics  grDevices utils     datasets 
[6] methods   base     

other attached packages:
[1] shinydashboard_0.7.1 shiny_1.4.0         

loaded via a namespace (and not attached):
 [1] compiler_3.6.1  fastmap_1.0.1   magrittr_1.5   
 [4] R6_2.4.0        promises_1.1.0  later_1.0.0    
 [7] htmltools_0.4.0 tools_3.6.1     Rcpp_1.0.3     
[10] jsonlite_1.6    digest_0.6.22   xtable_1.8-4   
[13] httpuv_1.5.2    mime_0.7        rlang_0.4.0
```

### Example application or steps to reproduce the problem

app:

```r
    library(shiny)
    library(shinydashboard)
    ui <- fluidPage(

    tags$script(src="jquery.mask.js",type="text/javascript"),
    tags$script(src="jsMask.js",type="text/javascript"),
    
    # Assembling page
    dashboardPage(
        
        # Assembling header
        dashboardHeader(title = "JS in RenderUI", titleWidth = 1294), 
        
        # Assembling sidebar
        dashboardSidebar(
            
            sidebarMenu(
                menuItem("JS in RenderUI", tabName = "custom", icon = icon("search"))
            )
            
        ),
        # Assembling the body of the page
        dashboardBody(
            
            tabItems(
                tabItem(tabName = "custom",
                        br(),
                        br(),
                        uiOutput(outputId = "out")

                )
                
            ) 
            
        )
        
    )
)
server <- function(input, output, session) {
    
    {#### RenderUI -----
        
        # output$out <- renderUI({fluidPage(tags$script(src="jsMask.js",type="text/javascript"),textInput("phoneInput", label = "Phone Mask", width = "100%"))})

        output$out <- renderUI({fluidPage(textInput("phoneInput", label = "Phone Mask", width = "100%"))})
        
    }
    
}

shinyApp(ui, server)
```

www content:

jquery Mask:

https://github.com/igorescobar/jQuery-Mask-Plugin/tree/master/dist

jsMask.js:

```js
   $(function() {
        console.log("Hello!");
        $('#phoneInput').mask('(00)0000-0000');
        console.log("Hello again!");
    });
```
Points returned by `brushedPoints` can include some that are not shown on the plot, e.g., if they are excluded by `xlim` (which leaves some blank space at the edges of the plot where there could be "invisible points"). This could be counterintuitive, and might mean that the `clip` option in `brushOpts` is not working.

[Brief discussion on RStudio Community](https://community.rstudio.com/t/brushedpoints-includes-points-not-shown-in-plot/47985)

R 3.6.1
Shiny 1.4.0
RStudio 1.2.5019
Windows

Example code. To reproduce the problem, use the slider to change the `xlim` such that a point is just excluded, then brush displayed points and note the average. Finally, extend the brushed range outside the `xlim` range such that it covers one of the excluded points and note that the average value changes.

```
library(shiny)
library(tidyverse)

df <- mtcars

ui <- fluidPage(
  plotOutput('plot',brush=brushOpts(id="plot_brush",direction="x")),
  fluidRow(
    column(6,
           sliderInput("range", label="Range", min = 0, 
                       max = max(df$wt), value = c(0, max(df$wt)))
    ),
    column(6,
           tableOutput("brush_info")
    )  
  )
)

server <- function(input, output) {
  output$plot <- renderPlot({
    ggplot(df,aes(x=wt,y=mpg)) +
      geom_point() +
      xlim(input$range)
  })
  output$brush_info <- renderTable({
    brushedPoints(df,input$plot_brush) %>% summarize_at(vars(mpg),mean)
  })
}

shinyApp(ui = ui, server = server)
<!--
This issue tracker is for bugs and feature requests in the Shiny package. If you're having trouble with Shiny Server or a related package, please file an issue in the appropriate repository. 

If you're having trouble with shinyapps.io, and you have a paid account (Starter, Basic, Standard, or Pro), please file a support ticket via https://support.rstudio.com. If you have a Free account, please post to the RStudio Community with the shinyappsio tag: https://community.rstudio.com/tags/shinyappsio.

Finally, if you are an RStudio customer and are having trouble with one of our Pro products, get in touch with our support team at support@rstudio.com.

Before you file an issue, please upgrade to the latest version of Shiny from CRAN and confirm that the problem persists.

# First, restart R.
# To install latest shiny from CRAN:
install.packages("shiny")

See our guide to writing good bug reports for further guidance: https://github.com/rstudio/shiny/wiki/Writing-Good-Bug-Reports. The better your report is, the likelier we are to be able to reproduce and ultimately solve it.
-->

### System details

Browser Version: inbuilt RStudio, Firefox, Chrome...

Output of `sessionInfo()`:

```
# sessionInfo() output goes here
R version 3.5.3 (2019-03-11)
Platform: x86_64-w64-mingw32/x64 (64-bit)
Running under: Windows 10 x64 (build 18362)

Matrix products: default

locale:
[1] LC_COLLATE=Chinese (Simplified)_China.936  LC_CTYPE=Chinese (Simplified)_China.936    LC_MONETARY=Chinese (Simplified)_China.936
[4] LC_NUMERIC=C                               LC_TIME=Chinese (Simplified)_China.936    

attached base packages:
[1] stats     graphics  grDevices utils     datasets  methods   base     

other attached packages:
[1] RevoUtils_11.0.3     RevoUtilsMath_11.0.0

loaded via a namespace (and not attached):
 [1] shiny_1.3.1     compiler_3.5.3  magrittr_1.5    R6_2.4.0        promises_1.0.1  later_0.8.0     htmltools_0.3.6 tools_3.5.3     Rcpp_1.0.1     
[10] digest_0.6.18   xtable_1.8-3    httpuv_1.5.1    packrat_0.5.0   mime_0.6       
```

### Example application to reproduce the problem

<!-- If you're able to create one, a reproducible example is extremely helpful to us. For instructions on how to create one, please see: https://github.com/rstudio/shiny/wiki/Creating-a-Reproducible-Example --> 

```R
library(shiny)

ui <- fluidPage(
  mainPanel(
    "Θυγάτηρ 馬太"
  )
)

server <- function(input, output) {}

app <- shiny::shinyApp(ui = ui, server = server)
runApp(app)

# shinyApp(ui, server) # this works, when 'runApp' does not work
```

### Describe the problem in detail

using 'shinyApp' works ....

![image](https://user-images.githubusercontent.com/8335820/71490494-2a11f900-287f-11ea-9612-9ee58644def4.png)


but 'runApp' results in garbled output ...

![image](https://user-images.githubusercontent.com/8335820/71490397-d56e7e00-287e-11ea-961f-8fc904c14959.png)

HI All,

Your post (https://github.com/rstudio/shiny/issues/2414) is very helpful but I am not able to solve my problem following what is recommended in the previous post.

I get the same message when i open my shiny app, i cannot open R using "sudo su shiny".
which: no R in (/sbin:/bin:/usr/sbin:/usr/bin)

i tried export $PATH variable to .bashrc under /root directory but nothing positive.

Can you please help?

Thank you,
Poorva
