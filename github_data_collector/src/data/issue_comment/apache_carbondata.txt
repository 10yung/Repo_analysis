 ### Why is this PR needed?
 
 
 ### What changes were proposed in this PR?

    
 ### Does this PR introduce any user interface change?
 - No
 - Yes. (please explain the change and update document)

 ### Is any new testcase added?
 - No
 - Yes

    

 ### Why is this PR needed?
 
 
 ### What changes were proposed in this PR?

    
 ### Does this PR introduce any user interface change?
 - No
 - Yes. (please explain the change and update document)

 ### Is any new testcase added?
 - No
 - Yes

    

 ### Why is this PR needed?
 Currently if a refresh command is fired on a parquet table using carbon session then carbon will list all the tables and check whether the table exists or not, then we check if the schema file exists or not by listing the Metadata folder. This can be a problem in cloud scenarios as the listing on S3 is slow.
 
 ### What changes were proposed in this PR?
get the metadata for the specified table, Then go for table listing only if the provider is carbon or the table is not registered in hive
    
 ### Does this PR introduce any user interface change?
 - No
 - Yes. (please explain the change and update document)

 ### Is any new testcase added?
 - No
 - Yes

    

 ### Why is this PR needed?
 Currently, in Carbon, we follow LRU cache based mechanism. An least-recently used entry will be removed from the cache when it is full. There is no time-based cache expiration supported in carbon.  In cloud, all vm's may not have enough memory to cache everything we could cache.
In that case, we can clear cache after a specified duration. This can be achieved by using cache libraries available. 

One of the caching library is **Guava Cache**, which provides flexible and powerful caching features. Please refer [GuavaCache](https://github.com/google/guava) for more info.
 
 ### What changes were proposed in this PR?
1. Replaced LinkedHashMap with Guava Cache
2. Added Carbon property to allow user to specify cache expiration duration in minutes, to clear cache.
   Newly added carbon property:
 `carbon.lru.cache.expiration.duration.in.minutes` which takes long value.
 For example:
 `carbon.lru.cache.expiration.duration.in.minutes="5"` -> After 5 minutes, cache will be cleared.
    
 ### Does this PR introduce any user interface change?
 - Yes.  Added new property. Document is updated

 ### Is any new testcase added?
 
 - Yes

    

 ### Why is this PR needed?
Alter set sort columns is changing schema but evolution entry is not made 
 
 ### What changes were proposed in this PR?
Once we do set sort columns, we change the schema which changes the column order, so make an
evolution entry for it.
    
 ### Does this PR introduce any user interface change?
 - No

 ### Is any new testcase added?
 - No(Not required as this will help in track of operations on schema)

    

 ### Why is this PR needed?
CarbonData integration with Spark 2.4 is a long expected feature from community
 
 ### What changes were proposed in this PR?
1. Support integration with Spark 2.4
2. Removing support of Spark 2.1 and 2.2
    
 ### Does this PR introduce any user interface change?
 - Yes. New API from Spark 2.4 can be used to access CarbonData

 ### Is any new testcase added?
 - No

    

 ### Why is this PR needed?
1. not support mv
2. Parser still use CarbonSqlAstBuilder
3. still use CarbonSession to run some test cases
 
 ### What changes were proposed in this PR?
Extensions:
1. new order of parsers (CarbonParser->SparkParser)
   it means CarbonParser will parser SQL at first. It will match only carbon's particular SQL.

CreateTable:
1. CarbonExtnesion only support "stored as carbondata" and "using carbondata"
2. use CarbonCreateDataSourceTableCommand instead of CarbonCreateTableCommand
   so no need to combine a SQL to create a data source table

DATAMap:
1. support mv

TestCases:
1.  remove spark-carbon-common-test module, move test back to spark-common-test module
2.  all test cases will be run in SparkSession with CarbonExtensions

Example:
1.  only CarbonSessionExample use CarbonSession, others will use SparkSession

Others:
1. support custom lock interface
2. support database location provider interfact

 ### Does this PR introduce any user interface change?
 - Yes. (please explain the change and update document)

 ### Is any new testcase added?
 - Yes

    

 ### Why is this PR needed?
1. There is no command to show the cache occupied by each of the executors(only applicable for index server). 
This command will not show per table, only per node
Example:
Driver - X bytes
Executor1 - Y bytes
Executor2 - Z bytes
  
2. Show metacache command does not show the complete cache used used by IndexServer side and Driver side. It just shows the total of both of them.
 
 ### What changes were proposed in this PR?
 1. To change *show metacache* command to *show executor metacache*, where the "executor" keyword is optional.
2.  Added TOTAL cache value separately for Index Server and Driver.
    
 ### Does this PR introduce any user interface change?
 - No
 - Yes. (please explain the change and update document)

 ### Is any new testcase added?
 - No
 - Yes

    

 ### Why is this PR needed?
 There are 2 issues:
1. INSERT STAGE will skip bytes to read the last long in the carbondata file as the offset to the footer, but sometimes DFS is not skipping the right byte size
2. When error occurs, segment status is not in SUCCESS state, but recovery handling is not doing correctly in  INSERT STAGE command
 
 ### What changes were proposed in this PR?
1. In CarbonFooterReaderV3.readFooterVersion3, if offset is not set by caller, read it from corresponding index file.
2. In CarbonInsertFromStageCommand, when recovery is required, delete the segment entry if the entry is not in SUCESS state.
    
 ### Does this PR introduce any user interface change?
No


 ### Is any new testcase added?
No


    

 ### Why is this PR needed?
 GeoHash column should not be allowed to be configured in column meta cache property.
This PR depends on #3436 . First commit is the original PR 3436 PR commit. Only second commit is the fix for this PR. Need to review only second commit.

 ### What changes were proposed in this PR?
During create table and alter table, validate column meta cache property for only schema columns instead of all the columns.
    
 ### Does this PR introduce any user interface change?
 - No

 ### Is any new testcase added?
 - No

    
