Since memory growth was enabled in #155, it seems prudent to minimize initial memory footprint.

Prior to this, with `TOTAL_MEMORY` set to 1GiB, pyodide pre-allocates a whole gigabyte of memory.

I could see the difference in memory usage quite easily in the developer tools memory tab.

I've done some rudimentary testing with developer tools and the console, and can confirm that doing things like allocating large byte arrays dynamically grows the memory up to around the ~2GiB browser limit.

I discovered that if you set `Module.TOTAL_MEMORY` in `pyodide.js`, then this overrides the compiled-in initial memory allocation. It'd be awesome to have this be application-overrideable similar to how `languagePluginUrl` is today. I'd be happy to put together a commit for that if there's interest.
The user's python script running in pyodide is still interpreted instead of compiled. The speed is extremely slow when running for loops of millions times. 
In desktop's python I use numba to just-in-time compile a specific loop-intensive function.
Would it be feasible to implement numba package for pyodide or native support of compiling user's code with a decorator similar to numba.njit?
This is not quite complete, as altair is not yet displaying anything in iodide. I don't think this should be that hard, as it's just using vegaEmbed under the hood (which I've gotten working seperately). 

Likely we can just provide a small patch to detect that we're running in an iodide environment, and do something similar to what we do for matplotlib.

This might be useful as a reference:

https://altair-viz.github.io/user_guide/display_frontends.html#working-in-non-notebook-environments
I don't know at priory where the language pack will.

But shouldn't it be next to `pydide_dev.js` ?

https://github.com/iodide-project/pyodide/blob/c3ac3d3357bd9a4ecd14b7c59a215de341b4c9eb/src/pyodide.js#L9

```javascript
  var scripts = document.getElementsByTagName('script');
  var index = scripts.length - 1;
  var myScript = scripts[index];
  baseURL = myScript.src
```

Just a long way to say `baseURL` <- url of the javascript file currently executing.


Which solves this problem for me (in Firefox of course, I wouldn't dare ;)

```ŧext
The script from “https://tinmarino.github.io/pyodide.asm.data.js” was loaded even though its MIME type (“text/html”) is not a valid JavaScript MIME type. console.html
Loading failed for the <script> with source “https://tinmarino.github.io/pyodide.asm.data.js”. console.html:1:1
TypeError: Response has unsupported MIME type
```

Also, scipy is 160Mb long, maybe a good idea to divide it (so I can host it on github which file limit is 100Mb.

All that said:

```text
 a88888b.                                                dP            
d8'   `88                                                88            
88        .d8888b. 88d888b. .d8888b. 88d888b. .d8888b. d8888P .d8888b. 
88        88'  `88 88'  `88 88'  `88 88'  `88 88'  `88   88   Y8ooooo. 
Y8.   .88 88.  .88 88    88 88.  .88 88       88.  .88   88         88 
 Y88888P' `88888P' dP    dP `8888P88 dP       `88888P8   dP   `88888P' 
                                 .88                                   
                             d8888P                                    
```

For the wonderful job you did: it works like a charm.
Hello. Maybe it is a wrong place to ask (i.e. it is not an issue), so I apologize in advance. I was trying to follow [the documentation](https://pyodide.readthedocs.io/en/latest/new_packages.html) to build a package that includes C++. I was able to compile the package in question (the name of which I would prefer to keep private for work-related issues) natively. Then I have modified setup.py to include the following:
```
os.environ["CC"] = "emcc"
os.environ["CXX"] = "em++"
```
However when running `$ python setup.py build -v` I'm getting the following errors:
```
In file included from /mnt/data_2/DataC/miniconda3/include/python3.7m/Python.h:63:
/mnt/data_2/DataC/miniconda3/include/python3.7m/pyport.h:699:2: error: "LONG_BIT definition appears wrong for platform (bad gcc/glibc config?)."
#error "LONG_BIT definition appears wrong for platform (bad gcc/glibc config?)."
```
What am I doing wrong? What is the proper way of building a python package for emscripten?

The wasm_backend for matplotlib creates a div element by a iodide.output.element('div') call,
if that fails a plain div is created by a document.createElement('div') call. In the latter case the newly created div is never appended to the document and remains therefore invisible. 

This PR fixes that by adding a call to document.body.appendChild(div) after the creation of the div.

Among other things, cpython has fixes which are needed to allow
compilation under MacOS X Catalina, where we can no longer have
headers in `/usr/include`.
I'd expect lists imported from javascript to have the same semantics as lists built natively in python, but this seems not to be the case: for example, you can't use python's auto-slicing syntax like `foo[1:2]`. This confused me for an hour the other day when I was trying to use difflib. Example notebook:

https://definitely-staging.iodide.io/notebooks/243/
I ran into some trouble building Pyodide on my Mac running OS X Catalina (10.15).  Looks like this is a known issue, tracked by https://github.com/iodide-project/pyodide/issues/572 .  I hacked things into working and put together a PR.
Please forgive me if this isn't the right place to ask questions re. usage. I'm currently using Pyodide for a work project, and I've been very impressed!

I'd like to run multiple Pyodide instances on the same page, loading each Pyodide instance in its own webworker. It would be nice if the browser didn't download the large pyodide.asm.data file multiple times in this scenario. I noticed that pyodide.asm.data doesn't seem to be cached, even though the other files (e.g., pyodide.asm.wasm) do seem to be cached. Is there a way to cache pyodide.asm.data, to improve load times?

Thanks.