Issue Description:
When attempting to `delete_voice_connector` I am getting the following error:
```
Aws::Chime::Errors::BadRequestException Service received a bad request
```


Gem Name:
`aws-sdk-chime` `1.18.0`

Version of Ruby:
`2.5.0`
OS environment:
docker container running `Debian GNU/Linux 9 (stretch)`

Code Snippets / Steps to Reproduce:
```
client.list_voice_connectors.accounts.each do |voice_connector|
  client.delete_voice_connector(voice_connector_id: voice_connector.voice_connector_id)
end
```

Error Message:
```
Aws::Chime::Errors::BadRequestException Service received a bad request
/usr/local/bundle/gems/aws-sdk-core-3.89.1/lib/seahorse/client/plugins/raise_response_errors.rb:20:in `call'
/usr/local/bundle/gems/aws-sdk-core-3.89.1/lib/aws-sdk-core/plugins/jsonvalue_converter.rb:20:in `call'
/usr/local/bundle/gems/aws-sdk-core-3.89.1/lib/aws-sdk-core/plugins/idempotency_token.rb:17:in `call'
/usr/local/bundle/gems/aws-sdk-core-3.89.1/lib/aws-sdk-core/plugins/param_converter.rb:24:in `call'
/usr/local/bundle/gems/aws-sdk-core-3.89.1/lib/aws-sdk-core/plugins/response_paging.rb:10:in `call'
/usr/local/bundle/gems/aws-sdk-core-3.89.1/lib/seahorse/client/plugins/response_target.rb:25:in `call'
/usr/local/bundle/gems/aws-sdk-core-3.89.1/lib/seahorse/client/request.rb:76:in `send_request'
/usr/local/bundle/gems/aws-sdk-chime-1.18.0/lib/aws-sdk-chime/client.rb:1453:in `delete_voice_connector'
/app/app/services/actors/aws_actors/chime/voice_connectors_actor.rb:14:in `delete!'
```
By submitting this pull request, I confirm that my contribution is made under the terms of the Apache 2.0 license.

1. To make sure we include your contribution in the release notes, please make sure to add description entry for your changes in the "unreleased changes" section of the `CHANGELOG.md` file (at corresponding gem). For the description entry, please make sure it lives in one line and starts with `Feature` or `Issue` in the correct format.

2. For generated code changes, please checkout below instructions first:
  https://github.com/aws/aws-sdk-ruby/blob/master/CONTRIBUTING.md

Thank you for your contribution!

Please fill out the sections below to help us address your issue

### Issue description
We got a random `NoMethodError` from **aws-sdk-core/endpoint_cache.rb** in our production app during a DynamoDB query request through the Ruby SDK. We have never seen this before and saw it only once yesterday. I'm opening this issue as an FYI to you; if it's not useful, feel free to close it. I can re-open the issue if I start to see this more often.

### Gem name ('aws-sdk', 'aws-sdk-resources' or service gems like 'aws-sdk-s3') and its version
`gem 'aws-sdk', '~> 3'`

Here is what is installed in my Gemfile.lock: `aws-sdk-core (~> 3, >= 3.53.0)`

### Version of Ruby, OS environment
Ruby 2.6
Amazon Linux 2018.03
EC2 instance managed by Opsworks

### Code snippets / steps to reproduce
````
Aws::DynamoDB::Client.new.query(
  table_name: table_name,
  index_name: index_name,
  key_condition_expression: "id = :id",
  expression_attribute_values: {":id": {"s": "#{id}"}},
  projection_expression: "#d",
  expression_attribute_names: {"#d" => "details"}
)
````

### Stack trace
[2020-01-16 02:09:55 UTC] Exception: #<NoMethodError: undefined method `credentials' for nil:NilClass>. Details: ["/home/deploy/.bundler/my_app/ruby/2.6.0/gems/aws-sdk-core-3.53.1/lib/aws-sdk-core/endpoint_cache.rb:108:in `extract_key'", "/home/deploy/.bundler/my_app/ruby/2.6.0/gems/aws-sdk-core-3.53.1/lib/aws-sdk-core/plugins/endpoint_discovery.rb:102:in `_discover_endpoint'", "/home/deploy/.bundler/my_app/ruby/2.6.0/gems/aws-sdk-core-3.53.1/lib/aws-sdk-core/plugins/endpoint_discovery.rb:69:in `call'", "/home/deploy/.bundler/my_app/ruby/2.6.0/gems/aws-sdk-core-3.53.1/lib/seahorse/client/plugins/endpoint.rb:45:in `call'", "/home/deploy/.bundler/my_app/ruby/2.6.0/gems/aws-sdk-core-3.53.1/lib/aws-sdk-core/plugins/param_validator.rb:24:in `call'", "/home/deploy/.bundler/my_app/ruby/2.6.0/gems/aws-sdk-core-3.53.1/lib/seahorse/client/plugins/raise_response_errors.rb:14:in `call'", "/home/deploy/.bundler/my_app/ruby/2.6.0/gems/aws-sdk-core-3.53.1/lib/aws-sdk-core/plugins/jsonvalue_converter.rb:20:in `call'", "/home/deploy/.bundler/my_app/ruby/2.6.0/gems/aws-sdk-core-3.53.1/lib/aws-sdk-core/plugins/idempotency_token.rb:17:in `call'", "/home/deploy/.bundler/my_app/ruby/2.6.0/gems/aws-sdk-core-3.53.1/lib/aws-sdk-core/plugins/param_converter.rb:24:in `call'", "/home/deploy/.bundler/my_app/ruby/2.6.0/gems/aws-sdk-core-3.53.1/lib/aws-sdk-core/plugins/response_paging.rb:10:in `call'", "/home/deploy/.bundler/my_app/ruby/2.6.0/gems/aws-sdk-core-3.53.1/lib/seahorse/client/plugins/response_target.rb:23:in `call'", "/home/deploy/.bundler/my_app/ruby/2.6.0/gems/aws-sdk-core-3.53.1/lib/seahorse/client/request.rb:70:in `send_request'", "/home/deploy/.bundler/my_app/ruby/2.6.0/gems/

Issue Description:
When attempting to `list_rooms` or `list_room_memberships` for team accounts I am getting the following error:
```
Aws::Chime::Errors::ForbiddenException Chime Account provided is not an Enterprise Chime Account[AWS Account ID: xxxxxxxxxxxx][Chime Account ID: 6153241f-5a0e-4c24-bd9b-0e91ac3adbd1]
```


Gem Name:
`aws-sdk-chime` `1.17.0`

Version of Ruby:
`2.5.0`
OS environment:
docker container running `Debian GNU/Linux 9 (stretch)`

Code Snippets / Steps to Reproduce:
```
client.list_accounts.accounts.each do |account|
  client.list_rooms(account_id: account.account_id).rooms.each do |room|
    client.list_room_memberships(account_id: account.account_id, room_id: room.room_id).room_memberships.each do |membership|
      puts "Account ID: #{account.account_id}, Room ID: #{room.room_id}, Member ID: #{membership.member[:account_id]}"
    end
  end
end
```

Changing `list_accounts` to the following will let me get past the error
```
client.list_accounts.accounts.select { |account| account.account_type != 'Team' }.each do |account|
```

Error Message:
```
Aws::Chime::Errors::ForbiddenException Chime Account provided is not an Enterprise Chime Account[AWS Account ID: xxxxxxxxxxxx][Chime Account ID: 6153241f-5a0e-4c24-bd9b-0e91ac3adbd1]
/usr/local/bundle/gems/aws-sdk-core-3.85.1/lib/seahorse/client/plugins/raise_response_errors.rb:15:in `call'
/usr/local/bundle/gems/aws-sdk-core-3.85.1/lib/aws-sdk-core/plugins/jsonvalue_converter.rb:20:in `call'
/usr/local/bundle/gems/aws-sdk-core-3.85.1/lib/aws-sdk-core/plugins/idempotency_token.rb:17:in `call'
/usr/local/bundle/gems/aws-sdk-core-3.85.1/lib/aws-sdk-core/plugins/param_converter.rb:24:in `call'
/usr/local/bundle/gems/aws-sdk-core-3.85.1/lib/aws-sdk-core/plugins/response_paging.rb:10:in `call'
/usr/local/bundle/gems/aws-sdk-core-3.85.1/lib/seahorse/client/plugins/response_target.rb:23:in `call'
/usr/local/bundle/gems/aws-sdk-core-3.85.1/lib/seahorse/client/request.rb:70:in `send_request'
/usr/local/bundle/gems/aws-sdk-chime-1.17.0/lib/aws-sdk-chime/client.rb:2737:in `list_rooms'
```
Please fill out the sections below to help us address your issue

### Issue description

Ruby SDK does not honor explicit profile in client when credentials from AWS_ environment variables are present whereas Golang SDK supports this.

I have AWS_ environment variables setup.

### Gem name ('aws-sdk-core') latest


### Code snippets / steps to reproduce

*test.rb*
```ruby
require 'aws-sdk-core'
p Aws::STS::Client.new(profile: ENV['PROFILE']).get_caller_identity
```

```bash
aws_credentials_env $ bundle exec ruby test.rb
#<struct Aws::STS::Types::GetCallerIdentityResponse user_id="AIDAT6A**************", account="2706********", arn="arn:aws:iam::2706********:user/noel.georgi">
aws_credentials_env $ PROFILE=static bundle exec ruby test.rb
#<struct Aws::STS::Types::GetCallerIdentityResponse user_id="AIDAT6A**************", account="2706********", arn="arn:aws:iam::2706********:user/noel.georgi">
```


*shared.go*
```golang
package main

import (
	"fmt"
	"os"

	"github.com/aws/aws-sdk-go/aws/session"
	"github.com/aws/aws-sdk-go/service/sts"
)

func main() {
	// create a session
	opts := session.Options{}
	opts.Profile = os.Getenv("PROFILE")
	opts.SharedConfigState = session.SharedConfigEnable
	session, err := session.NewSessionWithOptions(opts)
	if err != nil {
		fmt.Println(err)
	}
	// create a service client
	stsClient := sts.New(session)
	// create a request
	request := sts.GetCallerIdentityInput{}
	// call the service operation
	id, err := stsClient.GetCallerIdentity(&request)
	if err != nil {
		fmt.Println(err)
	} else {
		// handle the response
		fmt.Printf("AccountId: %s, Arn: %s, UserId: %s", *id.Account, *id.Arn, *id.UserId)
		fmt.Println()
	}
}
```

```bash
aws_caller_identity $ go run shared.go
AccountId: 2706********, Arn: arn:aws:iam::2706********:user/noel.georgi, UserId: AIDAT6A**************
aws_caller_identity $ PROFILE=static go run shared.go
AccountId: 4118********, Arn: arn:aws:iam::4118********:user/noel.georgi, UserId: AIDAV7Y**************
```

Golang SDK honor's passing in explicit `profile` even with ENV vars set, whereas ruby SDK uses the ENV vars only. 

Side note: Ruby SDK also does not support `credential_source` as **Enviroment**
Please fill out the sections below to help us address your issue

### Issue description
[IAM Roles for Service Accounts](https://aws.amazon.com/blogs/opensource/introducing-fine-grained-iam-roles-service-accounts/) has been released in AWS for Kubernetes clusters running v1.13+
In the linked article, it mentions a minimum version of the Ruby SDK required to interact natively with this service (without manually making a STS call via the command line and setting env variables) is `Ruby 2.11.345`

*The issue I am seeing* is that when I pass a region parameter to instantiate a Client as part of my code, this region is not being passed to the STS call - this error occurs in all three of the clients I have tried (IAM, S3, EC2).
I assume this is something to do with the new handling of the `assume_role_web_identity_credentials`, released by AWS as part of this.

When using our original IAM implementation with kube2IAM, the same code does not cause any errors - only when using "IAM roles for Service Accounts"

A workaround, for anyone reading pre-fix, is to set `Aws.config.update({ region: 'region' })` at the start of your code, rather than set it as part of the client, e.g `ec2 = Aws::EC2::Client.new(region: 'us-west-2')` - but this would not be a solution for large codebases this might affect.

[Configuration options available](https://github.com/aws/aws-sdk-ruby#configuration-options)

Error:
```
/usr/local/bundle/gems/aws-sdk-core-3.68.0/lib/aws-sdk-core/plugins/regional_endpoint.rb:44:in `after_initialize': missing region; use :region option or export region name to ENV['AWS_REGION'] (Aws::Errors::MissingRegionError)
        from /usr/local/bundle/gems/aws-sdk-core-3.68.0/lib/seahorse/client/base.rb:78:in `block in after_initialize'
        from /usr/local/bundle/gems/aws-sdk-core-3.68.0/lib/seahorse/client/base.rb:77:in `each'
        from /usr/local/bundle/gems/aws-sdk-core-3.68.0/lib/seahorse/client/base.rb:77:in `after_initialize'
        from /usr/local/bundle/gems/aws-sdk-core-3.68.0/lib/seahorse/client/base.rb:21:in `initialize'
        from /usr/local/bundle/gems/aws-sdk-core-3.68.0/lib/aws-sdk-sts/client.rb:252:in `initialize'
        from /usr/local/bundle/gems/aws-sdk-core-3.68.0/lib/seahorse/client/base.rb:99:in `new'
        from /usr/local/bundle/gems/aws-sdk-core-3.68.0/lib/aws-sdk-core/assume_role_web_identity_credentials.rb:55:in `initialize'
        from /usr/local/bundle/gems/aws-sdk-core-3.68.0/lib/aws-sdk-core/credential_provider_chain.rb:97:in `new'
        from /usr/local/bundle/gems/aws-sdk-core-3.68.0/lib/aws-sdk-core/credential_provider_chain.rb:97:in `assume_role_web_identity_credentials'
        from /usr/local/bundle/gems/aws-sdk-core-3.68.0/lib/aws-sdk-core/credential_provider_chain.rb:12:in `block in resolve'
        from /usr/local/bundle/gems/aws-sdk-core-3.68.0/lib/aws-sdk-core/credential_provider_chain.rb:11:in `each'
        from /usr/local/bundle/gems/aws-sdk-core-3.68.0/lib/aws-sdk-core/credential_provider_chain.rb:11:in `resolve'
        from /usr/local/bundle/gems/aws-sdk-core-3.68.0/lib/aws-sdk-core/plugins/credentials_configuration.rb:53:in `block in <class:CredentialsConfiguration>'
        from /usr/local/bundle/gems/aws-sdk-core-3.68.0/lib/seahorse/client/configuration.rb:70:in `call'
        from /usr/local/bundle/gems/aws-sdk-core-3.68.0/lib/seahorse/client/configuration.rb:213:in `block in resolve_defaults'
        from /usr/local/bundle/gems/aws-sdk-core-3.68.0/lib/seahorse/client/configuration.rb:57:in `each'
        from /usr/local/bundle/gems/aws-sdk-core-3.68.0/lib/seahorse/client/configuration.rb:57:in `each'
        from /usr/local/bundle/gems/aws-sdk-core-3.68.0/lib/seahorse/client/configuration.rb:212:in `resolve_defaults'
        from /usr/local/bundle/gems/aws-sdk-core-3.68.0/lib/seahorse/client/configuration.rb:205:in `value_at'
        from /usr/local/bundle/gems/aws-sdk-core-3.68.0/lib/seahorse/client/configuration.rb:189:in `block in resolve'
        from /usr/local/lib/ruby/2.5.0/set.rb:338:in `each_key'
        from /usr/local/lib/ruby/2.5.0/set.rb:338:in `each'
        from /usr/local/bundle/gems/aws-sdk-core-3.68.0/lib/seahorse/client/configuration.rb:189:in `resolve'
        from /usr/local/bundle/gems/aws-sdk-core-3.68.0/lib/seahorse/client/configuration.rb:177:in `apply_defaults'
        from /usr/local/bundle/gems/aws-sdk-core-3.68.0/lib/seahorse/client/configuration.rb:150:in `build!'
        from /usr/local/bundle/gems/aws-sdk-core-3.68.0/lib/seahorse/client/base.rb:62:in `build_config'
        from /usr/local/bundle/gems/aws-sdk-core-3.68.0/lib/seahorse/client/base.rb:19:in `initialize'
        from /usr/local/bundle/gems/aws-sdk-ec2-1.110.0/lib/aws-sdk-ec2/client.rb:256:in `initialize'
        from /usr/local/bundle/gems/aws-sdk-core-3.68.0/lib/seahorse/client/base.rb:99:in `new'
        from ./app.rb:45:in `<main>'
```

This PR may be a fix - but I am not sure enough of how the gems work to make that assumption
https://github.com/aws/aws-sdk-ruby/pull/2090

### Gem name ('aws-sdk', 'aws-sdk-resources' or service gems like 'aws-sdk-s3') and its version

Has been observed using the following gems - but may affect others
`aws-sdk-s3   1.48.0`
`aws-sdk-ec2 1.110.0`
`aws-sdk-iam 1.30.0`

### Version of Ruby, OS environment

Ruby 2.5.1
Running on the `ruby:2.5` Docker base image
Running inside a Kubernetes Cluster with v1.13 and an OIDC provider for IRSA

### Code snippets / steps to reproduce

Needs to be using the IRSA features as a pod in AWS EKS or another Cluster.

Causes an issue:
```
require 'aws-sdk-s3'
require 'aws-sdk-ec2'
require 'aws-sdk-iam'
require 'yaml'
​
region = 'us-east-1'
​
# Logging for Docker
if ENV['DOCKER_LOGS']
  fd = IO.sysopen("/proc/1/fd/1", "w")
else
  fd = IO.sysopen("/dev/stdout", "w")
end
​
a = IO.new(fd,"w")
a.sync = true

begin
  clientEC2 = Aws::EC2::Client.new({ region: region }) # <== Causes the issue
​
  a.puts "\n Getting Worker Nodes"
  resp = clientEC2.describe_instances({
    filters: [
      {
        name: "tag:KubernetesCluster",
        values: [
          "<kluster_name>"
        ]
      },
      {
        name: "vpc-id",
        values: [
          "<vpc_id>"
        ]
      }
    ]
  })
​
  resp.reservations.each do |r|
    r.instances.each do |i|
      a.puts i.instance_id
      a.puts i.private_dns_name
      a.puts i.security_groups[0].group_name
    end
  end
​
  a.puts "\n Getting Tags for single Worker Node"
  resp = clientEC2.describe_tags({
    filters: [
      {
        name: "resource-id",
        values: [
          "<ami_id>"
        ]
      }
    ]
  })
​
  a.puts YAML.dump resp.to_h
rescue Aws::EC2::Errors::ServiceError => e
  a.puts "#{e}"
end
```

Working scenario:
```
require 'aws-sdk-s3'
require 'aws-sdk-ec2'
require 'aws-sdk-iam'
require 'yaml'
​
region = 'us-east-1'
​
# Logging for Docker
if ENV['DOCKER_LOGS']
  fd = IO.sysopen("/proc/1/fd/1", "w")
else
  fd = IO.sysopen("/dev/stdout", "w")
end
​
a = IO.new(fd,"w")
a.sync = true

Aws.config.update({ region: region })

begin
  clientEC2 = Aws::EC2::Client.new # <== No error
​
  a.puts "\n Getting Worker Nodes"
  resp = clientEC2.describe_instances({
    filters: [
      {
        name: "tag:KubernetesCluster",
        values: [
          "<kluster_name>"
        ]
      },
      {
        name: "vpc-id",
        values: [
          "<vpc_id>"
        ]
      }
    ]
  })
​
  resp.reservations.each do |r|
    r.instances.each do |i|
      a.puts i.instance_id
      a.puts i.private_dns_name
      a.puts i.security_groups[0].group_name
    end
  end
​
  a.puts "\n Getting Tags for single Worker Node"
  resp = clientEC2.describe_tags({
    filters: [
      {
        name: "resource-id",
        values: [
          "<ami_id>"
        ]
      }
    ]
  })
​
  a.puts YAML.dump resp.to_h
rescue Aws::EC2::Errors::ServiceError => e
  a.puts "#{e}"
end
```


Consider an API Gateway endpoint with a required HTTP request header for Accept-Language (e.g OpenAPI def):
```
  "paths": {
    "/jobs/{id}": {
      "get": {
        "operationId": "getById",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "Accept-Language",
            "in": "header",
            "required": true,
            "type": "string"
          }
```

The generated Ruby SDK does not provide a way to pass the required parameter to the endpoint.

### Gem name ('aws-sdk', 'aws-sdk-resources' or service gems like 'aws-sdk-s3') and its version
API Gateway generated aws-sdk-v3

Thanks,

Please fill out the sections below to help us address your issue

### Issue description
In a rails 6 application, I'm using Cognito to manage user authentication. I recently noticed that calls' logs are automatically added to the logs but there is an issue - Cognito initiate_auth method with `auth_flow: "USER_PASSWORD_AUTH"` is exposing the password provided by the user:
```
[Aws::CognitoIdentityProvider::Client 200 1.012806 0 retries] initiate_auth(client_id:"[FILTERED]",auth_flow:"USER_PASSWORD_AUTH",auth_parameters:{"USERNAME"=>"test@gmail.com","PASSWORD"=>"Test1234!"})
```
 
### Gem name ('aws-sdk', 'aws-sdk-resources' or service gems like 'aws-sdk-s3') and its version
aws-sdk-core 3.67.0
aws-sdk-cognitoidentityprovider 1.25.0

### Version of Ruby, OS environment
ruby 2.6.3
Mac OS 10.13.6

### Code snippets / steps to reproduce
my code: 
```
COGNITO_CLIENT = Aws::CognitoIdentityProvider::Client.new
COGNITO_CLIENT.initiate_auth(
  client_id: ENV['AWS_COGNITO_CLIENT_ID'],
  auth_flow: 'USER_PASSWORD_AUTH',
  auth_parameters: { 'USERNAME' => username, 'PASSWORD' => password }
)
```

The issue is related to the filter methods in https://github.com/aws/aws-sdk-ruby/blob/master/gems/aws-sdk-core/lib/aws-sdk-core/log/param_filter.rb

```
def filter_hash(values)
  filtered = {}
  values.each_pair do |key, value|
    filtered[key] = @filters.include?(key) ? '[FILTERED]' : filter(value)
  end
  filtered
end
```

During parsing `:auth_parameters` hash keys of this hash are actually string written in the capital letters, so they do not match symbols form `SENSITIVE` constant.

My suggestion is to include `'PASSWORD'` or `:auth_parameters` in `SENSITIVE` constant or to add some parsing to the key in this method to make it more universal like:
```
def filter_hash(values)
  filtered = {}
  values.each_pair do |key, value|
    key = key.downcase.to_sym
    filtered[key] = @filters.include?(key) ? '[FILTERED]' : filter(value)
  end
  filtered
end
```
This change produces log like:
```
[Aws::CognitoIdentityProvider::Client 200 0.836941 0 retries] initiate_auth(client_id:"[FILTERED]",auth_flow:"USER_PASSWORD_AUTH",auth_parameters:{username:"[FILTERED]",password:"[FILTERED]"})
```

### Issue description

Would it be feasible to pre-populate `Aws.config` from the runtime environment?  For example, if `ENV["AWS_REGION"]` is set (and non-empty), then by default `Aws.config[:region] == ENV["AWS_REGION"]`.  Likewise for any settings picked up from "~/.aws" or elsewhere.

This would enable in-app configuration code like the following:
```ruby
Aws.config[:region] ||= "us-east-1"
```

Where a reasonable default is provided, but can overridden from the outside, without code modification.

Additionally, it may be useful when one wants to test what config values are being picked up from the environment, for example, when debugging.

### Gem name ('aws-sdk', 'aws-sdk-resources' or service gems like 'aws-sdk-s3') and its version

`aws-sdk`

### Version of Ruby, OS environment

any

### Code snippets / steps to reproduce

N/A

Please fill out the sections below to help us address your issue

### Issue description
When exporting job settings utilizing get_job https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/MediaConvert/Client.html#get_job-instance_method, the word FILTERED is showing up in the output. It was originally HLS_GROUP_SETTINGS when the job ran successfully, but the export is replacing that when it's output through the api call. 

### Gem name ('aws-sdk', 'aws-sdk-resources' or service gems like 'aws-sdk-s3') and its version
require 'aws-sdk-s3'
require 'aws-sdk-mediaconvert'
### Version of Ruby, OS environment

### Code snippets / steps to reproduce
output_groups:
- custom_name: HLSOutput
  name: **"[FILTERED]"**
  output_group_settings:
    cmaf_group_settings:
    dash_iso_group_settings:
    file_group_settings:
    hls_group_settings:
      ad_markers:
      base_url:
      caption_language_mappings:
      caption_language_setting: OMIT
      client_cache: ENABLED
      codec_specification: RFC_4281
      destination: s3://sample-video-output/HLS-Test-Video
      destination_settings:
      directory_structure: SINGLE_DIRECTORY
      encryption:
      manifest_compression: NONE
      manifest_duration_format: INTEGER
      min_final_segment_length: 0.0
      min_segment_length: 0
      output_selection: MANIFESTS_AND_SEGMENTS
      program_date_time: EXCLUDE
      program_date_time_period: 600
      segment_control: SEGMENTED_FILES
      segment_length: 3
      segments_per_subdirectory:
      stream_inf_resolution: INCLUDE
      timed_metadata_id_3_frame: PRIV
      timed_metadata_id_3_period: 10
      timestamp_delta_milliseconds:
    ms_smooth_group_settings:
    type: **"[FILTERED]"**
  outputs: