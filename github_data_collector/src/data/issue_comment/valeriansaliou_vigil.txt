Adds three new options for `HTTP` probes:

* `post_json` -- set at the node level, makes a JSON POST request instead of GET.
* `cache_busting_query_parameter` -- set at service level, optionally disables the `?<timestamp>` query parameter that gets added to requests for over-zealous validating API routes.
* `bearer_token_env_var` -- set at service level, expands an environment variable into an `Authorization: Bearer $ENV_VAR` header for the requests. We want to health check certain services that require authentication. We don't want to inject secrets into the config file, but we can do it via an environment variable (this is pretty common in e.g. a Kubernetes scenario).

Here's an example with the new settings:
```toml
[[probe.service]]
id = "api"
label = "API Routes"
cache_busting_query_parameter = false

[[probe.service.node]]
id = "labellers-predict-comments"
label = "Predict Comments"
mode = "poll"

post_json = "{\"uids\":[\"7cdeeb44cd63ae9c.16355\"]}"

replicas = ["https://reinfer.io/api/v1/datasets/dev-health-check/example/labellers/0/predict-comments"]
```
Optionally parse the config file as JSON if the filename ends in `.json`. Our deployment infrastructure generates JSON configs, but not TOML, so it'd be hard to integrate otherwise. Hope this is OK---current users should be unaffected.
Hi,

it would be awesome to have a notifier for discord.

Regards,
Alessandro
Hello @valeriansaliou ,

I'm trying to deploy vigil using Dockerfile copied from this repo but whatever I do it fails on **openssl**, for example:

```
Compiling aho-corasick v0.7.6                                                                                                                                                             
error: failed to run custom build command for `openssl v0.9.24`                                                                                                                              
process didn't exit successfully: `/app/target/release/build/openssl-e0c9d0620fbd0538/build-script-build` (exit code: 101)                                                                   
--- stderr                                                                                                                                                                                   
thread 'main' panicked at 'Unable to detect OpenSSL version', /usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/openssl-0.9.24/build.rs:16:14                                        
note: Run with `RUST_BACKTRACE=1` environment variable to display a backtrace.                                                                                                               
                                                                                                                                                                                             
warning: build failed, waiting for other jobs to finish...                                                                                                                                   
error: build failed 
```

The Dockerfile, Cargo.toml and Cargo.lock have been copied from this repo.

Do you have any idea how to fix that?

Thank you in advance.

Best regards,
Denis
Hello !

The endpoint below yield a 200 status code but I still get an error in vigil.

```
[[probe.service.node]]
id = "redsmin-api"
label = "API"
mode = "poll"
replicas = ["https://api.redsmin.com"]
```

Any idea on what is going wrong? :)
I'm not able to deploy vigil on ZEIT Now. The now.json is:

`{
	"version": 2,
	"name": "vigil",
  "builds": [
    { "src": "Cargo.toml", "use": "@now/rust", "config": { "rust": "nightly" } }
  ]
}`

and fails with code 101: 
https://pastebin.com/yZMrBJxE

Any suggestions? Thanks!
Hello!

If anyone has quick feature suggestions or lacks a feature in Vigil, please use this thread to submit your ideas.
Modernize the template.
Provide LAN host-behind-NAT TCP probing capabilities; fork https://github.com/crisp-im/crisp-status-local and rebrand to Vigil + implement improvements from Vigil.
Disk space usage seems to be a really basic metric to probe.

Some of services are often victims of full disk and that risk could be mitigated by allowing Vigil to report such situations as unhealthy above some percentage of disk usage.

Probably worth handling that?