Starting with C# 7.1 features, a Main method (the entry point for an application) can be declared as async, and can return a Task. CC0068 incorrectly triggers stating that this method should be removed because it is unused. However, you cannot remove the Main method for an application otherwise it would not compile or run.

Coincidentally, if I change the Main method from async Task to just void Main, the rule does not get triggered as I would expect.

````csharp
static async Task Main(string[] args)
{
    //Do something here
}
````

CodeCracker is not currently considering the using pattern, as it ignores the using FileStream f = new FileStream(@"C:\users\jaredpar\using.md"); statement.

pattern-based using: https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/proposals/csharp-8.0/using

CodeCracker will output a CC0022 even if the field is disposed:
`if (...) 
{ 
   using FileStream f = new FileStream(@"C:\users\jaredpar\using.md");
   // statements
}

// Equivalent to 
if (...) 
{ 
   using (FileStream f = new FileStream(@"C:\users\jaredpar\using.md")) 
   {
    // statements
   }
}`

Code cracker should not report a cc0022 for this new pattern
#Bug
CodeCracker throws an exception when building code below.

````csharp
// The code that reproduces the bug
    public class A : IDisposable
    {
        public void Dispose()
        {
            GC.SuppressFinalize(this);
        }
    }
    public class B
    {
        public static B CreateB(A obj)
        {
            return new B(obj);
        }
        public B(A obj)
        {
            Obj = obj;
        }
        private readonly A Obj;
    }
    public class Test
    {
        public async static Task ConfigureSmthAsync()
        {
            if (!(new C()).IsSmth())
                return;
            var a = new A();

            var b = await Task.Run(() => B.CreateB(a));
        }
    }
    public class C
    {
        public C() { Variable = true; }
        public bool IsSmth() => Variable;

        private readonly bool Variable;
    }

    class Program
    {
        static void Main()
        {
            var test = new Test();
            Test.ConfigureSmthAsync().Wait();
        }

    }
````

Interesting thing that simple change of `if()` statement removes error.

````csharp
public class Test
    {
        public async static Task ConfigureSmthAsync()
        {
            if ((new C()).IsSmth())
            {
            var a = new A();

            var b = await Task.Run(() => B.CreateB(a));
            }
        }
    }
````
Don't know if it is important, but error is not appearing when 
1. `A` is not inherit from `IDisposable`.
2. `ConfigureSmthAsync` is not async. 

I managed to get call stack of the error.
````
System.ArgumentNullException: Value cannot be null.
Parameter name: syntax
   at Microsoft.CodeAnalysis.CSharp.CSharpSemanticModel.CheckSyntaxNode(CSharpSyntaxNode syntax)
   at Microsoft.CodeAnalysis.CSharp.CSharpSemanticModel.GetSymbolInfo(ExpressionSyntax expression, CancellationToken cancellationToken)
   at Microsoft.CodeAnalysis.CSharp.CSharpExtensions.GetSymbolInfo(SemanticModel semanticModel, ExpressionSyntax expression, CancellationToken cancellationToken)
   at CodeCracker.CSharp.Usage.DisposableVariableNotDisposedAnalyzer.<>c__DisplayClass12_0.<IsReturned>b__2(ExpressionSyntax returnExpression)
   at System.Linq.Enumerable.Any[TSource](IEnumerable`1 source, Func`2 predicate)
   at CodeCracker.CSharp.Usage.DisposableVariableNotDisposedAnalyzer.IsReturned(MethodDeclarationSyntax method, StatementSyntax statement, SemanticModel semanticModel, ILocalSymbol identitySymbol)
   at CodeCracker.CSharp.Usage.DisposableVariableNotDisposedAnalyzer.IsDisposedOrAssigned(SemanticModel semanticModel, StatementSyntax statement, ILocalSymbol identitySymbol)
   at CodeCracker.CSharp.Usage.DisposableVariableNotDisposedAnalyzer.AnalyzeObjectCreation(SyntaxNodeAnalysisContext context)
   at Microsoft.CodeAnalysis.Diagnostics.AnalyzerExecutor.<>c__44`1.<ExecuteSyntaxNodeAction>b__44_0(ValueTuple`2 data)
   at Microsoft.CodeAnalysis.Diagnostics.AnalyzerExecutor.ExecuteAndCatchIfThrows_NoLock[TArg](DiagnosticAnalyzer analyzer, Action`1 analyze, TArg argument, Nullable`1 info)
````

I couldn't find similar bug and I am using last release version of the Code Cracker (1.1.0). From NuGet I have only Code Cracker insalled.
Fixes # 903.
This PR is fixed the duplication of regions created when the CC0052 diagnostic fix is applied to one or more variable declarations.

#Info (delete this section)
Please see the [contributing guide](https://github.com/code-cracker/code-cracker/blob/master/README.md#contributing), on the contributing section.

You should notify the maintainers on the issue you are working on before you send a PR.

[Rebase](http://gitready.com/intermediate/2009/01/31/intro-to-rebase.html) and 
[squash](http://gitready.com/advanced/2009/02/10/squashing-commits-with-rebase.html) your commits.
Submit one commit only, on top of the branch you are working on, `master` for bug fixes to the
stable version, `vnext` to new analyzers and fixers.

Verify if you pass the [definition of done](https://github.com/code-cracker/code-cracker#definition-of-done).

Always reference issue you are fixing (see bellow, e.g. `Fixes #123`)

#Start your PR description here (delete this line too)
Fixes # .
Fixes #47 , #524 , #543  .

## What I am doing?

Visual Studio analyzer extensions can be installed as a vsix extension and a NuGet package. Anyone can config the diagnostic severities for both the vsix extension and the NuGet package but he has to add a custom .EditorConfig file or a custom ruleset file into the project repository.

Some of the repositories are not ourselves' so we can't add any preference files into the public repositories. But if we want to config the severities for the code-cracker analyzers, what can we do? I find that we can do nothing to solve such an issue. Only we can do is to make the code-cracker analyzers configurable globally.

So I make this pull request to extract all the diagnostic severities into one manager class and read the user's ruleset file from a global path.

## Current progress

- [x] Create a configuration class to manage all the severities for all the analyzers.
- [ ] Read the user's custom ruleset file to apply the configured rulesets.

## Problems

I'm stuck because I don't know how to read a file from a global file path in a portable project. I only know how to do it in a .NET Standard project.
#Bug
Should not trigger when loop variable used in loop &/or non-standard increment.

````csharp
public void Test()
{
    int[] ints = {1, 2, 3, 4, 5, 6, 7, 8};
    for (int j = 0; j < ints.Length; j += 2)
    {
        int a = ints[j];
        int b = ints[j + 1];
    }
}
````

Current output after fix applied (generates uncompilable code.):

````csharp
public void Test()
{
    int[] ints = {1, 2, 3, 4, 5, 6, 7, 8};
	foreach (var a in ints)
	{
		int b = ints[j + 1];
	}
}
````

There are CC0071 warnings for constructor parameters that are passed to base() or this() constructors. See "OK", "NOT OK" in comments for what's expected.

````csharp
public class Base
{
	public Base(int x) // CC0071 - OK
	{
	}
}
````
After fix applied - OK:
````csharp
public class Base
{
	private readonly int x;

	public Base(int x)
	{
		this.x = x;
	}
}
````
Let's create a derived class:
````csharp
public class Derived :Base
{
	public Derived(int x) : base(x) // CC0071 - NOT OK, because x is passed to base ctor
	{
	}
}
````

Another false flag for this(x):
````csharp
public class Base
{
	private readonly int x;

	public Base(int x)
	{
		this.x = x;
	}

	public Base(int x, string s) : this(x) // // CC0071 for x - NOT OK, for s - OK
	{
	}
}
````
CC0091 incorrectly suggests to make mvc actions static.

Example:
````csharp
[HttpPost]
 public string SayHello()
 {
        return "hello";
 }
````
This is a correct MVC action. If you make it static, then it will not work as an action.
So, CC0091 should ignore methods with mvc action attributes - HttpPost, HttpGet etc.

When using 455c0d9a1d52be3bacdf5d76cc4acec56a37f90f build of code-cracker in VS 2019 (16.0.0) on following code;

```c#
public class Program
{
    public static void Main()
    {
        new System.Collections.Generic.List<int>();
    }
}
```

It triggers exception during build:
warning AD0001: Analyzer 'CodeCracker.CSharp.Refactoring.PropertyChangedEventArgsUnnecessaryAllocationAnalyzer' threw an exception of type 'System.InvalidCastException' with message 'Unable to cast object of type 'Microsoft.CodeAnalysis.CSharp.Syntax.GenericNameSyntax' to type 'Microsoft.CodeAnalysis.CSharp.Syntax.IdentifierNameSyntax'.'.