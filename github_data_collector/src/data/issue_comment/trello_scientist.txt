If subj is not enough:
we have 'use' and 'try' functions returning promises (so, async = true). I'll call these funcs as **main** and **secondary**.
There is Function **consumer** that uses **main**. I am introducing parallel call, so now **consumer** uses result of **science()** call.
**Consumer** mutates object **A** after promise from **main** is resolved. But **secondary** hasn't been resolved yet. 
**Secondary** is resolved with object **B** and scientist grabs it to compare with **A** (which at this point has been mutated already). Result is - false positive mismatch. 

We currently solve it by cloning deep object **A** on the way from **science()**.

``` javascript
return science(name, function (experiment) {
// ... 
}).then(function(result) {
    return _.cloneDeep(result);
});
```

I thought you might be interested in making some general solution since our scenario seems quite real.

In your example you call `.inspect` method on observation directly `control.inspect()`. But in your test you don't do that. Instead you call `util.inspect` with argument of an observation and options object `{depth: -1}`.
Method `inspect` has two arguments: `depth, options`. `depth` is not being use in method itself, but it's required if you want to use `util.inspect`. But If I want to call `inspect` method itself I need to call it like `control.inspect(null, {depth: -1})` even though first argument is called `depth`
I hope it's clear why it caused me 30 minutes of time realising what's going on and why.
