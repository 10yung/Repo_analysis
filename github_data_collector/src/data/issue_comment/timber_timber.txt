I didnâ€˜t manage to get a hold of the mess that is #2170 now, after the base branch update to `2.x-factories` ðŸ˜…. So here it is again, with the same commits cherry-picked against `2.x-factories`.

**Ticket**: #2144

## Issue

See #2144.

## Solution

- Added new Twig functions for the relevant `Timber::get_*` functions.
- Updated the deprecation warnings. Thereâ€™s now always two possibilities. Instead of `Post()`, it can either be `get_post()` or `get_posts()`, depending on whatâ€™s at hand. The same goes for `Term` and `User`.
- I deliberately removed the `{{ Attachment() }}` function as well as deprecated the `{{ Image() }}` function without replacement, because we can use `{{ get_post() }}` and `{{ get_posts() }}`. The Class Maps will handle returning either a `Timber\Image` or `Timber\Attachment`.

## Impact

A more unified way of interacting with Timberâ€™s API throughout PHP and Twig.

## Usage Changes

New function names. Pretty much the same functionality, except for handling singular and multiple objects.

## Considerations

- Should we add Twig functions for the special-case `Timber::get_*` functions, like `Timber::get_user_by()` or `Timber::get_post_by_slug()`? I think, currently we donâ€™t have to do that.
- Should we add Twig functions for getting `Attachment` and `Image` posts: `{{ get_attachment }}` and `{{ get_image() }}`? If we have them in Twig, we should also have them in PHP, as `Timber::get_*` functions. 

## Testing

Tests are currently breaking. We **first** need to resolve the Considerations about adding a `get_attachment()` and a `get_image()` functions, so itâ€™s easier to update the tests. If we just switch to `get_post()` now and then want to add `get_attachment()` or `get_image()` later, it will be harder to find the test methods that need these functions. Now, we can still search for `{{ Attachment() }}` and `{{ Image() }}`.

## Todo

- [ ] Add Class Map for `Attachment` and `Image` class.
- [ ] Add testing for comment functions in Twig.
- [ ] Resolve todos in code.
When using date filter in Timber 1.14, `{{ "now"|date }}` returns the time in UTC, which appears to be my default set timezone (checked with `date_default_timezone_get()`), although my PHP default timezone is set to `America/Los_Angeles` (checked with `php --ri date` from command line).  It does not utilize the timezone set in my Wordpress settings in the admin backend.

When I use `date_default_timezone_set()`, that doesn't change (not expecting it to, just stating for reference).  When I specify the timezone (e.g. `{{ "now"|date('g:ia', 'America/Los_Angeles') }}`), it still returns the time in UTC.

This method as suggested in the [Twig docs](https://twig.symfony.com/doc/3.x/filters/date.html) didn't have any affect:
```php
$twig->getExtension( \Twig\Extension\CoreExtension::class )->setTimezone('America/Los_Angeles');
```
## Expected behavior
ACF Gallery field within a Flexible content template type should return an array of images (or ids)

## Actual behavior
When looping the flexible content the gallery field is returns a bool value of `false`.

## Steps to reproduce behavior
Create an ACF flexible content field with an ACF image gallery field within one of the content templates.

Loop the the flexible content field and for that template type return an array of images from the gallery field.

## What version of WordPress, PHP and Timber are you using?
WordPress 5.3.2, Timber 1.14.0, ACF PRO 5.8.7

## How did you install Timber? (for example, from GitHub, Composer/Packagist, WP.org?)
WP Plugins Interface

This branch / PR is meant to handle compliance with PHPStan Level 1 issues. Per @szepeviktor's [comment](https://github.com/timber/timber/pull/2165#issuecomment-573457549) in #2165, we won't be able to do anything about the `apply_filters` argument count errors (due to how WP declares that function) but we can get our house in order with declaring properties on various Timber classes.
**Ticket**: #2152

## Issue

See #2152.

## Solution

~~Add `Timber::get_post_by_slug()` and `Timber::get_post_by_title()`.~~
Add `Timber::get_post_by()`.

I chose `post_exists()` when searching for any post type and `get_page_by_title()` when searching for specific post types as the functions to retrieve a post by post title, because they seem to be the most direct and performant ones.

## Impact

Closes a gap in what `Timber::get_post()` canâ€™t (and shouldnâ€™t be able) to do in Timber 2.0.

## Usage Changes

Instead of `Timber::get_post()` with a post title or post slug, developers should use one of the two new functions.

## Considerations

The two functions always run database queries to get post IDs, which got me thinking about performance. When we use `::build()` to create an object, could we eventually use `wp_cache_get()` and `wp_cache_add()` in the future to create an internal object cache for Timber objects?

## Testing

Yes.
There should be at least 3 basic checks

- syntax
- **coding style**
- static analysis
## Expected behavior
In a Twig partial, we should be able to order terms on a post by their ID in ascending or descending order.

This is the code we're trying to use:

```
post.terms({taxonomy: 'example-taxonomy', orderby: 'term_id', order: 'ASC'})
```

## Actual behavior
The custom order values that we pass through to the method seem to have no impact on the ordering of the terms returned.

## Steps to reproduce behavior

Step 1: Create a custom taxonomy for posts, create multiple new items in the taxonomy
Step 2: Assign that custom taxonomy to posts so that we can add the terms to a post
Step 3: Create a new post, add multiple taxonomy terms to the post
Step 4: Add the following code to the timber template for the post (you will need to change the `taxonomy` value:

```
{% for term_item in post.terms({taxonomy: 'example-taxonomy', orderby: 'term_id', order: 'ASC'}) %}
{{ term_item.name }}
{% endfor %}
```

Steo 5: View the page in a web browser, change the `order` value in the above code, and observe that it has no impact on the ordering of the output taxonomy terms

## Could this be causing the problem?

I tried to debug this and tracked down the following line of code in `lib/Post.php (line 764)`:

```$terms = wp_get_post_terms( $this->ID, $taxonomies, $args['query'] );```
(https://github.com/timber/timber/blob/master/lib/Post.php#L764)

Changing this code to the following fixes the problem:
```$terms = wp_get_post_terms( $this->ID, $taxonomies, $args );```

It seems like this is a bug, because the full arguements list is not being passed through to the `wp_get_post_terms` function, just the `query` which includes the taxonomy term being queried, but no other custom args (I may have missed something here, or my implementation in the twig file may be incorrect, but I don't think it is).

## What version of WordPress, PHP and Timber are you using?
WordPress 5.3.2
PHP 7.2.14
Timber 1.13.0

If the code I found is actually the cause of the problem, I'm happy to fork the code and create a pull request to fix this.

Also please note that we can't order the taxonomy term in PHP because in our codebase, this code is used in a twig partial that is included in various other twig files.
**Ticket**: #2155

## Issue

The Co-Authors Plus integration as it currently exists is incompatible with Factories and Class Maps. This is an attempt to make them compatible.

## Solution

I describe the proposed solution in more detail in the issue write-up, but basically what I'm doing here is treating "guest authors" as a special case of the `timber/user/classmap` filter: instead of calling a Factory, it applies the filter directly.

## Impact

Should be none.

## Usage Changes

None, other than adding support for class maps in this integration.

## Considerations

I may be wrong about everything. :D

## Testing

Updated tests where it made sense and added a test specifically for dealing with overriding the class instantiated for guest authors.
**NOTE: A first-stab PR for this is forthcoming, but as I call out below I think this deserves its own issue.**

## The main issue: which User class to instantiate?

In the `Integrations\CoAuthorsPlus`, the `authors()` method (hooked onto the `timber/post/authors` filter) determines which class to instantiate:

```php
	public function authors( $author, $post ) {
		$authors = array();
		$cauthors = get_coauthors($post->ID);
		foreach ( $cauthors as $author ) {
			$uid = $this->get_user_uid( $author );
			if ( $uid ) {
				$authors[] = new \Timber\User($uid);
			} else {
				$authors[] = new CoAuthorsPlusUser($author);
			}
		}
		return $authors;
	}

	protected function get_user_uid( $cauthor ) {
		// if is guest author
		if( is_object($cauthor) && isset($cauthor->type) && $cauthor->type == 'guest-author'){
			// if have have a linked user account
			global $coauthors_plus;
			if( !$coauthors_plus->force_guest_authors && isset($cauthor->linked_account) && !empty($cauthor->linked_account ) ){
				return $cauthor->linked_account;
			} else {
				return null;
			}
		} else {
			return $cauthor->ID;
		}
	}
```

The logic around whether `$uid` is truthy appears to depend on whether it's for a "guest author" (I gather this is just arbitrary data submitted at post creation time - not corresponding to a `wp_users` row), whether guest authors are being "forced" (no idea what this means - plugin setting?), etc. In other words, I'm not terribly certain what this code does. :)

So my main question is: how should this interface with UserFactory and the user class map? I'm taking a stab at implementing what I _think_ should happen, but I'd like to get a review specially for this.

## Handling `stdClass` instances

Another concern is that `get_coauthors()` appears to sometimes return instances of `stdClass`. I think these represent "guest authors." Trouble is, `stdClass` is not supported by `UserFactory::from()` - in this case [it calls `from_post_object`](https://github.com/timber/timber/blob/2.x-factories/lib/Factory/UserFactory.php#L21) (copy/pasta, will fix) which eventually throws an `InvalidArgumentException`. The reasoning here is that at the heart of @gchtr's design there's an assumption that the callback to the `timber/class/classmap` filter eventually gets a `WP_User`. This is a strong guarantee and the entire class map API gets weaker if we throw this away.

We _could_ add a case to handle `stdClass` inside the factory, but I'm hesitant to do that because it's a good design and I **do not** think that Factories should have to know about special stuff like Integrations. I think it's perfectly reasonable for integrations to know how to bootstrap their own objects that Factories know how to deal with. So the approach I'm going to take to this is to have `Integrations\CoAuthorsPlus` instantiate `CoAuthorsPlusUser` objects directly for (what I assume are) guest authors.

## Linked Authors

Apparently "linked authors" are a thing. Appears to have something to do with guest authors, and it's causing `testLinkedGuestAuthor()` to fail. My head is already swimming from all this abstraction. Halp?! ;)
Test code that involve adding filters or actions gets noisy because you have to manually remove them at the end of each test, or else the hook spills over into other tests. This also makes it error prone because it's easy to forget to remove the hook.

Add helper methods to `Timber_UnitTestCase` for temporarily adding filters or actions. These methods should store a reference to the params they were passed. In `tearDown()`, loop through all the stored references of added filters/actions and remove them using the same params.