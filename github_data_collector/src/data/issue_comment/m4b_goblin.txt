
The relocation fields are bitfields, which makes the ordering all weird. Currently we only use the little endian ordering, but that won't work for big endian files.

LLVM has code to handle this difference, see [here](https://github.com/llvm-mirror/llvm/blob/2c4ca6832fa6b306ee6a7010bfb80a3f2596f824/lib/Object/MachOObjectFile.cpp#L141-L170).

Also related, we don't currently parse scattered relocations.
It works on my fork: https://github.com/lzutao/goblin/commit/6221707f01f1b45f4fe160ed5c57cd2559811300/checks?check_suite_id=384422473
A bit of the history at https://github.com/gimli-rs/object/issues/154 and motivation at https://github.com/indygreg/PyOxidizer/pull/183

The default Python extension C flags on Windows with `cl.exe` includes [`/GL` (Whole Program Optimization)](https://docs.microsoft.com/en-us/cpp/build/reference/gl-whole-program-optimization?view=vs-2019).  The docs say

> .obj files produced with /GL will not be available to such linker utilities as EDITBIN and DUMPBIN.

When that is used, the .obj format is very strange.  Omit the option, and the usual .obj format is used and `goblin` and `object` process it wonderfully.

As I can hack the code involved, omitting that flag is possible, so this doesnt block us, but it would be nice to have the optimisations, and have one less hack.  Anyways, I can proceed, so thanks very much for a workable library.
Parsing [this archive file](https://github.com/m4b/goblin/files/3774253/os.zip) seems to cause a panic:

```
thread 'main' panicked at 'no entry found for key', src/libcore/option.rs:1166:5
stack backtrace:
   0: backtrace::backtrace::libunwind::trace
             at /cargo/registry/src/github.com-1ecc6299db9ec823/backtrace-0.3.34/src/backtrace/libunwind.rs:88
   1: backtrace::backtrace::trace_unsynchronized
             at /cargo/registry/src/github.com-1ecc6299db9ec823/backtrace-0.3.34/src/backtrace/mod.rs:66
   2: std::sys_common::backtrace::_print
             at src/libstd/sys_common/backtrace.rs:47
   3: std::sys_common::backtrace::print
             at src/libstd/sys_common/backtrace.rs:36
   4: std::panicking::default_hook::{{closure}}
             at src/libstd/panicking.rs:200
   5: std::panicking::default_hook
             at src/libstd/panicking.rs:214
   6: std::panicking::rust_panic_with_hook
             at src/libstd/panicking.rs:477
   7: std::panicking::continue_panic_fmt
             at src/libstd/panicking.rs:384
   8: rust_begin_unwind
             at src/libstd/panicking.rs:311
   9: core::panicking::panic_fmt
             at src/libcore/panicking.rs:85
  10: core::option::expect_failed
             at src/libcore/option.rs:1166
  11: core::option::Option<T>::expect
             at /rustc/625451e376bb2e5283fc4741caa0a3e8a2ca4d54/src/libcore/option.rs:345
  12: <alloc::collections::btree::map::BTreeMap<K,V> as core::ops::index::Index<&Q>>::index
             at /rustc/625451e376bb2e5283fc4741caa0a3e8a2ca4d54/src/liballoc/collections/btree/map.rs:1835
  13: goblin::archive::Archive::parse
             at goblin/src/archive/mod.rs:467
  14: goblin::Object::parse
             at goblin/src/lib.rs:312
  15: strand_match::main
             at src/main.rs:25
  16: std::rt::lang_start::{{closure}}
             at /rustc/625451e376bb2e5283fc4741caa0a3e8a2ca4d54/src/libstd/rt.rs:64
  17: std::rt::lang_start_internal::{{closure}}
             at src/libstd/rt.rs:49
  18: std::panicking::try::do_call
             at src/libstd/panicking.rs:296
  19: __rust_maybe_catch_panic
             at src/libpanic_unwind/lib.rs:80
  20: std::panicking::try
             at src/libstd/panicking.rs:275
  21: std::panic::catch_unwind
             at src/libstd/panic.rs:394
  22: std::rt::lang_start_internal
             at src/libstd/rt.rs:48
  23: std::rt::lang_start
             at /rustc/625451e376bb2e5283fc4741caa0a3e8a2ca4d54/src/libstd/rt.rs:64
  24: main
  25: __libc_start_main
  26: _start
note: Some details are omitted, run with `RUST_BACKTRACE=full` for a verbose backtrace.
```

Source:

```rust
use std::fs::File;
use std::path::Path;
use std::io::Read;

use goblin::Object;

fn main() {
    let mut f = File::open(Path::new("os.a")).unwrap();
    let mut buf = Vec::new();
    f.read_to_end(&mut buf);
    Object::parse(&buf);
}
```

`ar` seems to extract this archive just fine as well.
It would be extremely helpful to use the capabilities of goblin when working with memory/process dumps as well as files on disk. Since memory dumps are already mapped we can just skip over the rva resolve function and all of the other functionality will work still.

I'm not sure however if it would be best to implement this as a compile-time feature (as this PR does it) or as a runtime feature (maybe splitting the parse function into parse_image / parse_mapped or something similiar.
I’ve noticed that goblin has a very long compile time, relatively speaking.

I’ve meant to look into this before whether there is something we can do about it (and also how to look into it).

Maybe this is something the rustc might be interested in?  It doesn’t have a “lot” of lines of code, nor is it really very generic (aside from usage of scroll) so I’m wondering what’s the precise issue.
We need to have a story for binary data in goblin, as it’s becoming more and more urgent to have a full test suite we can run against for compliance and regression.

We don’t want to store binary data in git, since this adds to clone time and is generally frowned against.

There are a few binary files in goblin or what is effectively binary data with vecs with u8s, but these are grandfathered, and we don’t need to concern ourselves with them.

Im open to any and all suggestions about what best path forward is here :)
[![safety-dance](https://raw.githubusercontent.com/rust-secure-code/safety-dance/master/img/safety-dance.png)](https://github.com/rust-secure-code/safety-dance)

(This is currently a WIP PR, for other members of `safety-dance` to help audit and improve the code)

This PR aims to tackle the issues raised in https://github.com/rust-secure-code/safety-dance/issues/8 :

  - `unsafe { ... }` blocks and `unsafe impl`s had no

    ```rust
    // # Safety
    //
    //   - ...
    ```

    annotations, which makes it easy to forget or miss safety requirements / invariants to uphold, be it when the code is written, or later when the code is modified; it also makes quickly auditing the code harder. That's why, imho, it is very important to have such safety comment annotations;

  - The usages of `unsafe` corresponded to four cases:

      - `.get_unchecked` indexing for `pe/data_directories` array getters.

          - These have been factored in a macro to avoid code repetition, and within that macro compile-time assertions have been added so that the code is robust to changes;

      - `unsafe fn` exported to the API;

          - These have **not been audited** (yet): by virtue of being marked `unsafe`, users of the library must explicitely opt into calling these `unsafe` functions, and it is thus (mainly) their responsibility to do it correctly, hence making it a low-priority fix.

      - `unsafe impl` (for `::plain::Plain`).

          - These (implicitly) relied on each field also being `Plain`, such as integers, but where also used with a macro (_à la_ C++ template): hence a static assertion has been added in those cases to ensure that the "template" type parameter is indeed `Plain`.

          - `Plain` on its own offers non-`unsafe` transmute-based APIs to go into and from slices of bytes; the soundness responsibility of it falls down on the `::plain` crate and has **not been audited** either. Ideally, all the `::plain` usages could be replaced by `::zerocopy`, since thanks to the `#[derive(...)]` it offers compile-time checks for the soundness of these impls.

      - `unsafe { fd.read_exact(plain::as_mut_bytes(&mut /* some structure */)?); }`

          - These have been the main change of the PR: with the compile-time checked `#[derive(AsBytes)]`, we get access to a non-`unsafe` `::zerocopy::AsBytes::as_bytes_mut` for equivalent functionality.

          - This, in turn, has showed that there were some structures that did have padding, which has been removed with the `#[repr(C, packed)]` annotation, and the appropriate `ptr::read_unaligned`-based getters.
I have met some nasty exe that have a invalid .idata section, which will panic.
Something like:
```
thread 'main' panicked at 'called `Result::unwrap()` on an `Err` value: Malformed("Cannot find name from rva 0x43720004 in sections ...
```
code: https://github.com/m4b/goblin/blob/master/src/pe/import.rs#L147-L148

In this moment i actually don't know why these exe have such .idata. I just want to parse the unwind info.
Now `pe::PE::parse` will parse the whole pefile.
I am wondering would it be nice to pass some options to enable/disable parse partially.
Like i would disable parsing the import table as i just want to get the exception table (for the unwind info).

BTW, i use gimli/object to help parsing object files. Thanks for the great job.
I don't know where i should fire this issue (goblin or gimli/object?)