Use the `script` exporter for scripts, and grab the filename extension from the resource information provided by `nbconvert`, so that file extension/syntax highlighting etc in gists works for non-python kernels.
A few minor bug-fixes to make the plugin work correctly for notebooks running e.g. via jupyterhub as well as locally.

Thanks for the plugin!
This adds another Travis environment to install ESLint and run it. Will need to dive into more how ESLint is configured to get this fixed for the Jupyter AMD modules.
We should run `eslint` or similar over all of the Javascript files as part of Travis.

Any preferences or best practices we want to follow?  I have no preference other than just picking something.
I followed all of the instructions to install and configure jupyter-notebook-gist.

I can see the gist button in my notebook. But when I click it, I get the message "You haven't configured your GitHub Client ID in your jupyter_notebook_config.py file. Please set the Client ID and Secret before using this plugin. See the README for more info."

I created and populated my jupyter_notebook_config.py file precisely as described in the [README](https://github.com/mozilla/jupyter-notebook-gist#configuration) (after creating a new OAUTH app on github). I also tried launching the notebook with `oauth_client_id` and secret specified as command line arguments. No luck.

In the absence of any more verbose errors or debugging info, I am totally stuck and have no idea how to proceed.

I am using jupyter version 4.3.0, notebook version 5.0.0, and python 3.7.
If using [pew](https://github.com/berdario/pew),
the installation instructions need to be modified from
```
jupyter nbextension install --py jupyter_notebook_gist
```
to
```
pew new EXAMPLE
NBDIR=`which jupyter`
jupyter nbextension install --py jupyter_notebook_gist --nbextensions=$NBDIR/share/jupyter/nbextensions
```
There is a great library called [github3.py](https://github.com/sigmavirus24/github3.py) that allows much saner handling of fetching, creating and updating gists.

This should give us the ability to really test the core pieces of the backend API
