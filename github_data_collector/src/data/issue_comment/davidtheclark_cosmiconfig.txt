It would be good to have access to the final config or just to default `searchPlaces`.

https://github.com/davidtheclark/cosmiconfig/blob/d26b10550df566648c5a9a05d893d800c9b129c6/src/index.ts#L106-L112

My use case requires allowing multiple configs per project (root config and sub configs per directory). To achieve that I'm just using glob matching, for .e.g (**/.libname.rc). Given the above, would be good to have access to generated `searchPlaces`. 
The easiest way would be to just expose `config` from `ExplorerBase`: https://github.com/davidtheclark/cosmiconfig/blob/master/src/ExplorerBase.ts#L16
by providing `getConfig` public method.

If that sounds okay let me know I can prepare a PR. Thanks ðŸ¤“ 
I want to use the JS loader for files without extension.  

Before v6:

```js
import cosmiconfig from 'cosmiconfig';

cosmiconfig(namespace, {
  loaders: {
    noExt: cosmiconfig.loadJs
  }
});
```

After:

```js
import {cosmiconfig, defaultLoaders} from 'cosmiconfig';

cosmiconfig(namespace, {
  loaders: {
    noExt: defaultLoaders['.js']
  }
});
```

1. Because I am not looking to implement _my own_ loader, I need to dig into the `defaultLoaders` object to get at function I need.  It's buried pretty deep in there.
1. Having to use bracket notation to reference the function is also less-than-ideal

I'm not sure what the impetus was behind changing this, but a suggestion to make this use case more ergonomic would be a nice shortcut like so:

```js
import {cosmiconfig} from 'cosmiconfig';

cosmiconfig(namespace, {
  loaders: {
    noExt: '.js' // use the default .js loader
  }
});
```

This should work with custom loaders:

```js
import {cosmiconfig} from 'cosmiconfig';
import {myLoader} from 'somewhere';

cosmiconfig(namespace, {
  loaders: {
    '.js': myLoader,
    noExt: '.js' // use myLoader
  }
});
```

Alternatively, expose the default loader _functions_ at the module level, as previously named in v5.x; `loadJson`, `loadYaml`, etc.


Before this change, `cosmiconfig()` in ToC points to the very first heading.
If you approve this i can send a PR
First and foremost: Great that you switched from Flow to TypeScript! Although, when switching from `@types/cosmiconfig` to the types which are now provided by this package, I experienced the following issues:

---

### No direct import for `CosmiconfigResult`

Currently when I want to declare a variable which will get the result from `cosmiconfig.search()`, I need to do it like this:

```ts
import {cosmiconfig} from 'cosmiconfig';
import {CosmiconfigResult} from 'cosmiconfig/dist/types';

let result: CosmiconfigResult;
```

But I'd like to import it conveniently like this:

```ts
import {cosmiconfig, CosmiconfigResult} from 'cosmiconfig';

let result: CosmiconfigResult;
```

Unfortunately this is not possible since `CosmiconfigResult` is not re-exported from the `types` dir. I tried fixing it but since `isolatedModules: true` is set in `tsconfig.json`, re-exporting is disallowed:
```
src/index.ts:137:56 - error TS1205: Cannot re-export a type when the '--isolatedModules' flag is provided.

137 export { cosmiconfig, cosmiconfigSync, defaultLoaders, CosmiconfigResult };
```

---

### No clear return type of `cosmiconfig()`

I have a class which adds cosmiconfig as a property and I have to define its type. Since `cosmiconfig()` returns an object (and is [especially excluded from needing a convenient return type](https://github.com/davidtheclark/cosmiconfig/blob/b185782355ac1f5906b6d2c9cfd68b83df249c31/src/index.ts#L46)), I need to declare it like this:

```ts
import {cosmiconfig} from 'cosmiconfig';

class MyClass {
  private readonly cosmiconfig: ReturnType<typeof cosmiconfig>;

  constructor() {
    this.cosmiconfig = cosmiconfig('myconfig');
  }
}
```

I'd rather like to be able to declare it like this:

```ts
import {cosmiconfig, Cosmiconfig} from 'cosmiconfig';

class MyClass {
  private readonly cosmiconfig: Cosmiconfig;

  constructor() {
    this.cosmiconfig = cosmiconfig('myconfig');
  }
}
```

Where `Cosmiconfig` is an interface which describes the return value of `cosmiconfig()`.
I'm trying to emulate Parcel's config-file resolution<sup>[[1]](https://github.com/parcel-bundler/parcel/blob/1.x/src/Resolver.js#L417-L429)[[2]](https://github.com/parcel-bundler/parcel/blob/1.x/src/utils/config.js#L12-L32)</sup> (to work around the fact that it [no longer works synchronously](https://github.com/parcel-bundler/parcel/issues/3566)), which walks up from an asset's directory to either the filesystem root directory or the nearest enclosing `node_modules` directory, whichever comes first. This is proving to be difficult because `stopDir` is required to be a fixed/absolute path.

In theory, I could walk up from the asset's directory myself to see if there's an enclosing `node_modules` directory and supply that as the static `stopDir`, but I'd rather not roll my own directory traversal since it defeats the point of using this module.

The desired behavior would be straightforward to emulate if the `stopDir` option could (optionally) be supplied as a function, e.g.:

```javascript
const stopDir = dir => {                                                      
    return (dir === fsRoot) || Path.basename(dir) === 'node_modules'          
}

const explorer = cosmiconfig(name, { stopDir })
```
I mean the traditional ini format, like:
```
a=b
c=d
```
It gives the plain string, instead of the parsed object, like `{a: "b", c: "d"}`.

In rare cases, I want to use cosmiconfig in a generic way, to load from a user-specified config file.  I want my code to behave identically regardless of the filename specified by the user, so I need to disable cosmiconfig's special-casing of `package.json`.

One hack is to ask for `./package.json` instead of `package.json`.  However, I think a better approach is for `Explorer` to have a property `packageJsonName` which is a string or array of strings listing filenames that should be treated as `package.json` instead of a normal config file.

This property can be modified by people like me who need to treat package.json like any other config file.
Hello,

I searched in the issues here and shockingly I haven't found this mentioned.

Currently, cosmiconfig searches up the parent tree from the working directory, stopping at `$HOME`, which is fine and most, I would assume, are okay with this.

However, for filesystem psychopaths like myself, it pains me to have to move any sort of user configuration file out `$XDG_CONFIG_HOME/project-name/` directory (usually, `~/.config/project-name/`)  and pollute my home directory.

Any thoughts on adding this as a final search path?

You can read up on the specification [here](https://standards.freedesktop.org/basedir-spec/basedir-spec-latest.html) and [here](https://wiki.archlinux.org/index.php/XDG_Base_Directory_support#XDG_Base_Directory_specification).

In short, using prettier as an example, I'd imagine the workflow to go like this...

1. Perform the current lookup traversal as it is done right now.
2. If nothing found, check the following:
  - `$XDG_CONFIG_HOME/prettier/config`
  - `$XDG_CONFIG_HOME/prettier/[...current standard file name checks]`
  
Thanks for considering.
Would you mind me adding support for TOML? Because TOML looks simpler and less error-prone

There is a good article explaining the reason why TOML is better than YAML
https://arp242.net/weblog/yaml_probably_not_so_great_after_all.html