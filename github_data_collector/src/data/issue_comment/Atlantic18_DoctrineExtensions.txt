Hi, 
Am currently using Timestampable and Blameable in my entities and all working well, but when i execute my fixtures, all entities created with the correct created_at and updated_at but created_by and updated_by stays null. i think because no user is authenticated when executing the fixtures cmd.
Is there a solution to get the job done?
### Prerequisites
- We are using Symfony 4.4. 
By default, with the Symfony, all the listeners are not initialized until they are requested from the EventManager. It's done by `Symfony\Bridge\Doctrine\ContainerAwareEventManager` class.
- We have hundreds of doctrine event listeners in an application. 

### Current Behaviour
`AbstractTreeRepository::_construct()` method instantiates all the doctrine event listeners for all the entities registered in a system by calling `$em->getEventManager()->getListeners()` in this foreach statement:
https://github.com/Atlantic18/DoctrineExtensions/blob/efe9c08b81e3614f3c1e07ed8cb243569f5e4978/src/Tree/Entity/Repository/AbstractTreeRepository.php#L36-L46


As a result, when using DoctrineExtensions, all the doctrine listeners initialized every time we call `getRepository(Category::class)` and as we are rendering categories in all the pages, this code slows down everything.

### Proposed solution
Instead of search for the event listener, that is an instance of TreeListener, at every request, this can be configurable per entity manager or done in a container compile-time and handled with the setter method in AbstractTreeRepository.
I'm looking for a way to temporarily disable the Loggable extension so I can improve performance of a bulk-loading console command in a Symfony 4 project. Any suggestions how to do this at runtime in a command?
Hi all!

I have the following configuration :

```
gedmo.listener.tree:
    class: Gedmo\Tree\TreeListener
    tags:
        - { name: doctrine.event_subscriber, connection: default, priority: 10 }
    calls:
        - [ setAnnotationReader, [ "@annotation_reader" ] ]

App\EventListener\Doctrine\:
    resource: '../src/EventListener/Doctrine'
    tags:
        - { name: doctrine.event_subscriber, connection: default }
```

If I enable only one of the two declarations, it works. But if I left both uncommented, I've got the following error : 

> Tree listener was not found on your entity manager, it must be hooked into the event manager

Did I do anything wrong ? Changing priority doesn't fix anything.

Thanks for you help,

Jérémy
For some reason this PR, while saying that it was merged, didn't actually make it into the codebase.  This PR cleans up the OM postFlush, detaching the entity/object that was soft-deleted.

See the test for an example of why this is useful.
An example Actor class that implements the new BlameableActorInterface

```php
<?php

class Actor implements BlameableActorInterface
{

    protected RoleStack $roleStack;


    /**
     * Constructor
     *
     * @param RoleStack $roleStack
     */
    public function __construct(RoleStack $roleStack)
    {
        $this->roleStack = $roleStack;
    }


    /**
     * Gets the actor/Role
     *
     * @return Role
     */
    public function getActor()
    {
        return $this->roleStack->top();
    }
}
```
Added support for a new on="remove" event listener for the Blameable extension.

Simply add `@Gedmo\Blameable(on="remove")` annotation to the property.
Hi guys,

I found a bug and know how to fix it but I want to log it here first.

I inject `\Stof\DoctrineExtensionsBundle\Uploadable\UploadableManager` into my controller.
I then use it to upload two files to two entities.
Upload fails on the second one because `lib/Gedmo/Uploadable/UploadableListener.php` uses metadata of the first entity for both. `getFilePathFieldValue` will then complain because the entity does not match the metadata.

```
        // lib/Gedmo/Uploadable/UploadableListener.php:115
        $meta = $om->getClassMetadata(get_class($first['entity']));
        $config = $this->getConfiguration($om, $meta->name);

        foreach ($this->fileInfoObjects as $info) {
            $entity = $info['entity'];

            // If the entity is in the identity map, it means it will be updated. We need to force the
            // "dirty check" here by "modifying" the path. We are actually setting the same value, but
            // this will mark the entity as dirty, and the "onFlush" event will be fired, even if there's
            // no other change in the entity's fields apart from the file itself.
            if ($uow->isInIdentityMap($entity)) {
                if ($config['filePathField']) {
                    $path = $this->getFilePathFieldValue($meta, $config, $entity);
                    $uow->propertyChanged($entity, $config['filePathField'], $path, $path);
                } else {
                    $fileName = $this->getFileNameFieldValue($meta, $config, $entity);
                    $uow->propertyChanged($entity, $config['fileNameField'], $fileName, $fileName);
                }
                $uow->scheduleForUpdate($entity);
            }
        }
```

Easy fix would be to move these two lines inside the `foreach` loop but it would have a negative impact on performance.
```php
        $meta = $om->getClassMetadata(get_class($first['entity']));
        $config = $this->getConfiguration($om, $meta->name);
```

How about a caching mechanism to avoid calling `getClassMetadata` and `getConfiguration`?

```php
        $metaByClass = [];
        $configByClass = [];
        foreach ($this->fileInfoObjects as $info) {
            $entity = $info['entity'];

            /** changes start here **/
            $entityClass = get_class($info['entity'];

            if (!isset($metaByClass[$entityClass])) {
                $metaByClass[$entityClass] = $om->getClassMetadata($entityClass));
                $configByClass[$entityClass] = $om->getClassMetadata($entityClass));
            }
            $meta = $metaByClass[$entityClass];
            $config = $configByClass[$entityClass];
            /** changes end here **/

            // If the entity is in the identity map, it means it will be updated. We need to force the
            // "dirty check" here by "modifying" the path. We are actually setting the same value, but
            // this will mark the entity as dirty, and the "onFlush" event will be fired, even if there's
            // no other change in the entity's fields apart from the file itself.
            if ($uow->isInIdentityMap($entity)) {
                if ($config['filePathField']) {
                    $path = $this->getFilePathFieldValue($meta, $config, $entity);
                    $uow->propertyChanged($entity, $config['filePathField'], $path, $path);
                } else {
                    $fileName = $this->getFileNameFieldValue($meta, $config, $entity);
                    $uow->propertyChanged($entity, $config['fileNameField'], $fileName, $fileName);
                }
                $uow->scheduleForUpdate($entity);
            }
        }

```

What do you guys think? Good enough for a PR?

Thanks!
Hello. I would like to use these extensions with slim. Is anyone able to supply instructions?
Hello!

I get started with symfony 5 and install doctrine extensions. 

In the your doc said "edit app/config/config.yml". But such file doesnt exist in symfony skeleton project. 

As I understand it I need edit "config/packages/doctrine.yaml" file ? 

And second. Into the doc written "dir: "%kernel.root_dir%/../vendor/gedmo/doctrine-extensions/lib/Gedmo/Translatable/Entity"" 

But now it's need use kernel.project_dir instead kernel.root_dir 

Where can I see entire list of changes?