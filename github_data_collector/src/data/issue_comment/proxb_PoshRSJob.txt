I think it is a bug

I have a script that run fine in ISE or the console but would not run in PRTG.

in PRTG it would output this in the log file:


```Add-Type : (0) : Source file 'C:\Windows\TEMP\ends0p0y.0.cs' could not be found

(1) :     using System;
At C:\Program Files\WindowsPowerShell\Modules\PoshRSJob\1.7.4.4\PoshRSJob.psm1:51 char:5
+     Add-Type @"
+     ~~~~~~~~~~~
    + CategoryInfo          : InvalidData: (Microsoft.Power...peCompilerError:AddTypeCompilerErro 
   r) [Add-Type], Exception
    + FullyQualifiedErrorId : SOURCE_CODE_ERROR,Microsoft.PowerShell.Commands.AddTypeCommand
 
WARNING: (0) : No source files specified

(1) :     using System;
Add-Type : Cannot add type. Compilation errors occurred.
At C:\Program Files\WindowsPowerShell\Modules\PoshRSJob\1.7.4.4\PoshRSJob.psm1:51 char:5
+     Add-Type @"
+     ~~~~~~~~~~~
    + CategoryInfo          : InvalidData: (:) [Add-Type], InvalidOperationException
    + FullyQualifiedErrorId : COMPILER_ERRORS,Microsoft.PowerShell.Commands.AddTypeCommand
 
Unable to find type [RSJob].
At C:\Program Files\WindowsPowerShell\Modules\PoshRSJob\1.7.4.4\Public\Get-RSJob.ps1:72 char:9
+         [RSJob[]]$Job,
+         ~~~~~~~~~
    + CategoryInfo          : InvalidOperation: (RSJob:TypeName) [], RuntimeException
    + FullyQualifiedErrorId : TypeNotFound
 
Unable to find type [RSJob].
At C:\Program Files\WindowsPowerShell\Modules\PoshRSJob\1.7.4.4\Public\Get-RSJob.ps1:72 char:9
+         [RSJob[]]$Job,
+         ~~~~~~~~~
    + CategoryInfo          : InvalidOperation: (RSJob:TypeName) [], RuntimeException
    + FullyQualifiedErrorId : TypeNotFound
```
 

After searching for the issue I found this:
https://social.technet.microsoft.com/Forums/windows/en-US/c8467128-ab64-4920-8697-3cc76e901568/addtype-usage?forum=winserverpowershell

In PoshRSJob.psm1 I changed line 72 from:

 ```public DateTime LastActivity = DateTime.MinValue;```
 to 
```public System.DateTime LastActivity = System.DateTime.MinValue; ```

It now appears to work. 



Hi @proxb,

Just curious if you plan to maintain the module since I haven't seen a commit in over a year, or if we should be moving to ThreadJob since that's the semi-"official" solution, even though it's nowhere near as feature rich as your awesome module.

Thanks.
This may just be my lack of PowerShell knowledge, but why is it when I do something like this:
PS >$job=Get-Job <number>
PS >$job.Name
Name-Of-My-Job
PS >echo "job Name=$job.Name"
job Name=RSJob.Name

Basically, when I try to access any property of a RSJob object inside a quoted string it prints RSJob.<property> instead of the property value?


### Hello,
I am a student in DUT Networks and telecommunication  and also a beginner in powershell. (FR : DUT / UK : DHE / US : AD )
After a few hours of searching the Internet, I would like to display the different tables in the RSJob. 

![image](https://user-images.githubusercontent.com/38047623/62456895-cffe8300-b779-11e9-9c89-d66758c3330a.png)

i have this return on my terminal, someone can guide me ? :) 

![image](https://user-images.githubusercontent.com/38047623/62457008-19e76900-b77a-11e9-9187-8a09bc601c35.png)




### **_( the code on plain text if someone want to edit )_**
`$ADCheck=@(Get-ADComputer -filter "*" -Properties IPv4address -SearchBase "OU=COMPUTERS,DC=test,DC=local" |Where-Object {$_.ipv4address} |  Select-Object -ExpandProperty ipv4address ) 
$TableauEchP=@()
$TableauRPES=@()
$TableauRPRS=@()
$ADCheck | Start-RSJob -Name {$_} -Throttle $env:NUMBER_OF_PROCESSORS  -ScriptBlock {
    param($ip)[string]
        if(Test-Connection -Count 1 -ComputerName $ip -Quiet)
        {
            try {
                if(Get-Service -Name test)
                {
                $TableauRPRS += $ip
                }
                else
                {
                $TableauRPES += $ip
                }
            }
            catch{}
        }
        else
        {
            $TableauEchP += $ip
        }
    }  
Get-RSJob | Wait-RSJob
Write-Host "//////////////////////////////////////////////////////////////////////////////////////////////////"
Write-Host "This is IP as all test on TRUE"
$TableauRPRS
Write-Host "//////////////////////////////////////////////////////////////////////////////////////////////////"
Write-Host "Ping : TRUE - Service : FALSE"
$TableauRPES
Write-Host "//////////////////////////////////////////////////////////////////////////////////////////////////"
Write-Host "Ping : FALSE, check computer if is up"
$TableauEchP
Write-Host "//////////////////////////////////////////////////////////////////////////////////////////////////"`

I've been wanting to get into runspacing for some time, although, I'm not certain what can fit inside the script block or not.

As it is, I've got too much on my plate to continue testing with it, but one thing I'd like to do is get this idea working with some loops... similar to how the threads are controlled by an array declaration... like 0..5 or etc.

Any chance someone could be kind enough to show me some examples or use case scenarios on what can be done, or what can't be? I found an older video from a couple of years ago that talks about Runspace Factory, and I can only assume that PoshRSJobs is a very well refined derivative of that methodology.

Feel free to drop me a line if you'd like, mcook@securedigitsplus.com or check out my GitHub repo's... "personal account repo" @ github.com/mcc85s/PSD-Remaster or "company account repo" github.com/secure-digits-plus-llc/hybrid-desiredstatecontroller

Any feedback in terms of PoshRSJobs would be greatly appreciated, but if you have other suggestions, I'm always looking to learn more.

- Michael C.
**Do you want to request a *feature* or report a *bug*?**
bug

**What is the current behavior?**
All jobs always appear to have a 'HasMoredata' property of False. Even though receive data shows that each job does in fact have data.

**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem**
Create any jobs with Start-RSJob that returns data, then use Get-RSJob and Receive-RSJob. The Get-RSJob will show that each job has a "HasMoreData" property of False. Receive-RSJob will show that each job actually does contain data.

**What is the expected behavior?**
HasMoreData should be True, when it has data. Ideally, when received, the data would be cleared from the job and the HasMoreData property would be set to False.

**Which versions of Powershell and which OS are affected by this issue? Did this work in previous versions of our scripts?**
Name                           Value
----                           -----
PSVersion                      5.1.17134.765
PSEdition                      Desktop
PSCompatibleVersions           {1.0, 2.0, 3.0, 4.0...}
BuildVersion                   10.0.17134.765
CLRVersion                     4.0.30319.42000
WSManStackVersion              3.0
PSRemotingProtocolVersion      2.3
SerializationVersion           1.1.0.1

ModuleType Version    Name                                ExportedCommands
---------- -------    ----                                ----------------
Script     1.7.4.4    PoshRSJob                           {Get-RSJob, Receive-RSJob, Remove-RSJob, Start-RSJob...}



**Please provide a code example showing the issue, if applicable:**
Example from https://learn-powershell.net/2015/03/31/introducing-poshrsjob-as-an-alternative-to-powershell-jobs/
```PowerShell
$Test = 42
1..5|Start-RSJob -Name {"TEST_$($_)"} -ScriptBlock {
    Param($Object)
    $DebugPreference = 'Continue'
    $PSBoundParameters.GetEnumerator() | ForEach {
        Write-Debug $_
    }
    Write-Verbose "Creating object" -Verbose
    New-Object PSObject -Property @{
        Object=$Object
        Test=$Using:Test
    }
}```

I'm just curious what PoshRSJob stands for? PowerShell _something_ Job. I often find it hard to remember the name of this library, especially compared to other similar ones, like `Invoke-Parallel`. I'm hoping that knowing what the `RS` in PoshRSJob stands for will make it easier for me to recall the name of this module and it's functions in the future.

Perhaps you could update the ReadMe.md to include the acronym meaning.
**Do you want to request a *feature* or report a *bug*?**
In my opinion this is a bug, cf. 
```
@() | foreach { 1 }
```

**What is the current behavior?**
Start-RSJob runs one job.

**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem**
```
@() | Start-RSJob { 1 } | wait-rsjob | Receive-RSJob
```
... outputs "1" ...

**What is the expected behavior?**
... instead of nothing.

**Which versions of Powershell and which OS are affected by this issue? Did this work in previous versions of our scripts?**
Powershell 5.1, Windows Server 2016

**Please provide a code example showing the issue, if applicable:**
```
@() | Start-RSJob { 1 } | wait-rsjob | Receive-RSJob
```

Named parameters passed to imported functions don't work within the PowerShell ISE or VSCode's Powershell plugin's Integrated Console.  Works fine otherwise, including within VSCode's PS console (unrelated to the plugin). Not sure if this is a PoshRSJob bug or not, but if not there ought to at least be some kind of warning or error if running within these well-known consoles.

I'm running Windows 10, PS version 5.1.14393.2430, VSCode v1.27.2, Powershell plugin v 1.9.0

Below is an example that shows the problem. Notice that if a parameter has the same name as a local variable of a caller, things appear to be fine because the references take on the value from the caller's local scope. That made figuring this out really confusing.

Also, notice calling a function declared **_within_** the scriptblock with named parameters works fine. Outputing the $args value within the called function shows the difference in how the function gets called

```PowerShell
function show-parm( $s, $sameName ) {
   # because this function has a parameter with the same name as a local variable for the caller,
   # that parameter seems to be set correctly. It's not though.
   [pscustomobject]@{ str1 = $s 
                      str2 = $sameName
                      argCount = $args.count
                      args = $args } 
}

# the imported show-parm function won't get parameter values passed in the VSCode integrated console
[pscustomobject]@{ str      = 'a string'
                   sameName = 'misleading' }  | Start-RSJob `
                 -FunctionsToImport 'show-parm'  -script { 
                         $str      = $_.str
                         $sameName = $_.sameName
                         "Before call: [$str] [$sameName]"
                         show-parm -s $str -sameName $sameName
                   } | wait-rsjob | receive-rsjob


# the locally declared show-parm function receives parameters corrected
[pscustomobject]@{ str      = 'a string'
                   sameName = 'misleading' }  | Start-RSJob  -script { 
                        function show-parm( $s, $sameName ) {
                           [pscustomobject]@{ str1 = $s 
                                              str2 = $sameName
                                              argCount = $args.count
                                              args = $args } 
                        }
                        $str      = $_.str
                        $sameName = $_.sameName
                        "Before call: [$str] [$sameName]"
                        show-parm -s $str -sameName $sameName
                     } | wait-rsjob | receive-rsjob

get-rsjob | remove-rsjob
```

Feature request: Implement "BeginStop" asynchronous solution instead of current "Stop" solution. Stop is Synchronous and can take a long time to shutdown concurrent threads, especially if there are a bunch to shutdown.

Not a bug, just a request: When passing jobs to Stop-RSJob, use the asynchronous solution "BeginStop" instead of "Stop", then monitor all jobs until stopped. Once done, return out of Stop-RSJob

Reason for change: Using BeginStop will result in faster shutting down of threads as they will all start shutting down at the same time. This is also helpful from preventing pending jobs from starting, which looks like could happen.

BeginStop returns an Async handle that will need to be monitored for completion, but all handles can be monitored until Handle.IsCompleted is true.