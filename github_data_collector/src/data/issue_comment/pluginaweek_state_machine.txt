```ruby
event :start do
       transition :parked => :in_motion
    end

    event :stop do
       transition :in_motion => :parked
    end

    state(:in_motion, value: 0)
```
I want to get the list of eligible states, such as
`MyClass.state_machine.events[:stop][:from]`, get result of `[0]`
The link to the visual simulator at http://www.cs.usfca.edu/~jbovet/vas.html was returning a 403 error. Searching the web yielded no good active mirrors. There's some internet archive links of course, but nothing being maintained, and I find it likely that software from ~2006 is unlikely to run on many modern systems (32 v 64 bit alone is likely an issue).
I have a model which contains 3 different state columns (state, background_check_status,permit_status)
background_check_status,permit_status has defined the same states (Submitted, Rejected, Accepted, Pending) now on running my tests I get this warning 
```
State "Submitted" for :chauffeur_permit_status is already defined in :background_check_status
State "Rejected" for :chauffeur_permit_status is already defined in :background_check_status
State "Accepted" for :chauffeur_permit_status is already defined in :background_check_status
State "Pending" for :chauffeur_permit_status is already defined in :background_check_status
```
how can I turn this off?
https://www.rubydoc.info/github/pluginaweek/state_machine/master/StateMachine/Machine#on-instance_method
I get the following error in my console.

```
Both Coach and its :current_joyride_bot_message machine have defined a different default for "current_joyride_bot_message". Use only one or the other for defining defaults to avoid unexpected behaviors.
```

It's showing up all the time and I don't know why. As you can see below, the default value for this attribute is identical to where the state machine begins, so I don't understand the meaning of this error. I would like to find a way to get rid of it, or if something is truly incorrect here, fix it.

From the Schema for `coaches` table
```ruby
t.integer  "current_joyride_bot_message",       default: 1
```
From `Coach` model where the state machine resides
```ruby
state_machine :current_joyride_bot_message, initial: 1 do
    event :next_joyride_step do
      transition 1 => 2, 2 => 3, 3 => 4, 4 => 5, 5 => 6, 6 => 7, 7 => 8, 8 => 9, 9 => 10, 10 => 11, 11 => 12, 12 => 13
    end
  end
```
Useful since much of the AR documentation is in the code documentation.
```
SEQUEL DEPRECATION WARNING: Sequel::Model.def_dataset_method is deprecated and will be removed in Sequel 5.  Define the method inside a dataset_module block, or use the def_dataset_method_plugin.
/gems/sequel-4.46.0/lib/sequel/model/base.rb:452:in `def_dataset_method'
/gems/state_machine-1.2.0/lib/state_machine/integrations/sequel.rb:443:in `create_scope'
/gems/state_machine-1.2.0/lib/state_machine/integrations/sequel.rb:431:in `create_with_scope'
/gems/state_machine-1.2.0/lib/state_machine/machine.rb:2177:in `block (2 levels) in define_scopes'
/gems/state_machine-1.2.0/lib/state_machine/machine.rb:2174:in `each'
/gems/state_machine-1.2.0/lib/state_machine/machine.rb:2174:in `block in define_scopes'
/gems/state_machine-1.2.0/lib/state_machine/machine.rb:2173:in `each'
/gems/state_machine-1.2.0/lib/state_machine/machine.rb:2173:in `define_scopes'
/gems/state_machine-1.2.0/lib/state_machine/machine.rb:578:in `initialize'
/gems/state_machine-1.2.0/lib/state_machine/machine.rb:449:in `new'
```

Will you guys accept a PR to fix this issue?
Is it possible to abort/halt a transition whilst inside a `around_transition`. The example I have here is: 

```ruby
around_transition do |cost_item, transition, block|
  if ticket.access_keys.any?(&:full?)
    # abort transition!
    false
  else
    block.call
    ticket.send(:redeem_access_key, transition)
  end
end

```

Is returning `false` sufficient. According to the readme and the rubydoc there is no mention of this: 

http://www.rubydoc.info/github/pluginaweek/state_machine/StateMachine%2FMachine%3Aaround_transition

http://www.rubydoc.info/github/pluginaweek/state_machine/StateMachine/Machine

Load that page and you get:

Invalid namespace object: StateMachine::Machine#owner_class
/home/app/rubydoc.info/vendor/bundle/ruby/2.3.0/bundler/gems/yard-08c3a8309296/lib/yard/code_objects/proxy.rb:58:in `initialize'
/home/app/rubydoc.info/vendor/bundle/ruby/2.3.0/bundler/gems/yard-08c3a8309296/lib/yard/registry_resolver.rb:81:in`new'
/home/app/rubydoc.info/vendor/bundle/ruby/2.3.0/bundler/gems/yard-08c3a8309296/lib/yard/registry_resolver.rb:81:in `lookup_by_path'
/home/app/rubydoc.info/vendor/bundle/ruby/2.3.0/bundler/gems/yard-08c3a8309296/lib/yard/registry.rb:302:in`resolve'
/home/app/rubydoc.info/vendor/bundle/ruby/2.3.0/bundler/gems/yard-08c3a8309296/lib/yard/templates/helpers/html_helper.rb:261:in `link_object'
/home/app/rubydoc.info/vendor/bundle/ruby/2.3.0/bundler/gems/yard-08c3a8309296/lib/yard/templates/helpers/base_helper.rb:91:in`linkify'
/home/app/rubydoc.info/vendor/bundle/ruby/2.3.0/bundler/gems/yard-08c3a8309296/lib/yard/templates/helpers/html_helper.rb:213:in `block in resolve_links'
/home/app/rubydoc.info/vendor/bundle/ruby/2.3.0/bundler/gems/yard-08c3a8309296/lib/yard/templates/helpers/html_helper.rb:191:in`gsub'
/home/app/rubydoc.info/vendor/bundle/ruby/2.3.0/bundler/gems/yard-08c3a8309296/lib/yard/templates/helpers/html_helper.rb:191:in `resolve_links'
/home/app/rubydoc.info/vendor/bundle/ruby/2.3.0/bundler/gems/yard-08c3a8309296/lib/yard/templates/helpers/html_helper.rb:46:in`htmlify'
/home/app/rubydoc.info/vendor/bundle/ruby/2.3.0/gems/yard-sd-0.0.4/lib/yard-sd/sequence_diagram_mixin.rb:5:in `htmlify'
/home/app/rubydoc.info/vendor/bundle/ruby/2.3.0/bundler/gems/yard-08c3a8309296/templates/default/docstring/html/text.erb:3:in`_erb_cache_10'
/home/app/rubydoc.info/vendor/bundle/ruby/2.3.0/bundler/gems/yard-08c3a8309296/lib/yard/templates/template.rb:279:in `erb'
/home/app/rubydoc.info/vendor/bundle/ruby/2.3.0/bundler/gems/yard-08c3a8309296/lib/yard/templates/template.rb:357:in`render_section'
/home/app/rubydoc.info/vendor/bundle/ruby/2.3.0/bundler/gems/yard-08c3a8309296/lib/yard/templates/template.rb:251:in `block (2 levels) in run'
/home/app/rubydoc.info/vendor/bundle/ruby/2.3.0/bundler/gems/yard-08c3a8309296/lib/yard/templates/template.rb:248:in`each'
/home/app/rubydoc.info/vendor/bundle/ruby/2.3.0/bundler/gems/yard-08c3a8309296/lib/yard/templates/template.rb:248:in `block in run'
/home/app/rubydoc.info/vendor/bundle/ruby/2.3.0/bundler/gems/yard-08c3a8309296/lib/yard/templates/template.rb:386:in`add_options'
/home/app/rubydoc.info/vendor/bundle/ruby/2.3.0/bundler/gems/yard-08c3a8309296/lib/yard/templates/template.rb:247:in `run'
/home/app/rubydoc.info/vendor/bundle/ruby/2.3.0/bundler/gems/yard-08c3a8309296/lib/yard/templates/template.rb:269:in`block in yieldall'
...

fixing fetching default state from db column (:deâ€¦fault is db, :ruby_default is ruby)

This was generating an unnecessary warning. This is because sequel (I don't know since when, but long ago) loads column info defaults in db format and ruby format 
