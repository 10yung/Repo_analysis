Function `sigqueue()` allows to send data together with signal. Target app can access it by registering signal handler using `sigaction()`. Please update dumb-init to forward signal data too.
Nice little utitility, and useful, thanks!

The lines
https://github.com/Yelp/dumb-init/blob/master/dumb-init.c#L120-L122
cause behaviour that seems problematic, yet they are hard-wired.  I wonder why?

If I start a program on the terminal, using `docker run <img>`, it may block the terminal.  Then, if I press `^C` it breaks out of that.  However, if I first enter `^Z` I will have suspended `dumb-init` and cannot use `^C` anymore.  That is not very useful, and maybe should be opted out from?

It would have made sense if we could send `^Z` to the Docker command, which would send it inward and then `pause` the container, but it doesn't.
I am wondering if its possible to forward signal from crontab`s job to dumb-init ?
Seems that crontab will always run, no matter of exit codes of its jobs.

What can I do is that instead of `exit 1` I will create file and do and Healthcheck in Dockerfile to monitor this file. Unfortunatelly this will mark container as unhealty, but will not exit dumb-init process.

Any idea?
Thanks

```
FROM ubuntu:bionic
RUN apk add --no-cache dumb-init cron && \
         echo "#!/bin/sh; echo foo; touch /test.exited; exit 1" > /test.sh && \
         echo "* * * * * root /bin/sh /test.sh > /proc/1/fd/1" > /etc/cron.d/test

HEALTHCHECK --interval=5s --timeout=3s \
    CMD if [ -f /test.exited ]; then exit 1 ;fi

ENTRYPOINT ["/usr/bin/dumb-init", "--"]
 
CMD ["/usr/sbin/cron", "-f"]
```
We want to use dumb-init to start keepalived in the container, but it runs as daemon mod, so container exists immediately. Can dumb-init run on the front?
They produce an empty log and seem to fail after about a minute, e.g.: https://travis-ci.org/Yelp/dumb-init/jobs/411008745
After I installed dumb-init via pip, i expected the binary in `/usr/bin` like mentioned in the README but it was in `/usr/local/bin`

not sure if the README should be fixed, or the pypi package
Hi,

I would like to know if with dumb-init it's possible to trap the sigkill to be able to do something else during the stop of the container ?

I used keepalived and two process was created but the second one doesn't have the pid 1 for parent so it's not killed correctly.

`root      7711     1  0 18:15 ?        00:00:00 keepalived -P xxx`
`root      7714  7711  0 18:15 ?        00:00:00 keepalived -P xxx`


Regards,
Hi,

sometimes it is useful to keep init alive when its direct child dies. For example when running a double-forking daemon or SysV init scripts.

This pull request adds a new option '--survive-bereaving' or '-b' that keeps dumb-init running. It checks /proc/ after SIGCHLD and quits only when there are no processes left.

Documentation is not updated, I do not feel confident enough in English.

Any comments are welcome.

Have a nice day,

Fero
This is a feature request that may  be a bit more than dumb-init is intended to contain but it is something I've been looking for in a docker init.

The idea being if there's initial setup (perhaps generating a random password) it should be run when the container is initialized and not when the image is created. It would be nice to have a clean way of performing that task the first time a container is run and then not do it again after.
fixes #110 
