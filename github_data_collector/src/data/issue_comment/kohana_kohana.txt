Getting following message on visiting v2docs.kohanaframework.org

> This domain hasn't been associated with any pagoda box app yet.
hi : 
First, look at my code
//controller
``` 
public function action_index() {
           $test = new Model_Test();
	   $accounts = $test->find();
	   echo $accounts->current()->name; // 1. Output normal 'root'
	    foreach ($accounts as $account) {
		$accountIds[] = $account->account_id;
	    }
            echo $accounts->rewind()->current()->name;  //2. Output Error 
            exit();
	    //$this->response->body('hello, world!');
}
```
//model
```
public function find() {
    return DB::select('*')
	->from('test_account')
	->as_object('Model_Test')
	->execute('default');
}
```
foreach of the above output is normal, but foreach of the below output is error !
// class Kohana_Database_Result_Cached code
```
public function current()
{
	echo $this->_current_row; // I print current_row here 
	// Return an array of the row
	return $this->valid() ? $this->_result[$this->_current_row] : NULL;
}
```
I found , when foreach is end, current_row = total_row + 1
so. I keep looking
//class Kohana_Database_Result 
```
public function next()
{
	++$this->_current_row; // The reason is that here, each cycle leads to _current_row +1
	return $this;
}
```
so. when I finished using foreach, the current method cannot be used, I can only use rewind()->current()
It might be a bug or Is there a better deal?

Thanks..

@enov, @rjd22, @acoulton, @biakaveron, @BRMatt, @cbandy, @dm, @isaiahdw, @jheathco , @kemo, @lenton, @nodren, @randomecho, @Zeelot, @zombor, @JackEllis, @melvinmt, @sergeyklay, @sarciszewski, ...

http://discourse.kohanaframework.org/t/kohana-retirement-2017-07-01/1277

Many of you use Kohana in your projects, is it really lost?

I found one active repository that created @neo22s : https://github.com/koseven
Perhaps you can help? There are other analogues?

In general, the repository has a branch with support for namespases (https://github.com/kohana/core/tree/feature/apply-namespaces),  @rjd22  You do not have the motivation to continue working?

Are you interested in continuing with the framework? What are your suggestions?

If there are no analogues, and Kohana retires, welcome to [Koseven](https://github.com/koseven).

I think together we can keep the framework up to date, even under a different name.

Thank you!
I had problem with UTF-8 encoded JSON content, because `content-length` header was truncating JSON -response.

Shouldn't this:
`	public function content_length()
	{
		return strlen($this->body());
	}
`

Be with header -content, like this:
`
    public function content_length()
    {
        return strlen($this->_header . $this->body());
    }
`

Or even calculated in `render()` -function from `$output`, just before returning it.
This COULD be PHP 7 related problem, haven't confirm that yet.

Add kohana description in composer.json file for stable version.

Is it correct?
E.g. consider the situation of generated downloadable content, need to be different for every request during the session, further sent via Response's send_file(), like this:

```
$seq_no = Session::instance()->get('seq-no', 0);
$this->response->body(produce(++$seq_no));
Session::instance()->set('seq-no', $seq_no);
$this->response->send_file(TRUE, 'sequencer.json', array('inline'=>TRUE));
```

this wont work because when Session's save method is  called the headers were already sent:
system/classes/Kohana/Session.php:361

```
        if (headers_sent() OR $this->_destroyed)
        {
            // Session cannot be written when the headers are sent or when
            // the session has been destroyed
            return FALSE;
        }
```

Instead of just trimming right zeros a proper padding scheme need to be implemented.

eg. this code currently wont work

```
$crypto = Encrypt::instance()->encode(gzencode(serialize(array())));

$obj = unserialize(gzdecode(Encrypt::instance()->decode($crypto)));
```

because `gzencode` produced string has trailing zeros and subsequent decode just removes them

serialized items list of ORM class need to be extended to include at least `_table_columns` (and possible many others as well) [ see modules/orm/classes/Kohana/ORM.php:555 ]

Well, it is rather PHP issue of incorrect creating of objects implementing Serializable interface. but anyway...

E.g. these two classes are expected to have the same behaviour but they wont

```
class A implements Serializable {
    protected $props = array(
        'prop-a' => 'a',
        'prop-b' => 'b'
    );

    public function __construct() {
        unset($this->props['a']);
        $this->props['c'] = 'c';
   }

   public function unserialize($data) {
       print_r($this); exit;
   }
}
```

```
class B implements Serializable {
    protected $props;

    public function __construct() {
        $this->props = array(
             'prop-b' => 'b',
             'prop-c' => 'c',
        );
   }

   public function unserialize($data) {
       print_r($this); exit;
   }
}
```

running unserialize()  from empty object (which simulates omission of `props` from serializing ops) we can see:

```
$s = 'C:1:"A":6:{a:0:{}}';
$a = unserialize($s);

A Object(
    [props:protected] => Array(
            [prop-a] => a
            [prop-b] => b
        )
)
```

and

```
$s = 'C:1:"B":6:{a:0:{}}';
$b = unserialize($s);

B Object(
    [props:protected] => 
)
```

Thus if someone does modify columns list of a model in constructor (which is [ in my understanding ] perfectly valid in any sense), then restoration of stored model will bring wrong columns list and all next fetches will fail with SQL exception `unknown column`

And even more, my offer is to remove serializable implementation from ORM and switch to __wakeup() and __sleep() alternative. This way we only need to return array of names to be stored (clean unneeded fields and return all properties names, so we do not lost any bit), the rest will be done by the PHP itself.

Hi,
I think there is missing `$lang` parameter passing to `I18n::get()` on this line:
https://github.com/kohana/core/blob/3.3/master/classes/Kohana/I18n.php#L161

It should look like:

``` php
$string = I18n::get($string, $lang);
```
