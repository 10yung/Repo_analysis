Does sqlpp11 support a connection pool? What do I need to do?
It is expected that CMake packages can be found multiple times without
errors. The target generated and defined by CMake, e.g. in a
*Targets.cmake file have a similar guard.
Hi,

Thank you for this library. 

I just wanted to ask if there are any guarantees regarding thread safety. More specifically, if I compile sqlite3 with thread safety enabled can I use the same sqlpp::sqlite3::connection object for requests from multiple threads? I suspect that the answer is no, but want to make sure anyway.
Hi!
Seems in the wish-list to improve wiki contributions.

For now i will paste here:
**Select.md** at the end:
## JSON reading as currently unsupported feature

```C++
void read_db_json()
{
    auto &db = mysql_db::get_db_lazy().db;
    std::stringstream sql;
    sql << "SELECT json->>\"$.username\" FROM users";

    auto statement = sqlpp::custom_query(sqlpp::verbatim(sql.str()))
                         .with_result_type_of(sqlpp::select(sqlpp::value("username").as(sqlpp::alias::a)));

    for (const auto &row : db(statement))
    {
        std::cout << "ID: " << row.a << std::endl;
    }
}
```
------------------
**Remove.md** at the end:
## Removing using multiple tables as condition:

```C++
test_sqlpp::Users usr;
test_sqlpp::UsersForms usr_forms;
test_sqlpp::Forms form_;

db(remove_from(usr_forms).using_(usr, form_, usr_forms).where( 
    usr_forms.iduser == usr.id 
    and usr.username == username 
    and usr_forms.idform == form_.id
    and form_.name == form_name
    ));
```

Example(mysql):

create table if not exists test
(
    player_id  int(11) unsigned not null primary key
);

auto db{ getConnection() };
account_db::Test test;
db(insert_into(test).set(test.playerId = 1));
db(insert_into(test).set(test.playerId = 1));

When i make insert first time(the Test table is clean), it just throws an exception as i'm expecting. But if i try to make same the second time(the table already contains data), it just crashes. 

Signal = SIGSEGV (Segmentation fault)

<unknown> 0x00007fd63d2accb0
__gxx_personality_v0 0x00007fd63d2ad5de
_Unwind_RaiseException 0x00007fd63d0ab04a
__cxa_throw 0x00007fd63d2adc9c
sqlpp::mysql::(anonymous namespace)::execute_statement(sqlpp::mysql::detail::connection_handle_t&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&) 0x000055980fb6fac1
sqlpp::mysql::connection::insert_impl(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&) 0x000055980fb7094c
sqlpp::mysql::connection::insert<sqlpp::statement_t<void, sqlpp::insert_t, sqlpp::into_t<void, account_db::Test>, sqlpp::insert_list_t<void, sqlpp::assignment_t<sqlpp::column_t<account_db::Test, account_db::Test_::PlayerId>, sqlpp::unsigned_integral_operand> > > > connection.h:174
sqlpp::insert_t::_result_methods_t<sqlpp::statement_t<void, sqlpp::insert_t, sqlpp::into_t<void, account_db::Test>, sqlpp::insert_list_t<void, sqlpp::assignment_t<sqlpp::column_t<account_db::Test, account_db::Test_::PlayerId>, sqlpp::unsigned_integral_operand> > > >::_run<sqlpp::mysql::connection> insert.h:73
sqlpp::statement_t<void, sqlpp::insert_t, sqlpp::into_t<void, account_db::Test>, sqlpp::insert_list_t<void, sqlpp::assignment_t<sqlpp::column_t<account_db::Test, account_db::Test_::PlayerId>, sqlpp::unsigned_integral_operand> > >::_run<sqlpp::mysql::connection> statement.h:241
sqlpp::mysql::connection::_run<sqlpp::statement_t<void, sqlpp::insert_t, sqlpp::into_t<void, account_db::Test>, sqlpp::insert_list_t<void, sqlpp::assignment_t<sqlpp::column_t<account_db::Test, account_db::Test_::PlayerId>, sqlpp::unsigned_integral_operand> > > > connection.h:257
sqlpp::mysql::connection::operator()<sqlpp::statement_t<void, sqlpp::insert_t, sqlpp::into_t<void, account_db::Test>, sqlpp::insert_list_t<void, sqlpp::assignment_t<sqlpp::column_t<account_db::Test, account_db::Test_::PlayerId>, sqlpp::unsigned_integral_operand> > > > connection.h:266
account::api::AccountAPI::changeEmail EmailAPI.cpp:113
account::api::AccountAPI::onRequest AccountAPI.cpp:177
Pistache::Http::Handler::onInput(char const*, unsigned long, std::shared_ptr<Pistache::Tcp::Peer> const&) 0x00007fd63e1937dd
Pistache::Tcp::Transport::handleIncoming(std::shared_ptr<Pistache::Tcp::Peer> const&) 0x00007fd63e1c0564
Pistache::Tcp::Transport::onReady(Pistache::Aio::FdSet const&) 0x00007fd63e1c3af1
Pistache::Aio::SyncImpl::runOnce() 0x00007fd63e1bc2b5
std::thread::_State_impl<std::thread::_Invoker<std::tuple<Pistache::Aio::AsyncImpl::Worker::run()::{lambda()#1}> > >::_M_run() 0x00007fd63e1b9e9a
<unknown> 0x00007fd63d2d9f74
start_thread 0x00007fd63d434669
clone 0x00007fd63cfcb323
Hello,

When using gcc's undefined behavior sanitizer with requests having an "order by" clause, it reports a misaligned address :

```
sqlpp11/include/sqlpp11/order_by.h:246:74: runtime error: reference binding to misaligned address 0x7ffe248f30fa for type 'const struct statement_t', which requires 8 byte alignment
0x7ffe248f30fa: note: pointer points here
 00 00  fd 45 41 00 00 00 00 00  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  b0 45 41 00 00 00
              ^ 
sqlpp11/include/sqlpp11/order_by.h:246:74: runtime error: load of misaligned address 0x7ffe248f30fa for type 'const struct statement_t', which requires 8 byte alignment
0x7ffe248f30fa: note: pointer points here
 00 00  fd 45 41 00 00 00 00 00  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  b0 45 41 00 00 00
              ^ 
```

```
const auto t = test::TabBar{};

auto stat = sqlpp::select()
                  .columns(all_of(t))
                  .from(t)
                  .where(t.delta > 7)
                  .order_by(t.gamma.asc())
                  ;
```

```
gcc test.cpp -o test -std=c++17 --coverage -fsanitize=undefined -lstdc++ -I. -Isqlpp11/include && ./test
```

Regards
Hi All.

It seems like the most common pattern to read and iterate through a database query is this:

```
    auto rowSet = db(select(...) );
    for ( const auto& row : rowSet ) { <do stuff with 'row'> }

```

The query and the result set have to be declared as 'auto' because the definitions of these objects are very complex and dependent on the columns you are selecting.

But I am wondering if there is any way to add helper 'default column' typedefs when you convert DDL script into proxy classes.  Ultimately, it would be a lot cleaner to be able to pass around retrieved rows, of a certain select column profile, in order to centralize row processing.  

I hate to scrape the definition out of the debugger and create typedefs manually since if roland changes the underlying sqlpp11, it could break all those typedefs.  Kinda fragile.

