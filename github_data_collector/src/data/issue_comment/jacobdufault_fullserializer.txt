Cannot deserialize dictionary of <string, int>
```
Assets/Plugins/FullSerializer/Converters/Unity/Keyframe_DirectConverter.cs(19,78): warning CS0618: `UnityEngine.Keyframe.tangentMode' is obsolete: `Use AnimationUtility.SetLeftTangentMode, AnimationUtility.SetRightTangentMode, AnimationUtility.GetLeftTangentMode or AnimationUtility.GetRightTangentMode instead.'
Assets/Plugins/FullSerializer/Converters/Unity/Keyframe_DirectConverter.cs(37,28): warning CS0618: `UnityEngine.Keyframe.tangentMode' is obsolete: `Use AnimationUtility.SetLeftTangentMode, AnimationUtility.SetRightTangentMode, AnimationUtility.GetLeftTangentMode or AnimationUtility.GetRightTangentMode instead.'
Assets/Plugins/FullSerializer/Converters/Unity/Keyframe_DirectConverter.cs(39,19): warning CS0618: `UnityEngine.Keyframe.tangentMode' is obsolete: `Use AnimationUtility.SetLeftTangentMode, AnimationUtility.SetRightTangentMode, AnimationUtility.GetLeftTangentMode or AnimationUtility.GetRightTangentMode instead.'
```
<!--- Provide a general summary of the issue in the Title above -->

## Expected Behavior
<!--- Tell us what should happen -->
When using FullSerializer on AOT platforms with the newest runtime & compatibility level, serialization/deserialization should complete successfully.

## Current Behavior
<!--- Tell us what happens instead of the expected behavior -->
With the newest runtime (.NET 4.X) with compatibility level .NET 4.X, serialization fails on AOT platforms (Android tested in my case). 

I have traced the offending line down to "return ((PropertyInfo)_memberInfo).GetValue(context, new object[] { });" in fsMetaProperty.Read(object context)

## Possible Solution
<!--- Not obligatory, but suggest a fix/reason for the bug, -->
I worked around this issue for myself by changing the line 
`return ((PropertyInfo)_memberInfo).GetValue(context, new object[] { });`
to 
`return ((PropertyInfo)_memberInfo).GetGetMethod().Invoke(context, null);`

While this seems to resolve the issues, it causes the runtime tests to fail due to exceptions being thrown on that line. Due to this, I am currently using .NET Standard 2.0 without my work-around for now. (It may be possible to implement the hotfix in a compatible way by doing some kind of null-check prior)

Solution reference here:
https://forum.unity.com/threads/unity-5-0-3f2-il2cpp-problem-attempting-to-call-method-system-reflection-monoproperty-getteradapt.332335/page-2

## Steps to Reproduce
<!--- Provide a link to a live example, or an unambiguous set of steps to -->
<!--- reproduce this bug. Include code to reproduce, if relevant -->
1. Install Unity 2018.1.6f1
2. Build the FullSerializer.Testing.test_scene.unity with configuration specified in Context(Environment)
3. Watch it fail serialization

## Context (Environment)
<!--- How has this issue affected you? What are you trying to accomplish? -->
<!--- Providing context helps us come up with a solution that is most useful in the real world -->
As Unity 2018 introduces many workflow improvements for us, I have upgraded our project to use it. I was experimenting with using the .NET 4.X compatibility level, but after hitting these issues I have decided to stay with .NET Standard 2.0 for now.

**Unity Version:** Unity 2018.1.6f1
**FullSerializer Version (Latest commit):** c01db302f337205696585daa72e7d7baea922e44
**Unity Target:** Android 6.0, Huawei Mediapad T3
**Scripting Runtime Version:** .NET 4.x Equivalent
**Scripting Backend:** IL2CPP
**Api Compatibility Level:** .NET 4.x

An infinite loop occurs when parsing the string "/2/".

Code snippet:
```
fsData fd;
fsJsonParser.Parse("/2/", out fd);
```
Hi.

Today I have tried to serialize and deserialize double.MaxValue using this serializer and fall into this error caused when deserializing:
```csharp
Exception: Error while parsing: Bad double format with 1.79769313486232E+308; context = <.79769313486232E+308>
FullSerializer.fsResult.AssertSuccess ()
FullSerializer.fsJsonParser.Parse (System.String input)
```
It only caused when using double.MaxValue as far as I know.

Any help is greatly appreciated.
Thanks.
Hi -

I'm no longer actively involved in C#, so if you'd like to receive commit access to this repository please reply here.
Small API change to `EditorApplication.playmodeStateChanged` in Unity 2017.2+ that may eventually break harder. This PR only fixes for 2017.2+ and leaves compatibility for previous versions.
Full serializer overrides the default Unity serializer in apparently all cases, including the Bolt visual scripting plugin I was using. This was causing MAJOR performance slowdowns in the unity editor.

You guys might want to put a strong warning to devs not to mix and match full serializer with any plugin project wide that uses serialization in any way.

There should also be a way to disable full serializer on a per script bases.
Hi,

thanks for the project, here is my code to redefine the converter for an abstract class.

`public class PayloadConverter: fsDirectConverter<Payload> {
    protected override fsResult DoSerialize(Payload model, Dictionary<string, fsData> serialized) {
        serialized.Add("type", new fsData("add"));

        return fsResult.Success;
    }

    protected override fsResult DoDeserialize(Dictionary<string, fsData> data, ref Payload model) {                
        return fsResult.Success;
    }

    public override object CreateInstance(fsData data, Type storageType) {
        Payload payload=null;

        string payloadType=data.AsDictionary["type"].AsString;
        switch(payloadType) {
            case "add": 
                payload=new AddObjectPayload();
                break;
            case "move": 
                payload=new MoveObjectPayload();
                break;
        } 
          
        return payload;
    }
}`

Just missing the "standard" code for serialization / deserialiation of my object based on its reference without inistantiate it.  Have I to duplicate all code or maybe there is a magic function to do this?


Thanks a lot.
Christof
I'm using Unity 2017.1.0f3 (64-bit) and after importing fullserializer into the project, the annotations don't seem to do anything when added to any variables. 

I am correct in that adding [fsProperty] to a variable should basically have the same function as [SerializeField]? Like it should appear in the inspector and everything?