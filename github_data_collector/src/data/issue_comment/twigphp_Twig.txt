It will be great value I guess to have the possibility to have the possibility to disable throwing an exception while displaying Country

> Example : Data source with a mix of countries codes and countries names

![image](https://user-images.githubusercontent.com/7301643/72274116-dc8dde00-362b-11ea-98c8-3268e22ae389.png)

Twig_SimpleFunction does not inherit TwigFunction, but this is the interface that is checked in addFunction(). Thus, Twig_SimpleFunction can never be used?

Version: 1.42.4.
I'm upgrading dependencies in one of my project, the behavior changed if I import and use a macro inside a template included in a sanbox tag.

The code to reproduce the issue
![image](https://user-images.githubusercontent.com/2158235/72210750-894b4c80-34c0-11ea-882d-8f6ac650dce3.png)
![image](https://user-images.githubusercontent.com/2158235/72210776-e5ae6c00-34c0-11ea-8069-e8d43b6be548.png)

With twig 2.6.2, the code produce this output
![image](https://user-images.githubusercontent.com/2158235/72210786-ff4fb380-34c0-11ea-9bc4-34a0a058df3b.png)

With twig 2.7.0, the code produce this output
![image](https://user-images.githubusercontent.com/2158235/72210802-31f9ac00-34c1-11ea-872d-830531b73667.png)

If i add the macro to the allow tags with twig 2.7.0, it works like in 2.6.2 without adding it.

Is it an expected behavior change ?
@fabpot Is there a way to build the Twig documentation locally to test changes before submitting them? I cannot find the sphinx config file in the repo.
Hi, team knows I'm trying to add a global variable before rendering '$ twig-> addGlobal ()' but it's throwing me an error: 'Variable "summaryTitle" does not exist.' the twig version is 2.12.3
# Feature :
Call `{{ parent($level) }}` with level when having multiple level of extends, closest levels are ignored (like `continue` and `break` in php)
> Ex: `{{ parent(2) }}`

# Example (breadcrumbs) : 
```twig
// base.htm.twig

<ol class="breadcrumb">
{% block breadcrumbs %}
    <li class="breadcrumb-item active"><a href="{{ path("home") }}">Accueil</a></li>
{% endblock %}
</ol>
```
```twig
// missions.htm.twig
{% extends 'base.html.twig' %}

{% block breadcrumbs %}
   {{ parent() }}
    <li class="breadcrumb-item active"><a>Missions</a></li>
{% endblock %}
```
```twig
// mission_details.htm.twig
{% extends 'missions.html.twig' %}

{% block breadcrumbs %}
   {{ parent(2) }}
    <li class="breadcrumb-item active"><a href="{{ path('mission') }}">Missions</a></li>
    <li class="breadcrumb-item active"><a>Mission {{ mission.title }}</a></li>
    <li class="breadcrumb-item active"><a>Details</a></li>
{% endblock %}
```
Parameter must be an array or an object that implements Countable
method Parser::peekBlockStack() rise error if blockStack is not inialized
Hi,

often i forget to delete dump functions in twig templates. Is there a way to detect them and use this in a prehook in git?

See you
Roland
The vendors used for processing markdown need to be added to the `require` section instead of `require-dev`: https://github.com/twigphp/markdown-extra/blob/3.x/composer.json#L22-L25

A similar change has been done for the html-extra extension already in https://github.com/twigphp/html-extra/commit/835a1f02e01b5d82a31c521a78ce74abc31fff46

Also `michelf/php-markdown` is fixed to `1.8` while version `1.9.0` is available.
I noticed this in a Symfony app but while trying to see where the error was, I noticed that it's actually Twig core behaviour.
Yet reproducing it is probably easier using Symfony Flex:

1. `composer create-project symfony/skeleton . 4.4.*`
2. `composer req twig`
3. `APP_ENV=prod ./bin/console cache:warmup`

You'll see that the cache contains files along the following lines:

```php
<?php

use Twig\Environment;
use Twig\Error\LoaderError;
use Twig\Error\RuntimeError;
use Twig\Extension\SandboxExtension;
use Twig\Markup;
use Twig\Sandbox\SecurityError;
use Twig\Sandbox\SecurityNotAllowedTagError;
use Twig\Sandbox\SecurityNotAllowedFilterError;
use Twig\Sandbox\SecurityNotAllowedFunctionError;
use Twig\Source;
use Twig\Template;

/* @Framework/Form/time_widget.html.php */
class __TwigTemplate_884348209061bf9effea81fda27c890a9a31886d0f62de99211558053cc7ec90 extends \Twig\Template
{
    private $source;
    private $macros = [];

   [...]

    public function getSourceContext()
    {
        return new Source("", "@Framework/Form/time_widget.html.php", "/absolute/path/to/project/vendor/symfony/framework-bundle/Resources/views/Form/time_widget.html.php");
    }
}
```

Actually this is the only place where I noticed absolute paths in a typical Symfony cache which causes issues if e.g. you have a chrooted SSH user and a different path in the web process.

Not sure how to fix it though. The `FilesystemLoader` seems to provide absolute file paths by contract.