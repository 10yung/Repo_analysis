I need an `either_of` filter. It should accept a hash of values where exactly one key of the listed if filled:

```ruby
either_of do
  hash :a do
    string :f1
  end
  hash :b do
    string :f2
    string :f3
  end
  hash :c do
    string :f4
    string :f5
  end
end
```

Valid: 
- `{"a": { "f1": "qwe" }}`
- `{"b": { "f2": "qwe", "f3": "wqe" }}`
- `{"c": { "f4": "asd", "f5": "asd }}`

Error:
- `{}`
- `{"a": { "f1": "qwe" }, "b": { "f2": "qwe", "f3": "wqe" }}`
- `{ "d": {} }`
- `{ "a": { "f1": "qwe" }, "d": "qwe" }`


What do you think?
Modifies InputFilter to return a dup of the given default value rather than the value itself. This prevents leaks across multiple calls of a command.

Previously, if the validation or execution logic of a command mutated the default value object, that change was persisted to subsequent calls of the command and could lead to unexpected behavior.

By duping the default value in InputFilter, any command logic that mutates the value is prevented from leaking.
Typo/Tweak.
I'm using validation outcome in the return payload of my API 
(i.e something like `render json: outcome.errors`)

I would expect that adding custom errors in nested object would be consistent with the native filtering.

Expected : 
`{ user : { current_password : { key; 'current_password' } } }`

```ruby
hash :user do
  string :current_password, min_length: 6
end

         "user": {
            "current_password": {
                "key": "current_password",
                "symbol": "min_length",
                "message": "Current Password is too short",
                "index": null
            }
        }
```

Got : 
`{ user : { current_password : { key; 'user.current_password' } } }`

```ruby
add_error('user.current_password', :min_length)

        "user": {
            "current_password": {
                "key": "user.current_password",
                "symbol": "min_length",
                "message": "Current Password is too short",
                "index": null
            }
        }
```

is it by design ? or is it a bug ?
lets use this example : 
```
optional do
  array :tags, class: String
  hash :prefs do
    boolean :smoking
    boolean :view
  end
end
```

I'd like to use custom validation on :smoking
I'm doing this in the `validate` method
How to add an error on key ":prefs -> :smoking" ?
Is it possible with `add_error` ?
Adds a filter for UUID values.

Example:

```ruby
class SampleMutation < Mutations::Command
  required do
    uuid user_id
  end
end
```
When `allow_control_characters` is false (the default) StringFilter replaces characters that ruby classes as unprintable with a space. Unfortunately ruby considers some emoji as unprintable, for example ðŸ¤©. This means that those emoji are silently stripped out of the passed string by default.

This is a problem on ruby 2.4.5. Version 2.5.3 fixes the issue. I guess there's a decision here about whether this behavior should depend on the ruby version or not.
It would be nice if there were rails generators, that automatically generate mutations given inputs along with types, and whether they are optional/required.

I believe such a feature will make it easier to adapt to this gem and increase usability.

Can I start implementing such a feature ? I would like to contribute
Related to https://github.com/cypriss/mutations/pull/121 
This should support both string and symbolic access to the errors hash.
Hi there,

I noticed that the `StringFilter`'s ability to strip control characters misses a few characters that imho should not be present in strings in the vast majority of applications. I'm talking about UTF8 BOM, zero-width characters and such. Everything that belongs to the [Unicode Format class](http://www.fileformat.info/info/unicode/category/Cf/list.htm).

This PR causes the `StringFilter` to strip such characters from strings by default, like it already does with other non-printable characters. 