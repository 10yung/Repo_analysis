I am using macOS Catalina and the brew version of git-crypt (there is no -v option so I am not sure which version of git-crypt, but it is the todays `brew install git-crypt`).

I have a repo without git-crypt (my .dotfiles) and I have just initialized it with `git-crypt init` and git-crypt answers `Generating key...`

However, when I `git-crypt add-gpg-user ChristopherA@LifeWithAlacrity.com` I get:

```
gpg: 0xFDFE14A54ECB30FC5D2274EFF8D36C91357405ED: skipped: Unusable public key
gpg: [stdin]: encryption failed: Unusable public key
git-crypt: GPG error: Failed to encrypt
```

`git-crypt` is finding my key (thus the fingerprint in response), but says it is "unusable".

`gpg --list-keys` looks good as well:

```
# gpg --list-keys                                  (master) [~/.dotfiles]
/Users/christophera/.gnupg/pubring.kbx
--------------------------------------
pub   rsa4096 2015-04-16 [SC] [expires: 2020-04-16]
      FDFE14A54ECB30FC5D2274EFF8D36C91357405ED
uid           [ unknown] Christopher Allen <ChristopherA@LifeWithAlacrity.com>
uid           [ unknown] [jpeg image of size 9272]
```

A few points: that GPG key is properly signed `--lsign-key`, and has ultimate trust "5", and I am able to use that commit to my [dotfiles repo](https://github.com/ChristopherA/dotfiles) using [my GPG key](https://github.com/christophera.gpg) and it shows as [verified](https://github.com/ChristopherA/dotfiles/commit/4b1bc47eb4b9177cc6c08448d2d62960b75628a7).

So in all other ways my GPG key works. But I can't add myself as the first git-crypt user.

Ideas?
I guess this is not intended behavior, it makes it hard to detect when `git-crypt unlock` fails due to GPG.
My workflow:

1. I generated a GPG key pair on my laptop (macOS High Sierra) and exported the private key to a second computer.
2. On the second computer (Ubuntu 18.04), I ran the following commands (git-crypt version 0.6.0 is installed on both machines):

```
git-crypt init
git-crypt add-gpg-user <my-userid>
```

3. I created and committed a .gitattributes file.
4. I created and committed a test file that matched the .gitattributes file.
5. I pushed the resulting branch to GitHub.
6. Returning to my laptop, I fetched and checked out the branch, then attempted to run:

```
git-crypt unlock
```

The result:

```
Error: no GPG secret key available to unlock this repository.
To unlock with a shared symmetric key instead, specify the path to the symmetric key as an argument to 'git-crypt unlock'.
```

I found the key that was generated by `git-crypt add-gpg-user` and was able to manually decrypt it with `gpg --decrypt < .git-crypt/keys/default/0/FOOBAR.gpg`, where FOOBAR.gpg is the name of the file that was generated. This gave me the symmetric key that is supposed to be automatically handled by the tool.

The following workaround is therefore possible:

```
#!/bin/sh
#
# git-crypt-unlock - Work around a bug in git-crypt.
# 
# This will unlock the repo even though git-crypt can't do it. May not be
# as secure as git-crypt's correct implementation would be.

umask 077
for FILE in `find .git-crypt/keys/default -type f`; do
  if gpg --decrypt < $FILE > git-crypt-symmetric-key; then
    git-crypt unlock git-crypt-symmetric-key
    rm -f git-crypt-symmetric-key
    exit 0
  fi
done
```


I get this error when unlocking on windows...
https://gist.github.com/theoryshaw/e8672a09fbaa20ba52a8bedaf95b3a96

These were my settings before running the command..

- Computer\HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\FileSystem
  - Set LongPathsEnabled
    - Value data: 1
- `git config --system core.longpaths true`

This is the repo, if curious: https://github.com/OpeningDesign/CTR
Hi completely forgot that we need to trust the key when adding a collaborator to the repository having error like:

```
gpg: XXX: There is no assurance this key belongs to the named user
gpg: [stdin]: encryption failed: Unusable public key
git-crypt: GPG error: Failed to encrypt
```

ref https://github.com/AGWA/git-crypt/issues/23

Cheers,
Laurent
Occasionally, tracked files are incorrectly shown as modified in `git status` output.

A closely related issue is git-lfs/git-lfs#1726. The "fix" described in the initial comment seems to work with the git-crypt version of the issue as well. As far as I can tell, however, (as that issue thread is very long), no fix was ever committed for it.

Interestingly, in a state where `git status` erroneously shows files as changed, different git clients exhibit different behavior when checking the status. For example, the error is not seen in Sublime Merge, but it is still in Git Cola.
Hi,
I have been looking for ways to automate the process of unlocking encrypted files during the deployment process on Windows Hosts. I can do it manually, but ofcourse a password prompt is required. Any suggestions on how to automate this process?

Thanks,

Michael S
I'm attempting to clone my repo in a production server and decrypt my files there. I had already encrypted the repo beforehand with `git-crypt add-gpg-user` and it works fine on my development machine, but nothing I'm doing seems to re-unlock the repo on the production server. Specifically, I get the error

`Error: no GPG secret key available to unlock this repository.`

I attempted to make a new GPG key on the production server, but that didn't help. I also don't know if my development machine has a GPG key linked to `git-crypt add-gpg-user`, meaning I don't have a key to export. I apologize if this seems like a trivial problem -- this is my first time using GPG and I have no idea what's going on. Can someone give me some guidance?
This PR is a refactoring of PR #107. The original PR mixes multiple unrelated changes in a single commit, including some maybe unwanted changes and code-style violations, which is probably the reason why it’s still not merged.

This PR contains only and only the changes needed for the merge driver support with minimum changes to the existing code (separated into an extra commit), so it should be easy for review. I’ve also fixed a few shortcomings in the original PR.