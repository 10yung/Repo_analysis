Hi Minko,

This tool is awesome! I'm super impressed with how easy it makes it to visualize a complex Angular application.

To get it to work in our app, we had to do some refactoring in a few places where we use the `useFactory` notation.

I think this picture will be more useful than me trying to explain it:
![image](https://user-images.githubusercontent.com/7726025/68242179-ec9e9700-ffc4-11e9-8039-2b077c1ebf97.png)

This syntax for providers is supported in Angular 6+ (maybe 7?) so I expected it to work with NGRev.

With the refactoring above, we were able to generate the report.

Thanks!

Bumps [js-yaml](https://github.com/nodeca/js-yaml) from 3.10.0 to 3.13.1.
<details>
<summary>Changelog</summary>

*Sourced from [js-yaml's changelog](https://github.com/nodeca/js-yaml/blob/master/CHANGELOG.md).*

> 3.13.1 / 2019-04-05
> -------------------
> 
> - Fix possible code execution in (already unsafe) `.load()`, [#480](https://github-redirect.dependabot.com/nodeca/js-yaml/issues/480).
> 
> 
> 3.13.0 / 2019-03-20
> -------------------
> 
> - Security fix: `safeLoad()` can hang when arrays with nested refs
>   used as key. Now throws exception for nested arrays. [#475](https://github-redirect.dependabot.com/nodeca/js-yaml/issues/475).
> 
> 
> 3.12.2 / 2019-02-26
> -------------------
> 
> - Fix `noArrayIndent` option for root level, [#468](https://github-redirect.dependabot.com/nodeca/js-yaml/issues/468).
> 
> 
> 3.12.1 / 2019-01-05
> -------------------
> 
> - Added `noArrayIndent` option, [#432](https://github-redirect.dependabot.com/nodeca/js-yaml/issues/432).
> 
> 
> 3.12.0 / 2018-06-02
> -------------------
> 
> - Support arrow functions without a block statement, [#421](https://github-redirect.dependabot.com/nodeca/js-yaml/issues/421).
> 
> 
> 3.11.0 / 2018-03-05
> -------------------
> 
> - Fix dump in bin/octal/hex formats for negative integers, [#399](https://github-redirect.dependabot.com/nodeca/js-yaml/issues/399).
> - Add arrow functions suport for `!!js/function`.
</details>
<details>
<summary>Commits</summary>

- [`665aadd`](https://github.com/nodeca/js-yaml/commit/665aadda42349dcae869f12040d9b10ef18d12da) 3.13.1 released
- [`da8ecf2`](https://github.com/nodeca/js-yaml/commit/da8ecf24b63d2307015e75ee8bd1da1977071e35) Browser files rebuild
- [`b2f9e88`](https://github.com/nodeca/js-yaml/commit/b2f9e882397660da37c5c5bb92e8ccc7bb9eb668) Merge pull request [#480](https://github-redirect.dependabot.com/nodeca/js-yaml/issues/480) from nodeca/toString
- [`e18afbf`](https://github.com/nodeca/js-yaml/commit/e18afbf1edcafb7add2c4c7b22abc8d6ebc2fa61) Fix possible code execution in (already unsafe) load()
- [`9d4ce5e`](https://github.com/nodeca/js-yaml/commit/9d4ce5e2895365c943d2bdf7e7c8ac1be3ec51a3) 3.13.0 released
- [`f64c673`](https://github.com/nodeca/js-yaml/commit/f64c6737dbe24d110f53152d142d01e64520a193) Browser files rebuild
- [`a567ef3`](https://github.com/nodeca/js-yaml/commit/a567ef3c6e61eb319f0bfc2671d91061afb01235) Restrict data types for object keys
- [`59b6e76`](https://github.com/nodeca/js-yaml/commit/59b6e76b712350e9e6aad7773e7375a1de009cf9) Fix test name
- [`e4267fc`](https://github.com/nodeca/js-yaml/commit/e4267fc733452d074a3e494fb5cab2a07c7e6b87) 3.12.2 released
- [`7231a49`](https://github.com/nodeca/js-yaml/commit/7231a491788ecb289cee52e854574e7271c34350) Browser files rebuild
- Additional commits viewable in [compare view](https://github.com/nodeca/js-yaml/compare/3.10.0...3.13.1)
</details>
<br />

[![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=js-yaml&package-manager=npm_and_yarn&previous-version=3.10.0&new-version=3.13.1)](https://help.github.com/articles/configuring-automated-security-fixes)

Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.

[//]: # (dependabot-automerge-start)
[//]: # (dependabot-automerge-end)

---

<details>
<summary>Dependabot commands and options</summary>
<br />

You can trigger Dependabot actions by commenting on this PR:
- `@dependabot rebase` will rebase this PR
- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it
- `@dependabot merge` will merge this PR after your CI passes on it
- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it
- `@dependabot cancel merge` will cancel a previously requested merge and block automerging
- `@dependabot reopen` will reopen this PR if it is closed
- `@dependabot ignore this [patch|minor|major] version` will close this PR and stop Dependabot creating any more for this minor/major version (unless you reopen the PR or upgrade to it yourself)
- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)
- `@dependabot use these labels` will set the current labels as the default for future PRs for this repo and language
- `@dependabot use these reviewers` will set the current reviewers as the default for future PRs for this repo and language
- `@dependabot use these assignees` will set the current assignees as the default for future PRs for this repo and language
- `@dependabot use this milestone` will set the current milestone as the default for future PRs for this repo and language

You can disable automated security fix PRs for this repo from the [Security Alerts page](https://github.com/mgechev/ngrev/network/alerts).

</details>
Closes #51 

This PR is a WIP attempt to implement **ngrev** as a Visual Studio Code extension.

The first commit contains the proposed folder structure so that the main application and the extension source code are clearly separated:

- I decided to include all **vscode** related scripts in the main `package.json` and create a separate one inside `src/vscode` folder that will contain only extension related artifacts.
- There is also a separate **tsconfig** configuration file for the extension that resides together with the main tsconfig.
- The extension main entry file is emitted in the `out` folder on the root path of the project.

A problem that I noticed is that when running `gulp build`, the extension folder is also compiled and emitted in the `dist` folder. So I think that we need to exclude it from the build process.

Alternatively, we could have extension related scripts in a single `package.json` and `out` folder inside **vscode** directory to keep it more isolated.

@mgechev what do you think?

Hi,

I've got the following issue : 
```
Cannot parse your project. Make sure it's compatible with the Angular's AoT compiler. Error during parsing:

Users/xxxxxx/front-end/src/app/core/core.routing.ts(11,5): Error during template compile of 'CoreRoutingModule'
  Reference to a local (non-exported) symbols are not supported in decorators but 'routes' was referenced
    Consider exporting 'routes'.
```

But the AOT compilation is fine. We are using Angular 8.2. 
I'm using the latest version of ngrev available for OSX (0.0.27) 

Here is tsconfig file and the core.routing file. (file renamed with txt extension for GitHub support)

[tsconfig.txt](https://github.com/mgechev/ngrev/files/3509289/tsconfig.txt)
[core.routing.txt](https://github.com/mgechev/ngrev/files/3509294/core.routing.txt)
When i export a view, it could be fine to add the legend.
After doing some manual shifting to the diagrams configuration, switching to dark mode will reset it to its default layout. In bigger projects this is very inconvenient since the standard layout sometimes is way to cluttered. Also the option to save the layout for further use would be a great idea.
Hi,

Thanks very much for this awesome tool! Are there any plans to release it as a VSCode extension also? It should be really handy, especially for newcomers in a project, to take a quick look at the structure while navigating the code.

Thanks! 
compilation failed when i have declared the tsconfig paths
![image](https://user-images.githubusercontent.com/12021443/50506720-4bcd7a00-0a8b-11e9-89f7-0ee4ff7b76b2.png)

```ts
@Directive({
    selector: 'cdk-virtual-scroll-viewport[tableData]',
    providers: [
        {
            provide: VIRTUAL_SCROLL_STRATEGY,
            useFactory: (scroll: TableFixedSizeVirtualScroll) => scroll.scrollStrategy,
            deps: [forwardRef(() => TableFixedSizeVirtualScroll)]
        }
    ]
})
export class TableFixedSizeVirtualScroll<T = any> implements OnInit, OnChanges, OnDestroy {
}
```
this is view on relatively big project (+1000) files

![image](https://user-images.githubusercontent.com/2789203/47142952-5d90e500-d2c4-11e8-9229-de1d49c46430.png)


I find it "not analyable" or it mean project is not correctly structured ^^ 

A feature request from me woul be: infos near legend to resume number of modules  or lazymodule or component in projects? 

thank you