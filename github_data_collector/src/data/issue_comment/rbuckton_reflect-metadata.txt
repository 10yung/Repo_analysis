Hi, can you help me with how to get parameters types from function?
I can get constructor parameter type by 
`Reflect.getMetadata('design:paramtypes', target) `
but get nothing for
`Reflect.getMetadata('design:paramtypes', target.prototype.somemethod)`
I have looked around about it and didn't found any answer about it so sorry for asking here. If someone could shed some light on it. Reflection in both Java & .NET is very slow as we know. Is it same with TypeScript implementation? Is there any noticeable runtime performance impact evolved?
I used the reflect-metadata installation package, I introduced it, and configured some corresponding methods in the tsconfig file, I have to specify some parameters:

![image](https://user-images.githubusercontent.com/28696399/64072849-4387a780-ccc8-11e9-8887-fa53b42c09f4.png)
Specify the parameter as node to use normally, otherwise it will report an error, **`Reflect.defineMetadata` is not a function**
But now the dev-server in webpack doesn't work. Every time you write any properties or methods in **Reflect-metadata**, it won't reload properly.

![image](https://user-images.githubusercontent.com/28696399/64072877-ca3c8480-ccc8-11e9-8610-0d17b21632cf.png)


I have to manually force the shutdown and restart `npm run dev`
How to solve this? ðŸ¤” 
# Exposing metadata map
My team and I are currently working on an internal framework for our company.
We are trying to create a solution for multi inheritance in javascript and we are almost there, the only problem we have left to solve is extending the metadata from typescript class properties without default values or assignments in the constructor.
In order to have access to those properties, I'm exposing the MetadataMap. This will make it possible to iterate over the properties and use that metadata without knowing the actual property name.

Example:

```
class {
    @Reflect.metadata('metadataKey', {value: 'value'})
    property: string;
}
```
can you create github releases and git tag for v0.1.13?
thanks!
Line 543 should not check IsConstructor.
```
exporter("deleteMetadata", deleteMetadata);
        function DecorateConstructor(decorators, target) {
            for (var i = decorators.length - 1; i >= 0; --i) {
                var decorator = decorators[i];
                var decorated = decorator(target);
                if (!IsUndefined(decorated) && !IsNull(decorated)) {
                    if (!IsConstructor(decorated))
                        throw new TypeError();
                    target = decorated;
                }
            }
            return target;
        }
```
![image](https://user-images.githubusercontent.com/14905652/56381532-6df32f80-6215-11e9-9e52-a699d71ddd12.png)

As you can see on the image, decorated is a react class, hence typeof decorated is object and not function.
See the right behaviour of `Reflect.get()` below, compared to `Reflect.getMetadata()` when a proxy is involved.

```ts
import "reflect-metadata";

const METADATA_KEY = Symbol();

const post = {
    id: 1000
}

Reflect.defineMetadata(METADATA_KEY, "Hello", post);

const postProxied = new Proxy(post, {});

console.log(`${Reflect.get(post, "id")}`); // OK, displays 1000
console.log(`${Reflect.get(postProxied, "id")}`); // OK, displays 1000

console.log(`${Reflect.getMetadata(METADATA_KEY, post)}`); // OK, displays "Hello"
console.log(`${Reflect.getMetadata(METADATA_KEY, postProxied)}`); // NOT OK, undefined metadata
```

My question then: how do I access an object's metadata when this object has been proxified?
Everything shouldn't  be transparent like it is when using `Reflect.get()`?
You can find the following error description on  [StackOverflow][1].

Question
--------

I get a circular loader exception. This is may caused by the compiler option `"emitDecoratorMetadata":true`.
How can I fix it? Thanks for helpful replays!

Introduction
------------

I have prepared a **minimal** project for reproducing the error. Please take a look at my temporary git repository: [git repo for bug presentation][2]

I use two libraries (`typeorm` and `json2typescript`) and both operate with decorators. I use multiple decorators from both libraries on some class properties.

Steps for reproducing:

 1. Clone the git repo.
 2. Install all packages by the command `npm i` (npm 6.9.0).
 3. Open the root directory by `Visual Studio Code`.
 4. Open `bugexample/test/test.spec.ts`, go to the debug view and start debugging by the config `Mocha current file`.

After these steps you should see an exception output.
```
/bugexample/node_modules/reflect-metadata/Reflect.js:553
                var decorated = decorator(target, propertyKey, descriptor);
                                ^
Error: Fatal error in JsonConvert. It is not allowed to explicitly pass "undefined" as second parameter in the @JsonProperty decorator.

        Class property: 
                banana

Use "Any" to allow any type. You can import this class from "json2typescript".
```
The property `banana` gets the type `Banana` as parameter and this type is `undefined` for unknown reasons. The library `json2typescript` is not the cause of this problem.

---

Analysis
--------

Now I want to breakdown the issue.
I begin with the two model classes and end with the test.

At first, please take a look at `bug_presentation/src/persistence/models/ape.model.ts`.

```typescript
import { JsonObject, JsonProperty } from "json2typescript";
import { Column, Entity, OneToOne, PrimaryGeneratedColumn } from "typeorm";

import { Banana } from "./banana.model";

/**
 * This is an entity class.
 * 
 * @author Tim Lehmann <l_@freenet.de>
 */
@JsonObject("Ape")
@Entity()
export class Ape {

  @PrimaryGeneratedColumn()
  readonly id: number

  @JsonProperty('0')
  @Column()
  readonly name: string = null

  // the associated table holds the foreign keys

  @JsonProperty('1', Banana)
  @OneToOne(type => Banana, banana => banana.possessionOf, { cascade: true })
  readonly banana = new Banana();
}
```
In line 24 the type `Banana` is the passed parameter but for unknown reasons it's `undefined` for the current test at this time.

Now take a look at `bug_presentation/src/persistence/models/banana.model.ts`, please.

```typescript
import { JsonObject, JsonProperty } from "json2typescript";
import { Column, Entity, JoinColumn, OneToOne, PrimaryGeneratedColumn } from "typeorm";

import { Ape } from "./ape.model";

/**
 * @author Tim Lehmann <l_@freenet.de>
 */
@JsonObject("Banana")
@Entity()
export class Banana {

  @PrimaryGeneratedColumn()
  private readonly id: number

  @JsonProperty('0')
  @Column()
  readonly weight: string = null

  @OneToOne(type => Ape, possessionOf => possessionOf.banana)
  @JoinColumn({ name: "possessionOf" })
  readonly possessionOf: Ape = new Ape();
}
```
Line 21 and 22 are problematic. If I comment these lines out then there is no loader exception.

Please take a look at `bug_presentation/test/test.spec.ts`, lastly.
```typescript
import { expect } from "chai";

import { Ape } from "../src/persistence/models/ape.model";
import { Banana } from "../src/persistence/models/banana.model";

// const classApe = Ape;
const classBanana = Banana;

describe("check if class type exist", () => {

  it('check class Ape is defined', () => {
		// expect(classApe).exist;
  })

  it('check class Banana is defined', () => {
    expect(classBanana).exist;
  })
})
```

I want to test that the type/class `Banana` isn't undefined, but the test breaks earlier because the library `json2typescript` throws an exception if the passed property (in this case type `Banana`) is `undefined`.

The strange behavior is that if I assign the class `Ape` to a variable (remove the comment at line 6) then the type/class `Banana` is defined.

---
  [1]: https://stackoverflow.com/questions/55674710/loader-exception-circular-reference-by-decorators
  [2]: https://github.com/Kcorab/bug_presentation.git
```ts
class Point {
  x!: number;
  y!: number;
}

class Line {
    private _p0!: Point;
    private _p1!: Point;

    @validate
    set p0(value: Point) { this._p0 = value; }
    get p0() { return this._p0; }

    @validate
    set p1(value: Point) { this._p1 = value; }
    get p1() { return this._p1; }
}

function validate<T>(target: any, propertyKey: string, descriptor: TypedPropertyDescriptor<T>) {
    let set = descriptor.set;
    descriptor.set = function (value: T) {
      let type = Reflect.getMetadata("design:type", target, propertyKey);
      console.log(type) // undefined
      if (!(value instanceof type)) {
        throw new TypeError("Invalid type.");
      }
      // set.call(target, value);
    }
}
```
```json
{
  "compilerOptions": {
    "target": "es5",
    "lib": [
      "dom",
      "dom.iterable",
      "esnext"
    ],
    "allowJs": true,
    "skipLibCheck": true,
    "esModuleInterop": true,
    "allowSyntheticDefaultImports": true,
    "strict": true,
    "forceConsistentCasingInFileNames": true,
    "module": "esnext",
    "moduleResolution": "node",
    "isolatedModules": true,
    "noEmit": true,
    "jsx": "preserve",
    "experimentalDecorators": true,
    "emitDecoratorMetadata": true,
    "resolveJsonModule": true
  },
  "include": [
    "src"
  ]
}

```
When I have installed and configured "reflect-metadata" in my typescript application with vs2017 and nodejs i get the following error message while I execute the following code.

**My application code**
```TypeScript
...
const port = process.env.port
...
```
**Execution Error**
> .. TS2580	(TS) Cannot find name 'process'...

even the global variable 'global' cannot be found.

**My Configuration**

**tsconfig.json**
```json
...
{
  "compilerOptions": {
    "module": "commonjs",
    "target": "es6",
    "lib": [ "es6" ],
    "sourceMap": true,
    "types": [ "reflect-metadata" ],
    "moduleResolution": "node",
    "experimentalDecorators": true,
    "emitDecoratorMetadata": true
  },
  "exclude": [
    "node_modules"
  ]
}
...
```
**package.json**
```json
...
  "devDependencies": {
    "@types/node": "^10.12.15",
    "reflect-metadata": "^0.1.12"
  }
...
```


if I comment out the line  `"types": [ "reflect-metadata" ],` my application will work.
How can I fix this Problem?
Thanks in advance.
