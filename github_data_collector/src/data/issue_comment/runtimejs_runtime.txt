
Is it possible to support index.mjs as the entry point?
A very possible that it's a MB limit .initrd size.
Thank you to everyone who made contributions to runtime.js!

It's obvious that project is not maintained anymore. I'm going to add "not maintained" label to the readme to make it clear.

It would require way too much time to support and maintain it in its current state. But feel free to email me if you're interested in doing anything with it.
Recently, I've been messing around with the Runtime.js kernel. I've created a syscall that can allow a script to be evaluated in its own context. Here is the code:
```c++
NATIVE_FUNCTION(NativesObject,EvalContext) {
  PROLOGUE_NOTHIS;
  USEARG(0);
  USEARG(1);
  USEARG(2);
  VALIDATEARG(1, STRING, "eval: argument 1 is not a string");
  
  if(!arg0->IsObject()) THROW_ERROR("argument 0 is not an object");
  v8::Local<v8::Object> globals = arg0.As<v8::Object>();
  v8::Local<v8::ObjectTemplate> global { v8::ObjectTemplate::New(iv8) };
  v8::Local<v8::Context> ctx = v8::Context::New(iv8,nullptr,global);
  v8::Context::Scope cs(ctx);
  ctx->Global()->Set(ctx,v8::String::NewFromUtf8(iv8,"global",v8::NewStringType::kNormal).ToLocalChecked(),globals);

  v8::ScriptOrigin origin((!arg2.IsEmpty() && arg2->IsString()) ? arg2.As<v8::String>() : v8::String::Empty(iv8));

  v8::Local<v8::String> source_code = arg1.As<v8::String>();
  v8::ScriptCompiler::Source source(source_code,origin);
  v8::MaybeLocal<v8::Script> maybe_script = v8::ScriptCompiler::Compile(ctx,&source,v8::ScriptCompiler::CompileOptions::kNoCompileOptions);

  v8::Local<v8::Script> script;
  if(!maybe_script.ToLocal(&script)) return;

  RT_ASSERT(!script.IsEmpty());
  v8::MaybeLocal<v8::Value> maybe_result = script->Run(ctx);
  v8::Local<v8::Value> result;
  if(!maybe_result.ToLocal(&result)) return;

  RT_ASSERT(!result.IsEmpty());
  args.GetReturnValue().Set(result);
}
```
Do you plan to support regular node libs like express? I mean I'd love to write app in node and then "compile" it to an unikernel which could be then run in a cloud.

And just maybe if you want this too, is there any way I could help you? :)

Or at least a list/wiki of things which has to be done first?
I found out how to access 64 Bit BAR Addresses.
Here is the code: `((BAR[i] & 0xFFFFFFF0) + ((BAR[i+1] & 0xFFFFFFFF) << 32))`
This returns the memory address from that specific BAR Register.
I've been recently working on PeabodyOS, and I'm trying to access the block devices, but there are none when I include a virtio disk image. What is going on? Link to Git repository: https://github.com/SpaceboyRoss01/PeabodyOS
I'm using fatfs to run a fat16 driver and I'm trying to format a drive, but I cannot write 512 into byte 11. Is there a workaround for this?
Features:
 * Shell API
 * Getting CPU Count
 * WIP Threads
 * New File structure
 * cpuid function
 * WIP support for non-x64 cpu's