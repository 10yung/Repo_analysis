This is to address issue #7.  By creating a callback that generates a new browser window and assigning it to `MainWindow.browser.createWindow`, the browser is able to open new windows with Ctrl+click and handle `target='_blank'` links.

In the spirit of this repository, I have tried to keep the code simple and minimal.  A more proper implementation would subclass QWebEngineView or QWebEnginePage, but this approach is simple and works.
Tried to run these projects, discovered PyQtWebEngine needed to be installed to get them going.
Please mentions the version of python and version of PyQt used in description / README :
1. Python2 or Python3
2. PyQt4 or PyQt5  or Both.
The currency.py uses a fixer.io legacy API (api.fixer.io). 
As of March 6th 2018, the legacy fixer API is deprecated, to use the service we need a (free, but registration-bound) fixer access token. So i believe it is needed to replace 
```python
url = 'http://api.fixer.io/{}'.format(when.isoformat())
```
with 
```python
url = 'http://data.fixer.io/api/{}?access_key=12345678900000000000000000000000'.format(when.isoformat())
```
where of course `12345678900000000000000000000000` is your personal access key.


Hi,

Thanks very much for this project, it is very useful for jump starting PyQt development :)

I found the Minesweeper game particularly interesting and decided to complete it's features. I thought I would share it here as a PR in case you would like these improvements in your repo for others to learn from / make this example game more enjoyable - I will totally understand if it is out of the project scope and you reject it, I wasn't sure if it was intentionally half finished so people could do exactly what I just did as a fun way to experiment or learn or because the example in its current state is perfect for demonstrating how to create Qt apps from Python. Apologies if this project goal is mentioned somewhere but I missed it.

Anyway, the changes I have made are, in no particular order:

- allow right clicking on a flagged cell to unflag it
- when flagging, reduce the number of remaining mines shown in the counter widget
- when unflagging, increase the number of remaining mines shown in the counter widget
- when revealing a mine and losing the game, mark the mine that caused game over in a different color
- when losing the game, show which flags were incorrect and keep those that were correct visible
- when right clicking on a revealed cell, intelligently reveal the cells around if the number of adjacent mines matches the number of adjacent flags (a feature Windows 95's "winmine" has)
- evaluate the winning conditions - when all the cells except the mines have been revealed
- use a common generator function to deduplicate some code and only evaluate the minimum number of cells necessary for the new logic
- set the window title
- allow the user to specify the difficulty level (0, 1 or 2) in the command line arguments to expose the otherwise hidden functionality

Traceback (most recent call last):
  File "/browser_tabbed/browser_tabbed.py", line 3, in <module>
    import PyQt5.QtCore
ImportError: DLL load failed: %1 ist keine zulÃ¤ssige Win32-Anwendung.
How would you add a proxy to Mozarella Ashbadger?

QLCDNumber overflows when input >= 2147483648. (For example: input 9999999999...9)

https://github.com/mfitzp/15-minute-apps/blob/b99eb330310fe7302ead39473ef0d34cccb3d12d/calculator/calculator.py#L62-L67

Since integer has an limit of 0x7FFFFFFF(or 2147483647), casting it into float using `self.stack[-1] = float(v)` would be better.

Patch code: https://github.com/liuqun/15-minute-apps/commit/a9606534993a3b0aa3a7f74e0870132265fc834f