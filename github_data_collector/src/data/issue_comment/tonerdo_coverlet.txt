Fixes https://github.com/tonerdo/coverlet/issues/689

Report [ExcludeFilterNestedAutogeneratedTypes.zip](https://github.com/tonerdo/coverlet/files/4081333/ExcludeFilterNestedAutogeneratedTypes.zip)

cc: @tonerdo @petli @SteveGilham

We're hiding a warning during collectors pack https://github.com/tonerdo/coverlet/blob/master/src/coverlet.collector/coverlet.collector.csproj#L17
External issue https://github.com/NuGet/Home/issues/8941
In upgrading to collector v1.2 from v1.1 I noticed that code like
```
module Whatever =
...
  do AppDomain.CurrentDomain.DomainUnload.Add(FlushCounter DomainUnload)
     AppDomain.CurrentDomain.ProcessExit.Add(FlushCounter ProcessExit)
```
started registering as uncovered. I'm assuming that this is part of the lambda aliasing change in PR #583, and it's triggering because each line compiles to a form with 4 extra classes, and one of those has an unattributed `Invoke()` method that executes only when the event is actually fired.

Proceeding to exclude this not readily testable behaviour by refactoring to
```
module Whatever =
...
  module private Uncoverlet =
    let AddDomainHandlers() =
      AppDomain.CurrentDomain.DomainUnload.Add(FlushCounter DomainUnload)
      AppDomain.CurrentDomain.ProcessExit.Add(FlushCounter ProcessExit)
...
  do Uncoverlet.AddDomainHandlers()
```
and adding an exclude entry `[*]*Uncoverlet` resulted in the uncovered line count from ReportGenerator via OpenCover format dropping by 2, as intended.

Looking at the coverage report, however, showed that rather than being excluded from consideration, the `AddDomainHandlers` method was showing as covered.

There seem to be two problems here.  First, exclude by type name doesn't seem to be honoured for nested types, and second, the new behaviour of detecting multiple items on a line doesn't seem to have propagated down this extra level either.

I haven't explicitly tried the C# equivalent
```
static class Whatever {
  static class Uncoverlet {
    ...
  }
}
```
but the IL in each case will be the same.

Started from https://github.com/tonerdo/coverlet/issues/678#issuecomment-571585508

@petli comment

A reflection somewhat from the side here is that a lot of these issues around merging, thresholds etc comes from attempts to do coverage collection and analysis being as a single build step. A more unixy way of looking at it is that coverage gets collected during unit tests and written to files, and a separate tool is then run to analyse the coverage in whichever way the user needs. These tools can be combined with a script to get a single command line or build step to run.

(Incidentially, this is how I use coverlet. A script runs all tests with the vstest collector to get coverage files, and then filter and combine in three different ways with reportgenerator to get slightly different views on the results. Partly this is because the early coverlet didn't support anything else, but also because I much prefer the fine-grained control I get this way.)

A major new version av coverlet could look like this:

* The only way to collect coverage is the vstest collector (avoiding all issues with ProcessExit etc)
* The coverlet command line tool holds functionality to merge and analyse coverage (e.g. thresholds). It could also be used to run tests using the vstest collector, and also both run tests and analyse the coverage files in a single step to retain the one-stop-shop command for those who don't need any complex processing.
* The msbuild collector is removed completely.

I think this would make it easier to use coverlet, and simplifying the code a lot. There would be less need for the more complex switches or command line flag combinations, as less common use cases (like the multi-target analysis in this issue or the Linux/Windows combined coverage) could be handled by scripting the coverlet command line tool.


cc: @tonerdo 
Today with .net tool/msbuild you can specify a coverage threshold below which it fails the build.

https://github.com/tonerdo/coverlet/blob/master/Documentation/MSBuildIntegration.md#threshold

This is not supported on vstest collector integration

cc: @vagisha-nidhi 
Today at the end of the tests msbuil/.net tool drivers show a table with coverage result on console.
For instance: 
```
Calculating coverage result...
  Generating report '/home/vsts/work/1/s/test/coverlet.core.tests/coverage.opencover.xml'

+------------------------------------+--------+--------+--------+
| Module                             | Line   | Branch | Method |
+------------------------------------+--------+--------+--------+
| coverlet.tests.projectsample.empty | 0%     | 100%   | 0%     |
+------------------------------------+--------+--------+--------+
| coverlet.msbuild.tasks             | 0%     | 0%     | 0%     |
+------------------------------------+--------+--------+--------+
| coverlet.core                      | 83.65% | 78.2%  | 84.07% |
+------------------------------------+--------+--------+--------+

+---------+--------+--------+--------+
|         | Line   | Branch | Method |
+---------+--------+--------+--------+
| Total   | 71.74% | 69.83% | 61.9%  |
+---------+--------+--------+--------+
| Average | 27.88% | 59.4%  | 28.02% |
+---------+--------+--------+--------+
```

This is not supported at the moment for vstest collectors integration.

cc: @vagisha-nidhi  @PureKrome 
found during #649, this combination of code seems to have incorrect reports


```
        public async Task<ActionResult<IEnumerable<SystemUserItem>>> SystemUsers(CancellationToken ct)
        {
            using var data = this.factory.CreateReadOnly<SystemUserItem>();

            var list = await data.AllAsync(ct)
                .ConfigureAwait(false);

            return this.Ok(list);
        }

```

here is the final report output:

![image](https://user-images.githubusercontent.com/2100564/71359011-f0787f80-2558-11ea-8a77-0cf8343e987e.png)


here is the diff of the coverage xml:
![image](https://user-images.githubusercontent.com/2100564/71359027-fcfcd800-2558-11ea-9e2f-942bb4a04fff.png)

left side = unit test - code is not executed
right side = integration test - code is there doesnt appear to be any branches - all code execute under a single call

Hi,

I have a folder "./src/client/" which is an angular project.
I tried many ways to execute the dotnet test command but I always get the same error:

> Solution file error MSB4249: Unable to build website project "client". The ASP.NET compiler is only available on the .NET Framework version of MSBuild.

Include only the test project.
dotnet test   /p:CollectCoverage=true   /p:CoverletOutputFormat=cobertura /p:Include="[My.*.tests?]*"

Exclude folder client
dotnet test   /p:CollectCoverage=true   /p:CoverletOutputFormat=cobertura /p:ExcludeByFile=\"src/client/**"

How could I exclude the website project "client"?

Thanks
When I try to use the runsettings file to merge the results of our ~40 Test projects the merge file is not created.

[Here](https://github.com/StefanOssendorf/Coverlet_Mwe_MergeWithNotWorking) is a mwe with two test projects and a runsettings-file. The mwe is derived from the HelloWorld-Documentation project.

I have tried several path-combinations (only merged-file, relative path, absolute path) in the runsettings but neither has worked.
For the moment we don't test .net global tool on unix systems because we get an "access denied" exception on ubuntu.

https://github.com/tonerdo/coverlet/blob/7cad9b3f58f2414d870a4cbe248ee8c93ed558a9/test/coverlet.integration.tests/DotnetTool.cs#L22