Hi,
My App uses following url to download a json file:
/Modules/Common/config.json?1579344447406
the last number is dynamically generated. I want to stub this and load a json in my fixtures folder. I have not been able to come up with a regex for this. Any ideas?
### Current behavior:

Given a static webpage with zero JavaScript present (no jQuery library), if there exists a DOM element with an `id` attribute set to `jquery` (for example, `<p id="jquery">jQuery</p>`), then the `cy.visit()` method throws a TypeError: `TypeError: item.first is not a function.`

![](https://www.dl.dropboxusercontent.com/s/9wkqletdgr30zsb/Screenshot%202020-01-18%2002.31.52.png)

Debug Logs:
```
cypress_runner.js:159529 TypeError: item.first is not a function

Because this error occurred during a 'before each' hook we are skipping the remaining tests in the current suite: 'homepage'
    at Object.unwrapFirst (http://localhost:5000/__cypress/runner/cypress_runner.js:86108:19)
    at http://localhost:5000/__cypress/runner/cypress_runner.js:80941:33
From previous event:
    at runCommand (http://localhost:5000/__cypress/runner/cypress_runner.js:80933:8)
    at next (http://localhost:5000/__cypress/runner/cypress_runner.js:81014:14)
From previous event:
    at http://localhost:5000/__cypress/runner/cypress_runner.js:81055:37
From previous event:
    at run (http://localhost:5000/__cypress/runner/cypress_runner.js:81048:19)
    at Object.cy.<computed> [as visit] (http://localhost:5000/__cypress/runner/cypress_runner.js:81457:11)
    at Context.runnable.fn (http://localhost:5000/__cypress/runner/cypress_runner.js:81699:24)
    at callFn (http://localhost:5000/__cypress/runner/cypress_runner.js:30929:21)
    at Hook.../driver/node_modules/mocha/lib/runnable.js.Runnable.run (http://localhost:5000/__cypress/runner/cypress_runner.js:30922:7)
    at http://localhost:5000/__cypress/runner/cypress_runner.js:84876:28
From previous event:
    at Object.onRunnableRun (http://localhost:5000/__cypress/runner/cypress_runner.js:84864:20)
    at $Cypress.action (http://localhost:5000/__cypress/runner/cypress_runner.js:78026:61)
    at Hook.Runnable.run (http://localhost:5000/__cypress/runner/cypress_runner.js:83558:13)
    at next (http://localhost:5000/__cypress/runner/cypress_runner.js:31272:10)
    at http://localhost:5000/__cypress/runner/cypress_runner.js:31294:5
    at timeslice (http://localhost:5000/__cypress/runner/cypress_runner.js:26362:27)
logError @ cypress_runner.js:159529
```

Added a breakpoint to view the object that's considered a "jQuery object:"

![](https://www.dl.dropboxusercontent.com/s/skb4otgx99ceuj5/Screenshot%202020-01-18%2002.40.12.png)

### Desired behavior:

In a previous issue, this type of error was thrown when an older version of jQuery was found on the webpage being tested: https://github.com/cypress-io/cypress/issues/2927. According to the issue thread, it was resolved in Cypress v3.2.0. 

I'd expect that a webpage with zero JavaScript present shouldn't encounter this error.

### Test code to reproduce

https://github.com/kenchandev/cypress-bug-reduced-test-case

The `README.md` file will contain directions on how to quickly reproduce this bug.

### Versions

**Cypress**: v3.8.2
**Operating System**: Mac OS X
**Browser**: Cypress Test Runner's Default Browser

Im testing a HTTPS site, and after the script put the credencials to log in, its not login with success. I've opened the security sheet's page and notice that a error about certificate was showed.

Cypress v3.8.2 on MAc

Spec

```js
describe('QA Admin', () => {
	it('Loads the auth page, not an empty frame', () => {
		cy.visit('https://redacted.alumniq.com/admin/index.cfm/login');
		cy.get('input');
	});
});
```

Page is blank

Notice the iframed document only has `<head>...</head>` element, no `<body>` at all.

See the following in the terminal (I have added a few line breaks to break the single string)

```
[11854:0117/162940.246364:ERROR:CONSOLE(0)] "Blocked script execution in 'data:text/html;charset=UTF-8,%3Chead%3E%20%3Cscript%20type='text/javascript'%3E%20document.domain%20=%20'alumniq.com';%20var%20Cypress%20=%20window.Cypress%20=%20parent.Cypress;
%20if%20
(!Cypress)%20%7B%20throw%20new%20Error('Something%20went%20terribly%20wrong%20and%20we%20cannot%20proceed.%20We%20expected%20to%20find%20the%20global%20Cypress
%20in%20the%20parent%20window%20but%20it%20is%20missing!.%20This%20should
%20never%20happen%20and%20likely%20is%20a%20bug.%20Please%20open%20an%20issue!');%20%7D;%20Cypress.action('app:window:before:load',%20window);
%20%3C/script%3E%20%3C/head%3E' because the document's frame is sandboxed 
and the 'allow-scripts' permission is not set.", source: data:text/html;charset=UTF-8,%3Chead%3E%20%3Cscript%20type='text/javascript'%3E%20document.domain%20=%20'
alumniq.com';%20var%20Cypress%20=%20window.Cypress%20=%20parent.Cypress;
%20if%20(!Cypress)%20%7B%20throw%20new%20Error('Something%20went%20terribly%20wrong%20and%20we%20cannot%20proceed.%20We%20expected%20to%20find%20the%20
global%20Cypress%20in%20the%20parent%20window%20but%20it%20is%20missing!.
%20This%20should%20never%20happen%20and%20likely%20is%20a%20bug.%20Please%
20open%20an%20issue!');%20%7D;%20Cypress.action('app:window:before:load',
%20window);%20%3C/script%3E%20%3C/head%3E (0)
```

Relevant error from the above text

```
Blocked script execution in 'data:text/html... '
because the document's frame is sandboxed  and the 'allow-scripts' permission 
is not set.", source: data:text/html;charset=UTF-...
```
<!-- Is this a question? Questions WILL BE CLOSED. Ask in our chat https://on.cypress.io/chat  -->

### Current behavior:
- The JS file is not getting loaded while testing using Cypress.
- There is a check added to load the JS file when one of the window property is set.
- Cypress opens the requested URL into iframes which has its own window object. So, the actual window object of the site is different and the Cypress window object is different.
- Due to this JS file is not loading in Cypress browser.
- The window property which is required to load the JS file returns value as "undefined" because the Cypress runs the site in its own frame which has its own window object.

Solutions We tried: Which still does not works.
 - We tried setting the property of window object from the test itself.
 - Also, tried adding "chromeWebSecurity": false to the config file.
<!-- A description including screenshots, stack traces, DEBUG logs, etc -->

### Desired behavior:

<!-- A clear description of what you want to happen -->

### Test code to reproduce
```
describe(‘ExampleTest’, () => {
    it('Verify test’, () => {

    cy.visit(Cypress.config().baseUrl )
    cy.login(email, password)

    parent.window.GLOBAL_VAR = true 
    window.GLOBAL_VAR  = true
    parent.window.frames[0].window.GLOBAL_VAR = true
    parent.window.frames[1].window.GLOBAL_VAR= true

    cy.window().then((window) => {
        window.GLOBAL_VAR  = true
        window.frames[0].window.GLOBAL_VAR = true
    }
}
```
<!-- If we cannot fully run the tests as provided the issue WILL BE CLOSED -->
<!-- Issues without a reproducible example WILL BE CLOSED -->

<!-- You can fork https://github.com/cypress-io/cypress-test-tiny repo, set up a failing test, then link to your fork -->

### Versions
**Chrome Browser Version**:
- Version 79.0.3945.117 (Official Build) (64-bit)
- Version 81.0.4030.0 (Official Build) canary (64-bit)
<!-- Cypress, operating system, browser -->
<!-- 
Thanks for contributing!
Read our contribution guidelines here: 
https://github.com/cypress-io/cypress/blob/develop/.github/CONTRIBUTING.md 
-->

<!-- Example: "Closes #1234" -->

- Closes #6170 

### User facing changelog

- Cypress will now detect if your browser tab has crashed and will cleanly exit.

### Additional details

- previously, Cypress would hang open until the CI job timed out
- methods used to tell if the browser tab has crashed:
	- if the user is not `cy.visit`ing, and the socket disconnects, and there is not a new runner connection already, the browser tab crashed
	- if the user is `cy.visit`ing, the socket disconnects, and it does not reconnect within 10 seconds (generous)
	- [ ] this makes the code a lot more complex, maybe the rules should just be "if the runner disconnects, and it does not reconnect within 10 seconds, the browser tab crashed" - don't try to be smart about it
- what do we do when an unexpected exit does occur?
	- always kill the browser
	- in run mode, exit with the error
	- in open mode, display the error as a warning in the desktop-gui, and
		- [ ] bring desktop-gui to front

WIP, using the existing RENDERER_CRASHED error and cleaning it up a bit to be generic:

![image](https://user-images.githubusercontent.com/1151760/72648814-00ae2f80-394a-11ea-87f2-408db56c6c19.png)

### PR Tasks

<!-- 
These tasks must be completed before a PR is merged.
Delete tasks if they are not applicable. 
-->

- [ ] Have tests been added/updated?
- [ ] Has the original issue been tagged with a release in ZenHub? <!-- (internal team only)-->
- [ ] Has a PR for user-facing changes been opened in [`cypress-documentation`](https://github.com/cypress-io/cypress-documentation)? <!-- Link to PR here -->
- [ ] Have API changes been updated in the [`type definitions`](cli/types/index.d.ts)?
- [ ] Have new configuration options been added to the [`cypress.schema.json`](cli/schema/cypress.schema.json)?

### Current behavior:

The Test Runner uses the Chrome font-awesome icon for many browser logos, and the Firefox logo is out-of-date with Mozilla's current branding. With cross browser support nearly complete, we should take the opportunity to use official, branded iconography for all of the browsers we support.

<img width="169" alt="Screen Shot 2020-01-17 at 1 01 15 PM" src="https://user-images.githubusercontent.com/104908/72636272-b2d6fe80-392c-11ea-8c1d-3fba9800c48d.png">

### Desired behavior:

- [ ] Replace all usage of font-awesome browser logos with the proper branded icon
  - [ ] Edge: https://github.com/alrra/browser-logos/tree/master/src/edge
  - [ ] Firefox: https://github.com/alrra/browser-logos/tree/master/src/firefox
  - [ ] Chrome: https://github.com/alrra/browser-logos/tree/master/src/chrome
  - [ ] Chrome Canary: https://github.com/alrra/browser-logos/tree/master/src/chrome-canary
  - [ ] Chromium: https://github.com/alrra/browser-logos/tree/master/src/chromium
  - [ ] Electron: https://github.com/alrra/browser-logos/tree/master/src/electron
- [ ] The test runner allows users to test against arbitrary Chromium browsers. If given a name (e.g. `brave`), attempt to find the correct icon in the `browser-logos` package. If no icon matches, continue to use the `.fa-globe` icon.
- [ ] Increase the size of the browser logo in the Test Runner from 14px to 24px. Ensure all text that follows is vertically centered with the logo.

<!-- Is this a question? Questions WILL BE CLOSED. Ask in our chat https://on.cypress.io/chat  -->

### Current behavior:

Every test that runs in Cypress causes Firefox to use a little more RAM, up until Firefox consumes all available system RAM and crashes.

We have implemented a workaround in #1359 that will **force** Firefox to run garbage collection routines on a regular interval.

By default, it is only enabled in `run` mode, where it runs between every single test. It is disabled by default in `open` mode because it causes the browser to freeze up between tests, which can be annoying.

Users can override the default interval between forced GC's by setting the `firefoxGcInterval` config value:

* to a positive number, to set the interval for both `open` and `run` mode
* to `null`, to disable it for both `open` and `run` mode
* to an object like `{ runMode: number | null, openMode: number | null }` to set different intervals for each mode

### Desired behavior:

This workaround becomes unnecessary once Firefox can fix this upstream.

### Links

* Firefox tracking issue: https://bugzilla.mozilla.org/show_bug.cgi?id=1608501
* https://gist.github.com/flotwig/202b179adbe57a3903aeb71334f6b77a

Incorrect Node version is being shown in Setting tab

Actual :
    Node  version 12.8.1 is being shown in setting tab

Expcted :
   Node Version 12.14.1 should be shown in setting tab.

Version Details:
  Cypress 3.8.2
  OS : Win 10 Enterprise (64 bit)
  Chrome : 79.0.3945.117 (64 
![NodeIssue](https://user-images.githubusercontent.com/7825972/72626988-b50f7c00-3971-11ea-8a33-a3630fb93676.GIF)
bit)

When we open the mocha test case from test runner we get this error message .
![Cypress_3 8 2](https://user-images.githubusercontent.com/7825972/72610336-15d88d80-394d-11ea-9a8a-ddce6312a663.GIF)

Expected result:
   test cases should run 
Actual result:
   At of the start test case execution itself , we get error "RangeError: Maximum call stack size exceeded"

Versions :
Cypress 3.8.2
Os : win 10 Enterprise (64 bit)
Chrome : 79.0.3945.117 (64 bit)
