## Bug Report

I'm implementing a custom resource (put/get values to a custom credhub server)

on implementing the `assets/in` script I realize that the `params` of the (second job's) get step are not passed via stdin json. There just is no `"params":{"KEY":"somekey","PREFIX": ... }` section in the stdin json.

## Steps to Reproduce

my (test)pipeline looks like this:

```
resource_types:
- name: concourse-credhub-store-resource-type
  type: docker-image
  source:
    repository: dhoffi/concourse-credhub-store-resource
    tag: latest

resources:
- name: concourse-credhub-store-resource
  type: concourse-credhub-store-resource-type
  source:
    credhub_client: ((jumpbox-credhub-client-name))
    credhub_secret: ((jumpbox-credhub-client-secret))
    credhub_server: ((jumpbox-credhub-server))
    credhub_ca_cert: ((jumpbox-credhub-ca-cert.certificate))
    prefix: /concourse/main/jobstate/testConcourseCredhubStoreResource


jobs:
- name: testConcourseCredhubStoreResource-Set
  serial: true
  serial_groups: [sync]
  plan:
  - put: concourse-credhub-store-resource
    resource: concourse-credhub-store-resource
    params:
      KEY: somekey
      VALUE: 
        somekey: somevalue
      # optional: overrides given prefix from resource
      PREFIX: /concourse/main/jobstate/testConcourseCredhubStoreResource
- name:  testConcourseCredhubStoreResource-Get
  serial: true
  serial_groups: [sync]
  plan:
  - get: concourse-credhub-store-resource
    passed: [testConcourseCredhubStoreResource-Set]
    # trigger: true
    resource: concourse-credhub-store-resource
    params:
      KEY: somekey
      # optional
      SKIP_MISSING: false
      # optional: overrides given prefix from resource
      PREFIX: /concourse/main/jobstate/testConcourseCredhubStoreResource
```

but the stdin json of my assets/in just looks like this:

```
{
  "source": {
    "credhub_ca_cert": "-----BEGIN CERTIFICATE-----<redacted>-----END CERTIFICATE-----",
    "credhub_client": "credhub-admin",
    "credhub_secret": "<redacted>",
    "credhub_server": "https://<redacted>:8844",
    "prefix": "/concourse/main/jobstate/testConcourseCredhubStoreResource"
  },
  "version": {
    "key": "/concourse/main/jobstate/testConcourseCredhubStoreResource/somekey"
  }
}
```

## Expected Results

I'd expect the json passed to assets/in also to contain a `"params": { ... }` entry beside the `"source": { ... }` and `"version": { ... }` entries

## Actual Results

no `"params": { ... }` entry in assets/in STDIN json

## Version Info

concourse is part of a (latest) BUCC setup

* Concourse version: v5.7.2
* Deployment type (BOSH/Docker/binary): BUCC bosh
* Infrastructure/IaaS: vSphere without NSX-T
* Browser (if applicable): chrome
* Did this used to work? no

Hi,

I want to use concourse as a backend service exposed via an apigateway. I plan to have the apigateway act as the authentication and authorization service for the backend services. Once the apigateway autheticates a user and gets the authorization token, I want to pass that token to the concourse server. Is this possible to do with concourse? If so, could you please refer some documentation for this?

Thanks,
Siva
If all your workers are busy, queued jobs show as "running" on the dashboard, but the logs show:
"All workers are busy at the moment, please stand-by."


It would be nice if the dashboard showed a status other than running for queued jobs.  Here's an example:

![Screen Shot 2020-01-17 at 3 52 52 PM](https://user-images.githubusercontent.com/100110/72648925-df494580-3941-11ea-8a11-fa57db5f74e3.png)

Several of those are waiting on a worker to be available... only one of them are actually building. Guess which one! :-)
Schedule rerun builds separate from regular scheduler builds (and
manually triggered) so that if a rerun build cannot find its inputs, it
will not result in blocking the scheduler for that job.

fixes #4960


Fixed the RemoveMissingVolumes GC query to be able to garbage collect missing volumes that are referenced by other volumes. 
Can we experience a valuable enough improvement by porting our Topgun test suite ?

# Why? The Hypothesis
- BOSH topgun tests require additional setup that might be too daunting for developers
- Spinning up VMs is slow and switching to an alternative like ( docker-compose or K8s will speed up the test suite )

# Context
## First pass candidates ( Deploy, Use Fly, GardenClient & Psql Client )
- atc_shutdown_test
- build_container_gc_test
- hijack_container_gc_test
- image_artifact_test
- image_resource_gc_test
- pipeline_destroyed_test ( EASY LOOKING )
- resource_check_test
- resource_containers_gc_test
- resource_types_test
- resource_volumes_gc
- volume_gc_test
- containers_scoped_to_team_test

- aws_ssm_test // requires additional aws libs


## Second pass candidates  ( Deploy, Use Fly, GardenClient, Psql Client, BOSH ssh to perform start/stop of web/worker )

- worker_landing_test
- worker_retiring_test
- worker_stalling_test
- atc_login_session


## Third pass or may not port ( Everything above + deploying other services )
- credhub_test

## Notes
- some tests are slow cause of depending on GC cycles (eg. build_container_gc_test ) - Upto 10 mins
- some tests perform checks against the DB and Garden directly

> Let us know! We're happy to help you put together and iterate on a pull
> request.

## Bug Report

It's possible for a panic to occur when initializing a resource cache if the underlying volumes were brutally removed.

## Steps to Reproduce

```sql
EXPLAIN ANALYZE WITH RECURSIVE missing(id) AS (
	SELECT id FROM volumes WHERE state IN ('created')
UNION ALL
	SELECT v.id FROM missing m, volumes v WHERE v.parent_id = m.id
)
DELETE FROM volumes v WHERE v.id IN (SELECT id FROM missing);
```

## Expected Results

Lots of things should error, but the `web` nodes shouldn't panic.

## Actual Results

The `web` node panics.

## Additional Context

https://github.com/concourse/concourse/blob/405cd5f1a7aa6f0f19a86d3a6255d9f3bbf7f573/atc/worker/fetch_source.go#L185-L187

We just need a `nil` check here.

## Version Info

* Concourse version: v5.8.0, master
* Deployment type (BOSH/Docker/binary): any
* Infrastructure/IaaS: any
* Browser (if applicable): n/a
* Did this used to work? nope

https://github.com/concourse/concourse/issues/2460

Good `space-guid`. 
This PR is to integrate Concourse with OPA to enable policy enforcement ability.

The code change is based on RFC https://github.com/concourse/rfcs/pull/41


# Contributor Checklist
> Are the following items included as part of this PR? Please delete checkbox items that don't apply.
- [ ] Unit tests
- [ ] Integration tests (if applicable)
- [ ] Updated documentation (located at https://github.com/concourse/docs)
- [ ] Updated release notes (located at https://github.com/concourse/concourse/tree/master/release-notes)


# Reviewer Checklist
> This section is intended for the core maintainers only, to track review progress. Please do not
> fill out this section.
- [ ] Code reviewed
- [ ] Tests reviewed
- [ ] Documentation reviewed
- [ ] Release notes reviewed
- [ ] PR acceptance performed
- [ ] New config flags added? Ensure that they are added to the [BOSH](https://github.com/concourse/concourse-bosh-release) 
      and [Helm](https://github.com/concourse/helm) packaging; otherwise, ignored for the [integration tests](https://github.com/concourse/ci/tree/master/tasks/scripts/check-distribution-env) (for example, if they are Garden configs that are not displayed in the `--help` text). 

Signed-off-by: Krishna Mannem <kmannem@pivotal.io>

Fixes #4964  .

If you have a step that uses an output and input at the same mount path. The output will end up being a COW of the resource_cache volume. When this output is then used as an input to the next step in the plan, we try to create a COW of a COW(output volume of prev step). In newer versions of the kernel, this isn't something that is supported. With this change we can now achieve the same behavior by making a baggageclaim request using the ImportStrategy. Which will create a copy of the output volume by executing a `cp` command.
https://github.com/concourse/baggageclaim/blob/dc362b1f055e4836dc2afb16639383c61cee637a/volume/import_strategy.go#L29

We have a testflight test which catches this user behavior:
```
- step1:
    - input: some-resource
    - output: some-resource
- step2:
    - input: some-resource
```
https://github.com/concourse/concourse/blob/master/testflight/fixtures/volume-mounting.yml#L164

# Contributor Checklist
- [ ] Unit tests
- [ ] Integration tests (if applicable)
- [ ] Updated documentation (located at https://github.com/concourse/docs)
- [ ] Updated release notes (located at https://github.com/concourse/concourse/tree/master/release-notes)


# Reviewer Checklist
- [ ] Code reviewed
- [ ] Tests reviewed
- [ ] Documentation reviewed
- [ ] Release notes reviewed
- [ ] PR acceptance performed
- [ ] New config flags added? Ensure that they are added to the [BOSH](https://github.com/concourse/concourse-bosh-release) 
      and [Helm](https://github.com/concourse/helm) packaging; otherwise, ignored for the [integration tests](https://github.com/concourse/ci/tree/master/tasks/scripts/check-distribution-env) (for example, if they are Garden configs that are not displayed in the `--help` text). 
