When I used '$visitor = Tracker::currentSession();' I faced error.

Hi,

I'm trying to use the paginate method on Tracker::methods.
Example :
`Tracker::sessions(60 * 24)->paginate(20);`

When using paginate() I got the following error : 

> Method Illuminate\Database\Eloquent\Collection::paginate does not exist.

The documentation says : Most of those methods return an Eloquent model... So I think it is possible but... Am I using this package the wrong way or is it not possible at all to paginate ?

I'm using the package on Laravel 6.9.0 and php 7.2.19

Thanks for any help !

Hello everyone, I have a project that I am doing in valet, laravel and vue, and it does not start doing the session track. 
I must clarify that using mamp if it works and well so I can say that the problem is in valet. someone who can help me, regards and thanks

**Describe the bug**
just run sudo composer require pragmarx/tracker

**To Reproduce**
Steps to reproduce the behavior:
1. Go to '...'
2. Click on '....'
3. Scroll down to '....'
4. See error

**Expected behavior**
A clear and concise description of what you expected to happen.

**Screenshots**
If applicable, add screenshots to help explain your problem.
![image](https://user-images.githubusercontent.com/20015479/70782523-6849eb80-1d9c-11ea-9fec-82e7ed4177de.png)


**System**
 - OS: [e.g. iOS]
 - Browser [e.g. chrome, safari]
 - Version [e.g. 22]

**Additional context**
Add any other context about the problem here.

> php artisan ide-helper:generate

   Symfony\Component\Debug\Exception\FatalThrowableError  : Class 'Illuminate\Support\Facades\Input' not found

  at /app/vendor/pragmarx/datatables/src/Bllim/Datatables/Datatables.php:67
    63|      */
    64|     public function __construct()
    65|     {
    66| 
  > 67|         $this->setData($this->processData(Input::get()));
    68| 
    69|         return $this;
    70|     }
    71|

  Exception trace:

  1   Bllim\Datatables\Datatables::__construct()
      /app/vendor/pragmarx/datatables/src/Bllim/Datatables/DatatablesServiceProvider.php:25

  2   Bllim\Datatables\DatatablesServiceProvider::Bllim\Datatables\{closure}(Object(Illuminate\Foundation\Application), [])
      /app/vendor/laravel/framework/src/Illuminate/Container/Container.php:799

  Please use the argument -v to see more details.
Script php artisan ide-helper:generate handling the post-update-cmd event returned with error code 1
**Getting userid null after successful login**

It was working fine before after upgrading laravel its logging users but storing userid to null.


![Selection_020](https://user-images.githubusercontent.com/43264031/68484788-ca747580-025f-11ea-8b63-8fe4ed24d509.png)

**System**
 - OS: Ubuntu
 - Browser [chrome, mozilla]
 - Laravel Version [5.8]
 - Package version 3.5 


Config: 

`
return [

    /*
     * Enable it?
     */
    'enabled' => true,

    /*
     * Enable cache?
     */
    'cache_enabled' => true,

    /*
     * Deffer booting for middleware use
     */
    'use_middleware' => true,

    /*
     * Robots should be tracked?
     */
    'do_not_track_robots' => false,

    /*
     * Which environments are not trackable?
     */
    'do_not_track_environments' => [
        // defaults to none
    ],

    /*
     * Which routes names are not trackable?
     */
    'do_not_track_routes' => [
        'tracker.stats.*',
    ],

    /*
     * Which route paths are not trackable?
     */
    'do_not_track_paths' => [
        'email/verify/*',
//        'login/*',
    ],

    /*
     * The Do Not Track Ips is used to disable Tracker for some IP addresses:
     *
     *     '127.0.0.1', '192.168.1.1'
     *
     * You can set ranges of IPs
     *     '192.168.0.1-192.168.0.100'
     *
     * And use net masks
     *     '10.0.0.0/32'
     *     '172.17.0.0/255.255.0.0'
     */
    'do_not_track_ips' => [
        //'127.0.0.0/24', /// range 127.0.0.1 - 127.0.0.255
    ],

    /*
     * When an IP is not trackable, show a message in log.
     */
    'log_untrackable_sessions' => true,

    /*
     * Log every single access?
     *
     * The log table can become huge if your site is popular, but...
     *
     * Log table is also responsible for storing information on:
     *
     *    - Routes and controller actions accessed
     *    - HTTP method used (GET, POST...)
     *    - Error log
     *    - URL queries (including values)
     */
    'log_enabled' => true,

    /*
     * Log artisan commands?
     */
    'console_log_enabled' => false,

    /*
     * Log SQL queries?
     *
     * Log must be enabled for this option to work.
     */
    'log_sql_queries' => false,

    /*
     * If you prefer to store Tracker data on a different database or connection,
     * you can set it here.
     *
     * To avoid SQL queries log recursion, create a different connection for Tracker,
     * point it to the same database (or not) and forbid logging of this connection in
     * do_not_log_sql_queries_connections.
     */
    'connection' => env('TRACKER_DB', 'tracker'),


    /*
     * Forbid logging of SQL queries for some connections.
     *
     * To avoid recursion, you better ignore Tracker connection here.
     *
     * Please create a separate database connection for Tracker. It can hit
     * the same database of your application, but the connection itself
     * has to have a different name, so the package can ignore its own queries
     * and avoid recursion.
     *
     */
    'do_not_log_sql_queries_connections' => [
	    env('TRACKER_DB', 'tracker'),
    ],

    /*
     * GeoIp2 database path.
     *
     * To get a fresh version of this file, use the command
     *
     *      php artisan tracker:updategeoip
     *
     */

    //'geoip_database_path' => __DIR__.'/geoip', //storage_path('geoip'),
    'geoip_database_path' => storage_path('geoip'),

    /*
     * Also log SQL query bindings?
     *
     * Log must be enabled for this option to work.
     */
    'log_sql_queries_bindings' => false,

    /*
     * Log events?
     */
    'log_events' => false,

    /*
     * Which events do you want to log exactly?
     */
    'log_only_events' => [
        // defaults to logging all events
    ],

    /*
     * What are the names of the id columns on your system?
     *
     * 'id' is the most common, but if you have one or more different,
     * please add them here in your preference order.
     */
    'id_columns_names' => [
        'id',
    ],
    /*
     * Do not log events for the following patterns.
     * Strings accepts wildcards:
     *
     *    eloquent.*
     *
     */
    'do_not_log_events' => [
        'illuminate.log',
        'eloquent.*',
        'router.*',
        'composing: *',
        'creating: *',
    ],

    /*
     * Do you wish to log Geo IP data?
     *
     * You will need to install the geoip package
     *
     *     composer require "geoip/geoip":"~1.14"
     *
     * And remove the PHP module
     *
     *     sudo apt-get purge php5-geoip
     *
     */
    'log_geoip' => true,

    /*
     * Do you wish to log the user agent?
     */
    'log_user_agents' => true,

    /*
     * Do you wish to log your users?
     */
    'log_users' => true,

    /*
     * Do you wish to log devices?
     */
    'log_devices' => true,

    /*
     * Do you wish to log languages?
     */
    'log_languages' => true,

    /*
     * Do you wish to log HTTP referers?
     */
    'log_referers' => true,

    /*
     * Do you wish to log url paths?
     */
    'log_paths' => true,

    /*
     * Do you wish to log url queries and query arguments?
     */
    'log_queries' => false,

    /*
     * Do you wish to log routes and route parameters?
     */
    'log_routes' => true,

    /*
     * Log errors and exceptions?
     */
    'log_exceptions' => true,

    /*
     * A cookie may be created on your visitor device, so you can have information
     * on everything made using that device on your site.	 *
     */
    'store_cookie_tracker' => true,

    /*
     * If you are storing cookies, you better change it to a name you of your own.
     */
    'tracker_cookie_name' => 'st_fd_id',

    /*
     * Internal tracker session name.
     */
    'tracker_session_name' => 'tracker_session',

    /*
     * ** IMPORTANT **
     *   Change the user model to your own.
     */
//    'user_model' => 'PragmaRX\Tracker\Vendor\Laravel\Models\User',
//   'user_model' => \Satfish\User::class,
   'user_model' => '\Satfish\User',

    /*
     * You can use your own model for every single table Tracker has.
     */

    'session_model' => 'PragmaRX\Tracker\Vendor\Laravel\Models\Session',

    'log_model' => 'PragmaRX\Tracker\Vendor\Laravel\Models\Log',

    'path_model' => 'PragmaRX\Tracker\Vendor\Laravel\Models\Path',

    'query_model' => 'PragmaRX\Tracker\Vendor\Laravel\Models\Query',

    'query_argument_model' => 'PragmaRX\Tracker\Vendor\Laravel\Models\QueryArgument',

    'agent_model' => 'PragmaRX\Tracker\Vendor\Laravel\Models\Agent',

    'device_model' => 'PragmaRX\Tracker\Vendor\Laravel\Models\Device',

    'cookie_model' => 'PragmaRX\Tracker\Vendor\Laravel\Models\Cookie',

    'domain_model' => 'PragmaRX\Tracker\Vendor\Laravel\Models\Domain',

//    'referer_model' => 'PragmaRX\Tracker\Vendor\Laravel\Models\Referer',
    'referer_model' => 'Satfish\Referer',

    'referer_search_term_model' => 'PragmaRX\Tracker\Vendor\Laravel\Models\RefererSearchTerm',

    'route_model' => 'PragmaRX\Tracker\Vendor\Laravel\Models\Route',

    'route_path_model' => 'PragmaRX\Tracker\Vendor\Laravel\Models\RoutePath',

    'route_path_parameter_model' => 'PragmaRX\Tracker\Vendor\Laravel\Models\RoutePathParameter',

    'error_model' => 'PragmaRX\Tracker\Vendor\Laravel\Models\Error',

    'geoip_model' => 'PragmaRX\Tracker\Vendor\Laravel\Models\GeoIp',

    'sql_query_model' => 'PragmaRX\Tracker\Vendor\Laravel\Models\SqlQuery',

    'sql_query_binding_model' => 'PragmaRX\Tracker\Vendor\Laravel\Models\SqlQueryBinding',

    'sql_query_binding_parameter_model' => 'PragmaRX\Tracker\Vendor\Laravel\Models\SqlQueryBindingParameter',

    'sql_query_log_model' => 'PragmaRX\Tracker\Vendor\Laravel\Models\SqlQueryLog',

    'connection_model' => 'PragmaRX\Tracker\Vendor\Laravel\Models\Connection',

    'event_model' => 'PragmaRX\Tracker\Vendor\Laravel\Models\Event',

    'event_log_model' => 'PragmaRX\Tracker\Vendor\Laravel\Models\EventLog',

    'system_class_model' => 'PragmaRX\Tracker\Vendor\Laravel\Models\SystemClass',

    'language_model' => 'PragmaRX\Tracker\Vendor\Laravel\Models\Language',

    /*
     * Laravel internal variables on user authentication and login.
     */
    'authentication_ioc_binding' => ['auth'], // defaults to 'auth' in Illuminate\Support\Facades\Auth

    'authenticated_check_method' => 'check', // to Auth::check()

    'authenticated_user_method' => 'user', // to Auth::user()

    'authenticated_user_id_column' => 'id', // to Auth::user()->id

    'authenticated_user_username_column' => 'email', // to Auth::user()->email

    /*
     * Enable the Stats Panel?
     */
    'stats_panel_enabled' => false,

    /*
     * Stats Panel routes before filter
     *
     */
    'stats_routes_before_filter' => '',

    /*
     * Stats Panel routes after filter
     *
     */
    'stats_routes_after_filter' => '',

    /*
     * Stats Panel routes middleware
     *
     */
    'stats_routes_middleware' => 'web',

    /*
     * Stats Panel template path
     */
    'stats_template_path' => '/templates/sb-admin-2',

    /*
     * Stats Panel base uri.
     *
     * If your site url is http://wwww.mysite.com, then your stats page will be:
     *
     *    http://wwww.mysite.com/stats
     *
     */
    'stats_base_uri' => 'stats',

    /*
     * Stats Panel layout view
     */
    'stats_layout' => 'pragmarx/tracker::layout',

    /*
     * Stats Panel controllers namespace
     */
    'stats_controllers_namespace' => 'PragmaRX\Tracker\Vendor\Laravel\Controllers',
];
`

I have tried to debug that on my own and dump in src/Tracker.php file => getUserId() and in src/ReposirtoryManager => getCurrentUserId() , its giving false on login.  I think this should give logged in user id. 





SQLSTATE[23000]: Integrity constraint violation: 1062 Duplicate entry '0' for key 'PRIMARY' (SQL: insert into `tracker_sessions` (`user_id`, `device_id`, `client_ip`, `geoip_id`, `agent_id`, `referer_id`, `cookie_id`, `language_id`, `is_robot`, `uuid`, `updated_at`, `created_at`) values (, , 124.43.41.19, , , , , , 0, 0b73a0e3-4636-4565-9e83-faa6673743e5, 2019-11-08 09:54:37, 2019-11-08 09:54:37))
**Describe the bug**
`SQLSTATE[23000]: Integrity constraint violation: 1062 Duplicate entry '477c02627521747f77ac6150d7a63f1f4946bd41197ec2143e4eaccd6407271e' for key 'tracker_agents_name_hash_unique' (SQL: insert into `tracker_agents` (`name`, `browser`, `browser_version`, `name_hash`, `updated_at`, `created_at`) values (Mozilla/5.0 (Linux; Android 8.1.0; SM-G610F Build/M1AJQ; wv) AppleWebKit/537.36 (KHTML, like Gecko) Version/4.0 Chrome/70.0.3538.110 Mobile Safari/537.36, Chrome Mobile WebView, 70.0.3538, 477c02627521747f77ac6150d7a63f1f4946bd41197ec2143e4eaccd6407271e, 2019-11-06 19:03:51, 2019-11-06 19:03:51)) {"exception":"[object] (Illuminate\\Database\\QueryException(code: 23000): SQLSTATE[23000]: Integrity constraint violation: 1062 Duplicate entry '477c02627521747f77ac6150d7a63f1f4946bd41197ec2143e4eaccd6407271e' for key 'tracker_agents_name_hash_unique' (SQL: insert into `tracker_agents` (`name`, `browser`, `browser_version`, `name_hash`, `updated_at`, `created_at`) values (Mozilla/5.0 (Linux; Android 8.1.0; SM-G610F Build/M1AJQ; wv) AppleWebKit/537.36 (KHTML, like Gecko) Version/4.0 Chrome/70.0.3538.110 Mobile Safari/537.36, Chrome Mobile WebView, 70.0.3538, 477c02627521747f77ac6150d7a63f1f4946bd41197ec2143e4eaccd6407271e, 2019-11-06 19:03:51, 2019-11-06 19:03:51))`
**Describe the bug**
On run unit test this fails with the log:

```
[2019-11-06 14:28:11] testing.ERROR: session_start(): Cannot start session when headers already sent {"exception":"[object] (ErrorException(code: 0): session_start(): Cannot start session when headers already sent at /home/vagrant/code/vakeromagazine-backend/vendor/pragmarx/support/src/PhpSession.php:23)
[stacktrace]
#0 [internal function]: Illuminate\\Foundation\\Bootstrap\\HandleExceptions->handleError(2, 'session_start()...', '/home/vagrant/c...', 23, Array)
#1 /home/vagrant/code/vakeromagazine-backend/vendor/pragmarx/support/src/PhpSession.php(23): session_start()
#2 /home/vagrant/code/vakeromagazine-backend/vendor/pragmarx/support/src/PhpSession.php(14): PragmaRX\\Support\\PhpSession->startSession()
#3 /home/vagrant/code/vakeromagazine-backend/vendor/pragmarx/tracker/src/Vendor/Laravel/ServiceProvider.php(287): PragmaRX\\Support\\PhpSession->__construct()
#4 /home/vagrant/code/vakeromagazine-backend/vendor/laravel/framework/src/Illuminate/Container/Container.php(800): PragmaRX\\Tracker\\Vendor\\Laravel\\ServiceProvider->PragmaRX\\Tracker\\Vendor\\Laravel\\{closure}(Object(Illuminate\\Foundation\\Application), Array)
#5 /home/vagrant/code/vakeromagazine-backend/vendor/laravel/framework/src/Illuminate/Container/Container.php(682): Illuminate\\Container\\Container->build(Object(Closure))
#6 /home/vagrant/code/vakeromagazine-backend/vendor/laravel/framework/src/Illuminate/Container/Container.php(630): Illuminate\\Container\\Container->resolve('tracker.reposit...', Array)
#7 /home/vagrant/code/vakeromagazine-backend/vendor/laravel/framework/src/Illuminate/Foundation/Application.php(768): Illuminate\\Container\\Container->make('tracker.reposit...', Array)
#8 /home/vagrant/code/vakeromagazine-backend/vendor/laravel/framework/src/Illuminate/Container/Container.php(1246): Illuminate\\Foundation\\Application->make('tracker.reposit...')
#9 /home/vagrant/code/vakeromagazine-backend/vendor/pragmarx/tracker/src/Vendor/Laravel/ServiceProvider.php(160): Illuminate\\Container\\Container->offsetGet('tracker.reposit...')
#10 /home/vagrant/code/vakeromagazine-backend/vendor/laravel/framework/src/Illuminate/Container/Container.php(800): PragmaRX\\Tracker\\Vendor\\Laravel\\ServiceProvider->PragmaRX\\Tracker\\Vendor\\Laravel\\{closure}(Object(Illuminate\\Foundation\\Application), Array)
#11 /home/vagrant/code/vakeromagazine-backend/vendor/laravel/framework/src/Illuminate/Container/Container.php(682): Illuminate\\Container\\Container->build(Object(Closure))
#12 /home/vagrant/code/vakeromagazine-backend/vendor/laravel/framework/src/Illuminate/Container/Container.php(630): Illuminate\\Container\\Container->resolve('tracker', Array)
#13 /home/vagrant/code/vakeromagazine-backend/vendor/laravel/framework/src/Illuminate/Foundation/Application.php(768): Illuminate\\Container\\Container->make('tracker', Array)
#14 /home/vagrant/code/vakeromagazine-backend/vendor/laravel/framework/src/Illuminate/Container/Container.php(1246): Illuminate\\Foundation\\Application->make('tracker')
#15 /home/vagrant/code/vakeromagazine-backend/vendor/pragmarx/tracker/src/Vendor/Laravel/ServiceProvider.php(639): Illuminate\\Container\\Container->offsetGet('tracker')
#16 /home/vagrant/code/vakeromagazine-backend/vendor/pragmarx/tracker/src/Vendor/Laravel/ServiceProvider.php(397): PragmaRX\\Tracker\\Vendor\\Laravel\\ServiceProvider->getTracker()
#17 /home/vagrant/code/vakeromagazine-backend/vendor/pragmarx/tracker/src/Vendor/Laravel/ServiceProvider.php(82): PragmaRX\\Tracker\\Vendor\\Laravel\\ServiceProvider->registerErrorHandler()
#18 [internal function]: PragmaRX\\Tracker\\Vendor\\Laravel\\ServiceProvider->boot()
#19 /home/vagrant/code/vakeromagazine-backend/vendor/laravel/framework/src/Illuminate/Container/BoundMethod.php(32): call_user_func_array(Array, Array)
#20 /home/vagrant/code/vakeromagazine-backend/vendor/laravel/framework/src/Illuminate/Support/helpers.php(520): Illuminate\\Container\\BoundMethod::Illuminate\\Container\\{closure}()
#21 /home/vagrant/code/vakeromagazine-backend/vendor/laravel/framework/src/Illuminate/Container/BoundMethod.php(90): value(Object(Closure))
#22 /home/vagrant/code/vakeromagazine-backend/vendor/laravel/framework/src/Illuminate/Container/BoundMethod.php(34): Illuminate\\Container\\BoundMethod::callBoundMethod(Object(Illuminate\\Foundation\\Application), Array, Object(Closure))
#23 /home/vagrant/code/vakeromagazine-backend/vendor/laravel/framework/src/Illuminate/Container/Container.php(591): Illuminate\\Container\\BoundMethod::call(Object(Illuminate\\Foundation\\Application), Array, Array, NULL)
#24 /home/vagrant/code/vakeromagazine-backend/vendor/laravel/framework/src/Illuminate/Foundation/Application.php(828): Illuminate\\Container\\Container->call(Array)
#25 /home/vagrant/code/vakeromagazine-backend/vendor/laravel/framework/src/Illuminate/Foundation/Application.php(811): Illuminate\\Foundation\\Application->bootProvider(Object(PragmaRX\\Tracker\\Vendor\\Laravel\\ServiceProvider))
#26 [internal function]: Illuminate\\Foundation\\Application->Illuminate\\Foundation\\{closure}(Object(PragmaRX\\Tracker\\Vendor\\Laravel\\ServiceProvider), 34)
#27 /home/vagrant/code/vakeromagazine-backend/vendor/laravel/framework/src/Illuminate/Foundation/Application.php(812): array_walk(Array, Object(Closure))
#28 /home/vagrant/code/vakeromagazine-backend/vendor/laravel/framework/src/Illuminate/Foundation/Bootstrap/BootProviders.php(17): Illuminate\\Foundation\\Application->boot()
#29 /home/vagrant/code/vakeromagazine-backend/vendor/laravel/framework/src/Illuminate/Foundation/Application.php(211): Illuminate\\Foundation\\Bootstrap\\BootProviders->bootstrap(Object(Illuminate\\Foundation\\Application))
#30 /home/vagrant/code/vakeromagazine-backend/vendor/laravel/framework/src/Illuminate/Foundation/Console/Kernel.php(320): Illuminate\\Foundation\\Application->bootstrapWith(Array)
#31 /home/vagrant/code/vakeromagazine-backend/tests/CreatesApplication.php(18): Illuminate\\Foundation\\Console\\Kernel->bootstrap()
#32 /home/vagrant/code/vakeromagazine-backend/tests/Bootstrap.php(34): Tests\\Bootstrap->createApplication()
#33 /home/vagrant/code/vakeromagazine-backend/vendor/phpunit/phpunit/src/TextUI/TestRunner.php(612): Tests\\Bootstrap->executeBeforeFirstTest()
#34 /home/vagrant/code/vakeromagazine-backend/vendor/phpunit/phpunit/src/TextUI/Command.php(200): PHPUnit\\TextUI\\TestRunner->doRun(Object(PHPUnit\\Framework\\TestSuite), Array, true)
#35 /home/vagrant/code/vakeromagazine-backend/vendor/phpunit/phpunit/src/TextUI/Command.php(159): PHPUnit\\TextUI\\Command->run(Array, true)
#36 /home/vagrant/code/vakeromagazine-backend/vendor/phpunit/phpunit/phpunit(61): PHPUnit\\TextUI\\Command::main()
#37 {main}
"} 
```

**To Reproduce**
Steps to reproduce the behavior:
1. Install with `composer require pragmarx/tracker`
2. Add the service provider to app/config/app.php:
`PragmaRX\Tracker\Vendor\Laravel\ServiceProvider::class`
3. Add the alias to the facade on app/config/app.php:
`'Tracker' => 'PragmaRX\Tracker\Vendor\Laravel\Facade'`
4. Publish tracker configuration:
`php artisan vendor:publish --provider="PragmaRX\Tracker\Vendor\Laravel\ServiceProvider"`
5. Enable the Middleware in `app/config/tracker.php`:
`'use_middleware' => true,`
6. Add the Middleware to Laravel Kernel:
`\PragmaRX\Tracker\Vendor\Laravel\Middlewares\Tracker::class,`
7. Enable Tracker in tracker.php:
`'enabled' => true,`
8. Publish the migration:
`php artisan tracker:tables`
9. Config database.php:
`
        'tracker' => [
            'driver' => 'mysql',
            'url' => env('DATABASE_TRACK_URL', env('DATABASE_URL')),
            'host' => env('DB_TRACK_HOST', env('DB_HOST', '127.0.0.1')),
            'port' => env('DB_TRACK_PORT', env('DB_PORT', '3306')),
            'database' => env('DB_TRACK_DATABASE' ,env('DB_DATABASE', 'forge')),
            'username' => env('DB_TRACK_USERNAME', env('DB_USERNAME', 'forge')),
            'password' => env('DB_TRACK_PASSWORD', env('DB_PASSWORD', '')),
            'unix_socket' => env('DB_TRACK_SOCKET', env('DB_SOCKET', '')),
            'charset' => 'utf8',
            'collation' => 'utf8_unicode_ci',
            'prefix' => '',
            'prefix_indexes' => false,
            'strict' => false,
            'engine' => 'InnoDB',
            'options' => extension_loaded('pdo_mysql') ? array_filter([
                PDO::MYSQL_ATTR_SSL_CA => env('MYSQL_ATTR_SSL_CA'),
            ]) : [],
        ],
`
9. Migrate:
`php artisan migrate`
10. Enable configurations:
`
    'cache_enabled' => true,
    'log_enabled' => true,
    'log_user_agents' => true,
    'log_devices' => true,
    'log_referers' => true,
    'log_paths' => true,
    'log_routes' => true,
    'log_exceptions' => true,

    'user_model' => 'App\Entities\User',
`
11. Run tests:
`phpunit`

**Expected behavior**
Tests run normally

**Screenshots**
*Gitlab CI*
![GitLab CI](https://user-images.githubusercontent.com/22435698/68313365-72cce300-0082-11ea-84ae-db4f4bd25c5a.png)

**System**
 - OS: MacOS
 - Browser: Chrome
 - Version: 78

**Additional context**
PHP 7.3.7
Laravel 6
PHPUnit 8.4.2

I don't want to generally enable the tracker but need activate it by middleware or command. 

The "use_middleware" seems not to be implemented.

How to start it?
use Tracker;
 Tracker::currentSession();

Doesn't work!!

It only works with 'enabled' => true, in the config for each request.