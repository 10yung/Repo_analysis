When compiling with gradle 6.1-rc2 the following error occurs:

```
> Task :server:compileKotlin FAILED

FAILURE: Build failed with an exception.

* What went wrong:
Execution failed for task ':server:compileKotlin'.
> Could not resolve all files for configuration ':server:compileClasspath'.
   > Could not find org.jetbrains:fernflower:1.0.
     Searched in the following locations:
       - https://repo.gradle.org/gradle/libs-releases/org/jetbrains/fernflower/1.0/fernflower-1.0.pom
       - file:<PATH_TO_KOTLIN_LANGUAGE_SERVER_SOURCE>/server/lib/org/jetbrains/fernflower/1.0/fernflower-1.0.pom
       - https://repo.maven.apache.org/maven2/org/jetbrains/fernflower/1.0/fernflower-1.0.pom
       - https://teamcity.jetbrains.com/httpAuth/repository/download/fernflower/1.0/teamcity-ivy.xml
     Required by:
         project :server
```

Copying the existing `pom.xml` file to `fernflower-1.0.pom` seems to solve the issue. Not sure if it is the correct solution:

`cp <PATH_TO_KOTLIN_LANGUAGE_SERVER_SOURCE>/server/lib/org/jetbrains/fernflower/1.0/pom.xml fernflower-1.0.pom
`

reason for compiling with gradle 6.1-rc2 was explained in this issue [#183](https://github.com/fwcd/kotlin-language-server/issues/183#issue-548632174)

If this is an acceptable solution I can submit a PR.

**Edit:**
Actually a relative symbolic link might be better to avoid duplicate config files. [a81e501](https://github.com/chrisg123/kotlin-language-server/commit/a81e501674de5c5045e69385d355da8f10a58e47)
I have a `build.gradle.kts` file like the following (with some stuff removed for brevity).

The generated code is put in `build/geneated/source/proto`, but the language server doesn't seem to find it, and I get `Unresolved reference` everywhere in my IDE (VS Code).

Is this supported currently?  Am I missing some configuration?

```kotlin
import com.google.protobuf.gradle.protobuf
import com.google.protobuf.gradle.protoc
import org.jetbrains.kotlin.gradle.tasks.KotlinCompile

plugins {
    // ...
    id("com.google.protobuf").version("0.8.10")
    id("com.google.cloud.tools.jib").version("1.5.1")
}

repositories {
    // ...
    google()
}

dependencies {
    // ...
    protobuf(files("ext_proto/"))
}

protobuf {
    protoc {
        artifact = "com.google.protobuf:protoc:3.6.1"
    }
}

sourceSets {
    main {
        java.srcDir("src/main/kotlin")
        java.srcDir("${protobuf.protobuf.generatedFilesBaseDir}/main/java")
    }
    test {
        java.srcDir("src/test/kotlin")
    }
}
```
Hey, I'm new to vs code as well as this extension but the extension doesn't want to connect to the kotlin language server for some reason. It's always stuck on initializing kotlin language server and says internal error after a while. I thought it was the other extensions messing it up and tried uninstalling them and still no luck. Also tried reinstalling this extension but the issue still persists.
Everything is updated to latest versions.
Here's the output if that helps : https://codeshare.io/G8NwVZ
And here's an image of what happens  : 
![image](https://user-images.githubusercontent.com/53013721/71498468-83c7f280-2882-11ea-805e-db401de3ecce.png)

**Describe the bug**
All lines in `build.gradle.kts` have this error:

```
No script runtime was found in the classpath: class 'kotlin.script.templates.standard.ScriptTemplateWithArgs' not found. Please add kotlin-script-runtime.jar to the module dependencies.kotlin(MISSING_SCRIPT_STANDARD_TEMPLATE)
```

**Extension version**
0.2.11

**Additional context**
gradle 0.6.1
kotlin jvm plugin 1.3.61
Used through Remote SSH on a remote Linux server
`gradle run` from the command line on the server runs the app fine

Let me know what additional info I should provide to help troubleshooting.

Problem:
In project I have many generated folders completely unrelated to java or kotlin.
These folders are really huge and to avoid problems with file tracking and searches I've excluded them using 
```
"files.exclude": {
        "build/": true,
        "env/": true
}
```
With growth of this folder language server first start taking too long to start.
Unfortunately after some certain size of this folder kotlin server start crashing on startup while looking for dependencies
```
[Info  - 8:01:16 PM] client    Searching for dependencies in workspace root /home/xxxxxx
[Info  - 8:01:19 PM] Connection to server got closed. Server will restart.
```

In certain conditions it is possible to see exception:
```
PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint fallbackResponseError
SEVERE: Internal error: java.lang.reflect.InvocationTargetException
java.lang.RuntimeException: java.lang.reflect.InvocationTargetException
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.lambda$null$0(GenericEndpoint.java:67)
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.request(GenericEndpoint.java:120)
	at org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.handleRequest(RemoteEndpoint.java:261)
	at org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.consume(RemoteEndpoint.java:190)
	at org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.handleMessage(StreamMessageProducer.java:192)
	at org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.listen(StreamMessageProducer.java:94)
	at org.eclipse.lsp4j.jsonrpc.json.ConcurrentMessageProcessor.run(ConcurrentMessageProcessor.java:113)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
Caused by: java.lang.reflect.InvocationTargetException
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.lambda$null$0(GenericEndpoint.java:65)
	... 11 more
Caused by: java.nio.file.FileSystemException: /home/xxx xxxxx: Too many open files
	at sun.nio.fs.UnixException.translateToIOException(UnixException.java:91)
	at sun.nio.fs.UnixException.rethrowAsIOException(UnixException.java:102)
	at sun.nio.fs.UnixException.rethrowAsIOException(UnixException.java:107)
	at sun.nio.fs.UnixFileSystemProvider.newDirectoryStream(UnixFileSystemProvider.java:427)
	at java.nio.file.Files.newDirectoryStream(Files.java:457)
	at java.nio.file.Files.list(Files.java:3451)
	at org.javacs.kt.classpath.DefaultClassPathResolverKt.folderResolvers(DefaultClassPathResolver.kt:25)
	at org.javacs.kt.classpath.DefaultClassPathResolverKt.folderResolvers(DefaultClassPathResolver.kt:33)
	at org.javacs.kt.classpath.DefaultClassPathResolverKt.folderResolvers(DefaultClassPathResolver.kt:33)
	at org.javacs.kt.classpath.DefaultClassPathResolverKt.folderResolvers(DefaultClassPathResolver.kt:33)
	at org.javacs.kt.classpath.DefaultClassPathResolverKt.folderResolvers(DefaultClassPathResolver.kt:33)
	at org.javacs.kt.classpath.DefaultClassPathResolverKt.folderResolvers(DefaultClassPathResolver.kt:33)
	at org.javacs.kt.classpath.DefaultClassPathResolverKt.folderResolvers(DefaultClassPathResolver.kt:33)
	at org.javacs.kt.classpath.DefaultClassPathResolverKt.folderResolvers(DefaultClassPathResolver.kt:33)
	at org.javacs.kt.classpath.DefaultClassPathResolverKt.folderResolvers(DefaultClassPathResolver.kt:33)
	at org.javacs.kt.classpath.DefaultClassPathResolverKt.folderResolvers(DefaultClassPathResolver.kt:33)
	at org.javacs.kt.classpath.DefaultClassPathResolverKt.folderResolvers(DefaultClassPathResolver.kt:33)
	at org.javacs.kt.classpath.DefaultClassPathResolverKt.folderResolvers(DefaultClassPathResolver.kt:33)
	at org.javacs.kt.classpath.DefaultClassPathResolverKt.folderResolvers(DefaultClassPathResolver.kt:33)
	at org.javacs.kt.classpath.DefaultClassPathResolverKt.folderResolvers(DefaultClassPathResolver.kt:33)
	at org.javacs.kt.classpath.DefaultClassPathResolverKt.folderResolvers(DefaultClassPathResolver.kt:33)
	at org.javacs.kt.classpath.DefaultClassPathResolverKt.folderResolvers(DefaultClassPathResolver.kt:33)
	at org.javacs.kt.classpath.DefaultClassPathResolverKt.folderResolvers(DefaultClassPathResolver.kt:33)
	at org.javacs.kt.classpath.DefaultClassPathResolverKt.folderResolvers(DefaultClassPathResolver.kt:33)
	at org.javacs.kt.classpath.DefaultClassPathResolverKt.workspaceResolvers(DefaultClassPathResolver.kt:18)
	at org.javacs.kt.classpath.DefaultClassPathResolverKt.access$workspaceResolvers(DefaultClassPathResolver.kt:1)
	at org.javacs.kt.classpath.DefaultClassPathResolverKt$defaultClassPathResolver$1.invoke(DefaultClassPathResolver.kt:12)
	at org.javacs.kt.classpath.DefaultClassPathResolverKt$defaultClassPathResolver$1.invoke(DefaultClassPathResolver.kt)
	at kotlin.sequences.FlatteningSequence$iterator$1.ensureItemIterator(Sequences.kt:277)
	at kotlin.sequences.FlatteningSequence$iterator$1.hasNext(Sequences.kt:265)
	at org.javacs.kt.classpath.ClassPathResolverKt.getJoined(ClassPathResolver.kt:66)
	at org.javacs.kt.classpath.DefaultClassPathResolverKt.defaultClassPathResolver(DefaultClassPathResolver.kt:12)
	at org.javacs.kt.CompilerClassPath.refresh(CompilerClassPath.kt:20)
	at org.javacs.kt.CompilerClassPath.refresh$default(CompilerClassPath.kt:18)
	at org.javacs.kt.CompilerClassPath.addWorkspaceRoot(CompilerClassPath.kt:64)
	at org.javacs.kt.KotlinLanguageServer.initialize(KotlinLanguageServer.kt:76)
	... 16 more
```

I think it simplest way is not trying to iterate over excluded folders.

sys limit for this could not solve the problem, as it is already large enough (in my case 1.5M)
VSC shows in the Problems tab this error  for any R use : 

	"code": "UNRESOLVED_REFERENCE",
	"severity": 8,
	"message": "Unresolved reference: R",
	"source": "kotlin",

Steps to reproduce the behavior:
my code example:

mChannel.description = getString(R.string.notif_channel_desc)

**Expected behavior**
No errors or warnings.

**Extension version**
0.2.10

Having fwcd-kotlin and editor.formatOnSave enabled in VSCode makes saving files impossible.
https://i.gyazo.com/9bdfba2d927450a0a8aac00c545f1384.mp4

kotlin-language-server version: 0.4.0
Gradle version: 6.0 
Client: NeoVim + SpaceVim + LanguageClient-neovim

After open a gradle project(kotlin dsl buildscript), there is no autocomplete, hover... even error like "Unresolved Reference". Then check log only got this
<img width="749" alt="WX20191118-164735@2x" src="https://user-images.githubusercontent.com/17329403/69037670-3c4c7c00-0a23-11ea-891d-b2b6398f1f43.png">

I observe that kotlin-language-server download its own library source in path like 
` /var/folders/tn/cdg3k2rs6732qy18m_zrmnb80000gp/T/kotlinlangserver3482097798525421494`
While gradle download dependencies for my projects locate in ~/.gradle/cache/...
So can I somehow config language server to map "go-to-definition" source to it, just like the way intelliJ did.

Thanks for your hard work in building this great language server!
From the default build.gradle.kts from `gradle init --type kotlin-application`
`Type mismatch: inferred type is () -> Unit but Action<JavaApplication> was expectedkotlin(TYPE_MISMATCH)`


![image](https://user-images.githubusercontent.com/18282288/65604462-72c7c680-df9f-11e9-930a-667a2eea82a1.png)
