The actual call is `closest`. Looking at the docs, it seems the last time that line was update was 9 years ago. Just want to update to eliminate confusion for others coming to the repo for the first time.
### Use existing Bundler

To try passing the build in CI, this PR tries to **run tests with the provided `bundle` command**, instead of trying to install one. Result: This stops the error condition that some of the CI matrix elements could not start building.

### Drop `sudo: false` Travis directive

In addition: This PR removes the no-longer-used Travis setting `sudo: false`. See [more at the Travis blog](https://blog.travis-ci.com/2018-11-19-required-linux-infrastructure-migration).

### `gemfiles/`: Drop `test-unit` duplicates, pick version of `sqlite3`

In gemfiles, there as a duplication, now removed.

`rails3` gemfile asked for a `sqlite3` which was not provided.
This PR changes the build badges to SVG for sharper readability âœ¨

PS: Also drops Gemnasium badge, that service has been discontinued.
Is it possible to retrieve information about which municipality the given address belongs to?

Thanks!
Instead of the `lat` and `lng` columns having to be directly accessible on the table using chain notation (e.g. `Location.lat`), is there any current support (or would it be useful to someone other than me) to have the ability to specify accessing the `lat` `lng` data from a nested attribute (json for example)?

Something like `House.location["lat"]` is what I'm looking for


This request addresses the following two problems:

1) PostGIS was not supported, so the adaptor for Postgres was simply duplicated with a new name
    - There's definitely better integration that can be achieved with native PostGIS methods, but I'm not experienced enough to do that

2) Fixed a deprecation warning ahead of Rails 6
    - String interpolation is going to become unsupported soon, so the safer placeholder substitution was used instead

Currently trying to make a PR to deal with Postgresql failures due to Arel SQL not providing an alias to `:distance` and thus returning no values (otherwise I'll just go and use the [geocoder gem](http://www.rubygeocoder.com/) instead).

Is it possible to adopt Docker as a better solution for testing against multiple databases? This way anyone can more easily contribute without needing to install on their host OS the various databases (and versions of those databases).

Further, it would be good to then amend the README.md to cover off on this.
I have some data stored on a Redshift cluster, I wasn't able to use the tool using that tool so I've integrated the adapter and the gem to support the connection