It's hard to say if this is a bug, or if I'm lacking knowledge on common audio effects.

https://stackblitz.com/edit/tone-js-issue-609?file=index.ts

To me, this should output sound only in my right speaker.

If the current behaviour is the expected behaviour, what should I replace the first panner with to accomplish what I am trying to do? 2 Panners (one extreme left, one extreme right), routed to a CrossFade, routed to the second panner?

Cheers!
Hey,

I love Tone.js, but it's really frustrating that it's impossible to add an `onerror` callback when loading audio buffers (e.g. with `Tone.Buffers`, `Tone.Sampler`). That basically means there's no way of knowing if anything went wrong during loading.

 **Solution:**
I poked through the source code and I see that the `onerror` is in fact implemented, but only on the `Tone.Buffer` class, but it's not included in classes that extend it. So the only thing that needs to be done is to make sure the `onerror` callback is included in classes that extend/build on top of `Tone.Buffer`, like `Buffers`, `Sampler` etc. Should be a super quick fix, but it would make a huge difference in using Tone.js, especially for production.





I'm seeing an issue in my exception handler for users on Safari 12 and 11 at this line in the `build/esm/index.js` file:

` export var now = getContext().now.bind(getContext());`

The full stack trace is as follows:
```
TypeError: undefined is not an object (evaluating 'a.connect(n).connect')
  at ? (/app/node_modules/standardized-audio-context/build/es2018/helpers/test-audio-node-disconnect-method-support.js:14:1)
  at initializePromise([native code])
  at Promise([native code])
  at test(/app/node_modules/standardized-audio-context/build/es2018/helpers/test-audio-node-disconnect-method-support.js:2:1)
  at cacheTestResult(/app/node_modules/standardized-audio-context/build/es2018/factories/cache-test-result.js:12:1)
  at super(/app/node_modules/standardized-audio-context/build/es2018/factories/audio-node-constructor.js:271:1)
  at audioDestinationNodeConstructor(/app/node_modules/standardized-audio-context/build/es2018/factories/audio-destination-node-constructor.js:10:1)
  at super(/app/node_modules/standardized-audio-context/build/es2018/factories/minimal-base-audio-context-constructor.js:13:1)
  at super(/app/node_modules/standardized-audio-context/build/es2018/factories/base-audio-context-constructor.js:4:1)
  at ? (/app/node_modules/standardized-audio-context/build/es2018/factories/audio-context-constructor.js:21:1)
  at Context(/app/node_modules/tone/build/esm/core/context/AudioContext.js:8:16)
  at getContext(/app/node_modules/tone/build/esm/core/Global.js:22:24)
  at call(/app/node_modules/tone/build/esm/index.js:12:18)
  at __webpack_require__(webpack/bootstrap:86:1)
  at call(/app/node_modules/tinyqueue/index.js:86:1)
  at __webpack_require__(webpack/bootstrap:86:1)
  at call(./state/sanitizer.ts:35:42)
  at __webpack_require__(webpack/bootstrap:86:1)
  at call(/app/node_modules/next-redux-wrapper/es6/index.js:77:41)
  at __webpack_require__(webpack/bootstrap:86:1)
  at regFn(/app/node_modules/next/dist/build/webpack/loaders/next-client-pages-loader.js?6ac4:3:17)
  at register(/app/node_modules/next/dist/client/page-loader.js:15:57)
  at push(/app/node_modules/next/dist/client/page-loader.js:17:263)
  at call(/app/node_modules/next/dist/build/webpack/loaders/next-client-pages-loader.js?6ac4:2:1)
  at __webpack_require__(webpack/bootstrap:86:1)
  at checkDeferredModules(webpack/bootstrap:45:1)
  at webpackJsonpCallback(webpack/bootstrap:32:1)
  at global code(/_next/static/KgV7EMgldFzItZnOHhv4n/pages/_app.js:1:51)
```
[This public sentry exception will help with source maps](https://sentry.io/share/issue/c9d6bd2d71794c288d0add4975d797c1/)

I am proactively using the [`isSupported`](https://github.com/chrisguttandin/standardized-audio-context#issupported) method from standardized-audio-context to inform users that their browser is not supported, but I'm unable to catch this because it happens simply from importing the Tone.js library.

Is there a way to capture this without async importing Tone and catching the error?
 
Right now the code looks to be a UMD library, which actually means it _can't_ be run in the browser when using modern ES module code. Would it be possible to generate a `Tone.umd.js` as well as a `Tone.esm.js` so that folks who are writing modern module-based code can simply write `import { Tone } from "Tone.esm.js"` in their scripts?
```
var synth = new Tone.Synth(440, "sawtooth").toMaster()

/* var lfo = new Tone.LFO(10, 400, 4000);
lfo.connect(synth.frequency);
lfo.start() */

var scale = new Tone.Scale(500, 1000);
var noise = new Tone.Noise().connect(scale)
scale.connect(synth.frequency)
noise.start()

var loop = new Tone.Loop(function(time){
	synth.triggerAttackRelease("C1", "8n", time)
}, "4n")

Tone.Transport.start()
loop.start(0).stop('2m')
```

The same for LFO (see the commented part).

By the way, is there any method to select a certain pitch every time the synth is triggered?
Hi there,

As I understand, the only differences between a Chorus and a Flanger are these:

1) A Flanger has a shorter delay time than a Chorus.

2) The delay time of a Flanger modulates to 0, but doesn't with a Chorus.

3) With a Flanger, the delay has feedback, with a chorus it doesn't.

You can do the first 2 with the current implementation, but not the 3rd.

Would it be possible to add a feedback option to the Chorus?
If it is as simple as swapping the Delay for a FeedbackDelay I could try it myself, although I'm not entirely familiar with Tone's architecture.

Or maybe make Flanger is own, separate effect. But I wouldn't know how to do that without copying alot of code from the Chorus effect.

Thanks in advance
It seems the Transport.position is a little Inaccurate.

I scheduled a callback like this:
`Tone.Transport.schedule((time) => {
  console.log('0');
}, '0:0:0');` 

And when i set the Transpost.time to '0:0:0', sometimes the callback was not be invoked.
It can be fixed by this :
`Tone.Transport.position = Tone.Time('0:0:0') - Tone.Time('32n');`

The demo here:
https://jsfiddle.net/moayuisuda/bgu4nd0s/20/#

Did i used it in the wrong way or it's just so?
I've found a bug that occurs when multiple `Reverb#generate()` are called at the same time.

It appears that any of the Reverb's that are getting called after the first have the Offline context

[Working in next.](https://jsfiddle.net/JackCA/ewko7cLs/)
[
Failing in typescript.](https://jsfiddle.net/JackCA/4hfjm75q/2/)
Here is a simple script to demonstrate the problem:
<pre>
	<script src="lib/Tone.js"></script>


	<script type="text/javascript">
           var synth = new Tone.PolySynth(8, Tone.AMSynth).toMaster();
	  synth.triggerAttackRelease('G4', 0.5);
	</script>
</pre>

Any value except 0.5 seems to work fine. With 0.5 there is a strange pop at the end of the sound.
Try 0.49 or 0.51. They sound fine.

Tested on Firefox 69.0.3 (64-bit) on Fedora. Also experienced the problem with Chromium.

I have spent days trying to solve this. The sound is good on my PC with Chrome (or even a simple windows tablet) but not on my iPhone. I reduced my app as far as possible and made a very small demo with just a simple noise generator for you to replicate. You find the code by checking the page source. It sounds really bad, like a distorted sound lag. If you can't hear it, then it works on your device. Sometimes you have to listen for a minute before the crackling starts.

I think this is true for any type of semi-complicated sound with tone.js. Is it a performance issue? This phone should be able to handle much worse applications. Is there anything I can do?

**Demo:** https://nanoticker.info/tone-demo/