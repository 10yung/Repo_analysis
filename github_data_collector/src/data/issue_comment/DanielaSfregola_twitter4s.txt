add logger warnings
This is not an error handling:
```
  def filterStatuses(follow: Seq[Long] = Seq.empty,
   ...
         errorHandler: PartialFunction[Throwable, Unit] = ErrorHandler.ignore
   ...


object ErrorHandler {
  def ignore: PartialFunction[Throwable, Unit] = {
    case scala.util.control.NonFatal(e) => ()
  }
}
```
make it at least:
```
object ErrorHandler {
  val log: Logger = ... 
  def ignore: PartialFunction[Throwable, Unit] = {
    case scala.util.control.NonFatal(e) => log.warn("Error", e)
  }
}
```




An early proposal
Hi,
first of all, thanks for building this library. It's awesome. With that said, I have a number of problems with the streaming API. I'm trying to build a service that is supposed to consume tweets 24/7, and the design of the API makes it really hard to handle any issues. 

Twitter describes a pretty large collection of errors and reasons for shutting down a stream. The user of the API has no reasonable way to react to that. Let's say we use the method `filterStatuses`. It returns a `Future[TwitterStream]`that returns `Success` as soon as the connection is established. All events are processed within a partial function. Let's say the stream receives a `DisconnectMessage`  - the application can only respond to that by using side effects. What is more, type of the error received impacts the retry operation that should be performed. Some errors require immediate retry, others should be handled with backoff strategy. I found about all of this after seeing that my stream has been running for days but has not been receiving any new messages. 

Therefore I would like to propose one of two solutions: 
- Changing the result of streaming functions to something like `([Future[TwitterStreamHandle], Future[StreamResult]])`. This would allow the end user to manually close the stream, as it is right now, as well react to errors that occur in a functional manner. I would also supply an example with proper retry strategies that would keep the stream working. 
- Better yet, I believe that the retry behaviour should be integrated into the library itself. The backoff/instant retry based on error messages will require a bit of work to get right. I don't see a need for the end user to implement this on his own. In that case we could just add a simple flag parameter `autoHandleStreamErrors` that would enable the retry mechanism in case of any issues.

Please let me know what you think about this, I'm happy to implement either of these solutions. 

 
Just a quick note to keep track of ideas.

This has been inspired by https://github.com/DanielaSfregola/twitter4s-demo/pull/30
Should this library handle cursor? The "next-cursor" pattern is quite popular in the Twitter API.

PROS:
- I assume people do this quite often, so it would be useful to have it in the library

CONS:
- You could really hit your rate limits by querying lots of pages that you really do not need.

...do our users want this feature?
The Twitter API [offers applications the ability to issue authenticated requests on behalf of the application itself](https://developer.twitter.com/en/docs/basics/authentication/overview/application-only.html) (as opposed to on behalf of a specific user) - these requests are authenticated using _bearer_ tokens and often **have much higher API quota limits** (eg on the [search tweets](https://developer.twitter.com/en/docs/tweets/search/api-reference/get-search-tweets.html#resource-information) endpoint you get 450, rather than 180, requests per 15 minute window):

![image](https://user-images.githubusercontent.com/52038/53012561-36495080-343b-11e9-92ca-8661b7251a3f.png)

`twitter4s` is an excellent library, although unfortunately it currently only supports user-auth so far as I can see - would it be possible to add app-auth for increased API quota?

See also: the [PR adding application-only authentication to `Twitter4J`](https://github.com/Twitter4J/Twitter4J/pull/101/files). 

Hi, I encountered the following error:

com.danielasfregola.twitter4s.exceptions.TwitterException: [500 Internal Server Error] Rate Information expected but not found.

Please report it at https://github.com/DanielaSfregola/twitter4s/issues/new
Headers names were: cache-control, content-disposition, date, expires, last-modified, pragma, server, set-cookie, set-cookie, set-cookie, status, strict-transport-security, x-access-level, x-connection-hash, x-content-type-options, x-frame-options, x-response-time, x-transaction, x-twitter-response-tags, x-xss-protection (500)

We should support the creation of direct messages with attachments and media, see https://developer.twitter.com/en/docs/direct-messages/message-attachments/guides/attaching-media
We need to support this endpoint: https://developer.twitter.com/en/docs/direct-messages/sending-and-receiving/api-reference/delete-message-event
I've only found out from [here](https://github.com/twitter/hbc/blob/master/README.md) that apparently Twitter retired some of the streaming api. 

More info can be found [here](https://twittercommunity.com/t/reminder-site-streams-user-streams-and-legacy-dm-endpoints-will-be-sunset-august-16th/109482).

I'd say let's use this issue to track what needs to be changed/removed.

[Here is a migration guide](https://developer.twitter.com/en/docs/accounts-and-users/subscribe-account-activity/migration/introduction).