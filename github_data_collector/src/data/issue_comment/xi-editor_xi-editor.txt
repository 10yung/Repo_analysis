# Xi-Editor Issue Template
- [x] I have searched existing issues and could not find my issue.
- [x] I have studied the documentation.

<!---
Please ensure the issue meets these requirements. If you are not sure, questions
are welcome on the #xi-editor channel on https://xi.zulipchat.com.
--->
## Details

OS: Fedora 31

```sh
$ rustc --version
rustc 1.39.0 (4560ea788 2019-11-04)
```
rustc installed via rustup
Not using frontend

```sh
user@host:~/xi-editor % cargo install --path rust
  Installing xi-core v0.3.0 (/home/user/xi-editor/rust)
    Updating git repository `https://github.com/kornelski/rust-onig`
    Updating crates.io index
warning: Patch `onig v5.0.0 (https://github.com/kornelski/rust-onig?branch=default-bindgen#c9f5b5be)` was not used in the crate graph.
Patch `onig_sys v69.2.0 (https://github.com/kornelski/rust-onig?branch=default-bindgen#c9f5b5be)` was not used in the crate graph.
Check that the patched package version and available features are compatible
with the dependency requirements. If the patch has a different version from
what is locked in the Cargo.lock file, run `cargo update` to use the new
version. This may also occur with an optional dependency that is not enabled.
   Compiling xi-core-lib v0.3.0 (/home/user/xi-editor/rust/core-lib)
error[E0308]: mismatched types
   --> core-lib/src/watcher.rs:101:29
    |
101 |         let inner = watcher(tx_event, Duration::from_millis(100)).expect("watcher should spawn");
    |                             ^^^^^^^^ expected struct `crossbeam_channel::channel::Sender`, found a different struct `crossbeam_channel::channel::Sender`
    |
    = note: expected type `crossbeam_channel::channel::Sender<std::result::Result<notify::Event, notify::Error>>`
               found type `crossbeam_channel::channel::Sender<_>`
note: Perhaps two different versions of crate `crossbeam_channel` are being used?
   --> core-lib/src/watcher.rs:101:29
    |
101 |         let inner = watcher(tx_event, Duration::from_millis(100)).expect("watcher should spawn");
    |                             ^^^^^^^^

error: aborting due to previous error

For more information about this error, try `rustc --explain E0308`.
error: failed to compile `xi-core v0.3.0 (/home/user/xi-editor/rust)`, intermediate artifacts can be found at `/home/user/xi-editor/rust/target`

Caused by:
  could not compile `xi-core-lib`.

To learn more, run the command again with --verbose.
```

## Expected vs Actual

Expected to build without failures, and install to `$CARGO_PATH`

Actual: build failure
Closes https://github.com/xi-editor/xi-editor/issues/922

## Review Checklist
<!---
Here is a list of the things everyone should make sure they do before they want their PR to be merged.
--->
- [ ] I have responded to reviews and made changes where appropriate.
- [x] I have tested the code with `cargo test --all` / `./rust/run_all_checks`.
- [ ] I have updated comments / documentation related to the changes I made.
- [x] I have rebased my PR branch onto xi-editor/master.

## Summary
This adds a new movement type: `BeginningOfLine` and `EndOfLine`. When a movement of either one of these types is performed, the caret is moved to the soft beginning/end of line, which is defined as the first/last offset where a non-whitespace character appears. If the caret is already on this position, the caret is then moved to the hard beginning/end of line.

## Review Checklist
- [ ] I have responded to reviews and made changes where appropriate.
- [x] I have tested the code with `cargo test --all` / `./rust/run_all_checks`.
- [x] I have updated comments / documentation related to the changes I made.
- [x] I have rebased my PR branch onto xi-editor/master.

So while trying to add the spellchecking plugin I've noticed that we don't really have a way to communicate what language to choose. Since `available_languages` talks about programming languages/syntaxes and not languages as in English/German and so on we can't really use that, I think (since syntax selection shouldn't clasg with language selection, you could totally want rust as syntax and still select English has language to correct comments).

@cmyr
It'd be nice if we were to translate strings such as error messages, otherwise frontends have to do that.

From what I can see there are two ways to go about this:

- [ ] Gettext, which would mean that we'd have to depend on a C lib. It's pretty advanced though and has _very_ good support by translation tools, such as Weblate (which I use for Tau).
- [ ] [Fluent.rs](https://crates.io/crates/fluent), which is being used by Firefox already (IIRC?) and is pure Rust. It's in its early days though and isn't well supported in translation tools yet.

We could also just ignore this and leave the translating to the frontends, e.g. in `alert` frontends can match the error code and send the localized message then.
# Xi-Editor Issue Template
- [x] I have searched existing issues and could not find my issue.
- [x] I have studied the documentation.

<!---
Please ensure the issue meets these requirements. If you are not sure, questions
are welcome on the #xi-editor channel on https://xi.zulipchat.com.
--->

## Expected vs Actual
Actually client can set only one extras dir.

In a discussion https://github.com/xi-frontend/xi-term/issues/110 it was mentioned to use XDG specification `XDG_DATA_DIRS` to place system-wide installed plugins, which is a collection of directories.

Can protocol be updated to allow client to set multiple directories for extras?
# Xi-Editor Issue Template
- [x] I have searched existing issues and could not find my issue.
- [x] I have studied the documentation.

## Details

Implement
```
move_subword_left
move_subword_left_and_modify_selection
move_subword_right
move_subword_right_and_modify_selection
```

which should recognize CamelCase and snake_case sub word boundaries and move accordingly.

## Examples
Character `|` denotes the cursor-position:

`|CamelCase` => `move_subword_right` => `Camel|Case` => `move_subword_right` => `CamelCase|`

`|snake_case` => `move_subword_right` => `snake|_case` => `move_subword_right` => `snake_case|`

`snake_case|` => `move_subword_left` => `snake_|case` => `move_subword_left` => `|snake_case`

Another difference between `move_word` and `move_subword` would be the selection of the separator:

`|asdf-asdf-asdf` => `move_word_right` => `asdf|-asdf-asdf` => `move_word_right` => `asdf-asdf|-asdf`

whereas

`|asdf-asdf-asdf` => `move_subword_right` => `asdf|-asdf-asdf` => `move_subword_right` => `asdf-|asdf-asdf` => `move_subword_right` => `asdf-asdf|-asdf`
Similar to #1198, we would like to be able to use editing functions independently of an `Editor` or a runloop.

For more detail, see #1187. For an illustration of how this could be done, see the [`edit_ops` mod in the `xi-modal` branch](https://github.com/cmyr/xi-editor/blob/xi-modal/rust/core-lib/src/editor.rs#L955). (Note that having this be in a submodule of editor.rs isn't desirable long term).

A goal of this work should be to make it much easier to write simple tests of various edit operations.
A user of the `xi-core` library should be able to use and modify selections without needing to use a `View`. 

The main challenge here is that we need to introduce some abstraction for representing the things that are currently provided by the view, such as navigation up and down by arrow keys, which depends on line breaks.

My inclination is to introduce a trait that describes this behaviour.

For more details see #1187; also a version of this exists in my `xi-modal` branch (used for the rust playground): [see here](https://github.com/cmyr/xi-editor/blob/xi-modal/rust/core-lib/src/view.rs#L64).

Gluon is a statically type inferred scripting language which is embeddable in Rust: 

https://github.com/gluon-lang/gluon

This is potential a superb language to write some expansions, imho