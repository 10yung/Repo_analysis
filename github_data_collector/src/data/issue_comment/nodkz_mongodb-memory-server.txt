â€¦ges to dependencies (#263)

<!--
## Make sure you have done these steps

- Make sure you read [Mastering-Markdown](https://guides.github.com/features/mastering-markdown/)
- remove the parts that are not applicable
- Please have "Allow edits from maintainers" activated
-->

## Related Issues
<!--Remove this part if not applicable-->

- #1

Since version 6.2.2, there is a typescript issue when we build:
```
/node_modules/@types/tmp/index"' has no default export.

3 import tmp from 'tmp';
         ~~~


Found 1 error.
```
*from #214*

i would suggest to replace all `this.debug` calls with some logging module, like `debug` or `loglevel`

---

Pros for loglevel:
- has many levels that are easy to access `logger.<level>`

Cons for loglevel:
- cant be activated via environment (needs to be activated with `setLogLevel`)
- cant be activated for one specific file

---

Pros for debug:
- can be activated via environment
- can be activated for only one file / can be filtered for one file

Cons for debug:
- needs to set a "new logger" in every file
- dosnt have any levels
Hi Everyone,

I just try to use Robo 3T to connect to the new instance of  MongoDB-memory-server though
the connection  string  
``` javascript 
var url= await mongoServer.getConnectionString() 
```  
and I got the following error:

``` 
Cannot connect to replica set "New Connection"[127.0.0.1:49447]. 
Set's primary is unreachable.

Reason:
SSL tunnel failure: Network is unreachable or SSL connection rejected by server. Reason: It is not possible to continue with empty set name

```
I am not sure how to overcome this problem?

thanks,

Jdang


*inspired by #204*

Proposing better handling of of URL / Version generation "errors" like:
- probe URL before trying to download (to check if requested version is existing, and report it so)
- allow the use of "USE_LATEST_IF_VERSION_NOT_AVAILABLE" (or something like this)  download latest version available when the requested one is not available (like requesting 4.0.3 for debian-buster, but "minimal version" is 4.2)

(more might be added)
(this enhancement is taken from a conversation at #254 with @firstnoises)

## Why?

when a user (like @firstnoises pointed out), uses the local system and lets say a docker system with a different distro, to be able to use the normal package (non global), and not having to re-download all the time
```
mongodb-memory-server: 6.1.1
node: v12.14.0
```

I started a docker container that runs node, and executed the following commands:
```ts
const MongodbMemoryServer = require('mongodb-memory-server').MongoMemoryServer;
const mongoServer = new MongodbMemoryServer();

(async () => {
  await mongoServer.getConnectionString();
  console.log('Done');
})();
```

`Done` is never printed, whereas outside docker this works fine
**BUG!**

I am not sure on which side is it, on  _mongodb-memory-server_, or the _mock-fs_, so I will be posting same issue on both sides.

I was using _mongodb-memory-server_ for most of my service testing. After a while, I needed to mock some files in order to test some file related functions. Then, as soon as I install _mock-fs_, don't even have to import _mock-fs_, all of the tests that use _mongodb-memory-server_ are not even ran. All of the crash right at the beginning.
When I remove _mock-fs_, _mongodb-memory-server_ runs fine.

I don't know if they are using same part of memory, since they are both in-memory modules, or what but they don't seem to work together.

Error log from mocha on the test that uses _mongodb-memory-server_, which is probably not much of help:
`Error: Timeout of 2000ms exceeded. For async tests and hooks, ensure "done()" is called; if returning a Promise, ensure it resolves. (/path/to/the/test/test.spec.js)`

This is where it happens:
```javascript
before(async () => {
    await dbHandler.connect(); // This one connects to mongodb-memory-server
  });
```

And also this shows up in the console while the tests are stuck on the code above:
`Downloading MongoDB 4.0.3: 0 % (0mb / 79.4mb)`

Versions:
`node: 10.15.2`,
`mocha: 6.2.2`,
`mock-fs: 4.10.4`,
`mongodb-memory-server: 6.0.2`
I'm not able to query on the mongodb in memory database using for test cases using jest  Create seems to work absolutely fine but any functions retrieving the data are not.
It could be possibly an error with data being created, please help out on the same 

Same issue i have opened on - [stackoverflow](https://stackoverflow.com/questions/58950443/not-able-to-fire-find-or-get-methods-over-mongodb-in-memory-database)

```ts
describe('#create', () => {
  it('should create a user without throwing an error', () => {
    userModuleObj.create(userData, (err, res) => { // this calls the mongoose create function
      expect(err).toBe(null);
    })
  })
})
```
The above code seems to work

```ts
describe('#retrieve', () => {
  it('should find a user without throwing an error', () => {
    userModuleObj.retrieve({}, (err, res) => { // calling the find function of mongodb
      expect(err).toBe(null);
    })
  })
})
```
i cant connect to mongodb for authenticating in node js

this is my config 

```ts
dbPassword = 'mongodb+srv://mohsenrahmi:'+ encodeURIComponent('1377418') + '@CLUSTER_NAME_HERE.mongodb.net/test?retryWrites=true';

module.exports = {
    mongoURI: dbPassword
};

//and this is connection
// DB Config
const db = require('./config/keys').mongoURI;
// Connect to MongoDB
mongoose
  .connect(
    db,
    { useNewUrlParser: true }
  )
  .then(() => console.log('MongoDB Connected'))
  .catch(err => console.log(err));
```
and this is error

```
Error: querySrv ENOTFOUND _mongodb._tcp.cluster_name_here.mongodb.net
    at QueryReqWrap.onresolve [as oncomplete] (dns.js:197:19)
  errno: 'ENOTFOUND',
  code: 'ENOTFOUND',
  syscall: 'querySrv',
  hostname: '_mongodb._tcp.cluster_name_here.mongodb.net' }
```