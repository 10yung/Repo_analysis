Unable to build libgo v2.8  with Boost 1.72.0
```
std::vector<std::string> xxx() {
    // libcurl get http://xxxx;
    std::string response;
    std::vector<std::string> list = string_split(response, "\n");
    return list;
}

void test() {
    static std::vector<std::string> list = xxx();
    或者
    static SQLite::Database db("xxx.db", SQLite::OPEN_READWRITE);
    // ...
}

for (;;)
    go test;
```

会导致 **libc++abi.dylib: __cxa_guard_acquire detected deadlock**
我看到hook中有使用了g_dns_mtx， 来保证同一线程下多个协程的dns查询顺序执行，但仍会出现异常。
这个g_dns_mtx 是使用的线程局部变量，会不会协程调度到其它线程后，无法保证安全？


(gdb) p ctx
$1 = (const struct resolv_context *) 0x7ffff600a150
(gdb) p *ctx
$2 = {resp = 0xd, conf = 0xd, __refcount = 0, __from_res = 119, __next = 0x6d6f632e75}
(gdb) bt
#0  __resolv_context_search_list (index=1, ctx=0x7ffff600a150) at ../resolv/resolv_context.h:103
#1  __GI___res_context_search (ctx=ctx@entry=0x7ffff600a150, name=name@entry=0x7ffff600a0a8 "www.baidu.com", class=class@entry=1, type=type@entry=1, answer=answer@entry=0x7ffff611c410 "<P\201\003", 
    anslen=anslen@entry=1024, answerp=0x7ffff611c860, answerp2=answerp2@entry=0x0, nanswerp2=nanswerp2@entry=0x0, resplen2=resplen2@entry=0x0, answerp2_malloced=answerp2_malloced@entry=0x0) at res_query.c:396
#2  0x00007ffff25fb188 in gethostbyname3_context (ctx=ctx@entry=0x7ffff600a150, name=name@entry=0x7ffff600a0a8 "www.baidu.com", af=af@entry=2, result=result@entry=0x7ffff611cf20, 
    buffer=buffer@entry=0x7ffff611cf40 "\n\225\200\061", buflen=buflen@entry=8192, errnop=errnop@entry=0x7ffff7fed690, h_errnop=h_errnop@entry=0x7ffff611cee0, ttlp=ttlp@entry=0x0, canonp=canonp@entry=0x0)
    at nss_dns/dns-host.c:217
#3  0x00007ffff25fbbda in _nss_dns_gethostbyname_r (name=0x7ffff600a0a8 "www.baidu.com", result=0x7ffff611cf20, buffer=0x7ffff611cf40 "\n\225\200\061", buflen=8192, errnop=0x7ffff7fed690, 
    h_errnop=0x7ffff611cee0) at nss_dns/dns-host.c:303
#4  0x00007ffff66442df in __gethostbyname_r (name=0x7ffff600a0a8 "www.baidu.com", resbuf=0x7ffff611cf20, buffer=0x7ffff611cf40 "\n\225\200\061", buflen=8192, result=0x7ffff611cf00, h_errnop=0x7ffff611cee0)
    at ../nss/getXXbyYY_r.c:316
#5  0x00000000004f790e in gethostbyname_r (name=0x7ffff600a0a8 "www.baidu.com", __result_buf=0x7ffff611cf20, __buf=0x7ffff611cf40 "\n\225\200\061", __buflen=8192, __result=0x7ffff611cf00, 
    __h_errnop=0x7ffff611cee0) at /git/libgo/libgo/netio/unix/hook.cpp:547

我这边有个网络服务器器的项目，是基于asio实现，动态链接了libgo之后(**tcmalloc与libgo只能2选一**)，程序启动之后就卡死在futex。系统是centos7.4，gcc5.4，以下是我的CMAKE编译选项：
set (CMAKE_CXX_FLAGS "-D__STDC_FORMAT_MACROS -std=gnu++14 -g -rdynamic -Werror -fPIC -Wformat=0 -Wno-literal-suffix -Wno-write-strings -fsigned-char -fshort-wchar -D__LINUX");
target_link_libraries(gw_server libgo dl rt iconv ssl crypto snappy pthread tcmalloc)
修复vs2019编译失败问题：结构体内部定义函数不需要再加结构体名
如题 我想要移植到树莓派 之类的单板
打开自动生成的vs_proj，编译sample11_connection_pool.t 。有谁遇到过，求教怎么解决的？



2>Building Custom Rule F:/TradeSentry/Test/libgo-master/tutorial/CMakeLists.txt
2>CMake does not need to re-run because F:/TradeSentry/Test/libgo-master/vs_proj/vs2017/x64/tutorial/CMakeFiles/generate.stamp is up-to-date.
2>sample11_connection_pool.cpp
2>f:\tradesentry\test\libgo-master\libgo\common\util.h(28): error C2061: 语法错误: 标识符“RefObject”
2>f:\tradesentry\test\libgo-master\libgo\common\util.h(35): error C2061: 语法错误: 标识符“RefObject”
2>f:\tradesentry\test\libgo-master\libgo\common\util.h(61): error C2064: 项不会计算为接受 1 个参数的函数
2>f:\tradesentry\test\libgo-master\libgo\common\util.h(61): note: 类不会将“operator()”或用户定义的转换运算符定义到指向函数的指针或指向函数的引用(它们接受适当数量的参数)
2>f:\tradesentry\test\libgo-master\libgo\common\util.h(135): error C2511: “void co::Deleter::operator ()(co::RefObject *)”:“co::Deleter”中没有找到重载的成员函数
2>f:\tradesentry\test\libgo-master\libgo\common\util.h(26): note: 参见“co::Deleter”的声明
2>f:\tradesentry\test\libgo-master\libgo\common\util.h(136): error C2597: 对非静态成员“co::Deleter::func_”的非法引用
2>f:\tradesentry\test\libgo-master\libgo\common\util.h(137): error C2597: 对非静态成员“co::Deleter::func_”的非法引用
2>f:\tradesentry\test\libgo-master\libgo\common\util.h(137): error C2597: 对非静态成员“co::Deleter::arg_”的非法引用
2>f:\tradesentry\test\libgo-master\libgo\common\util.h(137): error C2065: “func_”: 未声明的标识符
2>f:\tradesentry\test\libgo-master\libgo\common\util.h(147): error C2061: 语法错误: 标识符“T”
2>f:\tradesentry\test\libgo-master\libgo\common\util.h(147): error C2535: “co::IncursivePtr::IncursivePtr(void)”: 已经定义或声明成员函数
2>f:\tradesentry\test\libgo-master\libgo\common\util.h(146): note: 参见“co::IncursivePtr::IncursivePtr”的声明
2>f:\tradesentry\test\libgo-master\libgo\common\util.h(175): error C2143: 语法错误: 缺少“;”(在“&”的前面)
2>f:\tradesentry\test\libgo-master\libgo\common\util.h(175): error C4430: 缺少类型说明符 - 假定为 int。注意: C++ 不支持默认 int
2>f:\tradesentry\test\libgo-master\libgo\common\util.h(175): error C2334: “{”的前面有意外标记；跳过明显的函数体
2>f:\tradesentry\test\libgo-master\libgo\common\util.h(176): error C2143: 语法错误: 缺少“;”(在“*”的前面)
2>f:\tradesentry\test\libgo-master\libgo\common\util.h(176): error C4430: 缺少类型说明符 - 假定为 int。注意: C++ 不支持默认 int
2>f:\tradesentry\test\libgo-master\libgo\common\util.h(176): error C2334: “{”的前面有意外标记；跳过明显的函数体
2>f:\tradesentry\test\libgo-master\libgo\common\util.h(178): error C2143: 语法错误: 缺少“;”(在“*”的前面)
2>f:\tradesentry\test\libgo-master\libgo\common\util.h(178): error C4430: 缺少类型说明符 - 假定为 int。注意: C++ 不支持默认 int
2>f:\tradesentry\test\libgo-master\libgo\common\util.h(178): error C2334: “{”的前面有意外标记；跳过明显的函数体
2>f:\tradesentry\test\libgo-master\libgo\common\util.h(210): error C2143: 语法错误: 缺少“;”(在“*”的前面)
2>f:\tradesentry\test\libgo-master\libgo\common\util.h(210): error C4430: 缺少类型说明符 - 假定为 int。注意: C++ 不支持默认 int
2>f:\tradesentry\test\libgo-master\libgo\common\util.h(210): error C2238: 意外的标记位于“;”之前
2>f:\tradesentry\test\libgo-master\libgo\common\util.h(146): error C2614: “co::IncursivePtr”: 非法的成员初始化:“ptr_”不是基或成员
2>f:\tradesentry\test\libgo-master\libgo\common\util.h(147): error C2065: “ptr”: 未声明的标识符
2>f:\tradesentry\test\libgo-master\libgo\common\util.h(147): error C2614: “co::IncursivePtr”: 非法的成员初始化:“ptr_”不是基或成员
2>f:\tradesentry\test\libgo-master\libgo\common\util.h(148): error C2065: “ptr_”: 未声明的标识符
2>f:\tradesentry\test\libgo-master\libgo\common\util.h(151): error C2065: “ptr_”: 未声明的标识符
2>f:\tradesentry\test\libgo-master\libgo\common\util.h(154): error C2039: “ptr_”: 不是“co::IncursivePtr”的成员
2>f:\tradesentry\test\libgo-master\libgo\common\util.h(143): note: 参见“co::IncursivePtr”的声明
2>f:\tradesentry\test\libgo-master\libgo\common\util.h(154): error C2614: “co::IncursivePtr”: 非法的成员初始化:“ptr_”不是基或成员
2>f:\tradesentry\test\libgo-master\libgo\common\util.h(155): error C2065: “ptr_”: 未声明的标识符
2>f:\tradesentry\test\libgo-master\libgo\common\util.h(158): error C2065: “ptr_”: 未声明的标识符
2>f:\tradesentry\test\libgo-master\libgo\common\util.h(158): error C2039: “ptr_”: 不是“co::IncursivePtr”的成员
2>f:\tradesentry\test\libgo-master\libgo\common\util.h(143): note: 参见“co::IncursivePtr”的声明
2>f:\tradesentry\test\libgo-master\libgo\common\util.h(159): error C2039: “ptr_”: 不是“co::IncursivePtr”的成员
2>f:\tradesentry\test\libgo-master\libgo\common\util.h(143): note: 参见“co::IncursivePtr”的声明
2>f:\tradesentry\test\libgo-master\libgo\common\util.h(164): error C2065: “ptr_”: 未声明的标识符
2>f:\tradesentry\test\libgo-master\libgo\common\util.h(164): error C2039: “ptr_”: 不是“co::IncursivePtr”的成员
2>f:\tradesentry\test\libgo-master\libgo\common\util.h(143): note: 参见“co::IncursivePtr”的声明
2>f:\tradesentry\test\libgo-master\libgo\common\util.h(165): error C2065: “ptr_”: 未声明的标识符
2>f:\tradesentry\test\libgo-master\libgo\common\util.h(171): error C2065: “ptr_”: 未声明的标识符
2>f:\tradesentry\test\libgo-master\libgo\common\util.h(171): error C2039: “ptr_”: 不是“co::IncursivePtr”的成员
2>f:\tradesentry\test\libgo-master\libgo\common\util.h(143): note: 参见“co::IncursivePtr”的声明
2>f:\tradesentry\test\libgo-master\libgo\common\util.h(177): error C2065: “ptr_”: 未声明的标识符
2>f:\tradesentry\test\libgo-master\libgo\common\util.h(181): error C2065: “ptr_”: 未声明的标识符
2>f:\tradesentry\test\libgo-master\libgo\common\util.h(182): error C2065: “ptr_”: 未声明的标识符
2>f:\tradesentry\test\libgo-master\libgo\common\util.h(183): error C2065: “ptr_”: 未声明的标识符
2>f:\tradesentry\test\libgo-master\libgo\common\util.h(188): error C2065: “ptr_”: 未声明的标识符
2>f:\tradesentry\test\libgo-master\libgo\common\util.h(196): error C2065: “ptr_”: 未声明的标识符
2>f:\tradesentry\test\libgo-master\libgo\common\util.h(196): error C2039: “ptr_”: 不是“co::IncursivePtr”的成员
2>f:\tradesentry\test\libgo-master\libgo\common\util.h(143): note: 参见“co::IncursivePtr”的声明
2>f:\tradesentry\test\libgo-master\libgo\common\util.h(200): error C2039: “ptr_”: 不是“co::IncursivePtr”的成员
2>f:\tradesentry\test\libgo-master\libgo\common\util.h(143): note: 参见“co::IncursivePtr”的声明
2>f:\tradesentry\test\libgo-master\libgo\common\util.h(203): error C2039: “ptr_”: 不是“co::IncursivePtr”的成员
2>f:\tradesentry\test\libgo-master\libgo\common\util.h(143): note: 参见“co::IncursivePtr”的声明
2>f:\tradesentry\test\libgo-master\libgo\common\util.h(206): error C2039: “ptr_”: 不是“co::IncursivePtr”的成员
2>f:\tradesentry\test\libgo-master\libgo\common\util.h(143): note: 参见“co::IncursivePtr”的声明
2>f:\tradesentry\test\libgo-master\libgo\common\util.h(216): error C2143: 语法错误: 缺少“;”(在“*”的前面)
2>f:\tradesentry\test\libgo-master\libgo\common\util.h(216): error C4430: 缺少类型说明符 - 假定为 int。注意: C++ 不支持默认 int
2>f:\tradesentry\test\libgo-master\libgo\common\util.h(216): error C2238: 意外的标记位于“;”之前
2>f:\tradesentry\test\libgo-master\libgo\common\util.h(219): error C2061: 语法错误: 标识符“T”
2>f:\tradesentry\test\libgo-master\libgo\common\util.h(219): error C2065: “ptr”: 未声明的标识符
2>f:\tradesentry\test\libgo-master\libgo\common\util.h(219): error C2614: “co::AutoRelease”: 非法的成员初始化:“ptr_”不是基或成员
2>f:\tradesentry\test\libgo-master\libgo\common\util.h(222): error C2065: “ptr_”: 未声明的标识符
2>f:\tradesentry\test\libgo-master\libgo\common\util.h(226): error C2065: “ptr_”: 未声明的标识符
2>f:\tradesentry\test\libgo-master\libgo\common\util.h(239): error C2143: 语法错误: 缺少“)”(在“<”的前面)
2>f:\tradesentry\test\libgo-master\libgo\common\util.h(319): note: 参见对正在编译的 类 模板 实例化 "co::WeakPtr<T>" 的引用
2>f:\tradesentry\test\libgo-master\libgo\common\util.h(239): error C2143: 语法错误: 缺少“;”(在“<”的前面)
2>f:\tradesentry\test\libgo-master\libgo\common\util.h(239): error C2059: 语法错误:“<”
2>f:\tradesentry\test\libgo-master\libgo\common\util.h(239): error C2059: 语法错误:“)”
2>f:\tradesentry\test\libgo-master\libgo\common\util.h(239): error C2334: “:”的前面有意外标记；跳过明显的函数体
2>f:\tradesentry\test\libgo-master\libgo\common\util.h(6): fatal error C1075: “{”: 未找到匹配令牌  


