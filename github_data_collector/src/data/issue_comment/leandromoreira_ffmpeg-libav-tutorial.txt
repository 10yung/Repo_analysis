Hello,

Thanks for the tutorial.
I would like to decode frame buffer encoded in MPEG2-TS. (H.264/AAC data)
This buffer is received from socket. And I would like to get an transform it as an RGB buffer.
How to achieve this with avformat ?

```
void FrameDecoder::onFrameReceived(const QByteArray &frame) {
    qDebug() << "Ready to decode the frame " << frame;
   
}
```
Thanks for help.

Hello Leandro,

Thanks so much for this repository! This account and your LinkedIn feed has contributed immensely for most of my knowledge about Video processing. 

So as I understand this tutorial was born out of the fact that the other [http://dranger.com/ffmpeg/](url) site was deprecated. And since that tutorial ends with an explanation about the Video playback aspects involving a coarser version of ffplay utilizing libav and SDL, do you intend to add the same to this tutorial?

It will be really helpful to understand the Video player end of the processing pipeline. It will also help us how to leverage the ffmpeg libraries to build a custom player on similar lines as ffplay, mplayer etc.

Thanks again,
Sanmathi
Hi dear @leandromoreira,
Thanks for your great documentation about ffmpeg.
I get stuck a problem with this library and I can't take it over.
I'm developing an application by c++ and ffmpeg library to capture ip camera frames, clearly the protocol name is RTSP.
everything is going well when the resolution of cameras is low but when I change it to higher resolution, the memory consumption goes up suddenly.
So I need your help solve it.
1.is there any way to reduce the framerate or fps when I read the cameras frame? I need only the last frame at the time of reading and the previous frames don't matter.
2.is it possible to reduce the frame's width and height before calling `av_read_frame` ? I mean that I set a parameter in AVFormatContext or AVCodecContext  by which ffmpeg read the frame with the specific size. for example 400x400

I will be very very thankful if you help me. 
Hi, I noticed this line of code in README.md
```c
printf("\tCodec %s ID %d bit_rate %lld", pLocalCodec->long_name, pLocalCodec->id, pCodecParameters->bit_rate);
```
in which `pLocalCodec` is not declared _in the article_ before used which might cause confusion in my view. Digging into the c code, I found this line.

https://github.com/leandromoreira/ffmpeg-libav-tutorial/blob/cdd616ce871078ebb67601af207f10a299914e19/0_hello_world.c#L110

As for a guess, maybe the author firstly write the c code and copy-and-paste these important parts into README and lead to this issue. By the way, I think adding `\n` afterward `printf`s could make output looks better. Hope that useful.

**UPDATE**
This line of code has the same problem:
```c
AVCodecContext *pCodecContext = avcodec_alloc_context3(pCodec);
```
Maybe it will be better to replace `pCodec` with `pLocalCodec`.
Hi,

First I would like to thank you for the initiative. I have few suggestoin for your project:

1. Add a section for FFMpeg compilation and/or links for Windows/Linux. For instance, add links to Zeranoe builds. Explain the limitation of codec/mux and licenses issues, the interest of the non-free flag for compilation.
2. A small guide/links explaining how to compile ffmpeg with specific options, how to add/remove a codec from a build.
3. Differenciate version of FFMpeg. There are many API changes, maintaining multiple version of the sample code can be great.
4. Add a small tutorial for synching audio & video when there is no constant FPS input (I already have some stuff for this one).

I can participate to some of these points. Let me know if you are interested by a contribution!

BR
Is it possible to have as output of the program a colorful frames, not gray images and how to do it ?
Hello, I'm using Ubuntu 18.04, did a clean install in a virtual machine. I downloaded libvpx from sources, compiled and installed without any problems.
Then I downloaded ffmpeg source (from git, from git clone https://git.ffmpeg.org/ffmpeg.git ffmpeg), and compiled it (passing --enable-libvpx to it), make compiled without any issues, and did a make install.

When I try to make the 0_hello_world.c, make gives me the following error:
(you can check the output with a better looking text at https://pastebin.com/wPKY99ue )

mkdir build
gcc -g -Wall -o build/hello_world -lavformat -lavcodec -lswscale -lavutil -lz 0_hello_world.c \
  && ./build/hello_world small_bunny_1080p_60fps.mp4`
0_hello_world.c: In function ‘main’:
0_hello_world.c:35:3: warning: ‘av_register_all’ is deprecated [-Wdeprecated-declarations]
   av_register_all();
   ^~~~~~~~~~~~~~~
In file included from 0_hello_world.c:15:0:
/usr/local/include/libavformat/avformat.h:2033:6: note: declared here
 void av_register_all(void);
      ^~~~~~~~~~~~~~~
/tmp/ccbsfyh8.o: In function 'av_make_error_string':
/usr/local/include/libavutil/error.h:111: undefined reference to 'av_strerror'
/tmp/ccbsfyh8.o: In function 'main':
/home/xultz/libav/ffmpeg-libav-tutorial/0_hello_world.c:35: undefined reference to 'av_register_all'
/home/xultz/libav/ffmpeg-libav-tutorial/0_hello_world.c:40: undefined reference to 'avformat_alloc_context'
/home/xultz/libav/ffmpeg-libav-tutorial/0_hello_world.c:54: undefined reference to 'avformat_open_input'
/home/xultz/libav/ffmpeg-libav-tutorial/0_hello_world.c:73: undefined reference to 'avformat_find_stream_info'
/home/xultz/libav/ffmpeg-libav-tutorial/0_hello_world.c:103: undefined reference to 'avcodec_find_decoder'
/home/xultz/libav/ffmpeg-libav-tutorial/0_hello_world.c:125: undefined reference to 'avcodec_alloc_context3'
/home/xultz/libav/ffmpeg-libav-tutorial/0_hello_world.c:134: undefined reference to 'avcodec_parameters_to_context'
/home/xultz/libav/ffmpeg-libav-tutorial/0_hello_world.c:142: undefined reference to 'avcodec_open2'
/home/xultz/libav/ffmpeg-libav-tutorial/0_hello_world.c:149: undefined reference to 'av_frame_alloc'
/home/xultz/libav/ffmpeg-libav-tutorial/0_hello_world.c:156: undefined reference to 'av_packet_alloc'
/home/xultz/libav/ffmpeg-libav-tutorial/0_hello_world.c:180: undefined reference to 'av_packet_unref'
/home/xultz/libav/ffmpeg-libav-tutorial/0_hello_world.c:168: undefined reference to 'av_read_frame'
/home/xultz/libav/ffmpeg-libav-tutorial/0_hello_world.c:185: undefined reference to 'avformat_close_input'
/home/xultz/libav/ffmpeg-libav-tutorial/0_hello_world.c:186: undefined reference to 'avformat_free_context'
/home/xultz/libav/ffmpeg-libav-tutorial/0_hello_world.c:187: undefined reference to 'av_packet_free'
/home/xultz/libav/ffmpeg-libav-tutorial/0_hello_world.c:188: undefined reference to 'av_frame_free'
/home/xultz/libav/ffmpeg-libav-tutorial/0_hello_world.c:189: undefined reference to 'avcodec_free_context'
/tmp/ccbsfyh8.o: In function 'decode_packet':
/home/xultz/libav/ffmpeg-libav-tutorial/0_hello_world.c:207: undefined reference to 'avcodec_send_packet'
/home/xultz/libav/ffmpeg-libav-tutorial/0_hello_world.c:218: undefined reference to 'avcodec_receive_frame'
/home/xultz/libav/ffmpeg-libav-tutorial/0_hello_world.c:230: undefined reference to 'av_get_picture_type_char'
/home/xultz/libav/ffmpeg-libav-tutorial/0_hello_world.c:242: undefined reference to 'av_frame_unref'
collect2: error: ld returned 1 exit status
Makefile:4: recipe for target 'hello_world' failed
make: *** [hello_world] Error 1

I took a look at pkg-config outputs from --libs and --cflags for some libs (lib libavformat, libavutil, etc) and I changed the gcc line on the Makefile to the following, but I couldn't see any changes on the make output:
`gcc -g -Wall -I/usr/local/include -o build/hello_world -L/usr/local/lib -lavformat -lavcodec -lswscale -lavutil -lz -lvpx -lm -lswresample -pthread 0_hello_world.c`

What else can I do in order to compile the code?

Thank you in advance for any help!

While not relevant to explain concepts, I think correctness should still be thought about.
In the [Transmuxing section](https://github.com/leandromoreira/ffmpeg-libav-tutorial/blob/master/README.md#transmuxing) the image depicts h264 + aac in a WEBM file. In reality this does not work as WEBM only supports VP8/VP9 and Vorbis/Opus. A container that can also mux H264 and AAC that is not MP4 would be MKV, which is also widely adopted. 
I use centos7. I use yum installed the following pakages:

 >sudo yum install ffmpeg.x86_64 ffmpeg-debuginfo.x86_64 ffmpeg-devel.x86_64 ffmpeg-libs.x86_64

and I can run ffmpeg.
But when I make your 0_helllo_word.c, show me the following error:

> gcc -g -Wall -o build/hello_world -lavformat -lavcodec -lswscale -lz 0_hello_world.c \
>   && ./build/hello_world small_bunny_1080p_60fps.mp4
> 0_hello_world.c:14:32: fatal error: libavcodec/avcodec.h: No such file or directory

So what environment do I need prepare before I run your make? 