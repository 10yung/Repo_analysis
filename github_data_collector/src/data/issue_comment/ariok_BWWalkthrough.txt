Added walkthroughDidScroll method to BWWalkthroughViewControllerDelegate.
This brings the minimum version down from 9.0 to 8.0 to enable installation in projects that still support iOS 8. I also improved the `.gitignore` file since I saw a `.DS_Store` file there while committing. Shouldn't happen. :)
It would be very helpful if Swift Package Manager was supported by including a Package.swift file.

If approved and merged, please do the same: https://github.com/ariok/BWWalkthrough/pull/127 since it enhances the readme file by providing a clear explanation about how to consume the library via Swift Package Manager.
I want to hide the `pageControl` in 4th page.
So I did like this
```
    func walkthroughPageDidChange(_ pageNumber: Int) {
        if pageNumber == 3 {
            DispatchQueue.main.async {
                self.pageControl?.isHidden = true
            }
        } else {
            DispatchQueue.main.async {
                self.pageControl?.isHidden = false
            }
        }
    }
```
`self.pageControl?.isHidden = true` is called but `self.pageControl` is always nil and not being hidden.

How can I hide the `pageControl` ?

Thank you in advance :)
This PR contains a fix for an issue I discovered that occurs when instead of presenting a BWWalkthroughViewController - pushing with a UINavigationController. 
The way the code is structured, you simply can't use the library without storyboard as the `init` is not public.

I made it public and created a helper method to setup the `scrollView` as it was.
While trying to implement the cocoa pod, BWWalkthrough, into my current project programmatically, I ran into a problem with the init functions/inheritance.

I tried to subclass BWWalkThroughViewController in my own class GetStartedViewController where I define buttons and pagecontrollers.

Here is the code from BWWalkThroughViewController which is a subclass of UIViewController:

```
class BWWalkThroughViewController: UIViewController {
    required public init?(coder aDecoder: NSCoder) {
        // Setup the scrollview
        scrollview.showsHorizontalScrollIndicator = false
        scrollview.showsVerticalScrollIndicator = false
        scrollview.isPagingEnabled = true
        super.init(coder: aDecoder)
    }

    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
    }
}

```
But when I try and subclass BWWalkthroughViewController in my own class I get errors saying "Ambiguous reference to member 'init(coder:)'" when calling super.init(nibName, bundle) and another error (Initializer does not override a designated initializer from its superclass) when I try to override the init(nibname, bundle):

```
import BWWalkthrough

class GetStartedViewController: BWWalkthroughViewController  {

required public init?(coder aDecoder: NSCoder) {
    fatalError("init(coder:) has not been implemented")
}

public init(){
    super.init(nibName: nil, bundle: nil) <== ERROR (Ambiguous reference to member 'init(coder:)')
}

override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) <== ERROR (Initializer does not override a designated initializer from its superclass) {
    super.init(nibName: nil, bundle: nil) <== ERROR (Ambiguous reference to member 'init(coder:)')
}
}
```
I've tried different variations of containing just the public init or just the override init and not both, so I included both to show the error.

Even when I use autocomplete to call super.init, all that shows up is the function with parameters of nscoder rather than with nibName and bundle.

Can someone please help me understand why this error is happening and how to fix it? I don't understand why I can't call super.init(nibName, bundle) or override the function. 

Also, if anyone else has experience implementing BWWalkthrough programmatically and/or subclassing BWWalkthroughViewController without this init bug, any help would be appreciated :) 
Previously all child view controller had `viewWillAppear` called as soon as the walkthrough page appeared.

This commit fixes this by disabling the automatic forwarding of appearance information to all child views, and instead handles it manually both for the programatic case (calling `gotoPage`) and for the manual case where the scrolls the scroll view.

Both appearance and disappearance are forwarded correctly in my testing and there were no run-time issues of unbalanced appearance calls.