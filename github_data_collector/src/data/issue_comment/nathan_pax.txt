When I try to use `-e` option for bundling ES modules I get this:

```
index.js:59 Uncaught SyntaxError: Unexpected token '{'
```

This happens because Pax puts some stuff before `import` statements so JavaScript gets confused.

The command I launch is:

```sh
px -e app.js --watch  dist/index.js
```

my app consists of this:

```js
import { html, render } from 'https://unpkg.com/htm/preact/standalone.module.js'
import { useState } from 'https://unpkg.com/preact@latest/hooks/dist/hooks.module.js?module'

const getBalance = () => 300

const App = () => {
  const [balance] = useState(getBalance())

  return html`
    <h1>${balance}</h1>
  `
}
render(
  html`
    <${App} />
  `,
  document.getElementById('app')
)
```

here's my `index.html`:

```html
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <meta http-equiv="X-UA-Compatible" content="ie=edge" />
    <title>MoneyTarget</title>
  </head>

  <body>
    <div id="app"></div>
    <script src="./index.js" type="module"></script>
  </body>
</html>
```

My directory structure:

```
.
├── app.js
├── dist
│  ├── index.html
│  ├── index.js
│  └── index.js.map
├── index.html
└── package.json
```

**dist/index.js**: https://termbin.com/c1zd

In my file I import `svg.draggable`. This module is just a function which modifies its argument. It seems that it executes itself immediately. In order to do that, it requires the `svg.js` lib to be loaded first. `svg.draggable` then calls its main function and passes an object exported from `svg.js` in the argument. It works when I bundle it using **webpack** but when I use **pax** i get an errror:

```
Uncaught ReferenceError: SVG is not defined
```

`SVG` is the argument I've mentioned.

 I've bundled it with `px -E index.js output.js` and inspected the generated code. I don't know if that's the cause of the error but it turns out the `svg.draggable` code appears first in the bundle. It also doesn't receive `SVG` as an argument.

Here are my files.

`index.js`
```
import { SVG } from '@svgdotjs/svg.js'
import '@svgdotjs/svg.draggable.js'

const draw = SVG().addTo('body').size(300, 300)
const rect = draw.rect(100, 100).attr({
    fill: '#f06'
})
rect.draggable()
```

`package.json`
```
{
  ... default stuff ...
  "dependencies": {
    "@svgdotjs/svg.js": "^3.0.16",
    "@svgdotjs/svg.draggable.js": "^3.0.2"
  }
}
```

EDIT - fixed commas in `package.json`
When both main and browser are specified in package.json, browser is not correctly resolved when main is a relative path.

I think this may also fix the issue in https://github.com/nathan/pax/issues/78

Paired with @chromy 
I love the idea of pax, but having trouble running it on a project that uses poylmer.
```
~/.cargo/bin/px -E src/awningtracker-app.js output.js
px: expected module name (string literal) or bindings at /usr/home/randy/go/src/github.com/rwestlund/awningtracker/node_modules/@polymer/polymer/lib/elements/dom-module.js:86,16-17 
```
Polymer's DomModule class has a method named `import`, which pax is trying to interpret as a module import:
https://github.com/Polymer/polymer/blob/bffe1793dc2125694526d70dd39898efd7ef4d14/lib/elements/dom-module.js#L86

Is there a way to work around this?  Maybe pax could differentiate between `import `/`import{` and `import(`?

Edit: forgot to say, pax v0.4.0.
Not sure if it was reported here. Consider this scenario:

```
#!/bin/bash

echo 'console.log(require("./foo.js"))' > bar.js
echo 'module.exports = "1";' > foo.js
px --watch bar.js out.js &
sleep 5;
rm foo.js
echo '; //' >> bar.js
sleep 5;
echo 'module.exports = "2";' > foo.js
sleep 5;
node out.js
```

Here I expect node to print "2", but it looks like the bundle just stops receiving updates after the first failure.

I am using pax v0.4.0.
Hi, the recently added `--for-browser` flag doesn't seem to work. I am using pax built from git master.

I am trying to the use [portable-fetch](https://github.com/Knotis/portable-fetch) package.

I believe that the problem is because that the value for the `"browser"` field in portable-fetch's package.json file is a string (rather than an object):

<https://github.com/Knotis/portable-fetch/blob/master/package.json#L5>

So it seems that it is ignoring the `"browser"` field and falling back to `"main"`.
See https://github.com/rollup/rollup/wiki/pkg.module
Some libraries rely on global variables such as `process.env.NODE_ENV` and slow bundlers solve it differently:

```js

var webpack = require('webpack')

module.exports = {
  // ...
  plugins: [
    // ...
    new webpack.DefinePlugin({
      'process.env': {
        NODE_ENV: 'foo'
      }
    })
  ]
}

const replace = require('rollup-plugin-replace')

rollup({
  // ...
  plugins: [
    replace({
      'process.env.NODE_ENV': 'foo'
    })
  ]
}).then(...)
```
or

```bash
NODE_ENV=foo browserify -g envify -e main.js | uglifyjs -c -m > build.js
```

How to do it with `Pax`?
It'd be really useful to extract this into a library, so other projects which could benefit from JS bundling could use it.

I gave this a try, but the amount of code that may need changing was a little to much to go in blindly at.

The primary issue is that the bundling logic and CLI are so tightly connected, primarily in error handling. If we can abstract this out (possibly migrating to something like [`clap`](https://clap.rs/) whilst we're at it?), then it'll help with reuse a lot!
I have been trying to integrate pax with [bazel](https://bazel.build/) and first experiments look really promising - only issue I ran into, if you have files generated by bazel (e.g. a vue/ts/jsx transformed file), bazel puts this into different directory root, so a relative import statement of `import a from './lib/a';` would not be found at that path, but it might be at `./bazel-out/k8s-fastbuild/lib/a.js` or similar. I wounder if it would be possible to add a flag without too much difficult, e.g. `--search-paths /path/to/dir` and then in addition to where pax would look originally for a file, it will also look for it in the specified paths, if not found. So for the above import statement, it might also look for it also at `/path/to/dir/lib/a.js`. Does that make sense?