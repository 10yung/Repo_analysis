when I run `make play` at directory root this error appears:

```Error resolving plugin [id: 'com.github.jlouns.cpe', version: '0.1.0']
> Could not GET 'https://plugins.gradle.org/api/gradle/2.3/plugin/use/com.github.jlouns.cpe/0.1.0'.
   > peer not authenticated

* Try:
Run with --stacktrace option to get the stack trace. Run with --info or --debug option to get more log output.```

how can I fix this? thanks in advance.
I have read the demo of  todo app's demo: todo-app-using-djinni-and-sqlite.
It's great.
And I have a question:
If the app need store many big files like photos. How should i to manage the photo files .Use sqlite to store them  i think is will be slow in storage and read.
Should i need import another c++ file manage lib to manage big files .So android and ios could use it both?
Thanks a lot!

â€¦3.1 and Android Studio 2.3.1.
The changes to the IML files were done automatically.
So at my company we've developed at shared c++ library for our mobile apps and we modeled our projects after this libmx3 example and similar projects, but wanted to ask about how you guys set up the repos. Do you have the android and ios project repos as submodules of the repo containing the c++ code, or is there a good way to keep them separate but easily updatable? If they're submodules or folders in the main repo holding the c++ code as well, then do the mobile devs need to work in the main c++ repo? I tried to do a little research on this and it seems like it's best to keep the repos next to each other, but it seems more natural to have the c++ library stuff as a submodule of the mobile projects, however that doesn't seem possible with this current setup. Any thoughts or advice you can share?
Thanks!

Currently i am trying to develop crossplatform mobile library with visual studio 2015.
I am investigating your sources.
My question is that following function makes shared_ptr map and creates CppProxy of java from jni,
But why do you make it WeakReference. what happen you just do jniEnv->NewObject alone?
Android Java new does not work as WeakReference? 
It is rather Java question than jni.

/_static_/ jobject JniCppProxyCache::get(const std::shared_ptr<void> & cppObj,
                                         JNIEnv \* jniEnv,
                                         const CppProxyClassInfo & proxyClass,
                                         jobject (*factory)(const std::shared_ptr<void> &,
                                                            JNIEnv *,
                                                            const CppProxyClassInfo &)) 
{
    CppProxyCacheState & st = CppProxyCacheState::get();
    const std::lock_guardstd::mutex lock(st.mtx);

```
auto it = st.m.find(cppObj.get());
if (it != st.m.end()) 
{
    // It's in the map. See if the WeakReference still points to an object.
    if (jobject javaObj = it->second.get(jniEnv)) 
    {
        return javaObj;
    } 
    else 
    {
        // The WeakReference is expired, so prune it from the map eagerly.
        st.m.erase(it);
    }
}

jobject wrapper = factory(cppObj, jniEnv, proxyClass);

/* Make a Java WeakRef object */
st.m.emplace(cppObj.get(), JavaWeakRef(jniEnv, wrapper));

return wrapper;
```

}

Api constructor run twice if i invoke post of thread in hanle class.I don't know why!can you tell me?i really need your help.

So the more I've become familiar with the example the only way I've seen that the C++ code talks back to the native code is with callbacks. Is there another way to talk from the C++ side of the code to the native side? Or do you just have to use the callback pattern that is being used to go from C++ to native?

I'm getting a runtime error in android when I build with NDK r10d and api android-21 or android-22. Build with android-19 doesn't have the issue.
java.lang.UnsatisfiedLinkError: dlopen failed: cannot locate symbol "atof" referenced by "libmx3_android.so"...
Seems some bits have been moved around from 19 onwards

I've received the following error:

```
* What went wrong:
Execution failed for task ':app:preBuild'.
> failed to find Build Tools revision 21.1.1
```

By means of the Android Maintenance Tool it's not possible to install that revision.
The 21.1.2 is the only one available. I'm working on with the sdk for linux 64 bit.

Sorry for the very basic question. I like the idea of mx3 and would like to experiment with it for a POC for a client. If I already have two existing POCs completed for iOS and Android that I'd like to integrate this in to is there a way to do that or should I just build a new project and then reintegrate my UI code? I'm thinking the latter is the best way to go since the make would overwrite the current Android and iOS dirs?
