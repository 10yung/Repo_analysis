Added the --encoding command line option for NUnit3 since it was missing.

For reference:
https://github.com/nunit/docs/wiki/Console-Command-Line
I want to zip files which names contains accentented characters. The file name within the zip file will be changed.

## Examples
Build project:
```xml
<?xml version="1.0" encoding="utf-8" ?>
<Project DefaultTargets="CompressFiles" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
	<Import Project="$(MSBuildExtensionsPath)\MSBuildCommunityTasks\MSBuild.Community.Tasks.Targets"/>
	<Target Name="CompressFiles" >
		<ItemGroup>
			<FilesToCompress Include="Files\**\*.*" />
		</ItemGroup>
		<Zip Files="@(FilesToCompress)" WorkingDirectory="Files" ZipFileName="Result.zip" />
	</Target>
</Project>
```

Files attached:
[AccentError.zip](https://github.com/loresoft/msbuildtasks/files/3361595/AccentError.zip)

### Example 1
* File names:
  * "01 NonAccentented.txt" 
  * "02 Árvíztűrő tükörfúrógép.txt" 
* File names in the result zip:
  * "01 NonAccentented.txt"
  * "0"
    * The first character of the original file name (if it is non accented).
### Example 2
* File names:
  * "01 NonAccentented.txt" 
  * "Árvíztűrő tükörfúrógép.txt"
    * Note that the file name starts with an accented character.
* File names in the result zip:
  * "01 NonAccentented.txt"
  * "�1 NonAccentented.txt"
The MSBuild task to create installers with InnoSetup [assumes Inno Setup 5](
https://github.com/loresoft/msbuildtasks/blob/master/Source/MSBuild.Community.Tasks/InnoSetup.cs#L98)

(The default install location for Inno Setup 6 is `Program Files (x86)\Inno Setup 6`)
Retrying comes in handy when having to deal with the quirks that crop up when we try to deploy websites on IIS (running w3p.exe processes lock the directory and prevent < RemoveDir > from working as intended):

https://social.msdn.microsoft.com/Forums/vstudio/en-US/cb6acfa3-88e8-43c9-9a8b-0001b5ecf4e7/random-build-failures-on-removedir-task-error-msb3231-unable-to-remove-directory?forum=tfsbuild

Something like:

< DeleteTree
     Directories="..."
     Retries="3"
     RetryDelayMilliseconds="300"  >

Would be nice I guess.
See the wireshark output for a PWD command (immediately after logging in).

![image](https://user-images.githubusercontent.com/38075339/49593809-bac81f00-f974-11e8-965b-f0dd18205de5.png)

The 230 response (the welcome message) is received before the expected 257 code. This results in a error, whereas the actual response is correct. 

The problem might be cause by the password command receiving multiple response (230, and a second 230 for the welcome message)

Add SignTool task to the package: https://gist.github.com/gregmac/4cfacea5aaf702365724
I have just stumbled upon this project and find it very useful. I am going to use it as a NuGet package. Therefore, will I not change your code so it suits my purpose better. Instead, I hope you will consider my suggestion for more flexible build type and revision type numbering.

I bring up this suggestion since I want to hold a versioning where I control the major.minor.build part. And for revision will I use days for now. E.g. 200.3.0.6792

This is not possible now if I use your tools as it is meant to be used. For now, I have tweaked it as e.g. `AssemblyVersion="$(Major).$(Minor).$(Revision).$(Build)"`. My problem is if I had used revision as automatic, then I would get the second. I have four projects in my solution, and therefore I will get four different revisions numbers on my assemblies. This is not doable.
However, I would like to use “minutes since start date” or “hours since start date” that would give me the needed flexibility. Therefore I have this suggestion for your [Version.cs](https://github.com/loresoft/msbuildtasks/blob/master/Source/MSBuild.Community.Tasks/Version.cs) file

```
// could be any of your four enumerations, example is _buildTypeEnum
switch (_buildTypeEnum)
{
    case BuildTypeEnum.Automatic:
        _build = CalculateDaysSinceStartDate();
        break;
    case BuildTypeEnum.Increment:
        _build++;
        break;
    case BuildTypeEnum.Reset:
        _build = 0;
        break;
    case BuildTypeEnum.None:
    default:
        break;
}

// could be any of your four enumerations, needed is _buildTypeEnum and _revisionTypeEnum
switch (_buildTypeEnum)
{
    case BuildTypeEnum.AutoDay:
        _build = CalculateDaysSinceStartDate();
        break;
    case BuildTypeEnum.AutoHour:
        _build = CalculateHoursSinceStartDate();
        break;
    case BuildTypeEnum.AutoMinute:
        _build = CalculateMinutesSinceStartDate();
        break;
    case BuildTypeEnum.AutoSecond:
        _build = CalculateFractionalPartOfDay();  //CalculateSecondsSinceStartDate();
        break;
    case BuildTypeEnum.Increment:
        _build++;
        break;
    case BuildTypeEnum.Reset:
        _build = 0;
        break;
    case BuildTypeEnum.None:
    default:
        break;
}

switch (_revisionTypeEnum)
{
    case RevisionTypeEnum.AutoDay:
        _build = CalculateDaysSinceStartDate();
        break;
    case RevisionTypeEnum.AutoHour:
        _build = CalculateHoursSinceStartDate();
        break;
    case RevisionTypeEnum.AutoMinute:
        _build = CalculateMinutesSinceStartDate();
        break;
    case RevisionTypeEnum.AutoSecond:
        _build = CalculateFractionalPartOfDay();  //CalculateSecondsSinceStartDate();
        break;
    case RevisionTypeEnum.Increment:
        _build++;
        break;
    case RevisionTypeEnum.Reset:
        _build = 0;
        break;
    case RevisionTypeEnum.None:
    default:
        break;
}

private int CalculateDaysSinceStartDate()
{
    return DateTime.Today.Subtract(_startDate).Days;
}

private int CalculateHoursSinceStartDate()
{
    //break down a day into fractional seconds
    float factor = (float)(UInt16.MaxValue - 1) / (24);

    return (int)(DateTime.Now.TimeOfDay.TotalHours * factor);
}

private int CalculateMinutesSinceStartDate()
{
    //break down a day into fractional seconds
    float factor = (float)(UInt16.MaxValue - 1) / (24 * 60);

    return (int)(DateTime.Now.TimeOfDay.TotalMinutes * factor);
}

private int CalculateFractionalPartOfDay()  //CalculateSecondsSinceStartDate();
{
    //break down a day into fractional seconds
    float factor = (float)(UInt16.MaxValue - 1) / (24 * 60 * 60);

    return (int)(DateTime.Now.TimeOfDay.TotalSeconds * factor);
}
```

New task RegexMatchGroups to match groups defined inside pattern expression and return matched values together with group names and original source strings.
Current nunit3-console versions use "--" as switch separator on
both Windows and Linux. Also the --verbose switch has been
replaced by --trace=Verbose.

<!-- Reviewable:start -->
---
This change is [<img src="https://reviewable.io/review_button.svg" height="34" align="absmiddle" alt="Reviewable"/>](https://reviewable.io/reviews/loresoft/msbuildtasks/276)
<!-- Reviewable:end -->

- SqlExecute Task: Scalar and ScalarXml execution mode resuts available directily as task output via ResultValue task output parameter