
![image](https://user-images.githubusercontent.com/35992798/72608311-5c77b900-3948-11ea-8244-f5f46aba22bf.png)

As you can see in the above image decompiled code have a different identifier from the catch clause' parameter. 

JADX is including non-declared variable ( mostly 'e') everywhere.  

Also, see this line: <b>long unused11 = AgentCreateListing.d2 = this.date2.getTime();
</b> Why there is long unused11?

I appreciate your work, mate. Thanks in Advance.
```
public enum d implements x.a.c {
    ;
    
    private static x.a.c sB;
}
```
```
.class public final enum Lx/a/d;
.super Ljava/lang/Enum;
.source "SourceFile"

# interfaces
.implements Lx/a/c;
# static fields
.field public static final enum sA:Lx/a/d;

.field private static sB:Lx/a/c;
```
As you can see, sA is dropped
If I try changing my editor font to mononoki, it resets to Consolas 13. Changing to DejaVu Sans Mono 12 works.

jadx 1.1.0 on Windows 10 x64 and Java Hotspot 64 1.8.0_211.
It fails to decompile codes at com -> utils -> ResProguard

[jar file.zip](https://github.com/skylot/jadx/files/4046072/jar.file.zip)

It's a .jar file, not apk

```
INFO : output directory: a
INFO : loading ...
INFO : converting to dex: a.jar ...
WARN : Removed duplicated region for block: B:17:0x0043 A[SYNTHETIC, Splitter:B:17:0x0043] in method: com.utils.ResProguard.proguard(java.io.File):java.io.File, dex: a.jar
WARN : Removed duplicated region for block: B:20:0x0048 A[SYNTHETIC, Splitter:B:20:0x0048] in method: com.utils.ResProguard.proguard(java.io.File):java.io.File, dex: a.jar
WARN : Removed duplicated region for block: B:23:0x004d A[SYNTHETIC, Splitter:B:23:0x004d] in method: com.utils.ResProguard.proguard(java.io.File):java.io.File, dex: a.jar
WARN : Removed duplicated region for block: B:17:0x0043 A[SYNTHETIC, Splitter:B:17:0x0043] in method: com.utils.ResProguard.proguard(java.io.File):java.io.File, dex: a.jar
WARN : Removed duplicated region for block: B:20:0x0048 A[SYNTHETIC, Splitter:B:20:0x0048] in method: com.utils.ResProguard.proguard(java.io.File):java.io.File, dex: a.jar
WARN : Removed duplicated region for block: B:23:0x004d A[SYNTHETIC, Splitter:B:23:0x004d] in method: com.utils.ResProguard.proguard(java.io.File):java.io.File, dex: a.jar
WARN : Removed duplicated region for block: B:128:? A[ADDED_TO_REGION, RETURN, SYNTHETIC] in method: com.utils.ResProguard.proguard(java.io.File):java.io.File, dex: a.jar
WARN : Removed duplicated region for block: B:30:0x005d  in method: com.utils.ResProguard.proguard(java.io.File):java.io.File, dex: a.jar
WARN : Removed duplicated region for block: B:17:0x0043 A[SYNTHETIC, Splitter:B:17:0x0043] in method: com.utils.ResProguard.proguard(java.io.File):java.io.File, dex: a.jar
WARN : Removed duplicated region for block: B:20:0x0048 A[SYNTHETIC, Splitter:B:20:0x0048] in method: com.utils.ResProguard.proguard(java.io.File):java.io.File, dex: a.jar
WARN : Removed duplicated region for block: B:23:0x004d A[SYNTHETIC, Splitter:B:23:0x004d] in method: com.utils.ResProguard.proguard(java.io.File):java.io.File, dex: a.jar
WARN : Removed duplicated region for block: B:30:0x005d  in method: com.utils.ResProguard.proguard(java.io.File):java.io.File, dex: a.jar
WARN : Removed duplicated region for block: B:128:? A[ADDED_TO_REGION, RETURN, SYNTHETIC] in method: com.utils.ResProguard.proguard(java.io.File):java.io.File, dex: a.jar
WARN : Removed duplicated region for block: B:17:0x0043 A[SYNTHETIC, Splitter:B:17:0x0043] in method: com.utils.ResProguard.proguard(java.io.File):java.io.File, dex: a.jar
WARN : Removed duplicated region for block: B:20:0x0048 A[SYNTHETIC, Splitter:B:20:0x0048] in method: com.utils.ResProguard.proguard(java.io.File):java.io.File, dex: a.jar
WARN : Removed duplicated region for block: B:23:0x004d A[SYNTHETIC, Splitter:B:23:0x004d] in method: com.utils.ResProguard.proguard(java.io.File):java.io.File, dex: a.jar
WARN : Removed duplicated region for block: B:128:? A[ADDED_TO_REGION, RETURN, SYNTHETIC] in method: com.utils.ResProguard.proguard(java.io.File):java.io.File, dex: a.jar
WARN : Removed duplicated region for block: B:30:0x005d  in method: com.utils.ResProguard.proguard(java.io.File):java.io.File, dex: a.jar
WARN : Removed duplicated region for block: B:17:0x0043 A[SYNTHETIC, Splitter:B:17:0x0043] in method: com.utils.ResProguard.proguard(java.io.File):java.io.File, dex: a.jar
WARN : Removed duplicated region for block: B:20:0x0048 A[SYNTHETIC, Splitter:B:20:0x0048] in method: com.utils.ResProguard.proguard(java.io.File):java.io.File, dex: a.jar
WARN : Removed duplicated region for block: B:23:0x004d A[SYNTHETIC, Splitter:B:23:0x004d] in method: com.utils.ResProguard.proguard(java.io.File):java.io.File, dex: a.jar
WARN : Removed duplicated region for block: B:30:0x005d  in method: com.utils.ResProguard.proguard(java.io.File):java.io.File, dex: a.jar
WARN : Removed duplicated region for block: B:128:? A[ADDED_TO_REGION, RETURN, SYNTHETIC] in method: com.utils.ResProguard.proguard(java.io.File):java.io.File, dex: a.jar
WARN : Removed duplicated region for block: B:17:0x0048 A[SYNTHETIC, Splitter:B:17:0x0048] in method: com.utils.ResProguard.proguard(java.lang.String, java.lang.String):void, dex: a.jar
WARN : Removed duplicated region for block: B:20:0x004d A[SYNTHETIC, Splitter:B:20:0x004d] in method: com.utils.ResProguard.proguard(java.lang.String, java.lang.String):void, dex: a.jar
WARN : Removed duplicated region for block: B:23:0x0052 A[SYNTHETIC, Splitter:B:23:0x0052] in method: com.utils.ResProguard.proguard(java.lang.String, java.lang.String):void, dex: a.jar
WARN : Removed duplicated region for block: B:17:0x0048 A[SYNTHETIC, Splitter:B:17:0x0048] in method: com.utils.ResProguard.proguard(java.lang.String, java.lang.String):void, dex: a.jar
WARN : Removed duplicated region for block: B:20:0x004d A[SYNTHETIC, Splitter:B:20:0x004d] in method: com.utils.ResProguard.proguard(java.lang.String, java.lang.String):void, dex: a.jar
WARN : Removed duplicated region for block: B:23:0x0052 A[SYNTHETIC, Splitter:B:23:0x0052] in method: com.utils.ResProguard.proguard(java.lang.String, java.lang.String):void, dex: a.jar
WARN : Removed duplicated region for block: B:128:? A[ADDED_TO_REGION, RETURN, SYNTHETIC] in method: com.utils.ResProguard.proguard(java.lang.String, java.lang.String):void, dex: a.jar
WARN : Removed duplicated region for block: B:30:0x0062  in method: com.utils.ResProguard.proguard(java.lang.String, java.lang.String):void, dex: a.jar
WARN : Removed duplicated region for block: B:17:0x0048 A[SYNTHETIC, Splitter:B:17:0x0048] in method: com.utils.ResProguard.proguard(java.lang.String, java.lang.String):void, dex: a.jar
WARN : Removed duplicated region for block: B:20:0x004d A[SYNTHETIC, Splitter:B:20:0x004d] in method: com.utils.ResProguard.proguard(java.lang.String, java.lang.String):void, dex: a.jar
WARN : Removed duplicated region for block: B:23:0x0052 A[SYNTHETIC, Splitter:B:23:0x0052] in method: com.utils.ResProguard.proguard(java.lang.String, java.lang.String):void, dex: a.jar
WARN : Removed duplicated region for block: B:30:0x0062  in method: com.utils.ResProguard.proguard(java.lang.String, java.lang.String):void, dex: a.jar
WARN : Removed duplicated region for block: B:128:? A[ADDED_TO_REGION, RETURN, SYNTHETIC] in method: com.utils.ResProguard.proguard(java.lang.String, java.lang.String):void, dex: a.jar
WARN : Removed duplicated region for block: B:17:0x0048 A[SYNTHETIC, Splitter:B:17:0x0048] in method: com.utils.ResProguard.proguard(java.lang.String, java.lang.String):void, dex: a.jar
WARN : Removed duplicated region for block: B:20:0x004d A[SYNTHETIC, Splitter:B:20:0x004d] in method: com.utils.ResProguard.proguard(java.lang.String, java.lang.String):void, dex: a.jar
WARN : Removed duplicated region for block: B:23:0x0052 A[SYNTHETIC, Splitter:B:23:0x0052] in method: com.utils.ResProguard.proguard(java.lang.String, java.lang.String):void, dex: a.jar
WARN : Removed duplicated region for block: B:128:? A[ADDED_TO_REGION, RETURN, SYNTHETIC] in method: com.utils.ResProguard.proguard(java.lang.String, java.lang.String):void, dex: a.jar
WARN : Removed duplicated region for block: B:30:0x0062  in method: com.utils.ResProguard.proguard(java.lang.String, java.lang.String):void, dex: a.jar
WARN : Removed duplicated region for block: B:17:0x0048 A[SYNTHETIC, Splitter:B:17:0x0048] in method: com.utils.ResProguard.proguard(java.lang.String, java.lang.String):void, dex: a.jar
WARN : Removed duplicated region for block: B:20:0x004d A[SYNTHETIC, Splitter:B:20:0x004d] in method: com.utils.ResProguard.proguard(java.lang.String, java.lang.String):void, dex: a.jar
WARN : Removed duplicated region for block: B:23:0x0052 A[SYNTHETIC, Splitter:B:23:0x0052] in method: com.utils.ResProguard.proguard(java.lang.String, java.lang.String):void, dex: a.jar
WARN : Removed duplicated region for block: B:30:0x0062  in method: com.utils.ResProguard.proguard(java.lang.String, java.lang.String):void, dex: a.jar
WARN : Removed duplicated region for block: B:128:? A[ADDED_TO_REGION, RETURN, SYNTHETIC] in method: com.utils.ResProguard.proguard(java.lang.String, java.lang.String):void, dex: a.jar
```

package com.szcx.lib.encrypt.p205a;

import com.bumptech.glide.load.Key;
import java.security.MessageDigest;

/* renamed from: com.szcx.lib.encrypt.a.b */
public class MD5Util {
    /* renamed from: a */
    public static String m17863a(String str) {
        try {
            return m17864a(MessageDigest.getInstance("MD5").digest(str.getBytes(Key.STRING_CHARSET_NAME)));
        } catch (Exception e) {
            e.printStackTrace();
            return "";
        }
    }

    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r3v1, resolved type: byte} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r3v4, resolved type: byte} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r3v5, resolved type: byte} */
    /* JADX WARNING: Multi-variable type inference failed */
    /* renamed from: a */
    /* Code decompiled incorrectly, please refer to instructions dump. */
    private static java.lang.String m17864a(byte[] r5) {
        /*
            java.lang.StringBuilder r0 = new java.lang.StringBuilder
            r0.<init>()
            int r1 = r5.length
            r2 = 0
        L_0x0007:
            if (r2 >= r1) goto L_0x0022
            byte r3 = r5[r2]
            if (r3 >= 0) goto L_0x000f
            int r3 = r3 + 256
        L_0x000f:
            r4 = 16
            if (r3 >= r4) goto L_0x0018
            java.lang.String r4 = "0"
            r0.append(r4)
        L_0x0018:
            java.lang.String r3 = java.lang.Integer.toHexString(r3)
            r0.append(r3)
            int r2 = r2 + 1
            goto L_0x0007
        L_0x0022:
            java.lang.String r5 = r0.toString()
            return r5
        */
        throw new UnsupportedOperationException("Method not decompiled: com.szcx.lib.encrypt.p205a.MD5Util.m17864a(byte[]):java.lang.String");
    }
}
After messing around with several decompilation failures, I noticed that `processSwitch()` in **RegionMaker.java** may return `null` for switch-case constructs with multiple exits. In such a case, the dominance frontier of the switch-case contains multiple basic-blocks and `outs.cardinality() > 1`. However, the return value of `processSwitch()`, stored in `out`, is only set in the following `if` clause, which might not be triggered.

```java
if (outs.cardinality() == 1) {
    out = basicBlocks.get(outs.nextSetBit(0));
    stack.addExit(out);
}
```

When this happens `processSwitch()` returns `null` and `makeRegion()` terminates prematurely, resulting in several errors informing of lost code (a lost basic-block results in all basic-blocks it dominates being lost as well). This is common case in big switch-case constructs and, if I understand correctly, this is the root cause of various decompilation regressions reported by users.

Now the hard part :) Solving this problem, requires `processSwitch()`, `processIf()` etc in **RegionMaker.java** being modified to return `Collection<BlockNode>` instead of a single `BlockNode`. Alternatively, I think the problem can also be solved by using a stack of blocks in addition to the region stack currently used. In any way, I think the overall logic implemented in **RegionMaker.java** needs to be modified a bit.

I'm also currently trying to minimize my test-case which is kinda large.

@skylot feel free to share any thoughts. I have created this issue so that we can coordinate towards solving this.
Hi, when decompiled Lyft Driver app, I noticed file ``` res/values/^attr-privates.xml ``` with the following contents
```xml
<resources>
    <^attr-private name="actionBarDivider">
        <item>1</item>
    </^attr-private>
```

But e.g. apktool decodes it by the following way
```xml
<resources>
    <attr name="actionBarDivider" format="reference" />
```

APK: https://drive.google.com/file/d/1BMkXKDK_VuMsAMGzzKmgk9RTzYuE-Ulm/view?usp=sharing

I will try to Google possible solutions too

`dx` was deprecated and replaced with new [`d8`](https://developer.android.com/studio/command-line/d8) library. `dx` not support latest java class versions and java8 features, but this implemented in new `d8` library.
Issue:
public class ACAduserEnglishByteUtil {
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r0v1, resolved type: byte} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r0v3, resolved type: byte} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r0v4, resolved type: byte} */
    /* JADX WARNING: Multi-variable type inference failed */
    /* Code decompiled incorrectly, please refer to instructions dump. */
public static java.lang.String printByteArrayHex(byte[] r6, int r7, int r8) {
        /*
            java.lang.StringBuffer r3 = new java.lang.StringBuffer
            r3.<init>()
            r2 = r7
        L_0x0006:
            int r4 = r7 + r8
            if (r2 < r4) goto L_0x000f
            java.lang.String r4 = r3.toString()
            return r4
        L_0x000f:
            if (r2 <= r7) goto L_0x0016
            java.lang.String r4 = ","
            r3.append(r4)
        L_0x0016:
            byte r4 = r6[r2]
            if (r4 >= 0) goto L_0x0042
            byte r4 = r6[r2]
            int r0 = r4 + 256
        L_0x001e:
            java.lang.String r4 = java.lang.Integer.toHexString(r0)
            java.lang.String r1 = r4.toUpperCase()
            int r4 = r1.length()
            r5 = 1
            if (r4 != r5) goto L_0x0045
            java.lang.StringBuilder r4 = new java.lang.StringBuilder
            java.lang.String r5 = "0"
            r4.<init>(r5)
            java.lang.StringBuilder r4 = r4.append(r1)
            java.lang.String r4 = r4.toString()
            r3.append(r4)
        L_0x003f:
            int r2 = r2 + 1
            goto L_0x0006
        L_0x0042:
            byte r0 = r6[r2]
            goto L_0x001e
        L_0x0045:
            r3.append(r1)
            goto L_0x003f
        */
        throw new UnsupportedOperationException("Method not decompiled: com.kelly.ACAduserEnglish.ACAduserEnglishByteUtil.printByteArrayHex(byte[], int, int):java.lang.String");
    }
...
}
[ACAduserEnglish-signed.apk.zip](https://github.com/skylot/jadx/files/4007199/ACAduserEnglish-signed.apk.zip)

Merging nested `if` regions that contain assignment instructions may lead to the following decompilation error:

```java
/* JADX WARNING: Code restructure failed: missing block: B:2:0x0005, code lost:
    r2 = null;
 */
```

The following minified smali test-case can be used to trigger the buggy behavior.

```
.class public LTest;
.super LTestSuper;
.source "Test.java"

.method public AHc()V
    .locals 5

    const/4 v0, 0
    const/4 v1, 0
    const/4 v4, 0

    if-eqz v4, :cond_0

    const/4 v2, 0

    invoke-virtual {v2}, LTestClass1;->testMethod()LTestClass2;

    move-result-object v0

    if-eqz v0, :cond_0

    if-eq v1, v0, :cond_0

    iget-object v3, v2, LTestClass1;->testField:LTestClass3;

    if-eqz v3, :cond_0

    :cond_0
    return-void
.end method
```

Notice that the code above is only meant for debugging purposes and is semantically mundane.

As it turns out, this code hits a **TODO** in **CodeShrinkVisitor.java** and, more specifically, in method `checkInline()`:

```java
if (assignInline) {
    // TODO?
    return;
}
```

My current solution to this problem is removing the special check for `assignInline`. If the `if` clause above is commented out, everything seems to be working fine. To make sure that this modification generates sane code, I decompiled a widely used Android application using an upstream and a patched version of jadx. The code generated using the two jadx variants was `diff`'ed and the output was examined by hand.

@skylot, as usual, I'm still in the process of examining this further :)