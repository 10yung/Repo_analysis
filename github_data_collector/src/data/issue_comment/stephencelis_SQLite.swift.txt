When I import SQLite to my SwiftUI controller I get this msg:

![image](https://user-images.githubusercontent.com/39468483/72645340-40641f80-3928-11ea-8807-6183f341ef1a.png)

I don't want to type the SQL insert statements to create my database, what are my alternative methods to do so? Can I Just create a spreadsheet and convert it to sqlite format?
If I select use
`try! connect?.prepare("SELECT * FROM words WHERE category=:category AND language=:language ORDER BY RANDOM()", ["category":category, "language":language])`
it will crash, like this
![76F3D71E-D6A8-4F6F-9C7E-BD9CD5AF8CA7](https://user-images.githubusercontent.com/2186746/71870872-4ef54e80-3152-11ea-847d-ec6053bc8a5f.png)

But use 
`try! connect?.prepare("SELECT * FROM words WHERE category=? AND language=? ORDER BY RANDOM()", [category, language])`
itâ€˜s OK

There is a crash observed in prepare, changed the code to use statement.failableNext and modified AnyIterator appropriately

Crash Log 
0  libswiftCore.dylib             0x10c23a1a4 specialized _assertionFailure(_:_:file:line:flags:) + 42360
1  libswiftCore.dylib             0x10c28fc48 swift_unexpectedError + 280
2  SQLite                         0x10b1f0b5c $S6SQLite10ConnectionC7prepareys11AnySequenceVyAA3RowVGAA9QueryType_pKFs0D8IteratorVyAHGycfU_AHSgycfU_ + 204
3  SQLite                         0x10b1fbcd0 $S6SQLite3RowVSgIego_ADIegr_TRTA + 24
4  libswiftCore.dylib             0x10c21e320 _ClosureBasedIterator.next() + 93472
5  libswiftCore.dylib             0x10c21e4ac _IteratorBox.next() + 93868
6  libswiftCore.dylib             0x10c0e0050 AnyIterator.next() + 237412
7  libswiftCore.dylib             0x10c21e4ac _IteratorBox.next() + 93868
Consider of [SE-0258](https://github.com/apple/swift-evolution/blob/master/proposals/0258-property-wrappers.md)

```swift
@Expressed("id") var id:String = UUID().string
```
## Help Wanted 
1. `Expressed` Maybe not a proper name, help wanted.
2. Still working on tests, don't know how to test for a property wrapper, Equable?
3. Edit README and Documentation.
rt

[TestProject.zip](https://github.com/stephencelis/SQLite.swift/files/3977348/TestProject.zip)


This change adds `keyAndMigrate` methods which perform "PRAGMA cipher_migrate;" call
immediately after calling `sqlite3_key_v2`
This call is needed to open the database files created in older major SQLCipher version (e.g. 3.x.x)
by newer SQLCipher version (e.g. 4.x.x).
(see https://github.com/stephencelis/SQLite.swift/issues/908)
These calls should be performed only once, when opening older database files for the first time.
See https://www.zetetic.net/sqlcipher/sqlcipher-api/#cipher_migrate
and https://discuss.zetetic.net/t/upgrading-to-sqlcipher-4/3283 for more details regarding SQLCipher upgrade
Thank you for the library, we need to bump it to version 3.0 for watchOS to be able to submit to Apple using Carthage.
## Problem
When using `SQLite.swift/standalone` with `sqlite3` pod version >= 3.30.0, attempting to build the project results in "ambiguous use" warning in Xcode pointing [here](https://github.com/stephencelis/SQLite.swift/blob/0a9893ec030501a3956bee572d6b4fdd3ae158a1/Sources/SQLite/Core/Connection.swift#L590).

## Solution
SQLite 3.30.0 changed the definition of SQLITE_DETERMINISTIC:
```diff
-#define SQLITE_DETERMINISTIC    0x800
+#define SQLITE_DETERMINISTIC    0x000000800
```

Meaning that the (older) system sqlite3 library and the pod have different definitions, even though they're the same value.

We've been importing the system SQLite3 module in `SQLiteObjc.h` even when linking against standalone sqlite.

I added a check to `SQLiteObjc.h` to import the sqlite3 pod when we're using it, instead of always importing the system module.

This leads to there being only one definition in scope.