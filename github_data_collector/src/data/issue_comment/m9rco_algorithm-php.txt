在一本算法结构的书中，介绍的快速排序，每一趟排序都会去交换。
但这里的好像只是找到了比基准值大的和小的两个数组，然后最后再去合并。
书上的c的实现：
`int Quick(List R, int low, int high)
{
	x=R[low];

	while(low<high)
	{
		while((low<high) && R[high].key >= x.key) 
		{
			high --;
		}
		R[low] = R[high];

		while(low<high && R[low].key <= x.key)
		{
			low++;
		}
		R[high] = R[low];
	}

	R[low] = x;
	return low;
}

void QuickSort(List R, int low, int high)
{
	if (low < high) 
	{
		temp = Quick(R, low, high);
		QuickSort(R, low, temp - 1);
		QuickSort(R, temp + 1, high);
	}
}`
/**
 * BubbleSort
 * 冒泡排序，依次比较相邻的两个元素的大小，如果前面的大于后面的，那么交换两者位置
 * @param array $container
 * @return array
 */
function BubbleSort(array $container)
{
    $count = count($container);
    for ($j = 1; $j < $count; $j++) {
        for ($i = 0; $i < $count - $j; $i++) {
            if ($container[$i] > $container[$i + 1]) {
                $temp = $container[$i];
                $container[$i] = $container[$i + 1];
                $container[$i + 1] = $temp;
            }
        }
        $str = "第" . $j . "步排序结果";
        $res = $str . implode(',', $container);
        printf("%s\n",$res);
    }
    return $container;
}

BubbleSort([4, 21, 41, 2, 53, 1, 213, 31, 21, 423]);

/*
第1步排序结果4,21,2,41,1,53,31,21,213,423
第2步排序结果4,2,21,1,41,31,21,53,213,423
第3步排序结果2,4,1,21,31,21,41,53,213,423
第4步排序结果2,1,4,21,21,31,41,53,213,423
第5步排序结果1,2,4,21,21,31,41,53,213,423
第6步排序结果1,2,4,21,21,31,41,53,213,423
第7步排序结果1,2,4,21,21,31,41,53,213,423
第8步排序结果1,2,4,21,21,31,41,53,213,423
第9步排序结果1,2,4,21,21,31,41,53,213,423
 */
给定一个数据流，数据流长度N很大，且N直到处理完所有数据之前都不可知，请问如何在只遍历一遍数据（O(N)）的情况下，能够随机选取出m个不重复的数据。
比如：  
&nbsp;&nbsp; MBaseSort.php 基数排序 MSD
&nbsp;&nbsp; LBaseSort.php 基数排序 LSD  
如果 未实现，最好标示一下。
Unfortunately, I do not speak, nor can I read Chinese.

However, this project seems interesting and from what I managed to translate using google seems like a really interesting read.

Hopefully, someone who is fluent in both English and Chinese can translate this.

If we plan on translating to more than one language it would be worthwhile creating an 'English' branch and other languages could follow suit.
If we plan on translating only to English then an English translation under the Chinese comments would be ideal.
:fire: 列几个小清单
---

- [ ] 每周一推一道算法 
- [ ] 每周三推一道算法 
- [ ] 每周五推一道算法 
- [ ] 理解所学算法思想

:rocket: 当然还有一些小事
---

- [ ] 主动多拉几个志同道合的盆友进来优化并提供更多学习资料
- [ ] 重写`REDAME` 
- [ ] 写个`wiki` 
- [ ] 记得有个前端代码预览的玩意儿写的比较好，什么时候拿过来用用，简直太棒