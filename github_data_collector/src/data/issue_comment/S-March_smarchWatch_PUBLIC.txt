Hi

I've created a new version of the watch, but with touchscreen. I've also changed the housing to be printed on my resin printer for a nice look. I noticed that this project is missing a lot to actually make it work (it has the basic BLE and some display routines, but even backlight code is missing). 

My version implements the display code a bit faster, adds touch support and has the code for the LIS3DH i2c chip. Also created time display and a menu. I struggled a lot, maybe we can help each other a bit more since a lot of people are interested in this watch. It is far from finished too, I mainly have a lot of issues debugging it. The tasks seem to stop, and I can't get the accelerometer and touch working at the same time. Also a real RTC is missing, and the sleep is broken atm. But take a look!

I'm working on changing the altium files to add the touch connector and fix some issues this one has (for ex. missing vref for debug and the vibrate motor 330ohm is not needed or it won't work)

https://github.com/dannygrob/OpenWatch

Danny
I was populating the PCB and after referencing the completed PCB image on github I found that I was missing "L2", "R14" and the pin set that the LCD screen snaps into. These also aren't on the Bill of sale which leads me to believe I may just be missing something. If someone could please provide the part numbers that would be much appreciated. 
Thanks for this! This project is a perfect base to start my own project (also rolling around my head for years)

I can't seem to find the code in the project to get and display the actual time, the RTC. There are functions to draw hour/minute hands, but they are not used. @S-March Is there a more up-to-date code that you could share where it gets and keeps time? The LIS3DH code and interrupt is also missing.

Also it would be great to get the font image file as a starting point. In the end I will rewrite most of the project anyway I guess.
I've finally managed to build the project.

In simple steps I did the following:

1. Downloaded the SDK
2. Installed SmartSnippetsStudio found [here](https://www.dialog-semiconductor.com/products/connectivity/bluetooth-low-energy/smartbond-da14682-and-da14683), scroll down for your platform. 
3. Followed the getting started guide found [here](https://www.dialog-semiconductor.com/sites/default/files/um-b-047-da1468x_getting_started_7v0.pdf)

When I could build the example project I tried building S-March projects. I did this by copying the files from this repository (the project folder called smarchWatch) into my SDK, basically with the same search path as in this repository. Example ../MyLocallyInstalledSDK/projects/dk_apps/ble_profiles/smarchWatch

This did not, however, build properly from the start. S-March had to remove the SDK from his repository since Dialoge Semiconductors demanded this. The twist is that he had altered some SDK files in order to build his project.

I did some detective work and this is my solution.

1. Find a fork where not all SDK files are removed.
2. Copy the following files: qspi_w25q128.h, platform_devices.h and partition_def.h. They are all found under the folder sdk/bsp/adapters/include and sdk/bsp/memory/include
3. Place/replace the above files in your local SDK.

@S-March Could you please provide these files mentioned above in your repository? I think this could help other makers trying to replicate your project. 
In  Schematic file I noticed, that display's WR pin has't any connections on board and display driver uses the 9-bit SPI for transfering data between display  and MCU.
In ST7789V datasheet I've found that WR pin uses for selecting, what would be transfered - command or data.
So, Why do you use the 9-bit SPI for display communication and where you find information about the display's interface?
![image](https://user-images.githubusercontent.com/25596072/58767284-93ec4d80-8591-11e9-824a-b607407551cb.png)
I've created this issue because have a similar display, but haven't got any succesful results because trying to use 8 bit SPI with selecting data and comannd with toggling the WR pin.
Thanks for answer!

Would you be able to export the design files from Altium in some other format? I'd like to play around with adapting it for the capacitative touch variant of the display but I don't have an Altium license - I'd be looking for something I could import into one of the free or hobbyist-level PCB design softwares such as KiCAD, EasyEDA, Eagle, etc.
I looked up the Digikey prices for the BOM parts. I know these can change over time, but I added them to the BOM.xlsx file. 
Worthwhile, I think, to give people an idea of the cost to build.

(Enclosed)

[BOM.xlsx](https://github.com/S-March/smarchWatch_PUBLIC/files/3184606/BOM.xlsx)
I create another design of housing, not tested on HW, use with caution
@S-March could you put a few copies of the stencil files in a single document?  
Letâ€™s say the stencil can be 400x240mm big. Could you put like 8 copies on the 400mm side and 5 copies on the 240mm side (so there are a total of 40 copies in a single 400x240mm stencil). This will cut the costs a lot!
Congratulation @S-March on this awesome project. I've looked at the very inspiring blog that you wrote and the repository, but I wasn't able to see how you transfer the software to the watch. Through the charger interface you only provide VBUS. Is this done via BT? Is the SUOTA capability available upon first boot so the device is discoverable via BLE and programmable from the start?
Many thanks again for the awesome write up.