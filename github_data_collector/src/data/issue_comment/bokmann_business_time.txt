Whether I start on a weekend date or I use the holidays feature, if my starting date is a non workday, and I add business_days to it, it will skip to the next day before doing the calculaiton.

Example1 holiday:  dt = Date.civil(2019,11,11)  Which is veterans day (specified in holdays)
1.business_day.after(dt) will yield Wednesday 11/13/2019 instead of Tuesday

Example2 weekend: dt = Date.civil(2019,11,17))
1.business_days.after(dt) => Tue, 19 Nov 2019

Is this by design?  How do I work around this?  Do I need to check the start date for .workday? after the calculation and subtract 1?
I've come across a situation where I'd like to have a date for "The friday that follows X".  So if "X" is a tuesday, I want it to be the following friday, if X is a friday, it can return X. Similar to how `first_business_day` will return the given day if it is a business day, otherwise the next one. If the immediately following friday isn't a workday it can return the one after that. If you've done something impossible like chosen `:saturday`, and no Saturdays can be work days... maybe raise an error, or return nil.

I would propose perhaps just an additional param in `first_business_day`, something like:

    Time.first_business_day(Time.current, :friday)

Or:

    Time.first_business_day(Time.current, day_of_week: :friday)

Update:

FWIW I'm just going to do it this way for now, which is "good enough" for my use-case I think:

    Time.current + ((5.days-Date.current.wday.days) % 7.days)
Don't know if this is useful but provides functionality for getting the next business day that does not involve the current day.
# background
I would like to use date end of workday. like time object.

```
BusinessTime::Config.beginning_of_workday.strftime("at %I:%M")
```

so I add `strftime` method.
Also I thought `BusinessTime::ParsedTime` should be return Time or DateTime object.
it has hour, min, sec, but it cannot use simiilar to use Time or DateTime. 
So, I add to_time, to_datetime method :)
resolves #167 
Is there any way or any plans to add work hours to specific dates? In our country, we have short days ( usually minus 1 hour) in day before each holiday.
Sometimes because of the holidays  (at least in Russia), working days for the weekend can be moved back.
For example, because of the holiday on May 1, Saturday April 29 was a working day despite the fact that the 5-day working week was in the config.
date.workday? method returned false for this date. I want to be able to specify "forced_workdays" for such cases.
It works like a holidays option

```ruby
workday = Date.parse("2018-4-29")
BusinessTime::Config.forced_workdays << workday
```

or for YAML config
```yaml
business_time:
  forced_workdays:
    - April, 28, 2018
```
Modified code, test and documentation to allow passing a holiday or array of holidays with each invocation.  This is particularly useful when dealing with potentially different regional holidays during each invocations.
The title is quite self-explanatory. **busines_time_until** returns inconsistent results when called on Time/DateTime objects and holidays are within the range.

Below is an example of such an inconsistency.

```
2.1.5 :017 > BusinessTime::Config.holidays.clear
=> #<SortedSet: {}>
2.1.5 :018 > BusinessTime::Config.holidays << Date.new(2017,10,18)
=> #<SortedSet: {Wed, 18 Oct 2017}>
2.1.5 :019 > start = Time.new(2017,10,16)
=> 2017-10-16 00:00:00 +0300
2.1.5 :020 > fin = Time.new(2017,10,20)
=> 2017-10-20 00:00:00 +0300
2.1.5 :021 > start.business_time_until(fin) / 3600
=> 27.0
2.1.5 :022 > (start.to_datetime.business_time_until(fin.to_datetime)).to_f / 3600
=> 18.000104166666667
```
Often, the local config is used in several parts of an application. For example:

```ruby
NY_OFFICE_CONFIG = {
  holidays: ['2017-07-04'],
  end_of_working_day: '17:00'
}.freeze

ABU_DHABI_OFFICE_CONFIG = {
  holidays: ['2017-08-08'],
  work_week: %w(sun mon tue wed thu)
}.freeze

BusinessDays::Config.with(NY_OFFICE_CONFIG) { 3.business_hours.from_now }
BusinessDays::Config.with(ABU_DHABI_OFFICE_CONFIG) { 4.business_days.ago }
```

Clearly, continually creating and destroying the local configs could be avoided, if the generated configs were cached. If the same frozen object is passed again, one could reuse the previous local config.

I can do that if you are interested.