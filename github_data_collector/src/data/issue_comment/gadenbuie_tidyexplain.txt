Animation request for pivot_wider() and pivot_longer().

Background: “Pivotting” which converts between long and wide forms. tidyr 1.0.0 introduces pivot_longer() and pivot_wider(), replacing the older spread() and gather() functions. See vignette("pivot") for more details.

Link: https://tidyr.tidyverse.org/

- Black text for wide column titles and long key column
- Slightly lighter background for wide column titles
- Smaller font for title

Rationale: Column titles are black.

Tried to use white color for the long key column, but this breaks the association between frames. Wanted to get feedback first.

![](https://raw.githubusercontent.com/gadenbuie/tidyexplain/b61fe21569e0db5f211cb0ac99ea90f48ad4e1ae/images/tidyr-spread-gather.gif)
If we have variable width of each cell, we can also animate nest/unnest nicely.
Not sure how to do it yet :) 
I used Fira Mono (title) and Fira Sans (cell text) originally, but I think "Fira Sans Condensed" is a better choice for cell text.

I also used `sysfonts` to grab fonts from Google and `showtext` to ensure they are handled consistently across systems (in particular where the fonts aren't already installed).

We should probably invest some code or time to make sure that either we have good defaults that will work wherever ggplot2 does or that we have some code in place to make sure that our default fonts are available.
We need to ensure that arguments passed through `...` are documentable (i.e. are inherited from another function) and that their scope is relatively limited.

Currently, nearly every function takes `...` which means that we don't have issues with extra arguments being passed to functions that don't take them.

This short reprex demonstrates the issue with removing `...` from existing functions.

``` r
f <- function(x = "a", ...) paste(x)

g <- function(y = "b", ...) paste(y)

h <- function(z, ...) paste(z, g(...), f(...))

# Doesn't have ... to capture unused arguments
f2 <- function(x = "a") paste(x)

h2 <- function(z, ...) paste(z, g(...), f2(...))

h("c", y = "e")
#> [1] "c e a"
h2("c", y = "e")
#> Error in f2(...): unused argument (y = "e")
```

In the above example, we would need to add `x` as a parameter to `h2()` or do some work to separate the arguments in the `...`. In the end, though, the effort will be worth it because documentation will be much clearer and the user will be able to figure out from autocompletion, etc, what parameters get passed to which functions.
to pass inputs to `animate_join()` so that actual names can be used in plot annotations
A major advantage of moving to the package structure is that we can use `pkgdown` to create a slick website to replace the README. In addition to documenting the package functions, each major section of the README can be an individual vignette/article.
Once the dust settles on [the twitter poll](https://twitter.com/grrrck/status/1033103810158317568)...

Rename this repo. It seems that [everything will redirect](https://help.github.com/articles/renaming-a-repository/) but may need to investigate/resolve if not.

I'd like to merge #10 into a new `pkg` branch that we can use for the package development. This way we can push fixes and improvements there while leaving the current animations and documentation on the master branch. Once everything is ready to go with the package, we can merge to master.

To facilitate communication, I'd like to still use feature branches and PRs for any major feature additions or updates. Minor bugfixes can be pushed directly to `pkg`. Branch names like `pkg-add-filter-animation` are great. Let me know if there are any questions with this workflow.

I'll handle getting #10 into the `pkg` branch in this repo once it's ready.
https://twitter.com/dvaughan32/status/1032749426186637312?s=21