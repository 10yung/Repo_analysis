- Compiles with Swift 4.2
- All unit tests fixed
I have a crash:
```
Fatal Exception: NSInternalInconsistencyException
An instance 0x151eabd0 of class UIView was deallocated while key value observers were still registered with it. Current observation info: <NSKeyValueObservationInfo 0x151b6c10> ( <NSKeyValueObservance 0x14384cd0: Observer: 0x151b0090, Key path: hidden, Options: <New: YES, Old: YES, Prior: NO> Context: 0x151b0180, Property: 0x8814fc0> )
```

In my view I have this code:
```
deinit {
    stackView.arrangedSubviews.forEach { view in
      stackView.removeArrangedSubview(view)
    }
  }
```
After investigation I found that method `removeArrangedSubview` does not call ```removeHiddenListener```. Why?

You are removing listeners by code:
```
deinit {
        // This removes `hidden` value KVO observers using didSet()
        { self.arrangedSubviews = [] }()
    }
```
But `arrangedSubviews` are already empty. Why don't you remove listeners for all listeners in `registeredKvoSubviews` array?

Here's a quick pass of the Swift 4 conversion we're using in a project. Unfortunately some 'vertical' tests fail. firstAttribute and secondAttribute are traling instead of leading.
Do you have a branch for Swift 4 and Xcode 9?
TZStackView cannot be subclassed in Swift 3, since the class is `public` instead of `open`.

We have to add some additional functionality to this class, so it would be great if you could make this class open. Thanks!

have a problem: runtime: Layout Issues: Width and horizontal position are ambiguous for TZStackView.TZSpacerView.
This commit makes the unit tests work again, by using the new enums.
1.3 includes a load of breaking changes and thus should increase the major version of the library.

http://semver.org

Here's a quick pass of the Swift 3 conversion we're using in a project. Definitely room for tidying up syntax and such but all tests pass and it works great for us.

Only notable change was to the KVO value change monitoring.

```
    let imageView1 = UIImageView(image: UIImage(named: "goods.png"))
    imageView1.contentMode = .ScaleToFill
    imageView1.clipsToBounds = true
    imageView1.sizeToFit()

    contentContainerView.addArrangedSubview(imageView1)

    let imageView2 = UIImageView(image: UIImage(named: "goods.png"))
    imageView2.contentMode = .ScaleToFill
    imageView2.clipsToBounds = true
    imageView2.sizeToFit()
    contentContainerView.addArrangedSubview(imageView2)
```

contentMode not working
