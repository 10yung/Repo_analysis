I'm using the solution to encapsulate the Foundation API's for Files and Folders selected by the user in NSOpenPanel. In that scenario, the result of the user input is received as URL instead of String. Before creating Files or Folders objects I always need to remove the protocol of the URI (file://) and, in the case of files and folders with spaces in the name, I need to remove the Percent Encoding.
 
Considering that the Domain for this solution is Files and Folders, I understand that these tasks could be implemented inside the Solution instead of outside. Because of that I added one fix to the Storage Initialization ( Clean the protocol of the URI in case of file:// ) and one fix to the folder evaluation (Remove percentage encoding before calling the ObjC method). All of these fixes are extensions in the sense that they didn't changed any interface and, if the explained cases are not present, they will not create any effect.

Tests are working on local:
Test Suite 'FilesTests' passed at 2020-01-07 17:51:19.715.
	 Executed 64 tests, with 0 failures (0 unexpected) in 0.166 (0.168) seconds
Test Suite 'FilesPackageTests.xctest' passed at 2020-01-07 17:51:19.715.
	 Executed 64 tests, with 0 failures (0 unexpected) in 0.166 (0.168) seconds
Test Suite 'All tests' passed at 2020-01-07 17:51:19.715.
	 Executed 64 tests, with 0 failures (0 unexpected) in 0.166 (0.169) seconds

- Add some small fixes to make the solution more easy to use with URL.relativeString and URL.absoluteString;
- Add Suport to encoded URI's, this helps when passing URL parameters with folders and files where the name contains spaces.

Committer: Gustavo Tavares <grstavares@gmail.com>
Your branch is up to date with 'origin/master'.

Changes to be committed:
	modified:   Sources/Files.swift
This change enables files and folders to be moved to the trash on macOS.
Since the Swift Package Manager is now integrated into Xcode, all of my open source projects will stop supporting CocoaPods + Carthage starting with their next major version, which for Files will be `5.0`. There's no set timeline for when Files `5.0` will be released, it might take months (or even years), but I just want to give all users who depend on Files using either of those two package managers a heads-up so that you can plan accordingly.
This change enables files and folders to be referred to using a path that starts with `./`. While this is redundant when using Files, since paths are assumed to start at the current folder, itâ€™s useful when accepting file paths as input, and to better conform to system conventions.
Hey @JohnSundell ðŸ‘‹ 

The Files 4.0 release looks great, lots a solid improvements. Those improvements, however, have broken some of the open PRs that myself and others have written. I'm wondering whether it's worth the effort to update my PRs to work with 4.0 or whether those updates will be for naught. I'd love to see them merged, but don't want to waste any time.

If those PRs won't ever be merged, will you let me and others know so we can close them out?

Best,

Clay
Hello, yes, my English is still so bad.

I recently tried to write a Cloud Document manager in Files, and I found that in a particular case, the loadModificationDate method might crash my application. My guess is that Cloud is downloading or synchronizing files.

I tried to find the reason, and finally found that **try! fileManager.attributesOfItem(atPath: path)**  is likely to make a mistake, because at this time it may not be able to get any attributes at all. Or **return attributes[FileAttributeKey.modificationDate] as! Date** is wrong because it may not have this attribute.

So I think Files, the way to read file attributes, should be nil. This makes Files more rigorous..

Just like this:

```
    func loadModificationDate() -> Date? {
        let attributes = try? fileManager.attributesOfItem(atPath: path)
        return attributes?[FileAttributeKey.modificationDate] as? Date
    }
```



Resolves #67
Hi @JohnSundell ,

I'm enjoying the Files API and I'm glad I can help in any way. Even if my contributions are just discussion points that lead to potential pull requests from others.

I have, yet another, discussion point to raise. I hope you don't mind.

### RenameItem

Unless I examine the source, it's not clear here if `newName` is `name only` or `name + extension`.

```
public func rename(to newName: String, keepExtension: Bool = true) throws
```

Further, I currently have a situation where the above API is inconvenient.

At the moment I'm unpacking a .pdf file from a CKAsset instance (CloudKit). 

1. After digging through the asset, I find a file named asdkfjkajsdkfha.**owkheorhjdsf**  
2. The file is stored in temp dir so I need to also move it.
3. I want the file to have a different name, including a new `.pdf` extension.

Perhaps, we might want to have something like the following?

```
public func rename(to newName: String) throws
```

And maybe we can examine the name to see if it contains a `"."`

Do you think this is a valid issue and do you have any ideas on this?
Hi! 
I've added these 2 new properties to Item.
These new properties are optional because on some Linux systems may not be available