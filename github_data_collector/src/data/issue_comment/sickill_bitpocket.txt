On my PC I would like to set up two slaves. One folder for syncing from server-a and an other folder for syncing from server-b.

Both servers contain different data.

Is this possible with bitpocket?
How does bitpocket distinguish between delete/create?

AFAIK for this to work you need a list of all files of the last sync.

It would be nice if you could explain your solution in the README.

This is a different idea to the performance from. With this idea, the stream of the Rsync tree listing is MD5'd in sync with the rest of the `analyze` processing. If the two trees match according to the MD5 hash, then it is safe to assume that the trees match exactly and the sync can be aborted without further processing or inspection.
Overall, this results in about a 20% reduction in the CPU time of the `analyze` phase of the sync.

Hi Marcin,
I found your script being really cool.
For a long time I was looking for a simple solution to sync some folders to my cloud provider - strato here in germany. They have a nice rsync interface - but no direct ssh access.
So I made some changes to allow for a rsync only operation (-n on init).
I also added some wait/timeout for remote locks.
Additionally I added some -b basedir for any run - this allows for easy execution from any directory.
Still on the way with some testing.
Maybe you are interested...
Anyway many thanks for the great script.
Best regards
Andreas

In this mode, the files synced in both the pull and push phases are not put into place until the completion of the phase. Instead, the updated files are staged into a `.bitpocket/staging` folder. Once all the changes are staged, they are moved into place. If the phase is interrupted, perhaps due to network connection quality, then no changes are reflected. This is especially useful when the changes being synchronized include software or data whose changes should be reflected as a whole.

This has the caveat of requiring a bit of extra space on the source and destination systems as extra space for all changes is required. However, it has the advantage that, if interrupted, the staged partial files can be used when resuming the transfer. This can greatly speed syncs over shaky network connections.
This patch causes bitpocket to crash nicely if rsync does not completely cleanly.
Also includes PR #77 
Also uses the rsync option "--partial-dir", which is safe to use in case of network error but saves some bandwidth for error-prone network connections