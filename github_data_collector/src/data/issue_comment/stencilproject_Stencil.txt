The existing behaviour substitutes a `variable that could not be resolved` for an empty string without throwing any error.

This PR adds the option to throw when a `variable that could not be resolved` is used in a template (which means it was not defined in the context).

This is helpful to prevent errors in templates, for example if introducing a typo when referring to a variable. 
This takes the work that @bejar37 started in #92 and builds upon it.

In addition to the Jinja2 trimming symbols, this adds a `trimBehavior: TrimBehaviour` on `Environment`. This defaults to `.none` but can be customized. It also comes with a built in `.smart` case that removes whitespace before a block, and whitespace and a single newline after a block.
In #268 the Swift 5 support was introduced but no new version was released since then.

Is there any plan to do so? If so I'm happy to help.

Best,
Lennart

(Backing: https://github.com/stencilproject/Stencil/pull/268#issuecomment-495271361)
I'm trying to install Kitura and Stencil from the RayWenderlich Videos project .

This is the file from the Package.swift: .package(url: "https://github.com/IBM-Swift/Kitura-StencilTemplateEngine.git", .upToNextMinor(from: "1.9.1"))

After doing 'swift build', the process gets stuck at 

Fetching https://github.com/kylef/Stencil.git

Using Xcode 11 + it's CLI

Any ideas what might be wrong or where I might look to get forward?
Hi, 

what be nice to have is a build in support for i18n-JSON-Files (https://www.i18next.com). 

Given Mirror is being used to serialize objects that are members of the Context dictionary, it only seems logical we shouldn't be limited to initializing a Context with a dictionary. This PR adds the ability to initialize a context with Any

Initialize Context with Any by converting to dictionary
Allow Any to be pushed onto a Context in a similar way
Change Environment functions to use these new functions
Hello! I recently tried getting an iOS project running on Catalyst and one of the issues I came across was that `FileSystemLoader` couldn't load any template files on macOS (while it works fine on iOS). Looking at the implementation, the reason was clear: while iOS bundles put resources at the bundle root, macOS bundles put them in a `Resources` subdirectory, and `FileSystemLoader.init(bundle:)` doesn't use `Bundle.resourcePath` or `Bundle.resourceURL` so it was looking in the wrong place.

I'm happy to pass in `resourceURL` myself (or write my own lil `BundleResourceLoader`) but I figured I'd ask: would it be a useful contribution to adjust `FileSystemLoader` somehow to consider `resourceURL`, and/or to add a `BundleResourceLoader`? I can open a PR if that'd be useful. If not, I'm happy to go about my day :)
**Issue**

Grandchild blocks do not replace the Parent/Grandparent blocks.  Appears that inheritance is not working as expected.

**Given**

_base.html_

```django
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset=utf-8/>
    {% block baseHeadBlock %}{% endblock %}
    <!-- Custom styles overriding CSS -->
    <link rel="stylesheet" href="/styles/app.css"/>    
    <title>{% block baseTitleBlock %}{{ baseTitleKey|default:"Base Title" }}{% endblock %}</title>
</head>
<body>
    {% block baseBodyBlock %}
    <p><em>Stencil "base.html"</em></p>
    {% endblock %}
</body>
</html>
```

_latexmath_base.html_

```django
{% extends "base.html" %}

{% block baseHeadBlock %}
    <!-- MathJax: https://www.mathjax.org/#gettingstarted -->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.5/MathJax.js?config=TeX-MML-AM_CHTML" async></script>
{% endblock %}

{% block baseTitleBlock %}-{{titleKey}}-{% endblock %}

{% block baseBodyBlock %}
{{bodyKey}}
<p><em>Stencil "latexmath_base.html"</em></p>
{% endblock %}
```

_latexmath_inline.html_

```django
{% extends "latexmath_base.html" %}

{% block baseTitleBlock %}Stencil Math Inline{% endblock %}

{% block baseBodyBlock %}
<p>Two equations: \(A^T_S = B\) and \(\sqrt{ab}\).</p>
<p>\[A^T_S = B\]  </p>
<p>\[\sqrt{ab}\]  </p>

<p><em>Stencil "latexmath_inline.html"</em></p>
{% endblock %}
```

**Expected**

Expected the rendered page to contain `Stencil "latexmath_inline.html"`

**Actual Result**

The rendered page instead contained `Stencil "latexmath_base.html"`

**Setup**

The test harness that i'm working with is posted at [VaporExamplesLab/eval-vapor-leaf-stencil](https://github.com/VaporExamplesLab/eval-vapor-leaf-stencil)

Does it support zero-base in for-loop? thanks.

for-loop like swift
---
```
{% for idx in 0..<rows %}
...
{% endfor %}
```

forloop.first in nested for-loop?
---
```
{% for row in 0...9 %}
    do something in row
    {% for column in 0...9 %}
        do something in column

        /* How do I check the forloop.first is for row or column */ 
        {% if forloop.first %} 
              do something if `row` is first
        {% endif %}

    {% endfor %}
{% endfor %}
```

access array in nested for-loop with operators(+, -, *, /, %)?
---
```
{% for row in 0...9 %}
    {% for column in 0...9 %}
         {{ set index = row (+, -, *, /, %) column }}
         {{ array[index].attribute.value }}
    {% endfor %}
{% endfor %}
```
The [Stencil/docs/templates.rst](https://github.com/stencilproject/Stencil/blob/master/docs/templates.rst) pages provides a rendunant example in the last section.

> For example, `base_news.html`, `base_news.html`.

Perhaps, "`base_blog.html`, `base_news.html`" could add more clarity to the "For example, â€¦"?
