I have problem with very, very defragmented files when downloading via DCC. I just don't know how much (or if) responsible is Irssi on my setup. Unfortunately I use Windows, NTFS and launch irssi via cygwin.

Please, don't judge.

To ilustrate how fragmented files (yellow color) are:
https://i.imgur.com/PccE8sw.png

After zooming on middle-ish cluster:
https://i.imgur.com/TQ3uNBV.png

All yelow parts are one file, aprox ~1.3gb. Getting it via DCC is very fast, that I can tell, reading from it - that's a nightmare. When dcc'ing multiple files they interweave freely because why shouldn't they.

I looked through /set options for dcc but it was nothing even remotely helpful. It looks like irssi is trying to write as much small chunks of data in as much small packages as possible and filesystem can't help but make it as sparse as it can get.
Fixes #1148
Using the simple Perl script to print some TLS connection details

```perl
use strict;
use Irssi;
use vars qw($VERSION %IRSSI);

$VERSION = "20191228.0";
%IRSSI = (
        authors     => "JAA",
        name        => "tls",                                                                                                                                                                                     
);

sub sig_tls_handshake_finished {
        my ($server, $tls) = @_;
        Irssi::print(sprintf('Now connected to %s:%d using %s', $server->{address}, $server->{port}, $tls->{cipher}));                                                                                            
}

Irssi::signal_add_last('tls handshake finished', 'sig_tls_handshake_finished');
```

results in the error

    Irssi: critical irssi_bless_iobject: assertion '(type & ~0xffff) == 0' failed

on connecting to any TLS-enabled IRC server when irssi attempts to execute the signal handler. The handler is executed anyway, but the `TLS_REC` object in the second argument appears to be unusable (printing `"Now connected to host:port using "`). As far as I can tell, irssi itself is not affected by this assertion error in any way.
Trying to initiate an active transfer from an IPv4 server, I get:
```
22:08 DCC SEND from someone [someip port 12371]: somefile.txt [529kB]
22:08 DCC can't connect to someip port 12371
```
Checking with Wireshark, irssi does not send any packet at all to `someip`. 
Trying:
```
telnet someip 12371
```
immediately works and fills my terminal with binary data. 
Observed with versions 1.2.2 and current master. Any information on how to debug this further is very welcome (I last used XDCC just fine over a year ago with an older version). 
For all incoming messages, irssi first emits a "server incoming" signal. This allows for very low-level access to the incoming IRC traffic. I was looking for an equivalent signal for full control over outgoing messages and came up empty; as far as I can tell, one would have to individually bind to each relevant signal that could trigger a message to be sent. I'd like to propose adding a "server outgoing" signal. It would be triggered once for each line just before it is actually sent to the server and have two arguments, the `SERVER_REC` and the line to be sent. Stopping the signal would also stop the line from being sent.
The documentation is instructing me to do the following: 

  cd src/irc/proxy

I would suggest including the proper path (in my system it's /usr/local/include/irssi/src/irc), or even just three dots and a slash. As a rather new gnu user this was non-trivial to figure out.

step two:
run make.
returns 'make: no target to make'

I don't know where to go from here, since I am unsure what I would even be compiling by running the command. Judging from the instructions this would be an alternative to recompiling, and here i am running make? 

Im on freebsd 12 and am using the binary provided and installed by pkg. Is my use case supported by this documentation? I think not. It would be worthy to at least specify the use cases your documentation covers in the documentation itself, lest someone do something like compile manually over the top of an installation pre-configured by a package manager, which could lead to depdency conflicts and so on for the user. 

thanks
#1069 is delicious low hanging fruit for tshirt month, surprised no one else took it before
It would be great if irssi would implement support for https://github.com/ircv3/ircv3-specifications/pull/393 so you can fill gaps in the conversation history that happened when you were offline or had other network issues.

I've only tested this for hidelevel but I reckon it should work the same for everything else
IMO `/window hidelevel JOINS PARTS` should set the absolute value of hidelevel
and `+JOINS +PARTS` and `-JOINS -PARTS` should be used to add/delete levels
In the modern world, the support for some languages that are right-to-left and mixing them with left-to-write words and numbers is crucial for a different software. At some point, this should be supported everywhere, including the console.

I started to gather the information about BiDi support in various console terminals (and programs) in analogy with true color crusade at https://gist.github.com/XVilka/a0e49e1c65370ba11c17

New [console BiDi specification](https://terminal-wg.pages.freedesktop.org/bidi/) was recently implemented in libvte by @egmontkob: https://terminal-wg.pages.freedesktop.org/bidi/implementations.html#vte

Note, that with the release of [GNOME 3.34](https://www.gnome.org/news/2019/09/gnome-3-34-released/) the support of BiDi is available in Gnome Terminal out of the box, which makes testing/implementing it in the other programs, such as irssi way easier.
