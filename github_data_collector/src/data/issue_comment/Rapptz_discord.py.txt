### Summary

It changes the copyright year from 2015-2019 to 2015-2020

### Checklist

<!-- Put an x inside [ ] to check it, like so: [x] -->

- [ ] If code changes were made then they have been tested.
    - [ ] I have updated the documentation to reflect the changes.
- [ ] This PR fixes an issue.
- [ ] This PR adds something new (e.g. new method or parameters).
- [ ] This PR is a breaking change (e.g. methods or parameters removed/renamed)
- [x] This PR is **not** a code change (e.g. documentation, README, ...)

### The Problem
Being able to delete a webhook as a user, instead of using the webhook's token.

When you delete a webhook using the webhook's token, the operation is anonymous, whereas deleting it as a user generates an Audit Log entry.

https://discordapp.com/developers/docs/resources/webhook#delete-webhook

<!--
What problem is your feature trying to solve? What becomes easier or possible when this feature is implemented?
-->

### The Ideal Solution
I'm not sure what would be the ideal solution, maybe passing a client argument to `Webhook.delete`, but I don't know how that would play with adapters.

Maybe a `Client.delete_webhook(webhook_id)` method.
<!--
What is your ideal solution to the problem? What would you like this feature to do?
-->

### The Current Solution
The current solution is to use make a manual http request, as :
```py
await ctx.bot.http.request(Route('DELETE', '/webhooks/{webhook_id}', webhook_id=webhook_id))
```
<!--
What is the current solution to the problem, if any?
-->

### Summary

This is similar to #1761, which requests implementing webhook editing as a user.

### Summary

Closes #1986.

### Checklist

- [x] If code changes were made then they have been tested.
    - [ ] I have updated the documentation to reflect the changes.
- [ ] This PR fixes an issue.
- [x] This PR adds something new (e.g. new method or parameters).
- [ ] This PR is a breaking change (e.g. methods or parameters removed/renamed)
- [ ] This PR is **not** a code change (e.g. documentation, README, ...)

### Summary

This closes #2143. The syntax for this method allows you to provide specific roles and their new role positions, however, I did think about providing an ordered list of all roles in their new role positions, and I felt like that would need more variables than providing specific role position changes. The syntax can still be changed if requested.

### Checklist

- [ ] If code changes were made then they have been tested.
    - [ ] I have updated the documentation to reflect the changes.
- [x] This PR fixes an issue.
- [x] This PR adds something new (e.g. new method or parameters).
- [ ] This PR is a breaking change (e.g. methods or parameters removed/renamed)
- [ ] This PR is **not** a code change (e.g. documentation, README, ...)

### Summary
My bot has a functionality to interact with people through both a server and DM. 
A command could look like `!interact <user>`. In a server, users are almost always passed by user mention. In Direct Messages however, the user is most commonly presented as `name#tag`. One of the problems however is that most users will copy an username directly from a server. This will paste as `@user#0000`. Conversion in this format will fail, as it will try to lookup `@user#0000`, rather than `user#0000`. To fix this, I've added a simple check where first character from the argument is truncated if this character is '@'. 

Something that is worth noting that I've only implemented this in `UserConverter`. _The `MemberConverter` is left untouched_

### Checklist

<!-- Put an x inside [ ] to check it, like so: [x] -->

- [x] If code changes were made then they have been tested.
    - [ ] I have updated the documentation to reflect the changes. (not needed)
- [x] This PR fixes an issue.
- [ ] This PR adds something new (e.g. new method or parameters).
- [ ] This PR is a breaking change (e.g. methods or parameters removed/renamed)
- [ ] This PR is **not** a code change (e.g. documentation, README, ...)


### Testing
Before code changes:
![image](https://user-images.githubusercontent.com/10338882/71785206-214ac100-2ffd-11ea-9724-0c5251514989.png)

After code changes:
![image](https://user-images.githubusercontent.com/10338882/71785211-36275480-2ffd-11ea-870f-abfc39d2167f.png)

Script used for testing available [here](https://gist.github.com/hugopilot/d04ad3fb6209a162aac7fcfeb2777aa3)
At readthedocs.io, for role `color`, it says "Returns the role colour. An alias exists under `color`". This PR fixes that to say "Returns the role color. An alias exists under `colour`".

### Summary

<!-- What is this pull request for? Does it fix any issues? -->

### Checklist

<!-- Put an x inside [ ] to check it, like so: [x] -->

- [x] If code changes were made then they have been tested.
- [x] I have updated the documentation to reflect the changes.
- [ ] This PR fixes an issue.
- [x] This PR adds something new (e.g. new method or parameters).
- [ ] This PR is a breaking change (e.g. methods or parameters removed/renamed)
- [x] This PR is **not** a code change (e.g. documentation, README, ...)

[GitHub Action](https://github.com/Rapptz/discord.py/actions) to detect Python syntax errors and undefined names (like #2486) on all code changes.

https://flake8.pycqa.org/en/latest/user/error-codes.html

On the flake8 test selection, this PR does _not_ focus on "_style violations_" (the majority of flake8 error codes that [__psf/black__](https://github.com/psf/black) can autocorrect).  Instead these tests are focus on runtime safety and correctness:
* E9 tests are about Python syntax errors usually raised because flake8 can not build an Abstract Syntax Tree (AST).  Often these issues are a sign of unused code or code that has not been ported to Python 3.  These would be compile-time errors in a compiled language but in a dynamic language like Python they result in the script halting/crashing on the user.
* F63 tests are usually about the confusion between identity and equality in Python.  Use ==/!= to compare str, bytes, and int literals is the classic case.  These are areas where __a == b__ is True but __a is b__ is False (or vice versa).  Python >= 3.8 will raise SyntaxWarnings on these instances.
* F7 tests logic errors and syntax errors in type hints
* F82 tests are almost always _undefined names_ which are usually a sign of a typo, missing imports, or code that has not been ported to Python 3.  These also would be compile-time errors in a compiled language but in Python a __NameError__ is raised which will halt/crash the script on the user.

### Summary

<!-- What is this pull request for? Does it fix any issues? -->

### Checklist

<!-- Put an x inside [ ] to check it, like so: [x] -->

- [ ] If code changes were made then they have been tested.
    - [ ] I have updated the documentation to reflect the changes.
- [ ] This PR fixes an issue.
- [ ] This PR adds something new (e.g. new method or parameters).
- [ ] This PR is a breaking change (e.g. methods or parameters removed/renamed)
- [ ] This PR is **not** a code change (e.g. documentation, README, ...)

### Summary

This is an adaptation of the now defunct PR - #645. It allows for two ways of command customization:

- Separator: Essentially lets you separate the arguments using something other than `` ``, requiring the use of quotes for multiple word arguments. `?foo a b, c, d, e` -> `('a b', 'c', 'd', 'e')`
- Encapsulator: Another way of using quotes. `?bar a b [c d e] f g` -> `('a', 'b', 'c d e', 'f', 'g')`

As this changes quite a bit of the parsing of commands behind the scenes, I will try to test this as extensively as possible before marking it ready for review.

### Improvement list

- [x] Fix parentheses in docstrings
- [x] Use `c.isspace` instead of hardcoded space check
- [x] Check if there is an encapsulator -> don't use a hardcoded dict to replace it
- [ ] Validate the objects given as parameters for Separator and Encapsulator.

### Checklist

- [x] If code changes were made then they have been tested.
    - [x] I have updated the documentation to reflect the changes.
- [ ] This PR fixes an issue.
- [x] This PR adds something new (e.g. new method or parameters).
- [ ] This PR is a breaking change (e.g. methods or parameters removed/renamed)
- [ ] This PR is **not** a code change (e.g. documentation, README, ...)
  
### Summary

This serves as a one-up to #1972. Also adds `commands.dm_only()` to the bunch. 

### Checklist

- [x] If code changes were made then they have been tested.
    - [x] I have updated the documentation to reflect the changes.
- [x] This PR fixes an issue.
- [x] This PR adds something new (e.g. new method or parameters).
- [ ] This PR is a breaking change (e.g. methods or parameters removed/renamed)
- [ ] This PR is **not** a code change (e.g. documentation, README, ...)

### The Problem

I would like to use relative import paths to describe my extensions, e.g., `.extensions.foo` rather than requiring an absolute path like `my_bot.extensions.foo`. I use relative paths for package-internal imports, so it seems logical that extensions would follow the same pattern.

This does not currently work. I get the following error:

```
Traceback (most recent call last):
  File "/usr/lib64/python3.7/runpy.py", line 193, in _run_module_as_main
    "__main__", mod_spec)
  File "/usr/lib64/python3.7/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/home/chris/Projects/discord-fate-bot/discord_fate_bot/__main__.py", line 15, in <module>
    bot.load_extension('.extensions.error_handling')
  File "/home/chris/.local/share/virtualenvs/discord-fate-bot-MUSnTVTS/lib/python3.7/site-packages/discord/ext/commands/bot.py", line 621, in load_extension
    lib = importlib.import_module(name)
  File "/home/chris/.local/share/virtualenvs/discord-fate-bot-MUSnTVTS/lib64/python3.7/importlib/__init__.py", line 122, in import_module
    raise TypeError(msg.format(name))
TypeError: the 'package' argument is required to perform a relative import for '.extensions.error_handling'
```

It would seam this library is using `importlib` internally, which can handle relative paths, but is not passing enough parameters.


### The Ideal Solution

I would like `Bot.load_extension` to take an optional second parameter, which would specify the package to resolve against. This follows the example of `importlib.import_module`, which takes a package parameter in the same way. If no package is provided, the path is looked up as if from a top-level script (the current behavior).

This would allow us to say

```python
bot.load_extension('.extensions.foo', __package__)
```

which would load the extension relative to the current package.


### The Current Solution

Currently the solution is to only use absolute paths. I use `importlib.utils.resolve_name` to resolve my relative paths to absolute ones:

```python
from importlib.util import resolve_name
# ...
bot.load_extension(resolve_name('.extensions.foo', __package__))
```


### Summary

Please allow us to load extensions using relative paths via an optional package parameter in `Bot.load_extension`.

This feature request looks similar to #1703, but that request wants something similar old Python 2.x-style relative paths (just concatenating package and name with a dot). I would like something compatible with Python 3 and `importlib`.

I would be willing to work on a merge request. I just wanted to make an issue first in case there was a conscious decision not to support relative paths. (I would still ask you to reconsider.)