Hello,

I have an issue with Carbon dates that are serialized through [GitHub - opis/closure: Serialize closures (anonymous functions)](https://github.com/opis/closure)

Laravel version: 6.11.0
Carbon version: 2.28.0
PHP version:  7.3.10
Opis/Closure version: 3.5.1

The problem seems to occur after upgrading to Laravel 6 and therefor upgraded from Carbon 1 to Carbon 2.

I wasn’t sure if this belongs to the Carbon or Opis issues. So I’ve posted this question on both. ([InvalidArgumentException : Unknown setter ‘date’ · Issue #1988 · briannesbitt/Carbon · GitHub](https://github.com/briannesbitt/Carbon/issues/1988))

When a closure is serialized:
```php
return serialize(new SerializableClosure($closure, true));
```

I get this error: `InvalidArgumentException : Unknown setter 'date’`.

This boils down to `/nesbot/carbon/src/Carbon/Traits/Date.php:1166`.

I’ve googled this issue for some time now and I believe it has got a lot to do with the depreciation of `serializeUsing`.
As found in issue [Provide an alternative to serializeUsing to Laravel users · Issue #1870 · briannesbitt/Carbon · GitHub](https://github.com/briannesbitt/Carbon/issues/1870). @driesvints

However after reading multiple threads I’m not able to find a solution. I really hope someone can help me steering me to the right direction 🙏.

Thanks!

If we attempt to serialize a class that contains a typed `Closure` property (PHP 7.4), we get a type error.

```php
class Foo
{
    public \Closure $closure;
}

$foo = new Foo();
$foo->closure = function () {
    echo 'hi';
};
$serializedFoo = \Opis\Closure\serialize($foo);
$unserializedFoo = \Opis\Closure\unserialize($serializedFoo);
$unserializedFoo->closure(); // Expect 'hi', get PHP Fatal error:  Uncaught TypeError: Typed property Foo::$closure must be an instance of Closure, Opis\Closure\SerializableClosure used in C:\test\vendor\opis\closure\src\SerializableClosure.php:428
```

This is likely happening because we're overwriting property values with `SerializableClosure` per [this code](https://github.com/opis/closure/blob/master/src/SerializableClosure.php#L428).  However, we cannot do that with typed properties in PHP 7.4.
If I stop using opis/closure, my unserialize error goes away.

this error occurs when using opis/closure and the views_php module in combination with the editablefields module for Drupal.  If I disable views_php which uses the opis/closure library now through a patch we wrote recently, there is no longer an error however as soon as I re-enable this module that uses the opis/closure library I get an unserialize error when the serialized string from cache is passed through the unserialize() function.

I tried using base64_encode and base64_decode before and after serialize/unserialize functions but that didn't change anything.

The only thing that I can do to avoid this is to avoid using opis/closure and the views_php module that now requires this due to the create_function being deprecated.

I've got a complex stack of dependencies and modules generating a page with ajax forms, when using php 7.3.x I get an unserialize error in a cache_get which attempts to unserialize something that contains a closure that was serialized by opis/closure and at some point was cached and serialized and gets unserialized from the cache .


I find all this very complex to debug and troubleshoot, going on two weeks now.

I'm wondering, why did the php team remove create_function  from php 7.2.x ?

previous versions of php didn't need all this and they worked.

I'm going to try to do another backtrace and see if I can dig up something.

I should probably just find another solution that avoids using views_php and opis/closure but I was trying to make my life easier by not having to refactor someone elses code of a project I took over that some one else created.

We tried to use `Opis\Closure` to serialize structures that may contain `\Throwable`'s, including system-defined exceptions/errors. In this scenario we expected that the script closure-wrapped the call stack and/or parameters of thrown  exceptions/errors. However, we could only achieve this by removing the `isUserDefined()` restrictions in `SerializableClosure::wrapClosures()`. After which it does work flawlwssly.

Is there a requirement for that restriction? Could it be better fine-tuned/lifted so that we can serialize system throwables?