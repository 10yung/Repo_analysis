Closes #336 

- [x] Write unit tests

it would be great to pass through some options to requests; such as for example a value for the `timeout` parameter.

any thoughts on allowing this in general on all the apis? or, less flexibly but still usefully, allowing for a general configuration for all queries?

as an example, it would be great if when calling `.place` we could pass through an additional dictionary of these values, and use them as an arg for `requests_kwargs=...`

thoughts?

thanks!
`places_photo()` returns `response.iter_content()` but `response.headers` contains the mimetype of the file, so it's hard to find out the extension of the file.
I read the following doc

```
The duration in traffic is returned only if all of the following are true:

1. The request includes a valid API key, or a valid Google Maps APIs Premium Plan client ID and signature.
2. The request does not include stopover waypoints. If the request includes waypoints, they must be prefixed with via: to avoid stopovers.
3. The request is specifically for driving directionsâ€”the mode parameter is set to driving.
4. The request includes a departure_time parameter.
5. Traffic conditions are available for the requested route.
```

For condition 2, how do I prefix `via:` to the waypoints. I have a list of coordinates.
The [API doc](https://developers.google.com/maps/documentation/directions/intro) specifies that departure/arrival times are in seconds since January 1, 1970 UTC. When generating the appropriate timestamp  from a Python `datetime` object in  [`convert.time`](https://github.com/googlemaps/google-maps-services-python/blob/master/googlemaps/convert.py#L188) the library ignores attached timezones, assuming local `datetime`s.

For example the following code returns wrong traffic information:
```
    gmaps = googlemaps.Client(key="XXX", client_id="XXX", client_secret="XXX")
    times = [
        datetime(2017, 9, 18, 8, 0, tzinfo=timezone.utc),
        datetime(2017, 9, 18, 9, 0, tzinfo=timezone(timedelta(hours=1))),
        datetime(2017, 9, 18, 8, 0, tzinfo=timezone(timedelta(hours=1)))
    ]
    for time in times:
        res = gmaps.directions('Montauban', 'Toulouse', departure_time=time)
        print('datetime: {} - duration: {}'.format(time, res[0]['legs'][0]['duration_in_traffic']['text']))
```

, where the first two times correspond to the exact same timestamp and the third time is an hour before the other two, print the following:

```
datetime: 2017-09-18 08:00:00+00:00 - duration: 55 mins
datetime: 2017-09-18 09:00:00+01:00 - duration: 50 mins
datetime: 2017-09-18 08:00:00+01:00 - duration: 55 mins
```

I think that the right fix would be to use the timezone aware `timestamp` datetime method rather than `timetuple` in `convert.time`. Was there a reason for using timetuple?

I can open a PR for that if it helps.