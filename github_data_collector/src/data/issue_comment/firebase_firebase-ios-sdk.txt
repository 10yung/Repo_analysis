### [REQUIRED] Step 2: Describe your environment

  * Xcode version: Not relevant
  * Firebase SDK version: Not relevant
  * Firebase Component: Crashlytics
  * Component version: Not relevant

### [REQUIRED] Step 3: Describe the problem

The method `-[FIRCrashlytics recordCustomExceptionName:reason:frameArray:]` is not exposed in the public header file, while it is exposed in the old Crashlytics SDK. We currently use this method in our apps to report when the main thread hangs.

We've realized that when one of the iOS watchdogs kills our app, we have no way of knowing why exactly it happened. Moreover, we don't know how often our apps are killed by the iOS watchdogs, as these are not reported by Crashlytics or Apple. We were mostly concerned with the main thread watchdog, i.e. if the main thread is not responsive for more than x seconds, the app is killed. So if you have a deadlock somewhere in the main thread, you might never know about it, these crashes are probably counted as OOM sessions.

Our solution was to run our own internal watchdog that periodically checks if the main thread ran since the last check, and if not, a stack trace of the main thread is generated. The stack trace is then given to the above mentioned method to be uploaded to Crashlytics.

This has worked very good for us in the last few months, and fixes showed an increase in OOM-free sessions, although these fixes had nothing to do with memory.

We ask to consider making the above mentioned method public again.

Note that we only send the main thread stack. It would be nice to get and report the stack traces of all the threads.
See API review doc for context.

Summary of changes:
- Move all UI code from display SDK to the non-display SDK (in a folder called `DefaultUI`)
- Leave blank display SDK for developers who upgrade (there's a warning in the non-display SDK to remove this)
- Fix up both integration test apps
- Restructure file directory to conform to https://github.com/firebase/firebase-ios-sdk/blob/master/AddNewPod.md
This is to help adopters understand what the state of the library is
### [REQUIRED] Step 2: Describe your environment

  * Xcode version: 11.3
  * Firebase SDK version: 6.14.0_____
  * Firebase Component: _____ (Auth, Core, Database, Firestore, Messaging, Storage, etc)
  * Component version: _____

### [REQUIRED] Step 3: Describe the problem

I get a crash and when i Go deep into the threads I see that FSRWebsocket crashed on line 11845


#### Steps to reproduce:
The crash happened on my prod version, so i dont know how to reproduce...



#### Relevant Code:
Crashed: MCRestrictionManagerWriter member queue
0  libobjc.A.dylib                0x1b7c68140 objc_release + 16
1  CoreFoundation                 0x1b7f56fac cow_cleanup + 168
2  CoreFoundation                 0x1b7e01598 -[__NSDictionaryM dealloc] + 144
3  CoreFoundation                 0x1b7f56fac cow_cleanup + 168
4  CoreFoundation                 0x1b7e01598 -[__NSDictionaryM dealloc] + 144
5  ManagedConfiguration           0x1ba6e2a18 -[MCRestrictionManager setMemberQueueEffectiveUserSettings:] + 72
6  libdispatch.dylib              0x1b7bf2610 _dispatch_call_block_and_release + 24
7  libdispatch.dylib              0x1b7bf3184 _dispatch_client_callout + 16
8  libdispatch.dylib              0x1b7bd0710 _dispatch_lane_serial_drain$VARIANT$armv81 + 564
9  libdispatch.dylib              0x1b7bd1128 _dispatch_lane_invoke$VARIANT$armv81 + 400
10 libdispatch.dylib              0x1b7bda43c _dispatch_workloop_worker_thread + 576
11 libsystem_pthread.dylib        0x1b7c42b88 _pthread_wqthread + 276
12 libsystem_pthread.dylib        0x1b7c45760 start_wqthread + 8



com.squareup.SocketRocket.NetworkThread
0  libsystem_kernel.dylib         0x1b7cfc634 mach_msg_trap + 8
1  libsystem_kernel.dylib         0x1b7cfbaa0 mach_msg + 72
2  CoreFoundation                 0x1b7ea4288 __CFRunLoopServiceMachPort + 216
3  CoreFoundation                 0x1b7e9f3a8 __CFRunLoopRun + 1444
4  CoreFoundation                 0x1b7e9eadc CFRunLoopRunSpecific + 464
5  Foundation                     0x1b81de7f4 -[NSRunLoop(NSRunLoop) runMode:beforeDate:] + 228
6  ActiveFit                      0x102c47bb8 -[_FSRRunLoopThread main] + 1845 (FSRWebSocket.m:1845)
7  Foundation                     0x1b830f0a4 __NSThread__start__ + 848
8  libsystem_pthread.dylib        0x1b7c41d8c _pthread_start + 156
9  libsystem_pthread.dylib        0x1b7c4576c thread_start + 8
### [READ] Step 1: Are you in the right place?
yup

### [REQUIRED] Step 2: Describe your environment

  * Xcode version: 11.3.1
  * Firebase SDK version: 6.15.0
  * Firebase Component: InAppMessaging
  * Component version: 0.16.0

### [REQUIRED] Step 3: Describe the problem

#### Steps to reproduce:

1. Create first campaign: 
- set type as banner
- in "Target" set App = this app, and User Property "pro" does not contain "true"
- in "Scheduling" remove the default event onForeground, and add a custom event. Set a breakpoint in the code at the only place this custom event is ever reported
- set start date as now, end date as Feb 1
- save campaign as draft

2. On simulator: erase all content & settings
3. Start app on simulator: make sure custom event breakpoint is never hit [ok], make sure user property "pro" is set to "true" [ok]
4. Verify in web console's DebugView that simulator's user property "pro" = "true" [ok]
5. Stop app on simulator
6. Get instance ID from xcode console, re-open draft campaign from step #1, add instance ID as Test Device, hit test
7. Start app on simulator, verify custom event breakpoint is never hit [ok]

Expected behavior:
On the first screen of the app no message is shown because the custom event was never reported and also the user property excludes this user from being targeted

Actual behavior:
The banner/message is immediately shown on the first screen of the app, ignoring targeting and scheduling.

I have also tried on real devices, no difference from simulator.

Is this a bug or expected functionality of test devices? If the latter, how to test it? I cannot launch this campaign/code without testing that it works.



### [REQUIRED] Step 2: Describe your environment

  * Xcode version: 11.3
  * Firebase SDK version:  6.14.0
  * Firebase Component: Remote Config
  * Component version: 4.4.6

### [REQUIRED] Step 3: Describe the problem

Remote Config values fall back to default values after a few hours

We have an iOS app that relies heavily on Firebase Remote Config to display some of the UI options. I set some user parameters in Firebase analytics, then do a fetch() on app startup. 

Upon app launch, the values are fetched correctly. After running in the background for a few hours, bring app to foreground. The remote config values fallback to default ones.

Workaround - kill app and relaunch

#### Steps to reproduce:

Logs pasted below. It looks like when fetch() got called again, it fetched default values somehow

(Instabug Logs - Info) 16-01 18:05:04.646 remoteConfig["timeline_number_of_days"]: Optional(2)) **--> should have been 30 instead of 2**
(Instabug Logs - Info) 16-01 18:05:04.642 remoteConfig["remote_log_enabled"]: true)
(Instabug Logs - Info) 16-01 18:05:04.641 remoteConfig["special_needs_list"]: Optional("") **-> should not be empty**
(Instabug Logs - Info) 16-01 18:05:04.640 The data couldn’t be read because it isn’t in the correct format.
(Instabug Logs - Info) 16-01 18:05:04.639 remoteConfig["role_list"]: Optional("") **-> should not be empty**
(Instabug Logs - Info) 16-01 18:05:04.637 The data couldn’t be read because it isn’t in the correct format.
(Instabug Logs - Info) 16-01 18:05:04.598 remoteConfig["show_developer_options"]: false) **--> should have been true**
(Instabug Logs - Info) 16-01 18:05:04.588 FirebaseRemoteConfig: Config fetched!

#### Relevant Code:

```
var properties : [String: String] = [:]
properties["id"] = userAccount.userId
let subscriptionId = userAccount.subscriptions.first?.getId() ?? ""
properties["subscriptionId"] = subscriptionId
self.firAnalytics.setUserProperties(properties: properties)

self.fetch()

private func fetch() {
        var duration: TimeInterval = 0
        if Constants.Production {
            duration = 60 * 60 * 6
        }
        remoteConfig.fetch(withExpirationDuration: duration) { (status, error) in
            if status == .success {
                log(tag: self.Tag, "Config fetched!")
                self.remoteConfig.activate(completionHandler: { [unowned self] _ in
                    self.writeToSettings() //here i store fetched remote config values locally
                })
            } else {
                log(tag: self.Tag, "Config not fetched! Error: \(String(describing: error?.localizedDescription))")
            }
        }
    }

```
**Describe your environment**

  * Xcode version: 11.3
  * Firebase SDK version: 6.25.0
  * Firebase Component: Crashlitics, Fabric
  * Component version: Crashlitics (3.12.0), Fabric (1.9.0) 

**Describe the problem**

After migration from Fabric to Firebase I encountered multiple problems with Crashlitics.
I followed this guide.
[(https://firebase.google.com/docs/crashlytics/get-started?fbclid=IwAR0YuotcIwobzk_3BOfQIKxVh-2129nlt1Z26pi5muzjZ2YkJq7ObwSMd0w)](url)
and used test implementation part to verify if it works fine. 

Effect is:
- crash-free statistics are going down as expected
- not seeing any crashes on dashboard list (invalid behaviour)

To sum up.
I am using debug format DWARF + dSYM.
I removed info.plist old "Fabric" section (not a single firebase + crashlitics tutorial mention this part). Only in that case Crashlitics.sharedInstance.debugMode = true seems to be working correctly.

Crashlitics logs are showing, inter alia:
> [Crashlytics:Crash] report submission successful
> [Answers] Finished transmission of '11XXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXX46'.

So far it's been around 48h of struggling with that problem so, even assuming pretty long firebase delay, issues supposed to be there.
Source code changes only. Unit test and test app changes to follow. (Splitting original PR into multiple)
**Background:**
- `FIROptions.projectID` is needed for Firebase Installations SDK(FIS SDK) to be sent with API requests
- FIS SDK is a dependency for Firebase Instance ID SDK (IID SDK) (starting from IID SDK 4.3.0)
- IID SDK does not require `FIROptions.projectID`. It means that introducing a new dependency enforcing `projectID` to IID SDK technically is a breaking change and should not be introduced until a major release. 

**Workaround:**
FIS SDK uses `FIROptions. GCMSenderID` in case if `FIROptions.projectID` is missing to avoid breaking changes. (see #4683)

**To be done:**
- Update FIS SDK to enforce `FIROptions.projectID` for the next major release (Firebase 7).

###  Describe your environment

  * Xcode version: 11.3.1
  * Firebase SDK version:  6.15.0
  * Firebase Component:  [Firebase/Crashlytics]
  * Component version:=Version 4.0.0-beta.1

### Describe the problem

6.15.0 - [Firebase/Crashlytics][I-CLS000000] Failed to download settings Error Domain=FIRCLSNetworkError Code=-6 "(null)" UserInfo={retryLimit=1, NSErrorFailingURLStringKey=https://firebase-settings.crashlytics.com/spi/v2/platforms/mac/gmp/x3/settings?build_version=5&display_version=6.1.2&instance=xxxxxxxxx&source=1}

The firebase project is not correctly initialized.  I'm not seeing the Crashlytics console,  but the setup screen.  It properly worked when I ran the app in iOS and the setup screen was removed.

#### Steps to reproduce:

Run the catalyst app on Mac and [FIRApp configure] which produces the error.



