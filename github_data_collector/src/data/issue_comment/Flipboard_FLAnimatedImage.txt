

On iOS 13 system, refresh  FLAnimatedImageView a same gif,it will flash.But iOS  12 system not flash.
an animated image display for once will return a nil LoopCount in its dictionary, which will be convert to 0
eg:https://resource.iiisland.com/user/image/1E01D9492FB3AFCC6C0617C3198F12C5-5d89ce152ed84331c6a4facc.gif
load this gif,then push to other controller
finally pop,you will find,the gif no display
Usually, no LoopCount property means that the loop count is 1 rather than indefinite. For example, the Photoshop always create a gif without LoopCount info if the loop count was setted to 1.
  Hi,
  [SwiftPM](https://goo.gl/E01ufX) is Swift's official package manager.
  
  Here some articles about SwiftPM:
  
  * [An Introduction to the Swift Package Manager](https://goo.gl/byiOc6)
  * [Swift Dependency Management for iOS](https://goo.gl/7eaz1A)
  * [Getting Started with Swift Package Manager (SwiftPM)](https://goo.gl/rCHeQU)
  * [Swift.org: Package Manager](https://goo.gl/E01ufX)
  
  When your component is compatible with SwiftPM add on your `README.md` [![SwiftPM Compatible](https://camo.githubusercontent.com/52e3db230991dda10458295d71c859c34be466b6/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f5377696674504d2d436f6d70617469626c652d627269676874677265656e2e737667)](https://goo.gl/E01ufX) badge on top and add a section for the installation with SwiftPM.


I commented out this code and it returned to normal.

```
- (void)purgeFrameCacheIfNeeded
{
//     Purge frames that are currently cached but don't need to be.
//     But not if we're still under the number of frames to cache.
//     This way, if all frames are allowed to be cached (the common case), we can skip all the `NSIndexSet` math below.
    if ([self.cachedFrameIndexes count] > self.frameCacheSizeCurrent) {
        NSMutableIndexSet *indexesToPurge = [self.cachedFrameIndexes mutableCopy];
        [indexesToPurge removeIndexes:[self frameIndexesToCache]];
        [indexesToPurge enumerateRangesUsingBlock:^(NSRange range, BOOL *stop) {
            // Iterate through contiguous indexes; can be faster than `enumerateIndexesInRange:options:usingBlock:`.
            for (NSUInteger i = range.location; i < NSMaxRange(range); i++) {
                [self.cachedFrameIndexes removeIndex:i];
                [self.cachedFramesForIndexes removeObjectForKey:@(i)];
                // Note: Don't `CGImageSourceRemoveCacheAtIndex` on the image source for frames that we don't want cached any longer to maintain O(1) time access.
#if defined(DEBUG) && DEBUG
                if ([self.debug_delegate respondsToSelector:@selector(debug_animatedImage:didUpdateCachedFrames:)]) {
                    dispatch_async(dispatch_get_main_queue(), ^{
                        [self.debug_delegate debug_animatedImage:self didUpdateCachedFrames:self.cachedFrameIndexes];
                    });
                }
#endif
            }
        }];
        NSLog(@"%@\n   %@\n   %@\n", self.cachedFrameIndexes, indexesToPurge,[self frameIndexesToCache]);
    }
}
```