I need to save feather data in a more compact format. After making several tests I found that after using the "zip" function the size of the "feather" data file reduce up to 90%. 

So, there is a simple question - does anyway to save data as a "feather" file with let say argument like "compressed = zip" to save disk space. 

library(feather)
library(zip)

# Write data in feather format
write_feather(df, "data.feather)

# Write data in zip feather format
zip("data.feather.zip", "data.feather")

# How to have commands like these ones without using disk space for temp file ?
write_feather(df, "data.feather.zip", format = "zip")
df <- read_feather("data.feather.zip", format = "zip")


Thanks!
I'm trying to use feather to transfer large data.frames between R and Python.  

However, reading data fails after some size.  Below is a brief reproducible example:

```
seqs <- paste0(rep("A", 77), collapse="")
N <- 40000000 # 40 million
df <- data.frame(sequences = seqs, var1 = runif(N), var2 = sample(N), stringsAsFactors = F)
write_feather(df, path = "/tmp/test.feather")
z <- read_feather("/tmp/test.feather")
```

I am using the latest CRAN version.  
Added some installation commands. See #322
It seems that `feather_metadata` has some IO issues in the new release of feather on CRAN (0.3.2). See example below.

@jimhester_ Related to this, any chance of getting @hrbrmstr's [PR](https://github.com/wesm/feather/pull/326) into the next release?

```
library(feather)
dat <- data.frame(a = 1:3, b = 4:6)
attr(dat, "description") <- "A data.frame with the following information: ..."
write_feather(dat,  path = "~/df.feather")
rdat <- read_feather("~/df.feather")
feather_metadata("~/df.feather")

Error in metadataFeather(path) : 
  IO error: Failed to open file: ~/df.feather
```
I am attempting to save the output of the ipumsr package as applied to the Current Population Survey as a feather file. Almost all of the feather output is of type "labeled," in a format I understand to be identical to that produced by the haven package.

feather seems to strip off the labels, or at least, I do not see them. If they are there, is there a way to make them visible? if they are not there, is there any way for me to get them there?

Hope so, because Man! these feather files are like lightning.
Hi, I am using python for NLP and feather to exchange dataframes between R and python. Here is the re-produceable example:

`import pandas as pd`
`from textblob import TextBlob`
`import feather`

`data = {'tweet':['Analytics Fahad provides a great platform to learn data science', 'Good service', 'no communication from you', 'terrible experience','Waiting callback to ask how things are'],'doc_id':[28,34,29,42,44]}`

`df = pd.DataFrame(data)`
`#df['sentiment'] = df['tweet'].apply(lambda tweet: TextBlob(tweet).sentiment)
df['nouns_p'] = df['tweet'].apply(lambda tweet: TextBlob(tweet).noun_phrases)
print(df)`
`path = 'example_noun_phrases.feather'`
`feather.write_dataframe(df, path)`

Here is the error:

`Traceback (most recent call last):
  File "C:\Users\607518~1\AppData\Local\Temp\RtmpKWZDDp\chunk-code-6598338e3ba7.txt", line 13, in <module>
    feather.write_dataframe(df, path)
  File "C:\Users\user\AppData\Local\Continuum\anaconda3\lib\site-packages\pyarrow\feather.py", line 178, in write_feather
    writer.write(df)
  File "C:\Users\user\AppData\Local\Continuum\anaconda3\lib\site-packages\pyarrow\feather.py", line 94, in write
    self.writer.write_array(name, col)
  File "pyarrow\feather.pxi", line 67, in pyarrow.lib.FeatherWriter.write_array
  File "pyarrow\error.pxi", line 89, in pyarrow.lib.check_status
pyarrow.lib.ArrowNotImplementedError: list<item: string>`

As a result I can't read the feather back in to R for further analysis. I have also commented a line which gives sentiment score. This causes a bigger error msg. you can try that yourself.

I am an R user with basic python3 understanding. Any pointers will be appreciated

Regards,

Following are the `dtypes` of the Pandas Dataframe I am using:

![image](https://user-images.githubusercontent.com/22957388/50009866-0d8d8080-ffde-11e8-96b7-bb838bc2680a.png)

My Python code:
```python
df_raw.to_feather('malware-raw')
```

Error stack:
![image](https://user-images.githubusercontent.com/22957388/50009964-4594c380-ffde-11e8-84e4-9f259db4c569.png)

Need help in resolving this!
Any custom `~/.Rprofile` file that prints messages will break the current endian detection.

Changed to run in `--vanilla` which implies `--no-site-file`, `--no-init-file`, `--no-environ` and `--no-restore`.

Example of behaviour with my custom `~/.Rprofile`

```r
.First <- function() {
    cat("\nWelcome at", date(), "\n")
}

.Last <- function() {
    cat("\nGoodbye at", date(), "\n")
}
```

```bash
> Rscript --no-site-file -e 'cat(.Platform$endian)'

Welcome at Wed Nov 14 14:40:31 2018
little
Goodbye at Wed Nov 14 14:40:31 2018
```

```bash
> Rscript --no-site-file --vanilla -e 'cat(.Platform$endian)'
little
```


Hello there,

Thanks for this amazing format. I really like the interoperability between Python and R. 

I wonder if the following is a bug. When I create a large file with `pandas` and I write to disk using `to_feather`, then killing the processing makes me UNABLE to delete the file from my folder.

Windows complains that the file is still in use in `python` (although the processing has stopped permanently). This is annoying because it seems I must restart my session to "break" the link with Python.

Am I missing something here?
Thanks!
could in-place type coercion or promotion be applied with a warning to prevent this?

```py
import pandas as pd

testdf = pd.DataFrame({'testcol':['item1', 'item2', 3, 'item4']})

testdf.to_feather('testdf.feather')

```

end of Traceback
```py
 File "pyarrow/array.pxi", line 182, in pyarrow.lib.array
 File "pyarrow/array.pxi", line 82, in pyarrow.lib._ndarray_to_array
 File "pyarrow/error.pxi", line 91, in pyarrow.lib.check_status
pyarrow.lib.ArrowTypeError: ("Expected a string or bytes object, got a 'int' object", 'Conversion failed for column testcol with type object')

```


Simple work-around:

```py
import pandas as pd

testdf = pd.DataFrame({'testcol':['item1', 'item2', 3, 'item4']})
testdf['testcol'] = testdf['testcol'].astype(str)

testdf.to_feather('testdf.feather')
```