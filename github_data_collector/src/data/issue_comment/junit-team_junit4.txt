I reported this issue in junit-team/junit5#1964, but perhaps should have reported it here. I didn't realise that there was still active development on JUnit 4.

If the JUnit 4 runner encounters a class that extends `TestCase` *and* has `@Test` annotations in it, then it will silently ignore all of the JUnit 4 tests. It would be good if it were not so silent about it, as it could lull people into a false sense of security that all their tests are passing, when actually some are simply not running at all.

Ideal solution: runner should run both sets of tests.
Acceptable solution: runner should check for this situation and generate an error or warning if it is found.
Provide information about alternatives to the expected parameter which can be used to overcome the limitations of expected.

This is an improvement for JUnit 4.13 to the fix for #806 (84dcb64).
Minor clean up. Does **3** things:

- Removing commented out lines of code.

> "It makes me crazy to see stretches of code that are commented out. 
> Who knows how old it is?
> Who knows whether or not it's meaningful? 
> Yet no one will delete it because everyone assumes someone else needs it or has plans for it. Commented-out code is an abomination." 

-Clean Code (chapter 17) by [Uncle Bob](https://en.wikipedia.org/wiki/Robert_C._Martin)

- Cleaning up unused imports and deleting imports from the same package.

- Reordering modifiers to comply with the Java Language Specification:

> The Java Language Specification recommends listing modifiers in the following order:
> 
> 1. Annotations
> 2. public
> 3. protected
> 4. private
> 5. abstract
> 6. static
> 7. final
> 8. transient
> 9. volatile
> 10. synchronized
> 11. native
> 12. strictfp

Hello, we're developing an automated system that detects inconsistent variable names in a large software project. Our system checks if each variable name is consistent with other variables in the project in its usage pattern, and proposes correct candidates if inconsistency is detected. This is a part of academic research that we hope to publish soon, but as a part of the evaluation, we applied our systems to your projects and got a few interesting results. We carefully reviewed our system output and manually created a patch to correct a few variable names. We would be delighted if this patch is found to be useful. If you have a question or suggestion regarding this patch, we'd happily
answer. Thank you.

P.S. our patch is purely for readability purposes and does not change any functionality. A couple of issues that we've noticed were left untouched. For example, mixed use of variable names "msg" and "message" were fairly widespread, but we have only corrected a few notable instances to minimize our impact.
This is still an issue as of 4.12 and can cause a huge unexpected performance hit.

## Minimal example
For `N=5` datapoints of type `T=int` and `M=3` arguments of type `T` to a Theory
```
import org.junit.runner.RunWith;
import org.junit.experimental.theories.Theory;
import org.junit.experimental.theories.Theories;
import org.junit.experimental.theories.DataPoints;
import static org.junit.Assert.assertTrue;

@RunWith(Theories.class)
public class DataPointsBug {

    @DataPoints
    public static int[] generateDataPoints() {
        System.out.println("generateDataPoints()");
        // Expensive operation
        try {
            Thread.sleep(1000);
        } catch (InterruptedException ex) {
        }
        return new int[] {1,2,3,4,5};
    }

    @Theory
    public void manyArguments(int a, int b, int c) {
        // Cheap test
        assertTrue(a > 0 && b > 0 && c > 0);
    }
}
```

## Output
```
generateDataPoints()
<line repeated 30 more times>

Finished in 31s 45ms
```

In general, for `N` datapoints of type `T` and a Theory taking `M` arguments of type `T`, this requires `S = sum(1 + N + N^2 + ... + N^M) ~ O(N^M)`, which seems pretty excessive...

## Workaround
It is an easy-enough workaround to store the generator output once and annotate the variable with `@DataPoints`:

```
import org.junit.runner.RunWith;
import org.junit.experimental.theories.Theory;
import org.junit.experimental.theories.Theories;
import org.junit.experimental.theories.DataPoints;
import static org.junit.Assert.assertTrue;

@RunWith(Theories.class)
public class DataPointsBug {

    private static int[] generateDataPoints() {
        System.out.println("generateDataPoints()");
        // Expensive operation
        try {
            Thread.sleep(1000);
        } catch (InterruptedException ex) {
        }
        return new int[] {1,2,3,4,5};
    }
    @DataPoints
    public static int[] dataPoints = generateDataPoints();

    @Theory
    public void manyArguments(int a, int b, int c) {
        // Cheap test
        assertTrue(a > 0 && b > 0 && c > 0);
    }
}
```

## Output
```
generateDataPoints()

Finished in 1s 37ms
```

Should this be re-opened and addressed?

_Originally posted by @dev930018 in https://github.com/junit-team/junit4/issues/82#issuecomment-539967865_
When calling `assertSame` for two different instances of identical objects the failure message will be quite confusing: "expected same:<[1, 2]> was not:<[1, 2]>".
See https://github.com/junit-team/junit4/blob/8c9e81daf38efa8b4af9ba5c55fe83765ac434d6/src/main/java/org/junit/Assert.java#L829

I think the clarity could be improved by adding identityHashCode to the message, like this:
"expected same:<[1, 2]@ba38e> was not:<[1, 2]@de440>"
Or maybe even with the class name:
"expected same:<java.util.List@ba38e [1, 2]> was not:<java.util.List@de440 [1, 2]>"
Cucumber-jvm needs just an extra method added so that we can add annotations to the descriptions.

For more info please check https://github.com/cucumber/cucumber-jvm/pull/1761
Representing durations as `long`s can easily lead to unit mismatch problems.
Representing durations as `long, TimeUnit` pairs can require plumbing 2 values through multiple layers (and can suffer from unit mismatch or truncation issues).

Could proper `java.time.Duration` support be added to the `Timeout` class?

(If this should be filed under junit5, please let me know and I'll open it there.)
When I have a test with 

`@Parameterized.Parameters(name = "{1} : {0}")`

If I try to rerun failed tests in Intellij Idea, then I get:
```
java.lang.Exception: No tests found matching Tests from org.junit.runner.Request$1@5ae50ce6

	at org.junit.internal.requests.FilterRequest.getRunner(FilterRequest.java:40)
	at com.intellij.junit4.JUnit4IdeaTestRunner.startRunnerWithArgs(JUnit4IdeaTestRunner.java:49)
	at com.intellij.rt.execution.junit.IdeaTestRunner$Repeater.startRunnerWithArgs(IdeaTestRunner.java:47)
	at com.intellij.rt.execution.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:242)
	at com.intellij.rt.execution.junit.JUnitStarter.main(JUnitStarter.java:70)

```

If I leave the @Parameterized.Parameters without name it works, any idea?

Found a Junit5 related issue, https://github.com/junit-team/junit5/issues/1386

Junit version 4.12, can this be related or should I open another issue?
I have parameters in both the base and derived test classes. So I want the tests in derived class to run for the cartesian product of those.

Sample code -

```
@RunWith(Parameterized.class)
public class BaseTest {

  public BaseTest() {
  }

  @BeforeClass
  public static void setupbase() {
  }

  @Parameterized.Parameter(0)
  public String baseParam;

  @Parameterized.Parameters
  public static Collection<Object[]> data() {
    return Arrays.asList(new Object[][] {
        { "base1" }, { "base2" }
    });
  }
}



public class Test1 extends BaseTest {

  @BeforeClass
  public static void setup() {
  }

  @Parameterized.Parameter(0)
  public  String derivedParam;

  @Parameterized.Parameters
  public static Collection<Object[]> data() {
    return Arrays.asList(new Object[][] {
        { "derived1" }, { "derived2" }
    });
  }

  @Test
  public void testcase1() {
    System.out.println("Base Param = " + baseParam);
    System.out.println("Derived Param = " + derivedParam);
  }
}

```



The expected output - 

```
Base Param = base1
Derived Param = derived1
Base Param = base1
Derived Param = derived2
Base Param = base2
Derived Param = derived1
Base Param = base2
Derived Param = derived2
```


Present error while running - 

```
> java.lang.Exception: @Parameter(0) is used more than once (2).
> 
> 	at org.junit.runners.parameterized.BlockJUnit4ClassRunnerWithParameters.validateFields(BlockJUnit4ClassRunnerWithParameters.java:119)
> 	at org.junit.runners.BlockJUnit4ClassRunner.collectInitializationErrors(BlockJUnit4ClassRunner.java:129)
> 	at org.junit.runners.ParentRunner.validate(ParentRunner.java:416)
> 	at org.junit.runners.ParentRunner.<init>(ParentRunner.java:84)
> 	at org.junit.runners.BlockJUnit4ClassRunner.<init>(BlockJUnit4ClassRunner.java:65)
> 	at org.junit.runners.parameterized.BlockJUnit4ClassRunnerWithParameters.<init>(BlockJUnit4ClassRunnerWithParameters.java:27)
> 	at org.junit.runners.parameterized.BlockJUnit4ClassRunnerWithParametersFactory.createRunnerForTestWithParameters(BlockJUnit4ClassRunnerWithParametersFactory.java:16)
> 	at org.junit.runners.Parameterized.createRunnersForParameters(Parameterized.java:313)
> 	at org.junit.runners.Parameterized.<init>(Parameterized.java:248)
> 	at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)
> 	at sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62)
> 	at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
> 	at java.lang.reflect.Constructor.newInstance(Constructor.java:423)
> 	at org.junit.internal.builders.AnnotatedBuilder.buildRunner(AnnotatedBuilder.java:104)
> 	at org.junit.internal.builders.AnnotatedBuilder.runnerForClass(AnnotatedBuilder.java:86)
> 	at org.junit.runners.model.RunnerBuilder.safeRunnerForClass(RunnerBuilder.java:59)
> 	at org.junit.internal.builders.AllDefaultPossibilitiesBuilder.runnerForClass(AllDefaultPossibilitiesBuilder.java:26)
> 	at org.junit.runners.model.RunnerBuilder.safeRunnerForClass(RunnerBuilder.java:59)
> 	at org.junit.internal.requests.ClassRequest.getRunner(ClassRequest.java:33)
> 	at org.junit.internal.requests.FilterRequest.getRunner(FilterRequest.java:36)
> 	at com.intellij.junit4.JUnit4IdeaTestRunner.startRunnerWithArgs(JUnit4IdeaTestRunner.java:49)
> 	at com.intellij.rt.execution.junit.IdeaTestRunner$Repeater.startRunnerWithArgs(IdeaTestRunner.java:47)
> 	at com.intellij.rt.execution.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:242)
> 	at com.intellij.rt.execution.junit.JUnitStarter.main(JUnitStarter.java:70)
> 
> 
> java.lang.Exception: @Parameter(1) is never used.
> 
> 	at org.junit.runners.parameterized.BlockJUnit4ClassRunnerWithParameters.validateFields(BlockJUnit4ClassRunnerWithParameters.java:116)
> 	at org.junit.runners.BlockJUnit4ClassRunner.collectInitializationErrors(BlockJUnit4ClassRunner.java:129)
> 	at org.junit.runners.ParentRunner.validate(ParentRunner.java:416)
> 	at org.junit.runners.ParentRunner.<init>(ParentRunner.java:84)
> 	at org.junit.runners.BlockJUnit4ClassRunner.<init>(BlockJUnit4ClassRunner.java:65)
> 	at org.junit.runners.parameterized.BlockJUnit4ClassRunnerWithParameters.<init>(BlockJUnit4ClassRunnerWithParameters.java:27)
> 	at org.junit.runners.parameterized.BlockJUnit4ClassRunnerWithParametersFactory.createRunnerForTestWithParameters(BlockJUnit4ClassRunnerWithParametersFactory.java:16)
> 	at org.junit.runners.Parameterized.createRunnersForParameters(Parameterized.java:313)
> 	at org.junit.runners.Parameterized.<init>(Parameterized.java:248)
> 	at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)
> 	at sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62)
> 	at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
> 	at java.lang.reflect.Constructor.newInstance(Constructor.java:423)
> 	at org.junit.internal.builders.AnnotatedBuilder.buildRunner(AnnotatedBuilder.java:104)
> 	at org.junit.internal.builders.AnnotatedBuilder.runnerForClass(AnnotatedBuilder.java:86)
> 	at org.junit.runners.model.RunnerBuilder.safeRunnerForClass(RunnerBuilder.java:59)
> 	at org.junit.internal.builders.AllDefaultPossibilitiesBuilder.runnerForClass(AllDefaultPossibilitiesBuilder.java:26)
> 	at org.junit.runners.model.RunnerBuilder.safeRunnerForClass(RunnerBuilder.java:59)
> 	at org.junit.internal.requests.ClassRequest.getRunner(ClassRequest.java:33)
> 	at org.junit.internal.requests.FilterRequest.getRunner(FilterRequest.java:36)
```


Version - Junit 4.12