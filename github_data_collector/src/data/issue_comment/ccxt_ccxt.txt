
Add CoinBene spot exchange
Hi guys, i'm working on the implementation one the connectors to the DEX exchange, and facing with a interesting problem. For submit orders to our exchange we need to sign a request types/values by Keccak/Sha3. Sha3 implementation in the Exchange class in the CCXT is generate a types for values automatically, but for correct hash (in the side our exchange) we need to use a uint8 instead of uint256 in the one of request parameters. 
In the Exchange class for get hashes with custom types you use a ethAbi.solidityKeccak(), but in the my market implementation i can't get access to this method from Exchange class. 
How can I access this function, or what alternatives can I use to implement this using the internal CCXT functionality, without using external dependencies ?
makes all `parseBalance` code the same as the js code, with incremental balance structures the 'free' keys were getting parsed as currencies 
Please clarify the semantics of negative and zero precision parameter of `decimal_to_precision()` when SIGNIFICANT_DIGITS precisionMode is used.

When precisionMode is set to SIGNIFICANT_DIGITS it's clear how to treat positive values of the precision parameter -- it's the number of significant digits to keep in the result of `decimal_to_precision()`. However, negative (as well as zero) precision does not have any mathematical or practical meaning for this precision mode.

Particularly, I cannot understand the following results in the test_decimal_to_precision.py:

```
assert(decimal_to_precision('1234.69', TRUNCATE, 0, SIGNIFICANT_DIGITS) == '0')
assert(decimal_to_precision('1234.69', TRUNCATE, 0, SIGNIFICANT_DIGITS, PAD_WITH_ZERO) == '0')
...
assert(decimal_to_precision('0', ROUND, 0, SIGNIFICANT_DIGITS) == '0')
assert(decimal_to_precision('-0.123', ROUND, 0, SIGNIFICANT_DIGITS) == '0')
```
-- okay, I can imagine, this can mean 'zero significant digits', so the result is '0'. 

So 1) is it true that the result of calling `decimal_to_precision(x, ROUND, 0, SIGNIFICANT_DIGITS)` should be `'0'` for any x? Same for TRUNCATE rounding mode?

But then 2) the following is completely hidden for understanding:
```
assert(decimal_to_precision('69.3', TRUNCATE, -1, SIGNIFICANT_DIGITS) == '60')
assert(decimal_to_precision('-69.3', TRUNCATE, -1, SIGNIFICANT_DIGITS) == '-60')
assert(decimal_to_precision('69.3', TRUNCATE, -2, SIGNIFICANT_DIGITS) == '0')
```

- OS: linux
- Programming Language version: python
- CCXT version:  1.21.59
- Exchange: binance
- Method: all / several


Binance supports "easy" switching to the futures api by initializing with `ccxt.binance({'defaultType': 'future'}` - which will then internally swaps some/most endpoints to use the FAPI endpoints.

I think this same approach should be applied to the margin API with `ccxt.binance({'defaultType': 'margin'}` - using the sapi endpoints.

Currently, specifying `'defaultType': 'margin'` will have ccxt use the futures API, as it'll end up in the "else" tree within all methods. 

https://github.com/ccxt/ccxt/blob/a7cb7d65fc1d5d8acbb8ae290a7107b4ddae1fbd/python/ccxt/binance.py#L495




Work in progress - do not merge
- implement methods: `createOrder`, `cancelOrder`, `cancelAllOrders`, `fetchOrder`,
`fetchOpenOrders`, `fetchClosedOrders`, `fetchStatus`
- implement `handleErrors` method
- add option `fetchOrderOnCreate`
This would simplify the use of these functions in the exchanges: they often reimplement these methods simply because a different rounding mode is to be used by the code logic.

Hi, if possible please add DCoin.  Thanks.

https://www.dcoin.com/
https://github.com/dcoinapi/openapi/wiki