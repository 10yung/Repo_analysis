If I call pqueue clear at the beginning of my function to avoid uncontrolled increase of the tasks, the p-queue seems to ignore this command. The queue is still complete full after call 

`await queue.clear();`

How to reliable delete / clear the queue?

Hello,

Thank you for the great work with this library! We tried upgrading from version 6.2.0 to 6.2.1 and are getting the following TypeScript compiler errors:

```
node_modules/p-queue/dist/index.d.ts:28:17 - error TS7033: Property '_doesIntervalAllowAnother' implicitly has type 'any', because its get accessor lacks a return type annotation.

28     private get _doesIntervalAllowAnother();
                   ~~~~~~~~~~~~~~~~~~~~~~~~~

node_modules/p-queue/dist/index.d.ts:29:17 - error TS7033: Property '_doesConcurrentAllowAnother' implicitly has type 'any', because its get accessor lacks a return type annotation.

29     private get _doesConcurrentAllowAnother();
                   ~~~~~~~~~~~~~~~~~~~~~~~~~~~
```

We are using TypeScript 3.6.4 and have `noImplicitAny: true` set.

The [type definitions for version 6.2.0](https://unpkg.com/browse/p-queue@6.2.0/dist/index.d.ts) declared them as private variables:
```typescript
private readonly _doesIntervalAllowAnother;
private readonly _doesConcurrentAllowAnother;
```

The [type definitions for version 6.2.1](https://unpkg.com/browse/p-queue@6.2.1/dist/index.d.ts) now declare them as private getters:
```typescript
private get _doesIntervalAllowAnother();
private get _doesConcurrentAllowAnother();
```

Maybe that's why TypeScript treats them differently?

Thank you for you help!
These libraries are awesome and make building consistent asynchronous code much easier. 

But, is there a mechanism in this library or one of the other p-libraries to have a queue-like data structure like this that implements some type of back-pressure so that if a queue gets to a certain size, the function calling the add() method will pause until the queue size has reduced?
When using it in our angular app,
Angular 8 build for production optimization will fail.
"An unhandled exception occurred: Unexpected token: keyword (default)"
I think it has something to do with terser which was used by angular cli.
I am currently using p-queue in combination with Puppeteer. What I want to achieve is to add the current function to the queue if an exception gets thrown. I am running with concurrency set to 3.

I have the following snippets:

`getAccounts` is simply a method for parsing a json file.

```nodejs
    async init() {
        let accounts = await this.getAccounts();
        accounts.map(async () => {
            await queue.add(() => this.test());
        });
        await queue.onIdle();
        console.log("Done");
    }
```

```nodejs
async test() {
        const browser = await puppeteer.launch({headless: false});
        try {
            const page = await browser.newPage();
            await page.goto(this._url);

            if (Math.floor(Math.random() * 10) > 4) {
                throw new Error("Simulate error");
            }

            await browser.close();
        } catch (error) {
            await browser.close();
            await queue.add(() => this.test());
            console.log(error);
        }
    }
```
When it goes into the catch, the queue just stops. I am not sure if my implementation is right. But it also does not execute `console.log("Done");`.
As far as I can tell, there is no way to get a promise that resolves for all items that are currently in the queue to finish (even if new ones are added later). A hacky workaround is `const p = q.add(() => {})` which does get you this, but at the expense of adding an item to the queue.
Hi, i'm finding when running the queue for extended periods there appear to be handles held / memory not reducing over time.

i.e.:
```ts
import PQueue from 'p-queue';

class Cow {
  beef: number;

  constructor(i: number) {
    this.beef = i;
  }
}

async function test(queue: any) {
  for (let j = 0; j < 30000; j++) {
    const promises = [];
    console.log(`Start... ${j}`);

    for (let i = 0; i < 1000; i++) {
      promises.push(
        queue.add(async () => {
          const arr = [];
          for (let i = 0; i < 100; i++) {
            arr.push(new Cow(i));
          }
        }),
      );
    }

    await Promise.all(promises);
  }
}

(async () => {
  const queue = new PQueue({ concurrency: 5 });
  await test(queue);
  console.log('Completed');
  while (true) {}
})();
```
When executing this locally with node 10 the memory used before populating the queue is ~8mb but after executing this sits at around ~78mb with the cause of this simple object.

I would have expected the function completion to mark the items in the functions closure as safe for GC.

In my bigger use case, there are objects being delete from a queue elsewhere but they're stuck in memory when dumping the memory.

Am I using the queue incorrectly? Should I be calling a clear of some kind bound to a completion event?
See https://github.com/sindresorhus/p-queue/issues/23
So say I queue up 5-10 async functions, then want to cancel maybe the fifth one. How would I go about doing that?

Looked through the code and couldn't find a remove or delete. Looks like there is a `dequeue` but that seems to work similar to the Array `pop` method.
Fixes #29