If you try to use newer stdweb, running the example gives errors of the form:

```
LinkError: import object field '__js_uniform4vf' is not a Function
```

You can avoid the problem by adding `=` in the Cargo.toml of uni-pad:

```
stdweb =  "=0.4.8"
```

It seems there is no problem with stdweb 0.4.10 but stdweb 0.4.11 is broken.
In newer rustcs you get the following error:

```
error[E0034]: multiple applicable items in scope
   --> -6a12abe767e4c76b/downcast-0.9.2/src/lib.rs:120:38
    |
120 |     fn is_type(&self) -> bool { self.type_id() == TypeId::of::<T>() }
    |                                      ^^^^^^^ multiple `type_id` found
    |
note: candidate #1 is defined in the trait `Any`
   --> -6a12abe767e4c76b/downcast-0.9.2/src/lib.rs:29:5
    |
29  |     fn type_id(&self) -> TypeId { TypeId::of::<Self>() }
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^
    = help: to disambiguate the method call, write `Any::type_id(&self)` instead
note: candidate #2 is defined in the trait `std::any::Any`
    = help: to disambiguate the method call, write `std::any::Any::type_id(&self)` instead
```

Upgrading `nphysics3d` to at least `0.10` would fix the issue (newest is `0.11`).
indices larger than 65535
you code can not fixed this problem.....
How to create a custom imgui widget?
Currently the asset loading mechanism is a bit messy, i would like to refactor it to use [Warmy](https://github.com/phaazon/warmy).  However, Warmy currently do not support async-loading, this issue is for tracking its progress :

Related: https://github.com/phaazon/warmy/issues/15
This is an exploratory issue. wasm-bindgen is making great progress and might be much faster than stdweb for passing data between Rust and js. That might be very interesting, especially for opengl buffers.
https://hacks.mozilla.org/2018/04/javascript-to-rust-and-back-again-a-wasm-bindgen-tale/

Maybe we could start investigating wasm-bindgen on some lower module, like uni_pad or uni_snd

### Goal

#### Standard Material
- [ ] Decide how the standard material and render pipelines works
- [ ] Sky Light 

#### Engine Refactoring
- [ ] Change Component from Rc<RefCell<T>> to Rc<T:Clone> which allow us to use Rc::make_mut instead of borrow_mut()
- [ ] Add TextRenderer for support bitmap and truetype font (maybe by RustType?)
- [ ] Able to us resizable / fixed window 
- [ ] Able to toggle fullscreen 

#### File Structures
- [ ] Use workspace instead of virtual crate
- [ ] Find a way to allow end-user to use the engine with standard assets

#### Assets
- [ ] gltf support

#### Unrust-Editor Basic
... TBD
Right now all future related codes is executing by an adhoc loop in AssetDatabase, we should implement an future executor properly.

Reference: https://docs.rs/futures/0.1/futures/executor/index.html
The current game object transforms hierarchy are very not optimized. We should store some kind of SOA in SceneTree and update it serially.


Shall we upgrade the minimum version to 3.2, or maybe allow end user to override it?