
I'm using visual studio community 2017 (15.6.3) and I'd like to use Visual Rust with it.  I installed the `bin\VisualRust.Setup.2017\Release\VisualRust.Setup.2017.exe` artifact (dated December 4th, 2017) from https://ci.appveyor.com/project/vosen/visualrust/build/artifacts (I couldn't find any other version for VS2017.  It installed just fine with no errors.  When I started VS back up, I don't see anything different---no new templates or project types or anything.  VS2017 does think it's installed (based on going to tools/extensions), it just doesn't seem to do anything.  If I go to add new project or add new file and look/search for rust, nothing.

However, if I open a .rs file in VS, it does syntax highlight it, but "go to definition" doesn't work, and I can't build.
https://blogs.msdn.microsoft.com/visualstudio/2017/11/21/announcing-language-server-protocol-preview-release/

I was looking for the latest version which supports Cargo build. So I downloaded the 154 build (VS2015) But it fails to install with the error:

>  The file is not a valid VSIX package


Visual Studio 2017 (Community) The plugin installs ok. But no Rust project template under "New Project" category 
I've installed visual rust 0.1.2, I have rustc.exe and some other files installed here: C:\Users\steve\.cargo\bin
But when I try to build rust project in msvc 2015 I get this error:

C:\Program Files (x86)\MSBuild\VisualRust\VisualRust.Rust.targets(53,5): error : No Rust installation detected. You can download official Rust installer from https://www.rust-lang.org/downloads.html

How is the installation detected? How can I fix this?
I may have discovered why only master branch release builds were being built:  git LFS quotas:

https://ci.appveyor.com/project/MaulingMonkey/visualrust/build/job/26a7xmxwanmx0snv

```
git clone -q --branch=master https://github.com/MaulingMonkey/VisualRust.git C:\projects\visualrust
Downloading build/7za.exe (1.03 MB)
Error downloading object: build/7za.exe (ff3706e): Smudge error: Error downloading build/7za.exe (ff3706e94d9b769f78e4271928382426cb034b11c5a0f6a8ffea35726cc03692): batch response: This repository is over its data quota. Purchase more data packs to restore access.
```

Apparently my fork counts against your quota.  Sorry about that.  `build\` accounts for ~2MB, `lib\` accounts for ~100MB in the form of two .7z files, apparently containing mingw installs.  As a temporary measure I've disabled appveyor builds from my repository.

It looks like there may be ways to enable caching:

http://help.appveyor.com/discussions/problems/6274-git-lfs-and-build-cache

## Some Options
* ~~Bribe~~ donate to whoever runs PistonDevelopers to get our quota increased
* Hack up appveyor's build scripts to cache lfs stuff (might not be sufficient)
* Switch to an external package manager (chocolatey? lpg likes vcpkg?)
* ~~Just stop using git lfs and put things directly into the repository~~
* ???

## What it's used for
### MinGW
* `build/7za.exe` -- used to unpackage lib/*.7z
* `lib/i686-7.1.0-release-posix-dwarf-rt_v5-rev0.7z` 32-bit MinGW
* `lib/x86_64-7.1.0-release-posix-seh-rt_v5-rev0.7z` 64-bit MinGW
We then repackage gdb and some dependencies from mingw directly into the .vsix as I understand it to enable some built in debugging: https://github.com/PistonDevelopers/VisualRust/blob/master/lib/mingw.msbuild .  This could be axed in favor of:
* Windows Subsystem for Linux (Win 10+)
* https://chocolatey.org/packages/mingw/
Alternatively, it might be worth seeing if it might be preferable to rely on one of the other existing integrations of gdb into visual studio instead of rolling our own...?

### StrongNamer
* `build/StrongNamer.0.0.5/Mono.Cecil.Mdb.dll`
* `build/StrongNamer.0.0.5/Mono.Cecil.Pdb.dll`
* `build/StrongNamer.0.0.5/Mono.Cecil.Rocks.dll`
* `build/StrongNamer.0.0.5/Mono.Cecil.dll`
* `build/StrongNamer.0.0.5/StrongNamer.dll`
I believe these allow us to use unsigned dependencies from signed assemblies.  Might be worth seeing if we can get rid of the dependency by signing more of the projects.  There are also nuget packages:
* https://www.nuget.org/packages/StrongNamer/
* https://www.nuget.org/packages/StrongNamer.For.MsBuild12/
Trying to uninstall the latest VSIX, the VSIX Installer crashed with an error about a missing file:
`C:\PROGRAM FILES (X86)\MICROSOFT VISUAL STUDIO\PREVIEW\ENTERPRISE\COMMON7\IDE\LICENSE.txt`

If I add that file manually, it will uninstall. Seems like the VSIX has a relative path somewhere instead of an absolute one? Not sure why it'd be looking for a file in that directory otherwise.
Have you considered signing the binaries (dll's, setup exe's and VSIX's) with an Authenticode certificate to help prevent tampering in your official builds?

It's easy to integrate into a CI build as well with the code signing service I wrote (https://github.com/onovotny/SignService). Happy to help set that up for you if you want and it supports all of the file types this project needs.
With the latest AppVeyor version for 2017, I'm getting exceptions on build

```
=====================
7/29/2017 2:11:35 PM
System.NullReferenceException: Object reference not set to an instance of an object.
   at VisualRust.Build.Rustc.LogRustcMessage(RustcMessageJson msg, String rootPath, TaskLoggingHelper log)
   at VisualRust.Build.CargoBuild.<ExecuteCargo>b__4_1(Object sender, DataReceivedEventArgs e)
   at System.Diagnostics.Process.OutputReadNotifyUser(String data)
   at System.Diagnostics.AsyncStreamReader.FlushMessageQueue()
   at System.Diagnostics.AsyncStreamReader.GetLinesFromStringBuilder()
   at System.Diagnostics.AsyncStreamReader.ReadBuffer(IAsyncResult ar)
   at System.IO.Stream.ReadWriteTask.InvokeAsyncCallback(Object completedTask)
   at System.Threading.ExecutionContext.RunInternal(ExecutionContext executionContext, ContextCallback callback, Object state, Boolean preserveSyncCtx)
   at System.Threading.ExecutionContext.Run(ExecutionContext executionContext, ContextCallback callback, Object state, Boolean preserveSyncCtx)
   at System.IO.Stream.ReadWriteTask.System.Threading.Tasks.ITaskCompletionAction.Invoke(Task completingTask)
   at System.Threading.Tasks.Task.FinishContinuations()
   at System.Threading.Tasks.Task.FinishStageThree()
   at System.Threading.Tasks.Task.FinishStageTwo()
   at System.Threading.Tasks.Task.Finish(Boolean bUserDelegateExecuted)
   at System.Threading.Tasks.Task.ExecuteWithThreadLocal(Task& currentTaskSlot)
   at System.Threading.Tasks.Task.ExecuteEntry(Boolean bPreventDoubleExecution)
   at System.Threading.Tasks.Task.System.Threading.IThreadPoolWorkItem.ExecuteWorkItem()
   at System.Threading.ThreadPoolWorkQueue.Dispatch()
   at System.Threading._ThreadPoolWaitCallback.PerformWaitCallback()
===================
```

VS 2017 has the CPS project system available, a fully managed replacement to the legacy project systems before. It's the one .NET Core and .NET Standard projects default to, and the ones that have the "ultralight" syntax. Virtually nothing needs to be in it since everything needed is provided by an "SDK" set of targets/props. The "project file" would essentially be mostly blank. The implicit properties would exclude the `target`, `.vs`, and other `.` directories as is common in VS -- not showing build artifacts in the IDE.

It would be really nice if Rust was supported in this way. I imagine that a set of Rust targets could be created that are mostly wrappers around `cargo` to do the build. 

This would be different than the VS 2015 approach, but I believe is ultimately cleaner and faster. 

I suspect that someone from @davkean's team could provide some guidance as to how to do this. The project system itself is open source: https://github.com/dotnet/project-system