I have added three new functions. The first is `CheckDeviceGuard()` which checks the current status of CredentialGuard and its related services. I added this function into the `system` enumeration.

I also added two functions to `ListPowerShellSettings`: `List4103Events()` and `List4104Events()`

These functions look for any recent instances of 4103 or 4104 events and then returns a count of how many were found. Even if logging is not enabled, there may still be events that could be of interest, like commands executed remotely.

If `full` is provided as an option these functions will return some information about the events, such as the name/path of the script and the account used to execute the commands. The functions also collect the full contents of the commands/script blocks, but I commented out the output. It can be _a lot of text_ and may be better to grab the contents after triage.

In place of full scrip block output, I experimented with searching the commands for instances of keywords like `PSCredential` and `password` to highlight events that may contain logged plaintext passwords.
When running seatbelt.exe all on a machine it consistently errored out when encountering file names that were at the maximum permissible length in windows.

The following error was thrown

> Unhandled Exception: System.IO.PathTooLongException: The specified path, file name, or both are too long. The fully qualified file name must be less than 260 characters, and the directory name must be less than 248 characters.
>    at System.IO.Path.SafeSetStackPointerValue(Char* buffer, Int32 index, Char value)
>    at System.IO.Path.NormalizePathFast(String path, Boolean fullCheck)
>    at System.IO.File.GetLastAccessTimeUtc(String path)
>    at Seatbelt.Program.ListInterestingFiles()
>    at Seatbelt.Program.Main(String[] args)

If the program can skip (and maybe count how many files are skipped) without crashing that would be desirable behavior.  Alternately, handling the unusually long values and parsing them the same would be ideal.

Using the latest version of Seatbelt and compiled locally. 

Related: https://github.com/GhostPack/Seatbelt/commit/def4ef3d75d6f28b3b80d3a37b97425f70f3a715
https://github.com/GhostPack/Seatbelt/issues/9

Thanks, 
Hi there,

Would it be possible to incorporate support for the connections.xml file that Oracle SQLDeveloper will drop, containing hostnames and credentials?  Often useful for onward lateral movement.

I believe it is stored in:
`\Users[User]\AppData\Roaming\SQL Developer\System\`

but also often under a subfolder such as:

(Win 7)
`C:\Users\<username>\AppData\Roaming\SQL Developer\systemX.X.X.X.X\o.jdeveloper.db.connection.X.X.X.X.X.X.X\connections.xml`
or
`“C:\users\USER\AppData\Roaming\SQL Developer\system3.1.07.42\o.jdeveloper.db.connection.11.1.1.4.37.59.48”.`

They can also be decrypted using something similar to this:
`https://pypi.org/project/sqldeveloperpassworddecryptor/`

If I figure out how to do it within the code, I'll do a PR, but thought I'd submit this issue so that others can see it also.
Added Carbon Black Defense and Cylance Protect executable processes to "ListInterestingProcesses" hashtable.
Simply added a new condition to IsVirtualMachine, so that VMs running on Citrix XenServer are correctly reported as being virtual.
Added CSFalconContainer.exe process.
### Why these changes?:

Similarly to the refactoring in **Rubeus** and **Watson** (https://github.com/rasta-mouse/Watson), the 6927 line `program.cs` class is a bit of a monster here too. 
This is a nightmare to try to read and understand, and will be a problem to maintain and add to going forward.


### What's changed - in brief:
+ Each 'check' has been moved to a `probe` class in `\Probes\`
+ Added an option `ToFile` - that allows outputting the results to a file
+ Performance improvements around the filesystem scanning:  
**Before:** Completed All Safety Checks in **41** seconds  
**Now:** Completed All Safety Checks in **18** seconds
+ Merged:  
PR 14 (https://github.com/GhostPack/Seatbelt/pull/14) (and fixed a null reference exception)  
PR 15 (https://github.com/GhostPack/Seatbelt/pull/15)
+ Better handling of exceptions allowing checks to continue rather than fail early
+ Re-written command line arguments parser  
+ The command line isn't case sensitive any more


### What hasn't changed:
+ Any of the P/Invoke voodoo  
+ The version number.
+ still .Net 3.5 (this is a pain in the arse for VS 2017 tbh)

### Comments

While working on the code I noticed that `all` wasn't running *all* the available checks - as the help text implied - **this version will run all the available checks if `all` is selected** <- is this correct? If not the `ProbePresets\AllPreset.cs` can simply be changed and the original lines uncommitted.

The probes are in the `Probes` folder and the *Presets* ( *full* \ *all* \ *user* \ *system* ) are in the `ProbePresets` Folder

The new version produces a lot more output - due to better coping with exceptions.

### Testing
I've tested the changes on 2 machines by piping the output from the original version and new versions, and Diffing the output. As far as I can see the functionality between the 2 versions is unchanged except for newline differences and the extra output as noted above.


### How to add new probes?

Every probe/check class needs to implement `IProbe` and have a `ProbeName` property to identify the check.

```
    public class ANewProbe : IProbe
    {
        public static string ProbeName => "NewProbe";
        
        public string List()
        {

            // All code for the check goes here
            // return the results as a string

        }
    }
```

The program will automatically add the probe to the available probes and call it if required. (Just need to add the name & info to the `Info.cs` class)


Created a new `ListAppLockerSettings()` function and added it to the `system` check.
Example output:

```
> Seatbelt.exe system

[...snip...]

=== AppLocker Settings ===

  [*] AppIDSvc is Running

    [*] Appx not configured
    [*] Dll not configured

    [*] Exe is in Audit Mode
      [*] <FilePathRule Id="921cc481-6e17-4653-8f75-050b80acca20" Name="(Default Rule) All files located in the Program Files folder" Description="Allows members of the Everyone group to run applications that are located in the Program Files folder." UserOrGroupSid="S-1-1-0" Action="Allow"><Conditions><FilePathCondition Path="%PROGRAMFILES%\*"/></Conditions></FilePathRule>

      [*] <FilePathRule Id="a61c8b2c-a319-4cd0-9690-d2177cad7b51" Name="(Default Rule) All files located in the Windows folder" Description="Allows members of the Everyone group to run applications that are located in the Windows folder." UserOrGroupSid="S-1-1-0" Action="Allow"><Conditions><FilePathCondition Path="%WINDIR%\*"/></Conditions></FilePathRule>

      [*] <FilePathRule Id="fd686d83-a829-4351-8ff4-27c7de5755d2" Name="(Default Rule) All files" Description="Allows members of the local Administrators group to run all applications." UserOrGroupSid="S-1-5-32-544" Action="Allow"><Conditions><FilePathCondition Path="*"/></Conditions></FilePathRule>

    [*] Msi not configured

    [*] Script is in Enforce Mode
      [*] No rules
```