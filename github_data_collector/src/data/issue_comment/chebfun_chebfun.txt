Hi,

I've used the library for some signal processing and would want to convert my entire algorithm to MEX or C, using MATLAB coder.

Is there a mex file for the entire library?

Please let me know.

Best,
Aditya

See discussion in #1530. (Summary: reintroduce some basic mappings to deal with endpoint singularities)

Creating a pull request (a) to start discussion, (b) since this is fairly light in terms of code and impact elsewhere whilst still allowing some cool stuff (see below), (c) I don't intend to add much more functionality.

```
% Because why not:
>> y = chebfun(@(x) real(sqrt(cos(x)).*cos(200*x)+sqrt(abs(x))-0.7).*(4.2-x.^2).^0.01, [-2 -pi/2 0 pi/2 2], 'singmap', [.5 .5])
>> plot(y); axis equal

y =
   chebfun column (4 smooth pieces)
       interval       length     endpoint values   singmap params 
[      -2,    -1.6]       22       0.7     0.56    [0.5,     0.5]  
[    -1.6,       0]      329      0.56      0.3    [0.5,     0.5]  
[       0,     1.6]      329       0.3     0.56    [0.5,     0.5]  
[     1.6,       2]       22      0.56      0.7    [0.5,     0.5]  
vertical scale = 1.6    Total length = 702
```

![image](https://user-images.githubusercontent.com/2035010/63696097-43942d00-c81a-11e9-9111-cbb27e9b5edf.png)
See also: https://www.chebfun.org/examples/fun/ValentinesDay.html
The normal vector to a complex `chebfun` given by `normal(f, 'unit')` is now actually unit length. This fixes #2268.
```
>> g = chebfun(@(t) 0.3*cos(t) + 1i*sin(t), [0, 2*pi]);
>> ntrue = -1i*diff(g); ntrue = ntrue./abs(ntrue); ntrue = [real(ntrue), imag(ntrue)];
>> n = normal(g, 'unit');
>> norm(n - ntrue)

ans =

     0
```
Asking for the coefficients of a periodic or semi-periodic `separableApprox` (e.g. a `chebfun2(..., 'trig')`, a `spherefun`, or a `diskfun`) fails with an error:
```
>> f = randnfun2('trig');
>> coeffs2(f)
Error using trigtech/chebcoeffs (line 20)
F does not have a finite Chebyshev series. Please input N.

Error in classicfun/chebcoeffs (line 11)
out = chebcoeffs(f.onefun, varargin{:});

Error in chebfun/chebcoeffs (line 93)
    out = chebcoeffs(f.funs{1}, N, kind);

Error in chebfun2/chebcoeffs2 (line 28)
cols_coeffs = chebcoeffs(cols);

Error in chebfun2/coeffs2 (line 47)
[cols_coeffs, d, rows_coeffs] = chebcoeffs2( f );
```

```
>> f = randnfunsphere;
>> chebcoeffs2(f)

Error using trigtech/chebcoeffs (line 20)
F does not have a finite Chebyshev series. Please input N.

Error in classicfun/chebcoeffs (line 11)
out = chebcoeffs(f.onefun, varargin{:});

Error in chebfun/chebcoeffs (line 93)
    out = chebcoeffs(f.funs{1}, N, kind);

Error in separableApprox/chebcoeffs2 (line 28)
cols_coeffs = chebcoeffs(cols);

Error in spherefun/chebcoeffs2 (line 17)
    [varargout{1:nargout}] = chebcoeffs2@separableApprox(varargin{:});
```

```
>> f = randnfundisk;
>> chebcoeffs2(f)
Error using trigtech/chebcoeffs (line 20)
F does not have a finite Chebyshev series. Please input N.

Error in classicfun/chebcoeffs (line 11)
out = chebcoeffs(f.onefun, varargin{:});

Error in chebfun/chebcoeffs (line 93)
    out = chebcoeffs(f.funs{1}, N, kind);

Error in separableApprox/chebcoeffs2 (line 29)
rows_coeffs = chebcoeffs(rows);

Error in diskfun/chebcoeffs2 (line 17)
[varargout{1:nargout}] = chebcoeffs2@separableApprox(varargin{:});
```

This bug causes `chebop2` and `chebfun2.poisson` to fail:
```
>> f = chebfun2(@(x,y) sin(2*pi*x).*sin(2*pi*y), 'trig');
>> N = chebop2(@(u) lap(u));
>> N.bc = 0;
>> u = N \ f;
Error using trigtech/chebcoeffs (line 20)
F does not have a finite Chebyshev series. Please input N.

Error in classicfun/chebcoeffs (line 11)
out = chebcoeffs(f.onefun, varargin{:});

Error in chebfun/chebcoeffs (line 93)
    out = chebcoeffs(f.funs{1}, N, kind);

Error in chebfun2/chebcoeffs2 (line 28)
cols_coeffs = chebcoeffs(cols);

Error in chebfun2/coeffs2 (line 47)
[cols_coeffs, d, rows_coeffs] = chebcoeffs2( f );

Error in chebfun2.poisson (line 138)
[Cf, Df, Rf] = coeffs2(f, m, n);

Error in chebop2.denseSolve (line 21)
    u = chebfun2.poisson(f+N.rhs, g, m, n);

Error in chebop2/solvepde (line 110)
    X = chebop2.denseSolve(N, f, m, n);

Error in  \  (line 20)
[varargout{1:nargout}] = solvepde(varargin{:});
```
This addresses issue #2322 .  It adds `coeffs2vals` and `vals2coeffs` for spherefun and diskfun objects, and also adds these and related functions for spherefunv, diskfunv and chebfun2v objects. 
I think I (and my student) can work around this in the meantime, but the `diskfun` and `spherefun` sub-classes (but not `chebfun2`, `chebfun3(t)`, nor `ballfun`)  are missing the convenience functions `vals2coeffs` and `coeffs2vals`. Also, since Matlab can return multiple outputs, I think the vector field versions could all have the convenience methods too.
Note also, the Givens rotation solution from https://doi.org/10.1016/j.acha.2017.11.001 are not too onerous either (and greatly help with stability!). For example, the following code represents a 2-normalized associated Legendre function of order `m` as a vector of coefficients of 2-normalized associated Legendre functions of order `0` if `m` is even or `1` is `m` is odd. Then, Chebfun's normalized `leg2cheb` and `ultra2ultra` routines could finish converting the coefficients to trigonometric form (on the sphere).

```julia
function alf_hi2lo(N::Int, M::Int)
    # Convention: assume positive and negative 2-normalized associated Legendre functions are the same.
    # Purpose: convert 2-normalized P_{N+M}^M(x) to 2-normalized associated Legendre functions of 
    # order 0 if M is even, of order 1 if M is odd.
    M = abs(M)
    x = zeros(N+M+1)
    x[N+1] = 1.0
    for m = M-2:-2:0
        for l = N+M-2-m:-1:0
            s = sqrt((l+1)*(l+2)/((l+2*m+3)*(l+2*m+4)))
            c = sqrt((2*m+2)*(2*l+2*m+5)/((l+2*m+3)*(l+2*m+4)))
            a1 = x[l+1]
            a2 = x[l+3]
            x[l+1] = c*a1 + s*a2
            x[l+3] = c*a2 - s*a1
        end
    end
    x
end
```
(Presumably only minor modifications are required to make this Matlab compatible.)

_Originally posted by @MikaelSlevinsky in https://github.com/chebfun/chebfun/pull/2276#issuecomment-421474499_
If I run the following code
```
S = spinop('ks');
S.tspan = 100:1e-1:101;
[u,t] = spin(S, 256, 1e-1);
```
I get the following output for `t`:
```
t =

   1.0e+02 *

  Columns 1 through 7

                   0   1.001000000000000   1.002000000000000   1.003000000000000   1.004000000000000   1.005000000000000   1.006000000000000

  Columns 8 through 11

   1.007000000000000   1.008000000000000   1.009000000000000   1.010000000000000
```
`spin` replaces the first entry of `tspan` by `0` and `u{1} = u(t=0)`, which sounds like a bug.

However, `S.tspan = [0 100:1e-1:101];` works as expected.

There seems to be a similar issue for the other spin codes (at least spinsphere).

I think it would be better if the second output argument of `paduapts` was a vector of quadrature weights. At the moment, we have 
```
[x, w] = paduapts(2)
x =
    1.0000    0.5000
    1.0000   -1.0000
         0    1.0000
         0   -0.5000
   -1.0000    0.5000
   -1.0000   -1.0000
w =
  4×3 logical array
   0   1   0
   1   0   1
   0   1   0
   1   0   1
```
where `w` is a logical matrix that denotes the grid points from a Chebyshev tensor grid. 

Could be better to be consistent with `chebpts`, `legpts`, `jacpts`, etc: 
```
[x, w] = legpts(3)
x =
   -0.7746
         0
    0.7746
w =
    0.5556    0.8889    0.5556
```
I want to solve the following equations for γ as a function of λ.  All functions and integrals are on the domain [-1 1].

1 + 2λ ∫ g(x)/(λ²+(x-y)²) dx = 2πg(y)

γ ∫ g(x) dx = λ.

The context is finding the ground state of a one-dimensional gas of bosons that repel each other.  See Lieb and Liniger, https://doi.org/10.1103/PhysRev.130.1605 , Equations 3.18 and 3.20.

The answers I'm getting with the trapezoid rule disagree with the published values, and no error estimates were published, so I asked Chebfun for a third opinion.

    ll = [2.83:0.003:2.86]*1e-2;
    
    for j = 1:length(ll)
    	% solve Equation 3.18 for g by chebfun
    	g = kdens(ll(j));
    	chgam(j) = ll(j)/sum(g);
    	K(j) = chgam(j)/ll(j);
    	E(j) = K(j)^3 * sum(chebfun('x^2')*g);
    
    	% check with the trapezoid rule
    	N = ceil(10/ll(j));
    	[tpgam(j), ~, ~] = linergy(ll(j), N);
    end
    
    plot(ll ,chgam, '.k', ll, tpgam, ':k');
    xlabel '\lambda', ylabel '\gamma'
    legend Chebfun trapezoid location NorthWest
    
    function g = kdens(l)
    	K = @(y,x) 1./(l^2 + (x-y).^2);
    	g = chebop(@(g) 2*pi*g-2*l*fred(K,g))\1;
    end

I've copied the function linergy below, and attached the [output graph](https://github.com/chebfun/chebfun/files/3129722/output.pdf).  Lieb and Liniger proved that γ is a monotonic function of λ, so the Chebfun results are definitely wrong.

I noticed that the file fred.m has a comment:

    % TODO: Determine best options for robust behavior.

linergy.m:

    function [gamma, kk, nk] = linergy(l, N)
    %LINERGY energy of Lieb-Liniger ground state
    %
    % Large grids required for small lambda
    
    % see prx-130-1605.
    
    % integration grid
    if nargin < 2, N = 100; end
    h = 2/N;  xx = h*(0:N)' - 1;
    
    A = 2*l*h./(l^2+(xx-xx').^2);
    A(:,1) = A(:,1)/2;  A(:,end) = A(:,end)/2;	% trapezoid rule
    nk = (2*pi*eye(N+1)-A)\ones(N+1,1);
    tnk = nk;  tnk(1) = tnk(1)/2;  tnk(end) = tnk(end)/2;
    gamma = l/(h*sum(tnk));
    kk = gamma/l*xx;
    
    end
