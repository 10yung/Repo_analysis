Would you accept a PR adding a gRPC implementation of PeerPicker into this repo or would you prefer that lived elsewhere? 

Previously #53 

http: use NewRequestWithContext to support cancellation
- use ctx naming convention
- prefer context.TODO() to nil

Sorry, missed a few of these in my first go.


That would be great to have a look memberlist for peer2peer connection.
https://github.com/hashicorp/memberlist

The tests pass if ReadAt returns in errors for invalid values of offset.
The patch also adds check for error to be returned when dest is larger
in size than source.
in lru/lru.go file, there is a struct which holds as below fields
*list.List
cache map[interface{}]*list.Element

why don't keep only *list.List to implement? 
My use case: I am planning to store a bunch of containers as nodes in the hashring. Each container would look at the hashring and decide what operations to do based on its position in the hashring. In order to do this, I need to access the hashring itself. 
And so, Is there any plan to return the **hashmap** in the struct of hashring in consistenthash.go?

![image](https://user-images.githubusercontent.com/47989381/63474399-dbb2a080-c42d-11e9-9015-52adbc689206.png)

The hashring package of npm gives access to the ring structure itself. I was hoping to find a similar implementation of hashring in go. Would it be possible for you to support this?

Thanks,
Sai
Hi, I'm Yevgeny Pats Founder of [Fuzzit](https://fuzzit.dev) - Continuous fuzzing as a service platform.

We have a free plan for OSS and I would be happy to contribute a PR if that's interesting.
The PR will include the following
- [go-fuzz](https://github.com/dvyukov/go-fuzz) fuzzers (This is generic step not-connected to fuzzit)
- Continuous Fuzzing of master branch which will generate new corpus and look for new crashes
- Regression on every PR that will run the fuzzers through all the generated corpus and fixed crashes from previous step. This will prevent new or old bugs from crippling into master.

You can see our basic example [fuzzitdev/example-go](https://github.com/fuzzitdev/example-go) and you can see an example of "in the wild" integration [google/syzkaller](https://github.com/google/syzkaller).

Let me know if this is something worth working on.

Cheers,
Yevgeny

Hi,

Are there any plans to implement more efficient (write-through or copy) SetProto for protoSink, as described in the comments here: https://github.com/golang/groupcache/blob/master/sinks.go#L198-L201 ?

The current implementation is similar to using a byte slice sink and marshalling the object before inserting it into the cache and unmarshalling when it is returned from the cache.
its in the ByteView.go ,line 65 and 67,which may cause panic