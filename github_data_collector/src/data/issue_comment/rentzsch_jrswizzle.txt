I attempted to swizzle the class method `JSONObjectWithData:options:error:` like this:

```
+ (void)
load
{
    static dispatch_once_t      sInitToken;
    dispatch_once(&sInitToken,
    ^{
        __block NSInvocation* invocation = nil;
        NSError* err = nil;
        invocation = [self jr_swizzleClassMethod: @selector(JSONObjectWithData:options:error:)
                            withBlock:
                            ^(id inObj, NSData* inData, NSJSONReadingOptions inOptions, NSError** outError)
                            {
                                NSLog(@"before %@", inObj);
                                
                                NSInvocation* inv = [invocation copy];
                                
                                [inv setArgument: &inData atIndex: 2];
                                [inv setArgument: &inOptions atIndex: 3];
                                [inv setArgument: &outError atIndex: 4];
                                
                                [inv invokeWithTarget: inObj];
                                
                                id ret = nil;
                                [inv getReturnValue: &ret];
                                
                                NSLog(@"after %@", inObj);
                                
                                return ret;
                            }
                            error: &err];
            if (invocation == nil)
            {
                NSLogDebug(@"Error swizzling NSJSONSerialization: %@", err);
            }
    });
}
```

But unfortunately this doesn't seem to work, as the returned dictionary gets released before a later call to `objc_retainAutoreleasedReturnValue()` deep inside iOS, causing a crash. Enabling Zombie objects shows:

```
*** -[__NSDictionaryI retain]: message sent to deallocated instance 0x600002611440
```
Swizzling with a block requires using a single NSInvocation instance to call the original method. But if you need to set arguments on that invocation, you might be stepping on other threads doing the same thing.

A possible fix is to copy the invocation before modifying it.
In order to use the latest version of this pod as a dependency of another pod, the podspec needs to be on the official repo: https://github.com/Cocoapods/Specs. Currently, it only knows about version 1.0:

```
-> JRSwizzle (1.0)
   one-stop-shop for all your method swizzling needs.
   pod 'JRSwizzle', '~> 1.0'
   - Homepage: https://github.com/rentzsch/jrswizzle
   - Source:   https://github.com/rentzsch/jrswizzle.git
   - Versions: 1.0 [master repo]
```

Updating the repo is done using `trunk`: https://guides.cocoapods.org/making/specs-and-specs-repo.html
```
@implementation UIViewController (Swizzling)
+ (void)load {
    static dispatch_once_t onceToken;
    dispatch_once(&onceToken, ^{
        SEL originSelector = @selector(viewWillAppear:);
        SEL swizzleSelector = @selector(sw_viewWillAppear:);
        [self jr_swizzleMethod:originSelector withMethod:swizzleSelector error:nil];
    });
}

- (void)sw_viewWillAppear:(BOOL)animated {
    [self sw_viewWillAppear:animated];
    NSLog(@"I'm swizzling method");
}
@end
```
```
@implementation ViewController
- (void)viewWillAppear:(BOOL)animated {
    [super viewWillAppear:animated];
    NSLog(@"I'm origin method");
}
@end
```
When calling ``[super viewWillAppear:animated]``, the log--``I'm swizzling method`` print twice. if not, print once. 
So, whether or not to need call super?
In [NSHipster - Method Swizzling](http://nshipster.com/method-swizzling/), it say: **Swizzling should always be done in a dispatch_once.**. 

My question is: should I need using dispatch_once when I use JRSwizzle?

https://github.com/rentzsch/jrswizzle/blob/semver-1.x/JRSwizzle.m#L54

Why need call class_addMethod? can not ensure origMethod is exist ?


Jrswizzle belongs to the 10 most referenced projects on CocoaPods. Keep up the good work. 

\- jr_swizzleMethod:withMethod:error: seems does not work on iOS7 sometimes;

``` objc
// this works
    [self jr_swizzleMethod:@selector(show)
            withMethod:@selector(swizzledShow)
                 error:nil];

// but this does not, and I checked there is no any error
[self jr_swizzleMethod:@selector(dismissWithClickedButtonIndex:animated:)
            withMethod:@selector(swizzledDismissWithClickedButtonIndex:animated:)
                 error:nil];
```

Hi, Jonathan

```
Can Can i use swizzle a method witht a block implementation
```

Normal  swizzleMetod:(SEL)slector withSelctor:(SEL)newSelector

But I want this
 swizzleMetod:(SEL)slector withBlock:(^ )block

because I cannot import WebView(In WebKit framework) to  iOS project, but I want swizzle WebView's method, i cannot write a category for WebView, So I cannot find a place to put my newSector, so I want to use block,

Jonathan, can you give me some suggestions? 

Thank You!
