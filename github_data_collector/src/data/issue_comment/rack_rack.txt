These should be escaped per RFC 3986 section 3.4, which does not
allow them in query strings.

Rack already handled these correctly when processing input, the
test changes are places where the values were checked directly
without running it through an input processor.

Fixes #792
Fixes warning when binary Regexp is used to match against a
CGI value (QUERY_STRING).

ASCII-8BIT encoding is already required for response bodies.
Requiring this encoding for all CGI values would break usage
with puma and potentially other rack servers. So it seems
safest to only require ASCII-8BIT encoding when the value
actually contains non-ASCII.  We could further limit it to
just QUERY_STRING, but I'm not sure we want to do that.

Testing with a few rack servers:

* Unicorn always uses ASCII-8BIT for all CGI values.
* Puma will use UTF-8 for some values, but uses ASCII-8BIT
  for CGI values contianing non-ASCII characters.
* Webrick doesn't support non-ASCII chracters, at least for
  PATH_INFO or QUERY_STRING.

If we don't do this, the only way to avoid the warning would be
to duplicate QUERY_STRING if it is not already binary.  Checking
encoding will slow down parsing even if it already uses
ASCII-8BIT encoding.

Fixes #1183
This is a regression introduced in Rack 2.1.0, possibly after 8c62821f4a464858a6b6ca3c3966ec308d2bb53e was introduced.

Before the aforementioned commit, `MockResponse#body` would return a UTF-8 string as it joins all the response parts together. However, because the aforementioned commit uses `String.new` without specifying an encoding, Ruby would [create a new String with `ASCII-8BIT` encoding
by default](https://ruby-doc.org/core-2.7.0/String.html#method-c-new).

This commit adds failing test cases to prevent future regression to ensure that we return UTF-8 String for all string body, and also making sure that we return binary string if any of the response part is a binary string (with `ASCII-8BIT` encoding).

---

As a side note, I found out about this regression after upgrading to Rack 2.1.1 and found out that API documentation, which is generated using [rspec_api_documentation](https://github.com/zipmark/rspec_api_documentation), no longer show JSON response body. After digging through the code, it turns out they check for [string encoding](https://github.com/zipmark/rspec_api_documentation/blob/560c3bdc7bd5581e7c223334390221ecfc910be8/lib/rspec_api_documentation/client_base.rb#L90-L95) to see if they should include the response body in the documentation or not. After than, I dug through the code and found 8c62821f4a464858a6b6ca3c3966ec308d2bb53e which uses `String.new` without specifying the encoding.

Please let me know if there's any further work on this PR needed to get it merged, or if I'm wrong to assume that I should get UTF-8 String back from `MockResponse#body`. Thank you.
This is stricter than what was previously required.  However,
non-hash response headers would break most of the middleware
that accesses response headers.

Fixes #1222
If the body responds to to_path, the server is allowed to serve
the file at that path and ignore the body.  That works well for
most requests, but not for range requests, since the correct
byte range won't be served.

Work around this issue by using a separate body class for the
partial content responses that does not respond to to_path, and
the current body class for non-partial content responses.

Fixes #1235
Hi.

I'm updating gems used by Sinatra app on Ruby 2.3.5.
After updated Sinatra from '1.4.7' to '2.0.7' and rack from '1.6.8' to '2.0.8', and run `bundle exec rspec`, I got results such as:
```
     Failure/Error: subject { get(base_url, nil, header) }
     ArgumentError:
       wrong number of arguments (given 1, expected 0)
     Shared Example Group: "XXX" called from ./spec/some/spec.rb
     # ./vendor/bundle/ruby/2.3.0/gems/rack-2.0.8/lib/rack/builder.rb:86:in `initialize'
     # ./vendor/bundle/ruby/2.3.0/gems/rack-2.0.8/lib/rack/builder.rb:86:in `new'
     # ./vendor/bundle/ruby/2.3.0/gems/rack-2.0.8/lib/rack/builder.rb:86:in `block in use'
     # ./vendor/bundle/ruby/2.3.0/gems/rack-2.0.8/lib/rack/builder.rb:147:in `block in to_app'
     # ./vendor/bundle/ruby/2.3.0/gems/rack-2.0.8/lib/rack/builder.rb:147:in `each'
     # ./vendor/bundle/ruby/2.3.0/gems/rack-2.0.8/lib/rack/builder.rb:147:in `inject'
     # ./vendor/bundle/ruby/2.3.0/gems/rack-2.0.8/lib/rack/builder.rb:147:in `to_app'
     # ./vendor/bundle/ruby/2.3.0/gems/sinatra-2.0.7/lib/sinatra/base.rb:1488:in `new'
     # ./vendor/bundle/ruby/2.3.0/gems/sinatra-2.0.7/lib/sinatra/base.rb:1477:in `prototype'
     # ./vendor/bundle/ruby/2.3.0/gems/sinatra-2.0.7/lib/sinatra/base.rb:1502:in `block in call'
     # ./vendor/bundle/ruby/2.3.0/gems/sinatra-2.0.7/lib/sinatra/base.rb:1729:in `synchronize'
     # ./vendor/bundle/ruby/2.3.0/gems/sinatra-2.0.7/lib/sinatra/base.rb:1502:in `call'
     # ./vendor/bundle/ruby/2.3.0/gems/rack-test-1.1.0/lib/rack/mock_session.rb:29:in `request'
     # ./vendor/bundle/ruby/2.3.0/gems/rack-test-1.1.0/lib/rack/test.rb:266:in `process_request'
     # ./vendor/bundle/ruby/2.3.0/gems/rack-test-1.1.0/lib/rack/test.rb:129:in `custom_request'
     # ./vendor/bundle/ruby/2.3.0/gems/rack-test-1.1.0/lib/rack/test.rb:58:in `get'
```
I think, the error raises from this line: https://github.com/rack/rack/blob/master/lib/rack/builder.rb#L102

Before updating these gems, I've never been get such errors.
Is this error related to this gem or the other gem?
Or, is it the bug of my apps?

# system configuration
- ruby: 2.3.5p376
- rack (2.0.8)
- sinatra (2.0.7)
I have noticed that other projects which use `Rack::Handler::WEBrick` directly will pass in WEBrick options (ex: `:BindAddress`) as opposed to the standard Rack options (ex: `:Host`). This change prevents overriding any `:BindAddress` options that were explicitly passed in.
See #1472 
When you use `Rack::MockRequest#request` the returning value is a `Rack::MockResponse`, which is a subclass of `Rack::Response`.

Given Rack 2.1 [removed](https://github.com/rack/rack/commit/72959ebc2f300f3b2ccb7ae2aae9f199e611dfb6) `Rack::Response#to_ary`, `Rack::Lint` should explicitly invoke `#to_a` to extract status, headers, and body from current response.

Without this patch, you'll get errors like the following:

```shell
Failures:

  1) Hanami::Router#root path recognition block recognizes
     Failure/Error: actual = app.request("GET", "/", lint: true)

     NoMethodError:
       undefined method `to_i' for #<Rack::MockResponse:0x00007f9212d970c8>
       Did you mean?  to_s
                      to_a
     # /Users/luca/.gem/ruby/2.7.0/gems/rack-2.1.1/lib/rack/lint.rb:621:in `block in check_status'
     # /Users/luca/.gem/ruby/2.7.0/gems/rack-2.1.1/lib/rack/lint.rb:21:in `assert'
     # /Users/luca/.gem/ruby/2.7.0/gems/rack-2.1.1/lib/rack/lint.rb:621:in `check_status'
     # /Users/luca/.gem/ruby/2.7.0/gems/rack-2.1.1/lib/rack/lint.rb:53:in `_call'
     # /Users/luca/.gem/ruby/2.7.0/gems/rack-2.1.1/lib/rack/lint.rb:39:in `call'
     # /Users/luca/.gem/ruby/2.7.0/gems/rack-2.1.1/lib/rack/mock.rb:77:in `request'
     # ./spec/integration/hanami/router/routing_spec.rb:204:in `block (5 levels) in <top (required)>'
```
After updating to 2.1.0, all my tests checking for the `Content-Length` header in responses are failing. It seems like the header is not set anymore somehow.

Here is an example:

```ruby
# config.ru
# frozen_string_literal: true

run lambda { |_| [200, {}, ['Hello, world!']] }
```

```ruby
# spec.rb
require 'rspec'
require 'rspec/its'
require 'rack'
require 'rack/test'

RSpec.configure do |config|
  config.include Rack::Test::Methods
end

describe 'App' do
  def app
    Rack::Builder.parse_file('config.ru').first
  end

  context 'when GET /' do
    subject(:res) { get('/') }

    its(:status) { is_expected.to be 200 }
    its(:headers) { are_expected.to include('Content-Length' => '13') }
    its(:body) { is_expected.to eql 'Hello, world!' }
  end
end
```

```ruby
# test.rb
require 'minitest/global_expectations/autorun'
require 'rack/mock'

describe 'App' do
  def app
    Rack::Builder.parse_file('config.ru').first
  end

  def request
    Rack::MockRequest.new(app)
  end

  it 'GET /' do
    response = request.get('/')

    response.status.must_equal 200
    response.header['Content-Length'].must_equal '13'
    response.body.must_equal 'Hello, world!'
  end
end
```

Gemfile
```ruby
# frozen_string_literal: true

source 'https://rubygems.org'

gem 'rack', '~> 2.1.1'
#gem 'rack', git: 'https://github.com/rack/rack.git'

gem 'rack-test', '~> 1.1.0'
gem 'rspec', '~> 3.9.0'
gem 'rspec-its', '~> 1.3.0'

gem 'minitest', '~> 5.14.0'
gem 'minitest-global_expectations', '~> 1.0.1'
```


Put these files in a same directory and run` rspec spec.rb` if using RSpec or `bundle exec ruby test.rb` to use Minitest

Output with Rack 2.1.0, and Rack-Test 1.1.0:
```
$ rspec spec.rb 
.F.

Failures:

  1) App when GET / headers is expected to include {"Content-Length" => "10"}
     Failure/Error: its(:headers) { are_expected.to include('Content-Length' => '10') }
     
       expected {} to include {"Content-Length" => "10"}
       Diff:
       @@ -1,2 +1 @@
       -"Content-Length" => "10",
       
     # ./spec.rb:19:in `block (3 levels) in <top (required)>'

Finished in 0.04414 seconds (files took 0.16756 seconds to load)
3 examples, 1 failure

Failed examples:

rspec ./spec.rb:19 # App when GET / headers is expected to include {"Content-Length" => "10"}
```

Output with Rack 2.0.8 and Rack-Test 1.1.0:

```
$ rspec spec.rb 
...

Finished in 0.02087 seconds (files took 0.13891 seconds to load)
3 examples, 0 failures
```

I don't really know where the issue comes from, but if I put `use Rack::ContentLength` in the config.ru, specs pass with 2.1.0.