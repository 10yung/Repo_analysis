üöó 
Implement all 32 bits counterparts of the 64 bits syscalls we currently have.

Still alive! üç∞ 

Make HLE.Switch initialize when starting a game and dispose it when closing the GlScreen.

This also make HLE in charge of disposing the audio and gpu backend.

PS: I'm making a note here; "Huge success"
We need to add the commit hash and build number in our CI builds to make it easier to track issues.
Currently the main problem of the JIT cache is that functions are never removed from the cache. #740 improves that a bit, by removing functions that are no longer used from the cache, but we need to also support cache disposal. When the emulation is ended, all the memory used for the code should be freed, and this is not happening currently. Right now it's not a big deal because ending emulation and starting a new game is not possible, but it will be once this is supported.

We may want to consider having one JitCache per Translator instance (JitCache is currently static and thus shared).
`glBlitFramebuffer` and `glBlitNamedFramebuffer` are affected by the `GL_FRAMEBUFFER_SRGB` capability. This one has to be enabled or disabled accordingly when `glBlitFramebuffer`. I haven't found any register that controls this on the 2D engine; it's probably deduced from the texture format (using a non-sRGB format view for blits with sRGB disabled).

One test case is for this issue is Link's Awakening's splash screen.
Currently we have a considerable warnings during build for fields that are never used.
What happens is that those fields are used, but the compiler has no way to know that (either because they are accessed through reflection or in some other way).
We should suppress those warning messages to have a clean build output.
Register [RASTERIZE_ENABLE](https://github.com/envytools/envytools/blob/d799c46c16e6a04c0395c04018b4c326971d0294/rnndb/graph/gf100_3d.xml#L186) is not implemented. This one maps properly to OpenGL's `GL_RASTERIZER_DISCARD` and has to be enabled accordingly for drawing, it also affects clearing but it isn't tested if this is also true on hardware. If I remember correctly, commercial games assume this register is enabled by default.

It is visible in Xenoblade Chronicles 2 were there is a point in the middle of the screen. This is because the game uses a vertex shader invocation with rasterization disabled as if it were a compute shader.
![imagen](https://user-images.githubusercontent.com/26564870/72211489-e805cb80-34aa-11ea-8f22-c515469725ec.png)
![imagen](https://user-images.githubusercontent.com/26564870/72211493-01a71300-34ab-11ea-8a43-5f3bc23185ce.png)
Screenshot taken by Discord user JoyConBoyForever_Octolimar
Our current FCVTAS implementation need a fix for a variant.

```
The instruction at 0x00000000086eeba4 (opcode 0x4e21c8c3) is undefined!
```
## Description:
```
FCVTAS    V3.4S, V6.4S
```

## Required by:
* https://github.com/Ryujinx/Ryujinx-Games-List/issues/56
There are some games that renders to BGRA8 textures, and OpenGL does not support this format, so we currently use RGBA8 instead. An example of such a game is Dragon Marked for Death. Here is how it currently looks like:
![image](https://user-images.githubusercontent.com/5624669/72094577-79cbd800-32f5-11ea-8e70-7a6369ec13f5.png)
Here's how it should look like (image is not mine):
![image](https://user-images.githubusercontent.com/5624669/72094639-95cf7980-32f5-11ea-8df3-2f0e41d07678.png)
Resident Evil 4 has a similar issue, but it's currently unknown if it is also caused by BGRA textures, it needs further investigation.