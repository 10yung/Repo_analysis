Hi I have a case class .

case class User(
  name: Name,
  gender: String ,age:string}

This is a sample case class in some cases my json is incomplete like

{"name":"sagar","gendar":"male"}

Now when I am trying to convert this json to case class using following code

  import sjson.json._
val js = JsValue.fromString(json);
   val userObj = fromjson[User](js)

It's giving me error . Is there any way we can create case class objects from incomplete JSON.

"net.debasishg" % "sjson_2.9.2" % "0.19"

scalaVersion := "2.9.3"

test code:

``` scala
package test

case class QueryJson(
  time_from: Int,
  time_to: (Int, Int)
)

object Main {
  import sjson.json._
  import DefaultProtocol._

  import dispatch.classic.json.JsonParser

  import scala.util.parsing.input.CharSequenceReader

  implicit val QueryJsonFormat: Format[QueryJson] = asProduct2("time_from", "time_to")(QueryJson)(QueryJson.unapply(_).get)

  def main(args: Array[String]) {
    val q = QueryJson(0, (0, 1))
    println(JsonSerialization.tojson(q))
    val js = JsonSerialization.fromjson[QueryJson](JsonParser(new CharSequenceReader("{\"time_from\":0,\"time_to\":null}")))
    println(js.time_from)
    println(js.time_to)
  }
}
```

sbt run result:

```
scala.MatchError: null (of class dispatch.classic.json.JsNull$)
    at sjson.json.BasicTypes$$anon$3.reads(StandardTypes.scala:27)
    at sjson.json.BasicTypes$$anon$3.reads(StandardTypes.scala:23)
    at sjson.json.JsonSerialization$.fromjson(JsonSerialization.scala:9)
    at sjson.json.Generic$$anon$4.reads(Generic.scala:64)
    at sjson.json.JsonSerialization$.fromjson(JsonSerialization.scala:9)
    at test.Main$.main(Main.scala:21)
    at test.Main.main(Main.scala)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
    at java.lang.reflect.Method.invoke(Method.java:601)
```

I think thowing a `RuntimeException` will be better, like what List and Seq do.

When dispatch got rebooted, its json lib got removed. So what would be the ideal upgrade path for json library behind sjson?

Looks like Dispatch Reboot supports json4s (native & jackson) and lift-json out of the box. And apparently json4s(native) is pretty much lift-json only [without](http://json4s.org/) the problems of lift release cycle.

Double.PositiveInfinity, Double.NaN, etc.

In my local branch I've got:

``` scala
  implicit object DoubleFormat extends Format[Double] {
    def writes(o: Double) = try {
      JsValue.apply(o)
    }
    catch {
      // we need Infinity/NaN goodness
      case e: NumberFormatException => JsValue.apply(o.toString)
    }

    def reads(json: JsValue) = json match {
        case JsString(n) => n.toDouble
        case JsNumber(n) => n.doubleValue
        case _           => throw new RuntimeException("Double (or string) expected")
      }
  }
```

I'm not 100% sure the wisdom of this, but it works for me.

Hi there!

This is WhitespaceBot. I'm an [open-source](https://github.com/Gunio/LightWrite) robot that removes trailing white space in your code, and gives you a gitignore file if you didn't have one!  

Why whitespace? Whitespace is an eyesore for developers who use text editors with dark themes. It's not  a huge deal, but it's a bit annoying if you use Vim in a terminal. Really, I'm just a proof of  concept - GitHub's V3 API allows robots to automatically improve open source projects, and that's really cool. Hopefully, somebody, maybe you!, will fork me and make me even more useful. My owner is [funding a bounty](http://gun.io/open/12/add-security-flaw-fixing-features-to-whitespacebot) to anybody who can add security fixing features to me. 

I've only cleaned your most popular project, and I've added you to a list of users not to contact again, so you won't get any more pull requests from me unless you ask. If I'm misbehaving, please email my owner and tell him to turn me off! If this is pull request is of no use to you, please just ignore it.

Thanks!
WhiteSpacebot from [Gun.io](http://gun.io).

Introspection of beans often lead to processing same meta-data repeatedly .. e.g. List of Beans lead to processing of the bean meta-data many times (O(n)). Can this be improved with a cache implementation ?


There is this project called 'Salat' here on Github that is able to serialize case classes without any 'help' from annotations.
Have a look: https://github.com/novus/salat/wiki/Design

Maybe this mechanism could be build into sjson?

Why not to use 
            val field = context.get.getDeclaredField(props.get(name).get)
            val fieldInnerType = field.getGenericType.asInstanceOf[ParameterizedType].getActualTypeArguments()(0)

instead of 
            val field = context.get.getDeclaredField(props.get(name).get)
            val ann = field.getAnnotation(classOf[JSONTypeHint])

when determining types of elements in list field?
For example here https://github.com/debasishg/sjson/blob/master/src/main/scala/sjson/json/JsBean.scala#L182

Thanks,
Oleg.

Hi there --

First of all, I'd like to extend my gratitude to all contributors for providing this really useful library.

In addition, I wanted to know whether it'd be possible to offer users more control when serializing a type that's been annotated with BeanInfo. Specifically, it'd be very helpful to provide a way to tell the serializer that one or more properties ought to be handled through custom logic.

For example:

```
@scala.reflect.BeanInfo
case class Response (content: String, status: Int, uri: java.net.URI)
val r = Response("turtles", 42, new java.net.URI("http://example.org"))
val j = new String(sjson.json.Serializer.SJSON.out(r))
```

The default behavior as I understand it is to recursively serialize each field in a uniform manner. In the case of `uri` (of type `java.net.URI`) the result will be a JSON object containing various properties like host, port, path and so on. This behavior is useful and makes sense in the majority of cases.

However, in a couple of specific places, I need to override it. For example, I'd like the URI to serialize as a JSON string instead of an object. The logic to do this is trivial (e.g. calling either `toString` or `toASCIIString`), yet as far as I can tell from looking at `JsBean.scala`, there is no way to specify it.

It looks like the options I have are to either (a) switch to `JsValues`; (b) switch to one of the type class-based approaches; or (c) use only primitive types for fields instead of more appropriate complex types.

For me, option (a) is not adequate, because it defeats the purpose altogether. Furthermore, option (b) seems too heavyweight when the current approach works so well in most cases with no intervention. Thus I've stuck with (c) so far. Perhaps I'm missing another way to do what I want?

Otherwise, the following two ideas come to mind:
1. Introduce a new annotation, or extend one of the existing ones, to support custom serialization logic.
2. Use reflection to determine whether an object provides a suitable `toJSON` method or equivalent, and if so, invoke it during serialization instead of the default bean property handler.

(Note that the two aren't mutually exclusive. In fact, the annotation could be used to guide or disable the method invocation.)

If there is interest in something like this, I could work on a patch to provided the functionality, though I should mention that I'm new to Scala, so it may take a few tries :).

Thanks once again!

Regards,
  Alvaro
