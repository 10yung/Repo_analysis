when building example 6 with nan I get

```
  CXX(target) Release/obj.target/addon/myobject.o
../myobject.cc:24:3: warning: ignoring return value of function declared with 'warn_unused_result' attribute [-Wunused-result]
  exports->Set(context,
  ^~~~~~~~~~~~ ~~~~~~~~
1 warning generated.
```

Same comment as before, the real dependency is N-API version 4 which is supported by some version of 8.X as well.  In any case this is still a good step.

_Originally posted by @mhdawson in https://github.com/nodejs/node-addon-examples/pull/104_
See https://github.com/nodejs/node-addon-examples/issues/83#issuecomment-521363105

Reading the readme files in the repository and the first HelloWorld example didn't clarify how I should structure this example properly, so I hope you could help me do it right, in case I made a mistake.
Hi, anyone reading this, 

The file `node-addon-examples/5_function_factory/node_0.12/addon.cc` contains a function factory, that's all well and good, but when I do something similiar, instead of using a global function, I'm using an instance function, (sorry, bad C++ vocab, I'm only new...) a function that's a private member of a class, and I want to use that as the function body, where the example uses 

```
void MyFunction(const FunctionCallbackInfo<Value>& args) {
  Isolate* isolate = Isolate::GetCurrent();
  HandleScope scope(isolate);
  args.GetReturnValue().Set(String::NewFromUtf8(isolate, "hello world"));
}
```
as the body. The issue is I get an error when doing this, the error is as follows: `error C3867: 'Class::SampleFunction': non-standard syntax; use '&' to create a pointer to member` and I have no idea what to do about it.
I built the Hello World addon using the node-addon-api successfully, but this is what happened when I tried to run it:
```
E:\programming\node-addon-api_example_helloworld>node hello.js
internal/modules/cjs/loader.js:626
    throw err;
    ^

Error: Cannot find module 'bindings'
Require stack:
- E:\programming\node-addon-api_example_helloworld\hello.js
[90m    at Function.Module._resolveFilename (internal/modules/cjs/loader.js:623:15)[39m
[90m    at Function.Module._load (internal/modules/cjs/loader.js:527:27)[39m
[90m    at Module.require (internal/modules/cjs/loader.js:681:19)[39m
[90m    at require (internal/modules/cjs/helpers.js:16:16)[39m
    at Object.<anonymous> (E:\programming\node-addon-api_example_helloworld\hello.js:1:15)
[90m    at Module._compile (internal/modules/cjs/loader.js:774:30)[39m
[90m    at Object.Module._extensions..js (internal/modules/cjs/loader.js:785:10)[39m
[90m    at Module.load (internal/modules/cjs/loader.js:641:32)[39m
[90m    at Function.Module._load (internal/modules/cjs/loader.js:556:12)[39m
[90m    at Function.Module.runMain (internal/modules/cjs/loader.js:837:10)[39m {
  code: [32m'MODULE_NOT_FOUND'[39m,
  requireStack: [ [32m'E:\\programming\\node-addon-api_example_helloworld\\hello.js'[39m ]
}
```
The module user code is:
```js
const addon = require("bindings")("hello");

console.log(addon.hello());
```
[I just hope the problem isn't the use of double-quotes instead of single-quotes.]

And I need a good place where I can go to learn about how to use the API and the C++ wrapper in more depth.  
As title, it would be great if this repository has an explicit license.
Have a piece of code, that works on node <12, but will need to be converted to for node 12.

```
return static_cast<ext2_filsys>(
  info[0]->ToObject().As<v8::External>()->Value()
);
```
I couldn't see any examples for `v8::External` in conversion (i.e. I'm guessing using it with `Nan::To<v8::Object>`?)

What would be an example of using such `v8::External` cases?
Hello,

Please provide me the full steps to live debug node addon codes using Visual Studio code IDE on Windows OS environment.

Thanks and regards,
Sunny 
Even if javascript makes no difference, V8 can distinguish integers from double for performance reason (looping with a double is a huge loss because the looping variable can't be a cpu register).
I could create numbers that are integers in C++ but now, with N-API, I see no way to create integers, but just doubles.
Isn't this a performance problem?
Is there any way to hint the API to use integers instead?