I came to Robert with a question about the possibility of adding an offset to the raw input data as a convenience = efficiency function of gpu.js. For example, when using graphical mode, and drawing a image composited out of many other images (my use case) It could be useful to simply offset the input with something like.  

`kernel.setOutput({image1:[10, 10], image2:[0, 0]})`

To give an optional x/y offset for each placed image. 

My first attempt at this involved trying to offset the data when loading images in webgl (in /backend/web-gl2/kernel-value/html-image-array.js, line 53, there are offsets and widths that can be set.) This worked well, but unfortunately due to a limitation in webgl, It only works with positive offsets, not negative ones. (there was a workaround here, but because it uses a canvas it might be too slow: https://stackoverflow.com/questions/20930466/webgl-is-there-an-efficient-way-to-upload-only-part-of-an-image-canvas-as-a-tex)

In response to this limitation Robert suggested just modifying the kernel function like so: https://gist.github.com/robertleeplummerjr/26796385d415a928a6f060ef5e6e0310

In this case the offset functionality is not provided by the gpu.js library, and required that the user add a modest amount of extra lines to their kernel. The question came up of whether it would make sense to include this type of function wrapper in general in gpu.js, or it user should just write it manually like shown if they need it. 

Is there any interest in providing an offsets type of option to gpu.js image (or other) inputs to avoid user having to do manual bound checks and index adjustment like in the example? If so I may look into creating the api... 

<!-- If you don't mind add a fun gif or meme, but no pressure -->
![A GIF or MEME to give some spice of the internet](https://github.com/davidlyons/threejs-intro/blob/master/images/300.jpg?raw=true)

<!-- If you don't mind add a fun gif or meme, but no pressure -->
![A GIF or MEME to give some spice of the internet](https://media2.giphy.com/media/3ohzdFHDBEG32PmWJO/giphy.gif)

## *What* is wrong?
<!-- Ex. run takes really long -->

## *Where* does it happen?
<!-- Ex. In GPU.js when trying to run a math function in node.js on my mac -->

## *How* do we replicate the issue?
<!-- Please be specific as possible. Use dashes (-) or numbers (1.) to create a list of steps -->

## *How* important is this (1-5)?
4

## Expected behavior (i.e. solution)
<!-- What do you think should have happened? -->


## Other Comments

```js
let matix1 = [[...],[...]...]
let matix2 = [[...],[...]...]
let kernel = gui.createKernel( function transform( m1, m2 ) {
  ... do something - return value;
}); 
kernel.setOutput( ... );
kernel( matrix1, matrix2 );
```
Just a few Questions:

1. How to  find out m1 or m2 dimensions (width/height/depth)?
In my case m2 can have different widths (x sizes)
I tried array.prototype.length like m1.length ... which failed
=> Transpiler should replace `array.prototype.length` by a command known to gpu?

2.1. Trying out workarounds, passing in dimensions via constants failed:
`kernel.setConstants{ m1: { x: 10, y: 10 }}`
fails with exception. Obviously the type "`{ }`" cannot be handled.
=> Transpiler does not manage to run type transformation?

2.2. Trying another workaround
`kernel.setConstants{ m1dim: [10,10]}`
runs niceley, but produces messy results. Obviously passing in an array as constant mixes up the matrices m1 and/or m2 passed into the function transform (see at the top).
=> Transpiler thread.constants interferes with  function parameters?
When on https://gpu.rocks/ the top navigation links work as expected. If i am on any of those pages and hit F5 or move fwd/back with browser controls the links all go to a 404 error page. Only way to get to various pages it to get back to https://gpu.rocks/ and use the top navigation links. Frustrating...
I found a way to implement [higher-order functions in GLSL](https://stackoverflow.com/a/58673330/975097), but it seems that gpu.js doesn't have this feature yet. Since there are no function pointers in GLSL, gpu.js could use a struct as a "pointer" to each function:

```
struct function{
    int x;
};
function Sin(){
    return function(1);
}
function Cos(){
    return function(2);
}
float call(function func,float x){
    if(func == Sin()){
        return sin(x);
    }
    else if(func == Cos()){
        return cos(x);
    }
}

vec4 map(function func,vec4 a1){
    //this function can be overloaded for different array sizes
    vec4 a2;
    for(int i = 0; i < 4; i++){
        a2[i] = call(func,a1[i]);
    }
    return a2;
}
```

JavaScript functions like `Function.prototype.call`, `Array.prototype.map` and `Array.prototype.reduce` could probably be translated to GLSL in this way.
I noticed that the link to the [kernel playground](http://gpu.rocks/playground) in README.md is broken. Is there another link that still works?
## *What* is wrong?
Only some output elements are counted. This happens for large matrixes, for example I am trying to multiply 272x6400 by 6400x272. This is my kernel:
`const kernel = gpu.createKernel(
        function(a, b) {
          let sum = 0;
          for (var i = 0; i < 6400; i++) {
            sum += a[this.thread.y][i] * b[i][this.thread.x];
          }
          return sum;
        },
        {
          output: [272, 272],
          loopMaxIterations: 2000000000
        }
      );`

The output stops at row 201 by 96th element, so the row with index 200 looks like:
`
    "95": 1618.9285888671875,
    "96": 0,
    "97": 0,
`
And then only zeros are present. The matrixes are ok, numeric js can multiply them correctly.

## *Where* does it happen?
It happens with react native - the expo extension (https://github.com/gpujs/expo-gl)
In the browser, it works fine. 

## *How* do we replicate the issue?
1. Setup react-native project 
2. Add gpu.js and https://github.com/gpujs/expo-gl extension (for me I need to import GPU from 'gpu.js', not {GPU} from 'gpu.js', probably some babel config)
3. try to multiply some random matrixes.

## *How* important is this (1-5)?
4

## Expected behavior (i.e. solution)
All elements are counted


## Other Comments
Thanks for help :)
## *What* is wrong?
<!-- Ex. run takes really long -->
When I use a webgl2 context, kernel map, and a custom return type like "Array(2)", the subKernelResult_<map> variable is declared as float, and produces a fragment shader compiling error. This do not happen with webgl context (WebGL 1).

## *Where* does it happen?
<!-- Ex. In GPU.js when trying to run a math function in node.js on my mac -->
When using createKernelMap with the returnType "Array(2)" in a webgl2 context.

## *How* do we replicate the issue?
<!-- Please be specific as possible. Use dashes (-) or numbers (1.) to create a list of steps -->
- Create and use a webgl2 context
- Create a KernelMap with returnType "Array(2)"
- Run the kernel

## *How* important is this (1-5)?
<!-- On a scale from 1-5 where 5 is the most important how would you rate it? -->
5

## Expected behavior (i.e. solution)
<!-- What do you think should have happened? -->
That it works like with webgl 1

## Other Comments
Edit: The problem is in the `WebGL2Kernel.getKernelString()` implementation. For WebGL2 there is only made a difference bewteen int and float, but not the other data types. The switch-cacse form WebGL 1 for the different datatypes is missing.
## *What* is wrong?
When I set "Array1D(3)" as data type for arguments or constants, the memory usage and cpu continuously rises, until the browser tab dies after some time. 

## *Where* does it happen?
<!-- Ex. In GPU.js when trying to run a math function in node.js on my mac -->
In GPU.js when trying to set the data type to "Array1D(3)" with the kernel settings `argumentTypes` or `constantTypes`.

## *How* do we replicate the issue?
<!-- Please be specific as possible. Use dashes (-) or numbers (1.) to create a list of steps -->
```gpu.createKernel(function(arg) {
  // do stuff
}, {
  output: [1000, 500],
  graphical: true
  argumentsTypes: {
    arg: "Array1D(3)"
  }
});

// Some loop, which calls the kernel e.g. 60 FPS
```

## *How* important is this (1-5)?
<!-- On a scale from 1-5 where 5 is the most important how would you rate it? -->
5

## Expected behavior (i.e. solution)
<!-- What do you think should have happened? -->
No memory leak. Memory and cpu usage should stay stable after the starting of the loop.

## Other Comments
Other arguments wit data type "ArrayTexture(1)" do not produce a memory leak, but I need the data type "Array1D(3)" data type.

## *What* is wrong?
When accessing surrounding pixel in on the y axis, which are out of bounds, it wraps to the other site of the texture, instead of failing, or similar. For example if you have a 200 x 200 texture, and want to access myTexture[200][0], you will get the value of myTexture[0][0].
At the moment, this only happens for the y axis.

## *Where* does it happen?
When accessing a value of texture on the y axis, when it is out of bounds. 

## *How* do we replicate the issue?
See the explanation above.

## *How* important is this (1-5)?
<!-- On a scale from 1-5 where 5 is the most important how would you rate it? -->
2

## Expected behavior (i.e. solution)
<!-- What do you think should have happened? -->
This should be consistent for the x axis as well. Best, this is configurable.

## Other Comments
