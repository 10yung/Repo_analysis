…ersion 5.2.3.RELEASE.
One can configure requestRetryLimit as described on [flowable dosc http task](https://flowable.com/open-source/docs/bpmn/ch07b-BPMN-Constructs/#http-task)

This seems to be ignored as the code goes 

[code](https://github.com/flowable/flowable-engine/blob/e8ac963958d9b31809741d6caa22b6e3ede50838/modules/flowable-http/src/main/java/org/flowable/http/bpmn/impl/HttpActivityBehaviorImpl.java#L138)

```
       if (config.getRequestRetryLimit() > 0) {
            retryCount = config.getRequestRetryLimit();
        }
        httpClientBuilder.setRetryHandler(new DefaultHttpRequestRetryHandler(retryCount, false));
```

Which then leads to ignoring retry feature (within retry handler)

```
    @Override
    public boolean retryRequest(
            final IOException exception,
            final int executionCount,
            final HttpContext context) {
      .. 

        if (!clientContext.isRequestSent() || this.requestSentRetryEnabled) {
            // Retry if the request has not been sent fully or
            // if it's OK to retry methods that have been sent
            return true;
        }
        // otherwise do not retry
        return false;
    }
```

I'd expect this feature to be included in retryhandler, i.e.

```

       if (config.getRequestRetryLimit() > 0) {
            retryCount = config.getRequestRetryLimit();
           httpClientBuilder.setRetryHandler(new DefaultHttpRequestRetryHandler(retryCount, true));
        }
```

 or am I missing something ?

**Describe the bug**
History level is audit.
Flowable version is 6.4.0.
Async history is open and use Kafka as the message queue.
When history job message received form kafka is  later than the flow instance ended,  and "activity-end" history job execute to the AsyncHistoryJobHandler and call the json transformers method "isApplicable", it returns false. Then a AsyncHistoryJobNotApplicableException is throwed. Then the history job is always executed.
This is because the history job "activity-end" will query the act_ru_execution table. but the execution info was deleted when the process instance is ended.  

![image](https://user-images.githubusercontent.com/29472151/72403573-7e790c00-378d-11ea-9b41-92f540b2ece5.png)

**Expected behavior**
Usually ,this is not common. 

**Code**
![image](https://user-images.githubusercontent.com/29472151/72405828-2a722580-3795-11ea-838c-b295b1130b20.png)


**Is your feature request related to a problem?**
Contemporary application's use OpenID Connect for Authentication and OAuth 2.0 (scopes and claims) for Authorization.

**Describe the solution you'd like**
Add support for OAuth 2.0 to Flowable's REST APIs.

See:
- [Support Basic Auth and Spring OAuth 2.0](https://stackoverflow.com/questions/23526644/spring-security-with-oauth2-or-http-basic-authentication-for-the-same-resource)
- [Securing your REST API using Keycloak and Spring OAuth2](https://medium.com/@bcarunmail/securing-rest-api-using-keycloak-and-spring-oauth2-6ddf3a1efcc2)

**Describe alternatives you've considered**
Currently, Flowable only supports Basic Auth.

See: https://github.com/flowable/flowable-engine/issues/660#issue-274448784

**Additional context**
See: [Keycloak, Flowable and OpenLDAP](https://robferguson.org/blog/2020/01/03/keycloak-flowable-and-openldap/)

**Describe the bug**
When I launch the `flowable/all-in-one` Docker image the REST API default user is not created:

![not-created](https://user-images.githubusercontent.com/12203540/72024032-88e86100-32c8-11ea-8594-df7e563ef32b.png)

**Expected behavior**
That the REST API default user is created and is granted the `access-rest-api` privilege:

![flowable-idm-privileges](https://user-images.githubusercontent.com/12203540/72023941-49ba1000-32c8-11ea-90fc-baae4266d8fc.png)

**Code**
For example:

```
docker run -d --name flowable \
  -p 8080:8080 \
  -e FLOWABLE_REST_APP_ADMIN_USER_ID='flowable-rest' \
  -e FLOWABLE_REST_APP_ADMIN_PASSWORD='test' \
  -e FLOWABLE_REST_APP_ADMIN_FIRST_NAME='Flowable Rest API' \
  -e FLOWABLE_REST_APP_ADMIN_LAST_NAME='Administrator' \
  --env-file ./no-ldap-env.txt \
  flowable/all-in-one
```

Check the env variables are set correctly:

```
docker inspect -f \
  '{{range $index, $value := .Config.Env}}{{println $value}}{{end}}' \
  flowable | grep FLOW
```

Output:

```
FLOWABLE_IDM_APP_ADMIN_USER_ID=flowable
FLOWABLE_IDM_APP_ADMIN_PASSWORD=test
FLOWABLE_IDM_APP_ADMIN_FIRST_NAME=Flowable
FLOWABLE_IDM_APP_ADMIN_LAST_NAME=Administrator
FLOWABLE_IDM_APP_ADMIN_EMAIL=admin@flowable.org
FLOWABLE_COMMON_APP_IDM_ADMIN_USER=flowable
FLOWABLE_COMMON_APP_IDM_ADMIN_PASSWORD=test
FLOWABLE_REST_APP_ADMIN_LAST_NAME=Administrator
FLOWABLE_REST_APP_ADMIN_USER_ID=flowable-rest
FLOWABLE_REST_APP_ADMIN_PASSWORD=test
FLOWABLE_REST_APP_ADMIN_FIRST_NAME=Flowable Rest API
```

no-ldap-env.txt :

```
#
# Relaxed Binding (Externalised Configuration)
#
# Property	                          Note
# acme.my-project.person.first-name   Kebab case, which is recommended for use in .properties and .yml files.
# acme.myProject.person.firstName     Standard camel case syntax.
# acme.my_project.person.first_name   Underscore notation, which is an alternative format for use in .properties and .yml files.
# ACME_MYPROJECT_PERSON_FIRSTNAME     Upper case format, which is recommended when using system environment variables.
#
# See: https://docs.spring.io/spring-boot/docs/2.0.7.RELEASE/reference/html/boot-features-external-config.html#boot-features-external-config-relaxed-binding

# Ref: https://docs.spring.io/spring-boot/docs/current/reference/html/appendix-application-properties.html
# Ref: https://github.com/flowable/flowable-engine/blob/master/modules/flowable-app-rest/src/main/resources/flowable-default.properties
# Ref: https://github.com/flowable/flowable-engine/blob/master/modules/flowable-ui-idm/flowable-ui-idm-app/src/main/resources/flowable-default.properties
# Ref: https://flowable.com/open-source/docs/bpmn/ch15-REST/

# Note: UPPER_CASE_FORMAT is recommended when using system environment variables.

#
# DEFAULT ADMINISTRATOR ACCOUNTS
#

FLOWABLE_IDM_APP_ADMIN_USER_ID=flowable
FLOWABLE_IDM_APP_ADMIN_PASSWORD=test
FLOWABLE_IDM_APP_ADMIN_FIRST_NAME=Flowable
FLOWABLE_IDM_APP_ADMIN_LAST_NAME=Administrator
FLOWABLE_IDM_APP_ADMIN_EMAIL=admin@flowable.org

FLOWABLE_COMMON_APP_IDM_ADMIN_USER=flowable
FLOWABLE_COMMON_APP_IDM_ADMIN_PASSWORD=test

#
# DEFAULT REST API ACCOUNTS - See: https://flowable.com/open-source/docs/bpmn/ch15-REST/
#

# flowable.rest.app.admin.user-id=rest-admin
# flowable.rest.app.admin.password=test
# flowable.rest.app.admin.first-name=Rest
# flowable.rest.app.admin.last-name=Admin

#
# DEFAULT REST API ACCOUNTS - See: https://github.com/flowable/flowable-engine/blob/master/modules/flowable-app-rest/src/main/resources/flowable-default.properties
#

# flowable.rest.app.admin.user-id=rest-admin
# flowable.rest.app.admin.password=test
# flowable.rest.app.admin.firstname=Rest
# flowable.rest.app.admin.lastname=Admin

#
# DEFAULT REST API ACCOUNTS
#

# FLOWABLE_REST_APP_ADMIN_USERID=flowable-rest
# FLOWABLE_REST_APP_ADMIN_PASSWORD=test
# FLOWABLE_REST_APP_ADMIN_FIRSTNAME=Flowable Rest API
# FLOWABLE_REST_APP_ADMIN_LASTNAME=Administrator

# FLOWABLE_REST_APP_ADMIN_USER_ID=flowable-rest
# FLOWABLE_REST_APP_ADMIN_PASSWORD=test
# FLOWABLE_REST_APP_ADMIN_FIRST_NAME=Flowable Rest API
# FLOWABLE_REST_APP_ADMIN_LAST_NAME=Administrator

# https://unix.stackexchange.com/questions/23659/can-shell-variable-name-include-a-hyphen-or-dash
# https://github.com/gliderlabs/docker-alpine/issues/290

#
# MISC
#

# https://github.com/flowable/flowable-engine/issues/1958#issuecomment-571569786
# -e "spring.datasource.url=jdbc:h2:~/flowable-db/db;AUTO_SERVER=TRUE;AUTO_SERVER_PORT=9091;DB_CLOSE_DELAY=-1"

# SPRING_DATASOURCE_URL=jdbc:h2:~/flowable-db/db
# AUTO_SERVER=TRUE
# AUTO_SERVER_PORT=9091
# DB_CLOSE_DELAY=-1

# HTTP Status 404 – Not Found
# Type Status Report
#
# Message /flowable-idm
#
# Description The origin server did not find a current representation for the target resource or is not willing to disclose that one exists.
#
# Apache Tomcat/9.0.14
```

**Additional context**

As per the Spring Boot Relaxed Binding [documentation](https://docs.spring.io/spring-boot/docs/2.0.7.RELEASE/reference/html/boot-features-external-config.html#boot-features-external-config-relaxed-binding), UPPER_CASE_FORMAT is used when using system environment variables.

**Note:** Unix shells cannot include a hyphen in a variable name.

Interesting (may be related) when I tried to set the [spring.datasource.url](https://github.com/flowable/flowable-engine/issues/1958#issuecomment-571569786) in the --env-file file I received the following error:

```
HTTP Status 404 – Not Found
Type Status Report

Message /flowable-idm

Description The origin server did not find a current representation for the target resource or is not willing to disclose that one exists.

Apache Tomcat/9.0.14
```

See: [Serendipity CEP - Developer Documentation](https://github.com/Robinyo/serendipity/blob/master/docs/developer.md)

**Is your feature request related to a problem? Please describe.**
I would like to be able to sort by category, the same way I can sort by other fields using TaskInfoQuery methods orderByTaskName(), orderByTaskPriority() etc.

**Describe the solution you'd like**
Add a constant CATEGORY to TaskQueryProperty and HistoricTaskInstanceQueryProperty with name "RES.CATEGORY_" and method orderByTaskCategory() to TaskInfoQuery and implementations which uses this property.

**Describe alternatives you've considered**
It can be worked around by: query.orderBy(new ActivityInstanceQueryProperty("RES.CATEGORY_")) but this is not satisfactory / robust to future changes.


* adding hooks for pre-merging and finalize-merging (before clearing local cache)
* default implementations for hooks to do a merge (see included documentation for more details)

#### Check List:
* Unit tests: YES
* Documentation: YES

**Describe the bug**
The POST body to `/form-api/form/form-instances` accepts a formInstanceId, but it is not used.  The Forms Java API provides provides both `createFormInstance` and `saveFormInstance` methods, but the REST API only uses the `createFormInstance` methods. 

**Expected behavior**
Standard REST practice would be to have PUT endpoint to update an existing FormInstance, but overloading the POST to save instead of creating when a formInstanceId is possible.

**Additional context**
The Task app uses the `saveFormInstance` when updating a task with a form, implying that updating existing is the expected behavior. 
Flowable does not use `High Performance Primitive Collections for Java` (https://github.com/carrotsearch/hppc) so this dependency can be removed.
**Describe the bug**
When process instance is deleted there is no possibility to specify listener on the delete event.

```
    @Test
    @Deployment(resources= "org/flowable/engine/test/bpmn/event/end/TerminateEndEventTest.testTerminateExecutionListener.bpmn")
    public void terminateExecutionListenerOnDeleteEvent() throws Exception {
        ProcessInstance pi = runtimeService.startProcessInstanceByKey("terminateEndEventExample");
        assertTrue(taskService.createTaskQuery().processInstanceId(pi.getId()).taskDefinitionKey("preTerminateTask").count() > 0);

        runtimeService.deleteProcessInstance(pi.getId(), "test");

        assertProcessEnded(pi.getId());
        assertEquals(1, TerminateExecutionListener.startCalled);
        assertEquals(1, TerminateExecutionListener.deleteCalled);
    }
```

**Expected behavior**
When a process instance is deleted - delete listener is invoked.

v6.5-SNAPSHOT.