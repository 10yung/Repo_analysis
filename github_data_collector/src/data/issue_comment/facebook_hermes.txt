Introduces a playground for the Hermes website.

This is highly based on https://tmikov.github.io/hermes-explorer-page/ from @tmikov 

### Improvements
- Editor suggestions do not show up properly
- Selection highlighting between the input and output editors (like  [Compiler explorer ](https://godbolt.org) or [AST explorer](https://astexplorer.net)) to help understand and debug the engine.
If some code wrapped in `try/catch` block fails the exception is not detailed.
My code looks like this:
```js
try {
	...
} catch (ex) {
	Log(ex);
}
```

I log error object into database. Here's what I can see:
`{ "error": { "jsEngine": "hermes" } }`
`{ "jsEngine": "hermes" }`

This happens on production, React Native build.

Before turning on Hermes I was getting exact failure position in bundle file:
```json
{
	"line": 595,
	"column": 4814,
	"sourceURL": "index.android.bundle"
}
```

Is there any way to get more detailed exceptions?
Hello, we are the development team of **VS Code** extension for debugging **React Native** apps ([vscode-react-native](https://github.com/microsoft/vscode-react-native)). On debugging a **Hermes** application (**React Native** v0.61.5) in **Google Chrome** we tried to watch the contents of `Map` and `Set` Javascript objects and faced the problem of crashing of the debugged application. The error occurs when we are trying to extend `__proto__` object content. This behavior is the same for `Map` and `Set` objects.
- Trying to extend `__proto__` object content of `Map`
![Screen Shot 2019-12-24 at 13 00 46](https://user-images.githubusercontent.com/33267199/71408994-184b0e80-2651-11ea-891e-7377b120b4d7.png)
- Trying to extend `__proto__` object content of `Set`
![Screen Shot 2019-12-24 at 13 01 57](https://user-images.githubusercontent.com/33267199/71409014-26009400-2651-11ea-8b7f-3870513a3fb4.png)

Is this an expected behavior?

For reference: the list of [known issues with Hermes debugging](https://github.com/microsoft/vscode-react-native/issues/1099) for React Native Tools extension.

Hello, we are the development team of **VS Code** extension for debugging **React Native** apps ([vscode-react-native](https://github.com/microsoft/vscode-react-native)). Now we are working on **React Native Hermes** debugger and we've faced the problem related to usage of **Chrome DevTools Protocol** method [`callFunctionOn`](https://chromedevtools.github.io/devtools-protocol/tot/Runtime#method-callFunctionOn). We use [vscode-chrome-debug-core](https://github.com/microsoft/vscode-chrome-debug-core) library to communicate with **Hermes** debugger. Some functions of the library (e.g. [getNumPropsByEval](https://github.com/microsoft/vscode-chrome-debug-core/blob/893ec53d4640c275575da78d984a403f6489d9ab/src/chrome/variablesManager.ts#L300)) use **Chrome DevTools Protocol** method `Runtime.callFunctionOn`. But each call of this method returns the following response `"{"result":{},"id":someId}"` - an empty result object. We tried to call `Runtime.callFunctionOn` function with different parameters, but the result remained the same.
Below is the list of the function calls with different arguments that we tried:
1) For example in case of usage of `getNumPropsByEval` method, the `Runtime.callFunctionOn` function is used to evaluate the length of the watched array. Below there is an example of the function call:
```
        this.chrome.Runtime.callFunctionOn({
            objectId,    // 121 
            functionDeclaration: " function() { return [this.length, Object.keys(this).length - this.length + 2]; }",
            silent: true,
            returnByValue: true
        })
```
2) The function should only return a static array. Without `silent` mode.
```
        this.chrome.Runtime.callFunctionOn({
            objectId,    // 121 
            functionDeclaration: "function() { return [0, 2]; }",
            silent: false,
            returnByValue: true
        })
```
3) The function should return `process` variable. Doesn't provide `objectId` prop and without `silent` mode.
```
        this.chrome.Runtime.callFunctionOn({
            functionDeclaration: "function() { return process; }",
            silent: false,
            returnByValue: true
        })
```
For all cases that are described above the `callFunctionOn` method returns empty result object.
`Runtime.callFunctionOn` method also doesn't return any error messages.

Could you please tell us if `Runtime.callFunctionOn` method is implemented in Hermes debugger and if it is, how can we use it?

For reference: the list of [known issues with Hermes debugging](https://github.com/microsoft/vscode-react-native/issues/1099) for React Native Tools extension.

#### `react-native info` command output:
```
System:
    OS: macOS 10.15.2
    CPU: (6) x64 Intel(R) Core(TM) i5-8500B CPU @ 3.00GHz
    Memory: 33.88 MB / 32.00 GB
    Shell: 5.7.1 - /bin/zsh
  Binaries:
    Node: 10.16.3 - /usr/local/bin/node
    Yarn: 1.17.3 - /usr/local/bin/yarn
    npm: 6.9.0 - /usr/local/bin/npm
    Watchman: 4.9.0 - /usr/local/bin/watchman
  SDKs:
    iOS SDK:
      Platforms: iOS 13.2, DriverKit 19.0, macOS 10.15, tvOS 13.2, watchOS 6.1
    Android SDK:
      API Levels: 23, 25, 27, 28, 29
      Build Tools: 23.0.1, 25.0.1, 25.0.2, 27.0.3, 28.0.3, 29.0.0, 29.0.1
      System Images: android-28 | Google APIs Intel x86 Atom, android-29 | Google APIs Intel x86 Atom
  IDEs:
    Android Studio: 3.4 AI-183.6156.11.34.5692245
    Xcode: 11.3/11C29 - /usr/bin/xcodebuild
  npmPackages:
    react: 16.9.0 => 16.9.0 
    react-native: 0.61.5 => 0.61.5 
  npmGlobalPackages:
    react-native-cli: 2.0.1
```
 According to ES standard, the identifier `arguments` cannot appear to the left of the assignment operator only in strict mode. However, when running this testcase blow which is in non-strict mode, hermes throws an expection. Why does this happen? Is this a feature of hermes?
 
###### revision
[044cf4b](https://github.com/facebook/hermes/tree/044cf4b7dd1adfb56969886c09dbe522ccaae06c)

###### Test case 
```
var NISLFuzzingFunc = function() {
    arguments = 10;
    print(arguments);
};
NISLFuzzingFunc();
```

###### Command
    ./build/bin/hermes -w testcase.js

###### Output
```
 testcase.js:2:5: error: invalid assignment left-hand side
 arguments = 10;
```

###### Expected behavior
    10
We've been seeing memory leaks from the mBlobs HashMap in BlobModule.java for some time (with JavaScriptCore). This is one of the tickets for this:

https://github.com/facebook/react-native/issues/20352

We were expecting this to be fixed when we upgraded react native, since 0.61.3 added the following fix:

https://github.com/facebook/react-native/commit/766f47075def3c4d52bc3a88ac2a6c7f70ae7a1c

I.e. the js blob HostObject destructor is supposed to call remove() in BlobModule.java.

We found that if we enabled the hermes engine, we were still getting java-heap out of memory errors.

Setting breakpoints in BlobModule.java in android studio shows that store() is called for both JavaScriptCore and hermes:

https://github.com/facebook/react-native/blob/v0.61.5/ReactAndroid/src/main/java/com/facebook/react/modules/blob/BlobModule.java#L172

...but that remove() is only called if use JavaScriptCore:

https://github.com/facebook/react-native/blob/v0.61.5/ReactAndroid/src/main/java/com/facebook/react/modules/blob/BlobModule.java#L184

I.e. the memory leak is fixed, but only if use JavaScriptCore.

react native 0.61.5

I want to see if this Circle CI change works correctly.
We just ran into a strange crash in Production mode and after several hours of debugging it turned out that if we disable Hermes and use JSC the app works fine. 

![grafik](https://user-images.githubusercontent.com/693770/68294698-0c9b8c80-0091-11ea-82b6-61ed39d31af4.png)

So basically this code causes the crash
```
export function* handleLoadAccount(
  action: ActionType<typeof accountActions.loadAccountRequest>
): Saga<void> {
  try {
    // xxxx
    const initialNavigationAction = yield call(checkForInitialURL)

    yield call(client.loadAccount, accountToLoad.walletCredentials)

    //xxxx
  } catch (error) {
    yield put(accountActions.loadAccountFail({ error }))
  } finally {
    yield put(toggleAppLoading(false))
  }
}
```

The error that is shown to us comes from this line:
    const initialNavigationAction = yield call(checkForInitialURL)
If we remove it - then the app works fine. CheckForInitialURL does nothing special:
```
export async function checkForInitialURL() {
  const url = await Linking.getInitialURL()

// some more code that is not executed because url is null in this case
}
```

if I switch those 2 lines around:
```
    const initialNavigationAction = yield call(checkForInitialURL)

    yield call(client.loadAccount, accountToLoad.walletCredentials)
```
then the app works. As I said it works fine with JSC. 

The app is currently in a private repo, but if soemeone from the team would like to give it a try I can provide you with access to it.

We have a standard build.gradle:
```
apply plugin: "com.android.application"
apply plugin: "io.fabric"

import com.android.build.OutputFile

/**
 * The react.gradle file registers a task for each build variant (e.g. bundleDebugJsAndAssets
 * and bundleReleaseJsAndAssets).
 * These basically call `react-native bundle` with the correct arguments during the Android build
 * cycle. By default, bundleDebugJsAndAssets is skipped, as in debug/dev mode we prefer to load the
 * bundle directly from the development server. Below you can see all the possible configurations
 * and their defaults. If you decide to add a configuration block, make sure to add it before the
 * `apply from: "../../node_modules/react-native/react.gradle"` line.
 *
 * project.ext.react = [
 *   // the name of the generated asset file containing your JS bundle
 *   bundleAssetName: "index.android.bundle",
 *
 *   // the entry file for bundle generation
 *   entryFile: "index.android.js",
 *
 *   // https://facebook.github.io/react-native/docs/performance#enable-the-ram-format
 *   bundleCommand: "ram-bundle",
 *
 *   // whether to bundle JS and assets in debug mode
 *   bundleInDebug: false,
 *
 *   // whether to bundle JS and assets in release mode
 *   bundleInRelease: true,
 *
 *   // whether to bundle JS and assets in another build variant (if configured).
 *   // See http://tools.android.com/tech-docs/new-build-system/user-guide#TOC-Build-Variants
 *   // The configuration property can be in the following formats
 *   //         'bundleIn${productFlavor}${buildType}'
 *   //         'bundleIn${buildType}'
 *   // bundleInFreeDebug: true,
 *   // bundleInPaidRelease: true,
 *   // bundleInBeta: true,
 *
 *   // whether to disable dev mode in custom build variants (by default only disabled in release)
 *   // for example: to disable dev mode in the staging build type (if configured)
 *   devDisabledInStaging: true,
 *   // The configuration property can be in the following formats
 *   //         'devDisabledIn${productFlavor}${buildType}'
 *   //         'devDisabledIn${buildType}'
 *
 *   // the root of your project, i.e. where "package.json" lives
 *   root: "../../",
 *
 *   // where to put the JS bundle asset in debug mode
 *   jsBundleDirDebug: "$buildDir/intermediates/assets/debug",
 *
 *   // where to put the JS bundle asset in release mode
 *   jsBundleDirRelease: "$buildDir/intermediates/assets/release",
 *
 *   // where to put drawable resources / React Native assets, e.g. the ones you use via
 *   // require('./image.png')), in debug mode
 *   resourcesDirDebug: "$buildDir/intermediates/res/merged/debug",
 *
 *   // where to put drawable resources / React Native assets, e.g. the ones you use via
 *   // require('./image.png')), in release mode
 *   resourcesDirRelease: "$buildDir/intermediates/res/merged/release",
 *
 *   // by default the gradle tasks are skipped if none of the JS files or assets change; this means
 *   // that we don't look at files in android/ or ios/ to determine whether the tasks are up to
 *   // date; if you have any other folders that you want to ignore for performance reasons (gradle
 *   // indexes the entire tree), add them here. Alternatively, if you have JS files in android/
 *   // for example, you might want to remove it from here.
 *   inputExcludes: ["android/**", "ios/**"],
 *
 *   // override which node gets called and with what additional arguments
 *   nodeExecutableAndArgs: ["node"],
 *
 *   // supply additional arguments to the packager
 *   extraPackagerArgs: []
 * ]
 */

project.ext.react = [
        entryFile            : "index.js",
        bundleInDebug        : false,
        bundleInDevelop      : true,
        bundleInStaging      : true,
        bundleInRelease      : true,
        jsBundleDirDebug     : "$buildDir/intermediates/assets/debug",
        jsBundleDirDevelop   : "$buildDir/intermediates/assets/develop",
        jsBundleDirStaging   : "$buildDir/intermediates/assets/staging",
        jsBundleDirRelease   : "$buildDir/intermediates/assets/release",
        resourcesDirDebug    : "$buildDir/intermediates/res/merged/debug",
        resourcesDirDevelop  : "$buildDir/intermediates/res/merged/develop",
        resourcesDirStaging  : "$buildDir/intermediates/res/merged/staging",
        resourcesDirRelease  : "$buildDir/intermediates/res/merged/release",
        nodeExecutableAndArgs: hasProperty('NODE_PATH') ? [NODE_PATH] : ["node"],
        devDisabledInDebug   : false,
        devDisabledInDevelop : true,
        devDisabledInStaging : true,
        devDisabledInRelease : true,
        inputExcludes        : ["ios/**", "__tests__/**"],
        extraPackagerArgs: [ '--minify=false' ],
        enableHermes: true,
]

apply from: "../../node_modules/react-native/react.gradle"
apply from: "../../node_modules/react-native-code-push/android/codepush.gradle"
apply from: "../../node_modules/react-native-vector-icons/fonts.gradle"

/**
 * Set this to true to create two separate APKs instead of one:
 *   - An APK that only works on ARM devices
 *   - An APK that only works on x86 devices
 * The advantage is the size of the APK is reduced by about 4MB.
 * Upload all the APKs to the Play Store and people will download
 * the correct one based on the CPU architecture of their device.
 */
def enableSeparateBuildPerCPUArchitecture = false

/**
 * Run Proguard to shrink the Java bytecode in release builds.
 */
def enableProguardInReleaseBuilds = false

/**
 * The preferred build flavor of JavaScriptCore.
 *
 * For example, to use the international variant, you can use:
 * `def jscFlavor = 'org.webkit:android-jsc-intl:+'`
 *
 * The international variant includes ICU i18n library and necessary data
 * allowing to use e.g. `Date.toLocaleString` and `String.localeCompare` that
 * give correct results when using with locales other than en-US.  Note that
 * this variant is about 6MiB larger per architecture than default.
 */
def jscFlavor = 'org.webkit:android-jsc:+'
/**
 * Whether to enable the Hermes VM.
 *
 * This should be set on project.ext.react and mirrored here.  If it is not set
 * on project.ext.react, JavaScript will not be compiled to Hermes Bytecode
 * and the benefits of using Hermes will therefore be sharply reduced.
 */
def enableHermes = project.ext.react.get("enableHermes", false);

def getTimestamp() {
    Long tsLong = System.currentTimeMillis() / 1000L;
    def ts = (int) tsLong.toInteger();
    return ts
}

android {
    compileSdkVersion rootProject.ext.compileSdkVersion

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    defaultConfig {
        applicationId "mobileapp"
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionCode getTimestamp()
        versionName "${versionMajor}.${versionMinor}.${versionPatch}${versionPretag}"
        missingDimensionStrategy "react-native-camera", "general"
        multiDexEnabled true
    }

    signingConfigs {
        develop {
            if (project.hasProperty('MYAPP_RELEASE_STORE_FILE')) {
                storeFile file(MYAPP_RELEASE_STORE_FILE)
                storePassword MYAPP_RELEASE_STORE_PASSWORD
                keyAlias MYAPP_RELEASE_KEY_ALIAS
                keyPassword MYAPP_RELEASE_KEY_PASSWORD
            }
        }
        staging {
            if (project.hasProperty('MYAPP_RELEASE_STORE_FILE')) {
                storeFile file(MYAPP_RELEASE_STORE_FILE)
                storePassword MYAPP_RELEASE_STORE_PASSWORD
                keyAlias MYAPP_RELEASE_KEY_ALIAS
                keyPassword MYAPP_RELEASE_KEY_PASSWORD
            }
        }
        release {
            if (project.hasProperty('MYAPP_RELEASE_STORE_FILE')) {
                storeFile file(MYAPP_RELEASE_STORE_FILE)
                storePassword MYAPP_RELEASE_STORE_PASSWORD
                keyAlias MYAPP_RELEASE_KEY_ALIAS
                keyPassword MYAPP_RELEASE_KEY_PASSWORD
            }
        }
    }
    splits {
        abi {
            reset()
            enable enableSeparateBuildPerCPUArchitecture
            universalApk false  // If true, also generate a universal APK
            include "armeabi-v7a", "x86", "arm64-v8a", "x86_64"
        }
    }
    buildTypes {
        debug {
            applicationIdSuffix ".debug"
        }

//        develop {
//            minifyEnabled enableProguardInReleaseBuilds
//            proguardFiles getDefaultProguardFile("proguard-android.txt"), "proguard-rules.pro"
//            signingConfig signingConfigs.develop
//            applicationIdSuffix ".develop"
//            matchingFallbacks = ['release', 'debug']
//        }
//
//        staging {
//            minifyEnabled enableProguardInReleaseBuilds
//            proguardFiles getDefaultProguardFile("proguard-android.txt"), "proguard-rules.pro"
//            signingConfig signingConfigs.staging
//            applicationIdSuffix ".staging"
//            matchingFallbacks = ['release', 'debug']
//        }

        release {
            minifyEnabled enableProguardInReleaseBuilds
            proguardFiles getDefaultProguardFile("proguard-android.txt"), "proguard-rules.pro"
            signingConfig signingConfigs.release
        }
    }
    flavorDimensions "version"
    productFlavors {
        develop {
            applicationId "mobileapp.develop"
        }

        staging {
            applicationId "mobileapp.staging"
        }

        production {
            applicationId "mobileapp"
        }
    }

    // applicationVariants are e.g. debug, release
    applicationVariants.all { variant ->
        variant.outputs.each { output ->
            // For each separate APK per architecture, set a unique version code as described here:
            // https://developer.android.com/studio/build/configure-apk-splits.html
            def versionCodes = ["armeabi-v7a": 1, "x86": 2, "arm64-v8a": 3, "x86_64": 4]
            def abi = output.getFilter(OutputFile.ABI)
            if (abi != null) {  // null for the universal-debug, universal-release variants
                output.versionCodeOverride =
                        versionCodes.get(abi) * 1048576 + defaultConfig.versionCode
            }
        }
    }

    dexOptions {
        jumboMode true
    }
}

dependencies {
    implementation fileTree(dir: "libs", include: ["*.jar"])

    // Firebase dependencies
    implementation "com.google.firebase:firebase-core:17.2.0"
    implementation "com.google.firebase:firebase-analytics:17.2.0"
    implementation "com.google.firebase:firebase-messaging:20.0.0"
    implementation('com.crashlytics.sdk.android:crashlytics:2.9.9@aar') {
        transitive = true
    }


    implementation "com.facebook.react:react-native:+"  // From node_modules

    if (enableHermes) {
        def hermesPath = "../../node_modules/hermes-engine/android/";
        debugImplementation files(hermesPath + "hermes-debug.aar")
        releaseImplementation files(hermesPath + "hermes-release.aar")
    } else {
        implementation jscFlavor
    }
}

// Run this once to be able to run the application with BUCK
// puts all compile dependencies into folder libs for BUCK to use
task copyDownloadableDepsToLibs(type: Copy) {
    from configurations.compile
    into 'libs'
}


apply from: file("../../node_modules/@react-native-community/cli-platform-android/native_modules.gradle"); applyNativeModulesAppBuildGradle(project)
apply plugin: 'com.google.gms.google-services'

// go around a google play services mismatch
com.google.gms.googleservices.GoogleServicesPlugin.config.disableVersionCheck = true

```

Tested on RN 0.61.4 with hermes 0.2.1
 When running the testcases below, hermes takes more than ten times execution time of other engines. Maybe, it is an issue of hermes.
### Version:
[3826084](https://github.com/facebook/hermes/tree/382608426baaa059b8220d6135cebc426a21a1d5)
### Testcase:
```
var NISLFuzzingFunc = function(array, from, to) {
    var counter = 0;
    while (to < from) {
        if (array[to] === array[to]) {
            to++;
        }
    }
};
var NISLParameter0 = [true];
var NISLParameter1 = 4077282;
var NISLParameter2 = 1.541384329975526;
NISLFuzzingFunc(NISLParameter0, NISLParameter1, NISLParameter2);
```
### Command:
```
build_release/bin/hermes -w testcase.js
```
### Execution time:
V8: `4098 ms`
spiderMonkey: `3355 ms`
chakra: `2439 ms`
javascriptCore: `3315 ms`
hermes: `55334 ms`
https://github.com/dongyuwei/tiny_english_dictionary/blob/hermes/trie-service.js#L2 
`const words = require('./words_with_frequency_and_translation_and_ipa.json');` will throw error: 
```
RangeError: Maximum call stack size exceeded, js engine:hermes
```

The json file size is 21M, while its data structure is very simple.

### Steps to reproduce the bug:
1. yarn start
2. start an android emulator
3. yarn android

Tested with yarn 1.17.3 and nodejs 12.12.0 on Mac 10.14.5.
