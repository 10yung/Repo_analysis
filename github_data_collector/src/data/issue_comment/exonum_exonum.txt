
This PR encapsulates Time service internals, and documents the service and its API.

## Overview

This PR documents migrations and add tooling to test fault-tolerance of migration scripts.

Discussion:

- Is the approach for testing fault tolerance good enough? It resulted in some changes in MerkleDB, which are quite hacky, IMO.

---

See: https://jira.bf.local/browse/ECR-4080, https://jira.bf.local/browse/ECR-4081
## Overview

<!-- Please describe your changes here 
  and list any open questions you might have. -->

---
<!-- This is for Exonum Team members only. -->
<!-- markdownlint-disable MD034 -->
See: https://jira.bf.local/browse/ECR-XYZW
<!-- markdownlint-enable MD034 -->

### Definition of Done

- [ ] There are no TODOs left in the merged code
- [ ] Change is covered by automated tests
- [ ] Benchmark results are attached (if applicable)
- [ ] The [coding guidelines] are followed
- [ ] Public API has proper documentation
- [ ] Changelog is updated if needed (in case of notable or breaking changes)
- [ ] The continuous integration build passes

[coding guidelines]: https://github.com/exonum/exonum/blob/master/CONTRIBUTING.md#conventions


This PR makes public items in core and its upstream dependencies (actually, `merkledb` only) non-exhaustive.

Not all items were modified, only these which may be extended in the future (but anyway, that was A LOT).

For details on non-exhaustive pattern, see the [corresponding RFC](https://github.com/rust-lang/rfcs/blob/master/text/2008-non-exhaustive.md).

Later, when we won't be tied to 1.36, we'll be able to replace phantom fields/variants with `#[non_exhaustive]` attribute.


This PR brings the following goods:

- Rules on transaction persistence are now documented in the `runtime` module docs (tl;dr: you can update the tx logic, but you should not put some transaction on the place from where other transaction was removed);
- `MethodRemoved` variant was added to the `CommonError` enum, it is recommended to always return it from removed methods;
- `interface_method` attribute now supports `removed` parameter, which removes method from the trait (so users don't have to implement it) and makes attempt to invoke this method return `CommonError::MethodRemoved`.

---

Which goods aren't brought:

- Handy interface for making transactions deprecated.

It seems that there is no easy way to do it right now, and since there is an alternative (just write in the docs that method is deprecated and will be removed soon), I decided that we can live without this feature in release.

Anyway, if such a functionality will become must-have, it shouldn't be a breaking change to introduce it later.

---

With this PR, the following workflow may be used for updating transactions:

1. Create some interface with transactions.
2. Within next release, fix a bug in method A.
3. Within next release, write in the docs that method A is deprecated and will be removed in the next release.
4. Within next release, mark method A as removed in interface, and create method B to be used instead.
5. ?????
6. PROFIT
Initial version for refined HTTP errors.
Added `test_endpoint` in the explorer API and `ServiceApiScope::endpoint_new` handler for testing.
If the current implementation is ok, then we can replace all endpoints with it.

WIP:
- Do we need to set a version of the artifact to the `source` field?
- Should we set a deprecated warning header if we return an error from the deprecated endpoint?
- How can we handle errors not from endpoint level (i.e. if we failed to deserialize query)? I've failed to find the place where such errors are converted to the response.

Dependabot can't resolve your Rust dependency files.

As a result, Dependabot couldn't update your dependencies.

The error Dependabot encountered was:

```
error: failed to parse manifest at `/home/dependabot/dependabot-updater/dependabot_tmp_dir/exonum/Cargo.toml`

Caused by:
  package `exonum v0.13.0-rc.2 (/home/dependabot/dependabot-updater/dependabot_tmp_dir/exonum)` specifies that it links to `exonum_protobuf` but does not have a custom build script

```

If you think the above is an error on Dependabot's side please don't hesitate to get in touch - we'll do whatever we can to fix it.

[View the update logs](https://app.dependabot.com/accounts/exonum/update-logs/17911119).
Running Ubuntu 16.04 and have libprotoc 2.6.1 installed. Trying to install version 0.12.1 and get the following build error:

paused by: process didn't ext successfully: in exonum/target/debug/build/exonum-8a157b1751c8ddfe/build-script-build (exit code: 101)
--- stdout
cargo::protos=/exonum/src/proto/schema/exonum
-- stderr
Blockchain.proto:15:10: Unrecognized syntax identifier "proto3". This parser only recognizes "proto2".
Thread 'main' panicked at 'protoc: Custom [ kind: Other, error: StringError("protoc (\"protoc\"  ........

How to reconcile this build error?

