Good day
In my project on objective c, crashes began to appear in sqlite3 on ios 13.2.3 and later devices.
I use the latest version of `FMDB / standalone`.
Maybe you have ideas, what could be the problem?

EXC_BAD_ACCESS
columnNameForIndex: > objectForColumnIndex: > qL9١! >
Attempted to dereference garbage pointer 0x10508ea60.

```
sqlite3 +0x017e98 sqlite3DbFreeNN sqlite3.c:26936
sqlite3 +0x026950 releaseMemArray sqlite3.c:65535
sqlite3 +0x005738 sqlite3VdbeClearObject sqlite3.c:65535
sqlite3 +0x026c00 sqlite3VdbeDelete sqlite3.c:65535
sqlite3 +0x00c294 sqlite3VdbeFinalize sqlite3.c:65535
sqlite3 +0x00c138 vdbeSafety sqlite3.c:65535
sqlite3 +0x00c104 sqlite3_finalize sqlite3.c:65535
FMDB +0x009d94 -[FMStatement close] FMDatabase.m:1655
FMDB +0x009d44 -[FMStatement dealloc] FMDatabase.m:1646
FMDB +0x00d170 -[FMResultSet close] FMResultSet.m:59
FMDB +0x00d9e4 -[FMResultSet nextWithError:] FMResultSet.m:209
GasEngineerSoftware +0x0a4e00 -[DBConnection fetchRecords:] DBConnection.m:114
```

```
- (NSMutableArray *)fetchRecords:(NSString *)query {
    FUNCTION_START;

    if (LOGS_ON) NSLog(@"Select Query : %@", query);

    NSMutableArray *recordArray = [NSMutableArray array];

    BOOL isExecuted = false;

    FMResultSet *res = [_db executeQuery:query];

    if (res) {
        isExecuted = true;

        while ([res next]) {
            NSInteger cnt = [res columnCount];
            NSMutableDictionary *row = [NSMutableDictionary dictionary];

            for (int i = 0; i < cnt; ++i) {
                [row setObject:[NSString stringWithFormat:@"%@", [res objectForColumnIndex:i]] forKey:[res columnNameForIndex:i]];
            }

            if (row)
                [recordArray addObject:row];
        }
    }

    if (!isExecuted && query)
        [self performSelectorInBackground:@selector(sendApplog:) withObject:@{ApplogQuery: query}];

    FUNCTION_END;

    return recordArray;
}
```


executeQuery:
```
- (FMResultSet *)executeQuery:(NSString*)sql, ... {
    va_list args;
    va_start(args, sql);
    
    id result = [self executeQuery:sql withArgumentsInArray:nil orDictionary:nil orVAList:args];
    
    va_end(args);
    return result;
}
```

Last Exception Backtrace:
0   CoreFoundation                	0x1b975b80c __exceptionPreprocess + 220
1   libobjc.A.dylib               	0x1b9483fa4 objc_exception_throw + 55
2   CoreFoundation                	0x1b9650f84 +[NSException raise:format:] + 107
3   16DS                          	0x1036c3834 UmengSignalHandler + 127
4   libsystem_platform.dylib      	0x1b946a884 _sigtramp + 39
5   libsystem_pthread.dylib       	0x1b946f774 pthread_kill$VARIANT$mp + 111
6   libsystem_c.dylib             	0x1b93c3844 abort + 99
7   libc++abi.dylib               	0x1b951c7d4 abort_message + 127
8   libc++abi.dylib               	0x1b9529324 std::__terminate(void (*)+ 58148 ()) + 47
9   libc++abi.dylib               	0x1b952929c std::terminate+ 58012 () + 43
10  libdispatch.dylib             	0x1b9429198 _dispatch_client_callout + 35
11  libdispatch.dylib             	0x1b93dbc04 _dispatch_lane_barrier_sync_invoke_and_complete + 55
12  16DS                          	0x10339688c -[FMDatabaseQueue inDatabase:] + 5400716 (FMDatabaseQueue.m:190)
13  16DS                          	0x1030229b8 +[JKDBModel findByCriteria:] + 1780152 (JKDBModel.m:582)
14  16DS                          	0x1030228a8 +[JKDBModel findWithFormat:] + 1779880 (JKDBModel.m:574)


fmdb  2.7
please  help 




The crash is quite strange, it has no crash report on Xcode or other third part analyze sdks,  only happens on less than 1% users. When it happened, it keeps crashing on launch(Because my app updates database on launch), users have to reinstall the app, after several days, it happens again on the same users. It's caused by below code. When I removed below updating database code or let user delete and recreate the database, users said the crashing issue was gone: 

        + (void)updateFMDBByUpdateIndexJson:(IndexItemJson *)updateIndexJson fmdb:(FMDatabase *)db
        {
            if (![db open]) {
                NSLog(@"%@ open failed",@"update");
            }
            if ([updateIndexJson countOfIndexItems] == 0) {
                return;
            }
            NSArray *mangaNameArray = [[updateIndexJson mangaItems] valueForKey:KJsonIndexMangaName];
          
            NSString *test = @"(?";
            for (int i = 1; i< mangaNameArray.count; i++) {
                test = [[test stringByAppendingString:@","] stringByAppendingString:@"?"];
            }
            test = [test stringByAppendingString:@")"];
            test = [NSString stringWithFormat:@"delete from mangas where name in %@",test];
            @try {
                [db executeUpdate:test withArgumentsInArray:mangaNameArray];
            } @catch (NSException *exception) {
        //        NSLog(@"Delete Rows Error %@: %@", [exception name], [exception reason]);
                NSString *msg = [NSString stringWithFormat:@"Delete Rows NSException %@: %@", [exception name], [exception reason]];
            } @finally {
                
            }



            //add update index items to db
            NSString* strCreateTable = @"create table mangas (name text, author text, cover text, latest text, mJLink text, r text, rn integer, isOn boolean, genres text)";
            if (![db executeUpdate:strCreateTable]) {
                NSLog(@"create table failed or table existed");
            };
            
            if ([db tableExists:@"mangas"] && ![db columnExists:@"genres" inTableWithName:@"mangas"]) {
                [db executeUpdate:@"ALTER TABLE mangas ADD COLUMN genres TEXT"];
            }
             
            [db beginTransaction];
            
            BOOL isRollBack = NO;
            @try {
                for (int i=0; i<[indexJson countOfIndexItems]; i++) {
                    NSString *name = [indexJson mangaNameByIndex:i];
                    NSString *author = [indexJson authorByIndex:i];
                    NSString *cover = [indexJson coverUrlByIndex:i];
                    NSString *mjlink = [indexJson mangaJLinkByIndex:i];
                    NSString *rate = [indexJson rateByIndex:i];
                    NSNumber *rn = [indexJson rateCountByIndex:i];
                    NSString *latest = [indexJson latestChByIndex:i];
                    NSString *genres = [indexJson genresByIndex:i];
                    NSNumber *isOn = [indexJson isOnByIndex:i];
                    [db executeUpdate:@"insert into mangas (name, author, cover, latest, mJLink, r, rn, isOn, genres) values (?, ?, ?, ?, ?, ?, ?, ?, ?)",name,author,cover,latest,mjlink,rate,rn,isOn,genres];
                }
            } @catch (NSException *exception) {
                isRollBack = YES;
                [db rollback];
                NSString *msg = [NSString stringWithFormat:@"Insert Rows NSException %@: %@", [exception name], [exception reason]];
                NSLog(@"%@", msg);
            } @finally {
                if (!isRollBack) {
                    [db commit];
                }
                [db close];
            }    

        }
It's executed like below:


    - (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions
    {

        NSSet *websiteSet = [AppDelegate validSourcesFromFav];
        for (NSString *website in websiteSet) {
            
            dispatch_async(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0), ^{
                NSString *updateIndexUrl = [StaticParameters getUpdateIndexJlinkByWebsite:website];
                if (updateIndexUrl) {
                        NSData *data = [Common urlCollectionSynchronousWithRefer:[StaticParameters getMangaRefer] url:updateIndexUrl];
                        IndexItemJson *indexJson = [[IndexItemJson alloc] initWithData:[data gunzippedData]];
                        
                        //update database
                        dispatch_async([self serialQueue], ^{
                            
                            FMDatabase *db = [AppDelegate initDB:website];
                            if ([db columnExists:@"genres" inTableWithName:@"mangas"]) {
                                [AppDelegate updateFMDBByUpdateIndexJson:indexJson fmdb:db];
                            }

                        });
                }
            });
        }
        
    }
Using latest version of FMDB didn't fix it, and this issue only happens on iOS 12 & 13, It can't be fixed for more than one year. Hope you guys can help me! 
Thank you very much!

code：
```
[self.databaseQueue inTransaction:^(FMDatabase * _Nonnull db, BOOL * _Nonnull rollback) {
        NSString * sql = [NSString stringWithFormat:@"UPDATE %@ SET chat_satus = %ld", tab_name,status];
        BOOL chatResult = [db executeUpdate:sql];
        if (chatResult) {
           
        }else{
            
        }
    }];
```
Error：

Unknown error calling sqlite3_step (5: database is locked) eu
DB Query: begin exclusive transaction
 Unknown error finalizing or resetting statement (5: database is locked)
DB Query: begin exclusive transaction
 Error calling sqlite3_step (1: cannot commit - no transaction is active) SQLITE_ERROR
DB Query: commit transaction
Unknown error finalizing or resetting statement (1: cannot commit - no transaction is active)
DB Query: commit transaction
 Unknown error calling sqlite3_step (5: database is locked) eu
DB Query: begin exclusive transaction
 Unknown error finalizing or resetting statement (5: database is locked)
DB Query: begin exclusive transaction
 Error calling sqlite3_step (1: cannot commit - no transaction is active) SQLITE_ERROR
when use  fmdb like this 。。。  
```
NSString *sqlString = [NSString stringWithFormat:@"SELECT * FROM workout where distance != 0 and duration != 0 and start_time != 0 and end_time != 0 and userID=%d and sport != 8 ORDER BY start_time DESC LIMIT 1 ", userID];
    FMResultSet *rs = [_dataBase executeQuery:sqlString];
    while([rs next]) {  // there will be crash  
    }
```
and location  fmdb crash in this function

`- (BOOL)nextWithError:(NSError **)outErr`

crashed in    int rc = sqlite3_step([_statement statement]);   
so i am feel  uncertained


 crash in a serial queue background , can you tell me how to resolve it,The error like this

Crashed: io.growing
0 libsystem_platform.dylib 0x1b49c704c _os_unfair_lock_unowned_abort + 36
1 libsystem_platform.dylib 0x1b49c84f4 _os_unfair_lock_unlock_slow + 144
2 libsqlite3.dylib 0x1b51b6f18 sqlite3_snprintf + 3188
3 libsqlite3.dylib 0x1b51b6b18 sqlite3_snprintf + 2164
4 libsqlite3.dylib 0x1b51b4f88 sqlite3_vfs_find + 5548
5 libsqlite3.dylib 0x1b51b1844 sqlite3_open_v2 + 2656
6 SugarChat 0x1022a4408 -[FMG3Database open] + 138 (FMG3Database.m:138)
7 SugarChat 0x102298d44 -[GrowingEventDataBase performDataBaseBlock:] + 421 (GrowingEventDataBase.m:421)
8 SugarChat 0x1022998e4 -[GrowingEventDataBase flush] + 596 (GrowingEventDataBase.m:596)
9 SugarChat 0x102297b24 -[GrowingEventDataBase setValue:forKey:error:] + 276 (GrowingEventDataBase.m:276)
10 SugarChat 0x1022c4300 -[GrowingEventManager writeToDBWithEvent:] + 628 (GrowingEventManager.m:628)
11 SugarChat 0x1022c3dc4 __35-[GrowingEventManager handleEvent:]_block_invoke.351 + 576 (GrowingEventManager.m:576)
12 libdispatch.dylib 0x1b47f8a38 _dispatch_call_block_and_release + 24
13 libdispatch.dylib 0x1b47f97d4 _dispatch_client_callout + 16
14 libdispatch.dylib 0x1b47a2324 _dispatch_lane_serial_drain$VARIANT$mp + 592
15 libdispatch.dylib 0x1b47a2e40 _dispatch_lane_invoke$VARIANT$mp + 428
16 libdispatch.dylib 0x1b47ab4ac _dispatch_workloop_worker_thread + 596
17 libsystem_pthread.dylib 0x1b49da114 _pthread_wqthread + 304
18 libsystem_pthread.dylib 0x1b49dccd4 start_wqthread + 4
Is there a way to use the standalone build with Carthage? I see instruction for CocoaPods but not carthage.

Thanks for the help
Are there plans for supporting the Swift Package Manager anytime soon?
XCode 10.2.1

Was using pod 'FMDB' without problem but recently need custom build sqlite3 rather than the one supplied by iOS so changed to pod 'FMDB/standalone'. It will not compile now. Anything obvious am I missing?

Thanks
When I run XCode Instruments on my app to analyze memory leak, I can see that there are quite a lot of 4.5 KB memory leaks added and that make Memory Usage increase time by time in Activity Monitor. 

The stack trace shows something like this:

0 libsystem_malloc.dylib malloc_zone_malloc
   1 MyApp sqlite3MemMalloc project_dir/Pods/SQLCipher/sqlite3.c:27656
   2 MyApp sqlcipher_mem_malloc project_dir/Pods/SQLCipher/sqlite3.c:21995
   3 MyApp sqlite3Malloc project_dir/Pods/SQLCipher/sqlite3.c:31509
   4 MyApp pcache1Alloc project_dir/Pods/SQLCipher/sqlite3.c:53783
   5 MyApp pcache1FetchStage2 project_dir/Pods/SQLCipher/sqlite3.c:53879
   6 MyApp pcache1FetchWithMutex project_dir/Pods/SQLCipher/sqlite3.c:54465
   7  MyApp pcache1Fetch project_dir/Pods/SQLCipher/sqlite3.c:54488
   8 MyApp sqlite3PcacheFetch project_dir/Pods/SQLCipher/sqlite3.c:52932
   9 MyApp getPageNormal project_dir/Pods/SQLCipher/sqlite3.c:60847
  10 MyApp sqlite3PagerGet project_dir/Pods/SQLCipher/sqlite3.c:61026
  11 MyApp getAndInitPage project_dir/Pods/SQLCipher/sqlite3.c:69452
  12 MyApp moveToLeftmost project_dir/Pods/SQLCipher/sqlite3.c:72502
  13 MyApp sqlite3VdbeExec project_dir/Pods/SQLCipher/sqlite3.c:92859
  14 MyApp sqlite3_step project_dir/Pods/SQLCipher/sqlite3.c:86044
  15 MyApp -[FMResultSet nextWithError:] project_dir/Pods/FMDB/src/fmdb/FMResultSet.m:165

Does anyone have the same problem and how to fix that? Thanks