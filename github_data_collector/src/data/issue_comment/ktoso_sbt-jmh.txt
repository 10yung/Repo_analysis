When you cancel a benchmark job with Ctrl-C, sbt prints the usual `[warn] Canceling execution...` message and then drops back into interactive mode, but the actual benchmarking process that was spawned by jmh is still running and keeps writing logs to the console. Pressing Ctrl-C again terminates sbt and disconnects the console from the process so the log output stops but jmh's java process is still running in the background. You have to kill it manually in task manager.
For most Scala projects, when I submit a Pull Request and I have to evaluate the performance impact of a Pull Request, I often have to manually do the following process: 

- Checkout each distinct version, with and without the changes.
- Run the `sbt:jmh` command, a same command, in each of them.
- Retrieve and store the results from each run.
- Arrange the results of both runs onto a spreadsheet, which I then use to show the relative error of each measure, and the observed improvement.

It may be desirable if `sbt:jmh` plugin could offer a command to carry ouy these operations directly, and were able to generate a single summary table, which included the score and error for each commit, and the relative difference between them. 

```
Benchmark  Mode  Cnt Score(master)   Error  Score(branch) Error  Change  Units
Fili       thrpt 10         45000       42         42000     41    93.3 %  B/s
```


Make the profilers shipped in sbt-jmh-extras discoverable by JMH,
by specifying the provided implementations of Profiler interface
and adding a no-arg constructor, required by the ServiceLoader.
I started working on this here: https://gist.github.com/jrudolph/70d7cfbdff4086f78ee354408330ef7b

In that form you can copy the file to your `project` folder and it offer a new task `jmh:runny` that has tab completion inside of sbt. Not all options are supported yet but it features smart completion for benchmarks and matching parameters. I didn't manage so far to actually make it work under the `jmh:run` task directly.
After [bumping versions](https://github.com/scala/compiler-benchmark/pull/69) of SBT (0.13.x => 1.1.5), sbt-jmh (0.3.0 => 0.3.4), and JMH recently, I've noticed that sometimes the output is missing the final result.

For instance:

```
[info] Result "scala.tools.nsc.HotScalacBenchmark.compile":
[info]   N = 30
[info]   mean =  15879.076 Â±(99.9%) 192.572 ms/op
[info]   Histogram, ms/op:
[info]     [15000.000, 15125.000) = 0
[info]     [15125.000, 15250.000) = 0
[info]     [15250.000, 15375.000) = 0
[info]     [15375.000, 15500.000) = 2
[info]     [15500.000, 15625.000) = 4
[info]     [15625.000, 15750.000) = 6
[info]     [15750.000, 15875.000) = 5
[info]     [15875.000, 16000.000) = 4
[info]     [16000.000, 16125.000) = 4
[info]     [16125.000, 16250.000) = 1
[info]     [16250.000, 16375.000) = 1
[info]     [16375.000, 16500.000) = 2
[info]     [16500.000, 16625.000) = 1
[info]     [16625.000, 16750.000) = 0
[info]     [16750.000, 16875.000) = 0
[info]   Percentiles, ms/op:
[info]       p(0.0000) =  15468.593 ms/op
[info]      p(50.0000) =  15837.692 ms/op
[info]      p(90.0000) =  16394.695 ms/op
[info]      p(95.0000) =  16471.871 ms/op
[success] Total time: 1021 s, completed 27/05/2018 2:58:28 PM
```

The behaviour is a bit random, but it seems that occasionally, the last few (5-20) lines of the output go missing. 

No idea what's to blame yet, but thought I'd log this issue in case others are seeing the same thing.
Currently, files with flame graphs are just saved over each other with the same name.

As a workaround, you can specify all benchmark params to avoid running multiple attempts with different values.

As an option, it can be nested subdirectories for each param-value pairs.

But to resolve it properly need to cope with some escaping and truncation of values to fit file/directory naming limits.
Hi, folks

If I will create a benchmark directly in `src/main/scala` I receive NPE

```
java.lang.NullPointerException
        at org.openjdk.jmh.generators.reflection.RFClassInfo.getPackageName(RFClassInfo.java:51)
        at org.openjdk.jmh.generators.core.BenchmarkGenerator.validateBenchmark(BenchmarkGenerator.java:227)
        at org.openjdk.jmh.generators.core.BenchmarkGenerator.generate(BenchmarkGenerator.java:81)
        at org.openjdk.jmh.generators.bytecode.JmhBytecodeGenerator.main(JmhBytecodeGenerator.java:100)
        at pl.project13.scala.sbt.JmhPlugin$.internalGenerateBenchmarkSourcesAndResources(JmhPlugin.scala:125)
        at pl.project13.scala.sbt.JmhPlugin$.$anonfun$generateBenchmarkSourcesAndResources$2(JmhPlugin.scala:108)
        at sbt.util.FileFunction$.$anonfun$cached$1(FileFunction.scala:73)
        at sbt.util.FileFunction$.$anonfun$cached$4(FileFunction.scala:147)
        at sbt.util.Difference.apply(Tracked.scala:313)
        at sbt.util.Difference.apply(Tracked.scala:293)
        at sbt.util.FileFunction$.$anonfun$cached$3(FileFunction.scala:143)
        at sbt.util.Difference.apply(Tracked.scala:313)
        at sbt.util.Difference.apply(Tracked.scala:288)
        at sbt.util.FileFunction$.$anonfun$cached$2(FileFunction.scala:142)
        at pl.project13.scala.sbt.JmhPlugin$.generateBenchmarkSourcesAndResources(JmhPlugin.scala:110)
        at pl.project13.scala.sbt.JmhPlugin$.$anonfun$projectSettings$13(JmhPlugin.scala:66)
        at scala.Function1.$anonfun$compose$1(Function1.scala:44)
        at sbt.internal.util.$tilde$greater.$anonfun$$u2219$1(TypeFunctions.scala:42)
        at sbt.std.Transform$$anon$4.work(System.scala:64)
        at sbt.Execute.$anonfun$submit$2(Execute.scala:257)
        at sbt.internal.util.ErrorHandling$.wideConvert(ErrorHandling.scala:16)
        at sbt.Execute.work(Execute.scala:266)
        at sbt.Execute.$anonfun$submit$1(Execute.scala:257)
        at sbt.ConcurrentRestrictions$$anon$4.$anonfun$submitValid$1(ConcurrentRestrictions.scala:167)
        at sbt.CompletionService$$anon$2.call(CompletionService.scala:32)
        at java.util.concurrent.FutureTask.run(FutureTask.java:266)
        at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
        at java.util.concurrent.FutureTask.run(FutureTask.java:266)
        at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
        at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
        at java.lang.Thread.run(Thread.java:748)
```

I'm not sure if that is made by design, but when you move benchmark class into any package inside `src/main/scala` it works.

https://github.com/imarios/jmh-benchmarking

``` sbt
// project/plugins.sbt
addSbtPlugin("pl.project13.scala" % "sbt-jmh" % "0.2.27")
```

``` sbt
// build.sbt
enablePlugins(JmhPlugin)

libraryDependencies += "org.slf4j" % "slf4j-jdk14" % "1.7.25" % Runtime

libraryDependencies += "org.slf4j" % "slf4j-api" % "1.7.25"
```

``` scala
package mypackage
import org.slf4j.LoggerFactory
import org.openjdk.jmh.annotations.Benchmark
class MyBenchmark {
  @Benchmark
  def testLog(): Unit = {
    val logger = LoggerFactory.getLogger(classOf[MyBenchmark])
    logger.info("Hello World")
  }
}
```



```
> jmh:run
[info] Compiling 1 Scala source to /private/tmp/jmh/target/scala-2.10/classes...
Processing 1 classes from /private/tmp/jmh/target/scala-2.10/classes with "reflection" generator
Writing out Java source to /private/tmp/jmh/target/scala-2.10/src_managed/jmh and resources to /private/tmp/jmh/target/scala-2.10/resource_managed/jmh
[info] Compiling 5 Java sources to /private/tmp/jmh/target/scala-2.10/classes...
[info] Running org.openjdk.jmh.Main 
[info] # JMH version: 1.19
[info] # VM version: JDK 1.8.0_131, VM 25.131-b11
[info] # VM invoker: /Library/Java/JavaVirtualMachines/jdk1.8.0_131.jdk/Contents/Home/jre/bin/java
[info] # VM options: <none>
[info] # Warmup: 20 iterations, 1 s each
[info] # Measurement: 20 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: mypackage.MyBenchmark.testLog
[info] 
[info] # Run progress: 0.00% complete, ETA 00:06:40
[info] # Fork: 1 of 10
[error] SLF4J: Failed to load class "org.slf4j.impl.StaticLoggerBinder".
[error] SLF4J: Defaulting to no-operation (NOP) logger implementation
[error] SLF4J: See http://www.slf4j.org/codes.html#StaticLoggerBinder for further details.
[info] # Warmup Iteration   1: 522337535.681 ops/s
[info] # Warmup Iteration   2: 499173949.962 ops/s
[info] # Warmup Iteration   3: 534586788.976 ops/s
[info] # Warmup Iteration   4: 526901701.968 ops/s
[info] # Warmup Iteration   5: 537736249.150 ops/s
```

Note the warning:
```
[error] SLF4J: Failed to load class "org.slf4j.impl.StaticLoggerBinder".
[error] SLF4J: Defaulting to no-operation (NOP) logger implementation
[error] SLF4J: See http://www.slf4j.org/codes.html#StaticLoggerBinder for further details.
```

It means the setting `libraryDependencies += "org.slf4j" % "slf4j-jdk14" % "1.7.25" % Runtime` does not apply to `jmh:run`.