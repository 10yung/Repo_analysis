#### Affected Version
The issue appeared with yay 9.4.3 and still happens with 9.4.4.

#### Issue
When running 'yay -Sc' to clean up packages it prints an error on last step: `fatal: not a git repository (or any of the parent directories): .git`

#### Steps to reproduce
1. Execute 'yay -Sc'
2. Answer all questions with 'Y'
3. See error in last step

#### Output
```
$ yay -Sc
Packages to keep:
  All locally installed packages

Cache directory: /var/cache/pacman/pkg/
:: Do you want to remove all other packages from cache? [Y/n] 
removing old packages from cache...

Database directory: /var/lib/pacman/
:: Do you want to remove unused repositories? [Y/n] 
removing unused sync repositories...

Build directory: /home/max/.cache/yay
==> Do you want to remove all other AUR packages from cache? [Y/n] 
removing AUR packages from cache...
==> Do you want to remove ALL untracked AUR files? [Y/n] 
removing Untracked AUR files from cache...
fatal: not a git repository (or any of the parent directories): .git
```
#### Affected Version
`yay v9.4.3.r0.g87fcfbf - libalpm v12.0.1`

#### Issue
Hi,

this is probably a feature request (and not a bug). I have a devel package (git version, more specifically [faiss-cuda-git](https://aur.archlinux.org/packages/faiss-cuda-git/), which allows setting GPU architecture of your hardware in order to speed-up builds (without being set, it builds for all GPU architectures supported by said package, not your hardware). When I perform install using `--editmenu` flag (and edit it to specific architecture), the edit is saved for the current build (as should be). However, next time I update the package using `yay -Syu --devel` (and don't edit `PKGBUILD`, since I expect the edit on clean install to be persistent), it uses "stock" `PKGBUILD` douwnloaded from AUR.

I believe it would be beneficial, to use this edited PKGBUILD, since the version in AUR did not change and the update is happening solely due to original git repo being updated.

It is entirely possible, that `yay` has a switch to do so and I have not discovered it yet. If that is the case, please point me to it

#### Steps to reproduce
1. Install devel package and edit PKGBUILD using yay facilities
2. Perform devel update sometime in the future, when the package is NOT updated in AUR, however the underlying repo is updated and therefore update is triggered.
3. Do not invoke the editmenu, because it is believed (in fact known, I am maintainer of the aforementioned package), that `PKGBUILD` was not updated

#### Current behavior
Step 3 uses stock `PKGBUILD` form AUR

#### Expected behavior
Step 3 should use edited `PKGBUILD` from building the package the first time

#### Config
<details markdown=1>
<summary markdown=1>

`yay -Pg`
</summary>

```
{
	"aururl": "https://aur.archlinux.org",
	"buildDir": "/home/otaj/.cache/yay",
	"absdir": "/home/otaj/.cache/yay/abs",
	"editor": "",
	"editorflags": "",
	"makepkgbin": "makepkg",
	"makepkgconf": "",
	"pacmanbin": "pacman",
	"pacmanconf": "/etc/pacman.conf",
	"redownload": "no",
	"rebuild": "no",
	"batchinstall": false,
	"answerclean": "",
	"answerdiff": "",
	"answeredit": "",
	"answerupgrade": "",
	"gitbin": "git",
	"gpgbin": "gpg",
	"gpgflags": "",
	"mflags": "",
	"sortby": "votes",
	"searchby": "name-desc",
	"gitflags": "",
	"removemake": "yes",
	"sudobin": "sudo",
	"sudoflags": "",
	"requestsplitn": 150,
	"sortmode": 0,
	"completionrefreshtime": 7,
	"sudoloop": false,
	"timeupdate": false,
	"devel": true,
	"cleanAfter": false,
	"provides": true,
	"pgpfetch": true,
	"upgrademenu": true,
	"cleanmenu": true,
	"diffmenu": true,
	"editmenu": false,
	"combinedupgrade": false,
	"useask": false
}
```
</details>
#### Affected Version
<!-- Please ensure you are using the latest yay-git package -->
<!-- Use `yay -V` to get installed version -->
<!-- Example: `yay v8.1139.r0.g9ac4ab6 - libalpm v11.0.1` -->
yay v9.4.3.r0.g87fcfbf - libalpm v12.0.1

#### Issue

Using multiple '--overwrite' causes an error.

<!-- The following sections may be left out if not relevant -->
#### Steps to reproduce
<!-- Use exact commands where applicable -->
1. Try running :
```
yay -S --overwrite '/usr/lib/python3.8/site-packages/blabla*' --overwrite '/usr/bin/blabla*' python-pyhelm
```

#### Output

Error:
```
$ yay -S --overwrite '/usr/lib/python3.8/site-packages/blabla*' --overwrite '/usr/bin/blabla*' python-pyhelm
error: target not found: /etc/pacman.conf                                                                                                                                   
warning: '/etc/pacman.conf' is a file, did you mean -U/--upgrade instead of -S/--sync?
warning: python-3.8.1-3 is up to date -- reinstalling
Error installing repo packages
```

Config :
```
$ yay -Pg
{
	"aururl": "https://aur.archlinux.org",
	"buildDir": "/home/st0rmingbr4in/.cache/yay",
	"absdir": "/home/st0rmingbr4in/.cache/yay/abs",
	"editor": "",
	"editorflags": "",
	"makepkgbin": "makepkg",
	"makepkgconf": "",
	"pacmanbin": "pacman",
	"pacmanconf": "/etc/pacman.conf",
	"redownload": "no",
	"rebuild": "no",
	"batchinstall": false,
	"answerclean": "",
	"answerdiff": "",
	"answeredit": "",
	"answerupgrade": "",
	"gitbin": "git",
	"gpgbin": "gpg",
	"gpgflags": "",
	"mflags": "",
	"sortby": "votes",
	"searchby": "name-desc",
	"gitflags": "",
	"removemake": "yes",
	"sudobin": "sudo",
	"sudoflags": "",
	"requestsplitn": 150,
	"sortmode": 0,
	"completionrefreshtime": 7,
	"sudoloop": false,
	"timeupdate": false,
	"devel": false,
	"cleanAfter": false,
	"provides": true,
	"pgpfetch": true,
	"upgrademenu": true,
	"cleanmenu": true,
	"diffmenu": true,
	"editmenu": false,
	"combinedupgrade": false,
	"useask": false
}
```

We can see indeed that the generated pacman command is incorrect:
```
execve("/usr/bin/sudo", ["sudo", "pacman", "-S", "--overwrite", "/usr/lib/python3.8/site-packages/*", "--overwrite", "--config", "/etc/pacman.conf", "--", "community/python-smmap", "community/python-gitdb", "community/python-gitpython", "community/python-grpcio", "extra/python-protobuf", "community/python-pyaml", "community/python-docutils", "community/python-botocore", "community/python-s3transfer", "community/python-boto3"]
```
<!-- Include the FULL output -->
<!-- Include any relevant commands/configs -->
<!-- The current yay config can be printed with `yay -Pg` -->
<!-- Use code blocks -->
<!-- Paste services are only needed for excessive output (>500 lines) -->

Hi,

is there way how to exclude packages in number range? For example:
```
$ yay -Syu
:: Synchronizing package databases...
 core is up to date
 extra                                                                                                         1643.3 KiB  18.7 MiB/s 00:00 [--------------------------------------------------------------------------------------] 100%
 community                                                                                                        4.8 MiB  35.0 MiB/s 00:00 [--------------------------------------------------------------------------------------] 100%
:: Searching databases for updates...
:: Searching AUR for updates...
 -> terraform: ignoring package upgrade (0.12.9-1 => 0.12.18-1)
 -> Missing AUR Packages:  kde-l10n-cs  libxxf86dga  pygtksourceview2  yaourt
 -> Flagged Out Of Date AUR Packages:  yay-bin
:: 7 Packages to upgrade.
 7  community/python-more-itertools  8.0.2-1                 -> 8.1.0-1
 6  community/python-paramiko        2.6.0-3                 -> 2.7.1-1
 5  community/tilix                  1.9.3-5                 -> 1.9.3-6
 4  community/vault                  1.2.0-3                 -> 1.3.1-1
 3  community/zim                    0.72.0-2                -> 0.72.1-1
 2  aur/downgrade                    6.2.2-0                 -> 6.2.3-0
 1  aur/vivaldi-ffmpeg-codecs        79.0.3945.93-1          -> 79.0.3945.117-1
==> Packages to exclude: (eg: "1 2 3", "1-3", "^4" or repo name)
==> "^6-7" 

```

Thanx for your help?
#### Affected Version
<!-- Please ensure you are using the latest yay-git package -->
<!-- Use `yay -V` to get installed version -->
<!-- Example: `yay v8.1139.r0.g9ac4ab6 - libalpm v11.0.1` -->
$ yay -V
yay v9.4.2 - libalpm v12.0.1

#### Issue
yay -Syu should show the upgrademenu when the upgrademenu option is true. Currently I'm only able to make it show on the yay -Syuw which is not much useful since the upgrade install will download the unselected package in any case.

On another note, I find it strange that the upgrade menu is shown after downloading all the packages and not before. In particular, when doing a large upgrade (kde!) it can take a long time between starting the upgrade command and getting the upgrade menu to show. If it was shown before the only delay would be the repo update and after doing our selection, the upgrade can complete "unatended" until the end.

1. Appended the -n option to the cleanRemove and removeMake functions.
2. Make dependancies are installed with the --asdeps option.
#### Affected Version
<!-- Please ensure you are using the latest yay-git package -->
<!-- Use `yay -V` to get installed version -->
<!-- Example: `yay v8.1139.r0.g9ac4ab6 - libalpm v11.0.1` -->
yay v9.4.2.r20.g9e2713e - libalpm v12.0.1

#### Issue

Hi,
This is not an issue *per se*, but more of a suggestion.
The `natron` package (along with its dependencies `openfx-arena`, `openfx-gmic`, `openfx-io` and `openfx-misc`) have recently been updated from `v2.3.15 RC 10-1` to `RC 13-1`.
Yay however fails to see the the RC 13 as an update because the version string does not follow the same exact formattingÂ : RC 10 is written as `2.3.15_rc.10-1` whereas RC 13 is `2.3.15_rc13-1` (notice the missing dot between "rc" and the following number).

I understand perfectly that this makes sense in a string comparison (`"2.3.15_rc.10-1" > "2.3.15_rc13-1"`) but IMO that does not make sense in a version number comparison.

Would it be possible to do the comparison on a "canonical form" of the version number string that would be robust to small typographic changes like this?

<!-- The following sections may be left out if not relevant -->
#### Steps to reproduce
<!-- Use exact commands where applicable -->
1. have `natron v2.3.15_rc.10-1` installed
2. `$ yay -Syu`

#### Output
<!-- Include the FULL output -->
<!-- Include any relevant commands/configs -->
<!-- The current yay config can be printed with `yay -Pg` -->
<!-- Use code blocks -->
<!-- Paste services are only needed for excessive output (>500 lines) -->
```
:: Synchronizing package databases...
 core is up to date
 extra is up to date
 community is up to date
 multilib is up to date
:: Starting full system upgrade...
 there is nothing to do
:: Searching databases for updates...
:: Searching AUR for updates...
 -> coin-or-ipopt: local (1:3.12.13-1) is newer than AUR (3.13.0-1)
 -> natron: local (2.3.15_rc.10-1) is newer than AUR (2.3.15_rc13-1)
 -> openfx-arena: local (2.3.15_rc.10-1) is newer than AUR (2.3.15_rc13-1)
 -> openfx-gmic: local (2.3.15_rc.10-1) is newer than AUR (2.3.15_rc13-1)
 -> openfx-io: local (2.3.15_rc.10-1) is newer than AUR (2.3.15_rc13-1)
 -> openfx-misc: local (2.3.15_rc.10-1) is newer than AUR (2.3.15_rc13-1)
 -> Missing AUR Packages:  GoticoAntiqua-git  i3blocks-gaps-git  intel-vtune-amplifier  python-sip-pyqt5  python2-dukpy  python2-gmpy2  python2-pywavelets  python2-sip  python2-sphinx_rtd_theme  python2-whoosh  xf86-input-keyboard  xf86-input-mouse  xorg-server-xdmx
 -> Orphaned AUR Packages:  ect
 -> Flagged Out Of Date AUR Packages:  firefox-nightly  koreader-bin
 there is nothing to do
```
If you run `pacman -Qm` all the packages not available in the official repos will be printed. The output of `yay -Qm` is strictly the same, with, in it the packages installed from the AUR. Shouldn't this command ignore the AUR packages? Or maybe a new flag to list all the packages not installed from a repo, neither from the official ones nor from the AUR, may be useful.
#### Affected Version

    $ yay --version
    yay v9.4.2 - libalpm v12.0.1

#### Issue

Be able to search interactively in package results:

Searching for *elementary* packages this is the closest I could get:

    yay elementary --color=always | less -R

but as the result is interactive too an internal solution would be great.

#### Steps to reproduce
1. search for a package
2. get too much results
3. try to refine the result to be sure what package to install

#### Output

```
$ yay elementary --color=always 
67 aur/translator-bzr r4-1 (+0 0.00%) 
    Translator developed for Elementary OS desktop.
66 aur/currency-bzr r39-1 (+0 0.00%) 
    Currency converter developed for Elementary OS desktop.
65 aur/eradio-git 115.7f6453f-1 (+0 0.00%) (Orphaned) (Out-of-date 2017-07-23) 
...
```

#### Affected Version
```
$ yay -V
yay v9.4.2 - libalpm v12.0.1
```

#### Issue

When trying to install a package that involves cloning an SVN repo, a connection error occurs which aborts the installation:

```
$ yay -S ttf-mac-fonts
:: Checking for conflicts...
:: Checking for inner conflicts...
[Aur: 1]  ttf-mac-fonts-20100901.134-1

:: Downloaded PKGBUILD (1/1): ttf-mac-fonts
:: Parsing SRCINFO (1/1): ttf-mac-fonts
==> Making package: ttf-mac-fonts 20100901.134-1 (Wed 08 Jan 2020 12:38:01 CET)
==> Retrieving sources...
  -> Cloning ttf-mac-fonts svn repo...
svn: E170013: Unable to connect to a repository at URL 'https://svn.code.sf.net/p/macbuntu/code/Macbuntu/fonts'
svn: E000111: Error running context: Connection refused
==> ERROR: Failure while downloading ttf-mac-fonts svn repo
    Aborting...
Error downloading sources: ttf-mac-fonts
```

My network is behind a proxy, which is configured properly everywhere where I encountered problems so far (environment variables, keeping them when running `sudo`, etc.). Cloning this particular repository also works by itself:

```
$ svn checkout https://svn.code.sf.net/p/macbuntu/code/Macbuntu/fonts
A    fonts/mac
A    fonts/gbk
A    fonts/latin
...
```