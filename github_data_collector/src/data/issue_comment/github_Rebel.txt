Hi there,
Could you please support install via Carthage ?
I'm facing with the issue:
```
Build Failed
	Task failed with exit code 65:
	/usr/bin/xcrun xcodebuild -workspace /Users/neo/rebel/Carthage/Checkouts/Rebel/Rebel.xcworkspace -scheme Rebel -configuration Release -derivedDataPath /Users/neo/Library/Caches/org.carthage.CarthageKit/DerivedData/9.2_9C40b/Rebel/0.4.2 ONLY_ACTIVE_ARCH=NO CODE_SIGNING_REQUIRED=NO CODE_SIGN_IDENTITY= CARTHAGE=YES archive -archivePath /var/folders/tp/7qwgtnw57p9fkr_0z_8sx0fr0000gn/T/Rebel SKIP_INSTALL=YES GCC_INSTRUMENT_PROGRAM_FLOW_ARCS=NO CLANG_ENABLE_CODE_COVERAGE=NO (launched in /Users/neo/rebel/Carthage/Checkouts/Rebel)
```

```
1 error generated.

** ARCHIVE FAILED **


The following build commands failed:
        CompileC /Users/neo/Library/Caches/org.carthage.CarthageKit/DerivedData/9.2_9C40b/Rebel/0.4.2/Build/Intermediates.noindex/ArchiveIntermediates/Rebel/IntermediateBuildFilesPath/Rebel.build/Release/Rebel.build/Objects-normal/x86_64/CAAnimation+RBLBlockAdditions.o Rebel/CAAnimation+RBLBlockAdditions.m normal x86_64 objective-c com.apple.compilers.llvm.clang.1_0.compiler
(1 failure)
```
This framework was mostly a shim to make 10.7 nicer. Now that we're deploying to 10.8, we don't need most of the stuff in here.

Nevermind it being crufty, with stuff like `RBLPopover`, `RBLView`, `RBLViewController`, etc. that nobody should really be using going forward. :worried: 

If the `contentSize` of the popover is changed while the popover is shown, it should update correctly.

NSView+RBLViewControllerAdditions swizzle's NSView's implementation and require views to call super viewDidMoveToSuperview and viewDidMoveToWindow. 

RBLView currently does not call the super's implementation.

https://github.com/github/Rebel/blob/master/Rebel/RBLHTMLView.m#L118-L120

`RBLHTMLView` spins the current run loop while it waits for the HTML to render.

I haven't dug into it too far yet, but I've seen this cause an intermittent crash if the HTML for the view has been assigned inside of a 'transaction' such as the `begin/endUpdates` calls used in view based `NSTableViews`.

For example:

```
- (NSView *)tableView:(NSTableView *)tableView viewForTableColumn:(NSTableColumn *)tableColumn row:(NSInteger)row {
    if ((NSUInteger)row >= self.cellCount) return nil;

    if (row == 0) {
       MYCellView *cellView = [[MYCellView alloc] initWithNibName:@"MYCellView" bundle:nil];
         cellView.rblHTMLView = self.htmlString;
    }
}
```

This method is called when rows are inserted into the table view, so usually after a call to `[tableView beginUpdates]`. My theory is that spinning the run loop is implicitly calling `endUpdates` resulting in unbalanced calls.

I have these categories that add block support to `NSAlert` and `NSMenuItem`, and I was thinking they might be a good addition to Rebel if you guys think that this is within the scope of the problems the framework is designed to solve. Let me know if I should submit a PR.

/PrecompiledHeaders/Rebel-Prefix-elkrncaafhxcmjgxesrfmxwglhie/Rebel-Prefix.pch.pth Rebel/Rebel-Prefix.pch normal i386 objective-c com.apple.compilers.llvm.clang.1_0.compiler
    cd "/Volumes/Store/Projects/ccPing/ccPing OS X/Rebel"
    setenv LANG en_US.US-ASCII
    /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/clang -x objective-c-header -arch i386 -fmessage-length=0 -std=gnu99 -fobjc-arc -Wno-trigraphs -fpascal-strings -Os -Werror -Wmissing-field-initializers -Wno-missing-prototypes -Wreturn-type -Wno-implicit-atomic-properties -Wno-receiver-is-weak -Wduplicate-method-match -Wformat -Wmissing-braces -Wparentheses -Wswitch -Wunused-function -Wunused-label -Wno-unused-parameter -Wunused-variable -Wunused-value -Wempty-body -Wuninitialized -Wno-unknown-pragmas -Wno-shadow -Wfour-char-constants -Wconversion -Wconstant-conversion -Wint-conversion -Wenum-conversion -Wsign-compare -Wshorten-64-to-32 -Wpointer-sign -Wno-newline-eof -Wno-selector -Wno-strict-selector-match -Wundeclared-selector -Wdeprecated-implementations -DNDEBUG=1 -DNS_BLOCK_ASSERTIONS=1 -fasm-blocks -fstrict-aliasing -Wprotocol -Wdeprecated-declarations -mmacosx-version-min=10.7 -Wno-sign-conversion -iquote /Users/xcodev/Library/Developer/Xcode/DerivedData/ccPing-dwhjstpzfibytxbypacokcdgaceo/Build/Intermediates/ArchiveIntermediates/ccPing/IntermediateBuildFilesPath/Rebel.build/Release/Rebel.build/Rebel-generated-files.hmap -I/Users/xcodev/Library/Developer/Xcode/DerivedData/ccPing-dwhjstpzfibytxbypacokcdgaceo/Build/Intermediates/ArchiveIntermediates/ccPing/IntermediateBuildFilesPath/Rebel.build/Release/Rebel.build/Rebel-own-target-headers.hmap -I/Users/xcodev/Library/Developer/Xcode/DerivedData/ccPing-dwhjstpzfibytxbypacokcdgaceo/Build/Intermediates/ArchiveIntermediates/ccPing/IntermediateBuildFilesPath/Rebel.build/Release/Rebel.build/Rebel-all-target-headers.hmap -iquote /Users/xcodev/Library/Developer/Xcode/DerivedData/ccPing-dwhjstpzfibytxbypacokcdgaceo/Build/Intermediates/ArchiveIntermediates/ccPing/IntermediateBuildFilesPath/Rebel.build/Release/Rebel.build/Rebel-project-headers.hmap -I/Users/xcodev/Library/Developer/Xcode/DerivedData/ccPing-dwhjstpzfibytxbypacokcdgaceo/Build/Intermediates/ArchiveIntermediates/ccPing/BuildProductsPath/Release/include -I/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/include -I/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/include -I/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/include -I/Users/xcodev/Library/Developer/Xcode/DerivedData/ccPing-dwhjstpzfibytxbypacokcdgaceo/Build/Intermediates/ArchiveIntermediates/ccPing/IntermediateBuildFilesPath/Rebel.build/Release/Rebel.build/DerivedSources/i386 -I/Users/xcodev/Library/Developer/Xcode/DerivedData/ccPing-dwhjstpzfibytxbypacokcdgaceo/Build/Intermediates/ArchiveIntermediates/ccPing/IntermediateBuildFilesPath/Rebel.build/Release/Rebel.build/DerivedSources -Wno-gcc-compat -F/Users/xcodev/Library/Developer/Xcode/DerivedData/ccPing-dwhjstpzfibytxbypacokcdgaceo/Build/Intermediates/ArchiveIntermediates/ccPing/BuildProductsPath/Release --serialize-diagnostics /Users/xcodev/Library/Developer/Xcode/DerivedData/ccPing-dwhjstpzfibytxbypacokcdgaceo/Build/Intermediates/ArchiveIntermediates/ccPing/PrecompiledHeaders/Rebel-Prefix-elkrncaafhxcmjgxesrfmxwglhie/Rebel-Prefix.pch.dia -c "/Volumes/Store/Projects/ccPing/ccPing OS X/Rebel/Rebel/Rebel-Prefix.pch" -o /Users/xcodev/Library/Developer/Xcode/DerivedData/ccPing-dwhjstpzfibytxbypacokcdgaceo/Build/Intermediates/ArchiveIntermediates/ccPing/PrecompiledHeaders/Rebel-Prefix-elkrncaafhxcmjgxesrfmxwglhie/Rebel-Prefix.pch.pth -MMD -MT dependencies -MF /Users/xcodev/Library/Developer/Xcode/DerivedData/ccPing-dwhjstpzfibytxbypacokcdgaceo/Build/Intermediates/ArchiveIntermediates/ccPing/PrecompiledHeaders/Rebel-Prefix-elkrncaafhxcmjgxesrfmxwglhie/Rebel-Prefix.pch.d

error: -fobjc-arc is not supported on platforms using the legacy runtime
Command /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/clang failed with exit code 1

Xcode 4.6.1
Mac OS X 10.8.3
Build debug: fine
Build to archive: Failed

Please help

RBLPopover should mimic the Behavior of NSPopover. If the Size of a ViewController's View changes, the Popover is allready shown and I perform

[popover setContentSize:NSMakeSize(controller.view.frame.size.width, controller.view.frame.size.height)];

the Popover should resize dynamically, like NSPopover does! RBLPopover however does not resize.

NSPopover contentSize Docu:
"The popover's content size is set to match the size of the content view when the content view controller is set. Changes to the content size of the popover will cause the popover to animate while it is shown if the animates property is YES. This property is exposed as a read-only binding."

`RBLViewController` is of dubious quality (who is that @joshaber guy that wrote `JAViewController` anyways?), and involves some hackiness (like #85). It can also be useful to know when subviews appear/disappear, and nested view controllers are never fun.

Instead, maybe we could add a category to `NSView` that allows block callbacks to be installed for significant events (e.g., `viewWillAppear` and such). This doesn't enforce any kind of architectural pattern, and also makes it easier to create [signals](https://github.com/ReactiveCocoa/ReactiveCocoa) out of those events.

I disagree with the default setting of returning YES from `requiresConstraintBasedLayout`.

The method `layout` is called _only_ under auto layout on 10.7, whereas on 10.8 `layout` is called either because auto layout is enabled, or because _the view is layer-backed_. As a result, apps that need to use `layout`-based drawing code on 10.8 yet still don't want to use auto layout are left in a bind if they want to use `RBLView`.

If one single view touches any part of auto layout, the whole window will fall victim to the lag that auto layout can induce, especially on table views.

What can be done about this?
