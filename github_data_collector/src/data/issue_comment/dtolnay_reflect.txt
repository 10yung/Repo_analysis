This pull request is for parsing generics in the library macro. I tried to limit the scope, but it turned out a bit more comprehensive than anticipated. There are still some rough corners here and there, and there are no logic that deals with trait resolution, so the output from the compiler is incorrect when dealing with generics. I also have yet to support parsing of associated types in traits.

Other than that, I think the parsing works as intended.
There are cases where type inference is impossible, even when fully qualified paths to every method/function is given. In those cases the macro author need to specify the type.
Consider this function:
```Rust
fn cmp_str() -> bool {
    let __v0 = ::std::str::FromStr::from_str("str");
    let __v1 = ::std::result::Result::unwrap(__v0);
    let __v2 = ::std::string::ToString::to_string("str");
    let __v3 = ::std::cmp::PartialEq::eq(&__v2, &__v1);
    __v3
}
```
In this case it can't infer the type of __v0, since it can't know what the Self type of FromStr is. This instance could be fixed if we allowed specifying the Self type. We could then change the first line to:
```Rust
let __v0 = <::std::string::String as ::std::str::FromStr>::from_str("str");
```
A separate issue can arise if we invoke a trait function with generic parameters, and one of the parameters needs to be specified.

I'm not sure what would be a good interface to deal with this issue. We might generate ```INVOKE_WITH_SELF```. where the first parameter is a Type or RuntimeType parameter, and the rest works like regular ```INVOKE```. We might alternatively have a ```set_self``` function that deals with this, that can be used after a normal ```INVOKE```. Unfortunately, this only deals with the Self issue, and not generics in general.

Any suggestions here would be helpful.
Before introducing a thread_local WipFunction in #13, the only way for us to attach literals into the right WipFunction was by constructing them through methods of MakeFunction, as in `f.unit()` and `f.string("...")`.

Now that we have a thread_local way to track what goes where, these literal constructors would make more sense as plain functions rather than methods of MakeFunction: `reflect::unit()` and `reflect::string("...")`.
Currently the ```library``` macro does not support cross referencing types and traits.

It would be nice to be able to do something like this:
```Rust
library! {
    extern crate Crate {
        mod Mod1 {
            type Type1;
            fn fun(super::Mod2);
        }

        mod Mod2 {
            type Type2;
            fn fun(::Crate::Mod1);
            fn dynamic(&dyn crate::Trait);
        }
        trait Trait {}
    }
}
This is a build script that finds `libcore` (stdlib) sources and produces `out.rs` with `libcore` definitions as `library!` macro. Mostly broken due to unsupported generic and `Self` parameters in arguments or return type position.

See `out.rs` file in this PR as an example of the output.

@dtolnay this is just for you to see my approach and to verify whether it's feasible to continue or not.
Suppose we have:

```rust
reflect::library! {
    extern crate demo {
        trait Demo {
            fn f(&self);
        }
        trait SomeTrait {}
        fn dynamic_dispatch(&dyn SomeTrait);
        fn static_dispatch<T: SomeTrait>(&T);
    }
}
```

and our user's `derive(Demo)` macro is being invoked on:

```rust
#[derive(Demo)]
struct S<T> {
    field: T,
}
```

Then if they do:

```rust
let field = receiver.get_field("field");
RUNTIME::demo::dynamic_dispatch.INVOKE(field);

// OR

RUNTIME::demo::static_dispatch.INVOKE(field);
```

then `reflect` needs to identify that these INVOKEs require a trait bound and emit the right bound on the impl we generate.

```rust
impl<T> demo::Demo for S<T>
where
    T: demo::SomeTrait, // inferred
{
    fn f(&self) {
        demo::dynamic_dispatch(&self.field);
    }
}
```
The reflect::library! macro currently only accepts functions as trait functions or associated functions. We'll also need to work with free functions like str::from_utf8 that are not part of a trait or impl block.

```rust
reflect::library! {
    extern crate std {
        mod str {
            fn from_utf8(&[u8]) -> Result<&str, Utf8Error>
        }
    }
}
```

```rust
let result = RUNTIME::std::str::from_utf8.INVOKE(bytes);
```
The user shouldn't have to write out their own reflect::library! description of extern crate std. A complete definition of everything in std should be built in to the reflect crate because practically all users will need it.

We still need to keep reflect::library! so that users can provide definitions of crates other than std, for example if serde_derive were implemented using reflect then it would need to contain a reflect::library! providing all the relevant signatures from the serde crate.
The current IR (based on WipFunction for functions, and ValueRef + ValueNode for values) just barely works for simple macros but is probably not going to be pleasant to work with internally as the compiler gets more interesting.

Basically the entire current implementation in the *src/* directory is just supposed to be a proof of concept that we can stack enough RefCells on top of each other to get something reasonably convenient from the user's perspective. :smiling_imp: I am open to completely replacing it as needed.
This part of the current generated code would be better expressed as a `match`, which would be able to work equally well against enums later.

```rust
let __v3 = &__v0.x;
let __v4 = &__v0.y;
/* ... */
```

```rust
match __v0 {
    Point { x: __v3, y: __v4 } => {
        /* ... */
    }
}
```