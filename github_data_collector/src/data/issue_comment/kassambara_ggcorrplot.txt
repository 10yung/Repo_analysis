Will it be possible for `ggcorrplot` to allow users to not only display the correlation coefficients but also asterisks denoting the significance level?

Like: http://www.strengejacke.de/sjPlot/reference/sjp.corr.html#examples

![image](https://user-images.githubusercontent.com/11330453/69042807-28d4ed00-09f2-11ea-9cb7-bb5f48b9793d.png)

When `ggcorrplot()` is called with `hc.order=T` and a matrix of p-values is provided, it rounds the p-values to `digits` significant digits before testing them against the threshold level for significance. With the default values `digits=2` and `sig.level=0.05`, this can cause p-values as large as 0.0549 to be considered significant. They should be tested for significance before any rounding.

Currently, `ggcorrplot` color codes only the correlation coefficients but not p-values, if a p-matrix is provided.

A possible way to do this would be to use `biscale` package (https://github.com/slu-openGIS/biscale) with two different scales for _r_ and _p_.

![image](https://user-images.githubusercontent.com/11330453/62258024-69bedc80-b3d6-11e9-9fa1-fa2cbf70f726.png)


Question from a user

I am using it for a large plot of 26 variables. Would it be possible to enable the correlation coefficient to be in bold? Also, would it be possible to display it without the initial zero - instead of 0.23 and -0.67, .23 and -.67?
I recently updated the ggcorrplot package to 0.1.2.  Running ggcorrplot() on a correlation matrix with the hc.order=T option, the ordering of the heatmap drastically changed compared to the older version.  I don't know if this is a bug or intentional, but I thought I should point it out to you.  Between the old vs new version, it looks like the only thing updated that could affect this is that you are rounding your correlation matrix.  At least in my data, this is making quite a difference in the final results.
I've a large matrix and perhaps I don't need to show the correlations between each and every variable. Instead, for comparison purposes between groups, I'd rather have a set of variables on the x-axis and the same on y-axis. Something like this figure: 
![image](https://user-images.githubusercontent.com/35524818/39638128-21dbfb2e-4fbd-11e8-89ef-acd4eeed7fc4.png)
https://www.researchgate.net/figure/Heatmap-showing-pearson-correlation-coefficients-between-security-indices-vs-features_fig2_233836152

It looks like an R figure but I have failed to find a nice way of producing something like this. Any ideas? 

I'm using your excellent correlation plot package with knitr and noticed that depending on the output size of the figure circles are either to small or to large. In most cases the default setting is ok but from time to time a little adjustment is needed.

This commit gives the user some freedom at least in this regard :)
Corrgrams were popularized by Friendly in this paper:
www.datavis.ca/papers/corrgram.pdf

He used a red (negative) to blue (positive) color palette, which has since become a sort of standard for corrgram colors.

I think your reverse color scheme will confuse many people.
Is it possible for `ggcorrplot` to support non-square correlation matrix? Such case is frequently in data analysis, for example when we only want to visualize correlation of a group of columns with another group of columns:

```
data(mtcars)

df1 <- mtcars[1:3]
df2 <- mtcars[4:7]

corr <- cor(df1, df2)
#              hp       drat         wt       qsec
# mpg  -0.7761684  0.6811719 -0.8676594  0.4186840
# cyl   0.8324475 -0.6999381  0.7824958 -0.5912421
# disp  0.7909486 -0.7102139  0.8879799 -0.4336979
```
`ggcorrplot` currently can not draw non-square correlation matrix. Also `cor_pmat` only takes single argument and cannot get p.values for correlation between two `data.frame` s.
