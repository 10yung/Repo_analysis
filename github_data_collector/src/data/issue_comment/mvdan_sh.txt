Copy makes a copy of the given Runner, suitable for use in parallel to the original.  The copy will have the same parameters, environment variables, etc, but they can all be modified without affecting the original.

Also fixes a tiny typo in a comment in the definition of Runner ("sub" vs "Sub").
`type` shows words as builtins and functions and so forth, but doesn't work with aliases.

```sh
gosh
$ type type
type is a shell builtin
$ function f { date ; }
$ type f
f is a function
$ alias f2=date
$ type f2
type: f2: not found
$
```
When invoked with flag `-su` skip files which have not been detected as
shell scripts instead of returning an error.
If scripts in a git repository don't have a `.sh` extension and are spread across various directories it's cumbersome to use `shfmt` in a pre-commit hook. It would be useful if `shfmt` could skip non-shell files when invoked from a git hook with the list of files being changed (as it is the case with [pre-commit](https://pre-commit.com/)).

This is similar to #288, but different, because the desired behavior here would be that not explicit configuration is required. Rather, `shfmt` should "magically" skip non-shell files.
Even if we can change this with an option, it would be great to know why you decide to remove any space between the redirect and the target, like you did for caveats: https://github.com/mvdan/sh#caveats

A short explanation and/or a link on the input would be enough.

This might help people to decide what is the best for them.
Docker (the org) likes to have its containers be consistent [0] and by
adding a simple entrypoint script we become compliant. This would in the
future allow it to be possible to become an 'official' container.

In any case, it also makes the application behave as expected from a
users point of view.

e.g. running the container only arguments, invokes shfmt. Adding `shfmt`
as the first argument, also still works as expected.

More importantly, it allows for starting the container with a shell by
using `/bin/sh` as an argument.

The last point is important as it allows CI's such as gitlab to use the
container 'as is' and run shfmt inside of it.

[0] https://github.com/docker-library/official-images#consistency

Signed-off-by: Olliver Schinagl <oliver@schinagl.nl>
We currently have the option to choose between indentation format, tabs vs spaces. However, it is very common (when using tabs) to only use tabs for indentation, but use spaces to align.

The most obvious spot is when aligning multiple if terms on multiple lines.

To give an example.
```console
	image="some long string" \
	      "spanning multiple lines"

	if [ -n "${image}" ] && \
	   docker build \
	          --hostname "$(hostname)"
	          --rm \
	          --interactive \
	          --tty \
	          --workdir "${workdir}" \
	          "${image}" "$(pwd)"; then
	fi
```
(note that github doesn't use a monospace font for rendered code, but not when editing/entering text *sigh*)
Here we have one indentation level (the level of the if) and alignment of the arguments.

The reason why we want to do this, is that regardless of the tabstop setting, things are always properly aligned. Using spaces only fixes this of course, but tab users don't want to ;)

I tried using -kp but that only messes with the arguments (hostname and workdir) and aligns those.

When [searching](https://duckduckgo.com/html?q=tab%20to%20indent%2C%20space%20to%20align) for it we get plenty of results.

I think vim calls it [smart-tabs](https://vim.fandom.com/wiki/Indent_with_tabs,_align_with_spaces#Smart_tabs)?

Since you probably don't want a new option for this, this would either be needed to be auto-detected (how to know when a space is for alignment vs just a stray whitespace following an indentation tab) or -i could be changed from uint to sint and -1 would be tabs with alignment :) This would 'break' if a user insist on having INT_MAX + 1 - UINT_MAX number of spaces, but since having anything more then 128 spaces shouldn't even be considered I think we're good.
Hi,

I have added two new printer options for a less compact style.

`-knl` (_keyword new line_) will put keywords like "then" and "do" on a new line.

**Example:**
```
if foo
then
    bar
fi
```
`-bnl` (_brace new line_) will put braces on new lines.

**Example:**
```
foo()
{
    bar
}
```
It would be great if you would accept the patch. Let me know if there is anything I need to change.

Regards,
Morgan
For loops with a syntax like this are fully supported by bash but shfmt complains about missing "do"-"done" statements. 
```sh 
   for FMT in jpg png jpeg gif; {
        downloadformat "$FMT" "$SINDEX" "$DOMAIN"
    }
```
Could be intentional, but looks like a bug/missing feature to me. 
Mimicking Parser.Interactive, this method implements the basics of a
full interactive shell. That's useful for many user-facing use cases,
and also as a debugging tool.

The function has zero options because the list of options it could take
is never-ending. We could start with PS1 and PS2, but we could also add
PS3, PS4, a context.Context, Parser options, et cetera.

Instead of tripling the amount of code and adding lots to the API,
suggest that advanced users simply copy the twenty lines to add their
own options and logic.