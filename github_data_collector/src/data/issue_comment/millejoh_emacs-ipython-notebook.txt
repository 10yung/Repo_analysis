Maybe I should write a macro.
I am running ihaskell in ein and the haskell kernel loads fine, and ihaskell works fine, but for some reason the autocompletion is not activated automatically, is something broken or do i need to enable some settings? i don't know if something like company-mode needs to be setup or not? if you could help me fix this, thanks
## Problem description
ein:jupyter-server-start: Command jupyter not found or not executable
when I try to start jupyter server.
## Steps to reproduce the problem
have installed(and working) jupyter
install this shitty package.
and voila.


<!-- Ensure no information sensitive to your institution is included!!! -->
## System info:

```cl
("EIN system info"
 :emacs-version "GNU Emacs 25.3.1 (x86_64-pc-linux-gnu, GTK+ Version 3.18.9)
 of 2018-01-06"
 :emacs-bzr-version nil
 :window-system x
 :emacs-variant nil
 :os
 (:uname
  "Linux guff-ThinkPad-T420 4.4.0-53-generic #74-Ubuntu SMP Fri Dec 2 15:59:10 UTC 2016 x86_64 x86_64 x86_64 GNU/Linux
"
  :lsb-release
  "No LSB modules are available.
Distributor ID:	LinuxMint
Description:	Linux Mint 18.1 Serena
Release:	18.1
Codename:	serena
")
 :notebook
 "DEPRECATION: Python 2.7 will reach the end of its life on January 1st, 2020. Please upgrade your Python as Python 2.7 won't be maintained after that date. A future version of pip will drop support for Python 2.7. More details about Python 2 support in pip, can be found at https://pip.pypa.io/en/latest/development/release-process/#python-2-support
"
 :ipython nil
 :image-types
 (svg imagemagick png gif tiff jpeg xpm xbm pbm postscript)
 :image-types-available
 (svg imagemagick png gif tiff jpeg xpm xbm pbm postscript)
 :request
 (:backend curl)
 :ein
 (:version "20191216.1849"
           :source-dir "/home/guff/.emacs.d/elpa/ein-20191216.1849/")
 :lib
 ((:name "websocket"
         :path "~/.emacs.d/elpa/websocket-20191123.2208/websocket.elc"
         :featurep t
         :version-var websocket-version
         :version "1.12")
  (:name "auto-complete"
         :path "~/.emacs.d/elpa/auto-complete-20170124.1845/auto-complete.elc"
         :featurep t
         :version-var nil
         :version nil)
  (:name "request"
         :path "~/.emacs.d/elpa/request-20191211.2051/request.elc"
         :featurep t
         :version-var request-version
         :version "0.3.0")
  (:name "deferred"
         :path "~/.emacs.d/elpa/deferred-20170901.1330/deferred.elc"
         :featurep t
         :version-var deferred:version
         :version "0.5.0")
  (:name "polymode"
         :path "~/.emacs.d/elpa/polymode-20191208.1239/polymode.elc"
         :featurep t
         :version-var nil
         :version nil)
  (:name "markdown-mode"
         :path "~/.emacs.d/elpa/markdown-mode-20190802.2215/markdown-mode.elc"
         :featurep nil
         :version-var nil
         :version nil)
  (:name "dash"
         :path "~/.emacs.d/elpa/dash-20180118.743/dash.elc"
         :featurep t
         :version-var nil
         :version nil)
  (:name "s"
         :path "~/.emacs.d/elpa/s-20171102.227/s.elc"
         :featurep t
         :version-var nil
         :version nil)
  (:name "skewer-mode"
         :path "~/.emacs.d/elpa/skewer-mode-20170730.1241/skewer-mode.elc"
         :featurep t
         :version-var nil
         :version nil)))
```


Hi,

Every save-related command gives me this:

```elisp
ein:notebook-enable-autosaves: Wrong type argument: ein:$notebook, nil
```
and I cannot save notebooks.

Does anyone have similar issue?
Hi,

I installed the latest release of ein: `20191201.1831` and I get the following error when I try `C-_` i.e. undo:

```
Error (ein): Undo failure diagnostic (nil (1282 . 1283) nil (1270 . 1282) nil (1269 . 1270) nil (1248 . 1269) nil (10 . 1238) (t . 0)) (8450f 8450f 8450f) | 8
```

I can provide more information if this is not enough.

Thanks,
Bilyan
As described in the title. Emacs freezes after calling ein:worksheet-toggle-slide-type while the cell has type markdown.

EIN version: 0.16.2.2
Emacs version: 26.3

When I open a notebook in EIN I cannot undo anything in the cells. Instead I get the error message

    user-error: No undo information in this buffer

I have seen #338; that;s why I add the following:

(**A**) In the `*Warnings*` buffer I get `Warning (ein): Disabling undo for set-mark-command`.

(**B**)  I tried to set explicitly `(setq ein:worksheet-enable-undo t)`, closed the notebook, restarted the server, reopened the notebook and added a new cell wit new content, but no avail: On `M-x undo` I still get `user-error: No undo information in this buffer`.

(**C**) I tried to switch the cell type to markdown, but that doesn't make any difference to the undo behaviour.

What can I do?
Is there a way to inform EIN of the current screen dpi so that it can keep plots the same size across different computers?

In Jupyter notebook, inline matplotlib plots scale reasonably with changes in screen size and resolution;  my work computer has a large 94 dpi screen while my Surface Pro has a little 185 dpi screen, yet plots are readable on either.  Jupyter notebook is reading the screen dpi and uses it to keep plots a more or less constant number of inches tall and wide.

But EIN seems to render inline plots at a fixed number of _pixels_ -- plots look fine on the 94 dpi screen and are unreadably small on the 185 dpi screen.  

Is there an EIN variable or customization I can set that controls the number of pixels covered by a plot, or better yet, is there an EIN setting for dpi, so that EIN calculates the number of pixels iself?
I have configured Jupyter on my machine with teh name  `jupnode` to be accessible from other machines (e.g. I set `c.NotebookApp.ip = '0.0.0.0'`). Therefore `jupyter notebook` outputs on start-up the full local domain of the server (e.g.:

    [I 12:28:21.656 NotebookApp] http://jupnode.local:8989/

However for some network/DNS reasons (which I cannot change) http://jupnode.local is on `jupnode` itself  not accessible, only `http://localhost` and `127.0.0.1` work.

So my question is: How can I configure `ein:jupyter-server-start` (running in Emacs on `jupnode`) to start Jupyter but not to parse out the URL from the command output, but use `127.0.0.1:8989` instead?

Hi,

Love EIN and thank you for all the efforts in making it a great tool!

I'm currently having an issue with ob-ein.
My current setup is Windows 10, Emacs 26.2, EIN 20191110.1647, and Anaconda. 

# The problem
**ipynb files default to using the `data` (virtual) environment, but ob-ein source blocks default to using Anaconda root environment.**

# Steps to reproduce
1. open command line prompt
2. activate `data` environment
3. start Emacs from the cmd
4. run `M-x ein:run` in Emacs
5. open an org file
6. type the following:
```
#+NAME: Python sanity check
#+begin_src ein-python :session localhost:8888/test.ipynb :results raw drawer 
import sys
sys.executable
#+end_src
```
7. get the following, which is the default python path for Anaconda
```
#+RESULTS: Python sanity check
:results:
'C:\\Program Files (x86)\\Microsoft Visual Studio\\Shared\\Anaconda3_64\\python.exe'
:end:
```
I'm able to run `ein:run` in Emacs and edit/run cells without a problem in a notebook. That is, the notebook will default to using the python.exe in the `data` environment.

# Steps to mitigate the problem
Since the code above was actually saved in the `test.ipynb`, the following manual fix mitigates the problem.
1. open the `test.ipynb` notebook
2. click the kernel option on the top left corner of the `test.ipynb` buffer
3. change kernel to python3, which is under the `data` environment
4. go back to the source block in org file
5. run `C-c C-c` again
6. get the following:
```
#+RESULTS: Python sanity check
:results:
'C:\\Users\\username\\AppData\\Local\\conda\\conda\\envs\\data\\python.exe'
:end:
```

# Further
Because [Just specifying {url-or-port} executes your source block in a single anonymous notebook](http://millejoh.github.io/emacs-ipython-notebook/#org-mode-integration-ob-ein), I was not able to fix this source block:
```
#+NAME: Python sanity check
#+begin_src ein-python :session localhost :results raw drawer 
import sys
sys.executable
#+end_src

#+RESULTS: Python sanity check
:results:
'C:\\Program Files (x86)\\Microsoft Visual Studio\\Shared\\Anaconda3_64\\python.exe'
:end:
```

Thanks!