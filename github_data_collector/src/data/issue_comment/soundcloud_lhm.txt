## Issue
While running the `Lhm.cleanup` command, I realized that the instructions and examples in the README stated the first argument as `:run` (see below) instead of a boolean as reflected in the [source code](https://github.com/darellkoh/lhm/blob/50907121eee514649fa944fb300d5d8a64fa873e/lib/lhm.rb#L59).

```ruby
Lhm.cleanup(:run)
```

## Fix
I modified the first argument in the `Lhm.cleanup` README.md instructions and examples to reflect the intended boolean usage in the source code:

```ruby
Lhm.cleanup(true)
```

Rails
```ruby
Lhm.cleanup(true, until: 1.day.ago)
```


I am interested in running a query that will return ROW_COUNT() once the update query has been run.
```
Lhm.change_table :table_one do |m|
  m.ddl("UPDATE table_one...")
end
```
One the above is run, is there a way to query for the row_count(to get no of records updated via lhm)?

The original problem in issue #141  was that if we alter table having external constraints (i.e refer by other tables using foreign key constraints) using lhm. it modifies the table without any warning and errors and lhm uses a method of modification is copy table and rename strategy when lhm renames origin table that time all references get changed. In MySQL renaming of tables works like it changes all external references to a new_table so it causing an issue after migration runs. I have faced this issue as well

So in this pull request have just added validation it checks external foreign key constraints for given table and if it founds any table having references so it aborts the migration. Need of this validation till the time LHM/we provide any solution for rebuilding for foreign key constraints 
As of this change in Rails (https://github.com/rails/rails/pull/21601) the #table_exists? should be replaced by #data_source_exists?

There was already an open issue for this matter: https://github.com/soundcloud/lhm/issues/144
I got this running LHM on a Rails 5 app.

`DEPRECATION WARNING: #table_exists? currently checks both tables and views. This behavior is deprecated and will be changed with Rails 5.1 to only check tables. Use #data_source_exists? instead.`

I notice `table_exists?` is indeed [present in LHM](https://github.com/soundcloud/lhm/search?utf8=%E2%9C%93&q=table_exists), so maybe it's just a matter of find-replace?
For example, I have 'users' table which I would like to alter (add 2 columns) with LHM.

But I have 2 more tables that have constraints on 'users' table.
As I understand, after LHM job they will point to old users table, not new one

how to fix it? 

LHM migration fails when there is existing lhm temp table (for example: "lhmn_users" which got created by previous LHM migration).
We need to do Lhm.cleanup to clean those tables.
Instead, if we have time-stamp, it wont conflict with the previous temp table.

Please review.

Our current setup is
master db server (primarydb) ->  RDS instance using RDS external replication (masterreplica) -> RDS read replicas \* 2 (us-west-1 and us-west-2)

When we run an LHM on a reasonably busy table on `primarydb` the read replicas `us-west-1` and  `us-west-2` report errors like this one:

```
Read Replica Replication Error - SQLError: 1032, reason: Could not execute Update_rows event on table database.table_name; Can&apos;t find record in &apos;table_name&apos;, Error_code: 1032; handler error HA_ERR_KEY_NOT_FOUND; the event&apos;s master log mysql-bin-changelog.138461, end_log_pos 1728883
```

The replication between primarydb and masterreplica continues to work just fine, it's only the read replicas that crack the poops.

All instances use `binlog_format  = ROW`
All instances are configured with `log_bin_trust_function_creators = 1`
All instances are running 5.6.22 or higher.

Anyone else got this sort of configuration working?

Things we believe but don't have specific evidence to prove (or disprove)
1.  The errors are less likely to occur if no updates occur to the table being LHM'ed (ie the trigger doesn't do any work).  LHMs do not _always_ cause replication issues, but it does appear to only not happen on fairly static tables.
2.  Running the LHM on the `masterreplica` directly does not break the Read replicas, BUT we have not run it on a RDS replica that has updates occuring to it.  (ie. it hasn't broken when we've experimented but see above).

Fixes some inconsistencies and outdated documentation around the `throttler`, `stride`, and `throttle` options.
