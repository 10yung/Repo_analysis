**Content: Artwork**

Summary:
A Replacement of the williwaws sprite to make the hai more unique

Assets:
[Hai Williwaw Assets.zip](https://github.com/endless-sky/endless-sky/files/4081803/Hai.Williwaw.Assets.zip)

![hai williwaw@2x](https://user-images.githubusercontent.com/32852156/72670843-8b596200-3a10-11ea-9fea-50a73cffec3d.png)

**Content (Artwork / Missions / Jobs)**

## Summary
This PR changes the description of Calda.
The description is mostly unchanged, but now the reason the carbon dioxide incident doesn't effect the economy is more due to the population forgetting about it, rather than the Paradise Planets being cartoonishly egotistical. This is a very small change, but that part of the description is something that's annoyed me ever since I started playing the game.
There's also a slight change in the wording of the spaceport to refer to "merchant captains" instead of "a captain such as yourself", since I don't know of any other instances it refers to you like that.
**Feature:** This PR implements the feature request discussed in issue #4135 (and in other tickets referenced from #4135)

## Feature Details
This PR moves reading of the Shift-input key from AI.cpp to Command.cpp (where all other keyboard inputs for flight are also read). This PR also adds a full-stop command for the flagship using the shift+H input.

## UI Screenshots
N/A

## Usage Examples
Fly around, then press shift+H to stop your ship.

**Describe the bug**
before 96e2b53b5c83ca5715411fb7d9d8b22fe4f16454, you could use the arrow keys while holding down the jump button, which allowed you to move back and forth without "disengaging autopilot". After the change, pressing any of the arrow keys "disengages autopilot" even while still holding the jump button, so you have to let go of the jump button and press it again. This also causes any escorts to stop waiting for you to release the jump button and start moving around again. Cancelling a jump before 96e2b53b5c83ca5715411fb7d9d8b22fe4f16454 worked by releasing the jump button while holding down the arrow keys, and not by simply pressing the arrow keys even while holding down the jump button.

**To Reproduce**
Steps to reproduce the behavior:
1. Press one of the arrow keys while holding down J
2. The Jump gets cancelled even though J is still held down.

**Expected behavior**
The jump should've only been cancelled if you let go of J while pressing the arrow keys.

**System (please complete the following information):**
 - OS: Arch Linux
 - Game Source: self-compiled
 - Version: 96e2b53b5c83ca5715411fb7d9d8b22fe4f16454

**Link to save file**
[Pouar Dragon 2.txt](https://github.com/endless-sky/endless-sky/files/4066698/Pouar.Dragon.2.txt)


**Content (Missions / Jobs)**

## Summary
Adds a small flavour mission where the player gets to help stop a plague (or die, depending on choices). I'll be adding one additional intermediary mission so that it isn't quite as much a "refuse once and you are dead" thing. And possibly reworking the choices a bit to give the player the chance to go back. 

## PR Checklist
 - [X] ~I updated the copyright attributions, or decline to claim copyright of any assets produced or modified~
 - [x] ~I uploaded the necessary image, blend, and texture assets here: {{insert link to assets}}~
 - [x] ~I created a PR to the [endless-sky-high-dpi repo](https://github.com/endless-sky/endless-sky-high-dpi) with the `@2x` versions of these art assets: {{insert PR link}}~
  
  ## PR Intention:
I'm intending on building this up to the point where it has three missions and a repeatable job. Depending on player choices, I'm envisioning three potential paths:
1) mission(accept), mission(accept), complete 4x jobs, mission (current outbreak contained)
2) mission(refuse), mission(accept), complete 4x jobs, (current outbreak contained but wider effect)
3) mission(refuse), mission(refuse), player killed.

Basically ensuring that the player gets at least two chances to prevent dying of the plague. 

There's also the potential of adding a fourth mission to the refuse/refuse chain just to prolongue the agony over a couple missions. Also potentially looking for a "greyer" 4th option. Probably something to the effect of if the player goes the refuse/refuse route, they can decide to skip town and stay out of human space for a  year or so until the plague timer runs out, in which case a bunch of planets suffer but the player gets to avoid dying without getting vaccinated. 
**Is your feature request related to a problem? Please describe.**
It's not an obvious problem in the base game. But it does limit the possibilities of the type of content that can be created.

There are very limited ways of creating continuous modifiers. What I mean by *modifiers* are things like damage, hit force, etc. done by weapons.

**Related Issue Links**
I may have seen an issue opened up months or years ago that addresses this issue **partially**. However, I can't find anything through the search feature.

**Describe the solution you'd like**
There are a few possible ways I've thought of approaching this. I want to lay them out to show the benefits and downsides of each.

- Solution A: Allow projectiles to continue living on after hitting an object.
  - Benefits: Lets a projectile hit multiple targets linearly. Gives the possibility of creating "*bleeding*" effects like constant shield damage or heat damage, or even buffs for ally ships.
  - Downsides: Obviously you'd want to also limit the amount of times it hits **one** object, and create something like a counter. To allow the projectile to create things like continuous area effects you'd have to also add in the ability to override the counter or/and add in your own values, ex: `counter 30` would limit the amount of times the same object gets hit to 30.

- Solution B: Allow projectiles to apply a constant effect for <amount of frames> to an object.
  - Benefits: It's easier to implement than *Solution A*. There are examples of such effects already in the game like ion damage, slowing damage, etc.
  - Downsides: You may have to add in an option for certain modifiers like Shield Damage, etc. to apply or override the effect for each modifier to allow for finer tweaking. It all depends how complex you want it to be. Another downside is that it's not a real solution for things like continuous area effects as the projectile will have already died and applied its modifiers to the objects that were within the blast radius, but none that enter after the trigger.

- Solution C: Implement both A & B
  - Benefits: Gives more options for creating continuous modifiers.
  - Downsides: Requires more additions and changes.

- Solution D: Implement a different solution that isn't shown here.

**Describe alternatives you've considered**
I first thought of this when I was creating an area damage weapon that lasted for a number of frames. I used submunitions to create a pseudo continuous effect, but the longer I made the effect last the more submunitions I had to create which quickly became hundreds of lines. It also meant that when a target object collided with the submunition's projectile it would instantly stop the area effect. This is not a good way of implementing this since it quickly pollutes and clutters the text files. The ability to have a constant rate reduces clutter and prevents small errors from having to duplicate frames.

**Additional context**
I only thought of this issue while trying to make area modifiers that lasted for more than one frame and decided to expand this feature to encompass all modifiers.
**Feature:** This PR implements the feature request detailed and discussed in issue #2738

## Feature Details
This PR makes the fast-forward key configurable. It does not make using Caps Lock for low framerate in debug mode configurable, however.

This would be helpful for people using Caps Lock as a compose, layout switch, or second escape key.
It also makes the fast-forward feature easier to discover.

The fact that Caps Lock still toggles low framerate in debug mode means that one can use fast-forward in conjunction with it, for example to reproduce a bug which occurs only after some time.

(Note: It would be nice if the keybinding is listed in [the manual](https://github.com/endless-sky/endless-sky/wiki/PlayersManual#key-bindings-and-shortcuts), even if this PR is not merged)

## UI Screenshots

| Before | After |
| --- | --- |
| ![image](https://user-images.githubusercontent.com/5276727/72220562-7c7b3700-355a-11ea-8e51-fe37a5687d4e.png) | ![image](https://user-images.githubusercontent.com/5276727/72220592-c3692c80-355a-11ea-9b39-2149b6bcd29d.png) |

(Setting below "Toggle Fullscreen")

## Usage Examples
N/A
## Summary
This PR adds a spaceport to Wormhole Alpha. Enabling NPCs and fleets that spawn in Waypoint to land on the wormhole.

Thanks to @Zitchas for suggesting this, as I only thought of doing it for the Remnant wormholes in #4737 
**Describe the bug**
Landing immediately after take-off gives correct "Landing on planet ..." output, but the landing doesn't get executed.

**To Reproduce**
Steps to reproduce the behavior:
1. Click depart on a planet (with spaceport and fully fueled ship).
2. Immediately press "Land" as soon as the main flight-screen appears.
3. Notice that the "Landing on planet ..." message appears correctly.
4. Note that the ship is not landing.

**Expected behavior**
I would expect either the landing to be executed as requested (which seems to make most sense), or the output message to be something different (like: "Cannot start landing while taking off.").

**Screenshots**
Here is a screenshot just after the issue happened, you can see the "Landing on planet ..." message, but the ship is not turning for landing.
![ignored_landing_during_takeoff](https://user-images.githubusercontent.com/35403542/71780633-43285180-2fc5-11ea-85a0-2549aed2b8f7.png)

**System (please complete the following information):**
 - OS: Debian Linux
 - Game Source: self-compiled
 - Version: recent master (75dabfe71e5891d47edd6ffda5544d0b5060b5e2)

**Link to save file**
N/A. Can be reproduced on on nearly any take-off.

**Additional context**
I haven't fully investigated the issue, but I think it is related to this code in Ship.cpp on line 1310:
```
else if(fuel >= attributes.Get("fuel capacity")
	|| !landingPlanet || !landingPlanet->HasSpaceport())
{
	zoom = min(1.f, zoom + .02f);
	SetTargetStellar(nullptr);
	landingPlanet = nullptr;
}		
```
This code appears to be executed continuously during take-off (until zoom is 1.0f) and appears to continuously clear the TargetStellar, even if the player just sets a new one for landing. After clearing TargetStellar, then the autopilot for landing automatically gets aborted (silently) in AI.cpp.

**Impact**
This issue will have little to no impact on normal/regular gameplay. There are very few situations where a player wants to take-off and then immediately wants to land again.
Players that encounter this issue might not even notice the issue; when a landing fails due to this issue, then pressing land again (a little bit later) results in a successful landing being executed.

Impact on fully automated tests (like the tests in #4370) and scripted flights (as proposed in #4720) is also minimal, since this automation/scripting should be able to work around this issue by waiting until zoom is 1.0f before giving commands.
**Content (Artwork / Missions / Jobs)**

## Summary
This PR creates a new boarding mission which is offered in while assisting Merchants and Syndicate, where an asteroid is going to hit the disabled ship you are boarding. There are three versions of it, where some of the choices you can make have a different endings. There are two others, however, that either always fail or always succeed
