## System Details

> What platform are you working with? eg. the output of config.guess

docker image: multiarch/ubuntu-debootstrap:powerpc-xenial

## Problems Description

Current master looses bits while passing values in [ruby-ffi](https://github.com/ffi/ffi). This was raised by the CI here: https://travis-ci.org/ffi/ffi/jobs/637077526

I tracked it down to this commit 73dd43afc8a447ba98ea02e9aad4c6898dc77fb0 and this 01a75ed76ea7e57f1b7a5c183e2b1e890e6aa0fd . After the first commit the build fails due to the missing `__int128` type and after the second commit the test failures occur.


This delta adds cmake configuration files, and targets various platforms and architectures.

<details>
  <summary>Usage</summary>

Unix/MinGW environments:

```sh
#!/usr/bin/env sh

git clone https://github.com/am11/libffi --branch feature/cmake-build-configs \
  --single-branch --depth 1
mkdir libffi/build
cd $_
cmake ..  # configure: options in AC counterpart can be overriden from command-line
          # e.g.:  cmake .. -DFFI_MMAP_EXEC_EMUTRAMP_PAX=1 -DVERSION=X.Y

# for MinGW:
cmake .. -G "Unix Makefiles"  # can use "MinGW Makefiles", bit i was using
                              # git-for-windows-sdk which complains that we should
                              # "not" have sh.exe in PATH, to proceed.. üòë

cmake --build . --config Release   # build

# builds ./libffi.a and ./libffi.so (or libffi.dylib on macOS)
```

Visual Studio:

```cmd
:: just a normal command prompt or powershell
:: (doesn't have to be VS developer command prompt,
:: or a prompt with vcvarsall.bat already ran..)

git clone https://github.com/am11/libffi --branch feature/cmake-build-configs ^
  --single-branch --depth 1
mkdir libffi\build
cd libffi
cmake ..  :: configure: options in AC counterpart are overriden from command-line,
          :: e.g.:  cmake .. -DFFI_MMAP_EXEC_EMUTRAMP_PAX=1 -DVERSION=X.Y

:: or to cross-compile:
cmake .. -A Win32
cmake .. -A ARM
cmake .. -A ARM64

cmake --build . --config Release   :: build

:: builds .\libffi.lib and .\libffi.dll
```
</details>

Minimal supported version of cmake is 2.8.8 (release APR 2012), where `add_library(..OBJECT..)` was introduced. That is used to prevent it for recompiling sources for static and shared targets (i.e. a negligible optimization). If need be, it can be reworked to support older version.

Introspection cases are written for x86_64, i386, aarch64 and arm ISAs. More cases can be added in future, I do not have access to SPARC and MIPS etc. right now.

Few symbols were dropped in (newly added) `:/include/fficonfig.h.in`, which are not used in the code and require unnecessary introspection cases; (most prominently `LIBFFI_GNU_SYMBOL_VERSIONING`).

Tested combinations:

| OS  | ARCH  | CMAKE  | RESULT  | COMMENT  |
|---|---|---|---|---|
| Ubuntu 18.04 | x86_64 | 3.15.4 | ‚úì |   |
| Ubuntu 16.04 | aarch64 | 3.5.1 | ‚úì |   |
| Ubuntu 18.04 | armv7l | 3.10.2 | ‚úì |   |
| Alpine Linux 3.11.2 | aarch64 | 3.15.5 | ‚úì |   |
| Alpine Linux 3.5.2 | armv7l | 3.6.3 | ‚úì |   |
| CentOS 6.10 | i386 | 2.8.12 | ‚úì |   |
| FreeBSD 12.0 | amd64 | 3.15.5 | ‚úì |   |
| SmartOS live release-20180315 | x86_64 | 3.10.1 | ‚úì |   |
| macOS 10.14.6 | X86_64 | 3.15.3 | ‚úì |   |
| Windows 10.0.19536.1000 | AMD64 | 3.15.5 | <del>√ó</del> ‚úì |  <del>MASM assembler does not like syntax of generated asm. see https://github.com/libffi/libffi/issues/275#issuecomment-570765967</del> |
| Windows 10.0.19536.1000 | X86 | 3.15.5 | <del>√ó</del> ‚úì |  <del>MASM assembler does not like syntax of generated asm. see https://github.com/libffi/libffi/issues/275#issuecomment-570765967</del> |
| Windows 10.0.19536.1000 | ARM64 | 3.15.5 | ‚úì |   |
| Windows 10.0.19536.1000 | ARM | 3.15.5 | ‚úì |   |

## System Details
RHEL 7.7 SELinux MLS in enforcing

## Problems Description

libffi is creating a temp file to execute in the users home directory and since there is no default context for these files they inherit the context of the directory (user_home_dir_t). There is no policy to create/execute files of this type. I could write policy to do this but I think this is not a good idea. How does libffi determine the path to use for these files?  Is there a way to set the path libffi uses for these files?

108 64-bit tests from libffi 3.3 RC1 fail for me on OpenIndiana 2019.04 with GCC 6.5:

```
...
PASS: libffi.bhaible/test-call.c -W -Wall -Wno-psabi -DDGTEST=27 -Wno-unused-variable -Wno-unused-parameter -Wno-unused-but-set-variable -Wno-uninitialized -O0 -DABI_NUM=FFI_THISCALL -DABI_ATTR=__THISCALL__ (test for excess errors)
Setting LD_LIBRARY_PATH to .::/export/home/newman/ws/oi-userland/components/library/libffi/build/amd64/testsuite/../.libs:.::/export/home/newman/ws/oi-userland/components/library/libffi/build/amd64/testsuite/../.libs
Execution timeout is: 300
spawn [open ...]^M
long long f(float,long long,int):(1.4,0x35c6f707fffffffa,0xe)->0x35c6f70800000009
FAIL: libffi.bhaible/test-call.c -W -Wall -Wno-psabi -DDGTEST=27 -Wno-unused-variable -Wno-unused-parameter -Wno-unused-but-set-variable -Wno-uninitialized -O0 -DABI_NUM=FFI_THISCALL -DABI_ATTR=__THISCALL__ execution test
Executing on host: /usr/gcc/6/bin/gcc /export/home/newman/ws/oi-userland/components/library/libffi/libffi-3.3-rc1/testsuite/libffi.bhaible/test-call.c   -W -Wall -Wno-psabi -DDGTEST=27 -Wno-unused-variable -Wno-unused-parameter -Wn
o-unused-but-set-variable -Wno-uninitialized -O0 -DABI_NUM=FFI_FASTCALL -DABI_ATTR=__FASTCALL__  -I/export/home/newman/ws/oi-userland/components/library/libffi/build/amd64/testsuite/../include -I/export/home/newman/ws/oi-userland/c
omponents/library/libffi/libffi-3.3-rc1/testsuite/../include  -I/export/home/newman/ws/oi-userland/components/library/libffi/build/amd64/testsuite/../include/.. -L/export/home/newman/ws/oi-userland/components/library/libffi/build/a
md64/testsuite/../.libs  -lffi -lm  -o ./test-call.exe    (timeout = 300)
...
```

The operating system itself it 64-bit, but GCC defaults to 32-bit code, unless `-m64` is added. I wonder if those tests fail due to being compiled as 32-bit? In 32-bit run all test passed.
Adding initial changes to support oss-fuzz in libffi (Ref [#292 ](https://github.com/libffi/libffi/issues/292).

**Steps to enable fuzzing in libffi:**
git clone https://github.com/libffi/libffi.git
cd libffi
./autogen.sh
./configure CC=clang CXX=clang++ LD=clang++ --enable-fuzzing LDFLAGS=-lffi --prefix=/path/to/precompiled/libffi.so/
make 
./x86_64-pc-linux-gnu/ffi_strlen_fuzzer
or
./x86_64-pc-linux-gnu/ffi_strlen2_fuzzer

Build integration to osss-fuzz is in-progress. Please review & provide your feedback.
## System Details

macOS Catalina 10.15
Apple clang version 11.0.0 (clang-1100.0.33.8)
Target: x86_64-apple-darwin19.0.0
Thread model: posix

## Problems Description

I am able to succesfully work with libffi and either macOS application or an iOS application that works on the simulator. I am using the static version of the library and I try to make sure that I am using the correct include files.

But when I am compiling for an actual iOS device (iPhone 6) then I get a segfault.

The actual code is here, which shouldn't throw any exceptions, works on simulator but not on device.

```C
    int count = 2;

    ffi_type *argType[count];
    argType[0] = &ffi_type_pointer;
    argType[1] = &ffi_type_pointer;

    void *argPointer[count];
    NSString* one = @"One %@";
    argPointer[0] = &one;
    NSString* two = @"Two";
    argPointer[1] = &two;

    ffi_cif cif;
    ffi_arg rc;
    
    if (ffi_prep_cif(&cif, FFI_DEFAULT_ABI, count, &ffi_type_void, argType) == FFI_OK) {
        ffi_call(&cif, FFI_FN(NSLog), &rc, argPointer);
    }
```

Just to make sure, I tried with both, bitcode enabled and bitcode disabled, but both with no luck.

libffi is available as a port in [vcpkg](https://github.com/Microsoft/vcpkg), a C++ library manager that simplifies installation for libffi and other project dependencies. Documenting the install process here will help users get started by providing a single set of commands to build libffi, ready to be included in their projects. 

We also test whether our library ports build in various configurations (dynamic, static) on various platforms (OSX, Linux, Windows: x86, x64, UWP, ARM) to keep a wide coverage for users.

I'm a maintainer for vcpkg, and [here is what the port script looks like](https://github.com/microsoft/vcpkg/blob/master/ports/libffi/portfile.cmake). We try to keep the library maintained as close as possible to the original library.
## System Details

<!--- What platform are you working with? eg. the output of config.guess -->

i686-pc-mingw32

<!--- Provide any toolchain details here. eg. compiler version -->

Microsoft (R) C/C++ Optimizing Compiler Version 19.23.28105.4 for x86

## Problems Description

<!--- Provide a description of the problem here -->

Can't build libffi with MSVC toolchain, on 32 bit Windows 10.

 ./configure CC="./msvcc.sh -clang-cl" CXX="./msvcc.sh -clang-cl" LD=link CPP="clang-cl -EP"
checking build system type... i686-pc-mingw32
checking host system type... i686-pc-mingw32
checking target system type... i686-pc-mingw32
continue configure in default builddir "./i686-pc-mingw32"
....exec /bin/sh .././configure "--srcdir=.." "--enable-builddir=i686-pc-mingw32" "mingw32"
checking build system type... i686-pc-mingw32
checking host system type... i686-pc-mingw32
checking target system type... i686-pc-mingw32
checking for gsed... sed
checking for a BSD-compatible install... /usr/bin/install -c
checking whether build environment is sane... yes
checking for a thread-safe mkdir -p... /usr/bin/mkdir -p
checking for gawk... gawk
checking whether make sets $(MAKE)... yes
checking whether make supports nested variables... yes
checking for gcc... ./msvcc.sh -clang-cl
checking whether the C compiler works... no
configure: error: in `/c/Users/–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä/Desktop/libffi-master/i686-pc-mingw32':
configure: error: C compiler cannot create executables
See `config.log' for more details

<!--- If this is a configure-time problem, attach config.log -->
[config.log](https://github.com/libffi/libffi/files/3660540/config.log)




I have installed libffi6 and libffi-dev, but `pkg-config` isn't giving me any output:
```
# pkg-config libffi
# pkg-config libffi6
# pkg-config libffi-dev
# _
```

This is a problem, because without output from `pkg-config`, I am unable to compile the lisp `cl-libusb` library.

System info:
```
# uname -a
Linux raspberrypi 4.19.66+ #1253 Thu Aug 15 11:37:30 BST 2019 armv6l GNU/Linux

# cat /etc/issue
Raspbian GNU/Linux 9 \n \l

# dpkg -l | grep libffi
ii  libffi-dev:armhf                      3.2.1-6                           armhf        Foreign Function Interface library (development files)
ii  libffi6:armhf                         3.2.1-6                           armhf        Foreign Function Interface library runtime
```
## System Details

- iOS
- aarch64

## Problems Description

In addition to the [already broken exception handling on x86_64 iOS](https://github.com/libffi/libffi/issues/418), the following commit breaks exception handling on aarch64 iOS: https://github.com/libffi/libffi/commit/3ec522bc1c1c5a7fb66b85d4fb6a0fe80581d597

Example code:

```
@try {
    ffi_call(... some method call that raises an exception...)
} @catch() {
    // NEVER REACHED
}
```

Instead of properly catching the exception, the program crashes on the `ffi_call`:

```
(lldb) bt
* thread #1, queue = 'com.apple.main-thread', stop reason = signal SIGABRT
    frame #0: 0x000000022ff1a0dc libsystem_kernel.dylib`__pthread_kill + 8
    frame #1: 0x000000022ff93094 libsystem_pthread.dylib`pthread_kill$VARIANT$mp + 380
    frame #2: 0x000000022fe72ea8 libsystem_c.dylib`abort + 140
    frame #3: 0x000000022f53f788 libc++abi.dylib`abort_message + 132
    frame #4: 0x000000022f53f934 libc++abi.dylib`default_terminate_handler() + 308
    frame #5: 0x000000022f556e00 libobjc.A.dylib`_objc_terminate() + 124
    frame #6: 0x000000022f54b838 libc++abi.dylib`std::__terminate(void (*)()) + 16
    frame #7: 0x000000022f54b1a8 libc++abi.dylib`__cxxabiv1::failed_throw(__cxxabiv1::__cxa_exception*) + 32
    frame #8: 0x000000022f54b168 libc++abi.dylib`__cxa_throw + 124
    frame #9: 0x000000022f556b3c libobjc.A.dylib`objc_exception_throw + 380
    frame #10: 0x000000023028f4a4 CoreFoundation`-[__NSSingleObjectArrayI objectAtIndex:] + 128
    frame #11: 0x000000010131c044 MyApp`ffi_call_SYSV + 68
    frame #12: 0x000000010131af7c MyApp`ffi_call_int + 964
```

