This change might prevent the compiler crash reported in #260 by removing the self type in `Validate` (see https://github.com/fthomas/refined/issues/260#issuecomment-574623965). Since I haven't been able to reproduce or even observe the crash in #260, I can't say if this actually improves anything.


Updates [org.scalaz:scalaz-core](https://github.com/scalaz/scalaz) [from 7.2.28 to 7.2.30](https://github.com/scalaz/scalaz/compare/v7.2.28...v7.2.30).
[Release Notes/Changelog](https://github.com/scalaz/scalaz/releases/tag/v7.2.30)

I'll automatically update this PR to resolve conflicts as long as you don't change it yourself.

If you'd like to skip this version, you can just close this PR. If you have any feedback, just mention me in the comments below.

Have a fantastic day writing Scala!

<details>
<summary>Ignore future updates</summary>

Add this to your `.scala-steward.conf` file to ignore future updates of this dependency:
```
updates.ignore = [ { groupId = "org.scalaz", artifactId = "scalaz-core" } ]
```
</details>

labels: semver-patch
Was there a particular reason behind the RFCs that were chosen in https://github.com/fthomas/refined/pull/356?

I found that `PrivateNetwork` did not match what I expected it to.

The addresses in [rfc5737](https://tools.ietf.org/html/rfc5737#section-4) seem like they should never be routed to:
> 4.  Operational Implications
>
>    Addresses within the TEST-NET-1, TEST-NET-2, and TEST-NET-3 blocks
>    SHOULD NOT appear on the public Internet and are used without any
>    coordination with IANA or an Internet registry [RFC2050].  Network
>    operators SHOULD add these address blocks to the list of non-
>    routeable address spaces, and if packet filters are deployed, then
>    this address block SHOULD be added to packet filters.
>
>    These blocks are not for local use, and the filters may be used in
>    both local and public contexts.

There is also a bug in `Rfc1918ClassBPrivateSpec`. It should start at `172.16.0.0` not `172.15.0.0`. https://tools.ietf.org/html/rfc1918#section-3

I'm by no means an expert but it seems like adding types for [rfc6890](https://tools.ietf.org/html/rfc6890) would be a better way to go.

Without digging into each RFC I suspect what most people would want is any address which is listed in rfc6890 as a valid destination IP address and maybe the loopback addresses.
>Destination - A boolean value indicating whether an address from
      the allocated special-purpose address block is valid when used as
      the destination address of an IP datagram that transits two
      devices.

Thoughts?
this came up in the Scala 2.13 community build. after https://github.com/scala/community-builds/commit/54060a29041b3e4a229ff3d138df8497640e4d97 , refined started failing with:

```
```

the problem is reproducible outside dbuild just with `++2.13.1-bin-c5eed1d` (after [adding a resolver](https://stackoverflow.com/questions/40622878/how-do-i-tell-sbt-to-use-a-nightly-build-of-scala-2-12-or-2-13/40622879#40622879)) followed by `coreJVM/Test/compile`

looking at `git log --merges 63f89ba..c5eed1d`, it seems likely the cause is https://github.com/scala/scala/pull/8072

@lrytz @fthomas does this seem like a progression to you, and not a regression?

in the community build, I can work around it by temporarily excluding `AdjacentSpec.scala`
Sorry about the long title, but this is a weird one and I wasn't sure how to name that.

I had the problem in my configuration, here's a simplified version:
```scala
object Test {

  import pureconfig.generic.auto._
  import eu.timepit.refined.pureconfig._

  // I tried removing the refined import and explicitly declaring the implicit, but it didn't change anything
  /* implicit val evidence: ConfigConvert[NonEmptyString] = new ConfigConvert[NonEmptyString] {
    override def to(a: NonEmptyString): ConfigValue = ???
    override def from(cur: ConfigCursor): Result[NonEmptyString] = ???
  } */

  implicit val evidenceMg: ConfigConvert[McGuffin] = new ConfigConvert[McGuffin] {
    override def to(a: McGuffin): ConfigValue = ???
    override def from(cur: ConfigCursor): Result[McGuffin] = ???
  }

  case class TestedNes(a: Set[NonEmptyString])
  case class TestedNesList(a: List[NonEmptyString])
  case class TestedPi(a: Set[PosInt])
  case class TestedMg(a: Set[McGuffin])
  class McGuffin

  def successWithList = loadConfig[List[TestedNes]]
  def successWithListInside = loadConfig[Set[TestedNesList]]
  def successWithoutCollection = loadConfig[TestedNes]
  def successWithoutCaseClass = loadConfig[Set[Set[NonEmptyString]]]
  def successWithoutRefined = loadConfig[Set[TestedMg]]

  def failureWithNonEmptyString = loadConfig[Set[TestedNes]]
  def failureWithPosInt = loadConfig[Set[TestedPi]]
}
```

The definitions of failureWithPosInt and failureWithNonEmptyString do not compile.The same problem exists with Seq instead of Set, but it goes away with List either on the inner or the outer collection (so there's a workaround, but I'd rather have Sets as that's what makes sense in my model). It is linked to Refined somehow, as using a random class instead didn't fail (whether I'm using Set or Seq), but I just can't see how. 

I'm using version 0.9.8 with refined-scalaz, refined-pureconfig and refined-scopt.
See https://github.com/fthomas/refined/pull/592#issuecomment-445942477 for the rationale.
As discussed in #6, there is room for a `Sorted` predicate. I'm currently running into use cases where an algorithm's implementation differs for sorted and unsorted collections. If we can decide on a type signature, I can start with the implementation. With regards to the sort direction, in my opinion we can do two things:

1. we can just assume ascending.
2. we can provide some sort of enum type which describes the direction.

I'd like to hear opinions on this. Also, our implicit `Validate` will need some sort of (implicit) `Ordering` to decide if the collection is sorted or not. 
Example: https://gist.github.com/enp0s23/229b9125c4ce9912ed740e9520b31803

For BigDecimal, we can use NonNegative, but can't use literal predicates, like Greater or Interval. 

This looks strange -- why we cannot apply numeric predicates to the numeric type from the standard library? 
see https://github.com/alexarchambault/sonatype-stats