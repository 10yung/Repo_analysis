
It can work on FF and Chrome,but no response on Safari 10.1.1 (12603.2.4).
First of all thanks for great plugin

Nowadays a lot of project are Vue.js, React.js, Angular.js,...
so forcing people to include  JQuery is not good idea

Its better to convert it to Pure JS 

It's been more than a year since the last release...  Time to cut 0.0.22 perhaps?

Try copying an image to clipboard (do a google image search and copy an image to the clipboard), then using example page try and paste into the paste regions. Note that in Chrome it works perfectly, but in IE nothing happens. Also note that in last content editable example, the image flashes up for a second and then disappears.
Gary
I was testing the demo in various browsers and got different results for where the image was pasted.

In the following browsers I clicked in the blank area **below** the 3rd div and the pasted image appeared **below** the 3rd div.

- Edge 38.14393.1066.0
- Firefox 54.0.1

In the following browsers I clicked **below** the 3rd div and the pasted image appeared **above** the 3rd div.

- Chrome 59.0.3071.115

For IE11 11.1480.14393.0 the image wouldn't past unless I clicked into one of the 3 divs on screen.

For all browsers, clicking inside one for the 3 sample divs, the image is pasted below the selected div.

I would image the different paste locations when clicking below the 3rd div is just a quirk in the demo, right?
Besides using paste.js for pasting images to textareas, I also use it to react on pasted strings that have a specific format.

E.g., when pasting a codepen url like `https://codepen.io/jmuheim/pen/KmKOZO`, I don't want to insert this exact string into the textarea, but a markdown link to it, like this: `[CodePen.io](https://codepen.io/jmuheim/pen/KmKOZO)`.

For this, I need to prevent the original string being inserted into the textarea. How can this be achieved?
Currently paste.js is an ideal solution for handling copy and paste programmatically of both text and bitmaps. Have you ever considered including also pasting of files? In some platforms (Windows, especially) a common way of copying files around is by pasting them (I'd venture it's as common as drag & drop on Mac).

I know you can read files with JavaScript ( https://www.html5rocks.com/en/tutorials/file/dndfiles/#toc-selecting-files-dnd ) but I'm not sure if the events that allow file reading. If they get enough information from "pasted files". While testing support for Safari I noticed in the demo scenarios pasting a file in contenteditable pastes the file icon (I didn't expect it to paste the contents, but in the other fields only the file name was pasted as text).

Have you considered adding file paste support (so it behaves similar to a file select input button)?
Looks like this bug was finally fixed: https://bugzilla.mozilla.org/show_bug.cgi?id=846674#c50

I don't know for sure, but perhaps this will let you get rid of the hidden editable hack for Firefox?

Hey there

Thanks a lot for this amazing little helper, we use it in our web app extensively.

We have an image upload field, which is simply a textarea now, and using paste.js, a pasted image is converted to base64, and the base64 string is sent to the app and there saved as a normal PNG file.

At the moment, we rely on users having a supporting browser (IE11, FF, Chrome). But we'd like to add a switch that displays a normal upload field, when the browser doesn't support pasting.

Is there an easy way to detect this? You have this matrix in the README; it would be great to have a little JavaScript helper method returning `true`/`false` depending on support status.

Best wishes.