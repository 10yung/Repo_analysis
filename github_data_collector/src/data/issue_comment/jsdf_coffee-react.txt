This project is deprecated. Try https://github.com/askucher/lsxc
We actively develop it and it uses indented pug syntax instead of ugly `<tag></tag>`
Hello.
I know that the package is deprecated, but our production code depends on it.
So, the thing is that your code mutates the original coffee-script module and this affects the other code that depends on the original module (`coffee-loader` for webpack gets broken in my case).
This PR fixes the issue by making `coffee-react` clone the CS module and then mutating it to keep the original untouched.
Could you please merge this in and publish a fixed version to the npm?
Newer version of coffeescript compiler generates sourcemap files with extension ".js.map" instead of ".map". Certain toolchains also expect sourcemap files with ".js.map" extension. It would be nice to follow the behavior of coffeescript compiler. 

Running this from the command line I can pass the -m flag and it will produce a source map. e.g. cjsx -cm will produce both the .js file and the source map file.

However; running this in a node (in fact Jest) context I want to do:

const coffeereact = require('coffee-react');
var compiled = coffeereact.compile(src, {bare: true, map: true});

And have complied have both the compiled JS code and the source map. I want to do this so I can write the source map to the file system for later use.

At the moment putting the map: true option in this context seems to have no effect.

I'm not sure if this is possible? Or if not - perhaps this is a feature request?

Given unclosed.cjsx:

``` html
1 <div>
2  <div>
3 </div>
```

Running 

``` sh
$ cjsx unclosed.cjsx
```

Yields

``` sh
SyntaxError: Unexpected end of input: unclosed CJSX_EL
```

With no line numbers.

For comparison, the latest [Babel-powered jsx yields](https://babeljs.io/repl/#?experimental=false&evaluate=true&loose=false&spec=false&code=%3Cdiv%3E%0A%20%20%3Cdiv%3E%0A%3C%2Fdiv%3E%0A):

``` sh
Unterminated JSX contents (3:6)
  1 | <div>
  2 |   <div>
> 3 | </div>
    |       ^
```

Probably related to #28 

### jsdf/coffee-react now has a Chat Room on Gitter

@jsdf has just created a chat room. You can visit it here: [https://gitter.im/jsdf/coffee-react](https://gitter.im/jsdf/coffee-react?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&content=body_link).

This pull-request adds this badge to your README.md:

[![Gitter](https://badges.gitter.im/Join%20Chat.svg)](https://gitter.im/jsdf/coffee-react?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=body_badge)

If my aim is a little off, please [let me know](https://github.com/gitterHQ/readme-badger/issues).

Happy chatting.

PS: [Click here](https://gitter.im/settings/badger/opt-out) if you would prefer not to receive automatic pull-requests from Gitter in future.

The following code:
`<div {...f(x, b)}></div>`
generates an error at compile time.
It compiles fine using babel, and `<div {...f(x)}></div>` compiles just fine.

As another (less minimal) example:

```
<div
  label={t 'audience'}
  {...@bindState('name', @_updateName)}
/>
```

compiles but then produces

```
// Generated by CoffeeScript 1.9.3
(function() {
  React.createElement("div", {
    "label": t('audience'),
    "bindState": true,
    "State": true,
    "name": true,
    "me": true,
    "_updateName": true,
    "e": true
  });

}).call(this);
```

which makes no sense.

When using tabs for indentation, code like this

```
<Text style={styles.welcome}>
    Welcome to React Native!
</Text>
```

compiles to

```
React.createElement(Text, {
      "style": styles.welcome
    }, "\t\t\t\tWelcome to React Native!")
```

which messes up the layout

`style={color: 0xfff}` seems pretty natural as js allows `0xfff`.  I like that notation better than using a string `'#fff'`.  There wouldn't be a time when you'd give color a single pixel value (ie `color: 4095px` would never happen, so it should be safe)

Actually to use this notation of passing a number as a color, you'd have to enforce always using 6 digits, as you wouldn't know the difference between `0xfff` and `0x000fff`.

sample.coffee

```
class Button
  render: =>
    super <paper-button className="rui-button rui-form-control" onClick={@buttonClicked}>{text}</paper-button>
```

is translated to sample.js

```
// Generated by CoffeeScript 1.8.0
var Button,
  __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

Button = (function() {
  function Button() {
    this.render = __bind(this.render, this);
  }

  Button.prototype.render = function() {
    return Button.__super__.render.call(this, React.createElement(paper - button, {
      "className": "rui-button rui-form-control",
      "onClick": this.buttonClicked
    }, text));
  };

  return Button;

})();
```

Note that the `React.createElement` doesn't give the right output.
