I saw this functionality in [TagUi](https://github.com/tebelorg/TagUI-Python) and wanted to ask if it would be here?
Operating system and bit: MacOS Catalina 10.15.2

## Description
Is it possible with robotgo to get the selected text in MacOS?

Ideally I want to be able to select a text somewhere on screen (browser, editor, maybe even terminal) and then press a special key combination to do something special with that text.

Performing an action on a specific key combination is no problem. But retrieving a selected text seems much harder then I expected. It is possible in Automator ([example](https://developer.apple.com/library/archive/documentation/LanguagesUtilities/Conceptual/MacAutomationScriptingGuide/MakeaSystem-WideService.html)) but that is very slow. I prefer to use code ;-)
## Description 
**cann't build on arm64 mechine.**   without about this  "X11/keysym.h" 
...

how to do this path with mouse left button toggle through all path?
![image](https://user-images.githubusercontent.com/25299783/69727258-38abaa00-1133-11ea-892e-2f21dae70789.png)


this way doesnt work:
robotgo.MoveMouse(x0, y0)
robotgo.MouseToggle("down")
robotgo.MoveSmooth(x1,y1, 1.0, 30.0)
robotgo.MoveSmooth(x2,y2, 1.0, 30.0)
robotgo.MoveSmooth(x3,y3, 1.0, 30.0)
robotgo.MouseToggle("up")

- Robotgo version (or commit ref):
- Go version: `go version go1.13.4 darwin/amd64`
- Gcc version: `GCCGO="gccgo"`
- Operating system and bit: macos mojave
- Resolution: `3440 x 1440`
- Can you reproduce the bug at [Examples](https://github.com/go-vgo/robotgo/blob/master/examples/main.go):
  - [ ] Yes (provide example code)
  - [ ] No
  - [ ] Not relevant
- Provide example code:

```Go
type mouseDragAction struct {
	startX, startY, endX, endY int
	button string
}

// define `var a`

robotgo.MoveSmooth(a.startX, a.startY)
robotgo.DragSmooth(a.endX, a.endY, 1.0, 5.0)
```
- Log gist:

## Description
For example, I want to drag a file to another folder, use these codes, the operation cannot be done properly
...

- Robotgo version (or commit ref): b5f6d20a74992f444c197b4b13cf853454677004
- Go version: 1.13
- Gcc version: 8.3.0
- Operating system and bit: Debian 64bit
- Resolution: 2880x1620
- Can you reproduce the bug at [Examples](https://github.com/go-vgo/robotgo/blob/master/examples/main.go):
  - [X] Yes (provide example code)
  - [ ] No
  - [ ] Not relevant

This event fires on left-mouse-button and on pressing "arrow - right" on my keyboard. But I guess it should only run if the left-mouse-button is pressed?
```Go
for {
	lmb := robotgo.AddEvent("mleft")
	if lmb {
	    fmt.Println("click")
        }
}
```
- Robotgo version (or commit ref): current master
- Go version: go version go1.12.9 linux/amd64
- Gcc version: gcc (Debian 9.2.1-4) 9.2.1 20190821 / x86_64-w64-mingw32-gcc (GCC) 8.3-win32 20190709
- Operating system and bit: Debian bullseye/sid
- Resolution: console
- Can you reproduce the bug at [Examples](https://github.com/go-vgo/robotgo/blob/master/examples/main.go):
  - [ ] Yes (provide example code)
  - [ ] No
  - [ ] Not relevant
- Provide example code:

```Go
package main

import (
    "fmt"
    "os"
    "os/signal"
    "syscall"
    "time"
    "math/rand"
    "github.com/go-vgo/robotgo"
)

// SetupCloseHandler creates a 'listener' on a new goroutine which will notify the 
// program if it receives an interrupt from the OS. We then handle this by calling 
// our clean up procedure and exiting the program.
func SetupCloseHandler() {
    c := make(chan os.Signal, 2)
    signal.Notify(c, os.Interrupt, syscall.SIGTERM)
    go func() {
        <-c
        fmt.Println("\r- Ctrl+C pressed in Terminal")
        os.Exit(0)
    }()
}

func main() {
    // Setup our Ctrl+C handler
    SetupCloseHandler()

    fmt.Println("\r- Press Ctrl+C to interrupt")
    // Run our program...
    for {
        rand.Seed(time.Now().UnixNano())
        min := 120
        max := 480
        sleep_secs := rand.Intn(max - min + 1) + min

        fmt.Println("\r- Type key and sleep: ", sleep_secs, "sec's")
        robotgo.ActiveName("KWrite")
        robotgo.TypeString("Hello World")
        robotgo.KeyTap("space")
        time.Sleep(time.Duration(sleep_secs) * time.Second)
    }
}
```
- Log gist:
```
$ GOOS=windows GOARCH=amd64 go build -o sendkey.exe sendkey.go
# github.com/go-vgo/robotgo
../../github.com/go-vgo/robotgo/keycode.go:14:16: undefined: Map
../../github.com/go-vgo/robotgo/keycode.go:25:15: undefined: Map
../../github.com/go-vgo/robotgo/robotgo_mac_win.go:22:9: undefined: internalGetBounds
../../github.com/go-vgo/robotgo/robotgo_mac_win.go:31:12: undefined: cgetTitle
../../github.com/go-vgo/robotgo/robotgo_mac_win.go:45:2: undefined: internalActive
```

```
$ GOOS=windows GOARCH=amd64 CGO_ENABLED=1 CC=x86_64-w64-mingw32-gcc CXX=x86_64-w64-mingw32-g++ go build -o sendkey-amd64.exe sendkey.go
# github.com/go-vgo/robotgo/vendor/github.com/robotn/gohook
/usr/bin/x86_64-w64-mingw32-ld: $WORK/b042/_x003.o: in function `eb_port_create':
../../github.com/go-vgo/robotgo/vendor/github.com/robotn/gohook/event/../chan/eb_chan.h:382: undefined reference to `sched_yield'
/usr/bin/x86_64-w64-mingw32-ld: $WORK/b042/_x003.o: in function `eb_port_free':
../../github.com/go-vgo/robotgo/vendor/github.com/robotn/gohook/event/../chan/eb_chan.h:350: undefined reference to `sched_yield'
/usr/bin/x86_64-w64-mingw32-ld: ../../github.com/go-vgo/robotgo/vendor/github.com/robotn/gohook/event/../chan/eb_chan.h:341: undefined reference to `sched_yield'
/usr/bin/x86_64-w64-mingw32-ld: $WORK/b042/_x003.o: in function `cleanup_ops':
../../github.com/go-vgo/robotgo/vendor/github.com/robotn/gohook/event/../chan/eb_chan.h:858: undefined reference to `sched_yield'
/usr/bin/x86_64-w64-mingw32-ld: ../../github.com/go-vgo/robotgo/vendor/github.com/robotn/gohook/event/../chan/eb_chan.h:858: undefined reference to `sched_yield'
/usr/bin/x86_64-w64-mingw32-ld: $WORK/b042/_x003.o:/home/john/work/go-lang/src/github.com/go-vgo/robotgo/vendor/github.com/robotn/gohook/event/../chan/eb_chan.h:643: more undefined references to `sched_yield' follow
collect2: error: ld returned 1 exit status
```

## Description

...

- Robotgo version (or commit ref):v0.0.0-20190711030329-314fb336f383
- Go version:1.12.7
- Gcc version:4.2.1
- Operating system and bit:macOS Mojave 10.14.5
- Resolution:
- Can you reproduce the bug at [Examples](https://github.com/go-vgo/robotgo/blob/master/examples/main.go):
  - [x] Yes (provide example code)
  - [ ] No
  - [ ] Not relevant
- Provide example code:

```Go
package main

import (
	"fmt"

	"github.com/go-vgo/robotgo"
)

func main() {
	robotgo.Sleep(10)
	x, y := robotgo.GetMousePos()
	fmt.Println("pos:", x, y)
	color := robotgo.GetPixelColor(x, y)
        fmt.Println("color----", color)
}
```
- Log gist:
pos: 213 303
color---- 468af2
## Description

...
GetPixelColor is not exact on macOS, the return color has diny diffrence with the real color.
see the picture below:
### the real color
![20190711154000](https://user-images.githubusercontent.com/13494648/61031677-92187400-a3f2-11e9-8f3b-bac3fb082368.jpg)

### the value of GetPixelColor
![20190711152608](https://user-images.githubusercontent.com/13494648/61031746-b1170600-a3f2-11e9-90fe-ff6b9b593e26.jpg)


- Robotgo version (or commit ref):latest
- Go version:1.11.5
- Gcc version:4.4.7
- Operating system and bit:
- Resolution:
- Can you reproduce the bug at [Examples](https://github.com/go-vgo/robotgo/blob/master/examples/main.go):
  - [ ] Yes (provide example code)
  - [* ] No
  - [ ] Not relevant

- Log gist:

## Description
Exec `go get -x pkg_path`,in hooks compiling, get error: undefined reference to `clock_gettime' 
...

## Solution
reset CGO_CFLAGS="-lrt" ,reget ok

How can I read the position and size of the window after hwnd?