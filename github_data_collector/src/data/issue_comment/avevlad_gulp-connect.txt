I am trying to upgrade from gulp-server to gulp-connect. Can anyone tell me how? 
For example I had this
```
            proxies: [{
                source: '/api',
                target: 'http://localhost:3001/api',
                ws: true,
                secure: false
            }],
```
Bumps [mixin-deep](https://github.com/jonschlinkert/mixin-deep) from 1.3.1 to 1.3.2.
<details>
<summary>Commits</summary>

- [`754f0c2`](https://github.com/jonschlinkert/mixin-deep/commit/754f0c20e1bc13ea5a21a64fbc7d6ba5f7b359b9) 1.3.2
- [`90ee1fa`](https://github.com/jonschlinkert/mixin-deep/commit/90ee1fab375fccfd9b926df718243339b4976d50) ensure keys are valid when mixing in values
- See full diff in [compare view](https://github.com/jonschlinkert/mixin-deep/compare/1.3.1...1.3.2)
</details>
<details>
<summary>Maintainer changes</summary>

This version was pushed to npm by [doowb](https://www.npmjs.com/~doowb), a new releaser for mixin-deep since your current version.
</details>
<br />

[![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=mixin-deep&package-manager=npm_and_yarn&previous-version=1.3.1&new-version=1.3.2)](https://help.github.com/articles/configuring-automated-security-fixes)

Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.

[//]: # (dependabot-automerge-start)
[//]: # (dependabot-automerge-end)

---

<details>
<summary>Dependabot commands and options</summary>
<br />

You can trigger Dependabot actions by commenting on this PR:
- `@dependabot rebase` will rebase this PR
- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it
- `@dependabot merge` will merge this PR after your CI passes on it
- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it
- `@dependabot cancel merge` will cancel a previously requested merge and block automerging
- `@dependabot reopen` will reopen this PR if it is closed
- `@dependabot ignore this [patch|minor|major] version` will close this PR and stop Dependabot creating any more for this minor/major version (unless you reopen the PR or upgrade to it yourself)
- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)
- `@dependabot use these labels` will set the current labels as the default for future PRs for this repo and language
- `@dependabot use these reviewers` will set the current reviewers as the default for future PRs for this repo and language
- `@dependabot use these assignees` will set the current assignees as the default for future PRs for this repo and language
- `@dependabot use this milestone` will set the current milestone as the default for future PRs for this repo and language

You can disable automated security fix PRs for this repo from the [Security Alerts page](https://github.com/avevlad/gulp-connect/network/alerts).

</details>
We have a use-case where most of the time code changes only affect what's going on inside an iframe. The `src` of that iframe depends on which component a developer has picked to inspect on the `iframe` stage.

As this could possibly be a not-so-uncommon usecase, it would be great to have an option that allows passing a configuration to `connect.reload()` which would allow something like

```javascript
connect.reload({ iframe: "id-of-my-iframe" });
```

or even better, for refreshing several iframes:

```javascript
connect.reload({ iframes: ["id-of-my-iframe", "id-of-my-other-iframe"] });
```

Somewhat similar to the `open` configuration property provided by `gulp-webserver`?
To allow the server to be accessed from any IP address in the network neighborhood, the host must be set to 0.0.0.0. However, this value then gets passed passed directly to the log, resulting in the following message:

```
Server started http://0.0.0.0:5000
```

The host in the URL is surprising for less technical users, who expect to see localhost. Therefore, the host value 0.0.0.0 should still be reported as "localhost" in the log message.

If this masking is not acceptable, I'd be open to introducing a "displayHost" option value for this purpose.
The gulp-connect task runs on projects in different directories under the same root folder. Only the project that started gulp can be refreshed in real time. After the project is changed, the changes can be seen in the terminal, but there is no update in the browser.

gulp v 3.9.1
gulp-connect 5.0.0
all in the title
Hi,

This is my html:

```html
<!DOCTYPE html>
<html lang="en-US">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <title>Empty Page</title>
    <!-- <script src="script.js" defer></script> -->
</head>
<body>
</body>
</html>
```

The moment I enable the external script resource to `script.js`, `gulp-connect` stops working and I get the following error in the console of my web browser:

![screen shot 2018-04-10 at 01 03 20](https://user-images.githubusercontent.com/36895777/38529110-d9a794b4-3c5a-11e8-974b-34b9fa84291c.png)


`LiveReload disabled because it could not find its own <SCRIPT> tag`

These are the contents of the script.js file:

```js
var date = Date();
document.body.innerHTML = "<h1>Today is? " + date + "</h1>"
```

This is my `gulpfile.js` file:

```js
// Include Gulp
var gulp = require('gulp');

// Include required plugins.
var connect = require('gulp-connect');

// TASK: connect
gulp.task('connect', function() {
  connect.server({
      livereload: true
  });
});

// TASK: preview
gulp.task('preview', function () {
    gulp.src('index.html')
        .pipe(connect.reload());
});

// TASK: watch
gulp.task('watch', function () {
    gulp.watch('*.html', ['preview']);
    gulp.watch('*.js', ['preview']);
});

gulp.task('run', function() {
    console.log('warnning: No project [run] parameters configured.');
});

// Task Bundles
gulp.task('default', ['connect', 'watch']);
```

The only way to fix the issue is to add the following line to my `index.html`:

```html
<script src="http://localhost:35729/livereload.js?snipver=1" async="" defer=""></script>
```

And the live-browser preview starts working. Is there a more elegant way to solve this problem?

Thanks.
i had trouble to get basic authentication, http chunk request(file download), etc. runnable.

Turned out that connect-livereload is applied to every request and has so amazing features like removing the content-length (For whatever reason). 

https://github.com/intesso/connect-livereload/blob/13a8cca3192dc077f01e5681cd393681f9e6b060/index.js#L148

So do not switch on livereaload, if you want to see more than basic html files

connect.reload(); isn`t working, i debugged it till the [map-stream](https://www.npmjs.com/package/map-stream). But i could really figure out how this works.

Below is also a workaround

package.json:

```json
"devDependencies": {
    "del": "^3.0.0",
    "gulp": "^4.0.0",
    "gulp-beautify": "^2.0.1",
    "gulp-connect": "^5.5.0",
    "gulp-eslint": "^4.0.2",
    "http-proxy-middleware": "^0.17.4",
  },
```

gulp.js
```javascript
const gulp = require('gulp');
const ui5preload = require('gulp-ui5-preload');
const connect = require('gulp-connect');
let connectApp;

gulp.task('connect', function (done) {
    connectApp = connect.server(
        {
            root: ['webapp', 'libs'],
            livereload: true,
            port: 8000
        }
    );
});

gulp.task('watch', function () {
    gulp.watch(configBuild.gulp.webapp + '/**/*').on('change',  function(event){
        debugger;
        // workaround works somehow
        let filename = event.substr(0,configBuild.gulp.webapp.length + 1 );
        connectApp.lr.changed(  {body: {
            files: [filename]}});
        

        // doesn't WORK
        // connect.reload();
    });
});

gulp.task('default', gulp.parallel('connect','watch'));
```
