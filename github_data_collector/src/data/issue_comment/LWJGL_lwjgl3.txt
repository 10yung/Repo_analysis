Build was failing on the android branch due to an outdated URL for the maven repo
Hi,

I just tried how far I could get with the new DriftFX integration using the nightly build via Maven on my MacBook Pro Retina macOS 10.14.6. As an example I used the application HelloDriftFX from the demos.

I first tried it with OpenJDK 11 and OpenJFX 13.0.1. That compiled but failed at run-time. I then tried it with Oracle JDK 8 (built-in JavaFX) and the example worked, giving me roughly 3000 FPS on my old MacBook (from 2012) but Java crashes unexpectedly each time when I try to terminate the application via ESC.

To my knowledge OpenJDK 11 cannot work because you would have to build DriftFX from the specific Java 11 branch, which seems to be a little bit outdated too. Do you have any plans to support OpenJDK 11?

The crash when terminating on Java 8 is not nice. Is this a known bug or can anything be done against it? The line `libc++abi.dylib: Pure virtual function called!` is in red, so I assume it is an error.

```
GLContext name: drift-3/surface1-4
GL_VENDOR: NVIDIA Corporation
GL_RENDERER: NVIDIA GeForce GT 650M OpenGL Engine
GL_VERSION: 4.1 NVIDIA-12.0.24 355.11.10.50.10.103
1800 fps
3273 fps
2682 fps
3037 fps
3310 fps
3245 fps
3225 fps
3051 fps
3062 fps
2772 fps
2926 fps
3138 fps
3106 fps
2905 fps
2402 fps
libc++abi.dylib: Pure virtual function called!
[C] [ INFO] TransferModeManager.cpp: 87 - RegisterTransferMode Registering TransferMode Instance 'IOSurface' as 0
[C] [ INFO] TransferModeManager.cpp: 87 - RegisterTransferMode Registering TransferMode Instance 'MainMemory' as 1
[C] [ INFO] TransferModeManager.cpp: 87 - RegisterTransferMode Registering TransferMode Instance 'NoOp' as 2
[C] [ INFO] Configuration.cpp: 59 - Initialize Loaded native driftfx configuration:
[C] [ INFO] Configuration.cpp: 60 - Initialize debug = 0
[C] [ INFO] Configuration.cpp: 61 - Initialize logLevel = 1
[C] [ INFO] Configuration.cpp: 62 - Initialize useWinFallback = 0
```

* LWJGL version: `3.2.4-SNAPSHOT` and multiple other recent lwjgl 3 builds
* LWJGL build #: ?
* Java version: tested with multiple different java versions starting from 1.8_221 to 1.11
* Platform: Windows only so far, haven't tested on others
* Module: Unsure, I mainly use LibGDX, not lwjgl, but have had to come here after discovering a bug in lwjgl3-- whatever the Spaceship demo uses.

When in windowed mode in LWJGL, with glSwapInterval set to 1, my FPS goes wild, as shown in these three example gifs from different games.
https://i.imgur.com/J7hJq8n.gifv
https://imgur.com/9y9e1ZT
https://imgur.com/ftbOJ1R

Here's a printout of frame delta times in windowed mode during a buggy session:
https://pastebin.com/tcxvSt5k

Here's a printout of frame delta times in fullscreen mode from that same session:
https://pastebin.com/eFiF3J51

Notice the extreme variations in windowed mode and the normal-ness of the fullscreen / nonbuggy.

There are some extremely strange things about this issue:
1. It happens sometimes. If I restart my computer, there's maybe a 60% chance that the bug will appear when running lwjgl3 games. If my computer decides that this session of being powered on is going to be a "buggy session" then the bug appears 100% of the time. Otherwise, it works normally if I don't get a "buggy session"
2. The bug goes away completely in fullscreen regardless of  if its a buggy session or not, or if it is enabled from start or mid-game
3. The bug seems to be attached to the usage of my external monitor, but I can't 100% confirm this. I'm maybe 98% sure of this.

My computer is more than capable of pushing frames to get these games way beyond 60 fps. With vsync disabled most games have ran in 2400+ fps, one game ran at 800fps.

Attempts made to fix this:
I have tried modifying Nvidia control panel settings for the games, nothing seems to work (internal graphics, graphics card, vsync, other options in control panel)

I have updated all my drivers with no change, one interesting thing that happened once was when I updated nvidia drivers mid-game during a non-buggy session. it then became a hybrid of buggy and not buggy. When tabbed out I'd get 60fps fine, when tabbed back in the bug would reappear. Never have I seen this occur again.

I've tried running this in a sandbox using Sandboxie, the bug continued existing during a buggy session.

Have searched all over github issues for lwjgl3 and libgdx, have searched stack overflow and forums, asked multiple communities and gotten hours of help trying to find the bug to no avail.

I very much hope that someone here can offer me some answers, point me in directions I could look, or anything else of help.

I really appreciate any assistance with this issue, and if there's more information you need, I'd be happy to provide whatever I can.
Hi from Gradle ðŸ‘‹ 

I was just checking how LWJGL3 is published and was delighted to see that you are already using the `maven-publish` plugin. I wanted to let you know that with Gradle 6 we are supporting a new metadata format called [Gradle Module Metadata](https://docs.gradle.org/6.0-rc-3/userguide/publishing_gradle_module_metadata.html) that would allow you to publish metadata that knows about jars containing native code and would allows Gradle to automatically pick the correct native jar. I actually used LWJGL as an example in our documentation to illustrate that use case:

https://docs.gradle.org/6.0-rc-3/userguide/component_metadata_rules.html#adding_variants_for_native_jars

I don't know how interesting this is for you, but if you get your build configured to publish Gradle Module Metadata correctly, it would make it really easy to use `lwjgl3` as a dependency in a Gradle build [like this](https://github.com/jjohannes/what-if-gradle-metadata/blob/master/usecases/lwgj-native-runtime/build.gradle.kts) (that's a sample repository I created to demonstrated some use cases).

I am happy to help here, if you are interested.


* LWJGL version: `3.2.3` 
* LWJGL build #: `SNAPSHOT Build 13`
* Java version: `openjdk 11.0.3 2019-04-16`
OpenJDK Runtime Environment (build 11.0.3+7-post-Raspbian-5)
* Platform: `Linux` (Raspberry PI 4 with Mesa 19.2.0-rc1)
* Module: `GLFW|GLES`

Running a program using GLFW / GLES and fetching GLCapabilites from GLES will only show support for GLES20 and not GLES30 as expected.
Below is a snippet that will reproduce the error.

 
    if (!GLFW.glfwInit()) {
        throw new IllegalStateException("Unable to initialize glfw");
    }
    GLFW.glfwDefaultWindowHints();
    GLFW.glfwWindowHint(GLFW.GLFW_VISIBLE, GLFW.GLFW_FALSE);
    GLFW.glfwWindowHint(GLFW.GLFW_RESIZABLE, GLFW.GLFW_TRUE);
    GLFW.glfwWindowHint(GLFW.GLFW_SAMPLES, 4);
    window = GLFW.glfwCreateWindow(width , height, "", MemoryUtil.NULL, MemoryUtil.NULL);
    if (window == MemoryUtil.NULL) {
        throw new RuntimeException("Failed to create the GLFW window");
    }
    GLFW.glfwMakeContextCurrent(window);
    org.lwjgl.system.Configuration.OPENGLES_EXPLICIT_INIT.set(true);
    GLES.create(GL.getFunctionProvider());
    GLESCapabilities caps = GLES.createCapabilities();


The created caps will only have caps.GLES20 set to true - although the Mesa driver clearly reports GLES 3.0.

Update
Requesting hard version of:

    GLFW.glfwWindowHint(GLFW.GLFW_CONTEXT_VERSION_MAJOR, 3);
    GLFW.glfwWindowHint(GLFW.GLFW_CONTEXT_VERSION_MINOR, 0);

Results in:
[LWJGL] GLFW_VERSION_UNAVAILABLE error
Description : GLX: Failed to create context: GLXBadFBConfig
The nanovg project has been archived, and so it would be great if an alternative canvas-like rendering library was added that is actively maintained. To this cause I would to put Intel's [fastuidraw](https://github.com/intel/fastuidraw) project up for consideration. Despite what the name implies, this is an OpenGL canvas library.

Canvas libraries are extremely useful for quickly and easily drawing simple to very complex things. Nanovg achieved this brilliantly, with only 3 lines of code needed to draw something on the screen (in java!). Because of the big name attached to Intel's fastuidraw, the focus on performance and the goal of providing something close to what we have already seen from nanovg, I believe it to be a good long term alternative.




Hello,
Currently only ARM and x86 is supported, but it would be nice to support the OpenPOWER platform that's high performance and gaming capable. An OpenPOWER compliant CPU would be the [IBM POWER9](https://en.wikipedia.org/wiki/POWER9).

I don't exactly know what's really architecture specific into lwjgl3 but hopefully you can tell me that so I can go straight to the point if I want to solve that issue myself.

Thanks
Haven't tested, I did up to `ant compile` in the build process but stopped after that since I don't have a native compiler on this pc.