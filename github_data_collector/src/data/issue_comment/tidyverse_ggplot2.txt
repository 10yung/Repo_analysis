Custom legends are sensitive to whether it's a "fill" or "colour" aes. Switching between one and the other with essentially the same data is common. 

Currently, if you forget to change e.g. "colour" to "fill" for your custom legend / colour scheme, ggplot2 ignores your colour scale / custom legend (since the "colour" aes is not specified) and uses the default for the colours / legend (since no information is provided for the "fill" aes).

Below, p1 uses "colour". p2 uses "fill" but the user forgot to update "scale_colour...".  

```
library(ggplot2)
library(RColorBrewer)

p1 = ggplot(iris, aes(x = Species, y = Sepal.Length, colour = Species)) +
  geom_boxplot() +
  scale_colour_brewer(
    name = 'Dude which plant',
    palette = 'Set2'
    )

p2 = ggplot(iris, aes(x = Species, y = Sepal.Length, fill = Species)) +
  geom_boxplot() +
  scale_colour_brewer(
    name = 'Dude which plant',
    palette = 'Set2'
    )

```

p2 uses default legend and colour scheme without telling the user.

For p2, it might be useful to have a warning saying "you used scale_colour but didn't specify a colour aesthetic." or something like that.

May be related to #2691 / #2239.
Two missing backticks and a several missing newlines were causing incorrect or inconsistent rendering of markdown.
In case a transformation is applied, the `geom_hline` function takes the intercept in the initial scale, contrary to the other geoms.

```{r examplePlot}
p1 <- ggplot(mpg, aes(displ, hwy)) + geom_point() + scale_y_log10()
```

The line is created if the intercept is specified in the original (non-transformed) scale in `geom_hline`:
```{r hline-intercept-raw}
p1 + geom_hline(yintercept = 30)
```
![ggplot_hline_intercept-raw](https://user-images.githubusercontent.com/15339154/72598199-a0020100-390f-11ea-9ef7-bd972d3b6365.png)

Contrary to the `geom_abline` behaviour:
```{r abline-intercept-log10}
p1 + geom_abline(intercept = log10(30), slope = 0)
```
![ggplot_abline_intercept-log10](https://user-images.githubusercontent.com/15339154/72598174-95476c00-390f-11ea-8f2a-e26a6dbf3ed6.png)



This PR addresses an issue in scales. If a label function converts an `NA` break to a `character(0)` label we will get an error later on when we enlist the label list. This is fixed here in the `ScaleContinuous$get_labels()` function by converting such list elements to empty strings (`""`) instead.

It can be argued that this should get fixed in `scales::label_number_auto()` (and perhaps it should as well), but I think it makes sense to have a guard in ggplot2 as well, since otherwise this problem will be carried all the way to `guide_axis()` and create an unintelligible error there.
Since there are now divergent continuous color palettes available in different packages, it would be nice to be able to specify a midpoint without manually having to calculate the limits.

related issue: https://github.com/thomasp85/scico/issues/6
Fix #2963

Not all variables in a facet spec are available on all the layers. A solution suggested on https://github.com/r-lib/rlang/issues/888#issuecomment-573691024 is:

> bind the same symbols inside each panel, and when the symbols are undefined use an active binding to throw a typed error? And then you'd only catch these particular errors in the `tryCatch()`

This PR injects such an active bindings on the column names of all the plot data so that we can let `eval_facet()` fail gracefully.

Note that this PR removes `env` argument of `eval_facet()` to avoid confusion. I believe all facet specs are converted to quosures and bare expressions are not allowed, which means `env` is always ignored on `eval_tidy()`.

``` r
devtools::load_all("~/repo/ggplot2/")
#> Loading ggplot2

# works fine with expressions
ggplot(mtcars, aes(mpg, cyl)) +
  geom_point() +
  geom_vline(xintercept = 20) +
  facet_wrap(vars(2 * am))
```

![](https://i.imgur.com/DXE7ycD.png)

``` r

# works fine with external variables
two <- 2
ggplot(mtcars, aes(mpg, cyl)) +
  geom_point() +
  geom_vline(xintercept = 20) +
  facet_wrap(vars(two * am))
```

![](https://i.imgur.com/tWhUCXh.png)

``` r

# raises an error when the expression refers to some non-existent variable
ggplot(mtcars, aes(mpg, cyl)) +
  geom_point() +
  geom_vline(xintercept = 20) +
  facet_wrap(vars(no_such_variable * am))
#> Error in eval_tidy(facet, data): object 'no_such_variable' not found

# special case: raises a friendlier error when the expression is a symbol
ggplot(mtcars, aes(mpg, cyl)) +
  geom_point() +
  geom_vline(xintercept = 20) +
  facet_wrap(vars(no_such_variable))
#> Error: At least one layer must contain all faceting variables: `no_such_variable`.
#> * Plot is missing `no_such_variable`
#> * Layer 1 is missing `no_such_variable`
#> * Layer 2 is missing `no_such_variable`
```

![](https://i.imgur.com/N5jHPCG.png)

<sup>Created on 2020-01-16 by the [reprex package](https://reprex.tidyverse.org) (v0.3.0)</sup>

----
TODO:
- [ ] Add a NEWS bullet
- [ ] Consider using `warn_for_aes_extract_usage()` here as well
- [ ] Consider if it's really OK to add a param to `Facet` (I bet it's OK)
Updating ggplot2 from v3.0.0 to v3.2.1 I encountered the problem within a previously working programme, that the grammar of specifying colors apparently has changed: the expression 

```
...+ geom_text(aes(x=x, y=y label="text"), color=1) +...
```

simply suppressed the text completely without error message. After changing the color attribute to `color="black"` the label reappeared again in black as before. A few (though not exhaustive) tests with other numbers showed the same behavior.
(Originally commented at https://github.com/tidyverse/ggplot2/issues/3725#issuecomment-573745316)

Currently, legends reflect the value of `after_scale()`. But, it's not always possible because the expression of `after_scale()` might refer to the variable unavailable at the stage of drawing legends.

For example, I think it is a proper usage of `stage()` to modify scaled `colour`s by combining other aesthetics. But, the following example has two problems:

1. `x` is not available on drawing legends
2. even if we manage to make `x` available, it's not clear what legends should be drawn because the scaled `colour`s are discrete but the `after_scale()`ed values are continuous.

Especially because of the problem 2., I think legends should use the raw scaled values, not the `after_scale()`ed ones.

``` r
library(ggplot2)

set.seed(88)
d <- data.frame(x = runif(9), y = runif(9), g = rep(c("a", "b", "c"), each = 3))
p <- ggplot(d) +
  geom_point(aes(x, y, colour = stage(g, after_scale = alpha(colour, x))), size = 10)

# fail
p
#> Error in alpha(colour, x): object 'x' not found

# ok
p + theme(legend.position = "none")
```

![](https://i.imgur.com/fHQ3qu7.png)

<sup>Created on 2020-01-14 by the [reprex package](https://reprex.tidyverse.org) (v0.3.0)</sup>
In previous ggplot2 versions, the following was valid:

``` r
library(ggplot2)
df <- data.frame(x = 1:3, y = 1:3)
ggplot(df, aes(x, y, col = factor(x))) +  
  geom_point() +
  scale_colour_manual(values = c("red", "green", "blue", "teal"), breaks = factor(1))
```

![](https://i.imgur.com/EyAeD0t.png)

In the release candidate, it errors (revdep failures on at least auditor, ezplot, GDCRNATools, ggmuller, obAnalytics, RAM)

``` r
library(ggplot2)
df <- data.frame(x = 1:3, y = 1:3)
ggplot(df, aes(x, y, col = factor(x))) +  
  geom_point() +
  scale_colour_manual(values = c("red", "green", "blue", "teal"), breaks = factor(1))
#> Error:   Differing number of values and breaks in manual scale.
#>   4 values provided compared to 1 breaks.
```

Shouldn't the number of values line up with the  number `limits` instead of the `breaks`? Otherwise, how would you map colours and not include them on the guide (niche behaviour, but it's possible with other colour scales)?
There is no help page for `scale_color_discrete()`, and it doesn't appear on [ggplot2.tidyverse.org](https://ggplot2.tidyverse.org/reference/index.html).
