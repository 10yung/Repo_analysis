Changes summary:
* When executing a tool, check if runtime is .net core and if it is return the first resolvable tool's dll. If no dlls are provided by the tool or there were but are un-resolvable then the behavior continues exactly as it was prior to this PR.
* In `ProcessRunner` if running under .net core and file to run is a dll then we use .net cli to execute it.
Fixes #2696 

If/when this is merged, we will need to make sure to switch to the `CAKE_GITHUB_TOKEN` environment variable.
### What You Are Seeing?
Cake.Issues.Reporting.Generic addin expects `Newtonsoft.Json.dll` to be loaded into AppDomain and uses it to compile Razor templates. When all addins used in the script are pinned this is not the case. As soon as at least one addin is not pinned `Newtonsoft.Json.dll` is loaded into the app domain.

The Cake.Issues.Reporting.Generic addin uses RazorEngine compiling a Razor template which uses JSON.NET. For this it looks in the current AppDomain for `Newtonsoft.Json.dll` (see [this line](https://github.com/cake-contrib/Cake.Issues.Reporting.Generic/blob/develop/src/Cake.Issues.Reporting.Generic/RazorEngineReferenceResolver.cs#L32) in Cake.Issues.Reporting.Generic and [this line](https://github.com/Antaris/RazorEngine/blob/aa5dd2661fe040ce39020949ebd33d98a530ebe4/src/source/RazorEngine.Core/Compilation/CompilerServicesUtility.cs#L198) in RazorEngine).

Originally reporting in https://github.com/cake-contrib/Cake.Issues.Reporting.Generic/issues/240

### What is Expected?
`Newtonsoft.Json.dll` should always be loaded into the AppDomain by Cake

### What version of Cake are you using?
Cake 0.35.0 on .NET Framework 4.7.2

### Are you running on a 32 or 64 bit system?
64-Bit

### What environment are you running on?  Windows? Linux? Mac?
Windows

### Are you running on a CI Server?  If so, which one?

### How Did You Get This To Happen? (Steps to Reproduce)

```
// Fails
#addin Cake.Issues&version=0.8.0
#addin Cake.Issues.Reporting&version=0.8.0
#addin Cake.Issues.Reporting.Generic&version=0.8.1

// Works as soon as one of the lines above is replaced with any of those lines
// #addin Cake.Issues
// #addin nuget:?package=Cake.Issues
// #addin Cake.Issues.Reporting
// #addin nuget:?package=Cake.Issues.Reporting
// #addin Cake.Issues.Reporting.Generic
// #addin nuget:?package=Cake.Issues.Reporting.Generic

Task("Default")
    .Does(() =>
{
    var repoRootFolder = MakeAbsolute(Directory("./"));
    var issues = new List<IIssue>();

    var settings =
        GenericIssueReportFormatSettings
            .FromEmbeddedTemplate(GenericIssueReportTemplate.HtmlDxDataGrid);
    CreateIssueReport(
        issues,
        GenericIssueReportFormat(settings),
        repoRootFolder,
        repoRootFolder.CombineWithFilePath("report.html"));
});

RunTarget("Default");
```

### Output Log

~~~sh
Preparing to run build script...
Addin compatibility check is disabled
Running build script...

========================================
Default
========================================
Creating report 'C:/temp/3/tools/report.html'
Could not find loaded assembly Newtonsoft.Json.dll.
An error occurred when executing task 'Default'.
Error: One or more errors occurred.
        Could not find loaded assembly Newtonsoft.Json.dll.
~~~
This will allow us to take advantage of a couple of new GitReleaseManager features, including:

* Ability to add SHA256 hashes to release notes for all assets added to the release
* To automatically update closed issues as part of the milestone with an information comment that this issue has been fixed/released
With the release of version 0.10.x of GitReleaseManager, some new commands were created:

* discard
* open

And it would be good to have support for these commands via Cake Aliases.

In addition, a number of new base options were added which should also be supported via the base Settings class:

* Debug
* NoLogo
* Verbose

And finally, support for Username and Password authentication has been deprecated in this release of GitReleaseManager, and the Cake Aliases should also be updated to reflect this.
### What You Are Seeing?

Cake fails to compile and run build script.  The error message is.
```Error: The assembly name is invalid.```

The problem appears to be related to Mono 6.8 - a temporary workaround that has fixed the issue for me was to add the line ```mono: 6.6.0``` into the below travis.yml.

### What is Expected?

Cake compiles and runs build script.

### What version of Cake are you using?

The below log was generated using Cake 0.32.1, but as part of diagnosing the issue, I updated to 0.36.0 and it didn't make a difference.
I also created a hello world Cake script 

### Are you running on a 32 or 64 bit system?

### What environment are you running on?  Windows? Linux? Mac?

travis, linux, csharp environment as below.

### Are you running on a CI Server?  If so, which one?

travis 

#### yml:

```
language: csharp
dotnet: 2.1.504
sudo: required
services:
  - docker
before_install:
  - export PATH=~/bin:$PATH
script:
  - chmod +x build.sh
  - ./build.sh

```

#### Cake script
```
var target = Argument("target", "Default");

Task("Default")
  .Does(() =>
{
  Information("Hello World!");
});

RunTarget(target);
```

### How Did You Get This To Happen? (Steps to Reproduce)

A hello world cake script in conjunction with the above travis.yml should be enough to repro this issue.

### Output Log

~~~sh

```
9.77s$ ./build.sh -t Build
Downloading NuGet...
  https://api.nuget.org/v3/index.json
Restoring NuGet package Cake.0.32.1.
  GET https://api.nuget.org/v3-flatcontainer/cake/0.32.1/cake.0.32.1.nupkg
  OK https://api.nuget.org/v3-flatcontainer/cake/0.32.1/cake.0.32.1.nupkg 18ms
Installing Cake 0.32.1.
Adding package 'Cake.0.32.1' to folder '/home/travis/build/linn/mylinn/tools'
Added package 'Cake.0.32.1' to folder '/home/travis/build/linn/mylinn/tools'
Analyzing build script...
Processing build script...
Installing addins...
Compiling build script...
Error: The assembly name is invalid.
The command "./build.sh -t Build" failed and exited with 1 during .
```
~~~

Right now, there is a way to get all of the Environment Variables using the [EnvironmentVariables](https://cakebuild.net/api/Cake.Common/EnvironmentAliases/97336C76) alias.  It returns an IDictionary<string, string>.

However, there does not seem to be one to get all of the arguments (unless I am missing something, in which case I apologize).

If the alias is to be consistent with EnvironmentVariables() it should probably return a copy of a dictionary, not a direct reference to the underlying dictionary Cake uses.

**Example Use Case:**
The use case for this could be if one wants to call [CakeExecuteScript](https://cakebuild.net/api/Cake.Common.Tools.Cake/CakeAliases/5FCD85B6) and pass-through the current process's arguments to it (or append arguments of its own), there's no way to do this right now.

```C#
// Arguments() does not exist right now.
// To be consistent with EnvironmentVariables() it should probably a new dictionary
// that is safe to be modified, not a reference to Cake's underlying one.
IDictionary<string, string> currentArgs = Arguments();
currentArgs["additionalArg"] = "myOtherArg";

CakeSettings settings = new CakeSettings
{
    Arguments = currentArgs,
    EnvironmentVariables = EnvironmentVariables()
};

CakeExecuteScript( "somewhereElse/build.cake", settings );
```


It would be great to have better dotnet tool integration, especially now that we have [local tools in .NET Core 3.0](https://andrewlock.net/new-in-net-core-3-local-tools/#local-tools-in-net-core-3-0). I've been pondering what a _minimal_ Cake build could look like. My [BoardGameGeek.Dungeon](https://github.com/gitfool/BoardGameGeek.Dungeon) repo can serve as the use case.

Current Cake related files:
- [cake.ps1](https://github.com/gitfool/BoardGameGeek.Dungeon/blob/master/cake.ps1) bootstraps Cake on Windows
- [cake.sh](https://github.com/gitfool/BoardGameGeek.Dungeon/blob/master/cake.sh) bootstraps Cake on Linux
- [tools/packages.config](https://github.com/gitfool/BoardGameGeek.Dungeon/blob/master/tools/packages.config) locks Cake version

For [Azure Pipelines](https://github.com/gitfool/BoardGameGeek.Dungeon/blob/master/.azure-pipelines.yml#L30) and [GitHub Actions](https://github.com/gitfool/BoardGameGeek.Dungeon/blob/master/.github/workflows/build.yml#L28) builds I avoid the Cake bootstrap by using a [Docker image](https://github.com/gitfool/cake-docker/blob/master/Dockerfile#L10) with the Cake tool already installed. However, all builds still have to bootstrap Cake _modules_ in order to use dotnet tools in the Cake build itself, one of the most common being [GitVersion](https://github.com/GitTools/GitVersion).

BoardGameGeek.Dungeon is built using [Cake.Dungeon](https://github.com/gitfool/Cake.Dungeon), and in the depths lives the [bootstrap.cake](https://github.com/gitfool/Cake.Dungeon/blob/master/scripts/bootstrap.cake) script with the following:
```c#
#module nuget:?package=Cake.DotNetTool.Module&version=0.4.0
...
#tool dotnet:?package=GitVersion.Tool&version=5.1.2
```
This is the first barrier to diet Cake nirvana as it requires Cake to be invoked twice, first to install the `Cake.DotNetTool.Module` to extend Cake to support `#tool`, then again for the actual build, using something like the following:
```
cake --bootstrap && cake
```
Not too bad, although more verbose in [PowerShell](https://github.com/PowerShell/PowerShell) until v7 drops next year with long overdue support for [pipeline chain operators](https://github.com/PowerShell/PowerShell/releases/tag/v7.0.0-preview.5), but really it's surely about time this module moved into Cake core, and when it does we'll want it to play nice with dotnet local tools. (The two step bootstrap will still be required if you're using other Cake modules, but I'd argue that's much less common, and using dotnet [local] tools is standard now, especially if writing cross-platform builds.)

Anyway, given support for dotnet local tools, I would be able to delete the above Cake related files and replace them with a single `dotnet-tools.json` manifest file:
```json
{
  "version": 1,
  "isRoot": true,
  "tools": {
    "cake.tool": {
      "version": "0.36.0",
      "commands": [
        "dotnet-cake"
      ]
    }
  }
}
```
Then to invoke the build on a clean machine I'd use the following:
```
dotnet tool restore && dotnet cake --bootstrap && dotnet cake
```
... or when the dotnet tool module is moved to Cake core:
```
dotnet tool restore && dotnet cake
```
... and when the Cake dotnet tool is already installed (on a local dev machine):
```
dotnet cake
```
Also, for this to integrate better with dotnet _local_ tools, the `#tool` directive should use the local tool directly, presumably invoking `dotnet <tool>`, rather than extracting and copying what was previously a global tool into the Cake tools directory alongside addins and modules. (I'm hoping such a change would also avoid the quirk resulting from building the same directory in Windows and then WSL or Docker with a host mount, or vice versa, where you first need to explicitly delete any such copied dotnet tools which would be for the wrong platform.)

So in summary, a minimal Cake build would simply leverage dotnet local tools to bootstrap Cake itself, and given the dotnet tool module was moved to Cake core, a common case requiring an extra module bootstrap step could most likely be avoided, and the `#tool` directive would use the dotnet local tool directly, rather than copying a platform specific executable into its own tools directory.
### What You Are Seeing?

When building a cake file that references NuGets that include dependencies that cake itself uses, I get a bunch of `CS1701` warnings:

```
warning CS1701: Assuming assembly reference 'Newtonsoft.Json, Version=11.0.0.0, Culture=neutral, PublicKeyToken=30ad4fe6b2a6aeed' used by 'Cake.Json' matches identity 'Newtonsoft.Json, Version=12.0.0.0, Culture=neutral, PublicKeyToken=30ad4fe6b2a6aeed' of 'Newtonsoft.Json', you may need to supply runtime policy
warning CS1701: Assuming assembly reference 'NuGet.Versioning, Version=4.6.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35' used by 'Mono.ApiTools.NuGetDiff' matches identity 'NuGet.Versioning, Version=5.3.0.4, Culture=neutral, PublicKeyToken=31bf3856ad364e35' of 'NuGet.Versioning', you may need to supply runtime policy
...
```

### What is Expected?

A way to hide these warnings.

### What version of Cake are you using?

0.35.0

### Are you running on a 32 or 64 bit system?

64-bit

### What environment are you running on?  Windows? Linux? Mac?

Windows, Linux and Mac.

### Are you running on a CI Server?  If so, which one?

Local and DevOps.

### How Did You Get This To Happen? (Steps to Reproduce)

Just run a cake file with:

```
#addin nuget:?package=Cake.Json&version=4.0.0
#addin nuget:?package=Mono.ApiTools.NuGetDiff&version=1.3.0&loaddependencies=true
```

### Output Log

~~~sh
warning CS1701: Assuming assembly reference 'Newtonsoft.Json, Version=11.0.0.0, Culture=neutral, PublicKeyToken=30ad4fe6b2a6aeed' used by 'Cake.Json' matches identity 'Newtonsoft.Json, Version=12.0.0.0, Culture=neutral, PublicKeyToken=30ad4fe6b2a6aeed' of 'Newtonsoft.Json', you may need to supply runtime policy
warning CS1701: Assuming assembly reference 'NuGet.Versioning, Version=4.6.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35' used by 'Mono.ApiTools.NuGetDiff' matches identity 'NuGet.Versioning, Version=5.3.0.4, Culture=neutral, PublicKeyToken=31bf3856ad364e35' of 'NuGet.Versioning', you may need to supply runtime policy
~~~

### What You Are Seeing?
Can't use glob curly braces as the first logical expression of a subfolder when copying files.
```
var directory = Directory("temp");
CopyFiles("Directory.Name/App/**/{*.js,*.js.map}", directory, true);
```
Fails with error
```
Error: One or more errors occurred.
        parsing "^(*.js|*.js.map)$" - Quantifier {x,y} following nothing.
```
However the following expression works
```
var directory = Directory("temp");
CopyFiles("Directory.Name/App/**/*{.js,.js.map}", directory, true);
```

### What is Expected?
Files should be able to be copied in the above stated failed expression.

### What version of Cake are you using?
0.35.0
### Are you running on a 32 or 64 bit system?
64
### What environment are you running on?  Windows? Linux? Mac?
Windows
### Are you running on a CI Server?  If so, which one?
No
### How Did You Get This To Happen? (Steps to Reproduce)
See above
### Output Log
~~~sh
Error: System.AggregateException: One or more errors occurred. ---> System.ArgumentException: parsing "^(*.js|*.js.map)$" - Quantifier {x,y} following nothing.
   at System.Text.RegularExpressions.RegexParser.ScanRegex()
   at System.Text.RegularExpressions.RegexParser.Parse(String re, RegexOptions op)
   at System.Text.RegularExpressions.Regex..ctor(String pattern, RegexOptions options, TimeSpan matchTimeout, Boolean useCache)
   at System.Text.RegularExpressions.Regex..ctor(String pattern, RegexOptions options)
   at Cake.Core.IO.Globbing.Nodes.PathNode.CreateRegex(List`1 tokens, RegexOptions options)
   at Cake.Core.IO.Globbing.Nodes.PathNode..ctor(List`1 tokens, RegexOptions options)
   at Cake.Core.IO.Globbing.GlobParser.ParseNode(GlobParserContext context)
   at Cake.Core.IO.Globbing.GlobParser.Parse(GlobParserContext context)
   at Cake.Core.IO.Globbing.GlobParser.Parse(String pattern, GlobberSettings settings)
   at Cake.Core.IO.Globber.Match(String pattern, GlobberSettings settings)
   at Cake.Common.IO.GlobbingAliases.GetFiles(ICakeContext context, String pattern)
   at Cake.Common.IO.FileCopier.CopyFiles(ICakeContext context, String pattern, DirectoryPath targetDirectoryPath, Boolean preserverFolderStructure)
   at Submission#0.CopyFiles(String pattern, DirectoryPath targetDirectoryPath, Boolean preserveFolderStructure)
   at Submission#0.<<Initialize>>b__0_22()
   at Cake.Core.CakeTaskBuilderExtensions.<>c__DisplayClass24_0.<Does>b__0(ICakeContext x)
   at Cake.Core.CakeTask.<Execute>d__43.MoveNext()
--- End of stack trace from previous location where exception was thrown ---
   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()
   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
   at Cake.Core.DefaultExecutionStrategy.<ExecuteAsync>d__4.MoveNext()
--- End of stack trace from previous location where exception was thrown ---
   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()
   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
   at Cake.Core.CakeEngine.<ExecuteTaskAsync>d__31.MoveNext()
--- End of stack trace from previous location where exception was thrown ---
   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()
   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
   at Cake.Core.CakeEngine.<RunTask>d__28.MoveNext()
--- End of stack trace from previous location where exception was thrown ---
   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()
   at Cake.Core.CakeEngine.<RunTargetAsync>d__27.MoveNext()
--- End of stack trace from previous location where exception was thrown ---
   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()
   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
   at Cake.Scripting.BuildScriptHost.<RunTargetAsync>d__3.MoveNext()
--- End of stack trace from previous location where exception was thrown ---
   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()
   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
   at Cake.Core.Scripting.ScriptHost.RunTarget(String target)
   at Submission#0.<<Initialize>>d__0.MoveNext()
--- End of stack trace from previous location where exception was thrown ---
   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()
   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
   at Microsoft.CodeAnalysis.Scripting.ScriptExecutionState.<RunSubmissionsAsync>d__9`1.MoveNext()
--- End of stack trace from previous location where exception was thrown ---
   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()
   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
   at Microsoft.CodeAnalysis.Scripting.Script`1.<RunSubmissionsAsync>d__21.MoveNext()
   --- End of inner exception stack trace ---
   at System.Threading.Tasks.Task.ThrowIfExceptional(Boolean includeTaskCanceledExceptions)
   at System.Threading.Tasks.Task.Wait(Int32 millisecondsTimeout, CancellationToken cancellationToken)
   at Cake.Scripting.Roslyn.RoslynScriptSession.Execute(Script script)
   at Cake.Core.Scripting.ScriptRunner.Run(IScriptHost host, FilePath scriptPath, IDictionary`2 arguments)
   at Cake.Commands.BuildCommand.Execute(CakeOptions options)
   at Cake.CakeApplication.Run(CakeOptions options)
   at Cake.Program.Main()
---> (Inner Exception #0) System.ArgumentException: parsing "^(*.js|*.js.map)$" - Quantifier {x,y} following nothing.
   at System.Text.RegularExpressions.RegexParser.ScanRegex()
   at System.Text.RegularExpressions.RegexParser.Parse(String re, RegexOptions op)
   at System.Text.RegularExpressions.Regex..ctor(String pattern, RegexOptions options, TimeSpan matchTimeout, Boolean useCache)
   at System.Text.RegularExpressions.Regex..ctor(String pattern, RegexOptions options)
   at Cake.Core.IO.Globbing.Nodes.PathNode.CreateRegex(List`1 tokens, RegexOptions options)
   at Cake.Core.IO.Globbing.Nodes.PathNode..ctor(List`1 tokens, RegexOptions options)
   at Cake.Core.IO.Globbing.GlobParser.ParseNode(GlobParserContext context)
   at Cake.Core.IO.Globbing.GlobParser.Parse(GlobParserContext context)
   at Cake.Core.IO.Globbing.GlobParser.Parse(String pattern, GlobberSettings settings)
   at Cake.Core.IO.Globber.Match(String pattern, GlobberSettings settings)
   at Cake.Common.IO.GlobbingAliases.GetFiles(ICakeContext context, String pattern)
   at Cake.Common.IO.FileCopier.CopyFiles(ICakeContext context, String pattern, DirectoryPath targetDirectoryPath, Boolean preserverFolderStructure)
   at Submission#0.CopyFiles(String pattern, DirectoryPath targetDirectoryPath, Boolean preserveFolderStructure)
   at Submission#0.<<Initialize>>b__0_22()
   at Cake.Core.CakeTaskBuilderExtensions.<>c__DisplayClass24_0.<Does>b__0(ICakeContext x)
   at Cake.Core.CakeTask.<Execute>d__43.MoveNext()
--- End of stack trace from previous location where exception was thrown ---
   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()
   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
   at Cake.Core.DefaultExecutionStrategy.<ExecuteAsync>d__4.MoveNext()
--- End of stack trace from previous location where exception was thrown ---
   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()
   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
   at Cake.Core.CakeEngine.<ExecuteTaskAsync>d__31.MoveNext()
--- End of stack trace from previous location where exception was thrown ---
   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()
   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
   at Cake.Core.CakeEngine.<RunTask>d__28.MoveNext()
--- End of stack trace from previous location where exception was thrown ---
   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()
   at Cake.Core.CakeEngine.<RunTargetAsync>d__27.MoveNext()
--- End of stack trace from previous location where exception was thrown ---
   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()
   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
   at Cake.Scripting.BuildScriptHost.<RunTargetAsync>d__3.MoveNext()
--- End of stack trace from previous location where exception was thrown ---
   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()
   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
   at Cake.Core.Scripting.ScriptHost.RunTarget(String target)
   at Submission#0.<<Initialize>>d__0.MoveNext()
--- End of stack trace from previous location where exception was thrown ---
   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()
   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
   at Microsoft.CodeAnalysis.Scripting.ScriptExecutionState.<RunSubmissionsAsync>d__9`1.MoveNext()
--- End of stack trace from previous location where exception was thrown ---
   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()
   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
   at Microsoft.CodeAnalysis.Scripting.Script`1.<RunSubmissionsAsync>d__21.MoveNext()<---
~~~
