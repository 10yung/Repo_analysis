**Reproduce Step**
```
String str = "{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{}:1}:1}:1}:1}:1}:1}:1}:1}:1}:1}:1}:1}:1}:1}:1}:1}:1}:1}:1}:1}:1}:1}:1}:1}:1}:1}:1}:1}:1}:1}:1}:1}:1}";
JSONObject object = new JSONObject(str);
```
**Output**
```
java.lang.OutOfMemoryError: Java heap space

	at java.util.Arrays.copyOf(Arrays.java:3332)
	at java.lang.AbstractStringBuilder.ensureCapacityInternal(AbstractStringBuilder.java:124)
	at java.lang.AbstractStringBuilder.append(AbstractStringBuilder.java:649)
	at java.lang.StringBuffer.append(StringBuffer.java:381)
	at java.io.StringWriter.write(StringWriter.java:77)
	at org.json.JSONObject.write(JSONObject.java:2514)
	at org.json.JSONObject.toString(JSONObject.java:2324)
	at org.json.JSONObject.toString(JSONObject.java:2289)
	at org.json.JSONObject.<init>(JSONObject.java:233)
	at org.json.JSONTokener.nextValue(JSONTokener.java:431)
	at org.json.JSONObject.<init>(JSONObject.java:233)
	at org.json.JSONTokener.nextValue(JSONTokener.java:431)
	at org.json.JSONObject.<init>(JSONObject.java:233)
	at org.json.JSONTokener.nextValue(JSONTokener.java:431)
	at org.json.JSONObject.<init>(JSONObject.java:233)
	at org.json.JSONTokener.nextValue(JSONTokener.java:431)
	at org.json.JSONObject.<init>(JSONObject.java:233)
	at org.json.JSONObject.<init>(JSONObject.java:406)
```
**Cause**
The main cause of this problem is: JSON-Java allows the key of JSON text to be JSONObject(Standard JSON key should be String, but JSON parser allows non-JSON forms). 

During the deserialization process, the `quote()` method is called to wrap the key value with quotation marks. When the key is a nested JSONObject(`{{{{{}:1}:2}:3}:4}`), the `\` and `"` in the inner layer need to be escaped, the space occupied by the key value is **exponentially increased**, resulting in an OOM exception.
at last it output: `{"{\"{\\\"{\\\\\\\"{}\\\\\\\":1}\\\":2}\":3}":4}`

https://github.com/stleary/JSON-java/blob/6b6e8e85d842bdf397dd8928ed3a9bf747bc7513/JSONObject.java#L233
`toString()` --> `quote()`
https://github.com/stleary/JSON-java/blob/6b6e8e85d842bdf397dd8928ed3a9bf747bc7513/JSONObject.java#L1988-L1991

So I come up with two way to solve this problem:
* **Option 1:**
Under normal circumstances, a key should not be a nested JSONObject, so I think there is **no need to parse nested key**, and directly parse the outer layer key into a Stringï¼Œ like this:
{"{{{{}:1}:2}:3}":4}

* **Option 2:**
we could **limit the length** of a json String, or the length of a key.

@stleary @johnjaylward Looking forward your suggestions :)

Hi Team,

The below sample works fine :
`<student><name>Neeraj Mishra</name><age>22</age></student>`
`{"student":{"age":22,"name":"Neeraj Mishra"}}`

The below item is not working - attributes is shown as separate tag here :

` {"student":{"age":22,"name":{"content":"Neeraj Mishra","type":"employee"}}}`
`<student><name>Neeraj Mishra<type>employee</type></name><age>22</age></student>`

Expected output 
`<student><name type="employee">Neeraj Mishra</name><age>22</age></student>`

Thanks
Hello! Great lib, thank you very much!
But for me, one useful method is absent.

It is useful for situations, where nested JSON can be a either JSONObject or JSONArray, so you should add everywhere these boring checks. 

Should I add a pull request?

     public List<JSONObject> getAsList(JSONObject o, final String key) {

        List<JSONObject> result = new ArrayList<>();

        if (o.has(key)) {
            Object t = o.get(key);

            if (t instanceof JSONArray)
                for (int i = 0; i < ((JSONArray) t).length(); i++) {
                    result.add(((JSONArray) t).getJSONObject(i));
                }

            if (t instanceof JSONObject)
                result.add((JSONObject) t);

        }

        return result;
    }
Generate the javadoc from the latest sources and also link
the to JDK javadocs.

The command used to generate the javadoc is the following:

```
javadoc -d ./ -link https://docs.oracle.com/javase/7/docs/api/ ./*.java
```

**What problem does this code solve?**
See issue #441 (use BigDecimal for underlying storage of decimal number types)

**Risks**
Medium

**Changes to the API?**
No, but it changes how certain API calls work for decimal/floating-point types work.

for example a JSON document list this:
```json
{ "float":1234 }
```
would parse like this:
```java
JSONObject jo = new JSONObject("{\"float\":1234}");
jo.get("float"); // used to return a Double, now returns a BigDecimal
jo.getDouble("float"); // still returns the value/object as in the old version (Double)
```
In general, the raw "get/opt" methods with no type information (like getDouble, getInt, optDouble, etc) are not guaranteed to be useful as the backing types were never guaranteed. However, people may be using them without the knowledge that the backing types are semi-dynamic (i.e. number types have always been backed differently if an `Integer` was parsed vs a `float`). So even a "standard" document like this:
```json
{
"items": [
 { "floatValue": 123.4 },
 { "floatValue": 321 }
]
}
```
Would have a `Double` stored for the first `floatValue` and an `Integer` for the second `floatValue` before the change. After the change they would be stored as `BigDecimal` and `Integer` respectively.

**Will this require a new release?**
Yes.

**Should the documentation be updated?**
Yes. we should probably mention that the backing type has changed and how that may affect existing code.

**Does it break the unit tests?**
Yes, many of the tests depend on the data type stored for numbers. The tests have been updated to reflect the new backing type. See the updated tests here: https://github.com/stleary/JSON-Java-unit-test/pull/92

**Was any code refactored in this commit?**
Yes, changes were made to the number parsing methods for XML and JSONObject (they need to be kept in sync for Android support)

**Review status**
NOT REVIEWED