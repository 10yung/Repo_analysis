### Does your log mention database corruption?

no

### Please do post actual bug reports and feature requests.

When running the container image without setting the STGUIADDRESS variable, the container logs:

```
20:28:23 INFO: Access the GUI via the following URL: http://127.0.0.1:8384/
```

This looks like the socket is bound to localhost but it is not in the image by default. This is in my opinion misleading.

### Version Information

Syncthing Version: syncthing v1.3.3 "Fermium Flea" (go1.13.5 linux-amd64) docker@syncthing.net 2019-12-08 12:31:26 UTC
OS Version: CentOS 7
Browser Version: (if applicable, for GUI issues)



Sometimes Out of sync List overflows.

![98b14f0f16c568817eff122ff38a830a087377ab](https://user-images.githubusercontent.com/11345848/72284035-1b825a80-3651-11ea-9eea-0b4107431394.jpeg)

Looks like the first filename is too long

v1.3.2, Linux (64 bit)
Chrome 79.0.3945.117 (64 бит)
### Summary
Restoring deleted file versions via the web UI works but in some cases it wrongly shows an error that it didn't work.

### Steps to reproduce
The wrong error is not shown in all cases and I'm not sure what makes the cases when it is shown special. But if it is happening it is quite simple to reproduce:

1. Select one or more files to restore via the web UI and confirm.
2. An error is shown that renaming didn't work for each file although all of them could be restored¹, e.g.:
    * ![Screenshot_20200105_040758](https://user-images.githubusercontent.com/10248953/71774591-4cd49980-2f72-11ea-964f-caa15da8897e.png)
    * ![Screenshot_20200105_182640](https://user-images.githubusercontent.com/10248953/71783576-fb1b2600-2fe8-11ea-9cb4-273a5d0c1b2b.png)

¹With "could be restored" I mean that the files were under `.stversions` before trying to restore them (Syncthing's versioning put them there as expected). After restoring the files they are again under their old location (as expected).

### Expected behavior
The dialog is just closed unless restoring actually didn't work.

### Further information
The full error message (C&P from the web browser to see the full paths) looks like this:

```
Some items could not be restored:
arch/ownstuff-experimental/os/x86_64/mingw-w64-qt5-3d-5.14.0-1-x86_64.pkg.tar.xz	rename /run/media/devel/repo/.stversions/arch/ownstuff-experimental/os/x86_64/.syncthing.mingw-w64-qt5-3d-5.14.0-1-x86_64.pkg.tar.xz.tmp /run/media/devel/repo/.stversions/arch/ownstuff-experimental/os/x86_64/mingw-w64-qt5-3d-5.14.0-1-x86_64.pkg.tar.xz: no such file or directory
```

So apparently there's some intermediate file called `.syncthing.*.tmp` involved. Not sure whether that's supposed to happen or not. In theory it should be possible to rename the file `/run/media/devel/repo/.stversions/arch/ownstuff-experimental/os/x86_64/mingw-w64-qt5-3d-5.14.0-1-x86_64.pkg.tar.xz` directly, right?

The Syncthing log doesn't contain anything related.

### Further UI issues
* One screenshot looks also darkened as if a modal dialog was still open. However, I could reproduce this problem only once and it is likely just some weird bootstrap problem.
* I'd rather not elide the text of such error messages and instead just wrap it or show a scroll bar. Otherwise one has to C&P the message to get the full information which is quite inconvenient.

### Version Information
Syncthing Version: v1.3.2
Environment: Arch Linux using official Go package, x86_64, ext4 file system
# What happened,

'looked' at text file using Markor on Android device - saw was old version  
'looked' at syncthing on (same) Android device was working fine but may have been dormant / not synced for a while due to power saving or other Android 'feature' 
'looked' at text file using Markor on (same) Android device - not changed  
'looked' at text file on PC latest file is overwritten by old version and no conflict file present  

# What you expected to happen instead

 conflict detected with a copy of the latest text file  

# Any steps to reproduce the problem.  

I think this has happened before to me, I assume, but would need help to capture logs etc:  

1. Is Android Syncthing dormant and does not see the new version?
2. Does Markor 'write' to the old file when it is opened?
3. Perhaps Syncthing on Android treats the old file as a new change
4. Maybe Syncthing on PC does not 'know' that Android has not taken the latest version (but assumes if has)

# Comment  

If long time dormant syncthing devices come on line and offer 'touched' files since their last sync, do they by design overwrite without conflict detection other files more recently synced but older 'touch' times?

# Version Information

Syncthing Version: v1.3.2, 
OS Version: Linux (64 bit) 5.0.0-37-generic #40~18.04.1-Ubuntu SMP Thu Nov 14 12:06:39 UTC 2019 x86_64 x86_64 x86_64 GNU/Linux
Browser Version: n/a Android Syncthing  '1.3.2' 3 December 2019

# Related?

https://github.com/syncthing/syncthing/issues/3258


I'm not proposing this as a production change, just putting it out there for discussion. Our leveldb implementation has sometimes worried me in terms of lack of transaction support and in some cases less than responsive maintainership. I wanted to try Badger and see what happens, and I've been running with it myself for a couple of months now. There are no performance advantages that I've been able to measure, on the contrary it's a little bit slower and uses more memory. It has real transactions though.
As long as (big) files synchronization (especially initial one) is IO-intensive task I'd like to see IO (hard drive) utilization in the Web UI along the CPU and memory lines.
### Purpose

Implement native browser push notifications on some import events. See #5329.

### Status

For now notifications are handled client-side, the tab must be always open to receive notifications.

#### Events
As discussed [here](https://github.com/syncthing/syncthing/issues/5329#issuecomment-457835519) some events need to be notified to user.
Here the status of implementation

| Event  | Status | Comments |
| --- | --- | --- |
|  GUI looses connection to Syncthing | ✔ | Also notify when connection is restored
| A error has occurred on the GUI-side (e.g. parsing error when reading the JSON returned by Syncthing's API) | ✔ | Same as network connection losing |
| A notification has been emitted through Syncthing's API (yes, there's already an API for that) | x 
| The synchronization of a local folder has been completed | ✔ 
| The synchronization of a remote folder on device X has been completed | x
| A new device wants to connect | x
| A device wants to share a folder | x

#### Global

- [x] Add option in setting panel
- [ ] Make notifications messages translatable

### Screenshots

![screencapture-127-0-0-1-8384-2019-12-28-16_16_34](https://user-images.githubusercontent.com/6941014/71545620-9844e180-298d-11ea-9f05-7ca081ec2f37.png)

### Testing

First, you need to enable notifications in settings panel as show in the screenshot above.
I your browser doesn't support push notification or you've blocked them, the checkbox is disabled.

A notification is shown when :

- The GUI lost connection with the server: turn off the server
- The GUI restore the connection with the server : turn back on the server
- A local folder finish syncing: Add a file on another device in the shared folder 



I've drafted this PR to have feedback on implementations and priorities before going too deeper in it.
I'll be happy to here back from you about this feature.


When pulling we go once over all needed files in the db, and then at various later points do lookups in the db. In the meantime changes may happen (e.g. that's the only explanation I have for #5952). This PR moves db access through `db.FileSet` to `db.Snapshot` which can be obtained from `db.FileSet`.  
The huge diff on lowlevel.go and transaction.go is just copying over the methods that created a transaction at the beginning to actually be methods on transactions themselves.

Maybe it would be worth keeping utility functions on `db.FileSet` that allow access without taking a snapshot. I would definitely make especially some testing code shorter, then again I think it has some merit being force to think about snapshots (potential concurrent db changes) when dealing with the db.
https://docs.syncthing.net/users/ignoring.html says:
> On Mac OS and Windows, patterns are always case-insensitive.

On macOS at least, case sensitivity depends on the file system, and is not global. Either:

1. Syncthing knows this and is case sensitive on case sensitive filesystems and the document is wrong, or

2. Syncthing is case insensitive on case sensitive filesystems and does not do the right thing.

I do not know about Windows but perhaps there's a similar problem.
 I just noticed that syncthing was using 1.2 GiB memory on my Raspberry Pi 3 (1 GiB available, + ~1 GiB swap on SD card), which slowed down things a lot.
This happened while uploading 2 files (ca 150 MiB each) to the only other remote device that was online. It looks a bit similar to #6160, but after upgrading to 1.3.2 this did not happen again despite transferring larger files several times.

After restarting syncthing the transfers continued normally, with memory usage staying below 200 MiB... so unfortunately I can't reproduce this issue.

Anyway I got a [memory profile](https://github.com/syncthing/syncthing/files/3957038/syncthing-heap-linux-arm-v1.3.2-171438.pprof.gz) and a [screenshot of the web GUI](https://user-images.githubusercontent.com/43007630/70734327-5ae52080-1d0c-11ea-969b-dd479311eee5.png) from the problem, I hope this helps.
Database tuning is set to small, I don't remember touching any other "advanced" option.