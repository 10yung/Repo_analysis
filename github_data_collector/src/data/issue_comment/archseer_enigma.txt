Running `cargo test` from root directory results in the following error:
<details>
  <summary>output</summary>

```
warning: profiles for the non root package will be ignored, specify profiles at the workspace root:
package:   /home/cgm/devel/rust/enigma/enigma/Cargo.toml
workspace: /home/cgm/devel/rust/enigma/Cargo.toml
   Compiling quickcheck v0.9.0
   Compiling instruction-codegen v0.1.0 (/home/cgm/devel/rust/enigma/instruction-codegen)
error[E0433]: failed to resolve: use of undeclared type or module `trybuild`
 --> instruction-codegen/tests/progress.rs:3:13
  |
3 |     let t = trybuild::TestCases::new();
  |             ^^^^^^^^ use of undeclared type or module `trybuild`

error: aborting due to previous error

For more information about this error, try `rustc --explain E0433`.
error: could not compile `instruction-codegen`.
warning: build failed, waiting for other jobs to finish...
error[E0432]: unresolved import `instruction`
  --> instruction-codegen/tests/01-parse-header.rs:23:5
   |
23 | use instruction::ins;
   |     ^^^^^^^^^^^ use of undeclared type or module `instruction`

error: cannot determine resolution for the macro `ins`
  --> instruction-codegen/tests/01-parse-header.rs:25:1
   |
25 | ins!(
   | ^^^
   |
   = note: import resolution is stuck, try simplifying macro imports

error: aborting due to 2 previous errors

For more information about this error, try `rustc --explain E0432`.
error: could not compile `instruction-codegen`.
warning: build failed, waiting for other jobs to finish...
error: build failed
```
</details>
Seems a similar problem to #34 

When I run `git submodule update --init -depth 1` I get the following error:

```
Submodule 'otp' (https://github.com/erlang/otp) registered for path 'otp'
Cloning into '/home/cgm/devel/rust/enigma/otp'...
remote: Total 0 (delta 0), reused 0 (delta 0), pack-reused 0
error: Server does not allow request for unadvertised object 9c35d42191003d1325ad99189d7327f87c9f6fd4
Fetched in submodule path 'otp', but it did not contain 9c35d42191003d1325ad99189d7327f87c9f6fd4. Direct fetching of that commit failed.
```
Found `num-bigint` provides these conversions already. Currently added for `integer_to_binary`, it seems also relatively easy to support `binary_to_integer` and probably some other cases where converting from/to integer.

It seems the test on my local doesn't run at all, is this expected at the moment? Should I add a test anyway?
It's time to get all these out of the way.

#### x_to_list
- [X] erlang:atom_to_list/1
- [X] erlang:binary_to_list/1
- [ ] erlang:binary_to_list/3
- [ ] erlang:float_to_list/1
- [ ] erlang:float_to_list/2
- [X] erlang:integer_to_list/1
- [ ] erlang:integer_to_list/2
- [X] erlang:pid_to_list/1
- [X] erlang:tuple_to_list/1
- [X] erlang:ref_to_list/1
- [ ] erlang:port_to_list/1
- [X] erlang:fun_to_list/1
- [ ] erlang:bitstring_to_list/1

#### list_to_x

- [X] erlang:list_to_atom/1
- [X] erlang:list_to_binary/1
- [x] erlang:list_to_float/1
- [X] erlang:list_to_integer/1
- [ ] erlang:list_to_pid/1
- [ ] erlang:list_to_port/1
- [ ] erlang:list_to_ref/1
- [X] erlang:list_to_tuple/1
- [x] string:list_to_integer/1
- [ ] erlang:list_to_integer/2
- [ ] string:list_to_float/1
- [ ] erlang:list_to_existing_atom/1
- [ ] erlang:list_to_bitstring/1

#### binary_to_x
- [ ] erlang:binary_to_float/1
- [X] erlang:binary_to_term/1
- [x] erlang:binary_to_atom/2
- [ ] erlang:binary_to_existing_atom/2
- [x] erlang:binary_to_integer/1
- [ ] erlang:binary_to_integer/2

#### x_to_binary

- [x] erlang:atom_to_binary/2
- [ ] erlang:float_to_binary/1
- [ ] erlang:float_to_binary/2
- [x] erlang:integer_to_binary/1
- [ ] erlang:integer_to_binary/2
- [x] erlang:term_to_binary/1
- [x] erlang:term_to_binary/2

#### Special

- [x] unicode:characters_to_binary/2
- [X] unicode:characters_to_list/2
- [X] erlang:iolist_to_binary/1
- [x] erlang:iolist_to_iovec/1

I think we can trim the testing code with a macro for calling the bif function.
During my development, the following codes were repeatedly entered.
```rust
let vm = vm::Machine::new();
let module: *const module::Module = std::ptr::null();
let process = process::allocate(&vm.state, module).wrap();
let args = vec![xxxxxxx];
let res = bif_the_function_I_want_to_test(&vm, &process, &args);
```
Most of the codes are not used for testing. The code duplication is so high that I think it can be replaced by a macro as a high order function like the following one.
```rust
macro_rules! test_it(func: func ; $($arg: expr), *) => {
  // The code as the above
}
```
I can do this in Elixir but not sure if it is valid in Rust.
Does it sound a valid solution to you? @archseer 
If it is okay, I will do it and refactor the unit tests.
Some of the unit tests are not implemented yet.
Required someone to fill them up.
- [ ] Math functions
- [ ] List functions
- [ ] Chrono functions

Here are the incomplete unit tests (without testing the exception case).
- [ ] erlang functions

- [x] Binary matching opcodes
- [ ] Binary building opcodes
- [ ] NIFs
We need to place stubs in the exports registry for modules that aren't loaded yet, but referenced elsewhere. These should call the error handler, (which in the erlang stdlib will try to load the module or error).

http://erlang.org/doc/man/error_handler.html

Search for references to error_handler inside [beam_emu.c](https://github.com/erlang/otp/blob/cacf240d0f722c5c4cb9e4abf3c21a306a48b6c7/erts/emulator/beam/beam_emu.c) and enigma for a quickstart.
Update the module registry to store RcModule (Arc<Module>) instead of Box<Module>, and update all `*const Module` to be RcModule. Loading the same module into the VM should swap it in the registry, meaning all new module registry lookups will return the new module. Meanwhile, references to the old Module will still work until they all die, at which point the module will be dropped. 
Probably either immix or orca. Each process gets it's own heap consisting of blocks that we independently GC.

At the moment we just use blocks as a sort of an arena GC: they belong to a process and get deallocated when a process drops (though no destructors are called, and we need to ensure the process unregisters in the process registry!!!)

#### Immix
- http://www.cs.utexas.edu/users/speedway/DaCapo/papers/immix-pldi-2008.pdf
- https://www.cs.tufts.edu/~nr/cs257/archive/steve-blackburn/rust-ismm-2016.pdf
- https://gitlab.com/inko-lang/inko/tree/master/vm/src/immix

#### Orca
- https://www.ponylang.io/media/papers/orca_gc_and_type_system_co-design_for_actor_languages.pdf

#### Golang GC
- https://blog.golang.org/ismmkeynote
- https://github.com/golang/go/blob/master/src/runtime/mgc.go