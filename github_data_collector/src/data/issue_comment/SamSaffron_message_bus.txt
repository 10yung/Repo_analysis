
I'm interested in doing some back-and-forth with someone who has retrofitted message_bus to an old legacy Rails app (v4.1.16)   Is there a forum or channel on a discourse site that I should join?

Dewayne
  o-*
In its `error` function, the object passed to `MessageBus.ajax` checks to see if `statusText === "abort"`. If it is, then a relatively low value gets used for the poll interval.

Compare https://github.com/SamSaffron/message_bus/blob/master/assets/message-bus.js#L267
and https://github.com/SamSaffron/message_bus/blob/master/assets/message-bus.js#L281

It looks like setting `statusText` to `"abort"` is something that jQuery does, not the browser. Which results in a potentially long delay between when a request is aborted (e.g. by subscribing to or unsubscribing from a channel) and when the subscriber receives new messages.

I think the message-bus-ajax.js fallback should somehow make sure to pass `"abort"` as the value for `statusText` or alternatively the `error` function could use a different way to determine whether or not the XHR has been aborted.
We have configured message bus in our platform, it has been observed when redis is down our logs files are getting populated with following message, It tries to connect redis after regular interval of time, is there any way we can increase time interval so that there would be less occurrence in log file?   


`Error connecting to Redis on localhost:6379 (Errno::ECONNREFUSED) subscribe failed, reconnecting in 1 second. Call stack ["/home/x/.rvm/gems/ruby-2.4.3/gems/redis-4.1.0/lib/redis/client.rb:353:in `rescue in establish_connection'", "/home/x/.rvm/gems/ruby-2.4.3/gems/redis-4.1.0/lib/redis/client.rb:336:in `establish_connection'", "/home/x/.rvm/gems/ruby-2.4.3/gems/redis-4.1.0/lib/redis/client.rb:104:in `block in connect'", "/home/x/.rvm/gems/ruby-2.4.3/gems/redis-4.1.0/lib/redis/client.rb:299:in `with_reconnect'", "/home/x/.rvm/gems/ruby-2.4.3/gems/redis-4.1.0/lib/redis/client.rb:103:in `connect'", "/home/x/.rvm/gems/ruby-2.4.3/gems/redis-4.1.0/lib/redis/client.rb:279:in `with_socket_timeout'", "/home/x/.rvm/gems/ruby-2.4.3/gems/redis-4.1.0/lib/redis/client.rb:136:in `call_loop'", "/home/x/.rvm/gems/ruby-2.4.3/gems/redis-4.1.0/lib/redis/subscribe.rb:43:in `subscription'", "/home/x/.rvm/gems/ruby-2.4.3/gems/redis-4.1.0/lib/redis/subscribe.rb:12:in `subscribe'", "/home/x/.rvm/gems/ruby-2.4.3/gems/redis-4.1.0/lib/redis.rb:3474:in `_subscription'", "/home/x/.rvm/gems/ruby-2.4.3/gems/redis-4.1.0/lib/redis.rb:2293:in `block in subscribe'", "/home/x/.rvm/gems/ruby-2.4.3/gems/redis-4.1.0/lib/redis.rb:50:in `block in synchronize'", "/usr/share/rvm/rubies/ruby-2.4.3/lib/ruby/2.4.0/monitor.rb:214:in `mon_synchronize'", "/home/x/.rvm/gems/ruby-2.4.3/gems/redis-4.1.0/lib/redis.rb:50:in `synchronize'", "/home/x/.rvm/gems/ruby-2.4.3/gems/redis-4.1.0/lib/redis.rb:2292:in `subscribe'", "/home/x/.rvm/gems/ruby-2.4.3/gems/message_bus-2.2.0/lib/message_bus/backends/redis.rb:287:in `global_subscribe'", "/home/x/.rvm/gems/ruby-2.4.3/gems/message_bus-2.2.0/lib/message_bus.rb:721:in `global_subscribe_thread'", "/home/x/.rvm/gems/ruby-2.4.3/gems/message_bus-2.2.0/lib/message_bus.rb:669:in `block in new_subscriber_thread'"]`
  
Let's say you're building a chat app (Slack clone), that triggers a `new Notification` when a new message arrives.

With the default MessageBus js configuration, messages do arrive instantaneously when tabs are in foreground, but take up to 60 seconds to arrive when tab is not focused due to lib falling back to a regular polling strategy (instead of long polling), because it polls using `backgroundCallbackInterval` which defaults to `60000`.

I know the lib is smart enough to immediately start a new long poll as soon as the browser tab comes to focus, which has the effect of immediately displaying the new data, but it doesn't fix the issue of needing that data in realtime in the background tabs for the browser notification to happen in a timely fashion. 

One way to change this behavior would be to change `alwaysLongPoll` to `true`, which works fine in my tests, but documentation states that this should be used for debugging only.

So:

1. The reason to fallback to regular polling in background tabs is just to avoid hitting the server every 25 seconds (the value of `long_polling_interval` in `message_bus.rb`), using a more relaxed 60 seconds default?

2. If that's the case, would you welcome a pull request that updates documentation explaining this reasoning and removes the indication that `alwaysLongPoll` should be used for debugging purposes only?

Last but not least, I'd like just to point out that since `long_polling_interval` is currently hardcoded in `message_bus.rb` to 25 seconds, setting the backgroundCallbackInterval to anything < `25000` will post to the server more often in the background tabs than if one just used long polling, right?
Noticed that if site_id_lookup returns an Integer instead of the string you will think everything works but messages will be retrieved only on the start of the request (after the client establishes the connection). Publishing new message will not transfer them in long polling chunked mode.

To explain better, once a client connects `client.backlog` is called to get all existing messages, that calls `@bus.backlog` which encodes `site_id` into a string and there's no issue there. Works as expected.

But later `MessageBus::ConnectionManager` is used to push out new messages, it uses `@subscriptions[msg.site_id]` to look up any clients (which is string even if the message was published with `site_id` set to an integer) but `add_client` uses `client.site_id` established by `site_id_lookup` which if it returns anything else than a string will break lookup in `connection_manager.rb:25`

Leaving for anyone scratching their heads. 

Generally would be great to either assert returned type from site_id_lookup or convert it to a string in connection_manager.rb

That was my fault but would be great if API helped diagnose problems like that.
Hello,
I have configured baseurl in my application js file like.
 `
   MessageBus.baseUrl = 'fa/';
    MessageBus.start();
    MessageBus.subscribe("/notification_channel_" + window.wsConfig.sessionId, function(data){
        console.log(data);
    }
`
I keep getting following error in my Rails application
`ActionController::RoutingError` (No route matches [POST] `"/fa/message-bus/fc1684579dd54b9bb0a89fd8e4a3fa5d/poll.`

I tried exploring lib/message_bus/rack/middleware.rb file but could not find any code handling response with custom baseurl. Please help. Thanks 


"_But will it scale?_" is an important concern for everyone that considers this gem, since ActionCable itself is pretty bad (unfortunately) when we hit thousands of subscribers (as AnyCable benchmarks shows). 

Right at the beginning of the readme it states that "MessageBus can handle thousands of concurrent long polls on all popular Ruby webservers", but I wish to improve it with some numbers so we can have a ballpark idea of how many concurrent connections it could actually handle.

And honestly I'm ignorant on how exactly that can be done! If it uses (by default) a **long-polling stategy with streaming** which keeps "the connection open for the configured long-polling interval (25 seconds by default)" (I'm quoting from the README), doesn't it mean that for every subscriber there will be an open connection that remains open all the time?

If you have a Puma server with 5 threads and 2 workers, can't it only handle 10 concurrent requests? By "the connections remain open during the long poll intervall" I assumed that thread would not be available for responding to any other requests (like, for instance, if it was a regular rails request that took very long to respond - the thread is stuck until that request finishes). 

I commit myself to make a pull request to improve the readme on this part, but of course I need to understand how this works first :) 

(I read the how it works section, but couldn't find these answers there). 
a Typescript file for typescript users
I'd like to revisit this in isolation. It was unclear in https://github.com/SamSaffron/message_bus/pull/190 if the objection was to execution in the default task (which perhaps people run when working on message_bus) or execution in CI.

CI is the quietest most stable environment we have available in which to execute these. Development hardware is noisy, and we have no other environment readily available.

Sam mentioned the possibility of using https://rubybench.org/, but from that site I found no evidence that it is an option at this time.