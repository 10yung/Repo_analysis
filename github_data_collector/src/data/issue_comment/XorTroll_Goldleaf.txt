## Feature description

Would be very useful and improve UX if Quark try to auto reconnect when lost the connection.

## Benefits

A use case is when you are developing a homebrew. So you need to send and lauch a `.nro` file.
Then you close Goldleaf and on the next time you need to run it again to send a new version of your `.nro`.
But is very boring to click on `Ok` button on Quark in order to reconnect again. Would be better if it auto reconnect again.
## Feature description

Would be useful to describe the step by step to build it. It is useful to avoid mistakes

For example:

```
sudo dkp-pacman -S switch-curl -r /System/Volumes/Data
```

Because we need to add curl as dependency.

```
git clone --recursive git@github.com:XorTroll/Goldleaf.git
```

Because we need to clone submodules.

Also, need to link to `Plutonium` repository saying that install its dependencies firstly.

## Benefits

Better documentation for this project.

## Additional information

Maybe there are some useful builds steps to describe here.
# GoldLeaf freezes when trying to install NSP

## Bug description

I’ve updated Java to the 9th version, the file Quark.jar runs perfectly for Goldleaf. I moved the .nro file to the Switch and it works too on SX OS (v2.9.3). When I’m trying to instal a game from the PC as source, Goldleaf freezes and nothing happens. I select the file from PC, then click on Install and then Install on MicroSD or Internal Memory. In both cases the homebrew freezes and the client on Windows seems that is doing nothing. How can I fix that?

## Your setup

- **Console firmware**: 9.1.0

- **CFW with version**: SX OS 2.9.3

- **Goldleaf version**: 0.8

- **Goldtree version**: //


## Bug reproduction

I’ve tried many NSP files but with all of them the software freezes.


## Additional information

I’ve already read other issues like mine and I’ve tried to use other USB ports, reinstall drivers and other things.
# [ Unable to Add Paths on Quark ]

## Bug description

[ After Selecting a Path, there is no pop up to name it and so path is not added. "Select Path" Button remains highlighted
![quark bug](https://user-images.githubusercontent.com/59426222/71649505-5abdbc80-2cdd-11ea-8d9e-7107214ebf45.png)
 ]

## Your setup

- **Console firmware**: [ 9.1 ]

- **CFW with version**: [ Atmosphere 10.1 ]

- **Goldleaf version**: [ 0.8 ]

- **Goldtree version**: [ Quark 0.3.0 ]


## Bug reproduction

[ Describe as detailed as possible how to reproduce your bug, for others to be able to verify it. ]


## Additional information

[ Please add some extra information or screenshots. ] 

# Core dump when using Quark in wayland

## Bug description

Quark trows an error when running it with wayland instead of Xorg, this wasn't the case with the version bundled with Goldleaf 0.7.2 or prior.

## Your setup

- **Goldleaf version**: 0.8

- **Quark version**: 0.3


## Bug reproduction

Run ~java -jar Quark.jar~ using wayland and get

```
(java:26118): Gdk-CRITICAL **: 19:07:38.462: gdk_x11_display_set_window_scale: assertion 'GDK_IS_X11_DISPLAY (display)' failed
#
# A fatal error has been detected by the Java Runtime Environment:
#
#  SIGSEGV (0xb) at pc=0x00007fc48000cf90, pid=26118, tid=26166
#
# JRE version: OpenJDK Runtime Environment (11.0.5+10) (build 11.0.5+10)
# Java VM: OpenJDK 64-Bit Server VM (11.0.5+10, mixed mode, sharing, tiered, compressed oops, g1 gc, linux-amd64)
# Problematic frame:
# C  0x00007fc48000cf90
#
# Core dump will be written. Default location: Core dumps may be processed with "/usr/lib/systemd/systemd-coredump %P %u %g %s %t %c %h" (or dumping to /var/home/msandoval/.opt/Switch/core.26118)
#
# An error report file with more information is saved as:
# /var/home/msandoval/.opt/Switch/hs_err_pid26118.log
#
# If you would like to submit a bug report, please visit:
#   http://bugreport.java.com/bugreport/crash.jsp
# The crash happened outside the Java Virtual Machine in native code.
# See problematic frame for where to report the bug.
#
Aborted (core dumped)
```


## Additional information

This isn't an issue with Xorg or previous versions.
# With java 9+ the window is collapsed making the app unusable

when the app run with java 9, 11 or 13 the app is not usable


## Bug description

recently I'm playing around with the code and learning, found that the problem rises with the stage is set to not resizable

    primaryStage.setResizable(false); // this line trigger the problem



### How the app looks with with java 8

![Screenshot_20191204_084149](https://user-images.githubusercontent.com/395707/70147412-2620fb80-1672-11ea-94a2-7b1cd43a81be.png)

### How the app looks with java 9+
![Screenshot_20191204_084214](https://user-images.githubusercontent.com/395707/70147462-43ee6080-1672-11ea-833b-8cba17ad19be.png)


## Your setup

### Linux java 9
java version "9.0.4"
Java(TM) SE Runtime Environment (build 9.0.4+11)
Java HotSpot(TM) 64-Bit Server VM (build 9.0.4+11, mixed mode)

### Linux java 13
java version "13.0.1" 2019-10-15
Java(TM) SE Runtime Environment (build 13.0.1+9)
Java HotSpot(TM) 64-Bit Server VM (build 13.0.1+9, mixed mode, sharing)




## Bug reproduction

Just run the project with java 9+
# [Quark] Error:Exception in thread "main" java.lang.RuntimeException: Exception in Application start method

## Bug description

$ java -version
java version "13.0.1" 2019-10-15
Java(TM) SE Runtime Environment (build 13.0.1+9)
Java HotSpot(TM) 64-Bit Server VM (build 13.0.1+9, mixed mode, sharing)

$ java -jar Quark.jar
11月 14, 2019 12:16:48 上午 javafx.fxml.FXMLLoader$ValueElement processValue
警告: Loading FXML document with JavaFX API of version 11.0.1 by JavaFX runtime of version 11
Exception in Application start method
Exception in thread "main" java.lang.RuntimeException: Exception in Application start method
	at com.sun.javafx.application.LauncherImpl.launchApplication1(LauncherImpl.java:900)
	at com.sun.javafx.application.LauncherImpl.lambda$launchApplication$2(LauncherImpl.java:195)
	at java.base/java.lang.Thread.run(Thread.java:830)
Caused by: java.lang.NoClassDefFoundError: com/sun/javafx/css/converters/PaintConverter
	at com.jfoenix.controls.JFXTextArea$StyleableProperties.<clinit>(JFXTextArea.java:221)
	at com.jfoenix.controls.JFXTextArea.<init>(JFXTextArea.java:145)
	at java.base/jdk.internal.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)
	at java.base/jdk.internal.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
	at java.base/java.lang.reflect.Constructor.newInstanceWithCaller(Constructor.java:500)
	at java.base/java.lang.reflect.ReflectAccess.newInstance(ReflectAccess.java:166)
	at java.base/jdk.internal.reflect.ReflectionFactory.newInstance(ReflectionFactory.java:404)
	at java.base/java.lang.Class.newInstance(Class.java:591)
	at javafx.fxml.FXMLLoader$InstanceDeclarationElement.constructValue(FXMLLoader.java:1019)
	at javafx.fxml.FXMLLoader$ValueElement.processStartElement(FXMLLoader.java:754)
	at javafx.fxml.FXMLLoader.processStartElement(FXMLLoader.java:2722)
	at javafx.fxml.FXMLLoader.loadImpl(FXMLLoader.java:2552)
	at javafx.fxml.FXMLLoader.loadImpl(FXMLLoader.java:2466)
	at javafx.fxml.FXMLLoader.load(FXMLLoader.java:2435)
	at xorTroll.goldleaf.quark.ui.MainApplication.start(MainApplication.java:103)
	at com.sun.javafx.application.LauncherImpl.lambda$launchApplication1$9(LauncherImpl.java:846)
	at com.sun.javafx.application.PlatformImpl.lambda$runAndWait$12(PlatformImpl.java:455)
	at com.sun.javafx.application.PlatformImpl.lambda$runLater$10(PlatformImpl.java:428)
	at java.base/java.security.AccessController.doPrivileged(AccessController.java:391)
	at com.sun.javafx.application.PlatformImpl.lambda$runLater$11(PlatformImpl.java:427)
	at com.sun.glass.ui.InvokeLaterDispatcher$Future.run(InvokeLaterDispatcher.java:96)
Caused by: java.lang.ClassNotFoundException: com.sun.javafx.css.converters.PaintConverter
	at java.base/jdk.internal.loader.BuiltinClassLoader.loadClass(BuiltinClassLoader.java:602)
	at java.base/jdk.internal.loader.ClassLoaders$AppClassLoader.loadClass(ClassLoaders.java:178)
	at java.base/java.lang.ClassLoader.loadClass(ClassLoader.java:521)
	... 22 more

## Your setup

- **Quark**: [ 0.7.3 maybe 0.7.2 ]

- **macOS**: [ 10.15.1  ]

- **JDK**: [ 13.0.1+9 ]


## Bug reproduction

Launch Quark.jar 
java -jar Quark.jar

## Additional information

# headless mode

## Feature description

I would like to run quark permanently on my Synology NAS. Therefore I need a headless version.

Now the results are:

```
java -jar Quark.jar 
Graphics Device initialization failed for :  es2, sw
Error initializing QuantumRenderer: no suitable pipeline found
```


## Benefits

Running it on a Synology NAS.

## Additional information

We love you. Thanks.
Non-lower-case formats (*.NACP instead of *.nacp) aren't recognised currently.