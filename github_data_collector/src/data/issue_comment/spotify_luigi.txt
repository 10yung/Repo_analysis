According to docs https://luigi.readthedocs.io/en/stable/execution_model.html#triggering-tasks  
It use crontab to trigger task.

However, is there any other way to trigger the task like REST API (http) yet ? 
<!---
We use GitHub issues mainly for tracking bugs and feature requests.
Questions for how to use luigi can be sent to the mailing list.

Currently, there are no strict procedures or guidelines for submitting issues.
In short, please just use common sense.

Common sense includes this at bare-minimum:

 * search for similar issues posted before creating a new issue.
 * Use markdown to format all code/logs. Issues which are hard to read
   when rendered on GitHub might be closed with a friendly reminder of this.
 * If applicable, reading relevant parts of the documentation.

Also, add steps to reproduce the bug, if applicable. Sample code would be nice too :)

For more information on how to submit valuable contributions,
see https://opensource.guide/how-to-contribute/#how-to-submit-a-contribution
-->

**Environment**

* Windows 7 64-bit
* Python 3.7.3
* Luigi 2.8.10
* Tornado 5.1.1
* SQLAlchemy 1.3.12
* mysqlclient 1.4.2

**Issue**

There is a couple of things here:

* The Task Scheduler setup to dump to MySQL. The database is being populated, however the /history page will only show the latest result of the job (1 row per job)
* If the server is reset and the job is run again, the /history page now shows the latest result of the job, plus the result of the one we just run. Jobs before the 2nd last job do not appear.

Has anybody run into this one? There is a similar issue over at #1873 with no response.
I have a task that runs and babysits an R script, which is consistently being refused permission to run, with nothng in the job log or the Luigi server lot to indicate the reason. 

Here is a mock task that is a stripped down version, which fails semiconsistently right now: 

```
class MockTask(luigi.Task):
    r_path = luigi.Parameter(default='../..')
    source_path = luigi.Parameter()
    r_params = luigi.DictParameter(default = {})
    def output(self):
        sha = hashlib.sha256()
        sha.update(self.source_path.encode())
        sha.update(self.r_path.encode())
        sha.update(open(self.source_path).read().encode())
        sha.update(datetime.datetime.now().isoformat().encode())
        return luigi.LocalTarget('/var/tmp/mock.tgt.{}'.format(sha.hexdigest()))
    def run(self):
	f = open(self.output().path,'w')
        f.close()
```

Here's the output I get: 

```oschwarz@ip-10-0-0-206:~/r_oschwarz/REhedge$ /usr/bin/env R_DEFAULT_SERIALIZE_VERSION=2 R_DEFAULT_SAVE_VERSION=2 LD_LIBRARY_PATH=/usr/lib/jvm/java-11-openjdk-amd64/lib/server XGBOOST_NTHREAD=2 PYTHONPATH=`pwd`/inst/python TOML=TRUE luigi --module luigitask --workers 3 MockTask --source-path inst/Pipelines/closed/pipeline_BearkatII.R
R[write to console]: Loading required package: stats

R[write to console]: Loading required package: utils

DEBUG: Checking if MockTask(r_path=../.., source_path=inst/Pipelines/closed/pipeline_BearcatII.R, r_params={}) is complete
INFO: Informed scheduler that task   MockTask__________inst_Pipelines_c_8e0260877f   has status   PENDING
INFO: Done scheduling tasks
INFO: Running Worker with 3 processes
DEBUG: Asking scheduler for work...
DEBUG: Done
DEBUG: There are no more tasks to run at this time
INFO: Worker Worker(salt=521944519, workers=3, host=ip-10-0-0-206, username=oschwarz, pid=3712) was stopped. Shutting down Keep-Alive thread
INFO: 
===== Luigi Execution Summary =====

Scheduled 1 tasks of which:
* 1 were left pending, among these:
    * 1 was not granted run permission by the scheduler:
        - 1 MockTask(r_path=../.., source_path=inst/Pipelines/closed/pipeline_BearcatII.R, r_params={})

Did not run any tasks
This progress looks :| because there were tasks that were not granted run permission by the scheduler

===== Luigi Execution Summary =====
```

I cannot understand why, but when I "ask the scheduler for work" it balks, and then the job halts. 

## Description
Gives a second option to using an in-memory dict as the state store, instead allowing `_state` to point to a SQL DB. Also adds various `persist_task()` calls in places where we were quietly modifying a task that lived in the state, outside of the state, which is leaky and led to a number of bugs with this at the start.

In the process, factored out the state storage into a separate file with an abstract interface and some default implementations, in case someone else wants to add a new state store someday, the API is now substantially smaller/cleaner.

Note, this performs remarkably badly as-is, since Luigi hasn't been written in a way to minimize requests to the state store -- I've made a few necessary changes to this (caching, etc) already and will put all those in a second PR.

This is a big change and of course will require revision before becoming merge-able, but, do you all see any immediate problems with the approach?

Will squash before merging (if y'all like the PR)

## Motivation and Context
Once Luigi (at our company, at least) hits a few thousand tasks, the state's `dump()` method starts to become very flaky, with `pickle` failing to serialize the whole state sometimes and thus we lose all the tasks. These tasks are pretty valuable and it's a setback to lose them, so this is an attempt to keep them in a, uh, less-perishable place, immune to restarts and crashes.

Not sure if there's an open issue for this.

## Have you tested this? If so, how?
Sadly this one is just "I ran all our jobs with this and it works", I didn't see any unit tests for the state storage to begin with and this would need some kind of SQL testing setup that I don't know much about :\

I get `ftplib.error_perm: 553 Prohibited directory name` when I put a file to FTP from Windows machine. I have to fix this method every time:
`    
def _ftp_put(self, local_path, path, atomic):
		# normpath = posixpath.normpath(path)
        normpath = os.path.normpath(path)
        folder = os.path.dirname(normpath)

        # create paths if do not exists
		# for subfolder in folder.split(posixpath.sep):
        for subfolder in folder.split(os.sep):
            if subfolder and subfolder not in self.conn.nlst():
                self.conn.mkd(subfolder)

            self.conn.cwd(subfolder)

        # go back to ftp root folder
        self.conn.cwd("/")

        # random file name
        if atomic:
			# tmp_path = folder + posixpath.sep + 'luigi-tmp-%09d' % random.randrange(0, 1e10)
            tmp_path = folder + os.sep + 'luigi-tmp-%09d' % random.randrange(0, 1e10)
        else:
            tmp_path = normpath

        self.conn.storbinary('STOR %s' % tmp_path, open(local_path, 'rb'))

        if atomic:
            self.conn.rename(tmp_path, normpath)
 `

Changes I make are commented. So I am guessing since the problem because of slashes. Here luigi use 
backslash to build path for posix file system.
In 2.8.11 the TOML parser freezes the config dict, this makes it no longer possible to load logging using that config.

```
Traceback (most recent call last):
  File "/opt/rh/rh-python36/root/usr/lib64/python3.6/logging/config.py", line 538, in configure
    formatters[name])
TypeError: 'FrozenOrderedDict' object does not support item assignment

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/opt/app-root/bin/luigid", line 11, in <module>
    load_entry_point('luigi==2.8.11', 'console_scripts', 'luigid')()
  File "/opt/app-root/lib/python3.6/site-packages/luigi/cmdline.py", line 31, in luigid
    DaemonLogging.setup(opts)
  File "/opt/app-root/lib/python3.6/site-packages/luigi/setup_logging.py", line 83, in setup
    configured = cls._section(opts)
  File "/opt/app-root/lib/python3.6/site-packages/luigi/setup_logging.py", line 48, in _section
    logging.config.dictConfig(logging_config)
  File "/opt/rh/rh-python36/root/usr/lib64/python3.6/logging/config.py", line 795, in dictConfig
    dictConfigClass(config).configure()
  File "/opt/rh/rh-python36/root/usr/lib64/python3.6/logging/config.py", line 541, in configure
    'formatter %r: %s' % (name, e))
ValueError: Unable to configure formatter 'simple': 'FrozenOrderedDict' object does not support item assignment
```

I have not had time to look into possible solutions for now.
<!--- This template is optional. Please use it as a starting point to help guide PRs -->

<!--- Provide a general summary of your changes in the Title above -->

## Description
<!--- Describe your changes -->
This consolidates all PRs for python2 deprecation: https://github.com/spotify/luigi/pulls?q=is%3Apr+label%3A%22Python2+deprecation%22+is%3Aclosed

## Motivation and Context
<!--- Why is this change required? What problem does it solve? -->
<!--- If it fixes an open issue, please link to the issue here. -->
Open a PR to make final check easier.

## Have you tested this? If so, how?
<!--- Valid responses are "I have included unit tests." or --> 
<!--- "I ran my jobs with this code and it works for me." -->

<!---
for more information on how to submit valuable contributions,
see https://opensource.guide/how-to-contribute/#how-to-submit-a-contribution
-->

## Description
- use 'rb' mode for writing and reading pickle files. this is already implemented in sge module.
- add 'python' in the command sequence. otherwise receive "permission denied" error.

## Motivation and Context
- to update lsf module. see issue #2873 

## Have you tested this? If so, how?
- I ran my jobs with this code and it works for me.
- The job can be submitted on LSF queue and status are properly tracked.
When running a `KubernetesJobTask` a user might want to add some annotations to attach arbitrary non-identifying metadata to the job for clients (tools and libraries) to retrieve this metadata for some custom actions to be performed.
Ref: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/
python version 3.6.8, luigi version 2.8.10.

Cannot pickle dump because the file type is not binary. can update to the version used by SGE. Creating a common abstract class would be even better.

```
Traceback (most recent call last):
  File "/storage/gpfs_data/Software/python3.6.8/lib64/python3.6/site-packages/luigi/worker.py", line 199, in run
    new_deps = self._run_get_new_deps()
  File "/storage/gpfs_data/Software/python3.6.8/lib64/python3.6/site-packages/luigi/worker.py", line 141, in _run_get_new_deps
    task_gen = self.task.run()
  File "/storage/gpfs_data/Software/python3.6.8/lib64/python3.6/site-packages/luigi/contrib/lsf.py", line 191, in run
    self._init_local()
  File "/storage/gpfs_data/Software/python3.6.8/lib64/python3.6/site-packages/luigi/contrib/lsf.py", line 162, in _init_local
    self._dump(self.tmp_dir)
  File "/storage/gpfs_data/Software/python3.6.8/lib64/python3.6/site-packages/luigi/contrib/lsf.py", line 217, in _dump
    pickle.dump(self, open(self.job_file, "w"))
TypeError: write() argument must be str, not bytes
```

similar to #1683