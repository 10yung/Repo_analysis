To my mind  we should go with the time and provide a RDF4J implementation. This could lead to a banan-rdf SHACL  adapter and other things. It came out of an experiment, but I quickly recognized that there was not much to be changed. As all tests run, I want to contribute it.

I tested it with version 2.5.4 and 3.0.0.

A small change to the NTriple test suite had to be made...
Especially in scala.js I recognized slow speed accessing graph structured of moderate size. here I present an approach to get a better performance using
an immutable Hexastore approach, with a dictionary mapping URIs/Strings to Integers.
It keeps a lookup `Map[Map[Vecor[]]]` with the following combinations
   `spo, sop, pso, pos, osp, ops`
Probably 5 of these are enough to cover all cases in pattern matching.

I continue this approach by using a mutable B+Tree for the dictionary (and later possibly also for the maps) to gain even more performance (insert and query with `O(log N)` ), which you can follow here [bastiion:BPlusTree](https://github.com/bastiion/banana-rdf/tree/BPlusTree)

I folow the approach of

 "[Hexastore](http://dx.doi.org/10.14778/1453856.1453965): Sextuple Indexing for Semantic Web Data Management" by Weiss, Karras, und Bernstein

Could this be an option?
If yes I would try to unfiddle the commits again from the other "non necessary" changes... 
At the very top of each of your GitHub repository pages, there is a button that says "Edit" and below that a button that says "manage topics". Topics are useful to make it easier to find your repo from https://github.com/search/advanced 

Could you add like five topics as keywords to the top of your repo?
We need to implement an algorithm to make a graph lean. This may be implemented in Jena or Sesame, but is not implemented in Plantain. 
See the very good paper ["Everything you ever wanted to know about blank nodes"](https://www.sciencedirect.com/science/article/pii/S1570826814000481). It looks like there actually are some pretty efficient algorithms for this, especially for smaller graphs.
Ideally I would like to see the Travis CI showing "build passing" instead of "build unknown".

See:
- https://i.imgur.com/BmIbOdE.png
- https://i.imgur.com/9xT3tSh.png

Sometimes, when I search for projects in GitHub Advanced Search (https://github.com/search/advanced ), I filter by license. Also my employer is kind of picky when it comes to submitting approvals for Free Open Source Software (FOSS). Could you please include the LICENSE file in the repo so it appears at the top of the GitHub page like so: https://i.imgur.com/ny6PEjB.png

Instructions: https://i.imgur.com/S7A3bjH.png

Also, if you could go with a slightly more common permissive software license like Apache 2.0 or MIT, that would be helpful. I think it's possible to include a LICENSE file in all packaged artifacts like so: https://github.com/wartremover/wartremover/blob/f8c58daa3b3875430f15d9c17bcd34afd1e3b0cb/build.sbt#L19
Hey. I am considering using Banana RDF. A couple of questions:

1. License - The software license you have isn't the usual Apache 2.0 or MIT license and the LICENSE file does not appear in the project itself. Example: https://i.imgur.com/DzxCuVE.png

2. Usage - Can I use this as a drop in substitute for Eclipse RDF4J (Sesame) and can this library process the RDF Turtle syntax?
Hi,

I followed the addition configuration need for Eclipse project generation on the main README.md, but I still get the following error. Any clue?

```
[info] About to create Eclipse project files for your project(s).
java.lang.NoSuchMethodError: scalaz.Scalaz$.ToValidationV(Ljava/lang/Object;)Lscalaz/syntax/ValidationV;
	at com.typesafe.sbteclipse.core.package$.setting(package.scala:66)
	at com.typesafe.sbteclipse.core.Eclipse$.skipParents(Eclipse.scala:543)
	at com.typesafe.sbteclipse.core.Eclipse$$anonfun$action$1.apply$mcZ$sp(Eclipse.scala:104)
	at com.typesafe.sbteclipse.core.Eclipse$$anonfun$action$1.apply(Eclipse.scala:104)
	at com.typesafe.sbteclipse.core.Eclipse$$anonfun$action$1.apply(Eclipse.scala:104)
	at scala.Option.getOrElse(Option.scala:120)
	at com.typesafe.sbteclipse.core.Eclipse$.action(Eclipse.scala:104)
	at com.typesafe.sbteclipse.core.Eclipse$$anonfun$eclipseCommand$2.apply(Eclipse.scala:83)
	at com.typesafe.sbteclipse.core.Eclipse$$anonfun$eclipseCommand$2.apply(Eclipse.scala:83)
	at sbt.Command$$anonfun$applyEffect$1$$anonfun$apply$2.apply(Command.scala:59)
	at sbt.Command$$anonfun$applyEffect$1$$anonfun$apply$2.apply(Command.scala:59)
	at sbt.Command$$anonfun$applyEffect$2$$anonfun$apply$3.apply(Command.scala:61)
	at sbt.Command$$anonfun$applyEffect$2$$anonfun$apply$3.apply(Command.scala:61)
	at sbt.Command$.process(Command.scala:93)
	at sbt.MainLoop$$anonfun$1$$anonfun$apply$1.apply(MainLoop.scala:96)
	at sbt.MainLoop$$anonfun$1$$anonfun$apply$1.apply(MainLoop.scala:96)
	at sbt.State$$anon$1.process(State.scala:184)
	at sbt.MainLoop$$anonfun$1.apply(MainLoop.scala:96)
	at sbt.MainLoop$$anonfun$1.apply(MainLoop.scala:96)
	at sbt.ErrorHandling$.wideConvert(ErrorHandling.scala:17)
	at sbt.MainLoop$.next(MainLoop.scala:96)
	at sbt.MainLoop$.run(MainLoop.scala:89)
	at sbt.MainLoop$$anonfun$runWithNewLog$1.apply(MainLoop.scala:68)
	at sbt.MainLoop$$anonfun$runWithNewLog$1.apply(MainLoop.scala:63)
	at sbt.Using.apply(Using.scala:24)
	at sbt.MainLoop$.runWithNewLog(MainLoop.scala:63)
	at sbt.MainLoop$.runAndClearLast(MainLoop.scala:46)
	at sbt.MainLoop$.runLoggedLoop(MainLoop.scala:30)
	at sbt.MainLoop$.runLogged(MainLoop.scala:22)
	at sbt.StandardMain$.runManaged(Main.scala:57)
	at sbt.xMain.run(Main.scala:29)
	at xsbt.boot.Launch$$anonfun$run$1.apply(Launch.scala:109)
	at xsbt.boot.Launch$.withContextLoader(Launch.scala:128)
	at xsbt.boot.Launch$.run(Launch.scala:109)
	at xsbt.boot.Launch$$anonfun$apply$1.apply(Launch.scala:35)
	at xsbt.boot.Launch$.launch(Launch.scala:117)
	at xsbt.boot.Launch$.apply(Launch.scala:18)
	at xsbt.boot.Boot$.runImpl(Boot.scala:41)
	at xsbt.boot.Boot$.main(Boot.scala:17)
	at xsbt.boot.Boot.main(Boot.scala)
[error] java.lang.NoSuchMethodError: scalaz.Scalaz$.ToValidationV(Ljava/lang/Object;)Lscalaz/syntax/ValidationV;
```
This modification adds the possibility to serialize an `Plantain#Graph` back to jsonld.js

The design of banana-rdf unfortunately does not allow to pass parameters to the serializer, so no further customization of the output can be done.
While working on a jsonld.js feature I recognized that none of the scala.js code was actually beeing tested. There were some mistakes in the way how the jsonld.js resource was beeing loaded (it coudln't be referenced in an node.js environment because you have to specify it commonJSName).
Furthermore dependencies of scala.js crossprojects have to be specified with `"org.organisation" %%% "package" % "0.0"` this cannot not be done in Dependencies.scala.

In general I thought it was time to leverage the build chain, to use the latest sbt version and the plugin-dependencies.

Unfortunatly I coudln't get `unidoc` working at the moment. Further investigation is necessary, what needs to be aggregated and excluded.