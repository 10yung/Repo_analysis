php7.4已发布有一段时间，建议适配跟上
# Bug report
现很多企业采用docker 集群部署微服务，alpine 系统只有几M大小，公司大多采用alpine系统作为docker 基础镜像。当前openrasp部署在alpine上出现不兼容问题，有没有什么解决方法或折中方案？

# Feature Request
What is the plan to include support for .net core: https://github.com/dotnet


提测时间: 待定
发布时间: 待定

### 功能列表

通用改进

- [x] 集成依赖库采集: Java POM 信息、PHP composer.json
- [x] MongoDB Hook 点
- [x] 文件删除 hook 点支持
- [x] 支持 header 注入检测
- [x] 弱口令列表支持远程下发
- [x] 加强配置校验: 当YAML最外层key无法识别时，提示用户
- [x] 增加命令执行语法错误监控，以及可疑的注入检测
- [x] SSRF 增加跳转后检测点
- [x] 补全 SQL 异常检测点（已有 MySQL）
  - [x] PHP: PG SQLite
  - [x] Java: PG SQLite Oracle SQLServer HSQLDB DB2 

Java 版本

- [x] Hibernate SQL hook点支持
- [x] 基线检查: 检查log4j等框架是否输出敏感信息。正则可自定义，默认关闭
- [x] 基线检查: 检查 HTML 响应是否泄漏敏感信息，如银行卡、身份证、手机号
- [x] 增加 nio 检测点

PHP 版本

- [x] SSRF 支持 IPv6 地址解析
- [x] 基线检查: 检测web根目录下是否有压缩包、SQL等敏感文件
- [x] 当后台下发配置不符合预期，上报异常日志

管理后台

- [x] 支持 -s restart / -s stop 方式更新后台
- [x] 支持主机设置备注，以及按照备注搜索
- [x] 支持 agent 版本号枚举和搜索
- [x] 支持日志写 kafka

OpenRasp版本：1.0rc2分支编译的最新代码
测试用例集：OpenRASP 官方测试用例集合（002-file-read.jsp）

构造的payload：`http://localhost:8081/vulns/002-file-read.jsp?file=%3Ciframe%20src%3d%22http%3a%2f%2fwww.baidu.com%22%3E`

结果：payload中的<iframe>成功注入错误回显页面

原因：Response body返回的结果为
`	<p>读取内容</p>
	<pre>java.io.FileNotFoundException: \localhost\vulns\reports\<iframe src="http:\www.baidu.com"> (文件名、目录名或卷标语法不正确。)</pre>`
与payload（`<iframe src="http://www.baidu.com">`）相比缺少了一个“/”。从而绕过了检测逻辑。
Mybatis的Mapper为：
```
    <select id="fetchById" resultMap="person">
        SELECT id, nick_name, age, country
        FROM users
        WHERE id = ${personId}
    </select>
```
参数为
`/demo/personId=123%20AnD%201100=1100%20AnD%201100=1101%20--%20`

排查原因发现Mybatis自动将生成的SQL语句的空格去掉了，导致用户输入不再是SQL语句的一部分，从而绕过了检测逻辑。

打印params.query得到的结果（注意缺少最后一个空格）：
```
SELECT id, nick_name, age, country
FROM users
WHERE id = 123 AnD 1100=1100 AnD 1100=1100 --
```

# Bug report

To help us debug your issue please explain:
- What you were trying to do (and why)
- What happened
- What you expected to happen
- Step-by-step reproduction instructions

And please include the following information:
- Operating system type and architecture
- Application server type and version
  - For Java based web application servers, provide JDK version
- OpenRASP version

# Feature Request

Please replace this section with:
- a detailed description of your proposed feature
- the motivation for the feature
- what alternatives to the feature you have considered


     
####
 **Rasp**  在拦截之后，响应拦截页面的过程的时候，会尝试调用  **getWriter** 或 **getOutputStream** 来重定向拦截页面，当   **getWriter**  和  **getOutputStream**   二者之一被调用，之后用户代码再调用另一个就会抛异常。如果在处理异常的过程中又调用 **getWriter**  或  **getOutputStream** 出现异常，则会出现死循环。

 ``` java
   // 请求发生异常则调用该方法，处理错误
    public handleError(HttpServletResponse response, Exception e) {
        LOGGER.error(e.getMessage());
        response.getWriter().println("error");// 此处因为获取过 Writer 所以又会抛出异常，又会回到该方法
    }
```

日志样例：
```
11:53:26.834 [http-nio-7001-exec-3] WARN  L WARN - Resolved exception caused by Handler execution: java.lang.IllegalStateException: getWriter() has already been called for this response
11:53:26.842 [http-nio-7001-exec-3] WARN  L WARN - Resolved exception caused by Handler execution: java.lang.IllegalStateException: getWriter() has already been called for this response
11:53:26.850 [http-nio-7001-exec-3] WARN  L WARN - Resolved exception caused by Handler execution: java.lang.IllegalStateException: getWriter() has already been called for this response
11:53:26.858 [http-nio-7001-exec-3] WARN  L WARN - Resolved exception caused by Handler execution: java.lang.IllegalStateException: getWriter() has already been called for this response
11:53:26.866 [http-nio-7001-exec-3] WARN  L WARN - Resolved exception caused by Handler execution: java.lang.IllegalStateException: getWriter() has already been called for this response
11:53:26.874 [http-nio-7001-exec-3] WARN  L WARN - Resolved exception caused by Handler execution: java.lang.IllegalStateException: getWriter() has already been called for this response
11:53:26.882 [http-nio-7001-exec-3] WARN  L WARN - Resolved exception caused by Handler execution: java.lang.IllegalStateException: getWriter() has already been called for this response
11:53:26.890 [http-nio-7001-exec-3] WARN  L WARN - Resolved exception caused by Handler execution: java.lang.IllegalStateException: getWriter() has already been called for this response
11:53:26.898 [http-nio-7001-exec-3] WARN  L WARN - Resolved exception caused by Handler execution: java.lang.IllegalStateException: getWriter() has already been called for this response
11:53:26.906 [http-nio-7001-exec-3] WARN  L WARN - Resolved exception caused by Handler execution: java.lang.IllegalStateException: getWriter() has already been called for this response
11:53:26.915 [http-nio-7001-exec-3] WARN  L WARN - Resolved exception caused by Handler execution: java.lang.IllegalStateException: getWriter() has already been called for this response
11:53:26.923 [http-nio-7001-exec-3] WARN  L WARN - Resolved exception caused by Handler execution: java.lang.IllegalStateException: getWriter() has already been called for this response
11:53:26.932 [http-nio-7001-exec-3] WARN  L WARN - Resolved exception caused by Handler execution: java.lang.IllegalStateException: getWriter() has already been called for this response
11:53:26.940 [http-nio-7001-exec-3] WARN  L WARN - Resolved exception caused by Handler execution: java.lang.IllegalStateException: getWriter() has already been called for this response
11:53:26.949 [http-nio-7001-exec-3] WARN  L WARN - Resolved exception caused by Handler execution: java.lang.IllegalStateException: getWriter() has already been called for this response
11:53:26.957 [http-nio-7001-exec-3] WARN  L WARN - Resolved exception caused by Handler execution: java.lang.IllegalStateException: getWriter() has already been called for this response
11:53:26.965 [http-nio-7001-exec-3] WARN  L WARN - Resolved exception caused by Handler execution: java.lang.IllegalStateException: getWriter() has already been called for this response
11:53:26.974 [http-nio-7001-exec-3] WARN  L WARN - Resolved exception caused by Handler execution: java.lang.IllegalStateException: getWriter() has already been called for this response
11:53:26.983 [http-nio-7001-exec-3] WARN  L WARN - Resolved exception caused by Handler execution: java.lang.IllegalStateException: getWriter() has already been called for this response
11:53:26.991 [http-nio-7001-exec-3] WARN  L WARN - Resolved exception caused by Handler execution: java.lang.IllegalStateException: getWriter() has already been called for this response
11:53:27.000 [http-nio-7001-exec-3] WARN  L WARN - Resolved exception caused by Handler execution: java.lang.IllegalStateException: getWriter() has already been called for this response
11:53:27.009 [http-nio-7001-exec-3] WARN  L WARN - Resolved exception caused by Handler execution: java.lang.IllegalStateException: getWriter() has already been called for this response
11:53:27.018 [http-nio-7001-exec-3] WARN  L WARN - Resolved exception caused by Handler execution: java.lang.IllegalStateException: getWriter() has already been called for this response
11:53:27.027 [http-nio-7001-exec-3] WARN  L WARN - Resolved exception caused by Handler execution: java.lang.IllegalStateException: getWriter() has already been called for this response
11:53:27.035 [http-nio-7001-exec-3] WARN  L WARN - Resolved exception caused by Handler execution: java.lang.IllegalStateException: getWriter() has already been called for this response
11:53:27.044 [http-nio-7001-exec-3] WARN  L WARN - Resolved exception caused by Handler execution: java.lang.IllegalStateException: getWriter() has already been called for this response
```

修复方案：
 ``` java
   // 请求发生异常则调用该方法，处理错误
    public handleError(HttpServletResponse response, Exception e) {
        try {
            LOGGER.error(e.getMessage());
            response.getWriter().println("error");// 此处因为获取过 Writer 所以又会抛出异常，又会回到该方法
        } catch(Exception e) {
            LOGGER.error(e.getMessage());
            // to do some thing
        } 
    }
```
log4j 默认写日志不带日期，只有在需要 rotate 的时候，才会产生一个有日期的历史日志。Java 下面大多日志框架都是这样的，比如 tomcat 的 logs。

不过这样确实容易产生误解，可以考虑下其他日志框架。
It would be great to have support for the Node.js ecosystem so express, koa, Node.js core and more should be supported (and also Apache, Nginx, Caddy server, IIS, ...).

How can we help here with the implementation?