[info] SecureCopyTest:
[info] SecureCopyTest *** ABORTED ***
[info]   java.lang.NoSuchMethodError: net.schmizz.sshj.xfer.LoggingTransferListener: method <init>()V not found
[info]   at com.decodified.scalassh.ScpTransferable.defaultListener(ScpTransferable.scala:52)
[info]   at com.decodified.scalassh.ScpTransferable.upload$default$3(ScpTransferable.scala:46)
[info]   at net.uptel.sim.scp.services.ScpService.$anonfun$uploadFile$1(ScpService.scala:34)
[info]   at scala.runtime.java8.JFunction0$mcV$sp.apply(JFunction0$mcV$sp.scala:18)
[info]   at cats.effect.internals.IORunLoop$.step(IORunLoop.scala:185)
[info]   at cats.effect.IO.unsafeRunTimed(IO.scala:320)
[info]   at cats.effect.IO.unsafeRunSync(IO.scala:239)
[info]   at net.uptel.sim.scp.services.ScpService.$anonfun$uploadFiles$1(ScpService.scala:51)
[info]   at cats.effect.internals.IORunLoop$.liftedTree1$1(IORunLoop.scala:95)
[info]   at cats.effect.internals.IORunLoop$.cats$effect$internals$IORunLoop$$loop(IORunLoop.scala:95)
[info]   ...

This PR changes how commands are logged and its completely opt-in, defaulting to the normal behaviour promiscuous logging.  It also adds the actual exception message to the log for easier debugging.  I'm completely open to suggestions.  

I've got two virtually identical scripts that I'm running on a remote server, both of which succeed and complete on the remote server, but one of which hangs (that is, its `scala-ssh` session only terminates after command timeout).  I'm executing them via this scala code:
```scala
def remoteRequest(req: SlackRequest): Either[Throwable, SlackResponse] = for {
    server <- findServer(req)
    studyOpt <- findStudy(req, server.id)
    commandInput <- getCommandInput(req)
    commandResult <- {
      val domain = studyOpt.map(_.domain).getOrElse("")
      SSH(server.host, HostResourceConfig()) {
        client =>
          for {
            result <- {
              val command = Command(s"bash -s -- $domain ${req.args.mkString(" ")}", commandInput)
              client.exec(command)
            }
          } yield result
      }.toEither
    }
    response <- processRemoteResult(req, commandResult)
  } yield response
```
Here's the host resource config:
```
# scala-ssh host config file
login-type = password
username = exxxxxxxxxxr
password = blahblahblah
fingerprint = any
command-timeout = 30000
```
I've attached two scripts, along with their logs. The `lock_user.sh.txt` script runs successfully on the remote server and `scala-ssh` returns normally after the command finishes. The `unlock_user.sh.txt` script also runs successfully on the remote server but `scala-ssh` hangs and only terminates when the command timeout is triggered. I've verified the unlock script succeeds, both by running it manually via the command line and because the db update succeeds.

[lock_user.sh.txt](https://github.com/sirthias/scala-ssh/files/2217413/lock_user.sh.txt)
[lock-ok.log](https://github.com/sirthias/scala-ssh/files/2217414/lock-ok.log)
[unlock_user.sh.txt](https://github.com/sirthias/scala-ssh/files/2217415/unlock_user.sh.txt)
[unlock-fail.log](https://github.com/sirthias/scala-ssh/files/2217416/unlock-fail.log)

Can anyone explain what's going on here? I can't tell what's different between these two cases. I've also changed the order of their execution, to no avail (that is, same result...lock always succeeds, unlock always hangs until timeout). I've got other scripts, some of which work and some of which hang even though all succeed in executing and terminating normally on the remote server, so I don't think this has anything to do with the scripts themselves.

Thanks for any insights.

so the regular `test` command doesn't run them and is properly green.
Hello, if I execute "cat > /tmp/foo.txt" with the command input "a a a a". The command hang forever and never return.

How do you signal the EOT/EOF aka Control-D?
the lazy vals(exitCode,exitErrorMessage, i/o streams etc.) gives null instead of Option for the channel as result of a remote command causes "Segmentation fault" or "Floating point exception" where the exception stored in exitSignal
it's easy to reproduce, just compile following c code and run it's binary with exec and then access the exitCode, it throws java.lang.NullPointerException

int main(int argc, char *argv[]){
int x;
x = 100/0;
}

Default key locations specified in SshLogin.scala are ~/.ssh/id_rsa, ~/.ssh/id_dsa but the tilde is a shell specific expansion and not applied, resulting in the following exception when using the default key locations:

```
java.lang.RuntimeException: None of the configured keyfiles exists: ~/.ssh/id_rsa, ~/.ssh/id_dsa 
```

Replacing the tilde with System.getProperty("user.home") would be better.

I can't login to remote server using public key.
Mac 10.10.1, jdk 8

```
java.lang.SecurityException: class "org.bouncycastle.openssl.PEMParser"'s signer information does not match signer information of other classes in the same package
```

[Code example, build.sbt and etc can be found here](https://gist.github.com/Tolsi/980cc71fdbf53d4657dd)

How can I connect to a host by means of an HTTP proxy?
