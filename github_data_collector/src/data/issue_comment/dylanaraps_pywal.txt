I have a script in .config/wal/templates/ folder that has the executable flag.  
The output file generated by pywal does not preserve this flag and is not executable anymore and I have to chmod it manually.
Is it possible to copy the permission from the user template to the output file?
Greetings!

Is there any possibility that the vim theme could be modified so that `set termguicolors` could be used?

It is required by many themes for truecolor support, so removing it ends up breaking other themes that one may switch to using something like [vim-colorscheme-switcher](https://github.com/xolox/vim-colorscheme-switcher).
I've added some basic functionality to call functions from templates:
```
{color0}
{color0.rgb}
{color0.lighten(10%)}
{color0.darken(10%).rgba}
```
I'm not very familiar with github's pull request system, let me know if I need to do something differently.
I have my ultra-wide wallpapers under a directory named "21:9". It works fine because it's a legal name.

But pywal breaks when parsing it:

![screenshot](https://user-images.githubusercontent.com/456311/69911690-04780800-1417-11ea-86ab-ce14e159eac9.png)

Also when quoted:

![screenshot_2](https://user-images.githubusercontent.com/456311/69911707-46a14980-1417-11ea-8716-6d27711a5c25.png)

Without the "colon" it works:

![screenshot_1](https://user-images.githubusercontent.com/456311/69911694-0d68d980-1417-11ea-9732-fd100558f9bd.png)

[Customization's ](https://github.com/dylanaraps/pywal/wiki/Customization) first link to the wal-set doesn't lead anywhere.
When pywal loads the wallpaper based on an image, the image is stretched. But Tweaks cant seem to adjust the wallpaper settings. Setting it to "zoom" or "centered" doesn't change the image at all despite having an image that is the same resolution as my screen. # #
I've been noticing a difference in the background colours between termite and st. This happens when using the default `colors-wal-st.h` as well as with a custom template in which "colour0" is actually set to `{colour0}` rather than the default `{background}`, and when the following is set thus

```
unsigned int defaultbg = 256
/* [rather than] unsigned int defaultbg = 0 */
``` 

Another thing I've observed is that this happens when "colour0" differs from the specified "background" colour, wherein termite gets the correct background colour while st gets `color0` as the background. In this case, termite has the correct background that is `#000000` while st has a background `#0a1124` (which is `color0`)

## Screenshots 
(apologies if the screenshots are too large)
 
st
![pywal-background-disparity_st](https://user-images.githubusercontent.com/32803930/68479719-048e4900-0259-11ea-99aa-f0b705d95ec0.png)

termite
![pywal-background-disparity_termite](https://user-images.githubusercontent.com/32803930/68479720-048e4900-0259-11ea-9c1a-5cb6daf06dc9.png)
   
I use ccmake to toggle cmake options for my company's software. With pywal the cursor is invisible and I cannot tell which line I am editing easily without the aid of the text description for each option at the bottom. 
Sample image that triggers the error: [https://i.imgur.com/1gKSbJ0.png](https://i.imgur.com/1gKSbJ0.png)

```
[I] image: Using image Untitled.png.
[I] colors: Generating a colorscheme.
[I] colors: Using haishoku backend.
Traceback (most recent call last):
  File "/usr/bin/wal", line 11, in <module>
    load_entry_point('pywal==3.3.0', 'console_scripts', 'wal')()
  File "/usr/lib/python3.7/site-packages/pywal/__main__.py", line 208, in main
    parse_args(parser)
  File "/usr/lib/python3.7/site-packages/pywal/__main__.py", line 164, in parse_args
    sat=args.saturate)
  File "/usr/lib/python3.7/site-packages/pywal/colors.py", line 144, in get
    colors = getattr(backend, "get")(img, light)
  File "/usr/lib/python3.7/site-packages/pywal/backends/haishoku.py", line 37, in get
    return adjust(cols, light)
  File "/usr/lib/python3.7/site-packages/pywal/backends/haishoku.py", line 31, in adjust
    return colors.generic_adjust(raw_colors, light)
  File "/usr/lib/python3.7/site-packages/pywal/colors.py", line 71, in generic_adjust
    colors[15] = colors[7]
IndexError: list assignment index out of range
```
I have a shortcut in i3 to refresh i3 and reload wal with a random theme. Sometimes I'll land on a theme I *really* like and might just want to stick to that one for a while, but I have no idea how to find out what's the name of a theme.

To have a command like `wal --current` output the name of the current theme would be nice.