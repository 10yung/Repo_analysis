After extensive testing, there should be no need to mess with the transfer encoding or the body encoding. All we need to ensure is that the proper charset is configured in the `Content-Type` header when assigning the body, which needs to be the encoding of the string being set as the body.

Fixes #240
By default, `premailer` replaces HTML entites (See https://github.com/premailer/premailer/pull/181). This can sometimes change a message body's encoding. For example, `&mdash;` is changed to `â€”` and is no longer valid for `7bit` transfer encoding.

The problem is `premailer-rails` forces encoding and transfer-encoding to be that of the old body.

I think we should just remove lines 76 and 79 from https://github.com/fphilipe/premailer-rails/blob/master/lib/premailer/rails/hook.rb

This makes `Mail::Part` detect the right encoding and transfer encoding to use.

Note: I saw this https://github.com/fphilipe/premailer-rails/pull/166 and I think the problem before was that we were setting transfer-encoding but not the encoding causing text to be mangled. If we remove both, I think it should work fine.

Also, in our case, since we don't want `premailer` to replace HTML entities, we pass the `output_encoding: 'US-ASCII'` option as described here: https://github.com/premailer/premailer/wiki/Premailer-Parameters-and-Options

This turns non-ASCII characters in the original body to HTML-encoded ones (`&#xxxx;`). The resulting body is now valid for `7bit` transfer encoding but `premailer-rails` forces this to be `quoted-printable` (the transfer encoding of the old body).

Removing the setting of encoding and transfer-encoding would fix both cases where the transformed body needs a more complex or simpler transfer encoding.

Here's the issue on our issue tracker for reference: https://gitlab.com/gitlab-org/gitlab-ce/issues/55964
Hello!

I'm using Webpacker on a new Rails project and I would like to use Premailer on my outbound emails.

Is there any current plan to support Webpacker? Would you be open to PR's with a webpack strategy?
Currently there are directory traversal issues in the AssetPipelineLoader and FileSystemLoader. Premailer-rails will attempt to inline CSS from any local file. This will only inline portions that are close enough to CSS to be returned, but these strategies likely don't need to load files outside of predetermined paths.
Ex.

`<link rel="stylesheet" type="text/css" href="/assets/../../../../../../../../../../etc/passwd">`

It seems that the AssetPipelineLoader could be restricted to valid asset paths for the application, and the FileSystemLoader could be restricted to paths under /public.