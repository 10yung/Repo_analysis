**Describe the bug**
A clear and concise description of what the bug is.
  when i get image and set to image view its showing square with white shadows
![Screenshot 2020-01-02 at 5 56 37 PM](https://user-images.githubusercontent.com/35626099/71668046-420ae080-2d89-11ea-8df5-5f5c6278aac3.png)

**To Reproduce**
Steps to reproduce the behavior:
1. Go to '...'
2. Click on '....'
3. Scroll down to '....'
4. See error

**Expected behavior**
A clear and concise description of what you expected to happen.

**Screenshots**
If applicable, add screenshots to help explain your problem.

**iOS Device:**
 - Device: [e.g. iPhone6]
 - OS: [e.g. iOS8.1]
 - Library Version [e.g. 22]

**Additional context**
Add any other context about the problem here.

**Describe the bug**
When I take a photo while holding my Iphone in the Portrait position, the photo taken appears in landscape i.e the photo appears rotated to the left by 90 degrees and I have to manually rotate.

**To Reproduce**
Steps to reproduce the behavior:
1. Hold Iphone in portrait
2. Take photo 
3. Photo appears in landscape mode rotated to right 90deg

**Expected behavior**
Photo taken in Portrait to appear in Portrait in the Crop viewer

**Screenshots**
Photo taken using the device camera to appear in portrait mode, when holding the device in portait
![image](https://user-images.githubusercontent.com/23292121/71289630-78963380-2365-11ea-94d0-cf09350b0930.png)


**iOS Device:**
 - Iphone 7 and Iphone x
 - OS 13.2.2
 - Library Version 2.5.2

Code below. I have a extension method to fix the rotation below, but I'd rather not have to use that as it's more of a workaround to an issue

[assembly: ExportRenderer(typeof(CropView), typeof(CropViewRenderer))]

    public class CropViewRenderer : PageRenderer
    {
        private CropViewDelegate _selector;
        private Stream _image;
        private bool _isShown;
        private Action<byte[]> _callback;

        public override void ViewDidLoad()
        {
            base.ViewDidLoad();

            var page = (CropView)Element;
            _image = page.OriginalImage;
            _callback = page.NavigationCallback;
        }

        public override void ViewDidAppear(bool animated)
        {
            base.ViewDidAppear(animated);

            try
            {
                if (!_isShown)
                {

                    _isShown = true;

                    var image = new UIImage(NSData.FromStream(_image));
                    //var img = image.FixRotate();
                    _image = null;

                    _selector = new CropViewDelegate(this, _callback);
                    var picker = new TOCropViewController(image)
                    {
                        Delegate = _selector
                    };

                    PresentViewController(picker, false, null);
                }
            }
            catch (Exception ex)
            {
                Debug.WriteLine(ex.Message);
            }
        }
    }


    public class CropViewDelegate : TOCropViewControllerDelegate
    {
        private readonly UIViewController _parent;
        private readonly Action<byte[]> _callback;

        public CropViewDelegate(UIViewController parent, Action<byte[]> callback)
        {
            _parent = parent;
            _callback = callback;
        }

        public override void DidCropToImage(TOCropViewController cropViewController, UIImage image, CoreGraphics.CGRect cropRect, nint angle)
        {
            try
            {
                if (image != null)
                {
                    var bytes = image.AsJPEG().ToArray();
                    _callback(bytes);
                }
            }
            catch (Exception ex)
            {
                Debug.WriteLine(ex.Message);
            }
            finally
            {
                image?.Dispose();
            }

            _parent.DismissViewController(true, async () =>
            {
                await Xamarin.Forms.Application.Current.MainPage.Navigation.PopAsync().ConfigureAwait(true);
            });
        }

        public override void DidFinishCancelled(TOCropViewController cropViewController, bool cancelled)
        {
            _parent.DismissViewController(true, async () =>
            {
                await Xamarin.Forms.Application.Current.MainPage.Navigation.PopAsync().ConfigureAwait(true);
            });
        }
    }

    public static class UiImageHelper
    {
        public static UIImage FixRotate(this UIImage image)
        {
            return new UIImage(image.CGImage, 1.0f, UIImageOrientation.Right);
        }
    }


**Describe the bug**
A clear and concise description of what the bug is.

**To Reproduce**
Steps to reproduce the behavior:
https://drive.google.com/file/d/1xFZV2b8zgefBuaYw64lLlW4hy9UHp7NG/view?usp=sharing

**Expected behavior**
Should be able to dismiss the animated/gif preview

**Screenshots**
https://drive.google.com/file/d/1xFZV2b8zgefBuaYw64lLlW4hy9UHp7NG/view?usp=sharing


**iOS Device:**
 - Device: [iPhone 7]
 - OS: [iOS 13.1.2]
 - Library Version [2.5.2]

**Is your feature request related to a problem? Please describe.**
This future request relates to Mac OS Catalyst introduction during this WWDC19.

**Describe the solution you'd like**
Fully support to Mac OS Catalyst

**Describe alternatives you've considered**
-
**Additional context**
-
After crop when I click on Done button then all screen is going blue
Hi @TimOliver !
I've found a working solution for the SPM,
but I thing that we need to discuss about some modifications in your code.

This is your Swift example App moved to SPM: [TOCropViewControllerSPMExample](https://github.com/DualBit/TOCropViewControllerSPMExample)
Hello,

May i know how to disable the cropview moving, i would like to fixed the crop view, user will NOT move it, only zoom in/out and rotate the image then crop?

Thanks for your help.
**Describe the bug**
I have implemented the CropViewController in my project (its a React Native Project, for what its worth) and I've recently been getting crash reports that I haven't been able to replicate or understand the source of.

SIGABRT
DRHT > Fatal error: Attempted to read an unowned reference but the object was already deallocated
```
- partial apply for closure #3 in CropViewController.setUpDelegateHandlers()
- @callee_guaranteed <compiler-generated>
- __40-[TOCropViewController doneButtonTapped]_block_invoke.439 CropViewController/Objective-C/TOCropViewController/TOCropViewController.m:1004
```

**To Reproduce**
Im not sure how to reproduce this crash.

**iOS Device:**
 - Device: iPhone 12,3 (iPhone 11 Pro?)
 - OS: 13.0
 - Library Version: CropViewController (2.5.1)

**Additional context**
Let me know if there's anything else I can provide to help understand the issue a little more.
Thanks!

Hi, I'm using your framework in my app, it's cool, but I found some small issues.

Steps:
1. Present cropViewController with aspectRatioLockDimensionSwapEnabled = true.
2. Crop the image.
3. Set aspect ratio to square.
4. Rotate.

While rotating, the image can change the selection area and can make space between the border and the image. Is that supposed to be?

![Crop](https://user-images.githubusercontent.com/43921200/65043470-55429d80-d99e-11e9-8cfa-dd0d0833f80b.gif)

Hi, I'm using your framework in my app, it's cool, but I found some small issues: I present cropViewController with image with size (width: 1200.0, height: 1600.0) then press "Done" button without any changes(or crop and restore without dismissing the controller) and I get image with size (width: 1200.0, height: 1599.0) in the didCropToImage method. The same size is in the cropRect.