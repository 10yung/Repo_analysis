running the generate spec command, I get

```bash
C:\dev\ipywidgets [datetime ↑1]> python ./packages/schema/generate-spec.py -f json-pretty > packages/schema/jupyterwidgetmodels.latest.json
Traceback (most recent call last):
  File "./packages/schema/generate-spec.py", line 208, in <module>
    indent=2, separators=(',', ': ')))
  File "C:\Miniconda3\lib\json\__init__.py", line 238, in dumps
    **kw).encode(obj)
  File "C:\Miniconda3\lib\json\encoder.py", line 201, in encode
    chunks = list(chunks)
  File "C:\Miniconda3\lib\json\encoder.py", line 429, in _iterencode
    yield from _iterencode_list(o, _current_indent_level)
  File "C:\Miniconda3\lib\json\encoder.py", line 325, in _iterencode_list
    yield from chunks
  File "C:\Miniconda3\lib\json\encoder.py", line 405, in _iterencode_dict
    yield from chunks
  File "C:\Miniconda3\lib\json\encoder.py", line 325, in _iterencode_list
    yield from chunks
  File "C:\Miniconda3\lib\json\encoder.py", line 405, in _iterencode_dict
    yield from chunks
  File "C:\Miniconda3\lib\json\encoder.py", line 438, in _iterencode
    o = _default(o)
  File "C:\Miniconda3\lib\json\encoder.py", line 179, in default
    raise TypeError(f'Object of type {o.__class__.__name__} '
TypeError: Object of type Sentinel is not JSON serializable
```
Tim Paine's "jupyterlab-templates" front-end extension provides a means to access notebooks installed with libraries in a read-only fashion.

Such notebooks should be installed in `PREFIX/share/jupyter/notebook_templates/LIBRARY_NAME` and are picked up by the extension. See e.g. https://github.com/timkpaine/jupyterlab_templates/blob/2660b5f1533d20e59786304dc59dccebf3938882/README.md#templates-for-libraries. 

I propose that starting with `ipywidgets 8.0`, we install all the documentation notebooks in the `share/jupyter` directory. The `notebook_templates` name could also be called `example_notebooks`. As soon as we elect such a path to be the official example notebooks directory, we should do this for other packages as well.

**Note:** there would be a constraint for such notebooks is that they do not depend on other resources that are local to the notebook path, because they would be open in the current working directory of the notebook user, or we specify in the notebook metadata what ought to be copied alongside the notebooks...
Hi,

Firstly, widgets are amazing.

Now, I'm trying to create an interactive plotting function with a signature like `interactively_plot(data, plotfunc, **kwargs)`. To do that I want to pass the function I want to `interact` with some arguments, which `interact` is to ignore, e.g.

```python
def plotfunc(data, **kwargs):
    return data.plot()

def interactively_plot(data, plotfunc, **kwargs):
    wrapped = functools.partial(plotfunc, data=data)
    return interact(wrapped, **kwargs)
```

**However**, `functools.partial` doesn't behave as expected in this context: `interact` is still demanding that `data` be treated as a widget.

Here's a minimum example that demonstrates my problem

```python
from ipywidgets import interact
from functools import partial, update_wrapper

# This is to avoid the error
# AttributeError: 'functools.partial' object has no attribute '__name__'
def wrapped_partial(func, *args, **kwargs):
    partial_func = partial(func, *args, **kwargs)
    update_wrapper(partial_func, func)
    return partial_func

def g(dat, x):
    print("dat={dat} from inside g")
    return dat

g_plus_dat = wrapped_partial(g, dat='a')

interact(g_plus_dat, x=10)

```
which raises
```
Traceback (most recent call last):
  File "/home/tegn500/Documents/Work/Code/experimentation/xwidget/mwe_partial.py", line 17, in <module>
    interact(g_plus_dat, x=10)
  File "/home/tegn500/anaconda3/lib/python3.7/site-packages/ipywidgets/widgets/interaction.py", line 528, in __call__
    w = self.widget(f)
  File "/home/tegn500/anaconda3/lib/python3.7/site-packages/ipywidgets/widgets/interaction.py", line 444, in widget
    return self.cls(f, self.opts, **self.kwargs)
  File "/home/tegn500/anaconda3/lib/python3.7/site-packages/ipywidgets/widgets/interaction.py", line 188, in __init__
    new_kwargs = self.find_abbreviations(kwargs)
  File "/home/tegn500/anaconda3/lib/python3.7/site-packages/ipywidgets/widgets/interaction.py", line 288, in find_abbreviations
    raise ValueError('cannot find widget or abbreviation for argument: {!r}'.format(name))
ValueError: cannot find widget or abbreviation for argument: 'dat'
```
I don't understand how what I've done is different from the use of `functools.partial` in [this answer](https://stackoverflow.com/a/45473481/3154101).

I could possibly get around this by [using closures](https://stackoverflow.com/a/45473481/3154101), but I really would rather not. I would also eventually like to do something [similar but with methods](https://stackoverflow.com/questions/56567251/telling-ipython-interact-widget-to-ignore-self-argument-in-oop).
Passing click coordinates to the backend. For now, just for `Button`s.
For some reason, when I create a tab with identical VBox contents, the second tab's graph object becomes shorter (truncated). The logical expectation is they should have the same width. Here is a sample code to create such "bug".

```
from ipywidgets import *
import plotly
import plotly.graph_objects as py 
fig = py.FigureWidget(layout = plotly.graph_objs.Layout(title = ""))
box = widgets.VBox([fig])
tab_contents = ['1', '2']
children = [box, box]
tab = widgets.Tab(children = children)
for i, j in enumerate(tab_contents):
    tab.set_title(i, j)
display(tab)
```
I suspect this has something to do with Figure widget from plotly. As I have tried other standard widgets and it displays without problem.  How do I fix such issue?
I am currently making a multiple choice quiz in Jupyter Notebook using radio buttons for the answers from the latest release of ipywidgets. The quiz renders LaTeX as expected on the first render (when the code block is first run). However upon subsequent renders the LaTeX in the answers does not render appropriately while the question (Label widget) renders LaTeX just fine. 

In order to get the LaTeX in the answers to render I either have to restart the kernel and restart the web page and run the code block again or (and interestingly) hit the run button (ctrl + enter) of the code block twice very fast to get the LaTeX to properly load.

Additionally, when I click on any of the radio button options the LaTeX of the answer options is converted back into plain text no matter which way I get the LaTeX to previously render.

Any help on resolving this issue would be much appreciated! Thank you!
This is a PR made with help from @jasongrout to allow for deferred init for widgets when e.g. dynamically loaded into JLab using https://github.com/wolfv/jupyterlab-dynext
The previous "Custom Widget" has now been removed from the documentation (see https://github.com/jupyter-widgets/ipywidgets/pull/2677), as it was using patterns specific to the classic notebook.

As mentioned in [this comment](https://github.com/jupyter-widgets/ipywidgets/pull/2677#issue-360008156), we could instead have a tutorial based on the [TypeScript tutorial](https://github.com/jupyter-widgets/widget-ts-cookiecutter), similar to the [Let’s Make an Astronomy Picture of the Day JupyterLab Extension](https://jupyterlab.readthedocs.io/en/stable/developer/extension_tutorial.html).
Adding `background-color` to ToggleButton, Checkbox& Valid.
Adding `font-family`, `font-size`, `font-style`, `font-variant`, `font-variant`, `text-color`, `text-decoration` to ToggleButton.
Adding `background-color`, `color`, `font-size` to labels and all text inputs.
Adding `font-family`,  `font-style`, `font-variant`, `text-color`, `text-decoration` to labels.