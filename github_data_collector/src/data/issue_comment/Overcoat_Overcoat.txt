Hi,

The latest version in Cocoapods spec repo is 3.2.1. Can someone please do me a favour and push the 3.2.2 spec?

Have tried using `:git => 'https://github.com/Overcoat/Overcoat.git', :tag => '3.2.2'` but it fails due to validation errors.

Cheers,
Gareth.
## Getting build issue
Hello @Overcoat, I’m using **Overcoat v3.2.1** using **CocoaPods**. Overcoat is using **Mantle v2.1.0** and **AFNetworking v2.6.3**. But Pod is **unable to build** Overcoat because of some errors saying
`Include of non-modular header inside framework module 'Overcoat.OVCResponse’`
`Include of non-modular header inside framework module 'Overcoat.OVCModelResponseSerializer’`.

I have created an issue on **Mantle** library with issue https://github.com/Mantle/Mantle/issues/810 and **AFNetworking** library with issue https://github.com/AFNetworking/AFNetworking/issues/4070

## I tried changing these settings in my main project:
- **Define Module** to **Yes/No**.
- **Allow Non-modular Included in Framework Modules** to **Yes/No**.
- **Enable Modules (C and Objective-C)** to **Yes/No**.
but no luck till now

I tried **deleting project.xcworkspace file, Pods directory and Podfile.lock** and then run `pod install` again with updated module settings but no luck.

## Development Configuration
- I’m using **Xcode 9.0** and **CocoaPods 1.3.1**

Could you please let me know what might be the cause of issue or I'm doing something wrong?

## Here are the screenshots I captured for you for better understanding of issue.

![mantleerror](https://user-images.githubusercontent.com/5563481/30915895-b484279e-a3b5-11e7-93ba-82661d50cdc8.png)
![afnetworkingerror](https://user-images.githubusercontent.com/5563481/30915896-b5062f3c-a3b5-11e7-8640-fe1b904a4278.png)
![screen shot 2017-09-27 at 6 21 00 pm](https://user-images.githubusercontent.com/5563481/30915899-b6b9be98-a3b5-11e7-9056-8079df11b7d7.png)

Is there any pagination ability in `Overcoat` to handle cases like

```json
"root_model": {
    "count": 999,
    "models": [ /* . . . */ ],
    "next": "https://example.com/models?page=2",
    "previous": null,
}
```

I think a lot of the recent Xcode 8 Overcoat build pains  ( see the heroic efforts of @Iyuna with #144 )  come from the fact that Overcoat adds nested dependencies to (potentially) unwanted frameworks -- each dependency adds its own build environment requirements, complexity, and just as importantly -- more build time.

I imagine some people don't necessarily _want_ Reactive Cocoa or Promise Kit linking into their projects.  Others are only interested in Reactive Cocoa -- not Promise Kit, and some will want the reverse.  But in general, adding the dependencies to the core Overcoat project seems add additional frustration for anyone that wants to consume Overcoat in it's purest form -- as a convenience framework for object-mapping AFNetworking responses with Mantle.

I'm not exactly clear on the best way to implement a more modular Overcoat framework in the modern era of package management (CocoaPods, Carthage, eventually Swift PM).  Ideally, whatever solution is one that more easily allows someone to opt-in to the accessories and their nested dependencies, but I think it's an important effort worthy of some time investment.

Maybe the answer is really to have separate GitHub repositories (and thus separate frameworks) for each optional accessory?
- Overcoat+PromiseKit
- Overcoat+ReactiveCocoa
- Overcoat+ThenKit  --- Maybe @rodrigo-lima ? 

Thoughts from the community or @sodastsai ?  Do you think splitting things up will add more hassle than it's worth?

I just updated to the latest, I'm in Objective-C, and used cocoa pods: pod 'Overcoat+PromiseKit', '4.0.0-beta.2'

Changed the GET to pmk_GET, but get warnings go "Property 'then' cannot be in forward class object 'AnyPromise'

@sodastsai it would be great if you can provide examples in Swift for this great library. I would highly appreciate it. Thanks in advance!

For instance, I was trying to convert this:

`- (AnyPromise *)fetchTeamUsers {

```
return [self GET:@"quickref/scoutlist" parameters:nil].then(^(OVCResponse *response) {
    return response.result;

}).catch(^(NSError *error) {
    return [HTOTeamUserModel fetchCache];
});
```

}`

into Swift but I'm so new to it that I'm lost :(

e.g. There's an endpoint `/api/items` that redirects to `/newapi/item-list`. 

`modelClassesByResourcePath` in the `OVCHTTPSessionManager` subclass returns `@{ @"/api/items" : [ItemModel class] }`. 

This results in `response.result` containing raw JSON, because Overcoat uses `HTTPResponse.URL` for matching, and since the original request's been redirected to a new URL, there's no match. 

Not sure if a bug, but it would be awesome if it was possible to use the original request URL for matching.  

The min target of 'Overcoat+PromiseKit's dependencies are 7.0.why 'Overcoat+PromiseKit' deployment_target = '8.0' 

I'm trying to send UIImage in base64 NSString but final response catch up by Charles contains "\" before every "/". I can't find any solution, can you help me with this? Is something that i missed or I'm just that stupid?
"stringByReplacingOccurrencesOfString" is way too (I know..), but where to get that string right before sending to replace "\" by ""?

I'm looking for a best practice on using this framework when inserting large numbers of entities with possible duplicate entries.

My model is essentially like this:

```
Invoices
    -> Customer
    ->> InvoiceItems
        -> Product
```

A given Customer may be in multiple Invoices and a given Product may be multiple InvoiceItem objects.

My data set roughly comes out to 10,000 Invoices and 60,000 InvoiceItems.  It appears that entity iterations perform a fetch for each object to determine whether we need to insert or update an object, which I think is the bulk of my performance issues.

Anyway, I'm curious what others have done to increase their performance or if there is a best practice to follow.

Thanks,
