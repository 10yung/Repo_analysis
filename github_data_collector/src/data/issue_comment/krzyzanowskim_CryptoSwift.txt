Hi,
I bumped into some issues while upgrading from swift 3 to swift 4.
On swift 3 I was using version 0.7.0 and all works well.

What I did was I went on some trials from version 0.7.1 , 0.7.2, 0.8.0-0.15.0 and the result was :

On version 0.7.1 and 0.7.2 , AES successfully generated but failed with EXC_EXCEPTION when trying to encrypt the value
```swift
try chiper.encrypt(Array(text.utf8))
```

While on version greater than 0.7 the result was a failure to generate AES with a result of nil value.

Here are some snap of the related codes :

```swift
static private func generateKey(salt: String, text: String, keyLength: Int? = 128, iterations: Int = 1000) throws -> [UInt8] {
        let utf8Text = Array(text.utf8)
        let hexSalt = salt.hexaBytes
        let generator = try PKCS5.PBKDF2(password: utf8Text,salt: hexSalt,iterations: iterations,keyLength: keyLength,variant: HMAC.Variant.sha1)
        return try generator.calculate()
    }
```

```swift
init?(salt: String, iv: String, password: String, keyLength: Int? = 128, iterations: Int = 1000) {    
        self.password = password
        do {
            let chiperKey = try Chiper.generateKey(salt: salt,password: password,keyLength: keyLength,iterations: iterations)            
            let blockMode = CBC(iv: iv.hexaBytes)            
            self.chiper = try AES(key: chiperKey, blockMode: blockMode)            
        } catch {
            return nil
        }
    }
```

Any suggestions?
Fixes #788

Checklist:
- [x] Correct file headers (see CONTRIBUTING.md).
- [x] Formatted with [SwiftFormat](https://github.com/nicklockwood/SwiftFormat).
- [x] Tests added.

Changes proposed in this pull request:
- Implementation of OCB mode (RFC7253)

**Describe the bug**
Cannot convert value of type 'UnsafeRawPointer?' to expected argument type 'Array<UInt8>?'

**Reproduce**
Steps to reproduce the behavior:
1. pod update
Pull latest version of the code 1.3.0
Also tried version 1.0.0 and version 0.15.0
I was trying to figure out whether this was an issue related to compiling with Swift 4.2 so I tried prior versions.
2.  Compile application for 'macCatalyst' target, or iPhone target, or iPad target.  Same result any way  with any code base version and any target.
Compile error is happening on line 19 of String+Extension.swift
3.  A second compiler error is also occurring on line 71 of the same file:
Value of type '[UInt8]' has no member 'toBase64'
4.  If I was at my day job, I would tend to think that one of our developers forgot to check in a file.
5.  There was another issue, that may or may not be related.  After updating to the latest version the compiler complained that a file was not available called 'RandomBytesSequence.swift'.
This file does not exist so I cannot confirm if this is related by viewing the source because nothing opens when I click on it, so I disassociated it with the target and attempted the build.

**Describe the bug**
I'm try to decrypt string with "AES/CTR/NoPadding"

**Reproduce**
   ```
func aesDecrypt(key: String, iv: String) throws -> String {
            let ctr = CTR(iv: Array(iv.utf8))
            let decrypt = try! AES(key:Array(key.utf8),blockMode:ctr,padding:.noPadding).decrypt(Array(self.utf8)).toHexString()
           return String.init(data:Data(hex123: decrypt), encoding: .utf8) ?? ""
   
      }

extension Data {
    public init(hex123: String) {
        self.init(Array<UInt8>(hex: hex123))
    }
}
```
by using this func but i got empty string every time 
please help me 
thank you 

OCB is an AEAD scheme that is specified in [RFC7253](https://tools.ietf.org/html/rfc7253).

The author made a mode friendly specification in https://web.cs.ucdavis.edu/~rogaway/ocb/ocb-faq.htm
Fixes #

Checklist:
- [x] Correct file headers (see CONTRIBUTING.md).
- [x] Formatted with [SwiftFormat](https://github.com/nicklockwood/SwiftFormat).
- [x] Tests added.

Changes proposed in this pull request:
-
code formatted as per swift 5 standards
Checklist:
- [ ] Correct file headers (see CONTRIBUTING.md).
- [ ] Formatted with [SwiftFormat](https://github.com/nicklockwood/SwiftFormat).
- [ ] Tests added.

Changes proposed in this pull request:
- Gets rid of very strange looking allocations where plain arrays could be used. Whenever possible `Array.init(unsafeUninitializedCapacity:,initializingWith:)` is used.

**Describe the bug**

On Mac OS (untested on iOS), using as a cocoapod:
Code coverage fails with the error:
```
Failed to generate coverage for target 'Pods_tests.framework' at path /Users/brian/Library/Developer/Xcode/DerivedData/cryptotest-acbtwdrzwlpbjmaszlynljvafncw/Build/Products/Debug/Pods_tests.framework/Versions/A/Pods_tests: Malformed coverage data
```



**To Reproduce**
Steps to reproduce the behavior:
1. Create a unit test target for your project
2. install the `CryptoSwift` pod against that target:
```

target 'tests' do
  # Comment the next line if you're not using Swift and don't want to use dynamic frameworks
  use_frameworks!
  pod 'CryptoSwift', '1.0.0'
  # Pods for cryptotest
end
```
3. enable code coverage for "some targets" (exclude pods)
4. code coverage fails for all tests. 

**Sample code**
N/A

**Expected behavior**
Code coverage should not break when including this pod. 

**Environment (please complete the following information):**
- Swift version: 4.2
- Platform (iOS/macOS/Linux/...): MacOS 10.14.3
- Installation method (CocoaPods/Carthage/SPM/...): CocoaPods
- Project name: N/A

**Additional context**
I easily reproduced this with at totally clean test project. 
Checklist:
- [x] Correct file headers (see CONTRIBUTING.md).
- [x] Formatted with [SwiftFormat](https://github.com/nicklockwood/SwiftFormat).
- [x] Tests passed.

Changes proposed in this pull request:
- The Salsa20 algorithm has been added
- The ChaCha20 algorithm implementation is simplified
**Is your feature request related to a problem? Please describe.**
To create any Bitcoin addresses, you need both of these functions. 

**Describe the solution you'd like**
Simply add a well respected implementation of the above algorithms.

**Describe alternatives you've considered**
Manually bringing an implementation in my project. Would be nice if it was packaged as part of CryptoSwift. 

**Additional context**
https://en.bitcoin.it/wiki/Base58Check_encoding
