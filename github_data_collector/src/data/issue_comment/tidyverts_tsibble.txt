https://github.com/tidyverts/tsibble/blob/7a13449e39d4e2b71f416cc5fdcb3eb57c174eec/R/subset.R#L27-L29

Presumably this check is intended to check for repeated rows in the resulting table, which would give an invalid tsibble. When `i` is provided as a logical vector, it is not possible to repeat rows via indexing.

Resolves https://github.com/tidyverts/fable/issues/218
Before:
``` r
library(tsibble)
library(lubridate)
year(yearweek("1992 W01"))
#> [1] 1991
```

<sup>Created on 2020-01-16 by the [reprex package](https://reprex.tidyverse.org) (v0.3.0)</sup>

After:
``` r
library(tsibble)
library(lubridate)
year(yearweek("1992 W01"))
#> [1] 1992
```

<sup>Created on 2020-01-16 by the [reprex package](https://reprex.tidyverse.org) (v0.3.0)</sup>


Implemented the ability to calculate relative differences with the difference function. Code from base R's diff function replaces the call to diff, in order to allow for each iterative difference to be a relative difference. Otherwise, the diff_impl function executes the same code as the diff function. The test for appropriate vector length is implemented in the difference function, as is a test for 0 in x, which invalidates a relative difference. A warning for differences above 1 is also included, as it might not be intuitive that a second relative difference is the relative difference in a relative difference. One use of relative = TRUE is added to the examples, and the parameter is defined for the difference function.
Changed non-1L defaults for lag and differences parameters to 1L defaults.
Added relative parameter to keyed_difference.
cc @DavisVaughan 

I'd be happy to deprecate window functions in favour of `slurrr::slide()`. I've had a quick look, and seems that `slurrr::slide()` replace `slide()`, `tile()`, `stretch()` all together by using different parameters?

You'll probably have `future_slide()` in mind too? living in `slurrr` or `furrr`?

Looks like https://github.com/r-lib/funs also plans to implement this set of functions. But Hadley said no plan in the near future. Does it mean `slurrr` will not be replaced by `funs`?

What timeline do you think for submitting to CRAN?
Please briefly describe your problem and what output you expect. If you have a question, please don't use this form. Instead, ask on <https://stackoverflow.com/> or <https://community.rstudio.com/>.

Please include a minimal reproducible example (AKA a reprex). If you've never heard of a [reprex](http://reprex.tidyverse.org/) before, start by reading <https://www.tidyverse.org/help/#reprex>.

---

Is there a reason why `yearweek()` does not work with `2019 W01` like `yearquarter()` with `2019 Q1`?

```r
library(tsibble)
yearweek("2019 W1")
#> Error: Input data '2019 W1' cannot be expressed as Date type
yearquarter("2019 Q1")
#> [1] "2019 Q1"
```

Currently `yearweek()` works with formats like `2019 01`, but this can be confusing because `01` is interpreted as month instead of week. It would be more consistent and less confusing if `yearweek()` supports a format like `2019 W01`.

`yearmonth()` has a similar problem because it does not work with `2019 M01`. Although it is not necessary but I think this will help increase consistency.

`slide_by()`, `stretch_by()`, `tile_by()` which integrates with dplyr's `mutate()`, `summarise()`, etc.
It is common to apply moving-window averages to a time series, e.g. 3-day moving average, 7-day moving average, etc. Currently, `slide()` and `tile()` require that the window size is specified in terms of the number of observations. It would be neat if these functions could also support a duration (e.g. the `lubridate::duration` class) as an alternative way to specify the window size.

On a related note, it would be helpful to have some helper functions for converting the `tsibble::interval` class to a `difftime` object `lubridate::duration` class (the `lubridate::interval` class represents something different from the `tsibble::interval` concept), e.g.
```r
as.duration.interval = function(x) {
  lubridate::as.duration(format(x))
}
interval(some_tsibble)
## 1D
as.duration(interval(some_tsibble))
## "86400s (~1 days)"
```
For a regular tsibble, the window size can then be computed with
```r
lubridate::duration("3 days") / as.duration(interval(d))
```
Hi tidyverts team:
   `tsibble` looks so great in handling time series data. In production, most of the common feature engineering is windowing, such as the sliding window, fixed window and so on.

I am manually make sliding window by pretty complicated Spark SQL instead of `tidyverts` style, because `tsibble` currently not support spark like `dplyr`.

Wish to discuss more tsibble on sparklyr in production.

The sparklyr struct streaming is also a good candidate to integrate with `tsibble`.
The default R calendar is fine for most users. Some of us, however, often use other types of calendars. For example, the [CF-Conventions](http://cfconventions.org/Data/cf-conventions/cf-conventions-1.7/cf-conventions.html#calendar), which are used primarily by climate scientists, define the following possible calendars: `c('365', '365_day', 'noleap', '360', '360_day', 'gregorian', 'proleptic_gregorian', 'standard')`.
The R package `PCICt` (also used by the emerging pkg `stars`) provides a basic support for these calendars.

It would be awesome if `tsibble` somehow integrated support for other calendars.