Hi,

I have a problem with validation email address, when address contains dot before at - char.

tonda.@domain.com - this address will not be validate, although it is correct and functional.

I use Form::EMAIL validation rule on  Nette\Forms\Controls\TextInput object. Last version of nette.

I don't know why somebody use this email address, but he is use it. I solve this problem with pattern, but it is not practical.

Thanks for solve.

Hello,
email validator should not accept emails that contains characters blacklisted IDN. They are listed here http://kb.mozillazine.org/Network.IDN.blacklist_chars. 
Currently we have a registered user with OBJECT REPLACEMENT CHARACTER in domain name and it is causing problems. What do you think?  

Hey guys!

I had a comment. I am looking at the test-bed http://hoola.cz/nette-xss-test/?do=form-submit that you had created during earlier issue for Nette testing in different context.

My question is related to style context. If I input harmless style e.g., color:red then it should work but what I received as an output is

`<div style='color\:red'>I am a style attribute context</div>`

What's the point in escaping colon? I think the use case would be to allow simple styles without JavaScript execution. Isn't it? Or Am I missing something?

Thanks!

```
<div style="background-image: url({$img});">
```

escapes output almost correctly, but the escape of space is missing.

```
<div style="background-image: url(\/\/img\.example\.com\/upload\/test file\.jpg);">
```

nette https://github.com/nette/nette/commit/06c27bab8cd601ea3ef636abbe6e62c95b9bd954

There is a note in David's [TODO list](http://forum.nette.org/en/1369-ideas-for-further-development-of-nette) about alternative way to user authentication and one part of it will by quite handy to me - login from database.

I use nice ORM but entities cannot be serialized (what a surprise) so I have to have one more unwanted property `profile` which is set in a secured BasePresenter manualy. It contains all data I need, but there is still `$presenter::$user` which becames confusing now because it no longer holds all proper data.

This situation was quite schizophrenic to me so I decided to modify Identity and UserStorage. There is no problem to rewrite Identity, but when I tried to modify (inheritted) UserStorage, I have realized that there is only few lines to rewrite but due to private fields I had to copy almost whole implementation. 

So, is it possible to change [these 3 fileds](https://github.com/nette/nette/blob/master/Nette/Http/UserStorage.php#L22-L29) to protected or at least could you answer me, why there is such a [condition](https://github.com/nette/nette/blob/master/Nette/Http/UserStorage.php#L175)? I would like to store only id, but to modify this condition, I have to rewrite so much... for what reason?

The [RFC 2616, section 9.1.1](http://tools.ietf.org/search/rfc2616#section-9.1.1) states:

> In particular, the convention has been established that the GET and HEAD methods SHOULD NOT have the significance of taking an action other than retrieval. These methods ought to be considered "safe". This allows user agents to represent other methods, such as POST, PUT and DELETE, in a special way, so that the user is made aware of the fact that a possibly unsafe action is being requested.

So we should use POST for secured signals (and ideally for all signals with side effects).

We can do this using a JavaScript, that sends links with parameter `data-nette-post` using POST. We can also easily create a fallback method for users without JavaScript - if an user attempts to access a protected page using GET method, we will show him a confirmation form which will execute the request with the CSRF token in POST param.

This commit allows you to protect signal by calling e.g. `$this->addProtection("Do you really want to delete user '$username'?");` at the beggining of the signal. After that, if you access the page via GET or via POST but with an invalid token, a confirmation dialog will be displayed.

A secured link can be created using `<a n:href="signal!" n:secured>`, which adds the parameter `data-nette-post`. You can send links with this parameter by method POST using the following JavaScript:

```
jQuery(function($) {
    $(document).on("click", "a[data-nette-post]", function(event) {
        var form = document.createElement("form");
        form.method = "POST";
        form.action = this.href;
        form.style.display = "none";
        var post = $(this).data("nette-post");
        for (var key in post) {
            var input = document.createElement("input");
            input.setAttribute("type", "hidden");
            input.setAttribute("name", key);
            input.setAttribute("value", post[key]);
            form.appendChild(input);
        }
        $(form).submit();
        event.preventDefault();
    });
});
```

(Maybe we should also create some official JavaScript like netteForms.js.)

If you want to send signals using AJAX, you have to just modify your JavaScript, so that it will use method POST and send POST params contained in `$control->getCsrfPost()`.

The confirmation dialog can be customized by overriding the method `displayCsrfConfirmationDialog()` in Presenter.

Here's a nice demonstration of BREACH attack: http://resources.infosecinstitute.com/the-breach-attack/

When static snippet wrapper (or snippetArea) contained a dynamic
snippet wrapped in a block (i.e. static snippet -> block -> dynamic
snippet), rendered dynamic snippets weren't added into payload.

Cause was that information was shared via scope which was different for
nested block (block is a function call) and snippet wrapper.

Fix was done via shared reference to a stdClass object.

There is a problem using some custom `Nette\Application\Routers\RouteList` which has some code using in request matching which needs to be only in some subclass of  `Nette\Application\Routers\RouteList`. For example some global settings of whole route group are used only in the list which are used for, lets say, handling of `locale` parameter.

There is NO problem with matching and handling request itself because there is some [indirect recursion](https://github.com/nette/nette/blob/master/Nette/Application/Routers/RouteList.php#L38-L51) but in debugger panel there is [another logic](https://github.com/nette/nette/blob/master/Nette/Application/Diagnostics/RoutingPanel.php#L92-L121) which broke its transparent behavior (recursion is not used). Another logic must be here there is not other way to find all routes (now). How you can see there is no call of `match` method on the list which then causes that debugger panel shows wrong route as matched.

I have been thinking about it and tried some quick solutions but all did not work as I expected. Any ideas welcome!

Hello,
if  I use Form::URL rule, validator return true though string in input isn't valid url in my opinion.

``` php
$form->addText('url')
    ->addRule(Form::URL, '');
```

Example for input _"aaaaaa"_ validator return true (IMHO _"aaaaaa"_ isn't valid url)and form is sended with url _"http://aaaaaa"_
This is bug or some feature?
