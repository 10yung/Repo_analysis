Hello, respect of open source framework, the author, I am a computer science student in China, a while ago was shocked by this framework, and into the framework of the study, the framework is very powerful, but I also found a problem, that is the Node data in the Inspector panel display support is not friendly, so I, with the help of Odin plug-ins do a Demo。
Here are two links
[https://gitee.com/NKG_admin/visual_skills_editor.git](url)
[https://gitee.com/NKG_admin/MKGMobaBasedOnET](url)
I would be happy to contribute to this framework if you think my proposal is enough of a branch！I'll rewrite a little Demo and post it to you

I did git clone on branch develop but I have problem with the look of nodes

If I have the graph node editor  on monitor external the look of node seems correct

![schermata 2018-11-08 alle 22 58 38](https://user-images.githubusercontent.com/6715157/48230124-4072a200-e3aa-11e8-978f-5a6d92dc9c32.png)

If I have the graph node editor on main monitor the look of node is busted 
<img width="1680" alt="schermata 2018-11-08 alle 22 58 52" src="https://user-images.githubusercontent.com/6715157/48230137-4d8f9100-e3aa-11e8-8bbd-776722880c85.png">


Information:
Unity 2018.2.14f1
Mac Hight Sierra
Mac Book Pro late 2016
Currently it seems the duplication is implemented in NodeEditorInputControls.cs, which only create a new empty Node, therefore is not handy when custom nodes contains data. Will it brokes anything to let a Node duplicate themself and fill in desired data?
For supporting Multi-Multi connections (connections between two knobs with MaximumConnectionCount.Multi), we need a new way of editing connections.
The current system relies on one knob with only one possible connection to delete the connection and the other one to create them, which is suboptimal.
Consider this a continuation of #74 to adress #144 and #145 and fix #147 and #148.

New concept for ALL connections:
- Create new connection by dragging from any of the two knobs to the other.
- Delete multiple connections by holding a key and dragging a 'cutting line' to delete (cut) all connections under the line (see https://youtu.be/XKbSu5PC8VA?t=633 from #145)
OR
- Delete single connections by right-clicking them or similar.
- Preview connection values for ValueConnections and perhaps select connections (important for some kind of connections that have own behaviour/conditions).
This requires hit detection between point/bezier and/or line/bezier.
Many developers need a variable amount of Inputs/Outputs, and as an alternative to allowing multiple inputs into one connection, many node editors instead have a variable range of inputs/outputs which adapt when the user adds more connections. This could currently be done in the node but a generic solution built into the node itself would be more apropriate IMO.
This will be addressed with a low priority in the future if nobody necessarily needs it as of now.

PDF shouldn't be the only format of distribution for the documentation.
It's hard to edit (only the one - you - with the source file can edit it) and it lacks version control because it is a binary file type.

I think a good alternate way would be to have GitHub pages set up, with the documentation in HTML. The PDF files in this repository would be a "print" of those files.

**Description:** Selecting, moving, deleting and duplicating multiple nodes.

**State:** None. May need adjustements to NodeEditorState and the input checking system.

**Description:** For the Node Editor to properly work at runtime, we need support for all kinds of popups (GenericMenu, EnumPopup, IntPopup, etc., even Tooltip). This will also fix some bugs regarding node focussing problems, as these will not block user input straight away when clicking it (even the first click event). Additionally, this will open up the possibility to let them account for the zooming - respective built-in controls will simply ignore the GUI scaling:/

**State:** This is easily possible using the Popup Engine I already made for the GenericMenu to work.

**Location:** OverlayGUI.cs and RTEditorGUI.cs for implementing new popups

**Description:** A generic node for calling actions, both static and instance. The Inputs and Outputs should adapt automatically.

**Progress:** Currently put on hold because we are unable to just serialize a function. I'm adressing this with a UnityFunc, which is serializeable and also needed for the StateMachine. Kamigaku on the forums has a specialised version already running afaik:)

**Location:** Due to the dependecny on UnityFunc, mostlyUnityFunc.cs and UnityFuncEditor.cs

**[WIP Branch](https://github.com/Baste-RainGames/Node_Editor/tree/feature/WIP_UnityFunc)**

**Description:** Undo support is a MUST. Using the default system, this would be absolutely tedious though. A command based pattern would be preferred. Maybe a mix of both is the best choice.

**Progress:** I've a WIP Command-Pattern Undo Integration (yes, integration into the default system:D ) we can use for the editor when it's finished (Progressing good, but currently on hold). For Runtime, VFW would probably be the best choice as the undo system (also command-pattern). Currently, theres no undo support though.
