I'm getting:
```difflib.js:78 Uncaught TypeError: Cannot assign to read only property 'name' of function 'function SequenceMatcher(isjunk, a, b, autojunk) ```

for:
````
 SequenceMatcher = (function() {

    SequenceMatcher.name = 'SequenceMatcher';    // <<== here

````
The current version (version 0.1.7) being used of cli-color does not have a license.
The NPM page for this package show it as having no license. From the project it's pretty clear that the license is actually MIT. This will show the right license on the NPM package.

![image](https://user-images.githubusercontent.com/1874242/55107657-40004c80-50a8-11e9-9afb-064c8158e11d.png)

As you're no doubt familiar with, Github's diffs show not only which *lines* have changed, but also frequently *which bits* of the line changed, when you make changes to an already existing line.

I'm not sure exactly how this is implemented, but I imagine it would be something like: perform the usual diff algorithm using lines as "atoms". Then, if the resulting diff would have a `-` followed by `+`, perform a char-by-char diff of these two lines. If the lines are at least n% similar, highlight the char-by-char diff in a stronger formatting to emphasize which bits of the line changed.

I think something similar for string values in the JSON data would be very handy. In the particular JSON data I've worked with, I'm importing data from a source, and from one import to the next there might've been typo fixes or small changes to description strings in the data. It would be very convenient to be able to tell at a glance exactly which bits were added/removed. So, I think it would be nice to perform a standard char-by-char diff of string values, if there is a `-` of a string value, followed by a `+` of a string value.
Collapse five or more `...` lines into one (that looks like `... (12 entries)` or similar.

The added example is illustrative:
```diff
 {
   movies: [
     ... (8 entries)
     {
       directors: [
         "Terry Gilliam"
+        "Terry Jones"
       ]
     }
     ...
   ]
 }
```

This is particularly useful when working with things like API responses, where you might expect arrays of similarly structured objects, with all but a select few being identical. It helps emphasize exactly what the difference between the JSON objects are, which is, after all, what you want to know.
Currently, when diffing arrays, elements that are objects and equivalent on both sides get elided with a `...`.  However, the fact that the elision marker is there is important to highlight the position of the differences in the array.

In some cases (especially when diffing API responses and similar), the arrays might be very long, and the output gets rather tedious. Instead of one elision marker for each elided object, I suggest to replace repetated elision with a single line.

E.g.,
```diff
% json-diff <(echo '{ "hello": [{},{},{},{},{},{},1] }') <(echo '{ "hello": [{},{},{},{},{},{},2] }')
 {
   hello: [
     ...
     ...
     ...
     ...
     ...
     ...
-    1
+    2
   ]
 }
```
would instead become
```diff
% json-diff <(echo '{ "hello": [{},{},{},{},{},{},1] }') <(echo '{ "hello": [{},{},{},{},{},{},2] }')
 {
   hello: [
     ... (6 entries)
-    1
+    2
   ]
 }
```

For smaller arrays, it would get noisy and reduce clarity to use the elisions everywhere.  Therefore, I think it makes sense to by default only collapse e.g. 5 or more elisions into one line. Probably makes sense to provide a command-line flag to set this threshold, though!
Hi, 

I need to diff JSON files which contain large numbers.  Even though your module is generally very useful for comparing JSON files, it is unable to create proper diffs for JSON files containting large numbers, as it parses them by the ordinary JSON.parse() function. As a result, when comparing two files having the following JSON objects, the diff will not be recognized by this module:

file1: 
{
	"value": 3e+6000
}

file2:
{
	"value": 3e+5000
}

However, I added optional BigNumber support. So if you now compare these two files and add the parameter -b, you will get the following diff:

{
\-  value: 3e+6000
\+  value: 3e+5000
 }

I know this is a very special use case as JSON objects usually do not have big numbers, but this feature is still useful as it extends the use of this module. It also should not break anything as my changes will only be activated if the options object contains the property bigNumberSupport. Moreover, all previous test cases are still running. I also added some additional test cases to check if this feature works and I am willing to add some more if desired. 

Please let me know soon, if you are intersted in merging this pull request, as I also personally need this feature. 

Otherwise I at least would like to publish the fork to npm by myself if you don't mind.

Looking forward for some response.
If I change a value from true to false it gives me this output:

```
   ...
   {
-    alive: true
   }
   ...
```
It does not recognize that false was added, only that true is gone
Adds a new `--sort`/`-s` option that will sort arrays and objects by keys before comparing.
Please add an option to filter out certain keys.

Like diff maybe use the capital i as parameter.

For example:
json-diff -I id -I created_at -I updated_at -I random_object_id a.json b.json

Or maybe read a json file with an array of keys to be ignored

json-diff --ignore_file ignore_keys.json


So those keys will be ignored, in the comparison.

It would be a great help in comparing json files across a production and test environment.