Right now, `display_page` is based on the text, and that isn't always unique. This should be modified so you can use the tab names (or something else that may be unique).
Function `sb_add_snippets()`  throws  an error : "Error in if (res) { : argument is of zero length."
I changed the syntax and was able to add the snippets.
Put the GA token in `_site.yml`
In many situations, a page consists of standalone submodules that are assembled as a combination of tabs and rows. This can be made easier by extending the API of `satin`. 

```yaml
- text: Item 1
   menu:
     - text: Sub Item 1
       module:
          tabs:
          - text: Tab 1
            module:
             tab1:
               id: tab1
          - text: Tab 2
            module: tab2
```

In this case `module_tabs` is a `satin` module that accepts a list of modules and turns them into tabs on a page. `module_rows` would turn a list of modules into rows. The advantage of this approach is consistency and the ability for users to define custom higher-level modules to aggregate submodules.

It does introduce an extra layer of nesting which might be annoying, but I think consistency scores higher than the annoyance introduced by a little nesting.
You could wrap the server function in a `safely()`.
If the condition doesn't evaluate to TRUE, this removes it from both the UI and module levels (as a preprocessing step).

For instance, this is useful for hiding a section of the page on main, so that it can be evaluated and discussed on staging without fear of it getting released and shown to users. In our case, we could add this to any tab (at either the sidebar or the tab level).

```
    condition: !expr '!(Sys.getenv("SHINY_SERVER") == "1" && grepl("datacamp/dashboards", getwd()))'
```

(Of course, this would eventually be something more like `not_prod()`.