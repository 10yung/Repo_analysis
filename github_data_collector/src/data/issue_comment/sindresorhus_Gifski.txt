Moving issue from #111 as requested.

> The remaining time estimate is a bit off. Looking at the progress circle it looks like the remaining time should be pretty predictable as it seems like each percentage point takes roughly a constant amount of time to process. I think perhaps the time estimate should be recalculated after each percentage point with the following formula: ( ( 100 / number_of_percentage_points_so_far ) - 1 ) * time_elapsed_so_far.

> I've timed it and converting a video took ~40s for me over a ~60s estimate, nothing particularly off but for me the countdown seems to be counting down a little faster than it should.

> I've just tried converting a video with Gifski and at the point where the app said there were 40s left, after about ~60% of the video had been processed already, I started a stopwatch and when the app finished the stopwatch was at ~32s.


I've gotten a couple of requests for 60 FPS. We currently limit it to 30 FPS. I do realize it doesn't even usually make sense with 30 FPS for GIF, but their use-case is very short clips to upload to https://dribbble.com.

Thoughts?
## AVAsset debug info ##
Extension: mp4
Video codec: H264 (avc1)
Audio codec: nil
Duration: 27s
Dimension: 1152×720
Frame rate: 29.97
File size: 11.2 MB
Is readable: true
Is playable: false
Is exportable: true
Has protected content: false

Track #1
----
Type: Video
Codec: H264 (avc1)
Duration: 27s
Dimensions: 1152×720
Natural size: (1152.0, 720.0)
Frame rate: 29.97
Is playable: false
Is decodable: false
----

[tina-demo.mp4.zip](https://github.com/sindresorhus/Gifski/files/3760527/tina-demo.mp4.zip)


This PR is attempt to Fixes #108 

Custom animator was added and used.

Unfortunately app crashes when you try to `dismiss` controller presented with `present(_, animator:). I assume this is because `window.contentViewController` being replaced.


<!-- Issuehunt content -->

---

<details>
<summary>
<b>IssueHunt Summary</b>
</summary>

### Referenced issues

This pull request has been submitted to:
- [#108: Use `NSViewController.present()` with custom animator](https://issuehunt.io/repos/119822304/issues/108)
---

IssueHunt has been backed by the following sponsors. [Become a sponsor](https://issuehunt.io/membership/members)
</details>
<!-- /Issuehunt content-->
I think previewing the gif in the same screen where I tweak the conversion settings is a superior user experience compared to going back and forth between the settings-view and the save-view. Especially, since there is already a video player present in the settings-view.

For example, there could be a button <kbd>Render preview</kbd> or a toggle: <kbd>Original</kbd> - <kbd>Preview</kbd>

If you select <kbd>Preview</kbd>, the original video would be replaced with the gif and a progress indicator, that would let me know whenever gifski is busy converting a new preview. Tweaking the settings would start the preview conversion from scratch.

This would make it effortless to tweak the quality and framerate settings.

Another idea to speed up the preview process: how about rendering just the first frame of the gif with the settings applied? That should be plenty fast, and you would get some perspective into what the final result will look like, given the resolution and quality. Maybe even let the user scrub-select frames and render them as needed?
The estimate could be displayed as a range, e.g.: 0.5MB-2MB. This could be done simply by calculating estimate twice, with different assumptions (fudge factors).

Displaying it as a range would communicate to users that it's not an actual expected file size, and would communicate how imprecise the estimate is, so they would be less surprised when it's off.



Fixes #41

When the estimateFileSize function is called it first cancels any ongoing estimations.
Then it runs the old estimate and show it in gray saying "Estimated size: 123Kb".
Then it starts to actually run the conversion of the Gif in the background and once it's done it will save the gif in the gifdata variable for later use and shows the size in green saying "File size: 123Kb".

When pressing the Convert button it first checks if there is gifdata is set. If so it will send it to the Conversion screen that will only have to save the data into a file so the conversion will complete almost instantly.

<!-- Issuehunt content -->

---

<details>
<summary>
<b>IssueHunt Summary</b>
</summary>

### Referenced issues

This pull request has been submitted to:
- [#41: Improve file size estimate](https://issuehunt.io/repos/119822304/issues/41)
---

IssueHunt has been backed by the following sponsors. [Become a sponsor](https://issuehunt.io/membership/members)
</details>
<!-- /Issuehunt content-->
<!--
I think it is great to create GIF from a video clip. However it will be even useful to create GIF using bunch of photos. Say I clicked few photo's of an animal in zoo without using Live Photos option then I can use these photos and create GIF and get similar effect.
-->


---
Gifski 2.0.1 (19)
macOS 10.14.6
MacBookPro14,3
<!--
Provide your feedback here. Include as many details as possible.
You can also email me at sindresorhus@gmail.com
-->

Hello! I am missing frames on the end of my gif when I export with gifski. Example: my gif is 20 frames long, when I export it from gifski it loops with only 18 frames. I can bring it into After Effects also and see how it is shorter than my original composition.

---
Gifski 2.0.0 (18)
macOS 10.14.6
iMac19,1
Currently gifski C API takes a callback function + a context pointer. From Swift's perspective this has to be a plain, context-free function, and the context pointer is meaningless (unsafe unretained). That makes it awkward to use (doesn't allow normal closures), and is unsafe.

Can we do better?

I don't know what's Swift solution to the memory management problem here. In the olden days of manual refcounting, it'd suffice to call an extra `[context retain]` before setting up the callback's context, and `[context release]` after finishing the operation. Rust's approach to this is `into_raw()` and `from_raw()` that "leak" memory and "unleak" it later.

The second part of the problem is allowing normal closures, instead of sneaking the context through an unsafe pointer.

* Perhaps closures could be cast to an ObjC block? Blocks can be represented as regular pointers. The callback function could be just a small function that calls a block, and the block would be passed through the context pointer.

* Or can Swift "box" a closure into a container that can be sent as a single pointer? It could work similar to blocks, but with "native" Swift closure.