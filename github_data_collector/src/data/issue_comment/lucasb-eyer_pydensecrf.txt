Hi, is it possible to extract the filters weights `k(f_i, f_j)` before the inference? 

Thank youu
My Code:

```
def mask_smoothen(img, mask, nclasses):

	mask = mask.astype(np.float32) #mask.astype(np.uint8)
	image = img
	height, width, channels = image.shape

	d = dcrf.DenseCRF2D(height, width, nclasses)

	labels = mask.T
	
	U = unary_from_softmax(labels)
	U = np.ascontiguousarray(U)	
	print(U.dtype, U.shape)

	d.setUnaryEnergy(U)

	d.addPairwiseBilateral(sxy=80, srgb=13, rgbim=image, compat=10)

	Q = d.inference(5)

	fine_mask = np.argmax(Q, axis=0).reshape(height, width)

	return fine_mask
```

I get the error "Bad shape for unary energy (Need (2, 1053979828), got (39677, 26564))"

My image and masks are large: 39677 x 26564

Can some one help me understand what is happening here.
Running `pip install pydensecrf` under python3.7 produces the following information:

    pydensecrf/eigen.cpp:17032:21: error: no member named 'exc_type' in '_ts'
        *type = tstate->exc_type;
                ~~~~~~  ^
    pydensecrf/eigen.cpp:17033:22: error: no member named 'exc_value' in '_ts'; did you mean 'curexc_value'?
        *value = tstate->exc_value;
                         ^~~~~~~~~
                         curexc_value
    /usr/local/Cellar/python/3.7.3/Frameworks/Python.framework/Versions/3.7/include/python3.7m/pystate.h:240:15: note: 'curexc_value' declared here
        PyObject *curexc_value;
                  ^
    pydensecrf/eigen.cpp:17034:19: error: no member named 'exc_traceback' in '_ts'; did you mean 'curexc_traceback'?
        *tb = tstate->exc_traceback;
                      ^~~~~~~~~~~~~
                      curexc_traceback
    /usr/local/Cellar/python/3.7.3/Frameworks/Python.framework/Versions/3.7/include/python3.7m/pystate.h:241:15: note: 'curexc_traceback' declared here
        PyObject *curexc_traceback;
                  ^
    pydensecrf/eigen.cpp:17041:24: error: no member named 'exc_type' in '_ts'
        tmp_type = tstate->exc_type;
                   ~~~~~~  ^
    pydensecrf/eigen.cpp:17042:25: error: no member named 'exc_value' in '_ts'; did you mean 'curexc_value'?
        tmp_value = tstate->exc_value;
                            ^~~~~~~~~
                            curexc_value
    /usr/local/Cellar/python/3.7.3/Frameworks/Python.framework/Versions/3.7/include/python3.7m/pystate.h:240:15: note: 'curexc_value' declared here
        PyObject *curexc_value;
                  ^
    pydensecrf/eigen.cpp:17043:22: error: no member named 'exc_traceback' in '_ts'; did you mean 'curexc_traceback'?
        tmp_tb = tstate->exc_traceback;
                         ^~~~~~~~~~~~~
                         curexc_traceback
    /usr/local/Cellar/python/3.7.3/Frameworks/Python.framework/Versions/3.7/include/python3.7m/pystate.h:241:15: note: 'curexc_traceback' declared here
        PyObject *curexc_traceback;
                  ^
    pydensecrf/eigen.cpp:17044:13: error: no member named 'exc_type' in '_ts'
        tstate->exc_type = type;
        ~~~~~~  ^
    pydensecrf/eigen.cpp:17045:13: error: no member named 'exc_value' in '_ts'; did you mean 'curexc_value'?
        tstate->exc_value = value;
                ^~~~~~~~~
                curexc_value
    /usr/local/Cellar/python/3.7.3/Frameworks/Python.framework/Versions/3.7/include/python3.7m/pystate.h:240:15: note: 'curexc_value' declared here
        PyObject *curexc_value;
                  ^
    pydensecrf/eigen.cpp:17046:13: error: no member named 'exc_traceback' in '_ts'; did you mean 'curexc_traceback'?
        tstate->exc_traceback = tb;
                ^~~~~~~~~~~~~
                curexc_traceback
    /usr/local/Cellar/python/3.7.3/Frameworks/Python.framework/Versions/3.7/include/python3.7m/pystate.h:241:15: note: 'curexc_traceback' declared here
        PyObject *curexc_traceback;
                  ^
    pydensecrf/eigen.cpp:17101:24: error: no member named 'exc_type' in '_ts'
        tmp_type = tstate->exc_type;
                   ~~~~~~  ^
    pydensecrf/eigen.cpp:17102:25: error: no member named 'exc_value' in '_ts'; did you mean 'curexc_value'?
        tmp_value = tstate->exc_value;
                            ^~~~~~~~~
                            curexc_value
    /usr/local/Cellar/python/3.7.3/Frameworks/Python.framework/Versions/3.7/include/python3.7m/pystate.h:240:15: note: 'curexc_value' declared here
        PyObject *curexc_value;
                  ^
    pydensecrf/eigen.cpp:17103:22: error: no member named 'exc_traceback' in '_ts'; did you mean 'curexc_traceback'?
        tmp_tb = tstate->exc_traceback;
                         ^~~~~~~~~~~~~
                         curexc_traceback
    /usr/local/Cellar/python/3.7.3/Frameworks/Python.framework/Versions/3.7/include/python3.7m/pystate.h:241:15: note: 'curexc_traceback' declared here
        PyObject *curexc_traceback;
                  ^
    pydensecrf/eigen.cpp:17104:13: error: no member named 'exc_type' in '_ts'
        tstate->exc_type = local_type;
        ~~~~~~  ^
    pydensecrf/eigen.cpp:17105:13: error: no member named 'exc_value' in '_ts'; did you mean 'curexc_value'?
        tstate->exc_value = local_value;
                ^~~~~~~~~
                curexc_value
    /usr/local/Cellar/python/3.7.3/Frameworks/Python.framework/Versions/3.7/include/python3.7m/pystate.h:240:15: note: 'curexc_value' declared here
        PyObject *curexc_value;
                  ^
    pydensecrf/eigen.cpp:17106:13: error: no member named 'exc_traceback' in '_ts'; did you mean 'curexc_traceback'?
        tstate->exc_traceback = local_tb;
                ^~~~~~~~~~~~~
                curexc_traceback
    /usr/local/Cellar/python/3.7.3/Frameworks/Python.framework/Versions/3.7/include/python3.7m/pystate.h:241:15: note: 'curexc_traceback' declared here
        PyObject *curexc_traceback;
                  ^
    pydensecrf/eigen.cpp:17128:24: error: no member named 'exc_type' in '_ts'
        tmp_type = tstate->exc_type;
                   ~~~~~~  ^
    pydensecrf/eigen.cpp:17129:25: error: no member named 'exc_value' in '_ts'; did you mean 'curexc_value'?
        tmp_value = tstate->exc_value;
                            ^~~~~~~~~
                            curexc_value
    /usr/local/Cellar/python/3.7.3/Frameworks/Python.framework/Versions/3.7/include/python3.7m/pystate.h:240:15: note: 'curexc_value' declared here
        PyObject *curexc_value;
                  ^
    pydensecrf/eigen.cpp:17130:22: error: no member named 'exc_traceback' in '_ts'; did you mean 'curexc_traceback'?
        tmp_tb = tstate->exc_traceback;
                         ^~~~~~~~~~~~~
                         curexc_traceback
    /usr/local/Cellar/python/3.7.3/Frameworks/Python.framework/Versions/3.7/include/python3.7m/pystate.h:241:15: note: 'curexc_traceback' declared here
        PyObject *curexc_traceback;
                  ^
    pydensecrf/eigen.cpp:17131:13: error: no member named 'exc_type' in '_ts'
        tstate->exc_type = *type;
        ~~~~~~  ^
    fatal error: too many errors emitted, stopping now [-ferror-limit=]
    20 errors generated.
    error: command 'clang' failed with exit status 1

    ----------------------------------------

This seems to relate to the problem of cython as mentioned [here](https://github.com/cython/cython/issues/1955). 
However, updating to the lastest version of cython did not solve this problem. I'm using python3.7 with Cython version 0.29.14.


First of all, thanks a lot for packaging this!

I've noticed some interesting errors when creating a pairwise potential with very small stddev for the feature comparison. Minimal example:
```python
import sys
import numpy as np
from pydensecrf import densecrf, utils

n = int(sys.argv[1])
s = float(sys.argv[2])

x = np.random.rand(1, n, n)
d = densecrf.DenseCRF2D(n, n, 2)
B = utils.create_pairwise_bilateral((30, 30), s, x, chdim=0)
print("addPairwiseEnergy()")
d.addPairwiseEnergy(B, 2.5)
print("worked.")
```

When passing a small scale parameter (1e-8 and smaller), I can provoke different crashes:
```
$ python3 crfbug.py 64 1e-7
addPairwiseEnergy()
worked.
$ python3 crfbug.py 64 1e-8
addPairwiseEnergy()
worked.
double free or corruption (out)
Aborted (core dumped)
$ python3 crfbug.py 128 1e-8
addPairwiseEnergy()
corrupted size vs. prev_size
Aborted (core dumped)
$ python3 crfbug.py 256 1e-8
addPairwiseEnergy()
free(): invalid pointer
Aborted (core dumped)
$ python3 crfbug.py 64 1e-10
addPairwiseEnergy()
Segmentation fault (core dumped)
```
The error message is not completely deterministic.

Relevant part of the backtrace for one of those:
```
#0  __GI_raise (sig=sig@entry=6) at ../sysdeps/unix/sysv/linux/raise.c:51
#1  0x00007ffff7a24801 in __GI_abort () at abort.c:79
#2  0x00007ffff7a6d897 in __libc_message (action=action@entry=do_abort, 
    fmt=fmt@entry=0x7ffff7b9ab9a "%s\n") at ../sysdeps/posix/libc_fatal.c:181
#3  0x00007ffff7a7490a in malloc_printerr (
    str=str@entry=0x7ffff7b9c870 "double free or corruption (out)")
    at malloc.c:5350
#4  0x00007ffff7a7be75 in _int_free (have_lock=0, p=0xecc0b0, 
    av=0x7ffff7dcfc40 <main_arena>) at malloc.c:4278
#5  __GI___libc_free (mem=0xecc0c0) at malloc.c:3124
#6  0x00007fffe97e1573 in Permutohedral::init (this=0xe6dc30, feature=...)
    at pydensecrf/densecrf/src/permutohedral.cpp:283
#7  0x00007fffe97d9d17 in DenseKernel::initLattice (f=..., this=0xe6dc20)
    at pydensecrf/densecrf/src/pairwise.cpp:42
#8  DenseKernel::DenseKernel (ntype=<optimized out>, ktype=<optimized out>, 
    f=..., this=0xe6dc20) at pydensecrf/densecrf/src/pairwise.cpp:121
#9  PairwisePotential::PairwisePotential (this=0xb517a0, features=..., 
    compatibility=<optimized out>, ktype=<optimized out>, 
    ntype=<optimized out>) at pydensecrf/densecrf/src/pairwise.cpp:171
#10 0x00007fffe97d25e0 in DenseCRF::addPairwiseEnergy (
    this=this@entry=0xea04a0, features=..., function=function@entry=0xb51710, 
    kernel_type=kernel_type@entry=DIAG_KERNEL, 
    normalization_type=normalization_type@entry=NORMALIZE_SYMMETRIC)
    at pydensecrf/densecrf/src/densecrf.cpp:56
```

So in this case, it crashed at https://github.com/lucasb-eyer/pydensecrf/blob/0632813/pydensecrf/densecrf/src/permutohedral.cpp#L283, I also get crashes at line 255 or 284. All this seems like some memory is overwritten somewhere.

Running `valgrind --tool=memcheck --suppressions=valgrind-python.supp python3 crfbug.py 64 1e-8`, the first two relevant errors are:
<details><summary>an invalid read</summary>

```
addPairwiseEnergy()
==30527== Invalid read of size 2
==30527==    at 0x1497415A: Permutohedral::init(Eigen::Matrix<float, -1, -1, 0, -1, -1> const&) (permutohedral.cpp:270)
==30527==    by 0x1496CD16: initLattice (pairwise.cpp:42)
==30527==    by 0x1496CD16: DenseKernel (pairwise.cpp:121)
==30527==    by 0x1496CD16: PairwisePotential::PairwisePotential(Eigen::Matrix<float, -1, -1, 0, -1, -1> const&, LabelCompatibility*, KernelType, NormalizationType) (pairwise.cpp:171)
==30527==    by 0x149655DF: DenseCRF::addPairwiseEnergy(Eigen::Matrix<float, -1, -1, 0, -1, -1> const&, LabelCompatibility*, KernelType, NormalizationType) (densecrf.cpp:56)
==30527==    by 0x1495C7D0: __pyx_pf_10pydensecrf_8densecrf_8DenseCRF_4addPairwiseEnergy (densecrf.cpp:3236)
==30527==    by 0x1495C7D0: __pyx_pw_10pydensecrf_8densecrf_8DenseCRF_5addPairwiseEnergy(_object*, _object*, _object*) (densecrf.cpp:3100)
==30527==    by 0x50ABC4: ??? (in /usr/bin/python3.6)
==30527==    by 0x50C548: _PyEval_EvalFrameDefault (in /usr/bin/python3.6)
==30527==    by 0x5081D4: ??? (in /usr/bin/python3.6)
==30527==    by 0x50B3A2: PyEval_EvalCode (in /usr/bin/python3.6)
==30527==    by 0x635081: ??? (in /usr/bin/python3.6)
==30527==    by 0x635136: PyRun_FileExFlags (in /usr/bin/python3.6)
==30527==    by 0x6388EE: PyRun_SimpleFileExFlags (in /usr/bin/python3.6)
==30527==    by 0x639490: Py_Main (in /usr/bin/python3.6)
==30527==  Address 0x140b7c58 is 8 bytes before a block of size 32 alloc'd
==30527==    at 0x4C3089F: operator new[](unsigned long) (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==30527==    by 0x14973C04: Permutohedral::init(Eigen::Matrix<float, -1, -1, 0, -1, -1> const&) (permutohedral.cpp:167)
==30527==    by 0x1496CD16: initLattice (pairwise.cpp:42)
==30527==    by 0x1496CD16: DenseKernel (pairwise.cpp:121)
==30527==    by 0x1496CD16: PairwisePotential::PairwisePotential(Eigen::Matrix<float, -1, -1, 0, -1, -1> const&, LabelCompatibility*, KernelType, NormalizationType) (pairwise.cpp:171)
==30527==    by 0x149655DF: DenseCRF::addPairwiseEnergy(Eigen::Matrix<float, -1, -1, 0, -1, -1> const&, LabelCompatibility*, KernelType, NormalizationType) (densecrf.cpp:56)
==30527==    by 0x1495C7D0: __pyx_pf_10pydensecrf_8densecrf_8DenseCRF_4addPairwiseEnergy (densecrf.cpp:3236)
==30527==    by 0x1495C7D0: __pyx_pw_10pydensecrf_8densecrf_8DenseCRF_5addPairwiseEnergy(_object*, _object*, _object*) (densecrf.cpp:3100)
==30527==    by 0x50ABC4: ??? (in /usr/bin/python3.6)
==30527==    by 0x50C548: _PyEval_EvalFrameDefault (in /usr/bin/python3.6)
==30527==    by 0x5081D4: ??? (in /usr/bin/python3.6)
==30527==    by 0x50B3A2: PyEval_EvalCode (in /usr/bin/python3.6)
==30527==    by 0x635081: ??? (in /usr/bin/python3.6)
==30527==    by 0x635136: PyRun_FileExFlags (in /usr/bin/python3.6)
==30527==    by 0x6388EE: PyRun_SimpleFileExFlags (in /usr/bin/python3.6)
```
</details>
<details><summary>shortly followed by an invalid write</summary>

```
==30696== Invalid write of size 4
==30696==    at 0x1497409A: Permutohedral::init(Eigen::Matrix<float, -1, -1, 0, -1, -1> const&) (permutohedral.cpp:255)
==30696==    by 0x1496CD16: initLattice (pairwise.cpp:42)
==30696==    by 0x1496CD16: DenseKernel (pairwise.cpp:121)
==30696==    by 0x1496CD16: PairwisePotential::PairwisePotential(Eigen::Matrix<float, -1, -1, 0, -1, -1> const&, LabelCompatibility*, KernelType, NormalizationType) (pairwise.cpp:171)
==30696==    by 0x149655DF: DenseCRF::addPairwiseEnergy(Eigen::Matrix<float, -1, -1, 0, -1, -1> const&, LabelCompatibility*, KernelType, NormalizationType) (densecrf.cpp:56)
==30696==    by 0x1495C7D0: __pyx_pf_10pydensecrf_8densecrf_8DenseCRF_4addPairwiseEnergy (densecrf.cpp:3236)
==30696==    by 0x1495C7D0: __pyx_pw_10pydensecrf_8densecrf_8DenseCRF_5addPairwiseEnergy(_object*, _object*, _object*) (densecrf.cpp:3100)
==30696==    by 0x50ABC4: ??? (in /usr/bin/python3.6)
==30696==    by 0x50C548: _PyEval_EvalFrameDefault (in /usr/bin/python3.6)
==30696==    by 0x5081D4: ??? (in /usr/bin/python3.6)
==30696==    by 0x50B3A2: PyEval_EvalCode (in /usr/bin/python3.6)
==30696==    by 0x635081: ??? (in /usr/bin/python3.6)
==30696==    by 0x635136: PyRun_FileExFlags (in /usr/bin/python3.6)
==30696==    by 0x6388EE: PyRun_SimpleFileExFlags (in /usr/bin/python3.6)
==30696==    by 0x639490: Py_Main (in /usr/bin/python3.6)
==30696==  Address 0x140b7c28 is 8 bytes after a block of size 80 alloc'd
==30696==    at 0x4C3089F: operator new[](unsigned long) (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==30696==    by 0x14973BD7: Permutohedral::init(Eigen::Matrix<float, -1, -1, 0, -1, -1> const&) (permutohedral.cpp:166)
==30696==    by 0x1496CD16: initLattice (pairwise.cpp:42)
==30696==    by 0x1496CD16: DenseKernel (pairwise.cpp:121)
==30696==    by 0x1496CD16: PairwisePotential::PairwisePotential(Eigen::Matrix<float, -1, -1, 0, -1, -1> const&, LabelCompatibility*, KernelType, NormalizationType) (pairwise.cpp:171)
==30696==    by 0x149655DF: DenseCRF::addPairwiseEnergy(Eigen::Matrix<float, -1, -1, 0, -1, -1> const&, LabelCompatibility*, KernelType, NormalizationType) (densecrf.cpp:56)
==30696==    by 0x1495C7D0: __pyx_pf_10pydensecrf_8densecrf_8DenseCRF_4addPairwiseEnergy (densecrf.cpp:3236)
==30696==    by 0x1495C7D0: __pyx_pw_10pydensecrf_8densecrf_8DenseCRF_5addPairwiseEnergy(_object*, _object*, _object*) (densecrf.cpp:3100)
==30696==    by 0x50ABC4: ??? (in /usr/bin/python3.6)
==30696==    by 0x50C548: _PyEval_EvalFrameDefault (in /usr/bin/python3.6)
==30696==    by 0x5081D4: ??? (in /usr/bin/python3.6)
==30696==    by 0x50B3A2: PyEval_EvalCode (in /usr/bin/python3.6)
==30696==    by 0x635081: ??? (in /usr/bin/python3.6)
==30696==    by 0x635136: PyRun_FileExFlags (in /usr/bin/python3.6)
==30696==    by 0x6388EE: PyRun_SimpleFileExFlags (in /usr/bin/python3.6)
```
</details>

Focusing on the latter, in https://github.com/lucasb-eyer/pydensecrf/blob/0632813/pydensecrf/densecrf/src/permutohedral.cpp#L255, it's writing beyond the array allocated in https://github.com/lucasb-eyer/pydensecrf/blob/0632813/pydensecrf/densecrf/src/permutohedral.cpp#L160, which is the `barycentric` array. So `barycentric[j*(d_+2)+p  ]` seems to be used with a too large index. This probably means that the `rank` array contained negative values?

Anyway, that's all I can do quickly without delving into the algorithm and/or compiling the package myself. And I realize this is outside the scope of the Python wrapper, so you may not want to deal with this, but maybe at least it will help someone searching for this error.
Hi there, thanks for this fantastic wrapper!
Is there a way to construct a pairwise Gaussian potential with nonzero mean? As in:
p(f_i, f_j) ~ exp(- (mu - |f_i - f_j|) ^2 / (2 * sigma^2))
Thanks!
Hi author, is it possible to build this project on ARM64 architecture
i want to use it on the Jetson Nano 
Added a requirements.txt and fixed setup file so that it will install
cython if it is not already installed. This resolves issue #78.
my image:
![test](https://user-images.githubusercontent.com/34981481/61123101-1263d580-a4d6-11e9-8a5f-289c0bb61644.jpg)
result:
![mask](https://user-images.githubusercontent.com/34981481/61123422-e09f3e80-a4d6-11e9-84ea-d4ef04193faf.jpg)
I use the code like this:
```python
d = dcrf.DenseCRF2D(640, 368, 4)
prediction1 = prediction1.reshape((4, -1))
d.setUnaryEnergy(prediction1.astype(np.float32))
d.addPairwiseGaussian(sxy=3, compat=3)
cv2.imwrite('test.jpg', (image[i]/.016 + 128).astype(np.uint8))
d.addPairwiseBilateral(sxy=(80, 80), srgb=(13, 13, 13), rgbim=(image[i]/.016+128).astype(np.uint8),compat=10)
prediction1 = d.inference(5)
prediction1 = np.argmax(prediction1, axis=0)
prediction1 = np.reshape(prediction1, (368, 640))
predictio = np.stack((y_type1,y_type2,y_type3), axis=2)
cv2.imwrite('mask.jpg', (prediction1*255).astype(np.uint8))
```
Hi I am wondering how many parameters does the model have. I am trying to list the end to end complexity for my model, but I can't seem to figure out how many parameters were trained for densecrf.

Thanks
Hi. I am curious that since the learning step is not wrapped, where do the parameters of densecrf come from? Are the parameters hard-coded?
Thank you in advance. 