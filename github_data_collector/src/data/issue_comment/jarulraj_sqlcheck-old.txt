I see that the name for the repository has changed to `sqlcheck-old`. Is this still going to be a maintained project or is it considered feature frozen/deprecated?
Fixes #22 

I agree with the original reporter, exit codes are very helpful for CI operations to prevent a build from showing as successful when sqlcheck fails.
I've got a number of this false alarm, when have a column name, which has accidentally the enum string, seemingly as postfix:

phonenum
forenum
nodenum
Sqlcheck does not show line number on which antipattern or hint is reported . Currently it gives  following format

[D:\temp_func.sql]: (LOW RISK) (QUERY ANTI-PATTERN) Spaghetti Query Alert
[Matching Expression: ]

[D:\temp_func.sql]: (LOW RISK) (QUERY ANTI-PATTERN) UNION Usage
[Matching Expression: union]

can it give line no as well ? 
e.g . [D:\temp_func.sql]: (LOW RISK) (QUERY ANTI-PATTERN) UNION Usage
[Matching Expression: union] [34]

This becomes very useful when it is a huge file. With line number (starting position of the query) you can directly navigate to the specific query. 

Line number are very common in all code checker ,  as they give better user  experience . 

Should line number be added here?

Thanks



I want to use sqlcheck in my CI and I want it to exit with a non-zero exit code if it found any anti-patterns or hints, so that my CI build would fail. But it always exits with code 0.

Sorry if this is a novice issue.  I tried to run it on Windows 7 Enterprise (SP1, 64-bit) with MSVC++ 2015 Redistributable (x86, x64) installed but I got this error when I ran it in the command prompt.

"The program can't start because MSVCP140D.dll is missing from your computer.  Try reinstalling the program to fix this problem."

I'm not sure where to go from there.  I'm hoping there's a way to get around it without reinstalling the redistributables.

Thank you.
It would be a great feature to implement some kind of programmatic API to check an SQL file (either from path or from the contents given as argument) so that 3rd party tools can be built around sqlcheck.

My primary interest is to integrate this tool into an editor/IDE for SQL file linting. Currently the only way to integrate this tool into an editor would be to run `shellcheck` as a standard command invocation from shell and parse the output, then map it to the lines and character positions. This approach is not very performant and would require a lot of work, especially in the output parsing logic. However, creating a stanard way to programmatically invoke shellcheck would work perfectly for this use case.

Unfortunately I am not proficient enough in C/C++ to send a PR, so leaving this here as a suggestion only. Thank you for considering this feature!