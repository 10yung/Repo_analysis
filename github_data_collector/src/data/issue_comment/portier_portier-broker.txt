
> spin is no longer actively maintained

| Details             |                                                |
| ------------------- | ---------------------------------------------- |
| Status              | unmaintained                |
| Package             | `spin`                      |
| Version             | `0.5.2`                   |
| URL                 | [https://github.com/mvdnes/spin-rs/commit/7516c80](https://github.com/mvdnes/spin-rs/commit/7516c80) |
| Date                | 2019-11-21                         |
| Unaffected versions | `> 0.5.2`               |

The author of the `spin` crate does not have time or interest to maintain it.

Consider the following alternatives (both of which support `no_std`):

- [`conquer-once`](https://github.com/oliver-giersch/conquer-once)
- [`lock_api`](https://crates.io/crates/lock_api) (a subproject of `parking_lot`)


See [advisory page](https://rustsec.org/advisories/RUSTSEC-2019-0031.html) for additional details.

Per the spec:

` Verify that a scope parameter is present and contains the openid scope value. (If no openid scope value is present, the request may still be a valid OAuth 2.0 request, but is not an OpenID Connect request.) `

Yet, I'm using this with Dex and I've configured `id_token` as the only scope and it's working.
Otherwise it waits until it's mid-signing-in someone and then panics and exits.
What is the recommended way in Rust to verify the JWT that Portier sends?

I am currently accessing the RSA public components (`n` modulus, and `e` exponent) from `https://broker.portier.io/keys.json` but then what?

I'd like to use https://github.com/Keats/jsonwebtoken#rsa but `jsonwebtoken can only read DER encoded keys currently` and the other Rust JWT decoders all seem to have the same limitation.

Any ideas?
As a grumpy sysadmin I have been able to avoid rust, but unfortunately get more grumpy when presented with just 'install the toolchain' and no mention of the dependencies.

Might be helpful to add a 'dependencies' section for people to run through just before they type `cargo install portier_broker` and get discouraged by what is a really excellent project.

Documentation is hard, you have to write it in a form that acknowledges the other person is intelligent, but have zero experience of what your unique (sorry, Rust is not used by the 99%) build environment is.

Personally I find a formula that works is either:

 - shell script that just does it, so the instructions can say 'run: `sh build.sh`' and those interested can dig into the script
 - verbatim walk the user through what needs typing, it rarely is much, as you can see below (though Ubuntu 18.04 seems broken with its own distributed cargo, so worth noting, 'sorry, you gotta `curl | sudo sh`')

# Pre-flight

## Debian 9
```
apt-get update
apt-get -y install --no-install-recommends build-essential ca-certificates curl gettext libssl-dev pkg-config 
curl https://sh.rustup.rs -sSf | sh /dev/stdin -y
source $HOME/.cargo/env
cargo install portier_broker
```

## Ubuntu 18.04
```
apt-get update
apt-get -y install --no-install-recommends ca-certificates cargo gettext libssl-dev pkg-config 
cargo install portier_broker
```

**N.B.** does not build as `parking_lot_core` implodes with 'use of unstable library feature 'thread_local_state': state querying was recently added (see issue #27716)'
This error message needs some context:

```
ERROR:tokio_proto::streaming::pipeline::client: pipeline error: end of file reached before parsing could complete
```

It's my guess that a discovery HTTP request was interrupted somehow. (I tried to auth using a custom domain setup to use gmail auth, but it dropped back to mail loop.)
The matrix protocol is the most promising attempt at fixing email. Would anyone in the portier project be interested in doing it with matrix? Or can anyone let us know how much work it might be?
Note: Ruma is an alpha rust server
https://github.com/ruma/ruma
It'd be nice to have an API monitoring endpoint that does a quick check of Redis and SMTP connections. We could formalise `/ver.txt` as this.

But I'm also guessing the thing should be optional and disabled on the public broker?
It would be great if the broker were installable via the package manager of linux distros out there. There could be an AUR-package, a gentoo overlay or a build script in the main repo, a PPA or an official debian package, and so on.

See also #134 
We should add:

 - [ ] An example systemd
 - [ ] An example [OpenRC] script
 - [ ] An example cron key rotation script (see #121)

For key rotation, we should mention the effect of `keys_ttl` on clients with cached keys. (#132)

 [OpenRC]: https://wiki.gentoo.org/wiki/OpenRC