
The test code doesn't compile. Unless bumping up the version of ScalaTest to 2.2.4.

I really like subcut. Great Job. I have a small enhancement how to make subcut type safer. When we use BindingId for defining/injecting primitives or special objects then we could make mistakes and use wrong id object. In this case compiler will not catch the mistake and we will learn it during runtime. The below approach allow us to catch some errors during compilation stage.

It defines a new abstract class - TypedBindingId that caries a types of the binding. In this case
when a programmer will try to use wrong ID in the module definition the compiler generates an error.

As an example, the BindingIdObjectsTest.scala is not compiled because it uses a wrong binding.

The injection is not implemented. If it is interesting I could finish the job.

I'm using subcut in some of my projects and I wanted to simplify the use case in which an object needs to retrieve some of the properties from configuration files. 

I added some feature to implement injection similarly to the @value annotation in spring. For example:

``` (scala)
class ToInject(implicit val bindingModule: BindingModule) extends Injectable {
    val stringProperty = injectProperty[String]("property1")
    val intProperty = injectProperty[Int]("property2")
    val longProperty = injectProperty[Long]("property3")
    val floatProperty = injectProperty[Float]("property4")
}
```

Allowing to inject in this way:

``` (scala)
{
  implicit val bindingModule = newBindingModuleWithConfig(PropertiesConfigPropertySource.fromPath("src/test/resources/test.properties"))

   val configReaderInstance = new ToInject
}
```

It supports injection of basic types and allows generic types injection if a custom conversion function is provided.

I think it can help in simplify the code a lot. At least is doing it in my current work.

I read the documentation, changelog and scaladoc this is taken from the changelog:

"Subcut 2.0 now will inject no-constructor-parameter classes and also classes that require only an implicit binding module. It can't reflectively inject other constructor parameters (because, how would you? :-) )"

I'm not a reflection expert, but is not clear if this is technically impossible or not:
Guice recursively injects constructor until gets to the point that knows how to build the injected object, can't subcut just do the same and look up the bindings its map?
Again, don't know about facilities offered by Scala reflection, but since Guice does this in Java I expect it to be feasible in Scala as well.

The reason why this would be useful is so that you can always use bindIfMissing and in test just build the object calling the constructor passing teststubs as parameters without bothering messing with fake bindings.

On the other hand would probably make more complex what in Guice is called assisted injection (having part of the parameters in the constructor injected and part passed) which in subcut comes for free while in Guice is kind of painful probably because of the fact that it needs to always know exactly how to inject the constructor.
https://code.google.com/p/google-guice/wiki/AssistedInject

Feel free to close this if it's either not feasible or too much work/out of scope, just wanted to understand if there's a technical block.

Thanks,

Currently in order to add more bindings you can either combine modules (~/andThen) or mergeWithReplace (also withBindingModules but has the limitation that applies only to empty modules)

Problem with 1: it returns a combined module so you'll end up having to manually combine in the main module all your submodules

Problem with 1 and 2: mergeWithReplace allows you to distribute module installation as in Guice  and mix it into modules that already contain bindings which is nice
Eample
Mod A:
bind a to ...
bind b to ...
withMergeReplace(Mod B)

ModB
bind c to ...
etc...

The only problem is that both andThen and mergeWithReplace apply overriding policies and so you could end up wiping a binding without knowing it because the project is broad, Guice throws an exception at runtime complaining about accidental (not forced override) double bindings.

Would it be possible to add something similar to Guice binder.install? Which basically is exactly withMergeReplace without replacing and signaling an accidental double binding.

http://google-guice.googlecode.com/git/javadoc/com/google/inject/Binder.html#install(com.google.inject.Module)

Thanks

A support of multibindings would be nice feature. What do you think?

Informations about multibindings:

http://code.google.com/p/google-guice/wiki/Multibindings
https://github.com/ninject/ninject/wiki/Multi-injection
