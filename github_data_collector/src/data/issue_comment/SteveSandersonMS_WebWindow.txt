I can't seem to get the blazor sample to work. the other sampes (normal html and vue.js) work just fine. but when i open the blazor one the it show's the edge bug :

Hmmmâ€¦ can't reach this page
It looks like the webpage at https://app/ might be having issues or it may have moved permanently to a new web address.
ERR_NAME_RESOLUTION_FAILED

what to do?
`WebWindow::_movedCallback` and `WebWindow::_resizedCallback` fields should be initialized to `nullptr` in beginning of constructor. I got callbacks called before they was set and got SIGSEGV because callbacks contains random address.
The application works. Except adding SchemeHandlers. The application opens but no message box is displayed. But that should be the case.
Because:
<script src="app://something.js"></script>
When I open the developer tools and look in the console, I see the following:
something.js/:1 Failed to load resource: net::ERR_UNKNOWN_URL_SCHEME

I USE:
Microsoft Edge
Microsoft Edge is up to date.
Version 81.0.389.2 (Official build) dev (64-bit)

Microsoft Visual Studio Professional 2019 Preview
Version 16.5.0 Preview 1.0

What about mobile (Android / iOS)? Could this technology be adapted to also support building mobile apps. It would be exciting if one could build existing Blazor app to mobile app. 

It would be a sort of alternative to PWA. The PWA experience is still not super great on most platforms. Hopefully it will get there so there would be no need for alternate solutions but oh well.
There are several issues in this site that mention the same problem (#1, #6, #42): it's not apparent how to get started with WebView in Windows. When you first try to run the samples, you get exception right from the `WebWindow` constructor.

All the resolved issues mention that you have to install Edge Beta from here https://www.microsoftedgeinsider.com/en-us/. **Well, this is just a part of the solution.**

I suggest to add this information to README:

Running **WebWindow** on Windows has these prerequisites, as of this writing:
1. Edge Beta, as **WebWindow** uses the new Chromium-based Edge via webview2
2. **Microsoft Visual C++ 2015-2019 Redistributable**

Those developers who use Visual Studio 2019 for .NET desktop development without the **Desktop development with C++** workload installed, will still get the `WebWindow` constructor exception.

Follow these steps to run samples on your Windows machine:

1. If you've installed Visual Studio 2019 on your computer, ensure that the **Desktop development with C++** workload installed.
2. Altentatively, if you do not want to install that workload, install **Microsoft Visual C++ 2015-2019 Redistributable** (x86: https://aka.ms/vs/16/release/vc_redist.x86.exe, x64: https://aka.ms/vs/16/release/vc_redist.x64.exe)
3. Install Edge Beta (https://www.microsoftedgeinsider.com/en-us/.)

Now, the samples should work when running them from Visual Studio 2019/.NET CLI

Hi Steve, and thanks for your work, its amazing again.

I try to convert my blazor app to include it in your webWindow but im facing on some problems on the dependency injection.

when it register my services where a HttpClient is inject on the constructor, there is an error (launch in a separate window)

Unable to resolve service for type "System.Net.HttpClient" While attempting to activate MyService

I try to install the package Microsoft.Extensions.Http and add services.AddHttpClient(); on the beginning of ConfigureServices in the Startup, but still not work.

You have an idea on whats happen ?

thanks !

Julien

PS : it can be nice on the error view to have a scrollbar and can select text inside. actually if the stack is too long wee don't see all the exception.

Added switch case for the WebAssembly file (.wasm) MIME type "application/wasm" to ComponentDesktop.GetContentType
Re-opening after fixing all of Steve's suggestions.  I re-based and force pushed, which would not allow me to push to the previous PR.

For Reference.
https://github.com/SteveSandersonMS/WebWindow/pull/44 
Hi! Would it be feasible to make the web assets an embedded resource and extract on first load? Or even mimic a virtual file system to the browser? Interested in .Net Core single-file publishing for copy-paste portable desktop apps.