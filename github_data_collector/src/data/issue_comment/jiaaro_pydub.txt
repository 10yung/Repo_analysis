Right now, assertWithinTolerance will never fail.
The changes i made fix that, while avoiding making tests fail that should not.

Changes:
* fix assertWithinTolerance
* make assertWithinRange to be inclusive.
    * test_set_channels fails otherwise.
* increase tolerance for test_speedup from 1% to 2%
    * It fails by a small amount otherwise.
    * The speedup function cannot be expected to always change the length by the factor to 1% precision.

After these changes, the test_dBFS fails as it should.
I have another bug fix that will resolve this error, which i will submit in another pull request.

How to convert ADTS stream to PCM with this libï¼Ÿ
### Steps to reproduce
The code I'm running looks close to this:

```
    for paragraph in enumerate(paragraphs):
        audio = text_to_mp3(paragraph)
        concatenated += AudioSegment.from_mp3(io.BytesIO(audio))
```

### Expected behavior
This works fine for a small amount of paragraphs. The mp3's are concatenated correctly. 

### Actual behavior
For a large number of paragraphs, the program crashes with:
```
OSError: [Errno 24] Too many open files
```
At line 3 of the code example

### Problem
AudioSegment.from_mp3(io.BytesIO(audio)) shouldn't be opening any filestreams to my knowledge, and crashes eventually when too many filestreams are opened. Is there some way to manually close down the file streams that are opened once they are not used?

### Your System configuration
- Python version: 3.7.5
- Pydub version: 0.23.1
- ffmpeg or avlib?: avlib
- ffmpeg/avlib version: 12.3_2

### Is there an audio file you can include to help us reproduce?
Any large number of audio files will work.
### Steps to reproduce

      utterance = AudioSegment.from_wav(wavFile_path)

      utterance.export("test.wav", format='wav')


### Expected behavior
Tell us what should happen
'Test.wav' should be identical to original.

### Actual behavior
Tell us what happens instead
 I get a distorted version of the file. 

### Your System configuration
- Python version: 3.7
- Pydub version: 0.23.1
- ffmpeg or avlib?: ffmpeg
- ffmpeg/avlib version: 4.2.1

### Is there an audio file you can include to help us reproduce?
WAV file:
frame_rate = 48000
sample_width = 24bit, (converted to 32bit by default)
channels = 2
duration: 3 seconds


### Extra info
I replicated the process using the 'soundfile' module and it worked perfectly. Is there a way to take Pydub's Audiosegment data and pass it into 'soundfile' ? ( i tried the following to no avail)


      samples = utterance.get_array_of_samples()

      samples = np.array(samples)

      samples = samples.reshape(cleantalk.channels, -1, order='F')

      samples.shape  # (<probably 2>, <len(song) in samples>)

      soundfile.write('soundfile.wav', samples, 48000, subtype='PCM_24')

Enormous files can cause fix_wav_headers() to bomb out. It'd be great if they could be properly parsed, but failing that, at least raise CouldntDecodeError instead of crashing out with a struct error.
Currently, certain files will fail to parse, but instead of raising CouldntDecodeError, they bomb with KeyError due to the stderr information being misparsed. This small tweak to the regex should allow them to be parsed correctly.
Closes #429 
### Steps to reproduce
Examine detect_silence method in pydub.silence

### Expected behavior
Should read searched.

### Actual behavior
It actually reads seached.
Deleted
### Steps to reproduce
* Have multiple WAV files
* Generate a 3 second silent WAV object using audioSegment.silent()
* concatenate these two WAV files with the 3 second silence between them, using the + operator.  
 

### Expected behavior
Tell us what should happen
There should be complete silence (with no audio in the 3 second between the WAV files)
### Actual behavior
Tell us what happens instead
At the end of the silence period, there is a sharp click heard. 
### Your System configuration
- Python version: 3.7.4
- Pydub version: 0.23.1
- ffmpeg or avlib?: ffmpeg
- ffmpeg/avlib version: ffmpeg version 3.4.6-0ubuntu0.18.04.1 Copyright (c) 2000-2019 the FFmpeg developers

### Is there an audio file you can include to help us reproduce?
Yes, see this link https://github.com/rupin/WrittenAudio/blob/master/combined%20audio.wav
You can include the audio file in this issue - just put it in a zip file and drag/drop the zip file into the github issue.

You can download the audio file from the github link https://github.com/rupin/WrittenAudio/blob/master/combined%20audio.wav

Code that generated that audio file 
https://github.com/rupin/WrittenAudio/blob/master/createAudio.py


