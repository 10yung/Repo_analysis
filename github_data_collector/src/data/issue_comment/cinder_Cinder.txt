This will allow `std::vector<Connection>` and `std::vector<ScopedConnection>` to resize a little more efficiently. Was only waiting until our minimum compiler on MSW was v140 which is now the case.

Fixes #1681. That issue is marked for 0.9.2 milestone, although this is a pretty minor modification so it can be merged before or after that lands.
I cannot get this signal to emit when moving an app from my laptop to an external monitor.

I'm trying to handle ImGui content scaling changes when the monitor changes but I have to trigger a resize manually instead to do this.

Do I have to do something to enable this signal or is this a new issue?
In an ortho box, the area of the near and far sides are the same. I needed to override the getFarClipCoorinates to not use the 'ratio' factor
MovieGl signals in linux seem to be never called.
Consider the following situation:
```
{
    gl::ScopedFrameBuffer scpFbo1( mFbo1 );
    // Fbo 1 is now bound and marked as dirty.
    
    setViewportAndDrawSomething();

    {
        gl::ScopedFrameBuffer scpFbo2( mFbo2 );

        // Fbo 1's color texture is resolved and returned. Fbo 1 is no longer marked as dirty.
        const auto colors = mFbo1->getTexture( GL_COLOR_ATTACHMENT0 );

        drawSomethingUsing( colors );
    }

    // We can still draw to Fbo 1, but its texture will not be resolved unless
    // we explicitly mark the Fbo as dirty.
    drawSomethingElse();
}

// Texture is not resolved and won't contain the elements drawn in `drawSomethingElse()`.
const auto oops = mFbo1->getTexture( GL_COLOR_ATTACHMENT0 );

mFbo1->markAsDirty();
const auto yay = mFbo1->getTexture( GL_COLOR_ATTACHMENT0 );
```
I ran into this particular sequence of calls while working on my latest project and it took more than 4 hours of debugging to find out why my content wasn't showing up. Would it be possible to automatically flag Fbo 1 as dirty when it's bound again after Fbo 2 is popped?

-Paul
Here's another example:

https://github.com/google/angle/blob/master/src/tests/gl_tests/FenceSyncTests.cpp#L257
Recently I ran into a situation that I need two versions for my program: command-line version and GUI version. By default, Cinder app compiles into a GUI version. Is there a command-line mode for the macro CINDER_APP? Maybe this requires a different entrance function other than the "setup-draw-update" loop, but it can reuse most of the other functions in the GUI version.
When I compile the samples/Renderer2dBasic in Ubuntu, I got the following error. Can anyone advise me how to fixe it?
Renderer2dApp.cpp:66:28: error: invalid use of incomplete type ‘class cinder::app::Renderer2d’


__________________________________________________________________________________________
eli@eli-UX310:build$ make -j4
-- Configuring done
-- Generating done
-- Build files have been written to: /home/eli/git/Cinder/samples/Renderer2dBasic/proj/cmake/build
Scanning dependencies of target Renderer2dBasic
[ 50%] Building CXX object CMakeFiles/Renderer2dBasic.dir/home/eli/git/Cinder/samples/Renderer2dBasic/src/Renderer2dApp.cpp.o
In file included from /home/eli/git/Cinder/include/cinder/app/App.h:59,
                 from /home/eli/git/Cinder/samples/Renderer2dBasic/src/Renderer2dApp.cpp:1:
/home/eli/git/Cinder/samples/Renderer2dBasic/src/Renderer2dApp.cpp: In function ‘int main(int, char**)’:
/home/eli/git/Cinder/samples/Renderer2dBasic/src/Renderer2dApp.cpp:66:28: error: invalid use of incomplete type ‘class cinder::app::Renderer2d’
 CINDER_APP( Renderer2dApp, Renderer2d )
                            ^~~~~~~~~~
In file included from /home/eli/git/Cinder/include/cinder/app/AppBase.h:29,
                 from /home/eli/git/Cinder/include/cinder/app/linux/AppLinux.h:26,
                 from /home/eli/git/Cinder/include/cinder/app/App.h:59,
                 from /home/eli/git/Cinder/samples/Renderer2dBasic/src/Renderer2dApp.cpp:1:
/home/eli/git/Cinder/include/cinder/app/Renderer.h:133:31: note: forward declaration of ‘class cinder::app::Renderer2d’
 typedef std::shared_ptr<class Renderer2d> Renderer2dRef;
                               ^~~~~~~~~~
make[2]: *** [CMakeFiles/Renderer2dBasic.dir/build.make:66: CMakeFiles/Renderer2dBasic.dir/home/eli/git/Cinder/samples/Renderer2dBasic/src/Renderer2dApp.cpp.o] Error 1
make[1]: *** [CMakeFiles/Makefile2:76: CMakeFiles/Renderer2dBasic.dir/all] Error 2
make: *** [Makefile:84: all] Error 2


Inspired by https://forum.libcinder.org/topic/getting-the-delta-value-of-single-frames to get the delta in seconds between the last update and the current update.
Cinder's current cmake system actually works well on Windows, but the runtime library is fixed to MT which is not the default setting of other cmake projects. When cinder is used together with other cmake based MSW projects, the setting should have a switch to change between MT and MD.