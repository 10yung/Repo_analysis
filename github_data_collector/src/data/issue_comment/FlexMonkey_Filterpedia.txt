- update swift syntax from swift 2 to swift 4.2
- adds support for iPhone (landscape orientation only) 
- fix some GLSL and metal relation crashes
- update .gitignore and remove .xcuserstated from the repo
Most of the edits were actually pulled from another fork I picked at random that fixed the swift 3 build issues.

However, I noticed that a lot of filters has horrible slider ranges and default values (I believe as a result of the swift 3 conversion), so I found the issue and cast the filter values as NSNumbers and then used the "floatValue" of an NSNumber to get those min, max, and default values, instead of casting NSNumbers as Float.
Many of the Filters Including EightBit, CRT, Bayer Dither, Lens Flare, Lens Correction etc.  based on CIKernel are crashing due to new changes.


`ERROR: parameter has unexpected type 'vec4' (should be a sampler type)
   vec2 uv = samplerCoord(image); `

This seems to be a common error message among most crashing filters. please check.
Any chance of publishing this for Mac OS too? 

I'd LOVE to help - but I'm struggling myself with applying CIFilters onto live camera input on Mac OS, and I seem to miss some of the basics there.

Otherwise - I'm very experienced in Application design and development. Please let me know if you're interested.
In my tests, your `MetalKuwaharaFilter` is actually 50% slower then `KuwaharaFilter` however [here](https://dzone.com/articles/metal-kernel-functions-as-core-image-filter-engine) Simon mentions Metal is supposed to be 50% faster. 

Any idea why it is like that?
some function Attributes that override from class CIFilter must change from [String: AnyObject] to [String: Any]
## Compile on Xcode Version 8.2.1 (8C1002), swift-3

* Updated input arguments of _vImageHistogramCalculation_ARGB8888_ for Swift3
* Adjusted input arguments of _vImageHistogramSpecification_ARGB8888_ for Swift3
* Clicked a lot of "Fix it" hiding behind little red circles with a white dot in them ðŸ˜’ 
* Performed short sanity to make sure calls to _vImageHistogramXXX_ are okay
* Made sure it also compiles with non-simulator targets
* Made sure it also runs the custom-Metal shaders

## Known issue: Custom Metal filter only show the output if they are selected before any other filter
Hello. Love your book. (We met briefly at a conference a while ago, btw.)

Anyway, I've updated the project so it builds on Swift 3 with zero errors or warnings.

I have not rigorously tested this. I just wanted to get it running so I could play with it. But it seems to work.

Mostly this was automatic updates except for the following manual changes:

- AnyObject -> Any
- breaking out some tricky double-dictionary unwrapping with optionals into a function
- Adding an optionals within a nested UnsafePointer structure to use it with vImage.
- updates to remove deprecated GCD methods


Hello, I tried to convert HistogramDisplay to Swift 3 but I have a problem with this lines of code:

```
 let histogram = UnsafeMutablePointer<UnsafeMutablePointer<vImagePixelCount>>(mutating: rgba)       
 vImageHistogramCalculation_ARGB8888(&inBuffer, histogram, UInt32(kvImageNoFlags))
```

the vImageHistogramCalculation_ARGB8888 method is still same as in Swift 2.3 but I can't properly initialized an optional UnsafeMutablePointer<UnsafeMutablePointer<vImagePixelCount>> method. Some ideas? :)

I received the error:

>: Cannot invoke initializer for type 'UnsafeMutablePointer<UnsafeMutablePointer<vImagePixelCount>?>' with an argument list of type '(mutating: [UnsafeMutablePointer<vImagePixelCount>])'
