
### Expected behavior

Expect to be able to drag `Draggable`s and have other `Draggable`s react accordingly

### Actual behavior

Allows to drag `Draggable`, but other `Draggable`s do not move accordingly, and when dropped will not detect that it has been dragged, and will revert to its initial position

### Steps to reproduce

This happens on all code using the library I have seen including the demos page

### What browser are you using?

Chrome Version 78.0.3904.108 (Official Build) (64-bit)

### Demo

Go to the card board demo

https://kutlugsahin.github.io/smooth-dnd-demo/

And try dragging with varying speeds and heights

![Screen Recording 2019-12-06 at 11 30 43 AM mov](https://user-images.githubusercontent.com/8306435/70339904-b2bbed00-181d-11ea-8c25-b2d7e018317a.gif)

Removing the classes `.demo` and `.app` from the root of this demo makes it worse and means no dragging detection ever happens
Hello @kutlugsahin, I have 3 nested `<Container/>` and while dragging an item in the 3rd inner container then it is adding in two parent containers as well, Please answer?
  ```
<Container onDrop={this.onDropOne}>
    <Draggable>
         <Container onDrop={this.onDropTwo}>
              <Draggable>
                  <Container onDrop={this.onDropThree}>
                    <Draggable></Draggable>
                  </Container>
              <Draggable>
         </Container>
   </Draggable>
</Container>
```
Are there any plans to create a Droppable Component ? 
what i mean by that is to have a Droppable just like a Draggable. i think the benefits for that are clear 
I've been using your library to implement drag and drop server tabs for https://github.com/mattermost/desktop. We're using the `Nav` component from `react-bootstrap` and I ran into a couple issues when working with this library.

**1) Need to be able to apply a base class when wrapping `Draggable` with a `render()` function:**
I noticed that when supplying my own `render()` function to the `Draggable` component that my `className` was getting overwritten by the default `wrapperClass`. My change adds the `className` prop already built into `Draggable` to the `React.cloneElement()` function so that both `classNames` are included in the finally rendered element.

**2) Need to be to supply React components as `render()` results when wrapping with `Container`:**
When I supplied the `render()` function to `Container` where the result was a `Nav` component from `react-bootstrap`, I got a white screen from React. I noticed that your original library expected an `HTMLElement`, which makes perfect sense, but the `Container` wrapper passed the exact output of `render()` which was a `React.Component`. My change finds the actual `HTMLElement` if it exists and passes that to the `container()` function, such that it will always be an `HTMLElement`.

Let me know your thoughts on these changes and if you think they would be helpful to this project :). I welcome any suggestions!
If you hit the ESC key when dragging a `draggable-item`, from one container to another, we see this exception:

```
Uncaught TypeError: Cannot read property 'cancelDrop' of null
```

Here's what a portion of the render method looks like for this component that's having issues with the ESC key:

```
return (
            <div className="form-layout__wrapper">
                <div className="form-layout__column-wrap">

                    <div className="form-layout__left-column">
                        <Container groupName="1"
                                   behaviour="copy"
                                   dropPlaceholder={{
                                        animationDuration: 150,
                                        showOnTop: true,
                                        className: 'cards-drop-preview'
                                   }}
                                   getChildPayload={i => formFields[i]}>
                            {
                                formFields.map((field, i) => {
                                    return (
                                        <Draggable key={i} className={"draggable-" + field.name}>
                                            <div className="draggable-field">
                                                <span className="form-layout__field-type-icon"><FontAwesomeIcon icon={field.icon} /></span> {field.label}
                                            </div>
                                        </Draggable>
                                    );
                                })
                            }
                        </Container>
                    </div>

...

<Container groupName="1"
    getChildPayload={i => this.state.addedFields[i]}
    dropPlaceholder={{
            animationDuration: 150,
            showOnTop: true,
            className: 'cards-drop-preview'
    }}
    onDrop={this.handleOnDrop}>
```

Also, here's a screenshot of the error happening when the ESC key is pressed:
![ch2478NmhC](https://user-images.githubusercontent.com/1171416/63709825-893a0100-c7ec-11e9-80af-5d23a5909dfd.gif)

A really minor 'problem': 
the draggable component's render documentation says it recieves the 'ref ' parameter, when it doensn't happen.

Container:120 >> return this.props.render(this.containerRef);
Draggable:21 >> return React.cloneElement(this.props.render(), { className: wrapperClass });

I might try and just do this myself, but I'm hitting some performance issues when there's a lot of draggables, presumably because it's using top/left rather than translate. 

@kutlugsahin do you have any plans to modify this to use transforms? I assume it'd be pretty easy. 
It appears that whenever `behaviour` is set to `drop-zone`, if you drag an element _from_ that container and cancel the drag, it flies off to the left of the container - this happens with every element in the list. 

Looks as if perhaps they all think they're the first item in the list?

Has anyone encountered this before?
Hey @kutlugsahin ,

I was trying to add a placeholder feature to my editor but it seems not working in my code but it's working smoothly in cardboard & your provided URL: https://codesandbox.io/s/4xk3yl8247?fontsize=14
Added same properties in the code as shown in the document? Please help?