http://its-not-its.info/
Hi!

The [Compute Particles example](https://github.com/SaschaWillems/Vulkan/blob/master/examples/computeparticles/computeparticles.cpp) uses vkCmdPipelineBarrier on lines 197 and 223 with the pipeline stage VK_PIPELINE_STAGE_VERTEX_SHADER_BIT respectively as srcStageMask and as dstStageMask. VK_ACCESS_VERTEX_ATTRIBUTE_READ_BIT is used by both barriers as respectively the srcAccessMask and dstAccessMask. However, the [Vulkan specification](https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#synchronization-access-types-supported) indicates that VK_ACCESS_VERTEX_ATTRIBUTE_READ_BIT can only be used with a corresponding pipeline stage of VK_PIPELINE_STAGE_VERTEX_INPUT_BIT (as opposed to VK_PIPELINE_STAGE_VERTEX_SHADER_BIT). This is also picked up by the core validation layers. If this is indeed a typo in the code, is it meant to read VK_PIPELINE_STAGE_VERTEX_INPUT_BIT as the pipeline stage for both barriers?

Cheers!

This PR adds a .clang-format file to the root of the repository, and also reformats the contents of the `base` directory based on this file.  

I've attempted to setup the format file to produce the minimal possible changes, although I wasn't able to produce one that created NO changes, mostly due to 

* inconsistent use of spaces vs tabs in the code... clang format will reformat to one or the other
* inconsistent use of brace positioning in the code
* some small items I don't know how to tell clang-format to do


pbrtexture: /home/wjl/github/Vulkan/base/VulkanTexture.hpp:114: void vks::Texture2D::loadFromFile(std::__cxx11::string, VkFormat, vks::VulkanDevice*, VkQueue, VkImageUsageFlags, VkImageLayout, bool): Assertion `result == KTX_SUCCESS' failed.
Aborted (core dumped)

GDB results:
1 __GI_raise                   raise.c           51   0x7ffff53cae97 
2 __GI_abort                   abort.c           79   0x7ffff53cc801 
3 __assert_fail_base           assert.c          92   0x7ffff53bc39a 
4 __GI___assert_fail           assert.c          101  0x7ffff53bc412 
5 vks::Texture2D::loadFromFile VulkanTexture.hpp 114  0x5555555aac7a 
6 VulkanExample::loadAssets    main.cpp          212  0x5555555b05ab 
7 VulkanExample::prepare       main.cpp          1423 0x5555555baec8 
8 main                         main.cpp          1462 0x5555555a7d73 

Break point:
textures.aoMap.loadFromFile(ASSET_PATH "models/cerberus/ao.ktx", VK_FORMAT_R8_UNORM, vulkanDevice, queue);
Improve the documentation with blueprints in SVG+PNG format, for each of the current and future examples.
This extension was promoted to core, and there are various implementations which support *only* the core version.

There seems to be no precedent for samples doing something different in a 1.1 environment though, so unsure how you want to do this.
https://github.com/SaschaWillems/Vulkan/blob/e1e348ac7a5b468aadc958bfd998497d6570cb49/base/VulkanUIOverlay.cpp#L75

Currently VulkanUIOverlay references the "Roboto-Medium.ttf" by relative path to the compiled binary which can results in the following error:

![image](https://user-images.githubusercontent.com/7351935/68068585-4cacf780-fd91-11e9-9caf-bf45ca3b6e1c.png)

I suggest using getAssetPath() for all data file accessing which is defined in:
https://github.com/SaschaWillems/Vulkan/blob/e1e348ac7a5b468aadc958bfd998497d6570cb49/base/vulkanexamplebase.cpp#L106




Two minor changes:
* Added the `NUM_SHADER_GROUPS ` macro to the ray_tracing_basic example
* Removed the unused `VkDeviceSize offset` variable from all ray tracing examples.
* Removed unnessessary line `data += shaderGroupHandleSize;` in the `copyShaderIdentifier` function.

Enchancement suggestion. Add examples of water reflect and refract