**Describe the bug**
The request comes to the server like this:
```
{
    "variables": {},
    "query": "...",
    "operationName": {}
}
```
Server cannot deserialize `operationName` as it expects a `String` there but found an object `{}`.
Any particular reason you want to make it an object? 
in some previous version it didn't supply `operationName` field at all and it worked perfectly.

**To Reproduce**
Steps to reproduce the behavior:
1. Enter any query
2. Click on "Send Request"
3. See error

**Expected behavior**
Request can be deserialized on the server.

**Screenshots**
`-`

**Desktop (please complete the following information):**
 - OS: macOS Catalina 10.15.2
 - Browser [`-`]
 - Platform: [desktop app]
 - Version [2.4.3 (2.4.3.5607)]

**Additional context**
[Same for playground client](https://github.com/prisma-labs/graphql-playground/issues/1122)
Enjoy!
**Describe the bug**
Line numbers overflow query result

![image](https://user-images.githubusercontent.com/327717/72464735-24506900-37d6-11ea-8a46-cd163fd4de30.png)


**To Reproduce**
Steps to reproduce the behavior:
1. Open new window
2. Run query

**Expected behavior**
![image](https://user-images.githubusercontent.com/327717/72464784-3df1b080-37d6-11ea-96b7-7754f2f7b493.png)


**Desktop (please complete the following information):**
 - OS: macos
 - Platform: Chrome extension, desktop app
 - Version: Version 2.4.3 (2.4.3.5607)

Nice app - thanks!

But, please get a new icon.  Just looking at this thing in my dock gives me a headache. :)
**Describe the bug**
CPU Usage in Safari is Very High on MacOS.

**To Reproduce**
1. Load up Altair in Safari
2. Submit a Query
3. Watch the CPU Usage Skyrocket

**Expected behavior**
I expect the CPU usage to remain normal.

**Desktop (please complete the following information):**
 - OS: macOS 10.15.2 (but also experienced this on previous versions of macOS, including 10.14)
 - Browser Safari 13.0.4 (but also experienced this on previous versions of Safari)


Submitting a request to allow customization of the default value of addQueryDepthLimit through application.properties, etc. By default the value is 3, so a user using the "ADD QUERY" links will get an incomplete query for complex objects. Yes, the user can change the setting of this in the settings pane, but that would require educating the user in most cases. It is not "easily discoverable".
**Describe the bug**
Error message: app-update.yml not found. Notice that i couldn't update Altair via Snap, i removed v2.3.8 to got v2.4.0

**To Reproduce**
Steps to reproduce the behavior:
1. Launch Altair

**Expected behavior**
No error message

**Screenshots**
![altair-issue](https://user-images.githubusercontent.com/22281426/71313122-b615c200-2434-11ea-85f7-54a1b8d244c3.png)

**Desktop (please complete the following information):**
 - OS: Ubuntu
 - Version: 18.04.3 LTS

## Is your feature request related to a problem? Please describe.
We'd like to stand-up our own instance of Altair to serve as an editing playground for our various GraphQL environments (prd/stg/dev). They each require their own headers (tokens) and endpoints. We also need the ability to "deep-link" copy & pastable URLs so that we can share full queries amongst developers to ease debugging.

We've implemented this with GraphQL Playground (which we'd like to switch to Altair due to the staleness of the GraphQL Playground project) like so:

![image](https://user-images.githubusercontent.com/244704/70368251-533dfb80-1876-11ea-8933-243c2c4777b1.png)

It's conceptually similar to "Copy CURL" but the "Copy to Share" copies a "deep-link" URL that includes the following:

```typescript
type ShareableObj = {
  q: string; // query
  v: string; // variables
  e: string; // endpoint
};  
```

We opted not to include the `headers` since those include secret tokens and we leave it up to the developers to communicate which "environment" the query should be run against. In most cases, it's the default of production.

## Proposed Solution
There are some considerations involved with "deep-linking". For example, would we require a backend persistence layer so that we can shorten the URLs? Or is it enough to "base64-encode" the full query (and other necessary settings) as part of the URL (would result in very large URLs, but that may be ok!).

### The URL itself
At least for the initial implementation, we're fine with large URLs. We currently use [lz-string](https://www.npmjs.com/package/lz-string) (`LZString.compressToEncodedURIComponent(string);`) to compress the URL as much as possible -- it still results in very long URLs, but at least it's stateless and doesn't require a backing service. We're open to other approaches though, but would like to start off with something simple.

### What information/settings to include?
When a user clicks to "Copy to Share" at the very least, we need the `query` and `variables`, but would also like to have the `environment` and `endpoint`. In order to protect potential secrets, the "environment" doesn't actually need to be the full set of environment variables, but rather the id or name of the environment that can be auto-selected when navigating to the deep-link (if it's not there, then leaving it on whatever environment the user has is fine).

### What happens when the user navigates to the deep-link? The second time?
When a user navigates to a shared deep-link, a new "tab" is created with the query and variables from the URL. The environment is auto-selected if the user has an environment with that same name available (if not, whatever environment the user has selected is fine). The endpoint is also entered if included as part of the deep-link. (As an aside: We actually plan to tie the endpoint to the environment so the endpoint will always be `{{endpoint}}` and the various environments defined will provide the endpoint URL.)

We can clear the URL deep-link after instantiation so that when the user refreshes it doesn't re-create the new tab. If the user actually navigates to the full deep-link a second time, then a new tab would be created.

### What about the API

The way we were able to pull this off in GraphQL Playground is by relying on the fact that they expose their redux action creators, selectors and reducers. So, we literally do something like this:

```typescript
import {
  store,
  getQuery,
  getVariables,
  getEndpoint,
  newSession,
  editQuery,
  editVariables,
} from "graphql-playground-react";

/**
 * Creates a deep-linkable URI with the "current window" settings
*/
export const compressUri = (): string => {
  const state = store.getState();

  const sessionUri: ShareableObj = {
    q: getQuery(state),
    v: getVariables(state),
    e: getEndpoint(state),
  };

  return lz.compressToEncodedURIComponent(JSON.stringify(sessionUri));
};

/**
 * Creates a new Tab with the given (e)ndpoint, (q)uery, (v)ariables
 */
export const newTab = ({ e, q, v }: ShareableObj): void => {
  store.dispatch(newSession(e, true));
  store.dispatch(editQuery(q));
  store.dispatch(editVariables(v));
};
```

We could take the same approach in Altair if you'd rather not change much of the internal API (would just require exposing the redux store etc on `window` so that it can be accessed and actions dispatched).

However, if you're open to having this be a fist-class feature in Altair I'm happy to explore ideas around how to build this directly into the app.

**Describe alternatives you've considered**

One alternative is to modify localStorage before the app loads and injecting the necessary state. This would obviously be brittle and prone to bugs especially as/if the shape of the localStorage changes.


Hi.

![Screenshot from 2019-12-04 22-09-52](https://user-images.githubusercontent.com/28584151/70145183-d7f81080-16e2-11ea-85b0-5ccc48cf3e80.png)

This is a review I left on [the firefox addon page](https://addons.mozilla.org/en-US/firefox/addon/altair-graphql-client/reviews/). 

What I meant by "multiple docs" was like this Prisma Playground feature.

![Screenshot from 2019-12-04 22-06-38](https://user-images.githubusercontent.com/28584151/70145371-3d4c0180-16e3-11ea-8b18-e097d2325b8b.png)

P.S I think addon itself is very convenient idea by the way.
**Describe the bug**
When launch as Ubuntu app (installed via snap) you have error: `ENOENT: no such file or directory, open '/snap/altair/39/resources/app-update.yml'`

**To Reproduce**
Steps to reproduce the behavior:
1. On Ubuntu 18.04 LTS in console run `sudo snap install altair`
2. Run application via console or GUI

![Screenshot from 2019-12-04 14-18-00](https://user-images.githubusercontent.com/1913187/70142001-f0473b80-16a0-11ea-8173-c302959a6929.png)

