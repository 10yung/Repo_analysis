Nom 5.0 removes macros and should make the parser much easier to work on for people unfamiliar with `nom`. This is currently blocked by `nom_locate` supporting `nom` 5: https://github.com/fflorent/nom_locate/pull/23
agrind should be able to output structured, computer readable data in addition to the current human readable output format
- JSON
- YAML
- logfmt

I think this would fit best currently with a `--output/-o` flag in addition to the query but I could also imagine something like a `format(<format>)` operator. I'm curious what power users of agrind think.
Just discovered this project ( which is an awesome idea, btw ); I wonder if it supports `| yaml` -- and if not, then how hard it would be to add that ?
Hi,

I have the following JSON format:

{"dst_host": "159.65.224.130", "dst_port": 23, "honeycred": false, "local_time": "2019-01-23 11:57:11.834296", "logdata": {"PASSWORD": "1111", "USERNAME": "root"}, "logtype": 6001, "node_id": "opencanary-1", "src_host": "41.139.253.2", "src_port": 36653}

How would I get agrind to also parse the logdata field?

TIA!

There are currently several places in the language where we accept arbitrary expressions:
1. In the clause of `where`
2. In the argument of aggregates (`sum(xyz)`), 
3. In the group-by clause of aggregates (`* | count by status_code > 500, response_ms < 300, url`)

The set of arbitrary expressions that can be constructed is growing, and it'd be great to have those documented separately where they could be linked to within the README so people could have a full understanding of what they could use.
I am imagining something like the workflow Ultimate Plumber (https://github.com/akavel/up) provides.

n.b. None of these issues are demands or even requests! It's more I am wondering about things I might want to hack on, and soliciting feedback on whether you would welcome them or not before I get started.
Although it would only be a built-in implementation of  `tail -F -n +0 file.log | agrind ...`, so if you don't want this complexity it would be understandable.

Operators can return `Result<.., >`. The expression machinery already supports it. The renderer needs to support it as well.
something like `--passthrough` 

If a line isn't matched by the pipeline, it will be printed as-is to stderr.