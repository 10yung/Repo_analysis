Updating model to leverage more recent docker functionality
in the readme under specgen folder it reads
> go get -u foo/bar
> godep update foo/bar

what is this foo/bar thing?

Most importantly how do I regen the model using the most recent API?
<!--
If you are reporting a new issue, please first search for a matching issue in
this repository.

-->


**Output of `dotnet --info`:**
```
.NET Core SDK (reflecting any global.json):
 Version:   3.0.100
 Commit:    04339c3a26

Runtime Environment:
 OS Name:     Windows
 OS Version:  10.0.18362
 OS Platform: Windows
 RID:         win10-x64
 Base Path:   C:\Program Files\dotnet\sdk\3.0.100\

Host (useful for support):
  Version: 3.0.0
  Commit:  7d57652f33

.NET Core SDKs installed:
  2.1.509 [C:\Program Files\dotnet\sdk]
  2.2.104 [C:\Program Files\dotnet\sdk]
  3.0.100 [C:\Program Files\dotnet\sdk]

.NET Core runtimes installed:
  Microsoft.AspNetCore.All 2.1.13 [C:\Program Files\dotnet\shared\Microsoft.AspNetCore.All]
  Microsoft.AspNetCore.All 2.2.2 [C:\Program Files\dotnet\shared\Microsoft.AspNetCore.All]
  Microsoft.AspNetCore.App 2.1.13 [C:\Program Files\dotnet\shared\Microsoft.AspNetCore.App]
  Microsoft.AspNetCore.App 2.2.2 [C:\Program Files\dotnet\shared\Microsoft.AspNetCore.App]
  Microsoft.AspNetCore.App 3.0.0 [C:\Program Files\dotnet\shared\Microsoft.AspNetCore.App]
  Microsoft.NETCore.App 2.1.13 [C:\Program Files\dotnet\shared\Microsoft.NETCore.App]
  Microsoft.NETCore.App 2.2.2 [C:\Program Files\dotnet\shared\Microsoft.NETCore.App]
  Microsoft.NETCore.App 3.0.0 [C:\Program Files\dotnet\shared\Microsoft.NETCore.App]
  Microsoft.WindowsDesktop.App 3.0.0 [C:\Program Files\dotnet\shared\Microsoft.WindowsDesktop.App]
```

**What version of Docker.DotNet?:**
```
3.125.2
```

**Steps to reproduce the issue:**
`var client = new DockerClientConfiguration(new Uri("tcp://localhost:2375"))
				.CreateClient();`
`IList<ContainerListResponse> containers = await client.Containers.ListContainersAsync(
				new ContainersListParameters()
				{
					Limit = 10,
				});`

**What actually happened?:**
ListContainersAsync get an timeout

**What did you expect to happen?:**
Get a list of containers

**Additional information:**
Docker Engine 19.03.5
Everything else is working, I can create, start, stop and remove containers. But trying to list any container runs into an timeout. I tried it on different machines, different OS and with different connections strings (pipe, unix, tcp etc.). I alway get an timeout. When I call "http://localhost:2375/containers/json" in my browser I get a JSON List of all Containers. 
What am I missing?
<!--
If you are reporting a new issue, please first search for a matching issue in
this repository.

-->


**Output of `dotnet --info`:**

```
.NET Core SDK (reflecting any global.json):
 Version:   3.0.100
 Commit:    04339c3a26

Runtime Environment:
 OS Name:     Windows
 OS Version:  10.0.18362
 OS Platform: Windows
 RID:         win10-x64
 Base Path:   C:\Program Files\dotnet\sdk\3.0.100\

Host (useful for support):
  Version: 3.0.0
  Commit:  7d57652f33

.NET Core SDKs installed:
  2.1.802 [C:\Program Files\dotnet\sdk]
  3.0.100 [C:\Program Files\dotnet\sdk]

.NET Core runtimes installed:
  Microsoft.AspNetCore.All 2.1.13 [C:\Program Files\dotnet\shared\Microsoft.AspNetCore.All]
  Microsoft.AspNetCore.App 2.1.13 [C:\Program Files\dotnet\shared\Microsoft.AspNetCore.App]
  Microsoft.AspNetCore.App 3.0.0 [C:\Program Files\dotnet\shared\Microsoft.AspNetCore.App]
  Microsoft.NETCore.App 2.1.13 [C:\Program Files\dotnet\shared\Microsoft.NETCore.App]
  Microsoft.NETCore.App 3.0.0 [C:\Program Files\dotnet\shared\Microsoft.NETCore.App]
  Microsoft.WindowsDesktop.App 3.0.0 [C:\Program Files\dotnet\shared\Microsoft.WindowsDesktop.App]
```

**What version of Docker.DotNet?:**

```
v3.125.2
```

**Issue:**

In order to list current running containers, a lot of people do something along the lines of the following:
```cs
var dockerClient = new DockerClientConfiguration(new Uri("npipe://./pipe/docker_engine")).CreateClient();
var currentContainers = await dockerClient.Containers.ListContainersAsync(
    new ContainersListParameters(){
        Filters = new Dictionary<string, IDictionary<string, bool>>
        {
            {
                "status", new Dictionary<string, bool>
                {
                    {"running", true}
                }
            }
        });
```

But this is entirely unnecessary and by default, using the `All = false` parameter should return only current running containers, but instead it returns all containers.
We can see the appropriate behavior of the Docker API by querying `localhost:2375/containers/json` which shows only the current running containers, but for explicitness, `localhost:2375/containers/json?all=false` returns only current running containers as well. 
See [Docker Engine API v1.25](https://docs.docker.com/engine/api/v1.25/#operation/ContainerLists)


Hi.

I need to create containers that use GPU. In order to do that, you need to configure the property "DeviceRequests" from HostConfig Object, but this library doesnt have it yet. (There are other properties that are "missing" too)

Hope it gets updated as soon as possible.

Thanks & Regards
The docs living here seems to be outdated:
https://github.com/microsoft/Docker.DotNet

E.g. 
```
Stream stream  = await client.Images.CreateImageAsync(
    new ImagesCreateParameters
    {
        Parent = "fedora/memcached",
        Tag = "alpha",
    },
    new AuthConfig
    {
        Email = "test@example.com",
        Username = "test",
        Password = "pa$$w0rd"
    });
```

Current properties of ImagesCreateParameters in 3.125.2.0 seems to be:
* FromImage
* FromSrc
* Repo
* Tag
Hi, I'd like to report progress in realtime when I invoke `BuildImageFromDockerfileAsync` since this is an operation that could take several seconds or even minutes, depending on the Dockerfile.

At the moment, the `BuildImageFromDockerfileAsync` method returns a `Task<Stream>` [as you can see here](https://github.com/microsoft/Docker.DotNet/blob/40f19a2fe1a3ad0d4bb3269b969a35ca952df39e/src/Docker.DotNet/Endpoints/ImageOperations.cs#L46) and that allows me to get the full command output but only when the operation has ended. Instead, I want to be able to get the progress in realtime, as soon as it's outputted by Docker.

Thanks
<!--
If you are reporting a new issue, please first search for a matching issue in
this repository.

-->


**Output of `dotnet --info`:**

```
(paste your output here)
```

**What version of Docker.DotNet?:**

```
(paste your output here)
```

**Steps to reproduce the issue:**
1.
2.
3.


**What actually happened?:**


**What did you expect to happen?:**


**Additional information:**



Some of the changes made are quite useful, but no release has been made in the last 1.5 years.
A new release will be welcomed.