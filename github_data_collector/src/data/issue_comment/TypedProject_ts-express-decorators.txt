## Information

- **Version:** 5.38.6

I have created a User `entity `with TypeORM adding the property `@IgnoreProperty()` to my password field and when I call my custom repository it keeps showing them to me, also I have tried to use `ConverterService `according to the documentation and the same, I have also tried to create a separate class called `UserDTO.ts` only with the properties and the same keeps showing me the password field.

## Example
```

import { IgnoreProperty, Required } from '@tsed/common'
import { Description } from '@tsed/swagger'
import { Column, CreateDateColumn, Entity, PrimaryGeneratedColumn, Unique } from 'typeorm'
import { Exclude } from 'class-transformer'

@Entity()
@Unique(['username', 'email'])
export class User {

  @Description('Database assigned id')
  @PrimaryGeneratedColumn()
  id: number

  @Description('User username')
  @Column()
  @Required()
  username: string

  @Description('User email')
  @Column()
  @Required()
  email: string

  @Description('User image')
  @Column({ nullable: true })
  image: string

  @Description('User first name')
  @Column()
  @Required()
  firstName: string

  @Description('User last name')
  @Column()
  @Required()
  lastName: string

  @Description('User password')
  @IgnoreProperty()
  @Exclude()
  @Column('longtext')
  @Required()
  password: string

  @Description('User country')
  @Column({ nullable: true })
  country: string

  @Description('User license')
  @Column()
  license: string

  @IgnoreProperty()
  @Exclude()
  @Column({ default: 0 })
  enabled: boolean

  @Description('Roles data')
  @Column({ type: 'json', nullable: true })
  roles: object

  @Description('User created date')
  @CreateDateColumn()
  createdAt: Date

}

```
My solution has been to add to Entity

`import { Exclude } from 'class-transformer'`

```
  @Exclude()
  @Required()
  password: string
```
 
```
 import { plainToClass } from 'class-transformer';
 const user: User = await getCustomRepository(UserRepository).findOne(id);
 const userDto: User = plainToClass(User, user);
```

For the following model
```typescript
class Model {
    @Required()
    @Allow(null)
    public types: string[] | null
}
```
when the request pass { types: null }, it did not pass the validation. How can I handle that?

## Informations
**Is your feature request related to a problem? Please describe.**

I'm trying to set in swagger to produce a file on 200. But cannot find if this is possible.

**Describe the solution you'd like**

```
@Returns(200, { description: 'on success', type: File })
@Produces('application/octet-stream')
public async downloadFile() {

}
```

which will produce 

```json
"responses": {
    "200": {
        "description": "on success",
        "schema": {
            "type": "file"
        }
    }
},
"produces": [
    "application/octet-stream"
]
```



## Information

- **Version:** 5.38
- **Packages**: 

    "@tsed/common": "^5.38.0",
    "@tsed/core": "^5.38.0",
    "@tsed/di": "^5.38.0",
    "@tsed/socketio": "^5.38.0",
    "@tsed/swagger": "^5.38.0",
    "@tsed/testing": "^5.38.0",
    "@tsed/typeorm": "^5.38.0",
    "bcrypt": "^3.0.7",
    "body-parser": "^1.18.3",
    "compression": "^1.7.3",
    "cookie-parser": "^1.4.3",
    "express": "^4.17.1",
    "express-session": "^1.17.0",
    "method-override": "^3.0.0",
    "mysql": "^2.17.1",
    "pg": "^7.17.1",
    "secure-password": "^3.1.0",
    "serve-static": "^1.13.1",
    "socket.io": "^2.1.0",
    "sodium-native": "^2.4.6",
    "ts-httpexceptions": "^4.1.0",
    "twig": "^1.14.0",
    "typeorm": "^0.2.22"


I've been a while without using TSED, now I'm back to take a project I have started that worked before and now it doesn't work.

## Errors

```
[2020-01-16T00:29:29.433] [ERROR] [TSED] - src/Service/UsersService.ts:14:5 - error TS2322: Type 'import("G:/www/api-new/node_modules/@t
sed/typeorm/node_modules/typeorm/connection/Connection").Connection' is not assignable to type 'import("G:/www/api-new/node_modules/type
orm/connection/Connection").Connection'.
  Types of property 'options' are incompatible.
    Type 'import("G:/www/api-new/node_modules/@tsed/typeorm/node_modules/typeorm/connection/ConnectionOptions").ConnectionOptions' is no
t assignable to type 'import("G:/www/api-new/node_modules/typeorm/connection/ConnectionOptions").ConnectionOptions'.
      Type 'MysqlConnectionOptions' is not assignable to type 'ConnectionOptions'.
        Type 'import("G:/www/api-new/node_modules/@tsed/typeorm/node_modules/typeorm/driver/mysql/MysqlConnectionOptions").MysqlConnecti
onOptions' is not assignable to type 'import("G:/www/api-new/node_modules/typeorm/driver/mysql/MysqlConnectionOptions").MysqlConnectionO
ptions'.
          Types of property 'entities' are incompatible.
            Type '(string | Function | import("G:/www/api-new/node_modules/@tsed/typeorm/node_modules/typeorm/entity-schema/EntitySchema
").EntitySchema<any>)[]' is not assignable to type '(string | Function | import("G:/www/api-new/node_modules/typeorm/entity-schema/Entit
ySchema").EntitySchema<any>)[]'.
              Type 'string | Function | import("G:/www/api-new/node_modules/@tsed/typeorm/node_modules/typeorm/entity-schema/EntitySchem
a").EntitySchema<any>' is not assignable to type 'string | Function | import("G:/www/api-new/node_modules/typeorm/entity-schema/EntitySc
hema").EntitySchema<any>'.
                Type 'EntitySchema<any>' is not assignable to type 'string | Function | EntitySchema<any>'.
                  Type 'import("G:/www/api-new/node_modules/@tsed/typeorm/node_modules/typeorm/entity-schema/EntitySchema").EntitySchema
<any>' is not assignable to type 'import("G:/www/api-new/node_modules/typeorm/entity-schema/EntitySchema").EntitySchema<any>'.
                    The types of 'options.expression' are incompatible between these types.
                      Type 'string | ((connection: import("G:/www/api-new/node_modules/@tsed/typeorm/node_modules/typeorm/connection/Con
nection").Connection) => import("G:/www/api-new/node_modules/@tsed/typeorm/node_modules/typeorm/query-builder/SelectQueryBuilder").Selec
tQueryBuilder<any>)' is not assignable to type 'string | ((connection: import("G:/www/api-new/node_modules/typeorm/connection/Connection
").Connection) => import("G:/www/api-new/node_modules/typeorm/query-builder/SelectQueryBuilder").SelectQueryBuilder<any>)'.
                        Type '(connection: Connection) => SelectQueryBuilder<any>' is not assignable to type 'string | ((connection: Connection
) => SelectQueryBuilder<any>)'.
                          Type '(connection: import("G:/www/api-new/node_modules/@tsed/typeorm/node_modules/typeorm/connection/Connectio
n").Connection) => import("G:/www/api-new/node_modules/@tsed/typeorm/node_modules/typeorm/query-builder/SelectQueryBuilder").SelectQuery
Builder<any>' is not assignable to type '(connection: import("G:/www/api-new/node_modules/typeorm/connection/Connection").Connection) =>
 import("G:/www/api-new/node_modules/typeorm/query-builder/SelectQueryBuilder").SelectQueryBuilder<any>'.
                            Types of parameters 'connection' and 'connection' are incompatible.
                              Type 'import("G:/www/api-new/node_modules/typeorm/connection/Connection").Connection' is not assignable to
 type 'import("G:/www/api-new/node_modules/@tsed/typeorm/node_modules/typeorm/connection/Connection").Connection'.
                                Types of property 'options' are incompatible.
                                  Type 'import("G:/www/api-new/node_modules/typeorm/connection/ConnectionOptions").ConnectionOptions' is
 not assignable to type 'import("G:/www/api-new/node_modules/@tsed/typeorm/node_modules/typeorm/connection/ConnectionOptions").Connectio
nOptions'.
                                    Type 'MysqlConnectionOptions' is not assignable to type 'ConnectionOptions'.
                                      Type 'import("G:/www/api-new/node_modules/typeorm/driver/mysql/MysqlConnectionOptions").MysqlConne
ctionOptions' is not assignable to type 'import("G:/www/api-new/node_modules/@tsed/typeorm/node_modules/typeorm/driver/mysql/MysqlConnec
tionOptions").MysqlConnectionOptions'.
                                        Types of property 'entities' are incompatible.
                                          Type '(string | Function | import("G:/www/api-new/node_modules/typeorm/entity-schema/EntitySch
ema").EntitySchema<any>)[]' is not assignable to type '(string | Function | import("G:/www/api-new/node_modules/@tsed/typeorm/node_modul
es/typeorm/entity-schema/EntitySchema").EntitySchema<any>)[]'.
                                            Type 'string | Function | import("G:/www/api-new/node_modules/typeorm/entity-schema/EntitySc
hema").EntitySchema<any>' is not assignable to type 'string | Function | import("G:/www/api-new/node_modules/@tsed/typeorm/node_modules/
typeorm/entity-schema/EntitySchema").EntitySchema<any>'.
                                              Type 'EntitySchema<any>' is not assignable to type 'string | Function | EntitySchema<any>'.
                                                Type 'import("G:/www/api-new/node_modules/typeorm/entity-schema/EntitySchema").EntitySch
ema<any>' is not assignable to type 'import("G:/www/api-new/node_modules/@tsed/typeorm/node_modules/typeorm/entity-schema/EntitySchema")
.EntitySchema<any>'.
                                                  The types of 'options.columns' are incompatible between these types.
                                                    Type '{ [x: string]: import("G:/www/api-new/node_modules/typeorm/entity-schema/Entit
ySchemaColumnOptions").EntitySchemaColumnOptions; }' is not assignable to type '{ [x: string]: import("G:/www/api-new/node_modules/@tsed
/typeorm/node_modules/typeorm/entity-schema/EntitySchemaColumnOptions").EntitySchemaColumnOptions; }'.
                                                      Index signatures are incompatible.
                                                        Type 'import("G:/www/api-new/node_modules/typeorm/entity-schema/EntitySchemaColu
mnOptions").EntitySchemaColumnOptions' is not assignable to type 'import("G:/www/api-new/node_modules/@tsed/typeorm/node_modules/typeorm
/entity-schema/EntitySchemaColumnOptions").EntitySchemaColumnOptions'.
                                                          Types of property 'type' are incompatible.
                                                            Type 'import("G:/www/api-new/node_modules/typeorm/driver/types/ColumnTypes")
.ColumnType' is not assignable to type 'import("G:/www/api-new/node_modules/@tsed/typeorm/node_modules/typeorm/driver/types/ColumnTypes"
).ColumnType'.
                                                              Type '"smalldecimal"' is not assignable to type 'ColumnType'.

14     this.connection = this.typeORMService.get()
       ~~~~~~~~~~~~~~~

[nodemon] app crashed - waiting for file changes before starting...
[nodemon] restarting due to changes...
[nodemon] starting `ts-node src/index.ts`
[2020-01-16T00:30:18.637] [ERROR] [TSED] - src/Service/UsersService.ts:14:5 - error TS2322: Type 'import("G:/www/api-new/node_modules/@t
sed/typeorm/node_modules/typeorm/connection/Connection").Connection' is not assignable to type 'import("G:/www/api-new/node_modules/type
orm/connection/Connection").Connection'.
  Types of property 'options' are incompatible.
    Type 'import("G:/www/api-new/node_modules/@tsed/typeorm/node_modules/typeorm/connection/ConnectionOptions").ConnectionOptions' is no
t assignable to type 'import("G:/www/api-new/node_modules/typeorm/connection/ConnectionOptions").ConnectionOptions'.
      Type 'MysqlConnectionOptions' is not assignable to type 'ConnectionOptions'.
        Type 'import("G:/www/api-new/node_modules/@tsed/typeorm/node_modules/typeorm/driver/mysql/MysqlConnectionOptions").MysqlConnecti
onOptions' is not assignable to type 'import("G:/www/api-new/node_modules/typeorm/driver/mysql/MysqlConnectionOptions").MysqlConnectionO
ptions'.
          Types of property 'entities' are incompatible.
            Type '(string | Function | import("G:/www/api-new/node_modules/@tsed/typeorm/node_modules/typeorm/entity-schema/EntitySchema
").EntitySchema<any>)[]' is not assignable to type '(string | Function | import("G:/www/api-new/node_modules/typeorm/entity-schema/Entit
ySchema").EntitySchema<any>)[]'.
              Type 'string | Function | import("G:/www/api-new/node_modules/@tsed/typeorm/node_modules/typeorm/entity-schema/EntitySchem
a").EntitySchema<any>' is not assignable to type 'string | Function | import("G:/www/api-new/node_modules/typeorm/entity-schema/EntitySc
hema").EntitySchema<any>'.
                Type 'EntitySchema<any>' is not assignable to type 'string | Function | EntitySchema<any>'.
                  Type 'import("G:/www/api-new/node_modules/@tsed/typeorm/node_modules/typeorm/entity-schema/EntitySchema").EntitySchema
<any>' is not assignable to type 'import("G:/www/api-new/node_modules/typeorm/entity-schema/EntitySchema").EntitySchema<any>'.
                    The types of 'options.expression' are incompatible between these types.
                      Type 'string | ((connection: import("G:/www/api-new/node_modules/@tsed/typeorm/node_modules/typeorm/connection/Con
nection").Connection) => import("G:/www/api-new/node_modules/@tsed/typeorm/node_modules/typeorm/query-builder/SelectQueryBuilder").Selec
tQueryBuilder<any>)' is not assignable to type 'string | ((connection: import("G:/www/api-new/node_modules/typeorm/connection/Connection
").Connection) => import("G:/www/api-new/node_modules/typeorm/query-builder/SelectQueryBuilder").SelectQueryBuilder<any>)'.
                        Type '(connection: Connection) => SelectQueryBuilder<any>' is not assignable to type 'string | ((connection: Connection
) => SelectQueryBuilder<any>)'.
                          Type '(connection: import("G:/www/api-new/node_modules/@tsed/typeorm/node_modules/typeorm/connection/Connectio
n").Connection) => import("G:/www/api-new/node_modules/@tsed/typeorm/node_modules/typeorm/query-builder/SelectQueryBuilder").SelectQuery
Builder<any>' is not assignable to type '(connection: import("G:/www/api-new/node_modules/typeorm/connection/Connection").Connection) =>
 import("G:/www/api-new/node_modules/typeorm/query-builder/SelectQueryBuilder").SelectQueryBuilder<any>'.
                            Types of parameters 'connection' and 'connection' are incompatible.
                              Type 'import("G:/www/api-new/node_modules/typeorm/connection/Connection").Connection' is not assignable to
 type 'import("G:/www/api-new/node_modules/@tsed/typeorm/node_modules/typeorm/connection/Connection").Connection'.
                                Types of property 'options' are incompatible.
                                  Type 'import("G:/www/api-new/node_modules/typeorm/connection/ConnectionOptions").ConnectionOptions' is
 not assignable to type 'import("G:/www/api-new/node_modules/@tsed/typeorm/node_modules/typeorm/connection/ConnectionOptions").Connectio
nOptions'.
                                    Type 'MysqlConnectionOptions' is not assignable to type 'ConnectionOptions'.
                                      Type 'import("G:/www/api-new/node_modules/typeorm/driver/mysql/MysqlConnectionOptions").MysqlConne
ctionOptions' is not assignable to type 'import("G:/www/api-new/node_modules/@tsed/typeorm/node_modules/typeorm/driver/mysql/MysqlConnec
tionOptions").MysqlConnectionOptions'.
                                        Types of property 'entities' are incompatible.
                                          Type '(string | Function | import("G:/www/api-new/node_modules/typeorm/entity-schema/EntitySch
ema").EntitySchema<any>)[]' is not assignable to type '(string | Function | import("G:/www/api-new/node_modules/@tsed/typeorm/node_modul
es/typeorm/entity-schema/EntitySchema").EntitySchema<any>)[]'.
                                            Type 'string | Function | import("G:/www/api-new/node_modules/typeorm/entity-schema/EntitySc
hema").EntitySchema<any>' is not assignable to type 'string | Function | import("G:/www/api-new/node_modules/@tsed/typeorm/node_modules/
typeorm/entity-schema/EntitySchema").EntitySchema<any>'.
                                              Type 'EntitySchema<any>' is not assignable to type 'string | Function | EntitySchema<any>'.
                                                Type 'import("G:/www/api-new/node_modules/typeorm/entity-schema/EntitySchema").EntitySch
ema<any>' is not assignable to type 'import("G:/www/api-new/node_modules/@tsed/typeorm/node_modules/typeorm/entity-schema/EntitySchema")
.EntitySchema<any>'.
                                                  The types of 'options.columns' are incompatible between these types.
                                                    Type '{ [x: string]: import("G:/www/api-new/node_modules/typeorm/entity-schema/Entit
ySchemaColumnOptions").EntitySchemaColumnOptions; }' is not assignable to type '{ [x: string]: import("G:/www/api-new/node_modules/@tsed
/typeorm/node_modules/typeorm/entity-schema/EntitySchemaColumnOptions").EntitySchemaColumnOptions; }'.
                                                      Index signatures are incompatible.
                                                        Type 'import("G:/www/api-new/node_modules/typeorm/entity-schema/EntitySchemaColu
mnOptions").EntitySchemaColumnOptions' is not assignable to type 'import("G:/www/api-new/node_modules/@tsed/typeorm/node_modules/typeorm
/entity-schema/EntitySchemaColumnOptions").EntitySchemaColumnOptions'.
                                                          Types of property 'type' are incompatible.
                                                            Type 'import("G:/www/api-new/node_modules/typeorm/driver/types/ColumnTypes")
.ColumnType' is not assignable to type 'import("G:/www/api-new/node_modules/@tsed/typeorm/node_modules/typeorm/driver/types/ColumnTypes"
).ColumnType'.
                                                              Type '"smalldecimal"' is not assignable to type 'ColumnType'.

14     this.connection = this.typeORMService.get()
       ~~~~~~~~~~~~~~~


```

It gives me a lot of errors regarding types, plus it can't connect to the database either, I think it's because of this.

The exact error:

`this.connection = this.typeORMService.get()`

## Example

This code is taken from the same example repository with TypeORM https://github.com/TypedProject/tsed-example-typeorm/

```typescript
import { Service } from '@tsed/common'
import { TypeORMService } from '@tsed/typeorm'
import { Connection } from 'typeorm'
import { User } from '../entity/User'

@Service()
export class UsersService {
  private connection: Connection

  constructor (private typeORMService: TypeORMService) {
  }

  $afterRoutesInit () {
    -----> error this.connection = this.typeORMService.get()
  }

  async create (user: User): Promise<User> {
    await this.connection.manager.save(user)
    console.log('Saved a new user with id: ' + user.id)
    return user
  }

  async find (): Promise<User[]> {
    const users = await this.connection.manager.find(User)
    console.log('Loaded users: ', users)
    return users
  }
  async findByID (id): Promise<User> {
    return this.connection.manager.findOne(id)
  }

}


```


## Information

- **Version:** 5.33.0

I am trying to refactor tests to work with `TestContext.create` but the issue is that we have services and middlewares that rely on `@Constant` values in their `$onIinit` method, and they fail when the value is not provided.

How can we load all of our test configurations with the new testing method?

## Example

`MyService.ts`:
```ts
import {Service, OnInit, Constant} from '@tsed/di';

@Service()
export class MyService implements OnInit {
  @Constant('obj')
  private obj;

  $onInit(): void | Promise<any> {
    console.log(this.obj.key);
  }
}
```

`MyService.test.ts`:
```ts
import {TestContext} from '@tsed/testing';
import {MyService} from '../src/services/MyService';

describe('MyService', () => {
  beforeAll(TestContext.create);

  test('onInit', () => {
    TestContext.invoke(MyService, []);
    expect(1).toBe(1);
  });
});
```

```
TypeError: Cannot read property 'key' of undefined
      at MyService.$onInit (src/services/MyService.ts:15:30)
      at Map.<anonymous> (node_modules/@tsed/di/src/class/LocalsContainer.ts:15:34)
      at node_modules/tslib/tslib.js:110:75
      at Object.__awaiter (node_modules/tslib/tslib.js:106:16)
      at Map.emit (node_modules/@tsed/di/lib/class/LocalsContainer.js:12:24)
      at Map.<anonymous> (node_modules/@tsed/di/src/services/InjectorService.ts:265:18)
      at fulfilled (node_modules/tslib/tslib.js:107:62)
```

## Information

- **Version:** 5.x

I am upgrading to latest TSED after a while away from a project.  I followed the doco for https://tsed.io/tutorials/mongoose.html but the IDE couldn't find 'find'.  Eg:

    constructor(
    @Inject(AvDbModel) private model: MongooseModel<AvDbModel>) { }

    async search(query: AvDbModelQuery): Promise<AvDbModel[]> {
        const data: AvDbModel[] = await this.model.find(query)

And the compile failed with:

     [2020-01-11T18:40:24.861] [ERROR] [TSED] - src/persistence/DBAvService.ts:13:48 - error TS2339: Property 'find' does not exist on type 'MongooseModel<AvDbModel>'.

After re-installing I saw the WARNing:

     npm WARN @tsed/mongoose@5.36.2 requires a peer of @types/mongoose@^5.5.32 but none is installed. You must install peer dependencies yourself.

And after installing `@types/mongoose` the problem was fixed.

## Acceptance criteria

The documentation should include:

     npm install --save @types/mongoose

after (or with):

     npm install --save @tsed/mongoose

<!-- This template it's just here to help you for write your Pull Request -->

## Informations

Type | Breaking change
---|---
Feature/Fix/Doc/Chore | Yes/No

****

## Description
A few sentences describing the overall goals of the pull request's commits.

## Usage example

Example to use your feature and to improve the documentation after merging your PR:
```
import {} from "@tsed/common";

```

## Todos

- [ ] Tests
- [ ] Coverage
- [ ] Example
- [ ] Documentation

I use
```
@tsed/common": "4.32",
@tsed/di": "5.32"
```
I have server with TSED and NodeJs application separated from this server.
This app uses some implemented services (`@Service() decorator`) from TSED server.

I have next folder structure:
```
projectFolder
  |_app.ts - here is @ServerSettings
  |_package.json - only one package.json. In root folder
  |_src
    |_constrollers
    |_services
    |_my-node-app
```

I use `ts-node` to run TS files:
`"npm run start": "ts-node src/my-node-app/my-app.ts"`


As I said, I want to use services (with a lot of DI inside each service) from my implemented TSED server code. I don't start server and start only my app.
In `my-app.ts` I use common TS class without decorators and use `InjectService`.

But why does it work? How does injector find my services in parent folder (`../my-node-app`)? `@tsed/di`? Is it safe way to use services?
```
// no any decorators
class MyClass {
  public init() {
     const injector = new InjectorService();
     await injector.load();
     const myService = injector.get<MyService>(MyService);
     // here I can use myService.
  }
}
```

Is it [[AWS] TSED.io without WEB API](https://github.com/TypedProject/ts-express-decorators/issues/604) similar to my case?

Thanks.
## Information
I would like to have validators for query parameters like there are for body parameters

**Describe the solution you'd like**

```ts
import { Controller, Get, QueryParams, Maximum, Minimum } from "@tsed/common";

@Controller('/test')
export class TestCtrl {
  @Get('/')
  test(@Maximum(10) @Minimum(1) @QueryParams() test: number) {}
}
```

**Current Error**: `[ERROR] [TSED] - TypeError: Cannot read property 'mapper' of undefined`

## Informations
I'm developing an application that most of the operations will be done though Socket IO, using the tsed/socketio decorators, but i don't want keep opening connections with many different namespace, i wanted to integrate a loot of stuff in one namespace and keep it organized in the code.

e.g.:
![image](https://user-images.githubusercontent.com/6987504/70564548-2c7e0e80-1b6f-11ea-8fd4-9d834e756a16.png)

![image](https://user-images.githubusercontent.com/6987504/70564596-3f90de80-1b6f-11ea-947f-d80c439748ed.png)

What i have to do right now to make it work is:
1. Let the main socket service, where it'll be the connection function, being the last file in the services folder on alphabetical order.
2. 
```typescript
@SocketService("/game")
@SocketUseAfter(ErrorHandlerSocketMiddleware)
export class AccountService {
    @Nsp('/game')
    clientNamespace: SocketIO.Namespace
}
```
 I needed to do like this on every socket service, so it share the connection and the socket session between all services.

e.g. of the services:

Connection (main) service:
```typescript
import { IO, Socket, SocketService, SocketSession, Input, Emit, Args, Nsp, Namespace, SocketUseAfter } from "@tsed/socketio";
import * as SocketIO from "socket.io";
import * as jwt from 'jsonwebtoken'
import { PreconditionFailed } from "ts-httpexceptions";
import { AgentService } from "./AgentService";
import { ErrorHandlerSocketMiddleware } from "../middlewares/ErrorHandlerSocketMiddleware";

@SocketService("/game")
@SocketUseAfter(ErrorHandlerSocketMiddleware)
export class GameSocket {
    @Nsp('/game')
    clientNamespace: SocketIO.Namespace

    constructor() {
    }
    /**
     * Triggered when a new client connects to the Namespace.
     */
    $onConnection(
        @Socket socket: SocketIO.Socket,
        @SocketSession session: SocketSession
    ) {
        const { token } = socket.handshake.query
        if (token) {
            try {
                const decoded = jwt.verify(token, 'KEY') as {
                    agent: string
                }
                if (decoded?.agent) {
                    session.set("authenticated", true)
                    session.set("playerId", decoded.agent)
                    session.set("hasAgent", true)

                    socket.join(decoded.agent)
                    const agent = AgentService.getAgent(decoded.agent)

                    if (agent) {
                        AgentService.updateAgent(decoded.agent, agent)
                    } else {
                        throw new PreconditionFailed('Has to login')
                    }
                } else {
                    session.set("authenticated", false)
                }
            } catch (error) {
                throw new PreconditionFailed('Invalid JWT')
            }
        } else {
            session.set("authenticated", false)
        }
    }
    /**
     * Triggered when a client disconnects from the Namespace.
     */
    $onDisconnect(
        @Socket socket: SocketIO.Socket,
        @SocketSession session: SocketSession
    ) {
        try {
            socket.leaveAll()
        } catch (error) {
            console.error(error)
        }
    }
}
```

Another service using the same namespace:

```typescript
import { Agent } from "../models/Agent";
import { SocketService, Nsp, SocketUseAfter, SocketUseBefore, Input, Socket, SocketSession, Args } from "@tsed/socketio";
import { AuthenticationMiddleware } from "../middlewares/AuthenticationMiddleware";
import { ErrorHandlerSocketMiddleware } from "../middlewares/ErrorHandlerSocketMiddleware";
import { InputEvents } from "../interfaces/SocketEvents";
import { Room } from "../models/Room";
import { HelperService } from "./HelperService";
import { SocketCommands } from "../interfaces/SocketCommands";
import { SocketAction } from "../interfaces/SocketAction";
import { StartQueueSocketMiddleware } from "../middlewares/StartQueueSocketMiddleware";
import { ReleaseQueueSocketMiddleware } from "../middlewares/ReleaseQueueSocketMiddleware";
import { MapsService } from "./MapsService"

@SocketService("/game")
@SocketUseBefore(AuthenticationMiddleware)
@SocketUseBefore(StartQueueSocketMiddleware)
@SocketUseAfter(ReleaseQueueSocketMiddleware)
@SocketUseAfter(ErrorHandlerSocketMiddleware)
export class RoomService extends HelperService {
    @Nsp('/game')
    clientNamespace: SocketIO.Namespace

    constructor() {
        super()
    }


    @Input(InputEvents.ROOM_ALL)
    public all(
        @SocketSession session: SocketSession,
        @Args(0) action: SocketAction
    ): void {
        const agentId = session.get('playerId')
        super.informPlayer(this.clientNamespace, agentId, {
            command: SocketCommands.ROOM_ALL,
            data: {
                ...RoomService.rooms,
                actionId: action.actionId
            }
        })
    }
}
```

I already tried to extend or inject (with the @Inject() decorator) the main service on the others, but it doesn't recognize the events in other classes.

**Describe the solution you'd like**
Maybe if we have a decorator like `@SocketInjection(SERVICE_NAME)`, where it can put all socket services at the namespace without needing to do the "name" thing that i explained above.