### Version 3.0.0-RC8 - January 19, 2020 ([Maven](http://search.maven.org/#artifactdetails%7Cio.reactivex.rxjava3%7Crxjava%7C3.0.0-RC8%7C))
[JavaDocs](http://reactivex.io/RxJava/3.x/javadoc/3.0.0-RC8)

*This is an early release for 3.0.0 to allow preparations for the breaking API changes and cleanups. Please check out the wiki page [What's different in 3.0](https://github.com/ReactiveX/RxJava/wiki/What's-different-in-3.0) from time to time for the details and migration guide.*

#### API changes

- Remove `fromFuture(..., Scheduler)` overloads. (#6814)
- Remove a pointless `concatMapIterable` overload. (#6837)
- Rename to `combineLatestArrayDelayError`. (#6838)
- Remove `Maybe.onExceptionResumeNext`. (#6844)

#### Bugfixes

- Fix `Flowable.flatMap` not canceling the inner sources on outer error. (#6826)

#### Documentation enhancements

- Prettify `Flowable` JavaDocs + validator. (#6806)
- Improve JavaDocs of `Completable` and some others. (#6809)
- Improve JavaDocs of `Single` (#6812)
- Improve JavaDocs of `Maybe` (#6815)
- Improve JavaDocs of `Observable` and fix similar issues elsewhere (#6831)
- Cleanup JavaDocs for parameter validation all around. (#6835)
- Improve wording of operators. (#6843)
- Add operator matrix wiki + auto-extractor. (#6845)
- Simplify `@return` sentences in JavaDocs (#6847)

#### Other changes

- Bump `junit` from 4.12 to 4.13 (#6810)
- Enable javac parameter saving in class files. (#6839)
- Bump `build-info-extractor-gradle` from 4.12.0 to 4.13.0 (#6808)
- Add nullability annotations to type arguments. (#6840)
- Deleted unnecessary NPE tests. (#6846)
- Add Official Gradle Wrapper Validation GitHub Action. (#6848)
Operator argument naming should match between base classes on the same operators.

For example `Observable::buffer(boundary)` vs. `Flowable::buffer(boundaryIndicator)`.

Source-level comparison would be too complicated so reflection can be used for this, provided the class saves the argument names. Javac 8 has this option that must be enabled in the IDE and in `build.gradle`:

```groovy
[compileJava, compileTestJava]*.options*.compilerArgs << "-parameters"

tasks.withType(JavaCompile) {
    options.compilerArgs << "-parameters";
}
```

An extra test is preferrable to remind users enabling this option:

```java
    void method(int paramName) {
        // deliberately empty
    }

    @Test
    public void javacParametersEnabled() throws Exception {
        assertEquals("Please enable saving parameter names via the -parameters javac argument",
                "paramName",
                getClass()
                .getDeclaredMethod("method", Integer.TYPE)
                .getParameters()[0].getName());
    }
```
There are some common operator names across all base classes, these should match as well.
The current `ParamValidationNaming` can only check explicit argument validation (i.e., the method body lists `requireNonNull` or `verifyPositive`) but not overloads delegating to those methods thus lacking the explicit argument validation themselves.

I don't think this can be automated, therefore, each base reactive class' source should be manually examined and expanded with the missing `@throws` declaration:

- [ ] `Flowable`
- [ ] `Observable`
- [ ] `Maybe`
- [ ] `Single`
- [ ] `Completable`
- [ ] `ParallelFlowable`

(There is currently an `Observable` cleanup PR in the works, please wait for it before doing this issue.)

**Edit**

Perhaps checking if the typical method parameter names, such as `bufferSize`, `prefetch`, `capacityHint`, `source*`, `mapper`, `predicate`, etc. appear in `@throws` declaration.
Many code changes in 3.x can be done independently, but updating the new `What's Different in 3.x.md` would conflict. This issue tracks which changes should be eventually described in the file:

- [ ] Introduction of the `Supplier` interface -> #6511
- [ ] `Callable` use changed to `Supplier` in the API -> #6511 
- [ ] Removal of `getValues()` from various subjects and processors -> #6516
- [ ] `Maybe.defaultIfEmpty()` returns `Single` -> #6517
- [ ] Removal of `Maybe.toSingle(T)` -> #6517
- [ ] Removal of `Flowable.subscribe(4 args)` -> #6517
- [ ] Removal of `Observable.subscribe(4 args)` -> #6517
- [ ] Removal of `Single.toCompletable()` -> #6517
- [ ] Removal of `Completable.blockingGet()` -> #6517
- [ ] `ConnectableX` redesign. -> #6519
- [ ] Test consumer API changes. -> #6526
- [ ] The rename of `startWith`+1 to `startWithItem` & `startWithIterable` -> #6530
- [ ] Bounded `replay()` with eagerTruncate option -> #6532
- [ ] Removal `replay(Scheduler)` and its variants. -> #6539
- [ ] Changes to `using()` order of upstream dispose and resource dispose -> #6534
- [ ] API promotions to standard -> #6537
- [ ] `concatMap` with `Scheduler` -> #6538
- [ ] Removal of the no-arg `deserialize()` -> #6539
- [ ] Removal of `onExceptionResumeNext()`
- [ ] Removal of `buffer(Supplier)` and `window(Supplier)` variants.
- [ ] Rename of `onErrorResumeNext(source)` to `onErrorResumeWith`. -> #6551
- [ ] More undeliverable errors reported due to cancellation.
- [ ] Widening of `XOnSubscribe` interfaces. -> #6579
- [ ] Removal of `combineLatest(vararg)` & `combineLatestDelayError(vararg)` -> #6635
- [ ] Removal of `zip(O(O))` overload -> #6638
- [ ] Rename of `zipIterable` to `zip` -> #6638
- [ ] Change parameter order of `concatMapDelayError` and `concatMapEagerDelayError` -> #6638
- [ ] Rename to `combineLatestArray` -> #6640 
- [ ] `groupBy` abandoned group behavior change -> #6642
- [ ] `Flowable.groupBy` signaling `MissingBackpressureException` instead of possibly hanging -> #6740 
- [ ] Add fair mode overload to `Schedulers.from(Executor)` -> #6744
- [ ] Make `DisposableContainer` public API -> #6745
- [ ] Change `CompositeException::getCause()` output and message -> #6748
- [ ] `window` handling abandoned inner windows -> #6758, #6761, #6762
- [ ] Java 8 support -> #6765
- [ ] `Disposables` utility class inlined into `Disposable` -> #6781
- [ ] `BehaviorProcessor`, `PublishProcessor` and `MulticastProcessor` `offer` null-check change. -> #6799
- [ ] `MulticastProcessor.offer` now throws `IllegalStateException` when called in fusion mode. -> #6799
- [ ] Add `blockingForEach(Consumer, int)` overloads -> #6800
- [ ] Removal of `fromFuture(..., Scheduler)` overloads -> #6814
- [ ] Operators used to throw `IndexOutOfBoundsException` (`skipLast`, `takeLast`, `takeLastTimed`) now throw `IllegalArgumentException` for param validation.
- [ ] `skip(count)` now throws IAE if count < 0
- [ ] Remove `Observable.concatMapIterable(Function, int)` overload -> #6837
- [ ] Rename `combineLatestDelayError(array)` to `combineLatestArrayDelayError(array)` -> #6838
This is the overview of the suggested/planned changes to the Wiki. *Text in bold are for extra considerations/options*.

- [ ] [`Additional-Reading.md`](https://github.com/ReactiveX/RxJava/blob/2.x/docs/Additional-Reading.md): review links, add newer links to blogs and topics
- [ ] [`Alphabetical-List-of-Observable-Operators.md`](https://github.com/ReactiveX/RxJava/blob/2.x/docs/Alphabetical-List-of-Observable-Operators.md): remove non-standard, deleted & otherwise project-external operators, add newer operators, link to the categorized other `.md` files and sections in the wiki.
- [ ] *`Alphabetical-List-of-3rd-party-operators.md`: create page and list operators that used to be in RxJava and/or interesting enough, but available in 3rd party libraries, such as rxjava2-extras.*
- [ ] [`Async-Operators`](https://github.com/ReactiveX/RxJava/blob/2.x/docs/Async-Operators.md): review the operator set, point to RxJava2Extensions project, *add fancy descriptions like in #6131*.
- [ ] [`Backpressure`](https://github.com/ReactiveX/RxJava/blob/2.x/docs/Backpressure.md): update wording, remove unavailable operators, fix image links, make sure examples are in **Java**.
- [ ] *[`Backpressure-(2.0).md`](https://github.com/ReactiveX/RxJava/blob/2.x/docs/Backpressure-(2.0).md): maybe review, should be okay as it has been recently added*
- [ ] [`Blocking-Observable-Operators.md`](https://github.com/ReactiveX/RxJava/blob/2.x/docs/Blocking-Observable-Operators.md): update to `blockingX` methods, *add fancy descriptions like in #6131*, existing operators only, fix image link
- [ ] [`Combining-Observables.md`](https://github.com/ReactiveX/RxJava/blob/2.x/docs/Combining-Observables.md): expand operator list (concat/eager/withLatestFrom missing?), *fancy like #6131*, link to RxJava2Extensions or explain join patterns here.
- [ ] [`Conditional-and-Boolean-Operators.md`](https://github.com/ReactiveX/RxJava/blob/2.x/docs/Conditional-and-Boolean-Operators.md): review operators, link/explain extensions ops, *fancy like #6131*
- [ ] [`Connectable-Observable-Operators.md`](https://github.com/ReactiveX/RxJava/blob/2.x/docs/Connectable-Observable-Operators.md): add newer operators, have examples in **Java**, fix image links
- [x] [`Creating-Observables.md`](https://github.com/ReactiveX/RxJava/blob/2.x/docs/Creating-Observables.md): add `generate`
- [x] [`Error-Handling-Operators.md`](https://github.com/ReactiveX/RxJava/blob/2.x/docs/Error-Handling-Operators.md): review set, *fancy like #6131*
- [ ] [`Error-Handling.md`](https://github.com/ReactiveX/RxJava/blob/2.x/docs/Error-Handling.md): review, only existing exceptions, include the error handling explanations from the [What's different](https://github.com/ReactiveX/RxJava/blob/2.x/docs/What's-different-in-2.0.md) page.
- [ ] [`Filtering-Observables.md`](https://github.com/ReactiveX/RxJava/blob/2.x/docs/Filtering-Observables.md): review, remove nonexistent operators, *fancy like #6131*
- [ ] [`Getting-Started.md`](https://github.com/ReactiveX/RxJava/blob/2.x/docs/Getting-Started.md): fix versions and maven group ids, *remove troubleshooting section?*, *add getting started from Readme.md?*
- [ ] [`Home.md`](https://github.com/ReactiveX/RxJava/blob/2.x/docs/Home.md): RxJava project is no longer polyglot, link to the other RxYYY projects instead, review "sales pitch", review/expand libraries and check for true v2 version support, mention the v1 interop for the older libs
- [ ] [`How-To-Use-RxJava.md`](https://github.com/ReactiveX/RxJava/blob/2.x/docs/How-To-Use-RxJava.md): *turn non-Java examples into Java*, use only Java examples, fix image links, review the create section
- [ ] [`How-to-Contribute.md`](https://github.com/ReactiveX/RxJava/blob/2.x/docs/How-to-Contribute.md): needs extensive rewrite and detailing
- [ ] [`Implementing-Your-Own-Operators.md`](https://github.com/ReactiveX/RxJava/blob/2.x/docs/Implementing-Your-Own-Operators.md): needs extensive rewrite, somewhat redundant with `Writing-Operators-(2.0).md`.
- [ ] [`Implementing-custom-operators-(draft).md`](https://github.com/ReactiveX/RxJava/blob/2.x/docs/Implementing-custom-operators-(draft).md): v1 only, unlist it and add banner **1.x content!**
- [ ] [`Mathematical-and-Aggregate-Operators.md`](https://github.com/ReactiveX/RxJava/blob/2.x/docs/Mathematical-and-Aggregate-Operators.md): review operator list, link to RxJava2Extensions, *fancy like #6131*, `concat` is not an aggregator 
- [ ] [`Observable-Utility-Operators.md`](https://github.com/ReactiveX/RxJava/blob/2.x/docs/Observable-Utility-Operators.md): review set, add new operators, *fancy like #6131*
- [ ] [`Observable.md`](https://github.com/ReactiveX/RxJava/blob/2.x/docs/Observable.md): pretty barebone, perhaps list all reactive types and their support interfaces with some descriptions
- [ ] [`Parallel-flows.md`](https://github.com/ReactiveX/RxJava/blob/2.x/docs/Parallel-flows.md): list parallel operators, `sequentialDelayError`, *fancy like #6131*, no longer experimental/beta
- [ ] [`Phantom-Operators.md`](https://github.com/ReactiveX/RxJava/blob/2.x/docs/Phantom-Operators.md): dumping ground for old/never relaized operators, remove or add warning about historical/museum content?
- [ ] [`Plugins.md`](https://github.com/ReactiveX/RxJava/blob/2.x/docs/Plugins.md): rewrite for `RxJavaPlugins` and related components
- [ ] [`Problem-Solving-Examples-in-RxJava.md`](https://github.com/ReactiveX/RxJava/blob/2.x/docs/Problem-Solving-Examples-in-RxJava.md): Fibonacci is not a relevant problem, not sure what problem examples could be listed here instead: how to wrap/bridge to existing technologies? How to get REST data into a listview?
- [ ] [`Reactive-Streams.md`](https://github.com/ReactiveX/RxJava/blob/2.x/docs/Reactive-Streams.md): remove v1 related details, wording: Java Flow has been shipped.
- [ ] [`Scheduler.md`](https://github.com/ReactiveX/RxJava/blob/2.x/docs/Scheduler.md): needs extensive expansion, also add system properties, *perhaps mention exotic schedulers in RxJava2Extensions*, *perhaps show how to write a scheduler*.
- [ ] [`String-Observables.md`](https://github.com/ReactiveX/RxJava/blob/2.x/docs/String-Observables.md): the RxJava2Extensions only has a few string operators, link to them?, *fancy like #6131*
- [ ] [Subject.md](https://github.com/ReactiveX/RxJava/blob/2.x/docs/Subject.md): needs extensive expansion: show the various subject types, their specific methods, examples.
- [ ] [`The-RxJava-Android-Module.md`](https://github.com/ReactiveX/RxJava/blob/2.x/docs/The-RxJava-Android-Module.md): maybe just link to [RxAndroid](https://github.com/ReactiveX/RxAndroid#rxandroid-reactive-extensions-for-android) and remove the rest?
- [ ] [`Transforming-Observables.md`](https://github.com/ReactiveX/RxJava/blob/2.x/docs/Transforming-Observables.md): review and add new operators, *fancy like #6131*
- [X] [`What's-different-in-2.0.md`](https://github.com/ReactiveX/RxJava/blob/2.x/docs/What's-different-in-2.0.md): fine
- [ ] [`Writing-operators-for-2.0.md`](https://github.com/ReactiveX/RxJava/blob/2.x/docs/Writing-operators-for-2.0.md): expand: fusion topics, example operators
- [X] [`_Footer.md`](https://github.com/ReactiveX/RxJava/blob/2.x/docs/_Footer.md): fine
- [x] [`_Sidebar.md`](https://github.com/ReactiveX/RxJava/blob/2.x/docs/_Sidebar.md): not sure if this is actually displayed as there is the `_Sidebar.md.md` too. Sync the two.
- [x] [`_Sidebar.md.md`](https://github.com/ReactiveX/RxJava/blob/2.x/docs/_Sidebar.md.md): reorganize a bit (list categories under "all operators"), remove v1 references, move v2 pages up

[I assembled a fresh evaluation](https://github.com/akarnokd/akarnokd-misc/issues/7) of RxJava 1, 2 and Reactor 3.2 performance under various usages and found the following deficiencies in RxJava 2.

- [x] `Flowable.empty()` appears to be consuming a lot of memory.
- [ ] See if a non-trampolining `Schedulers.from` could improve async/pipeline performance.
- [ ] Check why `Observable.blockingLast` has 30% more overhead than its `Flowable` counterpart.
- [ ] Check why there is a lot more overhead with `ReplayProcessor` and `ReplaySubject` compared to v1.
- [ ] Check why there is a lot more overhead with `UnicastProcessor` and `UnicastSubject` compared to v1.
- [ ] Check why `Observable.fromArray` is somewhat slower with longer sources than `Flowable`.
- [ ] Check why `Observable.fromIterable` is slower with longer sources than `Flowable`.
- [ ] Optimize `Observable.concatMap` for scalar inner sources.
- [ ] Check why `Flowable.flatMapIterable` is drastically slower than `Observable` and Reactor's version in just/range/crossmap scenarios.
- [ ] `amb`: indicate cancellation and request propagation
- [ ] `ambArray`: indicate cancellation and request propagation
- [ ] `combineLatest` + 4: missing diagram
- [ ] `combineLatestDelayError` + 5: missing diagram
- [ ] `concatArrayDelayError`: operator name, indicate error delayed
- [x] `concatArrayEager` + 1: missing diagram
- [x] `concatArrayEagerDelayError` + 1: missing diagram
- [ ] `concatDelayError` + 2: missing diagram
- [ ] `concatEager` + 4: missing diagram
- [ ] `create`: missing diagram
- [ ] `error(Callable)`: indicate callback that creates the Throwable
- [ ] `error(Throwable): indicate parameter
- [ ] `fromArray`: operator name, indicate items inside the box
- [ ] `fromCallable`: indicate item is the result of the callback inside the box
- [ ] `fromFuture` + 3: operator name
- [ ] `fromIterable`: operator name, indicate items inside the box
- [ ] `fromPublisher`: missing diagram
- [ ] `generate` + 4: missing diagram
- [ ] `intervalRange` + 1: missing diagram
- [ ] `just` + 8: indicate item inside the box (as many as there are sources, so 1..9)
- [ ] `mergeArray` + 1: operator name
- [ ] `mergeArrayDelayError` + 1: operator name
- [ ] `mergeDelayError` + 1: indicate inner sources are generated
- [ ] `sequenceEqual` + 3: indicate cancellation after the mismatch has been found
- [ ] `switchOnNextDelayError` + 1: operator name, indicate error delay
- [ ] `using` + 1: indicate actual Flowable and items
- [ ] `zipArray`: operator name
- [ ] `zipIterable`: operator name
- [ ] `all`: should return Single
- [ ] `ambWith`: indicate cancellation and request propagation
- [ ] `exists`: should return Single
- [ ] `as`: missing diagram
- [ ] `blockingFirst` + 1: missing diagram
- [ ] `blockingForEach`: operator name
- [ ] `blockingIterable` + 1: operator name, indicate iterator call to `hasNext()` and `next()`
- [ ] `blockingLast` + 1: operator name
- [ ] `blockingLatest`: missing diagram
- [ ] `blockingMostRecent`: operator name
- [ ] `blockingNext`: operator name
- [ ] `blockingSingle` + 1: operator name
- [x] `toFuture`: rework diagram to indicate `Future`
- [ ] `blockingSubscribe` + 4: missing diagram
- [ ] `buffer(..., Callable)` + 6: indicate custom collection
- [ ] `buffer(open, close)` + 1: parameter name in the box
- [ ] `collect`: indicate initial container supplier, should return Single
- [ ] `collectInto`: indicate initial container, should return Single, operator name
- [ ] `compose`: missing diagram
- [ ] `concatMap(prefetch)`: indicate prefetch effects through requests
- [ ] `concatMapDelayError` + 1: missing diagram
- [ ] `concatMapEager` + 1: missing diagram
- [ ] `concatMapEagerDelayError` + 1: missing diagram
- [ ] `concatMapIterable` + 1: missing diagram
- [ ] `concatWith`: operator name
- [ ] `contains`: should return Single
- [ ] `count`: operator name
- [ ] `defaultIfEmpty`: indicate non-empty case
- [ ] `delaySubscription(Publisher)`: missing diagram
- [ ] `dematerialize`: indicate dematerializing a terminal notification cancels the source
- [ ] `doFinally`: missing diagram
- [ ] `doAfterNext`: missing diagram
- [ ] `doOnCancel`: operator name, unsubscribe -> cancel in text
- [ ] `doOnComplete`: indicate events pass through
- [ ] `doOnEach` + 1: indicate events pass through
- [ ] `doOnError`: indicate events pass through
- [ ] `doOnNext`: indicate events pass through
- [ ] `doOnRequest`: missing diagram
- [ ] `doOnTerminate`: indicate events pass through, show both error and complete case
- [ ] `elementAt`: should return Maybe, indicate if source is shorter than index
- [ ] `elementAtOrDefault`: should return Single, indicate if source has that element
- [ ] `elementAtOrError`: should return Single, indicate error case
- [ ] `firstElement`: image aspect off, add case separator dashed vertical line
- [ ] `first`: image aspect off
- [ ] `firstOrError`: combine two sections, vertical separator, empty source arrow
- [ ] `flatMap(..., delayError)`: indicate error delay case
- [ ] `flatMap(..., maxConcurrency)` + 2: missing diagram
- [ ] `flatMap(Function, Function, Callable, int)`: missing diagram
- [ ] `flatMap(Function, BiFunction, boolean, int)` + 1: missing diagram
- [ ] `flatMap(Function, BiFunction, int)`: missing diagram
- [ ] `flatMapCompletable` + 1: missing diagram
- [ ] `flatMapIterable` + 1: image aspect looks off
- [ ] `flatMapMaybe` + 1: missing diagram
- [ ] `flatMapSingle` + 1: missing diagram
- [ ] `forEach`: missing diagram
- [ ] `forEachWhile` + 2: missing diagram
- [ ] `hide`: missing diagram
- [ ] `isEmpty`: should return Single
- [ ] `lastElement`: operator name, should return Maybe
- [ ] `last(T)`: should return Single, operator name
- [ ] `lastOrError`: combine sections into one, add vertical case separator
- [ ] `limit`: missing diagram
- [ ] `mergeWith`: operator name, indicate the second source as parameter
- [ ] `onErrorResumeNext(Function)`: indicate error function
- [ ] `onErrorReturn`: indicate error function
- [ ] `onErrorReturnItem`: operator name
- [ ] `onTerminateDetach`: missing diagram
- [ ] `publish(Function)` + 1: rework diagram
- [ ] `rebatchRequests`: missing diagram
- [ ] `reduce(seed, ...)`: indicate star as parameter
- [ ] `reduceWith(Callable,...)`: indicate star as a supplied value, operator name
- [ ] `repeat` + 1: indicate resubscription
- [ ] `repeatUntil`: indicate boolean supplier
- [ ] `replay` + 7: remove publish box
- [ ] `replay(Function)` + 7: rework diagram
- [ ] `retry()`: indicate infinte resubscription
- [ ] `retry(BiPredicate)`: indicate function decision on retry
- [ ] `retry(long)`: indicate retry count effect
- [ ] `retry(long, Predicate)`: indicate predicate effects
- [ ] `retry(Predicate)`: indicate predicate effects
- [ ] `retryUntil`: missing diagram
- [ ] `scan(R, ...)`: indicate initialValue as parameter
- [ ] `scan(Callable, ...)`: indicate initialValue is the result of a call
- [ ] `share`: indicate the source gets cancelled
- [ ] `singleElement`: operator name, should return Maybe
- [ ] `single`: operator name, should return Single
- [ ] `singleOrError`: combine cases into one box, add vertical case separators
- [ ] `skipUntil`: indicate until cancels the main source
- [ ] `sorted` + 1: missing diagram
- [ ] `startWith(Iterable)`: indicate iterable parameter, indicate subscription
- [ ] `startWith(Publisher)`: indicate subscription after the start element(s)
- [ ] `startWith(T)`: one start value, indicate subscription after the start element
- [ ] `startWithArray`: operator name, indicate subscription after the start element(s)
- [ ] `switchMapDelayError` + 1: operator name, indicate error is delayed
- [ ] `takeUntil(Predicate)`: indicate source is cancelled
- [ ] `takeUntil(Publisher)`: indicate source is cancelled
- [ ] `takeWhile`: indicate source is cancelled
- [ ] `to`: missing diagram
- [ ] `toList` + 1: should return Single
- [ ] `toList(Callable)`: should return Single, indicate custom collection
- [ ] `toMap` + 2: should return Single
- [ ] `toMultimap` + 3: should return Single
- [ ] `toObservable`: missing diagram
- [ ] `toSortedList` + 4: should return Single
- [ ] `unsubscribeOn`: missing diagram
- [ ] `withLatestFrom(s1, s2, ...)`: missing diagrams
- [ ] `withLatestFrom(Publisher[], ...)`: missing diagram
- [ ] `withLatestFrom(Iterable, ...)`: missing diagram
- [x] `amb`: missing diagram
- [x] `ambArray`: missing diagram
- [x] `concat(Iterable)`: missing diagram
- [x] `concat(Publisher)`: missing diagram
- [x] `concat(Publisher, int)`: missing diagram
- [x] `concatArray`: missing diagram
- [x] `concatArrayDelayError`: indicate error delayed, 1 marble per source
- [x] `concatArrayEager`: missing diagram
- [x] `concatDelayError(Iterable)`: missing diagram
- [x] `concatDelayError(Publisher)`: missing diagram
- [x] `concatEager(Iterable)`: missing diagram
- [x] `concatEager(Publisher)`: missing diagram
- [ ] `create`: missing diagram
- [ ] `defer`: missing diagram
- [ ] `error(Callable)`: indicate callable returns the error
- [ ] `fromAction`: missing diagram
- [ ] `fromCompletable`: missing diagram
- [ ] `fromSingle`: missing diagram
- [ ] `fromCallable`: missing diagram
- [ ] `fromFuture(Future)`: operator name in the box, indicate Future is the parameter
- [ ] `fromFuture(Future, long, TimeUnit)`: operator name in the box, indicate Future is the parameter, indicate timeout
- [ ] `fromRunnable`: missing diagram
- [ ] `merge(Iterable)`: missing diagram
- [ ] `merge(Publisher)`: missing diagram
- [ ] `merge(Publisher, int)`: missing diagram
- [ ] `mergeArray`: missing diagram
- [ ] `mergeArrayDelayError`: one marble per Maybe source
- [ ] `mergeDelayError(Iterable)`: one marble per Maybe source
- [ ] `mergeDelayError(Publisher)`: one marble per Maybe source
- [ ] `mergeDelayError(Maybe, Maybe, ...)`: one marble per Maybe source
- [ ] `sequenceEqual` + 1: result should be `Single`.
- [ ] `timer` + 1: result should be Maybe
- [ ] `using` + 1: rework to indicate the created Maybe
- [x] `zip(Iterable)`: one marble per Maybe source, result should be Maybe
- [x] `zip(Maybe, Maybe, ...)` + 8: one marble per Maybe source, result should be Maybe
- [x] `zipArray`: one marble per Maybe source, result should be Maybe
- [ ] `ambWith`: one marble per Maybe source, result should be Maybe
- [ ] `as`: missing diagram
- [ ] `blockingGet` + 1: missing diagram
- [ ] `cache`: one marble per Maybe source, result should be Maybe
- [x] `cast`: missing diagram
- [ ] `compose`: missing diagram
- [ ] `concatWith`: one marble per Maybe source, result should be Maybe, operator name, indicate other is a parameter
- [x] `contains`: one marble per Maybe source, result should be Single, empty case
- [ ] `count`: one marble per maybe, operator name, result should be Single, empty case
- [ ] `defaultIfEmpty`: non-empty case, result should be Maybe
- [ ] `delay(time)` + 1: one marble per Maybe source, result should be Maybe
- [ ] `delay(Publisher)`: one marble per Maybe, one signal by the Publisher, empty publisher case
- [x] `delaySubscription(Publisher)`: missing diagram
- [x] `delaySubscription(time)` + 1: one marble per Maybe source, result should be Maybe
- [ ] `doAfterSuccess`: missing diagram
- [ ] `doAfterTerminate`: operator name, one marble per Maybe, result should be Maybe
- [ ] `doFinally`: missing diagram
- [ ] `doOnDispose`: missing diagram
- [ ] `doOnComplete`: one marble per Maybe, result should be Maybe
- [ ] `doOnError`: missing diagram
- [x] `doOnEvent`: missing diagram
- [ ] `doOnSubscribe`: missing diagram
- [ ] `doOnSuccess`: missing diagram
- [ ] `filter`: one marble per Maybe, result should be Maybe
- [x] `flatMap(Function, Function, Callable)`: one marble per Maybe, result should be Maybe
- [ ] `flatMap(Function, BiFunction)`: one marble per Maybe, result should be Maybe
- [ ] `flatMapObservable`: should be mapped into an Observable
- [ ] `flatMapPublisher`: indicate backpressure
- [ ] `flatMapSingle`: indicate empty maybe results in error
- [ ] `flatMapSingleElement`: operator name, indicate empty maybe
- [ ] `flatMapCompletable`: indicate empty maybe
- [x] `hide`: missing diagram
- [x] `ignoreElement`: operator name, one marble per Maybe, result should be Maybe
- [ ] `isEmpty`: result should be Single
- [ ] `mergeWith`: operator name, one marble per Maybe, indicate backpressure
- [ ] `ofType`: one marble per Maybe
- [ ] `to`: missing diagram
- [ ] `toFlowable`: missing diagram
- [ ] `toObservable`: missing diagram
- [ ] `toSingle` + 1: missing diagram
- [ ] `onErrorComplete` + 1: missing diagram
- [ ] `onErrorResumeNext` + 1: one marble per Maybe, result should be Maybe, could use the diagram of onExceptionResumeNext
- [ ] `onErrorReturn`: one marble per Maybe, result should be Maybe, indicate callback
- [ ] `onErrorReturnItem`: operator name, one marble per Maybe, result should be Maybe, indicate normal outcome
- [ ] `onExceptionResumeNext`: operator takes a Maybe source directly
- [x] `onTerminateDetach`: missing diagram
- [ ] `repeat` + 1: one marble per source, indicate backpressure, indicate repeat conditions
- [ ] `repeatUntil`: operator name, repeat condition, indicate backpressure
- [ ] `repeatWhen`: one marble per Maybe, indicate backpressure
- [ ] `retry` + 2: one marble per Maybe, result should be Maybe, indicate repeat conditions
- [ ] `retry(int, Predicate)`: missing diagram
- [ ] `retry(Predicate)`: missing diagram
- [ ] `retryUntil`: missing diagram
- [ ] `retryWhen`: one marble per Maybe, output should be Maybe
- [ ] `takeUntil` + 1: one marble per Maybe, output should be Maybe
- [ ] `timeout` + 3: one marble per Maybe, output should be Maybe
- [ ] `timeout(MaybeSource)`: missing diagram
- [ ] `timeout(MaybeSource, MaybeSource)`: missing diagram
- [ ] `timeout(Publisher)`: missing diagram
- [ ] `timeout(Publisher, MaybeSource)`: missing diagram
- [x] `unsubscribeOn`: missing diagram
- [x] `zipWith`: one marble per Maybe, output should be Maybe





From [this comment](https://github.com/ReactiveX/RxJava/pull/4530#issuecomment-246390124):
- parameter names change in the code but the javadocs still refer to the old names
- potential exceptions change in the code and the javadocs aren't updated to match
- missing backpressure / scheduler / since-annotations, and outdated information in each of these
- changing things from consonant- to vowel-sound-starting, doing a search-and-replace, and not replacing "a" with "an" or vice-versa to match.  Also, sometimes changing singulars to plurals or vice-versa by search-and-replace, which causes its own set of grammatical headaches.
- if you see any documentation that uses the passive voice, you can almost always make it clearer and less prone to misinterpretation by rewriting it in the active voice
- URLs for marble diagrams are copy-and-pasted, the name of the operator is changed, but the width/height values in the img tag are not, so that the right image appears but in the wrong dimensions (there were a couple of these in the javadocs last I looked)
