**Issue**
I want to execute an action when an exception **of any kind** is thrown by a handler. Therefore I have defined this:

````csharp
public class RequestExceptionActionHandler : IRequestExceptionAction<CreateBillCommand>
{
	private readonly ILogger<Worker> _logger;

	public RequestExceptionActionHandler(ILogger<Worker> logger)
	{
		_logger = logger;
	}

	public Task Execute(CreateBillCommand request, Exception exception, CancellationToken cancellationToken)
	{
		_logger.LogInformation("Handled BillCommand: {request}", JsonSerializer.Serialize(request));

		return Task.CompletedTask;
	}
}
`````
**Problem description**
This only works if the handler throws an `Exception`. My code throws an `ArgumentException` and so the issue is that the action is not executed.

It should work according to [the docs](https://github.com/jbogard/MediatR/wiki#action-types):

> IRequestExceptionAction<in TRequest> - implement to execute action for **any thrown exceptions** which were thrown from any requests that inherit TRequest.

**Reproduction code**
````csharp
	void Main()
	{
		CreateHostBuilder(new string[] { }).Build().Run();
	}
	
	public static IHostBuilder CreateHostBuilder(string[] args) =>
			Host.CreateDefaultBuilder(args)
				.ConfigureServices((hostContext, services) =>
				{
					services.AddMediatR(Assembly.GetExecutingAssembly());
					services.AddHostedService<Worker>();
				});
	
	public class Worker : BackgroundService
	{
		private readonly ILogger<Worker> _logger;
		private readonly IMediator _mediator;
	
		public Worker(ILogger<Worker> logger, IMediator mediator)
		{
			_logger = logger;
			_mediator = mediator;
		}
	
		protected override async Task ExecuteAsync(CancellationToken stoppingToken)
		{
			_logger.LogInformation("Send at: {time}", DateTimeOffset.Now);
	
			try
			{
				await _mediator.Send(new CreateBillCommand { Id = Guid.NewGuid() });
			}
			catch (Exception ex)
			{
				_logger.LogError(ex, "Exception occured at: {time}", DateTimeOffset.Now);
			}
		}
	}
	
	public class CreateBillCommand : IRequest<Guid>
	{
		public Guid Id { get; set; }
		public Guid ProjectId { get; set; }
		public DateTime? ApprovedDate { get; set; }
	}
	
	public class CreateBillCommandHandler : IRequestHandler<CreateBillCommand, Guid>
	{
		private readonly ILogger<Worker> _logger;
	
		public CreateBillCommandHandler(ILogger<Worker> logger)
		{
			_logger = logger;
		}
	
		public Task<Guid> Handle(CreateBillCommand request, CancellationToken cancellationToken)
		{
			if (request == null) throw new ArgumentNullException(nameof(request));
	
			throw new ArgumentException("Error", nameof(request));
	
			return Task.FromResult(request.Id);
		}
	}
	
	public class RequestExceptionActionHandler : IRequestExceptionAction<CreateBillCommand>
	{
		private readonly ILogger<Worker> _logger;
	
		public RequestExceptionActionHandler(ILogger<Worker> logger)
		{
			_logger = logger;
		}
	
		public Task Execute(CreateBillCommand request, Exception exception, CancellationToken cancellationToken)
		{
			_logger.LogInformation("RequestExceptionActionHandler: {request}", JsonSerializer.Serialize(request));
	
			return Task.CompletedTask;
		}
	}
````
**Notes**
I've noticed that RequestExceptionHandlers do work like intended, so there seems to be a mismatch in behavior between exception handlers and actions.


Demonstrate that MediatR calls handlers associated with parent message