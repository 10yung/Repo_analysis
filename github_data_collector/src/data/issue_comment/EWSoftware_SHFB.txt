We are using sandCastle in our product builds but, we see below warnings in build logs. 

Type: WARNING (Pattern: [Ww][Aa][Rr][Nn]:)
[exec] Warn: ResolveReferenceLinksComponent2: MSDN URL not found for target 'T:System.XXXXXX'.

So, we tried installing the new sandcastle(v2019.11.17.0) from the link(https://github.com/EWSoftware/SHFB/releases) but, now we are seeing the below error on our product builds.

13:18:21 Running sandcastle
[exec] MRefBuilder (v2019.11.17.0)
Error: Unknown target framework version ' 2.0'.
[exec] Result: 1
[exec] XslTransform (v2019.11.17.0)
[exec] Copyright ¸ 2006-2019, Microsoft Corporation, All Rights Reserved.
[exec] Portions Copyright ¸ 2006-2019, Eric Woodruff, All Rights Reserved.
[exec] Info: Applying XSL transformation 'ApplyVSDocModel.xsl'.
[exec] Error: The input file 'reflection1.xml' could not be loaded.  The error is: Could not find file 'reflection1.xml'.
[exec] Result: 1
Info: Applying XSL transformation 'RemoveExplicits.xsl'.
[exec] Error: The input file 'reflection2.xml' could not be loaded.  The error is: Could not find file 'reflection2.xml'.
[exec] Info: Applying XSL transformation 'RemoveInstance.xsl'.
[exec] Error: The input file 'reflection3.xml' could not be loaded.  The error is: Could not find file 'reflection3.xml'.
[exec] Info: Applying XSL transformation 'ReflectionToManifest.xsl'.
[exec] Error: The input file 'reflection.xml' could not be loaded.  The error is: Could not find file 'reflection.xml'.
[exec] Error: 
[exec] BuildAssemblerCore: Each component element must have an id attribute that specifies the component's unique ID.

Could some one please check and let us know the reason for failure.
Kindly let us know in case of any more details.
This is a non-breaking simple set of additions to create a dotnet core based MSBuild task so multi-targeted build options can be tested. This is to allow `dotnet build` to work on a Visual Studio solution that references a Sandcastle project, see issue #517
I have noticed that the <see> tags in summaries in the generated help files lack the class names in front of them. eg `<see cref="DateTime.UtcNow"/>` inside `<summary>` tags results in a link with the text `UtcNow`. 

Screenshot from the documentation:

![image](https://user-images.githubusercontent.com/12137642/71450724-f6947900-276f-11ea-85e7-dfd97865b8fb.png)

Not very descriptive. Id like it to be `DateTime.UtcNow`

Is there a setting that controls this or do I have to add an inner text manually to every `<see>` element (and remember to update it if I rename something).

If there isn't is there a possibility of adding it. Something like: "show class name" as an attribute to see.




I'm using the Visual Studio extension.
Currently SHFB doesn't seem to take C# 8 nullable reference types into account. For instance, I have this method:

```csharp
public static IEnumerable<TSource> DistinctBy<TSource, TKey>(
	this IEnumerable<TSource> source,
	Func<TSource, TKey> keySelector,
	IEqualityComparer<TKey>? keyComparer = null
)
```

But the rendered documentation doesn't include the `?` in `IEqualityComparer<TKey>?`.

It would be nice to support nullable type references so that signatures can be correctly represented. (to be fair, even the MS documentation doesn't include nullability annotations... But it should!)
This is more of a best-practices question, and perhaps an attempt to determine if a better way to do this could be discovered.  I have a class that is inherited from a class found in a nuget package. As per your guidance, I created a 'child' documentation project that is not built, but is rather configured in the main project as an Additional Reference Links plug-in with all the link types set to None. As an aside, it is Newtonsoft.Json and it has sample code blocks that cannot be resolved so I added the code block component and allowed missing souce code files/regions. This all works well. 

The best practices question is how to properly reference the path to the nuget package contents to add it as a documentation source for the child SHFB project to consume.

There are two options that I see to accomplish this right now: 
**Option 1**
Reference the nuget package path. Issues with this is this path may differ based on nuget configuration, and secondly, is brittle in that updating the package version requires a manual modification. In the ChildShfbProject.shfbproj I have an example of using this approach: `<DocumentationSource sourceFile="%USERPROFILE%\.nuget\packages\newtonsoft.json\6.0.5\lib\net45\Newtonsoft.Json.dll" xmlns="" />`
**Option 2**
Use the build process of the assembly being documented, via a post build step, to copy these references from the build output to a static known folder, and configure that to be the location for the documentation source. This is less brittle, but still has issues/concerns:

- If a multi-target project, would need to handle the case to only copy dependencies for the SHFB target framework.
- Depends on SHFB and when it processes the child project. My assumption is this would be done after assuring the build of the main project documentation sources is complete, in which case we can rely on the files being there.
- Visual Studio SDK projects (and probably classic projects using PackageReference) do not copy the .xml files from the nuget lib source folder to the output directory. This behavior has been under heavy discussion here: https://github.com/dotnet/sdk/issues/1458#issuecomment-401497095
- While the above three issues/concerns have workarounds, it requires superhuman understanding to maintain/understand. I need to understand the help doc build depends on custom build steps, injection of an 'AfterTarget' task, copying of output to a static directory, referencing the dependency properly as a documentation source. This is just yucky and unmaintainable. 

This approach can be seen in the ValueTupleSandcastleDemo.csproj file (The two 'Target' elements) and in the ChildShfbProject.shfbproj where the path to these outputs is referenced. This example can be found in the zip I attached to an unrelated issue: https://github.com/EWSoftware/SHFB/issues/763#issuecomment-557578884

**Possible Alternate**
Perhaps something kind of like #748 where Tom proposes some integration with the build pipeline of nuget restore. It may be possible to determine the package path, use that to set a variable (perhaps package name), and that variable would be available to use as part of the `DocumentationSource` element. This would be brittle in terms of package versions, since the packages in SHFB projects don't appear in Visual Studio Nuget manage packages for solution, but this is the only path I can see. Unless I am missing something?
Hi Eric,

Was building a new library using VS2019 and targeting .NET Standard 2.1, is this supported yet or do I need to update something in the config for it? See build log details below...

Thanks.
Ritchie

```
<buildStep step="GenerateReflectionInfo">
Generating reflection information...
[C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\MSBuild\Current\Bin\MSBuild.exe - GenerateRefInfo.proj]
Build started 10/3/2019 10:42:24.
Project &quot;D:\Projects\gemstone\threading\src\DocGen\Help\Working\GenerateRefInfo.proj&quot; on node 1 (default targets).
PrepareForBuild:
  Creating directory &quot;obj\Debug\&quot;.
GenerateRefInfo:
  MRefBuilder (v2019.9.15.0)
  Copyright c 2006-2019, Microsoft Corporation, All Rights Reserved.
  Portions Copyright c 2006-2019, Eric Woodruff, All Rights Reserved.
  No source code context base path specified.  Source context information is unavailable.
  Loaded 1 assemblies for reflection and 1 dependency assemblies.
MRefBuilder : error : Unresolved assembly reference: netstandard (netstandard, Version=2.1.0.0, Culture=neutral, PublicKeyToken=cc7b13ffcd2ddd51) required by gemstone.threading [D:\Projects\gemstone\threading\src\DocGen\Help\Working\GenerateRefInfo.proj]
    Last step completed in 00:00:00.8710
</buildStep>
<buildStep step="Failed">

SHFB: Error BE0065: BUILD FAILED: Unexpected error detected in last build step.  See build log for details.
   at SandcastleBuilder.Utils.BuildEngine.TaskRunner.Run(String processFilename, String targetFile, String arguments)
   at SandcastleBuilder.Utils.BuildEngine.TaskRunner.RunProject(String projectFile, Boolean minimalOutput)
   at SandcastleBuilder.Utils.BuildEngine.BuildProcess.Build()

</buildStep>
```
The change in [SHFB version 2019.8.24.0](http://ewsoftware.github.io/SHFB/html/3bb3e240-7c36-456b-bebd-972ff1508c15.htm) to use the Microsoft Docs cross reference service instead of the MTPS content service has caused build warnings in my project, such as the ones below.

```
BuildAssembler : warning : ResolveReferenceLinksComponent: [****] Member ID URL not found for target 'T:Microsoft.Expression.Interactivity.Core.ChangePropertyAction'.
BuildAssembler : warning : ResolveReferenceLinksComponent: [****] Member ID URL not found for target 'T:System.Windows.Interactivity.InvokeCommandAction'.
```

For example, in previous versions of SHFB, `T:Microsoft.Expression.Interactivity.Core.ChangePropertyAction` would link to http://msdn2.microsoft.com/en-us/library/ff726452, which redirects to https://docs.microsoft.com/en-us/previous-versions/visualstudio/design-tools/expression-studio-4/ff726452(v=expression.40)?redirectedfrom=MSDN. This page has a "We're no longer updating this content regularly" warning so this might be why it's not available through the Microsoft Docs cross reference service, even though the content does exist at docs.microsoft.com (under "Previous Versions").

I'm not sure what the best solution is but one option might be to make SHFB (optionally?) fallback to the MTPS content service if the content cannot be found via the Microsoft Docs cross reference service.

If I reference in ```codeEntityReference ``` a type that could not resolved for linking this reference and ``qualifyHint`` is set to ``true`` it places only simple name instead a full qualified.

```xml
<codeEntityReference qualifyHint="true">T:Common.ICodeVersion</codeEntityReference>
```

results in ``ICodeVersion`` instead ``Common.ICodeVersion``.

Currently I have a workaround by placing "Common.ICodeVersion" in ``linkText``.
I have some annoying problem with SHFB in one of my project.

I link some web references which are using some Visual Studio generates an access classes. These classes are excluded from SHFB by API filter because they produce +500 warnings (not well documented code :-) )
One of my classes which servers like a routing table for clients, produces several warning, because it uses there references, see below.
![2018-03-21_070729](https://user-images.githubusercontent.com/8374320/37696461-ef556e82-2cd6-11e8-8675-12eacd3ce62b.png)
![2018-03-21_070741](https://user-images.githubusercontent.com/8374320/37696464-f32c9ea4-2cd6-11e8-932d-ee136b1b58e5.png)

- I have tried to elaborate with Additional Reference Links plug-in, no luck. I don't have an assembly to link.
- I have tried to elaborate with Assembly Binding Redirection plug-in, no luck.
- I have tried to inject missing links directly into assembly's XML file, so far manually with manually triggered build of the SHFB project. No luck.

Any suggestion?
Does SHFB generated website help files have support for partial searching in the search bar? For example, I built some help files and there is a class with a function called "GetDate". I would expect the search to return the result for this if I searched "GetDat", but it doesn't. It does return the expected result if I use the full name (GetDate), but a partial search is a lot more useful if the programmer doesn't know the full name off the top of their head.

Apologies if this has already been addressed, I had a look through issues and documentation for an answer but I didn't see anything.