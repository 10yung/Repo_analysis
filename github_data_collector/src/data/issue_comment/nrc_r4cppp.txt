In Destructuring pt2, in the second code snippet, regarding the first option of the match statement, it says 

> "...in the first approach we dereference x to a temporary variable with type `Enum1` (which copies the value in `x`)...". 

`Enum1` has copy semantics, so it makes sense that `*x` (the value in `x`) is **copied** into a temp variable. From that I conclude that if there is a match statement on a dereference of an object with copy semantics, a temporary variable is created and the value of `*x` is **copied** into it. So far so good.

However, in the third code snippet, option 1 of the match statement, where the value of `x` (now of type `Enum2`) has move semantics, shouldn't the same hold true, but this time, with a move operation, making this scenario illegal? That is, when creating a match statement on a dereference of an object with move semantics, it should, following the same logic, result in a temporary variable into which `*x` would be **moved**? Or does that not apply in case of object with move semantics? That is, if you have a match statements on a dereference of an object with move semantics, no temporary variable is created?

I don't know the answer as I'm just starting out with Rust and it gets me confused. I think this point should be clarified.
In the "Data Types" section, a way of accessing the elements of a tuple discussed in this tutorial is through destructuring. Under "Tuple structs", it is suggested that this is the only way of accessing tuple elements:

> Their fields must be accessed by destructuring (like a tuple), rather than by name.

However, there is another way of accessing tuple elements: through "dot notation". Tuple elements can be accessed directly by using a period (`.`) followed by the index of the value. For example:
```rust
fn bar(x: (i32, i32)) {
    println!("x was ({}, {})", x.0, x.1); // Note the `x.0` and `x.1`.
}
```

This can also be applied to tuple structs:
```rust
struct IntPoint (i32, i32);

fn foo(x: IntPoint) {
    println!("x was ({}, {})", x.0, x.1); // Note the `x.0` and `x.1`.
}
```

It is quite intriguing to me as to why this is left out, because this syntax is encountered early on in the Rust Programming Language book.
In the section on data types it states:

```A rust struct is similar to a C struct or a C++ struct without methods. Simply a list of named fields. The syntax is best seen with an example:```

This statement is misleading because it suggests that methods can not be defined for a struct, while methods can be defined via impl blocks.  There is a brief mention of this possibility with:

```Behaviour is defined by functions and those can be defined in traits and impls ```

However, this suggests the impls would define _functions_ rather than _methods_, while in fact impls can define both.  

For reference here is a short example outlining the type of functionality I am describing.

```Rust
struct Example {
    foo: i16,
    bar: i16,
}

impl Example {
    fn baz(&self) -> i16 {
        self.foo + self.bar
    }
}

fn main() {
    let ex = Example {
        foo: 3,
        bar: -1,
    };
    println!("{}", ex.baz());
}
```

This will print `2`.  I believe a section on this functionality should be added as it is critical to creating useful abstractions.
The document shows that if no type can be inferred, declarations default to _isize_ and _usize._ According to this:
https://doc.rust-lang.org/book/first-edition/primitive-types.html#numeric-types
This is not the case. Actually doing this on a 64bit machine:
`    let _x = 30000000000;`
gives "warning: literal out of range for i32" when compiled. However,
`    let _x: isize = 30000000000;`
gives no issues whatsoever.

I would like to write a chapter on Rust's error handling and comparing and contrasting it against both integer/custom type error handling and exceptions in C++.

I just wanted to check to see if this would be worthwhile work before I started going too deep.
As a C++ programmer the tutorial felt very off because it focus heavily on C++03 (like the style section briefly mentions). It might be worth it to put this up-front, so that it is clear from the very beginning.  
In the primitive type chapter, it might be a good idea to describe the mechanisms of integer overflow in Rust. (RFC 560) And also the difference between debug and release build here.
In Destructuring, you write

> Lets say you want a reference to a variable in a pattern. You can't use & because that matches a reference, rather than creates one (and thus has the effect of dereferencing the object). For example, ...

1) Do you mean a) "Let's say you want to **make** a reference to an (ordinary) struct field using a pattern (effectively aliasing the field)", b) "Let's say you want to refer to a reference variable in a struct using a pattern (creating an additional reference to the object referred to by the field)" or c) something else?

2) Why would "matching a reference" have the effect of dereferencing the object?  On the face of it, that is surprising behavior (unless it's to avoid a &&T (in which case I'd still have expected the dereference to yield the expected &T)).  Maybe another sentence explaining why the dereference would be helpful?

working with for .. index loop example.

$ rustc --version
rustc 1.12.0-nightly (9316ae515 2016-07-24)
$ 

fn print_all( all: Vec<i32> ){
    for i in ..all.len() {
        println!("{}: {}", i, all.get(i));
    }
}

fn main() {
}
`
the compiler error seen is

for_idx.rs:4:2: 6:3 error: the trait bound `std::ops::RangeTo<usize>: std::iter::Iterator` is not satisfied [E0277]
for_idx.rs:4    for i in ..all.len() {
              ^
for_idx.rs:4:2: 6:3 help: run `rustc --explain E0277` to see a detailed explanation
for_idx.rs:4:2: 6:3 note: `std::ops::RangeTo<usize>` is not an iterator; maybe try calling `.iter()` or a similar method 
for_idx.rs:4:2: 6:3 note: required by `std::iter::IntoIterator::into_iter` 
for_idx.rs:5:25: 5:35 error: the trait bound `std::option::Option<&i32>: std::fmt::Display` is not satisfied [E0277]
for_idx.rs:5        println!("{}: {}", i, all.get(i));
                                     ^~~~~~~~~~
<std macros>:2:27: 2:58 note: in this expansion of format_args!
<std macros>:3:1: 3:54 note: in this expansion of print! (defined in <std macros>)
for_idx.rs:5:3: 5:37 note: in this expansion of println! (defined in <std macros>)
for_idx.rs:5:25: 5:35 help: run `rustc --explain E0277` to see a detailed explanation
for_idx.rs:5:25: 5:35 note: `std::option::Option<&i32>` cannot be formatted with the default formatter; try using `:?` instead if you are using a format string 
for_idx.rs:5:25: 5:35 note: required by `std::fmt::Display::fmt` 
error: aborting due to 2 previous errors 

Hi, 
recently I started working my way through this [chapter](https://github.com/nrc/r4cppp/blob/master/graphs/README.md). It's the most interesting part, but it's quite difficult to read (at least compared to the other parts and especially if your are quite new to Rust, like me and I guess most people here). 

For instance, I guess it would increase the readability to use less Rust code in the section-headings and also in the text. This means less `Rc<RefCell<Node>>` in the continuous text  (only in examples or if the words fit into the text, i.e. '`Weak` pointer' is fine). Another issue is the choice of words: It could be more consistent with the official Rust documentation (which c++ programmers will definitely consult, too).
@nrc If you do not like these ideas, please let me know.

I would be happy to make some proposals and to contribute to this. 
Just started a branch some days ago (work in progress): https://github.com/Liamsi/r4cppp/tree/reading_graphs_arena 
I did not find the time to come up with good alternatives for every issue yet, but this issue is also a reminder to myself to do so.

Cheers and thanks again for this project :+1: 
