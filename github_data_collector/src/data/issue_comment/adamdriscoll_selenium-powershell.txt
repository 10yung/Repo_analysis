* Add DriverPath to Start-SeChrome
to enable loading a specific version of ChromeDriver.

* clean up scoping debug test
It should be possible to use a Powershell pipeline to chain steps together, such that:

```powershell
$Driver | Enter-SeUrl -url 'https://www.google.com'
$Driver | Find-SeElement -ClassName 'SDkEP' | Find-SeElement -Name 'q' | Send-SeKeys -Keys 'Powershell-Selenium' | Send-SeKeys -Keys ([OpenQA.Selenium.Keys]::Enter)
$Driver | Stop-SeDriver
```

This may lead to a couple of possibly breaking changes if existing scripts do not expect output from certain functions.

Would this feature be desired by the users of this module?
Can you please document a consistent way to handle drop down menus? It is not possible to do a Find-SEElement on a drop down and then use Send-SEKeys, as the field will come back as "not interactable"

In other languages' implementation of Selenium, I can do something like this:

`select = Select(driver.find_element_by_id('UserDropDown'))
 select.select_by_visible_text('Joe_Smith')
`

But I have been unable to get the syntax right in PowerShell. I see a LOT of threads on SO and other sites asking for this kind of info, so a solid example of implementing this would be awesome.
Hi @adamdriscoll,

I was wondering how you are planning on managing Chrome Driver versions and keeping it in sync with the version of Chrome running on the system?  I want to be able to handle Chrome updates for my use case and would like to continue using this module.

It seems like we need to add functionality to automatically download the matching version of the driver to keep it in sync with the version of Chrome that is running on the users system.  Assuming you agree, I'd be happy to put together an initial implementation and submit as a PR.

Thoughts?

Thanks,
Mark
When trying to use the send keys as an listed in the example documentation: 
$Element = Find-SeElement -Driver $Driver -name "userid"
Send-SeKeys -Element $Element -Keys "username" 

It no longer sends the keys: 
Error: Send-SeKeys : Cannot process argument transformation on parameter 'Element'. Cannot convert the "System.Object[]" value of type "System.Object[]" to type "OpenQA.Selenium.IWebElement".

Started as of 8pm CST on 10/22. Before that the code worked fine. 
I have a PS script that uses Firefox to download a CSV file from a web site.  The challenge is that when I click the download button, the web site opens a popup dialog box prompting me to open the file or save it.  The way I'm currently handling this is via the AutoIt module.  However, I see in https://www.seleniumhq.org/docs/03_webdriver.jsp that there is a switchTo().alert() function. So, I tried $Driver.SwitchTo().Alert() but got: Exception calling "Alert" with "0" argument(s): "No modal dialog is currently open".  I'm unclear if this is the correct way to handle this modal dialog.

Alternatively, (per https://stackoverflow.com/questions/13839544/using-selenium-webdrivers-method-browser-helperapps-neverask-savetodisk-how-ca) there is a way to set a FireFox profile preference, i.e. profile.setPreference("browser.helperApps.neverAsk.saveToDisk", "text/csv").  Is there a way to do this in the Selenium PS module?

Thanks!
Hi, 
Below at very bottom is the java script generated by selenium ide. I use the following three lines but can't find the element called username as I don't know how to switch to frame 0 in the document model.

$Driver = Start-SeChrome
Enter-SeUrl https://www.xyz.com/ -Driver $Driver
$Element = Find-SeElement -Driver $Driver -Id "username"

What is the powershell commands for the following two lines?

driver.manage().window().setSize(new Dimension(1920, 1040));
    driver.switchTo().frame(0);



// Generated by Selenium IDE
import org.junit.Test;
import org.junit.Before;
import org.junit.After;
import static org.junit.Assert.*;
import static org.hamcrest.CoreMatchers.is;
import static org.hamcrest.core.IsNot.not;
import org.openqa.selenium.By;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.firefox.FirefoxDriver;
import org.openqa.selenium.chrome.ChromeDriver;
import org.openqa.selenium.Dimension;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.interactions.Actions;
import org.openqa.selenium.support.ui.ExpectedConditions;
import org.openqa.selenium.support.ui.WebDriverWait;
import org.openqa.selenium.JavascriptExecutor;
import org.openqa.selenium.Alert;
import org.openqa.selenium.Keys;
import java.util.*;
public class Test12Test {
  private WebDriver driver;
  private Map<String, Object> vars;
  JavascriptExecutor js;
  @Before
  public void setUp() {
    driver = new ChromeDriver();
    js = (JavascriptExecutor) driver;
    vars = new HashMap<String, Object>();
  }
  @After
  public void tearDown() {
    driver.quit();
  }
  @Test
  public void test12() {
    driver.get("https://sez00vvm-500.sweng.ncr.com/vsphere-client/?csp");
    driver.manage().window().setSize(new Dimension(1920, 1040));
    driver.switchTo().frame(0);
    driver.findElement(By.id("username")).click();
    driver.findElement(By.id("username")).sendKeys("test");
    driver.findElement(By.id("password")).sendKeys("test1");
    driver.findElement(By.id("submit")).click();
  }
}

Hi
Are there any other pre-requisites for this to run?
I have this working fine on a Windows 10 PC. Have tried on another windows 10 PC and it doesnt work. 
PScore 6.0 installed
Selenium installed via Install-Module Selenium
Chromedriver 76 downloaded to match Chrome install (76.0.3809.126)

SImple Script
$Driver = Start-SeChrome
Enter-SeUrl https://www.google.com -Driver $Driver

Chromedriver starts, Chrome starts with Data;, as the URL.

If you go back to ChromeDriver it says Timed Out connecting to Chrome, Retrying...

In powershell ISE i also get an error stating
Method Invocation failed because [System.String] does not contain a method named 'Navigate'.
At C:\Program Files\windowsPowershell\Modules\Selenium\1.2\Selenium.psm1:65 char :5
+         $Driver.Navigate().GoToUrl($url)




I have tried a simple test and want to run paralelle within Jobs. But somehow the Job just completes and doesnt run the script to the end.

Is it even possible to run inside a Job? 

This is the simple testscript I am using:
```
Start-Job -Name test -ScriptBlock {
  $Driver = Start-SeChrome
  Enter-SeUrl https://google.com -Driver $Driver

  if (Find-SeElement -Driver $Driver -ClassName "gLFyf") {
      Write-Verbose -Message "Test successfull" -Verbose
  } else {
      Write-Verbose -Message "Test Error" -Verbose
  }
  #Stop-SeDriver $Driver
}
It would be nice if we could keep the tests contained to the machine. We could use UniversalDashboard to stand up a website\webserver and then test the selenium module with it