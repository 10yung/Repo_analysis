> poco/Net/include/Poco/Net/SocketImpl.h

```
virtual void setReceiveTimeout(const Poco::Timespan& timeout); 
/// Sets the send timeout for the socket. 
```

Sets the **_send_** timeout for the socket???
Rather than sets the receive timeout??
Was not sure if implementation should be put in .cpp or in .h with inline. So I did the same thing as the two operators that was already there.
Poco handles DST as +3600s, however there exists also negative DST offset (-3600s).
Example is Europe/Dublin timezone, where poco erroneously returns offset 7200 instead of 0 during winter with recent tzdata/tzinfo package under Linux.

This line of code causes this behaviour:
https://github.com/pocoproject/poco/blob/poco-1.9.4-release/Foundation/src/Timezone_UNIX.cpp#L79

For background on this, see https://github.com/tzinfo/tzinfo/issues/95#issuecomment-479639994
Chrome 80 is changing the default value for the SameSite HTTPCookie attribute to Lax on Feb 4, 2020.  Currently POCO's HTTPCookie code does not support setting the SameSite attribute (RFC 6265bis https://tools.ietf.org/html/draft-ietf-httpbis-rfc6265bis-03).  Firefox is heading in this direction too.

https://www.chromestatus.com/feature/5088147346030592

******NOTE: There is currently a bug affecting Mac OSX and iOS which causes SameSite=None cookies to be inadvertently treated as SameSite=Strict and therefore not sent with cross-site requests. (See https://bugs.webkit.org/show_bug.cgi?id=198181) Until this is fixed, SameSite=None may not work properly on Safari.******

Can we add support for the SameSite attribute?  There are 3 values for it - None, Lax, and Strict.  

I'm not sure what POCO's behavior should be for the Safari case above -- I heard other older browsers suffer the same problem so you'd have to NOT set the cookie instead of setting SameSite=None on those as well.
I wanted to build the **samples**.  After examining the `CMakeList.txt` file I determined I needed to add the `-DENABLE_TESTS=ON` option to the `cmake` command.  However with that argument supplied the build fails because it tries to copy from a non-existent directory:

```[ 46%] Linking CXX executable ../../bin/Encodings-testrunner
Error copying directory from "/tmp/poco/Encodings/testsuite/data" to "/tmp/poco/cmake-build/Encodings/testsuite/data".
Encodings/testsuite/CMakeFiles/Encodings-testrunner.dir/build.make:116: recipe for target 'bin/Encodings-testrunner' failed
```

As a workaround: manually adding an empty directory in the right place will fix it.

`mkdir ./Encodings/testsuite/data`
> fix a dead lock when called unregisterConnector twice in same time.
> 
> lock 1:
> When socket connected:
> NObserver::notify(Notification* pNf) <- lock
> SocketConnector::onWritable(WritableNotification* pNotification)
> SocketConnector::onConnect()
> SocketConnector::unregisterConnector()
> SocketReactor::removeEventHandler(const Socket& socket, const Poco::AbstractObserver& observer) <- wait to unlock
> 
> When delete SocketConnector:
> SocketConnector::~SocketConnector()
> SocketConnector::unregisterConnector() <- lock
> SocketReactor::removeEventHandler(const Socket& socket, const Poco::AbstractObserver& observer)
> SocketNotifier::removeObserver(SocketReactor* pReactor, const Poco::AbstractObserver& observer)
> NotificationCenter::removeObserver(const AbstractObserver& observer)
> NObserver::disable() <- wait to unlock
> 
> Test code maybe execute only on my machine.
> I will remove test code if you don't need it.
> 

from #2874 .
It changed source and destination branch.
While looking at the CMakeLists.txt (in order to improve them) I noticed already nice improvements being present, which are not in 1.9.4 (Eg : the namespaced aliases like Poco::Foundation). Will this come in 1.9.5 please ?

I would also suggest to using the proposed naming conventions usggested in the "Professional CMake" book in order to avoid name conflicts. Because source consumption of the libaries is a very important use case (FetchContent...)
For example in our codebase we were 1 character short for a name clash, we have a "Util" library, and poco has "Utils".
The suggestion in the book is to prefix with an underscore the libraries, something like "Poco_Foundation", with alias "Poco::Foundation".

What do you think ?

I can always try to help out.
This changes the format produced by OpenSSL from being separated by / to ,

@obiltschnig @aleks-f Is the change in formatting acceptable?

Closes #2869
I am using `Poco` Websocket for my project. I am getting exception "SSL connection unexpectedly closed" sometimes when I try to read Frames with `receiveFrame`.

Initially I was thinking there could be some issue with the Server. However, I came across [this link][1]. It looks like `Poco` could have some issues/bugs and that could be reason for this exception. I am unable to move forward with this issue in my mind. Below is the code part that sometimes throws that exception. 


        Poco::Net::HTTPSClientSession httpsClient(uri.getHost(), uri.getPort(), getSSLContext());
        Poco::Net::HTTPRequest request(Poco::Net::HTTPRequest::HTTP_GET, "/", Poco::Net::HTTPMessage::HTTP_1_1);
        Poco::Net::HTTPResponse response;

        httpsClient.setTimeout(Poco::Timespan(8000 * 1000));
        append_headers(request);

        regFailCount_ = 0;
        // TODO: Use shared_ptr
        webSocket_ = new Poco::Net::WebSocket(httpsClient, request, response);

     while (true) {
     int len = 0;
     webSocket_->setReceiveTimeout(Poco::Timespan(1000));    // 1 millisecond
     if ((len = webSocket_->receiveFrame(buffer, sizeof(buffer), flags)) < 0)
         continue;
     // Process the buffer
     }

**Poco Version is 1.7.8**


  [1]: https://github.com/pocoproject/poco/issues/1160
The current implementation of `X509Certificate::subjectName()` doesn't return return non ASCII UTF-8 characters. Instead it returns them in hex escaped form.

If the subject conains Zählerweg as the locality the expected return would be:
```
/L=Zählerweg
```
However `X509Certificate::subjectName()` returns:

```
/L=Z\xC3\xA4hlerweg
```

Using `subjectName(X509Certificate::NID_LOCALITY_NAME)` properly returns `Zählerweg`

So i think the issue lies in the OpenSSL function [`X509_NAME_oneline`](https://www.openssl.org/docs/man1.0.2/man3/X509_NAME_oneline.html), used [here](https://github.com/pocoproject/poco/blob/master/Crypto/src/X509Certificate.cpp#L202) which according to the documentation is "strongly discouraged in new applications".


## Test case to reproduce issue:
https://github.com/siemens/poco/commit/eb35254610b4c793a13983c5f8482737414d4591

Poco Version:  1.9.4 and master