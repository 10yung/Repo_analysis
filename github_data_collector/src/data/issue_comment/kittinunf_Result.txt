It would be useful to add a function, let's say for example `mapSafe` that could handle an exception of another type, for example:

```kt
suspend fun <V : Any, U : Any, E : Exception, D : Exception> SuspendableResult<V, E>.mapSafe(transform: suspend (V) -> U): SuspendableResult<U, D> = try {
    when (this) {
        is SuspendableResult.Success -> SuspendableResult.Success(transform(value))
        is SuspendableResult.Failure -> SuspendableResult.Failure(error)
    }
} catch (ex: Exception) {
    SuspendableResult.error(ex as D)
}
```
Haven't tested this. Thoughts ?
Hello guys,

I've some validations like:
```
    val factoryIdExists: Result<Long, Exception> = Result.of(productDto.factory.factoryId)
    val factoryExists: Result<FactoryDto, Exception> = 
    Result.of(factoryService.getFactory(factoryIdExists.get()))
    val validations = Validation(factoryIdExists, factoryExists)
```

What if we could add a label to each validation, so, it would be easier to present the validation that failed to an API client, for example. Do you think that it would be worth? If so, I can design it.

Thanks!
Kotlin 1.3 introduces a new built in type called `Result<T>` ([docs](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-result/index.html)) in the standard library (stdlib) and in the `kotlin` package.

Do you have an opinion on it? It seems to have taken a lot of inspiration from this library, but with one big difference: It doesn't have an equivalent to `flatMap` for operations that return a new `Result<T>`. It also doesn't place any constraints on errors, which are typed as `Throwable`.

The immediate inconvenience after upgrading my project to kotlin 1.3 is that I now need to explicitly add the import to use `com.github.kittinunf.result.Result`.

The KEEP can be seen here: https://github.com/Kotlin/KEEP/blob/master/proposals/stdlib/result.md
Whenever an unexpected exception gets thrown while evaluating a function with `Result` it leads to an unintuitive `ClassCastException`. Here is a simple example:
```kotlin
import com.github.kittinunf.result.Result
import org.junit.jupiter.api.Test
import kotlin.test.fail

internal class ResultExceptionClassCastTest {
    class MyException: Exception()

    @Test
    fun `Unexpected exception leads to unintuitive ClassCastException`() {
        Result.of<String, MyException> {
            operation("something")
        }.fold({}, {
            fail("Not reached")
        })
    }

    private fun operation(it: String): String {
        throw IllegalArgumentException()
        return "never reached $it"
    }
}

```
Is there something that I as a library user can do to handle this better? Is this an issue with the library?

The simple solution would be to expect an `Exception` (or `Throwable`!), and then to cast to the expected type, if it indeed is that type, but this doesn't seem like a very good solution.
Would you be open to a PR to add [multiplatform support](http://kotlinlang.org/docs/reference/multiplatform.html) to this project?
Could you publish your library to maven central. It is causing issues for people who do not have jcenter setup.

See https://github.com/DiUS/pact-jvm/issues/521
