
怎么集群，有个人用的前端吗
在内网搭了个 hadoop 集群，需要解析 hostname，不想把 DNS 请求转发到外网，怎么设置？
我看你这里面构造了
struct event {
    int size;
    int onexit;
    struct iner_event *ie;
    struct event_data data[0];
};
选择一个epoll收到一个fd的时间，会设置和读取 event.event_data[fd], 这个fd会越界吗，超过size的值吗
www.baidu.com.		1216	IN	CNAME	www.a.shifen.com.
www.a.shifen.com.	313	IN	A	119.75.218.70
www.a.shifen.com.	313	IN	A	119.75.217.109
类似于这样的，我在records.z里写www.douban.com.   172800  IN  222.222.222.222然后 ./client.c "hijack"
然后dig   域名还是以上的三条。文件里的222.222.222.222不生效。请问带有CNAME的域名如何劫持？
　　您好，我对struct event对象中柔性数组成员data的使用方式有一个疑问，能否帮忙解答下？
　　在run_sentinel()函数中，dnspod调用create_event()函数创建了元素个数为size个的struct event_data类型的柔性数组data[]，如下：
struct event *
create_event(int size)
{
　struct event *ev =
 　　malloc(sizeof(struct event) + sizeof(struct event_data) * size);
　……
　return ev;
}
　　所以该柔性数组的索引范围应该是[0, size-1]，但是在后续使用该数组的时候，其使用的索引值是socket描述符，如下：
int
add_event(struct event *ev, struct event_help *help)
{
　struct epoll_event e = {0};
　int ret = 0;
　int epfd = ev->ie->epfd;
　e.data.fd = help->fd;
　if (e.data.fd < 0)
　　return -1;
　if (help->type == ET_READ)
　　e.events = EPOLLIN;     // | EPOLLET;
　if (help->type == ET_WRITE)
　　e.events = EPOLLOUT;    // | EPOLLET;
        
　/*
　* 这个地方是不是会有点问题，因为ev->data这个柔性数组的大小为size(create_event()
　* 中指定)，那么索引这个柔性数组的索引范围应该是[0,size-1]，但是这里却是用socket
　* fd来索引这个数组，而socket fd是有可能会大于size的。
　*/
　ev->data[help->fd].cb = help->cb;
　if (help->ext != NULL)
　　ev->data[help->fd].ext = help->ext;
　ret = epoll_ctl(epfd, EPOLL_CTL_ADD, help->fd, &e);
　if (ret < 0) {
　　printf("fd is %d\n", help->fd);
　　perror("epoll_ctl");
　}
　return ret;
}
　　而socket fd大小是有可能会大于size的，这样是不是会造成访问了未申请的内存呢？
### 我测试服务器安装了 dnspod-sr，使用 queryperf 单机测试只有 2W 多，请问 15W QPS 是怎么测试出来的？求大神们解惑。
### dnspod-sr 服务器信息

> lscpu

```
Architecture:          x86_64
CPU(s):                12
Thread(s) per core:    2
Core(s) per socket:    6
厂商 ID：           GenuineIntel
型号名称：        Intel(R) Xeon(R) CPU E5-2620 v3 @ 2.40GHz
```

> free -g

```
              total        used        free      shared  buff/cache   available
Mem:             31           5           0           0          25          24
Swap:            15           0          15
```

> uname -a

```
Linux localhost 3.10.0-229.el7.x86_64 #1 SMP Fri Mar 6 11:36:42 UTC 2015 x86_64 x86_64 x86_64 GNU/Linux
```
### 测试语句

生成 10W 个测试域名

> for i in {1..100000}; do echo "d${i}.test.com. A" >> test.d; done
> for i in {1..100000}; do echo "d${i}.test.com. 172800 IN A 192.168.0.${i}" >> root.z; done
> ./src/dnspod-sr

使用 bind-9.10.4-P2/contrib/queryperf 测试

> ./queryperf -s 192.168.0.21 -d test.d

```
DNS Query Performance Testing Tool
Version: $Id: queryperf.c,v 1.12 2007/09/05 07:36:04 marka Exp $

[Status] Processing input data
[Status] Sending queries (beginning with 192.168.0.21)
[Status] Testing complete

Statistics:

  Parse input file:     once
  Ended due to:         reaching end of file

  Queries sent:         100000 queries
  Queries completed:    100000 queries
  Queries lost:         0 queries
  Queries delayed(?):   0 queries

  RTT max:          0.002000 sec
  RTT min:              0.000055 sec
  RTT average:          0.000854 sec
  RTT std deviation:    0.000324 sec
  RTT out of range:     0 queries

  Percentage completed: 100.00%
  Percentage lost:        0.00%

  Started at:           Thu Sep 29 10:45:41 2016
  Finished at:          Thu Sep 29 10:45:45 2016
  Ran for:              4.502813 seconds

  Queries per second:   22208.339542 qps
```

RT

translation of files to english. adding of more configuration options. 

在同一个网卡配置 2 个 IP：

```
# ip addr show em1
2: em1: <BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1500 qdisc pfifo_fast state UP qlen 1000
    link/ether 00:0c:29:a1:70:38 brd ff:ff:ff:ff:ff:ff
    inet 192.168.190.129/24 brd 192.168.190.255 scope global em1
       valid_lft forever preferred_lft forever
    inet 192.168.190.130/24 brd 192.168.190.255 scope global secondary em1:0
       valid_lft forever preferred_lft forever
```

当使用第二个 IP 来 dig @192.168.190.130 copybash.com，dig 失败，原因是请求从第一个 IP 返回来了，dig 认为这是欺骗行为：

```
;; reply from unexpected source: 192.168.190.129#53, expected 192.168.190.130#53
;; reply from unexpected source: 192.168.190.129#53, expected 192.168.190.130#53
;; reply from unexpected source: 192.168.190.129#53, expected 192.168.190.130#53

; <<>> DiG 9.9.4-RedHat-9.9.4-29.el7 <<>> @192.168.190.130 copybash.com
; (1 server found)
;; global options: +cmd
;; connection timed out; no servers could be reached
```

基于这样的原因，keepalive + LVS 的 VIP 无法正常提供域名解析服务。一个不够友好的解决方式就是在 /etc/resolv.conf 里面写多个 dnspod-sr 的 IP 作为 nameserver，来实现高可用。
