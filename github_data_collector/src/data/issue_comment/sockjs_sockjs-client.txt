I am using sockjs-client:1.4.0 in one of my react-native App, WebSocket connection is successful in ANDROID but in iOS  I am getting this response
`{
  "entropy": -1731224261,
  "origins": [
    "*:*"
  ],
  "cookie_needed": true,
  "websocket": true
}
`
after that xhr and xhr_streaming is getting called and this says-405 (Request method 'POST' not supported).
I am using sockjs-client with stompjs. I am not able to understand what is the issue 

I am sharing my code snippet 

```
const SockJS = require('sockjs-client')
  var Stomp = require("stompjs/lib/stomp.js").Stomp
  let options = { transports: ['websocket'] }
  var sock_ws = new SockJS(SOCKET_GUEST_URL, options)
  // let sock_ws = Stomp.client(SOCKET_GUEST_URL)
  let stompClient = Stomp.over(sock_ws)

  sock_ws.on = (ws, event) => console.log('onmessage')
  sock_ws.onclose = (event) => console.log('onclose')
  sock_ws.onerror = (ev) => { console.log('onerror', ev) }
  sock_ws.onopen = (ws, ev) => console.log('onopen')

  stompClient.connect({
    'Access-Control-Allow-Origin': '*'
  }, (frame) => {
    console.log("FRAME _ ___ ", frame)
  }, error => {
    console.log("ERRROR _ ___ ", error)
  });

}

this code works in android and it goes in success call back and prints result but does not work in iOS it always throws an error and I can see the CORS error in chrome debugger.
Can somebody help me 

We are getting a console error "SCRIPT445: Object doesn't support this action" from sockjs.js and only in IE11, which is coming from EventEmitter.prototype.emit function from the line` var args = new Array(l - 1);` where Array is undefined( Array constructor is not available) and this error occurs only happen when navigating away from the page (say by clicking the header back). 
I can see EventEmitter.prototype.emit is getting called many time but error occurs only when it is getting called from this.unloadRef -> this.ws.onclose ->self.emit('close', e.code, e.reason);  within function WebSocketTransport

Below is the code from where EventEmitter.prototype.emit is getting called and the error occurs. This issue is similar to https://bugzilla.mozilla.org/show_bug.cgi?id=696085 and it is already mentioned in the comments of code but seems like this issue has not been resolved completely for IE11 

```
  // Firefox has an interesting bug. If a websocket connection is
  // created after onunload, it stays alive even when user
  // navigates away from the page. In such situation let's lie -
  // let's not open the ws connection at all. See:
  // https://github.com/sockjs/sockjs-client/issues/28
  // https://bugzilla.mozilla.org/show_bug.cgi?id=696085
  this.unloadRef = utils.unloadAdd(function() {
    debug('unload');
    self.ws.close();
  });
this.ws.onclose = function(e) {
    debug('close event', e.code, e.reason);
    self.emit('close', e.code, e.reason); 
    self._cleanup();
  };
```


Our setup is pretty straight forward. SockJS 1.4 with a timeout of 5 seconds, handled by StompJS with a reconnect time of 1 second.

Sometimes, our backend takes longer than one second to respond to the /info call, and StompJS tries to close it to reopen it again, and in fact, it is just doing it fine by calling the "close" method in sockJs. I know that SockJS acknowledge the close operation because I see the "disconnected" entry just fine. Problem is that, it is not really closed, InfoReceiver continued going forward. And this is how I think I sometimes end up having 2 websocket sessions.

I attach a log of the relevant part. Log entries starting with "STOMP: " is the logging from StompJS. log entry like "Before connect - retry attempt X" is just the stompJs callback "beforeConnect". Rest of logging you can ignore it.

[log_not_closing.log](https://github.com/sockjs/sockjs-client/files/3905938/log_not_closing.log)

Hello, I am connecting to a 3rd party service that uses SockJS. They gave me an https:// url and I was able to build a very simple application that is able to connect to that service in JS using the SockJS client library.

However, I am trying to connect to it in C# and I'm not sure that the SockJS library available for c# actually works.

I've read that any SockJS server is available to connect over wss:// and when looking in my browser when running my JS application I see a connection to a wss:// server but I haven't been able to find the 'initial' URL. By the time the wss:// url shows up in Chrome it already has a session id on it and looks like this:

wss://hostname/ws/050/k2p35oq0/websocket so what URL would I use for just an initial websocket connection to this service on? Thanks for any help you can provide me with.


For eventsource when message contains % followed by space it throws URI malformed message. That pull request fixes that by escaping % not followed by any char.
Is there a way or feature I can use to tell how many websocket connections the client has made to the server?  I would like to be able to manage these and ensure there should only be one.  The reason for the question is because I'm seeing at the server http logs multiple xhr_streaming calls originating from the same client.  It does not happen all the time, for the most part, there's only one connection which is good but there are cases where we're seeing multiple connections which we would like to prevent as this could max out server connection resources.
Chrome allows loading resources from http://127.0.0.1 AFAICT and it helps local developments a lot. webpack-dev-server usually serves resources at http://127.0.0.1 also (and sometimes on a different port against the main express/egg service for better build performance).
A possible solution to #440 

I need that, as that infinite loop is giving a hard time to the load balancer when we have a couple of users having this issue.

What it does is that for every connection request, it stops retrying after 3 unsuccessful requests. It's the consumer's responsibility then to decide what to do (e.g. retry again?)

I'm not fully aware of the internals of this library, so I'm not too sure if this is fully safe to merge in, but it seems to cover the basic use case.
Hello!

I have the unfortunate challenge of trying to get an application working in a corporate/government type environment where all traffic is behind a firewall that decrypts/encrypts traffic to the outside world. The general way we get around that is that in the browser, the browser itself handles the SSL proxy problem, but when running node (in electron, for example) we need to manually say  "hey node, use this certificate authority". Example:

```
https.globalAgent.options.ca = myListOfCerts;
```

This sets it so that all normal XHR calls to the outside world running in nodejs use this trusted list of certs. 

Sockjs, however, is ignoring the global agent (i'm sure for good reason) when making the initial XHR request to the outside world before upgrading to the wss connection. This ignores the global ca option, and sockjs does not currently provide a way to pass through "xhrOptions" or whatever we would like to call them so that we can manually set them. 

I'd like to propose allowing xhrOptions to be passed in. I have forked the project for my own purposes, but think it would be a great feature and would be happy to set that PR up if this idea is well received.

Thanks!