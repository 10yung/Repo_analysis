Hello together,

we may all knows that we can set up to a `JDBCTemplate` a `Datasource`, so a `JDBCTemplate` knows which datasource it has: `JDBCTemplate JdbcTemplate = new JDBCTemplate(dataSource)`

Whats about with a `CrudRepository` ? How can a` CrudRepository` knows to which database it should communicate to ? It is using the default one, all time. If we setup a second database in Configuration, a `CrudRepositry` will use the first and primary one.

Is there an example of using CrudRepository with two databases ? I can't find one in web. 

I post it also in stack overflow [here](https://stackoverflow.com/questions/58960333/multiple-datasources-using-spring-data-jdbc-and-crudrepository-interface)

Thank you.
The Spring Data Geode team has an example repository, so I'm incorporating it here.
I couldn't understand why the doInitTestData() is never called when you invokde `mvn clean test`, as shown the log below :
[INFO] Running example.springdata.solr.AdvancedSolrRepositoryTests
=====> START annotationBasedBoosting ... 
=====> END annotationBasedBoosting ... 
=====> START useRealtimeGetToReadUncommitedDocuments ... 
=====> END useRealtimeGetToReadUncommitedDocuments ... 
=====> START influcenceScoreWithFunctions ... 
Product(id=id-5, name=XBox, category=null, location=null, description=Microsift XBox, inStock=false, popularity=2, score=1.0)
Product(id=p-0, name=foobar, category=null, location=null, description=null, inStock=false, popularity=null, score=0.0)
Product(id=p-1, name=foobar, category=null, location=null, description=null, inStock=false, popularity=null, score=0.0)
Product(id=p-2, name=foobar, category=null, location=null, description=null, inStock=false, popularity=null, score=0.0)
Product(id=p-3, name=foobar, category=null, location=null, description=null, inStock=false, popularity=null, score=0.0)
Product(id=p-4, name=foobar, category=null, location=null, description=null, inStock=false, popularity=null, score=0.0)
Product(id=p-5, name=foobar, category=null, location=null, description=null, inStock=false, popularity=null, score=0.0)
Product(id=p-6, name=foobar, category=null, location=null, description=null, inStock=false, popularity=null, score=0.0)
Product(id=p-7, name=foobar, category=null, location=null, description=null, inStock=false, popularity=null, score=0.0)
Product(id=p-8, name=foobar, category=null, location=null, description=null, inStock=false, popularity=null, score=0.0)
=====> END influcenceScoreWithFunctions ... 
=====> START annotationBasedHighlighting ... 
=====> END annotationBasedHighlighting ... 
[INFO] Tests run: 4, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 2.994 s - in example.springdata.solr.AdvancedSolrRepositoryTests


As consequence, the test methods such as annotationBasedBoosting(), annotationBasedHighlighting(), etc prints nothing.

What am I missing ?
The database postgreSQL modifies an attribute of the jsonb field. Error reporting exception:

Location: 44

Location: File parse_func.c regular ParseFuncOrColumn, line 528

Server SQL State: 42883
`$geoIntersects` is only supported with `Criteria` object. It will be good to add the example
When I define a projection the objects in the projection are 'inline' and not 'embedded' 

Team with INLINE Partner
```
{
     "teamId": "T0000204",
      "partner": {
           "name": "partner1"
```

For me that is fine but for another companion project they want the 'embedded' form: they insist that is 'standard'.

Team with EMBEDED Partner
```
{
     "teamId": "T0000204",
    "_embedded": {
        "partner": [
           "name": "partner1"
```

If I define an excerpt for the partner repository then it is embedded: but then I have lost flexibility - only that one projection in 'embedded'

Is there and way to define the Objects in a projection as 'embedded'?

There is a [custom starter](https://github.com/zalando-stups/booties/tree/master/data-jpa-eclipselink-spring-boot-starter) to use Spring Data JPA with Eclipselink that allows us to get rid off the additional configuration needed.

