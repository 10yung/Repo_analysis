Just tried to render my schema online at https://redocly.github.io/ and the error:

```
Something went wrong...
Incompatible types in allOf at "/properties/data/items"
Stack trace
Error: Incompatible types in allOf at "/properties/data/items"
    at e.mergeAllOf (https://redocly.github.io/redoc/redoc-demo.bundle.js:1:44002)
    at e.mergeAllOf (https://redocly.github.io/redoc/redoc-demo.bundle.js:1:44362)
    at e.mergeAllOf (https://redocly.github.io/redoc/redoc-demo.bundle.js:1:44205)
    at new e (https://redocly.github.io/redoc/redoc-demo.bundle.js:1:47230)
    at new e (https://redocly.github.io/redoc/redoc-demo.bundle.js:1:54751)
    at https://redocly.github.io/redoc/redoc-demo.bundle.js:1:56121
    at Array.map (<anonymous>)
    at new e (https://redocly.github.io/redoc/redoc-demo.bundle.js:1:56069)
    at new e (https://redocly.github.io/redoc/redoc-demo.bundle.js:1:57051)
    at https://redocly.github.io/redoc/redoc-demo.bundle.js:1:60079

ReDoc Version: 2.0.0-rc.21
Commit: 45c337b
```
Loads fine in Swagger editor.
Schema is here: http://www.projectcastle.io/demo.yaml

Happy to adjust my schema if that helps. What do I miss?
I have a response which either returns an array or null. I specify the return json schema with:

```
{
  "$schema": "http://json-schema.org/draft-07/schema#",
    "type": "array",
    "uniqueItems": true,
    "items": {
      ....
    }
  "nullable": true
}
```

But redoc does not render this like for other types e.g. integers.

I currently use the following workaround:

```
{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "oneOf": [
    {
      "type": "array",
      "uniqueItems": true,
      "items": {
        "$ref": "../shared/id.json#"
      }
    },
    {
      "type": "any"
      "nullable":true
    }
  ]
}
```
![grafik](https://user-images.githubusercontent.com/1852828/72088114-d9cc7980-3309-11ea-9724-99f01e7e5a08.png)

Hello there, wrestling following issue.

Imagine I want to reuse some schema, let's say ID – I have following in `./helpers/id.yaml`:

```yaml
properties:
  id:
    type: number
required:
  - id
```

And here is a simple OpenAPI, which should result in a simple structure of three nested objects, which all wants to reference the `id` helper.

```yaml
openapi: 3.0.0
info:
  title: False positive recursion
  version: '3.0'
paths:
  /documents:
    get:
      summary: Example
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: ./helpers/id.yaml
                  - properties:
                      second:
                        allOf:
                          - $ref: ./helpers/id.yaml
                          - properties:
                              third:
                                allOf:
                                  - $ref: ./helpers/id.yaml
                                  - properties:
                                      something:
                                        type: string
```

Whereas the first and second object are correctly rendered with required `id` attribute, the third object is flagged as recursive:

![image](https://user-images.githubusercontent.com/11633481/72085349-73455c80-3305-11ea-933d-ef74e0a66fef.png)


Any idea? Is it a bug or am I missing something?
I have defined the following schema in my components:
```
            "test1": {
                "type": "object",
                "properties": {
                    "useText":
                    {
                        "type": "boolean"
                    },
                    "useSymbol":
                    {
                        "type": "boolean"
                    },
                    "useDigit":
                    {
                        "type": "boolean"
                    }

                }
            },

            "test1CtrlText":{
                "oneOf": [
                    {
                        "title" : "NO TEXT",
                        "properties": {
                            "useText":
                            {
                                "enum": [false]
                            }
                        }
                    },
                    {
                        "title" : "TEXT",
                        "properties": {
                            "useText":
                            {
                                "enum": [true]
                            },
                            "textField":
                            {
                                "type": "string"
                            }
                        },
                        "required": ["textField"]
                    }
                ]
            },

            "test1CtrlSymbol":{
                "oneOf": [
                    {
                        "title" : "NO SYMBOL",
                        "properties": {
                            "useSymbol":
                            {
                                "enum": [false]
                            }
                        }
                    },
                    {
                        "title" : "SYMBOL",
                        "properties": {
                            "useSymbol":
                            {
                                "enum": [true]
                            },
                            "symbolField":
                            {
                                "type": "string"
                            }
                        },
                        "required": ["symbolField"]
                    }
                ]
            },

            "test1CtrlDigit":{
                "oneOf": [
                    {
                        "title" : "NO Digit",
                        "properties": {
                            "useDigit":
                            {
                                "enum": [false]
                            }
                        }
                    },
                    {
                        "title" : "SYMBOL",
                        "properties": {
                            "useDigit":
                            {
                                "enum": [true]
                            },
                            "digitField":
                            {
                                "type": "string"
                            }
                        },
                        "required": ["digitField"]
                    }
                ]
            },

            "test1All": {
                "allOf": [
                    {"$ref" : "#/components/schemas/test1"},
                    {"$ref" : "#/components/schemas/test1CtrlText"},
                    {"$ref" : "#/components/schemas/test1CtrlSymbol"},
                    {"$ref" : "#/components/schemas/test1CtrlDigit"}
                ]
            },
            "test1": {
                "type": "object",
                "properties": {
                    "useText":
                    {
                        "type": "boolean"
                    },
                    "useSymbol":
                    {
                        "type": "boolean"
                    },
                    "useDigit":
                    {
                        "type": "boolean"
                    }

                }
            },

            "test1CtrlText":{
                "oneOf": [
                    {
                        "title" : "NO TEXT",
                        "properties": {
                            "useText":
                            {
                                "enum": [false]
                            }
                        }
                    },
                    {
                        "title" : "TEXT",
                        "properties": {
                            "useText":
                            {
                                "enum": [true]
                            },
                            "textField":
                            {
                                "type": "string"
                            }
                        },
                        "required": ["textField"]
                    }
                ]
            },

            "test1CtrlSymbol":{
                "oneOf": [
                    {
                        "title" : "NO SYMBOL",
                        "properties": {
                            "useSymbol":
                            {
                                "enum": [false]
                            }
                        }
                    },
                    {
                        "title" : "SYMBOL",
                        "properties": {
                            "useSymbol":
                            {
                                "enum": [true]
                            },
                            "symbolField":
                            {
                                "type": "string"
                            }
                        },
                        "required": ["symbolField"]
                    }
                ]
            },

            "test1CtrlDigit":{
                "oneOf": [
                    {
                        "title" : "NO Digit",
                        "properties": {
                            "useDigit":
                            {
                                "enum": [false]
                            }
                        }
                    },
                    {
                        "title" : "SYMBOL",
                        "properties": {
                            "useDigit":
                            {
                                "enum": [true]
                            },
                            "digitField":
                            {
                                "type": "string"
                            }
                        },
                        "required": ["digitField"]
                    }
                ]
            },

            "test1All": {
                "allOf": [
                    {"$ref" : "#/components/schemas/test1"},
                    {"$ref" : "#/components/schemas/test1CtrlText"},
                    {"$ref" : "#/components/schemas/test1CtrlSymbol"},
                    {"$ref" : "#/components/schemas/test1CtrlDigit"}
                ]
            }
```
When I use now in my response body:

        "$ref": "#/components/schemas/test1All"

The whole thing is rendered wrong as you see in the image:

![image](https://user-images.githubusercontent.com/58665051/70912351-0c899780-2014-11ea-97f5-34106f0ea29b.png)

There should be three anyOf blocks, but only one is rendered.

When I replace the the 3 last references (test1CtrlText, test1CtrlSymbol, test1CtrlDigit) against the
code of their schemas:
```
 "allOf": [
    {"$ref" : "#/components/schemas/test1"},
    {
        "oneOf": [
            {
                "title" : "NO TEXT",
                "properties": {
                    "useText":
                    {
                        "enum": [false]
                    }
                }
            },
            {
                "title" : "TEXT",
                "properties": {
                    "useText":
                    {
                        "enum": [true]
                    },
                    "textField":
                    {
                        "type": "string"
                    }
                },
                "required": ["textField"]
            }
        ]
    },
    {...},
    {...}
 ]
```

I get the following rendering:

![image](https://user-images.githubusercontent.com/58665051/70912695-ca148a80-2014-11ea-9549-b03af44aa893.png)

Which works as it should, although the label were not rendered:

![image](https://user-images.githubusercontent.com/58665051/70912783-faf4bf80-2014-11ea-8323-d80e5ab9c2dc.png)







    
Hello,

I am using the following definition to define an array of objects in the request body:

`               "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                  "type" : "array",
                                  "minItems" : 1,
                                  "maxItems" : 10,
                                  "items" : {
                                         "$ref": "#/components/schemas/gpsProfileUpdate"
                                   }
                            }
                        }
                    }
                }
 `

The minItems and maxItems were not rendered in the generated documentation.

![image](https://user-images.githubusercontent.com/58665051/70393838-ef8b0e00-19ee-11ea-9263-94fd62166a42.png)

After spending some time figuring it out and finding [this issue](https://github.com/Redocly/redoc/issues/893), I was able to find how to watch files served by redoc via Docker. I'd like to save new developers time with this PR.
I've got a ReDoc instance running with scrollYOffset set to an header element. It seems that if the height of the header element is not a integer, but a floating point number the menu gets blurred a bit.

The problem occurs if you specify an element for the scrollYOffset which el.getBoundingClientRect().bottom returns a non-integer number for. It seems that in some places it works on integers and in some on floating point numbers and this leads to imprecision when calculation the scrolling position for the menu. Using Math.ceil or Math.round in normalizeScrollYOffset solved the problem for me. So I'd suggest only allowing integers as scrollYOffset and ensure in code that it is always an integer.

Hope this can be solved soon, thanks in advance!

Seems similar to #748
***This is a bug report***

# What happend

If  `<SchemaDefinition />` custom element points to remote reference, like below:


```yaml
  description: 
     Blah blah blah.

     Below is `Foo` definition.
     <SchemaDefinition schemaRef="./shared-components.yaml#/components/schemas/Foo"/>
```

it fails with a following error:

```
Something went wrong...
Invalid JSON pointer: ./shared-components.yaml#/components/schemas/Foo
```

on versions

* redoc@2.0.0-rc.18
* redoc@2.0.0-rc.15

# Background

I want to extract `components` into an external file, so it can be shared among several swagger files, like below:

* swagger-public.yaml 
* swagger-private.yaml
* shared-components.yaml 

Remote reference feature in standard Swagger/OpenAPI syntaxes, like below, works fine 😄 

```yaml 
  schema:
    $ref: "./shared-components.yaml#/components/schemas/Foo"
```

`<SchemaDefinition />` works fine if used with local reference... but fails with remote reference.
So I guess this is a bug (or a limitation) of `<SchemaDefinition />`

A motivation I use `<SchemaDefinition schemaRef="..."/>` in description is to embed a component definition into some description.
Because Redoc currently does not have schemas view unlike official Swagger viewer.
This valid schema:
```yaml
openapi: "3.0.2"
info:
  title: Recursive
  version: 0.0.1

paths:
  /somepath:
    get:
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Article'
                  - required: [ foo ]
components:
  schemas:
    Article:
      type: object
      properties:
        similar:
          allOf:
            - $ref: '#/components/schemas/Article'
            - required: [ bar ]
      anyOf:
        - required: [ foo ]
        - required: [ bar ]
```

causes stack overflow: 
```
(Warning) Not exited reference: #/components/schemas/Article 
    in Context.Consumer (created by Operation)
    in Operation (created by OperationItem)
    in OperationItem (created by ContentItem)
    in ContentItem (created by ContentItems)
    in ContentItems (created by Redoc)
    in Redoc

OpenAPIParser.ts:255 Uncaught RangeError: Maximum call stack size exceeded
    at Array.map (<anonymous>)
    at OpenAPIParser.mergeAllOf (OpenAPIParser.ts:255)
    at new SchemaModel (Schema.ts:41)
    at new FieldModel (Field.ts:59)
    at eval (Schema.ts:215)
    at Array.map (<anonymous>)
    at buildFields (Schema.ts:206)
    at SchemaModel.init (Schema.ts:108)
    at new SchemaModel (Schema.ts:42)
    at eval (Schema.ts:135)
```

tested on master @ dc5430e53def780a81612d269cc3aea3f8785eea
This fixes #1086 

When resulting schema contains `required` fields, that are not explicitly listed in schema - they must be covered by `additionalProperties` (because openapi does not support `patternProperties`) schema (if any) or are just `{}`.

The point is in listing these names, because validation will fail without them