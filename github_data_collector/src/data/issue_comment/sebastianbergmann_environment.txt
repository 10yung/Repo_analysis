- [ ] Use GitHub Actions instead of Travis CI
- [x] Have Composer in `tools/composer` and managed through `composer self-update` (see `update-tools` target in [build.xml](https://github.com/sebastianbergmann/phpunit/blob/655558a622e9cfa67f376b2fd640635a72eac6e3/build.xml#L408)
- [x] Install Psalm using [Phive](https://phar.io/) as `tools/psalm` (`phive install --copy psalm`)
- [x] Install PHP-CS-Fixer using [Phive](https://phar.io/) as `tools/php-cs-fixer` (`phive install --copy php-cs-fixer`)
- [x] Create Psalm configuration
- [ ] Add Psalm build step to GitHub Actions-based CI workflow
- [ ] Add PHP-CS-Fixer build step to GitHub Actions-based CI workflow

Hello.

I want to submit a PR, but am not certain how to structure the tests as they with 99% certainty require some level of mocking (php.ini reading) I think.

Are you OK with a more elaborate test setup to allow mocking things or are you comfortable with allowing soft failures in case some INI settings are not adjustable for some test cases? I know this is a relatively small library and adding boilerplate for mocking might seem overkill.

The thing I would like to tackle with my PR is the possibility to have Xdebug enabled, but code coverage disabled, leading to runtime errors when one could instead try PCOV for coverage in that case.