Hello,

Just started a new app with Rails `6.0.0.rc1` (and Merit) and got a deprecation notice when running tests via `rspec`:

```
DEPRECATION WARNING: Initialization autoloaded the constant Merit::Badge.

Being able to do this is deprecated. Autoloading during initialization is going
to be an error condition in future versions of Rails.

Reloading does not reboot the application, and therefore code executed during
initialization does not run again. So, if you reload Merit::Badge, for example,
the expected changes won't be reflected in that stale Class object.

This autoloaded constant has been unloaded.

Please, check the "Autoloading and Reloading Constants" guide for solutions.
```

There is some discussion about a similar notice [here](https://github.com/rails/rails/issues/36363).
Hi,

Bullet gem throwing errors on rspec test, it's saying  'remove `includes: [:sash]`'. When I delete `merit` from my model, tests are passed. Is there a solution for that?

Here is what bullet gem says:

```
AVOID eager loading detected
          User => [:sash]
          Remove from your finder: :includes => [:sash]
```

Thank you.
I use 2.4.0 in my app because the rails version is 3.2.9.

when user.add_point is executed, but there was no activity_log created, I thought the activity_log could be created automatically




I have the following

```ruby
config.add_observer 'Merit::ReputationChangeObserver'
```

`app\models\merit\reputation_change_observer.rb`:

```ruby
module Merit
  class ReputationChangeObserver
    @queue = :badge_queue

    def update(changed_data)
      description = changed_data[:description]

      # If user is your meritable model, you can query for it doing:
      user = User.where(sash_id: changed_data[:sash_id]).first

      # When did it happened:
      datetime = changed_data[:granted_at]

      user.badge_notify_at = datetime unless user.badge_notify_at
      user.save!
      logger.info "description: #{description}, user: #{user.id}, datetime: #{datetime}"
    end


    def self.perform
      Merit::Action.check_unprocessed
    end
  end
end
```


```ruby
def extend_subscription
  @ticket = QuestionTicket.find params[:question_ticket_id]
  if @ticket&.user&.subscription&.extend_subscription
    notice = "Subscription extended"
    badge = Merit::Badge.find{|b| b.name == 'subscription_extended'}.first
    @ticket.user.add_badge(badge.id)
```

It grants the badge, but it's not calling the observer, updating the user, nor logging any observer messages.

```
Started POST "/question_tickets/2/extend_subscription" for ::1 at 2018-08-08 23:58:04 -0400
Processing by QuestionTicketsController#extend_subscription as HTML
  Parameters: {"authenticity_token"=>"8ASvhpy+uCQMufRNQOS68AALg9hC3lXyxbvPC+Fcvp1emCsOhFNu3wlDy2xdZDY+Mb7EvuXeNdE7RNrl7zLI0A==", "question_ticket_id"=>"2"}
  User Load (1.0ms)  SELECT  "users".* FROM "users" WHERE "users"."id" = $1  ORDER BY "users"."id" ASC LIMIT 1  [["id", 6]]
  QuestionTicket Load (3.0ms)  SELECT  "tickets".* FROM "tickets" WHERE "tickets"."type" IN ('QuestionTicket') AND "tickets"."id" = $1 LIMIT 1  [["id", 2]]
  User Load (2.0ms)  SELECT  "users".* FROM "users" WHERE "users"."id" = $1 LIMIT 1  [["id", 6]]
  Subscription Load (5.0ms)  SELECT  "subscriptions".* FROM "subscriptions" WHERE "subscriptions"."user_id" = $1 LIMIT 1  [["user_id", 6]]
  Merit::Sash Load (1.0ms)  SELECT  "sashes".* FROM "sashes" WHERE "sashes"."id" = $1 LIMIT 1  [["id", 1]]
   (1.0ms)  BEGIN
  SQL (5.0ms)  INSERT INTO "badges_sashes" ("badge_id", "sash_id", "created_at") VALUES ($1, $2, $3) RETURNING "id"  [["badge_id", 2], ["sash_id", 1], ["created_at", "2018-08-09 03:58:08.497655"]]
   (23.0ms)  COMMIT
Redirected to http://localhost:3000/question_tickets/2
Completed 302 Found in 2034ms (ActiveRecord: 117.1ms)
```

You can see that it does `INSERT INTO "badges_sashes" `, but it's not displaying the log message or updating the user model.

Merit 2.4
I already have a `user.level` field. It should not modify the model or touch model fields except to add the `belongs_to` / `has_one` relation. All additional fields should go in the merit relation model.

```
== 20180805005720 AddMeritFieldsToUsers: migrating ============================
-- add_column(:users, :sash_id, :integer)
   -> 0.0011s
-- add_column(:users, :level, :integer, {:default=>0})
rake aborted!
StandardError: An error has occurred, this and all later migrations canceled:

PG::DuplicateColumn: ERROR:  column "level" of relation "users" already exists
: ALTER TABLE "users" ADD "level" integer DEFAULT 0
C:/Users/Chloe/workspace/medictests/db/migrate/20180805005720_add_merit_fields_to_users.rb:4:in `change'
C:in `migrate'

Caused by:
ActiveRecord::StatementInvalid: PG::DuplicateColumn: ERROR:  column "level" of relation "users" already exists
: ALTER TABLE "users" ADD "level" integer DEFAULT 0
C:/Users/Chloe/workspace/medictests/db/migrate/20180805005720_add_merit_fields_to_users.rb:4:in `change'
C:in `migrate'

Caused by:
PG::DuplicateColumn: ERROR:  column "level" of relation "users" already exists
C:/Users/Chloe/workspace/medictests/db/migrate/20180805005720_add_merit_fields_to_users.rb:4:in `change'
C:in `migrate'
Tasks: TOP => db:migrate
(See full trace by running task with --trace)
```

Using Merit version 2.4.0.

Observer sends notifications 'Removed badge_name badge' even if the user doesn't have the badge yet (on temporary rules