Bumps [handlebars](https://github.com/wycats/handlebars.js) from 4.1.2 to 4.5.3.
<details>
<summary>Changelog</summary>

*Sourced from [handlebars's changelog](https://github.com/wycats/handlebars.js/blob/master/release-notes.md).*

> ## v4.5.3 - November 18th, 2019
> Bugfixes:
> 
> - fix: add "no-prototype-builtins" eslint-rule and fix all occurences - f7f05d7
> - fix: add more properties required to be enumerable - 1988878
> 
> Chores / Build:
> - fix: use !== 0 instead of != 0 - c02b05f
> - add chai and dirty-chai and sinon, for cleaner test-assertions and spies, 
>   deprecate old assertion-methods  - 93e284e, 886ba86, 0817dad, 93516a0
> 
> Security:
> 
> - The properties `__proto__`, `__defineGetter__`, `__defineSetter__` and `__lookupGetter__` 
>   have been added to the list of "properties that must be enumerable".
>   If a property by that name is found and not enumerable on its parent, 
>   it will silently evaluate to `undefined`. This is done in both the compiled template and the "lookup"-helper. 
>   This will prevent new Remote-Code-Execution exploits that have been
>   published recently.
> 
> Compatibility notes: 
> 
> - Due to the security-fixes. The semantics of the templates using
>   `__proto__`, `__defineGetter__`, `__defineSetter__` and `__lookupGetter__` in the respect that those expression now return 
>   `undefined` rather than their actual value from the proto.
> - The semantics have not changed in cases where the properties are  enumerable, as in:
> 
> ```js
> {
>   __proto__: 'some string'
> }
> ```
> 
> - The change may be breaking in that respect, but we still only 
>   increase the patch-version, because the incompatible use-cases
>   are not intended, undocumented and far less important than fixing
>   Remote-Code-Execution exploits on existing systems.
> 
> 
> 
> [Commits](https://github.com/wycats/handlebars.js/compare/v4.5.2...v4.5.3)
> 
> ## v4.5.2 - November 13th, 2019
> # Bugfixes
> 
> - fix: use String(field) in lookup when checking for "constructor" - d541378
> - test: add fluent API for testing Handlebars - c2ac79c
> 
> Compatibility notes:
> - no incompatibility are to be expected
></tr></table> ... (truncated)
</details>
<details>
<summary>Commits</summary>

- [`c819c8b`](https://github.com/wycats/handlebars.js/commit/c819c8b533934d2ac18001d7eb27a3205b00c2f3) v4.5.3
- [`827c9d0`](https://github.com/wycats/handlebars.js/commit/827c9d0747bef7d7f89829779523b6b2dcf3051d) Update release notes
- [`f7f05d7`](https://github.com/wycats/handlebars.js/commit/f7f05d7558e674856686b62a00cde5758f3b7a08) fix: add "no-prototype-builtins" eslint-rule and fix all occurences
- [`1988878`](https://github.com/wycats/handlebars.js/commit/198887808780bbef9dba67a8af68ece091d5baa7) fix: add more properties required to be enumerable
- [`886ba86`](https://github.com/wycats/handlebars.js/commit/886ba86c2f9cc71b7d99b9018fbe2d72a57085cc) test/chore: add chai/expect and sinon to "runtime"-environment
- [`0817dad`](https://github.com/wycats/handlebars.js/commit/0817dad7e72c51d07f7700547d0c69aa79a4976b) test: add sinon as global variable to eslint in the specs
- [`93516a0`](https://github.com/wycats/handlebars.js/commit/93516a0b07026ebd23c84fddf270a0c8b570bc59) test: add sinon.js for spies, deprecate current assertions
- [`93e284e`](https://github.com/wycats/handlebars.js/commit/93e284ed9be1e38c5e6945f15af1ccd689f2ada6) chore: add chai and dirty-chai for better test assertions
- [`c02b05f`](https://github.com/wycats/handlebars.js/commit/c02b05fa819f46bb66c878bebc6e8006408ebd5c) fix: use !== 0 instead of != 0
- [`8de121d`](https://github.com/wycats/handlebars.js/commit/8de121d21c88a6ab877e3a0eec9daaac483f3bf0) v4.5.2
- Additional commits viewable in [compare view](https://github.com/wycats/handlebars.js/compare/v4.1.2...v4.5.3)
</details>
<br />

[![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=handlebars&package-manager=npm_and_yarn&previous-version=4.1.2&new-version=4.5.3)](https://help.github.com/articles/configuring-automated-security-fixes)

Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.

[//]: # (dependabot-automerge-start)
[//]: # (dependabot-automerge-end)

---

<details>
<summary>Dependabot commands and options</summary>
<br />

You can trigger Dependabot actions by commenting on this PR:
- `@dependabot rebase` will rebase this PR
- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it
- `@dependabot merge` will merge this PR after your CI passes on it
- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it
- `@dependabot cancel merge` will cancel a previously requested merge and block automerging
- `@dependabot reopen` will reopen this PR if it is closed
- `@dependabot ignore this [patch|minor|major] version` will close this PR and stop Dependabot creating any more for this minor/major version (unless you reopen the PR or upgrade to it yourself)
- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)
- `@dependabot use these labels` will set the current labels as the default for future PRs for this repo and language
- `@dependabot use these reviewers` will set the current reviewers as the default for future PRs for this repo and language
- `@dependabot use these assignees` will set the current assignees as the default for future PRs for this repo and language
- `@dependabot use this milestone` will set the current milestone as the default for future PRs for this repo and language

You can disable automated security fix PRs for this repo from the [Security Alerts page](https://github.com/tessera-metrics/tessera/network/alerts).

</details>
Bumps [flask](https://github.com/pallets/flask) from 0.12.4 to 1.0.
<details>
<summary>Release notes</summary>

*Sourced from [flask's releases](https://github.com/pallets/flask/releases).*

> ## 1.0
> The Pallets team is pleased to release Flask 1.0. [Read the announcement on our blog.](https://www.palletsprojects.com/blog/flask-1-0-released/
> 
> There are over a year's worth of changes in this release. Many features have been improved or changed. [Read the changelog](http://flask.pocoo.org/docs/1.0/changelog/) to understand how your project's code will be affected.
> 
> 
> JSON Security Fix
> ------------------
> 
> Flask previously decoded incoming JSON bytes using the content type of the request. Although JSON should only be encoded as UTF-8, Flask was more lenient. However, Python includes non-text related encodings that could result in unexpected memory use by a request.
> 
> Flask will now detect the encoding of incoming JSON data as one of the supported UTF encodings, and will not allow arbitrary encodings from the request.
> 
> 
> Install or Upgrade
> -------------------
> 
> Install from [PyPI](https://pypi.org/project/Flask/) with pip:
> 
>     pip install -U Flask
</details>
<details>
<summary>Changelog</summary>

*Sourced from [flask's changelog](https://github.com/pallets/flask/blob/master/CHANGES.rst).*

> Version 1.0
> -----------
> 
> Released 2018-04-26
> 
> -   Python 2.6 and 3.3 are no longer supported.
> -   Bump minimum dependency versions to the latest stable versions:
>     Werkzeug >= 0.14, Jinja >= 2.10, itsdangerous >= 0.24, Click >= 5.1.
>     :issue:`2586`
> -   Skip :meth:`app.run <Flask.run>` when a Flask application is run
>     from the command line. This avoids some behavior that was confusing
>     to debug.
> -   Change the default for :data:`JSONIFY_PRETTYPRINT_REGULAR` to
>     ``False``. :func:`~json.jsonify` returns a compact format by
>     default, and an indented format in debug mode. :pr:`2193`
> -   :meth:`Flask.__init__ <Flask>` accepts the ``host_matching``
>     argument and sets it on :attr:`~Flask.url_map`. :issue:`1559`
> -   :meth:`Flask.__init__ <Flask>` accepts the ``static_host`` argument
>     and passes it as the ``host`` argument when defining the static
>     route. :issue:`1559`
> -   :func:`send_file` supports Unicode in ``attachment_filename``.
>     :pr:`2223`
> -   Pass ``_scheme`` argument from :func:`url_for` to
>     :meth:`~Flask.handle_url_build_error`. :pr:`2017`
> -   :meth:`~Flask.add_url_rule` accepts the
>     ``provide_automatic_options`` argument to disable adding the
>     ``OPTIONS`` method. :pr:`1489`
> -   :class:`~views.MethodView` subclasses inherit method handlers from
>     base classes. :pr:`1936`
> -   Errors caused while opening the session at the beginning of the
>     request are handled by the app's error handlers. :pr:`2254`
> -   Blueprints gained :attr:`~Blueprint.json_encoder` and
>     :attr:`~Blueprint.json_decoder` attributes to override the app's
>     encoder and decoder. :pr:`1898`
> -   :meth:`Flask.make_response` raises ``TypeError`` instead of
>     ``ValueError`` for bad response types. The error messages have been
>     improved to describe why the type is invalid. :pr:`2256`
> -   Add ``routes`` CLI command to output routes registered on the
>     application. :pr:`2259`
> -   Show warning when session cookie domain is a bare hostname or an IP
>     address, as these may not behave properly in some browsers, such as
>     Chrome. :pr:`2282`
> -   Allow IP address as exact session cookie domain. :pr:`2282`
> -   ``SESSION_COOKIE_DOMAIN`` is set if it is detected through
>     ``SERVER_NAME``. :pr:`2282`
> -   Auto-detect zero-argument app factory called ``create_app`` or
>     ``make_app`` from ``FLASK_APP``. :pr:`2297`
> -   Factory functions are not required to take a ``script_info``
>     parameter to work with the ``flask`` command. If they take a single
>     parameter or a parameter named ``script_info``, the
></tr></table> ... (truncated)
</details>
<details>
<summary>Commits</summary>

- [`291f3c3`](https://github.com/pallets/flask/commit/291f3c338c4d302dbde01ab9153a7817e5a780f5) Bump version number to 1.0
- [`36e68a4`](https://github.com/pallets/flask/commit/36e68a439a073e927b1801704fc7921be58262e1) release 1.0
- [`216151c`](https://github.com/pallets/flask/commit/216151c8a3c02e805fe5d1824708253f7e01e77f) Merge branch '0.12-maintenance'
- [`062745b`](https://github.com/pallets/flask/commit/062745b23f7abaafb144e3d94b6fbdf8ccc456b9) Merge pull request [#2720](https://github-redirect.dependabot.com/pallets/flask/issues/2720) from pallets/setup-link
- [`5c8110d`](https://github.com/pallets/flask/commit/5c8110de25f08bf20e9fda6611403dc5c59ec849) ensure order of project urls
- [`10a77a5`](https://github.com/pallets/flask/commit/10a77a54309876a6aba2e3303d291498c0a9318c) Add project_urls so that PyPI will show GitHub stats.
- [`2ede0b8`](https://github.com/pallets/flask/commit/2ede0b8ba944fbd8b7c2478f100dd117c85975a0) add donate link
- [`4137aec`](https://github.com/pallets/flask/commit/4137aecca9c4add694146502cd3e6e5fc945f6dd) add donate link
- [`4df5f82`](https://github.com/pallets/flask/commit/4df5f829142bb7a4c7a1e4115df35ecd44c54ad2) Merge pull request [#2719](https://github-redirect.dependabot.com/pallets/flask/issues/2719) from greyli/patch-9
- [`7df3524`](https://github.com/pallets/flask/commit/7df3524bb9f2683555186d0890c24576c1505766) Fix typo in docs
- Additional commits viewable in [compare view](https://github.com/pallets/flask/compare/0.12.4...1.0)
</details>
<br />

[![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=flask&package-manager=pip&previous-version=0.12.4&new-version=1.0)](https://help.github.com/articles/configuring-automated-security-fixes)

Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.

[//]: # (dependabot-automerge-start)
[//]: # (dependabot-automerge-end)

---

<details>
<summary>Dependabot commands and options</summary>
<br />

You can trigger Dependabot actions by commenting on this PR:
- `@dependabot rebase` will rebase this PR
- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it
- `@dependabot merge` will merge this PR after your CI passes on it
- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it
- `@dependabot cancel merge` will cancel a previously requested merge and block automerging
- `@dependabot reopen` will reopen this PR if it is closed
- `@dependabot ignore this [patch|minor|major] version` will close this PR and stop Dependabot creating any more for this minor/major version (unless you reopen the PR or upgrade to it yourself)
- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)
- `@dependabot use these labels` will set the current labels as the default for future PRs for this repo and language
- `@dependabot use these reviewers` will set the current reviewers as the default for future PRs for this repo and language
- `@dependabot use these assignees` will set the current assignees as the default for future PRs for this repo and language
- `@dependabot use this milestone` will set the current milestone as the default for future PRs for this repo and language

You can disable automated security fix PRs for this repo from the [Security Alerts page](https://github.com/tessera-metrics/tessera/network/alerts).

</details>
See related: https://github.com/tessera-metrics/tessera/issues/419

The long term plan for Tessera is to re-write the backend in Go and add support for multiple time series DBs along the way, via a proxy layer that translates results to a single datapoint series format for the Tessera UI to use. 

In the meantime, however, adding a few additional routes in the Flask code of the existing backend to proxy Graphite traffic can be done easily and will greatly simplify deployment and configuration, as the browser would no longer need to talk directly to Graphite, eliminating CORS configuration, having multiple ports and addresses accessible to the browser, etc....

OR

Get a better easy to use Docker image running nginx in front of tessera and graphite to accomplish the same thing with better performance. 
Some dashboard items inherit properties from their parent types, but don't make use of them due to specialized rendering. Those items should remove the unused properties from their property lists, to clean up the editing UI and avoid confusion.
jQuery should be updated to 3.x for security (and avoiding bitrot), but doing so breaks the datetime picker, which doesn't seem to be maintained anymore. Consider switch to https://flatpickr.js.org, which is recent and also fits Tessera's aesthetics very well.
Copying issues from https://github.com/aalpern/tessera => https://github.com/aalpern/tessera/issues/12

https://github.com/kittens/lerna

This looks like just the thing I've been looking for/considering writing for managing multiple npm packages from the frontend codebase. 

Tessera currently uses handlebars for expanding templates in items such as the `markdown` item, and most importantly in queries. Internal to UA (to be released eventually) we integrate that with handlebars helper functions that call [clusto](https://github.com/clusto/clusto-apiserver/) to build graphite queries from role-based queries to clusto (to retrieve hostnames). 

Because handlebars is synchronous, that means making synchronous HTTP calls, which is no fun (mitigated by in-browser caching, but still...). 

Possible approaches to mitigate this:
- Replace the template engine with one that supports both async rendering and async extensions. This also means re-writing portions of dashboard rendering using Promises (also not a bad thing). It also likely means some incompatibilities in the templates (see below), which is not ideal but probably acceptable. 
- Keep handlebars, but add an async data gathering phase, so we don't need to make async calls within template helpers. This is attractive from an MVC standpoint, but would really need a much more sophisticated editor (which is probably much more expensive to write, in terms of effort). 
### Async Template Engines
- [nunjucks](http://mozilla.github.io/nunjucks/) - [A Deep Dive into Asynchronous Templating](http://jlongster.com/A-Deep-Dive-into-Asynchronous-Templating) is a great writeup. 
- [dustjs](http://akdubya.github.io/dustjs/)
- [marko](http://markojs.com)

The export command+import screen is great for copying dashboards from one instance to another; I use it all the time to copy dashboards out of production into a local instance to experiment on them. But there's no way to update an existing dashboard from a complete definition - you can only import it, which creates a new board with a new URL. Being able to update a complete dashboard definition _in place_ from JSON would be fantastic for that workflow. 


One of the things we'd like to do is script the creation and maintenance of dashboards from other automated internal tooling. To do that, we need to extract a clean API client library, so the front-end code needs to be split into modules. 

Likely modules:
- `tessera-core` - stuff from `src/ts/core`: registry, log, event-source. NOT properties or actions, as those are UI-specific. 
- `tessera-model` - core model classes, stripped of their rendering code
- `tessera-client` - HTTP API client for interacting with the server

This will end up complicating the process of adding new dashboard items a bit, as we'll need to separate the model object from the rendering code, but (a) that's a good separation to have, and (b) adding new dashboard items isn't that frequent a task; we've got quite an extensive roster of them already. 
