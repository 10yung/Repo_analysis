

<img width="853" alt="WeChat4030f8cf87614b725e67ff6c44a95854" src="https://user-images.githubusercontent.com/25026842/69722260-a8c92880-1151-11ea-9f21-6aa486dbc7b7.png">


Hello there monitoring index of caton?Also please teach, thank you
Hello!
Hockey App is depreciated and the service will make a transition into App Center. Will you plan a App Center integration ?
Since version `3.3.0` found in `KSCrashReportVersion.h` a different method for converting the report timestamp into a date string is used. 

Instead of `ksdate_utcStringFromTimestamp` now `ksdate_utcStringFromMicroseconds` is invoked. What is the use case for this, since `NSDateFormatter` does not support microseconds? 

**Fix suggesstion (if `ksdate_utcStringFromMicroseconds` is needed):** extend the report fields to`timestamp` and `timestampPrecise`. 

I would be happy to create this pull request.
1. Xcode 9.3 adds a new IDEWorkspaceChecks.plist file to a workspace's shared data, to store the state of necessary workspace checks. Committing this file to source control will prevent unnecessary rerunning of those checks for each user opening the workspace. (ref: [Xcode Release Notes](https://developer.apple.com/library/archive/releasenotes/DeveloperTools/RN-Xcode/Chapters/Introduction.html));
2. Remove secondary thread in mach exception monitor. I will explain why I do this blow.

Let's focus on KSCrashMonitor_MachException.c. 

First, line 321 we call `restoreExceptionPorts()` in which we set exception port to `g_previousExceptionPorts`. From now all exception message will be sent to `g_previousExceptionPorts `.

Then, we resume `g_secondaryMachThread` on line 322 in case of the crash handling code itself crashes. However, `g_secondaryMachThread` listens on `g_exceptionPort` which no longer receive any exception message.
Hello,

We have found that when the KSCrash pod is included with the gRPC-Core pod, it leads to C++ 'undefined template' errors to do with the Optional type.

The minimal reproduction case is to:

- Create an empty iOS application using Swift in Xcode
- Run `pod init`
- Add `pod 'KSCrash'` and `pod 'gRPC-Core'` to the dependencies
- Run `pod install`
- Open the workspace file
- Try to build the project

Compilation is halted early due to many errors such as:

> Implicit instantiation of undefined template 'llvm::Optional<char>' Demangle.cpp

As I understand it, both dependencies declare an Optional template, but in different namespaces. Independently these dependencies compile fine, but together you can observe the errors above.

Can anyone possibly explain the issue and point us in the right direction for a solution to enable use of both libraries?

Thanks in advance,
  Chris

P.S. this is the tooling I'm using:

- Xcode 10.2.1
- Swift 5
- CocoaPods 1.7.1
![null_crash](https://user-images.githubusercontent.com/32923446/63209015-29699900-c10e-11e9-8ae5-7abd1a5f89a7.png)

In `KSCrashReportSinkQuincyHockey.m` file, line237.
Did you mean `CPU_SUBTYPE_ARM64_V8`? 
Does the subType `CPU_SUBTYPE_ARM_V8` exist in the CPU architecture of arm64?
Looking forward to your reply~
Best wishes~
I would like to obtain the crash report in a string format and put the crash report's contents into my own log file. I dont want to upload the crash report to any server and do not want to send it via email either. Out of all the KSCrash installation types available, KSCrashInstallationConsole seems like the one to use for my scenario. But the console installation has comments that it's used for testing purpose only. So I would like to know what is the right way to retrieve crash report in string format using KSCrash? I am new to obtaining stack trace from iOS apps so any help is appreciated. 