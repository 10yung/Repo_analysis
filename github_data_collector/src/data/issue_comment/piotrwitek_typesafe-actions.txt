I used typescript typesafe-actions v4

and I created Saga common function

like this
```ts
export default function createAsyncSaga<T1, P1, T2, P2, T3, P3>(
  asyncActionCreator: AsyncActionCreator<[T1, P1], [T2, P2], [T3, P3]>,
  promiseCreator: PromiseCreatorFunction<P1, P2>,
) {
  return function* saga(action: ReturnType<typeof asyncActionCreator.request>) {
    try {
      const result = isPayloadAction<P1>(action)
        ? yield call(promiseCreator, action.payload)
        : yield call(promiseCreator);
      yield put(asyncActionCreator.success(result));
    } catch (e) {
      yield put(asyncActionCreator.failure(e));
    }
  };
}
```

With this common function, I was able to create a single line of sagas.

like this

```
const getUserProfileSaga = createAsyncSaga(getUserProfileAsync, getUserProfile);
```
but in v5 i can't use this source code.

becuase of **AsyncActionCreatorBuilder**
(error message is Type '[T1, P1]' does not satisfy the constraint '[T1, [T1, P1] ....ommited..)

How do I change my source code??

## Description
When i use object map style to create reducer i find ts can not get the type of action and state.
<!-- A clear description of what the bug is -->

## Mandatory info
<img src="https://raw.githubusercontent.com/cloudshadow/jquery-cloudshadow-plugin/master/typesafe-any.jpg"/>
<img src="https://raw.githubusercontent.com/cloudshadow/jquery-cloudshadow-plugin/master/typesafe-type.jpg"/>

## How to Reproduce

<!-- You have two options, fill in a codesandbox template or provide full working code example. -->

### CodeSandbox Link
<!--
Codesandbox will speed response time and your issue will be prioritized because it's easier to analyze:
https://codesandbox.io/s/github/piotrwitek/typesafe-actions/tree/master/codesandbox
-->
*(PASTE HERE your codesandbox link)*

### No CodeSandbox Link
If no codesandbox, then please provide a full working code example below including actions, reducers and your custom types used in the example.
<!-- Code snippets are not enough because they are out of context, to analyze your case we need a full working example. -->
```ts
// this code is not work
export const reducer = createReducer<ITypeState, ITypeActions>(defaultTypeState, {
  [getType(rootAction.someActions.success)]: (state, action) =>
    produce(state, draft => {
      // todo
    })
});

// this code is work
export const reducer = createReducer<ITypeState, ITypeActions>(defaultTypeState, {
  ['Success']: (state, action) =>
    produce(state, draft => {
      // todo
    })
});
```

## Expected behavior
when use getType function in object map style ts can get the correct type for action and state
<!-- A clear description of what you expected to happen -->

## Suggested solution(s)

<!-- How could we solve this bug. What changes would need to be made -->

## Project Dependencies

- Typesafe-Actions Version: 5.2.0
- TypeScript Version: 3.6.3
- tsconfig.json:
```ts
{
  "compilerOptions": {
    "baseUrl": "./",
    "outDir": "./dist",
    "paths": {
      "@/*": ["src/*"]
    },
    "module": "es2015",
    "target": "es2015",
    "lib": ["es6", "dom"],
    "sourceMap": true,
    "allowJs": true,
    "jsx": "react",
    "moduleResolution": "node",
    "forceConsistentCasingInFileNames": true,
    "noImplicitReturns": true,
    "noImplicitThis": true,
    "noImplicitAny": true,
    "importHelpers": true,
    "strictNullChecks": true,
    "suppressImplicitAnyIndexErrors": true,
    "noUnusedLocals": true
  },
  "exclude": [
    "node_modules",
    "build",
    "scripts",
    "acceptance-tests",
    "webpack",
    "jest",
    "src/setupTests.ts"
  ]
}
```
## Is your feature request related to a real problem or use-case?
<!-- A clear description of your problem or use-case-->
I have written a generic epic that accepts an async action as a parameter:

``` typescript
export const genericHandler = <
  TRequestType extends string,
  TSuccessType extends string,
  TFailType extends string,
  TModel,
>(
  asyncAction: AsyncActionCreatorBuilder<
    [TRequestType, RequestPayload<TModel>],
    [TSuccessType, SuccessPayload<TModel>],
    [TFailType, FailurePayload<TModel>]
  >,
) => {
  const epic: Epic<
    // epic input action types union - manually specifying.....
    | PayloadAction<
        TRequestType,
        RequestPayload<TModel>,
      >
    | PayloadAction<TSuccessType, SuccessPayload<TModel>>
    | PayloadAction<TFailType, FailurePayload<TModel>>,
    // output action types union - manually specifying
    | PayloadAction<
        TRequestType,
        RequestPayload<TModel>
      >
    | PayloadAction<TSuccessType, SuccessPayload<TModel>>
    | PayloadAction<TFailType, FailurePayload<TModel>>,
    RootState,
    Services
  > = (action$, state$, { apiService }) => {
      // some source code ....
  }
```
The type of the ```aysncAction``` parameter is ```AsyncActionCreatorBuilder```.
In the redux-observable Epic<...> generic I manually specify the ```PayloadAction``` types for Input and Output actions in the stream. 

## Describe a solution including usage in code example
<!-- A clear description of the solution including usage with complete code examples, nicely formatted with "```ts" tags (especially if that's a new api proposal) -->

Is there any way to automatically generate the ```PayloadAction``` types to reduce complexity?
Is it possible to derive the PayloadAction union types from AsyncActionCreatorBuilder to reduce complexity....
``` typescript
// imports for RequestPayload, SuccessPayload, FailurePayload etc.
export const customEpicCreator_A = <
  TRequestType extends string,
  TSuccessType extends string,
  TFailType extends string,
  TModel,
>(
  asyncAction: AsyncActionCreatorBuilder<
    [TRequestType, RequestPayload<TModel>],
    [TSuccessType, SuccessPayload<TModel>],
    [TFailType, FailurePayload<TModel>]
  >,
) => {
  const epic: Epic<
    // Payload type union automatically generated for input and output types from AsyncActionCreatorBuilder object
    GeneratePayloadActionTypes<asyncAction>,
    GeneratePayloadActionType<asyncAction>,
    RootState,
    Services
  > = (action$, state$, { apiService }) => {
      // some source code ....
  }

export const customEpicCreator_B = <
  TRequestType extends string,
  TSuccessType extends string,
  TFailType extends string,
  DifferentRequestObject,
  DifferentSuccessObject,
  DifferentFailObject,
>(
  asyncAction: AsyncActionCreatorBuilder<
    [TRequestType, DifferentRequestObject],
    [TSuccessType, DifferentSuccessObject],
    [TFailType, DifferentFailObject]
  >,
) => {
  const epic: Epic<
    // Payload type union automatically generated for input and output types from AsyncActionCreatorBuilder object
    GeneratePayloadActionTypes<asyncAction>,
    GeneratePayloadActionType<asyncAction>,
    RootState,
    Services
  > = (action$, state$, { apiService }) => {
      // some source code ....
  }
```

## Who does this impact? Who is this for?
<!-- Who is this for? All users? TypeScript users? Yourself? People using X, Y, Z, etc.? -->
Typescript users

## Describe alternatives you've considered (optional)
<!-- A clear and concise description of any alternative solutions or workaround you've considered  -->
I tried using ```ActionType<typeof asyncAction>``` but this generates type 
```
asyncAction: {
    request: PayloadActionCreator<TRequestType, RequestPayload<TModel>>;
    success: PayloadActionCreator<TSuccessType, SuccessPayload<TModel>>;
    failure: PayloadActionCreator<TFailType, FailPayload<TModel>>;
} 
```
I think this is because I am passing in the parameter type as an ```AsyncActionCreatorBuilder```.

## Additional context (optional)
<!-- Add any other stuff you need, like links or related issues -->

I just upgraded from 4.4.2 to 5.1.0, following the migration guide. I replaced the methods with their deprecated counterparts, and I was only using createStandardAction everywhere so it was simple. However the types were still broken after that. There were `type is 'unknown'` errors everywhere in the redux code, which I think stemmed back to the createReducer or the combineReducers not emitting the right type. RootState was suddenly full of `unknown`s as well.  I don't have a reproduction for this, but I think more must be breaking than just the action creator functions.
## Is your feature request related to a real problem or use-case?
Add support for an `error` field to `createAction` so it is compliant with [Flux standard action](https://github.com/redux-utilities/flux-standard-action#actions) specification.

This will open the possibility to use `typesafe-actions` with other solutions or applications that are relying on that pattern.

## Describe a solution including usage in code example
1) How it would work type-wise?
Most probably an optional error field added to the base Action type:
```ts
type Action = {
  type: string;
  error?: boolean;
}
```

2) How it would work at runtime?
I would go with a forced convention by having a payload to be an instance of Error (easy to implement, backward compatible does not change API and I think that's the most popular option) 

This would automatically set the `error` property to true, but also it could allow leveraging conditional types to refine Action type even further to show or hide error property from the action type. That would be the most optimal solution.

## Who does this impact? Who is this for?
All users

## Describe alternatives you've considered (optional)
<!-- A clear and concise description of any alternative solutions or workaround you've considered  -->

## Additional context (optional)
Related #108 
Actions:
- TypeConstant
- Action
- EmptyAction,
- PayloadAction,
- PayloadMetaAction,

Creators:
- ActionCreator
- EmptyActionCreator,
- PayloadActionCreator,
- PayloadMetaActionCreator,
- ActionCreatorTypeMetadata,

Builders:
- ActionBuilder
- ActionCreatorBuilder
- AsyncActionCreatorBuilder
API Docs need to be updated to v5.0.0.


Tutorial need to be updated to v5.0.0.
## Is your feature request related to a real problem or use-case?
There are a few type helpers to create action types compatible with typesafe actions, most important ones are `ActionBuilder` and `ActionCreatorBuilder` which other more advanced types are leaning on (especially new `AsyncActionCreator` helper type with tuple `[Payload, Meta]` type)

It would be good to extend them with some particular edge case which might be useful in some cases as an escape hatch.

```ts
const fn = (
    a: AsyncActionCreator<
      ['FETCH_USERS_REQUEST', any],
      ['FETCH_USERS_SUCCESS', any[]],
      ['FETCH_USERS_FAILURE', [any, any]]
    >
  ) => {
    a.failure; // it is TH.PayloadActionCreator<"FETCH_USERS_FAILURE", any>
	// but it should be TH.PayloadMetaActionCreator<"FETCH_USERS_FAILURE", any, any>

    return a;
  };

```

## Describe a solution including usage in code example
```ts
type Result = ActionCreatorBuilder<'type', any, any>;
// current: (payload: any) => PayloadAction<"type", any>
// expected: (payload: any, meta: any) => PayloadAction<"type", any, any>

type Result = ActionBuilder<'type', any, any>;
// current: {type: "type"; payload: any;}
// expected: {type: "type"; payload: any; meta: any;}

```

## Who does this impact? Who is this for?
All TS Users as an escape hatch.

## Describe alternatives you've considered (optional)
<!-- A clear and concise description of any alternative solutions or workaround you've considered  -->

## Additional context (optional)
<!-- Add any other stuff you need, like links or related issues -->

Update internal validation functions (inside `src/utils/validation.ts`) using new TS 3.7 Assertion Functions.