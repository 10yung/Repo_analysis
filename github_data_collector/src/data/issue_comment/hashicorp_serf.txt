Dependent upon: https://github.com/hashicorp/memberlist/pull/210

Serf is able to discover nodes using mDNS. It is worth mentioning that in documentation, at least at https://www.serf.io/intro/getting-started/join.html
How does Gossip work in SWIM or Lifeguard?
Just for transmission？
And where is the relevant source code？
Thank you for your reply！
I have compiled successfully on windows, linux, arm machines.
I found an error when go build serf on arm64 machine.
```bash
# github.com/hashicorp/go.net/ipv4
/root/go/pkg/mod/github.com/hashicorp/go.net@v0.0.1/ipv4/sockopt_asmreqn_unix.go:20:12: undefined: getsockopt
/root/go/pkg/mod/github.com/hashicorp/go.net@v0.0.1/ipv4/sockopt_asmreqn_unix.go:41:42: undefined: setsockopt
/root/go/pkg/mod/github.com/hashicorp/go.net@v0.0.1/ipv4/sockopt_unix.go:29:12: undefined: getsockopt
/root/go/pkg/mod/github.com/hashicorp/go.net@v0.0.1/ipv4/sockopt_unix.go:51:42: undefined: setsockopt
# github.com/hashicorp/go.net/ipv6
/root/go/pkg/mod/github.com/hashicorp/go.net@v0.0.1/ipv6/sockopt_rfc3493_unix.go:105:42: undefined: setsockopt
/root/go/pkg/mod/github.com/hashicorp/go.net@v0.0.1/ipv6/sockopt_rfc3493_unix.go:114:42: undefined: setsockopt
/root/go/pkg/mod/github.com/hashicorp/go.net@v0.0.1/ipv6/sockopt_rfc3542_unix.go:54:12: undefined: getsockopt
/root/go/pkg/mod/github.com/hashicorp/go.net@v0.0.1/ipv6/sockopt_rfc3542_unix.go:75:12: undefined: getsockopt
/root/go/pkg/mod/github.com/hashicorp/go.net@v0.0.1/ipv6/sockopt_rfc3542_unix.go:82:42: undefined: setsockopt
```
But I do it successful after switched the package "hashicorp/mdns" version from 1.0.0 to 1.0.1  in go.mod.

[cmd/serf/version.go](https://github.com/hashicorp/serf/blob/master/cmd/serf/version.go) is left unchanged since 0.8.2, and `serf version` returns `Serf v0.8.2` even with the latest 0.8.5 source code.
This will be fixed by a small patch, but I can't make it because I don't know whether the next version is 0.8.6 or 0.9.0 (or 1.0.0?).
Automation would be a better solution.

removed on because grammer
Hi,
I just did some speed tests. With client and server on the same Serf process everything's well and Serf immediately forwards the message.
However, when a cluster is involved the initial Serf process waits at least 100 msec before forwarding the message. That's way too long for my use case.

Thus (a) why is there a delay in the first place, (b) can I turn it off?
For serf encryption/decryption using keyring file, 
Let's have we have Node1 , Node 2, Node 3 with primary key k1. 
Now Node 3 goes down.....In the meantime,,Node1 did (keygen,install,use) operations..
So Node 1, Node 2 are with K2(Primary key),K1(Secondary key)....Now Node 3 comes up..

1) Node 3 is unable to decrypt the messages coming from Node 1/Node 2 and he is creating a new cluster. How can we solve it?

2) How do we say serf supports one key can encrypt a message, but many keys can decrypt a message.

Serf version : 0.8.2

