- Socialite Version: 4.2.0
- Laravel Version: 6.4.0
- PHP Version: 7.3.10
- Database Driver & Version: MariaDB 10.3.17

### Description:

The GitLab provider requests all scopes by default, which grants very broad permissions if the application was created with the default settings. In contrast, the GitHub provider only requests the minimum required to authenticate the user (`user:email`).

To prevent this, only the `read_user` scope should be requested by default.

### Steps To Reproduce:

**Edit:** It appears the behavior depends on the scopes you grant to the application when creating it on GitLab. If you don't check any of the scope  checkboxes, all of them will implicitly be checked when you add the application, which causes the behavior described above. I guess it still makes sense to restrict the scope asked by default.

If you only allow the `read_user` scope on the GitLab application, you *must* request the scope explicitly by name, otherwise GitLab will return an error:

```text
The requested scope is invalid, unknown, or malformed.
```

This can be worked around by explicitly overriding the scope when authenticating the user with GitLab:

```php
    /**
     * Redirect the user to the OAuth2 provider's authentication page.
     */
    public function redirectToProvider(string $provider): RedirectResponse
    {
        if ($provider === 'gitlab') {
            // Only request the `read_user` scope if authenticating with GitLab
            return Socialite::driver($provider)->scopes(['read_user'])->redirect();
        }

        return Socialite::driver($provider)->redirect();
    }
```

I can look into submitting a pull request if this change is desired.

I have general routes to allow easily adding Socialite providers:
```php
Route::get('login/{provider}', 'Auth\LoginController@redirectToProvider')->name('socialite.redirect');  
Route::get('login/{provider}/callback', 'Auth\LoginController@handleProviderCallback')->name('socialite.callback');
```

Because config is loaded before routes, it isn't possible to set the `redirect` option in `services.php` using something like `route('socialite.callback', ['provider' => 'google']),`.

My proposal is to allow setting a route name for Socialite and use that to create a default `redirect` if one isn't specified.

Something like this (although there isn't currently a simple way to get the provider name either?):
```php
    /**
     * Format the callback URL, resolving a relative URI if needed.
     *
     * @param  array  $config
     * @return string
     */
    protected function formatRedirectUrl(array $config)
    {
        $redirect = value($config['redirect']);
        if ( ! defined($redirect) ) {
            return $this->defaultRedirectUrl($config);
        }
        return Str::startsWith($redirect, '/')
                    ? $this->app['url']->to($redirect)
                    : $redirect;
    }

    /**
     * Get a default callback route.
     *
     * @param  array  $config
     * @return string
     */
    protected function defaultRedirectUrl(array $config)
    {
        $socialite_config = $this->app['config']['socialite'];
        $route = value($config['route']);
        if ($route) {
            return $this->app['url']->route($route, ['provider' => $config['provider'] ]);
        } else {
            throw new Exception();
        }
    }
```
- Socialite Version: 4.1
- Laravel Version: 5.8
- PHP Version: 7.1

### Description:
When using linkedIn with scopes, the scope is requested, however the data is not getting fetched afterwards.
When I for example have the scope `r_basicprofile`, I should be able to get the `vanityName`, however this data is not getting fetched.

Looking into the provider, we have a bunch of hardcoded properties, these do not change depending on which scope I am requesting.

### Steps To Reproduce:
Make a request with scope `r_basicprofile`.

I believe a space is the more sensible default as I've not seen too many examples using comma's.

See discussion here as well: https://github.com/laravel/passport/issues/1008
- Socialite Version: v3.2.0
- Laravel Version: v5.7.22
- PHP Version: PHP 7.1.6
- Database Driver & Version: mysql

### Description:
Wrong avatar original for Google API:

image['url'] => https://lh5.googleusercontent.com/-S9cRpbIvumo/AAAAAAAAAAI/AAAAAAAAAAA/ACHi3rfuJ7kOYuvkSMSwjgO2hVEX3wy0qA/s50-mo/photo.jpg
avatar_original => https://lh5.googleusercontent.com/-S9cRpbIvumo/AAAAAAAAAAI/AAAAAAAAAAA/ACHi3rfuJ7kOYuvkSMSwjgO2hVEX3wy0qA/s50-mo/photo.jpg

But original size is https://lh5.googleusercontent.com/-S9cRpbIvumo/AAAAAAAAAAI/AAAAAAAAAAA/ACHi3rfuJ7kOYuvkSMSwjgO2hVEX3wy0qA/photo.jpg

- Socialite Version: 3.2.0
- Laravel Version: 5.7.28
- PHP Version: 7.1.23
- Database Driver & Version: Postgres 10.6

### Description:
It seems Facebook’s changed how it returns access tokens since Socialite was last updated and the expiration date is no longer surfaced (and therefore set by Socialite). It’s also unclear whether the token Socialite returns is a “short-lived” token or a “long-lived” token.

It _is_ possible to “debug” a Facebook access token: (https://developers.facebook.com/docs/graph-api/reference/v3.2/debug_token). But again, this is confusing as that endpoint returns two “expires” timestamps: an `expires_at` timestamp and a `data_access_expires_at` timestamp.

I’m not sure whether it would be acceptable for Socialite to make a second HTTP call just to fetch the `expires_at` timestamp value, but it sure would be helpful in my application(s) so that for stored access tokens, I can see when they expired and if they need refreshing.

### Steps To Reproduce:
1. Create a route to authenticate with Facebook.
2. Create a route to handle the callback from Facebook.
3. Observe that `expiresIn` is `null` when calling `Socialite::driver('facebook')->user()`.