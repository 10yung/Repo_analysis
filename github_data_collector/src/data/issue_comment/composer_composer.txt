Re: https://getcomposer.org/doc/06-config.md#archive-format

The Archive Format set to `zip` in `composer.json` does not work, but it does work as a command line flag.

My `composer.json`:

```json
{
	"name": "cliffordp/foo-bar",
	"description": "A thing.",
	"type": "project",
	"license": "GPL-3.0-or-later",
	"authors": [
		{
			"name": "TourKick LLC (Clifford Paulick)",
			"email": "tko@tourkick.com",
			"homepage": "https://tourkick.com/",
			"role": "Developer"
		}
	],
	"archive": {
		"exclude": [
			"!vendor/*",
			"*.babel.js",
			"*.env",
			"*.local",
			"*.test",
			"*.zip",
			"/.all-contributorsrc",
			"/.babelrc",
			"/.gitattributes",
			"/.github",
			"/.gitignore",
			"/.phpcs.xml",
			"/.phpunit.result.cache",
			"/.travis.yml",
			"/.wordpress-org",
			"/README.md",
			"/composer.json",
			"/composer.lock",
			"/composer.phar",
			"/development/",
			"/logs/",
			"/node_modules/",
			"/phpcs.xml",
			"/phpunit.xml"
		]
	},
	"autoload": {
		"psr-4": {
			"Foo_Bar\\": "src/"
		}
	},
	"config": {
		"archive-format": "zip",
		"optimize-autoloader": true
	}
}
```

Output of `composer diagnose`:

```
Checking composer.json: OK
Checking platform settings: OK
Checking git settings: OK
Checking http connectivity to packagist: OK
Checking https connectivity to packagist: OK
Checking github.com rate limit: OK
Checking disk free space: OK
Checking pubkeys: 
Tags Public Key Fingerprint: 57815BA2 7E54DC31 7ECC7CC5 573090D0  87719BA6 8F3BB723 4E5D42D0 84A14642
Dev Public Key Fingerprint: 4AC45767 E5EC2265 2F0C1167 CBBB8A2B  0C708369 153E328C AD90147D AFE50952
OK
Checking composer version: OK
Composer version: 1.9.2
PHP version: 7.3.10
PHP binary path: /usr/local/Cellar/php/7.3.10/bin/php
```

When I run this command:

```
php composer.phar archive --file foo-bar
```

I get the following output:

```
Created: ./foo-bar.tar
```

And I expected this to happen:
Generate a `foo-bar.zip`, not a `foo-bar.tar`

However, if I run this command:

```
php composer.phar archive  --format=zip --file foo-bar
```

Then it works as desired (.zip)

It _used_ work but I don't know which prior version of Composer I was using.

Hello!
We use CI process, which includes a  `composer install` command.
Every `composer install` execution modifies the dates for the vendor folder and some files.

It blocks docker layer caching system and increase CI JOB time.

This PR allows composer install and docker cache system to run along.
See TODOs added by #8444 
Recently formatted my laptop and tried to install Composer v1.9.1 using PHP v7.4.1 TS.
My `composer.json`:

```json
{
    "name": "symfony/website-skeleton",
    "type": "project",
    "license": "MIT",
    "description": "A skeleton to start a new Symfony website",
    "require": {
        "php": "^7.1.3",
        "ext-ctype": "*",
        "ext-iconv": "*",
        "sensio/framework-extra-bundle": "^5.1",
        "symfony/asset": "*",
        "symfony/console": "*",
        "symfony/dotenv": "*",
        "symfony/expression-language": "*",
        "symfony/flex": "^1.1",
        "symfony/form": "*",
        "symfony/framework-bundle": "*",
        "symfony/monolog-bundle": "^3.1",
        "symfony/orm-pack": "*",
        "symfony/process": "*",
        "symfony/security-bundle": "*",
        "symfony/serializer-pack": "*",
        "symfony/swiftmailer-bundle": "^3.1",
        "symfony/translation": "*",
        "symfony/twig-bundle": "*",
        "symfony/validator": "*",
        "symfony/web-link": "*",
        "symfony/yaml": "*"
    },
    "require-dev": {
        "symfony/debug-pack": "*",
        "symfony/maker-bundle": "^1.0",
        "symfony/profiler-pack": "*",
        "symfony/test-pack": "*",
        "symfony/web-server-bundle": "*"
    },
    "config": {
        "preferred-install": {
            "*": "dist"
        },
        "sort-packages": true,
        "disable-tls": false,
        "secure-http": true
    },
    "autoload": {
        "psr-4": {
            "App\\": "src/"
        }
    },
    "autoload-dev": {
        "psr-4": {
            "App\\Tests\\": "tests/"
        }
    },
    "replace": {
        "paragonie/random_compat": "2.*",
        "symfony/polyfill-ctype": "*",
        "symfony/polyfill-iconv": "*",
        "symfony/polyfill-php71": "*",
        "symfony/polyfill-php70": "*",
        "symfony/polyfill-php56": "*"
    },
    "scripts": {
        "auto-scripts": {
            "cache:clear": "symfony-cmd",
            "assets:install %PUBLIC_DIR%": "symfony-cmd"
        },
        "post-install-cmd": [
            "@auto-scripts"
        ],
        "post-update-cmd": [
            "@auto-scripts"
        ]
    },
    "conflict": {
        "symfony/symfony": "*"
    },
    "extra": {
        "symfony": {
            "allow-contrib": false,
            "require": "5.*"
        }
    }
}
```

Output of `composer diagnose`:

```
RT-AC66U_B1-C618:~# composer diag
Do not run Composer as root/super user! See https://getcomposer.org/root for details
Checking platform settings: OK
Checking git settings: OK
Checking http connectivity to packagist: OK
Checking https connectivity to packagist: OK
Checking github.com rate limit: FAIL
[Composer\Downloader\TransportException] The "https://api.github.com/rate_limit" file could not be downloaded: SSL operation failed with code 1. OpenSSL Error messages:
error:1409442E:SSL routines:ssl3_read_bytes:tlsv1 alert protocol version
Failed to enable crypto
failed to open stream: operation failed
Checking disk free space: OK
Checking pubkeys:
Tags Public Key Fingerprint: 57815BA2 7E54DC31 7ECC7CC5 573090D0  87719BA6 8F3BB723 4E5D42D0 84A14642
Dev Public Key Fingerprint: 4AC45767 E5EC2265 2F0C1167 CBBB8A2B  0C708369 153E328C AD90147D AFE50952
OK
Checking composer version: OK
Composer version: 1.9.1
PHP version: 7.2.22
PHP binary path: /tmp/mnt/sda1/entware/bin/php-cli

```

When I run this command:

```
composer install
```

I get the following output:

```
Do not run Composer as root/super user! See https://getcomposer.org/root for details
Loading composer repositories with package information
Installing dependencies (including require-dev) from lock file
Package operations: 101 installs, 0 updates, 0 removals
  - Installing ocramius/package-versions (1.4.2): Downloading (failed)
Downloading (failed)
Downloading (failed)    Failed to download ocramius/package-versions from dist: The "https://api.github.com/repos/Ocramius/PackageV302ad9600cba41c7d" file could not be downloaded: SSL operation failed with code 1. OpenSSL Error messages:
error:1409442E:SSL routines:ssl3_read_bytes:tlsv1 alert protocol version
Failed to enable crypto
failed to open stream: operation failed
    Now trying to download from source
  - Installing ocramius/package-versions (1.4.2): Cloning 44af6f3a2e


  [RuntimeException]
  Failed to clone https://github.com/Ocramius/PackageVersions.git via https, ssh protocols, aborting.

  - https://github.com/Ocramius/PackageVersions.git
    Cloning into '/tmp/mnt/sda1/entware/share/nginx/html/RemoteAdmin/vendor/ocramius/package-versions'...
    fatal: unable to find remote helper for 'https'

  - git@github.com:Ocramius/PackageVersions.git
    Cloning into '/tmp/mnt/sda1/entware/share/nginx/html/RemoteAdmin/vendor/ocramius/package-versions'...
    git@github.com: Permission denied (publickey).
    fatal: Could not read from remote repository.

    Please make sure you have the correct access rights
    and the repository exists.


install [--prefer-source] [--prefer-dist] [--dry-run] [--dev] [--no-dev] [--no-custom-installers] [--no-autoloader] [--no-scripts] vv|--verbose] [-o|--optimize-autoloader] [-a|--classmap-authoritative] [--apcu-autoloader] [--ignore-platform-reqs] [--] [<packages

```

And I expected this to happen:
As Gitlab stopped supporting and using TLSv1 and TLSv1.1, I expected composer to use TLSv1.2, but I found no way to actually configure this.

I only started using php for a personal project, I did a very basic configuration of php that could show phpinfo() in browser through LAN with nginx. But when I installed composer to use Symphony it wasn't working.

wget and curl successfully connects and gets a response from github, the verbose output states them connecting with TLSv1.2.

Installed ca-certificates and ca-bundle packages are the latest version available.
Test on stable PHP 7.4, and use latest distributions available on travis.
My `composer.json`:

```json
{
    "require": {
        "typo3/cms": "7.x-dev"
    },
    "require-dev": {
        "nimut/phpunit-merger": "0.3.2"
    }
}

```

Output of `composer diagnose`:

```
Checking composer.json: WARNING
No license specified, it is recommended to do so. For closed-source software you may use "proprietary" as license.
require.typo3/cms : exact version constraints (7.x-dev) should be avoided if the package follows semantic versioning
Checking platform settings: OK
Checking git settings: OK
Checking http connectivity to packagist: OK
Checking https connectivity to packagist: OK
Checking github.com oauth access: OK
Checking disk free space: OK
Checking pubkeys:
Tags Public Key Fingerprint: 57815BA2 7E54DC31 7ECC7CC5 573090D0  87719BA6 8F3BB723 4E5D42D0 84A14642
Dev Public Key Fingerprint: 4AC45767 E5EC2265 2F0C1167 CBBB8A2B  0C708369 153E328C AD90147D AFE50952
OK
Checking composer version: OK
Composer version: 082422f334f1bf2d593ea395fe4d8c056b24fc8e
PHP version: 7.2.14
PHP binary path: C:\Unix\PHP-7.2.14-x64\php.exe
```

When I run this command:

```
composer install -vvv
```

I get the following output (Composer hangs at this point):

```
Something's changed, looking at all rules again (pass #100)
```

And I expected this to happen:
After some investigation I found out there are some incompatible version constraints: TYPO3 requires symfony packages with version "^2.7" but phpunit-merger only allows versions "^3.0 || ^4.0". I would expect an error message here but Composer hangs and doesn't return anything.
My `composer.json`:

```
{
    "type": "project",
    "config": {
        "process-timeout": 5000
    },
    "require": {
        "php": "^7.",
        "ext-pdo_pgsql": "*",
        "ext-zip": "*",
        "ext-intl": "*",
        "ext-soap": "*",
        "ext-mbstring": "*",
        "googleads/googleads-php-lib": "^42.0.0",
        "zendframework/zend-db": "2.8.2",
	    "zendframework/zend-hydrator": "2.3.0",
	    "zendframework/zend-filter": "2.7.2",
	    "zendframework/zend-servicemanager": "3.3.0",
	    "zendframework/zend-paginator": "2.7.0",
	    "aws/aws-sdk-php": "3.38.1",
	    "guzzlehttp/guzzle": "6.3.1"
    },
    "autoload": {
        "psr-4": {
            "Laborit\\AdsManagerWorker\\": "src/"
        }
    },
  	"require-dev": {
        "phpunit/phpunit": "7.3.*"
  	},
  	"autoload-dev": {
    	"psr-4": { 
	    	"Laborit\\TestWorker\\" : "tst/"
    	}
  	},
  	"scripts": {
  		"test-run": "phpdbg -qrr ./vendor/phpunit/phpunit/phpunit --coverage-text --colors=never --bootstrap vendor/autoload.php tst",
  		"wvars-validate": "./data/bin/var-validate"
  	}
}
```

Output of `composer diagnose`:

```
Checking composer.json: WARNING
No license specified, it is recommended to do so. For closed-source software you may use "proprietary" as license.
require.zendframework/zend-db : exact version constraints (2.8.2) should be avoided if the package follows semantic versioning
require.zendframework/zend-hydrator : exact version constraints (2.3.0) should be avoided if the package follows semantic versioning
require.zendframework/zend-filter : exact version constraints (2.7.2) should be avoided if the package follows semantic versioning
require.zendframework/zend-servicemanager : exact version constraints (3.3.0) should be avoided if the package follows semantic versioning
require.zendframework/zend-paginator : exact version constraints (2.7.0) should be avoided if the package follows semantic versioning
require.aws/aws-sdk-php : exact version constraints (3.38.1) should be avoided if the package follows semantic versioning
require.guzzlehttp/guzzle : exact version constraints (6.3.1) should be avoided if the package follows semantic versioning
Checking platform settings: OK
Checking git settings: OK
Checking http connectivity to packagist: OK
Checking https connectivity to packagist: OK
Checking github.com rate limit: OK
Checking disk free space: OK
Checking pubkeys:
Tags Public Key Fingerprint: 57815BA2 7E54DC31 7ECC7CC5 573090D0  87719BA6 8F3BB723 4E5D42D0 84A14642
Dev Public Key Fingerprint: 4AC45767 E5EC2265 2F0C1167 CBBB8A2B  0C708369 153E328C AD90147D AFE50952
OK
Checking composer version: OK
Composer version: 1.9.1
PHP version: 7.3.11
PHP binary path: /usr/bin/php7
```

When I run this command:

```
 docker build --tag my-image-test -f DockerfileTest .
```

I get the following output:

```
Step 19/28 : RUN curl -s https://getcomposer.org/installer | php
 ---> Running in 112bcd15e7e3
All settings correct for using Composer
Downloading...

Composer (version 1.9.1) successfully installed to: //composer.phar
Use it: php composer.phar

The command '/bin/sh -c curl -s https://getcomposer.org/installer | php' returned a non-zero code: 1
```

My Dockerfile:
```
FROM php:7.2

#UNIX LIBRARYS
ENV DEBIAN_FRONTEND noninteractive    
RUN apt-get update
RUN apt-get -y install apt-utils
RUN apt-get upgrade -y
RUN apt-get update
RUN mkdir -p /usr/share/man/man1
RUN mkdir -p /usr/share/man/man7
RUN apt-get install -y curl git zip unzip
RUN apt-get install -y libxml2-dev
RUN apt-get install -y libpq-dev
RUN apt-get install -y zlib1g-dev
RUN apt-get install -y g++
RUN apt-get install -y libicu-dev

RUN apt-get clean

ENV DEBIAN_FRONTEND teletype

RUN docker-php-ext-install -j$(nproc) pdo_pgsql zip intl soap
RUN pecl install uopz-5.0.2 && docker-php-ext-enable uopz

RUN curl -s https://getcomposer.org/installer | php
RUN mv composer.phar /usr/local/bin/composer

ENV THEDIR /worker
COPY . $THEDIR
WORKDIR $THEDIR

COPY data/php/development.ini $PHP_INI_DIR/php.ini

RUN composer install --dev --ignore-platform-reqs
RUN composer update --dev --ignore-platform-reqs'

VOLUME [$THEDIR]
CMD ["composer", "test-run"]
```


And I expected this to happen:

A zero exit code after the composer install
For documentation we need sort by alphabetical command name.


I can to do this this week-end :)