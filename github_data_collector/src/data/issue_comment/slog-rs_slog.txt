Might be nice to have something like:
```
use slog_scope::*;
new_scope!("key" => "value", || {
  info!("hi");
});
```

that is shorthand for:
```
use slog_scope::*;
with_logger(|logger| {
  scope(logger.new(o!("key" => "value")), || {
    info!("hi")
  });
});
```
More a feature request than a bug, but it would be nice to have a way to log to a generic stream using the colors implemented in `slog_term::TermDecorator`. Right now you have to reimplement the entire thing to get terminal colors to log to a file.

This is useful when logging to a file which is later `tail -F`'d.
It seems that the logic in this PR: https://github.com/slog-rs/slog/pull/170 has been reverted somehow, because I now get exactly those errors which are described in that PR when I try to use `?` or `%` with `o!()`:
```

error[E0277]: `*mut (dyn std::ops::Fn() + 'static)` cannot be shared between threads safely
   --> src/server/mail/watcher.rs:755:20
    |
755 |         logger.new(o!("part_path" => ?p))
    |                    ^^^^^^^^^^^^^^^^^^^^^ `*mut (dyn std::ops::Fn() + 'static)` cannot be shared between threads safely
    |
    = help: within `[std::fmt::ArgumentV1<'_>]`, the trait `std::marker::Sync` is not implemented for `*mut (dyn std::ops::Fn() + 'static)`
    = note: required because it appears within the type `std::marker::PhantomData<*mut (dyn std::ops::Fn() + 'static)>`
    = note: required because it appears within the type `core::fmt::Void`
    = note: required because it appears within the type `&core::fmt::Void`
    = note: required because it appears within the type `std::fmt::ArgumentV1<'_>`
    = note: required because it appears within the type `[std::fmt::ArgumentV1<'_>]`
    = note: required because of the requirements on the impl of `std::marker::Send` for `&[std::fmt::ArgumentV1<'_>]`
    = note: required because it appears within the type `std::fmt::Arguments<'_>`
    = note: required because it appears within the type `slog::SingleKV<std::fmt::Arguments<'_>>`
    = note: required because it appears within the type `(slog::SingleKV<std::fmt::Arguments<'_>>, ())`
    = note: required because of the requirements on the impl of `slog::SendSyncRefUnwindSafeKV` for `(slog::SingleKV<std::fmt::Arguments<'_>>, ())`
    = note: required by `slog::OwnedKV`
    = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)
```

And indeed, the `kv!` macro now uses `__slog_builtin(@format_args)` instead of whatever is implemented in #170, which in turn implements the pre-#170 approach of using `format_args`.
All public types should implement Debug unless there's a good reason not to.

Since the guard removes the logger when it is dropped, it can be necessary to store the guard as part of a struct which may have Debug bounds.
Why not use `Borrow<T>` for keys instead of custom types?

- `Key` can be replaced with generic `K: Borrow<str>`
- `OwnedKV` and `BorrowedKV` can be replaced with `T: Borrow<KV>`
* [x] Update the code and tests
* [x] Set lowest version tested at Travis CI to 1.31.0
* [x] Changelog

I figured having those hidden behind feature flags does more bad than good: the features are poorly supported and cause runtime panics from the surrounding infrastructure.
This fractures the ecosystem in a way that when one can attempts using a package it can compile and have all interfaces check out, but panic at runtime with something that should've definitely been a compile error not only in rust, but in any modern type-safe language.
Both https://github.com/slog-rs/term and https://github.com/slog-rs/envlogger have issues I'd like to report, however issues are disabled for those repos and there's no clear documentation on where to report issues besides the usual GitHub issue tracking locations.
https://github.com/slog-rs/json already have issues enabled, which is confusing.

Both repos state that the issues should reported here, however this issue tracker is not well-organized to support this kind of cross-repo issue tracking. For example, it's not possible to have an overview of the issues specific to just a single sub-repo.
Hi! I would like to use slog in a browser in such a way, that I could output "compact" mode there using all the console goodies, like `console.group` (so I could collapse and expand logs): https://developer.mozilla.org/en-US/docs/Web/API/Console/group

I've been looking at the `slog_term::TermDecorator` but it seems we will rather not be able to reuse it here (or we will?). 

Will such abilities be available in slog? :)

So I recently found out that I can't log `SerdeValue`s to `slog-term`'s drains. Would you be open to PRs implementing support for it?