The following code causes a SA1119:

```csharp
_ = (0..5).End;
```

The analyzer then suggests "removing the unnecessary parenthesis":

<img width="522" alt="rangeBug" src="https://user-images.githubusercontent.com/461579/71753405-4e626c80-2e61-11ea-8b4c-20d0766e9271.png">

Which then breaks the code:

<img width="577" alt="rangeBug2" src="https://user-images.githubusercontent.com/461579/71753475-7ce04780-2e61-11ea-93c2-f39882fa7800.png">


Is there already a support for not having to use rulesets xml or json configuration files and use modern editorconfig where all rules from multiple analyzers including vs ide settings can be stored? If not is it in the plan?
In a C# 8 switch expression, SA1122 (Use string.Empty for empty strings) fires inappropriately if an empty string constant is used. For example:

```var reaction = this.LootType switch
{
	"Bard" => "Friendly",
	"" => string.Empty, // Left side triggers SA1122
	null => string.Empty,
	_ => "Justice Neutral"
};```
StyleCop version: **[6.1.0.0](https://www.nuget.org/packages/StyleCop/6.1.0)**
Visual Studio version: **2019 (16.2.2)**
Project's .NET Framework version: **4.6.2**

StyleCop is reporting syntax error when there is a fully qualified type names used in a tuple declaration. Aliased namespaces don't work as well. 

This is global issue, i.e. it is reproducible when tuple with fully qualified type name appears as a variable, method argument or method return type.

Code snippet to reproduce an issue:
```C#
using System;
using MySystemAlias = System;

namespace StyleCopTupleIssueRepro
{
    public class Foo
    {
        public (String, int) Case1()
        {
            (System.String a, int b) = ("Hello", 42);
            throw new NotImplementedException();
        }

        public (MySystemAlias.String, int) Case2((System.String, int) args)
        {
            throw new NotImplementedException();
        }
    }
}
```

The workaround is to create an alias for type:

```C#
using System;
using MySystemStringAlias = System.String;

namespace StyleCopTupleIssueRepro
{
    public class Foo
    {
        public (MySystemStringAlias, int) Case1()
        {
            throw new NotImplementedException();
        }
    }
}
```
        private string SizeClass => Size switch
        {
            Size.Small => "btn-sm",
            Size.Normal => "",
            Size.Large => "btn-lg",
            _ => ""
        };
We use StyleCopConsole to analyze our sourcу code. Style Cop analysis takes 20 609 ms, while 5 046 of them (24%) is spent in method StyleCop.Spelling.NamingService.AddDictionaryFolder(String). 

The trace is as follows:

    12.0%   Start  •  20 609 ms  •  StyleCop.StyleCopConsole.Start(IList, Boolean)
      12.0%   FullAnalyze  •  20 490 ms  •  StyleCop.StyleCopCore.FullAnalyze(IList)
        12.0%   Analyze  •  20 487 ms  •  StyleCop.StyleCopCore.Analyze(IList, Boolean, String)
          11.9%   RunWorkerThreads  •  20 482 ms  •  StyleCop.StyleCopCore.RunWorkerThreads(Data, Int32)
            11.9%   DoWork  •  20 481 ms  •  StyleCop.StyleCopThread.DoWork(Object)
              11.7%   ParseAndAnalyzeDocument  •  20 128 ms  •  StyleCop.StyleCopThread.ParseAndAnalyzeDocument(SourceCode, DocumentAnalysisStatus)
                7.75%   TestAndRunAnalyzers  •  13 289 ms  •  StyleCop.StyleCopThread.TestAndRunAnalyzers(CodeDocument, SourceParser, IEnumerable, Int32)
                  7.74%   RunAnalyzers  •  13 272 ms  •  StyleCop.StyleCopThread.RunAnalyzers(CodeDocument, SourceParser, IEnumerable)
                    5.14%   AnalyzeDocument  •  8 804 ms  •  StyleCop.CSharp.DocumentationRules.AnalyzeDocument(CodeDocument)
                    ► 3.13%   AddDictionaryFolder  •  5 369 ms  •  StyleCop.Spelling.NamingService.AddDictionaryFolder(String)

In our case we don't need to search for dictionaries when analyzing each document: we've got only one dictionary that is used in the whole solution.

So the opportunity to disable searching of custom dictionaries for each file will be great.
If you rely on the implicit values (0, 1, 2), when removing a value from the middle, the code will start behaving differently because the meanings have changed.

For example if we have an Enum for storing Virtual Machine states (Not Ready, Dirty, Ready, Leased, Completed) and we remove the Dirty value, all VMs that were Ready are now Leased, and all the ones that are Leased are now in Completed state.
is possible write in setting file a "whitelist" of the file for stylecop analysis?
now i'm working on a very old project and is impossible apply the analysis rule to all the project. I want to apply it just on the new file.
internal static ref bool Method(in this char value) // this line causes SA0102 error
Is it planned to also produce an extension that can work in VS Code? One that results in a similar formatting as in VS?

Thanks
eric
