**matchedData()** returns unwanted fields for nested objects, I think it should (or at least have an option) to not return a nested property if it is not specified in validator.

Route: 

```
router.route('/users/:id/profile-settings').put(
    [
      param('id').exists(),
      body('address')
        .optional(),
      body('address.displayStreet')
        .optional()
        .isBoolean()
    ],
    controller.update
  )
```

Request body:

```
{
    "address": {
    	"test": true,
        "displayStreet": true
    }
}
```

**matchedData()** call:

```
let bodyData = matchedData(req, { locations: ['body'] })
```
Expected result:

```
{
    "address": {
        "displayStreet": true
    }
}
```
Acquired result:

```
{
    "address": {
        "test": true,
        "displayStreet": true
    }
}
```

I think it shouldn't return fields that are not specified in validator, so it shouldn't return the `test` field after calling **matchedData()** . Peharps, it's a security concern, since it's not a good idea to let unknown properties bypass your validations.
I'm not sure if this is a bug or if I'm not understanding the `onlyValidData` option for `matchedData()` correctly, but I have a validation setup like:

```
check('someObject.nestedObject.propertyA')
     .if((value, { req }) => req.body.someObject.nestedObject)
     .exists()
     ...
```

When I call `matchedData(req)`, I get back:
```
{ 
  ...,
  someObject: {
     nestedObject: {
          propertyA: undefined
     }
  },
  ...
}
```
though I would expect `matchedData` to **not** include the `propertyA` property. It’s not a huge deal as there are obvious ways to work with the output that’s currently being returned.
Hi, I'm trying to build a register endpoint for an API. I want to check whether the username already exists. On the official website, I found this information concerning this exact problem:
https://express-validator.github.io/docs/custom-validators-sanitizers.html

Unfortunately if I run this code, I get an UnhandledPromiseRejectionWarning and the API still creates the user, which is not intended. I just found some short code examples where `return Promise.reject` was replaced by `throw new Error`, but with that my programm stops executing completely and doesn't send any response through the API. I'm sure, there's a mistake somewhere in my code, but unfortunately I couldn't find examples showing the full code. Could anybody please help me or send a link to a proper tutorial?

```
const express = require('express');
const router = express.Router();
const User = require('../models/userModel');
const { check, validationResult } = require('express-validator');

const checkUsernameExists = (value) => {
    return User.findOne({ name: value }, (err, user) => {
        if (user) {
            return Promise.reject('already in use');
        }
    });
}

router.post('/', [
    check('name').exists().custom(checkUsernameExists),
    check('email').isEmail(),
    check('password').exists()
], function(req, res, next) {

    // if validation failed, return errors
    const errors = validationResult(req);
    if (!errors.isEmpty()) {
        return res.status(422).json({ errors: errors.array() });
    }

    // convert json user to mongoose object
    let user = new User(req.body);

    // do something else
});

module.exports = router;
```
I am looking for something that only allows the fields defined in the chain, but return error on field that are not required.

Like if i require only body('username').exists() it should only accept username field, any other field may return an error. 

Is there something i can do?
Assume that there is nothing in req.query.

Say we have validator of the following
`query('testing').optional()`

running matchedData(req) will return {}, which is a correct behavior.

If we change the validator to 
`oneOf([query('testing').optional()])`
running matchedData(req) will return { testing: undefined }, which is not the case back in 5.x.x
Hi 
How can i ignore objects with empty string / null value ?

I tried:
**POST**
`{mai:""}`
**NODE**
`body('mail').exists({checkFalsy:true}).optional().normalizeEmail().isEmail().isLength({min:0, max: 40})`

but `if(req.body.mail)` returns **true**, but it should return **false** ?

I would like to set other fields as matched data for retrieval later on when calling matchedData().
Is this possible?

e.g. (partial pseudo code)
````
body('user', ErrorCode.LIBRARY_USER_INVALID).isMongoId().custom((value, { req }) => {
  const user = mongoose.loadUserById(value);;

  // now set userType as a matched field so that this will be returned when calling matchedData(req)
  setAsMatchedData('userType',  user.type);
});
````
With the current implementation, async custom validators resolved result is not taken into account.

As i read in the documentation: 

> The custom validator may return a promise to indicate an async validation task. In case it's rejected, the field is considered invalid

So even with a `resolve(false)`, the validator will be considered as a success.

This leads to make mistakes when you implement validators with async/await style:
```
async isMyValidator() {
  const isAllGood = await someStuff();

  return isAlllGood;
}
```

It's a pain to make it works with the current implementation !
You have to throw an error on every test inside the validator.
When I send a http request with query, I get an error due to '+' character is being replaced by white space.
 I expect
url : /clients?gsm=+905555555555
```
    try {
        validationResult(req).throw();
        next();
    } catch (err) {
        const errors = err.array();
       ...
       ...
        next(new BadRequestError(message, ERR_VALIDATION.code));
    }
```
Where value of 'errors' is:
```
{
  "location": "query",
  "param": "gsm",
  //expected value: '+905555555555' 
  "value": " 905555555555", // see the whitespace in the beginning of mobile number 
  "msg": {
    "tr": "Telefon numarası doğru girilmelidir.",
    "en": "Enter a valid phone number."
  }
}
```
```bash
      throw new Error('Most middleware (like ' + name + ') is no longer bundled with Express and must be installed separately. Please see https://github.com/senchalabs/connect#middleware.');
      ^

Error: Most middleware (like json) is no longer bundled with Express and must be installed separately. Please see https://github.com/senchalabs/connect#middleware.
    at Function.get (C:\Users\hdesorme\MattTemp\NodeGoogleCalendarTutorial-master\node_modules\express\lib\express.js:89:13)
    at Object.<anonymous> (C:\Users\hdesorme\MattTemp\NodeGoogleCalendarTutorial-master\test.js:5:17)
    at Module._compile (internal/modules/cjs/loader.js:956:30)
    at Object.Module._extensions..js (internal/modules/cjs/loader.js:973:10)
    at Module.load (internal/modules/cjs/loader.js:812:32)
    at Function.Module._load (internal/modules/cjs/loader.js:724:14)
    at Function.Module.runMain (internal/modules/cjs/loader.js:1025:10)
    at internal/main/run_main_module.js:17:11
```