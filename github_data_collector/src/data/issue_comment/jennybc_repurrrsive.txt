Pleased to learn about https://github.com/Preetish/GoT_screen_time from @Preetish ... could be useful in a data-rectangling and joining example or exercise
Arya has zero books. Seems like an error, but whatever.

In some ways this is good for the package, because you have to deal with a field that is not equally present for all characters, i.e. it queues up the need for `.default` in purrr mapping functions. But brings up the point that perhaps povBooks is really what you want.
Not sure where to put this, so I decided to file an issue here.  `xPath` in general scares and intimidates, but as I was playing with this [plotly + defiant.js example](http://bl.ocks.org/timelyportfolio/2c8e0fcbd5b4fb73151c1be9df17c103), I started to wonder if `xPath` on nested objects/`JSON` is more intuitive and visual.  See [defiant.js xpath evaluator](http://www.defiantjs.com/#xpath_evaluator) as an example.  If you agree, then I will explore potential ways of pursuing ways of incorporating this in `R`.

![xpath_json_defiant](https://cloud.githubusercontent.com/assets/837910/20571968/1f12c46a-b16f-11e6-8072-58fb3e57f815.gif)

Lists by topics or searchs

https://github.com/vincentarelbundock/WDI

via @mkearney

``` r
devtools::install_github("mkearney/rtweet")
rt <- rtweet::search_tweets("rstats", n = 200, parse = FALSE)
```

via @masalmon

https://pokeapi.co

Your call for examples made me realize I need purrr for table-fying the new `sf` classes. 

Warning, this is not extensively tested, and I only look at polygons below (not lines or multi-points), but I think a purrr/dplyr-friendly illustration to open up the fortify black box is worth exploring. 

In sp, data are stored as a list of list of matrices, and ggplot2 has `fortify` methods to convert it to long table form. 

``` R
library(sp)
library(rgdal)
library(raster)
spdf <- shapefile(system.file("shapes/sids.shp", package="maptools"))

library(ggplot2)
ff <- fortify(spdf)
ggplot(ff) + aes(x = long, y = lat, group = group, fill = id) + geom_polygon() + geom_path() + guides(fill = FALSE)
```

The underlying `ggplot2:::fortify.Polygons` method, applied by `ggplot2:::fortify.SpatialPolygons` and `ggplot2:::fortify.SpatialPolygonsDataFrame` is a bit obscure. 

We can achieve the same with purrr mapping (though we get slightly different fill due to the changed ID sorting). 

``` R
library(purrr)
 pm <- bind_rows(map(spdf@polygons, function(x) bind_rows(map(x@Polygons, function(y) as.data.frame(y@coords)), .id = "part")), .id = "feature")
## part must be unique
pm <- pm %>% mutate(part = paste(part, feature, sep = "-"))
ggplot(pm) + aes(x = V1, y = V2, group = part, fill = feature) + geom_polygon() + geom_path() +  guides(fill = FALSE)
```

We can apply a similar approach to the new `sf` classes, and it's a fair bit simpler. 

``` R
library(sf)  ## new!  on CRAN

## more or less the same dataset
nc <- st_read(system.file("gpkg/nc.gpkg", package="sf"), "nc.gpkg", crs = 4267)
nc_geom_long <- bind_rows(map(nc$geom, function(x) bind_rows(map(x, as.data.frame), .id = "part")), .id = "feature")
## part must be unique
nc_geom_long <- nc_geom_long %>% mutate(part = paste(part, feature, sep = "-"))
## here the names are X1/X2 rather than V1/V2 but it's not really relevant
ggplot(nc_geom_long) +  aes(x = X1, y = X2, group = part, fill = feature) + geom_polygon() + geom_path() +  guides(fill = FALSE)


```
