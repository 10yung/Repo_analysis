Fixes #160.

This PR changes the `iced_wgpu::image::raster::Cache` to unload images from the GPU when they are no longer visible and new ones have been uploaded.

The change may cause applications to block more oftenly when hiding/displaying different images (like a scrolling image gallery). However, they are much less likely to crash due to running out of video memory. We should be able to improve this strategy in #154 by trying to deallocate before creating a new layer instead.

In the long run, we should load and upload images asynchronously to avoid dropping frames.
I am writing an app that loads more than 400 PNGs into a scroll view.

But, it seems that VRAM is out of memory because too many images are being loaded.

I want to unload images outside the rendering range of the scroll view.
Is there a way to know the display status of children elements in scroll view?

Hi, thank you for your work on this project!

I am trying to run one of the examples in the repository, and I get a custom build error:
```bash
$ cargo run --example todos
   Compiling x11 v2.18.1
   Compiling crc32fast v1.2.0
   Compiling sluice v0.4.2
   Compiling idna v0.2.0
   Compiling ryu v1.0.2
   Compiling num-traits v0.2.11
   Compiling num_cpus v1.11.1
   Compiling crossbeam-utils v0.7.0
error: failed to run custom build command for `x11 v2.18.1`

Caused by:
  process didn't exit successfully: `/home/real/temp/iced/target/debug/build/x11-e5150e0e5a5a6cee/build-script-build` (exit code: 101)
--- stderr
thread 'main' panicked at 'called `Result::unwrap()` on an `Err` value: Failure { command: "\"pkg-config\" \"--libs\" \"--cflags\" \"x11\" \"x11 >= 1.4.99.1\"", output: Output { status: ExitStatus(ExitStatus(256)), stdout: "", stderr: "Package x11 was not found in the pkg-config search path.\nPerhaps you should add the directory containing `x11.pc\'\nto the PKG_CONFIG_PATH environment variable\nNo package \'x11\' found\nPackage x11 was not found in the pkg-config search path.\nPerhaps you should add the directory containing `x11.pc\'\nto the PKG_CONFIG_PATH environment variable\nNo package \'x11\' found\n" } }', src/libcore/result.rs:1165:5
note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace.
```

Environment information:

```bash
$ rustc --version
rustc 1.40.0 (73528e339 2019-12-16)

$ lsb_release -a
No LSB modules are available.
Distributor ID:	Ubuntu
Description:	Ubuntu 18.04.3 LTS
Release:	18.04
Codename:	bionic
```
Ubuntu 18 is a very mainstream distribution, and I don't have anything special about my system. Therefore I assume many other people might have the same issue. 

Are there any special things I need to install before being able to run the examples on my system? If so, is there a place I can read about it? I couldn't find any information about prior requirements in the main README.

Might be related to:
- https://github.com/hecrj/iced/issues/119
- https://github.com/hecrj/iced/issues/75
There is currently no way to style individual parts of text within a text block -- you can only change the style of the entire block.

I've seen a couple different ways of doing this on the user end:
- Markup in strings, like in Pango/GTK+ (https://developer.gnome.org/pygtk/stable/pango-markup-language.html)
- Setting state when inserting text into the field, like in Java/Swing (http://www.java2s.com/Code/Java/Swing-JFC/StyledText.htm)

From a user perspective, I personally prefer markup strings in the text.

`glyph_brush` already supports text styling using [`glyph_brush_layout`](https://docs.rs/glyph_brush_layout/0.1.8/glyph_brush_layout/), so implementation should just be a matter of parsing the text in whatever format to a `Vec<SectionText>`.
I finally came around to implementing the texture atlas for images. I'm using guillotiere to manage the atlas space. In the current implementation the atlas only grows if necessary. It never shrinks.
I also wrote a small build script that compiles shaders at compile time using shaderc. Manually compiling shaders during development was super annoying.
Let me know what you think.
Unfortunately, whenever I try to run any example, a window pops up then immediately closes with the following assertion failure

```
thread 'main' panicked at 'assertion failed: suf.supports_queue_family(&adapter.raw.queue_families[0])', /home/{USER}/.cargo/registry/src/{...}/wgpu-native-0.4.2/src/device.rs:2065:9
note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace.
```

I'm assuming this has to do with the environment I'm running this in? I'm using Linux Manjaro with a GTX 1080 and a Coffee Lake CPU.
This PR updates `winit` to `0.20` in `iced_winit`.

There is currently an issue on macOS where the `CursorMoved` event is reporting a logical coordinate instead of a physical one (https://github.com/rust-windowing/winit/issues/1371).

# Pending work
- [x] https://github.com/rust-windowing/winit/issues/1371
- [x] https://github.com/rust-windowing/winit/pull/1378
Hey everyone ! 

In order for the new website to happen, we need to define some sort of branding for Iced. Since this should be a community effort, here are my first thoughts / mind map of how I reasoned about the logo and color scheme. 

# Logo 

## What is Iced ? 

* GUI Framework
* Platform-agnostic
* Written in Rust  
* Elm Architecture

## What does iced mean ? 

* Ice
	* Ice Cubes
	* Snowflakes
	* Mountains / Glacier
	* Icebergs
	* Sharp edges
	* Mostly light-blue colors

* Iced Coffee 
    * Ice cubes
    * Brown / Orange colors

* Modern GUI / Elm
	* Font has to be sans-serif. Having serif makes everything look automatically older. 
	* Flat
	* Square-ish shape
	* Draft / Prototyping

* Rust
	* Light-Orange color (Github) and black color
	* "Jagged R" Rust Logo : maybe we can have a slight reminder of Rust in the shape of the logo ?  

## Possible inspiration 

This [whole article](https://amethyst.rs/brand/) on the amethyst.rs website 
![Logo of Flutter](https://external-content.duckduckgo.com/iu/?u=https%3A%2F%2Fupload.wikimedia.org%2Fwikipedia%2Fcommons%2F1%2F17%2FGoogle-flutter-logo.png&f=1&nofb=1)
![Logo of Electron](https://external-content.duckduckgo.com/iu/?u=https%3A%2F%2Fi.ytimg.com%2Fvi%2F8YP_nOCO-4Q%2Fmaxresdefault.jpg&f=1&nofb=1)
![Logo of Elm](https://cdn-images-1.medium.com/max/1200/1*bwSiWbEBA7IyZNyqu2bgBQ.png)
![Logo of OrbTX](https://camo.githubusercontent.com/90e9e0e34b162c9567679a824af54681b8c74764/68747470733a2f2f6769746c61622e7265646f782d6f732e6f72672f7265646f782d6f732f6173736574732f7261772f6d61737465722f6c6f676f732f6f7262746b2f6c6f676f5f6461726b2e706e67)
![Logo of Amethyst](https://amethyst.cdn.prismic.io/amethyst%2F46fcadd9-f936-4959-ae26-5b1927d07a45_logo-standard.svg)
![image](https://user-images.githubusercontent.com/12024408/71786818-73e1a880-3010-11ea-8992-ee5d5e04e8db.png)

# Colors

We need to define :

* One main color - 3 shades
* One "accent" color - 3 shades
* One shade of light color
* One shade of dark color
  
In my opinion, it is obvious that Iced's main color should be light-blue.
White could also largely be used as a reminder of snow. 
I'm thinking a slightly brown dark color could be used for texts. 

I'm undecided for the accent : I like light-green together with light-blue, though I think an orange accent would make for a better result because they are often used as opposite colors in video games. Take Rocket League for example. I also tried brown/orange as an alternative.

# My suggestions 

So here are my 2 cents. I'm terrible at graphic design (I'm just an engineer) and this is of course a draft that I hope someone will take further.  

For the color scheme, I took images of a glacier and extracted some colors. This would be my "main color" suggestion. 
I took another image of an emerald glacier and extracted shades of green - I think it's called teal. 
Finally, I got an image of an iced coffee and exrtacted shades of orange / brown. 

![image](https://user-images.githubusercontent.com/12024408/71786756-814a6300-300f-11ea-98e9-777222939beb.png)

As per the logo, I think I'm on to something. These are the result of my first iteration. I'm willing to add some sort of gradient to the ice cubes when I can figure out how to do that in Inkscape. 

![image](https://user-images.githubusercontent.com/12024408/71786743-5d871d00-300f-11ea-9f87-9b5d5b85d36e.png)

I think it's simple enough. A cool logo should never be complex as evidenced by the "possible inspirations" part, and should work in a monochrome context (both black and white), which I think is kind of the case here. 

What are your thoughts ? Any help welcome! :pray:


My attempt at making `Svg` rasterization async. There are two problems with this right now:

1. The renderer does not know that a new texture finished rasterizing and therefore does not redraw the `Svg` widget unless it is resized or the mouse is moved.

2. `usvg::Tree` is `!Send`. Right now my implementation caches a loaded svg file as a `Tree` and as a xml string that can easily be passed to the rasterization thread. This is not a big issue but a little more overhead and memory use than only caching the `Tree`.

[Related discussion on Zulip](https://iced.zulipchat.com/#narrow/stream/213316-general/topic/svg)
It would be nice if we can close/minimize window to tray instead of closing the entire application, like https://electronjs.org/docs/api/tray in Electron. I think it might be related to https://github.com/hecrj/iced/issues/27. 
