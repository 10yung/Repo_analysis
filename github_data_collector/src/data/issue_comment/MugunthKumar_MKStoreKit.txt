I am trying to translate the class into Swift to get rid of the regularly occurring issues and to eventually share it here for the hopeful benefit of everyone. Though, I am now stuck at:
```
let productIdentifier = receipt["product_id"], let expiresDateMs = receiptDictionary["expires_date_ms"] { // renewable subscription
                        let previouslyStoredExpiresDateMs = self.purchaseRecord?[productIdentifier];
                        if previouslyStoredExpiresDateMs==nil{
                            self.purchaseRecord?[productIdentifier] = expiresDateMs;
                            purchaseRecordDirty = true;
                        } else if Double(truncating: expiresDateMs) > Double(truncating: previouslyStoredExpiresDateMs!) {
                            self.purchaseRecord?[productIdentifier] = expiresDateMs;
                            purchaseRecordDirty = true;
                        }
                    }
                }
```
in function startValidatingReceiptsAndUpdateLocalStore, given the fields in [https://developer.apple.com/documentation/appstorereceipts](https://developer.apple.com/documentation/appstorereceipts) do not even include field product_id that is needed to access the purchase record in the line soon below.
First I do not know how the original Objective_C library works, given that field never arrives, second I would like to know with what I may substitute that value to index self.purchaseRecord.

Thanks, Fabrizio
When I include the MKStoreKit files in my project I get error:

<img width="819" alt="Mugutntu" src="https://user-images.githubusercontent.com/2322827/67659713-51227c00-f95d-11e9-8b04-7424bdd5dba4.png">

reporting all `extern NSString *const` as:
> Unknown type name 'NSString'.
That does not stop compilation from completing, but it is still an hinderance. Why does it happen and how to fix it?
I have received _startValidatingAppStoreReceiptWithCompletionHandler_ error from 7 users in 2 hours that never happened before. What is going on?
On line:  if ([[NSDate date] timeIntervalSince1970] > [expiresDateMs doubleValue]) {

The expiresDateMs is milliseconds but the first one is in seconds.  

I've implemented **MKStoreKit** successfully and get notifications successfully after purchasing.
But I'm not able to get transactionID & receipt from parameter `note`.

```
[[NSNotificationCenter defaultCenter] addObserverForName:kMKStoreKitProductPurchasedNotification
      object:nil
       queue:[[NSOperationQueue alloc] init]
  usingBlock:^(NSNotification *note) {
      NSLog(@"Purchased/Subscribed to product with id: %@", [note object]);
  }];
```
To promote in-app purchases on your product page, your app needs to support a delegate method in SKPaymentTransactionObserver.
I faced with incorrect behaviour (as i think):
I bought non-consumable item.
I change apple account (new account doesn't have that non-consumable item).
I check _availableProducts_ and it have not that non-consumable item.

I think it's because saving and restoration of _purchaseRecord_.
When I just comment restoration of _purchaseRecord_ it works fine.
I have 3 subscription. now I have bought 1 subscription in my signup screen using my itunes email id but  now I open once again signup then i want to check which product is purchased using same itunes email.How can I check which product is purchased in view did load method?
UIAlertView is deprecated in iOS 8.0, as it's superseded by UIAlertController.

Hence changed the code in 'initiatePaymentRequestForProductWithIdentifier:' to switch between UIAlertView and UIAlertController in case the latter exists. Also suppressed the deprecation warning for UIAlertView:

```ObjC
  if (![SKPaymentQueue canMakePayments]) {
#if TARGET_OS_IPHONE
      if ([UIAlertController class]) {
          // iOS 8.0+
          UIAlertController *alert = [UIAlertController alertControllerWithTitle:NSLocalizedString(@"In App Purchasing Disabled", @"")
                                                                         message:NSLocalizedString(@"Check your parental control settings and try again later", @"")
                                                                  preferredStyle:UIAlertControllerStyleAlert];
          
          UIAlertAction *cancelAction = [UIAlertAction actionWithTitle:NSLocalizedString(@"Okay", @"")
                                                                 style:UIAlertActionStyleCancel
                                                               handler:nil];
          
          [alert addAction:cancelAction];
          
          // Show Alert:
          [[[[UIApplication sharedApplication] keyWindow] rootViewController] presentViewController:alert
                                                                                           animated:YES
                                                                                         completion:nil];
      }
      else {
          // Before iOS 8.0:
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
          [[[UIAlertView alloc] initWithTitle:NSLocalizedString(@"In App Purchasing Disabled", @"")
                                      message:NSLocalizedString(@"Check your parental control settings and try again later", @"")
                                     delegate:self
                            cancelButtonTitle:NSLocalizedString(@"Okay", @"")
                            otherButtonTitles:nil] show];
#pragma clang diagnostic pop
      }
#elif TARGET_OS_MAC
    NSAlert *alert = [[NSAlert alloc] init];
    alert.messageText = NSLocalizedString(@"In App Purchasing Disabled", @"");
    alert.informativeText = NSLocalizedString(@"Check your parental control settings and try again later", @"");
    [alert runModal];
#endif
    return;
  }
```
Memory leaks [in this place](https://github.com/MugunthKumar/MKStoreKit/blob/master/MKStoreKit/MKStoreKit.m#L215).

Because 
`- (void)productsRequest:(SKProductsRequest *)request didReceiveResponse:(SKProductsResponse *)response` will be executed in concurrence thread and no `@autorelease` in body of method.

It easy to test, just add break on objc_autoreleaseNoPool.
Read [here](http://stackoverflow.com/questions/10003962/breakpoint-pointing-out-objc-autoreleasenopool) how to do it.
 
