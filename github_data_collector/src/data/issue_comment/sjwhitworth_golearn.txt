Mish is a new novel activation function proposed in this [paper](https://arxiv.org/abs/1908.08681).
It has shown promising results so far and has been adopted in several packages including:

- [TensorFlow-Addons](https://github.com/tensorflow/addons/tree/master/tensorflow_addons/activations)
- [SpaCy (Tok2Vec Layer)](https://github.com/explosion/spaCy)
- [Thinc - SpaCy's official NLP based ML library](https://github.com/explosion/thinc/releases/tag/v7.3.0)
- [Echo AI](https://github.com/digantamisra98/Echo)
- [CNTKX - Extension of Microsoft's CNTK](https://github.com/delzac/cntkx)
- [FastAI-Dev](https://github.com/fastai/fastai_dev/blob/0f613ba3205990c83de9dba0c8798a9eec5452ce/dev/local/layers.py#L441)
- [Darknet](https://github.com/AlexeyAB/darknet/commit/bf8ea4183dc265ac17f7c9d939dc815269f0a213)
- [Yolov3](https://github.com/ultralytics/yolov3/commit/444a9f7099d4ff1aef12783704e3df9a8c3aa4b3)
- [BeeDNN - Library in C++](https://github.com/edeforas/BeeDNN)
- [Gen-EfficientNet-PyTorch](https://github.com/rwightman/gen-efficientnet-pytorch)
- [dnet](https://github.com/umangjpatel/dnet/blob/master/nn/activations.py)

All benchmarks, analysis and links to official package implementations can be found in this [repository](https://github.com/digantamisra98/Mish) 

It would be nice to have Mish as an option within the activation function group.

This is the comparison of Mish with other conventional activation functions in a SEResNet-50 for CIFAR-10: 
![se50_1](https://user-images.githubusercontent.com/34192716/69002745-0de37980-091b-11ea-87da-ac8d17c79e07.png)



Since December, 2018, both "[gonum/blas](https://github.com/gonum/blas)" and "[gonum/matrix](https://github.com/gonum/matrix)" have been deprecated and migrated to "[gonum/gonum](https://github.com/gonum/gonum)". 

* `f22b278` (2018-12-08) [blas: add deprecation notice](https://github.com/gonum/blas/commit/f22b278b28ac9805aadd613a754a60c35b24ae69)
* `c518dec` (2018-12-09) [matrix: add deprecation notice](https://github.com/gonum/matrix/commit/c518dec07be9a636c38a4650e217be059b5952ec)

As "[go.mod](https://github.com/gonum/gonum/commit/ff99a9821f0fc7e0d40749b5148e54a57ea97d6e)" (at https://github.com/gonum/gonum) declares

```
module gonum.org/v1/gonum
```
this PR includes the changes to use `"gonum.org/v1/gonum"` as import paths in
- knn/knn.go
- linear_models/linear_regression.go
- metrics/pairwise/chebyshev.go
- metrics/pairwise/cranberra.go
- metrics/pairwise/manhattan.go

This is for ID3DecisionTrees Specifically.
If a node has only one child which leads to the leaf node then that leaf node is not set as type 1 (leafNode). I do not know if it is just for me. But it does seem so.
This is true even if that leaf node is connected to other parent which have more than one child.
The current model Save() feature stores models to a file with the given filename. Would it be possible to support a slightly different interface that takes an io.Writer to save or io.Reader to load? This would enable use cases such as saving models to S3 buckets or databases without having to go via the filesystem first. 

Happy to work on a PR if you'd consider it. 
I was experimenting with the randomforest in the ensemble package:
The code (a little bit simplified) looks like this:

```
forest := ensemble.NewRandomForest(trees, features)
forest.Fit(trainData)
predictions, err := forest.Predict(testData)
....
err = forest.Save(modelFile)
....
currentForest := ensemble.NewRandomForest(trees, features)
err = currentForest.Load(modelFile)
predictionsCurrent, err := currentForest.Predict(testData)

fmt.Println(currentForest)
```


When i save the forest a file is made. But when i load the Forest and print it the BaggedModel() is empty.
I was first recognizing it when i tried to load the model and make predictions with the same TestData -> i think there should be the same accuracy but its not.
Also the Confusion Matrix shows 2 fields with NaN.

Is there another way to save and restore the model or am i doing anything wrong?
I'm trying to create a Test instance without CSV but I don't understand some functions in base.

My structure is like:

> 1,0,out

"out" dont matter for now, I only want to create the initial 1,0 .

Already I do this:

```
testData := base.NewStructuralCopy(trainData) // I need use the original structure 
testData.Extend(1) // Only one item test (this create "0,0,default")

spec := base.ResolveAttributes(testData, testData.AllClassAttributes())[0] // Work
testData.Set(spec, 1, []byte{1}) // Dont Work
spec1 := base.ResolveAttributes(testData, testData.AllClassAttributes())[1]
testData.Set(spec1, 1, []byte{0})
```

The error is: "panic: Tried to call set() with 1 bytes, should be 8"

Thank you
Is there a function that can easily transform a slice or a map to an instance, or to somehow directly use raw data for the prediction algorithm?
Panics should not be part of a library. They cause unnecessary core dumps, and quit the parent process, which can be dangerous if used in production. There's several places where errors could be bubbled up, but are instead caught by panics