Command: `devd -w . :8080` (or similar) does proxy the Webservice, but does not recognize changes in the directory. Running `devd -l .` in the same directory works with LiveReload of changes.

Running with -w. --debug shows no change detected when changing files, while -l directly detects changes.

devd version 0.9
@cortesi I love your `modd`, I think is the best.

Now I'd like to fall in love with `devd` but nothing.

I cannot use it on Windows 10.

Using the below code in `modd.conf`:

```conf
rendered/*.css ./rendered/*.html {
  daemon: devd -m ./rendered
}

**/* {
  daemon: devd -l http://localhost:3000
}
```

nothing happens in my browser.

Using it with `devd -ol .` works good.
This is a first draft that implements websocket proxying. I'm not sure it works very well, but it's a first try.
In particular, I'm interested in `-l` but still dying on SIGHUP.
Use-case: asynchronous starting and stopping of devd through zsh zpty.
When zsh's zpty exits (`zpty -d name`), it sends a SIGHUP to the backgrounded process.
I'm perfectly fine with the built-in "anything under the root directory" live reloading, but would rather avoid having to explicitly use pkill when I could simply have an on-down hook.

Alternatively, maybe add a flag that overrides `-L|-l|-w`'s special treatment of SIGHUP (so I'd use, for example, `-lh`, where `h` would stand for `HUP`.
Can't find an option to log the POST body. Is there one? If not can it be added?
the following code is borrowed from [this example](https://github.com/alecthomas/kingpin/blob/master/_examples/curl/main.go)..

I made a few minor changes, but I'm not familiar with the Go language.. so the syntax may be need some correction.

it could be applied to [devd.go](https://github.com/cortesi/devd/blob/master/cmd/devd/devd.go)..

```text
type HTTPHeaderValue http.Header

func (h HTTPHeaderValue) Set(value string) error {
  parts := strings.SplitN(value, ":", 2)
  if len(parts) != 2 {
    return fmt.Errorf("expected 'HEADER:VALUE' got '%s'", value)
  }
  (http.Header)(h).Add(parts[0], parts[1])
  return nil
}

func (h HTTPHeaderValue) String() string {
  return ""
}

func (h HTTPHeaderValue) IsCumulative() bool {
  return true
}

func HTTPHeader(s kingpin.Settings) (target *http.Header) {
  target = &http.Header{}
  s.SetValue((*HTTPHeaderValue)(target))
  return
}

hdrs := HTTPHeader(kingpin.Flag("header", "Add HTTP response header").Short('H').PlaceHolder("HEADER:VALUE"))

if *cors {
  hdrs.Set("Access-Control-Allow-Origin", "*")
}
```

the intention is to accept multiple CLI `--header="name:value"` options

ex:
```text
devd --header="Strict-Transport-Security:max-age=0" --header="Cache-Control:max-age=0" --port=443 --all --tls .
```
Hello,
When serving a page, is there a way to have the client IP address ?
even with --debug or -Headers, I don't see it ;)
Thanks
I understand that you can't fix the cert, but if less experienced developers use `devd -s` they might be confused by it.

I suggest that if you have a `-s` flag, and are serving with a fake local cert, add something like this to your info logging:

```
$ devd -ols .
17:19:50: Route / -> reads files from .
17:19:50: Listening on https://devd.io:8000 (127.0.0.1:8000)
17:19:50: If you get a "Your connection is not private" warning, click: Advanced > Allow
```

(had someone ask me about this, I thought putting it into the tool would be useful)
I'm invoking `devd` with the command below and accessing my application over `https://devd.io/`.  I noticed in my application that `X-Forwarded-Proto = http` - shouldn't it be `https` since I am forwarding `/=https://127.0.0.1:3000/` ?

```
devd --port=443 \
	--cert=_certs/devd.io/bundle.pem \
	/=https://127.0.0.1:3000
```

Changing the following line in `reverseproxy.go` to `req.Header.Set("X-Forwarded-Proto", target.Scheme)` results in `X-Forwarded-Proto` being set to `https` (it works for my use-case but I'm not sure if this is the right fix?).

https://github.com/cortesi/devd/blob/93164c9b170e00b808d34f54ff109d91b3e4d18b/reverseproxy/reverseproxy.go#L80
example invocation
```
devd -A0.0.0.0 ./
```
example request from a different host
```
curl http://172.17.0.2:8000/index.html
```
this causes a 301 response. I expected it to return a 200 response with the file `index.html`. 

is there a way to setup devd so it returns a 200 response?

context: my client doesn't follow redirects atm. i am using devd 0.8

edit: this looks like the relevant code, https://github.com/cortesi/devd/blob/220423dc2680375a863127dbd9c1c5db4331d011/fileserver/fileserver.go#L451 however i don't see any way to disable this behavior.