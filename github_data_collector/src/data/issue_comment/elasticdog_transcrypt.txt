At the moment, the crypt functions are initialized and permanently set
to whatever the version of transcrypt the user is using contains. This
means updates to these scripts are never propagated out to existing
users.

This commit moves the crypt functions into transcrypt itself, which
should allow for more transparent updates to the scripts to be
propagated out to users.
As far as I can tell, there's no code path that updates the transcrypt scripts stored in .git/crypt, and these files are only updated on initialization.

This is problematic, as changes to these scripts are never propagated out to repositories with transcrypt already initialized.

In https://github.com/elasticdog/transcrypt/commit/c8e4f7279972555282a74c96d7ce48fdbc930083 the method for generating the salt was modified, and is not backwards compatible with the previous method. As a result, users who initialized a repository with transcrypt previous to this commit will be generating different salts, and thus be producing different output than those who initialized the repository after this commit.

For now, the work around is to have all users run `transcrypt -u` and rerun `transcrypt`, but this is a very tedious exercise to orchestrate across any organization of any size, and is prone to error.

transcrypt should have some facility to update these files automatically and transparently to users.

The most straightforward approach I can think of to fix this in transcrypt is to have it update these files every time it is run in a git repository, but that might be overkill.

A better solution might be to have these files be replaced with either symlinks or simple wrappers that call back out to transcrypt, and add this functionality in as a sub-module to the transcrypt program. This way these functions would always be tied in to the correct version expected by the current version of transcrypt.
When you merge branches containing transcrypt-encrypted files, if the files have conflicts the resulting "merged" file produced by Git for manual resolution ends up as a real mess, mostly or entirely full of the encrypted text which cannot be sensibly merged.

The root problem seems to be that git does not run the smudge/textconv filter on all the BASE, LOCAL, REMOTE conflicting versions of files before attempting a three-way merge, and instead attempts the merge using at least one – and maybe all – of the encrypted versions of these files. E.g. the encrypted content as available from `git show :1:FILENAME` and `git show :2:FILENAME` etc mid-merge.

I have not been able to find a workaround just within Git, and have instead added a custom "crypt" merge driver to handle this situation.

Here is a PR against our fork of Transcrypt as an example: https://github.com/ixc/transcrypt/pull/1

This change isn't yet fully tested, and is written against a fairly old version of transcrypt.

Let me know if I should bring it up to date and submit a PR here directly to add the "crypt" merge driver to the latest version of transcrypt?
I think it important to be more upfront about issues with rebasing like those brought up in #8. These limitations should be clearly stated in the README, so fools like myself don't almost push all their secrets in plaintext. 
Hi, thanks for your great work on *transcrypt*! We have found it really useful.

We are considering using *transcrypt* for a scenario it wasn't designed for, where we want to have multiple "contexts" of secret file within the one repository with a different passphrase for each one. 
Basically, we have some files in a repo that should be encrypted but available to user group A, and another set of files that should only be available to user group B. 

This PR contains a **very** rough but working proof of concept with *transcrypt* updated to support this use case, where different security "contexts" can be specified by setting a `CONTEXT` environment variable before running the script.

**If you are at all interested in adding such a feature please let me know here, along with any thoughts about how you would prefer it to be built.** We can work on improving the implementation if you think it might get included in the official version later?

The implementation here so far is a quick and dirty hack that duplicates all the git hook scripts for each named context, so that each one knows about its particular settings.

Despite being an awful hack it shows that the process works fairly well, with just those files for which the user has set the appropriate context & passphrase decrypted, and the rest left as they were.

Example usage:

- Choose a name for a non-default encryption "context" e.g. "super-secret"
- Init transcrypt in default and "super-secret" contexts:
  ```bash
  $ transcrypt
  # follow prompts

  $ CONTEXT=-super-secret transcrypt
  # follow prompts, note leading dash (-)
  ```
- Set patterns in `.gitattributes` as usual for default decryption, and with the suffix "-super-secret" for that additional context:
    ```
    # Contents of .gitattributes
    secret.txt filter=crypt diff=crypt
    super-secret.txt filter=crypt-super-secret diff=crypt-super-secret
    ```
- Write your secret files, `git add` them, and commit.
- Note the different passphrases for default and additional contexts
  ```bash
  $ transcrypt --display

  $ CONTEXT=-super-secret transcrypt --display
  ```
- Clone repo elsewhere, and confirm that you can or cannot see file contents as you apply some combination of the init commands as printed by the display commands above.

in wsl , windows subsystem linux,it now work
Defalult encrypt is always warning,plase add -pbkdf2 -iter 1024 to update

openssl enc -aes-256-cbc -md sha512 -pbkdf2 -iter 1024 -salt -in InputFilePath -out OutputFilePath

follow by https://crypto.stackexchange.com/questions/20941/why-shouldnt-i-use-ecb-encryption
Using OpenSSL 1.1.1 (in my case, in Git for Windows, which uses `OpenSSL 1.1.1a  20 Nov 2018`), the `clean` script constantly leads to `git` commands printing out the following warning:
```
*** WARNING : deprecated key derivation used.
Using -iter or -pbkdf2 would be better.
```
The transcrypt script needs the `column` command to run. On newer Ubuntu systems, this is provided by the `bsdmainutils` package. It should be added to the requirements list.
I'm using codefresh to build Docker images (including the `.git` directory), with an entrypoint script that configures the git repo for transcrypt with a password from the environment, to decrypt secret files at runtime.

transcrypt thinks the git repo is dirty:

```bash
# transcrypt -c "${TRANSCRYPT_CIPHER:-aes-256-cbc}" -p "$TRANSCRYPT_PASSWORD" -y
transcrypt: the repo is dirty; commit or stash your changes before running transcrypt
```

When I run the `git diff-index` command that transcrypt uses internally (minus the `--quiet` arg), it seems to return some odd results:

```bash
# git diff-index HEAD -- | tail                                                                                                   
:100644 100644 3d6e0e93c2bfef67162836b2f0b5ad24c526929e 0000000000000000000000000000000000000000 M      staticroot/apple-touch-icon-precomposed.png        
:100644 100644 9089ef7ffea1efe2de79b49b5e6a5856360de4d6 0000000000000000000000000000000000000000 M      staticroot/apple-touch-icon.png                    
:100644 100644 7b74f8caf013ba164ca9049f7bd4eea0555ff720 0000000000000000000000000000000000000000 M      staticroot/favicon.ico                             
:100644 100644 5d00a90141a920a278e2a8239e560b7ea395a1db 0000000000000000000000000000000000000000 M      staticroot/humans.txt                              
:100644 100644 214e4119653f9c6a4c48cd0ebb06a6754f00f62b 0000000000000000000000000000000000000000 M      staticroot/robots.txt                              
```

But the repo *is* clean, cloned and built by codefresh:

```bash
# git status                                                                                                                      
HEAD detached at 153c57c                                                                                                                                   
nothing to commit, working directory clean                                                                                                                 
```

Strangely, after running `git status`, transcrypt suddenly agrees that the repo is clean and agrees to configure the repo:

```bash
# git diff-index HEAD -- | tail                                                                                                   

# transcrypt -c "${TRANSCRYPT_CIPHER:-aes-256-cbc}" -p "$TRANSCRYPT_PASSWORD" -y
The repository has been successfully configured by transcrypt.                                                                                             
```

Is there something wrong with the way codefresh is cloning the repo before it builds the Docker image?

Is there a more reliable way transcrypt can detect a dirty repo (as reported by `git status`)?
