The following error occurred

boolean trueVar=true
$var:trueVar toString #true

boolean falseVar=false
$var:falseVar toString #UNCAUGHT EXCEPTION: toString

Is it a bug? Or is my implementation incorrect?
Hi all!

As the title says, util/exception.sh shows stack trace as expected but don't exit on `Ctrl+C`.

The script just keeps running, just as if I have pressed `Enter`.

Is this a bug? A incorrect implementation of my part?
This stackoverflow post outlines a different method of using namedParameters than the readme and seems to be correct. Readme could be updated to match.

https://stackoverflow.com/questions/6212219/passing-parameters-to-a-bash-function
Hi there !

I moved the IT example as discussed with @niieani 
To test :

```bash
$ git clone -b moved_it ...
$ cd example
$ bash intervaltree.sh
```

example result :

```bash
IntervalTree.InsertInterval
0 2 e0 provided

IntervalTree.InsertInterval
1 3 e1 provided

IntervalTree.InsertInterval
1 4 e2 provided

IntervalTree.InsertInterval
5 3 e3 provided

IntervalTree.InsertInterval
1 7 e4 provided

IntervalTree.SearchOverlaps
IntervalTree.Overlaps ( 1 2 ) <-?-> ( 0 2 ) true
IntervalTree.Overlaps ( 1 2 ) <-?-> ( 1 3 ) true
IntervalTree.Overlaps ( 1 2 ) <-?-> ( 1 4 ) true
IntervalTree.Overlaps ( 1 2 ) <-?-> ( 5 3 ) false
IntervalTree.Overlaps ( 1 2 ) <-?-> ( 1 7 ) true

IntervalTree.SearchOverlaps
IntervalTree.Overlaps ( 5 6 ) <-?-> ( 0 2 ) false
IntervalTree.Overlaps ( 5 6 ) <-?-> ( 1 3 ) false
IntervalTree.Overlaps ( 5 6 ) <-?-> ( 1 4 ) false
IntervalTree.Overlaps ( 5 6 ) <-?-> ( 5 3 ) false
IntervalTree.Overlaps ( 5 6 ) <-?-> ( 1 7 ) true

IntervalTree.PrintIntervals
0 2 e0
1 3 e1
1 4 e2
5 3 e3
1 7 e4

```

regards
Automatically load `.env` files from the current working directory:

```bash
import util/dotenv
```

It can be called to load additional files, e.g.

```bash
dotenv /path/to/private/.env
```
I'm making 'float' primitive extension.

The problem is that:
      I want to implement it by using integerArray so that we can calculate easily.
      But I can't use integerArray as 'fingerprint' uses some alphabets.
      I want to change the base `__primitive_extension_declaration` using only numbers.

If it is a problem, I'll use 'array' instead of 'integerarray'.
For now, `README.md` is the only reference of this framework(except source codes themselve.)
I wonder if we gather all knowledges and make a wiki for tutorial, reference, etc.
I've spent so much time to read code in order to understand the framework.
It's really good experience for me and I enjoy reading, but some people doesn't like it.
(and also, I want reference while making my project)

I'm sure it's not a good time to start because #45 (the RFC for 3.0) is on the way.
But I think it'll take long time to release 3.0 so that it's better to have wiki of version 2.0

(I can add Japanese references)
when I execute this code, most of part goes good, but `this should not be displayed` were
also printed out.
I have no idea for this, so note here.
[This is just a mention for people who is trying to translate/ translating into Japanese]
[日本語訳作業をしている人/しようと思っている人へのメモです]

This is not a issue about bug-report, feature, and something like that.
バグレポートや新しい機能に関するissueではありません。

--- Japanese
oo-frameworkのREADMEを日本語訳しています。
他の人がやってなければ日本語訳やろうかな...?と思っている方いましたら一緒にやりましょう！
大体の部分は翻訳が終わり、細かい訳と手直し作業が残っています。
自分はまだ英語勉強中な身なのでおそらくより良い訳があると思うのです...
協力してくださる方、待っています！（実は少し詰まってたりするので）

--- English
Hi, I'm translating README into Japanese these days.
If you're thinking of translation for Japanese, why not doing together!
It's almost close to end, but I have to check the details and fix mistakes.
As I'm just a student learning English at school, I think there should be better translations.
I'm glad if someone join me and could do great job together! ( actually, I have some problem so that my work is stopped now)

There is a problem when trying to assign array by value to any variable after initialization. I prepared code sample to demonstrate my issue. To my knowledge every case should work exactly the same. What am I missing here?

```shell
#!/usr/bin/env bash

source "$( cd "${BASH_SOURCE[0]%/*}" && pwd )/lib/oo-bootstrap.sh"

import util/log
import util/class

class:MyIssue() {
  public string someMessage
  public array someMessageLines

  MyIssue.someStuff() {
    array someMessageLines="$(this someMessage toArray)"
    $var:someMessageLines
    if [[ $($var:someMessageLines length) != 0 ]]; then echo 'This stuff worked '; fi
  }
  MyIssue.someStufff() {
    array someMessageLines
    $var:someMessageLines="$(this someMessage toArray)"
    $var:someMessageLines
    if [[ $($var:someMessageLines length) != 0 ]]; then echo 'This stufff worked '; fi
  }
  MyIssue.someStuffff() {
    this someMessageLines="$(this someMessage toArray)"
    this someMessageLines
    if [[ $(this someMessageLines length) != 0 ]]; then echo 'This stuffff worked '; fi
  }
} 
Type::Initialize MyIssue

MyIssue my
$var:my someMessage = 'automatic
error
handling
with
exceptions
'

$var:my someStuff
echo '----------------'
$var:my someStufff
echo '----------------'
$var:my someStuffff
```

