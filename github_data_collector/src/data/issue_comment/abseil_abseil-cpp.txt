I get the error below when building with `-std=c++17`. c++14 works find. Is there a way to pass that to the abseil build, or some other workaround enabling use of c++17?

`dyld: lazy symbol binding failed: Symbol not found: __ZN4absl8ByStringC1ENSt3__117basic_string_viewIcNS1_11char_traitsIcEEEE`
Fixes #604
When building the absl_strings static library, libtool emits a warning, which is in fact something that breaks later eventually: `/Library/Developer/CommandLineTools/usr/bin/libtool: warning same member name (escaping.o) in output file used for input files`

The gist is that you can't have two files in a MacOS static library with the same base filename, as one will override the other. Basically, Apple's libtool crops the directory name away, only to keep the base filename.

This breaks eventually deep into gRPC's build system, thanks to sanity checks provided by NodeJS' build system: grpc/grpc#21702

Suggest adding a suffix to this duplicated filename to make Apple's libtool happy: https://github.com/abseil/abseil-cpp/blob/b3aaac8a37c467a1125c794196caa90d0957bdc3/absl/strings/CMakeLists.txt#L41

On an nvidia Xavier the cmake variable `CMAKE_SYSTEM_PROCCESSOR` returns `aarch64`. This makes ARM platform detection fail here
https://github.com/abseil/abseil-cpp/blob/29235139149790f5afc430c11cec8f1eb1677607/absl/copts/AbseilConfigureCopts.cmake#L14-L22

which in turn causes compilation failures with absl::random. I can get around the problem by doing
```diff
diff --git a/absl/copts/AbseilConfigureCopts.cmake b/absl/copts/AbseilConfigureCopts.cmake
index b442646..4e55754 100644
--- a/absl/copts/AbseilConfigureCopts.cmake
+++ b/absl/copts/AbseilConfigureCopts.cmake
@@ -11,7 +11,7 @@ if("${CMAKE_SYSTEM_PROCESSOR}" STREQUAL "x86_64")
   else()
     set(ABSL_RANDOM_RANDEN_COPTS "${ABSL_RANDOM_HWAES_X64_FLAGS}")
   endif()
-elseif("${CMAKE_SYSTEM_PROCESSOR}" STREQUAL "arm")
+elseif("${CMAKE_SYSTEM_PROCESSOR}" STREQUAL "arm" OR "${CMAKE_SYSTEM_PROCESSOR}" STREQUAL "aarch64" )
   if ("${CMAKE_SIZEOF_VOID_P}" STREQUAL "8")
     set(ABSL_RANDOM_RANDEN_COPTS "${ABSL_RANDOM_HWAES_ARM64_FLAGS}")
   elseif("${CMAKE_SIZEOF_VOID_P}" STREQUAL "4")
```

but I am not entirely sure if it's the best way of going about this. Anyone else get this issue?
It is not possible to load RtlCaptureStackBackTrace at static init time in UWP.
CaptureStackBackTrace is the public version of RtlCaptureStackBackTrace.

Fix: #595 
It is not possible to load RtlCaptureStackBackTrace at static init time in UWP.
CaptureStackBackTrace is the public version of RtlCaptureStackBackTrace.
UWP doesn't allow reading regkeys. Unfortunately, UWP also doesn't offer an API for returning nominal processor frequency at this moment. Other options would require apps depending on abseil-cpp to be packaged with extra manifest data or libraries for bridging platforms.

This change pushes the unsupported APIs accessing the registry behind a define guard. This define guard makes GetNominalCPUFrequency to compile and run as usual on desktop, but it will return the value 1.0 on UWP Apps (Store).

Fixes: #593 
UWP doesn't allow reading regkeys. Unfortunatelly, UWP also doesn't offer an API for returning nominal processor frequency at this moment. Other options would require apps depending on abseil-cpp to be packaged with extra manifest data or libraries for bridging platforms.

I get the following warnings when compiling with clang6:
```
G../external/abseil-cpp/absl/time/internal/cctz/src/time_zone_libc.cc:166:22: warning: declaration shadows a local variable [-Wshadow]
        if (std::tm* tmp = local_time(&lo, &tm)) {
                     ^
../external/abseil-cpp/absl/time/internal/cctz/src/time_zone_libc.cc:156:18: note: previous declaration is here
    if (std::tm* tmp = local_time(&mid, &tm)) {
                 ^
../external/abseil-cpp/absl/time/internal/cctz/src/time_zone_libc.cc:191:9: warning: result of comparison 'const std::int_fast64_t' (aka 'const long') < -9223372036854775808 is always false [-Wtautological-type-limit-compare]
  if (s < std::numeric_limits<std::time_t>::min()) {
      ~ ^ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
../external/abseil-cpp/absl/time/internal/cctz/src/time_zone_libc.cc:195:9: warning: result of comparison 'const std::int_fast64_t' (aka 'const long') > 9223372036854775807 is always false [-Wtautological-type-limit-compare]
  if (s > std::numeric_limits<std::time_t>::max()) {
      ~ ^ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
../external/abseil-cpp/absl/time/internal/cctz/src/time_zone_libc.cc:84:6: warning: unused function template 'tm_gmtoff' [-Wunused-template]
auto tm_gmtoff(const T& tm) -> decltype(tm.__tm_gmtoff) {
     ^
../external/abseil-cpp/absl/time/internal/cctz/src/time_zone_libc.cc:100:6: warning: unused function template 'tm_zone' [-Wunused-template]
auto tm_zone(const T& tm) -> decltype(tm.__tm_zone) {
     ^
5 warnings generated.
[140/165] Building CXX object external/absei...ne.dir/internal/cctz/src/time_zone_info.cc.o
../external/abseil-cpp/absl/time/internal/cctz/src/time_zone_info.cc:644:10: warning: declaration shadows a local variable [-Wshadow]
    long pos = ftell(fp);
         ^
../external/abseil-cpp/absl/time/internal/cctz/src/time_zone_info.cc:618:21: note: previous declaration is here
  const std::size_t pos = (name.compare(0, 5, "file:") == 0) ? 5 : 0;
                    ^
../external/abseil-cpp/absl/time/internal/cctz/src/time_zone_info.cc:721:35: warning: declaration shadows a local variable [-Wshadow-uncaptured-local]
      name, [](const std::string& name) -> std::unique_ptr<ZoneInfoSource> {
                                  ^
../external/abseil-cpp/absl/time/internal/cctz/src/time_zone_info.cc:709:44: note: previous declaration is here
bool TimeZoneInfo::Load(const std::string& name) {
                                           ^
../external/abseil-cpp/absl/time/internal/cctz/src/time_zone_info.cc:722:18: warning: declaration shadows a local variable [-Wshadow-uncaptured-local]
        if (auto zip = FileZoneInfoSource::Open(name)) return zip;
                 ^
../external/abseil-cpp/absl/time/internal/cctz/src/time_zone_info.cc:720:8: note: previous declaration is here
  auto zip = cctz_extension::zone_info_source_factory(
       ^
../external/abseil-cpp/absl/time/internal/cctz/src/time_zone_info.cc:723:18: warning: declaration shadows a local variable [-Wshadow-uncaptured-local]
        if (auto zip = AndroidZoneInfoSource::Open(name)) return zip;
                 ^
../external/abseil-cpp/absl/time/internal/cctz/src/time_zone_info.cc:720:8: note: previous declaration is here
  auto zip = cctz_extension::zone_info_source_factory(
       ^
4 warnings generated.
```
Hello,

Is there a way to export and install abseil as a subproject?

I use abseil as a cmake subproject by `add_subdirectory(abseil)`, some abls targets are used in my project, and it works well in the build tree. But when I make install, abseil's libs and headers would not be exported and installed along with mine. **That means if I want to use my lib in another project, I have to build and link abseil's libs manually**, like:
```bash
g++ another.cpp -lmylib -labsl_xxxx
```

NOTE: abseil's install rules are disabled according to the following codes:
```cmake
# from abseil/CMakeLists.txt
if(NOT "^${CMAKE_SOURCE_DIR}$" STREQUAL "^${PROJECT_SOURCE_DIR}$")
  set(ABSL_ENABLE_INSTALL FALSE)
else()
  set(ABSL_ENABLE_INSTALL TRUE)
endif()

if(ABSL_ENABLE_INSTALL)
...
endif()
```

Thanks!
