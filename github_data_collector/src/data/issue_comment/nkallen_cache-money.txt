The `README` was completely "dark", so I decided to change it a bit and added some colors! :nail_care: 

This code leverages a bug in Ruby 1.8 to evaluate. But this code can't work in 1.9, So I fixed it.


For most parts of my rails application cache-money works really nice.

But how do I solve this error. Without cache-money I do not have this error:
(Is there a way to disable cache-money for a certain model?)

NoMethodError (undefined method `<=>' for #<UserActivity:0x1072c9b58>):
  /Library/Ruby/Gems/1.8/gems/af-cache-money-0.2.10/lib/cash/index.rb:124:in`add_object_to_cache'
  /Library/Ruby/Gems/1.8/gems/af-cache-money-0.2.10/lib/cash/index.rb:123:in `sort'
  /Library/Ruby/Gems/1.8/gems/af-cache-money-0.2.10/lib/cash/index.rb:123:in`add_object_to_cache'
  /Library/Ruby/Gems/1.8/gems/af-cache-money-0.2.10/lib/cash/index.rb:161:in `update_index_with_minimal_network_operations'
  /Library/Ruby/Gems/1.8/gems/af-cache-money-0.2.10/lib/cash/index.rb:31:in`update'
  /Library/Ruby/Gems/1.8/gems/af-cache-money-0.2.10/lib/cash/write_through.rb:60:in `update_caches'
  /Library/Ruby/Gems/1.8/gems/af-cache-money-0.2.10/lib/cash/write_through.rb:60:in`each'
  /Library/Ruby/Gems/1.8/gems/af-cache-money-0.2.10/lib/cash/write_through.rb:60:in `update_caches'
  /Library/Ruby/Gems/1.8/gems/af-cache-money-0.2.10/lib/cash/write_through.rb:48:in`send'
  /Library/Ruby/Gems/1.8/gems/af-cache-money-0.2.10/lib/cash/write_through.rb:48:in `unfold'
  /Library/Ruby/Gems/1.8/gems/af-cache-money-0.2.10/lib/cash/write_through.rb:26:in`update_caches'
  /Library/Ruby/Gems/1.8/gems/af-cache-money-0.2.10/lib/cache_money.rb:52:in `transaction_without_trace_ActiveRecord_self_name_transaction'
  /Library/Ruby/Gems/1.8/gems/af-cache-money-0.2.10/lib/cash/transactional.rb:13:in`transaction'
  /Library/Ruby/Gems/1.8/gems/af-cache-money-0.2.10/lib/cache_money.rb:52:in `transaction_without_trace_ActiveRecord_self_name_transaction'
  /Library/Ruby/Gems/1.8/gems/newrelic_rpm-2.12.3/lib/new_relic/agent/method_tracer.rb:319:in`transaction'
  /Library/Ruby/Gems/1.8/gems/newrelic_rpm-2.12.3/lib/new_relic/agent/method_tracer.rb:141:in `trace_execution_scoped'
  /Library/Ruby/Gems/1.8/gems/newrelic_rpm-2.12.3/lib/new_relic/agent/method_tracer.rb:314:in`transaction'
  app/models/user_activity.rb:126:in `generate_html'
  app/models/user_activity.rb:108:in`create_html'
  /Library/Ruby/Gems/1.8/gems/af-cache-money-0.2.10/lib/cache_money.rb:52:in `transaction_without_trace_ActiveRecord_self_name_transaction'
  /Library/Ruby/Gems/1.8/gems/af-cache-money-0.2.10/lib/cash/transactional.rb:13:in`transaction'
  /Library/Ruby/Gems/1.8/gems/af-cache-money-0.2.10/lib/cache_money.rb:52:in `transaction_without_trace_ActiveRecord_self_name_transaction'
  /Library/Ruby/Gems/1.8/gems/newrelic_rpm-2.12.3/lib/new_relic/agent/method_tracer.rb:319:in`transaction'
  /Library/Ruby/Gems/1.8/gems/newrelic_rpm-2.12.3/lib/new_relic/agent/method_tracer.rb:141:in `trace_execution_scoped'
  /Library/Ruby/Gems/1.8/gems/newrelic_rpm-2.12.3/lib/new_relic/agent/method_tracer.rb:314:in`transaction'
  app/models/activity.rb:151:in `log'

I ask because we're converting an MRI app to JRuby and I got the following error which looks like a possible race condition:

 undefined method `pop' for <MemCache: 1 servers, ns: nil, ro: false>:MemCache
 [RAILS_ROOT]/vendor/gems/nkallen-cache-money-0.2.5/lib/cash/local.rb:17:in`method_missing'

RAILS_ROOT]/vendor/gems/nkallen-cache-money-0.2.5/lib/cash/local.rb:17:in `method_missing'
 [RAILS_ROOT]/vendor/gems/nkallen-cache-money-0.2.5/lib/cash/transactional.rb:39:in`end_transaction'
 [RAILS_ROOT]/vendor/gems/nkallen-cache-money-0.2.5/lib/cash/transactional.rb:19:in `transaction'
 [RAILS_ROOT]/vendor/gems/nkallen-cache-money-0.2.5/lib/cache_money.rb:58:in`transaction_with_cache_transaction'
 [RAILS_ROOT]/vendor/rails/activerecord/lib/active_record/transactions.rb:228:in `with_transaction_returning_status'
 [RAILS_ROOT]/vendor/rails/activerecord/lib/active_record/transactions.rb:196:in`save_with_transactions'
 [RAILS_ROOT]/vendor/rails/activerecord/lib/active_record/transactions.rb:208:in `rollback_active_record_state!'
 [RAILS_ROOT]/vendor/rails/activerecord/lib/active_record/transactions.rb:196:in`save_with_transactions'
 [RAILS_ROOT]/vendor/plugins/active_scaffold/lib/extensions/unsaved_record.rb:15:in `save_with_unsaved_flag'

It looks like an extra end_transaction was called without a matching begin_transaction?

I encountered the error: key too long when using cache-money in combination with memcached. I used the following quick fix:

http://gist.github.com/367830

I am considering incorporating this into a large e-commerce system, but I'd be more comfortable if I could find a supported version and/or some help with it.

Hello:
I had a model name's Place, and it have a state field.
I was defined the default_scope for all with state = 1
class Place < ActiveRecord::base
  index [:id,:state]
  default_scope :conditions=> [:state => 1] 
end

when I was used Place.find(278) 
First was success, but there output NOT_STORED on Memcached console.
Again it Place.find(278), the Memcached well be endless loop :
<1872 get Place:1/id/278/state/1

> 1872 sending key Place:1/id/278/state/1
> 1872 END
> <1872 get Place:1/id/278
> 1872 END
> <1872 get Place:1/id/278/state/1
> 1872 sending key Place:1/id/278/state/1
> 1872 END
> <1872 get Place:1/id/278
> 1872 END
> <1872 get Place:1/id/278/state/1
> 1872 sending key Place:1/id/278/state/1
> 1872 END
> <1872 get Place:1/id/278
> 1872 END
> <1872 get Place:1/id/278/state/1
> 1872 sending key Place:1/id/278/state/1
> 1872 END
> <1872 get Place:1/id/278
> 1872 END
> <1872 get Place:1/id/278/state/1
> 1872 sending key Place:1/id/278/state/1
> 1872 END
> <1872 get Place:1/id/278
> 1872 END
> <1872 get Place:1/id/278/state/1
> 1872 sending key Place:1/id/278/state/1
> 1872 END
> <1872 get Place:1/id/278
> 1872 END
> <1872 get Place:1/id/278/state/1
> 1872 sending key Place:1/id/278/state/1
> 1872 END
> <1872 get Place:1/id/278
> 1872 END
> <1872 get Place:1/id/278/state/1
> 1872 sending key Place:1/id/278/state/1
> 1872 END
> <1872 get Place:1/id/278
> 1872 END
> <1872 get Place:1/id/278/state/1
> 1872 sending key Place:1/id/278/state/1
> 1872 END
> <1872 get Place:1/id/278
> 1872 END
> <1872 get Place:1/id/278/state/1
> 1872 sending key Place:1/id/278/state/1
> 1872 END
> <1872 get Place:1/id/278
> 1872 END
> <1872 get Place:1/id/278/state/1
> 1872 sending key Place:1/id/278/state/1
> 1872 END
> <1872 get Place:1/id/278/state/1
> 1872 sending key Place:1/id/278/state/1
> 1872 END
> <1872 get Place:1/id/278
> 1872 END
> <1872 get Place:1/id/278/state/1
> 1872 sending key Place:1/id/278/state/1

Why?

Using rails-2.3.5 and friends:

1)
MemCache::MemCacheError in 'Cash::Accessor#incr when there is a cache hit increments the value of the cache'
cannot increment or decrement non-numeric value
./spec/cash/accessor_spec.rb:85:

2)
MemCache::MemCacheError in 'Cash::Accessor#incr when there is a cache hit returns the new cache value'
cannot increment or decrement non-numeric value
./spec/cash/accessor_spec.rb:90:

3)
MemCache::MemCacheError in 'Cash::Transactional Basic Operations increments through the real cache'
cannot increment or decrement non-numeric value
./spec/cash/transactional_spec.rb:24:

4)
MemCache::MemCacheError in 'Cash::Transactional Basic Operations decrements through the real cache'
cannot increment or decrement non-numeric value
./spec/cash/transactional_spec.rb:32:

5)
MemCache::MemCacheError in 'Cash::Transactional In a Transaction Increment and Decrement#incr works'
cannot increment or decrement non-numeric value
./spec/cash/transactional_spec.rb:134:

6)
MemCache::MemCacheError in 'Cash::Transactional In a Transaction Increment and Decrement#incr is buffered'
cannot increment or decrement non-numeric value
./spec/cash/transactional_spec.rb:141:

7)
MemCache::MemCacheError in 'Cash::Transactional In a Transaction Increment and Decrement#decr works'
cannot increment or decrement non-numeric value
./spec/cash/transactional_spec.rb:162:

8)
MemCache::MemCacheError in 'Cash::Transactional In a Transaction Increment and Decrement#decr is buffered'
cannot increment or decrement non-numeric value
./spec/cash/transactional_spec.rb:169:

9)
MemCache::MemCacheError in 'Cash::Transactional In a Transaction Increment and Decrement#decr bottoms out at zero'
cannot increment or decrement non-numeric value
./spec/cash/transactional_spec.rb:187:

10)
MemCache::MemCacheError in 'Cash::Transactional In a Transaction#incr increment be atomic'
cannot increment or decrement non-numeric value
./spec/cash/transactional_spec.rb:342:
./spec/cash/transactional_spec.rb:340:

11)
MemCache::MemCacheError in 'Cash::Transactional In a Transaction#incr interleaved, etc. increments and sets be ordered'
cannot increment or decrement non-numeric value
./spec/cash/transactional_spec.rb:350:

12)
MemCache::MemCacheError in 'Cash::Transactional In a Transaction#decr decrement be atomic'
cannot increment or decrement non-numeric value
./spec/cash/transactional_spec.rb:365:

 find(:all, :conditions=>["gallery_category_id = 0"], :order=>"name")

Can some one tell me how would I fix this ? I mean if I add order to the index, Nkallen stops caching this query 
