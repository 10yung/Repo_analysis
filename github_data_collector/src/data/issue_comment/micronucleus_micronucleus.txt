I have been trying to flash digispark's firmware and noticed the `--run` option is quite mandatory while applying the firmware to remove 5s delaly.
Why do we need to pass the `--run` argument to micronucleus while uploading the firmware ?
Don't we just want to flash the firmware and not run it at that time ?
Why does it all go crazy (http://digistump.com/board/index.php/topic,320.msg8546.html#msg8546) when we don't provide the --run argument ?
Also, while trying to flash another firmware after this, would I need to connect P0 to GND ? 
This configuration allows operating the controller down to 1.8V as long as the bootloader is not activated (e.g. entry condition not met).
This allows for coin cell operation, still not losing bootloader functionality when a USB cable is plugged.

This branch build upon https://github.com/micronucleus/micronucleus/pull/162 and can be seen of an example implementation.

For certain applications there could be the need to operate the AVR on
low voltage, meaning it would not run properly on 8 MHz.
A flag CKDIV_RESET is introduced that runs after the bootloader entry
has been decided and clears CKDIV to 0.
Another flag CKDIV_RESTORE_DEFAULT allows resetting CKDIV to the reset value before entry of
the application, so the application sees the same clock speed as it does
without the bootloader being activated before.

See my second PR for a branch with a demo configuration.
Changes:

- Convert  firmware/releases/m328p_extclock.hex to LF.
- Upgrade all upgrade/releases/*.hex to 2.04 firmware.
- Add upgrade/releases/m328p_extclock.hex.

Also, fixes #158.
[LGT8F328P Arduino Clone Chip ATMega328P](https://github.com/RalphBacon/LGT8F328P-Arduino-Clone-Chip-ATMega328P)

It has high speed internal 32MHz RC that means no ext oscillator needed for v-usb application.

It has different flash compare to the original mega328p, the page size is 1kB and it can only write by 32bit, the relocated interrupt table base address has to be 512 byte aligned。

Sorry, but my english is bad. I use google translator.
In Release 2.04, using the command to view the recorded version, I get the information:
```
> Please plug in the device ...
> Press CTRL+C to terminate the program.
> Device is found!
connecting: 16% complete
connecting: 22% complete
connecting: 28% complete
connecting: 33% complete
> Device has firmware version 2.3
> Device signature: 0x1e930b
> Available space for user applications: 6522 bytes
> Suggested sleep time between sending pages: 7ms
> Whole page count: 102  page size: 64
> Erase function sleep duration: 714ms
> Error opening ../main.hex: No such file or directory
> Error loading or parsing hex file.
```

I use the line:
`... \ micronucleus-master \ commandline \ micronucleus --run --type intel-hex ../main.hex`

Is it my mistake or the new version?
Sorry, but my english is poor. I use google translate.
In Release 2.03 and 2.04, at some point (USB plug or unplug) I lose access to the program, written to the Digispark card. After reprogramming with the Arduino IDE, it works again.
My program is a 4 button USB HID Joystick.
Does anyone know if this problem is known?
I get the same error that #131 , but solutions mentioned there not worked for me.


According if I plug my Digispark clone to USB 2, USB 3, hub or not, I randomly get on of these errors : ``-1``, ``32`` or ``micronucleus: library/micronucleus_lib.c:66: micronucleus_connect: Assertion `res >= 4' failed``. I use Arduino IDE 1.8.9 and Ubuntu 18.10.


I already edited ``udev`` rules, and attempted to run Arduino IDE as root, I only get different errors.
Can you help me ?
I´m using an Attiny85 which is programmed over USB / micronucleus 2.04
I´m using the Tiny in an stand-alone circuit with analog sensors on A3 / A2 if the analog values are low (ca. 0,5V) the Micronuleus ist running instead of the loaded application.
The Version 1.1 is working fine.
I had a look at disassembled v2.04 t85_default. I'd like to discuss some changes in firmware code in order to help improve compactness (without changing algorithm).

- there are 9 unused registers (r8..r15, r23) and 37 SRAM accesses by lds/sts commands to access variables; by placing the (global) variables of usbdrv.c into registers (as it is done with 'currentAddress' and 'idlePolls' in main.c) would save 74 bytes, e.g.
   uchar       usbDeviceAddr;
change to 
   register uchar usbDeviceAddr asm("r8");

- there are 20 SRAM accesses by lds/sts commands to read or write data in the transmit/receive buffer; accessing them with a base-pointer + displacement would save 36 bytes

- the functions 'boot_page_erase', 'boot_page_write' and 'boot_page_fill' as defined in 'boot.h' waste 2 bytes each by accessing SPMCSR as a RAM-location (sts command) instead of a port register (out command) (6 bytes)

- 'usbCrc16Append' is very short; as it is called only once, it could be placed inline  (4 bytes)

- as long as 'usbCrc16' is called only once it could be placed inline too (4 bytes) 

- the smaller version of 'usbCrc16' starts with
usbCrc16:
    mov     ptrL, argPtrL
    mov     ptrH, argPtrH
while the faster one starts with
usbCrc16:
    movw     ptrL, argPtrL
which does the same but is 2 bytes smaller.

- USB_INTR_VECTOR is no longer a real interrupt vector, but is called from the main program; so, it is not necessary to push/pop SREG and all the registers it uses, we need to save only the registers containing valid data (savings 20..30 bytes)

These are some of the more obvious things when looking at the disassembled code. I did not test any of the suggestions, because v2.04 does not run on my system (issue #151).

Someone wants to deal with it?

Thanks bitflipser
(How do I generate the nice red and green underlayed code change listings?)







 