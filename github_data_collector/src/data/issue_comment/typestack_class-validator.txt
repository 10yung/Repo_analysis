Hi! Is there a way to validate inner properties using groups? 
For example

```
class ContactData {
  @IsOptional({ groups: ["update-contact"] })
  @IsNotEmpty({ groups: ["create-contact"] })
  first_name: string;
}

class ContactRequest {
  @ValidateNested()
  @IsNotEmpty()
  @Type(() => ContactData)

  data: ContactData;
}

const classData = plainToClass(ContactRequest, params);
validate(classData, { groups: ["create-contact"] })
```

Because example above doesn't work for me. Seems that the validator forces you to add the groups only in the first level of the class (in this example, ContactRequest) to work, like this:

```
class ContactRequest {
  @ValidateNested()
  @IsNotEmpty()
  @Type(() => ContactData)

  data: ContactData;

  @IsOptional({ groups: ["update-contact"] })
  @IsNotEmpty({ groups: ["create-contact"] })
  first_name: string;
}
```

## The devDependency [ts-node](https://github.com/TypeStrong/ts-node) was updated from `8.6.1` to `8.6.2`.

üö® [View failing branch](https://github.com/typestack/class-validator/compare/master...typestack:greenkeeper%2Fts-node-8.6.2).

This version is **covered** by your **current version range** and after updating it in your project **the build failed**.




ts-node is a devDependency of this project. It **might not break your production code or affect downstream projects**, but probably breaks your build or test tools, which may **prevent deploying or publishing**.



<details>
<summary>Status Details</summary>

- ‚ùå **continuous-integration/travis-ci/push:** The Travis CI build could not complete due to an error ([Details](https://travis-ci.org/typestack/class-validator/builds/636494848?utm_source=github_status&utm_medium=notification)).
</details>


---

<details>
<summary>Release Notes for FIx `yn` Dependency</summary>

<p><strong>Fixed</strong></p>
<ul>
<li>Downgrade <code>yn</code> due to node engine (<a class="issue-link js-issue-link" data-error-text="Failed to load issue title" data-id="548683168" data-permission-text="Issue title is private" data-url="https://github.com/TypeStrong/ts-node/issues/942" data-hovercard-type="pull_request" data-hovercard-url="/TypeStrong/ts-node/pull/942/hovercard" href="https://urls.greenkeeper.io/TypeStrong/ts-node/pull/942">#942</a>)</li>
</ul>
</details>

<details>
<summary>Commits</summary>
<p>The new version differs by 3 commits.</p>
<ul>
<li><a href="https://urls.greenkeeper.io/TypeStrong/ts-node/commit/8ac4be5a8e79ed90c7b2d5ca14525525e3d0c2de"><code>8ac4be5</code></a> <code>8.6.2</code></li>
<li><a href="https://urls.greenkeeper.io/TypeStrong/ts-node/commit/8db216c7f665751fba804d7b07e02a925bf62a17"><code>8db216c</code></a> <code>Downgrade <code>yn</code> due to node engine (#942)</code></li>
<li><a href="https://urls.greenkeeper.io/TypeStrong/ts-node/commit/b90754eda8687c75395a1b837c5e695f88eab28c"><code>b90754e</code></a> <code>Merge <code>process.env</code> in tests for CI</code></li>
</ul>
<p>See the <a href="https://urls.greenkeeper.io/TypeStrong/ts-node/compare/1f063d75efdb99dc8a5a0ee83cceeb2534851cb5...8ac4be5a8e79ed90c7b2d5ca14525525e3d0c2de">full diff</a></p>
</details>


<details>
<summary>FAQ and help</summary>

There is a collection of [frequently asked questions](https://greenkeeper.io/faq.html). If those don‚Äôt help, you can always [ask the humans behind Greenkeeper](https://github.com/greenkeeperio/greenkeeper/issues/new).
</details>

---


Your [Greenkeeper](https://greenkeeper.io) Bot :palm_tree:

The IsLatitude decorator defines a type of IS_LONGITUDE and the IsLongitude decorator defines a type of IS_LONGITUDE.  Should be the other way around
Im currently using the  following:
- class-validator **0.11.0**
- typeorm **0.2.22**
- @nestjsx/crud  **4.4.1**
- @nestjsx/crud-request **4.4.1**
- @nestjsx/crud-typeorm **4.4.1**

Ive read this case, https://github.com/typestack/class-validator/issues/120.

here is my update version on that case,
```ts
 @IsOptional({ groups: [UPDATE] })
  @IsDefined({ groups: [CREATE] })
  @IsNotEmpty()
  @IsString()
  @Column()
  name: string;
```


The intent of this definitions is that the **name** will be necessary in creation but optional on updates, If ever during update the **name** is provided it should evaluate against the IsString, IsNotEmpty.

My question is:
- What will be the concluded validation for **name** field? Im afraid the @IsDefined is ignored on this case, not sure here as indicated here, https://github.com/typestack/class-validator#validation-decorators.

@ValidateIf  will validate before any other rules,
so,is there another condition hook will validate after all other rules?

## The devDependency [@types/node](https://github.com/DefinitelyTyped/DefinitelyTyped) was updated from `12.12.21` to `13.1.0`.
This version is **not covered** by your **current version range**.

If you don‚Äôt accept this pull request, your project will work just like it did before. However, you might be missing out on a bunch of new features, fixes and/or performance improvements from the dependency update.

---

**Publisher:** [types](https://www.npmjs.com/~types)
**License:** MIT

[Find out more about this release](https://github.com/DefinitelyTyped/DefinitelyTyped).

---

<details>
  <summary>FAQ and help</summary>

  There is a collection of [frequently asked questions](https://greenkeeper.io/faq.html). If those don‚Äôt help, you can always [ask the humans behind Greenkeeper](https://github.com/greenkeeperio/greenkeeper/issues/new).
</details>

---


Your [Greenkeeper](https://greenkeeper.io) bot :palm_tree:


When I try to validate with **validateOrReject()** I receive that error (even if I **haven't set any @IsPhoneNumber** decorator):

`goog.asserts.AssertionError {message: "Assertion failed", reportErrorToServer: true, messagePattern: "Assertion failed", ‚Ä¶}`

"AssertionError: Assertion failed\n    at new goog.asserts.AssertionError (/node_modules/google-libphonenumber/dist/libphonenumber.js:1139:20)\n    at Object.goog.asserts.doAssertFailure_ (/node_modules/google-libphonenumber/dist/libphonenumber.js:1162:7)\n    at Object.goog.asserts.assert [as assert] (/node_modules/google-libphonenumber/dist/libphonenumber.js:1169:53)\n    at new goog.proto2.FieldDescriptor (node_modules/google-libphonenumber/dist/libphonenumber.js:3992:16)\n    at Function.goog.proto2.Message.createDescriptor (/node_modules/google-libphonenumber/dist/libphonenumber.js:4246:22)\n    at i18n.phonenumbers.PhoneMetadata.getDescriptor (/node_modules/google-libphonenumber/dist/libphonenumber.js:5193:79)\n    at i18n.phonenumbers.PhoneMetadata.goog.proto2.Message (/node_modules/google-libphonenumber/dist/libphonenumber.js:4071:23)\n    at new i18n.phonenumbers.PhoneMetadata (/node_modules/google-libphonenumber/dist/libphonenumber.js:4583:23)\n    at Object.1 (/node_modules/google-libphonenumber/dist/libphonenumber.js:6791:56)\n    at o (/node_modules/google-libphonenumber/dist/libphonenumber.js:1:639

package-lock.json:
```
        "class-validator": {
            "version": "0.11.0",
            "resolved": "https://registry.npmjs.org/class-validator/-/class-validator-0.11.0.tgz",
            "integrity": "sha512-niAmmSPFku9xsnpYYrddy8NZRrCX3yyoZ/rgPKOilE5BG0Ma1eVCIxpR4X0LasL/6BzbYzsutG+mSbAXlh4zNw==",
            "requires": {
                "@types/validator": "10.11.3",
                "google-libphonenumber": "^3.1.6",
                "validator": "12.0.0"
            }
        }

 "google-libphonenumber": {
            "version": "3.2.6",
            "resolved": "https://registry.npmjs.org/google-libphonenumber/-/google-libphonenumber-3.2.6.tgz",
            "integrity": "sha512-6QCQAaKJlSd/1dUqvdQf7zzfb3uiZHsG8yhCfOdCVRfMuPZ/VDIEB47y5SYwjPQJPs7ebfW5jj6PeobB9JJ4JA=="
        }
```



## The devDependency [sinon](https://github.com/sinonjs/sinon) was updated from `7.5.0` to `8.0.0`.
This version is **not covered** by your **current version range**.

If you don‚Äôt accept this pull request, your project will work just like it did before. However, you might be missing out on a bunch of new features, fixes and/or performance improvements from the dependency update.

---

**Publisher:** [mrgnrdrck](https://www.npmjs.com/~mrgnrdrck)
**License:** BSD-3-Clause

[Find out more about this release](https://github.com/sinonjs/sinon).

---

<details>
  <summary>FAQ and help</summary>

  There is a collection of [frequently asked questions](https://greenkeeper.io/faq.html). If those don‚Äôt help, you can always [ask the humans behind Greenkeeper](https://github.com/greenkeeperio/greenkeeper/issues/new).
</details>

---


Your [Greenkeeper](https://greenkeeper.io) bot :palm_tree:


`validateOrReject` throws an array of errors that does not have a stack.
That is bad in case such error is not being caught and results in 500 Internal Server Error.

Is it possible to add something like `validateOrError` that would throw an instance like this instead:

```
class ObjectInvalid extends Error {
  errors: ValidationError[]
}
```
Hi, I have an issue using class-validator and custom validator classes. The framework that I'm using is NestJS. The problem is not in the validation itself, but when I'm writing end-to-end tests using Jest as a framework, I am not able to mock the custom validation classes created using class-validator.

You can check the issue more in details at the following issue link that I opened in the official NestJS repo, but I was diverted here:
https://github.com/nestjs/nest/issues/3426