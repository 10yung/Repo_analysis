I'm trying to auto post my twitter account status (via linux/crontab), unfortunetaly without success:

require 'twitteroauth/autoload.php';
use Abraham\TwitterOAuth\TwitterOAuth;

define('CONSUMER_KEY', consumerkey);
define('CONSUMER_SECRET', mysecretkey);
define('OAUTH_CALLBACK', 'https://meteomodel.pl/callback.php');

$connection = new TwitterOAuth(CONSUMER_KEY, CONSUMER_SECRET);
$request_token = $connection->oauth('oauth/request_token', array('oauth_callback' => OAUTH_CALLBACK));
print_r ($request_token);
$_SESSION['oauth_token'] = $request_token['oauth_token'];
$_SESSION['oauth_token_secret'] = $request_token['oauth_token_secret'];

$statues = $connection->post("statuses/update", ["status" => "hello world"]);
print_r($statues);

Unfortunetaly I got error:
"Your credentials do not allow access to this resource"

In other issue I have read that I have to redirect user to twitter to authorize access, is there anyway to do that automatically?
Is there any error with the server ?
Before two days i do AUTHENTICATION using my keys and  was working fine. Now i get an error

HP Fatal error: Uncaught Error: Class 'Abraham\TwitterOAuth\TwitterOAuth' not found in C:\inetpub\wwwroot\twiapp\index.php:17
Stack trace:
#0 {main}

and
Failed to load resource: the server responded with a status of 500 (Internal Server Error)

can anyone help me
fixed 7.4.1 Array and string offset access syntax with curly braces is deprecated
Hi, Abraham,
Thank you so much for this library, I find it helped me a lot. But I got an issue when I register webhook, I don't know what was wrong because I found two sources success registering webhooks with this library:

- https://github.com/sadaimudiNaadhar/php-twitter-webhook-account-activity-api

- https://www.twilio.com/blog/create-twitter-sms-notifications-tweets-retweets-mentions-php

But when I try, it give me Error Code 369. I modify a bit of TwitterOAuth.php to download media from DM. Could you help me?

```
private function http($method, $host, $path, array $parameters, $json) {
        $this->resetLastResponse();
        $this->resetAttemptsNumber();
        $url = $this->buildUrl($host, $path);
        $this->response->setApiPath($path);
        if (!$json) {
            $parameters = $this->cleanUpParameters($parameters);
        }
        return $this->makeRequests($url, $method, $parameters, $json);
    }
```

```
private function buildUrl($host, $path)
    {
        if(is_null($host)) {
            return $path;
        }
        return sprintf('%s/%s/%s.json', $host, self::API_VERSION, $path);
    }`
```

```
private function makeRequests($url, $method, array $parameters, $json)
    {
        do {
            $this->sleepIfNeeded();
//            $result = $this->oAuthRequest($url, $method, $parameters, $json);
//            $response = JsonDecoder::decode($result, $this->decodeJsonAsArray);
            $response = $this->oAuthRequest($url, $method, $parameters, $json);
            try {
                // Decode response only if decoding required (if string is json encoded)
                $response = $this->decodeJsonResponseIfRequired($response);
            } catch (\RuntimeException $exception) {
                // If we catched RuntimeException, it means, response cannot be decoded
                // This may be any attachment or binary string
                // Do nothing for while
            }
            $this->response->setBody($response);
            $this->attempts++;
            // Retry up to our $maxRetries number if we get errors greater than 500 (over capacity etc)
        } while ($this->requestsAvailable());
        return $response;
    }
```

```
private function decodeJsonResponseIfRequired($response)
    {
        $response = JsonDecoder::decode($response, $this->decodeJsonAsArray);
        $jsonLastError = json_last_error();
        if ($jsonLastError === JSON_ERROR_NONE) {
            return $response;
        }
        // Throws RuntimeException for compatibility with PHP 5
        throw new \RuntimeException(json_last_error_msg(), $jsonLastError);
    }
```
The last week or so, some upload requests generate a PHP Notice error on `$init->media_id_string`, saying media_id_string does not exist.

That's either because the init request failed, or because of a Twitter bug that does not return media_id_string.

I'd suggest adding resilience by checking the init request response code and automatically retrying it a few times, with usleeps inbetween, if the response code is >= 500.
There are methods like `getLastXHeaders`, `getBody`, but there aren't `getLastHeaders`. Be able to get response headers is pretty important in certain cases (for example, when I got data of attachment in #769 , I want to read content type from response headers instead of tryes to determine it manually), so I expanded bunch of response-scoped methods with this one.

Method `getLastHeaders` allows to read all headers of server response.

Usage example:
```php
$connector = new TwitterOAuth(
    $this->consumer_key,
    $this->consumer_secret,
    $this->access_token,
    $this->access_token_secret
);

$data = $connector->get('some/endpoint');
$headers = $connector->getLastHeaders();
```
I added support for retrieving medias from twitter inbox according to [documentation](https://developer.twitter.com/en/docs/direct-messages/message-attachments/guides/retrieving-media.html). Special method `file` returns raw binary data of attachment, if all is ok.

This issue is fully related with #463 .

Usage example:
```php
$connector = new TwitterOAuth(
    $this->consumer_key,
    $this->consumer_secret,
    $this->access_token,
    $this->access_token_secret
);

// Raw data of jpg attachment
$data = $connector->file('https://ton.twitter.com/i/ton/data/dm/123/456/t9fYCulS.jpg');
```
Updates the requirements on [phpunit/phpunit](https://github.com/sebastianbergmann/phpunit) to permit the latest version.
<details>
<summary>Changelog</summary>

*Sourced from [phpunit/phpunit's changelog](https://github.com/sebastianbergmann/phpunit/blob/master/ChangeLog-8.0.md).*

> ## [8.0.0] - 2019-02-01
> 
> ### Changed
> 
> * Implemented [#3060](https://github-redirect.dependabot.com/sebastianbergmann/phpunit/issues/3060): Cleanup `PHPUnit\Framework\Constraint\Constraint`
> * Implemented [#3133](https://github-redirect.dependabot.com/sebastianbergmann/phpunit/issues/3133): Enable dependency resolution by default
> * Implemented [#3236](https://github-redirect.dependabot.com/sebastianbergmann/phpunit/issues/3236): Define which parts of PHPUnit are covered by the backward compatibility promise
> * Implemented [#3244](https://github-redirect.dependabot.com/sebastianbergmann/phpunit/issues/3244): Enable result cache by default
> * Implemented [#3288](https://github-redirect.dependabot.com/sebastianbergmann/phpunit/issues/3288): The `void_return` fixer of php-cs-fixer is now in effect
> * Implemented [#3439](https://github-redirect.dependabot.com/sebastianbergmann/phpunit/pull/3439): Improve colorization of TestDox output
> * Implemented [#3444](https://github-redirect.dependabot.com/sebastianbergmann/phpunit/pull/3444): Consider data provider that provides data with duplicate keys to be invalid
> * Implemented [#3467](https://github-redirect.dependabot.com/sebastianbergmann/phpunit/pull/3467): Code location hints for `[**requires**](https://github.com/requires)` annotations as well as `--SKIPIF--`, `--EXPECT--`, `--EXPECTF--`, `--EXPECTREGEX--`, and `--{SECTION}_EXTERNAL--` sections of PHPT tests
> * Implemented [#3481](https://github-redirect.dependabot.com/sebastianbergmann/phpunit/pull/3481): Improved `--help` output
> 
> ### Deprecated
> 
> * Implemented [#3332](https://github-redirect.dependabot.com/sebastianbergmann/phpunit/issues/3332): Deprecate annotation(s) for expecting exceptions
> * Implemented [#3338](https://github-redirect.dependabot.com/sebastianbergmann/phpunit/issues/3338): Deprecate assertions (and helper methods) that operate on (non-public) attributes
> * Implemented [#3341](https://github-redirect.dependabot.com/sebastianbergmann/phpunit/issues/3341): Deprecate optional parameters of `assertEquals()` and `assertNotEquals()`
> * Implemented [#3369](https://github-redirect.dependabot.com/sebastianbergmann/phpunit/issues/3369): Deprecate `assertInternalType()` and `assertNotInternalType()`
> * Implemented [#3388](https://github-redirect.dependabot.com/sebastianbergmann/phpunit/issues/3388): Deprecate the `TestListener` interface
> * Implemented [#3425](https://github-redirect.dependabot.com/sebastianbergmann/phpunit/issues/3425): Deprecate optional parameters of `assertContains()` and `assertNotContains()` as well as using these methods with `string` haystacks
> * Implemented [#3494](https://github-redirect.dependabot.com/sebastianbergmann/phpunit/issues/3494): Deprecate `assertArraySubset()`
> 
> ### Removed
> 
> * Implemented [#2762](https://github-redirect.dependabot.com/sebastianbergmann/phpunit/issues/2762): Drop support for PHP 7.1
> * Implemented [#3123](https://github-redirect.dependabot.com/sebastianbergmann/phpunit/issues/3123): Remove `PHPUnit_Framework_MockObject_MockObject`
> 
> [8.0.0]: https://github.com/sebastianbergmann/phpunit/compare/7.5...8.0.0
</details>
<details>
<summary>Commits</summary>

- See full diff in [compare view](https://github.com/sebastianbergmann/phpunit/commits/8.0.0)
</details>
<br />

Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.

[//]: # (dependabot-automerge-start)
[//]: # (dependabot-automerge-end)

---

<details>
<summary>Dependabot commands and options</summary>
<br />

You can trigger Dependabot actions by commenting on this PR:
- `@dependabot rebase` will rebase this PR
- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it
- `@dependabot merge` will merge this PR after your CI passes on it
- `@dependabot cancel merge` will cancel a previously requested merge
- `@dependabot reopen` will reopen this PR if it is closed
- `@dependabot ignore this [patch|minor|major] version` will close this PR and stop Dependabot creating any more for this minor/major version (unless you reopen the PR or upgrade to it yourself)
- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)
- `@dependabot use these labels` will set the current labels as the default for future PRs for this repo and language
- `@dependabot use these reviewers` will set the current reviewers as the default for future PRs for this repo and language
- `@dependabot use these assignees` will set the current assignees as the default for future PRs for this repo and language
- `@dependabot use this milestone` will set the current milestone as the default for future PRs for this repo and language
- `@dependabot badge me` will comment on this PR with code to add a "Dependabot enabled" badge to your readme

Additionally, you can set the following in your Dependabot [dashboard](https://app.dependabot.com):
- Update frequency (including time of day and day of week)
- Automerge options (never/patch/minor, and dev/runtime dependencies)
- Pull request limits (per update run and/or open at any time)
- Out-of-range updates (receive only lockfile updates, if desired)
- Security updates (receive only security updates, if desired)

Finally, you can contact us by mentioning @dependabot.

</details>
Hello, I found this bug because in my codebase I set the library to decode json responses as array with `setDecodeJsonAsArray(true)`.

Doing so breaks the chunked media upload, because it consists of multiple separate calls and the method `uploadMediaChunked()` internally gives for granted that responses are `stdClass` objects.

see PR #755
see issue #756 
