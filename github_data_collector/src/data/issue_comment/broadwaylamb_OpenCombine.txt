Tests coming soon
Hi folks,

So I have the following:
```swift
public func mergedMovies(ids movieIDs: [String]) -> AnyPublisher<[Movie], APIError>{
        let movieIDs = Array(movieIDs.prefix(20))
        
        precondition(!movieIDs.isEmpty)

        let initialPublisher = movie(id: movieIDs[0])
        let remainder = Array(movieIDs.dropFirst())

        #if canImport(Combine)
        return remainder.reduce(initialPublisher) { combined, id in
          return combined
            .merge(with: movie(id: id))
            .eraseToAnyPublisher()
        }
        #else
        return remainder.reduce(initialPublisher) { combined, id in
          return combined
            .merge(with: movie(id: id))
            .eraseToAnyPublisher()
        }
        #endif

    }
```
I am getting two errors:

```swift
value of type 'Any' has no member 'eraseToAnyPublisher'
            .eraseToAnyPublisher()
```

and, 
```swift
value of type 'AnyPublisher<[Movie], APIError>' has no member 'merge'
            .merge(with: movie(id: id))
```

Not sure where `ocombine` should reside to resolve that, if that is the fix.

Thanks 

- [x] `Publishers.Catch`
  - [ ] Tests for `Publishers.Catch`
- [ ] `Publishers.TryCatch`
  - [ ] Tests for `Publishers.TryCatch `
For and my team lack of support for Carthage dependency manager is a real barrier to adoption.

It would be great if OpenCombine [supported it ](https://github.com/Carthage/Carthage#supporting-carthage-for-your-framework). 
This is a sketch that doesn't work yet
This implementation is not complete yet.
I'm currently maintaining a few forks of open-source libraries that make those compatible with OpenCombine: [GRDBOpenCombine](https://github.com/MaxDesiatov/GRDBOpenCombine) and its dependency [OpenCombineExpectations](https://github.com/MaxDesiatov/OpenCombineExpectations). I'd appreciate any input and contributions to these forks, and maybe some coordinated effort to push a more sane support for "polyfill" libraries in future versions of Swift. If the latter happens, we probably even could upstream changes from these forks to their origin repositories.

Either way, it would make sense to maintain these forks, proposals, and related helper projects under one umbrella OpenCombine organization with an open list of maintainers. This would make the project more visible and I hope attract more attention and contributors. I'm not sure if existing [OpenCombine](https://github.com/opencombine) organization is the one previously created for this purpose, if not maybe something like OpenCombineHQ could work as a name just as well.
Tests are coming soon.
Looks like #51 is abandoned, this rebases it on top of `master` and cleans up `allTests`.

Closes #51.
(picking up #93)

- [x] Make it work with generic classes.
- [x] Add tests for NSObject subclasses.
- [x] Add tests where a class contains a field of resilient struct type
- [x] Add CI jobs for Apple platforms without Swift runtime (before iOS 12.2/macOS 10.14.4).
- [x] Add CI jobs for Apple platforms that support Swift 5.1.
- [x] Ideally, test on a 32 bit Apple platform.
- [ ] Remove unneeded C++ code.
- [ ] Resolve FIXMEs
