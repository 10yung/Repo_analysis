Addresses #1345 

The Test Widget manufacturer now uses Mongo, so the SKUs resemble ObjectIds. Added a failing test to show why this is a problem. Fix the problem.
### Expected Behavior

After soft-deleting a resource a PATCH should restore it, according to [the documentation](https://docs.python-eve.org/en/stable/features.html#restoring-soft-deleted-items).

### Actual Behavior

When doing a PATCH request on a soft-deleted resource it returns **404**.
A PUT request returns **409**, *"Duplicate key error at index: 0"*.
The resource has `_deleted: true` at a DB level. I tried to manually change it to `false` and also remove it but nothing happens, it seems that there's something else going on behind the scenes (it doesn't simply look for a `_deleted` property, otherwise it would be restored).
Another thing that I noticed is that, even if I disable the soft-delete feature, the resources that were soft-deleted don't show up again, when [they should](https://docs.python-eve.org/en/stable/features.html#considerations).

This is the _relevant_ part of my domain:
```
    "places": {
        "schema": place,
        "allow_unknown": True,
    },
    "commerces": {
        "schema": commerce,
        "datasource": {
            "source": "places",
        },
        "soft_delete": True
    },
    "professionals": {
        "schema": professional,
        "datasource": {
            "source": "places"
        },
        "soft_delete": True
    }
```

This is an example of the request that I'm doing:
```
PATCH /api/commerces/5deebafd0816a917709ce1ba
{}
```

### Environment
* Python version: 3.8
* Eve version: 1.0

As a developer, I want Eve to do no objectid coercion aside from id fields so that I can store foreign mongo ids and still have post and get working.

### Background

On from #599, #600, #1164,  it's not uncommon to have a service that allows clients to put data to the server and give the data handles determined by the client. If the client side developers are also using mongodb then it's a real use case to have strings that can be parsed as objectid but that we don't want to have as objectids.

This works with `query_objectid_as_string` however in more complicated queries where we mix in actual objectids, it can break.

The fix [here](https://github.com/pyeve/eve/commit/796c3514bb0dcae518fba7316130771507759bc8) looks like it does the simplest thing that could work by checking to see if the type being gotten is an id field and if it is, always cast to objectid.

### Example use case

A photo service where users can set a handle for the photos. A client uploads the photo and sets the handle as their local objectid. On the server (Eve) side, the user id is an `_id`. And the photo id is a string. The resulting request would fail with `query_objectid_as_string` set to either `False` or `True`:

```
curl 'https://localhost:8080/photos?where={"photo_handle": {"$in": ["12345678912"]}, "user": {"$in": ["21987654321"]}}'
```

I think the prototype posted in #1164 would fix this.


### Expected Behavior

When using the command 'curl -i localhost:5000/LASTEW/000001.SZ', it should response the item   specified by the key 'ts_code' with 000001.SZ.

```python
$ curl -i localhost:5000/LASTEW
HTTP/1.0 200 OK
Content-Type: application/json
Content-Length: 809
X-Total-Count: 2
Server: Eve/0.7.10 Werkzeug/0.11.15 Python/3.7.4
Date: Fri, 20 Dec 2019 15:27:12 GMT

{"_items": [{"ts_code": "000001.SZ", "trade_date": 20191213, "open": 15.62, "close": 16.12, "high": 16.12, "low": 15.25, "_created": "Thu, 01 Jan 1970 00:00:00 GMT", "_updated": "Thu, 01 Jan 1970 00:00:00 GMT", "_etag": "b0db71775880b0202e641accbab5b5720d053f21", "_links": {"self": {"title": "Lastew", "href": "LASTEW/000001.SZ"}}}, {"ts_code": "300656.SZ", "trade_date": 20190823, "open": 21.9, "close": 22.43, "high": 24.68, "low": 21.44, "_created": "Thu, 01 Jan 1970 00:00:00 GMT", "_updated": "Thu, 01 Jan 1970 00:00:00 GMT", "_etag": "acbdc9418cb2b0e08570626f47246213c9c77363", "_links": {"self": {"title": "Lastew", "href": "LASTEW/300656.SZ"}}}], "_links": {"parent": {"title": "home", "href": "/"}, "self": {"title": "LASTEW", "href": "LASTEW"}}, "_meta": {"page": 1, "max_results": 25, "total": 2}}

$curl -i localhost:5000/LASTEW/000001.SZ
```

### Actual Behavior

But it responses a code 404.

```pytb
$ curl -i localhost:5000/LASTEW/000001.SZ
HTTP/1.0 404 NOT FOUND
Content-Type: application/json
Content-Length: 179
Server: Eve/0.7.10 Werkzeug/0.11.15 Python/3.7.4
Date: Fri, 20 Dec 2019 15:28:27 GMT

{"_status": "ERR", "_error": {"code": 404, "message": "The requested URL was not found on the server.  If you entered the URL manually please check your spelling and try again."}}

```

### Environment

* Python version:3.7.4
* Eve version:0.7.10 (<0.8 required by eve-sqlalchemy), reproduced when Eve is upgraded to 0.8.1 

MongoDB doesn't create new documents with provided `ID_FIELD`

1. File "settings.py"
```
ID_FIELD="myid"
```
2. POST new document returns "my_id" in the response:
```
{
    "_updated": "Sun, 15 Dec 2019 16:15:10 GMT",
    "_created": "Sun, 15 Dec 2019 16:15:10 GMT",
    "_etag": "2c73a0926102698d1f5a74212c1d1cf229831cd3",
    "myid": "5df65c0e57e7800fcad4c55b",
    "_links": {
        "self": {
            "title": "Account",
            "href": "accounts/5df65c0e57e7800fcad4c55b"
        }
    },
    "_status": "OK"
}
```

3. But when fetching documents, identifier fields are still "_id"
```
{
    "_items": [
        {
            "_id": "5df65c0e57e7800fcad4c55b",
            "username": "admin",
            "password": "pbkdf2:sha256:150000$jwkkbcNU$0dbce9854fa1f7e2b6617c684960f62ae9c26078a3fd9322568c1917db655a5e",
            "roles": [
                "admin"
            ],
            "_updated": "Sun, 15 Dec 2019 16:15:10 GMT",
            "_created": "Sun, 15 Dec 2019 16:15:10 GMT",
            "token": "youPRtNh954CxrUndGaOJRM7p1m7YkhRnr681CNstHQ",
            "_etag": "2c73a0926102698d1f5a74212c1d1cf229831cd3"
        }
    ],
    "_links": {
        "parent": {
            "title": "home",
            "href": "/"
        },
        "self": {
            "title": "accounts",
            "href": "accounts"
        }
    },
    "_meta": {
        "page": 1,
        "max_results": 25,
        "total": 1
    }
}
```
---

### Expected Behavior

The data base should create new documents having id field name is "myid"

### Actual Behavior

Id fields are still "_id"

### Environment

* Python version:
Python 3.6.8

* Eve version:
Eve==0.9.2

https://github.com/pyeve/eve/blob/6063b1a2c780ff958135b186145e0bef8f266258/eve/methods/common.py#L677

The sense of the conditional
```python
    if config.BANDWIDTH_SAVER:
        return
```
makes the BANDWIDTH_SAVER have no effect, as all of the document fields get removed, unless one has all the fields in the projection.

Example:
```http
POST http://localhost:5000/rules
Accept: application/json
Content-Type: application/json
Cache-Control: no-cache

[
  {
    "name": "Jaguar Jumps",
    "start": "2019-12-13T00:14:22.773Z",
    "duration": "weeks",
    "expires": true,
  },
  {
    "name": "Koala Kandy",
    "start": "2019-12-13T00:14:22.773Z",
    "duration": "weeks",
    "expires": true,
  }
]
```
results in only the auto processed fields. If I force-jump while debugging to skip to the return statement on the second one, I get the expected entire document. Below is what I get with that skip to the return:
```json
{
  "_status": "OK",
  "_items": [
    {
      "_id": "5df420a8a9d79a0301ef5cad",
      "_created": "1970-01-01T00:00:00 ",
      "_updated": "1970-01-01T00:00:00 ",
      "_etag": "d000c9a42314a7fb8e8961911a5c66f78a18bfb7",
      "_links": {
        "self": {
          "title": "Rule",
          "href": "rules/5df420a8a9d79a0301ef5cad"
        }
      },
      "_status": "OK"
    },
    {
      "name": "Koala Kandy",
      "start": "2019-12-13T00:14:22 UTC",
      "duration": "weeks",
      "expires": true,
      "_updated": "2019-12-13T23:35:39 ",
      "_created": "2019-12-13T23:35:39 ",
      "_etag": "4a83a54e30cd0a097722d91cd8bf82a121d8198a",
      "_id": "5df420a8a9d79a0301ef5cae",
      "_links": {
        "self": {
          "title": "Rule",
          "href": "rules/5df420a8a9d79a0301ef5cae"
        },
      },
      "_status": "OK"
    }
  ]
}
```
Python version: 3.7.1
Eve version: 0.9.2
Schema:
```python
rules = {
    'allow_unknown': True,
    'schema': {
        'name': {
            'type': 'string',
        },
        'start': {
            'type': 'datetime',
            'required': True,
            'coerce': to_datetime,
        },
        'duration': {
            'type': 'string',
            'allowed': ['days', 'weeks', 'months', 'years', 'one-time'],
            'required': True,
        },
        'expires': {
            'type': 'boolean',
            'default': False,
        },
    },
}
```


### Expected Behavior

When performing a query via the url that returns 0 items, the `response[_meta]` and `response[_links]` reflects the total number of items in the collection only when I include a spatial query operator.

For example, if my endpoint is `geosensors` and my `geometry` field is of type **point**, a non spatial query returning 0 items acts as expected:

```
geosensors?where={"geometry": 0}
```
returns

```
{
  "_items":[

  ],
  "_links":{
    "parent":{
      "title":"home",
      "href":"/"
    },
    "self":{
      "title":"geosensors",
      "href":"geosensors"
    }
  },
  "_meta":{
    "page":1,
    "max_results":200,
    "total":0
  }
}
```

### Actual Behavior

I run a spatial query that returns 0 items, the `response[_links]` and `response[_meta]` reflects the totals items in the collection:

```
geosensors?where={"geometry": {"$near": {"$geometry": {"type": "Point", "coordinates": [-100, 34]}, "$maxDistance": 1}}}
```

returns 

```
{
  "_items":[

  ],
  "_links":{
    "parent":{
      "title":"home",
      "href":"/"
    },
    "self":{
      "title":"geosensors",
      "href":"geosensors?where={\"geometry\": {\"$near\": {\"$geometry\": {\"type\": \"Point\", \"coordinates\": [-100, 34]}, \"$maxDistance\": 10}}}"
    },
    "next":{
      "title":"next page",
      "href":"geosensors?where={\"geometry\": {\"$near\": {\"$geometry\": {\"type\": \"Point\", \"coordinates\": [-100, 34]}, \"$maxDistance\": 10}}}&page=2"
    },
    "last":{
      "title":"last page",
      "href":"geosensors?where={\"geometry\": {\"$near\": {\"$geometry\": {\"type\": \"Point\", \"coordinates\": [-100, 34]}, \"$maxDistance\": 10}}}&page=663"
    }
  },
  "_meta":{
    "page":1,
    "max_results":200,
    "total":132598
  }
}
```

### Environment

* Python version: 3.7
* Eve version: 0.9.2

### Expected Behavior
Given a certain resource 'assets', with 'some_dict' as an attribute of its schema.
```
DOMAIN['assets'] = {
    'schema': {
        'some_dict': {'type': 'dict'}
    }
}

```
After a PATCH request to a given item, say with body `{'some_dict': {}}`, the value of 'some_dict' should now be {}.

### Actual Behavior

Instead, after the PATCH request, some_dict has the previous value, for example, `{'weight': 42}`.

### Environment

* Python version: 3.6.5
* Eve version: 0.9.2

### Bug
The problem is that the original value is being updated with an empty dict, `orig_value.update(resolve_nested_documents(value, orig_value))` where `resolve_nested_documents(value, orig_value)` is `{}`, and the result of this is that orig_value keeps their original values.

```
# eve/methods/patch.py
def resolve_nested_documents(updates, original):
    """ Nested document updates are merged with the original contents
    we don't overwrite the whole thing. See #519 for details.

    .. versionadded:: 0.5
    """
    r = {}
    for field, value in updates.items():
        if isinstance(value, dict):
            orig_value = original.setdefault(field, {})
            if orig_value is None:
                r[field] = value
            else:
                orig_value.update(resolve_nested_documents(value, orig_value))
                r[field] = orig_value
        else:
            r[field] = value
    return r
```
This pull request mitigates the problem described at #1332.
### Description

Given a resource schema that uses an `anyof` in a `list`, when parsing a value in a field, Eve tries to apply all the possible deserializations but if several deserializations are possible it will end up parsing it using an invalid deserializator.

### Example

Using this resource definition:

```python
from eve import Eve

MONGO_HOST = 'localhost'
MONGO_PORT = 27017
RESOURCE_METHODS = ['GET', 'POST', 'DELETE']
ITEM_METHODS = ['GET', 'PATCH', 'PUT', 'DELETE']

resource = {
    '__description__': __doc__,
    'etag_ignore_fields': ['last_executed'],
    "schema": {
        "test": {
            "type": "list",
            "schema": {
                "anyof": [
                    {
                        "type": "dict",
                        "schema": {
                            "type": {"type": "string", "allowed": ["number"], "required": True},
                            "value": {
                                "type": "number",
                                "required": True
                            }
                        }
                    },
                   {
                        "type": "dict",
                        "schema": {
                            "type": {"type": "string", "allowed": ["boolean"], "required": True},
                            "value": {
                                "type": "boolean",
                                "required": True
                            }
                        }
                    },
                    {
                        "type": "dict",
                        "schema": {
                            "type": {"type": "string", "allowed": ["datetime"], "required": True},
                            "value": {
                                "type": "datetime",
                                "required": True
                            }
                        }
                    },
                    {
                        "type": "dict",
                        "schema": {
                            "type": {"type": "string", "allowed": ["string"], "required": True},
                            "value": {
                                "type": "string",
                                "required": True
                            }
                        }
                    },
                    {
                        "type": "dict",
                        "schema": {
                            "type": {"type": "string", "allowed": ["integer"], "required": True},
                            "value": {
                                "type": "integer",
                                "required": True
                            }
                        }
                    }
                ]
            }
        }
    },
    'url': 'test',
    'resource_methods': ['GET', 'POST'],
    'item_methods': ['GET', 'DELETE', 'PUT', 'PATCH']
}

settings = {'DOMAIN': {'test': resource}}
app = Eve(settings=settings)
app.run()
```

This are valid POST queries that will fail:

```python
# Value is deserialized as an integer
q = {"test": [{ "type": "boolean", "value": True }]}

# Value is deserialized as a boolean
q = { "test": [{ "type": "number", "value": 0 }] }

# Value is deserialized as a datetime
q = {"test": [{"type": "string", "value": "Tue, 02 Apr 2013 10:29:13 GMT"}]}
```

This are invalid POST queries that won't fail:

```python
# Value is deserialized as an integer
q = { "test": [{ "type": "integer", "value": True }] }
q = { "test": [{ "type": "number", "value": True }] }
```

### Environment
* Python version: 2.7 and 3.7
* Eve version: 0.9.2 and master branch.
