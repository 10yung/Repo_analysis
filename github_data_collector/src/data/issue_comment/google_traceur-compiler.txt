The filename argument passed to the writeFile() function in file-util.js may be manipulated to write arbitrary directories on the filesystem. The writeFile() function attempts to sanitize the untrusted filename, but calls the mkdirRecursive() function on the untrusted filename before the filename is sanitized (https://github.com/google/traceur-compiler/blob/master/src/node/file-util.js#L56)

For example, passing the filename "../test/target.txt" on a *nix system will create the directory "test" in the parent directory. An attacker can use the dot-dot-slash path manipulation technique to create directories anywhere on the filesystem.

```
function writeFile(filename, contents) {
  // Compute the output path
  var outputdir = fs.realpathSync(process.cwd());
  mkdirRecursive(path.dirname(filename));
  var filedir = fs.realpathSync(path.dirname(filename));
  filedir = removeCommonPrefix(outputdir, filedir);
  outputdir = path.join(outputdir, filedir);

  mkdirRecursive(outputdir);
  var outputfile = path.join(outputdir, path.basename(filename));
  fs.writeFileSync(outputfile, contents, 'utf8');
}
```
Hi All

we are upgrading to jQuery version 3.2.1
We have Rihno version 1_7R2 and we are getting error Object.defineProperty is not a function.
I tried other new version of Rihno but nothing worked.

The reason may be Object.defineProperty is defined in JS 1.8 and rihno is in JS 1.7

can anyone of you help me to solve this ?
When Chrome 61 sees a <script type="module"...> tag, it will interpret is as an ES6 module.  Is there any way to detect this at run-time to prevent Traceur doing transpilation when we don't need it to?
GNU Guile has now a working [prototype of a compiler backend that generates JavaScript](https://gitlab.com/ijp/guile/tree/compile-to-js-2017).

It use lots of tail calls. I compiled it with traceur using the following command:

```sh
$ traceur --out script.js --script out.prettier.js --proper-tail-calls  --experimental
```

I run it in chrome using the following html file:

```html
<html>
  <body>
    <script src="https://google.github.io/traceur-compiler/bin/traceur.js"></script>
    <script src="https://google.github.io/traceur-compiler/bin/BrowserSystem.js"></script>
    <script src="/script.js" type="text/javascript"></script>
  </body>
</html>
```

It fails with a `Uncaught RangeError: Maximum call stack size exceeded`.

The original scheme program is:

```scheme
(js-invoke (js-eval "console") "log" "h√©llo world")
```

The input JavaScript file can be found [here](https://gist.github.com/amirouche/9c922e34517843edde4b4a6cdaf50a0a). That input file is correctly intrepreted by nodejs v8.4.0 using the `--harmony_tailcalls` flag.
Like these codes: 
```js
// lib.js
export let c = {
  name: 'Hello'
};

export function ins() {
  return c.name
};

export function reset() {
  c = {
    name: 'Hello'
  };
};
```
```js
import { c, ins, reset } from './lib';

c.name = '222';

console.log(c);
console.log(ins());

reset();
console.log(ins());
console.log(c);
```

When execute `index.js` that use babel or TypeScript compiled will print 
```
{ name: '222' }
222
Hello
{ name: 'Hello' }
```

But use traceur, that will print 

```
{ name: '222' }
222
Hello
{ name: '222' }
```
Would you tell us, which compiler is compile right?
Could we implement this [proposal](https://github.com/tc39/proposal-trailing-function-commas) for Traceur?

By scanning the generated ES5 code, I discovered that the getter methods follow the format:

{
   get <property name>{return ***;}
}

The above getter and setter syntax is good for most of the modern web browsers. However, I'd like to run the generated ES5 code in the Safari 5.x which doesn't sustain the getter shorthand syntax. On the contrary, "Object.defineProperties(...)" is supported utterly.

Object.defineProperties(<object>, {
    <property name>: {
        enumerable: true,
        'get': function(){return  ***;}
    }
})

So, I intend to modify the Traceur source code to replace the shorthand syntax with the integral version based on Object.defineProperties(...).

My 1st goal is the getter counterpart serving the ES6 export commands.

Could you please teach me which Traceur source-code file is most relevant to my 1st goal?

I'd like to report a bug for the ES6 module importing.

According to the ES6 spec., the ES6-Module statement "import <Module File Path>" merely executes the JavaScript routine inside the module body but doesn't really import any external variables or functions into the current context.

However, accompanying the latest Google Traceur, the statement "import <Module File Path>" doesn't  execute the module body as expected. On the contrary, I feel that the importing statement is directly ignored.

Only the statement "import ... from ..." does run the ES6 module body. Nevertheless, in my use case, I only intend to execute a piece of JavaScript program by importing its module, without any of the importing variables.

I anticipate the incorrect ES6 compilation behavior can be renovated.

This is to make it easier to use in Node 0.10

I upgrade the Google Traceur to the latest 0.0.110. However, the compilation-output ES5 JavaScript program can't work in the web browser.

1) The transpiling command for Traceur: 

node_modules/.bin/traceur \
      --script=www/js/widget-nest-thermostat.bbjs \
      --out=www/js/widget-nest-thermostat.js \
       --require=true \
       --arrow-functions=true --block-binding=true --classes=true \
       --computed-property-names=true --default-parameters=true \
       --destructuring=true --for-of=true --generators=true --numeric-literals=true \
       --property-methods=true --property-name-shorthand=true --rest-parameters=true \
       --spread=true --symbols=true --template-literals=true --unicode-escape-sequences=true \
       --unicode-expressions=true --proper-tail-calls=true --annotations=true \
       --array-comprehension=true --async-functions=true --async-generators=true \
       --exponentiation=true --export-from-extended=true --for-on=true \
       --generator-comprehension=true --member-variables=true --spread-properties=true \
       --types=true --experimental --source-maps=file

2) The traceur runtime has been introduced in the HTML page.

<script type="text/javascript" src="/js/traceur-runtime.js"></script>


The file "traceur-runtime.js" is copied from the folder "node_modules/traceur/bin".

3) The Error is thrown from the web browser, when I visit the web page.

```
  **TypeError: Cannot read property 'default' of undefined**
```

By scanning the compilatio-output ES5 JS program, I discovered the error point is 

**var $__initTailRecursiveFunction = $traceurRuntime.getModule($traceurRuntime.normalizeModuleName("traceur/dist/commonjs/runtime/modules/initTailRecursiveFunction.js", "widget-nest-thermostat.bbjs")).default;**

That's to say, **$traceurRuntime.getModule($traceurRuntime.normalizeModuleName("traceur/dist/commonjs/runtime/modules/initTailRecursiveFunction.js", "widget-nest-thermostat.bbjs"))** returns null.

Memo: in my project, ES6 JS file is suffixed with ".bbjs". After they are compiled, their corresponding ES5 file is ".js".
