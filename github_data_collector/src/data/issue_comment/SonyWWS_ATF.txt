I get this Error when using your VirtualizingWrapPanel... 

Layout measurement override of element 'VirtualizingWrapPanel' should not return PositiveInfinity as its DesiredSize, even if Infinity is passed in as available size.'

Got any solution for this? I'm using it as an ItemsPanelTemplate inside an ItemsControl.
Hello, currently I am looking for a "UnregisterMenu" I make sure that I unregister all command before hand, but I have added this to CommandServiceBase (and the Interface as well)

```
        public virtual void UnregisterMenu(object menuTag, ICommandClient client)
        {
            MenuInfo info = GetMenuInfo(menuTag);
            if (info == null)
                return;

            UnregisterMenuInfo(info, client);
        }

        protected virtual void UnregisterMenuInfo(MenuInfo info, ICommandClient client)
        {
            info.Commands = 0;
            m_menus.Remove(info);
        }
```

Which seems to remove the menu properly, but for some reason when re-registering the menu it never shows up. I have no idea what I am missing and was hoping someone could enlighten me.
I added a toolbar option that allows the player to toggle read-only functionality. That is to say, while in Read-Only mode, the user cannot edit the property grid, trees, lists, etc. But while not in Read-Only mode, the user can has access to the aforementioned functionality.

That said, if AttributePropertyDescriptor uses a custom editor then it remains in the default Read-Only state. I extended CustomTypeDescriptorNodeAdapter where the properties are not cacheable, but the problem remains. Any suggestions how to resolve this issue?
I and my company use ATF for our little product.

Our product will soon be released and we want to add a strong name to - or sign - our executables and libraries to "secure" things.
As you should know, when an assembly is signed, all the assemblies it depends on must also be signed.

So, can you consider adding a strong name to - or signing - the generated DLLs of ATF?

Thanks a lot!
Fixed #64
This will exclude the class from FxCop/Visual Studio analysis. It should look like this:

[System.CodeDom.Compiler.GeneratedCode("DomGen", "1.0.0.0")]
public static class Schema

Various validators can throw InvalidTransactionException during the IValidationContext.Ended  event.  However, at this point the HistoryContext override of OnEnded will already have logged the transaction and set the dirty flag.  The exception is then thrown and the HistoryContext is now in an invalid state.  This leads to documents being flagged as Dirty when they are in fact clean.

Perhaps validators should not throw during OnEnded - but during OnEnding instead.  The transaction has supposedly ended and so it should not be possible to cancel it at that point.

There is a related issue here though in that some validators modify the Dom during OnEnding.  This will mean that the order in which validators subscribe to the validation events is critical.  Any modifications made to the Dom by a validator during OnEnding will not be validated by validators earlier in the subscription list.

It is possibly a mistake to mix the two different concepts of data validation and data coercion.  Perhaps this issue could be worked around by separating the two -  all 'Coercers'  operate first then in a second pass, all Validators check the data consistency.

Our tool has multiple panes that can have their visibility status toggled by clicking on their menu item in the "Window" menu.  The issue is that those menu items always have a check mark next to them, no matter the visibility status.  Repro steps:
1. Add a `OutputService` to your program
2. Launch program and notice the "Output" menu item in the "Window" menu is checked and the panel is visible.
3. Click the "Output" menu item.
4. Notice that the panel has been hidden.
5. Click on the "Window" menu again and notice that the "Output" menu item is still checked.

Expected that the "Output" menu item is no longer checked because the panel is not visible.

I believe I have identified that the issue is that the CommandInfo is never updated after the program is initialized.  I came up with a solution by modifying `CommandService.item_Click` : 

> ICommandClient client = GetClientOrActiveClient(tag);
> if (client != null && client.CanDoCommand(tag))
> {
>     client.DoCommand(tag);
>     UpdateCommand(tag); //Force the command status to be updated
> }

My question is if this is the correct fix or if there is a better way to accomplish the desired behavior.

Development team of proprietary PVS-Studio C/C++/C# static analyzer presents their report on the source code of ATF in the article, which contains the review of the most suspicious code fragments they discovered.

You can read article on the official site:
http://www.viva64.com/en/b/0371/
