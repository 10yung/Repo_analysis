Is it possible to have calculated or derived data from inside the cache?  Something similar to https://github.com/reduxjs/reselect? 

 Lets say I have a list of `todos` inside my cache, and I want to keep track of a field thats `numberOfTodos`.  Can I set something up where `numberOfTodos` is calculated automatically based on `todos.length`?   The only way I see to do this currently is to store `numberOfTodos` as an additional field in the cache which is not ideal because the goal of any state management system should be to store the least amount of data possible and have the rest be derived.  

- [ ] feature
I have a Query component link apollo cache, everytime the cache changed, then my render props in Query component will execute for rerender, but my app also subscribe a mqtt server sync update my apollo cache, it will cause my page(componet) update random and unexpected when user is watch this page, I only hope doing like once query when everytime componentDidMonut, then update date until next time component close(componentWillUnMonut) then componentDidMonut again, so is there any option can do that function for disable rerender?


My function calls to the store are slow for some reason. I wonder if it's a config issue.

When the function is called `updateDashboardState` I print out the time that takes to check how long it takes to update the cache. It is around 3-4 ms which is great.

On the other hand when I invoke the function and check the time between the function call and the return it is around 500ms which is terrible.

Apparently the reconciliation called 3 times instead of 1 (or 2). The cached data seems to be the same though. Any workarounds?

Could be related to this issue:

https://github.com/apollographql/apollo-client/issues/4077

```
const handleSearchUpdate = async (event) => {
  const searchTerm = event.target.value;

  const time = new Date();
  await updateDashboardState({
    variables: { search: searchTerm }
  });
  **console.log(new Date() - time); // THIS IS 500ms WHICH IS TERRIBLE**
};
```

```
const typeDefs = `
  type FilterType {
    ${[VEHICLE_FILTER_ATTRIBUTES.LAST_CONTACTED_BY]}: String
    ${[VEHICLE_FILTER_ATTRIBUTES.LAST_CONTACTED_DATE_START]}: String
    ${[VEHICLE_FILTER_ATTRIBUTES.LAST_CONTACTED_DATE_END]}: String
    ${[VEHICLE_FILTER_ATTRIBUTES.WITH_ALERTS]}: Boolean
    ${[VEHICLE_FILTER_ATTRIBUTES.WITH_SERVICE_DUE]}: Boolean
  }
`;

const stateLink = withClientState({
  cache,
  resolvers: {
    Mutation: {
      updateVehicleState: (_, { state }, { cache }) => {
        const data = {
          vehicleState: {
            __typename: 'VehicleState',
            state
          }
        };
        cache.writeData({ data });
        return null;
      },
      updateDashboardState: (_, { activeOrderAttribute, displayOrder, filters, search }, { cache }) => {
        const startTime = new Date();
        const dashboardStateQuery = gql`
          query {
            dashboardState @client {
              activeOrderAttribute
              displayOrder
              filters {
                ${[VEHICLE_FILTER_ATTRIBUTES.LAST_CONTACTED_BY]}
                ${[VEHICLE_FILTER_ATTRIBUTES.LAST_CONTACTED_DATE_START]}
                ${[VEHICLE_FILTER_ATTRIBUTES.LAST_CONTACTED_DATE_END]}
                ${[VEHICLE_FILTER_ATTRIBUTES.WITH_ALERTS]}
                ${[VEHICLE_FILTER_ATTRIBUTES.WITH_SERVICE_DUE]}
              }
              search
            }
          }
        `;
        
        const { dashboardState } = cache.readQuery({ query: dashboardStateQuery });

        const data = {
          dashboardState: {
            __typename: 'DashboardState',
            activeOrderAttribute: activeOrderAttribute || dashboardState.activeOrderAttribute,
            displayOrder: displayOrder || dashboardState.displayOrder,
            search: search !== undefined ? search : dashboardState.search,
            filters: {
              __typename: 'FilterType',
              [VEHICLE_FILTER_ATTRIBUTES.LAST_CONTACTED_BY]: !!filters ? filters[VEHICLE_FILTER_ATTRIBUTES.LAST_CONTACTED_BY] : dashboardState.filters[VEHICLE_FILTER_ATTRIBUTES.LAST_CONTACTED_BY],
              [VEHICLE_FILTER_ATTRIBUTES.LAST_CONTACTED_DATE_START]: !!filters ? filters[VEHICLE_FILTER_ATTRIBUTES.LAST_CONTACTED_DATE_START] : dashboardState.filters[VEHICLE_FILTER_ATTRIBUTES.LAST_CONTACTED_DATE_START],
              [VEHICLE_FILTER_ATTRIBUTES.LAST_CONTACTED_DATE_END]: !!filters ? filters[VEHICLE_FILTER_ATTRIBUTES.LAST_CONTACTED_DATE_END] : dashboardState.filters[VEHICLE_FILTER_ATTRIBUTES.LAST_CONTACTED_DATE_END],
              [VEHICLE_FILTER_ATTRIBUTES.WITH_ALERTS]: !!filters ? filters[VEHICLE_FILTER_ATTRIBUTES.WITH_ALERTS] : dashboardState.filters[VEHICLE_FILTER_ATTRIBUTES.WITH_ALERTS],
              [VEHICLE_FILTER_ATTRIBUTES.WITH_SERVICE_DUE]: !!filters ? filters[VEHICLE_FILTER_ATTRIBUTES.WITH_SERVICE_DUE] : dashboardState.filters[VEHICLE_FILTER_ATTRIBUTES.WITH_SERVICE_DUE]
            }
          }
        };

        cache.writeData({ data });
        console.log("START");
        **console.log(new Date() - startTime); // THIS IS 3-4ms WHICH IS GREAT**
        return null;
      }
    }
  },
  defaults: {
    vehicleState: {
      __typename: 'VehicleState',
      state: 'active'
    },
    dashboardState: {
      __typename: 'DashboardState',
      activeOrderAttribute: VEHICLE_SORT_ATTRIBUTES.VEHICLE_ALERTS_COUNT,
      displayOrder:
        VEHICLE_LIST_SORT_ATTRIBUTES[VEHICLE_SORT_ATTRIBUTES.VEHICLE_ALERTS_COUNT].defaultOrder,
      filters: {
        __typename: 'FilterType',
        [VEHICLE_FILTER_ATTRIBUTES.LAST_CONTACTED_BY]: null,
        [VEHICLE_FILTER_ATTRIBUTES.LAST_CONTACTED_DATE_START]: null,
        [VEHICLE_FILTER_ATTRIBUTES.LAST_CONTACTED_DATE_END]: null,
        [VEHICLE_FILTER_ATTRIBUTES.WITH_ALERTS]: false,
        [VEHICLE_FILTER_ATTRIBUTES.WITH_SERVICE_DUE]: false
      },
      search: ''
    }
  },
  typeDefs
});
```
**How to read S1 from the from the cache?** 
I have stored the data in cache like this.
  
![cache](https://user-images.githubusercontent.com/30103626/51827470-8129e980-230f-11e9-8b85-71c28a1aee49.PNG)

Here is my Apollo-Client
![ap_client](https://user-images.githubusercontent.com/30103626/51827720-090ff380-2310-11e9-87d4-bcc407196da5.PNG)

If i'm reading using Fragment's like below i'm getting data as **_null_**

![c](https://user-images.githubusercontent.com/30103626/51827967-90f5fd80-2310-11e9-9c54-d4f158cc08dd.PNG)





<!--**Issue Labels**

While not necessary, you can help organize our issues by labeling this issue when you open it.  To add a label automatically, simply [x] mark the appropriate box below:

- [ ] has-reproduction
- [x] feature
- [ ] docs
- [ ] blocking
- [ ] good first issue

To add a label not listed above, simply place `/label another-label-name` on a line by itself.
-->
- [x] feature

Is it possible for child resolvers to define required fields (`fragment`), so that they are automatically added to the remote query, like in `graphql-tools`?

https://www.apollographql.com/docs/graphql-tools/schema-stitching.html

Im aware that this package is getting deprecated but this feature is still alpha in `apollo-client`.

I need to store function references in client state, is it possible with Apollo?
 
### Example 
Native iOS or Android like header component for web (on smaller screen widths). Would be nice to update the header anywhere in app, especially because what icons do on click and what title says usually depends on context/route/state of the world. 

Would be so nice to do something like this:

```graphql
# header component reads this 
# state and renders accordingly
type Header {
  title: String
  subtitle: String
  left: HeaderButton
  right: HeaderButton
}

type HeaderButton {
  icon: String
  callback: Function
}

extend type Query {
  header: Header
}
```

```js
// React component
function AnywhereInApp(props) {
  // writeData is here for demo purpouse, would
  // be a waste to (try) write on each re-render
  client.writeData({data: {
    header: {
      __typename: 'Header',
      title: 'New Title',
      subtitle: '',
      left: {
        icon: 'back-arrow',
        callback: () => {
          window.history.back();
        }
      },  
      right: {
        icon: 'settings',
        callback: () => {
          openSettingsModal();
        } 
      }
    }
  }});

  function openSettingsModal() {
    // do something
  }

  return (/* ... */);
}
```

Im currently managing local state with React context which can have any value (including references), I'd be very happy if I could 100% replace context client state management with Apollo.

---

I have one hack in mind and it's a spicy one:
* Set callback to window object, e.g to `window.myAppName[name]`
* Write callback `name` (string) instead of reference to store
* Read callback `name` from cache among other values
* Use callback like this `window.myAppName[name]()`

<!--**Issue Labels**

While not necessary, you can help organize our issues by labeling this issue when you open it.  To add a label automatically, simply [x] mark the appropriate box below:

- [ ] has-reproduction
- [x] feature
- [ ] docs
- [ ] blocking
- [ ] good first issue

To add a label not listed above, simply place `/label another-label-name` on a line by itself.
-->
Apollo Client 2.5 is going to be released very shortly, and will include integrated local state handling capabilities. The functionality offered by `apollo-link-state` will be included in the Apollo Client core, which means this project/repository will be deprecated. For those interested in trying out the new integrated local state features of AC, see https://github.com/apollographql/apollo-client/pull/4155 (the changes are currently available via `apollo-client@alpha` and `react-apollo@alpha`). We're still in alpha, but will be cutting over to beta soon (so if you have any feedback, please add your comments in https://github.com/apollographql/apollo-client/pull/4155). Thanks all!
<!--**Pull Request Labels**

While not necessary, you can help organize our pull requests by labeling this issue when you open it.  To add a label automatically, simply [x] mark the appropriate box below:

- [x] feature
- [ ] blocking
- [ ] docs

To add a label not listed above, simply place `/label another-label-name` on a line by itself.
-->

I want TypeScript support to know what methods/props the context `cache` has.
I'd like to store objects in the cache that should be treated as scalars by apollo. When writing the objects to the cache, no __typename should be required, and while reading the object no subfields should be required. 

As an example, let's assume that I have such a custom TypeScript type:

```typescript
type Highlight = { foo: string } | { bar: number } | { baz: boolean }
```

and would like to initialize the apollo client as follows:

```typescript
const client = new ApolloClient({
  clientState: {
    defaults: {
      highlight: { foo: "this" }
    },
    resolvers: {
      Mutation: {
        updateHighlight: (_, { newValue }, { cache }) => {
          cache.writeData({ data: { highlight: newValue }});
          return null;
        }
      }
    }
  }
})
```

So that I can use it in queries, without needing to specify the fields:

```graphql
query {
  highlight
}
```

In a schema I'd specify `Highlight` as a custom scalar, but I don't see any examples how to do that in apollo-link-state.

<!--**Issue Labels**

While not necessary, you can help organize our issues by labeling this issue when you open it.  To add a label automatically, simply [x] mark the appropriate box below:

- [ ] has-reproduction
- [x] feature
- [ ] docs
- [ ] blocking
- [ ] good first issue

To add a label not listed above, simply place `/label another-label-name` on a line by itself.
-->
If I try to execute an operation using execute on an apollo link state, resolver has no cache. Why ? : 
```js
function testLink = async function() {
  const result = await makePromise(
    execute(linkState, {
      query: SET_VIDEO_STATE,
      variables: {
        currentTime: 2000
      }
    })
  );
};

// resolver :
setVideoState: (_, variables, { cache, getCacheKey }) => {
  // cache is undefined.
}
```