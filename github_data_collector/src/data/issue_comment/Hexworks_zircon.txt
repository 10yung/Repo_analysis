Analogous to Components the builder for MultiSelect is provided by the new object Fragments. More fragments might be added the same way.
This is just a collection of missing libgdx features, which could be implemented  to be feature complete with the Swing implementation:

- [ ] modifiers (e.g. texture modifiers)
- [ ] are graphical tilesets fully implemented ?
# A component is sometimes not correctly rendered

## Expected behavior
The component shall be aligned correctly regarding the alignment

## Actual behavior
Sometimes the component is cut at the edge of the screen if using the current master of Zircon

## Steps to reproduce the bug
Restart the following app a couple of times to reproduce the issue

```kotlin
package org.hexworks.zircon.examples.components


import org.hexworks.zircon.api.CP437TilesetResources
import org.hexworks.zircon.api.ColorThemes
import org.hexworks.zircon.api.Components
import org.hexworks.zircon.api.SwingApplications
import org.hexworks.zircon.api.application.AppConfig
import org.hexworks.zircon.api.component.ComponentAlignment
import org.hexworks.zircon.api.data.Size
import org.hexworks.zircon.api.extensions.box
import org.hexworks.zircon.api.screen.Screen
import org.hexworks.zircon.internal.component.renderer.NoOpComponentRenderer

object PanelsExampleIssue {

    private val theme = ColorThemes.techLight()
    private val tileset = CP437TilesetResources.rexPaint20x20()

    @JvmStatic
    fun main(args: Array<String>) {

        val tileGrid = SwingApplications.startTileGrid(AppConfig.newBuilder()
                .withDefaultTileset(tileset)
                .withSize(Size.create(60, 30))
                .build())

        val screen = Screen.create(tileGrid)


        val component = Components.button()
                .withDecorations(box())
                .withSize(18, 5)
                .withComponentRenderer(NoOpComponentRenderer())
                .withAlignmentWithin(screen, ComponentAlignment.BOTTOM_RIGHT)
                .build()

        screen.addComponent(component)

        screen.display()
        screen.theme = theme

    }
}
```

# Request for feature `MultiSelect`
I would like to see a small `Component` to select one value out of a list of possible values. The typical UI-Element would be a drop down menu, but that would need an overlay for the value list, so the simpler way would be to have a left-button and a right-button to scroll through the values. Or speaking in images, two examples:
![example gif](https://cdn.discordapp.com/attachments/363754040103796737/663508402411929602/multiselect_example.gif)

## Rationale
There are quite some `Components` provided by Zircon but none to have a simple way of selecting one value of a fixed list of possibilities. There are radio buttons, but you have to put those together yourself and it takes a lot of space. When you only have one line and a specific width, the `MultiSelect` like proposed is an easy solution.

## Suggested way of implementing
I already implemented it [in my project](https://github.com/Baret/pltcmd/blob/master/src/main/kotlin/de/gleex/pltcmd/ui/fragments/MultiSelect.kt) as `Fragment`, but I would expect it to be available in the `Components` class. It wouldn't be hard to provide it as both, a `Component` and a `Fragment`.
I am ready to provide a pull reqeust for this feature soon.
# Cursor is still blinking on the screen after modal is closed

Run example, enter sth in the text area and press ESCAPE . The dialog is closed but the cursor is still blinking

## Steps to reproduce the bug
```kotlin
package org.hexworks.zircon.examples


import org.hexworks.zircon.api.ColorThemes
import org.hexworks.zircon.api.Components
import org.hexworks.zircon.api.GameComponents
import org.hexworks.zircon.api.SwingApplications
import org.hexworks.zircon.api.application.AppConfig
import org.hexworks.zircon.api.builder.component.ModalBuilder
import org.hexworks.zircon.api.color.ANSITileColor
import org.hexworks.zircon.api.color.TileColor
import org.hexworks.zircon.api.component.ComponentAlignment
import org.hexworks.zircon.api.data.*
import org.hexworks.zircon.api.extensions.alignmentWithin
import org.hexworks.zircon.api.extensions.box
import org.hexworks.zircon.api.extensions.shadow
import org.hexworks.zircon.api.game.GameArea
import org.hexworks.zircon.api.game.base.BaseGameArea
import org.hexworks.zircon.api.graphics.Symbols
import org.hexworks.zircon.api.screen.Screen
import org.hexworks.zircon.api.uievent.*
import org.hexworks.zircon.internal.component.modal.EmptyModalResult

object CustomGameAreaExample {

    val theme = ColorThemes.adriftInDreams()

    class CustomGameArea(visibleSize: Size3D,
                         actualSize: Size3D) : BaseGameArea<Tile, Block<Tile>>(
            initialVisibleSize = visibleSize,
            initialActualSize = actualSize)

    @JvmStatic
    fun main(args: Array<String>) {

        val gameArea = CustomGameArea(VISIBLE_SIZE, ACTUAL_SIZE)
        val theme = ColorThemes.amigaOs()

        makeCaves(gameArea)

        val tileGrid = SwingApplications.startTileGrid(AppConfig.newBuilder()
                .withSize(VISIBLE_SIZE.to2DSize())
                .enableBetaFeatures()
                .build())

        val screen = Screen.create(tileGrid)

        screen.addComponent(GameComponents.newGameComponentBuilder<Tile, Block<Tile>>()
                .withSize(VISIBLE_SIZE.to2DSize())
                .withGameArea(gameArea)
                .build())

        screen.display()

        Thread.sleep(500)
        openModal(screen)

    }

    private fun openModal(screen: Screen, level: Int = 1) {

        val modalPanel = Components.panel()
                .withSize(Size.create(30, 20))
                .withDecorations(box(title = "Modal level: $level"), shadow())
                .build()

        val modal = ModalBuilder.newBuilder<EmptyModalResult>()
                .withComponent(modalPanel)
                .withParentSize(screen.size)
                .withColorTheme(theme)
                .build().apply {
                    handleKeyboardEvents(KeyboardEventType.KEY_PRESSED) { event, _ ->
                        if (event.code == KeyCode.KEY_C) {
                            close(EmptyModalResult)
                            Processed
                        } else Pass
                    }
                }

        val closeButton = Components.button()
                .withText("Close")
                .withAlignment(alignmentWithin(modalPanel, ComponentAlignment.BOTTOM_RIGHT))
                .build().apply {
                    handleComponentEvents(ComponentEventType.ACTIVATED) {
                        modal.close(EmptyModalResult)
                        Processed
                    }
                }

        val inputArea = Components.textArea()
                .withText("Enter Text here")
                .withAlignment(alignmentWithin(modalPanel, ComponentAlignment.CENTER))
                .build().apply {
                    handleKeyboardEvents(KeyboardEventType.KEY_PRESSED) { event, phase ->
                        if (event.code == KeyCode.ESCAPE)
                            modal.close(EmptyModalResult)
                        Processed
                    }
                }


        modalPanel.addComponent(closeButton)
        modalPanel.addComponent(inputArea)

        screen.openModal(modal)

    }

    private fun makeCaves(gameArea: GameArea<Tile, Block<Tile>>, smoothTimes: Int = 8) {
        val width = gameArea.actualSize.xLength
        val height = gameArea.actualSize.yLength
        var tiles: MutableMap<Position, Tile> = mutableMapOf()
        gameArea.actualSize.to2DSize().fetchPositions().forEach { pos ->
            tiles[pos] = if (Math.random() < 0.5) FLOOR else WALL
        }
        val newTiles: MutableMap<Position, Tile> = mutableMapOf()
        for (time in 0 until smoothTimes) {

            for (x in 0 until width) {
                for (y in 0 until height) {
                    var floors = 0
                    var rocks = 0

                    for (ox in -1..1) {
                        for (oy in -1..1) {
                            if (x + ox < 0 || x + ox >= width || y + oy < 0
                                    || y + oy >= height)
                                continue

                            if (tiles[Position.create(x + ox, y + oy)] === FLOOR)
                                floors++
                            else
                                rocks++
                        }
                    }
                    newTiles[Position.create(x, y)] = if (floors >= rocks) FLOOR else WALL
                }
            }
            tiles = newTiles
        }
        tiles.forEach { pos, tile ->
            val pos3D = pos.to3DPosition(0)
            gameArea.setBlockAt(pos3D, Block.newBuilder<Tile>()
                    .withContent(tile)
                    .withEmptyTile(Tile.empty())
                    .build())
        }
    }

    private val FLOOR = Tile.newBuilder()
            .withCharacter(Symbols.INTERPUNCT)
            .withForegroundColor(ANSITileColor.YELLOW)
            .buildCharacterTile()

    private val WALL = Tile.newBuilder()
            .withCharacter('#')
            .withForegroundColor(TileColor.fromString("#999999"))
            .buildCharacterTile()

    private val VISIBLE_SIZE = Size3D.create(60, 30, 10)
    private val ACTUAL_SIZE = Size3D.create(100, 100, 200)


}

```

# Modals should inherit the theme from their parent screen

## Reason
If you do not see the theme manually via the ModalBuilder, the dialog may be visually distracted
# Request for a Drop Down control/Combo box control
Drop Down/Combo box control as you know from all major UI frameworks

## Suggested way of implementing 
Probably there should be first a list box developed, since then this can be reused for this control

Right now some of the component states (like disabled `TextArea`s) are not visually apparent to the user. This needs to be checked for all states of all components.
When running `LayerTransformerExample` the example using the `HideModifier` is not using transparency:

```kotlin
object HideModifier : TileTransformModifier<CharacterTile> {

    override val cacheKey: String
        get() = "Modifier.HideModifier"

    override fun canTransform(tile: Tile) = true

    override fun transform(tile: CharacterTile) = Tiles.empty()

}
```