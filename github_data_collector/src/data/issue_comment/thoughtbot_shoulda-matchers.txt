Hi, this PR solves the issue #1252. 

It's a draft for now, I would love to know your opinion about it.

One of the things that needs to be improved in this PR is the creation of the `action_text_rich_texts` table. I'm out of ideas for now, any suggestions?
This issue exists to collect the intermittent failures that sometimes pop up on Travis.

* [`missing attribute: :scope1`](https://travis-ci.org/thoughtbot/shoulda-matchers/jobs/614520348)
Hello, first of all, thank you all for maintaining and improving this gem.

So, I was wondering if there it's a possibility to add something like this:

```
it { is_expected.to have_rich_text(:body) }
```

To test ActionText with RSpec. Example:

```
class Post < ApplicationRecord
  has_rich_text :body
end
```

I would love to work on this if by chance this suggestion is accepted.

Thank you for your time.

EDIT: For now I'm using a custom matcher:

```
RSpec::Matchers.define :have_rich_text do |expected|
  match do |actual|
    actual.send(expected).class == ActionText::RichText
  end
end
```
> We're a bit behind in supporting Minitest at the moment. I don't think we even test that you can use controller matchers in an ActionDispatch::IntegrationTest (although in theory they should work).
> 
> I know the README advises staying on shoulda-matchers 2.x, but given that we are to 4.x now, what if you try upgrading? There's a pre-release version of shoulda-context out that should fix any compatibility issues. Instead of using this in your gemfile,
> 
> ```
> gem 'shoulda', '~> 3.5'
> gem 'shoulda-matchers', '~> 2.0'
> ```
> 
> try:
> 
> ```
> gem 'shoulda-context', '2.0.0.rc2'
> gem 'shoulda-matchers', '~> 4.0'
> ```
> 
> Then add the following to your `test_helper`:
> 
> ``` ruby
> Shoulda::Matchers.configure do |config|
>   config.integrate do |with|
>     with.test_framework :minitest
>     with.library :rails
>   end
> end
> ```
> 
> _Originally posted by @mcmire in https://github.com/thoughtbot/shoulda-matchers/issues/1247#issuecomment-542924409_

I noticed this comment in #1247. I went ahead and tried this myself and was able to start using the v4.1.2 matchers without issue. I'm using Minitest. I'm curious what's holding back support of minitest with shoulda-context? And even so, should the docs for shoulda-matchers be updated to suggest people use the above suggestion instead of such an old version of shoulda-mathers?
I just wrote this in case you're interested in using something like it

```ruby
# Usage:
#    it { is_expected.to use_save_callback(:something_i_keep, :before) }
#    it { is_expected.to use_touch_callback(:something_i_touch, :after) }
#    it { is_expected.to use_commit_callback(:something_i_commit_to, :after) }
#
#  available_callbacks = ActiveRecord::Callbacks::CALLBACKS.map {|name| name.to_s.gsub(/(after|before|around)_/, '') }.uniq.map(&:to_sym)
available_callbacks = [:initialize, :find, :touch, :validation, :save, :create, :update, :destroy, :commit, :rollback]
available_callbacks.each do |available_callback|
  RSpec::Matchers.define :"use_#{available_callback}_callback" do |callback_name, callback_kind|
    match do
      expect(callbacks_for_kind_names(callback_kind)).to include(callback_name)
    end

    description do
      "have #{subject_class.name} '#{callback_kind}_#{callback_event_name} :#{callback_name}'"
    end

    failure_message do
      "expected #{subject_class.name} #{[callback_event_name, callback_name, callback_kind].inspect} to be in #{callback_names_and_kinds.inspect}"
    end

    failure_message_when_negated do
      "expected #{subject_class.name} #{[callback_event_name, callback_name, callback_kind].inspect} would not be in #{callback_names_and_kinds.inspect}"
    end

    def callbacks_for_kind_names(callback_kind)
      callbacks_for_kind(callback_kind).map(&:filter)
    end

    def callbacks_for_kind(callback_kind)
      callbacks.select {|callback| callback.kind.eql?(callback_kind) }
    end

    def callback_names_and_kinds
      callbacks.map {|callback| [callback_event_name, callback.filter, callback.kind] }
    end

    def callbacks
      @callbacks ||= subject_class.public_send(:"_#{callback_event_name}_callbacks")
    end

    define_method(:callback_event_name) do
      available_callback
    end

    def subject_class
      subject.class
    end
  end
end
```
Update instructions from https://thoughtbot.com/blog/shoulda-matchers-3-0
I'm using rails 6 and with most of ActionController matchers is not working.

## Tests Controller
```ruby

require 'test_helper'

class GradesControllerTest < ActionDispatch::IntegrationTest
  extend Shoulda::Matchers::ActionController

  context 'GET #index' do
    setup { get :index }

    should use_before_action(:set_course)
    should render_template('index')
    should respond_with(:success)
  end
```

## Errors
```ruby
/home/juanfra/.rbenv/versions/2.6.3/lib/ruby/gems/2.6.0/gems/shoulda-matchers-2.8.0/lib/shoulda/matchers/active_model/validate_inclusion_of_matcher.rb:251: warning: BigDecimal.new is deprecated; use BigDecimal() method instead.
Run options: --seed 61573

# Running:

.E

Error:
GradesControllerTest#test_: GET #index should render template index. :
NoMethodError: undefined method `body' for nil:NilClass
    


rails test /home/xxxx/.rbenv/versions/2.6.3/lib/ruby/gems/2.6.0/gems/shoulda-context-1.2.2/lib/shoulda/context/context.rb:346

E

Error:
GradesControllerTest#test_: GET #index should respond with 200. :
NoMethodError: undefined method `response_code' for nil:NilClass
    

rails test /home/xxxx/.rbenv/versions/2.6.3/lib/ruby/gems/2.6.0/gems/shoulda-context-1.2.2/lib/shoulda/context/context.rb:346
```


## Gemfile
```ruby

group :test do
  # Adds support for Capybara system testing and selenium driver
  gem 'capybara', '>= 2.15'
  gem 'selenium-webdriver'
  gem 'simplecov', require: false, group: :test
  # Easy installation and use of web drivers to run system tests with browsers
  gem 'webdrivers'

  gem 'rails-controller-testing'
  gem 'shoulda', '~> 3.5'
  gem 'shoulda-matchers', '~> 2.0'
end
```

I think this is someway relate to this issues #1229, #1217, #1158.

I have add this line to make it work for some of the matchers as you suggest in #1158 :
```ruby
extend Shoulda::Matchers::ActionController
```
But in the matchers that need the className is not working at all. 
This feels similar to this long-ago bug - https://github.com/thoughtbot/shoulda-matchers/issues/203 - which was fixed here - https://github.com/thoughtbot/shoulda-matchers/pull/592

Model of:

```
class Classification < ApplicationRecord
  belongs_to :classifiable, polymorphic: true
  belongs_to :topic

  validates :classifiable_id, :uniqueness => { :scope=> [:topic_id, :classifiable_type] }
end
```

Spec of:

```
require "rails_helper"

describe Classification do
  it { should belong_to(:classifiable) }
  it { should belong_to(:topic) }

  it "ensures uniqueness" do
    create(:classification)
    should validate_uniqueness_of(:classifiable_id).scoped_to([:topic_id, :classifiable_type])
  end
end
```

Relevant output is:

```
Failures:

  1) Classification ensures uniqueness
     Failure/Error: should validate_uniqueness_of(:classifiable_id).scoped_to([:topic_id, :classifiable_type])
     
     ActiveRecord::SubclassNotFound:
       Invalid single-table inheritance type: Show is not a subclass of Shoulda::Matchers::ActiveRecord::Uniqueness::TestModels::Producu
     # ./spec/models/classification_spec.rb:9:in `block (2 levels) in <top (required)>'
```

That `::Producu` on the very end there in the error makes me suspect that we're calling `next` on a string with `Product` (or something?) somewhere in the codebase.


Add `have_implicit_order_column` matcher to test rails 6 [implicit_order_column](https://github.com/rails/rails/pull/34480)
It looks like `validate_absence_of` doesn't work with array columns. For example, given a Rails application (using Postgres) that has migration with this line:

```ruby
t.string :widgets, array: true
```

and the following model validations:

```ruby
validates :widgets, absence: true
```

and the following test:

```ruby
it { should validate_absence_of(:widgets) }
```

the matcher fails and produces the error below:

```
Expected SomeModel to validate that :widgets is empty/falsy, but
this could not be proved.
  After setting :widgets to ‹"an arbitrary value"› -- which was
  read back as ‹[]› -- the matcher expected the SomeModel to be
  invalid, but it was valid instead.

  As indicated in the message above, :widgets seems to be
  changing certain values as they are set, and this could have something
  to do with why this test is failing. If you've overridden the writer
  method for this attribute, then you may need to change it to make this
  test pass, or do something else entirely.
```

I think this is happening because the value chosen to test for presence ([here](https://github.com/thoughtbot/shoulda-matchers/blob/c32307fe3309fefea0398f6cd4e850d8e992046c/lib/shoulda/matchers/active_model/validate_absence_of_matcher.rb#L111)) is the string `"an arbitrary value"`. Because it's setting an array column, the string is being converted to `[]`, so the test fails.

Ideally it would know that it's an array column and use something like `['an arbitrary value']` instead. There is an `array` method it could use in the `Column` class: `@subject.class.columns_hash[@attribute.to_s].array`.