With `XDG_DATA_HOME` set (i..e basher is installed to ~/.local/share/basher)
```bash
basher install shellspec/shellspec
```
created `~/.basher` and installed under that folder.

[Specification](https://specifications.freedesktop.org/basedir-spec/basedir-spec-latest.html)

Arch Linux has a useful summary of [defaults](https://wiki.archlinux.org/index.php/XDG_Base_Directory)

First shot at closing #67 
We're using gitlab internally, which a) operates on port 10022 and b) supports nested namespaces. I can imagine a shortcut, so that when somebody types `basher install git@gitlab.internal:10044/group/subgroup/project` basher takes the uri as-is.
for example: `site/package@my/brach` 
the format could be: `site/package#commitsha` (similar to `npm`)
This PR is a proof-of-concept to address the issues discussed in #49.  Specifically, it:

* Removes the unnecessary (and undesirable) physical path resolution in `basher-link`
* Removes code duplication (of `resolve_link`) across multiple files
* Implements symlink resolution in a way that works on any platform with `readlink`, including busybox, docker alpine bash images, and OS X *without* homebrew
* Vendors the symlink resolution code in such a way that it does not require copy-and-paste to update, nor does it require extra steps for end users to install

It does this by adding a new file, `libexec/basher.realpath`.  This file can be sourced by anything that wants to use `realpath.*` functions (such as `basher-link` and its tests), and it also works as a bootstrap loader for `basher`.  `bin/basher` links to `libexec/basher.realpath`, which when run computes the location of the `libexec` dir, puts it on the path, and then exec's `libexec/basher`.  This allows `libexec/basher` to forego any symlink calculations of its own.

The `libexec/basher.realpath` file is tracked under revision control, so a checkout of basher is *immediately usable without any other steps*, just as before.

However, if a new upstream version of bashup/realpaths is needed, a developer can:

```shell
$ git -C vendor/bashup/realpaths pull  # pull updated version
$ make vendor test  # rebuild and test
$ git commit -a     # check in changes
```


In this way, the distributed version can be kept up to date with the upstream code, without any manual copy-and-paste.
Replaces #37

@pjeby @hugot @pawamoy 
Tried installing https://github.com/bashup/gitea-cli, but the only files are in ~/.basher/cellar/bin, not ~/.basher/bin, as described in the basher install files for what to set your path to.

Is it correct to have ~/.basher/cellar/bin in the path variable as well, or should it be linking packages to ~/.basher/bin?

Confused.
I have some scripts that depend on basher being initialized, and I would like to run them in non-terminal places like GUI or Conky.

To do that I had written my own wrapper, but I now think  it could be included in basher as a `run` command.

The `run` command would be written like:

```bash
# get basher install dir
basher_path="$(dirname "$(dirname "$(readlink -e "$0")")")"

# set path
export PATH="${basher_path}/bin:${PATH}"

# init basher
eval "$(basher init - bash)"

# execute given command
"$@"
```

(Note this is written for bash only, I did not consider other shells)

You would typicall call it like
```bash
~/.basher/bin/basher run my_script my_args
```

An example for Conky:
```lua
${execpi 5 ~/.basher/bin/basher run my_script my_args}
```

This allows for scripts to include other scripts that include other scripts without sourcing the same scripts multiple times.