Added reference to initializer file name audited.rb
Replace the hardcoded error message for a blank audit comment with Rails' default. This meet's Rails' convention, and allows i18n support.
## Change

If a model requires audit comments, but you only change attributes that are excluded from auditing, then don't require an audit comment.

## Example of need

I'm working on a project with Southwark Council. We are creating a public audit log of changes to affordable housing in the local area. I have needed to monkey patch this fix/feature in twice:

https://github.com/dxw/affordable-housing-monitoring/commit/1f0bc0d85bb9ce167ba1979276a7da37d7353ff7#diff-70e52879b0769bbfd76a2cc96ac3e32aR38 - I don't want to create an audit log entry when changing the aasm state field. By adding the `state` field as an excluded column, this fixes that, but then creates a validation error if I turn on `comment_required`

https://github.com/dxw/affordable-housing-monitoring/commit/b5c6475235f11cd709329bfa2f4e6ca53a68e864#diff-02864dac712ea1f466e4165075e103cdR23 - A different user of the system edits two attributes on this model to the other attributes on the model, and I don't want to create audit logs for these either. Same problem as above

## Considerations

I am pretty certain that this is a bug when it comes to updating a model. However, my suggested fix also makes it so that an audit comment isn't required if you're *creating* a model where only excluded attributes are present. I think there is more room for debate around whether this is expected/desired behaviour.

We would like to store the `audits` table in a separate database.  With Rails 6 or [ankane/multiverse](https://github.com/ankane/multiverse), I can do that by setting up an abstract base record for all models I want to store in a secondary database:

```ruby
class SecondaryRecord < ActiveRecord::Base
  self.abstract_class = true
  connects_to database: { writing: :secondary, reading: :secondary_replica }
end
```
and would then want to set up the audit model to live there:
```ruby
class CustomAudit < SecondaryRecord
end
```

But since that `CustomAudit` record does not inherit from `Audited::Audit`, this won't really work.

This pull request creates an `Audited::Auditable` concern which lets me store audits in the secondary database like so:

```ruby
class CustomAudit < SecondaryRecord
  include Audited::Auditable
end
```

I am referring to the associated_id, associated_type, user_id and user_type columns.
I only have a small Rails API and only have 1 model so no associations. 
When audited populates the table all of these 4 columns are populated with NULL and I'd idealling like to remove them.

I have tried removing all references to them in the migration file but that returns the Error:ActiveModel::MissingAttributeError:
       can't write unknown attribute `user_id`

Is there a way to simply remove these columns from the table?
This changes adds support to apartment users, setting tenant_id to audit using the method current_tenant.
* [This commit](d79451d948b722d6cbafb87b1a4e3b32e15fd9de) added the
`redacted` feature, which should redact chosen attributes while not
ignoring them completely. It was previously only working on update; this
commit makes it work on create as well.

* Additionally, redacted attributes (with the correct redaction value)
were showing up in `audited_changes` column, even if they weren't
changed. This fixes that as well.

Resolves https://github.com/collectiveidea/audited/issues/515
The enum change (#429) is a major breaking change but is not listed under `Breaking Changes` (data in the database still contains the enum string values).

Ideally the `CHANGELOG` would list the enum change as such, and provide a migration path for users who already rely on the behavior of `4.8.0`.

Also, semi-related - The [CHANGELOG](https://github.com/collectiveidea/audited/blob/master/CHANGELOG.md) still says `4.9.0` is unreleased even though it's in [releases](https://github.com/collectiveidea/audited/releases) (or if it's trying to show nothing under UNRELEASED, that is not very clear).

cc @fatkodima 

-----

**EDIT**: Deleted some paragraph saying that reverting #429 still produced different results - that was due to a bad merge conflict resolution 🤦‍♂ Reverting the PR fixes the issue.
It would be useful if this could audit when an object was accessed using the after_find ActiveRecord callback. Additionally,  auditing of the after_archive callback from the act_as_archival project.
when saving the audit for a create action, fields marked as redacted have their value saved in the database, on update the value is correctly ignored