There's no documentation on your website https://gridstylesheets.org/

I understand that the project is dead, but you probably should shut down the website.
112 open issues, last commit was a year ago, and gridstylesheets.org has a new owner.
Hello, I really liked the project and it looks pretty promising
I was wondering if it is possible that I can take the result of a parsed layout, cuz i want to use that for canvas games to maintain the layout. 
i.e 
`#ball[center-x] == #basket[center-x];
#ball[bottom] == #basket[bottom];`
can I use something like GSSEngine.getPropertiesById("ball")
Yet another oddity I've come across regarding inline gss vs external gss. This following code

```
@if ::window[width] >= 600 {
  #test-div{
    background-color:blue;  
  }   
}@else{
  #test-div{
    background-color:green;      
  }
}

#test-div{
  size:==100; 
}
```

does not work at all when inside a gss file that is linked by the main html page. Not even the @else triggers. However, if applied inline, in the head section of the page, it works.

I can verify that this problem only arises with properties such as ::window[width] and $scroll-top. When using other properties such as div[width] for the condition, I'm having no issues. 

Anyone know the reason behind this? It feels as if the external gss file can't access properties such as ::window[width] and $scroll-top but that can't be the case since I'm able to use them in other sections of my code.

It appears "position: fixed" doesn't work in GSS as it did in regular CSS. 
I've made a header that I need to be at the top of the window, always, and it makes full use of GSS to center buttons, logo etc. 
Is there any property I can use that would take into account the scroll position of the viewport? 

Load this with `?log=1` and note `#query[width]` has a value of 0.

```
<span id="spanner"></span>  
<input id="query"  type="text" value="" />
<style type="text/gss">
        @h (#spanner)(#query) in(::window) ; 
        #query[width] > 100 !require;
</style>

```

When I use the code below `#thing` get a width of 0.

```
#content {
  width: == 800;
  #thing {
    width: == ^[width];
  }
}
```

But when I reference `#content` directly `#thing` gets a width of 800 as expected.

```
#content {
  width: == 800;
  #thing {
    width: == ($ #content)[width];
  }
}
```

What am I missing? Why doesn't the first code work?

Would it be possible to support the ::before and ::after pseudo elements? I would expect the code below to show a red rectangle in the center of the screen ... but the pseudo element is not positioned/styled.

```
#content {
  width: == 200;
  height: == 200;
  center: == ::window[center];
}

#content::before {
  content: ' ';
  background-color: red;
  width: == #content[width];
  height: == #content[height];
}
```

It is my understanding that GSS does not support this syntax:

``` sass
#selector {
  myBGC == #f00;

  background-color :== myBGC;
}

#another-selector {
  background-color :== #selector[background-color];
}
```

I was unable to make this snippet work with any variation of variable declaration, type of color syntax used (i.e. `blue`, `#fff`, `rgb(1, 2, 3)`)

Is binding to `background-color` and other color-related items supported? Or is that something I would have to handle myself manually, or by using another CSS/JS framework?

is there build documentation? I didn't see any on the README, around the dirtree, or at [the website](http://gridstylesheets.org/usage/client-side/).

what I tried:
1. `git clone`
2. `git checkout v2.0.0`
3. `grunt clean`
4. `grunt build`

Grunt produced a 448 byte file, instead of a [1000 KB](https://github.com/gss/engine/blob/master/dist/gss.js) one. indeed there was nothing of note inside. I tried some other things like `grunt browserify` and `grunt uglify` and still couldn't produce anything.

log:

```
➤ grunt build
Running "browserify:spec" (browserify) task
>> Bundle spec/js/specs.js created.

Running "uglify:engine" (uglify) task
File "./dist/gss.min.js" created.
Original: 454 bytes.
Minified: 448 bytes.

Running "usebanner:dist" (usebanner) task
✔ grunt-banner completed successfully

Done, without errors.
```
