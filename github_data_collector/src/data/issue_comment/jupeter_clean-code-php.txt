Does anyone have a or know of a concrete example of php code that would reflect "Clean Architecture" page 166 figure 17.1.  I simply can wrap my head around it?  

the attached code represents examples of what I have written so far, but I know this will not work for anything but a SQL database.  In my example My use case is simple, I am trying to have a use log into the system.  Please ignore my namespace names as I am trying to rework my code from a homemade "MVC" framework.  Finally the view component was not included because it is trivial, it send a json string.

Thanks 
ken
 




[Login Code.zip](https://github.com/jupeter/clean-code-php/files/2649971/Login.Code.zip)



[Avoid type-checking](https://github.com/jupeter/clean-code-php#avoid-type-checking) doesn't address a realistic situation in which one might do type checking. If type declaration can be used that's great, but often it's not the case.

One major issue that PHP doesn't support [union or intersection types](https://medium.com/@ondrejmirtes/union-types-vs-intersection-types-fd44a8eacbb).

```php
/**
 * @param \Traversable&\Countable $iterator
 * @return \Generator
 */
function iterator_chop(\Traversable $iterator): \Generator
{
    $piles = count($iterator); // Might not be countable
    // ....
}
```

Again in the second example

```php
/**
 * @param int|float $val1
 * @param int|float $val2
 * @return int|float
 */
function combine($val1, $val2)
{
    return $val1 + $val2; // Are these numbers?
}
```

In the second case, it's likely for the code to work without an error as first, but result in an unexpected error or, event worst, an unexpected result later.

No type checking goes against the ["Fail fast" principle](https://www.martinfowler.com/ieeeSoftware/failFast.pdf), which prevents you having to chase bugs through the code.

While static code analysis does a good job, it doesn't capture all issues.

The argument about it being to verbose isn't that strong, as you have many solutions to write it as one line. For instance with [beberlei/assert](https://github.com/beberlei/assert).
https://github.com/jupeter/clean-code-php#dont-write-to-global-functions

Could you explain please why you suggest class as a alternative of function in this case?
Why classes whouldn't conflict between each other like functions in that example?
And why namespaces and naming convenction wouldn't resolve this sort of issue?

I guess such kind of a solution would work fine as  well:

```
use function \App\Helpers\config as myConfig; //just for instance
use function \Path\To\Imported\Package\config;

$app = new Application();

$app->setConfig(myConfig());
$app->setConfig(config());
```


In [ISP](https://github.com/jupeter/clean-code-php/blob/master/README.md#interface-segregation-principle-isp) there are severe design flaws which clearly indicate you have no experience with goverment employees:
```php
class Human implements Employee
{
    public function work(): void
    {
        // ....working  --> instance would likely throw UnknownOperationException
    }

    public function eat(): void
    {
        // ...... eating in lunch break --> entire working hours IS-A lunch break; it may or may not have anything to do with eating
    }
}
```

Also, in **Good:** _Not every worker is an employee, but every employee is a worker_. --> Again, you have not met goverment employees.

All this makes it confusing to grasp the concept for some instances   :wink:
You could really add a good multi-inheritance or composition example by mentioning threads. Although they may force a developer to jump into polimorphic tables, they are a great way to handle this.

I can't find an example of use of trait anywhere on your "clean-code-php" guide.
'Balance' as a noun is the name of the _number_ representing the amount of money in your account. You cannot withdraw or deposit the actual number. You can however:

- withdraw money
- deposit money
- increase balance (by depositing money)
- decrease balance (by withdrawing money)

I'd just call the two functions withdraw() and deposit(). They're not ambiguous, as there's only one thing you can withdraw/deposit (money).
In the comment for Liskov Substitution Principle bad example :

```
function renderLargeRectangles(Rectangle $rectangles): void
{
    foreach ($rectangles as $rectangle) {
        $rectangle->setWidth(4);
        $rectangle->setHeight(5);
        $area = $rectangle->getArea(); // BAD: Will return 25 for Square. Should be 20.
        $rectangle->render($area);
    }
}

$rectangles = [new Rectangle(), new Rectangle(), new Square()];
renderLargeRectangles($rectangles);
```

For a square the math is right as getArea() should return 25, not 20.
I understand that it implies 20 for 4x5, but this is only for not square and Square is explicitely used. 
The example and comment "Should be 20" are confusing.

Edit :
Additionnaly, if the height/width/length are in constructor as seen in https://github.com/jupeter/clean-code-php/pull/106/commits/acf92a1997353109f278d257b1772c8c1696263f and not defined in a function.
You then have :
```
function renderLargeRectangles(Rectangle $rectangles): void
{
    foreach ($rectangles as $rectangle) {
        $area = $rectangle->getArea(); // GOOD: Will return 25 for Square.
        $rectangle->render($area);
    }
}

$rectangles = [new Rectangle(4, 5), new Rectangle(4, 5), new Square(5)];
renderLargeRectangles($rectangles);
```
And the example becomes correct but I'm being fussy.
Maybe we should use spoilers for examples?
This is just an idea.

---

### Avoid conditionals

This seems like an impossible task. Upon first hearing this, most people say,
"how am I supposed to do anything without an `if` statement?" The answer is that
you can use polymorphism to achieve the same task in many cases. The second
question is usually, "well that's great but why would I want to do that?" The
answer is a previous clean code concept we learned: a function should only do
one thing. When you have classes and functions that have `if` statements, you
are telling your user that your function does more than one thing. Remember,
just do one thing.

<details>
 <summary>Bad:</summary>

```php
class Airplane
{
    // ...

    public function getCruisingAltitude()
    {
        switch ($this->type) {
            case '777':
                return $this->getMaxAltitude() - $this->getPassengerCount();
            case 'Air Force One':
                return $this->getMaxAltitude();
            case 'Cessna':
                return $this->getMaxAltitude() - $this->getFuelExpenditure();
        }
    }
}
```
</details>

<details>
 <summary>Good:</summary>

```php
interface Airplane
{
    // ...

    public function getCruisingAltitude();
}

class Boeing777 implements Airplane
{
    // ...

    public function getCruisingAltitude()
    {
        return $this->getMaxAltitude() - $this->getPassengerCount();
    }
}

class AirForceOne implements Airplane
{
    // ...

    public function getCruisingAltitude()
    {
        return $this->getMaxAltitude();
    }
}

class Cessna implements Airplane
{
    // ...

    public function getCruisingAltitude()
    {
        return $this->getMaxAltitude() - $this->getFuelExpenditure();
    }
}
```
</details>

----

I offer this only because the document is very large.

There is another solution.
Move sections to separate files.

```
├ README.md
├ variables
│ ├ use-meaningful-and-pronounceable-variable-names.md
│ ├ use-the-same-vocabulary-for-the-same-type-of-variable.md
│ ├ ...
│ └ use-default-arguments-instead-of-short-circuiting-or-conditionals.md
├ ...
├ solid
│ ├ srp.md
│ ├ ocp.md
│ ├ lsp.md
│ ├ isp.md
│ └ dip.md
├ dry.md
└ translations.md
```

This will make it possible to use a more detailed description for each example.
Yet again. It's just an idea.
This doesn't provide any useful explanation when and why to use public, private and protected access modifiers.

Consider adding explanation that

1. `public` methods and properties are most dangerous for changes, because some outside code may easily rely on them and you can't control what code relies on them. Modifications in class are dangerous  for all users of class.
2. `protected` methods are as dangerous as public, because they are available in scope of any child class. This effectively means that difference between `public` and `protected` is only in access mechanism, but encapsulation guarantee remains the same. Modifications in class are dangerous for all descendant classes.
3. `private` methods are your safe harbor in this doubtful world. They guarantee you that code in your methods is dangerous to modify only in boundaries of single class (which means that when you have tests for your protected/public methods that cover all calls of your private method, and as long as you don't do magic, like side effects or usage of global state, you are safe for modifications and you won't have [Jenga effect](http://www.urbandictionary.com/define.php?term=Jengaphobia&defid=2494196)).

Therefore, use `private` by default and `public/protected` when you need to provide access for external classes.

There is also one modern trend that I discovered. People, who practice TDD and cover 100% LOC with tests, usually end up with almost 0 private methods, because private methods are hard to test. Encapsulation is then usually guaranteed by usage of shim classes. This leads to good thing - implementation can be replaced with more performant/maintainable/flexible/better class easier; but this also leads to bad thing - people try to create very thin layers of functionality, like 100 classes of 10 LOC, which perform single `for` loop or single call to real class, with usually bad names and too thin focus. Stop freaking doing it! Hide your implementation behind private method first and if it has grown too much (e.g. dependencies for containing class become messy because of that single method) or require more flexibility, or you start seeing that it is starting to have different focus than original class - then extract it to separate class. YAGNI and KISS for all! Cheers!
https://github.com/jupeter/clean-code-php#functions-should-only-be-one-level-of-abstraction

I think your refactoring results in two helper-classes "Lexer" and "Tokenizer". These types of classes should not be mocked nor handled by the di-framework.

Uncle Bob suggests to

> Mock across architecturally significant boundaries, but not within those boundaries.

http://blog.cleancoder.com/uncle-bob/2014/05/10/WhenToMock.html