This is really a minor thing:

In the readme it says:

```
A stable v1 release is expected for March 2018, while some concepts are thought through, and prototype code refactored.

```

Today it is november 2019, which is faaaar after march 2018 ;)
Perhaps it would make sense to update this to reflect what the reality of today is? (what is the latest version etc...). 
Or remove that sentence? 
Usually every bit of config data is visible in the RSOP output. But the LCM settings are missing the pull server URI and the RegistrationKey which is in the Meta MOFs (so it does exist) but not in the RSOP.

A repo is here: https://github.com/raandree/DatumTest

The RSOP output for node PreServer1

``` yaml
Environment: Pre
Description: CoreDC in CSPre
Name: PreServer1
PSDscAllowPlainTextPassword: true
LcmConfig:
  ConfigurationRepositoryWeb:
    Server:
      ConfigurationNames: PreServer1
SoftwarePackages:
  Package:
  - Name: Password Policy Enforcer 9.1
    Ensure: Present
    Path: D:\Packages\PPE\PPE910.msi
    ProductId: 55EBFC31-1031-463C-A870-416E2C312A64
PSDscAllowDomainUser: true
Configurations:
- FilesAndFolders
- SoftwarePackages
- WindowsFeatures
Role: CoreDC
WindowsFeatures:
  Name:
  - -Telnet-Client
FilesAndFolders:
  Items:
  - DestinationPath: C:\Test\Frankfurt
    Type: Directory
Location: Frankfurt
NodeName: PreServer1
```

The meta.mof with the content that is missing in RSOP.

```
/*
@TargetNode='PreServer1'
@GeneratedBy=randr
@GenerationDate=08/30/2019 13:24:26
@GenerationHost=RAANDREE0
*/

instance of MSFT_WebDownloadManager as $MSFT_WebDownloadManager1ref
{
SourceInfo = "::6::2::ConfigurationRepositoryWeb";
 ServerURL = "https://PrePull.contoso.com/PSDSCPullServer.svc";
 ResourceID = "[ConfigurationRepositoryWeb]Server";
 RegistrationKey = "fbc6ef09-ad98-4aad-a062-92b0e0327562";
 ConfigurationNames = {
    "PreServer1"
};

};

instance of MSFT_WebReportManager as $MSFT_WebReportManager1ref
{
SourceInfo = "::6::2::ReportServerWeb";
 ServerURL = "https://PrePull.contoso.com/PSDSCPullServer.svc";
 ResourceID = "[ReportServerWeb]ReportServerWeb";
 RegistrationKey = "fbc6ef09-ad98-4aad-a062-92b0e0327562";

};

instance of MSFT_DSCMetaConfiguration as $MSFT_DSCMetaConfiguration1ref
{
RefreshMode = "Pull";
 AllowModuleOverwrite = True;
 ActionAfterReboot = "ContinueConfiguration";
 RefreshFrequencyMins = 30;
 RebootNodeIfNeeded = True;
 ConfigurationModeFrequencyMins = 30;
 ConfigurationMode = "ApplyAndMonitor";

  ReportManagers = {
  $MSFT_WebReportManager1ref  
 };
  ConfigurationDownloadManagers = {
  $MSFT_WebDownloadManager1ref  
 };
};

instance of OMI_ConfigurationDocument
{
 Version="2.0.0";
 MinimumCompatibleVersion = "2.0.0";
 CompatibleVersionAdditionalProperties= { "MSFT_DSCMetaConfiguration:StatusRetentionTimeInDays" };
 Author="randr";
 GenerationDate="08/30/2019 13:24:26";
 GenerationHost="RAANDREE0";
 Name="RootMetaMOF";
};
```

Is this by design or does something go wrong?

I have example files that demonstrate this issue at https://github.com/thomwatt/datum

If you have a look at Datum.ps1 and once run, look at the $TableData object. The output should return a collection of Windows shares with properties:
•StartupType
•Name
•State

If you look at the output below, it returns objects for the services taken from \Tibco\FTL.yml but for the service taken from \Tibco\Base.yml it is returning key/value pairs (the last 3 objects in the YAML below).

This behaviour only happens if the base.yml file contains one service definition. If it has 2 or more, the output is perfect

- StartupType: Automatic
  Name: tibJettySvc
  State: Running
- StartupType: Automatic
  Name: tibrealmserver
  State: Running
- StartupType: Automatic
  Name: tibrealmserver-as
  State: Running
- StartupType: Automatic
  Name: tibstore
  State: Running
- Key: StartupType
  Value: Automatic
- Key: Name
  Value: Base Service
- Key: State
  Value: Running

Following our discussion you thought that this may be a bug that you had spotted but not yet released the fix for. 

If I've got a structure like below is is possible to say I'd want yml -> psd1 -> json or something similar to let me choose which files should be added to the datum structure?

```
Nodes
|
|--Node1.yml
|--Node1.json
|--Node1.psd1
```

The main use case here is that I've got some folders with nodes in them that also contain ARM templates named after the node type, along with config data (which is what I want) and a DSC config. Since all the files match in name Datum is grabbing the json file first, which isn't much use since it's an ARM template. 

If I could set a precedence for what file types it should look for first then that would be great, or being able to filter out (or in) file types would be another useful solution. 
I personally think that any string beginning with a dollar sign (`$`) should be ran through `Invoke-Expression`. That would cover several use cases:
- `$Node.Name`
- `$env:ComputerName`
- `$((Get-CimInstance Win32_ComputerSystem).Name)`

**That last two** would have to be compiled on the node, but serves as an example. If you really want a string beginning with a `$`, do: `$('$pecial$tring')`.

Thoughts?
find a way to declare how to get the nodes and load their RSOP in the configdata variable.

So far, the best I found is this:
```yaml
Variables:
  ConfigurationData:
    AllNodes:
	  Path: Datum:\AllNodes\#{Environment}\#{Name}
	Datum:
	  Path: Datum:\
	  
ConfigurationData:
  AllNodes:
    - 
```

The main goals are to:
- define where to find the $Nodes in the hierarchy
- what path metadata to be loaded (#{property} or * to not include it)

Seen when loading a Datum Tree without a defined Data handler.
The tree seemed to load fine, the DatumFileProvider looked fine, but the data was actually missing (i.e. `$Datum.AllNodes.DEV.SRV01` was empty (but existing).

Validation should be done in `New-DatumStructure` to make sure everything will work as expected, or raise an exception and stop.
There's currently no help available.
It'd be good to add some help and get those QA tests passed :)
Similar to Redirections, it would be useful to use variable interpolation in Datum similar to Hiera:

`'#{user}@#{domain}'`

That would do a lookup for User and a lookup for Domain, and then aggregates them.
Some Config Data should not or cannot be saved at the correct place of the hierarchy (i.e. a config file, or certificate used as a parameter to a Configuration):

```yaml
MyResource:
  CN: MyCN
  Certificate: "<blob of file content>"
```
Managing the certificate in-line is not convenient, the file should probably be in it's own 'provider' or mounted somewhere else in the Datum Tree ($Datum.Files.certificates.MyResourceCert).

That means the data structure for `MyResource` should have the certificate file 'linked' to the Certificate key of the config Data, like so (in a similar pattern that of Secure Datum):

```yaml
MyResource:
  CN: MyCN
  Certificate: "[REF=[Files\certificates\MyResourceCert]]"
```

Now, during a lookup $Node 'MyResource', Datum should resource the following hashtable, resolving under the hood the file content (or following what looks like a redirection):
```PowerShell
@{
    CN = 'MyCN'
    Certificate = 'blob of file content'
}
```