Bumps [handlebars](https://github.com/wycats/handlebars.js) from 4.1.2 to 4.5.3.
<details>
<summary>Changelog</summary>

*Sourced from [handlebars's changelog](https://github.com/wycats/handlebars.js/blob/master/release-notes.md).*

> ## v4.5.3 - November 18th, 2019
> Bugfixes:
> 
> - fix: add "no-prototype-builtins" eslint-rule and fix all occurences - f7f05d7
> - fix: add more properties required to be enumerable - 1988878
> 
> Chores / Build:
> - fix: use !== 0 instead of != 0 - c02b05f
> - add chai and dirty-chai and sinon, for cleaner test-assertions and spies, 
>   deprecate old assertion-methods  - 93e284e, 886ba86, 0817dad, 93516a0
> 
> Security:
> 
> - The properties `__proto__`, `__defineGetter__`, `__defineSetter__` and `__lookupGetter__` 
>   have been added to the list of "properties that must be enumerable".
>   If a property by that name is found and not enumerable on its parent, 
>   it will silently evaluate to `undefined`. This is done in both the compiled template and the "lookup"-helper. 
>   This will prevent new Remote-Code-Execution exploits that have been
>   published recently.
> 
> Compatibility notes: 
> 
> - Due to the security-fixes. The semantics of the templates using
>   `__proto__`, `__defineGetter__`, `__defineSetter__` and `__lookupGetter__` in the respect that those expression now return 
>   `undefined` rather than their actual value from the proto.
> - The semantics have not changed in cases where the properties are  enumerable, as in:
> 
> ```js
> {
>   __proto__: 'some string'
> }
> ```
> 
> - The change may be breaking in that respect, but we still only 
>   increase the patch-version, because the incompatible use-cases
>   are not intended, undocumented and far less important than fixing
>   Remote-Code-Execution exploits on existing systems.
> 
> 
> 
> [Commits](https://github.com/wycats/handlebars.js/compare/v4.5.2...v4.5.3)
> 
> ## v4.5.2 - November 13th, 2019
> # Bugfixes
> 
> - fix: use String(field) in lookup when checking for "constructor" - d541378
> - test: add fluent API for testing Handlebars - c2ac79c
> 
> Compatibility notes:
> - no incompatibility are to be expected
></tr></table> ... (truncated)
</details>
<details>
<summary>Commits</summary>

- [`c819c8b`](https://github.com/wycats/handlebars.js/commit/c819c8b533934d2ac18001d7eb27a3205b00c2f3) v4.5.3
- [`827c9d0`](https://github.com/wycats/handlebars.js/commit/827c9d0747bef7d7f89829779523b6b2dcf3051d) Update release notes
- [`f7f05d7`](https://github.com/wycats/handlebars.js/commit/f7f05d7558e674856686b62a00cde5758f3b7a08) fix: add "no-prototype-builtins" eslint-rule and fix all occurences
- [`1988878`](https://github.com/wycats/handlebars.js/commit/198887808780bbef9dba67a8af68ece091d5baa7) fix: add more properties required to be enumerable
- [`886ba86`](https://github.com/wycats/handlebars.js/commit/886ba86c2f9cc71b7d99b9018fbe2d72a57085cc) test/chore: add chai/expect and sinon to "runtime"-environment
- [`0817dad`](https://github.com/wycats/handlebars.js/commit/0817dad7e72c51d07f7700547d0c69aa79a4976b) test: add sinon as global variable to eslint in the specs
- [`93516a0`](https://github.com/wycats/handlebars.js/commit/93516a0b07026ebd23c84fddf270a0c8b570bc59) test: add sinon.js for spies, deprecate current assertions
- [`93e284e`](https://github.com/wycats/handlebars.js/commit/93e284ed9be1e38c5e6945f15af1ccd689f2ada6) chore: add chai and dirty-chai for better test assertions
- [`c02b05f`](https://github.com/wycats/handlebars.js/commit/c02b05fa819f46bb66c878bebc6e8006408ebd5c) fix: use !== 0 instead of != 0
- [`8de121d`](https://github.com/wycats/handlebars.js/commit/8de121d21c88a6ab877e3a0eec9daaac483f3bf0) v4.5.2
- Additional commits viewable in [compare view](https://github.com/wycats/handlebars.js/compare/v4.1.2...v4.5.3)
</details>
<br />

[![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=handlebars&package-manager=npm_and_yarn&previous-version=4.1.2&new-version=4.5.3)](https://help.github.com/articles/configuring-automated-security-fixes)

Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.

[//]: # (dependabot-automerge-start)
[//]: # (dependabot-automerge-end)

---

<details>
<summary>Dependabot commands and options</summary>
<br />

You can trigger Dependabot actions by commenting on this PR:
- `@dependabot rebase` will rebase this PR
- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it
- `@dependabot merge` will merge this PR after your CI passes on it
- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it
- `@dependabot cancel merge` will cancel a previously requested merge and block automerging
- `@dependabot reopen` will reopen this PR if it is closed
- `@dependabot ignore this [patch|minor|major] version` will close this PR and stop Dependabot creating any more for this minor/major version (unless you reopen the PR or upgrade to it yourself)
- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)
- `@dependabot use these labels` will set the current labels as the default for future PRs for this repo and language
- `@dependabot use these reviewers` will set the current reviewers as the default for future PRs for this repo and language
- `@dependabot use these assignees` will set the current assignees as the default for future PRs for this repo and language
- `@dependabot use this milestone` will set the current milestone as the default for future PRs for this repo and language

You can disable automated security fix PRs for this repo from the [Security Alerts page](https://github.com/petkaantonov/bluebird/network/alerts).

</details>
(This issue tracker is only for bug reports or feature requests, if this is neither, please choose appropriate channel from http://bluebirdjs.com/docs/support.html)

Please answer the questions the best you can:

1) What version of bluebird is the issue happening on?
All versions

2) What platform and version? (For example Node.js 0.12 or Google Chrome 32)
All platforms and versions

(Write description of your issue here, stack traces from errors and code that reproduces the issue are helpful)

Was digging into some memory profiling, and noticed that bluebird's coroutine creates a stack trace https://github.com/petkaantonov/bluebird/blob/49da1ac256c7ee0fb1e07679791399f24648b933/src/generators.js#L199 that is taking up a lot of memory during runtime
![image](https://user-images.githubusercontent.com/978968/71036204-d1a26500-20e2-11ea-9389-4a3a09ec1974.png)


In our case, we are leveraging the `@babel/plugin-transform-async-to-generator` plugin and have thousands of these error messages generated during runtime from the source code line above. This is amounting to dozens of extra megabytes on the JS heap that seem like they can be avoided. Can open a PR or otherwise resolve, but wanted to check first the reasoning for generating the error stack at this point, and if it can be behind a flag or otherwise how to prevent this memory issue?



The core of this PR simply changes the `_drainQueue` method used by the `map` method called when it's run with a concurrency limit, which fetches the next Promise in the array using `Array.shift()` instead of `Array.pop()`.

The point of this is to retain the standard behaviour of `map` and process each entry in the source array in the same order in which it was provided, regardless of whether or not a concurrent processing limit has been set, providing more consistent and predictable behaviour.

---

To ensure the unit tests cover this properly, I added an extra item to all typical test inputs, effectively changing `[1, 2, 3]` to `[1, 2, 3, 4]` and updated the order of the outputs for the final "big" test to match the order of the provided input.
Bumps [open](https://github.com/sindresorhus/open) from 0.0.5 to 6.0.0.
<details>
<summary>Release notes</summary>

*Sourced from [open's releases](https://github.com/sindresorhus/open/releases).*

> ## v6.0.0
> Breaking:
> - Rename the package from `opn` to `open` (See the readme for more info)  eca88d8
> - Make the `wait` option `false` by default  da2d663
> - Require Node.js 8  5c525b5
> 
> Enhancements:
> - Add support for Windows apps referenced by their WSL paths ([#118](https://github-redirect.dependabot.com/sindresorhus/open/issues/118))  b30220c
> 
> https://github.com/sindresorhus/open/compare/v5.5.0...v6.0.0
> 
> ## v5.5.0
> - Use system `xdg-open` in Electron apps on Linux ([#108](https://github-redirect.dependabot.com/sindresorhus/open/issues/108))  6d3f255
> 
> https://github.com/sindresorhus/opn/compare/v5.4.0...v5.5.0
</details>
<details>
<summary>Commits</summary>

- See full diff in [compare view](https://github.com/sindresorhus/open/commits/v6.0.0)
</details>
<details>
<summary>Maintainer changes</summary>

This version was pushed to npm by [sindresorhus](https://www.npmjs.com/~sindresorhus), a new releaser for open since your current version.
</details>
<br />

[![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=open&package-manager=npm_and_yarn&previous-version=0.0.5&new-version=6.0.0)](https://help.github.com/articles/configuring-automated-security-fixes)

Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.

[//]: # (dependabot-automerge-start)
[//]: # (dependabot-automerge-end)

---

<details>
<summary>Dependabot commands and options</summary>
<br />

You can trigger Dependabot actions by commenting on this PR:
- `@dependabot rebase` will rebase this PR
- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it
- `@dependabot merge` will merge this PR after your CI passes on it
- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it
- `@dependabot cancel merge` will cancel a previously requested merge and block automerging
- `@dependabot reopen` will reopen this PR if it is closed
- `@dependabot ignore this [patch|minor|major] version` will close this PR and stop Dependabot creating any more for this minor/major version (unless you reopen the PR or upgrade to it yourself)
- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)
- `@dependabot use these labels` will set the current labels as the default for future PRs for this repo and language
- `@dependabot use these reviewers` will set the current reviewers as the default for future PRs for this repo and language
- `@dependabot use these assignees` will set the current assignees as the default for future PRs for this repo and language
- `@dependabot use this milestone` will set the current milestone as the default for future PRs for this repo and language

You can disable automated security fix PRs for this repo from the [Security Alerts page](https://github.com/petkaantonov/bluebird/network/alerts).

</details>
(This issue tracker is only for bug reports or feature requests, if this is neither, please choose appropriate channel from http://bluebirdjs.com/docs/support.html)

Please answer the questions the best you can:

1) What version of bluebird is the issue happening on?
3.7.0

2) What platform and version? (For example Node.js 0.12 or Google Chrome 32)
Node 10.16.3

3) Did this issue happen with earlier version of bluebird?
I dont know, but looks like yes ))

map() with concurrency option ignores elements order. It's unexpected behavior. mapSeries doesn't solving it because it doesn't have concurrency. I can make code donation.


1) What version of bluebird is the issue happening on?
    3.7.1

2) What platform and version? (For example Node.js 0.12 or Google Chrome 32)
   Node 12.9.1, jsdom@11.12.0

3) Did this issue happen with earlier version of bluebird?
    Happens on upgrading from 3.7.0 to 3.7.1.
    3.7.0 works fine

Upgrading from 3.7.0 to 3.7.1 broke my tests:

```
TypeError: Cannot read property 'length' of undefined
      at windowCleaner (../../node_modules/jsdom/lib/jsdom/browser/Window.js:487:41)
      at windowCleaner (../../node_modules/jsdom/lib/jsdom/browser/Window.js:488:9)
      at Window.close (../../node_modules/jsdom/lib/jsdom/browser/Window.js:495:6)
```


1) bluebird version: 3.7.1

2) Node.js 10.16.0

3) in bluebird 3.5.3 same to

If mapper returns a native promise, map() may continue to call mappers after cancellation main promise. This should not happen because concurrency is used (all mappers do not have time to start):
```javascript
Promise.config({
    cancellation: true
});

function test() {
    let array_size = 100;
    let count = 0;
    let task = Promise.map(new Array(array_size), async () => {
        count++;
        if (count === array_size) console.log('all handlers were called');
        return Promise.delay(10);

    }, {concurrency: 10})

    setTimeout(() => {
        task.cancel();
    }, 10);
}

let tests_count = 100;
while (tests_count--) {
    test();
}
```
The console output:
```
all handlers were called
all handlers were called
...
```
This is a heisenbug, I can not reproduce it in its pure form without understanding the source code.
Correct behavior without native promises:
```javascript
Promise.config({
    cancellation: true
});

function test() {
    let array_size = 100;
    let count = 0;
    let task = Promise.map(new Array(array_size), () => {
        count++;
        if (count === array_size) console.log('all handlers were called');
        return Promise.delay(10);

    }, {concurrency: 10})

    setTimeout(() => {
        task.cancel();
    }, 10);
}

let tests_count = 100;
while (tests_count--) {
    test();
}
```
Сonsole is empty.

in this situation, in theory, it does not matter which promise is returned by the mapper, so this behavior is not obvious to me.

I use a translator, sorry
![image](https://user-images.githubusercontent.com/2296742/66824317-b97e6000-ef50-11e9-8d43-c45bdf1216c6.png)

TL;DR -- We're seeing an intermittent segmentation fault with BlueBird in one of our tap based test suites, and [have a reproduction over here](https://github.com/astormnewrelic/repro-bluebird-segfault). 

> 1) What version of bluebird is the issue happening on?

3.6 and 3.7

> 2) What platform and version? (For example Node.js 0.12 or Google Chrome 32)

NodeJS version 10 on MacOS 10 -- it does not appear to happen on Node 12.  Other plaforms not tested.

> 3) Did this issue happen with earlier version of bluebird?

It does not happen with BlueBird 3.5.  

## Details

One of the tests in our test suite has been failing randomly with a segmentation fault recently.  We found some time to track it down, and it _seems_ like it started happening with BlueBird 3.6 (maybe the async_hooks stuff?).  The segmentation fault doesn't happen on every run -- if you checkout this repository we've [setup a small "run until fail"](https://github.com/astormnewrelic/repro-bluebird-segfault) reproduction case.  The [code in the repro is significantly stripped down](https://source.datanerd.us/astorm/repro-bluebird-segfault/blob/master/methods.tap.js) form the code in our actual test suite. 

It's very "spooky action at a distance" style bug -- sometimes the test runs fine, sometimes it fails with something like the following

    TAP version 13
    # Subtest: bluebird
        # Subtest: new Promise() throw
            1..0
        ok 1 - new Promise() throw # time=4.55ms
    
    ./run-until-fail.sh: line 3: 36728 Segmentation fault: 11  $@

We also captured the crash in lldb with a debug build of node 10. 

    (lldb) r methods.tap.js
    Process 36969 launched: '/Users/astorm/bin/node-debug' (x86_64)
    TAP version 13
    # Subtest: bluebird
        # Subtest: new Promise() throw
            1..0
        ok 1 - new Promise() throw # time=63.303ms
    
    Process 36969 stopped
    * thread #1, queue = 'com.apple.main-thread', stop reason = EXC_BAD_ACCESS (code=1, address=0x0)
        frame #0: 0x0000000101cb25de node-debug`heap_insert(heap=0x00000001035094d8, newnode=0x0000000105c11498, less_than=(node-debug`timer_less_than at timer.c:39)) at heap-inl.h:140
       137 	
       138 	  /* Insert the new node. */
       139 	  newnode->parent = *parent;
    -> 140 	  *child = newnode;
       141 	  heap->nelts += 1;
       142 	
       143 	  /* Walk up the tree and check at each node if the heap property holds.
    Target 0: (node-debug) stopped.

Full backtrace from same follows

    * thread #1, queue = 'com.apple.main-thread', stop reason = EXC_BAD_ACCESS (code=1, address=0x0)
      * frame #0: 0x0000000101cb25de node-debug`heap_insert(heap=0x00000001035094d8, newnode=0x0000000105c0ba48, less_than=(node-debug`timer_less_than at timer.c:39)) at heap-inl.h:140
        frame #1: 0x0000000101cb23b4 node-debug`uv_timer_start(handle=0x0000000105c0b9e0, cb=(node-debug`node::(anonymous namespace)::TimerWrap::OnTimeout(uv_timer_s*) at timer_wrap.cc:134), timeout=1, repeat=0) at timer.c:93
        frame #2: 0x00000001002f2af1 node-debug`node::(anonymous namespace)::TimerWrap::Start(args=0x00007ffeefbfc670) at timer_wrap.cc:120
        frame #3: 0x00000001007f4e21 node-debug`v8::internal::FunctionCallbackArguments::Call(this=0x00007ffeefbfc7e0, handler=0x00003c3547afc889) at api-arguments-inl.h:94
        frame #4: 0x00000001007f2aae node-debug`v8::internal::MaybeHandle<v8::internal::Object> v8::internal::(anonymous namespace)::HandleApiCallHelper<false>(isolate=0x0000000106004c00, function=Handle<v8::internal::HeapObject> @ 0x00007ffeefbfc8f0, new_target=Handle<v8::internal::HeapObject> @ 0x00007ffeefbfc8e8, fun_data=Handle<v8::internal::FunctionTemplateInfo> @ 0x00007ffeefbfc8e0, receiver=Handle<v8::internal::Object> @ 0x00007ffeefbfc8d8, args=BuiltinArguments @ 0x00007ffeefbfc910) at builtins-api.cc:109
        frame #5: 0x00000001007f111a node-debug`v8::internal::Builtin_Impl_HandleApiCall(args=BuiltinArguments @ 0x00007ffeefbfca40, isolate=0x0000000106004c00) at builtins-api.cc:139
        frame #6: 0x00000001007f0c4d node-debug`v8::internal::Builtin_HandleApiCall(args_length=6, args_object=0x00007ffeefbfcb28, isolate=0x0000000106004c00) at builtins-api.cc:127
        frame #7: 0x000022036e6c1d64
        frame #8: 0x000022036e5a0ab6
        frame #9: 0x000022036e59336f
        frame #10: 0x000022036e719b42
        frame #11: 0x000022036e5a0ab6
        frame #12: 0x000022036e58f303
        frame #13: 0x000022036e5a0ab6
        frame #14: 0x000022036e5a0ab6
        frame #15: 0x000022036e58f303
        frame #16: 0x000022036e5a0ab6
        frame #17: 0x000022036e5a0ab6
        frame #18: 0x000022036e5a0ab6
        frame #19: 0x000022036e5a0ab6
        frame #20: 0x000022036e5a0ab6
        frame #21: 0x000022036e5a0ab6
        frame #22: 0x000022036e58f303
        frame #23: 0x000022036e5a0ab6
        frame #24: 0x000022036e5a0ab6
        frame #25: 0x000022036e5a0ab6
        frame #26: 0x000022036e58f303
        frame #27: 0x000022036e5a0ab6
        frame #28: 0x000022036e5a0ab6
        frame #29: 0x000022036e5a0ab6
        frame #30: 0x000022036e58f303
        frame #31: 0x000022036e5a0ab6
        frame #32: 0x000022036e5a0ab6
        frame #33: 0x000022036e5a0ab6
        frame #34: 0x000022036e5a0ab6
        frame #35: 0x000022036e5a0ab6
        frame #36: 0x000022036e58f303
        frame #37: 0x000022036e5a0ab6
        frame #38: 0x000022036e5a0ab6
        frame #39: 0x000022036e5a0ab6
        frame #40: 0x000022036e58f303
        frame #41: 0x000022036e5a0ab6
        frame #42: 0x000022036e5a0ab6
        frame #43: 0x000022036e5a0ab6
        frame #44: 0x000022036e5a0ab6
        frame #45: 0x000022036e5a0ab6
        frame #46: 0x000022036e58f303
        frame #47: 0x000022036e5a0ab6
        frame #48: 0x000022036e5a0ab6
        frame #49: 0x000022036e597015
        frame #50: 0x000022036e58cfa1
        frame #51: 0x00000001010f11bd node-debug`v8::internal::GeneratedCode<v8::internal::Object*, v8::internal::Object*, v8::internal::Object*, v8::internal::Object*, int, v8::internal::Object***>::Call(this=0x00007ffeefbfdf88, args=0x00003c35e57826f1, args=0x00003c35bea07191, args=0x00003c353ee9f7a1, args=1, args=0x00007ffeefbfe740) at simulator.h:113
        frame #52: 0x00000001010eebe6 node-debug`v8::internal::(anonymous namespace)::Invoke(isolate=0x0000000106004c00, is_construct=false, target=Handle<v8::internal::Object> @ 0x00007ffeefbfe0a0, receiver=Handle<v8::internal::Object> @ 0x00007ffeefbfe098, argc=1, args=0x00007ffeefbfe740, new_target=Handle<v8::internal::Object> @ 0x00007ffeefbfe090, message_handling=kReport, execution_target=kCallable) at execution.cc:155
        frame #53: 0x00000001010ee439 node-debug`v8::internal::(anonymous namespace)::CallInternal(isolate=0x0000000106004c00, callable=Handle<v8::internal::Object> @ 0x00007ffeefbfe170, receiver=Handle<v8::internal::Object> @ 0x00007ffeefbfe168, argc=1, argv=0x00007ffeefbfe740, message_handling=kReport, target=kCallable) at execution.cc:191
        frame #54: 0x00000001010ee2cd node-debug`v8::internal::Execution::Call(isolate=0x0000000106004c00, callable=Handle<v8::internal::Object> @ 0x00007ffeefbfe1d0, receiver=Handle<v8::internal::Object> @ 0x00007ffeefbfe1c8, argc=1, argv=0x00007ffeefbfe740) at execution.cc:202
        frame #55: 0x0000000100683828 node-debug`v8::Function::Call(this=0x0000000107050640, context=(val_ = 0x000000010704f700), recv=(val_ = 0x0000000106021c40), argc=1, argv=0x00007ffeefbfe740) at api.cc:5206
        frame #56: 0x00000001000cbd0a node-debug`node::InternalMakeCallback(env=0x00007ffeefbfe9f8, recv=(val_ = 0x0000000106021c40), callback=(val_ = 0x0000000107050640), argc=1, argv=0x00007ffeefbfe740, asyncContext=(async_id = 35, trigger_async_id = 31)) at node.cc:672
        frame #57: 0x00000001000158b9 node-debug`node::AsyncWrap::MakeCallback(this=0x0000000105f020f0, cb=(val_ = 0x0000000107050640), argc=1, argv=0x00007ffeefbfe740) at async_wrap.cc:683
        frame #58: 0x00000001002f320c node-debug`node::(anonymous namespace)::TimerWrap::OnTimeout(handle=0x0000000105f02140) at timer_wrap.cc:143
        frame #59: 0x0000000101cb2c4f node-debug`uv__run_timers(loop=0x0000000103509220) at timer.c:174
        frame #60: 0x0000000101cba014 node-debug`uv_run(loop=0x0000000103509220, mode=UV_RUN_DEFAULT) at core.c:355
        frame #61: 0x00000001000e1bbe node-debug`node::Start(isolate=0x0000000106004c00, isolate_data=0x000000010601e200, args=size=2, exec_args=size=0) at node.cc:2895
        frame #62: 0x00000001000dcb59 node-debug`node::Start(event_loop=0x0000000103509220, args=size=2, exec_args=size=0) at node.cc:2994
        frame #63: 0x00000001000dbf4f node-debug`node::Start(argc=2, argv=0x0000000105f00000) at node.cc:3053
        frame #64: 0x0000000101f9015e node-debug`main(argc=2, argv=0x00007ffeefbff888) at node_main.cc:124
        frame #65: 0x0000000100001034 node-debug`start + 52
ERROR in ./~/_bluebird@3.7.0@bluebird/js/release/promise.js 
Module not found: Error: Cannot resolve module 'async_hooks' in /cloud/source_code/node_modules/_bluebird@3.7.0@bluebird/js/release  @ ./~/_bluebird@3.7.0@bluebird/js/release/promise.js