Fixes # .

### Checklist

- [x] My code follows the style guidelines of this project
- [x] I have performed a self-review of my own code
- [ ] I have commented my code, particularly in hard-to-understand areas
- [ ] I have made corresponding changes to the existing documentation
- [x] My changes generate no new warnings
- [ ] I have updated the change log (Add/Change/Fix)
- [ ] I have cleaned up the commit history (use rebase and squash)

### Changes proposed in this pull request:

- use stbuf params in readdir callback, which can improve performance

# Environment
 * Windows version: 10 Pro N 1909
 * Processor architecture: x64
 * Dokany version: 1.3.1.1000
 * Library type (Dokany/FUSE): Dokany
 
# Check List
  - [x] I checked my issue [doesn't exist yet](https://github.com/dokan-dev/dokany/issues?utf8=%E2%9C%93&q=is%3Aissue)
  - [x] My issue is valid with mirror default sample and not specific to my user-mode driver implementation
  - [x] I can always reproduce the issue with the provided description below.
  - [x] I have updated Dokany to the [latest version](https://github.com/dokan-dev/dokany/releases) and have reboot my computer after.
  - [x] I tested one of the last [snapshot](https://github.com/dokan-dev/dokany/wiki/Build#user-snapshot) from appveyor CI

# Description
Windows 10 offers the user the feature [Controlled Folder Access](https://docs.microsoft.com/en-us/windows/security/threat-protection/microsoft-defender-atp/enable-controlled-folders), which is an additional layer of security against ransom ware.

When mounting a directory watched by this feature with Dokany, the user gets repeatedly warnings about blocked memory acces. There seems no loss in functionality.

Is the reason for these warning known? Of course the regarding application using the Dokany library can be whitelisted, but this may point to some error in the library.

# Logs
Will be added later.
Please take a look at this link.
https://github.com/jetwhiz/encfs4win/issues/140#issue-549389612

I'm not sure this issue is related to encfs or fuse. Thanks!
In 2020 Dokan still support some old VC code. This ticket is here to remove this old compatibility.
# Environment
 * Windows version: Windows 10/1809+

Hey just a quick question as I could not find mention of this in Issues.
I just wonder if you have plan to Integrate to either of those for the back-end infrastructure for newer Windows 10 so it is more native kernel?

Quang

Fixes # .
When reading data with a large delay, the IRP times out, which will cause the file object to be accidentally released.
When reading data in multiple reads, due to the dependency on the file object (hndl-> get_name ()), uncontrollable pointer errors will result.
This question has also been asked before: https://github.com/dokan-dev/dokany/issues/734

I fixed this problem, and through actual testing, I found that there would be no more file reading problems, but I do nâ€™t know if the data returned by read can still be received by the kernel and processed correctly when the file object is released. At least my application looks normal.

### Checklist

- [x] My code follows the style guidelines of this project
- [x] I have performed a self-review of my own code
- [ ] I have commented my code, particularly in hard-to-understand areas
- [ ] I have made corresponding changes to the existing documentation
- [x] My changes generate no new warnings
- [ ] I have updated the change log (Add/Change/Fix)
- [ ] I have cleaned up the commit history (use rebase and squash)

### Changes proposed in this pull request:

-Compare the code, only two lines of code changed
-
-

Feature request can skip this form. Bug report **must** complete it. `Check List` must be 100% match or it will be automatically closed without further discussion. Please remove this line.

# Environment
 * Windows version: WIN7-SP1
 * Processor architecture: x64
 * Dokany version: 1.3.0.1000
 * Library type (Dokany/FUSE): dokan 
 
# Check List
  - [v] I checked my issue [doesn't exist yet](https://github.com/dokan-dev/dokany/issues?utf8=%E2%9C%93&q=is%3Aissue)
  - [v] My issue is valid with mirror default sample and not specific to my user-mode driver implementation
  - [v] I can always reproduce the issue with the provided description below.
  - [v] I have updated Dokany to the [latest version](https://github.com/dokan-dev/dokany/releases) and have reboot my computer after.
  - [ ] I tested one of the last [snapshot](https://github.com/dokan-dev/dokany/wiki/Build#user-snapshot) from appveyor CI

# Description

Gets BSOD crash when uses procmon to capture events from the dokan network drive.
Below is stack trace of this issue, seems the procmon crashes on creating filename.


0: kd> k
 # Child-SP          RetAddr           Call Site
00 fffff880`07bcd978 fffff800`02b8a9b2 nt!KeBugCheckEx
01 fffff880`07bcd980 fffff800`02abcfdc nt!MmAccessFault+0x2322
02 fffff880`07bcdad0 fffff800`02a9ef30 nt!KiPageFault+0x35c
03 fffff880`07bcdc68 fffff800`02d14dd2 nt!memmove+0xb0
04 fffff880`07bcdc70 fffff800`02d15189 nt!ObpCaptureObjectName+0x102
05 fffff880`07bcdcf0 fffff800`02d1752b nt!ObpCaptureObjectCreateInformation+0x279
06 fffff880`07bcdd70 fffff800`02ed3328 nt!ObOpenObjectByName+0xbb
07 fffff880`07bcde40 fffff800`02cdc77b nt!IopCreateFile+0xa08
08 fffff880`07bcdef0 fffff880`01119ef0 nt!IoCreateFileEx+0xfb
09 fffff880`07bcdf90 fffff880`01119bb9 fltmgr!FltpNormalizeNameFromCache+0x190
0a fffff880`07bce0b0 fffff880`0111b016 fltmgr!FltpExpandShortNames+0x239
0b fffff880`07bce110 fffff880`0111f7ba fltmgr!FltpGetNormalizedFileNameWorker+0xd6
0c fffff880`07bce150 fffff880`0111ada0 fltmgr!FltpGetNormalizedFileName+0x1a
0d fffff880`07bce180 fffff880`010fe70c fltmgr!FltpCreateFileNameInformation+0xc0
0e fffff880`07bce1b0 fffff880`01109357 fltmgr!FltpGetFileNameInformation+0x41c
0f fffff880`07bce220 fffff880`05be1c74 fltmgr!FltGetFileNameInformation+0x187
10 fffff880`07bce2b0 fffff880`010fa0f7 PROCMON24+0x2c74
11 fffff880`07bce350 fffff880`010fc88d fltmgr!FltpPerformPreCallbacks+0x50b
12 fffff880`07bce460 fffff880`01118de0 fltmgr!FltpPassThroughFastIo+0x4d
13 fffff880`07bce4a0 fffff800`02f0624d fltmgr!FltpFastIoQueryBasicInfo+0x130
14 fffff880`07bce530 fffff800`02e29c64 nt!IopParseDevice+0x1c1d
15 fffff880`07bce690 fffff800`02d17776 nt!ObpLookupObjectName+0x784
16 fffff880`07bce790 fffff800`02d26602 nt!ObOpenObjectByName+0x306
17 fffff880`07bce860 fffff800`02abef53 nt!NtQueryAttributesFile+0x172
18 fffff880`07bceae0 00000000`77779b7a nt!KiSystemServiceCopyEnd+0x13
19 00000000`0015eba8 00000000`00000000 0x77779b7a


Change Library / Mirror logger to [spdlog](https://github.com/gabime/spdlog)
Am currently doing a memory filesystem for dokan as samples in c++ and use spdlog as logging library.
I feel like it would be a good idea to replace the current log system we have in the library and in the mirror by this library.

It is header only, prettier and more flexible to manage the output type (it does support OutputDebugString)

Does someone have an argument this should not be made ?

ping @Kerbox @Rondom @kyanha 


UNC is mandatory for proper mount as network drive. This is not currently the case.
We should force network only with UNC.

- [ ] Kernel API break should be made for 2.x.x as we keep compatibility with previous 1.x.x libraries
- [ ] Break API for library 1.4.0

# Environment
 * Windows version: W7 and W10
 * Processor architecture: x64
 * Dokany version: 1.3.0.1000 (first seen on 1.0.3)
 * Library type (Dokany/FUSE): FUSE
 
# Check List
  - [X] I checked my issue [doesn't exist yet](https://github.com/dokan-dev/dokany/issues?utf8=%E2%9C%93&q=is%3Aissue)
  - [X] My issue is valid with mirror default sample and not specific to my user-mode driver implementation
  - [X] I can always reproduce the issue with the provided description below.
  - [X] I have updated Dokany to the [latest version](https://github.com/dokan-dev/dokany/releases) and have reboot my computer after.
  - [ ] I tested one of the last [snapshot](https://github.com/dokan-dev/dokany/wiki/Build#user-snapshot) from appveyor CI

# Description
Hi,

I tried to share a FUSE volume by activating Windows Properties/Sharing/Advanced sharing (with full control granted to everyone). When accessing it from the network (on the same machine \\\\127.0.0.1\\<shared_name> or on another machine on the network \\\\<my_IP>\\<shared_name>), I can properly list the files present on the volume and their properties.

However, **I keep retrieving corrupted data when I read from those files**.
An easy way to observe the problem is to copy the same file twice to another location and to compare the copies (with the original and one another). I attached an example of such files.
On the binary level, it seems that 1 MB blocks (the size of the transfer buffer, I guess) are randomly either deleted or inserted. (I haven't been able to determine where the inserted data comes from)
Consequently, this problem rarely occurs with small files but becomes systematic with _large_ files (> 10 MB).

I applied the same procedure on the DOKAN mirror.exe sample which is deployed with the 1.3.0.1000 debug redistribuables. I got the same odd result.
Since Cygwin DLLs are not deployed on my PC, the FUSE mirror.exe could unfortunately not launch. I can test that too if you believe that's necessary. But if I understand correctly, DOKAN relies on FUSE: so I think there is a problem with the FUSE read routine when Windows file sharing is involved.

Has anyone encountered this problem before or did I apply a wrong procedure?
Thank you in advance for your reply :)
B.

# Logs
[mirror.log](https://github.com/dokan-dev/dokany/files/3820223/mirror.log)
[copied_file_example.zip](https://github.com/dokan-dev/dokany/files/3820234/copied_file_example.zip)
[debug_view.LOG](https://github.com/dokan-dev/dokany/files/3820200/debug_view.LOG) (is DokanFS [10120]?)
