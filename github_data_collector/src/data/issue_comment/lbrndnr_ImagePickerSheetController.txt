**Branch**: fix-maximum-selection
**IOS**: 11

Currently I faced the problem that the first button in the action-sheet is somehow animated with a scale transition if you present the ImagePickerSheetController which looks really weird. 

This is my code which is from the example code:

```
let presentImagePickerController: (UIImagePickerControllerSourceType) -> () = { source in
    let controller = UIImagePickerController()
    controller.delegate = self
    var sourceType = source
    if (!UIImagePickerController.isSourceTypeAvailable(sourceType)) {
        sourceType = .photoLibrary
    }
    controller.sourceType = sourceType
    
    self.present(controller, animated: true, completion: nil)
}

let controller = ImagePickerSheetController(mediaType: .image)
controller.maximumSelection = 1
controller.addAction(ImagePickerAction(title: "Photo Library", secondaryTitle: "Add Selection", handler: { _ in
    presentImagePickerController(.photoLibrary)
}, secondaryHandler: { _, numberOfPhotos in

}))

controller.addAction(ImagePickerAction(title: "Take Photo", handler: { _ in
    presentImagePickerController(.camera)
}, secondaryHandler: { _, numberOfPhotos in
    presentImagePickerController(.camera)
}))

controller.addAction(ImagePickerAction(cancelTitle: "Cancel"))

present(controller, animated: false, completion: nil)
```

As you can see I set animated to false cause this seems like the only solution for me. Does someone else have the problem or a solution for it?

I present ImagePickerSheetController with animation set to true, but what happens instead is I see perhaps the last frame of an animation in. The background color fades in, but the picker itself basically just appears.
Hello Laurin - great library you have here, thanks for sharing it. Love the animations and general structure of the code (I'm at the tip of the `fix-maximum-selection` branch). Just had something of a basic question about the intent/purpose of the two `ImagePickerAction` rows _once at least one image has been selected_. 

From what I can seem to see, both actions will fire the same handler, though we can have separate titles for them. The example usage refers to "Add Comment" which may well be useful, keeping in mind it would apply to N photos. 

In order of importance to me, I'd love to either:

1. Hide/remove that first `ImagePickerAction` _if and only if_ > 0 images have been selected, or
2. Alter the handler that fires for that first row (so I could pop a modal text field to ask for comments, say). Not sure how I'd know when that happened though, nor can I currently get to the `handler: Handler?` instance member as it's both `fileprivate` and a `let` to boot.

Thanks in advance for your (or anyone else's) thoughts. 
The app crashes in the ImagePickerSheetController deinit method.
![screen shot 2016-11-18 at 14 03 18](https://cloud.githubusercontent.com/assets/19686398/20431088/6a264560-ad98-11e6-8cdf-999b69e11876.png)

In Apple's document, "  You access the contents of a fetch result with the same methods and conventions used by the NSArray class. Unlike an NSArray object, however, a PHFetchResult object dynamically loads its contents from the Photos library as needed, providing optimal performance even when handling a large number of results" in PHFetchResult. The method to improve performance is  require Image in collectionView:CellForItem method

@lbrndnr Are you able to get specs to run easily?  I had to do a ton of work to get them going.
1. Looks like you prefer Carthage, which is ðŸ’¯ but I'm "old school" and still use Pods, so I added KIF and Quick&Nimble via a Podfile.  So that involved using a workspace and changing `IPSC.xcodeproj/project.pbproj` to be compatible
2. Exposed `waitForViewWithAccessibilityIdentifier` (and friends) in `KIFExtensions.swift`.  Looks like you used to maintain a fork of KIF, but it's been deleted?  These methods are not available in KIF v 3.4.2 (latest)
3. On the upside, it would be easy to get Travis-CI running, I've used it w/ Pods enough to be able to get that going.

Thoughts on all this?  Feels like I must be doing something wrong...

When I use the sheet inside a popover, the background view has a wrong frame. Looking into viewDidLayoutSubviews, the view of the ImagePickerSheetController is in fact wrong (as is the enclosing popoverView). To fix this I added two lines of code inside viewDidLayoutSubviews:
...
        let sheetSize = CGSize(width: view.bounds.width, height: sheetHeight)

```
    if let _ = popoverPresentationController {
      backgroundView.frame = CGRect(origin: .zero, size: sheetSize)
    }
```

...

Scrolling in the picker's collection view is very choppy.


- [x] Investigate accessibility for images
