Any particular reason why flog.threshold returns a character vector?
```
> futile.logger::flog.threshold()
[1] "DEBUG"
> futile.logger::DEBUG
DEBUG 
    8 
```

I would have expected the above to be of the same type, so that it should be possible to do:
```
if(futile.logger::flog.threshold() < futile.logger::DEBUG) {
# do something
}
```
Is there any support planned for letting logging be configured externally, e.g. from environment variables or a config file at a default path?

This would be helpful for us - we have lots of R projects that are called from other environments like Java or a shell, and it's not very convenient for them to call another R function in order to set up logging.

It seems like there's precedent for this in log4j, maybe the same style could be followed.
I would prefer to have R CRAN package tryCatchLog keep working after the JAN changes to futile.logger. tryCatchLog is unique in the R package universe in such that after an error in the call stack, both the file names and line numbers, are returned to the user. No other package does that ( or comes close with line number or file name). Package futile.logger is package tryCatchLogâ€™s general logger. So I vote (1) no: to hijack the error handling system, (2) yes: to new extra parameter, emit=TRUE.
I can't figure out how to configure the logger setup I'm trying to achieve.

I would like all messages `INFO` and above to go to the console (`stdout`), and all messages `WARN` and above to also be logged to a file `warnlogger.log`.

Here's my example code:

```
library('futile.logger')

flog.threshold('INFO')
flog.logger('ROOT', threshold=WARN, appender=appender.file('warnlogger.log'))
flog.logger('ROOT', threshold=INFO, appender=appender.console())


flog.debug("debug message")
flog.info("info message")
flog.warn("warn message")
flog.error("error message")
```

The output is:

```
% Rscript logs.R
NULL
NULL
NULL
INFO [2018-12-10 18:25:10] info message
WARN [2018-12-10 18:25:10] warn message
ERROR [2018-12-10 18:25:10] error message
```

But the `warnlogger.log` file is never created.

The README for the package says "Typically only one appender is used per logger, but multiple can be assigned."  How can I assign more than one appender, if that's what I need to do to achieve what I'm trying to do?

Thanks.
Hi,

I'm using Futile Logger with the root logger, but with a tee.appender to both console and to a log file.

I've set R options so that console errors also get written to the log via:
`  options(error = function() {
    flog.error(geterrmessage()) ; traceback() ; stop()
  })
`

On a fresh install of my software an R system error would also generate a package error `flog.logger not found`

After some investigation is seems that using lambda.r_1.1.9 does not generate this error, but 1.2.x does.

I'm guessing it's some sort of namespace error?

Best
Alan

PS - thanks for the great package!

I use `futile.logger` a lot in my parallel scripts, all of which use package `future` to handle multiprocessing.
`flog.*` of course works well in this case when logging to a file, but does not for logging to the terminal: all messages are relayed at the end of the future.

Is there any way this could be accomplished?
For a custom json layout based on the package json.layout and layout.format functions, the first unnamed argument is passed as id. 

    custom.json <- function(level, msg, id='', ...) {

      if (!is.null(substitute(...))) msg <- sprintf(msg, ...)
      output_list <- list(
        level = jsonlite::unbox(names(level)),
        timestamp = jsonlite::unbox(format(Sys.time(), "%Y-%m-%d %H:%M:%S %z")),
        message = jsonlite::unbox(msg),
        func = jsonlite::unbox('unavailable') # haven't worked this out
    )
    return(sprintf("%s\n", jsonlite::toJSON(output_list, simplifyVector=TRUE)))

}

    flog.layout(custom.json)
    flog.info('%s ', 'test')
    {"level":"INFO","timestamp":"2018-09-11 17:20:50 -0400", "message":"%s ","func":"unavailable"}
    flog.info('%s ', 'test', 'test2')
    {"level":"INFO","timestamp":"2018-09-11 17:20:56 -0400", "message":"test2 ", "func":"unavailable"}

Removing the **id argument** from the custom.json function resolves this issue, but I'm not sure why it works since the layout.format seems to be called without any issues using the same signature.




The layout.json function is putting string interpolation arguments on the output as json fields instead of interpolating the message template. 

    library(futile.logger)
    flog.info('test %s', 'interp')
    INFO [2018-09-11 15:44:46] test interp

but after changing the layout:

    flog.layout(layout.json)
    flog.info('test %s', 'interp')
    {"level":"INFO","timestamp":"2018-09-11 15:45:15 -0400","message":"test %s","func":"(shell)","5":["interp"]}

The interp argument shows up as field "5" on the output and the message template is unchanged.

I'm running futile.logger 1.4.3 on R 3.4.3.
added code to pipeline data with AWR library into the AWS kinesis streams: https://github.com/daroczig/AWR.Kinesis


#flog.appender(appender.kinesis_handler('logging_data','us-east-2','LOL'), 'kinesis')
I have a function that calls `flog.warn` under certain conditions, and I want to test those conditions.  However, it looks like the warning doesn't go through the channels that `testthat::expect_warning` expects it to:

```
> expect_warning(
+     solution <- do.call(my.function, args),
+     regexp = 'Missing regime types .* offpeak'
+   )
WARN [2018-07-03 17:52:42] Missing regime types in 'last.period.peaks': offpeak; filling with zeroes
Error: `solution <- do.call(my.function, args)` did not produce any warnings.
```

So the warning makes it to `STDOUT` or `STDERR`, and doesn't get captured by `expect_warning`, so the test fails.

Is there some other way to accomplish this easily?