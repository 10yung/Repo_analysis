Let's imagine that the data contains a very big branch, f.e.
`{key: {a:1,b:2,...,z:27}, other:...}`

We are going to delete the whole branch "key" for some reason. As I understand, the operation then should look like `{p:["key"], od:{a:1,b:2,...,z:27}}`.

But for the delete operation, the logically required information is the only key of the deleted item. The deleted object content is the extra info which is not necessary for the operation.

It was probably useful to exclude repeating object content for the delete operation and replace it by something neutral, like logical `true`.

`{p:["key"], od:true}`

It looks much more compact and logical.

Closes issue #30

Builds on PR #25 by @houshuang
There's interest in adding presence to json0, and I thought I'd make an issue to summarize the need and link to related material.

My desire is to add presence features (cursors, selections) to an app that is using text0 within json0. Others are interested in using the already defined presence implementation of [ot-rich-text](https://github.com/Teamwork/ot-rich-text).

The goal is to define presence in such a way that any json0 leaf node, of any OT type, can have presence, if its OT type implements presence.

Related:

 * [Presence issue in ottypes/json0](https://github.com/ottypes/json0/issues/30)
 * [Presence issue in ottypes/json1](https://github.com/ottypes/json1/issues/9)
 * [Presence issue in ottypes/rich-text](https://github.com/ottypes/rich-text/issues/29)
 * [Add presence-related properties in ottypes/docs (pending PR)](https://github.com/ottypes/docs/pull/27)
   * [Teamwork for of ottypes/docs (PR merged)](https://github.com/teamwork/ot-docs#optional-properties)
 * [presence implementation in ShareDB (pending PR)](https://github.com/share/sharedb/pull/207) by @gkusiba
   * [Teamwork Fork of ShareDB (PR is merged)](https://github.com/Teamwork/sharedb#user-presence-synchronization)
 * [ot-rich-text](https://github.com/Teamwork/ot-rich-text) (implements presence)
   * [Operation.js](https://github.com/Teamwork/ot-rich-text/blob/master/lib/Operation.js) implements the presence functions
 * [Interesting Cursor Transform Work by Robert Lord](https://github.com/ottypes/json0/pull/27)
 * https://github.com/SyncOT/SyncOT - implements presence differently than ShareDB, but will leverage the `ottypes` family.

My question to you @josephg is, would a PR that implements presence for json0 we welcome here, or would we be better off maintaining a fork for presence? I understand that merging such a PR into json0 may be risky, as mainline ShareDB does not implement the presence spec, which itself is not really "official" quite yet.
Faced with the challenge of implementing presence for `text0` strings embedded deep within `json0` documents, I was perusing the [json0 forks network](https://github.com/ottypes/json0/network) and stumbled upon this quite interesting work by @lord.

I don't fully understand what the changes here are really doing, but I have a suspicion it may be an interesting lead. I'm creating a PR so it's easy to see the changes, and any interested parties can discuss here.

Related:

 * [Adding presence to ot-json0 #25](https://github.com/ottypes/json0/pull/25) by @houshuang
 * [Sync ephemeral presence data #207](https://github.com/share/sharedb/pull/207) by @gkusiba
It would be really great if the library could apply ops such that instead of mutating the original data, a new object is created (with shared structure with the previous data object).

Related:

 * [Immutable Update Patterns](https://redux.js.org/recipes/structuring-reducers/immutable-update-patterns)
 * [Immer](https://github.com/mweststrate/immer) <-- I might try using this with json0
I've started work on an [OT plugin for CodeMirror 6](https://github.com/datavis-tech/codemirror-ot), and I was wondering has anyone ever create TypeScript type declarations for `json0`?
This change adds validation to array and object deletion. If the values
provided in either `ld` or `od` do not match the current value, then
`apply` will `throw`. It will also throw if `oi` overwrites an existing
value without providing `od`.

The primary motivation of this change is to ensure that all submitted
ops remain reversible. At the moment, the following series of ops is
possible:

  - start with `{ foo: 'bar' }`
  - `apply` this op: `{ p: ['foo'], oi: 'baz' }`
  - ...resulting in `{ foo: 'baz' }`
  - `invert` the previous op: `{ p: ['foo'], od: 'baz' }`
  - and `apply` the inverted op: `{}`

When I apply, invert and apply, I should always wind up where I started,
but in this case I clearly do not.

By ensuring that the `od` matches the current value, we make sure that
all ops remain reversible.

Deep equality adds a dependency on [`fast-deep-equal`][1].

[1]: https://github.com/epoberezkin/fast-deep-equal
For `{p:PATH, oi:NEWVALUE}`

The documentation says:

> When inserting, the key must not already be used.

However, if they key exists it currently will overwrite it...

Not sure what the correct behaviour is?

From json.apply:

```
for (var j = 0; j < c.p.length; j++) {
  var p = c.p[j];
  parent = elem;
  parentKey = key;
  elem = elem[key];
  key = p;
  if (parent == null)
    throw new Error('Path invalid');
}
```

If parent is null, this code will break on `elem = elem[key];`. It should be:

```
for (var j = 0; j < c.p.length; j++) {
  var p = c.p[j];
  parent = elem;
  if (parent == null)
    throw new Error('Path invalid');
  parentKey = key;
  elem = elem[key];
  key = p;

}
```
