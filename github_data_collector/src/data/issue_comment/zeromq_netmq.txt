### Environment

    NetMQ Version:    4.0.0.207
    Operating System: Win10 1909
    .NET Version:     Core 3.0.1

I created a console application that connect to a server via SubscribeSocket, i run the program with wifi ON, i start receiving messages. If i disable wifi the messages stop. If i enable wifi within ~10 seconds, the messages start coming again, if i wait more no more message ever come.
On some computers with the same software the problem does not manifest itself, i investigated the problem here, but i do not know how to work around it :( https://github.com/somdoron/AsyncIO/issues/35
We precisely chose netmq for the network resiliency since the application will work with intermittent wifi connection 😢 




ZMTP3 and the Null Mechanism is implemented as part of #843, supporting Curve is a matter of implementing the Curve mechanism classes.

.Net port of libsodium:
https://www.nuget.org/packages/dlech.Chaos.NaCl/
https://github.com/dlech/Chaos.NaCl
https://github.com/drr00t/tweetnacl-cs/

ZMTP3 and Curve RFC:
https://rfc.zeromq.org/spec:37/ZMTP/
https://rfc.zeromq.org/spec:25/ZMTP-CURVE/

Curve mechanism classes that need to be ported:
https://github.com/zeromq/libzmq/blob/v4.3.2/src/curve_mechanism_base.cpp
https://github.com/zeromq/libzmq/blob/v4.3.2/src/curve_mechanism_base.hpp
https://github.com/zeromq/libzmq/blob/v4.3.2/src/curve_client_tools.hpp
https://github.com/zeromq/libzmq/blob/v4.3.2/src/curve_client.hpp
https://github.com/zeromq/libzmq/blob/v4.3.2/src/curve_client.cpp
https://github.com/zeromq/libzmq/blob/v4.3.2/src/curve_server.cpp
https://github.com/zeromq/libzmq/blob/v4.3.2/src/curve_server.hpp

We would also need to port the following socket options:
* bool CurverServer - https://github.com/zeromq/libzmq/blob/master/src/options.cpp#L598, this should be used to decide which curve class to create, client or server
* CurvePublicKey, CurveSecretKey and CurveServerKey - https://github.com/zeromq/libzmq/blob/master/src/options.cpp#L606

To hook curve mechanism with the StreamEngine, create the relevant mechanism classes here:
https://github.com/somdoron/netmq/blob/ZMTP3/src/NetMQ/Core/Transports/StreamEngine.cs#L861

## Optional

### z85 encoding of certificates

I recommend to port czmq cert & certstore classs as well.
https://rfc.zeromq.org/spec:32/Z85/
https://github.com/zeromq/libzmq/blob/be200896756df1273289abb0e5f5a2d86ead92b4/src/zmq_utils.cpp#L101
https://github.com/zeromq/czmq/blob/master/src/zcert.c
https://github.com/zeromq/czmq/blob/master/src/zcertstore.c

### ZAP - authentication protocol
https://rfc.zeromq.org/spec:27/ZAP/
https://github.com/zeromq/libzmq/blob/v4.3.2/src/zap_client.hpp
https://github.com/zeromq/libzmq/blob/v4.3.2/src/zap_client.cpp
https://github.com/zeromq/czmq/blob/63c27c834aa415efb82717cb705b776e245a0952/src/zauth.c


All code is in one line without syntax highlighting

https://netmq.readthedocs.io/en/latest/queue/

![image](https://user-images.githubusercontent.com/8215186/71882002-d7b0c200-3133-11ea-88d0-069868ab67e0.png)

### Environment
    NetMQ Version:    Latest of master
    Operating System: window 10 1909
    .NET Version:     framework4.0 && standard2.0 


 A RouterSocket as server, and the clients are DealerSockets. Use a Monitor to listen the RouterSocket 's Disconnected event. When listened to the client disconnected, how to confirm which client is disconnected.
### Environment

    NetMQ Version:   4.0.0.1
    Operating System: Win 10
    .NET Version:   Framework 4.7.2

### Expected behaviour

Hi I have problem with this function. I was writen event wich working but some times this event in shutdown and I don´t know why.

public void Getter(Func<string, string> start)
        {
                NetMQPoller poller = new NetMQPoller();

                getter.ReceiveReady += (send, Event) =>
                {
                    byte[] ID = getter.ReceiveFrameBytes();
                    orderFromWife = getter.ReceiveFrameString();

                    string answer = Checker(orderFromWife);

                    getter.SendMoreFrame(ID);
                    getter.SendFrame(answer);

                    start(orderFromWife);

                    Thread.Sleep(500);
                };

                poller.Add(getter);
                poller.Run();
        }


### Actual behaviour

This is exeption:

NetMQ.HostUnreachableException
  HResult=0x80131500
  Message=In Stream.XSend
  Source=NetMQ
  StackTrace:
   at NetMQ.Core.Patterns.Stream.XSend(Msg& msg)
   at NetMQ.Core.SocketBase.TrySend(Msg& msg, TimeSpan timeout, Boolean more)
   at NetMQ.NetMQSocket.TrySend(Msg& msg, TimeSpan timeout, Boolean more)
   at NetMQ.OutgoingSocketExtensions.Send(IOutgoingSocket socket, Msg& msg, Boolean more)
   at NetMQ.OutgoingSocketExtensions.SendFrame(IOutgoingSocket socket, Byte[] data, Int32 length, Boolean more)
   at NetMQ.WebSockets.WSRouter.RouterShimHandler.OnOutgoingMessage(NetMQMessage message)
   at NetMQ.WebSockets.BaseShimHandler.OnMessagePipeReady(Object sender, NetMQSocketEventArgs e)
   at NetMQ.NetMQSocket.InvokeEvents(Object sender, PollEvents events)
   at NetMQ.NetMQPoller.Run()
   at NetMQ.WebSockets.BaseShimHandler.Run(PairSocket shim)
   at NetMQ.NetMQActor.RunShim()
   at System.Threading.ThreadHelper.ThreadStart_Context(Object state)
   at System.Threading.ExecutionContext.RunInternal(ExecutionContext executionContext, ContextCallback callback, Object state, Boolean preserveSyncCtx)
   at System.Threading.ExecutionContext.Run(ExecutionContext executionContext, ContextCallback callback, Object state, Boolean preserveSyncCtx)
   at System.Threading.ExecutionContext.Run(ExecutionContext executionContext, ContextCallback callback, Object state)
   at System.Threading.ThreadHelper.ThreadStart()

I was try fix it witch try,chatch but nothing has changed.
### Environment

    NetMQ Version:    4.0.0.207
    Operating System: PC Windows 10 
    .NET Version:     .NET 4.x via Unity 2019.3.0f1, installed via NuGet, and Asyncio version: 0.1.69

### Expected behaviour
I want to build a C# DealerSocket and connect it to a Router at a known external address.  I want to send messages to the Router frequently, and leave the Dealer up for the entire game.

### Actual behaviour
On Mac, 0 error, works perfectly.
On PC:
I get this error message, and the dealer is prevented from sending messages
```
SocketException: The operation completed successfully.

AsyncIO.Windows.Socket.SetSocketOption (System.Net.Sockets.SocketOptionLevel optionLevel, System.Net.Sockets.SocketOptionName optionName, System.Int32 optionValue) (at <3c72113274de4b3face0e2579126a901>:0)
AsyncIO.AsyncSocket.set_NoDelay (System.Boolean value) (at <3c72113274de4b3face0e2579126a901>:0)
NetMQ.Core.Transports.Tcp.TcpConnector.OutCompleted (System.Net.Sockets.SocketError socketError, System.Int32 bytesTransferred) (at <21696b85a92a4a0eb8332ff57aebfd69>:0)
NetMQ.Core.Transports.Tcp.TcpConnector.StartConnecting () (at <21696b85a92a4a0eb8332ff57aebfd69>:0)
NetMQ.Core.Transports.Tcp.TcpConnector.ProcessPlug () (at <21696b85a92a4a0eb8332ff57aebfd69>:0)
NetMQ.Core.ZObject.ProcessCommand (NetMQ.Core.Command cmd) (at <21696b85a92a4a0eb8332ff57aebfd69>:0)
NetMQ.Core.IOThread.Ready () (at <21696b85a92a4a0eb8332ff57aebfd69>:0)
NetMQ.Core.IOThreadMailbox.RaiseEvent () (at <21696b85a92a4a0eb8332ff57aebfd69>:0)
NetMQ.Core.Utils.Proactor.Loop () (at <21696b85a92a4a0eb8332ff57aebfd69>:0)
System.Threading.ThreadHelper.ThreadStart_Context (System.Object state) (at <437ba245d8404784b9fbab9b439ac908>:0)
System.Threading.ExecutionContext.RunInternal (System.Threading.ExecutionContext executionContext, System.Threading.ContextCallback callback, System.Object state, System.Boolean preserveSyncCtx) (at <437ba245d8404784b9fbab9b439ac908>:0)
System.Threading.ExecutionContext.Run (System.Threading.ExecutionContext executionContext, System.Threading.ContextCallback callback, System.Object state, System.Boolean preserveSyncCtx) (at <437ba245d8404784b9fbab9b439ac908>:0)
System.Threading.ExecutionContext.Run (System.Threading.ExecutionContext executionContext, System.Threading.ContextCallback callback, System.Object state) (at <437ba245d8404784b9fbab9b439ac908>:0)
System.Threading.ThreadHelper.ThreadStart () (at <437ba245d8404784b9fbab9b439ac908>:0)
UnityEngine.<>c:<RegisterUECatcher>b__0_0(Object, UnhandledExceptionEventArgs)
```

### Steps to reproduce the behaviour
code for the Dealer (no other dependencies in the project)
```using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using NetMQ;
using NetMQ.Sockets;
using UnityEngine;

public class Dealer : MonoBehaviour
{
    private bool _dealerCancelled;
    private IEnumerator _dealerWorkerRoutine;
    public Queue<string> OutBox = new Queue<string>();
    public Queue<string> Inbox = new Queue<string>();
    public List<float> pings = new List<float>();
    private DealerSocket _sock;
    public delegate void SocketDel();

    private void Start()
    {
        //,"tcp://192.168.1.67:8000"
        var connections = new List<string>() {$"tcp://40.117.225.101:8000"};
        SetupDealer(connections);
    }

    static void Client_ReceiveReady(object sender, NetMQSocketEventArgs e)
    {
        Msg myMessage = new Msg();
        e.Socket.Receive(ref myMessage);
        Debug.Log(myMessage);
    }
    private void SetupDealer(List<string> connections)
    {

        using (var poller = new NetMQPoller())
        {
            var resTask = Task.Factory.StartNew(() =>
            {
                DealerSocket client = null;
                var clientSocketPerThread = new ThreadLocal<DealerSocket>();
                if (!clientSocketPerThread.IsValueCreated)
                {
                    client = new DealerSocket();
                    client.Options.Identity =
                        Encoding.Unicode.GetBytes(5.ToString());
                    client.Connect(connections[0]);
                    client.ReceiveReady += Client_ReceiveReady;
                    clientSocketPerThread.Value = client;
                    poller.Add(client);
                }
                else
                {
                    client = clientSocketPerThread.Value;
                }

                while (true)
                {
                    var messageToServer = new NetMQMessage();
                    messageToServer.AppendEmptyFrame();
                    messageToServer.Append("messageToServer");
                    Console.WriteLine("======================================");
                    Console.WriteLine(" OUTGOING MESSAGE TO SERVER ");
                    Console.WriteLine("======================================");
                    Debug.Log($"Client Sending {messageToServer}");
                    client.SendMultipartMessage(messageToServer);
                }
            },  TaskCreationOptions.LongRunning);

            poller.RunAsync();
            Debug.Log($"task:{resTask.Status.ToString()}");
            Debug.Log($"poller:{poller.IsRunning}");
        }
    }

    // will handle the incoming message with the special 'HEARTBEAT'.
    // Returns true if the message is not a special and should be enqueued to the list.
    // returns false if the message is a heartbeat throwaway.
    private static bool DealerHandleIngress(string message, ref List<float> pingList)
    {
        if (message.StartsWith("HEARTBEAT"))
        {
            var splits = message.Split('|').Skip(1).Select(Convert.ToDouble).ToArray();
            pingList.Add((float) Time.time - (float)splits[0]);
            pingList.Remove(0);
            return false;
        }
        else
        {
            return true;
        }
    }```
Thats my code that's running in a Unity Monobehavior. The main thread in Start() should start the long-running task that would be handling the Dealer socket and all of its communication. I thought that maybe it was a thread issue, so I reimplemented it as a co-routine, and got the exact same error:

```
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Net.Sockets;
using System.Threading;
using NetMQ;
using NetMQ.Sockets;
using UnityEngine;

public class TestCoroutine : MonoBehaviour
{
    private bool _dealerCancelled;
    private IEnumerator _dealerWorkerRoutine;
    public Queue<string> OutBox = new Queue<string>();
    public Queue<string> Inbox = new Queue<string>();
    public List<float> pings = new List<float>();
    private DealerSocket _sock;
    public delegate void SocketDel();

    private void Start()
    {
        //,"tcp://192.168.1.67:8000"
        var connections = new List<string>() {$"tcp://40.117.225.101:8000"};
        StartDealer(connections);
    }

    private void StartDealer(List<string> targetConnections)
    {
        _dealerWorkerRoutine = DealerWorker(targetConnections);
        StartCoroutine(_dealerWorkerRoutine);
        pings.Clear();
    }

    private IEnumerator DealerWorker(List<string> toConnect)
    {
        _sock = new DealerSocket();
        _sock.Options.SendHighWatermark = 1000;
        foreach (var x in toConnect)
        {
            _sock.Connect(x);
        }
        _dealerCancelled = false;
        Debug.Log("St");
        Thread.Sleep(2000);
        Debug.Log("looping");
        while (!_dealerCancelled)
        {
            
            // handle incoming
            while (_sock.HasIn &&
                   _sock.TryReceiveFrameString(out var message))
            {
                if (DealerHandleIngress(message, ref pings))
                {
                    Inbox.Enqueue(message);
                }
            }
         
            // handle outgoing
            while (OutBox.Count > 0)
            {
                _sock.SendFrame(OutBox.Dequeue());
            }

            _sock.SendFrame($"HEARTBEAT|{(long)Time.time}");
            
            yield return new WaitForSeconds(0.1f);
        }
        
        Debug.Log("post");
    }

    // will handle the incoming message with the special 'HEARTBEAT'.
    // Returns true if the message is not a special and should be enqueued to the list.
    // returns false if the message is a heartbeat throwaway.
    private static bool DealerHandleIngress(string message, ref List<float> pingList)
    {
        if (message.StartsWith("HEARTBEAT"))
        {
            var splits = message.Split('|').Skip(1).Select(Convert.ToDouble).ToArray();
            pingList.Add((float) Time.time - (float)splits[0]);
            pingList.Remove(0);
            return false;
        }
        else
        {
            return true;
        }
    }
```

this also works perfectly on Mac, but not on PC at all.

1. What is the recommended way to run a Dealer in Unity as a long-running process?
2. How can I debug this issue with the SocketException?
3. Am I missing any other references, permissions, etc?

I've learned a ton through the problem-solving process but would love some help. thanks!
This should fix #834 and a few other similar potential bugs in other versions of ```Remove()```, and ```RemoveAndDispose()```

See a few other comments on a couple of the tests and about throwing ```ArgumentException``` from ```Remove()``` when socket is disposed.  Those should be left to a future PR, though.
### Environment

    NetMQ Version:    4.0.0.2
    Operating System:  Win 10
    .NET Version:     Standard 2.0 / Core

### Expected behaviour

````
poller.Remove(socket);
socket.Dispose();
````

should remove the socket from the poller's list, and then dispose the socket, poller should continue to run servicing other sockets.

### Actual behaviour

poller throws ```ObjectDisposedException``` after ```socket.Dispose()``` is called

### Steps to reproduce the behaviour

This code in a unit test:
````
poller.Remove(socket);
socket.Dispose();
````
Causes an ObjectDisposedException error to throw on the poller's thread from ```SocketBase.CheckDisposed()```, and kill my unit test runtime.
There needs to be some better syncing on ```Poller.Remove()``` so that it blocks the the poller's thread and/or the caller of Remove() such that the Remove does not return until that socket is actually removed from the poller's internal list. This is the issue as it is currently written.

I would argue that ```CheckDisposed()``` should return a bool so that poller can not try to access that socket, and avoid throwing the exception.

I can't find a path to calling ```Socket.Dispose()``` after it has been passed to ```Poller.Add(Socket)``` and ```Poller.RunAsync()``` is called that doesn't throw.
支持UDP吗？
`            using (var client = new NetMQ.Sockets.RequestSocket())
            {
                client.Connect("udp://localhost:5555");
                for (int i = 0; i < 10; i++)
                {
                    Console.WriteLine("Client Sending Hello");
                    client.SendFrame("Hello");
                    var message = client.ReceiveFrameString();
                    Console.WriteLine("Server Rep Msg: {0}", message);
                }
            }`

ERROR:

**NetMQ.ProtocolNotSupportedException:“Invalid protocol: udp”**
