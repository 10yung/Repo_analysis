### Expected Behavior

Missing templates should raise a `TemplateNotFound` exception with the correct template name.

### Actual Behavior

The top-level template is used as the error string even when it is not the template that failed.

There appears to be an issue in Flask's `DispatchingJinjaLoader`. If a template called `parent.html` fails to find a sub-template such as `{% extends child.html %}`, the exception that is raised will be `TemplateNotFound('parent.html')` instead of the correct `TemplateNotFound('child.html')`. This will almost certainly confuse an end user.

This appears to be because https://github.com/pallets/flask/blob/1351d0a56580df36872b466eb245e7634c20dab5/src/flask/templating.py#L83 does not properly float up missing templates errors. If it fails to find *any* matching template it raises the name of whatever template was first passed to `render_template`.

### Environment

* Python version: all
* Flask version: all
* Werkzeug version: all

Just like this [old issue](https://github.com/pallets/flask/issues/998) said, routing behavior changed even when `subdomain_matching` defaults to false, so take [this repository](https://github.com/namieluss/python-flask-with-subdomain/blob/master/app.py) as example, if you comment following lines, 

```
@app.before_request
def start():
    """
    init globals and set the schema search path for the current request.
    """
    g.user = session.get('user', None)
    current_url = urlparse(request.url)
    subdomain = current_url.hostname.split('.')

    if subdomain.__len__() > 2:
        """
        redirect to home page
        """
        if current_url.path == "/":
            return redirect(url_for('index'))
        pass
    pass
```

then requests to `user1.flask-subdomain.com` won't route to `index`, default 404 as response. Or am I missing something, as a result have misunderstood it. Thanks very much.

```
@app.route('/')
def index():
    return render_template('index.html')
```

### Environment

* Python version: 3.6
* Flask version: 1.1.1
* Werkzeug version: 0.16.0
This PR removes the comment in the foreword that tells Flask extensions are reviewed by Flask maintainers

It's confusing when not adding the `static_url_path` to `Flask` Class.

<!--
Commit checklist:

* add tests that fail without the patch
* ensure all tests pass with ``pytest``
* add documentation to the relevant docstrings or pages
* add ``versionadded`` or ``versionchanged`` directives to relevant docstrings
* add a changelog entry if this patch changes code

Tests, coverage, and docs will be run automatically when you submit the pull
request, but running them yourself can save time.
-->

Fixes #3452

Strip the ending slash when passed to `os.path.basename`, so that the last part can be used for static url path correctly.

<!--
Commit checklist:

* add tests that fail without the patch
* ensure all tests pass with ``pytest``
* add documentation to the relevant docstrings or pages
* add ``versionadded`` or ``versionchanged`` directives to relevant docstrings
* add a changelog entry if this patch changes code

Tests, coverage, and docs will be run automatically when you submit the pull
request, but running them yourself can save time.
-->

Hi!

This fixes a docstring and remove redundant parentheses, if you want me to submit as separated PR or you need me to do something else just let me know.

<!-- **This issue tracker is a tool to address bugs in Flask itself.
Please use the #pocoo IRC channel on freenode or Stack Overflow for general
questions about using Flask or issues not related to Flask.** -->

<!-- If you'd like to report a bug in Flask, fill out the template below. Provide
any extra information that may be useful / related to your problem.
Ideally, create an [MCVE](https://stackoverflow.com/help/mcve), which helps us
understand the problem and helps check that it is not caused by something in
your code. -->

I am trying to serve a React app with Flask. The React app uses React Router which means some routes should simply be handled by React. To achieve this one can usually use a catch-all route that returns the index.html. I first couldn't get the catch-all route to work at all, and then I got it working by removing the trailing slash for the `static_folder` parameter when calling Flask.

### Expected Behavior
When one enter a path with trailing forward slash in the `static_folder` parameter for flask.Flask() it shouldn't affect whether a catch-all route goes into effect or not.

In the below code remove the trailing slash for the `static_folder` and you are able to reach the catch-all route (home function) by entering a random route like `/something`.

```python
from flask import Flask, render_template

app = Flask(__name__, static_folder="frontend/build/", template_folder="frontend/build")

@app.route("/")
def route1():
    return "route1"


@app.route("/<path:path>")
def home(path):
    return "routeAny"
```

### Actual Behavior
Steps to reproduce
1. Run the above flask app
2. Open browser and verify that it renders the text "route1" for route `/`
3. Browse to `/something` and see that you get 404 Not Found.

### Environment

* Python version: 3.7.
* Flask version: 1.1.1
* Werkzeug version: 0.16.0

<!-- **This issue tracker is a tool to address bugs in Flask itself.
Please use the #pocoo IRC channel on freenode or Stack Overflow for general
questions about using Flask or issues not related to Flask.** -->

<!-- If you'd like to report a bug in Flask, fill out the template below. Provide
any extra information that may be useful / related to your problem.
Ideally, create an [MCVE](https://stackoverflow.com/help/mcve), which helps us
understand the problem and helps check that it is not caused by something in
your code. -->



### Expected Behavior
<!-- Tell us what should happen. -->
When a user creates a route that returns None flask raises

>  `TypeError: The view function did not return a valid response. The function either returned None or ended without a return statement.`

 The problem is that it doesn't include the route that actually caused the error. It's obviously not a huge deal, just a little tedious to go search through all of the routes.

full traceback:

```pytb
Traceback (most recent call last):
  File "/var/www/mysite.com/venv/lib/python3.6/site-packages/werkzeug/middleware/proxy_fix.py", line 232, in __call__
    return self.app(environ, start_response)
  File "/var/www/mysite.com/venv/lib/python3.6/site-packages/flask/app.py", line 2449, in wsgi_app
    response = self.handle_exception(e)
  File "/var/www/mysite.com/venv/lib/python3.6/site-packages/flask/app.py", line 1866, in handle_exception
    reraise(exc_type, exc_value, tb)
  File "/var/www/mysite.com/venv/lib/python3.6/site-packages/flask/_compat.py", line 39, in reraise
    raise value
  File "/var/www/mysite.com/venv/lib/python3.6/site-packages/flask/app.py", line 2446, in wsgi_app
    response = self.full_dispatch_request()
  File "/var/www/mysite.com/venv/lib/python3.6/site-packages/flask/app.py", line 1952, in full_dispatch_request
    return self.finalize_request(rv)
  File "/var/www/mysite.com/venv/lib/python3.6/site-packages/flask/app.py", line 1967, in finalize_request
    response = self.make_response(rv)
  File "/var/www/mysite.com/venv/lib/python3.6/site-packages/flask/app.py", line 2097, in make_response
    "The view function did not return a valid response. The"
TypeError: The view function did not return a valid response. The function either returned None or ended without a return statement.
```

### Environment

* Python version: 3.6
* Flask version: 1.1.1
* Werkzeug version: 0.16

Hi everybody:
  I have write some tests like this:
```python
@pytest.fixture
def app():
    app = create_app({"DB_CONNECT": TEST_DB_CONNECT})
    yield app

@pytest.fixture
def client(app):
    """A test client for the app."""
    return app.test_client()

def test_hello_1(app, client):
    # test that viewing the page renders without template errors
    assert client.get("/hello").status_code == 200


def test_hello_2(app, client):
    # test that viewing the page renders without template errors
    assert client.get("/hello").status_code == 200
```

and the interface hello like this(this interface locate at a blueprint):
```python
from flask import Blueprint,  current_app

bp = Blueprint('interface_map', __name__)

@bp.route('/hello')
def hello():
    current_app.logger.info('hello world test log')

    return "hello world"
```

when I running tests:

### Expected Behavior
```
[2019-12-05 15:56:10,693] 127.0.0.1 requested http://localhost/hello INFO in interface_demo: 
hello world test log
[2019-12-05 15:56:11,065] 127.0.0.1 requested http://localhost/hello INFO in interface_demo: 
hello world test log
```

### Actual Behavior

```pytb
[2019-12-05 15:56:10,693] 127.0.0.1 requested http://localhost/hello INFO in interface_demo: 
hello world test log
[2019-12-05 15:56:11,065] 127.0.0.1 requested http://localhost/hello INFO in interface_demo: 
hello world test log
[2019-12-05 15:56:11,065] 127.0.0.1 requested http://localhost/hello INFO in interface_demo: 
hello world test log
```

I run two tests but it log three times!
I have no idea what happened and I am not sure it is appropriate use current_app.logger in blueprint.

I also tried replace current_app.logger to print() or write to a file use open('file_name', 'a'), it behavior no problem

### Environment

* Python version:  3.7.1
* Flask version:  1.0.2
* Werkzeug version: 0.14.1

appreciate for any ideas
### Expected Behavior
It should return the **_'Last-Modified'_** header when returning 304 Not Modified HTTP response.

```python
**_Here is my code:_**

def get_response:
  headers = {
    'Last-Modified': last_modified_after,  Wed, 04 Dec 2019 01:47:01 GMT #
    'Cache-Control': 'no-cache',
    'Name': 'Test'
  }
  if user_has_old_version:
    return cloud_doc, 200 headers
  else:
    return cloud_doc, 304, headers
```

### Actual Behavior
my issue is when I returning the response with the headers including the header **_Last-Modified_** it is gone missing when it receives to the client end, But all the other headers are present. I wonder how only that header is gone missing.

When I get the response for the **_else_** condition (i.e HTTP 200 response) I only get the _Cache-Control_ header and the custom _Name_ header, this _Last-Modified_ gone missing. But when I receive the  **_if_** (i.e HTTP 304 response) case, I'm getting all the headers including the _Last-Modified_ header.

* Python version: 3.7
* Flask version: 1.1.1
* Werkzeug version: 0.16.0
