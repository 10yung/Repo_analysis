I'm having issue with render replaceNode parameter - the app breaks after I run render the second time with updated properties for the root component. Unfortunately I could not isolate the problem, the simple cases work as intended, so the issue might well be in my code. The first error is indeed in my code, but it looks that it's because something else is broken.

This works fine (1) - https://codepen.io/activewidgets/pen/YzPJebK
```js
render(h(App, initialProps), container);
setTimeout(() => render(h(App, updatedProps), container), 100);
```

This breaks (2) - https://codepen.io/activewidgets/pen/OJPBQKX
```js
render(h(App, initialProps), container, target);
setTimeout(() => render(h(App, updatedProps), container, target), 100);
```

I've found that this one actually works too (3) - https://codepen.io/activewidgets/pen/eYmPVqK
```js
render(h(App, initialProps), container, target);
setTimeout(() => render(h(App, updatedProps), target), 100);
```

Full code (static page) - https://gist.github.com/xkam/098b970d3cbc43427f764491f10dfea1
 
The variant (3) does what I want, so I'm fine if this is an intended use, but from the docs I had the impression that the right one is (2), and that one breaks.

Sorry, the examples have layers of other (less then ideal) code, but I thought that it might be useful anyway.
- Compiles #2214 and #2218
- Brings suspense based progressive hydration.
- Enables Suspense based hydration for preact CLI
Swiping to open or close drawer don't work with preact.
only works swipe area's touch event.
In case of using react with same code, drawer works properly.

https://github.com/mui-org/material-ui/issues/18977

reproduction
sandbox (swipe is not work in sandbox editor)
https://codesandbox.io/s/exciting-worker-i67ug

[for reproduction] please swipe from right in this page
https://i67ug.sse.codesandbox.io/index

The cause of issue
https://github.com/mui-org/material-ui/issues/18977#issuecomment-573340815
issue #2036 
We are using Gatsbyjs and switched out React with Preact X. Everything works fine, except all the [popover](https://material-ui.com/components/popover/) loose their positioning and open in the top let corner (x: 0, y:0).

```
preact@10.2.1
@material-ui/core@4.8.3
@material-ui/styles@^4.8.2
```

As I haven't found any information, that would suggest, that these wouldn't work with Preact. 
This PR replaces the current devtools adapter with the one that is dynamically injected by the extension. This leads to a stark size reduction of `preact/debug` :wink: 

Instead of just replacing the existing code in `preact/debug`, this PR adds a `preact/devtool` sub-package. The benefit of this is that it allows us to enable the devtools in production without bringing in the weight of `preact/debug`. The new devtools adapter weights just `140 B` although that size will likely be smaller once bundled into the main package.

**New features:**

- Attach devtools to production sites :tada: 
- Record profiling times of a Preact component tree :100:

**Tasks:**

- [x] Release new version of devtools and wait until it's approved before merging this PR. That way users have a smooth upgrade experience.
  - [x] Firefox
  - [x] Chrome

![Screenshot from 2020-01-13 09-37-55](https://user-images.githubusercontent.com/1062408/72242372-93b53580-35e9-11ea-8bcd-a67da535f627.png)
 
https://github.com/preactjs/preact/pull/1433 re-implemented ``Object.assign`` with a for-loop.

However using a for loop is only roughly half as fast in every browser I tested today (https://jsperf.com/object-assign-vs-for-loop-yaaay). Which isn't surprising.

So utils should check for ``Object.assign`` and export that if available instead of the polyfill.
Our website has been using Preact 8 for a while without any issues.

I recently started using `preact/debug` (rather than `preact/devtools`), but this started throwing *a lot* of these errors:

```
Following component has two or more children with the same "key" attribute.
This may cause glitches and misbehavior in rendering process.  
Component: <div />
```

I understand the purpose of the error, but sometimes the components it references e.g. <div /> aren't a rendered list nor do they have any key attributes.

For example, this component which just had two standard DOM elements would give me a specific error for this component...among lots of other errors for other sibling or parent components.

```
export const product = ({}) => {
    return (
        <div class="my-element">
            <span>Top</span>
            <span>Bottom</span>
        </div>
    );
};
```

I'm struggling to find the offending component as the error is ambiguous.

Thanks.
Hello,
I was looking at performance of updating large arrays of child components which led me to looking at this for loop here: https://github.com/preactjs/preact/blob/master/src/diff/children.js#L83
(summarised with some pseudocode)
```js
oldVNode = oldChildren[i];

if (/* oldVNode matches childVNode */ ) {
    oldChildren[i] = undefined;
} else {
    for (j = 0; j < oldChildrenLength; j++) {
        oldVNode = oldChildren[j];
        if (/* oldVNode matches childVNode */) {
            oldChildren[j] = undefined;
            break;
        }
        oldVNode = null;
    }
}
```
If I understand this code correctly, when Preact gets an array of children for each one it checks to see if there was a child already there with the same type and key at the same index in the old array, and otherwise it does a linear search to see if any other components match. This means that if every element changes, this code is quadratic in the number of elements.

The problem is that every element or almost every element updating is actually very common (at least, I'm suggesting, having no evidence ðŸ˜„) in array manipulations. Some examples are:
* Removing an element from the front of an array, like in a scrollback buffer.
* The user reordering a list by moving an element from near the start of a list to near the end.
* Adding new things to the front of an array, like in a news feed.

In these cases most of the elements are unchanged, but a large amount of them will have shifted forward or backwards by 1 in the array, and so the loop above is quadratic.

I think a simple change might be just to change the loop slightly, so there's a much better chance the loop finds the corresponding child earlier:
```js
    for (j = 0; j < oldChildrenLength; j++) {
        const idx = (j + i - 1) % oldChildrenLength;
        oldVNode = oldChildren[idx];
        if (/* oldVNode matches childVNode */) {
            oldChildren[idx] = undefined;
            break;
        }
        oldVNode = null;
    }
```
This way the loop starts looking at `i - 1` first but cycles around to all the elements in the array anyway, so it speeds up those cases since for each it only needs to perform 1-3 comparisons, and falls back to the old quadratic behaviour otherwise. This does make the loop slightly more complicated so might be a pessmisation in real use cases, but again I don't really have any evidence of real usage patterns and any potential performance gains so I'd just like to know if something like this was considered before.

Of course, it's possible to do away with possible quadratic time entirely by pre-computing a look-up table ahead of time on the keys of `oldChildren`, but I'm more wary of this since it needs to allocate a hashmap and do lookups, so in real use cases it could be much slower.
So I'm getting the following error:
```
Test suite failed to run

    TypeError: Cannot read property 'prototype' of undefined

      3 | import Adapter from 'enzyme-adapter-preact-pure';
      4 | console.log('Enzyme>>>>>', configure);
    > 5 | console.log('Preact >>>>', Adapter);
        |                                                       ^
      6 | configure({ adapter: new Adapter() });
      7 | 

      at ../../node_modules/preact/compat/dist/compat.js:1:469
      at Object.<anonymous> (../../node_modules/preact/compat/dist/compat.js:1:611)
      at Object.<anonymous> (__tests__/enzyme_setup.js:5:55)
```
The versions i have are so:

```
"preact": "^10.1.1",
"preact-render-to-string": "^5.1.3",
"enzyme": "^3.8.0",
"enzyme-adapter-preact-pure": "^2.2.0",
"jest": "^24.9.0",
"jest-enzyme": "^7.1.2",
```

Jest config has the this:

```
"moduleNameMapper": {
    "@djforth/ajax-es6-fp/fetch": "<rootDir>/__tests__/__mocks__/@djforth/ajax-es6-fp/fetch",
    "@djforth/geolocation_helper": "<rootDir>/__tests__/__mocks__/@djforth/geolocation_helper",
    "@djforth/viewport-detection-fp": "<rootDir>/__tests__/__mocks__/@djforth/viewport-detection-fp",
    "@morsedigital/i18n_helper": "<rootDir>/__tests__/__mocks__/@morsedigital/i18n_helper",
    "\\.(jpg|jpeg|png|gif|eot|otf|webp|svg|ttf|woff|woff2|mp4|webm|wav|mp3|m4a|aac|oga)$": "<rootDir>/__tests__/__mocks__/fileMock.js",
    "\\.(css|less|scss)$": "<rootDir>/__tests__/__mocks__/styleMock.js"
  },
```

Enzyme set up like so:

```
import { configure } from 'enzyme';
import Adapter from 'enzyme-adapter-preact-pure';

configure({ adapter: new Adapter() });
```
The application works fine and if I set my tests to use react instead of preact they run fine.  Is there something I'm missing or is there a bug?