While build using cmake locally, i got these warinnings:
```
[ 90%] Building CXX object src/test_lib_json/CMakeFiles/jsoncpp_test.dir/main.cpp.o
/data/jsoncpp/src/test_lib_json/main.cpp: In member function ‘virtual void TestCharReaderAllowDropNullTestissue178::runTestCase()’:
/data/jsoncpp/src/test_lib_json/main.cpp:3324:3: warning: missing initializer for member ‘TestCharReaderAllowDropNullTestissue178::runTestCase()::TestSpec::onRoot’ [-Wmissing-field-initializers]
   };
   ^
/data/jsoncpp/src/test_lib_json/main.cpp:3324:3: warning: missing initializer for member ‘TestCharReaderAllowDropNullTestissue178::runTestCase()::TestSpec::onRoot’ [-Wmissing-field-initializers]
/data/jsoncpp/src/test_lib_json/main.cpp:3324:3: warning: missing initializer for member ‘TestCharReaderAllowDropNullTestissue178::runTestCase()::TestSpec::onRoot’ [-Wmissing-field-initializers]
/data/jsoncpp/src/test_lib_json/main.cpp:3324:3: warning: missing initializer for member ‘TestCharReaderAllowDropNullTestissue178::runTestCase()::TestSpec::onRoot’ [-Wmissing-field-initializers]
/data/jsoncpp/src/test_lib_json/main.cpp:3324:3: warning: missing initializer for member ‘TestCharReaderAllowDropNullTestissue178::runTestCase()::TestSpec::onRoot’ [-Wmissing-field-initializers]
/data/jsoncpp/src/test_lib_json/main.cpp:3324:3: warning: missing initializer for member ‘TestCharReaderAllowDropNullTestissue178::runTestCase()::TestSpec::onRoot’ [-Wmissing-field-initializers]
/data/jsoncpp/src/test_lib_json/main.cpp:3324:3: warning: missing initializer for member ‘TestCharReaderAllowDropNullTestissue178::runTestCase()::TestSpec::onRoot’ [-Wmissing-field-initializers]
/data/jsoncpp/src/test_lib_json/main.cpp:3324:3: warning: missing initializer for member ‘TestCharReaderAllowDropNullTestissue178::runTestCase()::TestSpec::onRoot’ [-Wmissing-field-initializers]
/data/jsoncpp/src/test_lib_json/main.cpp:3324:3: warning: missing initializer for member ‘TestCharReaderAllowDropNullTestissue178::runTestCase()::TestSpec::onRoot’ [-Wmissing-field-initializers]
[100%] Linking CXX executable jsoncpp_test
```
this PR will fix them.
seeing issues with ccache when using CMake -- removed it as per https://github.com/open-source-parsers/jsoncpp/issues/737. 
**Describe the bug**
`py amalgamate.py` does not work on windows console

**Expected behavior**
print to console and execute the script

**Desktop (please complete the following information):**
 - OS: Windows 10

**Fix**
The shebang (top line) is preventing windows from running the script correctly.
Take out the shebang on windows and run the command with
`py amalgamate.py COMMAND_LINE_ARGUMENTS`

The script will work as expected.

[Read more](https://stackoverflow.com/questions/47227301/python-script-doesnt-print-output-in-command-prompt)
Required to get JSONCPP_USING_SECURE_MEMORY available.
According to https://github.com/open-source-parsers/jsoncpp/pull/1062#issuecomment-549530234 and https://github.com/open-source-parsers/jsoncpp/pull/1098#issuecomment-554256725, this PR will revert the changes to the old Reader. 
VS2019的代码静态检查工具发现：

jsoncpp\include\json\value.h(860): warning C26439: 可能不会 throw 此类型的函数。将其声明为 "noexcept" (f.6)。


namespace std {
/// Specialize std::swap() for Json::Value.
template<> inline void swap(Json::Value& a, Json::Value& b)  {
  a.swap(b);
}
}

建议改为：

namespace std {
/// Specialize std::swap() for Json::Value.
template<> inline void swap(Json::Value& a, Json::Value& b) noexcept {
  a.swap(b);
}
}






**Is your feature request related to a problem? Please describe.**
A clear and concise description of what the problem is. Ex. I'm always frustrated when [...]

**Describe the solution you'd like**
A clear and concise description of what you want to happen.

**Describe alternatives you've considered**
A clear and concise description of any alternative solutions or features you've considered.

**Additional context**
Add any other context or screenshots about the feature request here.

Building on cygwin 1.9.2 (and similar on git code) I see:

```
[ 61%] Linking CXX executable readFromStream.exe
/usr/lib/gcc/x86_64-pc-cygwin/7.4.0/../../../../x86_64-pc-cygwin/bin/ld: CMakeFiles/readFromStream.dir/readFromStream/readFromStream.cpp.o: in function `main':
/usr/src/debug/jsoncpp-1.9.2-1/example/readFromStream/readFromStream.cpp:22: undefined reference to `Json::CharReaderBuilder::operator[](std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)'
/usr/lib/gcc/x86_64-pc-cygwin/7.4.0/../../../../x86_64-pc-cygwin/bin/ld: /usr/src/debug/jsoncpp-1.9.2-1/example/readFromStream/readFromStream.cpp:22:(.text.startup+0x104): relocation truncated to fit: R_X86_64_PC32 against undefined symbol `Json::CharReaderBuilder::operator[](std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)'
/usr/lib/gcc/x86_64-pc-cygwin/7.4.0/../../../../x86_64-pc-cygwin/bin/ld: /usr/src/debug/jsoncpp-1.9.2-1/example/readFromStream/readFromStream.cpp:24: undefined reference to `Json::parseFromStream(Json::CharReader::Factory const&, std::istream&, Json::Value*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*)'
/usr/lib/gcc/x86_64-pc-cygwin/7.4.0/../../../../x86_64-pc-cygwin/bin/ld: /usr/src/debug/jsoncpp-1.9.2-1/example/readFromStream/readFromStream.cpp:24:(.text.startup+0x15e): relocation truncated to fit: R_X86_64_PC32 against undefined symbol `Json::parseFromStream(Json::CharReader::Factory const&, std::istream&, Json::Value*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*)'
collect2: error: ld returned 1 exit status
[ 66%] Built target readFromStream
[ 72%] Linking CXX executable readFromString.exe
/usr/lib/gcc/x86_64-pc-cygwin/7.4.0/../../../../x86_64-pc-cygwin/bin/ld: CMakeFiles/readFromString.dir/readFromString/readFromString.cpp.o: in function `main':
/usr/src/debug/jsoncpp-1.9.2-1/example/readFromString/readFromString.cpp:31: undefined reference to `Json::Value::asString[abi:cxx11]() const'
/usr/lib/gcc/x86_64-pc-cygwin/7.4.0/../../../../x86_64-pc-cygwin/bin/ld: /usr/src/debug/jsoncpp-1.9.2-1/example/readFromString/readFromString.cpp:31:(.text.startup+0x192): relocation truncated to fit: R_X86_64_PC32 against undefined symbol `Json::Value::asString[abi:cxx11]() const'
collect2: error: ld returned 1 exit status
[ 77%] Built target readFromString
[ 83%] Linking CXX executable stringWrite.exe
/usr/lib/gcc/x86_64-pc-cygwin/7.4.0/../../../../x86_64-pc-cygwin/bin/ld: CMakeFiles/stringWrite.dir/stringWrite/stringWrite.cpp.o: in function `main':
/usr/src/debug/jsoncpp-1.9.2-1/example/stringWrite/stringWrite.cpp:29: undefined reference to `Json::writeString[abi:cxx11](Json::StreamWriter::Factory const&, Json::Value const&)'
/usr/lib/gcc/x86_64-pc-cygwin/7.4.0/../../../../x86_64-pc-cygwin/bin/ld: /usr/src/debug/jsoncpp-1.9.2-1/example/stringWrite/stringWrite.cpp:29:(.text.startup+0x111): relocation truncated to fit: R_X86_64_PC32 against undefined symbol `Json::writeString[abi:cxx11](Json::StreamWriter::Factory const&, Json::Value const&)'
collect2: error: ld returned 1 exit status
[ 88%] Built target stringWrite
[100%] Built target streamWrite
```

Build is just performed as
```
 cmake -DBUILD_SHARED_LIBS:BOOL=ON  source-directory
 make
```
Except the examples everthing else seems fine

`All 102 tests passed`
Greetings! 
I write because a user has requested a Bamtools installation, and this JsonCpp is a dependency. 
Many people have releases that place items in system directories of local machines. In your release JsonCpp, is there any way to deploy this to an arbitrary, non-system, named directory which might be referenced by a PATH addition? (In many compilations, there is a standard step "configure" which takes care of this, with "prefix=<location>") Thanks for any leads.

The workflow you list on your website probably won't work, if we need an arbitrary location for the files or wish to deploy internally by custom RPM.
---- your docs ---
_You can download and install JsonCpp using the vcpkg dependency manager:_
_git clone https://github.com/Microsoft/vcpkg.git
cd vcpkg
./bootstrap-vcpkg.sh
./vcpkg integrate install
vcpkg install jsoncpp_

**Describe the bug**
A clear and concise description of what the bug is.

I executed ./bootstrap-vcpkg.sh
I also executed sudo .
I got an error when [67/67] linking CXX executable vcpkg

CMakeFiles/vcpkglib.dir/src/vcpkg/base/hash.cpp.o: In function `vcpkg::Hash::get_file_hash(vcpkg::Files::Filesystem const&, std::experimental::filesystem::v1::path const&, vcpkg::Hash::Algorithm, std::error_code&)':
hash.cpp:(.text+0x8d50): undefined reference to `std::iostream_category()'
hash.cpp:(.text+0x9bb3): undefined reference to `std::iostream_category()'
collect2: error: ld returned 1 exit status
ninja: build stopped: subcommand failed.



**To Reproduce**
Steps to reproduce the behavior:
1.

**Expected behavior**
A clear and concise description of what you expected to happen.

**Desktop (please complete the following information):**
 - OS: [e.g. iOS] ubunto 14.04
 - Meson version
 - Ninja version

**Additional context**
Add any other context about the problem here.

Am I doing something wrong or is that a bug?

```
Json::Value v;
v["data"] = "ä ö ü Ä Ö Ü";
std::string stds = v["data"].asString();
OutputDebugString( stds.data() );
//ä ö ü Ä Ö Ü
// as expected...

// Now, i write it in a string...	
Json::FastWriter writer;
std::string  s = writer.write( v );
OutputDebugString( s.data() );
// {"data":"\u4836 \ufffd \u0120\u05a0\ufffd"}

// and back again...
Json::Reader reader;
Json::Value r;
reader.parse( s, r );

// we look at the 'data'
stds = r["data"].asString();
OutputDebugString( stds.data() );
// There should contain ä ö ü Ä Ö Ü
// but: ä ¶ ï¿½ Ä Ö ï¿½

// if we write the parsed data again...
std::string s2 = writer.write( r );
OutputDebugString( s2.data() );
// {"data":"\u4836 \ufffd \u0120\u05a0\ufffd"}
// the same like the origin data
```
Any ideas?

