I notice that you import mantle's header file using 'import ""', 
Could you use 'import <*/*>' to import third library header file? Because This can cause many header file reference problem.

Thanks
- with a podspec.json if a platform version isn’t defined, the lowest version available will be used.
- ’os_unfair_lock_trylock' is only available on iOS 10.0, macOS 10.12, tvOS 10.0 and watchOS 3.0 or newer
- [see Apple Docs](https://developer.apple.com/documentation/os/1646469-os_unfair_lock_trylock)

### Thanks for wanting to contribute to this project!
### Unfortunately, it's not really maintained anymore.

Feel free to use it as-is, or fork it and modify as much as you want to suit your needs.
However, I can't guarantee that I'll have time/energy to look at new issues and pull requests.

Sorry for the trouble!

Hi there, thanks for this fantastic lib, it's very useful and the code is very impressive. I really want to put concrete protocol into my project, however, I found some performance issue(this lib looks like not maintained, but why don't we just discuss this issue here).

I checked the implementation of the concrete protocol function, and I found when loading concrete protocols, a lot of time will spent on traversing  all Objc classes for making protocol connected target class automatically. I have a test in an almost empty project, and we will got more than 13000 classes in the system foundation. it will take very long time to load all the concrete protocols.

In this simple test, I create 100 concrete protocols, more than 1.20s will spent on loading phase, it will be worse when we actually use it in a real project. 

So there is my solution, create a `concreteprotocol2` macro to all the specific target classes(just increase a little bit writing complexity for making such a great high performance).

for example:

```
@concreteprotocol2( DemoProtocol, @"AppDelegate", @"Class1", @"Class2")
```

That will drop the traversing code, and take less than 1ms to load all the 100 concrete protocols.
To support the following form of usage: (`str` is a instance of `NSString *`)
* `@keypath(str, lowercaseString.UTF8String)`
* `@keypath(NSString *, lowercaseString.UTF8String)`
* `@keypath(NSString.new, lowercaseString.UTF8String)`



![image](https://user-images.githubusercontent.com/1250207/45557315-e1902100-b86f-11e8-94b3-3adbd75e330e.png)
The version on https://cocoapods.org is out of date, please push the latest version

![](http://jft0m-1254413962.cossh.myqcloud.com/2018-06-13-10-51-35.png)

### Thanks for wanting to contribute to this project!
### Unfortunately, it's not really maintained anymore.

Feel free to use it as-is, or fork it and modify as much as you want to suit your needs.
However, I can't guarantee that I'll have time/energy to look at new issues and pull requests.

Sorry for the trouble!

Hi, I used EXTConcreteProtocol to extend my protocol. I met a question when I used it.
When used liked this 
#import <EXTConcreteProtocol.h>
@protocol TestProtocol
@concrete
- (void)changed;
@end

@concreteprotocol(TestProtocol)
- (void)changed {
    NSLog(@"Update");
}
@end
interface TestObject:NSObject<TestProtocol>
@end 
@implementation TestObject
@end

int main(int argc, const char * argv[]) {
    @autoreleasepool {
        TestObject *object = [TestObject new];
        [object buzz];
    }
    return 0;
}

it worked well.

======

But when I used in a single application like 
let TestObject confirm TestProtocol, and I used it on my viewController, then, it cannot be complied success. 

Further, I let my viewController confirm TestProtocol, call function buzz in viewDidLoad, it worked.

I found another git repository called ProtocolKit, which call do same work like EXTConcreteProtocol. 
Maybe I have problem in using protocol.

I create a repository here to describe my question: git@github.com:tangzzz-fan/TGTestProtocol.git

Thanks advanced.


Fix metamacro_argcount macro when __VA_ARGS_'s count is 0

### Thanks for wanting to contribute to this project!
### Unfortunately, it's not really maintained anymore.

Feel free to use it as-is, or fork it and modify as much as you want to suit your needs.
However, I can't guarantee that I'll have time/energy to look at new issues and pull requests.

Sorry for the trouble!

The LLVM not drop warning for this:

```
- (int)test
{
    if (YES) {

    } else {
        @weakify(self);
        ^{
            @strongify(self);
            NSLog(@"%@",self.class);
        }();
    }
}
```

If I remove weakly and strongly it drop compile error.

```
- (int)test
{
    if (YES) {

    } else {
        ^{
            NSLog(@"%@",self.class);
        }();
    }
} // Control reaches end of non-void function
```
