Dear guys,

First if all happy holliday to you all.
Now to my question. Iâ€™ve been playing with SoftwareBitBang a couple of months ago, and with the support of the community i was able to make it work between 2 arduinos and 2 wemos d1mini.
Unfortunately due to lack of time and success, i left this topic sitting on my work bench since.
Now i would like to restart a and give it another try.
Before i do so i tought to share my final goal with you, so you comment on paths to follow and so on.

I would like to spread out many small arduinos in my garden manly hooked up to a relay to switch lights and sprinkler heads all of the connected thru an coax cable ending up on a wemos mini which i plan to use as a gateway between standart UPD protocol used by my home automation and the SoftwareBitBang for the arduino switches. 

I would like to use an wemos as gateway as i like their possibilities like OTA an so on. However if i need to use and arduino with an eth shield i would do so. 

No to my tests so far. As i wrote earlier i have been able to communicate between to arduinos or 2 Wemos using SoftwareBitBang. However as soon i try to mix them up i was not able to make them work. (If i remember right someone tried to explain me why but i dit not get it ðŸ˜³) The i tried using an eth shield on a arduino nano (which worked for the BitBang) sadly i got conflicts between the eth and the pjon library. This was the stage i gave up since my basic skills donâ€™t allow me to change libraries on my on...

So iâ€™m wondering am I the only one trying such a scenario? Or did i miss a key Element of Pjon protocol? 

Thank you so much for your comments.
Br M.

Thank you for your great out of box software. I have been working on simple IOT sensor network solely using probe request protocol. It is very power efficient for battery powered devices. Please implement this protocol in your software. There are 2 sketches for my software called ProbeReceiver.ino which is single main gateway on the network and ProbeSender.ino is used by all battery powered ESP devices on network. You only need to implement ProbeReceiver code. ProbeReceiver code already have MQTT broker built in. Link to my code is below:

https://github.com/happytm/BatteryNode

Thanks.
I think page 93 (DualUDP) of the book has a mistake at the end of the first paragraph. The last sentence should read: "Like the **LocalUDP** strategy ..." or am I wrong?
Hi,

For a home project I am trying to deploy PJON as a RS485 bus.
To start I loaded the Blink RS485 example and loaded the transmitter and a receiver to a teensy LC.
Using pin 17 to control the RTS of the rs485.

I see that the transmitter is sending data but goes into error mode because of connection lost.
I also see that the receiver does not call the receiver function to start.

**Transmitter**
`
/* PJON MAX485 serial modules RS485 communication example */
#define HWSERIAL Serial1
#include <PJON.h>

// <Strategy name> bus(selected device id)
PJON<ThroughSerial> bus(45);

void setup() {
  // Initialize LED 13 to be off
  pinMode(LED_BUILTIN, OUTPUT);
  digitalWrite(LED_BUILTIN, LOW);
  // Initialize Serial instance used for PJON communication
  Serial1.begin(9600);
  bus.strategy.set_serial(&Serial1);
  // Set enable pins
  bus.strategy.set_enable_RS485_pin(17);
  bus.strategy.set_RS485_delay(1);
  bus.set_error(error_handler);
  bus.begin();
  // Send B to device 44 every 1.5s
  bus.send_repeatedly(44, "B", 1, 1500000);
}

void error_handler(uint8_t code, uint16_t data, void *custom_pointer) {
  if(code == PJON_CONNECTION_LOST)
    digitalWrite(LED_BUILTIN, HIGH); // Light up LED 13 if a packet transmission failed
}

void loop() {
    bus.update();
    bus.receive();
};`

**receiver**

/* PJON MAX485 serial modules RS485 communication example */
#define HWSERIAL Serial1
#include <PJON.h>

// <Strategy name> bus(selected device id)
PJON<ThroughSerial> bus(44);

void setup() {
  // Initialize LED 13 to be off
  pinMode(LED_BUILTIN, OUTPUT);
  digitalWrite(LED_BUILTIN, LOW);
  // Initialize Serial instance used for PJON communication
  Serial1.begin(9600);
  bus.strategy.set_serial(&Serial1);
  // Set enable pins
  bus.strategy.set_enable_RS485_pin(17);
  bus.begin();
  bus.set_receiver(receiver_function);
};

void receiver_function(uint8_t *payload, uint16_t length, const PJON_Packet_Info &packet_info) {
  /* Make use of the payload before sending something, the buffer where payload points to is
     overwritten when a new message is dispatched */
  //if(payload[0] == 'B') {
    digitalWrite(LED_BUILTIN, HIGH);
    delay(3);
    digitalWrite(LED_BUILTIN, LOW);
    delay(3);
  //}
}

void loop() {
  bus.update();
  bus.receive();
};
Hello

I have an ongoing project that is at the production board stage and so far have been populating the units with ATMEGA328P processors. However I've just accidentally ordered a batch of the PB models which claim to be backwards compatible, but when I try a board with this processor it all seems to work, apart from one digital output that only seems to work if I use it as a PWM output, and the PJON communication doesn't seem to work. I've just tried updating my library to the latest here as mentions adding 328PB compatibility but to no avail. I'm using software bitbang on pin 12 between two ATMEGA chips and SWBB_MODE 3. Any suggestions? 

Thanks 
Just trying to send some packages from my Wemos D1 Mini (ESP8266, very similar to NodeMCU) to a small PJON python receiver on my desktop.
I can send the package, however looking at the Network device with tcpdump shows a very weird behavior:
```
00:57:52.028368 IP 192.168.12.9.7000 > 192.168.12.1.7000:  [|rx] (0)
	0x0000:  f8d1 110c 9230 a020 a60b a237 0800 4500
	0x0010:  001c d98f 0000 ff11 48e6 c0a8 0c09 c0a8
	0x0020:  0c01 1b58 1b58 0008 2fd3
00:57:52.028657 IP 192.168.12.9.7000 > 192.168.12.1.7000:  [|rx] (0)
	0x0000:  f8d1 110c 9230 a020 a60b a237 0800 4500
	0x0010:  001c d990 0000 ff11 48e5 c0a8 0c09 c0a8
	0x0020:  0c01 1b58 1b58 0008 2fd3
00:57:52.028991 IP 192.168.12.9.7000 > 192.168.12.1.7000:  [|rx] (0)
	0x0000:  f8d1 110c 9230 a020 a60b a237 0800 4500
	0x0010:  001c d991 0000 ff11 48e4 c0a8 0c09 c0a8
	0x0020:  0c01 1b58 1b58 0008 2fd3
00:57:52.029459 IP 192.168.12.9.7000 > 192.168.12.1.7000:  [|rx] (0)
	0x0000:  f8d1 110c 9230 a020 a60b a237 0800 4500
	0x0010:  001c d992 0000 ff11 48e3 c0a8 0c09 c0a8
	0x0020:  0c01 1b58 1b58 0008 2fd3
```
I see UDP packages coming in every 0.3 ms, meaning about 30000 messages per second. I highly doubt that this is very efficient.

This problem also occurs using the Arduino esp8266 Transmitter example.

Is this expected, or is there a way to prevent this?


I cannot find any info about the status of compatibility with ARM and particularly ATSAMD (M0, M4). I was considering to use a trinket M0 instead of attiny85. Would that be possible?
Hi, 
I continue my investigations with PJON... after ESP8266 and ESP8285 only tests, I have started tests with an ESP8266 as Master and an ATTiny84 as Slave (I have just received these low-cost microcontrollers and my experience with these is not as extensive as with the ESPxxxx)
Note: my tests of communication peer to peer were working (sending a message from ESP8266 to ATTiny with known device_id)

Here is my latest version on the ATTiny84:
```
#define PJON_INCLUDE_SWBB true
#define SWBB_RESPONSE_TIMEOUT 5000
#define SWBB_MODE   1
// Avoid using packet buffer
#define PJON_MAX_PACKETS        0
#include <PJONSlave.h>

/* Bus id - Initially set as localhost to demonstrate the ability of slaves to
   find a master thanks to its advertisement no matter which bus id is used */
uint8_t bus_id[] = {0, 0, 0, 0};
// Device address (unique address of a physical device)
uint8_t device_address[] = {1, 2, 3, 4, 50};

// PJON object
PJONSlave<SoftwareBitBang> bus(device_address);

void receiver_handler(uint8_t *payload, uint16_t length, const PJON_Packet_Info &packet_info) {

};

void error_handler(uint8_t code, uint8_t data, void *custom_pointer) {
  // Standard PJON error
  if(code == PJON_CONNECTION_LOST) {
    Serial.print("Connection lost with device ");
    Serial.println((uint8_t)bus.packets[data].content[0], DEC);
  }
  // PJONSlave related errors
  if(code == PJON_ID_ACQUISITION_FAIL) {
    if(data == PJON_ID_CONFIRM)
        digitalWrite(5, HIGH); 
        delay(100);
        digitalWrite(5, LOW); 
        delay(100);
    if(data == PJON_ID_NEGATE)
        digitalWrite(5, HIGH); 
        delay(100);
        digitalWrite(5, LOW); 
        delay(100);
        digitalWrite(5, HIGH); 
        delay(100);
        digitalWrite(5, LOW); 
        delay(100);

    if(data == PJON_ID_REQUEST)
        digitalWrite(5, HIGH); 
        delay(100);
        digitalWrite(5, LOW); 
        delay(100);
        digitalWrite(5, HIGH); 
        delay(100);
        digitalWrite(5, LOW); 
        delay(100);
        digitalWrite(5, HIGH); 
        delay(100);
        digitalWrite(5, LOW); 
        delay(100);

  
  }
};

void setup() {
  bus.set_error(error_handler);
  bus.set_receiver(receiver_handler);
  bus.strategy.set_pin(2);
  bus.begin();
  pinMode(5, OUTPUT); 
  digitalWrite(5, HIGH); 
  delay(1000);
  digitalWrite(5, LOW); 
}

void loop() {
  if(bus.connected) {
    digitalWrite(5, HIGH); 
  }
  else
  {
    digitalWrite(5, LOW); 
  }
  bus.update();
  bus.receive(1000);
};
```

And on the ESP8266:
```
#define PJON_INCLUDE_SWBB true
#define SWBB_MODE   1
// Avoid using packet buffer
#define PJON_MAX_PACKETS        0
#define PJON_MAX_DEVICES        200
#include <PJONMaster.h>
// <Strategy name> bus(selected device id)
uint8_t bus_id[] = {0, 0, 1, 105};
PJONMaster<SoftwareBitBang> bus(bus_id); 


int c_time;

void error_handler(uint8_t code, uint16_t data, void *custom_pointer) {
  if(code == PJON_CONNECTION_LOST) {
    Serial.print("PJON error: connection lost with device id ");
    Serial.println((uint8_t)bus.packets[data].content[0], DEC);
  }
  if(code == PJON_DEVICES_BUFFER_FULL) {
    Serial.print("PJONMaster error: master devices' buffer is full with a length of ");
    Serial.println(data);
  }
};

void receiver_function(uint8_t *payload, uint16_t length, const PJON_Packet_Info &packet_info) {
  /* Make use of the payload before sending something, the buffer where payload points to is
     overwritten when a new message is dispatched */

  // If debug is active prints addressing packet infromation
  if(packet_info.port == PJON_DYNAMIC_ADDRESSING_PORT) {
    Serial.print("Addressing request: ");
    Serial.print(payload[0]);
    Serial.print(" Device address: ");
    Serial.print(payload[1]);
    Serial.print(".");
    Serial.print(payload[2]);
    Serial.print(".");
    Serial.print(payload[3]);
    Serial.print(".");
    Serial.print(payload[4]);
    Serial.print(".");
    Serial.print(payload[5]);
  }

  // General packet data
  Serial.print(" Header: ");
  Serial.print(packet_info.header, BIN);
  Serial.print(" Length: ");
  Serial.print(length);
  Serial.print(" Sender id: ");
  Serial.print(packet_info.sender_id);

  // Packet content
  Serial.print(" Packet: ");
  for(uint8_t i = 0; i < length; i++) {
    Serial.print(payload[i]);
    Serial.print(" ");
  }
  Serial.print("Packets in buffer: ");
  Serial.println(bus.update());
};

void setup() {
  Serial.begin(115200);
  /* Let addressing procedure packets to be received by the receiver function
     to ease debugging or analysis */
  bus.debug = true;

  bus.strategy.set_pin(5);
  bus.set_receiver(receiver_function);
  bus.set_error(error_handler);
  bus.begin();
  c_time = millis();
};

void loop() {
  if(millis() - c_time > 5000) {
    Serial.println("List of slaves known by master: ");
    for(uint8_t i = 0; i < PJON_MAX_DEVICES; i++) {
      if(bus.ids[i].state) {
        Serial.print(" - Device id: ");
        Serial.print(i + 1); // Shifted by one to avoid PJON_BROADCAST
        Serial.print(" Device address: ");
        Serial.print(bus.ids[i].device_address[0]);
        Serial.print(".");
        Serial.print(bus.ids[i].device_address[1]);
        Serial.print(".");
        Serial.print(bus.ids[i].device_address[2]);
        Serial.print(".");
        Serial.print(bus.ids[i].device_address[3]);
        Serial.print(".");
        Serial.print(bus.ids[i].device_address[4]);
        Serial.println();
      }
    }
    Serial.println();
    Serial.flush();
    c_time = millis();
  }
  bus.receive(5000);
  bus.update();
};
```

The led connected to the pin 5 should at least blink to notify errors... but nothing is blinking (except during the initial test in Setup())

in the serial console, I have not more than 
```
23:42:18.622 -> List of slaves known by master: 
23:42:18.622 -> 
23:42:23.616 -> List of slaves known by master: 
23:42:23.616 -> 
23:42:28.643 -> List of slaves known by master: 
23:42:28.643 -> 
23:42:33.636 -> List of slaves known by master: 
23:42:33.636 -> 
23:42:38.627 -> List of slaves known by master: 
23:42:38.627 -> 
23:42:43.646 -> List of slaves known by master: 
23:42:43.646 -> 
23:42:48.651 -> List of slaves known by master: 
23:42:48.651 -> 
```


Where am I wrong? 

Thank you very much for your help
Hi Giovanni, 
This is the sneak preview - just to get things going - have fun with it, but treat it as a work in progress that is not intended to be fully functional (or beautiful). Do not spent too much work on code reviews this is not intended to be merged yet :)
Have fun
Det
I use both Arduino and Particle Photons, and I would like to see PJON implemented into the Particle Library System, I am currently working my way through just copying it into the Web IDE but it would be much appreciated if support could be added! (I would love to help if there was anything I could do?) I've been using PJON for a bit but this is the first time I have actually posted in the PJON community!