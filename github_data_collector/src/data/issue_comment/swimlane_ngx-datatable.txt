A check was missing in the code and after adding it everything working fine.

**What kind of change does this PR introduce?** (check one with "x")
- [x] Bugfix
- [ ] Feature
- [ ] Code style update (formatting, local variables)
- [ ] Refactoring (no functional changes, no api changes)
- [ ] Build related changes
- [ ] CI related changes
- [ ] Other... Please describe:

**What is the current behavior?** (You can also link to an open issue here)

https://github.com/swimlane/ngx-datatable/issues/1725

**What is the new behavior?**

Functionality is working as expected. 

**Does this PR introduce a breaking change?** (check one with "x")
- [ ] Yes
- [x] No

If this PR contains a breaking change, please describe the impact and migration path for existing applications: ...


**Other information**:

Below code treegrid template not considering

<ngx-datatable-column name="Name" [isTreeColumn]="true" [width]="300" [treeLevelIndent]="20">
          <ng-template ngx-datatable-tree-toggle let-tree="cellContext">
            <button [disabled]="tree.treeStatus === 'disabled'" (click)="tree.onTreeAction()">
              <span *ngIf="tree.treeStatus === 'loading'">
                ...
              </span>
              <span *ngIf="tree.treeStatus === 'collapsed'">
                ↑
              </span>
              <span *ngIf="tree.treeStatus === 'expanded'">
                ↓
              </span>
              <span *ngIf="tree.treeStatus === 'disabled'">
                ⃠
              </span>
            </button>
          </ng-template>

**I'm submitting a ...**  (check one with "x")
```
[ ] bug report => search github for a similar issue or PR before submitting
```

**Current behavior**
<!-- Describe how the bug manifests. -->

**Expected behavior**
<!-- Describe what the behavior would be without the bug. -->

**Reproduction of the problem**
<!-- If the current behavior is a bug or you can illustrate your feature request better with an example, please provide the steps to reproduce and if possible a minimal demo of the problem via https://plnkr.co or similar (you can use this template as a starting point: http://plnkr.co/edit/vtAo2zzWFn8kFOGRH88r). -->

**What is the motivation / use case for changing the behavior?**
<!-- Describe the motivation or the concrete use case -->

**Please tell us about your environment:**
<!-- Operating system, IDE, package manager, HTTP server, ... -->

* **Table version:** 
16.0.3

* **Angular version:** 
8

* **Browser:** [all | Chrome XX | Firefox XX | IE XX | Safari XX | Mobile Chrome XX | Android X.X Web Browser | iOS XX Safari | iOS XX UIWebView | iOS XX WKWebView ]
<!-- All browsers where this could be reproduced -->

* **Language:** [all | TypeScript X.X | ES6/7 | ES5]

**I'm submitting a ...**  (check one with "x")
```
[x ] bug report => search github for a similar issue or PR before submitting
[ ] feature request
[ ] support request => Please do not submit support request here, post on Stackoverflow or Gitter
```

**Current behavior**
allRowsSelected in datatable.component.ts contains only conditions related with default values without [displayCheck] like below;
` get allRowsSelected(): boolean {
    let allRowsSelected = (this.rows && this.selected && this.selected.length === this.rows.length);

    if (this.selectAllRowsOnPage) {
      const indexes = this.bodyComponent.indexes;
      const rowsOnPage = indexes.last - indexes.first;
      allRowsSelected = (this.selected.length === rowsOnPage);
    }

    return this.selected && this.rows &&
      this.rows.length !== 0 && allRowsSelected;
  }`
also onHeaderSelect doesn't contain any limit from [displayCheck] and it doesn't use allRowsSelected
` onHeaderSelect(event: any): void {

    if (this.selectAllRowsOnPage) {
      // before we splice, chk if we currently have all selected
      const first = this.bodyComponent.indexes.first;
      const last = this.bodyComponent.indexes.last;
      const allSelected = this.selected.length === (last - first);

      // remove all existing either way
      this.selected = [];

      // do the opposite here
      if (!allSelected) {
        this.selected.push(...this._internalRows.slice(first, last));
      }
    } else {
      // before we splice, chk if we currently have all selected
      const allSelected = this.selected.length === this.rows.length;
      // remove all existing either way
      this.selected = [];
      // do the opposite here
      if (!allSelected) {
        this.selected.push(...this.rows);
      }
    }

    this.select.emit({
      selected: this.selected
    });
  }`
**Expected behavior**
allRowsSelected should contain also conditions related with [displayCheck] function. So if we have 25 rows on page but we can mark as checked only 5 of them (limited by displayCheck) allRowsSelected will be set on true if all 5 elements are checked not 25.

**What is the motivation / use case for changing the behavior?**
<!-- Describe the motivation or the concrete use case -->

**Please tell us about your environment:**
<!-- Operating system, IDE, package manager, HTTP server, ... -->

* **Table version:** 
15.*, 16.*

* **Angular version:** 
7.*, 8.*

* **Browser:** [all]

* **Language:** [all]

**I'm submitting a ...**  (check one with "x")
```
[x] bug report => search github for a similar issue or PR before submitting
[ ] feature request
[ ] support request => Please do not submit support request here, post on Stackoverflow or Gitter
```

**Current behavior**
The header can sometimes allow to select all rows, when the checkbox selection mode is on I guess. The issue is that `select` is an already-existing event name used for text selection. That means that if I select some text inside a header cell, this will trigger a `select` event as if I've checked that checkbox. That means all rows are selected and the table emits a `select` event.

**Expected behavior**
There should not be any conflict between the two events.

**Reproduction of the problem**
See https://stackblitz.com/edit/ngx-datatable-responsive-demo-h85eqj?file=app%2Fdemo-component.ts
When selecting the text inside the input in the header, three events are logged into the console.

**What is the motivation / use case for changing the behavior?**
Not having a bug ^^

**Please tell us about your environment:**
Not relevant but: MacOS, Chrome (latest)

* **Table version:** 
16.0.0

* **Angular version:** 
7.2, but the behavior should be the same everywhere (it's a standard)

* **Browser:** [all | Chrome XX | Firefox XX | IE XX | Safari XX | Mobile Chrome XX | Android X.X Web Browser | iOS XX Safari | iOS XX UIWebView | iOS XX WKWebView ]
Only tested on Chrome, but the behavior should be the same everywhere (it's a standard)

* **Language:** [all | TypeScript X.X | ES6/7 | ES5]
TypeScript


Workaround for now: wrapping the content of each header cell with a `(select)="$event.preventDefault()"`. Changing the event name seems to be the best option for the long term but introduces a breaking change.
**I'm submitting a bug report**

**Current behavior**
I am using ngx-datatable component in a host component  in which the columns are provided through an input property like this :- 

```
<ngx-datatable #bmTableV2 *ngIf="!tableProcessing" [rows]="sliceRowData"
 [headerHeight] = "headerHeight" 
[columns]="formatedColumns"
 [columnMode]="columnMode" 
[cssClasses]="cssClasses"
 [rowIdentity]="rowIdentity"
 [rowHeight]="rowHeight" 
[scrollbarH]="scrollbarH"
        [scrollbarV]="scrollbarV"
        [selectCheck]="selectCheck"
        [displayCheck]="displayCheck"
        [selected]="selected"
        (select)="onSelect($event)"
        [selectionType]="selectionType"
        [sorts]="sorts"
        [sortType]="sortType"
        [trackByProp]="trackByProp"
        [rowClass]="rowClass"
        [virtualization]="virtualization"
        [messages]="messages"
        (activate)="activeEvent($event)"
        (resize)="columnResized($event)"
        [summaryPosition]="summaryPosition"
        [summaryRow]="summaryRow"
        [summaryHeight]="rowHeight"
        (scroll)="scrollEvent($event)"
      >
```

       <ngx-datatable-row-detail *ngIf="rowDetail"
                                  #detailRow
        >

          <ng-template let-row="row" let-expanded="expanded" ngx-datatable-row-detail-template>
            <ng-container *ngTemplateOutlet="rowDetail.template; context: { $implicit: row  }">
            </ng-container>
          </ng-template>

        </ngx-datatable-row-detail>

      </ngx-datatable> `

I am passing the column cellTemplate in the input property with the "columns" property  and the template is put in the same host element below above code like this:-

```
 <ng-template let-column="column" let-row="row" let-value="value" #defaultCell>
  <app-bm-table-v2-default-cell [column]="column" [row]="row"></app-bm-table-v2-default-cell>
</ng-template>

<ng-template let-column="column" let-row="row" let-value="value" let-index="rowIndex" #customCheckboxTemp>
  
 
  <bm-slider [isChecked]="row['selected']" [inputId]="'tableCheck-'+tableId+'-'+index" labelVal="" inputVal=""
               (changeCheck)="appendSelectItems($event,row,column,index)" [isDisabled]="row['disableCheck'] || column.isDisabled"></bm-slider>
</ng-template> 
```

When the page loads for the first time, everything works normally with the correct updated values inside the host element and the table. But when I apply some filter and change the table inputs (with new values and inline with the change detection mechanism), the new values are reflected fine but when triggering the slider event which is within the cell template, it is using the old host component reference and the values within "this" context of host is outdated and not matching the current values.

```
/**
   * When slider used, to mark rows selectable or not
   * @param e
   * @param row
   * @param column
   * @param rowIndex
   */
  appendSelectCheckboxItems(e, row, column, rowIndex){
   
    if(e.checked && !row['disableCheck']){
      if(this.selectCheck != undefined)
        if(!this.selectCheck(row, column, rowIndex)){
          e.checked = false;
        }
      }
    //Here the "this" takes initial default values and not the latest values, coz of which the event emitter get observers = []; which otherwise in the component has observers = [Subscriber]
    this.selectEvent.emit({selected: row, value: e.checked});

  }
```

**Expected behavior**
"this" host component reference should have latest values and not the outdated ones so that the event emitter works as expected. Also as seen in the body-cell.component.ts file , this Viewchild has 'static: true' and not set as false. Is this the issue, as it is statically resolved.
`@ViewChild('cellTemplate', { read: ViewContainerRef, static: true })
  cellTemplate: ViewContainerRef;`


**What is the motivation / use case for changing the behavior?**
<!-- Describe the motivation or the concrete use case -->

**Please tell us about your environment:**
MACOS

* **Table version:** 
15.0.2

* **Angular version:** 
7.1.4

* **Browser:**
 all


* **Language:** all | TypeScript X.X | ES6/7 | ES5]

**I'm submitting a ...**  (check one with "x")
```
[X ] bug report => search github for a similar issue or PR before submitting
[ ] feature request
[ ] support request => Please do not submit support request here, post on Stackoverflow or Gitter
```

**Current behavior**
By default, when you set selectionType = cell, the entire row highlights when the bootstrap theme is applied.
This is because the bootstrap theme doesn't have the same &:not(.cell-selection) theming logic as the material theme:
https://github.com/swimlane/ngx-datatable/blob/master/projects/swimlane/ngx-datatable/src/lib/themes/bootstrap.scss
https://github.com/swimlane/ngx-datatable/blob/master/projects/swimlane/ngx-datatable/src/lib/themes/material.scss

**Expected behavior**
Only the selected cell should be highlighted

**Reproduction of the problem**
http://swimlane.github.io/ngx-datatable/#cell-selection
but change the theme to bootstrap

**What is the motivation / use case for changing the behavior?**
Bootstrap cell selection should still work as expected.

**Please tell us about your environment:**
not applicable

* **Table version:** 
16

* **Angular version:** 
8

* **Browser:** [all | Chrome XX | Firefox XX | IE XX | Safari XX | Mobile Chrome XX | Android X.X Web Browser | iOS XX Safari | iOS XX UIWebView | iOS XX WKWebView ]
all

* **Language:** [all | TypeScript X.X | ES6/7 | ES5]
all
**I'm submitting a ...**  (check one with "x")
```
[X] bug report => search github for a similar issue or PR before submitting
[ ] feature request
[ ] support request => Please do not submit support request here, post on Stackoverflow or Gitter
```

**Current behavior**
http://swimlane.github.io/ngx-datatable/#cell-selection
Click on a cell. Hover over to the cell to the left or right of it, no activate event gets logged to the console.

**Expected behavior**
Activate on a cell level should occur regardless of whether or not the activate is in the same row.

**Reproduction of the problem**
http://swimlane.github.io/ngx-datatable/#cell-selection
Click on a cell. Hover over to the cell to the left or right of it, no activate event gets logged to the console.

**What is the motivation / use case for changing the behavior?**
I would like to know whenever the user enters any cell via mouse

**Please tell us about your environment:**
latest Chrome

* **Table version:** 
<!-- Check whether this is still an issue in the most recent table version -->

* **Angular version:** 
<!-- Check whether this is still an issue in the most recent Angular version -->

* **Browser:** [all | Chrome XX | Firefox XX | IE XX | Safari XX | Mobile Chrome XX | Android X.X Web Browser | iOS XX Safari | iOS XX UIWebView | iOS XX WKWebView ]
<!-- All browsers where this could be reproduced -->

* **Language:** [all | TypeScript X.X | ES6/7 | ES5]

**I'm submitting a ...**  (check one with "x")
```
[ ] bug report => search github for a similar issue or PR before submitting
[ ] feature request
[x] support request => Please do not submit support request here, post on Stackoverflow or Gitter
```

**Current behavior**
variable is not accessible

**Expected behavior**
variable is accessible in the template

**What is the motivation / use case for changing the behavior?**
I'm trying to get access of an external variable "distance" inside of a cell template. Therefore I'm looking for a way to tell the template the variable like this. I know that this is not working, but how can I achieve this? Unfortunately, it is no option to enhance the objects of "filteredSkaterlist" with the objects of "distaneList"

	<ngx-datatable
		[rows]="filteredSkaterlist"
	>
		<ng-container *ngFor="let distance of distaneList">
			<ngx-datatable-column name="Distance" prop="distance">
				<ng-template let-skater="row" let-distance="distance" ngx-datatable-cell-template>
					{{ distance | json }}
				</ng-template>
			</ngx-datatable-column>
		</ng-container>
	</ngx-datatable>

**Please tell us about your environment:**
MacOS, Chrome 71, Angular 8, ngx-datatable (latest release)

* **Table version:** 
latest 16.0.2

* **Angular version:** 
8.3

* **Browser:** [all | Chrome XX | Firefox XX | IE XX | Safari XX | Mobile Chrome XX | Android X.X Web Browser | iOS XX Safari | iOS XX UIWebView | iOS XX WKWebView ]
Chrome 71

* **Language:** [all | TypeScript X.X | ES6/7 | ES5]
all
Bumps [handlebars](https://github.com/wycats/handlebars.js) from 4.1.2 to 4.5.3.
<details>
<summary>Changelog</summary>

*Sourced from [handlebars's changelog](https://github.com/wycats/handlebars.js/blob/master/release-notes.md).*

> ## v4.5.3 - November 18th, 2019
> Bugfixes:
> 
> - fix: add "no-prototype-builtins" eslint-rule and fix all occurences - f7f05d7
> - fix: add more properties required to be enumerable - 1988878
> 
> Chores / Build:
> - fix: use !== 0 instead of != 0 - c02b05f
> - add chai and dirty-chai and sinon, for cleaner test-assertions and spies, 
>   deprecate old assertion-methods  - 93e284e, 886ba86, 0817dad, 93516a0
> 
> Security:
> 
> - The properties `__proto__`, `__defineGetter__`, `__defineSetter__` and `__lookupGetter__` 
>   have been added to the list of "properties that must be enumerable".
>   If a property by that name is found and not enumerable on its parent, 
>   it will silently evaluate to `undefined`. This is done in both the compiled template and the "lookup"-helper. 
>   This will prevent new Remote-Code-Execution exploits that have been
>   published recently.
> 
> Compatibility notes: 
> 
> - Due to the security-fixes. The semantics of the templates using
>   `__proto__`, `__defineGetter__`, `__defineSetter__` and `__lookupGetter__` in the respect that those expression now return 
>   `undefined` rather than their actual value from the proto.
> - The semantics have not changed in cases where the properties are  enumerable, as in:
> 
> ```js
> {
>   __proto__: 'some string'
> }
> ```
> 
> - The change may be breaking in that respect, but we still only 
>   increase the patch-version, because the incompatible use-cases
>   are not intended, undocumented and far less important than fixing
>   Remote-Code-Execution exploits on existing systems.
> 
> 
> 
> [Commits](https://github.com/wycats/handlebars.js/compare/v4.5.2...v4.5.3)
> 
> ## v4.5.2 - November 13th, 2019
> # Bugfixes
> 
> - fix: use String(field) in lookup when checking for "constructor" - d541378
> - test: add fluent API for testing Handlebars - c2ac79c
> 
> Compatibility notes:
> - no incompatibility are to be expected
></tr></table> ... (truncated)
</details>
<details>
<summary>Commits</summary>

- [`c819c8b`](https://github.com/wycats/handlebars.js/commit/c819c8b533934d2ac18001d7eb27a3205b00c2f3) v4.5.3
- [`827c9d0`](https://github.com/wycats/handlebars.js/commit/827c9d0747bef7d7f89829779523b6b2dcf3051d) Update release notes
- [`f7f05d7`](https://github.com/wycats/handlebars.js/commit/f7f05d7558e674856686b62a00cde5758f3b7a08) fix: add "no-prototype-builtins" eslint-rule and fix all occurences
- [`1988878`](https://github.com/wycats/handlebars.js/commit/198887808780bbef9dba67a8af68ece091d5baa7) fix: add more properties required to be enumerable
- [`886ba86`](https://github.com/wycats/handlebars.js/commit/886ba86c2f9cc71b7d99b9018fbe2d72a57085cc) test/chore: add chai/expect and sinon to "runtime"-environment
- [`0817dad`](https://github.com/wycats/handlebars.js/commit/0817dad7e72c51d07f7700547d0c69aa79a4976b) test: add sinon as global variable to eslint in the specs
- [`93516a0`](https://github.com/wycats/handlebars.js/commit/93516a0b07026ebd23c84fddf270a0c8b570bc59) test: add sinon.js for spies, deprecate current assertions
- [`93e284e`](https://github.com/wycats/handlebars.js/commit/93e284ed9be1e38c5e6945f15af1ccd689f2ada6) chore: add chai and dirty-chai for better test assertions
- [`c02b05f`](https://github.com/wycats/handlebars.js/commit/c02b05fa819f46bb66c878bebc6e8006408ebd5c) fix: use !== 0 instead of != 0
- [`8de121d`](https://github.com/wycats/handlebars.js/commit/8de121d21c88a6ab877e3a0eec9daaac483f3bf0) v4.5.2
- Additional commits viewable in [compare view](https://github.com/wycats/handlebars.js/compare/v4.1.2...v4.5.3)
</details>
<br />

[![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=handlebars&package-manager=npm_and_yarn&previous-version=4.1.2&new-version=4.5.3)](https://help.github.com/articles/configuring-automated-security-fixes)

Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.

[//]: # (dependabot-automerge-start)
[//]: # (dependabot-automerge-end)

---

<details>
<summary>Dependabot commands and options</summary>
<br />

You can trigger Dependabot actions by commenting on this PR:
- `@dependabot rebase` will rebase this PR
- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it
- `@dependabot merge` will merge this PR after your CI passes on it
- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it
- `@dependabot cancel merge` will cancel a previously requested merge and block automerging
- `@dependabot reopen` will reopen this PR if it is closed
- `@dependabot ignore this [patch|minor|major] version` will close this PR and stop Dependabot creating any more for this minor/major version (unless you reopen the PR or upgrade to it yourself)
- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)
- `@dependabot use these labels` will set the current labels as the default for future PRs for this repo and language
- `@dependabot use these reviewers` will set the current reviewers as the default for future PRs for this repo and language
- `@dependabot use these assignees` will set the current assignees as the default for future PRs for this repo and language
- `@dependabot use this milestone` will set the current milestone as the default for future PRs for this repo and language

You can disable automated security fix PRs for this repo from the [Security Alerts page](https://github.com/swimlane/ngx-datatable/network/alerts).

</details>
**What kind of change does this PR introduce?** (check one with "x")
- [x] Bugfix
- [ ] Feature
- [ ] Code style update (formatting, local variables)
- [ ] Refactoring (no functional changes, no api changes)
- [ ] Build related changes
- [ ] CI related changes
- [ ] Other... Please describe:

**What is the current behavior?** (You can also link to an open issue here)
Virtual grid with variable height rows is not repainted after scrolling, or repaint is delayed.

**What is the new behavior?**
Repainting/refreshing happens right away.

**Does this PR introduce a breaking change?** (check one with "x")
- [ ] Yes
- [x ] No

If this PR contains a breaking change, please describe the impact and migration path for existing applications: ...


**Other information**:
This is very old bug, I hope you can accept this fix soon. I need to patch the lib on the fly for the time being to make grid refresh itself.
