Apologies if this is the incorrect place to ask for help! I'm attempting to grok some of the examples and just wondering if I'm reading something correctly..

In the [proxy example](https://github.com/tokio-rs/tokio-core/blob/8cd731fe469166dfba316a67987532b77d8dcea4/examples/proxy.rs#L52), the code appears to connect to the remote server at every message?

```rust
    let done = socket.incoming().for_each(move |(client, client_addr)| {
        let server = TcpStream::connect(&server_addr, &handle);  // ??
        let amounts = server.and_then(move |server| {
            // ...
        });
        // ...
        Ok(())
});
```

Perhaps I'm making a mistake regard what socket is iterating over in the call to `socket.incoming().for_each()`? How many iterations per connection would one expect on a long lived connection?
I am getting below error
error[E0061]: this function takes 1 parameter but 0 parameters were supplied
   --> /home/suraj.prakash/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.9/src/reactor/poll_evented.rs:276:39
    |
276 |         if let Async::NotReady = self.poll_read() {
    |                                       ^^^^^^^^^ expected 1 parameter

error[E0308]: mismatched types
   --> /home/suraj.prakash/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.9/src/reactor/poll_evented.rs:276:16
    |
276 |         if let Async::NotReady = self.poll_read() {
    |                ^^^^^^^^^^^^^^^ expected enum `std::result::Result`, found enum `futures::Async`
    |
    = note: expected type `std::result::Result<futures::Async<usize>, std::io::Error>`
               found type `futures::Async<_>`

error[E0061]: this function takes 1 parameter but 0 parameters were supplied
   --> /home/suraj.prakash/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.9/src/reactor/poll_evented.rs:289:39
    |
289 |         if let Async::NotReady = self.poll_write() {
    |                                       ^^^^^^^^^^ expected 1 parameter

error[E0308]: mismatched types
   --> /home/suraj.prakash/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.9/src/reactor/poll_evented.rs:289:16
    |
289 |         if let Async::NotReady = self.poll_write() {
    |                ^^^^^^^^^^^^^^^ expected enum `std::result::Result`, found enum `futures::Async`
    |
    = note: expected type `std::result::Result<futures::Async<usize>, std::io::Error>`
               found type `futures::Async<_>`

error[E0061]: this function takes 1 parameter but 0 parameters were supplied
   --> /home/suraj.prakash/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.9/src/reactor/poll_evented.rs:300:39
    |
300 |         if let Async::NotReady = self.poll_write() {
    |                                       ^^^^^^^^^^ expected 1 parameter

error[E0308]: mismatched types
   --> /home/suraj.prakash/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.9/src/reactor/poll_evented.rs:300:16
    |
300 |         if let Async::NotReady = self.poll_write() {
    |                ^^^^^^^^^^^^^^^ expected enum `std::result::Result`, found enum `futures::Async`
    |
    = note: expected type `std::result::Result<futures::Async<usize>, std::io::Error>`
               found type `futures::Async<_>`

error[E0061]: this function takes 1 parameter but 0 parameters were supplied
   --> /home/suraj.prakash/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.9/src/reactor/poll_evented.rs:335:39
    |
335 |         if let Async::NotReady = self.poll_read() {
    |                                       ^^^^^^^^^ expected 1 parameter

error[E0308]: mismatched types
   --> /home/suraj.prakash/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.9/src/reactor/poll_evented.rs:335:16
    |
335 |         if let Async::NotReady = self.poll_read() {
    |                ^^^^^^^^^^^^^^^ expected enum `std::result::Result`, found enum `futures::Async`
    |
    = note: expected type `std::result::Result<futures::Async<usize>, std::io::Error>`
               found type `futures::Async<_>`

error[E0061]: this function takes 1 parameter but 0 parameters were supplied
   --> /home/suraj.prakash/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.9/src/reactor/poll_evented.rs:350:39
    |
350 |         if let Async::NotReady = self.poll_write() {
    |                                       ^^^^^^^^^^ expected 1 parameter

error[E0308]: mismatched types
   --> /home/suraj.prakash/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.9/src/reactor/poll_evented.rs:350:16
    |
350 |         if let Async::NotReady = self.poll_write() {
    |                ^^^^^^^^^^^^^^^ expected enum `std::result::Result`, found enum `futures::Async`
    |
    = note: expected type `std::result::Result<futures::Async<usize>, std::io::Error>`
               found type `futures::Async<_>`

error[E0061]: this function takes 1 parameter but 0 parameters were supplied
   --> /home/suraj.prakash/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.9/src/reactor/poll_evented.rs:361:39
    |
361 |         if let Async::NotReady = self.poll_write() {
    |                                       ^^^^^^^^^^ expected 1 parameter

error[E0308]: mismatched types
   --> /home/suraj.prakash/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.9/src/reactor/poll_evented.rs:361:16
    |
361 |         if let Async::NotReady = self.poll_write() {
    |                ^^^^^^^^^^^^^^^ expected enum `std::result::Result`, found enum `futures::Async`
    |
    = note: expected type `std::result::Result<futures::Async<usize>, std::io::Error>`
               found type `futures::Async<_>`

error: aborting due to 12 previous errors

Some errors occurred: E0061, E0308.
For more information about an error, try `rustc --explain E0061`.
error: Could not compile `tokio-core`.
warning: build failed, waiting for other jobs to finish...
error: build failed

Hey there,

I want to use an RPC based technique like capnp-rpc for my client and server side web project. This lib relies on tokio-core, so my naive approach was to build it for the wasm32-unknown-unknown or wasm32-unknown-emscripten target to use it on the client side of the web app. Unfortunately the dependencies seem too tight for both compilers:

```console
    ...
   Compiling num_cpus v1.8.0
error[E0432]: unresolved import `sys`
  --> /home/sascha/.cargo/registry/src/github.com-1ecc6299db9ec823/net2-0.2.32/src/tcp.rs:18:5
   |
18 | use sys::c;
   |     ^^^ Maybe a missing `extern crate sys;`?
error[E0432]: unresolved import `sys`
  --> /home/sascha/.cargo/registry/src/github.com-1ecc6299db9ec823/net2-0.2.32/src/udp.rs:18:5
   |
18 | use sys::c;
   |     ^^^ Maybe a missing `extern crate sys;`?
error[E0432]: unresolved import `sys`
  --> /home/sascha/.cargo/registry/src/github.com-1ecc6299db9ec823/net2-0.2.32/src/socket.rs:20:5
   |
20 | use sys;
   |     ^^^ no `sys` in the root
error[E0432]: unresolved import `sys`
  --> /home/sascha/.cargo/registry/src/github.com-1ecc6299db9ec823/net2-0.2.32/src/socket.rs:21:5
   |
21 | use sys::c;
   |     ^^^ Maybe a missing `extern crate sys;`?
error[E0433]: failed to resolve. Maybe a missing `extern crate sys;`?
  --> /home/sascha/.cargo/registry/src/github.com-1ecc6299db9ec823/net2-0.2.32/src/socket.rs:34:13
   |
34 |         use sys::c::socklen_t as len_t;
   |             ^^^ Maybe a missing `extern crate sys;`?
```

Do you think it would be useful to use the tokio related libs within a web frontend context or is my initial approach not the best?
Hello

It seems that by using `tokio-executor` under the hood, the behaviour changed in backwards-incompatible way. If inside one future I create a new core and try to run something in it, it panics with `cannot recursively call into Core` (https://github.com/tokio-rs/tokio-core/blob/master/src/reactor/mod.rs#L242).

I know this is an edge case and that I'd try to avoid it in a real application (I use it in some tests, checking some edge cases of my own) and that the reason for it is to actually disallow this degenerate case, but it was allowed before, so I don't know if it's OK to forbid it now.
So I've implemented a simple server [here](https://github.com/valarauca/syslogsrvr). You can build this with `cargo build` and running it takes a `--socket` argument for the address it should listen on.

The goal was to test a udp based syslog application. All this really does is check the UTF8 datagrams to valid strings, and print them. 

---

The problem is I see 1 datagram, then it just consumes 100% cpu infinitely spinning on a single core. I can see in wireshark that my remote services are still sending packets, but the only data I'm seeing is `Async::NotReady`. 

`netstat -vaun` shows myself listening on the expected port and that it is open.

There isn't every anything to encode, I'm just looking for a stream of incoming datagrams. 

---

version info:

```
rustc 1.26.0-nightly (29f5c699b 2018-02-27)
rustc 1.24.0 (stable)
```

display idenatical behavior. I'm on Ubuntu 16.04.04 (kernel 4.4.0-116-generic)

---

Update sometimes I just see no frames, have a port open, and packets hitting the port, and I'm still spinning at 100% cpu with no data. 
This adds support for lio_listio(2), a way of submitting multiple aio_read(2), aio_write(2), and/or aio_fsync(2) operations in a single system call.  Higher level support will be provided by the tokio-file crate.
In the first example of [Tokio's tutorial](https://tokio.rs/docs/getting-started/simple-server/), the `decode` function returns an error if it has invalid UTF-8. I hacked the decode function a bit to return that error no matter what, but when I ran the server and simulated the error the connection was dropped (which I surely want) but that error showed up neither in the `stderr` nor in the response. 

I don't really know if it's omitted in the example for simplicity but I went through documentation to find how an answer to how to show that error but couldn't. 
  
I am attempting to write a UdpServer which responds to packets received through `UdpFramed`. however I run into difficulties when using `Sink` because it is consumed upon a call by `Stream::forward` when making a reply. I have tried placing the future returned by `Stream::forward` to an instance variable, but it is not possible to clone (reasonably) when a call to `Handler::spawn` is required as well as a new saving of the feature to the instance variable. I just want the frames to be sent and flushed at the earliest time (order is not required), but I am no longer sure what the intended way to do this is.

This problem would not be an issue on a TCP connection since each client utilizes a separate `Sink`, and therefore it is sensible to send the reply before pulling more data.

Let me know if I should post a Rust playground or something. An example of the intended way to run a server like this would be helpful. I have looked at the examples, but they do not really concern my problem much at all.
Specifically this is because of the use of a `UnsafeCell` inside a long list of types so I am not sure which part exactly needs to implement this (guessing it is the `Queue` that would assert that it is safe?).

```
error[E0277]: the trait bound `std::cell::UnsafeCell<*mut futures::sync::mpsc::queue::Node<std::option::Option<tokio_core::reactor::Message>>>: std::panic::RefUnwindSafe` is not satisfied in `gluon::Thread`
  --> tests\main.rs:91:9
   |
91 |         tensile::test(name.clone(), move || -> Result<(), String> {
   |         ^^^^^^^^^^^^^ the type std::cell::UnsafeCell<*mut futures::sync::mpsc::queue::Node<std::option::Option<tokio_core::reactor::Message>>> may contain interior mutability and a reference may not be safely transferrable across a catch_unwind boundary
   |
   = help: within `gluon::Thread`, the trait `std::panic::RefUnwindSafe` is not implemented for `std::cell::UnsafeCell<*mut futures::sync::mpsc::queue::Node<std::option::Option<tokio_core::reactor::Message>>>`
   = note: required because it appears within the type `futures::sync::mpsc::queue::Queue<std::option::Option<tokio_core::reactor::Message>>`
   = note: required because it appears within the type `futures::sync::mpsc::Inner<tokio_core::reactor::Message>`
   = note: required because it appears within the type `alloc::arc::ArcInner<futures::sync::mpsc::Inner<tokio_core::reactor::Message>>`
   = note: required because it appears within the type `std::marker::PhantomData<alloc::arc::ArcInner<futures::sync::mpsc::Inner<tokio_core::reactor::Message>>>`
   = note: required because it appears within the type `std::ptr::Shared<alloc::arc::ArcInner<futures::sync::mpsc::Inner<tokio_core::reactor::Message>>>`
   = note: required because it appears within the type `std::sync::Arc<futures::sync::mpsc::Inner<tokio_core::reactor::Message>>`
   = note: required because it appears within the type `futures::sync::mpsc::Sender<tokio_core::reactor::Message>`
   = note: required because it appears within the type `futures::sync::mpsc::UnboundedSender<tokio_core::reactor::Message>`
   = note: required because it appears within the type `tokio_core::reactor::Remote`
   = note: required because it appears within the type `std::option::Option<tokio_core::reactor::Remote>`
   = note: required because it appears within the type `gluon::<unnamed>::vm::GlobalVmState`
   = note: required because it appears within the type `alloc::arc::ArcInner<gluon::<unnamed>::vm::GlobalVmState>`
   = note: required because it appears within the type `std::marker::PhantomData<alloc::arc::ArcInner<gluon::<unnamed>::vm::GlobalVmState>>`
   = note: required because it appears within the type `std::ptr::Shared<alloc::arc::ArcInner<gluon::<unnamed>::vm::GlobalVmState>>`
   = note: required because it appears within the type `std::sync::Arc<gluon::<unnamed>::vm::GlobalVmState>`
   = note: required because it appears within the type `gluon::Thread`
   = note: required because of the requirements on the impl of `std::panic::UnwindSafe` for `*const gluon::Thread`
   = note: required because it appears within the type `gluon::<unnamed>::gc::GcPtr<gluon::Thread>`
   = note: required because it appears within the type `gluon::RootedThread`
   = note: required because it appears within the type `[closure@tests\main.rs:91:37: 93:10 vm:gluon::RootedThread, name:std::string::String, filename:std::path::PathBuf]`
   = note: required because of the requirements on the impl of `tensile::Testable` for `[closure@tests\main.rs:91:37: 93:10 vm:gluon::RootedThread, name:std::string::String, filename:std::path::PathBuf]`
   = note: required by `tensile::test`

```
I'd like to use a `UdpSocket` as a `Stream`/`Sink` of `(SocketAddr, Vec<u8>)`. Is there a reason these impls don't already exist? I'm aware I can use `Framed`, but I'd prefer not to have to write a `UdpCodec` for converting bytes to bytes. IMHO `UdpCodec` belongs in some higher-level library and `tokio-core` should just provide a UDP API for sending/receiving packets of bytes.