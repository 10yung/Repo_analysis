I used triton for the taint tracking proftpd program, but unfortunately, there was a signal 11 error

`
terminate called after throwing an instance of 'std::runtime_error'
  what():  tracer::pintool::context::getCurrentMemoryValue(): Page not readable.
C: Tool (or Pin) caused signal 11 at PC 0x7f58306a9177
`

proftpd is a multi-process program, so I want to know if pintool supports multi-process or multi-thread

When only using taint engine, it's not doing getReadRegisters(), getLoadAccess(), and other methods in every instructions.
These methods only works when symbolic engine was enabled.
It seems that these are related to symbolic engine.
Do I need to always enable symbolic engine if I only use taint engine? or only enable taint engine then solve it with debugger/instrumentator's API?

Hi Jonathan,

Based on Triton's dependency on Pintool, I'm wondering if PowerPC support can be added to the architectures list.  If possible, which files need to be altered/added to ensure support?

I found that removing the taint from `eflags` does not remove the taint from the zero flag `ZF` or any other flags.
I feel like this is not intended or am I missing something?

Example script:
```
#!/usr/bin/env python2

from triton import *

try:
    from triton_autocomplete import *
except:
    pass

ctx = TritonContext()
ctx.setArchitecture(ARCH.X86_64)

print("tainting zf")
ctx.setTaintRegister(ctx.registers.zf, True)


print("clearing eflags taint")
ctx.setTaintRegister(ctx.registers.eflags, False)

print("zf is tainted: {}".format(ctx.isRegisterTainted(ctx.registers.zf)))
```

Output:
```
./taint_eflags_test.py 
tainting zf
clearing eflags taint
zf is tainted: True
```
The PR changes the visibility of symbols to hidden by default and requires the use of `TRITON_EXPORT` to export them.

Additionally I have removed the `dllexport.hpp` header and replaced it with a cmake generated one through `generate_export_header`.

This reduces the exported symbol count from somewhere around 9100 to 7400 and the size of the binary from 4.8MB to 4.6MB. (release build)
```
Current:
git:(dev-v0.8) ✗ ls src/libtriton/libtriton.so -lah
-rwxrwxr-x 1 anon anon 4,8M Okt 27 13:54 src/libtriton/libtriton.so
git:(dev-v0.8) ✗ readelf -s src/libtriton/libtriton.so | wc
   9091   72790  755228
   
New:
git:(dev-v0.8) ✗ ls src/libtriton/libtriton.so -lah
-rwxrwxr-x 1 anon anon 4,6M Okt 27 13:51 src/libtriton/libtriton.so
git:(dev-v0.8) ✗ readelf -s src/libtriton/libtriton.so | wc
   7373   59046  609280
```

To get a full picture of what I did and why it is useful, check out [this cppcon19 talk](https://youtu.be/m0DwB4OvDXk?t=159)

I have only tested the code on linux so far with pintool enabled, kernel4 and python2 bindings.
Edit: I have now also built it on windows and force-pushed the required changes to make it build
#723
`src\examples\cpp\ir.cpp`
`Line 73:    std::cout << std::endl << std::endl;`
after executing this code, it crashed.
https://ibb.co/4pTWHTb
Hi
I am trying to compile the project under Windows 7 Ultimate SP1
Visual Studio 2017 using this python script :
`# Compile for the proper OS
	if osn == 'Windows':
		# Download the dependencies
		if not OS.path.isfile('%s/CACHE/%s' % (curpath, TRITON_BOOST)):
			UT.info('Downloading prebuilt Boost: %s' % TRITON_BOOST)
			UT.execute('curl -L %s -o %s/CACHE/%s' % (TRITON_BOOST_URL, curpath, TRITON_BOOST))
		if not OS.path.isfile('%s/CACHE/%s' % (curpath, TRITON_CAPSTONE)):
			UT.info('Downloading prebuilt Capstone: %s' % TRITON_CAPSTONE)
			UT.execute('curl -L %s -o %s/CACHE/%s' % (TRITON_CAPSTONE_URL, curpath, TRITON_CAPSTONE))
		# Unpack the dependencies
		if not OS.path.isdir('%s/deps/%s' % (curpath, TRITON_BOOST_DIR)):
			UT.execute('7z x -y -o%s/deps %s/CACHE/%s' % (curpath, curpath, TRITON_BOOST))
		if not OS.path.isdir('%s/deps/%s' % (curpath, TRITON_CAPSTONE_DIR)):
			UT.execute('7z x -y -o%s/deps %s/CACHE/%s' % (curpath, curpath, TRITON_CAPSTONE))
		# Detect the python includes directory and library
		PYTHON_DIR = UT.python_path()
		# Generate the cmake configuration command
		cmd = ('cmake -G "%s" ' +
			'-DCMAKE_CXX_FLAGS="-march=native" ' +
			'-DBOOST_ROOT=%s\\deps\\%s ' +
			'-DPYTHON_INCLUDE_DIRS=%s\\include ' +
			'-DPYTHON_LIBRARIES=%s\\libs\\python27.lib ' +
			'-DZ3_INCLUDE_DIRS=%s\\deps\\z3\\include ' +
			'-DZ3_LIBRARIES=%s\\deps\\z3\\bin\\libz3.lib ' +
			'-DCAPSTONE_INCLUDE_DIRS=%s\\deps\\%s\\include ' +
			'-DCAPSTONE_LIBRARIES=%s\\deps\\%s\\capstone.lib ' +
			'-DCMAKE_CXX_STANDARD_LIBRARIES="legacy_stdio_definitions.lib msvcrt.lib msvcmrt.lib" ' +
			'..') % (generator, curpath, TRITON_BOOST_DIR, PYTHON_DIR, PYTHON_DIR, curpath,
			curpath, curpath, TRITON_CAPSTONE_DIR, curpath,
			TRITON_CAPSTONE_DIR)
		UT.execute(cmd)
		# Compile Triton
		`
I keep getting this error :

> LINK : warning LNK4098: defaultlib 'LIBCMT' conflicts with use of other libs; u
se /NODEFAULTLIB:library [D:\vmp\VMProtectDumper\Scripts\build_triton\Triton\bu
ild\src\libtriton\triton.vcxproj]
tritonToZ3Ast.obj : error LNK2019: unresolved external symbol "void __cdecl boo
st::throw_exception(class std::exception const &)" (?throw_exception@boost@@YAX
AEBVexception@std@@@Z) referenced in function "private: class z3::expr __cdecl
triton::ast::TritonToZ3Ast::do_convert(class std::shared_ptr<class triton::ast:
:AbstractNode> const &,class std::unordered_map<class std::shared_ptr<class tri
ton::ast::AbstractNode>,class z3::expr,struct std::hash<class std::shared_ptr<c
lass triton::ast::AbstractNode> >,struct std::equal_to<class std::shared_ptr<cl
ass triton::ast::AbstractNode> >,class std::allocator<struct std::pair<class st
d::shared_ptr<class triton::ast::AbstractNode> const ,class z3::expr> > > *)" (
?do_convert@TritonToZ3Ast@ast@triton@@AEAA?AVexpr@z3@@AEBV?$shared_ptr@VAbstrac
tNode@ast@triton@@@std@@PEAV?$unordered_map@V?$shared_ptr@VAbstractNode@ast@tri
ton@@@std@@Vexpr@z3@@U?$hash@V?$shared_ptr@VAbstractNode@ast@triton@@@std@@@2@U
?$equal_to@V?$shared_ptr@VAbstractNode@ast@triton@@@std@@@2@V?$allocator@U?$pai
r@$$CBV?$shared_ptr@VAbstractNode@ast@triton@@@std@@Vexpr@z3@@@std@@@2@@7@@Z) [ 

> 
