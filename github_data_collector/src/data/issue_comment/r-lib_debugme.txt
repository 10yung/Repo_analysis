- [ ] Make sure that enabling/disabling of {plogr} is consistent with the {debugme} strategy
- [ ] Make {plogr} use the same output routine
- [ ] Show a worked example
- [ ] Document
For some reason I couldn't make it work in a package. Reprex follows.
First, thanks for putting this package together it is nice having the ability to have debug statements in a package with almost no cost. I recently started adding debugme to a package that I am putting together and noticed some issues with package datasets. The issue is that after adding debugme to the package and activating it, that the type of my datasets will change from data.frame to list. 

I recreated the problem in a minimal package using the example package in Rstudio and debugme (1.1.0 from rcran or master from github) on R 3.5.0 and 3.5.1 as follows:

Data creation:
testdata <- data.frame(x=17, y=42)
usethis::use_data(testdata)

.onLoad:
.onLoad <- function(libname, pkgname) {
debugme::debugme()
}

Then after loading the package the (called test) the type of testdata will have changed from a data.frame to a list. If helpful, I can provide the complete test package code that reproduces the error.

I did a little bit of digging and it looks like the error relates to the object set selected for inspection. Specifically, this line in debugme::debugme:
objects <- ls(env, all.names = TRUE)

In my test package, I see this:
> objects
".__NAMESPACE__."      ".__S3MethodsTable__." ".onLoad"              ".packageName"         "hello"  

At the start of the debugme::debugme function I have:
> class(test::testdata)
[1] "data.frame"
After calling instrument on namespace (objects[1])
> assign(objects[1], debugme:::instrument(get(objects[1], envir=env), pkg), envir=env)
The type changes from data.frame to list
> class(test::testdata)
[1] "list"

It looks like the instrumentation of .__NAMESPACE__. results in a change in the dataset in the package. If I replace the all.names = T to all.names = F in ls:
objects <- ls(env, all.names = F)

Then, my dataset works fine after loading as the ls now excludes patterns starting with dot. 

This makes me wonder what the rationale for having all.names = T is? I am wondering if it is to ensure instrumentation of .onLoad and friends or if I am missing something? 
That will allow debugging subprocesses.
- [ ] Use comments, if possible.  Comments look nicer, and they really have zero overhead. (It might not be possible, as it probably requires re-parsing the code, especially if CRAN will include the source refs without the parse data.)
- [ ] Assertions #32 
- [ ] Re-think debug levels
- [ ] Tagging
- [ ] Turn debugging on-off using:
   - Package names
   - Debug levels
   - Tags
   - Function names
   - File names
   - Etc ???
- [ ] C/C++ support
- [ ] Formatters, defaulting to glue
- [ ] JSON (?) logging, basically some way to log composite objects that can be inspected
- [ ] Logging to a pipe or fifo, to be able to inspect, browse while the logging is active
- [ ] Interactive log browser, an HTML widget would be nice.
- [ ] Handle repeated log messages better
- [ ] Ability to stop in a `browser()`, if the debug message is active. We probably just need to 
    make sure that something like  
    ```
    ## !DEBUG { if (cond) browser() } blah
    ```
     works

In general re-think the annotation, debug levels, etc.
(continuation of my Tweet https://twitter.com/henrikbengtsson/status/984323561656483841)

Analogously to how you can produce debug messages using:
```r
    "!DEBUG Hello world: x = `x`"
```
I'd like to run assertion statements that have near-zero overhead, e.g.
```r
    "!ASSERT 'x' is integer `stopifnot(is.integer(x))`"
```

This will allow package developers to add lots of internal assertions validating not only the contract of returned values, but also intermediate values.

The above could be achieved by
```r
    "!DEBUG `stopifnot(is.integer(x))`"
```
but the downside is that this will also trigger lots of `DEBUG`-produced output if such exists.  Not only may such output clutter troubleshooting but it may also have side effects conflicting with any troubleshooting efforts, e.g. in a `DEBUG` statement may touch a promise (think "delayed assignment") causing different results than when disabled.

Any assert framework should be supported, so it should not be hard coded to `stopifnot()` [which comes with even more overhead in R (>= 3.5.0)], assertthat, checkmate, ...
Really enjoy using your package, so here's another feature request:

_Allow disabling/suppressing the time diff after each line per debug statement._

For more extensive debug cases I like to print the environment variables:

```R
"!!!DEBUG Full environment:\n`capture.output(print(base::Sys.getenv()))`"
```

Which gives the output (excerpt):

```
mypackage Full environment:
CLICOLOR_FORCE                            1 +13ms mypackage Full environment:
CLUTTER_IM_MODULE                         xim +13ms mypackage Full environment:
COMPIZ_BIN_PATH                           /usr/bin/ +13ms mypackage Full environment:
COMPIZ_CONFIG_PROFILE                     ubuntu +13ms mypackage Full environment:
DBUS_SESSION_BUS_ADDRESS                  unix:abstract=/tmp/dbus-VNMWlDe8Oz +13ms mypackage Full environment:
DEBUGME                                   inspecter +13ms mypackage Full environment:
DEFAULTS_PATH                             /usr/share/gconf/ubuntu.default.path +13ms mypackage Full environment:
DESKTOP_SESSION                           ubuntu +13ms mypackage Full environment:
DISPLAY                                   :0 +13ms mypackage Full environment:
```

AFAICS there is no way to print a multi-line statement from within a DEBUG statement, and this might be out of scope? Maybe there is a solution I don't see to have line breaks in the output created by debug statements...

Some ideas:

**a)** defining some syntax to allow multiline output: `"!!!DEBUG NOBREAK message..."`
**b)** exposing a function to users for checking if logging is enabled, so I can check before I make a potentially costly call: `debugme::isEnabled(level = 1)`

It would be great to have full timestamps in addition to/replacing the diff ones on the terminal, as an option. I want to use debugme for logging a web application, and seeing when something happened should help identify issues.

_What do you think?_
