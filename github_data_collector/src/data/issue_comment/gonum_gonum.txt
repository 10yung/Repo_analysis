This change prevents the compiler from emitting FMA instructions during Drotmg and Drotm which would otherwise cause the arm64 build to fail.

Please take a look.

Updates #1218.

<!--
Checklist:

- API changes have been discussed
- code is goformated correctly (goimports)
- packages with generated code have had code generation run
- tests pass locally
- linked to relevant issues

Please make sure your commit message summary line and pull request
title match the Go convention; a one-line summary of the change,
prefixed by the primary affected package that should complete the
sentence, "This change modifies Gonum to _____."
-->

Please take a look (check test log since these are currently allowed failures).

Updates #1218.

<!--
Checklist:

- API changes have been discussed
- code is goformated correctly (goimports)
- packages with generated code have had code generation run
- tests pass locally
- linked to relevant issues

Please make sure your commit message summary line and pull request
title match the Go convention; a one-line summary of the change,
prefixed by the primary affected package that should complete the
sentence, "This change modifies Gonum to _____."
-->

Adding the arm64 architecture to the build matrix shows up a number of issues in our testing. These all come down to numerical precision differences between amd64 and arm64 (some show up in arm as well, 386 shows no differences with amd64).

The arm64 arch will be in allowed failures when #1217 is merged which is not ideal, so we need to get the failures resolved so it will show up in the build report on PRs.

This is the list of failure (checked indicates I'm happy with the fix approach - I will add the change sha when #1217 is merged).

- [x] gonum.org/v1/gonum/blas/blas64 `TestDrotmg` "tolerance drotm y_0 mismatch RD1_Med_RD2_Big_Flag_0: expected 0, found 5.1194107541670215e-11"
- [x] gonum.org/v1/gonum/blas/gonum `TestDrotmg` "tolerance drotm y_0 mismatch RD1_Med_RD2_Big_Flag_0: expected 0, found 5.1194107541670215e-11"
- [x] gonum.org/v1/gonum/fourier tolerance `ExampleFFT_Coefficients_tone` 0c0a3fef116df8c4a19bf956d9c1a536b34a08e0
- [x] gonum.org/v1/gonum/graph/layout bug `TestEadesR2` infinite value b5cc9a985978f3b32ea1066f8722cf8a3dc8495e
- [x] gonum.org/v1/gonum/graph/layout tolerance/ED `TestIsomapR2` d8ec179f2bfc07f4e1af26de87896d672c76a332
- [ ] gonum.org/v1/gonum/internal/asm/f32 tolerance `TestGer` "Test 7 (15x15) align(x:0,y:0,a:0): unexpected value at 77 Got: 1139.92 Expected: 1139.9202" d09a8892ecb325647bbfa9463014fe87b4ab94c9 19131e1d1696cf5862175557dc4aa951a49e864b
- [ ] gonum.org/v1/gonum/internal/cmplx64 tolerance `TestSqrt` "Sqrt((2.9263773+5.2290835i)) = (2.111708+1.2381171i), want (2.1117082+1.238117i)" 7c0bd5a0933dd54f8f08bcbcd76d5dc30c45c06b
- [ ] gonum.org/v1/gonum/lapack/gonum tolerance `TestDlansb` "got 3.9533942447863906, want 3.9533942447863923"
- [ ] gonum.org/v1/gonum/lapack/gonum tolerance `TestDlascl` "unexpected A[0,0]=26.358078839820152, want 26.358078839820152"
- [ ] gonum.org/v1/gonum/lapack/gonum tolerance `TestDlaln2` "Want (-0.9316138629711816+0i), got (-0.9316138629728812+0i)"
- [ ] gonum.org/v1/gonum/lapack/gonum ?tolerance `TestDgeev` "is not right real eigenvector"
- [ ] gonum.org/v1/gonum/mat tolerance `TestSymRankOne` "got: 0.2824558889951469 want: 0.28245588899514695" 78e1ded4ad704295a1c00a470e1b7d69ad74bb07
- [ ] gonum.org/v1/gonum/mathext tolerance `TestMvLgamma` "got=58.89384185123741 want=58.8938418512374" 3e57debe96bfbc7740b66b06894e897889ffd1dd
- [ ] gonum.org/v1/gonum/mathext/internal/amos tolerance `TestZacai` "c = 2.4275995843707387e+72, native = 3.269273576136148e+72" 08cd598920a727fc67106acff7e04c1ffde895db
- [ ] gonum.org/v1/gonum/mathext/internal/amos ?tolerance `TestZseri` "c = 82.43457817119072, native = 567.4873881105988" 08cd598920a727fc67106acff7e04c1ffde895db
- [ ] gonum.org/v1/gonum/optimize ? `TestBFGS`
- [ ] gonum.org/v1/gonum/optimize ? `TestLBFGS`
- [ ] gonum.org/v1/gonum/optimize ? `TestNewton`
- [x] gonum.org/v1/gonum/stat tolerance `TestROC` "got:[-5.551115123125783e-17 -5.551115123125783e-17 -5.551115123125783e-17 -5.551115123125783e-17 0.6 0.6 1] want:[0 0 0 0 0.6 0.6 1]"
- [x] gonum.org/v1/gonum/stat tolerance `ExampleROC_weighted`
- [x] gonum.org/v1/gonum/stat tolerance `ExampleROC_unsorted`
- [x] gonum.org/v1/gonum/stat tolerance `ExampleROC_equallySpacedCutoffs`
- [x] gonum.org/v1/gonum/stat tolerance `ExampleLinearRegression`
- [x] gonum.org/v1/gonum/stat/mds tolerance/ED `TestTorgersonScaling` cc09059115b33416663ac7822945c387ca80ac32
- [x] gonum.org/v1/gonum/stat tolerance ?tolerance `TestCovarianceMatrix` "expected cov &{{2 2 [0.8 3.2 3.2 13.142857142857146] 2} 2 2}, found &{{85 2 [0.8 3.2 0 13.142857142857142] 2} 2}"

@btracey @vladimir-ch @sbinet 
I add a basic instructions for ARM64, a little step for the big issue #1200.
I also remove TODO in AMD64.

<!--
Please make sure your issue title matches the Go convention; a summary
of the problem, prefixed by "proposal:" and the primary affected package.

It may be worth discussing the proposal at the Gonum discussion list
before filing the proposal issue:

https://groups.google.com/forum/#!forum/gonum-dev
-->
### Background

On onnx-go, we have poor performance on running some models on arm64. After profiling, we identify that we spend a lot of time on gonum.
More informations on this issue :
https://github.com/owulveryck/onnx-go/issues/169

### Proposal

Add arm64 asm instructions. 

### Potential impact of proposal
<!-- Extent of change, amount of work to implement, who will do the work? etc. -->



<!--
Please make sure your issue title matches the Go convention; a summary
of the problem, prefixed by the primary affected package.
-->
### What are you trying to do?
<!-- Describe the problem you are trying to solve. -->

I would like to have a fast moving median filter. The fastest implementation I know of is the double-heap. 

### What did you try?
<!-- Please include a link to a minimal reproducer here. -->

Nothing

### How does Gonum not allow you to achieve your goal?

Moving median is extremely slow without this functionality

### What version of Go and Gonum are you using?
<!--
Paste the output of `go version` and if you are installing Gonum from source, paste
the output of `(cd $(go env GOPATH)/src/gonum.org/v1/gonum && git rev-parse HEAD)`.
-->


### Is this feature absent from the current master?

Yes

### Are you able to help contribute the feature?
<!-- Can you provide code contributions or information to help? -->

Yes. I've written moving median filters in C for the bottleneck (python) project in the past. I'd be happy to contribute an implementation. 

This is the basic set of graph set operations that are worth adding:

- [ ] https://reference.wolfram.com/language/ref/GraphComplement.html
- [ ] https://reference.wolfram.com/language/ref/GraphDifference.html
- [ ] https://reference.wolfram.com/language/ref/GraphDisjointUnion.html
- [ ] https://reference.wolfram.com/language/ref/GraphIntersection.html
- [ ] https://reference.wolfram.com/language/ref/GraphUnion.html
- [ ] https://reference.wolfram.com/language/ref/Subgraph.html

It's not clear exactly where these should go though, or the design of the API; there are two broad possibilities

1. Wrapper types that makes an implicit operation (lazy, but more expensive in the long term?).
2. Functions that take a `src` and `dst` with other parameters (eager, but potentially optimisable).
3. Both?
The current HLL implementation is very simple and is there to get the package started. To get to feature completeness we should have

- [x] Sketch serialisation (simple, though hash serialisation is a consideration)
- [ ] Maximum likelihood cardinality estimation (see https://oertl.github.io/hyperloglog-sketch-estimation-paper/)
- [ ] Maximum likelihood co-cardinality estimation (ibid - and significantly harder)
- [ ] Compress (maybe)
This is adding the `MulVecTo` method to two matrix types which I think that it makes most sense to support natively in `linsolve`. However, seeing the function signature in the context of `mat` it doesn't seem to fit because of the slices, so I'm wondering whether it should take `*mat.VecDense` instead. This would of course require revisiting `linsolve` and changing the implementation to be more mat-like.

Just a draft at the moment.

Please take a look.

<!--
Checklist:

- API changes have been discussed
- code is goformated correctly (goimports)
- packages with generated code have had code generation run
- tests pass locally
- linked to relevant issues

Please make sure your commit message summary line and pull request
title match the Go convention; a one-line summary of the change,
prefixed by the primary affected package that should complete the
sentence, "This change modifies Gonum to _____."
-->

There are currently three functions that return a Laplacian. The `Laplacian` type holds an embedded `mat.Matrix`, however, two of the functions return a symmetric Laplacian. This makes the API less than friendly for users who want to get the eigenvalues for an undirected graph, since they either need to assert the embedded matrix to a `mat.Symmetric`, or perform a non-symmetric Eigen decomposition and then convert all the complex values to real values.

To fix this, add `SymmetricLaplacian` which embeds `mat.Symmetric` and return this from `NewLaplacian` (renamed to `NewSymmetricLaplacian`) and `NewSymNormLaplacian`.