Hy there. Thank you for this useful project.

Is there a way to edit my template so I can add subcommands for my existing custom ones, or even to already existing commands which already have subcommands (such as `jira epic ...`)?

Is there a way to make it more difficult to accidentally alter an JIRA issue assigned to someone else with go-jira?
It is easy to write an issue number wrong by mistake. I miss something like an "Are you sure?" prompt when trying to alter an existing issue assigned to someone else.
## jira version

```
$ jira version
1.0.22
```

## jira config

```
$ cat ~/.jira.d/config.yml
endpoint: https://jira.company.com
pasword-source: stdin
project: MYPROJECT
```

## Expectations

As per the README, I would expect `jira` to be able to take a password input from stdin, as follows:

```
$ ./password-generator | jira login --endpoint=https://my.jira.endpoint.com --user=USERNAME
```

## Actual result

When passing a password from stdin, `jira` throws an error and fails to log me in.

```
$ echo "hunter2" | jira login --endpoint=https://jira.company.com --user=pauline.lallinec
? Jira Password [pauline.lallinec]:


ERROR EOF
^[[65;119R%
 ;119R
```

## Additional notes

I am using MacOS Mojave 10.14.6 (18G2022), however I do not believe this is an issue related to MacOS. I containerized `jira` within a docker container based on Ubuntu, and got the same result.
Situation: I have a lot of custom commands, some of which share argument and option names.
Problem: If one of my commands `defaults` the value of an argument, ALL of the commands using that argument name get defaulted. In addition, it seems that any args from other functions also bleed
Expected: Each command's arguments/options be siloed

Example: 
> .jira.d/config.yml
```
#!/bin/bash
cat<<END
custom-commands:
  - name: cmd1
    args:
      - name: FOO
    script: |-
      echo "I have a FOO arg: {{args.FOO}}, but I can also see Unicorn {{args.UNICORN}}"
  - name: cmd2
    args:
      - name: FOO
        default: "BAR"
      - name: UNICORN
        default: "mAgIc"
    script: |-
      echo "I have a FOO arg defaulted to BAR: {{args.FOO}}"
END


```

running the "cmd1" command with no input shows it defaulting to `BAR` and also having access to the UNICORN argument from cmd2.

Basic Info:
```
 ~ > brew info go-jira
go-jira: stable 1.0.22 (bottled)
Simple jira command-line client in Go
https://github.com/go-jira/jira
/usr/local/Cellar/go-jira/1.0.22 (6 files, 10MB) *
  Poured from bottle on 2019-10-16 at 16:39:31
From: https://github.com/Homebrew/homebrew-core/blob/master/Formula/go-jira.rb
==> Dependencies
Build: go âœ˜
==> Analytics
install: 108 (30 days), 553 (90 days), 2,171 (365 days)
install-on-request: 108 (30 days), 551 (90 days), 2,162 (365 days)
build-error: 0 (30 days)
```
This to allow users to run the jira create command without using the editor. Hence without user interaction. This method of using a file, is more conventional. The input file is strictly a replacement of the editor content. 
I know that it is possible to use the editor with noedit, in combination with the override  options to achieve similar results, and to populate individual fields. But unfortunately, I found that this solution doesn't work in all situations.
example of use:
jira.exe create --file="create_LHR.yml" --project="LHR"

Hi,

When I try to get this program I got an error:
```bash
$ go get github.com/go-jira/jira/cmd/jira
# github.com/go-jira/jira/jiracli
go/src/github.com/go-jira/jira/jiracli/usage.go:157:45: cannot use app (type *"gopkg.in/alecthomas/kingpin.v2".Application) as type *"github.com/coryb/kingpeon/vendor/gopkg.in/alecthomas/kingpin.v2".Application in argument to kingpeon.RegisterDynamicCommandsWithRunner
```

**OS**: MacOS Mojave 10.14.6
**Golang**: 1.13.4 darwin/amd64
`jira ls -l 5 -t table` output differs from `jira ls -l 5 -t table | cat`. Table output seems to be different based on whether output is pipe or raw terminal.


It would be preferable to have a template that can be piped to `column`, usable to have a (global) width override, or nice to have the adjustable columns mention in linked issue.

Related: https://github.com/go-jira/jira/issues/176
Very simple question. Is it possible to use a text file instead of being prompted to use the editor?
For example I would need an option `--file="path\to\input_file" that replaces --editor="notepad++.exe"`
I can this way prepare the input file prior to launching the jira command, and get through this step without user interaction.
 

Hi,

I came across #135 and implemented the suggested custom-command. It works down to the last command where it tries to POST the issue/s to be added to the sprint.

It adds the issue to the sprint successfully, but I keep getting 'ERROR Invalid Usage: JSON Parse Error: EOF'. 

Running this with curl seems to have worked though:
```
curl -D- -u user:password -X POST -d '{"issues":["MYPROJ-1638"]}' -H "Content-Type: application/json" https://jira.company.com/rest/agile/1.0/sprint/2356/issue
HTTP/1.1 204

```

The problem to me seems to be that no output is returned by this command, thus both templates, -t debug and -t request fail as they require some json to be piped into toJson in the template

Looks like a regression to #72 

Is there any easy method to either not spit out the error, or - even better - take the HTTP code and create some output based on the http code

Thanks,
Sven
Could we please get the current master released? It seems the last release is missing `sprig` in templating?