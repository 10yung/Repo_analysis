Resolves https://github.com/tuist/tuist/issues/39

### Short description 📝

This pull request implements verbose logging so that any `System` or `File` commands are printed to the console. 

This only partially resolves #39 - Ideally we can introduce a more advanced logging system such as https://github.com/apple/swift-log, however this would require a larger refactor which is likely unworth it at this moment.

### Solution 📦

Add API to allow for `FileHandler` and `System` to print `verbose`


### Short description 📝

- Headers with a "Project" visibility were getting a "PROJECT" attribute in their build file in the generated project
- Project headers in Xcode however have no attributes set when set manually in the UI
- As it happens, setting any arbitrary value defaults to "Project" visibility in Xcode hence why this worked thus far

### Solution 📦

To make generated project more inline with Xcode, we can omitt setting attributes for project headers.

### Implementation 👩‍💻👨‍💻

- [x] Update `BuildPhaseGenerator`
- [x] Update change log

### Test Plan 🛠

- Run `tuist generate` within `fixtures/ios_app_with_frameworks/Framework2`
- Verify the generated project has `MyProjectClass.h` set to "Project" visbility in the generated project
It would be awesome if there was a way to pass a simple parameters or flags to the `generate` command.

We have complex project and I would like to generate it separately for development and production (app store builds).

I tried using env variables `PRODUCTION=true tuist generate` with following code in `Project.swift`:
```swift
import Foundation
import ProjectDescription

let isDev = ProcessInfo.processInfo.environment["PRODUCTION"] == nil
```

But the `isDev` variable is always `true`. Any ideas how to make at least env vars propagate inside?
Currently, when creating a scheme, we can only specify build, test, run and archive actions. Profile and analyze will always pick the default build configurations. 

I find there is #697 which adds archive action. 

I'm wondering if there are any difficulties in adding profile or analyze actions or simply because people rarely use them. I would love to help to add the support.
### Short description 📝

We've noticed the scheme generation is not always stable. The order of testable targets in a scheme could change after re-generating the project. 
It's reproducible when multiple testable targets depend on the same target (framework, or app) within a single project.

i.e.

- ProjectA:
  - AppTarget 
  - UnitTestsTarget (dependencies: [AppTarget])
  - UITestsTarget (dependencies: [AppTarget])

### Solution 📦

- Sorted testable targets
- Updated one of the unit tests to reproduce the issues, and avoid regression in the future
- Updated the integration tests to cover multiple testable targets user case

### Implementation 👩‍💻👨‍💻

- [x] Sort testable targets in SchemeGenerator
- [x] Update CHANGELOG

**Describe the bug**

When generating the manifest target to edit `Project.swift` the folder hierachy starts from my root directory (`/`). See image for a clear depiction.

**Expected**

I would expect it to generate me folders relative to the current working path.

**To Reproduce**

`tuist edit`

**Screenshots**

![image](https://user-images.githubusercontent.com/1382565/72437421-9c00a280-379a-11ea-9977-ba86db89cff5.png)

**Additional context**
Add any other context about the problem here.

Part of: https://github.com/tuist/tuist/issues/820 

### Short description 📝

To aid profiling Tuist large fixtures are needed.

### Solution 📦

Create a small command line tool to generate large fixtures

Usage:

```sh
swift run FixtureGenerator --projects 10 --targets 10 --sources 100
```

### Implementation 👩‍💻👨‍💻

- [x] Add fixture generator
- [ ] Update change log

### Test Plan 🛠

- Run `swift run` within `fixtures/stress_test`
- Run `tuist generate` within fixtures/stress_test/Fixture`
- Verify the generated fixure is valid
- Experiment with different number of sources / targets / projects to benchmark Tuist

### Questions

- Does this look like a reasonable approach to generating fixtures? 
- Any better tools / techniques we can apply here to make this easier to maintain / scale / extend? 
## Need/problem

There are quite a lot of types that are available as part of `ProjectDescription` module. It could be considered as Tuist's public API and we should have some guidelines how to introduce changes to it.

## Motivation

As part of thinking about #705 there was a [discussion](https://github.com/tuist/tuist/issues/705#issuecomment-567153714) about unifying the way we include files and resources to the generated project. We currently have several different types that handle this and tweaking them would potentially introduce a breaking change for people using Tuist. Of course not touching anything in ProjectDescription module is not a viable option, so I think we should have some sort of information on how to approach the problem.

# Unresolved questions

- [ ] Is this something that feels relevant for everyone else working on Tuist?
- [ ] Should we avoid doing breaking changes at all costs or introduce them if we feel it improves the experience considerably?
- [ ] Making additive changes should be fine, but what exactly is considered an additive change?
- [ ] Would there be a way to automate checking for breaking changes or we just try to flag it in code review?

## Need/problem

Is there any way to declare my own generation functions and use them instead of default ones.
For example I have 10 internal frameworks, I use the same template for target settings, each target has some unique information like: name, identifier, source path, tests path. Each target has the same setup, so `Project.swift` is copy paste.

Is there any way to create something like this:
```
{company_name}_framework(name: String, source: String, tests: String, ...) {
    let projectSettings = ...
    let targets = ...
    let schemes = ...
    Project(name: name,
                  settings: projectSettings,
                  targets: targets,
                  schemes: schemes)
}
```

Use ` {company_name}_framework` in `Project.swift` file for each framework instead of duplication creating targets, settings, schemes,...

I'm opening this issue to include the points that we'd like to discuss in our next sync call. Feel free to update the description of this issue to add more points:

- General intro / welcome new joiners
- Tuist usage updates (a round the table update of how everyone is getting along with Tuist / any issues / blockers)
- @kwridan: Performance / Optimising generation (proposal: https://github.com/tuist/tuist/issues/820)
- @ollieatkinson: Always good to talk over any open P/R's and how to unblock them.
- @ollieatkinson: There's also been some hesitation on my side in regards to starting new work knowing we are thinking of moving towards a reactive architecture - are we still considering this and should we start prepping some RFC documents
- Open Issues:
  - #889: API Stability Guidelines