... has huge impact on speed of processing, with this change the RSA and ECDSA keys are created within "init()" and used when needed. This is quick fix, please set it to some configuration variable if you consider that it is useful to generate them on each request. I dont think this would impact the security on client side. 
The goproxy doesn't handle a 100-continue or doesn't provide an example to show how to handle the 100-continue. This seems to be a problem for proxies in general from what I can tell. I haven't had the time to debug this thoroughly but there seems to be a change in go 1.13 for managing expect/continue requests that seems to break goproxy.

See https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Expect

Clients that send large payloads for PUT requests, such as aws s3 as an example, expect a ``100 continue``` response for an expect header request. An expect header looks like this :-

```
Expect: 100-continue
```

The proxy should respond with a 100 Continue but instead we see bad requests due to timeouts as the s3 server is still waiting for the body.

What is odd is that this all works with go 1.11.5 but breaks with go 1.13 and I haven't had the time to dig deeper into the issue but maybe the old golang version doesn't handle expect continue is my guess and now with go 1.13 it does and so we need to handle it in the proxy.

Now when I get RemoteAddr use resp.Request.RemoteAddr，I get 127.0.0.1:53246，How can I get the real remote ip address？
I am trying to workaround https://github.com/chromedp/chromedp/issues/190 by launching a goproxy server that would forward requests to another proxy. 

```
	pxy := goproxy.NewProxyHttpServer()
	pxy.Tr.Proxy = http.ProxyURL(proxyurl)

	go func() {
		err := http.ListenAndServe("localhost:9000", pxy)
		h.LogOnError(err)
	}()
```

Requests to http are OK but https are not using the proxy. Is it possible to add a proxy to the hijacked connection?
The [`Connect*` constants](https://godoc.org/github.com/elazarl/goproxy#pkg-constants) aren't documented. Expected them to be.

Workaround: Had to resort to [source code](https://github.com/elazarl/goproxy/blob/master/https.go#L92) to try to understand what they do.
how to install in linux ?  Shoud i install go envirnment first ? 
Related to #361. Proposal is to not [panic](https://github.com/elazarl/goproxy/blob/master/https.go#L77) on HTTP/2 CONNECT but simply close the TCP connection. More a sane behaviour as it will not result in denial of service. 
The library [relies on `http.Hijacker`](https://github.com/elazarl/goproxy/blob/master/https.go#L70) to do CONNECT. According to https://golang.org/pkg/net/http/#Hijacker the interface isn't implemented by HTTP/2 connections (by design) and as such this isn't supported by this library. See this as a feature request to support it.
i have try this below but not worked:


proxy.OnRequest().DoFunc(func(req *http.Request, ctx *goproxy.ProxyCtx) (request *http.Request, response *http.Response) {

        proxy.Tr = &http.Transport{Proxy: func(request *http.Request) (url *url.URL, e error) {
            ip := GetNewProxy()
            fmt.Println("======New ip:", ip)
            return url.Parse(ip)
        }}

        return req, nil
    })
I want to do like this but can't make it work. Hope anyone can give me a hint:
client -> goproxy -> socks5 -> real web server