This is the generated code 
![image](https://user-images.githubusercontent.com/48548375/71774404-f9317280-2fa8-11ea-9166-2efadc10a4d1.png)

I don't know how to use them, why the `execute` function not call the `recv_execute` function.
Can someone help me? Thanks very much!
Hi guys, We use fbthrift in k8s,but pod is not stable in k8s, thy ip is not stable, but dns is stable. So how can i use dns name instead of ip to constuct asyncsocket?

Just tried the build on Catalina and I get this error

`In file included from /Users/pbanavara/dev/proxygen/proxygen/_build/deps/folly/folly/memory/Malloc.h:43:
/Users/pbanavara/dev/proxygen/proxygen/_build/deps/folly/folly/memory/detail/MallocImpl.h:51:6: error: redefinition of 'mallctlbymib' as different kind of symbol
    *mallctlbymib)(const size_t*, size_t, void*, size_t*, void*, size_t);
     ^
/usr/local/include/jemalloc/jemalloc.h:252:38: note: previous definition is here
JEMALLOC_EXPORT int JEMALLOC_NOTHROW    je_mallctlbymib(const size_t *mib,
                                        ^
/usr/local/include/jemalloc/jemalloc.h:64:27: note: expanded from macro 'je_mallctlbymib'
#  define je_mallctlbymib mallctlbymib
                          ^
In file included from /Users/pbanavara/dev/proxygen/proxygen/_build/deps/folly/folly/Conv.cpp:17:
In file included from /Users/pbanavara/dev/proxygen/proxygen/_build/deps/folly/folly/Conv.h:116:
In file included from /Users/pbanavara/dev/proxygen/proxygen/_build/deps/folly/folly/Demangle.h:19:
In file included from /Users/pbanavara/dev/proxygen/proxygen/_build/deps/folly/folly/FBString.h:48:
`
So looks like a redefinition of mallctlbymib  and the original mallctlbymib is  in /usr/local/include/jemalloc/jemalloc.h . Not sure. Are there any version dependencies that I am missing ? 

I'm basically trying to try the fbthrift's example code in my own repo. But the linking failed.

Here is the error message.

```
====================[ Build | example_server | Debug-Docker ]===================
/usr/bin/cmake --build /tmp/tmp.eDsqTsGXsB/cmake-build-debug-local-container --target example_server -- -j 1
Scanning dependencies of target chatroom-cpp2-target
[  7%] Generating chatroom files. Output: /tmp/tmp.eDsqTsGXsB/service1/if
[  7%] Built target chatroom-cpp2-target
Scanning dependencies of target chatroom-cpp2-obj
[ 14%] Building CXX object service1/if/CMakeFiles/chatroom-cpp2-obj.dir/gen-cpp2/chatroom_constants.cpp.o
[ 21%] Building CXX object service1/if/CMakeFiles/chatroom-cpp2-obj.dir/gen-cpp2/chatroom_data.cpp.o
[ 28%] Building CXX object service1/if/CMakeFiles/chatroom-cpp2-obj.dir/gen-cpp2/chatroom_types.cpp.o
[ 35%] Building CXX object service1/if/CMakeFiles/chatroom-cpp2-obj.dir/gen-cpp2/ChatRoomService.cpp.o
[ 42%] Building CXX object service1/if/CMakeFiles/chatroom-cpp2-obj.dir/gen-cpp2/ChatRoomServiceAsyncClient.cpp.o
[ 50%] Building CXX object service1/if/CMakeFiles/chatroom-cpp2-obj.dir/gen-cpp2/Echo.cpp.o
[ 57%] Building CXX object service1/if/CMakeFiles/chatroom-cpp2-obj.dir/gen-cpp2/EchoAsyncClient.cpp.o
[ 64%] Built target chatroom-cpp2-obj
Scanning dependencies of target chatroom-cpp2
[ 71%] Linking CXX static library libchatroom-cpp2.a
[ 71%] Built target chatroom-cpp2
Scanning dependencies of target example_server
[ 78%] Building CXX object service1/cpp2/CMakeFiles/example_server.dir/server/ExampleServer.cpp.o
[ 85%] Building CXX object service1/cpp2/CMakeFiles/example_server.dir/server/ChatRoomServiceHandler.cpp.o
[ 92%] Building CXX object service1/cpp2/CMakeFiles/example_server.dir/server/EchoServiceHandler.cpp.o
[100%] Linking CXX executable example_server
/usr/local/include/thrift/lib/cpp2/transport/http2/common/HTTP2RoutingHandler.h:40: error: undefined reference to 'vtable for apache::thrift::HTTP2RoutingHandler'
/usr/bin/ld.gold: the vtable symbol may be undefined because the class is missing its key function
collect2: error: ld returned 1 exit status
service1/cpp2/CMakeFiles/example_server.dir/build.make:190: recipe for target 'service1/cpp2/example_server' failed
make[3]: *** [service1/cpp2/example_server] Error 1
CMakeFiles/Makefile2:294: recipe for target 'service1/cpp2/CMakeFiles/example_server.dir/all' failed
make[2]: *** [service1/cpp2/CMakeFiles/example_server.dir/all] Error 2
CMakeFiles/Makefile2:306: recipe for target 'service1/cpp2/CMakeFiles/example_server.dir/rule' failed
make[1]: *** [service1/cpp2/CMakeFiles/example_server.dir/rule] Error 2
Makefile:216: recipe for target 'example_server' failed
make: *** [example_server] Error 2
```
`thrift1 --gen mstch_cpp2 -I . -o . abc.thrift`

The generated abc_types.cpp is like this

`#include "/gen-cpp2/abs_type.h"`

If I do
   `thrift1 --gen mstch_cpp2 -I . -out /tmp abc.thrift`
The generated code /tmp/abc_types.cpp still includes header files like the above.

Should `#include "/gen-cpp2/abs_type.h"` be `#include "gen-cpp2/abs_type.h"` ?

Did I miss anything?

The default configuration of **thrift_import** is **"github.com/facebook/fbthrift-go"**. But i found it not work well. So I I configured it manually with **"github.com/facebook/fbthrift/thrift/lib/go/thrift"**. 
Hi experts:

When I try to compile thrift file into python3 source code, using the follow command: 

`bin/thrift1  --strict --allow-neg-enum-vals --gen mstch_py3:include_prefix="interface"  -o . test.thrift`

It seems `Must set template directory when using mstch generator`. 

But I can't find it. thanks a lot :) 
Solves: https://github.com/facebook/fbthrift/issues/352

Java-style private fields added with accessors/mutators
The PHP autogenerated code currently keeps the struct derived class attributes public, and they have to be accessed like: $class->field.

The java version keeps them private instead and uses getters and setters to access and mutate the data.

A similar approach would be a better choice for most oop based php coding standards. 