
I use a library [ng2-bs3-modal](https://github.com/dougludlow/ng2-bs3-modal) and after upgrading my project to version 6.x.x the subscribe have no effect:

```
<bs-modal #modal>
  ...
</bs-modal>

@ViewChild('modal')
modal1: BsModalComponent;

this.modal1.onClose.subscribe(
  () => {
    console.log('close');
  }
)
```

Repo to reproduce:
https://github.com/Frennetix/rxjs6-ng2-bs3-modal
In https://github.com/Reactive-Extensions/RxJS/wiki/Reactive-Extensions-for-JavaScript-(RxJS)-Style-Guide#coding-standard

![image](https://user-images.githubusercontent.com/493476/38895995-60f20008-4246-11e8-9672-a29aeab23156.png)

" Google JavaScript Style Guide" points to http://google-styleguide.googlecode.com/svn/trunk/javascriptguide.xml it should instead point to https://google.github.io/styleguide/jsguide.html
I'm planning on using Webpack 4 in the future and am currently on Webpack 3. I'd like to get the full benefit of tree-shaking and want to make sure I'm importing rxjs correctly in my projects.

First, Webpack 4 has a thing that restricts you to either cjs, esm, or any import format. Webpack 3 does not have this, but does utilize tree-shaking where it exists.

When I do:
```js
import { bindCallback } from 'rxjs/observable/bindCallback'
```
Am I using the cjs method and tree-shaking or will this automatically use esm if available?

From using other libraries like date-fns, I believe I have to do this instead:
```js
import { bindCallback } from 'rxjs/_esm2015/observable/bindCallback'
```

Is my assumption correct, or do I keep calling imports like I've always been doing (the first example)?

that caused documentation to display incorrectly
The misleading 'BehaviourSubject' name in line 79 was replaced with correct 'BehaviorSubject'.
Originally posted here: https://github.com/ReactiveX/rxjs/issues/3415, but was told it belongs in this repo.
<!--
Thank you for raising your concerns, we appreciate your feedback and contributions to this repository.

Before you continue, consider the following:

If you have a "How do I do ...?" question, it is better for you and for us that this question is placed in [StackOverflow](http://stackoverflow.com/questions/tagged/rxjs5) or some chat channel. This way, you are making it easier for others to learn from your experiences too.

These "Issues" are meant only for technical problems, bugs, and proposals related to the library.

If your issue is a bug, please follow the format below:
-->

**RxJS version:**
`rx-lite@4.0.8`

**Code to reproduce:**

```js
const Rx = require('rx-lite');

Rx.Observable.of(1)
	.repeat(2.5)
	.subscribe(i => console.log('onnext: ' + i));
```

**Expected behavior:**

Either throw an error, or repeat 2, or 3 times.

**Actual behavior:**

Repeats infinitely, logs:

```
onnext: 1
onnext: 1
onnext: 1
onnext: 1
...etc, infinitely
```

**Additional information:**

I understand that it doesn't make so much sense to pass a non natural number to `repeat`. In our case, the repeat count was calculated dynamically, which made it unclear that this was an issue.

I realize this isn't a problem in later (or "non-lite") versions, just leaving this info here for future googlers.
I was helping someone with rxjs v5 and they pointed me to an issue ticket on this repo because they thought the disclaimer was about where to download the latest version, not that this is the old repo.
    bower install rxjs

this command installs rxjs 4

is there a bower command to install latest rxjs 5?

https://stackoverflow.com/questions/34852776/how-to-add-rxjs-5-as-a-bower-dependency

i guess i'm the first one to ask for it. i need to figure out how to get away from bower. sad face.
I bumped into the problem with lettable operators, in particular, with timer.

For instance, this:
```import 'rxjs/add/operator/catch'```
-- still works and even changes Observable object globally so there's no need to import that '```catch```' again in a certain ts file once it is imported in project module file.

And this:
```import 'rxjs/add/observable/timer'```
-- doesn't work anymore, instead:
```import { timer } 'rxjs/observable/timer'```
-- should be used and it doesn't modify Observable object, it is used as an independent function, and it cannot be imported globally, it should be imported in each ts file individually if it is needed.

Why is
```import 'rxjs/add/operator/catch'```
still in use and has its counterpart of
```import {catchError} from 'rxjs/operators/catchError'```
and
```import 'rxjs/add/observable/timer'```
is no longer in use?

Is there any documentation on the topic? On the import syntax migration?

Thank you.