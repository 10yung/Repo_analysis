Added a stop script that does corresponding work to the start script.
Modified the test_start_ssl script that the docker container has to be specified.
# Error description:
only http works I am unable to setup a new certificate

# Steps to reproduce
1. clone this repo and cd into it 
2. edit the .env as you wish
3. type ./start.sh
4. start your website container

# Expected result
working https website on my domain name

# Error result
Attaching to nginx-letsencrypt, nginx-gen, nginx-web
nginx-letsencrypt    | Info: Custom Diffie-Hellman group found, generation skipped.
nginx-letsencrypt    | 2019/12/27 02:55:16 Generated '/app/letsencrypt_service_data' from 3 containers
nginx-letsencrypt    | 2019/12/27 02:55:16 Running '/app/signal_le_service'
nginx-letsencrypt    | 2019/12/27 02:55:16 Watching docker events
nginx-letsencrypt    | 2019/12/27 02:55:16 Contents of /app/letsencrypt_service_data did not change. Skipping notification '/app/signal_le_service'
nginx-letsencrypt    | Sleep for 3600s
nginx-letsencrypt    | Sleep for 3600s
nginx-letsencrypt    | Sleep for 3600s
nginx-letsencrypt    | 2019/12/27 05:47:51 Received event start for container 8d84338a0668
nginx-letsencrypt    | 2019/12/27 05:47:53 Received event start for container b8cc3b71dab6
nginx-letsencrypt    | 2019/12/27 05:48:08 Debounce minTimer fired
nginx-letsencrypt    | 2019/12/27 05:48:08 Generated '/app/letsencrypt_service_data' from 5 containers
nginx-letsencrypt    | 2019/12/27 05:48:08 Running '/app/signal_le_service'
nginx-letsencrypt    | /etc/nginx/certs/info-data.cf /app
nginx-letsencrypt    | Reloading nginx docker-gen (using separate container nginx-gen)...
nginx-letsencrypt    | Reloading nginx (using separate container cee2ecd144dee766a406f07f567bb78453a6edf5d33aabb2ad99e4e379a6891d)...
nginx-letsencrypt    | Creating/renewal info-data.cf certificates... (mydomain.com www.mydomain.com)
nginx-letsencrypt    | 2019-12-27 05:48:10,917:INFO:simp_le:1382: Generating new account key
nginx-letsencrypt    | ACME server returned an error: urn:acme:error:unauthorized :: The client lacks sufficient authorization :: Account creation on ACMEv1 is disabled. Please upgrade your ACME client to a version that supports ACMEv2 / RFC 8555. See https://community.letsencrypt.org/t/end-of-life-plan-for-acmev1/88430 for details.

# Comments

I am looking for an alternative anybody have a idea ? 
Thanks



Is it possible to have one site behind the nginx and Lets encrypt proxy that does not use SSL? We have several sites behind an nginx and Lets encrypt reverse proxy using this docker container but for one of our sites we would like to be able to use normal unencrypted HTTP on port 80. Is that possible?
On NIX OS there is no /bin/bash.
It located in 
```
â–¶ where bash
/run/current-system/sw/bin/bash
```

But /usr/bin/env should be on most of Linux distros
See available options here: https://github.com/jwilder/nginx-proxy#how-ssl-support-works
# Error description:
I got error when issue new cert

# Steps to reproduce
Just do as usual

# Expected result
Get my cert

# Error result
2019-07-24 08:36:16,908:INFO:simp_le:1479: Generating new certificate private key
ACME server returned an error: urn:acme:error:malformed :: The request message was malformed :: Error creating new cert :: CSR contains more than 100 DNS names


Debugging tips: -v improves output verbosity. Help is available under --help.
/app

# Comments
Any help?

Thanks



I used to have following timeout.conf

```
http {
     fastcgi_read_timeout 300s;
     proxy_read_timeout 300s;
}
```

For many months my docker-compose-letsencrypt-nginx-proxy-companion setup worked worked flawlessly. Yesterday I noticed that all calls to the server where timing out. Checking the nginx container logs I saw a bunch of 

> [emerg] 1#1: "http" directive is not allowed here in /etc/nginx

Kindly asking for suggestions on what went wrong and on how to apply my 300s timeout again
Hi, 9 out of 10 times I start with this script `nginx-gen` does not start and each time I have to start it manually which is a pain.
making it pause for 1 second and doing `docker-compose start` makes sure it started 100% of the time. And it does skip the ones already started.
Also adding `docker-compose ps` at the end is a nice way to confirm it is up and running as it should.

Please accept this.

Cheers,

Khalil
I have trouble setting up real.conf. It just doesn't seem to work.
I did read some related issues, specially #53 where it seems its working for some guys. 

I did try a couple of versions:

```
set_real_ip_from  172.18.0.0/32;

header X-Forwarded-For;
```

```
set_real_ip_from  172.18.0.0/32;

real_ip_header X-Real-IP;
```

```
real_ip_header X-Real-IP;
real_ip_recursive on;
```

Pretty sure I did all the combos you can do with it. But still the real ip won't get through.
Also to my to my knowledge it should work with both X-Forwarded-For and X-Real-IP in same block.

One thing I don't get at all, shouldn't there be changes in my default.conf when I change something in the real.conf? (of course after a restart of nginx-web container) I can't see any.

Maybe my understanding is to basic, but shouldn't there be changes in the location section.
Here is my default.conf when starting the container with the start.sh script:

```
# xxx.xxx.com
upstream xxx.xxx.com {
                                ## Can be connected with "webproxy" network
                        # xxx
                        server 172.18.0.7:80;
}
server {
        server_name xxx.xxx.com;
        listen 80 ;
        access_log /var/log/nginx/access.log vhost;
        return 301 https://$host$request_uri;
}
server {
        server_name xxx.xxx.com;
        listen 443 ssl http2 ;
        access_log /var/log/nginx/access.log vhost;
        ssl_protocols TLSv1 TLSv1.1 TLSv1.2 TLSv1.3;
        ssl_ciphers 'ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES128-SHA$
        ssl_prefer_server_ciphers on;
        ssl_session_timeout 5m;
        ssl_session_cache shared:SSL:50m;
        ssl_session_tickets off;
        ssl_certificate /etc/nginx/certs/xxx.xxx.com.crt;
        ssl_certificate_key /etc/nginx/certs/xxx.xxx.com.key;
        ssl_dhparam /etc/nginx/certs/xxx.xxx.com.dhparam.pem;
        ssl_stapling on;
        ssl_stapling_verify on;
        ssl_trusted_certificate /etc/nginx/certs/xxx.xxx.com.chain.pem;
        add_header Strict-Transport-Security "max-age=31536000" always;
        include /etc/nginx/vhost.d/default;
        location / {
                proxy_pass http://xxx.xxx.com;
        }
}
```

So again I would think it would need to be something like:

```
# xxx.xxx.com
upstream xxx.xxx.com {
                                ## Can be connected with "webproxy" network
                        # xxx
                        server 172.18.0.7:80;
}
server {
        server_name xxx.xxx.com;
        listen 80 ;
        access_log /var/log/nginx/access.log vhost;
        return 301 https://$host$request_uri;
}
server {
        server_name xxx.xxx.com;
        listen 443 ssl http2 ;
        access_log /var/log/nginx/access.log vhost;
        ssl_protocols TLSv1 TLSv1.1 TLSv1.2 TLSv1.3;
        ssl_ciphers 'ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES128-SHA$
        ssl_prefer_server_ciphers on;
        ssl_session_timeout 5m;
        ssl_session_cache shared:SSL:50m;
        ssl_session_tickets off;
        ssl_certificate /etc/nginx/certs/xxx.xxx.com.crt;
        ssl_certificate_key /etc/nginx/certs/xxx.xxx.com.key;
        ssl_dhparam /etc/nginx/certs/xxx.xxx.com.dhparam.pem;
        ssl_stapling on;
        ssl_stapling_verify on;
        ssl_trusted_certificate /etc/nginx/certs/xxx.xxx.com.chain.pem;
        add_header Strict-Transport-Security "max-age=31536000" always;
        include /etc/nginx/vhost.d/default;
        set_real_ip_from 10.0.0.0/8;
        real_ip_header X-Real-IP;
        real_ip_recursive on;
        location / {
                proxy_pass http://xxx.xxx.com;
                proxy_set_header  Host $host;
                proxy_set_header  X-Real-IP $remote_addr;
                proxy_set_header  X-Forwarded-For $remote_addr;
        }
}
```

thanks guys
# Error description:
I want to run the [shlinkio/shlink:latest](https://hub.docker.com/r/shlinkio/shlink) container on my server with your nginx reverse proxy setup. 

Problem: The Letsencrypt Validation Service gets a 503 error from nginx-web container when it tries to access the ACME Challenge

# Steps to reproduce

1. I use the following docker-compose.yaml

```
version: '3'

volumes:
  db:

networks:
  shlink:
  webproxy:
    external:
      name: webproxy

services:
  db:
    container_name: shlink-url-db
    image: mariadb
    restart: always
    volumes:
      - db:/var/lib/mysql
    environment:
      # from env files
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
      MYSQL_DATABASE: ${MYSQL_DATABASE}
      MYSQL_USER: ${MYSQL_USER}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD}
    networks:
      - shlink

  shlink-url-shortener:
    image: shlinkio/shlink:latest
    container_name: shlink-url-shortener
    environment:
      # Shlink Config
      SHORT_DOMAIN_HOST: ${SERVICE_DOMAIN}
      SHORT_DOMAIN_SCHEMA: https
      # The name of a query param that can be used to visit short URLs avoiding the visit to be tracked.
      DISABLE_TRACK_PARAM: notrack
      # Reverse Proxy Settings
      VIRTUAL_HOST: ${SERVICE_DOMAIN}
      VIRTUAL_PORT: 8080
      LETSENCRYPT_HOST: ${SERVICE_DOMAIN}
      LETSENCRYPT_EMAIL: bjesuiter@gmail.com
      # DB Settings
      DB_DRIVER: mysql
      DB_NAME: ${MYSQL_DATABASE}
      DB_USER: ${MYSQL_USER}
      DB_PASSWORD: ${MYSQL_PASSWORD}
      DB_HOST: db
    expose:
      - "8080"
    depends_on:
      - db
    networks:
      - webproxy
      - shlink
```

2. The .env File for this docker-compose is 

```
# Global Vars
SERVICE_DOMAIN=links.avil.io

# Mariadb Setup Vars
MYSQL_ROOT_PASSWORD=someMariaDBrootPW

# Shared Setup Vars between MariaDB & Shlink
MYSQL_DATABASE=shlink
MYSQL_USER=shlink
MYSQL_PASSWORD=someMySQLPW
```

4. Change the SERVICE_DOMAIN var when running these test files 
4. Change the LETSENCRYPT_EMAIL to a personal one instead of mine.
3. Run `docker-compose up -d` to start the thingy 

# Expected result
The ACME Challenge can be executed successfully.

# Error result
The Letsencrypt Validation Service gets a 503 error from nginx-web container when it tries to access the ACME Challenge

# Comments (Things I checked and tried)

1. I added all necessary config to the shlink container, being: 

    - env var VIRTUAL_HOST: ${SERVICE_DOMAIN}
    - env var VIRTUAL_PORT: 8080
    - env var LETSENCRYPT_HOST: ${SERVICE_DOMAIN}
    - env var LETSENCRYPT_EMAIL: bjesuiter@gmail.com
    - use network webproxy 
    - expose port "8080" (besides being already exposed through the dockerfile of shlink)

2. I especially used the VIRTUAL_PORT env var
3. I deleted all previously generated folders for `links.avil.io` in nginx-data/certs folder to have a fresh starting point. 

# Suggestion

As a follow up suggestion to this issue: 
Do you want to create some kind of FAQ File, which answers the most asked questions? 
It's the second time now that i encounter this problem. 
I fixed it the first time by re-cloning the repository and deleting the data folder. 
But i don't want to re- setup the whole reverse-proxy-system each time i encounter this error. 

My feeling tells me, that the system seems confused if it can't connect to the service container on the very first certificate request. But i can't proof this. 

Anyway, the FAQ should have a section for 

> ## I get a HTTP error 503 when ACME Challenge is validated? 
> This could mean:
> ### 1. A connection error between the reverse proxy and your service container. 
> -  Is your VIRTUAL_PORT property set when service container runs on a port other than 80?
> ### 2. ... 
