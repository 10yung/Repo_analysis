I now also have a branch with an initial proposal for decorators, where these are just AST transformers. Example:

```ts
@metadata
extern main(): string {
  return __file;
}
```

[The decorator](https://github.com/dcodeIO/thinscript/blob/decorators/src/decorators/metadata.thin) then transforms the source to the following in JavaScript:

```js
(function(__imports, __exports) {
  function main() {
    var __name = "main", __file = "sandbox/decorators.thin", __line = 1, __column = 0;
    return __file;
  }
}(
  typeof global !== 'undefined' ? global : this,
  typeof exports !== 'undefined' ? exports : this
));
```

Or in C:

```c
static const uint32_t __string_0_main[] = {4, S('m', 'a'), S('i', 'n')};
static const uint32_t __string_1_sandbox_decorators_thin[] = {23, S('s', 'a'), S('n', 'd'), S('b', 'o'), S('x', '/'), S('d', 'e'), S('c', 'o'), S('r', 'a'), S('t', 'o'), S('r', 's'), S('.', 't'), S('h',
  'i'), S('n', 0)};

static uint16_t *main() {
  const uint16_t *__name = (const uint16_t *)__string_0_main;
  const uint16_t *__file = (const uint16_t *)__string_1_sandbox_decorators_thin;
  int32_t __line = 1;
  int32_t __column = 0;

  return __file;
}
```

The feature, as proposed, is compatible with all possible backends because it operates on the AST directly. However, to become actually useful, ways to extend the compiler (i.e. through imports of custom modules) must be implemented first.

The reason why I added this so early already is that I was trying to improve the output of `assert` calls for debugging purposes, but I ultimately realized that some sort of an actually usable stack trace (ideally with source maps) would be a lot better suited for this task. Unfortunately, browsers I have tested do not yet pull useful information from name sections.
I have a commit [here](https://github.com/dcodeIO/thinscript/commit/b737191dae6997b60e20c7068c0c2b1364f4d027) that implements the 0x1 format but as there's no license, yet, I am holding back the PR for now to not complicate things even further. Aside from that, thinscript is the most refreshing piece of code I've seen in a while and I'd love to continue working on it!

![](https://pbs.twimg.com/media/C_wCpc3W0AI31s2.jpg:large)

- Updated output files to use the 'WebAssembly' API

- Added optional tracing to wasm target for debugging purposes

- Fixed a couple of wasm target issues (and probably introduced new ones)

- Extended wasm custom name section support

- Implemented additional convenience utility

- Implemented a few simple wasm specific compiler optimizations

- Tweaked source files for TypeScript syntax compatibility where applicable

- Changed the js target's generated iife signature from (__declare, __extern) to (__imports, __exports)

P.S.: Did I mention how awesome this project is?
**What?**
Add new native types (WASM) int64, float32 and float64

**Why?**
Currently only int32 and below are supported, I tried to add missing native types but not able to compile. Please add these type or write a how to note.
Hi,

I started to wear thin compiler in Java
in order to use in a production line Maven

I added the target java
and java.thin file

this produces a file org/wasm/thin/Thin.java
I currently generates classes, enums, functions, methods.

The generated code is not yet operational. missing translation of thin type to java type.
It also lacks the managements of the externs.

How can I send you my changes.
I'm not familiar with GitHub.

A+JYT

First of all, thanks for a great software!

Could you add the license field to package.json?
[license field in package.json | npm Documentation](https://docs.npmjs.com/files/package.json#license)

The following page may help for choosing a license.
[Choose an open source license - Choose a License](http://choosealicense.com/)

I hope you choose a permissive license like BSD, MIT, or Apache.
Thanks!

I think that `+=` and `-=` should be included in ThinScript

Are there any plans to support interaction with JavaScript, DOM and Web APIs with ThinScript? I'd be really interested in seeing the performance benefit that low-level WebAssembly can bring when creating large web apps. I'd also be interested in exposing API end-points for other JavaScript libraries to consume/interact with the compiled application.

I haven't got a huge experience in this field and I'm not even sure it might all be possible/feasible, but I thought it might be a good discussion point.

I know that the readme says you'll write it at some point, but the sooner the better :smile:. I'm just asking if you planned on it anytime soon (looks like a really cool project :+1:), plus docs are needed for creating a [syntax package](http://github.com/facekapow/language-thinscript) (I need one for Atom).
