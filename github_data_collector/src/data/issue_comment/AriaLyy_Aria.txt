```
 private void parseM3u8(String m3u8Url , String newM3u8FileName , String outputPath , LinkedBlockingQueue<Map<String, String>> sizeDetectQueue , LinkedBlockingQueue<Map<String, String>> downloadQueue) throws IOException {
            String m3U8Content = HttpRequestUtil.getResponseString(HttpRequestUtil.sendGetRequest(m3u8Url));
            String newM3u8FileContent = "";
            int i = 0;
            boolean subFile = false;
            for (String lineStr : m3U8Content.split("\n")) {
                if (lineStr.startsWith("#")) {
                    if (lineStr.startsWith("#EXT-X-KEY:")) {
                        Matcher searchKeyUri = Pattern.compile("URI=\"(.*?)\"").matcher(lineStr);
                        if (!searchKeyUri.find()) {
                            throw new IOException("EXT-X-KEY解析失败");
                        }
                        String keyUri = searchKeyUri.group(1);
                        String keyUrl;
                        if (keyUri.startsWith("http://") || keyUri.startsWith("https://")) {
                            keyUrl = keyUri;
                        } else {
                            keyUrl = new URL(new URL(m3u8Url) , keyUri.trim()).toString();
                        }
                        String uuidStr = UUIDUtil.genUUID();
                        String keyPath = outputPath + File.separator + uuidStr + ".key";
                        HashMap<String, String> hashMap = new HashMap<String, String>();
                        hashMap.put("url" , keyUrl);
                        hashMap.put("downloadPath" , keyPath);
                        downloadQueue.add(hashMap);
                        String newLineStr = Pattern.compile("URI=\"(.*?)\"").matcher(lineStr).replaceAll("URI=\"/" + uuidStr + ".key\"");
                        lineStr = newLineStr;
                    }
                    if (lineStr.startsWith("#EXT-X-STREAM-INF")) {
                        subFile = true;
                    }
                    newM3u8FileContent = newM3u8FileContent + lineStr + "\n";
                } else {
                    String uuidStr = UUIDUtil.genUUID();
                    int forName = i++;
                    String videoUri = lineStr.trim();
                    String fileUrl;
                    if (videoUri.startsWith("http://") || videoUri.startsWith("https://")) {
                        fileUrl = videoUri;
                    } else {
                        fileUrl = new URL(new URL(m3u8Url) , videoUri).toString();
                    }
                    if (subFile) {
                        subFile = false;
                        parseM3u8(fileUrl , uuidStr + ".m3u8" , outputPath , sizeDetectQueue , downloadQueue);
                        newM3u8FileContent = newM3u8FileContent + "/" + uuidStr + ".m3u8\n";
                    } else {
                        String videoFilePath = outputPath + File.separator + forName + ".ts";
                        
                        HashMap<String, String> hashMap = new HashMap<String, String>();
                        hashMap.put("url" , fileUrl);
                        hashMap.put("downloadPath" , videoFilePath);
                        sizeDetectQueue.add(hashMap);
                        downloadQueue.add(hashMap);
                        newM3u8FileContent = newM3u8FileContent + "/" + forName + ".ts\n";
                     //   tsArr.add(new File(videoFilePath));
                        KLog.e("------------------videoFilePath------------->" + videoFilePath);
                    }
                }
            }
            
            FileUtil.stringToFile(newM3u8FileContent , outputPath + File.separator + newM3u8FileName);
        }
```

**HttpRequestUtil.java**

`public class HttpRequestUtil {
    
    private static final String TAG = "HttpRequestUtil";
    
    public static final String defaultCharset = "UTF-8";//"GBK"
    public static final int readTimeout = 10000;//10s
    public static final int connectTimeout = 5000;//5s
    public static final int maxRedirects = 4;//最大重定向次数
    
    public static Map<String, String> commonHeaders;
    
    public final static HostnameVerifier DO_NOT_VERIFY = new HostnameVerifier() {
        @Override
        public boolean verify(String hostname , SSLSession session) {
            return true;
        }
    };
    
    static {
        commonHeaders = new HashMap<String, String>();
        commonHeaders.put("User-Agent" , "Mozilla/5.0 (iPhone; CPU iPhone OS 9_1 like Mac OS X) AppleWebKit/601.1.46 (KHTML, like Gecko) Version/9.0 Mobile/13B143 Safari/601.1");
    }
    
    private static void trustAllHosts() {
        final String TAG = "trustAllHosts";
        // Create a trust manager that does not validate certificate chains
        TrustManager[] trustAllCerts = new TrustManager[]{new X509TrustManager() {
            
            @Override
            public X509Certificate[] getAcceptedIssuers() {
                return new X509Certificate[]{};
            }
            
            @Override
            public void checkClientTrusted(X509Certificate[] chain , String authType) throws CertificateException {
                Log.i(TAG , "checkClientTrusted");
            }
            
            @Override
            public void checkServerTrusted(X509Certificate[] chain , String authType) throws CertificateException {
                Log.i(TAG , "checkServerTrusted");
            }
        }};
        
        // Install the all-trusting trust manager
        try {
            SSLContext sc = SSLContext.getInstance("TLS");
            sc.init(null , trustAllCerts , new java.security.SecureRandom());
            HttpsURLConnection.setDefaultSSLSocketFactory(sc.getSocketFactory());
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
    
    public static void main(String[] args) throws Exception {
        HeadRequestResponse headRequestResponse = performHeadRequest("https://disp.titan.mgtv.com/vod.do?fmt=4&pno=1121&fid=3BBD5FD649B8DEB99DBDE005F7304103&file=/c1/2017/08/30_0/3BBD5FD649B8DEB99DBDE005F7304103_20170830_1_1_644.mp4");
        System.out.println(headRequestResponse.getRealUrl());
        System.out.println(toJSONString(headRequestResponse.getHeaderMap()));
    }
    
    public static URLConnection sendGetRequest(String url , Map<String, String> params , Map<String, String> headers) throws IOException {
        StringBuilder buf = new StringBuilder();
        URL urlObject = new URL(url);
        buf.append(urlObject.getProtocol()).append("://").append(urlObject.getHost()).append(((urlObject.getPort() == -1) || (urlObject.getPort() != urlObject.getDefaultPort())) ? "" : ":" + urlObject.getPort()).append(urlObject.getPath());
        String query = urlObject.getQuery();
        if (params == null) {
            params = new HashMap<String, String>();
        }
        boolean isQueryExist = false;
        if (!(query == null || query.length() == 0) || params.size() > 0) {
            buf.append("?");
            isQueryExist = true;
        }
        if (!(query == null || query.length() == 0)) {
            buf.append(query);
            buf.append("&");
        }
        Set<Entry<String, String>> entrys = params.entrySet();
        for (Entry<String, String> entry : entrys) {
            buf.append(entry.getKey()).append("=")
                    .append(URLEncoder.encode(entry.getValue() , defaultCharset)).append("&");
        }
        if (isQueryExist) {
            buf.deleteCharAt(buf.length() - 1);
        }
        System.out.println("before:" + url);
        System.out.println("after:" + buf.toString());
        urlObject = new URL(buf.toString());
        HttpURLConnection conn = null;
        try {
            if (urlObject.getProtocol().toUpperCase().equals("HTTPS")) {
                trustAllHosts();
                HttpsURLConnection https = (HttpsURLConnection) urlObject.openConnection();
                https.setHostnameVerifier(DO_NOT_VERIFY);
                conn = https;
            } else {
                conn = (HttpURLConnection) urlObject.openConnection();
            }
            conn.setRequestMethod("GET");
            conn.setConnectTimeout(connectTimeout);
            conn.setReadTimeout(readTimeout);
            if (headers != null) {
                entrys = headers.entrySet();
                for (Entry<String, String> entry : entrys) {
                    conn.setRequestProperty(entry.getKey() , entry.getValue());
                }
            }
            conn.getResponseCode();
            return conn;
        } catch (IOException e) {
            if (conn != null) {
                conn.disconnect();
            }
            throw e;
        }
    }
    
    public static URLConnection sendGetRequest(String url) throws IOException {
        return sendGetRequest(url , null , commonHeaders);
    }
    
    public static URLConnection sendGetRequest(String url ,
                                               Map<String, String> params) throws IOException {
        return sendGetRequest(url , params , commonHeaders);
    }
    
    public static URLConnection sendPostRequest(String url , Map<String, String> params , Map<String, String> headers) throws IOException {
        StringBuilder buf = new StringBuilder();
        if (params == null) {
            params = new HashMap<String, String>();
        }
        Set<Entry<String, String>> entrys = params.entrySet();
        for (Entry<String, String> entry : entrys) {
            buf.append("&").append(entry.getKey()).append("=")
                    .append(URLEncoder.encode(entry.getValue() , defaultCharset));
        }
        buf.deleteCharAt(0);
        URL urlObject = new URL(url);
        HttpURLConnection conn = null;
        try {
            if (urlObject.getProtocol().toUpperCase().equals("HTTPS")) {
                trustAllHosts();
                HttpsURLConnection https = (HttpsURLConnection) urlObject.openConnection();
                https.setHostnameVerifier(DO_NOT_VERIFY);
                conn = https;
            } else {
                conn = (HttpURLConnection) urlObject.openConnection();
            }
            conn.setRequestMethod("POST");
            conn.setConnectTimeout(connectTimeout);
            conn.setReadTimeout(readTimeout);
            if (headers != null) {
                entrys = headers.entrySet();
                for (Entry<String, String> entry : entrys) {
                    conn.setRequestProperty(entry.getKey() , entry.getValue());
                }
            }
            conn.setDoOutput(true);
            OutputStream out = conn.getOutputStream();
            //System.out.println("buf.toString():"+buf.toString());
            out.write(buf.toString().getBytes(defaultCharset));
            out.flush();
            conn.getResponseCode(); // 为了发送成功
            return conn;
        } catch (IOException e) {
            if (conn != null) {
                conn.disconnect();
            }
            throw e;
        }
    }
    
    public static URLConnection sendPostRequest(String url ,
                                                Map<String, String> params) throws IOException {
        try {
            return sendPostRequest(url , params , commonHeaders);
        } catch (Exception e) {
            e.printStackTrace();
        }
        return null;
    }
    
    public static URLConnection sendStringPostRequest(String url , String postDataString , Map<String, String> headers) throws IOException {
        if (postDataString == null) {
            postDataString = "";
        }
        Set<Entry<String, String>> entrys;
        URL urlObject = new URL(url);
        HttpURLConnection conn = null;
        try {
            if (urlObject.getProtocol().toUpperCase().equals("HTTPS")) {
                trustAllHosts();
                HttpsURLConnection https = (HttpsURLConnection) urlObject.openConnection();
                https.setHostnameVerifier(DO_NOT_VERIFY);
                conn = https;
            } else {
                conn = (HttpURLConnection) urlObject.openConnection();
            }
            conn.setRequestMethod("POST");
            conn.setConnectTimeout(connectTimeout);
            conn.setReadTimeout(readTimeout);
            if (headers != null) {
                entrys = headers.entrySet();
                for (Entry<String, String> entry : entrys) {
                    conn.setRequestProperty(entry.getKey() , entry.getValue());
                }
            }
            conn.setDoOutput(true);
            OutputStream out = conn.getOutputStream();
            //System.out.println("buf.toString():"+buf.toString());
            out.write(postDataString.getBytes(defaultCharset));
            out.flush();
            conn.getResponseCode(); // 为了发送成功
            return conn;
        } catch (IOException e) {
            if (conn != null) {
                conn.disconnect();
            }
            throw e;
        }
    }
    
    public static URLConnection sendStringPostRequest(String url , String postDataString) throws IOException {
        try {
            return sendStringPostRequest(url , postDataString , commonHeaders);
        } catch (Exception e) {
            e.printStackTrace();
        }
        return null;
    }
    
    public static String getResponseString(URLConnection urlConnection) throws IOException {
        
        InputStream inputStream = null;
        InputStreamReader inputStreamReader = null;
        BufferedReader reader = null;
        StringBuffer resultBuffer = new StringBuffer();
        String tempLine;
        
        try {
            if (((HttpURLConnection) urlConnection).getResponseCode() >= 300) {
                throw new IOException("HTTP Request is not success, Response code is " + ((HttpURLConnection) urlConnection).getResponseCode());
            }
            inputStream = urlConnection.getInputStream();
            inputStreamReader = new InputStreamReader(inputStream , defaultCharset);
            reader = new BufferedReader(inputStreamReader);
            
            while ((tempLine = reader.readLine()) != null) {
                resultBuffer.append(tempLine + "\n");
            }
            return resultBuffer.toString();
        } finally {
            
            if (reader != null) {
                reader.close();
            }
            
            if (inputStreamReader != null) {
                inputStreamReader.close();
            }
            
            if (inputStream != null) {
                inputStream.close();
            }
            ((HttpURLConnection) urlConnection).disconnect();
        }
    }
    
    
    public static void save2File(URLConnection urlConnection , String saveFilePath) throws IOException {
        
        DataInputStream dis = null;
        FileOutputStream fos = null;
        
        try {
            dis = new DataInputStream(urlConnection.getInputStream());
            //建立一个新的文件
            fos = new FileOutputStream(new File(saveFilePath));
            byte[] buffer = new byte[1024];
            int length;
            //开始填充数据
            while ((length = dis.read(buffer)) > 0) {
                fos.write(buffer , 0 , length);
            }
        } finally {
            if (dis != null) {
                dis.close();
            }
            if (fos != null) {
                fos.close();
            }
            ((HttpsURLConnection) urlConnection).disconnect();
        }
    }
    
    public static HeadRequestResponse performHeadRequest(String url) throws IOException {
        return performHeadRequest(url , commonHeaders);
    }
    
    public static HeadRequestResponse performHeadRequest(String url , Map<String, String> headers) throws IOException {
        return performHeadRequestForRedirects(url , headers , 0);
    }
    
    private static HeadRequestResponse performHeadRequestForRedirects(String url , Map<String, String> headers , int redirectCount) throws IOException {
        URL urlObject = new URL(url);
        HttpURLConnection conn = null;
        try {
            if (urlObject.getProtocol().toUpperCase().equals("HTTPS")) {
                trustAllHosts();
                HttpsURLConnection https = (HttpsURLConnection) urlObject.openConnection();
                https.setHostnameVerifier(DO_NOT_VERIFY);
                conn = https;
            } else {
                conn = (HttpURLConnection) urlObject.openConnection();
            }
            conn.setInstanceFollowRedirects(false);
            conn.setRequestMethod("GET");
            conn.setConnectTimeout(connectTimeout);
            conn.setReadTimeout(readTimeout);
            if (headers != null) {
                Set<Entry<String, String>> entrySet = headers.entrySet();
                for (Entry<String, String> entry : entrySet) {
                    conn.setRequestProperty(entry.getKey() , entry.getValue());
                }
            }
            Map<String, List<String>> headerFields = conn.getHeaderFields();
            int responseCode = conn.getResponseCode();
            conn.disconnect();
            if (responseCode == 302) {
                if (redirectCount >= maxRedirects) {
                    return new HeadRequestResponse(url , new HashMap<String, List<String>>());
                } else {
                    String location = headerFields.get("Location").get(0);
                    return performHeadRequestForRedirects(location , headers , redirectCount + 1);
                }
            } else {
                return new HeadRequestResponse(url , headerFields);
            }
        } finally {
            if (conn != null) {
                conn.disconnect();
            }
        }
    }
    
    public static class HeadRequestResponse {
        private String realUrl;
        private Map<String, List<String>> headerMap;
        
        public HeadRequestResponse() {
        }
        
        public HeadRequestResponse(String realUrl , Map<String, List<String>> headerMap) {
            this.realUrl = realUrl;
            this.headerMap = headerMap;
        }
        
        public String getRealUrl() {
            return realUrl;
        }
        
        public void setRealUrl(String realUrl) {
            this.realUrl = realUrl;
        }
        
        public Map<String, List<String>> getHeaderMap() {
            return headerMap;
        }
        
        public void setHeaderMap(Map<String, List<String>> headerMap) {
            this.headerMap = headerMap;
        }
    }
    
}`

你看下有没有借鉴的地方,我用了支持大多数M3U8链接,比如这个`https://v1.szjal.cn/20190819/Ql6UD1od/index.m3u8
`不需要适配器都可以用上面的方法
FTP上传过程中没有实时进度，上传完成直接跳到100%，有没有小伙伴能修复



## 版本
* 3.8.3

* android 4.4

## 错误日志
`java.lang.RuntimeException: Only one Looper may be created per thread
        at android.os.Looper.prepare(Looper.java:77)
        at android.os.Looper.prepare(Looper.java:72)
        at com.arialyy.aria.core.loader.AbsNormalLoader.startFlow(AbsNormalLoader.java:124)
        at com.arialyy.aria.core.loader.AbsNormalLoader.run(AbsNormalLoader.java:114)
        at com.arialyy.aria.core.loader.AbsNormalLoaderUtil.start(AbsNormalLoaderUtil.java:119)
        at com.arialyy.aria.core.task.AbsTask.start(AbsTask.java:233)
        at com.arialyy.aria.core.task.AbsTask.start(AbsTask.java:211)
        at com.arialyy.aria.core.queue.AbsTaskQueue.reTryStart(AbsTaskQueue.java:341)
        at com.arialyy.aria.core.queue.AbsTaskQueue.reTryStart(AbsTaskQueue.java:42)
        at com.arialyy.aria.core.scheduler.FailureTaskHandler$2.run(FailureTaskHandler.java:92)
        at android.os.Handler.handleCallback(Handler.java:733)
        at android.os.Handler.dispatchMessage(Handler.java:95)
        at android.os.Looper.loop(Looper.java:136)
        at android.app.ActivityThread.main(ActivityThread.java:5017)
        at java.lang.reflect.Method.invokeNative(Native Method)
        at java.lang.reflect.Method.invoke(Method.java:515)
        at com.android.internal.os.ZygoteInit$MethodAndArgsCaller.run(ZygoteInit.java:816)
        at com.android.internal.os.ZygoteInit.main(ZygoteInit.java:632)
        at dalvik.system.NativeStart.main(Native Method)`


## 重现步骤
websocket接收到下载信息，使用基本方式下载视频，不是必现
`Aria.download(this)
                            .load(url)
                            .ignoreFilePathOccupy()
                            .setFilePath(savePath)
                            .create();`




## 版本
* 框架版本
3.8.3

* 系统版本
android 7.1

## 错误日志
   java.lang.IllegalStateException: Handler (android.os.Handler) {1121a19} sending message to a Handler on a dead thread
        at android.os.MessageQueue.enqueueMessage(MessageQueue.java:543)
        at android.os.Handler.enqueueMessage(Handler.java:643)
        at android.os.Handler.sendMessageAtTime(Handler.java:612)
        at android.os.Handler.sendMessageDelayed(Handler.java:582)
        at android.os.Handler.sendMessage(Handler.java:519)
        at android.os.Message.sendToTarget(Message.java:416)
        at com.arialyy.aria.core.task.ThreadTask.sendRunningState(ThreadTask.java:367)
        at com.arialyy.aria.core.task.ThreadTask.updateCompleteState(ThreadTask.java:317)
        at com.arialyy.aria.core.task.AbsThreadTaskAdapter.complete(AbsThreadTaskAdapter.java:109)
        at com.arialyy.aria.m3u8.M3U8ThreadTaskAdapter.handleComplete(M3U8ThreadTaskAdapter.java:274)
        at com.arialyy.aria.m3u8.M3U8ThreadTaskAdapter.readDynamicFile(M3U8ThreadTaskAdapter.java:240)
        at com.arialyy.aria.m3u8.M3U8ThreadTaskAdapter.handleConn(M3U8ThreadTaskAdapter.java:131)
        at com.arialyy.aria.m3u8.M3U8ThreadTaskAdapter.handlerThreadTask(M3U8ThreadTaskAdapter.java:92)
        at com.arialyy.aria.core.task.AbsThreadTaskAdapter.call(AbsThreadTaskAdapter.java:54)
        at com.arialyy.aria.core.task.ThreadTask.call(ThreadTask.java:534)
        at com.arialyy.aria.core.task.ThreadTask.call(ThreadTask.java:47)
        at java.util.concurrent.FutureTask.run(FutureTask.java:237)
        at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1133)
        at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:607)
        at java.lang.Thread.run(Thread.java:761)

## 重现步骤
边下边播正常下载的过程中，突然未能继续下载，日志输出了以上警告错误。



## 版本
* 3.8.3

* 系统版本
android7.1
为啥不把 IVodTsUrlConverter setBandWidthUrlConverter 放到M3u8InfoThread 里面去处理 。解析M3U8配置然后设置对应的url 。




### 由于m3u8的特殊性，每家的ts文件地址、码率地址（二级m3u8）都可能不一样，因此你需要自行拼接ts地址和码率文件的地址

## 例子
苹果公司的m3u8测试地址：http://devimages.apple.com/iphone/samples/bipbop/bipbopall.m3u8
先用浏览器下载该m3u8文件，打开后格式如下，发现其需要选择码率才能获取到真正的ts切片地址。
![image](https://user-images.githubusercontent.com/10437293/72030263-73246d00-32c3-11ea-8df8-17f7427c014f.png)
因此在Aria中，你需要进行两步操作才能切换码率。
1、选择码率（如果不选择码率，默认使用第一个码率）
```java
M3U8VodOption option = new M3U8VodOption();
option.setBandWidth(200000); // 在这选择的是第一个码率，当然，你也可以选择其它码率，如上述图片的311111，48444等
```

2、设置码率转换器
在上面的文件中，可以发现其码率并不是真正的http地址，需要我们进行拼接，至于如何拼接需要看服务端订的规则。
一般是：一级的地址 + 码率地址。
如上面那个苹果公司的m3u8测试地址的200000对应的m3u8地址为：
http://devimages.apple.com/iphone/samples/bipbop/gear1/prog_index.m3u8
因此，需要在代码Aria中设置码率转换器：
```java
static class BandWidthUrlConverter implements IBandWidthUrlConverter {

     @Override public String convert(String bandWidthUrl) {
 
      return "http://devimages.apple.com/iphone/samples/bipbop/" + bandWidthUrl;
    }
  }
```

3、设置ts文件地址转换器
这样我们就可以获取到二级的m3u8地址了，接下来就需要通过二级的m3u8地址获取真正的ts文件下载地址，将上面拼接的二级m3u8地址粘贴到浏览器中，并将其下载下来，观察其格式。
![image](https://user-images.githubusercontent.com/10437293/72030782-2d68a400-32c5-11ea-9319-b8631625c596.png)
发现ts切片的地址依然不是http地址，这时便需要设置ts地址转换器获取真正的下载地址。
至于如何拼接，依然需要看服务器定制的规则，一般是：二级的地址 + ts文件名。
```java
static class VodTsUrlConverter implements IVodTsUrlConverter {
    @Override public List<String> convert(String m3u8Url, List<String> tsUrls) {
   
      for (String url : tsUrls) {
        newUrls.add("http://devimages.apple.com/iphone/samples/bipbop/gear1/" + url);
      }

      return newUrls;
    }
  }
```
这样便可以正常下载m3u8文件了。

## ⚠️tips：并不是所有的m3u8文件都需要选择码率，对于这些不需要选择码率的m3u8文件，只需要设置ts文件地址转换器。





## 版本
* 框架版本
3.8
* 系统版本
android7.1

## 错误日志
错误一日志：
java.lang.ArrayIndexOutOfBoundsException: length=8192; index=8192 at com.android.okhttp.okio.Buffer.writeByte(Buffer.java:973) at com.android.okhttp.internal.Platform.concatLengthPrefixed(Platform.java:130) at com.android.okhttp.internal.Platform.configureTlsExtensions(Platform.java:84) at com.android.okhttp.Connection.connectTls(Connection.java:230) at com.android.okhttp.Connection.connectSocket(Connection.java:199) at com.android.okhttp.Connection.connect(Connection.java:172) at com.android.okhttp.Connection.connectAndSetOwner(Connection.java:367) at com.android.okhttp.OkHttpClient$1.connectAndSetOwner(OkHttpClient.java:130) at com.android.okhttp.internal.http.HttpEngine.connect(HttpEngine.java:330) at com.android.okhttp.internal.http.HttpEngine.sendRequest(HttpEngine.java:247) at com.android.okhttp.internal.huc.HttpURLConnectionImpl.execute(HttpURLConnectionImpl.java:457) at com.android.okhttp.internal.huc.HttpURLConnectionImpl.connect(HttpURLConnectionImpl.java:126) at com.android.okhttp.internal.huc.DelegatingHttpsURLConnection.connect(DelegatingHttpsURLConnection.java:89) at com.android.okhttp.internal.huc.HttpsURLConnectionImpl.connect(HttpsURLConnectionImpl.java) at com.arialyy.aria.m3u8.M3U8InfoThread.run(M3U8InfoThread.java:100) at java.lang.Thread.run(Thread.java:761)

错误二：
public void onPeerComplete(String m3u8Url, String peerPath, int peerIndex)
其中的peerpath为null

原来使用的是3.7.4（或许是3.7.2我记不清了）



 log显示：长度不一致，任务为新任务
m3u8下载ts文件出现异常的时候，能否提供api可以让业务决定是否忽略某一个ts文件，继续下载，而不是通过全局设置m3u8 option