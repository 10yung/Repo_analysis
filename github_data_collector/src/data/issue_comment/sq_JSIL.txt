JSIL does not include attribute properties in the output... example:

**C#**
`[ProtoMember(3, AsReference = true)]`

**JSIL**
`.Attribute($asm10.TypeRef("ProtoBuf.ProtoMemberAttribute"), function () { return [3]; });`

1. Is there a possibility to include the `AsReference=true` into the JSIL generated output?
2. Where do I have to look?

Hello i have a question,

Is possibile load a file from directory?

First supposition. Load Texture From file.
Maybe using FileStream, Get bytes from file and construct texture.

Other question, i use Jint. is a javascript interpreter for .net
need to read javascript file in the folder. is possible?
DateTime object does not have most of the public methods available. For example all Add methods like Add,AddDays, AddMonths, AddYears etc.
Here is test case.
```c#
using System;

public static class Program
{
    public static void Main(string[] args)
    {
        var s = DateTime.Now;
        Console.WriteLine(s.AddDays(1));
    }
}
```

The external method Repeat<TResult>(TResult,int) was not implemented.
This commit introduces a test case and matching implementation returning
a JSIL AbstractEnumerable returning the element the appropriate number
of times.
The in C# 7.2 introduced "in" keyword for method parameters results in a crash when used in an interface, but only if the class that is implementing the interface is cast back to the interface.
The code throws a System.InvalidCastException at runtime (Firefox 57.0.4). 

Bug test project:
https://github.com/baehny/Bugs/tree/master/JSIL/JSIL_InParameters/JSIL_InParameters

```
using System;
public struct TestStruct
{
    public int Field;
}
public interface TestInterface
{
    void TestMethodRef(ref TestStruct testStruct);
    void TestMethodIn(in TestStruct testStruct);
}
public class TestClass : TestInterface
{
    public void TestMethodRef(ref TestStruct testStruct) { }
    public void TestMethodIn(in TestStruct testStruct) { }
}
class Program
{
    static void Main(string[] args)
    {
        TestStruct testStruct = new TestStruct();
        TestClass interfaceClass = new TestClass();

        Console.WriteLine("1:");
        interfaceClass.TestMethodRef(ref testStruct); //Works

        Console.WriteLine("2:");
        interfaceClass.TestMethodIn(testStruct); //Works

        Console.WriteLine("3:");
        ((TestInterface)interfaceClass).TestMethodRef(ref testStruct); //Works

        Console.WriteLine("4:");
        ((TestInterface)interfaceClass).TestMethodIn(testStruct); //Crash: throws System.InvalidCastException: Unable to cast object of type 'TestStruct' to type 'ref TestStruct'

        Console.WriteLine("End");
    }
}
```

There is no problem when using "ref" which is strange because in both cases the parameter is passed as valuetype TestStruct& but with a System.Runtime.InteropServices.InAttribute for the "in" parameter version. However the in keyword results in two definitions for TestMethodIn()

First version of TestMethodIn :
```
.method public hidebysig 
	instance void TestMethodIn (
		valuetype TestStruct& testStruct
	) cil managed 
{
	.param [1]
	.custom instance void [mscorlib]System.Runtime.CompilerServices.IsReadOnlyAttribute::.ctor() = (
		01 00 00 00
	)
	// Method begins at RVA 0x2050
	// Code size 2 (0x2)
	.maxstack 8

	IL_0000: nop
	IL_0001: ret
} // end of method TestClass::TestMethodIn
```
Second version of TestMethodIn :
```
.method private final hidebysig newslot virtual 
	instance void TestInterface.TestMethodIn (
		valuetype TestStruct& modreq([mscorlib]System.Runtime.InteropServices.InAttribute)  testStruct
	) cil managed 
{
	.override method instance void TestInterface::TestMethodIn(valuetype TestStruct& modreq([mscorlib]System.Runtime.InteropServices.InAttribute) )
	.param [1]
	.custom instance void [mscorlib]System.Runtime.CompilerServices.IsReadOnlyAttribute::.ctor() = (
		01 00 00 00
	)
	// Method begins at RVA 0x205c
	// Code size 8 (0x8)
	.maxstack 8

	IL_0000: ldarg.0
	IL_0001: ldarg.1
	IL_0002: call instance void TestClass::TestMethodIn(valuetype TestStruct&)
	IL_0007: ret
} // end of method TestClass::TestInterface.TestMethodIn
```

TestMethodRef :
```
.method public final hidebysig newslot virtual 
	instance void TestMethodRef (
		valuetype TestStruct& testStruct
	) cil managed 
{
	// Method begins at RVA 0x2050
	// Code size 2 (0x2)
	.maxstack 8

	IL_0000: nop
	IL_0001: ret
} // end of method TestClass::TestMethodRef
```

Calling code:
```
	IL_0037: ldstr "3:"
	IL_003c: call void [mscorlib]System.Console::WriteLine(string)
	IL_0041: nop
	IL_0042: ldloc.1
	IL_0043: ldloca.s 0
	IL_0045: callvirt instance void TestInterface::TestMethodRef(valuetype TestStruct&)
	IL_004a: nop
	IL_004b: ldstr "4:"
	IL_0050: call void [mscorlib]System.Console::WriteLine(string)
	IL_0055: nop
	IL_0056: ldloc.1
	IL_0057: ldloca.s 0
	IL_0059: callvirt instance void TestInterface::TestMethodIn(valuetype TestStruct& modreq([mscorlib]System.Runtime.InteropServices.InAttribute) )
	IL_005e: nop
```


Delegate.Method crashs when called in a constructor. The same code works when called inside a member method that is called in the ctor.

```
    class Class1
    {
        public Class1()
        {
            Delegate d = new Action<int>(
            (int someVar) =>
            {

            });
            var p = d.Method.GetParameters(); // TypeError: d.get_Method(...) is null
        }
    }
    class Class2
    {
        public Class2()
        {
            MemberMethod();
        }

        public void MemberMethod()
        {
            Delegate d = new Action<int>(
            (int someVar) =>
            {

            });
            var p = d.Method.GetParameters(); // TypeError: d.get_Method(...) is null
        }
    }

    public class JSILLimitations
    {
        public static void DelegateBug()
        {
            Delegate d = new Action<int>(
            (int console) =>
            {

            });
            var p = d.Method.GetParameters();
            Console.WriteLine("Static method version works.");

            Class2 clazz2 = new Class2();
            Console.WriteLine("Member method call version works.");

            Class1 clazz1 = new Class1();
            //Crash
            Console.WriteLine("Ctor method version works."); //
        }
    }
```
I get an uncaught exception of type System.InvalidCastException when I try to execute the following:

```
            // Load the document
            using (Stream strm = archive.GetFileStream("package.json"))
            {
                using (StreamReader reader = new StreamReader(strm))
                {
                    // The following line crashes!
                    dynamic rootObject = JsonConvert.DeserializeObject(reader.ReadToEnd());
                }
             }
```

The generated JSIL line that causes the crash somewhere in the NewtonSoft.Json.dll js code looks like this:

`var rootObject = $T0D().DeserializeObject(($S05().Construct(strm)).ReadToEnd());`

Exception message in log div:
```
Unhandled exception at http://127.0.0.1/web/Libraries/JSIL.Core.js line 5034:
Uncaught System.InvalidCastException: Unable to cast object of type 'Newtonsoft.Json.JsonTextReader' to type 'Newtonsoft.Json.Serialization.TraceJsonReader'.
```

**Edit:** The C# code runs just fine in a compiled Windows application, so the JSON data isn't corrupted.
**Edit 2:** I also checked in the javascript debugger that the stream contains the correct json text value, so everything got loaded correctly from the local file storage.
hello 
it is possible to use jsil for pascal language with http://pascalabc.net/en/  ??

tanks

Barbosa
When using jsil again assemblies compiled for netstandard 1.x, it reports some errors.
IndexOf function with StringComparison pararameter is not available.
Here is test case:
```c#
using System;

public static class Program
{
    public static void Main(string[] args)
    {
        var s = "abcdefabcdef";
        Console.WriteLine(s.IndexOf("ABC", StringComparison.OrdinalIgnoreCase));
    }
}
```