$ fab --version
Fabric 2.5.0
Paramiko 2.6.0
Invoke 1.3.0

def decorator(f):
    @wraps(f)
    def wrapper(ctx, *args, **kwargs):
        return f(ctx, *args, **kwargs)
    return wrapper

@task
# @decorator
def test(ctx, a):
    print(a)

$ fab test -a=1
1
==>get the right result

howeverï¼Œwhen the task decoreated by decorator
@task
# @decorator
def test(ctx, a):
    print(a)

$ fab test -a=1
No idea what '-a' is!
==>get the wrong result

Haven't dug into this, but IIRC some of our background-thread/process stuff for forwarding ports and auth agents might fit very neatly with the upcoming `run(asynchronous=True)` from Invoke 1.4, including the part where that comes with a context manager feature.
Just added a callback argument, which is passed on to the built in callback argument in Paramiko's SFTP class. I was working on a script that transfers some pretty heavy files, and so I wanted to show the transfer progress, which this callback is extremely useful for.
add helper method to Groups classes that let user to pass a function to run on connections in the group

group.run is very simple usage, and normally we have several commands tight together and in case we want to run them async the approach in docs is not let us do it.

Closes #2040


There is a small typo in fabric/config.py.
Should read `additionally` rather than `additionall`.


This builds upon https://github.com/fabric/fabric/pull/2038

But since I wasn't sure if you'd want to have this class as wel, I've moved it to a separate pr
fixes #2037 

Why?
I'd like to do tranfers to multiple hosts at the same time

What does this PR Do?

It moves the Parallelization for the group classes to a function:
```python
def _operation(self, operation *args, **kwargs):
    pass
```

This operation function is then in charge of executing the operation on all connections. All the methods can now be added to the `Group` class since all those implementations do essentially the same thing: 

Example from the `thread_worker` function:
```python
def thread_worker(cxn, operation, queue, args, kwargs):
    func = getattr(cxn, operation)
    result = func(*args, **kwargs)
    # TODO: namedtuple or attrs object?
    queue.put((cxn, result))
``` 

Example from the `SerialGroup`:
```
func = getattr(cxn, operation)
results[cxn] = func(*args, **kwargs)
```

I'll be making a separate PR for a `GroupTransfer` class so that you can choose whether or not to use that.
I'd like to be able to use file transfers in `Groups` currently this is not possible because the `Transfer` class requires a `Connection`.

I'll write up a PR.
As mentioned in #1322 , pty=True implies that stdout and stderr are merged.

However, if using sudo, I would strongly classify it as a bug to not remove the sudo prompt:

```
import fabric
import getpass
with fabric.Connection(host='localhost') as c:
    c.config.sudo.password = getpass.getpass()
    r = c.sudo('cat /etc/passwd', pty=True)
    print('stdout=')
    print(r.stdout)
```

results in:

```
stdout=
[sudo] password: 
</etc/passwd file>
```

I would expect sudo() to remove the sudo prompt, e.g. something like this:

```
assert r.stdout.startswith(sudo_prompt)
r.stdout = r.stdout[len(sudo_prompt):]
return r
```