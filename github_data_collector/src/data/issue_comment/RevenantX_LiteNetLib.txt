As I see, there are some people interested in the encryption ability for this library.

I propose to add 2 callback handles, which will help to add almost any external logic for transparent data encryption, something like:

```csharp
// Ecrypt
byte[] BeforeSend(byte[] data);
```
and
```csharp
// Decrypt
byte[] BeforeReceive(byte[] data);
```

where BeforeSend() function result will replace the actual user's data buffer right before actual sending the UDP (without replacing library's service data from header) and BeforeReceive() will be called on actual data receiving, but BEFORE firing the NetworkReceiveEvent event.

Having just those 2 handlers will allow to implement AES encryption really easy.

Sure, the whole encryption logic implementation will remain on developer who will use the library - crypto-processor initialization, keys management, etc.
I think it would be useful if NetManager.Start and NetManager.Connect
were combined into two functions NetManager.Host and NetManager.Join.

you could even make NetManager.Host accepts a passkey like NetManager.Connect and NetManager.Join, and automatically reject people host side that don't match.

Version 0.8.3.1
OS Windows 7 Home 64 bit;
IDE Visual Studio 2017 Community
As you may know there are bunch of cases where NAT Punch Through doesn't work. So we need to have alternative way to communicate client and server both behind NAT. And only options which seems working in every case is a Socks5 server.
So it will be very useful to have such options in the lib.
Hello!

Correct me if I am wrong but the actual system consists in fixing the bugs in the master branch (e.g. 0.9), and then merging all the fixes (concerning the old versions too) in a new stable build (e.g. 0.8.4) few weeks later?

Don't you think it would be clearer and easier to manage to fix the bugs at the same time in the master branch (e.g. 0.9) and in "long term support" branches (e.g. 0.8 [Long Term Support])?

It would also obviously bring the fixes faster for the stable versions.

I really liked this shift made by Unity concerning version management from '5.6.x and patches' to 'U.2019.x and long term support'

Regards
Hi, on iPhone, if we block screen - after some time, we start get this toooone of messages:
and when we go to application, he crash ( not enought memory )
Platform Unity

many many this messages:

[R]Error code: 10057 - System.Net.Sockets.SocketException (0x80004005): The socket is not connected
  at System.Net.Sockets.Socket.ReceiveFrom (System.Byte[] buffer, System.Int32 offset, System.Int32 size, System.Net.Sockets.SocketFlags socketFlags, System.Net.EndPoint& remoteEP) [0x00000] in <00000000000000000000000000000000>:0 
  at LiteNetLib.NetSocket.ReceiveLogic (System.Object state) [0x00000] in <00000000000000000000000000000000>:0 
  at System.Threading.ThreadHelper.ThreadStart_Context (System.Object state) [0x00000] in <00000000000000000000000000000000>:0 
  at System.Threading.ExecutionContext.RunInternal (System.Threading.ExecutionContext executionContext, System.Threading.ContextCallback callback, System.Object state, System.Boolean preserveSyncCtx) [0x00000] in <00000000000000000000000000000000>:0 
LiteNetLib.NetDebug:WriteLogic(NetLogLevel, String, Object[])
LiteNetLib.NetSocket:ReceiveLogic(Object)
System.Threading.ThreadHelper:ThreadStart_Context(Object)
System.Threading.ExecutionContext:RunInternal(ExecutionContext, ContextCallback, Object, Boolean)
With the current release we get this exception in the log when starting the server:
> [B]Bind exception: SocketException: Protocol option not supported
at SetSocketOption (SocketOptionLevel optionLevel, SocketOptionName optionName, Boolean optionValue)
at LiteNetLib.NetSocket.BindSocket (Socket socket, IPEndPoint ep, Boolean reuseAddress), errorCode: ProtocolOption

And (probably at the same time) Unity writes this to stdout:
> System.Net.Sockets.SocketOptionName 0x1b is not supported at IPv6 level

**Library version**: release version 0.8.3

**Framework**: Unity 2018.2.20, .NET 2 backend

**OS**: Linux

Why packets does not have checksum? data would get corrupted.
Thank you for this useful library

I found that if any peer hole punches under a mobile network, 
it will get socket exception 10052, and hole punch failed
but if I increase the _socket.Ttl to 16,  it works well.

```csharp
(In NatPunchModule.cs)
private void HandleNatIntroduction(NetDataReader dr)
{
   ... (omitted)
   if (hostByte == HostByte)
   {
       _socket.Ttl = 2;   // <<<<< here
       _socket.SendTo(writer.Data, 0, writer.Length, remoteExternal, ref errorCode);
       _socket.Ttl = NetConstants.SocketTTL;
    }
    ... (omitted)
}
```

**Library version**: [commit id (b86f2884eccdf92dd50ee65d8c04887b4e1891ff) 

**Framework**: [NET Framework 3.5]

**OS**: [Win10]

Replace #STATS_ENABLED with some bool flag like `Statistics.Enabled` or `NetManager.StatisticsEnabled`, so it may be enabled/disabled without recompiling. AFAIK a simple bool flag check does not affect the CPU.
Not sure how big of an issue this is, but it seems that the way connections are established is...

Client1 - Send connect request with connectionID generated from tick time.
Client2 - Receive connect request, set connectionState to connected, send connect accept with received connectionID
Client1 - Receive connect accept, if connectionID is same we set connectionState to connected.

Shouldnt it be more so like how tcp 3 way handshake does it? (Possibly for security reasons such as helping avoid spoofed ip address?)

Client1 - Send connect request with randomly generated long value.
Client2 - Receive connect request, send connect accept with received long value as well as send our own randomly generated long value.
Client1 - Receive connect accept, if sent long value is same we set connectionState to connected and we send a ConnectAcceptFinal message with received long value.
Client2 - Receive connect accept final, if sent long value is same we set connectionState to connected.

Maybe even then just keep connectionID a int that we just increment every new connection?