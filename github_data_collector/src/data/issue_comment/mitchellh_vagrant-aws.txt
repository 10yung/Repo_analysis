â€¦d in the object
It would be nice if it were possible to specify an AMI via a search string rather than by ID, like in [`test-kitchen`](https://github.com/test-kitchen/kitchen-ec2#image_search).
**Heads up!**

When trying to configure aws.elb in my project, I encountered a mysterious issue that I think may haunt other vagrant-aws users in the future. Upon executing a vagrant up command I ran into this error message:

"ELB configured for the instance does not exist"

**Explanation**

Given that I was 100% sure that the ELB did in fact exist, it took a bit of debugging to realize that vagrant-aws currently can only register an instance to _classic load balancers_ and not _application load balancers_.

Vagrant-aws 0.7.2 depends on the fog-aws-2.0.1 gem which currently does not support AWS elbv2 ALBs as specified by this pull request.

https://github.com/fog/fog-aws/pull/400

**Verification Test**

A quick test to prove this is to create a Classic Load Balancer and and Application Load Balancer then run 

`aws elb describe-load-balancers` 
and 
`aws elbv2 describe-load-balancers`

Respective results will be logged. Fog-aws can only describe elb's

**Possible Solutions**

1) Merge the related fog-aws PR

2) Add a dependency to a different ruby-based AWS SDK to be able to retrieve elbv2s

3) Enhance error logging to let users know that they can only register classic load balancers to an instance using the vagrant CLI.


For now I chose option 3 since it does not matter for my use case however, I expect others may in the future have a more strict need.

Thanks!


Attempting to install the plugin results in the error in the title.  The full error included below:

```
vagrant plugin install vagrant-aws
Installing the 'vagrant-aws' plugin. This can take a few minutes...
Fetching: xmlrpc-0.3.0.gem (100%)
Fetching: formatador-0.2.5.gem (100%)
Fetching: excon-0.65.0.gem (100%)
Fetching: fog-core-1.45.0.gem (100%)
Fetching: mini_portile2-2.4.0.gem (100%)
Fetching: nokogiri-1.10.3-x64-mingw32.gem (100%)
Nokogiri is built with the packaged libraries: libxml2-2.9.9, libxslt-1.1.33, zlib-1.2.11, libiconv-1.15.
Fetching: fog-xml-0.1.3.gem (100%)
Fetching: fog-xenserver-1.0.0.gem (100%)
Fetching: optimist-3.0.0.gem (100%)
Fetching: rbvmomi-2.2.0.gem (100%)
Fetching: fog-vsphere-3.2.0.gem (100%)
Fetching: fog-voxel-0.1.0.gem (100%)
Fetching: CFPropertyList-2.3.6.gem (100%)
Fetching: fission-0.5.0.gem (100%)
Fetching: fog-vmfusion-0.1.0.gem (100%)
Fetching: fog-terremark-0.1.0.gem (100%)
Fetching: fog-json-1.2.0.gem (100%)
Fetching: fog-storm_on_demand-0.1.1.gem (100%)
Fetching: fog-softlayer-1.1.4.gem (100%)
Fetching: fog-serverlove-0.1.2.gem (100%)
Fetching: fog-sakuracloud-1.7.5.gem (100%)
Fetching: fog-riakcs-0.1.0.gem (100%)
Fetching: fog-radosgw-0.0.5.gem (100%)
Fetching: ipaddress-0.8.3.gem (100%)
Fetching: fog-rackspace-0.1.6.gem (100%)
Fetching: fog-profitbricks-4.1.1.gem (100%)
Fetching: fog-powerdns-0.2.0.gem (100%)
Fetching: ovirt-engine-sdk-4.3.0.gem (100%)
Building native extensions.  This could take a while...
Vagrant failed to properly resolve required dependencies. These
errors can commonly be caused by misconfigured plugin installations
or transient network issues. The reported error is:

ERROR: Failed to build gem native extension.

    current directory: C:/Users/william.higgs/.vagrant.d/gems/2.4.6/gems/ovirt-engine-sdk-4.3.0/ext/ovirtsdk4c
C:/HashiCorp/Vagrant/embedded/mingw64/bin/ruby.exe -r ./siteconf20190806-17052-10ug91j.rb extconf.rb
checking for xml2-config... no
*** extconf.rb failed ***
Could not create Makefile due to some reason, probably lack of necessary
libraries and/or headers.  Check the mkmf.log file for more details.  You may
need configuration options.

Provided configuration options:
        --with-opt-dir
        --without-opt-dir
        --with-opt-include
        --without-opt-include=${opt-dir}/include
        --with-opt-lib
        --without-opt-lib=${opt-dir}/lib
        --with-make-prog
        --without-make-prog
        --srcdir=.
        --curdir
        --ruby=C:/HashiCorp/Vagrant/embedded/mingw64/bin/$(RUBY_BASE_NAME)
        --with-libxml2-config
        --without-libxml2-config
        --with-pkg-config
        --without-pkg-config
extconf.rb:29:in `<main>': The "libxml2" package isn't available. (RuntimeError)


To see why this extension failed to compile, please check the mkmf.log which can be found here:

  C:/Users/william.higgs/.vagrant.d/gems/2.4.6/extensions/x64-mingw32/2.4.0/ovirt-engine-sdk-4.3.0/mkmf.log

extconf failed, exit code 1

Gem files will remain installed in C:/Users/william.higgs/.vagrant.d/gems/2.4.6/gems/ovirt-engine-sdk-4.3.0 for inspection.
Results logged to C:/Users/william.higgs/.vagrant.d/gems/2.4.6/extensions/x64-mingw32/2.4.0/ovirt-engine-sdk-4.3.0/gem_make.out
```

i have an edge case where the password for an ami is the instance id of that deployed machine.

is there a way to ready the instance id into a variable when the Vagrantfile is provisioning a host?
This wouldnt use a provision script as the username and password is required before a provisioning script can be run.
### DESCRIPTION
Default profile set with either `AWS_PROFILE` or `AWS_DEFAULT_PROFILE` seems ignored and instead plugin parses INI file manually.  AWS SDK has built in mechanism to parse INI given the environment variable.

#### Credentials ($HOME/.aws/credentials)

```ini
[dev]
aws_access_key_id = REDACTED
aws_secret_access_key = REDACTED
[prod]
aws_access_key_id = REDACTED
aws_secret_access_key = REDACTED
[ninjapants]
aws_access_key_id = REDACTED
aws_secret_access_key = REDACTED
```



#### Vagrantfile

```ruby
Vagrant.configure("2") do |config|
  config.vm.box = "dummy"

  config.vm.provider :aws do |aws, override|
    aws.keypair_name = "vagrant"
    aws.ami = "ami-0cd3dfa4e37921605"
    override.ssh.private_key_path = "#{ENV['HOME']}/.ssh/vagrant_aws.pem"
  end
end
```

#### Steps

```bash
export AWS_DEFAULT_PROFILE=ninjapants
export AWS_PROFILE=ninjapants
vagrant up
```

### EXPECTED RESULTS

1. Default profile used.
2. Should profile not found, friendly message that is the case

### ACTUAL RESULTS

```
/Users/mejoaqui/.vagrant.d/gems/2.4.4/gems/vagrant-aws-0.7.2/lib/vagrant-aws/config.rb:544:in `read_aws_files': undefined method `[]' for nil:NilClass (NoMethodError)
	from /Users/mejoaqui/.vagrant.d/gems/2.4.4/gems/vagrant-aws-0.7.2/lib/vagrant-aws/config.rb:513:in `get_aws_info'
	from /Users/mejoaqui/.vagrant.d/gems/2.4.4/gems/vagrant-aws-0.7.2/lib/vagrant-aws/config.rb:326:in `finalize!'
	from /opt/vagrant/embedded/gems/2.2.4/gems/vagrant-2.2.4/plugins/kernel_v2/config/vm.rb:509:in `block in finalize!'
	from /opt/vagrant/embedded/gems/2.2.4/gems/vagrant-2.2.4/plugins/kernel_v2/config/vm.rb:474:in `each'
	from /opt/vagrant/embedded/gems/2.2.4/gems/vagrant-2.2.4/plugins/kernel_v2/config/vm.rb:474:in `finalize!'
	from /opt/vagrant/embedded/gems/2.2.4/gems/vagrant-2.2.4/lib/vagrant/config/v2/root.rb:52:in `block in finalize!'
	from /opt/vagrant/embedded/gems/2.2.4/gems/vagrant-2.2.4/lib/vagrant/config/v2/root.rb:51:in `each'
	from /opt/vagrant/embedded/gems/2.2.4/gems/vagrant-2.2.4/lib/vagrant/config/v2/root.rb:51:in `finalize!'
	from /opt/vagrant/embedded/gems/2.2.4/gems/vagrant-2.2.4/lib/vagrant/config/v2/loader.rb:21:in `finalize'
	from /opt/vagrant/embedded/gems/2.2.4/gems/vagrant-2.2.4/lib/vagrant/config/loader.rb:200:in `load'
	from /opt/vagrant/embedded/gems/2.2.4/gems/vagrant-2.2.4/lib/vagrant/vagrantfile.rb:29:in `initialize'
	from /opt/vagrant/embedded/gems/2.2.4/gems/vagrant-2.2.4/lib/vagrant/environment.rb:794:in `new'
	from /opt/vagrant/embedded/gems/2.2.4/gems/vagrant-2.2.4/lib/vagrant/environment.rb:794:in `vagrantfile'
	from /opt/vagrant/embedded/gems/2.2.4/gems/vagrant-2.2.4/lib/vagrant/environment.rb:178:in `initialize'
	from /opt/vagrant/embedded/gems/2.2.4/gems/vagrant-2.2.4/bin/vagrant:145:in `new'
	from /opt/vagrant/embedded/gems/2.2.4/gems/vagrant-2.2.4/bin/vagrant:145:in **`<main>'**
```


### WORKAROUND

Can manually add `aws.aws_profile = "#{ENV['AWS_PROFILE']}"`, but really should just let AWS SDK do the work, and not get in the way.

`~/.vagrant.d/gems/2.4.4/gems/fog-aws-2.0.1/lib/fog/aws.rb:237:in 'validate_region!': Unknown region: "eu-north-1" (ArgumentError)`

I'm quite sure that eu-north-1 is a valid region. What gives?

Hello colleagues,

Currently this plug-in needs a SSH username and key pair (.pem file) as seen below:
    override.ssh.username = "ec2-user"
    override.ssh.private_key_path = "abc.pem"

Is there anyway to set a password instead?

Thanks,

Javier Caceres