Hi,

After letting Mopidy finish a track and going to the next one, the track title is not properly updated, resulting in the next track having the same title as the previous one. This issue slowly seems to grow worse, and the entire playlist becomes skewed.
For the record; the audio plays fine, the artist is updated fine, the track number is updated fine, and so is the track length and progress.

Steps to reproduce:
1. Fill the playlist with a few tracks,
2. Play one, without skipping or seeking (as it seems to happen when you let a track play out for a while)
3. Let the track finish, and watch as the title is not changed when moving to the next track.

I'm running Arch Linux, with the following versions of Mopidy and its extensions:
- mopidy 3.0.1-2
- mopidy-local 3.1.0-1
- mopidy-mpd 3.0.0-1
- mopidy-soundcloud 3.0.0-1 

These are all updated to the latest known version on Arch and the AUR.

I've been dealing with this since updating to Mopidy 3 somewhere last year, whereas 2 never had this behavior.
This issue seems similar to #1528 , however that one talks about Mopidy 2.

The tracks shown below are played from mopidy-local.

In ncmpcpp:
![Incorrect track listing](https://i.imgur.com/UGgH0Gz.png)

And in polybar's MPD extension:
![Polybar MPD](https://i.imgur.com/7MZi6zJ.png)

This is the actual track listing:
![Correct track listing](https://i.imgur.com/8MSffeB.png)

With a different album, I tried to capture the logs with `mopidy -v` during the time it happened.
![Log](https://i.imgur.com/mS97ZIp.png)
```text
DEBUG    2020-01-15 14:07:06,594 [79919:MainThread] mopidy.audio.actor
  Audio event: tags_changed(tags=['minimum-bitrate', 'bitrate'])
DEBUG    2020-01-15 14:07:06,594 [79919:MainThread] mopidy.listener
  Sending tags_changed to AudioListener: {'tags': ['minimum-bitrate', 'bitrate']}
DEBUG    2020-01-15 14:07:06,644 [79919:MpdSession-11] mopidy_mpd.session
  Request from [::ffff:127.0.0.1]:34768: noidle
DEBUG    2020-01-15 14:07:06,644 [79919:MpdSession-11] mopidy_mpd.session
  Response to [::ffff:127.0.0.1]:34768: OK
DEBUG    2020-01-15 14:07:06,644 [79919:MpdSession-11] mopidy_mpd.session
  Request from [::ffff:127.0.0.1]:34768: status
DEBUG    2020-01-15 14:07:06,647 [79919:MpdSession-11] mopidy_mpd.session
  Response to [::ffff:127.0.0.1]:34768:
    volume: 100
    repeat: 0
    random: 0
    single: 0
    consume: 0
    playlist: 5
    playlistlength: 8
    xfade: 0
    state: play
    song: 2
    songid: 12
    nextsong: 3
    nextsongid: 13
    time: 1:270
    elapsed: 1.412
    bitrate: 0
    OK
DEBUG    2020-01-15 14:07:06,648 [79919:MpdSession-11] mopidy_mpd.session
  Request from [::ffff:127.0.0.1]:34768: idle
DEBUG    2020-01-15 14:07:06,656 [79919:MainThread] mopidy.audio.gst
  Got TAG bus message: tags={'artist': ['Ben Lukas Boysen'], 'title': ['Sleepers Beat Theme'], 'track-number': [3], 'track-count': [8], 'album': ['Spells'], 'datetime': ['2016'], 'album-artist': ['Ben Lukas Boysen'], 'organization': ['Erased Tapes Records'], 'genre': ['Ambient/Modern Classical'], 'isrc': ['ERATP085'], 'image':<very long escape sequence>
```
There was a lot of noise in the debug output (from images) and it quickly went beyond my terminal's buffer size. 
If any additional information is needed, please tell me and I'll do what I can.

Thank you.
Some Raspberry Pi hats like the Hifiberry Miniamp do not have hardware mixer. Thus, the build-in software miser has to be used. However, the physical volume is already very high at mixer setting 20. An configuration option for softwaremixer would help to limit the volume.

See https://discourse.mopidy.com/t/limit-volume-of-software-mixer/3697 for the initial discussion.

Initially reported at https://github.com/pimoroni/pirate-audio/issues/9#issuecomment-569527425 by @Gadgetoid

Inline comments (specified with a `;` character) work in Mopidy v2.2.3 but not in Mopidy v3.0.1. The ini "spec" might be hazy but we do try to support this, we even have [some tests](https://github.com/mopidy/mopidy/blob/develop/tests/config/test_config.py#L180-L191) for it.

For example, the following config works fine in Mopidy v2.x:
```
[http]
hostname = ::
port = 6680 ; a port
```
But in v3.x, `mopidy config` reports:
```
[http]
enabled = false  ; Extension disabled due to config errors.
hostname = ::
port =   ; Invalid literal for int() with base 10: '6680 ; a port'
```

and `mopidy` outputs the warnings:
```
WARNING  2020-01-08 22:22:36,090 Found http configuration errors. The extension has been automatically disabled:
WARNING  2020-01-08 22:22:36,090   http/port invalid literal for int() with base 10: '6680 ; a port'
WARNING  2020-01-08 22:22:36,090 Please fix the extension configuration errors or disable the extensions to silence these messages.
```
MPD started supporting Grouping/TIT1 tag a while ago upon my request.

According to [id3v2.4.0 frames](http://id3.org/id3v2.4.0-frames),

> TIT1
The 'Content group description' frame is used if the sound belongs to  a larger category of sounds/music. For example, classical music is often sorted in different musical sections (e.g. "Piano Concerto", "Weather - Hurricane").

According to [Foobar2000:ID3 Tag Mapping - Hydrogenaudio Knowledgebase](http://wiki.hydrogenaud.io/index.php?title=Foobar2000:ID3_Tag_Mapping), TIT1 corresponds to grouping tag in vorbis comment.

I'd like to use Grouping/TIT1 tag for designating the name of movie or game that a song is made for. For example, I want to find movie OST songs by the name of the movie.

I used to use album artist tag for this, but grouping tag is more appropriate.
We have a small set of Core APIs emitting `DeprecationWarning` in our source code now:

- [ ] `core.playback.play()`'s "tl_track" argument is deprecated since 3.0, use "tlid" instead.
- [ ] `core.tracklist.add()`'s "tracks" argument is deprecated since 1.0, use "uris" instead.
- [ ] `core.tracklist.eot_track()` is deprecated since 3.0, use `tracklist.get_eot_tlid()`.
- [ ] `core.tracklist.next_track()` is deprecated since 3.0, use `tracklist.get_next_tlid()`.
- [ ] `core.tracklist.previous_track()` is deprecated since 3.0, use `tracklist.get_previous_tlid()`.

We should stop using these APIs ourselves as soon as possible, and remove them in Mopidy 4.0.
This was supposed to be a draft PR...
I have what appears to be a memory leak on a Mopidy installation on a RasPi, booting and running over NFS. Initially I thought the problem was that I had no swap set up, so I added some, but it continues to happen.

The extremely odd thing about this is that the NFS root image is identical to three other RasPi servers handling sound systems in other rooms of the house, but those other three systems have run for weeks without exhibiting any issues. The failing unit freezes up nearly once a day. The only difference among all four servers is the exact content of the music library, but all libraries are pretty small...less than 2k songs, far less in some cases. All songs are in MP3 format, in case it makes a difference.

Here's a screenshot of `top` that I had left running to see the system state when it freezes. Note the insane load and 0k free swap, and the fact that `kswapd` is pegging the CPU, but also that `mopidy` is the one using all the memory. Normally the `mopidy` process is down around 5-6% mem usage.

![image](https://user-images.githubusercontent.com/634312/66594254-c3761c80-eb66-11e9-9abe-1e77796bbc29.png)

I'm already using a local SQLite db. I can run a local scan from the command line with no issues. 

After the above screenshot, I power-cycled the RasPi and got back into a `top` session so I could pay more attention to it. The `%MEM` value reported has slowly crept upward from about 5% to 42%, where it is now. I expect it will continue to rise if I do nothing.

In contrast, one of the stable RasPi audio servers has been running for over two weeks solid and playing audio for at least 72 hours without stopping, and the `mopidy` process is at 6.7% usage. It even has a slightly larger library.

...and after a while longer, the memory use did indeed continue to creep upwards (at 50% when I acted), and I ran `sudo service mopidy force-reload` as a test to see if that would help. It did--`mopidy` memory usage dropped down near zero for a moment, and then back to the expected ~5%. No full service restart needed, though I assume that also would have done the same.

The different RasPis involved all report **Raspberry Pi 3 Model B Rev 1.2** from the output of `cat /sys/firmware/devicetree/base/model`. They are running over NFS mounted root folders that are exact copies of each other, except for the hostname. The contents of `/etc/mopidy/mopidy.conf` are identical. The memory usage takes many hours to grow significantly, but it will eventually eat up all available RAM and swap space.

I have confirmed as well that the memory use stops increasing when audio is stopped (not sure about paused though). The following set of graphs shows RAM and SWAP usage on the problem system over a 24-hour period, including two full PLAY-STOP cycles (hours long) with one final PLAY event at the end to confirm. I did another `force-reload` immediately after this to avoid a complete system freeze and drop RAM/swap usage back down to normal levels.

![image](https://user-images.githubusercontent.com/634312/67405112-d7c50b00-f5a3-11e9-96a7-9ed8db243956.png)

You can see how the RAM is eaten up first (from 50% to 80%) during the first cycle, then shortly after the second cycle starts, it eats the last bit of safe RAM (from 80% to 85%) and then switches to consuming swap (from 20% to 80%) until stopped. Finally, it ticks up again at a consistent rate about 15 minutes before the end of the graph, which is where I started playback again.

Note, as far as I can tell, **pausing** playback in the Mopidy/moped web interface has the same effect as **stopping** it in this regard, i.e. it stops eating memory.

Host platform is Raspbian on a RasPi 3B v1.2:

    Linux lucas-audio 4.19.66-v7+ #1253 SMP Thu Aug 15 11:49:46 BST 2019 armv7l GNU/Linux

It is possible that this issue is related to either #1750 (most likely) or #1648 (less likely).
is it possible to change the shuffle function?

When i select a track for "play next", the shuffle function doesnt play the track next but a diffrent one.
i would like to use shuffle, select a song for next, the songs gets played and shuffle resumes.

Thank you
It will be very useful to have a way to assign a custom image to those personal playlists or artists without image.
mopidy-tunein > By Location > Asia > South Korea > CBS 뮤직 FM `tunein:station:s14584` freezes mopidy silently.

![2019-05-14_Tue_14:03:43](https://user-images.githubusercontent.com/748856/57824571-74ee6d00-77d6-11e9-8d6f-4e6f1fd2758d.jpg)

It seems that non-existent mms URLs from tunein make mopidy freeze for a few minutes.
There needs to be a way to wait for mms asynchronously.