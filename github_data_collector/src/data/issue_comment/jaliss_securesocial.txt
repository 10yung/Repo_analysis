According to maven the latest version of secure social only supports Play 2.6.  It seems as though a new version from the master branch is needed.

https://mvnrepository.com/artifact/ws.securesocial/securesocial_2.11
https://github.com/jaliss/securesocial/blob/master/ChangeLog

I was looking at adding secure social to a play 2.6 web app but the documentation is not clear on which version of secure social should be used.

http://www.securesocial.ws/guide/getting-started.html

```
Versions
Stable
2.1.4 for Play 2.2.x
2.1.1 for Play 2.1.x
2.0.13 for Play 2.0.6
0.2.6 for Play 1: available via the official Play module repository and under the 1.x branch on GitHub.
Snapshots
SecureSocial for Play 2.3.x is built from master
SecureSocial for Play 2.2.x is built from master-play-2.2.x
Note: you can use snapshots to get access to the latest changes but keep in mind that things might break there.
```

When trying to use the SS views in my Java play implementation, I get the following templating error:

ambiguous implicit values:
 both method requestHeader in object PlayMagicForJava of type => play.api.mvc.RequestHeader
 and value request of type play.api.mvc.RequestHeader
 match expected type play.api.mvc.RequestHeader

Are there any known solutions?

* `org.apache.commons.lang3.reflect.TypeUtils` is no longer a dependency
* most changes related to `play.libs.concurrent.HttpExecution.defaultContext` no longer available 

lets keep this PR open while 2.7 is not released
Is there any persistent implementation of UserService available?  The only implementation I saw was the in-memory version from the demo.  Implementing UserService myself makes me nervous as a bug in e.g. link() could be a serious vulnerability.
For a few months we've had issues with a small number of users unable to login via facebook. We haven't been able to recreate this, and I'm going to guess 99% of users don't have this issue. It is definitely only a sub-set of users.

I've got the output from our logs as 
`May 06 14:12:40 doarama app/web.1:  play.api.libs.json.JsResultException: JsResultException(errors:List((,List(ValidationError(error.expected.jsstring,WrappedArray()))))) 
May 06 14:12:40 doarama app/web.1:  	at play.api.libs.json.JsValue$$anonfun$2.apply(JsValue.scala:64) 
May 06 14:12:40 doarama app/web.1:  	at play.api.libs.json.JsValue$$anonfun$2.apply(JsValue.scala:64) 
May 06 14:12:40 doarama app/web.1:  	at play.api.libs.json.JsResult$class.fold(JsResult.scala:71) 
May 06 14:12:40 doarama app/web.1:  	at play.api.libs.json.JsError.fold(JsResult.scala:10) 
May 06 14:12:40 doarama app/web.1:  	at play.api.libs.json.JsValue$class.as(JsValue.scala:62) 
May 06 14:12:40 doarama app/web.1:  	at play.api.libs.json.JsUndefined.as(JsValue.scala:94) 
May 06 14:12:40 doarama app/web.1:  	at securesocial.core.providers.FacebookProvider.fillProfile(FacebookProvider.scala:80) 
May 06 14:12:40 doarama app/web.1:  	at securesocial.core.IdentityProvider$$anonfun$authenticate$2.apply(IdentityProvider.scala:79) 
May 06 14:12:40 doarama app/web.1:  	at securesocial.core.IdentityProvider$$anonfun$authenticate$2.apply(IdentityProvider.scala:77) 
May 06 14:12:40 doarama app/web.1:  	at scala.util.Either.fold(Either.scala:98) 
May 06 14:12:40 doarama app/web.1:  	at securesocial.core.IdentityProvider.authenticate(IdentityProvider.scala:75) 
May 06 14:12:40 doarama app/web.1:  	at securesocial.controllers.ProviderController$$anonfun$handleAuth$1.apply(ProviderController.scala:92) 
May 06 14:12:40 doarama app/web.1:  	at securesocial.controllers.ProviderController$$anonfun$handleAuth$1.apply(ProviderController.scala:88) 
May 06 14:12:40 doarama app/web.1:  	at play.api.mvc.ActionBuilder$$anonfun$apply$10.apply(Action.scala:221) 
May 06 14:12:40 doarama app/web.1:  	at play.api.mvc.ActionBuilder$$anonfun$apply$10.apply(Action.scala:220) 
May 06 14:12:40 doarama app/web.1:  	at play.api.mvc.Action$.invokeBlock(Action.scala:357) 
May 06 14:12:40 doarama app/web.1:  	at play.api.mvc.ActionBuilder$$anon$1.apply(Action.scala:309) 
May 06 14:12:40 doarama app/web.1:  	at play.api.mvc.Action$$anonfun$apply$1$$anonfun$apply$4$$anonfun$apply$5.apply(Action.scala:109) 
May 06 14:12:40 doarama app/web.1:  	at play.api.mvc.Action$$anonfun$apply$1$$anonfun$apply$4$$anonfun$apply$5.apply(Action.scala:109) 
May 06 14:12:40 doarama app/web.1:  	at play.utils.Threads$.withContextClassLoader(Threads.scala:18) 
May 06 14:12:40 doarama app/web.1:  	at play.api.mvc.Action$$anonfun$apply$1$$anonfun$apply$4.apply(Action.scala:108) 
May 06 14:12:40 doarama app/web.1:  	at play.api.mvc.Action$$anonfun$apply$1$$anonfun$apply$4.apply(Action.scala:107) 
May 06 14:12:40 doarama app/web.1:  	at scala.Option.map(Option.scala:145) 
May 06 14:12:40 doarama app/web.1:  	at play.api.mvc.Action$$anonfun$apply$1.apply(Action.scala:107) 
May 06 14:12:40 doarama app/web.1:  	at play.api.mvc.Action$$anonfun$apply$1.apply(Action.scala:100) 
May 06 14:12:40 doarama app/web.1:  	at play.api.libs.iteratee.Iteratee$$anonfun$mapM$1.apply(Iteratee.scala:481) 
May 06 14:12:40 doarama app/web.1:  	at play.api.libs.iteratee.Iteratee$$anonfun$mapM$1.apply(Iteratee.scala:481) 
May 06 14:12:40 doarama app/web.1:  	at play.api.libs.iteratee.Iteratee$$anonfun$flatMapM$1.apply(Iteratee.scala:517) 
May 06 14:12:40 doarama app/web.1:  	at play.api.libs.iteratee.Iteratee$$anonfun$flatMapM$1.apply(Iteratee.scala:517) 
May 06 14:12:40 doarama app/web.1:  	at play.api.libs.iteratee.Iteratee$$anonfun$flatMap$1$$anonfun$apply$13.apply(Iteratee.scala:493) 
May 06 14:12:40 doarama app/web.1:  	at play.api.libs.iteratee.Iteratee$$anonfun$flatMap$1$$anonfun$apply$13.apply(Iteratee.scala:493) 
May 06 14:12:40 doarama app/web.1:  	at scala.concurrent.impl.Future$PromiseCompletingRunnable.liftedTree1$1(Future.scala:24) 
May 06 14:12:40 doarama app/web.1:  	at scala.concurrent.impl.Future$PromiseCompletingRunnable.run(Future.scala:24) 
May 06 14:12:40 doarama app/web.1:  	at akka.dispatch.TaskInvocation.run(AbstractDispatcher.scala:42) 
May 06 14:12:40 doarama app/web.1:  	at akka.dispatch.ForkJoinExecutorConfigurator$AkkaForkJoinTask.exec(AbstractDispatcher.scala:386) 
May 06 14:12:40 doarama app/web.1:  	at scala.concurrent.forkjoin.ForkJoinTask.doExec(ForkJoinTask.java:260) 
May 06 14:12:40 doarama app/web.1:  	at scala.concurrent.forkjoin.ForkJoinPool$WorkQueue.runTask(ForkJoinPool.java:1339) 
May 06 14:12:40 doarama app/web.1:  	at scala.concurrent.forkjoin.ForkJoinPool.runWorker(ForkJoinPool.java:1979) 
May 06 14:12:40 doarama app/web.1:  	at scala.concurrent.forkjoin.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:107) 
May 06 14:12:40 doarama app/web.1:  [error] application - [securesocial] error retrieving profile information from Facebook `

Any idea on why only some accounts would be erroring with this issue?



Existing documentation states that play-mailer is used, and that smtp configuration should go in "smtp" section of securesocial.conf. However, it looks like the current solution is to put it in "play.mailer" section of application.conf.
Most `IdentityProvider`s are self-contained, only depending on bits and pieces of Play.

I propose breaking out the self-contained parts of `module-code` out into a `securesocial-core`, then abstracting the bits of Play that are actually required (configuration, HTTP, caching, localization) into adapters that can bridge the gap from different versions of play (and different libraries entirely).

Given the recent `2.1.4-for-play24`, it seems like this will become more important as Play continues to evolve, since specialized adapter code would be able to be defined in the consumer's project, the different versions of `securesocial-core` being versioned completely separate from Play.

This is just a proposal, I'm curious to see how many would be interested in something like this.

v3.0-M4 java templating doesn't appear to work if you want to reuse existing securesocial templates like provider.scala.html or main.scala.html (although most would provide their own main view), as these both require an implicit play.api.i18n.Messages object as an input. This implicit Messages var conflicts with the Java play.i18n.Messages implictMessages variable passed into templates by PlayMagicForJava. It can't be made explicit (as then the method signature in the ViewTemplates subclass conflicts with the superclass, causing a compile error). This is pretty serious issue, because Messages need to be passed to basically every view template, and with securesocial pasing them implicitly they conflict with the play framework Messages in java (also passed implicitly but through a slightly different namespace). With this issue, I can't see an obvious way to get customised views working for v3.0-M4 for Java developers.  Customising views apparently works for scala, and I believe this is because play for scala uses play.i18n.Messages not play.api.i18n.Messages.  Play Java automatically uses PlayMagicForJava to convert explicit and implicit vars between java and scala objects for view templates, so it's not possible to avoid this namespace / scope collision.

There must be an explicit / implicit var structure for view templates that allows customisation in both scala and java.

see also https://github.com/jaliss/securesocial/issues/464
