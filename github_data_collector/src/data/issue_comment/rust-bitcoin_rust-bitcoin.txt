I likely missed some constant uses but this is a start.
Resolves https://github.com/rust-bitcoin/rust-bitcoin/issues/384

Tests generated manually in Core.

I can add more tests and dedup the strings a bunch once approach is agreed upon.
`hash_newtype!` from bitcoin hashes was not available for the projects using rust-bitcoin. This PR fixes the issue by re-exporting the required set of macros, which allows to avoid direct dependency on bitcoin_hashes in downstream projects. The PR depends on https://github.com/rust-bitcoin/bitcoin_hashes/pull/71 and may be merged only after it (the dependency path should be updated in Cargo.toml)
Introduces functions to compute bitcoin hashes for `PublicKey` and `Script` which were strangely missed out
I know that we do plan to utilize miniscript as much as possible, but as an intermediate step I propose to sort out some code duplication issues. Right now, we had script generation logic in `address::Payload`, which was a duplication of the same code in `Script` class. With this PR I have:
* moved all logic to `Builder`, which seemed to be a more appropriate location
* added `P2PK` generation logic
* added test cases
* sorted out unnecessary usage of `HashEngine` where `hash` function of the new hash types can be used instead
I'd like to take a crack at this as a "good first issue"
Two distinct structs share the same name: `bitcoin_hashes::PublicKey` and `bitcoin::util::key::PublicKey`. The first one is re-exported by the bitcoin crate, creating confusion and necessity to use `as` for importing when both of them are used in the same mod. 

I propose to rename one of the structs to avoid the confusion. I have already done it in my local branch, renaming `bitcoin::util::key::PublicKey` into `BitcoinPubkey`, so I can PR this version if you will accept this idea. 
This removes the hex dependecy from the tests.
I had to leave the `hex_hash!` macro because here https://github.com/rust-bitcoin/rust-bitcoin/blob/master/src/util/bip143.rs#L143 I needed to use that instead of `SigHash::from_hex` because the latter requires the hex to be in reverse ordering.

FYI currently even non tests will build `hex` because of `#[cfg(any(test, feature = "serde"))] extern crate hex;`

Closes #332
For convenience, added links to the `CHANGELOG.md` and `LICENSE` that are referenced in `README.md`.
Fixes #374 

The `Deserialize` impls generated by `serde_struct_impl` and `serde_struct_human_string_impl` need to be able to handle serialization formats which serialize structs as sequences (such as bincode).

This PR adds `visit_seq` methods to the `Visitor` types defined by these macros, in addition to the existing `visit_map` methods. The implementation is taken directly from the serde docs: https://serde.rs/deserialize-struct.html