## Expected behaviour

`<meta property="og:type" content="article" />`

Tell us what you would expect the html-webpack-plugin should.

## Current behaviour
`<meta name="og:type" content="article" />`

Tell us what the html-webpack-plugin does instead.

## Environment

Tell us which operating system you are using, as well as which versions of Node.js, npm, webpack, and html-webpack-plugin. Run the following to get it quickly:

```
node -e "var os=require('os');console.log('Node.js ' + process.version + '\n' + os.platform() + ' ' + os.release())"
npm --version
npm ls webpack
npm ls html-webpack-plugin
```
```
Node.js v10.16.2
darwin 19.2.0
npm 6.13.2

├─┬ @vue/cli-plugin-babel@4.1.1
│ └── webpack@4.41.2 
├─┬ @vue/cli-plugin-eslint@4.1.1
│ └── webpack@4.41.2  deduped
└─┬ @vue/cli-service@4.1.1
  └── webpack@4.41.2  deduped

└─┬ @vue/cli-service@4.1.1
  └── html-webpack-plugin@3.2.0 
```


## Expected behaviour

in html, Can inject cdn dynamically through htmlWebpackPlugin.options

## Current behaviour

it not work


### Config

Copy the minimal `webpack.config.js` to produce this issue:


```js
module.exports = {
  chainWebpack: config => {
     config
      .plugin('html')
      .use(HtmlWebpackPlugin)
      .tap(options => {
        options.cdn = ['production', 'stage'].includes(process.env.NODE_ENV) ? cdn['build'] : cdn['dev']
        return options
      })
  }
}
```


```html
<% for (var i in htmlWebpackPlugin.options.cdn&&htmlWebpackPlugin.options.cdn.js) { %>
    <script src="<%= htmlWebpackPlugin.options.cdn.js[i] %>"></script>
    <% } %>
```

i don't know if delete preload caused it . 
i delete reload, because htmlWebpackPlugin4.x  seems to be in conflict with preload




based on #1263 
## Expected behaviour

Pass my `branch` variable to my `public/index.html` template.

## Current behaviour

Works with builds:

```text
webpack --env production
webpack --env development
```

But ReferenceError with the `start` script from `react-scripts`:

```text
react-scripts start
```

```text
Html Webpack Plugin:
  ReferenceError: branch is not defined
  - index.html:100 
    C:/Users/Mathieu/Workspace/dydu-bliss/public/index.html:100:11
  - index.html:109 ./node_modules/html-webpack-plugin/lib/loader.js!./public/index.html.module.exports
    C:/Users/Mathieu/Workspace/dydu-bliss/public/index.html:109:3
  - index.js:407 
    [dydu-bliss]/[html-webpack-plugin]/index.js:407:16
  - runMicrotasks
  - task_queues.js:97 processTicksAndRejections
    internal/process/task_queues.js:97:5
  - async Promise.all
```
## Environment

Windows 10

```
$ node --version
v13.3.0
```
```
$ npm --version
6.13.4
```
```
$ npm ls webpack html-webpack-plugin
`-- react-scripts@3.3.0
  +-- html-webpack-plugin@4.0.0-beta.5 
  `-- webpack@4.41.2 
```

### Config

#### `webpack.config.js`

```js
const path = require('path');
const Copy = require('copy-webpack-plugin');
const GitRevision = require('git-revision-webpack-plugin');
const Html = require('html-webpack-plugin');
const Unminified = require('unminified-webpack-plugin');


module.exports = environment => {

  const isProduction = environment === 'production';
  const branch = new GitRevision({branch: true}).branch();

  process.env.BABEL_ENV = environment;
  process.env.NODE_ENV = environment;

  return {
    bail: true,
    devtool: 'source-map',
    entry: path.resolve(__dirname, 'src/index.js'),
    mode: isProduction ? 'production' : 'development',
    module: {
      rules: [{
        include: path.resolve(__dirname, 'src/'),
        loader: 'babel-loader',
        options: {
          cacheCompression: isProduction,
          cacheDirectory: true,
          compact: isProduction,
          plugins: [
            '@babel/plugin-proposal-class-properties',
          ],
          presets: [
            '@babel/preset-env',
            '@babel/preset-react',
          ],
          sourceMaps: false,
        },
        test: /\.js$/,
      }],
      strictExportPresence: true,
    },
    output: {
      filename: 'bundle.min.js',
      path: path.resolve(__dirname, 'build/'),
    },
    plugins: [
      new Copy([path.resolve(__dirname, 'public/')], {ignore: ['index.html']}),
      new Html({
        hash: true,
        template: path.resolve(__dirname, 'public/index.html'),
        templateParameters: {branch},  // NOTE: I also tried with a function
      }),
      new Unminified(),
    ],
  };
};
```

#### `public/index.html`

```html
<!DOCTYPE html>
<html lang="en">
  <head />
  <body>
    <img src="https://path.to.git.repository.tld/user/project/commits/<%= branch %>/coverage.svg" />
  </body>
</html>
```
I am doing some test case, and webpack.config.js is below
<pre>
const webpack = require('webpack');
const path = require('path');
const HtmlWebpackPlugin = require('html-webpack-plugin');

module.exports = {
	devtool: false,
	entry: path.join(__dirname, './src/index.js'),
	output: {
		path: path.resolve(__dirname, 'static'),
		filename: 'bundle.js',
		// publicPath: '/'
	},
	mode: 'development',
	module: {
		rules:[
			{
				test: /\.js$/,
				use: './test-loader.js'
			}
		]
	},
	resolveLoader: {
		// modules: [__dirname]
	},
	devServer: {
		port: 9000,
		// contentBase: false,
		contentBase: false,
		publicPath: '/',
	},
	// plugins: [
	// 	new HtmlWebpackPlugin()
	// ]
}
</pre>
and i found that the contentBase setting in devServer doesn't work, but when i comment out the plugins settings, it works. Can anyone explain this or there's something wrong with my usage?
Hoping for your reply.
`options.chunks` and `options.excludeChunks` support RegExp and Function
**Is your feature request related to a problem? Please describe.**
In VUE, when I use multi-page mode, "chunks" are not injected into HTML. 

**Describe the solution you'd like**
I checked the source code of the installation package and learned from the source code that the current filtering of chunks is an exact match. I hope I can improve the current method and add more matching methods, such as:

```js
  filterChunks (chunks, includedChunks, excludedChunks) {
    return chunks.filter(chunkName => {
      // Skip if the chunks should be filtered and the given chunk was not added explicity
      if (Array.isArray(includedChunks) && includedChunks.indexOf(chunkName) === -1) { // chunks: Array
        return false;
      } else if (includedChunks instanceof RegExp) { // chunks: RegExp
        return includedChunks.test(chunkName);
      } else if (typeof includedChunks === 'function') { // chunks: Function
        return includedChunks(chunkName);
      }
      // if (Array.isArray(includedChunks) && includedChunks.indexOf(chunkName) === -1) {
      //   return false;
      // }

      // Skip if the chunks should be filtered and the given chunk was excluded explicity
      if (Array.isArray(excludedChunks) && excludedChunks.indexOf(chunkName) !== -1) { // chunks: Array
        return false;
      } else if (excludedChunks instanceof RegExp) { // chunks: RegExp
        return !excludedChunks.test(chunkName);
      } else if (typeof excludedChunks === 'function') { // chunks: Function
        return excludedChunks(chunkName);
      }
      // if (Array.isArray(excludedChunks) && excludedChunks.indexOf(chunkName) !== -1) {
      //   return false;
      // }
      // Add otherwise
      return true;
    });
  }
```
 

**Describe alternatives you've considered**
A clear and concise description of any alternative solutions or features you've considered.

**Additional context**
Add any other context or screenshots about the feature request here.

This is effectively just https://github.com/jantimon/html-webpack-plugin/issues/1150 but I'm opening a new issue since I can't comment on closed issues in this repo. I filed https://github.com/webpack/webpack/issues/10094 which I understand to be a blocker for working on this. 

Hopefully, folks wanting this feature will find this issue first and understand the current blockers.

Past issues:
- https://github.com/jantimon/html-webpack-plugin/issues/1150
- https://github.com/jantimon/html-webpack-plugin/issues/934
## Expected behaviour
Should compile cleanly

## Current behaviour
Plugin causes webpack (5) to throw/crash on incremental compile while in watch mode.   Initial compile seems to run fine, but update to source code that results in attempt to incrementally recompile causes the following error:

```
TypeError: Cannot read property 'get' of undefined
    at /home/someone/project/node_modules/html-webpack-plugin/lib/compiler.js:341:38
    at Array.some (<anonymous>)
    at isChildCompilerCacheOutdated (/home/someone/project/node_modules/html-webpack-plugin/lib/compiler.js:340:59)
    at Object.hasOutDatedTemplateCache (/home/someone/project/node_modules/html-webpack-plugin/lib/compiler.js:321:16)
    at /home/someone/project/node_modules/html-webpack-plugin/index.js:135:25
    at Hook.eval [as call] (eval at create (/home/someone/project/node_modules/webpack/node_modules/tapable/lib/HookCodeFactory.js:19:10), <anonymous>:5:1)
    at Compiler.newCompilation (/home/someone/project/node_modules/webpack/lib/Compiler.js:857:30)
    at /home/someone/project/node_modules/webpack/lib/Compiler.js:898:29
    at Hook.eval [as callAsync] (eval at create (/home/someone/project/node_modules/webpack/node_modules/tapable/lib/HookCodeFactory.js:33:10), <anonymous>:4:1)
    at Compiler.compile (/home/someone/project/node_modules/webpack/lib/Compiler.js:893:28)
    at /home/someone/project/node_modules/webpack/lib/Watching.js:111:19
    at Hook.eval [as callAsync] (eval at create (/home/someone/project/node_modules/webpack/node_modules/tapable/lib/HookCodeFactory.js:33:10), <anonymous>:4:1)
    at /home/someone/project/node_modules/webpack/lib/Watching.js:65:33
    at /home/someone/project/node_modules/webpack/lib/HookWebpackError.js:69:3
    at Hook.eval [as callAsync] (eval at create (/home/someone/project/node_modules/webpack/node_modules/tapable/lib/HookCodeFactory.js:33:10), <anonymous>:4:1)
    at Cache.endIdle (/home/someone/project/node_modules/webpack/lib/Cache.js:140:22)
    at Watching._go (/home/someone/project/node_modules/webpack/lib/Watching.js:63:23)
    at Watching._invalidate (/home/someone/project/node_modules/webpack/lib/Watching.js:238:9)
    at /home/someone/project/node_modules/webpack/lib/Watching.js:202:11
    at Watchpack.<anonymous> (/home/someone/project/node_modules/webpack/lib/node/NodeWatchFileSystem.js:85:4)
    at Object.onceWrapper (events.js:300:26)
    at Watchpack.emit (events.js:210:5)
    at Watchpack._onTimeout (/home/someone/projectg/node_modules/webpack/node_modules/watchpack/lib/watchpack.js:297:8)
    at listOnTimeout (internal/timers.js:531:17)
    at processTimers (internal/timers.js:475:7)
```


## Environment
Tell us which operating system you are using, as well as which versions of Node.js, npm, webpack, and html-webpack-plugin. Run the following to get it quickly:
node v13.2.0
ubuntu 18.04
npm 6.13.1
webpack 5.0.0-beta.7
html-webpack-plugin 4.0.0-beta.11


### Config
```
const webpack = require('webpack');
const HtmlWebpackPlugin = require('html-webpack-plugin');
const MiniCssExtractPlugin = require('mini-css-extract-plugin');
const appRoot = require('app-root-path');

// place where our views will go
const VIEWS_DEST_DIR = appRoot + '/dist/backend/views';

// place where our Handlebars view root is
const HANDLEBARS_VIEWS = appRoot + '/src/backend/views';

module.exports = {

  mode: 'development',

  entry: {app: './src/frontend/entrypoint/app.js'},

  output: {
    path: appRoot + '/dist/frontend-serve',
    publicPath: '/',
    filename: '[name].js',
  },


  resolve: {
    modules: [`${appRoot}/src`, 'node_modules'],

    extensions: ['.mjs', '.js', '.jsx'],

  },

  module: {
    rules: [
      // .mjs needed for https://github.com/graphql/graphql-js/issues/1272
      {
        test: /\.mjs$/,
        include: /node_modules/,
        type: 'javascript/auto'
      },
      // All files with a '.js' or '.jsx' extension will be handled by 'babel-loader'
      {
        test: /\.jsx?$/,
        exclude: [/node_modules/],
        use: {
          loader: 'babel-loader',
          options: {
            presets: [
              ['@babel/preset-env', {
                targets: {"browsers": ["last 2 versions"]},
                modules: false,         // don't let the "env" preset mess with module imports (tree-shaking)
              },
              ],
              '@babel/preset-react', '@babel/preset-flow'
            ],

  
            plugins: [
              "babel-plugin-styled-components",
              [
                "@babel/plugin-transform-runtime",
                {
                  "helpers": true,
                  "regenerator": true,
                  "useESModules": false,
                }
              ],
              ["@babel/plugin-proposal-class-properties", {"loose": false}],
            ],
          }
        }
      },

      {
        test: /\.html$/,
        use: {
          loader: 'html-loader'
        }
      },

      {
        test: /\.(png|jpe?g|gif|svg|woff|woff2|ttf|eot|ico)$/,
        use: {
          loader: 'file-loader?name=assets/[name].[ext]'
        }
      },

      {
        test: /\.css$/,
          use: [
            MiniCssExtractPlugin.loader,
            "css-loader",
          ],
      },

      {
        test: /\.(sass|scss)$/,
        use: [
          MiniCssExtractPlugin.loader,
          'css-loader', 'sass-loader',
        ],
      },
    ]
  },

  plugins: [
    //
    // our app's page
    //
    new HtmlWebpackPlugin({
      template: 'src/backend/views/pages/app.hbs',
      filename: `${VIEWS_DEST_DIR}/app.hbs`,
    }),

    // in production we cache-bust
    new MiniCssExtractPlugin({ filename: '[name].css' }),

  ],

};
```

