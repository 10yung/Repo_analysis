DEBUG_RESOLVER is used in RubyGems too. So we can't enable it only for
Bundler.

### What was the end-user problem that led to this PR?

The problem was not the end-user problem. It's a developer problem.

### What was your diagnosis of the problem?

My diagnosis was RubyGems also uses `DEBUG_RESOLVER` environment variable. So we can't use `DEBUG_RESOLVER` environment variable to enable debug mode only for Bundler. We can use `DEBUG_RESOLVER_TREE` instead of `DEBUG_RESOLVER` only for `Bundler::Resolver`. But we can't do it for `Bundler::GemVersionPromoter`.

### What is your fix for the problem, implemented in this PR?

My fix adds `BUNDLER_` prefix to `DEBUG_RESOLVER` and `DEBUG_RESOLVER_TREE` like other environment variables for Bundler such as `BUNDLER_EDITOR` do.

### Why did you choose this fix out of the possible options?

I chose this fix because adding prefix is a common way. Bundlerd Molinillo and Thor also use this way such as `MOLINILLO_DEBUG` and `THOR_SHELL`.

Closes #7586. 

### What was the end-user problem that led to this PR?

The problem was that ruby 2.3 reached its end of life almost a year ago and we still support it.

### What was your diagnosis of the problem?

My diagnosis was that we should drop support.

### What is your fix for the problem, implemented in this PR?

My fix is to drop support.

### Why did you choose this fix out of the possible options?

I chose this fix because it's part of our ruby support policy. 

We should migrate our current TravisCI configuration to Github Actions, so that we have a single CI system.
I'd like to drop support for ruby 2.3, maybe in the upcoming 2.2 release, maybe right after.
I want to make sure everything is good in ruby 2.7 before the next release.
Hey, I have an offline installation of ruby and required ruby gems where I ran into a problem.

I am preparing the installation on an online server, and then copy all the gems to the offline production server.

I used `bundle package --all` to create a `vendor/cache` folder containing all the gems I need. 

Unfortunately Bundler itself is missing. I am adding Bundler gem to the Gemfile to force it, but it did not work for me. 

Is this a bug, or is there a way, forcing it to save bundler as well in the cache?

Example project:

Gemfile:
```
source "https://rubygems.org"

gem "bundler"
```

Command:

```
$ bundle update --bundler
Using bundler 2.1.2
Warning: the lockfile is being updated to Bundler 2, after which you will be unable to return to Bundler 1.
Bundle updated!


$ bundle package
Using bundler 2.1.2
Bundle complete! 1 Gemfile dependency, 1 gem now installed.
Use `bundle info [gemname]` to see where a bundled gem is installed.
Updating files in vendor/cache

$ ls -la vendor/cache
total 0
```

I prefer if Bundler can help me maintain all ruby dependencies. I realize I have to install it myself on the offline server to make `bundle install` work, but I still prefer the simple maintenance of putting bundler into the gemfile.

What would be the best current option for me?
In the process of updating GitHub for #7577, I discovered that CodeClimate is still configured for `bundler/bundler`. If someone sets up `rubygems/bundler` on CodeClimate (I'm not sure if there's a way to tell them a repo has moved, or if you just need to set it up again), I can update the link. :+1: 
This PR is a reintroduction of #7215, now that I consider the multiplatform feature usable enough.

### What was the end-user problem that led to this PR?

The problem was that currently if the gemfile include gems for specific platforms, like the default `gem 'tzinfo-data', platforms: [:mingw, :mswin, :x64_mingw, :jruby]` Rails uses, bundler will always print a noisy warning, but I don't think users are doing anything wrong, just running `bundle install` on it.

Also, unless they run `bundle lock --add-platform x86-mingw32 x86-mswin32 x64-mingw32 java`, and commit the resulting lockfile, they will continue to get the same warning over and over again.

### What was your diagnosis of the problem?

My diagnosis is that the fact that some gems will be unused under some platforms is inherent to the multiplatform feature itself, so we shouldn't warn about it because it's expected.

Take the following Gemfile for example (a simplification of the default Gemfile Rails generators create):

```ruby
source "https://rubygems.org"

gem "rails"

gem "tzinfo-data", platforms: "jruby"
```

If I type that Gemfile, it means that I'm explicitly opting into the multiplatform feature. So the behavior I would want as a user when I run `bundle install` on it is:

* Resolve and lock the Gemfile for all platforms (`jruby` and whatever platform I'm running).
* Install the resolution for the platform that I'm currently running.

That way, when the other developers of my team using `jruby` install the `Gemfile`, they install a predictable, deterministic resolution.

Currently, the only way to get that behavior is to run:

```
$ bundle install
$ bundle lock --add-platform java
```

But there's no way to do it without getting a warning on the first `bundle install`, which annoys people because it makes you think you're doing something wrong.

If you only plan to use MRI, you shouldn't specify any jruby-specific gems in your Gemfile and write instead:

```ruby
source "https://rubygems.org"

gem "rails"
```

If on the other hand you only plan to use jruby, then you should not specify any `platform` option at all and write

```ruby
source "https://rubygems.org"

gem "rails"

gem "tzinfo-data"
```

So, to sum up, I think the range of platforms users expect to support can be guessed implicit from the Gemfile and the running platform. So we should resolve by default for all those platforms and don't warn about behavior that's most likely expected.

### What is your fix for the problem, implemented in this PR?

My fix is to do the right thing by default, and not warn users at all. That is:

* Resolve the gemfile and lock it for all platforms present in the Gemfile.
* Install gems for the current platform if requested.

### Why did you choose this fix out of the possible options?

I chose this fix because I think it's better for our users. We currently have a specific setting to avoid this warning, which I guess we added given the complaints. We no longer need that setting, nor the warning, so I removed both.
I have a Gemfile that specifically lists a Ruby version & engine.

i.e.
```ruby
ruby '2.3.3', engine: 'jruby', engine_version: 9.1.17.0
```

I know this gem however works with non-JRuby and I'd like to test it on MRI.
However when I execute `bundle` it gives me the error:
```
Your Ruby engine is ruby, but your Gemfile specified jruby
```

It would be great if there's a switch to control this.

If you are wondering then why are we specifying JRuby if I know it works on MRI ?
Well we want to avoid people accidentally writing MRI specific gems (that might use C-extensions) & also make sure we are testing each gem with the version of Ruby (JRuby) we use in our production environment.
### What was the end-user problem that led to this PR?

The problem was that the current PR template sometimes asks too many questions, and the answers are a bit artificial.

### What was your diagnosis of the problem?

My diagnosis was that experience tell me that some questions are too much, and a bit artificial to answer for many PRs.

### What is your fix for the problem, implemented in this PR?

My fix is to still let contributors know what kind of information we find valuable, but don't force all questions to be answered.