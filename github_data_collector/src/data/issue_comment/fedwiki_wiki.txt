Here we added a variation to `allowed` using the value `*`, to indicate that a wiki server will be started if a directory exists for the wiki.

A nicer looking error page is also added for when a wiki that is not allowed is accessed.
![Screenshot 2019-11-16 at 12 03 18](https://user-images.githubusercontent.com/1552489/68992860-1da28580-0869-11ea-8876-48cc91de012a.png)

`allow(host)` is also reworked for the combinations of `allowed` and `wikiDomains`. 

I wanted to see how this works, a friend recommended it. I don't want it installed "globally" on my system. So I ran `mkdir wiki && cd wiki && yarn install wiki` then `npx wiki`. Now I realise that this wiki created `~/.wiki/` and started storing data there.

In my opinion, this is extremely unexpected for an NPM package I just installed as a dependency. I realise that y'all are most likely imagining folks use the `npm -g i wiki` as a means of installing a system wide application.

I figured I'd share my feedback as otherwise there's no way for the authors to know. I'm very interested in the concept of the federated wiki and keen to explore the software further. This decision to immediately create files in `~/.wiki` has, in my personal case, significantly reduced my trust in running this software on my machine. I wonder what other traces this software will leave on my computer without my knowledge. My next thought is that I need to install a VM or docker container in order to be able to run this on my machine. That is probably a barrier that's too high for me to get to.

Please feel free to ignore this issue if you're not interested. A friend has been evangelising the wiki and I really love the concept. I'm now very reluctant to run it, and I wanted to share that feedback as maybe this information might lead to helping federated wiki gain adoption. I imagine that honest, independent user feedback is usually hard to get.

As a closing thought, I'd love to have some method of testing the wiki listed on the README that doesn't require a system wide install. That or a test that tries to determine is `wiki` installed globally or locally, and switches the data directories / etc as a result.

End of feedback. :-)
Example use case: I want to run be able to publish a blog piece using an instance of a fediverse blogging server like Hubzilla, Plume, or WriteAs, and have a copy of that text automatically added as a new page on an instance of FedWiki. The blogging server keeps the article in its original form, although edits may be made there after-the-fact to fix typos or factual errata, or add updates to the subject of the article, as in any other blogging system. Whereas the copy on the FedWiki server becomes a living document, updated and evolved over time, and available to be searched or mirrored across the FedWiki network, incorporated into larger sets of documents, and so on.
Asked about before but I keep falling into this trap.

- Taking live notes using wiki.
- Take screen shots to capture context
- Roughly about after adding the 3rd screen shot wiki loses the ability to save the live page to the server. 
- When this happens on ChromeOS I try to fork the live page, but the fork controls are out  apparently also out of memory

Is there any way to make wiki page memory more robust for normal users?
- Modern phones and laptops now have retina high resolution screens (that induces large images using memory)
- Could a new halo color indicate the page is out of memory (the page will save null before it can be backed up by overnight process).
- Could the page self-fork rather than commit page suicide...
- Could images automatically save a lower safer resolution....
- Just some ideas, because I think wiki needs to be more memory safe (ChromeOS does not have all the fancy of MacOS, Unix or Windows saving a local page copy to cache). Chromebooks are often a default option for schools. 

http://clive.tries.fed.wiki/view/wiki-devuser-video-chat-fed-20#
As a newbie, I'm not sure what behaviour I should expect when there's a field at the bottom of the window that says "search", as opposed to the link at the bottom of a wiki page that says "search".

If I stop and think about it these, the search field is beside the count of pages in the neighbourhood.  However, my newbie sense has become accustomed to the idea of Google Search, which might be different from the older idea of Yahoo Search that went into categories (i.e. YAHOO as a backronym for Yet Another Hierarchically Organized Oracle").

For a newbie, is "search" the right term for either the window search field, or the page bottom link?
Given that at Nov. 1, 2016, [StatCounter announced](http://gs.statcounter.com/press/mobile-and-tablet-internet-usage-exceeds-desktop-for-first-time-worldwide) ...

> Internet usage by mobile and tablet devices exceeded desktop worldwide for the first time in October according to independent web analytics company

... should we consciously be giving smartphone and tablet users more love, on federated wiki?  

The "How to Wiki" pages says ...

> Tip: Use arrow keys to scroll left and right.

... which isn't an affordance available on my Android smartphone or tablet.  The only control on a touch screen browser is the back button.
**Steps to reproduce:**

```
> git clone https://github.com/fedwiki/wiki.git $SOMEPATH
> cd $SOMEPATH
> docker-compose up -d --build
```

**Expected Result:**
Have a container of _wiki_web_ image running.

**Actual result:**
Container exited. Logs:

```
> docker logs $CONTAINERID
module.js:478
    throw err;
    ^

Error: Cannot find module 'coffee-script'
    at Function.Module._resolveFilename (module.js:476:15)
    at Function.Module._load (module.js:424:25)
    at Module.require (module.js:504:17)
    at require (internal/module.js:20:19)
    at Object.<anonymous> (/usr/src/app/index.js:3:1)
    at Module._compile (module.js:577:32)
    at Object.Module._extensions..js (module.js:586:10)
    at Module.load (module.js:494:32)
    at tryModuleLoad (module.js:453:12)
    at Function.Module._load (module.js:445:3)
```

**Additional information:**
I receive the following during the build process:

> npm WARN deprecated coffee-script@1.12.7: CoffeeScript on NPM has moved to "coffeescript" (no hyphen)
I've been pursuing a better way of drawing maps (vector images) for some time.

As of May 2017, draw.io moved to an Apache 2.0 license.  In August 2017, they released desktop versions to complement the browser-based versions that were previously free.  See my digest of these events at "[Draw.io open source](https://ingbrief.wordpress.com/2018/02/24/draw-io-open-source/)".

There's a repository for [jgraph/drawio](https://github.com/jgraph/drawio) on Github.

For Dokuwiki, I notice a [draw.io Pluign for DokuWiki](https://github.com/upputter/diagram) on Github, and a [2017-2018 forum discussion](https://forum.dokuwiki.org/thread/14664).  I haven't fully investigated these yet.

Instead of trying to replicate the rich functionality in draw.io, what would an integration with federated wiki look like?
## symptom

While working on the calendar plugin, I've tried to deploy a wiki from npm scopes.  I've published my forks as:

    @dobbse/wiki@v0.12.1-e
    @dobbse/wiki-plugin-calendar@v0.2.3-a

My custom `wiki` modifies `package.json` to point to my custom `wiki-plugin-calendar`.  All the interesting stuff is in calendar.

Wiki does not find my plugin when installed this way:

    $ npm install @dobbse/wiki@v0.12.1-e

I see that npm does install the scoped plugin:

    $ find node_modules -type d -name wiki-plugin-calendar
    node_modules/@dobbse/wiki/node_modules/@dobbse/wiki-plugin-calendar

`wiki --version` finds these plugins that start with c, notably excluding calendar:

    $ wiki --version | grep plugin-c
    wiki-plugin-calculator: 0.2.2
    wiki-plugin-changes: 0.2.5
    wiki-plugin-chart: 0.3.2
    wiki-plugin-code: 0.2.2

## cause

`npm install` puts my scoped package into a scoped directory tree which fails to match the filesystem glob that searches for plugins on disk.

In `cli.coffee`

    # starting at line 110:
    config = cc(argv,
    ...
      cc.env('wiki_'),
    ...
        packageDir: path.resolve(path.join(__dirname, 'node_modules'))

    # a little later on line 142:
      glob 'wiki-plugin-*', {cwd: config.packageDir}, (e, plugins) ->

Here we see that `--version` searches `config.packageDir` for folders starting with `wiki-plugin-`.  My scoped package landed in `@dobbse/wiki-plugin-calendar`.

The `@dobbse` scope hides my plugin from `--version`, and presumably from other places too.

## potential remedy

I propose to inspect `package.json` instead of file globbing.

Something like this would work for `--version`, though similar changes are needed elsewhere:

    require('./package').dependencies.keys.reduce(
      ((acc, name) -> acc[name] = require(name).version),
      {}
    )

## other things I notice

1. This area of code has been through some other issues:

    * [wiki: Move cli/farm into wiki-node](https://github.com/fedwiki/wiki/pull/13)

    * [wiki-server: Move cli/farm to wiki-node](https://github.com/fedwiki/wiki-server/pull/66)

    * [wiki-server: more specific annotation of json](https://github.com/fedwiki/wiki-server/pull/65)

2. Plugin management really wants to live in plugmatic.

    * [Maintaining a Custom Wiki](http://plugins.fed.wiki.org/view/maintaining-a-custom-wiki) mentions:
    "Warning: This workflow has proven to be unreliable and will be replaced by plugin support within wiki. It is left here for historical reference. See About Plugmatic Plugin"



There's a good chance I haven't discovered all the things tugging on this code, and warrants futher discussion.

I have been thinking about how people use wiki, as a broader technology. With the current federated wiki, the view is oriented towards two pages per screen.

An alternative view that is popular is kanban boards.  However, I am thinking about wiki as a horizontal application in the sense that Joel Spolsky describes spreadsheets in https://www.joelonsoftware.com/2012/01/06/how-trello-is-different/ .

Some people use Tiddlywiki for personal to-do lists. Federated wiki could be a shared to-do list, but it's rather heavy weight for that. Trello is popular, but somehow doesn't have the piecemeal growth feel that wiki technology does.