When trying to import a module via module::import I receive the following error message:
```r
Error in if (old_usage) { : argument is of length zero
```
I am using modules_0.9.11 (full sessionInfo() below).
I am suspecting it's got something to do with the new API (which is as I understand still in dev status, so I am using the syntax described on the master branch).

This is the actual line I am trying to run, followed by traceback of error message:
```r
autofd <- modules::import('fractal-analysis-processing')
Error in if (old_usage) { : argument is of length zero 
19.
wrap_usage(name, format_name, formals, old_usage = old_usage) 
18.
function_usage(x$alias, formals(x$value), identity, old_usage = old_usage) 
17.
object_usage.function(attr(block, "object"), old_usage = old_usage) 
16.
object_usage(attr(block, "object"), old_usage = old_usage) 
15.
topic_add_usage(rd, block, old_usage = global_options$old_usage) 
14.
block_to_rd(block, base_path, env, global_options) 
13.
roclet_process.roclet_rd(roclet, blocks = parsed$blocks, env = parsed$env, 
    base_path = dirname(module_path)) 
12.
roxygen2::roclet_process(roclet, blocks = parsed$blocks, env = parsed$env, 
    base_path = dirname(module_path)) 
11.
parse_documentation(namespace) 
10.
do_import(module, module_path, doc) 
9.
import_("./summaryFD") 
8.
eval(expr, p) 
7.
eval(expr, p) 
6.
eval.parent(call) 
5.
import("./summaryFD") at __init__.r#2
4.
eval(parse(module_path, encoding = "UTF-8"), envir = namespace) 
3.
eval(parse(module_path, encoding = "UTF-8"), envir = namespace) 
2.
do_import(module, module_path, doc) 
1.
modules::import_("fractal-analysis-processing") 


```
Thanks for your help!

```r
sessionInfo()
R version 3.6.1 (2019-07-05)
Platform: x86_64-apple-darwin15.6.0 (64-bit)
Running under: macOS Mojave 10.14.5

Matrix products: default
BLAS:   /System/Library/Frameworks/Accelerate.framework/Versions/A/Frameworks/vecLib.framework/Versions/A/libBLAS.dylib
LAPACK: /Library/Frameworks/R.framework/Versions/3.6/Resources/lib/libRlapack.dylib

locale:
[1] en_GB.UTF-8/en_GB.UTF-8/en_GB.UTF-8/C/en_GB.UTF-8/en_GB.UTF-8

attached base packages:
[1] stats     graphics  grDevices utils     datasets  methods   base     

loaded via a namespace (and not attached):
 [1] Rcpp_1.0.2           rstudioapi_0.10      xml2_1.2.2           roxygen2_6.1.99.9000 magrittr_1.5         getopt_1.20.3        tidyselect_0.2.5    
 [8] munsell_0.5.0        colorspace_1.4-1     R6_2.4.0             rlang_0.4.0          stringr_1.4.0        plyr_1.8.4           dplyr_0.8.3         
[15] tools_3.6.1          grid_3.6.1           data.table_1.12.2    gtable_0.3.0         lazyeval_0.2.2       assertthat_0.2.1     optparse_1.6.2      
[22] tibble_2.1.3         crayon_1.3.4         purrr_0.3.2          reshape2_1.4.3       ggplot2_3.2.1        glue_1.3.1           stringi_1.4.3       
[29] compiler_3.6.1       pillar_1.4.2         scales_1.0.0         pkgconfig_2.0.2  
```
What should the following code importing a nested module yield, and why?

```r
mod::use(./x)
x$a
x$b
x$c
```

###### `x.r`

```r
#' @export
a = 'x$a'

mod::use(./y[a, b, c, d])

b = 'x$b'

#' @export
c = 'x$c'

#' @export
mod::use(y = ./y[a = c, b])
```

###### `y.r`

```r
#' @export
a = 'y$a'

#' @export
b = 'y$b'

#' @export
c = 'y$c'

#' @export
d = 'y$d'
```
Using `modules` (which please please please change the name to not clash with [wahani/modules](https://github.com/wahani/modules)) makes RStudio's static analysis freak out. It seems unable to resolve symbols that `modules` is used to import.

For members of packages loaded with `attach = TRUE`, the linter says "no symbol named ..."

For a package `P` loaded with `attach = FALSE`, the linter will accept any name that comes after `P$`. It can't differentiate between `purrr$map2`, which is real, and `purrr$map3`, which doesn't exist.

Static analysis is, for me as a mere mortal, indispensable. Are other `modules` users simply going without?
Going forward, this package is intended to be used without being attached. It therefore can’t simply shadow the definition of `base::?` by exporting it.

Instead, consider providing an appropriate `.onLoad` hook that attaches a shim environment, similar to `devtools::load_all`.

In addition, this should hook into  {pkgload}’s `onLoad` and somehow patch `pkgload::insert_global_shims`, if possible without violating CRAN guidelines (note: we also need to do this for old versions of {devtools}).
Update the [Design rationale](/klmr/modules/wiki/Design-rationale):

* Add **illustration** of a complex project structure (e.g. `tree -d gatk/src/main/java/org`) to show why R packages fundamentally put an upper  bound on R project complexity. Show that current R packages lead to name conflicts (e.g. [{conflicted}](https://github.com/r-lib/conflicted)) and bad strategies to avoid them (e.g. `str_` prefix in {stringr} or `fct_`, `gss_`, `lvls_` prefixes in {forcats}).

* Add **justification**: does R *need* to support such complex projects? Well maybe not but in other aspects R software development is up there with the best (e.g. CI, documentation (esp vignettes!), testing, code coverage). Point to other domains where R is being refined (typing support? 

* Add **references**, e.g.:
  * [How to write a production-level code in Data Science?](https://towardsdatascience.com/how-to-write-a-production-level-code-in-data-science-5d87bd75ced) first point: “Keep it modular”
Coalesce the Wiki into a coherent document that can be generated via a vignette, and which serves as a blueprint of a potential paper (which obviously needs to be a drastically shortened version).

Points to address in a paper:

* [ ] Reproducibility (Jupyter, RMarkdown …) vs reusability
* [ ] Code modularisation
* [ ]  Typing and use of NSE
Use-cases:

1. `mod::use(str = stringr)` leads to redundant function prefixes: `str$str_match`, etc. Ideally there should be a way of importing them as `str$match` etc.
2. [Unify API naming conventions.](https://www.reddit.com/r/rstats/comments/8bh2la/package_to_give_consistent_function_and_variable/)
Is it possible, in the new syntax, to make mod::use(raster[crs]) also attach crs<-? I don't think klmr/modules, wahani/modules, or smbache/import can currently do anything like this.

Opening new issue as instructed in #129.
(Re)building the vignette `foreign-function-interface.rmd` occasionally results in the deletion of the `vignettes/rcpp` folder. This also causes `R CMD check` to fail.
Another thought: `module_file` should break with `system.file` and:

* allow an `ext` argument for file extensions
* never return `NA`, this is just not helpful
* potentially allow positional `exists`/`mustWork` to make sure a (part of a) path exists