```
[info] [error] java.lang.IllegalArgumentException: argument type mismatch
[info] [error]  at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
[info] [error]  at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
[info] [error]  at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
[info] [error]  at java.lang.reflect.Method.invoke(Method.java:498)
[info] [error]  at scala.reflect.runtime.JavaMirrors$JavaMirror$JavaVanillaMethodMirror3.jinvokeraw(JavaMirrors.scala:408)
[info] [error]  at scala.reflect.runtime.JavaMirrors$JavaMirror$JavaMethodMirror.jinvoke(JavaMirrors.scala:354)
[info] [error]  at scala.reflect.runtime.JavaMirrors$JavaMirror$JavaVanillaMethodMirror.apply(JavaMirrors.scala:370)
[info] [error]  at com.lucidchart.sbt.scalafmt.CachePlatform$.fileInfo(Platform.scala:24)
[info] [error]  at com.lucidchart.sbt.scalafmt.ScalafmtCorePlugin$autoImport$.$anonfun$scalafmtCoreSettings$12(ScalafmtCorePlugin.scala:113)
[info] [error]  at scala.collection.immutable.Map$EmptyMap$.getOrElse(Map.scala:104)
[info] [error]  at com.lucidchart.sbt.scalafmt.ScalafmtCorePlugin$autoImport$.$anonfun$scalafmtCoreSettings$11(ScalafmtCorePlugin.scala:113)
[info] [error]  at scala.collection.TraversableLike.$anonfun$map$1(TraversableLike.scala:237)
[info] [error]  at scala.collection.mutable.ResizableArray.foreach(ResizableArray.scala:62)
[info] [error]  at scala.collection.mutable.ResizableArray.foreach$(ResizableArray.scala:55)
[info] [error]  at scala.collection.mutable.ArrayBuffer.foreach(ArrayBuffer.scala:49)
[info] [error]  at scala.collection.TraversableLike.map(TraversableLike.scala:237)
[info] [error]  at scala.collection.TraversableLike.map$(TraversableLike.scala:230)
[info] [error]  at scala.collection.AbstractTraversable.map(Traversable.scala:108)
[info] [error]  at com.lucidchart.sbt.scalafmt.ScalafmtCorePlugin$autoImport$.$anonfun$scalafmtCoreSettings$4(ScalafmtCorePlugin.scala:111)
[info] [error]  at com.lucidchart.sbt.scalafmt.ScalafmtCorePlugin$autoImport$.$anonfun$scalafmtCoreSettings$4$adapted(ScalafmtCorePlugin.scala:88)
[info] [error]  at scala.Function1.$anonfun$compose$1(Function1.scala:49)
[info] [error]  at sbt.internal.util.$tilde$greater.$anonfun$$u2219$1(TypeFunctions.scala:62)
[info] [error]  at sbt.std.Transform$$anon$4.work(Transform.scala:67)
[info] [error]  at sbt.Execute.$anonfun$submit$2(Execute.scala:280)
[info] [error]  at sbt.internal.util.ErrorHandling$.wideConvert(ErrorHandling.scala:19)
[info] [error]  at sbt.Execute.work(Execute.scala:289)
[info] [error]  at sbt.Execute.$anonfun$submit$1(Execute.scala:280)
[info] [error]  at sbt.ConcurrentRestrictions$$anon$4.$anonfun$submitValid$1(ConcurrentRestrictions.scala:178)
[info] [error]  at sbt.CompletionService$$anon$2.call(CompletionService.scala:37)
[info] [error]  at java.util.concurrent.FutureTask.run(FutureTask.java:266)
[info] [error]  at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
[info] [error]  at java.util.concurrent.FutureTask.run(FutureTask.java:266)
[info] [error]  at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
[info] [error]  at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
[info] [error]  at java.lang.Thread.run(Thread.java:748)
[info] [error] (Compile / scalafmt / scalafmt) java.lang.IllegalArgumentException: argument type mismatch
```

### notes

In sbt 1.2.8, sbt.util.FileHashModified is private

```scala
private final case class FileHashModified(file: File, hash: List[Byte], lastModified: Long)
    extends HashModifiedFileInfo
```

There's a code in the plugin to break the privacy by using reflection:

https://github.com/lucidsoftware/neo-sbt-scalafmt/blob/e8aaaed6bc2dfb284bdb667e452f2520151eef26/sbt-scalafmt/src/main/scala-2.12/com/lucidchart/sbt/scalafmt/Platform.scala

```scala
  private[this] val fileHashModified = {
    val module = mirror.reflectModule(mirror.staticModule("sbt.util.FileHashModified"))
    mirror.reflect(module.instance).reflectMethod(module.symbol.info.decl(universe.TermName("apply")).asMethod)
  }

  def fileInfo(file: File, hash: List[Byte], lastModified: Long) =
    fileHashModified(file, hash, lastModified.asInstanceOf[AnyRef]).asInstanceOf[HashModifiedFileInfo]
```

In sbt 1.3.0, we are taking advantage of the privacy to change the class implementation as follows:

https://github.com/sbt/util/blob/v1.3.0-M9/util-cache/src/main/scala/sbt/util/FileInfo.scala#L40-L41

```scala
private final case class FileHashModified(file: File, hashArray: Array[Byte], lastModified: Long)
    extends HashModifiedFileInfo
```

Any plans to support https://github.com/scalameta/scalafmt/releases/tag/v2.0.0 ?
This was originally reported as https://github.com/sbt/sbt/issues/4525 by @zella 

## steps

1. git clone https://github.com/zella/sbt-issue
2. sbt run

## problem
```
[error] Caused by: java.lang.NoClassDefFoundError: scala/math/Ordering$$anon$9
[error]         at scala.tools.nsc.transform.LambdaLift$LambdaLifter.<init>(LambdaLift.scala:67)
[error]         at scala.tools.nsc.transform.LambdaLift.newTransformer(LambdaLift.scala:49)
[error]         at scala.tools.nsc.transform.Transform$Phase.apply(Transform.scala:30)
[error]         at scala.tools.nsc.Global$GlobalPhase.$anonfun$applyPhase$1(Global.scala:426)
[error]         at scala.tools.nsc.Global$GlobalPhase.applyPhase(Global.scala:419)
[error]         at scala.tools.nsc.Global$GlobalPhase.$anonfun$run$1(Global.scala:390)
[error]         at scala.tools.nsc.Global$GlobalPhase.$anonfun$run$1$adapted(Global.scala:390)
[error]         at scala.collection.Iterator.foreach(Iterator.scala:941)
[error]         at scala.collection.Iterator.foreach$(Iterator.scala:941)
[error]         at scala.collection.AbstractIterator.foreach(Iterator.scala:1429)
[error]         at scala.tools.nsc.Global$GlobalPhase.run(Global.scala:390)
[error]         at scala.tools.nsc.Global$Run.compileUnitsInternal(Global.scala:1446)
[error]         at scala.tools.nsc.Global$Run.compileUnits(Global.scala:1430)
[error]         at scala.tools.nsc.Global$Run.compileSources(Global.scala:1423)
[error]         at scala.tools.nsc.Global$Run.compile(Global.scala:1539)
[error]         at org.fusesource.scalate.support.ScalaCompiler.compile(ScalaCompiler.scala:89)
```
No failures without `addSbtPlugin("com.lucidchart"  % "sbt-scalafmt" % "1.16")`

## expectation

No failures.

## notes

By default sbt uses Ivy mediator to enforce scala-library and scala-compiler to line up (sbt/sbt#2634), but neo-sbt-scalafmt turns that off.
https://github.com/lucidsoftware/neo-sbt-scalafmt/blob/1.16/sbt-scalafmt/src/main/scala-2.12/com/lucidchart/sbt/scalafmt/Platform.scala#L42
The fact that introducing this plugin changes the semantics of the build is very surprising to me.


I wonder if there is a way to disable the formatting when a value is passed as a environment or system variable.

This is useful to not format the code on the continuous integration step to fail if the code isn't formatted.

Thanks.
I have `scalafmtOnCompile` set to true in my build.sbt and when I run `sbt compile` it does run `scalafmt` and `sbt:scalafmt` but it does not run `test:scalafmt`.

I also tried:
```
val compileDeps: List[Scoped.AnyInitTask] = List(Compile / scalafmt, Test / scalafmt, Sbt / scalafmt)
(Compile / compile) := ((Compile / compile) dependsOn (compileDeps: _*)).value
```
And this has exactly the same effect.

I'm using `sbt.version=1.1.6` and `"com.lucidchart" % "sbt-scalafmt" % "1.15"`
Plugin works with 1.4, but using `scalafmtVersion := "1.5.1"` I get:

```
[error] java.lang.NoSuchMethodError: org.scalafmt.config.ScalafmtConfig.copy$default$23()Ljava/lang/String;
[error] 	at com.lucidchart.scalafmt.impl.Scalafmtter$$anon$1.<init>(Scalafmtter.scala:16)
[error] 	at com.lucidchart.scalafmt.impl.Scalafmtter.formatter(Scalafmtter.scala:14)
[error] 	at com.lucidchart.sbt.scalafmt.ScalafmtCorePlugin$autoImport$.$anonfun$scalafmtFn$1(ScalafmtCorePlugin.scala:59)
[error] 	at scala.Function1.$anonfun$compose$1(Function1.scala:44)
[error] 	at sbt.internal.util.$tilde$greater.$anonfun$$u2219$1(TypeFunctions.scala:42)
[error] 	at sbt.std.Transform$$anon$4.work(System.scala:64)
[error] 	at sbt.Execute.$anonfun$submit$2(Execute.scala:257)
[error] 	at sbt.internal.util.ErrorHandling$.wideConvert(ErrorHandling.scala:16)
[error] 	at sbt.Execute.work(Execute.scala:266)
[error] 	at sbt.Execute.$anonfun$submit$1(Execute.scala:257)
[error] 	at sbt.ConcurrentRestrictions$$anon$4.$anonfun$submitValid$1(ConcurrentRestrictions.scala:167)
[error] 	at sbt.CompletionService$$anon$2.call(CompletionService.scala:32)
[error] 	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
[error] 	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
[error] 	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
[error] 	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
[error] 	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
[error] 	at java.lang.Thread.run(Thread.java:748)
[error] (sbt:scalafmt::scalafmt) java.lang.NoSuchMethodError: org.scalafmt.config.ScalafmtConfig.copy$default$23()Ljava/lang/String;
```
if I run `sbt:scalafmt` in the sbt/sbt build I get:

```
[info] Formatting 1 Scala source in sbtRoot:sbt ...
[warn] /d/sbt/build.sbt:41: error: illegal start of simple expression
[warn] ))
[warn]     ^
```

I think this comment is relevant: https://github.com/scalameta/scalafmt/pull/979#discussion_r122577459
Currently sbt-scalafmt-coursier depends on Coursier 1.0.0-RC13, while the latest version is Courser 1.0.0. Because of this, if my build depends both on Coursier 1.0.0 and the latest sbt-scalafmt-coursier, I get the following warnings each time SBT is started:
```
[warn] Found version conflict(s) in library dependencies; some are suspected to be binary incompatible:
[warn]  * io.get-coursier:coursier-cache_2.12:1.0.0 is selected over 1.0.0-RC13
[warn]      +- io.get-coursier:sbt-shared:1.0.0 (scalaVersion=2.12, sbtVersion=1.0) (depends on 1.0.0)
[warn]      +- io.get-coursier:sbt-coursier:1.0.0 (scalaVersion=2.12, sbtVersion=1.0) (depends on 1.0.0)
[warn]      +- com.lucidchart:sbt-scalafmt-coursier:1.15 (scalaVersion=2.12, sbtVersion=1.0) (depends on 1.0.0-RC13)
[warn]  * io.get-coursier:coursier_2.12:1.0.0 is selected over 1.0.0-RC13
[warn]      +- io.get-coursier:coursier-extra_2.12:1.0.0          (depends on 1.0.0)
[warn]      +- io.get-coursier:sbt-shared:1.0.0 (scalaVersion=2.12, sbtVersion=1.0) (depends on 1.0.0)
[warn]      +- io.get-coursier:sbt-coursier:1.0.0 (scalaVersion=2.12, sbtVersion=1.0) (depends on 1.0.0)
[warn]      +- io.get-coursier:coursier-cache_2.12:1.0.0          (depends on 1.0.0)
[warn]      +- com.lucidchart:sbt-scalafmt-coursier:1.15 (scalaVersion=2.12, sbtVersion=1.0) (depends on 1.0.0-RC13)
```
This problem is not critical, of course, but a nuisance nevertheless. Is there a particular reason to stick to the prerelease version of Coursier?
I had to remove neo-sbt-scalafmt (1.4) from my project because:

```
    [error] Uncaught exception when running tests:
    [error] java.lang.NoSuchMethodError: scala.Predef$.refArrayOps([Ljava/lang/Object;)Lscala/collection/mutable/ArrayOps;
    [error] sbt.ForkMain$ForkError: java.lang.NoSuchMethodError: scala.Predef$.refArrayOps([Ljava/lang/Object;)Lscala/collection/mutable/ArrayOps;
    [error]         at org.scalatest.tools.FriendlyParamsTranslator$.translateArguments(FriendlyParamsTranslator.scala:174)
    [error]         at org.scalatest.tools.Framework.runner(Framework.scala:929)
    [error]         at sbt.ForkMain$Run.runTests(ForkMain.java:252)
    [error]         at sbt.ForkMain$Run.run(ForkMain.java:139)
    [error]         at sbt.ForkMain$Run.access$100(ForkMain.java:135)
    [error]         at sbt.ForkMain.main(ForkMain.java:121)
```

this was happening consistently when trying to run my ScalaTest tests on 2.11 with `fork in Test := true`

the `refArrayOps` thing usually indicates a Scala 2.11/2.12 mismatch

the cause seems to be:

```
sbt:scala-fortify> show test:fullClasspath
[info] Updating {file:/Users/tisue/scala-fortify-plugin/}scala-fortify-plugin...
[info] Done updating.
[info] Compiling 1 Scala source to /Users/tisue/scala-fortify-plugin/target/scala-2.11/classes ...
[info] Done compiling.
...
[info] * Attributed(/Users/tisue/.sbt/boot/scala-2.12.4/lib/scala-library.jar)
...
```

how'd the 2.12.4 stdlib get in there? that's not right.

what it is about this plugin that actually causes that, I don't know.

the problem occurs with both sbt 1.0.4 and 0.13.16