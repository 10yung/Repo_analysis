``` r
library(gh)
json <- gh("GET /orgs/:org/repos", org = "tidyverse", .limit = Inf)

tibble(json = json)
#> Error: All columns in a tibble must be vectors:
#> * Column `json` is gh_response
```

<sup>Created on 2020-01-07 by the [reprex package](https://reprex.tidyverse.org) (v0.3.0)</sup>
Scenario: I'm running a query and didn't realize how many results are returned. The progress bar (#26) indicates that it's going to be too long, but I'd like to look at partial results. I'm pressing Escape (or Ctrl + C) but the intermediate results are gone.

As discussed in #86, we could store intermediate results in a private environment and expose with a function, e.g. `gh_partial()` . Catching interrupts is a bad idea.
Over in https://github.com/weecology/portalr, we use the `.destfile` feature to download zipped releases from GitHub. Having this feature in the package on CRAN would enable us to update our package on CRAN, too.

Thanks for the useful package and taking a look!
Maybe as an attribute. Related: #67
If `\n` in `description` argument of posting new repo, you get an error.

## Creating a repo

``` r
library(gh)
repo_name = basename(tempfile())
create <- gh::gh(
  "POST /user/repos",
  name = repo_name,
  description = ""
)
Sys.sleep(2)
del <- gh::gh(
  "DELETE /repos/:owner/:repo",
  repo = repo_name,
  owner = "muschellij2")
```

## Creating repo with newline in `description`:

``` r

repo_desc = "title with \n newline"
create <- gh::gh(
  "POST /user/repos",
  name = repo_name,
  description = repo_desc
)
#> Error in gh::gh("POST /user/repos", name = repo_name, description = repo_desc): GitHub API error (422): 422 Unprocessable Entity
#>   Repository creation failed.


sessioninfo::session_info()
#> ─ Session info ──────────────────────────────────────────────────────────
#>  setting  value                       
#>  version  R version 3.5.2 (2018-12-20)
#>  os       macOS Sierra 10.12.6        
#>  system   x86_64, darwin15.6.0        
#>  ui       X11                         
#>  language (EN)                        
#>  collate  en_US.UTF-8                 
#>  ctype    en_US.UTF-8                 
#>  tz       America/New_York            
#>  date     2019-01-23                  
#> 
#> ─ Packages ──────────────────────────────────────────────────────────────
#>  package     * version date       lib source        
#>  assertthat    0.2.0   2017-04-11 [1] CRAN (R 3.5.0)
#>  cli           1.0.1   2018-09-25 [1] CRAN (R 3.5.0)
#>  crayon        1.3.4   2017-09-16 [1] CRAN (R 3.5.0)
#>  curl          3.3     2019-01-10 [1] CRAN (R 3.5.2)
#>  digest        0.6.18  2018-10-10 [1] CRAN (R 3.5.0)
#>  evaluate      0.12    2018-10-09 [1] CRAN (R 3.5.0)
#>  gh          * 1.0.1   2017-07-16 [1] CRAN (R 3.5.0)
#>  highr         0.7     2018-06-09 [1] CRAN (R 3.5.0)
#>  htmltools     0.3.6   2017-04-28 [1] CRAN (R 3.5.0)
#>  httr          1.4.0   2018-12-11 [1] CRAN (R 3.5.0)
#>  jsonlite      1.6     2018-12-07 [1] CRAN (R 3.5.0)
#>  knitr         1.21    2018-12-10 [1] CRAN (R 3.5.2)
#>  magrittr      1.5     2014-11-22 [1] CRAN (R 3.5.0)
#>  R6            2.3.0   2018-10-04 [1] CRAN (R 3.5.0)
#>  Rcpp          1.0.0   2018-11-07 [1] CRAN (R 3.5.0)
#>  rmarkdown     1.11    2018-12-08 [1] CRAN (R 3.5.0)
#>  sessioninfo   1.1.1   2018-11-05 [1] CRAN (R 3.5.0)
#>  stringi       1.2.4   2018-07-20 [1] CRAN (R 3.5.0)
#>  stringr       1.3.1   2018-05-10 [1] CRAN (R 3.5.0)
#>  withr         2.1.2   2018-03-15 [1] CRAN (R 3.5.0)
#>  xfun          0.4     2018-10-23 [1] CRAN (R 3.5.0)
#>  yaml          2.2.0   2018-07-25 [1] CRAN (R 3.5.0)
#> 
#> [1] /Library/Frameworks/R.framework/Versions/3.5/Resources/library
```

<sup>Created on 2019-01-23 by the [reprex package](https://reprex.tidyverse.org) (v0.2.1)</sup>
Since it's so commonly needed

So that you can use `NULL` to mean "don't change this setting"
Add `gh_interactive_oauth_token` function which opens the browser and acquires an OAuth token interactively. This can be used as a fallback when the user has not set PAT. The process of acquiring OAuth token is a much easier user experience than creating a PAT. The fallback is only triggered under interactive R session. Furthermore, this simplified user experience is most relevant to Github Enterprise installation where functions such as `devtools::install_github` can be wrapped to install from GHE instead or use GHE as a clean interface to query LDAP username etc.

Unfortunately, this is not unit testable (and reprex can't fake interactive session), here is an illustration of this working:

```r
library(gh)
# clear tokens that are already set
Sys.unsetenv("GITHUB_PAT")
Sys.unsetenv("GITHUB_TOKEN")

gh_whoami()
```

returns

```json
{
  "name": "Forest Fang",
  "login": "saurfang",
  "html_url": "https://github.com/saurfang",
  "scopes": "",
  "token": "3b..."
} 
```

The function and its logic is based on https://github.com/cscheid/rgithub/blob/e98afc3bbf2971a59536fc3ac5ee1ec7c54ead8b/R/github.R#L50
Consider the use of `NA` and `NULL` being passed into a named parameter:

```r
gh("/repos/:owner/:repo/issues", owner = "r-lib", repo = "gh", state = NULL)
# Error in gsub(paste0(":", n, "\\b"), p, endpoint) : 
#  invalid 'replacement' argument

gh("/repos/:owner/:repo/issues", owner = "r-lib", repo = "gh", state = NA)
# Error in gh("/repos/:owner/:repo/issues", owner = "r-lib", repo = "gh",  : 
#  GitHub API error (422): 422 Unprocessable Entity
#  Validation Failed
```

This is a bit problematic for parameters that may be _optional_. (c.f. https://github.com/coatless/ghapi3/issues/3)

Would it be possible to add filtering inside of `gh_set_endpoint()` in [`R/gh_request.R`](https://github.com/r-lib/gh/blob/a8b645364f59a5d5030ccfd8d074de640d8b72cd/R/gh_request.R#L49) to remove parameters that have _R_-specific missingness? e.g.

```r
gh_set_endpoint <- function(x) {
  params <- x$params
  if (!grepl(":", x$endpoint) || length(params) == 0L || has_no_names(params)) {
    return(x)
  }

  # Subset out invalid params
  params <- Filter(Negate(is.null), params)
  params <- Filter(Negate(is.na), params)

  # rest of the logic ... 
}
```