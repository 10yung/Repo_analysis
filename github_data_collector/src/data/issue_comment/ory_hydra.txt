https://opencollective.com/ory/contribute/silver-sponsor-3732
## Related issue

#1680
#1685

## Proposed changes

Fix logging Span ID.
#1685 has mistake that `span_id` overwrites `trace_id`.
Now both `span_id` and `trace_id` are logged.

```
INFO[0030] started handling request                      method=GET remote="[::1]:59642" request=/health/alive span_id=00f067aa0ba902b7 trace_id=4bf92f3577b34da6a3ce929d0e0e4736
INFO[0030] completed handling request                    measure#hydra/admin: https://localhost:4444/.latency=77569 method=GET remote="[::1]:59642" request=/health/alive span_id=00f067aa0ba902b7 status=200 text_status=OK took="77.569Âµs" trace_id=4bf92f3577b34da6a3ce929d0e0e4736
```

## Checklist


- [x] I have read the [contributing guidelines](../blob/master/CONTRIBUTING.md)
- [x] I have read the [security policy](../security/policy)
- [x] I confirm that this pull request does not address a security vulnerability. If this pull request addresses a security
vulnerability, I confirm that I got green light (please contact [security@ory.sh](mailto:security@ory.sh)) from the maintainers to push the changes.
- [ ] I have added tests that prove my fix is effective or that my feature works
- [ ] I have added necessary documentation within the code base (if appropriate)
- [ ] I have documented my changes in the [developer guide](https://github.com/ory/docs) (if appropriate)

## Further comments

I'm sorry...


**Is your feature request related to a problem? Please describe.**

My user story is:
1. resource server logging: request resource RES with access token id: "ID-1" (jwt.jti), subject: "S-1" (jwt.sub)
2. resource server audit service: found security issues, notify user and account administrator, want to revoke token/consent with jti = "ID-1", sub = "S-1"
3. user or administrator use idp (built with hydra) portal:
  3.1. list all tokens, find the one with same jti delete, server call hydra -> [list consent by subject](https://www.ory.sh/docs/hydra/sdk/api#lists-all-consent-sessions-of-a-subject), find the consent has jti = "ID-1", revoke it
  3.2. or has a input box, revoke my token/consent with jti = "ID-1"

Similar to: https://github.com/ory/hydra/issues/304 and https://auth0.com/blog/blacklist-json-web-token-api-keys/

**Describe the solution you'd like**

What I want is a constant identity in a consent session which both included in access token and list consent response.

- I am not sure "jti" is the constant identity in a consent session.
- It still not easy for not jwt access token. use introspection endpoint to get the id (jti) and subject?

Currently, my workaround is add a custom claim `tokenid: new uuid` in access token session which is both included access token and list consent response and constant identity in a consent session.



**Is your feature request related to a problem? Please describe.**

There are cases that we need to force log out a user from all the first-party client applications, e.g., when users reset their password or admins of the account want to revoke a user from a firm.
Hydra already [has an endpoint](https://www.ory.sh/docs/hydra/implementing-consent#revoking-consent-and-login-sessions) that allows us to delete the existing sessions for a specific user from Hydra, but per documentation:

> will require the user to re-authenticate when performing the next OAuth 2.0 Authorize Code Flow

The documentation explicitly says that

> This endpoint is not compatible with OpenID Connect Front-/Backchannel logout and does not revoke any tokens.

What I am looking for is to invalidate all the existing sessions in the client applications, that have the backchannel logout implemented, immediately (not on next flow execution).

**Describe the solution you'd like**

Add an additional parameter (e.g., `trigger_logout=true`) to the [existing endpoint](https://www.ory.sh/docs/hydra/implementing-consent#revoking-consent-and-login-sessions) that allows us to trigger a backchannel logout once the subject's sessions are removed.

**Describe alternatives you've considered**

- Add a new endpoint to the API: functionality has some overlap with the existing API endpoint. I am not sure if that is a good idea.

**Additional context**

I have already had a discussion about this issue [on the forum](https://community.ory.sh/t/how-to-logout-the-users-after-password-reset/1437/2).

**Describe the bug**

The fix for #1557 changed the logic of when the session is killed. The hard timeout makes it now impossible to prolong the session even if the user is active and keeps refreshing tokens via silent refresh.

Could we reintroduce the possibility for the old behavior while keeping the new behaviour possible, too? In particular, it would be enough if setting rememberFor to a positive value on skipped login would still trigger the recreation of the session cookie. 
See the relevant line: https://github.com/ory/hydra/pull/1564/files#diff-daf069930bf5aee3faa0136e399ebaa2R433

This way, omitting the rememberFor on skipped login would result in the current behaviour (the old cookie is kept, max-age is not changed). But providing positive rememberFor would update the cookie with the new max-age, thus prolonging its life.








Co-authored-by: Marco Hutzsch <marco.hutzsch@otto.de>

## Related issue

#1684
## Proposed changes

When a consent is handled hydra stores the result (accepted or rejected). With this change it is possible to access the date and time when a consent was handled.

## Checklist

- [x] I have read the [contributing guidelines](../blob/master/CONTRIBUTING.md)
- [x] I have read the [security policy](../security/policy)
- [x] I confirm that this pull request does not address a security vulnerability. If this pull request addresses a security
vulnerability, I confirm that I got green light (please contact [security@ory.sh](mailto:security@ory.sh)) from the maintainers to push the changes.
- [x] I have added tests that prove my fix is effective or that my feature works
- [x] I have added necessary documentation within the code base (if appropriate)
- [ ] I have documented my changes in the [developer guide](https://github.com/ory/docs) (if appropriate)

**Is your feature request related to a problem? Please describe.**

When we ask hydra for all accepted consents for a subject we want to show the subject the date, when the latest consent was accepted. This value exists in the db but is not accessible via go-sdk.

**Describe the solution you'd like**

We had the idea of adding the value to the mentioned struct. Would you accept a PR for that?

**Describe alternatives you've considered**

No idea.


**Describe the bug**
We are using fluentd + elasticsearch + kibana for log collection. Currently we have trouble indexing hydra logs, because json field `status` has  different types. 

For example:

A "normal" error log output looks like:
```
{"level":"info","measure#hydra/admin: <domain>/.latency":2993156,"method":"GET","msg":"completed handling request","remote":"@","request":"/oauth2/auth/requests/login?login_challenge=<challenge>","status":404,"text_status":"Not Found","time":"2020-01-08T10:23:12Z","took":2993156}
```
but in case of an error, additional output is generated, which looks like:
```
{"code":404,"debug":"","details":{},"error":"Not Found","level":"error","msg":"An error occurred while handling a request","reason":"","request-id":"","status":"Not Found","time":"2020-01-08T10:28:43Z","trace":"Stack trace: \ngithub.com/ory/hydra/consent.(*SQLManager).GetLoginRequest\n\t/go/src/github.com/ory/hydra/consent/manager_sql.go:271\ngithub.com/ory/hydra/consent.(*Handler).GetLoginRequest\n\t/go/src/github.com/ory/hydra/consent/handler.go:260\ngithub.com/julienschmidt/httprouter.(*Router).ServeHTTP\n\t/go/pkg/mod/github.com/julienschmidt/httprouter@v1.2.0/router.go:334\ngithub.com/urfave/negroni.Wrap.func1\n\t/go/pkg/mod/github.com/urfave/negroni@v1.0.0/negroni.go:46\ngithub.com/urfave/negroni.HandlerFunc.ServeHTTP\n\t/go/pkg/mod/github.com/urfave/negroni@v1.0.0/negroni.go:29\ngithub.com/urfave/negroni.middleware.ServeHTTP\n\t/go/pkg/mod/github.com/urfave/negroni@v1.0.0/negroni.go:38\ngithub.com/ory/x/metricsx.(*Service).ServeHTTP\n\t/go/pkg/mod/github.com/ory/x@v0.0.73/metricsx/middleware.go:261\ngithub.com/urfave/negroni.middleware.ServeHTTP\n\t/go/pkg/mod/github.com/urfave/negroni@v1.0.0/negroni.go:38\ngithub.com/ory/hydra/metrics/prometheus.(*MetricsManager).ServeHTTP\n\t/go/src/github.com/ory/hydra/metrics/prometheus/middleware.go:26\ngithub.com/urfave/negroni.middleware.ServeHTTP\n\t/go/pkg/mod/github.com/urfave/negroni@v1.0.0/negroni.go:38\ngithub.com/meatballhat/negroni-logrus.(*Middleware).ServeHTTP\n\t/go/pkg/mod/github.com/meatballhat/negroni-logrus@v0.0.0-20170801195057-31067281800f/middleware.go:136\ngithub.com/urfave/negroni.middleware.ServeHTTP\n\t/go/pkg/mod/github.com/urfave/negroni@v1.0.0/negroni.go:38\ngithub.com/urfave/negroni.(*Negroni).ServeHTTP\n\t/go/pkg/mod/github.com/urfave/negroni@v1.0.0/negroni.go:96\nnet/http.serverHandler.ServeHTTP\n\t/usr/local/go/src/net/http/server.go:2802\nnet/http.(*conn).serve\n\t/usr/local/go/src/net/http/server.go:1890\nruntime.goexit\n\t/usr/local/go/src/runtime/asm_amd64.s:1357","writer":"JSON"}
```
as you can see, in the first output `status` contains `404` and in the second one `Not Found`. It would be great to have consistent types.

**Expected behavior**
We expect the same datatype for `status` over all log messages.

**Environment**
* Version: v1.0.9
* Environment: GKE, Kubernetes 1.13.1

/cc @jayme-github 

**Is your feature request related to a problem? Please describe.**

Jaeger provides a great distributed tracing system but it's not small cost for transition period of monolith to micro service: really few micro services. So now I need traceable logging until I install jaeger.

**Describe the solution you'd like**

Add logging configuration option like following

```yaml
serve:
  admin:
    ...
    additional_logging:
      header_tracing_id: ToTraceID
      header_span_id: ToSpanID
```

Then, reading `ToTraceID` and `ToSpanID` are read from HTTP headers and logging appears like this

```
 {"level":"info",...,"tracing_id": "xxxxxxxxxxxxxxx", "span_id", "xxxxxxxxxxxxxxx"}
```



**Describe the bug**

Say I have **only one** client in ORY Hydra server. And when I am using `GET /clients`, the `Link` header is:

```
Link: </clients?limit=100&offset=0>; rel="first",</clients?limit=100&offset=-100>; rel="prev"
```

**Expected behavior**

In this situation, the expected result is containing `first` link only

**Environment**

Using the latest docker image:

```
# docker.yml
  hydra:
    image: oryd/hydra:latest
    ports:
      - "4444:4444" # Public port
      - "4445:4445" # Admin port
      - "5555:5555" # Port for hydra token user
    command:
      serve all --dangerous-force-http
    environment:
      - URLS_SELF_ISSUER=http://127.0.0.1:4444
      - URLS_CONSENT=http://127.0.0.1:4201/static/consent
      - URLS_LOGIN=http://127.0.0.1:4201/static/login
      - URLS_LOGOUT=http://127.0.0.1:4201/static/logout
      - DSN=memory
      - SECRETS_SYSTEM=youReallyNeedToChangeThis
      - LOG_LEVEL=debug

    restart: unless-stopped
```

