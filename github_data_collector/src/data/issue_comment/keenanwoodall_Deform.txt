I tried, to use this git-repository in an external folder and import it in unity 2019.3f5 as an package. It turns out, it goes in an endless loop trying to create the settings asset:

In the Editor.log of unity it loops through that:
`
Start importing Assets/Deform/EditorResources/DeformSettings.asset using Guid(3fd6d0f0be206104d92b623fbdfdddac) Importer(-1,00000000000000000000000000000000)
Done importing asset: 'Assets/Deform/EditorResources/DeformSettings.asset' (target hash: '004dc9a8bef873adffdb5497b92c9620') in 0.005325 seconds
Import parameters got modified during import
UnityEditor.AssetDatabase:CreateAsset(Object, String)
DeformEditor.DeformEditorResources:CreateAsset(Object, String) (at ThirdParty\Deform\Code\Editor\DeformEditorResources.cs:52)
DeformEditor.DeformEditorSettings:EnsureSettingsAsset() (at ThirdParty\Deform\Code\Editor\DeformEditorSettings.cs:16)

[C:\buildslave\unity\build\Modules/AssetDatabase/Editor/V2/AssetImportManager.cpp line 332] 
(Filename: ThirdParty/Deform/Code/Editor/DeformEditorResources.cs Line: 52)
`

It seems, there are hardcoded paths, in the creation, that forces the user to use it in the Assets/Deform folder and not as a package :(

The package should generate the default material somewhere in the Assets folder so that if Deform is installed via the manifest file, the user can change the shader on the default material. If possible, the generated material should detect the render pipeline and have its shader set accordingly.
I am trying to create a **breaking wave using the Twirl deformer.**

**Below is the current output using the Twirl deformer:**

![Deform plugin](https://user-images.githubusercontent.com/18110120/67155543-1900b500-f32f-11e9-8f89-ae1aa013f2c5.PNG)

**Required output:**

![Required output](https://user-images.githubusercontent.com/18110120/67155615-4ac64b80-f330-11e9-9474-3c6a0a4db6e0.PNG)

Below are the differences between the current and the required output:
1. Smooth blending with the ocean surface
2. No depression below the crest

I am looking for suggestions or thoughts which can help in achieving the required output. Thank you.
![image](https://user-images.githubusercontent.com/2693840/60774999-fef2ec00-a11c-11e9-94fa-512de2c9fe95.png)

Regular "automatic normal generation" in Unity (mesh.RecalculateNormals) does look better. A sphere didn't get hard corners with automatic normal generation.
Every deformable has its dynamic mesh serialized as a unique mesh. This bloats scene file size. It's unnecessary because the dynamic mesh can be generated from the original mesh. `MeshData.DynamicMesh` isn't serialized, but the target (Mesh Filter or Skinned Mesh Renderer) uses it and *is* serialized. Somehow the targets mesh reference needs to be overridden when serialized, to point to the original mesh. Then at runtime the dynamic mesh can be generated.
The transform handles shouldn't get in the way of the deformable's transform handles. Controls could exist for the deformer *and* deformable, but a toggle between the two would be acceptable as well.
When typing to filter the displayed deformers in the Creator window, it would be nice to be able to press the down arrow key to select the next element in the list and up for the previous. Pressing enter would be the equivalent of clicking the selected button.
The sine deformer should have a limited and unlimited mode like some of the other deformers (bend, twist, twirl etc)
