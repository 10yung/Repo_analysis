One can now do:

```yaml
windows:
    - name: "vim"
      root: "$PROJECT_DIR/Ruby/teamocil"
      .........
```

- The regular expression only checks for the format $VAR and ${VAR} and replaces them with their respective value from the ENV hash
- Fixes #119
Hi, I am running a window where four panes, each with different directory.

I do something like this:
```
windows:
  - name: Server
    focus: true
    root: ~/dev
    layout: tiled
    panes:
      - cd app1 && be rails s
      - cd app2 && be rails s -p 3001
      - cd app1 && be sidekiq
      - cd app2 && be sidekiq
```

What happens if I kill the server in `app1` is when I press arrow up, it suggests `cd app1 && be rails s` which I cannot run.

I'd like to switch directory before running my server somehow, any ideas?

I could do `cd ~/dev/app1 && be rails s` which will allow re-running, but if there is more elegant solution I'd love to know.
Actually, running `teamocil` without any arguments attempts to open a `.yml` in the `.teamocil` folder in home but gives the following error message: 
```
Cannot find a layout at `/Users/nboisvert/.teamocil/.yml
```

I would suggest trying to load `./.teamocil.yml` if no file is provided. We could then commit `.teamocil.yml` files in our project so everyone in the team can benefit from it and share the same tmux layout, what do you think?

The only issue I see is if users started writing `~/.teamocil/.yml` files to have a default layout.
As a user, I would like being able to generate teamocil `yaml` from existed `tmux session` and save it in a file for next usage, for avoiding writing it manually
May be updating can be useful also

Related issue - https://github.com/remiprev/teamocil/issues/32

and big thanks for your great tool, @remiprev ! 
Hello! I have a few panes which all depend on a set of commands being ran beforehand. However, if they all try to run the command at once it will be problematic.

I have "worked around" this by putting a sleep in all of the panes but one. This isn't amazing. I would love a syntax support like the following:

```
windows:
  - name: mywindow
    layout: even-vertical
    setup:
      - setupcommand 1
      - setupcommand 2
      - setupcommand 3
    panes:
      - command 1
      - command 2
      - command 3
```

In which the setup commands would execute before the pane commands.
I have a Teamocil YAML file that contains a lot of snippets like:

```yaml
windows:
  - name: ...
    root: ...
    panes:
      - commands:
        - export CC=...
        - export CXX=...
        - export BUILD_ROOT=something/Debug
        - export PATH=...:something/Debug/bin
      - commands:
        - export CC=...
        - export CXX=...
        - export BUILD_ROOT=something/Release
        - export PATH=...:something/Release/bin
      - ...
```

This is fine when using `sh(1)` or compatible shells (bash, zsh...), but breaks with other shells (csh, fish) that prefer `setenv` or `set --export`. If Teamocil were to afford the ability to manipulate the environment via Ruby's `ENV` hash, I'd be able to write descriptions such as the following that work with different sorts of shells:

```yaml
windows:
  - name: ...
    root: ...
    env:
      CC: ...      # would apply to all panes in this window
      CXX: ..      # would apply to all panes in this window
    panes:
      - env:       # only need to specify vars specific to this pane:
          BUILD_ROOT: ...:something/Debug
          PATH: ...:something/Debug/bin
      - env:
          BUILD_ROOT: ...:something/Release
          PATH: ...:something/Release/bin
```
I would like to have ability to enforce changed commands to run again
For example
```
name: my-session
windows:
  - name: immutable
    panes:
      - sleep 60
  - name: mutable
    panes:
      - tail -f /my.log
``` 
```
teamocil --here my-session
```
then I edit the `yml` to
```
...
    panes:
      - tail -f /my.log -n 100
```

in the same tmux session execute
```
teamocil --replace my-session
```
and my `mutable` plane is going to be recreated
and with
```
teamocil --replace --force my-session
```
all windows and panes are going to be recreated
Thanks for Teamocil.

According to the [Free Dektop XDG Base Directory Specification](https://specifications.freedesktop.org/basedir-spec/basedir-spec-0.6.html), ~/.config/ should be used for personal config files. From the spec:

> $XDG_CONFIG_HOME defines the base directory relative to which user specific configuration files should be stored. If $XDG_CONFIG_HOME is either not set or empty, a default equal to $HOME/.config should be used

`systemd` also supports the standard, and documents in `man file-hierarchy` under HOME DIRECTORY:

>     ~/.config
>         Application configuration and state... If an application finds $XDG_CONFIG_HOME set, it should use the directory specified in it instead of this directory.

As a user, I appreciate having configuration file standardized in the `.config` directory, with less litter in my top level directory. For example, I can easily specify that all files under `~/.config` should be included in a backup, while all files under `/.cache` (also standardized) don't need to be backed up. 

The current location can still be checked as a backup for backwards compatibility.

Quoting in the yaml file is a little tricky.  The following does not work:

windows:
  - name: "railsprod"
    root: ~
    layout: even-vertical
    panes:
      - ssh server -t 'cd /var/log/rails; bash --login'
      - ssh server -t 'cd /var/rails_apps; bash --login'

If I double quote the ssh command parameter it does work (so I'm good.)  But for kicks, I ran this yaml through yamllint.com (I don't know if this is a good resource or not)  and got:

windows:
  - name: "railsprod"
    root: ~
    layout: even-vertical
    panes:
      - "ssh server -t 'cd /var/log/rails; bash --login'"
      - "ssh server -t 'cd /var/rails_apps; bash --login'"

and teamocil doesn't like that quoting either.

I'm trying to use teamocil with the `root` setting in my config. I have something like this:

```
windows:
  - name: some-name
    root: $WORKSPACE
    layout: even-horizontal
    panes:
      - commands:
        - cd my-project
        - git fetch
```

I have `$WORKSPACE` set to `~/dev/workspace` and exported in my shell config (I'm using fish) but this is not working.

Running with the debug flag I see

```
tmux new-window -n 'some-name' -c '/Users/sahil/dev/$WORKSPACE'
```

Instead of resolving the variable to a path, it's instead appending it to my current directory and creating an invalid path.

Is this something that can be fixed?