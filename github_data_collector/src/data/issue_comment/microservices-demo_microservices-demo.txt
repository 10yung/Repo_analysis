Want to install tc on a few containers but unable to do so. Want to use Pumba for chaos testing which requires tc.

I have deploy the application using docker compose and its successful.  But I am not able to access the application via browser.

The kibana and elasticsearch images need a version tag which was missing in the kubernetes manifest files. 
Reproduce the error:
` >> kubectl create -f deploy/kubernetes/manifests-logging/elasticsearch.yml `

After describing pod output:

`  Warning  Failed     5s (x2 over 24s)  kubelet,   Failed to pull image "elasticsearch": rpc error: code = Unknown desc = Error response from daemon: manifest for elasticsearch:latest not found
`
Similar error occurs with kibana image as well.
/microservices-demo/deploy/kubernetes$ kubectl apply -f complete-demo.yaml --dry-run 
service/carts-db created (dry run)
service/carts created (dry run)
service/catalogue-db created (dry run)
service/catalogue created (dry run)
service/front-end created (dry run)
service/orders-db created (dry run)
service/orders created (dry run)
service/payment created (dry run)
service/queue-master created (dry run)
service/rabbitmq created (dry run)
service/shipping created (dry run)
service/user-db created (dry run)
service/user created (dry run)
unable to recognize "complete-demo.yaml": no matches for kind "Deployment" in version "extensions/v1beta1"
unable to recognize "complete-demo.yaml": no matches for kind "Deployment" in version "extensions/v1beta1"
unable to recognize "complete-demo.yaml": no matches for kind "Deployment" in version "extensions/v1beta1"
unable to recognize "complete-demo.yaml": no matches for kind "Deployment" in version "extensions/v1beta1"
unable to recognize "complete-demo.yaml": no matches for kind "Deployment" in version "extensions/v1beta1"
unable to recognize "complete-demo.yaml": no matches for kind "Deployment" in version "extensions/v1beta1"
unable to recognize "complete-demo.yaml": no matches for kind "Deployment" in version "extensions/v1beta1"
unable to recognize "complete-demo.yaml": no matches for kind "Deployment" in version "extensions/v1beta1"
unable to recognize "complete-demo.yaml": no matches for kind "Deployment" in version "extensions/v1beta1"
unable to recognize "complete-demo.yaml": no matches for kind "Deployment" in version "extensions/v1beta1"
unable to recognize "complete-demo.yaml": no matches for kind "Deployment" in version "extensions/v1beta1"
unable to recognize "complete-demo.yaml": no matches for kind "Deployment" in version "extensions/v1beta1"
unable to recognize "complete-demo.yaml": no matches for kind "Deployment" in version "extensions/v1beta1"

Update for Kubernetes v1.16 because older versions of yaml don't work

- Read the contribution guidelines
- Include a reference to a related issue in this repository
- A description of the changes proposed in the pull request
Currently running sock-shop on GKE and the deployment of the application went fine. 

However, there is an issue with prometheus metrics (datasource) not reaching grafana. The dashboards have loaded fine, but the datasource was not loaded in. 
Steps to reproduce:

* git clone https://github.com/microservices-demo/microservices-demo.git
* cd microservices-demo/deploy/kubernetes/
* kubectl create namespace sock-shop
* kubectl apply -f complete-demo.yaml
* kubectl get pods -n sock-shop
* kubectl get service/front-end -n sock-shop
* kubectl get ingresses -n sock-shop

oops no ingress!  
using a simple one below works --- the one in the chart templates folder does not. (get 404s on css/ and js/ requests so the page doesn't load properly)

apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  name: socks-ingress
spec:
  backend:
    serviceName: front-end
    servicePort: 80

it would be great to add this (or something better) to the complete-demo.yaml but the above works on GKE.
The [APM codelab](https://codelabs.developers.google.com/codelabs/cloud-stackdriver-apm/index.html?index=..%2F..index#0) uses this repo for its source code. The complete-demo.yaml lists images in a private container registry  (gcr.io/stackdriver-microservices-demo/). These images don't work when the app is deployed. Suggest changing the registries to weaveworksdemos/ or change the repo listed in the codelab. 
Hi, thank you for awesome applications üëç

# Read the contribution guidelines

Done.

# A description of the changes proposed in the pull request

Because Elasticsearch & Kibana does not have `latest` tag, `docker-compose up` does not work.

- https://hub.docker.com/_/elasticsearch
- https://hub.docker.com/_/kibana

```sh
$ docker-compose -f deploy/docker-compose/docker-compose.yml -f deploy/docker-compose/docker-compose.logging.yml up -d

(snip)

Pulling elasticsearch (elasticsearch:)...
ERROR: manifest for elasticsearch:latest not found

(snip)

Pulling kibana (kibana:)...
ERROR: manifest for kibana:latest not found
```

So, I fixed image tag.

`elasticsearch:5` & `kibana:5` works good üëç 

![image](https://user-images.githubusercontent.com/1573290/56999238-5d659080-6be9-11e9-860a-ac7ccf2e1b54.png)

# Future

I thinks that Elasticsearch 7 or 6.7.1 & Kibana 7 or 6.7.1 are better.

We need update `microservices-demo/log-server` docker image, because it is depends on `fluent-plugin-elasticsearch` version at microservices-demo/log-server. Could you fix it?

- https://github.com/microservices-demo/log-server

From Elasticserach 6 & 7, HTTP header `Content-Type: application/json` is necessary.

```
2019-04-30 15:33:15 +0000 fluent.warn: {"next_retry":"2019-04-30 15:42:05 +0000","error_class":"Elasticsearch::Transport::Transport::Errors::NotAcceptable","error":"[406] {\"error\":\"Content-Type header [] is not supported\",\"status\":406}","plugin_id":"object:2ac41b0eb5f0","message":"temporarily failed to flush the buffer. next_retry=2019-04-30 15:42:05 +0000 error_class=\"Elasticsearch::Transport::Transport::Errors::NotAcceptable\" error=\"[406] {\\\"error\\\":\\\"Content-Type header [] is not supported\\\",\\\"status\\\":406}\" plugin_id=\"object:2ac41b0eb5f0\""}
```

So, I choice Elasticsearch 5 & Kibana 5 this time.

Thanks üëç 
### The Issue
The whole stack works properly when the user microservice runs with the provided MongoDB container. However, if the container is given a MONGO_HOST outside of the cluster, I can no longer register new users or log in. I noticed the user microservice is [hardcoded to run on port 8084](https://github.com/microservices-demo/user/blob/master/main.go#L46). The k8s manifest for the user service has the following settings:
```
./user-svc.yaml
port: 80
targetPort: 80
```
The deployment has the containers exposing `containerPort: 80`.

### Expected Behaviour
After updating the `MONGO_HOST`, `MONGO_PASS` and `MONGO_USER` environment variables the microservices-demo application should be able to register new users and log in with existing users.
### Actual Behaviour
I receive a `500: Internal Server Error` when trying to register a new user.
### Steps to reproduce
1. Update the `MONGO_HOST` environment variable to point to a database outside the cluster. The demo I was working on required CosmosDB, so I had to [update the source code to support TLS](https://docs.microsoft.com/en-us/azure/cosmos-db/create-mongodb-golang#connecting-the-go-app-to-cosmos-db). This is by no means required.
2. Install the rest of the templates into the cluster using either Helm or `kubectl apply` except the user-db.
3. Try to register a new user. You should receive a 500 error.
### Workaround
Update the `user-svc.yaml` and `user-dep.yaml` to use the correct ports:
```
./user-svc.yaml
port: 80
targetPort: 8084

./user-dep.yaml
ports: 
  - containerPort: 8084
```
Once this was changed I was able to register users and log in with existing accounts, using CosmosDB as the database instead of the `user-db` container.