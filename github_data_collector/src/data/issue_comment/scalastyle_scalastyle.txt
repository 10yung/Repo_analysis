# Observed incorrect behavior:

```scala
class WrongError extends App {
  def foo: () => Map[String, Double] = () =>
    Map(
      "age of star HD 140283" -> 14.46,
      "age of Universe" -> 13.8,
    )
}
```

produce an incorrect error message:

`WrongError.scala: Expected token SEMI but got Token(ARROW,=>,119,=>)`

# Expected behavior:
provide proper error message sth like
`WrongError.scala: Expected token SEMI but got Token(RPAREN,),119,))`

In the following situation:

```scala
class WrongError extends App {
  Map(
    "age of star HD 140283" -> 14.46,
    "age of Universe" -> 13.8,
  )
}
```

gives `WrongError.scala: illegal start of simple expression: Token(RPAREN,),155,))` that correctly state problem but no line number.

# Severity:
Because there is no line number and the error message is misleading it is hard to find the issue

# Version
"org.scalastyle" %  "scalastyle_2.12" % "1.0.0"
Scala 2.12.10
sbt 1.3.5
used by: `"org.scalastyle" %% "scalastyle-sbt-plugin" % "1.0.0"`

# Related:
* related: https://github.com/scalastyle/scalastyle/issues/191 https://github.com/scalastyle/scalastyle/issues/292
* line number issues: https://github.com/scalastyle/scalastyle/issues/187 https://github.com/scalastyle/scalastyle/issues/195 https://github.com/scalastyle/scalastyle/issues/319
* possible couse scala-ide/scalariform issue https://github.com/scala-ide/scalariform/issues/163
As opposed to BlockImportChecker, this rule targets all
imports with curly braces, including renaming or hiding imports.

This is important because scala refactoring tools that allow
to move classes to other packages are often error-prone in
the presence of such imports.
IndentationChecker fails when there is a commented line where slashes are at the start of line, even though 0 spaces are a multiple of methodParamIndentSize/classParamIndentSize.

e.g. 
```
  code
// commented code
  code
```

Is it an intention? If so, would it be possible to add an option to ignore this special case?
When we comment out a code in IDE, slashes are automatically put at the start of the line and we have to move them manually afterwards, which is quite cumbersome.
`+ test` passes for all versions.  Each commit could be merged by itself (i.e. `+ test` passes for all previous versions.)
# Steps to reproduce

Have a file containing the following import statement:

```scala
import java.time.{ZoneOffset, ZonedDateTime}
```

And run scalastyle with the following configuration:
```xml
  <check class="org.scalastyle.scalariform.ImportOrderChecker"               level="error"   enabled="true">
    <parameters>
      <parameter name="groups">all</parameter>
      <parameter name="group.all">.+</parameter>
      <parameter name="lexicographic">true</parameter>
    </parameters>
  </check>

```

# Expected behaviour
Scalastyle should not find an issue

# Observed behaviour
Scalastyle complains:

```
ZonedDateTime should come before ZoneOffset.
```

# Notes
I believe this is a bug because it seems to contradict the `lexicographic` parameter's documentation:
```
 *  - lexicographic: if true, imports are ordered lexicographically (classes, wildcards, then
 *                   packages; case-sensitive ordering within); 
```

It also disagrees with tools such as scalafmt - and having scalafmt and scalastyle disagreeing on how things should be ordered is *not* fun.

I'm happy to submit a PR for this issue - it looks like a simple omission in `compareNames` in the case `isImport=false`, which ignores the value of `lexicographic` and will always `compareIgnoreCase`.
I config a checker to check the double blank lines like the following, however it seems doesn't work. Is there anything wrong in my config? (Other configs work well.)
`<check customId="doubleBlankLines" enabled="true" class="org.scalastyle.file.RegexChecker" level="error">
        <parameters>
            <parameter name="regex">(?m)^\s*$(\r|)\n^\s*$(\r|)\n</parameter>
        </parameters>
        <customMessage><![CDATA[No double blank lines]]></customMessage>
    </check>`
Lexicographic imports sorting used in IDEs (Intellij, Eclipse) considers
the entire import string.

However, for groups, only the part preceding the group was passed into
the comparison method, not taking into account the opening curly brace
and the symbol following it. Let's add them to get the right behaviour.

A follow-up to pull request #234.
Can't find it.
would love to have a [Checkstyle ImportControl check](https://checkstyle.sourceforge.io/config_imports.html#ImportControl) available in scalastyle.
the version in the above link is pretty elaborate, i think that a simpler version of it would be enough for most cases, and simpler to develop. 
i imagine the simpler version would lets us define rules such as:

source package or class `input-here` is not allowed to import `target-here` package or class 

it'd help enforce a layering rule in our projects such as:

package `mycompany.controllers` not allowed to import List(`some.orm.framework`, `mycompany.dao`)


currently there is something simliar implemented: [`IllegalImportsChecker`](http://www.scalastyle.org/rules-1.0.0.html#orgscalastylescalariformillegalimportschecker---check-that-a-class-does-not-import-certain-classes).
it disallows class/package usage but in a "global" way - checking that all files don't import these.


i could try writing and creating a PR for this. would appreciate any pointers that'd get me started faster.
Update URL to reflect the website being on Github pages.