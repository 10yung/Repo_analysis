For performance reasons, I'm considering inverting the initialization logic to be opt-in rather than opt-out (so that we don't try to create indexes each time the app starts, unless being asked for by the developer).

As part of this change, we'll probably want to add some "do the OpenIddict collections exist" checks to inform users how they can manually initialize the OpenIddict collections or configure the OpenIddict MongoDB stores to do it automatically.
The following classes will need to be adapted from 2.x:
  - https://github.com/openiddict/openiddict-core/blob/2.0.1/test/OpenIddict.Server.Tests/OpenIddictServerBuilderTests.cs
  - https://github.com/openiddict/openiddict-core/blob/2.0.1/test/OpenIddict.Server.Tests/OpenIddictServerExtensionsTests.cs
  - https://github.com/openiddict/openiddict-core/blob/2.0.1/test/OpenIddict.Server.Tests/Internal/OpenIddictServerConfigurationTests.cs (for that one, we should remove the dependency on `TestServer` and make it a proper unit tests class).
Device code support was added in 3.0 alpha1 before we started porting the integration tests. Now that it is almost complete, new tests will need to be added for that feature.
In OpenIddict 1.x/2.x, authorization and logout requests were serialized to BSON and stored in the distributed cache. In 3.x, this logic was changed and these requests are now stored as signed and encrypted JWTs in the distributed cache. We'll need to port and adapt the integration tests guaranteeing this feature works as intended.
Things like `OpenIddictApplication.ConsentType` or `DisplayName` could be assigned a max length of 100 chars.
https://github.com/aspnet/AspNetCore/issues/17615

These 3 modes are currently supported by OpenIddict's ASP.NET Core 2.x and 3.x host:

  - Pass-through mode (enabled globally - per endpoint - using e.g `options.UseAspNetCore() .EnableAuthorizationEndpointPassthrough()`): in this case, OpenIddict extracts the OIDC payload, validates it and allows the rest of the ASP.NET Core pipeline to be invoked.

  - Pass-through mode (enabled dynamically using OpenIddict's `context.SkipRequest()` API): it works like the previous mode, but pass-through is configured dynamically, per request, by calling `context.SkipRequest()` from an OpenIddict event handler. This is commonly used to transparently handle authorization requests that can processed immediately (e.g when `prompt=none` is specified and the user is already logged in) without preventing other requests from reaching the MVC authorization controller (typically, when you need to render a consent form).

  - Non-pass-through mode: in this case, requests are exclusively handled using OpenIddict's events model. This is the expected operating mode for things like discovery, introspection or revocation requests, but we shouldn't prevent them from being handled manually later in the pipeline.

We'll need to determine how ASP.NET Core 5.0's plans may affect corresponding scenarios.

@Tratcher could endpoint routing be used with these 3 modes? I'm not too concerned by the "routing" aspect - which seems flexible enough - but the "endpoint" part seems way more limiting in our case, as there's no way for an endpoint to declare it's not going to "handle" a request.

https://github.com/openiddict/openiddict-core/blob/dev/src/OpenIddict.Server.AspNetCore/OpenIddictServerAspNetCoreHandler.cs#L182-L183
https://github.com/aspnet-contrib/AspNet.Security.OAuth.Extensions/blob/dev/src/AspNet.Security.OAuth.Validation/OAuthValidationHandler.cs#L228-L320
