link to whitepaper got from there https://www.blackhat.com/us-18/briefings/schedule/#god-mode-unlocked---hardware-backdoors-in-x86-cpus-10194 , last page reference #11 is down
* fixes building `util/check.c` in Arch Linux
fix #1

Using -no-pie for compiling the utils since the assembly isn't written position independent.
Newer GCC versions default to PIE, so this should be set explicitly.

Signed-off-by: benaryorg <binary@benary.org>
I encountered the following error when tried to build the `util`:

``/usr/bin/ld: /tmp/ccAKVV4D.o: relocation R_X86_64_32S against `.data' can not be used when making a shared object; recompile with -fPIC /usr/bin/ld: final link failed: Nonrepresentable section on output collect2: error: ld returned 1 exit status``

[Details](https://stackoverflow.com/questions/46123505/assembling-with-gcc-causes-weird-relocation-error-with-regards-to-data)

The solution is in the pull request.
It was pointed out on [Hacker News](https://news.ycombinator.com/item?id=17730141) that alternate instruction execution is a known feature of VIA C3 processors:
<http://datasheets.chipdb.org/VIA/Nehemiah/VIA%20C3%20Nehemiah%20Datasheet%20R113.pdf>, page 82
I think this is the penultimate question on everyone's minds right now.

Okay, so sandsifter did the heavy lifting; but that just firehoses random instructions at the CPU and looks for interesting results. That sounds like it would generate a nontrivial amount of noise - not so much so as to make the whole process overly tedious or simply unviable, but enough that skill and experience would be paramount to figure out what's worth following up on and what can be safely discarded.

But sandsifter just deals in discovery, and (in this case) to a very rudimentary extent - sandsifter was designed to find oddness in x86 CPUs, not entirely new processor architectures!

I am ***very*** interested to find out how you went from "hmm, that's weird" to pinpointing/establishing the very *existence* of the coprocessor, to identifying ***21*** of its instructions - and the x86 wrappings!

Also, in the same way a fighter pilot might share how to start up and fly an F-18, would you mind sharing how work on the assembler could be furthered by anyone with a VIA C3 who's interested in playing with this beyond going "huh, it's vulnerable"?

Please tell us that research papers and/or in-depth blog posts are in the pipeline. :)

And thanks, too. This is really awesome. ME, eat your heart out.
I get the error after this gcc demo.c -o demo

demo.c:11: Error: `bound' is not supported in 64-bit mode
I tested the backdoor and I can confirm that it doesn't work on VIA C7 CPU:
![20180810_013451](https://user-images.githubusercontent.com/4016501/43931463-c8f657f6-9c3e-11e8-9f64-c03e5875e557.jpg)
![20180810_013913](https://user-images.githubusercontent.com/4016501/43931402-85c472ce-9c3e-11e8-8508-2ec30947d97a.jpg)
PS: Sorry for the picture with my smartphone, I can't install a screenrecorder because the space on the flash memory is limited.

I wonder if we can get FreeBSD, and maybe other *BSD too.