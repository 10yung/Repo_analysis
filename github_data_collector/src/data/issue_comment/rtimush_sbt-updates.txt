I tried this plugin out and it only showed results for open-source libraries. None of our own internal dependencies showed up.

We have our resolvers set  like

```
import sbt._

object Common {
...
  val resolvers = Seq(
    "Nexus" at "https://OUR.INTERNAL.net/content/groups/public",
    "Twitter" at "https://maven.twttr.com"
  )
...
}
```

https://github.com/frugalmechanic/fm-sbt-s3-resolver writes to an s3 bucket as a maven repo. Would you be interested in supporting the `s3://` urls? This would allow people who are publishing to a private maven repo on s3 to use your plugin.

I think I have a pretty good idea of how that should be done, but didn't want to do the work if you weren't interested in supporting it.

Thanks!

I specify version ranges in my dependencies, then use `sbt-lock` to generate `lock.sbt` files. Those define a `dependencyOverrides` setting with concrete dependency versions, that override version  ranges. **tl;dr** `libraryDependencies` with version ranges and `dependencyOverrides` with specific versions.

When invoking `dependencyUpdates`, I see dependency updates based on version ranges instead of version overrides.

Example:

```
// plugins.sbt
addSbtPlugin("com.timushev.sbt" % "sbt-updates" % "0.3.+")

// build.sbt
libraryDependencies += "com.lihaoyi" %% "pprint" % "0.5.+"
dependencyOverrides += "com.lihaoyi" % "pprint_2.12" % "0.5.3"
```

And then:

```
$ sbt 'show update'
...
[info] 	com.lihaoyi:pprint_2.12
[info] 		- 0.5.3
...

$ sbt dependencyUpdates
...
[info]   com.lihaoyi:pprint           : 0.5.+            -> 0.5.3
...
```
Right now the output is difficult to parse (regex or otherwise) through tooling because of the way it formats output when data may be missing.   I'd like the options to produce this report in a CSV and/or json format output to the console (and / or file). Thanks.  

I'd like to raise a feature request for something similar to what is provided in the `versions-maven-plugin`, for example:

- [versions:use-latest-releases](http://www.mojohaus.org/versions-maven-plugin/use-latest-releases-mojo.html)
- [versions:use-latest-versions](http://www.mojohaus.org/versions-maven-plugin/use-latest-versions-mojo.html)

It'd be nice to be able to see updates for all a project's dependencies, rather than just those explicitly mentioned in the `libraryDependencies` setting. This could be achieved via a setting or a separate task

In particular, if a library pulled in by one of your project's dependencies has a vulnerability it's great to be able to work out if there's a patch-upgrade available that would fix it. That's fairly tedious to do by hand, this plugin would make that very easy if it were possible.
I understand it's much more complicated than the current behaviour, perhaps combining this plugin with sbt-dependency-graph would be the easiest way to achieve it.

I'm interested to hear your thoughts on whether you think this would be a useful addition or if you feel it would be better as a separate tool.
The behaviour change in 0.2.0 has a number of downsides for me. My projects that target multiple versions often use different library versions with different Scala versions. Using sbt-updates versions before 0.2.0 I typically run `sbt +crossScalaVersions` to get a per-Scala-version update report. The new behaviour hides relevant updates from me.

For example, there are no versions of Akka prior to 2.4 released for Scala 2.12, but beginning with Akka 2.4 they stopped building for Scala 2.10. So a project targeting 2.10, 2.11 and 2.12 has to use different versions of Akka for 2.10 and 2.12. With the current logic, I won't any updates for Akka, because they will never release a version for all of those Scala versions.

I also see this with the org.scala-lang.modules libraries such as scala-xml and scala-parser-combinators that were split out of the Scala standard library in Scala 2.12. Projects that use these libraries need to depend on these artifacts for 2.11 and 2.12, but not for 2.10. With the new logic I don't see updates for these libraries, because they aren't released for 2.10.

One possibility for addressing this would be to make an option that enables the old behaviour.
Right now it shows output like

```
[info] Found 1 dependency update for chavrusa-backend
[info]   org.scala-lang:scala-library : 2.11.8 -> 2.12.0
```

What it really means to me however is that a new scala version is on maven. But that's useless if my dependencies aren't published for it.

Suggestion: Don't show dependency update for scala-library. Instead, it should separately say "new scala version available," and show which libraries have been published for it. The library for the new scala may not have the same version as for the current scala.
There are a few cases, I don't know if they can be identified reliably.
- Java libraries don't care about the scala version and are always fine
- Most scala libraries only care about the scala binary version (2.11.x is one scala); they must be available with the right suffix (e.g. `_2.11`)
- A few are versioned with the full scala version (scala-library, scala-reflect, etc.) They typically have no suffix and match by their own artifact version (e.g. 2.11.8 for scala 2.11.8)

Sbt doesn't support Scala 2.11 yet, so it would be nice to check the `sbtPlugin` setting and don't report

```
[info]   org.scala-lang:scala-library:provided : 2.10.6             -> 2.11.8
```
