Some signs would not be removed from the sign column when their
diagnostic was fixed.

Debugging revealed that signs_to_add would include two signs for the
same line. `state.signs`is keyed by line number so the second sign for
a line will overwrite the first when signs_to_add is recorded in state.
The first sign's id is lost when it's overwritten so it can't be
removed.

signs_to_add included two signs for the same line because itertools
`group_by` only groups consecutive runs (it's more efficient, you only
need to remember the current group and can flush it when the key
changes).

This quick fix sorts diagnostics by line number so that group_by gives
us one group per line number.

fixes #952
Mostly done the initial implementation for supporting for the semantic highlighting protocol proposed by people from the vscode language server. As far as I know currently `clangd`  version 9 and `eclipse.jdt.ls` both have working implementations of this protocol.

This PR adds a new setting to configure semantic highlight `g:LanguageClient_semanticHighlightMaps`. Which is a per language map like `serverCommands` of mappings from semantic/textmate scopes to vim highlight groups.

Here are a couple of sample configurations and screenshots to go along.

Using `clangd` 9 for C++
```vim
let g:LanguageClient_semanticHighlightMaps['cpp'] = [
            \ {'Function': ['entity.name.function.cpp']},
            \ {'Function': ['entity.name.function.method.cpp']},
            \ {'CppNamespace': ['entity.name.namespace.cpp']},
            \ {'CppEnumConstant': ['variable.other.enummember.cpp']},
            \ {'CppMemberVariable': ['variable.other.field.cpp']},
            \ {'Type': ['entity.name.type.class.cpp']},
            \ {'Type': ['entity.name.type.enum.cpp']},
            \ {'Type': ['entity.name.type.template.cpp']},
            \ ]

hi! CppEnumConstant ctermfg=Magenta guifg=#AD7FA8 cterm=none gui=none
hi! CppNamespace ctermfg=Yellow guifg=#BBBB00 cterm=none gui=none
hi! CppMemberVariable ctermfg=White guifg=White
```

<span>
<img src="https://user-images.githubusercontent.com/4566209/72564210-1ea16480-3864-11ea-8011-2f47b1f59428.png" width="300">
<img src="https://user-images.githubusercontent.com/4566209/72564211-1f39fb00-3864-11ea-9994-13042afe8c64.png" width="300">
</span>
<br><br>


Using `eclipse.jdt.ls` for Java
```vim
let g:LanguageClient_semanticHighlightMaps['java'] = [
            \ {"JavaStaticMemberFunction": ['storage.modifier.static.java', 'entity.name.function.java', '**']},
            \ {"JavaMemberVariable": ['meta.definition.variable.java', 'meta.class.body.java', 'meta.class.java', '**']},
            \ {"Function": ['entity.name.function.java', '**']},
            \ {"Function": ['*', 'entity.name.function.java', '**']},
            \ {"Type": ['entity.name.type.class.java', '**']},
            \ {"Type": ['*', 'entity.name.type.class.java', '**']},
            \ ]

hi! JavaStaticMemberFunction ctermfg=Green cterm=none guifg=Green gui=none
hi! JavaMemberVariable ctermfg=White cterm=italic guifg=White gui=italic
```

<span>
<img src="https://user-images.githubusercontent.com/4566209/72564212-1f39fb00-3864-11ea-9fef-2764e2b77074.png" width="300">
<img src="https://user-images.githubusercontent.com/4566209/72564213-1f39fb00-3864-11ea-964f-d9cd57ad4ab5.png" width="300">
</span>
<br><br>

TODO:
- Support for `vim` 8.1 with `+textprop`
- Disable feature when the version of `vim` or `neovim` does not support the needed APIs
- More tests?

The PR is broken down into 2 commits since I had to upgrade the `lsp-types` crate to get the types needed for semantic highlighting.

Let me know what you think and if there are any improvements/fixes needed!

Related PRs/Issues:
#383
Microsoft/vscode-languageserver-node#367

Also see this document for exactly how the protocol works:
https://github.com/microsoft/vscode-languageserver-node/blob/5a9b33c23de84c3341e011e79221795a8059375b/protocol/src/protocol.semanticHighlighting.proposed.md
This commit adds the `g:LanguageClient_echoProjectRoot` to the docs. I've found this option by digging into the code. For me it's pretty annoying not to be able to disable it, as otherwise the "Project root" messages litter my vim console as I navigate from file to file.

Thanks for your work on this plugin! It's great - and for a moving target and something very new to nvim - very robust!
- Did you upgrade to latest plugin version? *Yes*
- Did you upgrade to/compile latest binary? Run shell command 
  `bin/languageclient --version` to get its version number. *Yes, 0.1.156*
- (Neovim users only) Did you check output of `:checkhealth LanguageClient`?

```
                                                                                                                                                                        
  health#LanguageClient#check                                                                                                                                           
  ========================================================================                                                                                              
    - OK: binary found: <...>/.vim/plugged/LanguageClient-neovim/bin/languageclient                                       
    - OK: languageclient 0.1.156 fb02afed15363c8879277b413b89e6ca51589e6a                                                                                               
    - OK: Floating window is supported and will be used for hover
```
- Did you check [troubleshooting]? *Yes* I haven't analysed the log file yet.

[troubleshooting]: https://github.com/autozimu/LanguageClient-neovim/blob/next/INSTALL.md#6-troubleshooting

## Describe the bug
Some symbols in the gutter / signcolumn remain after the diagnostic is cleared.
 - The quickfix window does not display a diagnostic on the line with the symbol.
 - The status line does not display any diagnostics when the cursor is on the line with the symbol.
 - Toggling the signcolumn does not fix the issue.
 - Redrawing the screen with `ctrl-l` does not fix the issue.
 - Stopping and Starting the language client does not fix the issue.
 - Restarting neovim does fix the issue.
 - I've seen it with every language server I've used (typescript-language-server, javascript-typescript-langserver, eclipse jdtl)

## Environment
- neovim/vim version (`nvim --version` or `vim --version`):
```
nvim --version
NVIM v0.4.3
Build type: RelWithDebInfo
LuaJIT 2.0.5
Compilation: <removed>

Features: +acl +iconv +tui
See ":help feature-compile"

   system vimrc file: "$VIM/sysinit.vim"
  fall-back for $VIM: "/usr/local/share/nvim"

Run :checkhealth for more info
```
- This plugin version (`git rev-parse --short HEAD`):
```
fb02afe
```
- This plugin's binary version (`bin/languageclient --version`):
```
languageclient 0.1.156 fb02afed15363c8879277b413b89e6ca51589e6a
```

## To Reproduce
```
call plug#begin('~/.local/share/nvim/plugged')

Plug 'autozimu/LanguageClient-neovim', {
    \ 'branch': 'next',
    \ 'do': 'bash install.sh',
    \ }

call plug#end()

set signcolumn=yes

let g:LanguageClient_serverCommands = {
    \ 'rust': ['npx', 'typescript-language-server', '--stdio'],
    \ }
let g:LanguageClient_loggingLevel = 'INFO'
let g:LanguageClient_virtualTextPrefix = ''
let g:LanguageClient_loggingFile =  expand('~/.local/share/nvim/LanguageClient.log')
let g:LanguageClient_serverStderr = expand('~/.local/share/nvim/LanguageServer.log')
```
## Is your feature request related to a problem? Please describe.
Currently the LSC updates the active quickfix list. Say I have a quick fix list populated with grep matches, when LSC kicks in it replaces the grep matches.

## Describe the solution you'd like
Update / use a single Quickfix list as opposed to the active one, since multiple apps use the quickfix list.

## Additional context
I am learning Rust and would like to implement this feature. Some ideas to start would be appreciated. I see there is no direct way to get the quickfix id (which I guess is used for updating). Is there some other way of implementing this?
The display of complement candidates is strange on scala #939
## Is your feature request related to a problem? Please describe.
Some servers would greatly benefit from having diagnostics on multiple lines.

An example of this is [ghcide](https://github.com/digital-asset/ghcide). If I have a type error that is slightly longer it easily doesn't fit without putting it on multiple lines.

## Describe the solution you'd like
I imagine this happening via virtual text, but seeing as how it's usually attached to one line, I'm not sure how hard this would be to implement?

This is what I'm imagining(dreaming of): https://twitter.com/tritlo/status/1206604868733014022

Ideally also some way for diagnostics to remain hidden until you hover the item that they are "attached" to.

## Describe alternatives you've considered
Using pop up windows to instead have the same functionality is another idea.

However I particularly don't like pop up windows, because they obscure code around where I am currently at, and usually it is just as important as what is in the pop up window.

##
Thanks for the client! It seems to be working great so far <3
First of all, apologies for sending a PR for an unsolicited feature, but I figured I'd try implementing it instead of asking for someone to implement it. If this feature is decidedly not wanted, that's ok, I learned something in the process anyway.

Having made my apology: This PR adds a function, `LanguageClient#highlightSymbolUnderCursor` to highlight references of the symbol under the cursor. It also adds a trigger for `CursorHold` to fire this new function when the user hasn't moved the cursor for `updatetime`.
The feature can be turned off or on by setting the `LanguageClient_highlightSymbolUnderCursor` option, which is set to 1 by default.

The drawback of having this enabled is that it has to call `nvim_buf_clear_highlight` on each `CursorMoved` trigger, as to clear any possible highlighted references caused by this new feature.

<img src="https://user-images.githubusercontent.com/4250565/71771583-5a1f6300-2f35-11ea-8fdf-5f14765c0832.gif" width="350"/>

- Did you upgrade to latest plugin version?

Yes.

- Did you upgrade to/compile latest binary? Run shell command
  `bin/languageclient --version` to get its version number.

Yes.

- (Neovim users only) Did you check output of `:checkhealth LanguageClient`?

```
health#LanguageClient#check
========================================================================
  - OK: binary found: /Users/USER/.local/share/nvim/plugged/LanguageClient-neovim/bin/languageclient
  - OK: languageclient 0.1.155 1ffab7ef19e2acae6f32c6f3a27581429d28e47b
  - OK: Floating window is supported and will be used for hover
```
                                                                        
- Did you check [troubleshooting]?

Yes. I get the same error with a `min-vimrc.vim`. I have shared the configuration below.

[troubleshooting]: https://github.com/autozimu/LanguageClient-neovim/blob/next/INSTALL.md#6-troubleshooting

## Describe the bug
A clear and concise description of what the bug is.

Using Julia and neovim, with the following configuration:

The `LanguageClient-neovim` plugin sends the following message to the Julia LanguageServer:

```
14:06:19 INFO writer-Some("julia") src/rpcclient.rs:215 => Some("julia") {"jsonrpc":"2.0","method":"initialize","params":{"capabilities":{"textDocument":{"colorProvider":null,"completion":{"completionItem":{"snippetSupport":false}},"declaration":{"linkSupport":true},"definition":{"linkSupport":true},"implementation":{"linkSupport":true},"publishDiagnostics":{"relatedInformation":true},"signatureHelp":{"signatureInformation":{"parameterInformation":{"labelOffsetSupport":true}}},"typeDefinition":{"linkSupport":true}},"workspace":{"applyEdit":true,"didChangeWatchedFiles":{"dynamicRegistration":true}}},"processId":77091,"rootPath":"/Users/USER/GitRepos/Test","rootUri":"file:///Users/USER/GitRepos/Test","trace":"off"},"id":1}
```

`colorProvider` is set to `null` in this message. [According to the specification](https://microsoft.github.io/language-server-protocol/specifications/specification-3-14/), `colorProvider` can either be not defined or a boolean value.

This causes the following error: 

```
┌ Warning: no Manifest.toml file found, static paths used
└ @ Revise ~/.julia/packages/Revise/S7mrl/src/Revise.jl:1190
[ Info: Started symbol server
[ Info: Tried to load bac558e1-5e72-5ebc-8fee-abe8a469f55d but failed to find it in the manifest.
[ Info: Tried to load 37e2e46d-f89d-539d-b4ee-838fcccc9c8e but failed to find it in the manifest.
[ Info: Tried to load 2f01184e-e22b-5df5-ae63-d93ebab69eaf but failed to find it in the manifest.
[ Info: Tried to load 8f399da3-3557-5675-b5ff-fb832c97cbdb but failed to find it in the manifest.
[ Info: Tried to load b8f27783-ece8-5eb3-8dc8-9495eed66fee but failed to find it in the manifest.
[ Info: Tried to load fdba3010-5040-5b88-9595-932c9decdf73 but failed to find it in the manifest.
[ Info: store set in 0.014803887 seconds
[ Info: Dict{String,Any}("workspace" => Dict{String,Any}("didChangeWatchedFiles" => Dict{String,Any}("dynamicRegistration" => true),"applyEdit" => true),"textDocument" => Dict{String,Any}("definition" => Dict{String,Any}("linkSupport" => true),"declaration" => Dict{String,Any}("linkSupport" => true),"publishDiagnostics" => Dict{String,Any}("relatedInformation" => true),"completion" => Dict{String,Any}("completionItem" => Dict{String,Any}("snippetSupport" => false)),"implementation" => Dict{String,Any}("linkSupport" => true),"signatureHelp" => Dict{String,Any}("signatureInformation" => Dict{String,Any}("parameterInformation" => Dict{String,Any}("labelOffsetSupport" => true))),"typeDefinition" => Dict{String,Any}("linkSupport" => true),"colorProvider" => nothing))
ERROR: MethodError: Cannot `convert` an object of type Nothing to an object of type Bool
Closest candidates are:
  convert(::Type{T}, !Matched::T) where T<:Number at number.jl:6
  convert(::Type{T}, !Matched::Number) where T<:Number at number.jl:7
  convert(::Type{T}, !Matched::Ptr) where T<:Integer at pointer.jl:23
  ...
Stacktrace:
 [1] convert(::Type{Union{Missing, Bool}}, ::Nothing) at ./missing.jl:69
 [2] LanguageServer.Capabilities(::Nothing) at /Users/USER/.julia/dev/LanguageServer/src/protocol/initialize.jl:4
 [3] LanguageServer.TextDocumentClientCapabilities(::Dict{String,Any}) at /Users/USER/.julia/dev/LanguageServer/src/protocol/protocol.jl:37
 [4] LanguageServer.ClientCapabilities(::Dict{String,Any}) at /Users/USER/.julia/dev/LanguageServer/src/protocol/protocol.jl:37
 [5] LanguageServer.InitializeParams(::Dict{String,Any}) at /Users/USER/.julia/dev/LanguageServer/src/protocol/initialize.jl:183
 [6] parse_params(::Type{Val{:initialize}}, ::Dict{String,Any}) at /Users/USER/.julia/dev/LanguageServer/src/requests/init.jl:73
 [7] parse(::Type{LanguageServer.JSONRPC.Request}, ::Dict{String,Any}) at /Users/USER/.julia/dev/LanguageServer/src/jsonrpc.jl:46
 [8] run(::LanguageServerInstance) at /Users/USER/.julia/dev/LanguageServer/src/languageserverinstance.jl:101
 [9] top-level scope at none:1
/Users/USER/.julia/dev/LanguageServer/contrib/languageserver.sh: line 34: kill: (77142) - No such process
```

[LanguageServer.jl](https://github.com/julia-vscode/LanguageServer.jl) conforms to the specification strictly. See discussion  here for more information: https://github.com/julia-vscode/LanguageServer.jl/pull/454


## Environment
- neovim/vim version (`nvim --version` or `vim --version`):

```
$ nvim --version
NVIM v0.5.0-279-ge922576bd
Build type: Release
LuaJIT 2.1.0-beta3
Compilation: /Applications/Xcode-10.1.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/clang -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=1 -O2 -DNDEBUG -Wall -Wextra -pedantic -Wno-unused-parameter -Wstrict-prototypes -std=gnu99 -Wshadow -Wconversion -Wmissing-prototypes -Wimplicit-fallthrough -Wvla -fstack-protector-strong -fdiagnostics-color=auto -DINCLUDE_GENERATED_DECLARATIONS -D_GNU_SOURCE -DNVIM_MSGPACK_HAS_FLOAT32 -DNVIM_UNIBI_HAS_VAR_FROM -DMIN_LOG_LEVEL=3 -I/Users/travis/build/neovim/bot-ci/build/neovim/build/config -I/Users/travis/build/neovim/bot-ci/build/neovim/src -I/Users/travis/build/neovim/bot-ci/build/neovim/.deps/usr/include -I/usr/local/opt/gettext/include -I/usr/include -I/Users/travis/build/neovim/bot-ci/build/neovim/build/src/nvim/auto -I/Users/travis/build/neovim/bot-ci/build/neovim/build/include
Compiled by travis@Traviss-Mac-6.local

Features: +acl +iconv +tui
See ":help feature-compile"

   system vimrc file: "$VIM/sysinit.vim"
  fall-back for $VIM: "/share/nvim"

Run :checkhealth for more info
```

- This plugin version (`git rev-parse --short HEAD`):

```
$ cd ~/.local/share/nvim/plugged/LanguageClient-neovim
$ git rev-parse --short HEAD
0394fba
```

- This plugin's binary version (`bin/languageclient --version`):

```
$ ~/.local/share/nvim/plugged/LanguageClient-neovim/bin/languageclient --version
languageclient 0.1.155 1ffab7ef19e2acae6f32c6f3a27581429d28e47b
```

- Minimal vimrc content (A minimal vimrc is the smallest vimrc that could
  reproduce the issue. Refer to an example [here][min-vimrc.vim]):

```
call plug#begin('~/.local/share/nvim/plugged')

Plug 'JuliaEditorSupport/julia-vim'
Plug 'autozimu/LanguageClient-neovim', {
    \ 'branch': 'next',
    \ 'do': 'bash install.sh',
    \ }

call plug#end()

" Always draw sign column. Prevent buffer moving when adding/deleting sign.
set signcolumn=yes

let g:LanguageClient_serverCommands = {
    \ 'julia': ['~/Applications/Julia-1.3.app/Contents/Resources/julia/bin/julia', '--startup-file=no', '--history-file=no', '--project', '-e', '
    \       using LanguageServer;
    \       using Pkg;
    \       env_path = dirname(Pkg.Types.Context().env.project_file);
    \       debug = false;
    \       server = LanguageServer.LanguageServerInstance(stdin, stdout, debug, env_path, "");
    \       server.runlinter = true;
    \       run(server);
    \   '],
    \ }

let g:LanguageClient_loggingLevel = 'INFO'
let g:LanguageClient_virtualTextPrefix = ''
let g:LanguageClient_loggingFile =  expand('~/.local/share/nvim/LanguageClient.log')
let g:LanguageClient_serverStderr = expand('~/.local/share/nvim/LanguageServer.log')
```

- Language server link and version:

https://github.com/julia-vscode/LanguageServer.jl/tree/b9ba36fc96801671752ba15242a3d4fc2e8d25be

[min-vimrc.vim]: https://github.com/autozimu/LanguageClient-neovim/blob/next/min-vimrc.vim

## To Reproduce
Steps to reproduce the behavior:
1. Store settings above in min-vimrc.vim
1. Start vim: `nvim -u min-vimrc.vim test.jl`
1. See error in `~/.local/share/nvim/LanguageServer.log`

## Current behavior

The current behaviour sends `colorProvider: null` as part of the JSON, and that does not match the spec.

## Expected behavior

Send `colorProvider: false` instead, or don't send a key value pair for the key `colorProvider` if the value is `null`.


- Did you upgrade to latest plugin version?
>Yes

- Did you upgrade to/compile latest binary? Run shell command
>Yes

  `bin/languageclient --version` to get its version number.
>`languageclient 0.1.155 1ffab7ef19e2acae6f32c6f3a27581429d28e47b`

- (Neovim users only) Did you check output of `:checkhealth LanguageClient`?
>OK

## Describe the bug
The display of complement candidates is strange on scala.

## Environment
- neovim/vim version (`nvim --version` or `vim --version`):
>`0.4.3`

- This plugin version (`git rev-parse --short HEAD`):
>`0394fbaa2def5a5e304f7f4c08def4de4cb9e689`

- Minimal vimrc content (A minimal vimrc is the smallest vimrc that could
```
set hidden	
set completeopt=menu	
set signcolumn=yes	

let g:LanguageClient_useVirtualText = 0	
let g:LanguageClient_autoStart = 1
let g:LanguageClient_loadSettings = 1

let g:LanguageClient_serverCommands = {	
    \ 'scala': ['metals-vim']
    \ }	
```

[min-vimrc.vim]: https://github.com/autozimu/LanguageClient-neovim/blob/next/min-vimrc.vim

## To Reproduce
Steps to reproduce the behavior:
##### 1. Install Metals
```
// ~/.sbt/1.0/plugins/plugins.sbt
resolvers += Resolver.sonatypeRepo("snapshots")
addSbtPlugin("ch.epfl.scala" % "sbt-bloop" % "1.3.4")
```
##### 2. Create Scala project
```
$ sbt new nabezokodaikon/scala-basic.g8
```
##### 3. Run sbt
```
$ cd my-something-project
$ sbt
```
##### 4. Start Neovim
##### 5. Open Main.scala File
##### 6. Start Metals
##### 7. Edit Main.scala

<img width="797" alt="スクリーンショット 2020-01-02 2 08 10" src="https://user-images.githubusercontent.com/3197942/71644072-11ce2e00-2d06-11ea-8a6e-18fd291987a5.png">

For example, the character `scala` after` Int` is entered by completion. Therefore, it will not be code that can be compiled.