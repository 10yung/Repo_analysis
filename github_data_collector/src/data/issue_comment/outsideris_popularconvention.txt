I did:

```
$ git clone https://github.com/outsideris/popularconvention.git
$ cd popularconvention
$ npm install 
audited 253 packages in 2.032s
found 43 vulnerabilities (17 low, 12 moderate, 14 high)
  run `npm audit fix` to fix them, or `npm audit` for details

$ bower install

$ coffee server.coffee --nodejs
TypeError: process.EventEmitter is not a constructor
    at Object.<anonymous> (/popularconvention/node_modules/restler/lib/restler.js:91:21)
    at Module._compile (internal/modules/cjs/loader.js:689:30)
    at Object.Module._extensions..js (internal/modules/cjs/loader.js:700:10)
    at Module.load (internal/modules/cjs/loader.js:599:32)
    at tryModuleLoad (internal/modules/cjs/loader.js:538:12)
    at Function.Module._load (internal/modules/cjs/loader.js:530:3)
    at Module.require (internal/modules/cjs/loader.js:637:17)
    at require (internal/modules/cjs/helpers.js:22:18)
    at Object.<anonymous> (/popularconvention/src/timeline.coffee:4:13)
    at Object.<anonymous> (/popularconvention/src/timeline.coffee:69:4)
```

I also tried to write a `docker-compose`: 

```yaml
version: "2"

services:
  websever:
    build:
      context: .
    volumes:
      - ./:/home/
    ports:
      - 8020:8020
    links:
      - mongo
  mongo:
    build:
      context: ./data/
    volumes:
      - ./data/:/home
```

Which with I get this: 

```
$ docker-compose up
Starting popularconvention_mongo_1 ...
Starting popularconvention_mongo_1 ... done
Starting popularconvention_websever_1 ...
Starting popularconvention_websever_1 ... done
Attaching to popularconvention_mongo_1, popularconvention_websever_1
websever_1  | SyntaxError: Block-scoped declarations (let, const, function, class) not yet supported outside strict mode
websever_1  |   at exports.runInThisContext (vm.js:53:16)
...
websever_1  |   at Object.exports.run (/usr/local/lib/node_modules/coffee-script/lib/coffee-script/coffee-script.js:119:23)
websever_1  |   at compileScript (/usr/local/lib/node_modules/coffee-script/lib/coffee-script/command.js:207:29)
websever_1  |   at compilePath (/usr/local/lib/node_modules/coffee-script/lib/coffee-script/command.js:160:14)
websever_1  |   at Object.exports.run (/usr/local/lib/node_modules/coffee-script/lib/coffee-script/command.js:95:21)
websever_1  |   at Object.<anonymous> (/usr/local/lib/node_modules/coffee-script/bin/coffee:7:41)
websever_1  |   at Module._compile (module.js:409:26)
websever_1  |   at Object.Module._extensions..js (module.js:416:10)
websever_1  |   at Module.load (module.js:343:32)
websever_1  |   at Function.Module._load (module.js:300:12)
websever_1  |   at Function.Module.runMain (module.js:441:10)
websever_1  |   at startup (node.js:140:18)
websever_1  |   at node.js:1043:3
websever_1  |
mongo_1     | 2019-01-24T09:14:24.542+0000      building a list of dbs and collections to restore from /home/dump dir
mongo_1     | 2019-01-24T09:14:24.546+0000      cannot drop system collection popular_convention2.system.users, skipping
mongo_1     | 2019-01-24T09:14:24.546+0000      reading metadata file from /home/dump/popular_convention2/system.users.metadata.json
mongo_1     | 2019-01-24T09:14:24.547+0000      reading metadata file from /home/dump/popular_convention2/conventions.metadata.json
mongo_1     | 2019-01-24T09:14:24.547+0000      reading metadata file from /home/dump/popular_convention2/score.metadata.json
mongo_1     | 2019-01-24T09:14:24.548+0000      reading metadata file from /home/dump/popular_convention2/worklogs.metadata.json
...
mongo_1     | 2019-01-24T09:14:24.679+0000      finished restoring popular_convention2.score (2291 documents)
mongo_1     | 2019-01-24T09:14:24.690+0000      done
popularconvention_websever_1 exited with code 1
```

Is someone experiencing the same issues?

More recently many people have started using trailing commas in lists in JavaScript to make git diffs/merging easier (fewer changed lines), and this is also supported in other languages, like C#.

I think it's definitely still in the minority, but it would be a cool metric to be able to see, separate from the comma before/comma after convention.

Could be cool to see that information as well.

See https://github.com/outsideris/popularconvention/blob/master/src/parser/js-parser.coffee#L136

``` JavaScript
onespace = /function(\s+.)*\s+\(/
nospace = /function(\s+.)*\(/
```

These regex check for `function()` vs `function ()` without a function name, not for `function foo ()` vs `function foo()` like advertised.

Either the regex are wrong or the documentation is.

Ideal would be to check for `function()` vs `function ()` and also for `function foo ()` vs `function foo()`

Tests:

``` JavaScript
var onespace = /function(\s+.)*\s+\(/;
'function foo () {'.match(onespace); // => null
'function foo() {'.match(onespace);  // => null
'function () {'.match(onespace);     // => ["function (", undefined]
'function() {'.match(onespace);      // => null

var nospace = /function(\s+.)*\(/;
'function foo () {'.match(nospace); // => null
'function foo() {'.match(nospace);  // => null
'function () {'.match(nospace);     // => null
'function() {'.match(nospace);      // => ["function(", undefined]
```

Pie (and similar) charts are generally considered worse than bar charts in pretty much every measurable way.

See discussion at: http://www.quora.com/How-and-why-are-pie-charts-considered-evil-by-data-visualization-experts

Including this linked article: http://www.perceptualedge.com/articles/08-21-07.pdf

Switching to bar charts should be quite straightforward, and would make it easier to see the proportions visually.

We, developers, get into flamewars over whether to align array structure and variable assignments. Statistics of whether statements are aligned or not would be very interesting.

In [ONGR Strict Standards](https://github.com/ongr-io/ongr-strict-standard) (Squiz based, PSR-2 compatible) we forced unaligned statements, because of the argument that one element might git diff a lot of neighbourghing lines.

Aligned code example we dislike:

``` php
$garry            = 'red';
$longVariableName = 'orange';
$blue             = 'green';
```

``` javascript
var func = function () {…};
var func = function() {…};
```

rationale for “Crockford style” is: result of “no space” if you remove name.

``` javascript
function foo() {…}
function () {…}
```

refer https://twitter.com/rauschma/status/465531822425014272

In PHP some people do:

```
interface CommandBus
```

and some people do:

```
interface CommandBusInterface
```

Like in C# you might use `ICommandBus`.

Similarly you have `EventGeneratorTrait` and `EventGenerator` for traits.

It is now possible to link [directly to a language](http://sideeffect.kr/popularconvention#python) but it would be even better to be able to link to a particular convention graph/section (like line length).

### c# :: Constant Name

> Constant name is neither all caps and pascal cased [<sup>ref</sup>](https://github.com/outsideris/popularconvention/blob/5f0fedf8883287e1016428e4327268456d763704/src/parser/csharp-parser.coffee#L154)

:confused: I'm not sure what this is going for as it lists snake/pascal case in the example. Could this maybe be worded deifferently?
