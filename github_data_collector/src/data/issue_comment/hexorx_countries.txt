I wouldn't call this PR ready until someone can confirm that this is a real fix.

I attempted to use the small reproduction of the thread safety issue but could not get it to fail locally.

In general, though, this puts a semaphore around access to the `ISO3166::Data.config`, ensuring that threads aren't entering this method during another thread's execution of this.
With i18n_data updated to 0.10.0 in gemspec, 4 tests fail, please fix the failures so newer version of i18n_data can be used.

```
$ bundle install
Fetching gem metadata from https://rubygems.org/..........
Resolving dependencies...
Using rake 13.0.1
Using concurrent-ruby 1.1.5
Using i18n 1.7.0
Using minitest 5.13.0
Using thread_safe 0.3.6
Using tzinfo 1.2.5
Using zeitwerk 2.2.2
Using activesupport 6.0.1
Using bundler 1.17.3
Fetching i18n_data 0.10.0 (was 0.8.0)
Installing i18n_data 0.10.0 (was 0.8.0)
Using sixarm_ruby_unaccent 1.2.0
Using unicode_utils 1.4.0
Using countries 3.0.0 from source at `.`
Using diff-lcs 1.3
Using geocoder 1.5.2
Using mini_portile2 2.4.0
Using money 6.13.6
Using nokogiri 1.10.7
Using retryable 3.0.5
Using rspec-support 3.9.0
Using rspec-core 3.9.0
Using rspec-expectations 3.9.0
Using rspec-mocks 3.9.0
Using rspec 3.9.0
Bundle complete! 9 Gemfile dependencies, 24 gems now installed.
Bundled gems are installed into `./vendor/bundle`
(debian-sid)pravi@vatapi:~/forge/debian/git/ruby-team/ruby-countries-upstream$ bundle exec rake
/usr/bin/ruby2.5 -I/home/pravi/forge/debian/git/ruby-team/ruby-countries-upstream/vendor/bundle/ruby/2.5.0/gems/rspec-core-3.9.0/lib:/home/pravi/forge/debian/git/ruby-team/ruby-countries-upstream/vendor/bundle/ruby/2.5.0/gems/rspec-support-3.9.0/lib /home/pravi/forge/debian/git/ruby-team/ruby-countries-upstream/vendor/bundle/ruby/2.5.0/gems/rspec-core-3.9.0/exe/rspec --pattern spec/\*\*\{,/\*/\*\*\}/\*_spec.rb --color --warnings
/home/pravi/forge/debian/git/ruby-team/ruby-countries-upstream/lib/countries/country.rb:50: warning: method redefined; discarding old start_of_week
/home/pravi/forge/debian/git/ruby-team/ruby-countries-upstream/lib/countries/country.rb:8: warning: previous definition of start_of_week was here
Run options:
  include {:focus=>true}
  exclude {:perf=>true}

All examples were filtered out; ignoring {:focus=>true}
....../home/pravi/forge/debian/git/ruby-team/ruby-countries-upstream/vendor/bundle/ruby/2.5.0/gems/money-6.13.6/lib/money/money.rb:151: warning: method redefined; discarding old locale_backend=
/home/pravi/forge/debian/git/ruby-team/ruby-countries-upstream/vendor/bundle/ruby/2.5.0/gems/money-6.13.6/lib/money/money.rb:161: warning: method redefined; discarding old use_i18n=
.............................................................FF.......FF..................................................................................................

Failures:

  1) ISO3166::Country all_translated should return an alphabetized list of all country names translated to the selected locale
     Failure/Error: expect(countries.first).to eq('Afghanistan')
     
       expected: "Afghanistan"
            got: "Aruba"
     
       (compared using ==)
     # ./spec/country_spec.rb:325:in `block (3 levels) in <top (required)>'

  2) ISO3166::Country all_translated should return an alphabetized list of all country names in English if no locale is passed
     Failure/Error: expect(countries.first).to eq('Afghanistan')
     
       expected: "Afghanistan"
            got: "Aruba"
     
       (compared using ==)
     # ./spec/country_spec.rb:335:in `block (3 levels) in <top (required)>'

  3) ISO3166::Country translations should return an hash of all country names translated to the selected locale
     Failure/Error: expect(countries.first[0]).to eq('AF')
     
       expected: "AF"
            got: "AW"
     
       (compared using ==)
     # ./spec/country_spec.rb:406:in `block (3 levels) in <top (required)>'

  4) ISO3166::Country translations should return an hash of all country names in English if no locale is passed
     Failure/Error: expect(countries.first[0]).to eq('AF')
     
       expected: "AF"
            got: "AW"
     
       (compared using ==)
     # ./spec/country_spec.rb:416:in `block (3 levels) in <top (required)>'

Finished in 4.12 seconds (files took 0.25584 seconds to load)
176 examples, 4 failures

Failed examples:

rspec ./spec/country_spec.rb:321 # ISO3166::Country all_translated should return an alphabetized list of all country names translated to the selected locale
rspec ./spec/country_spec.rb:331 # ISO3166::Country all_translated should return an alphabetized list of all country names in English if no locale is passed
rspec ./spec/country_spec.rb:403 # ISO3166::Country translations should return an hash of all country names translated to the selected locale
rspec ./spec/country_spec.rb:413 # ISO3166::Country translations should return an hash of all country names in English if no locale is passed

```
[The standard lists no subdivisions for Faroe Islands](https://www.iso.org/obp/ui/#iso:code:3166:FO).
Update to match current ISO 3166-2 for DK, EE, FI, & CZ
Sorry, I wasn't able to find a way to access all the ISO 639-1 language codes? Is that something we can easily do with this gem?
What we see on your github repositories '3.0.0' branch doesn't match to what we get after 'bundle installing' your gem.

To repeat this issue:
0. remove all 'countries' gem installations
1. create a gemfile with this line and make a bundle install
```
gem 'countries', '3.0.0'
```
2. go to the folder where it's installed and check for this changes for example
https://github.com/hexorx/countries/commit/8158e77261f4b0bb636e9800ababcb5555aa2150
3. you wont find any

You may even add this and there's still will be the same difference with the master branch
```
gem 'countries', git: 'https://github.com/hexorx/countries.git', branch: 'master'
```
Portugual -> Portugal. Closes #583

We keep having this come up at work. It looks like there was already a PR for this, but just in-case (it would reduce dev friction our side not to maintain a fork just to avoid this)

Fixes #584