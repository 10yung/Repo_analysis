When called from the `Database` query methods, the `Record` generator (https://github.com/shacknetisp/records/blob/ab049652ffb11378cd257d751c7e6d557308d841/records.py#L367) accesses the `ResultProxy` cursor *after* the database connection has been closed. This causes problems with SQLite in particular (#149).

This PR corrects the behavior by using the `close_with_result` connection parameter for the query methods, since they only return one result which is used in the generator, instructing SQLAlchemy to have the `ResultProxy` cursor close the connection itself once all the results (via the generator) have been consumed. In this case we do not close the connection manually.

For more documentation, see https://docs.sqlalchemy.org/en/13/core/connections.html and find "close_with_result".

Fixes #149. Fixes #128. Fixes #189.
Closes #177.
my code is like:
```python
import records
db = records.Database("sqlite:///test_db.db")
rows = db.query("select * from test_table")
print(rows[0])
```
I'm pretty sure there is content in test table and other operations like 'insert' or create_table is perfectly normal. But when I use select query like README, it throws an exception as I'm fetching the data from row, says `Cannot operate on a closed database`.
Condensed two if statements into one and removed redundant else statement. Should be syntactically the same.
Fixes broken tablib links
Update the outdated Tablib docs links.

The openpyxl dependency doesn't have to be < 2.5 anymore since the [issue in tablib that required this](https://github.com/vinayak-mehta/tablib/issues/324) is fixed.\
Also, openpyxl < 2.5 has some buggy version check that fails when deployed in AWS Lambda, thus making records not useable in this environment.

As the title, I am just simply trying this api with the provided example
rc = mk.RecordCollection('metasampledata.txt')
r= rc.peak()
I've found one use case that was a bit difficult, which is using records to perform routine maintenance. I was able to work around with the following code(`sql` is a records db):

    from psycopg2.extensions import ISOLATION_LEVEL_AUTOCOMMIT
    ...

    vac_conn = sql._engine.raw_connection()
    vac_conn.set_isolation_level(ISOLATION_LEVEL_AUTOCOMMIT)
    vac_curr = vac_conn.cursor()
    vac_curr.execute("VACUUM (ANALYZE)")
    vac_conn.close()

It would be great to add a `raw` flag to the `query` method, or even just have a `raw` method to be able to call sql outside of transaction blocks.
DB connection is an IO intensive operationï¼Œcould records support asyncio to connect to many db machines  asynchronously? 