### Is your feature request related to a problem? Please describe:
The latest version of the cmd tool tries to rebuild the windows binary after the icon has been packaged and that rebuild will fail if the user doesn't have relevant windows stuff (guessing MinGW) and thus gives an error.
```bash
/usr/lib64/golang/pkg/tool/linux_amd64/link: running x86_64-solus-linux-gcc failed: exit status 1
x86_64-solus-linux-gcc: error: unrecognized command line option ‘-mwindows’
```

Some users including my self might not have the required windows compiler toolchains (guessing that that's the case here) becuase they might be using fyne-cross instead for the windows packaging and rebuilding.

### Describe the solution you'd like to see:
I Would like to have a flag to pass to have it not try to rebuild because it is doomed to fail.

The **input indicator box** is located outside the app. 
windows and mac.  
like this:  
![avatar](http://storage.quickex.com.cn/WechatIMG70.jpeg)
![avatar](http://storage.quickex.com.cn/WechatIMG71.jpeg)
### Description:
Applications that wish to handle input without using the Entry widget cannot currently work on mobile.
This allows the app to request a keyboard show or hide programatically.

### Checklist:

- [ ] Tests included. <- I could not find a way to test this, it is a thin layer on top of existing functionality
- [x] Lint and formatter run with no errors.
- [x] Tests all pass.
- [x] Public APIs match existing style.

The following code has been used to run it. The time.Sleep is not required normally but this app wants the keyboard to appear on load, which must be slightly delayed.

```go
	if mobDev, ok := fyne.CurrentDevice().(mobile.Device); ok {
		go func() {
			time.Sleep(time.Second/10)
			mobDev.ShowVirtualKeyboard()
		}()
	}
```

resulting in:

![IMG_0220](https://user-images.githubusercontent.com/294436/72386548-78e1de80-3719-11ea-85ea-5e6b588f9084.PNG)

I just watrched the youtiube presenation series of fyne.

Wow !!! 

For the 2.0 release i think that pion webrtc is the perfect marriage. 
I bet the Webrtc pion tram would love to team up on this.


**Is your feature request related to a problem? Please describe.**
To make an application that can be displayed on two screens of the same computer, you have to be able to choose on which screen you launch a window. 

**Is it possible to construct a solution with the existing API?**
Should be possible as far as I can see.

**Describe the solution you'd like**
Choose on which screen you want to display the window.
**Describe the bug**
When updating the .Text var for either a Label or Entry (those are the ones that I have tested, might be more but I don't know) and then calling .Refresh() for that widget, nothing happens.

**To Reproduce**
Steps to reproduce the behaviour:
1. Create a widget and change it's text with `yourWidgetName.Text = "something"`.
2. Refresh the widget by calling `yourWidgetName.Refresh()` afterwords.
3. Test the application for the change.
4. See that nothing happens

**Example code:**
```go
package main

import (
	"fyne.io/fyne"
	"fyne.io/fyne/app"
	"fyne.io/fyne/layout"
	"fyne.io/fyne/widget"
	"strconv"
)

func isNumeric(s string) bool {
	_, err := strconv.ParseFloat(s, 64)
	return err == nil
}

func main() {
	a := app.New()
	w := a.NewWindow("Temperature Converter")

	inputC := widget.NewEntry()
	inputF := widget.NewEntry()

	label := widget.NewLabel("Celsius =")

	inputC.OnChanged = func(text string) {
		if !isNumeric(inputC.Text) {
			return
		}

		cDeg, _ := strconv.Atoi(inputC.Text)
		fDeg := float64(cDeg)*(9.0/5.0) + 32

		inputF.Text = strconv.Itoa(int(fDeg))
		inputF.Refresh()
	}

	inputF.OnChanged = func(text string) {
		if !isNumeric(inputF.Text) {
			return
		}

		fDeg, _ := strconv.Atoi(inputF.Text)
		cDeg := (float64(fDeg) - 32) * (5.0 / 9.0)

		inputC.Text = strconv.Itoa(int(cDeg))
		inputC.Refresh()
	}

	w.SetContent(fyne.NewContainerWithLayout(layout.NewGridLayout(4),
		inputC, widget.NewLabel("Celsius ="), inputF, widget.NewLabel("Fahrenheit")))

	w.ShowAndRun()
}
```

**Device (please complete the following information):**
 - OS: [e.g. Linux, iOS] Solus (Linux)
 - Version [e.g. 22] 4
 - Go version [e.g. 1.12] 1.13.5
 - Fyne version [e.g. 1.1 or git SHA] 1.2.1

Support applications in various languages, including some that are not even supported by our current font.
I'm trying to make an application using Fyne, where I need to display Bengali. But didn't find a way to display it. Is there a way to display Unicode/different language?   
**Describe the bug**
When building an app and trying to test it on the computer as if it was running on a phone, we compile with `go build -tags mobile`. But doing so makes it impossible to type anything into the entry fields, however the buttons work.

**To Reproduce**
1. Build the following example code using `go build -tags mobile`:
```go                                                                                                                                
package main

import (
    "fmt"
    "fyne.io/fyne"
    "fyne.io/fyne/app"
    "fyne.io/fyne/layout"
    "fyne.io/fyne/widget"
)

func main() {
    app := app.New()

    window := app.NewWindow("Example")

    user := widget.NewEntry()
    user.SetPlaceHolder("Username")

    password := widget.NewPasswordEntry()
    password.SetPlaceHolder("Password")

    login := widget.NewButton("Login", func() {
        fmt.Println("You may now act as if you were logged in :)")
    })

    window.SetContent(fyne.NewContainerWithLayout(layout.NewGridLayout(1), user, password, login))

    window.ShowAndRun()
}

```
2. try to type in the entry widgets.

**Device (please complete the following information):**
- OS: Solus (A Linux Distrubution)
- Version: Solus 4.0 using Linux Kernel 5.3.18
- Go version: 1.13.5
- Fyne version: 1.2.0 and 1.2.1 have been tested.


**Describe the bug**
When typing in an entry widget, the button with the symbol **´** does not work and makes it impossible to type letters like "É", "é", "ć" and so on. You are supposed to first press **´** and then a letter and you should then get something like É or ć depending on what letter you pressed after. See https://en.wikipedia.org/wiki/%C3%89 for more information on the usage in various languages.

Copy pasting the letter makes it show correctly in the entry widget. Might be that the key just isn't checked for presses or something along those lines.

**To Reproduce**
1. Focus an entry widget of your liking
2. Click on the **´** button on your keyboard.
3. Press any letter of your liking for example **e**, **E** or **a**.
4. Look and see that nothing happens. Not even the letter is shown.

**Device (please complete the following information):**
 - OS: Solus (A Linux Distrubution)
 - Version: Solus 4.0 using Linux Kernel 5.3.18
 - Go version: `1.13.5`
 - Fyne version: 1.1.2, 1.2.0 have all been tested and does show this bug.
