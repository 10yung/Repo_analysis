```
Available devices:
[1] Capture screen 0	
[2] Capture screen 1	
Enter device number: 2
/usr/local/bin/ffmpeg -hide_banner -loglevel info -thread_queue_size 512 -f avfoundation  -i "2" -thread_queue_size 512 -f avfoundation -video_size 160x120 -framerate   -i "0" -c:v libx264 -crf 0 -preset ultrafast -filter_complex 'overlay=main_w-overlay_w-10:main_h-overlay_h-10' -threads 0 "/Users/shyamalchandra/Desktop/Screencast 2018-09-26 at 05.18.17.mkv"
[avfoundation @ 0x7fec75001200] Selected pixel format (yuv420p) is not supported by the input device.
[avfoundation @ 0x7fec75001200] Supported pixel formats:
[avfoundation @ 0x7fec75001200]   uyvy422
[avfoundation @ 0x7fec75001200]   yuyv422
[avfoundation @ 0x7fec75001200]   nv12
[avfoundation @ 0x7fec75001200]   0rgb
[avfoundation @ 0x7fec75001200]   bgr0
[avfoundation @ 0x7fec75001200] Overriding selected pixel format to use uyvy422 instead.
[avfoundation @ 0x7fec75001200] Stream #0: not enough frames to estimate rate; consider increasing probesize
Input #0, avfoundation, from '2':
  Duration: N/A, start: 12584.266167, bitrate: N/A
    Stream #0:0: Video: rawvideo (UYVY / 0x59565955), uyvy422, 3840x2160, 1000k tbr, 1000k tbn, 1000k tbc
Cannot find a matching stream for unlabeled input pad 1 on filter Parsed_overlay_0
```
trying to set the extension, I get this error `Invalid arguments "-e"`
Hello there
I put together an aur <a href="https://aur.archlinux.org/packages/ffscreencast"> package</a> for arch linux of this script. It would be helpful to other users if you would mention it in readme.
Thanks</br>
On sidenote are you still planning to work on this script?
When i try to list cameras ffscreencast cant find any 
ffscreencast -c --dry
Available devices:

Enter device number: 0
Wrong device number

No Camera Devices found, with ffmpeg all devices found and working 
ffmpeg -f avfoundation -list_devices true -i ""

AVFoundation video devices:
[AVFoundation input device @ 0x7ff80b497440] [0] CamTwist
[AVFoundation input device @ 0x7ff80b497440] [1] Built-in iSight
[AVFoundation input device @ 0x7ff80b497440] [2] CamTwist (2VUY)
[AVFoundation input device @ 0x7ff80b497440] [3] Capture screen 0
[AVFoundation input device @ 0x7ff80b497440] AVFoundation audio devices:
[AVFoundation input device @ 0x7ff80b497440] [0] Soundflower (64ch)
[AVFoundation input device @ 0x7ff80b497440] [1] Built-in Microphone
[AVFoundation input device @ 0x7ff80b497440] [2] Soundflower (2ch)
[AVFoundation input device @ 0x7ff80b497440] [3] Built-in Input

FFmpeg config 
ffmpeg version 3.4 Copyright (c) 2000-2017 the FFmpeg developers
  built with Apple LLVM version 8.0.0 (clang-800.0.42.1)
  configuration: --prefix=/usr/local/Cellar/ffmpeg/3.4 --enable-shared --enable-pthreads --enable-version3 --enable-hardcoded-tables --enable-avresample --cc=clang --host-cflags='-I/Library/Java/JavaVirtualMachines/jdk1.8.0_73.jdk/Contents/Home/include -I/Library/Java/JavaVirtualMachines/jdk1.8.0_73.jdk/Contents/Home/include/darwin' --host-ldflags= --enable-gpl --enable-chromaprint --enable-ffplay --enable-frei0r --enable-libass --enable-libbluray --enable-libbs2b --enable-libcaca --enable-libfdk-aac --enable-libfontconfig --enable-libfreetype --enable-libgsm --enable-libmodplug --enable-libmp3lame --enable-libopencore-amrnb --enable-libopencore-amrwb --enable-libopenh264 --enable-libopus --enable-librtmp --enable-librubberband --enable-libsnappy --enable-libsoxr --enable-libspeex --enable-libssh --enable-libtesseract --enable-libtheora --enable-libtwolame --enable-libvidstab --enable-libvorbis --enable-libvpx --enable-libwavpack --enable-libwebp --enable-libx264 --enable-libx265 --enable-libxvid --enable-libzimg --enable-libzmq --enable-opencl --enable-videotoolbox --enable-openssl --enable-lzma --enable-libopenjpeg --disable-decoder=jpeg2000 --extra-cflags=-I/usr/local/Cellar/openjpeg/2.3.0/include/openjpeg-2.3 --enable-nonfree
  libavutil      55. 78.100 / 55. 78.100
  libavcodec     57.107.100 / 57.107.100
  libavformat    57. 83.100 / 57. 83.100
  libavdevice    57. 10.100 / 57. 10.100
  libavfilter     6.107.100 /  6.107.100
  libavresample   3.  7.  0 /  3.  7.  0
  libswscale      4.  8.100 /  4.  8.100
  libswresample   2.  9.100 /  2.  9.100
  libpostproc    54.  7.100 / 54.  7.100

Any workaround as i read you are not anymore on OSX , open for experiments
Hi, run ffscreencast --test in my terminal, but return

[OK]   Operating system supported: Darwin
[OK]   ffmpeg found: /opt/local/bin/ffmpeg
[ERR]  [OSX]: AVFoundation not available in ffmpeg.
          - Desktop recording not possible.
          - Sound recording not possible.
          - Camera overlay not possible.

How do I enable AVFoundation?

Have MacOs Sierra v10.12.6

thanks!
# ffscreencast 2.0 rewrite and brainstorm

I have noticed that there are quite some limitations on the existing `ffscreencast` implementation,
some bugs that are hard to fix, options that are not as self-explanatory as I have hoped and
the code is currently hard to maintain.

That is the reason I will do a complete rewrite from scratch.


## What must be done?

1. Separate linux and osx versions for better maintainability
2. Restructure command line arguments for easier usage
3. Address current bugs
4. Add more features (streaming, camera positions/resolutions, etc)


I will first work on the linux version `ffscreencast-linux` and once done start with osx `ffscreencast-osx`.
Furthermore I hope I can finally also get the `BSD` version done afterwards.


## Get involved and give feedback

I will address features and commandline arguments below as far as I have thought them through.
Nothing is fix yet, so I rely on your feedback to suggest improvements.

The goal is to have a really easy-to-use command line version of a screen-recorder with many options
that are compatible with other GUI implementations.

So if you like this idea, do comment and let me know.

I want the rewrite to be completely thought through and planned, before I am going to start working
on it.


## ffscreencast-linux proposal

### Features

This is the current feature list that I have thought about. Let me know about anything else
you want to be added to the list.

* record whole desktop, specific monitor, specific window or a selected area
* specify to record cursor or not
* have different audio input source (e.g.: pulse)
* be able to align camera overlay to any desired position
* be able to scale camera resolution overlay
* scale output video during recording
* output video to file or directly to a network stream


### Command line options

This is a first draft showing the possible command line arguments:


#### 1. Input arguments

##### 1.1 Video
```
--ivideo source <string>        Either 'desktop', 'monitor', 'window', or 'area'
                                Defaults to 'desktop'

--ivideo monitor <int>          When using 'source monitor', specify the monitor
                                number to record.
                                Defaults to first found monitor

--ivideo frame <int>            Input video framerate.
                                Defaults to 30

--ivideo cursor <string>        Capture mouse cursor? 'yes' or 'no'.
                                Defaults to 'no'
```

##### 1.2 Audio
```
--iaudio dev <int>              Will record audio with the given device number.
                                Defaults to first audio device found.
                                If this option is omitted, no audio will be recorded.

--iaudio format <string>        Audio input format (e.g.: alsa)

--iaudio source <string>        Audio input source (e.g.: pulse)

--iaudio channel <int>          Audio channels to record (e.g.: 1 or 2)
                                Defaults to 2
```

##### 1.3 Camera
```
--icam dev <int>                Will enable camera overlay with the given camera device number.
                                Defaults to first camera device found.
                                If this option is omitted, no camera will be recorded.


--icam pos <string> <string>    Sets the camera position.
                                Supported values: <left|center|right> <top|center|bottom>
                                Defaults to 'right' 'bottom'

--icam pad <string>             Sets the camera padding from the nearest edge.
                                In case of 'center' it will pad from the right or bottom.
                                Format: --icam pad 10x10
                                Defaults to '0x0'

--icam res <string>             Scales the camera resultion to the supplied value.
                                Format:             --icam res "640x480"
                                Format keep height: --icam res "320x-1"
                                Format keep width : --icam res "-1x480"
                                Defaults to the highest supported camera resolution.
```

#### 2. Output encoding
##### 2.1 Video
```
--ovideo codec <string>         Video output format.
                                Defaults to 'libx264'

--ovideo res <string>           Scale down the output resolution.
                                Defaults to video input resolution.
                                Format:             --ovideo res 960x540
                                Format keep height: --ovideo res 960x-1
                                Format keep width:  --ovideo res -1x540

--ovideo args <string>          Additional output encoding arguments to pass to ffmpeg.
                                Defaults to: '-crf 20 -preset veryfast -minrate 150l -maxrate 500k'
```
##### 2.2 Audio
```
--oaudio acodec <string>        Audio output format.
                                Defaults to 'libfaac'

--oaudio freq <int>             Audio frequency.
                                Defaults to 44100

--oaudio bitrate <int>          Audio bitrate.
                                Defaults to 96000
```

#### 3. Output
```
--output type <sting>           Output to file or to network stream.
                                Values: 'file' or 'stream'
                                Defaults to 'file'

--output container <string>     Output container format to use.
                                Defaults to 'mkv'

--output file <string>          Output file.
                                Defaults to ~/Desktop/ScreenCast-YY-mm-dd__HH-mm-ss.ext
                                Only applicable when output type == file

--output stream-proto <string>  Stream output protocol to stream to.
                                Values: 'tcp' or 'udp'.
                                Only applicable when output type == stream

--output stream-addr <string>   Stream output IP address or hostname to stream to.
                                Format: --output stream-addr 192.168.0.1
                                Format: --output stream-addr host1.example.tld
                                Only applicable when output type == stream


--output stream-port <int>      Stream output port to stream to.
                                Format: --output stream-port 5891

--output stream-meta <string>   Stream metadata to include in stream.
                                Example: 'streamName=my-twich-channel'
```
#### 4. Config arguments
```
--config <string>               Specify to load configuration from config file instead of
                                having to specify them via command line arguments.
                                Default config with default argument values will be in
                                ~/.config/ffscreencast/default.conf
                                Let's you easily create multiple configs for different occasions:
                                ffscreencast --config ~/.config/ffscreencast/twitch-stream.conf
                                ffscreencast --config ~/.config/ffscreencast/grab-desktop.conf
```
#### 5. Misc arguments
I will also include the current arguments for:
```
--dry                           Show ffmpeg command from specified options
--list                          List all monitor, audio and camera devices
--slist                         List monitor devices
--alist                         List audio devices
--clist                         List camera devices
```


When i try to record my screen with "ffscreencast --sargs="-capture_cursor 1 -capture_mouse_clicks 1"" on OSX Yosemite the resulting video is broken, it looks like the horizontal lines are shifted (see attached screenshot)
![ffscreencast_2](https://cloud.githubusercontent.com/assets/17175434/24204587/3d7ce0b8-0f19-11e7-9326-f9edbb876b46.png)

I am fully back on Linux now without any access to OSX, so I am looking for an homebrew maintainer who can keep the brews up-to-date:

* https://github.com/cytopia/homebrew-tap

I'm receiving following error when trying to add camera overlay:
> Cannot find a matching stream for unlabeled input pad 1 on filter Parsed_overlay_0

```
$ : ffscreencast -c
/opt/local/bin/ffmpeg -hide_banner -loglevel info -thread_queue_size 512 -f avfoundation  -i "1" -thread_queue_size 512 -f avfoundation -video_size 160x120 -framerate-i "0" -c:v libx264 -crf 0 -preset ultrafast -filter_complex 'overlay=main_w-overlay_w-10:main_h-overlay_h-10' -threads 0 "/Users/rafi/Desktop/Screencast 2017-03-17 at 15.06.11.mkv"
[avfoundation @ 0x7f88f2003400] Selected pixel format (yuv420p) is not supported by the input device.
[avfoundation @ 0x7f88f2003400] Supported pixel formats:
[avfoundation @ 0x7f88f2003400]   uyvy422
[avfoundation @ 0x7f88f2003400]   yuyv422
[avfoundation @ 0x7f88f2003400]   nv12
[avfoundation @ 0x7f88f2003400]   0rgb
[avfoundation @ 0x7f88f2003400]   bgr0
[avfoundation @ 0x7f88f2003400] Overriding selected pixel format to use uyvy422 instead.
[avfoundation @ 0x7f88f2003400] Stream #0: not enough frames to estimate rate; consider increasing probesize
Input #0, avfoundation, from '1':
  Duration: N/A, start: 240804.105833, bitrate: N/A
    Stream #0:0: Video: rawvideo (UYVY / 0x59565955), uyvy422, 2880x1800, 1000k tbr, 1000k tbn, 1000k tbc
Cannot find a matching stream for unlabeled input pad 1 on filter Parsed_overlay_0
```

```
$ ffscreencast --test
[OK]   Operating system supported: Darwin
[OK]   ffmpeg found: /opt/local/bin/ffmpeg
[OK]   [OSX]: AVFoundation available in ffmpeg.
          + Desktop recording possible.
          + Sound recording possible.
          + Camera overlay possible.
```

```
$ ffscreencast --list
Available screen recording devices (monitors):

[1] Capture screen 0


Available audio recording devices (monitors):

[0] Wirecast Virtual Microphone
[1] Built-in Microphone
[2] Boom2Device


Available camera recording devices:

[0] FaceTime HD Camera (Built-in) (160x120@ 29.970000]fp 160x120@ 25.000000]fp 160x120@ 23.999981]fp 160x120@ 14.999993]fp 176x144@ 29.970000]fp 176x144@ 25.000000]fp 176x144@ 23.999981]fp 176x144@ 14.999993]fp 320x240@ 29.970000]fp 320x240@ 25.000000]fp 320x240@ 23.999981]fp 320x240@ 14.999993]fp 352x288@ 29.970000]fp 352x288@ 25.000000]fp 352x288@ 23.999981]fp 352x288@ 14.999993]fp 480x360@ 29.970000]fp 480x360@ 25.000000]fp 480x360@ 23.999981]fp 480x360@ 14.999993]fp 640x480@ 29.970000]fp 640x480@ 25.000000]fp 640x480@ 23.999981]fp 640x480@ 14.999993]fp 960x540@ 29.970000]fp 960x540@ 25.000000]fp 960x540@ 23.999981]fp 960x540@ 14.999993]fp 1024x576@ 29.970000]fp 1024x576@ 25.000000]fp 1024x576@ 23.999981]fp 1024x576@ 14.999993]fp 1280x720@ 29.970000]fp 1280x720@ 25.000000]fp 1280x720@ 23.999981]fp 1280x720@ 14.999993]fp)
```

```
$ ffmpeg -version
ffmpeg version 3.2.4 Copyright (c) 2000-2017 the FFmpeg developers
built with Apple LLVM version 8.0.0 (clang-800.0.42.1)
configuration: --prefix=/opt/local --enable-swscale --enable-avfilter --enable-avresample --enable-libmp3lame --enable-libvorbis --enable-libopus --enable-libtheora --enable-libschroedinger --enable-libopenjpeg --enable-libmodplug --enable-libvpx --enable-libsoxr --enable-libspeex --enable-libass --enable-libbluray --enable-lzma --enable-gnutls --enable-fontconfig --enable-libfreetype --enable-libfribidi --disable-indev=jack --disable-outdev=xv --enable-audiotoolbox --enable-sdl2 --mandir=/opt/local/share/man --enable-shared --enable-pthreads --cc=/usr/bin/clang --enable-vda --enable-videotoolbox --arch=x86_64 --enable-yasm --enable-libx265 --enable-gpl --enable-postproc --enable-libx264 --enable-libxvid
libavutil      55. 34.101 / 55. 34.101
libavcodec     57. 64.101 / 57. 64.101
libavformat    57. 56.101 / 57. 56.101
libavdevice    57.  1.100 / 57.  1.100
libavfilter     6. 65.100 /  6. 65.100
libavresample   3.  1.  0 /  3.  1.  0
libswscale      4.  2.100 /  4.  2.100
libswresample   2.  3.100 /  2.  3.100
libpostproc    54.  1.100 / 54.  1.100
```
From personal experience it's a tall ask to record in one step on low performance computers.
Suggest add option to post-optimise the original _'uncompressed'_ file recorded
Here is what is used (...before finding ffscreencast)
- i record in as efficient a format as I could find for low performance cpu AND _drive. _i could be wrong about libx264 and rgb24 usage._
- i also record only 640x480/vga/sntsc at 20 fps then reduce to 10
- 18MB -> 1.1MB
- libopus support for mono 16-20 kbps is very efficient for voiceovers
- i've also been looking for a way to record 'faked' mouseclick sounds and keypresses into a channel so it's not using the microphone to record the typing. could use same solution to show modifier and function keys pressed on overlay **see** `https://github.com/wavexx/screenkey`

**#my 60 second test record**
ffmpeg -f x11grab -framerate 20 -video_size 640X480 -i :0.0 -c:v libx264rgb -pix_fmt rgb24 -tune animation -crf 0 -preset ultrafast -t 60  raw.mp4
## one minute is about 16mb

**#my_ re-compress, _oddly_ -crf 35 still looks good.**
ffmpeg -i raw.mp4 -c:v libx264rgb -r 10 -preset veryslow -crf 35 -tune animation -movflags faststart compressed.mp4
