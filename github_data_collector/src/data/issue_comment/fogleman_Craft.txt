We made some fixes to the issues that include:
-  Save time of day so it is not reset when game is opened again #121
-  Add a compass #119
-   Add text under image of current block to explain what the material is 
-   Material renaming 
-   Upper text box gets cut off, should show full text by continuing line of text below Having the text scroll/loop sideways

Thank you for your consideration
[Craft-master.zip](https://github.com/fogleman/Craft/files/3942543/Craft-master.zip)

I'm reading through this project to help with my own OpenGL project and I noticed line 180 of matrix.c:

`ymax = znear * tanf(fov * PI / 360.0);`

Is fov in degrees? If so the correct way to convert it to radians would be:

`ymax = znear * tanf(fov * PI / 180.0);`
Appreciate the work.

Are there any Linux binaries?
Perhaps it would be interesting to be able for the server to handle the way blocks look/act so you wouldn't need client-side mods outside of UI tweaks.
Currently, the auth.db and craft.db is stored directly under users home directory. In GNU/Linux, the standard application data directory is `~/.local/share/Craft`. So the users' home directory will not be polluted by all kinds of app data.

I find many places in the code w is regarded as a signed char. Such as light_fill(), map_set and etc.
MapEntry.w is char:
```
typedef union {
    unsigned int value;
    struct {
        unsigned char x;
        unsigned char y;
        unsigned char z;
	char w;
    } e;
} MapEntry;
```
It seems a lot of code and algorithms need to be modified to increase block ID range from 8-bit to 16-bit. If I modify MapEntry::e::w be short, main.c.light_fill(...) will be leaded to dead iterator. I just simply add a violent cast in light_fill, it seems works. But I know little about the algorithm of light_fill. I worry it will work wrong in some cases.
```
void light_fill(
    char *opaque, char *light,
    int x, int y, int z, int w, int force)
{
	w = (char)w;  //add a violent cast simply
	if (x + w < XZ_LO || z + w < XZ_LO) {
        return;
    }
......
```

Related:
#116 
[satoshinm/NetCraft#55](https://github.com/satoshinm/NetCraft/issues/55)

When holding down a key, the keyboard buffer fills, causing the associated behavior to continue afterward for some time. For example, if I hold down the W key for a few seconds, the character continues to move forward for some time after releasing the key. This makes the game very difficult to play. Using keyboard events (key down/key up) instead of buffered keyboard input would eliminate this issue.
