I want to connect with redis cluster of 3 nodes, How can I connect ?

 net.debasishg#redisreact_2.12;0.8: not found .. Does it really supports scala 2.12 ?
Hi, 
I was looking at the API compared to the scala-redis github repository and noticed that this one does not support Binary Keys. 
Just wanted to file this as a feature request. 

Hi,
This library is great and hoping to put it into full use shortly.  However I am using behind a Factory pattern to abstract away the cache implementation (so we can easily swap in out).  I was looking at testing without having a local version of redis running.  Testing this is difficult and I would like to create a MockRedisClient that I can use in my factory, maybe that would look something like this:

``` scala
class MockRedisClient(clientRef: ActorRef) extends RedisClient(clientRef) {
  val mmap = collection.mutable.Map[String, Any]()

  override def get[A](key: String)(implicit timeout: Timeout, reader: Reader[A]): Future[Option[A]] = {
    val value = mmap.get(key)
    Future.successful(value.asInstanceOf[Option[A]])
  }


  override def set(key: String, value: Stringified, exORpx: Option[SetExpiryOption], nxORxx: Option[SetConditionOption])(implicit timeout: Timeout): Future[Boolean] = {
    mmap.put(key, value).
    Future.successful(true)
  }


  override def setex(key: String, expiry: Int, value: Stringified)(implicit timeout: Timeout): Future[Boolean] = {
    mmap.put(key, value)
    Future.successful(true)
  }
}
```

This is not possible  on the get method due to the fact that com.redis.serialization.Reader is private to package com.redis.  I was wondering if this was an intended restriction and if this visibility is something you would consider removing so that we could Mock the RedisClient easier?  I've tried it on a local copy and is then accessible to to override.

An alternative is to create a local com.redis package and create a MockRedisClient class which is a hacky 


Hello I would like to add the SCAN command (Redis >= 2.8). I tried to implement it based on the implementation of the other commands. If there is something you don't like let me know i'll adopt the code accordingly.

At the moment SCAN commands are missing.
Please add them to the library.

Other than that: SUPER project

The `apply` method within the RedisClient object is not thread-safe. It uses the thread-unsafe `Iterator.next` method to create a default name. This results in name collisions in Akka. 

An example of the Iterator.next method not being thread-safe:

```
val i = Iterator from 0
val fs = Seq.fill(10000)(Future(i.next))
// This should print 10000 but will likely print something else (the last time I tried it was 9964)
Future.sequence(fs).foreach(values => println(values.toSet.size))
```

I've included a stack-trace showing the issue appearing in our production environment.
![redis-nb-name-bug-clean](https://cloud.githubusercontent.com/assets/789639/4561611/63d3cba6-4efe-11e4-8011-3384d1ca4606.png)

Some operation in ResponseHandling is not efficient and those may become bottlenecks when too many command is requested.

I found following bad operations.
- [Queue operation](https://github.com/debasishg/scala-redis-nb/pull/102)
- RawReply#remaining() for every command response(maybe lead to array copy)
  - https://github.com/debasishg/scala-redis-nb/blob/master/src/main/scala/com/redis/serialization/Deserializer.scala#L19
  - https://github.com/debasishg/scala-redis-nb/blob/master/src/main/scala/com/redis/serialization/RawReplyParser.scala#L149
