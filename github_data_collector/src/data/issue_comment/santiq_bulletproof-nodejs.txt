I've tried cutting the `startServer()` method with an `expressApp()` one that I can export: 

```
export async function expressApp() {
  const app = express();
  await require('./loaders').default({ expressApp: app });
  return app;
}

async function startServer() {
  const app = await expressApp();
 ...
}
```

And in my test I try using it like I would normally do: 

```
import request from 'supertest';
import { expressApp } from '../src/app';

describe('Analyze Movements', () => {
  test('succeeds list of analyze movements', async () => {
    const response = await request(expressApp)
      .get(`/analyze`)
      .expect(200);
    let body = response.body;
    expect(body.length).toBeGreaterThan(1);
  });
}
```

But I'm getting a SyntaxError: `SyntaxError: Unexpected identifier
queries.js:1
({"Object.<anonymous>":function(module,exports,require,__dirname,__filename,global,jest){import moment from 'moment';`

I suspect this is a problem related with the fact that my expressApp() method is async but I can't figure it out.. 

Hello, in your routes you have such file as auth.ts
And we're using celebrate library to check if all data from front-end in the right format. 

```
route.post(
    '/signup',
    celebrate({
      body: Joi.object({
        name: Joi.string().required(),
        email: Joi.string().required(),
        password: Joi.string().required(),
      }),
    }),
```

If my name is number or another different type (not string) I have a response from the server like this. 
```
{
    "errors": {}
}
```

I would like to see response something like this
```
{
    "errors": {"Wrong json data type"}
}
```
How can I do this ? 

Thank you!
src/subscribers/user.ts:29:14 - error TS2339: Property 'error' does not exist on type 'unknown'
```

import { Container } from 'typedi';

const Logger = Container.get('logger');
Logger.error(`ðŸ”¥ Error on event ${events.user.signIn}: %o`, e);

```
But if I do the next code - everything is fine

```
import Logger from '../loaders/logger';
Logger.error(`ðŸ”¥ Error on event ${events.user.signIn}: %o`, e);

```
As I can see. typedi do not see levels in Container. 
How can I fix this ? 

I'm trying to write unit tests for service layer bu failing to create mock dependencies, mock Models mock EventDispatcher. Can anyone write an example unit test or at least show me the way to write them? Just one simple test example would help me progress so much, I can take it from there and write other tests by taking it as a reference. Thanks!

I read your article and checked your pattern and I was surprised that my architecture is very similar to yours. But I not found one thing I am searching for quite for a while:

How to handle more errors from Service? For example I have Service `User` with method `activateUser`. This method recieve `activation token` and based on token's validity (user not already active, token exists, token not expired, user exists) I activate user or not.

The problem is that there is lot of things what can go wrong and throwing just one type of error is not good for clients. I am using i18n so I am translating keys to texts inside my controller.

Should I just throw those keys from my Service? 

Now I am just trying to have every service method to do one thing so I can throw 1 error. But then I am moving too much stuff into controller:

1.  Does user exists?
   If not throw ` not exists` error
2.  Is user already active?
   If not throw ` already active` error
3.  Is token not expired?
    If not throw ` token expired` error
4. Does database update failed?
   If not throw ` error while saving` error

This is just example and I have much more of this trough project, where I have controller full of one-time-use services because I need to return different error messages for each one of them.

Hope you understand my frustration and have some more expirience what you can share :) 
Hi Santiq, 

Good Day!

Great work! I've been learning on this pattern and applying on a test project. But now I'm struggling about which layer should the form/input validation located at. I saw your example that you place the validation in the express middleware, but isn't these validation considered as business logic? Which mean shouldn't we place the validation at the service layer? Hope you can help me to understand on this part. 

Thanks. 
Hello! I've been following this pattern for my personal project, but I am reaching a point where I think that the controller layer (the express routes) is getting a bit too big, below is an example from one of your articles.

```javascript
export default (app) => {
  app.get('/user/search-location', (req, res, next) => {
    try {
      const { lat, lng } = req.query;
      Logger.silly('Invoking user service to search by location')
      const users = UserService.SearchUserByLocation(lat, lng);
      return res.json(users).status(200);
    } catch(e) {
      Logger.warn('We fail!')
      return next(e);
    }
  })
}
```

Say, I need this endpoint to do A LOT and it's fairly complicated. It needs too query different tables, databases and each service that this calls relies on a previous service. Not to mention all the logging I need to do.

Would make it sense to separate the callback method to maybe a controller directory, and if so how would _that_ look like? 

Should I have another service that handles all the complicated parts.

Or should I separate it all into middlewares?

Basically, if my controller method callback is looking big, what steps should I take to reduce or separate it?


When running npm run build, getting Property 'error' does not exist on type '{}' in src/api/middlewares/attachCurrentUser.ts on Logger. Why?