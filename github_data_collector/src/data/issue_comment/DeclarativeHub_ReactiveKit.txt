
I have a UIKit app, where I am starting to integrate a bit of SwiftUI into (via UIHostingController). My SwiftUI views need to use Combine (`@State`, or `@ObservedObject`+`@Published` for example), but I'd still like these views to work with my existing ReactiveKit Signals. Is this possible without writing a bunch of boilerplate code? Has anyone else tried to make ReactiveKit and Combine work together in one app?
The shared verb between this method and Disposable.dispose() makes them appear extremely similar in behaviour.

I suggest RxSwift's `.disposed(by:)`
When I make PRs for ReactiveKit, I've tried to add unit tests, but I've been having a difficult time.

There is a lot of interesting test helper utilities you've created to make your unit tests easier to write, but it's difficult to understand what it's doing or how to use it. 
Writing some documentation and maybe a simple usage guide would be really helpful. 

I know this is a pretty low priority issue, but it's definitely something that's been a pain point for me. I've tried digging into it a little bit, but still haven't been able to really figure out how to write tests for ReactiveKit.

_Note: This isn't about writing unit tests for my personal code that uses ReactiveKit, this is about writing tests for the actual ReactiveKit code base when I make PRs for this library. (Same goes for Bond)_
First of all my apologies if architectural questions are not supposed to be asked in the issue tracker but I couldn't find a satisfying answer anywhere else.

In my particular case I have the following two ViewModels:

```
/** I selected a certain day here in a week **/
class DayViewModel: BaseViewModel {
    let selectedDay: Property<Date>

    func switched(to dayNumber: Int) {
        selectedDay.value = selectedDay.value.dayInSameWeek(for: dayNumber)
    }
}
```

```
/** I generate an overview on the home screen depending on which day is selected **/
class HomeViewModel: BaseViewModel, LogsContainingViewModel {
    /** snip **/
    let selectedDay: Property<Date>
    /** snip **/
}
```

I'm wondering what's the best approach. I could either monitor that property like this:
```
        daysViewModel.selectedDay.observeNext { [unowned self] newDate in
            self.viewModel.selectedDay.value = newDate
        }.dispose(in: disposeBag)
```
Or, I pass in the property when I construct the `DayViewModel`:
```
        let daysViewModel = DaysViewModel(selectedDay: self.homeViewModel.selectedDay)
```

On one hand I think having less state is always better, on the other hand the properties might have different life-cycles and I can also imagine the same property shared over multiple view models could cause more problems with threading etcetera.
Please show any example of how to use operator `repeat(when:)`. I don't understand how to use it.
I did a pod update to latest **Bond** for my project which currently has support for **Swift 4.2** and **XCode 10.1**. I got **128** compilation error, all are related to **ReactiveKit**.

One of the compilation error says,"../Pods/ReactiveKit/Sources/SignalProtocol+Optional.swift:51:16: Generic parameter 'Element' could not be inferred"

Please help me to fix this issue.
Reactive Kit got updated a few days ago to version 3.10. Bond Version 6.10.3 began pulling that version of the library, even though it's only compatible with Swift 5. 

Workaround, I had to manual go into the cocoa pods .podsec file and set the Reactive Kit version and checksum to a version below Reactive Kit 3.10 to avoid build errors, since we have not upgraded to Swift 5 yet.

Minor version bump should not contain breaking changes as Reactive Kit 3.10 contains breaking changes for bond version 6.10.3.
### Description
I am trying to map a collection of events (from a datastore) to a list of choices (in a different datastore) made by a user for some / all of the events in that collection.

The collection of events is stored in a LoadingProperty. Something like : 

```
       public let events: LoadingProperty<[Event], ApplicationError>

....

        events = LoadingProperty {
            // some HTTP request that retrieves an array of events from a remote server
            ...
            .toLoadingSignal()
        }
```

I will display those events in a UITableView with custom cells that show whether or not the user will attend.

In order to provide a mutable observable array **to bind that table to**, I have to issue a request for every event to check if the user has already made some selection -- I know, not the best solution, but that's what I am dealing with for now.

So I am building that MutableObservableArray from the `events` property. Everytime it gets refreshed, then the mapping is established again and the table is updated accordingly : 

```
    public let eventsArray: MutableObservableArray<MappingScheduleChoice> = MutableObservableArray([])

    ...

        events
            .dematerializeLoadingState()
            .suppressError(logging: true)
            .with(latestFrom: userService.currentUser.value())
            .map { (arg) -> [(Event, User)] in
                let (evts, user) = arg
                return evts.map { ($0, user) }
            }
            .unwrap()
            .flatMap(.concat) { arg -> Signal<MappingScheduleChoice, ApplicationError> in
                let (evt, user) = arg
                return evt
                    .getEventSelection(for: user.localId)
                    .response(using: client)
                    .map { $0.first }
                    .map { MappingScheduleChoice(schedule: evt, choice: $0) }
            }
            .collect()
            .observeNext { state in
                self.eventsArray.replace(with: state)
            }.dispose(in: bag)

```

### Problem

The main issue is that `dematerializeLoadingState()` never really completes (just reloads) and therefore `collect()` can never issue a new array via `.next()` that would be used to build the MutableObservableArray.

If I add `.take(first: 4)` right before `collect()` then the first 4 events will show up in the table with the proper user choices (as intended, but just for those 4 events). I'd like to achieve this for all the events present in the `events` property.

Now this seems like a very, very complicated solution and I am happy to hear other suggestions on how to achieve the intended result. But, otherwise, any nifty little trick I have forgotten about that could make this work ?

thanks,
N.


I am wrapping my network requests into signals like this:

```
func request<Response>(_ endpoint: Endpoint<Response>) -> Signal<Response, ResponseError> {
        return Signal<Response, ResponseError> { observer in
            let request = self.manager.request(
                self.url(path: endpoint.path),
                method: httpMethod(from: endpoint.method),
                parameters: endpoint.parameters,
                encoding: endpoint.encoding
            )
            request
                .validate()
                .responseData() { response in
                    let result = response.result.flatMap(endpoint.decode)
                    switch result {
                    case .success(let value):
                        observer.next(value)
                        observer.completed()
                    case .failure(let error):
                        observer.failed(ResponseError(reason: error.localizedDescription,
                                                      statusCode: response.response?.statusCode ?? 0))
                    }
            }
            return BlockDisposable {
                request.cancel()
            }
        }
    }
```
The issue I am having is that when I am observing this signal, the callback is triggered twice .next with value and .completed. I don't want it to be called twice because obviously I am executing code to update the UI inside the callback.
Sometimes the value is null (for some requests I expect 200 with empty response), so I cannot check the value.
If I don't call .completed after .next, the issue disappears but I not sure if it would cause a memory issue because the signal is being disposed in the case of a .failed or .completed event as seen here:

```
public func on(_ event: Event<Element, Error>) {
    lock.lock(); defer { lock.unlock() }
    guard !disposable.isDisposed else { return }
    if let observer = observer {
      observer(event)
      if event.isTerminal {
        disposable.dispose()
      }
    }
  } 
```

Any suggestions?