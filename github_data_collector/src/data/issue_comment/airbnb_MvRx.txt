Is there a nicer way to declare `Carousel` with `MvRx` than having:

```
    override fun epoxyController() = simpleController(viewModel) { state ->

        val list = listOf("a", "b", "c", "d")

        carousel {
            id("carousel")
            numViewsToShowOnScreen(2.5f)

            withModelsFrom(list) {
                BasicRowModel_()
                        .id(it)
                        .title(it)
            }
        }
    }
```
Using `RedeliverOnStartup`, all subscriptions are fired again when the activity/fragment is resumed, regardless of the previous values. That's a waste of CPU if the state wasn't updated in background.

I'd expect subscriptions to fire only if the value(s) changed, or if the activity/fragment has been re-created.






I wanna implement the monthly calendar view similar to Google Calendar using MvRx and Epoxy.  Unfortunately, the regular GridLayoutManager doesnâ€™t work, because I can set there the number of columns (VERTICAL) or the number of rows (HORIZONTAL).

What's in your opinion the best way to solve it?
1) Shall I write my own LayoutManager? Will it work without a problem with Epoxy?
2) Shall I use nested RecyclerView in RecyclerView? Will it work with MvRx and Epoxy?
3) I could also go with a row for the full week, 7 days view looking like cells, but actually it will be one single view.
4) I shouldn't use `MvRx` and `Epoxy` for that, cause it will be over-engineered?

![monthly_calendar](https://user-images.githubusercontent.com/2264901/72361553-f72a8a80-36f1-11ea-8346-f3f402e9c6ed.png)



facing crash with version 2.0.0-alpha2
You must specify a viewModelConfigFactory in the MvRx object
I want to use Koin's extension functions for viewmodels' injections. Is there a way not to write `MvRxViewModelFactory` and use all the advantages of Koin? It's not very convenient to manually inject all of the dependencies into viewmodel through Factory.
Adding support for the Navigation Graph #305 is a little tricky. The issue you run into is cause we need the navigation controller, and, so this means when restoring from process death, the fragments are restored in the activity#onCreate super before the activity has inflated its content. So, the `NavigationController` is not always accessible in Fragment#onCreate. When not restoring from process death, the existing ViewModel delegates method of creating the ViewModel like `fragmentViewModel` works fine.

For now, my current workaround is to remove the lifecycle aware lazy and use Lazy. I think it should be possible to make navigation ViewModel delegate auto-subscribe by delaying the subscription until `onStart` when the `NavigationController` is not yet accessible.

I still need to add some CI tests, but, I thought I would open the PR now to get some feedback on my current approach and if it makes sense to have navigation as an add-on module.
// Testing of Async in viewmodel constructor with synchronous schedulers

Hi, I'd like some pointers on testing.

From what I can see I can jump start the view model with intial state which is grear. However, given I call some async rx stuff in the view model constructor, and usual recommendation to have synchronous schedulers swapped in for testing, wouldnt this mean that I can never assert Async.Loading? 

(Since Loading is emitted synchronously, so is then Success, now ctor is exited, and now I can test the state observable, meaning atleast I would miss Loading)

Unless I can swap out the state store observable somehow to cache everything, so I can assert it?
First of all, thanks for making public and maintaining MvRx, and now MvRxLauncher! 

Trying to launch `MvRxLauncherActivity` throws missing class exceptions on the dex path.

The missing class varies after rebuilding. 

Sample stacktrace:

```
java.lang.ClassNotFoundException: Didn't find class "com.jumio.nv.custom.NetverifyCustomFaceScanPresenter$a" on path: DexPathList[[zip file "/data/app/appPackage-zHYXyaLpJSqh2m9NvQzKRw==/base.apk"],nativeLibraryDirectories=[/data/app/appPackage-zHYXyaLpJSqh2m9NvQzKRw==/lib/arm64, /data/app/appPackage-zHYXyaLpJSqh2m9NvQzKRw==/base.apk!/lib/arm64-v8a, /system/lib64, /product/lib64]]
```

For more reference, this was tested on a multi-module project with a structure like the following:

:app -> :featureA

- :app Depends on `mvrx` and `mvrx-launcher`
- There's just one MvRxFragment, that lives in :featureA.


I was able to fully remove kotlin-reflect without changing any functionality, annotation processors, or separating `@PersistState` to its own module. It also doesn't rely on Kotlin's `@Metadata` annotation at all.

These were all trivial except for `@PersistState`. I tried a few methods including using the [kotlinx-metadata-jvm](https://github.com/JetBrains/kotlin/tree/master/libraries/kotlinx-metadata/jvm) library which is significantly smaller than `kotlin-reflect`. I got it to work but was able to remove the need for even that.

The comments in `PersistState.kt` should be clear enough to understand what it is doing. If it is not, let me know and I can add clarifying details.

@rossbacher This seems to work with proguard. I added a keystore to the counter app and ran proguard on it and it still worked. You are the expert so please let me know if there are any concerns here. The only thing this relies on is the `copy$default` static function and `componentN` functions to exist and have their original name. I think this will also make https://github.com/airbnb/MvRx/pull/331 redundant.

App | Size (kb)
------------ | -------------
App with AppCompat | 2240
w/ RxJava + RxAndroid | 2912
w/ MvRx + kotlin-reflect (1.3.0) | 3848
w/ MvRx + kotlin-metadata-jvm | 3340
w/ MvRx + this change | 3000

Thanks to @ZacSweers for pointing me in the direction of `copy$default` and the property mask.

Fixes https://github.com/airbnb/MvRx/issues/274
have some production code like below:
call setState * n first, then call withState.
```
data class TestState(val dummy: Int = 0) : MvRxState

class TestViewModel : BaseMvRxViewModel<TestState>(TestState(),false) {

    fun test() {
        setState {
            Log.w("MvRxViewModel", "setState1:$dummy")
            Thread.sleep(5)
            copy(dummy = dummy + 1)
        }
        setState {
            Log.w("MvRxViewModel", "setState2:$dummy")
            Thread.sleep(5)
            copy(dummy = dummy + 1)
        }
        withState {
            Thread.sleep(5)
            Log.w("MvRxViewModel", "withState3:${it.dummy}")
        }

        setState {
            Log.w("MvRxViewModel", "setState4:$dummy")
            Thread.sleep(5)
            copy(dummy = dummy + 1)
        }
    }
}
```

output may be any of below:
```
1 2 4 3
W/MvRxViewModel: setState1:12
W/MvRxViewModel: setState2:13
W/MvRxViewModel: setState4:14
W/MvRxViewModel: withState3:15

1 2 3 4
W/MvRxViewModel: setState1:15
W/MvRxViewModel: setState2:16
W/MvRxViewModel: withState3:17
W/MvRxViewModel: setState4:17

1 3 2 4
W/MvRxViewModel: setState1:63
W/MvRxViewModel: withState3:64
W/MvRxViewModel: setState2:64
W/MvRxViewModel: setState4:65
```

so is this the intended behavior?