The cmdline_args input to eel.start appear to be ignored. Specifically I have tried the following: --kiosk, --start-fullscreen, and --disable-pinch, none of these appear to be acknowledged when chromium is launched.

My exact lines of code are:

eel.init('web')
eel.start('attendanceKiosk.html', mode='chromium', cmdline_args=['--start-fullscreen' '--disable-pinch'], block=False)

Note I have tried 'chrome' and 'chromium-browser' as the mode, as well as trying the command without a specified mode. When chrome is used the application opens maximized, whereas when chromium is used the application opens in a minimized configuration. I achieve the desired behavior when launching chromium-browser with the flags from the command line.

 - Eel version: 0.12.2
 - OS: raspbian 10 (buster) running on a Raspberry Pi 4B, note this also fails on RPi 3B
 - Browser chromium
 - Version 74.0.3729.157
**Describe the problem**
I'm trying to use 0.0.0.0 as host because I want to be able to connect to the GUI from other computers on the same network. This works, but it is making the window that eel opens open to 0.0.0.0:3000/main.html , which doesn't load. Is there a way to override the address that eel opens when it opens its chromium window?
**Code snippet(s)**

```python
import eel
eel.start("main.html", host="0.0.0.0")
```
Hi Samuel,

I would like to use an eel-based App from another web-based system and have that system call eel on localhost. 
Therefore to allow Cross-Origin Requests i would need my eel-based app add the needed headers. But since the bottle webserver is wrapped inside eel I don't find any obvious way to add the headers. 
When working directly with bottle you would be able to set them e.g. through:
`response.headers['Access-Control-Allow-Origin'] = 'http://localhost:8000/'`

Is there a way to hand this through eel to the webserver?
**Describe the problem**
I am trying to use multiprocessing to open multiple windows
The whole problem is that it opens in the window for eel 
** error **
OSError: [WinError 10048] Only one usage of each socket address (protocol/network address/port) is normally permitted: ('localhost', 8000)

**Code snippet(s)**

```python
import eel
from selenium import webdriver
from multiprocessing import Pool
import time

# Set web files folder and optionally specify which file types to check for eel.expose()
eel.init('web', allowed_extensions=['.js', '.html'])

@eel.expose                         # Expose this function to Javascript
def Open():
    if __name__ == '__main__':
        url_list = ['http://www.google.com', 'http://www.github.com', 'http://www.facebook.com', 'http://www.google.com',
                    'http://www.google.fr', 'http://www.amazon.com', 'http://www.ebay.com', 'http://www.youtube.com',
                    'http://www.google.com', 'http://www.python.com']
        pool = Pool(processes=2)
        ret = pool.map(parsing, url_list)
        for text in ret:
            print(text[:30])




def parsing(url):
    driver = webdriver.Chrome()
    driver.set_page_load_timeout(300)
    driver.get(url)
    text = driver.page_source
    time.sleep(12)
    driver.close()
    return text

eel.start('index.html')    # Start  , size=(300, 200)

```

```html
<!DOCTYPE html>
<html>
    <head>
        <title>Hello, World!</title>

        <!-- Include eel.js - note this file doesn't exist in the 'web' directory -->
        <script type="text/javascript" src="/eel.js"></script>
        <script type="text/javascript">

        eel.Open();  // Call a Python function

        </script>
    </head>

    <body>
        Hello, World!
    </body>
</html>
```

I build exe with pyinstaller and on some PC I have trouble with refresh page or going to another page in my app using eel. if I open link in another tab in browser and no closing main tab all is working but it isn't good solution i think
Hello! Today i was trying to create multiple windows using eel with diferent sizes, and i run into a little nigthmare trying to figure out how to do it!

So i would like to ask for a new feature, it would be nice if when you create a new window using:
` eel.show(start_urls) `
that you could also give it some parameters, something like 
`show(*start_urls,**kwargs))`
to define the params for a new window, defining the size or close callback of it for example 

Python 2.7 is going end-of-life at the end of this year, and I'd like to drop support for it from this library around the same time. At the moment, according to https://pypistats.org/packages/eel, approximately 10% of Eel's package downloads are from Python 2, 80% from Python 3, and 10% unknown. I'm not sure what the unknowns represent and need to look into this - if anyone knows, please do share.

At the same time I feel it makes sense to pragmatically come down on a minimum Python 3 minor version to support. This will help us make the most use of new language features and decrease the maintenance burden of additional code, but without alienating too many of our users.

The latest figures from pypistats above shows that 0.00% are using 3.2, 0.00% 3.3, 0.21% 3.4, and 2.94% 3.5. It feels reasonable to me, therefore, to start support from 3.5 - **possibly** even from 3.6 - but I'd like to give some time for anyone watching to help present good arguments to keep compatibility with these less-used versions.

Although I plan to drop support for Python 2.7 around the end of the year, I'm not working to the same schedule to drop any support for Python 3.x versions. So expect Python 3.2/3.3/3.4 to continue for the foreseeable - but keep posted with this thread.

Keen for input: @ChrisKnott @ahopkins @brumar 
First of all : Eel is amazing ! This is a project I'd love to participate with.

One of the features I find lacking is the implementation of Jinja Variables. While the documentation and the options allow for inserting and using templates (with the `jinja_templates` argument in the `start()` function), I did not see any possibility to transfer variables within the templates.

It would be nice if this could be included either as a decorator or in a more "flask-like" fashion in the return of a function.

One solution that I tried to fiddle with but to no avail, was to create a decorator for the `_static` function (in the `__init__.py`) that seems to handle Jinja's `template.render()` function.

Here's what I got so far:

```python
def jinjaVariables(_static):
    def innerFunction(path, jinja_variable=None):
        # the decorator recieved a Jinja Variable
        if "jinja_variables" is not None:
            response = None
            if 'jinja_env' in _start_args and 'jinja_templates' in _start_args:
                template_prefix = _start_args['jinja_templates'] + '/'
                if path.startswith(template_prefix):
                    n = len(template_prefix)
                    template = _start_args['jinja_env'].get_template(path[n:])
                    response = btl.HTTPResponse(template.render(jinja_variable))

            if response is None:
                response = btl.static_file(path, root=root_path)

            _set_response_headers(response)
            return response

        _static(path)

    return innerFunction
```

The idea was to create a global dictionary variable called `jinja_variable` and to update that variable depending on the page you want to visit.

If you were to include the `jinja_variable` in the `kwargs` of the `start()` function, wouldn't it be possible to dynamically change the output of the html page by accessing the required keys ?
Could you possibly provide an example using Electron and React together with Eel?  I've attempted this and sort of got it to work, but my solution doesn't seem very clean.

I provided an example of what I came up with here:
[https://github.com/jpohly2/Eel/tree/master/examples/09%20-%20Electron-React](url)

This doesn't seem like the best solution, because the way I have it set up you can't use node import statements in your .js files, among other things.
I am using Eel 0.10.4

My app.py is this:
````
import eel

def close_callback_func(path,sockets):
    print("hello")

eel.init('web')
eel.start('main.html',size = (1000,600),close_callback=close_callback_func)
````
Program works fine but when i close chrome tab , my ``close_callback_func`` dont work?