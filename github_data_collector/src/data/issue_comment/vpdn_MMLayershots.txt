Navigation, Tab- and Toolbars don't render their blurred background. Their background views use `UIVisualEffectView` which apparently isn't supported.
Hi,
Did just find a bug in groups generation.
Actual implementation stop groups generation once groups count limit is reached, but this will also stop sublayers content generation, merging them all in a master layer.
This issue is fixed in PR #20 .

By the way, i think a layer grouping model based on views type would be more practical (Tableview, ScrollView, Cell, etc....) what do you think ?

Regards

Optimized layer content generation to reduce file size.

Hey,

First of all this is a very cool project, thank you!

I'm currently trying to render a failry large CALayer-hierarchy (consisting of all kinds of layers, CAShapeLayer, CAReplicatorLayer, CATransformLayer, CATextLayer, etc) into one single CGContext with respectiing z-Order.
I have tested MMLayershots w/o modification on it (besides reducing the quality to 0.25, since it will crash due to the memory overflow you've mentioned in another thread) and it renders every layer in the perfect position, just the z-Order is different from the one on the screen. 
I'm using the zTranslation of the CATransform3D t o change the zOrder of my layers.

1) What could I possibly do to have it render correctly with respecting zOrder?

2) Can you think of an easy way, how to make it all render in to one single CGContext, instead of one context per image?
(All my tries to just render it manually, i.e. rendering the root layer and have it render its children failed by either having a wrong z-Order or wrong x/y positions)

I hope you can help me on this and we could possibly enhance MMLayershots with those features!

Best,
Max

Hi,

I don't know what's going on there when UIDatePicker is on screen, but that causes the output file being over-bloated up to 36Mb of artefacts:

![image](https://cloud.githubusercontent.com/assets/704044/3825359/1aba63ee-1d53-11e4-9120-55747fcbc93b.png)

If this is the problem of UIDatePicker, then I would black-list it and simply take a snapshot of the whole control without going through its sublayers.

Currently, because of the way the psd lib works, all psd layers are kept in memory and only written to disk after all layers have been processed. This causes files with large number of layers to fill up the entire space, leading to a low memory situation. 

We need to either a check for low memory situations in which case we should abort the psd creation or alter the psd generator to work in a stream based manner (NSOutputStream).

Currently layer effects such as drop shadow are rendered on the CALayer itself onto a photoshop layer. This causes the shadow to be rendered wrongly when the sublayer extends above the parent layer's bounds.

![image](https://cloud.githubusercontent.com/assets/387312/3141037/f32ffe40-e960-11e3-9fb5-7a91c02481ea.png)

The CALayer effects should mapped onto a group instead, with the content of the CALayer as the first PS layer within the group.

![image](https://cloud.githubusercontent.com/assets/387312/3141041/48267488-e961-11e3-8afc-a947c1c7ca54.png)


Currently all layers are rendered in full size of the window, which makes the resulting psd unnecessarily big. The file is automatically trimmed by photoshop, but only after the user opens and resaves the file. We need to find a way to trim the whitespace out to make the PSD smaller and easier to transport via Email.

One way of doing it would be to:
- Inspect the generated layer images and scan line by line. This has the advantage of detecting empty layers (i.e. layers with only transparent pixels), but will require image analysis on each layer.
- A more elegant and efficient method would be to calculate the required layer bounds by recursing through the child layers and 'unioning' the layer rects. This however won't detect empty (transparent) layers

A combination of both might be the best approach.
