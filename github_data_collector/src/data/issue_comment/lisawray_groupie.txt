So, im developing an app that will streamline mine and my bosses workflow to where we input all the things we need to do and have done in this app so at the end of the month we can easily see what work he have done so we can send out bills. Each work order can have multiple items. For example, at Company A we need to install a new printer and install a new network switch, so thats 2 work items for 1 work order for Company A. Now i added a feature where we can check which work items are complete but when i click on the seconds item checkbox to mark it as complete i get an error:

> Wanted item at position 1 but an Item is a Group of size 1

This is how I implement my OnClickListner:

`viewHolder.itemView.job_status.setOnClickListener {`
`            Log.d("JobInfo", "Status position: $position")`
`            val JobInfoItem = getItem(position) as JobInfoItem`
`            Log.d("JobInfo", "Item desc: " + JobInfoItem.jobInfo)`
`        }`

So when i try to "getItem" by position i get that error.
I noticed that there is some sort of bug [here](https://github.com/lisawray/groupie/blob/master/library/src/main/java/com/xwray/groupie/GroupAdapter.java#L63).
Is there some sort of way around it?
I am using groupie in my latest app and I have to say it has made my life so much easier!

I'm building a fragment where the user can select form a list of "teams" to add to his favorites.

The favourites are represented by the first section, which is non-expandable and the rest of the sections are the teams, sorted in "Leagues" (each expandable group is a league). My problem is that a single team can exist in multiple Section (leagues) and I need to update it in all of these sections when the user adds/removed it form his favourites.

What I'm doing right now, is the following:

    for (i in 1 until groupAdapter.itemCount) {
            val item = groupAdapter.getItem(i)
            // FIXME: The team does not get added/removed form collapsed groups.
            if (item is TeamItem && item.team.tid == team.tid) {
                item.isSelected = false
                groupAdapter.notifyItemChanged(i)
            }
    }

Unfortunately, this does not update the TeamItems in collapsed sections. Is there a way to keep the items updated in both expanded and collapsed groups?
Currently there is a manual process related to releasing a Groupie version. I'd like to automate that using the CircleCI setup we already have in place. 

Basically, I want any tagged commits to automatically create a new release. 

I have the keystore file and it's details and I can add them as encrypted files + variables to whatever CircleCI setup is made.

If anyone has CircleCI experience I'll welcome PRs or guides to do this.
## Overview 
- Fixed to reset item position in the carousel when CarouselItem is displayed again.  

## Screenshot  
|Before|After|
|:--:|:--:|
|![ezgif-6-2c4eef954faf](https://user-images.githubusercontent.com/13705006/68725061-a36fc800-0600-11ea-946d-45878cc3b205.gif)  | ![ezgif-6-7e0cfba6e2c0](https://user-images.githubusercontent.com/13705006/68725062-a4085e80-0600-11ea-8827-079867e50616.gif) |

Hi all.
I have item list with "webView" inside. When I scroll list, "webView" over and over again loading content.

How properly disable recycle items ?

Overriding this method in item not work for me:
> 
    override fun isRecyclable(): Boolean {
        return false
    }

Thanks)
Hi,

I'm using ExpandableGroups, the list is dynamic, could refresh (including subitems) every few seconds, and my current approach is I'm recreating all the items at every update, letting DiffUtil figure out the changes (I also override the Items' equals() to prevent unnecessary redraws of the items if the contents weren't changed). While updating, I want to keep the expanded or collapsed state of the ExpandableGroups, so I'm wondering what's the recommended way to do that. My current solution is to extend GroupAdapter and override the update() method where I search for the Items and if found, restore the expanded state manually. This runs on the UI thread (I guess it should to make sure I get the latest valid expanded states), and even though I don't have a lot of items, it can take up to a few ms to run on my test devices. I wonder if there's any better way to achieve this?

Any comments appreciated.
See sample code below (it's Java, obviously in Kotlin it would be more concise, but that's not the point)
Note, that I only have expandable items at root level - otherwise the method would need to be recursive.


```
import androidx.annotation.NonNull;

import com.xwray.groupie.ExpandableGroup;
import com.xwray.groupie.Group;
import com.xwray.groupie.GroupAdapter;
import com.xwray.groupie.Item;
import com.xwray.groupie.ViewHolder;

import java.util.Collection;

public class MyGroupAdapter<VH extends ViewHolder> extends GroupAdapter<VH>  {
    @Override
    public void update(@NonNull Collection<? extends Group> newGroups) {
        // restore expanded statuses
        for (Group newGroup : newGroups) {
            if (newGroup instanceof ExpandableGroup) {
                ExpandableGroup newExpandableGroup = (ExpandableGroup) newGroup;
                for (int i = 0; i < getGroupCount(); i++) {
                    Group oldGroup = getGroup(i);
                    if (oldGroup instanceof ExpandableGroup) {
                        ExpandableGroup oldExpandableGroup = (ExpandableGroup) oldGroup;
                        if (newExpandableGroup.getGroup(0) instanceof Item && oldExpandableGroup.getGroup(0) instanceof Item) {
                            Item newItem = (Item) newExpandableGroup.getGroup(0);
                            Item oldItem = (Item) oldExpandableGroup.getGroup(0);
                            if (newItem.getId() == oldItem.getId()) {
                                newExpandableGroup.setExpanded(oldExpandableGroup.isExpanded());
                                break;
                            }
                        }
                    }
                }
            }
        }
        super.update(newGroups);
    }
}

```
**Describe the bug**
When GroupAdapter.updateAsync() keeps getting called in the background and I click expand/collapse on an expandable item, occasionally I get a crash.

**To Reproduce**

I forked the project and created a branch with a modified example to reproduce the bug: https://github.com/scorpeeon/groupie/tree/updateasync-expandable-bug

Steps to reproduce the behavior:

When starting the example (non-databinding) the code will keep calling updateAsync to update the items. Meanwhile if I keep tapping the expand/collapse button on the expandable item, the code will eventually crash. (it might take a while for it to happen, tapping it rapidly tend to give faster results)

**Expected behavior**
Code should not crash when expanding items while using updateAsync.

**Library version**
2.5.1

**Additional context**

Example stacktraces here:
```
09-12 11:18:14.647 9694-9694/com.xwray.groupie.example E/AndroidRuntime: FATAL EXCEPTION: main
    Process: com.xwray.groupie.example, PID: 9694
    java.lang.IndexOutOfBoundsException: Inconsistency detected. Invalid view holder adapter positionViewHolder{1c8fea59 position=8 id=-1, oldPos=1, pLpos:1 scrap [attachedScrap] tmpDetached not recyclable(1) no parent} androidx.recyclerview.widget.RecyclerView{2633c910 VFED.... .F....ID 0,0-1200,1920 #7f090070 app:id/recyclerView}, adapter:com.xwray.groupie.GroupAdapter@1dafac09, layout:androidx.recyclerview.widget.GridLayoutManager@22d2e0e, context:com.xwray.groupie.example.MainActivity@2e895d57
        at androidx.recyclerview.widget.RecyclerView$Recycler.validateViewHolderForOffsetPosition(RecyclerView.java:5715)
        at androidx.recyclerview.widget.RecyclerView$Recycler.tryGetViewHolderForPositionByDeadline(RecyclerView.java:5898)
        at androidx.recyclerview.widget.RecyclerView$Recycler.getViewForPosition(RecyclerView.java:5858)
        at androidx.recyclerview.widget.RecyclerView$Recycler.getViewForPosition(RecyclerView.java:5854)
        at androidx.recyclerview.widget.LinearLayoutManager$LayoutState.next(LinearLayoutManager.java:2230)
        at androidx.recyclerview.widget.GridLayoutManager.layoutChunk(GridLayoutManager.java:557)
        at androidx.recyclerview.widget.LinearLayoutManager.fill(LinearLayoutManager.java:1517)
        at androidx.recyclerview.widget.LinearLayoutManager.onLayoutChildren(LinearLayoutManager.java:612)
        at androidx.recyclerview.widget.GridLayoutManager.onLayoutChildren(GridLayoutManager.java:171)
        at androidx.recyclerview.widget.RecyclerView.dispatchLayoutStep1(RecyclerView.java:3875)
        at androidx.recyclerview.widget.RecyclerView.dispatchLayout(RecyclerView.java:3639)
        at androidx.recyclerview.widget.RecyclerView.onLayout(RecyclerView.java:4194)
        at android.view.View.layout(View.java:15693)
        at android.view.ViewGroup.layout(ViewGroup.java:5038)
        at android.widget.FrameLayout.layoutChildren(FrameLayout.java:579)
        at android.widget.FrameLayout.onLayout(FrameLayout.java:514)
        at android.view.View.layout(View.java:15693)
        at android.view.ViewGroup.layout(ViewGroup.java:5038)
        at android.widget.FrameLayout.layoutChildren(FrameLayout.java:579)
        at android.widget.FrameLayout.onLayout(FrameLayout.java:514)
        at android.view.View.layout(View.java:15693)
        at android.view.ViewGroup.layout(ViewGroup.java:5038)
        at android.widget.LinearLayout.setChildFrame(LinearLayout.java:1703)
        at android.widget.LinearLayout.layoutVertical(LinearLayout.java:1557)
        at android.widget.LinearLayout.onLayout(LinearLayout.java:1466)
        at android.view.View.layout(View.java:15693)
        at android.view.ViewGroup.layout(ViewGroup.java:5038)
        at android.widget.FrameLayout.layoutChildren(FrameLayout.java:579)
        at android.widget.FrameLayout.onLayout(FrameLayout.java:514)
        at android.view.View.layout(View.java:15693)
        at android.view.ViewGroup.layout(ViewGroup.java:5038)
        at android.widget.LinearLayout.setChildFrame(LinearLayout.java:1703)
        at android.widget.LinearLayout.layoutVertical(LinearLayout.java:1557)
        at android.widget.LinearLayout.onLayout(LinearLayout.java:1466)
        at android.view.View.layout(View.java:15693)
        at android.view.ViewGroup.layout(ViewGroup.java:5038)
        at android.widget.FrameLayout.layoutChildren(FrameLayout.java:579)
        at android.widget.FrameLayout.onLayout(FrameLayout.java:514)
        at android.view.View.layout(View.java:15693)
        at android.view.ViewGroup.layout(ViewGroup.java:5038)
        at android.view.ViewRootImpl.performLayout(ViewRootImpl.java:2131)
        at android.view.ViewRootImpl.performTraversals(ViewRootImpl.java:1888)
        at android.view.ViewRootImpl.doTraversal(ViewRootImpl.java:1106)
        at android.view.ViewRootImpl$TraversalRunnable.run(ViewRootImpl.java:5965)
        at android.view.Choreographer$CallbackRecord.run(Choreographer.java:767)
        at android.view.Choreographer.doCallbacks(Choreographer.java:580)
        at android.view.Choreographer.doFrame(Choreographer.java:550)
        at android.view.Choreographer$FrameDisplayEventReceiver.run(Choreographer.java:753)
        at android.os.Handler.handleCallback(Handler.java:739)
        at android.os.Handler.dispatchMessage(Handler.java:95)
    	at android
```

Another one:
```
09-12 11:10:58.997 9414-9414/com.xwray.groupie.example E/AndroidRuntime: FATAL EXCEPTION: main
    Process: com.xwray.groupie.example, PID: 9414
    java.lang.IndexOutOfBoundsException: Inconsistency detected. Invalid view holder adapter positionViewHolder{1de4d1b8 position=9 id=-1, oldPos=1, pLpos:1 scrap [attachedScrap] tmpDetached not recyclable(1) no parent} androidx.recyclerview.widget.RecyclerView{3c5d1749 VFED.... .F....ID 0,0-1200,1920 #7f090070 app:id/recyclerView}, adapter:com.xwray.groupie.GroupAdapter@1c31584e, layout:androidx.recyclerview.widget.GridLayoutManager@243e8d6f, context:com.xwray.groupie.example.MainActivity@2e895d57
        at androidx.recyclerview.widget.RecyclerView$Recycler.validateViewHolderForOffsetPosition(RecyclerView.java:5715)
        at androidx.recyclerview.widget.RecyclerView$Recycler.tryGetViewHolderForPositionByDeadline(RecyclerView.java:5898)
        at androidx.recyclerview.widget.RecyclerView$Recycler.getViewForPosition(RecyclerView.java:5858)
        at androidx.recyclerview.widget.RecyclerView$Recycler.getViewForPosition(RecyclerView.java:5854)
        at androidx.recyclerview.widget.LinearLayoutManager$LayoutState.next(LinearLayoutManager.java:2230)
        at androidx.recyclerview.widget.GridLayoutManager.layoutChunk(GridLayoutManager.java:557)
        at androidx.recyclerview.widget.LinearLayoutManager.fill(LinearLayoutManager.java:1517)
        at androidx.recyclerview.widget.LinearLayoutManager.onLayoutChildren(LinearLayoutManager.java:612)
        at androidx.recyclerview.widget.GridLayoutManager.onLayoutChildren(GridLayoutManager.java:171)
        at androidx.recyclerview.widget.RecyclerView.dispatchLayoutStep1(RecyclerView.java:3875)
        at androidx.recyclerview.widget.RecyclerView.dispatchLayout(RecyclerView.java:3639)
        at androidx.recyclerview.widget.RecyclerView.onLayout(RecyclerView.java:4194)
        at android.view.View.layout(View.java:15693)
        at android.view.ViewGroup.layout(ViewGroup.java:5038)
        at android.widget.FrameLayout.layoutChildren(FrameLayout.java:579)
        at android.widget.FrameLayout.onLayout(FrameLayout.java:514)
        at android.view.View.layout(View.java:15693)
        at android.view.ViewGroup.layout(ViewGroup.java:5038)
        at android.widget.FrameLayout.layoutChildren(FrameLayout.java:579)
        at android.widget.FrameLayout.onLayout(FrameLayout.java:514)
        at android.view.View.layout(View.java:15693)
        at android.view.ViewGroup.layout(ViewGroup.java:5038)
        at android.widget.LinearLayout.setChildFrame(LinearLayout.java:1703)
        at android.widget.LinearLayout.layoutVertical(LinearLayout.java:1557)
        at android.widget.LinearLayout.onLayout(LinearLayout.java:1466)
        at android.view.View.layout(View.java:15693)
        at android.view.ViewGroup.layout(ViewGroup.java:5038)
        at android.widget.FrameLayout.layoutChildren(FrameLayout.java:579)
        at android.widget.FrameLayout.onLayout(FrameLayout.java:514)
        at android.view.View.layout(View.java:15693)
        at android.view.ViewGroup.layout(ViewGroup.java:5038)
        at android.widget.LinearLayout.setChildFrame(LinearLayout.java:1703)
        at android.widget.LinearLayout.layoutVertical(LinearLayout.java:1557)
        at android.widget.LinearLayout.onLayout(LinearLayout.java:1466)
        at android.view.View.layout(View.java:15693)
        at android.view.ViewGroup.layout(ViewGroup.java:5038)
        at android.widget.FrameLayout.layoutChildren(FrameLayout.java:579)
        at android.widget.FrameLayout.onLayout(FrameLayout.java:514)
        at android.view.View.layout(View.java:15693)
        at android.view.ViewGroup.layout(ViewGroup.java:5038)
        at android.view.ViewRootImpl.performLayout(ViewRootImpl.java:2131)
        at android.view.ViewRootImpl.performTraversals(ViewRootImpl.java:1888)
        at android.view.ViewRootImpl.doTraversal(ViewRootImpl.java:1106)
        at android.view.ViewRootImpl$TraversalRunnable.run(ViewRootImpl.java:5965)
        at android.view.Choreographer$CallbackRecord.run(Choreographer.java:767)
        at android.view.Choreographer.doCallbacks(Choreographer.java:580)
        at android.view.Choreographer.doFrame(Choreographer.java:550)
        at android.view.Choreographer$FrameDisplayEventReceiver.run(Choreographer.java:753)
        at android.os.Handler.handleCallback(Handler.java:739)
        at android.os.Handler.dispatchMessage(Handler.java:95)
    	at androi

```
**Describe the bug**
Situation: I'm updating all the items of the GroupAdapter (recreating all of them at every update and calling GroupAdapter.update(items)). I have id specified for all items so the DiffUtil could tell which items were actually kept, moved or inserted/removed, and I have also equals() overridden for all items (including expandable items) to only redraw if there were actual modifications.

In this scenario, when I update the items where I also recreate the Expandable header but it's unmodified, so equals() returns true with the previous one - after an update like this, the Expandable item's expand/collapse will no longer work.

**To Reproduce**
I forked the project and modified it to reproduce the bug in MainActivity, it's here:
https://github.com/scorpeeon/groupie/tree/expandable-bug

Steps to reproduce the behavior:

Upon starting the example (the normal one, not databinding), clicking the expand/collapse button works as expected.
After updating the items (which can be achieved by pressing the Floating Action Button (with settings icon) which I modified, the expand/collapse button will no longer work.

The icon still gets animated correctly, and when I debug I can see onToggleExpanded() is called, isExpanded gets set correctly, oldSize and newSize are computed correctly, it goes to NestedGroup's notifyItemRangeInserted() (or notifyItemRangeRemoved() when collapsing) where observable.onItemRangeInserted() is called, and inside that the observers list seems to be empty so nothing happens.

**Expected behavior**
Expanding/collapsing should keep working after updating the items with new instances.

**Library version**
2.5.1

**Additional context**
Just noticed there's a bug here that sounds similar to what I'm seeing: https://github.com/lisawray/groupie/issues/271
It could be related to that as well.
**Is your feature request related to a problem? Please describe**
The [Android Paging library](https://developer.android.com/topic/libraries/architecture/paging) is becoming the standard way to handle paging on Android. As far as I know, it currently does not work with Groupie yet. It would be great to add support for the library to Groupie.

@chibatching has written an article on [how to connect the Paging library with Groupie](https://medium.com/@chibatching/how-to-connect-paging-library-with-groupie-f8b4102d59b0). This is a great start, I'm not sure it's the ideal solution:

* It requires you to have a `PagedList` containing groupie `Item`s. This is not a great separation of concern. We want the `DataSource` to provide data, not groupie `Item`s to keep the `DataSource` free from any view related logic. The post suggests passing a transform function to the datasource, which works, but it still means that the `ViewModel` is exposing a `PagedList` of groupie items. You could transform the `PagedList` by using the `.map` function on the `DataSourceFactory`. However this means losing any additional information on the factory (such as a `LiveData` exposing error states).
* It loads all content into a single `Group`. I'm not sure if this is a problem but ideally you'd submit the paged list directly into the adapter.
* It's not a native solution that the library provides

**Describe the solution you'd like**
First-class support for the paging library in the main groupie library or perhaps an additional module. 

## Option 1
Add a `update(p pagedList<T>, t TransformFunction)` function to `GroupAdapter`. 

This function takes a PagedList of any raw data, and a transform function that maps the data to groupie items.

## Option 2
Add a `update(p PagedList<T: Item>`)  function to `GroupAdapter`.

This still requires that the PagedList is mapped to groupie items by the consumer first.

**Additional context**
If this is something you would consider adding to the library, I'd be happy to give it a shot and see if I can come up with a PR.
I don't want to redraw all ExpandableGroups, so i override equals in my Item as follows: 
```
override fun equals(other: Any?): Boolean {
        if (this === other) return true
        if (other !is HeaderItem) return false

        if (identifier != other.identifier) return false
        if (expandableGroup.itemCount != other.expandableGroup.itemCount) return false
        return true
    }
```

But if I change ChildrenItem and don't redraw HeaderItems I can't click on other HeaderItems.