I have a use case: a list of blocks, each of which has another list, and both the block list items and sub-list items should be draggable and droppable. 

I tried your lib. Only block level moves. Any plan to add nested dnd?

Thanks
Example: https://codesandbox.io/s/basic-react-movable-jm1ld

I can observe the problem in Safari 13 on iOS.

It works fine in every other browser I tried. Even Safari on desktop works!

But with Safari on iOS, what I see there is that the table displays, and reordering the table by dragging the handles works, but scrolling the table to the right does not work.

I haven't looked into the react-movable code at all, but I'm guessing that somehow react-movable is blocking whatever click/drag event that Safari uses for scrolling. Which is a sensible thing for react-movable to do, to implement reordering via dragging.  But in this case, since my table uses `data-movable-handle` to specify only one column of the table as the handle, react-movable shouldn't be interfering at all with click/drag events in other columns.

I previously had a similar table made with react-sortable-hoc that didn't have this problem, so it must be possible for it to work.
Hi @tajo,

Here the commit with changes from issue #20. 

I called the new callback `afterDrag` as you suggested so that it matches to the existing `beforeDrag`. It is called right before `onChange` and contains the new index of the dragged element.

Both `beforeDrag` and `afterDrag` callbacks are now the ClientRect object. Since, we can't access the ghostRef when beforeDrag is called, I'm returning the ClientRect of the original DOM element.

Also, added `onMove` callback. I haven't implemented its triggered when list elements are moved with keyboard shortcuts as it contains the mouse coordinates and they are not quite relevant when moving the items with keyboard.

Regarding the tests, I haven't found any of them for `beforeDrag` in the existing codebase, so I haven't written tests for new callbacks. Let me know if you find them necessary. 

Thanks,
Andrey
Hello. First of all thanks for great library, simple and clean. 

Readme states that IE 11 is supported but I've encountered small issue with it. 
Here https://github.com/tajo/react-movable/blob/v2.2.0/src/List.tsx#L132
`findIndex` method is used which seems to be not fully supported by IE 
https://caniuse.com/#search=findIndex

At least I've got 
<img width="698" alt="Screen Shot 2019-08-20 at 2 02 52 PM" src="https://user-images.githubusercontent.com/5270546/63342050-3d520c80-c353-11e9-8d82-01f46871ac67.png">
and had to add this library to webpack config.

I appreciate your focus on minimalism and sticking to just the essentials! It's a great library. I'm wondering if any of the following additions would make the cut to be added?

1. `onDragEnd` event that fires regardless of whether a change occurs or not. I'm using `beforeDrag` to track when dragging is actually occurring and customizing the UI. But I need custom logic to determine when it stops.
2. Send the `clientX` and `clientY` positions as part of the `beforeDrag` event.
3. `onMove` event that includes `clientX` and `clientY`. I think 2&3 would allow for greater customization without adding any bulk to the library. Personally, I'd like to use 2&3 to change the cursor to a grabber only once the item has been dragged > 5px. Why? Because it's clickable until it's been dragged a few pixels (similar to Trello drag and drop).

I'm having trouble to get scrolling within nested containers to work properly and I hope that you can point me in the right direction.

__Description:__
- My layout is created using a CSS grid without having any exact width/height values (responsive)
- One of the fields is completely filled by a reactstrap Card component `C`
- `C` contains the actual list `L` which manages/includes the movable list entries

A simplified example can be found here: https://codesandbox.io/s/snowy-glitter-mwibr
(With explicit size for display of the main container)

__Question:__ 
Given these circumstances I seem to be unable to get scrolling to work:

- As far as I know I need to set `overflow` on `C` due to limitations regarding overflow scrolling within flex/grid layouts when not setting width/heights explicitly. But if I do that, react-movable doesn't seem to be able to pick up the scrolling necessities (see previous example)

- I also tried to include `C` within `L.renderList` which solves the scrolling issue but when I try to drag an item the whole list is displayed as movable object --> https://codesandbox.io/s/icy-fire-s3g2r

- The last thing I tried was setting `overflow` on `L` directly but then overflow is not working at all --> https://codesandbox.io/s/youthful-kalam-xowyt

**Any help regarding the correct practice would be much appreciated as I really enjoy this simple to use but effective package!**

Thanks.
So, I have items with a drag handle (data-movable-handle).
When touching and dragging on the rest of the item I expect the page to scroll. It doesn't.