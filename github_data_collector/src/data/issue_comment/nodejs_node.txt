Original commit message:

    [coverage] Fix coverage with default arguments

    In the presence of default arguments, the body of the function gets
    wrapped into another block. This caused our trailing-range-after-return
    optimization to not apply, because the wrapper block had no source
    range assigned. This CL correctly assignes a source range to that block,
    which allows already present code to handle it correctly.

    Note that this is not a real coverage bug; we've just been reporting
    whitespace as uncovered. We're fixing it for consistency.

    Originally reported on github.com/bcoe/c8/issues/66

    Bug: v8:9952
    Change-Id: Iab3905f558eb99126e0dad8072d03d0a312fdcd3
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/1903430
    Commit-Queue: Sigurd Schneider <sigurds@chromium.org>
    Reviewed-by: Toon Verwaest <verwaest@chromium.org>
    Reviewed-by: Jakob Gruber <jgruber@chromium.org>
    Cr-Commit-Position: refs/heads/master@{#64836}

Refs: https://github.com/v8/v8/commit/0dfd9ea51241bebf724f2eb8d6d0158a014f866a

PR-URL: https://github.com/nodejs/node/pull/30713
Reviewed-By: MichaÃ«l Zasso <targos@protonmail.com>
Reviewed-By: Colin Ihrig <cjihrig@gmail.com>
Reviewed-By: Jiawen Geng <technicalcute@gmail.com>
Reviewed-By: Rich Trott <rtrott@gmail.com>

<!--
Thank you for your pull request. Please provide a description above and review
the requirements below.

Bug fixes and new features should include tests and possibly benchmarks.

Contributors guide: https://github.com/nodejs/node/blob/master/CONTRIBUTING.md
-->

##### Checklist
<!-- Remove items that do not apply. For completed items, change [ ] to [x]. -->

- [ ] `make -j4 test` (UNIX), or `vcbuild test` (Windows) passes
- [x] tests and/or benchmarks are included
- [x] documentation is changed or added
- [x] commit message follows [commit guidelines](https://github.com/nodejs/node/blob/master/doc/guides/contributing/pull-requests.md#commit-message-guidelines)

<!--
Developer's Certificate of Origin 1.1

By making a contribution to this project, I certify that:

(a) The contribution was created in whole or in part by me and I
    have the right to submit it under the open source license
    indicated in the file; or

(b) The contribution is based upon previous work that, to the best
    of my knowledge, is covered under an appropriate open source
    license and I have the right under that license to submit that
    work with modifications, whether created in whole or in part
    by me, under the same open source license (unless I am
    permitted to submit under a different license), as indicated
    in the file; or

(c) The contribution was provided directly to me by some other
    person who certified (a), (b) or (c) and I have not modified
    it.

(d) I understand and agree that this project and the contribution
    are public and that a record of the contribution (including all
    personal information I submit with it, including my sign-off) is
    maintained indefinitely and may be redistributed consistent with
    this project or the open source license(s) involved.
-->

<!--
Thank you for your pull request. Please provide a description above and review
the requirements below.

Bug fixes and new features should include tests and possibly benchmarks.

Contributors guide: https://github.com/nodejs/node/blob/master/CONTRIBUTING.md
-->

NodeJS should allow C++ users to create contexts, whose compiled script can be debugged through the inspector agent. Currently this functionality is only available for JavaScript modules through VM module. Unfortunately, VM creates a context whose global is completely new and hidden ``v8::FunctionTemplate``. C++ users might already have ``v8::FunctionTemplate`` or ``v8::ObjectTemplate`` from which they create a context.

The only option now is to call V8 API directly: ``v8::Context::New(...)``. The created context is not associated with any ``node::Environment`` and code executed in that context cannot be debugged in the inspector agent (the context is missing ``debug_context_id`` as this is provided when the agent is notified by ``ContextCreated``). This might actually be an intended behavior. The ``node::NewContext`` also create a context and do not report it to any agent (agent is a part of ``node::Environment`` and ``node::NewContext`` does not access any environments.

This is a proposal of a new feature to allow mitigate that gap. It provides another form of ``node::NewContext`` where ``node::Environment`` is accepted as the first parameter instead of ``v8::Isolate``. When such an environment is available, it will create a context with a specific ``v8::ObjectTemplate`` and then call ``v8::Environment::AssignToContext``. The latter will report the newly created context to the environment's inspector agent (if one is available) and add some embedders properties to allow proper handling of stack traces.

Without this feature, C++ modules can create ``v8::Context`` and use ``v8::ScriptCompiler`` to compile functions and scripts. Those scripts are not reported to the inspector agent and functions has ``[[FunctionLocation]]`` internal slot set to ``<unknown>`` even when ``v8::Source`` specify resource name, line and column offset, etc. If a context is reported to the inspector agent, it receives a ``debug_context_id``. If this is available, compilation of new scripts and functions in that context will report to the inspector agent, which will send the source to the inspector frontend. Furthermore, the environment that has setup ``PrepareStackTraceCallback`` calls for ``Environment::GetCurrent(context)``. If an exception occurs into a context not assigned to environment, stack trace would be ignored, even when it is available.

This feature can be implemented using the following principles:
- Additive: do not change any behavior and code of existing NodeJS implementation;
- Minimal: do not add large amount of new code;
- Efficient: does not require additional variables, objects, etc to be stored into memory; does not require additional processing when the feature is not used;
- Useful: it allows access to huge amount of V8 API. C++ addons can use that API now, but with a limitation towards debugging and stack trace generation.

##### Checklist
<!-- Remove items that do not apply. For completed items, change [ ] to [x]. -->

- [x] `make -j4 test` (UNIX), or `vcbuild test` (Windows) passes
- [ ] tests and/or benchmarks are included
- [ ] documentation is changed or added
- [x] commit message follows [commit guidelines](https://github.com/nodejs/node/blob/master/doc/guides/contributing/pull-requests.md#commit-message-guidelines)

<!--
Developer's Certificate of Origin 1.1

By making a contribution to this project, I certify that:

(a) The contribution was created in whole or in part by me and I
    have the right to submit it under the open source license
    indicated in the file; or

(b) The contribution is based upon previous work that, to the best
    of my knowledge, is covered under an appropriate open source
    license and I have the right under that license to submit that
    work with modifications, whether created in whole or in part
    by me, under the same open source license (unless I am
    permitted to submit under a different license), as indicated
    in the file; or

(c) The contribution was provided directly to me by some other
    person who certified (a), (b) or (c) and I have not modified
    it.

(d) I understand and agree that this project and the contribution
    are public and that a record of the contribution (including all
    personal information I submit with it, including my sign-off) is
    maintained indefinitely and may be redistributed consistent with
    this project or the open source license(s) involved.
-->

At commit cc0748f509140b7b42d157348300a5581db98a37:
```js
import { Worker, isMainThread } from 'worker_threads';
if (isMainThread)
  new Worker(__filename);
else
  await new Promise(r => r(console.log(42)));
```
With `--harmony_top_level_await`:
```
$ node --harmony_top_level_await t.mjs
(node:5066) ExperimentalWarning: The ESM module loader is experimental.
internal/modules/esm/loader.js:165
    return module.getNamespace();
                  ^

Error: cannot get namespace, Module has not been instantiated
    at Loader.import (internal/modules/esm/loader.js:165:19)
```
Without:
```
$ node t.mjs
(node:5039) ExperimentalWarning: The ESM module loader is experimental.
file:///home/bnoordhuis/src/master/t.mjs:5
  await new Promise(r => r(console.log(42)));
  ^^^^^

SyntaxError: Unexpected reserved word
    at Loader.moduleStrategy (internal/modules/esm/translators.js:66:18)
    at async link (internal/modules/esm/module_job.js:37:21)
```
For comparison, plain TLA works with the flag:
```
$ cat > t.mjs
await new Promise(r => r(console.log(42)));

$ node --harmony_top_level_await t.mjs
(node:5090) ExperimentalWarning: The ESM module loader is experimental.
42
```
**Is your feature request related to a problem? Please describe.**

Developer tools may run user code in a child process. When invoked in in a terminal, `process.stdout` and `process.stderr` will be TTY streams. This will not be the case in the child process.

**Describe the solution you'd like**

It'd be great if the developer tool could force TTY to be available in the child process.

**Describe alternatives you've considered**

I've tried faking TTY support in the child processes. This is somewhat doable but breaks when Node.js adds new features. [With AVA we've now removed this behavior, hoping for somebody to provide the functionality in a separately loadable package](https://github.com/avajs/ava/issues/2343).

It'd be much better if we could make Node.js provide its own implementation.
Previously due to compat reasons 'close' was only emitted if no 'error'.
This removes the compat behavior in order to properly follow expected
streams behavior.

Not sure why this compat behavior has remained for so long but I believe it should be possible to make fs stream consistent with normal streams in a semver-major.

<!--
Thank you for your pull request. Please provide a description above and review
the requirements below.

Bug fixes and new features should include tests and possibly benchmarks.

Contributors guide: https://github.com/nodejs/node/blob/master/CONTRIBUTING.md
-->

##### Checklist
<!-- Remove items that do not apply. For completed items, change [ ] to [x]. -->

- [x] `make -j4 test` (UNIX), or `vcbuild test` (Windows) passes
- [x] tests and/or benchmarks are included
- [x] documentation is changed or added
- [x] commit message follows [commit guidelines](https://github.com/nodejs/node/blob/master/doc/guides/contributing/pull-requests.md#commit-message-guidelines)

<!--
Developer's Certificate of Origin 1.1

By making a contribution to this project, I certify that:

(a) The contribution was created in whole or in part by me and I
    have the right to submit it under the open source license
    indicated in the file; or

(b) The contribution is based upon previous work that, to the best
    of my knowledge, is covered under an appropriate open source
    license and I have the right under that license to submit that
    work with modifications, whether created in whole or in part
    by me, under the same open source license (unless I am
    permitted to submit under a different license), as indicated
    in the file; or

(c) The contribution was provided directly to me by some other
    person who certified (a), (b) or (c) and I have not modified
    it.

(d) I understand and agree that this project and the contribution
    are public and that a record of the contribution (including all
    personal information I submit with it, including my sign-off) is
    maintained indefinitely and may be redistributed consistent with
    this project or the open source license(s) involved.
-->

It would be cool if we would offer a way to let endusers run the benchmarks complet and submit results with some added data so we can compare the results against diffrent cpu and other metrics.

Change the type of `Buffer::kMaxLength` to size_t because upcoming
changes in V8 will allow typed arrays > 2 GB on 64 bits platforms.

Not all platforms handle file reads and writes > 2 GB though so keep
enforcing the 2 GB typed array limit for I/O operations.

Fixes: https://github.com/nodejs/node/issues/31399
Refs: https://github.com/libuv/libuv/pull/1501
This test provides missing coverage for `__wasi_path_symlink()` and `__wasi_path_readlink()`.

##### Checklist
- [x] `make -j4 test` (UNIX), or `vcbuild test` (Windows) passes
- [x] tests and/or benchmarks are included
- [x] commit message follows [commit guidelines](https://github.com/nodejs/node/blob/master/doc/guides/contributing/pull-requests.md#commit-message-guidelines)
<!--
Thank you for your pull request. Please provide a description above and review
the requirements below.

Bug fixes and new features should include tests and possibly benchmarks.

Contributors guide: https://github.com/nodejs/node/blob/master/CONTRIBUTING.md
-->

##### Checklist
<!-- Remove items that do not apply. For completed items, change [ ] to [x]. -->

- [X] `make -j4 test` (UNIX), or `vcbuild test` (Windows) passes
- [] tests and/or benchmarks are included
- [X] documentation is changed or added
- [X] commit message follows [commit guidelines](https://github.com/nodejs/node/blob/master/doc/guides/contributing/pull-requests.md#commit-message-guidelines)

<!--
Developer's Certificate of Origin 1.1

By making a contribution to this project, I certify that:

(a) The contribution was created in whole or in part by me and I
    have the right to submit it under the open source license
    indicated in the file; or

(b) The contribution is based upon previous work that, to the best
    of my knowledge, is covered under an appropriate open source
    license and I have the right under that license to submit that
    work with modifications, whether created in whole or in part
    by me, under the same open source license (unless I am
    permitted to submit under a different license), as indicated
    in the file; or

(c) The contribution was provided directly to me by some other
    person who certified (a), (b) or (c) and I have not modified
    it.

(d) I understand and agree that this project and the contribution
    are public and that a record of the contribution (including all
    personal information I submit with it, including my sign-off) is
    maintained indefinitely and may be redistributed consistent with
    this project or the open source license(s) involved.
-->


This makes all the parameters of the `fs.read` function, except
for `fd` and the callback(when not using as a promise) optional.


fixes #31237 


I still need to add a few tests(i've done some manual testing), but wanted to get this out to start the discussion.


There is one part,[ which i've commented in the code](https://github.com/nodejs/node/pull/31402/files#diff-9a205ef7ee967ee32efee02e58b3482dR461), where i did something to satisfy the linting, but i wasn't thrilled with it.  Maybe having a lint exception here might be better?  Looking for input on that


I'm not a typescript user,  but i wonder if changing the function signature will somehow have a negative effect
- `'finish'` can be emitted after `'close'` if `destroy()` is called inside a`'prefinish'` handler.
- `'prefinish'` has different timing (sync vs async) depending on whether `Writable` implements `_final` which can cause problems such as above to occur or not occur.

I assume `'prefinish'` is mostly used internally so it's probably not a huge issue.