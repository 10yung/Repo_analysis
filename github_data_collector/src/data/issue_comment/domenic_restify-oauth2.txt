See #47.

Please review and let me know if this works for you. Since Restify 5.x removed the `restify.errors` property, I had to use the `restify-errors` package. 

The most important change is that restify-errors don't allow the customization of the `body`, but it does allow the creation of new errors using the `makeConstructor` function. So the JSON output will change a little bit from { error: ..., errorDescription: ...}  to { code: ..., message: ... }. Does that comply with the specification?
In Restify v5.x all errors definitions were moved into the separate repository: [restify-errors](https://github.com/restify/errors).

As a result, restify-oauth2 code requires refactoring as described here: http://restify.com/docs/home/#restify-errors
errors doesn't really exist natively in restify in the same way as before, thus switch to restify-errors for errors gives better errors
The framework will always check for a token on POST requests. Here is an example:

```
app.post('/user/create', userCreate);
app.get('/user/create', userCreate);

function userCreate(req, res) {
     res.json({json:'Jay SON'});
     return;
}
```

The get requests returns correctly, the post request returns the following:

```
{
  "code": "BadRequestError",
  "message": "Bearer token required. Follow the oauth2-token link to get one!"
}
```

Why can I not use a password grant_type without providing a Authorization header..
Hi everyone,
Â¿ is it possible to set **custom error messages** within the ropc `option.hooks`? as i dont have access to `res`, the only way i found is to modify the [ropc/grantToken.js](https://github.com/domenic/restify-oauth2/blob/master/lib/ropc/grantToken.js) file.

Regards

In at least some cases, sending without declaring explicit content types can lead it to not be set when the response is sent.

Hi,

I'm not sure I'm approaching this right, but when using restify with restify-oauth2 to secure an api endpoint for Web app - I'm getting a login dialog (at least on Chrome). To battle that I forked and added a new option noWwwAuthenticate next to the tokenEndpoint, wwwAuthenticateRealm, etc. and then I have a logic to _not_ set appropriate header in makeErrorSenders.js (for both setWwwAuthenticateHeader and setWwwAuthenticateHeaderWithoutErrorInfo). I think I overlooked something in the docs or/and usage specs. Do reckon there is a proper approach to it? 

In case you find this useful - I can create a pull request.

Hi,

I would like to use both Authorization Grant CC and ROPC with same tokenEndpoint.

restifyOAuth2.cc(server, {tokenEndpoint: "/token", hooks: restifyOAuth2Hooks});

restifyOAuth2.ropc(server, {tokenEndpoint: "/token", hooks: restifyOAuth2RopcHooks});

What is the best way to setup or patch?

Regards,

Is there any interest in supporting some way of disabling the automatic addition of the `/token` route in order to support usage of restify-oauth2 in multiple servers on the same domain?

My use case is that I'd like to have a restify server running at `mydomain.com/api/auth` which has a `/token` route, and then multiple other servers running at other points which do not grant tokens, but use the restify-oauth2 library to validate tokens.

To be more explicit, I'm interested in something like this:

``` javascript
// ====== server running at mydomain.com/api/auth ======

var restify = require('restify'),
   restifyOauth2 = require('restify-oauth2');

// server setup ...

restifyOAuth2.cc(server, {includeTokenEndpoint: true});
server.listen(8080);

// ====== server running at mydomain.com/api/users ======

var restify = require('restify'),
   restifyOauth2 = require('restify-oauth2');

// server setup...

restifyOAuth2.cc(server, {includeTokenEndpoint: false});

server.get('/', function (req, res) {
   if (!req.clientId) {
      return res.sendUnauthenticated();
   }

   res.contentType = 'application/json';
   res.send({message: 'I can tell you got a token from the other server'});
});

server.listen(8090);
```

If there's interest, I'm happy to work on a pull request. Thanks!
