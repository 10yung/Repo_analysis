# Description:

As pointed out in #3081, RubyGems currently frequently sets the `SOURCE_DATE_EPOCH` environment variable even if it doesn't need to. This can break certain things.

With this PR:

- `Gem.source_date_epoch` no longer sets environment variables at all.
- `Gem.with_source_date_epoch { ... }` sets `SOURCE_DATE_EPOCH`, yields,
  then reverts it to its previous value. It returns the result of the block passed to it.

# Tasks:

- [x] Describe the problem / feature
- [x] Write tests
- [x] Write code to solve the problem
- [ ] code review from coworkers / friends

I will abide by the [code of conduct](https://github.com/rubygems/rubygems/blob/master/CODE_OF_CONDUCT.md).

I'm having a problem or would like to suggest a feature.

My current problem is that `Gem::Specification.find_by_name('bundler')` raises an exception if the program running it is currently in a deleted directory

This issue is related to:

  - [x] Other

Here are my current environment details:

```
$ gem env version
3.1.2
```

I will abide by the [code of conduct](https://github.com/rubygems/rubygems/blob/master/CODE_OF_CONDUCT.md).

# Reproducing this issue
Here's a repro case:

```ruby
require 'tmpdir'

Dir.mktmpdir do |dir|
  Dir.chdir(dir)
  puts "pwd is now #{Dir.pwd}"
end

# our current dir is now gone
bundler_gem = Gem::Specification.find_by_name('bundler') # ...and this breaks.
puts("Using Bundler #{bundler_gem.version.to_s}")
```

<details>
  <summary>output and backtrace</summary>

```
pwd is now /private/var/folders/nt/f37r9kbx1n73b4sj48rr4tsw0000gn/T/d20200117-32602-19akv9a
Traceback (most recent call last):
        10: from main.rb:9:in `<main>'
         9: from /Users/asf/.rbenv/versions/2.6.3/lib/ruby/site_ruby/2.6.0/rubygems/specification.rb:988:in `find_by_name'
         8: from /Users/asf/.rbenv/versions/2.6.3/lib/ruby/site_ruby/2.6.0/rubygems/dependency.rb:323:in `to_spec'
         7: from /Users/asf/.rbenv/versions/2.6.3/lib/ruby/site_ruby/2.6.0/rubygems/dependency.rb:303:in `to_specs'
         6: from /Users/asf/.rbenv/versions/2.6.3/lib/ruby/site_ruby/2.6.0/rubygems/dependency.rb:284:in `matching_specs'
         5: from /Users/asf/.rbenv/versions/2.6.3/lib/ruby/site_ruby/2.6.0/rubygems/bundler_version_finder.rb:45:in `filter!'
         4: from /Users/asf/.rbenv/versions/2.6.3/lib/ruby/site_ruby/2.6.0/rubygems/bundler_version_finder.rb:7:in `bundler_version'
         3: from /Users/asf/.rbenv/versions/2.6.3/lib/ruby/site_ruby/2.6.0/rubygems/bundler_version_finder.rb:22:in `bundler_version_with_reason'
         2: from /Users/asf/.rbenv/versions/2.6.3/lib/ruby/site_ruby/2.6.0/rubygems/bundler_version_finder.rb:73:in `lockfile_version'
         1: from /Users/asf/.rbenv/versions/2.6.3/lib/ruby/site_ruby/2.6.0/rubygems/bundler_version_finder.rb:85:in `lockfile_contents'
/Users/asf/.rbenv/versions/2.6.3/lib/ruby/site_ruby/2.6.0/rubygems/bundler_version_finder.rb:85:in `pwd': No such file or directory - getcwd (Errno::ENOENT)
```
</details>

This is a mildly contrived example (I tried to make it self-contained), but sometimes the services we run have their working directory go away due to environmental conditions; it would be good if they were resilient to this scenario - I would expect the specification finder to either work as expected (it does find a bundler gem if you execute the code under `bundle exec` but raises `Errno::ENOENT` if no bundler is present in the currently-loaded gems.

I would expect this snippet to correctly find the bundler gem that's installed via rubygems, or if that's not installed on the global rubygems env, to return a nil specification.
I'm having a problem and would like to a feature.

My current problem is:

I would like to publish prerelease versions with dashes, eg something like `1.2.0.pre-update-logo`. This appears to not be possible as of rubygems version 3.0.4:

```log
irb(main):001:0> Gem::Version.new('1.2.0.pre-update-logo')
=> #<Gem::Version "1.2.0.pre.pre.update.pre.logo">
```

The `-`'s are all replaced by `.pre.` which is fairly unhelpful (except possibly the first replacement). That happens here: https://github.com/rubygems/rubygems/blob/d8fa21e82b5669880331e2fe236b2cede1d6c4fb/lib/rubygems/version.rb#L221

Dashes in prerelease versions are allowed by the SemVer spec: 

> A pre-release version MAY be denoted by appending a hyphen and a series of dot separated identifiers immediately following the patch version. Identifiers MUST comprise only ASCII alphanumerics and hyphen [0-9A-Za-z-]

Note that I'm not asking about "FULL SEMVER", but only about dashes in prerelease labels

This issue is related to:

  - [ ] Network problems
  - [ ] Installing a library
  - [x] Publishing a library
  - [ ] The command line `gem`
  - [x] Other

Other issues:

- Support for full Semantic versioning #592
- Match rubygems not-quite-Semver versioning for pre-release versioning #86

Here are my current environment details:

```
$ gem env version
RubyGems Environment:
  - RUBYGEMS VERSION: 3.0.4
  - RUBY VERSION: 2.5.3 (2018-10-18 patchlevel 105) [x86_64-linux]
(etc, n/a)
```

I will abide by the [code of conduct](https://github.com/rubygems/rubygems/blob/master/CODE_OF_CONDUCT.md).

Currently `deprecate` only supports four arguments, allowing for deprecation year and month. Attempting to supply a 'day' fails. 

```
class MyClass
  extend Gem::Deprecate
  
  def the_dying_method
  end
  deprecate :the_dying_method, :the_new_method, 2020, 5, 10
  
  def the_new_method
  end
end

#=> ArgumentError (wrong number of arguments (given 5, expected 4))
```

This supports prior implementation (day is optional) but can support more specific deprecation dates:

`NOTE: MyClass#the_dying_method is deprecated; use the_new_method instead. It will be removed on or after 2020-05-10.`

# Description:

______________

# Tasks:

- [ ] Describe the problem / feature
- [ ] Write tests
- [ ] Write code to solve the problem
- [ ] Get code review from coworkers / friends

I will abide by the [code of conduct](https://github.com/rubygems/rubygems/blob/master/CODE_OF_CONDUCT.md).

I'm having a problem.

My current problem is in the title. Steps to reproduce:

`1.sh`:

```sh
#!/bin/sh
# apk add build-base neovim
gem install bundler -v '~> 1.0'
mkdir app
cd app
touch Gemfile
bundle _1.17.3_
cat Gemfile.lock
cat > 1.rb <<\SCRIPT
require 'bundler/setup'
p Bundler::VERSION
SCRIPT
ruby 1.rb
```

```
$ docker run --rm -v $PWD/1.sh:/1.sh ruby:2.7-alpine ./1.sh
Successfully installed bundler-1.17.3
1 gem installed
The Gemfile specifies no dependencies
Resolving dependencies...
Bundle complete! 0 Gemfile dependencies, 1 gem now installed.
Use `bundle info [gemname]` to see where a bundled gem is installed.
GEM
  specs:

PLATFORMS
  ruby

DEPENDENCIES

BUNDLED WITH
   1.17.3
"2.1.2"
```

So, as you can see it says, "BUNDLED_WITH 1.17.3," but "2.1.2" gets required. That doesn't happen with `ruby-2.6`:

`2.sh`:

```sh
#!/bin/sh
# apk add build-base neovim
gem install bundler
mkdir app
cd app
touch Gemfile
bundle
cat Gemfile.lock
cat > 1.rb <<\SCRIPT
require 'bundler/setup'
p Bundler::VERSION
SCRIPT
ruby 1.rb
```

```
$ docker run --rm -v $PWD/2.sh:/2.sh ruby:2.6-alpine
Successfully installed bundler-2.1.4
1 gem installed
Resolving dependencies...
Bundle complete! 0 Gemfile dependencies, 1 gem now installed.
Use `bundle info [gemname]` to see where a bundled gem is installed.
GEM
  specs:

PLATFORMS
  ruby

DEPENDENCIES

BUNDLED WITH
   2.1.4
"2.1.4"
```

The reason why this is happening is because `rubygems` [doesn't find][1] the default `bundler` spec by path, as such the default `bundler` is always required. That in its turn happens because when the default spec (`bundler-2.1.2`) gets registered, none of its files make its way into `@path_to_default_spec_map`. Because the spec is considered to be in the new format, but [the following line][2] filters out all the `bundler` files. Let's take a look at the `bundler-2.1.2` spec [from `ruby-2.7`][3]:

`/usr/local/lib/ruby/gems/2.7.0/specifications/default/bundler-2.1.2.gemspec`:

```rb
...
  s.require_paths = ["lib".freeze]
  s.files = ["bundler.rb".freeze, ..., "libexec/bundle".freeze, "libexec/bundler".freeze]
...
```

That is, there are 2 files in `libexec` dir, that is the reason why `rubygems` decides it uses the new format. But `prefix_pattern` is `/^(lib\/)/`, it doesn't match any file, can't be removed, and so every file is skipped.

`ruby-2.6` spec [doesn't have][4] `libexec` dir.

I'm not sure if that's an issue with `rubygems`. The `bundler` spec might very well be wrong, like in [this case][5].

[1]: https://github.com/rubygems/rubygems/blob/v3.1.2/lib/rubygems/core_ext/kernel_require.rb#L78
[2]: https://github.com/rubygems/rubygems/blob/v3.1.2/lib/rubygems.rb#L1294
[3]: https://gist.github.com/x-yuri/2d2691a682cc933f7a06147c84e1fd2b
[4]: https://gist.github.com/x-yuri/2d2691a682cc933f7a06147c84e1fd2b
[5]: https://bugs.ruby-lang.org/issues/15582

This issue is related to:

  - [ ] Network problems
  - [ ] Installing a library
  - [ ] Publishing a library
  - [ ] The command line `gem`
  - [x] Other

Here are my current environment details:

```
$ gem env version
3.1.2
```

I will abide by the [code of conduct](https://github.com/rubygems/rubygems/blob/master/CODE_OF_CONDUCT.md).

I'm having a problem with the behavior of the new `Gem.source_date_epoch` function. I don't think it should set the environment variable `SOURCE_DATE_EPOCH` if isn't already set. This affects the behavior of other applications. Existing programs may allow this environment variable to be unset. By loading rubygems (via Bundler at least) into the runtime, it has the side effect that the environment variable is always set. But there's no way to know if it was set by the user's environment or by RubyGems.

Either RubyGems shouldn't set this environment variable itself, or it should honor a secondary environment variable to prevent it from being set (or allow it to be set, either way).

Here are my current environment details:

```
$ gem env version
3.1.2
```

I will abide by the [code of conduct](https://github.com/rubygems/rubygems/blob/master/CODE_OF_CONDUCT.md).

Related issue: #2290
# Description:

Currently Rake::TestTask adds `-rdevkit` to `ruby_opts` for all Windows platforms using `Gem.win_platform?`.  `devkit` is only part of publicly facing `mingw` builds, and does not exist in other Windows builds.

# Tasks:

- [x] Describe the problem / feature
- [ ] Write tests
- [ ] Write code to solve the problem
- [ ] Get code review from coworkers / friends

I will abide by the [code of conduct](https://github.com/rubygems/rubygems/blob/master/CODE_OF_CONDUCT.md).

# Description:

@headius wrote at https://github.com/ruby/io-console/pull/11#issuecomment-571308909:
> One bit of process I'm not sure about: this -java gem can only be built with JRuby, and likewise the standard gem can't be build on JRuby, because the gemspec uses RUBY_ENGINE. This could be modified to allow building both versions on any impl, since they're just packaging files (i.e. there's no compile step required for either JRuby or MRI).
______________

# Tasks:

- [x] Describe the problem / feature
- [x] Write tests
- [x] Write code to solve the problem
- [ ] Get code review from coworkers / friends

I will abide by the [code of conduct](https://github.com/rubygems/rubygems/blob/master/CODE_OF_CONDUCT.md).

# Description:

Use an action that includes more rubies, so the we don't need to use `rvm` for ruby 2.3 and jruby.

# Tasks:

- [x] Describe the problem / feature
- [ ] Write tests
- [x] Write code to solve the problem
- [ ] Get code review from coworkers / friends

I will abide by the [code of conduct](https://github.com/rubygems/rubygems/blob/master/CODE_OF_CONDUCT.md).

# Description:

I do like the idea of bundler being able to lock its own version, but this implementation is not the right way to do it in my opinion.

I aim to reimplement this inside bundler in the near future, but it needs to be done in a more user friendly way that properly informs the user about what's going on, and never raises when not necessary.

But for now I think we should remove this code from rubygems because this is causing more problems than benefits and it's being counterproductive.

Closes #2671.
Closes #3044.
Closes rubygems/bundler#6913.
Closes rubygems/bundler#7031.
Closes rubygems/bundler#7489.
Closes rubygems/bundler#7517.
Closes rubygems/bundler#7538.
Closes rubygems/bundler#7564.

# Tasks:

- [x] Describe the problem / feature
- [ ] Write tests
- [x] Write code to solve the problem
- [ ] Get code review from coworkers / friends

I will abide by the [code of conduct](https://github.com/rubygems/rubygems/blob/master/CODE_OF_CONDUCT.md).
