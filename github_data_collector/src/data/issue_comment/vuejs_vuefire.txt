It would appear that I am unable to get the following call to work:

```
export const bindClasses = firestoreAction(({ bindFirestoreRef }) => {
    bindFirestoreRef('classes', fb.firestore().collection('classes'))
});
```

I see the mutation `vuexfire/ARRAY_ADD` being called but there is no data being written to `state.classes` - is there something I am missing?
Bumps [ts-jest](https://github.com/kulshekhar/ts-jest) from 24.0.2 to 24.3.0.
<details>
<summary>Release notes</summary>
<p><em>Sourced from <a href="https://github.com/kulshekhar/ts-jest/releases">ts-jest's releases</a>.</em></p>
<blockquote>
<h2>24.1.0</h2>
<h3>Bug Fixes</h3>
<ul>
<li><a href="https://github-redirect.dependabot.com/kulshekhar/ts-jest/issues/825">#825</a> handle symlinked modules (ala pnpm) correctly (<a href="https://github.com/kulshekhar/ts-jest/commit/e190b23">e190b23</a>)</li>
<li>handle tsBuildInfoFile option (<a href="https://github.com/kulshekhar/ts-jest/commit/f9583e9">f9583e9</a>), closes <a href="https://github-redirect.dependabot.com/kulshekhar/ts-jest/issues/1095">#1095</a></li>
<li><strong>perf:</strong> add cache for fs calls (<a href="https://github-redirect.dependabot.com/kulshekhar/ts-jest/issues/908">#908</a>) (<a href="https://github.com/kulshekhar/ts-jest/commit/3dada81">3dada81</a>)</li>
<li><strong>types:</strong> unforce esModuleInterop in tsconfig.json (<a href="https://github.com/kulshekhar/ts-jest/commit/c2d39b6">c2d39b6</a>)</li>
</ul>
</blockquote>
</details>
<details>
<summary>Changelog</summary>
<p><em>Sourced from <a href="https://github.com/kulshekhar/ts-jest/blob/master/CHANGELOG.md">ts-jest's changelog</a>.</em></p>
<blockquote>
<h1><a href="https://github.com/kulshekhar/ts-jest/compare/v24.2.0...v24.3.0">24.3.0</a> (2020-01-07)</h1>
<h3>Bug Fixes</h3>
<ul>
<li><strong>config:</strong> support babel config file path as string (<a href="https://github-redirect.dependabot.com/kulshekhar/ts-jest/issues/1332">#1332</a>) (<a href="https://github.com/kulshekhar/ts-jest/commit/78a53c2">78a53c2</a>)</li>
</ul>
<p><a name="24.2.0"></a></p>
<h1><a href="https://github.com/kulshekhar/ts-jest/compare/v24.1.0...v24.2.0">24.2.0</a> (2019-11-22)</h1>
<h3>Bug Fixes</h3>
<ul>
<li>typescript serviceHost cache miss on Windows operating systems (<a href="https://github.com/kulshekhar/ts-jest/commit/26ee731">26ee731</a>)</li>
<li><strong>compiler:</strong> pass filename to sha function instead of file extension (<a href="https://github.com/kulshekhar/ts-jest/commit/ac1ac97">ac1ac97</a>)</li>
<li><strong>transformers:</strong> hoist jest.enableAutomock and jest.disableAutomock (<a href="https://github.com/kulshekhar/ts-jest/commit/ac50bc3">ac50bc3</a>)</li>
</ul>
<p><a name="24.1.0"></a></p>
<h1><a href="https://github.com/kulshekhar/ts-jest/compare/v24.0.2...v24.1.0">24.1.0</a> (2019-09-12)</h1>
<h3>Bug Fixes</h3>
<ul>
<li><a href="https://github-redirect.dependabot.com/kulshekhar/ts-jest/issues/825">#825</a> handle symlinked modules (ala pnpm) correctly (<a href="https://github.com/kulshekhar/ts-jest/commit/e190b23">e190b23</a>)</li>
<li>handle tsBuildInfoFile option (<a href="https://github.com/kulshekhar/ts-jest/commit/f9583e9">f9583e9</a>), closes <a href="https://github-redirect.dependabot.com/kulshekhar/ts-jest/issues/1095">#1095</a></li>
<li><strong>perf:</strong> add cache for fs calls (<a href="https://github-redirect.dependabot.com/kulshekhar/ts-jest/issues/908">#908</a>) (<a href="https://github.com/kulshekhar/ts-jest/commit/3dada81">3dada81</a>)</li>
<li><strong>types:</strong> unforce esModuleInterop in tsconfig.json (<a href="https://github.com/kulshekhar/ts-jest/commit/c2d39b6">c2d39b6</a>)</li>
</ul>
<p><a name="24.0.2"></a></p>
</blockquote>
</details>
<details>
<summary>Commits</summary>
<ul>
<li><a href="https://github.com/kulshekhar/ts-jest/commit/51f8f826eca9072ba70fd8c5998392381f3a5721"><code>51f8f82</code></a> chore(release): 24.3.0</li>
<li><a href="https://github.com/kulshekhar/ts-jest/commit/847463177e96a0de475752dff5ab77494d4a1fbf"><code>8474631</code></a> chore: update package-lock.json</li>
<li><a href="https://github.com/kulshekhar/ts-jest/commit/e49e2559e994e3652510a65cd880f0b6d256b4df"><code>e49e255</code></a> Merge pull request <a href="https://github-redirect.dependabot.com/kulshekhar/ts-jest/issues/1337">#1337</a> from kulshekhar/dependabot/npm_and_yarn/commitlint/c...</li>
<li><a href="https://github.com/kulshekhar/ts-jest/commit/702a1b7cd90bc4397a86b49e9e912847d280272e"><code>702a1b7</code></a> build(deps-dev): bump @commitlint/cli from 8.3.3 to 8.3.4</li>
<li><a href="https://github.com/kulshekhar/ts-jest/commit/06093914c834786f8818576eb50f48bd8e1cf68d"><code>0609391</code></a> Merge pull request <a href="https://github-redirect.dependabot.com/kulshekhar/ts-jest/issues/1335">#1335</a> from kulshekhar/dependabot/npm_and_yarn/commitlint/c...</li>
<li><a href="https://github.com/kulshekhar/ts-jest/commit/63f2f4529cf07de8f854bc15a737a576d0c23817"><code>63f2f45</code></a> build(deps-dev): bump @commitlint/cli from 8.2.0 to 8.3.3</li>
<li><a href="https://github.com/kulshekhar/ts-jest/commit/dd816abe2aa927e48eb81c3f0e3b4d5294fd676d"><code>dd816ab</code></a> chore(e2e): add enum test, adjust imported babel config test (<a href="https://github-redirect.dependabot.com/kulshekhar/ts-jest/issues/1334">#1334</a>)</li>
<li><a href="https://github.com/kulshekhar/ts-jest/commit/78a53c2efd9d721bb60573541fcc9c99d8912ca0"><code>78a53c2</code></a> fix(config): support babel config file path as string (<a href="https://github-redirect.dependabot.com/kulshekhar/ts-jest/issues/1332">#1332</a>)</li>
<li><a href="https://github.com/kulshekhar/ts-jest/commit/01615fd2a28810456c042af98dea98c1be800eab"><code>01615fd</code></a> chore: update e2e templates (<a href="https://github-redirect.dependabot.com/kulshekhar/ts-jest/issues/1330">#1330</a>)</li>
<li><a href="https://github.com/kulshekhar/ts-jest/commit/efb6e56fa048b802eb126fb41ecf4acdf19c6c98"><code>efb6e56</code></a> Merge pull request <a href="https://github-redirect.dependabot.com/kulshekhar/ts-jest/issues/1329">#1329</a> from kulshekhar/dependabot/npm_and_yarn/e2e/__templa...</li>
<li>Additional commits viewable in <a href="https://github.com/kulshekhar/ts-jest/compare/v24.0.2...v24.3.0">compare view</a></li>
</ul>
</details>
<br />


[![Dependabot compatibility score](https://api.dependabot.com/badges/compatibility_score?dependency-name=ts-jest&package-manager=npm_and_yarn&previous-version=24.0.2&new-version=24.3.0)](https://dependabot.com/compatibility-score.html?dependency-name=ts-jest&package-manager=npm_and_yarn&previous-version=24.0.2&new-version=24.3.0)

Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.

[//]: # (dependabot-automerge-start)
If all status checks pass Dependabot will automatically merge this pull request.

[//]: # (dependabot-automerge-end)

---

<details>
<summary>Dependabot commands and options</summary>
<br />

You can trigger Dependabot actions by commenting on this PR:
- `@dependabot rebase` will rebase this PR
- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it
- `@dependabot merge` will merge this PR after your CI passes on it
- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it
- `@dependabot cancel merge` will cancel a previously requested merge and block automerging
- `@dependabot reopen` will reopen this PR if it is closed
- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually
- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)
- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)
- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)
- `@dependabot use these labels` will set the current labels as the default for future PRs for this repo and language
- `@dependabot use these reviewers` will set the current reviewers as the default for future PRs for this repo and language
- `@dependabot use these assignees` will set the current assignees as the default for future PRs for this repo and language
- `@dependabot use this milestone` will set the current milestone as the default for future PRs for this repo and language
- `@dependabot badge me` will comment on this PR with code to add a "Dependabot enabled" badge to your readme

Additionally, you can set the following in your Dependabot [dashboard](https://app.dependabot.com):
- Update frequency (including time of day and day of week)
- Pull request limits (per update run and/or open at any time)
- Automerge options (never/patch/minor, and dev/runtime dependencies)
- Out-of-range updates (receive only lockfile updates, if desired)
- Security updates (receive only security updates, if desired)



</details>
Hello,

I'm trying to delay the execution of my App until Firebase receives the Auth status before my "not logged in"-redirections take place. Afaik this is usually done with:

auth.onAuthStateChanged((user) => {
    new Vue()
})

But in my current Vue setup my Vue instance get called in a total different way, which gives me a tough time.

`// we should return factory for SSR (runInNewContext: false)
export default context => {
	const store = createStore(context),
		router = createRouter(context);
	sync(store, router);
	return new Vue({ i18n, store, router, ...app });
};`

I tried encapsulating new Vue to a const, and turn this constant inside the onAuthStateChanged function. Didn't work. Inside the export default neither. Around the return new Vue neither.

Can someone give me a hint? I already killed hours on this simple task :/

P.S. I'm working with SSR.
## The problem
When using typescript, it is not possible to access properties defined in `this` context. It warns that the defined props are not available in the scope with the message `Error: "Property 'nameOfProp' doesn't exist on type Vue"`.

## Proposed solution
I augmented `VueConstructor` type so it passes default typings around on `extend` function (which doesn't happen in Vue itself) and passed a CombinedInstance type as `this` for the `firestore` and `firebase` functions.

I'm not sure if that's a good approach, cause it messes up with Vue module definition.
If you know a better way of implementing this, pls share.

## Still not fixed
- I haven't figured out yet how to infer methods, data and computed properties types. For now, it only infers prop types and treats everything else as `any`

fix #399 
I am getting typing errors when trying to access props/methods of Vue instance inside of `firestore` function. In the example below, `uid` is a prop and I get no typing errors when accessing from `created` lifecycle hook, but it is not defined inside firestore function.

```ts
export default Vue.extend({

  props: ['uid'],

  created() {
    console.log({ uid: this.uid }) // this.uid is fine
  },

  firestore() {
    // Error: "Property 'uid' doesn't exist on type Vue"
    const uid = this.uid 
    return {
      user: db.doc(`users/${uid}`),
    }
  },
})
```

This can resolve the issue, but shouldn't be necessary:
```ts
const uid = (this as any).uid 
```
## What does this PR contain?
It just changes the `@posva` packages path to be mapped to the src instead of the declaration files generated by the build in the `dist` folder.

Before that, when ctrl clicking the package `@posva/vuefire-core` inside another package files, it
redirected to the dist folder. Now it goes to the src.

I also removed one import that was pointing to a dist folder inside the core package (idk why it was doing that).

## Motivation
It was really frustrating to look after the core files while debugging and end up in a declaration file. This should make the code flow easier to understand by ctrl clicking.

Edit:
I noticed that #384 should have its problem fixed too
Would be great if we could do things like:

```javascript

@Module
export default class Collection extends VuexModule {
  
  documents = [];

  @FirestoreAction
  bindCollection({ context }, name: string) {
    context.bindFirestoreRef('documents', db.collection(name));
    context.unbindFirestoreRef('documents');
  }
}
```

Would allow actions and state to be more true to how they look in Vanilla Vuex while also making them typesafe.
Currently if a reference data type's depth is not more than `maxRefDepth` then it is by default binded. Instead there should be a way to override default behavior and specify the keys of the fields which should be binded.
This is a feature request for a convenient way of assigning the result of `query.get()` to a property in the data model. 

Similar to the `firestore` option or the the `vm.$bind` method, but without subscribing for updates. 

If I understand correctly, currently one has write the following achieve the described outcome?

```javascript
{
	async created () {
		const querySnapshot = db.collection('mydocs').get()
		this.mydocs = querySnapshot.docs.map(documentSnapshot =>
			Object.defineProperty(documentSnapshot.data(), 'id', {
				value: documentSnapshot.id,
				enumerable: false,
			})
		)

	}
}
```
It would be useful to be able to use the short firestore notation and still be able to access the promises, for usage with [vue-promised](https://github.com/posva/vue-promised) for instance.

There are not a lot of situation where data is loaded asynchronously, and a loader indicator is not necessary.

i.e.

```vue
<template>
  <Promised :promise="$firestore.promised.todos">
	<!-- etc... -->
  </Promised>

  <Promised :promise="$firestore.promised.currentTodo">
	<!-- etc... -->
  </Promised>
</template>


<script>
new Vue({
  data: {
    // Usually an array for collection
    todos: [],
    // and null for documents
    currentTodo: null,
  },
  firestore: {
    todos: db.collection('todos'),
    currentTodo: db.collection('todos').doc('1'),
  },
})
</script>
```