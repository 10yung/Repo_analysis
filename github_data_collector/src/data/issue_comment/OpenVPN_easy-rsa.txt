Solving #350 so as to accommodate any ED based curve ( ED448, ED25519 etc. ) .
OpenSSL handles Edwards Curves differently compared to elliptical curves, hence the differences in syntax.

References:

* [EC curve operations](https://wiki.openssl.org/index.php/Command_Line_Elliptic_Curve_Operations)
* [openssl genpkey](https://www.openssl.org/docs/man1.1.1/man1/openssl-genpkey.html)
* [Creating ED25519 certs](https://blog.pinterjann.is/ed25519-certificates.html)
- option --show-cert-revokation is added
- CA+CRL (used by FreeRADIUS) generation added
OpenSSL 1.1.1 supports generating and signing ED25519 certificates. It would be nice if easy-rsa provided this as an option in addition to RSA and ECDSA certificates.
Would like to support multiple CAs and/or sub-CAs.

Basically, we'd have a root path, and sub paths for each subsequent CA/sub-CA in a directory structure, kinda like this:

`/home/ecrist/easy-rsa
   |--example.org
   |----vpn-subca
   |----web-subca
   |--example2.org
`

This would generate a menu, if opted, or expect a CA nickname as an argument to proceed.  EasyRSA could know it was in such a place through the presence of a .easyrsa-root file (empty).  The presence of this file would activate logic that caused EasyRSA to look above for the .easyrsa-root, and in subdirectories directly below.

A simple change of the config file active would enable the use.

Thoughts?
I'm very new to this.  I was walking through the documentation to set up key for AWS VPN connectivity.  I was able to generate the pki/ca.cert and pki/private/ca.key files from the command:

```
$ ./easyrsa build-ca nopass
Using SSL: openssl OpenSSL 1.1.1d  10 Sep 2019
Generating RSA private key, 2048 bit long modulus (2 primes)
.........................................+++++
......+++++
e is 65537 (0x010001)
You are about to be asked to enter information that will be incorporated
into your certificate request.
What you are about to enter is what is called a Distinguished Name or a DN.
There are quite a few fields but you can leave some blank
For some fields there will be a default value,
If you enter '.', the field will be left blank.

Common Name (eg: your user, host, or server name) [Easy-RSA CA]:CaCert

CA creation complete and you may now import and sign cert requests.
Your new CA certificate file for publishing is at:
/c/Users/UserName/Documents/GitHub/easy-rsa/easyrsa3/pki/ca.crt
```

But then when I tried to generate the server I got this error:

```
$ ./easyrsa build-server-full server nopass
Using SSL: openssl OpenSSL 1.1.1d  10 Sep 2019
Generating a RSA private key
.......................................................................................+++++
................+++++
writing new private key to 'C:/Users/UserName/Documents/GitHub/easy-rsa/easyrsa3/pki/easy-rsa-1637.0cW49K/tmp.aXbXnh'

Using configuration from C:/Users/UserName/Documents/GitHub/easy-rsa/easyrsa3/pki/easy-rsa-1637.0cW49K/tmp.F6XL0C
Can't open /c/Users/UserName/Documents/GitHub/easy-rsa/easyrsa3/pki/private/ca.key for reading, No such file or directory
19016:error:02001003:system library:fopen:No such process:../openssl-1.1.1d/crypto/bio/bss_file.c:69:fopen('/c/Users/UserName/Documents/GitHub/easy-rsa/easyrsa3/pki/private/ca.key','r')
19016:error:2006D080:BIO routines:BIO_new_file:no such file:../openssl-1.1.1d/crypto/bio/bss_file.c:76:
unable to load CA private key

Easy-RSA error:

signing failed (openssl output above may have more detail)

Easy-RSA error:

Failed to sign 'server'
```

I found an article on the AWS forums where the workaround was to use a Linux box to run the command.  I'm not sure if I need to install/setup anything special on my Windows 10 box to get this to run correctly.

[https://forums.aws.amazon.com/thread.jspa?threadID=308532]

Any help is appreciated.  I'm a n00b with OpenVPN and easy-rsa.  The files are definitely in the target folders and I have full administrative access.  I even ran Git Bash as an administrator so I'm guessing it's not a permissions issue.

--j
Hello,

I'm seeing the following error, when running the command:

`# ./easyrsa export-p12 user@domain.com`


Note: `EASYRSA_PASSIN` and `EASYRSA_PASSOUT` are NOT set.

Output: 
```sh
Using SSL: openssl LibreSSL 2.8.3
Usage: pkcs12 [options]
where options are
[TRUNCATED OPTIONS]
Easy-RSA error:

Export of p12 failed: see above for related openssl errors.
``` 

I'm running the latest "master".
```sh
# git rev-parse HEAD        
7f727b791b76147f97bfae2a152f57ad94240106
```

Setting `EASYRSA_PASSIN` and `EASYRSA_PASSOUT` has no effect in resolving this error.

Running this command works as expected:

```sh
openssl pkcs12 \
-in "pki/issued/user@domain.com.crt" \
-inkey "pki/private/user@domain.com.key" \
-passout pass:chang3m3 \
-export \
-out "/tmp/user@domain.com.p12"
```


Similar to #340 .

EasyRSA is useful to handle cert/key generation. But different software expects the key in different formats. 

A trouble I have with EasyRSA is that the `build-ca` command generates a private key for the CA in PKCS#1 format. However, the `gen-req` command generates keys in PKCS#8 format. 

This is confusing, since the "consumer" of the keys needs to realize the difference and process the keys differently. 

This PR adds the `export-p1` command that will convert keys to the PKCS#1 format.
Closes #339 .
When using the [beats input logstash plugin](https://www.elastic.co/guide/en/logstash/current/plugins-inputs-beats.html#plugins-inputs-beats-ssl_key), the key is expected to be in PKCS#8 format. It would be helpful to have a command complementary to the `export-p7` and `export-p12` ones that convert an RSA key to the PKCS#8 format. 

If there is interest in that I could create a PR.
Introduces a new format for the `./pki/private/ca.key` which can specify environment variables to point to the PKCS#11 private key on a specific token.  

Leveraging `op_test.orig` with a modification to support tests initially.  Once this PR is merged, the tests can be migrated to the new framework.

Please see `./PKCS11.md` for more details on the changes and please share any useful feedback needed to get this PR merged.  

