Today it is possible in Kiba Pro to pass a simple database url string to SQL components ([SQL Source](https://github.com/thbar/kiba/wiki/SQL-Source), [SQL single record Upsert destination](https://github.com/thbar/kiba/wiki/SQL-Upsert-Destination), [SQL bulk insert / upsert destination](https://github.com/thbar/kiba/wiki/SQL-Bulk-Insert-Destination)), like this:

```ruby
database: ENV.fetch('DATABASE_URL')
```

For the same reasons the `kiba` command line is [getting deprecated](#74), I'll instead encourage to pass live connections here, created via a surrounding block:

```ruby
Sequel.connect(xxx) do |db|
  Kiba.run(ETL::MyJob.setup(db: db))
end
```

This will allow automatic connection closing, which is a better pattern, and also brings more control over how the connection can be tweaked (e.g. extensions).

Keeping this note as a roadmap item.
(if you read this - please do not work on this - this is already in the works ; this issue is here to communicate with Kiba users)

The patterns of use & recommended implementation guidelines have evolved quite a bit since Kiba v1 was released 4 years ago.

I'm rewriting the documentation from scratch to ensure we have a better newcomer experience and we can encourage the patterns that I've seen work in production.


(this is a roadmap notice for Kiba users, as much as a reminder for myself)

In 4 years of production use with Kiba, I've had a lot of time to investigate the various patterns of usage on real cases.

Up to v1.0.0, Kiba's way to run jobs was to use `bundle exec kiba my_script.etl`, which involves reading and evaluating the `.etl` file, as seen here:

https://github.com/thbar/kiba/blob/378aca8200064e8d597f2581b818bc21824afcca/lib/kiba/cli.rb#L10-L13

In the mean-time, I've introduced [official support for a programmatic API](https://github.com/thbar/kiba/wiki/Considerations-for-running-Kiba-jobs-programmatically-%28from-Sidekiq%2C-Faktory%2C-Rake%2C-...%29), an API that was initially introduced to allow in-process testing.

The programmatic API allows everything the "command" mode supports, plus much more, and actually encourage better coding practices.

For instance:
- API mode [allows to pass live variables](https://github.com/thbar/kiba/wiki/Considerations-for-running-Kiba-jobs-programmatically-%28from-Sidekiq%2C-Faktory%2C-Rake%2C-...%29#you-can-pass-variables-to-kibaparse) (rather than just ENV configuration from command line or JSON configs from files)
- Doing so permits to [wrap resources open/close](https://github.com/thbar/kiba/wiki/Considerations-for-running-Kiba-jobs-programmatically-%28from-Sidekiq%2C-Faktory%2C-Rake%2C-...%29#close-resources-explicitly) around running a job
- API mode makes it easier to run testing on an ETL process (via minitest/rspec) directly in-process (which allows stubbing/webmock etc), rather than via a command call
- API mode enforces use of clean modules with explicit loading, rather than polluting the top-level namespace with global methods (https://github.com/thbar/kiba/wiki/How-do-you-define-ETL-jobs-with-Kiba%3F)
- API mode allows to run jobs from Sidekiq or background job systems, from an HTTP call (if the job is fast), without necessarily waiting for a command line binary to run - this supports more dynamic interactions (e.g. a job is created in reaction to an external event received via HTTP or a websocket)

For all these reasons, I plan to deprecate the `kiba` command in an upcoming version (probably v3).

Ideally I'd like to provide a new gem that will bring back that functionality as opt-in, to ensure v3 can be retrofitted easily, but that gem will likely not be supported anymore when we reach v4.
To encourage contributions all while securing the codebase from a legal standpoint (both for users & for myself), I'm in the process (with a lawyer) of designing a "contributor agreement" for kiba, kiba-common and kiba-pro.

This will be ready shortly & I will update this issue once it's done.

Agreeing to the "contributor agreement" will be required to allow the merge of a PR.

This supersedes #65.

