I want to play an animation and wait until it finishes. I checked the docs and tutorials and I did not find an API that returns a promise or something.

It seems there's no related discussion here so I would like it to ask if there's a standard way of doing this?

What I am doing now is wrapping it in a promise and it works fine:

```javascript
const burstPromise = new Promise(resolve => {
    const burst = new mojs.Burst({
        radius: {30: 120},
        count: 10,
        children: {
            duration: 3000,
        },
        onComplete() {
            resolve();
        }
    });
    burst.play();
});

await burstPromise;
```
To make animations accessible per default, maybe we should add a reduced motion media query test before playing any animation. Then via a prop you could disable this, so it always plays. This could be fine for smaller animations and animations with just opacity or color changes.

So it would be up to the developer to decide if the animation is safe.
Was somebody able to make this thing work with react and functional components? Would be great if somebody could share some ideas.
After changing `"git+https://github.com/legomushroom/grock.git"` to `legomushroom/grock` we still have some issues with other dependencies:

```
error Command failed.
Exit code: 128
Command: git
Arguments: ls-remote --tags --heads ssh://git@github.com/Nikku/node-browserify.git
Directory: /Users/druf/projects/mojs
Output:
ERROR: Repository not found.
fatal: Could not read from remote repository.

Please make sure you have the correct access rights
and the repository exists.
info Visit https://yarnpkg.com/en/docs/cli/install for documentation about this command.
```

```
6878 silly resolveWithNewModule watchify@2.2.1 checking installable status
6879 silly fetchPackageMetaData error for browserify@github:Nikku/node-browserify#local-fix Error while executing:
```

```
6882 silly saveTree ├─┬ karma-browserify@2.0.0
6882 silly saveTree │ ├── convert-source-map@0.3.5
6882 silly saveTree │ ├── js-string-escape@1.0.1
6882 silly saveTree │ ├── lodash@2.4.2
6882 silly saveTree │ ├── minimatch@1.0.0
6882 silly saveTree │ └── watchify@2.2.1
```

So it seems `karma-browserify > watchify` is the culprit.
I am facing an issue when running mo.js in my mocha/enzyme test environment.
I have a simple component with mo.js included:

```
import mojs from 'mo-js';
...
```
When running my mocha tests, the following error occurs:
C:\my-project\node_modules\mocha\node_modules\yargs\yargs.js:1148
      else throw err
           ^
TypeError: Cannot read property '1' of null
    at Helpers.getPrefix (C:\my-project\\node_modules\mo-js\build\mo.js:1755:69)

I think, it is not possible to get the computed style from window, when running in Node test environment, right?
```
dom = "WebKit|Moz|MS|O".match(new RegExp("(" + pre + ")", "i"))[1];
```
[mo-js\build\mo.js:1755:69](https://github.com/mojs/mojs/blob/e3595f2706aab3bc07db5926568104724f0411c5/build/mo.js#L1755)

Is there any solution for that?
Kind regards,
Steven
On[ line 7429 of mo.js](https://github.com/legomushroom/mojs/blob/51f5bf524db050fe72315df09c175a8a336e99e0/build/mo.js#L7429) you use the following regex
`nRgx = /(-|\+)?((\d+(\.(\d|\e(-|\+)?)+)?)|(\.?(\d|\e|(\-|\+))+))/gim;`
where it seems like you are trying to use \e for an escape character but in javascript \e matches e literally unlike in other regex dialects 
Hi sorry if this is a simple documentation issue but I dont get what it does or what it's supposed to be doing I guess. Isn't properties already used to inject the module with new stuff, why another _o object that is used separately? And if _o is just for additional properties then why does it continue to be used through the code instead of just being copied over to the class.

mojs is throwing an error while chaining the `mojs.Html` tweens with a `.then` clause.
See a reproduction here:
https://codesandbox.io/s/q8k144nrow
To see non-buggy behaviour, set the `SHOW_BUG` to `false`. 
**NOTE**: the error won't show up on first run, but on subsequent runs. So, to reproduce the bug, just change any value in the tween functions to force a re-render, or just re-set the `SHOW_BUG` to `true` after setting it to `false`.

From my investigation, I can see that while evaluating the `.then` clause, the whole `props` object is also being passed to the `createDeltas` function. This does **not** happen in other tweens (`.Shape` for example). For an object of the `Html` tween instance though, the final effect this `prop` property being passed into `createDeltas` is that mojs tries to parse a colour from the `el` property and fails, causing an exception.

I think the `el` (or the `prop`) property must be excluded from being passed into `createDeltas` somewhere near this place:

https://github.com/legomushroom/mojs/blob/51f5bf524db050fe72315df09c175a8a336e99e0/js/html.babel.js#L208-L229

@legomushroom any pointers?
`npm ci` is much faster and is meant for CI. This PR is meant for evaluating the new ci command and testig the performance and compare the logs of Travis CI.

https://docs.npmjs.com/cli/ci
http://blog.npmjs.org/post/171556855892/introducing-npm-ci-for-faster-more-reliable
So far there is no option to not center the shape using negative margins. It would be good to disable this, disable the setting of position: absolute and other things.

Also using a classname, we always have to use `"!important` and thus it is not easy to overwrite the styles with clean CSS.

And the original element is not removed from the DOM. The new generated one should inherit the old one and use its class(es).