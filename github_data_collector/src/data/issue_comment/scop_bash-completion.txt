Adding a completion for $cryptsetup luksChangeKey
Since commit da99bc55954e9f60b9c3a9e9071ff6301d7015cb, completions are no longer built by joining together the result of `compgen -f -X ...` and `compgen -d`; instead, -o plusdirs is used.

The problem is that the quoted ref we're trying to complete won't complete directory names, only filenames. Test case:

```
$ mkdir -p "foo bar"/{one,two} && touch "foo bar"/{file1.txt,one/file2.txt}
$ compgen -f -X '!*.@(@(TXT|txt))' -o plusdirs -- foo\\\ bar/
foo bar/file1.txt
$ compgen -f -X '!*.@(@(TXT|txt))' -o plusdirs -- "foo bar/"
foo bar/file1.txt
foo bar/two
foo bar/one
# if the final directory ending in "/" has no spaces, it works
$ compgen -f -X '!*.@(@(TXT|txt))' -o plusdirs -- foo\\\ bar/one/
foo bar/one/file2.txt
# if there is no -X $xspec then it works
$ compgen -f -o plusdirs -- foo\\\ bar/
foo bar/file1.txt
foo bar/two
foo bar/one
```

I'm not sure why bash returns results this way, or whether it's also a bash bug, but it's currently impossible to descend into subdirectories of a directory with spaces in the name when using a `_filedir $xspec`.

Tested on Arch Linux with bash-completion 2.10-1 and bash 5.0.011-2, and verified by running compgen against bash 3 and 4 via shbot on Freenode, so if bash is doing wrong here, it seems like it has for an awful long time.
Would be nice to have `opkg` completion in bash.

> opkg (open package management) is a lightweight package management system based upon ipkg. It is written in C and resembles Advanced Package Tool (APT)/dpkg in operation.

https://en.wikipedia.org/wiki/Opkg
Bug report, https://github.com/Homebrew/homebrew-core/pull/47527#issuecomment-563289732 (the upgrade bump relates to #367)

cc @xeron @scop 
Extensions sourced from mplayer.
The title says it all. This is a breaking change, but I would be surprised if anyone entered e.g. the text `..` by typing Ctrl+j twice. This change allows to fully complete a hidden file name when there is only one hidden file besides `.` and `..` (or at least, to benefit from prefix completion, such as with `.git` and `.gitignore`).
The argument to find's -path option is supposed to restrict the search
results to items that belong to the specified directory, so let
bash-completion suggest directories to it.

Reported by 積丹尼 Dan Jacobson [1].

[1] https://bugs.debian.org/918430
This adds completion to the common invocation forms of:

    bind 'set variable-name value'
and

    bind '"keyseq":function-name'

A little tricky because the whole argument is likely to be quoted and/or has colons in it.

Supported completions (works w/ or w/o `:` in `$COMP_WORDBREAKS`):

	bind '"\C-r":ab    ==>    '"\C-r":abort'
    bind "\C-r":ab     ==>    "\C-r":abort
	bind "Con          ==>    "Control-          "Control:
    bind 'set ke       ==>    'set keymap        'set keyseq-timeout
    bind 'set keymap'  ==>    'set keymap emacs  'set keymap vi       ...

The variable names and values are completed in a case-insensitive and case-preserving manner.

I added some test but they seem to all be getting skipped, unless I put the `_bind()` function definition first in the file -- not sure what's up with that.
Hoping to get a 1.3.1 released with the following patches so I can fixup Homebrew's [bash-completion formula](https://github.com/Homebrew/homebrew-core/blob/master/Formula/bash-completion.rb).
The issue has been fully discussed here:
https://unix.stackexchange.com/questions/536627/autocomplete-not-working-while-exporting-environment-variable-in-bash/537135

Suppose I wish to export an environment variable named `MYPATH` holding following 2 paths:

/full/path/to/fileA
/another/full/path/to/fileB

So, I think it should be done like this in bash:

`$export MYPATH=/full/path/to/fileA:/another/full/path/to/fileB`

The issue I'm facing is auto-complete (<kbd>Tab</kbd> key) works while writing path A in command, but after `:` auto-complete stops working, so it is difficult to write path B in the console in absence of auto-complete.