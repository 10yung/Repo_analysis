
When running "cargo install cargo-src", I get:
`   Compiling rustdoc-highlight v0.1.7
error[E0554]: #![feature] may not be used on the stable release channel`

When runnning with the nightly build, "cargo +nightly install cargo-src", I get:
`   Compiling rustdoc-highlight v0.1.7
error[E0432]: unresolved import `syntax::parse::lexer::TokenAndSpan``
Maybe need to find a way to invoke a browser to browse.
HTML/XML/SVG tags aren't escaped so there's just some empty or browser preprocessed lines instead of markup. Similar issue with embed CSS - it breaks document style. 
Simple repro is to open document `static/index.html` within this repository. 
It'd be nice to show a list of types, functions, modules and constants in the sidebar when you open a file. Most other code-navigation tools have this ability already.
Probably this would just be something like turning the line object into a

```rust
enum SourceElement {
    Line { .. },
    Scope {
        /// The text shown when this scope is collapsed
        /// For this enum, it would be `enum SourceElement`
        summary: String,
        elements: Vec<SourceElement>,
    }
}
```

and handling this in the JS. I don't know how we'd actually generate that though.
Have colours, fonts, syntax highlighting and suchlike under simple and easy-to-understand classnames, seperate from the structurally-important styling like flex width. This would allow you to have a style css file specified with `--style`. This would mean that you could have a `rustdoc` style, a `readthedocs` style and suchlike.
This isn't really fixable without adding a "URL prefix" option to `comrak::ComrakOptions`. This is essentially how GitHub gets relative-path images from the right place in its rendered markdown. Alternatively, we can add a `map` method to `comrak::arena_tree::Node` and then map it that way (since we want images to have a prefix but not links). I'll put in a PR and then put a PR to this when that gets merged.
Currently this is broken because each set of lines in the search results shares one "is-source-display-open" flag. This PR changes this so that only one line per file can have its source display visible at once.
Creates and renders a highlight component for the `srcView` component. A couple of things to note:
- I believe this could work for the `SearchResults` use of highlight with some additions, but I haven't attempted that yet
- One thing I feel a little uncertain about is the pulling of positional data from the DOM, in `make_highlight` (L65). It seems to be working fine, but I think if we're seeing the highlight end up in the wrong location, there may be some render lifecycle conditions where the final position isn't yet available. If that's the case, I think we'd need to move most of the `make_highlight` code into `componentDidUpdate` in `srcView`, and put positional data in state, pass down as props, etc.