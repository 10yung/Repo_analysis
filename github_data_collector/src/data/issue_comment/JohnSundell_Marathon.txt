Hi everyone,

When I introduced Marathon almost 2,5 years ago, my goal was to provide a simple abstraction on top of the Swift Package Manager in order to make Swift scripting simpler. However, as both the Swift Package Manager has evolved to make scripting much easier (thanks to features like `swift run`), and that it's now being integrated directly into Xcode - I feel like Marathon has played out its role, and it's time to deprecate it.

As you might have noticed from the lack of activity on this project's issues, I also don't have the time required to support this project anymore, especially since I've now personally moved all of my Swift scripts to use the Swift Package Manager directly. I really love to build things for the Swift community, but I also need to prioritize what I spend my time on, just like everyone else.

That being said, I'm going to try to do my very best to make the process of migrating from Marathon to another solution as easy as I possibly can, for everyone using it.

**So, my question to you is - how can I help? Would you like a Marathon-to-SwiftPM migration guide? Recommendations on alternative tools to use? Maybe a tool that lets you export your existing Marathon scripts as Swift packages? Let me know by replying to this issue, and I'll do my very best to help.**

Marathon isn't going away tomorrow, but I'm no longer doing any active development on it. I will make the changes required to make it fully support Xcode 11 when that ships later this year, but that's the last thing I'll do. I'm of course more than happy to accept PRs, and if you want to keep evolving Marathon for your own purposes, then you can always fork it and keep iterating on it that way.

Thanks so much to all of you who have used, discussed, and helped me work on Marathon during these past 2,5 years - it's been fun, but I think all of you will (just like me) enjoy the much simpler workflow of just working with SwiftPM directly, without any additional dependencies or layers of abstraction.
Problem I faced was related to swift version which I'll troubleshoot - but rather than just a dead end - should spoon feed users on how to troubleshoot. Or ideally - just dish this verbose stuff up on errors. 

(django) ‚ûú  SyncForks marathon run helloWorld.swift --verbose
üèÉ  $ cd "/Users/johnpope/.marathon/Scripts/Cache/-Users-johnpope-Documents-gitWorkspace-SyncForks-helloWorld/" && readlink OriginalFile
   /Users/johnpope/Documents/gitWorkspace/SyncForks/helloWorld.swift
   $ cd "/Users/johnpope/Documents/gitWorkspace/SyncForks/" && /usr/bin/env xcrun --sdk macosx swift package --version
   Apple Swift Package Manager - Swift 5.1.0 (swiftpm-14672.3)
   $ cd "/Users/johnpope/.marathon/Scripts/Cache/-Users-johnpope-Documents-gitWorkspace-SyncForks-helloWorld/" && /usr/bin/env xcrun --sdk macosx swift build -C /Users/johnpope/.marathon/Scripts/Cache/-Users-johnpope-Documents-gitWorkspace-SyncForks-helloWorld/
   [1/3] Compiling helloWorld main.swift
   <unknown>:0: error: invalid value '5.1' in '-swift-version 5.1'
   <unknown>:0: note: valid arguments to '-swift-version' are '4', '4.2', '5'
   warning: '--chdir/-C' option is deprecated; use '--package-path' instead
üí•  Failed to compile script
**Platform**
macOS Catalina Version 10.15 Beta (19A512f)

**Issue**
I freshly installed Marathon the recommended way on macOS Catalina Beta Version. 
It seems to install without any error, but when trying to run Marathon via `marathon` I get the following error:
`This copy of libswiftCore.dylib requires an OS version prior to 10.14.4.`
`[1]    13259 abort      marathon run`

I didn't dig into source code yet, but does anybody know a fast way to solve this error?
Thanks in advance!

**Platform**
Raspberry PI running `Raspbian GNU/Linux 10 (buster)`

**Issue**
`sudo marathon install my-script` fails with error output:
```
üèÉ  Compiling script...
üí•  Failed to compile script
üëâ  The following error(s) occured:
   - 1:8: no such module 'ShellOut'
üëâ  You can add ShellOut to Marathon using 'marathon add <url-to-ShellOut>'
```

**Steps to reproduce**
- Install marathon as described (for Linux) in readme
- Install Shellout module with `marathon add <url-to-ShellOut>`
- Create script that imports ShellOut
- Try to install that script

**Notes**
- Interestingly `marathon run my-script` works just fine with script that uses ShellOut module
- `marathon list` shows that ShellOut module is installed indeed
- Installing a script without dependencies works correctly
I'm using bitrise.io as a build server and they create new VM every time build is happening. I need to execute marathon script every time before build. The issue I'm having is execution time taking a lot of time, so I made as simple as possible shell script:

```
echo "import Foundation; print(\"Hello World\")" > helloWorld.swift
marathon run helloWorld.swift --verbose
```
And it's taking over **3 minutes** to run there. 
I'm trying to debug this with `--verbose` with an assistance of bitrise support team member to see what's taking the most time there, but it's logging everything at once when the scripts end execution. **Any solutions for more detail logging and identifying what causing this extend execution time?**

In case if installation time does matter (It shouldn't I guess)
I'm installing Marathon via SPM like:
```
git clone https://github.com/JohnSundell/Marathon.git
cd Marathon
swift build -c release -Xswiftc -static-stdlib
cp -f .build/release/Marathon /usr/local/bin/marathon
```
And this installation script finishes there with reasonable time. 

I had suspisions for hidden installation and copying files that causing the issues, but running the script twice actually **double the time of execution**.
Does Marathon support command line user input? 

Whenever I'm trying something like [readLine()](https://developer.apple.com/documentation/swift/1641199-readline) or [FileHandle.standardInput](https://developer.apple.com/documentation/foundation/filehandle) script seems to freeze. In `--verbose` mode I only see starting execution but it never gets to it.
This PR is a WIP of fixes for issues in #189, #191 as well as some other things I'll mention in notes below.

The changes are primarily trying to address importing dependencies from a package that may not go by the same name as the package, or situations where there are multiple libraries from a package that you are trying to import. Along the way, I noticed some issues with the Master Package Description and the way it acts as a template for the `Package.swift` files used in every script. As a result, in this current WIP code, the Master `Package.swift` is mostly unused and package update functionality is currently disabled. 

I was mostly working with MarathonCore directly, not via CLI, but problems with the Master Package Description pattern I saw were:
- After running Marathon a few times the dependencies of dependencies start getting added to the Master `Package.swift`, which are then copied over into the script `Package.swift` files.
- This also means that if you have many scripts with dependencies then copying from the Master `Package.swift` will make the scripts depend on each other's libraries
- Updating all packages to run some scripts that may not even have many dependencies can make simple script executions take longer
- I found the versions depended upon in the `Package.swift` files weren't consistent enough because they only used the major version. It could cause issues during `swift package update` as it tried to resolve the dependencies correctly

Notes:
- a new `Dependency` struct has been introduced that maintains the name of the specific library you want to include, not just the name of the package.
- if swift tools version is 4.2 or greater then local references use the `.package(path:"")` format

This work is currently incomplete but I wanted to open a PR with my first shot at the problem as a proposal. Since it's a big change and there is lots of room for discussion.

Thanks for reading/reviewing!
I have a swift package I'm trying to import as an inline dependency. However, it is one of many within the same `Package.swift` and is not named the same as the Package.

When Marathon runs, it ends up pulling in the library by the name of the Package rather than the specific library name listed in the import.

i.e.
`import SlurpXCTools // marathon: https://github.com/bitwit/Slurp.git`
ends up adding the `Slurp` library as a dependency instead.

Ideally, I'd actually like to be able to import multiple libraries from the same Package. i.e., both `Slurp` and `SlurpXCTools`.

Am I missing something or is this a current limitation? If so, I'm very open to working on this feature. I've already been diving into the code to looks for ideas only implementing this if needed, but any guidance is appreciated.

Thanks
Hi,

I'm testing out Swift scripting using Marathon, by trying to create a script to build and launch apps.

But it the scripts takes up all available memory, until my computer turns unresponsive. Here is the script:

```Swift
import Foundation
import Files
import ShellOut

// Compile and launch project for physical device

// This compiles an archive
print("Building archive")

let _ = try shellOut(to: "xcodebuild", arguments: ["-project QDB.xcodeproj -scheme QDB -archivePath build/physical archive"])

// This compiles .ipa
print("Building ipa")
let _ = try shellOut(to: "xcodebuild", arguments: ["-exportArchive -archivePath ./build/physical.xcarchive -exportPath ./build/ -exportOptionsPlist ./export.plist"])

// Install .ipa on physical device
print("Installing to device")
let _ = try shellOut(to: "cfgutil", arguments: ["install-app build/QDB.ipa"])
```

If I run each shell command seperately in Terminal, they execute quite quickly, without high CPU/memory usage. But through Marathon, using ShellOut, the memory usage just increases and increases.

The first `print()` statement is never executed either, so it looks like it has to process the entire script somehow, before it outputs the print statements. 

Not sure if this issue is related ShellOut or Marathon, but since it won't print the print statements, it looks like something related to how Marathon executes scripts. 

Here you can see the running script and the memory/CPU usage.
<img width="2000" alt="skjermbilde 2018-11-07 kl 11 00 21" src="https://user-images.githubusercontent.com/202450/48124425-892c3d00-e27c-11e8-9942-997d1748e0fd.png">

Hi all,

Whenever I start a new project I have manually remove cached libraries, because as soon as I run `marathon run script` it causes an attempt to update all installed Packages. This then results in two problems (I am running marathon on linux):

1. Marathon fails if the internet is not good enough, as it pings remote github addresses;
2. If any of the old packages have been changed and for some reason don't compile anymore I cannot run the current script, regardless if this script uses those packages or not.


Thank you for this software.

**Edit 1**: I momentarily closed this issue because it is a bit trick to reproduce. But here is a MWE that happens every time. If one wants to make a nice little command line interface program with marathon, the best option on linux is Console, which is part of Vapor. Something in the update marathon attempts to do, makes anything built with Console only build correctly for the first time. Copy the code below:

```swift
import Console // marathon: https://github.com/vapor/console.git

let terminal = Terminal()
print(terminal is Console) // true
terminal.print("Hello")

/// Outputs the prompt then requests input.
let name = terminal.ask("What is your name?")
terminal.print("You said: \(name)")

if terminal.confirm("Are you sure?") {
    // they are sure
} else {
    // don't do it!
}
```

This will work in the first attempt, but in the second one will be greeted by a bug during the update/rebuilt of the package:

```bash
  [0;3m$ cd "/home/luis/.marathon/Scripts/Cache/-home-luis-Dropbox-Documentos-Coding-Swift-Programs-CSVImporter-example-example/" && swift build -C /home/luis/.marathon/Scripts/Cache/-home-luis-Dropbox-Documentos-Coding-Swift-Programs-CSVImporter-example-example/ [0;23m
   [0;3mwarning: '--chdir/-C' option is deprecated; use '--package-path' instead
   warning: PackageDescription API v3 is deprecated and will be removed in the future; used by package(s): CSwiftV
   'example' /home/luis/.marathon/Scripts/Cache/-home-luis-Dropbox-Documentos-Coding-Swift-Programs-CSVImporter-example-example: error: product dependency 'swift-nio' not found
   'example' /home/luis/.marathon/Scripts/Cache/-home-luis-Dropbox-Documentos-Coding-Swift-Programs-CSVImporter-example-example: error: product dependency 'swift-nio-zlib-support' not found[0;23m
```