Doesn’t work yet: build fails because the binaries can’t initialize the platform plugin successfully. 
`-debug-and-release` builds are also broken upstream (https://wiki.qt.io/Qt_5.14.0_Known_Issues#Windows)
haven’t tried to build static at all yet

Removes the previous static plugins support from CMake and Qt in favor of their new upstream implementation. 
Qt’s configure step wants assimp 5, which doesn’t build without patches, but master does; so this is a git package for now. 
Suggesting we offer the world a truly alternative PC browser that could even one day become a standard (a long way from that although when rn can't even click edit my post). The browser already compiles with MinGW and offers a functional qtwebkit target. Caveat: qtwebkit struggles with compilers newer than 9.x? 

Packaging request for JACK audio. Many audio apps use it.
Hello,
I found that any `ld.exe` from binutils > v2.30 is broken and returns **ld returned 5 exit status** error code. So I have tried to download `mingw-w64-i686-binutils-2.30-6-any.pkg.tar.xz` from msys2 repo http://repo.msys2.org and replaced the installed `ld.exe` with the downloaded one, this times it compiled and linked without problems.

My code is very big to share it so you can reproduce it yourself. My code requires at least **wxWidgets v3.1.3** to build.

What can I do make you believe that any version > v2.30 is really broken!? Because it is working without problems for small projects and makes you believe it is working properly.

Thank you in advance.
I wanted to use Google's API and using mingw-w64-grpc produced this kind of error during authentication (this isn't the exact one as I've recompiled grpc myself here)...

```
E0101 13:04:12.353000000  6052 ssl_utils.cc:463] load_file: {"created":"@1577837052.353000000","description":"Failed to load file","file":"E:\OTOjOY_LLC\captions\git\grpc\src\core\lib\iomgr\load_file.cc","file_line":70,"filename":"/usr/share/grpc/roots.pem","referenced_errors":[{"created":"@1577837052.353000000","description":"No such file or directory","errno":2,"file":"E:\OTOjOY_LLC\captions\git\grpc\src\core\lib\iomgr\load_file.cc","file_line":45,"os_error":"No such file or directory","syscall":"fopen"}]}
E0101 13:04:12.353000000  6052 ssl_security_connector.cc:419] Could not get default pem root certs.
E0101 13:04:12.353000000  6052 secure_channel_create.cc:152] Failed to create secure subchannel for secure name 'speech.googleapis.com'
E0101 13:04:12.353000000  6052 secure_channel_create.cc:50] Failed to create channel args during subchannel creation.
```
This file name is hard coded into `ssl_utils.cc`. For version 1.25 it also points to the wrong location for the file included in the mingw-w64-grpc package (`ssl_utils.cc` looks for `usr/share/grpc` and included file in package is `share/grpc`).

`ssl_utils.cc` tries to open this `roots.pem` file as some sort of fall back when it can't find it in the OS trust store (note sure what that means or how to set up an OS trust store on Windows)...

```C++
  // Try loading roots from OS trust store if flag is enabled.
  if (GRPC_SLICE_IS_EMPTY(result) && !not_use_system_roots) {
    result = LoadSystemRootCerts();
  }
  // Fallback to roots manually shipped with gRPC.
  if (GRPC_SLICE_IS_EMPTY(result) &&
      ovrd_res != GRPC_SSL_ROOTS_OVERRIDE_FAIL_PERMANENTLY) {
    GRPC_LOG_IF_ERROR("load_file",
                      grpc_load_file(installed_roots_path, 1, &result));
  }
```

Then in `load_file.cc` we find ourselves in `grpc_error* grpc_load_file(const char* filename, int add_null_terminator, grpc_slice* output) ` and calling `file = fopen(filename, "rb");`.

For my system at least with everything installed with MSYS2 (64 bit) with both the way mingw-w64-grpc was compiled and the way I compiled it `file = fopen(filename, "rb");` needs a Windows path name not Unix path name. So `file = fopen("/usr/share/roots.pem", "rb");` fails even when the file is there.

My work around was to patch `load_file.cc` so it would convert the Unix path name to a Windows one using `sygpath.exe` which seems to be present on my system. I.e `/usr/share/grpc/roots.pem` gets converted to `E:\msys64\usr\share\grpc\roots.pem` This is the code that does the conversion and I placed it in `load_file.cc` just after the include headers...

```C++
//jonti
#include <stdio.h>
#include <iostream>
#include <string>
#include <regex>
std::string ltrim(const std::string& s)
{
    return std::regex_replace(s, std::regex("^\\s+"), std::string(""));
}
std::string rtrim(const std::string& s)
{
    return std::regex_replace(s, std::regex("\\s+$"), std::string(""));
}
std::string trim(const std::string& s)
{
    return ltrim(rtrim(s));
}
std::string FileConvertFromUnixToWinGivenItExists(std::string cmd)
{
    //try nothing
    FILE *file;
    if((file=fopen(cmd.c_str(),"r")))
    {
        fclose(file);
        printf("found file, no conversion needed\n");
        return cmd;
    }
    //try to convert using cygpath.exe
    std::string data;
    const int max_buffer=256;
    char buffer[max_buffer];
    cmd=std::string("cygpath.exe -d ")+cmd+std::string(" 2>&1");
    file=popen(cmd.c_str(),"r");
    if(file)
    {
        while(!feof(file))
        {
            if(fgets(buffer, max_buffer, file)!=nullptr)data.append(buffer);
        }
        pclose(file);
    }
    data=trim(data);
    //see if convertion was a succsess
    if((file=fopen(data.c_str(),"r")))
    {
        fclose(file);
        printf("conversion succsessful\n");
        return data;
    }
    else
    {
        printf("conversion result : \"%s\"\n",data.c_str());
        printf("conversion might have failed. have you got cygpath.exe installed? are you sure that file exists?\n");
    }
    return cmd;
}
```

The `file = fopen(filename, "rb");` command in `load_file.cc` I replaced with `file = fopen(FileConvertFromUnixToWinGivenItExists(filename).c_str(), "rb");`

That fixes the problem for me at least. I'm not sure if there is a better solution. I compiled grpc from source from version 1.26 and had to change things so it would build (patched aead_test.cc, x509_test.cc,bssl_shim.cc,digest.cc,transport_common and load_file.cc), I used the cmake build and changed some of the cmake settings. However for some reason the package configs files (grpc.pc and grpc++.pc) weren't created with a `mingw32-make install` so I created them by hand. I don't know how to use PKGBUILD so copied each file over manually (it's going to be a hassle to uninstall it).


Has anyone here _actually_ been able to browse content in the MINGW release of VLC, using "Universal Plug 'n' Play"?
 The console will give you a generic error like:
```
VLC media player - 3.0.8 Vetinari
Copyright © 1996-2019 the VideoLAN team

Warning: if you cannot access the GUI anymore, open a command-line window, go to the directory where you installed VLC and run "vlc -I qt"

Remote control interface initialized. Type `help' for help.
[0000018686e40940] upnp services discovery: Initializing libupnp on 'default' interface
[0000018686e40940] upnp services discovery error: Initialization failed: UPNP_E_INIT_FAILED
[0000018686e40940] main services discovery error: no suitable services discovery module
```

So if you know that pupnp actually provides this service, you can go back to the source and run it's tests for MinGW (test_init.exe):
```
UPNP_VERSION_STRING = "1.6.25"
UPNP_VERSION_MAJOR  = 1
UPNP_VERSION_MINOR  = 6
UPNP_VERSION_PATCH  = 25
UPNP_VERSION        = 10625

UPNP_HAVE_DEBUG         = yes
UPNP_HAVE_CLIENT        = yes
UPNP_HAVE_DEVICE        = yes
UPNP_HAVE_WEBSERVER     = yes
UPNP_HAVE_TOOLS         = yes

Initializing UPnP ...
** ERROR UpnpInit(): -117 UPNP_E_INIT_FAILED
```

Again an extremely helpful error, -117 basically is pupnp code for "failed for an unknown reason"

Apparently mingw-w64-pupnp package doesn't actually work at all. Please try it and let me know if you can actually get it working on a real, reasonably modern PC system.
I was faced with errors when built PostgreSQL documentation in msys2 environment using last docbook packages. I installed the following packages (besides obvious libxml & libxslt that are used in PostgreSQL to build documentation).
mingw64/mingw-w64-x86_64-docbook-xsl 1.79.2-4
mingw64/mingw-w64-x86_64-docbook-xml 1~4.5-1

I had errors during the build:
/mingw64/bin/xsltproc --path . --stringparam pg.version '11.5'  stylesheet-man.xsl postgres.sgml
Note: namesp. add : added namespace before processing              PostgreSQL 11.5 Documentation
Element div in namespace '' encountered in td, but no template matches.

and no result files were genearted.

Investigating docbook installation in my msys2 env I found that needed styles for successfuyl build (docbook < 5) are installed in the wrong directories.

The current installation directory is /mingw64/share/xml/docbook/xsl-stylesheets-nons-1.79.2-nons.
The last "-nons" suffix seems wrong. Why is it needed?

Also, it seems that references from /etc/xml/docbook-xsl are pointed on wrong catalog content (with ns, or without ns). I checked style contents from cdn.docbook.org & docbook.sourceforge.net and found misalignes between release/xsl & release/xsl-ns on these sites and references in /etc/xml/docbook-xsl from this package. References on NS and NoNS versions are mixed up.

I try to correct these errors in the following patch and made pull request for discution these misalignes.  Hope it helps to improve docbook and msys2. With correction proposed in this patch, the PostgreSQL documentation build is finished successfully.

I tried to fix these errors in the patch and made a pull request to review and discuss these misalignes. Hope this helps improve docbook and msys2. With the fixes proposed in the patch, the PostgreSQL documentation builds successfully.
Hi, I've started working on Rust 1.40 support here: https://github.com/allquixotic/MINGW-packages/commit/be6ce44c4975d2c23f55088fae3803cb4e494987

A few notes:

- When _bootstrap=no, the bootstrap.py errors out very early on when rust-1.37 is already installed on the system, possibly due to this issue: https://github.com/rust-lang/rust/issues/63964 Certainly the symptom is the same.
 - When _bootstrap=yes, it gets pretty far into the build (it successfully compiles the `std` package and quite a bit of librustc's dependencies), but compiling the librustc_llvm crate fails with tons of linker errors like this one:

```
C:/msys64/mingw64/bin/../lib/gcc/x86_64-w64-mingw32/9.2.0/../../../../x86_64-w64-mingw32/bin/ld.exe: C:\msys64\tmp\rustcwpVt7F\librustc_llvm-1cacb7b977047aff.rlib(Z3Solver.cpp.obj):(.text$_ZNK4llvm7SMTExprltERKS0_[_ZNK4llvm7SMTExprltERKS0_]+0x9e): undefined reference to `Z3_get_ast_id'
          collect2.exe: error: ld returned 1 exit status
```

There are approximately 80 of these, mostly referring to different functions.

 - The GPG key appears to be invalid and I'm not sure how to get a correct one. So I grabbed the sha256sum based on my download but I don't know what to put in `validpgpkeys` to get it to work without passing `--skippgpcheck` to the package build command (`MINGW_INSTALLS=mingw64 makepkg-mingw -sLf --skippgpcheck`).

cmake pre 3.16 doesn't find boost 1.72 (already packaged) properly - see this cmake upstream issue:

https://gitlab.kitware.com/cmake/cmake/issues/20100

Please package cmake 3.16.2. 
