Hi,

Testing out and kicking the tires of OData gave me an idea of how OData operates, I think like this:

- OData sits between my endpoint (controller) and client facing endpoint (OData uri route)
- OData want to operate on data context to do all of its magic, like select and so on
- E.g. Client -> OData route -> Controller -> OData magic -> Result to client

My first question is if I got this right...

My second question is if there is a way to intercept operations by OData, say that I want to intercept a `skip` or `select` before it happens, and make alternative or complementary actions.

Thanks

OData Web Api Client throws exception in case of passing null value to property of ICollection<T> during executing action. Although my EdmModel supports null-value

### Assemblies affected

*Which assemblies and versions are known to be affected e.g. Microsoft.OData.Client 7.6.2

### Reproduce steps

Call service action and pass object with null-value property

### Expected result

Null values allowed

### Actual result

Exception is thrown

### Additional detail

Node Name="Collection" has no attribute 'Nullable', so it is nullable by default

`<ComplexType Name="MyItem">
...
</ComplexType>
<ComplexType Name="MyServiceModel" BaseType="BaseServiceModel">
<Property Name="Collection" Type="Collection(MyItem)"/>
</ComplexType>`

Exception has the following info

_Timestamp: 2020-01-16 11:54:14.572 +07:00
Message: The value of the property 'Collection' is null. Properties that are a collection type of primitive or complex types cannot be null.
Level: Error
Exception: System.InvalidOperationException: The value of the property 'Collection' is null. Properties that are a collection type of primitive or complex types cannot be null.
   at Microsoft.OData.Client.WebUtil.ValidateCollection(Type collectionItemType, Object propertyValue, String propertyName, Boolean isDynamicProperty)
   at Microsoft.OData.Client.ODataPropertyConverter.CreateODataResourceSetWrapperForComplexCollection(Type collectionItemType, String propertyName, Object value, HashSet`1 visitedComplexTypeObjects, Boolean isDynamicProperty, Boolean setTypeAnnotation)
   at Microsoft.OData.Client.ODataPropertyConverter.CreateODataComplexCollectionPropertyResourceSet(ClientPropertyAnnotation property, Object propertyValue, String serverTypeName, HashSet`1 visitedComplexTypeObjects)
   at Microsoft.OData.Client.ODataPropertyConverter.TryConvertPropertyToResourceOrResourceSet(ClientPropertyAnnotation property, Object propertyValue, String serverTypeName, HashSet`1 visitedComplexTypeObjects, ODataItemWrapper& odataItem)
   at Microsoft.OData.Client.ODataPropertyConverter.PopulateNestedComplexProperties(Object resource, String serverTypeName, IEnumerable`1 properties, HashSet`1 visitedComplexTypeObjects)
   at Microsoft.OData.Client.ODataPropertyConverter.CreateODataResourceWrapper(Type entityType, Object value, ClientPropertyAnnotation[] properties)
   at Microsoft.OData.Client.Serializer.WriteBodyOperationParameters(List`1 operationParameters, ODataRequestMessageWrapper requestMessage)
   at Microsoft.OData.Client.DataServiceRequest.CreateExecuteResult(Object source, DataServiceContext context, AsyncCallback callback, Object state, String method)
   at Microsoft.OData.Client.DataServiceContext.InnerBeginExecute[TElement](Uri requestUri, AsyncCallback callback, Object state, String httpMethod, String method, Nullable`1 singleResult, OperationParameter[] operationParameters)
   at Microsoft.OData.Client.DataServiceContext.BeginExecute[TElement](Uri requestUri, AsyncCallback callback, Object state, String httpMethod, Boolean singleResult, OperationParameter[] operationParameters)
   at Microsoft.OData.Client.DataServiceActionQuerySingle`1.BeginGetValue(AsyncCallback callback, Object state)
   at System.Threading.Tasks.TaskFactory`1.FromAsyncImpl(Func`3 beginMethod, Func`2 endFunction, Action`1 endAction, Object state, TaskCreationOptions creationOptions)
   at System.Threading.Tasks.TaskFactory`1.FromAsync(Func`3 beginMethod, Func`2 endMethod, Object state)
..._
<!-- markdownlint-disable MD002 MD041 -->

When defining a specific odata route on a controller all proper formatting is removed from the result.

### Assemblies affected

OData WebAPI 7.3 on .NET Core 3.1

### Reproduce steps

See this repo: https://github.com/rogerfar/odata-test

Check the `StudentsController.cs` and note the route (`[Route("odata/Students")]`)

When running the odata endpoint the following result is returned:
```
[{"id":"2c06eb0a-6956-44f5-bee9-505e715384e3","name":"Cody Allen","score":130},{"id":"9a2f3847-562b-455b-890a-67c1abeef5a2","name":"Todd Ostermeier","score":160},{"id":"bc89e79c-ac3c-4383-a435-6ddb76f178a4","name":"Viral Pandya","score":140}]
```

But if you change `[Route("odata/Students")]` to let's say `[Route("api/Students")]`, the result is correct:
```
{"@odata.context":"https://localhost:44393/odata/$metadata#Students","@odata.count":3,"value":[{"Id":"f7825d1e-b71a-4d28-b8c5-92aedef672f6","Name":"Cody Allen","Score":130},{"Id":"842c3c8c-4064-461b-9140-6e8317a17e5a","Name":"Todd Ostermeier","Score":160},{"Id":"7d1a8e00-1656-4d94-bb0c-0cf1a3b92da8","Name":"Viral Pandya","Score":140}]}
```

The issue is that I need to be able to set the route attribute on my controllers, otherwise Swashbuckle won't be able to find these controllers.
<!-- markdownlint-disable MD002 MD041 -->

I have been playing around with OData actions and functions. As documented I can add parameters to an action using the Parameter<> method but it forces me to declare every single parameter which does not work well if the action acts on an open-type. Adding extra parameters to the request leads to a null ODataActionParameter.
The ugly workaround I have found is to create an open-type property bag complex-type and add a parameter of this type. But this does not align well with the open-type semantic where all properties are flatten.

Assemblies affected
Microsoft.AspNetCore.OData 7.2.3

Reproduce steps
** Model **

var myEntityAction = myEntity.Collection.Action("dosomething");
myEntityAction.Parameter("arg").Required();

** controller **
public async Task DoSomethingAsync(ODataActionParameters actionParameters)
{
}

** request body **
{
"arg":"hello".
"otherarg": "world"
}

Expected result
the method in the controller gets an instance of ODataActionParameters that contains all properties including those that are not declared in the model

Actual result
the ODataActionParameters is null

Additional detail
<!-- markdownlint-disable MD002 MD041 -->

I'm upgrading OData and EF Core to 7.3.0 and 3.1. After doing so, i'm seeing new errors when trying to get a groupBy working. The same request did work before. 

I wasn't sure if i should open an issue here or on EF Core github. If i'm wrong feel free to tell me and i'll move it. 
The request that fails for me is : $apply=groupby((Actif))

### Assemblies affected

Microsoft.AspNetCore.OData 7.3.0
Microsoft.EntityFrameworkCore 3.1.0

### Reproduce steps

Get a project running with EF Core 3.1 and OData 7.3.0 

### Expected result

The result of the groupBy

### Actual result

Exception is thrown : 
An unhandled exception has occurred while executing the request.
System.InvalidCastException: Unable to cast object of type 'System.Boolean' to type 'Microsoft.AspNet.OData.Query.Expressions.GroupByWrapper'.
   at get_NestedValue(Object )
   at System.Text.Json.JsonPropertyInfoCommon`4.GetValueAsObject(Object obj)
   at System.Text.Json.JsonSerializer.Write(Utf8JsonWriter writer, Int32 originalWriterDepth, Int32 flushThreshold, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.JsonSerializer.WriteAsyncCore(Stream utf8Json, Object value, Type inputType, JsonSerializerOptions options, CancellationToken cancellationToken)
   at Microsoft.AspNetCore.Mvc.Formatters.SystemTextJsonOutputFormatter.WriteResponseBodyAsync(OutputFormatterWriteContext context, Encoding selectedEncoding)
   at Microsoft.AspNetCore.Mvc.Formatters.SystemTextJsonOutputFormatter.WriteResponseBodyAsync(OutputFormatterWriteContext context, Encoding selectedEncoding)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ObjectResultExecutor.ExecuteAsyncEnumerable(ActionContext context, ObjectResult result, IAsyncEnumerable`1 asyncEnumerable)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.<InvokeNextResultFilterAsync>g__Awaited|29_0[TFilter,TFilterAsync](ResourceInvoker invoker, Task lastTask, State next, Scope scope, Object state, Boolean isCompleted)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.Rethrow(ResultExecutedContextSealed context)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.ResultNext[TFilter,TFilterAsync](State& next, Scope& scope, Object& state, Boolean& isCompleted)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.<InvokeResultFilters>g__Awaited|27_0(ResourceInvoker invoker, Task lastTask, State next, Scope scope, Object state, Boolean isCompleted)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.<InvokeNextResourceFilter>g__Awaited|24_0(ResourceInvoker invoker, Task lastTask, State next, Scope scope, Object state, Boolean isCompleted)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.Rethrow(ResourceExecutedContextSealed context)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.Next(State& next, Scope& scope, Object& state, Boolean& isCompleted)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.<InvokeFilterPipelineAsync>g__Awaited|19_0(ResourceInvoker invoker, Task lastTask, State next, Scope scope, Object state, Boolean isCompleted)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.<InvokeAsync>g__Awaited|17_0(ResourceInvoker invoker, Task task, IDisposable scope)


<!-- markdownlint-disable MD002 MD041 -->
Expand of the property(properties) on the sub-object is failing if more than one object is included in the expand directive on the first level. 

### Assemblies affected

Microsoft.AspNetCore.OData 7.3.0
Microsoft.EntityFrameworkCore.SqlServer  3.1.0

### Reproduce steps

Send HTTP get request to the following URL: 
https://localhost:5001/odata/Books?$expand=Authors,CookBook($expand=Recipes)

### Expected result

Service should render object with two sub-objects and expand collection property in the respected sub-object.

### Actual result

Application failing with exception:
System.ArgumentOutOfRangeException: Index was out of range. Must be non-negative and less than the size of the collection. (Parameter 'index') 

### Additional detail
following requests are working as expected:
https://localhost:5001/odata/Books?$expand=Authors,CookBook
https://localhost:5001/odata/Books?$expand=CookBook($expand=Recipes)

you can find source code for the sample project in:
https://github.com/mmichtch/ODataSample


<!-- markdownlint-disable MD002 MD041 -->

I found an issue with using multiple expand clauses.  This scenario was previously working in .net core 2.2.  

### Assemblies affected

Microsoft.AspNetCore.OData (7.3.0)
Microsoft.EntityFrameworkCore.SqlServer (3.1.0)

### Reproduce steps

To demonstrate this issue, I stood-up an environment for testing.  
As an example, getting data from one to two tables, these queries work:
https://im-wa-empo-nrsr.azurewebsites.net/odata/v1/employees?$top=2
https://im-wa-empo-nrsr.azurewebsites.net/odata/v1/employees?$top=2&$expand=certifications
https://im-wa-empo-nrsr.azurewebsites.net/odata/v1/employees?$top=2&$expand=competencies
https://im-wa-empo-nrsr.azurewebsites.net/odata/v1/employees?$top=2&$expand=healthItems

As soon as you try to add a third or fourth table using any of the below examples, you’ll get an HTTP 500 error
https://im-wa-empo-nrsr.azurewebsites.net/odata/v1/employees?$top=2&$expand=healthItems,certifications
https://im-wa-empo-nrsr.azurewebsites.net/odata/v1/employees?$top=2&$expand=healthItems,competencies
https://im-wa-empo-nrsr.azurewebsites.net/odata/v1/employees?$top=2&$expand=certifications,competencies
https://im-wa-empo-nrsr.azurewebsites.net/odata/v1/employees?$top=2&$expand=certifications,competencies,healthItems

### Expected result

I would expect this to behave as it did in .net core 2.2; where it populate arrays for the expanded tables.

### Actual result
HTTP 500 Error
Application Insights logs the exception like so:
Exception type: System.ArgumentOutOfRangeException
Exception message: Index was out of range. Must be non-negative and less than the size of the collection. (Parameter 'index')

Exception Stack Trace:
[EfCore_OData_Issue.txt](https://github.com/OData/WebApi/files/4047555/EfCore_OData_Issue.txt)

### Additional detail

The source code for this project/example can be found at:
https://github.com/ikemtz/Nurser/tree/master/src
You can use the solution filter: https://github.com/ikemtz/Nurser/blob/master/src/Nurser.Employee.Services.slnf
I added some unit tests that illustrate the issue, invoking both a standard EF core query as well as the relevant OData query.  These tests can be found here:
https://github.com/ikemtz/Nurser/blob/master/src/MicroServices/Employees/src/Tests/IkeMtz.NRSRx.Employees.OData.Tests/Integration/OData/MultipleExpandsTests.cs
If it makes it easier, I have a docker image for the SQL database:
docker pull ikemtz/nrsrx-employees:sql_latest

For context and to help illustrate things a bit, here is my SQL database diagram:
![EfCore_OData_Issue](https://user-images.githubusercontent.com/6444182/72180638-90d1ff00-33b5-11ea-8876-0d8e9f55f612.png)
It would appear that the issues discussed in:

https://docs.microsoft.com/en-us/ef/core/querying/client-eval

have broken $apply/groupby and friends when using .net core/efcore 3+ but hopefully someone here can/has come up with a workaround?  Was testing $apply/groupby not part of the 7.3 release process for .net core or is 7.3 really not ready for prime time yet on .net core even though it is released - if not it might be good to put up a list of what works, and doesn't work on .net core somewhere so people know what to expect.

If I do http://localhost:5000/odata/OntDTO?$apply=groupby((ProvModel),aggregate($count%20as%20GroupCount))&$count=true I get:

`System.InvalidOperationException: Processing of the LINQ expression '(GroupByShaperExpression:
KeySelector: new GroupByWrapper{ GroupByContainer = new LastInChain{ 
        Name = ('ProvModel'), 
        Value = (o.ProvModel) 
    }
     }
, 
ElementSelector:(EntityShaperExpression: 
    EntityType: OntDTO
    ValueBufferExpression: 
        (ProjectionBindingExpression: EmptyProjectionMember)
    IsNullable: False
)
)' by 'RelationalProjectionBindingExpressionVisitor' failed. This may indicate either a bug or a limitation in EF Core. See https://go.microsoft.com/fwlink/?linkid=2101433 for more detailed information.
   at Microsoft.EntityFrameworkCore.Query.Internal.RelationalProjectionBindingExpressionVisitor.VisitExtension(Expression extensionExpression)
   at System.Linq.Expressions.Expression.Accept(ExpressionVisitor visitor)
   at Microsoft.EntityFrameworkCore.Query.Internal.RelationalProjectionBindingExpressionVisitor.Visit(Expression expression)
   at System.Linq.Expressions.ExpressionVisitor.VisitUnary(UnaryExpression node)
   at System.Linq.Expressions.UnaryExpression.Accept(ExpressionVisitor visitor)
   at Microsoft.EntityFrameworkCore.Query.Internal.RelationalProjectionBindingExpressionVisitor.Visit(Expression expression)
   at System.Dynamic.Utils.ExpressionVisitorUtils.VisitArguments(ExpressionVisitor visitor, IArgumentProvider nodes)
   at System.Linq.Expressions.ExpressionVisitor.VisitMethodCall(MethodCallExpression node)
   at System.Linq.Expressions.MethodCallExpression.Accept(ExpressionVisitor visitor)
   at Microsoft.EntityFrameworkCore.Query.Internal.RelationalProjectionBindingExpressionVisitor.Visit(Expression expression)
   at System.Linq.Expressions.ExpressionVisitor.VisitUnary(UnaryExpression node)
   at System.Linq.Expressions.UnaryExpression.Accept(ExpressionVisitor visitor)
   at Microsoft.EntityFrameworkCore.Query.Internal.RelationalProjectionBindingExpressionVisitor.Visit(Expression expression)
   at Microsoft.EntityFrameworkCore.Query.Internal.RelationalProjectionBindingExpressionVisitor.VisitMemberAssignment(MemberAssignment memberAssignment)
   at System.Linq.Expressions.ExpressionVisitor.VisitMemberBinding(MemberBinding node)
   at Microsoft.EntityFrameworkCore.Query.Internal.RelationalProjectionBindingExpressionVisitor.VisitMemberInit(MemberInitExpression memberInitExpression)
   at System.Linq.Expressions.MemberInitExpression.Accept(ExpressionVisitor visitor)
   at Microsoft.EntityFrameworkCore.Query.Internal.RelationalProjectionBindingExpressionVisitor.Visit(Expression expression)
   at Microsoft.EntityFrameworkCore.Query.Internal.RelationalProjectionBindingExpressionVisitor.VisitMemberAssignment(MemberAssignment memberAssignment)
   at System.Linq.Expressions.ExpressionVisitor.VisitMemberBinding(MemberBinding node)
   at Microsoft.EntityFrameworkCore.Query.Internal.RelationalProjectionBindingExpressionVisitor.VisitMemberInit(MemberInitExpression memberInitExpression)
   at System.Linq.Expressions.MemberInitExpression.Accept(ExpressionVisitor visitor)
   at Microsoft.EntityFrameworkCore.Query.Internal.RelationalProjectionBindingExpressionVisitor.Visit(Expression expression)
   at Microsoft.EntityFrameworkCore.Query.Internal.RelationalProjectionBindingExpressionVisitor.Translate(SelectExpression selectExpression, Expression expression)
   at Microsoft.EntityFrameworkCore.Query.RelationalQueryableMethodTranslatingExpressionVisitor.TranslateSelect(ShapedQueryExpression source, LambdaExpression selector)
   at Microsoft.EntityFrameworkCore.Query.QueryableMethodTranslatingExpressionVisitor.VisitMethodCall(MethodCallExpression methodCallExpression)
   at Microsoft.EntityFrameworkCore.Query.RelationalQueryableMethodTranslatingExpressionVisitor.VisitMethodCall(MethodCallExpression methodCallExpression)
   at System.Linq.Expressions.MethodCallExpression.Accept(ExpressionVisitor visitor)
   at Microsoft.EntityFrameworkCore.Query.QueryCompilationContext.CreateQueryExecutor[TResult](Expression query)
   at Microsoft.EntityFrameworkCore.Storage.Database.CompileQuery[TResult](Expression query, Boolean async)
   at Microsoft.EntityFrameworkCore.Query.Internal.QueryCompiler.CompileQueryCore[TResult](IDatabase database, Expression query, IModel model, Boolean async)
   at Microsoft.EntityFrameworkCore.Query.Internal.QueryCompiler.<>c__DisplayClass12_0`1.<ExecuteAsync>b__0()
   at Microsoft.EntityFrameworkCore.Query.Internal.CompiledQueryCache.GetOrAddQueryCore[TFunc](Object cacheKey, Func`1 compiler)
   at Microsoft.EntityFrameworkCore.Query.Internal.CompiledQueryCache.GetOrAddQuery[TResult](Object cacheKey, Func`1 compiler)
   at Microsoft.EntityFrameworkCore.Query.Internal.QueryCompiler.ExecuteAsync[TResult](Expression query, CancellationToken cancellationToken)
   at Microsoft.EntityFrameworkCore.Query.Internal.EntityQueryProvider.ExecuteAsync[TResult](Expression expression, CancellationToken cancellationToken)
   at Microsoft.EntityFrameworkCore.Query.Internal.EntityQueryable`1.GetAsyncEnumerator(CancellationToken cancellationToken)
   at Microsoft.AspNetCore.Mvc.Infrastructure.AsyncEnumerableReader.ReadInternal[T](IAsyncEnumerable`1 value)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ObjectResultExecutor.ExecuteAsyncEnumerable(ActionContext context, ObjectResult result, IAsyncEnumerable`1 asyncEnumerable)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.<InvokeNextResultFilterAsync>g__Awaited|29_0[TFilter,TFilterAsync](ResourceInvoker invoker, Task lastTask, State next, Scope scope, Object state, Boolean isCompleted)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.Rethrow(ResultExecutedContextSealed context)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.ResultNext[TFilter,TFilterAsync](State& next, Scope& scope, Object& state, Boolean& isCompleted)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.InvokeResultFilters()
--- End of stack trace from previous location where exception was thrown ---
   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.<InvokeNextResourceFilter>g__Awaited|24_0(ResourceInvoker invoker, Task lastTask, State next, Scope scope, Object state, Boolean isCompleted)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.Rethrow(ResourceExecutedContextSealed context)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.Next(State& next, Scope& scope, Object& state, Boolean& isCompleted)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.InvokeFilterPipelineAsync()
--- End of stack trace from previous location where exception was thrown ---
   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.<InvokeAsync>g__Logged|17_1(ResourceInvoker invoker)
   at Microsoft.AspNetCore.Builder.RouterMiddleware.Invoke(HttpContext httpContext)
   at Microsoft.AspNetCore.Builder.Extensions.MapMiddleware.Invoke(HttpContext context)
   at Microsoft.AspNetCore.Authorization.AuthorizationMiddleware.Invoke(HttpContext context)
   at Microsoft.AspNetCore.Authentication.AuthenticationMiddleware.Invoke(HttpContext context)
   at Microsoft.AspNetCore.Diagnostics.DeveloperExceptionPageMiddleware.Invoke(HttpContext context)`

<!-- markdownlint-disable MD002 MD041 -->

### Issues

This pull request fixes issue  #2001

### Description

When requesting an entity collection with a simple $expand of a many to one relation, performance is killed when the model has many entities and actions defined

### Checklist (Uncheck if it is not completed)

- [ ] *Test cases added*
- [ ] *Build and test with one-click build and test script passed*

The ticket has a exported project to reproduce the issue.

### Additional work necessary

The pull request has a static cache, with has as a key the model. The cache will be holding a reference to the model, wich might be a memory problem if there is an escenario where models are create and discarded often. An option could be to use a hash of the model or any other unique identity that the model could have. 
 

<!-- markdownlint-disable MD002 MD041 -->

### Issues

*This pull request fixes issue [#1610](https://github.com/OData/odata.net/issues/1610).*

### Description

An error is observed when an entity is created by an insert request and then referenced in a subsequent add link (create ref) request _in the same batch_. This behaviour is observed on an OData service created using **Microsoft.AspNetCore.OData 7.3.0** or lower. The behaviour is not observed against an equivalent service created using **Microsoft.AspNet.OData**.

The bug seems to have been introduced by the addition of an extension method `GetODataContentIdMapping()` in the [**Microsoft.AspNetCore.OData.Extensions**](https://github.com/OData/WebApi/blob/d669038523e8dbb8e1709b1044ac0d51aed40a6a/src/Microsoft.AspNetCore.OData/Extensions/HttpRequestExtensions.cs#L307) namespace that returns `null` instead of the expected dictionary comprising of Content-ID to Location mapping. An extension method with a similar signature is defined in the [**Microsoft.AspNetCore.OData.Batch**](https://github.com/OData/WebApi/blob/d669038523e8dbb8e1709b1044ac0d51aed40a6a/src/Microsoft.AspNetCore.OData/Extensions/HttpRequestExtensions.cs#L307) namespace where it returns the expected value.

The inability to fetch the Content-ID to Location mapping results into the create ref action method in the controller being sent the $-prefixed request identifier as the Uri instead of the resource location.

By examining the logic in **Microsoft.AspNet.OData** codebase, and based on the fact that the Content-ID to Location mapping is (currently) applicable to batch requests, the `GetODataContentIdMapping()` in **Microsoft.AspNetCore.OData.Extensions** namespace is dropped to allow **Microsoft.AspNetCore.OData.Batch** namespace provide the implementation of `GetODataContentIdMapping()` required for use within the [**ODataInputFormatter**](https://github.com/OData/WebApi/blob/d669038523e8dbb8e1709b1044ac0d51aed40a6a/src/Microsoft.AspNetCore.OData/Formatter/ODataInputFormatter.cs#L159) class.

This change fixes the error.

A related fix was made to a property `ODataContentIdMapping` in the [**WebApiRequestMessage**](https://github.com/OData/WebApi/blob/d669038523e8dbb8e1709b1044ac0d51aed40a6a/src/Microsoft.AspNetCore.OData/Adapters/WebApiRequestMessage.cs#L186) adapter class that also return `null` instead of the Content-ID to Location mapping.

### Checklist (Uncheck if it is not completed)

- [ ] *Test cases added*
- [ ] *Build and test with one-click build and test script passed*

### Additional work necessary

*If documentation update is needed, please add "Docs Needed" label to the issue and provide details about the required document change in the issue.*
