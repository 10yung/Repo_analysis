Rails 5.2 introduce Webpacker gem which can help you to avoid using Sprockets.

Is there any way to make JS-Routes usable with Webpacker? 
We have a large scale production application that uses JS Routes heavily for all of the javascript paths. We have an "advanced" setup since we separate out our admin and non admin routes. 

We have 2 `routes.js.erb` files configured to get parsed and then compiled as part of the asset compilation process. 

However, what I've discovered is that when the routes change; the file does not get regenerated (unless it is removed from the sprockets cache). If I add any comments at the top of the `routes.js.erb` file; it gets reprocessed. 

This seems like an order of operations issue; like sprockets is calculating the fingerprint / cache information of the file before ERB is changing the actual contents of the file. 
It'd be cool to store the routes with the key being hashed, then the value being encrypted with the original key. This way nothing would be gained by looking at the routes, only when you made use of a route would it expose it (and if you're using an admin_deploy_nukes_path, you'll have probably authenticated them already)

example:

```
routeMap = {
 "<sha1 of admin_deploy_nukes_path>": "<AES encrypted path, with the key admin_deploy_nukes_path>"
}

findRoute = (routeName) ->
  hashedRouteName = SHA1(routeName)
  AES.decrypt(routeMap[hashedRouteName], routeName) #assuming (data, key)
```

Of course this would require 2 extra libraries but I guess they're pretty small and the amount of data being encrypted/hashed would be small, so pretty quick. 

Maybe overkill but might be a nice option?
