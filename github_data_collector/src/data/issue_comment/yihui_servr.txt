Is there some way to view server logs? 

E.g. 

```R
writeLines("<h1>Hi</H1>", "index.html")
servr::httd()

# createTcpServer: address already in use
# To stop the server, run servr::daemon_stop(2) or restart your R session
# Serving the directory /Users/st/R/localhost at http://127.0.0.1:7826
```

If we now visit  http://127.0.0.1:7826 through the browser we see the html as expected. 

But in the R console we don't see any details about that request (e.g. HTTP method, user agent, IP etc). Could it be possible to display it (perhaps optionally, with something along the lines of `servr::httd(verbose = T)`


rstudio/httpuv#177 was recently merged in to httpuv's master branch, and it might be useful for servr. It adds the ability to serve files from the filesystem from the background I/O thread using C++ only (no R), so it is faster than going through R, it will not be blocked by the main R thread, and it will not block the main R thread.
Initial attempt to fix #16 

It seems you've made a conscious decision to not display output when re-compiling R markdown. Would you be opposed to adding that option? I think it's helpful to see what's happening during interactive use and for debugging purposes (in fact, imo, that should be the default).

I'm already working on a PR, just want to make sure you agree...

For [animint](https://github.com/tdhock/animint), we've been using **servr** and [RSelenium](https://github.com/ropensci/RSelenium) to test whether plots are rendered in the browser the way we expect. Plot rendering requires a file server, so before I discovered the new daemon support, I did something like:

``` r
library(servr)
library(RSelenium)
cmd <- "R -e \'cat(Sys.getpid(), file=\"pid.txt\"); servr::httd(dir=system.file(\"examples/make1\", package=\"servr\"), port=4848, browser=FALSE)\'"
system(cmd, wait = FALSE)
# start selenium server, open firefox, and navigate to file server on localhost
checkForServer(dir=system.file("bin", package = "RSelenium"))
startServer()
remDr <- remoteDriver(browserName = "firefox")
remDr$open(silent = TRUE)
remDr$navigate("http://localhost:4848/")
# kill the file server
tools::pskill(readLines("pid.txt", warn = F))
```

However, I run into problems if I use `daemon=TRUE`

``` r
res <- httd(dir = system.file("examples/make1", package = "servr"), 
            daemon = TRUE, port = 4848, browser = FALSE)
# The line below freezes firefox & the R session. However, it works if I _manually_ navigate there
# I can also use other methods like `remDr$getPageSource()`
remDr$navigate("http://localhost:4848/")
```

Any ideas why the daemon approach might cause this problem? Is there a somewhat simple explanation of the difference between the two approaches? Maybe @johndharrison could help? I don't think it's a browser issue as I've also tested this with phantomjs.
