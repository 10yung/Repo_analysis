I believe there is a typo on [line 78](https://github.com/jakesgordon/javascript-state-machine/blame/master/docs/lifecycle-events.md#L78) of the lifecycle event documentation file. The code reads like this:

```javascript
  var fsm = new StateMachine({
    transitions: [
      { name: 'step', from: 'A', to: 'B' }
    ],
    methods: {
      onTransition: function(lifecycle, arg1, arg2) {
        console.log(lifecycle.transition); // 'step'
        console.log(lifecycle.from);       // 'A'
        console.log(lifecycle.to);         // 'B'
        console.log(arg1);                 // 42
        console.log(arg2);                 // 'hello'
      }
    }
  });
  fsm.step(42, 'hello');
```

Shouldn't it be this instead (with `onStep` instead of `onTransition`:
```javascript
  var fsm = new StateMachine({
    transitions: [
      { name: 'step', from: 'A', to: 'B' }
    ],
    methods: {
      onStep: function(lifecycle, arg1, arg2) {
        console.log(lifecycle.transition); // 'step'
        console.log(lifecycle.from);       // 'A'
        console.log(lifecycle.to);         // 'B'
        console.log(arg1);                 // 42
        console.log(arg2);                 // 'hello'
      }
    }
  });
  fsm.step(42, 'hello');
```

Can that be disabled? 

If I am setting existing state, machine is already in, why is there event fired? 

Can that behaviour be disabled? 

I can see I got there from "none", but, I do not want to have if(lifecycle.from == "none) return; in each event handler... 
![image](https://user-images.githubusercontent.com/11455285/71609929-4daea980-2bc7-11ea-93e8-4243450825d0.png)

The data type of the status value is not allowed to be int?

```javascript
const StateMachine = require('javascript-state-machine');
var fsm = new StateMachine({
    init: 1,
    transitions: [
      { name: 'melt',     from: 1, to: 2 },
      { name: 'freeze',   from: 2, to:3  },
      { name: 'vaporize', from: 3, to: 4 },
      { name: 'condense', from: 4, to: 5 }
    ],
    methods: {
      onMelt:     function(t) { console.log('I melted',t,this)    },
      onFreeze:   function() { console.log('I froze')     },
      onVaporize: function() { console.log('I vaporized') },
      onCondense: function() { console.log('I condensed') }
    }
});

fsm.melt();
```
I wanted to understand if any existing feature is present or planned for something like below?

```  
    var fsm = new StateMachine({
    init: 'solid',
    transitions: [
      { name: 'melt',     from: 'solid',  to: 'liquid' },
      { name: 'freeze',   from: 'liquid', to: 'solid'  },
      { name: 'vaporize', from: 'liquid', to: 'gas'    },
      { name: 'condense', from: 'gas',    to: 'liquid' }
    ],
    methods: {
      canMelt:     function() { return   this.inputTemperature > this.data.meltingPoint;  },
      canFreeze:   function() { return   this.inputTemperature <= this.data.meltingPoint;      },
      canVaporize: function() { return   this.inputTemperature >= this.data.boilingPoint;  },
      canCondense: function() { return this.inputTemperature < this.data.boilingPoint;}
    },
    data: { name: 'water', boilingPoint : 100, meltingPoint: 0 },
    inputTemperature: 135
  });
```

After this, lets say a new method "pushWorkflow" on the StateMachine

```
fsm.pushWorkflow();
console.log(fsm.state);
```

Should display : gas

Kindly let me know if it is not there and will you be happy to accept a pull request in similar lines?

Please suggest some changes if you feel something is not right.


Hi, In the first place, your work is amazing (in particular, visualization).

I am wondering if it is possible to create the state machine from a string, eg.

`let myFSM = new StateMachine("(a|b) -> (c)+");`

where the second state is `(a|b)` and the events `a` or `b` are required to reach this state. 

Thanks a lot, Paul

For
```
const config = {
  init: 'NEW',
  transitions: [{
    name: 'init', from: 'NEW', to: 'READY'
  }],
  methods: {
    onBeforeTransition: function () {
      // here any code always returning promise - with more sense than below ;)
      return Promise.resolve(true);
    }
  }
}

const sm = new StateMachine(config);

console.log(sm.state); // here state is 'none' - no way to wait until sm is ready to be used.
```

an idea would be to provide some method i.e. `pendingTransition()` returning promise to be able to act only when state machine is ready to be used.
currently the only way to cancel the transition from handler seem to be rejecting the promise.
As returning `false` from handler cancels the transition I'd expect resolving returned promise with `false` should also cancel the transition

this seems to be a bit related to https://github.com/jakesgordon/javascript-state-machine/issues/171
#171 related

When you throw an exception inside an observer the FSM state *might* be updated: 
 - If the error is thrown before one specific observer is called (onTransit) then the state would not change
 - If the error is thrown after onTransit observer, then the state is changed.

This PR makes this consistent, and it always reverts the state.
It basically reverts to the previous state when the exception is thrown IF the current state is different from the previous one, defined in the transition.
Promises supported
Hello
So I needed a state machine in which a self loop would trigger a state entering method.
For example:
```javascript
const fsm = new StateMachine({
  init: 'waiting',
  transitions: [
    { name: 'transferred', from: 'waiting', to: 'waiting' },
  ],
  methods: {
    onWaiting: function () { console.log('Im waiting') },
  },
})
```

The application was not logging twice when I tested this:
```javascript
fsm.transferred()
```

So I appended to the object provided to the constructor, the following key:value pair
`observeUnchangedState: true`

Because I saw this condition in the source code.
So, will I get unexpected side effects when using this?
I'm asking because this is not documented.
