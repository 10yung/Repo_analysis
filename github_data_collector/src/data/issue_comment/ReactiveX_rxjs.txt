<!--
Thank you very much for your pull request!

If your PR is the addition of a new operator, please make sure all these boxes are ticked with an x:

- [ ] Add the operator to Rx
- [ ] It must have a `-spec.ts` tests file covering the canonical corner cases, with marble diagram tests
- [ ] If possible, write a `asDiagram` test case too, for PNG diagram generation purposes
- [ ] The spec file should have a type definition test at the end of the spec to verify type definition for various use cases
- [ ] The operator must be documented in JSDoc style in the implementation file, including also the PNG marble diagram image
- [ ] The operator should be listed in `doc/operators.md` in a category of operators
- [ ] The operator should also be documented. See [Documentation Guidelines](../CONTRIBUTING.md).
- [ ] It should also be inserted in the operator decision tree file `doc/decision-tree-widget/tree.yml`
- [ ] You may need to update `MIGRATION.md` if the operator differs from the corresponding one in RxJS v4
-->

**Description:**

This PR enables the currently disabled sub-options under TypeScript's `strict` option. It's based on the branch from the #5241 PR. I'll rebase this once that PR is merged.

The changes in this PR are almost entirely type-related. There were only a few places in which I had to add `if` statements so that calls to wrapped operators were mapped to the appropriate signatures.

There are a lot of files, but the changes are small, so hopefully reviewing this will not be too painful. In any case, these aren't changes that can be done in a piecemeal fashion.

These changes are not ideal, as that was not my aim. I was primarily concerned with getting the `strict` option enabled without having to add additional logic - `undefined` or `null` guards, etc. Changes to make code more easily typechecked can be made when things are refactored/reimplemented in v8.

**Related issue (if exists):** #5240
<!--
Thank you very much for your pull request!

If your PR is the addition of a new operator, please make sure all these boxes are ticked with an x:

- [ ] Add the operator to Rx
- [ ] It must have a `-spec.ts` tests file covering the canonical corner cases, with marble diagram tests
- [ ] If possible, write a `asDiagram` test case too, for PNG diagram generation purposes
- [ ] The spec file should have a type definition test at the end of the spec to verify type definition for various use cases
- [ ] The operator must be documented in JSDoc style in the implementation file, including also the PNG marble diagram image
- [ ] The operator should be listed in `doc/operators.md` in a category of operators
- [ ] The operator should also be documented. See [Documentation Guidelines](../CONTRIBUTING.md).
- [ ] It should also be inserted in the operator decision tree file `doc/decision-tree-widget/tree.yml`
- [ ] You may need to update `MIGRATION.md` if the operator differs from the corresponding one in RxJS v4
-->

**Description:**

This PR refactors the fix in #5239 so that it can be applied to all operators - or at least to those that need unsubscription to be chained.

The problem is outlined in the linked issue, but AFAICT the problem is not specific to the `finalize` operator. For example, the `buffer` operator's subscriber adds a subscription that depends upon unsubscription being chained correctly:

https://github.com/ReactiveX/rxjs/blob/56e7cebd211d93b9958e1ec508052beb8927604a/src/internal/operators/buffer.ts#L73-L76

And `windowTime` adds scheduled actions:

https://github.com/ReactiveX/rxjs/blob/56e7cebd211d93b9958e1ec508052beb8927604a/src/internal/operators/windowTime.ts#L189-L206

IMO, all operator subscriptions made within an operator's `call` method should be made using `subscribeAndChainOperator`.

ATM, this PR's branch is based on #5239, so it includes that PR's commits. The last two commits are the changes introduced in this PR.

**Related issue (if exists):** #5239

<!--
Thank you very much for your pull request!

If your PR is the addition of a new operator, please make sure all these boxes are ticked with an x:

- [ ] Add the operator to Rx
- [ ] It must have a `-spec.ts` tests file covering the canonical corner cases, with marble diagram tests
- [ ] If possible, write a `asDiagram` test case too, for PNG diagram generation purposes
- [ ] The spec file should have a type definition test at the end of the spec to verify type definition for various use cases
- [ ] The operator must be documented in JSDoc style in the implementation file, including also the PNG marble diagram image
- [ ] The operator should be listed in `doc/operators.md` in a category of operators
- [ ] The operator should also be documented. See [Documentation Guidelines](../CONTRIBUTING.md).
- [ ] It should also be inserted in the operator decision tree file `doc/decision-tree-widget/tree.yml`
- [ ] You may need to update `MIGRATION.md` if the operator differs from the corresponding one in RxJS v4
-->

**Description:**

This PR tweaks the options in the root and dtslint `tsconfig.json` files so that the latest builtin types are included - via the `lib` option - and so that the default `target` is no longer the TypeScript default of `es3` (!!!). The problem with the latter is that IDE's pick up the root `tsconfig` and if the `target` is inferred to be `es3`, errors like this are shown:

<img width="559" alt="error" src="https://user-images.githubusercontent.com/3878593/72655907-5e428a80-39e3-11ea-80ee-2abf1da2933c.png">


**Related issue (if exists):** None

<!--
Thank you very much for your pull request!

If your PR is the addition of a new operator, please make sure all these boxes are ticked with an x:

- [ ] Add the operator to Rx
- [ ] It must have a `-spec.ts` tests file covering the canonical corner cases, with marble diagram tests
- [ ] If possible, write a `asDiagram` test case too, for PNG diagram generation purposes
- [ ] The spec file should have a type definition test at the end of the spec to verify type definition for various use cases
- [ ] The operator must be documented in JSDoc style in the implementation file, including also the PNG marble diagram image
- [ ] The operator should be listed in `doc/operators.md` in a category of operators
- [ ] The operator should also be documented. See [Documentation Guidelines](../CONTRIBUTING.md).
- [ ] It should also be inserted in the operator decision tree file `doc/decision-tree-widget/tree.yml`
- [ ] You may need to update `MIGRATION.md` if the operator differs from the corresponding one in RxJS v4
-->

**Description:**

This PR makes the following changes:

* It changes the root `tsconfig.json` so that the `strict` option is enabled and the strict sub-options that are not-yet-supported are explicitly disabled.
* It changes the code so that no errors are effected when the `strictBindCallApply` option is no longer disabled.

**Related issue (if exists):** #5240
## Bug Report

**Current Behavior**

If you change rxjs' compiler options to include the recommended `strictBindCallApply` (i.e. get closer to work with just `--strict`), rxjs fails to compile. See the error messages included in the patch below for a possible fix.

**Reproduction**
Turn on `strictBindCallApply`.

**Expected behavior**

Compiles.

**Possible Solution**

```
==== rxjs/src/internal/observable/fromEvent.ts#4 - new/rxjs/src/internal/observable/fromEvent.ts ====
--- old/rxjs/src/internal/observable/fromEvent.ts	2019-09-20 20:35:42.000000000 +0200
+++ new/rxjs/src/internal/observable/fromEvent.ts	2020-01-10 20:22:01.000000000 +0100
@@ -214,7 +214,11 @@
   return new Observable<T>(subscriber => {
     function handler(e: T) {
       if (arguments.length > 1) {
-        subscriber.next(Array.prototype.slice.call(arguments));
+        // TODO: Argument of type 'any[]' is not assignable to
+        // parameter of type 'T'.
+        subscriber.next(
+            Array.prototype.slice.call(arguments) as
+            any);
       } else {
         subscriber.next(e);
       }
==== rxjs/src/internal/operators/combineLatest.ts#4 - new/rxjs/src/internal/operators/combineLatest.ts ====
--- old/rxjs/src/internal/operators/combineLatest.ts	2019-08-20 17:44:12.000000000 +0200
+++ new/rxjs/src/internal/operators/combineLatest.ts	2020-01-10 20:22:01.000000000 +0100
@@ -73,5 +73,10 @@
     observables = (<any>observables[0]).slice();
   }
 
-  return (source: Observable<T>) => source.lift.call(from([source, ...observables]), new CombineLatestOperator(project));
+  // TODO: Type '(source: Observable<T>) => Observable<unknown>'
+  // is not assignable to type 'OperatorFunction<T, R>'.
+  return ((source: Observable<T>) => source.lift.call(
+              from([source, ...observables]),
+              new CombineLatestOperator(project))) as
+      any;
 }
==== rxjs/src/internal/operators/concat.ts#6 - new/rxjs/src/internal/operators/concat.ts ====
--- old/rxjs/src/internal/operators/concat.ts	2019-11-11 21:57:36.000000000 +0100
+++ new/rxjs/src/internal/operators/concat.ts	2020-01-10 20:22:01.000000000 +0100
@@ -43,5 +43,8 @@
  * @deprecated remove in v8. Use {@link concatWith}
  */
 export function concat<T, R>(...observables: Array<ObservableInput<any> | SchedulerLike>): OperatorFunction<T, R> {
-  return (source: Observable<T>) => source.lift.call(concatStatic(source, ...(observables as any[])));
+  // TODO: Expected 2 arguments, but got 1.
+  return (source: Observable<T>) =>
+             (source.lift.call as any)(
+                 concatStatic(source, ...(observables as any[])));
 }
==== rxjs/src/internal/operators/concatWith.ts#1 - new/rxjs/src/internal/operators/concatWith.ts ====
--- old/rxjs/src/internal/operators/concatWith.ts	2019-11-11 21:57:36.000000000 +0100
+++ new/rxjs/src/internal/operators/concatWith.ts	2020-01-10 20:22:01.000000000 +0100
@@ -62,5 +62,8 @@
  * @param otherSources Other observable sources to subscribe to, in sequence, after the original source is complete.
  */
 export function concatWith<T, A extends ObservableInput<any>[]>(...otherSources: A): OperatorFunction<T, ObservedValuesFromArray<A> | T> {
-  return (source: Observable<T>) => source.lift.call(concatStatic(source, ...otherSources));
+  // TODO: Expected 2 arguments, but got 1.
+  return (source: Observable<T>) =>
+             (source.lift.call as any)(
+                 concatStatic(source, ...otherSources));
 }
==== rxjs/src/internal/operators/merge.ts#4 - new/rxjs/src/internal/operators/merge.ts ====
--- old/rxjs/src/internal/operators/merge.ts	2019-08-20 17:44:12.000000000 +0200
+++ new/rxjs/src/internal/operators/merge.ts	2020-01-10 20:22:01.000000000 +0100
@@ -55,5 +55,8 @@
  * @deprecated Deprecated in favor of static {@link merge}.
  */
 export function merge<T, R>(...observables: Array<ObservableInput<any> | SchedulerLike | number>): OperatorFunction<T, R> {
-  return (source: Observable<T>) => source.lift.call(mergeStatic(source, ...observables));
+  // TODO: Expected 2 arguments, but got 1.
+  return (source: Observable<T>) =>
+             (source.lift.call as
+              any)(mergeStatic(source, ...observables));
 }
==== rxjs/src/internal/operators/race.ts#6 - new/rxjs/src/internal/operators/race.ts ====
--- old/rxjs/src/internal/operators/race.ts	2019-09-20 20:35:42.000000000 +0200
+++ new/rxjs/src/internal/operators/race.ts	2020-01-10 20:22:01.000000000 +0100
@@ -49,6 +49,8 @@
       observables = observables[0] as Observable<T>[];
     }
 
-    return source.lift.call(raceStatic(source, ...(observables as Observable<T>[])));
+    // TODO: Expected 2 arguments, but got 1.
+    return (source.lift.call as any)(
+        raceStatic(source, ...(observables as Observable<T>[])));
   };
 }
==== rxjs/src/internal/operators/zip.ts#4 - new/rxjs/src/internal/operators/zip.ts ====
--- old/rxjs/src/internal/operators/zip.ts	2019-08-20 17:44:12.000000000 +0200
+++ new/rxjs/src/internal/operators/zip.ts	2020-01-10 20:22:01.000000000 +0100
@@ -56,6 +56,8 @@
  */
 export function zip<T, R>(...observables: Array<ObservableInput<any> | ((...values: Array<any>) => R)>): OperatorFunction<T, R> {
   return function zipOperatorFunction(source: Observable<T>) {
-    return source.lift.call(zipStatic<R>(source, ...observables));
+    // TODO: Expected 2 arguments, but got 1.
+    return (source.lift.call as any)(
+        zipStatic<R>(source, ...observables));
   };
 }
```

<!--
Thank you very much for your pull request!

If your PR is the addition of a new operator, please make sure all these boxes are ticked with an x:

- [ ] Add the operator to Rx
- [ ] It must have a `-spec.ts` tests file covering the canonical corner cases, with marble diagram tests
- [ ] If possible, write a `asDiagram` test case too, for PNG diagram generation purposes
- [ ] The spec file should have a type definition test at the end of the spec to verify type definition for various use cases
- [ ] The operator must be documented in JSDoc style in the implementation file, including also the PNG marble diagram image
- [ ] The operator should be listed in `doc/operators.md` in a category of operators
- [ ] The operator should also be documented. See [Documentation Guidelines](../CONTRIBUTING.md).
- [ ] It should also be inserted in the operator decision tree file `doc/decision-tree-widget/tree.yml`
- [ ] You may need to update `MIGRATION.md` if the operator differs from the corresponding one in RxJS v4
-->

**Description:**

The change in this PR is very similar to the changes that were made in #5059: when an interop subscriber is created within `finalize`, it'll be wrapped when a subscription is made to the source observable in `FinallyOperator#call`. The interop subscriber needs to be added to the subscription so that unsubscription chains property and the finalize callback is invoked.

This PR also includes a failing test that is fixed by the above change.

**Related issue (if exists):** #5237
## Bug Report

**Current Behavior**

If a delay is running while the system's clock is changed it affects the delay of notifications. 

In the extreme case where the system's date goes back in time by more than 2^31 ms (~25 days) it gets stuck in a fast loop printing the message below ~1000 times/sec. 

```
(node:26164) TimeoutOverflowWarning: 157852823770 does not fit into a 32-bit signed integer.
```

By overriding setInterval with:

```
let realSetInterval = setInterval;
global.setInterval = (cb, time,...args) => {
  if (time > 4294967296){
    let stack = new Error().stack
    console.log(time, stack )
    process.exit()
  }
  return realSetInterval(cb, time,...args);
}
```

I got the following stack trace:

```
Error
    at global.setInterval (/home/ubuntu/backend/generac.js:17:17)
    at AsyncAction.requestAsyncId (/home/ubuntu/backend/node_modules/rxjs/internal/scheduler/AsyncAction.js:44:16)
    at AsyncAction.schedule (/home/ubuntu/backend/node_modules/rxjs/internal/scheduler/AsyncAction.js:39:35)
    at AsyncAction.DelaySubscriber.dispatch [as work] (/home/ubuntu/backend/node_modules/rxjs/internal/operators/delay.js:59:18)
    at AsyncAction._execute (/home/ubuntu/backend/node_modules/rxjs/internal/scheduler/AsyncAction.js:71:18)
    at AsyncAction.execute (/home/ubuntu/backend/node_modules/rxjs/internal/scheduler/AsyncAction.js:59:26)
    at AsyncScheduler.flush (/home/ubuntu/backend/node_modules/rxjs/internal/scheduler/AsyncScheduler.js:52:32)
    at listOnTimeout (internal/timers.js:531:17)
    at processTimers (internal/timers.js:475:7)
```

**Reproduction**

Steps:
1. Set computer's date 1 year in the future.
2. Execute the script below
3. After "Set Clock back now" is logged, but before "You were too late", set the computer's date to today.
4. "You were too late" is **not** logged, and the TimeoutOverflowWarning will be repeatedly logged to the console.

```js
let rx = require('rxjs');
let op = require('rxjs/operators')

setInterval(() => {
  console.log("Set clock back now");
  rx.of(1).pipe(op.delay(5000)).subscribe(() => console.log("You were too late, try again"));

}, 10000)
```

**Expected behavior**
Delays between notifications should not be impacted by clock time of the system.

**Environment**
- Runtime: Node 12.13.1, Linux ARM
- RxJS version: tested on 6.5.3, but reviewed code between 5.x and master which all appear to have same issue

**Possible Solution**

Related to #5232. 

Delay mixes logic to handle offsetting start to an absolute time, and logic to delay individual notifications. Does it make sense to separate the two features into separate operators? 

**Analysis**

When the `of` emits the value the notification is added to DelaySubscriber's `this.queue`. The `DelayMessage` includes the absolute time the notification is scheduled to be emitted, and `dispatch` is scheduled for execution in `this.delay`.
https://github.com/ReactiveX/rxjs/blob/41888efcd1f34de2ee1eda0bd778d4fe0ab4263e/src/internal/operators/delay.ts#L132) 

The scheduler's clock is then set backwards in time before `Dispatch` is executed.

`Dispatch` is called after `this.delay` elapses. It emits any notifications scheduled to be emitted before `scheduler.now`.

https://github.com/ReactiveX/rxjs/blob/41888efcd1f34de2ee1eda0bd778d4fe0ab4263e/src/internal/operators/delay.ts#L99

Since `scheduler.now()` is now significantly in the past, `queue[0].time` is in the future, so nothing is emitted. Since the queue is not empty, `dispatch` calculates the delay until the next notification to emit.

https://github.com/ReactiveX/rxjs/blob/41888efcd1f34de2ee1eda0bd778d4fe0ab4263e/src/internal/operators/delay.ts#L104

The delay ultimately is passed to `setInterval` where the delay is validated to be less than `TIMEOUT_MAX`, which is `2 ** 31 - 1`ms, which is less than 25 days.

https://github.com/nodejs/node/blob/1fab8a92974ce555adca39baada1d199b4952fd7/lib/internal/timers.js#L160

Since `queue[0]` was scheduled "in the future" and not emitted, the delay was a large positive number significantly larger than `TIMEOUT_MAX`. Node's behavior in the case of a duration overflow is to set the duration to 1ms.

Dispatch is then called 1ms later, and the process repeats since queue[0] since hasn't been emitted, and is still far enough in the future to exceed `TIMEOUT_MAX`.
## Bug Report

**Current Behavior**
Given project `a` and `b`. When `a` subscribe to a stream from `b`, the `finalize` operator doesn't get called.

The below script outputs:
```
a finalized c
```

**Reproduction**
https://github.com/cdanielw/rxjs-finalize

```js
const {finalize, first} = require('rxjs/operators')
const anotherModule$ = require('b')
const sameModule$ = require('./c')

anotherModule$.pipe(
        // Stream from another module doesn't finalize
	finalize(() => console.log('a finalized b')),
	first()
).subscribe()

sameModule$.pipe(
        // Stream from same module finalize
	finalize(() => console.log('a finalized c')),
	first()
).subscribe()

```

**Expected behavior**
Script should output :
```
a finalized b
a finalized c
```

**Environment**
- Runtime: Node v10.14.2
- RxJS version: 6.5.4


<!--
Thank you very much for your pull request!

If your PR is the addition of a new operator, please make sure all these boxes are ticked with an x:

- [ ] Add the operator to Rx
- [ ] It must have a `-spec.ts` tests file covering the canonical corner cases, with marble diagram tests
- [ ] If possible, write a `asDiagram` test case too, for PNG diagram generation purposes
- [ ] The spec file should have a type definition test at the end of the spec to verify type definition for various use cases
- [ ] The operator must be documented in JSDoc style in the implementation file, including also the PNG marble diagram image
- [ ] The operator should be listed in `doc/operators.md` in a category of operators
- [ ] The operator should also be documented. See [Documentation Guidelines](../CONTRIBUTING.md).
- [ ] It should also be inserted in the operator decision tree file `doc/decision-tree-widget/tree.yml`
- [ ] You may need to update `MIGRATION.md` if the operator differs from the corresponding one in RxJS v4
-->

**Description:**

This PR fixes the problem reported in #5233. It:

* adds a failing test; and
* uses a local variable instead of reassigning to a closed-over parameter that's shared between subscribers.

**Related issue (if exists):** #5233
