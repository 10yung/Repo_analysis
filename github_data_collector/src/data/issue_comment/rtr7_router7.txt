This would be an amazing feature in situations where you need a mobile link backup, especially when you have unlimited data or at least a reasonable data cap.
We could implement a visualization of network activity (e.g. 254 colored squares to represent a /24 network) if we had per-source IP network traffic counters.

This would also make it easy to attribute unexpected large transfers to individual IPs.
Out of curiosity, I figured I’d see what would be necessary to make tv7 work with router7.

Running a statically compiled igmpproxy 0.2.1 via breakglass with the following config:

```
phyint uplink0 upstream altnet 77.109.129.0/25
phyint lan0 downstream
```

…results in a working SRF1 stream:

```
% curl https://api.init7.net/tvchannels.xspf
% vlc udp://@239.77.0.77:5000
```

With regards to what we’d need to do:
* listen to IGMP packets
* when a client joins an IGMP group, make the router join it
* install a multicast route (see linux/mroute.h for the API) to tell the kernel to forward multicast packets from uplink0 to lan0 for the specific IGMP group
* looks like the mroute API needs to be added to x/sys/unix first

This all seems feasible, but since I don’t consume TV, I don’t have a lot of motivation to get this done. Help welcome.
It might be prudent to only allow incoming IPv6 connections to IP addresses which are explicitly listed, and default to not allowing incoming connections to other IPs.

In terms of configuration, the feature will be enabled as soon as a non-empty array of allowed IP addresses is defined (blocking all incoming connections can be achieved by allowing an unused IP address).

These are the nftables commands I used for prototyping:
```
# nft add chain ip6 filter forward '{' type filter hook forward priority 0 \; '}'
# nft add chain ip6 filter block-incoming
# nft add rule ip6 filter forward jump block-incoming
# nft add rule ip6 filter block-incoming oifname "lan0" tcp flags syn ip6 daddr ::1 accept
# nft add rule ip6 filter block-incoming oifname "lan0" tcp flags syn reject
```
Hi, we updated an exported function comment based on best practices from [Effective Go](https://golang.org/doc/effective_go.html#commentary). It’s admittedly a relatively minor fix up. Does this help you?
From the stdout:
```
2018/12/14 07:28:08 NextPacket: interrupted system call
2018/12/14 10:21:09 NextPacket: interrupted system call
```

When attaching wireshark, I see packets before 10:21 and after 23:13 (when I attached).
From my most recent boot:
```
2020/05/27 21:37:53 listeners.go:141: now listening on 127.0.0.1:80
```

The time being way off resulted in an update not succeeding:
```
2018/11/28 07:08:22 unhealthy after 39.59549534s: unhealthy: dhcp6: lease expired at 2018-11-28 07:28:03.860663142 +0100 CET
```

Note that the expiration timestamp is in the future.

Not sure what’s happening here. We’re setting the RTC in https://github.com/gokrazy/gokrazy/blob/2216841c80ef508f43b5b742ff423124f965f868/cmd/ntp/rtc.go
Filing this for tracking the ongoing work.

Current status:
* [x] include WireGuard kernel patch in https://github.com/rtr7/kernel
* [x] WireGuard netlink package
* [x] make netconfigd read a config file and create/configure WireGuard interfaces
