This will allow us to provide a single module instead of have code splitting separation.
To really use this build, it requires you to directly use the output build from the lib/ directory. If developers who uses TypeScript plans to use this package by importing it, they cannot use it since the types for index.d.ts and index.ts do not match (e.g. the init function is missing from the definitions).
**Is your feature request related to a problem? Please describe.**
It seems that to use this project with a webpack build, the built and minified script `lib/indigo-player.js` needs to be loaded with script-loader (or just added as a <script> tag).

**Describe the solution you'd like**
It would be nice to be able to import indigo-player as an ES6 module to gain typings, avoiding using the global and integrate into our normal chunk lazy-loading workflow e.g

```
import IndigoPlayer from 'indigo-player';

IndigoPlayer.init()
```
Currently this generates a lot of TypeScript errors for me (TS 3.5.1):
```
10:01:21 0|tsc      | node_modules/indigo-player/src/types.ts(334,3): error TS7010: 'create', which lacks return-type annotation, implicitly has an 'any' return type.
10:01:21 0|tsc      | node_modules/indigo-player/src/types.ts(360,3): error TS7010: 'on', which lacks return-type annotation, implicitly has an 'any' return type.
10:01:21 0|tsc      | node_modules/indigo-player/src/types.ts(361,3): error TS7010: 'once', which lacks return-type annotation, implicitly has an 'any' return type
...
```

Happy to help work on this or provide more info if it's unclear.
Thanks for building amazing player.This is not issue Just a question. 
Is there any way to leverage HLS.js API through indigo player? I want to do some [xhrsetup](https://github.com/video-dev/hls.js/blob/master/docs/API.md#xhrsetup) for my video.
If it is possible then 2 question arises , first how can I do that and second is what happens on ios devices, because hls.js is not needed on ios devices for your player.  
I added 2 buttons to the ui that allow you to quickly move forward or backward in the video (like the video player on ios)
I updated the doc with the information
I also added the French language.

Just one thing, I couldn't update the icon typography, so I put icons "by default"
**Description**
Provide a npm module that exposes a Player component for React. 
Idea: `import Player from 'indigo-player/react'` (currently not available, this is merely an idea).

**Code sample**
```javascript
import React, { useRef, useEffect } from 'react';
import PropTypes from 'prop-types';
import IndigoPlayer from 'indigo-player';

const CHUNKS_PATH = `https://cdn.jsdelivr.net/npm/indigo-player@${
  IndigoPlayer.VERSION
}/lib/`;

export default function Player({ config, chunksPath }) {
  const container = useRef(null);

  useEffect(() => {
    IndigoPlayer.setChunksPath(chunksPath);
  }, [chunksPath]);

  useEffect(() => {
    const player = IndigoPlayer.init(container.current, config);
    return () => player.destroy();
  }, [config]);

  return <div ref={container} />;
}

Player.propTypes = {
  config: PropTypes.shape({}).isRequired,
  chunksPath: PropTypes.string,
};

Player.defaultProps = {
  config: undefined,
  chunksPath: CHUNKS_PATH,
};
```

- [x] Proper cleanup when `player.destroy()` is called.
- [ ] Find a proper way to expose the `player` API which is returned by `IndigoPlayer.init`.
- I'm not convinced about the `IndigoPlayer.setChunksPath` implementation for libraries. Chunks never really worked out-of-the-box when including an npm lib.
The following file contains all currently available translations:

https://github.com/matvp91/indigo-player/blob/master/src/ui/i18n.ts

I'd like to have some help supporting different languages, feel free to submit a PR with a translation in your language of choice.

First off, great job on getting this out!  Love it.  A few quick notes.

* Keyboard-only navigation didn't seem possible on the demo.  You might consider a new method for hiding/showing controls (https://github.com/matvp91/indigo-player/blob/master/src/ui/components/Main.tsx#L17) ... e.g. add `tabindex="0"` to the outer element and then consider handling focus.
* You probably should add proper ARIA attributes to ensure screen reader support 
* Buttons should have `type="button"` to avoid accidental submit behavior