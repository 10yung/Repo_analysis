提交issue前，请检查你本地的vulhub是否是最新版，否则可能存在一些由于时间问题导致而今已经修复的bug。

填写如下信息

 - Which environment: weblogic/ssrf [e.g. python/ssti]
 - Host OS: Linux kali 4.13.0-kali1-amd64
 - OS Version: SMP Debian 4.13.10-1kali2 (2017-11-08) x86_64 GNU/Linux
 - Docker version:  Docker version 19.03.4, build 9013bf5
 - Compose version: docker-compose version 1.25.0, build 0a186604
 - Describe your bug: 描述你的Bug，什么情况下出现这个bug
      运行docker-compose build的时候在第三步报错，无法建立redis，报错信息如下

root@kali:/usr/local/vulhub-master/weblogic/ssrf# docker-compose build
weblogic uses an image, skipping
Building redis
Step 1/10 : FROM vulhub/cron
 ---> 2cf795262563
Step 2/10 : MAINTAINER phithon <root@leavesongs.com>
 ---> Using cache
 ---> d4c1cf9c8eab
Step 3/10 : RUN set -ex     && yum -y update     && yum -y install gcc-c++ tcl wget
 ---> Running in 9c5ab6f07d1b
ERROR: Service 'redis' failed to build: The command '/bin/sh -c set -ex     && yum -y update     && yum -y install gcc-c++ tcl wget' returned a non-zero code: 139

 - [是 ] 主机是否在中国大陆
 - [是 ] 是否重试过仍然出现这个错误

注意，issue仅接受vulhub自身的bug，如：

- 编译时出现bug导致编译失败
- 运行后，环境无法访问
- 环境运行后，按照README中的操作，无法复现漏洞
- README中出现的错误，如错别字、参考链接失效等

注意：关于环境搭建成功，但复现漏洞不成功的情况，我可能不会测试并回复issue，因为我在搭建环境的时候均已测试成功。建议此类issue作者自行测试并寻找错误原因，如果找到原因的确是vulhub的问题（比如某种情况没考虑到），则再创建issue。

不接受：

- 安装docker或docker-compose时出现的bug
- 运行docker、docker-compose时出现的bug
- 拉取/下载vulhub时出现的bug
- 拉取docker镜像因为网络原因导致拉取失败

## 附加信息

请贴出完整错误信息，可以是命令行输出、软件报错信息、截图等。

**注意，请贴出完整错误信息，不要只粘贴错误的最后一行！**

Domain was changed in README.md.

Before:  
`http://jackson.thuraisamy.me/runtime-exec-payloads.html`

After:  
`http://www.jackson-t.ca/runtime-exec-payloads.html`
According to the [page](https://nvd.nist.gov/vuln/detail/CVE-2017-12615) on NIST, the vulnerable versions of this CVE are 7.0.0 to 7.0.79. Why is version 8.5.19 used in this environment? 

translate for **vulhub/appweb/CVE-2018-8715/**

add ghostscript/cve-2019-14811

 - Which environment: 哪个环境出现BUG  **jenkins/CVE-2017-1000353**
 - Host OS: 操作系统 [e.g. Ubuntu]   **MACOS mojave**
 - OS Version: 操作系统版本 [e.g. 18.04] **doesn't matter**
 - Docker version: Docker 版本    **doesn't matter**
 - Compose version: Docker-Compose 版本 **doesn't matter**
 - Describe your bug: 描述你的Bug，什么情况下出现这个bug:

**The bug happens when using the exploit jar you suggest, After a long debugging process, I found that in payload.java, it should be "a2.add(set); a2.add(csls);" rather than "a2.add(csls);a2.add(set);".  With the wrong order, the exploit will failed~**

Thank you~





The previous PR was closed by misoperation, so resubmit one here.
So sorry for disturbing.
经过测试，认为和真实漏洞环境有些偏差，觉得apache配置文件有问题。具体说明如下：

---

都知道apache的解析漏洞依赖于一个特性： **Apache默认一个文件可以有多个以点分割的后缀，当最右边的后缀无法识别（不在mime.types文件内），则继续向左识别，直到识别到合法后缀才进行解析。** 
 而这个特性源于apache的配置。

也就是说如果分别访问存在漏洞的环境下的`a.php.jpg`和`a.php.xxx`。那么`a.php.jpg`会被识别为按照jpg图片进行解析，而`a.php.xxx`才会被当成php脚本进行解析。

看了下vulhub下的[Apache HTTPD 未知后缀解析漏洞](https://github.com/vulhub/vulhub/tree/master/httpd/apache_parsing_vulnerability)的配置如下：

```
AddHandler application/x-httpd-php .php
```

经过测试问题来了，`a.php.jpg`和`a.php.xxx`都被当成`php`脚本进行解析了。这显然不太符合实际环境中Apache HTTPD 未知后缀解析漏洞的中间件特性。



Multiple vulnerabilities in Responsive FileManager <= 9.13.4 (https://responsivefilemanager.com/).