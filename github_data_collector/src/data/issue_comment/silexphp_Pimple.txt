
...instead of keep to "array-access" fetching it with `$this->values[$id]`
(deleted)
It would be nice to be able to receive in the service definition closure the PSR11 container instead of the pimple container when necessary. This has the benefit on enabling one to depend only on PSR11 instead of a specific implementation on it at the service definition side of things.

Maybe relying into the argument type hint.

```php
	'logger' => function (\Psr\Container\ContainerInterface $c) {
                $port = 666;
                 if ($c->has('logger.port')) {
                           $port = $c->get('logger.port');
                 }
      
		return new \Gyg\Gyg\Logger\Logger($c->get('logger.host'), $port);
	},
```

Do you agree this is useful? I can send a Pull Request if necessary.
Please add PSR-11 functionality in the spirit of the PR.

The motivation is this:

If you want to write interoperable factories, you want to receive a PSR container. However, the factories will receive a Pimple container in any case. This is the reason why I have always used [xtreamwayz' implementation](https://github.com/xtreamwayz/pimple-container-interop).

He states that his project is superseded by [zend-pimple-config](https://github.com/zendframework/zend-pimple-config). They solved it by wrapping each factory in a closure. I fear that this is a performance penalty and I think there is no argument against implementing the PSR interface.
second try for https://github.com/silexphp/Pimple/pull/57
perhaps opinions have changed in 5 years.

and if people need to install composer packages with full content, then can (and should) use `--prefer-source`.

There is a single core and multiple modules in my app. There are common services for the whole app and individual services for the modules in the app. I want to use service containers to lazy-load services. Here how I see it:

```php
use Pimple\Container;

$coreContainer = new Container();
$coreContainer['foo'] = 'foo';
$coreContainer['pdo'] = function() {
    return new \PDO(/* ... */);
};

$module1Container = Container::override($coreContainer);
$module1Container['mailer'] = function() {
    return new \Mailer('server1', 'user1', 'pass1');
};

$module2Container = Container::override($coreContainer);
$module2Container['foo'] = 'foo2';
$module2Container['mailer'] = function() {
    return new \Mailer('server2', 'user2', 'pass2');
};

$coreContainer['foo'] = 'bar';

echo $coreContainer['pdo']; // PDO
echo $coreContainer['mailer']; // service "mailer" not found
echo $module1Container['pdo']; // PDO
echo $module1Container['mailer']; // Mailer
echo $module1Container['foo']; // 'bar'
echo $module2Container['foo']; // 'foo2'
```

I would be really great if Pimple has this feature. I can implement it if you approve an interface.
Inspired by [mrclay/props-dic](https://github.com/mrclay/Props) making Pimple IDE friendly.

```php
/**
 * @property-read string $style
 * @property-read Dough  $dough
 * @property-read Cheese $cheese
 * @property-read Pizza  $pizza
 * @method        Slice  new_slice()
 */
```

see more:
 - https://github.com/mrclay/Props#pimple-with-property-access
 - https://github.com/mrclay/Props/blob/2.2.0/scripts/example-pimple.php
It would be useful if Pimple could keep track of services as they are invoked, and expose a method for getting this list.

This would useful, for example, in debugging, to examine exactly which services were invoked (and in what order) for any given request (a non-trivial task in a large, complex application).  This would also be useful to a developer who is seeking to reduce the number of dependencies for a particular request.
Assume the following SCCEE:

``` php
class MySilex extends \Silex\Application
{
    public function __construct()
    {
        parent::__construct();
        $this->register(new \Silex\Provider\TwigServiceProvider(), ['twig.path' => __DIR__ . '/views']);
        $this->extend('twig', [$this, 'twigExtension']);
    }

    public function twigExtension(\Twig_Environment $twig)
    {
        $twig->addGlobal('foo', 'bar');
        return $twig;
    }
}

$myApp = new MySilex();
```

Throws an `\InvalidArgumentException` at the `extend` line, on the following check in `Container::extend`:

``` php
        if (!is_object($callable) || !method_exists($callable, '__invoke')) {
            throw new \InvalidArgumentException('Extension service definition is not a Closure or invokable object.');
        }
```

Shouldn't it be using [`is_callable`](http://php.net/manual/en/function.is-callable.php) instead here?
