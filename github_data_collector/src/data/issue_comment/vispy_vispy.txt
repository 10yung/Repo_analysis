When running examples/basics/plotting/export.py, the high-resolution render shows only a small part of the plot (see screenshot below). 

![Screenshot_20200117_143557](https://user-images.githubusercontent.com/16560360/72616214-b7a0b000-3936-11ea-8fcf-b566f0046e5a.png)

I think the problem is that TransformationSystem uses physical_size of the canvas which is not updated to the size of the canvas.

I attached a simple fix that overrides the physical_size to be that of the currently active fbo. I was not sure if it would make more sense to add it to one of the other stacks in SceneCanvas.

Hi,

I have a simple question from a beginner.
I would like to make a function 'draw_cube', or 'draw_mesh' with a good interactive camera for drawing procedurally several cubes or mesh in the on_draw function.

I tried with SceneCanvas by deriving the on_draw function without storing the cube in the scene graph (see the code bellow). An other way would be with app.Canvas but with a good interactive camera (better than arcball).

With the code bellow, the cube is drawed but it is not turned by the mouse.
How can I apply the view/camera matrix to any mesh (visuals) ?

Is there an example based on app.Canvas with a good interactive camera with mouse. 
I mean more complete than examples/basics/visuals/arcball.py with zoom, translation, etc.  An example including a simple but efficient class View/Camera in app.Canvas without the scene graph.

```
class MonCanvas(scene.SceneCanvas):
    def __init__(self):
        scene.SceneCanvas.__init__(self, keys='interactive')
        self.unfreeze()
        self.view = self.central_widget.add_view()
        self.view.camera = scene.cameras.ArcballCamera(parent=self.view.scene)
        self.cube = scene.visuals.Cube((.5, 1.0, 1.0), color=(0,1,1,1), edge_color='red')
        self.freeze()

    def on_draw(self, event):
        print("on_draw")
        super().on_draw(event)
	self.cube.draw()
```

Thank you very much,
Alex

Hi,

I am new to vispy and I am trying to scroll the line visual according to the range on the x-axis. I know that there is a ScrollingLine available, but i cannot represent data on x axis and it is only dependent on the number of points(correct me if I am wrong). I modified the example to make it look like the line is scrolling but actually I am just moving the viewbox to keep up with the new data. It works really well until certain time and the FPS slows down to 20 FPS from 60 FPS. 

Here is an example that you can use to reproduce it

```
# -*- coding: utf-8 -*-
# Copyright (c) Vispy Development Team. All Rights Reserved.
# Distributed under the (new) BSD License. See LICENSE.txt for more info.

"""
Demonstration of animated Line visual.
"""

import sys
import numpy as np
from vispy import app, scene
from collections import deque
import random

# vertex positions of data to draw
N = 20000
pos = deque([np.array([0., 0.])], maxlen=N)
x_lim = [50., 750.]
y_lim = [-2., 2.]

# color array
color = np.ones((1, 4), dtype=np.float32)

canvas = scene.SceneCanvas(keys='interactive', show=True)
canvas.measure_fps()
grid = canvas.central_widget.add_grid(spacing=0)

viewbox = grid.add_view(row=0, col=1)
viewbox.camera = scene.PanZoomCamera()

# add some axes
x_axis = scene.AxisWidget(orientation='bottom',
                          axis_label='X Axis',
                          axis_font_size=12,
                          axis_label_margin=50,
                          tick_label_margin=5)
x_axis.stretch = (1, 0.1)
grid.add_widget(x_axis, row=1, col=1)
x_axis.link_view(viewbox)
y_axis = scene.AxisWidget(orientation='left',
                          axis_label='Y Axis',
                          axis_font_size=12,
                          axis_label_margin=50,
                          tick_label_margin=5)
y_axis.stretch = (0.1, 1)
grid.add_widget(y_axis, row=0, col=0)
y_axis.link_view(viewbox)

# add a line plot inside the viewbox
line = scene.Line(np.asarray(pos), color, parent=viewbox.scene)

# auto-scale to see the whole line.
viewbox.camera.set_range()

number = 0
startingRange = 0

def update(ev):
    global pos, color, line, number, startingRange
    number += 1
    pos.append([number, random.random()])
    line.set_data(np.asarray(pos), color)
    if(number > 2000):
        startingRange += 1
    viewbox.camera.set_range((startingRange, number), (-5,5))


timer = app.Timer()
timer.connect(update)
timer.start(0.01)

if __name__ == '__main__' and sys.flags.interactive == 0:
    app.run()
```

The slow down I m guessing is due to the addition of data to the line but, if I can remove the old data like you are doing for `ScrollingLineVisual`, then there wouldn't be any FPS drop as far as I can see. 
Currently, if someone generates a line plot with no markers, for instance:
```python
line = scene.LinePlot((x,y), marker_size=0)
```
and then later updates the data with 
```python
line.set_data((x,y/2))
```
the markers come back.

This PR modifies the behavior of `LinePlotVisual` visual slightly to store the styles set during `__init__` or calls to `set_data`, such that styles do not need to be repeatedly given to `set_data` if one only wants to update the data itself.


Refer to documentation on the website instead.
Hi folks,

despite the documented limitations I'm giving vispy under JupyterLab a try (having installed both via conda). But already the very first statement `vispy.use("ipynb_webgl")` fails with vispy being unable to find the module 'vispy.gloo.gl.webgl', which, as far as I understood, is indeed inexistent.
I have attached the traceback as well as the conda package list. JupyterLab extensions are:
   app dir: /usr/local/anaconda3/share/jupyter/lab
        @jupyter-widgets/jupyterlab-manager v1.0.3  enabled  OK
        jupyter-matplotlib v0.4.2  enabled  OK
        jupyterlab-plotly v1.2.0  enabled  OK
        plotlywidget v1.2.0  enabled  OK
        vispy v0.2.2  enabled  OK

[vispy_use-Traceback.pdf](https://github.com/vispy/vispy/files/4031190/vispy_use-Traceback.pdf)
[conda_list.txt](https://github.com/vispy/vispy/files/4031199/conda_list.txt)
This PR adds an `interpolation` property to the Volume visual and exposes a `nearest` and `linear`. It defaults to the `linear` behavior, which is what is currently supported, but provides the option for a `nearest` - which is particularly useful when viewing discrete (say integer labeled) regions in 3D.

Before with `linear`:
![orig_linear_interpolation](https://user-images.githubusercontent.com/6531703/71637606-ff67cd80-2bfb-11ea-8911-57ea2a1fe081.gif)

Now with `nearest`:
![better_3D_labels](https://user-images.githubusercontent.com/6531703/71637607-055dae80-2bfc-11ea-84f8-e4814032fab3.gif)

You can see these in use here https://github.com/napari/napari/pull/841 too

This PR adds documentation for the new property and a test for it.

This PR improves the isosurface rendering in the volume visual by getting rid of the default greenish tinge that was always being applied and allowing the isosurface to also respond to the changing of the colormaps. You can see it in action here https://github.com/napari/napari/pull/840 and below.

Original behavior:
![orig_iso_surface](https://user-images.githubusercontent.com/6531703/71637281-a5630a00-2bf3-11ea-861c-b1b4739733ae.gif)

Improved behavior:
![better_iso_surface](https://user-images.githubusercontent.com/6531703/71637282-ae53db80-2bf3-11ea-88e9-fc39438186c2.gif)

I realize this change will change how peoples renderings currently look, but I hope the majority of people will find the new behavior and improvement.
It appears that as currently implemented double press events die at the canvas and must be manually passed to the viewboxes in the canvas by doing

```
canvas = MyCanvas(keys='interactive')
vb = ViewBox(parent=canvas.scene)
# add a double click emmitter to the viewbox
vb.events.add(mouse_double_click=Event)
# connect the _process_mouse_event method to the mouse_double_click emitter in canvas
canvas.events.mouse_double_click.connect(canvas._process_mouse_event)
```

where MyCanvas subclasses Canvas and overrides _process_mouse_event to change the line
```deliver_types = ['mouse_press', 'mouse_wheel']``` 
to
```deliver_types = ['mouse_press', 'mouse_wheel', 'mouse_double_click']```

Is this an intentional design decision? If not the above fix would be easy to implement in the source (adding a mouse_double_click event to the viewboxes by default and connecting the modified _process_mouse_event to the canvas mouse_double_click emitter)
Hi,
I'm performing matrix multiplication on the GPU using pyopencl and pyclblas to reduce a nx6 matrix to a nx3 matrix via a 6x3 projection matrix. I'm using the gloo program to draw my visuals. Because the vispy Buffer and the pyopencl Buffer are somewhat different, I have to transfer the result from the GPU to the CPU through pyopencl and then vispy transfers it back into the GPU. Is there anyway I can convert the pyopencl Buffer to the vispy Buffer so that this unnecessary data transfer doesn't happen?