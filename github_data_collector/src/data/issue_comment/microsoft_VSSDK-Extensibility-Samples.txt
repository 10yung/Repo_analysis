I've been working on several VS2019 extensions for LSP, and unfortunately ran into VSSDK-Extensibility-Samples/LanguageServerProtocol at the start. This example should be retired! It is very old, referring to the preview version of VS2017--which I don't think you can get anymore--and very hard to follow. It tries to demonstrate way too much, in implementing both a client and a server. When I tried building and running this example, which took the better part of a day to upgrade, I could not even understand what this has at all to do with a practical LSP server, i.e., how would I write an extension to work with a Eclipse Java LSP server? The server lacks implementations for hover, highlighting, go to def, find refs requests--basically all the usual requests that an LSP server is supposed to support. To boot, all the UI for these requests are implemented in VS IDE, so the purpose of the client is basically to make a connection, and do anything "out-of-band" of the protocol, which should be an advanced topic/example. Instead, I would recommend substituting it with a thin client example (e.g., something like my code at https://github.com/kaby76/AntlrVSIX/tree/master/lsp-java) and a separate thin server example.
### Installed products
- Visual Studio: 2019 Enterprise

### Description
The analyzer tells me to call VerifyOnUIThread():
```
Warning	VSTHRD010	Accessing "IVsToolWindowToolbarHost" should only be done on the main thread. Call Microsoft.VisualStudio.ProjectSystem.IProjectThreadingService.VerifyOnUIThread() first.
```
I tried this:
```
var componentModel = (IComponentModel)GetService(typeof(SComponentModel));
            var projectServiceAccessor = componentModel.GetService<IProjectServiceAccessor>();
            var projectService = projectServiceAccessor.GetProjectService(ProjectServiceThreadingModel.Multithreaded);

            projectService.Services.ThreadingPolicy.VerifyOnUIThread();
```
Problem is that `projectService.Services` results in a MissingMethodException (for `get_Services()`).
What would be the correct way to handle this?
Hi, 

- Visual Studio: Community 2019 16.3.8

 I took a look over the `Highlight_Word` project sample because I want to create another VS extension in which I can create squiggles between some coordinates in VS Editor (line, column). Unfortunately, I didn't succeeded. 

 My question is: how can I adapt this project or how to create a new one dedicated to creating squiggles in VS Editor?

Can you create a sample for this type of extension? I didn't found any samples for this... 

Regards,
~Ionut

### Installed products
- Visual Studio: [example Professional 2017 ]

Build Extension having two menu command
1. Open File 1
2. Open File 2
Want to create two separate extensions  
If ( Some condition)
Open File 1 Extension
if( Some other condition)
Open File 2 Extension



### Current behavior
I am able to create two extensions but could not differentiate them separately.
( I.e, if one is already installed, can not install the second one, gives an error : Extension already installed)

If I change Product ID from vsixmanifest file I can  Install both the plugin ( Can see in extension and Update section)
But the problem is I can see Open File 1 menu command 4 times and not able to see Open File 2

### Expected behavior
I should see Open File 1 And Open File 2 both the commands and working properly.
### Installed products
- Visual Studio: 2019

### Description
I am trying to make a VS extension. I hope this extension can provide translations for the information provided by Intellisense QuickInfo. as the picture shows
- From
![批注 2019-08-27 150234](https://user-images.githubusercontent.com/14369275/63776243-930a5400-c913-11e9-9401-868d0f26af79.png)
- To
![批注 2019-08-27 153318](https://user-images.githubusercontent.com/14369275/63776301-b208e600-c913-11e9-8310-897540f1bf99.png)
![批注 2019-08-27 153542](https://user-images.githubusercontent.com/14369275/63777575-e8476500-c915-11e9-9ea9-e2bd8451c75b.png)

I have been looking for answers in the [.NET API browser](https://docs.microsoft.com/en-us/dotnet/api/?view=visualstudiosdk-2019), but I still don't know how to implement it. I want to get an implementation here, or tell me which API to use.
I don't know how to get a summary of methods, classes, etc. Like Intellisense QuickInfo

### Installed products
- Visual Studio 2019

### Description
Until Visual Studio introduced a new Welcome window in 2019 Main window was loaded first and I was able to get Status Bar
https://github.com/madskristensen/DialToolsForVS/blob/db932bc32cd45114957ae80d40176fef8f80d1f6/src/Controller/StatusbarInjector.cs#L22
right when Visual Studio became idle
https://github.com/madskristensen/DialToolsForVS/blob/db932bc32cd45114957ae80d40176fef8f80d1f6/src/Controller/DialControllerHost.cs#L67

Now I need to wait until Main window is Loaded.

How to do that right?
### Installed products
- Visual Studio 2019 16.2

### Description
In order to attach Radial Controller to a window created by Visual Studio I need to know when it was created
See issue https://github.com/madskristensen/DialToolsForVS/issues/18
What is the right event to listen to?
### Installed products
- Microsoft Visual Studio Community 2017 VisualStudio.15.Release/15.9.14+28307.770
- Microsoft Visual Studio Community 2019 VisualStudio.16.Release/16.2.0+29123.88
- Microsoft Visual Studio Community 2019 Preview 16.3.0 Preview 1.0
VisualStudio.16.Preview/16.3.0-pre.1.0+29123.89
- Microsoft Visual Studio Professional 2019 VisualStudio.16.Release/16.0.3+28803.352

### Description
The foo Language server is failing to activate

### Steps to recreate
Using VS 2019 Community, check out the `master` branch, then start debugging the solution choosing an instance of Visual Studio 2017.

### Current behavior
the FooLanguageClient is failing to initialize:

```
Method not found: 'Void Microsoft.VisualStudio.LanguageServer.Protocol.TextDocumentClientCapabilities.set_CodeAction(Microsoft.VisualStudio.LanguageServer.Protocol.DynamicRegistrationSetting)'.
   at Microsoft.VisualStudio.LanguageServer.Client.RemoteLanguageServiceBroker.RemoteLanguageClientInstance.<InitializeAsync>d__49.MoveNext()
   at System.Runtime.CompilerServices.AsyncTaskMethodBuilder.Start[TStateMachine](TStateMachine& stateMachine)
   at Microsoft.VisualStudio.LanguageServer.Client.RemoteLanguageServiceBroker.RemoteLanguageClientInstance.InitializeAsync(String workspaceLocation, CancellationToken token)
   at Microsoft.VisualStudio.LanguageServer.Client.RemoteLanguageServiceBroker.RemoteLanguageClientInstance.<ActivateLanguageClientAsync>d__47.MoveNext()
   at Microsoft.VisualStudio.Telemetry.WindowsErrorReporting.WatsonReport.GetClrWatsonExceptionInfo(Exception exceptionObject)
```

### Expected behavior
It should open the window when a .foo file is opened in the editor (this works when debugging in an instance of Visual Studio 2019)
### Installed products
Visual Studio Enterprise 2019 Version 16.2.0
Microsoft .NET Framework 4.8.03752

### Description

Similar to https://github.com/microsoft/VSSDK-Extensibility-Samples/issues/150 - the [Reference_Services](https://github.com/microsoft/VSSDK-Extensibility-Samples/tree/master/Reference_Services/C%23) example solution does not compile due due an apparently missing `GenerateFileManifest`.

### Steps to recreate
1. Open the [Reference_Services](Reference_Services/C#/Reference.Services.sln) example solution in Visual Studio 2019.

2. Compile

3. Observe error:
```
Severity	Code	Description	Project	File	Line	Suppression State
Error		The target "GenerateFileManifest" does not exist in the project.	Reference.Services			
```

### Current behavior
The example solution does not compile.

### Expected behavior
The example solution compiles successfully.

### Workaround

As noted by @dmitry-pavlov in https://github.com/microsoft/VSSDK-Extensibility-Samples/issues/150#issuecomment-491621605 - running Visual Studio as administrator appears to resolve this problem. Later attempts to compile as regular user (not "Run as administrator") seem to work just fine.
### Installed products
- Visual Studio Enterprise 2019, Version 16.1.6. Microsoft .NET Framework Version 4.7.03190. 

### Description
When trying to build the Editor with Toolbox, I get the error:
VSIX Manifest root element is invalid. VSIX Manifest requires root element with qualified name {http://schemas.microsoft.com/developer/vsx-schema/2010}Vsix or {http://schemas.microsoft.com/developer/vsx-schema/2011}PackageManifest.

### Steps to recreate
1. Open the Editor with Toolbox example solution.
2. From the Build menu,  select Build Solution.
Severity	Code	Description	Project	File	Line	Suppression State
Warning		The 'PackageManifest' element is not declared.	EditorWithToolbox	C:\Users\sllewellyn\source\repos\Utilities\VSSDK_Extensibility\VSSDK-Extensibility-Samples-master\Editor_With_Toolbox\CS\source.extension.vsixmanifest	1	
Error		VSIX Manifest root element is invalid. VSIX Manifest requires root element with qualified name {http://schemas.microsoft.com/developer/vsx-schema/2010}Vsix or {http://schemas.microsoft.com/developer/vsx-schema/2011}PackageManifest.	EditorWithToolbox			


### Current behavior
Shouldn't it just build?

### Expected behavior
can't find a fix for this.