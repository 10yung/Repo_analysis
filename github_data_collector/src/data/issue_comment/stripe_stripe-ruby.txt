How about something like this?

```ruby
Stripe.api_version = '2014-08-04'

Stripe.with_version('2019-10-17') do
  Stripe::SetupIntent.create({ usage: 'off_session' })
  # would use 2019-10-17 regardless of Stripe.api_version value
end
```

It's very easy to implement in Ruby with `yield` and `ensure`. Useful to avoid doing per-method override for a ton of methods.
Hello,

We're getting the following error when attempting to pay:

```
Stripe::Invoice.pay(id: stripe_subscription.latest_invoice, expand: ['payment_intent'])
```

an invoice:

```
TypeError - no implicit conversion of Hash into String:
	/Users/andrei/.rbenv/versions/2.6.3/lib/ruby/gems/2.6.0/gems/stripe-4.21.0/lib/stripe/api_resource.rb:73:in `escape'
	/Users/andrei/.rbenv/versions/2.6.3/lib/ruby/gems/2.6.0/gems/stripe-4.21.0/lib/stripe/api_resource.rb:73:in `block in custom_method'
```

I would assume this doesn't work because `Stripe::Invoice.pay` expects a positional argument for the ID, while that way, it cannot accept optional arguments, such as `expand`.

This works when retrieving a subscription, for example:

```
Stripe::Subscription.retrieve(id: 'whatever', expand: ['latest_invoice.payment_intent'])
```
When someone assigns to a `StripeObject`'s attributes with an accessor:

``` ruby
account.email = ...
```

Or with a mass assignment:

``` ruby
account.update_attributes(
  email: ...
)
```

We should make an effort to determine that the property assigned is actually one that exists on the resource. This will prevent such problems as a buggy programs assigning to misspelled properties, and then only realizing the mistake much later.

This will probably be done via some kind of machine-readable API manifest as with the testing stubs in #243. Marking as "future".

Add a mechanism for configuring an HTTP client that stripe-ruby will use. This is designed to solve such problems as:
- Allow custom middleware to instrument requests and the like. As seen in #219.
- Allow an HTTP proxy to be configured without patching globals. As seen in #124.

This change is pseudo-breaking given that it will make significant changes to the plumbing of stripe-ruby and there's probably a fair number of people who are anchored to the current implementation through monkey patches and the like.

Replaces #124 and #219.

Would love to see this library include support for stubbed testing. The aws gem does this and it's pretty rad. The existing third party gems like rspec-stripe and stripe-ruby-mock are ok but I'm not overly fond of their approach to it. Doesn't seem as elegant as it could be and they also tend to fall behind in terms of keeping up with the updates made to this library which makes it hard to update either library.
