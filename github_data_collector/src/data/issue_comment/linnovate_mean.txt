
https://github.com/nodejs/nodejs.dev/pull/372
 depends_on:
- mongo

The depends_on option is ignored when deploying a stack in swarm mode with a version 3 Compose file.

I am just new to this stuff ,don't mind me if I am wrong.
Hi Team,

The first line of the project has a broken link: http://mean.io
Kindly fix it.


Thanks
-mean
-----server
--------- config
-------------config.js
-------- controllers
-------- data
-------- images <---I saved images here using "multer "package

I added this line in mean/server/config/config,js
 - app.use('images', express.static(path.join(__dirname,'/../images')))

When I try to access a static image from the browser=>localhost:4040/images
it gives me 401 Unauthorized error.

I don't know why it does not work.
Could you please able to give me an advice?


![errorwithnodemon](https://user-images.githubusercontent.com/12418320/57757545-5b79f200-76fe-11e9-828b-60db3c24e2a6.PNG)


"scripts": {
    "start": "nodemon app.js --exec 'npm run lint && node",
    "lint": "./node_modules/.bin/eslint **/*.js"
  },

The methode used here as showed: 

``` javascript
 me(): Observable<any> {
    return Observable.create(observer => {
      const tokenVal = this.token.getToken();
      if (!tokenVal) return  observer.complete();
```
I think you could first set the user already with the known token. This will resolve issues with a bad connection to the server. It is less important to protect the client side.

So after this line is would add 

``` javascript
this.setUser(this.token.getInfoExchange());

``` 
Where getinfoexchange is just some token decoder that returns the user part

When doing a `git clone,` `docker build .` and `docker run` yarn exists with `Error: unable to connect to database: mongodb://localhost/mean` despite the mongodb container running
MEAN IO : Config validation error JWT_SECRET is required
I am getting this issue please help
I'm new to React js, While i'm posting user data from React js to node js/Express-MongoDB. I got this error i'm unable to find out this.

This  is my POST Route

router.post('/', upload.single('image'), (req, res, next) => {
    console.log(req.image);
    const user = new User ({
        _id : new mongoose.Types.ObjectId(),
        name : req.body.name,
        phonenumber : req.body.phonenumber,
        email : req.body.email,
        jobtitle : req.body.jobtitle,
        image : req.newFileName,
        
    });
user
.save()
.then (result => {
    console.log("success");
    console.log(result);
    res.status(201).json({
        message : 'success',
        createdUser: user,
    });
})
.catch(err => {
    console.log(err);
    res.status(500).json({
        error : err
    });
});
})


This is my React code from Form.js  

class Form extends Component {
  constructor(){
    super();
    this.state={
      name : "",
      nameError: "",
      phonenumber : "",
      phonenumberError: "",
      email : "",
      emailError: "",
      jobtitle: "",
      jobtitleError: "",
      image: "",
      imageError: "",
    }
  }

  fileChange=(e)=>{
    console.log(e.target.files[0])
  }



pleaseChange = (e)=>{
    this.setState({
        [e.target.name] : e.target.value
    })
    
}

//for client side validation for user fields
validate = () => {
    let isError = false;
    const errors = {
        nameError: "",
        phonenumberError: "",
        emailError: "",
        jobtitleError: "",
        imageError: "",
    };

    if(this.state.name.length < 5) {
        isError = true;
        errors.nameError = "name must be atleast more than 5 characters";
    }

    if(this.state.email.indexOf('@') === -1) {
        isError = true;
        errors.nameError = "please enter a valid email address";
    }


    if(isError) {
        this.setState({
            ...this.state,
            ...errors
        });
    }

    return isError;
}
  
pleaseSubmit = (e)=>{
    e.preventDefault(); 
    const err = this.validate();
    if(!err){
        const data = this.state;
        console.log(data);
        this.setState ({
          name : "",
          phonenumber : "",
          email : "",
          jobtitle: "",
          image: "",
      });
    }
};

componentDidMount(){
    console.log(this.state)
  }


fileUploadHandler = () => {
    const fd = new FormData();
    fd.append('name', this.state.name);
    fd.append('phonenumber', this.state.phonenumber);
    fd.append('email', this.state.email);
    fd.append('jobtitle', this.state.jobtitle);
    //console.log('beginning');
    fd.append('image', this.state.image);
    //console.log('ending');


    axios.post('/form', fd,
    {
        onUploadProgress : ProgressEvent => {
            console.log('Upload Progress' +Math.round(ProgressEvent.loaded / ProgressEvent.total * 100) + '%')
        }
    })
    
    .then(res => {
        console.log(res)
    })
    .catch((err) => {
        console.log("Error in Uploading ", err)
    })

}



render() {
    return (
      <div className = 'Form'>
        <form onSubmit = {this.pleaseSubmit}>
            <input type = 'text' name = 'name' placeholder = 'Enter Your Name' value = {this.state.name} onChange={this.pleaseChange} errortext={this.state.nameError} /><br/><br/>
            <input type = 'number' name = 'phonenumber' placeholder = 'Enter Your phonenumber' value = {this.state.phonenumber} onChange={this.pleaseChange} errortext={this.state.phonenumberError} /><br/><br/>
            <input type = 'email' name = 'email' placeholder = 'Enter Your Email' value = {this.state.email} onChange={this.pleaseChange} errortext={this.state.emailError} /> <br/><br/>
            <input type = 'text' name = 'jobtitle' placeholder = 'Enter Your JobTitle' value = {this.state.jobtitle} onChange={this.pleaseChange} errortext={this.state.jobtitleError} /><br/><br/>
            <input type = 'file' name = 'image' 
            value = {this.state.image} onChange={this.pleaseChange} errorText={this.state.imageError} /> <br/><br/>
            <button onClick={this.fileUploadHandler}> Submit </button>
        </form>
      </div>
    );
  }
}

export default Form;


Hi and thanks for you work! 

I can't update Angular 6 to 7 following the Angular's team rules. I get the following error : 

`C:\Users\jerome\Desktop\mean\src\app` (master -> origin)
Î» ng update @angular/cli @angular/core
Your global Angular CLI version (7.1.4) is greater than your local
version (6.0.8). The local Angular CLI version is used.

To disable this warning use "ng config -g cli.warnings.versionMismatch false".
Current active project is ambiguous (angular-material-e2e) using path: '/C/Users/jerome/Desktop/mean/src/app'
Error: Current active project is ambiguous (angular-material-e2e) using path: '/C/Users/jerome/Desktop/mean/src/app'
    at Workspace.getProjectByPath (C:\Users\jerome\Desktop\mean\node_modules\@angular\cli\node_modules\@angular-devkit\core\src\workspace\workspace.js:150:23)
    at Object.getPackageManager (C:\Users\jerome\Desktop\mean\node_modules\@angular\cli\utilities\config.js:97:35)
    at UpdateCommand.runSchematic (C:\Users\jerome\Desktop\mean\node_modules\@angular\cli\models\schematic-command.js:74:38)
    at UpdateCommand.<anonymous> (C:\Users\jerome\Desktop\mean\node_modules\@angular\cli\commands\update.js:70:25)
    at Generator.next (<anonymous>)
    at C:\Users\jerome\Desktop\mean\node_modules\@angular\cli\commands\update.js:7:71
    at new Promise (<anonymous>)
    at __awaiter (C:\Users\jerome\Desktop\mean\node_modules\@angular\cli\commands\update.js:3:12)
    at UpdateCommand.run (C:\Users\jerome\Desktop\mean\node_modules\@angular\cli\commands\update.js:69:16)
    at C:\Users\jerome\Desktop\mean\node_modules\@angular\cli\models\command-runner.js:278:30`

In any directory I tried. 

Any clue?