你好，
readme里面介绍的例子，为什么必须在host-a，host-b都运行？
我尝试了只在host-b上运行qtunnel，然后bachend指向host-a的redis server，但是不行
非常想知道为什么不行，

谢谢
i have this error on my screen
 2018/01/20 11:54:08 r:243797 w:288030 ct:0.000 t:213.674 [#20]
2018/01/20 11:54:08 r:244107 w:289042 ct:0.000 t:213.686 [#19]
2018/01/20 11:54:08 r:244177 w:289385 ct:0.002 t:213.688 [#18]
2018/01/20 11:54:08 r:244894 w:288599 ct:0.003 t:213.688 [#17]
2018/01/20 11:54:08 r:245678 w:292045 ct:0.000 t:213.711 [#16]
2018/01/20 11:54:08 r:245568 w:286651 ct:0.001 t:213.711 [#15]
2018/01/20 11:54:08 r:248041 w:289036 ct:0.000 t:213.718 [#14]
2018/01/20 11:54:08 r:244536 w:288188 ct:0.000 t:213.795 [#13]
2018/01/20 11:54:08 r:243668 w:288573 ct:0.001 t:213.792 [#12]
hello，您好：
cipher := NewCipher(t.crypotMethod, t.secret) 

这句在每次连接时都会有新的cipher，但每次都生成有必要吗？
全程都应该是同样的加密方法，用一个cipher是不是就可以了，这样也减少开销。

谢谢。
可以自己搭建么？做为翻墙工具？？

Designing a transport encryption protocol is among the most difficult undertakings in cryptography. It's something that I would leave in the hands of a professional cryptographer who is already well-versed in the attacks on TLS.

Your project more or less duplicates the functionality of spiped:

https://www.tarsnap.com/spiped.html

However, you have made a number of mistakes in your design:
- There is no reason to use RC4 in new protocols. RC4 has known biases which can be used for plaintext recovery. ChaCha20 is faster than RC4 and substantially more secure
- There is no reason to use AES-CFB in new protocols. Use AES-GCM.
- No cryptographic MAC is applied to the ciphertext, leaving you vulnerable to ciphertext malleability attacks. Your protocol is, in fact, less secure than SSLv3. Again, use AES-GCM, or ChaCha20+Poly1305
- MD5 is used as a KDF. That's gross. Use HKDF with a hash function considered secure today, like SHA-256 or SHA-512, or a keyed hash like Blake2
- AES-256 is used with a key derived from 128-bits entropy. That's pointless. If you have 128-bits entropy for your keying material, use AES-128
- The same key is used in both directions, increasing the chances of IV reuse. Ideally you use a separate key for each direction
- I can't even figure out the IV strategy here. I hope some high level API is picking your IVs randomly
- No defense against replay attacks

...and that's what I found after looking at it for about 20 minutes.

You should probably be using spiped or TLS in PSK mode

Connecting between China to Singapore

![_108](https://cloud.githubusercontent.com/assets/69728/4854868/3771baa6-609b-11e4-99a9-492e9c8ccf26.png)
![_107](https://cloud.githubusercontent.com/assets/69728/4854869/3a324544-609b-11e4-9338-e020fa0035c0.png)
