When I use Lability I use a custom resource to copy entire folders of modules over to the created VMs and this works pretty well.

But in some other places I want put single scripts somewhere on the filesystem. In my specific case it's a startup script that will be scheduled for ONSTART during CustomBootStrap - but is not available for download and writing it out myself in CustomBootStrap becomes really long (and a PITA escaping `"@$). I could put it somewhere on the local filesystem but then not bundling it with the DSC is irritating!

It would be cool to be able to use a Content tag on the Resource type instead of a Uri. If this exists it writes out Content to the Filename on the VM in UTF8 (no BOM) instead of trying to download the file or use one locally.

What do you think?
I am new to Labilty, and still have some troubles with initial useful setup. 
(These troubles are lightest among other 'lab bootstrapping' tools, but still there are present)

I'd like to make use of this excellent engine:
https://github.com/nightroman/Invoke-Build

But I'd like to taskify the internals of Start-LabConfiguration too.
What do you think about it?

#'ing out line 28 enables this configuration to work.
#'ing out line 28 allows the configuration to run successfully.
When running this configuration, this error occurs:
At line:27 char:17
+                 PrefixLength   = $node.PrefixLength;
+                 ~~~~~~~~~~~~
The member 'PrefixLength' is not valid. Valid members are
'AddressFamily', 'DependsOn', 'InterfaceAlias', 'IPAddress', 'PsDscRunAsCredential'.
    + CategoryInfo          : ParserError: (:) [], ParentContainsErrorRecordException
    + FullyQualifiedErrorId : InvalidInstanceProperty

#'ing out line 27 enables it to run without error.
Lability currently only supports the PS Gallery, Github and Filesystem module "providers". If using an internal repository, e.g. ProGet or [PSPrivateGallery](https://github.com/PowerShell/PSPrivateGallery), it would be great to be able to download modules from there too..
I'm not sure if it's not possible, but I wasn't able to find a way to set Vlan ID on virtual switch or on VM NICs during the deployment. Also setting the CompatibilityForMigrationEnabled on vCPU or other VM settings would be useful. Ideally it could be set through Lability_ metadata properties.

A little side question - as there is no Contributing guideline yet, is there a way to ask more specific questions regarding contribution? Like Slack group etc.? Because if I'd like to help with this functionality for example. I could search the whole module or I could ask somebody, where exactly this metadata properties code is placed and develop it further from there.
We need an option to set the "High Performance" power setting on the Lability host. I always forget to do this and it makes things noticeably quicker ðŸ˜ƒ!

Consider adding support for bootstrapping only the meta-config into the VMs, so that the configurations and all others settings (credentials, global variables, etc) can be dynamically retrieved from Azure Automation.

Using the Azure Automation module, a meta-mof is created like this:
# First the node must be registered

$DscNodeParameters = @{
  AzureVMName = 'DC01'
  AzureVMResourceGroup = 'DC01'
  NodeConfigurationName = 'ServersWMF5.DC01'
  ConfigurationMode = 'ApplyAndAutocorrect'
  RebootNodeIfNeeded = $true
}

Register-AzureRmAutomationDscNode @DscNodeParameters

Also, the specified NodeConfigurationName must exist (regular DSC configuration uploaded to Azure).
# Then the meta-config can be generated like this

Get-AzureRmAutomationDscOnboardingMetaconfig -ComputerName DC01 -OutputFolder $DSCMOFDirectory

Azure Automation DSC will generate the certificate for encryption, so no need to inject/handle that in this scenario.

This will require internet connectivity and DHCP in the virtual network though, but it would be a cool scenario.

Supporting only meta-configs could also mean supporting a regular DSC Pull Server, but in that case the certificates must be handled.

In Windows 10 and Windows Server 2016, Microsoft have introduced a set of new capabilities around managing virtual network adapters, more info [here](https://blogs.msdn.microsoft.com/virtual_pc_guy/2016/06/10/network-device-naming-in-hyper-v/).

This feature can be leveraged to mitigate the network adapter naming issue which often occurs when working with DSC configurations where network adapter names is hard coded.

For example, in the bootstrap file, it could be added a few lines to check whether the property "Hyper-V Network Adapter Name" has a value, and if so rename the network adapter inside the guest operating system to the same name.

Another possibilty could be creating a separate DSC Resource for this.

I'm open to contribute, but I'd like some views on the best way to do this.

We must also remember to enable Device Naming when creating VM network adapters in the Lability module.
