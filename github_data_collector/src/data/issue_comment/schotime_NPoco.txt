Does NPOCO support Microsoft.Data.Sqlite? (I'm looking at moving a project to .Net Core 3.1 and to get encryption I may have to switch over to the Microsoft drivers).

DBFactory module
```c#
using NPoco;
using System.Data.Common;
using DBAInternalAPI.Models;
using Microsoft.Extensions.Logging;

namespace DBAInternalAPI.Services
{
    public interface IDBFactory
    {
        IDatabase GetConnection();
    }
    public class DBFactory : IDBFactory
    {
        private readonly string _connectionString;
        private  DbConnection _conn;
        private readonly ILogger _p;
        public DBFactory(IMySQLDatabaseSettings setting, ILogger<DBFactory> logger)
        {
            _p = logger;
            _connectionString = setting.ConnectionString;
        }
        public IDatabase GetConnection()
        {
 
            _conn = new MySql.Data.MySqlClient.MySqlConnection(_connectionString);
            _conn.Open();
            return new Database(_conn);

        }
    }
}

```
 controller init func
```c#
        public XXXController(ILogger<DDBController> logger, IDBFactory dbFactory)
        {
            _p = logger;
            _db = dbFactory.GetConnection();
        }
```
GET 
```
        [HttpGet("version/stat")]
        public ActionResult<StandardResponse<InstanceVersionCount>> GetVersionStat()
        {
            var sql = @"****************";
            _p.LogDebug($"Query database by {sql}");
            var data = _db.Fetch<InstanceVersionCount>(sql);
            return Json(new { statusCode = 200, data });
        }
```
When many of this type ActionResult called sametime,it crash with
```
2019-12-03 10:46:24.368 +08:00 [INF] =>[Microsoft.AspNetCore.Routing.EndpointMiddleware]=> Executed endpoint 'DBAInternalAPI.Area.MySQL.Controllers.MySQLController.GetVersionStat (DBAInternalAPI)'
2019-12-03 10:46:24.369 +08:00 [ERR] =>[Microsoft.AspNetCore.Server.Kestrel]=> Connection id "0HLRN5RMTIDGS", Request id "0HLRN5RMTIDGS:00000001": An unhandled exception was thrown by the application.
MySql.Data.MySqlClient.MySqlException (0x80004005): There is already an open DataReader associated with this Connection which must be closed first.
   at MySql.Data.MySqlClient.Interceptors.ExceptionInterceptor.Throw(Exception exception)
   at MySql.Data.MySqlClient.MySqlConnection.Throw(Exception ex)
   at MySql.Data.MySqlClient.MySqlCommand.Throw(Exception ex)
   at MySql.Data.MySqlClient.MySqlCommand.ExecuteReader(CommandBehavior behavior)
   at NPoco.Database.ExecuteReaderHelper(DbCommand cmd)
   at NPoco.Database.ExecuteDataReader(DbCommand cmd)
   at NPoco.Database.QueryImp[T](T instance, Expression`1 listExpression, Func`2 idFunc, Sql Sql)+MoveNext()
   at System.Collections.Generic.List`1..ctor(IEnumerable`1 collection)
   at System.Linq.Enumerable.ToList[TSource](IEnumerable`1 source)
   at DBAInternalAPI.Area.MySQL.Controllers.MySQLController.GetVersionStat() in /Users/psyduck/Projects/SAL/DBAInternalAPI/Areas/MySQL/Controllers/MySQLController.cs:line 44
   at lambda_method(Closure , Object , Object[] )
   at Microsoft.AspNetCore.Mvc.Infrastructure.ActionMethodExecutor.SyncObjectResultExecutor.Execute(IActionResultTypeMapper mapper, ObjectMethodExecutor executor, Object controller, Object[] arguments)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker.InvokeActionMethodAsync()
   at Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker.Next(State& next, Scope& scope, Object& state, Boolean& isCompleted)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker.InvokeNextActionFilterAsync()
--- End of stack trace from previous location where exception was thrown ---
   at Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker.Rethrow(ActionExecutedContextSealed context)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker.Next(State& next, Scope& scope, Object& state, Boolean& isCompleted)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker.InvokeInnerFilterAsync()
--- End of stack trace from previous location where exception was thrown ---
   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.<InvokeFilterPipelineAsync>g__Awaited|19_0(ResourceInvoker invoker, Task lastTask, State next, Scope scope, Object state, Boolean isCompleted)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.<InvokeAsync>g__Logged|17_1(ResourceInvoker invoker)
   at Microsoft.AspNetCore.Routing.EndpointMiddleware.<Invoke>g__AwaitRequestTask|6_0(Endpoint endpoint, Task requestTask, ILogger logger)
   at Microsoft.AspNetCore.Authorization.AuthorizationMiddleware.Invoke(HttpContext context)
   at Microsoft.AspNetCore.Authentication.AuthenticationMiddleware.Invoke(HttpContext context)
   at Microsoft.AspNetCore.Server.Kestrel.Core.Internal.Http.HttpProtocol.ProcessRequests[TContext](IHttpApplication`1 application)
```
A .NET `DateTime` value is always mapped to SQL `datetime` type loosing accuracy at least in the case, that the MS SQL type of the value is `datetime2(7)`. 

See DatabaseType.cs lines 50 and 68. For full accuracy it would be necessary to change the target type in the mapping to `DbType.DateTime2` for `DateTime` and `DateTime?` type, in case that the target database tables corresponding column type is `datetime2`.
when   update or insert a entity ,if a field is null, this field will be ingore
when i update , i don't want to update or insert null,field can i except it, some database update a null value is error
Tried everything I can, but couldn't make it through.  Need it for unit testing.

Any ideas?  Any working examples using any mocking framework?  Thanks.
When using a poco with a combination of inheritance and a nested class (complex mapping) NPoco maps incorrect values into properties having the same names (Id in my case).

Tested on SQL Server 2017 using .NET Core 3.0 and Npoco versions 3.9.4 and 4.0.2.

To reproduce create a .NET Core Console application and replace Program.cs with the following code:
    
``` c#
    class Program
    {
        public abstract class Entity
        {
            public Guid Id { get; set; }
            public long Version { get; set; }
        }

        public enum ScopeType
        {
            Full,
            Partial
        }

        public class Owner
        {
            public Guid Id { get; set; }
            public ScopeType Scope { get; set; }
        }

        public class OneInherited : Entity
        {
            public OneInherited()
            {
                Manys = new List<Many>();
            }

            public string Name { get; set; }
            public Referenced Referenced { get; set; }
            public string ReferencedName { get; set; }
            public Owner Owner { get; set; }
            public List<Many> Manys { get; set; }
        }

        public class One
        {
            public One()
            {
                Manys = new List<Many>();
            }

            public Guid Id { get; set; }
            public long Version { get; set; }
            public string Name { get; set; }
            public Referenced Referenced { get; set; }
            public string ReferencedName { get; set; }
            public Owner Owner { get; set; }
            public List<Many> Manys { get; set; }
        }

        public class Referenced : Entity
        {
            public string Name { get; set; }
        }

        public class Many : Entity
        {
            public Guid OneId { get; set; }
            public string Name { get; set; }
        }

        public class EntityMap : Map<Entity>
        {
            public EntityMap() : this(new TypeDefinition(typeof(Entity)))
            {
            }

            public EntityMap(TypeDefinition t) : base(t)
            {
                Columns(x =>
                {
                    x.Column(y => y.Id);
                    x.Column(y => y.Version).Version(VersionColumnType.Number);
                });
            }
        }

        public class OneInheritedMap : Map<OneInherited>
        {
            public OneInheritedMap() : this(new TypeDefinition(typeof(OneInherited)))
            { }

            public OneInheritedMap(TypeDefinition t) : base(t)
            {
                UseMap<EntityMap>();

                TableName("Ones").PrimaryKey(x => x.Id, false);

                Columns(x =>
                {
                    x.Column(y => y.Name);
                    x.Column(y => y.Referenced).WithName("ReferencedName").Reference(r => r.Name, ReferenceType.OneToOne);
                    x.Column(y => y.Owner).ComplexMapping("Owner");
                    x.Many(y => y.Manys).WithName("Id").Reference(z => z.OneId);
                });
            }
        }

        public class OneMap : Map<One>
        {
            public OneMap() : this(new TypeDefinition(typeof(One)))
            { }

            public OneMap(TypeDefinition t) : base(t)
            {
                TableName("Ones").PrimaryKey(x => x.Id, false);

                Columns(x =>
                {
                    x.Column(y => y.Id);
                    x.Column(y => y.Version).Version(VersionColumnType.Number);
                    x.Column(y => y.Name);
                    x.Column(y => y.Referenced).WithName("ReferencedName").Reference(r => r.Name, ReferenceType.OneToOne);
                    x.Column(y => y.Owner).ComplexMapping("Owner");
                    x.Many(y => y.Manys).WithName("Id").Reference(z => z.OneId);
                });
            }
        }

        public class ReferencedMap : Map<Referenced>
        {
            public ReferencedMap() : this(new TypeDefinition(typeof(Referenced)))
            { }

            public ReferencedMap(TypeDefinition t) : base(t)
            {
                TableName("Referenceds").PrimaryKey(x => x.Id, false);

                UseMap<EntityMap>();

                Columns(x =>
                {
                    x.Column(y => y.Name);
                });
            }
        }

        public class ManyMap : Map<Many>
        {
            public ManyMap() : this(new TypeDefinition(typeof(Many)))
            { }

            public ManyMap(TypeDefinition t) : base(t)
            {
                TableName("Manys").PrimaryKey(x => x.Id, false);

                UseMap<EntityMap>();

                Columns(x =>
                {
                    x.Column(y => y.Name);
                    x.Column(y => y.OneId);
                });
            }
        }


        static void Main(string[] args)
        {
            var connectionString = "<ConnectionStringToNpocoDatabaseGoesHere>";

            var maps = Assembly.GetAssembly(typeof(EntityMap)).GetTypes().Where(t => typeof(IMap).IsAssignableFrom(t))
                .Select(t => Activator.CreateInstance(t) as IMap).ToArray();

            var factory = DatabaseFactory.Config(x =>
            {
                x.UsingDatabase(() => new Database(connectionString, DatabaseType.SqlServer2012, SqlClientFactory.Instance));
                x.WithFluentConfig(FluentMappingConfiguration.Configure(maps));
            });

            using (var db = factory.GetDatabase())
            {
                var oneId = new Guid("A34146A0-516D-4ABD-8F02-117088DEFDCC");
                var manyId1 = new Guid("285BB20F-02FA-4E73-A95C-1A8FF5A58C3E");
                var manyId2 = new Guid("50719361-34A1-4BF3-B856-2D665F1B86B0");
                var ownerId = new Guid("0C5419CC-1F77-44DE-A51D-2DD1CB842133");
                var referencedId = new Guid("B8690FA4-1875-4E23-AFAF-4F4F19522451");

                // insert test data
                var referenced = new Referenced()
                {
                    Id = referencedId,
                    Name = "Referenced"
                };

                db.Insert(referenced);

                // We just use one of the two Ones when inserting...
                var one = new OneInherited
                {
                    Id = oneId,
                    Name = "Test",
                    ReferencedName = referenced.Name,
                    Owner = new Owner()
                    {
                        Id = ownerId,
                        Scope = ScopeType.Full
                    }
                };

                one.Manys.Add(new Many
                {
                    Id = manyId1,
                    OneId = one.Id,
                    Name = "Many 1"
                });

                one.Manys.Add(new Many
                {
                    Id = manyId2,
                    OneId = one.Id,
                    Name = "Many 2"
                });

                db.Insert(one);
                db.InsertBatch(one.Manys);

                // Fetch an inherited One
                var failing = db.Query<OneInherited>()
                    .Include(o => o.Referenced)
                    .IncludeMany(o => o.Manys)
                    .Single(o => o.Id == oneId);

                // Fetch One without base class
                var succeeding = db.Query<One>()
                    .Include(o => o.Referenced)
                    .IncludeMany(o => o.Manys)
                    .Single(o => o.Id == oneId);

                Console.WriteLine($"Failing: Id = {failing.Id}");
                Console.WriteLine($"Failing: Version = {failing.Version}");
                foreach (var many in failing.Manys)
                {
                    Console.WriteLine($"Failing: many.Id = {many.Id}");
                    Console.WriteLine($"Failing: many.OneId = {many.OneId}");
                }
                Console.WriteLine($"Failing: Owner.Id = {failing.Owner.Id}");
                Console.WriteLine($"Failing: Owner.Scope = {failing.Owner.Scope}");
                Console.WriteLine($"Failing: Referenced.Id = {failing.Referenced.Id}");

                Console.WriteLine("\n--------------------------------------------");

                Console.WriteLine($"Succeeding: Id = {succeeding.Id}");
                Console.WriteLine($"Succeeding: Version = {succeeding.Version}");
                foreach (var many in succeeding.Manys)
                {
                    Console.WriteLine($"Succeeding: many.Id = {many.Id}");
                    Console.WriteLine($"Succeeding: many.OneId = {many.OneId}");
                }
                Console.WriteLine($"Succeeding: Owner.Id = {succeeding.Owner.Id}");
                Console.WriteLine($"Succeeding: Owner.Scope = {succeeding.Owner.Scope}");
                Console.WriteLine($"Succeeding: Referenced.Id = {succeeding.Referenced.Id}");
            }

            Console.WriteLine("\n--------------------------------------------");
            Console.WriteLine("Press ENTER to exit");
            Console.ReadLine();
        }
    }
```

Create a SQL Server database named npoco and run the following sql script to create the tables

``` sql
    USE [npoco]
    GO

    SET ANSI_NULLS ON
    GO
    SET QUOTED_IDENTIFIER ON
    GO
    CREATE TABLE [dbo].[Manys](
        [Id] [uniqueidentifier] NOT NULL,
        [Version] [bigint] NOT NULL,
        [Name] [nvarchar](50) NOT NULL,
        [OneId] [uniqueidentifier] NOT NULL,
     CONSTRAINT [PK_Manys] PRIMARY KEY CLUSTERED 
    (
        [Id] ASC
    )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
    ) ON [PRIMARY]
    GO

    SET ANSI_NULLS ON
    GO
    SET QUOTED_IDENTIFIER ON
    GO
    CREATE TABLE [dbo].[Ones](
        [Id] [uniqueidentifier] NOT NULL,
        [Version] [bigint] NOT NULL,
        [Name] [nvarchar](50) NOT NULL,
        [ReferencedName] [nvarchar](50) NOT NULL,
        [Owner__Id] [uniqueidentifier] NULL,
        [Owner__Scope] [int] NULL,
     CONSTRAINT [PK_Ones] PRIMARY KEY CLUSTERED 
    (
        [Id] ASC
    )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
    ) ON [PRIMARY]
    GO

    SET ANSI_NULLS ON
    GO
    SET QUOTED_IDENTIFIER ON
    GO
    CREATE TABLE [dbo].[Referenceds](
        [Id] [uniqueidentifier] NOT NULL,
        [Version] [bigint] NOT NULL,
        [Name] [nvarchar](50) NOT NULL,
     CONSTRAINT [PK_Referenceds] PRIMARY KEY CLUSTERED 
    (
        [Id] ASC
    )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
    ) ON [PRIMARY]
    GO
    ALTER TABLE [dbo].[Manys]  WITH CHECK ADD  CONSTRAINT [FK_Manys_Ones] FOREIGN KEY([OneId])
    REFERENCES [dbo].[Ones] ([Id])
    GO
    ALTER TABLE [dbo].[Manys] CHECK CONSTRAINT [FK_Manys_Ones]
    GO
    ALTER TABLE [dbo].[Ones]  WITH CHECK ADD  CONSTRAINT [FK_Ones_Referenceds] FOREIGN KEY([ReferencedName])
    REFERENCES [dbo].[Referenceds] ([Name])
    GO
    ALTER TABLE [dbo].[Ones] CHECK CONSTRAINT [FK_Ones_Referenceds]
    GO

```

The output when running this application is:


> Failing: Id = 00000000-0000-0000-0000-000000000000
> Failing: Version = 0
> Failing: many.Id = a34146a0-516d-4abd-8f02-117088defdcc
> Failing: many.OneId = a34146a0-516d-4abd-8f02-117088defdcc
> Failing: many.Id = a34146a0-516d-4abd-8f02-117088defdcc
> Failing: many.OneId = a34146a0-516d-4abd-8f02-117088defdcc
> Failing: Owner.Id = 0c5419cc-1f77-44de-a51d-2dd1cb842133
> Failing: Owner.Scope = Full
> Failing: Referenced.Id = b8690fa4-1875-4e23-afaf-4f4f19522451
> 
> --------------------------------------------
> Succeeding: Id = a34146a0-516d-4abd-8f02-117088defdcc
> Succeeding: Version = 1
> Succeeding: many.Id = 285bb20f-02fa-4e73-a95c-1a8ff5a58c3e
> Succeeding: many.OneId = a34146a0-516d-4abd-8f02-117088defdcc
> Succeeding: many.Id = 50719361-34a1-4bf3-b856-2d665f1b86b0
> Succeeding: many.OneId = a34146a0-516d-4abd-8f02-117088defdcc
> Succeeding: Owner.Id = 0c5419cc-1f77-44de-a51d-2dd1cb842133
> Succeeding: Owner.Scope = Full
> Succeeding: Referenced.Id = b8690fa4-1875-4e23-afaf-4f4f19522451
> 
> --------------------------------------------
> Press ENTER to exit
> 
Hi,

When DbEnableAutoSelect is set to false then database.FetchAsync throws the following error
"System.InvalidOperationException: 'BeginExecuteReader: CommandText property has not been initialized'"
if we don't set to false then works fine

Npoco Version : 4.0.2
.Net Core Version : 2.2

Thanks for this great ORM

Hi,

I've just found out that any changes on version column before deleting an item is not checked. So It seems that the concurrency check does not work for deletion. I'm referring to the method "DeleteAsync".

Is that a bug or a wanted behavior?

Thanks,
Enrico