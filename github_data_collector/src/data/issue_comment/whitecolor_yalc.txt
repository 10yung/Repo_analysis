``` 
yalc version: 1.0.0-pre.34
yarn version: 1.21.1
npm 6.4.1
node v10.13.0 
```


This is my project directory：

```
├── @types
│   └── index.d.ts
├── CHANGELOG.md
├── README.md
├── package-lock.json
├── package.json
├── src
│   ........
├── tsconfig.json
├── watch.js
└── yarn.lock
```


When I execute the command `yalc publish`，I got those error:

```
(node:55687) UnhandledPromiseRejectionWarning: RangeError: path should be a `path.relative()`d string, but got "./@types/index.d.ts"
    at throwError (/Users/heier/.config/yarn/global/node_modules/yalc/node_modules/ignore/index.js:337:9)
    at checkPath (/Users/heier/.config/yarn/global/node_modules/yalc/node_modules/ignore/index.js:356:12)
    at Ignore._test (/Users/heier/.config/yarn/global/node_modules/yalc/node_modules/ignore/index.js:473:5)
    at Ignore.ignores (/Users/heier/.config/yarn/global/node_modules/yalc/node_modules/ignore/index.js:512:17)
    at /Users/heier/.config/yarn/global/node_modules/yalc/src/copy.js:101:80
    at Array.filter (<anonymous>)
    at Object.<anonymous> (/Users/heier/.config/yarn/global/node_modules/yalc/src/copy.js:101:39)
    at step (/Users/heier/.config/yarn/global/node_modules/yalc/src/copy.js:43:23)
    at Object.next (/Users/heier/.config/yarn/global/node_modules/yalc/src/copy.js:24:53)
    at fulfilled (/Users/heier/.config/yarn/global/node_modules/yalc/src/copy.js:15:58)
(node:55687) UnhandledPromiseRejectionWarning: Unhandled promise rejection. This error originated either by throwing inside of an async function without a catch block, or by rejecting a promise which was not handled with .catch(). (rejection id: 1)
(node:55687) [DEP0018] DeprecationWarning: Unhandled promise rejections are deprecated. In the future, promise rejections that are not handled will terminate the Node.js process with a non-zero exit code.
```

No issues with  `yalc@1.0.0-pre.23` 
Hi!

I have a monorepo with about 40 components, and I'm using yarn workspaces to deal with dependencies, my folder structure and yarn are like this:

```javascript
// folder structure
packages/comp1
packages/comp1/packages.json
packages/comp2
packages/comp2/packages.json
packages/comp3
packages/comp3/packages.json

// packages.json
"workspaces":  [
    "packages/*"
],
```
Then I have a test application, in another directory. 
So to get everything working, I would link the componentes one by one running `yarn link` inside their folder.
In the application, run yarn install and after that I used to link all the packages **comp1**, **comp2**, **comp3** to the application using `yarn link comp1`. Finally when I'v run the application I could change the components and test them perfectly.

But with that process, I only had the package linked and not is dependencies, so if I go to **comp1**, and update one of they'r dependencies, the link will not find the new dependency.

After a little search I'v came across yalc, and tried to use it but without success.
With this structure I have, how should I use yalc?
Bumps [js-yaml](https://github.com/nodeca/js-yaml) from 3.12.0 to 3.13.1.
<details>
<summary>Changelog</summary>

*Sourced from [js-yaml's changelog](https://github.com/nodeca/js-yaml/blob/master/CHANGELOG.md).*

> 3.13.1 / 2019-04-05
> -------------------
> 
> - Fix possible code execution in (already unsafe) `.load()`, [#480](https://github-redirect.dependabot.com/nodeca/js-yaml/issues/480).
> 
> 
> 3.13.0 / 2019-03-20
> -------------------
> 
> - Security fix: `safeLoad()` can hang when arrays with nested refs
>   used as key. Now throws exception for nested arrays. [#475](https://github-redirect.dependabot.com/nodeca/js-yaml/issues/475).
> 
> 
> 3.12.2 / 2019-02-26
> -------------------
> 
> - Fix `noArrayIndent` option for root level, [#468](https://github-redirect.dependabot.com/nodeca/js-yaml/issues/468).
> 
> 
> 3.12.1 / 2019-01-05
> -------------------
> 
> - Added `noArrayIndent` option, [#432](https://github-redirect.dependabot.com/nodeca/js-yaml/issues/432).
</details>
<details>
<summary>Commits</summary>

- [`665aadd`](https://github.com/nodeca/js-yaml/commit/665aadda42349dcae869f12040d9b10ef18d12da) 3.13.1 released
- [`da8ecf2`](https://github.com/nodeca/js-yaml/commit/da8ecf24b63d2307015e75ee8bd1da1977071e35) Browser files rebuild
- [`b2f9e88`](https://github.com/nodeca/js-yaml/commit/b2f9e882397660da37c5c5bb92e8ccc7bb9eb668) Merge pull request [#480](https://github-redirect.dependabot.com/nodeca/js-yaml/issues/480) from nodeca/toString
- [`e18afbf`](https://github.com/nodeca/js-yaml/commit/e18afbf1edcafb7add2c4c7b22abc8d6ebc2fa61) Fix possible code execution in (already unsafe) load()
- [`9d4ce5e`](https://github.com/nodeca/js-yaml/commit/9d4ce5e2895365c943d2bdf7e7c8ac1be3ec51a3) 3.13.0 released
- [`f64c673`](https://github.com/nodeca/js-yaml/commit/f64c6737dbe24d110f53152d142d01e64520a193) Browser files rebuild
- [`a567ef3`](https://github.com/nodeca/js-yaml/commit/a567ef3c6e61eb319f0bfc2671d91061afb01235) Restrict data types for object keys
- [`59b6e76`](https://github.com/nodeca/js-yaml/commit/59b6e76b712350e9e6aad7773e7375a1de009cf9) Fix test name
- [`e4267fc`](https://github.com/nodeca/js-yaml/commit/e4267fc733452d074a3e494fb5cab2a07c7e6b87) 3.12.2 released
- [`7231a49`](https://github.com/nodeca/js-yaml/commit/7231a491788ecb289cee52e854574e7271c34350) Browser files rebuild
- Additional commits viewable in [compare view](https://github.com/nodeca/js-yaml/compare/3.12.0...3.13.1)
</details>
<br />

[![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=js-yaml&package-manager=npm_and_yarn&previous-version=3.12.0&new-version=3.13.1)](https://help.github.com/articles/configuring-automated-security-fixes)

Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.

[//]: # (dependabot-automerge-start)
[//]: # (dependabot-automerge-end)

---

<details>
<summary>Dependabot commands and options</summary>
<br />

You can trigger Dependabot actions by commenting on this PR:
- `@dependabot rebase` will rebase this PR
- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it
- `@dependabot merge` will merge this PR after your CI passes on it
- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it
- `@dependabot cancel merge` will cancel a previously requested merge and block automerging
- `@dependabot reopen` will reopen this PR if it is closed
- `@dependabot ignore this [patch|minor|major] version` will close this PR and stop Dependabot creating any more for this minor/major version (unless you reopen the PR or upgrade to it yourself)
- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)
- `@dependabot use these labels` will set the current labels as the default for future PRs for this repo and language
- `@dependabot use these reviewers` will set the current reviewers as the default for future PRs for this repo and language
- `@dependabot use these assignees` will set the current assignees as the default for future PRs for this repo and language
- `@dependabot use this milestone` will set the current milestone as the default for future PRs for this repo and language

You can disable automated security fix PRs for this repo from the [Security Alerts page](https://github.com/whitecolor/yalc/network/alerts).

</details>
Fixes #75.
This fixes #103 where a package cannot be added or pushed multiple times in a long running node process since the initial package store cache is always used.

The intention of the cache is to cache the store across the two calls in add.ts, which this modification achieves.
We're using yalc via node instead of running it via the commandline and have noticed that changes made after an initial push never make it to the installation dirs.

After debugging the code, I've found that the cause is the implementation of `copyDirSafe` which caches the contents of the package in memory which ignores any subsequent published changes to the package in the yalc store.

This works fine when run via the commandline since a package will only be added/pushed to a repo once in yalc's lifetime, however, this is not the case when running in node.
This allows the types in the repo to be consumed by third parties.
Upon running the clean command,

`yalc installations clean my-package`

I have already removed the module from my dependent project. (yalc remove my-package)

The package's still lying in the global ~/.yalc folder. Not sure if this is an issue. Can somebody help
Hi there! I'm getting the following error when running `yalc add`:

```
$ yalc add my-package
(node:71346) UnhandledPromiseRejectionWarning: Error: absolute srcpath does not exist
    at symlinkPathsSync (/Users/astorije/.config/yarn/global/node_modules/fs-extra/lib/ensure/symlink-paths.js:71:24)
    at createSymlinkSync (/Users/astorije/.config/yarn/global/node_modules/fs-extra/lib/ensure/symlink.js:50:20)
    at addBinScript (/Users/astorije/.config/yarn/global/node_modules/yalc/src/add.js:169:41)
    at Object.<anonymous> (/Users/astorije/.config/yarn/global/node_modules/yalc/src/add.js:179:45)
    at step (/Users/astorije/.config/yarn/global/node_modules/yalc/src/add.js:32:23)
    at Object.next (/Users/astorije/.config/yarn/global/node_modules/yalc/src/add.js:13:53)
    at fulfilled (/Users/astorije/.config/yarn/global/node_modules/yalc/src/add.js:4:58)
(node:71346) UnhandledPromiseRejectionWarning: Unhandled promise rejection. This error originated either by throwing inside of an async function without a catch block, or by rejecting a promise which was not handled with .catch(). (rejection id: 1)
(node:71346) [DEP0018] DeprecationWarning: Unhandled promise rejections are deprecated. In the future, promise rejections that are not handled will terminate the Node.js process with a non-zero exit code.
```

This does not happen for all packages. Maybe coincidentally, but the package whose install fails has a `bin` script.

It installs as expected when commenting out those 2 lines: https://github.com/whitecolor/yalc/blob/a70d42b9cfa10fa3063563d98cee33db1dab80c5/src/add.ts#L168-L169

Run with the following versions:

```
$ yalc --version
1.0.0-pre.34
$ yarn --version
1.17.3
```

Installed with `yarn global add yalc`.

Yalc is a godsend, thank you so much!
It would be extemely useful for me to customize package location (by `--dir` switch or something) in both `add` and `publish` methods.

In my particular case, I would need that to do some advanced CI jobs. I would like to store yalc packages in directory shared between all my projects. That way I could work with yalc like with private npm repository.

I may implement it in PR if you agree