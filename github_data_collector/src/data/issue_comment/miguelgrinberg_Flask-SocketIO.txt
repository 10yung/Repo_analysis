The web may show this error  sometimes. it 's not alway like this
I have referenced #597,#814,#179, and there is no help   to use “try  ..  except ” to catch the error, 
how can I catch and handle this error? thanks!

932ad25b5ade43bcb2bfde891ce01ed6: Received request to upgrade to websocket
emitting event "mainpage" to all [/westwell]
932ad25b5ade43bcb2bfde891ce01ed6: Sending packet MESSAGE data 2/westwell,["mainpage",{"value":null}]
86a61baff1f94decb31daa45e685b3de: Sending packet MESSAGE data 2/westwell,["mainpage",{"value":null}]
86a61baff1f94decb31daa45e685b3de: Received request to upgrade to websocket
192.168.105.102 - - [16/Jan/2020 18:16:42] "GET /socket.io/?EIO=3&transport=polling&t=M-jsflu&sid=932ad25b5ade43bcb2bfde891ce01ed6 HTTP/1.1" 200 740 10.094744
127.0.0.1 - - [16/Jan/2020 18:16:42] "GET /socket.io/?EIO=3&transport=polling&t=M-jsk1Y&sid=86a61baff1f94decb31daa45e685b3de HTTP/1.1" 200 258 0.000996
86a61baff1f94decb31daa45e685b3de: Received packet MESSAGE data 2/westwell,["message",{"data":"I'm disconnected!"}]
received event "message" from 86a61baff1f94decb31daa45e685b3de [/westwell]
emitting event "mainpage" to all [/westwell]
932ad25b5ade43bcb2bfde891ce01ed6: Sending packet MESSAGE data 2/westwell,["mainpage",{"value":null}]
86a61baff1f94decb31daa45e685b3de: Sending packet MESSAGE data 2/westwell,["mainpage",{"value":null}]
emitting event "plc_data" to all [/westwell]
932ad25b5ade43bcb2bfde891ce01ed6: Sending packet MESSAGE data 2/westwell,["plc_data",{"value":"{\"crane_id\": \"QC106\", \"timestamp\": 3920735936, \"ls_trolley_pos\": \"26.6\", \"ls_trolley_speed\": \"00.0\", \"ls_spreader_size\": \"40\", \"ls_twistlock\": \"0\", \"ls_spreader_height\": \"03.4\", \"ls_spreader_speed\": \"25.6\", \"lane\": \"2\", \"move_type\": \"load\"}"}]
86a61baff1f94decb31daa45e685b3de: Sending packet MESSAGE data 2/westwell,["plc_data",{"value":"{\"crane_id\": \"QC106\", \"timestamp\": 3920735936, \"ls_trolley_pos\": \"26.6\", \"ls_trolley_speed\": \"00.0\", \"ls_spreader_size\": \"40\", \"ls_twistlock\": \"0\", \"ls_spreader_height\": \"03.4\", \"ls_spreader_speed\": \"25.6\", \"lane\": \"2\", \"move_type\": \"load\"}"}]
emitting event "mainpage" to all [/westwell]
932ad25b5ade43bcb2bfde891ce01ed6: Sending packet MESSAGE data 2/westwell,["mainpage",{"value":null}]
86a61baff1f94decb31daa45e685b3de: Sending packet MESSAGE data 2/westwell,["mainpage",{"value":null}]
emitting event "mainpage" to all [/westwell]
932ad25b5ade43bcb2bfde891ce01ed6: Sending packet MESSAGE data 2/westwell,["mainpage",{"value":null}]
86a61baff1f94decb31daa45e685b3de: Sending packet MESSAGE data 2/westwell,["mainpage",{"value":null}]
emitting event "mainpage" to all [/westwell]
932ad25b5ade43bcb2bfde891ce01ed6: Sending packet MESSAGE data 2/westwell,["mainpage",{"value":null}]
86a61baff1f94decb31daa45e685b3de: Sending packet MESSAGE data 2/westwell,["mainpage",{"value":null}]
emitting event "mainpage" to all [/westwell]
932ad25b5ade43bcb2bfde891ce01ed6: Client is gone, closing socket
932ad25b5ade43bcb2bfde891ce01ed6: Client is gone, closing socket
86a61baff1f94decb31daa45e685b3de: Client is gone, closing socket
86a61baff1f94decb31daa45e685b3de: Client is gone, closing socket
Traceback (most recent call last):
  File "D:\Python37\lib\site-packages\eventlet\wsgi.py", line 566, in handle_one_response
    result = self.application(self.environ, start_response)
  File "D:\Python37\lib\site-packages\flask\app.py", line 2463, in __call__
    return self.wsgi_app(environ, start_response)
  File "D:\Python37\lib\site-packages\flask_socketio\__init__.py", line 46, in __call__
    start_response)
  File "D:\Python37\lib\site-packages\engineio\middleware.py", line 60, in __call__
    return self.engineio_app.handle_request(environ, start_response)
  File "D:\Python37\lib\site-packages\socketio\server.py", line 534, in handle_request
    return self.eio.handle_request(environ, start_response)
  File "D:\Python37\lib\site-packages\engineio\server.py", line 373, in handle_request
    socket = self._get_socket(sid)
  File "D:\Python37\lib\site-packages\engineio\server.py", line 561, in _get_socket
    raise KeyError('Session is disconnected')
KeyError: 'Session is disconnected'
Hi,

I just had a query, we are working with Kubernetes and using Flask-Socketio to establish communication between client and server. 
In Kubernetes, we have 'Watch' module, which gives us a stream of data which can be easily returned through generators and HTTP response,
Can we use generators with emit or send functions?
**Describe the bug**
When running Flask in a docker container, the web app is served just fine using `socketio.run(app)`. However, when using the Flask CLI bindings, warnings are emitted about the application using Werkzeug and web sockets being unavailable. This is inconsequential, as I don't need to use any components of the web server itself when running CLI tasks.

**To Reproduce**
Steps to reproduce the behavior:
1. Create a docker container with a Flask web app running Flask-SocketIO
2. Using `docker exec`, run a Flask CLI task from within the container

**Expected behavior**
A lack of warning message about web socket support
I am trying to port this extension to quart. I am starting by changing as little code as possible.

When I try to run the application I get the error in the title.

(Will update with more detail when not on mobile, I just thought this might be a known bug/fix)
Hey guys,
is there a function to know , how many clients are conncted?
thank you :)

Cheers pau


**Your question**
How do I increase the level of logging from the `emit()` function?

My `SocketIO()` call currently looks like;

```
socketio = flask_socketio.SocketIO(
    app,
    engineio_logger=app.logger,
    async_mode='gevent',
    cors_allowed_origins=caos,
    logger=app.logger,
)
```

**Why?**
Periodically the server generates an `emit()` in response to an authentication request from a new client which doesn't appear to get to the client. The call is being executed but no sign of the data being sent to the client is evident with the current logging levels (`app.logger` level is `DEBUG`).

Any subsequent websocket interaction with the server (clients already connected) after this failure no longer seems to work either but the server continues to function at the Flask/HTTP level without an issue.

**Other information**
Versions
```
Flask==1.1.1
Flask-SocketIO==4.2.1
gevent==1.4.0
gevent-websocket==0.10.1

Python 3.6
```

Command
`gunicorn -k geventwebsocket.gunicorn.workers.GeventWebSocketWorker -w 1 -b 0.0.0.0:8000 dashboard:app -D`

**Describe the bug**
Socket connection is done. But events are not getting emitted from inside of a thread.

Command Used to run: `gunicorn --worker-class eventlet -w 1 api:app `
Sample Code:
```
from flask_socketio import SocketIO

import eventlet
eventlet.monkey_patch()
threading = eventlet.patcher.original('threading')

app = Flask(__name__)

app.config['SECRET_KEY'] = '12345#'
socketio = SocketIO(app, cors_allowed_origins="*",  engineio_logger=True, async_mode='eventlet')

@app.route('/pyapi/uploadcsv', methods=['POST','GET'])
def upload_csv():

    file = request.files['files']

    file.save(os.path.join(app.config['UPLOAD_FOLDER'], file.filename))

    def do_work(sid):
        # Some code
        emitSocketEvent(sid, 'csv read')

    thread = threading.Thread(target=do_work, kwargs={'sid': request.args.get('sid')})
    thread.start()

    return jsonify({'status': 200,  'message': 'File Uploaded successfully', 'id': obj_address})
```

Expected Behaviour:
After thread execution is completed. Event should be emitted. But it doesn't

Logs:
Client connected with sid: edc4dfa7eaf6498790ad9dfb17b217e2
edc4dfa7eaf6498790ad9dfb17b217e2: Sending packet MESSAGE data 2["connected",{"status":200,"message":"Websocket connection successful.","sid":"edc4dfa7eaf6498790ad9dfb17b217e2"}]
edc4dfa7eaf6498790ad9dfb17b217e2: Sending packet MESSAGE data 0
edc4dfa7eaf6498790ad9dfb17b217e2: Received request to upgrade to websocket
edc4dfa7eaf6498790ad9dfb17b217e2: Upgrade to websocket successful

edc4dfa7eaf6498790ad9dfb17b217e2: Sending packet MESSAGE data 2["csv read",{"status":200,"message":"Describe Data is ready","sid":"edc4dfa7eaf6498790ad9dfb17b217e2"}]
edc4dfa7eaf6498790ad9dfb17b217e2: Received packet PING data None
edc4dfa7eaf6498790ad9dfb17b217e2: Sending packet PONG data None
f7590a4328364a819dc18b59473d3bc8: Client is gone, closing socket
Client disconnected
f7590a4328364a819dc18b59473d3bc8: Client is gone, closing socket





**Is your feature request related to a problem? Please describe.**
Hi !
i am fighting with making game multiplayer, i have to identify connections but each time the player refresh or go to another page, i lost the connection, i can not send him message anymore.
Even if the target player stay on the same page, if i want use a flash message thanks to flask_socketio , i got this:
you can't use request.sid in an HTTP view, because there is no Socket.IO context. That only works in a Socket.IO event handler.

i have also   to avoid cheating by multiconnection.
Also, how can i have a Ajax effect, i mean refresh data displayed with destroying the connection ?
How can i display to every clients which players are connected, today just the very last one knows who is playing.
i have many example and tutorial but i am not able to solve this problem. 

thanks
I want to test my application against real world usage there are some tools out there like load runner and apache jmeter but they lack support for socketio. I have done those:

1. Created a bare bones testing application, kept sending huge chunks of data to server but this is limited by my upload speed to the internet.
2. Configured application to send huge chunks of data to the client again still limited by connection's speed.

Is there a way to test how many users it can support ?

Note: I am using socketio to send and receive small pictures and sound files up to 65KB, not just text.