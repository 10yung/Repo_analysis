`demo.go`:

```go
package main

import (
	"github.com/spf13/cobra"
)

func main() {
	var root = &cobra.Command{Use: "demo"}
	var sub = &cobra.Command{Use: "sub", Run: func(*cobra.Command, []string) {}}
	sub.LocalFlags().Bool("test", false, "blah blah")
	root.AddCommand(sub)
	root.Execute()
}
```

```
$ go run demo.go sub --test
Error: unknown flag: --test
Usage:
  demo sub [flags]

Flags:
  -h, --help   help for sub
      --test   blah blah
```

I expect I'm doing something wrong, but it's not clear what, and moreover, it's very confusing that `--test` is listed in help but throws an error.
This checks in the failing test that #1019 references, and proposes a fix to `LocalFlags()` not copying information about whether a flag has been parsed or not.

If preferable, I can open a PR against spf13/pflag to change `flagSet.AddFlag` to copy the fact that a flag already has a value instead of performing that logic here.
If you call `cmd.LocalFlags().Visit()` in a child command's `Run` function, it always visits an empty list of flags.

Consider the following test:

```go
func TestLocalFlagsInChildRun(t *testing.T) {
	root := &Command{
		Use: "root",
		Run: emptyRun,
	}

	var setFlags []string
	c := &Command{
		Use: "child",
		Run: func(cmd *Command, args []string) {
			cmd.LocalFlags().Visit(func(f *pflag.Flag) {
				setFlags = append(setFlags, f.Name)
			})
		},
	}
	c.Flags().BoolP("boolb", "b", false, "a boolean flag")
	root.AddCommand(c)

	_, err := executeCommand(root, "child", "--boolb")
	if err != nil {
		t.Fatal("unexpected error: ", err.Error())
	}

	if len(setFlags) != 1 || setFlags[0] != "boolb" {
		t.Errorf(`expected setFlags to be ["boolb"], but was: %v`, setFlags)
	}
}
```

Which fails on master with the following error message:

```
--- FAIL: TestLocalFlagsInChildRun (0.00s)
    command_test.go:1801: expected setFlags to be ["boolb"], but was: []
```

---

It looks like this is because when a flag is added to the `c.lflags` set in `LocalFlags()`, `pflag.FlagSet.AddFlag()` does not copy the fact that the flag may have been already parsed.
https://github.com/spf13/cobra/issues/1007
A command can have multiple parents. While executing `Run` of a command, is there a way to know which parent command was used?

Usecase: I want to write a single child command and add multiple parents to it, and then have it behave based on the parent which was used to call it. 
This add ZSH completion on command aliases
Viper 1.3.2 is not goroutine safe and causes race conditions for any code using Set/Get from multiple goroutines.  Packages that use both cobra and viper are forced to use the unsafe version of viper.
Close #1013

This PR updates pflag, viper and yaml to the latest stable releases.

Refs: #962, #954
Hi All,

I have defined a command that should look like this:
./binary param1 param2

So when the user enters this:
./binary param1 param2 paramX 

The parser code somehow ignores paramX and executes the command as if user had entered:
./binary param1 param2

What am I missing? Any suggested way to fix this?

Thanks
I thought this sentence seemed *off*:

> **Note**, that the variable `author` will not be set to the value from config, when the `--author` flag is not provided by user.

In the [Viper documentation](https://github.com/spf13/viper):

> Viper uses the following precedence order. Each item takes precedence over the item below it:
> * explicit call to Set
> * flag
> * env
> * config
> * key/value store
> * default

One would assume that:

> ...the variable `author` will not be set to the value from config, when the `--author` flag *is* provided by user.

Testing with `cobra init` bears this out:

`cobra init --pkg-name test`

```go
/*
Copyright © 2020 Nickolas Kraus

*/
```

`cobra init --pkg-name test --author Me`

```go
/*
Copyright © 2020 Me

*/
```
