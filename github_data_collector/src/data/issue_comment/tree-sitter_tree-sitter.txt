Thanks for creating Tree-Sitter, it's really useful for our project.

Would it be possible to create a CHANGELOG or add a release note what has changed in a new version?
Looks like supertypes defined in [the JS DSL](https://github.com/tree-sitter/tree-sitter/blob/master/cli/src/generate/dsl.js#L344) are missing from the [grammar creation docs](https://github.com/tree-sitter/tree-sitter/blob/master/docs/section-3-creating-parsers.md) and [grammar-schema.json](https://github.com/tree-sitter/tree-sitter/blob/master/cli/src/generate/grammar-schema.json) as well.

Creating a separate ticket from the inspiration, #393, since that was a question and these are bug/doc fixes.
[tree-sitter-bash's grammar.json](https://github.com/tree-sitter/tree-sitter-bash/blob/master/src/grammar.json) has many nodes like 
```
{
  "type": "FIELD",
  "name": "body",
  "content": {
    "type": "SYMBOL",
    "name": "_statement"
  }
}
```
Nothing in to [grammar-schema.json](https://github.com/tree-sitter/tree-sitter/blob/master/cli/src/generate/grammar-schema.json) allows for `type: "FIELD"`. Should I add extend the definition of `rule` to include
```JSON
{
  "field-rule": {
    "required": ["name", "type", "content"],
    "properties": {
      "name": { "type": "string" },
      "type": {
        "type": "string",
        "pattern": "^FIELD$"
      },
      "content": {
        "$ref": "#/definitions/rule"
      }
    }
  }
}
```
?
Not sure if I'm simply not understanding how to use prec, or if there's a bug, but... Here's the relevant part of my grammar:

```
        list_item: $ => seq(
            choice(
                $.value_str,
                $.keyword
            ),
            $.newline
        ),
        value_str: $ => prec(-10, /[^@].*/),
        keyword: $ => /@\S+/,
```

Given this:
```
  lol asd
  @LOL
  lolasd
```

It correctly resolves it as value_str, keyword, value_str.

But if I remove the [^@], it thinks all three are value_str. I feel like it should "pick" `keyword` first, if possible...? :)
I was working on #519 trying some rules and I found tree-sitter didn't stop and keep allocating memory.
Here is the source code
https://github.com/bglgwyng/tree-sitter-sandbox/tree/infinite-memory-allocation
> The branch is `infinite-memory-allocation`!

Could you try
```shell
tree-sitter generate && tree-sitter parse example-file-1
```
and check the memory usage of tree-sitter?

Is that a bug or the problem of my grammar definition?


I tried `get_column` but it didn't work as I expected.
So I just put `lexer->get_column(lexer);` at the beginning of scan function to check the behavior.
```c
bool tree_sitter_cham_external_scanner_scan(
    void *payload,
    TSLexer *lexer,
    const bool *valid_symbols)
{

  lexer->get_column(lexer);
```
But then for every input it never stops and gives any result neither.
My `tree-sitter-cli` version is 0.16.2.
Is anybody interested in joining forces in writing TCL grammar?
I'm trying to implement a quite complicated grammar using tree-sitter. 

I'm getting compiler warnings like this:

```
> node-gyp rebuild

  CC(target) Release/obj.target/tree_sitter_coccinelle_binding/src/parser.o
../src/parser.c:14813:90: warning: implicit conversion from 'int' to 'uint8_t' (aka 'unsigned char') changes value from 256 to 0 [-Wconstant-conversion]
  [1841] = {.count = 1, .reusable = true}, REDUCE(sym_metavariables, 9, .production_id = 256),
                                           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~
../src/tree_sitter/parser.h:203:9: note: expanded from macro 'REDUCE'
        __VA_ARGS__                              \
        ^~~~~~~~~~~
```

Everything is then built without errors, but the grammar obviously is not working.

I think it is due to definitions like this one (there are more uses of `uint8_t` in that files): https://github.com/tree-sitter/tree-sitter/blob/9a7327738940d6726c2e01c23b598e1704830ea7/lib/include/tree_sitter/parser.h#L70

It would be good if tree-sitter would support more productions, and if the number of productions is more than maximum supported it would be good to have a compile error.

I'm attaching the grammar I'm using now.
[grammar.zip](https://github.com/tree-sitter/tree-sitter/files/4008805/grammar.zip)


Are there any options for syntax highlighting code on GitHub with tree-sitter? Perhaps a Chrome plugin that does client side rendering? This would be a game changer.

Also, are you aware of any plans/progress on proper VSCode integration (not a third-party plugin)? Alas, most folks use VSCode instead of Atom today.
The only link I can find is buried under Contributing/Published Packages.