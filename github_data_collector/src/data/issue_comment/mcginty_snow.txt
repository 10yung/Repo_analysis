The patterns in `TryFrom<&'a HandshakeChoice> for HandshakeTokens` as well as more code now match the current spec.

Mentioned in https://github.com/mcginty/snow/issues/23
Tiny PR to make builder `Send`.  `Box<dyn CryptoResolver>` cannot be sent between threads safely. Client code could work around this by ensuring that the builder with a custom resolver does not get included in a future's (async block's) state, however it may be considered more ergonomic to add the Send trait bound.
Hey.
I've been wondering how to properly accept multiple public keys instead of just a single one.
Does simply not providing a `remote_public_key(&pubkey)` and checking `HandshakeState.get_remote_static()` work?
Using a `psk` works, but it's not ideal.
#62

the only thing that actually requires std is Cursor in src/resolvers/default.rs    CipherChaChaPoly   

and getrandom, which is an upstream issue in rand

both don't seem a big problem to me, since embedded users need a different resolver anyway now that hacl is gone


we're migrating away from rust, but one of the things that's holding me back is snow, since it's fairly high quality and noise-c is .. not.

how do you feel about supporting no_std? That is, i'll do the majority of the work of course, but you'd have to maintain and defend it later :D
* Add write_message_with_ad, write_message_with_nonce_ad, read_message_with_ad,
and read_message_with_nonce_ad to Session.
I need to save session keys to disk and restore them for failover.  

CipherState is already public, and its use is fairly obvious.
StatelessTransportState::new is a bit lacking because HandshakeState contains a lot of stuff that isnt relevant after hs. I could of course zero them out, but meh cryptography is hard and i'd rather have a review here.


is it ok to introduce a 

```
StatelessTransportState::from_parts(
    cipherstates: StatelessCipherStates,
    pattern: HandshakePattern,
    dh_len: usize,
    rs: Toggle<[u8; MAXDHLEN]>,
    initiator: bool
)
```


edit...


uuh actually CipherState doesn't have a get() so you can't get the session key.
can we introduce that too?
Are you interested in this feature?

Here's the noise fork by Yawning Angel that has the XXhfs using NewHope-Simple:

* https://github.com/katzenpost/noise

Here's the spec extension:

https://raw.githubusercontent.com/noiseprotocol/noise_spec/41d478d3dd97d77a6695f4d6cf6283e2830e9ca6/extensions/ext_hybrid_forward_secrecy.md



Straightforward implementation of #37.
For example I need such pattern Noise_XK_secp256k1_ChaChaPoly_SHA256. Does snow support it out of the box?