When I try to run **`dive build`** in the docker.io/wagoodman/dive container, I get the errors:

## Error:

    Server did not provide an image ID. Cannot write /tmp/dive.360495168.iid
    cannot build image
    Failed to write to log, invalid argument

Building the image with docker within that image works.

## Step to reproduce

Create a Dockerfile:

    mkdir /tmp/dive
    cd /tmp/dive
    echo "FROM library/busybox" >Dockerfile
    RUN echo test > /tmp/test   >> Dockerfile

Then run:

     docker run --rm -v /var/run/docker.sock:/var/run/docker.sock -v "$(pwd)":"$(pwd)"   -w "$(pwd)" -ti  wagoodman/dive build -t foo/bar:latest .

**The execution log:**

```
Building image...
Sending build context to Docker daemon  2.048kB
Step 1/2 : FROM library/busybox
 ---> b534869c81f0
Step 2/2 : RUN echo test > /tmp/test
 ---> Running in a71f209bffb1

 ---> b73a73978ae0
Removing intermediate container a71f209bffb1
Successfully built b73a73978ae0
Server did not provide an image ID. Cannot write /tmp/dive.501940426.iid
cannot build image
Failed to write to log, invalid argument
exit status 1
```

Note that the image is created:

    $ docker images foo/bar:latest
    REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE
    foo/bar             latest              b73a73978ae0        18 seconds ago      1.22 MB


## versions used:

**dive**
```
$ docker run --rm -v /var/run/docker.sock:/var/run/docker.sock --entrypoint= -ti  wagoodman/dive dive -v
dive 0.9.1
```

**docker**
```
# docker run --rm -v /var/run/docker.sock:/var/run/docker.sock --entrypoint= -ti  wagoodman/dive docker version

Client: Docker Engine - Community
 Version:           19.03.1
 API version:       1.26 (downgraded from 1.40)
 Go version:        go1.12.5
 Git commit:        74b1e89e8a
 Built:             Thu Jul 25 21:17:37 2019
 OS/Arch:           linux/amd64
 Experimental:      false

Server:
 Engine:
  Version:          1.13.1
  API version:      1.26 (minimum version 1.12)
  Go version:       go1.10.8
  Git commit:       7f2769b/1.13.1
  Built:            Fri Aug  2 10:19:53 2019
  OS/Arch:          linux/amd64
  Experimental:     false
```
W10
dive version 0.9.1

Hi, 
I'm getting the above error when using dive on W10, installed locally + running from docker:
Fetching image... (this can take a while for large images)
Analyzing image...
Failed to write to log, invalid argument
Failed to write to log, invalid argument
Failed to write to log, invalid argument
Failed to write to log, invalid argument
Building cache...
Failed to write to log, invalid argument
cannot build cache tree
Failed to write to log, invalid argument
cannot remove upperNode /var/lib/yum/rpmdb-indexes/conflicts: path does not exist: /var/lib/yum/rpmdb-indexes/conflicts

The image I tested on is big (that's why we want to use dive), it works with a few smaller images. 

I am trying to index some popular images on Docker Hub - https://devops.stackexchange.com/questions/10192/find-most-popular-images-with-zip-and-git-on-docker-hub - and it could help if `dive` was able to dump list of files to stdout.
```
✗ dive --config dive.yaml fcc
Using config file: dive.yaml
Image Source: docker://fcc
Fetching image... (this can take a while for large images)
Handler not available locally. Trying to pull 'fcc'...
cannot fetch image
cannot find docker client executable
```
```yaml
✗ cat dive.yaml 
source: podman
container-image: podman

keybinding:
        quit: q
```

```
✗ dive --config dive.yaml --source podman fcc
Using config file: dive.yaml
...
✗ mv dive.yaml dive.cfg
✗ dive --config dive.cfg --source podman fcc
Image Source: podman://fcc
...
```
I did expected `dive` to care about config file extension. Strange that no error is shown.
Total Image size: 4.4 GB
Potential wasted space: 274 MB
Image efficiency score: 96 %

How to find that 274 MB files?

[Image Details] failed to show all information due to the big image, have to use smaller font to see more lines.
This is the only repository I have seen that does not have a "latest" release.

The lack of `latest` release makes it harder to install the latest version programmatically.

In the majority of other repos that provide a release binary, I can do:

```
$ curl -s https://api.github.com/repos/wagoodman/dive/releases/latest
```

or more specifically (in my bash scripts):

```bash
# Get the latest version
version=$(curl -s https://api.github.com/repos/wagoodman/dive/releases/latest | grep "tag_name" | cut -d : -f 2,3 | tr -d \"\ ,v)
```

but this trick does not work if there is no latest release...



The [gocui](https://github.com/jroimartin/gocui) seems to be dead (no activity for 2 years) and is built on [termbox-go](https://github.com/nsf/termbox-go) which is unsupported now.

The new hotness seems to be [tview](https://github.com/rivo/tview) which is built on [tcell](https://github.com/gdamore/tcell) (I guess?)

Either way, I see problems with terminals, etc. and it seems like using a better terminal library would help.
In the file tree on the right, the cursor can go past the last item and down onto items that have been filtered using `Ctrl+A`, `Ctrl+R`, `Ctrl+M`, etc.

It probably shouldn't do this. Interestingly, there seems to be a maximum to how far it will let you down-cursor when things in the tree are hidden.

![example](https://user-images.githubusercontent.com/1616060/70589168-a7a5eb80-1b94-11ea-9bd0-1a9dfba01420.gif)
