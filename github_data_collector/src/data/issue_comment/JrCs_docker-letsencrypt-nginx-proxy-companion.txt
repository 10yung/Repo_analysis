Hi, @buchdag!

This pull-request implements the discussion we've started in #571

I've introduced a new env variable for LE container `MUST_BE_CONNECTED_WITH_NETWORK`, that limits the LE scope to containers, included only in the specified network. The tests are included.

Could you review this pull request, please? If it seems acceptable to you, I will add the necessary documentation. Thank you!
I'm trying to get `docker-compose.yml` working with my own web server. All of the examples that I can find that have a third service seem to be using `docker-gen`:

https://github.com/JrCs/docker-letsencrypt-nginx-proxy-companion/wiki/Docker-Compose

I can get https working when I launch all three separately with `docker run` in the examples, but I'd love to get them all working in `docker-compose.yml`. Is this possible? Below is my `docker-compse.yml`:

```
version: "3.7"
services:
    nginx-proxy:
        image: jwilder/nginx-proxy
        container_name: nginx-proxy
        volumes:
            - /var/run/docker.sock:/tmp/docker.sock:ro
            - ./htpasswd:/etc/nginx/htpasswd
            - vhost:/etc/nginx/vhost.d
            - html:/usr/share/nginx/html
            - dhparam:/etc/nginx/dhparam
            - certs:/etc/nginx/certs:ro
        ports:
            - "80:80"
            - "443:443"
        restart: always
        network_mode: bridge
    letsencrypt-nginx-proxy-companion:
        image: jrcs/letsencrypt-nginx-proxy-companion
        volumes:
            - /var/run/docker.sock:/var/run/docker.sock:ro
            - vhost:/etc/nginx/vhost.d
            - html:/usr/share/nginx/html
            - dhparam:/etc/nginx/dhparam
            - certs:/etc/nginx/certs:rw
        restart: always
        network_mode: bridge
        environment:
            - DEFAULT_EMAIL=user@domain.com
            - NGINX_PROXY_CONTAINER=nginx-proxy
        depends_on:
            - nginx-proxy
    my-app:
        build: .
        volumes:
            - .:/app
        expose:
            - "3000"
        restart: always
        network_mode: bridge
        environment:
            - VIRTUAL_HOST=example.domain.com
            - VIRTUAL_PORT=3000
            - LETSENCRYPT_HOST=example.domain.com
        depends_on:
            - nginx-proxy
volumes:
    conf:
    vhost:
    html:
    dhparam:
    certs:
```
Hi, @buchdag 

I've followed your idea with LETSENCRYPT_STANDALONE_CERTS and ported it to environment variables of Nginx container.

The usage will be pretty simple:

docker-compose.yml

```
version: '3'

services:
  nginx:
    image: nginx:latest
    environment:
      - "LETSENCRYPT_STANDALONE_CERTS=true"
      - "VIRTUAL_HOST=example.com,private.acme.com,dev.acme.com"
      - "LETSENCRYPT_HOST=example.com,private.acme.com,dev.acme.com"
```

This config will produce three separate certificates. It seems more correct in terms of decoupling to claim separate certificates from the Nginx container env, than touching the main LE companion.

If the PR is acceptable, I will adjust the documentations
Hi everyone, recently I'm planning on hosting a Nextcloud server, a Lychee server, a phpbb server and a Wordpress server, which will all be hosted with docker and let's encrypt, running behind nginx reverse proxy and get certs from this companion.

On the first day I succeeded making nextcloud server and lychee server online, with https, thanks to the Let's encrypt and this companion! But when I want to add the Wordpress server and phpbb server nextday, letsencrypt-nginx-proxy-companion refuses to generate new certs for these two containers. So I added DEBUG=true, and got the following errors(This is for wordpress, the phpbb has the same error log):
```
Strict-Transport-Security: max-age=604800

{
  "identifier": {
    "type": "dns",
    "value": "blog.cybertale.cn"
  },
  "status": "invalid",
  "expires": "2019-12-24T12:05:31Z",
  "challenges": [
    {
      "type": "http-01",
      "status": "invalid",
      "error": {
        "type": "urn:ietf:params:acme:error:unauthorized",
        "detail": "Invalid response from http://blog.cybertale.cn/.well-known/acme-challenge/ERrH7N6Ysso0cWp-7IlpZ5DnjvdqfCPs49CoQyPjW_w [113.54.159.224]: \"\u003c!DOCTYPE html\u003e\\n\\n\u003chtml class=\\\"no-js\\\" lang=\\\"en-US\\\"\u003e\\n\\n\\t\u003chead\u003e\\n\\n\\t\\t\u003cmeta charset=\\\"UTF-8\\\"\u003e\\n\\t\\t\u003cmeta name=\\\"viewport\\\" content=\\\"width=dev\"",
        "status": 403
      },
      "url": "https://acme-v02.api.letsencrypt.org/acme/chall-v3/1778160705/75R20w",
      "token": "ERrH7N6Ysso0cWp-7IlpZ5DnjvdqfCPs49CoQyPjW_w",
      "validationRecord": [
        {
          "url": "http://blog.cybertale.cn/.well-known/acme-challenge/ERrH7N6Ysso0cWp-7IlpZ5DnjvdqfCPs49CoQyPjW_w",
          "hostname": "blog.cybertale.cn",
          "port": "80",
          "addressesResolved": [
            "113.54.159.224"
          ],
          "addressUsed": "113.54.159.224"
        }
      ]
    },
    {
      "type": "dns-01",
      "status": "invalid",
      "url": "https://acme-v02.api.letsencrypt.org/acme/chall-v3/1778160705/Qs2heg",
      "token": "ERrH7N6Ysso0cWp-7IlpZ5DnjvdqfCPs49CoQyPjW_w"
    },
    {
      "type": "tls-alpn-01",
      "status": "invalid",
      "url": "https://acme-v02.api.letsencrypt.org/acme/chall-v3/1778160705/5qqpcA",
      "token": "ERrH7N6Ysso0cWp-7IlpZ5DnjvdqfCPs49CoQyPjW_w"
    }
  ]
}
```
It seems like the http-01 test is failing. And in the log of the Wordpress, I got this:
```
52.28.236.88 - - [17/Dec/2019:12:01:41 +0000] "GET /.well-known/acme-challenge/daFHzgS9g-ACrg1LQlq73F4MDMigCufDnmGb43BE8hg HTTP/1.1" 404 21269 "-" "Mozilla/5.0 (compatible; Let's Encrypt validation server; +https://www.letsencrypt.org)"
```
The nginx reverse proxy isn't handling the request but passed it to the Wordpress server, which should not happen, right?

I made a test, which is making a file under /var/www/html/.well-known/acme-challenge/ and access it both from the internet and in the container, turns out all ok.
![image](https://user-images.githubusercontent.com/8363524/70996961-e1d03980-210e-11ea-8c6b-d188d1087351.png)
Here is my docker-compose.yml:
```
version: '2.2'

services:
  proxy:
    build: ./proxy
    restart: always
    ports:
      - 80:80
      - 443:443
    labels:
      com.github.jrcs.letsencrypt_nginx_proxy_companion.nginx_proxy: "true"
    volumes:
      - certs:/etc/nginx/certs:ro
      - nginx:/etc/nginx/
      - html:/usr/share/nginx/html
      - /var/run/docker.sock:/tmp/docker.sock:ro
    depends_on:
      - lychee
      - phpbb
      - wordpress
    networks:
      - proxy-tier

  letsencrupt-companion:
    image: jrcs/letsencrypt-nginx-proxy-companion
    restart: always
    volumes:
      - certs:/etc/nginx/certs
      - vhost.d:/etc/nginx/vhost.d
      - html:/usr/share/nginx/html
      - /var/run/docker.sock:/var/run/docker.sock:ro
    environment:
      - DEFAULT_EMAIL=songqiang.1304521@163.com
      - DEBUG=true
    networks:
      - proxy-tier
    depends_on:
      - proxy

  db:
    image: mariadb
    command: --transaction-isolation=READ-COMMITTED --binlog-format=ROW
    restart: always
    volumes:
      - db:/var/lib/mysql
      - /etc/localtime:/etc/localtime:ro
    environment:
      - MYSQL_ROOT_PASSWORD=
    env_file:
      db.env

  nextcloud:
    image: nextcloud:apache
    container_name: nextcloud
    restart: always
    volumes:
      - nextcloud:/var/www/html
    environment:
      - MYSQL_HOST=db
      - VIRTUAL_HOST=cloud.cybertale.cn
      - LETSENCRYPT_HOST=cloud.cybertale.cn
      - LETSENCRYPT_EMAIL=songqiang.1304521@163.com
      - NEXTCLOUD_TRUSTED_DOMAINS=cloud.cybertale.cn
    env_file:
      - db.env
    depends_on:
      - db
    networks:
      - proxy-tier
      - default

  lychee:
    image: linuxserver/lychee
    restart: always
    ports:
      - 40080:80
    environment:
      - VIRTUAL_HOST=lychee.cybertale.cn
      - LETSENCRYPT_HOST=lychee.cybertale.cn
      - LETSENCRYPT_EMAIL=songqiang.1304521@163.com
      - PUID=1000
      - PGID=1000
    volumes:
      - /root/second_disk/lychee/config:/config
      - /root/second_disk/lychee/pictures:/pictures
    networks:
      - proxy-tier
      - default
    cpus: '2'

  mariadb-phpbb:
    image: 'bitnami/mariadb:10.3'
    environment:
      - MARIADB_USER=bn_phpbb
      - ALLOW_EMPTY_PASSWORD=yes
      - MARIADB_DATABASE=bitnami_phpbb
    volumes:
      - 'mariadb_phpbb_data:/bitnami'

  phpbb:
    build: ./phpbb
    restart: always
    expose:
      - "80"
    environment:
      - MARIADB_HOST=mariadb-phpbb
      - MARIADB_PORT_NUMBER=3306
      - PHPBB_DATABASE_USER=bn_phpbb
      - PHPBB_DATABASE_NAME=bitnami_phpbb
      - ALLOW_EMPTY_PASSWORD=yes

      - PHPBB_FIRST_NAME=Song
      - PHPBB_LAST_NAME=Qiang
      - PHPBB_FORUM_NAME=外骨骼实验室bbs
      - PHPBB_FORUM_DESCRIPTION=外骨骼实验室资源与教程分享及讨论
      - PHPBB_EMAIL=songqiang.1304521@163.com

      - VIRTUAL_HOST=bbs.cybertale.cn
      - VIRTUAL_PORT=80
      - LETSENCRYPT_HOST=bbs.cybertale.cn
      - LETSENCRYPT_EMAIL=songqiang.1304521@163.com
    volumes:
      - 'phpbb_data:/bitnami'
    depends_on:
      - mariadb-phpbb
    networks:
      - proxy-tier
      - default

  db-wordpress:
    image: mysql:5.7
    restart: always
    environment:
      - MYSQL_DATABASE=wordpress
      - MYSQL_USER=duke
      - MYSQL_PASSWORD=
      - MYSQL_ROOT_PASSWORD=
    volumes:
      - db-wordpress:/var/lib/mysql

  wordpress:
   image: wordpress
    expose:
      - "80"
    restart: always
    environment:
      - WORDPRESS_DB_HOST=db-wordpress
      - WORDPRESS_DB_NAME=wordpress

      - VIRTUAL_HOST=blog.cybertale.cn
      - LETSENCRYPT_HOST=blog.cybertale.cn
      - LETSENCRYPT_EMAIL=songqiang.1304521@163.com
    depends_on:
      - db-wordpress
    volumes:
      - wordpress:/var/www/html
    networks:
      - proxy-tier
      - default

volumes:
  nextcloud:
  db:
  certs:
  vhost.d:
  nginx:
  html:
  mariadb_phpbb_data:
  phpbb_data:
  wordpress:
  db-wordpress:

networks:
  proxy-tier:
```
My web server is a centos 7 virtual machine running on a windows server.
In general, I got 4 containers all running behind the proxy, each of them is assigned a unique subdomain name, all pointing to the same IPv4 address.
![image](https://user-images.githubusercontent.com/8363524/70997306-b6018380-210f-11ea-8067-1bf304dad97f.png)
But only Nextcloud and Lychee can get certs, the Wordpress and phpbb can't.
Anyone have a clue on this? Any help is appreciated.
Is there something obvious I'm missing with regards to log files. Running this container with docker-compose daemon and nothing gets written to /var/log where I think letsencrypt usually writes. 
When running without the daemon I can obviously see the standard out which is what I'd like to have logged.

Nice tool though thanks!
The companion works fantastically for many containers, however for some it inexplicably results in a 502. Specifically, in my case, Jellyfin and Funkwhale; when I'm running them without SSL, they work perfectly fine. As soon as I try to switch them over to hhtps using the companion, it 502s and the logs show
`*23203 connect() failed (111: Connection refused) while connecting to upstream, client: my.internal-router.ip, server: my.domain.tld, request: "GET /favicon.ico HTTP/2.0", upstream: "https://docker.ip:port/favicon.ico", host: "my.domain.tld", referrer: "https://my.domain.tld/"`

Is there something these two containers might have in common that is causing this? (They are both from linuxserver, but so are all the other ones I'm using), My docker compose files use the same settings as for other services that I have working with the companion.

I can attach full configs if needed
Hi,
I hope someone can point me to the right direction to fix this issue. The automatic renewal doesn't work for me, because I'm running jwilders nginx proxy in network mode "host". I have to do this, because the proxy fails to forward real user IPs without it. 

The whole error message is: 
```
ERROR:simp_le:1396: CA marked some of the authorizations as invalid, which likely means it could not access http://example.com/.well-known/acme-challenge/X. Did you set correct path in -d example.com:path or --default_root? Are all your domains accessible from the internet? Please check your domains' DNS entries, your host's network/firewall setup and your webserver config. If a domain's DNS entry has both A and AAAA fields set up, some CAs such as Let's Encrypt will perform the challenge validation over IPv6. If your DNS provider does not answer correctly to CAA records request, Let's Encrypt won't issue a certificate for your domain (see https://letsencrypt.org/docs/caa/). Failing authorizations: https://acme-v02.api.letsencrypt.org/acme/authz-v3/1622245421, https://acme-v02.api.letsencrypt.org/acme/authz-v3/1622245422
Traceback (most recent call last):
  File "/usr/lib/python3.7/site-packages/simp_le.py", line 1370, in finalize_order
    finalized_order = client.poll_and_finalize(order)
  File "/usr/lib/python3.7/site-packages/acme/client.py", line 712, in poll_and_finalize
    orderr = self.poll_authorizations(orderr, deadline)
  File "/usr/lib/python3.7/site-packages/acme/client.py", line 736, in poll_authorizations
    raise errors.ValidationError(failed)
acme.errors.ValidationError

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/usr/lib/python3.7/site-packages/simp_le.py", line 1443, in persist_new_data
    order = finalize_order(client, order)
  File "/usr/lib/python3.7/site-packages/simp_le.py", line 1397, in finalize_order
    raise Error('Challenge validation has failed, see error log.')
simp_le.Error: Challenge validation has failed, see error log.

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/usr/lib/python3.7/site-packages/simp_le.py", line 1565, in main
    return main_with_exceptions(cli_args)
  File "/usr/lib/python3.7/site-packages/simp_le.py", line 1549, in main_with_exceptions
    persist_new_data(args, existing_data)
  File "/usr/lib/python3.7/site-packages/simp_le.py", line 1464, in persist_new_data
    chain=None,
  File "/usr/lib/python3.7/site-packages/simp_le.py", line 1128, in persist_data
    plugin.save(new_data)
  File "/usr/lib/python3.7/site-packages/simp_le.py", line 557, in save
    key = self.dump_key(data.key)
  File "/usr/lib/python3.7/site-packages/simp_le.py", line 455, in dump_key
    return OpenSSL.crypto.dump_privatekey(self.typ, data.wrapped).strip()
AttributeError: 'NoneType' object has no attribute 'wrapped'

Unhandled error has happened, traceback is above
```

Each time I want to renew the certificates, I have to recreate the container with the default network options. Is there a way to fix this? Running the companion in network mode "host" didn't. 
Continuation of #/564

Note: Don't merge yet, because Dockerhub does not support the ``--platform`` flag yet. It will work locally.

1. You will need to update dockerhub to build the current latest build to a new tag which is amd64
2. Create a new arm32v7 tag which would build the new ``Dockerfile.arm32v7`` (sadly this creates repetition, but this is the only way I know minus sharing a script between dockerfiles, which has its own level of suckness).
3. You will have to remove the current latest tag and then let the hooks in the hooks folder create a new latest tag, using the manifest command.

A working example can be seen here:
https://cloud.docker.com/repository/docker/guysoft/letsencrypt-nginx-proxy-companion


Should the 3 container solution:
https://github.com/JrCs/docker-letsencrypt-nginx-proxy-companion/wiki/Docker-Compose

Have each image versioned? It seems the nginx.tmpl file is versioned - and I just got the latest to attempt to remedy a problem trying to get www subdomain working.
Thanks.
See, you can help me with this, please, 

I'm trying to install a docker-letsencrypt-nginx-proxy-companion certificate on my domain tool.eraenti.info and I'm encountering this problem when it tries to generate the domain and I can't move forward.

2019-09-20 16:10:29,298:INFO:simp_le:1479: Generating new certificate private key
2019-09-20 16:10:29,910:ERROR:simp_le:1446: CA marked some of the authorizations as invalid, which likely means it could not access http://example.com/.well-known/acme-challenge/X. Did you set correct path in -d example.com:path or --default_root? Are all your domains accessible from the internet? Please check your domains' DNS entries, your host's network/firewall setup and your webserver config. If a domain's DNS entry has both A and AAAA fields set up, some CAs such as Let's Encrypt will perform the challenge validation over IPv6. If your DNS provider does not answer correctly to CAA records request, Let's Encrypt won't issue a certificate for your domain (see https://letsencrypt.org/docs/caa/). Failing authorizations: https://acme-v01.api.letsencrypt.org/acme/authz-v3/428025727
Challenge validation has failed, see error log.

on my other server works well the same, but the AWS does not work
