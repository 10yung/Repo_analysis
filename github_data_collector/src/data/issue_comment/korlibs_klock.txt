Formatting with sub-second precision seems to not work:

This:

`        val badUtc = DateTime(
            date = Date(2020, 1, 4 ),
            time = Time(2, 42,55, millisecond = 500)
            )
        val thisWorks = badUtc.format(ISO8601.DATETIME_COMPLETE)
        val thisDoesNot = badUtc.format(ISO8601.IsoDateTimeFormat("YYYYMMDDThhmmss,ss", "YYYY-MM-DDThh:mm:ss,ss"))
        println("thisWorks=$thisWorks")        println("thisDoesNot=$thisDoesNot")`

Prints this:

`thisWorks=2020-01-04T02:42:55`
`thisDoesNot=2020-01-04T02:42:75,50`

The error seems to be here: 

https://github.com/korlibs/klock/blob/f499c4a9f0590d7e23e9acdaf349d8e7deb9b162/klock/src/commonMain/kotlin/com/soywiz/klock/ISO8601.kt#L41




I have just changed the license of Klock from MIT/APACHE2 to Public Domain, just in case it would help to grab some code without any kind of worries to shape any date & time library from Kotlin or other people.

Regarding to Klock: I designed Klock to be as allocation-free as possible (inline classes), thinking that the Kotlin way would be to offer per-platform wrappings around native APIs that would incur in allocations. I designed klock to be used in [korge](https://github.com/korlibs/korge) a game engine, in which case each allocation counts.

The initial Kotlin steps has been to preview a `Duration` inline class:
https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.time/-duration/index.html
also wrapping a `Double` that wouldn't incur in any allocation on any taget including JS. That would fit the klock needs and would be mostly compatible.

Depending on the direction of the official Kotlin library I would take one direction or another.

Once `Duration` is release as stable I will make a `typealias` for the `TimeSpan` class and will provide extension methods/properties to fill the gaps and keep it as source-compatible as possible and will provide `@Deprecated` replaceWith if it helps.

Depending on the decisions of the `DateTime`/`Instant` part I will do the same with DateTime, or will keep it as separate but will provide methods to convert from/between the official Instant class.

**I plan to keep working on Klock as long as there are gaps or missing functionality not offered from the official API**, and cover them here trying always to be as typealias friendly as possible to not duplicate types, but always providing the allocation-free classes this offers.

If you have thoughts/ideas/feedback on this, please let me know here.

Hi, i am facing problem after updated IntelliJ.  I also have updated my kotlin version to 1.3.60
  
    IntelliJ IDEA 2019.2.1 (Community Edition)
    Build #IC-192.6262.58, built on August 20, 2019
    Runtime version: 11.0.3+12-b304.39 x86_64
    VM: OpenJDK 64-Bit Server VM by JetBrains s.r.o

 
Previous version i never face any issue, but in this build, i face this error. Now I am using version 1.8.0

    Cannot inline bytecode built with JVM target 1.8 into bytecode that is being built with JVM target 1.6. Please specify proper '-jvm-target' option
FAILURE: Build failed with an exception.

Here is the code in my commonMain folder
    
    var timeZone = TimeSpan((8.hours).milliseconds)

I have changed my project JVM version setting to 1.6. 
![image](https://user-images.githubusercontent.com/19270457/69615468-e190d100-106f-11ea-8d9c-592922ef8531.png)

Is there anything that I have to do to solve this issue? Hopefully you can guide me on this. Thanks!
Hi,
I use klock a lot. Great library. Thanks.
Currently used in an angular.io project.
small issue, but it would be nice if the JS package/module names were different.
To integrate this into angular.io I need to do,
1) in angular.json:
```
"scripts": [
    ./node_modules/klock-js/klock-root-klock.js
]
```

2) in an angular .ts file
```
import * as com_soywiz_klock from 'klock-js/klock-root-klock.js';
const com_soywiz_klock: any = window['klock-root-klock'];
import klk = com_soywiz_klock.com.soywiz.klock;
```

both of these refer to the 'klock-root-klock.js' file.
It is a slightly odd name.
It would be nicer if the module name was something more like,

'com.soywiz.klock'
or was the same as the 'jar' file name,
i.e. just 'klock'
(the kotlin-multiplatform libs I publish use the jar name automatically, 
so I am not sure what you do to change the names.)

just a thought/small request.
