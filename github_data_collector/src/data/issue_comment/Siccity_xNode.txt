Fixes #218 -- perhaps. This pull request contains an example fix for the issue. The node cache's "update ports" method is extended to take dynamic ports into account, and this is also invoked whenever a list of dynamic ports is redrawn. There's probably a more efficient way to do it, but it gets the job done and fixes any and all issues outlined before.

Note that I've not tested it much (if only we had a test suite of some sort, haha), and especially not with lists of dynamic ports without an array/list backing value. I still don't see the point of those and they don't seem to work half the time.

Please have a look and maybe check it out. I'm not sure if it's exactly what it should be.

No fancy C# 6/7 features used, so this should be as backwards-compatible as necessary.
(**Edit:** Unless `dynamicPortList = true` is supposed to create an imaginary list, and using it with an array backing type is supposed to create a list of arrays. That would be rather counter-intuitive, would invalidate this pull request, and would prompt me to suggest that the wiki page be edited to make that clearer for new users. (And sorry about the edits, markdown and I don't like each other very much.))



As-is, a dynamic port with a backing field of type `T[]` or `List<T>` is unable to connect, under any non-`None` type constraint, to a port of type `T`. I find this to be illogical, and since type constraints are of the utmost importance, at least in my opinions, this is something that ought to be fixed.

For example, it is impossible to connect the highlighted output node to the highlighted input node, as they're considered to belong to different types:
![image](https://user-images.githubusercontent.com/17273782/71322689-b06abb80-24ca-11ea-9f4e-ac2c9d8a2178.png)

The changes introduced here rectify this by making sure that when two nodes are trying to connect, a NodePort's type constraint will be satisfied if the port's value type is an array (or list) and the constraint is satisfied by the array's element type. This allows us to connect a dynamic `float` to a "static" `float` port without issue, no matter which side the array is on. In addition, inheritance is properly supported within all existing constraint types:
![image](https://user-images.githubusercontent.com/17273782/71322700-cc6e5d00-24ca-11ea-97de-961ce27b7640.png)
("Base" and "Derived" types used as shown in #218, with appropriate inheritance type constraints)

**NB:** This implementation looks at element types directly. Given issue #218, perhaps a unification of this and a fix for that would be more apt, allowing a third course of action: setting dynamic port types not to the array type, but to the array's element type. I don't know whether/how that might work, but it might be worth considering.

**NB:** This commit uses modern C# features such as local functions. I'm not too clear on the backwards-compatibility policy of the repo, and will edit if necessary.
When using long, nested namespaces and nested classes, you can find yourself in ridiculous situations where your tooltips go out of screen. With these changes, you can use an attribute to remedy this.

As usual, "before" is to the left, "after" is to the right:
![image](https://user-images.githubusercontent.com/17273782/71322331-bfe80580-24c6-11ea-8445-b7789f7b6b84.png)
Additionally, hiding values is not necessary -- you may only rename if you so desire:
![image](https://user-images.githubusercontent.com/17273782/71322338-d55d2f80-24c6-11ea-9cab-ca5423a1bc90.png)
(The attribute also supports hiding the value only.)

Usage example for the first image:
```csharp
[Output(dynamicPortList = true)]
public RootAxisLink[] axes;

// And the dummy linking class itself -- attribute is applied 
// bool parameter is whether the result should be hidden; leave string empty to NOT override tooltip.
[Serializable, OverrideTooltip("Root-Axis link", true)] public class RootAxisLink { };
```

**NB:** This commit uses modern C# features such as null coalescing. I'm not too clear on the backwards-compatibility policy of the repo, and will edit if necessary.
I'm not entirely sure how best to phrase this, but I'll do what I can. Setting up a dynamic port list of some type plus type constraints, then changing the constraint/array type later leads to a disconnect in internal port serialisation. New list elements will be given the new type/constraint (I believe), but existing dynamic ports built from list items will not be updated to reflect the new changes.

This is present in the current master version as well as in release 1.7 (I think).

**I believe this to be a crippling issue** and suggest addressing it ASAP; questions related to that, and how best to go about it, are in the conclusion of this report. 

### Example reproduction setup
Ingredients:
* two dummy classes
![image](https://user-images.githubusercontent.com/17273782/71321496-5661fa00-24ba-11ea-9db3-78eeafbe7c4f.png)

* inputs (on "target" node):
```csharp
[Input(typeConstraint = TypeConstraint.Strict)]
public float floatInput;

[Input(typeConstraint = TypeConstraint.Strict, dynamicPortList = true, connectionType = ConnectionType.Override)]
public Derived[] derivedInputs;
```

* outputs (on "source" node):
```csharp
[Output(typeConstraint = TypeConstraint.None, dynamicPortList = true, connectionType = ConnectionType.Override)]
public Base[] baseOutputs;

[Output(typeConstraint = TypeConstraint.None, connectionType = ConnectionType.Override)]
public Base baseOutput;
```

We use two nodes: "source" , which houses outputs, and "target", where the aforelisted inputs are. 

### Type constraints
Observing the port data as listed in the node's Inspector, one notices that dynamic ports don't actually inherit type constraints or connection type settings (or if they do, changing those in the attribute will cause them to not be updated to the new values). (The non-dynamic port is always serialised correctly.)
![image](https://user-images.githubusercontent.com/17273782/71321750-5c59da00-24be-11ea-9689-0196e93d64d2.png)

**Note** however that the "array port" (port named after the field itself) is serialised properly after any changes, and only the dynamic fields are not.

### Types
What's even worse, when changing the field type of a dynamic port list, e.g. the array of "baseOutputs" from `Base[]` to `string[]`, existing array elements (or rather, their dynamic port definitions) will not update their underlying type references, even though the underlying properties themselves will be of the new type.

With the aforementioned modification
```csharp
[Output(typeConstraint = TypeConstraint.None, dynamicPortList = true, connectionType = ConnectionType.Override)]
public string[] baseOutputs;
```
we can see the Inspector data mismatch (though again we confirm that a non-dynamic port will always be serialised properly):
![image](https://user-images.githubusercontent.com/17273782/71321822-65977680-24bf-11ea-847f-d03ca73dba7a.png)
The existing first entry maintains its old port type, even though the field type has changed; new entries obey the new restrictions.

Again, **note** that the "array port" itself is also serialised properly.

### Result
Visually, both aspects of this issue can be seen here:
![image](https://user-images.githubusercontent.com/17273782/71321841-b5763d80-24bf-11ea-9ea3-c1c8016eea46.png)
Even though we explicitly forbid multiple connections to our inputs and give them strict type constraints, this can still happen; and even though `baseOutputs` is a string array now, its first element, still considered to be of type `Base`, has its handle drawn in a different colour and is considered to belong to its former type.

### How do we fix it?
I've only been poking at xNode for the last 2-3 days, so I can't consider myself terribly in the know about it. Still, I see ~two~ three lines of thought for fixing this particular issue:

* Make sure any update to the backing field/attribute reserialises dynamic ports properly. Given that the "array port" is updated accordingly, enforcing the same for dynamic ports shouldn't be too difficult;
* "Slave" all dynamic entries to the "array port". In other words, when checking constraints/types for dynamic ports refers to their "array port". This sounds like it could be troublesome in more ways than one, but then again, I haven't yet looked into how dynamic ports are actually accessed and how they "store" their values.
* Given #221, eliminate two birds with one stone by setting the dynamic port types to the backing array's element type. I don't know whether this would break something else though.

I'd be happy to look into fixing this after I investigate the causes behind #217 (which, I hope, should be trivial to fix after I look into how the dragging stuff actually works), but I'd appreciate any suggestions as to how would be best to proceed about this.
![multi Node Window](https://user-images.githubusercontent.com/22412994/70411629-bce42280-1a8d-11ea-9b68-d744f70add3b.png)

![treeviewMenu](https://user-images.githubusercontent.com/22412994/70411704-e8670d00-1a8d-11ea-94ba-e4863d80a22f.png)

`DynamicPortList` Do not force index latent rules
![supportRenameList](https://user-images.githubusercontent.com/22412994/70412020-ac807780-1a8e-11ea-8738-551e8debfe93.png)
When I instantiate a graph using Copy(), the new graph contains all of the nodes - but their names are changed (i.e. Original Name(Clone)" instead of "Original Name"). How can I avoid this?

_Originally posted by @eddieray in https://github.com/Siccity/xNode/issues/213#issuecomment-561205681_
> ArgumentException: Getting control 24's position in a group with only 24 controls when doing dragPerform
> Aborting
> UnityEngine.GUILayoutGroup.GetNext () (at C:/buildslave/unity/build/Runtime/IMGUI/Managed/LayoutGroup.cs:115)
> UnityEngine.GUILayoutUtility.BeginLayoutArea (UnityEngine.GUIStyle style, System.Type layoutType) (at C:/buildslave/unity/build/Runtime/IMGUI/Managed/GUILayoutUtility.cs:344)
> UnityEngine.GUILayout.BeginArea (Rect screenRect, UnityEngine.GUIContent content, UnityEngine.GUIStyle style) (at C:/buildslave/unity/build/Runtime/IMGUI/Managed/GUILayout.cs:344)

Despite the error, the new node shows up in the graph and is working.

Is there something special I need to do when creating a new node in the NodeGraphEditor code for a graph?
Hi, xNode is awesome; thank you. I was looking at the repository and I've found that it's API is susceptible to change. So, if a project uses two package that use a specific version of xNode, it can cause conflicts. It seems probable that any conflict resolution that keeps only one version of xNode, would make some of the packages not work. Am I right?

Is there any recommendation to make a library or a package that uses xNode plays well with other libraries or packages that use Xnode? So far, the only thing I can think of is to edit the xNode scripts in my own package so that the use another namespace, it doesn't seem ideal because it makes it harder to update them. Is that currently the only way of handling this problem? Thank you for your time.
editing many Graphs i really need to know "where i am"
so i added this simple toolbar with the Graph Title (adn a zoom slider)
You can't implement zoom/pan inside single nodes cause graph would intercept wheel/drag events and it would zoom/pan as well.