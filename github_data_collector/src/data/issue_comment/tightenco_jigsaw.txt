In this situation, my event listener needs to access `getModifiedTime()` method from each page to assign `lastmod` value in my generated sitemap.

As far as I know, in this case, we can only iterate pages that are living inside a collection. Is there a way to retrieve all pages (_including index page or any other pages located inside root source directory_)?

Here's my current solution, almost the same as https://github.com/tightenco/jigsaw-blog-template/blob/master/listeners/GenerateSitemap.php

### Sitemap for all collections
```php
foreach ($jigsaw->getCollections() as $collection) {
    collect($collection)->each(function ($page) use ($baseUrl, $sitemap) {
        $sitemap->addItem(rtrim($baseUrl, '/') . $page->getPath(), $page->getModifiedTime(), Sitemap::DAILY);
    });
}
```

### Sitemap only for the pages located inside the root source directory
```php
collect($jigsaw->getOutputPaths())->reject(function ($path) {
   
   // exclude collection..
   // collection path always set to /{collection name}/name
   return count(explode("/", trim($path, '/'))) > 1 || Str::is($this->exclusions, $path);

})->each(function ($path) use ($baseUrl, $jigsaw, $sitemap) {

   // get the source path
    $sourcePath = empty(trim($path, '/')) 
          ? $jigsaw->getSourcePath() . $path . "/index.blade.php" 
	  : $jigsaw->getSourcePath() . $path . ".blade.php";

   // i'm on Windows
    $sourcePath = str_replace('\\', '/', $sourcePath);

   // use php filemtime
    $sitemap->addItem(rtrim($baseUrl, '/') . $path, filemtime($sourcePath), Sitemap::DAILY);
});
```

Please tell me if there any better way to do this ðŸ˜ƒ 
Currently it looks like Jigsaw only offers runtime highlighting:

> Syntax highlighting using highlight.js

https://jigsaw.tighten.co/docs/starter-templates

Other projects offer build time highlighting. For example Hugo uses the Go Chroma library for highlighting:

https://gohugo.io/content-management/syntax-highlighting

Can Jigsaw do something like this?
I'm not sure this is the best way to go about it, but I'm proposing to add the ability to create new commands under the jigsaw name. In a similar vein to my other PR (#408), however this customizes the CLI interface instead of just actions triggered on events. 

My use-case again is easier deployments.

```php
// bootstrap.php
$container->get(Jigsaw::class)->registerCommand(RunDeploymentCommand::class);
```

In my project, I extended the `BuildCommand`, renamed it to 'deploy', then after it completes the build process, I run my deploy.
```php
use TightenCo\Jigsaw\Console\BuildCommand;

class RunDeploymentCommand extends BuildCommand
{
    private $jigsaw;

    public function __construct($container)
    {
        parent::__construct($container);

        $this->jigsaw = $container->get(Jigsaw::class);
    }

    protected function configure()
    {
        parent::configure();

        // Override default name & description
        $this->setName('deploy')
            ->setDescription('Build & Deploy your site to neocities.');
    }

    protected function fire()
    {
        parent::fire();

        $env = $this->input->getArgument('env');
        $this->jigsaw->deployToNeocities(); // assumes the macro trait in PR #408 is merged
        $this->console->info("Site deployed to {$env}");
    }
}
```

```sh
./vendor/bin/jigsaw deploy production
```
Adding the macro trait to the Jigsaw class makes it much easier to extend and customize certain aspects of Jigsaw. For example,  I'm using my [Neocities Package](https://github.com/reed-jones/Neocities-php) which allows me to upload deploy the compiled files using the `afterBuild` event. Using the macro, I can abstract away the implementation and provide an installable plugin which can easily be used.
```php
Jigsaw::mixin(new NeocitiesJigsawDeployment);

$events->afterBuild(function (Jigsaw $jigsaw) {
    if ($jigsaw->getEnvironment() === 'production') {
        $jigsaw->deployToNeocities();
    }
});
```
This PR aims to alter how configurations are merged so that the process feels a bit more intuitive and requires less duplication of config settings between environments. The docs [lay out how configurations can be merged](https://jigsaw.tighten.co/docs/building-and-previewing-environments/), and this works fine for top-level key/value pairs. I ran into an issue, however, when I wanted to [add a filter](https://jigsaw.tighten.co/docs/collections-filtering/) to a collection so that only posts w/ a `published` metadata value were included in my production build. Doing so was easy, and just involved the following:
```php
// config.production.php
<?php

return [
    'collections' => [
        'posts' => [
            'filter' => function ($item) {
                return $item->published;
            }
        ],
    ],
];
```

However this resulted in the rest of the `collections` settings from my base `config.php` being discarded. This is because the current implementation simply does a `collect()->merge()`, which seems to only consider the top-level key/value pairs. 

The code I'm submitting alters the way that configs are merged to use `array_replace_recursive`, which should crawl through the entire config arrays (including nested arrays and Collections) and only replace the key/value pairs that are different, keeping any that have not been altered.

Example:
```php
// config.php
return [
    'baseUrl' => '',
    'production' => false,
    'siteName' => 'Blog Starter Template',
    'siteAuthor' => 'Author Name',

    // collections
    'collections' => [
        'posts' => [
            'author' => 'Author Name',
            'sort' => '-date',
            'path' => 'blog/{filename}'
        ],
    ]
];

// config.production.php
return [
    'baseUrl' => 'https://my-jigsaw-blog.com',
    'production' => true,
    'collections' => [
        'posts' => [
            'filter' => function ($item) {
                return $item->published;
            }
        ],
    ],
];

// merged config (current behavior)
// Note how collections.posts does not contain author, sort or path
[
    'baseUrl' => 'https://my-jigsaw-blog.com',
    'production' => true,
    'siteName' => 'Blog Starter Template',
    'siteAuthor' => 'Author Name',

    // collections
    'collections' => [
        'posts' => [
            'filter' => function ($item) {
                return $item->published;
            }
        ],
    ]
];

// merged config (new behavior)
// Note how collections.posts contains author, sort, path and filter
[
    'baseUrl' => 'https://my-jigsaw-blog.com',
    'production' => true,
    'siteName' => 'Blog Starter Template',
    'siteAuthor' => 'Author Name',

    // collections
    'collections' => [
        'posts' => [
            'author' => 'Author Name',
            'sort' => '-date',
            'path' => 'blog/{filename}',
            'filter' => function ($item) {
                return $item->published;
            }
        ],
    ]
];
```

Current issues needing advice:
- the `config.php` used for testing includes a function defn that triggers an error if that config is loaded more than once. As such, each individual test in the project passes but the overall suite fails b/c I needed/wanted to use that config for testing and so it's loaded in 2 different tests, which triggers the "Fatal error: cannot redeclare ...". I would like advice from project maintainers as to whether that function is important to the tests (ie it's presense is testing something), or just something incidental that could be refactored so that that loading `config.php` in different tests doesn't cause PHP to kvetch.
- if users are depending on the current behavior to discard values in "subarrays", this could introduce a breaking change
- I was aiming for minimal API changes, but I don't love some of the changes I made to achieve that. For example, making `mergeConfigs()` a static method seems to make sense, but then doing `(new static(''))->convertStringCollectionsToArray(...)` in that method in order to reuse the `convertStringCollectionsToArray()` instance method seems hacky and gross. I would also love some advice or suggestions on how to clean that up without making too big of a mess.

Because of these "issues", I've marked this PR as a "WIP". Other than these, though, it's fully functional.

Thanks so much for the great project! I hope that you'll find this change useful.
Hi,

It would be great to be able to access relativePath or the file object in the collection custom closure.

So we could do something like :

```php
'docs' => [
    'path' => function($page) {
        return $page->getCollection().'/'.$page->getRelativePath().'/'.$page->getFilename();
     }
],

'docs' => [
    'path' => '{collection}/{relativePath}/{-filename}',
```

If accepted I could do the following merge request in the file CollectionDataLoader.php
```php
    private function getMetaData($file, $collection, $data)
    {
        $filename = $file->getFilenameWithoutExtension();
        $baseUrl = $data->baseUrl;
        $extension = $file->getFullExtension();
        $collectionName = $collection->name;
        $collection = $collectionName;
        $source = $file->getPath();
        $modifiedTime = $file->getLastModifiedTime();
        $relativePath = $file->getRelativePath();

        return compact('file', 'filename', 'baseUrl', 'extension', 'collection', 'collectionName', 'source', 'modifiedTime', 'relativePath');
    }
```




This pull request updates the `illuminate/container`, `illuminate/support`, and `illuminate/view` dependencies from `^5.8` to `^6.0`. That change in turn updates some other underlying dependencies, like `illuminate/event` and `nesbot/carbon`, but this doesn't appear to have any effect.

One test was using the old helper functions, so I updated those from `array_get` to `Arr::get`. All tests that were passing before this change are still passing (`MarkdownExtraTest::correctly_parse_single_line_html_markup_in_markdown_file` and `SnapshotTest::all_built_files_contain_expected_content` were both already failing).
As someone new to Jigsaw, it was a little weird to me that I had to first run `build` before I could run server. Most static site generators I've ran across run `build` as part of server. This merge request calls `build` by default when doing `serve` (passing in the environment). I've also included a `--no-build` option in `serve`.
We are looking to build a composer library which will consist of blade components that we can reuse among different jigsaw projects.

My questions are:

- Is this something doable in the current version of jigsaw?
- If yes, what would be the correct way of doing this?

Any suggestions towards the right direction would be really appreciated.

Thanks
I wanted to be able to use Jigsaw to generate documentation within an existing project that already uses Laravel libraries. But, obviously, I wouldn't want any current files to be overriden. I also didn't want to have a separate set of composer files and vendor directory, since my project already contained most of Jigsaw's needed dependencies.

But `jigsaw init` doesn't provide an option to install to a sub-directory, and if I manually created the sub-directory, `cd`ed into it, and did `jigsaw init` in there, I'd be duplicating libraries.

I think it would be really useful to be able to use it alongside an existing project in this fashion.