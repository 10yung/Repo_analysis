Hi,

I'm trying to use external dependencies, e.g. http://w3.impa.br/~diego/software/luasocket/home.html. 

Haven't find a way to be able to include such external dependencies. If I install view brew, the wrk executable already embeds luajit so I can't add anything to it (at least it seems like that to me).

I also tried the manual installation as per https://github.com/wg/wrk/wiki/Installing-wrk-on-OS-X, with luajit installed via brew and using `WITH_LUAJIT` as per https://github.com/wg/wrk/blob/master/INSTALL. However, this also doesn't work (get a bunch of make errors).

Is there a way to install additional dependencies to be used from lua script supplied to wrk?

Thank you!
I am trying to understand the scenarios where I get different latencies (with different connection counts (-c)), but near about the same throughput. Here are are my tests:

```
osb@osb-test-wrk:~$ time sudo taskset -c 0-15 wrk --latency -t 16 -c 640  -d 240s  https://internal.test
Running 4m test @ https://internal.test
  16 threads and 640 connections
  Thread Stats   Avg      Stdev     Max   +/- Stdev
    Latency    77.42ms    9.42ms 338.57ms   85.77%
    Req/Sec   519.26    114.78   808.00     60.27%
  Latency Distribution
     50%   75.09ms
     75%   79.68ms
     90%   88.64ms
     99%  102.85ms
  1980525 requests in 4.00m, 417.42MB read
Requests/sec:   8248.78
Transfer/sec:      1.74MB

real    4m0.220s
user    0m22.352s
sys     0m28.356s
```

```
osb@osb-test-wrk:~$ time sudo taskset -c 0-15 wrk --latency -t 16 -c 384  -d 240s  https://internal.test
Running 4m test @ https://internal.test
  16 threads and 384 connections
  Thread Stats   Avg      Stdev     Max   +/- Stdev
    Latency    45.92ms    6.32ms 286.31ms   89.39%
    Req/Sec   525.88     79.58   727.00     76.94%
  Latency Distribution
     50%   44.67ms
     75%   47.15ms
     90%   52.58ms
     99%   62.24ms
  2008254 requests in 4.00m, 423.26MB read
Requests/sec:   8364.54
Transfer/sec:      1.76MB

real    4m0.195s
user    0m18.865s
sys     0m24.786s
```

```
osb@osb-test-wrk:~$ time sudo taskset -c 0-15 wrk --latency -t 16 -c 192  -d 240s  https://internal.test
Running 4m test @ https://internal.test
  16 threads and 192 connections
  Thread Stats   Avg      Stdev     Max   +/- Stdev
    Latency    21.53ms    4.60ms 240.30ms   93.43%
    Req/Sec   562.02     61.07     2.74k    74.83%
  Latency Distribution
     50%   20.44ms
     75%   22.28ms
     90%   25.19ms
     99%   30.53ms
  2147731 requests in 4.00m, 452.66MB read
Requests/sec:   8945.69
Transfer/sec:      1.89MB

real    4m0.193s
user    0m18.893s
sys     0m29.841s
```

```
osb@osb-test-wrk:~$ time sudo taskset -c 0-15 wrk --latency -t 16 -c 96  -d 240s  https://internal.test
Running 4m test @ https://internal.test
  16 threads and 96 connections
  Thread Stats   Avg      Stdev     Max   +/- Stdev
    Latency    10.63ms    4.59ms 221.92ms   98.77%
    Req/Sec   573.68     55.27     1.94k    76.74%
  Latency Distribution
     50%    9.89ms
     75%   10.96ms
     90%   12.56ms
     99%   15.54ms
  2193262 requests in 4.00m, 462.26MB read
Requests/sec:   9134.86
Transfer/sec:      1.93MB

real    4m0.167s
user    0m18.791s
sys     0m28.257s
```

```
osb@osb-test-wrk:~$ time sudo taskset -c 0-15 wrk --latency -t 16 -c 48  -d 240s  https://internal.test
Running 4m test @ https://internal.test.io
  16 threads and 48 connections
  Thread Stats   Avg      Stdev     Max   +/- Stdev
    Latency     5.28ms    3.93ms 215.48ms   99.57%
    Req/Sec   582.59     55.37     2.07k    78.80%
  Latency Distribution
     50%    4.80ms
     75%    5.39ms
     90%    6.22ms
     99%    8.21ms
  2227005 requests in 4.00m, 469.37MB read
Requests/sec:   9275.36
Transfer/sec:      1.95MB

real    4m0.124s
user    0m18.926s
sys     0m28.166s
```

There's isn't much deviation in Req/Sec (or Requests/sec) compared to the Latency.  Is this safe to assume that there are no bottlenecks in the test machine (wrk) and are only present in server I'm testing, if any? . In other words, I need to rule out any bottlenecks in the test machine, before I submit the perf report. I checked the CPU/memory usage of the test machine while running the test,  and they seemed fine. The test machine is Intel(R) Xeon(R) 16 vCPU - 64GB VM instance in GCP.

Also, without any lua script option, wrk does use HTTP pipelining , right?
When we see a short read, retry it until we fill the buffer, or we see `EWOULDBLOCK`.

I see short reads locally, and I think they're affecting performance, but the difference is pretty slim.

I mainly wrote this because I was seeing `epoll_wait` hang for ages, and wanted to know that `read` would block. It does, most of the time.
Makefile#line 64
Compile Error in windows sub linux
error:
LUAJIT src/wrk.lua
/bin/sh: 1: Syntax error: "(" unexpected
Makefile:63: recipe for target 'obj/bytecode.o' failed
make: *** [obj/bytecode.o] Error 2

reasonï¼š
$(ODIR)/bytecode.o: src/wrk.lua
	@echo LUAJIT $<
	@$(SHELL) -c 'PATH=obj/bin:$(PATH) luajit -b $(CURDIR)/$< $(CURDIR)/$@'
the $(PATH)

fix:
$(ODIR)/bytecode.o: src/wrk.lua
	@echo LUAJIT $<
	@$(SHELL) -c 'PATH=obj/bin:$PATH luajit -b $(CURDIR)/$< $(CURDIR)/$@'
...because it seems to be close to impossible to get the config right on macos using homebrew.
'module not found' is all i get and googling did not help either.

would it be possible to add cjson to the build process and have it available in wrk/lua scripts out of the box?
General trend is to capture p90, p95 and p99. 
Added changes to produce output for p95 response time latency stats too. Please review and merge.
When setting a header, value needs to be separated by a space, as in `foo: bar`.
When it's just `foo:bar`, it's not set and no error is reported. The feels bit
suboptimal so I would like to propose this patch to change things a bit:

```
diff --git a/src/script.c b/src/script.c
index 68a5d08..e6e7bcc 100644
--- a/src/script.c
+++ b/src/script.c
@@ -82,9 +82,9 @@ lua_State *script_create(char *file, char *url, char **headers) {
     lua_getfield(L, 4, "headers");
     for (char **h = headers; *h; h++) {
         char *p = strchr(*h, ':');
-        if (p && p[1] == ' ') {
+        if (p) {
             lua_pushlstring(L, *h, p - *h);
-            lua_pushstring(L, p + 2);
+            lua_pushstring(L, p + 1);
             lua_settable(L, 5);
         }
     }
```

The patch does work, wrk now correctly processes cmd line

```
./wrk -c1 -d1s -t1 -H 'foo: bar' -H 'bar:foo' -H 'foobar:' -H 'barfoo:   123  ' http://localhost:9292
```

and sends the headers

```
{"HTTP_VERSION"=>"HTTP/1.1",
 "HTTP_HOST"=>"localhost:9292",
 "HTTP_FOOBAR"=>"",
 "HTTP_FOO"=>"bar",
 "HTTP_BAR"=>"foo",
 "HTTP_BARFOO"=>"123"}
```

I think it would also be nice to report on invalid header entry (missing `:`
or other violations of RFC) and I'm willing to implement it, but first I would
like to have confirmed that it would be merge so that I don't waste my time.

WRK is a good tool for test performance, but I still confusing about some options.

**Example:** I want to test our application can support 2,000 concurrent at the same time.
What is an option for this case?

Like this?
```wrk -t12 -c2000 -d1s http://127.0.0.1:8080/index.php```

I wondering about what is the right way to test our application to know concurrent support.

Anyone please suggest and help me :)

I want to test a http server with unix domain socket, how can I use it?