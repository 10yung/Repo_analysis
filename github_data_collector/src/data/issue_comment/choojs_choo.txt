I am trying to mount a choo application in an "application shell" that is provided by a static site generator.

I would expect the routing behavior to be limited to the scope of choo's application host, yet `nanohref` will try to handle all anchors being clicked.

Looking at the `nanohref` docs, this behavior seems to be supported by passing a second `rootNode` argument to the `nanohref` function: https://github.com/choojs/nanohref#nanohrefhandlerlocation-rootnode

Looking at how choo itself is using `nanohref` it looks like passing a second argument is not intended: https://github.com/choojs/nanohref#nanohrefhandlerlocation-rootnode

This leads me to two questions:

1. Is it possible to achieve this behavior in some other way?
2. In case no, would you accept a PR that enables passing the application root to `nanohref` as well? In this case I have to admit I am slightly unsure how the API for this could even look like considering how there is basically zero surface area for options in choo.


### Expected behavior
`choo` should accept valid JS code in the emitter callback.

### Actual behavior
`choo` throws 

> "Unexpected token: punc ()) while parsing file: /app/index.js"

when an ES6 arrow function is used the emitter callback.

### Steps to reproduce behavior
This is working code (adapted from the intro tutorial, running on glitch)

```
const choo = require('choo');
const html = require('choo/html');
const main = require('./templates/main.js');

const app = choo();

app.use(function (state, emitter) {
  state.animals = [
    { type: 'lion', x: 200, y: 100 },
    { type: 'crocodile', x: 50, y: 300 }
  ];
  
  emitter.on('addAnimal', function () {
    const obj = { type: 'lion', x: 100, y: 200 };
    state.animals.push(obj);
    emitter.emit('render');
  });
  
});

app.route('/', main);
app.mount('div');
```

When I replace ` function () `with  `() =>`

 ```
emitter.on('addAnimal', () => {
    const obj = { type: 'lion', x: 100, y: 200 };
    state.animals.push(obj);
    emitter.emit('render');
  });
```

`choo` throws the above error. Some kind of magic going on?



This is more of a help wanted issue. The problem that I am having is that I am attempting to put a choo.js app that is not on the root path of site, i.e. mysite.com/#userid. Instead, I am attempting to run the site on mysite.com/biz/baz/myapp/#userid. What do I need to do, assuming I don't have server control, to get my hash routes to work on an arbitrary root location on the path?

I've tried the following and this didn't work for me: 

```
const prefix = '/biz/baz/myapp'
app.route(prefix+'/', welcome)
app.route(prefix+'#:userid', user)
```

Is there a trick that I need to do in order to stick my choo app on a subregion of mysite?

Thanks!
### Expected behavior
I've written some routes that are not behaving as expected. I initially started off with the `create-choo-app` scaffolding; however, that required turned out to only be a good idea for development. When it came to deployment, my dynamic routes were all broken when I tried to push up my `dist` folder to s3 (where I am going to eventually host my choo site). So rather than use the fancy bankai package, I thought I would use browserify to get everything working. Again, this caused all my routes to break. Am I missing something, or do you have to run something like budo or bankai in order to serve the page up? Here is basically what I am doing: 

index.html: 
```
<html>
  <head>
    <script src='bundle.js'> </script>
  </head>
  <body>
  </body>
</html>
```

index.js
```
var html = require('choo/html')
var choo = require('choo')

var app = choo()
app.route('/', placeholder)
app.route('/:user', placeholder)
app.route('/:user/:repo', placeholder)
app.route('/:user/settings', placeholder)
app.route('/404', placeholder)

function placeholder (state) {
  console.log(state.params)
  return html`<body>placeholder</body>`
}

app.mount('body')
```

browserify command: 
```
browserify index.js -o bundle.js
```
When I run a simple http server like `python -m simpleHttpServer 8000` my initial route comes up fine. But then if I attempt to type `localhost:8000/homer` into the address bar I get a 404 error. 

I would expect that I should get "placeholder".

I guess ultimately my question is how do I get everything nice and packaged in the browser so that I can manually type routes in the address bar and get the results I am anticipating? Thanks!

It'd be rad to be able to use choo in a no-build environment. Thanks!
Porting https://github.com/goto-bus-stop/choo-lazy-route to be a first-class citizen in Choo. Should allow loading routes async directly.

Right now the API is prefixed with experimental, as it probably requires some discussion on how to stabilize. But feel it's worthwhile adding a non-hacky way to allow this in the meantime. If anything so we can iterate on the functionality while keeping clear that this isn't ready for prime time yet.

Thanks!
### Expected behavior
`module.exports = app.mount('body')` should work on the browser, with browsers APIs

### Actual behavior
Using fetch ends up in `fetch is not defined error` which dissappears when I change `module.exports = app.mount('body')` with `app.mount('body')`

### Steps to reproduce behavior
Run `npx create-choo-app some-app` and replace the main view with

```js
var html = require('choo/html')

module.exports = view
var readme
function view (state, emit) {
  if (!readme) {
    fetch('../README.md')
    .then(response => response.text())
    .then(text => {
      readme = text
      emit('render')
    })
  }
  return html`
    <body class="sans-serif pa3">
      ${readme || html`<h2>Loading...</h2>`}
    </body>
  `
}

```

Then run `npm start` and it will throw something like

```txt
ReferenceError: fetch is not defined
    at Choo.view [as _handler] (/home/yerko/Dev/choo-talk/views/main.js:8:5)
    at Choo._prerender (/home/yerko/Dev/choo-talk/node_modules/choo/index.js:235:18)
    at Choo.toString (/home/yerko/Dev/choo-talk/node_modules/choo/index.js:209:19)
    at Object.module.exports.render (/home/yerko/Dev/choo-talk/node_modules/bankai/ssr/choo.js:66:7)
    at ServerRender.render (/home/yerko/Dev/choo-talk/node_modules/bankai/ssr/index.js:28:39)
    at Array.renderApp (/home/yerko/Dev/choo-talk/node_modules/bankai/lib/graph-document.js:54:11)
    at module.exports (/home/yerko/Dev/choo-talk/node_modules/run-waterfall/index.js:24:13)
    at documentifyRoute (/home/yerko/Dev/choo-talk/node_modules/bankai/lib/graph-document.js:47:5)
    at push (/home/yerko/Dev/choo-talk/node_modules/map-limit/index.js:46:5)
    at flush (/home/yerko/Dev/choo-talk/node_modules/map-limit/index.js:32:7)
```

Fixes #645 
Rendering in Choo is a completely synchronous process, thought this makes things way simpler there are a few downsides from 2 perspectives:

- **CPU** - Rendering complex components might block the main loop affecting the overall experience 
- **I/O** - It's not possible to make the render wait for asynchronous I/O events such as data loading

I believe the later is the most relevant when it comes to SSR. One of the biggest issues of sync SSR is related to data loading and code-splitting. There are several workaround strategies to deal with async I/O on a sync rendering process, most of them require a first-pass render to load or collect something you can wait on and signal when the data is available to read synchronously. Besides being a waste of CPU cycles it's also not very elegant and adds unnecessary complexity to the code. One could just not have SSR but being able to have truly isomorphic or universal app is a requirement for most content-driven apps.

When I think of async rendering I think of composing the view using sync or async components and then one of two things can happen:

- Wait until all the components are resolved and then apply node diffing
- Apply node diffing as components resolve

Ideally both scenarios should be allowed, giving that choice to the developer, but I believe the first one is easier to start with given the current Choo architecture. Overall it should look somehow like this: 

```js
const h = require('choo/html')

const syncComponent = (state, emit) => h`
  <p>${state.label}</p>
`

const asyncComponent = async (state, emit) => {
  const data = await asyncDataFetch(state.id)
  return h`
    <p>${data}</p>
  `
}

const view = (state, emit) => h` 
  <div>
    ${syncComponent(state, emit)}
    ${asyncComponent(state, emit)}
  </div>
`
```

Given that there are a few necessary steps:
1. Make `_prerender` function on Choo await for the promise returned by the render to resolve 
2. Make `bel`/`nanohtml` also accept promises
3. Make `mount` `start`, `toString` methods on Choo async since they rely on `_prerender`

There are a few open-ended questions at the moment:
1. Error handling in general
2. What should happen when a `render` event is triggered within a render call
3. Possibly others and I would like to open that discussion to the community
