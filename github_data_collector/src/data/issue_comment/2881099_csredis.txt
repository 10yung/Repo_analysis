经测试RedisHelper.Lock这个上锁后，相同key被其它线程上锁会卡住阻塞很久，而RedisHelper.SetNx不会阻塞，具体是什么区别设计这两个呢？
运行一段时间，时不时就会报这个错
1、错误提示：输入字符串的格式不正确。

在 System.Number.StringToNumber(String str, NumberStyles options, NumberBuffer& number, NumberFormatInfo info, Boolean parseDecimal)     在 System.Number.ParseInt64(String value, NumberStyles options, NumberFormatInfo numfmt)     在 System.Int64.Parse(String s)     在 CSRedis.Internal.IO.RedisReader.ReadInt(Boolean checkType)     在 CSRedis.Internal.IO.RedisReader.ReadMultiBulk(Boolean checkType, Boolean bulkAsString)     在 CSRedis.Internal.Commands.RedisStatus.Nullable.Parse(RedisReader reader)     在 CSRedis.Internal.IO.RedisAsyncCommandToken`1.SetResult(RedisReader reader)     在 CSRedis.Internal.IO.AsyncConnector.OnSocketSent(SocketAsyncEventArgs args, Exception ex)  --- 引发异常的上一位置中堆栈跟踪的末尾 ---     在 System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()     在 System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)     在 System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)     在 System.Runtime.CompilerServices.TaskAwaiter.ValidateEnd(Task task)     在 System.Runtime.CompilerServices.TaskAwaiter`1.GetResult()     在 CSRedis.CSRedisClient.<SetAsync>d__492.MoveNext()  --- 引发异常的上一位置中堆栈跟踪的末尾 ---     在 System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()     在 System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)     在 System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)     在 System.Runtime.CompilerServices.TaskAwaiter.ValidateEnd(Task task)     在 System.Runtime.CompilerServices.TaskAwaiter`1.GetResult()  

2、错误提示：Redis Sentinel Master is switching：Unexpected response type: Status (expecting Bulk)

在 CSRedis.CSRedisClient.<GetAndExecuteAsync>d__329`1.MoveNext()  --- 引发异常的上一位置中堆栈跟踪的末尾 ---     在 System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()     在 System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)     在 System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)     在 System.Runtime.CompilerServices.TaskAwaiter.ValidateEnd(Task task)     在 System.Runtime.CompilerServices.TaskAwaiter`1.GetResult()     在 CSRedis.CSRedisClient.<ExecuteScalarAsync>d__335`1.MoveNext()  --- 引发异常的上一位置中堆栈跟踪的末尾 ---     在 System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()     在 System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)     在 System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)     在 System.Runtime.CompilerServices.TaskAwaiter.ValidateEnd(Task task)     在 System.Runtime.CompilerServices.TaskAwaiter`1.GetResult()

3、错误提示：状态不可用，等待后台检查程序恢复方可使用。Unexpected response type: Status (expecting Bulk)

在 SafeObjectPool.ObjectPool`1.getFree(Boolean checkAvailable)     在 SafeObjectPool.ObjectPool`1.Get(Nullable`1 timeout)     在 CSRedis.CSRedisClient.GetAndExecute[T](RedisClientPool pool, Func`2 handler, Int32 jump, Int32 errtimes)     在 CSRedis.CSRedisClient.ExecuteScalar[T](String key, Func`3 hander)     在 CSRedis.CSRedisClient.<SetAsync>d__492.MoveNext()  --- 引发异常的上一位置中堆栈跟踪的末尾 ---     在 System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()     在 System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)     在 System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)     在 System.Runtime.CompilerServices.TaskAwaiter.ValidateEnd(Task task)     在 System.Runtime.CompilerServices.TaskAwaiter`1.GetResult() 
集群模式时 连接到单个节点时 可以执行 scan ，在代码种提示 ，《由于开启了分区模式，无法使用此功能》，请问是否支持此功能？
如题

我目前直接在Nuget上引入的CSRedisCore3.3.0,如果支持的话在Global.asax的Application_Start里面进行初始化还要自己实现单例吗？
请问哨兵模式的读写都是使用的master服务器吗，还是读使用的是master，写使用的是slave， 如果不是那哨兵模式和读写分离怎么结合使用的呢
问题如上

服务器中，设置了Redis密码，就无法连接。

Redis环境测试如下：
1、由服务器内，Redis目录下redis-cli.exe进行连接，Set，提醒需要密码，auth密码之后，一切正常。
2、由Redis Desktop Manage，运行于服务器内部，通过127.0.0.1连接，分别测试密码与无密码，逻辑正常。
3、在本地，重复步骤2，ip地址改为远程，测试逻辑亦正常。
以上测试说明Redis的环境，密码的设置都是正确的。

但使用代码进行连接时，调用到Set方法，却报错如标题所示的错误。

奇怪的是，代码里面RedisCli.Auth()方法返回的是"OK"，且RedisCli.Connect()返回的是true，且以上两句运行之后，查看状态IsConnected状态，依然为true。但此时，只要进行Set方法调用，即报错。

以上放上简要封装的RedisHelper代码：
```
public class RedisHelper
{
private static RedisClient _RedisCli;
		private static RedisClient RedisCli
		{
			get
			{
				try
				{
					if (_RedisCli == null)
					{
						_RedisCli = new RedisClient(host: Configs.RedisHost, port: Configs.RedisPort);
						if (!string.IsNullOrWhiteSpace(Configs.RedisPwd))
							RedisCli.Auth(Configs.RedisPwd); //监测中，这一句返回值是"OK"

						if (_RedisCli.Connect(3000))
							WriteLog("Redis成功连接到主机！"); //调试中，Connect成功
						else
							WriteLogErr("连接到Redis主机失败！", null);
					}

					return _RedisCli;
				}
				catch (Exception ex)
				{
					WriteLogErr($"连接到Redis主机发生异常！当前连接信息【{Configs.RedisHost}:{Configs.RedisPort} ==> {Configs.RedisPwd ?? "没有密码"}】", ex);
					return null;
				}
			}
		}

public static void SetString(string key, string value, TimeSpan? timeSpan)
		{
			if (timeSpan.HasValue)
				RedisCli.Set(key, value, timeSpan.Value);
			else
				RedisCli.Set(key, value); //这里的set方法报异常，异常如标题所示
		}
}
```

在以上条件下，将服务器Redis的密码去掉，再将代码中的密码去掉，一切正常。**即没有密码都可以，用了密码似乎就不行。**

_服务器window server2016，redis版本3.2，.net版本4.7.2，非core环境。_
MGet在多线程环境，什么情况下会出现死锁