Typescript test (npm script `test-ts`) started to fail with these errors:

```
node_modules/@types/node/globals.d.ts(859,38): error TS2304: Cannot find name 'ReadonlySet'.
node_modules/@types/node/globals.d.ts(993,14): error TS2304: Cannot find name 'MapConstructor'.
node_modules/@types/node/globals.d.ts(998,25): error TS2693: 'Promise' only refers to a type, but is being used as a value here.
node_modules/@types/node/globals.d.ts(1002,14): error TS2304: Cannot find name 'SetConstructor'.
node_modules/@types/node/globals.d.ts(1012,18): error TS2304: Cannot find name 'WeakMapConstructor'.
node_modules/@types/node/globals.d.ts(1013,18): error TS2304: Cannot find name 'WeakSetConstructor'.
node_modules/@types/node/perf_hooks.d.ts(275,31): error TS2304: Cannot find name 'Map'.
node_modules/@types/node/stream.d.ts(24,35): error TS2304: Cannot find name 'Iterable'.
node_modules/@types/node/url.d.ts(94,38): error TS2304: Cannot find name 'Iterable'.
node_modules/@types/node/url.d.ts(95,106): error TS2304: Cannot find name 'Iterable'.
node_modules/@types/node/url.d.ts(108,17): error TS2339: Property 'iterator' does not exist on type 'SymbolConstructor'.
```

It is currently removed from travis test, but needs to be fixed & re-enabled.


**UPDATED**:

**What version of Ajv are you using? Does the issue happen if you use the latest version?**
Version 6.10.2

**Ajv options object**
{
    loadSchema: loadExternalSchema
}

```javascript
function loadExternalSchema (uri) {
	return jQuery.ajax(uri)
	     .then(function (res) {
                        ...
			return res;
	    });
}

```


**JSON Schema**
````json
"allOf": [
	{ "$ref": "http://adaptivecards.io/schemas/adaptive-card.json#/definitions/AdaptiveCard" }
]
````

When trying to create Ajv instance, **loadSchema** function is being called 2 times for adaptive cards' schema.  I cannot afford to make 2 ajax calls for the same refferenced schema. How can I avoid that?





Allow trailing dot. Check for octet count rather than string length.

Trailing dots in hostnames are valid, and also highly desirable in some contexts (e.g. DNS zone files).

Also, currently the validator is checking for string length of hostname, rather than the octet count. This is an edge case as few hostnames reach the limit, but technically incorrect. The fix is fairly straightforward and included here.

I have included tests for the length check, but the check for a domain that is too long is failing, as it appears that the validate function that is constructed for the tests bypasses the defined function `hostname()` in `lib/compile/formats.js` and instead simply uses native regex `test()` function. I couldn't troubleshoot this as it is all obfuscated in the generator in `lib/dotjs/validate.js`. I have left the failing test in here as it appears to be an issue with AJV testing itself, rather than the implementation.

<!--
Thank you for submitting a pull request to Ajv.

Before continuing, please read the guidelines:
https://github.com/epoberezkin/ajv/blob/master/CONTRIBUTING.md#pull-requests

If the pull request contains code please make sure there is an issue that we agreed to resolve (if it is a documentation improvement there is no need for an issue).

Please answer the questions below.
-->

**What issue does this pull request resolve?**
None, sorry. I didn't realise this was a requirement of submitting a pull request.

**What changes did you make?**
I updated the `format: hostname` regex to allow for trailing dots in hostnames. I also updated the `hostname()` function. Both in `lib/compile/formats.js`.

**Is there anything that requires more attention while reviewing?**
The failing test that I mentioned. The validation test it generated for me was:

```
function(data, dataPath, parentData, parentDataProperty, rootData) {
  'use strict';
  var vErrors = null;
  var errors = 0;

  if (typeof data === "number") { }
  if (errors === 0) {  
    if (typeof data === "string") {
      if (!formats.hostname.test(data) ) {  
        validate.errors = [ { keyword: 'format' ,
                              dataPath: (dataPath || '') + "" ,
                              schemaPath: '#/format' ,
                              params: { format:  'hostname'  }  ,
                              message: 'should match format "hostname"'  } ];
        return false;  
      }    
    }  
  }  
  validate.errors = vErrors;
  return errors === 0;
}
```

â€¦which as you can see only validates the regex using: `if (!formats.hostname.test(data) ) {` - maybe I just put my test cases in the wrong place, or maybe this is something more fundamental. I would have thought it should somehow call the `hostname()` function in `lib/compile/formats.js` instead.
This PR adds the `keywords` option to the Ajv options to add custom keywords, without having to call `addKeyword`.

**What issue does this pull request resolve?**
#1136

**What changes did you make?**
Add the keywords option to the Ajv options to add custom keywords, without having to call addKeyword.

**Is there anything that requires more attention while reviewing?**
No
Add the `keywords` option to the Ajv options to add custom keywords, without having to call `addKeyword`.

**What version of Ajv you are you using?**
6.10.2

**What problem do you want to solve?**
Add keywords object directly to the Ajv constructor, like formats.

```js
new Ajv({
  keywords: {
    constant: {
      validate: function (schema, data) {
        return true;
      }
    }
  }
});
```

**What do you think is the correct solution to problem?**
Copy the implementation of the `formats` option to add keywords.

**Will you be able to implement it?**
yes
<!--
Frequently Asked Questions: https://github.com/epoberezkin/ajv/blob/master/FAQ.md
Please provide all info and reduce your schema and data to the smallest possible size.

This template is for bug or error reports.
For other issues please see https://github.com/epoberezkin/ajv/blob/master/CONTRIBUTING.md
-->

**What version of Ajv are you using? Does the issue happen if you use the latest version?**
6.10.2


**Ajv options object**
NA.
This issue is with tests.

I clone the repo.
I install node 12.13.1 (LTS)
I run `npm install` and `git submodule update --init`.
I run `npm test`.

I get the following error logs...

<details><summary>.npm/_logs/2019-12-03T13_11_47_708Z-debug.log</summary>

```
0 info it worked if it ends with ok
1 verbose cli [
1 verbose cli   '/Users/bh7/.nvm/versions/node/v12.13.1/bin/node',
1 verbose cli   '/Users/bh7/.nvm/versions/node/v12.13.1/bin/npm',
1 verbose cli   'run',
1 verbose cli   'test-all'
1 verbose cli ]
2 info using npm@6.12.1
3 info using node@v12.13.1
4 verbose run-script [ 'pretest-all', 'test-all', 'posttest-all' ]
5 info lifecycle ajv@6.10.2~pretest-all: ajv@6.10.2
6 info lifecycle ajv@6.10.2~test-all: ajv@6.10.2
7 verbose lifecycle ajv@6.10.2~test-all: unsafe-perm in lifecycle true
8 verbose lifecycle ajv@6.10.2~test-all: PATH: [all the path stuff]
9 verbose lifecycle ajv@6.10.2~test-all: CWD: /Users/bh7/projects/JSON Schema/ajv
10 silly lifecycle ajv@6.10.2~test-all: Args: [
10 silly lifecycle   '-c',
10 silly lifecycle   'npm run test-ts && npm run test-cov && if-node-version 10 npm run test-browser'
10 silly lifecycle ]
11 silly lifecycle ajv@6.10.2~test-all: Returned: code: 1  signal: null
12 info lifecycle ajv@6.10.2~test-all: Failed to exec test-all script
13 verbose stack Error: ajv@6.10.2 test-all: `npm run test-ts && npm run test-cov && if-node-version 10 npm run test-browser`
13 verbose stack Exit status 1
13 verbose stack     at EventEmitter.<anonymous> (/Users/bh7/.nvm/versions/node/v12.13.1/lib/node_modules/npm/node_modules/npm-lifecycle/index.js:332:16)
13 verbose stack     at EventEmitter.emit (events.js:210:5)
13 verbose stack     at ChildProcess.<anonymous> (/Users/bh7/.nvm/versions/node/v12.13.1/lib/node_modules/npm/node_modules/npm-lifecycle/lib/spawn.js:55:14)
13 verbose stack     at ChildProcess.emit (events.js:210:5)
13 verbose stack     at maybeClose (internal/child_process.js:1021:16)
13 verbose stack     at Process.ChildProcess._handle.onexit (internal/child_process.js:283:5)
14 verbose pkgid ajv@6.10.2
15 verbose cwd /Users/bh7/projects/JSON Schema/ajv
16 verbose Darwin 17.7.0
17 verbose argv "/Users/bh7/.nvm/versions/node/v12.13.1/bin/node" "/Users/bh7/.nvm/versions/node/v12.13.1/bin/npm" "run" "test-all"
18 verbose node v12.13.1
19 verbose npm  v6.12.1
20 error code ELIFECYCLE
21 error errno 1
22 error ajv@6.10.2 test-all: `npm run test-ts && npm run test-cov && if-node-version 10 npm run test-browser`
22 error Exit status 1
23 error Failed at the ajv@6.10.2 test-all script.
23 error This is probably not a problem with npm. There is likely additional logging output above.
24 verbose exit [ 1, true ]
/Users/bh7/.npm/_logs/2019-12-03T13_11_47_708Z-debug.log (END)
```
</details>

<details><summary>.npm/_logs/2019-12-03T13_11_47_682Z-debug.log</summary>

```
0 info it worked if it ends with ok
1 verbose cli [
1 verbose cli   '/Users/bh7/.nvm/versions/node/v12.13.1/bin/node',
1 verbose cli   '/Users/bh7/.nvm/versions/node/v12.13.1/bin/npm',
1 verbose cli   'run',
1 verbose cli   'test-ts'
1 verbose cli ]
2 info using npm@6.12.1
3 info using node@v12.13.1
4 verbose run-script [ 'pretest-ts', 'test-ts', 'posttest-ts' ]
5 info lifecycle ajv@6.10.2~pretest-ts: ajv@6.10.2
6 info lifecycle ajv@6.10.2~test-ts: ajv@6.10.2
7 verbose lifecycle ajv@6.10.2~test-ts: unsafe-perm in lifecycle true
8 verbose lifecycle ajv@6.10.2~test-ts: PATH: [all the path stuff]
9 verbose lifecycle ajv@6.10.2~test-ts: CWD: /Users/bh7/projects/JSON Schema/ajv
10 silly lifecycle ajv@6.10.2~test-ts: Args: [
10 silly lifecycle   '-c',
10 silly lifecycle   'tsc --target ES5 --noImplicitAny --noEmit spec/typescript/index.ts'
10 silly lifecycle ]
11 silly lifecycle ajv@6.10.2~test-ts: Returned: code: 1  signal: null
12 info lifecycle ajv@6.10.2~test-ts: Failed to exec test-ts script
13 verbose stack Error: ajv@6.10.2 test-ts: `tsc --target ES5 --noImplicitAny --noEmit spec/typescript/index.ts`
13 verbose stack Exit status 1
13 verbose stack     at EventEmitter.<anonymous> (/Users/bh7/.nvm/versions/node/v12.13.1/lib/node_modules/npm/node_modules/npm-lifecycle/index.js:332:16)
13 verbose stack     at EventEmitter.emit (events.js:210:5)
13 verbose stack     at ChildProcess.<anonymous> (/Users/bh7/.nvm/versions/node/v12.13.1/lib/node_modules/npm/node_modules/npm-lifecycle/lib/spawn.js:55:14)
13 verbose stack     at ChildProcess.emit (events.js:210:5)
13 verbose stack     at maybeClose (internal/child_process.js:1021:16)
13 verbose stack     at Process.ChildProcess._handle.onexit (internal/child_process.js:283:5)
14 verbose pkgid ajv@6.10.2
15 verbose cwd /Users/bh7/projects/JSON Schema/ajv
16 verbose Darwin 17.7.0
17 verbose argv "/Users/bh7/.nvm/versions/node/v12.13.1/bin/node" "/Users/bh7/.nvm/versions/node/v12.13.1/bin/npm" "run" "test-ts"
18 verbose node v12.13.1
19 verbose npm  v6.12.1
20 error code ELIFECYCLE
21 error errno 1
22 error ajv@6.10.2 test-ts: `tsc --target ES5 --noImplicitAny --noEmit spec/typescript/index.ts`
22 error Exit status 1
23 error Failed at the ajv@6.10.2 test-ts script.
23 error This is probably not a problem with npm. There is likely additional logging output above.
24 verbose exit [ 1, true ]
```
</details>

I cursuary google suggested it could be a typescript issue.

I tried to re-run the tests having installed typescript 3. No joy.

(Please come find me on slack to discuss =] - Otherwise I'll likely find a reply weeks later...)
<!--
Frequently Asked Questions: https://github.com/epoberezkin/ajv/blob/master/FAQ.md
Please provide all info and reduce your schema and data to the smallest possible size.

This template is for change proposals.
For other issues please see https://github.com/epoberezkin/ajv/blob/master/CONTRIBUTING.md
-->

**What problem do you want to solve?**

https://github.com/epoberezkin/ajv/issues/182#issuecomment-219548557

**What do you think is the correct solution to problem?**

Option changing type validation. Check if these values are coercible to strings - with this option coercion should fail too

**Will you be able to implement it?**

Maybe

ajv v.6.10.2

In Typescript, it is impossible to use '$comment' option because it is not defined in ajv.d.ts:

const ajv = new Ajv({ '$comment': someFunction });

Typescript 3.6.3 compiler error:

Argument of type '{'$comment': (value: any, path: any, schema: any) => void; }' is not assignable to parameter of type 'Options'.
  Object literal may only specify known properties, and ''$comment'' does not exist in type 'Options'.

<!--
Frequently Asked Questions: https://github.com/epoberezkin/ajv/blob/master/FAQ.md
Please provide all info and reduce your schema and data to the smallest possible size.

This template is for change proposals.
For other issues please see https://github.com/epoberezkin/ajv/blob/master/CONTRIBUTING.md
-->

**What problem do you want to solve?**

- [ ] Optimise oneOf validation in case discriminator keyword is present by only validating the matching branch (currently all branches are validated)
- [ ] Apply defaults inside of oneOf in the presence of discriminator keyword (currently defaults inside oneOf are ignored)

The second can be addressed separately

**The solution requirements?**

- [ ] requires an option "discriminator" to enable "discriminator" keyword
- [ ] discriminator without oneOf should throw exception at schema compilation in strictKeywords mode, log warning and be ignored otherwise
- [ ] validate that each oneOf branch can only be valid for one discriminator value - TBC, possibly depending on strictKeywords or another option (i.e. that from validation result point of view discriminator remains no-op)
- [ ] apply defaults from the chosen oneOf branch
- [ ] tests:
  - [ ] that the current behaviour is not affected (i.e. all oneOf branches are validated in case discrimintator keyword is absent or present without an option/with option false and that the defaults in oneOf are ignored)
  - [ ] all the new behaviours


**Will you be able to implement it?**

Yes, with the right incentive :) PR is welcome.
This is more of a question than a proposal.

**What problem do you want to solve?**
I want to validate objects containing a bigint.

**What do you think is the correct solution to problem?**
Bigint instance could pass the validation against 'integer' type. This may sound weird as "regular" integer would also pass this validation, and in this way the "type" isn't really validated. But the JSON specifications do not impose a limit on the range of integers.

The other solution would be to extend the types to include BigInt.
Thanks for your answer.
