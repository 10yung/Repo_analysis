There are binaries for the client and server software on https://github.com/Shopify/toxiproxy/releases

However, there are no binaries for the arm platform.
Would it be possible to add binaries for the arm platform?
Hi,
I would like to install toxiproxy in RHEL 7.7 version and downloaded toxiproxy-server-linux-amd64
 from 2.1.4 release.

Could you please share the installation or execution steps for the same.

Need one more clarification like go should be installed for this or not ?

Thanks,
Shyam
I am trying to do a simple setup of using toxiproxy for 3rd party service APIs but running into an issue that I cant seem to resolve. I am running toxiproxy inside a container on my local machine and then trying to access the upstream service from the host. Here are the simple configurations

Run toxiproxy
```
docker run --expose 26379 --dns=8.8.8.8 -p 8474:8474 -p 26379:26379 -it shopify/toxiproxy
```

Create a simple proxy 
```
toxiproxy-cli create test-proxy -l 127.0.0.1:26379 -u api.box.com:443
```

Make sure proxy is created
```
toxiproxy-cli list
Name			Listen		Upstream		Enabled		Toxics
======================================================================================
test-proxy	127.0.0.1:26379	api.box.com:443		enabled		None
```

The `/etc/hosts` file on the host machine contains the following entry. 
```
127.0.0.1 api.box.com
```


Now when I try to access the upstream service from the host, the request fails with some SSL initiation error

```
curl -s -v -w 'Total: %{time_total}s\n' --header 'Host: api.box.com' https://api.box.com:26379/2.0/folders/0

*   Trying 127.0.0.1...
* TCP_NODELAY set
* Connected to api.box.com (127.0.0.1) port 26379 (#0)
* ALPN, offering h2
* ALPN, offering http/1.1
* successfully set certificate verify locations:
*   CAfile: /etc/ssl/cert.pem
  CApath: none
* TLSv1.2 (OUT), TLS handshake, Client hello (1):
* LibreSSL SSL_connect: SSL_ERROR_SYSCALL in connection to api.box.com:26379 
* Closing connection 0
Total: 0.014964s

```

I have already looked at the issue https://github.com/Shopify/toxiproxy/issues/175#issuecomment-301464691 but it seems that those steps are not valid if toxiproxy is running inside a container.

The issue does not go away even If I take the approach of using a different hostname for the call by doing the following:

Use `test1.box.com` as the hostname of the upstream service and put it in `/etc/hosts` of the host machine as
```
127.0.0.1 test1.box.com
```

And then doing a request from the host machine
```
curl -s -v -w 'Total: %{time_total}s\n' https://test1.box.com:26379/2.0/folders/0
*   Trying 127.0.0.1...
* TCP_NODELAY set
* Connected to tt.box.com (127.0.0.1) port 26379 (#0)
* ALPN, offering h2
* ALPN, offering http/1.1
* successfully set certificate verify locations:
*   CAfile: /etc/ssl/cert.pem
  CApath: none
* TLSv1.2 (OUT), TLS handshake, Client hello (1):
* LibreSSL SSL_connect: SSL_ERROR_SYSCALL in connection to tt.box.com:26379 
* Closing connection 0
Total: 0.009243s
```

Hi,
I would like to add metrics to allow RT monitoring, to allow automatic & manual test on remote servers verify that the traffic is actually passing through toxiproxy, verify that they stop, see clients connects and disconnects and so on.
I've been experimenting with the code and got something working, and would like to consult before I create a PR.

The functionality I added does as follows:

- added a /metrics endpoint that returns a map that describes the number of total messages per proxy.
- added a /events endpoint that returns a list of messages (proxy, client, upstream, event type and timestamp) for up to 20 minutes ago. A token is returned with each response that can be used in the next request to receive only unseen events.

The way I did it is by creating a `metrics` module, with a `RegisterEvent` method. In `proxy.go` I report when client connects, in `link.go` I report that a clients disconnects.

Things got trickier when trying to report messages. I used the fact that noop toxic is always present to report from there. The problem is that noop toxic doesn't have any context to its work, so I had to add `ProxyName` and `Upstream` to `NoopProxy`, and had to pass this information on to and from where it is created, namely `Link` and `ToxicStub`.

Does this make sense? In addition, I wasn't able to tell in `NoopProxy` which client sent a specific message. Any idea how can I do that?

Thanks!
I am able to connect my client to the proxy even if the upstream server socket is not accepting connections. This means I cannot test all my use cases (e.g. server is absent) because the proxy will accept the connection on behalf of the upstream. When I go to send data it errors, but I would rather the socket is not accepted if upstream is down.

An alternative would be if the upstream rule is disabled then the proxy does not accept connections for that rule.

Behaving in this manner would change the code in which the server accepts connections. During the acceptance, the server would either:

1. attempt a connection to upstream and refuse the client if that server could not be established, or 
2. verify the rules and if enabled was false it would reject the connection
Very small change. Pulling image by digest instead of tag to have a deterministic (and safer) build.

I'm using the latest alpine (https://hub.docker.com/layers/alpine/library/alpine/3.10.3/images/sha256-e4355b66995c96b4b468159fc5c7e3540fcef961189ca13fee877798649f531a)
I have kind of a unique situation that can use your help on.

In my environment we terminate TLS at a LB before it gets routed to my toxiproxy instance. Then toxiproxy tries to send to the downstream service over https, but I get the `Client sent an HTTP request to an HTTPS server.` error.

Basic layout:

Source -> HTTPS LB (TLS Terminated here) -> toxiproxy listening on 8080 -> Downstream HTTPS LB (TLS Terminated here) -> downstream listening on 5050

I can get past it by not pointing it to the downstream HTTPS LB, but I could only hit a single service then, and it would need to be reconfigured anytime a new deployment happens. Not very user friendly.

It seems that toxiproxy only send over TCP, and doesn't try to do https even if its over port 443. 

Is there any way I could get around this? Any ideas will be helpful. 
I found that the README didn't mention that you have to run `toxiproxy-server` and was stuck on this for awhile. This PR adds that you have to run `toxiproxy-server` as a step for the Mac OSX installation. As most of the other installation sections have you run the service.
Hi quick question 

Example:
create a proxy for an webapp like 
```
toxiproxy-cli create myapp -l localhost:7777 -u localhost:5555
toxiproxy-cli toxic add myapp -t bandwidth -n speed -a rate=500
```
Now when I run the webapp locally and point my browser at 
localhost:7777

the bandwidth rate it seems to limit only the download speed 
but not the upload speed 

Is it possible to limit also the upload speed using toxiproxy?
## What (proposal)
I'd like to get support of multiple upstream hosts in single proxy + definition of balancing strategy (at least round-robin and/or least/most-connected).

As of now (`v2.1.4`) there is no way how to specify multiple upstreams for single proxy at least in toxiproxy-cli and python toxiproxy client.


## Why (use-case)

My use-case uses toxiproxy to test the application's behaviour when introduced a toxics between the application and any of depending applications (all in kubernetes).
The way we introduce toxics w/o necessity of the application a change is to:
* run toxiproxy and load all proxies to the dependent applications
* force the application (app under test) to route via launched toxiproxy (via local linux `/etc/hosts` resolver)

Given the strategy it is clear that toxiproxy proxy binds same port as dependent app has/binds (no port translation in place). 

Here comes the trouble, there is the application which communicates with HA storage consisting of multiple hosts binding the same port (redis sentinel), for such case I'd like to create toxiproxy proxy with multiple upstreams to block none / all upstreams.

The current workaround I have is to use multiple toxiproxy instances, but it comes with additional orchestration cost.

Any suggestions how to deal with the scenario are welcome.
