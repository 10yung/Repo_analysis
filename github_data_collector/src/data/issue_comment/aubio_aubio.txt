Hi, 
I am considering writing a cross-platform software that will do pitch detection, among other things, and I was considering RtAudio as a libary for the audio input/output. (it seems more used than PortAudio, nowadays, and is more ubiquitous than JACK or ALSA, indeed) For the pitch detection, Aubio seems like a perfect choice. Does someone have an example program that plugs together RtAudio and Aubio? That would be quite handy.
Thank!
Like the title mention I wan't to increase the order of the biquad filter so the slope of the cutoff frequency gets steeper.
I looked through the files but could'nt find something.
Is it possible that i overlooked something or is there some workaround for this? 
i used to have the  same problem like #264 and it was solved by 
$ pip install git+https://git.aubio.org/aubio/aubio/

After aubio-0.5.0a0 installed, i tried running demo_pitch.py and get errors below while importing aubio:

  File "G:\PYTHON\python3.5.4\lib\site-packages\aubio\__init__.py", line 26, in <module>
    from ._aubio import __version__ as version
UnicodeDecodeError: 'utf-8' codec can't decode bytes in position 945-946: invalid continuation byte

Hi! I tried to search in the docs, but found nothing useful...
Is there a way to name the various mel coefficients that aubiomfcc returns?

Thanks
Currently unsigned ints are used for sample positions etc. which is enough if you analyze only a single song, but if you analyze live music you get an integer overflow after 2^32 / 44100 / 60 / 60 â‰ˆ 27 hours. So an build option (using defines?) to switch to longs would be cool.
Fixed some issue when I use docker to build aubio with emscripten.

Now we can use Docker to build WebAssembly module with :

```bash
docker run --rm -v $(pwd):/src trzeci/emscripten /bin/bash -c "./scripts/get_waf.sh && ./scripts/build_emscripten"
```
Hi all, 
following @piem suggestion i commented out line 36 in scripts/get_waf.sh

https://github.com/aubio/aubio/issues/205#issuecomment-522639386

Building process starts but get stuck on the last line. I wonder why the building script is apparently searching for VS compiler. Doesn't should be rely on MinGW64 provided by MSYS2 enviroment? 

Here's my console output

Live Machine@LiveMachine MINGW64 /home/livemachine/aubio
$ make
make[1]: Entering directory '/home/livemachine/aubio'
./scripts/get_waf.sh
/c/Users/Public/Documents/Wondershare/CreatorTemp/tmp.yqGtqC5yjn /home/livemachine/aubio
/c/Users/Public/Documents/Wondershare/CreatorTemp/tmp.yqGtqC5yjn/waf-2.0.17 /c/Users/Public/Documents/Wondershare/CreatorTemp/tmp.yqGtqC5yjn /home/livemachine/aubio
------> Executing code from the top-level wscript <-----
Configuring the project
Setting top to                           : C:/Users/Public/Documents/Wondershare/CreatorTemp/tmp.yqGtqC5yjn/waf-2.0.17
Setting out to                           : C:/Users/Public/Documents/Wondershare/CreatorTemp/tmp.yqGtqC5yjn/waf-2.0.17/build
Checking for program 'python'            : C:/msys64/mingw64/bin/python.exe
Waf: Entering directory `C:/Users/Public/Documents/Wondershare/CreatorTemp/tmp.yqGtqC5yjn/waf-2.0.17/build'
[1/1] Creating waf
-> preparing 'tmp-waf-2.0.17'
   adding waflib/Build.py as waflib/Build.py
   adding waflib/ConfigSet.py as waflib/ConfigSet.py
   adding waflib/Configure.py as waflib/Configure.py
   adding waflib/Context.py as waflib/Context.py
   adding waflib/Errors.py as waflib/Errors.py
   adding waflib/Logs.py as waflib/Logs.py
   adding waflib/Node.py as waflib/Node.py
   adding waflib/Options.py as waflib/Options.py
   adding waflib/Runner.py as waflib/Runner.py
   adding waflib/Scripting.py as waflib/Scripting.py
   adding waflib/Task.py as waflib/Task.py
   adding waflib/TaskGen.py as waflib/TaskGen.py
   adding waflib/Tools/__init__.py as waflib/Tools/__init__.py
   adding waflib/Tools/ar.py as waflib/Tools/ar.py
   adding waflib/Tools/asm.py as waflib/Tools/asm.py
   adding waflib/Tools/bison.py as waflib/Tools/bison.py
   adding waflib/Tools/c.py as waflib/Tools/c.py
   adding waflib/Tools/c_aliases.py as waflib/Tools/c_aliases.py
   adding waflib/Tools/c_config.py as waflib/Tools/c_config.py
   adding waflib/Tools/c_osx.py as waflib/Tools/c_osx.py
   adding waflib/Tools/c_preproc.py as waflib/Tools/c_preproc.py
   adding waflib/Tools/c_tests.py as waflib/Tools/c_tests.py
   adding waflib/Tools/ccroot.py as waflib/Tools/ccroot.py
   adding waflib/Tools/clang.py as waflib/Tools/clang.py
   adding waflib/Tools/clangxx.py as waflib/Tools/clangxx.py
   adding waflib/Tools/compiler_c.py as waflib/Tools/compiler_c.py
   adding waflib/Tools/compiler_cxx.py as waflib/Tools/compiler_cxx.py
   adding waflib/Tools/compiler_d.py as waflib/Tools/compiler_d.py
   adding waflib/Tools/compiler_fc.py as waflib/Tools/compiler_fc.py
   adding waflib/Tools/cs.py as waflib/Tools/cs.py
   adding waflib/Tools/cxx.py as waflib/Tools/cxx.py
   adding waflib/Tools/d.py as waflib/Tools/d.py
   adding waflib/Tools/d_config.py as waflib/Tools/d_config.py
   adding waflib/Tools/d_scan.py as waflib/Tools/d_scan.py
   adding waflib/Tools/dbus.py as waflib/Tools/dbus.py
   adding waflib/Tools/dmd.py as waflib/Tools/dmd.py
   adding waflib/Tools/errcheck.py as waflib/Tools/errcheck.py
   adding waflib/Tools/fc.py as waflib/Tools/fc.py
   adding waflib/Tools/fc_config.py as waflib/Tools/fc_config.py
   adding waflib/Tools/fc_scan.py as waflib/Tools/fc_scan.py
   adding waflib/Tools/flex.py as waflib/Tools/flex.py
   adding waflib/Tools/g95.py as waflib/Tools/g95.py
   adding waflib/Tools/gas.py as waflib/Tools/gas.py
   adding waflib/Tools/gcc.py as waflib/Tools/gcc.py
   adding waflib/Tools/gdc.py as waflib/Tools/gdc.py
   adding waflib/Tools/gfortran.py as waflib/Tools/gfortran.py
   adding waflib/Tools/glib2.py as waflib/Tools/glib2.py
   adding waflib/Tools/gnu_dirs.py as waflib/Tools/gnu_dirs.py
   adding waflib/Tools/gxx.py as waflib/Tools/gxx.py
   adding waflib/Tools/icc.py as waflib/Tools/icc.py
   adding waflib/Tools/icpc.py as waflib/Tools/icpc.py
   adding waflib/Tools/ifort.py as waflib/Tools/ifort.py
   adding waflib/Tools/intltool.py as waflib/Tools/intltool.py
   adding waflib/Tools/irixcc.py as waflib/Tools/irixcc.py
   adding waflib/Tools/javaw.py as waflib/Tools/javaw.py
   adding waflib/Tools/ldc2.py as waflib/Tools/ldc2.py
   adding waflib/Tools/lua.py as waflib/Tools/lua.py
   adding waflib/Tools/md5_tstamp.py as waflib/Tools/md5_tstamp.py
   adding waflib/Tools/msvc.py as waflib/Tools/msvc.py
   adding waflib/Tools/nasm.py as waflib/Tools/nasm.py
   adding waflib/Tools/nobuild.py as waflib/Tools/nobuild.py
   adding waflib/Tools/perl.py as waflib/Tools/perl.py
   adding waflib/Tools/python.py as waflib/Tools/python.py
   adding waflib/Tools/qt5.py as waflib/Tools/qt5.py
   adding waflib/Tools/ruby.py as waflib/Tools/ruby.py
   adding waflib/Tools/suncc.py as waflib/Tools/suncc.py
   adding waflib/Tools/suncxx.py as waflib/Tools/suncxx.py
   adding waflib/Tools/tex.py as waflib/Tools/tex.py
   adding waflib/Tools/vala.py as waflib/Tools/vala.py
   adding waflib/Tools/waf_unit_test.py as waflib/Tools/waf_unit_test.py
   adding waflib/Tools/winres.py as waflib/Tools/winres.py
   adding waflib/Tools/xlc.py as waflib/Tools/xlc.py
   adding waflib/Tools/xlcxx.py as waflib/Tools/xlcxx.py
   adding waflib/Utils.py as waflib/Utils.py
   adding waflib/__init__.py as waflib/__init__.py
   adding waflib/ansiterm.py as waflib/ansiterm.py
   adding waflib/extras/__init__.py as waflib/extras/__init__.py
   adding waflib/extras/c_emscripten.py as waflib/extras/c_emscripten.py
   adding waflib/fixpy2.py as waflib/fixpy2.py
   adding waflib/processor.py as waflib/processor.py
Waf: Leaving directory `C:/Users/Public/Documents/Wondershare/CreatorTemp/tmp.yqGtqC5yjn/waf-2.0.17/build'
'build' finished successfully (2.992s)
/c/Users/Public/Documents/Wondershare/CreatorTemp/tmp.yqGtqC5yjn /home/livemachine/aubio
/home/livemachine/aubio
'/c/Users/Public/Documents/Wondershare/CreatorTemp/tmp.yqGtqC5yjn/waf-2.0.17/waf' -> '/home/livemachine/aubio/waf'
make[1]: Leaving directory '/home/livemachine/aubio'
python waf configure --verbose --destdir /home/livemachine/aubio/build/dist --jobs 4
Info: current tree is not clean

 M scripts/get_waf.sh

Setting top to                           : C:/msys64/home/livemachine/aubio
Setting out to                           : C:/msys64/home/livemachine/aubio/build
Checking for 'msvc' (C compiler)         : 18:06:14 runner ['C:\\Program Files (x86)/Microsoft Visual Studio/Installer/vswhere.exe', '-products', '*', '-legacy', '-format', 'json']
18:06:14 runner ['cmd.exe', '/E:on', '/V:on', '/C', 'C:/msys64/home/livemachine/aubio/build/waf-print-msvc-1.bat']



Hello All i am trying to use below code and seeing it can only detect upto 2500 around Hz where i am playing 7000 or above hz can i know how to make sure i can get accurate value in any freq

```
import aubio
import numpy as num
import pyaudio
import wave

# PyAudio object.
p = pyaudio.PyAudio()

# Open stream.
stream = p.open(format=pyaudio.paFloat32,
    channels=1, rate=44100, input=True,
    frames_per_buffer=1024)

# Aubio's pitch detection.
pDetection = aubio.pitch("default", 2048,
    2048//2, 44100)
# Set unit.
pDetection.set_unit("Hz")
pDetection.set_silence(-40)

while True:

    data = stream.read(1024)
    samples = num.fromstring(data,
        dtype=aubio.float_type)
    pitch = pDetection(samples)[0]
    # Compute the energy (volume) of the
    # current frame.
    volume = num.sum(samples**2)/len(samples)
    # Format the volume output so that at most
    # it has six decimal numbers.
    volume = "{:.6f}".format(volume)

    print(pitch)
    print(volume)
```
I'm trying to download the framework for the latest 0.4.9 release but it's not at:

https://aubio.org/bin/
hi,

I am using aubionotes with aubio 0.4.9 on Linux to detect the pitch of a e-guitar. It works fine, except with low frequencies. When I play any note lower than 110Hz / midi note 45, it is not recognized. I guess it might be a setting of aubionotes, but I could not find anything fitting in the manual.

Is this a correct behaviour or is there a setting to change it?