Hi, 

I'm not exactly sure if this can be handled, but I'm struggling to find a way to have only one scheduler for my Play app that is deployed and replicated via Heroku.

I use the scheduler this way:
**Module.scala**
```scala
package fr.staycation

import com.google.inject.AbstractModule
import play.api.libs.concurrent.AkkaGuiceSupport
import play.api.{Configuration, Environment}

import fr.staycation.commons.scheduled.{TaskActor, TaskScheduler}


class Module(environment: Environment, conf: Configuration) extends AbstractModule with AkkaGuiceSupport {
  override def configure() = {
    bindActor[TaskActor]("task-actor")
    bind(classOf[TaskScheduler]).asEagerSingleton()
  }
}
```

**TaskScheduler**
```scala
package fr.staycation.commons.scheduled

import akka.actor.{ActorRef, ActorSystem}
import com.typesafe.akka.extension.quartz.QuartzSchedulerExtension
import com.typesafe.config.Config
import com.typesafe.scalalogging.StrictLogging
import javax.inject.{Inject, Named, Singleton}

import fr.staycation.commons.scheduled.Tasks._

import scala.concurrent.ExecutionContext


@Singleton
class TaskScheduler @Inject()(actorSystem: ActorSystem, @Named("task-actor") taskActor: ActorRef, config: Config)
  (implicit executionContext: ExecutionContext) extends StrictLogging {
    logger.info("Starting Scheduler...")
    val scheduler = QuartzSchedulerExtension.get(actorSystem)

    scheduler.schedule("ExpireBookings", taskActor, ExpireBookings)
    ...other schedules
}
```

And the `TaskActor` that handle Akka messages and execute jobs. 

Everything is working well with one instance of my app, but if I replicate it, the scheduler fire as many events as there are instances...

In [this part](https://github.com/enragedginger/akka-quartz-scheduler#why-not-use-othercomparabletool-instead) of the README, it says:

> Because it is an Actor which provides no "Singleton"-like guarantee, it becomes too easy for users to accidentally spin up multiple scheduler instances, each of which is backed by its own threadpool. Instead, with akka-quartz-scheduler we use Akka's Extension system which provides a plugin model – we guarantee only one Quartz Scheduler is ever spun up per ActorSystem

But it looks like there are 2 Actor systems running independently... Am I missing something, how can I synchronize my 2 instances so that the scheduler fires event only once ? 

Thanks ! 
We have a use-case where a step in a flow needs to wait for 3-5 days for an action to take place (We have a Graph of actors which are executed one after another). Similar to a business process, you might have steps that need to wait (like requesting an approval from a human etc).

Would you recommend akka-quartz-scheduler for this use-case? Also, if the application restarts after a crash, will akka-quartz-scheduler know what was the previous state? Or it will re-start all jobs? Is there any other mechanism to build a persistent scheduler?
I am using a scheduler for the my web service based on Play Framework 2.5. 
I want to implement a possibility for a horizontal scaling. Several instances will create several independent JobStores and will execute jobs much frequent. Quartz has a clustered execution mode which provides by a corresponding common job store.
Are there any ideas how to make this?
Bumping Play to 2.7.x forces bumping play-slick to 4.0.0… which depends on slick-hikaricp 3.3.0 which depends on HikariCP 3.2.0.

The latest akka-quartz-scheduler (1.8.0-akka-2.5.x) depends (via quartz 2.3.0) on HikariCP-java6 2.3.13 (which gets evicted).

Any attempt to run the app ends in a missing method or not class found, don’t remember which one exactly :/

Is there any non-surgical solution to that problem (i.e. other than shading)?... I see quartz hasn't been updated beyond 2.3.0 yet :(
Changes include:
+ Adding the next/previous firing time to the context message allowing users to retrieve next/previous firing time.
+ Test
+ Fixed some formatting inconsistencies
+ Doc cleanup
+ Made tests less sensitive.  I picked 500 ms since it's double the frequency of the max frequency of cron (per second)
Hi,

Should `QuartzSchedulerExtension` be made thread-safe?

My understanding is that Akka extensions must normally manage thread-safety internally. At the moment, I think that it is possible for concurrent access to `createSchedule` to result in a created schedule being lost if the reads, updates and writes occurring in `schedules += (name.toUpperCase -> quartzSchedule)` are interleaved - causing a subsequent call to `schedule` to fail.

Thanks,
-Dan
