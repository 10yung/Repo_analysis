What I used git up for:

- See if every branch is in a valid state.
- Valid means:
  - Nothing to stash
  - Remote / tracking branch is set correctly
  - No commit behind or in front

What rebase autostash does:

- Nagging about missing tracking branch and aborting.

So in general I do no longer get a sum up of all the problem to handle them but instead I get one problem after another which is so damn slowing down.

Would you recover working on this tool?
Shall I?
Are there other?
from https://github.com/aanand/git-up/issues/118#issuecomment-222141333

Please update README with a section explaining how recent git versions solved this problem 

Shell output:

```
Failed to rebase w&b onto origin/w&b
Here's what Git said:
/bin/sh: b: command not found
```

Changed PNG Badge to SVG and added Code Blocks

We just migrated to a github forked repo workflow and really miss git-up's "just do the right thing" mentality.
With multiple remotes, gitup just pulls from the immediate fork (origin), and not from upstream repo:

```
origin  git@github.com:bedge/ct-sdk.git (fetch)
origin  git@github.com:bedge/ct-sdk.git (push)
upstream        git@github.com:XXXX/ct-sdk.git (fetch)
upstream        git@github.com:XXXX/ct-sdk.git (push)
```

Any possibility that git-up could be adapted to optionally fetch form the upstream repo as well as just the origin?

When running `git up` in a submodule folder, the following error occurs:

```
Fetching origin
/usr/local/lib/ruby/gems/2.2.0/gems/grit-2.5.0/lib/grit/git.rb:120:in `read': Not a directory @ rb_sysopen - /Users/*****/SUBMODULE/.git/HEAD (Errno::ENOTDIR)
    from /usr/local/lib/ruby/gems/2.2.0/gems/grit-2.5.0/lib/grit/git.rb:120:in `fs_read'
    from /usr/local/lib/ruby/gems/2.2.0/gems/grit-2.5.0/lib/grit/ref.rb:64:in `current'
    from /usr/local/lib/ruby/gems/2.2.0/gems/grit-2.5.0/lib/grit/repo.rb:230:in `head'
    from /usr/local/lib/ruby/gems/2.2.0/gems/git-up-0.5.12/lib/git-up.rb:192:in `returning_to_current_branch'
    from /usr/local/lib/ruby/gems/2.2.0/gems/git-up-0.5.12/lib/git-up.rb:21:in `block (2 levels) in run'
    from /usr/local/lib/ruby/gems/2.2.0/gems/git-up-0.5.12/lib/git-up.rb:183:in `with_stash'
    from /usr/local/lib/ruby/gems/2.2.0/gems/git-up-0.5.12/lib/git-up.rb:20:in `block in run'
    from /usr/local/lib/ruby/gems/2.2.0/gems/grit-2.5.0/lib/grit/git.rb:90:in `with_timeout'
    from /usr/local/lib/ruby/gems/2.2.0/gems/git-up-0.5.12/lib/git-up.rb:19:in `run'
    from /usr/local/lib/ruby/gems/2.2.0/gems/git-up-0.5.12/bin/git-up:5:in `<top (required)>'
    from /usr/local/bin/git-up:23:in `load'
    from /usr/local/bin/git-up:23:in `<main>'
```

Problem: If you have stashed changes and run git-up on a clean working directory, your stashed changes will be applied at the end of the git-up script.

Expectation: My stashed changes will not be applied and stay stashed.

Possible fix: Name git-up's own stash operation and only pop the named stash.

```
$ git up
Fetching origin
From https://github.com/pusher/pusher-realtime-chat-widget
 x [deleted]         (none)     -> origin/master
   (refs/remotes/origin/HEAD has become dangling)
remote: Counting objects: 24, done.
remote: Total 24 (delta 7), reused 7 (delta 7), pack-reused 17
Unpacking objects: 100% (24/24), done.
   c341a41..044148e  gh-pages   -> origin/gh-pages
/var/lib/gems/2.1.0/gems/git-up-0.5.12/lib/git-up.rb:95:in `rebase_all_branches': undefined method `+' for nil:NilClass (NoMethodError)
    from /var/lib/gems/2.1.0/gems/git-up-0.5.12/lib/git-up.rb:22:in `block (3 levels) in run'
    from /var/lib/gems/2.1.0/gems/git-up-0.5.12/lib/git-up.rb:199:in `returning_to_current_branch'
    from /var/lib/gems/2.1.0/gems/git-up-0.5.12/lib/git-up.rb:21:in `block (2 levels) in run'
    from /var/lib/gems/2.1.0/gems/git-up-0.5.12/lib/git-up.rb:183:in `with_stash'
    from /var/lib/gems/2.1.0/gems/git-up-0.5.12/lib/git-up.rb:20:in `block in run'
    from /var/lib/gems/2.1.0/gems/grit-2.5.0/lib/grit/git.rb:90:in `with_timeout'
    from /var/lib/gems/2.1.0/gems/git-up-0.5.12/lib/git-up.rb:19:in `run'
    from /var/lib/gems/2.1.0/gems/git-up-0.5.12/bin/git-up:5:in `<top (required)>'
    from /usr/local/bin/git-up:23:in `load'
    from /usr/local/bin/git-up:23:in `<main>'

$ git status
On branch master
Your branch is based on 'origin/master', but the upstream is gone.
  (use "git branch --unset-upstream" to fixup)
nothing to commit, working directory clean
```

```
$ git up
Can't update your repo because it doesn't has any branches with tracking information.
```

I would love to be able to set something like `GIT_UP_TRY_ORIGINMASTER` that would try pulling from origin/master in this case.
