Hi there,

I was wondering if we could discuss trying to bump the version of `aruba` currently in use in `gli`

Ideally first bumping to `0.8.0` and then to `0.14.9`, from there supporting the latest `0.x` version.

The reason is that we're trying to get all gems which are large and using aruba using a `0.14.x` version where a lot of the bugfix and deprecation PR's are going in. As we're looking to release 1.0 of aruba in the near future.

If you could have a stab or let us know what we can do to help that would be great. It might be that the upgrade works flawlessly, if so that's awesome.

Try `0.8.0` and then `0.14.9` as the first two static upgrades would be my advice. Any other queries ask away I'll try help

Luke
Only tested in ruby 2.6.5p114 (2019-10-01 revision 67812)

bundle seems to assume "bin/"

the proper way to run (from app root) 

`bundle exec todo` 


Example:

```
$ cb help
GLOBAL OPTIONS
    --exporters=arg - List of exporters to transform the data (default: ["table", "stdout"])
    --help          - Show this message
    --version       - Display the program version
```
The default in the flag help output contains an array:
`default: ["table", "stdout"]`

However, when a user supplies this value they might think they need to supply ` ["table", "stdout"]`

Flag attribute is configured like so:
`flag [:exporters], desc: "List of exporters to transform the data", default_value: ['table','stdout'], type: Array
`

However, when a user is supplying the flag they would use `--exporters=table,stdout` and not `--exporters=['table','stdout']`

This is confusing for the user.  The default_value value should be a real world value that will be processed by the type conversion system of GLI. 

`default_value: "table,stdout"`
Would there be an easy way for either me or you and myself to implement mutually exclusive options so that either a `default_value: true` can be disabled when using an MEO, or another flag parameter that you list the options that are not to be used with it.
```bash
    desc 'Describe test here'
    arg_name 'Describe arguments to test here'
    command :test do |c|
      c.action do |global_options,options,args|
        puts "test command ran"
      end
      
      c.desc 'Test sub command t1'
      c.command :t1 do |t1|
        t1.action do |global_options,options,args|
          puts "t1 ran"
        end
      end

      c.desc 'Test sub command t2'
      c.command :t2 do |t2|
        t2.action do |global_options,options,args|
          puts "t2 ran"
        end
      end
    end
```
How can I show help for Test?

The implementation of `commands_from` is https://github.com/davetron5000/gli/blob/84c21131320168178077e9bfe03f51f0e28d361e/lib/gli/app.rb#L319 and is a simple `require`. If you call it from a class, it will create global scope, not local to where it was called from.
Hi, 

when I run the following code, I get
```
$ bundle exec ruby ./ecm.rb bar -v
ecm: version unknown
error: ecm: version unknown
```
It doesn't even print the defined version number. 
I was expecting to see `error: Unknown option -v`.  Is this a bug?

It prints the version number if you put `-v` _before_ the sub-command, as I expected:
```
$ bundle exec ruby ./ecm.rb -v bar
ecm.rb version 0.0.1
```

If a sub-command knows `-v`, you get it as a local option, as I expected:
```
$ bundle exec ruby ./ecm.rb foo -v
globals: {"version"=>false, :version=>false, "help"=>false, :help=>false}
options: {"v"=>true, :v=>true}
```

```ruby
#!/usr/bin/env ruby

require 'gli'
include GLI::App

program_desc 'A Command to test'
version '0.0.1'

subcommand_option_handling :normal
arguments :strict

desc 'foo command'
command :foo do |c|
  c.desc 'Verbose'
  c.switch :v

  c.action do |global_options, options, args|
    puts "globals: #{global_options}"
    puts "options: #{options}"
  end
end


desc 'bar command'
command :bar do |c|
  c.action do |global_options, options, args|
    puts "globals: #{global_options}"
    puts "options: #{options}"
  end
end

exit run(ARGV)
```
Hello guys 
How to create a sub-command for a flag, the subcommand might have command, flags and switches as well
```
# example 1
rubyfu --do-this1 --module MODULENAME --mod-lag --mod-switch 

# example 2
rubyfu --do-this1 --module COMMAND
```
  
I'm trying to write a subcommand with a stop switch (i.e. ` -- `) but GLI always spits out an error saying I've provided too many arguments:

```ruby
command :deploy do |d|
  d.command :exec do |subcmd|
    subcmd.desc '0-based instance index'
    subcmd.default_value 0
    subcmd.arg_name 'INSTANCE'
    subcmd.flag [:n, :instance], type: Fixnum

    subcmd.action do |global_options, options, args|
      # assumed one of these arguments would include the rest of the command
    end
  end
end
```

```
$> bin/executable deploy exec -n 0 -- ls
error: Too many arguments for command
```

What am I doing wrong?
584334b addresses the weirdness about rendering an actual newline instead of the escape sequence.

33c7871 adds `test-unit` as a dev dep so the first `bundle exec rake test` will work. Otherwise you get the following:

```
/Users/max/Dropbox/work/src/github.com/mbigras/gli/some_gli/test/test_helper.rb:1:in `require': cannot load such file -- test/unit (LoadError)
	from /Users/max/Dropbox/work/src/github.com/mbigras/gli/some_gli/test/test_helper.rb:1:in `<top (required)>'
	from /Users/max/Dropbox/work/src/github.com/mbigras/gli/some_gli/test/default_test.rb:1:in `require'
	from /Users/max/Dropbox/work/src/github.com/mbigras/gli/some_gli/test/default_test.rb:1:in `<top (required)>'
	from /Users/max/.rbenv/versions/2.2.2/lib/ruby/gems/2.2.0/gems/rake-12.0.0/lib/rake/rake_test_loader.rb:15:in `require'
	from /Users/max/.rbenv/versions/2.2.2/lib/ruby/gems/2.2.0/gems/rake-12.0.0/lib/rake/rake_test_loader.rb:15:in `block in <main>'
	from /Users/max/.rbenv/versions/2.2.2/lib/ruby/gems/2.2.0/gems/rake-12.0.0/lib/rake/rake_test_loader.rb:4:in `select'
	from /Users/max/.rbenv/versions/2.2.2/lib/ruby/gems/2.2.0/gems/rake-12.0.0/lib/rake/rake_test_loader.rb:4:in `<main>'
rake aborted!
Command failed with status (1)
/Users/max/.rbenv/versions/2.2.2/bin/bundle:23:in `load'
/Users/max/.rbenv/versions/2.2.2/bin/bundle:23:in `<main>'
Tasks: TOP => test
(See full trace by running task with --trace)
```

I could also rewrite the bootstrapped test case to use Minitest which might be better because then we don't need to add the dependency.

What do you think?