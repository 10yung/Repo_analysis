like in the callback function, 
```

            let rgb = palette.Vibrant._rgb;
            console.log(chalk.rgb(rgb[0],rgb[1],rgb[2],).underline('Vibrant'));
```

preview color instantly on terminal, this is quite useful for batch console operation
ERROR in node_modules/node-vibrant/lib/color.d.ts(19,9): error TS1086: An accessor cannot be declared in an ambient context.
node_modules/node-vibrant/lib/color.d.ts(20,9): error TS1086: An accessor cannot be declared in an ambient context.
node_modules/node-vibrant/lib/color.d.ts(21,9): error TS1086: An accessor cannot be declared in an ambient context.
node_modules/node-vibrant/lib/color.d.ts(22,9): error TS1086: An accessor cannot be declared in an ambient context.
node_modules/node-vibrant/lib/color.d.ts(23,9): error TS1086: An accessor cannot be declared in an ambient context.
node_modules/node-vibrant/lib/color.d.ts(24,9): error TS1086: An accessor cannot be declared in an ambient context.
node_modules/node-vibrant/lib/color.d.ts(25,9): error TS1086: An accessor cannot be declared in an ambient context.
node_modules/node-vibrant/lib/color.d.ts(37,9): error TS1086: An accessor cannot be declared in an ambient context.
node_modules/node-vibrant/lib/color.d.ts(38,9): error TS1086: An accessor cannot be declared in an ambient context.
I'm using vibrant in the browser and the images are on a different server than the one serving my app, actually they're Google Places photos. I tried in both loading a string or an <img> but I always got a Cross-Origin error. My browser is Firefox.

I think cross origin images is a common scenario, how do you make it work?

```
Cross-Origin Request Blocked:
The Same Origin Policy disallows reading the remote resource at
https://maps.googleapis.com/maps/api/place/js/PhotoService.G...
(Reason: CORS header ‘Access-Control-Allow-Origin’ missing).
```

Luca
Hi, I am getting this error with the example from the docs:

> in promise) TypeError: this.WorkerClass is not a constructor.

This is my code:

`        console.log(src);
        Vibrant.from(src).getPalette()
            .then((palette) => console.log(palette))`

I am using `React`.
I noted that icons are not supported:

```bash
Unsupported MIME type: image/x-icon
ERR TypeError: Cannot read property 'bitmap' of undefined
    at NodeImage.getWidth (/Users/josefranciscoverdugambin/Projects/microlink/splashy/node_modules/node-vibrant/lib/image/node.js:101:24)
    at NodeImage.ImageBase.scaleDown (/Users/josefranciscoverdugambin/Projects/microlink/splashy/node_modules/node-vibrant/lib/image/base.js:8:26)
    at Vibrant._process (/Users/josefranciscoverdugambin/Projects/microlink/splashy/node_modules/node-vibrant/lib/vibrant.js:22:15)
    at /Users/josefranciscoverdugambin/Projects/microlink/splashy/node_modules/node-vibrant/lib/vibrant.js:38:51
    at tryCatcher (/Users/josefranciscoverdugambin/Projects/microlink/splashy/node_modules/bluebird/js/release/util.js:16:23)
    at Promise._settlePromiseFromHandler (/Users/josefranciscoverdugambin/Projects/microlink/splashy/node_modules/bluebird/js/release/promise.js:512:31)
    at Promise._settlePromise (/Users/josefranciscoverdugambin/Projects/microlink/splashy/node_modules/bluebird/js/release/promise.js:569:18)
    at Promise._settlePromise0 (/Users/josefranciscoverdugambin/Projects/microlink/splashy/node_modules/bluebird/js/release/promise.js:614:10)
    at Promise._settlePromises (/Users/josefranciscoverdugambin/Projects/microlink/splashy/node_modules/bluebird/js/release/promise.js:694:18)
    at _drainQueueStep (/Users/josefranciscoverdugambin/Projects/microlink/splashy/node_modules/bluebird/js/release/async.js:138:12)
    at _drainQueue (/Users/josefranciscoverdugambin/Projects/microlink/splashy/node_modules/bluebird/js/release/async.js:131:9)
    at Async._drainQueues (/Users/josefranciscoverdugambin/Projects/microlink/splashy/node_modules/bluebird/js/release/async.js:147:5)
    at Immediate.Async.drainQueues [as _onImmediate] (/Users/josefranciscoverdugambin/Projects/microlink/splashy/node_modules/bluebird/js/release/async.js:17:14)
    at runCallback (timers.js:705:18)
    at tryOnImmediate (timers.js:676:5)
    at processImmediate (timers.js:658:5)
```

That's okay but could be possible to avoid print the message in the terminal?

Also, ideally need a way to avoid the error, just failing silently, I mean, if it's not possible to resolve the icon, then return an empty object for following the workflow and avoid break the code.
I already have a canvas and currently convert it into a base64 png, give it to vibrant and it then draws it on a canvas once more. This seems a bit redundant.
I'm looking to something like this:

`Vibrant.from(['path/to/image1', 'path/to/image2']).getPalette((err, palette) => console.log(palette))`
Is there a way to read from a base64 encoded image string?
I would like to specify the region in pixels to sample in eg (x, y, width, height) of a square, then I would the dominant color for that region?
Any potential of enhancing the library to take a list of images? I have some video thumbs, and it would be interesting to get the primary colors that are in all of them images.

I could do it with more work by adding the images to a canvas and then transferring that to an img tag. Or creating a stitched image, but it'd be nice if the library could handle it.