### What does this PR do?

Throw an error instead of panic when the service definition is invalid.

```
Stack: goroutine 38 [running]:
runtime/debug.Stack(0xc0000e8000, 0x25581e1, 0x17)
	/usr/local/go/src/runtime/debug/stack.go:24 +0x9d
github.com/containous/traefik/v2/pkg/safe.defaultRecoverGoroutine(0x210c480, 0x3fbcdb0)
	/go/src/github.com/containous/traefik/pkg/safe/routine.go:160 +0xb1
github.com/containous/traefik/v2/pkg/safe.OperationWithRecover.func1.1(0xc00022fd78)
	/go/src/github.com/containous/traefik/pkg/safe/routine.go:168 +0x56
panic(0x210c480, 0x3fbcdb0)
	/usr/local/go/src/runtime/panic.go:679 +0x1b2
github.com/containous/traefik/v2/pkg/provider/docker.(*Provider).addServer(0xc00014d2d0, 0x29b4960, 0xc00067cc00, 0xc000616300, 0x40, 0xc000647535, 0xb, 0xc000647535, 0xb, 0xc00067c4b0, ...)
	/go/src/github.com/containous/traefik/pkg/provider/docker/config.go:184 +0x116
github.com/containous/traefik/v2/pkg/provider/docker.(*Provider).buildServiceConfiguration(0xc00014d2d0, 0x29b4960, 0xc00067cab0, 0xc000616300, 0x40, 0xc000647535, 0xb, 0xc000647535, 0xb, 0xc00067c4b0, ...)
	/go/src/github.com/containous/traefik/pkg/provider/docker/config.go:113 +0x1dd
github.com/containous/traefik/v2/pkg/provider/docker.(*Provider).buildConfiguration(0xc00014d2d0, 0x29b4960, 0xc0001f2de0, 0xc000653440, 0x2, 0x2, 0x2)
	/go/src/github.com/containous/traefik/pkg/provider/docker/config.go:52 +0x5e0
github.com/containous/traefik/v2/pkg/provider/docker.(*Provider).Provide.func1.1(0x0, 0x0)
	/go/src/github.com/containous/traefik/pkg/provider/docker/docker.go:193 +0x657
github.com/containous/traefik/v2/pkg/safe.OperationWithRecover.func1(0x0, 0x0)
	/go/src/github.com/containous/traefik/pkg/safe/routine.go:172 +0x6c
github.com/cenkalti/backoff/v3.RetryNotify(0xc0001f7920, 0x29729e0, 0xc0003f89a0, 0xc00022fef0, 0x0, 0x0)
	/go/pkg/mod/github.com/cenkalti/backoff/v3@v3.0.0/retry.go:37 +0xb8
github.com/containous/traefik/v2/pkg/provider/docker.(*Provider).Provide.func1(0x29b48a0, 0xc0003d2d40)
	/go/src/github.com/containous/traefik/pkg/provider/docker/docker.go:293 +0x2d6
github.com/containous/traefik/v2/pkg/safe.(*Pool).GoCtx.func1()
	/go/src/github.com/containous/traefik/pkg/safe/routine.go:63 +0x84
github.com/containous/traefik/v2/pkg/safe.GoWithRecover.func1(0x2633df8, 0xc0003f8980)
	/go/src/github.com/containous/traefik/pkg/safe/routine.go:153 +0x57
created by github.com/containous/traefik/v2/pkg/safe.GoWithRecover
	/go/src/github.com/containous/traefik/pkg/safe/routine.go:147 +0x49
```

### Motivation

Fixes #6197

### More

- [x] Added/updated tests
- ~~[ ] Added/updated documentation~~


### What did you do?

Hi,
I don't know if this know. I had catch this  by accident (syntax error in cli).

too short traefik related label `traefik.http.services.test`

### What did you expect to see?

A simple error message.

### What did you see instead?

panic

### Output of `traefik version`: (_What version of Traefik are you using?_)

```
v2.1.2
```

### What is your environment & configuration (arguments, toml, provider, platform, ...)?

When playing with traefik started by this command:

```bash
docker pull traefik:2.1
docker run --rm -v /var/run/docker.sock:/var/run/docker.sock \
  traefik:2.1 \
  --providers.docker \
  --providers.docker.exposedbydefault=false \
  --entrypoints.http.address=:80 \
  --entrypoints.https.address=:443
```

I started this command:
```bash
docker run --rm \
  -l 'traefik.http.routers.test.rule=Host(`test`)' \
  -l traefik.http.services.test \
  -l traefik.enable=true \
  containous/whoami
```

### If applicable, please paste the log output in DEBUG level (`--log.level=DEBUG` switch)

I was flooded by this error log:
```
time="2020-01-19T00:10:15Z" level=error msg="Error in Go routine: runtime error: invalid memory address or nil pointer dereference"
time="2020-01-19T00:10:15Z" level=error msg="Stack: goroutine 38 [running]:\nruntime/debug.Stack(0xc0000e8000, 0x25581e1, 0x17)\n\t/usr/local/go/src/runtime/debug/stack.go:24 +0x9d\ngithub.com/containous/traefik/v2/pkg/safe.defaultRecoverGoroutine(0x210c480, 0x3fbcdb0)\n\t/go/src/github.com/containous/traefik/pkg/safe/routine.go:160 +0xb1\ngithub.com/containous/traefik/v2/pkg/safe.OperationWithRecover.func1.1(0xc00022fd78)\n\t/go/src/github.com/containous/traefik/pkg/safe/routine.go:168 +0x56\npanic(0x210c480, 0x3fbcdb0)\n\t/usr/local/go/src/runtime/panic.go:679 +0x1b2\ngithub.com/containous/traefik/v2/pkg/provider/docker.(*Provider).addServer(0xc00014d2d0, 0x29b4960, 0xc00067cc00, 0xc000616300, 0x40, 0xc000647535, 0xb, 0xc000647535, 0xb, 0xc00067c4b0, ...)\n\t/go/src/github.com/containous/traefik/pkg/provider/docker/config.go:184 +0x116\ngithub.com/containous/traefik/v2/pkg/provider/docker.(*Provider).buildServiceConfiguration(0xc00014d2d0, 0x29b4960, 0xc00067cab0, 0xc000616300, 0x40, 0xc000647535, 0xb, 0xc000647535, 0xb, 0xc00067c4b0, ...)\n\t/go/src/github.com/containous/traefik/pkg/provider/docker/config.go:113 +0x1dd\ngithub.com/containous/traefik/v2/pkg/provider/docker.(*Provider).buildConfiguration(0xc00014d2d0, 0x29b4960, 0xc0001f2de0, 0xc000653440, 0x2, 0x2, 0x2)\n\t/go/src/github.com/containous/traefik/pkg/provider/docker/config.go:52 +0x5e0\ngithub.com/containous/traefik/v2/pkg/provider/docker.(*Provider).Provide.func1.1(0x0, 0x0)\n\t/go/src/github.com/containous/traefik/pkg/provider/docker/docker.go:193 +0x657\ngithub.com/containous/traefik/v2/pkg/safe.OperationWithRecover.func1(0x0, 0x0)\n\t/go/src/github.com/containous/traefik/pkg/safe/routine.go:172 +0x6c\ngithub.com/cenkalti/backoff/v3.RetryNotify(0xc0001f7920, 0x29729e0, 0xc0003f89a0, 0xc00022fef0, 0x0, 0x0)\n\t/go/pkg/mod/github.com/cenkalti/backoff/v3@v3.0.0/retry.go:37 +0xb8\ngithub.com/containous/traefik/v2/pkg/provider/docker.(*Provider).Provide.func1(0x29b48a0, 0xc0003d2d40)\n\t/go/src/github.com/containous/traefik/pkg/provider/docker/docker.go:293 +0x2d6\ngithub.com/containous/traefik/v2/pkg/safe.(*Pool).GoCtx.func1()\n\t/go/src/github.com/containous/traefik/pkg/safe/routine.go:63 +0x84\ngithub.com/containous/traefik/v2/pkg/safe.GoWithRecover.func1(0x2633df8, 0xc0003f8980)\n\t/go/src/github.com/containous/traefik/pkg/safe/routine.go:153 +0x57\ncreated by github.com/containous/traefik/v2/pkg/safe.GoWithRecover\n\t/go/src/github.com/containous/traefik/pkg/safe/routine.go:147 +0x49\n"
time="2020-01-19T00:10:15Z" level=error msg="Provider connection error panic in operation: %!s(<nil>), retrying in 10.183428799s" providerName=docker
```



### What does this PR do?

Adds an explanation of the global redirection pattern.

### Motivation

Have better documentation.

### More

- ~~[ ] Added/updated tests~~
- [x] Added/updated documentation

# What does this PR do?

The tip to use htpasswd was not very clear. You have to encode the result to base64. Adding an example command.

### Motivation

Make it easier to use basic auth and generate a base64 encoded string.


### More

- [x] Added/updated documentation

# Do you want to request a *feature* or report a *bug*?

Feature

## What did you expect to see?
Would it be possible to have a prefer own subnet load balancing first. This is mainly interesting for hosting where there is a costs to go across subnet/availability zones (i.e. GCP and AWS).

So when traffic arrives at the edge, traefik picks the subnet that the traefik instance is already hosted within.

As an example consul does this with it's preferred queries where you can indicate that DNS lookups should first resolve the local agent.



<!-- PLEASE FOLLOW THE ISSUE TEMPLATE TO HELP TRIAGE AND SUPPORT! -->

### Do you want to request a *feature* or report a *bug*?

<!--
DO NOT FILE ISSUES FOR GENERAL SUPPORT QUESTIONS.

The issue tracker is for reporting bugs and feature requests only.
For end-user related support questions, please refer to one of the following:

- the Traefik community forum: https://community.containo.us/

-->

Feature

### What did you expect to see?

<!--

HOW TO WRITE A GOOD ISSUE?

- Respect the issue template as much as possible.
- The title should be short and descriptive.
- Explain the conditions which led you to report this issue: the context.
- The context should lead to something, an idea or a problem that youâ€™re facing.
- Remain clear and concise.
- Format your messages to help the reader focus on what matters and understand the structure of your message, use Markdown syntax https://help.github.com/articles/github-flavored-markdown

-->

This is a feature request for the Docker provider (without Swarm Mode).

When enabling `UseBindPortIP`, as per the [documentation](https://docs.traefik.io/providers/docker/#port-detection), the first port in the Docker API response is chosen. Then there's the [`traefik.http.services.myservice.loadbalancer.server.port`](https://docs.traefik.io/routing/providers/docker/#port) option which allows you to inform Traefik what port to use for a server. _Without_ `UseBindPortIP`, it makes sense that the resulting Traefik server will simply use the port given in the `server.port` option. The documentation says,

> Registers a port. Useful when the container exposes multiples ports. Mandatory for Docker Swarm (see the section ["Port Detection with Docker Swarm"](https://docs.traefik.io/providers/docker/#port-detection_1)).

, however it is not clear from that how Traefik is expected to behave when `UseBindPortIP` is enabled. I would have thought the host port to be used, and the `server.port` option just helping Traefik to choose the right one based on the container port that matches the `server.port` option.

I realise such a change would maybe be considered breaking as people may have relied on the current behaviour in Traefik 2.0+, but on the other hand there is currently no way to help Traefik choose the right port when there are multiple.

I'm not sure if this is really a bug like #3622 was for pre 2.0.
<!--
PLEASE READ THIS MESSAGE.

Documentation fixes or enhancements:
- for Traefik v1: use branch v1.7
- for Traefik v2: use branch v2.1

Bug fixes:
- for Traefik v1: use branch v1.7
- for Traefik v2: use branch v2.1

Enhancements:
- for Traefik v1: we only accept bug fixes
- for Traefik v2: use branch master

HOW TO WRITE A GOOD PULL REQUEST? https://docs.traefik.io/contributing/submitting-pull-requests/

-->

### What does this PR do?

Converts this
![before](https://user-images.githubusercontent.com/4923699/70716956-0a62c880-1cf6-11ea-8b56-cfb3b8fabb03.png)
to this
(I've also added a "long" auth middleware to be more revealing)
![after](https://user-images.githubusercontent.com/4923699/70719462-b8707180-1cfa-11ea-8b3e-89a9d677f816.png)

In other words, my PR makes middleware span to display only time when middleware is processing, not all nested middleware and forward spans.

### Motivation

To display correct span times in tracing UI

### More

- [ ] ~Added/updated tests~
- [ ] ~Added/updated documentation~ (not needed)


### What did you do?

I'm using consul and traefik to have a default rule for routing to a specific service.  
According to the docs https://docs.traefik.io/providers/consul-catalog/#defaultrule the `{{ .Name }}` should be the service name, but this does not seem to be the case.


### What did you expect to see?
In the traefik web ui the rule should be using the service name for `Host` i.e.: `Host(demo-webapp)`


### What did you see instead?
The rule for the service shows `Host(<no value>)`


### Output of `traefik version`: (_What version of Traefik are you using?_)
`V2.1.2`

### What is your environment & configuration (arguments, toml, provider, platform, ...)?

```toml
[api]
  insecure = true
  dashboard = true
[entryPoints]
  [entryPoints.web]
    address = ":80"
# Enable Consul Catalog configuration backend.
[providers.consulCatalog]
  defaultRule = "Host(`{{ .Name }}`)"
  [providers.consulCatalog.endpoint]
    address = "http://127.0.0.1:8500"
```


<!--
PLEASE READ THIS MESSAGE.

Documentation fixes or enhancements:
- for Traefik v1: use branch v1.7
- for Traefik v2: use branch v2.1

Bug fixes:
- for Traefik v1: use branch v1.7
- for Traefik v2: use branch v2.1

Enhancements:
- for Traefik v1: we only accept bug fixes
- for Traefik v2: use branch master

HOW TO WRITE A GOOD PULL REQUEST? https://docs.traefik.io/contributing/submitting-pull-requests/

-->

### What does this PR do?

This PR adds limited support for UDP networking in Traefik.
Limited because:
- No TLS for now, which means
- No routing rule, since there is no criterion on which to match packets (there is no PathPrefix notion since there are no requests at the transport layer level, and no HostSNI since no TLS). Which means it's pretty much only load-balancing in one form or another at the moment.
- file provider only for now.

Remark: we adopted the docker syntax to distinguish TCP (HTTP) VS UDP for the entrypoints configuration:

```toml
[entryPoints]
  [entryPoints.udp]
    address = ":8093/udp"
  [entryPoints.http]
    address = ":8093" # same as ":8093/tcp"
```

<!-- A brief description of the change being made with this pull request. -->

### Motivation

<!-- What inspired you to submit this pull request? -->

Addresses #5048 

### More

- [x] Added/updated tests
- [x] Added/updated documentation

### Additional Notes

<!-- Anything else we should know when reviewing? -->

Co-authored-by: Julien Salleyron <julien.salleyron@gmail.com>

<!-- PLEASE FOLLOW THE ISSUE TEMPLATE TO HELP TRIAGE AND SUPPORT! -->

### Do you want to request a *feature* or report a *bug*?

<!--
DO NOT FILE ISSUES FOR GENERAL SUPPORT QUESTIONS.

The issue tracker is for reporting bugs and feature requests only.
For end-user related support questions, please refer to one of the following:

- the Traefik community forum: https://community.containo.us/

-->

Bug

<!--

The configurations between 1.X and 2.X are NOT compatible.
Please have a look here https://docs.traefik.io/v2.0/getting-started/configuration-overview/.

-->

### What did you do?

I set respondingTimeout in traefik static config and I get different status code while the request time exceed the timeout for scenarios bellow:

buffer middleware enabled
without buffer middleware

<!--

HOW TO WRITE A GOOD BUG REPORT?

- Respect the issue template as much as possible.
- The title should be short and descriptive.
- Explain the conditions which led you to report this issue: the context.
- The context should lead to something, an idea or a problem that youâ€™re facing.
- Remain clear and concise.
- Format your messages to help the reader focus on what matters and understand the structure of your message, use Markdown syntax https://help.github.com/articles/github-flavored-markdown

-->

### What did you expect to see?

I expected to have same HTTP status for those scenarios not 500 status code.


### What did you see instead?

buffer middleware enabled -> 500
without buffer middleware -> 502/504 (it seems for HTTP 1.1 requests 504, for HTTP 2.0 requests 502)

### Output of `traefik version`: (_What version of Traefik are you using?_)

<!--
`latest` is not considered as a valid version.

For the Traefik Docker image:
    docker run [IMAGE] version
    ex: docker run traefik version

-->

```
Traefik v2.1.2
```

### What is your environment & configuration (arguments, toml, provider, platform, ...)?

```yaml
log:
  level: INFO
providers:
  docker: {}
entrypoints:
  web:
    address: ":80"
    transport:
      respondingTimeouts:
        readTimeout: "20s"
        writeTimeout: "20s"
        idleTimeout: 30
  web-secur:
    address: ":443"
    transport:
      respondingTimeouts:
        readTimeout: "20s"
        writeTimeout: "20s"
        idleTimeout: 30
accessLog: {}
```

<!--
Add more configuration information here.
-->


### If applicable, please paste the log output in DEBUG level (`--log.level=DEBUG` switch)

```
10.0.0.4 - - [12/Jan/2020:08:13:37 +0000] "POST /api/log/v2 HTTP/2.0" 500 21 "-" "-" 9528165 "to-apiservice-location@file" - 20000ms
```
