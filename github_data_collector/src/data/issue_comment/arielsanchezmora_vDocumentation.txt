I found a way to get QLogic/Emulex HBA firmware version without SSH (https://kb.vmware.com/s/article/1002413)

Comment line 343 to 357 (_Get-ESXIODevice.ps1_)
` 
if ($pciDevice.DeviceName -match "smart array") {
	Write-Verbose -Message ((Get-Date -Format G) + "`tGet Firmware version for: " + $pciDevice.VMKernelName)
	$hpsa = $esxiHost.ExtensionData.Runtime.HealthSystemRuntime.SystemHealthInfo.NumericSensorInfo | Where-Object {$_.Name -match "HP Smart Array"}
	if ($hpsa) {
		$firmwareVersion = (($hpsa.Name -split "firmware")[1]).Trim()
	}
	else {
		Write-Verbose -Message ((Get-Date -Format G) + "`tGet Extension data failed. Skip Firmware version check for: " + $pciDevice.DeviceName)
		$firmwareVersion = $null    
	} #END if/else
}
else {
	Write-Verbose -Message ((Get-Date -Format G) + "`tSkip Firmware version check for: " + $pciDevice.DeviceName)
	$firmwareVersion = $null    
} #END if/else
`

**Add/Replace by :**
`
Write-Verbose -Message ((Get-Date -Format G) + "`tGet Firmware version for: " + $pciDevice.VMKernelName)
$vmbhaDetail = $esxcli.storage.san.fc.list.invoke() | where {$_.Adapter -match $($pciDevice.VMKernelName)}
$firmwareVersion = $vmbhaDetail.FirmwareVersion
`

Tested on ESXi 6.7 U2/3 with PowerCLI 6.5 Release 1 build 4624819

Version          : ESXi 6.7 U3
Model            : ProLiant BL460c Gen9
Slot Description : Mezzanine Slot 1
VMKernel Name    : **vmhba2**
Device Name      : 2600 Series 16Gb Fibre Channel to PCI Express HBA
Vendor Name      : QLogic Corp
Device Class     : Fibre Channel
PCI Address      : 0000:09:00.1
VID              : 1077
DID              : 2031
SVID             : 103c
SSID             : 1939
VIB Name         : qlnativefc
Driver           : qlnativefc
Driver Version   : 3.1.16.0-1OEM.670.0.0.8169922
Firmware Version : **8.08.203 (d0d5)**

Version          : ESXi 6.7 U2
Model            : ProLiant BL460c Gen9
Slot Description : Mezzanine Slot 2
VMKernel Name    : **vmhba2**
Device Name      : Emulex OneConnect OCe14000, FCoE Initiator
Vendor Name      : Emulex Corporation
Device Class     : Fibre Channel
PCI Address      : 0000:87:00.2
VID              : 10df
DID              : 0724
SVID             : 103c
SSID             : 1934
VIB Name         : brcmfcoe
Driver           : brcmfcoe
Driver Version   : 12.0.1211.0-1OEM.670.0.0.8169922
Firmware Version : **12.0.1216.0**
This breaks the -PassThru option adding text into the output breaking the intent of the output object.

If you do this I can create cool things like this:
![ReportCardPS_vDocumentation](https://user-images.githubusercontent.com/14152037/58827736-b9b93700-8611-11e9-95fa-329e2a42f257.PNG)

While running Get-ESXInventory against a VCSA from my macOS running PSCore 6.0 and PowerCLI 11, I am getting multiple errors.

```powershell
Get-VMHostHardware : Cmdlet Get-VMHostHardware is not supported on PowerShell Core.
At /usr/local/share/powershell/Modules/vDocumentation/2.4.4/Public/Get-ESXInventory.ps1:290 char:35
+         $hostHardware = $vmhost | Get-VMHostHardware -WaitForAllData  ...
+                                   ~~~~~~~~~~~~~~~~~~
+ CategoryInfo          : NotSpecified: (:) [], PlatformNotSupportedException
+ FullyQualifiedErrorId : System.PlatformNotSupportedException
```

```powershell
New-CimSessionOption : The term 'New-CimSessionOption' is not recognized as the name of a cmdlet, function, script file, or operable program.
Check the spelling of the name, or if a path was included, verify that the path is correct and try again.
At /usr/local/share/powershell/Modules/vDocumentation/2.4.4/Public/Get-ESXInventory.ps1:308 char:23
+             $cimOpt = New-CimSessionOption -SkipCACheck -SkipCNCheck  ...
+                       ~~~~~~~~~~~~~~~~~~~~
+ CategoryInfo          : ObjectNotFound: (New-CimSessionOption:String) [], CommandNotFoundException
+ FullyQualifiedErrorId : CommandNotFoundException
```

```powershell
New-CimSession : The term 'New-CimSession' is not recognized as the name of a cmdlet, function, script file, or operable program.
Check the spelling of the name, or if a path was included, verify that the path is correct and try again.
At /usr/local/share/powershell/Modules/vDocumentation/2.4.4/Public/Get-ESXInventory.ps1:309 char:24
+             $session = New-CimSession -Authentication Basic -Credenti ...
+                        ~~~~~~~~~~~~~~
+ CategoryInfo          : ObjectNotFound: (New-CimSession:String) [], CommandNotFoundException
+ FullyQualifiedErrorId : CommandNotFoundException
```

```powershell
Get-CimInstance : The term 'Get-CimInstance' is not recognized as the name of a cmdlet, function, script file, or operable program.
Check the spelling of the name, or if a path was included, verify that the path is correct and try again.
At /usr/local/share/powershell/Modules/vDocumentation/2.4.4/Public/Get-ESXInventory.ps1:310 char:31
+             $rac = $session | Get-CimInstance CIM_IPProtocolEndpoint  ...
+                               ~~~~~~~~~~~~~~~
+ CategoryInfo          : ObjectNotFound: (Get-CimInstance:String) [], CommandNotFoundException
+ FullyQualifiedErrorId : CommandNotFoundException
```



Normally I don't have the predefined VUM baselines attached, I create my own. I tried with and without those predefined baselines attached to my cluster (or datacenter), but I get this error in all cases (vDocumentation v2.4.0):

```
PS C:\> Get-ESXPatching -ExportExcel -folderpath $vDocExportPath
        Connected to vcenter.domain.local
Get-ESXPatching : Could not find any baseline(s) named Critical Host Patches*,Non-Critical Host Patches* on server vcenter.domain.local. Please check Baseline name and try again.
At line:1 char:1
+ Get-ESXPatching -ExportExcel -folderpath $vDocExportPath
+ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    + CategoryInfo          : NotSpecified: (:) [Write-Error], WriteErrorException
    + FullyQualifiedErrorId : Microsoft.PowerShell.Commands.WriteErrorException,Get-ESXPatching
```

Running PowerShell 5.1 on WinSrv 2016 1607
Can this switch be added?  I'd like to have one sheet for Inventory, Storage, etc, but with separate tabs for each vCenter.  This will make it easier to reference the multiple environments in one place.  

Thanks!


Hi there, after importing Export-Excel and vDocumentation, I'm getting an error with the following command:

`Get-ESXIODevice -esxi hostname -ExportExcel -folderPath C:\Users\gsmid\Downloads\`

Output is:

<pre>Export-Excel : A positional parameter cannot be found that accepts argument 'C:\Users\gsmid\Downloads\IODevice2017-10-25T11-45-18.xlsx'.
At \\DOCHOST\USERS\gsmid\Documents\WindowsPowerShell\Modules\vDocumentation\2.0.0\Public\Get-ESXIODevice.ps1:343 char:33
+ ... ollection | Export-Excel ($outputFile + ".xlsx") -WorkSheetname IO_De ...
+                 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    + CategoryInfo          : InvalidArgument: (:) [Export-Excel], ParameterBindingException
    + FullyQualifiedErrorId : PositionalParameterNotFound,Export-Excel</pre>

I checked line 343 of Get-ESXIODevice.ps1:

`$outputCollection | Export-Excel ($outputFile + ".xlsx") -WorkSheetname IO_Device -NoNumberConversion * -AutoSize -BoldTopRow`

I found that if I modified it slightly by explicitly stating the -Path paramenter, everything works fine:

`$outputCollection | Export-Excel -Path ($outputFile + ".xlsx") -WorkSheetname IO_Device -NoNumberConversion * -AutoSize -BoldTopRow`
I run in large environments and connect to multiple vcenters at all times. It will vastly speed up processing time as well if you add -Server parameter and then add -Server to all the get- commands as they all have a -Server parameter as well. 

Currently when connected to many vcenters and run a single get-esxInventory it takes a very long time. I have to disconnect and reconnect to only the Vcenter that contains the object I will run the report on.

I highly recommend adding -Server and would love to have it, currently I am adding it myself to the code.

Thanks!