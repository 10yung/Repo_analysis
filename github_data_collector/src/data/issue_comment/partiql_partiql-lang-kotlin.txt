Hi, I have a simple JSON file that I want to use as a global environment. When I use the commend line --environment, I'm told that there is no binding for string element in a list (double-quoted). This can be worked around by using single-quotes in the file (not ideal because then I have to post-process my JSON file created using IonTextWriter).

However, when I use the !add_to_global_env read_file(...file...) of the same file (double-quotes and all), it works just fine.

```
carman$ cat data-file.txt.ion
{
  "output_buffers":[
    {
      "id":"tote-rackslot-out-buff-10"
    }
  ]
}

carman$ ./gradlew :cli:run --console=plain --args="-e /Users/carman/partiql/partiql-lang-kotlin/data-file.txt.ion"
> Task :lang:compileKotlin UP-TO-DATE
> Task :lang:compileJava NO-SOURCE
> Task :cli:compileKotlin UP-TO-DATE
> Task :cli:compileJava NO-SOURCE
> Task :cli:processResources NO-SOURCE
> Task :cli:classes UP-TO-DATE
> Task :lang:processResources NO-SOURCE
> Task :lang:classes UP-TO-DATE
> Task :lang:inspectClassesForKotlinIC UP-TO-DATE
> Task :lang:jar UP-TO-DATE

> Task :cli:run FAILED
No such binding: tote-rackslot-out-buff-10


FAILURE: Build failed with an exception.

* What went wrong:
Execution failed for task ':cli:run'.
> Process 'command '/Library/Java/JavaVirtualMachines/jdk1.8.0_231.jdk/Contents/Home/bin/java'' finished with non-zero exit value 1

* Try:
Run with --stacktrace option to get the stack trace. Run with --info or --debug option to get more log output. Run with --scan to get full insights.

* Get more help at https://help.gradle.org

BUILD FAILED in 1s
5 actionable tasks: 1 executed, 4 up-to-date
carman$ ./gradlew :cli:run --console=plain
> Task :lang:compileKotlin UP-TO-DATE
> Task :lang:compileJava NO-SOURCE
> Task :cli:compileKotlin UP-TO-DATE
> Task :cli:compileJava NO-SOURCE
> Task :cli:processResources NO-SOURCE
> Task :cli:classes UP-TO-DATE
> Task :lang:processResources NO-SOURCE
> Task :lang:classes UP-TO-DATE
> Task :lang:inspectClassesForKotlinIC UP-TO-DATE
> Task :lang:jar UP-TO-DATE

> Task :cli:run
Welcome to the PartiQL REPL!
PartiQL> !add_to_global_env read_file(
   | '/Users/carman/partiql/partiql-lang-kotlin/data-file.txt.ion'
)   | 
   | 
===' 
<<
  {
    'output_buffers': [
      {
        'id': 'tote-rackslot-out-buff-10'
      }
    ]
  }
>>
--- 
OK! (94 ms)
PartiQL> 

```
I'm nearly certain that each of the queries below should have an identical result, but instead the results are as shown.

In the examples provided below, I would have expected the result to match the result for `SELECT *`.  The examples with `SELECT foo.*` have what I believe to be the incorrect result.  Note that when `foo` is a list of structs, the result is as expected.  

This this is likely happening because the logic for `<expr>.*` doesn't differentiate between structs (which have the correct behavior) and the other collection types.  (To be sure, it is a good question as to whether or not it should differentiate.)

For bags:

```
PartiQL> SELECT * FROM [<<1, 2>>] as foo
   | 
===' 
<<
  {
    '_1': <<
      1,
      2
    >>
  }
>>
--- 
OK!
PartiQL> SELECT foo.* FROM [<<1, 2>>] as foo
   | ===' 
<<
  {
    '_1': 1,
    '_2': 2
  }
>>
--- 
OK!
PartiQL> 
```
For lists:
```
PartiQL> SELECT * FROM [[1, 2]] as foo
   | 
===' 
<<
  {
    '_1': [
      1,
      2
    ]
  }
>>
--- 
OK!
PartiQL> SELECT foo.* FROM [[1, 2]] as foo
   | 
===' 
<<
  {
    'null': 1,
    'null': 2
  }
>>
--- 
OK!
```


As a fix for our pathologically slow builds under `openjdk8`, I had to remove `JUnitParams` from `NaturalExprValueComparatorsTest`.  Currently, it's a single test that iterates over all 2,000 of its parameters.

Once a suitable replacement for `JUnitParams` has been found (JUnit5?), we should re-parameterize this test.
I'm not entirely certain if this intentional or not, but I strongly suspect that this is a bug considering it's potential to induce confusion among users.

```
PartiQL> -0.0 = 0.0
   | 
===' 
true
--- 
OK! (0 ms)
PartiQL> `0e0` = `-0e0`
   | 
===' 
false
--- 
OK! (0 ms)
```
Executing the following test:

```
class ScratchPadKotlin : EvaluatorTestBase() {
    @Test
    fun foo() {
        val value = eval("-0.0")
        println(value.ionValue)
        println(ConfigurableExprValueFormatter.pretty.format(value))
    }
}
```
Results in the following output:

```
0d-1
0.0
```

My expectation is the second line of the output would be `-0.0` and not `0.0`.

The only impact AFAIK is that the REPL displays `0.0` for `-0.0`:

```
PartiQL> -0.0
   | 
===' 
0.0
--- 
OK! (0 ms)
```

`lang/test/org/partiql/lang/errors/ParserErrorsTest.kt` contains an `@Ignore` unit test.  Let's fix it and remove the `@Ignore`.
@raganhan suggests that if this is QLDB specific then the `lang` project the functionality of that particualr `StaticTypeRewriterConstraint` is not the best place for that rule to be implemented.

We can't remove it now, however, but in the future it may be possible.
First query works:
select c.id,d.sequence from claims[0] as c left join c.diagnosis as d limit 3

```
[
  {
    "id":"95644393-f809-4267-9cad-1189c7321e9f",
    "sequence":1
  },
  {
    "id":"c8f19946-23c8-4c53-8f7b-38841ee314da"
  },
  {
    "id":"04ce14d8-043f-436f-9eed-3c017db74b59",
    "sequence":1
  }
]

```

nested query fails:
select count(*) as cnt from (
    select c.id,d.sequence from claims[0] as c left join c.diagnosis as d 
) 

org.partiql.lang.eval.EvaluationException: No such binding: c
	Evaluator Error: at line 3, column 12: Binding does not exist, <UNKNOWN> : <UNKNOWN>


[claims_small.json.zip](https://github.com/partiql/partiql-lang-kotlin/files/3975661/claims_small.json.zip)


I am using this code to read the json file attached:

```
InputStream fis = new FileInputStream("claims_small.json");
final IonReader ionReader = IonReaderBuilder.standard().build(fis);
final IonDatagram values = ion.getLoader().load(ionReader);
ExprValueFactory valueFactory = pipeline.getValueFactory();
ExprValue exprValue = valueFactory.newFromIonValue(values);

```

After binding it , and doing a query 'select * from' , I am getting this output:
Below this _1 is added to the array. Then of course if I do select count(*) I get only 1 as result. 
How can this be done better to load this as array ?
```
[
  {
    "_1":[
      {
        "resourceType":"Claim",
        "id":"95644393-f809-4267-9cad-1189c7321e9f",
        "status":"active",
        "use":"complete",
        "patient":{
          "reference":"Patient/d3af67c9-0c02-45f2-bc91-fea45af3ee83"
        },
        "billablePeriod":{
          "start":"2003-07-21T01:02:35+04:00",
          "end":"2003-07-21T01:32:35+04:00"
        },
        "organization":{
          "reference":"Organization/ed410eaa-33e7-4b26-abb5-35416b9a6495"
        },
        "diagnosis":[
          {
            "sequence":1,
            "diagnosisReference":{
              "reference":"Condition/00558851-32c7-4457-833a-13fa0e484683"
            }
          }
        ],
        "item":[
          {
            "sequence":1,
            "encounter":[
              {
          
```
[claims_small.json.zip](https://github.com/partiql/partiql-lang-kotlin/files/3975597/claims_small.json.zip)
lues);



It is human visible slow with only ~100K docs.  I feel like the count(*) should be cached when you create the doc , or even simple loop over only top of the docs should not be as slow.  Suspicious that deep parsing is happening.