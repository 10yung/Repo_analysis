Fix ah contribute-imports sbt command.

Lockfile tests are pending, but we should add a simple test for it. 

Tentative API call:

``` scala
repository.pull()
val gitFiles = adept.localPublish(variants, repository, artifacts = Set(new File("/Users/awesomeperson/Projects/myproject")))
repository.add(gitFiles)
repository.commit("A new release of my awesome project!")
```

I think adept would be a perfect fit for a dep mgr cli that resolves and generates the lockfiles. This way it can be used by more people.

The Jvm target in the build.sbt does not seem to do what it is supposed to: make adept-core and adept-lockfile compatible with JVM target 1.6. 

Currently the progress and logger in the lockfile is not used in adept-core. Also there should be a bridge so that logging using slf4j or logback with the lockfile and adept-core works seemlessly.

Progress on the lockfiles seems to be broken in the adept build. My assumption is that if there are multiple downloads going on at the same time, we will have issues.

Need a thread safe way to handle this.

There are marks to do performance tests, but they just write to system out. I want these to write to a json file, which can be displayed in a static html (on GitHub). These tests should note which type of disk (SSD/HD), CPU and memory. I want there to be integration tests that are bigger than the tests we have today and have perf marks on them as well.
This way we can agregate the perf benchmarks from all committers. 
There is no point in talking about perf improvements before this is online.

Documentation must be improved and updated - it is not possible to get a good understanding of Adept the way it is now without a better doc.

In http://adepthub.com/blog/2014/02/19/resolution-engine-0, you write that:

> because the actual matching in Adept is redonkulously simple and only does equality. If you want binary version 2.2, that is what you're getting. In the same way, you can get libraries with "license" equal to "apache2" or have only the ones with "QA department seal of approval" equal to "approved".

The "seal of approval" part got me wondering about cryptographic signatures on packages. Since those would be a function of the package contents, it wouldn't be a pure equality check, but would rather be a signature verification against some list of approved public keys (or some PKI hierarchy). Is that a planned feature or do you have thoughts on it?
