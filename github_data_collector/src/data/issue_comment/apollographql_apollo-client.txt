I'm not convinced that the `justTypenameQuery` implementation is worth the `graphql-tag` dependency (see #5806) but if byte savings is the goal we can drop the `query` operation type and use the shorthand query syntax. Thanks! 
**Intended outcome:**
1. Run `npm i` after pulling repo locally on windows

Expected: install succeeds and I'm able to run `npm run watch`.

**Actual outcome:**
`npm i` fails with this error:
```
10716 verbose pkgid fsevents@2.1.2
10717 verbose cwd d:\v\src\apollo-client
10718 verbose Windows_NT 10.0.18362
10719 verbose argv "C:\\Program Files\\nodejs\\node.exe" "C:\\Program Files\\nodejs\\node_modules\\npm\\bin\\npm-cli.js" "i"
10720 verbose node v12.14.0
10721 verbose npm  v6.13.4
10722 error code EBADPLATFORM
10723 error notsup Unsupported platform for fsevents@2.1.2: wanted {"os":"darwin","arch":"any"} (current: {"os":"win32","arch":"x64"})
10724 error notsup Valid OS:    darwin
10724 error notsup Valid Arch:  any
10724 error notsup Actual OS:   win32
10724 error notsup Actual Arch: x64
```
I looked around stackoverflow for a solution, and apparently the recommended approach is to [remove fsevents from package.json](https://stackoverflow.com/a/58368273) (!). So I gave that a try, reran `npm i`, and then tried to run `npm run watch`. This failed with the following error:
```
d:\v\src\apollo-client>npm run watch

> @apollo/client@3.0.0-beta.24 watch d:\v\src\apollo-client
> npx tsc-watch --onSuccess "npm run postbuild"

npx: installed 22 in 2.812s
Cannot find module 'typescript/bin/tsc'
Require stack:
- C:\Users\v\AppData\Roaming\npm-cache\_npx\8712\node_modules\tsc-watch\lib\tsc-watch.js
- C:\Users\v\AppData\Roaming\npm-cache\_npx\8712\node_modules\tsc-watch\index.js
npm ERR! code ELIFECYCLE
npm ERR! errno 9
npm ERR! @apollo/client@3.0.0-beta.24 watch: `npx tsc-watch --onSuccess "npm run postbuild"`
npm ERR! Exit status 9
```

**How to reproduce the issue:**
1. Pull repo locally on Windows 10
2. Run npm i
3. Run npm run watch

**Versions**
```
  System:
    OS: Windows 10 10.0.18362
  Binaries:
    Node: 12.14.0 - C:\Program Files\nodejs\node.EXE
    npm: 6.13.4 - C:\Program Files\nodejs\npm.CMD
  Browsers:
    Edge: 44.18362.449.0
```

**Suggested solutions:**
1. Does `fsevents` need to be a direct dependency of apollo-client? I couldn't find any usages of it in the codebase. It seems like jest requires it, but it pulls fsevents in as an _optional_ dependency so the install doesn't fail on Windows. Can we either remove it from apollo-client's package.json, or make it an optional dependency?
2. Change the scripts in package.json to call tsc/tsc-watch/rimraf etc. directly instead of going through `npx`. i.e.,:
```diff
- "build": "npx tsc"
+ "build": "tsc"
```

I've already made [these changes locally](https://github.com/vishwam/apollo-client/commit/1fdae7b19f2713648a1f3a364db6e274f118023d) and verified it's building, I'm happy to send a PR if you're OK with this approach.
Upgraded to 3.0.0-beta, everything worked until I did a hard restart of my create-react-app. Upon running my app, I receive the following error:
```
./node_modules/@apollo/react-hooks/lib/react-hooks.esm.js
Module not found: Can't resolve 'apollo-client' in '/Users/bstrom/dev/reviewtool/node_modules/@apollo/react-hooks/lib'
```

**Versions**
  System:
    OS: macOS Mojave 10.14.6
  Binaries:
    Node: 12.13.0 - ~/.nvm/versions/node/v12.13.0/bin/node
    Yarn: 1.21.1 - /usr/local/bin/yarn
    npm: 6.12.0 - ~/.nvm/versions/node/v12.13.0/bin/npm
  Browsers:
    Chrome: 79.0.3945.117
    Firefox: 72.0.1
    Safari: 13.0.4
  npmPackages:
    @apollo/client: ^3.0.0-beta.24 => 3.0.0-beta.24
    @apollo/react-hooks: ^3.1.3 => 3.1.3
    @apollo/react-testing: ^3.1.3 => 3.1.3
    apollo-cache-inmemory: ^1.6.5 => 1.6.5
    apollo-link: ^1.2.13 => 1.2.13
    apollo-link-error: ^1.1.12 => 1.1.12
    apollo-link-http: ^1.5.16 => 1.5.16
    apollo-server: ^2.9.7 => 2.9.15
-->

I'm having a problem getting data with useQuery, I have 2 calls with useQuery for the same query using a different variable, the problem is that if when returning data, some values of the returning array of the 2 calls are identically, the first call is getting updated with the values of the second call automatically, losing the data it should have.

As you can see on the image, at first it return an array of 6 values and other of 36 values "6 of them are same values of the array of 6 values", but it get updated automatically for no reason, getting both calls with array of 6 same values.

<img width="577" alt="スクリーンショット 2020-01-18 20 06 14" src="https://user-images.githubusercontent.com/6263700/72662791-bfdc1680-3a2e-11ea-9d5e-8e5b04e5a35a.png">

The 2 useQuery calls are:

const listFront = useQuery(GET_LIST_ITEMS_BY_LISTNAME_QUERY, {
    variables: {listName: props.router.query.listName, **isReverse: false**}
  });
  const listReverse = useQuery(GET_LIST_ITEMS_BY_LISTNAME_QUERY, {
    variables: {listName: props.router.query.listName, **isReverse: true**}
  });

I guess I will solve it by just calling graphql for only 1 list and separating it on front end... but still, its so weird graphql just update your query to make it same as other query because values of 1 query are included on the other query.
https://github.com/apollographql/apollo-client/blob/2e3e0a86659956fc579b0c2580f2d01675693d5f/src/cache/core/cache.ts#L8-L9

This might have negative consequences for users that are relying on `babel-plugin-graphql-tag` or a similar transform to remove `graphql/language/parser` from their app bundles.

Thanks. Great work on 3.0!

Hey! I don't know if this is the right place to request this. I have found a feature in AWS Appsync and their GraphQL implementation that would be really nice to have when working with GraphQL and Apollo Client.

Basic example of what AWS Appsync generates for you:

based on a schema like this:
`type Todo @model {
  id: ID!
  name: String!
  description: String
}`

you can generate an Angular service file likes this (service.ts)

```
import { Injectable } from "@angular/core";
import API, { graphqlOperation } from "@aws-amplify/api";
import { GraphQLResult } from "@aws-amplify/api/lib/types";
import * as Observable from "zen-observable";

export type CreateTodoInput = {
  id?: string | null;
  name: string;
  description?: string | null;
};

export type UpdateTodoInput = {
  id: string;
  name?: string | null;
  description?: string | null;
};

export type DeleteTodoInput = {
  id?: string | null;
};

export type ModelTodoFilterInput = {
  id?: ModelIDFilterInput | null;
  name?: ModelStringFilterInput | null;
  description?: ModelStringFilterInput | null;
  and?: Array<ModelTodoFilterInput | null> | null;
  or?: Array<ModelTodoFilterInput | null> | null;
  not?: ModelTodoFilterInput | null;
};

export type ModelIDFilterInput = {
  ne?: string | null;
  eq?: string | null;
  le?: string | null;
  lt?: string | null;
  ge?: string | null;
  gt?: string | null;
  contains?: string | null;
  notContains?: string | null;
  between?: Array<string | null> | null;
  beginsWith?: string | null;
};

export type ModelStringFilterInput = {
  ne?: string | null;
  eq?: string | null;
  le?: string | null;
  lt?: string | null;
  ge?: string | null;
  gt?: string | null;
  contains?: string | null;
  notContains?: string | null;
  between?: Array<string | null> | null;
  beginsWith?: string | null;
};

export type CreateTodoMutation = {
  __typename: "Todo";
  id: string;
  name: string;
  description: string | null;
};

export type UpdateTodoMutation = {
  __typename: "Todo";
  id: string;
  name: string;
  description: string | null;
};

export type DeleteTodoMutation = {
  __typename: "Todo";
  id: string;
  name: string;
  description: string | null;
};

export type GetTodoQuery = {
  __typename: "Todo";
  id: string;
  name: string;
  description: string | null;
};

export type ListTodosQuery = {
  __typename: "ModelTodoConnection";
  items: Array<{
    __typename: "Todo";
    id: string;
    name: string;
    description: string | null;
  } | null> | null;
  nextToken: string | null;
};

export type OnCreateTodoSubscription = {
  __typename: "Todo";
  id: string;
  name: string;
  description: string | null;
};

export type OnUpdateTodoSubscription = {
  __typename: "Todo";
  id: string;
  name: string;
  description: string | null;
};

export type OnDeleteTodoSubscription = {
  __typename: "Todo";
  id: string;
  name: string;
  description: string | null;
};

@Injectable({
  providedIn: "root"
})
export class APIService {
  async CreateTodo(input: CreateTodoInput): Promise<CreateTodoMutation> {
    const statement = `mutation CreateTodo($input: CreateTodoInput!) {
        createTodo(input: $input) {
          __typename
          id
          name
          description
        }
      }`;
    const gqlAPIServiceArguments: any = {
      input
    };
    const response = (await API.graphql(
      graphqlOperation(statement, gqlAPIServiceArguments)
    )) as any;
    return <CreateTodoMutation>response.data.createTodo;
  }
  async UpdateTodo(input: UpdateTodoInput): Promise<UpdateTodoMutation> {
    const statement = `mutation UpdateTodo($input: UpdateTodoInput!) {
        updateTodo(input: $input) {
          __typename
          id
          name
          description
        }
      }`;
    const gqlAPIServiceArguments: any = {
      input
    };
    const response = (await API.graphql(
      graphqlOperation(statement, gqlAPIServiceArguments)
    )) as any;
    return <UpdateTodoMutation>response.data.updateTodo;
  }
  async DeleteTodo(input: DeleteTodoInput): Promise<DeleteTodoMutation> {
    const statement = `mutation DeleteTodo($input: DeleteTodoInput!) {
        deleteTodo(input: $input) {
          __typename
          id
          name
          description
        }
      }`;
    const gqlAPIServiceArguments: any = {
      input
    };
    const response = (await API.graphql(
      graphqlOperation(statement, gqlAPIServiceArguments)
    )) as any;
    return <DeleteTodoMutation>response.data.deleteTodo;
  }
  async GetTodo(id: string): Promise<GetTodoQuery> {
    const statement = `query GetTodo($id: ID!) {
        getTodo(id: $id) {
          __typename
          id
          name
          description
        }
      }`;
    const gqlAPIServiceArguments: any = {
      id
    };
    const response = (await API.graphql(
      graphqlOperation(statement, gqlAPIServiceArguments)
    )) as any;
    return <GetTodoQuery>response.data.getTodo;
  }
  async ListTodos(
    filter?: ModelTodoFilterInput,
    limit?: number,
    nextToken?: string
  ): Promise<ListTodosQuery> {
    const statement = `query ListTodos($filter: ModelTodoFilterInput, $limit: Int, $nextToken: String) {
        listTodos(filter: $filter, limit: $limit, nextToken: $nextToken) {
          __typename
          items {
            __typename
            id
            name
            description
          }
          nextToken
        }
      }`;
    const gqlAPIServiceArguments: any = {};
    if (filter) {
      gqlAPIServiceArguments.filter = filter;
    }
    if (limit) {
      gqlAPIServiceArguments.limit = limit;
    }
    if (nextToken) {
      gqlAPIServiceArguments.nextToken = nextToken;
    }
    const response = (await API.graphql(
      graphqlOperation(statement, gqlAPIServiceArguments)
    )) as any;
    return <ListTodosQuery>response.data.listTodos;
  }
  OnCreateTodoListener: Observable<OnCreateTodoSubscription> = API.graphql(
    graphqlOperation(
      `subscription OnCreateTodo {
        onCreateTodo {
          __typename
          id
          name
          description
        }
      }`
    )
  ) as Observable<OnCreateTodoSubscription>;

  OnUpdateTodoListener: Observable<OnUpdateTodoSubscription> = API.graphql(
    graphqlOperation(
      `subscription OnUpdateTodo {
        onUpdateTodo {
          __typename
          id
          name
          description
        }
      }`
    )
  ) as Observable<OnUpdateTodoSubscription>;

  OnDeleteTodoListener: Observable<OnDeleteTodoSubscription> = API.graphql(
    graphqlOperation(
      `subscription OnDeleteTodo {
        onDeleteTodo {
          __typename
          id
          name
          description
        }
      }`
    )
  ) as Observable<OnDeleteTodoSubscription>;
}
```


I know that you can generate a service based on an existing GraphQL query like [this](https://graphql-code-generator.com/docs/plugins/typescript-apollo-angular), but I am looking for a way to generate like the above example based on a schema file.
here's what I have, this project started as the base react skeleton with typescript.

```ts
import { ApolloClient } from 'apollo-boost';

const client = new ApolloClient({
    uri: 'http://localhost:4000'
});
```

```
/Users/calebcushing/IdeaProjects/my-app/src/index.tsx
TypeScript error in /Users/calebcushing/IdeaProjects/my-app/src/index.tsx(9,5):
Argument of type '{ uri: string; }' is not assignable to parameter of type 'ApolloClientOptions<unknown>'.
  Object literal may only specify known properties, and 'uri' does not exist in type 'ApolloClientOptions<unknown>'.  TS2345

     7 | 
     8 | const client = new ApolloClient({
  >  9 |     uri: 'http://localhost:4000'
       |     ^
    10 | });
    11 | 
    12 | ReactDOM.render(<App />, document.getElementById('root'));

```
this is the typescript definition

```ts
export default class ApolloClient<TCacheShape> implements DataProxy {
    link: ApolloLink;
    store: DataStore<TCacheShape>;
    cache: ApolloCache<TCacheShape>;
    readonly queryManager: QueryManager<TCacheShape>;
    disableNetworkFetches: boolean;
    version: string;
    queryDeduplication: boolean;
    defaultOptions: DefaultOptions;
    readonly typeDefs: ApolloClientOptions<TCacheShape>['typeDefs'];
    private devToolsHookCb;
    private resetStoreCallbacks;
    private clearStoreCallbacks;
    private localState;
    constructor(options: ApolloClientOptions<TCacheShape>);
    stop(): void;
    watchQuery<T = any, TVariables = OperationVariables>(options: WatchQueryOptions<TVariables>): ObservableQuery<T, TVariables>;
    query<T = any, TVariables = OperationVariables>(options: QueryOptions<TVariables>): Promise<ApolloQueryResult<T>>;
    mutate<T = any, TVariables = OperationVariables>(options: MutationOptions<T, TVariables>): Promise<FetchResult<T>>;
    subscribe<T = any, TVariables = OperationVariables>(options: SubscriptionOptions<TVariables>): Observable<FetchResult<T>>;
    readQuery<T = any, TVariables = OperationVariables>(options: DataProxy.Query<TVariables>, optimistic?: boolean): T | null;
    readFragment<T = any, TVariables = OperationVariables>(options: DataProxy.Fragment<TVariables>, optimistic?: boolean): T | null;
    writeQuery<TData = any, TVariables = OperationVariables>(options: DataProxy.WriteQueryOptions<TData, TVariables>): void;
    writeFragment<TData = any, TVariables = OperationVariables>(options: DataProxy.WriteFragmentOptions<TData, TVariables>): void;
    writeData<TData = any>(options: DataProxy.WriteDataOptions<TData>): void;
    __actionHookForDevTools(cb: () => any): void;
    __requestRaw(payload: GraphQLRequest): Observable<ExecutionResult>;
    initQueryManager(): QueryManager<TCacheShape>;
    resetStore(): Promise<ApolloQueryResult<any>[] | null>;
    clearStore(): Promise<any[]>;
    onResetStore(cb: () => Promise<any>): () => void;
    onClearStore(cb: () => Promise<any>): () => void;
    reFetchObservableQueries(includeStandby?: boolean): Promise<ApolloQueryResult<any>[]>;
    extract(optimistic?: boolean): TCacheShape;
    restore(serializedState: TCacheShape): ApolloCache<TCacheShape>;
    addResolvers(resolvers: Resolvers | Resolvers[]): void;
    setResolvers(resolvers: Resolvers | Resolvers[]): void;
    getResolvers(): Resolvers;
    setLocalStateFragmentMatcher(fragmentMatcher: FragmentMatcher): void;
}
```

so I can see why it's not compiling but it baffles me that it doesn't match the documentation
**Versions**

  System:
    OS: macOS Mojave 10.14.6
  Binaries:
    Node: 10.18.1 - /usr/local/bin/node
    Yarn: 1.21.1 - ~/IdeaProjects/my-app/node_modules/.bin/yarn
    npm: 6.13.4 - /usr/local/bin/npm
  Browsers:
    Chrome: 79.0.3945.117
    Firefox: 61.0.2
    Safari: 13.0.4
  npmPackages:
    @apollo/react-hooks: ^3.1.3 => 3.1.3 
    apollo: ^2.21.3 => 2.21.3 
    apollo-boost: ^0.4.7 => 0.4.7 
Hello,

I've been using your client implementation for some time now, but always in the imperative implementation. I see your docs only provide examples of the declarative form using components. I'm not sure if this has been discussed/asked yet, but would you consider providing imperative documentation to your website/repository? Or if extensive documentation already exists, do you know where I can find it? I just felt like I should ask because I feel this could be of use to the community at large.

Specifically, docs for code like the below would be nice. 


`const withAuctionBids = graphql(QUERY_AUCTION_BIDS, {
    name: "auctionBids",
    options: ({ auctionData: { id } }) => ({
        variables: {
            input: {
                auctionId: id
            }
        },
        fetchPolicy: "network-only"
    })
});`

`const withData = compose(
    graphql(ACTIVE_USERS_QUERY, {
        options: { fetchPolicy: "network-only" },
        props: ({ ownProps, data }) => {
            return {
                data,
                subscribeToNewData: (onAddedUsers, onRemovedUsers) => {
                    return data.subscribeToMore({
                        document: ACTIVE_USERS_SUBSCRIPTION,
                        updateQuery: (prev, { subscriptionData }) => {
                            const {
                                totalUsers,
                                addedUsers,
                                removedUserIds
                            } = subscriptionData.data;
                            if (addedUsers) {
                                onAddedUsers && onAddedUsers(addedUsers);
                            }
                            if (removedUserIds) {
                                onRemovedUsers &&
                                    onRemovedUsers(removedUserIds);
                            }
                            if (
                                totalUsers !== undefined &&
                                prev !== undefined
                            ) {
                                return Object.assign({}, prev, {
                                    activeUsers: Object.assign(
                                        {},
                                        prev.activeUsers,
                                        {
                                            totalUsers: totalUsers
                                        }
                                    )
                                });
                            }
                            return null;
                        }
                    });
                }
            };
        }
    }),
    getUserData({ name: "userData", options: { fetchPolicy: "network-only" } })
)(ActiveUsers);`



I've sort of been forced to learn this convention by asking other developers in person, and copying the convention from other places in the repo I've been working on. This can be pretty difficult to get the hang of.

Thanks,

David

This is a follow up from resolved issue [#5709](https://github.com/apollographql/apollo-client/issues/5709)

**Summary**
When using a TypePolicy in a "cache-redirect" style (see code below), and a cache-miss occurs, the query should then generate a network request to get the data ([per this thread](https://github.com/apollographql/apollo-client/issues/5709)). In actual fact, the request just returns with an empty object. 

**Setup**

- A TypePolicy references UserListView from a UserDetailView Query (per below)
- Initiate a request for a User_by_pk with a 'cache-first' fetch policy

```
    export const UserTypePolicy: TypePolicies = {
        Query: {
          fields: {
            User_by_pk:{
              keyArgs: ["id"],
              read(existingData, { args, toReference }) {
                return existingData || toReference({ __typename: 'User', id: args!.id });
              },
            }
          },
        },
      };
```

**Intended outcome:**
If "User" entities are not available in cache, a network request should be initiated to get the data

**Actual outcome:**
An empty result is returned, and not network request is generated

**How to reproduce the issue:**
1. Setup TypePolicy per above
2. Initiate a DetailView Query before a ListView query
3. See that a network request is not triggered, and an empty result is returned

**Versions**
System:
    OS: macOS 10.15.2
  Binaries:
    Node: 13.6.0 - /usr/local/bin/node
    Yarn: 1.21.1 - /usr/local/bin/yarn
    npm: 6.13.4 - /usr/local/bin/npm
  Browsers:
    Chrome: 79.0.3945.117
    Safari: 13.0.4
  npmPackages:
    @apollo/client: link:../../webclient/node_modules/@apollo/client => 3.0.0-beta.23 
    @apollo/react-hooks: link:../../webclient/node_modules/@apollo/react-hooks => 3.2.0-beta.0 
Happy new year 2020