<!--
Please make sure you've read and understood our contributing guidelines;
https://github.com/aws/amazon-ecs-agent/blob/master/CONTRIBUTING.md

Please provide the following information:
-->

### Summary
<!-- What does this pull request do? -->
EFS auth capability and related model updates
* ACS model
* FE model
* efsAuth capability

### Implementation details
<!-- How are the changes implemented? -->

### Testing
<!-- How was this tested? -->
<!--
Note for external contributors:
`make test` and `make run-integ-tests` can run in a Linux development
environment like your laptop.  `go test -timeout=30s ./agent/...` and
`.\scripts\run-integ.tests.ps1` can run in a Windows development environment
like your laptop.  Please ensure unit and integration tests pass (on at least
one platform) before opening the pull request.  `make run-functional-tests` and
`.\scripts\run-functional-tests.ps1` must be run on an EC2 instance with an
instance profile allowing it access to AWS resources.  Running
`make run-functional-tests` and `.\scripts\run-functional-tests.ps1` may incur
charges to your AWS account; if you're unable or unwilling to run these tests
in your own account, we can run the tests and provide test results. Also, once
you open the pull request, there will be 14 automatic test checks on the bottom
of the pull request, please make sure they all pass before you merge it. You can
use `bot/test` label to rerun the automatic tests multiple times.
-->

New tests cover the changes: <!-- yes|no --> yes

### Description for the changelog
<!--
Write a short (one line) summary that describes the changes in this
pull request for inclusion in the changelog.
You can see our changelog entry style here:
https://github.com/aws/amazon-ecs-agent/commit/c9aefebc2b3007f09468f651f6308136bd7b384f
-->

### Licensing

By submitting this pull request, I confirm that my contribution is made under the terms of the Apache 2.0 license.

<!--
Please make sure you've read and understood our contributing guidelines;
https://github.com/aws/amazon-ecs-agent/blob/master/CONTRIBUTING.md

Please provide the following information:
-->

### Summary
We no longer use this script to create test images.

### Implementation details
Removing unused script

### Testing
No code change
<!-- How was this tested? -->
<!--
Note for external contributors:
`make test` and `make run-integ-tests` can run in a Linux development
environment like your laptop.  `go test -timeout=30s ./agent/...` and
`.\scripts\run-integ.tests.ps1` can run in a Windows development environment
like your laptop.  Please ensure unit and integration tests pass (on at least
one platform) before opening the pull request.  `make run-functional-tests` and
`.\scripts\run-functional-tests.ps1` must be run on an EC2 instance with an
instance profile allowing it access to AWS resources.  Running
`make run-functional-tests` and `.\scripts\run-functional-tests.ps1` may incur
charges to your AWS account; if you're unable or unwilling to run these tests
in your own account, we can run the tests and provide test results. Also, once
you open the pull request, there will be 14 automatic test checks on the bottom
of the pull request, please make sure they all pass before you merge it. You can
use `bot/test` label to rerun the automatic tests multiple times.
-->

New tests cover the changes: n/a

### Description for the changelog
<!--
Write a short (one line) summary that describes the changes in this
pull request for inclusion in the changelog.
You can see our changelog entry style here:
https://github.com/aws/amazon-ecs-agent/commit/c9aefebc2b3007f09468f651f6308136bd7b384f
-->

### Licensing

By submitting this pull request, I confirm that my contribution is made under the terms of the Apache 2.0 license.

### Summary
Unhealthy ECS Agent 1.36.0 - seelog "too many open files" error results in instance no longer scheduling tasks


### Description
This issue affects the ecs-agent 1.36.0, and is not existent (at least in our environment) in 1.35.0.

After starting an instance and running for a while (varies based on container scheduling), the ecs-agent on the instance will become unhealthy.  This happens consistently with approximately 100 stable containers running on the instance and approximately 5 unstable containers that die and are rescheduled regularly.

When this happens, the ecs-agent docker logs begin showing errors of this nature:
```
seelog internal error: open /log/ecs-agent.log: too many open files
seelog internal error: open /log/ecs-agent.log: too many open files
seelog internal error: open /log/ecs-agent.log: too many open files
seelog internal error: open /log/ecs-agent.log: too many open files
level=error time=2020-01-14T19:15:45Z msg="unable to setup cgroup root: cgroup resource [arn:aws:ecs:us-east-1:767904627276:task/distro/5fe0f75c96db4e9693f5e05586658d27]: setup cgroup: unable to create cgroup at /ecs/distro/5fe0f75c96db4e9693f5e05586658d27: cgroup create: unable to create controller: open /proc/self/mountinfo: too many open files" cgroupMountPath=/sys/fs/cgroup cgroupRoot=/ecs/distro/5fe0f75c96db4e9693f5e05586658d27 module=cgroup.go resourceName=cgroup taskARN=arn:aws:ecs:us-east-1:767904627276:task/distro/5fe0f75c96db4e9693f5e05586658d27
level=error time=2020-01-14T19:15:45Z msg="unable to setup cgroup root: cgroup resource [arn:aws:ecs:us-east-1:767904627276:task/distro/82178e3170364d918149c0f84576604e]: setup cgroup: unable to create cgroup at /ecs/distro/82178e3170364d918149c0f84576604e: cgroup create: unable to create controller: open /proc/self/mountinfo: too many open files" cgroupMountPath=/sys/fs/cgroup cgroupRoot=/ecs/distro/82178e3170364d918149c0f84576604e module=cgroup.go resourceName=cgroup taskARN=arn:aws:ecs:us-east-1:767904627276:task/distro/82178e3170364d918149c0f84576604el
```

At this point, any new containers that are scheduled to this instance become stuck in the "pending" state, and never transition to "running"


### Expected Behavior
As is the case for us with 1.35.0, I expect the ecs-agent to remain healthy and for containers to not become stuck in the "pending" state.


### Observed Behavior
The ecs-agent becomes unhealthy and includes seelog errors in the docker logs output.  Containers on the affected instance become stuck in a "pending" state.


### Environment Details
```
$ docker info
Containers: 286
 Running: 141
 Paused: 0
 Stopped: 145
Images: 9
Server Version: 18.09.9-ce
Storage Driver: overlay2
 Backing Filesystem: extfs
 Supports d_type: true
 Native Overlay Diff: true
Logging Driver: json-file
Cgroup Driver: cgroupfs
Plugins:
 Volume: local
 Network: bridge host ipvlan macvlan null overlay
 Log: awslogs fluentd gcplogs gelf journald json-file local logentries splunk syslog
Swarm: inactive
Runtimes: runc
Default Runtime: runc
Init Binary: docker-init
containerd version: 894b81a4b802e4eb2a91d1ce216b8817763c29fb
runc version: 2b18fe1d885ee5083ef9f0838fee39b62d653e30
init version: fec3683
Security Options:
 seccomp
  Profile: default
Kernel Version: 4.14.158-129.185.amzn2.x86_64
Operating System: Amazon Linux 2
OSType: linux
Architecture: x86_64
CPUs: 16
Total Memory: 124.8GiB
Name: ip-10-224-189-226.ec2.internal
ID: 5SOB:I63D:75AH:QTFV:7WQU:XISD:LV5Z:UHLG:A4NK:BCK3:JYNW:FLUK
Docker Root Dir: /var/lib/docker
Debug Mode (client): false
Debug Mode (server): false
Registry: https://index.docker.io/v1/
Labels:
Experimental: true
Insecure Registries:
 127.0.0.0/8
Live Restore Enabled: false
```

```
$ curl http://localhost:51678/v1/metadata
{"Cluster":"distro","ContainerInstanceArn":"arn:aws:ecs:us-east-1:767904627276:container-instance/distro/85ea661fe4394a65b244ac78c4c057dc","Version":"Amazon ECS Agent - v1.36.0 (6cacbceb)"}
```

```
df -h
$ df -h
Filesystem      Size  Used Avail Use% Mounted on
devtmpfs         63G     0   63G   0% /dev
tmpfs            63G  4.0K   63G   1% /dev/shm
tmpfs            63G  4.6M   63G   1% /run
tmpfs            63G     0   63G   0% /sys/fs/cgroup
/dev/nvme0n1p1   30G  2.7G   27G  10% /
/dev/nvme1n1    504G  3.4G  475G   1% /var/lib/docker
tmpfs            13G     0   13G   0% /run/user/13039
tmpfs            13G     0   13G   0% /run/user/0
```

```
$ cat /proc/sys/fs/file-max
13067984
```

```
$ ulimit -Hn
500000
```

```
$ ulimit -Sn
500000
```
<!--
Please make sure you've read and understood our contributing guidelines;
https://github.com/aws/amazon-ecs-agent/blob/master/CONTRIBUTING.md

Please provide the following information:
-->

### Summary
<!-- What does this pull request do? -->
Currently, this is how agent works:
1. By default, the interval for agent to publish metrics to TACS is 20s, and current default poll docker container stats interval is 15s.
2. After agent polls container stats, it will send dp to a queue. We need at least two dps in the queue to calculate the data sent to TACS: https://github.com/aws/amazon-ecs-agent/blob/master/agent/stats/engine.go#L597.
3. Agent does not send the task metrics to TACS if there is no data related to this task.
4. TACS uses task metrics to decide which tasks are running on the instance and uses this to calculate reservation data.
Thus, if **ECS_POLL_METRICS** is enabled and if the interval is gt/eq 10s, sometimes there will not be enough dp in the queue so that the task metrics will not be sent to TACS even the task exists on the instance. The reservation metrics is not accurate under this situation.

### Implementation details
<!-- How are the changes implemented? -->
1. Update the default poll metrics value to 9s, which is guaranteed to have enough dp. Considering the old value is 15s. I want to choose one which is closet to the old value.
2. Update the maximum value to 9s, which is the maximum value that is guaranteed to have enough dp.

### Testing
<!-- How was this tested? -->
<!--
Note for external contributors:
`make test` and `make run-integ-tests` can run in a Linux development
environment like your laptop.  `go test -timeout=30s ./agent/...` and
`.\scripts\run-integ.tests.ps1` can run in a Windows development environment
like your laptop.  Please ensure unit and integration tests pass (on at least
one platform) before opening the pull request.  `make run-functional-tests` and
`.\scripts\run-functional-tests.ps1` must be run on an EC2 instance with an
instance profile allowing it access to AWS resources.  Running
`make run-functional-tests` and `.\scripts\run-functional-tests.ps1` may incur
charges to your AWS account; if you're unable or unwilling to run these tests
in your own account, we can run the tests and provide test results. Also, once
you open the pull request, there will be 14 automatic test checks on the bottom
of the pull request, please make sure they all pass before you merge it. You can
use `bot/test` label to rerun the automatic tests multiple times.
-->

New tests cover the changes: <!-- yes|no -->

### Description for the changelog
<!--
Write a short (one line) summary that describes the changes in this
pull request for inclusion in the changelog.
You can see our changelog entry style here:
https://github.com/aws/amazon-ecs-agent/commit/c9aefebc2b3007f09468f651f6308136bd7b384f
-->

### Licensing

By submitting this pull request, I confirm that my contribution is made under the terms of the Apache 2.0 license.

<!--
For urgent operational issues, please contact AWS Support directly.
https://aws.amazon.com/premiumsupport/

For potential security issues, please do not post it in the Issues.
Instead, please follow the instructions https://aws.amazon.com/security/vulnerability-reporting/ or email AWS security directly at aws-security@amazon.com.

Please provide the following information:
-->

### Summary
<!-- Please provide a brief outline of the issue -->
I'm attempting to add instances to existing cluster. Instances can't join the cluster. 

### Description
<!-- Provide detailed information about this issue -->
AMIs:
- amzn2-ami-ecs-hvm-2.0.20190815-x86_64-ebs (ami-0b16d80945b1a9c7d)
- amzn2-ami-ecs-hvm-2.0.20191212-x86_64-ebs (ami-00afc256a955c31b5)

Probably related issue: https://github.com/aws/amazon-ecs-agent/issues/1857

<!-- Not required for feature requests -->
### Expected Behavior
Instances can join cluster. 

### Observed Behavior
In ecs agent logs I've found following:
```
2020-01-07T14:13:53Z [ERROR] Unable to register as a container instance with ECS: RequestError: send request failed
caused by: Post https://ecs.us-east-1.amazonaws.com/: net/http: request canceled while waiting for connection (Client.Timeout exceeded while awaiting headers)
2020-01-07T14:13:53Z [ERROR] Error registering: RequestError: send request failed
```

After ecs agent update, I found following in logs:
```
2020-01-07T14:17:25Z [WARN] Unable to obtain Outpost ARN from EC2 Metadata: EC2MetadataError: failed to make EC2Metadata request
caused by: <?xml version="1.0" encoding="iso-8859-1"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
		 "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
 <head>
  <title>404 - Not Found</title>
 </head>
 <body>
  <h1>404 - Not Found</h1>
 </body>
</html>
```

### Environment Details
<!--
Examples:
* docker info
* curl http://localhost:51678/v1/metadata
* df -h
-->
Instances are in private subnet with route to NAT Gateway. Outbound traffic allowed (instances can reach internet).
Setup was working as intended for some time.

### Supporting Log Snippets
<!--
Please have a look at https://github.com/awslabs/ecs-logs-collector
for the data we typically require for investigation

Please note that GitHub issues are public, remove sensitive data from logs before posting.
If you are not comfortable posting your logs here, please let us know and we
can provide an alternate method.
-->
ecs-logs-collector:
[Before ecs agent update](https://drive.google.com/open?id=11IJD5qCp2Wfrn09maKB_NAR4m5sRCmnv)
[After ecs agent update](https://drive.google.com/open?id=1DIJX1Q7Wt8_nrRGoeAjUgV0cXwkiBzsJ)


<!--
For urgent operational issues, please contact AWS Support directly.
https://aws.amazon.com/premiumsupport/

For potential security issues, please do not post it in the Issues.
Instead, please follow the instructions https://aws.amazon.com/security/vulnerability-reporting/ or email AWS security directly at aws-security@amazon.com.

Please provide the following information:
-->


### Summary
This is more a question than an issue. I am currently trying to run a Selenium Grid with Chrome and Firefox node in ECS Fargate.

My container are able to start but all my tests are failing because `/dev/shm` cannot be set as in an ECS launch type.

I was wondering if `tmpfs` and `dev shm` will be accessible in Fargate at some point. If not, I would like to understand the why (which I believe is related to the architecture of Fargate).

### Description
<!-- Provide detailed information about this issue -->

Currently, for giving access to `/dev/shm` to my container inside a task, I am doing the following in my Cloudformation manifest:

```
SeleniumNodeChromeTask:
    Type: "AWS::ECS::TaskDefinition"
    DependsOn: TalpaAccountSeleniumGrid
    Properties:
      Volumes:
        - Name: "shm"
    ContainerDefinitions:
    - MountPoints:
           - ContainerPath: /dev/shm
              SourceVolume: shm
              ReadOnly: false
```

The volume is mounted correctly but Firefox and Chrome keep failing.

Here is an error message I got from my Firefox container:

```
WARNING: failed to open shm: Permission denied: file /builds/worker/workspace/build/src/ipc/chromium/src/base/shared_memory_posix.cc, line 250
```

<!-- Not required for feature requests -->
### Expected Behavior
I am expecting to be able to setup tmpfs and dev shm for my container and get my headless browsers to work as expected

### Environment Details
<!--
Examples:
* docker info
* curl http://localhost:51678/v1/metadata
* df -h
-->
ECS Cluster: latest
Selenium Grid Docker images: 3.141.59-yttrium (official images)


<!--
For urgent operational issues, please contact AWS Support directly.
https://aws.amazon.com/premiumsupport/

For potential security issues, please do not post it in the Issues.
Instead, please follow the instructions https://aws.amazon.com/security/vulnerability-reporting/ or email AWS security directly at aws-security@amazon.com.

Please provide the following information:
-->


### Summary
ecs-agent will fail to connect when you have a service control policy requiring the use of tls.

### Description
Deploy the following service control policy (terraform syntax):
```
statement {
  sid       = "RequireSecureTransport"
  effect    = "Deny"
  actions   = ["*"]
  resources = ["*"]
  condition {
    test     = "Bool"
    variable = "aws:SecureTransport"
    values   = ["false"]
  }
}
```

You'll see the following behavior:
- the AWS Console ecs dashboard will show the agent as not connected
- no tasks will get scheduled on the host
- you will see the following connection errors in ecs-agent.log:
<img width="888" alt="Screen_Shot_2019-12-25_at_3_41_04_PM_" src="https://user-images.githubusercontent.com/2279289/71451808-f2496b00-2731-11ea-802c-01dd9ea3f98d.png">


### Summary

When I stop a task, ECS doesn't deregister it from load balancer


### Description

I have an ECS service with multiple tasks, the service has a loadbalancer configured

if I run command like that:

```
aws ecs stop-task --cluster mycluster --task xxxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx
```
 
I suddendly receive some 502 responses

example siege output:


```
# siege -c 1 http://myservice/uri/
HTTP/1.1 200     0.39 secs:      16 bytes ==> GET  /uri/
HTTP/1.1 200     0.39 secs:      16 bytes ==> GET  /uri/
HTTP/1.1 502     0.39 secs:     138 bytes ==> GET  /uri/
HTTP/1.1 200     0.39 secs:      16 bytes ==> GET  /uri/
HTTP/1.1 200     0.39 secs:      16 bytes ==> GET  /uri/
HTTP/1.1 502     0.39 secs:     138 bytes ==> GET  /uri/
```

this happens for 3~5 seconds.

 

The `HealthCheckIntervalSeconds * UnhealthyThresholdCount` is a longer period so I think that ECS doesn't wait the task deregistration from load balancer before stopping containers.

 

This doesn't happen when the service is scaling down.


### Expected Behaviour

 

ECS should deregister task from load balancer before sending sigterm to container


### Observed Behaviour
 
ECS deregisters task from load balancer after sending sigterm to container

<!--
Please make sure you've read and understood our contributing guidelines;
https://github.com/aws/amazon-ecs-agent/blob/master/CONTRIBUTING.md

Please provide the following information:
-->

### Summary
<!-- What does this pull request do? -->
Implemented dependency logic so that EFS type volume task resource wait for pause container to be finished.

### TODO
1. Cleanup logic
2. Aggregate plugin required input
3. Functional tests

### Implementation details
<!-- How are the changes implemented? -->

### Testing
<!-- How was this tested? -->
<!--
Note for external contributors:
`make test` and `make run-integ-tests` can run in a Linux development
environment like your laptop.  `go test -timeout=30s ./agent/...` and
`.\scripts\run-integ.tests.ps1` can run in a Windows development environment
like your laptop.  Please ensure unit and integration tests pass (on at least
one platform) before opening the pull request.  `make run-functional-tests` and
`.\scripts\run-functional-tests.ps1` must be run on an EC2 instance with an
instance profile allowing it access to AWS resources.  Running
`make run-functional-tests` and `.\scripts\run-functional-tests.ps1` may incur
charges to your AWS account; if you're unable or unwilling to run these tests
in your own account, we can run the tests and provide test results. Also, once
you open the pull request, there will be 14 automatic test checks on the bottom
of the pull request, please make sure they all pass before you merge it. You can
use `bot/test` label to rerun the automatic tests multiple times.
-->

New tests cover the changes: <!-- yes|no --> yes

Verified by mock aws vpc mode on agent. Some key logs that verified dependency is working as expected.
```
2020-01-02T23:44:25Z [DEBUG] Task [xxxx]: adding network pause container dependency to resource [task-efs-shared]
2020-01-02T23:44:25Z [DEBUG] Managed task [xxxx]: can't apply state to resource [task-efs-shared] yet due to unresolved dependencies: dependency graph: resource's dependency on containers not resolved
2020-01-02T23:44:26Z [DEBUG] Managed task [xxxx]: container [~internal~ecs~pause] at desired status: RESOURCES_PROVISIONED
2020-01-02T23:44:26Z [INFO] Managed task [xxxx]: transitioned resource [task-efs-shared] to [CREATED]
2020-01-02T23:44:26Z [INFO] Managed task [xxxx]: got resource [task-efs-shared] event: [CREATED]
```

### Description for the changelog
<!--
Write a short (one line) summary that describes the changes in this
pull request for inclusion in the changelog.
You can see our changelog entry style here:
https://github.com/aws/amazon-ecs-agent/commit/c9aefebc2b3007f09468f651f6308136bd7b384f
-->

### Licensing

By submitting this pull request, I confirm that my contribution is made under the terms of the Apache 2.0 license.

Signed-off-by: Vinothkumar Siddharth <sidvin@amazon.com>

<!--
Please make sure you've read and understood our contributing guidelines;
https://github.com/aws/amazon-ecs-agent/blob/master/CONTRIBUTING.md

Please provide the following information:
-->

### Summary
<!-- What does this pull request do? -->
Fix the config that prevented the environment override from disabling the feature. 

### Implementation details
<!-- How are the changes implemented? -->

### Testing
<!-- How was this tested? -->
<!--
Note for external contributors:
`make test` and `make run-integ-tests` can run in a Linux development
environment like your laptop.  `go test -timeout=30s ./agent/...` and
`.\scripts\run-integ.tests.ps1` can run in a Windows development environment
like your laptop.  Please ensure unit and integration tests pass (on at least
one platform) before opening the pull request.  `make run-functional-tests` and
`.\scripts\run-functional-tests.ps1` must be run on an EC2 instance with an
instance profile allowing it access to AWS resources.  Running
`make run-functional-tests` and `.\scripts\run-functional-tests.ps1` may incur
charges to your AWS account; if you're unable or unwilling to run these tests
in your own account, we can run the tests and provide test results. Also, once
you open the pull request, there will be 14 automatic test checks on the bottom
of the pull request, please make sure they all pass before you merge it. You can
use `bot/test` label to rerun the automatic tests multiple times.
-->

New tests cover the changes: <!-- yes|no -->
Yes

### Description for the changelog
<!--
Write a short (one line) summary that describes the changes in this
pull request for inclusion in the changelog.
You can see our changelog entry style here:
https://github.com/aws/amazon-ecs-agent/commit/c9aefebc2b3007f09468f651f6308136bd7b384f
-->
Bug - Resolved disabling gMSA feature using environment overrides

### Licensing

By submitting this pull request, I confirm that my contribution is made under the terms of the Apache 2.0 license.
