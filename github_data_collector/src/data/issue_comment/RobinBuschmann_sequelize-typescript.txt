``` java
  @Transactional
  public void update(CategoryUpdateParam param){
    
    if(! Strings.isNullOrEmpty(param.getName())) {
      changeName(param.getShopId(), param.getId(), param.getName());
    }else if(param.getParentId()!=null) {
      changeParent(param.getShopId(), param.getId(), param.getParentId());
    }
  }
  
  @Transactional
  public void changeName(Long shopId, Long categoryId, String name){
    Category category = findById(shopId,categoryId);
    category.changeName(name);
    categoryRepo.save(category);
  }

  @Transactional
  public void changeParent(Long shopId, Long categoryId, Long parentId){
    
    Category category = findById(shopId,categoryId)
        .loadParent()
        .loadDescendants();
    
    Category parent = findById(shopId,parentId);
    
    category.changeParent(parent);
    
    categoryRepo.save(category);
}
```

That will be convenient if support this feature


<!-- Before submitting an issue, please consult our docs (https://github.com/RobinBuschmann/sequelize-typescript) and check whether your problem was already reported (https://github.com/RobinBuschmann/sequelize-typescript/issues) -->

<!-- Please make sure you are posting an issue pertaining to sequelize-typescript. If you are having an issue with sequelize itself, please consult the sequelize team (https://github.com/sequelize/sequelize/issues) -->

**Versions**
<!-- Please let us know which sequelize, sequelize-typescript and typescript version are you using -->
- sequelize: ^1.61.1
- sequelize-typescript: ^1.1.0
- typescript: ^3.7.4

**I'm submitting a ...** 
<!--  (check one with "x") -->
[x] bug report
[ ] feature request

**Actual behavior:**
<!-- Describe how the bug manifests. -->
Hi,

I'm trying to make RESTAPI server with AWS lambda, Serverless Framework, AWS RDS.
i use sequelize-typescript for defining model.
it ***perfectly works*** in my local environment. (serverless offline)
but, return error when i deploy in real aws. (serverless deploy)
![image](https://user-images.githubusercontent.com/12893887/72503535-4a7e1380-387f-11ea-9713-91b7104f979d.png)

is not supported sequelize-typescript on aws lambda(using serverless framework)?



-->
sequelize.ts
```
import { Sequelize } from "sequelize-typescript";

const sequelize = new Sequelize("***", "postgres", "***", {
    host: "free-cnaps.csd8blq9vnbn.ap-northeast-2.rds.amazonaws.com",
    dialect: "postgres",
    models: [__dirname + "/models"],
    logging: true,
});

export default sequelize;

```

user.model.ts
```
import { AllowNull, Column, HasMany, IsEmail, Model, NotNull, PrimaryKey, Table } from "sequelize-typescript";

@Table
export default class User extends Model<User> {
    @PrimaryKey
    @Column
    public id!: string;

    @Column
    public name!: string;

    @Column
    public password!: string;

    @IsEmail
    @Column
    public email!: string;

    @Column
    public refreshtoken!: string;
}

```
handler.ts
```
import { APIGatewayEvent, Callback, Context, Handler } from "aws-lambda";
import { Sequelize } from "sequelize-typescript";
import sequelize from "./sequelize";
export const test: Handler = async (event: APIGatewayEvent, _context: Context, cb: Callback) => {
    const result = await sequelize.model("User").findAll();
    const response = {
        statusCode: 200,
        body: JSON.stringify({
            message: "DB model initializing ",
            data: result 
        }),
    };
    cb(null, response);
};

export const hello: Handler = async (event: APIGatewayEvent, _context: Context, cb: Callback) => {
    return {
        statusCode: 200,
        body: JSON.stringify({
            message: "HELLO! ",
        }),
    };
};

```

**Versions**
<!-- Please let us know which sequelize, sequelize-typescript and typescript version are you using -->
- sequelize: 5.12.2
- sequelize-typescript: 1.1.0
- typescript 3.7.4
- vscode: 1.41


**I'm submitting a ...** 
<!--  (check one with "x") -->
[x] bug report
[ ] feature request

Hello, 
This issue opened only due to previous same issue was closed
I think it is returning of bug with intellisense like here https://github.com/RobinBuschmann/sequelize-typescript/issues/333


**Actual behavior:**
![image](https://user-images.githubusercontent.com/57712891/71942449-53f7e380-31ce-11ea-9bb9-222021cda5f7.png)


**Expected behavior:**
Normal autocomplete for fieds and so on

**Steps to reproduce:**
Just open example project with vscode.
https://github.com/RobinBuschmann/sequelize-typescript-example

Sorry if this doesn't belong here but I am having an issue to re-use models across multiple databases. I _think_ this is related to `sequelize-typescript`.

When I define my model I am able to add it to a sequelize instance, but when I add it to another instance it fails.

[StackOverflow post](https://stackoverflow.com/questions/59426330/sequelize-same-model-across-multiple-databases)
Is it possible somehow to have type checking on these situations?

```
import  { User } from './models/User';

await User.create({
    // <-- type checking here for User props
});

User.destroy({
            where: {
                // <-- type checking here for User props
            }
        });

// etc
```


**Versions**
- sequelize: 5.21.3
- sequelize-typescript: 1.1.0
- typescript 3.7.4

**I'm submitting a ...** 
[x] bug report
[ ] feature request

**Actual behavior:**
I've tried using new feature - `createIndexDecorator`, but it doesn't take into account the `underscored` table param (`field` param on the column doesn't work either) - therefor it errors out on database level, because there are no such fields existing.

**Expected behavior:**
Successful creation of index.

**Steps to reproduce:**
Code is below.

**Related code:**

```ts
const OwnedItemUniqueIndex = createIndexDecorator({type: "UNIQUE"});

@Table({
  tableName: "game_owned_items",
  underscored: true
})
export default class OwnedItem extends Model<OwnedItem> {
  @PrimaryKey
  @AutoIncrement
  @Column
  public id: number;

  @OwnedItemUniqueIndex
  @Column
  public ownerId: number;

  @OwnedItemUniqueIndex
  @Column
  public itemId: number;
}
```

<!-- Before submitting an issue, please consult our docs (https://github.com/RobinBuschmann/sequelize-typescript) and check whether your problem was already reported (https://github.com/RobinBuschmann/sequelize-typescript/issues) -->

<!-- Please make sure you are posting an issue pertaining to sequelize-typescript. If you are having an issue with sequelize itself, please consult the sequelize team (https://github.com/sequelize/sequelize/issues) -->

**Versions**
<!-- Please let us know which sequelize, sequelize-typescript and typescript version are you using -->
- sequelize: 5.21.2
- sequelize-typescript: 1.1.0
- typescript: 3.7.3

**I'm submitting a ...** 
<!--  (check one with "x") -->
[ x ] bug report
[ ] feature request

**Actual behavior:**
`Error: @Column annotation is missing for "sort" of class "CampaignPhase" or annotation order is wrong.`

Currently throwing an error. (does the same thing with `@Comment()` too

**Expected behavior:**
generate the DEFAULT_VALUE in the database engine


**Related code:**
```ts
@Table
export class CampaignPhase extends Model<CampaignPhase> {
  @Column
  name!: string;

  @Column
  @NotNull
  @Default(1)
  sort!: number;

  @ForeignKey(() => CampaignTemplate)
  @Column
  templateId!: number;

  @BelongsTo(() => CampaignTemplate)
  template?: CampaignTemplate;
}
```

## Versions

- sequelize: ^5.21.2
- sequelize-typescript: ^1.0.0
- typescript: ^3.7.2

## I'm submitting a ...
[x] bug report
[  ] feature request

## Related

#244 

## Behavior

`$set` doesn't accept the `save` option described in sequelize documentation (https://sequelize.org/v5/class/lib/associations/belongs-to.js~BelongsTo.html#instance-method-set). The following code produces compilation error:

```ts
ModelA.$set('modelB', instanceOfB, { save: false })
```

It works with `// @ts-ignore` so it would be nice to add the `save` property to the `AssociationActionOptions` interface

Missing useMaster option in ICountOptions.d.ts. 
Version 0.6.x