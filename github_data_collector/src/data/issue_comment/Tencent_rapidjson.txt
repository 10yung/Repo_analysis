Referring to this, 
https://github.com/Tencent/rapidjson/issues/496

> Quoting [RFC7159](https://www.ietf.org/rfc/rfc7159.txt):
> 
> > An object structure is represented as a pair of curly brackets surrounding zero or more name/value pairs (or members).  A name is a string.  A single colon comes after each name, separating the name from the value.  A single comma separates a value from a following name.  The names within an object SHOULD be unique.
> > ```
> >  object = begin-object [ member *( value-separator member ) ]
> >          end-object
> > 
> >  member = string name-separator value
> > ```
> 
> RapidJSON follows this strictly right now. There have been enhancement requests to allow relaxation of these rules, see e.g. #36.
it says it rapidJSON follows it strictly, could you please clarify the behaviour. i used the example code provided.
and **when used duplicate  key Parse accepted**
Modified JSON with reformatting:
{
"hello": "rapidjson",
"hello": "world",
"t": true,
"f": false,
"n": null,
"i": 2432902008176640000,
"pi": 3.1416,
"a": [
1,
2,
3,
4,
5,
6,
7,
8,
9,
10,
"Lua",
"Mio"
],
"author": "Milo Yip"
}
> @pah 
Hello,

I am having trouble writing nested arrays back into the file. Rapidjson correctly reads the nested arrays but when trying to write it back to a file (even without any changes) the inner arrays do not get copied.

I use the following for writing to file:

```
//Convert it back to a string
rapidjson::StringBuffer str_buffer(0, 2048);
rapidjson::PrettyWriter<rapidjson::StringBuffer> writer(str_buffer);
s_LoadedDocument.Accept(writer);
std::string json(str_buffer.GetString(), str_buffer.GetSize());

// Write to file
std::ofstream out(s_documentPath);
out << json;
out.close();
```

This is what i am expecting to see in the json:
...
"animConfig": [[3, 3, 3, 3, 1, 0, 1, 1, 2]],
...

and this is what i get:
"animConfig": [[]],

This happens to all nested arrays in the json, not just to this one.

What am i doing wrong?

Many thanks

Hi,

I have been using the library for a long time and it's simply great!
I have one simple question, though, related to the Pointer implementation, which I couldn't answer by reading the Tutorial multiple times.

I have a use case where I keep one single JSON document instance and I have to continuously update the value of some entries in such document, as well as create new entries sometimes.

To simplify the code I have been using a function like this for both creating new entries and changing existing entries values:
```
void Test::SetValue(const char* key, const char* value)
{
   Pointer(key).Set(m_jsonDoc, value);
};
```
So the question would be: Is it ok to repeatedly call Pointer().Set() on the same key? Or does it cause the "old" value to not be properly disposed, thus leading to memory leak? If so the best option is to use Pointer().Swap() for existing entries?

Thanks!

Fixed some wrong links.
Hi,

I want to implement a generic rest parser.
I was going through the rapidjson library & found it very useful.
My requirement is to parse a really big complex json file & extract the values provided as the arguments in c++. Lets say following is an excerpt from my json file :

> {
> "states": {
>       "entry": [
>         {
>           "key": "ENTITY",
>           "value": {
>             "barring": false,
>             "id": "DefaultDeviceLifeCycle_Active",
>             "initial": true,
>             "name": "Active",
>             "final": false      }
>         }
>       ]
>     }
> }
> 

Parameters like **states:entry:value:id** would be provided & I want to return the value of id tag.

Can you please provide some pointers on it that how can it be implemented??
Hello,

   I am new to rapidjson.. I have this huge JSON file which i am parsing and performing different modifications on it. I am able to achieve most of it. Struck at this one, unable to figure out how to do it..

A simplified example.. This is how the JSON tree looks like
```

"Object1": {
    "label-1":  {  "key1": "value1" },
     "label-2": {
            "key2": {
                 "value2": {  "key2a": "value2b" }
             }
       },
     "label-3": [
           "description"
       ],
. 
.
<snip>
.
.
    "label-m": { "key-m": "feature-m" }
.
.
},

```

The "label-m" object has to be changed to the following  after modification (rest of the object remains the same):

`"label-m": 120,`

The "key-m" is a special keyword. I first get the value for it i.e., "feature-m". And then get the corresponding value (a number) against "feature-m" from a different file (This part is have got it working). 

What i am unable to do is delete the "label-m" object and  add the new one with value=120.. Here is the code i am using:

```C++

for (rapidjson::Value::MemberIterator childNode = node.MemberBegin(); childNode != node.MemberEnd(); ++childNode)
{
       if(childNode->value.IsObject())
       {
             if(childNode->value.HasMember("key-m"))
             {
                    if((childNode->name == "label-m"))
                    {
                        // Get the value (120) from the feature file. Skipping that code as its irrelevant here.
                        Value& s = childNode->value;
                        ChildNode->value.RemoveMember(""key-m")
                         s.SetInt(120)
                    }
               }
     }
}

```

If i do this, the RemoveMember removes the {key-m: feature-m} object, but setInt crashes (probably because i am trying to change the type of the object?). So do i have to delete the entire "label-m" object and re-add it?  I have tried EraseMember too, but couldnt get it to work. Can u please help me in understanding how i can achieve this using the Memberiterator.

Please note, though the JSON tree i have shown above contains only 1 Object, the actual tree i am parsing contains thousands of objects. Hence i am using the MemberIterator in a recursive fashion (not shown above) to walk the entire tree.


 


When generate long json string, need 0.5~1s
I've been running into issues with the way that decimal numbers are stored as doubles, as they are not precise. To remedy the issue, I made some changes to the code which replace the double in the Number union with a class we created called DoubleString, which contains a double, which stores the value, as well as a fixed character array of 24 bytes (making the struct 32 bytes).

It's a bit hackey, but it's been working. See (https://github.com/Tencent/rapidjson/issues/696), though note we went with a 24 byte character array instead of 32.

I'm wondering if there are other options than our hack of it there have been any other improvements in double handling. I do see an option: kParseNumbersAsStringsFlag, but I'm not sure what that does.

To give some additional info:
We have a fixed decimal class which can represent values like prices very well with no loss, and the way we use it with our hack is that when we know we need the original text for a number like  a price, we call a new function we added "GetDoubleString()", which returns the entire struct we used to replace the "d" member in the union Number. This gives us access to the character buffer.


Having a value:
```
rapidjosn::Value value(1);
```

and a schema:
```
{
    "allOf": [
        { "type": "string" },
        { "type": "string", "minLength": 2 },
        { "type": "string", "pattern": "^z" }
    ]
}
```

`rapidjson::SchemaValidator` gives an error object:
```
{
  "type": [
    {
      "expected": [
        "string"
      ],
      "actual": "integer",
      "instanceRef": "#",
      "schemaRef": "#/allOf/0"
    },
    {
      "expected": [
        "string"
      ],
      "actual": "integer",
      "instanceRef": "#",
      "schemaRef": "#/allOf/1"
    },
    {
      "expected": [
        "string"
      ],
      "actual": "integer",
      "instanceRef": "#",
      "schemaRef": "#/allOf/2"
    }
  ]
}
```

Which is not the one is expected reading the documentation for the structure of the error object.


I would rather expect the same error structure that is geven for `oneOf` and `anyOf`:
```
{
  "anyOf": {
    "errors": [
      {
        "type": {
          "expected": [
            "string"
          ],
          "actual": "integer",
          "instanceRef": "#",
          "schemaRef": "#/anyOf/0"
        }
      },
      {
        "type": {
          "expected": [
            "string"
          ],
          "actual": "integer",
          "instanceRef": "#",
          "schemaRef": "#/anyOf/1"
        }
      },
      {
        "type": {
          "expected": [
            "string"
          ],
          "actual": "integer",
          "instanceRef": "#",
          "schemaRef": "#/anyOf/2"
        }
      }
    ],
    "instanceRef": "#",
    "schemaRef": "#"
  }
}
```

So either the documentation or implementation should be fixed.
In case if the documentation incorrect and the implementation is correct,
I wonder why there exists such a thing as 'error merging' solely for `allOf`?
I am using a library that accepts something that is copyable.
Is threre any class i can use that has copy constructor availble?
like rapidjson::Value, rapidjson::GenaricValue, etc.