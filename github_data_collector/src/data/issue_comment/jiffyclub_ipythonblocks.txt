Hi!

First of all, love this project! Using it to teach matrix indexing, and finally simulate and animate an epidemic.

One thing I find a bit confusing though is your choice of indexing which is different from numpy e.g.

```python
grid = BlockGrid(20, 10, block_size=4)
print(grid.shape)
>>> (20, 10)
grid[9, 19]
```
As opposed to numpy
```python
grid = np.zeros((20,10))
print(grid.shape)
>>> (20, 10)
grid[19, 9]
```


current ipythonblocks draw grids whose top-left corner is on [0, 0]
sometimes, we will use, for example, grid who occupy [1,2]-[6,10]
so it will be convenient if ipythonblocks support to custom this parameters

this is actally 2 questions
1. can we show the coordinate axes with arrow, i.e. x/y, when we call show()?
2. I noticed that in ipythonblocks, x-axis is from left to right, y-axis is from top to down. But it is also common to use (at least) y-axis which is from down to top. 
Thnaks

Hi All,
this is an interesting bug. When i attempt to render a grid using ImageGrid, i get space where the grid should render in the console BUT no grid. Or i get a series of lines - one line for each cell with the appropriate assigned colors, however no actual cells. this issue is a bit baffling because it works perfectly in notebook. doesn't it all just use the ipython renderer?

for example, this code doesn't render:
     from ipythonblocks import ImageGrid
     grid = ImageGrid(5, 3)
     grid.show()

This code renders lines:
row = ImageGrid(8, 1)
row[0, 0] = (0, 0, 0)   # no color => black
row[1, 0] = (255, 255, 255) # all colors => white
row[2, 0] = (255, 0, 0) # all red
row[3, 0] = (0, 255, 0) # all green
row[4, 0] = (0, 0, 255) # all blue
row[5, 0] = (255, 255, 0) # red and green
row[6, 0] = (255, 0, 255) # red and blue
row[7, 0] = (0, 255, 255) # green and blue
row.show()

Everything works perfectly in notebook so i understand if this is a notebook focused package!
thank you
Leah 

It will make everybody's life slightly easier if we call clear_output first instead of last when flashing.

Hi

Ever since I first saw ipythonblocks a few weeks ago, I started to wonder about the extent to which it might be useful as a way visualising the structure of pandas dataframes, and the results of applying various transformations to them.

I've started sketching some proof of concept ideas out here: http://nbviewer.ipython.org/gist/psychemedia/9795643

If anyone else is interested in chatting through ideas about how to push pandas DataFrame visualisations using ipythonblocks, or is already further on than my experiments are (or has taken a different approach to the same or related issues), please let me know...

It'd be cool to be able to do NumPy-esque things like:

``` python
grid[grid.rgb == colors.Red] = colors.Blue
```

Make `.red`, `.green`, and `.blue` properties for the grid classes (maybe just `BlockGrid` if it can be designed right). These should return a monochrome grid of the right class representing the color intensities of the corresponding property.

These will also support setting, either by a single number or another monochrome grid.

Monochrome grid support requires #24.

Exactly the same as the existing grids but monochrome.

Considerations:
- Do we need a mode keyword/attribute or does it suffice to support single int color specs and let the mode be implied?
- Is the internal representation single digits or do we keep the the RGB tuples and make them all the same? Keeping the tuples has some advantages when it comes to the HTML repr since that's expecting a triplet.
