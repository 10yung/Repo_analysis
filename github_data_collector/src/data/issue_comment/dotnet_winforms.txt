## Proposed Changes
- Fix https://github.com/dotnet/winforms/issues/1344

###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/2737)
## Proposed Changes
- Add missing `IFont` methods
- Make `IFont` and `IPicture` tests `WinFormsFact` to run on STA thread
- Make `HDC`/`HPALETTE`/``HBITMAP`/`HENHMETAFILE`/`HMETAFILE`/`HFONT` `int`s not `uint`s  due to sign extension bugs

/cc @weltkante @JeremyKuhne 


Fixes #2002, #2003, #2004, #2005, #2007

###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/2736)
While updating the PaddingConverter tests in PR #2679 I noticed that it contains tests which only succeed on english (or similar) environments which use comma as separator. Some languages use semicolon due to comma being used as decimal separator. This leads to false-positive failing tests on developer machines.

Failing tests are [PaddingConverter_ConvertFrom_String_ReturnsExpected](https://github.com/dotnet/winforms/blob/fde3805ea206227ad01266c7d25ce0ed2df4996f/src/System.Windows.Forms/tests/UnitTests/System/Windows/Forms/PaddingConverterTests.cs#L41) on e.g. [this input](https://github.com/dotnet/winforms/blob/fde3805ea206227ad01266c7d25ce0ed2df4996f/src/System.Windows.Forms/tests/UnitTests/System/Windows/Forms/PaddingConverterTests.cs#L30) as well as [PaddingConverter_ConvertTo_String_ReturnsExpected](https://github.com/dotnet/winforms/blob/fde3805ea206227ad01266c7d25ce0ed2df4996f/src/System.Windows.Forms/tests/UnitTests/System/Windows/Forms/PaddingConverterTests.cs#L80). (I'm only selectively running tests locally so I'd assume there could be more instances of this problem in other tests.)

Do you think tests should be running under fixed CurrentCulture (maybe some sort of fixture)? Maybe check how corefx is solving this problem when they are testing their converters/parsers.
Capture the surface of public API

Relates to #2705
Relates to #2092


<!-- Please read CONTRIBUTING.md before submitting a pull request -->


<!-- We are in TELL-MODE the following section must be completed -->

## Customer Impact

- None, capturing the shipped public API surface only.

## Regression? 

- No

## Risk

- None

<!-- end TELL-MODE -->



###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/2732)
- Copy v3.0 public API surface reports as baseline
- Capture the surface of public API
- Mark new API as shipped

Relates to #2705
Relates to #2112

<!-- Please read CONTRIBUTING.md before submitting a pull request -->


<!-- We are in TELL-MODE the following section must be completed -->

## Customer Impact

- None, capturing the shipped public API surface only.

## Regression? 

- No

## Risk

- None

<!-- end TELL-MODE -->


###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/2731)
<!-- Read https://github.com/dotnet/winforms/blob/master/Documentation/issue-guide.md -->

* .NET Core Version: 
5.0

* Have you experienced this same bug with .NET Framework?: 
Yes

**Problem description:**

<!--
    https://www.w3.org/WAI/WCAG21/Understanding/content-on-hover-or-focus.html    
Describe the current behavior, what is wrong or not working as expected.
    Provide as much information as possible, including callstack for crashes/exceptions, screenshots or animations.
  -->
WinForms ToolTip should meet WCAG 2.1 requirements and satisfy the rule 1.4.13 "Content on Hover or Focus". For more details please see [WCAG 2.1 Criterion 1.4.13](https://www.w3.org/WAI/WCAG21/Understanding/content-on-hover-or-focus.html)

**Expected behavior:**
ToolTip should become visible when hover over.

**Minimal repro:**
1. Create WinForms app with some control and ToolTip.
2. Add the ToolTip text for the control.
3. Run app, mouse over the control. ToolTip appears after a second.
4. Mouse over the ToolTip (mouse should be out of the control). Observe: ToolTip disappears.

Hello developers,
please help localization team to answer question from translator.
In case translator is not sure about context/meaning/localizability of string we raise a question.

Source:
The store has reached its limit of '{0}' resources.

ID & File Name:
 0; "ErrorResourcePerStoreLimitReached"
build___test___sign\outputs\build\loc\en\src\Microsoft.Azure.AppConfiguration.Rp\Resources\Localization.Strings

Query:
Would you please clarify the placeholder? Is it a numeric value or a resource name?

Other affected resource ids:
".resx", 0; "ErrorSkuDowngradeNotAllowed"
".resx", 0; "ErrorSkuPerSubscriptionLimitReached
Hello developers,
please help localization team to answer question from translator.
In case translator is not sure about context/meaning/localizability of string we raise a question.

Source:
Deletes a configuration store event grid filter.

ID & File Name:
 0; "FriendlyConfigurationStoreEventGridFiltersDeleteOperationDescription"
build___test___sign\outputs\build\loc\en\src\Microsoft.Azure.AppConfiguration.Rp\Resources\Localization.Strings.

All the affected reosurces ids:

".resx", 0; "FriendlyConfigurationStoreEventGridFiltersDeleteOperationDescription"
".resx", 0; "FriendlyConfigurationStoreEventGridFiltersDeleteOperationName"
".resx", 0; "FriendlyConfigurationStoreEventGridFiltersReadOperationDescription"
".resx", 0; "FriendlyConfigurationStoreEventGridFiltersReadOperationName"
".resx", 0; "FriendlyConfigurationStoreEventGridFiltersResourceType"
".resx", 0; "FriendlyConfigurationStoreEventGridFiltersWriteOperationDescription"
".resx", 0; "FriendlyConfigurationStoreEventGridFiltersWriteOperationName"
* .NET Core Version: **3.1.1 (current)**

* Have you experienced this same bug with .NET Framework?: **Yes**

**Problem description:**

Since inception, there has always been a thin border or spacing margin present on `TabControl` objects when its appearance property is set to `Normal` (the default). This border usually measures 1 pixel high on the bottom and 2 pixels wide on the right. It cannot be hidden or styled, and is not the same as the usual `BorderStyle` property which some controls implement.

This is a tiny but long-standing appearance bug. I have attached a screenshot with the border highlighted in red. This was done in MSPAINT as the the border cannot actually be styled.

![TabControlBorderBug](https://user-images.githubusercontent.com/51760052/72478348-c749b880-37bf-11ea-9251-30bfed39884c.png)

**Expected behavior:**

The border/spacing margin should not be present. The `TabControl` should fill in these holes with its content.

**Suggestions:**

* Fix the underlying painting event to remove the border by filling in the empty space with the selected tab page's content.

* Implement a `BorderStyle` property which can show or hide this border. However, it may technically not be considered a border since it only encases the control on the bottom and left.

* Remove the spacing altogether. This may cause issues with control positioning on older projects because the size of the control changes slightly.

**Minimal repro:**

Create a .NET Core WinForms project and add a `TabControl` and a few `TabPages` to the main form. Here's some code if you are using a version of Visual Studio which does not have the WinForms designer ready. Some color is added for visibility:

```
BackColor = Color.Pink;

TabControl tc = new TabControl();

tc.TabPages.Add("tp1");
tc.TabPages.Add("tp2");
tc.TabPages.Add("tp3");

TextBox tb = new TextBox();
tb.BorderStyle = BorderStyle.None;

tc.TabPages[1].BackColor = Color.LightBlue;

Controls.Add(tc);
tc.SelectTab(1);
```
<!-- Please read CONTRIBUTING.md before submitting a pull request -->

Fixes #2717
Original bug: [604799](https://devdiv.visualstudio.com/DevDiv/_workitems/edit/604799): [Accessibility] TabPage has no keyboard tooltip

## Proposed changes

- Add a virtual IsHoveredWithMouse property to change its value in inherited classes
- Change switch-case implementation in `KeyboardToolTipStateMachine.cs` due to extremely inconvenient use when debugging
- Implement keyboard tooltips for TabPages. Now a Tab and a Page have one tooltip
- Add a TabControl test app

<!-- We are in TELL-MODE the following section must be completed -->

## Customer Impact

- A user can get a tooltip using a keyboard 

## Regression? 

- No

## Risk

- Minimal

<!-- end TELL-MODE -->


## Screenshots <!-- Remove this section if PR does not change UI -->

### Before
- TabPages have no keyboard tooltips
- A TabPage tab has an incorrect tooltip text (TabControl text instead TabPage.ToolTipText property value)
- A user gets only a TabControl tooltip using a Tab-navigation
![Before](https://user-images.githubusercontent.com/49272759/72433043-9bbbd380-37a9-11ea-9fac-340f7fbbbef4.gif)

<!-- TODO -->

### After
- TabPages have keyboard tooltips
- TabPage tab has the same tooltip as a page. If set a new tooltip or change ToolTipText property value it will affect both tooltips. It is a simulation of that a tab tooltip and a page tooltip are one united tooltip
![Fixed](https://user-images.githubusercontent.com/49272759/72431933-f9025580-37a6-11ea-8beb-d03078f408c1.gif)

- A user can get TabControl tooltip if this TabControl has no pages
![image](https://user-images.githubusercontent.com/49272759/72432466-2ef40980-37a8-11ea-9e78-d7fd5b05d0d6.png)



<!-- TODO -->


## Test methodology <!-- How did you ensure quality? -->

- CTI
- Manual UI testing


## Test environment(s) <!-- Remove any that don't apply -->

- SDK Version: 5.0.100-alpha1-016143
- Microsoft Windows [Version 10.0.18363.592]


<!-- Mention language, UI scaling, or anything else that might be relevant -->


###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/2719)