Confirm by changing [ ] to [x] below to ensure that it's a bug:
- [x] I've gone though [Developer Guide](https://docs.aws.amazon.com/sdk-for-javascript/v2/developer-guide/welcome.html) and [API reference](https://docs.aws.amazon.com/AWSJavaScriptSDK/latest/)
- [x] I've checked [AWS Forums](https://forums.aws.amazon.com) and [StackOverflow](https://stackoverflow.com/questions/tagged/aws-sdk-js) for answers
- [x] I've searched for [previous similar issues](https://github.com/aws/aws-sdk-js/issues) and didn't find any solution
  
**Describe the bug**
The type declarations for SDK functions that receive callbacks are incorrect.

For instance, from SQS:
```
receiveMessage(params: SQS.Types.ReceiveMessageRequest, callback?: (err: AWSError, data: SQS.Types.ReceiveMessageResult) => void): Request<SQS.Types.ReceiveMessageResult, AWSError>;
```
this indicates that `err` will always be an `AWSError`, whereas we know it could be `null` when there is no error.

**Is the issue in the browser/Node.js?**
Any Typescript code

**Details of the browser/Node.js version**
This is not version dependent as it's a type declaration error

**SDK version number**
2.604.0

**To Reproduce (observed behavior)**
This is a typing error, so any code that expects AWSError to potentially be null could have problems.

**Expected behavior**
Should be

```
receiveMessage(params: SQS.Types.ReceiveMessageRequest, callback?: (err: AWSError | null, data: SQS.Types.ReceiveMessageResult | null) => void): Request<SQS.Types.ReceiveMessageResult, AWSError>;
```

Confirm by changing [ ] to [x] below to ensure that it's a bug:
- [x] I've gone though [Developer Guide](https://docs.aws.amazon.com/sdk-for-javascript/v2/developer-guide/welcome.html) and [API reference](https://docs.aws.amazon.com/AWSJavaScriptSDK/latest/)
- [x] I've checked [AWS Forums](https://forums.aws.amazon.com) and [StackOverflow](https://stackoverflow.com/questions/tagged/aws-sdk-js) for answers
- [x] I've searched for [previous similar issues](https://github.com/aws/aws-sdk-js/issues) and didn't find any solution
  
**Describe the bug**
The `BucketCannedACL` type could/should list the `aws-exec-read` and `log-delivery-write` values to match the documentation:

https://github.com/aws/aws-sdk-js/blob/eb36c972d7dfa729c8e9c7e2d2c806b76ffc071a/clients/s3.d.ts#L892

See https://docs.aws.amazon.com/AmazonS3/latest/dev/acl-overview.html#canned-acl

**Is the issue in the browser/Node.js?**
Both (TypeScript definitions)

**SDK version number**
v2.603.0

Confirm by changing [ ] to [x] below:
- [ x] I've gone though [Developer Guide](https://docs.aws.amazon.com/sdk-for-javascript/v2/developer-guide/welcome.html) and [API reference](https://docs.aws.amazon.com/AWSJavaScriptSDK/latest/)
- [x] I've checked [AWS Forums](https://forums.aws.amazon.com) and [StackOverflow](https://stackoverflow.com/questions/tagged/aws-sdk-js) for answers

**Describe the question**

I am trying to set diferente ACL when I use the putBucketAcl api. Regarding documentacion, this is how params look like:

```
const params = {
        Bucket: "graphql-aws",
        AccessControlPolicy: {
          Grants: [
            {
              Grantee: {
                Type: "Group",
                URI: "http://acs.amazonaws.com/groups/global/AllUsers"
              },
              Permission: "READ"
            },
            {
              Grantee: {
                Type: "Group",
                URI: "http://acs.amazonaws.com/groups/s3/LogDelivery"
              },
              Permission: "READ_ACP"
            },
            {
              Grantee: {
                Type: "Group",
                URI: "http://acs.amazonaws.com/groups/s3/LogDelivery"
              },
              Permission: "WRITE"
            }
          ]
        }
      };
```

I have check with stackflow, and params are correct, but when I use the putBucketAcl(params) api, I have the following error:

> "MalformedACLError: The XML you provided was not well-formed or did not validate against our published schema"

Any suggestion? I have checked millions of times and I don see where I am wrong.

Thanks.
**Is your feature request related to a problem? Please describe.**

When a Request is pageable, it would be natural to iterate over those pages using an async generator. However, there is no built-in way to do this.

The Request class does offer various pagination helpers, and it offers a `.promise()` method for use in async code, but there are no helpers to facilitate async iteration.

**Describe the solution you'd like**

Example code:

```js
const S3 = new AWS.S3();
const request = S3. listObjectsV2({
    bucketName: 'MyBucket',
});
for await (const data of request.pages()) {
  for (const object of data.Contents) {
    // Do something with object
  }
}
```

In this minimal example, the existing `.eachPage(callback)` method could be used instead. But async generators are a standard JavaScript type and can be easily and idiomatically manipulated:

```js
import { mapMany, filter } from './async-utils'; // Implementation omitted.

const S3 = new AWS.S3();
const request = S3. listObjectsV2({
    bucketName: 'MyBucket',
});
const objects = mapMany(request.pages(), data => data.Contents);
const filtered = filter(objects, object => object.Size > 1000);
for await (const object of filtered) {
  // Do something with object
}
```

I used S3 in the above examples because it's simple and ubiquitous, but the applications extend to any pageable API.

The `.pages()` method name is a placeholder; any number of names would work.

**Describe alternatives you've considered**

The obvious alternative is not using async iterators. The existing helpers could be used to solve the same problems in a callback-oriented style, just as the `.promise()` method could be replaced with callback-oriented code.

Another alternative would be writing my own function to turn a Request into an async generator. The implementation is not especially complicated. However, this seems like the sort of low-level functionality that would benefit from a standardized, well-tested implementation at the SDK level. In addition, a method is likely to read more naturally in code.

A similar helper could be used to iterate over individual items, like the experimental `.eachItems(callback)` method.
- [ x] I've gone though [Developer Guide](https://docs.aws.amazon.com/sdk-for-javascript/v2/developer-guide/welcome.html) and [API reference](https://docs.aws.amazon.com/AWSJavaScriptSDK/latest/)
- [ x] I've checked [AWS Forums](https://forums.aws.amazon.com) and [StackOverflow](https://stackoverflow.com/questions/tagged/aws-sdk-js) for answers
- [ x] I've searched for [previous similar issues](https://github.com/aws/aws-sdk-js/issues) and didn't find any solution
  
**Describe the bug**
Setting `ACL: 'public-read'` when the bucket has "Block" permissions gives unhelpful error of "Access Denied".

**Is the issue in the browser/Node.js?**
Node.js

**If on Node.js, are you running this on AWS Lambda?** No.

**To Reproduce (observed behavior)**
Set the bucket permissions so it has "Block All"
```
var uploadParams = {Bucket: 'example-bucket', Key: '/test', Body: '', ACL: 'public-read'};
var putObjectPromise = await s3.upload(uploadParams).promise();
```
**Expected behavior**
The error message should provide a more helpful / relevant message such as "Invalid Parameters" or "Incompatible Parameters". 

Confirm by changing [ ] to [x] below:
- [x] I've gone though [Developer Guide](https://docs.aws.amazon.com/sdk-for-javascript/v2/developer-guide/welcome.html) and [API reference](https://docs.aws.amazon.com/AWSJavaScriptSDK/latest/)
- [x] I've checked [AWS Forums](https://forums.aws.amazon.com) and [StackOverflow](https://stackoverflow.com/questions/tagged/aws-sdk-js) for answers

**Describe the question**

Hi AWS teams,

I have a treatment Nodejs server which produces .png tiles for Leaflet maps, and then upload them to a S3 bucket.
My server has to upload very quickly about 900 images of 100 kb to S3 bucket. Here is one example of tile image: 
![image](https://user-images.githubusercontent.com/25119847/72228557-fede1800-35a7-11ea-9786-4079f56d96b7.png)
**My problem**: it takes a huge time to upload the 900 tiles images (about 20 minutes), even if the upload is done from an EC2 server.

I tried to parallelise my s3.upload() processes in my nodejs app with Promise.all() but it doesn't solve anything.

Is that an S3 limitation or am i doing things wrong ? (like using the wrong methods s3.upload ?)

Thanks a lot for your help !


Here is an extract of my code : 
```JS
const aws = require('aws-sdk');
const s3 = new aws.S3({
    httpOptions: {
        timeout: 60 * 1000,
    },
});

... one more code later

await Promise.all(
    files.map((file) => s3.upload({
                Bucket: myBucket,
                ACL: 'public-read',
                Key: file.s3Path,
                Body: file.stream,
                ContentType: 'image/png',
                CacheControl: 'max-age=31556926',
            })
            .promise()
            .then(() => {
                console.log('Success');
            })
            .catch(err => console.error(err))
    ),
).then(function(result) {
    console.log('upload finished :', result);
}).catch(err => console.error(err));
```

After updating the module to version 2.600.0 we notice an increasement in the API latency from 100 ms to 4/5 seconds (Percentile 95). After rolling back the update, the latency normalized.
We are only using the SDK for S3 requests.

<img width="554" alt="Screen Shot 2020-01-09 at 16 38 39" src="https://user-images.githubusercontent.com/30275211/72099125-b5b76b00-32fe-11ea-8ee6-25da084abafe.png">

Confirm by changing [ ] to [x] below to ensure that it's a bug:
- [x] I've gone though [Developer Guide](https://docs.aws.amazon.com/sdk-for-javascript/v2/developer-guide/welcome.html) and [API reference](https://docs.aws.amazon.com/AWSJavaScriptSDK/latest/)
- [x] I've checked [AWS Forums](https://forums.aws.amazon.com) and [StackOverflow](https://stackoverflow.com/questions/tagged/aws-sdk-js) for answers
- [x] I've searched for [previous similar issues](https://github.com/aws/aws-sdk-js/issues) and didn't find any solution
  
**Describe the bug**

It works on all other browsers

On IE11 I am getting `{ code:  "NetworkingError", description: "Network Failure" }`, in `send` function's callback.
IE is making only GET requests to not valid endpoint 
**https://bucket-name.s.3./..a.m.a.z.o.n.a.w.s...c.o.m/prefix/direct_uploads/111111/bd0b0659-8f8a-49c0-8925-fa9f238720fa-file.png**
**Note dots between amazonaws.com** 


**Is the issue in the browser/Node.js?**
Browser

**Details of the browser/Node.js version**
IE 11 v11.535.18362.0

**SDK version number**
Example: v2.600.0, tested also on v.2.150.0

**To Reproduce (observed behavior)**
Standard usage
```
AWS.config.update({
...
})

this.uploader = new S3.ManagedUpload({
    params: {
      Bucket: "VALUE
      Key: "VALUE"`,
      Body: origFile,
      ContentType: "VALUE"
    }
})

this.uploader.send((err, resultData) => {
   console.log(err)
    ...
})
```

**Expected behavior**
Upload works as expected

The check throws an error with a default config when using an access point uri to upload.  Possibly this is due to something else that should be handled separately but the check above makes the sdk work for me as expected.

I am sure there is a more official way of referencing the default endpoint value but figure I'd illustrate the fix for quick and easy testing.

fixes #3041

##### Checklist

- [x] `npm run test` passes
- [ ] `.d.ts` file is updated
- [] changelog is added, `npm run add-change`
- [ ] run `bundle exec rake docs:api` and inspect `doc/latest/index.html` if documentation is changed
- [ ] run `npm run integration` if integration test is changed
- [ ] non-code related change (markdown/git settings etc)

I just edited using github quick in all honesty :-P 
Confirm by changing [ ] to [x] below to ensure that it's a bug:
- [x] I've gone though [Developer Guide](https://docs.aws.amazon.com/sdk-for-javascript/v2/developer-guide/welcome.html) and [API reference](https://docs.aws.amazon.com/AWSJavaScriptSDK/latest/)
- [x] I've checked [AWS Forums](https://forums.aws.amazon.com) and [StackOverflow](https://stackoverflow.com/questions/tagged/aws-sdk-js) for answers
- [x] I've searched for [previous similar issues](https://github.com/aws/aws-sdk-js/issues) and didn't find any solution
  
**Describe the bug**

https://github.com/aws/aws-sdk-js/blob/master/lib/services/s3.js#L451-L456

Note that when I comment the above code out everything does work as expected! So it appears it just needs to actually check if the endpoint is custom rather than whether any endpoint exists at all.

This code is running for me when I try to upload a stream to an access point.  I am in no way setting any custom endpoints here.  When I check what the value of `service.endpoint` is, it is `s3.amazonaws.com` which I never set manually at any point.

I can retrieve data fine through the endpoint without this error so it is only when I try to run `s3.upload(params)`

```js
const S3 = new AWS.S3({
  accessKeyId: config.get('compliance.s3SecretID'),
  secretAccessKey: config.get('compliance.s3SecretKey'),
});

async function uploadComplianceDocument(
  Key: string,
  Body: readable$Stream,
  MetaData?: { [string]: string },
) {
  const params = {
    ACL: 'bucket-owner-full-control',
    Bucket: COMPLIANCE_BUCKET,
    Key,
    Body,
    MetaData,
  };

  const result = await S3.upload(params)
    .promise()
    .catch(err => {
      console.error('[ERROR] | Failed to upload file to S3: ', params, err);
      throw err;
    });

  return result;
}
```

In this case "COMPLIANCE_BUCKET" is an access point arn which i can upload to without problem using the aws-sdk cli via something similar to below (copied from [documentation page](https://docs.aws.amazon.com/AmazonS3/latest/dev/using-access-points.html))

```
aws s3api put-object --bucket arn:aws:s3:us-west-2:123456789012:accesspoint/prod --key my-image.jpg --body my-image.jpg
```

**Is the issue in the browser/Node.js?**
Node.js

**If on Node.js, are you running this on AWS Lambda?**
no

**Details of the browser/Node.js version**

```
$ node -v
v10.15.1
```

**SDK version number**

```
$ npm list aws-sdk
└── aws-sdk@2.600.0
```

**To Reproduce (observed behavior)**

See code above, I am retrieving a stream using `https` then giving it to s3 as `Body` which I have done in past.  Same instance of S3 works fine for other operations through the access point.

**Expected behavior**
Should work

**Apparent Solution**

https://github.com/aws/aws-sdk-js/blob/master/lib/services/s3.js#L451-L456

From running tests it would appear this could potentially be fixed by changing the code in the URL above to 

```js
if (req.service._originalConfig.endpoint && req.service._originalConfig.endpoint !== 's3.amazonaws.com') {
      throw AWS.util.error(new Error(), {
        code: 'InvalidConfiguration',
        message: 'Custom endpoint is not compatible with access point ARN'
      });
    }
```

Although this also probably needs to take into account region when creating the S3 instance. 