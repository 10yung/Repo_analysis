
What's the best way to convert an rray to a long-form tibble? Currently, the best way I know is to do `. %>% as.table() %>% as_tibble(.name_repair = "unique")`, would you support `as_tibble.rray()` and `as_rray.tibble()`?

(By the same token, would you support `as_rray.table()`?)

``` r
library(tidyverse)
library(rray)

titanic_rray <-
  Titanic %>%
  unclass() %>% # FIXME: Should work without
  as_rray()

Titanic %>% # FIXME: Should work similarly with titanic_rray %>% ...
  as_tibble()
#> # A tibble: 32 x 5
#>    Class Sex    Age   Survived     n
#>    <chr> <chr>  <chr> <chr>    <dbl>
#>  1 1st   Male   Child No           0
#>  2 2nd   Male   Child No           0
#>  3 3rd   Male   Child No          35
#>  4 Crew  Male   Child No           0
#>  5 1st   Female Child No           0
#>  6 2nd   Female Child No           0
#>  7 3rd   Female Child No          17
#>  8 Crew  Female Child No           0
#>  9 1st   Male   Adult No         118
#> 10 2nd   Male   Adult No         154
#> # â€¦ with 22 more rows

Titanic %>%
  as_tibble() %>%
  xtabs(n ~ ., .) %>% # FIXME: Should work without these three lines
  as.table() %>%
  unclass() %>%
  as_rray()
#> <rray<dbl>[,2,2,2][4]>
#> , , Age = Adult, Survived = No
#> 
#>       Sex
#> Class  Female Male
#>   1st       4  118
#>   2nd      13  154
#>   3rd      89  387
#>   Crew      3  670
#> 
#> , , Age = Child, Survived = No
#> 
#>       Sex
#> Class  Female Male
#>   1st       0    0
#>   2nd       0    0
#>   3rd      17   35
#>   Crew      0    0
#> 
#> , , Age = Adult, Survived = Yes
#> 
#>       Sex
#> Class  Female Male
#>   1st     140   57
#>   2nd      80   14
#>   3rd      76   75
#>   Crew     20  192
#> 
#> , , Age = Child, Survived = Yes
#> 
#>       Sex
#> Class  Female Male
#>   1st       1    5
#>   2nd      13   11
#>   3rd      14   13
#>   Crew      0    0
```

<sup>Created on 2019-12-04 by the [reprex package](https://reprex.tidyverse.org) (v0.3.0)</sup>
The terminology for what we do with trailing commas is incorrect. We don't "drop trailing commas". It is more appropriate for us to "expand unspecified trailing indices"

This requires a very small change in the code, changing to `.ignore_empty = "none"` here. But requires changes to the documentation and more tests.

https://github.com/r-lib/rray/blob/525539dba63435d39f828b75c2e3ed8f1e5b9ead/R/subset.R#L179

This is what we should get:

``` r
library(rray)

x <- rray(1:8, c(2,2,2))

dim(x)
#> [1] 2 2 2

# max number of commas allowed is dim-1
x[,,1]
#> <rray<int>[,2,1][2]>
#> , , 1
#> 
#>      [,1] [,2]
#> [1,]    1    3
#> [2,]    2    4

# missing dimensions are always "expanded out"

# equivalent - expanded to `x[,,]`
x[]
#> <rray<int>[,2,2][2]>
#> , , 1
#> 
#>      [,1] [,2]
#> [1,]    1    3
#> [2,]    2    4
#> 
#> , , 2
#> 
#>      [,1] [,2]
#> [1,]    5    7
#> [2,]    6    8
x[,]
#> <rray<int>[,2,2][2]>
#> , , 1
#> 
#>      [,1] [,2]
#> [1,]    1    3
#> [2,]    2    4
#> 
#> , , 2
#> 
#>      [,1] [,2]
#> [1,]    5    7
#> [2,]    6    8
x[,,]
#> <rray<int>[,2,2][2]>
#> , , 1
#> 
#>      [,1] [,2]
#> [1,]    1    3
#> [2,]    2    4
#> 
#> , , 2
#> 
#>      [,1] [,2]
#> [1,]    5    7
#> [2,]    6    8

# error - max number of commas is `3 - 1 = 2`
x[,,,]
#> Error: The dimensionality of `x` is 3. Cannot subset into dimension 4.

# equivalent - expanded to `x[1,,]`
x[1]
#> <rray<int>[,2,2][1]>
#> , , 1
#> 
#>      [,1] [,2]
#> [1,]    1    3
#> 
#> , , 2
#> 
#>      [,1] [,2]
#> [1,]    5    7
x[1,]
#> <rray<int>[,2,2][1]>
#> , , 1
#> 
#>      [,1] [,2]
#> [1,]    1    3
#> 
#> , , 2
#> 
#>      [,1] [,2]
#> [1,]    5    7
x[1,,]
#> <rray<int>[,2,2][1]>
#> , , 1
#> 
#>      [,1] [,2]
#> [1,]    1    3
#> 
#> , , 2
#> 
#>      [,1] [,2]
#> [1,]    5    7

# equivalent - expanded to `x[,1,]`
x[,1]
#> <rray<int>[,1,2][2]>
#> , , 1
#> 
#>      [,1]
#> [1,]    1
#> [2,]    2
#> 
#> , , 2
#> 
#>      [,1]
#> [1,]    5
#> [2,]    6
x[,1,]
#> <rray<int>[,1,2][2]>
#> , , 1
#> 
#>      [,1]
#> [1,]    1
#> [2,]    2
#> 
#> , , 2
#> 
#>      [,1]
#> [1,]    5
#> [2,]    6

# with padding - "padding applied before expansion"
# (number of dims specified = 1, pad twice)
x[pad(), 1] # == x[,,1]
#> <rray<int>[,2,1][2]>
#> , , 1
#> 
#>      [,1] [,2]
#> [1,]    1    3
#> [2,]    2    4

# (number of dims specified = 2, pad once)
x[pad(), 1, ] # == x[, 1,]
#> <rray<int>[,1,2][2]>
#> , , 1
#> 
#>      [,1]
#> [1,]    1
#> [2,]    2
#> 
#> , , 2
#> 
#>      [,1]
#> [1,]    5
#> [2,]    6

# (number of dims specified = 3, no padding)
x[pad(), 1, ,] # == x[1, ,]
#> <rray<int>[,2,2][1]>
#> , , 1
#> 
#>      [,1] [,2]
#> [1,]    1    3
#> 
#> , , 2
#> 
#>      [,1] [,2]
#> [1,]    5    7

# (number of dims specified = 2, pad once)
x[1, pad(), 1]
#> <rray<int>[,2,1][1]>
#> , , 1
#> 
#>      [,1] [,2]
#> [1,]    1    3
```

<sup>Created on 2019-11-26 by the [reprex package](https://reprex.tidyverse.org) (v0.3.0.9000)</sup>

Follow whatever strategy we end up with here

https://github.com/r-lib/vctrs/issues/623
From [this twitter conversation](https://twitter.com/d_olivaw/status/1181983835891933187). 

It would be neat for dimnames not to be limited to character vectors. This would be helpful for gridded data (similar to data cubes). 

I don't know enough about R internals to know how this would fare in terms of compatibility with base arrays, though. 
We are currently in the process of writing a new package to efficiently handle posterior samples as return by MCMC samplers of Bayesian models and we consider using rray for matrix and array representations. However, for easy S3 method dispatch, we need to have custom classes on top of rray's classes that simply indicate that the rray is in the right format (without having to check again every time). Unfortunately, rray removes custom classes, while base R array does not. Here is a reproducible example:

```R
A <- array(1:27, dim = c(3, 3, 3))
class(A) <- c("draws_array", class(A))
class(A)
> [1] "draws_array" "array" 
class(A+A)
> [1] "draws_array" "array" 


B <- rray::as_rray(array(1:27, dim = c(3, 3, 3)))
class(B) <- c("draws_array", class(B))
class(B)
> [1] "draws_array"    "vctrs_rray_int" "vctrs_rray"     "vctrs_vctr"
class(B+B)
> [1] "vctrs_rray_int" "vctrs_rray"     "vctrs_vctr"
```

Is there a way to preserve custom classes for all vectorized (pointwise) operations without having to redefine every numerical function rray provides for its objects?
Per [this](https://twitter.com/dvaughan32/status/1167237703995408387https://twitter.com/dvaughan32/status/1167237703995408387) discussion. It would be super usefull being able to do something like 

```r
rry_mean(array, by = list(x, y, t)) 
```

or similar (the `list()` syntax is more data.table-ly, though). 
i.e. `rray_error_incompatible_dim` for a broadcasting error
Function tapply() is the obvious way to produce arrays from data frames. 
But users of **dplyr** have other aggregation functionality that keeps them in the realm of the tidy dataset format.
Perhaps it would be useful to ease their ocassional jumps to array computing offering a kind of tapply() tailored to their conventions.
If you dare to infringe Hadley Wickham's function names copyright, a simple example of this could be: 
``` r
library(rray)
library(dplyr)
library(gapminder)

rray_summarise <- function(grtib,exp=1,FUN=sum,... ){
  e<-rlang::enexpr(exp)
  tib2 <- dplyr::transmute(grtib, `*var*`=!!e)
  as_rray( tapply(tib2$`*var*`,
                  INDEX= as.list(tib2[attr(tib2,"vars")]),
                  FUN=FUN,...)
  )
}
gapminder %>% group_by(continent, year) %>% rray_summarise(pop/1000)
#> <rray<dbl>[,12][60]>
#>           year
#> continent        1952       1957       1962       1967      1972      1977
#>   Africa    237640.50  264837.74  296516.86  335289.49  379879.5  433061.0
#>   Americas  345152.45  386953.92  433270.25  480746.62  529384.2  578067.7
#>   Asia     1395357.35 1562780.60 1696357.18 1905662.90 2150972.2 2384513.6
#>   Europe    418120.85  437890.35  460355.15  481178.96  500635.1  517164.5
#>   Oceania    10686.01   11941.98   13283.52   14600.41   16106.1   17239.0
#>           year
#> continent        1982       1987       1992       1997       2002
#>   Africa    499348.59  574834.11  659081.52  743832.98  833723.92
#>   Americas  630290.92  682753.97  739274.10  796900.41  849772.76
#>   Asia     2610135.58 2871220.76 3133292.19 3383285.50 3601802.20
#>   Europe    531266.90  543094.16  558142.80  568944.15  578223.87
#>   Oceania    18394.85   19574.42   20919.65   22241.43   23454.83
#>           year
#> continent        2007
#>   Africa    929539.69
#>   Americas  898871.18
#>   Asia     3811953.83
#>   Europe    586098.53
#>   Oceania    24549.95
```

<sup>Created on 2019-06-20 by the [reprex package](https://reprex.tidyverse.org) (v0.2.1)</sup>

    