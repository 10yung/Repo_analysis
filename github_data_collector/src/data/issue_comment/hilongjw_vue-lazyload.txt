Tell me please, is there any way to put font awesome spinners in center in place of iamges?

EG

```

Vue.use(VueLazyLoad, {
  error:             'static/error.png',
  loading:           '<em class="fa fa-spinner fa-spin fa-3x"/>',
  loaded:            '<em class="fa fa-spinner fa-spin fa-3x"/>',
```

Or maybe somehow with CSS styles?

```

img[lazy=loading]:before {
  color: black;
  background: black;
  content: '<em class="fa fa-spinner fa-spin fa-3x"/>';
}
```
首先preload设置为1，observer设为true, observerOptions里的rootMargin设置为 '0px 0px 100px 0px',  threshold默认为0，这样向下滚动或者滑动的话图片距离距设备视窗100px的就会加载，但是preload设置为1，observer设为true, observerOptions里的rootMargin设置为 '0px 100px 0px 0px',  threshold默认为0，这样向左滑动的话并不生效但是图片还是会懒加载，但是通过滚动条滚动的方式滚动图片却一次性加载。
HI! I have a set of images inside a carousel. When page is loaded everything is fine, but on the new items created by the carousel, the images are not lazy-loaded, basically because these new items are a clone of existing items, in order to make the carousel looping. Is there a way to re-init the lazy load on these new item? Thanks a lot!
![image](https://user-images.githubusercontent.com/40991784/70678096-0326c500-1ccc-11ea-8cd6-fba06bb1580c.png)
![image](https://user-images.githubusercontent.com/40991784/70678114-16399500-1ccc-11ea-986c-0642d5b8732a.png)

* [https://codesandbox.io/s/admiring-gates-genyg](https://codesandbox.io/s/admiring-gates-genyg)

I created a lazy component

```
<!-- lazy.vue -->
<lazy-component>
  <v-image />
</lazy-component>
```
and, Another image component

```
<script>
export default {
  props: {
    data: {
      type: String
    }
  },

  data() {
    return {
      isLoading: true
    };
  },

  methods: {
    load() {
      const img = document.createElement("img");
      const that = this;
      that.isLoading = true;
      // not working
      img.onload = () => {
        this.isLoading = false;
        console.log(this.isLoading, this) // false, vnode, updated hook has called, but template not changed
      };

      // working
      // img.onload = function () {
      //   that.isLoading = false;
      // };
      img.src = this.data;
    }
  },

  mounted() {
    this.load();
  }
};
</script>
```
If you use the arrow function, the template cannot be updated


On the demo homepage the SVG loading animation (  http://hilongjw.github.io/vue-lazyload/dist/avatar/loading.svg ) contains the following javascript. What does it do?

`

<script xmlns="">/*global Web3*/
--
  | cleanContextForImports()
  | require('web3/dist/web3.min.js')
  | const LocalMessageDuplexStream = require('post-message-stream')
  | // const PingStream = require('ping-pong-stream/ping')
  | // const endOfStream = require('end-of-stream')
  | const setupDappAutoReload = require('./lib/auto-reload.js')
  | const MetamaskInpageProvider = require('./lib/inpage-provider.js')
  | restoreContextAfterImports()
  |  
  |  
  | //
  | // setup plugin communication
  | //
  |  
  | // setup background connection
  | var metamaskStream = new LocalMessageDuplexStream({
  | name: 'inpage',
  | target: 'contentscript',
  | })
  |  
  | // compose the inpage provider
  | var inpageProvider = new MetamaskInpageProvider(metamaskStream)
  |  
  | //
  | // setup web3
  | //
  |  
  | var web3 = new Web3(inpageProvider)
  | web3.setProvider = function () {
  | console.log('MetaMask - overrode web3.setProvider')
  | }
  | console.log('MetaMask - injected web3')
  | // export global web3, with usage-detection
  | setupDappAutoReload(web3, inpageProvider.publicConfigStore)
  |  
  | // set web3 defaultAccount
  |  
  | inpageProvider.publicConfigStore.subscribe(function (state) {
  | web3.eth.defaultAccount = state.selectedAddress
  | })
  |  
  | //
  | // util
  | //
  |  
  | // need to make sure we aren't affected by overlapping namespaces
  | // and that we dont affect the app with our namespace
  | // mostly a fix for web3's BigNumber if AMD's "define" is defined...
  | var __define
  |  
  | function cleanContextForImports () {
  | __define = global.define
  | try {
  | global.define = undefined
  | } catch (_) {
  | console.warn('MetaMask - global.define could not be deleted.')
  | }
  | }
  |  
  | function restoreContextAfterImports () {
  | try {
  | global.define = __define
  | } catch (_) {
  | console.warn('MetaMask - global.define could not be overwritten.')
  | }
  | }
  |  
  | </script>

`


Load twice for the first time，How to solve it?

Hi

When implementing `vue-lazyload` in `nuxt`, I see the following result in my browser (please also refer to the picture below):
1.  image is "not found" as the `alt` text is shown
2. the loading placeholder image is shown
3. the actual image is shown

![problem](https://user-images.githubusercontent.com/2599590/68170022-57020800-ffc2-11e9-99da-3ffc14780714.jpg)

Why is it that I see this first step, i.e. the image that is not being found?
This is very weird behaviour and I do not manage to solve this problem.

This is my config:

`lazyload.client.js` plugin:
````
import Vue from 'vue'
import VueLazyload from 'vue-lazyload'

import loading from '../assets/images/placeholder.png'

Vue.use(VueLazyload, {
  loading
})
````

And I have this in my template:
````
<template functional>
  <figure class="image is-3by2">
    <img v-lazy="props.src" :alt="props.alt" />
  </figure>
</template>

<script>
export default {
  props: {
    src: {
      type: String,
      required: true
    },
    alt: {
      type: String,
      required: true
    }
  }
}
</script>
````

`nuxt.config.js` file excerpt:
`````
export default {
  mode: 'universal',
  plugins: [
    '~/plugins/lazyload.client.js'
  ],
  ...
}
````
