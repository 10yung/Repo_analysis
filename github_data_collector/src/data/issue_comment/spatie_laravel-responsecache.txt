
Closes #267

This PR adds a new syntax for cache lifetime:
```php
Route::get('/my-special-snowflake', 'SnowflakeController@index')->middleware('cacheResponse:5mins');
Route::get('/my-special-snowflake', 'SnowflakeController@index')->middleware('cacheResponse:2hours');
Route::get('/my-special-snowflake', 'SnowflakeController@index')->middleware('cacheResponse:1week');
Route::get('/my-special-snowflake', 'SnowflakeController@index')->middleware('cacheResponse:tomorrow');
Route::get('/my-special-snowflake', 'SnowflakeController@index')->middleware('cacheResponse:noon');
Route::get('/my-special-snowflake', 'SnowflakeController@index')->middleware('cacheResponse:midnight');
// and even
Route::get('/my-special-snowflake', 'SnowflakeController@index')->middleware('cacheResponse:last day of this month');
Route::get('/my-special-snowflake', 'SnowflakeController@index')->middleware('cacheResponse:first monday of January 2020');
```
_________________________
**UPDATE1**: I see a problem: it's possible to omit lifetime option and use multiple tags:
```php
->middleware('cacheResponse:foo,bar')
```
Currently I don't know a good backward compatible solution. 
__________________________
**UPDATE2**: Currently I think that the best option it to use `\Illuminate\Http\Middleware\SetCacheHeaders`- like syntax for options:
```php
// \Illuminate\Http\Middleware\SetCacheHeaders usage example:
Route::get('/', HomeController::class)->middleware('cache.headers:no-cache;max-age=300;etag');

// CacheResponse usage example:
Route::get('/', HomeController::class)->middleware('responseCache:ttl=1hour;tags=foo,bar');
```

But it's BC (unless someone wants to write a good options parser and support it). I think we can implement it as a new middleware in addition to exiting 2 and deprecate existing `CacheResponse` and remove it in next major release.

Another feature that we can implement using this syntax: specify profile as another option:
```php
// use default profile:
Route::get('/', HomeController::class)->middleware('responseCache:ttl=1hour;tags=foo&bar');

// specify profile explicitly:
Route::get('/', HomeController::class)->middleware('responseCache:ttl=1hour;tags=foo&bar;profile=guests-only');
```

The only problem is usage of `,` as delimiter for tags: we need to replace it by something else in order to don't break middleware params parsing by Laravel. Possible options:
 - `&`
 - `|`
 - `+`
 -  `ï¼Œ` ([fullwidth comma)](https://www.compart.com/en/unicode/U+FF0C) ðŸ‘Ž 
Could you please provide some feedback on proposed syntax and feature so I will implement it only if we'll merge it. Thanks a lot!
Hi there,

I created this API route:

```
/*Index*/
Route::middleware('cacheResponse:600')->get('/index', 'CategoryApiController@index')->name('api.category.index');
```

The `index`-method calls a GuzzleHTTP request to a third party API. Of course I'd like to prevent too many calls and so I hope to be able to cache this result.

Using this setup I see that there are outgoing requests to the API every time the route is used. What did I miss?

*Edit* I just saw that the cache only works once I visited the api route directly. It does not work if the route is called by axios.
`routes/api.php`
```php
Route::get('/users', UserIndexAction::class)->middleware(['cacheResponse:users']);
Route::get('/products', ProductIndexAction::class)->middleware(['cacheResponse:products']);
```

This test code succeeds.
```php
use Config;
use Illuminate\Support\Facades\Cache;
use Spatie\ResponseCache\Facades\ResponseCache;

/**
  * @test
  */
public function clearByTag() {
  $header = Config::get('responsecache.cache_time_header_name');

  // Ignore the CACHE_DRIVER setting in phpunit.xml and use Redis
  Config::set('cache.default', 'redis');


  // Clear all cache as initialization
  ResponseCache::clear();

  // Create a cache for "users" and "products"
  $this->get('/api/users');
  $this->get('/api/products');

  // Delete the "users" cache by tag
  // ResponseCache::clear(['users']); // Fail
  Cache::tags('users')->flush(); // Pass

  // Response is only cached for "products"
  $this->get('/api/users')->assertHeaderMissing($header);
  $this->get('/api/products')->assertHeader($header);
}
```

The README explains that:
>Note that this uses Laravel's built in cache tags functionality, meaning routes can also be cleared in the usual way:
>Cache::tags('special')->flush();

However, changing `Cache::tags(['users'])->flush();` to `ResponseCache::clear(['users']);` will fail.
Do these two cache deletes work the same way?
