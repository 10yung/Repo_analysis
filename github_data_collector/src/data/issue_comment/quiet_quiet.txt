I spent a while getting here and these days I meticulously document everything so I don't have to re-figure it out two weeks later.  I thought I'd share, maybe you'll put it on your wiki page or somewhere.  Thank you so much for sharing 'quiet' with simpler folks like me <3

# Building everything including deps from source
having the bajillion standard tools required for a common build environment not included here.

## building deps:
    mkdir quiet-project
    mkdir required-deps
    cd into required-deps and read on:

### libsndfile: (if you want to encode/decode to/from .wav files)
        wget "http://www.mega-nerd.com/libsndfile/files/libsndfile-1.0.28.tar.gz"
        tar xzvf libsndfile-1.0.28.tar.gz
        cd libsndfile-1.0.28/
        ./configure;make;sudo make install

### liquid-dsp:
        unzip liquid-dsp-devel.zip
        (OR  git clone https://github.com/quiet/liquid-dsp.git -b devel --single-branch)
        cd liquid-dsp
        ./bootstrap
        ./configure CFLAGS="-O -msse3" #youre fucked without the cflags, its a known bug since 2016 amazingly
        make
        sudo make install

        it only installs three things:
        libliquid.so libliquid.a in /usr/local/lib
        liquid.h in /usr/local/include/liquid

### jansson:
        mkdir jansson; cd jansson
        wget "https://github.com/akheron/jansson/archive/v2.12.tar.gz"
        tar xzvf v2.12.tar.gz
        cd jans
        autoreconf -i
        ./configure;make;sudo make install
        sudo ldconfig


### building 'quiet' 
    tar xzvf quiet.tar.gz  #(or download with git clone, i saved it locally to prevent changes from screwing me up later when attempting cross-compile)
    cd quiet
    ./bootstrap
    cd build
    sudo make install
    output of that:
        Install the project...
        -- Install configuration: ""
        -- Installing: /usr/local/share/quiet/quiet-profiles.json
        -- Up-to-date: /usr/local/include
        -- Installing: /usr/local/include/quiet.h
        -- Installing: /usr/local/include/quiet-portaudio.h
        -- Installing: /usr/local/bin/quiet_encode_soundcard
        -- Set runtime path of "/usr/local/bin/quiet_encode_soundcard" to ""
        -- Installing: /usr/local/bin/quiet_decode_soundcard
        -- Set runtime path of "/usr/local/bin/quiet_decode_soundcard" to ""
        -- Installing: /usr/local/lib/libquiet.so
        -- Set runtime path of "/usr/local/lib/libquiet.so" to "@rpath/libquiet.dylib"
        -- Installing: /usr/local/lib/libquiet.a

*note* 'quiet_encode_soundcard' and 'quiet_decode_soundcard' were both added to /usr/local/bin/
    at this point, one tweaks (if they wish) individual 'profile' settings in 'quiet-profiles.json'
    and then calls encode/decode <profilename> [<input_source>]
    the available profiles list:
        audible-7k-channel-0
        audible-7k-channel-1
        hello-world
        ultrasonic
        ultrasonic-3600
        cable-64k
        audible
        ultrasonic-whisper

#### final forward-error-correction caveat:
it _says_ that libfec is not required. but then when i read in the 
bugs section, the author says 'you basically need it' and that all profiles that define
either a 'inner_fec_scheme' or 'outer_fec_scheme' will crash if libfec isnt around.
after opening up /usr/local/share/quiet/quiet-profiles.json and changing the 'audible' profile to have both fec lines = 'none', one can successfully call 'quiet_encode_soundcard audible /path/to/textfile' and hear the encoding coming from speakers! woot!


### some example uses:
**play audible encoding directly from speakers**
    `quiet_encode_soundcard audible /tmp/textfile.txt`
**decode same (on different machine/soundcard) and print to file:**
    `quiet_decode_soundcard audible /tmp/decoded.txt`

**encode _inaudibly_ to file: (always saves in 'encoded.wav' in current dir)**
    `quiet_encode_file ultrasonic /tmp/textfile.txt`
**decode same:**
    `quiet_decode_file ultrasonic encoded.wav /tmp/decoded.txt`
____
**edit:** added some example uses.
esp32 (m5Stack) support?
Any particular reason not to propose FSK modems ?
Just asking, out of curiosity :)
Nice job on the project, though. Nicely written and concise code. #
```
This program built for i386-apple-darwin11.3.0
Report bugs to <bug-make@gnu.org>
MyPc:build rob$ sudo make --build=x86_64-apple-darwin install
/Applications/Xcode.app/Contents/Developer/usr/bin/make: unrecognized option `--build=x86_64-apple-darwin'
```

```
MyPc:build rob$ cd bin
MyPc:bin rob$ ls
quiet_decode_file	quiet_decode_soundcard	quiet_encode_file	quiet_encode_soundcard
MyPc:bin rob$ quiet_encode_file 
**dyld: Library not loaded: libliquid.dylib
  Referenced from: /usr/local/bin/quiet_encode_file**
  Reason: image not found
Abort trap: 6

```
Can you specify which build/git hash number in the development branch to go off of? there's liquid-dsp and quiet-dsp , both seem to be for the same thing but referenced differently in the readme/ the error that it found it but a different version. 
Hi,
I am trying to build quiet on Windows 10 with CMake 3.14.5 and Visual Studio 19 (64 bit).

I am having this issue - https://github.com/quiet/quiet/issues/8

The failure seems to be here:
`check_library_exists(liquid flexframesync_set_header_len,flexframegen_set_header_len,ofdmflexframesync_set_header_len,ofdmflexframegen_set_header_len,resamp_rrrf_execute_output_block,liquid_pack_array_block "" LIQUID_DEVEL_FUNCTIONS)`

I searched for these functions in both quiet and liquid-dsp. The problem I see is that `resamp_rrrf_execute_output_block` is required by quiet but isn't available in liquid-dsp.

I followed the instructions and am using the `devel` branch.

Cheers
I'm trying to test this project, and it seems that most of the bundled profiles can't properly decode an unmodified file that was just encoded.

I'm using the current git latest versions: 
* quiet d60aea7b3a167e4a02733915a441e7df1e619851
* quiet-dsp 4951bbbf67a9857dbaab0bc6fa69801717308109 (devel branch)
* libfec 9750ca0a6d0a786b506e44692776b541f90daa91
* and libfftw3-dev 3.3.5-3 from a debian package

Here's my test method after compiling all of the above:
```
$ head -c 64k /dev/zero | openssl enc -aes-256-ctr -pass pass:1234 -nosalt > data
$ sha256sum data 
62143df89c919e6073e6859122833a6eb2fc6efb552355a78450c2e21fe739dc  data
$ cat <<'EOF' > test.sh
#! /bin/bash

PROFILE="$1"

quiet_encode_file "$PROFILE" < data
quiet_decode_file "$PROFILE" > decoded."$PROFILE"
rm encoded.wav
EOF
$ chmod +x ./test.sh
$ for profile in audible audible-7k-channel-0 audible-7k-channel-1 cable-64k hello-world ultrasonic ultrasonic-3600 ultrasonic-whisper; do ./test.sh $profile; done
$ ls -l
total 376
-rw-r--r-- 1 goblin goblin 65536 Apr 23 23:13 data
-rw-r--r-- 1 goblin goblin     0 Apr 23 23:16 decoded.audible
-rw-r--r-- 1 goblin goblin 46984 Apr 23 23:16 decoded.audible-7k-channel-0
-rw-r--r-- 1 goblin goblin 48784 Apr 23 23:16 decoded.audible-7k-channel-1
-rw-r--r-- 1 goblin goblin 28036 Apr 23 23:16 decoded.cable-64k
-rw-r--r-- 1 goblin goblin     0 Apr 23 23:16 decoded.hello-world
-rw-r--r-- 1 goblin goblin 65536 Apr 23 23:17 decoded.ultrasonic
-rw-r--r-- 1 goblin goblin 53552 Apr 23 23:17 decoded.ultrasonic-3600
-rw-r--r-- 1 goblin goblin 65536 Apr 23 23:17 decoded.ultrasonic-whisper
-rwxr-xr-x 1 goblin goblin   130 Apr 23 23:12 test.sh
$ sha256sum data decoded.*
62143df89c919e6073e6859122833a6eb2fc6efb552355a78450c2e21fe739dc  data
e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855  decoded.audible
1bff538095a2a3860998254b4bbd62445efc33bb6d4122a1d80a728db630f743  decoded.audible-7k-channel-0
cd184436c882caad65bffb43b3c89a93cb2d59a5d00ee03df93ab72e20e1772f  decoded.audible-7k-channel-1
24e15271daf59890e0935e54fd9dc3dfb3a335188d07b5a6e69cf87e6654cb0d  decoded.cable-64k
e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855  decoded.hello-world
62143df89c919e6073e6859122833a6eb2fc6efb552355a78450c2e21fe739dc  decoded.ultrasonic
9c156216adeecfbe2f9443fde7145e14913748c07abebb3752f893c27deec651  decoded.ultrasonic-3600
62143df89c919e6073e6859122833a6eb2fc6efb552355a78450c2e21fe739dc  decoded.ultrasonic-whisper
```

You can see the `audible` and `hello-world` profiles didn't decode anything, and most other profiles missed quite a lot of data. Only the `ultrasonic` and `ultrasonic-whisper` profiles actually managed to get the data back in full and without errors. I wasn't even using any cables or microphones, or adding any noise - the `encoded.wav` file was pristine, straight from the encoder.

Maybe I don't understand the concept, but shouldn't this produce perfect results?
I was using `quiet_encode_file ultrasonic-whisper test.txt` to encode content in test.txt.  However, this profile cause the program hanging.  I have to send TERMINATE signal to stop the process.  But the program is running OK with "ultrasonic" profile.  I checked the difference between them.  The differences are samples_per_symbol, center_frequency and frame_length.  So, I do not have idea why this happen. 
Hi this looks like something I really wanted, but I'm not sure what's the bitrate you achieved? I'm looking to transfer some "big" data files (say over 10MB) via audio so not sure if this project will work for me?
programs/encode_file.c 

in line 47, memory is allocated

in line 51, function returned but the memory is not freed.

    quiet_sample_t *samplebuf = malloc(samplebuf_len * sizeof(quiet_sample_t));  //memory is allocated
    quiet_encoder_clamp_frame_len(e, samplebuf_len);
    bool done = false;
    if (readbuf == NULL) {
        return 1;  //memory leak
    }
Hi Brian, 

Awesome project, thank you! 

I am looking at an application where I can only write square waves. Rounding from the 'samples'/sinusoidal output gives decent (but not great) performance. I thought I'd be able to easily write a square wave directly from 'symbols', but these values are very scattered, particularly during the preamble and p/n phase. Is there a reason these values are interpolated in the way they are? Is there a stage where one can extract pure phase shift values without digging into liquid? 

Any general thoughts/advice on writing square waves would be highly appreciated. 

