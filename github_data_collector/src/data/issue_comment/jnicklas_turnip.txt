This PR addresses an issue we've faced with a large Turnip codebase using placeholders with generic names like `:object` in multiple helpers across multiple files. This led to the placeholders being easily overridden and producing obscure and hard to track down bugs in our test suite.

The main change is to issue a warning that a a placeholder is being replaced if there's already a non-default placeholder. The warning includes the file and line using `caller_locations` which is supported in Ruby 2.2 onwards.

With just this change the Turnip test suite now issues warnings as it runs as it relies on replacing placeholders being silent. To address this I've added a `.clear` convenience method which removes all the added placeholders reverting them to the original default.
Hello,
Just try turnip and I believe it will fix my old cucumber issue (too much file to much folder step hard to organise (no scope)).
I want to progressively move my cucumber sc√©nario to turnip scenario but after lot of search I didn't find any documentation about code coverage setup.
Is there someone who have done that before here ?
I really like Turnip. I've struggled with Cucumber for a number of years, but have equally struggled to find an expressive way of writing feature tests in Rspec. One thing I did like about Cucumber is how it output each step as it was executed, and I've tried to implement this in Turnip. Some of it is a bit hacky (for example line 98), so would appreciate any feedback on how to improve it!
I use `Turnip::Table.new` to call step that takes table argument, like following:

``` rb
step "There are admin user :user of :company_name" do |user, company_name|
  table = Turnip::Table.new([['name', 'admin'], [user, 'true']])
  step "There are employees of #{company_name} :", table
end

step "There are employees of :company_name :" do |company_name, table|
  company = Company.find_by!(name: company_name)
  table.hashes.each do |row|
    user = company.users.create!(row.slice('name'))
    if row['admin']
      user.admin!
    end
  end
end
```

But `Turnip::Table.new` example is not in README. Is it a private API?
I want convert the array to `Turnip::Table` implicitly when passing the array to another step like following:

``` rb
step "There are admin user :user of :company_name" do |user, company_name|
  # Passing as Array
  step "There are employees of #{company_name} :", [['name', 'admin'], [user, 'true']]
end

step "There are employees of :company_name :" do |company_name, table|
  company = Company.find_by!(name: company_name)
  # table is a `Turnip::Table` instance from the array
  table.hashes.each do |row|
    user = company.users.create!(row.slice('name'))
    if row['admin']
      user.admin!
    end
  end
end
```

before and after hooks defined in a step_for block are automatically
  scoped to the tag of the step_for block. before :all blocks are run
  before each feature, while before :each blocks are run before each
  scenario.  The situation is similar for after blocks

I'm not super thrilled with the testing strategy that I adopted here - so 
If you have any suggestions for a prettier way to test that this is working,
I'd be all ears.
