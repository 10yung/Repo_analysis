Currently every histogram creates the following metrics

75percentile
95percentile
98percentile
999percentile
99percentile
max
mean
median
min
stddev

How can I change this list to say only feature 95percentile, max, mean, median, min ?

The prefix config variable only changes the prefix for the sample metric. Has the added benefit of now using the same prefix for the sample metric as for the other metrics (was "metricsd" vs "metrics").

MetricsD is unable to parse the following metric
Foo.Web.ServiceHost.QueueWorker.ExternalAnalyticsEventMessage.PendingMessages:3.000000000000000|g

ERROR [2013-11-21 00:36:08,585] net.mojodna.metricsd.server.MetricsServiceHandler: Exception in MetricsServiceHandler
! scala.MatchError: Foo.Web.ServiceHost.QueueWorker.ExternalAnalyticsEventMessage.PendingMessages:3.000000000000000|g (of class java.lang.String)
!   at net.mojodna.metricsd.server.MetricsServiceHandler$$anonfun$messageReceived$1.apply(MetricsServiceHandler.scala:34)
!   at net.mojodna.metricsd.server.MetricsServiceHandler$$anonfun$messageReceived$1.apply(MetricsServiceHandler.scala:32)
!   at scala.collection.IndexedSeqOptimized$class.foreach(IndexedSeqOptimized.scala:34)
!   at scala.collection.mutable.ArrayOps.foreach(ArrayOps.scala:38)
!   at net.mojodna.metricsd.server.MetricsServiceHandler.messageReceived(MetricsServiceHandler.scala:31)
!   at org.jboss.netty.channel.Channels.fireMessageReceived(Channels.java:296)
!   at org.jboss.netty.handler.codec.oneone.OneToOneDecoder.handleUpstream(OneToOneDecoder.java:70)
!   at org.jboss.netty.channel.Channels.fireMessageReceived(Channels.java:268)
!   at org.jboss.netty.channel.socket.nio.NioDatagramWorker.read(NioDatagramWorker.java:98)
!   at org.jboss.netty.channel.socket.nio.AbstractNioWorker.process(AbstractNioWorker.java:107)

This separates out the timer metrics into their own category, because codahale metrics collects timers as both a histogram on the time and a meter on the rate. 

If the prefix is set to <hostname> the metricsd statistics will be prefixed by the first two words of the FQDN of the hostname. At chegg, that's <hostname>.<environment>.

Either via syslog or HTTP (http://log-shuttle.io/) using [l2met](https://github.com/ryandotsmith/l2met)-style `measure.*` elements ([more](http://r.32k.io/l2met-introduction)).

When I send some very big values, and then send normal values, the percentiles won't change to normal sometimes in a very long time. 

See the image. The yellow line is the values I'm sending, and the blue line is 95percentile. And I suppose it should decline after the peak. As histograms are biased to the last 5 min data values. But the 95percentile is a fixed value for a long time. After about 25min, it declines.

In my real usage, when there is a very very very high peak, this kind of  impact will be much longer (for many days 95percentile keeps to be a fixed value). 

Would it be better if percentiles can be configured to be based on past few minutes, instead of using the biased algorithm from Metrics?

![example](https://f.cloud.github.com/assets/1468073/170370/2857fabc-7a65-11e2-926a-cbb7c37b0252.jpg)

When a gauge hasn't been updated, its value should be reported as 0 rather than its most recent value.

When `metricsd` starts up, it should load current counter values from carbon (Graphite).
