## Description
RedirectTrailingSlash not working if there are more than two child route.

## How to reproduce
```
package main

import (
	"github.com/gin-gonic/gin"
)

func main() {
	g := gin.New()
        router := g.Group("/v1")
	router.GET("/hello", dummyFunction)
        router.GET("/hello/a", dummyFunction)
        router.GET("/hello/b", dummyFunction)
	g.Run(":9000")
}
```

## Expectations
```
$ curl http://localhost:8201/hello/ should redirect [301] to {{URL}}/hello 
```
## Actual result
Getting 404

The same works if there is only one child /hello/a 
## Environment

- go version: go version go1.13.3 linux/amd64
- gin version (or commit ref):  v1.5.0
- operating system: ubuntu 16.04


## Description

context.JSON() adds a new line character \n to end of JSON response

## How to reproduce

Clone [this repo](https://github.com/kishaningithub/gin-newline) and run 

```bash
$ GIN_MODE=release go run gin-newline.go
```

## Expectations

Newline character ("\n") must not get added to the end of `{"message":"hello world"}`

## Actual result

new line character gets added

## Environment

- go version: 1.13.5
- gin version (or commit ref): v1.5.0
- operating system: mac os

Validator dropped support for version numbers in the import statement, so it is currently impossible to use gin:

```
../../../gin-gonic/gin/binding/default_validator.go:11:2: cannot find package "github.com/go-playground/validator/v10" in any of:
	/usr/local/go/src/github.com/go-playground/validator/v10 (from $GOROOT)
	/Users/james/go/src/github.com/go-playground/validator/v10 (from $GOPATH)
```

The "/v10" suffix needs to be dropped.
- With issues:
  - Use the search tool before opening a new issue.
  - Please provide source code and commit sha if you found a bug.
  - Review existing issues and provide feedback or react to them.

## Description

<!-- Description of a problem -->
I used a structure, and the type of a field is itself. When I upload form data and receive it with shoudbind, the stack overflows. Please use the following code to reproduce. I hope to solve this problem. Thank you
## How to reproduce

<!-- The smallest possible code example to show the problem that can be compiled, like -->
```
package main

import (
	"github.com/gin-gonic/gin"
)
//post form-data a
func main() {
	r := gin.Default()
	r.POST("/test", TestShoudbind)
	r.Run(":8080")
}

func TestShoudbind(c *gin.Context){
	a := A{}
	c.ShouldBind(&a)
	c.JSON(200,a)
}

type A struct {
	B string `form:"b" json:"b"`
	L *A     `json:"l"`
}
```

## Expectations

<!-- Your expectation result of 'curl' command, like -->
```
postman 
post http://localhost:8080/test
form-data
b test111
```
json:{"b":"test111","l":nil}
## Actual result

<!-- Actual result showing the problem -->
```
postman 
post http://localhost:8080/test
form-data
b test111

runtime: goroutine stack exceeds 1000000000-byte limit
fatal error: stack overflow
```

## Environment

- go version:1.3.5
- gin version (or commit ref):1.4.0
- operating system:macos10.15.2

- With issues:


## Description

https://github.com/gin-gonic/gin/pull/1836 
This PR fix the issue partially, with brokenpipe case, the entire httpReques containing the user credentials is still being logged as error. 

## How to reproduce
Client cancel a downloading request will lead to broken pipe panic, and the RecoveryWithWriter method will log it as errors including the entire http request which contains sensitive user info like Authorization token etc.

## Expectations
No logging of sensitive user data in the log.


## Actual result
Logs contain sensitive user data when encounter broken pipe failure.

## Environment

- go version: go1.13.4
- gin version (or commit ref): v.1.5.0
- operating system: Linux

## Description

I'm working on migrating from 1.3.0 to 1.4.0 (or 1.5.0) and I've discovered that 1.3.0 for the following snippet

```
router := gin.New()
router.GET("/func/:id/details", func(c *gin.Context) {
    value := c.Param("id")
    fmt.Printf("value is %v\n", value)
})
```

Would always get to the handler even when requesting `/func//details` (note the missing URL param) whereas `1.4.0` and above will return `404`.

Is it possible to control this behavior? (to work the same way as it worked in `1.3.0`?)

## How to reproduce

Start below router

```
router := gin.New()
router.GET("/func/:id/details", func(c *gin.Context) {
    value := c.Param("id")
    fmt.Printf("value is %v\n", value)
})
router.Run("localhost:8080")
```

And make the following request with `curl`

    curl -i localhost:8080/func//details

## Expectations

`HTTP 200` (get inside the handler)

## Actual result

`HTTP 404`

## Environment

- go version: 1.13.5
- gin version (or commit ref): `1.3.0`
- operating system: Mac os 10.15.2

I want to change value of query string from Middleware
```
$ curl http://localhost:8201/?test=1
```

```
 _ = c.Query("test")
params, _ := url.ParseQuery(c.Request.URL.RawQuery)
test:= params.Get("test") 
fmt.Println(test) //output 1

params.Set("test","2")
c.Request.URL.RawQuery = params.Encode()
fmt.Println(c.Query("test")) //output 1

```
how to reset queryCache?

## Environment

- go version:
- gin version (or commit ref): 1.5
- operating system:

I have two path:

1. /v1a:com
2./v1:coms

When i start the server, i get the panic :

- "panic: path segment 'a:com' conflicts with existing wildcard ':com' in path '/v1a:com'"

why? the ":", in my case , does not mean a wildcard. Is that reasonableï¼Ÿ

support usage followed:

```golang
type StructExample struct {
    A string `json:"a" form:"a" binding"required,max=16"`
}

func exampleHandler(c *gin.Context) {
    var data []StructExample

    if c.Bind(&data) != nil {
        return
    }
    c.JSON(http.StatusOK, data)
}
```

## Description
As the [document](https://golang.google.cn/doc/diagnostics.html) said, we need to profile the cpu and memory of a service periodically to make diagnose easy.

## Expectations
Gin provide an option to turn on the periodical profiling and config the detail.


