Imagine we have **Author** and **Note**
**Note** can have many **Author**'s and **Author**'s can have many **Note**'s
How to create a **Note** with **Author** = id1 or even **Note** with **Author** = id[1,2] ?
_GET_ with Join works fine, but not _POST_ a **Note** with **Author**'s
I want to execute a certain code-section after my data has been updated. I tried AfterUpdate decorative in my entity.ts file but its not working. When I added a console it wasn't getting printed, stating the function is never called. The update I'm doing is through nestjs crud i.e patch request.

Ex: Consider table users_addresses. Assume its has following fields: id(integer), user_id(integer), name(string), is_primary(boolean).
Now whenever user adds or updates an address as primary we have to first check into database if there exist any other primary address, if yes then set its value as false and make current as true(primary).

I also tried using using subscriber but no success. Kindly assist.

Version details:
nest: 6.10.4
package.json:
"@nestjs/typeorm": "^6.2.0"
"@nestjsx/crud": "^4.2.0",
"@nestjsx/crud-typeorm": "^4.2.0"
"typeorm": "^0.2.20"
there is a condition is that  i need use "filter" and  "join" operation;  my url path  is like this
http://localhost:7001/api/system/user/crud?join=dept&filter=dept.id||$in||1,2
in database  the dept.id field is a integer 
the stack info is like this
`
req:  { filter: 'dept.id||$in||11', join: 'dept' }
exception:  Error: Main alias is not set
    at SelectQueryBuilder.get [as alias] (D:\Mycode\newschool\src\query-builder\QueryBuilder.ts:114:19)
    at EntityManager.<anonymous> (D:\Mycode\newschool\src\entity-manager\EntityManager.ts:840:56)
    at step (D:\Mycode\newschool\node_modules\_tslib@1.10.0@tslib\tslib.js:136:27)
    at Object.next (D:\Mycode\newschool\node_modules\_tslib@1.10.0@tslib\tslib.js:117:57)
`

i don't if this problem is occur by typeorm  

the package.json is like this
`
    "@nestjsx/crud": "^4.4.1",
    "@nestjsx/crud-typeorm": "^4.4.1",
`

Hi, I was currently struggling with data validation in the PUT method since it Creates or Updates an entity I thought it would respect the corresponding ```CrudValidationGrup``` depending on the actual action it's going to perform.

But after some digging, I realized that the "problem" was in [this line](https://github.com/nestjsx/crud/pull/109/files#diff-65943940c2bfc41c0c5bdabf9ce22df2R323) and occurred me that is too hard to decide what validation group it's going to use at the route creation.

Since the validation occurs before the endpoint actually getting hit and therefore before it can check entity existence, I'm not sure what would be the best approach to this.

From the top of my head what I can think of is:
- Change the mentioned line to make PUT use the same validations as POST (probably the easiest way to change, but I'm not sure if it can bring any hidden bugs. I will open a CR for this).
- Change ```replaceOne``` to be a route that does no validation and just checks user existence and redirects to the appropriate route with the appropriate validations (may increase the overhead for each call)
- Create a new ```CrudValidationGroup``` (I don't think that helps very much since it will probably be used at the same places as the CREATE)

For now I can overcome this by hiding the ```replaceOneBase``` route, creating one of my own and redirecting the call to ```replaceOneBase``` after validation. The problem is that I don't know an easy way of adding the ValidationPipe with the correct configurations besides of creating a new controller and overriding ```createOneBase``` (what is terrible).
Hello! I am testing new CrudAuth as a supposed way to get rid of my own implementation of service and controller which were extended before updating to 4.3.0+.

For getOneBase and getManyBase this CrudAuth decorator works perfectly.
However, I cannot find a way to restrict user of creating entities which he does not own.

For example: the user is an admin of organization which has departments.
He can select only employees who belong to departments of his organization (it is completed by eager joining of employee with department and with department's organization and then checking organization's ID).
Trying to select other organization's employee results in 404 which is perfectly okay.

However, this user still can create an employee with not own departmentId and get it's data on creation. However, he cannot select it later.

But this is a problem, cause some organization admins can fill my DB with garbage data on purpose or by accident.

For now I cannot find a way to verify saved entity by nested relation field. May anyone help me with solution of this?
Maybe I should implement some validation by creating custom class validator decorator which loads related entites from DB, check them and after that returns possible error?
Or a possiblity to add some specific query into transaction before saving new entity?

Thanks!
Hi,

I use a Postgres database, with TypeORM. I have several columns which are an array with some strings inside. I would like to filter on these columns, but it seems to me that there is not yet support for the **$any** operator.

Has anyone ever done this ? If yes, how did you do it ?

Thanks for your help.
You are able to query a table for an entity using an [excluded column](https://github.com/nestjsx/crud/wiki/Controllers#exclude).

Here is an example scenario:
> I have a table of user accounts. Each user has a `password`, `email`, and `nickname`. I mark the `password` field as [`excluded`](https://github.com/nestjsx/crud/wiki/Controllers#exclude) in the `user.controller.ts` file. When you fetch a big list of users from my API it just has the `nickname` and `email`, great. But for some reason I am able to query all users using the `password` field.
For example, I can get every user whose password contains `e` with this filter: `password||$contL||e`.

This seems like unexpected behavior that should be fixed because of potential security implications.
Hi, 
I try to fix issue #355 
This is my commits. 
Please check it. 

I noticed that when run example app and get json, there is an undefined path on open api json.
Unfortunately I was unable to understand the problem.
Bumps [handlebars](https://github.com/wycats/handlebars.js) from 4.2.0 to 4.5.3.
<details>
<summary>Changelog</summary>

*Sourced from [handlebars's changelog](https://github.com/wycats/handlebars.js/blob/master/release-notes.md).*

> ## v4.5.3 - November 18th, 2019
> Bugfixes:
> 
> - fix: add "no-prototype-builtins" eslint-rule and fix all occurences - f7f05d7
> - fix: add more properties required to be enumerable - 1988878
> 
> Chores / Build:
> - fix: use !== 0 instead of != 0 - c02b05f
> - add chai and dirty-chai and sinon, for cleaner test-assertions and spies, 
>   deprecate old assertion-methods  - 93e284e, 886ba86, 0817dad, 93516a0
> 
> Security:
> 
> - The properties `__proto__`, `__defineGetter__`, `__defineSetter__` and `__lookupGetter__` 
>   have been added to the list of "properties that must be enumerable".
>   If a property by that name is found and not enumerable on its parent, 
>   it will silently evaluate to `undefined`. This is done in both the compiled template and the "lookup"-helper. 
>   This will prevent new Remote-Code-Execution exploits that have been
>   published recently.
> 
> Compatibility notes: 
> 
> - Due to the security-fixes. The semantics of the templates using
>   `__proto__`, `__defineGetter__`, `__defineSetter__` and `__lookupGetter__` in the respect that those expression now return 
>   `undefined` rather than their actual value from the proto.
> - The semantics have not changed in cases where the properties are  enumerable, as in:
> 
> ```js
> {
>   __proto__: 'some string'
> }
> ```
> 
> - The change may be breaking in that respect, but we still only 
>   increase the patch-version, because the incompatible use-cases
>   are not intended, undocumented and far less important than fixing
>   Remote-Code-Execution exploits on existing systems.
> 
> 
> 
> [Commits](https://github.com/wycats/handlebars.js/compare/v4.5.2...v4.5.3)
> 
> ## v4.5.2 - November 13th, 2019
> # Bugfixes
> 
> - fix: use String(field) in lookup when checking for "constructor" - d541378
> - test: add fluent API for testing Handlebars - c2ac79c
> 
> Compatibility notes:
> - no incompatibility are to be expected
></tr></table> ... (truncated)
</details>
<details>
<summary>Commits</summary>

- [`c819c8b`](https://github.com/wycats/handlebars.js/commit/c819c8b533934d2ac18001d7eb27a3205b00c2f3) v4.5.3
- [`827c9d0`](https://github.com/wycats/handlebars.js/commit/827c9d0747bef7d7f89829779523b6b2dcf3051d) Update release notes
- [`f7f05d7`](https://github.com/wycats/handlebars.js/commit/f7f05d7558e674856686b62a00cde5758f3b7a08) fix: add "no-prototype-builtins" eslint-rule and fix all occurences
- [`1988878`](https://github.com/wycats/handlebars.js/commit/198887808780bbef9dba67a8af68ece091d5baa7) fix: add more properties required to be enumerable
- [`886ba86`](https://github.com/wycats/handlebars.js/commit/886ba86c2f9cc71b7d99b9018fbe2d72a57085cc) test/chore: add chai/expect and sinon to "runtime"-environment
- [`0817dad`](https://github.com/wycats/handlebars.js/commit/0817dad7e72c51d07f7700547d0c69aa79a4976b) test: add sinon as global variable to eslint in the specs
- [`93516a0`](https://github.com/wycats/handlebars.js/commit/93516a0b07026ebd23c84fddf270a0c8b570bc59) test: add sinon.js for spies, deprecate current assertions
- [`93e284e`](https://github.com/wycats/handlebars.js/commit/93e284ed9be1e38c5e6945f15af1ccd689f2ada6) chore: add chai and dirty-chai for better test assertions
- [`c02b05f`](https://github.com/wycats/handlebars.js/commit/c02b05fa819f46bb66c878bebc6e8006408ebd5c) fix: use !== 0 instead of != 0
- [`8de121d`](https://github.com/wycats/handlebars.js/commit/8de121d21c88a6ab877e3a0eec9daaac483f3bf0) v4.5.2
- Additional commits viewable in [compare view](https://github.com/wycats/handlebars.js/compare/v4.2.0...v4.5.3)
</details>
<br />

[![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=handlebars&package-manager=npm_and_yarn&previous-version=4.2.0&new-version=4.5.3)](https://help.github.com/articles/configuring-automated-security-fixes)

Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.

[//]: # (dependabot-automerge-start)
[//]: # (dependabot-automerge-end)

---

<details>
<summary>Dependabot commands and options</summary>
<br />

You can trigger Dependabot actions by commenting on this PR:
- `@dependabot rebase` will rebase this PR
- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it
- `@dependabot merge` will merge this PR after your CI passes on it
- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it
- `@dependabot cancel merge` will cancel a previously requested merge and block automerging
- `@dependabot reopen` will reopen this PR if it is closed
- `@dependabot ignore this [patch|minor|major] version` will close this PR and stop Dependabot creating any more for this minor/major version (unless you reopen the PR or upgrade to it yourself)
- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)
- `@dependabot use these labels` will set the current labels as the default for future PRs for this repo and language
- `@dependabot use these reviewers` will set the current reviewers as the default for future PRs for this repo and language
- `@dependabot use these assignees` will set the current assignees as the default for future PRs for this repo and language
- `@dependabot use this milestone` will set the current milestone as the default for future PRs for this repo and language

You can disable automated security fix PRs for this repo from the [Security Alerts page](https://github.com/nestjsx/crud/network/alerts).

</details>
until now. the `CrudRequest` has two parts. one is `parsed` from the client by every requests. another is `options` static server side config.

now there should be `extra`(maybe other name) the server side per request config.

it is convenient for handle different users' queries with different data scopes.