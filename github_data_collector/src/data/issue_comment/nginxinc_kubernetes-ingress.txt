### Proposed changes
* Converted spaces to tabs in all Dockerfiles for consistency
* Building with `BUILD_IN_CONTAINER = 1` now uses a multi stage docker build instead of using volumes.

### Checklist
Before creating a PR, run through this checklist and mark each as complete.

- [x] I have read the [CONTRIBUTING](https://github.com/nginxinc/kubernetes-ingress/blob/master/CONTRIBUTING.md) doc
- [x] I have checked that all unit tests pass after adding my changes
- [x] I have updated necessary documentation
- [x] I have rebased my branch onto master
- [x] I will ensure my PR is targeting the master branch and pulling from my branch from my own fork

**Describe the bug**
I followed the steps outlined here (https://docs.nginx.com/nginx-ingress-controller/installation/installation-with-manifests/) to install nginx ingress controller in Kubernetes v1.17. I get error when i add the ingress resource. Please advice.

**To Reproduce**
Install ingress controller as outline above
install app, services and ingress with this command
kubectl create -f cafe.yaml
kubectl create -f ingress.yaml

cafe.yaml
==========
```
apiVersion: apps/v1
kind: Deployment
metadata:
  name: tea
spec:
  selector:
    matchLabels:
      app: tea
  replicas: 2
  template:
    metadata:
      labels:
        app: tea
    spec:
      containers:
      - name: tea
        image: nginxdemos/hello
        ports:
        - containerPort: 80
---
apiVersion: v1
kind: Service
metadata:
  name: tea-svc
  labels:
    app: tea
spec:
  ports:
  - port: 80
    targetPort: 80
    protocol: TCP
    name: http
  selector:
    app: tea
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: coffee
spec:
  selector:
    matchLabels:
      app: coffee
  replicas: 2
  template:
    metadata:
      labels:
        app: coffee
    spec:
      containers:
      - name: coffee
        image: nginxdemos/hello
        ports:
        - containerPort: 80
---
apiVersion: v1
kind: Service
metadata:
  name: coffee-svc
  labels:
    app: coffee
spec:
  ports:
  - port: 80
    targetPort: 80
    protocol: TCP
    name: http
  selector:
    app: coffee
```
ingress.yaml
===========
```
apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  name: cafe-ingress
spec:
  rules:
  - host: mydomain.com
    http:
      paths:
      - path: /tea
        backend:
          serviceName: tea-svc
          servicePort: 80
      - path: /coffee
        backend:
          serviceName: coffee-svc
          servicePort: 80
```

**Expected behavior**
I was expecting ingress resource to be added successfully but i see errors in the ingress controller.

Errors:
========
```
W0115 21:50:37.726827       1 controller.go:1527] Error retrieving endpoints for the service tea-svc: No endpoints for target port 80 in service tea-svc
W0115 21:50:37.726861       1 controller.go:1527] Error retrieving endpoints for the service coffee-svc: No endpoints for target port 80 in service coffee-svc
2020/01/15 21:50:37 [notice] 80#80: signal process started
 -  []
 -  []
I0115 21:50:41.787708       1 event.go:255] Event(v1.ObjectReference{Kind:"Ingress", Namespace:"default", Name:"cafe-ingress", UID:"ce1a0374-53fe-4209-9c6c-aa56ab2abe68", APIVersion:"extensions/v1beta1", ResourceVersion:"23814", FieldPath:""}): type: 'Warning' reason: 'AddedOrUpdatedWithError' Configuration for default/cafe-ingress was added or updated, but not applied: Error reloading NGINX for default/cafe-ingress: could not get newest config version: could not get expected version: 8
2020/01/15 21:50:41 [notice] 83#83: signal process started
E0115 21:50:45.825729       1 controller.go:407] Error updating endpoints for [default/cafe-ingress]: Error reloading NGINX when updating endpoints: could not get newest config version: could not get expected version: 9
```

**Your environment** 
Kubernetes v1.17.0
* Version of the Ingress Controller - release version or a specific commit
edge
* Version of Kubernetes
v1.17.0
* Kubernetes platform (e.g. Mini-kube or GCP)
Kubeadm
* Using NGINX or NGINX Plus
NGINX

**Additional context**
Add any other context about the problem here. Any log files you want to share.

We have upgraded to version 1.6. Running IC container as nginx user. We have a use case where we want to reload nginx after a particular scenario. 

When we run `/etc/init.d/nginx reload` we get below error
`[FAIL] Reloading nginx: nginx failed!`

I saw the do_reload() in etc/init.d/nginx has below code
`do_reload() {
    #
    start-stop-daemon --stop --signal HUP --quiet --pidfile $PIDFILE
    RETVAL="$?"
    return "$RETVAL"
}`
PIDFILE points to `PIDFILE=${PIDFILE:-/var/run/nginx.pid}`

However, there is no nginx.pid in /var/run. Instead its been changed to /var/lib/nginx.
https://github.com/nginxinc/kubernetes-ingress/pull/710/files

Is this the reason it fails to reload or is there any other reason possible ? 

**Describe the bug**

Ingress is unable to redirect the traffic when we use multiple path eg: /authservice another path is /saml to redirect to the same serviceName. We are getting a 404 error.
**To Reproduce**
Steps to reproduce the behavior:

kubectl get svc uawauthservice-service -n uaw-dev
NAME                     TYPE       CLUSTER-IP      EXTERNAL-IP   PORT(S)          AGE
uawauthservice-service   NodePort   10.108.23.155   <none>        8080:31305/TCP   58m


apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  annotations:
    external-dns.alpha.kubernetes.io/hostname: dev-example.com
  creationTimestamp: 2020-01-13T04:03:25Z
  generation: 1
  name: uawfileidservice-service-ingress
  namespace: uaw-dev
  resourceVersion: "16126739"
  selfLink: /apis/extensions/v1beta1/namespaces/uaw-dev/ingresses/uawfileidservice-service-ingress
  uid: a5b12996-35b9-11ea-96a3-feffff020bf7
spec:
  rules:
  - host: dev-example.com
    http:
      paths:
      - backend:
          serviceName: uawauthservice-service
          servicePort: 8080
        path: /authservice
      - backend:
          serviceName: uawauthservice-service
          servicePort: 8080
        path: /saml

Login to dev-example.com/authservice/call/hello redirect to SSO page for authentication once authentication is done it is redirected to http://dev-example.com/saml/SSO/alias/dev-example.com with a 404 error.




**Expected behavior**
Display a hello page 


**Your environment**
* Version of the Ingress Controller - release version or a specific commit : Could not find the version using  /nginx-ingress-controller --version
* Version of Kubernetes : OKE  v1.12.7+1.2.3.el7
* Kubernetes platform (e.g. Mini-kube or GCP) :Bare Metal
* Using NGINX or NGINX Plus : Nginx
10.244.111.130 - - [13/Jan/2020:09:28:29 +0000] "GET /authservice/call/hello HTTP/1.1" 200 5116 "-" "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/79.0.3945.88 Safari/537.36" "10.184.35.7"
10.244.111.130 - - [13/Jan/2020:09:28:37 +0000] "POST /saml/SSO/alias/dev-example.com HTTP/1.1" 404 796 "-" "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/79.0.3945.88 Safari/537.36" "10.184.35.7"
10.244.111.130 - - [13/Jan/2020:10:35:15 +0000] "GET /saml/SSO/alias/dev-example.com HTTP/1.1" 404 796 "-" "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/79.0.3945.117 Safari/537.36" "10.191.247.198"
Is there a way to use an annotation like server-snippets to remove a default ingress configuration?

For instance, by default an nginx config is setting:

```listen 80 proxy_protocol;```

If I wanted to remove this and put in:

```listen 80;```

 is there a simple way to do this? I wish the server-snippets would automatically overwrite any similar configs but it doesn't appear to do that.

We are upgrading from 1.4.6 to 1.6. We need to run container as Root as we have an init.d service script which needs root permission. Is it possible to run container as root but run nginx master as nginx instead of root. (looks like worker processes are already running as nginx)
Helm Chart version : 0.3.8
Changes done in Ingress.yaml does not get affected in /etc/nginx/nginx.conf inside the pod. How to confirm whether the annotations that I apply are actually getting implemented in the pod?
**Describe the bug**
Regular expressions that contains "?!" not supported in path or routes and subroutes in VirtualServer and VirtualServerRoute resources.

**To Reproduce**
1. Deploy yamls:
```
apiVersion: k8s.nginx.org/v1
kind: VirtualServer
metadata:
  name: cafe
  namespace: default
spec:
  host: cafe.example.com
  upstreams:
  - name: tea
    service: tea-svc
    port: 80
  routes:
  - path: /tea
    action:
      pass: tea
  - path: /coffee
    route: default/coffee
```
```
apiVersion: k8s.nginx.org/v1
kind: VirtualServerRoute
metadata:
  name: coffee
  namespace: default
spec:
  host: cafe.example.com
  upstreams:
  - name: latte
    service: latte-svc
    port: 80
  - name: espresso
    service: espresso-svc
    port: 80
  subroutes:
  - path: ~ ^/coffee/latte$ # it's works
    action:
      pass: latte
  - path: ~ ^/coffee/(?!.*\/latte)(?!.*\/americano)(.*) # it isn't working
    action:
      pass: espresso
```
2. View logs on ingress-controller pod
3. See error:
```
I1223 08:46:01.744934       1 controller.go:1369] Skipping invalid VirtualServerRoute default/coffee: spec.subroutes[1].path: Invalid value: "~ ^/coffee/(?!.*\/latte)(?!.*\/americano)(.*)": must be a valid regular expression: error parsing regexp: invalid or unsupported Perl syntax: `(?!`
```

**Expected behavior**
All regular expressions that work in bare nginx must work in path.

**Your environment**
* Version of the Ingress Controller - release version or a specific commit
1.6.0
* Version of Kubernetes
1.15.3
* Kubernetes platform (e.g. Mini-kube or GCP)
bare kubernetes
* Using NGINX or NGINX Plus
NGINX

**Describe the bug**
I need to deploy the IngressController using Deployment and Service (for Jenkins) on premise. When  I deploy the service using `daemon-set` works fine. But when I use `deployment `and `NodePort`, the Ingress doesn't work properly. Logs are not showing any info, so maybe the nginx config is generated the wrong way.

**To Reproduce**
Steps to reproduce the behaviour:
1. Clone Repo
2. Add `- -wildcard-tls-secret=$(POD_NAMESPACE)/default-wildcard-secret` in `spec.args` at `deployment/nginx-ingress.yaml` (I'm using an internal cert as a wildcard).
3. Create the mentioned secret correctly.
4. Apply `ns-and-sa`, `default-server-secret`, `nginx-config`, `rbac`, `custom-resource-definitions`, `deployment/ngins-ingress.yaml` and `service/nodeport.yaml`
5. Create an Ingress sample that works when using daemonset
6. Receiving "network violation" in browser.

**Expected behaviour**
able to interact with the service that ingress sets.

**Your environment**
* Version of the Ingress Controller - latest in master
* Version of Kubernetes: 1.16.3
* Kubernetes platform (e.g. Mini-kube or GCP) on premise (KTHW)
* Using NGINX or NGINX Plus: NGINX

**Additional context**
I can send nginx.conf o logs if required, but they don't seem incorrect.

Hi, 
Does the ingress controller has now support for regex in paths?
https://github.com/nginxinc/kubernetes-ingress/issues/20 is the same request, but in OPEN state, was it developed and and if yes: 

- Does it require any annotation
- Which version was it introduced?