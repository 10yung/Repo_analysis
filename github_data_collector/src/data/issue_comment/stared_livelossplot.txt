Training stops after every epoch completion, need to manually close the window and then only it proceeds with next epoch. Can't it simultaneously plot and proceed to the next epoch?

Thanks for this library btw. :)
Hi,

I am trying to use this library but the following error of no "set_max_epoch" attribute is showing. Thanks.
Hi, thanks for the really nice package. I would like to suggest to add an option to skip `plt.show()` in `draw_plots()` so that the plots can later be modified. That is something like

- `show=True`: (default) run `plt.show()` as usual
- `show=False`: skip `plt.show()`

By skipping `plt.show()`, users can then, for example, change the styles, modify the labels or add annotations, and call `plt.show()` afterward. For instance,

```python
liveloss.draw(show=False)
plt.xlabel('step')
plt.show()
```

Thanks!
Hi,

is it possible to use livelossplot when training manually via train_on_batch in keras?

thanks,

Jani
Hi, 

I'm using this lib (which seems cool btw) and I got this error message : 
`AttributeError: 'PlotLossesCallback' object has no attribute 'on_train_batch_begin'`

I'm using TF 2.0 Beta 1 and Keras in python. 

Thx !
It would be nice to have two subplots (or even more, if one wants to observe different metrics):

One should display the loss (as is currently possible), and the other one next to it should display a loss (selectable by user).

I hope other people would like that as well.
The majority of functions and classes miss [dosctrings](https://www.python.org/dev/peps/pep-0257/), i.e. helper texts.

Even if you new to livelossplot, open source or Python in general, I believe you can contribute! :)
And if you are a veteran, it will be a piece of cake. 

You can do it one by one, noo need to do everything in one go. Every help is appreciated.

Please adhere to [PEP 257 -- Docstring Conventions](https://www.python.org/dev/peps/pep-0257/).


I'm training a CNN model and I wanted to both a) be able to reduce the optimizer learning rate when it hits a plateau with ReduceLROnPlateau() and b) visually monitor the losses with livelossplot's PlotKerasLosses(). This combination in callbacks gives me a KeyError: 'lr'. When dropping either one of the functions the training works as it should. Hence my guess is that there must be a compatibility issue with the two.

Keras = 2.2.4
livelossplot = 0.3.4

Here's some code:
```
from keras.callbacks import ReduceLROnPlateau
from livelossplot import PlotLossesKeras

...

learning_rate_reduction = ReduceLROnPlateau(monitor='val_acc', 
                                            patience=3, 
                                            verbose=1, 
                                            factor=0.5, 
                                            min_lr=0.00001)

history = model.fit_generator(datagen.flow(X_train,Y_train, batch_size=batch_size),
                              epochs = epochs, 
                              validation_data = (X_val,Y_val),
                              verbose = 1, 
                              steps_per_epoch=X_train.shape[0] // batch_size,
                              callbacks=[learning_rate_reduction, PlotLossesKeras()])
```

And here's the error I get:


```
---------------------------------------------------------------------------
KeyError                                  Traceback (most recent call last)
<ipython-input-26-bd8223167e59> in <module>
      5                               verbose = 1,
      6                               steps_per_epoch=X_train.shape[0] // batch_size,
----> 7                               callbacks=[learning_rate_reduction, PlotLossesKeras()])

~/anaconda3/envs/upwork/lib/python3.7/site-packages/keras/legacy/interfaces.py in wrapper(*args, **kwargs)
     89                 warnings.warn('Update your `' + object_name + '` call to the ' +
     90                               'Keras 2 API: ' + signature, stacklevel=2)
---> 91             return func(*args, **kwargs)
     92         wrapper._original_function = func
     93         return wrapper

~/anaconda3/envs/upwork/lib/python3.7/site-packages/keras/engine/training.py in fit_generator(self, generator, steps_per_epoch, epochs, verbose, callbacks, validation_data, validation_steps, class_weight, max_queue_size, workers, use_multiprocessing, shuffle, initial_epoch)
   1416             use_multiprocessing=use_multiprocessing,
   1417             shuffle=shuffle,
-> 1418             initial_epoch=initial_epoch)
   1419 
   1420     @interfaces.legacy_generator_methods_support

~/anaconda3/envs/upwork/lib/python3.7/site-packages/keras/engine/training_generator.py in fit_generator(model, generator, steps_per_epoch, epochs, verbose, callbacks, validation_data, validation_steps, class_weight, max_queue_size, workers, use_multiprocessing, shuffle, initial_epoch)
    249                     break
    250 
--> 251             callbacks.on_epoch_end(epoch, epoch_logs)
    252             epoch += 1
    253             if callback_model.stop_training:

~/anaconda3/envs/upwork/lib/python3.7/site-packages/keras/callbacks.py in on_epoch_end(self, epoch, logs)
     77         logs = logs or {}
     78         for callback in self.callbacks:
---> 79             callback.on_epoch_end(epoch, logs)
     80 
     81     def on_batch_begin(self, batch, logs=None):

~/anaconda3/envs/upwork/lib/python3.7/site-packages/livelossplot/generic_keras.py in on_epoch_end(self, epoch, logs)
     63 
     64     def on_epoch_end(self, epoch, logs={}):
---> 65         self.liveplot.update(logs.copy())
     66         self.liveplot.draw()

~/anaconda3/envs/upwork/lib/python3.7/site-packages/livelossplot/generic_plot.py in update(self, log)
     80         self.logs.append(log)
     81         if self.plot_extrema:
---> 82             self._update_extrema(log)
     83 
     84     def draw(self):

~/anaconda3/envs/upwork/lib/python3.7/site-packages/livelossplot/generic_plot.py in _update_extrema(self, log)
     69     def _update_extrema(self, log):
     70         for metric, value in log.items():
---> 71             extrema = self.metrics_extrema[metric]
     72             if _is_unset(extrema['min']) or value < extrema['min']:
     73                 extrema['min'] = float(value)

KeyError: 'lr'

```
[Bokeh](https://bokeh.pydata.org/en/latest/), as an alternative backend to [matplotlib](https://matplotlib.org/), would make it simple to:

* toggle between in-notebook plots and external plots (so that it would work seamlessly with both Jupyter Notebook Python scripts) 
* give mouseover view of exact numerical values (no more eye squeezing!)
* zoom if needed

I don't want to have it instead of `matplotlib` (as this one makes it easier to save plots, so that they are visible in Jupyter Notebooks on GitHub), but as an additional backend.

My experience with Bokeh is limited, so this issue is open for YOUR contribution! :)
It would make it simpler to interact with other plots. 
Now we use global methods.

Vide: http://pbpython.com/effective-matplotlib.html
