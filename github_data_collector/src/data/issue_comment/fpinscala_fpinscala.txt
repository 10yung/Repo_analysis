use underscores just to simplify
I think the datastructure for tree has been defined 'wrong'. 
`sealed trait Tree[+A]
case class Leaf[A](value: A) extends Tree[A]
case class Branch[A](left: Tree[A], right: Tree[A]) extends Tree[A]`

The problem with this current definition is it can have different 'size' depending on how you count the tree. 
Currently the tree can have node without value. it is purely node. e.g. 
`Branch(Branch(Leaf(2), Branch(Leaf(3), Leaf(3))), Leaf(1))`
If you draw it on the paper, it will have 3 'branch' without value, the first one is the root; and it has 3 leaves with values.
So do you count the tree size as 4(only leaves) or 7(leaves and nodes)? or even 5? 
using the answer provided in the current master branch ends up with 5.

Instead, after quick search on the internet, the answer on this stackexchange gives better data structure for the tree https://codereview.stackexchange.com/questions/102470/binary-tree-implementation-in-scala But of course, it does not need to be binary tree (so the 'isValid' part is not needed)
hopefully fixes the build
and not G and H
The provided solution for exercises 13.2 and 13.3 were incorrect, this PR attempts to fix them.

`Suspend` should be defined as-

`case class Suspend[F[_],A](f: F[Free[F, A]]) extends Free[F,A]` 

but in the book snippet it says

`case class Suspend[F[_],A](f: F[ A]) extends Free[F,A]`

the correct [definition](https://github.com/fpinscala/fpinscala/wiki/Chapter-13:-External-effects-and-IO) changes the solution.
Started going through the book today and looking through the exercises for chapter 3, list.scala in particular, I noticed that the answers are left out for some  exercises and for some they are pasted in instead of the unimplemented function signatures.

I expected the exercises files to be skeleton code for filling in with our answers and then if needed we could look up the answers in the answerkey directory. Why are they already in the exercise file? Doesn't that spoil the learning experience?
```
exercises/src/main/scala/fpinscala/parsing/Parsers.scala:28:39: value drop is not a member of java.util.stream.Stream[String]
```

https://github.com/fpinscala/fpinscala/blob/master/exercises/src/main/scala/fpinscala/parsing/Parsers.scala#L28

[`lines`](https://docs.oracle.com/en/java/javase/12/docs/api/java.base/java/lang/String.html#lines()) method (which returns `java.util.stream.Stream`) was newly added to `java.lang.String` in Java 11, so you should use [`linesIterator`](https://www.scala-lang.org/api/current/scala/collection/immutable/StringOps.html#lines:Iterator[String]) method instead if you'd like to compile with Java 11 or above.

cf. https://github.com/scala/bug/issues/11125
why

``` scala
  def modify[S](f: S => S): State[S, Unit] = for {
    s <- get // Gets the current state and assigns it to `s`.
    _ <- set(f(s)) // Sets the new state to `f` applied to `s`.
  } yield ()
```
 I think is same
``` scala
 def modify[S](f: S => S): State[S, Unit] = State(s=>((),f(s)))

```
contrary logic :eyes::eyes::eyes:
