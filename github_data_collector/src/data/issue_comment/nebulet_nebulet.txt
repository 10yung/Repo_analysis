## What I did 

Setting relative path blocked `cargo userspace` in README.md with error `No such file or directory (os error 2)`. It turns out that the driver's cargo is pointing path in relative way assuming libsip and nebulet repos are placed in home(~/) directory. Now that [libsip](https://github.com/nebulet/libsip) is in git, I add pull request to uncomment the git comment.
I have almost everything updated except for a few things.

`hashmap_core` relies on some internal allocation error enums that were recently changed. I've got a patch [here](https://github.com/Amanieu/hashmap_core/pull/11) but it still needs testing and such.

Other than that, I'm getting these odd errors:

```rust
error: unrecognized platform-specific intrinsic function: `x86_rdrand32_step`
  --> src/arch/x64/devices/rand/rdrand.rs:21:5
   |
21 |     fn x86_rdrand32_step() -> (u32, i32);
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error: unrecognized platform-specific intrinsic function: `x86_rdrand64_step`
  --> src/arch/x64/devices/rand/rdrand.rs:22:5
   |
22 |     fn x86_rdrand64_step() -> (u64, i32);
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error: unrecognized platform-specific intrinsic function: `x86_rdseed32_step`
  --> src/arch/x64/devices/rand/rdseed.rs:21:5
   |
21 |     fn x86_rdseed32_step() -> (u32, i32);
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error: unrecognized platform-specific intrinsic function: `x86_rdseed64_step`
  --> src/arch/x64/devices/rand/rdseed.rs:22:5
   |
22 |     fn x86_rdseed64_step() -> (u64, i32);
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
```

I'm not sure if this has to do with my system or not. I'm running Manjaro Linux.
I think this has something to do with the `rand_core` version. I upgraded it to 4.0 but the latest version, 5.0, brings a lot of API changes.

I'll try to work on this when I can!
Is nebulet still in active development? I saw this tweet: https://twitter.com/willscott/status/1121607193873145856 so I assume it is/will be?

Do you think nebulet can implement WASI?

And how much memory overhead does nebulet produce? Could wasm eventually be run on very resource constrained devices? 100-500kb flash?
I'm at a hackathon right now so I'm planning on dedicating a lot of time to ripping out the old threading system.

The aim is to make all processes single-threaded to reduce synchronization overhead. This should also make the interface between usercode and the kernel a lot faster and simpler.

- [x] Remove multi-threading from processes.

- [x] Remove dynamic dispatching from api objects.

- [ ] Somehow check api object type before calling api.

- [ ] Remove synchronization from wasm table accesses.
I recently found [this](https://news.ycombinator.com/item?id=17945293) comment on hackernews about an envisioned platform that sounded suspiciously similar to nebulet, just having taken a different path early on.

Here's the comment in full:

> I think, eventually, the whole stack will get rewritten from the ground up. Someone is going to come up with a minimal OS that can be run on virtual machines that implements LLVM in a provably correct way, the OS hooks will get reimplemented as libraries for all the languages, and over a few years or so the entire cloud infrastructure will simply switch over.
>
> I think we're already half the way there, Amazon Linux is how widely deployed already? The surface area between application logic and OS code is shrinking by the year, once serverless goes mainstream then even application code will start to get rare, pushed to only those specific projects that require human interaction. Everything else is 'mere' computation, something that can be specified purely algorithmically and executed by anything.
>
> The OS will only be relevant in the context of personal computing, the human interface to the machine kingdom which shed those trappings decades ago.
>
> 20-30 years down the road I see a translation layer unifying all three major, now solely personal, operating systems, and a fundamental, free software core being driven out, eventually supplanting proprietary development. Apple will do its best to retain tight coupling between their hardware and software, but they'll slowly fade just like Microsoft did as programming itself is revealed to consist of two main activities, intricate UX and comparatively dumb data plumbing, with a small priesthood of hardware driver maintainers / database developers for those who still want to do 'real' programming.
>
> Everybody will be able to code at some level and it'll be amazing.

*- vinceguidry*

--------

It's food for thought. Should nebulet have taken a different path earlier on? Really, the essential concept here is architecture-independent processing of data. It doesn't matter if nebulet is a microkernel or what it's running on or what the drivers are written in.

It just need to be a platform that you can drop code on that will receive data, process it, and send it back out.
Asynchronous code seems to be all the rage these days. I figured out a way of implementing coroutines in Nebulet that appear to be normal threads to the user, but are, in fact, lightweight coroutines. This would allow the syscall interface to be completely asynchronous, but actually appear to be blocking. This would simplify writing applications for Nebulet and improve performance.

This would involve removing preemption for threads and each process would only run on a single core at a time (essentially making processes the defacto unit of true concurrency), eliding the need for expensive synchronization.

Gist

- No preemption at the thread level. A process only executes on one cpu at a time.
- Create threads normally, but thread switching code is injected at specific points, like external function calls and in some loops.
- To run on multiple cpus, create multiple processes.
- **To the user, threads appear to be fully-preemptive, but under the hood, they are coroutines.**
- Can mark spots as thread switch locations and mark functions where no thread switches should be generated.

Advantages

- May result in better overall performance.
- No locks or atomics are necessary for tables or thread queues.
- The syscall interface can appear to be blocking, but actually be asynchronous.
- No language support required for coroutines.

Disadvantages

- May constrict some usages.

Design Challenges

- Requires some way of generating and saving new wasm stacks.
- Requires a complete rewrite of the threading support in Nebulet.



Thoughts?
Currently, the Nebulet org has a picture of a nebula taken from wikipedia as a placeholder logo. Now that the Google Summer of Code program is nearly over, I think it's time to have a legit logo.

I'm not really sure where to go with this, for both logo design and actually designing the logo.
A user-space emulator for Linux, etc, would be very useful, as it would enable one to develop applications for Nebulet without requiring a fully-virtualized Nebulet instance.
While we're coming up with a policy in the dark sanctuary of the gitter room, we'd still like input on what people think we should decide here.

Right now, we're leaning towards mostly ignoring possible issues involving spectre, but allowing users to run untrusted code inside a hardware-protection domain, similar to singularity.
(I'm trying to figure out a good first issue to expand the ABIs)

A watchdog ABI could work like this:
- watchdog_setup(tick_interval)
- watchdog_alive()

An interrupt is programmed for the given tick interval, and the process is killed if it doesn't call watchdog_alive before the interrupt triggers. Each call to watchdog_alive resets the interrupt.