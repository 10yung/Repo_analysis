It seems that the builtin theme in the current stable version pulls some Google fonts. Therefore, when loading the app while running it locally without internet access, the app fails complains with the sentence

    ERROR: cannot open the connection to 'https://fonts.googleapis.com/icon?family=Material+Icons'

This is related to the default way to replace the default CSS in #97.
Hello:

I am having trouble having update_material_radio_button trigger reactive outputs.

app.R (regular shiny) - works ok. The default radio button is "Normal". App launches and it updates to "Uniform" and the reactive output changes.

app.R (shinymaterial) - similar functionality doesn't work. The default radio button is "No cost estimate". The observeEvent updates the radio button choice to "Cost per animal". But the reactive output doesn't change until I click on the Cost Estimates drawer and then click on COST PARAMETERS button (the choice is selected so the update worked but the reactive output doesn't get rendered (reactive section is not called).

See code snippets down below

I would appreciate any thoughts @ericrayanderson  @bilbaoba 


```
#app.R (shinymaterial)


library(shiny)
library(shinymaterial)

ui = 	material_page("",include_icons = FALSE, include_nav_bar = FALSE,
                    
                    ####################### Add javascript and css within head of HTML ###################
                    tags$head(
                      tags$meta(charset="UTF-8"),
                      tags$link(rel = "stylesheet", type = "text/css", href = "../www/materialize.css"),
                      tags$script(src="../www/collapse.js")
                      #tags$script(src="https://cdnjs.cloudflare.com/ajax/libs/materialize/1.0.0-beta/js/materialize.min.js"),
                    ),
                    HTML('<script>
                         $( document ).on("shiny:sessioninitialized", function(event) {
                         Shiny.setInputValue("foo", "bar", {priority: "event"});     
                         });</script>'),
                    
                    
                    ################################### Body	###################################
                    tags$body(
                      
                      material_column(id="BigStuff",
                                      
                                      tags$br(),
                                      
                                      # Start of application
                                      material_row(
                                        
                                        # This is the side column with the collapsible assumptions
                                        material_column(width=3,
                                                        
                                                        ########################### Collapsible assumptions ###########################
                                                        tags$ul(class="collapsible", 
                                                                ############ Cost Estimates ###############
                                                                tags$li(
                                                                  tags$div(class="collapsible-header",tags$i(class="material-icons", "monetization_on"), "Cost Estimates"),
                                                                  tags$div(class="collapsible-body",
                                                                           material_modal(modal_id = "CostEst_Modal",button_text = "Cost Parameters",button_icon = NULL,title = "Cost Estimates",
                                                                                          button_color ="light-blue accent-4",
                                                                                          material_radio_button(input_id = "CostEst_Par",label = "Select one variable parameter",choices = c("No Cost Estimate" = "CostEst_No", "Cost per Animal" = "CostEst_Animal", "Cost per Farm" = "CostEst_Farm"), color = "#ef6c00")),
                                                                           tags$br(),
                                                                           uiOutput("ExtraCostEst_Parameters")
                                                                  )
                                                                ),
                                                                )
                                                                #######################################
                                                        )
                                                        ########################### End of Collapsible assumptions ###############
                                        ),
                                        ),
                                      # End of application
                                      tags$br(),
                                      material_row()
                      )
                    )

## This is the server content. This is reactive based on user input
server <- function(input, output, session) {
  observeEvent(input$foo, {
    #browser()
    update_material_radio_button(session, input_id = "CostEst_Par",
                                 value = "CostEst_Animal")
  }, priority = 0, once = TRUE)
  
  ##===== Reactive inputs for Cost Estimate
  output$ExtraCostEst_Parameters <- renderUI({
    #browser()
    print("ExtraCostEst_Parameters")
    spinnerName <- "CostEst_Spin"
    inputSelection <- input$CostEst_Par
    SelectionList <- CostEst_List
    
    
    #--- Show the spinner ---#
    material_spinner_show(session, spinnerName)
    
    if (inputSelection==SelectionList[1]) {
      ExtraInputs <- tags$br()
    } else if (inputSelection==SelectionList[2]) {
      ExtraInputs <- list(
        material_row(
          material_column(numericInput(inputId = "CostEst_Animal_Par",label="Cost per Animal", value = 100))
        )
      )
    } else if (inputSelection==SelectionList[3]) {
      ExtraInputs <- list(
        material_row(
          material_column(numericInput(inputId = "CostEst_Farm_Par",label="Cost per Farm", value = 10000))
        )
      )
    }else{
      ExtraInputs <- tags$br()
    }
    
    
    #--- Hide the spinner ---#
    material_spinner_hide(session, spinnerName)
    ExtraInputs
  })
}

shinyApp(ui, server)

```

```
#app.R (regular shiny)
library(shiny)

ui <- fluidPage(
  radioButtons("dist", "Distribution type:",
               c("Normal" = "norm",
                 "Uniform" = "unif",
                 "Log-normal" = "lnorm",
                 "Exponential" = "exp")),
  plotOutput("distPlot")
)

server <- function(session, input, output) {
  
  observe({
    updateRadioButtons(session, inputId = "dist",
                       selected = "unif", inline = FALSE)
  })
  
  output$distPlot <- renderPlot({
    dist <- switch(input$dist,
                   norm = rnorm,
                   unif = runif,
                   lnorm = rlnorm,
                   exp = rexp,
                   rnorm)
    
    hist(dist(500))
  })
}

shinyApp(ui, server)
```
I am trying `shinymaterial` out for the first time and I absolutely love it! Thank you so much for putting this package together. I am finding that it loads a lot faster than `shinydashboard` for me.

The project I am working on right now includes `leaflet` and I noticed that when I open the side navbar, the map controls and attribution were showing up in front of everything. It also occurred with the `selectizeInput` dropdown menu. Here is a link to an image that should give you an idea of what I am talking about: [Image Link](https://drive.google.com/file/d/1q4Ajr1YvbdlQqKCqfbN99HxNg9eJYQwG/view?usp=sharing)

I felt pretty stupid trying to figure out what was going on and finally came across the `z-index` attribute. It turns out that `.leaflet-top, .leaflet-bottom` defaults to 1000 which pushes it in front of everything at all times. I don't know if other people are having this issue but I just wanted to bring it to your attention as a potential pain point for people. 

I added this code to my shiny application to resolve everything:
```r
tags$head(HTML("<style>* .leaflet-top, .leaflet-bottom { z-index: 888; } </style>"))
```

Here is a link to an image showing that it corrected: [Image Link Corrected](https://drive.google.com/file/d/141y0llrQONU7SjJAWC4dpATirpsD0gNm/view?usp=sharing)

I apologize if this is not a relevant issue. Just wanted to bring this to your attention and share my current fix.
library(shiny)
library(shinymaterial)

df1 <- data.frame(x = 1:10, y = 1:10)
df2 <- data.frame(x = c(rep('a', 10), rep('b', 10)),
y = c(rnorm(10), rnorm(10, 3, 1)))

ui <- material_page(title = "Material Design",
tags$br(),
font_color = "cyan darken-5",
nav_bar_color = "cyan darken-5",
plotlyOutput('scatter')
)

server <- function(input, output) {
output$scatter <- renderPlotly({
plot_ly(df1, x = df1$x, y = df1$y, type = 'bar', source = 'scatter')
})
}

shinyApp(ui = ui, server = server)

the above mentioned code is for the bar chart in plotly, I am struck at a point where I need a help;- I want a pop-up when I click over the bar chart the respective contents to be
displayed.
Please help me on the same.
I am having 5 tab items in my application....The first one is login...I want to use the shiny material to design the login tab..material_page works fine for the login tab...But after login when I switch to the other tabs the components like textInput ,buttons appear to be inherited  from material_page even though they aren't surrounded by material_page() in that tab and hence the view appears to be distorted...Can u look into it
Hi,

thanks for the hard work to implement material design for shiny. I'm trying to apply a custom theme derived via the SASS definition of materialize v1.0.0. I think I should place the CSS and JavaScript files in corresponding folders under 'www' but what is the recommended way to apply the theme instead of the built-in version of materialize CSS/JavaScript? Is there a theme apply function somewhere to replace the built-in theme?

Thanks!

Best
Johannes
We need to programatically select a side nav tab. We tried to adapt the example from @bilbaoba 's example from this question regarding tabs: [https://github.com/ericrayanderson/shinymaterial/issues/79](https://github.com/ericrayanderson/shinymaterial/issues/79) but cannot get it to work.

Here is what we have tried:
```
library(shiny)
library(shinymaterial)

ui <- material_page(
	title = "Basic Page + Side-Nav with Tabs",
	nav_bar_fixed = TRUE,
	
	material_side_nav(fixed = TRUE,
										
	material_side_nav_tabs(
		side_nav_tabs = c(
			"Example Side-Nav Tab 1" = "example_side_nav_tab_1",
			"Example Side-Nav Tab 2" = "example_side_nav_tab_2"
		),
		icons = c("cast", "insert_chart")
	)),
	
	material_side_nav_tab_content(
		side_nav_tab_id = "example_side_nav_tab_1",
		
		material_button(input_id = "button", label = "GO TO SECOND SIDE NAV TAB")
		
	),
	
	material_side_nav_tab_content(
		side_nav_tab_id = "example_side_nav_tab_2",
		
		tags$h1("Second Side-Nav Tab Content"))
)

server <- function(input, output, session) {
	
	observe({
		if (input$button == 0)
			return()
		js_code <-
			"$('li.shiny-material-side-nav-tab a[href$=\"#example_side_nav_tab_2_tab_id\"]:first').trigger(\"click\");"
		session$sendCustomMessage(type = "shinymaterialJS", js_code)
	})
	
}
shinyApp(ui = ui, server = server)
```
Any help on this would be much appreciated. Thank you
(I did ask this on SO too https://stackoverflow.com/questions/56789753/programatically-change-selected-nav-tab-in-r-shinymaterial-app but had no response) 
![image](https://user-images.githubusercontent.com/52206594/60263997-c3c41200-98ff-11e9-8747-f46bf9283a01.png)

Is there any plan to implement the same functionality of selectizeInput (using selectize.js) in ShinyMaterial? Selectize.js (selectizeInput)  provides a much more flexible interface compared to the basic select input. 
Hi Eric, 

Just a minor patch for the function `update_material_button`; I forgot to inverse the boolean `enable`. The property for the js code is `disabled` and it's different from the R function (enable). 

Thanks. 
 