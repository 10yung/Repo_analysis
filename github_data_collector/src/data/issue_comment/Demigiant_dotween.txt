Whenever I update my code during play mode, I noticed that an extra instance of `DOTweenComponent` is spawned in hierarchy after assembly reload:

![Unity_2020-01-08_22-16-22](https://user-images.githubusercontent.com/1537591/72016665-8522f300-3264-11ea-807f-e35d5ca99096.png)

Is this something to worry about or can be safely ignored ?

PS I don't do anything fancy, just using `DOTween.To`

Thank you !
I have multiple tweens which might be create randomly one after another. I want to these tweens execute in the order which they created. For example:

Tween A created at frame 1;
Tween B created at frame 10;
Tween C created at frame 20;

However, the tween A may complete before frame 20 and then after the tween C was created it may be execute before tween B in the later update cycles. How could I make the later created tween always execute in the later order?
I have the following line (where _score, x and target_ are "long"):

`Tween t = DOTween.To(() => _score, x => _score = x, target, transitionTime).OnUpdate(() => myText.text = _score.ToString("C0"));`  

For instance: in the particular case in which _score is initially 0 and target is 999,999,999,999,999 the _score gets stuck at 999,999,986,991,104 (always the same value).
This is a repost/revision of closed issue #347 because it was closed prematurely.  I have updated my explanation with a simpler example that shows there is clearly a bug in the DORotate method.  

To reproduce the bug:

1. Create a New Unity Project (in Unity 2019.2.10f1)
2. Import the latest version of DOTween Pro (v.1.0.165)
3. Right Click > 3D Object > Cube
4. Cube > Transform > Right Click > Reset
5. Drag CubeRotator onto Cube (see **new code** below)
6. Play


```
using DG.Tweening;
using UnityEngine;

public class CubeRotator : MonoBehaviour
{
    private void Start()
    {
        transform.eulerAngles = new Vector3(95, 0, 0);
        transform.DORotate(
            new Vector3(100, 0, 0), 1);
    }
}
```


**EXPECTED BEHAVIOR:** The cube rotates from X-Rotation of 95 degrees to X-Rotation of 100 degrees, and the Y and Z Rotation values stay at 0 the whole time. 

**ACTUAL BEHAVIOR:** The cube rotates from X-Rotation of 95 degrees to X-Rotation of 100 degrees, and the Y and Z Rotations change constantly throughout the tween.  

**Watch a video here:** https://gfycat.com/zealousdisloyalgallinule
(when viewing, click the gear icon to switch to HD)

I made posts about my experiments here:
https://forum.unity.com/posts/5104151/
https://forum.unity.com/posts/5110205/

![ZealousDisloyalGallinule-size_restricted](https://user-images.githubusercontent.com/13238025/70926147-9593d500-1ffa-11ea-95e4-2805e862b5fd.gif)

**Previous Response**
On Issue #347 there was a response from @lordlycastle that the solution was simply to use RotateMode.LocalAxisAdd.  This is not a solution. 

First, the problem was not the RotateMode.  There was no reason why the Y and Z axes should have changed when only tweening the X-Rotation value.  

Second, RotateMode.LocalAxisAdd is a different method used for different circumstances.  It does not allow you to choose the final rotation angle.  It adds to whatever the current rotation angle may be.  This is not the behavior I needed, and this does not correct the bug in the DORotate method. 

**FURTHER COMMENTS**
My investigations have revealed that the bug described appears to happen only when the starting X-Rotation is greater than 90 degrees - and only happens with X-Rotation (not with Y-Rotation or Z-Rotation).  

**Example 1** - Rotation-X from 70 degrees to 80 degrees:
```
using DG.Tweening;
using UnityEngine;

public class CubeRotator : MonoBehaviour
{
    private void Start()
    {
        transform.eulerAngles = new Vector3(70, 0, 0);
        transform.DORotate(
            new Vector3(80, 0, 0), 1);
    }
}
```

Notice in the video that the X-Rotation tweens from 70 to 80 degrees, **while the Y and Z remain at 0 the entire time**.  This is correct behavior. 

Video: https://gfycat.com/recklessdownrightenglishsetter 
![RecklessDownrightEnglishsetter-size_restricted](https://user-images.githubusercontent.com/13238025/70927057-49499480-1ffc-11ea-93bf-6f65148b8142.gif)

**Example 2** - Rotation Y from 95 degrees to 100 degrees:

```
using DG.Tweening;
using UnityEngine;

public class CubeRotator : MonoBehaviour
{
    private void Start()
    {
        transform.eulerAngles = new Vector3(0, 95, 0);
        transform.DORotate(
            new Vector3(0, 100, 0), 1);
    }
}
```

Notice in the video that the Y-Rotation tweens from 95 to 100 degrees, **while the X and Z remain at 0 the entire time**.  This is correct behavior.

Video: https://gfycat.com/kaleidoscopicglaringdormouse
![KaleidoscopicGlaringDormouse-size_restricted](https://user-images.githubusercontent.com/13238025/70927362-d42a8f00-1ffc-11ea-9bcf-b44afe28d4f0.gif)

**CONCLUSION**
The DORotate method has a bug characterized by wobbling in the Y and Z axes when rotating about the X axis starting from an X-Rotation angle above 90 degrees.  


Hello,
I don't have the time to create full fixes, since I'm very busy working on a game, but I encountered some bugs in DOTween and figured I'll post the partial fixes here. (Partial, because the fixes weren't made checked against other or older Unity versions and API changes may require different fixes there).
These fixes were only tested with **Unity 2019.1.14f1**!

I post both problems inside a single issue, because they're directly linked. Problem 2's fix is required to fully fix problem 1.

## Problem 1: Early delays are broken when using independent timescale
## Problem 2: Pausing inside the editor not taken into account when using independent timescale

### How to replicate:
* Create a tween directly in `Awake()` or `Start()` on a GameObject that is part of the scene from the beginning (e.g. using DOTween Pro's animation component)
* Add a 1 second delay to the tween
* Set it to use the independent timescale
### Expected behavior
Tween starts playing after 1 second regardless of the game's timescale.
### Actual behavior
Tween takes +3 seconds to play.

### Root problem 1
* The way the `unscaledTime` and `unscaledDeltaTime` properties are calculated inside the `DOTweenComponent.cs` is incorrect
* If the game takes long to initialize (e.g. in a bigger project like ours), the first few values for `unscaledTime` are inaccurate and cause problems like negative values for `unscaledDeltaTime`

### Solution
* Initialize the `unscaledTime` with 0 [here](https://github.com/Demigiant/dotween/blob/develop/_DOTween.Assembly/DOTween/Core/DOTweenComponent.cs#L46)

### Root problem 2
* `OnApplicaitonPaused()` is invoked a few frames after entering play mode for no reason
* Wrong callback used in `DOTweenModuleUtils.cs`
* `UnityEditor.EditorApplication.playmodeStateChanged` is called at the start and end of playing in the editor, not when pausing inside the editor

### Solution
* Use `UnityEditor.EditorApplication.pauseStateChanged` instead [here](https://github.com/Demigiant/dotween/blob/develop/_DOTween.Assembly/bin/Modules/DOTweenModuleUtils.cs#L47)
in OnKill Callback call KillAll then create a new tween
the new tween not run, and not trigger any callback 
I'm creating a custom package that implements DOTween. The UtilityWindow expects the logos to be placed in the Assets folder. Due to my project being a package the root directory of the package is Library and not Assets.

I pulled the project from the master branch and changed the Init() of the DOTweenUtilityWindow by returning true if the logo couldn't be found. I've implemented the modules and the assembly definition into my package and everything is working as intended. Even the postprocessing and settings get loaded.

It seems to me that this piece of code is unnecessary and won't affect anybody if you'd remove it. It would make my life so much easier.

Thanks in advance!
Newer repository URL.

You will need to rebuild `Win81CompatibilityTest.unitypackage` to reflect the changes inside the package.
For some reason it sets the "_Color" property instead of the specified property on the first loop though the keys. 
The specified trouble line is line 56 in ShortcutExtensions43.cs "target.color = c.color;".
target.color is "_Color" which is not desirable.
my project use ngui.

for example when sences has 2 cameras  A and B.
A localposition is (2000,2000,2000) 
B localposition is (0,0,0) 

if call DoMove in A camera, z value change to  a wrong value
![image](https://user-images.githubusercontent.com/6999099/65871781-b82a3080-e3b1-11e9-9086-86fe2bdb8734.png)

if i set A camera to (2000,2000,0)  to (2000,2000,2) it works ,when set z value more than 2 always error.
