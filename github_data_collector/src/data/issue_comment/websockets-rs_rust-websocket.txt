This other crate is being maintained, it offers better performances (when using the `asm` feature, especially [on AArch64](https://github.com/RustCrypto/hashes/pull/97)).  It also allows deduplicating SHA-1 crates in cargo-web.
This PR provides a more informative error message when a `WebSocketOtherError` is displayed. The main driver of this change is vi/websocat#55, which would then indicate the concrete status code obtained from the server.
In order to use any of the connect functions I would be required to depend on native_tls directly. It would be easier if you exposed the version you depend on.
```
use native_tls::TlsConnector; //Errors out currently
use websocket::native_tls::{TlsConnector, Certificate}; //What I propose

let mut file = File::open("cert.pem")?;
let mut data:Vec<u8> = Vec::new();
file.read_to_end(&mut data);
let root_ca = Certificate::from_pem(&data)?;
let connector = TlsConnector::builder().add_root_certificate(root_ca).build()?;

let mut builder: ClientBuilder = ClientBuilder::from_url(&self.url);
let mut client = builder.connect(Some(connector))?;
```
I would like to be able to run `server.accept()` and have it block for a `Duration`, after which I have an opportunity to perform other logic before continuing my loop.

My purpose is so I can implement a kill switch (an `Arc<AtomicBool>`, updated elsewhere) and end my thread if it's flipped.
Do you have a roadmap as to the async/await-based API? I think it will require migrating to 2018 edition and other breaking changes, so I wonder what the plan is.
Using `client.connect(None)` to connect to a `wss://` endpoint, but got `TLS Handshake failure`.

Connecting to `ws://` endpoint works just fine.

Tool-chain: stable-i686-pc-windows-gnu
Environment: Windows 10 x64

Is there any way to diagnose the problem? Any pointers?
The stream seems to fail if there is an invalid connection: [Incoming stream](https://docs.rs/websocket/0.23.0/websocket/server/async/type.Incoming.html)
When one connection failed with `some bytes remained on the stream`, the entire listener failed and the only way to get out from this situation is binding a new one.
`TcpListener` does not do that. Bad connections are the `TcpStream`'s responsibility, but not the `TcpListener`'s.
What can I do here?
Hi :wave: 
> TL;DR: i'm currently using this great crate in my projects (as a client for now) and recently i had to containerize my package into (docker container), that is not a problem, the problem is i want to use musl libc so i can build a static minimum bare-metal image.
 
using [rustls](https://github.com/ctz/rustls) would make cross compiling a way better, so any plans to support it under a feature flag ? maybe `async-rustls` and `sync-rustls` ?

Thank you all for your great work :+1: 
See https://github.com/centricular/gstwebrtc-demos/issues/120

Pretty standard usage of `ws` connecting to `wss://webrtc.nirbheek.in:8443` via [`async_connect()`](https://github.com/centricular/gstwebrtc-demos/blob/354570943d4acadd3dbb5427a59020839a1d5453/sendrecv/gst-rust/src/main.rs#L799-L802).

What happens here is that it resolves to `2a01:7e00::f03c:91ff:feae:244` and `176.58.110.251`, tries the first, gets `connection refused` and does not even try the next one.
I'm using the sync client of websockets-rs to connect to a server written in actix-web over localhost.  I've got a 181KB chunk of binary that I'm requesting from my server, then sending back.  I'm getting the chunk just fine from the server, but when I try to send it back the server never registers a message.  Looking at wireshark, there's some packets that have 0 length.  I'm sending the data like this:
`let bin_message = OwnedMessage::Binary(data);
	client.send_message(&bin_message)`
where data is a `Vec<u8>`.  
A binary chunk of 1264 bytes went back and forth just fine.  Do I need to handle the byte streaming myself?  Why does this work on the receiving end and not the sending?  I've verified my server with a python websocket client, I know it's working on that end.
.pcap of the traffic is attached.  
[dumpfile.zip](https://github.com/websockets-rs/rust-websocket/files/3177900/dumpfile.zip)