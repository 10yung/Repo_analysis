The [cats-scalatest](https://github.com/IronCoreLabs/cats-scalatest) project set up a `Pure` cross project for JVM and JS platforms on several Scala versions. Dependency resolution seems to work fine throughout the matrix, except for the root project. The broken config is [available for reference on the `scalajs-cross-pure-broken` branch](https://github.com/IronCoreLabs/cats-scalatest/blob/scalajs-cross-pure-broken/build.sbt#L4-L6).

```
sbt:cats-scalatest> projects
[info] In file: ~/cats-scalatest/
[info] 	 * cats-scalatest
[info] 	   catsScalatestJS
[info] 	   catsScalatestJVM
```

Running `sbt test` or `sbt compile` results in compilation failures in the root (`cats-scalatest`) project that indicate missing dependencies, e.g.:

```
[info] Compiling 5 Scala sources to ~/cats-scalatest/target/scala-2.12/classes ...
[error] ~/cats-scalatest/src/main/scala/cats/scalatest/EitherMatchers.scala:3:12: object scalatest is not a member of package org
[error] import org.scalatest.matchers.{BeMatcher, MatchResult, Matcher}
[error]            ^
```

Running `sbt catsScalatestJS/compile` or `sbt catsScalatestJVM/compile` both work fine.

I would have expected `compile` or `cats-scalatest/compile` to call the platform-specific projects' `compile` tasks, not execute one of its own.

FWIW, I noticed that setting the Scala version using `++` excludes the core project:
```
sbt:cats-scalatest> ++ 2.11.12 -v
[info] Setting Scala version to 2.11.12 on 2 projects.
[info] Switching Scala version on:
[info]     catsScalatestJVM (2.11.12, 2.12.10, 2.13.1)
[info]     catsScalatestJS (2.11.12, 2.12.10, 2.13.1)
[info] Excluding projects:
[info]   * cats-scalatest (2.12.10)
[info] Reapplying settings...
[info] Set current project to cats-scalatest (in build file:~/cats-scalatest/)
```

Maybe `cats-scalatest` should be excluded more broadly, and it's not for some reason? 

We worked around the issue by switching to a `Full` cross project on the primary branch. The [broken config is preserved on the `scalajs-cross-pure-broken` branch](https://github.com/IronCoreLabs/cats-scalatest/tree/scalajs-cross-pure-broken). (There is no platform-specific code for this project, so ideally it will switch back to `Pure` once we figure out what's going wrong.)




at https://github.com/portable-scala/sbt-crossproject/releases/tag/v0.6.1
Depending on whether `.jsConfigure` call is placed before or after `.settings`, the cross type/directory configuration changes.

Repository with a reproduction set up [here](https://github.com/liff/sbt-crossproject-jsConfigure-issue).

Versions:
 - sbt = 1.2.8
 - sbt-crossproject = 0.6.0
 - sbt-scalajs-crossproject = 0.6.0
 - sbt-scalajs = 0.6.26

Given this `build.sbt`:

```scala
import sbtcrossproject.CrossPlugin.autoImport.{CrossType, crossProject}


val good = crossProject(JVMPlatform, JSPlatform)
  .crossType(CrossType.Pure)
  .settings(scalaVersion := "2.12.8")
  .jsConfigure(identity)

val bad = crossProject(JVMPlatform, JSPlatform)
  .crossType(CrossType.Pure)
  .jsConfigure(identity)
  .settings(scalaVersion := "2.12.8")
```

Results in correct `sourceDirectories` for the project where `.jsConfigure` is after `.settings`:

```
$ sbt 'show goodJVM/sourceDirectories' 'show goodJS/sourceDirectories'
...
[info] * /tmp/sbt-crossproject-jsConfigure-issue/good/.jvm/src/main/scala-2.12
[info] * /tmp/sbt-crossproject-jsConfigure-issue/good/.jvm/src/main/scala
[info] * /tmp/sbt-crossproject-jsConfigure-issue/good/.jvm/src/main/java
[info] * /tmp/sbt-crossproject-jsConfigure-issue/good/src/main/scala-2.12
[info] * /tmp/sbt-crossproject-jsConfigure-issue/good/src/main/scala
[info] * /tmp/sbt-crossproject-jsConfigure-issue/good/.jvm/target/scala-2.12/src_managed/main
[info] * /tmp/sbt-crossproject-jsConfigure-issue/good/.js/src/main/scala-2.12
[info] * /tmp/sbt-crossproject-jsConfigure-issue/good/.js/src/main/scala
[info] * /tmp/sbt-crossproject-jsConfigure-issue/good/.js/src/main/java
[info] * /tmp/sbt-crossproject-jsConfigure-issue/good/src/main/scala-2.12
[info] * /tmp/sbt-crossproject-jsConfigure-issue/good/src/main/scala
[info] * /tmp/sbt-crossproject-jsConfigure-issue/good/.js/target/scala-2.12/src_managed/main
```

And bad `sourceDirectories` where `.jsConfigure` is before `.settings` (looks like `CrossType.Full` configuration?):

```
$ sbt 'show badJVM/sourceDirectories' 'show badJS/sourceDirectories'
...
[info] * /tmp/sbt-crossproject-jsConfigure-issue/bad/jvm/src/main/scala-2.12
[info] * /tmp/sbt-crossproject-jsConfigure-issue/bad/jvm/src/main/scala
[info] * /tmp/sbt-crossproject-jsConfigure-issue/bad/jvm/src/main/java
[info] * /tmp/sbt-crossproject-jsConfigure-issue/bad/shared/src/main/scala-2.12
[info] * /tmp/sbt-crossproject-jsConfigure-issue/bad/shared/src/main/scala
[info] * /tmp/sbt-crossproject-jsConfigure-issue/bad/jvm/target/scala-2.12/src_managed/main
[info] * /tmp/sbt-crossproject-jsConfigure-issue/bad/js/src/main/scala-2.12
[info] * /tmp/sbt-crossproject-jsConfigure-issue/bad/js/src/main/scala
[info] * /tmp/sbt-crossproject-jsConfigure-issue/bad/js/src/main/java
[info] * /tmp/sbt-crossproject-jsConfigure-issue/bad/shared/src/main/scala-2.12
[info] * /tmp/sbt-crossproject-jsConfigure-issue/bad/shared/src/main/scala
[info] * /tmp/sbt-crossproject-jsConfigure-issue/bad/js/target/scala-2.12/src_managed/main
```

Builds using `.scala` are less favoured than using `sbt`. We may want to go towards that direction
Here's what I came up with:
```scala
def zioUri      = uri("git://github.com/scalaz/scalaz-zio.git#7f27e9cbc3")
lazy val zioJVM = ProjectRef(zioUri, "coreJVM")
lazy val zioJS  = ProjectRef(zioUri, "coreJS")

lazy val base = crossProject(JSPlatform, JVMPlatform)
  .jvmConfigure(_ dependsOn zioJVM)
  .jsConfigure(_ dependsOn zioJS)
  ...
```
But with a bit of support here, I think it could look like
```scala
lazy val zio = CrossProjectRef(
  uri("git://github.com/scalaz/scalaz-zio.git#7f27e9cbc3"),
  Map(JSPlatform -> "coreJS", JVMPlatform -> "coreJVM")
)
lazy val base = crossProject(JSPlatform, JVMPlatform)
  .dependsOn(zio)
  ...
```
The original [CrossProject][1] in SJS has quite extensive documentation, notably about some common pitfalls. It should be carried over (maybe to README.md).

[1]: https://github.com/scala-js/scala-js/blob/0.6.x/sbt-plugin/src/main/scala/org/scalajs/sbtplugin/cross/CrossProject.scala
The resource directory in the "shared" folder is not added to project `resourceDirectories`. This is a problem especially for `CrossType.Pure` as all resource directories for this layout are in the "hidden" `.<platform>` folder.

Ideally, resource directories should be treated in the same way as source directories are.

build.sbt:
```scala
import sbtcrossproject.{crossProject, CrossType}

lazy val foo =
  crossProject(JSPlatform, JVMPlatform)
    .crossType(CrossType.Pure)

lazy val `foo-jvm` = foo.jvm
lazy val `foo-js`  = foo.js
```
SBT shell:
```
sbt:tmp> show fooJVM/sourceDirectories
[info] * /private/tmp/foo/.jvm/src/main/scala-2.12
[info] * /private/tmp/foo/.jvm/src/main/scala
[info] * /private/tmp/foo/.jvm/src/main/java
[info] * /private/tmp/foo/src/main/scala-2.12
[info] * /private/tmp/foo/src/main/scala
[info] * /private/tmp/foo/.jvm/target/scala-2.12/src_managed/main
sbt:tmp> show fooJVM/resourceDirectories
[info] * /private/tmp/foo/.jvm/src/main/resources
[info] * /private/tmp/foo/.jvm/target/scala-2.12/resource_managed/main
```

See https://github.com/scala-js/scala-js/pull/2230