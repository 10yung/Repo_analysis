Try to render this SVG to JSON using the node implementation:
```jsx
<Svg width="10" height="10" viewBox="0 0 10 10">
   <Svg.Path d="M11.467 3.727c.289.189.37.576.181.865l-4.25 6.5a.625.625 0 01-.943.12l-2.75-2.5a.625.625 0 01.84-.925l2.208 2.007 3.849-5.886a.625.625 0 01.865-.181z"></Svg.Path>
</Svg>
```

**Expected behavior:**
Output correct sketch SVG structure

**Observed behavior:**
creates broken sketch SVG structure which can't run in Sketch and as you can see in the sandbox it will create a frame with infinity properties:

<img width="260" alt="Screen Shot 2020-01-16 at 8 58 13 AM" src="https://user-images.githubusercontent.com/13556017/72494766-57c6de00-383e-11ea-98c7-c679bb5e02dc.png">

was able to track it down to the `lona/svg-model` package which if you pass it this SVG then it will output the SVG path with no commands but that's about as far as I was able to get since the `lona/svg-model` isn't public

another note is that this same SVG if you copy and paste into sketch it will not render very well in comparison to Figma or the browser 
 

**How to reproduce:**
see sandbox below

**Sketch version:**
61.2

**Please attach screenshots, a zip file of your project, and/or a link to your github project**
https://codesandbox.io/s/infallible-lehmann-vplez
Hi, I'm trying to generate our color palette in sketch with react-sketchapp, from the documentation react-sketchapp supports Symbols and TextStyles, what about layer styles?

Example:
I can run the color palette example, but each element of the palette only has direct styles applied to it, I'd like to use layer styles like this ðŸ‘‡ 
![image](https://user-images.githubusercontent.com/2165256/72164986-b7337280-3394-11ea-94c3-744fae60628a.png)

Any pointers would be appreciated, otherwise I guess I'll have to use sketch's low level api?

**Background:**
I am a React full stack dev currently working with Grommet UI and would really like to use React Sketchapp for UI/UX. However, I do not have access to an OS X system. Most users are on Windows, OS X and Linux (in that order) but Linux and OS X are less than 10% of all computer users. Windows is closer to 90% but as developers most of us use Linux. Personally I work in Linux for almost everything including desktop and server. I would expect any Node.js based app to be able to run seamlessly across Windows, OS X and Linux the same. 

| -------------------------------------------------------------------------------------------------
| **Requesting a new feature**
| -------------------------------------------------------------------------------------------------

**Proposal/Feature-request:** 
I would like to request a feature to have the ability to run React Sketch.app on Linux. I feel that most developers will then have access to either OS X and or at least Linux like myself. If not possible with Node directly, I would like to propose an Electron based version.

| -------------------------------------------------------------------------------------------------
| **Reporting a bug or issue (not really a bug, but more of a feature request)**
| -------------------------------------------------------------------------------------------------

**Expected behavior:** 
Is to run on Linux following ```npm install``` and then ```npm run render```

**Observed behavior:** 
```
git clone https://github.com/airbnb/react-sketchapp.git
```
```
cd react-sketchapp/examples/basic-setup && npm install
```
**Works with no issues as expected**
```
nrydevops@cloudshell:~/react-sketchapp (nrydevops)$ npm run render
npm ERR! missing script: render

npm ERR! A complete log of this run can be found in:
npm ERR!     /home/nrydevops/.npm/_logs/2019-12-30T21_17_51_020Z-debug.log
```
additional logging:
```
0 info it worked if it ends with ok
1 verbose cli [ '/usr/bin/node', '/usr/bin/npm', 'run', 'render' ]
2 info using npm@6.13.4
3 info using node@v12.14.0
4 verbose stack Error: missing script: render
4 verbose stack     at run (/usr/lib/node_modules/npm/lib/run-script.js:155:19)
4 verbose stack     at /usr/lib/node_modules/npm/lib/run-script.js:63:5
4 verbose stack     at /usr/lib/node_modules/npm/node_modules/read-package-json/read-json.js:116:5
4 verbose stack     at /usr/lib/node_modules/npm/node_modules/read-package-json/read-json.js:436:5
4 verbose stack     at checkBinReferences_ (/usr/lib/node_modules/npm/node_modules/read-package-json/read-json.js:391:45)
4 verbose stack     at final (/usr/lib/node_modules/npm/node_modules/read-package-json/read-json.js:434:3)
4 verbose stack     at then (/usr/lib/node_modules/npm/node_modules/read-package-json/read-json.js:161:5)
4 verbose stack     at /usr/lib/node_modules/npm/node_modules/read-package-json/read-json.js:382:12
4 verbose stack     at /usr/lib/node_modules/npm/node_modules/graceful-fs/graceful-fs.js:115:16
4 verbose stack     at FSReqCallback.readFileAfterClose [as oncomplete] (internal/fs/read_file_context.js:61:3)
5 verbose cwd /home/nrydevops/react-sketchapp
6 verbose Linux 4.19.72+
7 verbose argv "/usr/bin/node" "/usr/bin/npm" "run" "render"
8 verbose node v12.14.0
9 verbose npm  v6.13.4
10 error missing script: render
11 verbose exit [ 1, true ]
```

**Sketch version:**
latest as of December 30, 2019


fix #430
_I am..._

**Reporting a bug or issue**
Making code changes while on Symbols page breaks the build

**Expected behavior:**
Making changes to the code would reflect them in Sketch regardless of which page is being browsed, as is the case with all the other examples.

**How to reproduce:**

1. Go to `symbols` example and run it using `npm run render`. This renders "Page 1"  correctly
2. Switch page from "Page 1" to "Symbols" in Sketch
3. Make any code change to the component file(s) while on "Symbols" page and save the file
4. Causes a build error, from which one cannot recover unless going back to "Page 1". The error:
```
Error: Cannot render into Symbols page
   at render (/Users/XXX/sketchapp/react-sketchapp/examples/symbols/symbols.sketchplugin/Contents/Sketch/my-command.js:4010:16)
   at /Users/XXX/sketchapp/react-sketchapp/examples/symbols/symbols.sketchplugin/Contents/Sketch/my-command.js:8600:30
   at __skpm_run (/Users/XXX/sketchapp/react-sketchapp/examples/symbols/symbols.sketchplugin/Contents/Sketch/my-command.js:50505:17)
   at __skpm_run[native code] (/)
```

**Sketch version:**
Version 58 (84663)

_I am a designer and developer, at the beginning stages of updating our existing design system sketch library to a new one with reactsketchapp_

We currently use a lot of nested symbols where we set additional rules on the parent symbol to prevent overrides to some child symbols.

**Example: Form Label component**

![image](https://user-images.githubusercontent.com/5712890/61552511-e16f2d80-aa0c-11e9-8c8d-eb40be88024d.png)
This symbol is used within all our form components (inputs, dropdowns, checkboxes, etc.)
I want to use the "manage overrides" feature in sketch to limit what can be overridden on the symbol when nested in parent symbols.

The manage overrides setting in sketch:

![image](https://user-images.githubusercontent.com/5712890/61552433-aec53500-aa0c-11e9-8bbd-6c811cb580cc.png)

Does this exist currently or can we add support for this functionality. Thanks in advance!
_I am... a designer and a developer

| -------------------------------------------------------------------------------------------------
| Requesting a new feature
| -------------------------------------------------------------------------------------------------

I can't find any resources on how to alter the rendering of your components based on the the size of the viewport or artboard i.e. single column / two column, show / hide elements.

In Jon Golds' Design as a Function of Data video there is a component called ResponsiveColumnLayout which I presume is doing just this but I cant see a reference to the component in the source code.

A 'how to' on this would be useful or a pointer on an external resource detailing how to do this.


Keeping all examples working as API changes are made is cumbersome. I believe the major pain point here is knowing what needs to updated. Currently, this requires manually running each example and verifying output.

I believe we would be able to greatly increase our confidence that examples are all working as expected by creating very light e2e tests. As a first pass, I purpose we simply check that content gets rendered rather than a `RedBox`.

This should help us mitigate issues like #351 and #360
I'm wondering if it would be possible to create a router for react-sketchapp. It would render all the routes (Artboards) at once in a page and set up the links so that they can be viewed as a prototype.

It's just a fuzzy idea for now but it might just work. Bonus point if we can mimic the `react-router` API

cc @jaridmargolin 

Right now the `Page` component acts a flex container, allowing to render `Artboard`'s and `SymbolMaster`'s in either a column or a row.

I'd like however to have unlimited flexibility rendering Pages by composing `Flex` components. By having some sort of arbitrary `Flex` container, I could layout items on a `Page` in complex grids if necessary.

This would require us introducing a new Component that can be utilized to compute Yoga layout, but doesn't actually result in any backed rendering.

@mathieudutour - I know this goes against some of your comments in #291, but I'm not sure how else to achieve this.

**note:** it doesn't need to be called `Flex`.