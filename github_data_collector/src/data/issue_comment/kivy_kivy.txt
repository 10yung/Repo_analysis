kivy 2.0.0 for raspberry pi 3b.
python 3.7.3
cython 0.29.14

Hi,

i re-installed kivy 15 Jan, when running the 'hello world' test programme the following occured...

pi@raspberrypi:~/kivy $ python3 main.py
[INFO   ] [Logger      ] Record log in /home/pi/.kivy/logs/kivy_20-01-16_14.txt
[INFO   ] [Kivy        ] Installed at "/home/pi/kivy/kivy/__init__.py"
[INFO   ] [Python      ] v3.7.3 (default, Apr  3 2019, 05:39:12) 
[GCC 8.2.0]
[INFO   ] [Python      ] Interpreter at "/usr/bin/python3"
[ERROR  ] [Clock       ] Unable to import kivy._clock. Have you perhaps forgotten to compile kivy? Kivy contains Cython code which needs to be compiled. A missing kivy._clock often indicates the Cython code has not been compiled. Please follow the installation instructions and make sure to compile Kivy
 Traceback (most recent call last):
   File "main.py", line 4, in <module>
     from kivy.app import App
   File "/home/pi/kivy/kivy/app.py", line 411, in <module>
     from kivy.base import runTouchApp, async_runTouchApp, stopTouchApp
   File "/home/pi/kivy/kivy/base.py", line 28, in <module>
     from kivy.clock import Clock
   File "/home/pi/kivy/kivy/clock.py", line 381, in <module>
     from kivy._clock import CyClockBase, ClockEvent, FreeClockEvent, \
 ModuleNotFoundError: No module named 'kivy._clock'


i re-installed several times, ensured cython is update to etc, but the situation is still present. the usual issue is that i previously installed in December and this issue did not occur.

apologies if this is more of a support issue, however, i am located in china and as such cannot email to google accounts or use Discord. i tried both prior to writing this, however it does seem like a bug.

regards
Mark

<!--
The issue tracker is a tool to address bugs.
Please use the #support Discord channel at https://chat.kivy.org/ or Stack Overflow for
support questions, more information at https://git.io/vM1yQ.

Before opening a new issue, make sure you do the following:
    * check that your issue isn't already filed: https://git.io/vM1iE
    * prepare a short, runnable example that reproduces the issue
    * reproduce the problem with the latest development version of Kivy
    * double-check that the issue is indeed a bug and not a support request
-->

### Versions

* Python: 2.7
* OS: Ubuntu 18
* Kivy: 11.1
* Kivy installation method: pip

### Description
Textinput
    keyboard_mode: 'managed' 

when keyboard is "manage",clicking inside the text input triggers the on_focus event (with true value), and disable the keyboard popup, like it should.
but when clicking outside the area , the on_fucus event doesn't get fired(with false value), although unfocus_on_touch is true.



### Code and Logs

maybe later ill add example code

```



<!--
The issue tracker is a tool to address bugs.
Please use the #support Discord channel at https://chat.kivy.org/ or Stack Overflow for
support questions, more information at https://git.io/vM1yQ.

Before opening a new issue, make sure you do the following:
    * check that your issue isn't already filed: https://git.io/vM1iE
    * prepare a short, runnable example that reproduces the issue
    * reproduce the problem with the latest development version of Kivy
    * double-check that the issue is indeed a bug and not a support request
-->

### Versions

* Python: 3.7.32
* OS: Windows 10
* Kivy: 1.11.1
* Kivy installation method: pip

### Description
Hi

I have installed kivy on Pycharm on Windows 10 and my interpreter is using pythonw.py. I can install and run the kivy_example with no problems.

However when I run: from kivy.app import App
in the console it returns the following error:
[ERROR  ] [Core        ] option --mode not recognized
Kivy Usage: pydevconsole.py [OPTION...]::

As stated I have changed the interpreter but the problem still persists.
Any suggestions?

### Code and Logs

```
from kivy.app import App
```
```
[INFO   ] Logger: Record log in C:\Users\*****\.kivy\logs\kivy_20-01-13_35.txt
[ERROR  ] Core: option --mode not recognized

```


system info: uname_result(system='Linux',  release='4.15.0-70-generic', version='#79~16.04.1-Ubuntu SMP Tue Nov 12 14:01:10 UTC 2019', machine='x86_64', processor='x86_64')
[Python      ] 
[Kivy        ] 



### Versions

* Python: v3.5.2 (default, Oct  8 2019, 13:06:37)
* OS: Linux Mint 18.3
* Kivy: v1.11.1


### Description

On the computer keyboard, in the row of numbers above the letters, I press the 1 key. After clicking the focus (cursor) in the text field disappears.
I have had this error for about 4 years. During this time, I changed the keyboard, the Linux version, the motherboard, the kivy version.  But the behaviour remained the same.



### Code and Logs

added a couple of lines to the program to track button clicks:
```
class MyApp(App):
	def build(self):
		from kivy.base import EventLoop
		EventLoop.window.bind(on_keyboard=self.hook_keyboard)
        def hook_keyboard(self, window, key, *largs):
		print ('hook_keyboard ', key, largs)

```
Get the following:

`hook_keyboard  13 (30, None, ['numlock'])`


There is a big difference between how

RstDocument:
    base_font_size: sp(15)

is rendered on my Android phone and in PyCharm on Ubuntu 18.04.3 LTS with GNOME 3.28.2.

On Ubuntu, the letters on that RST-document are much smaller than on the other, where I do NOT specify any base_font_size.
But on Android the letters on that RST-document are much bigger than on the other, where I do NOT specify any base_font_size.

In the RST-document where I do NOT specify any base_font_size the font size seems to be 15sp on both Android and Ubuntu. 

I have created a small demo, attached, that shows the bug in RST on a TabbedPanel:
I run/deploy it on my Android in Terminal with:
$ buildozer android debug deploy run
(Having the folder with the attached files as current of course.)
And I ran it in PyCharm under Ubuntu as mentioned earlier.

### Versions

* Python: 3.6
* OS: Ubuntu 18.04.3 LTS with GNOME 3.28.2.
* Kivy: 1.11.1
* Kivy installation method: (I don't remember.)

### Description

See above.

### Code and Logs:

First the Python/Kivy test file:

```
import kivy

kivy.require('1.11.1')
# Developed in Python 3.6

from kivy.app import App
from kivy.uix.tabbedpanel import TabbedPanel
from kivy.lang import Builder

Builder.load_string('''
#:kivy 1.11.1
#  Useless?  #:import kivy kivy

<MyTabbedPanel>:
    size_hint: 1, 1  # Is this really necessary?
    do_default_tab: False
    # tab_width: self.width / 4  # Only good if there are 4 tabs

    TabbedPanelItem:
        text: 'Intro 1'
        font_size: '15sp'
        RstDocument:
            base_font_size: sp(15)
            bar_color: [.3, .3, .3, .9]
            bar_inactive_color: [.3, .3, .3, .9]
            bar_width: 16
            source: 'README.rst'

    TabbedPanelItem:
        text: 'Intro 2'
        # font_size: '15sp'
        RstDocument:
            # base_font_size: sp(15)
            bar_color: [.3, .3, .3, .9]
            bar_inactive_color: [.3, .3, .3, .9]
            bar_width: 16
            source: 'README.rst'

''')

class MyTabbedPanel(TabbedPanel):
    pass


class MyAppWithTabs(App):
    def build(self):
        return MyTabbedPanel()


if __name__ == '__main__':
    MyAppWithTabs().run()
```

------------------------------
Here comes the Buildozer.spec:

```
[app]

# (str) Title of your application
title = My Application

# (str) Package name
package.name = myapp

# (str) Package domain (needed for android/ios packaging)
package.domain = org.test

# (str) Source code where the main.py live
source.dir = .

# (list) Source files to include (let empty to include all the files)
#source.include_exts = py,png,jpg,kv,atlas
source.include_exts = 

# (list) List of inclusions using pattern matching
#source.include_patterns = assets/*,images/*.png

# (list) Source files to exclude (let empty to not exclude anything)
#source.exclude_exts = spec

# (list) List of directory to exclude (let empty to not exclude anything)
#source.exclude_dirs = tests, bin

# (list) List of exclusions using pattern matching
#source.exclude_patterns = license,images/*/*.jpg

# (str) Application versioning (method 1)
version = 0.1

# (str) Application versioning (method 2)
# version.regex = __version__ = ['"](.*)['"]
# version.filename = %(source.dir)s/main.py

# (list) Application requirements
# comma separated e.g. requirements = sqlite3,kivy
# requirements = python3,kivy
# requirements = kivy,pil,sqlite3,pygments,docutils
requirements = python3,kivy,pil,sqlite3,pygments,docutils

# (str) Custom source folders for requirements
# Sets custom source for any requirements with recipes
# requirements.source.kivy = ../../kivy

# (list) Garden requirements
#garden_requirements =

# (str) Presplash of the application
#presplash.filename = %(source.dir)s/data/presplash.png

# (str) Icon of the application
#icon.filename = %(source.dir)s/data/icon.png

# (str) Supported orientation (one of landscape, sensorLandscape, portrait or all)
orientation = all

# (list) List of service to declare
#services = NAME:ENTRYPOINT_TO_PY,NAME2:ENTRYPOINT2_TO_PY

#
# OSX Specific
#

#
# author = Â© Copyright Info

# change the major version of python used by the app
osx.python_version = 3

# Kivy version to use
osx.kivy_version = 1.11.1

#
# Android specific
#

# (bool) Indicate if the application should be fullscreen or not
fullscreen = 0

# (string) Presplash background color (for new android toolchain)
# Supported formats are: #RRGGBB #AARRGGBB or one of the following names:
# red, blue, green, black, white, gray, cyan, magenta, yellow, lightgray,
# darkgray, grey, lightgrey, darkgrey, aqua, fuchsia, lime, maroon, navy,
# olive, purple, silver, teal.
#android.presplash_color = #FFFFFF

# (list) Permissions
#android.permissions = INTERNET

# (int) Target Android API, should be as high as possible.
#android.api = 27

# (int) Minimum API your APK will support.
#android.minapi = 21

# (int) Android SDK version to use
#android.sdk = 20

# (str) Android NDK version to use
#android.ndk = 17c

# (int) Android NDK API to use. This is the minimum API your app will support, it should usually match android.minapi.
#android.ndk_api = 21

# (bool) Use --private data storage (True) or --dir public storage (False)
#android.private_storage = True

# (str) Android NDK directory (if empty, it will be automatically downloaded.)
#android.ndk_path =

# (str) Android SDK directory (if empty, it will be automatically downloaded.)
#android.sdk_path =

# (str) ANT directory (if empty, it will be automatically downloaded.)
#android.ant_path =

# (bool) If True, then skip trying to update the Android sdk
# This can be useful to avoid excess Internet downloads or save time
# when an update is due and you just want to test/build your package
# android.skip_update = False

# (bool) If True, then automatically accept SDK license
# agreements. This is intended for automation only. If set to False,
# the default, you will be shown the license when first running
# buildozer.
# android.accept_sdk_license = False

# (str) Android entry point, default is ok for Kivy-based app
#android.entrypoint = org.renpy.android.PythonActivity

# (list) Pattern to whitelist for the whole project
android.whitelist = '*.rst'

# (str) Path to a custom whitelist file
#android.whitelist_src =

# (str) Path to a custom blacklist file
#android.blacklist_src =

# (list) List of Java .jar files to add to the libs so that pyjnius can access
# their classes. Don't add jars that you do not need, since extra jars can slow
# down the build process. Allows wildcards matching, for example:
# OUYA-ODK/libs/*.jar
#android.add_jars = foo.jar,bar.jar,path/to/more/*.jar

# (list) List of Java files to add to the android project (can be java or a
# directory containing the files)
#android.add_src =

# (list) Android AAR archives to add (currently works only with sdl2_gradle
# bootstrap)
#android.add_aars =

# (list) Gradle dependencies to add (currently works only with sdl2_gradle
# bootstrap)
#android.gradle_dependencies =

# (list) Java classes to add as activities to the manifest.
#android.add_activites = com.example.ExampleActivity

# (str) OUYA Console category. Should be one of GAME or APP
# If you leave this blank, OUYA support will not be enabled
#android.ouya.category = GAME

# (str) Filename of OUYA Console icon. It must be a 732x412 png image.
#android.ouya.icon.filename = %(source.dir)s/data/ouya_icon.png

# (str) XML file to include as an intent filters in <activity> tag
#android.manifest.intent_filters =

# (str) launchMode to set for the main activity
#android.manifest.launch_mode = standard

# (list) Android additional libraries to copy into libs/armeabi
#android.add_libs_armeabi = libs/android/*.so
#android.add_libs_armeabi_v7a = libs/android-v7/*.so
#android.add_libs_arm64_v8a = libs/android-v8/*.so
#android.add_libs_x86 = libs/android-x86/*.so
#android.add_libs_mips = libs/android-mips/*.so

# (bool) Indicate whether the screen should stay on
# Don't forget to add the WAKE_LOCK permission if you set this to True
#android.wakelock = False

# (list) Android application meta-data to set (key=value format)
#android.meta_data =

# (list) Android library project to add (will be added in the
# project.properties automatically.)
#android.library_references =

# (list) Android shared libraries which will be added to AndroidManifest.xml using <uses-library> tag
#android.uses_library =

# (str) Android logcat filters to use
#android.logcat_filters = *:S python:D

# (bool) Copy library instead of making a libpymodules.so
#android.copy_libs = 1

# (str) The Android arch to build for, choices: armeabi-v7a, arm64-v8a, x86, x86_64
android.arch = armeabi-v7a

#
# Python for android (p4a) specific
#

# (str) python-for-android fork to use, defaults to upstream (kivy)
#p4a.fork = kivy

# (str) python-for-android branch to use, defaults to master
#p4a.branch = master

# (str) python-for-android git clone directory (if empty, it will be automatically cloned from github)
#p4a.source_dir =

# (str) The directory in which python-for-android should look for your own build recipes (if any)
#p4a.local_recipes =

# (str) Filename to the hook for p4a
#p4a.hook =

# (str) Bootstrap to use for android builds
# p4a.bootstrap = sdl2

# (int) port number to specify an explicit --port= p4a argument (eg for bootstrap flask)
#p4a.port =


#
# iOS specific
#

# (str) Path to a custom kivy-ios folder
#ios.kivy_ios_dir = ../kivy-ios
# Alternately, specify the URL and branch of a git checkout:
ios.kivy_ios_url = https://github.com/kivy/kivy-ios
ios.kivy_ios_branch = master

# Another platform dependency: ios-deploy
# Uncomment to use a custom checkout
#ios.ios_deploy_dir = ../ios_deploy
# Or specify URL and branch
ios.ios_deploy_url = https://github.com/phonegap/ios-deploy
ios.ios_deploy_branch = 1.7.0

# (str) Name of the certificate to use for signing the debug version
# Get a list of available identities: buildozer ios list_identities
#ios.codesign.debug = "iPhone Developer: <lastname> <firstname> (<hexstring>)"

# (str) Name of the certificate to use for signing the release version
#ios.codesign.release = %(ios.codesign.debug)s


[buildozer]

# (int) Log level (0 = error only, 1 = info, 2 = debug (with command output))
log_level = 1

# (int) Display warning if buildozer is run as root (0 = False, 1 = True)
warn_on_root = 1

# (str) Path to build artifact storage, absolute or relative to spec file
# build_dir = ./.buildozer

# (str) Path to build output (i.e. .apk, .ipa) storage
# bin_dir = ./bin

#    -----------------------------------------------------------------------------
#    List as sections
#
#    You can define all the "list" as [section:key].
#    Each line will be considered as a option to the list.
#    Let's take [app] / source.exclude_patterns.
#    Instead of doing:
#
#[app]
#source.exclude_patterns = license,data/audio/*.wav,data/images/original/*
#
#    This can be translated into:
#
#[app:source.exclude_patterns]
#license
#data/audio/*.wav
#data/images/original/*
#


#    -----------------------------------------------------------------------------
#    Profiles
#
#    You can extend section / key with a profile
#    For example, you want to deploy a demo version of your application without
#    HD content. You could first change the title to add "(demo)" in the name
#    and extend the excluded directories to remove the HD content.
#
#[app@demo]
#title = My Application (demo)
#
#[app:source.exclude_patterns@demo]
#images/hd/*
#
#    Then, invoke the command line with the "demo" profile:
#
#buildozer --profile demo android debug

```

------------------------------
And finally 'README.rst':

```
This is the 'Intro-1' RSTdocument
=================================

NOTE: PyInstaller does not extend PYTHONPATH (sys.path) with this directory
that contains bundled 3rd party libraries.

Some users complained that PyInstaller failed because their apps were using
too old versions of some libraries that PyInstaller uses too and that's why
extending sys.path was dropped.

All libraries are tweaked to be importable as::

    from PyInstaller.lib.LIB_NAME import xyz

In libraries replace imports like::

    from altgraph import y
    from modulegraph import z

with relative prefix::

    from ..altgraph import y
    from ..modulegraph import z


altgraph
----------

- add fixed version string to ./altgraph/__init__.py::

    # For PyInstaller/lib/ define the version here, since there is no
    # package-resource.
    __version__ = '0.13'


modulegraph
-----------

https://bitbucket.org/ronaldoussoren/modulegraph/downloads

- TODO Use official modulegraph version when following issue is resolved and pull request merged
  https://bitbucket.org/ronaldoussoren/modulegraph/issues/28/__main__-module-being-analyzed-for-wheel

- add fixed version string to ./modulegraph/__init__.py::

    # For PyInstaller/lib/ define the version here, since there is no
    # package-resource.
    __version__ = '0.13'

```

Kivy: master
p4a: master
Arch: arm64-v8
Test device: Xiaomi Mi Mix2
Version: Android 9 (pie)

The issue take place when you tap on a TextInput and open the keyboard, then when you close the keyboard the Window.bind(on keyboard) is not catching android back button key anmore.

For instance with this example i open the second screen and tap on android back button to turn back to main screen. It works as expected but whenever i tap on TextInput on the second screen the back button loses it's functionality for turning back to main screen,  it seems keyboard blocks the keyboard listener to catch android back button key and makes back button unresponsive.

    from kivy.config import Config
    Config.set('kivy', 'exit_on_escape', 'False')
    
    from kivy.app import App
    from kivy.lang import Builder
    from kivy.core.window import Window
    from kivy.uix.screenmanager import ScreenManager
    
    
    Builder.load_string("""
    
    <Main>:
        id: scr_mngr
        Screen:                           
            name: 'main'
            BoxLayout:
                orientation: "vertical"
                size_hint: 1,1
                pos_hint: {'top':1}
                Label:
                    text: "Main Screen"
                    size_hint: 1,.1
                Button:
                    size_hint: 1,.1
                    text: "Go Second Screen"
                    on_press: root.go_second()
                Widget:
                    
        Screen:                           
            name: 'second'
            BoxLayout:
                orientation: "vertical"
                size_hint: 1,1
                pos_hint: {'top':1}
                Label:
                    text: "Second Screen"
                    size_hint: 1,.1
                TextInput:
                    size_hint: 1,.2
                    text: "TextInput"
                Widget:
    """)
    
    class Main(ScreenManager):
        def __init__(self, **kwargs): 
            super(Main, self).__init__(**kwargs)
            Window.bind(on_keyboard = self.keyboard)
            
        def keyboard(self,window,key,*args):
            print(str(key))
            if key == 27:
                self.transition.direction  = "right"
                self.current = "main"
                
        def go_second(self,*args):
            self.transition.direction  = "left"
            self.current = "second"
    
    class MyApp(App):    
        def build(self):
            return Main()
    
    if __name__ == '__main__':
        MyApp().run()

https://youtu.be/GN_YwHQ6Y0I
<!--
The issue tracker is a tool to address bugs.
Please use the #support Discord channel at https://chat.kivy.org/ or Stack Overflow for
support questions, more information at https://git.io/vM1yQ.

Before opening a new issue, make sure you do the following:
    * check that your issue isn't already filed: https://git.io/vM1iE
    * prepare a short, runnable example that reproduces the issue
    * reproduce the problem with the latest development version of Kivy
    * double-check that the issue is indeed a bug and not a support request
-->

### Versions

* Python:3.7.3
* OS:Win7
* Kivy:1.11.1
* Kivy installation method:pip

### Description

I want to get a phone function in the Popup widget  which add the camera widget.By binding the Popup's `on_dismisss `  to close the resource, the camera still works,at lease the light is on.Anyone any help?Thanks.

### Code and Logs

```python
    def phone(self):
        button = Button(text='hangup',size_hint=(0.3,0.15),pos_hint= {'x':.35, 'y':.05})

        #init the camera,now Play=False
        camera = Camera(resolution=(480, 640),play=False,pos=(0,-80))

        relaytiveLayout = RelativeLayout()
        relaytiveLayout.add_widget(camera)
        relaytiveLayout.add_widget(button)

        popup = Popup(title='telling',
                      content=relaytiveLayout,
                      size_hint=(None, None),size=(300,500), auto_dismiss=False)
        '''
            the camera doesn't close
        '''
        button.bind(on_press=popup.dismiss)

        popup.open()

        # later start the camera
        camera.play = True
```

### Versions

* Python: 3.6.3
* OS: linux
* Kivy: master
* Kivy installation method: git clone && pip install --editable in virtualenv

### Description
when BorderImage's `display_size` option is used, it overrides the `auto_scale` parameter, simply because it first computes the value `auto_scale` would need, and then look if there is a `dispaly_border` setting, and overrides the values if that's the case, i think it would be better to do things in the opposite direction.

### Code and Logs

here is an example demonstrating the problem in a variety of configurations, just use the slider to select a small value of width or height, and you'll see that the setting for auto_scale doesn't work when display_size is used.

```python
from kivy.app import App
from kivy.lang import Builder
from kivy.factory import Factory


KV = '''
BoxLayout:
    orientation: 'vertical'

    GridLayout:
        cols: 4
        Widget:
        Label:
            text: 'default'
        Label:
            text: 'display_border'
        Label:
            text: 'display_border dp'

        # line
        Label:
            text: 'default'

        Widget:
            size_hint: None, None
            pos_hint: {'center': (.5, .5)}
            size: width.value, height.value
            canvas:
                BorderImage:
                    size: self.size
                    pos: self.pos
                    source: 'atlas://data/images/defaulttheme/button'
                    border: 16, 16, 16, 16
        Widget:
            size_hint: None, None
            pos_hint: {'center': (.5, .5)}
            size: width.value, height.value
            canvas:
                BorderImage:
                    size: self.size
                    pos: self.pos
                    source: 'atlas://data/images/defaulttheme/button'
                    border: 16, 16, 16, 16
                    display_border: 16, 16, 16, 16
        Widget:
            size_hint: None, None
            pos_hint: {'center': (.5, .5)}
            size: width.value, height.value
            canvas:
                BorderImage:
                    size: self.size
                    pos: self.pos
                    source: 'atlas://data/images/defaulttheme/button'
                    border: 16, 16, 16, 16
                    display_border: dp(16), dp(16), dp(16), dp(16)
        # line
        Label:
            text: 'both'
        Widget:
            size_hint: None, None
            pos_hint: {'center': (.5, .5)}
            size: width.value, height.value
            canvas:
                BorderImage:
                    size: self.size
                    pos: self.pos
                    source: 'atlas://data/images/defaulttheme/button'
                    border: 16, 16, 16, 16
                    auto_scale: 'both'
        Widget:
            size_hint: None, None
            pos_hint: {'center': (.5, .5)}
            size: width.value, height.value
            canvas:
                BorderImage:
                    size: self.size
                    pos: self.pos
                    source: 'atlas://data/images/defaulttheme/button'
                    border: 16, 16, 16, 16
                    display_border: 16, 16, 16, 16
                    auto_scale: 'both'
        Widget:
            size_hint: None, None
            pos_hint: {'center': (.5, .5)}
            size: width.value, height.value
            canvas:
                BorderImage:
                    size: self.size
                    pos: self.pos
                    source: 'atlas://data/images/defaulttheme/button'
                    border: 16, 16, 16, 16
                    display_border: dp(16), dp(16), dp(16), dp(16)
                    auto_scale: 'both'
        # line
        Label:
            text: 'both_lower'
        Widget:
            size_hint: None, None
            pos_hint: {'center': (.5, .5)}
            size: width.value, height.value
            canvas:
                BorderImage:
                    size: self.size
                    pos: self.pos
                    source: 'atlas://data/images/defaulttheme/button'
                    border: 16, 16, 16, 16
                    auto_scale: 'both_lower'
        Widget:
            size_hint: None, None
            pos_hint: {'center': (.5, .5)}
            size: width.value, height.value
            canvas:
                BorderImage:
                    size: self.size
                    pos: self.pos
                    source: 'atlas://data/images/defaulttheme/button'
                    border: 16, 16, 16, 16
                    display_border: 16, 16, 16, 16
                    auto_scale: 'both_lower'
        Widget:
            size_hint: None, None
            pos_hint: {'center': (.5, .5)}
            size: width.value, height.value
            canvas:
                BorderImage:
                    size: self.size
                    pos: self.pos
                    source: 'atlas://data/images/defaulttheme/button'
                    border: 16, 16, 16, 16
                    display_border: dp(16), dp(16), dp(16), dp(16)
                    auto_scale: 'both_lower'
        # line
        Label:
            text: 'x_full_y_lower'
        Widget:
            size_hint: None, None
            pos_hint: {'center': (.5, .5)}
            size: width.value, height.value
            canvas:
                BorderImage:
                    size: self.size
                    pos: self.pos
                    source: 'atlas://data/images/defaulttheme/button'
                    border: 16, 16, 16, 16
                    auto_scale: 'x_full_y_lower'
        Widget:
            size_hint: None, None
            pos_hint: {'center': (.5, .5)}
            size: width.value, height.value
            canvas:
                BorderImage:
                    size: self.size
                    pos: self.pos
                    source: 'atlas://data/images/defaulttheme/button'
                    border: 16, 16, 16, 16
                    display_border: 16, 16, 16, 16
                    auto_scale: 'x_full_y_lower'
        Widget:
            size_hint: None, None
            pos_hint: {'center': (.5, .5)}
            size: width.value, height.value
            canvas:
                BorderImage:
                    size: self.size
                    pos: self.pos
                    source: 'atlas://data/images/defaulttheme/button'
                    border: 16, 16, 16, 16
                    display_border: dp(16), dp(16), dp(16), dp(16)
                    auto_scale: 'x_full_y_lower'
        # line
        Label:
            text: 'y_full_x_lower'
        Widget:
            size_hint: None, None
            pos_hint: {'center': (.5, .5)}
            size: width.value, height.value
            canvas:
                BorderImage:
                    size: self.size
                    pos: self.pos
                    source: 'atlas://data/images/defaulttheme/button'
                    border: 16, 16, 16, 16
                    auto_scale: 'y_full_x_lower'
        Widget:
            size_hint: None, None
            pos_hint: {'center': (.5, .5)}
            size: width.value, height.value
            canvas:
                BorderImage:
                    size: self.size
                    pos: self.pos
                    source: 'atlas://data/images/defaulttheme/button'
                    border: 16, 16, 16, 16
                    display_border: 16, 16, 16, 16
                    auto_scale: 'y_full_x_lower'
        Widget:
            size_hint: None, None
            pos_hint: {'center': (.5, .5)}
            size: width.value, height.value
            canvas:
                BorderImage:
                    size: self.size
                    pos: self.pos
                    source: 'atlas://data/images/defaulttheme/button'
                    border: 16, 16, 16, 16
                    display_border: dp(16), dp(16), dp(16), dp(16)
                    auto_scale: 'y_full_x_lower'

    GridLayout:
        cols: 2
        size_hint_y: None
        height: 50
        Label:
            text: 'width'
        Label:
            text: 'height'
        Slider:
            id: width
            value: 50
            min: 1
            max: 100
        Slider:
            id: height
            value: 50
            min: 1
            max: 100
'''

class Application(App):
    def build(self):
        return Builder.load_string(KV)


if __name__ == "__main__":
    Application().run()
```

fix: #6665
![2020-01-12 00-17-18](https://user-images.githubusercontent.com/22759/72211810-a89ea580-34d1-11ea-9515-93183785d727.gif)
## Versions

* Python: 3.7.1
* OS: macosx (darwin) 10.15.2
* Kivy: 1.11.1
* Kivy installation method: python3 -m pip install kivy


### Description

In a slider, the value_track bar is not centered when changing value_track_width value.

### Code and Logs

```python
        Slider:
            id: theVolume
            size_hint: (None, None)
            height: self.parent.height
            width: self.parent.width / 3.33
            background_width: self.height / 5.0
            cursor_image: 'slider.png'
            cursor_width: self.height / 1.5
            cursor_height: self.height / 1.5
            #sensitivity: 'handle'
            min: 0
            max: 100
            step: 1
            orientation: 'horizontal'
            value: 50
            value_track: True
            value_track_width: self.height / 10.0
            value_track_color: [1, 0.8, 0, 1]

```
![Capture dâeÌcran 2019-12-29 aÌ 14 24 49](https://user-images.githubusercontent.com/1536092/71557473-08fc0480-2a47-11ea-802f-396e3447672f.png)
