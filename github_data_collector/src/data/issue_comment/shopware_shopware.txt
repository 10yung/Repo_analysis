### 1. Why is this change necessary?
FPDI 1.6.2 is deprecated and will no longer be updated. It will throw some warnings like: "Function each() is deprecated since PHP 7.2; Use a foreach loop instead."

### 2. What does this change do, exactly?
Update fpdi, fpdf and mpdf

### 3. Describe each step to reproduce the issue or behaviour.
-

### 4. Please link to the relevant issues (if any).
-

### 5. Which documentation changes (if any) need to be made because of this PR?
-

### 6. Checklist

- [ ] I have written tests and verified that they fail without my change
- [ ] I have squashed any insignificant commits
- [ ] This change has comments for package types, values, functions, and non-obvious lines of code
- [x] I have read the contribution requirements and fulfil them.
If a resource is available over SSL, then always use the https:// URI.

<!--
Thank you for contributing to Shopware! Please fill out this description template to help us to process your pull request.

Please make sure to fulfil our contribution guideline (https://developers.shopware.com/contributing/contribution-guideline/).
-->

### 1. Why is this change necessary?
**Loads page resources using protocol relative URIs**
Loading a resource using protocol relative URIs allow it to be requested over HTTP and opens the door for Man-on-the-side attacks. If a resource is available over SSL, then always use the https:// URI.

### 2. What does this change do, exactly?
change from http to https

### 3. Describe each step to reproduce the issue or behaviour.


### 4. Please link to the relevant issues (if any).


### 5. Which documentation changes (if any) need to be made because of this PR?


### 6. Checklist

- [x] I have written tests and verified that they fail without my change
- [x] I have squashed any insignificant commits
- [ ] This change has comments for package types, values, functions, and non-obvious lines of code
- [x] I have read the contribution requirements and fulfil them.
### 1. Why is this change necessary?
If the invoiceShippingTaxRate is not in whitelist, it's not possible to create an order with the API and set the tax rate for shipping. (default is always 0)

### 2. What does this change do, exactly?
add the invoiceShippingTaxRate to whitelist of the order api

### 3. Describe each step to reproduce the issue or behaviour.


### 4. Please link to the relevant issues (if any).


### 5. Which documentation changes (if any) need to be made because of this PR?
none

### 6. Checklist

- [ ] I have written tests and verified that they fail without my change
- [x] I have squashed any insignificant commits
- [ ] This change has comments for package types, values, functions, and non-obvious lines of code
- [x] I have read the contribution requirements and fulfil them.
### 1. Why is this change necessary?
You can't upload webp files. Webp is a image format for web related images. You want to be able to upload webp images.

### 2. What does this change do, exactly?
Add webp as extension with the type IMAGE.

### 3. Describe each step to reproduce the issue or behaviour.
1. Open media manager
2. Select webp file
3. Click upload
4. See error message that webp is not allowed

### 4. Checklist

- [ ] I have written tests and verified that they fail without my change
- [x] I have squashed any insignificant commits
- [x] This change has comments for package types, values, functions, and non-obvious lines of code
- [x] I have read the contribution requirements and fulfil them.
### 1. Why is this change necessary?
On first pull from git any access to shopware states to initialize shopware. This can be done from the command line as well but a specific composer directory is not initialized. The hint states to run `composer install`. I did. In the project root. Someone has to say that it is not about running `composer install` in recovery/common. Now it does.

### 2. What does this change do, exactly?
Add the working directory option to the composer install command hint.

### 3. Describe each step to reproduce the issue or behaviour.
1. Clone shopware
2. Open webpage
3. See unclear installation instruction `Shopware 5 must be configured before use. Please run the installer.`
4. Look up instruction in code
5. See alternative CLI instructions
6. Run CLI command `recovery/install/index.php`
7. See composer install hint
8. Run composer install
9. Go to 6

### 4. Which documentation changes (if any) need to be made because of this PR?
This is a documentation change. Sort of.

### 5. Checklist

- [ ] I have written tests and verified that they fail without my change
- [x] I have squashed any insignificant commits
- [ ] This change has comments for package types, values, functions, and non-obvious lines of code
- [x] I have read the contribution requirements and fulfil them.
### 1. Why is this change necessary?
Try passing an array to the Router assemble method. Using the default generator & matcher the array values will be lost.

### 2. What does this change do, exactly?
Encode array values

### 3. Describe each step to reproduce the issue or behaviour.
Run `Shopware()->Container()->get('router')->assemble(['foo' => ['test' => 'value']]);`
The resulting url will be looking something like this: `https://example.tld/index/index/foo/`
The value of foo is lost.

### 4. Please link to the relevant issues (if any).


### 5. Which documentation changes (if any) need to be made because of this PR?


### 6. Checklist

- [x] I have written tests and verified that they fail without my change
- [x] I have squashed any insignificant commits
- [x] This change has comments for package types, values, functions, and non-obvious lines of code
- [x] I have read the contribution requirements and fulfil them.
### 1. Why is this change necessary?

See: https://forum.shopware.com/discussion/57909/shopware-e-mails-erhalten-negative-spam-einschaetzung-durch-spamassassin

### 2. What does this change do, exactly?


### 3. Describe each step to reproduce the issue or behaviour.


### 4. Please link to the relevant issues (if any).


### 5. Which documentation changes (if any) need to be made because of this PR?


### 6. Checklist

- [ ] I have written tests and verified that they fail without my change
- [ ] I have squashed any insignificant commits
- [ ] This change has comments for package types, values, functions, and non-obvious lines of code
- [ ] I have read the contribution requirements and fulfil them.
<!--
Thank you for contributing to Shopware! Please fill out this description template to help us to process your pull request.

Please make sure to fulfil our contribution guideline (https://developers.shopware.com/contributing/contribution-guideline/).
-->

### 1. Why is this change necessary?
Because there is currently no clean way to abort a registration process beside the form validation. You can decorate the RegisterService but since this does not return anything you can not pass back any information to the register controller to initiate a custom handling. I had the need to do this because I wanted to abort registrations after the form validation is run but before the customer is actually saved.

### 2. What does this change do, exactly?
Add a new event to handle custom errors (or messages in general) during the registration process.

### 3. Describe each step to reproduce the issue or behaviour.
Try to abort a registration before a customer is saved to the database.
Example subscriber that could make use of the new event:
```php
class Test implements SubscriberInterface {
    public static function getSubscribedEvents()
    {
        return [
            'Shopware_Modules_Admin_SaveRegister_BeforeRegister' => 'onBeforeRegister',
        ];
    }

    public function onBeforeRegister(\Enlight_Event_EventArgs $args) {
        $errors = $args->getReturn();
        $customer = $args->get('customer');
        $billing = $args->get('billing');
        $shipping = $args->get('shipping');

        // Do some custom validation stuff with the customer or the addresses
        // e.g. sync them with another system and react to API errors of that system.

        // Merge to make sure you keep errors that may have been added by other plugins previously.
        return array_merge($errors, [
           'occurred' => true,
           'personal' => [
               //reuse error structure from register controller which will be displayed in the frontend form
               'firstname' => 'Something is wrong here',
           ],
           'my_custom_errors' => [
               // Add your own errors. They will be passed to the view and you can handle them there.
           ]
        ]);
    }
}
```

### 4. Please link to the relevant issues (if any).


### 5. Which documentation changes (if any) need to be made because of this PR?


### 6. Checklist

- [ ] I have written tests and verified that they fail without my change
- [x] I have squashed any insignificant commits
- [ ] This change has comments for package types, values, functions, and non-obvious lines of code
- [x] I have read the contribution requirements and fulfil them.
### 1. Why is this change necessary?
When using a compiler-aware-command (a command implementing the CompilerAwareInterface) from the service container it has no valid reference to the service container. So it is not properly initialized.

### 2. What does this change do, exactly?
Readd the `ConfigureContainerAwareCommands` to the service container, remove the redundant `setContainer` call in `Shopware\Components\Console\Application::doRunCommand` and add a test to check whether things stay that way.

### 3. Describe each step to reproduce the issue or behaviour.
1. Be up to use auto completion feature
2. Type `sw:pl<tab>:act<tab> <tab>`
3. Get `Call to a member function get() on null in PluginActivateCommand.php:53`
4. On null? What is happening there?
5. Find `getContainer()->get` failing
6. But why is it not initialized? When is `setContainer` called?
7. Find `Shopware\Components\Console\Application::doRunCommand` and `ConfigureContainerAwareCommands`. Wait didn't I implement the `ConfigureContainerAwareCommands`?
8. Check auto completion pull request. Yes I did. Did I forget adding it? 😳
9. [Check diff from pull request](https://github.com/niemand-online/shopware/blame/e61f879bd28302fbe7732e20c8e122651e4a1c8a/engine/Shopware/Kernel.php#L621) 🙂 I did add it back then
10. Is it still present? NO?!
[![grafik](https://user-images.githubusercontent.com/1133593/71047729-0b07be80-213d-11ea-9f28-5a1b3f4b13bd.png)](https://knowyourmeme.com/memes/confused-nick-young)

### 4. Checklist

- [x] I have written tests and verified that they fail without my change
- [x] I have squashed any insignificant commits
- [ ] This change has comments for package types, values, functions, and non-obvious lines of code
- [x] I have read the contribution requirements and fulfil them.
### 1. Why is this change necessary?
In case of an update on a page the sliders can occasionally be updated. This will slide them to the first item. This also can reset the position although no change happened. Either situation is appreciatable so it is now optionally disablable.

### 2. What does this change do, exactly?
Add an option to deactivate that setPosition call. The default is behaving like before so no real change in bahaviour unless configured differently.

### 3. Describe each step to reproduce the issue or behaviour.
1. Have a product slider at the top of the page
2. Slide to the right
3. Scroll down where an update is triggered to product sliders
4. Scroll up and the slider is back to the start
5. What product was I looking again? 😖 
6. Have @Yarisade in your team debugging it down to the problematic area

### 4. Checklist

- [ ] I have written tests and verified that they fail without my change
- [x] I have squashed any insignificant commits
- [ ] This change has comments for package types, values, functions, and non-obvious lines of code
- [x] I have read the contribution requirements and fulfil them.