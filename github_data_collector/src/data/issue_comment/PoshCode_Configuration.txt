Updated the RegEx pattern on ConvertTo-Metadata to resolve #36 and wrap keys starting with integers in single quotes.
Following up on https://github.com/scrthq/PSProfile/issues/28

It looks like PowerShell doesn't like dictionary keys that start with an int and are not wrapped in quotes, resulting in the parser breaking when attempting to import metadata containing keys like this. Sample to replicate:

```powershell
@{1BadKey = 'Value'}
```

![image](https://user-images.githubusercontent.com/12724445/68075477-45c4bb80-fd76-11e9-8341-506e61a46d7b.png)


Digging into this and sending over a PR asap!
I wonder if it's intentional that 1.3.1 is the latest version on Powershell gallery.
Any reason?
First version of this function:

It imports a `Noun.psd1` file when called from a `Verb-Noun` command, and sets variables for the parameters which are configured in the settings file but weren't passed on the command-line, basically allowing you to create commands which read configuration files from the current working directory.

The question is: should it recurse up the parent directories looking for `noun.psd1` files that might define values that aren't already defined?
As I read the parameter description in the help for Export-Configuration, the DefaultPath parameter is used to copy a configuration file that's distributed with the module to one of the three scope-based locations.  As such, I'm not sure I'd expect a hashtable to be passed as input.  But clearly, -InputObject remains a required parameter value.

Having an example of your intended use would be helpful.

If I understood how it was to be used, I'd submit PR to update the help.

Thanks!
I've been thinking that we could easily add a parameter for the file name (defaulted to the current hard-coded `Configuration.psd1`) which would allow the file name to be specified ...

The idea would **NOT** be to let you customize the file names -- but to support different "sets" of configurations.  That way if a module author wanted to switch between multiple named configurations they could just expose the name to their users ... or users who know you're using Configuration could just:

```posh
Get-Module YourModule | Import-Configuration -Set Special
```

So what should I call the parameter? We can't use `Name` because that's the parameter I'm using for the Module name.

- Set (has the benefit of starting with a character that's unique among parameters)
- Config
- ConfigSet
- Variant
- ???
It would be nice if you clone a project's git repository, and the repository could contain a configuration file for something like a test framework module, that could override specific machine wide settings that may need to be tweaked on a case by case basis. 

Doing this at the user level could be difficult because not only would the user need to know which tweaks need to be made to specific projects, something contributors may not know easily, but a settings schema for the module would need to be able to understand which project you are working on and how to jigger the settings for specific modules.

I am willing to help with a PR on this, but I am creating this issue to start the discussion on whether you think this would be a useful capability.

I would like to use this module as the settings manager for a module I am working on, but being able to specify settings overrides that live in the project repository is a high priority objective for me.

Thanks,
Bill
Editing this again: Now that the -NoNewLine switch was removed from the Set-Content call in the Update-MetaData function, there is a new line added to the psd1 each time it is edited. My idea for a fix would be to just add a .Trim() on the value so that it only ends up with a single newline in all cases.
Even though you can happily test a module as "c:\my-powershell\example.psm1" with `import-module -force c:\my-powershell\example.psm1` using import-configuration will create the error below. You'd have to rename the path "c:\example\example.psm1". I appreciate that's the name scheme you've got to have when putting the module into psmodulePath but for development it's a little restrictive. 

Inside my .psm1 with `$Script:Config = import-configuration` results in the following error


```powershell
Get-Module : The specified module 'N:\Documents\src\ps-schoolgroups' was not found. Update the Name parameter to
point to a valid path, and then try again.
At \\homeDirectory\jbennett\Documents\WindowsPowerShell\Modules\Configuration\1.3.0\Configuration.psm1:99 char:27
+ ...            if($mi2 = Get-Module $mi.ModuleBase -ListAvailable | Where ...
+                          ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    + CategoryInfo          : ResourceUnavailable: (N:\Documents\src\ps-schoolgroups:String) [Get-Module], FileNotFou
   ndException
    + FullyQualifiedErrorId : Modules_ModuleNotFoundForGetModule,Microsoft.PowerShell.Commands.GetModuleCommand
```
[error from line 99](https://github.com/PoshCode/Configuration/blob/master/Source/Configuration.psm1#L99)

I don't know if this is behaviour worth improving but I couldn't make a workaround if you might be able to suggest one. I have 72 projects in a folder it's quite nice organizing the powershell ones as prefixed with `ps-<modulename>`. Of course they don't get installed to psmodulepath with that pattern.

### Current behavior

`Metadata` is hardcoded to use `-Encoding UTF8`.
`UTF8` is `UTF-8 with BOM`.

https://github.com/PoshCode/Configuration/blob/244a7cbc6f7f415fb989acb82637d42b46447099/Source/Metadata.psm1#L595

### Expected behavior

`Metadata` should not change the file encoding of the manifest.

> Eg: I have my manifest files in `UTF-8 without BOM`
