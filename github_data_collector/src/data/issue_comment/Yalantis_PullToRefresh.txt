Hi, can we have podspec update for swift 5?
```swift
public init(refreshView: UIView, animator: RefreshViewAnimator, height: CGFloat, position: Position) {     
        self.refreshView = refreshView        
        self.animator = animator
        self.position = position
 }
```
'height' seems like not being used.

Hi,
Its good library for pull to refresh but i am facing problem, when i increase cell size 540. That condition .bottom scroll automatic scroll approx. 10 or 11 index. 
# Report

> It can be reproduced in PullToRefreshDemo.xcodeproj

## Report a bug

###  What did you do?

> Pull down the table view, and don't fire the action of the top refresher, and hold the finger.
> Scroll up the table view rapidly.
> Go to the bottom of the table view.

### What did you expect to happen?

> The bottom refresher is existing.  

### What happened instead?

> The bottom refresher is missing.

### Your Environment

- Version of the component: 3.1.0
- Swift version: 4.2
- iOS version: iOS 12.0.1
- Device: iPhone X
- Xcode version: 10.0 (10A255)
- CocoaPods: 1.5.3

### Project that demonstrates the bug

> The PullToRefreshDemo.xcodeproj can reproduce it.

### Advice

In the `override open func observeValue(forKeyPath keyPath: String?, of object: Any?, change: [NSKeyValueChangeKey : Any]?, context: UnsafeMutableRawPointer?)` of `PullToRefresher.swift`, I change some code in the first `if` part:

In the offset switch, maybe PullToRefresh need handle the `offset > 0` case:

`                if state != .loading && state != .finished && state != .initial {
                    state = .initial
                }`

Maybe it is a workaround.
The pull up loads moreï¼ŒscrollView.contentOffset error. The expectation should be UIEdgeInsets(top: 0.0, left: 0.0, bottom: 0.0, right: 0.0), However, is UIEdgeInsets(top: 64.0, left: 0.0, bottom: 0.0, right: 0.0).

## Report a bug

###  What did you do?

Created a custom refreshview and animator and added it to the tableview.

```
    lazy var refresher: PullToRefresh = {
        let refreshView = WhiteLoadingIndicatorView(frame: CGRect(x: 0, y: 0, width: 40, height: 40))
        let animator = WhiteLoadingIndicatorAnimator(refreshView: refreshView)
        let refresher = PullToRefresh(refreshView: refreshView, animator: animator, height: 40, position: .top)
        return refresher
    }()
```

```
        tableView.addPullToRefresh(self.refresher, action: { [weak self] in
            print("Reload")
        })
```

Custom `RefreshView` and `Animator`:
```
import UIKit
import PullToRefresh

class WhiteLoadingIndicatorView: UIView {

    var indicator: UIActivityIndicatorView!
    
    override init(frame: CGRect) {
        super.init(frame: frame)
        setup()
    }
    
    required init?(coder aDecoder: NSCoder) {
        super.init(coder: aDecoder)
        setup()
    }
    
    private func setup() {
        backgroundColor = .red
        indicator = UIActivityIndicatorView(activityIndicatorStyle: .whiteLarge)
        indicator.hidesWhenStopped = false
        indicator.startAnimating()
        addSubview(indicator)
    }
    
    override func layoutSubviews() {
        super.layoutSubviews()
        indicator.center = CGPoint(x: bounds.midX, y: bounds.midY)
    }
}

class WhiteLoadingIndicatorAnimator: RefreshViewAnimator {
    
    private let refreshView: WhiteLoadingIndicatorView
    
    init(refreshView: WhiteLoadingIndicatorView) {
        self.refreshView = refreshView
    }
    
    func animate(_ state: State) {
        switch state {
        case .initial, .finished:
            refreshView.indicator.stopAnimating()
        case .releasing:
            break
        case .loading:
            refreshView.indicator.startAnimating()
        }
    }
}
```

### What did you expect to happen?

RefreshView frame should be set to the with of the containing scrollview.

### What happened instead?

Frame is set to 375 width once based on the storyboard viewcontroller size and never updated to 320 when the scrollview is resized to the screen size of the iPhone SE.

### Your Environment

- Version of the component: PullToRefresher 3.0.1
- Swift version: 4
- iOS version: 9.3
- Device: iPhone Simulator 9.3 SE
- Xcode version: 9.2
- If you use Cocoapods: _run `pod env | pbcopy` and insert here_ 


here is my code.
**call load more** 
```
func loadMore(lastOrderId:Int,rowCount:Int){
        ServiceConnector.shared.connect(.GETJOINALLOWEDINNOLIST(lastOrderId: lastOrderId, rowCount: rowCount), success: { (target, response) in
            let ex = response["err"].stringValue
            if ex.isEmpty{
                let loadMoreList:[JoinAllAllowedInno] = JoinAllAllowedInno.getJoinAllAllowedInno(json: response)
                loadMoreList.forEach({ (j) in
                    self.joinAllAllowedInnoList?.append(j)
                })
                self.joinTableView.reloadData()
            }
            else {
                self.showAlertMessage(vc: self, titleStr: "warning".localized(), messageStr: ex)
            }
            
        }) { (target, response) in
            self.hideProgressHUD()
        }
    }


**End Load more Refresh** 

self.joinTableView.addPullToRefresh(PullToRefresh(position: .bottom)) { [weak self] in
            let delayTime = DispatchTime.now() + Double(Int64(2 * Double(NSEC_PER_SEC))) / Double(NSEC_PER_SEC)
            DispatchQueue.main.asyncAfter(deadline: delayTime) {
                
                self?.loadMore(lastOrderId: (self?.joinAllAllowedInnoList?.count)!, rowCount: 1)
                self?.joinTableView.endRefreshing(at: .bottom)
            }

## Report a bug

### What happened instead?

TableView's contentOffset changes after pull at bottom

### Your Environment

- Version of the component: 3.0.1
- Swift version: 4.0
- iOS version: 11.1.2
- Device: 7
- Xcode version: 9.2

### Project that demonstrates the bug
[Bug demo](https://github.com/magic3584/testRefresh)
