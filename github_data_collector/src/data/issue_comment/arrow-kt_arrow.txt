Added prettier show instances for arrow-core datatypes. Higherkind types now also use show instances instead of just `toString` to render content.

Lists render the haskell way: `[1, 2, 3]` instead of `List(1,2,3,4)`. I personally like that more and it makes defining `Sequence`, `Map` etc as `Sequence([1, 2, 3, 4])` much easier.

I also made the show instance for strings show certain escape characters differently (`"\n"` as `"\\n"` which renders as `"\n"`). Not so sure about that, but it does make text in some situations easier to read.
Related to #1927.

With these changes, it's not necessary to add dependencies manually when applying Arrow Ank Gradle Plugin, `arrow-ank` included. 
For a `sealed class` with following shape you can generate a `val name: Lens<Example, String>`.

```
sealed class Example {
  abstract val name: String

  data class One(override val name: String, val int: Int) : Example()
  data class Two(override val name: String, val long: Long) : Example()
  data class Three(override val name: String, val double: Double) : Example()
}
```


This allows for updating/modifying the `name` value without ever having to write manual boilerplate to unwrap using `when` to `copy`.
Define some API’s to launch IO operations within a CoroutineScope in a way that in case of cancellation we avoid issues by making sure they get disposed.
When I try to build the current master of Arrow (e610ca6677f9bc912691144437abb8e5fbb1b50b) I get a StackOverflowError from kapt. I'm on Ubuntu 18.04. My coworker on macOS doesn't have this problem. This is currently not blocking me (I don't need to build Arrow anymore), just filing the issue for reference. CC @nomisRev 

Here is the truncated build output:

```
➜  arrow git:(master) java -version
openjdk version "1.8.0_232"
OpenJDK Runtime Environment (build 1.8.0_232-8u232-b09-0ubuntu1~18.04.1-b09)
OpenJDK 64-Bit Server VM (build 25.232-b09, mixed mode)

➜  arrow git:(master) ./gradlew clean build
Configuration(s) specified but the install task does not exist in project :arrow-benchmarks-fx.
Configuration(s) specified but the install task does not exist in project :arrow-kio-benchmarks.
Configuration(s) specified but the install task does not exist in project :arrow-meta-test-models.
Configuration(s) specified but the install task does not exist in project :arrow-scala-benchmarks.

> Task :arrow-meta:kaptKotlin
w: [kapt] Incremental annotation processing requested, but support is disabled because the following processors are not incremental: com.google.auto.service.processor.AutoServiceProcessor (NON_INCREMENTAL).

> Task :arrow-kindedj:kaptKotlin
w: [kapt] Incremental annotation processing requested, but support is disabled because the following processors are not incremental: arrow.core.extensions.ExtensionProcessor (NON_INCREMENTAL), arrow.fold.AutoFoldProcessor (NON_INCREMENTAL), arrow.generic.CoproductProcessor (NON_INCREMENTAL), arrow.generic.ProductProcessor (NON_INCREMENTAL), arrow.higherkinds.HigherKindsProcessor (NON_INCREMENTAL), arrow.optics.OpticsProcessor (NON_INCREMENTAL).

> Task :arrow-core-data:kaptKotlin
w: [kapt] Incremental annotation processing requested, but support is disabled because the following processors are not incremental: arrow.core.extensions.ExtensionProcessor (NON_INCREMENTAL), arrow.fold.AutoFoldProcessor (NON_INCREMENTAL), arrow.generic.CoproductProcessor (NON_INCREMENTAL), arrow.generic.ProductProcessor (NON_INCREMENTAL), arrow.higherkinds.HigherKindsProcessor (NON_INCREMENTAL), arrow.optics.OpticsProcessor (NON_INCREMENTAL).

> Task :arrow-core-data:compileKotlin

[some warnings]

> Task :arrow-core:kaptKotlin FAILED
e: [kapt] An exception occurred: java.lang.StackOverflowError
        at java.lang.AbstractStringBuilder.append(AbstractStringBuilder.java:447)
        at java.lang.StringBuilder.append(StringBuilder.java:136)
        at java.lang.StringBuilder.append(StringBuilder.java:76)
        at java.lang.AbstractStringBuilder.append(AbstractStringBuilder.java:484)
        at java.lang.StringBuilder.append(StringBuilder.java:166)
        at java.lang.StringBuilder.append(StringBuilder.java:76)
        at kotlin.sequences.SequencesKt___SequencesKt.joinTo(_Sequences.kt:1719)
        at kotlin.sequences.SequencesKt___SequencesKt.joinToString(_Sequences.kt:1743)
        at kotlin.sequences.SequencesKt___SequencesKt.joinToString$default(_Sequences.kt:1742)
        at kotlin.text.StringsKt__StringsJVMKt.replace(StringsJVM.kt:76)
        at kotlin.text.StringsKt__StringsJVMKt.replace$default(StringsJVM.kt:75)
        at arrow.meta.encoder.jvm.StringTypeExtensionsKt.removeVariance(StringTypeExtensions.kt:9)
        at arrow.meta.encoder.jvm.KotlinPoetEncoder$DefaultImpls.toMeta(KotlinPoetEncoder.kt:71)
        at arrow.meta.encoder.jvm.KotlinPoetEncoder$DefaultImpls.typeNameToMetaImpl(KotlinPoetEncoder.kt:154)
        at arrow.meta.encoder.jvm.TypeElementEncoder$DefaultImpls.typeNameToMetaImpl(TypeElementEncoder.kt)
        at arrow.meta.encoder.jvm.JvmMetaApi$DefaultImpls.typeNameToMetaImpl(JvmMetaApi.kt)
        at arrow.meta.processor.MetaProcessor.typeNameToMetaImpl(MetaProcessor.kt:33)
        at arrow.meta.processor.MetaProcessor$typeNameToMeta$1.invoke(MetaProcessor.kt:50)
        at arrow.meta.processor.MetaProcessor$typeNameToMeta$1.invoke(MetaProcessor.kt:33)
        at arrow.meta.internal.MemoizeKey1.invoke(memoization.kt:15)
        at arrow.meta.internal.MemoizeKey1.invoke(memoization.kt:14)
        at arrow.meta.internal.MemoizedHandler.invoke(memoization.kt:20)
        at arrow.meta.internal.MemoizationKt$memoize$1.invoke(memoization.kt:7)
        at arrow.meta.encoder.jvm.KotlinPoetEncoder$DefaultImpls.toMeta(KotlinPoetEncoder.kt:147)
        at arrow.meta.encoder.jvm.TypeElementEncoder$DefaultImpls.toMeta(TypeElementEncoder.kt)
        at arrow.meta.encoder.jvm.JvmMetaApi$DefaultImpls.toMeta(JvmMetaApi.kt)
        at arrow.meta.processor.MetaProcessor.toMeta(MetaProcessor.kt:33)
        at arrow.meta.encoder.jvm.KotlinPoetEncoder$DefaultImpls.toMeta(KotlinPoetEncoder.kt:94)
        at arrow.meta.encoder.jvm.KotlinPoetEncoder$DefaultImpls.typeNameToMetaImpl(KotlinPoetEncoder.kt:152)
        at arrow.meta.encoder.jvm.TypeElementEncoder$DefaultImpls.typeNameToMetaImpl(TypeElementEncoder.kt)
        at arrow.meta.encoder.jvm.JvmMetaApi$DefaultImpls.typeNameToMetaImpl(JvmMetaApi.kt)
        at arrow.meta.processor.MetaProcessor.typeNameToMetaImpl(MetaProcessor.kt:33)
        at arrow.meta.processor.MetaProcessor$typeNameToMeta$1.invoke(MetaProcessor.kt:50)
        at arrow.meta.processor.MetaProcessor$typeNameToMeta$1.invoke(MetaProcessor.kt:33)
        at arrow.meta.internal.MemoizeKey1.invoke(memoization.kt:15)
        at arrow.meta.internal.MemoizeKey1.invoke(memoization.kt:14)
        at arrow.meta.internal.MemoizedHandler.invoke(memoization.kt:20)
        at arrow.meta.internal.MemoizationKt$memoize$1.invoke(memoization.kt:7)
        at arrow.meta.encoder.jvm.KotlinPoetEncoder$DefaultImpls.toMeta(KotlinPoetEncoder.kt:147)
        at arrow.meta.encoder.jvm.TypeElementEncoder$DefaultImpls.toMeta(TypeElementEncoder.kt)
        at arrow.meta.encoder.jvm.JvmMetaApi$DefaultImpls.toMeta(JvmMetaApi.kt)
        at arrow.meta.processor.MetaProcessor.toMeta(MetaProcessor.kt:33)
        at arrow.meta.encoder.jvm.KotlinPoetEncoder$DefaultImpls.toMeta(KotlinPoetEncoder.kt:136)

        [etc...]

FAILURE: Build failed with an exception.

* What went wrong:
Execution failed for task ':arrow-core:kaptKotlin'.
> Compilation error. See log for more details
```

Here is the full build output with `--info` logging: https://gist.github.com/abelkov/98a6a0e23e097b076a4e0a90c7c38aa9
See: https://github.com/gradle/wrapper-validation-action

What version are you currently using?
0.10.5-SNAPSHOT (with latest master)

The error: `org.jetbrains.kotlin.idea.KotlinFileType cannot be cast to org.jetbrains.kotlin.com.intellij.openapi.fileTypes.LanguageFileType` is all I get when I run ank atm. This is likely related to #1921 
@i-walker @rachelcarmena 

This also shows that ank could use some tests ^^
This is also kind of concerning because the build was fine, I suspect that we use an old version of ank somewhere in our build!
Don't prepend a newline to the code and handle multiline output better.

Not sure why the arrow docs don't have a newline prepended, but I currently get that for all my snippets.
What version are you currently using? 0.10

What would you like to see?

Not all of the code examples in the source have `:ank` marked up so that it will be validated when the docs are generated. Some of the sample code has errors. `docs/docs/arrow-core/patterns/errorhandling/README.md` for example contains the code:

```
fun <F> MonadError<F, NukeException>.attack1(ME): Kind<F, Impacted> =
  ME.tupled(aim(), arm()).flatMap(ME, { (nuke, target) -> launch<F>(nuke, target) })

val result = Either.monadError<NukeException>.attack()
result.fix() //Left(MissedByMeters(5))

// or

val result1 = Either.monadError<NukeException>.attack1()
result1.fix()
```

`attack1` takes a parameter but `val result1 = ....attack1()` does not pass any parameter.

Also, the extension function `attack1` is defined as having a parameter `ME`, but the code does not specify the type for `ME`.