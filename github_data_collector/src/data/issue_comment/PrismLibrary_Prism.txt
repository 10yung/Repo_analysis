## Summary

Since we are no longer trying to share the INavigationService from Prism.Core and INavigationService is back in Prism.Forms we no longer have a hard requirement for IPlatformNavigationService. While this would be another pdb break from 7.X, the 8.0 push would be a good time to remove the API bloat and simply put this in the INavigationService

## API Changes

- Removes IPlatformNavigationService
- Adds INavigationService.GoBackAsync(INavigationParameters, bool?, bool)
- Adds INavigationService.GoBackToRoot(INavigationParameters)
- Adds INavigationService.NavigateAsync(string, INavigationParameters, bool?, bool)
- Adds INavigationService.NavigateAsync(Uri, INavigationParameters, bool?, bool)

## Intended Use Case

Removes issues with Mocking INavigationService where people use these API's where their NavigationService also needed to implement IPlatformNavigationService.

## Summary

In order to more fully validate tests for Xamarin.Forms UI Tests should be added that we can run as part of the CI pipeline. This will help us to catch issues more rapidly and help us prevent issues before they occur. 

Looking for one or more community members who would like to help us out on this issue.
## Summary

Many API's are currently lacking XML docs or have invalid markup. As we begin to explore adding API documentation to the Prism Docs, we need to update the existing codebase with more complete XML docs so that these docs can be generated for the docs site. 

### NOTE

While updated and added XML docs should include Summaries, and information for parameters/return values, it will often be better to ensure that remarks and examples are included as this will make the generated API docs more useful. Additional information on proper doc tags can be found [here](https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/xmldoc/recommended-tags-for-documentation-comments).

```cs
/// <summary>
/// The GetZero method.
/// </summary>
/// <example> 
/// This sample shows how to call the <see cref="GetZero"/> method.
/// <code>
/// class TestClass 
/// {
///     static int Main() 
///     {
///         return GetZero();
///     }
/// }
/// </code>
/// </example>
public static int GetZero()
{
    return 0;
}
```

### Description

When opening a dialog by using IDialogService the dimmed background is only visible on the current page. If e.g. we have a TabbedPage the tabs-area is not disabled nor greyed out. Therefore the user can switch tabs.

Is there a possibility to prevent this behavior?

### Steps to Reproduce

1. Create a TabbedPage
2. Open a dialog by using IDialogService

### Expected Behavior

All the background is gray and the user should not be able to select the other tab. 

### Actual Behavior

The currenty page is gray only and the user is able to switch tabs,

### Basic Information

- Version with issue: 7.2.0.1367

### Screenshots

![2019-09-04](https://user-images.githubusercontent.com/4341039/64254999-c3a84a00-cf20-11e9-950a-0c287dd6fece.png)

## Summary

The current implementation does not respect the Android back button, if the dialog is shown. The complete page is closed (go back), instead of closing only the diolog.

## Intended Use Case

User should be able to close / cancel the dialog with the back button.
### Description

Add support for Xamarin Forms Shell
Hi.

I have TabbedPage with Children wrapped into NavigationPages. When trying to switch tabs and go to next page with 
**_await NavigationService.NavigateAsync($"BlnakApp1:///Main?{KnownNavigationParameters.SelectedTab}=Tab2/Content");_**
 app goes blank. It navigate to requested page but doesn't display anythig.  Only on ios

Version: 7.0.0.396
Xamarin.Forms: 2.5.0.122203

Sample:
https://github.com/krzysiekkania7/TabbedPageSample
### Package info

- Platform: iOS 11.1
- Prism version: 6.3
- Xamarin version (if applicable): Xamarin.iOS: 11.3.0.47 Xamarin.Forms 2.5.0

### Repro steps

Example Project to reproduce the behaviour: [https://github.com/haythamnikolaidis/ImbeddedNavigationIssue-](https://github.com/haythamnikolaidis/ImbeddedNavigationIssue-)

When creating a TabbedPage in Xamarin.Forms on iOS that has more then 5 tabs the TabbedPage creates a "More" tab with a list view to select the tabs from 5 and up. 

For tabs in this "More" list (and only in this list) the INavigationAware callbacks are not fired on back navigation (Navigation Bar back button or INavigationService.GoBackAsync()). However they are fired as expected in tabs that are not in the "More" list.

In the above example app, once its open on any of the first four tabs and tapping the NavigateToDetails button, upon navigating back, NavigatedTo is fired and the label is updated on screen.

However doing the same in the last three tabs, results in the NavigatedTo not being fired and the label not being updated on screen.
We are a company that has been using PRISM in multiple WPF projects for many years.

Now, we want to develop a new multiplatform application for mobile, tablet, desktop, etc. Following the TODO app (https://github.com/brianlagunas/TodoApp), we have started by creating a solution for each device. For example, the desktop solution is created with WPF and the mobile solution with Xamarin.Forms. We can reuse most of the code by sharing the view models which are .Net Standard libraries that use PRISM.Core.

However, Microsoft recently announced that Xamarin.Forms will support WPF in addition to Linux and MacOS.

Before this, we understood that Xamarin.Forms was only for mobile applications. However, after this announcement, Xamarin.Forms will also start to be used as a framework for desktop applications.

That is the reason why we are thinking to work with Xamarin.Forms as a main development framework for all our applications, both for mobile and desktop devices. We could have different solutions for each device, but all of them would work with Xamarin.Forms with all the advantages that it represents (only one xaml to learn, only one framework, etc.).

The problem is that PRISM for Xamarin.Forms does not have the concept of region. For us, in tablet or desktop solutions, this feature is essential to be able to create modular applications.

In this post (http://brianlagunas.com/first-look-at-the-prism-for-xamarin-forms-preview/#comment-17787), Brian explained that regions didn't make sense in Xamarin.Forms for mobile devices. But now, after this announcement, it makes sense for larger devices like a tablet or desktop. For example, there is a framework called Exrin (https://xamarinhelp.com/container-region-stack-navigation-exrin/) that already supports regions in Xamarin.Forms.

Is there any plan to include the concept of regions in PRISM for Xamarin.Forms? We think that both the community and us will be very interested.

