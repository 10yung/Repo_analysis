Can we suggest? Are the other imports really necessary too?

_Originally posted by @krlmlr in https://github.com/ropensci/tic/pull/221_
You are likely already aware of this, but I just discovered (the hard and painful way) that due to the [recent change in ropenscilabs/travis](https://github.com/ropenscilabs/travis/commit/0b3e6e6f10782babc9941eb3ea714df30fd84393) the private SSH key is now stored in the `TRAVIS_DEPLOY_KEY_<endpoint>` environment variable.

It seems that many of the steps in `tic` -- in particular `step_setup_ssh()` and `do_pkgdown()` -- assume that the name of the env var is `id_rsa`. IIUC, you can manually run `step_setup_ssh()` and specify the `name` outside `do_pkgdown()`.

```
get_stage("before_deploy") %>%
  add_step(step_setup_ssh("TRAVIS_DEPLOY_KEY_COM")
do_pkgdown()
```

But `do_pkgdown()` doesn't expose the `name` parameter, which could be one solution to this mismatch.

In the end, I (for the time being) created the key with

```r
travis::use_travis_deploy(key_name_private = "id_rsa")
```

The error messages in the logs when this fails are misleading. First, the `step_setup_ssh()` is skipped but it's hard to tell why.

```
> tic::before_deploy()
✔ Loading tic stage configuration from tic.R
Skipping before_deploy: step_setup_ssh()
function () 
{
    if (!private$install_ssh_keys$check()) {
        return(FALSE)
    }
    if (!private$add_to_known_hosts$check()) {
        return(FALSE)
    }
    if (!private$test_ssh$check()) {
        return(FALSE)
    }
    TRUE
}
<environment: 0x7fada91c5bc8>
```

Then, the push deploy step will fail due to the privatekey not being set.

```
Initializing Git repo at docs
Staging: .
Checking changed files
Committing to /Users/travis/build/<owner>/<repo>/docs/.git
No upstream branch found
Pushing to remote
git push --force tic-remote HEAD
remote: Invalid username or password.
fatal: Authentication failed for 'https://github.com/<owner>/<repo>.git/'
```

I'm reading the getting started vignette and have a few questions.

* Why "
We recommend the following setup:
● Appveyor: Windows
● Circle CI: Linux
● Travis CI: macOS"? Could there be some footnote about the reason for that?

* Why would someone want to deploy from several CI, do you have a practical example?

* In "The deployment setup functionality comes" I wonder where the _Appveyor_ functionality comes from.

* At the beginning of the vignette your link resources about CI in general but mostly Travis, do you know of some comparisons of all CIs for R packages or so? 

(Maybe I should also read the peer-review thread to see whether there are answers there :wink:)
This might be a silly question :-)
to automate querying of available macros. Solves manual editing of parts in our articles and might be useful for users.
see https://github.com/ropenscilabs/tic/issues/19#issuecomment-559600367
This is a complex task. Below is sketch how this could work:

1. Every template comes with an ID so that we know which tic template we should look up
2. Every template has a part "TEMPLATE start/end" which will be strictly replaced with the upstream template
3. Then we enforce users to put local modifications to the templates in a section which is encapsulated by "USER CHANGES". During the update process, we look for this part and simply append it to the upstream template part
4. We check for possible duplicates and delete the duplicated parts from the TEMPLATE part since the user changes have higher preference
5. We tell the user which part we deleted from the TEMPLATE part due to the local changes which are stored in his YAML

Most often changes will be made for installing additional system libs. In this case, there will be no conflict at all because we do not define this part in the tic templates.
Other changes I see are mods to the env vars. This is a case that we should be able to catch in a descriptive way using the approach outlined above.

If users follow the principle to install any R deps only via tic.R, I am positive that this approach could work.
In the end, the user would only need to call `tic::update_yaml()` and everything will just work.
are very unintuitive. Example:

``` r
library(tic)
get_stage("deploy") %>% 
  add_step(step_push_deploy(
    path = "path"
  ))
#> ✔ Creating a blank tic stage configuration
#> Error: Error evaluating the step argument of add_step(), expected an object of class TicStep.
#> Original error: Cannot orphan the branch that has been used for the CI run.
```

<sup>Created on 2019-10-17 by the [reprex package](https://reprex.tidyverse.org) (v0.3.0)</sup>

Can we print a short version of the expression that this step tried to evaluate?
Is it obvious from the documentation that `tic.R` should never include code that has side effects or performs actual computation, only in a step?
I somehow dislike the mass of explicit tic forwarding calls in the YAML files.

Maybe we should outsource them to a script (residing in the GH repo) which is only called in one stage?

This script then does all the forwarding calls to `tic.R`.

Downside:
Another layer in between that might confuse users. Also, the initial build stages are not visually present anymore.

Upside: A tidy YAML file