### Reporting a bug:

When the column in header and body are both merged vertically and the table spans multiple pages in Word, one part of border (below Species) is missing starting from page 2. HTML output is working, as it is not paginated. And `fix_border_issues` does not seem to help in this case.

<img width="531" alt="Screen Shot 2020-01-06 at 2 54 40 PM" src="https://user-images.githubusercontent.com/1696853/71848199-78e83b80-3094-11ea-9365-354195f2b6b4.png">
( The missing border at upper right corner is a separate issue.)


```r
library(flextable)
library(officer)

typology <- data.frame(
  col_keys = c( "Sepal.Length", "Sepal.Width", "Petal.Length",
                "Petal.Width", "Species" ),
  what = c("Sepal", "Sepal", "Petal", "Petal", "Species"),
  measure = c("Length", "Width", "Length", "Width", "Species"),
  stringsAsFactors = FALSE )
ft <- flextable(iris[,c(5,1:4)])
ft <- set_header_df(ft, mapping = typology, key = "col_keys" )
ft <- merge_h(ft, part = "header")

ft <- border_outer(ft,border=fp_border("black","solid",2),part="all")

# commenting out either below will render fine
ft <- merge_v(ft, j=1)
ft <- merge_v(ft, j=1, part = "header")

ft <- fix_border_issues(ft, part = "all")
ft
```



Session:
```
R version 3.5.1 (2018-07-02)
Platform: x86_64-apple-darwin15.6.0 (64-bit)
Running under: macOS  10.15.2

Matrix products: default
BLAS: /System/Library/Frameworks/Accelerate.framework/Versions/A/Frameworks/vecLib.framework/Versions/A/libBLAS.dylib
LAPACK: /Library/Frameworks/R.framework/Versions/3.5/Resources/lib/libRlapack.dylib

locale:
[1] en_US.UTF-8/en_US.UTF-8/en_US.UTF-8/C/en_US.UTF-8/en_US.UTF-8

attached base packages:
[1] stats     graphics  grDevices utils     datasets  methods   base     

other attached packages:
[1] officer_0.3.6   flextable_0.5.6

loaded via a namespace (and not attached):
 [1] Rcpp_1.0.3        packrat_0.5.0     digest_0.6.23     R6_2.4.1          magrittr_1.5     
 [6] evaluate_0.14     zip_2.0.4         rlang_0.4.2       gdtools_0.2.1     uuid_0.1-2       
[11] data.table_1.12.8 xml2_1.2.2        rmarkdown_2.0     tools_3.5.1       xfun_0.11        
[16] yaml_2.2.0        compiler_3.5.1    systemfonts_0.1.1 base64enc_0.1-3   htmltools_0.4.0  
[21] knitr_1.26  
```

The flextables look fine when viewed in RStudio, but when I insert them into a PowerPoint the padding is between the lines and not outside.

```
library(flextable)
library(officer)
library(dplyr)

x = tibble(c1 = 1:4, c2 = rep("A\nB", 4))

ft0 = flextable(x) %>% padding(padding.bottom = 0, padding.top = 0)
ft10 = flextable(x) %>% padding(padding.bottom = 10)
ft20 = flextable(x) %>% padding(padding.top = 20)
ft0
ft10
ft20

doc = read_pptx()

layout_properties(doc, layout = "Title and Content",
                  master = "Office Theme")

doc = doc %>% 
  add_slide(layout = "Title and Content",
            master = "Office Theme") %>%
  ph_with(ft0, 
          location = ph_location(type = "body",
                                 newlabel = "ft0",
                                 left = 0.5,
                                 top = 1
          )) %>%
  ph_with(ft10, 
          location = ph_location(type = "body",
                                 newlabel = "ft10",
                                 left = 2,
                                 top = 1
          )) %>%
  ph_with(ft20, 
          location = ph_location(type = "body",
                                 newlabel = "ft20",
                                 left = 4,
                                 top = 1
          ))

temp = tempfile(fileext = ".pptx")
print(doc, temp)
shell.exec(temp)
```
Hi David,

I'm highly relying on `flextable` to create tables with beautiful headers, and I'm used to use it along with `officer` to create word documents.

However, I now have to use RMarkdown for a specific project that relies on bookdown to link tables numbers.

Here is a reproducible example of expected output:

```
---
title: "Iris"
output_file: "test.docx"
output: bookdown::word_document2
---
Table iris is given in Table \@ref(tab:iris).

```{r iris, echo=FALSE, results='asis', message = FALSE, warning = FALSE, error=FALSE, tidy = FALSE}
    knitr::kable(head(iris), booktabs = T, caption  = "Characteristics of patients")
\```

```
![image](https://user-images.githubusercontent.com/15105152/70143055-ecb0b600-169a-11ea-835e-a995afb111d3.png)

I'd like to achieve this with a `flextable` instead of a `dataframe` (`flextable(head(iris))` for instance), but `kable` won't take a `flextable` as input.

I use [knit_print](https://davidgohel.github.io/flextable/reference/knit_print.flextable.html) as the help suggests, which print the table perfectly but won't create a table 1 reference, so `\@ref` will not be found.

Is there a way to make this work?

flextable used to automatically adjust the height of cells in tables outputted to MS Word to accomodate the amount of text but does not seem to anymore.
```
library(tidyverse)
library(flextable)

z_df <- iris %>% 
    as_tibble() %>% 
    rename(Sepal.Length.lets.make.this.very.long = Sepal.Length)

flextable(z_df) %>% 
    width(j = 1, width = 1) %>% 
    print(preview = "docx")
```
Now need to explicitly adjust the height with e.g.
```
flextable(z_df) %>% 
    width(j = 1, width = 1) %>% 
    height(height = 0.75, part = "header") %>% 
    print(preview = "docx")
```

Here is my session info for completeness. I am also using MS Word 2007 in case that may be an issue.
```
R version 3.6.1 (2019-07-05)
Platform: x86_64-w64-mingw32/x64 (64-bit)
Running under: Windows 10 x64 (build 16299)

Matrix products: default

locale:
[1] LC_COLLATE=English_United Kingdom.1252  LC_CTYPE=English_United Kingdom.1252   
[3] LC_MONETARY=English_United Kingdom.1252 LC_NUMERIC=C                           
[5] LC_TIME=English_United Kingdom.1252    

attached base packages:
[1] stats     graphics  grDevices utils     datasets  methods   base     

other attached packages:
 [1] flextable_0.5.6 forcats_0.4.0   stringr_1.4.0   dplyr_0.8.3     purrr_0.3.3     readr_1.3.1    
 [7] tidyr_1.0.0     tibble_2.1.3    ggplot2_3.2.1   tidyverse_1.3.0

loaded via a namespace (and not attached):
 [1] xfun_0.11         tidyselect_0.2.5  haven_2.2.0       lattice_0.20-38   colorspace_1.4-1 
 [6] vctrs_0.2.0       generics_0.0.2    htmltools_0.4.0   base64enc_0.1-3   utf8_1.1.4       
[11] rlang_0.4.2       pillar_1.4.2      glue_1.3.1        withr_2.1.2       DBI_1.0.0        
[16] gdtools_0.2.1     dbplyr_1.4.2      uuid_0.1-2        modelr_0.1.5      readxl_1.3.1     
[21] lifecycle_0.1.0   munsell_0.5.0     gtable_0.3.0      cellranger_1.1.0  zip_2.0.4        
[26] rvest_0.3.5       evaluate_0.14     knitr_1.26        fansi_0.4.0       broom_0.5.2      
[31] Rcpp_1.0.3        scales_1.1.0      backports_1.1.5   jsonlite_1.6      fs_1.3.1         
[36] systemfonts_0.1.1 hms_0.5.2         digest_0.6.23     stringi_1.4.3     grid_3.6.1       
[41] cli_1.1.0         tools_3.6.1       magrittr_1.5      lazyeval_0.2.2    crayon_1.3.4     
[46] pkgconfig_2.0.3   zeallot_0.1.0     data.table_1.12.6 xml2_1.2.2        reprex_0.3.0     
[51] lubridate_1.7.4   rmarkdown_1.18    officer_0.3.6     assertthat_0.2.1  httr_1.4.1       
[56] rstudioapi_0.10   R6_2.4.1          nlme_3.1-142      compiler_3.6.1   
```
I have noticed that the line thickness behaviour is strange between pdf, Word and RStudio.

Say I have this code:

```
ft <- regulartable(head(iris))

ft <- hline(ft, i = 1, border = fp_border(width = 1))
ft <- hline(ft, i = 2, border = fp_border(width = 0.5))

officer::read_docx() %>% 
  body_add_flextable(ft) %>% 
  print('line_test.docx')
```

If I save the result as a pdf, the first line (width = 1) is weirdly thick, and the second line (width = 0.5) is nice and thin, in Word they look the same, and in RStudio first line is very thing and the second line doesn't show at all.

Is it possible to make them all look the same across platforms or make thin lines appear in RStudio?

**RStudio output:**
![image](https://user-images.githubusercontent.com/48337093/69504936-ec1d6e80-0f7a-11ea-825a-bdd6907b4940.png)

**Edit:**

Sorry forgot to include `sessionInfo()`

```
R version 3.6.1 (2019-07-05)
Platform: i386-w64-mingw32/i386 (32-bit)
Running under: Windows >= 8 x64 (build 9200)

Matrix products: default

locale:
[1] LC_COLLATE=English_Australia.1252  LC_CTYPE=English_Australia.1252    LC_MONETARY=English_Australia.1252
[4] LC_NUMERIC=C                       LC_TIME=English_Australia.1252    

attached base packages:
[1] stats     graphics  grDevices utils     datasets  methods   base     

other attached packages:
[1] ggplot2_3.2.1 xlsx_0.6.1    RODBC_1.3-16  magrittr_1.5  dplyr_0.8.3   plyr_1.8.4    BaCT_2.5     

loaded via a namespace (and not attached):
 [1] carData_3.0-2     rJava_0.9-11      gdata_2.18.0      withr_2.1.2       tidyselect_0.2.5  foreign_0.8-72    pkgconfig_2.0.3  
 [8] rio_0.5.16        openxlsx_4.1.2    compiler_3.6.1    gtools_3.8.1      forcats_0.4.0     readxl_1.3.1      labeling_0.3     
[15] Rcpp_1.0.2        car_3.0-4         cellranger_1.1.0  tools_3.6.1       R6_2.4.0          purrr_0.3.3       scales_1.0.0     
[22] digest_0.6.22     assertthat_0.2.1  curl_4.2          gtable_0.3.0      rstudioapi_0.10   backports_1.1.5   hms_0.5.1        
[29] munsell_0.5.0     grid_3.6.1        colorspace_1.4-1  data.table_1.12.6 glue_1.3.1        rlang_0.4.1       zip_2.0.4        
[36] xlsxjars_0.6.1    vctrs_0.2.0       lazyeval_0.2.2    yaml_2.2.0        zeallot_0.1.0     crayon_1.3.4      haven_2.1.1      
[43] pillar_1.4.2      abind_1.4-5       tibble_2.1.3  
```

I am using flextable 0.5.5 on a Mac in Rstudio.
I want the first column in a table  containing rotated text narrower,
but using the width function does not work.

```
library(dplyr)
library(flextable)
my_df <- tibble(
  x = rep("head_col",5),
  num_col = 1:5 
)

my_df %>%
  flextable() %>%
  rotate(1:5,1,rotation="btlr",part="body") %>% 
  merge_v(1) %>%
  width(1,0.1)
```


Making the column wider works:

```
my_df %>%
  flextable() %>%
  rotate(1:5,1,rotation="btlr",part="body") %>% 
  merge_v(1) %>%
  width(1,0.1)
```

but changes the vertical location of the rotated text.


The following code rotates and merges the `head_col` values when producing html output in RStudio, but it does not rotate when producing pdf output (via LaTeX). 

```
library(dplyr)
library(flextable)
my_df <- tibble(
  head_col = rep("head_col",5),
  num_col = 1:5 
)

my_df %>%
  flextable() %>%
  rotate(1:5,1,rotation="tbrl",part="body") %>% 
  merge_v(1) 
```

Hi David,

fontsize() does not modify size of empty cells.
If printed to Word, the corresponding cells have the initial text size.

Best regards,
Fabian

Reproducible example:
```
dat_frame <- head(iris)

# Make empty cell to show behavior
dat_frame[2,"Species"] <- ""

myft <- flextable::flextable(dat_frame)
myft <- flextable::fontsize(myft, part = "all", size = 4)
myft <- flextable::height_all(myft, height = 0.0001)

print(myft, preview = "docx")
```

sessionInfo():

```
R version 3.4.3 (2017-11-30)
Platform: x86_64-w64-mingw32/x64 (64-bit)
Running under: Windows >= 8 x64 (build 9200)

Matrix products: default

locale:
[1] LC_COLLATE=English_United Kingdom.1252  LC_CTYPE=English_United Kingdom.1252    LC_MONETARY=English_United Kingdom.1252
[4] LC_NUMERIC=C                            LC_TIME=English_United Kingdom.1252    

attached base packages:
[1] stats     graphics  grDevices utils     datasets  methods   base     

loaded via a namespace (and not attached):
 [1] Rcpp_1.0.1          digest_0.6.15       R6_2.2.2            magrittr_1.5        evaluate_0.10.1     zip_2.0.1          
 [7] stringi_1.1.6       rlang_0.3.0.1       gdtools_0.1.7       uuid_0.1-2          data.table_1.10.4-3 xml2_1.2.0         
[13] flextable_0.5.5     rmarkdown_1.11      tools_3.4.3         stringr_1.3.0       officer_0.3.3       yaml_2.2.0         
[19] compiler_3.4.3      base64enc_0.1-3     htmltools_0.3.6     knitr_1.20  
```
as_chunk has argument 'formater' - this should be 'formatter'

Error is elsewhere, including internal function 'formater' : (https://github.com/davidgohel/flextable/search?q=formater&unscoped_q=formater)

This would, obviously, be a breaking change.

Reproducible example below.

Tried tweaking `auto_fit()` arguments, but no luck.

```r
library(officer)
#> Warning: package 'officer' was built under R version 3.5.3
library(dplyr)
#> 
#> Attaching package: 'dplyr'
#> The following objects are masked from 'package:stats':
#> 
#>     filter, lag
#> The following objects are masked from 'package:base':
#> 
#>     intersect, setdiff, setequal, union
library(ggplot2)
#> Warning: package 'ggplot2' was built under R version 3.5.3
library(flextable)
#> Warning: package 'flextable' was built under R version 3.5.3

str3 <- "Aenean venenatis varius elit et fermentum vivamus vehicula. " %>%
  rep(20) %>%
  paste(collapse = "")

my_tbl <- tibble(nature = "test",
                 text = str3)

ft <-
  my_tbl %>%
  tidyr::gather(key, value) %>%
  flextable() %>% 
  autofit() 

my_doc <- read_docx() %>%
  body_add_flextable(ft)

# this returns an empty .docx
print(my_doc, target = here::here("docs/test.docx"))
```

#### Session Info
```r
sessionInfo()
#> R version 3.5.1 (2018-07-02)
#> Platform: x86_64-w64-mingw32/x64 (64-bit)
#> Running under: Windows 10 x64 (build 17134)
#> 
#> Matrix products: default
#> 
#> locale:
#> [1] LC_COLLATE=English_United States.1252 
#> [2] LC_CTYPE=English_United States.1252   
#> [3] LC_MONETARY=English_United States.1252
#> [4] LC_NUMERIC=C                          
#> [5] LC_TIME=English_United States.1252    
#> 
#> attached base packages:
#> [1] stats     graphics  grDevices utils     datasets  methods   base     
#> 
#> other attached packages:
#> [1] flextable_0.5.2 ggplot2_3.2.0   dplyr_0.8.3     officer_0.3.4  
#> 
#> loaded via a namespace (and not attached):
#>  [1] zip_2.0.1         Rcpp_1.0.2.1      pillar_1.4.2     
#>  [4] compiler_3.5.1    highr_0.8         base64enc_0.1-3  
#>  [7] tools_3.5.1       digest_0.6.20     uuid_0.1-2       
#> [10] evaluate_0.14     tibble_2.1.3      gtable_0.3.0     
#> [13] pkgconfig_2.0.2   rlang_0.4.0       yaml_2.2.0       
#> [16] xfun_0.8          withr_2.1.2.9000  stringr_1.4.0    
#> [19] xml2_1.2.0        knitr_1.23.3      gdtools_0.1.9    
#> [22] grid_3.5.1        tidyselect_0.2.5  glue_1.3.1       
#> [25] data.table_1.12.2 R6_2.4.0          rmarkdown_1.13   
#> [28] tidyr_0.8.3       purrr_0.3.2       magrittr_1.5     
#> [31] scales_1.0.0      htmltools_0.3.6   assertthat_0.2.1 
#> [34] colorspace_1.4-1  stringi_1.4.3     lazyeval_0.2.2   
#> [37] munsell_0.5.0     crayon_1.3.4
```

