Updates com.jsuereth:sbt-pgp from 2.0.0 to 2.0.1.


I'll automatically update this PR to resolve conflicts as long as you don't change it yourself.

If you'd like to skip this version, you can just close this PR. If you have any feedback, just mention me in the comments below.

Have a fantastic day writing Scala!

<details>
<summary>Ignore future updates</summary>

Add this to your `.scala-steward.conf` file to ignore future updates of this dependency:
```
updates.ignore = [ { groupId = "com.jsuereth", artifactId = "sbt-pgp" } ]
```
</details>

labels: semver-patch
This PR should enable automatic releases using `sbt-ci-release`. This way every time a PR is merged a snapshot release will be available
This also removes travis in favour of githubactions for CI
This PR may need a few iterations to get it working right
It seems odd to me that we have support for a particular json lib (json4s) I'd expect that to live in a separate project/repo along other json encoders (circe, etc)

WDYT?
Closes https://github.com/typelevel/squants/issues/324
Specific Energy is energy per unit mass of a chemical reaction.  Its unit of measure is J/kg.  This is not the same thing as a Gray which also a J/kg but of ionizing radiation only.   Units of measure for Specific energy include: Joules/kilogram, kilocalorie per gram (Cal/g or kcal/g), watt hours per kilogram in the field of batteries, and the Imperial unit BTU per pound (BTU/lb).  Gray is a measure of absorbed dose (which is different from squants.radio.Dose which is effective, committed or equivalent dose).  Also, the comment in Dose.scala needs to be updated to reflect this.
I think it would be helpful to set this up to get releases as soon as a PR is merged
I'd like to be able to offer units metadata in my system, so that when someone takes a metric defined as RPM and tries to add it to a US Dollars quantity, the system can warn them that it's a nonsensical operation.  

The compile-time functionality provided by this library is good, but AFAICT irrelevant to my use case. I'm open to suggestions about alternative ways to achieve this goal outside this library, but this seemed like a good place to ask for it. :)
Bitcoin should have 8 decimal places but it has 15. Am I missing something or is it wrong? https://github.com/typelevel/squants/blob/ed961e4485534d1285171abf47dcc5c0ae564cc2/shared/src/main/scala/squants/market/Money.scala#L450
`Bytes(Double.MaxValue / 2.0) == (Bytes(Double.MaxValue / 2.0) + Bytes(1.0))` will evaluate to `true`
This happens because `Information`'s underlying type is `Double`. Not sure about reasons to choose this, it seems that `Long` should suit these needs better.
```scala
import squants.market._

Money.parseString("1000 USD")
// scala.NotImplementedError: an implementation is missing
```