Include some missing requirements
I was confused why my build didn't work after exporting my variables...turns out its been overwritten by the one in the Makefile...
I'm using linux kernel 4.20.6 and the following clang and rust versions[0]. The make command succeds for me, but I get the following warning. Seems like the module compiles successfully but the linking to rust library is broken.
```
WARNING: "rust_main" [/usr/src/rust.ko/build/hello.ko] undefined!
```

Let me know if more information is needed to debug this issue.
[0]:
```
[root@host rust.ko]# rustc --version
rustc 1.35.0-nightly (70f130954 2019-04-16) 
[root@host rust.ko]# clang --version
clang version 5.0.1 (tags/RELEASE_501/final) 
Target: x86_64-unknown-linux-gnu 
Thread model: posix  
InstalledDir: /opt/rh/llvm-toolset-7/root/usr/bin
```
```
$ rustup run nightly make KERNEL_BUILD_PATH=/lib/modules/4.17.11-arch1/build/ CARGO=/home/frol/.cargo/bin/xargo
error: failed to run `rustc` to learn about target-specific information

Caused by:
  process didn't exit successfully: `rustc - --crate-name ___ --print=file-names --sysroot /home/frol/.xargo -Z force-unstable-if-unmarked --target x86_64-unknown-none-gnu --crate-type bin --crate-type rlib --crate-type dylib --crate-type cdylib --crate-type staticlib --crate-type proc-macro` (exit code: 1)
--- stderr
error: Error loading target specification: Field target-c-int-width in target specification is required
  |
  = help: Use `--print target-list` for a list of built-in targets
```

I have updated the `x86_64-unknown-none-gnu.json` file with the version from [`rust-barebones-kernel`](https://github.com/thepowersgang/rust-barebones-kernel/blob/master/Kernel/arch/amd64/target.json), but still cannot get through error:

```
$ rustup run nightly make KERNEL_BUILD_PATH=/lib/modules/4.17.11-arch1/build/ CARGO=/home/frol/.cargo/bin/xargo
   Compiling core v0.1.0 (https://github.com/phil-opp/nightly-libcore.git#54571deb)
   Compiling kernel32-sys v0.2.2
   Compiling log v0.4.3
   Compiling clang-sys v0.5.4
error: Error loading target specification: Could not find specification for target "x86_64-unknown-none-gnu"
  |
  = help: Use `--print target-list` for a list of built-in targets

error: Could not compile `core`.
warning: build failed, waiting for other jobs to finish...
error: build failed
make[2]: *** [/mnt/storage/projects/linux-kernel-basecamp/rust.ko/build/Makefile:46: /mnt/storage/projects/linux-kernel-basecamp/rust.ko/build/libhello.a] Error 101
make[1]: *** [Makefile:1571: _module_/mnt/storage/projects/linux-kernel-basecamp/rust.ko/build] Error 2
make: *** [Makefile:36: all] Error 2
```

Can anyone help me?
The project doesn't get compiled out of the box with `rustc 1.20.0-nightly (bf0a9e0b4 2017-07-10)`. Instead of the [forked version](https://github.com/alexander255/rust-bindgen) of bindgen (which doesn't get compiled), I used the [original one](https://github.com/servo/rust-bindgen) which generates a kernel binding that uses `std` crate everywhere. A snippet looks like:

```
pub struct __IncompleteArrayField<T>(::std::marker::PhantomData<T>);
impl <T> __IncompleteArrayField<T> {
    #[inline]
    pub fn new() -> Self {
        __IncompleteArrayField(::std::marker::PhantomData)
    }
    #[inline]
    pub unsafe fn as_ptr(&self) -> *const T { ::std::mem::transmute(self) }
    #[inline]
    pub unsafe fn as_mut_ptr(&mut self) -> *mut T {
        ::std::mem::transmute(self)
    }
    #[inline]
    pub unsafe fn as_slice(&self, len: usize) -> &[T] {
        ::std::slice::from_raw_parts(self.as_ptr(), len)
    }
    #[inline]
    pub unsafe fn as_mut_slice(&mut self, len: usize) -> &mut [T] {
        ::std::slice::from_raw_parts_mut(self.as_mut_ptr(), len)
    }
}
```

While compiling, I get the following errors (a lot of similar ones because of use of `std` crate).

```
error[E0433]: failed to resolve. Could not find `marker` in `std`
 --> std/src/os/kernel.rs:5:38
  |
5 | pub struct __IncompleteArrayField<T>(::std::marker::PhantomData<T>);
  |                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Could not find `marker` in `std`

```

I wonder how the original project was even compiled. Any idea how can I get around the issue?
fix https://github.com/tsgates/rust.ko/issues/24
When I run make I get the error No rule to make target 'modules'.
What am I doing wrong?

I've been forced to remove the --gc-sections line, as it removes functions, including `_Unwind_Resume`, causing errors at link time.
This is only apparent if you've started using something from the stdlib that can panic, as otherwise there are no references to `_Unwind_Resume`, but for my rot13 branch, I have been unable to build with `--gc-sections`.

