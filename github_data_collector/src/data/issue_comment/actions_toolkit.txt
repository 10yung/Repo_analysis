**Describe the bug**
A clear and concise description of what the bug is.

I don't seem to be able to write to a new file using `exec`. This works when I use a Docker container action with bash, but not using the exec function with JavaScript.

**To Reproduce**
Steps to reproduce the behavior:

1. Create an action and call `exec('echo "test" > id_rsa')` that runs on `ubuntu-latest`.
2. It will print out that this was called, but when you look in the directory the file is not created.
3. Attempt the same thing in the terminal on your computer and it will work. 

**Expected behavior**
A clear and concise description of what you expected to happen.

I expect a file called `id_rsa` to be generated with the contents of `test`.

**Additional context**
Add any other context about the problem here.

I've tried all sorts of different combinations of this and it doesn't seem to work. I can get `touch id_rsa` to create the file but I can't seem to push information into it. I've tried `>`, `>>`, `|`.

Is there some additional configuration that is needed to be able to run these types of commands? I've tried `fs.appendFile` but I end up with the same issue too, which makes me wonder if this isn't just related to this action.
[execa](https://github.com/sindresorhus/execa) is what is standardly used for cross-platform standardized execution. I'm curious what advantages this toolkit package offers us that execa does not already offer. On the surface they seem largely interchangeable.
Resolves #289 
Related to #147 
**Describe the bug**
As input parameters are passed to the action as environment variables, and exec() reuses the action's environment by default, this means the input parameters will probably be visible to the subprocess.  If any secrets are being passed via parameters, they will be visible too.

**To Reproduce**
Steps to reproduce the behavior:
1. Write a JS action that takes a parameter named `foo`
2. Have the action make a call like `await exec.exec('sh', ['-c', 'echo foo==$INPUT_FOO'])`
3. Use action in a workflow that sets a value for the input parameter

**Expected behavior**
I would expect exec.exec() to strip input parameters from the environment used to run the subprocess by default.  If there are cases where it is desirable to pass input parameters to the subprocess, this feels like it should be opt-in.
Add any other context about the problem here.

**Additional context**
While writing an action that took a login token for an online service as an input parameter, I was trying to be careful not to leak the secret: some commands I need to run have the secret passed via command line, and others don't need it.  In retrospect it seems obvious that the secrets would be visible to all subprocesses through the environment variables, but it wasn't obvious from the toolkit documentation.

**Describe the bug**
https://github.com/actions/toolkit/issues/56#issuecomment-536753187 suggests that "add-matcher" works from within a Docker container. I couldn't find a way to get this to work. "add-matcher" always uses the host file-system to lookup the file, and can't read a file from the Docker container (that I could find).

**To Reproduce**
See https://github.com/TrueBrain/actions-flake8/blob/initial_work/entrypoint.sh#L5.
Removing the `cp` on line 4 and use `flake8-matcher.json` instead of the full path on line 5. This will result in a "file not found" error.

**Expected behavior**
"add-matcher" to work from within a Docker container.

**Additional context**
Honestly, I can fully understand that "add-matcher" uses the host file-system. So maybe this is not a bug or unexpected.

The main thing that is puzzling me a bit, is that the comment linked suggests it should work. But I couldn't find any example of this, and the documentation doesn't talk about this. So I am not sure. As a result: this ticket, in the hope one of you can shed some light on this topic :)

If the `cp` is the expected solution, I would love to get some pointers what a good folder is to copy this to. Using the workflow folder for this feels a bit ugly.
Or possibly my solution is just completely bananas, and you have a much better solution in mind.

Tnx!
Initial commit for the `@actions/artifact` package. So far only contains the code for uploading an artifact, download will come in a separate PR.

Adds support for uploading artifacts with new APIs that are independent of the runner (non-plugin). The original code for uploading artifacts can be found here (see https://github.com/actions/runner/tree/master/src/Runner.Plugins/Artifact). This PR largely ports over the C# code for uploading artifacts to node and switches over to some recently added APIs. This new package will be used for the `v2` versions of `actions/upload-artifact` and `actions/download-artifact`. 

Been using the structure of `@actions/glob` in this repo as an example. For this PR I deliberately did not do `tsc` and `npm-install` so there is no `lib` folder or `node_modules` folder. Trying to keep it clean and simple for this PR so that it is easy to review.

Been testing with the following two repos for upload artifact: https://github.com/bbq-beets/artifact-package and https://github.com/bbq-beets/upload-artifact-v2

Future work not part of this PR
- TESTS (all the code in `search.ts` and `util.ts` is a good candidate, will be added to a `_TEST_` directory just like in all the other packages in this repo)
- All the code related to `downloadArtifact` and `downloadAllArtifacts` (TODOs can be seen in `src/artifact.ts`)
- README with examples (will be added after download artifact is working and the package is almost ready to release)
- `lib` and `node_modules` folder, (just like in `@actions/glob), will be added as we get close to release and everything is tested

Search uses our new glob package: `@actions/glob`
Http calls are made using our new: `@actions/http-client`

Much of the work that was done in `@actions/cache` was used as a reference in terms of how concurrent chunked uploads are done, see: https://github.com/actions/cache/pull/128

Formatting was done by doing `prettier --write packages src/*.ts` so the style should be consistent with the other code in this repo.
**Describe the bug**
A clear and concise description of what the bug is.

**To Reproduce**
Steps to reproduce the behavior:
1. Go to '...'
2. Click on '....'
3. Scroll down to '....'
4. See error

**Expected behavior**
A clear and concise description of what you expected to happen.

**Screenshots**
If applicable, add screenshots to help explain your problem.

**Desktop (please complete the following information):**
 - OS: [e.g. iOS]
 - Browser [e.g. chrome, safari]
 - Version [e.g. 22]

**Smartphone (please complete the following information):**
 - Device: [e.g. iPhone6]
 - OS: [e.g. iOS8.1]
 - Browser [e.g. stock browser, safari]
 - Version [e.g. 22]

**Additional context**
Add any other context about the problem here.

**Describe the bug**

Environment variables set in `job: A` cannot be used in dependent `job: B`'s job-level `if:` conditional.

These fine grained exclusions of what you can and cannot do across jobs is not articulated in the documentation, which uses carte-blanche statements like _"environment variables that are available to all jobs and steps in the workflow"_ and _"You can use the if conditional to prevent a job from running (and) you can use any supported context and expression"_

https://help.github.com/en/actions/automating-your-workflow-with-github-actions/workflow-syntax-for-github-actions

So the bug is either:
1. documentation that doesn't document the inclusions or exclusions of the features its describing, or
1. the actions-code being unable to support all the constructs across a workflow's `jobs` that are available across a workflow's `steps`.

**To Reproduce**

Run the following action in a GitHub workflow:

``` yaml
name: Test creating and using workflow-level ENVs across jobs
on: push
jobs:

  # This job sets an environment variable as documented by GitHub [1]:
  #  1. env is a map of environment variables that are available to all
  #     jobs and steps in the workflow.
  #  2. .. you can also set environment variables for the entire workflow
  #
  set_variable:
    name: Set an environment variable for the entire workflow
    runs-on: ubuntu-latest
    steps:
      - name: Sets TESTVAR=0
        run:  'echo ::set-env name=TESTVAR::0'

  # This job uses an environment variable as documented by GitHub [2]:
  #   jobs.<job_id>.if
  #   1. You can use the if conditional to prevent a job from running
  #   2. .. You can use any supported context and expression ..
  #
  use_variable:
    name: Use an environment variable to prevent this job from running
    runs-on: ubuntu-latest
    needs: set_variable
    if: env.TESTVAR == '1'
    steps:
      - name: Print TESTVAR
        run:  echo "${TESTVAR}"

# References:
# [1] https://help.github.com/en/actions/automating-your-workflow-with-github-actions/workflow-syntax-for-github-actions#env
# [2] https://help.github.com/en/actions/automating-your-workflow-with-github-actions/workflow-syntax-for-github-actions#jobsjob_idif
```

**Expected behavior**

**Scenario 1**: `job: set_variable` should pass, and `job: use_variable` should be skipped. 

**Scenario 2**: if you change `TESTVAR::0` to `TESTVAR::1` in  `job: set_variable`, then  `job: use_variable` should run and print `1` to `stdout`.

**Screenshots**

![2020-01-11_16-19](https://user-images.githubusercontent.com/1557255/72212385-c8ad7500-348f-11ea-9b4f-23e788538ae7.png)

**Additional context**

I expect to hear the following from the back-end developers: _"of-course this won't work because you're trying to use dynamic output from one VM as the input to another VM; we only support up-front hardcoded environment variables in the workflow so they can be provided to all VMs on instantiation."_

My response is: _"When the YAML's dependency graph determines that one VM depends on another VM via the `needed:` variable, then you absolutely _can_ 1) harvest the variables as a post-action in all prerequisite VMs and 2) aggregate and pass those variables into the construction step of any dependent VMs."_

**Edit**: shout if there's a more applicable repo this should be filed under; I wasn't sure which of the action repos does the yaml parsing and VM-generation for jobs.  Regards.