## PR Checklist:
- [x] I have run `npm test` locally and all tests are passing.
- [x] I have added/updated tests for any new behavior.

## PR Description
Node 8's End of Life is December 31, 2019. So, it should be safe to drop Node `<10` support. 

## Changes

### Module

- Use the WHATWG URL API instead of the Legacy API (The Legacy URL API is deprecated since Node 11) https://github.com/request/request/commit/d5349f8ea42cef0b824f61fc88693d3b87393a31

- Rewrite the codebase using ES6 syntax https://github.com/request/request/commit/59591d55635dc8612cb4e7a79552967221ad4ab9 https://github.com/request/request/commit/f050afb8af004daf1dd86a98438a703c3c1a46d4 https://github.com/request/request/commit/d4d1bb44e907816db2da7fa86a18f33a2c24c8e1

#### Dependencies

- Update `uuid` to `v3.3.3` https://github.com/request/request/commit/57fb945de16cf76c245a9499a78dc431dd10fe55
- Update `tough-cookie` to `v3.0.1` https://github.com/request/request/commit/4b844aa3b91742a83c2f8e327cfaa355aa3f0b2c
- Update `safe-buffer` to `v5.2.0` https://github.com/request/request/commit/3febac31c4a66105842eb2bcf200d36c7f3a3055
- Update `qs` to `v6.9.1` https://github.com/request/request/commit/f6bbc577bded036308c8a2dd20564ea32bc0211d
- Update `combined-stream` to `v1.0.8` https://github.com/request/request/commit/aa219d4856fd41ed7b025a7616f44e87bc46a257
- Update `form-data` to `v3.0.0` https://github.com/request/request/commit/3afe01e3cd99234b12d2fd37b3775702f37c1e68
- Update `http-signature` to `v1.3.1` https://github.com/request/request/commit/d45da2d722478baa9a3b95d99857d94f2f678362
- Update `mime-types` to `v2.1.26` https://github.com/request/request/commit/69eeb3beaa8b74bd5e9324f46ca41ef884cc9448

#### devDependencies

- Update `bluebird` to `v3.7.2` https://github.com/request/request/commit/f126d79539dc98f2d1023a17b7a280be357161bc
- Update `tape` to `v4.13.0` https://github.com/request/request/commit/6269c47f1fd72897be585fcf320a16f77a4e5161
- Update `rimraf` to `v3.0.0` https://github.com/request/request/commit/c722583aabcc89616cdd96890b0fd7a494c37fc3
- Update `standard` to `v14.3.1` https://github.com/request/request/commit/4167f9bc8c44b252cfec9dd95898da0a044c33ee
- Remove `phantomjs-prebuilt` https://github.com/request/request/commit/9c6697b670fe950bdb127f3868962fde9e4b62a2
- Remove `karma-phantomjs-launcher` https://github.com/request/request/commit/8e636178a1f84c483e02135146b04f44f44af144
- Add `karma-chrome-launcher` https://github.com/request/request/commit/f2ba86c441430ab5be553f1b61d741873c7e1297
- Update `karma` to `v4.4.1` https://github.com/request/request/commit/4363672ce330fdbe53a470f50f3ec014290cdd05
- Update `browserify` to `v16.5.0` https://github.com/request/request/commit/0aebde1174232fd6c2d39044dff30b3812372383
- Update `browserify-istanbul` to `v3.0.1` https://github.com/request/request/commit/20f3e71dfd5f9e1ff2b247f977061556d1687e9a
- Update `codecov` to `v3.6.1` https://github.com/request/request/commit/7daa064ab5d5f66372e2fc971330f4c219f37dac
- Update `coveralls` to `v3.0.9` https://github.com/request/request/commit/fd8357c4bfcc6e42f75de51066b839a7c7db9073
- Remove `function-bind` https://github.com/request/request/commit/37d4efb4970e6f687d102b5b98e50cc6655ea670
- Update `karma-browserify` to `v6.1.0` https://github.com/request/request/commit/84cff7d1c4a60c7f53c04508a25b4d1252efa480
- Update `karma-cli` to `v2.0.0` https://github.com/request/request/commit/6875ccc8096cedc213f1273669dab61f0a7862ed
- Update `karma-coverage` to `v2.0.1` https://github.com/request/request/commit/0042c847a178ca0c67da38369507ccc1397b739c
- Update `karma-tap` to `v4.1.4` https://github.com/request/request/commit/13b520a5cbcb4896905debd3cfa3a74f925d8ce0
- Update `nyc` to `v15.0.0` https://github.com/request/request/commit/f31a5d4e788b0e75b7f24ed835b879c3bf72cd93
- Add `puppeteer` https://github.com/request/request/commit/015ad46de3d6ed442edc93c059a776509ca17e53 

#### Test

- Tests were rewritten using ES6 syntax https://github.com/request/request/commit/1c21f7e010c198152908a02ccdf24f5ca9017fba
- Use `strictEqual` instead of `equal` https://github.com/request/request/commit/8abe15dcf089fdd6b362ca27b253d50f3742ba97
- Use `ChromeHeadless` instead of `PhantomJS` (is unmaintained) https://github.com/request/request/commit/d784b8077aaa77560f3c32fa7f09ef7c22719bc5

#### Other Changes

- Run npm lint https://github.com/request/request/commit/56c57e90696c337099a24ce6d9d25c2d63275fb0 https://github.com/request/request/commit/ba1681f70177d329d30cb3046030fa0ee8ba399f
- Do not use `Object.prototype`s builtins directly https://github.com/request/request/commit/29650672a7fc2fc0845ddbe93ccdc8e440822431
- Update TravisCI config https://github.com/request/request/commit/9895d816e12fa48d327163bf52e3f88af167d10c



## PR Checklist:
- [x] I have run `npm test` locally and all tests are passing.
- [x] I have added/updated tests for any new behavior.
       <!-- Request is a complex project, there are VERY FEW exceptions
               where a new test is not required for new behavior. -->
- [ ] If this is a significant change, an issue has already been created where the problem / solution was discussed: [N/A, or add link to issue here]
       <!-- If you'd like to suggest a significant change to request,
               please create an issue to discuss those changes and gather
               feedback BEFORE submitting your PR. -->


## PR Description
<!-- Describe Your PR Here! -->

### Summary
I have a special timeout issue, can someone help me check it? 
### Simplest Example to Reproduce
```js
request({
                method: 'GET',
                url: 'https://127.0.0.1:8866/v1/search/products-listings?in_stock=true%2Cfalse&locale=en_gb',
                headers: {'Content-Type': 'application/json'},
                json: true,
                timeout: 10000,
            }, function(err, response, body) {
                if (err) {
                    return reject(new Error('url:' + url + ' method:' + method + ' error: ' + err.message));
                }
            });
```

### Expected Behavior
Here I set a wrong request address. The expected result is that a timeout exception is thrown after 10 seconds. (The protocol header should be http instead of https)

### Current Behavior
```
{
"code": "Internal",
"message": "caused by Error: url:https://127.0.0.1:8866/v1/search/products-listings?in_stock=true%2Cfalse&locale=en_gb method:GET error: ESOCKETTIMEDOUT"
}
```
This request took at least 20 seconds, which means that it takes at least 20 seconds for me to get exception information.

### Possible Solution
I don't know how to solve this issue. Can somebody help me to check?

### Your Environment
<!--- Include as many relevant details about the environment you experienced the bug in -->

| software         | version
| ---------------- | -------
| request          | ^2.88.0
| node             | v12.8.0
| npm              | 6.9.0
| Operating System | Ubuntu 16.04

### Summary

When combining `strictSSL` and `forever` configs, the `forever` flag is not always honored. This is due to the fact that the `forever` flag is not used lookup the appropriate `http(s).Agent` to use for each request.

### Simplest Example to Reproduce

```js
"use strict";
const http = require("http");
const request = require("request");

const server = http.createServer((req, res) => {
  res.end("");
});

server.listen(8000, () => {
  request("http://localhost:8000", {
    strictSSL: false,
  }, (err, response) => {
    console.log('>> Connection is expected to close', response.headers.connection);

    request("http://localhost:8000", {
      strictSSL: false,
      forever: true,
    }, (err, response) => {
      console.log('>> Connection is expected to keep alive', response.headers.connection);

      request("http://localhost:8000", {
        strictSSL: false,
      }, (err, response) => {
        console.log('>> Connection is expected to close', response.headers.connection);
        server.close();
      });
    });
  });
});
```

### Expected Behavior

```
>> Connection is expected to close close
>> Connection is expected to keep alive keep-alive
>> Connection is expected to close close
```

### Current Behavior

```
>> Connection is expected to close close
>> Connection is expected to keep alive close
>> Connection is expected to close close
```

### Possible Solution

The [`poolKey`](https://github.com/request/request/blob/master/request.js#L694) should also contain the `keepAlive` flag value.

### Context

This issue was found in https://github.com/jsdom/jsdom/pull/2783#issuecomment-572917337. Request is used in multiple places in jsdom. If the first request config doesn't the `forever` flag to true, for all the subsequent requests the connection will be closed even if the `forever` flag is set.

The current workaround is to pass a pass new agent pool to force request to create new `http(s).Agent` when we want to ensure that the `forever` flag is honored.

### Your Environment

| software         | version
| ---------------- | -------
| request          | 2.88.0
| node             | 12.13.1
| npm              | 6.10.2
| Operating System | OSX

### Summary
The actual version of the request object converts the response body by the request content type.

### Simplest Example to Reproduce
if the request header content-type = 'application/x-www-form-urlencoded', or form, body is used
the response will not converted into json, even the response content-type = 'application/json'

### Expected Behavior
The response body should be automatically converted into json format

### Possible Solution
Please change the request.js: Request.prototype.readResponseBody

The condition:
    if (self._json) {
to something like:
   if (/^application\/json/.test(response.headers['content-type']))

thank you

when using with pbjs , original value of self.encoding is undefined,we wish to keep response.body Buffer style

## PR Checklist:
- [ ] I have run `npm test` locally and all tests are passing.
- [ ] I have added/updated tests for any new behavior.
       <!-- Request is a complex project, there are VERY FEW exceptions
               where a new test is not required for new behavior. -->
- [ ] If this is a significant change, an issue has already been created where the problem / solution was discussed: [N/A, or add link to issue here]
       <!-- If you'd like to suggest a significant change to request,
               please create an issue to discuss those changes and gather
               feedback BEFORE submitting your PR. -->


## PR Description
when using with pbjs , original value of self.encoding is undefined,we wish to keep response.body Buffer style

### Summary
I'm trying to set cookies which i get from another request with getCookies() but every time i try to set cookies with setCookies() im getting:
 ```
TypeError: str.trim is not a function (Request-Promise/Tough-Cookie)

```
### Simplest Example to Reproduce
So this is a request where i have to set cookies which i get from recent request and variable looks like this
`[{"domain":"domain.com","path":"/","secure":true,"expires":"2018-06-19T15:36:04.000Z","key":"key1","value":"val1","httpOnly":false,"hostOnly":true},{"domain":"domain.com","path":"/","secure":true,"expires":"2018-06-19T15:36:04.000Z","key":"key2","value":"val2","httpOnly":false,"hostOnly":true}]
`
And this is the reuqest where im getting error
```
var request = require('request');

var jar = request.jar();

jar.setCookie(cookies, ".domain.com");



request({
	uri: "https://www.domain.com/",
	method: "GET",
	headers: {
'Accept': 'application/json, text/javascript, */*; q=0.01',
'Accept-Encoding': 'gzip, deflate, br',
'Accept-Language': 'bg,en-US;q=0.9,en;q=0.8,tr;q=0.7',
'Content-Type': 'application/json',
'Referer': 'https://www.google.com/',
'Sec-Fetch-Mode': 'cors',
'Sec-Fetch-Site': 'same-origin',
'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/79.0.3945.79 Safari/537.36',
'X-Requested-With': 'XMLHttpRequest'	},
	timeout: 10000,
	followRedirect: true,
	maxRedirects: 10,
    jar:jar
    gzip: true
}, function(error, response, body) {
	console.log("Error" + error);
	console.log("Response: " + response);
	console.log("Body: " + body);
});
	
```

### Expected Behavior
I would be thankful if someone can help with this. Tried with toString() but getting cookie like

` {
               creation: "2019-12-27T16:53:57.964Z"
               hostOnly: true
               lastAccessed: "2019-12-27T16:53:57.964Z"
               path: "/"
               pathIsDefault: true
               value: "[object Object],[object Object],[object Object],[object Object],[object Object],[object Object],[object Object],[object Object],[object Object],[object Object],[object Object],[object Object],[object Object]" 
           }`


### Summary
500 error in sending requests

### Simplest Example to Reproduce


```js
request
    .get('https://tools.cisco.com/security/center/publicationService.x?criteria=exact&cves=&keyword=&last_published_date=&limit=20&offset=0&publicationTypeIDs=1,3&securityImpactRatings=critical,high&sort=-day_sir&title=',
        {
            'User-Agent':'Mozilla/5.0 (Macintosh; Intel Mac OS X 10.15; rv:71.0) Gecko/20100101 Firefox/71.0',
            'Accept-Language':'zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2'
        })
    .on('response', function(response) {
        console.log(response.statusCode); // 200
        console.log(response.headers['content-type']); // 'image/png'
    });
```

### Expected Behavior
no

### Current Behavior
no
### Possible Solution
no idea

### Context
when i visited the site "https://tools.cisco.com/security/center/publicationService.x?criteria=exact&cves=&keyword=&last_published_date=&limit=20&offset=0&publicationTypeIDs=1,3&securityImpactRatings=critical,high&sort=-day_sir&title="
I would get 500 statusCode in return 
But  i changed the coding language into python3, i found it's ok

`import requests
r = requests.get("https://tools.cisco.com/security/center/publicationService.x?criteria=exact&cves=&keyword=&last_published_date=&limit=20&offset=0&publicationTypeIDs=1,3&securityImpactRatings=critical,high&sort=-day_sir&title=")
print(r.text)`


`/usr/local/bin/python3.7 /Users/xx/x/x/x/lib/modules/test.py
[{"identifier":"cisco-sa-20191112-asa-ftd-lua-rce","title":"Cisco Adaptive Security Appliance Software and Firepower Threat Defense Software Remote Code Execution Vulnerability","version":"2.5","firstPublished":"2019-11-12T13:15:00.000+0000","lastPublished":"20.
...
..
..
`


### Your Environment
node v13.2.0
mac OS 



this library is really nice , but when I use post to submit some data，it response nothing. I’m tried  many way to request.
 
I'm trying to use Node to make a simulated login. The next request requires the cookie returned by the previous request. I don't understand the usage of cookieJar. I wonder if I can automatically save and pass cookies like the Python Request Library?

Looking forward to your reply.
The method request.get with agentOptions = 'SSLv3_method' returns the error described bellow: 

Configuration
NPM: 6.13.4
NODE: v13.2.0
  "dependencies": {
    "fs": "0.0.1-security",
    "https": "^1.0.0",
    "openssl": "^1.1.0",
    "request": "^2.88.0"
  }

Error
```
code:"EPROTO"
errno:-4046
message:"write EPROTO 22584:error:14094410:SSL routines:ssl3_read_bytes:sslv3 alert handshake failure:c:\ws\deps\openssl\openssl\ssl\record\rec_layer_s3.c:1544:SSL alert number 40\n"
stack:"Error: write EPROTO 22584:error:14094410:SSL routines:ssl3_read_bytes:sslv3 alert handshake failure:c:\ws\deps\openssl\openssl\ssl\record\rec_layer_s3.c:1544:SSL alert number 40\n\n    at WriteWrap.onWriteComplete [as oncomplete] (internal/stream_base_commons.js:87:16)"
syscall:"write"

```

The source code
```
const https = require('https');
const request = require('request');
const fs = require('fs');
const port = 8000

const options = {
  key: fs.readFileSync('key.pem'),
  cert: fs.readFileSync('cert.pem')
};

https.createServer(options, function (req, res) {

  var options = {
      url : "https://localhost:9999/run.html?PARAM=123",
      agentOptions: {
        securityOptions: 'SSLv3_method'
    }
    };

    request.get(options, function(error, response, body) {
      console.log('error:', error);
      console.log('statusCode:', response && response.statusCode); 
      console.log('body:', body);       
    } );

    res.end("test test");

}).listen(port);


```