- [ ] Update MSRV to 1.31, needed for the updated sub-crates
  - [ ] Convert to 2018 edition too
- [ ] https://github.com/rust-num/num-bigint/issues/128: num-bigint 0.3
- [ ] https://github.com/rust-num/num-complex/issues/70: num-complex 0.3
- [ ] https://github.com/rust-num/num-rational/issues/65: num-rational 0.3
Decimal arithmetic is very popular among financial computations, to prevent rounding errors.
And with the creating [Business Applications Working Group](https://internals.rust-lang.org/t/proposal-business-applications-working-group/10400) it makes sense to make these libraries more mainstream (i.e. make some code a part of rust-num organization):

- crate: [decimal](https://crates.io/crates/decimal/), [repository](https://github.com/alkis/decimal)
- crate: [rust-decimal](https://crates.io/crates/rust-decimal), [repository](https://github.com/paupino/rust-decimal)
- crate: [bigdecimal](https://crates.io/crates/bigdecimal), [repository](https://github.com/akubera/bigdecimal-rs)

See also https://github.com/alkis/decimal/issues/55, https://github.com/paupino/rust-decimal/issues/197, https://github.com/akubera/bigdecimal-rs/issues/60
https://github.com/rust-lang/rust/pull/58710 was just merged into master. This may be cause to deprecate the `num::clamp` function in the near future.
In my code ([https://github.com/poanetwork/vdf](/poanetwork/vdf)), I found myself in need of a trait that included pretty much everything that could be asked of a bignum: conversions from various sized integers, bit setters, serialization and deserialization (both unsigned and 2â€™s complement), mutating arithmetic operations, etc.

Would such a trait be in the scope of this crate?
`{f32,f64}::abs_sub` is misleading and [has been deprecated](https://github.com/rust-lang/rust/pull/33664) for a couple years. Maybe it should be deprecated in the `Float` trait too?