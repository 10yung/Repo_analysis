just like the way DateFormatPipe does,

if (!value)  { return ‘’; }

I need a duration with detail.
I see in source code, the pipe amDuration force humanize and lose all detail of duration object.

I suggest adding a new boolean parameter in this pipe for using or not the humanize method.
Another solution is to have a new pipe to transform transform duration into humanized duration.

**Description of the Issue and Steps to Reproduce:**

If I try to change two or three consecutive times (regardless of the time that passes between each click) the language (moment.updateLocale), the application remains frozen and the browser does not respond. I've also noticed that I can not get the amDateFormat format updated (amTimeAgo does). I tried to force the update of the change, but I can not make it work correctly.

Initially it is all in modules, but from the component "home.component" I get the same result, since it could be due to an incorrect injection of dependencies, or any other reason.

I've been looking at "issues" and searching through google, but I have not found anyone who happens to this.

Install this repository: 
https://github.com/Hugoer/angular-seed/tree/feature/ngx-moment-bug-updatelocale
npm install
npm start

Did you search for duplicate issue? [No]

*Ensure your issue is isolated to ngx-moment. Issues involving third party tools will be closed unless submitted by the tool's author/maintainer.*

**Environment:**

windows 10

Please answer the following questions:

* Angular version?  8.2.0-next.0
* TypeScript version? 3.4.3
* `moment` version? 2.24.0
* Are you using `moment-timezone`?  No
* Are you using the angular-cli? Yes
* Using Rollup/Webpack/System.js/Ionic/similar? No


It could be great to add a way to import ngx-moment without locales and add the availability to import only the locales I want.
I recently upgraded from angular2-moment to ngx-moment 3.3.0.

I couldn't get ngx-moment to work following the documentation
```
'ngx-moment': {
                main: './index.js',
                defaultExtension: 'js'
 }
```
index.js doesn't exist in the package so I got 404s.

Changing it to 

```
 'ngx-moment': {
                main: './bundles/ngx-moment.umd.js',
                defaultExtension: 'js'
}
```

did work. Does your documentation need updating or am I doing something wrong?
Hi,

I want to display the time zone name, for example, PST. How do I do that? The "Z" gives me "-08:00".

Thanks!
Hi,

I wonder if it is possible to change the formatting to be like this: "Just Now", "1 sec ago", "2 mins ago", etc.


Thanks!

I can get the total number of hours and min from a future date as a whole but I need the difference in min to be based on the hour. For example if it's 3:17 pm and I'm testing against tomorrow, it responds 8h and 522m. Both are correct but what I'm wanting 8h and 43m.

`{{nextDate | amDifference: currentDate : 'hours'}}h {{nextDate | amDifference: currentDate : 'minutes'}}m`

```
this.nextDate = new Date();
this.nextDate.setDate(this.nextDate.getDate() + 1);
this.nextDate.setHours(0,0,0,0);
```
Did you search for duplicate issue? [Yes]

Both implementation of pipes FromUtcPipe and ParsePipe, are not accepting format / formats as parameters, while moment instead provides the option.

### from-utc.pipe.ts
```typescript
import {Pipe, PipeTransform} from '@angular/core';
import * as moment from 'moment';

@Pipe({ name: 'amFromUtc' })
export class FromUtcPipe implements PipeTransform {
  transform(value: any, ...args: string[]): any {
    return moment.utc(value);
  }
}
```
could return instead 
```typescript
import {Pipe, PipeTransform} from '@angular/core';
import * as moment from 'moment';

@Pipe({ name: 'amFromUtc' })
export class FromUtcPipe implements PipeTransform {
  transform(value: any, formats: string|string[], ...args: string[]): any {
    return moment.utc(value, formats);
  }
}
```
the same is true for the ParsePipe which only accepts a string format and not an array:
### parse.pipe.ts
```typescript
import { Pipe, PipeTransform } from '@angular/core';
import * as moment from 'moment';

// under systemjs, moment is actually exported as the default export, so we account for that
const momentConstructor: (value?: any) => moment.Moment = (<any>moment).default || moment;

@Pipe({ name: 'amParse' })
export class ParsePipe implements PipeTransform {
  transform(value: string, format: string): moment.Moment {
    return moment(value, format);
  }
}
```
while it could be:
```typescript
import { Pipe, PipeTransform } from '@angular/core';
import * as moment from 'moment';

// under systemjs, moment is actually exported as the default export, so we account for that
const momentConstructor: (value?: any) => moment.Moment = (<any>moment).default || moment;

@Pipe({ name: 'amParse' })
export class ParsePipe implements PipeTransform {
  transform(value: string, formats: string|string[]): moment.Moment {
    return moment(value, formats);
  }
}
```
Using the following example: 
```
@Component({
  selector: 'app',
  template: `
    Last updated: {{myDate | amCalendar}}
  `
})
```

Which should print (from the readme)
` Last updated: Today at 14:00` 

what I actually get:

`Today at 10:11 AM`

Any way to use 24-hour format here?