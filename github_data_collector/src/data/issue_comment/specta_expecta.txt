It looks like 1.0.6 only includes the macOS framework, when in 1.0.5 the framework zip file was a Carthage folder which included frameworks for both macOS and iOS.
Adding tvOS support with Xcode 8.3
Hi,
when I'm getting this build warning

```
warning: using 'ALWAYS_SEARCH_USER_PATHS = YES' while building targets which define modules ('DEFINES_MODULE = YES') may fail. Please migrate to using 'ALWAYS_SEARCH_USER_PATHS = NO'.
'.
```

Should this setting be removed?
My test code:

~~~objc
...
it(@"should close info dialog", ^{
    [dataModel cancelRequest];

    expect(dataModel.isShowingDialog).to.equal(NO);
});
~~~

when`expect(dataModel.isShowingDialog).to.equal(NO);` fail, Xcode didn't highlight it but have fail log, anything I forgot to set?
Recently, Kiwi anounced, that they are dropping the support and future development, so I'm thinking about transitioning to Expecta. One thing, that holds me back, is that there are some matchers and features, which I use all the time and which are absent in expecta. Namely, receive matcher, mocks, evaluation matcher for blocks (see my pull request here: https://github.com/kiwi-bdd/Kiwi/pull/673 ).

I can implement them in expecta, but I was wondering, if it would be in vein with expecta philosophy to implement such a functionality? So, could please someone shed some light on the issue?

Context: I'm testing a Promise created using PromiseKit

What I have now:

```
promise.then(^(id result){
                            expect(result).to.equal(expected);
                        }).catch(^(NSError *error){ 
                            failure(error);
                        }).finally(^(){
                            done();
                        });
```

which the lazy old me use as a macro 

```
#define AssertPromise(promise, expected) promise.then(^(id result){ expect(result).to.equal(expected);}).catch(^(NSError *error){ failure(error);}).finally(^(){done();});
```

What I wanted (similar library in JS: https://github.com/domenic/chai-as-promised/): 

```
expect(promise).to.be.resolvedAs(expected)
```

Currently I am stuck on implementing the match method of EXPMatcher since it expects a boolean, but then we need to wait until the promise get resolved.

Would this kind of api be possible? Any kind of direction would be nice :)

Cheers,

While I was converting my `XCTAssert` macros to `expect` macros, I wrongly copy/pasted actual value as following:

```
expect([request class]).to.beAMemberOf([MyRequest class]);
```

where it should have been:

```
expect(request).to.beAMemberOf([MyRequest class]);
```

Is this case, expecta failed with the following message:

```
expected: an instance of MyRequest, got: an instance of MyRequest
```

which obviously look weird. Could we improve this? We can check if given value is a class struct with the following conditional:

```
if ([actual class] == actual) {
  // A class struct
} else {
  // An instance
}
```

But I'm not sure if making that check only in `EXPMatchers+beInstanceOf` file enough to handle all cases.

If you feel this change is enough, I can move for a PR.

Thanks


Hi, I am just trying to test if a notification is posted...

```
        expect(^{
            [[NSNotificationCenter defaultCenter] postNotificationName:@"notificationName" object:nil];
        }).to.notify(@"notificationName");
```

This tests fails with `the expected value is nil/null`, am I doing something wrong?

I debugged a little and here:
`EXPMatcherImplementationBegin(postNotification, (id expected))`
expected is always nil, so the block is never executed.

Furthermore it would be nice to check [this tweet from AshFurrow](https://twitter.com/ashfurrow/status/498852554143719424) talking about object:nil when posting the notification.

Async testing fails with after() fails with the matcher _beInstanceOf_ while _equal_ works, am I missing something - My code here : -

https://github.com/aprofromindia/Airlines-List---Clean-Code/blob/master/Sample%20AppTests/MasterViewControllerSpec.m
