Updates [org.scala-sbt:sbt](https://github.com/sbt/sbt) [from 1.3.6 to 1.3.7](https://github.com/sbt/sbt/compare/v1.3.6...v1.3.7).
[Release Notes/Changelog](https://github.com/sbt/sbt/releases/tag/v1.3.7)

I'll automatically update this PR to resolve conflicts as long as you don't change it yourself.

If you'd like to skip this version, you can just close this PR. If you have any feedback, just mention me in the comments below.

Have a fantastic day writing Scala!

<details>
<summary>Ignore future updates</summary>

Add this to your `.scala-steward.conf` file to ignore future updates of this dependency:
```
updates.ignore = [ { groupId = "org.scala-sbt", artifactId = "sbt" } ]
```
</details>

labels: library-update, semver-patch
`Session.pooled` currently takes one effect, but if you want to use e.g. tracing in `Kleisli[F, Span[F], *]`, you'd need a `Span[F]` to even allocate the session pool (external resource). If possible, there should be a way to use two different effects, so that the outer resource can be allocated without a span.
Updates de.heikoseeberger:sbt-header from 5.3.1 to 5.4.0.


I'll automatically update this PR to resolve conflicts as long as you don't change it yourself.

If you'd like to skip this version, you can just close this PR. If you have any feedback, just mention me in the comments below.

Have a fantastic day writing Scala!

<details>
<summary>Ignore future updates</summary>

Add this to your `.scala-steward.conf` file to ignore future updates of this dependency:
```
updates.ignore = [ { groupId = "de.heikoseeberger", artifactId = "sbt-header" } ]
```
</details>

labels: sbt-plugin-update, semver-minor
Concerning Postgres versions:

1. It should be clarified & documented which Postgres versions are supported
2. Tests should be added for each supported version
Many Postgres-based apps use [PostGIS](https://postgis.net/), so it would be great to support it from skunk!


https://jdbc.postgresql.org/documentation/head/ssl-client.html
Right now, if the connection to the server is lost (i.e. restart PostgreSQL server), the application needs to be restarted to get reconnected. I think this would be a nice feature to have :)

Here's the exception I get when I stop and then start the PostgreSQL server:

```
root[ERROR] java.lang.Exception: Fatal: EOF before 5 bytes could be read.Bytes
root[ERROR] 	at skunk.net.BitVectorSocket$$anon$2.$anonfun$readBytes$1(BitVectorSocket.scala:72)
root[ERROR] 	at cats.effect.internals.IORunLoop$.cats$effect$internals$IORunLoop$$loop(IORunLoop.scala:139)
root[ERROR] 	at cats.effect.internals.IORunLoop$RestartCallback.signal(IORunLoop.scala:355)
root[ERROR] 	at cats.effect.internals.IORunLoop$RestartCallback.apply(IORunLoop.scala:376)
root[ERROR] 	at cats.effect.internals.IORunLoop$RestartCallback.apply(IORunLoop.scala:316)
root[ERROR] 	at cats.effect.internals.IORunLoop$.cats$effect$internals$IORunLoop$$loop(IORunLoop.scala:136)
root[ERROR] 	at cats.effect.internals.IORunLoop$RestartCallback.signal(IORunLoop.scala:355)
root[ERROR] 	at cats.effect.internals.IORunLoop$RestartCallback.apply(IORunLoop.scala:376)
root[ERROR] 	at cats.effect.internals.IORunLoop$RestartCallback.apply(IORunLoop.scala:316)
root[ERROR] 	at cats.effect.internals.IORunLoop$.cats$effect$internals$IORunLoop$$loop(IORunLoop.scala:136)
root[ERROR] 	at cats.effect.internals.IORunLoop$RestartCallback.signal(IORunLoop.scala:355)
root[ERROR] 	at cats.effect.internals.IORunLoop$RestartCallback.apply(IORunLoop.scala:376)
root[ERROR] 	at cats.effect.internals.IORunLoop$RestartCallback.apply(IORunLoop.scala:316)
root[ERROR] 	at cats.effect.internals.IOShift$Tick.run(IOShift.scala:36)
root[ERROR] 	at cats.effect.internals.PoolUtils$$anon$2$$anon$3.run(PoolUtils.scala:51)
root[ERROR] 	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
root[ERROR] 	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
root[ERROR] 	at java.lang.Thread.run(Thread.java:748)
```
Insert completion message parsing isn't going to work when table oids are enabled, so need to follow up here. Also see what happens with the statement causes multiple rows to be inserted, since they'll have different oids. May need to look at the PG source to figure this out.

See https://github.com/tpolecat/skunk/pull/72 for context.
I tried my best to create a `.scalafmt.conf` that best preserves the repo's current style. In roughly 15 places I explicitly turned off formatting with the `// format: off` comment.

My suggestion is that you checkout the branch locally, reset the last commit (the only one that actually applied scalafmt via the `sbt scalafmtAll` task), play around maybe a bit some more with the config until you are happy.

Like any good compromise, everyone is dissatisfied, but at least there is consistent formatting in the project.
- [x] bump kind projector version
- [x] introduce better-monadic-for
- [x] add links to github release pages for easy checking of versions