Makes `github.com/markbates/pkger` a link. Might save a click or two for folks on their way.
# Repro

1. Create a file `const.go`:

```
package main

const (
    path = "./templates"
)
```

2. Create a file `main.go`:

```
package main

import (
    "github.com/gobuffalo/packr/v2"
)

func main() {

    box := packr.New("templates", path)

    _ = box
}
```

3. Run `packr2`:

```
$ packr2
panic: runtime error: invalid memory address or nil pointer dereference
[signal SIGSEGV: segmentation violation code=0x1 addr=0x0 pc=0x136d931]

goroutine 1 [running]:
github.com/gobuffalo/packr/v2/jam/parser.(*Visitor).evalSelector.func1(0x1579b20, 0xc0001c25c0, 0xc0001a8690, 0xb, 0x0, 0x0)
	/Users/doug/Go/src/github.com/gobuffalo/packr/v2/jam/parser/visitor.go:191 +0x61
github.com/gobuffalo/packr/v2/jam/parser.(*Visitor).evalSelector(0xc0001ac640, 0xc0001ac700, 0xc0001c2580, 0xc0001a0a90, 0x48)
	/Users/doug/Go/src/github.com/gobuffalo/packr/v2/jam/parser/visitor.go:214 +0x4d6
github.com/gobuffalo/packr/v2/jam/parser.(*Visitor).evalArgs(0xc0001ac640, 0x1579720, 0xc0001ac700, 0x100b585, 0x1464a20)
	/Users/doug/Go/src/github.com/gobuffalo/packr/v2/jam/parser/visitor.go:161 +0x214
github.com/gobuffalo/packr/v2/jam/parser.(*Visitor).evalStmt(0xc0001ac640, 0x1579520, 0xc0001ac740, 0x0, 0x0)
	/Users/doug/Go/src/github.com/gobuffalo/packr/v2/jam/parser/visitor.go:106 +0xa7
github.com/gobuffalo/packr/v2/jam/parser.(*Visitor).eval(0xc0001ac640, 0x1574720, 0xc0001b3260, 0x0, 0xc00013f3c0)
	/Users/doug/Go/src/github.com/gobuffalo/packr/v2/jam/parser/visitor.go:85 +0xc0
github.com/gobuffalo/packr/v2/jam/parser.(*Visitor).Visit(0xc0001ac640, 0x1574720, 0xc0001b3260, 0x1570600, 0xc0001ac640)
	/Users/doug/Go/src/github.com/gobuffalo/packr/v2/jam/parser/visitor.go:61 +0x4c
go/ast.Walk(0x1570600, 0xc0001ac640, 0x1574720, 0xc0001b3260)
	/usr/local/Cellar/go/1.12.6/libexec/src/go/ast/walk.go:52 +0x66
go/ast.walkDeclList(0x1570600, 0xc0001ac640, 0xc0001c2680, 0x2, 0x2)
	/usr/local/Cellar/go/1.12.6/libexec/src/go/ast/walk.go:38 +0x9e
go/ast.Walk(0x1570600, 0xc0001ac640, 0x15746a0, 0xc0001b6500)
	/usr/local/Cellar/go/1.12.6/libexec/src/go/ast/walk.go:353 +0x2659
github.com/gobuffalo/packr/v2/jam/parser.(*Visitor).Run(0xc0001ac640, 0x18bf7c0, 0x14d22d3, 0x3, 0xc00013fa40, 0x2)
	/Users/doug/Go/src/github.com/gobuffalo/packr/v2/jam/parser/visitor.go:37 +0x173
github.com/gobuffalo/packr/v2/jam/parser.(*Parser).Run(0xc000165ac0, 0x1, 0x1, 0xc000165a80, 0xc000165ac0, 0x0)
	/Users/doug/Go/src/github.com/gobuffalo/packr/v2/jam/parser/parser.go:23 +0x455
github.com/gobuffalo/packr/v2/jam/store.Clean(0xc000024044, 0x33, 0x0, 0x0)
	/Users/doug/Go/src/github.com/gobuffalo/packr/v2/jam/store/clean.go:22 +0xf3
github.com/gobuffalo/packr/v2/jam.Clean(0xc00017a360, 0x2, 0x1, 0x0, 0x1)
	/Users/doug/Go/src/github.com/gobuffalo/packr/v2/jam/pack.go:108 +0xbb
github.com/gobuffalo/packr/v2/jam.Pack(0x0, 0x0, 0x0, 0xc00017a360, 0x1, 0x1, 0x0, 0x0, 0xc00013fd88)
	/Users/doug/Go/src/github.com/gobuffalo/packr/v2/jam/pack.go:33 +0xca
github.com/gobuffalo/packr/v2/packr2/cmd.glob..func6(0x189a640, 0x18bf7c0, 0x0, 0x0, 0x0, 0x0)
	/Users/doug/Go/src/github.com/gobuffalo/packr/v2/packr2/cmd/root.go:64 +0x158
github.com/spf13/cobra.(*Command).execute(0x189a640, 0xc0000201b0, 0x0, 0x0, 0x189a640, 0xc0000201b0)
	/Users/doug/Go/src/github.com/spf13/cobra/command.go:829 +0x465
github.com/spf13/cobra.(*Command).ExecuteC(0x189a640, 0x0, 0x0, 0x13ec637)
	/Users/doug/Go/src/github.com/spf13/cobra/command.go:917 +0x2fc
github.com/spf13/cobra.(*Command).Execute(...)
	/Users/doug/Go/src/github.com/spf13/cobra/command.go:867
github.com/gobuffalo/packr/v2/packr2/cmd.Execute()
	/Users/doug/Go/src/github.com/gobuffalo/packr/v2/packr2/cmd/root.go:71 +0x2e
main.main()
	/Users/doug/Go/src/github.com/gobuffalo/packr/v2/packr2/main.go:6 +0x20
```
Extract the only parts needed from envy. This will prevent the envy
package to load .env files on init and cause unexpected behavior.
Dear all , i am installing this lib 

https://github.com/ski7777/gomultiwa

and it depends on "packr2"
**PS: go version go1.13.4 linux/amd64**

```

$> AwesomeBuild
prepare-output
install-packr
build
>>> cd cmd/gomultiwa; GO111MODULE=on packr2

Error: go.mod is malformed
Usage:
  packr2 [flags]
  packr2 [command]

Available Commands:
  build       Wraps the go build command with packr
  clean       removes any *-packr.go files
  fix         will attempt to fix a application's API to match packr version v2.7.1
  help        Help about any command
  install     Don't. ru
  version     shows packr version

Flags:
  -h, --help               help for packr2
      --ignore-imports     when set to true packr won't resolve imports for boxes
      --legacy             uses the legacy resolution and packing system (assumes first arg || pwd for input path)
      --silent             silences all output
      --store-cmd string   sub command to use for packing
  -v, --verbose            enables verbose logging

Use "packr2 [command] --help" for more information about a command.
```

So what is the problem with " GO111MODULE=on packr2"
and what is the "go.mod is malformed" i can not find this file! but the report is not about missing file but *malformed*
Hi, I'm trying to serve the content of a folder over HTTP, which would be packed to binary using Packr. I was expecting there would be a file browser page when I hit the folder URL in browser, but I'm getting a 404 instead. Is this supported? And if yes, how can I make it happen? Thanks!

Please consider migrating your projects to github.com/markbates/pkger. It has an idiomatic API, minimal dependencies, a stronger test suite (tested directly against the std lib counterparts), transparent tooling, and more.

https://blog.gobuffalo.io/introducing-pkger-static-file-embedding-in-go-1ce76dc79c65
As you may or may not know, I recently announced a replace for Packr, github.com/markbates/pkger.

https://blog.gobuffalo.io/introducing-pkger-static-file-embedding-in-go-1ce76dc79c65

I believe that Pkger is the better solution for static file embedding. With that belief, I will stop being a maintainer of Packr.

I know that many projects use Packr, including Buffalo - which will be moving to Pkger, so I am looking for new maintainers to take over Packr and give it the love it so badly needs so those who still use Packr, aren't left out in the cold.

I highly encourage everyone to try Pkger and eventually migrate to it. 

Thank you.
Packr is unable to find boxes when using a string pointer as the `packr.NewBox()` path.

This code fails to create a box when `packr` is run:
```go
package main

import (
	"flag"
	"fmt"
	"os"

	"github.com/gobuffalo/packr/v2"
)

func main() {
    var configPath = flag.String("path", "./repack", "Relative path to the repack directory")
    flag.Parse()
    if *configPath == "" {
	    fmt.Println("You must provide the absolute path to your repack directory")
	    os.Exit(1)
    }   
    box := packr.NewBox(*configPath)
}
```

If the path to `box : = packr.NewBox()` is set to a string then everything works as expected.

i get error message: Error: go.mod is malformed
when i run packr2

go version go1.13.1 darwin/amd64

#errorPackr2