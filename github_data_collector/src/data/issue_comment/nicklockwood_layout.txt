Hi!
After upgrading my operating system to Catalina (macOS 10.15), my application that is using Layout gets stuck on the launch screen. I don't have any compilation errors or warnings and I don't get any crash at runtime. There is nothing new shown in debug logs as well. It worked fine in the previous macOS version (High Sierra 10.14). My other applications that are not using this Pod, don't get stuck on the launch screen. Has anyone a similar problem? 

- Layout version: 0.7
- Xcode 11.1
- Swift 5

The setStringValue:forExpression method on UIView can set any value from a string, just like Layout does when looking at the XML attributes for a View. This expands the possibilities of the setValue:forExpression, which needs the value to be of the right type.
Hi @nicklockwood !
Layout is really great at creating completely custom and dynamically server-side created GUIs.

However, I would like to alter the GUI appearance at runtime, based on a server-side implementation.
To do so, in my ViewController which hosts a mounted LayoutNode, I created a method that will be called after receiving a message from the network:

```
func setViewValue(tag: Int, valueName: String, newValue: String) {
	guard let baseView = self.view else {
		return
	}

	if let v = baseView.viewWithTag(tag) {
		try? v.setValue(newValue, forExpression:valueName)
	}
}
```

This already works flawlessly for String properties, like "title".
However, I would like to set any property type just as Layout does in XML.
I don't need to handle complicated expressions, just be able to specify a UIColor, false/true, geometry or number values...

It seems to me that the steps would be:

- search in the layoutNode "expressionTypes" dictionary for the right type
- create a LayoutExpression object with the expression name, value, type, and the layoutNode
- evaluate() the expression
- call setValueForExpression() with the result of the evaluation

However, many of these methods or even entire structs (LayoutExpression) are declared internal.
Is there a ready-made method for doing this? Am I missing something?
Or a major rework would be needed to do this? If yes, can you point me in the right direction? I can come back with a pull request once I have this finished.
Thanks!

We have a custom view and we overrode layoutSubviews() as recommended:

```
open override func layoutSubviews() {
        super.layoutSubviews()
        // Ensure layout is updated after screen rotation, etc
        self.layoutNode?.view.frame = self.bounds
        // Update frame to match layout
        self.frame.size = self.intrinsicContentSize
    }
```

and it would appear the app is stuck in some kind of infinite loop, our custom view layoutSubviews () and layout_layoutSubviews() being called forever and blocking the main thread

```
extension UIView {
    fileprivate static func _swizzle() {
        guard !viewSwizzled else { return }
        replace(#selector(layoutSubviews), of: self, with: #selector(layout_layoutSubviews))
        viewSwizzled = true
    }

    // Swizzled layoutSubviews implementation
    @objc private func layout_layoutSubviews() {
        layout_layoutSubviews()
        _layoutNode?.updateLayout()
    }
}
```
When adding arranged subviews to a Layout stack view programmatically, it doesn't update its height from the initial 0, so all the subviews get placed at (0, 0).
However, when I add the subviews to the stack view XML, they stack up correctly â€” they're probably calculating their children's heights in that case.

So does anyone know what I'm missing? 
I guess I want to confirm (before I spend more time banging my head against the rock) whether or not there's an obvious method to solve this problem, or if I need to look into calculating the heights myself.

Edit: I do need to mention that setting the stack view's frame to a new CGRect doesn't have any effect. Reading out its `.frame.height` value confirms that it's still at 0.0 after something like `        stackView?.frame = CGRect(x:0, y:0, width:300, height:600)`. 
All of this is happening in my UIViewController's `viewDidLoad()` method. 
Add capabiilty to load XML from Data in LayoutLoading protocol.
New pull request, tested against version 0.6.38
Everything else seems to work fine except when tapping away on focused UITextField, the app become unresponsive. It is reproducible using `SampleApp` project provided in the repository. 

#### Details:
Xcode 11 Beta 5 (11M382q)
iOS Simulator iPhone XR (iOS 13)

#### Steps to reproduce:

1. Simply add the UI component as such in Text.xml:
```xml
<UITextField
    top="SPACING"
    width="100%"
    height="40"
    backgroundColor="white"
/>
```
2. Run the `SampleApp` scheme.
3. Go to `Text` tab.
4. Tap on the textfield, type something and tap somewhere else to defocus.

#### Result:
App become unresponsive.

In console, it shows:
> atos[30314]: atos cannot examine process 30302 (SampleApp) for unknown reasons, even though it appears to exist; try running with `sudo`.
==30302==WARNING: Can't read from symbolizer at fd 11

However, in my own project it showed different error:
> [] nw_connection_receive_internal_block_invoke [C36] Receive reply failed with error "Operation canceled"

#### Thread info:
![image](https://user-images.githubusercontent.com/4436592/63217455-661eaa00-c179-11e9-81bb-d9a516341dc8.png)
Is there a way to achieve that?

When I'm trying something like this:

```swift
class MyTableViewCell: UITableViewCell, LayoutLoading {
```

I'm getting the following error: _Type 'MyTableViewCell' does not conform to protocol 'LayoutLoading'._

My original problem is that I want to use a library like **Kingfisher** or **SDWebImage** to load an image inside my cell. `layoutNode.setState` doesn't allow that, so it looks like I need an outlet, but I don't know how to create an outlet for a view in a Layout-based `UITableViewCell`.

I can create a custom view for my cell contents and then manually put it into a `UITableViewCell` subclass, but is there a better way to do it?
Could you please tell me how I can create a dynamic height collectionviewcell xml using this library?
