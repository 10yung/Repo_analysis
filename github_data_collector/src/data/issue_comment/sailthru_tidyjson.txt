Get this error during installation. How to fix it?

Error: package or namespace load failed for ‘tidyjson’ in get(Info[i, 1], envir = env):
 lazy-load database '/Library/Frameworks/R.framework/Versions/3.4/Resources/library/dplyr/R/dplyr.rdb' is corrupt
In addition: Warning message:
In get(Info[i, 1], envir = env) : internal error -3 in R_decompress1
any chance of getting a write.json function that works with the tidyjson objects?
It seems like `tidyjson` was removed from CRAN: https://cran.r-project.org/web/packages/tidyjson/
Any hints why that is the case?
Hi there, I use `tidyjson` in the `googleAnalyticsR` package, and this week people have reported an error in a function that uses `tidyjson`.  It turns out that those people who are using `dplyr` version `0.7.0` get the error:

https://github.com/MarkEdmondson1234/googleAnalyticsR/issues/87

For now a fix is to downgrade `dplyr` via `devtools::install_version("dplyr", version = "0.5.0")` but that is obviously not permanent :)
read_json works perfectly fine for local json files but I cannot get it to read URL file paths, I get the error:

Error in readChar(path, nchars = file.info(path)$size) : 
  invalid 'nchars' argument

I suspect the function might read a patch similar to this one:
https://github.com/rstudio/profvis/blob/master/R/file_contents.R

thanks!
Hi, first of all - thank you for the amazing package, it made my life so much simpler! I ended stuck with one simple use-case though - is there a way to convert DataFrame with JSON object to a simple DataFrame, so that Tidyr package is fully compatible? I couldn't use _spread()_ function in one of my solutions, and ended up unlisting the DataFrame with:

`final-data <- data.frame(lapply(data.frame(t(lapply(df_json, `[`))), unlist))`

Any tips / suggestions? Could I wrap _tidyr_ verbs just as _dplyr_ can be applied?
Hi folks, thanks for a great package!

I noticed one bug though: `spread_values` crashes when creating a column named `x`:
```
'{ x: 3}' %>% spread_values(x = jnumber("x"))
```
returns:
```
Error in UseMethod("as.tbl_json") : 
  no applicable method for 'as.tbl_json' applied to an object of class "function"
```
whereas 
```
'{ x: 3}' %>% spread_values(myx = jnumber("x"))
```
works seamlessly. 

Is there aw workaround, please?
Thanks!
I got ERROR: lazy loading failed for package 'tidyjson' while trying to install using the below command:

devtools::install_github("sailthru/tidyjson")

I'm using the Version 1.0.44 on Windows 8 Operating system


> devtools::install_github("sailthru/tidyjson")
Downloading GitHub repo sailthru/tidyjson@master
from URL https://api.github.com/repos/sailthru/tidyjson/zipball/master
Installing tidyjson
"C:/PROGRA~1/R/R-33~1.1/bin/x64/R" --no-site-file --no-environ --no-save --no-restore  \
  --quiet CMD INSTALL  \
  "C:/Users/<<user>>/AppData/Local/Temp/RtmpSMGPRF/devtools2f282899660b/sailthru-tidyjson-b0ce478"  \
  --library="C:/Users/<<user>>/Documents/R/win-library/3.3" --install-tests 

* installing *source* package 'tidyjson' ...
** R
** data
*** moving datasets to lazyload DB
** inst
** tests
** preparing package for lazy loading
Error in loadNamespace(i, c(lib.loc, .libPaths()), versionCheck = vI[[i]]) : 
  there is no package called 'DBI'
ERROR: lazy loading failed for package 'tidyjson'
* removing 'C:/Users/<<user>>/Documents/R/win-library/3.3/tidyjson'

In a nested json, it would be useful to be able to exit an object you have entered - a function that does the opposite of enter_object(). Or perhaps change the functionality of enter_object() so that full / relative paths are supported, for example "." would refer to the top level while ".." would refer to the previous level. Here is some code example:

```
library(tidyjson)
library(dplyr)


input <- '{
      "name": "Bob",
      "age": 30,
      "social": {
            "married": "yes",
            "kids": "no"
      },
      "work": {
            "title": "engineer",
            "salary": 5000
      } 
}'


output <- input %>% as.tbl_json() %>%
      spread_values(name = jstring("name"),
                    age = jnumber("age")) %>%
      enter_object("social") %>% 
      spread_values(married = jstring("married"),
                    kids = jstring("kids")) %>%
      #### I would need an exit_obeject() here
      enter_object("work") %>%
      spread_values(title = jstring("title"),
                    salary = jnumber("salary"))
```

This snippet of valid JSON results in "records are value not objects":

```
library(dplyr)
library(tidyjson)

json <- '
    [{"country":"us","city":"Portland","topics":[{"urlkey":"videogame","name":"Video Games","id":4471},{"urlkey":"board-games","name":"Board Games","id":19585},{"urlkey":"computer-programming","name":"Computer programming","id":48471},{"urlkey":"opensource","name":"Open Source","id":563}],"joined":1416349237000,"link":"http://www.meetup.com/members/156440062","bio":"Analytics engineer.  Primarily work in the Hadoop space.","lon":-122.65,"other_services":{},"name":"Aaron Wirick","visited":1443078098000,"self":{"common":{}},"id":156440062,"state":"OR","lat":45.56,"status":"active"}]
    '
    json %>% as.tbl_json %>% gather_keys
```

The issue is posted on Sack Overflow: http://stackoverflow.com/questions/34624172/what-does-records-are-values-not-objects-mean-in-tidyjson 

According to http://jsonlint.com/ the JSON is valid.  
