hi!
it's possible to create the jobs configuring some xml or json file?
thanks in advance!
```csharp
    public class TestRegistry : Registry
    {
        public TestRegistry()
        {
            Schedule(() =>
            {
                while (true)
                {
                    var log = NLog.LogManager.GetLogger("Logger1");
                    log.Info("sleeping 1...");
                    Thread.Sleep(100);
                }
            })
            .WithName("Infinite Task")
            .NonReentrant()
            .ToRunNow();
            Schedule(() =>
            {
                while (true)
                {
                    var log = NLog.LogManager.GetLogger("Logger2");
                    log.Info("sleeping 2...");
                    Thread.Sleep(100);
                }
            })
            .WithName("Infinite Task (Not Running)")
            .NonReentrant();
        }
    }
```

The above registry will start both jobs even when `ToRunNow()` is not called on the second schedule. Ideally, the Registry class should make `Schedules` public so that we can retrieve scheduels at a later time and run them manually. Alternatively, One-off jobs should also be added to `AllSchedules` (or another `AllJobs` property should be made available) so that each job can be registered and scheduled at a later day. That should only require adding the job to the collection above [this](https://github.com/fluentscheduler/FluentScheduler/blob/master/Library/JobManager.cs#L357) line.

My use-case right now it to create a task schedule - so I need to define the jobs now, and let the user schedule them at a later day. I don't want them to run at startup. For this purpose, registry is essentially useless. I'll be better off subscribing to the job events and manually calling add/remove job.
Trying to schedule a job which loads an ActiveX Objects I get:
ActiveX control [ActiveX Object] cannot be instantiated because the current thread is not in a single-threaded apartment

I found a similar question on S.O.:

https://stackoverflow.com/questions/55374569/how-use-fluentscheduler-with-activex-in-single-threaded-apartment

Any advice on this?
This is my log for:

var ejecucion = DateTime.Now.AddMinutes(1);
var registro = new Registry();
registro.Schedule(() =>
{
    var lineas = new string[] { DateTime.Now.ToString("dd/MM/yyyy - HH:mm:ss:fff") };    
    File.AppendAllLines(@"\logs\log.txt", lineas);
})
.ToRunOnceAt(ejecucion.Hour, ejecucion.Minute)
.AndEvery(1).Minutes();

24/10/2019 - 12:30:00:121
24/10/2019 - 12:31:00:123
24/10/2019 - 12:32:00:126
24/10/2019 - 12:33:00:128
24/10/2019 - 12:34:00:130
24/10/2019 - 12:35:00:148
24/10/2019 - 12:36:00:150
24/10/2019 - 12:37:00:152
24/10/2019 - 12:38:00:154
24/10/2019 - 12:39:00:156
24/10/2019 - 12:40:00:158
24/10/2019 - 12:41:00:170
24/10/2019 - 12:42:00:180
24/10/2019 - 12:43:00:182
24/10/2019 - 12:44:00:184
24/10/2019 - 12:45:00:186
24/10/2019 - 12:46:00:188
24/10/2019 - 12:47:00:190
24/10/2019 - 12:48:00:192
24/10/2019 - 12:49:00:207
24/10/2019 - 12:50:00:209
24/10/2019 - 12:51:00:211
24/10/2019 - 12:52:00:213
24/10/2019 - 12:53:00:217
24/10/2019 - 12:54:00:229
24/10/2019 - 12:55:00:231
24/10/2019 - 12:56:00:233
24/10/2019 - 12:57:00:235
24/10/2019 - 12:58:00:245
24/10/2019 - 12:59:00:247
24/10/2019 - 13:00:00:267
24/10/2019 - 13:01:00:269
24/10/2019 - 13:02:00:271
24/10/2019 - 13:03:00:289
24/10/2019 - 13:04:00:291

There are some time acomulated, in the future they will be hh:mm:00:999 and the next time hh:mm+1:01:012 (12 for example but can be arbitrary seconds)

It apear to add 1 minute and 1 second not only 1 minute that AndEvery(1).Minutes(); says.
There are something that I cand configure for fix that issue?
Hello, 

First of all, great project!!   :)
Maybe I missunderstand the UnitTests but I don't see a way to do something like this:

schedule.ToRunEvery(1).Weeks().On(DayOfWeek.Monday).Between(new TimeSpan(10, 00, 00), new TimeSpan(11, 00, 00)).Every(new TimeSpan(00, 05, 00);

So basically, I would like to run:
- every week
- on Monday (and some other days of the week)
- between 10 AM and 11 AM
- every 5 minutes

Is it possible with the current implementation?
In readme.md I have seen that `IJobFactory` is depricated. How to use DI for the library? 
There might be an issue with the leap year, using this code my birthday dates are scheduled one day late. Here for example the ouput says:

Schedule: BirthdaySchedule2 NextRun: Mon 10 08 20 21:22:00
Schedule: BirthdaySchedule1 NextRun: Mon 10 08 20 21:23:00

 But the next Schedule should be on the 11 of August or am i missing something?

Reproducible code:

```
            JobManager.Start();

            Action<Schedule> mySchedule1;
            Action<Schedule> mySchedule2;

            DateTime birthday1 = new DateTime(2019, 8, 11, 21, 14, 00);
            int repeatAmount = 1;
            mySchedule1 = x => x.NonReentrant().WithName("BirthdaySchedule1").ToRunOnceAt(birthday1).AndEvery(repeatAmount).Years().On(birthday1.DayOfYear).At(21, 23);

            mySchedule2 = x => x.NonReentrant().WithName("BirthdaySchedule2").ToRunEvery(1).Years().On(birthday1.DayOfYear).At(21, 22);       

            JobManager.AddJob(new DefaultJob(JobType.Eyes), mySchedule1);
            JobManager.AddJob(new DefaultJob(JobType.Eyes), mySchedule2);

            Console.WriteLine("showing shedules:");
            IEnumerable<Schedule> jobSchedules = JobManager.AllSchedules;
            foreach (Schedule schedule in jobSchedules)
            {
                Console.WriteLine($"Schedule: {schedule.Name} NextRun: {schedule.NextRun}");
            }
            Console.ReadKey();
```

How to cehck is job running or not? I have the following code in the `Startup.cs` class for initializing my job: 

    var registry = new Registry();
    registry.Schedule<SendPushesJob>().ToRunNow().AndEvery(60).Seconds();
    JobManager.Initialize(registry);

and the following code in my controller: 
    
    public IActionResult StopSender()
    {
        JobManager.Stop();
        
        return RedirectToAction("Index");
    }
    
    public IActionResult StartSender()
    {
        JobManager.Start();

        return RedirectToAction("Index");
    }

I would like to show on the view is my job started or not. How I can do this? I can't see the suitable method. 

  [1]: https://github.com/fluentscheduler/FluentScheduler
Async is the state of the art way of doing things and previous (current?) version of FluentScheduler doesn't handle async natively (and it seems it won't #117). I propose following changes to the redesign branch to address that:

1. Schedule should accept Actions returning Task. This allows native async jobs to be run/created easily.

```
var schedule = new Schedule(
    async () => await Console.Out.WriteLineAsync("5 minutes just passed."),
    run => run.Every(5).Minutes()
);
```

2. `Schedule` should accept Actions with CancellationToken as an argument. This allows jobs to be notified when scheduler is stopped and end work sooner if possible.

```
var schedule = new Schedule(
    async (CancellationToken cancellationToken) =>
    {

        for(var i = 0; i < 100; i++)
        {
            await Console.Out.WriteLineAsync("Im doing something");
            await Task.Delay(1000);
            if (cancellationToken.IsCancellationRequested)
            {
                // Schedule cancelled
                return;
            }
        }
    },
    run => run.Every(5).Minutes()
);
```

Wants to show human-readable jobs schedule like it does Windows Task Scheduler

![image](https://user-images.githubusercontent.com/1174911/65023656-57780e00-d944-11e9-9240-8123bfe06dcb.png)
