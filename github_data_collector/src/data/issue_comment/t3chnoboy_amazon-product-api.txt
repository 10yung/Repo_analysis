INside the src folder of a Create React App I have created a file called Amazon with following code.



```
import amazon from "amazon-product-api";

const client = amazon.createClient({
  awsId: "",
  awsSecret: "",
  awsTag: ""
});

export const amazonItemSearch = async () => {
  const data = await client.itemSearch({
    director: "Quentin Tarantino",
    actor: "Samuel L. Jackson",
    searchIndex: "DVD",
    audienceRating: "R",
    responseGroup: "ItemAttributes,Offers,Images"
  });

  return data;
};
```


However, I am running into an error saying
Access to fetch at 'https://webservices.amazon.com/ 
 'http://localhost:3000' has been blocked by CORS policy: No 'Access-Control-Allow-Origin' header is present on the requested resource. If an opaque response serves your needs, set the request's mode to 'no-cors' to fetch the resource with CORS disabled.

How can i use this library to make calls on the client side? I have tried to proxy the URL https://webservices.amazon.com/ without luck
Will it be compatible with v5 of the Amazon Product Advertising API?
Hi everyone,

since 23rd january 2019 there is a limit on who can you use the Amazon Product API, see here:
https://docs.aws.amazon.com/de_de/AWSECommerceService/latest/DG/TroubleshootingApplications.html#efficiency-guidelines

Amazon explains that accounts which did not generate any revenue within the last 30 days will be revoked and won't be able to use the API anymore. In this case a RequestThrottled error will occur by requesting the API. 

Has someone a solution for this? I tried to regenerate my API token/secret but without success. It seems that people will have to use SiteStripe until they gain access to the Product Advertisement API.
var client = amazon.createClient({
  awsId: "aws ID",
  awsSecret: "aws Secret",
  awsTag: "aws Tag"
});
In createClient  Credentials, I want to pass an additional parameter Domain to change the default domain/Locale - http://docs.aws.amazon.com/AWSECommerceService/latest/DG/Locales.html 
Hello all,
I am trying to know if a product could be shipped to a specific country,
let's say we want to check if a product we got in call itemlookup/itemsearch is can ship to "Costa Rica" for the example.
How can I check it?

Thanks,
Shlomi
I would like to know how we can do that , as I need a specific image size to be returned , and Amazon allows that.
Hi all,
I am using "ITEMLOOKUP" call, and I am trying to get (or generate) a product page URL of the cheapest product.
The "Technical Details" link is not good because the price there is not always the cheapest(not equal to the "LowestNewPrice" from the API response ) and the "MoreOffersUrl" is an offer-listing URL.

Do anyone know how can I get it?
 
I tried to ctrl+F the readme for "locale" to find that term and thought that maybe this library didn't support switching locales. It was only after reading #80 that I realized `domain` was the parameter to set. I thought explicitly adding "locale" to the docs might save someone time in the future.
`{"$":{"xmlns":"http://ecs.amazonaws.com/doc/2013-08-01/"},"Error":[{"Code":["RequestExpired"],"Message":["Request has expired. Timestamp date is 2018-01-16T16:14:43.573Z."]}],"RequestID":["d8ee0968-8a27-4ce4-8933-55bc06ad6d7b"]}`

When running code within a loop - if it goes over 15 minutes all subsequent requests fail with this message, even if you reinitialise the client.
I'm trying to test the code in the documentation but I'm receiving this error:

`No 'Access-Control-Allow-Origin' header is present on the requested resource. Origin 'http://localhost:3000' is therefore not allowed access.`

I'm using this in a React app, here is the code for the function from the component:

   ```
 addAmazonGift(){
        const client = amazon.createClient({
          awsId: "AKIAIMKFRHPPTEIMU2YA",
          awsSecret: "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",
          awsTag: "jtp709-20"
        });
        client.itemLookup({
          idType: 'UPC',
          itemId: '635753490879',
          responseGroup: 'ItemAttributes,Offers,Images'
        }, function(err, results, response) {
          if (err) {
            console.log(err);
          } else {
            console.log(results);
          }
        });
    }
```