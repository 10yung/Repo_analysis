the precise in wuhan as bellow（11 meters）：
![image](https://user-images.githubusercontent.com/17794023/50547966-8861c700-0c7f-11e9-912a-7f499b6c6e16.png)

it's possible to solve it?

or, do you know any better method to calculate more precise?


Commits cd7a6a4 killed the 2-iter exact algo. This commit brings it back.
dunno if it works

这个项目创立之初，只有我自己的工作中用到的转换实现。后来感谢大家贡献代码，有了各种语言的实现。但是目前看上去，单一repo的形式有不少问题：

 - 我对其他语言不熟悉，比如matlab，java等。我无力维护这些语言的patch是否合理。
 - 我个人并不能及时响应所有语言的同步
 - 有占有其他人工作的嫌疑

我想将这个repo转化为单独的project，其中有一个doc repo，来定义所有实现需要的接口，以及相关算法和使用到的参数。同时这个doc会维护一个版本号，其他语言在实现时，需要指明对应的版本号。每个版本号发布后会对应一个tag。每个语言的实现单独一个repo，使用tag作为版本号。

我不知道各位贡献者对这个方案的想法如何。目前看得到的弊端是，对现有代码可能有影响（可以保留现有repo，但在readme里提示新的使用方法），star会分散到每个语言的repo里（我无所谓）。
应该改为：e = 6378245.0;
看了下引用的算法网页，e的值也为6378245.0;
Google 的南海数据基本没有路，大部分都是从卫星直接出来的岛的形状之类的。百度的数据有偏移和没有一样烂（试试三沙市）。

我现在私下用的是北纬 17.75455，另有一个用来避免大规模误伤的Google偏移多边形近似界限用在[这里](https://github.com/Artoria2e5/PRCoords/blob/master/js/insane_is_in_china.js)。（最后裁下去都不好意思叫”China“了……）
首先我犯了个错误：球面估计距离的时候应该用平均半径 6371e3，而不是 6378e3 的赤道半径。

其次 eviltransform 在 gcj 中提出半径参数，与距离共享的做法是严重错误的：
* gcj 使用的是一个该死的 SZ-42 椭球体
* gcj 的 A 参数是赤道半径

