"assign" typo correction

## 🐛 Bug Report

If you pass window.location as the draft to `produce`, IE11 throws an error. The error is essentially the same one described in this [core-js issue](https://github.com/zloirock/core-js/issues/601#issuecomment-514768457).

In short, IE11's native `Object.getOwnPropertyDescriptor` can't work with environment exotic objects which is the cause for this bug.

You can easily reproduce the issue by pasting this in your IE11 Dev Tools and hitting enter.

```
Object.getOwnPropertyDescriptor(window.location, 'host')
```

## Link to repro

https://github.com/kdelmonte/immer-ie11-window-location-bug

## To Reproduce

* Clone [the repo](https://github.com/kdelmonte/immer-ie11-window-location-bug)
* Install the [serve package](https://www.npmjs.com/package/serve)
* Run the following command `yarn build && serve -s build`
* Navigate to http://localhost:5000 using IE 11 and see how the app does not load
* Navigate to http://localhost:5000 using Chrome/FF and see how the app loads fine

To verify that the app loads fine in IE 11 without this bug:

* Comment out the lines 9-11 in the `src/index.js` file 
* Run `yarn build && serve -s build` once again

## Observed behavior

If you pass window.location as the draft to `produce`, IE11 throws an error.

## Expected behavior

`produce` should be able to successfully create a draft from any object in any of the supported browsers.

## Environment

* Latest version of Windows 10
* Latest version of IE11
* Immer 5.2.0

- **Immer version:**
- [x] Occurs with `setUseProxies(true)`
- [x] Occurs with `setUseProxies(false)` (ES5 only)

i have a immature idea
if we have a large obj , such as
```
var obj = {
a1:1,
a2:2,
a3:3,
...
a1000000:1000000
}
```
now, immer looks like it's going to copy the object all key again, like{...obj}, it's will slow
how about just like this:
var objProto = {\__proto__:obj}
then, we can access property like objProto.a1,
and we can modify property like objProto.a1 = 2,( and we Not modify origin data obj )

_Originally posted by @zhangenming in https://github.com/immerjs/immer/issues/462#issuecomment-554613735_

----

Thoughts: might safe time and space! 

Might mess up iteration since a lot of properties won't be "own". 

Could be an experimental opt in option?
## 🐛 Bug Report

I have three observations about potential issues with Immer's bundle size and tree-shakeability:

- Immer went from 4.5K min+gz in 4.x, to around 6K min+gz in v5.x.  v5.2.0 is a slight improvement over 5.1.0, but still bigger than 4.x.  See https://bundlephobia.com/result?p=immer@5.2.0 for size comparisons.  I assume this is due to the extra code for Set/Map handling.
- Redux Toolkit depends on Immer, and we've noted that several of our dependencies prevent RTK from being correctly tree-shakeable.  Someone ran a Webpack report to get indications of why Webpack couldn't tree-shake RTK, and it report that Immer has a reference to `process` inside, which forces Webpack to bail out of tree-shaking.  Reference: https://github.com/reduxjs/redux-toolkit/issues/78#issuecomment-453734877 .  The `process` reference appears to be part of a minification check, at https://github.com/immerjs/immer/blob/bd3b47be4cceef77dd84106f73c8a881f8ae4246/src/immer.ts#L39 .  This does show up in `dist/immer.js` in the published package.
- Immer does not appear to have a `sideEffects: false` flag in its `package.json`, which Webpack (and other bundlers?) need to fully calculate shakeability: https://webpack.js.org/guides/tree-shaking/#mark-the-file-as-side-effect-free .

I don't know how much improvement you'd get by adding `sideEffects: false` and removing the `process` reference, but it might be worth looking into.

I also realize that Immer's internals may not be entirely shakeable anyway, similar to how React is kind of all-or-nothing.  Still, given that v5.x is bigger than v4.x, it'd be nice to see if it can be brought back down.

## Link to repro

N/A, given that this is not a runtime issue.  See linked items in the "report" section for details.

## To Reproduce

Use Immer as currently published.

## Observed behavior

Immer's size in v5 is larger than v4, and does not appear to be shakeable.

## Expected behavior

Webpack would report that Immer is shakeable, and _hopefully_ the final included size would be a bit smaller.

## Environment

We only accept bug reports against the latest Immer version.

- **Immer version:** v5.2.0

## 🐛 Bug Report

I'm looking into immer.js as inspiration to make modifying immutable data structures in C++ less painful. While studying the source code, I encountered a confusing naming inconsistency:

https://github.com/immerjs/immer/blob/b55ef46d7a880d07d1830d14fc5868fef63ae342/src/immer.ts#L74-L93

The docstring for produce() mentions a "recipe function". The `@param` mentions a `producer`. The actual function parameter name is `recipe?`. 

https://immerjs.github.io/immer/docs/produce

The Immer documentation calls the parameter `producer`.

Just wanted to point this out; I don't know if it'll get fixed or not. I'm not actually use immer.js since I don't write JavaScript, but I really like the approach used here (less painful than transients, and I can understand the API unlike lenses). I am thinking of porting this library to C++ or maybe Rust (though with setters since I can't intercept assignment).
## 🐛 Bug Report

```
import produce from "immer";

const a = { highlight: true };


const next1 = produce(a, draft => {
  draft.highlight = false;
  draft.highlight = true;
});

console.log(a === next1);// false, should be true
```
CodeSandbox  https://codesandbox.io/s/todos-useapi-and-immer-cof4w
Currently produceWithPatches does not support async recipes being passed in. 

Patches are undefined whilst the resulting state is a promise.

See: https://codesandbox.io/s/immer-sandbox-qlynl?expanddevtools=1&fontsize=14&hidenavigation=1&module=%2Fsrc%2Findex.ts&moduleview=1&theme=dark
## 🐛 Bug Report

A case where calling `produceWithPatches` produces a correct next state, but incorrect patches.

## To Reproduce

```
import { produceWithPatches, applyPatches } from "immer";

const item = { id: 1 };

const state = [item];

const [nextState, patches] = produceWithPatches(state, draft => {
  draft[0].id = 2;
  draft[1] = item;
});

const final = applyPatches(state, patches);

console.log("Next state:", nextState);
console.log("Patches:", patches);
console.log("Final:", final);
```

## Expected behavior

I would expect `nextState` to deep equal `final`.  `nextState` is correct while the result from applying patches is incorrect.  The second operation in the patch is incorrect:

```
[ 
  { op: 'replace', path: [ 0, 'id' ], value: 2 },
  { op: 'add', path: [ 0 ], value: { id: 2 } } 
]
```
Notice how the value of patch 2 is the new value of draft[0], and it is applying it at draft[0].

## Link to repro

[Code Sandbox](https://codesandbox.io/s/immer-sandbox-cq9td)

## Environment

- Immer v5.0.0
- [X] Occurs with `setUseProxies(true)`
- [X] Occurs with `setUseProxies(false)` (ES5 only)

## 🚀 Feature Proposal

Given the following state tree:

```typescript
const state = {
   prop1: 'hello',
   prop2: 42,
   deepNestedTree: {
      'someKey1': { /* ANOTHER_BIG_OBJECT_HERE */ },
      'someKey2': { /* ANOTHER_BIG_OBJECT_HERE */ },
      'someKey3': { /* ANOTHER_BIG_OBJECT_HERE */ },
      'someKey4': { /* ANOTHER_BIG_OBJECT_HERE */ },
   }
}
```

I would like to be able to tell Immer to **not** scan `deepNestedTree` and each of it's properties and then each properties of those for finalizing, since I know that I never mutate them but rather just create the whole tree from scratch myself (which comes from an API call). 
So in essence, `deepNestedTree` is a read-only property and it's content is never mutated.

## Motivation

Idea here is that `deepNestedTree` could contain hundreds of thousands of records and those records could be quite wide themselves. It takes a lot of time to traverse that tree and for my use-case it is pointless, as it's never mutated.

## Example

According to this https://github.com/immerjs/immer/blob/master/src/immer.js#L312 I can just freeze `state.deepNestedTree` but is that the intended way to do it? Could we perhapse get away with a function that adds a unique symbol to the object to let Immer know it doesn't need to finalize it?

Something like:

```typescript
import {ignoreObject} from 'immer';

produce(state, draft => {
   draft.myBigTree = generateBigTree()
   ignoreObject(Draft.myBigTree)
}, undefined)

```
