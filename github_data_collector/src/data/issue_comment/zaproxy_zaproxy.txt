Update version to 2.10.0-SNAPSHOT.
Remove binary incompatible suppressions no longer needed.
We've had a few reports of users encountering "no implementor" when trying to import OpenAPI definitions without installing the OpenAPI addon. We should at least ensure it's installed on the docker images (check if it's available and install if not?).

Perhaps we should also consider making it part of the normal bundle? (GA/Weekly)
Hi
I see little scope of enhancement in Wappalyzer Output

The URLs which is set in context are -

1. http://www.example.com
2. https://www.example2.com
3. www.example3.com
4. testingexmple.com

But the Wappalyzer API displays results with custom URLs naming system

1. It removes https or http from context URL
2. it adds port numbers 443, 80 to the URL
3. Sequence of input is also gets changed in **listall api** call (specially when HTTP URL is provided in context but OWASP detects its HTTPS version as well - so Wappalyzer displays results for both HTTP and HTTPS version so it alters the sequence)

So in programming, it becomes difficult to match the input context URL vs Wappalyzer output results

So i request can you please use the same URL (which is set in context ) for Wappalyzer output as well else keeping more generic will help to serve the purpose of matching input context URL vs Wappalyzer output
**Describe the bug**
After doing scans and collecting info on site, it detected 'Application Error Disclosure' (6).  Upon expanding and clicking on a link (javascript file, can't tell how large), it's instantly freezes and nothing else can be done (it may recover after a few minutes wait).  In other parts of app, I've seen the "Very large response body (xxx bytes) - switch views..." warning, but not in this situation.  I have to do a 'killall java' to exit the app and restart.  

On occasion, it will recover after a few minutes, but the app moves slow so I just restart it. When it does recover, the response is unintelligible (see screenshot) and navigating around is slow. 

**To Reproduce**
Steps to reproduce the behavior:
1. Have JS file (size?) in Alert, Application Error Disclosure 
2. Click on link.
3. App freezes instantly or moves slow.

**Expected behavior**
To see the Request and Response data of the alert.

**Screenshots**
##Click on the 'GET:https://xx/build/js/app.js?v=...
![AED-js](https://user-images.githubusercontent.com/57641147/72003916-3db64b80-31ff-11ea-904c-4da4c5f01c55.jpg)
##Screen freezes, switching desktop and back shows gray app
![goesGray](https://user-images.githubusercontent.com/57641147/72003925-4149d280-31ff-11ea-8989-6269bf75827c.PNG)
##If it does recover, Response window looks like
![if-it-does-recover](https://user-images.githubusercontent.com/57641147/72004073-7f46f680-31ff-11ea-9f6e-623b349c56ab.PNG)


**Software versions**
 - ZAP: 2.8.1
 - OS: BlackArch 5.4.6 x86_64
 - Java: openjdk 13.0.1
 - Hardware:  Happens on both VirtualBox and HD install on laptop.

**Errors from the zap.log file**
Will update, don't have currently.

**Additional context**
Add any other context about the problem here.

The Insecure Component passive scan rule should be retired/deprecated.

It was a good idea, however the db that makes it isn't maintained which is rendering the component less and less useful.

Dev refs:

- https://github.com/zaproxy/zap-extensions/blob/master/addOns/pscanrulesAlpha/src/main/java/org/zaproxy/zap/extension/pscanrulesAlpha/InsecureComponentScanner.java (And supporting classes in the same directory.)
- https://github.com/zaproxy/zap-extensions/blob/master/addOns/pscanrulesAlpha/src/main/zapHomeFiles/vulnerabilities.db
- Related Messages.properties and help content.
- https://raw.githubusercontent.com/zaproxy/zaproxy/develop/docs/scanners.md `10046   Insecure Component`

It would be beneficial if the output of the report could hold data similar to the output displayed on the terminal where one can view the test that have passed.

I am integrating such scan using the docker container to target internal sites and would like to have a better report to include in the ci/cd process as part of the approval gates.

Having the passed test visible would enable the test result to have a higher pass percentage as at the moment this is always 100% fail.
**Describe the bug**
I use a lot the requester tab to play with the parameters. Usually,  I need to execute an active scan using the last request sent it for the requester tab, but it isn't possible execute this action. 

I have to send the request to request editor and after sent it, I execute the active scan.

**To Reproduce**
Steps to reproduce the behavior:
1. Select a request and send it to the requester tab.
2. Go to the requester tab and change some value and send it.
3. In the history tab, select the recent request sent by the requester tab and select the option of the attack/active scan in the right click menu.
4. The previous action should show the active scanner panel, but don't.

**Expected behavior**
The active scanner panel should show in all the requests selected in the history tab.

**Software versions**
 - ZAP Proxy weekly edition. D-2019-12-23.
I decided to start putting this together, hopefully that wasn't a mistake ü§∑‚Äç‚ôÇ 

Merging/finishing can wait for 2.10.0 I guess... Really this is just the gutts so that we have something to talk about. The handling of potentially multiple AlertMetadataRecord(s) everywhere that AlertRecord is used is probably the next step.

![image](https://user-images.githubusercontent.com/7570458/71548063-a6d3ce80-2976-11ea-8c3a-6e8849a8d125.png)

**Is your feature request related to a problem? Please describe.**
I'm constantly spending time copying and pasting 4 times for each request (request head, body, response header, body) to a text file, because "save raw" saves only request or only response, and at the same time it can't be used while selected multiple items in History, Search, Active Scan and Fuzzer

**Describe the solution you'd like**
While I'm at History, Search, Active Scan or Fuzzer:
1. I multiselect several requests
2. Right click on selected item
3. Click Save Raw (multiple)
4. Select file name
5. Full requests and responses are exported to 1 txt file.
or
1. I multiselect several requests
2. Right click on selected item
3. Click Run application
4. Configure my application to take %ids% as commandline parameter containing comma separated list of selected items.
5. My script is called and fetches requests and writes them to a .txt file.


**Describe alternatives you've considered**
1. Not sure if a zest|js script can be created, not sure if it can write to files.
2. I've tried creating a pyhon script to acess the ZAP API, but multiselecting requests disables all "Run application items" and there is no parameter to include multiple request ids.

**Additional context**
![java_2019-12-23_10-50-55](https://user-images.githubusercontent.com/29713984/71344027-8e2c7880-2572-11ea-8786-2a550fbf47b7.png)

"Relative paths to session file are resolved against the "session" directory located in ZAP's home directory (default or specified with -dir option)."

This needs to change to fit the behaviour of all other software. 
Relative paths are usually resolved against the current folder not a hidden arbitrary folder that the user is not properly informed about.

The current behaviour is not intuitive, thus frustrating 