So to do a "normal" diff I would get my two different `*object.Tree` instances and use `object.DiffTree`. However with staged changes I'm unsure of how to get a tree, if it's possible at all. It seems that `*index.Index` only provides a list of files changed, with no way to get a tree. Is it possible to retrieve a diff/patch describing the changes which have been added in the workspace compared to HEAD (or some other arbitrary commit)?
I can't clone from private repository. I found out that go-git checking in method `createHeadIfCorrectReference` if `reference.Hash() == *a.Head`
but my repo not contain reference that commit is equal to repository HEAD commit. In `&git.CloneOptions` I only use Auth and URL. My output when doing `git remote show origin` on repo clonned by git clone:

> * remote origin
  Fetch URL: **
  Push  URL: **
  HEAD branch: (unknown)
  Remote branch:
    master tracked
  Local branch configured for 'git pull':
    master merges with remote master
  Local ref configured for 'git push':
    master pushes to master (up to date)

Can someone help me with this? The problem is with my `&git.CloneOptions` or with method that I'm pushing to remote?
Can you give me example how to remove tag (lightweight or annotated) in local and remote? I already tried to find it in this repository but still not found :(
Related to https://github.com/src-d/go-git/issues/847
Before this change, when adding an "executable" file with `worktree.Add()`, something really strange happened: the git index file entry associated with that file had its SHA1 updated but **not** its size; which caused the file to appear both as "staged" and "unstaged" when running `git status`:
```
$ git status
On branch xxx
Your branch is ahead of 'origin/r54+x' by 1 commit.
  (use "git push" to publish your local commits)

Changes to be committed:
  (use "git restore --staged <file>..." to unstage)
        modified:   ci/integrity_checks.py <-------------------------- HERE

Changes not staged for commit:
  (use "git add <file>..." to update what will be committed)
  (use "git restore <file>..." to discard changes in working directory)
        modified:   ci/integrity_checks.py <-------------------------- AND HERE
```

However, when running `git diff`, nothing shows up (ie. the fact that this file appears as unstaged is just an artifact of the file length not matching the one registered on the index)

I **guess** (but I could be wrong) that the original intent of the line I changed was to avoid updating the size when dealing with a folder or a pipe or something like that... but for some reason, `IsRegular()` was used instead of `IsFile()`.

If there is some hidden reason to use `IsRegular()` that I'm not aware of, please simply discard this pull request.
I'm trying to open a local repo and pull it. I want to checkout a specific branch identified by the var `branch`. I'm doing the following: 


```
dir, err := os.Getwd()
	if err != nil {
		logrus.Errorf("error getting current directory: %v", err)
	}

	currentUser, err := user.Current()
	if err != nil {
		logrus.Errorf("error getting current user: %v", err)
	}

	sshAuth, err := ssh.NewPublicKeysFromFile("git", currentUser.HomeDir+"/.ssh/id_rsa", "")
	if err != nil {
		logrus.Errorf("error getting public key: %v", err)
	}

	r, err := git.PlainOpenWithOptions(dir, &git.PlainOpenOptions{DetectDotGit: true})
	if err != nil {
		logrus.Errorf("error opening repo: %v", err)
	}
	w, err := r.Worktree()
	if err != nil {
		logrus.Errorf("error getting worktree: %v", err)
	}
	err = w.Checkout(&git.CheckoutOptions{
		Branch: plumbing.ReferenceName(fmt.Sprintf("refs/heads/%s", branch)),
	})
	if err != nil {
		logrus.Errorf("error checking out repo: %v", err)
	}

	err = w.Pull(&git.PullOptions{ReferenceName: plumbing.ReferenceName(fmt.Sprintf("refs/heads/%s", branch)), Auth: sshAuth})
	if err != nil {
		logrus.Errorf("error pulling repo: %v", err)
	}
```

I keep getting error`non-fast-forward update` when trying to pull. From a debug session, I saw that in https://github.com/src-d/go-git/blob/master/worktree.go#L89 `master` is actually returned and this causes issues when determining if we are in a fast forward situation. 

Can someone help debug this issue and/or suggest how to proceed? 
Signed-off-by: lxjhk <lxjpub@gmail.com>

#### Issue Addressed

Git blame takes a long time to run. A natural optimization is to run git blame on multiple files concurrently. However, the existing implementation for `idxfile` uses Go's standard map data type which will cause "concurrent read and write to a map" run-time panic because of race conditions.

#### Ref Issues

https://github.com/zricethezav/gitleaks/issues/124#issue-373459034
https://github.com/src-d/go-git/issues/457#issue-239967754

#### Changes Made

Changed `map[int64]plumbing.Hash	` to `sync.Map`
Not all the tests pass yet but this makes go-git usable on Plan 9.
Please merge this after https://github.com/src-d/go-billy/pull/78.

Fixes #756

Signed-off-by: Fazlul Shahriar <fshahriar@gmail.com>
Hi there,

I removed files by os.RemoveAll and then add, but that's didn't work, the code as belows:
       
    //remove local files
    os.RemoveAll(path) 

    // add files, prepare commit and push
	repo, err := git.PlainOpen(repository)
	if err != nil {
		log.Logger.Debug("fail to init repository", zap.Error(err))
		return err
	}
	wt, _:= repo.Worktree()
	_, err = wt.Add(".")
	if err != nil {
		return err
	}

What's wrong with that code, any suggestions?

It is possible to set multiple `remote.origin.pushurl` settings in Git. I don't see a way to get it from this library. Related to #1266 in that `pushInsteadOf` should also be supported here.