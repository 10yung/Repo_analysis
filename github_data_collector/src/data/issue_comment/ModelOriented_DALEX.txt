As in the title, right now it is impossible to use residual function. It should have another parameter called `predict_function` that is passed along with other. 
R
and
python

But these packages shall be installed from pip

Wondering if DALEX will play nicely with sparklyr or if we can get this kind of information out of models & data in spark? 
Add warning that explainer with default yhat will take only one column as significant
in `ranger` one can directly as for classification for numerical target variable (like `titanic_imputed`)
`explainer_keras_dalex <- DALEX::explain(model_keras,
                                        data = as.matrix(train_input_matrix),
                                        y = as.numeric(train_output_matrix),
                                        label = "Keras Model",
                                        predict_function = function(m,x) keras_predict(m, x, verbose=2))

vi_keras_dalex <- variable_importance(explainer_keras_dalex,
                                      #type = "difference",
                                      loss_function = loss_root_mean_square,
                                      n_sample = -1)

`

The above code was working fine on a few projects. Seems after an upgrade to some packages now I am getting errors and warning. Not able to figure out where is the issue. What has changed?

> 
> > Preparation of a new explainer is initiated
>   -> model label       :  Keras Model 
>   -> data              :  12456  rows  379  cols 
>   -> target variable   :  12456  values 
>   -> predict function  :  function(m, x) keras_predict(m, x, verbose = 2) 
>   -> predicted values  :  the predict_function returns an error when executed (WARNING) 
>   -> residual function :  difference between y and yhat (default)
>   -> residuals         :  the residual_function returns an error when executed (WARNING) 
> A new explainer has been created!
> > use type = "raw" for raw plotting
> > vi_keras_dalex <- variable_importance(explainer_keras_dalex,
>                                        #type = "difference",
>                                       loss_function = loss_root_mean_square,
>                                      n_sample = -1)
> Error in modules$np$int32(x) : attempt to apply non-function
> In addition: Warning message:
This package lacks basic test coverage for new functionalities.
In explain.R are some not described input errors. If you pass them to explain(), you will get the nondescriptive error:
* Check if `data` is null while weights are not. 
* Check if `data` is not a data frame while `y` is provided.
* Chech if `data` is null while `y` is provided.
As suggested in #71. 
Add the `weights` filed to the `explain()` function. 
Make it clear that not all explanations support weights and it is up to the explanation to decide how weights are being used.