This PR has code for making Windows generate numpad button presses. This would have to be specified in a different way from the regular pyautogui.press('1') function calls. An interesting idea.

https://github.com/asweigart/pyautogui/pull/299/files
The locateOnScreen() function takes a "region" argument where you can have the function search just a sub-region of the screen instead of the entire screen. It'd be nice if there was a simple way to search, say, just the tophalf or the left half of the screen without having to calculate the region coordinates yourself.

This idea comes from https://github.com/Sergioenc28
when I import pywinauto, it always shows error. Please help me. Thanks in advance. 
![Capture](https://user-images.githubusercontent.com/58300689/71656488-5d202500-2d76-11ea-929a-e5eead2af1e6.PNG)

### Pre:
On a Belgian AZERTY keyboard, keys like `! $ & < : ; ( )` are non-shift keys. 

### Problem:
```
In [1]: import pyautogui

In [2]: pyautogui.write('"')

In [3]: 3
```

3 would be the result with a shift key pressed.

### Expected:
```
...
in[3]: "
```

### Cause:

`__init__.py`'s `isShiftCharacter()` checks if the characters are in a hardcoded string: 

```
return character.isupper() or character in '~!@#$%^&*()_+{}|:"<>?'
```

### Solution:
Starting from the original keys (I haven't checked keys that aren't in the string), this would be a better set of Shift-enabled keys for Belgian AZERTY: `~@#%^*_+{}|>?`

Allthough it would be cleaner if we could somehow test the current keyboard layout and set the string of shift-characters that way.

The screenshot docs contain the phrase

> The arguments can either be a

Can be a what?
I'm using locateOnScreen function in while loop to verify for the presence of image.
When image is not present this function is taking 4-7 seconds.


Need a way to optimize this as I'm trying to use this to calculate time taken to load particular page.
A single module can run by filling in the relative path but The whole project will report an error

`pyautogui.locateCenterOnScreen(r'template\RunMore.png', grayscale=True)`

> OSError: Failed to read template\RunMore.png because file is missing, has improper permissions, or is an unsupported or invalid format

> You need to change the image to an absolute path
` pyautogui.locateCenterOnScreen(r'C:\Users\CT\Desktop\Test\template\RunMore.png', grayscale=True)`

I am using python 3.6 and pyautogui version 0.9.41

It is working fine everywhere else, but when I have a IE browser open it locates images successfully and I am able to print the locations to set it, but then I use the `click` function it does nothing. But then doesn't treat it as an error. 

I have tested without using images to click for example a random location on the screen like so;

```
pyautogui.click(100,400)
```
and it does nothing, but when I minimise the browser and run the program I see that it performs the click.

I am not sure what is going on
There is a bug when using the click() method which results in clicking 3 times. 

By looking at the code base there is a condition which calls the _multiclick function:
https://github.com/asweigart/pyautogui/blob/737192e18878aa81d922b592c99e32073aee0f54/pyautogui/__init__.py#L993-L994

Bellow is the implementation of _multiclick function:
https://github.com/asweigart/pyautogui/blob/737192e18878aa81d922b592c99e32073aee0f54/pyautogui/_pyautogui_osx.py#L390-L420
