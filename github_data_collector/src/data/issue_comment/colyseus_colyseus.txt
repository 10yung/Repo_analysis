Is there a case of reconnection
My setup:
-typescript server and typescript client as 2 different projects, importing a common third project that contains shared/common stuff, especially the data model and the Schema, and exposes them as es6 modules

Even with a simple Schema such as:
```
export class TestSchema extends Schema {
    @type("number")
    whatever = 2;
}

```
When a client joins the server, i get the error on the client:
```
JOIN ERROR { Error: SchemaSerializer error. See: https://docs.colyseus.io/migrating/0.10/#new-default-serializer
    at new MatchMakeError (/home/stefano/project-x/project-x-webclient/node_modules/colyseus.js/lib/Client.js:58:28)
    at Client.<anonymous> (/home/stefano/project-x/project-x-webclient/node_modules/colyseus.js/lib/Client.js:182:35)
    at step (/home/stefano/project-x/project-x-webclient/node_modules/colyseus.js/lib/Client.js:45:23)
    at Object.next (/home/stefano/project-x/project-x-webclient/node_modules/colyseus.js/lib/Client.js:26:53)
    at fulfilled (/home/stefano/project-x/project-x-webclient/node_modules/colyseus.js/lib/Client.js:17:58)
    at <anonymous>
    at process._tickDomainCallback (internal/process/next_tick.js:228:7) code: 4213 }
```

and on the server:
```
Error: SchemaSerializer error. See: https://docs.colyseus.io/migrating/0.10/#new-default-serializer
    at SchemaSerializer.reset (/home/stefano/project-x/project-x-server/node_modules/colyseus/lib/serializer/SchemaSerializer.js:13:19)
    at GameRoom.setState (/home/stefano/project-x/project-x-server/node_modules/colyseus/lib/Room.js:108:26)
    at GameRoom.onCreate (/home/stefano/project-x/project-x-server/src/GameRoom.ts:12:14)
    at /home/stefano/project-x/project-x-server/node_modules/colyseus/lib/MatchMaker.js:214:28
    at Generator.next (<anonymous>)
    at /home/stefano/project-x/project-x-server/node_modules/colyseus/lib/MatchMaker.js:7:71
    at new Promise (<anonymous>)
    at __awaiter (/home/stefano/project-x/project-x-server/node_modules/colyseus/lib/MatchMaker.js:3:12)
    at createRoom (/home/stefano/project-x/project-x-server/node_modules/colyseus/lib/MatchMaker.js:200:12)
    at Object.<anonymous> (/home/stefano/project-x/project-x-server/node_modules/colyseus/lib/MatchMaker.js:44:30)
```


If the TestSchema class is defined in the server project, no error is encountered, it only triggers when I import it from the common project.
The error fails on a instanceof check, I guess because the server and the common project have 2 different versions of the Schema class and therefore that check fails.
I have the use-case where re-connection is going to be disabled by some game rules, so being based only by a timeout is not effective in this case.

e.g. disable reconnection after 2 turns in a turn-based game.

**Something like this:**

```typescript
const reconnectionToken = this.allowReconnection(client);
await reconnectionToken.resolve();

// later during game logic:
reconnectionToken.cancel();
```
Hi, I am currently wondering if it would be possible to return a promise for the .listen function. I am trying to catch errors using a try catch and await but the process keeps exiting. 

- I am creating the error by running 2 servers on the same machine.


Unity and Defold (HTML5 build) have problems when connecting into a room without any state defined. It should not be required to have a state to connect into the room in these environments.
We encountered a suspecious memory leak when using this framework, the `reservedSeatTimeouts` of `Room` seems not release in some unkown reasons. The cpu% will grow slowly from 1 to much higher. We inspected the heap dump and found the `reservedSeatTimeouts` of room stored so many `Timeout` instances. See below screenshot: ![leak screenshot](https://user-images.githubusercontent.com/7383028/69899190-e15d4200-139d-11ea-96b0-2ee228206853.png)
It seems in [this function](https://github.com/colyseus/colyseus/blob/5a8cbd16b8652e39ffbd29a6167b052f2c7fd025/src/Room.ts#L474) the `this.reservedSeatTimeouts` should delete the `reservedSeatTimeout`(`delete this.reservedSeatTimeouts[sessionId]`) when seats reservaltion expired.
Hi,

I added an instanceCount variable in RegisteredHandler to store the number of instances created for a given room. Then I could check if a new room exceeds the maximum instance number defined in instanceLimit.
When I fetch the metadata from the server.
The room has existed for a long time and there is only one player in the room.
But metadata.clients shows -2.
I think it's a bug.

![image](https://user-images.githubusercontent.com/15982894/67961592-de542200-fc36-11e9-96a7-b232661c8367.png)

Colyseus version is 0.11.20  and using MongoDB

When the network connection time out.  It showed the error below.
How can I update the time out config??
 
![image](https://user-images.githubusercontent.com/15982894/67762858-55e05080-fa81-11e9-9dc0-0087659c995d.png)

Colyseus server version: 0.11.20
Node.js version: v10.15.1
## Context
Given the newer Matchmaking system, currently using a `local` or `mongoose` (MongoDB) driver, this presents problems when a `local` driver is not applicable to scalable solutions, and the singular MongoDB solution presents more persistent-storage operations management (Especially at larger scales)

Since Redis has a lack of querying support, I propose a MySQL Driver for the Colyseus Gameserver.

I'll start work on this in a week or so - at the present, it won't support transactions (As the MongoDB supports, but is not currently used by Colyseus), however since transactional queries _are_ supported by MySQL, this is still a potential future feature of the driver.

For now, the driver will serve a (for now, personal vendatta) against having to manage 3 different operational database structures for the sake of scalability (Redis for presence, MySQL for persistent storage, MongoDB for Room discovery)

This issue will track my progress.