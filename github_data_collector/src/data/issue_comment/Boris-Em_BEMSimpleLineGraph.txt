
Dear Boris,

I'd like to know is it possible to make an empty plots for some points?
Also, I'd like to know can I colorise the same line plot. (E.g. starting with red colour then the same line will change it's colour to black colour or clear colour)?
Like here in photo

![graph](https://user-images.githubusercontent.com/33868040/49329840-0f8f2280-f58e-11e8-830c-b55b1574ed52.png)
### Summary
* This pull request upgrades BEMSimpleLineGraph to Xcode 9.4.1 and fixes issues.

### Fixes Issues
This pull request fixes the following issues:  
- memory leak issues
- deprecated implementations in Tests issues
- storyboard warnings issues
- missing 1024x1024 AppIcon issue.

### Changes
The following changes are included in this pull request:  
- BEMSimpleLineGraphView.m+.h
- Two *.storyboard's
* CustomizationTests.m and SimpleLineChartTests.m
* project.pbxproj and *.xcscheme's to Xcode 9.4.1 recommended settings

Any swift version for swift 4.0?
### Summary
Enhancement: We can now set the text color for the popup label

### Changes
The following changes are included in this pull request:  
- Header and body file change
I integrated the line graph and its working great in Objective-C, but the problem I'm having is with spacing on the `xAxis`. If you see the attached screenshot, the first label and second one, and second last and last one are not evenly spaced.

Below is the function which I use to setup the graph:

    - (void)setupGraphs {
          mindfulGraph.enableXAxisLabel = YES;
          mindfulGraph.alwaysDisplayDots = YES;
          mindfulGraph.colorXaxisLabel = [UIColor lightGrayColor];
          mindfulGraph.colorBackgroundXaxis = [UIColor clearColor];
          mindfulGraph.enableYAxisLabel = YES;
          mindfulGraph.colorYaxisLabel = [UIColor lightGrayColor];
          mindfulGraph.colorBackgroundYaxis = [UIColor clearColor];
          mindfulGraph.enableReferenceYAxisLines = YES;
          mindfulGraph.colorReferenceLines = [UIColor lightGrayColor];
          mindfulGraph.enableLeftReferenceAxisFrameLine = YES;
          mindfulGraph.enableReferenceAxisFrame = YES;

          mindfulGraph.enablePopUpReport = YES;
    }

![0-neu-d2-47c91b1ae3cd8513e6bb9c835e1a9580](https://cloud.githubusercontent.com/assets/19590659/26446037/2374b8a2-4160-11e7-94aa-cc30d55bd323.jpg)

First of all, thank you for creating such awesome graph library. It's really easy to use and customize.

I have xAxisLabel issue while using this library. They were not showing at all at first integration.
I did some debugging, and I found the reason.

In `BEMSimpleLineGraphView.m` file, you created `drawXAsis` method.
This was creating xAxisLabels and adding to graph view.

Btw, they were just removed right after added, by the following code in this method.

```objc
for (UILabel *l in overlapLabels) {
    [l removeFromSuperview];
}
```

The reason was, `fullyContainsLabel` was being set NO.
```objc
BOOL fullyContainsLabel = CGRectContainsRect(self.bounds, label.frame);
```

From debugging, what I found is,

```
self.bounds.size = (280, 210)
label.frame = ({some value}, 194.66000003, size (width = {some value}, height = 15.34000000))
```
This means, the bottom edge of label goes beyond the height of graph view.

Personally, I think, it makes more sense if we show label as long as it intersects with graph view, because we need to show the label even if it is showing partially.

So, I changed the line to

```objc
BOOL intersectsLabel = CGRectIntersectsRect(self.bounds, label.frame);
```

And it worked very well.

Also, I was having special requirements that, I need to show the y-axis values in formatted string like `$20K`, and dot-values being `$18,237` which were not possible by just using `formattedString`.

So, I defined some delegate methods and used it. If you don't mind, I may fork your repo and send PR.

Please let me know your thoughts.
### Summary
Pan/Zoom and Variable X Axis; many other changes

### Fixes Issues
This pull request fixes the following issues:  
 - #296, #286, #282, #278, #271, #269, #261 
 - Handles very large numbers of points (realistically up to thousands) 
 - Restore API back to NSInteger (for Swift) and resolved internal changes 
 - Fix test for white/alpha to handle extended Grey space 
 - Animation without "display dots during" left dots off previously 
 - Remove prev reference lines if axis turned off 
 - Supports bezier curves even when line isn't being drawn 
 - Top/Bottom reference lines were outside box 
 - Fix bug with `touchLineInputColor` (doesn't change after initial setting) 
 - `averageLine` color picked up from line if not set  
 - NoDataLabel color should not default from Line (which defaults to white, same as background) 
 - If label isn't used after initially being created, ensure it's removed from view 
 - Avoid possible infinite loop if delegate gives a zero incrementIndex for x-axis 
 - Fix one-pixel gap between y-axis and graph 
 - Remove spurious NSLogs 
 -  If x-axis background is defaulting to `colorBottom`, then also use `alphaBottom` to match; same for y-axis and `colorTop`. 
 - If neither X nor Y reference lines, set line's `enableRefLines` to `NO` (although default, might have been previously `YES`) 
 - One point is handled by main routines rather than special case 
 - Simplified handling of zero points 
 - Many `BEMNull` related bugs: 
   - If null data and interpolation on, then extrapolate for beginning/ending nulls. 
   - Ensure all BEMNulls do not crash 
   - When Bezier off and Interpolate nulls off, properly draws line segments now 
   - If interpolation off, then bezier line should be interrupted by gaps (but not top/bottom). 
   - If data changes to null value, ensure corresponding Dot isn't left on chart

### Changes
The following changes are included in this pull request:  
 - Pan/Zoom
 - Variable X Axis
 - Cubic Bezier Algorithm
 - Many others (see below for details)
 - New Features:
   - Optional user-scaling pan/zoom with double-tap to restore
   - Variable x-axis
     - Adds new delegates: 
       - `lineGraph:locationForPointAtIndex:` 
       - `lineGraph:labelOnXAxisForLocation:` 
       - `numberOfXAxisLabelsOnLineGraph:maxXValueForLineGraph:` 
       - `minXValueForLineGraph`
   - Ability to take screen shot bigger (or smaller) than screen
   - New delegate method to specify y-axis labels
   - Axis at top option
   - Cubic Bezier algorithm for smoother lines
   - Implemented numberOfXAxisLabelsOnLineGraph for indexed xAxis 
   - TestBed usable on iPhone and Split View
   - NumberOfPoints entry in TestBed
   - Activity display in TestBed to test didFinish
   - Upward-compatible API

### Notes
- [x] This pull request makes breaking changes, and if so, involves the following:  
  - [ ] Public API availability  
  - [x] Internal functionality or behavior  
    - All global vars changed to internal properties  
    - All MutableArrays to Arrays  
    - Use Views to group dots and labels over BEMLine.  
    - Set size of major views at beginning, so all calcs based on those views  
    - Moves getting data and calculations of points to new getData method  
- [x] I have run and ensured that this pull request passes all XCTests  
I've just updated an old project to Swift 3.0 and had to swap to the "feature" branch to get the benefits of #214 to allow my project to build. To expand upon that fix though, I'd love to see a minor enhancement.

When it comes to Swift, uses of `NSUInteger` instead of just `NSInteger` for delegate calls such as:

```
- (NSUInteger)numberOfPointsInLineGraph:(BEMSimpleLineGraphView *)graph;
```
and
```
- (CGFloat)lineGraph:(BEMSimpleLineGraphView *)graph valueForPointAtIndex:(NSUInteger)index;
```

can cause issues in regards to casting.

These translate to `UInt` (as you'd expect), but because Swift is such a strict language, using them in a simple way, requires casting between `UInt` and `Int` (and vice versa).

For example:
```
func numberOfPoints(inLineGraph graph: BEMSimpleLineGraphView) -> UInt {
    return myArray.count
}
```
The above will show a build error unless you specifically cast `myArray.count` in `Int(myArray.count)`.
```
func numberOfPoints(inLineGraph graph: BEMSimpleLineGraphView) -> UInt {
    return Int(myArray.count)
}
```

Likewise:
```
func lineGraph(_ graph: BEMSimpleLineGraphView, valueForPointAt index: UInt) -> CGFloat {
    
    let myItem = myArray[index]
    // Code using the item
}
```

This also fails unless you add an extra line of `let index = Int(index)` to make sure you're passing a `Int` to the array subscript.
```
func lineGraph(_ graph: BEMSimpleLineGraphView, valueForPointAt index: UInt) -> CGFloat {
    
    let index = Int(index)
    let myItem = myArray[index]
    // Code using the item
}
```

---

I understand why `NSUInteger` has been used, as an array is unlikely to have an index < 0, but this sadly does cause extra code issues for Swift users (minimal, I agree, but still). Also, this is going away from the standards that delegate calls in `UITableViewDataSource` and `UICollectionViewDataSource` use, where just `NSInteger` is used.

I'd love to hear what you think, and allow this to be considered, as it would help a lot with some unnecessary code for Swift users, with minimal impact for Objective-C users. 
The chart does not show long X-Axis when there are more than three points. It seems that this only occurs on iPhone 6 and above.

| iPhone 5 | iPhone 6 | iPhone 7 |
|:-:|:-:|:-:|
|  ![iPhone 5 Screenshot](https://cloud.githubusercontent.com/assets/24234795/23961208/d5a5b824-096f-11e7-99e8-4f742a242625.PNG) | ![iPhone 6 Screenshot](https://cloud.githubusercontent.com/assets/24234795/23961219/e0a5efe6-096f-11e7-8186-2bc80ee5ad69.PNG)  |  ![iPhone 7 Screenshot](https://cloud.githubusercontent.com/assets/24234795/23961233/e8b077e2-096f-11e7-9c0a-2608ae9ab29c.png) |