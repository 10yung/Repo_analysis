The build fails on FreeBSD:
http://beefy10.nyi.freebsd.org/data/113i386-default/523384/logs/helib-1.0.0.log
Nayna Jain
Linux/x86

If my understanding is right, CKKS scheme replaces bootstrapping with rescaling. And the idea of rescaling is that we cannot predict value of L perfectly at the start itself. In such case, if at runtime L seems to be not sufficient, we can try to rescale.

However, I couldn't find any example on how to do rescale ? what function to call and what value is the recommended one ?

Can someone help with this please ?

Thanks & Regards,
      - Nayna


There are overflows of the LONG variable belowLVL.
Furhtermore if no ciphertext is below the level the function fails as well.

Implemented Binary Squaring. It improves the performance of the operation in comparison with multiplication and it reduces the used capacity by one ciphertext multiplication depth.
**Your Contact:** 
**Your environment (OS/HW):ubuntu 18.04
**Detailed Description:After compiling helib, I don't know how to run the program in the `examples`. Execute `cmake .` in `BGV_general_example`, and display:

```
CMake Error at CMakeLists.txt:13 (find_package):
  By not providing "Findhelib.cmake" in CMAKE_MODULE_PATH this project has
  asked CMake to find a package configuration file provided by "helib", but
  CMake did not find one.

  Could not find a package configuration file provided by "helib" (requested
  version 1.0.0) with any of the following names:

    helibConfig.cmake
    helib-config.cmake

  Add the installation prefix of "helib" to CMAKE_PREFIX_PATH or set
  "helib_DIR" to a directory containing one of the above files.  If "helib"
  provides a separate development package or SDK, be sure it has been
  installed.


-- Configuring incomplete, errors occurred!
```
Thank you.


**Your Contact:**
**Your environment (OS/HW):** ubuntu-16.04.6 on VirtualBox-6.0.10
**Detailed Description:**

Hi, I'm new to HElib. I copied “helib_example.cpp” in “example” folder to “src” folder and successfully compiled it with

$ make helib_example_x

in “src” folder. Then I copied the 6 files in “src/aes” folder to “src” folder and compiled it with

$ make Test_AES_x

But I got the following error: 

homAES.cpp: In constructor ‘HomAES::HomAES(const FHEcontext&)’:
homAES.cpp:101:83: error: no matching function for call to ‘EncryptedArrayDerived<PA_GF2>::EncryptedArrayDerived(const FHEcontext&, const NTL::GF2X&, const PAlgebraMod&, DoubleCRT&)’
 ES::HomAES(const FHEcontext& context):ea2(context,aesPoly,context.alMod,affVec)

Do I run this example in a wrong way?
Thanks!

**Your Contact:** Flavio
**Your environment (OS/HW):** 
**Detailed Description:**
Create a INSTALL_Experiemntal.md file to capture install instructions for the OS/HW that are not part of the standard build&test process.
**miha.ken.19@gmail.com** 
**Your environment (OS/HW): OS ubuntu 18.04**


Hello, I am new to HElib and sorry if I am missing very basic of implementation in HELib.

I would like to basically **set coefficient on plaintext polynomial and take an inner product by Forward Backward packing**. 
As is done in **method2** in (https://mshcruz.wordpress.com/2016/09/27/scalar-product-using-helib/).
I put my **entire code below** which I am trying to work on , so please take a look,
description is as follows.

If let u1 and u2 be encryptedarray,
u1 = [0,1] = 0 + 1x
u2 = [0,0,....,1] = 0 + 0x + ..... + 0x^2378 + 1*x^2379
under m found to be 2381 by findM method in HElib.

then if I multiply u1 and u2, 
I expected u3 = u1*u2 = x^2380 = -1, so,
u3 = [-1 0 0 .... 0]

however, I got instead
u3 = [-1 -1 -1 .... -1]


This means Ring is set as Z[x]/(1x^2379 + 1x^2378 + .... + 1) instead of 
Z[x]/(1 + x^2380).

Is there any  way to set the ring as Z[x]/(1 + x^2380) instead of Z[x]/(1x^2379 + 1x^2378 + .... + 1) ?

or should I dive into NTL library for this??


If you could any comment or suggestion, I would appreciate it.
Thank you in advance,

Sincerely to HElib developpers.


```
#include <iostream>
#include <cstddef>
#include <tuple>
#include <sys/time.h>
#include "FHE.h"
#include "EncryptedArray.h"
#include <NTL/ZZX.h>
#include <NTL/ZZ.h>
#include <vector>

using namespace std;
using namespace NTL;


int main(){

//==========================================================================
//==========================================================================
// Encryption Parameters
// Finding m... Found m = 2381
// in this setting, -1 is mapped to 100002
// -2 is 100001, -3 is 100000 etc

    long p = 100003;                   // Plaintext base [default=2], should be a prime number
    long r = 1;                  // L = 60;
    long L = 60;
    long c = 2;                   // Number of columns in key-switching matrix [default=2]
    long w = 64;                  // Hamming weight of secret key
    long d = 1;                   // Degree of the field extension [default=1]
    long k = 80;                  // Security parameter [default=80]
    long s = 0;



  cout << "Finding m... " << flush;
  long m = FindM(k, L, c, p, d, s, 0);
  cout << "Found m = " << m << endl;   

  cout << "Initializing context... " << std::flush;
	FHEcontext* context = new FHEcontext(m,p,r); 	                  // Initialize context
	buildModChain(*context, L, c);                      // Modify the context, adding primes to the modulus chain
	cout << "OK!" << endl;

  cout << "Generating keys... " << flush;
	FHESecKey* sk = new FHESecKey(*context);
    FHEPubKey* pk = sk;

	sk->GenSecKey(w);                                   // Actually generate a secret key with Hamming weight
	addSome1DMatrices(*sk);                             // Extra information for relinearization
	cout << "OK!" << endl;     


//==========================================================================
//==========================================================================
// Prepare encrypted array for FB packing 
// number of slots = 2380

  // Get the number of slot (phi(m))
  const EncryptedArray& ea = *(context->ea);
  long nslots = ea.size();
  std::cout << "Number of slots: " << nslots << std::endl;

  ZZX u1, u2;
	u1.SetLength(nslots);
    u2.SetLength(nslots);
    cout << "something" << endl;



//==========================================================================
//==========================================================================
// Set coefficient of plaintext polynomial
// for example, u1 = [0,1] = 0 + 1x
//              u2 = [0,0,....,1] = 0 + 0x + ..... + 0x^2378 + 1*x^2379

// so basically we want when we multiply u1 and u2
// u1*u2 = x^2380 = -1, then I can use hayashi special
// however, actually this gives me u1*u2 = -1x^2379 -1x^2378 - ... - -1
// this means HELib uses the ring which is 
// Z[x]/(1x^2379 + 1x^2378 + .... + 1) instead of 
// Z[x]/(1 + x^2380)

// do you have any opinion or comment on this???

    SetCoeff(u1,0, 0);
    SetCoeff(u1,1, 1);

    SetCoeff(u2,nslots-1, 1);

    cout << u1 << endl;
    cout << u2 << endl;

	Ctxt c1(*pk);
    Ctxt c2(*pk);

	pk->Encrypt(c1, u1);    
    pk->Encrypt(c2, u2);


    cout << "============================================" << endl;
    cout << "============================================" << endl;
    cout << "c1 and c2 before multiplication"   << endl;
    ZZX dec1, dec2, dec3;
    sk->Decrypt(dec1, c1);
    sk->Decrypt(dec2, c2);


//==========================================================================
//==========================================================================
// dec1 = [0 1 0 ...... 0]
// dec2 = [0 0 0 ...... 1]
// so, we want 
// u1*u2 = [-1 0 ...... 0]
// however, we instead get
// u1*u2 = [-1 -1 ...... -1]

    cout << dec1 << endl;  
    cout << dec2 << endl;  

    cout << "============================================" << endl;
    cout << "============================================" << endl;
    cout << "c1 and c2 after multiplication"   << endl;
    c1*=c2;
    sk->Decrypt(dec3, c1);
    cout << dec3 << endl;

}
```


 

Hi,

I have noticed that the sample test which demonstrated applying the same or different transformations to slots has been removed in newer versions of HElib, although the key functions still remain (applyLinPoly1/applyLinPolyMany). 

I am wondering is there now some more efficient way of applying transformations to slots to explain removal of this important demonstration?

Thank you.
Hi, i am confused about  bootstrping. In Test_bootstrping.cpp , it choose the first set of parameters( smallest m). The result is good, but Securty level < 0. So i choose latter set of parameters to make Securty level > 64, However ,the result is far from good. Could someone tell me how to make bootstrpe working, THX!! 