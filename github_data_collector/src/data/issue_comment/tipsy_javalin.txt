You added support to upload forms with file and text in #124 but there's currently no way to properly document it with the OpenApiAnnotations. According to [the swagger doc](https://swagger.io/docs/specification/describing-request-body/file-upload/) the schema for the `request-body` of a form with binary and primitive content should look like this:
```
"content": {
    "multipart/form-data": {
        "schema": {
            "type": "object",
            "properties": {
                "myFile": {
                    "type": "string",
                    "format": "binary"
                },
                "someText": {
                    "type": "string"
                }
            }
        }
    }
}
```
But the `@OpenApi` annotation has two separate parameters for `fileUploads` (which get turned into `multipart/form-data`) and `formParams` (which get turned into `application/x-www-form-urlencoded` content) - so the schema ends up with a requests body that accepts either the file upload or the form params but not both.
In the Swagger UI you have to choose which of the two requests types you want to send:
![2020-01-19 11_28_41-My Swagger Documentation](https://user-images.githubusercontent.com/14292619/72680182-f5c0df80-3aae-11ea-9c77-9013cf486e35.png)
![2020-01-19 11_28_51-My Swagger Documentation](https://user-images.githubusercontent.com/14292619/72680184-f5c0df80-3aae-11ea-9d27-fed33355c1c1.png)


```
...
[ivy:retrieve] 	  -- artifact org.webjars.npm#js-tokens;[3.0.0,4),[4.0.0,5)!js-tokens.jar:
[ivy:retrieve] 	  https://repo1.maven.org/maven2/org/webjars/npm/js-tokens/[3.0.0,4),[4.0.0,5)/js-tokens-[3.0.0,4),[4.0.0,5).jar
[ivy:retrieve] 		::::::::::::::::::::::::::::::::::::::::::::::
[ivy:retrieve] 		::          UNRESOLVED DEPENDENCIES         ::
[ivy:retrieve] 		::::::::::::::::::::::::::::::::::::::::::::::
[ivy:retrieve] 		:: org.webjars.npm#js-tokens;[3.0.0,4),[4.0.0,5): not found
[ivy:retrieve] 		::::::::::::::::::::::::::::::::::::::::::::::
[ivy:retrieve]
[ivy:retrieve] :: USE VERBOSE OR DEBUG MESSAGE LEVEL FOR MORE DETAILS
```

While setting up Javalin as a depedency on my Apache Ant project using Ivy, I am unable to retrieve the jar specified above.

```
<ivy-module version="2.0">
    <info organisation="org.apache" module="my-project"/>
    <dependencies>
        <dependency org="io.javalin" name="javalin" rev="3.7.0" />
    </dependencies>
</ivy-module>
```

With the target step as follows:

```
    <target name="resolve" description="Retrieve dependencies with Ivy.">
        <ivy:retrieve/>
    </target>
```

Downgrading to Javalin 2.8.0 seems to work however.
PR to resolve #820, as I mentioned in issue, this solution does not feel like correct one. I am not sure if the code I wrote should be in `DocumentedContent.kt`. And is it okay to use directly kotlin.reflect API and java.lang.reflect API? I see usage of io.github.classgraph to scan annotations. Tips are welcome.

Java:
```
public class User {
    public String name;
    public String email;
    ...
    @OpenApiExample(name = "example with some name")
    private static User example() {
        return new User("some name", "some email");
    }
}
```
Kotlin:
```
class User(val name: String, val email: String) {
    companion object {
        @OpenApiExample(name = "example with some name")
        fun example() = User("some name", "some email")
    }
}
```

Not very fluent in Kotlin so this may be syntax error, but I think you get the idea.
This is a brackets based parser as described in #667. 

Currently the new parser is not supported in the OpenApi DSL. 
I added a small abstraction layer to the path parser creation. The interface only contains the public methods for now.

# Implementation details

- Brackets are forbidden as part of a parameter name but wildcards are allowed
- Brackets are counted for each segment separately to provide an early way out
- Wildcards cannot be directly adjacent to a path parameter. Otherwise `/*{hi}` would behave differently from `/{hi}*`. In the second case the path parameter would only accept a single character.

I am unsure on how to adapt the OpenApiDsl to the new bracket parser. Might extend the interface with the internal variables required. Some parts would need to be adopted to deal with the new MultipleSegments class in PathSegment2.

I look forward to feedback. 
Hi !

I'm new in Javalin and Swagger, these are really great projects, thank you for your work. I am asking for help today because I need to do something that I can't handle by myself...

I have a Javalin server in kotlin and I use annotations to get my documentation generated and rendered by swagger-ui. 


>     @OpenApi(
>             summary = "Get meter",
>             description = "A great description",
>             tags = [Tags.meter],
>             pathParams = [OpenApiParam(name = "meter", description = "A meter")],
>             responses = [
>                 OpenApiResponse(status = 200, content = [OpenApiContent(from = Meter::class)]),
>                 OpenApiResponse(status = 404, description = "Unknown meter")
>             ]
>     )
>     override fun handle(context : Context)
>     {
>         do something...
>     }

Let say that Meter is a data class (I simplified it for the exemple) that encapsulate a String value : 
> data class Meter(val sn: String)

In this case, the documentation will contain a schema for Meter, as an object composed of a field sn that is a String. What I would like is to override the type definition of this class to specify that it's a String. For instance, with an annotation or anything that could allow me to do so. 

Am I just blind and unable to search online or there is no way to do what I would like ?

In advance, many thanks for your attention.

Wendy
I have code for an API endpoint, and I'd like the generated ReDoc documentation to contain an example response that I build. How do I do that? 

So something like:

```java
OpenApiBuilder.document().json("200", MyClass.class, openApiParam -> {
  openApiParam.description("OK.");
  openApiParam.example(new MyClass(3, "def"));
});
```
Some people want to run Javalin on Android, or other small things.. Could be fun to create a minimal version of Javalin for that ðŸ¤”

Prompted by https://github.com/tipsy/javalin/issues/775

Example: http://www.adam-bien.com/roller/abien/entry/a_built_in_java_httpserver
Currently Javalin is just one big module. I'm mostly comfortable with this, but some plugins are getting a little too chunky. I made an issue for moving OpenAPI to a separate repo (https://github.com/tipsy/javalin/issues/746), but I think a separate module might be more appropriate.  There's also this pr for a test module (https://github.com/tipsy/javalin/pull/749), and the GraphQL plugin (https://github.com/tipsy/javalin/pull/745) is looking pretty chunky too.

So: 
* javalin-core
* javalin-openapi
* javalin-graphql
* javalin-test (not sure about this one ðŸ¤”)

I don't have any experience with multi-module projects, but the only thing I'm really concerned about is the release process. In general, splitting things up should lead to a cleaner code-base.