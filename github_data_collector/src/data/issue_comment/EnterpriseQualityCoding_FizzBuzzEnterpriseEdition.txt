We should immediately consider proving all of the desired properties in the application to cover all possible cases. This may require rewriting whole project to some language with less typing and dignity issues like OCaml, Haskell, Idris or the Coq itself. Beside that, these languages provide way bigger spectrum of utilities like typelevel programming, static constraint control, monads, arrows and all that stuff that is completely necessary to do any actual programming. Also, they allow the programmer to express their thoughts in a very subtle and elegant way, for instance `(((flip (.) <$>) . flip (.)) <$>) . flip (.)` composes 4 functions in opposite order which is completely not possible to achieve in our old fashioned Java which doesn't even support impredicative polymorphism.

There are serious issues with our integer handling â€“ interfaces like `IntegerPrinterFactory` or `IntegerStringReturnerFactory` don't contain proofs that incoming values are valid. These props depend only on the implementation which is a separate part of software. You are *never* sure if the implementation matches the requirements. Trust nobody, lower your head, hold your guard. Always make the invalid states irrepresentable, therefore you should use some dependent types to describe our `FizzBuzzInteger` which should be forced to be non-negative and non-divisible by 3 or 5:
```coq
Definition FizzBuzzInteger := {n : N | n mod 5 <> 0 /\ n mod 3 <> 0}.
```
Then the sample output element type can be constrained to contain only valid values:
```coq
Inductive FizzBuzzEntry : Set :=
| Shadow : FizzBuzzShadow -> FizzBuzzEntry
| Num : FizzBuzzInteger -> FizzBuzzEntry
.
```
where `FizzBuzzShadow` contains an integer shadowed by corresponding word:
```
Inductive FizzBuzzShadow : Set :=
| Fizz : {n : N | n mod 3 = 0 /\ n mod 5 <> 0} -> FizzBuzzShadow
| Buzz : {n : N | n mod 3 <> 0 /\ n mod 5 = 0} -> FizzBuzzShadow
| FizzBuzz : {n : N | n mod 3 = 0 /\ n mod 5 = 0} -> FizzBuzzShadow
.
```

This structure can be now trivially iterated in an inductive manner:
```
Definition initial : FizzBuzzEntry.
  refine (Num (exist _ 1 _)).
  split.
  * assert (1 mod 3 = 1).
    ** auto.
    ** rewrite H.
       zify. omega.
  *  assert (1 mod 5 = 1).
    ** auto.
    ** rewrite H.
       zify. omega.
Qed.

Definition next (previousEntry : FizzBuzzEntry): FizzBuzzEntry :=
  match previousEntry with
  | Shadow (Fizz (exist _ shadowed _)) => fromNat shadowed
  | Shadow (Buzz (exist _ shadowed _)) => fromNat shadowed
  | Shadow (FizzBuzz (exist _ shadowed _)) => fromNat shadowed
  | Num (exist _ n _) => fromNat n
  end.

```
The `fromNat` function converts regular, boring natural number to our FizzBuzz representation. It
is now the simplest part of the full proof and definition, as we need just to consider few cases:
```coq
Definition fromNat (n : N): FizzBuzzEntry.
  refine (match (n mod 3 ?= 0, n mod 5 ?= 0)
                as cmp
                return (n mod 3 ?= 0, n mod 5 ?= 0) = cmp -> FizzBuzzEntry with
          | (Eq, Eq) => fun pf => _
          | (Eq, Gt) => fun pf => _
          | (Gt, Eq) => fun pf => _
          | (Gt, Gt) => fun pf => _
          | _ => _
          end eq_refl).
  * apply pair_equal_spec in pf.
    destruct pf.
    apply N.compare_eq_iff in H.
    apply N.compare_eq_iff in H0.
    assert (n mod 3 = 0 /\ n mod 5 = 0); auto.
    apply (Shadow (FizzBuzz (exist _ n H1))).
  * intros.
    apply pair_equal_spec in H.
    destruct H.
    destruct H.
    exfalso.
    apply N.compare_lt_iff in H0.
    assert (0 <= (n mod 5)).
    ** apply N.mod_bound_pos.
       *** destruct n.
           **** zify. omega.
           **** apply N.lt_succ_r. apply N.compare_gt_iff. auto.
       *** zify. omega.
    ** assert (n mod 5 < 0).
       *** auto.
       *** assert ((n mod 5 ?= 0) <> Lt).
           **** apply N.compare_0_r.
           **** contradiction.
  * apply pair_equal_spec in pf.
    destruct pf.
    apply N.compare_eq_iff in H.
    apply N.compare_gt_iff in H0.
    assert (n mod 3 = 0 /\ n mod 5 <> 0).
    ** intuition.
    apply N.compare_eq_iff in H1.
    apply N.compare_gt_iff in H0.
    rewrite H1 in H0. discriminate.
    ** apply (Shadow (Fizz (exist _ n H1))).
  * intros.
    apply pair_equal_spec in H.
    destruct H.
    exfalso.
    *** assert ((n mod 3 ?= 0) <> Lt).
        **** apply N.compare_0_r.
        **** contradiction.
  * apply pair_equal_spec in pf.
    destruct pf.
    apply N.compare_eq_iff in H0.
    apply N.compare_gt_iff in H.
    assert (n mod 3 <> 0 /\ n mod 5 = 0).
    ** intuition.
    apply N.compare_eq_iff in H1.
    apply N.compare_gt_iff in H.
    rewrite H in H1. discriminate.
    ** apply (Shadow (Buzz (exist _ n H1))).
  * intros.
    apply pair_equal_spec in H.
    destruct H.
    exfalso.
    *** assert ((n mod 5 ?= 0) <> Lt).
        **** apply N.compare_0_r.
        **** contradiction.
  * apply pair_equal_spec in pf.
    destruct pf.
    apply N.compare_gt_iff in H0.
    apply N.compare_gt_iff in H.
    assert (n mod 3 <> 0 /\ n mod 5 <> 0).
    ** intuition.
       apply N.compare_eq_iff in H1.
       apply N.compare_gt_iff in H.
       rewrite H in H1. discriminate.
       apply N.compare_eq_iff in H1.
       apply N.compare_gt_iff in H0.
       rewrite H0 in H1. discriminate.
    ** apply (Num (exist _ n H1)).
Defined.
```

-----------

If somebody is not convinced of correctness of the `fromNat` function, here is the complete proof that will surely vanish all doubts:
```coq
fromNat = 
fun n : N =>
(let (c, c0) as cmp return ((n mod 3 ?= 0, n mod 5 ?= 0) = cmp -> FizzBuzzEntry) :=
   (n mod 3 ?= 0, n mod 5 ?= 0) in
 match c as c1 return ((n mod 3 ?= 0, n mod 5 ?= 0) = (c1, c0) -> FizzBuzzEntry) with
 | Eq =>
     match c0 as c1 return ((n mod 3 ?= 0, n mod 5 ?= 0) = (Eq, c1) -> FizzBuzzEntry) with
     | Eq =>
         fun pf : (n mod 3 ?= 0, n mod 5 ?= 0) = (Eq, Eq) =>
         let H :
           forall (A B : Type) (a1 a2 : A) (b1 b2 : B),
           (a1, b1) = (a2, b2) -> a1 = a2 /\ b1 = b2 :=
           fun (A B : Type) (a1 a2 : A) (b1 b2 : B) =>
           match pair_equal_spec a1 a2 b1 b2 with
           | conj x _ => x
           end in
         let pf0 : (n mod 3 ?= 0) = Eq /\ (n mod 5 ?= 0) = Eq :=
           H comparison comparison (n mod 3 ?= 0) Eq (n mod 5 ?= 0) Eq pf in
         match pf0 with
         | conj H0 H1 =>
             let H2 : forall n0 m : N, (n0 ?= m) = Eq -> n0 = m :=
               fun n0 m : N => match N.compare_eq_iff n0 m with
                               | conj x _ => x
                               end in
             let H3 : n mod 3 = 0 := H2 (n mod 3) 0 H0 in
             let H4 : forall n0 m : N, (n0 ?= m) = Eq -> n0 = m :=
               fun n0 m : N => match N.compare_eq_iff n0 m with
                               | conj x _ => x
                               end in
             let H5 : n mod 5 = 0 := H4 (n mod 5) 0 H1 in
             let H6 : n mod 3 = 0 /\ n mod 5 = 0 := conj H3 H5 in
             Shadow (FizzBuzz (exist (fun n0 : N => n0 mod 3 = 0 /\ n0 mod 5 = 0) n H6))
         end
     | Lt =>
         fun H : (n mod 3 ?= 0, n mod 5 ?= 0) = (Eq, Lt) =>
         let H0 :
           forall (A B : Type) (a1 a2 : A) (b1 b2 : B),
           (a1, b1) = (a2, b2) -> a1 = a2 /\ b1 = b2 :=
           fun (A B : Type) (a1 a2 : A) (b1 b2 : B) =>
           match pair_equal_spec a1 a2 b1 b2 with
           | conj x _ => x
           end in
         let H1 : (n mod 3 ?= 0) = Eq /\ (n mod 5 ?= 0) = Lt :=
           H0 comparison comparison (n mod 3 ?= 0) Eq (n mod 5 ?= 0) Lt H in
         match H1 with
         | conj H2 H3 =>
             let c1 := Eq in
             match H2 with
             | eq_refl =>
                 False_rec FizzBuzzEntry
                   (let H4 : forall n0 m : N, n0 < m -> (n0 ?= m) = Lt :=
                      fun n0 m : N => match N.compare_lt_iff n0 m with
                                      | conj _ x0 => x0
                                      end in
                    let H5 : (n mod 5 ?= 0) = Lt := H4 (n mod 5) 0 H3 in
                    let H6 : 0 <= n mod 5 :=
                      let H6 : forall a b : N, 0 <= a -> 0 < b -> 0 <= a mod b :=
                        fun (a b : N) (H6 : 0 <= a) (H7 : 0 < b) =>
                        match N.mod_bound_pos a b H6 H7 with
                        | conj x _ => x
                        end in
                      H6 n 5
                        (match n as n0 return ((n0 mod 5 ?= 0) = Lt -> 0 <= n0) with
                         | 0 =>
                             fun _ : (0 mod 5 ?= 0) = Lt =>
                             (fun lemma : 0 <= 0 <-> (Z.of_N 0 <= Z.of_N 0)%Z =>
                              iff_flip_impl_subrelation (0 <= 0) 
                                (Z.of_N 0 <= Z.of_N 0)%Z lemma) 
                               (N2Z.inj_le 0 0)
                               (Decidable.dec_not_not (0 <= 0)%Z 
                                  (Z.le_decidable 0 0)
                                  (fun H8 : ~ (0 <= 0)%Z =>
                                   (fun H9 : (0 > 0)%Z =>
                                    (fun Omega0 : (0 <= -1)%Z =>
                                     (fun auxiliary : ... -> False => auxiliary eq_refl)
                                       Omega0) (Zgt_left 0 0 H9)) 
                                     (Znot_le_gt 0 0 H8)))
                         | N.pos p =>
                             fun _ : (N.pos p mod 5 ?= 0) = Lt =>
                             let H8 : forall n0 m : N, n0 < N.succ m -> n0 <= m :=
                               fun n0 m : N =>
                               match N.lt_succ_r n0 m with
                               | conj x _ => x
                               end in
                             H8 0 (N.pos p)
                               (let H9 : forall x y : N, (x ?= y) = Gt -> y < x :=
                                  fun x y : N =>
                                  match N.compare_gt_iff x y with
                                  | conj x0 _ => x0
                                  end in
                                H9 (N.succ (N.pos p)) 0 eq_refl)
                         end H5)
                        ((fun lemma : 0 < 5 <-> (Z.of_N 0 < Z.of_N 5)%Z =>
                          iff_flip_impl_subrelation (0 < 5) (Z.of_N 0 < Z.of_N 5)%Z lemma)
                           (N2Z.inj_lt 0 5)
                           (eq_ind_r (fun z : Z => (Z.of_N 0 < z)%Z)
                              (Decidable.dec_not_not (0 < 5)%Z (Z.lt_decidable 0 5)
                                 (fun H7 : ~ (0 < 5)%Z =>
                                  (fun H8 : (0 >= 5)%Z =>
                                   (fun Omega0 : (0 <= -5)%Z =>
                                    (fun auxiliary : Gt = Gt -> False => auxiliary eq_refl)
                                      Omega0) (Zge_left 0 5 H8)) 
                                    (Znot_lt_ge 0 5 H7))) (N2Z.inj_pos 5))) in
                    let H7 : n mod 5 < 0 := H5 in
                    let H8 : (n mod 5 ?= 0) <> Lt := N.compare_0_r (n mod 5) in
                    False_ind False (H8 H7))
             end
         end
     | Gt =>
         fun pf : (n mod 3 ?= 0, n mod 5 ?= 0) = (Eq, Gt) =>
         let H :
           forall (A B : Type) (a1 a2 : A) (b1 b2 : B),
           (a1, b1) = (a2, b2) -> a1 = a2 /\ b1 = b2 :=
           fun (A B : Type) (a1 a2 : A) (b1 b2 : B) =>
           match pair_equal_spec a1 a2 b1 b2 with
           | conj x _ => x
           end in
         let pf0 : (n mod 3 ?= 0) = Eq /\ (n mod 5 ?= 0) = Gt :=
           H comparison comparison (n mod 3 ?= 0) Eq (n mod 5 ?= 0) Gt pf in
         match pf0 with
         | conj H0 H1 =>
             let H2 : forall n0 m : N, (n0 ?= m) = Eq -> n0 = m :=
               fun n0 m : N => match N.compare_eq_iff n0 m with
                               | conj x _ => x
                               end in
             let H3 : n mod 3 = 0 := H2 (n mod 3) 0 H0 in
             let H4 : forall x y : N, (x ?= y) = Gt -> y < x :=
               fun x y : N => match N.compare_gt_iff x y with
                              | conj x0 _ => x0
                              end in
             let H5 : 0 < n mod 5 := H4 (n mod 5) 0 H1 in
             let H6 : n mod 3 = 0 /\ n mod 5 <> 0 :=
               conj H3
                 (fun H6 : n mod 5 = 0 =>
                  let H7 : forall n0 m : N, n0 = m -> (n0 ?= m) = Eq :=
                    fun n0 m : N => match N.compare_eq_iff n0 m with
                                    | conj _ x0 => x0
                                    end in
                  let H8 : (n mod 5 ?= 0) = Eq := H7 (n mod 5) 0 H6 in
                  let H9 : forall x y : N, y < x -> (x ?= y) = Gt :=
                    fun x y : N => match N.compare_gt_iff x y with
                                   | conj _ x1 => x1
                                   end in
                  let H10 : (n mod 5 ?= 0) = Gt := H9 (n mod 5) 0 H5 in
                  let H11 : Eq = Gt :=
                    eq_ind (n mod 5 ?= 0) (fun c1 : comparison => c1 = Gt) H10 Eq H8 in
                  let H12 : False :=
                    eq_ind Eq
                      (fun e : comparison => match e with
                                             | Eq => True
                                             | _ => False
                                             end) I Gt H11 in
                  False_ind False H12) in
             Shadow (Fizz (exist (fun n0 : N => n0 mod 3 = 0 /\ n0 mod 5 <> 0) n H6))
         end
     end
 | Lt =>
     fun H : (n mod 3 ?= 0, n mod 5 ?= 0) = (Lt, c0) =>
     let H0 :
       forall (A B : Type) (a1 a2 : A) (b1 b2 : B),
       (a1, b1) = (a2, b2) -> a1 = a2 /\ b1 = b2 :=
       fun (A B : Type) (a1 a2 : A) (b1 b2 : B) =>
       match pair_equal_spec a1 a2 b1 b2 with
       | conj x _ => x
       end in
     let H1 : (n mod 3 ?= 0) = Lt /\ (n mod 5 ?= 0) = c0 :=
       H0 comparison comparison (n mod 3 ?= 0) Lt (n mod 5 ?= 0) c0 H in
     match H1 with
     | conj H2 _ =>
         False_rec FizzBuzzEntry
           (let H4 : (n mod 3 ?= 0) <> Lt := N.compare_0_r (n mod 3) in
            False_ind False (H4 H2))
     end
 | Gt =>
     match c0 as c1 return ((n mod 3 ?= 0, n mod 5 ?= 0) = (Gt, c1) -> FizzBuzzEntry) with
     | Eq =>
         fun pf : (n mod 3 ?= 0, n mod 5 ?= 0) = (Gt, Eq) =>
         let H :
           forall (A B : Type) (a1 a2 : A) (b1 b2 : B),
           (a1, b1) = (a2, b2) -> a1 = a2 /\ b1 = b2 :=
           fun (A B : Type) (a1 a2 : A) (b1 b2 : B) =>
           match pair_equal_spec a1 a2 b1 b2 with
           | conj x _ => x
           end in
         let pf0 : (n mod 3 ?= 0) = Gt /\ (n mod 5 ?= 0) = Eq :=
           H comparison comparison (n mod 3 ?= 0) Gt (n mod 5 ?= 0) Eq pf in
         match pf0 with
         | conj H0 H1 =>
             let H2 : forall n0 m : N, (n0 ?= m) = Eq -> n0 = m :=
               fun n0 m : N => match N.compare_eq_iff n0 m with
                               | conj x _ => x
                               end in
             let H3 : n mod 5 = 0 := H2 (n mod 5) 0 H1 in
             let H4 : forall x y : N, (x ?= y) = Gt -> y < x :=
               fun x y : N => match N.compare_gt_iff x y with
                              | conj x0 _ => x0
                              end in
             let H5 : 0 < n mod 3 := H4 (n mod 3) 0 H0 in
             let H6 : n mod 3 <> 0 /\ n mod 5 = 0 :=
               conj
                 (fun H6 : n mod 3 = 0 =>
                  let H7 : forall n0 m : N, n0 = m -> (n0 ?= m) = Eq :=
                    fun n0 m : N => match N.compare_eq_iff n0 m with
                                    | conj _ x0 => x0
                                    end in
                  let H8 : (n mod 3 ?= 0) = Eq := H7 (n mod 3) 0 H6 in
                  let H9 : forall x y : N, y < x -> (x ?= y) = Gt :=
                    fun x y : N => match N.compare_gt_iff x y with
                                   | conj _ x1 => x1
                                   end in
                  let H10 : (n mod 3 ?= 0) = Gt := H9 (n mod 3) 0 H5 in
                  let H11 : Gt = Eq :=
                    eq_ind (n mod 3 ?= 0) (fun c1 : comparison => c1 = Eq) H8 Gt H10 in
                  let H12 : False :=
                    eq_ind Gt
                      (fun e : comparison => match e with
                                             | Gt => True
                                             | _ => False
                                             end) I Eq H11 in
                  False_ind False H12) H3 in
             Shadow (Buzz (exist (fun n0 : N => n0 mod 3 <> 0 /\ n0 mod 5 = 0) n H6))
         end
     | Lt =>
         fun H : (n mod 3 ?= 0, n mod 5 ?= 0) = (Gt, Lt) =>
         let H0 :
           forall (A B : Type) (a1 a2 : A) (b1 b2 : B),
           (a1, b1) = (a2, b2) -> a1 = a2 /\ b1 = b2 :=
           fun (A B : Type) (a1 a2 : A) (b1 b2 : B) =>
           match pair_equal_spec a1 a2 b1 b2 with
           | conj x _ => x
           end in
         let H1 : (n mod 3 ?= 0) = Gt /\ (n mod 5 ?= 0) = Lt :=
           H0 comparison comparison (n mod 3 ?= 0) Gt (n mod 5 ?= 0) Lt H in
         match H1 with
         | conj _ H3 =>
             False_rec FizzBuzzEntry
               (let H4 : (n mod 5 ?= 0) <> Lt := N.compare_0_r (n mod 5) in
                False_ind False (H4 H3))
         end
     | Gt =>
         fun pf : (n mod 3 ?= 0, n mod 5 ?= 0) = (Gt, Gt) =>
         let H :
           forall (A B : Type) (a1 a2 : A) (b1 b2 : B),
           (a1, b1) = (a2, b2) -> a1 = a2 /\ b1 = b2 :=
           fun (A B : Type) (a1 a2 : A) (b1 b2 : B) =>
           match pair_equal_spec a1 a2 b1 b2 with
           | conj x _ => x
           end in
         let pf0 : (n mod 3 ?= 0) = Gt /\ (n mod 5 ?= 0) = Gt :=
           H comparison comparison (n mod 3 ?= 0) Gt (n mod 5 ?= 0) Gt pf in
         match pf0 with
         | conj H0 H1 =>
             let H2 : forall x y : N, (x ?= y) = Gt -> y < x :=
               fun x y : N => match N.compare_gt_iff x y with
                              | conj x0 _ => x0
                              end in
             let H3 : 0 < n mod 5 := H2 (n mod 5) 0 H1 in
             let H4 : forall x y : N, (x ?= y) = Gt -> y < x :=
               fun x y : N => match N.compare_gt_iff x y with
                              | conj x0 _ => x0
                              end in
             let H5 : 0 < n mod 3 := H4 (n mod 3) 0 H0 in
             let H6 : n mod 3 <> 0 /\ n mod 5 <> 0 :=
               conj
                 (fun H6 : n mod 3 = 0 =>
                  let H7 : forall n0 m : N, n0 = m -> (n0 ?= m) = Eq :=
                    fun n0 m : N => match N.compare_eq_iff n0 m with
                                    | conj _ x0 => x0
                                    end in
                  let H8 : (n mod 3 ?= 0) = Eq := H7 (n mod 3) 0 H6 in
                  let H9 : forall x y : N, y < x -> (x ?= y) = Gt :=
                    fun x y : N => match N.compare_gt_iff x y with
                                   | conj _ x1 => x1
                                   end in
                  let H10 : (n mod 3 ?= 0) = Gt := H9 (n mod 3) 0 H5 in
                  let H11 : Gt = Eq :=
                    eq_ind (n mod 3 ?= 0) (fun c1 : comparison => c1 = Eq) H8 Gt H10 in
                  let H12 : False :=
                    eq_ind Gt
                      (fun e : comparison => match e with
                                             | Gt => True
                                             | _ => False
                                             end) I Eq H11 in
                  False_ind False H12)
                 (fun H6 : n mod 5 = 0 =>
                  let H7 : forall n0 m : N, n0 = m -> (n0 ?= m) = Eq :=
                    fun n0 m : N => match N.compare_eq_iff n0 m with
                                    | conj _ x0 => x0
                                    end in
                  let H8 : (n mod 5 ?= 0) = Eq := H7 (n mod 5) 0 H6 in
                  let H9 : forall x y : N, y < x -> (x ?= y) = Gt :=
                    fun x y : N => match N.compare_gt_iff x y with
                                   | conj _ x1 => x1
                                   end in
                  let H10 : (n mod 5 ?= 0) = Gt := H9 (n mod 5) 0 H3 in
                  let H11 : Gt = Eq :=
                    eq_ind (n mod 5 ?= 0) (fun c1 : comparison => c1 = Eq) H8 Gt H10 in
                  let H12 : False :=
                    eq_ind Gt
                      (fun e : comparison => match e with
                                             | Gt => True
                                             | _ => False
                                             end) I Eq H11 in
                  False_ind False H12) in
             Num (exist (fun n0 : N => n0 mod 3 <> 0 /\ n0 mod 5 <> 0) n H6)
         end
     end
 end) eq_refl
     : N -> FizzBuzzEntry


```

This is of course just a draft, full proof may be actually complicated to some extent, but I hope I created some basic view on the idea. Comments and further ideas are highly appreciated.

@Mikkeren,

I noticed that you took time out of your busy schedule to fully review and merge a pull request.

# THIS IS UNACCEPTABLE.

**Why have you not merged _all_ of the pull requestsâ€½** This is your responsibility, because you showed your face in public and revealed that you had the technical ability.

Please expect further communications, wherein I will give you incredibly specific instructions in order to gain ability and authorisation [by proxy](https://theoatmeal.com/comics/design_hell).

Yours sincerely,  
&emsp;&emsp;Frederick Smith (aka your boss's boss)
&emsp;&emsp;&emsp;&emsp;Senior middle-lower manager.
In #22 or some related task, the `NoFizzNoBuzzStrategy` was changed to implement `IsEvenlyDivisibleStrategy`. This is confusing since the `NoFizzNoBuzzStrategy` applies only if the given number is _not_ evenly divisible, which is the exact opposite of what the name `IsEvenlyDivisible` says.

To avoid this confusion, the name of the interface should be made more general to apply to all three of its implementations.
When I looked at the `NoFizzNoBuzzStrategy`, I noticed that it computes twice whether one number is divisible by another. Given that the involved numbers are not constants, division is one of the most expensive machine instructions, and the instruction latency varies between 7 and 90 cycles.

Therefore it is a good idea to cache the result of this expensive computation. An additional benefit is that the costly division is only done when it is actually needed by the code. Currently this is not the case since both expressions are always evaluated, but with future modifications it may become useful.
### Didn't work.

Please send help to room #343.B


_Cukon Roberto - Top Level Janitor_
Hi everyone.  I seem to have misplaced the companyâ€™s core values and mission statement. As a worker here, I feel aimless, rudderless, and lacking in purpose without those precious words in front of me.  Do any of you know what the core values and mission statement are?
Sonarqube would be an invaluable tool to use in order to have meaningful metrics about our code quality. It's clearly mandatory as our goal is to have the best product, right ? 

Of course, in order to maintain OUR HIGH STANDARD of quality, we should stay with the default settings and not remove any analysis.

It even comes with evolution indicators, so at the end of the sprint we'll see what improved or not ! Let's say we strive for a test coverage of 80%, then we'll be able to put more resources on this task and justify it ! 
It's a grey Blackberry cell phone. **It contains valuable data!**
WHO KNOWS ANYTHING ABOUT THAT PLEASE EMAIL ME ASAP!!!!!!!!!!!!!


_Michael Orons
Sales Department
morons@enterprisecompany.com_
{font: Microsoft Calibri:18dp bold} Due to increased losses caused by unauthorized usage of FizzBuzzEnterpriseEdition â„¢ we decided that we need to take severe actions regarding this problem.

{font: Microsoft Calibri:18dp bold} Thus we decided to take a look on enterprise level solutions for integrity code protection and license validation.

{font: Microsoft Calibri:18dp bold} Our goals:
* Protect our license validation system from cracking by any 3rd parties including our competitors
* Protect source code from being stolen
* Have an easy to manage licensing system to issue and invalidate licenses and customer accounts
* 30-day trial version
* Lifetime upgrades for premium version clients

{font: Microsoft Calibri:18dp} Please take a look and advise what solution fits our purposes. 

{font: Microsoft Calibri:18dp} Also I've consulted with the sales department and we decided that to increase our income we need to split current functionality to different versions:
* Trial
This is 30 day evaluation version of High Enterprise edition
* Home Basic $149
Application is limited to printing "Fuzz" only
* Home Extended $219
Application is limited to printing Fuzz and Buzz only
* Home Ultimate $299
User can tweak either to print Fuzz or Buzz
* Professional Basic $499
All of the above plus ability to replace Fuzz to different word
* Professional Extended $449
All of the above plus ability to replace Fuzz and Buzz to different words
* Professional Ultimate $599
All of the above plus ability to replace Fuzz and Buzz to different words and write Roman numbers instead of arabic numbers
* Enterprise $3999
All of the above plus app crash reporting and "Call" button in application that launches SIP client to our support department
* Enterprise Extended $4599
All of the above plus application should connect to SOAP API and fetch settings from there
* High Enterprise $39999
All of the above plus enterprise Level GUI with settings, web interface (with SSL!), SOAP API client and server, ability to create users with different access level and policies, LDAP integration, encrypted storage of application data, Share Point integration, remote logging, outlook integration (mailto:)
Also application should be able to initiate teamviewer session for remote assistance of our Support Department, please consider implementing that in the first place.

{font: Microsoft Calibri:18dp} The actual names of these versions is yet to be decided we will have another meeting regarding that soon.
Please claim it at the reception desk. It's a grey Blackberry cell phone.

--
*Jenn Lee, Facilities Manager*