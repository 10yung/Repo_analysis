Given that PING before connection activation turns out to be useful across various usecases (enabling and also disabling when using Lettuce 6 to disable the handshake with RESP2) we should un-deprecate `pingBeforeActivateConnection`.

See also #1201.
## Feature Request

In Redis 6 it is now possible to authenticate either using a simple password (legacy) or using a user + password

```
AUTH secret
AUTH default secret
```
See ACL documentation section in [Redis Doc](https://redis.io/topics/acl)


#### Is your feature request related to a problem? Please describe

No

#### Describe the solution you'd like

Just support new features of Redis 6

#### Describe alternatives you've considered

No alternative,

#### Teachability, Documentation, Adoption, Migration Strategy

Adding new parameter to the `auth()` method and URIs 
Obtain the client id.

I'm running Spring Boot 2.2.0.RELEASE with the default `org.springframework.boot:spring-boot-starter-data-redis` dependency and I'm observing this problem for quite a while now. For all this time Lettuce was the underlying Redis client.

I created a redis message listener bean like so in my `RedisConfiguration:` 
```
@Bean
RedisMessageListenerContainer redisMessageListenerContainer(RedisConnectionFactory connectionFactory,
		MessageListenerAdapter listener1, MessageListenerAdapter listener2,
		MessageListenerAdapter listener3) {
	logger.info("Configuring redisMessageListenerContainer");

	RedisMessageListenerContainer container = new RedisMessageListenerContainer();
	container.setConnectionFactory(connectionFactory);
	container.addMessageListener(listener1,
			new PatternTopic(Listener1.REDIS_CHANNEL));
	container.addMessageListener(listener2,
			new PatternTopic(Listener2.REDIS_CHANNEL));
	container.addMessageListener(listener3,
			new PatternTopic(Listener3.REDIS_CHANNEL));

	return container;
}
```

After a couple of weeks (sometimes months) the listeners will all stop receiving messages over the channel they subscribed to. 
Checking Redis itself (4.0.9) tells me that Redis is still up and running and also the pub-sub mechanism still works fine when using `redis-cli`. Only the java Redis clients seem to not receive anything anymore. After restarting my application it works again.
Refer to #1144 for original impetus.

Currently Lettuce provides a RedisURI with a list of Sentinel nodes. 

My request is there is a way to create a shared SentinelTopologyProvider that caches this list, and adds/removes dynamically additional Sentinel nodes.

Example: I connect with 3 sentinel nodes, but entire cluster is 100 sentinel nodes. In the background Lettuce . would

a) After a delay (10 seconds suggested by Redis . Sentinel documents), a refresh of all Sentinel nodes is made. Additionally discovered ones are added, lost ones (sentinel reset) are removed.

b) Subscribe to the pub-sub topic and watch for new sentinel nodes added/removed (I'm assuming that information is available)

@mp911de brings up concerns of complexity and of security. Obviously the former is inarguable, though if it works like I think it would, it would be no more complex than the standard master/replica refresh. As for security, that's why it's an option, not required. 
Implements https://github.com/lettuce-io/lettuce-core/issues/1129
## Feature Request

<!-- First of all: Have you checked the docs https://github.com/lettuce-io/lettuce-core/wiki, GitHub issues, or Stack Overflow whether someone else has already reported your issue? Maybe the feature already exists?-->

#### Problem

1. I call `redisClient.connect()`
2. If connection fail, I get exception

In some cases, it is expected behaviour.
*But* my server can live without Redis. So, I don't want to kill server if Redis down - I want to retry connection later in background.

By the way this is exactly how the `redis-cli` works.

#### Solution

1. Introduce a ClientOption `allowDeferredConnection`.
2. If `true` and connection can't be established at init, then just left it in closed state (`isOpen()=false`).
3. Reconnect later in background using `ConnectionWatchdog`.

A clear and concise description of what you want to happen. Add any considered drawbacks.

Issue created in response to https://github.com/lettuce-io/lettuce-core/issues/254

## Bug Report

#### Current Behavior
Command timeout is ignored in period of adaptive/periodic refresh


#### Expected behavior/code

Command timeout should be respected in this state. 

#### Environment

- Lettuce version(s): 5.1.7.RELEASE
- Redis version: 5.0.0

#### Possible Solution

I assume that refresh is blocking the eventloop and timeout can not be executed during this period

#### Additional context

Reproducer can be found here:
[https://github.com/pendula95/lettuce-reproducer](https://github.com/pendula95/lettuce-reproducer)

**Feature Request:**

Support for ACLs w/ Redis 6:

In worlds where multiple users exist we may want users to do perform different Redis operations. We may also want to restrict them to specific keys. This will help security-conscious users and enterprises restrict clients and users to the least amount of privilege required to perform their function. With the planned implementation of ACLs in Redis 6, ecosystem drivers should begin aligning to support this. 

In Antirez's words:
**When ACLs are useful**
1. You want to improve security by restricting access to commands and keys so that untrusted clients have no access and trusted clients have just the minimum access level to the database in order to perform the work needed. For instance, certain clients may just be able to execute read-only commands.
2. You want to improve operational safety, so that processes or humans accessing Redis are not allowed, because of software errors or manual mistakes, to damage the data or the configuration. For instance, there is no reason for a worker that fetches delayed jobs from Redis to be able to call the FLUSHALL command.


**Commands in Scope Currently w/ Redis 6:**
 * Multiple Arguments for AUTH (username and password)
 * ACL HELP  -- provides help information (listed below) 
 * ACL LOAD  -- Reload users from the ACL file.
 * ACL LIST  -- Show user details in config file format.
 * ACL USERS  -- List all the registered usernames.
 * ACL CAT [<category>]   -- List available categories // -- List commands inside category.
 * ACL SETUSER <username> ... acl rules ... -- Create or modify a user
 * ACL DELUSER <username> [...] -- Delete a list of users."
 * ACL GETUSER <username> - Get the user details.
 * ACL GENPASS - Generate a secure password
 * ACL WHOAMI - Return the current connection username.
 
 **Error Checking**
 1. No Permissions when a user does not have permission to a command or key (when error for commands or keys)
 2. Username does not exist (getuser, deluser)

**References:**
https://redis.io/topics/acl
https://github.com/antirez/redis/blob/0cabe0cfa7290d9b14596ec38e0d0a22df65d1df/src/acl.c