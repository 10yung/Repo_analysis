As far as I can tell this feature should be working in 1.2.0 as per https://github.com/mannodermaus/android-junit5/commit/e50c8a04f865fd07c1935c073cc5f9e567299a88

~~In build.gradle, setting `android.android.testOptions.unitTests.all.systemProperty` will not allow instrumentation tests to access the set value (via System.getProperty in java).~~ Pretty sure I got confused, the takeaway is that setting the below systemProperty only affects unit tests and not instrumentation tests, which would be preferable.

This does work for unit tests, i.e. setting `android.testOptions.unitTests.all.systemProperty 'var', value'` (the unit test equivalent in an android library) does allow unit tests to access the set value via System.getProperty.

Similarly, setting `android.testOptions.junitPlatform.configurationParameter 'var', 'value'` only applies to unit tests and not instrumentation tests.

Environment:
gradle 5.6.4
android library (com.android.library plugin)
android gradle plugin 3.5.2
de.mannodermaus.junit5 1.2.0
junit.jupiter 5.5.2
latest androidx test/annotation dependencies


Something that I like to do before opening a Pull Request is to run all tests from the module I just modified, like in the bellow image.

![image](https://user-images.githubusercontent.com/5278328/70400428-c6c44200-1a09-11ea-89a6-35c710f779fc.png)

I have a pet project (https://github.com/guuilp/RickAndMorty) that I'm testing JUnit 5 using your gradle plugin.

Everything I tested is working except this Run Tests in a folder I mentioned. When I try to do that, I get this error:
![image](https://user-images.githubusercontent.com/5278328/70400532-1c005380-1a0a-11ea-92c8-e47d2b17bd52.png)

If you want to reproduce, just import my project (https://github.com/guuilp/RickAndMorty) and go to character module > src/test/java > right click and then `Run Tests in Java'`.

To know it's an issue with the JUnit5 gradle plugin, I checkout on `8c0e1738984106f3e5fa96e896743481e8a7b1d3` in my project (commit before adding the JUnit 5 to the project) and then tried the same option and it worked.
Probably related to #199.

Steps to reproduce:

1. Run whole instrumented class test that has at least one test method with parameters (such as `ActivityOneTest`)
2. Attempt to right click on the tests in test results window

Test without parameter will display normal context menu:
![image](https://user-images.githubusercontent.com/507922/69814407-6a387a00-11f4-11ea-8a85-a4aaf39c1dd5.png)

However, right clicking on test with method parameters will just yield "Nothing here" popup:
![image](https://user-images.githubusercontent.com/507922/69814459-7c1a1d00-11f4-11ea-87a3-5934c60bae49.png)

When attempting to run individual instrumented method that has parameters, IDE will just error out with "No tests found"

Example such test: https://github.com/mannodermaus/android-junit5/blob/a2f903443d7c0e48ab4fbbc0951e7cf96e69fc08/instrumentation/sample/src/androidTest/kotlin/de/mannodermaus/sample/ActivityOneTest.kt#L30
It looks like `instrumentation` sample project uses symlinks, which are not supported on Windows.

When attempting to open the project on Windows, `build.gradle.kts` is interpreted as a text file pointing to actual location, resulting in build error:

![image](https://user-images.githubusercontent.com/507922/69813954-8be53180-11f3-11ea-8977-84c6c4791f95.png)

Hotlinking https://github.com/junit-team/junit5/issues/2054 for visibility here.
Disabled instrumented tests (apart from disabled parameterized tests; see https://github.com/gradle/gradle/issues/10526) appear to be reported correctly as 'skipped' in console output, e.g.:
```
04:37:20 V/InstrumentationResultParser: INSTRUMENTATION_STATUS: class=StupidConnectedTest
04:37:20 V/InstrumentationResultParser: INSTRUMENTATION_STATUS: current=8
04:37:20 V/InstrumentationResultParser: INSTRUMENTATION_STATUS: id=AndroidJUnitRunner
04:37:20 V/InstrumentationResultParser: INSTRUMENTATION_STATUS: numtests=6
04:37:20 V/InstrumentationResultParser: INSTRUMENTATION_STATUS: stream=
04:37:20 V/InstrumentationResultParser: INSTRUMENTATION_STATUS: test=stupidConnectedDisabledFailTest()
04:37:20 V/InstrumentationResultParser: INSTRUMENTATION_STATUS_CODE: 1
04:37:20 V/InstrumentationResultParser: INSTRUMENTATION_STATUS: class=StupidConnectedTest
04:37:20 V/InstrumentationResultParser: INSTRUMENTATION_STATUS: current=8
04:37:20 V/InstrumentationResultParser: INSTRUMENTATION_STATUS: id=AndroidJUnitRunner
04:37:20 V/InstrumentationResultParser: INSTRUMENTATION_STATUS: numtests=6
04:37:20 V/InstrumentationResultParser: INSTRUMENTATION_STATUS: stream=
04:37:20 V/InstrumentationResultParser: INSTRUMENTATION_STATUS: test=stupidConnectedDisabledFailTest()

StupidConnectedTest > stupidConnectedDisabledFailTest()[Nexus 5X - 8.1.0] SKIPPED 
04:37:20 V/InstrumentationResultParser: INSTRUMENTATION_STATUS_CODE: -3
```

and also reported correctly as skipped in xml reports. However, in the HTML test report files, disabled instrumented tests are reported as passing:

<img width="552" alt="Screen Shot 2019-11-12 at 4 34 15 PM" src="https://user-images.githubusercontent.com/26582629/68712713-4d504580-056a-11ea-8a53-1bcc0f41919e.png">

For comparison, disabled unit tests are reported as skipped appropriately in their summary:

<img width="913" alt="Screen Shot 2019-11-12 at 4 32 07 PM" src="https://user-images.githubusercontent.com/26582629/68712595-0c583100-056a-11ea-909e-165a48c6e06a.png">

May be a gradle-side issue, I'm not sure at what point the HTML report generation happens.

Env: JUnit 5.5.1, mannodermaus plugin 1.5.1.0, android-test-core:1.0.0, android-test-runner:1.1.0 (still an issue as of 1.2.0 snapshot).

Tried also on the provided sample.
Video - https://drive.google.com/file/d/1iu-Yr7H5cPzzN3TTsFWJZX1m2byXFHKL/view?usp=sharing

Although not clearly seen in the above video this behavior clearly skews the expected results but furthermore, when instrumented tests would try to access Android apis they would fail.
I added a sample project based on my own setup:
- Gradle plugin 2.x (latest released)
- Robolectric (latest released)

There is a Robolectric test in the sample project which executes one line of code but I'm not able to get any code coverage

Steps to reproduce:
- Run `gradlew testDebug`
- Analyze `sample-robolectric\build\jacoco\junitPlatformTestDebug.exec` (In IntelliJ you can open an .exec-file with ctrl+alt + F6), it shows coverage for all lines of code in `de.mannodermaus.gradle.plugins.android_junit5.sample_robolectric.Foo` except for the method `junit4robolectric()`