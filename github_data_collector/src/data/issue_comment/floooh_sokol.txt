When building the Android examples, `sokol_audio.h` fails to build:

```
> ./fips build | grep error
./sokol/sokol_audio.h:1540: error: undefined reference to 'slCreateEngine'
./sokol/sokol_audio.h:0: error: undefined reference to 'SL_IID_ENGINE'
./sokol/sokol_audio.h:0: error: undefined reference to 'SL_IID_VOLUME'
./sokol/sokol_audio.h:0: error: undefined reference to 'SL_IID_VOLUME'
./sokol/sokol_audio.h:0: error: undefined reference to 'SL_IID_VOLUME'
./sokol/sokol_audio.h:0: error: undefined reference to 'SL_IID_ANDROIDSIMPLEBUFFERQUEUE'
./sokol/sokol_audio.h:0: error: undefined reference to 'SL_IID_PLAY'
clang++: error: linker command failed with exit code 1 (use -v to see invocation)
```

Environment:
MacBook Pro 2019, OSX Catalina
This is easiest to see with the `imgui-metal` sample: when you resize the OS window from the right side, the contents of the window exhibit an ugly "judder" effect.

This appears to be the same issue discussed here: https://thume.ca/2019/06/19/glitchless-metal-window-resizing/

> What’s happening is often the new Metal frame doesn’t arrive in time and it draws a stretched version of the previous frame instead.

Tristan Hume provides a test program https://github.com/trishume/MetalTest that seems to fix the issue (written in Swift but it's pretty easy to port to Objective C). Note that it doesn't include any animation -- all of the rendering is explicit rather than happening on a timer or being synced to the display refresh rate, which might be fine for a purely event driven application, but not for one that does smooth animation.

As far as I understand it, `MTKView`, which `sokol_app.h` appears to be using, provides display-synced updates automatically, but it appears that it may not be configurable enough to fix the issue -- you may have to use `CAMetalLayer` directly in a custom subclass of `NSView` that implements the `CALayerDelegate` protocol. There's an Apple sample app here https://developer.apple.com/documentation/metal/drawable_objects/creating_a_custom_metal_view?language=objc that demonstrates how to implement a display-synced render loop using `CVDisplayLink`. Unfortunately, I haven't personally succeeded in modifying this demo to fix the resize judder issue (although I could have easily missed something).

I've only just started learning how to use explicit graphics APIs like Metal (I've mostly used Unity for my graphics projects so far) and would love to know if you have any insight into how to fix this issue properly.
Currently, the only supported matrix type is 4x4. For any 2D ops a 3x2 matrix is all that is required.
Hi, just a question, do you have any intention or plans to support Wayland on Linux? There's a lot of STUFF that needs doing for Wayland and fitting it into a single-header library may not be desirable, so it's pretty reasonable if you aren't going to do it, but I was wondering if you'd given any thought about how it might work with `sokol_app.h`'s existing design.
<blockquote class="twitter-tweet"><p lang="en" dir="ltr"><a href="https://twitter.com/FlohOfWoe?ref_src=twsrc%5Etfw">@FlohOfWoe</a> possible idea for sokol_gl that should be easy to do... add an option to record draw lists: begin/draw/end -&gt; list. Can be very useful because often you want to visualize things in an algorithm that runs only once. Even better if one can then re-draw only up to a point</p>&mdash; c0de517e/AngeloPesce (@kenpex) <a href="https://twitter.com/kenpex/status/1213445388616769536?ref_src=twsrc%5Etfw">January 4, 2020</a></blockquote>

Possible API:

```sgl_begin_list(void)```, ```sgl_list sgl_end_list(void)```, ```sgl_draw_list(sgl_list)```, possibly ```sgl_delete_list(sg_list)```?

When inside begin/end list, cmd and vertex recording goes into separate and persistent list buffers.
I discovered Sokol a few days ago, and notice that i dont need to use `SDL/GLFW` with it because of `sokol_app`, since it already does what i normally want with sdl (windows/mouse/input).

My question is, how far will I go with `sokol` alone without hitting some problem that will make me rethink the use of SDL ? Looks like i dont need SDL anymore (which is great, single dependency :P ), but i´m missing something obvious here?


See branch https://github.com/floooh/sokol/tree/sapp-clipboard with HTML5 and OSX implemented.

- for Linux support see: https://github.com/Kode/Kinc/pull/448
...but only with user-created offscreen render targets... to reproduce:

Start mrt_sapp with the Metal backend, resize and watch memory usage.

Currently the resized-event is fired in the windowDidResize event, check what happens if this is moved into the frame loop, just like on Windows.
About 10% of the time when I launch on macOS my app fails to launch in fullscreen and is instead shown in a window.

When I run in fullscreen and switch between "spaces" the sokol app sometimes becomes unresponsive (beach ball). It works correctly if I instead use cmd+tab to switch between apps. When it's frozen if I cmd+tab away and back it becomes responsive again.

This is on macOS 10.14.6, latest sokol code.
Your sokol_fetch header is an awesome way to load resources in parallel while keeping the interactivity of the application (animated loading screens), but it currently assumes that the only critical time an application spends is in the fetching of the resources.

Most of the times, decoding / processing the fetched resource (like decoding jpeg data, preparing the mipmaps) takes a significant percent of the time. It would be awesome if we had a 'ready' state similar to dispatched / fetched states that will be called from the IO thread in order to process/decode/parse the resource in parallel.

The idea is that after the 'ready' state we would use the fetched (or another 'processed') state to handle the resource in the main thread, in order to upload the decoded/processed buffer on the GPU or any other operation that needs these data ready available in the main thread, minimizing the time spent on the main thread.

I'm not sure if this idea fits into the sokol_fetch library or it should be another more generic sokol_tasks library. I couldn't find a similar quality C library like yours that could satisfy my needs, and I would love to see that happening!