I found that PHP+PCOV runs unit tests much faster than PHP+Xdebug, when all you need is coverage reporting. However, PCOV will only run on PHPunit >7.0. I thought I'd document some of the future testing possibilities.
* PHP 7.0 is past end of life.
  - PHPunit 6.5 (current tests work, adding void to setup() causes failure)
* PHP 7.1 is past end of life
  - PHPunit 7.5 (current tests work, adding void to setup works)
  - could use Pcov with 'clobber' to backport to phpunit 7.x
* PHP 7.2 just started security only
  - PHPunit 8.5 (Current tests fail, must add void to setup(). Exception when string type hint is given an int )
  - could use PCOV
* PHP 7.3 is active
  - PHPunit 8.5 same as above
* PHP 7.4 is active (newly active...should add to test matrix)
The “Models” that are part of the regression namespace are kind of like classed versions of closures. We could create a parent object which includes a simple `derivative()` function, which could be overridden by a child if the child had a simple derivative. This  accurate derivative could be used in the root-finding algorithm instead of the estimate.
Not an issue - just a question
is there a function in your library that can simulate the Goal Seek function of Excel?
if so which one?
thanks!
I'm having an issue with the IRR function
I have a payment stream (same payment amount) for 20 years and then it stops - then I have 0 for 30 years showing and a future value at year 50 - this function returns a negative value (-212,27%) but in Excel I get a value of 5.09%. It correctly gave me a value at year 49.
Is there a max number of values it can do? 

Any polynomial can be converted into a matrix, such that the eigenvalues of the matrix are the roots of the polynomial.
https://en.wikipedia.org/wiki/Companion_matrix


I think I figured out the general technique for simultaneously finding eigenvalues and eigenvectors for any matrix...numerically.

use power iteration to find largest...this gives both the value and the vector, then subtract it from the source matrix and repeat.
````php
$eigenvalues = [];
$vectors = [];
for ($i = 0l $i < $A->getM(); $i++) {
    list ($eigenvalue, $eigenvector) = Eigen::powerIteration($A);
    $eigenvalues[] = $eigenvalue;
    $vector = MatrixFactory::columnMatrix($eigenvector);
    $vectors[] = $eigenvector; // Adding as a new row
    $A = $A->subtract($vector->multiply($vector->transpose())->scalarMultiply($value));
}
$eigenvectors = MatrixFactory::create($vectors)->transpose();
````
* Created SVD class
* Added SVD to MatrixCatalog
* Added SVD to Matrix Functions
* Added isRectangularDiagonal function to Matrix Class
* Added Unit Test
As this library gets larger, the selection of native php functions that are needed as Functions\Map\Single::foo() will increase. What do you think about generating a generic one:
````
class Single
{
    public static function generic(string $function, array $xs, ...$params): array
    {
        return array_map(
            function ($x) use ($params) {
                return $function($x, ...$params);
            },
            $xs
        );
    }
}
````

Using QR decompositions eliminates the need for matrix inverse. It's much less computationally intensive.