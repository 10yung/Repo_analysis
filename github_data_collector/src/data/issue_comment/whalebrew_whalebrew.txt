This change will allow users to list tags of an image available for install. It outputs tags with semver compliant tags sorted first, then the remaining non semver tags appended. An example use case looks like:

```
./whalebrew list node
INSTALLED  TAG          SIZE
           10-alpine    76.4MB
           10.1-alpine  71MB
           10.2-alpine  71.3MB
           10.3-alpine  69.5MB
           12-alpine    80.3MB
>          12.1-alpine  77.6MB
           12.8-alpine  79.9MB
```
This mr adds code to pull docker image via the api instead of execing a sub process. Also ran `go fmt ./...` so there are some white space changes.
The motivation behind this issue would be to eliminate the need to build docker images for repositories that require manual configuration for environment variables volumes, etc. These things likely don't change between patch, minor or even major versions. So i'm proposing a way to distribute a set of default settings based on public image repository name. And possibly a way to map an image's tag to a built tag in order to version defaults.

The whalebrew-packages repository could be transformed to a set of skeletons used as defaults that can be overridden by the actual image labels when installing the package. The skeletons would just serve as a repository for these defaults.

A skeleton for awscli might look like:
``` Dockerfile
FROM scratch
LABEL io.whalebrew.name aws
LABEL io.whalebrew.config.environment '["AWS_ACCESS_KEY_ID", "AWS_SECRET_ACCESS_KEY", "AWS_SESSION_TOKEN", "AWS_DEFAULT_REGION", "AWS_DEFAULT_PROFILE", "AWS_CONFIG_FILE"]'
LABEL io.whalebrew.config.volumes '["~/.aws:/.aws"]'
```
On my system after building this image docker says it's size is 0B
Essentially using dockerhub (and possibly private repos if the image is from there) as a store for these settings.
Add a first version of a script to release Whalebrew
Changing all required files, creating the tag and pushing

The script creates the release from the latest version of the remote master branch. It should be safe to run it from any branch.
It first creates a temporary corktree with all changes in, changes the version file, generates the CHANGELOG, updates the Readme before committing, tagging and pushing

After everything is done, it removes the whole worktree to leave a clean environment

Since #33 there is support for homebrew. Eventually, the script could as well, in the future, update the  
homebrew repository
Permit the package author to specify a custom gid by providing a
io.whalebrew.config.customgid label.
I would like to create a whalebrew package for [`mongod`](https://docs.mongodb.com/manual/reference/program/mongod/) which starts MongoDB as a daemon. I think it would be awesome if I could just run `mongodb` and whalebrew would start my MongoDB in a detached Docker container. As far as I can tell, all we need for that is a Docker image called `whalebrew/mongod` from the following `Dockerfile`:

```Dockerfile
FROM mongo

EXPOSE 27017

CMD mongod
```

And a new config label for whalebrew called `io.whalebrew.config.detach` which would set the `-d` flag when running the container. What do you guys think?
Packages should be able to specify a message that is displayed to the user when the package is installed.
Hey it's super exciting to see whalebrew! I've been working on a similar concept that also uses labels to augment runtime and a /woirkdir concept, and think it would be cool to make [my project](https://github.com/dockerland/dex) compatible with whalebrew images. In a perfect world we (the community) could create, publish, and pull from eachothers images.

Admittedly dex hardly has a community outside my workplace ATM. It also suffers documentation clarity issues and the [runtime](https://github.com/dockerland/dex/blob/36dab2d17401729e49fd9ba6207728791647d8a5/lib.d/v1-runtime.sh#L24) is a work-in-progress(I kind of stalled on darwin/MacOS X11 and am worried about over/under architecting some labels) -- but I wanted to reach out nonetheless! :) Do you think sharing thought-space solving these issues (e.g. label names and behaviors, mount points, &c) worth pursuing? 
If whalebrew enabled docker in docker (see #24), and also installed itself in all containers, then you could have your tools talk to each other!

**Goal**: my whalebrew packages can call each other.

**Example**: when you build with [microsoft/dotnet](https://hub.docker.com/r/microsoft/dotnet) you might want to call `node` or `npm` to do run frontend tasks.

**Benefits**:

* Each tool is downloaded as needed (e.g. `docker run` downloads what it needs)
* Using official images gives you faster updates and well-tested tools
* Your environment is now composable, and updating or adding a tool automatically updates your whole environment
* You can run complicated tools in any Linux distro (e.g. installing and running `dotnet` in Arch Linux is a nightmare)

Let me know what you think or if you think it's not possible!

Thanks!
Whalebrew on Windows üêã üéâ üê≥  ( bfirsh/whalebrew#29 )

I checked on cmd and MSYS2 bash with Docker for Windows.

---

# PR for Windows

## syscall -> exec (https://github.com/3846masa/whalebrew/commit/8a6d78379dbc0357fa95679ce10c8f5db24d8301)
To change `syscall.Exec` to `exec.Command` because `syscall.Exec` causes Error on Windows.

## ~Fix checking args~
~First argument checking hack is not working on Windows. I changed it.~

## Add batch file support (https://github.com/3846masa/whalebrew/commit/ffbdd151865b700478a742c31f1af16d783666ed)
When `whalebrew install` on Windows, generate batch file.
~Batch file passes shell file and args to `whalebrew`.~

## Fix default WHALEBREW_INSTALL_PATH (https://github.com/3846masa/whalebrew/commit/74db526e3efce7250e19cc1d85683e394034fa69)
I have no idea where is good for install_path on Windows.
Temporally, `WHALEBREW_INSTALL_PATH` is `C:\whalebrew` if on Windows.

### Add install script for Windows (https://github.com/3846masa/whalebrew/commit/94a625d808d9fb4d9f11ea996e70bc427026c926)
Install script will download `whalebrew.exe` and set `Path` and `WHALEBREW_INSTALL_PATH`.

## `path.Join` -> `filepath.Join` (https://github.com/3846masa/whalebrew/commit/7453d3797a457968005073a74a502dda3e9638ca)
c.f. ) http://stackoverflow.com/questions/9371031/how-do-i-create-crossplatform-file-paths-in-go

## Rewrite test for Windows (https://github.com/3846masa/whalebrew/commit/bc12aa0da1b47f5d6f0a608c348423ad6ca50767)

### Add `MakePackagePath` function (https://github.com/3846masa/whalebrew/commit/fe06f35661c97bd768341767ae9e9e2b71d252f4)
Because package file name is different on Windows and *nix

---

# TODO

- [x] CI Test for Windows
- [x] Best solution for `WHALEBREW_INSTALL_PATH` on Windows

---

This is first time to write golang. Please check changes. üôè 
Thanks.