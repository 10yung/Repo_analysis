Coming from: https://github.com/dfederm/karma-jasmine-html-reporter/issues/26

## Expected Behavior
Click "Spec List" shows list.

## Current Behavior
Clicking "Spec List" reloads page and runs all tests again.

## Possible Solution
Update https://github.com/jasmine/jasmine/blob/7263a38c3fb04d7fb27c468cdec8ec3eb53e0766/src/html/HtmlReporter.js

With this fix:
https://github.com/Chmiel123/karma-jasmine-html-reporter/commit/20acf93b45403bd30512bae2dbd0b40f76b14496

## Suite that reproduces the behavior (for bugs)
1. npm install @angular/cli
2. ng new app
3. Change one test in app.component.spec.ts to fail
4. ng test
5. (wait for tests to compile/run) Should see "3 specs, 1 failure..."
6. Click "Spec List".

## Your Environment
* Angular: 8.2.14
* Jasmine-Core: 3.4.0
* karma-jasmine-html-reporter: 1.4.2
This is not really a bug, but hoping to not be ignored.

I appreciate how easy it is to test things with jasmine. I wrote some utilities to jasmine that really helps simplify my testing, one of them being an expectPromise proxy. It would be really great to add this to the library as it would help a lot of people out when testing promises. (I implemented this using a Proxy object, I could post the source code if anyone's interested.)

This is some sample code of how I use it:

```javascript
it('should do some stuff', done => {
    expectPromise(self.asyncMethod1()).toBe('result')
        .then(() => expectPromise(self.asyncMethod2()).toEqual('result2'))
        .then(() => expectPromise(self.asyncMethod3()).toEqual('result3'))
        .then(done, done.fail)
})
```

## Are you creating an issue in the correct repository?

- When in doubt, create an issue here.
- If you have an issue with the Jasmine docs, file an issue in the docs repo
  here: https://github.com/jasmine/jasmine.github.io
- This repository is for the core Jasmine framework
- If you are using a test runner that wraps Jasmine, consider filing an issue with that library if appropriate:
  - [Jasmine npm](https://github.com/jasmine/jasmine-npm/issues)
  - [Jasmine gem](https://github.com/jasmine/jasmine-gem/issues)
  - [Jasmine py](https://github.com/jasmine/jasmine-py/issues)
  - [Gulp Jasmine Browser](https://github.com/jasmine/gulp-jasmine-browser/issues)
  - [Karma](https://github.com/karma-runner/karma/issues)
  - [Grunt Contrib Jasmine](https://github.com/gruntjs/grunt-contrib-jasmine/issues)

<!--- Provide a general summary of the issue in the Title above -->

## Expected Behavior
<!--- If you're describing a bug, tell us what should happen -->
<!--- If you're suggesting a change/improvement, tell us how it should work -->

## Current Behavior
<!--- If describing a bug, tell us what happens instead of the expected behavior -->
<!--- If suggesting a change/improvement, explain the difference from current behavior -->

## Possible Solution
<!--- Not obligatory, but suggest a fix/reason for the bug, -->
<!--- or ideas how to implement the addition or change -->

## Suite that reproduces the behavior (for bugs)
<!--- Provide a sample suite that reproduces the bug. -->
```javascript
describe("sample", function() {
});
```
## Context
<!--- How has this issue affected you? What are you trying to accomplish? -->
<!--- Providing context helps us come up with a solution that is most useful in the real world -->

## Your Environment
<!--- Include as many relevant details about the environment you experienced the bug in -->
* Version used:
* Environment name and version (e.g. Chrome 39, node.js 5.4):
* Operating System and version (desktop or mobile):
* Link to your project:

I've been working through the process of getting Jasmine up and running with a Rails 6 project using webpack.  I'm no webpack expert, but I quickly learned that webpack is very aggressive at isolating JS code in separate files.  That means spec files have to actually import/require the files containing the code under test, which then means that Jasmine really has to be compiled by webpack.  So, I create a Jasmine pack, and I ran into the dreaded 'jasmineRequire is not defined' error.

I found this referenced in #1377 and #1280 without resolution.  I haven't looked at those issues in great detail, but I believe it's clear that this problem originates in Jasmine, not the calling libraries.  The beginning of the problem lies in the definition of `jasmineRequire` in **jasmine.js**:

```javascript
  if (typeof module !== 'undefined' && module.exports && typeof exports !== 'undefined') {
    ...
    jasmineRequire = exports;
  } else {
    ...
    jasmineRequire = jasmineGlobal.jasmineRequire = {};
  }
```
In old, asset pipeline world this just tacks `jasmineRequire` onto the global object (window), and other files access it all higgledy piggledy from there; no worries.  But, in new, webpack world, this assigns `jasmineRequire` as the export from the file, available to other files that _require_ this file.  At pack compile time the global objects assigned to `window` don't appear to be available to other files.

The files **jasmine-html.js** and **boot.js** both reference `jasmineRequire` without requiring the **jasmine.js** file which defines it, assuming it exists in the global scope.  Hence the missing reference, the failure to load, and general worldwide unhappiness.  The solution, as presented here, is simply to have those two files require **jasmine.js** in the case that `window.jasmineRequire` is not available.

I've made this change locally and Jasmine loads happily.  Peace and prosperity return to all the land.

@ragaskar 
@infews 
@slackersoft 


<!--- Provide a general summary of the issue in the Title above -->
the title says what is meant if the jasmine spec receives an exception and my code handles it, the spec should not fail, the spec should continue 
to test the feature that I expect to pass in my code

## Expected Behavior
if the test code handles an error jasmine should not fail becuase an exception is thrown by the js code

## Current Behavior
onerror, the spec fails even though the js fn handles the error 

## Suite that reproduces the behavior (for bugs)
src/app/e-dispatch.component.spec.ts
inline (same content
import { async, ComponentFixture, TestBed } from '@angular/core/testing';

import { EDispatchComponent } from './e-dispatch.component';

describe('EDispatchComponent', () => {
  let component: EDispatchComponent;
  let fixture: ComponentFixture<EDispatchComponent>;

  beforeEach(async(() => {
    TestBed.configureTestingModule({
      declarations: [ EDispatchComponent ]
    })
    .compileComponents();
  }));

  beforeEach(() => {
    fixture = TestBed.createComponent(EDispatchComponent);
    component = fixture.componentInstance;
    fixture.detectChanges();
  });

  it('should create', () => {
    expect(component).toBeTruthy();
  });


  it('should not fail other test if I call AfterViewInit w the dispatch invocation inside create', () => {
    spyOn(component,'ngAfterViewInit').and.callThrough()
    component.ngAfterViewInit()
  });  

  it('its not supposed to fail but if the code it tested sees an exceptioon it wil fail', () => {
    expect(component).toBeTruthy();
  });  

  it('its not supposed to fail but if the code it tested sees an exceptioon it wil fail', () => {
    expect(component).toBeTruthy();
  });  
  
  it('its not supposed to fail but if the code it tested sees an exceptioon it wil fail', () => {
    expect(component).toBeTruthy();
  });  
  
  it('its not supposed to fail but if the code it tested sees an exceptioon it wil fail', () => {
    expect(component).toBeTruthy();
  });    
});
)


## Context
I perform CI on my web app to deal with nasty bugs but how can I use this framework when I have to spend time on recreating the production environment
and having test fail on simulation that is given wrong weight values almost as if its telling me how I should code my work. this is a a base version as most bug reports request
but if you contact me to see the actual bug where the error is handled not by throwing an error but by handling the event trigger with a different event trigger contact me.
Jasmine should not automate what fails or passes in the realm of programming language features such as no-ops and error handling, the developer should always decide


## Your Environment
System: Linux Ubuntu 16.04.5 Xenial
System Architecture: amd64
node -v 10.17.0
npm - 6.11.3
Angular 7.2.0
refer to ./package.json ./package.lock-json and src/karma.conf.js  to better replicate





Developer bug filing format


System: Linux Ubuntu 16.04.5 Xenial
System Architecture: amd64
node -v 10.17.0
npm - 6.11.3
refer to ./package.json ./package.lock-json and src/karma.conf.js  to better replicate



description: window dispatchEvent in app code causes memory leak and specs to fail in different areas of the application

solution: use another framework

attempt scripts: ErrorComponent.spec.ts

command: ng test
run command inside directory of Angular 7 project





path to attempts: ./

file sturture : Angular 7 project file structure, expect the specific spec to be found in /src/app/e-dispatch


[errorHandled-memory-leak.zip](https://github.com/jasmine/jasmine/files/3793747/errorHandled-memory-leak.zip)

Use setProperty to attach information to spec results that can be
picked up in specialized jasmine reporters.  Example use-cases
include:
  * Tagging specs with URLs or string-tokens referencing test-plan docs.
  * Recording performance information for blocks of JS.

<!--- Provide a general summary of your changes in the Title above -->

## Description
<!--- Describe your changes in detail -->

## Motivation and Context
<!--- Why is this change required? What problem does it solve? -->
<!--- If it fixes an open issue, please link to the issue here. -->

## How Has This Been Tested?
unit and integration tests

## Types of changes
<!--- What types of changes does your code introduce? Put an `x` in all the boxes that apply: -->
- [ ] Bug fix (non-breaking change which fixes an issue)
- [ X] New feature (non-breaking change which adds functionality)
- [ ] Breaking change (fix or feature that would cause existing functionality to change)

## Checklist:
<!--- Go over all the following points, and put an `x` in all the boxes that apply. -->
<!--- If you're unsure about any of these, don't hesitate to ask. We're here to help! -->
- [X ] My code follows the code style of this project.
- [X ] My change requires a change to the documentation.
- [ ] I have updated the documentation accordingly.
- [ X] I have read the **CONTRIBUTING** document.
- [X ] I have added tests to cover my changes.
- [ X] All new and existing tests passed.


## Description

Adds an `.asyncTick()` method to `jasmine.Clock`, and to the internal `DelayedFunctionScheduler`. These are just a slight variation on the existing `.tick()` methods, but they allow microtasks to run.

There is an existing loop in `DelayedFunctionScheduler` for running the scheduled timeouts/intervals.
I just want to make that an async loop, and call clearStack() to run any pending microtasks.
Simple.

Unfortunately, it requires transforming the code.
I changed the existing loop into an async loop, using a state machine with a switch statement. (This is how babel transpiles async-await, although I did this manually.)

## Motivation and Context
Closes #1725 

This makes it possible to test code that uses timeouts in combination with Promises or async-await.

## How Has This Been Tested?

I'm fairly confident that the existing tests verify the transformed loop with the switch statement.
Thus, I've only added a handful of tests that verify microtasks get run.
* one for the initial queue pumping.
* one for the subsequent queue pumping.
* one to verify that setTimeout and asyncTick interact as expected.

Problems:
* At the moment the tests use async-await, but once the review is close to the end, I'll manually convert them from async-await to ES5.
* I have only run this on node.js. I will have to do something different in the browser, and I'm not sure how to handle IE which doesn't even have Promises.

## Types of changes
- [ ] Bug fix (non-breaking change which fixes an issue)
- [x] New feature (non-breaking change which adds functionality)
- [ ] Breaking change (fix or feature that would cause existing functionality to change)

## Checklist:
- [x] My code follows the code style of this project.
- [x] My change requires a change to the documentation.
- [ ] I have updated the documentation accordingly.
- [x] I have read the **CONTRIBUTING** document.
- [x] I have added tests to cover my changes.
- [x] All new and existing tests passed.

Currently, using `spyOnAllFunctions` on a module that has a mix of functions and classes breaks the class constructors.

## Example Behavior

```
class RetryableError extends Error {
    retry() { }
}

const API = {
    RetryableError,
    makeRequest: () => {}
};

describe('API', function () {
    it('works', function () {
        spyOnAllFunctions(API);

        new API.RetryableError().retry();
        // -> Error: "retry" is not a function (the new returns {})

        API.RetryableError.and.callThrough();

        new API.RetryableError().retry();
        // -> Error: Class constructor RetryableError cannot be invoked without 'new'
    });
});
```

## Possible Solution
It seems like the best solution is to ignore constructors, because once you spy on one, you can't "fix it" with `.and.callThrough()` (and in general, spying on constructors is an anti-pattern).

## Your Environment
* node 8.x, 10.x
* jasmine 3.4.0/3.5.0

Error occurs on this line when `error` is undefined.: https://github.com/jasmine/jasmine/blob/ef3f127d270ccbbd6dde3fe161e0e85474f19369/lib/jasmine-core/jasmine.js#L3805

The error displayed isn't too helpful:
![image](https://user-images.githubusercontent.com/11065417/67304195-6164d200-f4eb-11e9-87b1-6291ded208e8.png)


Seems to be caused by an unhandled promise rejection but does not occur within any specific test.

Could it be to do with the use of `async`?
<!--- Provide a general summary of your changes in the Title above -->

## Description
<!--- Describe your changes in detail -->

This is a PR to add a skip() functionality to jasmine. I am still working on this, but wanted to make a WIP PR in case anyone would like to leave feedback as I work on this (mostly because this is going to be a somewhat large addition). 

## Motivation and Context
<!--- Why is this change required? What problem does it solve? -->
<!--- If it fixes an open issue, please link to the issue here. -->

The issue covers this in depth, I'll do a better write up once this PR is more fleshed out.

https://github.com/jasmine/jasmine/issues/1709

## How Has This Been Tested?
<!--- Please describe in detail how you tested your changes. -->
<!--- Include details of your testing environment, and the tests you ran to -->
<!--- see how your change affects other areas of the code, etc. -->

There will be unit tests based on the specification of the original issue.

## Types of changes
<!--- What types of changes does your code introduce? Put an `x` in all the boxes that apply: -->
- [ ] Bug fix (non-breaking change which fixes an issue)
- [x] New feature (non-breaking change which adds functionality)
- [ ] Breaking change (fix or feature that would cause existing functionality to change)

## Checklist:
<!--- Go over all the following points, and put an `x` in all the boxes that apply. -->
<!--- If you're unsure about any of these, don't hesitate to ask. We're here to help! -->
- [ ] My code follows the code style of this project.
- [ ] My change requires a change to the documentation.
- [ ] I have updated the documentation accordingly.
- [ ] I have read the **CONTRIBUTING** document.
- [ ] I have added tests to cover my changes.
- [ ] All new and existing tests passed.

