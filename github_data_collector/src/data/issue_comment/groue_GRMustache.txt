As of the most current iOS version (12.1), using a filter such as `uppercase` or `lowercase` causes the rendering to fail with an error such as the following:

`Object does not conform to GRMustacheFilter protocol in tag '{{ uppercase(depthString) }}' at line 1 of template`

I dug into the debugger on the error and noticed something strange when [this line](https://github.com/groue/GRMustache/blob/master/src/classes/Rendering/GRMustacheExpressionInvocation.m#L83) of `GRMustacheExpressionInvocation.m` is executed:

<img width="500" alt="image" src="https://user-images.githubusercontent.com/50223/48637695-7e6c5900-e99c-11e8-95e7-20eafec4c9f7.png">

The `_value`, `_filterExpression` and `argumentExpression` look fine, but why is `filter` a `BOOL`? Without being familiar with the internals, I so far have no idea how it could arrive at this state.

The strange thing is that this works without error on the simulator (also iOS 12.1)! I also tried `lowercase` for kicks â€“ same results. When I remove the filter, it works on both device and simulator...

I am using GRMustache 7.3.2 (currently the latest).

Any idea of what the issue may be? I'm not doing any crazy multithreading so a memory stomp seems unlikely (and besides, I can reproduce this _every time_ based on the input).
If I try to import this library in a .mm file I get this error when compling

    /Pods/Headers/Public/GRMustache/GRMustacheTag.h:60:116: Cannot initialize a variable of type 'const GRMustacheTagType' with an rvalue of type 'int'

I'm using the latest version
Probably related to https://github.com/groue/GRMustache/issues/57
I am trying to include GRMustache through Swift Package Manager, but I end up with this message `Users/.../Desktop/Chase/DMFTool/.build/checkouts/GRMustache.swift--1656010681189343053: error: invalid target name at 'Tests/Carthage'; the name of test targets must end in 'Tests'`

Also, note this is a command line tool app.
Please can you release a new cocoapods version. The version in cocoapods repo is not in sync with the latest version in your repo
any updates?
There is a crash in GRMustacheImplicitIteratorExpression.m when running on OS X 10.8. It seems that the issue is related to the initialize function in that simply modifying the function:
- (void)initialize
  {
  instance = [[self alloc] init];
  }

into:
- (void)load
  {
  instance = [[self alloc] init];
  }

would make it wok on OS X 10.8

It seems that `[GRMustache preventNSUndefinedKeyExceptionAttack]` [no longer exists](https://github.com/groue/GRMustache/commit/b263b773c1b3845a82c4274d046944afae40cf3c). Is that correct?

If so, shouldn't we update the [FAQ](https://github.com/groue/GRMustache/blob/master/Guides/faq.md) and remove the [JRSwizzle dependency](https://github.com/groue/GRMustache/blob/master/GRMustache.podspec#L15)?

I'd like to add the static libary to a project, but it is not compatible anymore because of lacking bitcode. I also didn't find an xCode project to build the static library with that flag enabled. Is there an easy way to solve this?

I'm not sure what your requirements are for adding a new operating system to GRMustache, but I wanted to start a conversation with you about adding tvOS support to the project. I'm using GRMustache an app for tvOS, and would love to have support officially included so I don't have to work about tracking patches. Let me know what else I need to do!
- Add a tvOS target to the xcodeproj and rules to the makefile to build a tvOS-compatible library.
- Enable Bitcode for iOS and tvOS (it's required on tvOS)

GRMustache v8.0.0 (follow up to PR https://github.com/groue/GRMustache/pull/97)
- [ ] Update documentation
- [ ] Make sure we have [Core Data tests](https://github.com/groue/GRMustache/pull/100#commitcomment-13255087).
- [ ] More common tests between GRMustache and GRMustache.swift.

**New**
- [x] Frameworks for iOS.
- [x] Frameworks for OSX.
- [x] Frameworks for tvOS (in [tvOS](https://github.com/groue/GRMustache/tree/tvOS) branch).
- [x] [Carthage](https://github.com/Carthage/Carthage) support.

**Fixed**
- [x] Issue https://github.com/groue/GRMustache/issues/98

**Breaking Changes**
- [x] GRMustacheOSX.framework targets OSX 10.9.
- [x] GRMustacheiOS.framework targets iOS 8.0.
- [x] Improved compatibility with [GRMustache.swift](https://github.com/groue/GRMustache.swift).
  - [x] Shared [tests suite](http://github.com/groue/GRMustacheSpec) with GRMustache.swift.
  - [x] Common behavior for standard types
    - [x] NSArray only recognizes the `first`, `last` and `count` keys.
    - [x] NSOrderedSet only recognizes the `first`, `last` and `count` keys.
    - [x] NSSet only recognizes the `first` and `count` keys.
    - [x] NSString only recognizes the `length` key.
  - [x] Standard Library
    - [x] The standard library is no longer loaded by default.
    - [x] New `zip` standard library filter.
  - [x] Explicit support for Mustache lambdas.
  - [x] `{{#partial}}...{{/partial}}` provides dynamic template inheritance.
  - [ ] Drop support for `{{#x}}...{{^x}}...{{/x}}` short syntax.
  - [x] `+[GRMustacheTemplate templateFromString:error:]` does no longer look for partials in main bundle's resources.
- [x] The new protocol GRMustacheKeyValueCoding replaces GRMustacheSafeKeyAccess (fixes #66 for good).
  - [x] No more support for "unsafe" contexts.
  - [x] GRMustache no longer uses `objectForKeyedSubscript:` for objects that respond to this protocol. This behavior now requires explicit conformance to GRMustacheKeyValueCoding.
