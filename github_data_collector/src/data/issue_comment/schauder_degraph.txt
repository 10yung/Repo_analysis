Scala 2.12, JVM target 1.8 and so on.
When an edge is selected in yED, then in the Properties View the flyover of the Data::Description field will show the edge source and destination. This is useful in very nested graphs to see the exact route of a dependency.
Given the following class:


public class ClassWithTypeAnnotations<T> //    implements clause:
        implements @TypeAnno1 ClassWithTypeParam<@TypeAnno2 T> {


    //    Class instance creation expression:
    private Object x = new @TypeAnno3 Object();

    private @TypeAnno6 Object str = "Hallo";

    //    Type cast:
    public String myString = (@TypeAnno4 String) str;

    //    Thrown exception declaration:
    public void throwsAnnotatedException() throws @TypeAnno5 SQLException {
    }

    @Override
    public @TypeAnno2 T doSomething() {
        try{
            @TypeAnno8 String local = new String();

        } catch (@TypeAnno7 RuntimeException re){

        }

        return null;
    }
}

there should be dependencies from `ClassWithTypeAnnotations` to `TypeAnno8` and `TypeAnno7`
but there aren't. So annotations on local variables and on catch blocks don't get found properly.

I just cloned this repo because it seems to do exactly what I want it to. However, the two gradlew commands (test and installApp) fails with the following message:

```
matsbror@Mats-SurfaceBook:~/src/degraph$ ./gradlew test

FAILURE: Build failed with an exception.

* What went wrong:
A problem occurred configuring root project 'degraph'.
> Could not resolve all dependencies for configuration ':classpath'.
   > Could not find com.github.ben-manes:gradle-versions-plugin:0.5-beta-5.
     Searched in the following locations:
         https://github.com/ben-manes/gradle-versions-plugin/raw/mvnrepo/com/github/ben-manes/gradle-versions-plugin/0.5-beta-5/gradle-versions-plugin-0.5-beta-5.pom
         https://github.com/ben-manes/gradle-versions-plugin/raw/mvnrepo/com/github/ben-manes/gradle-versions-plugin/0.5-beta-5/gradle-versions-plugin-0.5-beta-5.jar
         https://repo1.maven.org/maven2/com/github/ben-manes/gradle-versions-plugin/0.5-beta-5/gradle-versions-plugin-0.5-beta-5.pom
         https://repo1.maven.org/maven2/com/github/ben-manes/gradle-versions-plugin/0.5-beta-5/gradle-versions-plugin-0.5-beta-5.jar
     Required by:
         :degraph:0.1.3

* Try:
Run with --stacktrace option to get the stack trace. Run with --info or --debug option to get more log output.

BUILD FAILED
```

I got the same message on Ubunti, mingw64 bash and Windows PowerShell.

Any help would be appreciated.
Seems like the ASM version used in the Gradle plugin is out of date:

```
[...]
Executing task ':junit-platform-commons-java-9:degraph' (up-to-date check took 0.0 secs) due to:
  Task has failed previously.
:junit-platform-commons-java-9:degraph FAILED
:junit-platform-commons-java-9:degraph (Thread[Task worker for ':',5,main]) completed. Took 0.006 secs.

FAILURE: Build failed with an exception.

* Where:
Script 'C:\Dev\Github\junit-team\junit5\gradle\degraph.gradle' line: 46

* What went wrong:
Execution failed for task ':junit-platform-commons-java-9:degraph'.
> java.lang.IllegalArgumentException (no error message)

* Try:
Run with --debug option to get more log output.

* Exception is:
org.gradle.api.tasks.TaskExecutionException: Execution failed for task ':junit-platform-commons-java-9:degraph'.
	at org.gradle.api.internal.tasks.execution.ExecuteActionsTaskExecuter.executeActions(ExecuteActionsTaskExecuter.java:100)
	at org.gradle.api.internal.tasks.execution.ExecuteActionsTaskExecuter.execute(ExecuteActionsTaskExecuter.java:70)
	at org.gradle.api.internal.tasks.execution.SkipUpToDateTaskExecuter.execute(SkipUpToDateTaskExecuter.java:63)
	at org.gradle.api.internal.tasks.execution.ResolveTaskOutputCachingStateExecuter.execute(ResolveTaskOutputCachingStateExecuter.java:54)
	at org.gradle.api.internal.tasks.execution.ValidatingTaskExecuter.execute(ValidatingTaskExecuter.java:58)
	at org.gradle.api.internal.tasks.execution.SkipEmptySourceFilesTaskExecuter.execute(SkipEmptySourceFilesTaskExecuter.java:88)
	at org.gradle.api.internal.tasks.execution.ResolveTaskArtifactStateTaskExecuter.execute(ResolveTaskArtifactStateTaskExecuter.java:52)
	at org.gradle.api.internal.tasks.execution.SkipTaskWithNoActionsExecuter.execute(SkipTaskWithNoActionsExecuter.java:52)
	at org.gradle.api.internal.tasks.execution.SkipOnlyIfTaskExecuter.execute(SkipOnlyIfTaskExecuter.java:54)
	at org.gradle.api.internal.tasks.execution.ExecuteAtMostOnceTaskExecuter.execute(ExecuteAtMostOnceTaskExecuter.java:43)
	at org.gradle.api.internal.tasks.execution.CatchExceptionTaskExecuter.execute(CatchExceptionTaskExecuter.java:34)
	at org.gradle.execution.taskgraph.DefaultTaskGraphExecuter$EventFiringTaskWorker$1.run(DefaultTaskGraphExecuter.java:248)
	at org.gradle.internal.progress.DefaultBuildOperationExecutor$RunnableBuildOperationWorker.execute(DefaultBuildOperationExecutor.java:336)
	at org.gradle.internal.progress.DefaultBuildOperationExecutor$RunnableBuildOperationWorker.execute(DefaultBuildOperationExecutor.java:328)
	at org.gradle.internal.progress.DefaultBuildOperationExecutor.execute(DefaultBuildOperationExecutor.java:197)
	at org.gradle.internal.progress.DefaultBuildOperationExecutor.run(DefaultBuildOperationExecutor.java:107)
	at org.gradle.execution.taskgraph.DefaultTaskGraphExecuter$EventFiringTaskWorker.execute(DefaultTaskGraphExecuter.java:241)
	at org.gradle.execution.taskgraph.DefaultTaskGraphExecuter$EventFiringTaskWorker.execute(DefaultTaskGraphExecuter.java:230)
	at org.gradle.execution.taskgraph.DefaultTaskPlanExecutor$TaskExecutorWorker.processTask(DefaultTaskPlanExecutor.java:124)
	at org.gradle.execution.taskgraph.DefaultTaskPlanExecutor$TaskExecutorWorker.access$200(DefaultTaskPlanExecutor.java:80)
	at org.gradle.execution.taskgraph.DefaultTaskPlanExecutor$TaskExecutorWorker$1.execute(DefaultTaskPlanExecutor.java:105)
	at org.gradle.execution.taskgraph.DefaultTaskPlanExecutor$TaskExecutorWorker$1.execute(DefaultTaskPlanExecutor.java:99)
	at org.gradle.execution.taskgraph.DefaultTaskExecutionPlan.execute(DefaultTaskExecutionPlan.java:625)
	at org.gradle.execution.taskgraph.DefaultTaskExecutionPlan.executeWithTask(DefaultTaskExecutionPlan.java:580)
	at org.gradle.execution.taskgraph.DefaultTaskPlanExecutor$TaskExecutorWorker.run(DefaultTaskPlanExecutor.java:99)
	at org.gradle.internal.concurrent.ExecutorPolicy$CatchAndRecordFailures.onExecute(ExecutorPolicy.java:63)
	at org.gradle.internal.concurrent.ManagedExecutorImpl$1.run(ManagedExecutorImpl.java:46)
	at org.gradle.internal.concurrent.ThreadFactoryImpl$ManagedThreadRunnable.run(ThreadFactoryImpl.java:55)
Caused by: java.lang.IllegalArgumentException
	at org.objectweb.asm.ClassReader.<init>(Unknown Source)
	at org.objectweb.asm.ClassReader.<init>(Unknown Source)
	at org.objectweb.asm.ClassReader.<init>(Unknown Source)
	at de.schauderhaft.degraph.analysis.asm.Analyzer$.de$schauderhaft$degraph$analysis$asm$Analyzer$$analyze$1(Analyzer.scala:32)
	at de.schauderhaft.degraph.analysis.asm.Analyzer$$anonfun$analyze$1$$anonfun$apply$1.apply(Analyzer.scala:51)
	at de.schauderhaft.degraph.analysis.asm.Analyzer$$anonfun$analyze$1$$anonfun$apply$1.apply(Analyzer.scala:50)
	at scala.collection.immutable.Set$Set2.foreach(Set.scala:111)
	at de.schauderhaft.degraph.analysis.asm.Analyzer$$anonfun$analyze$1.apply(Analyzer.scala:50)
	at de.schauderhaft.degraph.analysis.asm.Analyzer$$anonfun$analyze$1.apply(Analyzer.scala:47)
	at scala.collection.IndexedSeqOptimized$class.foreach(IndexedSeqOptimized.scala:33)
	at scala.collection.mutable.ArrayOps$ofRef.foreach(ArrayOps.scala:186)
	at de.schauderhaft.degraph.analysis.asm.Analyzer$.analyze(Analyzer.scala:47)
	at de.schauderhaft.degraph.configuration.Configuration.createGraph(Configuration.scala:26)
	at de.schauderhaft.degraph.check.Check$$anon$1.apply(Check.scala:56)
	at de.schauderhaft.degraph.check.Check$$anon$1.apply(Check.scala:53)
	at de.schauderhaft.degraph.check.hamcrest.HamcrestWrapper.matchesSafely(HamcrestWrapper.scala:8)
	at org.hamcrest.TypeSafeMatcher.matches(TypeSafeMatcher.java:65)
	at org.hamcrest.core.Is.matches(Is.java:27)
	at org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:12)
	at org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:8)
	at org.hamcrest.MatcherAssert$assertThat.callStatic(Unknown Source)
	at DegraphCheck.runDegraph(C:\Dev\Github\junit-team\junit5\gradle\degraph.gradle:46)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at org.gradle.internal.reflect.JavaMethod.invoke(JavaMethod.java:73)
	at org.gradle.api.internal.project.taskfactory.DefaultTaskClassInfoStore$StandardTaskAction.doExecute(DefaultTaskClassInfoStore.java:141)
	at org.gradle.api.internal.project.taskfactory.DefaultTaskClassInfoStore$StandardTaskAction.execute(DefaultTaskClassInfoStore.java:134)
	at org.gradle.api.internal.project.taskfactory.DefaultTaskClassInfoStore$StandardTaskAction.execute(DefaultTaskClassInfoStore.java:121)
	at org.gradle.api.internal.AbstractTask$TaskActionWrapper.execute(AbstractTask.java:731)
	at org.gradle.api.internal.AbstractTask$TaskActionWrapper.execute(AbstractTask.java:705)
	at org.gradle.api.internal.tasks.execution.ExecuteActionsTaskExecuter$1.run(ExecuteActionsTaskExecuter.java:122)
	at org.gradle.internal.progress.DefaultBuildOperationExecutor$RunnableBuildOperationWorker.execute(DefaultBuildOperationExecutor.java:336)
	at org.gradle.internal.progress.DefaultBuildOperationExecutor$RunnableBuildOperationWorker.execute(DefaultBuildOperationExecutor.java:328)
	at org.gradle.internal.progress.DefaultBuildOperationExecutor.execute(DefaultBuildOperationExecutor.java:197)
	at org.gradle.internal.progress.DefaultBuildOperationExecutor.run(DefaultBuildOperationExecutor.java:107)
	at org.gradle.api.internal.tasks.execution.ExecuteActionsTaskExecuter.executeAction(ExecuteActionsTaskExecuter.java:111)
	at org.gradle.api.internal.tasks.execution.ExecuteActionsTaskExecuter.executeActions(ExecuteActionsTaskExecuter.java:92)
	... 27 more

```
Hi Jens,

thanks for the great Tool! 

I am curious if there is or will there be a possibility to only generate dependencies on a given package level.

Thank you,
Christian
When running degraph without arguments, it generates a huge graphml file with what appear to be scala's dependencies. 

Attempting to open this graph with graph editors such as Gephi (which reports ~10k nodes and complains on most properties) or yEd (which understands the nesting, but still shows nothing useful, even after some tinkering) results in unreadable graphs. As far as defaults go, it is not specially informative, and may be more appropriate as a stress test than an example. 

A simpler example would be a better (and gentler) introduction to the tool.
Inspired by feedback in #78 and others.

There should be more logs in order to help finding problems with slicings

- [ ] log if there is a pattern that gets never used
- [ ] log the slices of each slicing and how many classes are in each slice
Hi in the documentation I found 
```
classpath().withSlicing(
		"mainVsTest",
		"de.schauderhaft.**(Test)",
		new NamedPattern("main", "de.schauderhaft.*.**"))
```
how ever it seems that the name must be defined at the end. So
```
classpath().withSlicing(
		"mainVsTest",
		"de.schauderhaft.**(Test)",
		new NamedPattern("de.schauderhaft.*.**", "main"))
```
should be correct. However even then a test like
```
       ConstraintBuilder testObject =
                classpath().noJars().
                including(SZE_BASE_PACKAGE + "**").
                excluding("**.package-info").
                withSlicing(
                        "mainVsTest",
                        SZE_BASE_PACKAGE + ".**(Test)",
                        new NamedPattern(SZE_BASE_PACKAGE + ".*.**", "main")).
                allow("main", "Test");
        assertThat(testObject, is(violationFree()));
```
doesn't fail, even if I only allow the wrong direction. I came to this issue, trying to define a test which disallow references to any class which is in the package  `**.(impl).**`.  Again it's hard to track or debug the slice-definition.
Is there a way to express that classes of a more general package must not access classes of more specialized (or sub) packages?

**Rationale**: based on an hexagonal architecture style I have my domain classes for example in
`com.enterprise.business.domain`
The corresponding repository interface is
`com.enterprise.business.domain.repo`
The specific mongodb implementation could be in
`com.enterprise.business.domain.repo.mongodb`
etc

So classes in an outer (e.g. `com.enterprise.business.domain.repo.mongodb`) package can access classes in the base `com.enterprise.business.domain` package, but never the other way around.
I would like to express this restriction in a general manner.
Something like: a class in some package `X` must not access a class in some package `Y` where `X` is a package prefix of `Y`.
