#### Summary:
The naming scheme used to reconstruct the stanfit object in read_stan_csv is different than the original rstan::sampling output

<details closed>
<summary> <span title='Click to Expand'> shredder::rat_data </span> </summary>

```r

$N
[1] 30

$T
[1] 5

$x
[1]  8 15 22 29 36

$y
# A tibble: 30 x 5
    day8 day15 day22 day29 day36
   <int> <int> <int> <int> <int>
 1   151   199   246   283   320
 2   145   199   249   293   354
 3   147   214   263   312   328
 4   155   200   237   272   297
 5   135   188   230   280   323
 6   159   210   252   298   331
 7   141   189   231   275   305
 8   159   201   248   297   338
 9   177   236   285   350   376
10   134   182   220   260   296
11   160   208   261   313   352
12   143   188   220   273   314
13   154   200   244   289   325
14   171   221   270   326   358
15   163   216   242   281   312
16   160   207   248   288   324
17   142   187   234   280   316
18   156   203   243   283   317
19   157   212   259   307   336
20   152   203   246   286   321
21   154   205   253   298   334
22   139   190   225   267   302
23   146   191   229   272   302
24   157   211   250   285   323
25   132   185   237   286   331
26   160   207   257   303   345
27   169   216   261   295   333
28   157   205   248   289   316
29   137   180   219   258   291
30   153   200   244   286   324

$xbar
[1] 22


```

</details>
<br>

<details closed>
<summary> <span title='Click to Expand'> system.file('rats.stan',package='shredder') </span> </summary>

```stan

data {
  int<lower=0> N;
  int<lower=0> T;
  real x[T];
  real y[N,T];
  real xbar;
}
parameters {
  real alpha[N];
  real beta[N];

  real mu_alpha;
  real mu_beta;          // beta.c in original bugs model

  real<lower=0> sigmasq_y;
  real<lower=0> sigmasq_alpha;
  real<lower=0> sigmasq_beta;
}
transformed parameters {
  real<lower=0> sigma_y;       // sigma in original bugs model
  real<lower=0> sigma_alpha;
  real<lower=0> sigma_beta;

  sigma_y = sqrt(sigmasq_y);
  sigma_alpha = sqrt(sigmasq_alpha);
  sigma_beta = sqrt(sigmasq_beta);
}
model {
  mu_alpha ~ normal(0, 100);
  mu_beta ~ normal(0, 100);
  sigmasq_y ~ inv_gamma(0.001, 0.001);
  sigmasq_alpha ~ inv_gamma(0.001, 0.001);
  sigmasq_beta ~ inv_gamma(0.001, 0.001);
  alpha ~ normal(mu_alpha, sigma_alpha); // vectorized
  beta ~ normal(mu_beta, sigma_beta);  // vectorized
  for (n in 1:N)
    for (t in 1:T) 
      y[n,t] ~ normal(alpha[n] + beta[n] * (x[t] - xbar), sigma_y);

}
generated quantities {
  real alpha0;
  alpha0 = mu_alpha - xbar * mu_beta;
}

```

</details>
<br>

``` r
library(shredder)
library(rstan)
#> Loading required package: StanHeaders
#> Loading required package: ggplot2
#> rstan (Version 2.19.2, GitRev: 2e1f913d3ca3)
#> For execution on a local, multicore CPU with excess RAM we recommend calling
#> options(mc.cores = parallel::detectCores()).
#> To avoid recompilation of unchanged Stan programs, we recommend calling
#> rstan_options(auto_write = TRUE)

junk <- capture.output({ #verbose doesnt work in reprex
  fit <- rstan::stan(
    file  = system.file('rats.stan',package='shredder'),
    data  = shredder::rat_data,verbose = FALSE
  )  
})
#> Warning: There were 1 transitions after warmup that exceeded the maximum treedepth. Increase max_treedepth above 10. See
#> http://mc-stan.org/misc/warnings.html#maximum-treedepth-exceeded
#> Warning: Examine the pairs() plot to diagnose sampling problems
#> Warning: The largest R-hat is 1.05, indicating chains have not mixed.
#> Running the chains for more iterations may help. See
#> http://mc-stan.org/misc/warnings.html#r-hat
#> Warning: Bulk Effective Samples Size (ESS) is too low, indicating posterior means and medians may be unreliable.
#> Running the chains for more iterations may help. See
#> http://mc-stan.org/misc/warnings.html#bulk-ess
#> Warning: Tail Effective Samples Size (ESS) is too low, indicating posterior variances and tail quantiles may be unreliable.
#> Running the chains for more iterations may help. See
#> http://mc-stan.org/misc/warnings.html#tail-ess

m <- stan_model(system.file('rats.stan',package='shredder'))

td <- file.path(tempdir(),'test')
dir.create(td)

junk <- capture.output({ #verbose doesnt work in reprex
f <- sampling(m, data = shredder::rat_data,sample_file = file.path(td,'samp'),verbose = FALSE)
})

from_csv <- rstan::read_stan_csv(list.files(td,full.names = TRUE))

class(from_csv)
#> [1] "stanfit"
#> attr(,"package")
#> [1] "rstan"

class(fit)
#> [1] "stanfit"
#> attr(,"package")
#> [1] "rstan"

names(from_csv@sim$samples[[1]])
#>  [1] "alpha.1"       "alpha.2"       "alpha.3"       "alpha.4"      
#>  [5] "alpha.5"       "alpha.6"       "alpha.7"       "alpha.8"      
#>  [9] "alpha.9"       "alpha.10"      "alpha.11"      "alpha.12"     
#> [13] "alpha.13"      "alpha.14"      "alpha.15"      "alpha.16"     
#> [17] "alpha.17"      "alpha.18"      "alpha.19"      "alpha.20"     
#> [21] "alpha.21"      "alpha.22"      "alpha.23"      "alpha.24"     
#> [25] "alpha.25"      "alpha.26"      "alpha.27"      "alpha.28"     
#> [29] "alpha.29"      "alpha.30"      "beta.1"        "beta.2"       
#> [33] "beta.3"        "beta.4"        "beta.5"        "beta.6"       
#> [37] "beta.7"        "beta.8"        "beta.9"        "beta.10"      
#> [41] "beta.11"       "beta.12"       "beta.13"       "beta.14"      
#> [45] "beta.15"       "beta.16"       "beta.17"       "beta.18"      
#> [49] "beta.19"       "beta.20"       "beta.21"       "beta.22"      
#> [53] "beta.23"       "beta.24"       "beta.25"       "beta.26"      
#> [57] "beta.27"       "beta.28"       "beta.29"       "beta.30"      
#> [61] "mu_alpha"      "mu_beta"       "sigmasq_y"     "sigmasq_alpha"
#> [65] "sigmasq_beta"  "sigma_y"       "sigma_alpha"   "sigma_beta"   
#> [69] "alpha0"        "lp__"

names(fit@sim$samples[[1]])
#>  [1] "alpha[1]"      "alpha[2]"      "alpha[3]"      "alpha[4]"     
#>  [5] "alpha[5]"      "alpha[6]"      "alpha[7]"      "alpha[8]"     
#>  [9] "alpha[9]"      "alpha[10]"     "alpha[11]"     "alpha[12]"    
#> [13] "alpha[13]"     "alpha[14]"     "alpha[15]"     "alpha[16]"    
#> [17] "alpha[17]"     "alpha[18]"     "alpha[19]"     "alpha[20]"    
#> [21] "alpha[21]"     "alpha[22]"     "alpha[23]"     "alpha[24]"    
#> [25] "alpha[25]"     "alpha[26]"     "alpha[27]"     "alpha[28]"    
#> [29] "alpha[29]"     "alpha[30]"     "beta[1]"       "beta[2]"      
#> [33] "beta[3]"       "beta[4]"       "beta[5]"       "beta[6]"      
#> [37] "beta[7]"       "beta[8]"       "beta[9]"       "beta[10]"     
#> [41] "beta[11]"      "beta[12]"      "beta[13]"      "beta[14]"     
#> [45] "beta[15]"      "beta[16]"      "beta[17]"      "beta[18]"     
#> [49] "beta[19]"      "beta[20]"      "beta[21]"      "beta[22]"     
#> [53] "beta[23]"      "beta[24]"      "beta[25]"      "beta[26]"     
#> [57] "beta[27]"      "beta[28]"      "beta[29]"      "beta[30]"     
#> [61] "mu_alpha"      "mu_beta"       "sigmasq_y"     "sigmasq_alpha"
#> [65] "sigmasq_beta"  "sigma_y"       "sigma_alpha"   "sigma_beta"   
#> [69] "alpha0"        "lp__"

R.version.string
#> [1] "R version 3.6.1 (2019-07-05)"

packageVersion("rstan")
#> [1] '2.19.2'

details::details(sessioninfo::session_info(),summary = 'R Session Info')
```

<details closed>

<summary> <span title="Click to Expand"> R Session Info </span> </summary>

``` r

─ Session info ──────────────────────────────────────────────────────────
 setting  value                       
 version  R version 3.6.1 (2019-07-05)
 os       macOS Mojave 10.14.5        
 system   x86_64, darwin15.6.0        
 ui       X11                         
 language (EN)                        
 collate  en_US.UTF-8                 
 ctype    en_US.UTF-8                 
 tz       America/New_York            
 date     2020-01-17                  

─ Packages ──────────────────────────────────────────────────────────────
 package     * version    date       lib source                         
 assertthat    0.2.1      2019-03-21 [1] CRAN (R 3.6.0)                 
 backports     1.1.5      2019-10-02 [1] CRAN (R 3.6.0)                 
 callr         3.3.2      2019-09-22 [1] CRAN (R 3.6.0)                 
 checkmate     1.9.4      2019-07-04 [1] CRAN (R 3.6.0)                 
 cli           2.0.1      2020-01-08 [1] CRAN (R 3.6.0)                 
 clipr         0.7.0      2019-07-23 [1] CRAN (R 3.6.0)                 
 codetools     0.2-16     2018-12-24 [1] CRAN (R 3.6.1)                 
 colorspace    1.4-1      2019-03-18 [1] CRAN (R 3.6.0)                 
 crayon        1.3.4      2017-09-16 [1] CRAN (R 3.6.0)                 
 desc          1.2.0      2019-12-01 [1] Github (r-lib/desc@61205f6)    
 details       0.2.1      2020-01-12 [1] local                          
 digest        0.6.23     2019-11-23 [1] CRAN (R 3.6.0)                 
 dplyr         0.8.3      2019-07-04 [1] CRAN (R 3.6.0)                 
 evaluate      0.14       2019-05-28 [1] CRAN (R 3.6.0)                 
 fansi         0.4.1      2020-01-08 [1] CRAN (R 3.6.0)                 
 ggplot2     * 3.2.1      2019-08-10 [1] CRAN (R 3.6.0)                 
 glue          1.3.1.9000 2020-01-07 [1] Github (tidyverse/glue@b9ffe6c)
 gridExtra     2.3        2017-09-09 [1] CRAN (R 3.6.0)                 
 gtable        0.3.0      2019-03-25 [1] CRAN (R 3.6.0)                 
 highr         0.8        2019-03-20 [1] CRAN (R 3.6.0)                 
 htmltools     0.4.0      2019-10-04 [1] CRAN (R 3.6.0)                 
 httr          1.4.1      2019-08-05 [1] CRAN (R 3.6.0)                 
 inline        0.3.15     2018-05-18 [1] CRAN (R 3.6.0)                 
 knitr         1.25       2019-09-18 [1] CRAN (R 3.6.0)                 
 lazyeval      0.2.2      2019-03-15 [1] CRAN (R 3.6.0)                 
 lifecycle     0.1.0      2019-08-01 [1] CRAN (R 3.6.0)                 
 loo           2.1.0      2019-03-13 [1] CRAN (R 3.6.0)                 
 magrittr      1.5        2014-11-22 [1] CRAN (R 3.6.0)                 
 matrixStats   0.54.0     2018-07-23 [1] CRAN (R 3.6.0)                 
 munsell       0.5.0      2018-06-12 [1] CRAN (R 3.6.0)                 
 pillar        1.4.3      2019-12-20 [1] CRAN (R 3.6.0)                 
 pkgbuild      1.0.6      2019-10-09 [1] CRAN (R 3.6.1)                 
 pkgconfig     2.0.3      2019-09-22 [1] CRAN (R 3.6.0)                 
 png           0.1-7      2013-12-03 [1] CRAN (R 3.6.0)                 
 prettyunits   1.0.2      2015-07-13 [1] CRAN (R 3.6.0)                 
 processx      3.4.1      2019-07-18 [1] CRAN (R 3.6.0)                 
 ps            1.3.0      2018-12-21 [1] CRAN (R 3.6.0)                 
 purrr         0.3.3      2019-10-18 [1] CRAN (R 3.6.0)                 
 R6            2.4.1      2019-11-12 [1] CRAN (R 3.6.0)                 
 Rcpp          1.0.3      2019-11-08 [1] CRAN (R 3.6.1)                 
 rematch2      2.1.0      2019-07-11 [1] CRAN (R 3.6.0)                 
 rlang         0.4.2      2019-11-23 [1] CRAN (R 3.6.0)                 
 rmarkdown     2.0        2019-12-12 [1] CRAN (R 3.6.0)                 
 rprojroot     1.3-2      2018-01-03 [1] CRAN (R 3.6.0)                 
 rstan       * 2.19.2     2019-07-09 [1] CRAN (R 3.6.0)                 
 scales        1.1.0      2019-11-18 [1] CRAN (R 3.6.0)                 
 sessioninfo   1.1.1      2018-11-05 [1] CRAN (R 3.6.0)                 
 shredder    * 0.1.1      2019-12-20 [1] local                          
 StanHeaders * 2.18.1-10  2019-06-14 [1] CRAN (R 3.6.0)                 
 stringi       1.4.3      2019-03-12 [1] CRAN (R 3.6.0)                 
 stringr       1.4.0      2019-02-10 [1] CRAN (R 3.6.0)                 
 tibble        2.1.3      2019-06-06 [1] CRAN (R 3.6.0)                 
 tidyselect    0.2.5      2018-10-11 [1] CRAN (R 3.6.0)                 
 withr         2.1.2      2018-03-15 [1] CRAN (R 3.6.0)                 
 xfun          0.10       2019-10-01 [1] CRAN (R 3.6.0)                 
 xml2          1.2.2      2019-08-09 [1] CRAN (R 3.6.0)                 
 yaml          2.2.0      2018-07-25 [1] CRAN (R 3.6.0)                 

[1] /Library/Frameworks/R.framework/Versions/3.6/Resources/library
```

</details>

<br>

<sup>Created on 2020-01-17 by the [reprex package](https://reprex.tidyverse.org) (v0.3.0)</sup>
#### Summary:

When supplying a list of 4 lists for initialization and specifying `chains = 4`, the 1st element is not used and the 4th element is duplicated. 




#### Reproducible Steps:

```
library(rstan)

binormal_model <- stan_model('binormal.stan')
inits <- list(list(theta = c(8, 8)), list(theta = c(8, -8)),
              list(theta = c(-8, 8)), list(theta = c(-8, -8)))
its <- 30
fit <- sampling(binormal_model, init = inits, chains = 4, iter = its,
                control = list(stepsize = 1e-3), seed = 1234)
draws <- extract(fit, permuted = FALSE, inc_warmup = TRUE, pars = c("theta"))
df1 <- data.frame(theta1 = draws[ , 1, 1], theta2 = draws[ , 1, 2])
df2 <- data.frame(theta1 = draws[ , 2, 1], theta2 = draws[ , 2, 2])
df3 <- data.frame(theta1 = draws[ , 3, 1], theta2 = draws[ , 3, 2])
df4 <- data.frame(theta1 = draws[ , 4, 1], theta2 = draws[ , 4, 2])

traceplot <- traceplot(fit, inc_warmup = TRUE)

library(ggplot2)
traceplot2d <-
  ggplot(df1, aes(x = theta1, y = theta2)) +
  geom_path(data = df1, color = "red") +
  geom_path(data = df2, color = "yellow") +
  geom_path(data = df3, color = "blue") +
  geom_path(data = df4, color = "green")
```
#### Current Output:

The first init, (8, 8), is not used, and the fourth init, (-8, -8), is used twice.  Here's the traceplot and the 2D traceplot:

![tp](https://user-images.githubusercontent.com/3383807/71217111-9cd11200-228a-11ea-88e0-0eb58cccdea1.png)

![tp2d](https://user-images.githubusercontent.com/3383807/71217117-a2c6f300-228a-11ea-8bfb-35be256e943d.png)


#### Expected Output:

The four inits given to be used.


#### RStan Version:

```
> sessionInfo()
R version 3.5.0 (2018-04-23)
Platform: x86_64-apple-darwin15.6.0 (64-bit)
Running under: macOS  10.15.2

Matrix products: default
BLAS: /Library/Frameworks/R.framework/Versions/3.5/Resources/lib/libRblas.0.dylib
LAPACK: /Library/Frameworks/R.framework/Versions/3.5/Resources/lib/libRlapack.dylib

locale:
[1] en_US.UTF-8/en_US.UTF-8/en_US.UTF-8/C/en_US.UTF-8/en_US.UTF-8

attached base packages:
[1] stats     graphics  grDevices utils     datasets  methods   base     

other attached packages:
[1] rstan_2.19.2          ggplot2_3.1.0         StanHeaders_2.18.1-10

loaded via a namespace (and not attached):
 [1] Rcpp_0.12.18       pillar_1.2.3       compiler_3.5.0     plyr_1.8.4        
 [5] bindr_0.1.1        prettyunits_1.0.2  base64enc_0.1-3    tools_3.5.0       
 [9] digest_0.6.15      pkgbuild_1.0.2     tibble_1.4.2       gtable_0.2.0      
[13] pkgconfig_2.0.2    rlang_0.4.0        cli_1.0.0          parallel_3.5.0    
[17] loo_2.0.0          bindrcpp_0.2.2     gridExtra_2.3      withr_2.1.2       
[21] dplyr_0.7.6        stats4_3.5.0       grid_3.5.0         tidyselect_0.2.4  
[25] glue_1.2.0         inline_0.3.15      R6_2.2.2           processx_3.2.0    
[29] callr_3.0.0        purrr_0.2.5        magrittr_1.5       scales_0.5.0      
[33] ps_1.2.0           codetools_0.2-15   matrixStats_0.54.0 assertthat_0.2.0  
[37] colorspace_1.3-2   labeling_0.3       lazyeval_0.2.1     munsell_0.4.3     
[41] crayon_1.3.4      
```
Dear Stan developers,

In the rstan (*2.19.2*) installation-from-source [page](https://github.com/stan-dev/rstan/wiki/Installing-RStan-from-source-on-Windows#download-and-install-rtools) for Windows when it comes to installing Rtools 3.5 it says:

> **Note that it is NOT necessary to change the path anymore.**

Unfortunately, on my system (Windows 10) this is not true and the paths should be added. It took me a good part of the day to find the problem.



#### Summary:
Passing a string or model code to the ```fit``` argument results in an error about the wrong algorithm being used, rather than the wrong argument.

#### Description:
As discovered by a [user on the forum](https://discourse.mc-stan.org/t/help-with-simple-measurement-model-doesnt-sample/12296).

When calling: ```stan(fit = stan_code,...)``` where ```stan_code``` is a string (rather than ```stanfit``` object), the model compiles and then returns an error about needing to use the ```fixed_param``` algorithm. This doesn't make it clear the problem is with the argument to ```stan()``` and not the choice of sampler.


#### Reproducible Steps:
```
library(rstan) 
stancode <- 'data {real y_mean;} parameters {real y;} model {y ~ normal(y_mean,1);}'
out = stan(fit = stancode,data=list(y_mean=0))

SAMPLING FOR MODEL '81051bcc2cf1bedf378224b0a93e2877' NOW (CHAIN 1).
[1] "Error in sampler$call_sampler(args_list[[i]]) : "                      
[2] "  Must use algorithm=\"Fixed_param\" for model that has no parameters."
[1] "error occurred during calling the sampler; sampling not done"
```

#### RStan Version:
2.19.2

#### R Version:
R version 3.6.1 (2019-07-05)

#### Operating System:
Windows 10

#### Summary:
Upon running a misspecified model in stan, I get no output and my RStudio no longer prints any error messages.

#### Description and Reproducible Steps:
I'm new to Stan (pivoting from JAGS), and trying to learn how get my syntax right.
For a toy example, let's look at the code below:

```
library(data.table)
library(rstan)

rm(list=ls())

chains <- 1
warm<-5000
iterations<-10000

example_data <- data.table(hh_size_mean=c(4.2, 4.1, 3.8, 3.5, 3.2),
                           hh_size_se=c(0.04, 0.09, 0.07, 0.04, 0.01),
                           n_llin_mean=c(0.001, 0.8, 0.5, 0.9, 1.2),
                           n_llin_se=c(0.0001, 0.04, 0.05, 0.02, 0.06),
                           population=c(33652565, 39624762, 40679006, 45085900, 46223996)
                           )
data_list <- c(as.list(example_data), list(N = nrow(example_data)))


survey_model_string <- "
    data{
        int N;
        real<lower=0> hh_size_mean[N];
        real<lower=0> hh_size_se[N];
        real<lower=0> n_llin_mean[N];
        real<lower=0> n_llin_se[N];
        real population[N];
    }
    parameters{
      real<lower=0> hh[N];
      real<lower=0> avg_llin[N];
      real<lower=0> llin_count[N];
    }
    model{
      hh ~ normal(hh_size_mean, hh_size_se);
      avg_llin ~ normal(n_llin_mean, n_llin_se);
      
      for(i in 1:N){
        llin_count[i] = avg_llin[i]*population[i]/hh[i];
      }
    }
    "

survey_prep_model <- stan(model_code=survey_model_string,
                          warmup=warm,
                          data = data_list,
                          chains=chains,
                          iter=iterations,
                          verbose = T
)
```

I'm sure there's something wrong with my Stan code. What I would expect, upon running the `stan()` function, is to see an error message with some description of where things are going wrong. 

Instead, my call to `stan()` prints the following, and no more: 
```
TRANSLATING MODEL 'dabf8abd0c0011e93f78bc1b1c0419d1' FROM Stan CODE TO C++ CODE NOW.
```
Even though the `stan` call does not throw an error, no `survey_prep_model` object is saved to my environment. **Strangely, all RStudio error messages are suppressed as well**.  Executing commands such as `print(nonexistent_object)` or `nonexistent_function(4995)` prints no error to the console. I have to quit and restart RStudio in order to see error messages again.

Running e.g. `print("example_string")` or `packageVersion("rstan")` works as expected, so it is only errors that are suppressed. 

This bug may be related to [this issue](https://github.com/stan-dev/rstan/issues/520), but this model is very small so I wouldn't expect any memory issues.  

#### RStan Version:
2.19.2

#### R Version:
3.6.0

#### Operating System:
10.15.1
As described [here](https://github.com/stan-dev/rstan/issues/716), I've already worked through the fixes associated with having Catalina installed. 

Thanks for your help. 

It would be nice be able to set `open_progress` globally inside `options()` instead that having to set it up in every call. While I can do `formals(stan)$open_progress <- FALSE`, I can't do it with `sampling()` for example that is called by `brms`.
See also https://github.com/paul-buerkner/brms/issues/796

Pairs(stanfit) doesn't seem to allow me to add sampler diagnostics such as "energy__" to the plotted parameters (via argument "pars"). This would be very useful.

Rstan version: 2.19.2
R version 3.6.1
Windows 7

#### Summary:
 
install.packages("rstan") does not compile. 

#### Description:

Call to g++ appears to be truncated during compilation, resulting in a "-o ....{targets}..." call without the necessary "g++ ..." prefix. 

#### Reproducible Steps:

I am running R 3.6.1 on a Ubuntu 16.04 system. My ~/.R/Makevars looks like this:

> CXX14FLAGS=-O3 -march=native -mtune=native
> CXX14 = g++ -std=c++1y -Wno-unused-variable -Wno-unused-function -fPIC

I start R and execute "install.packages('rstan')" .  I don't have steps to reproduce the entire state of my system. 

#### Current Output:

>    template<typename> class auto_ptr;
>                             ^                                                                                         
> -o rstan.so chains.o pointer-tools.o init.o stanc.o misc.o sparse_extractors.o stan/lang/ast_def.o stan/lang/grammars/program_grammar_inst.o stan/lang/grammars/expression_grammar_inst.o stan/lang/grammars/statement_grammar_inst.o stan/lang/grammars/expression07_grammar_inst.o stan/lang/grammars/statement_2_grammar_inst.o stan/lang/grammars/block_var_decls_grammar_inst.o stan/lang/grammars/term_grammar_inst.o stan/lang/grammars/indexes_grammar_inst.o stan/lang/grammars/semantic_actions_def.o stan/lang/grammars/whitespace_grammar_inst.o stan/lang/grammars/bare_type_grammar_inst.o stan/lang/grammars/local_var_decls_grammar_inst.o stan/lang/grammars/functions_grammar_inst.o -L/usr/lib/R/lib -lR 
> /bin/bash: line 2: -o: command not found
> /usr/share/R/share/make/shlib.mk:6: recipe for target 'rstan.so' failed 

Previous steps in the compilation process look fine and work, e.g.:

`g++ -std=c++1y -Wno-unused-variable -Wno-unused-function -fPIC -std=c++1y -I/usr/share/R/include -DNDEBUG -I"../inst/include" [truncated]`

#### Expected Output:
I'd expect the call to begin with "g++" along with the supplied arguments. 

#### RStan Version:
Attempting to install 2.19.2. 

#### R Version:
3.6.1
#### Operating System:
Ubuntu 16.04
#### Summary:

For the OpenCL code we need access to the OpenCL header below. Can we include that file in StanHeaders? I'm not sure if there are any packages in CRAN that have that file already

https://github.com/stan-dev/math/blob/develop/lib/opencl_2.1.0/cl.hpp
#### Summary:
Standalone generated quantities via ``qgs()`` don't work with transformed parameters. 


#### Description:
[See this discourse topic:](https://discourse.mc-stan.org/t/function-gqs-not-working-properly-with-transformed-parameters-in-rstan-2-19-9/11755) Using transformed parameters leads to error ``Wrong number of parameter values in draws from fitted model.  Expecting 2 columns, found 3 columns.`` which, I guess, comes from [``stan/src/stan/services/sample/standalone_gqs.hpp``](https://github.com/stan-dev/stan/blob/736311d88e99b997f5b902409752fb29d6ec0def/src/stan/services/sample/standalone_gqs.hpp#L92).


#### Reproducible Steps:
```
library(rstan)
rstan_options(auto_write = TRUE)
options(mc.cores = parallel::detectCores())

sc <- "
transformed data{
  vector[10] y = [4.65, 6.02, 4.92, 4.77, 8.12, 6.93, 7.39, 7.6, 5.68, 2.14]';
}
parameters{
  real mu;
  real log_sigma;
}
transformed parameters{
  real<lower=0> sigma = exp(log_sigma);
}
model{
  y ~ normal(mu, sigma);
  mu ~ normal(0, 10);
  log_sigma ~ normal(0, 2.5);
}

"

sm <- stan_model(model_code = sc)

post <- sampling(sm)

sc_gq <- "
parameters{
  real mu;
  real log_sigma;
}
transformed parameters{
  real<lower=0> sigma = exp(log_sigma);
}
generated quantities{
  vector[10] y_rep;
  
  for (i in 1:10)
    y_rep[i] = normal_rng(mu, sigma);
}

"

sm_gq <- stan_model(model_code = sc_gq)

rep <- gqs(sm_gq, draws = as.matrix(post))

rep
```

#### Current Output:
```
Wrong number of parameter values in draws from fitted model.  Expecting 2 columns, found 3 columns.

Inference for Stan model: 9a372375694ef14366f13bf8c7378254.
1 chains, each with iter=4000; warmup=0; thin=1; 
post-warmup draws per chain=4000, total post-warmup draws=4000.

          mean se_mean sd 2.5% 25% 50% 75% 97.5% n_eff Rhat
y_rep[1]     0     NaN  0    0   0   0   0     0   NaN  NaN
y_rep[2]     0     NaN  0    0   0   0   0     0   NaN  NaN
y_rep[3]     0     NaN  0    0   0   0   0     0   NaN  NaN
y_rep[4]     0     NaN  0    0   0   0   0     0   NaN  NaN
y_rep[5]     0     NaN  0    0   0   0   0     0   NaN  NaN
y_rep[6]     0     NaN  0    0   0   0   0     0   NaN  NaN
y_rep[7]     0     NaN  0    0   0   0   0     0   NaN  NaN
y_rep[8]     0     NaN  0    0   0   0   0     0   NaN  NaN
y_rep[9]     0     NaN  0    0   0   0   0     0   NaN  NaN
y_rep[10]    0     NaN  0    0   0   0   0     0   NaN  NaN

Samples were drawn using  at Tue Nov 05 15:31:10 2019.
For each parameter, n_eff is a crude measure of effective sample size,
and Rhat is the potential scale reduction factor on split chains (at 
convergence, Rhat=1).
```


#### Expected Output:
```
Inference for Stan model: bdf3c0b7af993ed90b29cc81706a90ea.
1 chains, each with iter=4000; warmup=0; thin=1; 
post-warmup draws per chain=4000, total post-warmup draws=4000.

          mean se_mean   sd 2.5%  25%  50%  75% 97.5% n_eff Rhat
y_rep[1]  5.82    0.04 2.16 1.54 4.51 5.82 7.08 10.20  3487    1
y_rep[2]  5.83    0.03 2.14 1.54 4.51 5.85 7.13  9.99  3851    1
y_rep[3]  5.82    0.04 2.16 1.64 4.44 5.83 7.13 10.17  3743    1
y_rep[4]  5.75    0.04 2.19 1.36 4.48 5.75 7.10 10.09  3354    1
y_rep[5]  5.85    0.03 2.14 1.77 4.48 5.81 7.17 10.21  3879    1
y_rep[6]  5.82    0.03 2.14 1.52 4.52 5.83 7.15 10.07  3830    1
y_rep[7]  5.83    0.04 2.17 1.60 4.52 5.82 7.13 10.07  3509    1
y_rep[8]  5.86    0.03 2.08 1.64 4.52 5.85 7.17 10.09  3700    1
y_rep[9]  5.83    0.04 2.13 1.54 4.53 5.82 7.14 10.11  3362    1
y_rep[10] 5.77    0.03 2.11 1.72 4.47 5.76 7.08 10.01  3740    1

Samples were drawn using  at Tue Nov 05 15:34:33 2019.
For each parameter, n_eff is a crude measure of effective sample size,
and Rhat is the potential scale reduction factor on split chains (at 
convergence, Rhat=1).
```

#### RStan Version:
```
> packageVersion("rstan")
[1] ‘2.19.9’
```

#### R Version:
```
> R.version.string
[1] "R version 3.6.1 (2019-07-05)"
```

#### Operating System:
Win7 Pro SP1
