In this pr I introduced build stages in travis setup. To make more clear what is happening. Besides that, I introduced an environment variable `DEPENDENCIES` which extends the build matrix with a second axel. Since we are building a library that supports a range of versions of its dependencies we should test against that range. From now on we are sure that all tests will pass on our lowest and highest dependencies. 

now executed:
- phpstan
- phpcs
- phpunit
- coverage phpunit
`vfsStreamWrapper::dir_rewinddir` is supposed to return a bool, but returns `void` instead.

It seems `vfsStreamContainerIterator::rewind()` should be fixed so it returns a `bool`, then the stream wrapper can stay simple and return whatever value that returns.

Something like this should fix the issue:
```php
// vfsStreamContainerIterator
    public function rewind()
    {
        $success = reset($this->children);

        return $success !== false;
    }
```
Following up on https://github.com/bovigo/vfsStream/pull/188#issuecomment-485628718, I propose we implement a blacklist of characters.

For example, `/` is now blacklisted after #188. But the `:` character is also invalid on macOS and Windows, not sure about Linux.

Are there any other characters that we should disallow in filenames and directory names?
- Install [Infection](https://infection.github.io/) mutation testing to help detect any untested code.
- Add it to the build process.
  - The build should probably enforce a minimum Mutation Score Indicator (MSI).
- Install [psalm](https://github.com/vimeo/psalm).
- Add it to the build process.

psalm and phpstan used together should ensure quality static analysis, since they both focus on different types of issues.
Since we are a new team within an existing project I would like to define a new github project with issues and notes to make clear what our focus will be. 

## Focus of the project

I think it is clear for everyone in the team that we are working on a library that is able to mock a file system. Currently the project has focused on mocking files and directories. Since those are the most important members of a file system. Are there any other features we might want to support? I don't really have an overview of the supported php file system methods within this library. 

## QA

From my point of view I would like to add a number of tools and checks to make sure we are delivering a stable library. 
 - code style check, prefer https://github.com/doctrine/coding-standard
 - phpstan 
 - psaml 
 - compose-require-checker
 - infection (mutation testing)

I like to use psaml and phpstan together since they both focus on different types of issues. 

I think it is wise to split the test bench into different parts. Currently the unittests and integration tests are kind of mixed in the same directory. Which makes it hard to understand what is actually tested. Personally I would prefer to use phpunit to do the unittesting and use a tool like behat to test on a functional level. 

## Communication

Currently we only have github issues to communicate with the team. Do we want to start some chat channel? Gitter? Slack? 

I would like to hear your additions. So we can get started as a team instead of being a group of developers that do random contributions to the project.

From #166, redacted:

```php
$root = vfsStream::setup('php-unit', 0777);
$root->chown(vfsStream::getCurrentUser());
$root->chgrp(vfsStream::getCurrentGroup());

$file = new vfsStreamFile('file.ext', 0400);
$file->chown(vfsStream::getCurrentUser() + 1);
$file->chgrp(vfsStream::getCurrentGroup() + 1);
$file->content('foobar');
$root->->addChild($file);

var_dump(is_readable($file->url()));
```
Using version **`1.6.5`** I get the following:
```
false
```
Using version **`2.0.x-dev`** I get the following:
```
true
```

As I don't have an explanation for this different behaviour right away this must be investigated.
Feature to test fopen() error cases, to simulate race conditions on
fopen() that is when a readable file becomes unreadable on fopen()
instantly, for example to simulate a file-system failure.
To test some critical paths I would like to test opening a file that is perfectly readable and a file but then to fail (return false) on the fopen() call.

Just to simulate a failure case (e.g. the file is deleted between an internalized is_file / is_readable check before the line where fopen is called - that fopen call could return false which is handled in the code (and should!) but I can't test for that path with vfsstream. 

Looking into the implementation for the stream_open I didn't found any option to simulate such a failure.

~~~
public function open(string $file): void {
    if (!is_file($path) || !is_readable($file)) {
        throw new \BadMethodCallException('Not a readable file');
    }
    $result = fopen($file, 'r');
    if (false === $result) {
        // can't test for this path in code
    }
}
~~~
I have been using this to test some CSV code that makes use of `SplFileObject` for counting the lines in the CSV file.

I have found that using vfs does not return the same count.

## Tests


    /**
     * 8 fails, 2 pass
     * @dataProvider countVfsDataProvider
     */
    public function testCountVfs($data, $expected)
    {
        $file = vfsStream::url('tmp/data.csv');
        file_put_contents($file, $data);

        $file = new \SplFileObject($file, 'r');
        $file->seek($file->getSize());
        $this->assertEquals($expected, $file->key());
    }

    /**
     * 10 passes
     * @dataProvider countVfsDataProvider
     */
    public function testCountVfsNative($data, $expected)
    {
        $file = '/tmp/data.csv';
        file_put_contents($file, $data);

        $file = new \SplFileObject($file, 'r');
        $file->seek($file->getSize());
        $this->assertEquals($expected, $file->key());
    }

    public function countVfsDataProvider()
    {
        return [
            'test-01' => ["header\r\n1\r\n2\r\n3\r\n", 4],
            'test-02' => ["header\n1\n2\n", 3],
            'test-03' => ["header\n1\n2", 2],
            'test-04' => ["header\n1\n,\n,\n,\n", 5],
            'test-05' => ["header\n", 1],
            'test-06' => ['', 0],
            'test-07' => ["\n", 1],
            'test-08' => ["\r\n", 1],
            'test-09' => ["\n\n", 2],
            'test-10' => ["\r\n\r\n", 2],
        ];
    }

## Test output
```
There were 8 failures:

1) VfsTest::testCountVfs with data set "test-01" ('header
1
2
3
', 4)
Failed asserting that 3 matches expected 4.

/path/to/vfs.test.php:82

2) VfsTest::testCountVfs with data set "test-02" ('header
1
2
', 3)
Failed asserting that 2 matches expected 3.

/path/to/vfs.test.php:82

3) VfsTest::testCountVfs with data set "test-04" ('header
1
,
,
,
', 5)
Failed asserting that 4 matches expected 5.

/path/to/vfs.test.php:82

4) VfsTest::testCountVfs with data set "test-05" ('header
', 1)
Failed asserting that 0 matches expected 1.

/path/to/vfs.test.php:82

5) VfsTest::testCountVfs with data set "test-07" ('
', 1)
Failed asserting that 0 matches expected 1.

/path/to/vfs.test.php:82

6) VfsTest::testCountVfs with data set "test-08" ('
', 1)
Failed asserting that 0 matches expected 1.

/path/to/vfs.test.php:82

7) VfsTest::testCountVfs with data set "test-09" ('

', 2)
Failed asserting that 1 matches expected 2.

/path/to/vfs.test.php:82

8) VfsTest::testCountVfs with data set "test-10" ('

', 2)
Failed asserting that 1 matches expected 2.

                                       
FAILURES!                              
Tests: 20, Assertions: 20, Failures: 8.
```