Stuff like 

```
b = tf.zeros(shape = [2,2])
b[ ..., None]
```

is used pretty often from Python; from R though you'd need a workaround...

This PR adds `py_ellipsis()` so we can do

```
b <- tf$zeros(shape = c(2L,2L))
b[reticulate::py_ellipsis(), NULL]
```
I am running the below code chunk with knitr in RStudio. 

```
<<engine='python'>>=

#comment 1
a = True

a[0] = False

#comment 2


@
```

The expected output is that it prints an error immediately after `a[0] = False` but it somehow buffers until after `#comment 2` as indicated below:

![image](https://user-images.githubusercontent.com/7026744/72229561-924e2380-357d-11ea-921a-9c65355f1b4f.png)

My temporary fix is to:

```
<<engine='python', echo=FALSE>>=
def fl():
  import sys
  sys.stdout.flush()
  sys.stderr.flush()
@  

<<engine='python'>>=

#comment 1
a = True

a[0] = False
fl()

#comment 2

@
```
![image](https://user-images.githubusercontent.com/7026744/72229652-3df77380-357e-11ea-928f-f4be6fd69cea.png)

However, I can't be putting `fl()` everywhere. How can I make it print before comment 2 without additional lines of code such as `fl()`?
I'm seeing an issue that has previously been reported (https://github.com/rstudio/reticulate/issues/407#issue-390796282). I'm on RHEL 7

My version of python has been built from source using:

``` bash
./configure --prefix=/opt/python/3.7.6 --with-ensurepip=install --enable-shared --enable-optimizations
make -j 32
sudo make install
```

I've created a virtual environment using 
`renv::use_python(python = "/opt/python/3.7.6/bin/python3.7")`

This creates a virtual environment in the project folder. 
I activate this environment and use pip to install the necessary dependencies.

Here's a print of `reticulate::py_config()`
``` r
python:         /data/analyse_og_indsigt/users/jwa/repos/screenduck/renv/python/virtualenvs/renv-python-3.7.6/bin/python
libpython:      /opt/python/3.7.6/lib/libpython3.7m.so
pythonhome:     /opt/python/3.7.6:/opt/python/3.7.6
version:        3.7.6 (default, Jan  6 2020, 11:37:34)  [GCC 4.8.5 20150623 (Red Hat 4.8.5-39)]
numpy:          /data/analyse_og_indsigt/users/jwa/repos/screenduck/renv/python/virtualenvs/renv-python-3.7.6/lib/python3.7/site-packages/numpy
numpy_version:  1.18.1`

NOTE: Python version was forced by RETICULATE_PYTHON`
```
Everything seems to look fine.

If I run the python pytorch script from R using reticulate, or reticulate::repl, prediction results are random.

If I source the script from within the python virtual environment from the command line, results come out correct.

What could be the reason for this? Thanks a bunch.
(I can supply the pytorch python code if needed, but I don't think that's the issue here)

``` r
─ Session info ─────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 setting  value                       
 version  R version 3.5.1 (2018-07-02)
 os       Red Hat Enterprise Linux    
 system   x86_64, linux-gnu           
 ui       RStudio                     
 language (EN)                        
 collate  en_US.UTF-8                 
 ctype    en_US.UTF-8                 
 tz       Europe/Copenhagen           
 date     2020-01-12                  

─ Packages ─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 ! package     * version   date       lib source        
 P assertthat    0.2.1     2019-03-21 [?] RSPM (R 3.5.1)
 P cli           1.1.0     2019-03-19 [?] RSPM (R 3.5.1)
 P crayon        1.3.4     2017-09-16 [?] RSPM (R 3.5.1)
 P jsonlite      1.6       2018-12-07 [?] RSPM (R 3.5.1)
 P packrat       0.5.0     2018-11-14 [?] RSPM (R 3.5.1)
   png           0.1-7     2013-12-03 [1] RSPM (R 3.5.1)
 P rappdirs      0.3.1     2016-03-28 [?] RSPM (R 3.5.1)
 P Rcpp          1.0.2     2019-07-25 [?] RSPM (R 3.5.1)
   renv          0.7.0-125 2020-01-12 [1] local         
 P reticulate    1.14      2019-12-17 [?] RSPM (R 3.5.1)
 P rstudioapi    0.10      2019-03-19 [?] RSPM (R 3.5.1)
 P sessioninfo   1.1.1     2018-11-05 [?] RSPM (R 3.5.1)
 P withr         2.1.2     2018-03-15 [?] RSPM (R 3.5.1)

[1] /data/analyse_og_indsigt/users/jwa/repos/screenduck/renv/library/R-3.5/x86_64-pc-linux-gnu
[2] /tmp/Rtmp0FA4in/renv-system-library

 P ── Loaded and on-disk path mismatch.
```
Otherwise, packages configuring Python with e.g.

```
.onLoad <- function(libname, pkgname) {
  reticulate::configure_environment(pkgname)
}
```

could inadvertently attempt to configure a system copy of Python.
This ensures that packages do not accidentally behave in a user-hostile way; that is, by disallowing packages from initializing Python before explicitly requested by the user.
Hi,

When running `R` in `RStudio`, my `R` session is unable to "automatically" find the conda binary in order to manage conda environments when using `reticulate`. It works when I explicitly provide the path to the conda binary (or when I run `R` from a shell external to `RStudio`), but I was wondering why it couldn't find conda since I installed anaconda in a pretty standard manner. Running `Sys.which('conda')` turns up nothing, meanwhile running `which conda` in the `RStudio` terminal finds the binary (probably because it searches `PATH`). Does `Sys.which()` not have access to `PATH`? It must not (at least in my case).

I went looking through the source code and noticed that `reticulate:::find_conda()` searches in a lot of standard locations, as shown below. However, as it turns out, my conda binary is located at `/opt/anaconda3/bin/conda`. Is this an unusual location? I'm sure I installed Anaconda in a "normal" way, so I'm wondering if `/opt/...` should be added to `conda_locations` in the below code, in addition to `~/opt/...` and others. For added context, I am on MacOS 10.14.6.

Happy to do submit a simple PR if you agree these paths should be added.

```r
find_conda <- function() {
  conda <- Sys.which("conda")
  if (!nzchar(conda)) {
    conda_locations <- c(
      miniconda_conda(),
      path.expand("~/opt/anaconda/bin/conda"),
      path.expand("~/opt/anaconda2/bin/conda"),
      path.expand("~/opt/anaconda3/bin/conda"),
      path.expand("~/opt/anaconda4/bin/conda"),
      path.expand("~/opt/miniconda/bin/conda"),
      path.expand("~/opt/miniconda2/bin/conda"),
      path.expand("~/opt/miniconda3/bin/conda"),
      path.expand("~/opt/miniconda4/bin/conda"),
      path.expand("~/anaconda/bin/conda"),
      path.expand("~/anaconda2/bin/conda"),
      path.expand("~/anaconda3/bin/conda"),
      path.expand("~/anaconda4/bin/conda"),
      path.expand("~/miniconda/bin/conda"),
      path.expand("~/miniconda2/bin/conda"),
      path.expand("~/miniconda3/bin/conda"),
      path.expand("~/miniconda4/bin/conda"),
      path.expand("/anaconda/bin/conda"),
      path.expand("/anaconda2/bin/conda"),
      path.expand("/anaconda3/bin/conda"),
      path.expand("/anaconda4/bin/conda"),
      path.expand("/miniconda/bin/conda"),
      path.expand("/miniconda2/bin/conda"),
      path.expand("/miniconda3/bin/conda"),
      path.expand("/miniconda4/bin/conda")
    )
    if (is_windows()) {
      anaconda_versions <- windows_registry_anaconda_versions()
      anaconda_versions <- subset(anaconda_versions, anaconda_versions$arch == .Platform$r_arch)
      if (nrow(anaconda_versions) > 0) {
        conda_scripts <- utils::shortPathName(
          file.path(anaconda_versions$install_path, "Scripts", "conda.exe")
        )
        conda_bats <- utils::shortPathName(
          file.path(anaconda_versions$install_path, "condabin", "conda.bat")
        )
        conda_locations <- c(conda_locations, conda_bats, conda_scripts)
      }
    }
    conda_locations <- conda_locations[file.exists(conda_locations)]
    if (length(conda_locations) > 0)
      conda_locations
    else
      NULL
  } else {
    conda
  }
}
```
# Short description:

Calling `use_condaenv()` with a valid Anaconda installation throws a `subscript out of bounds` error.

# Reprex:

Consider this reprex:
``` r
library(reticulate)

py_discover_config()
#> python:         C:/Users/<username>Anaconda3/python.exe
#> libpython:      C:/Users/<username>/Anaconda3/python37.dll
#> pythonhome:     C:/Users/<username>/Anaconda3
#> version:        3.7.4 (default, Aug  9 2019, 18:34:13) [MSC v.1915 64 bit (AMD64)]
#> Architecture:   64bit
#> numpy:          C:/Users/<username>/Anaconda3/Lib/site-packages/numpy
#> numpy_version:  1.16.5
#> 
#> python versions found: 
#>  C:/Users/<username>/Anaconda3/python.exe
#>  C:/Python27/python.exe
#>  C:/Python38/python.exe

use_condaenv()
#> Error in conda_env_python[[1]]: subscript out of bounds

use_condaenv("base")
#> Error in conda_env_python[[1]]: subscript out of bounds

use_condaenv("base", "~/Anaconda3/Scripts/conda.exe")
#> Error: Specified conda binary '~/Anaconda3/Scripts/conda.exe' does not exist.
```

<sup>Created on 2020-01-07 by the [reprex package](https://reprex.tidyverse.org) (v0.3.0)</sup>

# Expected behavior:

There is a valid Anaconda installation, which is reported as the first result by `py_discover_config()`. Thus, `use_condaenv()` or `use_condaenv("base")` should return `TRUE`.

# Observed behavior:

A `subscript out of bounds` error is thrown.

# Session Info:

Here is my sessionInfo:

```r
R version 3.6.2 (2019-12-12) 
Platform: x86_64-w64-mingw32/x64 (64-bit) 
Running under: Windows 10 x64 (build 18363)  

Matrix products: default  

locale: 
[1] LC_COLLATE=English_United States.1252  LC_CTYPE=English_United States.1252    
[3] LC_MONETARY=English_United States.1252 LC_NUMERIC=C                           
[5] LC_TIME=English_United States.1252      

attached base packages: 
[1] stats     graphics  grDevices utils     datasets  methods   base       

loaded via a namespace (and not attached):  
[1] Rcpp_1.0.3      ps_1.3.0        packrat_0.5.0   digest_0.6.23   R6_2.4.1         
[6] jsonlite_1.6    reprex_0.3.0    evaluate_0.14   rlang_0.4.2     fs_1.3.1        
[11] callr_3.4.0     whisker_0.4     reticulate_1.14 rmarkdown_2.0   tools_3.6.2     
[16] xfun_0.11       compiler_3.6.2  processx_3.4.1  clipr_0.7.0     htmltools_0.4.0 
[21] knitr_1.26
```

I am working on windows 10. Installed python 2.7. Open a fresh Rstudio session and Installed the github version of the `reticulate` package. and ran the following 2 commands. Not sure why virtualenv_create() and it resulted in the following error and did not understand what I am missing. 

 ``` r

reticulate::py_config()
#> python:         C:/Python27/python.exe
#> libpython:      python27.dll
#> pythonhome:     C:/Python27
#> version:        2.7.17 (v2.7.17:c2f86d86e6, Oct 19 2019, 21:01:17) [MSC v.1500 64 bit (AMD64)]
#> Architecture:   64bit
#> numpy:          C:/Users/username/AppData/Roaming/Python/Python27/site-packages/numpy
#> numpy_version:  1.16.6

reticulate::virtualenv_create(
  envname = "python27_env",
  python = "C:\\Python27\\python.exe"
)
#> Creating virtual environment "python27_env" ...
#> Using python: C:\Python27\python.exe
#> Warning in system2(python, args): '"C:/Users/username/Documents/.virtualenvs/
#> python27_env/bin/python"' not found
#> Error: Error installing package(s): "pip", "wheel", "setuptools"
```

<sup>Created on 2020-01-06 by the [reprex package](https://reprex.tidyverse.org) (v0.3.0)</sup>

<details>

<summary>Session info</summary>

``` r
devtools::session_info()
#> - Session info ---------------------------------------------------------------
#>  setting  value                       
#>  version  R version 3.5.3 (2019-03-11)
#>  os       Windows 10 x64              
#>  system   x86_64, mingw32             
#>  ui       RTerm                       
#>  language (EN)                        
#>  collate  English_United States.1252  
#>  ctype    English_United States.1252  
#>  tz       America/New_York            
#>  date     2020-01-06                  
#> 
#> - Packages -------------------------------------------------------------------
#>  package     * version   date       lib source                             
#>  assertthat    0.2.1     2019-03-21 [1] CRAN (R 3.5.3)                     
#>  backports     1.1.5     2019-10-02 [1] CRAN (R 3.5.3)                     
#>  callr         3.4.0     2019-12-09 [1] CRAN (R 3.5.3)                     
#>  cli           2.0.0     2019-12-09 [1] CRAN (R 3.5.3)                     
#>  crayon        1.3.4     2017-09-16 [1] CRAN (R 3.5.3)                     
#>  desc          1.2.0     2018-05-01 [1] CRAN (R 3.5.3)                     
#>  devtools      2.2.1     2019-09-24 [1] CRAN (R 3.5.3)                     
#>  digest        0.6.23    2019-11-23 [1] CRAN (R 3.5.3)                     
#>  ellipsis      0.3.0     2019-09-20 [1] CRAN (R 3.5.3)                     
#>  evaluate      0.14      2019-05-28 [1] CRAN (R 3.5.3)                     
#>  fansi         0.4.0     2018-10-05 [1] CRAN (R 3.5.3)                     
#>  fs            1.3.1     2019-05-06 [1] CRAN (R 3.5.3)                     
#>  glue          1.3.1     2019-03-12 [1] CRAN (R 3.5.3)                     
#>  highr         0.8       2019-03-20 [1] CRAN (R 3.5.3)                     
#>  htmltools     0.4.0     2019-10-04 [1] CRAN (R 3.5.3)                     
#>  jsonlite      1.6       2018-12-07 [1] CRAN (R 3.5.3)                     
#>  knitr         1.26      2019-11-12 [1] CRAN (R 3.5.3)                     
#>  lattice       0.20-38   2018-11-04 [1] CRAN (R 3.5.3)                     
#>  magrittr      1.5       2014-11-22 [1] CRAN (R 3.5.3)                     
#>  Matrix        1.2-18    2019-11-27 [1] CRAN (R 3.5.3)                     
#>  memoise       1.1.0     2017-04-21 [1] CRAN (R 3.5.3)                     
#>  pkgbuild      1.0.6     2019-10-09 [1] CRAN (R 3.5.3)                     
#>  pkgload       1.0.2     2018-10-29 [1] CRAN (R 3.5.3)                     
#>  prettyunits   1.0.2     2015-07-13 [1] CRAN (R 3.5.3)                     
#>  processx      3.4.1     2019-07-18 [1] CRAN (R 3.5.3)                     
#>  ps            1.3.0     2018-12-21 [1] CRAN (R 3.5.3)                     
#>  R6            2.4.1     2019-11-12 [1] CRAN (R 3.5.3)                     
#>  rappdirs      0.3.1     2016-03-28 [1] CRAN (R 3.5.3)                     
#>  Rcpp          1.0.3     2019-11-08 [1] CRAN (R 3.5.3)                     
#>  remotes       2.1.0     2019-06-24 [1] CRAN (R 3.5.3)                     
#>  reticulate    1.14-9001 2020-01-06 [1] Github (rstudio/reticulate@94ccbad)
#>  rlang         0.4.2     2019-11-23 [1] CRAN (R 3.5.3)                     
#>  rmarkdown     2.0       2019-12-12 [1] CRAN (R 3.5.3)                     
#>  rprojroot     1.3-2     2018-01-03 [1] CRAN (R 3.5.3)                     
#>  sessioninfo   1.1.1     2018-11-05 [1] CRAN (R 3.5.3)                     
#>  stringi       1.4.3     2019-03-12 [1] CRAN (R 3.5.3)                     
#>  stringr       1.4.0     2019-02-10 [1] CRAN (R 3.5.3)                     
#>  testthat      2.3.1     2019-12-01 [1] CRAN (R 3.5.3)                     
#>  usethis       1.5.1     2019-07-04 [1] CRAN (R 3.5.3)                     
#>  withr         2.1.2     2018-03-15 [1] CRAN (R 3.5.3)                     
#>  xfun          0.11      2019-11-12 [1] CRAN (R 3.5.3)                     
#>  yaml          2.2.0     2018-07-25 [1] CRAN (R 3.5.3)                     
#> 
#> [1] C:/Users/username/Documents/R/R-3.5.3/library
```

</details>

If I run the following code in RStudio:

```r
library(reticulate)
builtins <- import_builtins()
builtins$print("foo")
```

I get no output. However, if I run it from an R terminal, I get the expected output:

```
foo
```

Note that in RStudio, if I later trigger anything in Python with reticulate (even running an empty Python command)

```r
library(reticulate)
builtins <- import_builtins()
builtins$print("foo")
# do some other stuff...
py_run_string("")
```

I will finally see the printed output:

```
foo
```

This is a critical issue in that for Python packages that print messages for the user, a user using RStudio will likely never see the messages, and if they do, it will not be at the time the message was intended to be printed.

Dear Rstudio team,

I have a problem. The cause might be reticulate, shiny or an interaction between both. 

Details of my system: 

```
> sessionInfo()
R version 3.6.2 (2019-12-12)
Platform: x86_64-w64-mingw32/x64 (64-bit)
Running under: Windows 10 x64 (build 17763)

Matrix products: default

locale:
[1] LC_COLLATE=English_Germany.1252  LC_CTYPE=English_Germany.1252    LC_MONETARY=English_Germany.1252
[4] LC_NUMERIC=C                     LC_TIME=English_Germany.1252    

attached base packages:
[1] stats     graphics  grDevices utils     datasets  methods   base     

other attached packages:
[1] readr_1.3.1       data.table_1.12.8 mailR_0.4.1       anytime_0.3.6     DT_0.11          
[6] reticulate_1.14   rmarkdown_2.0     shiny_1.4.0      

loaded via a namespace (and not attached):
 [1] Rcpp_1.0.3        pillar_1.4.3      compiler_3.6.2    later_1.0.0       R.methodsS3_1.7.1
 [6] R.utils_2.9.2     tools_3.6.2       zeallot_0.1.0     digest_0.6.23     jsonlite_1.6     
[11] evaluate_0.14     tibble_2.1.3      pkgconfig_2.0.3   rlang_0.4.2       rstudioapi_0.10  
[16] crosstalk_1.0.0   yaml_2.2.0        xfun_0.11         fastmap_1.0.1     rJava_0.9-11     
[21] stringr_1.4.0     knitr_1.26        rappdirs_0.3.1    htmlwidgets_1.5.1 vctrs_0.2.1      
[26] hms_0.5.2         R6_2.4.1          magrittr_1.5      backports_1.1.5   promises_1.1.0   
[31] htmltools_0.4.0   mime_0.8          xtable_1.8-4      httpuv_1.5.2      stringi_1.4.3    
[36] crayon_1.3.4      R.oo_1.23.0      
> 
```

```
> reticulate::py_config()
python:         C:/ProgramData/Anaconda3/python.exe
libpython:      C:/ProgramData/Anaconda3/python37.dll
pythonhome:     C:/ProgramData/Anaconda3
version:        3.7.0 (default, Jun 28 2018, 08:04:48) [MSC v.1912 64 bit (AMD64)]
Architecture:   64bit
numpy:          C:/ProgramData/Anaconda3/Lib/site-packages/numpy
numpy_version:  1.15.1

python versions found: 
 C:/Users/---/AppData/Local/Programs/Python/Python37-32/python.exe
 C:/ProgramData/Anaconda3/python.exe
```
**The problem:**
I have a a shiny app calling a python file through py_run_file. When I launch the app the first time in a new R session within Rstudio, it works as expected. After stopping the app and launching it again the second time, it crashes (stops without delivered errors). The third time, it works. The fourth time, it crashes, etc. It does not depend on the content of the python file. Moreover, I can call py_run_file without any problems from the R console in RStudio. Morover, if I call the python file from the R console, after a successful launch of the app (and before a potential non-successful launch), then the problem dissapears (the next launch of the app will be also successful). 

If I start the app from the RGui, it crashes and delivers following error: 

```
Warning: Error in sys$stdout$flush: attempt to apply non-function
  49: py_flush_output
  48: py_run_string
  47: py_inject_r
  46: ensure_python_initialized
  45: py_run_file
  44: <observer> [C:\Users\---\Desktop\Test2/server.R#10]
   1: runApp
```


**reprex**
test.py
```
import numpy as np
a=np.array([1,2,3])

```

server.R
```
library(shiny)
library(reticulate)

shinyServer(function(input, output, session) {
    
  observe({
       py_run_file("test.py")
       output$a<- renderText({paste(py$a)})
     
   })
  
})
```

ui.R
```
library(shiny)

shinyUI(fluidPage(
  
  fluidRow( 
    
    column(12, 
           
      h3("Test"),
      h3(textOutput("a"))
           
           
    )
    
  )
  
))
```

**Further details**
The problem is new, it arrised after an update of the R libraries on the 2. January 2020. The previous update was on 3. December 2019. I have removed and installed the older versions of packages which were updated in this period (for example reticulate) - it did not help. I cannot find the cause of the problem.

Please help!

Thanks. 