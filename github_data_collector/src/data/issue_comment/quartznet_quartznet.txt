<!-- For feature requests, just clear out the below -->

### Version: x.y.z
Quartz 3.0.7

### Expected behavior

I have several jobs what i want to fire manually with the scheduler.

### Actual behavior

If i call the scheduler.Start() it will fire all of my registered jobs. I try to pauseAll() or not to call the Start() method and trigger the jobs with the triggerJob(Jobkey) but when i call this, nothing happened.

### Steps to reproduce
I have a quartzHostedService in my asp.net core application, and it runs when i start my app.
This is the hosted service start method where i create the scheduler and registered all of my jobs.
        public async Task StartAsync(CancellationToken cancellationToken)
        {
            await SchedulerController.InitializeScheduler(_schedulerFactory, _jobFactory);

            foreach (var jobSchedule in _jobSchedules)
            {
                var job = CreateJob(jobSchedule);
                var trigger = CreateTrigger(jobSchedule);
                SchedulerController.JobDetails.Add(job);
                await SchedulerController.Scheduler.ScheduleJob(job, trigger, cancellationToken);
            }
            await SchedulerController.Scheduler.Start();
            var jobDetail = SchedulerController.JobDetails.FirstOrDefault(key => key.Description =="xyJob");
            await SchedulerController.Scheduler.PauseAll(cancellationToken);
            await SchedulerController.Scheduler.TriggerJob(jobDetail.Key);
        }
       private static IJobDetail CreateJob(JobSchedule schedule)
        {
            var jobType = schedule.JobType;
            return JobBuilder
                .Create(jobType)
                .WithIdentity(jobType.FullName)
                .WithDescription(jobType.Name)
                .UsingJobData("Name",jobType.Name)
                .StoreDurably(true)
                .Build();
        }

        private static ITrigger CreateTrigger(JobSchedule schedule)
        {
            return TriggerBuilder
                .Create()
                .WithIdentity($"{schedule.JobType.FullName}.trigger")
                .WithCronSchedule(schedule.CronExpression)
                .WithDescription(schedule.CronExpression)
                .Build();
        }
This is my schedularController class:

 public static class SchedulerController
    {
        public static IScheduler Scheduler { get; set; }

        public static List<IJobDetail> JobDetails { get; set; }

        public static List<ITrigger> Triggers { get; set; }

        public static async Task InitializeScheduler(ISchedulerFactory schedulerFactory, IJobFactory jobFactory)
        {
            Scheduler = await schedulerFactory.GetScheduler();
            JobDetails = new List<IJobDetail>();
            Triggers = new List<ITrigger>();
            Scheduler.JobFactory = jobFactory;
        }
    }

I create my jobs in the startup.cs.

public void ConfigureServices(IServiceCollection services)
        {
            //Add quartz services
            services.AddSingleton<IJobFactory, SingletonJobFactory>();
            services.AddSingleton<ISchedulerFactory, StdSchedulerFactory>();
            //Add our job
            services.AddSingleton<xyJob>();
            services.AddSingleton(new JobSchedule(
                jobType: typeof(xyJob),
                cronExpression: "0/3 * * * * ?"));
}
When will the RavenDB job store implementation be ready?
The Quartz.NET Version Migration Guide states that binary serialization is not supported when targeting .NET Core.

We are migrating our application from .NET Framework to .NET Core and so far we have used binary as our serialization format.

Is there an official guide on how to transition from binary to json?
Do we have to manually convert the tables columns from varbinary to varchar and if so which ones and how?

Here is our current configuration:
```csharp
new NameValueCollection
{
    { "quartz.jobStore.type", "Quartz.Impl.AdoJobStore.JobStoreTX, Quartz" },
    { "quartz.serializer.type", "binary" },
    { "quartz.jobStore.dataSource", "myDS" },
    { "quartz.dataSource.myDS.connectionString", "xxxx" },
    { "quartz.dataSource.myDS.provider", "SqlServer" },
    { "quartz.scheduler.instanceName", "xxxx scheduler" },
};
```
Join this repository to .net foundation  will gain visibility https://dotnetfoundation.org/become-a-member


**- Quartz Version used: 3.0.7.0**

 
### Expected behavior

<!-- What did you expect to happen? Or what used to happen in an older version? -->
- In one of our applications, we have used QUARTZ.net. where few jobs misfire instruction has been configured as "WithMisfireHandlingInstructionIgnoreMisfires"  means it execute misfire event whatever events were missed and accordingly set "Next" and "Prev" fire time" when misfire execution completes and **Start_Time** remain same when the first-time these jobs was started. 

### Actual behavior

<!-- What happened instead? -->
- Sometimes we found few of these jobs START_TIME get updated while quartz service is running. Is this suspicious? or expected in any of the conditions . if this is expected, then possible that misfire will get lost?
 
### Steps to reproduce
There are no fixed steps to reproduce these scenarios as it happens intermittently.

It would be great if we know the cause or this is expected behavior.

```csharp
// scheduler and job configuration, SystemTime prefereably set to fixed point
```
properties["quartz.scheduler.instanceName"] = "TestScheduler";
        properties["quartz.scheduler.instanceId"] = "AUTO";
        properties["quartz.threadPool.type"] = "Quartz.Simpl.SimpleThreadPool, Quartz";
        properties["quartz.threadPool.threadCount"] = "50";
        properties["quartz.scheduler.batchTriggerAcquisitionMaxCount"] = "50";
        properties["quartz.jobStore.useProperties"] = "true";
        properties["quartz.jobStore.clustered"] = "true";
        properties["quartz.jobStore.misfireThreshold"] = "60000";
        properties["quartz.jobStore.type"] = "Quartz.Impl.AdoJobStore.JobStoreTX, Quartz";
        properties["quartz.jobStore.tablePrefix"] = "QRTZ_";
        properties["quartz.jobStore.driverDelegateType"] = "Quartz.Impl.AdoJobStore.SqlServerDelegate, Quartz";
        properties["quartz.jobStore.dataSource"] = "default";
        properties["quartz.dataSource.default.connectionString"] = "server=test.database.windows.net;database=QuartzDatabase;persist security info=True;user id=test;password=****;Max Pool Size=53;Pooling=True;Connect Timeout=30;ConnectRetryCount=3; ConnectRetryInterval=10";
        properties["quartz.dataSource.default.provider"] = "SqlServer";
        properties["quartz.jobStore.acquireTriggersWithinLock"] = "true";
        properties["quartz.serializer.type"] = "binary";

<!-- For feature requests, just clear out the below -->

**3.0.6**

The jobs should be handled gracefully and misfired should be triggered for them

When we perform the swap it happens that scheduler was down and on restart the misfired are ignored as well as start time is reset to latest one.

We have enabled the useproperties to true, misfire to excute each missed iteration and RequesryRecovery is also on.


I am receiving the following error while I try to call a controller on my project which uses oWin and Quartz.Net 3.0.7 with Autofac 


### Version: x.y.z
<!-- Include the major/minor version (4.2.1, 5.2.0, 6.0.2 etc) --> 3.0.7

### Expected behavior

Expected it to run without any issues

### Actual behavior

Getting exception

### Steps to reproduce

```csharp
var schedulerConfig = new NameValueCollection
{
    {"quartz.serializer.type", "json"},
    {"quartz.scheduler.instanceName", "Main Quartz Job Scheduler"},
    {"quartz.scheduler.instanceId", "QuartzAdmin"},
};

containerBuilder.RegisterModule(new QuartzAutofacFactoryModule
{
    ConfigurationProvider = c => schedulerConfig
});
```

```
{
"Message": "An error has occurred.",
"ExceptionMessage": "An error occurred when trying to create a controller of type 'QuartzController'. Make sure that the controller has a parameterless public constructor.",
"ExceptionType": "System.InvalidOperationException",
"StackTrace": "   at System.Web.Http.Dispatcher.DefaultHttpControllerActivator.Create(HttpRequestMessage request, HttpControllerDescriptor controllerDescriptor, Type controllerType)\r\n   at System.Web.Http.Dispatcher.HttpControllerDispatcher.<SendAsync>d__15.MoveNext()",
"InnerException": {
"Message": "An error has occurred.",
"ExceptionMessage": "An exception was thrown while activating Chatech.Quartz.Owin.Controllers.QuartzController -> Chatech.Quartz.Owin.Application.JobInformation.JobInformationService -> Î»:Quartz.IScheduler.",
"ExceptionType": "Autofac.Core.DependencyResolutionException",
"StackTrace": "   at Autofac.Core.Resolving.InstanceLookup.Activate(IEnumerable`1 parameters, Object& decoratorTarget) in C:\\projects\\autofac\\src\\Autofac\\Core\\Resolving\\InstanceLookup.cs:line 135\r\n   at Autofac.Core.Resolving.InstanceLookup.Execute() in C:\\projects\\autofac\\src\\Autofac\\Core\\Resolving\\InstanceLookup.cs:line 83\r\n   at Autofac.Core.Resolving.ResolveOperation.GetOrCreateInstance(ISharingLifetimeScope currentOperationScope, IComponentRegistration registration, IEnumerable`1 parameters) in C:\\projects\\autofac\\src\\Autofac\\Core\\Resolving\\ResolveOperation.cs:line 131\r\n   at Autofac.Core.Resolving.ResolveOperation.Execute(IComponentRegistration registration, IEnumerable`1 parameters) in C:\\projects\\autofac\\src\\Autofac\\Core\\Resolving\\ResolveOperation.cs:line 93\r\n   at Autofac.ResolutionExtensions.TryResolveService(IComponentContext context, Service service, IEnumerable`1 parameters, Object& instance) in C:\\projects\\autofac\\src\\Autofac\\ResolutionExtensions.cs:line 1041\r\n   at Autofac.ResolutionExtensions.ResolveOptionalService(IComponentContext context, Service service, IEnumerable`1 parameters) in C:\\projects\\autofac\\src\\Autofac\\ResolutionExtensions.cs:line 814\r\n   at Autofac.Integration.WebApi.AutofacWebApiDependencyScope.GetService(Type serviceType)\r\n   at System.Web.Http.Dispatcher.DefaultHttpControllerActivator.GetInstanceOrActivator(HttpRequestMessage request, Type controllerType, Func`1& activator)\r\n   at System.Web.Http.Dispatcher.DefaultHttpControllerActivator.Create(HttpRequestMessage request, HttpControllerDescriptor controllerDescriptor, Type controllerType)",
"InnerException": {
"Message": "An error has occurred.",
"ExceptionMessage": "Object serializer type 'Quartz.Simpl.JsonObjectSerializer, Quartz.Serialization.Json' could not be instantiated.",
"ExceptionType": "Quartz.SchedulerException",
"StackTrace": "   at Quartz.Impl.StdSchedulerFactory.<Instantiate>d__65.MoveNext() in C:\\projects\\quartznet\\src\\Quartz\\Impl\\StdSchedulerFactory.cs:line 666\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n   at Quartz.Impl.StdSchedulerFactory.<GetScheduler>d__69.MoveNext() in C:\\projects\\quartznet\\src\\Quartz\\Impl\\StdSchedulerFactory.cs:line 1114\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n   at Autofac.Extras.Quartz.QuartzAutofacFactoryModule.<>c.<Load>b__8_2(IComponentContext c) in C:\\work\\autofac.extras.quartz\\src\\Autofac.Extras.Quartz\\QuartzAutofacFactoryModule.cs:line 90\r\n   at Autofac.Builder.RegistrationBuilder.<>c__DisplayClass0_0`1.<ForDelegate>b__0(IComponentContext c, IEnumerable`1 p) in C:\\projects\\autofac\\src\\Autofac\\Builder\\RegistrationBuilder.cs:line 62\r\n   at Autofac.Core.Activators.Delegate.DelegateActivator.ActivateInstance(IComponentContext context, IEnumerable`1 parameters) in C:\\projects\\autofac\\src\\Autofac\\Core\\Activators\\Delegate\\DelegateActivator.cs:line 72\r\n   at Autofac.Core.Resolving.InstanceLookup.Activate(IEnumerable`1 parameters, Object& decoratorTarget) in C:\\projects\\autofac\\src\\Autofac\\Core\\Resolving\\InstanceLookup.cs:line 117",
"InnerException": {
"Message": "An error has occurred.",
"ExceptionMessage": "Could not load type 'Quartz.Simpl.JsonObjectSerializer, Quartz.Serialization.Json'",
"ExceptionType": "System.TypeLoadException",
"StackTrace": "   at Quartz.Simpl.SimpleTypeLoadHelper.LoadType(String name) in C:\\projects\\quartznet\\src\\Quartz\\Simpl\\SimpleTypeLoadHelper.cs:line 58\r\n   at Quartz.Impl.StdSchedulerFactory.<Instantiate>d__65.MoveNext() in C:\\projects\\quartznet\\src\\Quartz\\Impl\\StdSchedulerFactory.cs:line 653"
}
}
}
}
```


netcoreï¼3.0

Program.cs

``` 
public static void Main(string[] args)
        {
            BuildWebHost(args).Run();
        }

public static IWebHost BuildWebHost(string[] args)
        {
            return WebHost.CreateDefaultBuilder(args)
               .UseUrls(MyWebConfig.TimedScanUrl)
               .UseStartup<Startup>()
               .ConfigureLogging((hostContext, configLogging) =>
               {
                   configLogging.AddConsole();
               })
               .Build();
        }

``` 
Startup.cs

``` 
public Startup(IConfiguration configuration, ILoggerFactory factory, IHostingEnvironment env)
        {
            EnvironmentName = env.EnvironmentName;
            Configuration = configuration;
            var builder = new ConfigurationBuilder()
                .SetBasePath(env.ContentRootPath)
                .AddJsonFile("appsettings.json", optional: true, reloadOnChange: true)
                .AddJsonFile($"appsettings.{env.EnvironmentName}.json", optional: true)
                .AddEnvironmentVariables();
              Configuration = builder.Build();
        }
        public IConfiguration Configuration { get; }
        public string EnvironmentName { get; }
        private void ConfigureQuartz(IServiceCollection services, params Type[] jobs)
        {
            services.AddSingleton<IJobFactory, JobFactory>();
            foreach (ServiceDescriptor serviceDescriptor in jobs.Select(jobType => new ServiceDescriptor(jobType, jobType, ServiceLifetime.Singleton)))
            {
                services.Add(serviceDescriptor);
            }
            services.AddSingleton(provider =>
            {
                var schedulerFactory = new StdSchedulerFactory();
                var scheduler = schedulerFactory.GetScheduler().Result;
                scheduler.JobFactory = provider.GetService<IJobFactory>();
                scheduler.Start();
                return scheduler;
            });
        }
        protected void ConfigureJobsIoc(IServiceCollection services)
        {
            var types = new Type[] {
                typeof(TestJob)
            };
            ConfigureQuartz(services, types);
        }
        public void ConfigureServices(IServiceCollection services)
        {
            services.AddLogging();
            services.AddHttpContextAccessor();
            services.AddSingleton<IActionContextAccessor, ActionContextAccessor>();
            ConfigureJobsIoc(services);
            services.AddHttpContextAccessor();
        }
        protected void StartJobs(IApplicationBuilder app, IApplicationLifetime lifetime)
        {
            var scheduler = app.ApplicationServices.GetService<IScheduler>();
            //TODO: use some config
            QuartzServicesUtilities.StartJob<TestJob>(scheduler, TestJob.TriggerCron);
            lifetime.ApplicationStarted.Register(() => scheduler.Start());
            lifetime.ApplicationStopping.Register(() => scheduler.Shutdown());
        }
        public void Configure(IApplicationBuilder app, IWebHostEnvironment env, ILoggerFactory loggerFactory, IApplicationLifetime lifetime)
        {
            StartJobs(app, lifetime);
            app.Build();
        }
``` 

JobFactory.cs

``` 
public class JobFactory : IJobFactory
    {
        private readonly IServiceProvider _serviceProvider;
        public JobFactory(IServiceProvider serviceProvider)
        {
            _serviceProvider = serviceProvider;
        }
        public IJob NewJob(TriggerFiredBundle bundle, IScheduler scheduler)
        {
            var job = _serviceProvider.GetService(bundle.JobDetail.JobType) as IJob;
            return job;
        }
        public void ReturnJob(IJob job)
        {
        }
    }
``` 

QuartzService.cs

``` 
 public class QuartzService : IHostedService
    {
        private readonly ILogger _logger;
        private readonly IScheduler _scheduler;
        public QuartzService(ILogger<QuartzService> logger, IScheduler scheduler)
        {
            _logger = logger;
            _scheduler = scheduler;
        }
        public async Task StartAsync(CancellationToken cancellationToken)
        {
            _logger.LogInformation("å¼å§Quartzè°åº¦...");
            await _scheduler.Start(cancellationToken);
        }
        public async Task StopAsync(CancellationToken cancellationToken)
        {
            _logger.LogInformation("åæ­¢Quartzè°åº¦...");
            await _scheduler.Shutdown(cancellationToken);
        }
    }
``` 

TestJob.cs

``` 
   public class NotifyJob :  IJob
    {
        public static string TriggerCron => "0/15 * * ? * MON-FRI";
        private readonly ILogger _logger;
        public NotifyJob(ILogger<NotifyJob> logger)
        {
            _logger = logger;
        }
        public Task Execute(IJobExecutionContext context)
        {
            _logger.LogInformation(string.Format($"{System.Reflection.MethodBase.GetCurrentMethod().DeclaringType.FullName}[{DateTime.Now:yyyy-MM-dd hh:mm:ss:ffffff}]ä»»å¡æ§è¡ï¼", DateTime.Now));
            //do some thing
            //send me a message
            return Task.CompletedTask;
        }
    }
``` 

Compile and generate an exe file. When you double-click the runtime, you can execute and send me a message, but when you use Process.Start() to execute the exe file, you can't send me a message.


<!-- For feature requests, just clear out the below -->

### Version: x.y.z
Quartz, Version=3.0.7.0
Unity.Abstractions, Version=5.11.1.0
Unity.Container, Version=5.11.1.0

### Expected behavior
To get an instance of ServiceHost

### Actual behavior

A stackoverflow exception

### Steps to reproduce

```csharp
       class Program
        {
            static void Main(string[] args)
            {
                RunProgram().GetAwaiter().GetResult();
            }

            private static async Task RunProgram()
            {
                var container = new UnityContainer();
                container.RegisterSingleton<ISchedulerFactory, Quartz.Impl.StdSchedulerFactory>();
                container.RegisterSingleton<IServiceHost,ServiceHost>();

                var serviceHost = container.Resolve<IServiceHost>();
                await serviceHost.Start();

                Console.Read();
            }
        }

       public class Download : IJob
        {
            public Task Execute(IJobExecutionContext context)
            {
                return Task.Run(() => Console.WriteLine("Downloading..."));
            }
        }

        public class ServiceHost : IServiceHost
        {
            public ISchedulerFactory SchedulerFactory { get; set; }

            public ServiceHost(ISchedulerFactory schedulerFactory)
            {
                SchedulerFactory = schedulerFactory;
            }

            public async Task Start()
            {
                ....
            }
        }
```

<!-- For feature requests, just clear out the below -->

### Version: 3.0.7
<!-- Include the major/minor version (4.2.1, 5.2.0, 6.0.2 etc) --> 

### Expected behavior

The scheduler should never goes into situation where jobs are stopped triggerring new instances without raising any exception.

### Actual behavior

We have any the quartz in production from last 3 years but in last one year we are frequently getting situation where jobs went in
1. Error State
2. Next_Fire_Time is less than current time and job stopped
3. all the jobs stopped processing and LAST_CHECKIN_TIME was very old
4. Jobs stuck in acquired state

### Steps to reproduce

There are no fixed steps to reproduce these scenarios as it happens intermittently.

Please let us know, how we can improve the reliability of Quartz Scheduler
