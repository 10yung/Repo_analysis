Hello, 

After update POD on IOS 13 i get errors with all my PSRadioGroupSpecifier
The error is located on file IASKAppSettingsViewController.m line 687 	`[_selections[indexPath.section] updateSelectionInCell:cell indexPath:indexPath];`

After investigations, on same file, I change that part :

```
- (void)createSelections {
	NSMutableArray *sectionSelection = [NSMutableArray new];
	for (int i = 0; i < _settingsReader.numberOfSections; i++) {
		IASKSpecifier *specifier = [self.settingsReader headerSpecifierForSection:i];
		if ([specifier.type isEqualToString:kIASKPSRadioGroupSpecifier]) {
			IASKMultipleValueSelection *selection = [[IASKMultipleValueSelection alloc] initWithSettingsStore:self.settingsStore];
			selection.tableView = self.tableView;
			selection.specifier = specifier;
			selection.section = i;
			[sectionSelection addObject:selection];
		} else {
			[sectionSelection addObject:[NSNull null]];
		}
	}
	_selections = sectionSelection;
}
```

with



```
- (void)createSelections {
	NSMutableArray *sectionSelection = [NSMutableArray new];
        NSInteger sectionsNumber = self.settingsReader.numberOfSections;

	for (int i = 0; i < sectionsNumber; i++) {
		IASKSpecifier *specifier = [self.settingsReader headerSpecifierForSection:i];
		if ([specifier.type isEqualToString:kIASKPSRadioGroupSpecifier]) {
			IASKMultipleValueSelection *selection = [[IASKMultipleValueSelection alloc] initWithSettingsStore:self.settingsStore];
			selection.tableView = self.tableView;
			selection.specifier = specifier;
			selection.section = i;
			[sectionSelection addObject:selection];
		} else {
			[sectionSelection addObject:[NSNull null]];
		}
	}
	_selections = sectionSelection;
}
```
Hello,
I would really like to extend the IASKAppSettingsViewController to a custom one and just override the `func settingsViewController(_ sender: IASKAppSettingsViewController!, buttonTappedFor specifier: IASKSpecifier!)`

But my approach of extending IASKAppSettingsViewController and on viewDidLoad() assigning the delegate = self does not work. The settings get display no matter what I do, but the button never reacts to clicks.

Add more and more to my main viewcontroller is not what I want.
With the current version, the *Privacy - Open in Settings app* cell is placed within its own section and  is not possible to modify its position in the table.

So instead of inserting the privacy cell in code as done in `- (void)_reinterpretBundle:(NSDictionary*)settingsBundle`, how do you feel about making it so that the user can specify the location of the privacy settings cell by using a key such as `IASKOpenPrivacySettings` in `Settings.bundle/Root.plist`?
When the settings plist contains the string ApplicationGroupContainerIdentifier and a custom container name, it's not currently used by InAppSettingsKit.  See https://developer.apple.com/library/content/documentation/PreferenceSettings/Conceptual/SettingsApplicationSchemaReference/Articles/RootContent.html for information about this key.  Container groups are used for sharing settings such as between the app and its widgets.

Looking in IASKSettingsStoreUserDefaults, it appears that standardUserDefaults is always used.  This should call initWithSuiteName with the name of the container from the key ApplicationGroupContainerIdentifier.
`- (CGFloat)tableView:(UITableView*)tableView heightForSpecifier:(IASKSpecifier*)specifier;`

might be renamed to heightFor**CustomView**Specifier:

It is confusing as it is now, because it implies the delegate can set height for all types of specifiers. In reality, all are 44 except kIASKCustomViewSpecifier which is actually the only type getting its height from this delegate method.
Thanks for a great product. Will be nice to have a search similar to the iOS settings.
I don't understand the README very well. Thank you very much if you can provide some gif pictures.

I couldn't find any way to change it.
It would be nice at least to transfer color from IASKAppSettingsViewController's background.

Is there any support for validation?  For in-app settings, it would be nice to have min/max length, regex matching, etc...  At minimum, there should be some sort of validation delegate.

This is a selfish request, but since I've only picked up Swift (just started) and not Obj-C I was wondering wether someone could provide a Swift sample of the app which doesn't require understanding Obj-C ? 

PS. Willing to sponsor the work.
