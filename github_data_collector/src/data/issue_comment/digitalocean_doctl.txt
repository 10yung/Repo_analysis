## CVE-2019-11250 - Medium Severity Vulnerability
<details><summary><img src='https://whitesource-resources.whitesourcesoftware.com/vulnerability_details.png' width=19 height=20> Vulnerable Library - <b>k8s.io/client-go/transport-v12.0.0</b></p></summary>

<p>Go client for Kubernetes.</p>
<p>

Dependency Hierarchy:
  - k8s.io/client-go/rest-v12.0.0 (Root Library)
    - k8s.io/client-go/plugin/pkg/client/auth/exec-v12.0.0
      - :x: **k8s.io/client-go/transport-v12.0.0** (Vulnerable Library)
<p>Found in HEAD commit: <a href="https://github.com/digitalocean/doctl/commit/453da140453108806646a0ed3ba03f75b522db0c">453da140453108806646a0ed3ba03f75b522db0c</a></p>
</p>
</details>
<p></p>
<details><summary><img src='https://whitesource-resources.whitesourcesoftware.com/medium_vul.png' width=19 height=20> Vulnerability Details</summary>
<p>  
  
The Kubernetes client-go library logs request headers at verbosity levels of 7 or higher. This can disclose credentials to unauthorized users via logs or command output. Kubernetes components (such as kube-apiserver) prior to v1.16.0, which make use of basic or bearer token authentication, and run at high verbosity levels, are affected.

<p>Publish Date: 2019-08-29
<p>URL: <a href=https://vuln.whitesourcesoftware.com/vulnerability/CVE-2019-11250>CVE-2019-11250</a></p>
</p>
</details>
<p></p>
<details><summary><img src='https://whitesource-resources.whitesourcesoftware.com/cvss3.png' width=19 height=20> CVSS 3 Score Details (<b>6.5</b>)</summary>
<p>

Base Score Metrics:
- Exploitability Metrics:
  - Attack Vector: Network
  - Attack Complexity: Low
  - Privileges Required: Low
  - User Interaction: None
  - Scope: Unchanged
- Impact Metrics:
  - Confidentiality Impact: High
  - Integrity Impact: None
  - Availability Impact: None
</p>
For more information on CVSS3 Scores, click <a href="https://www.first.org/cvss/calculator/3.0">here</a>.
</p>
</details>
<p></p>
<details><summary><img src='https://whitesource-resources.whitesourcesoftware.com/suggested_fix.png' width=19 height=20> Suggested Fix</summary>
<p>

<p>Type: Upgrade version</p>
<p>Origin: <a href="https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-11250">https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-11250</a></p>
<p>Release Date: 2019-08-29</p>
<p>Fix Resolution: 1.16.0</p>

</p>
</details>
<p></p>

***
Step up your Open Source Security Game with WhiteSource [here](https://www.whitesourcesoftware.com/full_solution_bolt_github)
There may be `doctl`, but no `ssh` access for droplet.
Therefore it would be convenient to add SSH keys for existing droplet.
Rerated to: #406
I installed doctl trough snap ```sudo snap install doctl``` and then I give it permissions ```sudo snap connect doctl:ssh-keys :ssh-key```.

But if I try to enter to my droplet via doctl using ```doctl compute ssh _droplet-name_``` it fails to add droplet's IP to the list of known hosts, while if I enter with ssh it works as intended ```ssh -q root@__droplet-ip__ exit```.

Doctl gives the following message:
```
The authenticity of host '__droplet-ip__' can't be established.
ECDSA key fingerprint is SHA256:__droplet-sha__.
Are you sure you want to continue connecting (yes/no)? yes
Failed to add the host to the list of known hosts (/home/username/.ssh/known_hosts).
```
And then continues:
```
Enter passphrase for key '/home/username/.ssh/__keyname__': [...]
```

Is Doctl able to add droplet's IP to the list of known hosts right now? Is this a bug related to Snap/Linux or isn't a present feature?

By the waty, my specs ```npx envinfo``` are the following:
```
  System:
    OS: Linux 5.0 Ubuntu 19.04 (Disco Dingo)
    Container: Yes
    Shell: 3.0.2 - /usr/bin/fish
  Binaries:
    Node: 13.2.0 - ~/.config/nvm/13.2.0/bin/node
    Yarn: 1.19.1 - /usr/bin/yarn
    npm: 6.13.1 - ~/.config/nvm/13.2.0/bin/npm
  Utilities:
    Make: 4.2.1 - /usr/bin/make
    GCC: 8.3.0 - /usr/bin/gcc
    Git: 2.20.1 - /usr/bin/git
  Virtualization:
    Docker: 18.09.7 - /usr/bin/docker
    VirtualBox: 6.0.14 - /usr/bin/vboxmanage
  Languages:
    Bash: 5.0.3 - /bin/bash
    Perl: 5.28.1 - /usr/bin/perl
    Python: 2.7.16 - /usr/bin/python
    Ruby: 2.5.5 - /usr/bin/ruby
  Databases:
    MongoDB: 4.0.13 - /usr/bin/mongo
```
Figured out how to implement this. It required updating Cobra.

Adding the remaining resources won't be too difficult - just tedious.

Still need to figure out how to handle nested completion like:

```
doctl kubernetes cluster node-pool get <cluster-id|cluster-name> <pool-id|pool-name>
```

Closes #699 
The API supports updating a database cluster's firewall rules (known as "trusted sources" in the control panel). Is there a plan/timeline to include this functionality in doctl?

Related Links:
- https://github.com/digitalocean/api-v2/issues/178
- https://developers.digitalocean.com/documentation/changelog/api-v2/managed-databases-firewall-and-sql-mode-management/
- https://developers.digitalocean.com/documentation/v2/#update-firewall-rules--trusted-sources--for-a-database-cluster
doctl is unable to access docker to authenticate to the registry when installed via snap.


```
$ doctl registry login
Error: unable to find the Docker CLI binary. Make sure docker is installed
```
But docker is installed via snap

```
$ docker --version
Docker version 18.09.9, build 1752eb3
```

I believe a slot is needed for doctl snap to support :docker-support interface

Is it possible to have the --user-data and --user-data-file flag work with Droplet rebuild actions
For example instead of running this command:
 `doctl compute droplet action rebuild <droplet-id> <image-id>`
We can have:
 `doctl compute droplet action rebuild <droplet-id> <image-id> --user-data-file='/path/to/user-data.yaml'`

I don't know if this is due to a limitation of doctl or the API itself, but it would be a really nice feature to have.

Please let me know if there's already something similiar in the command line tool, or if there's a beta version with the functionality. 
In some cases, it can be useful to configure `doctl` non-interactively. Currently, we support this when setting up the default context. For example, running the following will validate the token and add it to the `doctl` config file without additional user interaction:

```
doctl auth init -t $DO_TOKEN
Using token [asupersekrettokenthatisverylongidontwanttotypeit]

Validating token... OK
```

If the `--context` flag is added to that command, the token is ignored and the user is prompted to enter the token manually:

```
doctl auth init --context new-context -t $DO_TOKEN
DigitalOcean access token: 
```

The behaviour should be consistent. When passing a token and a context together to `doctl auth init`, we should validate the token and configure a new context to use it without additional user input.
Example: `doctl kubernetes cluster kubeconfig save [tab]` would suggest existing clusters to tab complete.

`kubectl` does this for all existing resources. Looks like the implementation is [here](https://github.com/kubernetes/kubernetes/blob/f2469a7a2c75a78b8c0b0514652511d105d2b2e7/pkg/kubectl/cmd/cmd.go#L155-L166).

Figuring out how this works should only be difficult for the first resource we implement it on.
- this command has detach as its parallel already
- command that was removed has been deprecated for over 2 years
- users should have an easy fix (switch to detach) if they
are even using this action