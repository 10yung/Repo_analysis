Trying to compile on nightlies with `default-features = false`, in a no-std project, results in 

```
error[E0463]: can't find crate for `std`
  |
  = note: the `thumbv7em-none-eabihf` target may not be installed

error: aborting due to previous error

For more information about this error, try `rustc --explain E0463`.
error: could not compile `serde`.
```

Not sure how long back this is an issue.
This adds some support for untagged enums as mentioned in #1717  . But it causes some problems w/ serde-json and I'm not sure how to best handle this. Any suggestions?
Especially for representing GeoJSON, the current pretty formatter is not suited ideally. In GeoJSON, 2-dimensional points are represented as arrays of length 2. In the JS world, GeoJSON is often formatted with libraries like [json-stringify-pretty-compact](https://www.npmjs.com/package/json-stringify-pretty-compact), which have a smart logic of keeping short arrays/objects in a single line. This leads make the output nice and easy to work with:

<details>
<summary>Compact pretty formatter</summary>

```json
{
  "type": "FeatureCollection",
  "features": [
    {
      "type": "Feature",
      "properties": {},
      "geometry": {
        "type": "Polygon",
        "coordinates": [[[0, 0], [0, 1], [1, 0], [1, 1], [0, 0]]]
      }
    },
    {
      "type": "Feature",
      "properties": {},
      "geometry": {
        "type": "Polygon",
        "coordinates": [[[0, 0.5], [0, 1.5], [1, 0.5], [1, 1.5], [0, 0.5]]]
      }
    },
    {
      "type": "Feature",
      "properties": {"operation": "intersection"},
      "geometry": {
        "type": "MultiPolygon",
        "coordinates": [
          [[[0, 0.5], [0.25, 0.75], [0, 1], [0, 0.5]]],
          [[[0.75, 0.75], [1, 0.5], [1, 1], [0.75, 0.75]]]
        ]
      }
    },
    {
      "type": "Feature",
      "properties": {"operation": "union"},
      "geometry": {
        "type": "MultiPolygon",
        "coordinates": [
          [
            [
              [0, 0],
              [0.5, 0.5],
              [0.25, 0.75],
              [0.5, 1],
              [0, 1.5],
              [0, 1],
              [0, 0.5],
              [0, 0]
            ]
          ],
          [
            [
              [0.5, 0.5],
              [1, 0],
              [1, 0.5],
              [1, 1],
              [1, 1.5],
              [0.5, 1],
              [0.75, 0.75],
              [0.5, 0.5]
            ]
          ]
        ]
      }
    }
  ]
}
```

</details>

The same GeoJSON formatted with a standard pretty formatter becomes very spacious due to the large number of length 2 arrays:

<details>
<summary>Standard pretty formatter</summary>

```json
{
  "features": [
    {
      "geometry": {
        "coordinates": [
          [
            [
              0.0,
              0.0
            ],
            [
              0.0,
              1.0
            ],
            [
              1.0,
              0.0
            ],
            [
              1.0,
              1.0
            ],
            [
              0.0,
              0.0
            ]
          ]
        ],
        "type": "Polygon"
      },
      "properties": {},
      "type": "Feature"
    },
    {
      "geometry": {
        "coordinates": [
          [
            [
              0.0,
              0.5
            ],
            [
              0.0,
              1.5
            ],
            [
              1.0,
              0.5
            ],
            [
              1.0,
              1.5
            ],
            [
              0.0,
              0.5
            ]
          ]
        ],
        "type": "Polygon"
      },
      "properties": {},
      "type": "Feature"
    },
    {
      "geometry": {
        "coordinates": [
          [
            [
              [
                0.0,
                0.5
              ],
              [
                0.25,
                0.75
              ],
              [
                0.0,
                1.0
              ],
              [
                0.0,
                0.5
              ]
            ]
          ],
          [
            [
              [
                0.75,
                0.75
              ],
              [
                1.0,
                0.5
              ],
              [
                1.0,
                1.0
              ],
              [
                0.75,
                0.75
              ]
            ]
          ]
        ],
        "type": "MultiPolygon"
      },
      "properties": {
        "operation": "intersection"
      },
      "type": "Feature"
    },
    {
      "geometry": {
        "coordinates": [
          [
            [
              [
                0.0,
                0.0
              ],
              [
                0.5,
                0.5
              ],
              [
                0.25,
                0.75
              ],
              [
                0.5,
                1.0
              ],
              [
                0.0,
                1.5
              ],
              [
                0.0,
                1.0
              ],
              [
                0.0,
                0.5
              ],
              [
                0.0,
                0.0
              ]
            ]
          ],
          [
            [
              [
                0.5,
                0.5
              ],
              [
                1.0,
                0.0
              ],
              [
                1.0,
                0.5
              ],
              [
                1.0,
                1.0
              ],
              [
                1.0,
                1.5
              ],
              [
                0.5,
                1.0
              ],
              [
                0.75,
                0.75
              ],
              [
                0.5,
                0.5
              ]
            ]
          ]
        ],
        "type": "MultiPolygon"
      },
      "properties": {
        "operation": "union"
      },
      "type": "Feature"
    }
  ],
  "type": "FeatureCollection"
}
```

</details>

This makes handling the files inconvenient, and leads to ~4 times larger file sizes, which becomes an issue especially when dealing with larger GeoJSON data.

The `Content` enum 

https://github.com/serde-rs/serde/blob/ff70409215b62fa8cd138ce47534c432352c85bb/serde/src/private/de.rs#L230

does not include `i128` or `u128` fields, this makes it impossible to use those values in untagged enums.


I've been unable to determine how to get derived (de)serialize to handle my use case and am hoping someone can point me in the right direction.

I have several non-trivial structs to (de)serialize with a pre-defined json file format.  I would like to make use of serde's attributes for fields at the top level of the struct, however I am unable due to the file format containing a duplicate key.  It's used as a header / footer at the begining and end of the file and should be validated to be consistent.

I have a [minimized repo](https://github.com/tones111/serde_example) demonstrating the manual (de)seralize pattern I'm trying mimic.

I've found the following resources:
#690, #1607: suggest writing a deserializer adapter and point to some examples.

[serde-ignored](https://github.com/dtolnay/serde-ignored): Leverages deserialize_ignored_any which doesn't allow preventing the duplicate key
[serde-stacker](https://github.com/dtolnay/serde-stacker): Similarly doesn't modify map keys
[serde-with](https://github.com/jonasbb/serde_with/blob/674ee9fa183b06f248a1219590862613f2a41bd7/src/duplicate_key_impls/first_value_wins.rs#L56): Modifies the map keys but deserializes into a map instead of a user-defined struct.

I believe the solution is to write a deserializer adapter wrapping the json deserializer, but I've not yet figured out how/where in the layers of deseralizers, MapAccess objects, visitors, seeds, etc the right place is to catch the second instance of the key and prevent it from being processed.

Any help or suggestions would be greatly appreciated.  Thanks in advance.
I would like to use flatten to group a set of fields within a big bag of fields, but when I serialize this back out into JSON I would like it to keep the nested structure.  Is flatten the correct way to do this?  Is there a way to limit flatten so that it does not affect serialization?

Example input JSON:
```json
{ 
  "foo": 1234,
  "bar": 5678,
  "sub_foo": 9876,
  "sub_bar": 5432,
}
```

Serialization Struct
```rust
#derive(Debug, Deserialize, Serialize)]
pub struct SubThing {
  #[serde(rename(deserialize = "sub_foo"))]
  foo: u32,
  #[serde(rename(deserialize = "sub_bar"))]
  bar: u32
}

#[derive(Debug, Deserialize, Serialize)]
pub struct Thing {
  foo: u32,
  bar: u32,
  sub: SubThing,
}
```

Currently, this will output the following JSON when serializing:
```json
{
  "foo": 1234,
  "bar": 5678,
  "foo": 9876,
  "bar": 5432,
}
```

This seems less than ideal.  Also, how would one go about a similar situation where `sub` was another instance of `Thing`? (i.e. a recursive nesting).
I couldn't deserialize "other" variant if message contains "content" because serde try to match it into unit I suppose.

Deserialize returns error "invalid type: <object content type here>, expected unit variant <other name here>"

Example
https://play.rust-lang.org/?version=stable&mode=debug&edition=2018&gist=21095eeb6b6030680e8e5311fed7ec09
```rust
use serde::Deserialize; // 1.0.104

#[derive(Deserialize)]
pub struct Foo(&'static str);

#[derive(Deserialize)]
pub struct Bar(Foo);
```

```
error[E0495]: cannot infer an appropriate lifetime for lifetime parameter `'de` due to conflicting requirements
 --> src/lib.rs:7:16
  |
7 | pub struct Bar(Foo);
  |                ^^^
  |
note: first, the lifetime cannot outlive the lifetime `'de` as defined on the impl at 6:10...
 --> src/lib.rs:6:10
  |
6 | #[derive(Deserialize)]
  |          ^^^^^^^^^^^
  = note: ...so that the types are compatible:
          expected _IMPL_DESERIALIZE_FOR_Foo::_serde::Deserializer<'_>
             found _IMPL_DESERIALIZE_FOR_Foo::_serde::Deserializer<'de>
  = note: but, the lifetime must be valid for the static lifetime...
  = note: ...so that the types are compatible:
          expected _IMPL_DESERIALIZE_FOR_Foo::_serde::Deserialize<'_>
             found _IMPL_DESERIALIZE_FOR_Foo::_serde::Deserialize<'static>

error[E0495]: cannot infer an appropriate lifetime for lifetime parameter `'de` due to conflicting requirements
 --> src/lib.rs:7:16
  |
7 | pub struct Bar(Foo);
  |                ^^^
  |
note: first, the lifetime cannot outlive the lifetime `'de` as defined on the impl at 6:10...
 --> src/lib.rs:6:10
  |
6 | #[derive(Deserialize)]
  |          ^^^^^^^^^^^
  = note: ...so that the types are compatible:
          expected _IMPL_DESERIALIZE_FOR_Foo::_serde::de::SeqAccess<'_>
             found _IMPL_DESERIALIZE_FOR_Foo::_serde::de::SeqAccess<'de>
  = note: but, the lifetime must be valid for the static lifetime...
  = note: ...so that the types are compatible:
          expected _IMPL_DESERIALIZE_FOR_Foo::_serde::Deserialize<'_>
             found _IMPL_DESERIALIZE_FOR_Foo::_serde::Deserialize<'static>
```

Notably, `#[serde(borrow)]`, as suggested by https://github.com/serde-rs/serde/issues/1417, doesn't work:

```rust
use serde::Deserialize; // 1.0.104

#[derive(Deserialize)]
pub struct Foo(&'static str);

#[derive(Deserialize)]
pub struct Bar(#[serde(borrow = "'static")] Foo);
```

```
error: field `0` has no lifetimes to borrow
 --> src/lib.rs:7:16
  |
7 | pub struct Bar(#[serde(borrow = "'static")] Foo);
  |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
```

Related, but seemingly different:

- https://github.com/serde-rs/serde/issues/1597
My `Tree` struct is implemented using the [arena](https://rust-leipzig.github.io/architecture/2016/12/20/idiomatic-trees-in-rust/) technique:

```rust
pub struct Node {
    pub children: Vec<PathBuf>,
    pub properties: HashMap<String, String>,
}

pub struct Tree {
    pub nodes: HashMap<PathBuf, Arc<Mutex<Node>>,
    pub root: Weak<Mutex<Node>>,
}
```

To find the children of a node, we need to query the `Tree` instance:

```rust
let node = Node { .. };
let tree = Tree { .. };
// find the children
for child_path in node.children {
    let child = tree.nodes.get(child_path).unwrap(); // the child
    ...
}
```
I want to serialize my `Tree` object like:

```json
{
    "name": "my_name",
    "property1": "value1",
    "property2": "value2",
    ...
    "children": [
     {
        "name": "child1_name",
        ...
     },
    ...
    ]
}
```

To flatten the `properties` field, I need to add `#[serde(flatten)]` above the `properties` (I didn't find out a way to implement the flatten behavior during the [customized serialization](https://serde.rs/impl-serialize.html)) as follows:

```rust
pub struct Node {
    pub children: Vec<PathBuf>,
    #[serde(flatten)]
    pub properties: HashMap<String, String>,
}
```

To serialize the `children` field, there is no way if I don't add a `tree` field to `Node` struct, since the children nodes are achieved by querying `Tree`'s nodes map. However, if I add a `tree` field to `Node` struct (which I really don't want to), I must customize my serialization or add `#[serde(serialize_with = "path")]` attribute:

```rust
// the latter method
pub struct Node {
    #[serde(serialize_with = "my_serialize")]
    pub children: Vec<PathBuf>,
    #[serde(flatten)]
    pub properties: HashMap<String, String>,
}

fn my_serialize<S>(children: &Vec<PathBuf>, serializer: S) -> Result<S::Ok, S::Error>
    where
        S: Serializer {
    ...
}
```

For the latter, the parameter is `Vec<PathBuf>`, and I still can't get the nodes map, so I can't serialize it's children.

Hence, the only feasible solution is to customize my serialization. But as I said above, I didn't find out a way to implement the flatten behavior during the customized serialization.
Hello!
I want to deserialize some bytes to enum. The first byte describe enum variant and other bytes contains a some structure. Is it possible generate this case by serde_derive and external tag feature?

For example:
```
enum Packet {
    #[serde(tag = 0xAABBCCDD as u32)]
    Requset(Request),
    #[serde(tag = 0xEEFFEEFF as u32)]
    Response(Response)
}

struct Request {....}
struct Response {....}

```