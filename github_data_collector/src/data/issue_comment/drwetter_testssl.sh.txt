
As noted in #1444 a few vulnerability checks don't make sense or aren't working.  This PR addresses the renegotiation and compression checks.

Also a few redundant quotes in parse_tls_serverhello() and run_crime() were removed.
If anything is missing or wrong please let us know or do a PR.

(This is until from earlier time to ~2018. >2019 need to follow)

Anybody volunteers?

Instructions (taken from _https://github.com/drwetter/testssl.sh/blob/update_clienthandshakes/etc/client-simulation.wiresharked.md_)

```
This file contains client handshake data manually created from Wireshark.

## Instructions how to add a client simulation:

* Start wireshark at the client / router. Best is during capture to filter for the target you want to contribute to.
* Make sure you create a bit of encrypted traffic to a target of your choice. Attention, privacy: if you want to contribute, be aware that the ClientHello contains the target hostname (SNI).
* Make sure the client traffic is specific: For just "Android" do not use a browser! Best is to use the play store app.
* Stop recording.
* If needed sort for ClientHello.
* Look for the ClientHello which matches the source IP + destination you had in mind. Check the destination hostname in the SNI extension so that you can be sure, it's the right traffic.
* Retrieve "handshakebytes" by marking the Record Layer --> Copy --> As a hex stream.
* Figure out "protos" and "tlsvers" by looking at the supported_versions TLS extension (43=0x002b). May work only on modern clients. Be careful as some do not list all TLS versions here (OpenSSL 1.1.1 lists only TLS 1.2/1.3 here)
* Adjust "lowest_protocol" and "highest_protocol" accordingly.
* Get "curves" from at the supported groups TLS extension 10 = 0x00a. Omit any GREASE.
* Retrieve "alpn" by looking at the alpn TLS extension 16 (=0x0010).
* Review TLS extension 13 (=0x000d) whether any SHA1 signature algorithm is listed. If not "requiresSha2" is true
* Leave "maxDhBits"/"minDhBits" and "minRsaBits"/"maxRsaBits" at -1, unless you know for sure what the client can handle
* For "ciphers" mark the Cipher Suites --> Copy --> As a hex stream, remove any leading GREASE ciphers (?a?a) and supply it to ~/utils/hexstream2cipher.sh
* "ciphersutes" are TLS 1.3 ciphersuites. You can identify them as they currently are like 0x130?. Retrieve them from above see ~/utils/hexstream2cipher.sh
* Figure out the services by applying a good piece of logic
* Before submitting a PR: test it yourself! You can also watch it again via wireshark
```

Just doing some parallel mass scanning. One is a Debian machine, one an Opensuse (Tumbleweed) box.

On the latter it's hard to do any scan successfully, error message are all similar:

```=====================================================================
../testssl.sh -q --assume-http -S --sneaky --connect-timeout=20 --openssl-timeout=20 --parallel --log --json -S --ssl-native --warnings=batch citrix.com

 Start 2020-01-10 11:33:41        -->> 162.221.156.156:443 (citrix.com) <<--

 Further IP addresses:   2001:4868:10c:3::15 
 rDNS (162.221.156.156): --
../testssl.sh: line 10454: 5: Bad file descriptor
../testssl.sh: line 10454: 5: Bad file descriptor
../testssl.sh: line 10454: 5: Bad file descriptor
../testssl.sh: line 10454: 5: Bad file descriptor
../testssl.sh: line 10454: 5: Bad file descriptor
../testssl.sh: line 10454: 5: Bad file descriptor
../testssl.sh: line 10454: 5: Bad file descriptor
../testssl.sh: line 10454: 5: Bad file descriptor
 Service detected:       HTTP
```

I haven't researched that further yet but it looks to me like there's a conflict with the file handle in parallel scans.

Command line was ``MAX_PARALLEL=30 ../testssl.sh -q --assume-http -S --sneaky --connect-timeout=20 --openssl-timeout=20 --parallel --log --json -S --ssl-native --file top9-10k.txt``

Only 19 from >500 scans succeeded.
OpenSSL 1.1.0 introduced the ability to specify a security level: https://github.com/openssl/openssl/blob/master/doc/man3/SSL_CTX_set_security_level.pod. By default the security level is set to 1 unless a compile-time option is used to set the default a different value. The security level may also be set by the command line, e.g.,
```
openssl s_client -cipher @SECLEVEL=0:ALL -connect 127.0.0.1:443
```
At the moment, testssl.sh does not use the `@SECLEVEL=n` directive, but we may want to look into using `s_client_options()` to add it in some circumstances. The particular reason for suggesting this is https://github.com/openssl/openssl/pull/10786 and https://github.com/openssl/openssl/pull/10787. https://github.com/openssl/openssl/pull/10787 notes that:

> This has as effect that SHA1 and MD5+SHA1 are no longer supported at security level 1. This has as effect that TLS < 1.2 is no longer supported at the default security level of 1, and that you need to set the security level to 0 to use TLS < 1.2.

However, even without https://github.com/openssl/openssl/pull/10786 and https://github.com/openssl/openssl/pull/10787, OpenSSL 1.1.0 and 1.1.1 will test for more weak ciphers if the security level is set to 0 rather than 1.
Please make sure that you provide enough information so that we understand what your issue is about.

1. uname -a
`Linux FDLDL064 5.0.0-37-generic #40~18.04.1-Ubuntu SMP Thu Nov 14 12:06:39 UTC 2019 x86_64 x86_64 x86_64 GNU/Linux`   
2. testssl version from the banner: testssl.sh -b 2>/dev/null | head -4 | tail -2
```
    testssl.sh       3.0rc6 from https://testssl.sh/dev/
    (fa5bb18 2019-12-24 11:47:41 -- )

```
3. git log | head -1 (if running from git repo)

`commit fa5bb18d15a4d6a88d9722feb393a56e8e763c3f`

4. openssl version used by testssl.sh: testssl.sh -b 2>/dev/null | awk -F':' '/openssl/ { print $2}'
`./bin/openssl.Linux.x86_64`
5. steps to reproduce: testssl.sh or docker command line, if possible incl. host
`./testssl.sh -t smtp   *****[MASKED]*****`

6. what exactly was happening, output is needed
In case -t is given as argument , if STARTTLS handshake fails , there is a prompt for providing an input. Output given below :- 
```
./testssl.sh -t smtp  *****[MASKED]*****

###########################################################
    testssl.sh       3.0rc6 from https://testssl.sh/dev/
    (fa5bb18 2019-12-24 11:47:41 -- )

      This program is free software. Distribution and
             modification under GPLv2 permitted.
      USAGE w/o ANY WARRANTY. USE IT AT YOUR OWN RISK!

       Please file bugs @ https://testssl.sh/bugs/

###########################################################

 Using "OpenSSL 1.0.2-chacha (1.0.2k-dev)" [~183 ciphers]
 on FDLDL064:./bin/openssl.Linux.x86_64
 (built: "Jan 18 17:12:17 2019", platform: "linux-x86_64")


 Start 2019-12-31 12:40:04        -->> *****[MASKED]***** <<--

 Further IP addresses:    *****[MASKED]*****
 rDNS ( *****[MASKED]*****):  *****[MASKED]*****
 STARTTLS handshake failed
 STARTTLS handshake failed
 STARTTLS handshake failed
 STARTTLS handshake failed
 STARTTLS handshake failed
 STARTTLS handshake failed
 STARTTLS handshake failed
 STARTTLS handshake failed

  *****[MASKED]***** doesn't seem to be a TLS/SSL enabled server
 The results might look ok but they could be nonsense. Really proceed ? ("yes" to continue) --> 

```

7. what did you expect instead?
In case of running for bulk list of  domains, it would not be possible for providing `yes` or `no` to each of the prompt in case the handshake fails. It would be nice to have an auto response as an argument something like `--auto-answer-prompt=[yes/no/default]` (where `yes` and `no` have their respective meanings and `default` stands for which ever decision is considered as a default for that prompt)  which will consider the same response for any prompt in case encountered during the scan for any check. This will be helpful for automation. If there is any other way currently in the tool which I may be ignorant about , which is being used for same purpose by others , request you to let me know or add it as part of `--help` as it may be helpful for others like me.

Thanks.

... which seems now a relic to me. Also it could support ``--color=3``. Relevant code `` prettyprint_local()`` --> ``actually_supported_osslciphers()``. [will rename ````actually_supported_ciphers()``. 


