I found myself wanting to pass structured data from Wren to C, but I didn't want to define a foreign class specifically to do that, so I thought having access to Maps from the C slot API made sense.
Doen't make on bsd:

darko@NomadBSD:~/GitHub/wren] gmake
gmake[1]: Entering directory '/home/darko/GitHub/wren'
        cc src/optional/wren_opt_random.c  -O3 -std=c99 -fPIC
        cc src/optional/wren_opt_meta.c    -O3 -std=c99 -fPIC
        cc src/vm/wren_primitive.c         -O3 -std=c99 -fPIC
        cc src/vm/wren_vm.c                -O3 -std=c99 -fPIC
        cc src/vm/wren_debug.c             -O3 -std=c99 -fPIC
        cc src/vm/wren_value.c             -O3 -std=c99 -fPIC
        cc src/vm/wren_core.c              -O3 -std=c99 -fPIC
        cc src/vm/wren_compiler.c          -O3 -std=c99 -fPIC
        cc src/vm/wren_utils.c             -O3 -std=c99 -fPIC
        cc lib/libwren.so                  -O3 -std=c99 -fPIC -Wl,-soname,libwren.so
        ar lib/libwren.a                  rcu
       run util/build_libuv.py            
Unsupported platform: FreeBSD
gmake[1]: *** [util/wren.mk:242: build/libuv.a] Error 1
gmake[1]: Leaving directory '/home/darko/GitHub/wren'
gmake: *** [Makefile:16: release] Error 2
Using bash to redirect Stdin from a file seems to fail.

Here is the simplest example `test1.wren`:
```
import "io" for Stdin, Stdout
var line = Stdin.readLine()
System.print("line: " + line)
```

When I run interactively it works:
```
chris@WIN-FE4HG5BFASB:~$ wren/wren test1.wren
fred
line: fred
chris@WIN-FE4HG5BFASB:~$
```

However, when I redirect stdin to read from a *non-empty* file it fails:
```
chris@WIN-FE4HG5BFASB:~$ wren/wren test1.wren < sales.txt
Aborted
chris@WIN-FE4HG5BFASB:~$ head sales.txt
--
-- PostgreSQL database dump
--

-- Dumped from database version 11.5
-- Dumped by pg_dump version 11.5 (Debian 11.5-3.pgdg80+1)

SET statement_timeout = 0;
SET lock_timeout = 0;
SET idle_in_transaction_session_timeout = 0;
```

Using Ubuntu on WSL 2 on Windows 10.
I wanted to try `wren` out in a real problem but found that I could not create directories.
This PR adds some basic file opertions to the `io` package:

- `Directory.create(path)`, which returns `true` on success and `false` when the folder already exists
- `Directory.delete(path)`
- `File.rename(oldpath, newpath)`


`wrenGetVariable` used to return `void`, and failed an `ASSERT` when the VM was compiled in debug mode.

This isn't helpful for regular applications, when it is useful to know that a variable isn't defined.

Therefore, this breaks the API a little so that `wrenGetVariable` now returns an `int` to indicate success or failure.

It returns a `0` for success and a `-1` for failure.
There is [a surpringly elegant random sampling algorithm](https://dl.acm.org/citation.cfm?id=315746) described in _Programming Pearls_, which outperforms the current implementation on almost every case, especially with medium-sized (say, sqrt(total)) samples.

I have also updated tests to treat samples taken as unordered sets. In rare cases where a randomly taken _and permuted_ list is desired, the shuffle function can always be used.

That aside, Algorithm R can still be used for sampling from an iterator of unknown length, but that probably belongs to another PR.

Below are benchmark results on my machine for reference. Operations are repeated arbitrary times to amplify the differences.

| Total | Samples | Before   | After    |
|:----- |:------- |:-------- |:-------- |
| 6e6   | 4e6     | 1.19467  | 1.172222 |
| 6e6   | 2e6     | 0.991355 | 0.624902 |
| 6e6   | 4000    | 0.727563 | 0.001411 |
| 6e6   | 2000    | 0.725537 | 0.000765 |
| 6e6   | 30      | 1.188042 | 1.13313  |
| 6e6   | 3       | 2.062269 | 2.038365 |
| 600   | 400     | 1.935752 | 1.257749 |
| 600   | 200     | 1.811921 | 0.628874 |
| 600   | 30      | 7.84491  | 0.851716 |
| 600   | 3       | 1.513245 | 1.514514 |

Code:

```
import "random" for Random
var r = Random.new()

var run = Fn.new { |n, m, its|
  var a = List.filled(n, 0)
  var t = System.clock
  for (i in 0...its) r.sample(a, m)
  System.print(System.clock - t)
}

run.call(6e6, 4e6, 1)
run.call(6e6, 2e6, 1)
run.call(6e6, 4e3, 1)
run.call(6e6, 2e3, 1)
run.call(6e6, 30, 1e5)
run.call(6e6, 3, 1e6)
run.call(600, 400, 2e4)
run.call(600, 200, 2e4)
run.call(600, 30, 1e5)
run.call(600, 3, 1e6)
```

Would be glad to hear your opinions!
I've verified that this test fails without the fix in change 186a8c7c132529b03291d3db1d942abd35bf8316.

See issue #713
This PR fixes #710. 

I am not sure if this causes memory leaks or not. As far as I know, the fiber should somehow be freed, but I can't tell how. Valgrind does report some problems, but they seem unrelated to this issue.

This does not include any tests, because I have no idea how the test system works. If anyone can explain it to me, I'd be more than happy to create a test for this.
## Description

```c
WrenConfiguration config;
wrenInitConfiguration(&config);
WrenVM *vm = wrenNewVM(&config);

/* let's allocate some slots for later use */
wrenEnsureSlots(vm, 32);

/* then, let's execute a Wren script */
wrenInterpret(vm, "main", myScript);

/* now, however, we face a problem: while the fiber's stack got updated,
   the API stack (aka slot array) didn't, so we're stuck with the old slots that
   got allocated during the first wrenEnsureSlots call */
```
Calling `wrenEnsureSlots` at this point will not yield any effect, because of how slots are ensured:

```c
void wrenEnsureSlots(WrenVM* vm, int numSlots)
{
  // If we don't have a fiber accessible, create one for the API to use.
  if (vm->apiStack == NULL) /* ← problematic line */
  {
    vm->fiber = wrenNewFiber(vm, NULL);
    vm->apiStack = vm->fiber->stack;
  }
  
  int currentSize = (int)(vm->fiber->stackTop - vm->apiStack);
  if (currentSize >= numSlots) return;
  
  // Grow the stack if needed.
  int needed = (int)(vm->apiStack - vm->fiber->stack) + numSlots;
  wrenEnsureStack(vm, vm->fiber, needed);
  
  vm->fiber->stackTop = vm->apiStack + numSlots;
}
```
In this case, `vm->apiStack` is not null, but `vm->fiber->stack` is also a completely different stack than `vm->apiStack`. Updating `vm->apiStack` through `wrenSetSlotT` calls will not have any effect, because internally, these functions update `vm->apiStack`, which now points to some unrelated stack.

That by itself wouldn't be a problem, unless we try and `wrenCall` a method:
```c
wrenEnsureSlots(vm, 1);
wrenGetVariable(vm, "main", "MyClass", 0);
/* ↑ will succeed and get us the correct variable */
WrenHandle *class_MyClass = wrenGetSlotHandle(vm, 0);
WrenHandle *method_doThings = wrenMakeCallHandle("doThings()");

wrenSetSlotHandle(vm, 0, class_MyClass);
/* ↑ will trigger a bug, because the old stack is used */
WrenInterpretResult result = wrenCall(vm, method_doThings); /* uh oh! */
/* the above call will fail, because we updated the old stack instead of the new one.
   the VM will try to read from the new stack, and the value read is `null`,
   which causes the call to fail unexpectedly. */
```

## Possible fix
I'm no expert at the internals of the VM, but I feel like a simple `vm->apiSlots` update at the end of `wrenInterpret` would do the job just fine. The overhead would be practically unnoticable, so it wouldn't matter much.

If it's not possible to update `vm->apiSlots` with a correct value, we can at least invalidate it by setting `vm->apiSlots = NULL;`, which would cause subsequent `wrenEnsureSlots` calls to allocate a new stack and use it in any VM invocations. But as I said, I am no expert, so I don't know if it would even work.
That is to say, numbers like 1.0e+10. This was found as a result of porting a benchmark from another language to Wren.

This case is already handled by strtod(), so we only need to teach the tokenizer that it's ok.