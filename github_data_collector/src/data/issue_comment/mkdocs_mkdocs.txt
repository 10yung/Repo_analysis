now mkdocs favicon is in `img/favicon.ico`, when accessing it in browser, there will be a 404 request of `/favicon.ico`.

I suggest mkdocs can support `/favicon.ico`.

demo: https://china-speed.org.cn/img/favicon.ico

![image](https://user-images.githubusercontent.com/4971414/72578712-d5a7e980-3911-11ea-93c1-52db6b1034fc.png)

```brian@brian-2920x:~/github/valvers/valvers-mkdocs$ /opt/wsl/bin/mkdocs --version
mkdocs, version 1.0.4 from /opt/wsl/lib/python3.6/site-packages/mkdocs (Python 3.6)
```
When generating the docs for my website (`mkdocs serve`) `mkdocs` barfs with the following stacktrace:

```
brian@brian-2920x:~/github/valvers/valvers-mkdocs$ /opt/wsl/bin/mkdocs serve
INFO    -  Building documentation... 
INFO    -  Cleaning site directory 
INFO    -  The following pages exist in the docs directory, but are not included in the "nav" configuration:
  - v6manta.md
  - open_software/index.md 
Traceback (most recent call last):
  File "/opt/wsl/bin/mkdocs", line 8, in <module>
    sys.exit(cli())
  File "/opt/wsl/lib/python3.6/site-packages/click/core.py", line 764, in __call__
    return self.main(*args, **kwargs)
  File "/opt/wsl/lib/python3.6/site-packages/click/core.py", line 717, in main
    rv = self.invoke(ctx)
  File "/opt/wsl/lib/python3.6/site-packages/click/core.py", line 1137, in invoke
    return _process_result(sub_ctx.command.invoke(sub_ctx))
  File "/opt/wsl/lib/python3.6/site-packages/click/core.py", line 956, in invoke
    return ctx.invoke(self.callback, **ctx.params)
  File "/opt/wsl/lib/python3.6/site-packages/click/core.py", line 555, in invoke
    return callback(*args, **kwargs)
  File "/opt/wsl/lib/python3.6/site-packages/mkdocs/__main__.py", line 134, in serve_command
    livereload=livereload
  File "/opt/wsl/lib/python3.6/site-packages/mkdocs/commands/serve.py", line 119, in serve
    config = builder()
  File "/opt/wsl/lib/python3.6/site-packages/mkdocs/commands/serve.py", line 114, in builder
    build(config, live_server=live_server, dirty=dirty)
  File "/opt/wsl/lib/python3.6/site-packages/mkdocs/commands/build.py", line 298, in build
    config['plugins'].run_event('post_build', config)
  File "/opt/wsl/lib/python3.6/site-packages/mkdocs/plugins.py", line 94, in run_event
    result = method(item, **kwargs)
  File "/opt/wsl/lib/python3.6/site-packages/mkdocs/contrib/search/__init__.py", line 68, in on_post_build
    search_index = self.search_index.generate_search_index()
  File "/opt/wsl/lib/python3.6/site-packages/mkdocs/contrib/search/search_index.py", line 106, in generate_search_index
    data = json.dumps(page_dicts, sort_keys=True, separators=(',', ':'))
  File "/opt/wsl/lib/python3.6/json/__init__.py", line 238, in dumps
    **kw).encode(obj)
  File "/opt/wsl/lib/python3.6/json/encoder.py", line 199, in encode
    chunks = self.iterencode(o, _one_shot=True)
  File "/opt/wsl/lib/python3.6/json/encoder.py", line 257, in iterencode
    return _iterencode(o, 0)
  File "/opt/wsl/lib/python3.6/json/encoder.py", line 180, in default
    o.__class__.__name__)
TypeError: Object of type 'date' is not JSON serializable
```

The `mkdocs.yml` configuration file looks a bit like (I've abbreviated it a bit):

```
brian@brian-2920x:~/github/valvers/valvers-mkdocs$ cat mkdocs.yml 
site_name: valvers.com
site_author: 'Brian Sidebotham'
site_url: 'https://www.valvers.com'
copyright: 'Copyright &copy; 2002-2020 Brian Sidebotham'

nav:
    - Home: index.md
    - 'V6 Manta':
        - Index: v6manta/index.md
        - 2003-07-28: v6manta/2003-07-28-.md
        ...

    - 'Open Software':
        ...
theme:
    name: material
    palette:
        primary: 'blue grey'
        accent: 'deep orange'
    feature:
        tabs: true
    markdown_extensions:
      - admonition
      - codehilite:
          guess_lang: false
      - toc:
```
my files are :

```
mkdocs.yml
docs/
    readme.md
```

my mkdocs.yml is 
```
nav:
- Home: readme.md
```

after build, the public dir is :
```
404.html
css\
fonts\
img\
js\
readme\
  index.html
...
```

the readme.md is compile to readme/index.html

   
Hi,
I am having a structure in my docs like this:

```
docs/
docs/mytest/somecontent.md (having a headline 1: My Content)
```
so the navigation will look like this:
```
mytest
- My Content
```

I still want to use the autodetection of mkdocs so the navigation elements are created automatically but I also want to give the directory an explicit name in the navigation e.g.

My Test
- My Content

Is that already possible?

Different environments may have different configurations such `site_url`.

It would be great to be able to set any attribute via env var. Some plugins implement this on their own but OTB solution would be very needed.

This is more general then #1827

Current solution looks funky:

```
site_name: !!python/object/apply:os.getenv ["CI_PROJECT_PATH"]  
repo_url: !!python/object/apply:os.getenv ["CI_PROJECT_URL"]
repo_name: !!python/object/apply:os.getenv ["CI_PROJECT_PATH"]
```

Something like following is more readable 

`site_name: ${CI_PROJECT_PATH}`
The docs says:

> The serve event is only called when the serve command is used during development. It is passed the Server instance which can be modified before it is activated. For example, additional files or directories could be added to the list of "watched" files for auto-reloading.

How can I add files or directories?

I tried this:

```python
    def on_serve(self, server, config, **kwargs):
        for element in self.config["watch"]:
            server.watch(element)
        return server
```

With this in my `mkdocs.yml`:

```yaml
plugins:
  - search
  - mkdocstrings:
      watch:
        - src/mkdocstrings
```

It detects the changes, but since I gave no function to `server.watch(dir, func)`, the site is not rebuilt.

I checked the source code of `mkdocs`, and I see that you are using a local function that we cannot reuse ourselves without rewriting it:

https://github.com/mkdocs/mkdocs/blob/262c2b70f3b1a450d685530610af3f28e12f9c9f/mkdocs/commands/serve.py#L120-L137

and

https://github.com/mkdocs/mkdocs/blob/262c2b70f3b1a450d685530610af3f28e12f9c9f/mkdocs/commands/serve.py#L69

What would be the best way to add a directory with this same `builder` functionality? Should I simply copy paste it?
On https://www.mkdocs.org/user-guide/plugins/ add:

```
The [MkDocs Plugins](https://github.com/mkdocs/mkdocs/wiki/MkDocs-Plugins) wiki page lists many 3rd-party plugins that you can use.
```

 filename which markdown file contains dot `.` can not find file

eg:
```
vue.js.md
```
change name to 
```
vue-js.md
```
this is ok

why not auto append `.md`

Previously MkDocs used field boost to boost the `title` field (by `10`) for search results. However, when lunr.js removed support for field boost in 2.0 it was removed from MkDocs when we refactored search into a plugin. As documented in olivernn/lunr.js#312 the feature was restored to lunr.js in version 2.3.0. Therefore, we should restore the boost to the `title` field. We should also update lunr.js to the most recent version.

That's an easy fix. However, at the same time that lunr.js restored field boost, they also added support for boosting a document. In other words, if boost is applied to a document, that document would get returned higher in the list of search results. It occurs to me that we could implement this with a [meta-data][1] value by adding support for a `boost` (or `search priority` or other, better name) as a meta-data key. The key would then be added to each entry in the JSON data used to build the search index. When building the index, the value of that key could be applied as document boost. That would allow site authors to better control search results to ensure that certain pages always appear higher up in the results.

However, I'm not sure if there is any demand for such a feature. Field boost will definately be restored. but we may only add document boost if we get demand for it here. Please reply below.

[1]: https://www.mkdocs.org/user-guide/writing-your-docs/#meta-data
Hi Mkdocs,

It seems that the attribute "level" for page.toc items is not the level of the "hx" in the markdown documents but the "global" level

With a title :
```markdown
# title 1    ------> level 0
## title 2  -------> level 1
### titile 3 ------> level 2
```
If there is not title :
```markdown
## title 2  -------> level 0
### titile 3 ------> level 1
```

Is there anyway to get the real level of headings ?
```markdown
# title 1    ------> level 1
## title 2  -------> level 2
### titile 3 ------> level 3
```
```markdown
## title 2  -------> level 2
### titile 3 ------> level 3
```

Regards,