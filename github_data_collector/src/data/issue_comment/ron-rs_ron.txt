How to specify whether to emit optional struct name during serialization?

I see no option for that here
https://docs.rs/ron/0.5.1/ron/ser/struct.PrettyConfig.html

but I think there should be one..

It would be pretty awesome if you could provide an example as to how to test the validity of ron files with `cargo test` tests. With that, at least the 'tested' files can be guaranteed to be valid.

I imagine it to look something akin to this:

```rust
#[derive(Default)]
struct Point {
    x: f32,
    y: f32,
}


#[cfg(test)]
mod tests {
    #[test]
    fn load_ron_point() {

        let point: Option<Point> = load::<Point>("path/to/file.ron");
        assert_eq!(point.is_some(), true);

    }
}
```

And the test failing if for some reason the ron-file from the given path is no syntactically correct Point-type ron file.
It would be awesome if you could provide a small tool to statically check that all `*.ron` files from this project are 'valid', and if not, display in what line the error happens or what field is missing.
Chose to version up the crate to 0.6 since changes to serialize_f32 and serialize_f64 were made using Ryu rather than to_string() method.

serde_json uses Ryu, to stringify float values just an FYI.

The reasoning behind this change because to_string will strip the decimals from the value if given a whole value.
example being 1.0f32.to_string() will become "1" the correct result should have been "1.0"

This leads to an issue when deserializing the data back to its original type.

Additionally added 2 new `to_string` methods that includes the struct name.

other changes are result of Rustfmt
The specific case I'm running into that fails to round trip is serializes via [`Serializer::serialize_newtype_variant`](https://docs.serde.rs/serde/trait.Serializer.html#tymethod.serialize_newtype_variant). I believe that this is because `Value` doesn't store the name of the struct stored, so deserialized named things become unnamed sequences.

cc #122
Cards on the table: I'm the author of radix64.

I noticed that ron uses base64 to serialize bytes. I created a new base64 encoding and decoding library that is faster than the base64 crate (especially when dealing with large inputs) and thought that ron would be a perfect place to use it. You can see that the api is pretty similar to what base64 offers. This would be a breaking change for users since the type of DecodeError exposed in ParseError will change, but otherwise I think it's a net positive. Let me know if you have any concerns, I understand accepting a new dependency (especially one that's self promoted like this) can make people nervous.
Just tried to run cargo-bloat on Wrench (the binary we use for WebRender debugging) and saw this:
```
kvark@ant /mnt/code/firefox/gfx/wr/wrench $ cargo bloat --release --crates
Compiling ...
Analyzing target/release/wrench

File  .text     Size Crate
1.0%  23.7%   2.0MiB webrender
0.7%  16.7%   1.4MiB ron
0.5%  13.5%   1.1MiB std
0.2%   4.6% 388.4KiB webrender_api
0.2%   4.4% 373.3KiB image
0.2%   4.0% 335.5KiB wrench
0.2%   3.8% 319.6KiB clap
0.1%   2.9% 243.2KiB winit
0.1%   2.8% 233.4KiB gleam
0.1%   2.7% 231.3KiB yaml_rust
0.1%   2.5% 211.6KiB regex_syntax
0.1%   1.7% 140.0KiB regex
0.1%   1.6% 138.3KiB serde
```
Adding function parallel to `from_reader`
Would it make sense to follow the pattern introduced by other `serde` libraries of exposing a top-level Error type that unifies the error types possible within the crate?
Some references:
[JSON](https://docs.serde.rs/serde_json/struct.Error.html)
[XML](https://docs.rs/serde-xml-rs/0.3.1/serde_xml_rs/struct.Error.html)
[YAML](https://docs.serde.rs/serde_yaml/struct.Error.html)
[bincode](https://docs.rs/bincode/1.1.4/bincode/type.Error.html)

If people think this is a desirable feature I'd like to submit a PR