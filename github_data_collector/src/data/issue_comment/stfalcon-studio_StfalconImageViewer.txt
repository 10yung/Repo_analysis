**Describe the bug**
If an imageview that is used in WithTranstionFrom has other scale type than ImageViewer's the transition isn't smooth.

**To Reproduce**
Steps to reproduce the behavior:
1. Add imageView with hard-coded height/width and scaleType "centerCrop"
2. Load image there and show full screen with StfalconImageViewer using that image view in WithTransitionFrom

**Expected behavior**
Smooth transition

**Video with the bug**
https://www.dropbox.com/s/27evomzehu12d1j/sample.mov?dl=0

**Additional context**
It could be an android transition bug, though maybe you know how to workaround or fix as you definitely have an expertise for it.

Removed duplicate statement.
At the end of `ImageViewerView.open()`, the function will call either `animateOpen()` or `prepareViewsForViewer()`. `animateOpen()` will cause the `backgroundView` alpha to be animated from 0 to 1, and then calls `prepareViewsForViewer()`.

The recent commit "Fix background blink on viewer opening" set `backgroundView`'s initial alpha to 0. In the case where the fade-in animation is not run (e.g. by calling `StfalconImageViewer.Builder.show(false)` or by not calling the Builder's `withTransitionFrom()`, which causes `animateOpen()` to not run the fade-in animation), the alpha will not be changed from its initial 0, and the background will not be displayed at all.

This commit sets the `backgroundView` alpha to 1 in `prepareViewsForViewer()`. In the case where the fade-in animation is not run, this ensures the background is visible. In the case where the animation is run, the animation will complete before `prepareViewsForViewer()` is called, the alpha will already be 1, and this additional set should have no effect.

The incorrect behavior with `.show(false)` can be seen in the demo app in the "Rotation support" module when rotating the screen. This should also resolve #27 .
This function enables to change the value of Background alpha in the ViewerView by Setting the value as we want.
Example case : Set the background alpha to `0.5f` for 50% opacity.

This is also to solve weird background showcase when the imageTransition is null
**Problem**
Background color is not showing when `withTransitionFrom(imageView)` is set to `withTransitionFrom(null)`
**To Reproduce**
Steps to reproduce the behavior:
1. Set the viewer background color `.withBackgroundColor(Color.BLACK)`
2. Set the viewer method `.withTransitionFrom(targetImageView)` to `.withTransitionFrom(null)`
3. Click on any images in that has been set with the viewer
4. See error that the background is not totally black

**Expected behavior**
Background color should be black.

![image](https://user-images.githubusercontent.com/50439894/69319820-87a89980-0c72-11ea-878c-d2fc8eca488c.png)


**Is your feature request related to a problem? Please describe.**
It is a problem because it is not possible to access views and do custom logic

**Describe the solution you'd like**
remove internal keyword at least for Views


**Problem**
When the opened image is deleted using the overlay view and if the targetImageView was passed using `.withTransitionFrom(targetImageView)`, then on swiping up or down on the image (i.e Dismissing the view using the swipe gesture), the viewer hangs as the item was removed from the original list.

**To Reproduce**
Steps to reproduce the behavior:
1. Make sure the targetImageView is passed to `.withTransitionFrom(targetImageView)`
2. Click on any image to open it in full screen. 
3. Delete the image using the delete icon from the overlay view
4. Remove the deleted item from the original list `imagesList.removeAt(itemPos)` 
5. Remove the deleted item from the adapter list `adapter.onItemDeleted(itemPos)`
6. Pass the updated original list to StfalconImageViewer `stfalconImageViewer.updateImages(imagesList)`
7. Swipe Up or Down to dismiss the viewer.

**Expected behavior**
The view should be dismissed normally without getting hanged.

**Screenshots**
Attached below in order
![sc1](https://user-images.githubusercontent.com/13131390/58758010-d29eeb00-8532-11e9-955c-6da2727019c3.jpg)
![sc2](https://user-images.githubusercontent.com/13131390/58758011-d3378180-8532-11e9-9a8a-81ba67c8d512.jpg)
![sc3](https://user-images.githubusercontent.com/13131390/58758012-d3378180-8532-11e9-807b-37fd42717a1b.jpg)
![sc4](https://user-images.githubusercontent.com/13131390/58758043-34f7eb80-8533-11e9-94c2-fc7511ff45b3.jpg)

**Additional context**
I am using RecyclerView to show the list of the images. On clicking an image, the image is opened using StfalconImageViewer where the user has two options - Share and Delete. 





Hi! This is a great library you've made---and it's the only one I could find with this type of functionality, which surprised me.

I'm using StfalconImageViewer with the camera function in my app to let users view the images they've taken. I'm expanding to include video recording, so I'd like users to be able to view both photos and videos in the same pop-up viewer. After a few attempts, I made what I think are useful, generally-applicable changes to StfalconImageViewer to enable my use case and many others. These changes do not affect existing users of the library or significantly increase the library's scope, which I think makes them a candidate for merging.

In short, the image viewer currently uses a `ViewHolder`, holding a `PhotoView`, along with the `ImagesPagerAdapter` and `MultiTouchViewPager`. My changes add a `ViewHolderLoader` interface and an optional additional argument to the `Builder`, allowing apps to pass in a `ViewHolderLoader`. This loader, or a default loader if none is passed, provides `ViewHolders` to `ImagesPagerAdapter`. Apps that choose to implement a `ViewHolderLoader` can then have their implementation return a subclass of the default `ViewHolder` which customizes the paging views as desired. A few additional details are described in the commit message.

In my video use case, my custom `ViewHolder` puts the usual `PhotoView` in a `FrameLayout` along with a `VideoView`, and then in `bind()` it displays one view or the other as appropriate.

Other use cases might want to customize each Pager page with additional views (e.g. a caption or a "new image!" icon) which scroll with the images---as opposed to placing that extra content in an overlay view, where the content would be statically positioned.

I created [a repo](https://github.com/svank/Custom-ViewHolders-Demo) demonstrating the use of these changes. It replicates my mixed photos/videos use case and shows how additional views (in the demo, a TextView) can add content alongside the image on each page.

This was my first time working with Kotlin, so I'm very open to suggested revisions.