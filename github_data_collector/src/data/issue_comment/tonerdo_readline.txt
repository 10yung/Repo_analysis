Readline should not use System namespace. This will make it not possible to use this library in any enterprise project that has any package reviewing process.

I suggest the root namespace be created called something e.g. Tonerdo or similar and a new release be created (version 3) with the new namespace.

Great library btw! nice :D
New async method with the ability to interrupt input from the console

https://stackoverflow.com/questions/9479573/how-to-interrupt-console-readline
The last version of Readline was published 12.06.2018. There are great PRs, but I don't see responses.
Is this repo still alive?



I tried to use the our tool on Windows 7 system in a MINGW64 terminal (that is installed when I installed Git client to access github).

```
Unhandled Exception: System.InvalidOperationException: Cannot read keys when either application does not have a console or when console input has been redirected. Try Console.Read.
   at System.ConsolePal.ReadKey(Boolean intercept)
   at System.ReadLine.GetText(KeyHandler keyHandler)
   at System.ReadLine.Read(String prompt, String default)
   at Campaign.Program.RunAddAndReturnExitCode(Options options)
```

A little googling efforts directed me to run it on the default command prompt and it worked like a charm.

Please guide, if there is any configuration required for the same. Thanks
This is in line with how some REPLs work, e.g. Python.
When using ReadLine in my .NET Core app (running through `dotnet run`), I sometimes get this:

```
Unhandled exception: System.Reflection.TargetInvocationException: Exception has been thrown by the target of an invocation.
---> System.IO.IOException: The process cannot access the file because it is being used by another process.
   at Interop.ThrowExceptionForIoErrno(ErrorInfo errorInfo, String path, Boolean isDirectory, Func`2 errorRewriter)
   at Interop.CheckIo(Int64 result, String path, Boolean isDirectory, Func`2 errorRewriter)
   at System.IO.StdInReader.ReadKey(Boolean& previouslyProcessed)
   at System.IO.SyncTextReader.ReadKey(Boolean& previouslyProcessed)
   at System.ConsolePal.ReadKey(Boolean intercept)
   at System.ReadLine.GetText(KeyHandler keyHandler)
   at System.ReadLine.Read(String prompt, String default)
   at Flare.Cli.Commands.ReplCommand.Run(Options options, CancellationToken token) in /home/alexrp/flare/flare/src/cli/Commands/ReplCommand.cs:line 37
   --- End of inner exception stack trace ---
   at System.RuntimeMethodHandle.InvokeMethod(Object target, Object[] arguments, Signature sig, Boolean constructor, Boolean wrapExceptions)
   at System.Reflection.RuntimeMethodInfo.Invoke(Object obj, BindingFlags invokeAttr, Binder binder, Object[] parameters, CultureInfo culture)
   at System.Delegate.DynamicInvokeImpl(Object[] args)
   at System.Delegate.DynamicInvoke(Object[] args)
   at System.CommandLine.Invocation.ModelBindingCommandHandler.InvokeAsync(InvocationContext context)
   at System.CommandLine.Invocation.InvocationPipeline.<>c__DisplayClass2_0.<<InvokeAsync>b__0>d.MoveNext()
--- End of stack trace from previous location where exception was thrown ---
   at System.CommandLine.Invocation.InvocationExtensions.<>c.<<UseParseErrorReporting>b__16_0>d.MoveNext()
--- End of stack trace from previous location where exception was thrown ---
   at System.CommandLine.Invocation.InvocationExtensions.<>c__DisplayClass8_0.<<UseTypoCorrections>b__0>d.MoveNext()
--- End of stack trace from previous location where exception was thrown ---
   at System.CommandLine.Invocation.InvocationExtensions.<>c.<<UseSuggestDirective>b__7_0>d.MoveNext()
--- End of stack trace from previous location where exception was thrown ---
   at System.CommandLine.Invocation.InvocationExtensions.<>c.<<UseParseDirective>b__6_0>d.MoveNext()
--- End of stack trace from previous location where exception was thrown ---
   at System.CommandLine.Invocation.InvocationExtensions.<>c.<<UseHelp>b__14_0>d.MoveNext()
--- End of stack trace from previous location where exception was thrown ---
   at System.CommandLine.Builder.CommandLineBuilderExtensions.<>c__DisplayClass3_0.<<UseVersionOption>b__0>d.MoveNext()
--- End of stack trace from previous location where exception was thrown ---
   at System.CommandLine.Invocation.InvocationExtensions.<>c.<<RegisterWithDotnetSuggest>b__17_0>d.MoveNext()
--- End of stack trace from previous location where exception was thrown ---
   at System.CommandLine.Invocation.InvocationExtensions.<>c__DisplayClass5_0.<<UseExceptionHandler>b__0>d.MoveNext()
```

It's not consistent, and I'm not sure how to reliably reproduce it. I am also using System.CommandLine in this app, so at first I thought there might be some kind of conflict, but I don't believe that is the case as System.CommandLine does not appear to touch `Console.In` anywhere.
If you type:
`abd[Shift-Backspace]c`
then then resulting string is 
`abc\bd` 
(with the \b escape char for backspace)
If you use Backspace instead of Shift-Backspace, then it is fine.
Is this on purpose, and if so, is there a recommended way to sanitise the string when there are escape chars?
I've made some changes that allows for faster tab completion by backspacing all the needed characters at once, as opposed to one at a time.

Prior to this change, I've noticed some issues with very slow tab completion, especially when using a readline project over an ssh connection. I think this addresses those issues.

This PR is similar to the goal of #45, but makes much smaller changes, and passes all unit tests.

Thanks so much for this project, hope this change is useful!
You may or may not want to adopt this code. I really needed it.
Hello!

Thanks for creating this awesome package. I love what you are doing to improve CLI/CI scenario on the .net environment.

I'm using this package and I've noticed that when you press `' + space` outputs `\0'`, which outputs only one `'` char in other softwares. I think that this might be related on how you read the input (reading keys vs. reading inserted data - assuming this, not sure).

This happens because when using US International it has *dead keys* which can be used to change the next key. In this case I just want the `'` so I need to press `space` after.

https://en.wikipedia.org/wiki/Dead_key