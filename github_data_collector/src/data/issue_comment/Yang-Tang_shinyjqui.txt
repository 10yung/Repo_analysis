Hello, thank you for creating this excellent package.  I've come across an issue that I can't seem to resolve.  For the "highlight" effect, the default highlight color is yellow (specifically `#ffff99`).  This should be adjustable, using the `color` option, but I can't get the highlight color to change from the default.  Any ideas on how to fix this?

Reproducible example:
```library(shiny)
library(shinyjqui)

ui <- fluidPage(
  div(id = "foo", "Hello Shiny", click = "foo_click"),
  
  actionButton("bar", "Click to highlight")
)

server <- function(input, output, session) {
  observeEvent(input$bar, {
    jqui_effect("#foo", effect = "highlight", 
                options = list(color = "green"), # hex codes also don't work
                duration = 1500)
    }
  )
}

shinyApp(ui, server)
First of all thanks for this incredible package I am so excited to have the functionality of jQuery drag-drop in a shiny app!!! 

I was wondering if it's possible to drag an item from `row_source` to `row_dest` multiple times [i.e. once I drag A to `row_dest` another A appears in `row_source` that can be dragged into `row_dest`]

```
library(shiny)
library(shinyjqui)

ui <- fluidPage(
  
  sidebarPanel(
    
    fluidRow(
      column(6, jqui_sortable(div(id = "row_source", style = "min-height: 200px; border:2px solid #000000;", div(id = "A", "A"), div(id = "B", "B"), div(id = "C", "C"), div(id = "D", "D")),options = list(connectWith = "#row_dest"))),
      column(6, jqui_sortable(div(id = "row_dest", style = "min-height: 200px; border:2px solid #000000"), options = list(connectWith = "#row_source")))
    )
  ),
  
  mainPanel(verbatimTextOutput('order'))
)


server <- function(input, output, session) {
  
  output$order <- renderPrint({ 
    print(input$row_dest_order) 
  })
  
}

shinyApp(ui, server)
```
Currently trying to use shinyjqui within a flexdashboard with runtime shiny and shiny_prerendered. Using the same code in the selectabletableoutput code it appears this does not work.

    ---
    title: "reprex"
    output: 
        flexdashboard::flex_dashboard:
        orientation: rows
        vertical_layout: fill
        source_code: embed
    runtime: shiny_prerendered
    ---

    ```{r global, include=FALSE}
    library(flexdashboard)
    library(shinyjqui)
    ```


    ```{r context="server"}
    output$selected_context <- renderPrint({
      cat("Selected:\n")
       input$tbl_selected_context
     })

    output$selected_start <- renderPrint({
        cat("Selected:\n")
        input$tbl_selected_start
      })

    output$selected_render <- renderPrint({
        cat("Selected:\n")
        input$tbl_selected_render
      })

      output$tbl <- renderTable(head(mtcars), rownames = TRUE)
      ```


      Row 
      ----

      ### Table

      ```{r}
       selectableTableOutput("tbl", selection_mode = "cell")
      ```

      ### Context=Data

          ```{r}
      verbatimTextOutput("selected_context")
         ```


       Row 
       ----

       ### Context=sever-start

       ```{r}
       verbatimTextOutput("selected_start")
       ```


       ### Context=render

       ```{r}
       verbatimTextOutput("selected_render")
       ```


Added simple sortable with dynamic UI example
Hi @Yang-Tang ,
congratulations for the very nice package, as a feature request I was wondering if you could integrate jquery.flowchart.js  (https://github.com/sdrdis/jquery.flowchart) functionalities in shinyjqui. I think it would be a very useful improvement for the R community because nothing similar exists at the moment for building personalizable pipelines/processes in Shiny.
Thank you!
best
I'm using shinyjqui for a shinyapp and work fine if I enter from a desktop but if enter from a mobile device either a tablet or a cellphone features like orderInput won't work. Is there any way to use the draggable functionality in mobile device with this package?
Great work, this is a really nice package!

I'm curious, have you thought about how `jqui_interaction()` might work on the htmlwidgets and/or htmltools level? It would be nice if this sort of thing "just worked" outside of shiny. In particular, having resizable htmlwidgets would be really nice.

```r
library(shinyjqui)
library(plotly)

qplot(1:10) %>% 
  ggplotly() %>% 
  jqui_resizable()
```
It would be nice to have an `updateOrderInput `function for `orderInput` to order the items to the initial value for example or change the `item_class` / `connect` / etc..

This small example would reorder the items to the original values.
```
library(shiny)
library(shinyjqui)

ui <- fluidPage(
  orderInput('source', 'Source', items = LETTERS[1:5], as_source = F),
  verbatimTextOutput('order'),
  actionButton("update", "Update to initial order")
)

server <- function(input, output, session) {
  output$order <- renderPrint({ 
    print(input$source_order) 
  })
  observeEvent(input$update, {
    # updateOrderInput(session, "source", items = LETTERS[1:5])
  })
}

shinyApp(ui, server)
```
`shinyjqui` previously didn't work on mobile devices as the base Jquery UI didn't support touch-based events. By incorporating [Touch Punch](http://touchpunch.furf.com/) we can simulate events to map touch events to their mouse event analogs.
I have created an App that generates 3 plots, when user click on Add plot (using insertUI). 

If you try to Add one plot and resize it, if you want to bookmark the app, the size and position are not correctly saved. 

Im using the last shinyjqui version with R 3.3 and R 3.5 also in windows and linux, but noone works

Here is my app:
--------------------------------------------------------
library(shiny)
library(shinyjqui)

ui <- function(request) {
  fluidPage(
    bookmarkButton(),
    sidebarLayout(
      actionButton("add", "Add Element"),
      mainPanel(id = "content")
    ) 
  )
}

server <- function(input, output, session) {
  
  addItem <- function(id) {
    insertUI(
      selector = "#content",
      where = "beforeEnd",
      ui = tagList(
        jqui_resizable(plotOutput(id))
      )
    )
  }
  
  observeEvent(input$add, {
    id <- paste0("plot", input$add)
    addItem(id)
  })
  
  output$plot1 <- renderPlot(
    plot(c(3,2,2))
  )
  
 
   
  onRestore(function(state) {
    for (i in seq_len(input$add))  {
     id <- paste0("plot", i)
     addItem(id)
    }
  })
   jqui_bookmarking()
}

enableBookmarking("url")
shinyApp(ui, server) 

------------------------------------------------------------
Thanks
JesÃºs