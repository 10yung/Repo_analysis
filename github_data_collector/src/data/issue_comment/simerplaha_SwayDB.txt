Booting up databases on incompatible versions could create files with different formats.

This should be check on startup.
`Stream`'s should perform nearly at the same speed as an `Iterator`. Optimisations like the following are required

- removal of usage of `Option`. 
- implement `transform` function in `Tag` instead of using `map` to convert types. 
- possibly allowing the the `Tag` to be applied only the time of materialising
Internal `Stream` is a very basic Stream implementation (intentional) which makes it easier to interop with Java.  Akka Streams, FS2, Scalaz-stream, ZIO-streams etc should all be supported.

Currently each database instance can produce the following `Streamer` type (similar to an `Iterator[T]`). This type basically starts iteration from `head` and fetches the `next` item in the Stream given the previously read item on request.

```scala
trait Streamer[A, T[_]] {
  def head: T[Option[A]]
  def next(previous: A): T[Option[A]]
}
```

If there is a way to interop with all other streaming libraries given the above type then supporting others will be easier. 

Reactive Stream is another way to support interop but is complex to implement see #57. 
Remove the use of macro from KeyValueId when calculating `maxKeyValueIdByteSize` which is causing the `KeyValueId`'s values to be set incorrectly and is causing reads to fail resulting in `Invalid key-value id`. 

This
```scala
val maxKeyValueIdByteSize = Bytes.sizeOfUnsignedInt(all.map(_.maxKey_Uncompressed_KeyValueId).max)
```

Should be 
```scala
val maxKeyValueIdByteSize = 3
```

I've made this change on another branch which is currently WIP with performance improvements.

This will be available in the next release. 
SortedIndex and Values are read in full during compaction. Since they are already in-memory caching them will improve read performance of Segments with compaction in-progress.
Currently CRC is added for only sortedIndex block. This is also required for all other blocks.

the following program will print `done`, but won't end normally.

```
  def main(args: Array[String]): Unit = {
    val map1: Map[String, String, Nothing, ApiIO] = persistent.Map[String, String, Nothing, ApiIO]("map1").get
    map1.put("abc" -> "def", "123" -> "456").get
    map1.foreach(println)
      .materialize.get
    map1.close().get
    println("done")
  }
```

