I was working on `aws-ecs` module and I noticed that every time I ran `buildup` command `aws-ec2` package would be installed as a dependency for `aws-route53-targets`.

----

*By submitting this pull request, I confirm that my contribution is made under the terms of the Apache-2.0 license*

<!-- 
Please read the contribution guidelines and follow the pull-request checklist:
https://github.com/aws/aws-cdk/blob/master/CONTRIBUTING.md
 -->

<!-- short description of the feature you are proposing: -->

AppSync L2 constructs are missing some features which currently have to be hand-coded, namely support for DynamoDB queries.

This entails support for the query key conditions, as well as indexes and filters. We can (and should) start with the basics, with is support for key conditions.

### Use Case

<!-- why do you need this feature? -->

To avoid hand-coding AppSync resolvers which issue a DynamoDB query.

### Proposed Solution

<!-- Please include prototype/workaround/sketch/reference implementation: -->

A possible API is:

```typescript
${MappingTemplate.dynamoDbQuery(
  KeyCondition.eq("user", "user").and(
    KeyCondition.beginsWith("title", "startStr"))).renderTemplate()
```
### Other

<!-- 
e.g. detailed explanation, stacktraces, related issues, suggestions on how to fix, 
links for us to have context, eg. associated pull-request, stackoverflow, gitter, etc
-->





* [X] :wave: I may be able to implement this feature request
* [ ] :warning: This feature might incur a breaking change

---

This is a :rocket: Feature Request

### Reproduction Steps

```
import cdk = require('@aws-cdk/core');

import { NestedStack } from '@aws-cdk/aws-cloudformation';
import { Queue } from '@aws-cdk/aws-sqs';

export class CdkFifoQueueStack extends cdk.Stack {
  constructor(scope: cdk.Construct, id: string, props?: cdk.StackProps) {
    super(scope, id, props);

    new MyNestedStack(this, 'NestedStack');
  }
}

export class MyNestedStack extends NestedStack {
  constructor(scope: cdk.Construct, id: string) {
    super(scope, id);

    new Queue(this, 'MyQueue', {
      fifo: true
    });
  }
}
```

[source](https://github.com/cmckni3/cdk-fifo-queue)

MUST USE `cdk deploy`. THE STACK SYNTHESIZES FINE.

Feel free to remove/adjust text above. Calling it out because of attitude in a [previous comment](https://github.com/aws/aws-cdk/issues/5765#issuecomment-575202431).

### Error Log

CloudFormation error after running `cdk deploy`:

```
The name of a FIFO queue can only include alphanumeric characters, hyphens, or underscores, must end with .fifo suffix and be 1 to 80 in length. (Service: AmazonSQS; Status Code: 400; Error Code: InvalidParameterValue; Request ID: 0079e079-6bf5-5eec-90d9-b6e4eebec170)
```

### Environment

  - **CLI Version      : 1.19.0**
  - **Framework Version: 1.19.0**
  - **OS               : macOS**
  - **Language         : TypeScript**

--- 

This is :bug: Bug Report

fix #5858
----

*By submitting this pull request, I confirm that my contribution is made under the terms of the Apache-2.0 license*

<!-- 
Please read the contribution guidelines and follow the pull-request checklist:
https://github.com/aws/aws-cdk/blob/master/CONTRIBUTING.md
 -->

<!-- 
- developer guide? raise issue/pr here: https://github.com/awsdocs/aws-cdk-guide
- want to help? submit a pull request here: https://github.com/aws/aws-cdk
-->

<!--
link to reference doc page:
-->



It is illustrated as follows.
https://github.com/aws/aws-cdk/blob/212687c1427b4e0e6dde11c69139e5036a1ce087/packages/%40aws-cdk/aws-ecs/lib/base/base-service.ts#L424-L434

However, it is actually defined as:
https://github.com/aws/aws-cdk/blob/212687c1427b4e0e6dde11c69139e5036a1ce087/packages/%40aws-cdk/aws-ecs/lib/base/base-service.ts#L39-L68

‚ùå targetGroupId ‚Üí ‚≠ïÔ∏è newTargetGroupId
‚ùå containerTarget.containerName ‚Üí ‚≠ïÔ∏è containerName
‚ùå containerTarget.containerPort ‚Üí ‚≠ïÔ∏è containerPort
<!--
describe your issue:
-->





---

This is a üìï documentation issue

----

*By submitting this pull request, I confirm that my contribution is made under the terms of the Apache-2.0 license*

<!-- 
Please read the contribution guidelines and follow the pull-request checklist:
https://github.com/aws/aws-cdk/blob/master/CONTRIBUTING.md
 -->

This is the logic of the new bootstrap command, deploying the template discussed in #4461 and then further in #5757 . You activate the new bootstrap behavior by passing the `--new-bootstrap=true` option to the CLI.

I've manually verified that bootstrapping succeeds, and that a CDK app using assets can successfully be deployed using this new bootstrap stack.

I've posting this as a draft, to get early feedback, as there are a few ways we can go about incorporating this new functionality, so I wanted to get the team's opinion on the direction taken.

I'm in the process of writing an automated integ test that checks whether this works without the need for manual testing, but it's proving to be a little tricky, so I figured I won't hold up the main logic PR on it.

----

*By submitting this pull request, I confirm that my contribution is made under the terms of the Apache-2.0 license*

<!-- 
Please read the contribution guidelines and follow the pull-request checklist:
https://github.com/aws/aws-cdk/blob/master/CONTRIBUTING.md
 -->

It'd be great if we can add conditions to `AccountPrincipal` when creating `iam.Role`. Currently, `AccountPrincipal` only accepts `accountId` param. We're creating an iam role for 3rd party SaaS and we need to provide a `Condition` property.

### Other

Current workaround is using `addPropertyOverride`.

```typescript
const role = new iam.Role(this, "role", {
  assumedBy: new iam.AccountPrincipal('1234567890')
});

let roleRef = role.node.defaultChild as iam.CfnRole;
roleRef.addPropertyOverride("AssumeRolePolicyDocument.Statement.0.Condition.StringEquals.foo‚Äù,"baz");
```

```yaml
Resources:
  Role1EF426C6:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              AWS:
                Fn::Join:
                  - ""
                  - - "arn:"
                    - Ref: AWS::Partition
                    - :iam::1234567890:root
            Condition:
              StringEquals:
                foo: baz
        Version: "2012-10-17"
```


<!-- 
e.g. detailed explanation, stacktraces, related issues, suggestions on how to fix, 
links for us to have context, eg. associated pull-request, stackoverflow, gitter, etc
-->





* [ ] :wave: I may be able to implement this feature request
* [ ] :warning: This feature might incur a breaking change

---

This is a :rocket: Feature Request

Stack names are not honoured when creating a multi-stack, multi-environment CDK application

### Reproduction Steps

I am trying to create a CDK app with [multiple stacks](https://docs.aws.amazon.com/cdk/latest/guide/stacks.html) that is deployed to [multiple environments](https://docs.aws.amazon.com/cdk/latest/guide/environments.html
), e.g.

```typescript
#!/usr/bin/env node
import * as cdk from '@aws-cdk/core';
import * as s3 from '@aws-cdk/aws-s3';
import * as lambda from '@aws-cdk/aws-lambda';


class PersistenceStack extends cdk.Stack {
    public readonly bucket: s3.Bucket;
    constructor(scope: cdk.Construct, id: string, props?: cdk.StackProps) {
        super(scope, id, props);
        this.bucket = new s3.Bucket(this, 'bucket');
    }
}


interface ApplicationStackProps extends cdk.StackProps {
    bucket: s3.Bucket;
}


class ApplicationStack extends cdk.Stack {
    constructor(scope: cdk.Construct, id: string, props: ApplicationStackProps) {
        super(scope, id, props);
        const myLambda = new lambda.Function(this, 'lambda', {
            runtime: lambda.Runtime.NODEJS_12_X,
            code: new lambda.AssetCode('my-lambda'),
            handler: 'index.handler'
        });
        props.bucket.grantReadWrite(myLambda);
    }
}


class MyApp extends cdk.Construct {

    constructor(scope: cdk.Construct, id: string, props: cdk.StackProps) {
        super(scope, id);

        const persistenceStack = new PersistenceStack(this, 'persistence-stack', {
            ...props,
            description: 'persistence stack',
            stackName: `${id}-persistence-stack`,
        });

        const applicationStack = new ApplicationStack(this, 'application-stack', {
            ...props,
            description: 'application stack',
            stackName: `${id}-application-stack`,
            bucket: persistenceStack.bucket,
        });
        applicationStack.addDependency(persistenceStack);
    }
}


const app = new cdk.App();

new MyApp(app, `test`, { env: { account: '111111111111', region: 'eu-west-1' } });
new MyApp(app, `prod`, { env: { account: '222222222222', region: 'eu-west-1' } });
```


### Expected result

I expected to see is "nice" (or at least predictable) stack names when executing `$ npx cdk synth` since I have specified the `stackName` properties when calling the constructors, e.g.
 
    Successfully synthesized to [...]/my-app/cdk.out
    Supply a stack id (prodpersistencestack, testpersistencestack, prodapplicationstack, testapplicationstack) to display its template.


### Actual result

Stack names similar to:

    Successfully synthesized to [...]/my-app/cdk.out
    Supply a stack id (prodpersistencestackFE36DF49, testpersistencestack6C35C777, prodapplicationstackA0A96586, testapplicationstackE19450AB) to display its template.


### Motivation

I need to the "nice" stack names to feed into the next step our CI/CD pipeline so that I can configure the build server to deploy the CDK app, e.g.

```
npx cdk deploy \
    --app cdk.out \
    --require-approval never \
   testpersistencestack
```

```
npx cdk deploy \
    --app cdk.out \
    --require-approval never \
   testapplicationstack
```

### Environment

  - **CLI Version: 1.21.1 (build 842cc5f)**
  - **Framework Version: 1.21.1**
  - **OS: macOS Catalina Version 10.15.2**
  - **Language: TypeScript**


--- 

This is :bug: Bug Report

This is a reposting of #5791, which was linked to PR https://github.com/aws/aws-cdk/pull/5803 but persists from 1.20.0 to 1.21.1.




### Reproduction Steps

Using an account not linked to credentials from the default configuration gives errors in the execution of cdk synth.




### Error Log
```console
context: {
  'availability-zones:account=2:region=us-east-2': {
    '$providerError': 'Need to perform AWS calls for account 2, but no credentials found. Tried: default credentials.',
    '$dontSaveContext': true
  },
  'aws:cdk:enable-path-metadata': true,
  'aws:cdk:enable-asset-metadata': true
}
outdir: cdk.out
env: {
  CDK_DEFAULT_REGION: 'eu-central-1',
  CDK_DEFAULT_ACCOUNT: '[redacted-main account]',
  CDK_CONTEXT_JSON: '{"availability-zones:account=2:region=us-east-2":{"$providerError":"Need to perform AWS calls for account 2, but no credentials found. Tried: default credentials.","$dontSaveContext":true},"aws:cdk:enable-path-metadata":true,"aws:cdk:enable-asset-metadata":true}',
  CDK_OUTDIR: 'cdk.out',
  CDK_CLI_ASM_VERSION: '1.16.0',
  CDK_CLI_VERSION: '1.21.1'
}
Not making progress trying to resolve environmental context. Giving up.
[Error at /upg/skeleton] Need to perform AWS calls for account 2, but no credentials found. Tried: default credentials.
```


### Environment

  - **CLI Version      :1.21.1
  - **Framework Version:1.21.1
  - **OS               :Mac OS Catalina
  - **Language         :Python

### Other

Attached: output file with -v, and output with authentication, which is what we do not want to do at the stage that cdk synth is called. And the code that causes the error, zipped.

[Archive.zip](https://github.com/aws/aws-cdk/files/4077193/Archive.zip)

[output-v.pdf](https://github.com/aws/aws-cdk/files/4077189/output-v.pdf)
[outputdummyvsauthenticated.pdf](https://github.com/aws/aws-cdk/files/4077190/outputdummyvsauthenticated.pdf)





--- 

This is :bug: Bug Report
