The bug in parking_lot that made it necessary to use a write-lock has
been fixed and we can go back to using an upgradable read-lock.

This cleanup is part of issue #188.

Signed-off-by: Michal Terepeta <michal.terepeta@gmail.com>
This is somewhere between a question and a feature request, but here goes. I've been trying out salsa on a pet project of mine, building a kind of database over a list of records consisting of `(Subj, Pred, Obj)`. I then have queries for doing what is essentially graph analysis over these records, or rather, this single list of entries. The `Subj`, `Pred` and `Obj` is interned using the `salsa::interned` attribute, and the main "input" to this database is a `im::Vector<Trip>` (where `Trip` is an interned record). This seemingly works pretty well, however, it required me to bring in some form of cheap-to-clone, copy-on-write list type myself, so I was wondering if this shouldn't be part of salsa itself? I imagine something like the following to be very useful to have:

```rust
struct MyQGroup {
  #[salsa::input_list]
  fn files(&self) -> &[&'static str];
}

let mut db = Default::default();

// this returns a handle, borrowing the db, sort of like a RwLockGuard.
let mut files = db.files_mut(); 

// files have a vec-like API.
files.push("foo.bar");

// explicit drop here (cause in this case everything is in a single scope).
drop(files);

let files = db.files();
println!("{}", files.len());
```

Note; in this sample, I've simplified things quite a bit and used a slice as the return value from the `files()` fn. This is probably not what should be done at all, given that a slice requires continuous memory (as far as I know at least), and that doesn't mesh that well with any sort of immutable list structure (again, as far as I know). I'm expecting that the actual implementation of this would rely on some sort of trait, like `InternKey`. What's returned from `files_mut()` is also entirely up in the air, I just figured this could be something to start discussion off. Or simply decide that this is an unwanted feature.

As an alternative to this, I would at least suggest some documentation on how to work with lists (and probably an example with lists), cause at least for me that was the biggest "how do I start using this for anything but toy samples" question I had.
When using the `#[salsa::invoke(...)]` attribute inside a `#[query_group]`, clippy complains about type repetition inside the function's bounds.

This is the code in question:

```rust
#[salsa::query_group(IrDatabaseStorage)]
pub trait IrDatabase: hir::HirDatabase {
    /// Get the LLVM context that should be used for all generation steps.
    #[salsa::input]
    fn context(&self) -> Arc<Context>;

    /// Gets the optimization level for generation.
    #[salsa::input]
    fn optimization_lvl(&self) -> OptimizationLevel;

    /// Returns the target for code generation.
    #[salsa::input]
    fn target(&self) -> Target;

    /// Given a type, return the corresponding IR type.
    #[salsa::invoke(crate::ir::ty::ir_query)]
    fn type_ir(&self, ty: hir::Ty) -> AnyTypeEnum;

    /// Given a `hir::FileId` generate code for the module.
    #[salsa::invoke(crate::ir::module::ir_query)]
    fn module_ir(&self, file: hir::FileId) -> Arc<ModuleIR>;

    /// Given a type, return the runtime `TypeInfo` that can be used to reflect the type.
    #[salsa::invoke(crate::code_gen::symbols::type_info_query)]
    fn type_info(&self, ty: hir::Ty) -> TypeInfo;
}
```

and these are the consequent warnings in clippy:

```rust
warning: this type has already been used as a bound predicate
  --> crates\mun_codegen\src\db.rs:26:8
   |
26 |     fn type_ir(&self, ty: hir::Ty) -> AnyTypeEnum;
   |        ^^^^^^^
   |
   = note: `#[warn(clippy::type_repetition_in_bounds)]` on by default
   = help: consider combining the bounds: `type_ir: IrDatabase + salsa::plumbing::HasQueryGroup<IrDatabaseStorage>`
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#type_repetition_in_bounds

warning: this type has already been used as a bound predicate
  --> crates\mun_codegen\src\db.rs:26:8
   |
26 |     fn type_ir(&self, ty: hir::Ty) -> AnyTypeEnum;
   |        ^^^^^^^
   |
   = help: consider combining the bounds: `type_ir: salsa::plumbing::HasQueryGroup<IrDatabaseStorage> + salsa::Database`
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#type_repetition_in_bounds

warning: this type has already been used as a bound predicate
  --> crates\mun_codegen\src\db.rs:30:8
   |
30 |     fn module_ir(&self, file: hir::FileId) -> Arc<ModuleIR>;
   |        ^^^^^^^^^
   |
   = help: consider combining the bounds: `module_ir: IrDatabase + salsa::plumbing::HasQueryGroup<IrDatabaseStorage>`
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#type_repetition_in_bounds

warning: this type has already been used as a bound predicate
  --> crates\mun_codegen\src\db.rs:30:8
   |
30 |     fn module_ir(&self, file: hir::FileId) -> Arc<ModuleIR>;
   |        ^^^^^^^^^
   |
   = help: consider combining the bounds: `module_ir: salsa::plumbing::HasQueryGroup<IrDatabaseStorage> + salsa::Database`
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#type_repetition_in_bounds

warning: this type has already been used as a bound predicate
  --> crates\mun_codegen\src\db.rs:34:8
   |
34 |     fn type_info(&self, ty: hir::Ty) -> TypeInfo;
   |        ^^^^^^^^^
   |
   = help: consider combining the bounds: `type_info: IrDatabase + salsa::plumbing::HasQueryGroup<IrDatabaseStorage>`
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#type_repetition_in_bounds

warning: this type has already been used as a bound predicate
  --> crates\mun_codegen\src\db.rs:34:8
   |
34 |     fn type_info(&self, ty: hir::Ty) -> TypeInfo;
   |        ^^^^^^^^^
   |
   = help: consider combining the bounds: `type_info: salsa::plumbing::HasQueryGroup<IrDatabaseStorage> + salsa::Database`
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#type_repetition_in_bounds
```
Used version:
```toml
salsa="0.12"
```
OK so it's going to be a bit tricky. The problem is this: *somebody* needs to be able to give us a "simultaneously live" `&mut Q::Storage` and `&mut SalsaRuntime`. Unfortunately, right now, those two bits of data are supplied by two distinct traits.

One thing that might help us here would be if we gave up the idea that the user defines the Salsa database type. Instead, salsa database would be a struct that **we** define -- but it has a "userdata" field that users can specify.

I've thought about this for other reasons. In particular, for the purposes of guaranteeing safety, it seems suboptimal that the DB -> runtime link is defined by end-users, who could do all manner of crazy things in there.

_Originally posted by @nikomatsakis in https://github.com/salsa-rs/salsa/pull/197_
In the older codebase, GC could never collect a slot key. We now enable this by transforming slots to a *removed* state. There is a slight race condition in that someone *reading* the slot might now race with the GC which would remove it in the meantime; in that case we simply try again.
In #147, I noted an alternative impl strategy for cycle handling that I wanted to explore:

> Anyway, I also started a branch that was implemented a bit differently. What I was trying to do was to have each active query have an associated `Arc` with a pointer to the next active query on the stack (i.e., what it is blocked on). This way you could follow a chain of queries forward across threads pretty cleanly and lazily. I seem to recall that the code in this PR was a bit more complex -- but then I don't think I've looked at it since you rebased. 

Filing this issue so I don't forget. Still hoping to explore this, but I'd also be happy to work with someone else on it. 
@matklad made a number of comments in https://github.com/salsa-rs/salsa/pull/180 that seem worth following up on, but which are not particularly related to that PR, so I'm pulling them into a separate comment to be pursued separately:

---

> observation: we call `validate_memoized_value` in `read_upgrade`, after replacing QueryState with InProgress. It seems to me that, after slots, we actually can do that in `read`, without aquiring a write lock at all.

_Originally posted by @matklad in https://github.com/salsa-rs/salsa/pull/180#issuecomment-508762722_

---

> Also, we can switch back to upgradable reads here, the issue was fixed in parking lot a while ago

_Originally posted by @matklad in https://github.com/salsa-rs/salsa/pull/180#issuecomment-508764489_

---

> Also `maybe_check_since` looks suspiciously similar to `probe` + `validate_memoized_value`. Could it be the case that, after slots, we can share more code between the two?

_Originally posted by @matklad in https://github.com/salsa-rs/salsa/pull/180#issuecomment-508773298_
Part 3 of the 1, 2, 3 is confusing to me, as it suddenly talks about a "query struct" (which has not been previously mentioned) when talking about the database.

https://github.com/salsa-rs/salsa/blob/57174e2c63d8aeb0dc95ddb0647533b8274119b4/README.md#L44-L47

My "reading the comments in the helloworld example" skills tell me that it may be referring to storage being split out in structs per query group, and the database just puts all those together, but I actually know nothing about Salsa so it's very possible that I'm wrong.

TLDR: I can count to three, but I can't understand this 1, 2, 3.
Would it be possible to have Salsa print the underlying data for interned values in its debug output? For example:

```
Internal error, cycle detected:
- __SalsaDatabaseKey { kind: CheckerStorage(check_declaration_head((DocumentUri { id: 118 }, Identifier { id: 52 }))) }

- __SalsaDatabaseKey { kind: CheckerStorage(check_declaration_head((DocumentUri { id: 118 }, Identifier { id: 53 }))) }
```

It would be nice to see the underlying strings for the identifiers.
Wanted to check how much code would need to be added/duplicated to
support async queries. This isn't a a full implementation (I haven't
even tested to call async functions) but the normal sync implementation
still work with this with what shouldn't be too much overhead.

Not really interested in this until async/await gets to stable but
figured a PR with this could still be useful.