Hi, i'm trying to set up glslViewer, i did every passage on the terminal (i have the last MacOS) but the visual code terminal is showing me this while the glslViewer window doesn't change color even modifying the vec4  (eventually sorry for my english).

  // > MBP-di-XXX:Test XXX$ glslViewer 005_color.frag
Error linking shader: ERROR: Compiled fragment shader was corrupt.

0: NOT FOUND
// > 
I started using glslViewer for the purpose of installations utilizing CRT output, when connected to Raspberry Pi. I can see that my relatively simple shaders are getting slower over time, approximately after 1 day, and no longer run real time. It seems that the effect intensifies. Applies to both, Pi 1 and Pi 3. As a workaround I ask the technicians to restart it every day before the show, but most likely I will introduce automatic restart script.
![image](https://user-images.githubusercontent.com/35475866/70767622-fc1bb780-1d9c-11ea-8090-a03f2adac22e.png)

Darwin platform with glfw drivers
Package glfw3 was not found in the pkg-config search path.
Perhaps you should add the directory containing `glfw3.pc'
to the PKG_CONFIG_PATH environment variable
No package 'glfw3' found
src/main.o
/usr/bin/clang++ -Wall -O3 -std=c++11 -fpermissive -arch x86_64 -DPLATFORM_OSX -DDRIVER_GLFW -stdlib=libc++  -Isrc/ -Iinclude/ -I/System/Library/Frameworks/GLUI.framework -g -c src/main.cpp -o src/main.o -Wno-deprecated-declarations
In file included from src/main.cpp:14:
src/gl/gl.h:26:10: fatal error: 'GLFW/glfw3.h' file not found
#include <GLFW/glfw3.h>
         ^~~~~~~~~~~~~~
1 error generated.
make: *** [src/main.o] Error 1
how to fixed?
I wanted to make use of the built-in camera in glslViewer for a ray-marching fragment shader.  The way I was doing things the camera acted strangely, so I tried upgrading glslViewer because I saw a commit that changed some camera behavior since the version I using.  But now it doesn't work at all.  Things look OK when the shader starts, but when I try to adjust the camera with the mouse, the shader breaks and the camera_position command gives me nan,nan,nan.

But even if this is fixed, I feel like I don't fully understand how to use the camera.  I tried getting ray directions doing `(u_viewMatrix * vec4(sc, 0.5, 0.)).xyz`  where sc is screen coordinates ~[-0.5, 0.5]. and this kinda seemed to work, but the control seemed really funky so I'm thinking maybe I don't actually know what the view matrix represents (I'm a noob).
Hi there, I'm having trouble compiling on fedora. I've made sure to follow the directions and install the dependencies. Here's the error message I'm getting. Not sure what's going on since C++ isn't my strongest language.

https://pastebin.com/H7WCEZkj


This is problem of Viewer or code of shader?
Ubuntu 18 , glslViewer work well with examples, but from differ shader show error linking shader
As far as i understand there is no support for changing filtering when loading textures. 
so, I have a [wavefront .obj](https://github.com/patriciogonzalezvivo/glslViewer/files/3746710/cat.zip) with materials and texture, here is how [tinyobjloader viewer](https://github.com/syoyo/tinyobjloader/tree/master/examples/viewer) parse it and shows
```
Parsing time: 82 [ms]
# of vertices  = 2247
# of normals   = 2152
# of texcoords = 2032
# of materials = 1
# of shapes    = 1
material[0].diffuse_texname = cat_diff.png
material[1].diffuse_texname = 
Loaded texture: ./examples/viewer/cat_diff.png, w = 512, h = 1024, comp = 4
shape[0] material_id 0
shape[0] # of triangles = 3954
bmin = -34.537102, -0.101900, -8.205600
bmax = 31.101000, 45.306301, 8.543600
```
![a](https://user-images.githubusercontent.com/8250079/67145737-2a40b780-f284-11e9-90b5-957502ca3229.png)
here same model parsed by your viewer
```
Loading ./examples/viewer/cat.obj
    Total vertices  = 2247
    Total colors    = 2247
    Total normals   = 2152
    Total texcoords = 2032
    Total materials = 1
    Total shapes    = 1
Shapes: 
Add Material cat
// ./examples/viewer/cat_diff.png loaded as: 
//    uniform sampler2D u_cat_diff;
//    uniform vec2 u_cat_diffResolution;
default_object_001
    vertices = 2906
    colors   = 2906
    normals  = 2906
    uvs      = 2906
    indices  = 11862
    triang.  = 3954
    . Compute tangents
// Reload 3D scene shaders
shader load time: 0.00107493s
```
![a](https://user-images.githubusercontent.com/8250079/67145770-7e4b9c00-f284-11e9-9bd4-6f01a4b981e6.png)
issue seems related to texture addressing or some other fact... can you take a look?

```
make
src/window.o
g++ -Wall -O3 -std=c++11 -fpermissive -DPLATFORM_LINUX -I/usr/local/include -I/usr/include/libdrm -Isrc/ -Iinclude/ -g -c src/window.cpp -o src/window.o -Wno-deprecated-declarations
src/window.cpp: In function ‘void initGL(glm::ivec4&, bool, bool)’:
src/window.cpp:202:42: error: ‘GL_FALSE’ was not declared in this scope
             glfwWindowHint(GLFW_VISIBLE, GL_FALSE);
                                          ^~~~~~~~
src/window.cpp:202:42: note: suggested alternative: ‘GLFW_FALSE’
             glfwWindowHint(GLFW_VISIBLE, GL_FALSE);
                                          ^~~~~~~~
                                          GLFW_FALSE
src/window.cpp:206:43: error: ‘GL_TRUE’ was not declared in this scope
             glfwWindowHint(GLFW_FLOATING, GL_TRUE);
                                           ^~~~~~~
src/window.cpp:206:43: note: suggested alternative: ‘GLFW_TRUE’
             glfwWindowHint(GLFW_FLOATING, GL_TRUE);
                                           ^~~~~~~
                                           GLFW_TRUE
src/window.cpp: In function ‘void closeGL()’:
src/window.cpp:482:42: error: ‘GL_TRUE’ was not declared in this scope
         glfwSetWindowShouldClose(window, GL_TRUE);
                                          ^~~~~~~
src/window.cpp:482:42: note: suggested alternative: ‘GLFW_TRUE’
         glfwSetWindowShouldClose(window, GL_TRUE);
                                          ^~~~~~~
                                          GLFW_TRUE
src/window.cpp: In function ‘void setWindowSize(int, int)’:
src/window.cpp:492:5: error: ‘glViewport’ was not declared in this scope
     glViewport(0.0, 0.0, (float)getWindowWidth(), (float)getWindowHeight());
     ^~~~~~~~~~
src/window.cpp:492:5: note: suggested alternative: ‘getViewport’
     glViewport(0.0, 0.0, (float)getWindowWidth(), (float)getWindowHeight());
     ^~~~~~~~~~
     getViewport
Makefile:60: recipe for target 'src/window.o' failed
make: *** [src/window.o] Error 1
```
When attempting to run glslViewer on a Raspberry Pi 3 B+ running Raspbian 9 (stretch), it throws the following error:

```
glslViewer: src/app.cpp:493: glm::ivec2 getScreenSize(): Assertion `success >= 0' failed.
Aborted
```

At least one other user experienced this issue back in 2017, as reported here: https://www.raspberrypi.org/forums/viewtopic.php?t=179373