Unable to compile this:
```scala
  import emm._
  import emm.compat.cats._
  import cats._
  import cats.data.ReaderT
  import cats.data.ReaderT._
  import cats.std.option._
  import cats.std.list._

  type E = List |: Option |: ReaderT[Id, String, ?] |: Base
  val name = Option("x")
  name.liftM[E]
```

When remove `ReaderT` from stack it compiles.
How bout it? What do you think?


There is now

```
  addCompilerPlugin("com.milessabin" % "si2712fix-plugin_2.11.8" % "1.1.0")
```

So start deleting implicits ;-)

Maybe even depend on the compiler plugin by default?

It's kinda important to be able to lift into stacks which contain effects in the kleisli category.

This might be an interesting function:

``` scala
val e1: Emm[Task |: List |: Option |: Base, A] = ???
e1.flip[List, Option]   // => Emm[Task |: Option |: List |: Base, A]

val e2: Emm[Task |: List |: (String \/ ? ) |: Option |: Base, A] = ???
e2.flip[List, Option]   // => Emm[Task |: Option |: (String \/ ?) |: List |: Base, A]
```

Should be implementable for any useful stack, since we just need to traverse things to flip around.

No one knows these things exist!  Probably because you would literally need to read the implicit resolution chains to learn anything about themâ€¦

It would be useful to have a function on `Emm`, `transform`, which takes a natural transformation `F ~> G` such that `F` is in the effect stack, and the resulting `Emm` has an effect stack where `F` has been replaced with `G`.

Right now, it's somewhat difficult to compose functions which return `Emm` but with differing (but potentially still _compatible_) effect stacks.  We should have a function which handles this problem.  For example:

``` scala
val e1: Emm[Task |: Base, Int] = ???
val e2: Emm[Option |: Base, String] = ???

val (u1, u2) = Emm.unify(e1, e2)

:t u1    // => Emm[Task |: Option |: Base, Int]
:t u2    // => Emm[Task |: Option |: Base, String]
```
