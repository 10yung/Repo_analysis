My Abao tests are not running: upon running the test, I get the message: Found Hookfiles: tests/raml/test_machines_hooks.js 

But none of the tests run as they did before. 

Nothing has changed about the hookfiles or the RAML. Please advise what could have caused this issue
As the [tv4](https://github.com/geraintluff/tv4) package no longer seems to get any love (last updated in Sep 2015), I've looked around for a replacement.

[Benchmarks](https://github.com/ebdrup/json-schema-benchmark/) show the [ajv](https://github.com/epoberezkin/ajv) package to be an excellent candidate -- it's about 50 times faster than `tv4` and passes all tests (except one which no JS implementation can). It also supports 
JSON Schema draft-07. While not a drop-in replacement, its API is very similar in many respects to `tv4` so _hopefully_ minimal changes will be needed for the migration.
Your FOSSA integration was successful! Attached in this PR is a badge and license report to track scan status in your README.

Below are docs for integrating FOSSA license checks into your CI:

- [CircleCI](http://fossa.io/docs/integrating-tools/circleci/)
- [TravisCI](http://fossa.io/docs/integrating-tools/travisci/)
- [Jenkins](https://github.com/fossas/fossa-jenkins-plugin)
- [Other](https://github.com/fossas/license-cli)

‚òùÔ∏è Greenkeeper‚Äôs [updated Terms of Service](https://mailchi.mp/ebfddc9880a9/were-updating-our-terms-of-service) will come into effect on April 6th, 2018.

Let‚Äôs get started with automated dependency management for abao :muscle:



This pull request **updates all your dependencies to their latest version**. Having them all up to date really is the best starting point for keeping up with new releases. Greenkeeper will look out for further dependency updates and make sure to handle them in isolation and in real-time, but only after **you merge this pull request**.

**Important: Greenkeeper will only start watching this repository‚Äôs dependency updates after you merge this initial pull request**.



---
<details>
<summary>üí• Tests on this branch are failing. Here‚Äôs how to proceed.</summary>

To solve the issue, first find out which of the dependency‚Äôs updates is causing the problem. Then fix your code to accomodate the changes in the updated dependency. [next-update](https://www.npmjs.com/package/next-update) is a really handy tool to help you with this.

Then push your changes to this branch and merge it.
</details>
<details>
<summary>üè∑ How to check the status of this repository</summary>

Greenkeeper adds a badge to your README which indicates the status of this repository.

This is what your badge looks like right now :point_right:  ![Greenkeeper badge](https://badges.greenkeeper.io/cybertk/abao.svg)
</details>
<details>
<summary>üôà How to ignore certain dependencies</summary>

You may have good reasons for not wanting to update to a certain dependency right now. In this case, you can [change the dependency‚Äôs version string in the `package.json` file back to whatever you prefer](https://github.com/cybertk/abao/edit/greenkeeper/initial/package.json).

To make sure Greenkeeper doesn‚Äôt nag you again on the next update, add a `greenkeeper.ignore` field to your `package.json`, containing a list of dependencies you don‚Äôt want to update.

```js
// package.json
{
  ‚Ä¶
  "greenkeeper": {
    "ignore": [
      "package-names",
      "you-want-me-to-ignore"
    ]
  }
}
```
</details>
<details>
<summary>üë©‚Äçüíª How to update this pull request</summary>

```bash
  # Change into your repository‚Äôs directory
  git fetch
  git checkout greenkeeper/initial
  npm install-test
  # Adapt your code until everything works again
  git commit -m 'chore: adapt code to updated dependencies'
  git push origin greenkeeper/initial
```
</details>
<details>
<summary>‚ú® How do dependency updates work with Greenkeeper?</summary>

After you merge this pull request, **Greenkeeper will create a new branch whenever a  dependency is updated**, with the new version applied. The branch creation should trigger your testing services and check whether your code still works with the new dependency version. Depending on the the results of these tests Greenkeeper will try to open meaningful and helpful pull requests and issues, so your dependencies remain working and up-to-date.

```diff
-  "underscore": "^1.6.0"
+  "underscore": "^1.7.0"
```

The above example shows an in-range update. `1.7.0` is included in the old `^1.6.0` range, because of the [caret `^` character ](https://docs.npmjs.com/misc/semver#ranges).
When the test services report success Greenkeeper will silently delete the branch again, because no action needs to be taken ‚Äì everything is fine.

However, should the tests fail, Greenkeeper will create an issue to inform you about the problem immediately.

This way, you‚Äôll never be surprised by a dependency breaking your code. As long as everything still works, Greenkeeper will stay out of your way, and as soon as something goes wrong, you‚Äôll be the first to know.

```diff
-  "lodash": "^3.0.0"
+  "lodash": "^4.0.0"
```

In this example, the new version `4.0.0` is _not_ included in the old `^3.0.0` range.
For version updates like these ‚Äì let‚Äôs call them ‚Äúout of range‚Äù updates ‚Äì you‚Äôll receive a pull request.

This means that **you no longer need to check for new versions manually** ‚Äì Greenkeeper will keep you up to date automatically.

These pull requests not only serve as reminders to update: If you have solid tests and good coverage, and the pull requests passes those tests, you can very likely just merge it and release a new version of your software straight away :shipit:

To get a better idea of which ranges apply to which releases, check out the extremely useful [semver calculator](https://semver.npmjs.com/) provided by npm.
</details>
<details>
<summary>FAQ and help</summary>

There is a collection of [frequently asked questions](https://greenkeeper.io/faq.html). If those don‚Äôt help, you can always [ask the humans behind Greenkeeper](https://github.com/greenkeeperio/greenkeeper/issues/new).
</details>

---


Good luck with your project and see you soon :sparkles:

Your [Greenkeeper](https://greenkeeper.io) bot :palm_tree:

Using abao to test my REST API, which is running in the default Docker machine:

```me$ abao my-api.raml --server $(docker-machine ip)```

Hangs for <.5s, then abao exits and I'm back at my prompt, nothing output or printed by abao. Even when I run with just the names option (`me$ abao my-api.raml --names`), it exits with no output. If it's failing or throwing an error, it's doing so silently; so I have no good way to troubleshoot.

Initially, some of my JSON schema were invalid, and abao was (correctly) complaining; so I know abao is working to that degree, and I have now confirmed that all my JSON and RAML is valid.
We ought to fix the dependency versions so that future fresh builds do not pull unwanted breaking change package updates.  The node community is pretty inconsistent in maintaining SEMVER(which we should follow), and as such, relying on wildcards such as `^` and `~` will bite us in the long run.


We should establish contributing guidelines and place them in a `CONTRIBUTING` file.

Leaving this open for discussion.
We should add a `CHANGELOG.md` to the project as it is the idiomatic way of displaying changes in a repository.  The releases are great and should tie into it.  

Open for discussion of course
In an effort to keep the codebase manageable with numerous contributors, it would be helpful if we had a linter in place.  The obvious choice is ESLint, followed by the specific style guide that we can start with and then customize accordingly.

I'll make some propositions:
* Airbnb styleguide: https://github.com/airbnb/javascript
* Prettier alongside the airbnb guide:  https://github.com/prettier/prettier
As ES7 brings most of Coffee Script features, it's time to roll it.