So, long story short : 

OPTIONS with the following origin works : http://127.0.0.1:8080 returning : 

`* Connection state changed (MAX_CONCURRENT_STREAMS updated)!
< HTTP/2 200
< date: Tue, 05 Nov 2019 08:49:29 GMT
< content-length: 0
< server: nginx/1.17.5
< access-control-allow-headers: content-type
< access-control-allow-origin: *
< access-control-allow-methods: POST, PUT, GET, OPTIONS, DELETE
< access-control-max-age: 600`

OPTIONS with the following origin doesn't : http://127.0.0.1:8080/mycoolpage

`* Connection state changed (MAX_CONCURRENT_STREAMS updated)!
< HTTP/2 204
< date: Tue, 05 Nov 2019 08:48:54 GMT
< server: nginx/1.17.5
< allow: POST
<`

My Akka Http Cors is the following : 

 ```
private val corsSettings: CorsSettings = CorsSettings(actorSystem)
      .withAllowedOrigins(HttpOriginMatcher.*)
      .withAllowCredentials(false)
      .withAllowedMethods(scala.collection.immutable.Seq(HttpMethods.POST, HttpMethods.PUT, HttpMethods.GET, HttpMethods.OPTIONS, HttpMethods.DELETE))
      .withExposedHeaders(scala.collection.immutable.Seq(
        "Content-Type",
        "X-Content-Type",
        "x-access-token",
        "x-refresh-token",
      ))
```

Akka doesn't seem to manage origin which are not hostnames ?
Hello!
I'm trying to use your library to apply cors in akka-http.

When I configured with
`cors(settings) {
  route
}
`
and settings includes allowedOrigins, it seems that the requests from the same origin also be blocked with invalidOrigin rejection. Is there a good way to filter that out?
Some methods in `CoreSettings` take a `Seq`, e.g.  `CoreSettings.withAllowedMethods`. However this does not work with the default `Seq` that is imported from the `scala` package. It requires the more restrictive `scala.collection.immutable.Seq` which is a subclass of the default `Seq`.

The reason for this is that `CorsSettings.scala` has `import scala.collection.immutable.Seq` so all uses of `Seq` refer to the more restrictive type. Looking at the code there appears to be no benefit from this more restrictive type, so the fix is to remove the `import`.
I had great difficulties overriding the settings in a test.

I think this is caused by the default-config is loaded too early:
```scala
val defaultSettings = apply(ConfigFactory.load(getClass.getClassLoader))
``` 
The above works when configuring in the default application.conf, but not in a different config-file used specifically when starting the actor-system. It also does not work to configure it by parsing config string when starting actorSystem.

If I loaded the config like this AFTER the actorSystem had started:
```scala
def corsSettings(actorSystem:ActorSystem):CorsSettings = CorsSettings(actorSystem)
```

Then it used the config that was "current".

(Sorry for the bad explanation)
in https://github.com/lomigmegard/akka-http-cors/blob/master/akka-http-cors/src/main/scala/ch/megard/akka/http/cors/CorsDirectives.scala#L126

Non preflight request is being rejected because it came from an unknown origin

correct behaviour: Non preflight requests from unknown origins should not be rejected
