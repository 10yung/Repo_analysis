OS: Ubuntu:18.04
Version: Release-0.6-Cuda10, 

swift repl crashes everytime I press tab for auto completion of any symbol.

 1> printterminate called after throwing an instance of 'std::out_of_range'
  what():  basic_string::substr: __pos (which is 5) > this->size() (which is 4)
/home/rpathak/Templates/tmp_tools/Swift/S4TFToolchain/usr/bin/lldb[0x421d04]
/home/rpathak/Templates/tmp_tools/Swift/S4TFToolchain/usr/bin/lldb[0x41fd0e]
/home/rpathak/Templates/tmp_tools/Swift/S4TFToolchain/usr/bin/lldb[0x4222a6]
/lib/x86_64-linux-gnu/libpthread.so.0(+0x12890)[0x7f7d2fef6890]
/lib/x86_64-linux-gnu/libc.so.6(gsignal+0xc7)[0x7f7d2686ce97]
/lib/x86_64-linux-gnu/libc.so.6(abort+0x141)[0x7f7d2686e801]
/usr/lib/x86_64-linux-gnu/libstdc++.so.6(+0x8c957)[0x7f7d26ec3957]
/usr/lib/x86_64-linux-gnu/libstdc++.so.6(+0x92ab6)[0x7f7d26ec9ab6]
/usr/lib/x86_64-linux-gnu/libstdc++.so.6(+0x92af1)[0x7f7d26ec9af1]
/usr/lib/x86_64-linux-gnu/libstdc++.so.6(+0x92d24)[0x7f7d26ec9d24]
/usr/lib/x86_64-linux-gnu/libstdc++.so.6(+0x8e855)[0x7f7d26ec5855]
/home/rpathak/Templates/tmp_tools/Swift/S4TFToolchain/usr/bin/../lib/liblldb.so.7svn(+0xc6a238)[0x7f7d28a1b238]
/home/rpathak/Templates/tmp_tools/Swift/S4TFToolchain/usr/bin/../lib/liblldb.so.7svn(+0xc6c6f9)[0x7f7d28a1d6f9]
/usr/lib/x86_64-linux-gnu/libedit.so.2(el_wgets+0x1a7)[0x7f7d25d54df7]
/home/rpathak/Templates/tmp_tools/Swift/S4TFToolchain/usr/bin/../lib/liblldb.so.7svn(+0xc6bf42)[0x7f7d28a1cf42]
/home/rpathak/Templates/tmp_tools/Swift/S4TFToolchain/usr/bin/../lib/liblldb.so.7svn(+0xbc97a4)[0x7f7d2897a7a4]
/home/rpathak/Templates/tmp_tools/Swift/S4TFToolchain/usr/bin/../lib/liblldb.so.7svn(+0xbadf16)[0x7f7d2895ef16]
/home/rpathak/Templates/tmp_tools/Swift/S4TFToolchain/usr/bin/../lib/liblldb.so.7svn(+0xbb1fdf)[0x7f7d28962fdf]
/home/rpathak/Templates/tmp_tools/Swift/S4TFToolchain/usr/bin/../lib/liblldb.so.7svn(+0xc75a1c)[0x7f7d28a26a1c]
/lib/x86_64-linux-gnu/libpthread.so.0(+0x76db)[0x7f7d2feeb6db]
/lib/x86_64-linux-gnu/libc.so.6(clone+0x3f)[0x7f7d2694f88f]
********************
Crash reproducer for lldb version 7.0.0 (https://github.com/apple/llvm-project.git revision f7d8385e28843e66f88a2b375b98c553967b318b)
Swift version 5.2-dev (Swift ccfceeadd5)

Reproducer written to '/tmp/reproducer-269cb8'

Before attaching the reproducer to a bug report:
 - Look at the directory to ensure you're willing to share its content.
 - Make sure the reproducer works by replaying the reproducer.

Replay the reproducer with the following command:
/home/rpathak/Templates/tmp_tools/Swift/S4TFToolchain/usr/bin/lldb -replay /tmp/reproducer-269cb8
********************
Aborted (core dumped)
(swift) rpathak@rpathak-Alienware-17-R5:~$ /home/rpathak/Templates/tmp_tools/Swift/S4TFToolchain/usr/bin/lldb -replay /tmp/reproducer-269cb8
lldb: /swift-base/llvm-project/lldb/include/lldb/Utility/ReproducerInstrumentation.h:306: T lldb_private::repro::Deserializer::Read(lldb_private::repro::ValueTag) [T = unsigned int]: Assertion `HasData(sizeof(T))' failed.
Stack dump:
0.	Program arguments: /home/rpathak/Templates/tmp_tools/Swift/S4TFToolchain/usr/bin/lldb -replay /tmp/reproducer-269cb8 
/home/rpathak/Templates/tmp_tools/Swift/S4TFToolchain/usr/bin/lldb[0x421d04]
/home/rpathak/Templates/tmp_tools/Swift/S4TFToolchain/usr/bin/lldb[0x41fd0e]
/home/rpathak/Templates/tmp_tools/Swift/S4TFToolchain/usr/bin/lldb[0x4222a6]
/lib/x86_64-linux-gnu/libpthread.so.0(+0x12890)[0x7f6df6ba9890]
/lib/x86_64-linux-gnu/libc.so.6(gsignal+0xc7)[0x7f6ded51fe97]
/lib/x86_64-linux-gnu/libc.so.6(abort+0x141)[0x7f6ded521801]
/lib/x86_64-linux-gnu/libc.so.6(+0x3039a)[0x7f6ded51139a]
/lib/x86_64-linux-gnu/libc.so.6(+0x30412)[0x7f6ded511412]
/home/rpathak/Templates/tmp_tools/Swift/S4TFToolchain/usr/bin/../lib/liblldb.so.7svn(+0x9355f2)[0x7f6def3995f2]
/home/rpathak/Templates/tmp_tools/Swift/S4TFToolchain/usr/bin/../lib/liblldb.so.7svn(+0xe7086d)[0x7f6def8d486d]
/home/rpathak/Templates/tmp_tools/Swift/S4TFToolchain/usr/bin/../lib/liblldb.so.7svn(+0xe704ca)[0x7f6def8d44ca]
/home/rpathak/Templates/tmp_tools/Swift/S4TFToolchain/usr/bin/../lib/liblldb.so.7svn(_ZN4lldb12SBReproducer6ReplayEPKcb+0x63b)[0x7f6def4349cb]
/home/rpathak/Templates/tmp_tools/Swift/S4TFToolchain/usr/bin/lldb[0x40b37f]
/home/rpathak/Templates/tmp_tools/Swift/S4TFToolchain/usr/bin/lldb[0x40b8e7]
/lib/x86_64-linux-gnu/libc.so.6(__libc_start_main+0xe7)[0x7f6ded502b97]
/home/rpathak/Templates/tmp_tools/Swift/S4TFToolchain/usr/bin/lldb[0x406bea]
Aborted (core dumped)

Hi,
I built S4TF with LLDB Python 3 support so that I could run Jupyter Notebook for macOS by checking out up to commit 7ffb598e6cef5d0373d2693dbadd97073e3c71d8 so that I avoided the regression that prevents swiftPM being built.
The following code (from the Python Interoperability notebook) results in "Couldn't lookup symbols" in Jupyter.  However, if you run the code in XCode it runs OK:

import TensorFlow

import Python

print(Python.version)

let np = Python.import("numpy")
print(np)
let zeros = np.ones([2, 3])
print(zeros)

import TensorFlow

let numpyArray = np.ones([4], dtype: np.float32)
print("Swift type:", type(of: numpyArray))
print("Python type:", Python.type(numpyArray))
print(numpyArray.shape)

// Examples of converting `numpy.ndarray` to Swift types.
let array: [Float] = Array(numpy: numpyArray)!
let shapedArray = ShapedArray<Float>(numpy: numpyArray)!
let tensor = Tensor<Float>(numpy: numpyArray)!

// Examples of converting Swift types to `numpy.ndarray`.
print(array.makeNumpyArray())
print(shapedArray.makeNumpyArray())
print(tensor.makeNumpyArray())

// Examples with different dtypes.
let doubleArray: [Double] = Array(numpy: np.ones([3], dtype: np.float))!
let intTensor = Tensor<Int32>(numpy: np.ones([2, 3], dtype: np.int32))!

You get the right answer to the last bit of code with Xcode:
3.7.6 | packaged by conda-forge | (default, Jan  7 2020, 22:08:30) 
[Clang 9.0.1 ]
<module 'numpy' from '/usr/local/opt/python3/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/numpy/__init__.py'>
[[1. 1. 1.]
 [1. 1. 1.]]
Swift type: PythonObject
Python type: <class 'numpy.ndarray'>
(4,)
[1. 1. 1. 1.]
[1. 1. 1. 1.]
[1. 1. 1. 1.]

With Jupyter you get the following for the final outpu of codet:
3.7.6 (default, Dec 30 2019, 19:38:26) 
[Clang 11.0.0 (clang-1100.0.33.16)]
<module 'numpy' from '/usr/local/opt/python3/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/numpy/__init__.py'>
[[1. 1. 1.]
 [1. 1. 1.]]
Swift type: PythonObject
Python type: <class 'numpy.ndarray'>
(4,)
Error: Couldn't lookup symbols:
  (extension in TensorFlow):TensorFlow.Tensor< where A: Python.NumpyScalarCompatible>.makeNumpyArray() -> Python.PythonObject
  (extension in TensorFlow):TensorFlow.Tensor< where A: Python.NumpyScalarCompatible>.makeNumpyArray() -> Python.PythonObject
  (extension in TensorFlow):TensorFlow.Tensor< where A: Python.NumpyScalarCompatible>.makeNumpyArray() -> Python.PythonObject
  (extension in TensorFlow):TensorFlow.Tensor< where A: Python.NumpyScalarCompatible>.makeNumpyArray() -> Python.PythonObject
  (extension in TensorFlow):TensorFlow.Tensor< where A: Python.NumpyScalarCompatible>.makeNumpyArray() -> Python.PythonObject
  (extension in TensorFlow):TensorFlow.Tensor< where A: Python.NumpyScalarCompatible>.makeNumpyArray() -> Python.PythonObject

The current macOS toolchain installation instructions are copied from https://swift.org/download:

![image](https://user-images.githubusercontent.com/5590046/72133333-04342c00-3336-11ea-9ec1-8be247fec1a4.png)

However, `$PATH` and `xcrun --toolchain swift` are not the easiest to work with. There have been multiple issues over time:
- https://github.com/tensorflow/swift/issues/331
- https://github.com/tensorflow/swift/pull/345

The [`swiftenv`](https://github.com/kylef/swiftenv) Swift version manager is much easier to use. It works nicely with Swift for TensorFlow macOS toolchains - I've personally used it since 2018 and never had any issues.

---

Example usage:

```console
$ swiftenv versions # list available versions
  tensorflow-DEVELOPMENT-2019-12-22-a
  tensorflow-RELEASE-0.5
  tensorflow-RELEASE-0.6
  5.1.1
* 5.1.2 (set by /Users/danielzheng/.swiftenv/version)

$ swiftenv global tensorflow-DEVELOPMENT-2019-12-22-a # set global version

$ swiftenv global # print global version
tensorflow-DEVELOPMENT-2019-12-22-a

$ swift # use toolchain set by swiftenv
Welcome to Swift version 5.2-dev (Swift a34e25915a).
Type :help for assistance.
  1> import TensorFlow
  2>
```

---

The last time I tried, I couldn't figure out how to use `swiftenv` easily with Swift for TensorFlow Linux toolchains. That's also worth investigating.
I am using macOS Catalina 10.15.3 beta and Xcode 11.3.
I am trying to build S4TF for macOS with LLDB Python3 support so that I can use swift-jupyter.

Steps:

brew install python
brew install python@2
(Close and reopen terminal)
pip2 install numpy future six
sudo chown -R $(whoami) /usr/local/lib/pkgconfig
chmod u+w /usr/local/lib/pkgconfig
brew install cmake ninja
brew cask install java
(Download bazel-0.27.1-installer-darwin-x86_64.sh)
chmod +x bazel-0.27.1-installer-darwin-x86_64.sh
./bazel-0.27.1-installer-darwin-x86_64.sh
mkdir swift-source
cd swift-source
git clone https://github.com/apple/swift.git -b tensorflow
./swift/utils/update-checkout --clone --scheme tensorflow
cd swift
utils/build-toolchain-tensorflow

The script almost finishes but then ends on the following error code while trying to build swiftpm-macosx-x86_64:

/Users/daniel/swift-source/swift/swift-nightly-install/Library/Developer/Toolchains/swift-tensorflow-LOCAL-2020-01-10-a.xctoolchain/usr/lib/swift/macosx/Darwin.swiftmodule/x86_64.swiftinterface:742:2: error: derivative not in the same file as the original function
@derivative(of: tan, wrt: x)
 ^
/Users/daniel/swift-source/swift/swift-nightly-install/Library/Developer/Toolchains/swift-tensorflow-LOCAL-2020-01-10-a.xctoolchain/usr/lib/swift/macosx/Darwin.swiftmodule/x86_64.swiftinterface:747:2: error: derivative not in the same file as the original function
@derivative(of: asin, wrt: x)
 ^
/Users/daniel/swift-source/swift/swift-nightly-install/Library/Developer/Toolchains/swift-tensorflow-LOCAL-2020-01-10-a.xctoolchain/usr/lib/swift/macosx/Darwin.swiftmodule/x86_64.swiftinterface:751:2: error: derivative not in the same file as the original function
@derivative(of: acos, wrt: x)
 ^
/Users/daniel/swift-source/swift/swift-nightly-install/Library/Developer/Toolchains/swift-tensorflow-LOCAL-2020-01-10-a.xctoolchain/usr/lib/swift/macosx/Darwin.swiftmodule/x86_64.swiftinterface:755:2: error: derivative not in the same file as the original function
@derivative(of: atan, wrt: x)
 ^
/Users/daniel/swift-source/swift/swift-nightly-install/Library/Developer/Toolchains/swift-tensorflow-LOCAL-2020-01-10-a.xctoolchain/usr/lib/swift/macosx/Darwin.swiftmodule/x86_64.swiftinterface:759:2: error: derivative not in the same file as the original function
@derivative(of: sinh, wrt: x)
 ^
/Users/daniel/swift-source/swift/swift-nightly-install/Library/Developer/Toolchains/swift-tensorflow-LOCAL-2020-01-10-a.xctoolchain/usr/lib/swift/macosx/Darwin.swiftmodule/x86_64.swiftinterface:763:2: error: derivative not in the same file as the original function
@derivative(of: cosh, wrt: x)
 ^
/Users/daniel/swift-source/swift/swift-nightly-install/Library/Developer/Toolchains/swift-tensorflow-LOCAL-2020-01-10-a.xctoolchain/usr/lib/swift/macosx/Darwin.swiftmodule/x86_64.swiftinterface:767:2: error: derivative not in the same file as the original function
@derivative(of: tanh, wrt: x)
 ^
/Users/daniel/swift-source/swift/swift-nightly-install/Library/Developer/Toolchains/swift-tensorflow-LOCAL-2020-01-10-a.xctoolchain/usr/lib/swift/macosx/Darwin.swiftmodule/x86_64.swiftinterface:772:2: error: derivative not in the same file as the original function
@derivative(of: asinh, wrt: x)
 ^
/Users/daniel/swift-source/swift/swift-nightly-install/Library/Developer/Toolchains/swift-tensorflow-LOCAL-2020-01-10-a.xctoolchain/usr/lib/swift/macosx/Darwin.swiftmodule/x86_64.swiftinterface:776:2: error: derivative not in the same file as the original function
@derivative(of: acosh, wrt: x)
 ^
/Users/daniel/swift-source/swift/swift-nightly-install/Library/Developer/Toolchains/swift-tensorflow-LOCAL-2020-01-10-a.xctoolchain/usr/lib/swift/macosx/Darwin.swiftmodule/x86_64.swiftinterface:780:2: error: derivative not in the same file as the original function
@derivative(of: atanh, wrt: x)
 ^
/Users/daniel/swift-source/swift/swift-nightly-install/Library/Developer/Toolchains/swift-tensorflow-LOCAL-2020-01-10-a.xctoolchain/usr/lib/swift/macosx/Darwin.swiftmodule/x86_64.swiftinterface:784:2: error: derivative not in the same file as the original function
@derivative(of: expm1, wrt: x)
 ^
/Users/daniel/swift-source/swift/swift-nightly-install/Library/Developer/Toolchains/swift-tensorflow-LOCAL-2020-01-10-a.xctoolchain/usr/lib/swift/macosx/Darwin.swiftmodule/x86_64.swiftinterface:788:2: error: derivative not in the same file as the original function
@derivative(of: log1p, wrt: x)
 ^
/Users/daniel/swift-source/swift/swift-nightly-install/Library/Developer/Toolchains/swift-tensorflow-LOCAL-2020-01-10-a.xctoolchain/usr/lib/swift/macosx/Darwin.swiftmodule/x86_64.swiftinterface:792:2: error: derivative not in the same file as the original function
@derivative(of: erf, wrt: x)
 ^
/Users/daniel/swift-source/swift/swift-nightly-install/Library/Developer/Toolchains/swift-tensorflow-LOCAL-2020-01-10-a.xctoolchain/usr/lib/swift/macosx/Darwin.swiftmodule/x86_64.swiftinterface:796:2: error: derivative not in the same file as the original function
@derivative(of: erfc, wrt: x)
 ^
<unknown>:0: error: failed to load module 'Darwin'
/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.15.sdk/usr/lib/swift/Darwin.swiftmodule/x86_64.swiftinterface:720:15: error: use of unresolved identifier 'lgammaf_r'
  let value = lgammaf_r(CFloat(x), &sign)
              ^~~~~~~~~
/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.15.sdk/usr/lib/swift/Darwin.swiftmodule/x86_64.swiftinterface:725:15: error: use of unresolved identifier 'lgamma_r'
  let value = lgamma_r(CDouble(x), &sign)
              ^~~~~~~~
/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.15.sdk/usr/lib/swift/Darwin.swiftmodule/x86_64.swiftinterface:730:15: error: use of unresolved identifier 'lgammal_r'
  let value = lgammal_r(CLongDouble(x), &sign)
              ^~~~~~~~~
--- bootstrap: error: Command '['env', 'SDKROOT=/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.15.sdk', 'SWIFTCI_USE_LOCAL_DEPS=1', 'DYLD_LIBRARY_PATH=/Users/daniel/swift-source/build/buildbot_osx/swiftpm-macosx-x86_64/x86_64-apple-macosx/bootstrap/lib:/Users/daniel/swift-source/build/buildbot_osx/llbuild-macosx-x86_64/lib', 'SWIFT_EXEC=/Users/daniel/swift-source/swift/swift-nightly-install/Library/Developer/Toolchains/swift-tensorflow-LOCAL-2020-01-10-a.xctoolchain/usr/bin/swiftc', 'SWIFTPM_PD_LIBS=/Users/daniel/swift-source/build/buildbot_osx/swiftpm-macosx-x86_64/x86_64-apple-macosx/bootstrap/pm', '/Users/daniel/swift-source/build/buildbot_osx/swiftpm-macosx-x86_64/x86_64-apple-macosx/bootstrap/bin/swift-build', '--disable-sandbox', '--disable-index-store', '--build-path', '/Users/daniel/swift-source/build/buildbot_osx/swiftpm-macosx-x86_64', '--configuration', 'release']' returned non-zero exit status 1
./utils/build-script: fatal error: command terminated with a non-zero exit status 1, aborting
./utils/build-script: fatal error: command terminated with a non-zero exit status 1, aborting
daniel@Daniels-iMac swift % 
Issue #356 addressed the need for better issue tracking in this repository, and these issue templates address :

- Bugs/Performance issues
- Build/Installation issues
- Documentation Requests/Issues
- Feature Requests

There is also a general issue template for those not in one of these categories. I have not altered the default issue template, as I expect the repository maintainers to update it when the move away from JIRA is successful.
The [default issue template](https://github.com/tensorflow/swift/blob/master/.github/ISSUE_TEMPLATE/00-default-issue.md) suggests that all Swift for TensorFlow issues should filed on [bugs.swift.org](https://bugs.swift.org):

> We are using [JIRA](https://bugs.swift.org) instead of GitHub issues to track
our work in order to integrate more effectively with the rest of the Swift
ecosystem.

---

However, we've since changed in opinion:
* Swift compiler issues and crashes should filed on [bugs.swift.org](https://bugs.swift.org).
* Issues related to [tensorflow/swift-apis](https://github.com/tensorflow/swift-apis) (the `TensorFlow` module) should be filed as [tensorflow/swift-apis GitHub issues](https://github.com/tensorflow/swift-apis/issues).
* Issues related to [tensorflow/swift-models](https://github.com/tensorflow/swift-models) should be filed as [tensoflow/swift-models GitHub issues](https://github.com/tensorflow/swift-models/issues).
* Issues related to Swift for TensorFlow toolchains should be filed as [tensorflow/swift GitHub issues](https://github.com/tensorflow/swift/issues), or on [bugs.swift.org](https://bugs.swift.org).

The default issue template should be updated to reflect this.
Users are experiencing problem with executing S4TF program in their Xcode project as being discussed in issue #177. 

This PR adds a new installation step that resolves the issue #177 by enabling the **Disable Library Validation** option from **Signing & Capabilities > Hardened Runtime**. This option lets the Xcode project to add frameworks without requiring any code signing. Please see the official [documentation](https://developer.apple.com/documentation/bundleresources/entitlements/com_apple_security_cs_disable-library-validation) for details.

cc @dan-zheng @rxwei 
SwiftPM commands are broken with the `swift-tensorflow-DEVELOPMENT-2019-12-19-a` macOS toolchain:
```
$ swift build
dyld: Library not loaded: @rpath/libswiftCore.dylib
  Referenced from: /Library/Developer/Toolchains/swift-tensorflow-DEVELOPMENT-2019-12-19-a.xctoolchain/usr/bin/swift-build
  Reason: image not found
[1]    45688 abort      swift build
```

This error likely surfaced in the `swift-DEVELOPMENT-SNAPSHOT-2019-12-16-a -> tensorflow` merge: https://github.com/apple/swift/pull/28847.

---

Temporary fix: re-add the `@executable_path/../lib/swift/macosx` RPATH for SwiftPM tool binaries.
```
VERSION=swift-tensorflow-DEVELOPMENT-2019-12-19-a
sudo install_name_tool -add_rpath "@executable_path/../lib/swift/macosx" /Library/Developer/Toolchains/$VERSION.xctoolchain/usr/bin/swift-build
sudo install_name_tool -add_rpath "@executable_path/../lib/swift/macosx" /Library/Developer/Toolchains/$VERSION.xctoolchain/usr/bin/swift-package
sudo install_name_tool -add_rpath "@executable_path/../lib/swift/macosx" /Library/Developer/Toolchains/$VERSION.xctoolchain/usr/bin/swift-run
sudo install_name_tool -add_rpath "@executable_path/../lib/swift/macosx" /Library/Developer/Toolchains/$VERSION.xctoolchain/usr/bin/swift-test
```
I have followed instructions on how to install swift-for-tensorflow (CPU-version) as outlined in the github repository and the swift `REPL` works at first but also throws these warnings;
```
error: ld-2.27.so 0x7fffffff0005c564: adding range [0x1464a-0x146ba) which has a base that is less than the function's low PC 0x14dc0. Please file a bug and attach the file at the start of this error message
error: ld-2.27.so 0x7fffffff0005c564: adding range [0x146d0-0x146d6) which has a base that is less than the function's low PC 0x14dc0. Please file a bug and attach the file at the start of this error message
error: ld-2.27.so 0x7fffffff0005c5c5: adding range [0x1464a-0x146ba) which has a base that is less than the function's low PC 0x14dc0. Please file a bug and attach the file at the start of this error message
error: ld-2.27.so 0x7fffffff0005c5c5: adding range [0x146d0-0x146d6) which has a base that is less than the function's low PC 0x14dc0. Please file a bug and attach the file at the start of this error message
```
However when I exit the terminal (Ubuntu 18.04) and re-open, running swift doesn't return the REPL instead.

The above described scenario still manifested when I initially tried installing swift (before s4tf) meaning it could be an issue with swift.

**Current solution:**
I currently have to add the path to the env. variables everytime I open the terminal in order to use the REPL.


* OS: Ubuntu 18.04.3 LTS (64-bit)

Anybody with a clue on how to go about this/why this is happening?
I'll greatly appreciate.
In https://github.com/tensorflow/swift/blob/master/Installation.md, step 6 of "using downloads" on macOS says `xcrun --toolchain swift`. This attempts to use a toolchain that's nonexistent based on the above steps. The correct toolchain is `com.google.swift.20191121` which can be found in `/Library/Developer/Toolchains/swift-latest/Info.plist`. This should be changed.

Furthermore, ` export PATH=/Library/Developer/Toolchains/swift-latest.xctoolchain/usr/bin:"${PATH}"` breaks the command line on my machine. I am not entirely sure why to be honest.

Finally, I think it should be stated explicitly that TensorFlow has serious issues on macOS when using REPL (see [usage.md](https://github.com/tensorflow/swift/blob/master/Usage.md#repl-read-eval-print-loop)). This information is crucial for people installing TensorFlow for the first time on their Mac.

I'm willing to fix these errors if you would like me to. Thanks.