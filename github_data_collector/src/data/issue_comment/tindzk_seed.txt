1. Allow generating a separate file for libraries vs. application
2. Add an npmDeps setting
3. Support setting bloop JS module kind to commonjs so `@JSImport` works
4. Generate package.json and webpack config and run webpack (this could be a custom target if there were a way to get all transitive dependencies' npmDeps
5. For libraries, create a file like scalajs-bundler does so that npm dependencies can be propagated
6. JVM app should be able to "depend" on output of linking JS app so seed does it, and get the result in its classpath
In the Scala community, it's more than common to see a nice markdown->html microsite for nice libraries/tools. Since the README is so fleshed out, it would make sense as a first step to just produce a site from that markdown?

It would definitely attract more attention.
This allows us to drop the Python dependency from the Docker image.

See also https://github.com/tindzk/seed/issues/58#issuecomment-530774701.
See also #15.
I think it'd be lovely if we could support code completions and diagnostics in VS Code. These are features that are typically supported out-of-the-box for JSON configuration files, but I also think we should go a little bit further than that and support coursier dependency completions: https://twitter.com/alxarchambault/status/1123878375884578816 This feature alone would make the use of `seed` for beginners a very enjoyable experience.
  
I think there's a case to consider switching from TOML to JSON if we want to ship editor support sooner and have a more lightweight implementation. VS Code supports JSONc (JSON with comments) and provides completions/red squigglies when a JSON schema is provided. I have no opinion here, I think JSON would be more amenable and intuitive to users (especifically those coming from build tools such as npm and the like), but TOML is also nice.
Imagine I was to use `seed` to teach Scala to beginners. I'd pick `seed` because it's so simple that I can explain how to declare a module and add a dependency in less than a paragraph. It imposes almost no overhead when teaching Scala to a crowd of developers inexperienced with the Scala build tool ecosystem and allows them to focus on what's important: learning the language.
  
However, a big drawback of doing this is that they would have learned to use a build tool that's perhaps really simple for future use cases and doesn't have major adoption in the community. I believe this is an important point.
  
To address that concern, I suggest `seed` can use generate valid build files out of its build schema. Given its simplicity, `seed`s format is a subset of the project settings in all the other build tools and making that generation is relatively straight-forward.
  
I'd suggest supporting `sbt` and `mill` at the beginning and then adding support for Gradle/Maven if there's demand. The great thing about this is that people can get started with `seed` but if they need unsupported features such as packaging/releasing they can generate a valid sbt/mill build out of it and continue with their lives.
I'd like to have `seed` compiled to native. We're already doing this in some of the projects in Bloop (for example, [the next version of the CLI will be a Scala library compiled to native](https://github.com/scalacenter/bloop/pull/1032)) and I think it would be really exciting if this project was native, which implies less resource usage and snappier UX.
 
Here's the list of current dependencies:
```scala 
libraryDependencies ++= Seq(
  "com.lihaoyi"           %% "fansi"          % "0.2.7",
  "io.get-coursier"       %% "coursier"       % bloopCoursierVersion,
  "io.get-coursier"       %% "coursier-cache" % bloopCoursierVersion,
  "tech.sparse"           %% "toml-scala"     % "0.2.0",
  "tech.sparse"           %% "pine"           % "0.1.4",
  "ch.epfl.scala"         %% "bloop-config"   % bloopVersion,
  "com.joefkelley"        %% "argyle"         % "1.0.0",
  "org.scalaj"            %% "scalaj-http"    % "2.4.2",
  "dev.zio"               %% "zio"            % "1.0.0-RC10-1",
  "io.circe"              %% "circe-core"     % "0.11.1",
  "commons-io"            % "commons-io"      % "2.6",
  "com.zaxxer"            % "nuprocess"       % "1.2.4",
  "org.java-websocket"    % "Java-WebSocket"  % "1.4.0",
  "org.slf4j"             % "slf4j-simple"    % "2.0.0-alpha0",
  "io.monix"              %% "minitest"       % "2.5.0" % "test",
  scalaOrganization.value % "scala-reflect"   % scalaVersion.value
)
```

It looks like there are quite a lot of them and I'm not sure if they are GraalVM friendly. But compiling to native should in theory work for any dependency that doesn't depend on JNA. For example, `nuprocess` should probably be replaced by https://github.com/zeroturnaround/zt-exec.
  
This is not a blocker, but I think it would be cool :smile:
I _think_ that what needs to happen is for something to pull in https://mvnrepository.com/artifact/com.typesafe.play/twirl-compiler_2.12/1.4.2 and call https://github.com/playframework/twirl/blob/master/compiler/src/main/scala/play/twirl/compiler/TwirlCompiler.scala#L177 ?
I've noticed there's a lot of `.distinct` action going on at various stages where dependencies or settings are being merged. As these properties are unique by nature it would make sense to also reflect this in the model classes.
I really like Seed (although I can't use it without #18), however I'm not sure I can use it with TOML. Especially with #18 and #19 the configuration forms a deep tree, and especially with many modules (which the README says it's designed for) it can be very wide too. TOML is nice for some things but I can't see it scaling well for me.

As an example, GitLab CI uses TOML for configuring the runner binary, but YAML for defining a project's various jobs and their configuration, and I think they both make sense. The former is basically a few sections of flat config, with a bit of nesting. The latter is a much more complicated tree of settings. You can have many jobs, each of which can have many settings, each of which might itself need to be defined with sub-properties.

I admit the TOML generated by `seed init` overwhelmed me more than it might have, because some of what it generated may have been unnecessary.

I found something online to convert TOML to YAML and was much happier with the result. So what I started doing is using `yaml2toml` (on Ubuntu, `sudo snap install marshal`) to translate my config for seed. Specifically, I ran `echo seedbuild.yml | entr -rs "yaml2toml --preserve-key-order seedbuild.yml build.toml && seed bloop && bloop compile -w (bloop projects)"` (this will run the part in quotes whenever `seedbuild.yml` changes via my shell, Fish).

I didn't get all that far in converting my decently-sized sbt project to seed (I stopped mainly due to #18), but here is how the two ways of defining it compare:

<details>
<summary>TOML</summary>

```toml
[project]
scalaVersion = "2.12.8"
scalaJsVersion = "0.6.28"
scalaOptions = ["-encoding", "UTF-8", "-unchecked", "-deprecation", "-Xfuture"]
testFrameworks = ["minitest.runner.Framework"]

[resolvers]
maven = ["https://repo1.maven.org/maven2", "https://jcenter.bintray.com", "https://jitpack.io"]

[module]

[module.sharedCommon]
root = "shared_common"
targets = ["jvm", "js"]
sources = ["shared_common/src/main/scala"]
compilerDeps = [["org.scalamacros", "paradise", "2.1.1", "full"]]
scalaDeps = [["cc.co.scala-reactive", "reactive-routing", "0.6.4"], ["com.github.cornerman.sloth", "sloth", "34b09cdccb"], ["com.github.julien-truffaut", "monocle-macro", "1.5.1-cats"], ["com.github.krzemin", "octopus", "0.3.3"], ["com.lihaoyi", "sourcecode", "0.1.7"], ["io.circe", "circe-core", "0.11.1"], ["io.circe", "circe-generic", "0.11.1"], ["io.circe", "circe-parser", "0.11.1"], ["io.github.nafg", "slick-additions-entity", "0.9.1.1"]]

[module.sharedCommon.test]
sources = ["shared_common/src/test/scala"]
scalaDeps = [["io.monix", "minitest", "2.5.0"]]

[module.volunteerShared]
root = "volunteer_shared"
targets = ["jvm", "js"]
sources = ["notes_shared/src/main/scala"]
moduleDeps = ["sharedCommon"]

[module.notesShared]
root = "notes_shared"
targets = ["jvm", "js"]
sources = ["notes_shared/src/main/scala"]
moduleDeps = ["volunteerShared"]

[module.doctorsShared]
root = "doctors_shared"
targets = ["jvm", "js"]
sources = ["doctors_shared/src/main/scala"]
moduleDeps = ["sharedCommon", "notesShared"]

[module.util]
root = "util"
targets = ["jvm"]
sources = ["util/src/main/scala"]
moduleDeps = ["volunteerShared"]
scalaDeps = [["net.liftweb", "lift-util", "3.3.0"], ["org.scala-lang.modules", "scala-xml", "1.2.0"]]

[module.modelsCommon]
root = "models_common"
targets = ["jvm"]
sources = ["models_common/src/main/scala"]
moduleDeps = ["volunteerShared"]
javaDeps = [["org.flywaydb", "flyway-core", "5.2.4"]]
scalaDeps = [["com.github.tminglei", "slick-pg", "0.17.3"], ["com.github.tminglei", "slick-pg_circe-json", "0.17.3"], ["io.github.nafg", "slick-additions", "0.9.1.1"], ["net.liftweb", "lift-util", "3.3.0"]]

[module.jsCommon]
root = "js_common"
targets = ["js"]
sources = ["js_common/src/main/scala"]
moduleDeps = ["sharedCommon"]
scalaOptions = ["-P:scalajs:sjsDefinedByDefault"]
scalaDeps = [["com.github.japgolly.scalajs-react", "ext-monocle-cats", "1.4.2"], ["io.github.nafg.css-dsl", "bootstrap3", "0.4.0"], ["io.github.nafg.scalajs-facades", "react-select_2-1-2", "0.6.0"], ["io.github.nafg.scalajs-react-util", "core", "0.7.0"]]
```

</details>

<details>
<summary>YAML</summary>

```yaml
project:
  scalaVersion: 2.12.8
  scalaJsVersion: 0.6.28
  scalaOptions:
    - '-encoding'
    - UTF-8
    - '-unchecked'
    - '-deprecation'
    - '-Xfuture'
  testFrameworks:
    - minitest.runner.Framework


resolvers:
  maven:
    - https://repo1.maven.org/maven2
    - https://jcenter.bintray.com
    - https://jitpack.io


module:

# SHARED MODULES

  sharedCommon:
    root: shared_common
    targets: [jvm, js]
    sources: [shared_common/src/main/scala]
    compilerDeps:
      - ["org.scalamacros",            "paradise",               "2.1.1", "full"]
    scalaDeps:
      - ["cc.co.scala-reactive",       "reactive-routing",       "0.6.4"]
      - ["com.github.cornerman.sloth", "sloth",                  "34b09cdccb"]
      - ["com.github.julien-truffaut", "monocle-macro",          "1.5.1-cats"]
      - ["com.github.krzemin",         "octopus",                "0.3.3"]
      - ["com.lihaoyi",                "sourcecode",             "0.1.7"]
      - ["io.circe",                   "circe-core",             "0.11.1"]
      - ["io.circe",                   "circe-generic",          "0.11.1"]
      - ["io.circe",                   "circe-parser",           "0.11.1"]
      - ["io.github.nafg",             "slick-additions-entity", "0.9.1.1"]
    test:
      sources: [shared_common/src/test/scala]
      scalaDeps:
        - ["io.monix", "minitest", "2.5.0"]

  volunteerShared:
    root: volunteer_shared
    targets: [jvm, js]
    sources: [notes_shared/src/main/scala]
    moduleDeps: [sharedCommon]

  notesShared:
    root: notes_shared
    targets: [jvm, js]
    sources: [notes_shared/src/main/scala]
    moduleDeps: [volunteerShared]

  doctorsShared:
    root: doctors_shared
    targets: [jvm, js]
    sources: [doctors_shared/src/main/scala]
    moduleDeps: [sharedCommon, notesShared]

# JVM MODULES

  util:
    root: util
    targets: [jvm]
    sources: [util/src/main/scala]
    moduleDeps: [volunteerShared]
    scalaDeps:
      - ["net.liftweb",            "lift-util", "3.3.0"]
      - ["org.scala-lang.modules", "scala-xml", "1.2.0"]

  modelsCommon:
    root: models_common
    targets: [jvm]
    sources: [models_common/src/main/scala]
    moduleDeps: [volunteerShared]
    javaDeps:
      - ["org.flywaydb",        "flyway-core",          "5.2.4"]
    scalaDeps:
      - ["com.github.tminglei", "slick-pg",            "0.17.3"]
      - ["com.github.tminglei", "slick-pg_circe-json", "0.17.3"]
      - ["io.github.nafg",      "slick-additions",     "0.9.1.1"]
      - ["net.liftweb",         "lift-util",           "3.3.0"]

# JS MODULES

  jsCommon:
    root: js_common
    targets: [js]
    sources: [js_common/src/main/scala]
    moduleDeps: [sharedCommon]
    scalaOptions: ["-P:scalajs:sjsDefinedByDefault"]
    scalaDeps:
      - ["com.github.japgolly.scalajs-react", "ext-monocle-cats",   "1.4.2"]
      - ["io.github.nafg.css-dsl",            "bootstrap3",         "0.4.0"]
      - ["io.github.nafg.scalajs-facades",    "react-select_2-1-2", "0.6.0"]
      - ["io.github.nafg.scalajs-react-util", "core",               "0.7.0"]
```
</details>
