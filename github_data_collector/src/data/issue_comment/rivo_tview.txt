This should resolve #357.
This rings the terminal bell on Unix and Windows (tested version: 10.0.18362.535).
Demo: `ssh cview.rocketnine.space -p 20000` (8th page)

Related issues: #83, #225 
At the same time I'm both glad and sad to see this fork https://git.sr.ht/~tslocum/cview/

I'm glad because many significant improvements have been merged.
I'm sad because this is now a fork which will diverge both in philosophy and code. 

The rationale behind the fork is explained in https://man.sr.ht/~tslocum/cview/FORK.md 
It seems that the fork was motivated because the original author is/was maintaining this repository alone and didn't find the time to review all the good stuff pouring in. 

Reviewing requires time and attention, but people who submit PRs are very often willing to change their implementation when they get a response. Problem is that reviewing has been only behind one person. 

The problem is not resolved with the fork: now there's a diverged project which is again behind one person. The fork is not even in Github anymore.

Is there any chance to combine forces with @tslocum and @rivo ? 

Shared projects have challenges of their own, but having multiple maintainers will drive the project further than one busy maintainer.

Personally I believe that the fork is a good discussion starter but it will not solve any problems in the long term.
This fixes the unbounded increase in resource usage when running the presentation demo.
I'd like my applications to be compatible with real DEC VT terminals. Applications using tcell/tview like to discard colours if `TERM=vt***` e.g. `vt320`. When I was about to fix an application, I couldn't find `SetAttribute` or something like that for `TreeNode`s. So for example if I want to set the currently selected `TreeNode` in a `TreeView`, for `xterm` or similar I simply set the color using `SetColor`. But if I want to indicate that on DEC VT320 for example, I need to set the underline attribute on that node, and I don't have the function for that.
This fixes #377
Sorry for any obvious mistakes; I am a golang novice.
I read over the contribution guidelines and tried to match the style.
I don't believe this is adding significant maintenance overhead.

The objective is to add some throttling to the resize handling so that the screen does not flash on Windows.  I fiddled with the throttling a bit and 200ms seems like the sweet spot between too low (resulting in allowing some flashing) and too high (too slow resize redraw makes it seem laggy).  Here is capture of the post-fix behavior:
![after fix](https://user-images.githubusercontent.com/513830/70583677-520d1700-1b73-11ea-86a3-1c2c085dc00f.gif)

Compare with the capture of before-fix behavior:
![before fix](https://user-images.githubusercontent.com/513830/70582356-1f611f80-1b6f-11ea-95e7-7720a2ee299b.gif)


Thanks in advance for taking the time to review!
My team is using tview for a console application and our QA team reported a usability bug.  When the window is resized on Windows, the screen flashes.  The flashing continues for a short time after the resize is finished.  It isn't a huge issue, but it is a little ugly.  I captured a gif that shows the flashing.  I resized a few times, with some ridiculous resizes just to emphasize the effect, but you can see that it still occurs with a normal resize:
![tview_redraw_flashing](https://user-images.githubusercontent.com/513830/70582356-1f611f80-1b6f-11ea-95e7-7720a2ee299b.gif)

I believe this can be mitigated by adding some throttling to [the EventResize handling here](https://github.com/rivo/tview/blob/master/application.go#L240).  I'll open a PR with a suggested fix, but I'm not very experienced with golang so please go easy on me!
I have a `Flex` with `TreeView | DetailView`.
The `TreeView`'s entry titles have variable sizes unknown at the time the TreeView is added to the `Flex`.

I want to resize the `TreeView` to an **ideal fixed width** such that the entry titles are shown completely.

`Flex.ResizeItem` allows resizing, but there is no way to get the ideal width from `TreeView`, i.e., after it added all indents, etc.

What is the best way to accomplish this?
