This would give a "native" way to consume changes. 

A possible example of usage...

```
import { withProps } from 'proppy';

const P = withProps({ counter: 1 });

const p = P();

for await (const value of p.subscribe()) {
  console.log({ value });
}
```
https://unpkg.com/proppy@latest/dist/proppy.min.js
Cannot find "/dist/proppy.min.js" in proppy@1.3.1
WIP branch exists here: https://github.com/fahad19/proppy/tree/proppy-react-hook

## Background

React hooks will land soon in stable version, and currently already available in alpha version.

More info: https://reactjs.org/docs/hooks-intro.html

## Set up

For the examples below, we will be using these providers:

```js
import React from 'react';
import { ProppyProvider } from 'proppy-react';

const providers = {
  foo: 'foo value',
  bar: 'bar value',
};

export default function Root() {
  return (
    <ProppyProvider providers={providers}>
      <MyComponent />
    </ProppyProvider>
  );
}
```

And the sample factory:

```js
import { compose, withProps, withState, shouldUpdate } from 'proppy';

const P = compose(
  withProps((props, providers) => {}),
  withState('counter', 'setCounter', 0),
  shouldUpdate(props => props.counter % 2 === 0),
);
```

## Usage APIs

### `useProppy`

Using Proppy factory inside Components:

```js
import React from 'react';
import { useProppy } from 'x'; // new package

const P; // factory

export default function MyComponent(props) {
  const { counter, setCounter } = useProppy(P, props);

  return (
    <p onClick={() => setCounter(counter + 1)}>
      {counter}
    </p>
  );
}
```

## `useProviders`

Access all the providers:

```js
import React from 'react';
import { useProviders } from 'x';

export default function MyComponent(props) {
  const { foo, bar } = useProviders();

  return <p></p>;
}
```

## `useProvider`

Access individual providers:

```js
import React from 'react';
import { useProvider } from 'x';

export default function MyComponent(props) {
  const foo = useProvider('foo');

  return <p></p>;
}
```
Hi, I am really excited about replacing react+recompose+react-router with much lighter alternatives, but I am having some issues fitting it all together. I am coming from react/recompose, so I'm sure I am doing something just a bit wrong, but I can't seem to figure it out. Any ideas would be much appreciated.

I have a [demo](https://github.com/konsumer/demo-preact-router-proppy) that illustrates what I am trying to accomplish. I want global provider for modal & user state. [Here](https://codesandbox.io/s/github/konsumer/demo-preact-router-proppy) is a code sandbox.

Basically, I can't seem to work out subscribing to a global state and updating the app.

To reproduce, click "login" and login with any email/password. This should trigger 3 provider state changes:

* show modal with login form
* update user
* hide modal with login form

which in turn should change these component-state things:

* change menu items in `Header`
* show/hide modal in `Header`
* change routes for `/` from `PageHome` to `PageDashboard` (for logged in users)

I did this, which seems like a terrible hack:

```js
// when global state changes, render app
if (typeof window !== 'undefined') {
  providers.subscribe(props => {
    console.log('PROVIDERS', props)
    render(<App />, document.body)
  })
}
```

It works a little better at refreshing when it should show the modal, but only about half the time (show modal works, but not hide.)

Initial user-state seem to work ok (derive user from JWT works fine) so you can login, then refresh page and it looks how it should. You can click LOGOUT, and refresh, and it kills the token and user-state, and goes back to anonymous view.
Using proppy directly, when i subscribe in my instance when the elements are updating the state the subscription its not called
https://stackblitz.com/edit/basics-table-6-p-one?file=Table.js
If i return the instance in the module (bad practice), it works
https://stackblitz.com/edit/basics-table-6-p?file=Table.js
Fix for https://github.com/fahad19/proppy/issues/26
When using `withHandlers` or any other hoc, the props that are passed to the component are inside of a `parentProps` object while I expect them to be directly inside of the `props` object.

**Example**:
https://codesandbox.io/s/4q6wnl3w74

In this example the prop `foo` is inside of `parentProps` when logged in `withHandlers`.

Attempting to call a state handler using `onChange` results in an infinite loop.  It would be nice if there was a `didUpdate` function that mirrored the capabilities of (p)react's [componentDidUpdate](https://reactjs.org/docs/react-component.html#componentdidupdate), that allows you to immediately call `setState` given some conditional.

This feature is important when utilizing routing or similar functionality where a change in props would cause a reset / refetch of data.


As a workaround, calling the state handler in a `setTimeout` worked fine.
In original **connect** from react-redux, you can pass a function as a mapDispatch, which accepts dispatch and own component props. Here the full [description](https://github.com/reduxjs/react-redux/blob/master/docs/api.md#connectmapstatetoprops-mapdispatchtoprops-mergeprops-options)

Do you plan to add this feature?

P.S. proppy-redux npm page points to package. So I created issue in this scope.
I have been wondering if it is possible to use this library with components defined like so:

```js
@Component
class SomeComponent extends Vue {
   mount () {
      ...
   }
}
```

Thanks!