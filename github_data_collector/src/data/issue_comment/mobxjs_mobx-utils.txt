The `computedFn` function doesn't allow a varying number of arguments, between calls to the function it returns.

This is apparently already known, since the function description says:
> computedFn(fn) returns a function with the very same signature. There is no limit on the amount of arguments that is accepted. However, **the amount of arguments must be consistent** and default arguments are not supported.

Is there a fundamental reason that you can't provide a varying number of arguments? Or has the code just not been made flexible enough yet to allow varying argument counts?

If it's the former (impossible to implement), what's the explanation for that limitation?

If it's the latter (possible to implement), then I plan to do the work of implementing it, as it's pretty important for my current use-case.

Anyway, I'm guessing it is possible, so I'm starting work on trying to implement that functionality; if it's not possible though, please let me know so I can save some time. ^_^

---
> [potential question] Why do you need to provide a varying number of arguments?

Basically: Because that's the only way I'm able to send in an array in a way that's compatible with caching.

In more detail: I "unwrap" the array's items, and send each one in as a separate "argument" to the function. This lets the data be cached by the DeepMapEntry chain. When the function actually runs, it then reconstructs the array argument from the constituent items.
I'm trying to use deepObserve() with an object that has an ObservableSet field but the changes in this field are not reported.

```typescript
class Foo {
  @observable barSet = new Set()
}

const foo = new Foo
deepObserve(foo, () => {
  console.log('foo changed')
})
foo.barSet.add('bar') // "foo changed" is not logged to the console
```

Is this something that is supported? I looked into the deepObserve code and found that it uses this function:
```typescript
function isRecursivelyObservable(thing: any) {
    return isObservableObject(thing) || isObservableArray(thing) || isObservableMap(thing)
}
```
to determine whether an object can be observed but the isObservableSet check is missing.
In the same vein as #215, it would be great to use a custom equals
function with `createTransformer`, to avoid bubbling bubbling recomputes
of transformers that return arrays/maps/etc.

This commit passes the options through to the internal `computed`.  The
name option is not passed through, since that can be changed with
the `debugNameGenerator` option.
In my model I have several computed getters and accordingly setters, to derive the plain values from.

Simple example:
```ts
import { computed, observable } from 'mobx';

export default class Car {

  @observable public colorCode = 'red';

  @computed
  public get colorInstance(): any {
    return { colorCode: this.colorCode };
  }

  public set colorInstance(colorInstance: any) {
    this.colorCode = colorInstance.colorCode;
  }
}
```

If I now create a view model from it using `createViewModel`, changes applied to the `colorCode` property are directly visible in the view. If I instead apply changes by using the `colorInstance` setter, it seems to have no effect. See here for the full, running example: https://codesandbox.io/s/reverent-dew-pb6mh

When looking at the [generated getters and setters in the code](https://github.com/mobxjs/mobx-utils/blob/master/src/create-view-model.ts#L67-L78), the observation makes sense: computed values are always read from `localComputedValues`, while changes are always written to `localValues`. Hence, in my example `colorInstance` is written to the `localValues` `colorInstance` but read from `localComputedValues`, where it will never be up-to-date.

Is this a bug or is it intended to work like that and I made a mistake somewhere?

If you need further details, feel free to ask.
## updateableObservable

`updateableObservable` takes a non observable (or observable) value and turns it into
an observable that can be later updater with another non-observable (or observable) value
while trying to keep observable object references the same as much as possible.

Think of this as an observable with support for a "smart" deep merge.
This is useful for example when there's a big object coming from a back-end call,
yet you'd like to only trigger the minimum amount of reactions possibles (the ones with
actual changes).

The returned value will have two methods:

-   `get()` returns the value of the observable
-   `update(newValue)`: use this to update the current observable with the new value

The first parameter is the inital value the updateable observable should take.

The second parameter (update mode) can take one of the folowing values:

-   `"shallow"`: properties (primitives, objects, maps and arrays) are turned into a shallowly observable values
-   `"deep"`: properties (primitives, objects, maps and arrays) are turned into a deeply observable values
-   `{ deepProps: [keys] }`: like 'shallow', except some properties are turned into deep observables 'opt-in'

### Parameters

-   `initialValue` **T** 
-   `mode` **UpdateableObservableMode&lt;T>** 

### Examples

```javascript
const backendTodoList = ... // a plain array with list of plain todo objects
const todoList = updateableObservable(backendTodoList, "deep")
// new todo list comes from backend
todoList.update(newBackendTodoList)
// get the observable value
todoList.get()
```

Returns **IUpdateableObservable&lt;T>** 

MobX 4.1 introduced `keepAlive` as option to `computed`
I was just curious what was the reasoning behind `.value` from `fromPromise` and `current()` from `fromResources` and `lazyObservable` as those names don't appear anywhere else in `mobx`. 

In RxJs most of the return values are `Rx.Observable`. Coming from there, one would expect these to implement some common interface like boxed values (`.get`). What's the equivalent predictable interface for the return values in`mobx` and `mobx-utils`?
Just spent some time trying to get it to work with the [npm package rx](https://www.npmjs.com/package/rx) but it didn't work. I only noticed I had to use RxJS 5 (npm package rxjs) when I looked at the [relevant tests file](https://github.com/mobxjs/mobx-utils/blob/master/test/observable-stream.js#L6).
With RxJS 5 the examples work fine.

The errors were:
(toStream)
```
Uncaught TypeError: Object is not iterable
    at getIterable (rx.all.js:2706)
    at FromObservable.subscribeCore (rx.all.js:2634)
    at FromObservable.tryCatcher (rx.all.js:63)
    at setDisposable (rx.all.js:2082)
```

(fromStream)
```
Cannot read property fn of undefined
(forgot to save stack trace)
```