Added ability to compile with assembly references by looking in the .csproj.
Added command to build the ILStrip project as the GenerateTrimmedMscorlip build command for Blazor.Host depends on it.
A basic (and a bit crude) implementation of a "FromAttribute" attribute for component parameters.

This PR requires the corlib changes of the **"corlib and JIT updates"** PR (#7) for it to work (relies on some basic reflection)
This makes the P/Invoke interface work again.

No idea is this will be useful, but it really does put things back to working in a pure DNA built on to run on the command line.

I think that adding in the extra params was the main mistake. This makes the P/Invoke fall in to a little heap on the floor. I think making an extra attribute or calling convention for the C# side would be a better method for getting this working. More metadata would allow you to automagically add the extra params when they are required.
Simple fix for the underlying issue of the bug described [here](https://github.com/SteveSanderson/Blazor/blob/master/src/Blazor.Runtime/Interop/ManagedGCHandle.cs#L12-L13):

> // because the DotNetAnywhere runtime crashes if you try to put a *delegate* instance
> // as a key into a Dictionary and then check whether dict.ContainsKey(thatDelegate).

Tested with code like this:

``` csharp
Action actionA = new Action(TestMethod);
Action actionB = new Action(SomeOtherMethod);
Action actionC = new Action(TestMethod); // same Target as actionA

// Before the fix calling 'Equals() give the error "Opcode not available: 0x0000006c"
Console.WriteLine("actionA.Equals(actionB) = {0}", actionA.Equals(actionB)); // False
Console.WriteLine("actionA.Equals(actionC) = {0}", actionA.Equals(actionC)); // True
```

To properly allow DNA to handle boxing/unboxing of `IntPtr`, support would have to be added for:

- `JIT_BOX_PTR` (*probably* [here](https://github.com/SteveSanderson/Blazor/blob/master/src/DNA/native/src/JIT_Execute.c#L2965-L2981)) 
- `UNBOX` CIL op-code (`CIL_UNBOX_ANY` is already supported)
Here are a few fixes and updates to the corlib and JIT:

- Better C# support (added some missing JIT features, some bug fixes and updates).
- Added F# support (uses custom FSharp.Core, see [here](https://github.com/ncave/dotnet-js) for a working example).
- Tried my best to keep the corlib light, it's still around 260k (in release mode).
- Release build assemblies now work too (after JIT bugfixes).

I see you added CLR debugging in the browser, that's awesome!
For details, see https://github.com/aspnet/Blazor-Hackathon/pull/3

This has already been rebased onto a recent commit from the Hackathon repo.