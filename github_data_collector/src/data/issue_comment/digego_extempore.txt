This code compiles:
```scheme
(bind-alias my_type <i64,i64,double>*)
 (bind-func testing2:[my_type]* 100000
   (lambda ()
     (let ((outer:<my_type,my_type>* (zalloc)))
       (begin
         (let ((inner0:my_type (zalloc))
               (inner1:my_type (zalloc)))
           (tfill! inner0 0 1 3.3)
           (tfill! inner1 1 2 4.4)
           (tset! outer 0 inner0)
           (tset! outer 1 inner1))
         ;; what I get:                                                                                                                            
         (println "outer:" outer)
         outer))))
 ($ (let ((tested (testing2)))
      (println "tested:" tested)
      (println "try to get first element:" (tref tested 0))))
```
output:
```
Compiled:  testing2 >>> [<i64,i64,double>*]*                                                                                                  
outer: <<0,1,3.300000>,<1,2,4.400000>>
tested: <139962716578464,139962716578528,0.000000>                                                                                             
try to get first element: 139962716578464
```
It should be `bind-func testing2:[<my_type,my_type>*]*` as `outer` type, so I would expect a compilation error.
What's the meaning of `<139962716578464,139962716578528,0.000000>`?
Assume the following code:
```scheme
 (bind-alias my_type <i64,i64,double>*)
 (bind-func testing:[<my_type,my_type>*]* 100000
   (lambda ()
     (let ((outer:<my_type,my_type>* (zalloc)))
       (begin
         (let ((inner0:my_type (zalloc))
               (inner1:my_type (zalloc)))
           (tfill! inner0 0 1 3.3)
           (tfill! inner1 1 2 4.4)
           (tset! outer 0 inner0)
           (tset! outer 1 inner1))
         ;; what I get:                                                                                                                            
         (println "outer:" outer)
         (println "ok")
         outer))))
 ($ (println "try to get first element:" (tref (testing) 0)))
```
The output is:
```
 try to get first element: outer: <<0,1,3.300000>,<1,2,4.400000>>                                                                              
 ok                                                                                                                                            
 <0,1,3.300000>
```
I see that `println` prints out one argument each time, without eager evaluation, when the evaluation has side effects (such as println) the output seems broken.
I would expect this output:
 ```
 outer: <<0,1,3.300000>,<1,2,4.400000>>                                                                              
 ok                                                                                                                                            
 try to get first element:  <0,1,3.300000>
```
This is sort of a continuation of https://github.com/digego/extempore/issues/367, but seems to be a distinct issue.

I'm not getting much output here, maybe there's a flag I can pass for more verbosity?

```
make[2]: *** [CMakeFiles/aot_audio_dsp.dir/build.make:62: ../libs/aot-cache/xtmaudio_dsp.so] Segmentation fault (core dumped)
make[1]: *** [CMakeFiles/Makefile2:655: CMakeFiles/aot_audio_dsp.dir/all] Error 2
make: *** [Makefile:163: all] Error 2
```

More context:

```
Started compiling: "libs/core/audio_dsp.xtm"

Loading xtmbase library... done in 0.825857 seconds
Loading xtmrational library... done in 0.828310 seconds
sys:load notification rational already loaded
Loading xtmaudiobuffer library... done in 0.721562 seconds
sys:load notification audiobuffer already loaded
Compiled:  print_audio_state >>> [i32]*
LibBound:  midi2frq >>> [float,float]* bound from xtmaudio_dsp
Compiled:  midi2frq >>> [float,float]*  [static]
LibBound:  frq2midi >>> [float,float]* bound from xtmaudio_dsp
Compiled:  frq2midi >>> [float,float]*  [static]
LibBound:  bpm2hz >>> [float,float]* bound from xtmaudio_dsp
Compiled:  bpm2hz >>> [float,float]*  [static]
LibBound:  hz2bpm >>> [float,float]* bound from xtmaudio_dsp
Compiled:  hz2bpm >>> [float,float]*  [static]
LibBound:  amp2db >>> [float,float]* bound from xtmaudio_dsp
Compiled:  amp2db >>> [float,float]*  [static]
LibBound:  db2amp >>> [float,float]* bound from xtmaudio_dsp
Compiled:  db2amp >>> [float,float]*  [static]
LibBound:  calc_vsum >>> [float,float*,i64]* bound from xtmaudio_dsp
Compiled:  calc_vsum >>> [float,float*,i64]*  [static]
LibBound:  calc_vmean >>> [float,float*,i64]* bound from xtmaudio_dsp
Compiled:  calc_vmean >>> [float,float*,i64]*  [static]
LibBound:  rms_c >>> [[float,float]*]* bound from xtmaudio_dsp
Compiled:  rms_c >>> [[float,float]*]*  [static]
LibBound:  rms_st_c >>> [[float,i64,float]*]* bound from xtmaudio_dsp
Compiled:  rms_st_c >>> [[float,i64,float]*]*  [static]
LibBound:  gainf >>> [float,i64,i64,float]* bound from xtmaudio_dsp
Compiled:  gainf >>> [float,i64,i64,float]*  [static]
LibBound:  panner >>> [float,i64,float]* bound from xtmaudio_dsp
Compiled:  panner >>> [float,i64,float]*  [static]
Compiled:  hann >>> [float,i64,i64,i64]*
Compiled:  hann >>> [float,i64,i64]*
LibBound:  impulse >>> [float,i64,i64]* bound from xtmaudio_dsp
Compiled:  impulse >>> [float,i64,i64]*  [static]
Compiled:  dsp_randn >>> [float]*
Compiled:  parabolicSineHP >>> [float,float]*
Compiled:  parabolicSineLP >>> [float,float]*
LibBound:  fasttan >>> [float,float]* bound from xtmaudio_dsp
Compiled:  fasttan >>> [float,float]*  [static]
LibBound:  fasttanh >>> [double,double]* bound from xtmaudio_dsp
Compiled:  fasttanh >>> [double,double]*  [static]
Compiled:  fastsin >>> [float,float]*
Compiled:  integrator_c >>> [double,double]*
LibBound:  osc_c >>> [[float,float,float]*,float]* bound from xtmaudio_dsp
Compiled:  osc_c >>> [[float,float,float]*,float]*  [static]
LibBound:  osc_mc_c >>> [[float,i64,float,float]*,float]* bound from xtmaudio_dsp
Compiled:  osc_mc_c >>> [[float,i64,float,float]*,float]*  [static]
Compiled:  saw_c >>> [[float,float,float]*,float,i1]*
Compiled:  saw_c >>> [[float,float,float]*,float]*
Compiled:  saw_mc_c >>> [[float,i64,float,float]*,float,i1]*
Compiled:  saw_mc_c >>> [[float,i64,float,float]*,float]*
LibBound:  pulse_c >>> [[float,float,float,float]*,float]* bound from xtmaudio_dsp
Compiled:  pulse_c >>> [[float,float,float,float]*,float]*  [static]
LibBound:  pulse_mc_c >>> [[float,i64,float,float,float]*,float]* bound from xtmaudio_dsp
Compiled:  pulse_mc_c >>> [[float,i64,float,float,float]*,float]*  [static]
LibBound:  tri_c >>> [[float,float,float]*,float]* bound from xtmaudio_dsp
Compiled:  tri_c >>> [[float,float,float]*,float]*  [static]
LibBound:  tri_mc_c >>> [[float,i64,float,float]*,float]* bound from xtmaudio_dsp
Compiled:  tri_mc_c >>> [[float,i64,float,float]*,float]*  [static]
LibBound:  poly_blep >>> [float,float,float,float,i1]* bound from xtmaudio_dsp
Compiled:  poly_blep >>> [float,float,float,float,i1]*  [static]
SetValue:  BLEPTable >>> |4096,double|*
SetValue:  fBLEPTable >>> |4096,float|*
SetValue:  BLEPTable_8_BLKHAR >>> |4096,double|*
SetValue:  fBLEPTable_8_BLKHAR >>> |4096,float|*
LibBound:  load_blep_tables_from_blob >>> [void,i8*]* bound from xtmaudio_dsp
Compiled:  load_blep_tables_from_blob >>> [void,i8*]*  [static]
LibBound:  LinTerp >>> [float,float,float,float,float,float]* bound from xtmaudio_dsp
Compiled:  LinTerp >>> [float,float,float,float,float,float]*  [static]
LibBound:  blep_n >>> [float,float*,float,float,float,float,i1,float,i1]* bound from xtmaudio_dsp
Compiled:  blep_n >>> [float,float*,float,float,float,float,i1,float,i1]*  [static]
Compiled:  blsaw_c >>> [[float,float,float]*,float,i1,i1]*
Compiled:  blsaw_c >>> [[float,float,float]*,float,i1]*
Compiled:  blsaw_c >>> [[float,float,float]*,float]*
Compiled:  blsaw_mc_c >>> [[float,i64,float,float]*,float,i1,i1]*
Compiled:  blsaw_mc_c >>> [[float,i64,float,float]*,float,i1]*
Compiled:  blsaw_mc_c >>> [[float,i64,float,float]*,float]*
Compiled:  blpulse2_c >>> [[float,float,float,float]*,float]*
Compiled:  blpulse_c >>> [[float,float,float,float]*,float,i1]*
Compiled:  blpulse_c >>> [[float,float,float,float]*,float]*
LibBound:  bltri_c >>> [[float,float,float]*,float]* bound from xtmaudio_dsp
Compiled:  bltri_c >>> [[float,float,float]*,float]*  [static]
LibBound:  sin_c >>> [[float,float,float]*,float]* bound from xtmaudio_dsp
Compiled:  sin_c >>> [[float,float,float]*,float]*  [static]
LibBound:  white_c >>> [[float]*]* bound from xtmaudio_dsp
Compiled:  white_c >>> [[float]*]*  [static]
LibBound:  pink_c >>> [[float]*]* bound from xtmaudio_dsp
Compiled:  pink_c >>> [[float]*]*  [static]
LibBound:  lpf_1p_c >>> [[float,float,float]*]* bound from xtmaudio_dsp
Compiled:  lpf_1p_c >>> [[float,float,float]*]*  [static]
SetValue:  LPF1 >>> i32
SetValue:  LPF2 >>> i32
SetValue:  LPF4 >>> i32
SetValue:  HPF1 >>> i32
SetValue:  HPF2 >>> i32
SetValue:  HPF4 >>> i32
SetValue:  BPF1 >>> i32
SetValue:  BPF2 >>> i32
SetValue:  BPF4 >>> i32
LibBound:  va_onepole >>> [[float,float,float]*,i32]* bound from xtmaudio_dsp
Compiled:  va_onepole >>> [[float,float,float]*,i32]*  [static]
LibBound:  moog_ladder >>> [[float,float,float,float]*,i32]* bound from xtmaudio_dsp
Compiled:  moog_ladder >>> [[float,float,float,float]*,i32]*  [static]
LibBound:  svf_c >>> [[|6,float|*,float,float,float,|6,float|*]*]* bound from xtmaudio_dsp
Compiled:  svf_c >>> [[|6,float|*,float,float,float,|6,float|*]*]*  [static]
LibBound:  svf_mc_c >>> [[|6,float|*,i64,float,float,float,|6,float|*]*,i64]* bound from xtmaudio_dsp
Compiled:  svf_mc_c >>> [[|6,float|*,i64,float,float,float,|6,float|*]*,i64]*  [static]
LibBound:  lpf_c >>> [[float,float,float,float]*]* bound from xtmaudio_dsp
Compiled:  lpf_c >>> [[float,float,float,float]*]*  [static]
LibBound:  lpf_mc_c >>> [[float,i64,float,float,float]*,i64]* bound from xtmaudio_dsp
Compiled:  lpf_mc_c >>> [[float,i64,float,float,float]*,i64]*  [static]
LibBound:  lpf2_c >>> [[float,float,float,float]*]* bound from xtmaudio_dsp
Compiled:  lpf2_c >>> [[float,float,float,float]*]*  [static]
LibBound:  lpf2_mc_c >>> [[float,i64,float,float,float]*,i64]* bound from xtmaudio_dsp
Compiled:  lpf2_mc_c >>> [[float,i64,float,float,float]*,i64]*  [static]
LibBound:  bpf_c >>> [[float,float,float,float]*]* bound from xtmaudio_dsp
Compiled:  bpf_c >>> [[float,float,float,float]*]*  [static]
LibBound:  bpf_mc_c >>> [[float,i64,float,float,float]*,i64]* bound from xtmaudio_dsp
Compiled:  bpf_mc_c >>> [[float,i64,float,float,float]*,i64]*  [static]
LibBound:  hpf_c >>> [[float,float,float,float]*]* bound from xtmaudio_dsp
Compiled:  hpf_c >>> [[float,float,float,float]*]*  [static]
LibBound:  hpf_mc_c >>> [[float,i64,float,float,float]*,i64]* bound from xtmaudio_dsp
Compiled:  hpf_mc_c >>> [[float,i64,float,float,float]*,i64]*  [static]
LibBound:  apf_c >>> [[float,float,float,float]*]* bound from xtmaudio_dsp
Compiled:  apf_c >>> [[float,float,float,float]*]*  [static]
LibBound:  notch_c >>> [[float,float,float,float]*]* bound from xtmaudio_dsp
Compiled:  notch_c >>> [[float,float,float,float]*]*  [static]
LibBound:  notch_mc_c >>> [[float,i64,float,float,float]*,i64]* bound from xtmaudio_dsp
Compiled:  notch_mc_c >>> [[float,i64,float,float,float]*,i64]*  [static]
LibBound:  peak_c >>> [[float,float,float,float]*]* bound from xtmaudio_dsp
Compiled:  peak_c >>> [[float,float,float,float]*]*  [static]
LibBound:  peak_mc_c >>> [[float,i64,float,float,float]*,i64]* bound from xtmaudio_dsp
Compiled:  peak_mc_c >>> [[float,i64,float,float,float]*,i64]*  [static]
LibBound:  bell_c >>> [[float,float,float,float,float]*]* bound from xtmaudio_dsp
Compiled:  bell_c >>> [[float,float,float,float,float]*]*  [static]
LibBound:  bell_mc_c >>> [[float,i64,float,float,float,float]*,i64]* bound from xtmaudio_dsp
Compiled:  bell_mc_c >>> [[float,i64,float,float,float,float]*,i64]*  [static]
make[2]: *** [CMakeFiles/aot_audio_dsp.dir/build.make:62: ../libs/aot-cache/xtmaudio_dsp.so] Segmentation fault (core dumped)
make[1]: *** [CMakeFiles/Makefile2:655: CMakeFiles/aot_audio_dsp.dir/all] Error 2
make: *** [Makefile:163: all] Error 2
```
Hi I am getting following error 
Analogue Synthesizer Reset!
eval: unbound variable: R
Trace: oxygene
I do here a swooosh sound initially
Hi all,

I recently upgraded from 0.7.0 to HEAD and found that midi notes were being dropped constantly.  It seems to happen when more than one note is played at a time.  The notes that go missing appear to be completely random.  When I play the same sequence of 4 note chords over and over again, different notes are missing each time.  It rarely plays all four notes, but it always plays at least one note. Most of the time at notes are missing.  I have used midi monitor to make sure the problem wasn't happening in my midi host.  Either way, the same code in 0.7.0 never misses a midi note.  Not sure how to debug this one.

Jason
Hello, I am new to extempore. 

I was checking out the docs, and it told me the binary release may be a good option to get me going, so I tried that out.
https://extemporelang.github.io/docs/overview/install/

So I got the 0.7.0 from here which was released in April 2016. (I am running it on macOS Mojave 10.14.1)
https://github.com/digego/extempore/releases

Now I see that I am good to go, I went on to the guide to try out instruments on this page.
https://extemporelang.github.io/docs/guides/note-level-music/

However the code below does not work for 0.7.0 (the make-instrument macro does not work but if I change it with bind-instrument it works).

```lisp
;; load the instruments file
(sys:load "libs/core/instruments.xtm")

;; define a synth using the provided component fmsynth
(make-instrument synth fmsynth)

;; add the instrument to the DSP output sink closure
(bind-func dsp:DSP
  (lambda (in time chan dat)
    (synth in time chan dat)))
(dsp:set! dsp)

;; play a note on our synth
(play-note (now) synth (random 60 80) 80 (* 1.0 *second*))
```

I checked out the other issues and the code and see that the **make-instrument** macro was added in 2017, so I guess the documentation is up to date but the recommended installation method is old (since the latest release is 2016).

## My suggestion

I think most beginners will first try out with the binary && example code in the documents, but I understand it is probably hard to sync the version of the docs and the code--perhaps write somewhere in the docs that the sample code there works for the newest code and not necessarily for the newest release build?

Other than that, nice project 👍 
I am learning extempore in the docs.

A lot of '(0 2 4 5 7 9 11) comes out in the chapter of Note-level music.

Therefore, I think that it would be better to assign '(0 2 4 5 7 9 11) to variables.

Example:(libs/core/pc_ivl.xtm)
```lisp
(define *pc:natural-note*
   '(0 2 4 5 7 9 11))
```

What do you think?
A home-build of the current master branch crashes on (define a (1 . 0.5)) 
Hi! I actually started out with a PR to the docs, but it seems the html is auto-generated, and my phrasings aren't native-english anyway, so I'm just going to throw a couple of suggestions at you instead, as I go through the docs while learning extempore :-) 

I'm running Extempore 0.7.0, using a Macbook running OS X 10.12.6 and its built-in soundcard.

- In the examples in http://digego.github.io/extempore/time.html, add a note about how to stop the infinite sequence of callbacks, eg by re-defining `foo` to a `noop`.

- In first example, http://digego.github.io/extempore/audio-signal-processing.html, explain that the naming of the `dsp` function is arbitrary (but probably a convetion, I assume?) You're talking about a special function, `dsp`, but it seems that's not the case? It's only about the signature of the function.

- In same example, using a bit more precision on Pi (eg `3.14159`) avoids a periodic 'click' in the output.

- In the second example, same page, I needed to use`randomf` and not `random` (a lucky guess on my part!)

I'll add more as I progress :-)
on the current master branch compiled from source, 
when I evaluate (sys:load "libs/external/opengl.xtm")  the following error occurs:

```
sys:load notification base already loaded
Lib Load:  libGL dynamic library loaded from /usr/lib/x86_64-linux-gnu/libGL.so
**** DECL ****
declare void @glActiveTexture (i32)
**** ENDDECL ****

LLVM IR: <string>:60:19: error: invalid redefinition of function 'glActiveTexture'
declare cc 0 void @glActiveTexture(i32) nounwind
                  ^

Compiler Error  could not bind glActiveTexture

```