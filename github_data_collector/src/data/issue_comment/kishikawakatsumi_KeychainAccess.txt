OSStatus error:[-34018] Internal error when a required entitlement isn't present, client has neither application-identifier nor keychain-access-groups entitlements.

I get this error on a iphone 8 with IOS 13.3.
But there is no error on a iphone 6 with IOS 12.1
The Keychain.entitlements is already added to the project.
How can I fix this?
Thanks.
Hi,
when trying to start our app on an iPad (from XCode) we get the error message "bundle identifier does not match code signing identifier" - app is not started.

KeyChainAccess 4.1.0
Xcode 11.3
iOS 13.3
Carthage 0.34.0
macOS 10.15.2

Everything worked fine for older versions of our app (and KeychainAccess) compiled with XCode 10.1.

Removing "KeychainAccess.framework" from the "/usr/local/bin/carthage copy-frameworks" Run Script eliminates the startup problem.

Thanks for Help.



Hello!

I'm trying to enable "Mac" switch so my iPad app can run on Mac as well but unfortunately it fails to build due to the following problems with KeychainAccess:

'SecAddSharedWebCredential' is unavailable: not available on macCatalyst
'SecRequestSharedWebCredential' is unavailable: not available on macCatalyst
'SecCreateSharedWebCredentialPassword' is unavailable: not available on macCatalyst
'kSecSharedPassword' is unavailable: not available on macCatalyst

I'm using the latest version of KeychainAccess available via CocoaPods '4.1.0'

Could you please suggest?

Thank you!
I'm obtaining a username as follows:

let keychain = Keychain(service: "com.example.github-token")

DispatchQueue.global().async {
    do {
        let username = try keychain
            .authenticationPrompt("Authenticate to login to server")
            .get("username")
    } catch let error {
        // Error handling if needed...
    }
}

Now I want to obtain both a username and a password as follows:

DispatchQueue.global().async {
    do {
        let username = try keychain
            .authenticationPrompt("Authenticate to login to server")
            .get("username")
        let password = try keychain
            .authenticationPrompt("Authenticate to login to server")
            .get("password")
    } catch let error {
        // Error handling if needed...
    }
}

This requires the user to authenticate with Touch ID or Face ID twice. How can I obtain multiple items with only a single authentication?
I'm also having the same problem with the Touch ID enabled keychain item in the iOS13 simulator.

I noted that the issue was closed, but is there any resolution to this?

today, My Colleague and I are carthage update for our project.

build our project is OK, but can't install device 

we replace old framework step by step, and found out KeychainAccess.framework cause the error.

Xcode alert message: Could not locate installed application Install claimed to have succeeded

Xcode 11.1
KeychainAccess tag: v3.2.1

On iPad 4 (iOS 10.3.3) when i'm trying to update a value i'm getting this exception: **The specified item already exists in the keychain.**

this is how i use it:
```
 let keychain = Keychain(service: key).accessibility(.afterFirstUnlock)
 do { 
       try keychain.set(value, key: MyKey)
        } catch let error {
            print(error.localizedDescription)
        }
```
We're getting ocassional crashes here.

Let me know how we can further help.
```
Crashed: com.apple.main-thread
0  KeychainAccess                 0x105b6c034 Keychain.subscript.setter + 663 (Keychain.swift:663)
1  [REDACTED]                          0x1051359d0 closure #1 in LoadingInterstitialViewController.refreshAuthToken() + 84 (LoadingInterstitialViewController.swift:84)
2  [REDACTED]                          0x1050be6c8 closure #1 in APIService.refreshAuthToken(_:completionHandler:) + 198 (APIService+Auth.swift:198)
3  Alamofire                      0x105792ea0 specialized closure #1 in closure #1 in DataRequest.response<A>(queue:responseSerializer:completionHandler:) + 4384288416
4  Alamofire                      0x105796bf4 partial apply for specialized  (<compiler-generated>)
5  Alamofire                      0x105771108 thunk for @escaping @callee_guaranteed () -> () (<compiler-generated>)
6  libdispatch.dylib              0x1a79fca38 _dispatch_call_block_and_release + 24
7  libdispatch.dylib              0x1a79fd7d4 _dispatch_client_callout + 16
8  libdispatch.dylib              0x1a79dd9e4 _dispatch_main_queue_callback_4CF$VARIANT$armv81 + 1008
9  CoreFoundation                 0x1a7f4ec1c __CFRUNLOOP_IS_SERVICING_THE_MAIN_DISPATCH_QUEUE__ + 12
10 CoreFoundation                 0x1a7f49b54 __CFRunLoopRun + 1924
11 CoreFoundation                 0x1a7f490b0 CFRunLoopRunSpecific + 436
12 GraphicsServices               0x1aa14979c GSEventRunModal + 104
13 UIKitCore                      0x1d47b5978 UIApplicationMain + 212
14 [REDACTED]                          0x104f1f644 main + 18 (AppDelegate.swift:18)
15 libdyld.dylib                  0x1a7a0e8e0 start + 4
```
My macOS app stores server credentials in the keychain using KeychainAccess, and this works perfectly.

I also have written a command line tool, which is embedded into the app's bundle. I'd like this tool to also have access to the passwords stored in the Keychain by the main app.

HOWEVER, for the life of me I cannot get the two to share access to the same keychain items. The command-line tool always pops up the "auth dialog":

<img width="273" alt="pic" src="https://user-images.githubusercontent.com/841871/39671448-96e771fe-516c-11e8-9eeb-6c316b6c1527.png">

I suspect my code is correct. In both the main app and the tool, the following does give me access to the password data from the keychain:

```
let keychain = Keychain(service: "serviceName", accessGroup: "24F6D23HXS.com.obfuscated.app-name")
```

I am guessing my problem is in the configuration of the two projects in Xcode. For the macOS app, I have "app target > Capabilities > Keychain Sharing" turned on, and the keychain group it generated there is what's used in the code above (`24F6D23HXS.com.obfuscated.app-name`). Turning this on also caused a provisioning profile to be generated, which seems fine.

However, the target settings for the command line tool has no Capabilities section, so I can't turn on "Keychain Sharing". Also there's no apparent way to select the provisioning profile the macOS app is using (not sure if I need to do this or not).

Can anyone give me any pointers on how to get this working?