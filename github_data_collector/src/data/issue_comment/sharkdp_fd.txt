This is similar to #333 which only addressed `--exec-batch`.

In conjunction with #328 (specifically the --owner option), please consider adding a --perm flag accepting the standard four digit permission format as a filter
Hey there.

I'm not sure if this is possible with `fd` already (sorry if it is), but wouldn't it make sense to *not* buffer command output, by default, when using `-j 1 / --threads 1`? For example:

```bash
$ fd --type directory --max-depth 1 --threads 1 --exec bash -c "date && sleep 3"
```

Currently, `fd` will buffer the output of `bash` and only display it after the process exits. But in this particular case, since `bash` will always run consecutively and not in parallel, I think it would make sense to not buffer them.

What do you think? 
Thanks.
Attempts to fix #485 
I was looking for sockets, but noticed some other file types are missing as well.

From `find`:
```
     -type t
             True if the file is of the specified type.  Possible file types are as follows:

             b       block special
             c       character special
             d       directory
             f       regular file
             l       symbolic link
             p       FIFO
             s       socket
```
equivalently, via the Open Group [sys/stat.h](https://pubs.opengroup.org/onlinepubs/009604499/basedefs/sys/stat.h.html) linked from Wikipedia
```
S_IFMT  Type of file.
  S_IFBLK   Block special.
  S_IFCHR   Character special.
  S_IFIFO   FIFO special.
  S_IFREG   Regular.
  S_IFDIR   Directory.
  S_IFLNK   Symbolic link.
  S_IFSOCK  Socket.
```

For reference, `fd` offers the following filetype filters currently, according to `--help`:
```
    -t, --type <filetype>...
            Filter the search by type (multiple allowable filetypes can be specified):
              'f' or 'file':         regular files
              'd' or 'directory':    directories
              'l' or 'symlink':      symbolic links
              'x' or 'executable':   executables
              'e' or 'empty':        empty files or directories
```
Using the find command with the -lname parameter makes it easy to find all matching symbolic links.

for example:
find . -lname '*libarchive*'

I can find all the symbolic links from the *libarchive* directory.
I'm mainly dealing with the issue of dotfiles not showing up when `fd` is used with `fzf` (`export FZF_DEFAULT_COMMAND="fd --type file"`) to efficiently list files on disk. 

Clearly the default of not including hidden files is reasonable, but the one exception to this is dotfiles e.g. `.vimrc`, `~/.config/terminator/config`, `.profile` all files that I will actually edit quite often. 

There seem to be 2 approaches

- add to the `fd` invocation to explicitly include files from `git ls-files` somehow. It's unclear how to do this cleanly. It's unclear if it is a reasonable thing to ask `fd` itself to have a custom flag to whitelist git tracked files for us. But if that exists, it is perfect for this situation.
- run `fd -H` and add many patterns `.svn` `.git` etc to the `.ignore`. This is probably sane but I don't know, it doesn't give me warm and fuzzies. 

Ideas?
Hi.

Here are some details:

```
$ rustc --version
rustc 1.38.0 (625451e37 2019-09-23)

$ uname -a
Darwin nucleus 19.0.0 Darwin Kernel Version 19.0.0: Wed Sep 25 20:18:50 PDT 2019; root:xnu-6153.11.26~2/RELEASE_X86_64 x86_64

$ port version
Version: 2.6.99

```

To demonstrate the problem, I reinstalled fd as below:

```
$ cargo install fd-find --force
    Updating crates.io index
  Installing fd-find v7.4.0
   Compiling libc v0.2.62
   Compiling memchr v2.2.1
   Compiling bitflags v1.2.0
   Compiling fs_extra v1.1.0
   Compiling lazy_static v1.4.0
   Compiling cc v1.0.45
   Compiling unicode-width v0.1.6
   Compiling log v0.4.8
   Compiling regex-syntax v0.6.12
   Compiling cfg-if v0.1.10
   Compiling strsim v0.8.0
   Compiling ansi_term v0.11.0
   Compiling nix v0.14.1
   Compiling vec_map v0.8.1
   Compiling version_check v0.9.1
   Compiling same-file v1.0.5
   Compiling fnv v1.0.6
   Compiling void v1.0.2
   Compiling quick-error v1.2.2
   Compiling ansi_term v0.12.1
   Compiling thread_local v0.3.6
   Compiling crossbeam-utils v0.6.6
   Compiling walkdir v2.2.9
   Compiling humantime v1.3.0
   Compiling lscolors v0.6.0
   Compiling crossbeam-channel v0.3.9
   Compiling term_size v0.3.1
   Compiling atty v0.2.13
   Compiling num_cpus v1.10.1
   Compiling textwrap v0.11.0
   Compiling aho-corasick v0.7.6
   Compiling bstr v0.2.8
   Compiling clap v2.33.0
   Compiling regex v1.3.1
   Compiling ctrlc v3.1.3
   Compiling globset v0.4.4
   Compiling ignore v0.4.10
   Compiling jemalloc-sys v0.3.2
   Compiling jemallocator v0.3.2
   Compiling fd-find v7.4.0
    Finished release [optimized] target(s) in 55.56s
   Replacing /Users/robin/.cargo/bin/fd
    Replaced package `fd-find v7.4.0` with `fd-find v7.4.0` (executable `fd`)
```

The resulting binary segfaults as follows:
```
$ cd /tmp
$ fd oysters-clams-and-cockles
Segmentation fault: 11
```

On prying with lldb, I see this:
```
$ lldb `which fd`
(lldb) target create "/Users/robin/.cargo/bin/fd"
Current executable set to '/Users/robin/.cargo/bin/fd' (x86_64).
(lldb) r
Process 93119 launched: '/Users/robin/.cargo/bin/fd' (x86_64)
Process 93119 stopped
* thread #1, queue = 'com.apple.main-thread', stop reason = EXC_BAD_ACCESS (code=1, address=0x0)
    frame #0: 0x000000010019989d fd`_rjem_je_tcache_bin_flush_small + 685
fd`_rjem_je_tcache_bin_flush_small:
->  0x10019989d <+685>: movq   (%rax), %rax
    0x1001998a0 <+688>: shlq   $0x10, %rax
    0x1001998a4 <+692>: sarq   $0x10, %rax
    0x1001998a8 <+696>: andq   $-0x2, %rax
Target 0: (fd) stopped.
(lldb) bt
* thread #1, queue = 'com.apple.main-thread', stop reason = EXC_BAD_ACCESS (code=1, address=0x0)
  * frame #0: 0x000000010019989d fd`_rjem_je_tcache_bin_flush_small + 685
    frame #1: 0x000000010019b722 fd`tcache_flush_cache + 34
    frame #2: 0x000000010019bb41 fd`tcache_destroy + 33
    frame #3: 0x000000010019cd91 fd`_rjem_je_tsd_cleanup + 65
    frame #4: 0x000000010019d0e6 fd`_rjem_je_malloc_tsd_boot1 + 54
    frame #5: 0x000000010016f1b6 fd`jemalloc_constructor + 662
    frame #6: 0x00000001004eb635 dyld`ImageLoaderMachO::doModInitFunctions(ImageLoader::LinkContext const&) + 539
    frame #7: 0x00000001004eba5a dyld`ImageLoaderMachO::doInitialization(ImageLoader::LinkContext const&) + 40
    frame #8: 0x00000001004e6933 dyld`ImageLoader::recursiveInitialization(ImageLoader::LinkContext const&, unsigned int, char const*, ImageLoader::InitializerTimingList&, ImageLoader::UninitedUpwards&) + 493
    frame #9: 0x00000001004e569c dyld`ImageLoader::processInitializers(ImageLoader::LinkContext const&, unsigned int, ImageLoader::InitializerTimingList&, ImageLoader::UninitedUpwards&) + 188
    frame #10: 0x00000001004e573c dyld`ImageLoader::runInitializers(ImageLoader::LinkContext const&, ImageLoader::InitializerTimingList&) + 82
    frame #11: 0x00000001004d44b2 dyld`dyld::initializeMainExecutable() + 199
    frame #12: 0x00000001004d9aab dyld`dyld::_main(macho_header const*, unsigned long, int, char const**, char const**, char const**, unsigned long*) + 6760
    frame #13: 0x00000001004d3227 dyld`dyldbootstrap::start(dyld3::MachOLoaded const*, int, char const**, dyld3::MachOLoaded const*, unsigned long*) + 453
    frame #14: 0x00000001004d3025 dyld`_dyld_start + 37
(lldb)
```

**Note that the problem goes away if I build fd in debug mode:**
```
$ cargo install fd-find --debug --force
    Updating crates.io index
  Installing fd-find v7.4.0
   Compiling libc v0.2.62
   Compiling memchr v2.2.1
   Compiling bitflags v1.2.0
   Compiling cc v1.0.45
   Compiling fs_extra v1.1.0
   Compiling log v0.4.8
   Compiling lazy_static v1.4.0
   Compiling unicode-width v0.1.6
   Compiling cfg-if v0.1.10
   Compiling regex-syntax v0.6.12
   Compiling vec_map v0.8.1
   Compiling nix v0.14.1
   Compiling strsim v0.8.0
   Compiling ansi_term v0.11.0
   Compiling same-file v1.0.5
   Compiling fnv v1.0.6
   Compiling void v1.0.2
   Compiling version_check v0.9.1
   Compiling ansi_term v0.12.1
   Compiling quick-error v1.2.2
   Compiling thread_local v0.3.6
   Compiling crossbeam-utils v0.6.6
   Compiling walkdir v2.2.9
   Compiling humantime v1.3.0
   Compiling lscolors v0.6.0
   Compiling crossbeam-channel v0.3.9
   Compiling aho-corasick v0.7.6
   Compiling bstr v0.2.8
   Compiling term_size v0.3.1
   Compiling atty v0.2.13
   Compiling num_cpus v1.10.1
   Compiling textwrap v0.11.0
   Compiling jemalloc-sys v0.3.2
   Compiling clap v2.33.0
   Compiling regex v1.3.1
   Compiling ctrlc v3.1.3
   Compiling globset v0.4.4
   Compiling ignore v0.4.10
   Compiling fd-find v7.4.0
   Compiling jemallocator v0.3.2
    Finished dev [unoptimized + debuginfo] target(s) in 20.91s
   Replacing /Users/robin/.cargo/bin/fd
    Replaced package `fd-find v7.4.0` with `fd-find v7.4.0` (executable `fd`)
$ cd /tmp
$ fd oysters-clams-and-cockles
$ echo $?
0
```

Happy to provide any other info as needed.

Thanks!
There is a dead PR #366 already submitted for issue #357. I thought I would propose a smaller change that's more likely to be accepted into the codebase.

Happy to take feedback and change the design if needed in the interest of getting this closed!

Closes #357
fd is great for listing the files that match some pattern, but if I want to know more details about those files (eg permissions, size, owner, modification date) I need to run them through `ls` or `exa`. `fd pattern -x ls -l` isn't such a great experience though: it isn't colored, the order is random, and the columns don't align if the file sizes aren't similar. Given that `-l` is the most common flag to `ls`, why not also support it in `fd`?