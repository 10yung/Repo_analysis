<img width="371" alt="Screen Shot 2019-11-13 at 10 45 05 AM" src="https://user-images.githubusercontent.com/6132143/68793917-c4391d00-0602-11ea-8ff9-4d1295c5823b.png">

Here's my Package.resolved:
```
        "package": "geos",
        "repositoryURL": "https://github.com/GEOSwift/geos.git",
        "state": {
          "branch": null,
          "revision": "4285f0903eacafd98705f047519c16e9dd09aba2",
          "version": "4.1.0"
        }
      },
      {
        "package": "GEOSwift",
        "repositoryURL": "https://github.com/GEOSwift/GEOSwift.git",
        "state": {
          "branch": null,
          "revision": "dfc9da755f8966dae4b97073d7c2301065cbbbc1",
          "version": "6.0.0"
        }
      },
```

I'm getting the above errors only in Xcode. When I build from the command line, building succeeds.

It's possible that this issue is particular to Vapor. I'm cleaning, updating, building, and generating the Xcode project using the Vapor toolbox (`vapor clean`, `vapor update`, `vapor build`, `vapor xcode`).

Xcode 11.1, Swift 5.1.
Would be similar to GEOSwiftMapKit but for Google Maps SDK
Currently, CI runs the tests on macOS, iOS, and tvOS, but not on Ubuntu.

Hi All, is there any way to split a polygon? very appreciated if have an example.
Hi,

I would like to draw my Polygons directly on an UIView. I don't have the need for an underlying map since the geojson file I'm parsing is basically represeting paths for drawing a polygon for every single country in the world. So the end result would be a world map drawn with polygons.

The reason why I don't want an underlying map:
1. The rendering time of the map is too slow
2. I don't have a need for any labels, roads or other map information
3. I can't zoom out and show the entire world with MapKit.

I use below methods to parse the geojson file and get geometries from it:

```
func overlayEntireMap(completion: @escaping () -> Void) {
        background {
            if let geoJSONURL = Bundle.main.url(forResource: "countries", withExtension: "geojson") {
                if let features = try! Features.fromGeoJSON(geoJSONURL) {
                    self.features = features
                    self.drawPolygonsFromFeatures(features)
                }
                completion()
            }
        }
    }

func drawPolygonsFromFeatures(_ features: Features) {
        for feature in features {
            if let geometries = feature.geometries {
                for geometry in geometries {
                    
                }
            }
        }
    }
```

So I hope you have a solution for this :)