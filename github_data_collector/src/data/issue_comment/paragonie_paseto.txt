@paragonie-scott After discovering Windows **and** Mac line ends in the code I've also ran PHPCBF to adhere PSR-12.
Here you are!
https://tools.ietf.org/html/draft-paragon-paseto-rfc-00 notes: “Expires: October 21, 2018” No new draft seems to have been submitted yet. This may need updating.
The footer in the README example is: `Paragon Initiative Enterprises`, however, the spec hint at this field being JSON.
That said, other than making reference to an empty footer should be treated as an empty string, the format of the Footer is NOT specified.

If the footer was _alwasy_ JSON (when not empty) this would simplify libraries and usages of the library
It may be a bit strange to call an error in the documentation a security vulnerability, but I think it is justified here.

The [documentation](https://github.com/paragonie/paseto/tree/master/docs/02-PHP-Library#decoding-tokens) claims that 

`$parser = Parser::getLocal($sharedKey, ProtocolCollection::v2());`

is equivalent to

```php
$parser = (new Parser())
    ->setKey($sharedKey)
    // Adding rules to be checked against the token
    ->addRule(new NotExpired)
    ->addRule(new IssuedBy('issuer defined during creation'))
    ->setPurpose(Purpose::local())
    // Only allow version 2
    ->setAllowedVersions(ProtocolCollection::v2());
```

From my understand, however, this is not the case. In particular, the former call does not add a rule banning expired tokens from successful validation. I'm afraid many users of the library, relying on the documentation, will use the former call without explicitly adding such a rule and therefore opening their applications up to misuse of expired tokens.

Please fix this documentation error (or let me know in case I misunderstood something fundamentally here).
In the Util.php file, while figuring out how to work with the jti in the footer, I found functions with duplicate phpdoc descriptions that do not perform the same operations:

https://github.com/paragonie/paseto/blob/master/src/Util.php#L138

https://github.com/paragonie/paseto/blob/master/src/Util.php#L157

https://github.com/paragonie/paseto/blob/master/src/Util.php#L177
Hello.I have recently started studying Paseto.As a person coming from a JWT background I am used to the refresh token idea(when my JWT expires I get a new one by providing a special key)

Now as an alternative for JWT authentication paseto provides the `public` purpose tokens.Now my question is this. When a token expires what should I do ? Is there any way to refresh that token or do I need to prompt the user to enter their login credentials so I can sign a new token?
From Thai Duong:

In the case of an RNG failure (i.e. all zero bytes), the BLAKE2b of the nonce and message leaks the BLAKE2b hash of the message, which might be enough information (along with the plaintext length) to allow an attacker to recover a plaintext without knowing the key.

The story is similar for v1 with HMAC-SHA384.

Proposed solution: Instead of hashing the message and random nonce together, also include the secret key in the calculation. This changes the attack calculus from "find the input to a hash function with a known output" to "break a keyed PRF without knowing the key".

This solution is backwards compatible with what `v1` and `v2` are already doing (since the output is just a plaintext nonce that gets stored in the token). However, to make this behavior change explicit and easy to reason about, I'm thinking about incorporating these changes into a `v3` and `v4`.
I couldn't find any information about what is the expected order of keys in the payload, it would be useful that in any implementation such code:

```
encode(decode(Payload)) == Payload
```

Currently from what I see there is nothing that ensures such behaviour. This could be achieved with #90 and usage of ASN.1 DER format for example, but right now standard **requires** payload to be correct Base64 encoded JSON token.
Hello

This is a very nice project, and I'm considering to switch from JWT.

I know JWT also doesn't have this feature, But I want to know paseto project can support "set token invalid before expired" feature now? or in the future?

thx.
Code in this repository: https://github.com/conferencetools/auth-module/blob/master/src/Auth/Extractor/PasetoCookie.php results in an empty cookie being set on my production env; works fine in dev.

PHP environment is

```
FROM php:7.2-fpm-alpine3.7 as php

RUN docker-php-ext-install pdo_mysql
```

Fairly sure it's an environment thing, but I'd expect an exception instead of an empty string.

Interesting addendum: switched to V1 and it works fine. Suspect it might be something alpine/libsoduim related.