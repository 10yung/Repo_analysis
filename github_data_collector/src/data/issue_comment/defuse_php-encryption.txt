> The current version of php-encryption is v2.2.1. This library is expected to remain stable and supported by its authors with security and bugfixes until at least January 1st, 2021.

Does this only refer to the version 2.2.1 or will you abandon the "php-encryption" project after January 1st 2021 ?
This code in Defuse\Crypt\File.php does not validate in PHP 7.3:

```
/* Initialize a streaming HMAC state. */
/** @var resource $hmac */
$hmac = \hash_init(Core::HASH_FUNCTION_NAME, HASH_HMAC, $akey);
Core::ensureTrue(\is_resource($hmac) || \is_object($hmac), 'Cannot initialize a hash context');
```
* Check if first argument of `test.sh` is a file instead of its
existence
* Add "fast" argument to skip test in "@group slow"
* Small fixes to the bash scripts (quotes, syntax, failsafe)
* Add CONTRIBUTING.md file with instructions for tests and syntax fixing

On my 4 GHz CPU, this brings the tests from 109 seconds down to 63
seconds.
* Require PHP-CS-Fixer as dev dependency
* Modify .gitignore to ignore php_cs.cache and generated coverage files
* Run the "fix" command on the codebase
https://github.com/defuse/php-encryption/blob/master/docs/InternalDeveloperDocs.md#publishing-releases

Related to #433, we should produce two versions of the Phar and sign them both:

* `defuse-crypto.phar` is the preferred (default), which was built on PHP 7
* `defuse-crypto-php5.phar` should be built on PHP 5 (so Composer resolves random_compat v2 instead of random_compat v9, which makes it actually bundle the polyfill)

A core function to test whether a given resource (file, string, etc) has been encrypted by (and therefore is decryptable by) this library (and version?) would be very useful, rather than attempting a decryption and handling the associated exceptions.

The checks present in the beginning of `File::decryptResourceInternal()` seem like what I desire; but I'd rather handle a boolean response from something like `isDecryptableCiphertext()` before actually attempting to decrypt a file which may or may not actually have been encrypted.
I noticed that _hash_update()_ from PHP which is used in _File::decryptResourceInternal()_ is extreme slow. I have a file which is about 42 MiB large and in total the HMAC verification process needs more than 0.5 seconds.

I use a i7-4930K with 32 GB of RAM.

Here I only measured the verification process at step #2 which gives me about 0.25 seconds:
```
$total = 0;
[...]
$start = \microtime(true);
			
/* Recalculate the MAC (so far) and compare it with the one we
* remembered from pass #1 to ensure attackers didn't change the
* ciphertext after MAC verification. */
\hash_update($hmac2, $read);

$total += \microtime(true) - $start;
```

Is that normal?

Hello,

Great library, thanks.

I spent several hours figuring out why my code is not working. I was passing same path for input and output file to file encrypt or decrypt methods.
I think it would be useful to have an exception in this case:

```php
    private static function encryptFileInternal($inputFilename, $outputFilename, KeyOrPassword $secret)
    {
        if ($inputFilename === $outputFilename) {
            throw new Ex\IOException('Input and outputFilename must be different.');
        }
```

```php
    private static function decryptFileInternal($inputFilename, $outputFilename, KeyOrPassword $secret)
    {
        if ($inputFilename === $outputFilename) {
            throw new Ex\IOException('Input and outputFilename must be different.');
        }
```

If you are ok, I will open the PR.
