Just came across Rete and am blown away. Seriously, great work! It's solving a few problems and ideas I have, especially with regards to teaching stream processing to junior engineers (and getting my kid coding!) so thanks and kudos to all involved. 

I'm now trying to use Rete as my new "hammer for all my nails" and found a few great use cases. One of which I'd like to explore is jungling some graph data I have. Initial samples and workflows are working great, but I tried wiring it up to a few thousand nodes (3,266 in an organization hierarchy to be exact) and immediately felt the pain. 

There's no real data in the nodes, they're using the default renderers (though it is initialized in a vue app), and I don't have any workers / engine even setup in the process – so I'm wondering if it's just the number of nodes and connections is getting burly for a browser in general. 

I fished through the issues tonight and found the profiler plugin just barely, so I'll give that a crack tomorrow. But, in the meantime, figured I'd ask here to see what experience others have had with large graphs (even in just the editor, not the engine) 

Thanks!
In our application some of our nodes contain popup menus (HTML &lt;select&gt; elements), but the scroll wheel would not allow scrolling of the popup menu contents. This turned out to be because the Rete Zoom class swallows all `wheel` events by calling `preventDefault()`, thus preventing the subsequent `scroll` event from being generated.

To address this, the approach taken here is to only treat the `wheel` event as a zoom event if it occurs over the editor background, i.e. not over a node. This is accomplished by adding the following line at the top of the `Zoom` class `wheel` event:

```typescript
        if (e.currentTarget !== e.target) return;
```

While this results in an observable change in behavior -- zooming with the scroll wheel can only be accomplished over the white-space of the editor -- it seems justifiable to me in that Rete should allow nodes to make use of the `wheel`/`scroll` events as they see fit. There may be other ways of accomplishing the same goal but this was the simplest I could come up with.
```
return await Promise.all(Object.keys(node.outputs).map(async (key) => {
    const output = node.outputs[key];
    return await Promise.all(output.connections.map(async (c) => {
        const nextNode = (this.data as Data).nodes[c.node];
        await this.processNode(nextNode as EngineNode);
        await this.forwardProcess(nextNode);
    });
});
```
Consider the case where output.connections has the same node multiple times. processNode and forwardProcess will be called on that node multiple times. If in turn the next node has the same type of case this results in exponential amounts of promises in a wait state. Even if the nodes themselves do nothing in their worker, it doesn't take too large of a graph to start queuing up 10s of thousands of promise waits and lock the process while they are resolving.

One potential solution is to have a set of nodes on the engine that have already been forwarded and not forward if the item is already in the set. This seems to solve the problem on my end so far, but not sure if there are some potential pitfalls I'm missing. Is there a better way to handle this?
This fixes #400 
git cloned repo, did npm install, ran npm run build, get lots of errors. Is there a different build process?

```
> rete@1.4.2 lint /rete
> tsc && eslint --ext .ts --ext .js src


/rete/node_modules/ts-node/src/index.ts:240
    return new TSError(diagnosticText, diagnosticCodes)
           ^
TSError: ⨯ Unable to compile TypeScript:
src/index.js:1:1 - error TS1208: Cannot compile namespaces when the '--isolatedModules' flag is provided.

1 "use strict";
  ~~~~~~~~~~~~

    at createTSError (/rete/node_modules/ts-node/src/index.ts:240:12)
    at reportTSError (/rete/node_modules/ts-node/src/index.ts:244:19)
    at getOutput (/rete/node_modules/ts-node/src/index.ts:360:34)

```
I'm trying to create a code generator using rete.js as a node editor.
for this purpose i started with a simple project that is already published in codepen: https://codepen.io/Ni55aN/pen/xzgQYq.
I managed to create two simple nodes with my code below (add node: for addition, Number node: it's supposed to be my input ) :
components.js file:
`var NumberSocket = new Rete.Socket('Number');


class NumberControl extends Rete.Control {

    constructor(emitter) {
        super();
        this.emitter = emitter;
        this.template = '<input id="myinput" value=""/>';

    }
}
class AddComp extends Rete.Component {

    constructor() {
        super('Add')
    }

    builder(node) {

        var inp1 = new Rete.Input('num', NumberSocket);

        return node.addInput(inp1)

    }

    worker(node) {

    }

}


class NumberComp extends Rete.Component {

    constructor() {
        super('Number')

    }
    builder(node) {
        var ctrl = new NumberControl(this.editor);
        let out = new Rete.Output('Number', NumberSocket);

        node.addOutput(out);
        node.addControl(ctrl)

    }

    worker(node, inputs, data) {

        outputs[0] = node.data.num;


    }
}

var data = {
    'id': 'tasksample@0.1.0',
    'nodes': {

        '1': {
            'id': 1,
            'position': [
                460, 350
            ],
            'name': 'Add'
        },
        '2': {
            "id": 2,

           
            "position": [80, 200],
            "name": "Number"
        }
    },

}`
index.js file: 
`var container = document.querySelector('#rete')

var editor = new Rete.NodeEditor('tasksample@0.1.0', container);
editor.use(ConnectionPlugin, { curvature: 0.4 });
editor.use(AlightRenderPlugin);
editor.use(ContextMenuPlugin);


var engine = new Rete.Engine('tasksample@0.1.0');

[new AddComp,new NumberComp].map(c => {
    editor.register(c);
    engine.register(c);
}); 
editor.on('process connectioncreate connectionremove nodecreate noderemove', async ()=>{
    if(editor.silent) return;
    await engine.abort();
    await engine.process(editor.toJSON());
});

editor.view.resize();

editor.fromJSON(data).then(() => editor.trigger('process'));`

Html file:
`<html>

<head>
    <title>Tasks Rete Sample</title>
    <link href="https://cdnjs.cloudflare.com/ajax/libs/normalize/7.0.0/normalize.css" rel="stylesheet">
    <link href="style.css" rel="stylesheet">
</head>

<body>
    <div class="node-editor" id="rete"></div>

    <script src="https://cdn.jsdelivr.net/npm/alight@0.14.0/alight.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/rete@1.0.0-alpha.2/build/rete.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/rete-alight-render-plugin@0.1.0/build/index.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/rete-connection-plugin@0.1.0/build/index.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/rete-context-menu-plugin@0.1.0/build/index.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/rete-task-plugin@0.1.0/build/index.js"></script>
    <script src="components.js"></script>
  
    <script src="index.js"></script>
</body>

</html>
`
![image](https://user-images.githubusercontent.com/41344619/71035788-8dcc5180-211c-11ea-8bdf-6983df3cdd2b.png)

how can i get the data from first component 'number' to the component add?

### Help! with this error

hello i'm new to Rete and Github so yeah.
the line the **error** was in : `import Rete from "rete";`
that's it i don't know a thing about this **error**
I'm trying to use the AreaPlugin to center nodes, I get a weird behaviour.

I'm regenerating all graph  when I get update from an observable

```
  async ngAfterViewInit() {
   this.dataflow$.subscribe(async data => {
      this.dataFlowService.dataflowModified.next(data)
      if (this.container) {
        while (this.container.firstChild) {
          this.container.removeChild(this.container.firstChild)
        }
      }
      this.container = this.el.nativeElement

      const reteFormat = await this.reteComponentService.convertToReteFormat(
        _.cloneDeep(data)
      )
      let reteFormatJson = Object.create(reteFormat)
      const components: any[] = []
      for (const obj in data) {
        components.push(new NumComponent(data[obj].name, data))
      }
      this.engine = new Engine('demo@0.2.0')
      this.editor = new NodeEditor('demo@0.2.0', this.container)
      this.editor.clear()
      this.editor.use(ConnectionPlugin)
      this.editor.use(ContextMenuPlugin, {
        searchBar: false,
        delay: 600000,
      })
      this.editor.use(AutoArrangePlugin, { margin: { x: 50, y: 50 }, depth: 0 })
      this.editor.use(AngularRenderPlugin, { component: MyNodeComponent })

      components.map(c => {
        this.editor.register(c)
        this.engine.register(c)
      })

      await this.editor.fromJSON(Object.create(reteFormatJson))
      await this.editor.nodes.map(elm => {
        this.editor.trigger('arrange' as any, { elm })
      })
      AreaPlugin.zoomAt(this.editor)
}
```

The first time when observable gets it's first data the editor is not centered on screen 

![Capture d’écran 2019-11-29 à 00 56 27](https://user-images.githubusercontent.com/11578288/69835601-2751c300-1243-11ea-9782-4e214551135c.png)

But the weird part is when a new value of data is triggered the editor gets centered.
![Capture d’écran 2019-11-29 à 01 00 18](https://user-images.githubusercontent.com/11578288/69835679-ae9f3680-1243-11ea-8e7d-e2e3e085454b.png)

Any idea of why this is happening only on initial `data`  value ?
Hi
I am wanting to look at making use of the Code plugin for rete but am a bit lost as to its implementation.
I have looked on codepen and cannot see an example there for it (you have many other excellent examples, just not for the Code plugin).

Is there a code example (preferably with Vue) for implementing this plugin? I have had a look at the website documentation but don't quite understand how / why / where the following is used
```
const sourceCode = await CodePlugin.generate(engine, editor.toJSON());
```
and what the purpose of the following code is (it doesn't seem to be used anywhere):
```
    code(node, inputs, add) { // 'node' parameter as in worker()
        // 'inputs' contains variable names
        add('console.log("hello!")') // add a line of code
        add('num', node.data.num); // add a variable with the value "node.data.num"
    }
```

Thanks for such an excellent and useful library, I find myself using it often (but the code plugin has be stumped LOL)
Hello,
Thanks for all the good work you are doing with rete js. We are using your library for one Drupal 8 module. And it is getting a good response. Here is the link for the module which we are working on https://www.drupal.org/project/if_then_else

We need some help with one functionality which we want to have in our module. We want a loop type of functionality that can loop over a set of nodes. We can handle the programmatic part of it but we need help with UI. We need a node that can hold a set of other nodes in it. I am attaching an image of a rough idea of what we need. Can you please help me with how I can proceed with it?

[Loop.pdf](https://github.com/retejs/rete/files/3752189/Loop.pdf)
