Searching the forum I found a comment (2015 ) about an issue that refers to the difference of bytes in "Fully loaded Bytes In" and " Content Breakdown summary".

(https://www.webpagetest.org/forums/showthread.php?tid=13973&highlight=Fully+Loaded+byte+in)


I have setup my private Instance of Webpage Test 19.04 and I have the same problem. 

Can somebody  give me an explanation or solution to this issue?
I would greatly appreciate your help,
Laura

Couple of questions on this:

1. Is the cache time accurate? For example [this run](https://www.webpagetest.org/performance_optimization.php?test=200111_K8_77ad91e17b2ea2838ebdd2e77b1bb3b2&run=2#cache_static_content) shows a cache time of 47.7 minutes when actually they are served with cache headers of 3 hours.

2. What is the grade based on? Don't like that big red F, and while I don't expect a big green A for a 3 hour cache policy the F seems a big harsh (I'd reserve that for those that don't return cache headers, or perhaps those that either explicitly return 0, or both).

Thanks,
Barry
Hi all, since mi Dec 2019 tests complete correctly but randomly shows Error Code 99999 with some metrics reported as 0 and others with values.

Here's an example: https://webpagetest.org/result/200109_QK_05921c4ff14c62c36d9584237164ffcc/1/details/#waterfall_view_step1

It seems like SpeedIndex, Start Render and Visually Complete Time metrics fail to compute while others may.
Any idea what is going on here?
Trying to setup a private instance of webpagetest.

It is mentioned that the Server AMI can automatically instantiate and terminate agents on EC2.

> There is an EC2 AMI available for the WebPageTest server that provides a lot of benefits:
> 
> No configuration required (up and running in 5 minutes).
> Automatically starts and stops EC2 test agents in all of the EC2 regions as needed.
> Automatically updates to the latest server and agent code.

On [this page](https://github.com/WPO-Foundation/webpagetest-docs/blob/master/user/Private%20Instances/ec2_agents.md) though, there is a list of agent AMIs.
Does it mean that there is a way to disable the auto instantiation behavior and setup an agent EC2  separately?

What benefits would it have?
Is there a separate server AMI for this use case, or the same AMI has some configuration options to not let it control the agent instantiation and termination ?
**Dear **@pmeenan,****

We have configured a Private instance in Redhat (RHEL7) for WPT Server. We have added and New Location agent ( WPT-Agent-windows ) up and running. We are stuck in  Location not showing in WPT UI. There is no error log in Nginx. Initially, location {docroot}/tmp files are created with the location name was created. Next, we are unable to find the way to troubleshoot. Please provide some detail flow of instruction to troubleshoot this issue. Thanks in advance.
I'm testing https://www.thefragranceshop.co.uk/paco-rabanne/female/g with this script that adds a preconnect to imgix.net:

```
(function () {
   var entries = [
       {'href': 'https://the-fragrance-shop.imgix.net'}
   ];

   var fragment = document.createDocumentFragment();
   for(entry of entries) {
       var link = document.createElement('link');
       link.rel = 'preconnect';
       link.href = entry.href;
       if(entry.hasOwnProperty('crossOrigin')) {
               link.crossOrigin = entry.crossOrigin;
       }
       fragment.appendChild(link);
   }
   document.head.appendChild(fragment);
   performance.mark('wpt.injectEnd'); // Not essential 
})();
```

For some runs the script seems to execute but for others it doesn't.

In this test it executed on the T430 in Dulles for every run (runs were across multiple test agents) - https://www.webpagetest.org/result/191117_WQ_53c946d8f4ba5faac579fd1a667eee75/

On this EC2 / Dublin test https://www.webpagetest.org/result/191117_Q5_a02f51c18d0326096f8555403b5c3d8d/ the script executes on some runs but not others

Also doesn't appear to be tester related as  run 1 (script didn't execute) and run 5 (script executed) were both on i-0b5d7d1079d0be5de

In this London test script didn't execute at all but I have seen it work - https://www.webpagetest.org/result/191117_C6_3de44417c641ec4ee3340ac4949d1b12/

If I strip down the script it appears to run consistently https://www.webpagetest.org/result/191117_QD_57e455d38da1c88af0dd25e7437cbc7d/

```
performance.mark('wpt.injectEnd');
```

I know the script behaviour is a bit racey but any ideas what might have changed lately to make it less reliable?




I was recently trying out the weppagetest API and noticed when checking the result json that out of two URL parameters only one was passed. So for example the URL I want to test looks like this:
`https://my-example-url.com/?parameter1=foo&parameter2=bar`

And when using the webpagetest api like this:
```
var test_url = "https://my-example-url.com/?parameter1=foo&parameter2=bar";
$.ajax({
	url:"http://www.webpagetest.org/runtest.php?k=<my_key>&f=json&url="+encodeURI(test_url),
	dataType: "json",
	...
});
```

But even when encoding the test URL in the result the second parameter always gets lost. The result page shows as tested URL: `https://my-example-url.com/?parameter1=foo`

Is there any parameter restriction when using the api or does it need to be masked somehow? Does anyone have an idea what went wrong?

Thanks in advance!
I am always confused by the page `/getTesters.php?f=html` on our private instance connected to EC2 agents.
In fact, most active agents in EC2 are missing in `/getTesters.php` list. After digging into this bug, I discovered that the reason was the fact that most active agents were marked as 'offline' and getTesters.php doesn't show offline agents.

I understand that **offline** means that "the agent is an excess instance that will eventually go idle and terminate".

Could we change this page to see offline agents and add a column mentioning if the agent will be terminated ?
Script Example with both absolute and rel URL:
```
block	https://sport.virgilio.it/sw.js sw.js
navigate	       https://sport.virgilio.it
```

https://webpagetest.org/result/191015_EC_e890a216a9f2e5e119acf1806769d951/1/details/#waterfall_view_step1

Expected result: sw.js to be blocked

Actual result: sw.js is not blocked and triggered correctly.
![Screenshot 2019-10-15 at 10 36 56](https://user-images.githubusercontent.com/329023/66814984-cb073e00-ef37-11e9-9aef-edc742a9d5da.png)

https://webpagetest.org/result/191011_GX_0c8cb1c62558a1889e0f9bbc5136ffc8/1/details/#step1_request198

Script:
```
setActivityTimeout	30000
setUserAgent	Mozilla/5.0 (Linux; Android 8.1.0; Pixel 2 Build/OPM1.171019.011) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/65.0.3325.146 Mobile Safari/537.36 PTST/191007.161036
navigate	https://mobile.yoox.com/us/women/clothing%20new%20arrivals/shoponline
sleep	30
execAndWait	 document.querySelectorAll('a.itemContainer')[0].click()
```

Request Headers User Agent for https://mobile.yoox.com/scripts/client/yoox/js/dist/sw.js
`user-agent: Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/77.0.3865.120 Safari/537.36
`

Expected User Agent: 
`
user-agent: Mozilla/5.0 (Linux; Android 8.1.0; Pixel 2 Build/OPM1.171019.011) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/65.0.3325.146 Mobile Safari/537.36 PTST/191007.161036
`
Also when adding the standard Chrome Mobile UA Emulation and/or the Discard HTTP Headers option the request would still receive the Default Chrome UA:

https://webpagetest.org/result/191011_N1_706c425c6e3488579c142d171514f112/1/details/#step1_request186

https://webpagetest.org/result/191011_C5_da68801f738d0ea907bef80f155be3bd/1/details/#waterfall_view_step1