Hello,

The README file for this gem says that the supported grape version for 0.34.x is `<= 1.3.0`. However, the gemspec file specifies `< 1.3.0`

Which is accurate?
After updating gem to `0.34.0` or `0.34.1` I got an error when visit `http://localhost:3000/api/swagger_doc`
```
NoMethodError (undefined method `[]' for nil:NilClass):
  
grape (1.2.5) lib/grape/router.rb:163:in `cascade?'
grape (1.2.5) lib/grape/router.rb:95:in `transaction'
grape (1.2.5) lib/grape/router.rb:72:in `identity'
...
```
The code in gem:
```ruby
    def cascade?(response)
      response && response[1][Grape::Http::Headers::X_CASCADE] == 'pass'
    end
```
`response[1]` is `nil`

Which additional information I can provide?
Hello!
After we updated grape to 1.2.5 we can no longer mount grape (inside rails application),
here is minimal failing example:

```
# frozen_string_literal: true

module API
  module V2
    class Root < Grape::API
      get :path do
      end
    end

    class Documentation < Grape::API
      add_swagger_documentation(
        target_class: ::API::V2::Root,
      )
    end
  end
end
```

and here is stack trace:

```
8: from /.../.rvm/gems/ruby-2.6.5/gems/grape-1.2.5/lib/grape/api.rb:40:in `block (2 levels) in override_all_methods!'
7: from /.../.rvm/gems/ruby-2.6.5/gems/grape-1.2.5/lib/grape/api.rb:144:in `add_setup'
6: from /.../.rvm/gems/ruby-2.6.5/gems/grape-1.2.5/lib/grape/api.rb:144:in `each'
5: from /.../.rvm/gems/ruby-2.6.5/gems/grape-1.2.5/lib/grape/api.rb:145:in `block in add_setup'
4: from /.../.rvm/gems/ruby-2.6.5/gems/grape-1.2.5/lib/grape/api.rb:153:in `replay_step_on'
3: from /.../.rvm/gems/ruby-2.6.5/gems/grape-swagger-0.33.0/lib/grape-swagger.rb:129:in `add_swagger_documentation'
2: from /.../.rvm/gems/ruby-2.6.5/gems/grape-swagger-0.33.0/lib/grape-swagger.rb:27:in `combine_routes'
1: from /.../.rvm/gems/ruby-2.6.5/gems/grape-swagger-0.33.0/lib/grape-swagger.rb:27:in `each'
/.../.rvm/gems/ruby-2.6.5/gems/grape-swagger-0.33.0/lib/grape-swagger.rb:41:in `block in combine_routes': undefined method `unshift' for nil:NilClass (NoMethodError)
```
Now we can hide an endpoint using the following syntex.` desc 'Hide this endpoint', hidden: true`
How to do the same in class level. Like the following, so we can hide multiple endpoints.
```
module APIv2
  class Deposits < Grape::API
   hidden: true
    helpers ::APIv2::NamedParams
    desc 'description 1'
    desc 'description 2'
  end
end
```

I have been trying to add example to param but is does not show up in the swagger file.

```
params do
        requires :order_id, type: String,
                 documentation: {
                   type: 'String',
                   desc: 'Your unique order id of this order. (max 255 characters)',
                   example: '1234',
                   param_type: 'body'
                 }
end
```

But the swagger file only shows this:
```
...
"definitions":{ 
   "postOrders":{ 
      "type":"object",
      "properties":{ 
         "order_id":{ 
            "type":"string",
            "description":"Your unique order id of this order. (max 255 characters)"
         }
      }
   }
}
...
```

Any clues, workarounds or fixes?

Is there a way to expose a field and document it's type as being one of several options?

For example if I had a `subscriber` field that could either be a `Person` or `Organization` I'd like to be able to express something like

```ruby
expose :subscriber, documentation: { types: [PersonEntity, OrganizationEntity] }
```
Hi.

I'm running an application which uses grape v1.1.0 and grape-swagger v0.27.3.
In my application I'm using grape's functionality for [handling all 404's](https://github.com/ruby-grape/grape#handling-404).

When I'm trying to access `/swagger_doc` I'm getting an `undefined method '[]' for nil:NilClass` error on `GrapeSwagger::DocMethods::StatusCodes.get[route.request_method.downcase.to_sym]`.

The reason is obviously the missing request method as it is converted to `*` when using `route(:any)`.
Since I don't even need the default 404 handler in my swagger documentation, I tried adding a `hidden: true` setting to the route (both in the description and using the `route_setting` method) but it doesn't seem to work.

Is there any way to get this working?
Thanks in advance.
Hi everyone, I would like to change the response type from JSON to yaml. I try config produces: ['application/yaml'] but seem not affected. I could respond yaml syntax, but the error return still is JSON.
How could I change the error message to YAML?
The model we use for our API is strongly nested, we are working in Vehicle Routing Optimization and define a complex model in a single request. There are multiple high level objects such as
Services (missions to perform within a route) and Points (coordinates or matrix reference)

Within those objects are others objects
an Activity for Services which have a mission to perform or Activities, if we have alternatives available to perform a delivery.

Points have a single object below, which is the location (lat/lon)

The model is correctly validated with grape and works like a charm at this purpose.
But the generation of the documentation through grape-swagger generate some incorrect types

Location should be an hash, but is displayed as an array of hash.
Skills related to Services are displayed as String and should be array of string
Activity is displayed as an array of hash, and should be a single hash.
Activities are correctly displayed as an array of hash.

Please see the related pull request which display the errors.
Has anyone any hints on how I could to solve it or by my side, or by contributing if the bug is confirmed ?
Firstly thanks a lot for the contributions of this awesome gem.

Recently I was trying to upgrade this gem to version `0.33` but got this error while running `bundle update`. My ruby version is `2.3.3`.

```
Bundler could not find compatible versions for gem "ruby":
  In Gemfile:
    ruby

    grape-swagger (= 0.33) was resolved to 0.33.0, which depends on
      ruby (>= 2.4)
```

As I understand, from version `0.33`, grape-swagger will not support ruby below 2.4. Since this is not mentioned in the CHANGELOG, I would like to know whether you actually drop support for ruby below 2.4 or not.

Thank you very much.