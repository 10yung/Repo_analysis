Bumps [handlebars](https://github.com/wycats/handlebars.js) from 4.1.2 to 4.5.3.
<details>
<summary>Changelog</summary>

*Sourced from [handlebars's changelog](https://github.com/wycats/handlebars.js/blob/master/release-notes.md).*

> ## v4.5.3 - November 18th, 2019
> Bugfixes:
> 
> - fix: add "no-prototype-builtins" eslint-rule and fix all occurences - f7f05d7
> - fix: add more properties required to be enumerable - 1988878
> 
> Chores / Build:
> - fix: use !== 0 instead of != 0 - c02b05f
> - add chai and dirty-chai and sinon, for cleaner test-assertions and spies, 
>   deprecate old assertion-methods  - 93e284e, 886ba86, 0817dad, 93516a0
> 
> Security:
> 
> - The properties `__proto__`, `__defineGetter__`, `__defineSetter__` and `__lookupGetter__` 
>   have been added to the list of "properties that must be enumerable".
>   If a property by that name is found and not enumerable on its parent, 
>   it will silently evaluate to `undefined`. This is done in both the compiled template and the "lookup"-helper. 
>   This will prevent new Remote-Code-Execution exploits that have been
>   published recently.
> 
> Compatibility notes: 
> 
> - Due to the security-fixes. The semantics of the templates using
>   `__proto__`, `__defineGetter__`, `__defineSetter__` and `__lookupGetter__` in the respect that those expression now return 
>   `undefined` rather than their actual value from the proto.
> - The semantics have not changed in cases where the properties are  enumerable, as in:
> 
> ```js
> {
>   __proto__: 'some string'
> }
> ```
> 
> - The change may be breaking in that respect, but we still only 
>   increase the patch-version, because the incompatible use-cases
>   are not intended, undocumented and far less important than fixing
>   Remote-Code-Execution exploits on existing systems.
> 
> 
> 
> [Commits](https://github.com/wycats/handlebars.js/compare/v4.5.2...v4.5.3)
> 
> ## v4.5.2 - November 13th, 2019
> # Bugfixes
> 
> - fix: use String(field) in lookup when checking for "constructor" - d541378
> - test: add fluent API for testing Handlebars - c2ac79c
> 
> Compatibility notes:
> - no incompatibility are to be expected
></tr></table> ... (truncated)
</details>
<details>
<summary>Commits</summary>

- [`c819c8b`](https://github.com/wycats/handlebars.js/commit/c819c8b533934d2ac18001d7eb27a3205b00c2f3) v4.5.3
- [`827c9d0`](https://github.com/wycats/handlebars.js/commit/827c9d0747bef7d7f89829779523b6b2dcf3051d) Update release notes
- [`f7f05d7`](https://github.com/wycats/handlebars.js/commit/f7f05d7558e674856686b62a00cde5758f3b7a08) fix: add "no-prototype-builtins" eslint-rule and fix all occurences
- [`1988878`](https://github.com/wycats/handlebars.js/commit/198887808780bbef9dba67a8af68ece091d5baa7) fix: add more properties required to be enumerable
- [`886ba86`](https://github.com/wycats/handlebars.js/commit/886ba86c2f9cc71b7d99b9018fbe2d72a57085cc) test/chore: add chai/expect and sinon to "runtime"-environment
- [`0817dad`](https://github.com/wycats/handlebars.js/commit/0817dad7e72c51d07f7700547d0c69aa79a4976b) test: add sinon as global variable to eslint in the specs
- [`93516a0`](https://github.com/wycats/handlebars.js/commit/93516a0b07026ebd23c84fddf270a0c8b570bc59) test: add sinon.js for spies, deprecate current assertions
- [`93e284e`](https://github.com/wycats/handlebars.js/commit/93e284ed9be1e38c5e6945f15af1ccd689f2ada6) chore: add chai and dirty-chai for better test assertions
- [`c02b05f`](https://github.com/wycats/handlebars.js/commit/c02b05fa819f46bb66c878bebc6e8006408ebd5c) fix: use !== 0 instead of != 0
- [`8de121d`](https://github.com/wycats/handlebars.js/commit/8de121d21c88a6ab877e3a0eec9daaac483f3bf0) v4.5.2
- Additional commits viewable in [compare view](https://github.com/wycats/handlebars.js/compare/v4.1.2...v4.5.3)
</details>
<br />

[![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=handlebars&package-manager=npm_and_yarn&previous-version=4.1.2&new-version=4.5.3)](https://help.github.com/articles/configuring-automated-security-fixes)

Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.

[//]: # (dependabot-automerge-start)
[//]: # (dependabot-automerge-end)

---

<details>
<summary>Dependabot commands and options</summary>
<br />

You can trigger Dependabot actions by commenting on this PR:
- `@dependabot rebase` will rebase this PR
- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it
- `@dependabot merge` will merge this PR after your CI passes on it
- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it
- `@dependabot cancel merge` will cancel a previously requested merge and block automerging
- `@dependabot reopen` will reopen this PR if it is closed
- `@dependabot ignore this [patch|minor|major] version` will close this PR and stop Dependabot creating any more for this minor/major version (unless you reopen the PR or upgrade to it yourself)
- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)
- `@dependabot use these labels` will set the current labels as the default for future PRs for this repo and language
- `@dependabot use these reviewers` will set the current reviewers as the default for future PRs for this repo and language
- `@dependabot use these assignees` will set the current assignees as the default for future PRs for this repo and language
- `@dependabot use this milestone` will set the current milestone as the default for future PRs for this repo and language

You can disable automated security fix PRs for this repo from the [Security Alerts page](https://github.com/karma-runner/karma-coverage/network/alerts).

</details>
I just wanted to notify you that I'm in the process of a semver-major release of the istanbul libraries.  They are currently published to npm under the `next` tag but will likely be promoted to `latest` soon.  The breaking changes include:
* dropping of node.js 6 (8.9.0 is the oldest officially support version)
* some API changes (some functions are now async, changes to reporting)

I don't have time right now to create a PR for this but if you do I can try giving pointers if you run into issues (feel free to tag me in any PR).
 
version:- 
   "karma-coverage": "^2.0.1"

settings:-
  coverageReporter: {
            type : 'html',
            dir : 'coverage/'
        }

path for source files:- 
        '../Web/Js/**/*.js': 'coverage',

When running the tests, the coverage is generated:-

But :
This is my coverage folder structure
```
[Coverage]
  create-account-management.js.html
   index.html
  [Account]
        --->[Components]
                  create-account.js.html
                  index.html

```
The Coverage folder index.html does not have any sub folder java script source links to view coverage.. In my case create-account.js.html cannot be reached from the outer index.html . The outer index.html has only   create-account-management.js.html and not the inner folder javascript source files.

I was expecting the index,html to contain create-account.js.html and create-account-management.js.html links





Hi I am having a strange issue when generating code coverage with karma-coverage. My source files are written in typescript where as the test files are written in javascript with qunit being the test framework. When I run the karma start, all my tests are getting passed and the code coverage report being generated. But the istanbul report and the lcov.info which I am using sonarqube to view the code coverage are showing different reports.

For example, in html report by istanbul even though the source file is in ts, the code coverage shown in transpiled js file with all of the code is covered except the __awaiter and __generator functions which will be generated when we use Promises in typescript, since we are using the target as **es-5**. 

The Istanbul report is showing as 65% lines coverage, but in Sonar the coverage is showing as 17%, please note that with the below coverageReporter configuration, it generates the lcov.info report which I am using it to publish it to sonar. 

The Sonar dashboard is displaying the ts file as-is not in the transpiled/javascript code.

Here is the karma-config. 

```
preprocessors: {
      'src/js/**/*.ts': ['typescript'],
      'src/js/**/*.scss': ['scss'],
    },

    typescriptPreprocessor: {
      // options passed to the typescript compiler
      options: {
        sourceMap: false, // (optional) Generates corresponding .map file.
        target: 'ES5', // (optional) Specify ECMAScript target version: 'ES3' (default), or 'ES5'
        module: 'amd', // (optional) Specify module code generation: 'commonjs' or 'amd'
        noImplicitAny: true, // (optional) Warn on expressions and declarations with an implied 'any' type.
        noResolve: true, // (optional) Skip resolution and preprocessing.
        removeComments: true, // (optional) Do not emit comments to output.
        concatenateOutput: false, // (optional) Concatenate and emit output to single file.
        // By default true if module option is omited, otherwise false.
      },

      // transforming the filenames
      transformPath: function(_path) {
        return _path.replace(/\.ts$/, '.js');
      },
    },

    scssPreprocessor: {
      options: {
        sourceMap: true,
      },
    },

    reporters: ['progress', 'coverage'],

    coverageReporter: {
      dir: 'reports/unit-tests/coverage',
      subdir: 'report',
      instrumenterOptions: {
        istanbul: { noCompact: true },
      },
      type: 'lcov',
      watermarks: {
        statements: [50, 90],
        branches: [1, 2],
        functions: [1, 2],
        lines: [1, 2],
      },
      check: {
        global: {
          statements: 60,
          lines: 65,
          functions: 60,
          branches: 45,
        },
      },
    },
```

sonar-project.properties

```
sonar.host.url=http://localhost:9000
sonar.projectKey=hello
sonar.projectName=hello
sonar.projectVersion=0.0.1

sonar.modules=hola

hola.sonar.projectBaseDir=hola/
hola.sonar.sources=src/
hola.sonar.exclusions=src/js/**/@types/*,src/js/**/**/resources/**/*
hola.sonar.tests=tests/
hola.sonar.language=ts
hola.sonar.typescript.lcov.reportPaths=reports/unit-tests/lcov.info
```
My configuration is as follows (`karma.conf.js`):

```javascript
const [webpackConfig] = require("./webpack.config.js");
webpackConfig.entry = function(){return {}};

const { BROWSER = "chrome" } = process.env;
const browsers = [];
if (BROWSER === "chrome") {
    browsers.push("ChromeNoSecurity");
} else if (BROWSER === "firefox") {
    browsers.push("FirefoxHeadless");
}

module.exports = function(config) {
    config.set({
        // base path that will be used to resolve all patterns (eg. files, exclude)
        basePath: "",

        // frameworks to use
        // available frameworks: https://npmjs.org/browse/keyword/karma-adapter
        frameworks: ["mocha", "chai-as-promised", "chai", "sinon"],

        // list of files / patterns to load in the browser
        files: [
            "source/**/*.js",
            "test/index.js"
        ],

        // list of files / patterns to exclude
        exclude: [],

        // preprocess matching files before serving them to the browser
        // available preprocessors: https://npmjs.org/browse/keyword/karma-preprocessor
        preprocessors: {
            "source/**/*.js": ["webpack", "coverage"],
            "test/index.js": ["webpack"],
            "test/**/*.spec.js": ["webpack"]
        },

        webpack: webpackConfig,

        webpackMiddleware: {
            noInfo: false
        },

        // test results reporter to use
        // possible values: "dots", "progress"
        // available reporters: https://npmjs.org/browse/keyword/karma-reporter
        reporters: ["spec"],

        coverageReporter: {
            type: "text-summary",
            check: {
                global: {
                    statements: 55,
                    branches: 19,
                    functions: 60,
                    lines: 60
                }
            },
            watermarks: {
                statements: [ 50, 85 ],
                functions: [ 50, 85 ],
                branches: [ 50, 85 ],
                lines: [ 50, 85 ]
            },
            instrumenterOptions: {
                istanbul: { noCompact: true }
            }
        },

        // web server port
        port: 9876,

        // enable / disable colors in the output (reporters and logs)
        colors: true,

        // level of logging
        // possible values: config.LOG_DISABLE || config.LOG_ERROR || config.LOG_WARN || config.LOG_INFO || config.LOG_DEBUG
        logLevel: config.LOG_INFO,

        // enable / disable watching file and executing tests whenever any file changes
        autoWatch: true,

        customLaunchers: {
            ChromeNoSecurity: {
                base: "Chrome",
                flags: ["--disable-web-security", "--headless", "--remote-debugging-port=9222"]
            },
            FirefoxHeadless: {
                base: "Firefox",
                flags: ["-headless"]
            }
        },

        // start these browsers
        // available browser launchers: https://npmjs.org/browse/keyword/karma-launcher
        browsers,

        // Continuous Integration mode
        // if true, Karma captures browsers, runs the tests and exits
        singleRun: false,

        // Concurrency level
        // how many browser should be started simultaneous
        concurrency: Infinity
    });
}
```

And this works fine, albeit without coverage. Changing `reporters: ["spec"]` to `reporters: ["spec", "coverage"]` causes karma to go in to running forever and I have to kill the process after some minutes of strong CPU and memory usage.

karma.conf.js
```
...
files: [
      { pattern: 'js/add.js', type: 'module' },
      { pattern: 'test/add.spec.js', type: 'module' }
 ],
preprocessors: {
      './js/add.js': ['coverage']
},
...
```
add.js
```
let add = n => ++n;
export { add };
```
add.spec.js
```
import { add } from '../js/add.js';
describe('test', function() {
  it('add', function() {
    expect(add(2)).toBe(3);
  });
});
```
文件以<script type="module">引用，
使用了import，报错不知到怎么处理，
更换插件就好了
```
preprocessors: {
      './js/add.js': ['karma-coverage-istanbul-instrumenter']
    },
    coverageIstanbulInstrumenter: {
      esModules: true
    },
```

There's a feature I'd like to have, that I think ends up being in this library's wheelhouse:

I want to be able to configure a single run of karma+jasmine to only count coverage from the spec file that tests it (aka "strict coverage", or "no splash coverage").  I'd also like the option to restrict it to just the same folder (so each area of the app, say models and controllers for example, ignores splash coverage from tests for other areas).

I think this is potentially possible: we know when each spec starts and completes, and we can access the raw coverage data, so we should be able to clear out all data at the beginning of each spec, and then save (merge) at the end of the spec.

Ideally it would support a user defined `covers(file, fullSpecName)`, so the user could control what the relevant tests are for each covered file.

I'd be happy to help contribute to this feature, but want to get a gut check on any concerns or pitfalls there might be (or if there's a more appropriate place to introduce this functionality).

EDIT: I specified "a single run" just to rule out approaches like launching karma once for each spec file and merging later; that works but the overhead is very high for large projects.
I am trying to add coverage to my project, I keep getting this error every time I run `npm run karma`

![screenshot 2019-02-20 at 3 52 03 am](https://user-images.githubusercontent.com/22097366/53052797-a8667780-34c5-11e9-89c1-a2b18b0a8e50.png)

snippet of `algorithms.js`

```
/**
Currently used only for adding 'assert' class to algorithm lists  
*/

import css from "text!../../assets/algorithms.css";

export const name = "core/algorithms";

export async function run() {
  const elements = Array.from(document.querySelectorAll("ol.algorithm li"));
  elements
    .filter(li => li.innerText.trim().startsWith("Assert: "))
    .forEach(li => li.classList.add("assert"));
  if (document.querySelector(".assert")) {
    const style = document.createElement("style");
    style.textContent = css;
    document.head.appendChild(style);
  }
}
```

`karma.conf.js`

```
// Karma configuration
// Generated on Fri Feb 26 2016 13:09:51 GMT+1100 (AEDT)
/*globals module, require, process*/
"use strict";
module.exports = function(config) {
  const options = {
    // base path that will be used to resolve all patterns (eg. files, exclude)
    basePath: "./",

    // frameworks to use
    // available frameworks: https://npmjs.org/browse/keyword/karma-adapter
    frameworks: ["jasmine", "requirejs", "detectBrowsers"],

    // configuration
    detectBrowsers: {
      enabled: !config.browsers.length,
      usePhantomJS: false,
      postDetection(browsers) {
        return (
          browsers
            // Remove IE
            .filter(browser => browser !== "IE")
        );
      },
    },

    // list of files / patterns to load in the browser
    files: [
      "js/deps/jquery.js",
      {
        pattern: "assets/**/*.*",
        included: false,
        served: true,
      },
      {
        pattern: "tests/support-files/**/*",
        included: false,
        served: true,
      },
      {
        pattern: "builds/**/*.*",
        included: false,
        served: true,
      },
      {
        pattern: "js/deps/marked.js",
        included: false,
        served: true,
      },
      {
        pattern: "js/**/*.*",
        included: false,
        served: true,
      },
      {
        pattern: "tests/**/*-spec.js",
        included: false,
        served: true,
      },
      {
        pattern: "tests/data/**/*",
        included: false,
        served: true,
      },
      {
        pattern: "tests/*.html",
        included: false,
        served: true,
      },
      {
        pattern: "tests/**/*.html",
        included: false,
        served: true,
      },
      {
        pattern: "worker/*.js",
        included: false,
        served: true,
      },
      {
        pattern: "src/**/*.js",
        included: false,
      },
      "tests/spec/SpecHelper.js",
      "tests/test-main.js",
    ],

    // list of files to exclude
    exclude: ["**/*.swp", "*.swp", ".DS_Store"],

    proxies: {
      "/about-blank.html": "/base/tests/about-blank.html",
      "/assets/": "/base/assets/",
      "/js/": "/base/js/",
      "/builds/": "/base/builds/",
      "/tests/": "/base/tests/",
      "/spec/": "/base/tests/spec/",
      "/deps/": "/base/js/deps/",
      "/js/deps/": "/base/js/deps/",
      "/base/deps/": "/base/js/deps/",
      "/worker/respec-worker.js": "/base/worker/respec-worker.js",
      "/support-files/hljs-testlang.js":
        "/base/tests/support-files/hljs-testlang.js",
    },

    // preprocess matching files before serving them to the browser
    // available preprocessors: https://npmjs.org/browse/keyword/karma-preprocessor
    preprocessors: {
      // source files, that you wanna generate coverage for
      // do not include tests or libraries
      // (these files will be instrumented by Istanbul)
      "src/**/*.js": ["coverage"],
    },

    // test results reporter to use
    // possible values: "dots", "progress"
    // available reporters: https://npmjs.org/browse/keyword/karma-reporter
    reporters: ["mocha", "progress", "coverage", "coveralls"],

    // web server port
    port: config.port || 9876,

    // enable / disable colors in the output (reporters and logs)
    colors: true,

    // level of logging
    // possible values: config.LOG_DISABLE || config.LOG_ERROR || config.LOG_WARN || config.LOG_INFO || config.LOG_DEBUG
    logLevel: config.LOG_INFO,

    // enable / disable watching file and executing tests whenever any file changes
    autoWatch: true,

    // See "detectBrowsers"
    //browsers: ["Chrome", "Safari", "Firefox"],

    // Continuous Integration mode
    // if true, Karma captures browsers, runs the tests and exits
    singleRun: false,

    // Concurrency level
    // how many browser should be started simultaneous
    concurrency: 1,

    browserNoActivityTimeout: 100000,

    client: {
      args: ["--grep", config.grep || ""],
    },

    coverageReporter: {
      includeAllSources: true,
      type: "lcov", // lcov or lcovonly are required for generating lcov.info files needed for coveralls.
      dir: "coverage/",
    },
  };
  if (process.env.TRAVIS) {
    process.env.CHROME_BIN = require("puppeteer").executablePath();
    options.detectBrowsers.enabled = false;
    options.autoWatch = false;
    options.singleRun = true;
    options.concurrency = 1;
    options.reporters = ["mocha", "progress", "coverage", "coveralls"];
    options.browsers = ["ChromeHeadless"];
  }
  config.set(options);
};
```
  
Here is the report of the npm audit

Run  npm update handlebars --depth 3  to resolve 1 vulnerability
┌───────────────┬──────────────────────────────────────────────────────────────┐
│ High          │ Prototype Pollusion                                          │
├───────────────┼──────────────────────────────────────────────────────────────┤
│ Package       │ handlebars                                                   │
├───────────────┼──────────────────────────────────────────────────────────────┤
│ Dependency of │ karma-coverage [dev]                                         │
├───────────────┼──────────────────────────────────────────────────────────────┤
│ Path          │ karma-coverage > istanbul > handlebars                       │
├───────────────┼──────────────────────────────────────────────────────────────┤
│ More info     │ https://nodesecurity.io/advisories/755