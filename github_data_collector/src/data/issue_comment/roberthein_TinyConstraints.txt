The README uses the method `edgesToSuperView` which is the incorrect letter casing for the method name. The correct method name is `edgesToSuperview`
Added installation instructions for Swift Package Manager to the README.
Hello ðŸ‘‹

In this PR, I create extensions around `NSLayoutConstraints`, `NSLayoutXAxisAnchor`, `NSLayoutYAxisAnchor` to replace the redundant `ConstraintRelation` switches  implemented in `TinyConstraints.swift`.  
CSS has the ability to allow proportional margin and padding:
https://webplatform.github.io/docs/guides/the_css_layout_model/#Proportional-margins-and-padding-in-the-W3C-box-model

I was wondering if it is possible to implement a similar concept with edges. For example, if I wanted my top margin of a subview to its superview to be 20% of the superview height (i.e. subview.top = superview.top + 0.2*superview.height), how would I accomplish that?

Currently, using the `multiplier`parameters in `width()`/`height()` and `centerX()`/`centerY()` works, but there has to be support for the alternate form.
Hi, I have created a new video tutorial series for version 4.0.0
[https://www.youtube.com/watch?v=ucbaEkEJKrc&list=PL_csAAO9PQ8ZHY2VzOi7LJ80CtfAgCgHP](https://www.youtube.com/watch?v=ucbaEkEJKrc&list=PL_csAAO9PQ8ZHY2VzOi7LJ80CtfAgCgHP)
It goes through ALL the features of TinyConstraints :)
Would appreciate it if you added it to the README.
Feel free to use this image
![Master TinyConstraints | AutoLayout for Humans in Swift 5 Thumbnail](https://user-images.githubusercontent.com/2488011/58902529-f10c0e80-870b-11e9-9c8d-8c8fc68db7af.png)



This UITableViewCellSubclass doesn't work properly, for some reason it just stretches the `avatarContainer` to cell's edges.
```
class BuggedCell: UITableViewCell {
    override init(style: UITableViewCell.CellStyle, reuseIdentifier: String?) {
        super.init(style: style, reuseIdentifier: reuseIdentifier)
        let guide = contentView.layoutMarginsGuide        
        let avatarContainer = UIView()
        contentView.addSubview(avatarContainer)
        avatarContainer.edges(to: guide, excluding: .trailing)
        avatarContainer.backgroundColor = .red
        avatarContainer.size(CGSize(width: 100, height: 100), priority: UILayoutPriority(999))
    }
    
    required init?(coder aDecoder: NSCoder) {
        fatalError("init(coder:) has not been implemented")
    }
}
```

But this subclass does everything correctly
```
class BugFreeCell: UITableViewCell {
    override init(style: UITableViewCell.CellStyle, reuseIdentifier: String?) {
        super.init(style: style, reuseIdentifier: reuseIdentifier)
        let guide = contentView.layoutMarginsGuide        
        let avatarContainer = UIView()
        contentView.addSubview(avatarContainer)
        avatarContainer.leading(to: guide)
        avatarContainer.top(to: guide)
        avatarContainer.bottom(to: guide)
        avatarContainer.backgroundColor = .red
        avatarContainer.size(CGSize(width: 100, height: 100), priority: UILayoutPriority(999))
    }
    
    required init?(coder aDecoder: NSCoder) {
        fatalError("init(coder:) has not been implemented")
    }
}
```


The subclasses should display identical results, but they don't ðŸ˜«. 
The documentation is not covering all scenarios. It would be great if you can add more details with example codes
Why is offset value being manually inverted in `trailingToSuperView` and `leadingToSuperview` functions basing on `effectiveUserInterfaceLayoutDirection`? I believe trailing/leading constraints are made precisely so that developers don't have to handle layout direction manually.