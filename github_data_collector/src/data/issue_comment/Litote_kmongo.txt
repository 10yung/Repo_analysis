I am interacting my kotlin program with a collection that has an `id` field of type `UUID(subtype4)`, instead of type `LUUID`(subtype3), which is represented as `java.util.UUID` in the Kotlin program.

The problem is that when I retrieve the object back from the db, I get a `org.bson.types.Binary` Object. It makes sense but I want it to be a 'java.util.UUID` object in the program. 

Is it possible to overwrite the existing object mapper to support such transformation?

```
I have these two helper functions to transform from/to UUID and Binary object
        fun toStandardBinaryUUID(uuid: UUID): Binary {...}
        fun fromStandardBinaryUUID(binary: Binary): UUID {...}
```

Thanks

Hi,
I've created a User model with a list of accounts List<Account>
Account is a sealed class with 2 subclasses InternalAccount and GoogleAccount. The 3 classes are marked with annotation @BsonDiscriminator. InternalAccount and GoogleAccount have specific values for BsonDiscriminator.

I start the application, save a user with different accounts and close the application. When I restart the application and do a find() on the user collection, the application crashes. The Mongo Java driver can't determine how to cast the list of accounts because after restarting the application it has never seen InternalAccount or GoogleAccount classes and so it has not registered them in the KMongoPojoCodecProvider (which uses automatic(true)).

If I create a KMongoClient and do the following just after: 
mongoClient.mongoClientOptions.codecRegistry.get(InternalAccount::class.java)
mongoClient.mongoClientOptions.codecRegistry.get(GoogleAccount::class.java)
Then the application works because now both classes are registered with the codec provider.

The best would probably to have a @BsonSubTypes annotation on Account sealed class with an array of classes as parameter and use reflection to register the classes with the codec provider when Account class is registered.

Let me know what you think about it, I could work on this and create a pull request.
Best,
JB



This might be completely out of left field, but is there any way to use KMongo to connect to MongoDB via stitch API? There is a JavaScript stitch API and a Java API for Android but nothing for pure Kotlin or Java desktop apps.

The reason behind wanting this is that stitch allows rules for which data to serve in a collection based on specific user data like a owner_id for example. It might be possible with a Kotlin wrapped over the stitch JavaScript API but I thought I might ask if its in the plan for KMongo first.
I am getting `com.fasterxml.jackson.databind.JsonMappingException: Cannot deserialize Class MainKt$main$PointTest (of type local/anonymous) as a Bean` when using a Mongo Point class with the Jackson client. 
Here is some code to reproduce the error 
```
import com.fasterxml.jackson.databind.JsonMappingException
import com.mongodb.client.model.geojson.Point
import com.mongodb.client.model.geojson.Position
import org.litote.kmongo.KMongo
import org.litote.kmongo.getCollection

fun main() {
    data class PointTest(val location: Point)

    val client = KMongo.createClient() //get com.mongodb.MongoClient new instance
    val database = client.getDatabase("test") //normal java driver usage
    val col = database.getCollection<PointTest>() //KMongo extension method
    col.insertOne(PointTest(Point(Position(20.0, 20.0))))

    try {
        col.find().toList()
    } catch (e: JsonMappingException) {
        e.printStackTrace()
    }

}
``` 
Its really great that you've extracted Kmongo-Id so that it could be used in common modules.
I tried to adapt it for Kotlin multi-platform but it can't be done because multi-platform is only supported on Gradle.

Please consider migrating to gradle and adding support for multi-platform.

I was wondering if there are any plans to add Gson as an object mapper? 

The Jackson option is great, but it's kind of annoying to integrate KMongo with a codebase that already heavily relies on Gson (duplication of effort for serialization, two serde libs, et cetera).