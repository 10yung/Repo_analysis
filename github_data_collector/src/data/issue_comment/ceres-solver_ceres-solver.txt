When building a shared library (dll) version of ceres from the latest code off github using VS2019 (Version 16.4.3) and SuiteSparse v5.4.0 on Windows 10, I get a whole series of the following errors. 

```
c_api.cc
C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\memory(1764,1): error C2027: use of undefined type 'ceres::internal::ProblemImpl'

 static_assert(0 < sizeof(_Ty), "can't delete an incomplete type");                           ^
detected during:
instantiation of "void std::default_delete<_Ty>::operator()(_Ty *) const [with _Ty=ceres::internal::ProblemImpl]" at line 1908
 instantiation of "void std::unique_ptr<_Ty, _Dx>::reset(std::unique_ptr<_Ty, _Dx>::pointer) [with _Ty=ceres::internal::ProblemImpl, _Dx=std::default_delete<ceres::internal::ProblemImpl>]" at line 1860
 instantiation of "std::unique_ptr<_Ty, _Dx> &std::unique_ptr<_Ty, _Dx>::operator=(std::unique_ptr<_Ty, _Dx> &&) [with _Ty=ceres::internal::ProblemImpl, _Dx=std::default_delete<ceres::internal::ProblemImpl>]" at line 528 of "C:\sdks\ceres-solver\include\ceres/problem.h"
```

```
ceres-solver\include\ceres/problem.h(528): message : see reference to class template instantiation 'std::unique_ptr<ceres::internal::ProblemImpl,std::default_delete<ceres::internal::ProblemImpl>>' being compiled
1>C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\memory(1764,25): error C2338: can't delete an incomplete type
1>C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\include\memory(1765,1): warning C4150: deletion of pointer to incomplete type 'ceres::internal::ProblemImpl'; no destructor called
```

I get the same issue if I use the Intel Compiler (v19.1) as well.

However, attempting to build the static version of ceres works correctly.
https://github.com/ceres-solver/ceres-solver/blob/8def196166ddd56be2e8e547d9df1c73d0ad3391/internal/ceres/invert_psd_matrix.h#L63

Just looking at this code and it checks whether to use inverse based on the matrix size at compile time. 
Would this miss the case when the matrix is small but is of size Eigen::Dynamic (kSize=-1)?
If that's the case then this line should be
```c++
if (size > 0 && size < 5) return m.inverse()
```
If we push the minimum required version of C++ to C++17 we could replace the msvc underscored and not underscored `_j0` bessel function usages in `jet.h`

https://github.com/ceres-solver/ceres-solver/blob/edb8322bdabef336db290be1cc557145b6d4bf80/include/ceres/jet.h#L592-L618

C++ reference for the new mathematical special functions like `cyl_bessel_j`
https://en.cppreference.com/w/cpp/numeric/special_functions/cyl_bessel_j

```cpp
// Bessel functions of the first kind with integer order equal to 0, 1, n.
inline double BesselJ0(double x) {
  return cyl_bessel_j(0.0, x);
}
inline double BesselJ1(double x) {
  return cyl_bessel_j(1.0, x);
}
inline double BesselJn(int n, double x) {
  return cyl_bessel_j(static_cast<double>(n), x);
}
```
hello, 
I am learning the ceres libraries, I want to test "/path/to/bin/pose_graph_2d /path/to/dataset/dataset.g2o", do you provide the test dataset yet? and when I compile the pose_graph_2d, after I add the cmake_minimum_version, eigen include dir, it finally has the following error occurs: 
CMakeFiles/read_test.dir/read_test.o: In function `bool ceres::examples::ReadG2oFile<ceres::examples::Pose2d, ceres::examples::Constraint2d, std::allocator<std::pair<int const, ceres::examples::Pose2d> >, std::allocator<ceres::examples::Constraint2d> >(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::map<int, ceres::examples::Pose2d, std::less<int>, std::allocator<std::pair<int const, ceres::examples::Pose2d> > >*, std::vector<ceres::examples::Constraint2d, std::allocator<ceres::examples::Constraint2d> >*)':
read_test.cpp:(.text._ZN5ceres8examples11ReadG2oFileINS0_6Pose2dENS0_12Constraint2dESaISt4pairIKiS2_EESaIS3_EEEbRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPSt3mapIiT_St4lessIiET1_EPSt6vectorIT0_T2_E[_ZN5ceres8examples11ReadG2oFileINS0_6Pose2dENS0_12Constraint2dESaISt4pairIKiS2_EESaIS3_EEEbRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPSt3mapIiT_St4lessIiET1_EPSt6vectorIT0_T2_E]+0x67): undefined reference to `google::LogMessageFatal::LogMessageFatal(char const*, int)'
read_test.cpp:(.text._ZN5ceres8examples11ReadG2oFileINS0_6Pose2dENS0_12Constraint2dESaISt4pairIKiS2_EESaIS3_EEEbRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPSt3mapIiT_St4lessIiET1_EPSt6vectorIT0_T2_E[_ZN5ceres8examples11ReadG2oFileINS0_6Pose2dENS0_12Constraint2dESaISt4pairIKiS2_EESaIS3_EEEbRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPSt3mapIiT_St4lessIiET1_EPSt6vectorIT0_T2_E]+0x7b): undefined reference to `google::LogMessage::stream()'

do you know what happen, how to solve this problem. Thank you.


As of this commit (https://github.com/ceres-solver/ceres-solver/commit/33dd469a53383743af00a711a6a85e64c35177e8), Eigen fails to be found by cmake on Ubuntu 16.04.

When running cmake, the following error can be seen:
```
CMake Error at /home/kevin/src/ceres-solver/CMakeLists.txt:243 (find_package):
  Could not find a configuration file for package "Eigen3" that is compatible
  with requested version "3.3".

  The following configuration files were considered but not accepted:

    /usr/lib/cmake/eigen3/Eigen3Config.cmake, version: unknown
```

Eigen is apt-installed. Reported version is:
```
libeigen3-dev/xenial,xenial,now 3.3~beta1-2 all [installed]
```

I tried removing the requirement for 3.3 and got other errors. I.E. changing line 243 in CMakeLists.txt from:
```
find_package(Eigen3 3.3 CONFIG REQUIRED
```
to
```
find_package(Eigen3 CONFIG REQUIRED
```

This gives me the following error:
```
  Target "ceres" links to target "Eigen3::Eigen" but the target was not
  found.  Perhaps a find_package() call is missing for an IMPORTED target, or
  an ALIAS target is missing?
```
How would you structure the rst documentation of the autodiff codegen system?


We can integrate it into the current structure
- On Derivatives > Generated Automatic Derivatives
- Modeling Non-linear Least Squares > CodegenCostFunction
- Tutorial > Non-linear Least Squares > Code generation example

or create a new parent node
- Code Generation > Overview
- Code Generation > User Interface
- Code Generation > Technical Description
- Code Generation > Example

I probably prefer the second version, similar to how we have separated the codegen code into a new sub directory.
Using the new expression system it would be possible to generate backward autodiff code (=back propagation). I'm currently wondering, if it is worth implementing that, because intuitively it should increase performance if  `num_parameters >> num_residuals`.

What is your opinion on generating backward autodiff code? Should we implement it after the codegen stuff is working?
It would be possible to remove `FindGlog.cmake` as glog provides a cmake config file since `v0.4.0`. Unfortunately Distributions don't use the cmake configuration, rather stick to the autoconfig toolchain.

Open Bugs I've found
- [ ] [Arch Linux Tasks](https://bugs.archlinux.org/task/55185)
- [ ] [Ubuntu Launchpad Bug](https://bugs.launchpad.net/ubuntu/+source/google-glog/+bug/1815110)

When I used clang-cl frontend and msvc backend to build ceres, a cmake fatal error occured

```
Invalid CMAKE_CXX_COMPILER_VERSION: 8.0.1.  Ceres requires at least MSVC 2013 Update 4+
```

and the reason is

```
if (MSVC AND CMAKE_CXX_COMPILER_VERSION VERSION_LESS 12.0)
  message(FATAL_ERROR "Invalid CMAKE_CXX_COMPILER_VERSION: "
    "${CMAKE_CXX_COMPILER_VERSION}. Ceres requires at least MSVC 2013 Update 4+")
endif()
```

Even if I use clang-cl as frontend, `MSVC` will be defined.

The right way to deal with this kind of situation is to replace `MSVC` to `CMAKE_CXX_COMPILER_ID MATCHES MSVC`, so the final version will be

```
if (CMAKE_CXX_COMPILER_ID MATCHES MSVC AND CMAKE_CXX_COMPILER_VERSION VERSION_LESS 12.0)
  message(FATAL_ERROR "Invalid CMAKE_CXX_COMPILER_VERSION: "
    "${CMAKE_CXX_COMPILER_VERSION}. Ceres requires at least MSVC 2013 Update 4+")
endif()
```
Thanks for the nice SW,

I am having a weird segmentation fault issue when Solve() is called in my custom function.
However, the same pieces of code runs perfectly OK when the code is written as an independent cpp and compiled to an executable file.

For example, Example (1) below runs OK.
However, Example (2) crashes with a segmentation fault message when ceres::Solve(options, &problem, &summary) line is called. The only difference is that Example (2) is called from somewhere in my SLAM system.
I use Ubuntu 16.04 + ROS Kinetic + CeresSolver 1.14.0

Could you please help me to resolve this issue ?
Please let me know if more information is needed.

Best, 


#########################################################
#      Example (1)           main.cpp below runs ok
#########################################################

int main(int argc, char** argv )
{
	ceres::Problem problem;
	ceres::LossFunction* loss_function = new ceres::HuberLoss(2.0) ;

	ifstream ceres_data ;
	ceres_data.open("data.txt");

	double campose[6] = {0,};
	double xn, yn, Xw, Yw, Zw;
	std::string line;
	while (std::getline(ceres_data, line))
	{
	    std::istringstream iss(line);
	    if (!(iss >> xn >> yn >> Xw >> Yw >> Zw )) { break; } 

		ceres::CostFunction* cost_function =
				imgProj_Rt::Create(xn, yn, Xw, Yw, Zw);
		problem.AddResidualBlock(cost_function,
								loss_function, 
								&campose[0] );
	}

    // solve problem
	ceres::Solver::Options options;
	options.linear_solver_type = ceres::DENSE_SCHUR;
	ceres::Solver::Summary summary;

cout << "problem:" << problem.NumParameterBlocks() <<  "\n"
				   << problem.NumParameters() << "\n"
				   << problem.NumResidualBlocks() << "\n"
				   << problem.NumResiduals() << endl;
	ceres::Solve(options, &problem, &summary) ;

	std::cout << summary.FullReport() << "\n";
	return 1;
}


############################################################################
#     Example (2)     
#     The same code wrapped with a subfunction below crashes  w/ a segmentation fault message on Sove()
############################################################################

int MyCeresFunc()
{
	ceres::Problem problem;
	ceres::LossFunction* loss_function = new ceres::HuberLoss(2.0) ;

	ifstream ceres_data ;
	ceres_data.open("data.txt");

	double campose[6] = {0,};
	double xn, yn, Xw, Yw, Zw;
	std::string line;
	while (std::getline(ceres_data, line))
	{
	    std::istringstream iss(line);
	    if (!(iss >> xn >> yn >> Xw >> Yw >> Zw )) { break; }

		ceres::CostFunction* cost_function =
				imgProj_Rt::Create(xn, yn, Xw, Yw, Zw);
		problem.AddResidualBlock(cost_function,
								loss_function, 
								&campose[0] );
	}

    // solve problem
	ceres::Solver::Options options;
	options.linear_solver_type = ceres::DENSE_SCHUR;
	ceres::Solver::Summary summary;

cout << "problem:" << problem.NumParameterBlocks() <<  "\n"
				   << problem.NumParameters() << "\n"
				   << problem.NumResidualBlocks() << "\n"
				   << problem.NumResiduals() << endl;
	ceres::Solve(options, &problem, &summary) ;

	std::cout << summary.FullReport() << "\n";
	return 1;
}
