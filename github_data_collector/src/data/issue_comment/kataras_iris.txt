# We'd love to see more contributions

Read how you can [contribute to the project](https://github.com/kataras/iris/blob/master/CONTRIBUTING.md).

> Please attach an [issue](https://github.com/kataras/iris/issues) link which your PR solves otherwise your work may be rejected.
I didn't see the related introduction in the document, only found this part of examples: https://github.com/kataras/iris/blob/master/_examples/routing/custom-context , but it's not what I want, so how to set a custom context in MVC?

**Is your feature request related to a problem? Please describe.**
IRIS only support format response when struct/class implement with Result.Dispatch(..)
Must be inserted base class for all struct/class types. that's bad idea.
Cannot support inserted on global middleware code.

**Describe the solution you'd like**
```
app.PartyFunc("/apixxxx", func(p router.Party) {
		p.Use(func(c context.Context) {
                        c.OnResultInject(func( old_result_struct []reflect.Value  / interface{}  )  (result XXXX) {  
                             // may be inject before hero.DispatchFuncResult / DispatchCommon ?
                            // todo custom something.
                            // example: wrap new result struct
                             result = NewResultStruct{ xxxx , data: json(old_result_struct), .... }
                             result.sign = server_response_sign(result.data, ...)
                        })
			c.Next()
		})


               p.Handle("/a", hero.Handler( func(...) structA {...}  ))
               p.Handle("/b", hero.Handler( func(...) structB {...}  ))
               p.Handle("/c", hero.Handler( func(...) string {...}   )) // good support
                // structA/B/string support not implement with Result.Dispatch
               mvc.New(...).Handle(&XXXController) // wrap all http method when without implement Result.Dispatch()
               // OR in mvc.AfterActivation() { ... c.OnResultInject(...){....}  }
})

```

**Describe alternatives you've considered**
```
// p router.Party
p.DoneWithResult(func()...{})
// ennn...?
```

Dear developers. I write my custom specific web server for work with specific archive files, compression, encryption, etc. And i want to publish my web server under BSD-2-Clause license.

In my project i use Iris and Iris logger as basement.
I'm not going to use the name of your project to promote my project.

Can I publish my project under the BSD-2-Clause license?

Thanks.
Hey again Our developers are developed by Aiarron of the frontend developer, Desmond and ZRothschild and Yusn of the backend developer. We have jointly developed the Go Web Iris Chinese community using the go Iris framework.

And for https://docs.iris-go.com/ this document is translated from English to Chinese, and we will also translate other documents and promote it in the go development community in China, so that more people It's easier to learn Iris, and we hope that more people will use it than it is to be good with Iris.
We are considering using Iris for a product in my company and I would like to know if it is ready for production and to scale in a cluser of dozens of servers.
Dear fellow gophers, Iris users and lurkers, we are all lucky to be here and use this wonderful go framework called Iris.

 I am glad to see that Iris has grown into a mature software that is used and trusted by many of us in our projects, from small individual developers to large teams.

There have been a lot of good changes lately that made Iris more powerful than ever before (and this is just the start), easy to use, but in the same time and with very good performance.

But in my opinion the most important thing what makes Iris truly different from other frameworks, is its documentation, which is very important for the our user base, especially for newcomers. And Iris docs are doing a tremendous job explaining all the aspects of the framework with it's documentation by using 
 a big variety of examples.

Now having all that said, let's move to the "issue" part for this ticket.
I already mentioned that the documentations are plain awesome, but only if you understand english!
Now let's point out the second most used spoken language by Golang devs, well I think you already know of whom I am talking about... you probably already guessed, it's the Chinese users!

I have also noticed myself that more and more Chinese users are opening different issues here and probably many of them looking around trying to grasp and get a hold of using Iris, but unfortunately the language barrier stops them from achieving that, since we all know that a very small percentage of China's population actually speaks english.

But we don't stop here! All Iris users from all over the world can give a hand by helping with translation in there native language!

So by all means I am making a call to all Iris users here that know English + different language and want to help and make Iris a more welcoming place for there fellow compatriots by translating as much as they can of the Iris project.

Now let's get down to business and see what exactly I mean by that. These are the main things that need to be translated, ordered by priority:

1.  https://github.com/kataras/iris - there areo two .md files that need to be translated: README.md and HISTORY.md, please submit a PR for this with the following file naming: README_$LanguageCode.md and HISTORY_$LanguageCode.md (i.e. README_ZH.md, HISTORY_ZH.md [a list of language codes by country](https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes) );

2. https://github.com/kataras/iris/tree/master/_examples - there is one .md file here that needs to be translated, README.md, please submit a PR for this with the following file naming: README_$LanguageCode.md;

3. https://iris-go.com/ - here I decided to make a new website using the .cn TLD, so the final domain name will be "iris-go.cn", where we will be adding the same information from iris-go.com, but translated in Chinese.

Also a good thing to keep in mind if you want take part to this, is to check also the English version for mistakes doing the translation process.

Let's all build a better web together, that's what open-source it's all about!


**Translations to do:**

- [x] Chinese (ZH)
- [x] Greek (GR)
- [ ] Brazilian Portuguese (PT_BR)
- [ ] Russian (RU)
- [ ] Japanese (JPN)
- [x] Korean (KO)
- [x] Spanish (ES)
- [x] Iranian (FA)
- [x] Russia (RU)