It would seem that the [`equal`](https://github.com/denoland/deno_std/blob/73671a6f04d288dd57e75f9806959f7b055ae4a7/testing/asserts.ts#L68) function consumed by `assertEquals` in the `asserts` module doesn't verify the deep equality of `Map` instances. Therefore:

```ts
assertEquals(
  new Map([['foo', 'bar']]),
  new Map([['bar', 'foo']]),
);
```

doesn't throw an `AssertionError`, whereas I'd certainly expect a test failure.

Was it an intentional decision to omit `Map` support, or is it an oversight? If it's the latter, I'm happy to raise a PR to fix it.
I was reviewing a PR and i figured out it's weird to have `path.isWindows`. I mean it would make more sense to ask for `os.isWindows` no? Because in this case iswindow is returning the value in calculation of the context of execution not the path. For example i would imagine:
```
'c:\foo\bar\t.js'.isWindows // true
'/mnt/foo/bar/t.js'.isWindows // false
```
ref:
https://github.com/denoland/deno_std/blob/master/fs/path/constants.ts#L51
Heads up, but since deno's implementation of HTTP header parsing copies go's `textproto` implementation, it's currently susceptible to [CVE-2019-16276](https://github.com/golang/go/issues/34540). Basically you'll want to remove the header normalization happening here: https://github.com/denoland/deno_std/blob/f3bdf1a77b852cfb1490f20e4ad9b4346fe9d328/textproto/mod.ts#L101-L104
I had to disable two tests in order to upgrade to v0.18.0
"globrex: filepath path-regex"
"globrex: filepath path segments"

See https://github.com/denoland/deno_std/commit/a8f6cf7b4fa4030878bb702a65f28f469ee1f87d for where they were removed.

cc @zekth 
I removed the `switch` and conditions there was inside of the `default` to one unique condition using regexp to test if `vers` is formatted as an http version. 
Refs #428 

This is an MVP for supporting TypeScript as part of the std library.

It is a copy of the `typescript/lib` in `typescript/vendor` with and addition to the `./vendor/typescript.js` so that it properly exposes itself globally when loaded in Deno.  It also requires https://github.com/denoland/deno/commit/c30decab77c4ebeb34ebd1d73b0f45bb26944c79 or later to work properly.
Fixes #538 
It would be nice for `deno` to support HTTP compression. It could be enabled as

```ts
import { serve } from "https://deno.land/std/http/server.ts";
const s = serve("0.0.0.0:8000", {compression: true});
```
https://github.com/denoland/deno_std/commit/539338db330e630d006f0898921635c4e10ae671
![image](https://user-images.githubusercontent.com/40654631/62017290-af1db700-b1e8-11e9-986d-0219e4b2ca96.png)


ps: I think our official package is terrible, although the deno is very good