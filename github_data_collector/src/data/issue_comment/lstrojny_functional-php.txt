Bet this would be helpful when you have just an array of booleans. 
The `minimum` and `maximum` functions can return null if the $collection is empty. This commit adds to their @return annotation that a null return is a possibility.

I'm not sure if this relates to #208, but _psalm_ does report handling the possibility of a null return with [`DocblockTypeContradiction`](https://psalm.dev/docs/running_psalm/issues/#docblocktypecontradiction).  

For example, `maximum([]) ?? -1` will produce a `DocblockTypeContradiction`.
A batch of Psalm-related improvements
Add psalm annotations
 - [ ] Fix all issues found by psalm
 - [x] Increase type specificity
 - [x] Add `@psalm-pure`
 - [x] Add `@psalm-assert`
 - [ ] Add proper support for more complex cases like `compose`

### Type specificity
 - [x] Average
 - [x] ButLast
 - [x] Capture
 - [x] CompareObjectHashOn
 - [x] CompareOn
 - [x] Compose
 - [x] Concat
 - [x] ConstFunction
 - [x] Contains
 - [x] Converge
 - [ ] Curry
 - [ ] CurryN
 - [x] Difference
 - [x] DropFirst
 - [x] DropLast
 - [x] Each
 - [x] Equal
 - [x] ErrorToException
 - [x] Every
 - [x] Exceptions/InvalidArgumentException
 - [x] Exceptions/MatchException
 - [x] False
 - [x] Falsy
 - [x] Filter
 - [x] First
 - [x] FirstIndexOf
 - [x] FlatMap
 - [x] Flatten
 - [x] Flip
 - [x] Functional
 - [x] GreaterThan
 - [x] GreaterThanOrEqual
 - [x] Group
 - [x] Head
 - [x] Id
 - [x] Identical
 - [x] IfElse
 - [x] IndexesOf
 - [x] Intersperse
 - [x] Invoke
 - [x] InvokeFirst
 - [x] InvokeIf
 - [x] InvokeLast
 - [x] Invoker
 - [x] Last
 - [x] LastIndexOf
 - [x] LessThan
 - [x] LessThanOrEqual
 - [x] LexicographicCompare
 - [x] Map
 - [x] Match
 - [x] Maximum
 - [x] Memoize
 - [x] Minimum
 - [x] None
 - [x] Noop
 - [x] Not
 - [x] OmitKeys
 - [x] PartialAny
 - [x] PartialLeft
 - [x] PartialMethod
 - [x] PartialRight
 - [x] Partition
 - [x] Pick
 - [x] Pluck
 - [x] Poll
 - [x] Product
 - [x] Ratio
 - [x] ReduceLeft
 - [x] ReduceRight
 - [x] Reindex
 - [x] Reject
 - [x] Repeat
 - [x] Retry
 - [x] Select
 - [x] SelectKeys
 - [x] SequenceConstant
 - [x] SequenceExponential
 - [x] SequenceLinear
 - [x] Sequences/ExponentialSequence
 - [x] Sequences/LinearSequence
 - [x] Some
 - [x] Sort
 - [x] Sum
 - [x] SuppressError
 - [x] Tail
 - [x] TailRecursion
 - [x] TakeLeft
 - [x] TakeRight
 - [x] Tap
 - [x] True
 - [x] Truthy
 - [x] Unique
 - [ ] With
 - [ ] Zip
 - [ ] ZipAll


### Issues
 - invoker(), invoke(), partial_method(): no way to annotate method names properly: https://github.com/vimeo/psalm/issues/2500
 - Recursive types are not implemented (problem for `compose`, `curry`, etc.): https://github.com/vimeo/psalm/issues/2499
In order to support pipe function, I'm contributing my proposal to get this long before reaching 2.0.
This is a proposal to implement create_assoc function as is commented in #164, let me know if there is anything I can do to adjust it to this project standards.
## chunk_every

By passing a `$size`, `$step` and whether to `$discardIncompleteChunk` you have full control over the chunks created.

```php
chunk_every([1, 2, 3], 2); // [[1, 2], [2, 3], [3]]
chunk_every([1, 2, 3], 2, 1, true); // [[1, 2], [2, 3]]
```

Inspired by [Elixir](https://hexdocs.pm/elixir/Enum.html#chunk_every/4)
I'm happy to introduce the amazing set of functions: `path`, `path_or`, `prop`, `prop_or`, `props`.

Example:
```php
<?php

use function Functional\map;
use function Functional\path_or;
use function Functional\prop;
use function Functional\prop_or;
use function Functional\props;
use function Functional\each;

include 'vendor/autoload.php';

$users = [
    ['first_name' => 'John', 'last_name' => 'Doe', 'birth' => 1969, 'languages' => ['js' => 5, 'php' => 10], 'os' => 'Ubuntu'],
    ['first_name' => 'Valerich', 'birth' => 1980],
    (object)['first_name' => 'John', 'last_name' => 'Appleseed', 'birth' => 1985, 'languages' => ['swift' => 15], 'os' => 'macOS'],
    ['first_name' => 'Taylor', 'last_name' => 'Otwell', 'birth' => 1986, 'languages' => ['php' => 12]],
];
$currentYear = (int) date('Y');

$developers = map(
    $users,
    function ($item) use ($currentYear) {
        return [
            'full_name' => implode(' ', props(['first_name', 'last_name'], $item)),
            'php_experience' => path_or(0, ['languages', 'php'], $item),
            'os' => prop_or('Fedora', 'os', $item),
            'age' => $currentYear - prop('birth', $item),
        ];
    }
);

each(
    $developers,
    function ($developer) {
        printf(
            "%s (%d y.o.), enjoys PHP for %d years\n",
            ...props(['full_name', 'age', 'php_experience'], $developer)
        );
    }
);

```

Result:
```
John Doe (50 y.o.), enjoys PHP for 10 years
Valerich (39 y.o.), enjoys PHP for 0 years
John Appleseed (34 y.o.), enjoys PHP for 0 years
Taylor Otwell (33 y.o.), enjoys PHP for 12 years
```

# Problem
Given an array of items, return a map from keys to values, where the key is specified by a callback, and the value is the item from the array.

# Dev notes
Ideally we can use a composition of `group` and `map`, however error messages from `InvalidArgumentException::assertValidArrayKey` will leak out internal implementation details 
and will not provide an accurate message.
<strike>This is a feature request. Something like this:

```php
create_map(
  ['cat', 'bear', 'aardvark'],
  function($element, $index, $collection) {
    return strlen($element);
  }
);
/*
returns [
  'cat'=>3,
  'bear'=>4,
  'aardvark'=>8
];
*/
```

I'm not sure what that function would be called, I admit that it should have a better name than `create_map` </strike>

Couldn't properly explain what I want in the original post, see a comment below: https://github.com/lstrojny/functional-php/issues/164#issuecomment-402945532