In docker I run:
` docker run -p 8888:8888 fsprojects/ifsharp`

I try to create a new notebook:
```
[I 16:28:56.196 NotebookApp] Creating new notebook in
[I 16:28:56.222 NotebookApp] Writing notebook-signing key to /home/ifsharp-user/.local/share/jupyter/notebook_secret
[W 16:28:56.232 NotebookApp] 403 POST /api/contents (172.17.0.1): Permission denied: Untitled.ipynb
[W 16:28:56.232 NotebookApp] Permission denied: Untitled.ipynb
[W 16:28:56.232 NotebookApp] 403 POST /api/contents (172.17.0.1) 37.22ms referer=http://127.0.0.1:8888/tree
```
Thank you for any help!
Hi

I am trying to load a managed DLL that wraps an unmanaged `.so` or `.dylib` on Mac OS

If I create a `CLI` app using `dotnet` I can get it to work if I copy to DLL and the `.dylib` into the output folder. As an FYI I have to rename the `.so` to `.dylib`

If I create a simple test script in ifSharp

```
#r "managed_wrapper.dll"
open System
open LibraryName

let main =
    Library.some_init_function(0) |> ignore
    printfn "Hello World from F#!"
    0

main
```

I get `DllNotFoundException` even though the DLL and the `.dylib` are in the same folder where I execute `jupyter notebook`

### I have tried

* Putting `.so` and `.dylib` in the same folder
* setting DYLD_LIBRARY_PATH
* Various options from http://christoph.ruegg.name/blog/loading-native-dlls-in-fsharp-interactive.html

### Related information 

* Operating system: Mac OS 10.14.6
* jupyter core     : 4.6.1
* jupyter-notebook : 6.0.2
* jupyter client   : 5.3.4
* jupyter lab      : 1.2.3
* dotnet: 2.1.401


### Description

This seems to more be an F# bug related to a unification error with F# anonymous record types (possibly a dotnet restriction?).

### Repro steps

```F#
[ {|id=5; name = "hello"|} ] |> Util.Table
```

### Expected behavior

Table output

### Actual behavior

Error message:
>Type constraint mismatch. The type 
    '{|id : int ; name : string|} list'    
is not compatible with type
    'seq<{|id : int ; name : string|}>'    

### Known workarounds

Define it within a module:

```F#
open System

module MUtil =
    let Row (columns:seq<Reflection.PropertyInfo>) (item:'A) =
        columns
        |> Seq.map (fun p -> p.GetValue(item))
        |> Seq.map Convert.ToString
        |> Seq.toArray

    let Table (items:seq<'A>, propertyNames:seq<string> option) =
        let properties = 
            if propertyNames.IsSome then
                typeof<'A>.GetProperties()
                |> Seq.filter (fun x -> (propertyNames.Value |> Seq.exists (fun y -> x.Name = y)))
                |> Seq.toArray
            else
                typeof<'A>.GetProperties()
        { 
            Columns = properties |> Array.map (fun x -> x.Name);
            Rows = 
                items 
                |> Seq.map (Test.MyRow properties)
                |> Seq.toArray
        }
    
    let DefaultTable items = Table (items, None)
```

Then call:

```F#
[ {|id=5; name = "hello"|} ] |>  MUtil.DefaultTable
```

### Related information 

* Operating system: Ubuntu
* Branch: Master
* CoreCLR

### Description

Trying to load Npgsql entity framework on dotnet core over Paket has issues, most likely related to dependencies not being loaded.

### Repro steps

```F#
#load "Paket.fsx"
Paket.Package ["Microsoft.EntityFrameworkCore"; "Npgsql"; "Npgsql.EntityFrameworkCore.PostgreSQL"]
#load ".paket/load/netstandard2.0/Npgsql.EntityFrameworkCore.PostgreSQL.fsx"

open Npgsql.EntityFrameworkCore.PostgreSQL
open Microsoft.EntityFrameworkCore

let opt = DbContextOptionsBuilder().UseNpgsql("connectionstring").Options
```

### Expected behavior

It should generate a `DbContextOptions`.

### Actual behavior

>type 'Npgsql.EntityFrameworkCore.PostgreSQL.Infrastructure.NpgsqlDbContextOptionsBuilder' not found in assembly 'Npgsql.EntityFrameworkCore.PostgreSQL, Version=2.2.4.0, Culture=neutral, PublicKeyToken=5d8b90d52f46fda7'. A possible cause may be a version incompatibility. You may need to explicitly reference the correct version of this assembly to allow all referenced components to use the correct version.

### Known workarounds

I sadly could not find one. I've tried loading random further libraries, but with no success.

### Related information 

* Operating system: Ubuntu
* Branch: Master
* CoreCLR


It would be interesting to add IfSharp as a dotnet tool to ease the installation.
I'm not sure if it would be possible but here is the [doc](https://docs.microsoft.com/fr-fr/dotnet/core/tools/global-tools-how-to-create) for that
### Description

There is some issue loading the correct libraries to use Type Providers on .NET Core. While this is directly relevant to Type Providers, the issue itself is broader and should be solved.

### Repro steps

Run the following code:
![image](https://user-images.githubusercontent.com/6114830/54680029-b1685a00-4b00-11e9-8ffd-5bc619b449a6.png)

The problem can slightly be improved by manually loading some further libraries:
![image](https://user-images.githubusercontent.com/6114830/54678365-ea063480-4afc-11e9-97af-c76cf48dc971.png)

This still yields the error:
![image](https://user-images.githubusercontent.com/6114830/54678373-effc1580-4afc-11e9-9a77-46ace3eb6f55.png)

### Known workarounds

Not known yet.

### Related information 

* Operating system: Ubuntu Server 18.10
* Branch: Master + .NET Core autocompletion fix
* .NET CoreCLR

### Description

The F# kernel should support returning the Plotly mime type:
    https://github.com/plotly/plotly.py/blob/f65724f06b894a5db94245ee4889c632b887d8ce/plotly/offline/offline.py#L347
https://github.com/plotly/plotly.py/pull/562#issuecomment-245078317

Supporting this will allow notebooks to be previewed with plotly graphs in a safe way.  Because this is not currently supported the graphs are rendered using HTML + JavaScript which cannot be safely rendered.

### Repro steps

See this notebook: https://notebooks.azure.com/library/HorsesForCourses/html/Ages.ipynb
It includes a Plotly graph but the rendering is all HTML.  But if you look at a Python notebook:

https://notebooks.azure.com/dino/libraries/b4hsjDh0TBo/html/Using%20Plotly%20in%20Jupyter%20Notebooks%20on%20Microsoft%20Azure.ipynb

You can see with this Python notebook that includes the extra mime type response and that the chart renders:

https://notebooks.azure.com/dino/libraries/kphrQvkqZ6Y/html/Using%20Plotly%20in%20Jupyter%20Notebooks%20on%20Microsoft%20Azure.ipynb


### Description

Is there a way to get masked input data entry from the user of the notebook equivalent to the Python kernal getpass capability?

import getpass
password = getpass.getpass()


### Known workarounds

Can we and should we enable Jupyter widgets in IF# ?

https://github.com/ipython/ipywidgets/blob/6b1e0901260409e166ed1763db06122dedeb4b89/docs/source/examples/Widget%20Low%20Level.ipynb

It looks like it is built on top of `comm` messages.

A collection of widget examples:

https://github.com/ipython/ipywidgets/tree/6b1e0901260409e166ed1763db06122dedeb4b89/docs/source/examples

As mentioned in #106, ``__SOURCE_DIRECTORY__`` is the same ``/home/nbuser``  for each notebook process in a docker container. Likewise the ``System.Environment.CurrentDirectory`` for each notebook is the same.

Also, [the directory used for nuget packages is not unique](https://github.com/fsprojects/IfSharp/blob/c58e339176fddd4ebc72def4da4a63cb1e396644/src/IfSharp.Kernel/helpers/Paket.fsx#L10). This would mean that different notebooks may get different nuget package versions, and may alter the paket.dependencies in conflicting ways.

Both can easily lead to conflicting use of the file system from different notebooks if the current directory is used to store and resolve nuget packages, for example, depending on the technique used to get nuget packages.