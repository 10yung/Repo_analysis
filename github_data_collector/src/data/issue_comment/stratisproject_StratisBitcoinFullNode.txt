This PR removes stale entries from the seeds for all networks and updates the Stratis seeder domains to stratisnetwork.com for all networks also.
When calling endpoints to interact with smart contracts, when the transaction cannot be broadcast, the API is returning a 400 Bad Request response. This is misleading as the same response is returned, for example, if headers are not set correctly or the request body is not valid. When wanting to handle both situations, this becomes is an issue.

Using a different status code for transactions which are not broadcast, possibly 422, would be more appropriate.
I'm working on pushing dotnet core to the limit in terms of performance and memory allocation, and I'mopening issues on NBitcoin when I find something interesting that can be improved, let me link here 2 of these issues that may interest you:

https://github.com/MetacoSA/NBitcoin/issues/793
https://github.com/MetacoSA/NBitcoin/issues/796

the 2nd one gives really a boost over memory allocation, that's a problem that fullnode is experiencing a lot (memory usage and fragmentation)
I have a scenario where I am passing structs and struct arrays to a smart contract. At the moment, in my contract, I'm deserializing from a byte array inside the method.

In my service, I am initializing my struct type and then serializing it, so that it can be passed in a call to the contract. Ideally I wouldn't want to have to handle serialization, instead smart contracts could support struct and array parameters, which are deserialized in the call.
Related to https://github.com/stratisproject/StratisBitcoinFullNode/pull/4093

Lots of breaking changes

https://docs.microsoft.com/en-us/aspnet/core/migration/22-to-30?view=aspnetcore-3.0&tabs=visual-studio

https://docs.microsoft.com/en-us/dotnet/core/compatibility/2.2-3.0
Byte array return values in smart contracts are not being serialized into the receipt.

```csharp
public class ExampleContract : SmartContract
{
    ...
    public byte[] CallMe() => new byte[] { 3, 2, 1 };
}
```

This is what the receipt of a call to the method looks like.

```json
{
    "transactionHash": "910a3bea51f0fab7556452df11e86f937d811f03e76d81db644e2face14fcddc",
    "blockHash": "b06c03ecb1da9f1348e01bd4145b43d242e1178ee239efbac2c281a0c41afbd2",
    "postState": "20aa982de5fea75eda5888817d26e9a58cc4813d0e501ee4772d0fd150935e9d",
    "gasUsed": 10221,
    "from": "CUtNvY1Jxpn4V4RD1tgphsUKpQdo4q5i54",
    "to": "CKYmR2MpUm5opnkKZpPyrTKrV8xCgtk3Dq",
    "newContractAddress": null,
    "success": true,
    "returnValue": "System.Byte[]",
    "bloom": "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "error": null,
    "logs": []
}
```

I'd expect the return value to show the byte array value serialized as a hex string.
Myself and at least 4-5 Masternode operators have ran into this issue over the last two months. The issue is over a period of time, both mainchain and sidechain show a decrease number of in/out connections. In my case, the connections is in:0 and out:16 until I restart my Masternode. I observed this behavior after restarting my MN due to Windows Update:

- connection was in:30 out:9 for mainchain and in:16 out:14 for sidechain. node log size 180,544 KB
- node log size 123,768 KB
- node log size 95,922 KB
- node log size 82,630 KB
- node log size 79,577 KB
- connection was in:7 out: 16 for mainchain and in:1 out:16 for sidechain. node log size 82,417 KB

If I recall correctly, this issue was introduced with the SBFN 3.0.5. I check the logs frequently for my Node Map and remember faintly this issue arising after I ran Ian's script to start the MN. 

Lots of breaking changes

https://docs.microsoft.com/en-us/aspnet/core/migration/22-to-30?view=aspnetcore-3.0&tabs=visual-studio

https://docs.microsoft.com/en-us/dotnet/core/compatibility/2.2-3.0
https://github.com/block-core/blockcore/issues/23