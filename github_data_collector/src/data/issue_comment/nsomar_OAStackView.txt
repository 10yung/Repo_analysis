The Interface Builder method described in docs simply doesn't work.
I just followed all the steps in a new project exactly as said in the Usage section. 
Buttons stay where they are.
PR #87 breaks the ability to have OAStackView be a static framework (because it uses Swift), and consequently breaks iOS 7 compatibility.

OAStackView's own Examples project (Deployment Target = 7.1) is broken because of this:
```
ld: embedded dylibs/frameworks are only supported on iOS 8.0 and later (@rpath/OAStackView.framework/OAStackView) for architecture armv7
```

It can't be worked around, either, as Cocoapods ~doesn't~ can't support static frameworks with Swift.  For example if we remove `use_frameworks!` from the Podfile we get 
```
[!] Pods written in Swift can only be integrated as frameworks; add `use_frameworks!` to your Podfile or target to opt into using it. The Swift Pod being used is: OAStackView
```

What problem is `OAStackViewProxy.swift` trying to solve?  PR #60 solves the backwards compatibility problem with `objc_allocateClassPair`.

I am getting error in Xcode 8.1 version like Unknown type name 'NS_ASSUME_NONNUL_BEGIN' UIAccelerometer.h  please help me out.
I am trying to add stackview into my cel xib, but get error:
`- Unknown class OAStackView in Interface Builder file.`
`- Failed to set (axisValue) user defined inspected property on (UIView): [<UIView 0x7f95e3cd4f70> setValue:forUndefinedKey:]: this class is not key value coding-compliant for the key axisValue.`
`- Failed to set (spacing) user defined inspected property on (UIView): [<UIView 0x7f95e3cd4f70> setValue:forUndefinedKey:]: this class is not key value coding-compliant for the key spacing.
Failed to set (alignmentValue) user defined inspected property on (UIView): [<UIView 0x7f95e3cd4f70> setValue:forUndefinedKey:]: this class is not key value coding-compliant for the key alignmentValue.`
`- Failed to set (distributionValue) user defined inspected property on (UIView): [<UIView 0x7f95e3cd4f70> setValue:forUndefinedKey:]: this class is not key value coding-compliant for the key distributionValue.`

Btw I already tested successfully on storyboard. 

May cause crash when OAStackView was deallocated but still observing subview's hidden property.

Hey there, @oarrabi!

First of all, thanks for `OAStackView` and all the effort you put into it. I was just playing with it and replaced a previously iOS 9-only codebase without many issues, but found an odd one.

The original code, which uses `UIStackView`, follows Apple's guidelines and removes subviews by calling `removeFromSuperview`. Here's what the docs say about `removeArrangedSubview:`:

> This method removes the provided view from the stack’s arrangedSubviews array. The view’s position and size will no longer be managed by the stack view. **However, this method does not remove the provided view from the stack’s subviews array; therefore, the view is still displayed as part of the view hierarchy.**

`OAStackView`, on the other hand, seems to expect subviews to be removed by using `removeArrangedSubview:`, isn't that right? Directly calling `removeFromSuperview` breaks the constraints system most of the time unfortunately.

I can happily submit a PR with fixes for that if you agree with the changes. I just wanted to make sure the project is still under development first.

Thanks!

Any idea why this crash?

Crashed: com.apple.main-thread
EXC_BAD_ACCESS KERN_PROTECTION_FAILURE 0x0000000189a49e6a

Crashed: com.apple.main-thread
0  MyAPP                   0x100b30000 -[OAStackViewAlignmentStrategy addConstraintsOnOtherAxis:](OAStackViewAlignmentStrategy.m:105)
1  MyAPP                   0x100b2e9c4 **38-[OAStackView setAlignmentConstraints]_block_invoke (OAStackView.m:146)
2  MyAPP                   0x100b2d784 -[OAStackView(Traversal) iterateVisibleViews:](OAStackView+Traversal.m:60)
3  MyAPP                   0x100b2e8c8 -[OAStackView setAlignmentConstraints](OAStackView.m:150)
4  MyAPP                   0x100b2f7f0 -[OAStackView layoutArrangedViews](OAStackView.m:351)
5  MyAPP                   0x100b2e234 -[OAStackView initWithArrangedSubviews:](OAStackView.m:65)
6  MyAPP                   0x1002745dc -[MyFCVMajorCell tk_initialize](TKFCVMajorCell.m:157)
7  MyAPP                   0x1002735b0 -[MyFCVMajorCell initWithFrame:](TKFCVMajorCell.m:53)
8  UIKit                          0x18988f488 -[UICollectionView _dequeueReusableViewOfKind:withIdentifier:forIndexPath:viewCategory:] + 892
9  UIKit                          0x1890abd48 -[UICollectionView dequeueReusableCellWithReuseIdentifier:forIndexPath:] + 180
10 MyAPP                   0x1007639a8 -[MyFollowingCollectionView collectionView:cellForItemAtIndexPath:](MyFollowingCollectionView.m:196)
11 UIKit                          0x1898873a8 -[UICollectionView _createPreparedCellForItemAtIndexPath:withLayoutAttributes:applyAttributes:isFocused:] + 432
12 UIKit                          0x1890a9adc -[UICollectionView _updateVisibleCellsNow:] + 4628
13 UIKit                          0x1890a4808 -[UICollectionView layoutSubviews] + 228
14 UIKit                          0x1890401e4 -[UIView(CALayerDelegate) layoutSublayersOfLayer:] + 656
15 QuartzCore                     0x1869d2994 -[CALayer layoutSublayers] + 148
16 QuartzCore                     0x1869cd5d0 CA::Layer::layout_if_needed(CA::Transaction_) + 292
17 QuartzCore                     0x1869cd490 CA::Layer::layout_and_display_if_needed(CA::Transaction_) + 32
18 QuartzCore                     0x1869ccac0 CA::Context::commit_transaction(CA::Transaction_) + 252
19 QuartzCore                     0x1869cc820 CA::Transaction::commit() + 500
20 QuartzCore                     0x1869c5de4 CA::Transaction::observer_callback(__CFRunLoopObserver_, unsigned long, void*) + 80
21 CoreFoundation                 0x183e9c728 __CFRUNLOOP_IS_CALLING_OUT_TO_AN_OBSERVER_CALLBACK_FUNCTION** + 32
22 CoreFoundation                 0x183e9a4cc __CFRunLoopDoObservers + 372
23 CoreFoundation                 0x183e9a8fc __CFRunLoopRun + 928
24 CoreFoundation                 0x183dc4c50 CFRunLoopRunSpecific + 384
25 GraphicsServices               0x1856ac088 GSEventRunModal + 180
26 UIKit                          0x1890ae088 UIApplicationMain + 204
27 MyAPP                   0x1000d1fc0 main (main.m:22)
28 libdispatch.dylib              0x1839628b8 (Missing)

1. cd `../OAStackView/Example`
2. run `pod install`

Expected: Cocoapods successfully installed.
Actual: Error (see below).

```
[!] Invalid `Podfile` file: [!] Unsupported options `{:exclusive=>true}` for target `OAStackView_Example`..

 #  from .../OAStackView/Example/Podfile:4
 #  -------------------------------------------
 #  
 >  target 'OAStackView_Example', :exclusive => true do
 #    pod "OAStackView", :path => "../"
 #  -------------------------------------------
```

pod version: 1.0.1
OS X 10.10.5

Constraints added to Stack View are not working properly.

So, first of all let me say thank you! This little fallback solution for UIStackView is awesome.

I've been trying to use it but I do have a problem. I create my OAStackView in Interface Builder where I pre-populate it with some subviews. But then, in code I want to add some more views and I thought that the method `insertArrangedSubview:atIndex` is what I need.

The problem is that when I do that it crashes. Here's a screen shot of the line that causes the crash:

<img width="880" alt="screen shot 2016-02-26 at 11 23 39" src="https://cloud.githubusercontent.com/assets/777591/13349631/737ff096-dc7b-11e5-8b94-e568fb67b660.png">

As you can see it seems that `self.mutableArrangedSubviews` is empty and I've looked all over your code to see where it get's populated, if it ever does, and I can't really find the place that does that.

So, do you think this is a bug or is there a way you can help me?

Thanks
