## 环境

* 操作系统: 如Windows 10或者Ubuntu 18.04
* Python版本: 如VNStudio-2.0.6
* vn.py版本: 如v2.0.5发行版或者dev branch 20190101（下载日期）

## Issue类型
三选一：Bug/Enhancement/Question

## 预期程序行为


## 实际程序行为


## 重现步骤

针对Bug类型Issue，请提供具体重现步骤以及报错截图


2.0后webtrader就没有了，是以后也不会有开发计划，还是说只是暂时优先级不高？如果开发有难度，具体是哪个模块带来了困难？
日志添加单例模式
保存CSV数据前移除null值
## 环境

* 操作系统: 如Windows 10
* Python版本: 如VNStudio-2.0.9
* vn.py版本: 如v2.0.9发行版

## Issue类型
三选一：Enhancement

## 预期程序行为
在cta策略模块中，想要某些策略能够实时查询账户余额，从而配合策略动态计算仓位，例如用到凯利公式的策略

## 实际程序行为
vn.py好像不支持在cta策略中查询账户余额信息




## 环境

* 操作系统: 如Windows 10或者Ubuntu 18.04
* Python版本: 如VNStudio-2.0.6
* vn.py版本: 如v2.0.5发行版或者dev branch 20190101（下载日期）

## Issue类型
三选一：Bug/Enhancement/Question

## 预期程序行为
 

## 实际程序行为
下面这个处理太单一了
```
if long_cross:
        trade_price = min(order.price, long_best_price)   
        pos_change = order.volume
else:
        trade_price = max(order.price, short_best_price) 
        pos_change = -order.volume
```

这个是  limit order,  应该分两种情况来处理
1、发完单，在下一根K线直接成交的那种， 取open_price来当最优价。 
2、发完单，下一跟K线不是立即成交的，这时候转化成了挂单， 之后都是用 挂单价 order.price 来处理。 

对于2的情况， 比如发完价格是 50的买单，假如第一根K线(60,60,60,60)不成交， 第二根K线开盘价60，最低价40，最高价80，这时候如果一直挂单不撤，理应撮合价格是挂单价50，而不是开盘价60

```
for order in list(self.active_limit_orders.values()):
            # Push order update with status "not traded" (pending).
            is_submitting = False
            if order.status == Status.SUBMITTING.value:
                is_submitting = True
                order.status = Status.NOTTRADED.value
                self.strategy.on_order(order)

            # Check whether limit orders can be filled.
            long_cross = (
                order.direction == Direction.LONG.value
                and order.price >= long_cross_price
                and long_cross_price > 0
            )

            short_cross = (
                order.direction == Direction.SHORT.value
                and order.price <= short_cross_price
                and short_cross_price > 0
            )

            if not long_cross and not short_cross:
                continue

            # Push order udpate with status "all traded" (filled).
            order.traded = order.volume
            order.status = Status.ALLTRADED.value
            self.strategy.on_order(order)

            self.active_limit_orders.pop(order.vt_order_id)

            # Push trade update
            self.trade_count += 1

            trade_price = order.price
            if long_cross:
                if is_submitting:
                    trade_price = min(order.price, long_best_price)
                pos_change = order.volume
            else:
                if is_submitting:
                    trade_price = max(order.price, short_best_price)
                pos_change = -order.volume
```
## 重现步骤

针对Bug类型Issue，请提供具体重现步骤以及报错截图


## 环境
* vn.py版本: 如v2.0.8

## Issue类型
三选一：Bug

成交金额应该用主动腿和被动腿成交金额的总和来计算，而不是由价差*交易量计算


在TargetPosTemplate里有这么一段 是有问题的， cancel后信息未确认，就开始计算poschange （这等于是假定了 挂单价格远离市场盘口，没有成交）
事实上，如果出现部分成交的问题，非常容易出现。
举例子说明 targetpos是5手 由于流动性不够只成交3手， 那么poschange是2 我又去买2张 如果再cancelall调用的时候 实际市场又成交了1手 那么就会出现多下单1手的情况；

def trade(self):
    """"""
    self.cancel_all()

    pos_change = self.target_pos - self.pos
    if not pos_change:
        return

正确的做法应该是cancel的order回调里去计算poschange
## 环境
* vn.py版本: 如v2.0.8发行版

## Issue类型
三选一：Enhancement

## 实际程序行为


群主，您好

vnpy的2.0.x中 ib合约不能自动订阅，不太清楚为啥这里没做，我试了下，在dr的窗口中，添加了这个合约的时候，判断出来是ib的合约了（我根据交易所判断的），那么就和内盘一样加到tick和bar的记录列表中并调用self.main_engine.subscribe(req, "IB") ，下次登录ib的时候，在ib接口文件的connect(...)登录成功获取时间完成后的位置，增加一个eIBcontractSubscribe的事件，在dr的engine的方法 process_contract_event(...) 中捕获到这个事件后调用 self.main_engine.subscribe(req, "IB") 来完成IB合约的自动订阅，否则这个位置真的是不够完美的，以上我测试过了没问题的。

当然也许还有更好的方式，期望vnpy从源头上能够优化下这里的。


另外 吐槽下 代码用纯数字的conId，实在是耗费精神熵的呀！当然，可能是为了更广泛的兼容。如果可以，是否可以在代码后边增加上localSymbol的呢？

2.0.x 的结构设计确实是漂亮的，赞！！！

感谢！




## 环境

* 操作系统: 如Windows 10
* Python版本: 如VNStudio-2.0.6
* vn.py版本: 如v2.0.5发行版

## Issue类型
三选一：Bug

## 预期程序行为
盈透有账户和用户的概念，比如申请一个模拟账户，账户名大概是DUXXX，而用户名不一样，一个用户可以分配多个账户
## 实际程序行为
目前只支持模拟账号。真实的默认多账号登陆导致逻辑混乱的问题

## 重现步骤

针对Bug类型Issue，请提供具体重现步骤以及报错截图
使用一个（带2个账户的）用户名登陆
