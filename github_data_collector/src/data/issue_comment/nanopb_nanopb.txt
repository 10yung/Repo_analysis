CMake projects using nanopb should use `nanopb_generate_cpp` function as shown in cmake examples. But it's being provided only by `extra/FindNanopb.cmake` *cmake package module*, which available only in source tree and "exclusive" binary distributions at download page. Although, there are also `extra/nanopb-config.cmake, extra/nanopb-config-version.cmake` *cmake package configuration* available, being generated from nanopb build and install via CMake, it doesn't provide any similar feature.

This limits usage in two possible deployment scenarios:
- nanopb source code isn't available during user application build. One need to retreive it and append [CMAKE_MODULE_PATH](https://cmake.org/cmake/help/latest/variable/CMAKE_MODULE_PATH.html) with path to extracted directory (which can be done in cmake command line, of course, and not as shown in example provided)
- nanopb already installed in system (linux). Recommended `find_package(Nanopb ...)` instruction from example causes CMake to find installed *cmake package configuration* first and [prefer to use it](https://cmake.org/cmake/help/latest/command/find_package.html#id2) , regardless of whether user supplied CMake with path to *module* location or not, thus causing build fail (not only because of missing function). This can be avoided by explicit `find_package(Nanopb MODULE ...)`.

One possible solution would be to add installation of`FindNanopb.cmake` to standard cmake modules directory (and also core sources somewhere to be retreived from) and correct documentation/examples describing two different use cases:
- `find_package(Nanopb MODULE ...)` + available function and integration to user cmake file (as already shown in example but with CMAKE_MODULE_PATH required only when nanopb isn't installed)
- `find_package(Nanopb CONFIG ...)` + integration of imported targets to user cmake file and alternative invokation of generator
When doing the following steps:

- git clone https://github.com/nanopb/nanopb.git
- cd nanopb
- cmake .
- make
- cd generator/proto
- make
- cd ../../tests
- scons

The tests fail somewhere in nanopb_generator.py:1200:

`Traceback (most recent call last):
  File "/home/bo.lind/nanopb/generator/nanopb_generator.py", line 2017, in <module>
    main_plugin()
  File "/home/bo.lind/nanopb/generator/nanopb_generator.py", line 2002, in main_plugin
    results = process_file(filename, fdesc, options, other_files)
  File "/home/bo.lind/nanopb/generator/nanopb_generator.py", line 1856, in process_file
    headerdata = ''.join(f.generate_header(includes, headerbasename, options))
  File "/home/bo.lind/nanopb/generator/nanopb_generator.py", line 1513, in generate_header
    yield msg.fields_declaration(self.dependencies) + '\n'
  File "/home/bo.lind/nanopb/generator/nanopb_generator.py", line 1092, in fields_declaration
    defval = self.default_value(dependencies)
  File "/home/bo.lind/nanopb/generator/nanopb_generator.py", line 1202, in default_value
    field.ClearField('default_value')
TypeError: field name must be a string`

This in on Ubuntu 18.04.3 LTS, x86_64.
When using PB_ENABLE_MALLOC on AVR processors with avr-libc, this bug can get triggered and cause memory corruption:
https://savannah.nongnu.org/bugs/index.php?53284

This happens when previous allocation is reduced to 1 byte using `realloc()`. A workaround should be added on nanopb side, as it is fairly low cost and it will take time before avr-libc gets fixed.

The problem will only occur when all of the following apply:

- PB_ENABLE_MALLOC is used
- Using avr-libc `realloc()` as the allocator for nanopb
- Message contains pointer-allocated field that has size of 1 byte per entry (e.g. bool array or string)
- Data to be decoded contains same field twice.

Instructions to reproduce the bug on revision 96bf1fec3:

1. `scons PLATFORM=AVR basic_buffer fuzztest`
2. `build/run_test build/fuzztest/fuzztest 1577631447 100`
The field descriptor logic in 0.4.0 is more involved than before, and it is shared by the encoder and decoder parts. Many of the test cases only test the round trip between nanopb encoder and nanopb decoder.

To better cover the field descriptor code, there should be a test case like the AllTypes test which compares against `protoc`, but for all the different descriptor sizes.

The documentation for `PB_FIELDINFO_WIDTH` compilation option claims that it will override descriptor width for all fields. However, in reality it only overrides it for messages using automatic field width determination.

The generator automatically expands descriptor size to 2 or 4 for messages that have large data or tag number sizes. These don't get overridden by the compilation option, which is misleading.

It may be best to remove PB_FIELDINFO_WIDTH option, as it is mostly redundant with `descriptorsize` option available in `.proto` files.
I have updated a codebase to use nanopb 0.4.0 in order to use the submsg_callback option.

I am using Atmel Studio 7 with an Atmel micro.

I have simplified my proto file to the following for testing:
```
message FirmwareUpdateCommand {
	string version = 1;
	uint32 size = 2;
}

message CommandWrapperMessage {
	option (nanopb_msgopt).submsg_callback = true;

    oneof payload {
		FirmwareUpdateCommand firmware_update = 1;
    }
}
```

If my proto file contains:
```
option (nanopb_msgopt).submsg_callback = false;
```

Then everything builds ok but I obviously cannot use submsg callbacks.

If I try to use:
```
option (nanopb_msgopt).submsg_callback = true;
```

Then I get a series of compilation errors:
<img width="1905" alt="Screenshot 2019-12-27 at 14 44 41" src="https://user-images.githubusercontent.com/540888/71521163-7547fe00-28b7-11ea-840f-5ff347a8c15d.png">

With the first error pointing to:
<img width="878" alt="Screenshot 2019-12-27 at 14 43 32" src="https://user-images.githubusercontent.com/540888/71521123-52b5e500-28b7-11ea-903c-b5135ab85286.png">

I note that you have had a previous embedded systems issue and added a series of tests but it is possible these tests to not cover the use of submsg_callback being set to true.
according to the README, the binary release is supposed to be straight forward

```
generator-bin/protoc --nanopb_out=. myprotocol.proto
```

there is no generator-bin, so i'm assuming its   ./generator/protoc   ,  but that doesnt work

```
aep@stark: ~/Downloads/nanopb ./generator/protoc 

         ********************************************************************
         *** Failed to import the protocol definitions for generator.     ***
         *** You have to run 'make' in the nanopb/generator/proto folder. ***
         ********************************************************************
    
Traceback (most recent call last):
  File "./generator/protoc", line 4, in <module>
    from nanopb_generator import invoke_protoc
  File "/home/aep/Downloads/nanopb/generator/nanopb_generator.py", line 42, in <module>
    from .proto import nanopb_pb2
ImportError: attempted relative import with no known parent package

```



note that doing what the fat warning says, has no effect

```
aep@stark: ~/Downloads/nanopb/generator/proto make
make: Nothing to be done for 'all'.

```

Running `nanopb_generator.py` on Python 3.8 show the following warning:

```
nanopb_generator.py:1650: SyntaxWarning: invalid escape sequence \*
```

The line in question is this one:

https://github.com/nanopb/nanopb/blob/70f0de9877b1ce12abc0229d5df84db6349fcbfc/generator/nanopb_generator.py#L1650

It seems the correct way how to quote an asterisk is either `r"\*"` or `"\\*"`, but I am not sure, honestly.
This is a new feature request.

We want to specify custom package name like `option java_package = "com.sample.generated";`
At 847ac29

When decoding a message such as:
```
message SimpleMessage {
  optional uint32 number = 1;
  extensions 100 to max;
}

message ExtMessage {
  extend SimpleMessage {
    optional ExtMessage ext_message_ext = 1100;
  }
  optional uint32 second_number = 1;
}
```

the `found` field is never set to true. However, If I switch `ext_message_ext = 200;` it is set correctly.