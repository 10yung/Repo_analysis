Without quoatation, you will get an error like

> ERROR:  relation "public.table_with_camelcase" does not exist
> SQL state: 42P01

if a table with name like **table_with_camelCase** exists..
In `index_item_sizes` portion of the index bloat query, indexes with multiple columns do not retain all attributes from the `btree_index_atts` subquery. This is due to a misunderstanding of the contents of the `pg_index.indkey` column.

From the documentation:

> This is an array of indnatts values that indicate which table columns this index indexes. For example a value of 1 3 would mean that the first and the third table columns make up the index key. A zero in this array indicates that the corresponding index attribute is an expression over the table columns, rather than a simple column reference.

Thus if columns 2 and 3 are indexed, indkey will reflect '2 3'. However, in `pg_attribute`, the index attributes will be 1 and 2. Thus joining the two tables will result in only one attribute result (2==2), and it will be incorrect (table col2 != index col2).

There are generally two ways to fix this:

1. Alter the JOIN to `pg_attribute` to use `indexrelid` instead, and subsequently modify the JOIN to `pg_stats` similarly.
2. Replace the `regexp_split_to_table` call with `generate_series` bounded by `pg_index.indnatts`. If an index has 3 columns, the attributes in `pg_attribute` will be listed as 1, 2, and 3. This means the `indkey` split isn't strictly necessary.

I'm trying to make the bloat queries work for 32-bit compiles.  Is there anything needed besides switching ma/maxalign from 8 to 4?

Combines the query into a single query that checks for exact matches as well as partial matches, and includes checks on the index class.
The query returns bloat and size information only on one index of the table even if tables has multiple indexes.
Using Postgres 9.5.3 this query returns zero rows when I know that I have missing referencing indexes.

I think : regexp_split_to_table(indkey::text, ' ')::smallint AS attnum,

should be : generate_series(1, array_length(indkey,1))::smallint AS attnum,

the join with pg_attributes include attnum but pg_attributes will number the attributes for the index at 1. the pg_index indkey is the physical index to the column within the table. 

thanks for this query. its very helpful.

just added order by clause
