x/sys/unix provides Dup2 on all unix GOOS/GOARCH variants. The ones for
e.g. linux/arm64 or linux/riscv64 just wrap Dup3 as this package
currently does with syscallDup. Thus, use Dup2 from x/sys/unix to
simplify the implementation in this package.
I'm happy to open a PR for this since it would be a minor change that would fix the default behavior of `ginkgo bootstrap` for the builds we're using at my company.
We've just started using [gofumpt](https://github.com/mvdan/gofumpt) instead of gofmt, and ginkgo bootstrap should put the "testing" import at the top of the import in a separate group.
If you don't want this then please feel free to close this issue.
Previously, ginkgo would identify the code locations of the failing
Entry or DescribeTable as part of the
ginkgo/extensions/table/table_entry.go or
ginkgo/extensions/table/table.go files, respectively.

When there are a large number of table entries, it is more desirable to
provide the line numbers of the table and table entry directly to
facilitate jumping to the relevant section of the test code.

Fixes #515
Have a print statement like:

```
_, _ = fmt.Fprintf(GinkgoWriter, "[DEBUG] OUTPUT LINE: %s\n", line)
```

If run with ginkgo cli `ginkgo -v ...` then the output is realtime, lines are printed immediately when test succeeded or failed (as expected).

If run with golang cli `go test -v ...` then:
- No output at all when test succeeded.
- No realtime output when test has failed.

Expected to see realtime output in both succeeded and failed tests using `go test -v`.
I'm looking for a way to run some code for each `Context` but not for the `It`s inside. Example:

```
package main

import (
    . "github.com/onsi/ginkgo"
    . "github.com/onsi/gomega"
)

var _ = Describe("Per Context Setup", func() {
    var outerCount int;

    // Maybe "BeforeEachContext"?
    BeforeEach(func() {
        outerCount = 1;
    })

    Context("Context 1", func() {
        var innerCount int;

        BeforeEach(func() {
            innerCount = 1;
        })

        It("counters are initialized", func() {
            Expect(outerCount).To(Equal(1))
            Expect(innerCount).To(Equal(1))

            outerCount ++;
            innerCount ++;

            Expect(outerCount).To(Equal(2))
            Expect(innerCount).To(Equal(2))
        })
        It("outerCount is still 2", func() {
            Expect(innerCount).To(Equal(1)) // Correct
            Expect(outerCount).To(Equal(2)) // <<-- Id't like this succeed
        })
    })
})
```
Also updates CI configuration to be compatible with modules.

Fixes #629
Adding a `go.mod` module definition for this project would help other module consumers by declaring expected compatible versions and not contributing indirect dependencies.
I am facing an issue of missing few random test spec in reports generated by ginkgo ```RunSpecsWithDefaultAndCustomReporters``` for each ginkgo parallel test run. 

**Current scenario:**

I have three test files [1] and comprises total no of 15 specs. I am calling the test suite [2] through an .PHONY statment [3] ```make test-e2e-all```.

The console result looks good to me, however the generated reports looks weird (missing test specs) for each test i run

[1] https://github.com/openshift/odo/tree/master/tests/e2escenarios
[2] https://github.com/openshift/odo/blob/master/tests/e2escenarios/e2escenarios_suite_test.go#L13
[3] https://github.com/openshift/odo/blob/master/Makefile#L227

Attaching screenshot for your reference
Test run1 reports:
<img width="1429" alt="Screen Shot 2019-11-19 at 5 46 56 PM" src="https://user-images.githubusercontent.com/19851115/69145868-9cf7b980-0af4-11ea-910a-e87212e7576c.png">

Test run2 reports:
<img width="1436" alt="Screen Shot 2019-11-19 at 5 47 54 PM" src="https://user-images.githubusercontent.com/19851115/69145965-d0d2df00-0af4-11ea-9191-99dc48604ce2.png">

Test run3 reports:
<img width="1429" alt="Screen Shot 2019-11-19 at 5 49 01 PM" src="https://user-images.githubusercontent.com/19851115/69146013-e6e09f80-0af4-11ea-8604-a260f232eeed.png">

Updates #622 and adds Windows support as positive side-effect
`GOOS=nacl go build` returns these errors:

```
github.com/onsi/ginkgo/internal/specrunner/spec_runner.go:220:33: undefined: syscall.SIGTERM
github.com/onsi/ginkgo/internal/specrunner/spec_runner.go:245:33: undefined: syscall.SIGTERM
```

and `GOOS=plan9 go build` returns an error:

```
github.com/onsi/ginkgo/internal/remote/syscall_dup_unix.go:10:9: undefined: syscall.Dup2
```

This library is a dependency of [quic-go](https://github.com/lucas-clemente/quic-go) which we use in [Caddy](https://github.com/caddyserver/caddy) and Caddy can no longer compile for NACL or Plan9 because of this.