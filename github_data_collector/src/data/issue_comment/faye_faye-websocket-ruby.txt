Hi, I'm currently struggling to understand how to send immediately a message, without having to wait for the message block to complete.
My case is: 
Suppose I have this:
```
def long_proc
  sleep 5
end
```
and this manager:
```
  ws.onmessage = lambda do |event|
      ws.send(Time.now.to_s)
      long_proc
      ws.send(Time.now.to_s)
    end
```
And on the client side:
```
  ws.on :message do |event|
    p [:message, event.data, Time.now]
  end
```
If I run it, I get 
```
[:message, "2019-12-12 12:01:09 +0100", 2019-12-12 12:01:14 +0100]
[:message, "2019-12-12 12:01:14 +0100", 2019-12-12 12:01:14 +0100]
```
And i receive them both after the completion of the on-message block of the client.

 Is there any way that i missed to immediately send the message (i.e: so that the first message time.now in the client is equal to 12:01:09, not 14?
I'm using this library and I was wondering if there is a way on the server side to find a connected socket via its `object_id`, or send message to a specific socket by its `object_id`? 

I am asking this because I'd like to send messages to specific socket from the server, and wait for the client response via the same socket. Right now I store all of the connected clients on the server in a `map` which is not the best. 
I'd like to store the `object_id`s in redis and just use that information to find the correct socket when the server needs to send a message to a client.

Using this gem with puma and a very simple rack middleware, I was noticing up to 2 seconds of latency between when the server logged that a WS message had been sent and when a browser actually logged receiving it. This can't be due to network latency, because I'm running this on my local computer and I still see the latency.

However, when I switch thin in, the latency is gone, and messages are received within a few ms. How can I go about troubleshooting this issue with puma? Any recommendations?
I'm trying to implement a pub/sub mechanism, but am specifically having trouble implementing a `channel` feature, and I can't find any API to help me...

AFAIK, a `channel` is an abstraction that is not present by default in the WS specification... Could you help me implement such a thing over this gem? 

Any guidance would be much appreciated.

Thanks.
Hi
As the title says, occurred error  'failed: Invalid frame header'

I tried as follows

1. clone your latest master branch
2. move current directory to 'example'
3. install gems by bundlr ('bundle install')
4. access to 'localhost:9292' by chrome
5. open developper tool of chrome and  type `const ws = new WebSocket('ws://localhost:9292')`
     (console tab)
6. occur error `VM131:1 WebSocket connection to 'ws://localhost:9292/' failed: Invalid frame header`

tried environment:
  * OSX Sierra 
  * Google Chrome 65
  * ruby 2.3.1p112 / ruby 2.4.2
  * cleaned gem (removed all gem) before execute them.
EM::Connection should implements a `.ssl_verify_peer` method when you use a `verify_peer: true` option.
http://www.rubydoc.info/github/eventmachine/eventmachine/EventMachine/Connection#ssl_verify_peer-instance_method
So I implement these code.
* add :trust_ca option
* implement `.ssl_verify_peer` on Connection


