**The problem I'm trying to solve:**
<!-- describe the problem that you think hub might help you with -->

I'm constantly creating repos in my organization and really hate having to type out the entire repo name, especially when they get fairly verbose. I would really like to do something like:

```
$ pwd
/Users/me/this-really-really-long-repo-name-that-I-dont-want-to-type
$ git create -p --org WPMedia
```

**How I imagine hub could expose this functionality:**
<!-- e.g. `hub my-new-command --some-flags` -->

Unfortunately `-o` is taken up for "browse" so we'll have to go with `--org` instead. It would be great if you could just change browse to "-b" though although I understand that breaks backward compat.

**Command attempted:**
(hub is aliased to git and used as 'git'. Not shown here for simplicity)
∴hub version --build-options

**What happened:**
hub shows its own version and git's version but does not pass --build-options through
∴hub version --build-options
git version 2.24.1
hub version 2.13.0

**What is supposed to happen:**
Git is supposed to show some useful debugging information
∴git version --build-options
git version 2.24.1
cpu: x86_64
no commit associated with this build
sizeof-long: 8
sizeof-size_t: 8



I'm trying to create a new repo in my organization where I'm not the admin.

When I try `hub create ORGNAME/REPONAME` post initialization I get a message:

> Error creating repository: Forbidden (HTTP 403)
> You need admin access to the organization before adding a repository to it.

I have confirmed that I can create repos via the browser and I have two factor authentication.
**The problem I'm trying to solve:**
`hub release delete` command expects a tag to delete a release. However if a tag was deleted prior with a command like `tag -d tagname` you will end up having untagged releases and I didn't figure out a way to list them or delete them through the `hub` command.

So to replicate, you can do:
1) `hub release create -m "test release" testTag`
2) `git tag -d testTag`
3) `git push origin :refs/tags/testTag` 

Now if you go on github you will see a draft release and if you click on it, the link will be
 `https://github.com/project/repo/releases/tag/untagged-d0afdda21f0d023030ff`. For a moment I hoped that i could use that `untagged-d0afdda21f0d023030ff` as a tag but it didn't eat it.

**How I imagine hub could expose this functionality:**
I quickly peeked that the github api is using the  `release_id` instead of the tag to access a release, not sure how hub is dealing with it, but if it would do something similar that would be great.
**The problem I'm trying to solve:**
Installing `hub` on an Ubuntu based Docker image is impossible, since it is based on Snap. Snap requires to run a local daemon `snapd` which is completely against the principles of Docker.

**How I imagine hub could expose this functionality:**
Just submit the Hub Debian package to Ubuntu and/or provide a Debian package repository for Hub to enable installation via the classical `apt-get` (or similar) tool.
This PR adds the ability to edit existing issues using the same interface as `hub issue create`. 

There is a little duplication between creating and editing issues that could be removed. I'm not convinced that removing the duplication would increase clarity and readability.
**The problem I'm trying to solve:**
<!-- describe the problem that you think hub might help you with -->

Use SSO auth with `hub bb <command>`

**How I imagine hub could expose this functionality:**
<!-- e.g. `hub my-new-command --some-flags` -->

We can use personal access tokens as a workaround there as well as we did with GH.

This is similar to #826 but I wanted to know if we can support auth with BB for environments with SSO configured.

Thank you!
**The problem I'm trying to solve:**
<!-- describe the problem that you think hub might help you with -->
I've started to use `hub pr list` to build a command-line dashboard. It's great so far, and now I want more. :) Specifically, it'd be nice to know if the PR is "Approved" or if there are "Changes requested".

It would also be nice to know the CI status, but that's covered by #2193/#2361.

**How I imagine hub could expose this functionality:**
<!-- e.g. `hub my-new-command --some-flags` -->
I'm imagining another format string, maybe `%R`, which resolves to `Approved` or `Changes requested`.


If anyone's curious, here's my command, which shows title, submitter, last updated, URL, labels, and pending reviewers:

```
$ hub pr list -o updated -f "%<(40)%t  %<(15)%au %<(15)%ur %U% L% rs%n"
Implement PR merge command                friederbluemle  28 minutes ago  https://github.com/github/hub/pull/2280 feature
Checks status hub pr list                 joshuabezaleel  1 day ago       https://github.com/github/hub/pull/2361
add %sM format to ci-status command to..  nozo-moto       6 days ago      https://github.com/github/hub/pull/2377 feature
Transfer Issues to Other Repositories     srafi1          7 days ago      https://github.com/github/hub/pull/2363
allow editing release tag name            Charliekenney23 27 days ago     https://github.com/github/hub/pull/2355 feature
Add install script to use hub more eas..  vibou           1 month ago     https://github.com/github/hub/pull/2259 feature
```

**Command attempted:**
`hub c` (press TAB)

**What happened:**
`checkout  -- checkout a branch or paths to the working tree`
`clone     -- clone a repository into a new directory`
`commit    -- record changes to the repository`
`cat-file                check-mailmap           checkout-index          citool                  column                  commit-tree             credential              credential-osxkeychain  cvsimport
check-attr              check-ref-format        cherry                  clean                   commit                  config                  credential-cache        credential-store        cvsserver
check-ignore            checkout                cherry-pick             clone                   commit-graph            count-objects           credential-netrc        cvsexportcommit`

**More info:**
git version 2.22.0
hub version 2.12.3
x86_64-apple-darwin19.0

## What 
add `%sM` format to ci-status command to show ci-status marker.
like
``` bash
 $ ./hub ci-status --format="%sM"
✔︎✔︎✔︎✔︎✔︎%
```
## Why 
In this program, there are no way to output ci-status marker.