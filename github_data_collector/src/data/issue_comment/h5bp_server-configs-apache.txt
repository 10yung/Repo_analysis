Web Packaging looks promising (I don't think if it's out of scope for H5BP), it is still in draft, but I thought it'd open this issue, as it is likely others will ask about this in the future.

[Web Packaging](https://github.com/WICG/webpackage) "comes in several layers":

- Bundled HTTP Exchanges (Web Bundles):
  https://tools.ietf.org/html/draft-yasskin-wpack-bundled-exchanges

  `.wbn` file extension = `application/webbundle`

- Signed HTTP Exchanges:
  https://tools.ietf.org/html/draft-yasskin-http-origin-signed-responses

  `.sxg` file extension = `application/signed-exchange`
  
  (also defines `application/cert-chain+cbor` but no definition of a file extension ("N/A"), however there are examples in the wild of `cert.cbor` files with this media-type. Perhaps it'll be a convention in the future...)

If/when it's decided this is useful for developers we can add the media-types.
This is a somewhat rough proposal, for [`Expect-CT`](https://httpwg.org/http-extensions/expect-ct.html). 

There's been no public discussion within this repo around Expect-CT, or if this is even needed - if it is deemed unwanted - that is completely fine. I'll perhaps need it myself anyways. :)
Serve WebP files to supported browsers when a matching .webp version of a JPEG/PNG file exists
on the server.

PS: Code copied from [Automating image optimization](https://developers.google.com/web/fundamentals/performance/optimizing-content-efficiency/automating-image-optimization/#how-do-i-serve-webp) Article By Addy Osmani on Google Web Fundamentals
When `Access-Control-Allow-Origin` points to a URL rather than `*`, then `Vary: Origin` should be sent along with the response.

Sources:
- https://fetch.spec.whatwg.org/#cors-protocol-and-http-caches
- https://w3c.github.io/webappsec-cors-for-developers/#use-vary
- https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Access-Control-Allow-Origin#CORS_and_caching
- https://textslashplain.com/2018/08/02/cors-and-vary/

All of the [CORS configs](https://github.com/h5bp/server-configs-apache/tree/master/src/cross-origin) use `*` in the examples. But if anything, there could potentially be a note of this in [`requests.conf`](https://github.com/h5bp/server-configs-apache/blob/master/src/cross-origin/requests.conf)? Or something better than just a note?
Google's [csp-evaluator](https://csp-evaluator.withgoogle.com/) is complaining whenever the fetch-directive `object-src` is missing (unless `default-src` is `'none'`, which is rarely done in the wild). I [reported this to webhint](https://github.com/webhintio/hint/issues/25#issuecomment-488153695) aswell.

`object-src`, per the spec, "acts upon any request made on behalf of an `<object>`, `<embed>`, or `<applet>` element" and can be used to allow [`plugin-types`](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Security-Policy/plugin-types) such as `application/x-shockwave-flash` (also, this directive [may be removed](https://github.com/w3c/webappsec-csp/issues/394) from the web platform).

These elements are largely considered legacy elements that do not recieve new standardized security features such as (`<iframe>`) `sandbox` or `allow` attributes.

The recommendation is documented in https://csp.withgoogle.com/docs/strict-csp.html, and https://csp.withgoogle.com/docs/faq.html#comparison:

> Since setting directives other than `script-src` and `object-src` doesn't increase the protection against cross-site scripting, and it adds adoption and maintenance costs of CSP, we believe most applications should focus on deploying the baseline strict policy as the most high-impact improvement.


I don't have knowledge of how common it is or which other types of plugins may be used. I think people use `<object>` to embed PDFs etc. However, I don't think developers implementing a CSP today is still using these legacy elements.

WDYT?
It was brought to my attention that for example, the [CSP header](https://github.com/h5bp/server-configs-apache/blob/master/src/security/content-security-policy.conf) should be sent for other resources such as XML and workers.

(While we could send any given HTTP header in all responses, it'll contribute to header bloat, and for other headers it may even cause issues)

https://github.com/w3c/webappsec/issues/520
https://github.com/webhintio/hint/issues/2342
Following #183, maybe all `Header` directives in `src/security/` are eligible to the `always` condition.

But the documentation isn't very clear how we should use `always`, so guessing where to place it is not trivial.
When scanning my site through https://securityheaders.com/ I got flagged because I was missing a `Feature-Policy` header: https://scotthelme.co.uk/a-new-security-header-feature-policy/

Would you be interested in adding it to the template? I can make a PR if that's the case.
The [`cache-control`](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Cache-Control) header (which takes precedence over `expires` if present) has been asked about before in [#85](https://github.com/h5bp/server-configs-apache/issues/85) and [#73](https://github.com/h5bp/server-configs-apache/issues/73).

I would like to raise this again because the header provides finer control than `expires`. Also with the addition of the [`immutable`](https://tools.ietf.org/html/rfc8246) directive (see blog posts [1](https://hacks.mozilla.org/2017/01/using-immutable-caching-to-speed-up-the-web/), [2](http://bitsup.blogspot.se/2016/05/cache-control-immutable.html), [3](https://www.keycdn.com/blog/cache-control-immutable/)), we get a performance benefit but also no longer have to set long `max-age` directives for infinite caching.
Current situation in `.htaccess`:

```
<IfModule mod_headers.c>
    Header unset ETag
</IfModule>
FileETag None
ExpiresByType text/html "access plus 0 seconds"
```

This forces the client to reload HTML files regardless of whether or not they have changed.

I propose this:

```
<FilesMatch "(?<!\.html)$">
    <ifModule mod_headers.c>
        Header unset ETag
    </IfModule>
    FileETag None
</FilesMatch>
```

This will make apache generate ETags for HTML files.

Now, in the rare(?) case of server clustering, the client may still be forced to reload as mentioned in https://developer.yahoo.com/performance/rules.html#etags. Without server clustering the client benefits from ETags, and receives a 304 response.

Bottom line: most users will take advantage of this configuration, and the situation is unchanged for the rest.
