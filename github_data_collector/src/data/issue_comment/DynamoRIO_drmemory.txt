https://travis-ci.com/DynamoRIO/drmemory/jobs/277262558
```
47/97 Test #48: pcache ............................***Failed    0.03 sec
<Starting application /home/travis/build/DynamoRIO/drmemory/build_drmemory-dbg-64/tests/pcache (18467)>
<Application /home/travis/build/DynamoRIO/drmemory/build_drmemory-dbg-64/tests/pcache (18467).  Internal Error: DynamoRIO debug check failure: /home/travis/build/DynamoRIO/drmemory/dynamorio/core/arch/arch.c:279 code->commit_end_pc + PAGE_SIZE <= vmcode_get_executable_addr((byte *)code) + GENCODE_RESERVE_SIZE
(Error occurred @0 frags)
version 7.91.18214, custom build
-no_dynamic_options -logdir '/home/travis/build/DynamoRIO/drmemory/build_drmemory-dbg-64/logs/dynamorio' -client_lib '/home/travis/build/DynamoRIO/drmemory/build_drmemory-dbg-64/bin64/debug/libdrmemorylib.so;0;`-batch` `-callstack_style` `0x27` -no_results_to_stderr `-no_check_uninitialized` `-no_count_leaks` -persist_co
0x00007ffcb73702d0 0x00007f0ffcd4fa66
0x00007ffcb7370520 0x00007f0ffce71e11
0x00007ffcb7370570 0x00007f0ffce7256c
0x00007ffcb73705b0 0x00007f0ffce728be
0x00007ffcb7370600 0x00007f0ffce72b9e
0x00007ffcb7370630 0x00007f0ffccc634a
0x00007ffcb7370e60 0x00007f0ffcf606e2
0x00007ffcb7371f10 0x00007f0ffcf0fada>
```
fuzz_threads on Xenial fails with an unaddr:

```
  Error #1: UNADDRESSABLE ACCESS beyond heap bounds: reading 0x0804ebc9-0x0804ebcc 3 byte(s) within 0x0804ebc8-0x0804ebcc
  # 0 libc.so.6!? (0xf7880851 <libc.so.6+0x74851>)
      ??:0
  # 1 libc.so.6!_IO_puts (0xf786b15c <libc.so.6+0x5f15c>)
      ??:0
  # 2 print_buffer (0x080489dc <fuzz_threads+0x9dc>)
      ??:0
  # 3 thread_main (0x08048a6e <fuzz_threads+0xa6e>)
      ??:0
  # 4 libpthread.so.0!start_thread (0xf79c626a <libpthread.so.0+0x626a>)
      /build/glibc-LK5gWL/glibc-2.23/nptl/pthread_create.c:333
  # 5 libc.so.6!clone (0xf78f141e <libc.so.6+0xe541e>)
      ??:0
  Note: @0:00:02.169 in thread 30814
  Note: next higher malloc: 0x0804ebf0-0x0804ebf9
  Note: refers to 0 byte(s) beyond last valid byte in prior malloc
  Note: prev lower malloc: 0x0804ebb8-0x0804ebc9
  Note: instruction: mov (%eax) -> %ecx
  Note: fuzz input for error #1 is stored in file /home/travis/build/DynamoRIO/drmemory/build_drmemory-dbg-32/logs/DrMemory-fuzz_threads.30808.000/fuzz.fuzz_threads.30808.0000.error.1.dat
```

This needs investigation.  For now I'm making Travis green by adding to the wrapper list.
Upgrading Travis to Xenial ends up with these extra errors:

```
 ~~Dr.M~~ 13 unique, 13 total unaddressable access(es)
 ~~Dr.M~~ 13 unique, 14 total uninitialized access(es)
```

A bunch of unaddress which are all like this:
```
  Error #13: UNADDRESSABLE ACCESS beyond heap bounds: reading
  0x08100c92-0x08100c94 2 byte(s) within 0x08100c90-0x08100c94
  # 0 libc.so.6!? (0xf7405885 <libc.so.6+0x74885>)
      ??:0
  # 1 libc.so.6!getenv (0xf73beefc <libc.so.6+0x2defc>)
      ??:0
  # 2 testing::internal::posix::GetEnv (0x080aaffb <app_suite_tests+0x62ffb>)
      /home/travis/build/DynamoRIO/drmemory/tests/app_suite/../../third_party/googletest/include/gtest/internal/gtest-port.h:1654
  # 3 testing::internal::BoolFromGTestEnv (0x080a883c
  <app_suite_tests+0x6083c>)
      /home/travis/build/DynamoRIO/drmemory/tests/app_suite/../../third_party/googletest/src/gtest-port.cc:709
  # 4 __static_initialization_and_destruction_0 (0x080aa8ab
  <app_suite_tests+0x628ab>)
      /home/travis/build/DynamoRIO/drmemory/tests/app_suite/../../third_party/googletest/src/gtest-death-test.cc:85
  # 5 _GLOBAL__sub_I__ZN7testing8internal17kStackTraceMarkerE (0x080aa94e
  <app_suite_tests+0x6294e>)
      /home/travis/build/DynamoRIO/drmemory/tests/app_suite/../../third_party/googletest/src/gtest-typed-test.cc:110
  # 6 app_suite_tests!? (0x08087bf1 <app_suite_tests+0x3fbf1>)
      ??:0
  Note: @0:00:04.753 in thread 30739
  Note: refers to 0 byte(s) beyond last valid byte in prior malloc
  Note: prev lower malloc: 0x08100c78-0x08100c92
  Note: instruction: mov (%eax) -> %ecx
```

Uninits are all like this:
```
  Error #14: UNINITIALIZED READ: reading register eflags
  # 0 libc.so.6!? (0xf7405094 <libc.so.6+0x74094>)
      ??:0
  # 1 libc.so.6!? (0xf73b9800 <libc.so.6+0x28800>)
      ??:0
  # 2 libc.so.6!? (0xf73b9da5 <libc.so.6+0x28da5>)
      ??:0
  # 3 libc.so.6!setlocale (0xf73b3128 <libc.so.6+0x22128>)
      ??:0
  # 4 StringTests_strcasecmp_Test::TestBody (0x08092934
  <app_suite_tests+0x4a934>)
      /home/travis/build/DynamoRIO/drmemory/tests/app_suite/strmem_tests.cpp:159
  # 5 testing::internal::HandleSehExceptionsInMethodIfSupported<> (0x080b5521
  <app_suite_tests+0x6d521>)
      /home/travis/build/DynamoRIO/drmemory/tests/app_suite/../../third_party/googletest/src/gtest.cc:2090
  # 6 testing::internal::HandleExceptionsInMethodIfSupported<> (0x080b0597
  <app_suite_tests+0x68597>)
      /home/travis/build/DynamoRIO/drmemory/tests/app_suite/../../third_party/googletest/src/gtest.cc:2126
  # 7 testing::Test::Run (0x0809cf31 <app_suite_tests+0x54f31>)
      /home/travis/build/DynamoRIO/drmemory/tests/app_suite/../../third_party/googletest/src/gtest.cc:2162
  # 8 testing::TestInfo::Run (0x0809d6fa <app_suite_tests+0x556fa>)
      /home/travis/build/DynamoRIO/drmemory/tests/app_suite/../../third_party/googletest/src/gtest.cc:2338
  # 9 testing::TestCase::Run (0x0809dcc5 <app_suite_tests+0x55cc5>)
      /home/travis/build/DynamoRIO/drmemory/tests/app_suite/../../third_party/googletest/src/gtest.cc:2445
  #10 testing::internal::UnitTestImpl::RunAllTests (0x080a2d53
  <app_suite_tests+0x5ad53>)
      /home/travis/build/DynamoRIO/drmemory/tests/app_suite/../../third_party/googletest/src/gtest.cc:4237
  #11 testing::internal::HandleSehExceptionsInMethodIfSupported<> (0x080b6873
  <app_suite_tests+0x6e873>)
      /home/travis/build/DynamoRIO/drmemory/tests/app_suite/../../third_party/googletest/src/gtest.cc:2090
  #12 testing::internal::HandleExceptionsInMethodIfSupported<> (0x080b14a3
  <app_suite_tests+0x694a3>)
      /home/travis/build/DynamoRIO/drmemory/tests/app_suite/../../third_party/googletest/src/gtest.cc:2126
  #13 testing::UnitTest::Run (0x080a1a09 <app_suite_tests+0x59a09>)
      /home/travis/build/DynamoRIO/drmemory/tests/app_suite/../../third_party/googletest/src/gtest.cc:3871
  #14 main (0x080beef0 <app_suite_tests+0x76ef0>)
      /home/travis/build/DynamoRIO/drmemory/third_party/googletest/src/gtest_main.cc:38
  Note: @0:00:09.675 in thread 30739
  Note: instruction: jnb $0xf7405122
```

That line is this:
```
    ASSERT_EQ(res, 0);
```

Ideally these would be investigated.  For now I'm suppressing them.
Running on win10 with a VS2017-built app using /guard:cf I see this:

```
~~Dr.M~~ Error #1: UNINITIALIZED READ: reading 0x000000bad00ff530-0x000000bad00ff531 1 byte(s)
~~Dr.M~~ # 0 __strncnt                                 [minkernel\crts\ucrt\src\appcrt\string\strncnt.cpp:21]
~~Dr.M~~ # 1 __acrt_LCMapStringA_stat                  [minkernel\crts\ucrt\src\appcrt\locale\lcmapstringa.cpp:58]
~~Dr.M~~ # 2 __acrt_LCMapStringA                       [minkernel\crts\ucrt\src\appcrt\locale\lcmapstringa.cpp:224]
~~Dr.M~~ # 3 setSBUpLow                                [minkernel\crts\ucrt\src\appcrt\mbstring\mbctype.cpp:615]
~~Dr.M~~ # 4 _setmbcp_nolock                           [minkernel\crts\ucrt\src\appcrt\mbstring\mbctype.cpp:716]
~~Dr.M~~ # 5 setmbcp_internal                          [minkernel\crts\ucrt\src\appcrt\mbstring\mbctype.cpp:424]
~~Dr.M~~ # 6 __acrt_initialize_multibyte               [minkernel\crts\ucrt\src\appcrt\mbstring\mbctype.cpp:852]
~~Dr.M~~ # 7 __acrt_execute_initializers               [minkernel\crts\ucrt\src\appcrt\internal\shared_initialization.cpp:25]
~~Dr.M~~ # 8 __scrt_initialize_crt                     [f:\dd\vctools\crt\vcstartup\src\utility\utility.cpp:199]
~~Dr.M~~ # 9 __scrt_common_main_seh                    [f:\dd\vctools\crt\vcstartup\src\startup\exe_common.inl:232]
~~Dr.M~~ #10 KERNEL32.dll!BaseThreadInitThunk
~~Dr.M~~ Note: @0:00:01.203 in thread 12532
~~Dr.M~~ Note: instruction: cmp    (%rax,%rcx) $0x00
```

It looks like strnlen and probably has to be suppressed in the same way as
a "legitimate" erroneous access:
```
0:000> Uf 00007ff6`97f010ba
cfguard!__strncnt+0x6 [minkernel\crts\ucrt\src\appcrt\string\strncnt.cpp @ 21]:
   21 00007ff6`97f010b2 483bc2          cmp     rax,rdx
   21 00007ff6`97f010b5 7409            je      cfguard!__strncnt+0x14 (00007ff6`97f010c0)  Branch

cfguard!__strncnt+0xb [minkernel\crts\ucrt\src\appcrt\string\strncnt.cpp @ 21]:
   21 00007ff6`97f010b7 48ffc0          inc     rax

cfguard!__strncnt+0xe [minkernel\crts\ucrt\src\appcrt\string\strncnt.cpp @ 21]:
   21 00007ff6`97f010ba 803c0800        cmp     byte ptr [rax+rcx],0
   21 00007ff6`97f010be 75f2            jne     cfguard!__strncnt+0x6 (00007ff6`97f010b2)  Branch

cfguard!__strncnt+0x14 [minkernel\crts\ucrt\src\appcrt\string\strncnt.cpp @ 24]:
   24 00007ff6`97f010c0 c3              ret  Branch
```
Similar to #2126, I think, but for a different version (1903).

When running Dr Memory, I get the following output:
```
~~Dr.M~~ Dr. Memory version 2.2.0
~~Dr.M~~ Running "build\Debug\SingularityTrainer.exe"
~~Dr.M~~ Running on an unsupported operating system version: WinVer=105;Rel=1903;Build=18362;Edition=Core. Exiting to trigger auto-generation of system call information. Re-run with -ignore_kernel to attempt to continue instead.
WARNING: Running on an unsupported operating system version.  Attempting to auto-generate system call information...
drsys_find_sysnum_libs: C:\WINDOWS\system32\ntdll.dll is readable
drsys_find_sysnum_libs: C:\WINDOWS\system32\kernelbase.dll is readable
drsys_find_sysnum_libs: C:\WINDOWS\system32\kernel32.dll is readable
drsys_find_sysnum_libs: C:\WINDOWS\system32\gdi32.dll is readable
drsys_find_sysnum_libs: C:\WINDOWS\system32\imm32.dll is readable
drsys_find_sysnum_libs: C:\WINDOWS\system32\user32.dll is readable
drsys_find_sysnum_libs: C:\WINDOWS\system32\win32u.dll is readable
drsys_find_sysnum_libs: C:\WINDOWS\system32\ntdll.dll is readable
drsys_find_sysnum_libs: C:\WINDOWS\system32\kernelbase.dll is readable
drsys_find_sysnum_libs: C:\WINDOWS\system32\kernel32.dll is readable
drsys_find_sysnum_libs: C:\WINDOWS\system32\gdi32.dll is readable
drsys_find_sysnum_libs: C:\WINDOWS\system32\imm32.dll is readable
drsys_find_sysnum_libs: C:\WINDOWS\system32\user32.dll is readable
drsys_find_sysnum_libs: C:\WINDOWS\system32\win32u.dll is readable
Symbol cache directory is "D:\Programs\DrMemory\drmemory\logs\symcache"
Fetching symbols for "C:\WINDOWS\system32\ntdll.dll", attempt #0
Ignoring local _NT_SYMBOL_PATH in next attempt.
Fetching symbols for "C:\WINDOWS\system32\ntdll.dll", attempt #1
Ignoring local _NT_SYMBOL_PATH in next attempt.
Failed to fetch symbols for C:\WINDOWS\system32\ntdll.dll: error 1
~~Dr.M~~ WARNING: application exited with abnormal code 0xc000a004
```
Is it possible that Dr.Memory is not compatible with Visual C++'s /JMC switch? I'm getting a lot of `UNADDRESSABLE ACCESS` issues in `__CheckForDebuggerJustMyCode`. If that's a limitation I think it should be documented on https://drmemory.org/docs/page_prep.html

Dr. Memory is failing to report an unaddressable access for a small app
with a deref of an uninitialized pointer on Mac.

On Linux it's as expected:
```
$ ../../releases/DrMemory-Linux-2.2.0-1/bin64/drmemory -- ./a.out 
~~Dr.M~~ Dr. Memory version 2.2.0
~~Dr.M~~ 
~~Dr.M~~ Error #1: UNADDRESSABLE ACCESS: reading 0x0000000000000020-0x0000000000000028 8 byte(s)
~~Dr.M~~ # 0 repair<>               [/work/drmemory/bugs/segfault-noerror/DEBUG_ME.cpp:158]
~~Dr.M~~ # 1 main                   [/work/drmemory/bugs/segfault-noerror/DEBUG_ME.cpp:189]
~~Dr.M~~ Note: @0:00:01.394 in thread 3769
~~Dr.M~~ Note: instruction: mov    0x20(%rax) -> %rdx
```

But on Mac the error is not reported.

The seg fault is to the same address 0x20:
```
considering to-be-translated instr: mov    0x20(%rax)[8byte] -> %rax
SIGSEGV @0x0000000127137786 (xl8=>0x0000000107e32a1e) accessing 0x0000000000000020
signal interrupted app at xsp=0x00007ffee7dcd850
in event_thread_exit() 1365206
```

Somehow it's adding low addresses as app segments!
```
add new app segment for [0x0000000000000018, 0x0000000000000020)
```

Context:
```
in event_basic_block(tag=0x0000000117693732)
TAG  0x0000000117693732
 +0    L3                      65 8b 0c 25 18 00 00 mov    %gs:0x18[4byte] -> %ecx
                               00
 +8    L3                      31 c0                xor    %eax %eax -> %eax
 +10   L3                      f0 0f b1 0f          lock cmpxchg %ecx (%rdi)[4byte] %eax -> (%rdi)[4byte] %eax
 +14   L3                      0f 85 01 00 00 00    jnz    $0x0000000117693747
END 0x0000000117693732

new basic block @0x0000000117693732 == dyld!_os_nospin_lock_lock+0x0
whole-bb scratch: r1=%rdxspill#0 x0, r2=%rbxspill#1 x0
fastpath: mov    %gs:0x18[4byte] -> %ecx| prop=1 srcsz=4 dstsz=4 checkdef=0 markdef=0 checkunaddr=0
fastpath: xor    %eax %eax -> %eax| prop=0 srcsz=4 dstsz=4 checkdef=0 markdef=1 checkunaddr=0
fastpath: lock cmpxchg %ecx (%rdi)[4byte] %eax -> (%rdi)[4byte] %eax| prop=3 srcsz=4 dstsz=4 checkdef=1 markdef=0 checkunaddr=0
fastpath: jnz    $0x0000000117693747| prop=0 srcsz=3 dstsz=0 checkdef=1 markdef=0 checkunaddr=0
whole-bb scratch: r1=used, r2=used, efl=used
in event_basic_block(tag=0x0000000117693732) translating
TAG  0x0000000117693732
 +0    L3                      65 8b 0c 25 18 00 00 mov    %gs:0x18[4byte] -> %ecx
                               00
 +8    L3                      31 c0                xor    %eax %eax -> %eax
 +10   L3                      f0 0f b1 0f          lock cmpxchg %ecx (%rdi)[4byte] %eax -> (%rdi)[4byte] %eax
 +14   L3                      0f 85 01 00 00 00    jnz    $0x0000000117693747
END 0x0000000117693732

whole-bb scratch: r1=%rdxspill#0 x0, r2=%rbxspill#1 x0
fastpath: mov    %gs:0x18[4byte] -> %ecx| prop=1 srcsz=4 dstsz=4 checkdef=0 markdef=0 checkunaddr=0
fastpath: xor    %eax %eax -> %eax| prop=0 srcsz=4 dstsz=4 checkdef=0 markdef=1 checkunaddr=0
fastpath: lock cmpxchg %ecx (%rdi)[4byte] %eax -> (%rdi)[4byte] %eax| prop=3 srcsz=4 dstsz=4 checkdef=1 markdef=0 checkunaddr=0
fastpath: jnz    $0x0000000117693747| prop=0 srcsz=3 dstsz=0 checkdef=1 markdef=0 checkunaddr=0
whole-bb scratch: r1=used, r2=used, efl=used
event_restore_state: raw pc=0x0000000126d6980f, xl8 pc=0x0000000117693732, tag=0x0000000117693732
translated eflags from 0x0000000000010206 to 0x0000000000010202
restoring per-bb rdx to 0x0000000000000307
restoring per-bb rbx to 0x00007ffee7dcc540
considering to-be-translated instr: movzx  (%rdx)[1byte] -> %rbx
add new app segment for [0x0000000000000018, 0x0000000000000020)
```

The movzx is just a lazy shadow memory init fault.  However, lldb is just a
broken debugger: it goes into an infinite loop and can't go past the fault,
making this a pain to debug.  (I tried to build my own lldb with a fix for
that but never got it to build in xcode...thanks, Apple, for terrible
debugger support.)

drmemory detects any calls to std::cerr as a memory leak

for example:
```cpp
#include <iostream>
using namespace std;

int main() {
  cerr << "example text";
  return 0;
}
```

when compiling and running this with drmemory, this is the following output
drmemory -visual_studio a.exe
```
         Dr. Memory version 2.2.0
         Running "a.exe"
example text
         Error #1: POSSIBLE LEAK 12 bytes
         replace_malloc
             d:\drmemory_package\common\alloc_replace.c(2577):
         libgcc_s_dw2-1.dll!?
             ??:0
         libstdc++-6.dll!?
             ??:0
         libstdc++-6.dll!?
             ??:0
         _fu0___ZSt4cerr
             drMemoryProblem.cpp(7):
         __tmainCRTStartup
             ??:0
         KERNEL32.dll!BaseThreadInitThunk
             ??:0

         ERRORS FOUND:
               0 unique,     0 total unaddressable access(es)
               0 unique,     0 total uninitialized access(es)
               0 unique,     0 total invalid heap argument(s)
               0 unique,     0 total GDI usage error(s)
               0 unique,     0 total handle leak(s)
               0 unique,     0 total warning(s)
               0 unique,     0 total,      0 byte(s) of leak(s)
               1 unique,     1 total,     12 byte(s) of possible leak(s)
```

valgrind, on the other hand, does not display any errors.
I am on windows 10, if that helps provide any context.
Hello,

Thanks a lot for your work on Drmemory!

I'm using msys2+mingw64, and Drmemory reports an error on every variable-length automatic array.

Example:
```
size_t count = 0;
/* ... compute count ... */
int myarray[count]; // Drmemory reports "UNADDRESSABLE ACCESS beyond top of stack"
```
My DrMemory failed With this dump:
         Dr. Memory version 2.2.0
         Running "D:\projects\trunk\iccruntime\bin\Win32\Debug\NimbusConfig.exe -debug -dr_debug"
         Recorded 117 suppression(s) from user C:\Program Files (x86)\Dr. Memory\bin\suppress-default.txt
         Recorded 14 suppression(s) from user D:\projects\DrMemory-suppress.txt
<Application D:\projects\trunk\iccruntime\bin\Win32\Debug\NimbusConfig.exe (23920).  Dr. Memory internal crash at PC 0x040bb639.  Please report this at http://drmemory.org/issues along with the results of running '-debug -dr_debug'.  Program aborted.
0xc0000005 0x00000000 0x040bb639 0x040bb639 0x00000000 0x00001045
Base: 0x70b70000
Registers: eax=0x00001004 ebx=0x00001004 ecx=0x00001004 edx=0x000002a9
	esi=0x00001004 edi=0x0032ea50 esp=0x0032e67c ebp=0x0032e68c
	eflags=0x000
2.2.0-1-(Jul  1 2019 00:42:20) WinVer=63;Rel=;Build=9600;Edition=Professional
-no_dynamic_options -disasm_mask 8 -logdir 'C:\temp\DrMemory\dynamorio' -client_lib 'C:\Program Files (x86)\Dr. Memory\bin\release\drmemorylib.dll;0;-visual_studio -suppress `C:\Program Files (x86)\Dr. Memory\bin\suppress-default.txt` -suppress `D:\projects\DrMemory-suppress.txt` -logdir `C:\temp\DrMemory` -symcache_dir 
0x0032e68c 0x040bb2a0
0x0032e6ac 0x040fa764
0x0032e6d4 0x040f8c23
0x0032e740 0x040fa9b5
0x0032e9f8 0x040fd2aa
0x0032eadc 0x040facad
0x0032eb64 0x040fdca8
0x0032eb80 0x040f8673
0x0032eb94 0x040d07a2
0x0032ebb0 0x040d08a9
0x0032ebd8 0x040d08e7
0x0032ebf8 0x0405c7b6
0x0032ec24 0x0405e7a4
0x0032ec8c 0x0407a89d
0x0032ecc4 0x0406d69f>
