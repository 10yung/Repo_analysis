In src/radio/sx126x/radio.c the function RadioRandom is documented to "disable all interrupts". It does not do that, however.

I compared the implementation with the one from the SX1276, which does seem to disable the radio interrupts before entering reception mode.

The reason I am asking is that I observed very stange behaviour in my application while debugging an application layer bug that caused repeated join attempts even after a successful join.

During a Join, Radio.Random() is used to create a nonce for the join attempt. For some reason attempting to join after having already joined causes a strange chain of events:

The radio is put in reception mode without timeout for random number generation. Then a radio interrupt is generated, and the IRQ status is read. The status is read and it is IRQ_RX_TX_TIMEOUT (it is not clear why, as the radio should have been started without timeout). Since the radio is in rxmode, the callback for rx timeout is called.

Now the LoRaWAN stack is not equipped to handle an RX timeout in this state when the RX-Window is "None", as no RX window was opened yet. By default the stack assumes that RX window 2 timed out.

This RX2 timeout immediately terminates the join attempt on the next call to LoRaMACProcess and makes it fail with RX2 timeout.

I do not understand how a radio interrupt with the timeout flags set is even generated at this moment, but the effect is certainly not proper operation. The inconsistency with the documentation is making this even more suspicious.

There seems to be some kind of race condition involved, as adding a large number of debug prints over the serial wire viewer seemed to change the behaviour.

I tried to add the following command to the start of the RadioRandom function:

SX126xSetDioIrqParams( IRQ_RADIO_NONE,

IRQ_RADIO_NONE,

IRQ_RADIO_NONE,

IRQ_RADIO_NONE );

Initial experiments suggest that this may fix the problem, but without understanding the root cause I cannot be confident about that.

However, I have a few questions:

Why is a timeout interrupt generated, when the radio is put in reception without timeout?

Why is the radio put in single reception mode in the random function? What if some packet is received (probably not even intended for the device)?

Wouldn't the reception stop at that point making the RSSI values useless for random number generation? Shouldnt the radio be put in Rx Continuous mode for generating random data? This might even be a security risk if all an attacker has to do to compromise the random number generator is sending a LoRa packet at the right time.

The SX1261 also has its own random number register and reading that is implemented in the driver. Why is it not used for the RadioRandom function?
I wanted to update stack to  a newer version but multicast channel setup is now changed. New procedure needs an "encrypted multicast key" but it's unclear how to generate this key on both stack and lorawan specification. Explanation about McKEKey on specification;
> Derived from a new root key (GenAppKey) provisioned in the end-device at any time before the deployment of the end-device in the field. LoRaWAN 1.0.x end-devices SHALL use this scheme.
> * McRootKey = aes128_encrypt(GenAppKey, 0x00 | pad16)
> * McKEKey = aes128_encrypt(McRootKey, 0x00 | pad16)

We are using stack and network server configured for a private v1.0.3 network. Is there any way to bypass this key (use one of the other multicast keys instead)? If not can someone further explain how to generate this key?
Thanks.
Hi，all：
    recently,a problem about Lorawan node retransmission confused me , I've found many issues about it in github and repeated to find some information in Lorawan protocol,
    some useful issue about retransmission and their responding records I've referred as following:
1 [uplink fail(re-up) : ](https://github.com/gotthardp/lorawan-server/issues/584)
> Yeah. The server ignores retransmitted frames, so if the FCnt is the same it does not sent anything to backend. Try setting the "FCnt check" in your device profile to "Disabled".
> I tried it in Lora Server ,but not OK.

2 [Confirmed retransmission not acknowledged ：]( https://github.com/brocaar/chirpstack-network-server/issues/272)
> This is by design. The network-server will only confirm an uplink once. Re-transmissions with the same frame-counter are ignored as else this would allow for re-play attacks.
> The network-server can't know if this is a replay attack or re-transmission. I think in LoRaWAN 1.1 this is fixed by hashing the uplink channel index, so that the network-server can detect that the frame-counter did not increment, but that the MIC is unique (given that the re-transmission was done using a different channel).
> LoRaWAN 1.1 has better mechanisms to deal with this, as I already have pointed out in previous comments (adding the channel + DR into account when generating the MIC so that the network-server can distinguish a retransmission from a replay-attack).

3 LoraWAN1.1 protocol 19.1 Uplink Timing Diagram for Confirmed Data Messages：
> If an end-device does not receive a frame with the ACK bit set in one of the two receive windows immediately following the uplink transmission it may resend the same frame with the same payload and frame counter again at least ACK_TIMEOUT seconds after the second reception window. This resend must be done on another channel and must obey the duty cycle limitation as any other normal transmission. If this time the end-device receives the ACK downlink during its first receive window, as soon as the ACK frame is demodulated, the end-device is free to transmit a new frame on a new channel.
**_does the newest Open-Source LoraWAN Server completely solved the question above._**
anybody have some useful suggestion or good idea to solve node retransmission ?

4 Environment :
> End-node open-source LoraMAC-node 4.3.2 and LoraMAC-node 4.4.2
> Gateway : newest Lora-gateway & packet_forwarder
> LoraWAN-Server : newest Lora Server
[https://github.com/Lora-net/LoRaMac-node/blob/87f19e84ae2fc4af72af9567fe722386de6ce9f4/src/mac/LoRaMacConfirmQueue.c#L115](url)
If the request which we wanted is bufferEnd, as element is set to bufferStart, when we do the judgement of while( element != bufferEnd ), the code will execute "else" until element is equal with bufferEnd. When element is equal with bufferEnd, actually we have found the request, but then do the judgement of while( element != bufferEnd ) will fail, then return NULL. The issue is that there is no condition to judge 'request' is equal with 'element' when 'request' is bufferEnd. I think we should add code like: if( element == bufferEnd )..., after executing while.  
If you wanted to force a rejoin from an asynchronous event (e.g. on button press or timer), what is the correct way to force a rejoin in the main loop (class A main.c from examples)?

One scenario where we need this is to recover from a gateway being down for a long time.
Hi all. 
I want to use STM32 device unique ID combination as Device_EUI and Device_Address.
I have a function to get the 3 words of unique ID and create one vector of 8 bytes for Device_EUI and one 32bit variable for Device_Address.
So I run this function at beginning of the program (after basics initialization) but I don't know how to properly change those parameters.
Till now I've been just manually input values in Commissioning.h file.
Does anyone knows best way to do it?
Thanks a lot.
Hi!
this issue was created upon @djaeckle request in #757 issue
If Rx error occurs during reception of packet in RX1 the stack stucks in LORAMAC_TX_RUNNING state.
I actually faced the same problem that Stack stucks in LORAMAC_TX_RUNNING,and function LoRaMacIsBusy() will always return busy and can't send data anymore. I fix the problem with the code in #757 issue but only in USB charging mode. If i switch to battery mode, the problem happened again.It seemed that the problem haven't solved in low power mode.
In usb charging mode (bool UsbIsConnected = true;),i test it for 7days, no problem. In battery mode(bool UsbIsConnected = false;),the problem appears easily especially when cutting off internet access of gateway after node OTAA joined.
My hardware playform is NucleoL073 with SX1278.

Hello everyone. I am going to implement the LoRaMac-Node on my project. My board combinate the STM32L073 Nucleo+SX1272MB2DAS and an ADC7799 which ADC7799 is for data-sampling and SX1272 will send the data to the PC. 
Now LoRaMac works for my board, so I want to add my AD7799 code to the project. But when I initialized the SPI2 in board.c using "SpiInit( &SPI2, SPI_2, AD7799_MOSI, AD7799_MISO, AD7799_SCLK, AD7799_NSS );". There is an error show:'..\board.c(169): error:  #158: expression must be an lvalue or a function designator
  				SpiInit( &
PI2, SPI_2, AD7799_MOSI, AD7799_MISO, AD7799_SCLK, AD7799_NSS );'

The SPI2 is defined as '#define SPI2                ((SPI_TypeDef *) SPI2_BASE)' in stm32l073xx.h 

So what's wrong with me? Any help will be appreciated.
Hi ,
I'm trying to get the fuota-test-01 example to work. Steps i followed.
1. Created a device on the loraserver (OTAA).
2. Waited for the device to Join via OTAA.
3. After joining created a firmware update job using "create frimware update job" button .

After this i dont see "McGroupSetupReq & Ans" happening. after sometime i get a error message saying "The device failed to provision the remote multicast setup". (attached image)

Project :  fuota-test-01
Board : B-L072Z-LRWAN1
Gateway : n-fuse 868Mhz (IN865-867 region).
Server: loraserver

I
![image](https://user-images.githubusercontent.com/56333798/69245791-81acad00-0bcd-11ea-9c88-92b59b9b4c9d.png)

Hi,

The UART RX is not working only the 1st char is received.

Suspect this is because of the way the UART interrupt is being handled...
The repeated call to `HAL_UART_Receive_IT` inside `HAL_UART_RxCpltCallback` is doomed to fail because of the way the ST UART HAL code works. There are various entries about this on ST forums and Stackoverflow too.

Can this be reworked to implement a workaround for those shortcomings? Or maybe switching to DMA...