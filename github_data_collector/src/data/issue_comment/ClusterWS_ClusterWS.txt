benchmark between socket io, ws-wrapper and this... im exploring what ws should I use  for fun xD
In my verifyConnection code, I am calling an api,  After the api returns, I try to set next(true) but connection is closed.  I am testing a node server app to node client app.

my code:

function Worker() { 
    // Get websocket server
    const wss = this.wss;
    // Get http/https server
    const server = this.server;

    wss.setMiddleware('verifyConnection', (info, next) => {
         console.log('verifyConnection') // ex: https://localhost
         //console.log(info.req.headers.authorization) // ex: https://localhost

         var tmp = info.req.headers.authorization.split(' ');   // Split on a space, the original auth looks like  "Basic Y2hhcmxlczoxMjM0NQ==" and we need the 2nd part

        var buf = new Buffer.alloc(476,tmp[1], 'base64'); // create a buffer and tell it the data coming in is base64
        var plain_auth = buf.toString();        // read it back out as a string

        //console.log("Decoded Authorization ", plain_auth);

        // At this point plain_auth = "username:password"

        var creds = plain_auth.split(':');      // split on a ':'
        //var username = creds[0];
        var accessToken = creds[1];

        request.get('https://dev-nexx-domain.simpaltek.com/api/Public/AuthTest/Ping', {
          'auth': {
            'bearer': accessToken
          }
        }, (err, res, body) => {
                //next(true);

        if (err) { return console.log(err); }
            //console.log(body);

            if(body == 'ALIVE'){
                console.log('authenticated!');
                varNext(true);
            } else {
                console.log('connection rejected!');
                next(true);
            }
  
        });

      }
    );

log error:

error:  { Error: socket hang up
    at createHangUpError (_http_client.js:323:15)
    at Socket.socketOnEnd (_http_client.js:426:23)
    at Socket.emit (events.js:203:15)
    at endReadableNT (_stream_readable.js:1145:12)
    at process._tickCallback (internal/process/next_tick.js:63:19) code: 'ECONNRESET' }
disconnected



### Submitting
- [ ] Bug
- [X] Question
- [ ] Suggestion
- [ ] Other

### Details 
Hi man, today I migrate from Apache2 to nginx because the number of client connected to websocket server is increased and because I use Apache2 proxy_pass to redirect all requests to NodeJS.

Before of that I've this Apache configuration on my server:

```
		<Location /api>
			RewriteEngine On

			RewriteCond %{HTTP:Upgrade} websocket               [NC]
			RewriteRule /(.*)           wss://localhost:3002/$1  [P]

			ProxyPass https://127.0.0.1:3002
			ProxyPassReverse https://127.0.0.1:3002
		</Location>

```

This work fine with Apache and ClusterWS.

Now in Nginx I translate it to:

```
    location /ws/ {
        access_log on;
        proxy_pass https://127.0.0.1:3002/;    <--- THE PROBLEM IS HERE
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "Upgrade";
        proxy_set_header Proxy "";
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header Host $host;
        proxy_set_header X-NginX-Proxy true;
        proxy_cache_bypass $http_upgrade;
    }
```

The problem is that nginx does not support proxy_pass on wws or ws.
Now when the requests are redirect to my ClusterWS aren't handled by websocket but by default application.

How I can bypass or solve this problem?

### Submitting
<!-- 
Select from following by placing `x` between brackets, ex: 
  - [x] Bug (do not forget to remove space after/before `x`)
-->
- [x] Bug
- [x] Question
- [ ] Suggestion
- [ ] Other

I need to use Redis for token blacklisting, but the code below causes the connection to be closed every time. 
How to make it work with Redis callback?


```
this.wss.addMiddleware(Middleware.verifyConnection, (info, next) => {
	const token = this.getTokenFromUrl(info.req.url);
	if (!token) {
		return next(false);
	}

	let decodedToken: any;
	try {
		decodedToken = jwt.verify(token, process.env.JWT_SECRET);
	} catch (err) {
		return next(false);
	}

	const id = decodedToken.jti;
	if (!id) {
		return next(false);
	}
	Redis.client.exists(id, (err: Error, res: any) => {
		if (err) {
			return next(false);
		}
		if (res) {
			return next(false);
		}
		set(info.req, 'user', decodedToken);
		return next(true);
	});
});

```

```
this.wss.on('connection', (socket: SocketWS, req: IUserAuthRequest) => {
	console.log(`Client connected`);
	console.log(req.user);
	socket.on('close', (code: any, reason: any) => {
		console.log(`Client disconnected ${reason} ${code}`);
	})
});
```

![InkedScreenshot_3_LI](https://user-images.githubusercontent.com/53662988/62416240-47bb9900-b626-11e9-8b10-b56adcb5a47c.jpg)

### Submitting
<!-- 
Select from following by placing `x` between brackets, ex: 
  - [x] Bug (do not forget to remove space after/before `x`)
-->
- [ ] Bug
- [ ] Question
- [ ] Suggestion
- [x] Other

### Details 
<!-- 
Describe your bug, question, suggestion below.
In case of bug do not forget to mention:
      - Node version, 
      - ClusterWS version,
      - Way(s) to reproduce
-->

Is there any plan about providing more language of document?

### Submitting
<!-- 
Select from following by placing `x` between brackets, ex: 
  - [x] Bug (do not forget to remove space after/before `x`)
-->
- [ ] Bug
- [x] Question
- [x] Suggestion
- [ ] Other

### Details 
<!-- 
Describe your bug, question, suggestion below.
In case of bug do not forget to mention:
      - Node version, 
      - ClusterWS version,
      - Way(s) to reproduce
-->

I would like a way to programmatically stop the server. Usually this would be done with a `close` or `kill` method which would terminate all existing connections then unbind from the port. However, it seems that the `ClusterWS` class does not have such a method.
Usually the websocket connected is available, but today it report a issue here is :

clusterws.min.js:1 WebSocket connection to 'wss://wss.amberainsider.com/birdstrx' failed: Error in connection establishment: net::ERR_CONNECTION_RESET
### Submitting
<!-- 
Select from following by placing `x` between brackets, ex: 
  - [x] Bug (do not forget to remove space after/before `x`)
-->
- [ ] Bug
- [x] Question
- [ ] Suggestion
- [ ] Other

### Details 
What's the suggested broker-per-worker ratio? Like, "if you want to spawn X workers, you should use Y brokers". I'm asking because I noticed sometimes the worker will show an alert that it could not find any broker, so I'm assuming it's something related to it.


### Submitting
<!-- 
Select from following by placing `x` between brackets, ex: 
  - [x] Bug (do not forget to remove space after/before `x`)
-->
- [ ] Bug
- [ ] Question
- [X] Suggestion
- [ ] Other

### Details 
<!-- 
Describe your bug, question, suggestion below.
In case of bug do not forget to mention:
      - Node version, 
      - ClusterWS version,
      - Way(s) to reproduce
-->
Pass custom logger to the ClusterWS instance with mainly used 2 functions `error`, `info` ex:

```js
new ClusterWS({
logger: {
  error: (msg) => {
      console.log(msg)
   },
  info: (msg) => {
      console.log(msg)
  }
}
})

```

It is useful if you use some kind of logger system such as Papertrail to easily track logs coming from ClusterWS.



### Submitting
<!-- 
Select from following by placing `x` between brackets, ex: 
  - [x] Bug (do not forget to remove space after/before `x`)
-->
- [ ] Bug
- [ ] Question
- [x] Suggestion
- [ ] Other

### Details 
<!-- 
Describe your bug, question, suggestion below.
In case of bug do not forget to mention:
      - Node version, 
      - ClusterWS version,
      - Way(s) to reproduce
-->
Add option to the ClusterWS to specify different path than root for WebSocket connections ex:

```js

new ClusterWS({
    wssUrl: "/socket"
})

```

