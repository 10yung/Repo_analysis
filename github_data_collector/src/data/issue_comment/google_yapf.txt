Related to #579 

There's a YAPF demo being used officially in the README.md:  https://yapf.now.sh/

Source code of the online demo: https://github.com/jpadilla/yapf-online

If we take a look at the Pipfile: https://github.com/jpadilla/yapf-online/blob/master/Pipfile

We can see the online demo is using yapf version 0.20.0.

This is what the "facebook" style looks like in 0.20.0:

![image](https://user-images.githubusercontent.com/6444116/72661408-975d0980-39a7-11ea-802b-588ab168b161.png)

Notice that in the yapf-formatted code (below), the array list of dictionary entries is neatly split, and there is no trailing comma in the list.

```
x = {
    'a': [
        {
            'a': {
                'a': 37,
                'b': 42,
                'c': 927
            },
            'b': 42,
            'c': 927
        }, {
            'a': 37,
            'b': 42,
            'c': 927
        }, {
            'a': 37,
            'b': 42,
            'c': 927
        }
    ]
}

y = 'hello ' 'world'
z = 'hello ' + 'world'
a = 'hello {}'.format('world')


class foo(object):
    def f(self):
        return 37 * -2

    def g(self, x, y=42):
        return y


def f(a):
    return 37 - a[42 - x:y**3]

```

I'm currently using yapf version 0.29.0, installed using Python 3.8.0 64-bit, through `python -m pip install yapf`. The "facebook" style used in yapf 0.29.0 is incorrectly formatted, as shown in the code below. The code is identical to the code used in the online demo: 

```
x = {
    'a':
        [
            {
                'a': {
                    'a': 37,
                    'b': 42,
                    'c': 927
                },
                'b': 42,
                'c': 927
            },
            {
                'a': 37,
                'b': 42,
                'c': 927
            },
            {
                'a': 37,
                'b': 42,
                'c': 927
            },
        ]
}

y = 'hello ' 'world'
z = 'hello ' + 'world'
a = 'hello {}'.format('world')


class foo(object):
    def f(self):
        return 37 * -2

    def g(self, x, y=42):
        return y


def f(a):
    return 37 - a[42 - x:y**3]

```

Notice how the array list of dictionary entries are formatted in a weird way, and I think this is a regression from what is essentially a neatly formatted code.

No yapf_test test cases were failing, and PEP8 did not care about the indentation layout of the array list. However, from a readability standpoint, near the closing bracket of the array list, you will see an incorrectly indented ], which is indented twice.

That is the main problem of this issue. There seems to be some inconsistent list formatting that, somehow, the test cases aren't catching.
With google style, yapf is trying to reformat this:
```python
{
    'this_is_long_enough_to_require_a_hanging_indent':
        this_is_long_enough_to_require_a_hanging_indent,
    'foo': 
        # Fooooosdf sdkfjdklsfj dsklf jdsklfjdsklfj dsklfj sdklfjdskl fjdskl
        # fjdskl fjdskl fjdsklfj dklsfjdkls fjdsklfjdsklfjdskl.
        True,
}
```

Like this:

```python
{
    'this_is_long_enough_to_require_a_hanging_indent':
        this_is_long_enough_to_require_a_hanging_indent,
    'foo':  # Fooooosdf sdkfjdklsfj dsklf jdsklfjdsklfj dsklfj sdklfjdskl fjdskl
  # fjdskl fjdskl fjdsklfj dklsfjdkls fjdsklfjdsklfjdskl.
        True,
}
```
With Google style, yapf produces this:

```python
{
    'a':
        aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa(bbbbbbbbb
                                                                     ),
}
```

I'd expect the function argument to be on the next line with the parenthesis, like this:

```python
{
    'a':
        aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa(
            bbbbbbbbb),
}
```
I am suggesting options like:

- list entry on new line:
```
some_list = ['asdf','asdf']
```
to
```
some_list = [
    'asdf',
    'asdf'
]
```
- force comma after last entry:
```
some_list = [
    'asdf',
    'asdf'
]
```
to
```
some_list = [
    'asdf',
    'asdf',
]
```
- space list items:

```
some_list = ['asdf','asdf']
```
to
```
some_list = [ 'asdf', 'asdf' ]
```
options would also make sense to cover dictionaries.

Best Regards
This is what I have:
```
s = ['here', 'is', 'a', 'longish', 'array', 'literal']
```
and this is what I get with `yapf --no-local-style --style='{column_limit=40,split_all_top_level_comma_separated_values=True}'`
```
s = [
    'here',
    'is',
    'a',
    'longish',
    'array',
    'literal'
]
```

But what I'd like is
```
s = ['here',
     'is',
     'a',
     'longish',
     'array',
     'literal']
```

The real issue is the break after the `[`, I can't figure out any way to remove this. I tried  `split_before_expression_after_opening_paren=False`, I tried all kinds of stuff, penalties, etc., and no matter what I always get a break after the `[`.

Any suggestions?

Sometimes, if we add parentheses to an expression, yapf gives a better reformatting. Here's an example.

Using this config:

```
[style]
dedent_closing_brackets = true
```

## Without surrounding parentheses

Input code:
```
if aaaaaaaaaaaaaaaaa(bbbbbbbbbbbbbbbbbb, ccccccccccccc) and dddddddddddddddd(eeeeeeeeeeeeeeeeee) == fffffffffffffffffffff:
    pass
```

Reformatted by yapf:

```
if aaaaaaaaaaaaaaaaa(
    bbbbbbbbbbbbbbbbbb, ccccccccccccc
) and dddddddddddddddd(eeeeeeeeeeeeeeeeee) == fffffffffffffffffffff:
    pass
```

yapf reuses the parentheses of the aaa* function to keep the line continuation, which is clever, but it doesn't look as good as the next reformatting.

## With surrounding parentheses

I'm adding parentheses to the input code to "hint" yapf to reformat more:

```
if (aaaaaaaaaaaaaaaaa(bbbbbbbbbbbbbbbbbb, ccccccccccccc) and dddddddddddddddd(eeeeeeeeeeeeeeeeee) == fffffffffffffffffffff):
    pass
```

yapf now gives the following output:

```
if (
    aaaaaaaaaaaaaaaaa(bbbbbbbbbbbbbbbbbb, ccccccccccccc)
    and dddddddddddddddd(eeeeeeeeeeeeeeeeee) == fffffffffffffffffffff
):
    pass
```

which looks much better.

yapf should be able to add parentheses by itself.
Hi,

https://github.com/dseomn/pepper-music-player/commit/23b7001d3d054b950d8f42ef48eb828ba82fc9d4 is formatted with yapf 0.28.0, google style, and it looks right to me. The CI ran with yapf 0.29.0 though, and it wanted to change the indent in a way that seems wrong to me: https://github.com/dseomn/pepper-music-player/runs/380708720

I tried coming up with a simpler case to reproduce the issue, and I've got one, but it seems unrelated to the change above, so I don't think I understand what's happening at all. Anyway, this passes 0.28.0 with google style, but fails on 0.29.0:

```python
def f(
        a: str,
        b: str,
):
    pass
```

However, this passes both 0.28.0 and 0.29.0:

```python
def f(
        a: str,
        b: str,
) -> None:
    pass
```

I don't understand what's going on here at all, but it seems like a bug to me.
Formatting this with the google style:

```python
for x in f(a, (b,),): pass
```

Results in this:

```python
for x in f(
        a,
    (b,),
):
    pass
```

Shouldn't the `(b,),` line be indented to match `a,`?
This PR make `CONTINUATION_ALIGN_STYLE=FIXED` and `CONTINUATION_ALIGN_STYLE=VALIGN-RIGHT` option available for indenting with space.

Ref: #769 

Compare to previous PR (#774) this one should solve the extra line break issue.

--------

Changes made:

* let new line indent generation method in format decision be continuation
  align style aware
* simplify tab replacement in format token as styling logic moved to format decision mostly
This is a very **minor** bug, as YAPF is mainly used with **a file** or a **directory** passed as a parameter. But in case of using stdin for a code with **\r\n** (Windows EOL) it can break your code.

**How to reproduce**
Use these code lines (with **Windows EOL**):
```
def foo():
    return \
        {
        a:1
        }
```

**1st variant:**
1) run `yapf` in `cmd.exe` on Windows with `--style=google --lines=1-1` 
2) type the code above 
3) press ^Z (ctrl+z)

**2nd variant:**
 cat test.py | python  -myapf --style=google --lines=1-1

You will see that formatting changed:

```def foo():
    return  <---- (backslash lost)
        {
        a: 1 <---- (space added?)
        }
````

**With Linux newlines **(\n)** everything works fine**

Not able to get why does this problem happen from the first point of view.
I appreciate if you will help to understand the issue.


