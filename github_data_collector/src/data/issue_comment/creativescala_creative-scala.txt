Bumps [jquery](https://github.com/jquery/jquery) from 2.1.1 to 3.4.1.
<details>
<summary>Commits</summary>

- [`75f7e96`](https://github.com/jquery/jquery/commit/75f7e963708b60f37a42b777f35825d33c4f8e7a) 3.4.1
- [`7dddb19`](https://github.com/jquery/jquery/commit/7dddb19ca4bca9685adb734c76dcf72c3f610007) Core: Make isAttached work with iOS 10.0-10.2
- [`6c1e7db`](https://github.com/jquery/jquery/commit/6c1e7dbf7311ae7c0c31ba335fe216185047ae5f) Event: Prevent leverageNative from registering duplicate dummy handlers
- [`24d71ac`](https://github.com/jquery/jquery/commit/24d71ac70406f522fc1b09bf7c4025251ec3aee6) Event: Fix handling of multiple async focus events
- [`b4fadc9`](https://github.com/jquery/jquery/commit/b4fadc9b5487bc4274f062c39573061969f5e8c9) Build: Test on Node.js 12, stop testing on Node.js 6 & 11
- [`0d4af52`](https://github.com/jquery/jquery/commit/0d4af5293449722fe873bc1a4b462a857dbbe58e) Build: Fix unresolved jQuery reference in finalPropName
- [`22caea8`](https://github.com/jquery/jquery/commit/22caea8149fc1049ac05b9fab8242a07f25a580c) Build: Updating the 3.4-stable version to 3.4.1-pre
- [`59ea765`](https://github.com/jquery/jquery/commit/59ea7659d433a4a025a25a92c1ed350726e09f76) Release: update AUTHORS.txt
- [`7c1ef15`](https://github.com/jquery/jquery/commit/7c1ef1512b3a6e5af177803aca68e268bc4c64b9) Release: update version to 3.4.0-pre
- [`d940bc0`](https://github.com/jquery/jquery/commit/d940bc063cd5ae09bf52067bbe046fda88f1f687) Build: Update Sizzle from 2.3.3 to 2.3.4
- Additional commits viewable in [compare view](https://github.com/jquery/jquery/compare/2.1.1...3.4.1)
</details>
<details>
<summary>Maintainer changes</summary>

This version was pushed to npm by [timmywil](https://www.npmjs.com/~timmywil), a new releaser for jquery since your current version.
</details>
<br />

[![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=jquery&package-manager=npm_and_yarn&previous-version=2.1.1&new-version=3.4.1)](https://help.github.com/articles/configuring-automated-security-fixes)

Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.

[//]: # (dependabot-automerge-start)
[//]: # (dependabot-automerge-end)

---

<details>
<summary>Dependabot commands and options</summary>
<br />

You can trigger Dependabot actions by commenting on this PR:
- `@dependabot rebase` will rebase this PR
- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it
- `@dependabot merge` will merge this PR after your CI passes on it
- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it
- `@dependabot cancel merge` will cancel a previously requested merge and block automerging
- `@dependabot reopen` will reopen this PR if it is closed
- `@dependabot ignore this [patch|minor|major] version` will close this PR and stop Dependabot creating any more for this minor/major version (unless you reopen the PR or upgrade to it yourself)
- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)
- `@dependabot use these labels` will set the current labels as the default for future PRs for this repo and language
- `@dependabot use these reviewers` will set the current reviewers as the default for future PRs for this repo and language
- `@dependabot use these assignees` will set the current assignees as the default for future PRs for this repo and language
- `@dependabot use this milestone` will set the current milestone as the default for future PRs for this repo and language

You can disable automated security fix PRs for this repo from the [Security Alerts page](https://github.com/creativescala/creative-scala/network/alerts).

</details>
Hi,

I was working through the material myself to prepare for teaching it, and I found a lot of little mistakes.
I got until chapter 9, here's everything I found.

2.4.0.4
- The question is full of exception output which confuses the question
- The solution starts with `scala mdoc 1 + 2` which doesn't belong there
- I am a bit surprised by String.indexOf being introduced here without any explanation of what indexOf does. It will be used as an example later in the book so it might help to clarify this.

3.1
- The example code `Image.circle(10)` is shown twice.

3.2
- The example code `(Image.circle(10).beside(rectangle(10, 20))).draw()` does not compile. It should be `(Image.circle(10).beside(Image.rectangle(10, 20))).draw()`
- It says `Doodle contains several layout methods for combining images, described in tbl. 多tbl:pictures:layout?. ` That table reference is broken and so is the table shown under it doesn't render correctly. (This looks slightly different in the pdf view vs the html view but there's a problem in both)
- All examples in the (broken) table fail to compile, because of the same reason noted above: `below(circle(20))` won't work, it should be `below(Image.circle(20))`, unless you import Image._ first but it doesn't say anywhere to do so.

3.3
- Another broken table, this time 多tbl:pictures:color?

3.4 
- The title of the section is part of the example code.

3.5
- Around this time I started running into an annoyance with trying out the example code in the console: when you paste multiline code into the REPL console (not with :paste but with the OS paste function) in some cases it seems to attempt to evaluate each line as its own expression. I am not entirely sure what causes this or what to do about this though.

3.5.3
- I don't know if something changed in Doodle but I keep getting different pictures if I run the examples than shown in Creative Scala. The difference appears to be that the example code uses Image.circle() as if the param is the radius, while actually it is the diameter. Note that I did clone the template from github listed in the installation instructions. See attached images.
This happens throughout the entire book.
![image1](https://user-images.githubusercontent.com/27868686/67160490-a1904d00-f351-11e9-9342-5957d9792243.png)
![image2](https://user-images.githubusercontent.com/27868686/67160499-b40a8680-f351-11e9-8c43-a36213cd7572.png)


3.6.1
- Figure 15 does not show "Archery target with a stand" as both the description and the following exercises implies. It shows a coloured in target instead. So the picture is wrong.

4.1
- The example with :paste is a bit strange for using Example.scala since if you put pastable code in Example.scala then on (accidental) reload of sbt you'll get a compiler error on starting the console (as explained in 4.2). Using a file that won't get compiled (e.g. something with a filename without the .scala extension) would be much clearer here.

4.2
- At some point it might be good to mention an sbt reload is needed every time Example.scala is changed if you want to use it from the console.

5
- The chapter intro has the wrong styling, making it so words are cut off at weird places.

5.2
- It feels like the "Madness to our methods" exercise doesn't really explain what it expects the student to do, the solution link kinda comes out of nowhere.

6.2
- The exercise 'halve' has a visible `scala mdoc` in the solution.

7.1
- The exercise 'stacked boxes' does not show stacked boxes in the image (fig 22). Instead it shows a line of boxes. Also, while the solution says to change `beside` to `above`, the code example still says `beside`.

7.6
- `We could also make the fill color a function n` should probably be `a function OF n`.
- The concentric circles exercisse makes the problem I wrote about in 3.5.3 really obvious. To fix this case, not only the circle size should be doubled but also the amount by which the circle gets increased each recursive call.

8.2
- Literally says "insert picture here" but you probably already knew that. :)
- Another broken table view.

8.6
- The exercise "Function literals" has another `scala mdoc` in the solution.

8.8.3
- The link to Flowers.scala is broken.

9.1.1
- Broken figure link in the text: 多fig:pictures:open-closed-paths?.
- Broken table link 多tbl:sequences:path-element?. and also broken table.

9.3.2
- Annoyingly, the Scala REPL doesn't show the contents of a range (anymore), 1 until 3 is not shown as `(1, 2)` but as `Range 1 until 3`. You have to convert it to see it as a list.

9.3.3
- "If we try to create a Range over Double we get an error." No, not really. Not in the Scala version in your template project at least.
```
scala> 0.0 to 10.0 by 1.0
warning: there was one deprecation warning (since 2.12.6); for details, enable `:setting -deprecation' or `:replay -deprecation'
res2: scala.collection.immutable.NumericRange[Double] = NumericRange 0.0 to 10.0
```
- Also, you introduce the 'to' method here without explaining it, it was 'until' until now. 'to' is finally introduced later on in 9.3.4.

9.4
- The solution at the bottom has a broken image reference.
There's a box at the start of chapter 3 saying:

> If you run the examples from the SBT console within Doodle they will just work. If not, you will need to start your code with the following imports to make Doodle available.

> ```mdoc scala import doodle.core._ import doodle.core.Image._ import doodle.syntax._ import doodle.jvm.Java2DFrame._ import doodle.backend.StandardInterpreter._ ```

That `mdoc scala` at the beginning shouldn't be there.

 Figure22 is not stacked boxes now. It is same as figure 21.
This is a good textbook, thank you.
I modified codes in Exercise: Stacking Boxes.

I think I have to modify figure22, but I can't do it.
(Because figure22 is not stacked boxes now. It is same as figure 21)
So I will create an issue of this.
I was puzzled not to find it under https://github.com/creativescala
https://github.com/underscoreio/creative-scala/blob/develop/src/pages/programs/names.md#exercises--

## original

```scala
object One {
  val a = b - 1
  val b = a + 1

  val answer = a + b
}
```

> Trick question! This code doesn't work. Here `a` and `b` are defined in terms of each other which leads to a circular dependency that can't be resolved.

## problem

I think the reason because this code doesn't work is actually two folds.
1. Circular declaration itself is not forbidden with Scala. It just requires a type annotation on `b` as `val b: Int = a + 1`.
2. The reason it doesn't "work", as in it will actually return incorrect value is because `val a = b - 1` is referencing `b` before it is initialized, which seems to be treated as `0`. Making `answer` into `(0 - 1) + (0 - 1 + 1)`, which is `-1`.

```scala
scala> object One {
     |   val a = b - 1
     |   val b: Int = a + 1
     |
     |   val answer = a + b
     | }
<console>:12: warning: Reference to uninitialized value b
         val a = b - 1
                 ^
defined object One

scala> One.answer
res1: Int = -1
```

## expectation

If we want to expose the readers to `val` initialization order issue, it might be worth changing the exercise to:

```scala
object One {
  val a = b - 1
  val b = 10

  val answer = a + b
}
```

and note that fact that without `-Xfatal-warnings` one could end up with incorrect answer?

https://github.com/underscoreio/creative-scala/blob/develop/src/pages/pictures/exercises.md

## original 

> For bonus credit add a stand so we can place the target on a range, as shown in `[@fig:pictures:target2]`.

## problem

https://github.com/underscoreio/creative-scala/blob/develop/src/pages/pictures/target2.svg shown is actually a target with red and white color, not a stand.

## expectation

Correct the image.



https://github.com/underscoreio/creative-scala/blob/develop/src/pages/pictures/images.md#i-go-round-in-circles--

## original

> Create circles that are 1, 10, and 100 units wide. Now draw them!

> circle(1)

## problem

If the passed in parameter is radius, then `circle(1)` would draw circle with 2 unit width.

## expectation

I'd think the following would give the circle with `1` width:

```scala
circle(0.5)
```

Am I understanding this wrong?

https://www.creativescala.org/creative-scala.html#values-are-objects 2.2.2 Operators says:

```scala
1 + 2
// res4: Int = 3

1.+(2)
// res5: Int = 3
```

> This second way of calling a method is known an *operator* style.

I've never heard of this name before. Is this "operator style" term used somewhere else? I am not sure if I'd associate dot-and-paren style more with "operator" than the infix notation, since operator precedence etc would affect infix notation more.
