This change addresses a bug in which tasks with a duration of `.allDay` were not properly captured by `OCKSchedule`'s `events(from:to:)` method.


```swift
let morning = Calendar.current.startOfDay(for: Date())
let breakfast = Calendar.current.date(byAdding: .hour, value: 7, to: morning)!
let lunch = Calendar.current.date(byAdding: .hour, value: 12, to: morning)!
let dinner = Calendar.current.date(byAdding: .hour, value: 18, to: morning)!
let allDay = OCKScheduleElement(start: breakfast, end: nil, interval: DateComponents(day: 1), text: "Daily", duration: .allDay)
let schedule = OCKSchedule(composing: [allDay])

// This should return 1 event. It was incorrectly returning 0.
let events = schedule.events(from: lunch, to: dinner)
```
Is there any documentation around how to incorporate CareKit bridge in an existing project to a custom cloud backend, perhaps Firebase? The WWDC session only talked about third-party vendors and did not link to any resources that describe how to build a custom solution.
Would it be possible to create a slider view as in the pasted picture? We could something similar to an OCKButtonLogTaskViewController but instead of the instructions that appear above the cell with the button, we could have a slider to log something like pain level.
![image](https://user-images.githubusercontent.com/13545391/66924063-f4879e80-eff7-11e9-854c-16a2fd51256f.png).
This is not an issue but feature request. I am not sure where else to ask for a feature request.


Add functionality that makes it possible to display tasks that are linked with HealthKit and include the completion state in adherence value calculations.
Hi, I just started looking into CareKit and ResearchKit and it's pretty awesome what they offer out of the box! üôèüèª

I think the stable branch should point to 20bd47bda72155ffd45ada291edc668682a17652 though, i.e. the latest commit before 2.0 starts.

Otherwise a simple app using the `OCKCareCardViewController` like below crashes.

```
import UIKit
import CareKit

class ViewController: UINavigationController {
    lazy var carePlanStore: OCKCarePlanStore = {
        let fileManager = FileManager.default
        let urls = fileManager.urls(for: .documentDirectory, in: .userDomainMask)
        let url = urls[0].appendingPathComponent("carePlanStore")
        
        if !fileManager.fileExists(atPath: url.path) {
            try! fileManager.createDirectory(at: url, withIntermediateDirectories: true, attributes: nil)
        }
        
        return OCKCarePlanStore(persistenceDirectoryURL: url)
    }()
    
    
    override func viewDidLoad() {
        super.viewDidLoad()
        
        let careCard = OCKCareCardViewController(carePlanStore: carePlanStore)
        careCard.title = "Care"
        pushViewController(careCard, animated: true)
    }
}
```
We're soliciting a proposal for an alternative view for contacts. Presently, the `OCKSimpleContactView` is the only option, but we would like to add one or two more. If you have any ideas for contact views, which might include but not be limited to, a simplified version or a version with additional capabilities, please share your proposal here.

For reference, this is what the current implementation looks like.
![OCKSimpleContactView](https://user-images.githubusercontent.com/51723116/60131360-0a720a80-974e-11e9-97ec-82a3c81a767c.png)


We're looking for feedback about new types of charts that might be useful additions to CareKit. If there is specific type of chart that you would like to see added, please comment your proposal here.

For reference, the existing implementations are
1. Line chart
2. Bar chart
3. Scatter plot
Address #261 with the latest version from [http://contributor-covenant.org](http://contributor-covenant.org). This matches what Swift does for their project to welcome the widest audience possible. Improves the "health" of the project from a GitHub perspective: [https://github.com/carekit-apple/CareKit/community](https://github.com/carekit-apple/CareKit/community)

Requires the creation of an email address for anonymous reporting per comments in the ticket and likely legal approval of this particular document's inclusion (presumably feasible since Swift was able to do so already.)
In the landscape of 2018 it's best to be proactive to promote inclusion. Many [open source projects](https://www.contributor-covenant.org/adopters), including [Swift](https://github.com/apple/swift/blob/master/CODE_OF_CONDUCT.md), have adopted a Code of Conduct to set the tone before something happens. Also improves the "health" of the project per the [Insights section](https://github.com/carekit-apple/CareKit/community) on GitHub.

Matches ResearchKit issue #1193.
See #109 for the respective PR.

Bringing OCKCareCardViewController, OCKSymptomTrackerViewController, OCKInsightsViewController, and OCKContactsViewController to storyboards is a highly requested feature (see #68), and I would also like to use these in storyboards.

In order for this to be possible for OCKCareCardViewController and OCKSymptomTrackerViewController, an OCKCarePlanStore singleton needs to be provided. For OCKInsightsViewController and OCKContactsViewController, only an `initWithCoder:` implementation needs to be added.
## OCKCarePlanStore Singleton

Because of how storyboards work, you cannot supply a care plan store on initialization. While a possible alternative is subclassing and overriding `initWithCoder:`, you cannot set the `store` because it is defined as read-only (this might be possible in Objective-C, but you definitely cannot in Swift without terrible hacks).

[CareKit apps only need one care plan store](http://carekit.org/docs/docs/CreatingTheCareCard/CreatingTheCareCard.html). Therefore, the developer shouldn't have to create one and manage it themselves, making sure they pass it to every class that needs it, and not creating duplicates.

Therefore, a singleton care plan store can both make CareKit a ["faster 'get started' to a useful app"](https://github.com/carekit-apple/CareKit/blob/master/CONTRIBUTING.md) and a way to get CareKit in storyboards.
### Implementation
1. **[Add a singleton](http://www.galloway.me.uk/tutorials/singleton-classes/) to `OCKCarePlanStore`**. It should be called something simple like `defaultStore` and have a default URL for storing the data (probably in the Document Directory in the User Domain Mask like in the [programming guide](http://carekit.org/docs/docs/CreatingTheCareCard/CreatingTheCareCard.html#InstantiatingTheCarePlanStore)).
2. **Make the `store` parameter from the view controllers' initializers `nullable`, using the singleton store if passed `nil`.**
3. **Set `store` in `initWithCoder:` to the singleton.** Set `store` in `initWithCarePlanStore:` to the singleton, unless the `store` parameter is not `nil`.

You will be able to access the app's care plan store via `OCKCarePlanStore.defaultStore()` or `[OCKCarePlanStore defaultStore]`.
### Impact on Existing Code

Making the `store` parameter `nullable` will keep existing code working while providing an opportunity to remove all care plan store management and being able to use storyboards.

Internal CareKit code won't need a huge change. The only change will be in the initializers of the view controllers.

If someone wants a custom care plan store, they can leverage the existing initializer to do that.
### Alternatives

Make the `store` property of the view controllers readwrite. Then, if someone wanted to, they could subclass the view controller and set the store to their care plan store in `initWithCoder:`.

This seems a lot easier but avoids the problem. Making a singleton also allows less care plan store management.
