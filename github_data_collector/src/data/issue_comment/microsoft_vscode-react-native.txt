Fixes #1188
Feature request to allow debugging expo without expo login or internet connection. 

I understand that expo uses an account and an internet connection for some features, but debugging does not use any of expo's cloud features. 

The expo cli allows development without logging in and without an active internet connection. 

## Actual Behavior
1. Run Debug in Exponent
2. Expo prompts login
3. a. Esc or leave username and password blank
OR
b. Internet connection does not exist
4. Debugging fails to launch

## Expected Behavior
1. Run Debug in Exponent
2. Expo prompts login
3. a. Esc or leave username and password blank
OR
b. Internet connection does not exist
4. Debugging launches on LAN (or localhost)

## Software versions
- React-Native VS Code extension version: 0.13.2
- VSCode version: 1.41.1
- OS platform and version: macOS 10.15.2
- NodeJS version: 13.3.0
- React Native version: 2.0.1
- Expo SDK version (include if relevant): 36.0.0, expo-cli@3.11.2

## Outputs (Include if relevant)
- Output of the Debug Console (View -> Toggle Debug Console):
3. a.
```
[Error] ApiV2Error: Must provide a username and password to log in.
```
3. b.
```
[Error] Error: getaddrinfo ENOTFOUND exp.host
```

![image](https://user-images.githubusercontent.com/19633881/66645254-2f32b500-ec4d-11e9-8659-ca68e61e8ff6.png)

It would be easier if i can only run logcat without running command `React Native: Run Android on Device` just to start logcat when i'm disconnected my device from adb, and reconnect my devices,

because when i disconnected my devices and reconnect, logcat not showing new log from monitor

## Actual Behavior
1. connect device to adb
2. run command `React Native: Run Android on Device`
3. logCat Show in Output Panel
4. disconnect device from adb
5. need to repeated step 1 just to run logCat

## Expected Behavior
1. connect device to adb
2. run command `React Native: Run Android on Device`
3. logCat Show in Output Panel
4. disconnect device from adb
5. reconnect device to adb
6. run command `React Native: Start LogCat Monitor`

## Software versions
- React-Native VS Code extension version: 0.12.1
- VSCode version: 1.37.1
- OS platform and version: Android (Oreo) 
- NodeJS version: 10.16.0
- React Native version: 0.60.5
- Expo SDK version (include if relevant): Not used
As for now extension uses Q promise package for async operations. Migration to async/await API will allow to remove redundant dependencies from the code base and also make it more consistent and reliable.
The extension has experimental support for React Native Hermes debugging. At this moment we know about several issues related to Hermes debugging. Please see the list of known issues below. 

The table of problems consists of two columns: first one illustrates the problem when debugging the app with Hermes enabled using prototype of the debugger in the extension, second one - when Chrome is used for debugging the app. 

If you faced new issues with React Native Hermes debugging with React Native Tools, please send them to the commentaries section of this issue.

## The list of issues

1) The debugger doesn’t show Global, Closure variables. The debugger provides only Local variables (function scope). Google Chrome displays Global variables, but Locals aren't shown.

  |Debugging using VS Code RNT Hermes debugger prototype|Debugging using Chrome|Resolved|
  |---|---|:---:|
  |<img src="https://github.com/RedMickey/vscode-react-native/raw/hermes-debugger-issues/HermesProblemsDescription/images2/ScreenShot2019-08-29at13.05.33.png" alt="drawing"/>|<img src="https://github.com/RedMickey/vscode-react-native/raw/hermes-debugger-issues/HermesProblemsDescription/images2/ScreenShot2019-08-29at13.06.35.png" alt="drawing"/>|https://github.com/microsoft/vscode-chrome-debug-core/pull/548|

2) The debugger doesn’t show value of numeric variables.

  |Debugging using VS Code RNT Hermes debugger prototype|Debugging using Chrome|Resolved|
  |---|---|:---:|
  |<img src="https://github.com/RedMickey/vscode-react-native/raw/hermes-debugger-issues/HermesProblemsDescription/images2/ScreenShot2019-08-29at15.21.23.png" alt="drawing"/>|<img src="https://github.com/RedMickey/vscode-react-native/raw/hermes-debugger-issues/HermesProblemsDescription/images2/ScreenShot2019-08-29at15.23.59.png" alt="drawing"/>|https://github.com/microsoft/vscode-chrome-debug-core/pull/548|

3) [The debugger shows additional VM_unknown calls in Call Stack](https://github.com/facebook/hermes/issues/168)
  <br/>The debugger displays all the calls as well as Google Chrome, but also adds unknown calls.

  |Debugging using VS Code RNT Hermes debugger prototype|Debugging using Chrome|Resolved|
  |---|---|:---:|
  |<img src="https://github.com/RedMickey/vscode-react-native/raw/hermes-debugger-issues/HermesProblemsDescription/images2/ScreenShot2019-08-29at13.10.11.png" alt="drawing"/>|<img src="https://github.com/RedMickey/vscode-react-native/raw/hermes-debugger-issues/HermesProblemsDescription/images2/ScreenShot2019-08-29at13.10.44.png" alt="drawing"/>| #1187  |

  [Logs](https://github.com/RedMickey/vscode-react-native/blob/hermes-debugger-issues/HermesProblemsDescription/logs/appLogs123.txt) for problems 1, 2, 3.

4) The debugger doesn’t provide complete object data (For example, Date object, Map object - there is only an object name without internal data).
  If an object contains an array the debugger doesn't display the object's data.
  Google Chrome displays some objects correctly, but not all (e.g. Map object).
  The debugger doesn’t provide properties containing in “this” object.

  See the issue [Application crashes on debugging Map and Set objects](https://github.com/facebook/hermes/issues/167).

  |Debugging using VS Code RNT Hermes debugger prototype|Debugging using Chrome|Resolved|
  |---|---|:---:|
  |<img src="https://github.com/RedMickey/vscode-react-native/raw/hermes-debugger-issues/HermesProblemsDescription/images2/ScreenShot2019-08-29at13.26.54.png" alt="drawing"/>|<img src="https://github.com/RedMickey/vscode-react-native/raw/hermes-debugger-issues/HermesProblemsDescription/images2/ScreenShot2019-08-29at13.27.40.png" alt="drawing"/>||
  |<img src="https://github.com/RedMickey/vscode-react-native/raw/hermes-debugger-issues/HermesProblemsDescription/images2/ScreenShot2019-08-29at16.11.34.png" alt="drawing"/>|<img src="https://github.com/RedMickey/vscode-react-native/raw/hermes-debugger-issues/HermesProblemsDescription/images2/ScreenShot2019-08-29at15.46.06.png" alt="drawing"/>||

  [Logs](https://github.com/RedMickey/vscode-react-native/blob/hermes-debugger-issues/HermesProblemsDescription/logs/appLogs4-1.txt) for problem 4 - 1 table row.
  [Logs](https://github.com/RedMickey/vscode-react-native/blob/hermes-debugger-issues/HermesProblemsDescription/logs/appLogs4-2.txt) for problem 4 - 2 table row.

5) The debugger doesn’t show local variables, if there is any array definition in a handler function.
  <br/>The debugger remove local variables data only when it comes an array definition. Google Chrome displays array's data.
  
  See the issue [Runtime.callFunctionOn returns an empty value on debugging](https://github.com/facebook/hermes/issues/166).

  |Debugging using VS Code RNT Hermes debugger prototype|Debugging using Chrome|Resolved|
  |---|---|:---:|
  |Before the array definition: <br/><img src="https://github.com/RedMickey/vscode-react-native/raw/hermes-debugger-issues/HermesProblemsDescription/images2/ScreenShot2019-08-29at15.59.44.png" alt="drawing"/>|<img src="https://github.com/RedMickey/vscode-react-native/raw/hermes-debugger-issues/HermesProblemsDescription/images2/ScreenShot2019-08-29at16.04.51.png" alt="drawing"/>|https://github.com/microsoft/vscode-chrome-debug-core/pull/548|
  |After the array definition: <br/><img src="https://github.com/RedMickey/vscode-react-native/raw/hermes-debugger-issues/HermesProblemsDescription/images2/ScreenShot2019-08-29at16.00.01.png" alt="drawing"/>||https://github.com/microsoft/vscode-chrome-debug-core/pull/548|

  [Logs](https://github.com/RedMickey/vscode-react-native/blob/hermes-debugger-issues/HermesProblemsDescription/logs/appLogs5.txt) for problem 5.

# Description
Facebook released [Hermes JS engine](https://github.com/facebook/hermes) and implemented it to React Native Android. This engine is compatible with [Chrome DevTools Protocol](https://chromedevtools.github.io/devtools-protocol/) so we need to investigate how to implement Hermes debugging in React Native Tools. 

# Important notice
Currently, Hermes doesn't fully support Chrome debugger protocol, so there are some gaps in its implementation. If something not working as expected will be noticed (like object inspector bugs) in the extension debugger then the same thing should be tested in the latest Chrome (Run app, attach to it in Chrome, check how Chrome debugger behave in the same debug scenario).
Here is the Hermes debugging [issues list](https://github.com/microsoft/vscode-react-native/issues/1099).

# Implementation roadmap
- [x] `Run Android` scenario support
- [x] `Attach to packager` scenario support
- [ ] `Debug in Expo` scenario support (Expo [doesn't support Hermes yet](https://github.com/expo/expo/issues/5259), here's [a roadmap for adding it](https://github.com/expo/expo/issues/4927))
- [x] Support debugging on Android devices
- [x] Support debugging on Android emulators
- [x] Command pallete commands support
    - [x] React Native: Reload App
    - [x] React Native: Show Dev Menu
    - [x] React Native: Run Android on Device
    - [x] React Native: Run Android on Emulator
    - [x] React Native: Run Element Inspector
    - [x] React Native: Start Packager
    - [x] React Native: Restart Packager
    - [x] React Native: Stop Packager
- [ ] Support existing debug scenarios properties
    - [x] `cwd`
    - [x] `target`
    - [x] `env`
    - [x] `envFile`
    - [x] `trace`
    - [x] `address`
    - [x] `port`
    - [x] `logCatArguments`
    - [x] `runArguments`
    - [x] `skipFiles`
    - [x] `launchActivity`
    - [ ] `variant`
- [ ] Support multi-root workspaces
- [x] Add tests
After I built my app on my device/simulator I don't need to rebuild it every time I start working on it so I need a launch configuration that only starts 
 and attaches to the packager. For now I'm using Attach to packager, but every time I launch VSCode I need to run it twice, because the packager control buttons in the status bar are missing: 
![image](https://user-images.githubusercontent.com/8790386/62844300-09c71080-bcc9-11e9-815b-87e4e1bb8e70.png)
So I run Attach to packager so that they appear, then start packager, then run again Attach to packager.

I know it's possible now with three clicks, but it feels unintuitive when it can be one click.
Related issue: #1047 

Currently, debugger uses particular version of ws (https://github.com/microsoft/vscode-react-native/blob/master/src/debugger/appWorker.ts#L6), but, as RN team has start bumping ws version that is used in RN for proxy debugger server, this version may be inconsistent with the one is used in the extension. To avoid any future problems extension should use ws version that is installed in the debuggee app. 


Some time ago experimental support for React native Windows was introduced and at that moment debuging of both UWP and WPF platforms were added. Since that time no further work were continued.
Currently, React Native Windows has two main implementations: "current" which is C#-made and will be cosidered as deprecated in the future and "vnext" which is targeted to future React Native versions and will be rewritten in C++ to engage new RN architectural features such as JSI (https://github.com/react-native-community/discussions-and-proposals/issues/91).
Here are the list of things that must be done to support newer React Native Windows versions that were made after retesting extension for RNW apps (`"react-native-windows": "^0.58.0-vnext.101"`):

- [x] On "Debug UWP" scenario packager throws mutliple `Error: jest-haste-map: Haste module naming collision:` for "vnext" UWP app
### Reproduction steps:
* Clone sample app (it was created by following [Getting started](https://github.com/microsoft/react-native-windows/blob/master/vnext/docs/GettingStarted.md) guide)
```shell
git clone git@github.com:ruslan-bikkinin/rnw_app_058.git
cd rnw_app_058
npm i
```
* Install VS Code, then install "React Native Tools" extension
* Open `rnw_app_058` directory in VS Code
* Press "Debug" button
* Select `Attach to packager` debug configuration in drop down list and press play button
* Eventually, attach process will stuck.

- [x] Endpoint for bundle has been changed from `localhost:8081/index.bundle?platform=windows` to `App.windows.bundle?platform=uwp` (Issue tracked [here](https://github.com/microsoft/react-native-windows/issues/2451) on RNW)
- [ ] The debugger cannot attach to the application in launch scenario immediately after building the application (possibly connected with the fact that RNW application don't waits the debugger to attach and shows errors on application start up because debugger is not attached)
- [x] ~The RNW application generates app.bundle instead of index.bundle, this causes a [prewarming issues](https://github.com/microsoft/react-native-windows/issues/2876)~
- [x] ~Couldn't run "current" UWP app due to several `Couldn't find source file` errors while running `react-native run-windows` (Need help from RNW team)~ Support for "current" is going away. Is there any documentation about this? 
- [x] ~Couldn't add WPF platform on new RNW version because looks like it's not supported yet (Need clarifications from RNW team)~ WPF support is going to be dropped off. Is there any documentation about this? 
- [x] ~"Attach to packager" scenario doesn't work (Need investigation)~

### Reproduction steps:
* Clone sample app (it was created by following [Getting started](https://github.com/microsoft/react-native-windows/blob/master/vnext/docs/GettingStarted.md) guide)
```shell
git clone git@github.com:ruslan-bikkinin/rnw_app_058.git
cd rnw_app_058
npm i
```
* Start app
```
react-native run-windows
```
* Wait until Chrome `debugger-ui` tab is opened and app is loaded, then close Chrome tab
* Install VS Code, then install "React Native Tools" extension
* Open `rnw_app_058` directory in VS Code
* Press "Debug" button
* Select `Debug UWP` debug configuration in drop down list and press play button
* Eventually, you will see errors in `Debug Console` window

- [ ] "Show Dev Menu", "Reload app" command palate commands aren't supported.  Once [issue 2276](https://github.com/microsoft/react-native-windows/issues/2276) is fixed we can fix this. 
As for now extension supports only `Attach to packager` debug configurations for [Haul](https://github.com/callstack/haul). Please, leave your feedback in this issue, vote if you are interested in further improving of debugging support for Haul (for example, adding support for `Debug in Android/iOS` configurations). You can even name your own improvement that you want to see.

Please, like this post to vote.