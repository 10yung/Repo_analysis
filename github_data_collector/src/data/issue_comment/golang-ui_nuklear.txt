I met a random crash on MacOS v10.15.2 with go version 1.13.5, with GLFW backend.

The crash log is:
```
fatal error: unexpected signal during runtime execution
[signal SIGSEGV: segmentation violation code=0x1 addr=0xffffffffffffffff pc=0xffffffffffffffff]

runtime stack:
runtime.throw(0x41f709d, 0x2a)
	/usr/local/Cellar/go/1.13.5/libexec/src/runtime/panic.go:774 +0x72
runtime.sigpanic()
	/usr/local/Cellar/go/1.13.5/libexec/src/runtime/signal_unix.go:378 +0x47c

goroutine 1 [syscall, locked to thread]:
runtime.cgocall(0x41398f0, 0xc0000cbc78, 0xc000000180)
	/usr/local/Cellar/go/1.13.5/libexec/src/runtime/cgocall.go:128 +0x5b fp=0xc0000cbc48 sp=0xc0000cbc10 pc=0x40056bb
github.com/golang-ui/nuklear/nk._Cfunc_nk_group_begin(0x986a600, 0xc00001a100, 0x41, 0x0)
	_cgo_gotypes.go:4128 +0x4d fp=0xc0000cbc78 sp=0xc0000cbc48 pc=0x40e280d
```

It will happen after few minutes run. I tried to found out why, but cgo cannot provide enough information about where exactly the crash is happened so I put it here if anyone could give me a hint.
OS: MacOS 10.14.6
GO: 1.13
Backend: GLFW3.2/GL3
Nuklear: 4.01.0

Minimal code sample is

```
name := nk.NewTextEdit()
nk.NkTexteditInitDefault(name)

nk.NkEditBuffer(ctx, nk.EditEditor, name, nk.NkFilterDefault)
```

I cannot enter any character in edit if the flag is nk.EditEditor.

If change the flag to nk.EditBox, infinite "Enter" key is triggered once the edit box is focused. 
I noticed that [#31](https://github.com/golang-ui/nuklear/issues/31) proposed two solutions to use it, but I'm wondering are they the suggested way to use NkEditString\NkEditBuffer\NkEditStringTerminated?
Hello,

This is a newbie question as I am not very aware of the different graphical toolkits.
Is there any chance to run a Golang nuklear application under Sailfish OS ?
Go getting the package leads to an error (probably due to the fact that Sailfish runs Wayland but I am not sure).

Regards.
I made [a PR](https://github.com/avelino/awesome-go/pull/2516) to add Nuklear in the [awesome-go](https://github.com/avelino/awesome-go) list.

It seems that one required thing for this is to fix some issues in the [go_vet](https://goreportcard.com/report/github.com/golang-ui/nuklear#go_vet) and [golint](https://goreportcard.com/report/github.com/golang-ui/nuklear#golint), as explained by a collaborator:

> The goreportcard-tool lists the result of a few common linters used for go projects. Vet for example reports suspicous constructs, whereas golint lists some formal issues.

Most of those issues can be quickly fixed and in addition to improve code quality, figuring in the awesome-go list will improve Nuklear visibility.
Hi,

I'm attempting to use this library to create a UI for the game engine I'm developing here: https://github.com/rishabh-bector/rapidengine. I've read the previous issues on styling and editing the Context of Nuklear, and I understand that cgogen is not able to auto generate Getters and Setters for structs, so they have to be written by hand at the moment as you have done in etc.go. I also read that you have chosen not to export the fields of these structs, due to the large amount of internal state they contain.

In this case, is it possible for me to use cgogen to create my own bindings for Nuklear in which all struct fields are exported? I think that this would be a much more convenient solution (despite the downsides). 

Thanks,
Rishabh
It renders one frame and then just freezes.
Hiya! I'm getting an issue when trying to go get this:

```
go get github.com/golang-ui/nuklear/nk
# github.com/go-gl/glfw/v3.2/glfw
In file included from C:\Users\Claudia\dev\go\src\github.com\go-gl\glfw\v3.2\glf
w/glfw/src/win32_init.c:33:0,
                 from C:\Users\Claudia\dev\go\src\github.com\go-gl\glfw\v3.2\glf
w\c_glfw_windows.go:4:
C:\Users\Claudia\dev\go\src\github.com\go-gl\glfw\v3.2\glfw/glfw/src/win32_init.
c:34:13: warning: 'GUID_DEVINTERFACE_HID' initialized and declared 'extern'
 DEFINE_GUID(GUID_DEVINTERFACE_HID,0x4d1e55b2,0xf16f,0x11cf,0x88,0xcb,0x00,0x11,
0x11,0x00,0x00,0x30);
             ^
C:\Users\Claudia\dev\go\src\github.com\go-gl\glfw\v3.2\glfw/glfw/src/win32_joyst
ick.c:57:13: warning: 'IID_IDirectInput8W' initialized and declared 'extern'
 DEFINE_GUID(IID_IDirectInput8W,0xbf798031,0x483a,0x4da2,0xaa,0x99,0x5d,0x64,0xe
d,0x36,0x97,0x00);
             ^
C:\Users\Claudia\dev\go\src\github.com\go-gl\glfw\v3.2\glfw/glfw/src/win32_joyst
ick.c:58:13: warning: 'GUID_XAxis' initialized and declared 'extern'
 DEFINE_GUID(GUID_XAxis,0xa36d02e0,0xc9f3,0x11cf,0xbf,0xc7,0x44,0x45,0x53,0x54,0
x00,0x00);
             ^
C:\Users\Claudia\dev\go\src\github.com\go-gl\glfw\v3.2\glfw/glfw/src/win32_joyst
ick.c:59:13: warning: 'GUID_YAxis' initialized and declared 'extern'
 DEFINE_GUID(GUID_YAxis,0xa36d02e1,0xc9f3,0x11cf,0xbf,0xc7,0x44,0x45,0x53,0x54,0
x00,0x00);
             ^
C:\Users\Claudia\dev\go\src\github.com\go-gl\glfw\v3.2\glfw/glfw/src/win32_joyst
ick.c:60:13: warning: 'GUID_ZAxis' initialized and declared 'extern'
 DEFINE_GUID(GUID_ZAxis,0xa36d02e2,0xc9f3,0x11cf,0xbf,0xc7,0x44,0x45,0x53,0x54,0
x00,0x00);
             ^
C:\Users\Claudia\dev\go\src\github.com\go-gl\glfw\v3.2\glfw/glfw/src/win32_joyst
ick.c:61:13: warning: 'GUID_RxAxis' initialized and declared 'extern'
 DEFINE_GUID(GUID_RxAxis,0xa36d02f4,0xc9f3,0x11cf,0xbf,0xc7,0x44,0x45,0x53,0x54,
0x00,0x00);
             ^
C:\Users\Claudia\dev\go\src\github.com\go-gl\glfw\v3.2\glfw/glfw/src/win32_joyst
ick.c:62:13: warning: 'GUID_RyAxis' initialized and declared 'extern'
 DEFINE_GUID(GUID_RyAxis,0xa36d02f5,0xc9f3,0x11cf,0xbf,0xc7,0x44,0x45,0x53,0x54,
0x00,0x00);
             ^
C:\Users\Claudia\dev\go\src\github.com\go-gl\glfw\v3.2\glfw/glfw/src/win32_joyst
ick.c:63:13: warning: 'GUID_RzAxis' initialized and declared 'extern'
 DEFINE_GUID(GUID_RzAxis,0xa36d02e3,0xc9f3,0x11cf,0xbf,0xc7,0x44,0x45,0x53,0x54,
0x00,0x00);
             ^
C:\Users\Claudia\dev\go\src\github.com\go-gl\glfw\v3.2\glfw/glfw/src/win32_joyst
ick.c:64:13: warning: 'GUID_Slider' initialized and declared 'extern'
 DEFINE_GUID(GUID_Slider,0xa36d02e4,0xc9f3,0x11cf,0xbf,0xc7,0x44,0x45,0x53,0x54,
0x00,0x00);
             ^
C:\Users\Claudia\dev\go\src\github.com\go-gl\glfw\v3.2\glfw/glfw/src/win32_joyst
ick.c:65:13: warning: 'GUID_Button' initialized and declared 'extern'
 DEFINE_GUID(GUID_Button,0xa36d02f0,0xc9f3,0x11cf,0xbf,0xc7,0x44,0x45,0x53,0x54,
0x00,0x00);
             ^
C:\Users\Claudia\dev\go\src\github.com\go-gl\glfw\v3.2\glfw/glfw/src/win32_joyst
ick.c:66:13: warning: 'GUID_POV' initialized and declared 'extern'
 DEFINE_GUID(GUID_POV,0xa36d02f2,0xc9f3,0x11cf,0xbf,0xc7,0x44,0x45,0x53,0x54,0x0
0,0x00);
             ^
In file included from C:\Users\Claudia\dev\go\src\github.com\go-gl\glfw\v3.2\glf
w\c_glfw_windows.go:9:0:
C:\Users\Claudia\dev\go\src\github.com\go-gl\glfw\v3.2\glfw/glfw/src/win32_windo
w.c: In function 'updateCursorImage':
C:\Users\Claudia\dev\go\src\github.com\go-gl\glfw\v3.2\glfw/glfw/src/win32_windo
w.c:259:41: warning: passing argument 2 of 'LoadCursorW' from incompatible point
er type [-Wincompatible-pointer-types]
             SetCursor(LoadCursorW(NULL, IDC_ARROW));
                                         ^~~~~~~~~
In file included from c:\mingw\include\windows.h:48:0,
                 from C:\Users\Claudia\dev\go\src\github.com\go-gl\glfw\v3.2\glf
w/glfw/src/win32_platform.h:68,
                 from C:\Users\Claudia\dev\go\src\github.com\go-gl\glfw\v3.2\glf
w/glfw/src/internal.h:167,
                 from C:\Users\Claudia\dev\go\src\github.com\go-gl\glfw\v3.2\glf
w/glfw/src/win32_init.c:28,
                 from C:\Users\Claudia\dev\go\src\github.com\go-gl\glfw\v3.2\glf
w\c_glfw_windows.go:4:
c:\mingw\include\winuser.h:3999:27: note: expected 'LPCWSTR {aka const short uns
igned int *}' but argument is of type 'CHAR * {aka char *}'
 WINUSERAPI HCURSOR WINAPI LoadCursorW (HINSTANCE, LPCWSTR);
                           ^~~~~~~~~~~
In file included from C:\Users\Claudia\dev\go\src\github.com\go-gl\glfw\v3.2\glf
w\c_glfw_windows.go:9:0:
C:\Users\Claudia\dev\go\src\github.com\go-gl\glfw\v3.2\glfw/glfw/src/win32_windo
w.c: In function 'translateCursorShape':
C:\Users\Claudia\dev\go\src\github.com\go-gl\glfw\v3.2\glfw/glfw/src/win32_windo
w.c:288:20: warning: return from incompatible pointer type [-Wincompatible-point
er-types]
             return IDC_ARROW;
                    ^~~~~~~~~
C:\Users\Claudia\dev\go\src\github.com\go-gl\glfw\v3.2\glfw/glfw/src/win32_windo
w.c:290:20: warning: return from incompatible pointer type [-Wincompatible-point
er-types]
             return IDC_IBEAM;
                    ^~~~~~~~~
C:\Users\Claudia\dev\go\src\github.com\go-gl\glfw\v3.2\glfw/glfw/src/win32_windo
w.c:292:20: warning: return from incompatible pointer type [-Wincompatible-point
er-types]
             return IDC_CROSS;
                    ^~~~~~~~~
C:\Users\Claudia\dev\go\src\github.com\go-gl\glfw\v3.2\glfw/glfw/src/win32_windo
w.c:294:20: warning: return from incompatible pointer type [-Wincompatible-point
er-types]
             return IDC_HAND;
                    ^~~~~~~~
C:\Users\Claudia\dev\go\src\github.com\go-gl\glfw\v3.2\glfw/glfw/src/win32_windo
w.c:296:20: warning: return from incompatible pointer type [-Wincompatible-point
er-types]
             return IDC_SIZEWE;
                    ^~~~~~~~~~
C:\Users\Claudia\dev\go\src\github.com\go-gl\glfw\v3.2\glfw/glfw/src/win32_windo
w.c:298:20: warning: return from incompatible pointer type [-Wincompatible-point
er-types]
             return IDC_SIZENS;
                    ^~~~~~~~~~
C:\Users\Claudia\dev\go\src\github.com\go-gl\glfw\v3.2\glfw/glfw/src/win32_windo
w.c: In function '_glfwRegisterWindowClassWin32':
C:\Users\Claudia\dev\go\src\github.com\go-gl\glfw\v3.2\glfw/glfw/src/win32_windo
w.c:948:42: warning: passing argument 2 of 'LoadCursorW' from incompatible point
er type [-Wincompatible-pointer-types]
     wc.hCursor       = LoadCursorW(NULL, IDC_ARROW);
                                          ^~~~~~~~~
In file included from c:\mingw\include\windows.h:48:0,
                 from C:\Users\Claudia\dev\go\src\github.com\go-gl\glfw\v3.2\glf
w/glfw/src/win32_platform.h:68,
                 from C:\Users\Claudia\dev\go\src\github.com\go-gl\glfw\v3.2\glf
w/glfw/src/internal.h:167,
                 from C:\Users\Claudia\dev\go\src\github.com\go-gl\glfw\v3.2\glf
w/glfw/src/win32_init.c:28,
                 from C:\Users\Claudia\dev\go\src\github.com\go-gl\glfw\v3.2\glf
w\c_glfw_windows.go:4:
c:\mingw\include\winuser.h:3999:27: note: expected 'LPCWSTR {aka const short uns
igned int *}' but argument is of type 'CHAR * {aka char *}'
 WINUSERAPI HCURSOR WINAPI LoadCursorW (HINSTANCE, LPCWSTR);
                           ^~~~~~~~~~~
In file included from C:\Users\Claudia\dev\go\src\github.com\go-gl\glfw\v3.2\glf
w\c_glfw_windows.go:9:0:
C:\Users\Claudia\dev\go\src\github.com\go-gl\glfw\v3.2\glfw/glfw/src/win32_windo
w.c:959:31: warning: passing argument 2 of 'LoadImageW' from incompatible pointe
r type [-Wincompatible-pointer-types]
                               IDI_APPLICATION, IMAGE_ICON,
                               ^~~~~~~~~~~~~~~
In file included from c:\mingw\include\windows.h:48:0,
                 from C:\Users\Claudia\dev\go\src\github.com\go-gl\glfw\v3.2\glf
w/glfw/src/win32_platform.h:68,
                 from C:\Users\Claudia\dev\go\src\github.com\go-gl\glfw\v3.2\glf
w/glfw/src/internal.h:167,
                 from C:\Users\Claudia\dev\go\src\github.com\go-gl\glfw\v3.2\glf
w/glfw/src/win32_init.c:28,
                 from C:\Users\Claudia\dev\go\src\github.com\go-gl\glfw\v3.2\glf
w\c_glfw_windows.go:4:
c:\mingw\include\winuser.h:4011:26: note: expected 'LPCWSTR {aka const short uns
igned int *}' but argument is of type 'CHAR * {aka char *}'
 WINUSERAPI HANDLE WINAPI LoadImageW (HINSTANCE, LPCWSTR, UINT, int, int, UINT);

                          ^~~~~~~~~~
```

I'm also getting a similar problem when downloading manually as zip and trying to ```go install```
Getting this build error,

> C:\Program Files (x86)\Console2>go get github.com/golang-ui/nuklear/cmd/nk-example
/# github.com/go-gl/glfw/v3.2/glfw
In file included from C:\Users\Martin\go\src\github.com\go-gl\glfw\v3.2\glfw\c_glfw_windows.go:6:0:
C:\Users\Martin\go\src\github.com\go-gl\glfw\v3.2\glfw/glfw/src/win32_monitor.c: In function 'createMonitor':
C:\Users\Martin\go\src\github.com\go-gl\glfw\v3.2\glfw/glfw/src/win32_monitor.c:68:5: warning: implicit declaration of function 'wcscpy' [-Wimplicit-function-declaration]
     wcscpy(monitor->win32.adapterName, adapter->DeviceName);
     ^~~~~~
C:\Users\Martin\go\src\github.com\go-gl\glfw\v3.2\glfw/glfw/src/win32_monitor.c: In function '_glfwPlatformIsSameMonitor':
C:\Users\Martin\go\src\github.com\go-gl\glfw\v3.2\glfw/glfw/src/win32_monitor.c:228:9: warning: implicit declaration of function 'wcslen' [-Wimplicit-function-declaration]
     if (wcslen(first->win32.displayName))
         ^~~~~~
C:\Users\Martin\go\src\github.com\go-gl\glfw\v3.2\glfw/glfw/src/win32_monitor.c:229:16: warning: implicit declaration of function 'wcscmp' [-Wimplicit-function-declaration]
         return wcscmp(first->win32.displayName, second->win32.displayName) == 0;
                ^~~~~~
/# github.com/golang-ui/nuklear/cmd/nk-example
C:\Go\pkg\tool\windows_amd64\link.exe: running gcc failed: exit status 1
C:\Users\Martin\AppData\Local\Temp\go-link-052590467\go.o: file not recognized: File format not recognized
collect2.exe: error: ld returned 1 exit status

GCC:

> C:\Program Files (x86)\Console2>gcc -v
Using built-in specs.
COLLECT_GCC=gcc
COLLECT_LTO_WRAPPER=c:/mingw/bin/../libexec/gcc/mingw32/6.3.0/lto-wrapper.exe
Target: mingw32
Configured with: ../src/gcc-6.3.0/configure --build=x86_64-pc-linux-gnu --host=mingw32 --target=mingw32 --with-gmp=/mingw --with-mpfr --with-mpc=/mingw --with-isl=/mingw --prefix=/mingw --disable-win32-registry --with-arch=i586 --with-tune=generic --enable-languages=c,c++,objc,obj-c++,fortran,ada --with-pkgversion='MinGW.org GCC-6.3.0-1' --enable-static --enable-shared --enable-threads --with-dwarf2 --disable-sjlj-exceptions --enable-version-specific-runtime-libs --with-libiconv-prefix=/mingw --with-libintl-prefix=/mingw --enable-libstdcxx-debug --enable-libgomp --disable-libvtv --enable-nls
Thread model: win32
gcc version 6.3.0 (MinGW.org GCC-6.3.0-1)

Go:

> C:\Program Files (x86)\Console2>go version
go version go1.10.3 windows/amd64




There is a problem with the handling of enter keys. The backend returns different codes for the normal enter key and the keypad enter key, but nuklear.h checks only one. This is very confusing. We can either change nuklear.h and check both, or we can modify impl_glfw_common.go to deliver the same code for both . Both are easy to do. Which way is best?