Calling Shape's `bounds` function implicitly assumes that `l, b, t and r`  values should be properly initialized. This is not obvious, and could lead to the incorrect bounding boxes. 

For example, I was default initializing this values with zero, while actual frame was above zero, and this resulted with bbox like {0, 0, r, t} rather than {l, b, r, t} (where l, t, r, b are some concrete values).

I've created PR to fix this:
https://github.com/Chlumsky/msdfgen/pull/90
Explicit initialization of values inside Shape's bounds function
The code currently uses a definition named `MSDFGEN_USE_CPP11`, and mostly ignores newer C++ features. However, even without this flag, it uses a C++11 feature (explicit cast operators were added in C++11), which means building it with a C++98/03 compiler isn't possible.

Either this issue should be fixed (if you want to have C++03 support), or the macro and its use removed (and then the codebase could be modernized/simplified at other places too).

Or as a more generic question: do you have a list of supported compilers/standards?

(I don't need C++03 support, I'm only planning on submitting a CMake improvement pull request, and noticed this issue during testing it. I can also submit a PR about this issue, based on the answer for the above question)
![image](https://user-images.githubusercontent.com/318732/66180744-dd9b9080-e676-11e9-83ff-6bc13797f183.png)
Letter that has WinDescent cuts by msdfgen.

REsult
![image](https://user-images.githubusercontent.com/318732/66180918-74684d00-e677-11e9-8fa0-6a0ca6eb52ae.png)


Hi,
I am working on converting any installed font to a single bitmap. Most fonts I tried are fine, with but some, it looks inverted, even with single channel sdf, characters are black on white. Msdf also looks similar, rounded characters with no edges are black on a white background.
It is possible that I do something wrong, but I just don't know what can it be. What can be the cause of something like this?
Thanks.
MSDF is great for keeping all the sharp corners, but sometimes having rounded corners is great too. An example of this is when shadow effects are made. Here's a comparison:

**MSDF text using MSDF for shadow**
<img src="http://inter-illusion.com/assets/I2SmartEdgeManual/lib/NewItem61.png" width="100%"/>

**MSDF text using SDF in alpha channel for shadow**
<img src="http://inter-illusion.com/assets/I2SmartEdgeManual/lib/NewItem60.png" width="100%"/>

Notice how the shadow looks much more natural on the second image.

A standard distance field is encoded in the alpha channel while the other channels encode the MSDF, so both are accessible in the fragment shader. I took these images from [SmartEdge](http://inter-illusion.com/assets/I2SmartEdgeManual/SmartEdge.html?WhatSDFFormattouse.html). They call it "MSDFA". However this is a commercial library so I can't use it for generating fonts.

Would it be hard to implement this format into your generator? Since you already have MSDF and SDF I'm guessing combining them would be pretty straightforward. I'm not very familiar with C++ but I can try to make a pull request if you want.
The characters listed in the example are kanji called `Skip StdB` ` 鍛 `manufactured by Fontworks.
When msdf is output, an unexpected line is generated from the part where the radical parts stick and the acute angle is formed.
If you draw a large font, it will be a problem because this part will look like a line.

- 8x to 64x64
![output_zoom](https://user-images.githubusercontent.com/696724/62446114-dce09e00-b79c-11e9-8002-7a7f042eee7f.png)

- Example glyph
![picture243-1](https://user-images.githubusercontent.com/696724/62446321-63957b00-b79d-11e9-8575-bac2a66f9e9c.png)

- Problem location
![picture243-2](https://user-images.githubusercontent.com/696724/62446324-65f7d500-b79d-11e9-98c6-bca8c6fe813b.png)


It is attached because it reproduces even the glyph converted to SVG.
Output with the following options
`msdfgen.exe msdf -svg test.svg -autoframe -size 64 64`
[test.zip](https://github.com/Chlumsky/msdfgen/files/3466370/test.zip)


My problem is that it seems very slow to me. I used 64*64 bitmaps for each character (at this size, rendering msdf seems just perfect), and conversion of 512 glyphs of arial bold (starting with space) takes more than 5 minutes. Is this something I have to deal with, or did I do something wrong?
Would you be willing to introduce a range bias param so that we can have more than 128 shades on the outside of the outline? Inside is usually too narrow to make use of 128 shades anyway.

Granted that would require passing another parameter to the shader additional outside range could be worth it.
There is a small problem that can be fixed easily when compiling the msdfgen executable on linux,
following these steps:
```git clone MyDir ```
`cd MyDir && mkdir build && cd build `
`cmake .. && make VERBOSE=1 `
lib_msdfgen is built successfully, but as one tries to link the CXX executable msdfgen, one gets the following undefined references.
> [100%] Linking CXX executable msdfgen
> /usr/bin/cmake -E cmake_link_script CMakeFiles/msdfgen.dir/link.txt --verbose=1
> /usr/bin/c++   -std=c++11 -O3 -DNDEBUG  -rdynamic CMakeFiles/msdfgen.dir/main.cpp.o  -o msdfgen libmsdfgen.a /usr/local/lib/libfreetype.a 
> /usr/local/lib/libfreetype.a(sfnt.c.o): In function `error_callback':
> sfnt.c:(.text+0x218): undefined reference to `png_get_error_ptr'
> sfnt.c:(.text+0x241): undefined reference to `png_set_longjmp_fn'
> /usr/local/lib/libfreetype.a(sfnt.c.o): In function `read_data_from_FT_Stream':
> sfnt.c:(.text+0x27d): undefined reference to `png_get_io_ptr'
> sfnt.c:(.text+0x2b1): undefined reference to `png_get_error_ptr'
> sfnt.c:(.text+0x2d0): undefined reference to `png_error'
> /usr/local/lib/libfreetype.a(sfnt.c.o): In function `Load_SBit_Png':
> sfnt.c:(.text+0x44a): undefined reference to `png_create_read_struct'
> sfnt.c:(.text+0x47b): undefined reference to `png_create_info_struct'
> sfnt.c:(.text+0x4ab): undefined reference to `png_destroy_read_struct'
> sfnt.c:(.text+0x4ce): undefined reference to `png_set_longjmp_fn'
> sfnt.c:(.text+0x506): undefined reference to `png_set_read_fn'
> sfnt.c:(.text+0x51c): undefined reference to `png_read_info'
> sfnt.c:(.text+0x55b): undefined reference to `png_get_IHDR'
> sfnt.c:(.text+0x670): undefined reference to `png_set_palette_to_rgb'
> sfnt.c:(.text+0x689): undefined reference to `png_set_expand_gray_1_2_4_to_8'
> sfnt.c:(.text+0x6a4): undefined reference to `png_get_valid'
> sfnt.c:(.text+0x6b7): undefined reference to `png_set_tRNS_to_alpha'
> sfnt.c:(.text+0x6d1): undefined reference to `png_set_strip_16'
> sfnt.c:(.text+0x6eb): undefined reference to `png_set_packing'
> sfnt.c:(.text+0x70f): undefined reference to `png_set_gray_to_rgb'
> sfnt.c:(.text+0x728): undefined reference to `png_set_interlace_handling'
> sfnt.c:(.text+0x741): undefined reference to `png_set_filler'
> sfnt.c:(.text+0x757): undefined reference to `png_read_update_info'
> sfnt.c:(.text+0x796): undefined reference to `png_get_IHDR'
> sfnt.c:(.text+0x7f8): undefined reference to `png_set_read_user_transform_fn'
> sfnt.c:(.text+0x810): undefined reference to `png_set_read_user_transform_fn'
> sfnt.c:(.text+0x930): undefined reference to `png_read_image'
> sfnt.c:(.text+0x964): undefined reference to `png_read_end'
> sfnt.c:(.text+0x988): undefined reference to `png_destroy_read_struct'
> /usr/local/lib/libfreetype.a(autofit.c.o): In function `af_face_globals_new':
> autofit.c:(.text+0x4747): undefined reference to `hb_ft_font_create'
> autofit.c:(.text+0x4757): undefined reference to `hb_buffer_create'
> /usr/local/lib/libfreetype.a(autofit.c.o): In function `af_face_globals_free':
> autofit.c:(.text+0x48bf): undefined reference to `hb_font_destroy'
> autofit.c:(.text+0x48cf): undefined reference to `hb_buffer_destroy'
> /usr/local/lib/libfreetype.a(autofit.c.o): In function `af_shaper_get_coverage':
> autofit.c:(.text+0xf689): undefined reference to `hb_font_get_face'
> autofit.c:(.text+0xf6ea): undefined reference to `hb_ot_tags_from_script'
> autofit.c:(.text+0xf74a): undefined reference to `hb_set_create'
> autofit.c:(.text+0xf776): undefined reference to `hb_ot_layout_collect_lookups'
> autofit.c:(.text+0xf782): undefined reference to `hb_set_is_empty'
> autofit.c:(.text+0xf78f): undefined reference to `hb_set_create'
> autofit.c:(.text+0xf7c8): undefined reference to `hb_ot_layout_lookup_collect_glyphs'
> autofit.c:(.text+0xf7df): undefined reference to `hb_set_next'
> autofit.c:(.text+0xf7e8): undefined reference to `hb_set_create'
> autofit.c:(.text+0xf814): undefined reference to `hb_ot_layout_collect_lookups'
> autofit.c:(.text+0xf819): undefined reference to `hb_set_create'
> autofit.c:(.text+0xf852): undefined reference to `hb_ot_layout_lookup_collect_glyphs'
> autofit.c:(.text+0xf869): undefined reference to `hb_set_next'
> autofit.c:(.text+0xf98c): undefined reference to `hb_ot_layout_lookup_would_substitute'
> autofit.c:(.text+0xf9a9): undefined reference to `hb_set_next'
> autofit.c:(.text+0xf9fe): undefined reference to `hb_set_subtract'
> autofit.c:(.text+0xfa6b): undefined reference to `hb_set_next'
> autofit.c:(.text+0xfa84): undefined reference to `hb_set_destroy'
> autofit.c:(.text+0xfa90): undefined reference to `hb_set_destroy'
> autofit.c:(.text+0xfa9c): undefined reference to `hb_set_destroy'
> autofit.c:(.text+0xfaa8): undefined reference to `hb_set_destroy'
> /usr/local/lib/libfreetype.a(autofit.c.o): In function `af_shaper_buf_create':
> autofit.c:(.text+0xfad4): undefined reference to `hb_buffer_create'
> /usr/local/lib/libfreetype.a(autofit.c.o): In function `af_shaper_buf_destroy':
> autofit.c:(.text+0xfaf2): undefined reference to `hb_buffer_destroy'
> /usr/local/lib/libfreetype.a(autofit.c.o): In function `af_shaper_get_cluster':
> autofit.c:(.text+0xfb97): undefined reference to `hb_font_set_scale'
> autofit.c:(.text+0xfc6d): undefined reference to `hb_buffer_clear_contents'
> autofit.c:(.text+0xfc8b): undefined reference to `hb_buffer_add_utf8'
> autofit.c:(.text+0xfc97): undefined reference to `hb_buffer_guess_segment_properties'
> autofit.c:(.text+0xfcb6): undefined reference to `hb_shape'
> autofit.c:(.text+0xfcdd): undefined reference to `hb_buffer_clear_contents'
> autofit.c:(.text+0xfcfb): undefined reference to `hb_buffer_add_utf8'
> autofit.c:(.text+0xfd07): undefined reference to `hb_buffer_guess_segment_properties'
> autofit.c:(.text+0xfd21): undefined reference to `hb_shape'
> autofit.c:(.text+0xfd34): undefined reference to `hb_buffer_get_glyph_infos'
> autofit.c:(.text+0xfd4b): undefined reference to `hb_buffer_get_glyph_infos'
> autofit.c:(.text+0xfdc3): undefined reference to `hb_buffer_clear_contents'
> autofit.c:(.text+0xfdcf): undefined reference to `hb_buffer_get_length'
> /usr/local/lib/libfreetype.a(autofit.c.o): In function `af_shaper_get_elem':
> autofit.c:(.text+0xfe39): undefined reference to `hb_buffer_get_glyph_infos'
> autofit.c:(.text+0xfe50): undefined reference to `hb_buffer_get_glyph_positions'
> /usr/local/lib/libfreetype.a(ftgzip.c.o): In function `ft_gzip_file_init':
> ftgzip.c:(.text+0x377): undefined reference to `inflateInit2_'
> /usr/local/lib/libfreetype.a(ftgzip.c.o): In function `ft_gzip_file_done':
> ftgzip.c:(.text+0x3bd): undefined reference to `inflateEnd'
> /usr/local/lib/libfreetype.a(ftgzip.c.o): In function `ft_gzip_file_reset':
> ftgzip.c:(.text+0x48a): undefined reference to `inflateReset'
> /usr/local/lib/libfreetype.a(ftgzip.c.o): In function `ft_gzip_file_fill_output':
> ftgzip.c:(.text+0x6da): undefined reference to `inflate'
> /usr/local/lib/libfreetype.a(ftgzip.c.o): In function `FT_Gzip_Uncompress':
> ftgzip.c:(.text+0xe55): undefined reference to `inflateInit2_'
> ftgzip.c:(.text+0xe7f): undefined reference to `inflate'
> ftgzip.c:(.text+0xe9a): undefined reference to `inflateEnd'
> ftgzip.c:(.text+0xec9): undefined reference to `inflateEnd'
> collect2: error: ld returned 1 exit status
> CMakeFiles/msdfgen.dir/build.make:96: recipe for target 'msdfgen' failed
> make[2]: *** [msdfgen] Error 1

This can be easily fixed by manually running:
``` /usr/bin/c++   -std=c++11 -O3 -DNDEBUG  -rdynamic CMakeFiles/msdfgen.dir/main.cpp.o  -o msdfgen libmsdfgen.a `freetype-config --static --libs` /usr/local/lib/libfreetype.a ```

Instead of cmake running:
``` /usr/bin/c++   -std=c++11 -O3 -DNDEBUG  -rdynamic CMakeFiles/msdfgen.dir/main.cpp.o  -o msdfgen libmsdfgen.a /usr/local/lib/libfreetype.a ```
