I'm trying to provide X within server.ts providers
```
app.engine('html', (_, options, callback) => {
  const engine = ngExpressEngine({
    bootstrap: AppServerModuleNgFactory,
    providers: [
      provideModuleMap(LAZY_MODULE_MAP),
      {provide : 'env' , useFactory: () => environment , deps: []},
      {provide: 'host', useFactory: () => options['req'].get('host'), deps: []}
    ]
  });
  engine(_, options, callback);
});
```
the value `host` is provided & injected successfully ,However `env` isn't  ,  it says `NullInjectorError: No provider for env!` **(only in the browser)**
I'm using  version 8 with `"@nguniversal/express-engine": "^8.2.6"`

# üêû Bug report

#### What modules are related to this issue?
<!-- ‚úçÔ∏èedit: -->
- [ ] aspnetcore-engine
- [ ] builders
- [ ] common
- [x] express-engine
- [ ] hapi-engine
- [ ] module-map-ngfactory-loader

### Is this a regression?
No, localize is new to Angular 9.

### Description
The distFolder is hardcoded in ./server.ts. When the browser server assets are built with localize: true, the assets are placed in a subfolder with the locale name (eg: dist/{appName}/browser/{locale}/ and dist/{appName}/server/{locale}). Now the server can no longer find the correct directory for the browser assets and fails to render.

Is there any way server.ts can know location of the browser assets without hardcoding the path?

Thanks.

## üî¨ Minimal Reproduction
<!--
Simple steps to reproduce this bug.

Please include: commands run (including args), packages added, related code changes.

If reproduction steps are not enough for reproduction of your issue, please create a minimal GitHub repository with the reproduction of the issue. 
A good way to make a minimal reproduction is to create a new app via `ng new repro-app` and add the minimum possible code to show the problem. 
Share the link to the repo below along with step-by-step instructions to reproduce the problem, as well as expected and actual behavior.

Issues that don't have enough info and can't be reproduced will be closed.

You can read more about issue submission guidelines here: https://github.com/angular/universal/blob/master/CONTRIBUTING.md#-submitting-an-issue
-->
<pre><code>ng new ng-sample
ng add @angular/localize@next
ng add @nguniversal/express-engine@next

add localize: true to the options of the build and server architect

ng build --prod
ng run ng-sample:server:production
node dist/ng-sample/server/en-US/main.js

browser to http://localhost:4000
</code></pre>

## üî• Exception or Error
<pre><code>Error: Failed to lookup view "index" in views directory "/code/ng-sample/dist/ng-sample/browser"
    at Function.render (/code/ng-sample/dist/ng-sample/server/en-US/main.js:1:1122933)
    at ServerResponse.render (/code/ng-sample/dist/ng-sample/server/en-US/main.js:1:1398756)
    at server.get (/code/ng-sample/dist/ng-sample/server/en-US/main.js:1:2259271)
    at Layer.handle [as handle_request] (/code/ng-sample/dist/ng-sample/server/en-US/main.js:1:1144375)
    at next (/code/ng-sample/dist/ng-sample/server/en-US/main.js:1:1131913)
    at Route.dispatch (/code/ng-sample/dist/ng-sample/server/en-US/main.js:1:1131942)
    at Layer.handle [as handle_request] (/code/ng-sample/dist/ng-sample/server/en-US/main.js:1:1144375)
    at /code/ng-sample/dist/ng-sample/server/en-US/main.js:1:2473361
    at param (/code/ng-sample/dist/ng-sample/server/en-US/main.js:1:2474870)
    at param (/code/ng-sample/dist/ng-sample/server/en-US/main.js:1:2475277)
</code></pre>


## üåç Your Environment
<pre><code>Angular CLI: 9.0.0-rc.9
Node: 10.16.0
OS: darwin x64

Angular: 9.0.0-rc.9
... animations, cli, common, compiler, compiler-cli, core, forms
... language-service, localize, platform-browser
... platform-browser-dynamic, platform-server, router
Ivy Workspace: Yes

Package                           Version
-----------------------------------------------------------
@angular-devkit/architect         0.900.0-rc.9
@angular-devkit/build-angular     0.900.0-rc.9
@angular-devkit/build-optimizer   0.900.0-rc.9
@angular-devkit/build-webpack     0.900.0-rc.9
@angular-devkit/core              9.0.0-rc.9
@angular-devkit/schematics        9.0.0-rc.9
@ngtools/webpack                  9.0.0-rc.9
@nguniversal/builders             9.0.0-rc.0
@nguniversal/common               9.0.0-rc.0
@nguniversal/express-engine       9.0.0-rc.0
@schematics/angular               9.0.0-rc.9
@schematics/update                0.900.0-rc.9
rxjs                              6.5.4
typescript                        3.6.4
webpack                           4.41.2
</code></pre>
# üêû Bug report

#### What modules are related to this issue?
- [ ] aspnetcore-engine
- [x] builders
- [ ] common
- [ ] express-engine
- [ ] hapi-engine
- [ ] module-map-ngfactory-loader

### Is this a regression?

No.

### Description

Hi, 

I noticed something that I feel confusing about prerendering. My Angular application needs one single route, so I'm not using the `RouterModule`. I want to prerender the application using the new prerender command:

```bash
ng run my-app:prerender
```

Which get me the following error: 

```
An unhandled exception occurred: No routes found.
```

To make this work I need to specify an empty `--routes` argument in the command.

```bash
ng run my-app:prerender --routes
```

This argument is required even if I have no `RouterModule` declared. Is it a desired behavior?

## üåç Your Environment

```
@nguniversal/builders             9.0.0-rc.0
@nguniversal/common               9.0.0-rc.0
@nguniversal/express-engine       9.0.0-rc.0
```
This PR contains the following updates:

| Package | Type | Update | Change |
|---|---|---|---|
| [@types/hapi__hapi](https://togithub.com/DefinitelyTyped/DefinitelyTyped) | devDependencies | major | [`^18.2.5` -> `^19.0.0`](https://renovatebot.com/diffs/npm/@types%2fhapi__hapi/18.2.6/19.0.0) |

---

### Renovate configuration

:date: **Schedule**: "after 10pm every weekday,before 4am every weekday,every weekend" in timezone America/Tijuana.

:vertical_traffic_light: **Automerge**: Disabled by config. Please merge this manually once you are satisfied.

:recycle: **Rebasing**: Whenever PR becomes conflicted, or if you modify the PR title to begin with "`rebase!`".

:no_bell: **Ignore**: Close this PR and you won't be reminded about this update again.

---

 - [ ] <!-- rebase-check -->If you want to rebase/retry this PR, check this box

---

This PR has been generated by [WhiteSource Renovate](https://renovate.whitesourcesoftware.com). View repository job log [here](https://app.renovatebot.com/dashboard#angular/universal).
Google Pagespeed Insights reveals a very poor score on performance for pages that are served with SSR via Angular Universal.

The app is built on top of the **ngx-admin** Angular template. ( https://github.com/akveo/ngx-admin), where we've tried implementing universal SSR.

Most of the performance alerts are attributed to the category of "Main Thread Work", which means that there is javascript & css execution happening after the page is rendered.

![Screen Shot 2020-01-13 at 8 10 56 PM](https://user-images.githubusercontent.com/5394402/72356513-65317a80-370f-11ea-8069-09c820df1f22.png)

![Screen Shot 2020-01-13 at 8 11 11 PM](https://user-images.githubusercontent.com/5394402/72356479-58148b80-370f-11ea-9c18-15fd747468bb.png)

We do not see this recommendation for our current SSR solution, an in-house **Prerender.io** hosting which internally uses a headless chrome to serve the rendered page. 

Also, Pagespeed reports a higher performance score for Prerender based SSR, even though it has higher network latency involved. One reason for this could be that Prerender has a mechanism to strip out `<script>` tags from the html which ensures that no javascript gets executed from the client browser accidentally.

How do we optimize the Universal implementation for a good performance score?


This PR contains the following updates:

| Package | Type | Update | Change |
|---|---|---|---|
| [@hapi/hapi](https://hapijs.com) ([source](https://togithub.com/hapijs/hapi)) | devDependencies | major | [`^18.4.0` -> `^19.0.0`](https://renovatebot.com/diffs/npm/@hapi%2fhapi/18.4.0/19.0.5) |

---

### Release Notes

<details>
<summary>hapijs/hapi</summary>

### [`v19.0.5`](https://togithub.com/hapijs/hapi/compare/v19.0.4...v19.0.5)

[Compare Source](https://togithub.com/hapijs/hapi/compare/v19.0.4...v19.0.5)

### [`v19.0.4`](https://togithub.com/hapijs/hapi/compare/v19.0.3...v19.0.4)

[Compare Source](https://togithub.com/hapijs/hapi/compare/v19.0.3...v19.0.4)

### [`v19.0.3`](https://togithub.com/hapijs/hapi/compare/v19.0.2...v19.0.3)

[Compare Source](https://togithub.com/hapijs/hapi/compare/v19.0.2...v19.0.3)

### [`v19.0.2`](https://togithub.com/hapijs/hapi/compare/v19.0.1...v19.0.2)

[Compare Source](https://togithub.com/hapijs/hapi/compare/v19.0.1...v19.0.2)

### [`v19.0.1`](https://togithub.com/hapijs/hapi/compare/v19.0.0...v19.0.1)

[Compare Source](https://togithub.com/hapijs/hapi/compare/v19.0.0...v19.0.1)

### [`v19.0.0`](https://togithub.com/hapijs/hapi/compare/v18.4.0...v19.0.0)

[Compare Source](https://togithub.com/hapijs/hapi/compare/v18.4.0...v19.0.0)

</details>

---

### Renovate configuration

:date: **Schedule**: "after 10pm every weekday,before 4am every weekday,every weekend" in timezone America/Tijuana.

:vertical_traffic_light: **Automerge**: Disabled by config. Please merge this manually once you are satisfied.

:recycle: **Rebasing**: Whenever PR becomes conflicted, or if you modify the PR title to begin with "`rebase!`".

:no_bell: **Ignore**: Close this PR and you won't be reminded about this update again.

---

 - [ ] <!-- rebase-check -->If you want to rebase/retry this PR, check this box

---

This PR has been generated by [WhiteSource Renovate](https://renovate.whitesourcesoftware.com). View repository job log [here](https://app.renovatebot.com/dashboard#angular/universal).
after enabling `ssr`(angular universal) on my Angular project , when I click on every link it refreshes the whole page(reload that page again) or when I click on submit button .

for example :
`
<a routerLink="/auth/register/careworker-register"> CareWorker </a>`
or

`<a [routerLink]="['/auth','register','careworker-register']"> CareWorker </a>`
both of them , refresh the whole page.

package.json:

```
{
  "name": "start-ng",
  "version": "2.2.0",
  "license": "MIT",
  "scripts": {
    "ng": "ng",
    "start": "ng serve",
    "build": "ng build",
    "test": "ng test",
    "lint": "ng lint",
    "develop": "node --max_old_space_size=8192 ./node_modules/@angular/cli/bin/ng  build --prod",
    "prod": "node --max_old_space_size=8192 ./node_modules/@angular/cli/bin/ng  build --prod --configuration=production",
    "stage": "node --max_old_space_size=8192 ./node_modules/@angular/cli/bin/ng  build --prod --configuration=staging",
    "e2e": "ng e2e",
    "compile:server": "webpack --config webpack.server.config.js --progress --colors",
    "serve:ssr": "node dist/server",
    "build:ssr": "npm run build:client-and-server-bundles && npm run compile:server",
    "build:client-and-server-bundles": "ng build --prod && ng run careandcarers:server:production --bundleDependencies all"
  },
  "private": true,
  "dependencies": {
    "@agm/core": "^1.1.0",
    "@angular/animations": "^8.2.14",
    "@angular/cdk": "^8.2.3",
    "@angular/common": "^8.2.14",
    "@angular/compiler": "^8.2.14",
    "@angular/core": "^8.2.14",
    "@angular/forms": "^8.2.14",
    "@angular/platform-browser": "^8.2.14",
    "@angular/platform-browser-dynamic": "^8.2.14",
    "@angular/platform-server": "^8.2.14",
    "@angular/router": "^8.2.14",
    "@aspnet/signalr": "^1.0.0",
    "@fullcalendar/angular": "^4.3.1",
    "@fullcalendar/core": "^4.3.1",
    "@fullcalendar/daygrid": "^4.3.0",
    "@fullcalendar/interaction": "^4.3.0",
    "@fullcalendar/timegrid": "^4.3.0",
    "@nguniversal/express-engine": "^8.2.6",
    "@nguniversal/module-map-ngfactory-loader": "v8.2.6",
    "@ngx-progressbar/core": "^5.3.2",
    "@ngx-progressbar/http": "^5.3.2",
    "@ngx-progressbar/router": "^5.3.2",
    "@progress/kendo-angular-buttons": "^5.1.0",
    "@progress/kendo-angular-common": "^1.2.1",
    "@progress/kendo-angular-dateinputs": "4.2.0",
    "@progress/kendo-angular-dropdowns": "^4.2.3",
    "@progress/kendo-angular-excel-export": "3.1.0",
    "@progress/kendo-angular-grid": "^4.6.0",
    "@progress/kendo-angular-inputs": "6.3.1",
    "@progress/kendo-angular-intl": "^2.0.0",
    "@progress/kendo-angular-l10n": "^2.0.1",
    "@progress/kendo-angular-pdf-export": "^2.0.0",
    "@progress/kendo-angular-popup": "^3.0.4",
    "@progress/kendo-angular-upload": "^5.1.0",
    "@progress/kendo-data-query": "^1.5.2",
    "@progress/kendo-drawing": "^1.6.0",
    "@progress/kendo-theme-default": "latest",
    "@swimlane/ngx-charts": "^12.0.1",
    "agm-direction": "^0.7.9",
    "angular-l10n": "^8.1.2",
    "bootstrap": "^4.4.1",
    "classlist.js": "^1.1.20150312",
    "core-js": "^3.6.0",
    "core-util-is": "^1.0.2",
    "domino": "^2.1.4",
    "express": "^4.15.2",
    "file-saver": "^2.0.2",
    "font-awesome": "^4.7.0",
    "intl": "1.2.5",
    "jquery": "^3.4.1",
    "jwt-decode": "^2.2.0",
    "moment": "^2.24.0",
    "ng-block-ui": "^2.1.8",
    "ng-circle-progress": "^1.5.1",
    "ng2-ckeditor": "^1.2.6",
    "ngx-bar-rating": "^1.1.0",
    "ngx-bootstrap": "^5.2.0",
    "ngx-chips": "^2.1.0",
    "ngx-contextmenu": "^5.3.0",
    "ngx-infinite-scroll": "^8.0.1",
    "ngx-perfect-scrollbar": "8.0.0",
    "ngx-toastr": "^11.2.1",
    "npm-check-updates": "^4.0.1",
    "opencollective-postinstall": "^2.0.2",
    "reflect-metadata": "^0.1.13",
    "rxjs": "^6.5.3",
    "rxjs-compat": "^6.5.3",
    "sweetalert2": "^7.29.0",
    "tslib": "^1.9.0",
    "undefined": "^0.1.0",
    "web-animations-js": "github:angular/web-animations-js#release_pr208",
    "ws": "^7.2.1",
    "xmlhttprequest": "^1.8.0",
    "zone.js": "^0.10.2"
  },
  "devDependencies": {
    "@angular-devkit/build-angular": "~0.803.21",
    "@angular-devkit/build-ng-packagr": "~0.803.21",
    "@angular/cli": "^8.3.21",
    "@angular/compiler-cli": "^8.2.14",
    "@angular/language-service": "^8.2.14",
    "@types/express": "^4.17.0",
    "@types/googlemaps": "^3.39.0",
    "@types/jasmine": "^3.5.0",
    "@types/jasminewd2": "^2.0.8",
    "@types/node": "~13.1.0",
    "codelyzer": "^5.2.1",
    "jasmine-core": "~3.5.0",
    "jasmine-spec-reporter": "~4.2.1",
    "karma": "^4.4.1",
    "karma-chrome-launcher": "~3.1.0",
    "karma-coverage-istanbul-reporter": "^2.1.1",
    "karma-jasmine": "^2.0.1",
    "karma-jasmine-html-reporter": "^1.4.2",
    "ng-packagr": "^5.7.1",
    "node-sass": "^4.13.0",
    "protractor": "~5.4.2",
    "ts-loader": "^5.2.0",
    "ts-node": "~8.5.4",
    "tsickle": "^0.37.1",
    "tslib": "^1.10.0",
    "tslint": "~5.20.1",
    "typescript": "^3.5.3",
    "uglify-js": "^3.7.2",
    "webpack": "^4.41.4",
    "webpack-cli": "^3.1.0"
  }
}
```

This PR contains the following updates:

| Package | Type | Update | Change |
|---|---|---|---|
| [@hapi/inert](https://togithub.com/hapijs/inert) | dependencies | major | [`5.2.2` -> `6.0.1`](https://renovatebot.com/diffs/npm/@hapi%2finert/5.2.2/6.0.1) |

---

### Release Notes

<details>
<summary>hapijs/inert</summary>

### [`v6.0.1`](https://togithub.com/hapijs/inert/compare/v6.0.0...v6.0.1)

[Compare Source](https://togithub.com/hapijs/inert/compare/v6.0.0...v6.0.1)

### [`v6.0.0`](https://togithub.com/hapijs/inert/compare/v5.2.2...v6.0.0)

[Compare Source](https://togithub.com/hapijs/inert/compare/v5.2.2...v6.0.0)

</details>

---

### Renovate configuration

:date: **Schedule**: "after 10pm every weekday,before 4am every weekday,every weekend" in timezone America/Tijuana.

:vertical_traffic_light: **Automerge**: Disabled by config. Please merge this manually once you are satisfied.

:recycle: **Rebasing**: Whenever PR becomes conflicted, or if you modify the PR title to begin with "`rebase!`".

:no_bell: **Ignore**: Close this PR and you won't be reminded about this update again.

---

 - [ ] <!-- rebase-check -->If you want to rebase/retry this PR, check this box

---

This PR has been generated by [WhiteSource Renovate](https://renovate.whitesourcesoftware.com). View repository job log [here](https://app.renovatebot.com/dashboard#angular/universal).
The server runs on localhost:4000. when I type localhost:4000 in browser nothing happens. But if I put localhost:4000/index.html, It starting to load fine and return to base localhost:4000. Then every angular route works fine. But if I try to refresh any page it doesn't load anything.
This is probably because I haven't been able to configure my server.ts file properly.

package.json

```
    "@angular/animations": "^8.2.14",
    "@angular/common": "^8.2.14",
    "@angular/compiler": "^8.2.14",
    "@angular/core": "^8.2.14",
    "@angular/forms": "^8.2.14",
    "@angular/http": "^7.2.15",
    "@angular/platform-browser": "^8.2.14",
    "@angular/platform-browser-dynamic": "^8.2.14",
    "@angular/platform-server": "^8.2.14",
    "@angular/router": "^8.2.14",
    "@ng-bootstrap/ng-bootstrap": "^5.1.4",
    "@nguniversal/express-engine": "^9.0.0-next.14",
```
app.routing.module.ts
```
    {
        path: 'client',
        loadChildren: () => import('./client/client.module').then(m => m.ClientModule)
    },
    {
        path: '',
        loadChildren: () => import('./home/home.module').then(m => m.HomeModule),
        resolve: {
            settings: HomeResoveService,
            cartCheckL: CartTokenService
        },
        // canActivate: [AppGuardService]
    },
    {
        path: 'not-found',
        loadChildren: () => import('./not-found/not-found.module').then(m => m.NotFoundModule),
        data : { title:'Not Found'} 
    },
    { 
        path: '**',
        redirectTo: 'not-found'
    }
```

server.ts file :
```
import 'zone.js/dist/zone-node';
import { join } from 'path';
import { existsSync } from 'fs';
// ssr DOM
const domino = require('domino');
const fs = require('fs');
// const template = fs.readFileSync(path.join('dist/browser', 'index.html')).toString();
const distFolder = join(process.cwd(), 'dist/browser');
const indexHtml = existsSync(join(distFolder, 'index.original.html')) ? 'index.original.html' : 'index';
const win = domino.createWindow(indexHtml);
global['window'] = win;
Object.defineProperty(win.document.body.style, 'transform', {
  value: () => {
    return {
      enumerable: true,
      configurable: true,
    };
  },
});
global['document'] = win.document;
global['CSS'] = null;
global['Prism'] = null;
import { ngExpressEngine } from '@nguniversal/express-engine';
import * as express from 'express';

import { AppServerModule } from './src/main.server';
import { APP_BASE_HREF } from '@angular/common';
export function app() {
  const server = express();
  server.engine('html', ngExpressEngine({
    bootstrap: AppServerModule,
  }));

  server.set('view engine', 'html');
  server.set('views', distFolder);

  server.get('*.*', express.static(distFolder, {
    maxAge: '1y'
  }));

  server.get('*', (req, res) => {
    res.render(indexHtml, { req, providers: [{ provide: APP_BASE_HREF, useValue: req.baseUrl }] });
  });

  return server;
}

function run() {
  const port = process.env.PORT || 4000;

  // Start up the Node server
  const server = app();
  server.listen(port, () => {
    console.log(`Node Express server listening on http://localhost:${port}`);
  });
}

// Webpack will replace 'require' with '__webpack_require__'
// '__non_webpack_require__' is a proxy to Node 'require'
// The below code is to ensure that the server is run only when not requiring the bundle.
declare const __non_webpack_require__: NodeRequire;
const mainModule = __non_webpack_require__.main;
if (mainModule && mainModule.filename === __filename) {
  run();
}
export * from './src/main.server';
````
dist folder has browser and project-name-server folder. Index.html and other static files are in dist/browser folder.
# Feature Request

#### What is the desired behavior?
documentation request for use cases and applications for universal/modules/socket-engine/

#### What is the use-case or motivation for the desired behavior?
im currently using express engine for SSR and I don't really understand application or use of socket engine

#### Is there anything else we should know?
thanks