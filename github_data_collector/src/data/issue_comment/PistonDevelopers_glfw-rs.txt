
```
error[E0425]: cannot find function `glfwGetX11Window` in module `ffi`
    --> /usr/ports/graphics/rx/work/rx-0.3.2/cargo-crates/glfw-0.34.0/src/lib.rs:2627:31
     |
2627 |             let window = ffi::glfwGetX11Window(context.window_ptr());
     |                               ^^^^^^^^^^^^^^^^ help: a function with a similar name exists: `glfwDestroyWindow`
     | 
    ::: /usr/ports/graphics/rx/work/rx-0.3.2/cargo-crates/glfw-0.34.0/src/ffi/mod.rs:448:5
     |
448  |     pub fn glfwDestroyWindow(window: *mut GLFWwindow);
     |     -------------------------------------------------- similarly named function `glfwDestroyWindow` defined here

error[E0425]: cannot find function `glfwGetX11Display` in module `ffi`
    --> /usr/ports/graphics/rx/work/rx-0.3.2/cargo-crates/glfw-0.34.0/src/lib.rs:2628:32
     |
2628 |             let display = ffi::glfwGetX11Display();
     |                                ^^^^^^^^^^^^^^^^^ not found in `ffi`

```
Is it possible to compile this library statically, via the `musl` target? I have not been successful so far.
Hey, would it make sense to export `vk-sys` from `glfw`, for applications that use vulkan? This would ensure the versions always match.
I seems "glfw_window" uses an identical setup, which builds fine: https://github.com/PistonDevelopers/glfw_window/blob/master/.travis.yml
Hello,

I've been happily using the glfw crate on OpenBSD, so many thanks! :-)

However, I found out today that v0.23 does not work on OpenBSD. To get v0.22 to work, one needs to disable the vulkan feature, but even doing that doesn't work with v0.23. I get the following errors:

(note that all of the "aaaa"'s after filenames below was changed by me on purpose).

```
error: linking with `cc` failed: exit code: 1
  |
  = note: "cc" "-Wl,--as-needed" "-Wl,-z,noexecstack" "-m64" "-L" "/usr/local/lib/rustlib/x86_64-unknown-openbsd/lib" "/home/person/my_docs/luminance-rs/target/debug/deps/hello_world-aaaa.rcgu.o" "/home/person/my_docs/luminance-rs/target/debug/deps/hello_world-aaaa.rcgu.o" "/home/person/my_docs/luminance-rs/target/debug/deps/hello_world-aaaa.rcgu.o" "/home/person/my_docs/luminance-rs/target/debug/deps/hello_world-aaaa.rcgu.o" "/home/person/my_docs/luminance-rs/target/debug/deps/hello_world-aaaa.rcgu.o" "/home/person/my_docs/luminance-rs/target/debug/deps/hello_world-aaaa.rcgu.o" "/home/person/my_docs/luminance-rs/target/debug/deps/hello_world-aaaa.rcgu.o" "/home/person/my_docs/luminance-rs/target/debug/deps/hello_world-aaaa.rcgu.o" "/home/person/my_docs/luminance-rs/target/debug/deps/hello_world-aaaa.rcgu.o" "/home/person/my_docs/luminance-rs/target/debug/deps/hello_world-aaaa.rcgu.o" "/home/person/my_docs/luminance-rs/target/debug/deps/hello_world-aaaa.rcgu.o" "/home/person/my_docs/luminance-rs/target/debug/deps/hello_world-aaaa.rcgu.o" "/home/person/my_docs/luminance-rs/target/debug/deps/hello_world-aaaa.rcgu.o" "/home/person/my_docs/luminance-rs/target/debug/deps/hello_world-aaaa.rcgu.o" "/home/person/my_docs/luminance-rs/target/debug/deps/hello_world-aaaa.rcgu.o" "/home/person/my_docs/luminance-rs/target/debug/deps/hello_world-aaaa.rcgu.o" "/home/person/my_docs/luminance-rs/target/debug/deps/hello_world-aaaa.rcgu.o" "/home/person/my_docs/luminance-rs/target/debug/deps/hello_world-aaaa.rcgu.o" "/home/person/my_docs/luminance-rs/target/debug/deps/hello_world-aaaa.rcgu.o" "/home/person/my_docs/luminance-rs/target/debug/deps/hello_world-aaaa.rcgu.o" "/home/person/my_docs/luminance-rs/target/debug/deps/hello_world-aaaa.rcgu.o" "/home/person/my_docs/luminance-rs/target/debug/deps/hello_world-aaaa.rcgu.o" "/home/person/my_docs/luminance-rs/target/debug/deps/hello_world-aaaa.rcgu.o" "/home/person/my_docs/luminance-rs/target/debug/deps/hello_world-aaaa.rcgu.o" "/home/person/my_docs/luminance-rs/target/debug/deps/hello_world-aaaa.rcgu.o" "/home/person/my_docs/luminance-rs/target/debug/deps/hello_world-aaaa.rcgu.o" "/home/person/my_docs/luminance-rs/target/debug/deps/hello_world-aaaa.rcgu.o" "/home/person/my_docs/luminance-rs/target/debug/deps/hello_world-aaaa.rcgu.o" "/home/person/my_docs/luminance-rs/target/debug/deps/hello_world-aaaa.rcgu.o" "/home/person/my_docs/luminance-rs/target/debug/deps/hello_world-aaaa.rcgu.o" "/home/person/my_docs/luminance-rs/target/debug/deps/hello_world-aaaa.rcgu.o" "/home/person/my_docs/luminance-rs/target/debug/deps/hello_world-aaaa.rcgu.o" "/home/person/my_docs/luminance-rs/target/debug/deps/hello_world-aaaa.rcgu.o" "/home/person/my_docs/luminance-rs/target/debug/deps/hello_world-aaaa.rcgu.o" "/home/person/my_docs/luminance-rs/target/debug/deps/hello_world-aaaa.rcgu.o" "/home/person/my_docs/luminance-rs/target/debug/deps/hello_world-aaaa.rcgu.o" "/home/person/my_docs/luminance-rs/target/debug/deps/hello_world-aaaa.rcgu.o" "/home/person/my_docs/luminance-rs/target/debug/deps/hello_world-aaaa.rcgu.o" "/home/person/my_docs/luminance-rs/target/debug/deps/hello_world-aaaa.rcgu.o" "/home/person/my_docs/luminance-rs/target/debug/deps/hello_world-aaaa.rcgu.o" "/home/person/my_docs/luminance-rs/target/debug/deps/hello_world-aaaa.rcgu.o" "/home/person/my_docs/luminance-rs/target/debug/deps/hello_world-aaaa.rcgu.o" "/home/person/my_docs/luminance-rs/target/debug/deps/hello_world-aaaa.rcgu.o" "/home/person/my_docs/luminance-rs/target/debug/deps/hello_world-aaaa.rcgu.o" "/home/person/my_docs/luminance-rs/target/debug/deps/hello_world-aaaa.rcgu.o" "/home/person/my_docs/luminance-rs/target/debug/deps/hello_world-aaaa.rcgu.o" "-o" "/home/person/my_docs/luminance-rs/target/debug/deps/hello_world-f3c488918083ff6b" "/home/person/my_docs/luminance-rs/target/debug/deps/hello_world-aaaa.rcgu.o" "-Wl,--gc-sections" "-pie" "-Wl,-zrelro" "-Wl,-znow" "-nodefaultlibs" "-L" "/home/person/my_docs/luminance-rs/target/debug/deps" "-L" "/home/person/my_docs/luminance-rs/target/debug/build/glfw-sys-0a5e649531911371/out/lib" "-L" "/usr/local/lib/rustlib/x86_64-unknown-openbsd/lib" "-Wl,-Bstatic" "/home/person/my_docs/luminance-rs/target/debug/deps/libluminance_glfw-aaaa.rlib" "/home/person/my_docs/luminance-rs/target/debug/deps/libluminance_windowing-aaaa.rlib" "/home/person/my_docs/luminance-rs/target/debug/deps/libglfw-aaaa.rlib" "/home/person/my_docs/luminance-rs/target/debug/deps/libnum-aaaa.rlib" "/home/person/my_docs/luminance-rs/target/debug/deps/libnum_rational-aaaa.rlib" "/home/person/my_docs/luminance-rs/target/debug/deps/libnum_bigint-aaaa.rlib" "/home/person/my_docs/luminance-rs/target/debug/deps/librand-aaaa.rlib" "/home/person/my_docs/luminance-rs/target/debug/deps/libnum_complex-aaaa.rlib" "/home/person/my_docs/luminance-rs/target/debug/deps/librustc_serialize-aaaa.rlib" "/home/person/my_docs/luminance-rs/target/debug/deps/libnum_iter-aaaa.rlib" "/home/person/my_docs/luminance-rs/target/debug/deps/libnum_integer-aaaa.rlib" "/home/person/my_docs/luminance-rs/target/debug/deps/libenum_primitive-aaaa.rlib" "/home/person/my_docs/luminance-rs/target/debug/deps/libnum_traits-aaaa.rlib" "/home/person/my_docs/luminance-rs/target/debug/deps/libnum_traits-aaaa.rlib" "/home/person/my_docs/luminance-rs/target/debug/deps/libbitflags-aaaa.rlib" "/home/person/my_docs/luminance-rs/target/debug/deps/liblog-aaaa.rlib" "/home/person/my_docs/luminance-rs/target/debug/deps/libcfg_if-aaaa.rlib" "/home/person/my_docs/luminance-rs/target/debug/deps/liblibc-aaaa.rlib" "/home/person/my_docs/luminance-rs/target/debug/deps/libsemver-aaaa.rlib" "/home/person/my_docs/luminance-rs/target/debug/deps/libnom-aaaa.rlib" "/home/person/my_docs/luminance-rs/target/debug/deps/libluminance-aaaa.rlib" "/home/person/my_docs/luminance-rs/target/debug/deps/libgl-aaaa.rlib" "-Wl,--start-group" "/usr/local/lib/rustlib/x86_64-unknown-openbsd/lib/libstd-aaaa.rlib" "/usr/local/lib/rustlib/x86_64-unknown-openbsd/lib/libpanic_unwind-aaaa.rlib" "/usr/local/lib/rustlib/x86_64-unknown-openbsd/lib/libbacktrace_sys-aaaa.rlib" "/usr/local/lib/rustlib/x86_64-unknown-openbsd/lib/libunwind-aaaa.rlib" "/usr/local/lib/rustlib/x86_64-unknown-openbsd/lib/librustc_demangle-aaaa.rlib" "/usr/local/lib/rustlib/x86_64-unknown-openbsd/lib/liblibc-aaaa.rlib" "/usr/local/lib/rustlib/x86_64-unknown-openbsd/lib/liballoc-aaaa.rlib" "/usr/local/lib/rustlib/x86_64-unknown-openbsd/lib/librustc_std_workspace_core-aaaa.rlib" "/usr/local/lib/rustlib/x86_64-unknown-openbsd/lib/libcore-aaaa.rlib" "-Wl,--end-group" "/usr/local/lib/rustlib/x86_64-unknown-openbsd/lib/libcompiler_builtins-aaaa.rlib" "-Wl,-Bdynamic" "-lutil" "-lpthread" "-lc++abi" "-lc" "-lm" "-lutil" "-lcompiler_rt"

(many errors of similar form as below)

>>> referenced by x11_init.c:498 (/home/person/.cargo/registry/src/github.com-aaaaa/glfw-sys-3.2.2/src/x11_init.c:498)
          >>>               x11_init.c.o:(initExtensions) in archive /home/person/my_docs/luminance-rs/target/debug/deps/libglfw-aaaaa.rlib
          
          ld: error: undefined symbol: XRRFreeScreenResources
          >>> referenced by x11_init.c:509 (/home/person/.cargo/registry/src/github.com-aaaaa/glfw-sys-3.2.2/src/x11_init.c:509)
          >>>               x11_init.c.o:(initExtensions) in archive /home/person/my_docs/luminance-rs/target/debug/deps/libglfw-aaaaa.rlib
          
          ld: error: too many errors emitted, stopping now (use -error-limit=0 to see all errors)
          cc: error: linker command failed with exit code 1 (use -v to see invocation)
```

Best wishes,
Rob
I am using Fedora 29 and XWayland on x86_64 arch. 
cargo check error https://pastebin.com/RvxAXgjR
cargo check --verbose --color-always --all --all-targets https://pastebin.com/8H30s2yr
I'm trying to use Vulkan in combination with glfw-rs, but I didn't find a function that would wrap [`glfwCreateWindowSurface`](https://www.glfw.org/docs/latest/group__vulkan.html#ga1a24536bec3f80b08ead18e28e6ae965). Is it missing for a reason or is it just an oversight? If it's just an oversight I can make a pull request later this week.

For now I'm trying to use `glfw::ffi::glfwCreateWindowSurface` instead, but to do that I need the raw pointer on the GLFWwindow. I didn't find a way to retrieve it from a `glfw::Window`, is it possible?

EDIT: Ok I found how to retrieve the pointer; it's `window.window_ptr()`.
When window is resized on macos, event polling api is blocked. According to this
https://github.com/glfw/glfw/issues/408, it may be solved by redraw inside window refresh callback, when window is resizing. But I cannot pull it off the event loop, with a loop like this

```rust
while !window.should_close() {
    glfw.wait_events_timeout(1.0/60.0);

    for (_, event) in glfw::flush_messages(&events) {
        handle_window_event(window, event);
    }
}
```
Since it's blocked on wait_events or poll_events, callbacks are processed by this eventloop.
Cargo version : cargo 1.29.0 (524a578d7 2018-08-05)
Rust version : rustc 1.29.1 (b801ae664 2018-09-20)

I'm not compile the vulkan example

```toml
# cargo.toml
[package]
name = "vulkanrust"
version = "0.1.0"
authors = ["Florian RICHER (MrDev023) <trexricher1997@gmail.com>"]

[features]
default = []
metal = ["gfx-backend-metal"]
gl = ["gfx-backend-gl"]
dx12 = ["gfx-backend-dx12"]
vulkan = ["gfx-backend-vulkan"]
unstable = []

[dependencies]
vk-sys = "0.3.3"
env_logger = "0.5"
image = "0.20.0"
log = "0.4"
winit = "0.17"
glsl-to-spirv = "0.1.7"
gfx-hal = { path = "./gfx/src/hal", version = "0.1" }
gfx-backend-empty = { path = "./gfx/src/backend/empty", version = "0.1" }

[dependencies.glfw]
git = "https://github.com/bjz/glfw-rs"

[dependencies.gfx-backend-gl]
path = "./gfx/src/backend/gl"
version = "0.1"
features = ["glutin"]
optional = true

[dependencies.gfx-backend-vulkan]
path = "./gfx/src/backend/vulkan"
version = "0.1"
#features = ["glsl-to-spirv"]
optional = true

[target.'cfg(any(target_os = "macos", all(target_os = "ios", target_arch = "aarch64")))'.dependencies.gfx-backend-metal]
path = "./gfx/src/backend/metal"
version = "0.1"
optional = true

[target.'cfg(windows)'.dependencies.gfx-backend-dx12]
path = "./gfx/src/backend/dx12"
version = "0.1"
optional = true

[[bin]]
name = "main"
path = "src/main.rs"
```
```rust
// main.rs
// Copyright 2016 The GLFW-RS Developers. For a full listing of the authors,
// refer to the AUTHORS file at the top-level directory of this distribution.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
#![cfg(feature = "vulkan")]

extern crate glfw;
extern crate vk_sys;

use std::os::raw::c_void;
use std::mem;
use std::ptr;

use vk_sys::{
    self as vk,
    EntryPoints,
    InstancePointers,
    InstanceCreateInfo,
    Instance as VkInstance,
    Result as VkResult
};

use glfw::Context;

fn main () {
    let mut glfw = glfw::init(glfw::FAIL_ON_ERRORS).unwrap();

    glfw.window_hint(glfw::WindowHint::Visible(true));

    let (mut window, _) = glfw.create_window(640, 480, "Defaults", glfw::WindowMode::Windowed)
                              .expect("Failed to create GLFW window.");

    window.make_current();

    assert!(glfw.vulkan_supported());

    let required_extensions = glfw.get_required_instance_extensions().unwrap_or(vec![]);

    //VK_KHR_surface will always be available if the previous operations were successful
    assert!(required_extensions.contains(&"VK_KHR_surface".to_string()));

    println!("Vulkan required extensions: {:?}", required_extensions);

    //Load up all the entry points using 0 as the VkInstance,
    //since you can't have an instance before you get vkCreateInstance...
    let mut entry_points: EntryPoints = EntryPoints::load(|func| {
        window.get_instance_proc_address(0, func.to_str().unwrap()) as *const c_void
    });

    let instance: VkInstance = unsafe { create_instance(&mut entry_points) };

    let mut instance_ptrs: InstancePointers = InstancePointers::load(|func| {
        window.get_instance_proc_address(instance, func.to_str().unwrap()) as *const c_void
    });

    //Load other pointers and do other Vulkan stuff here

    unsafe {
        destroy_instance(instance, &mut instance_ptrs);
    }

    println!("Vulkan instance successfully created and destroyed.");
}

unsafe fn create_instance(entry_points: &mut EntryPoints) -> VkInstance {
    let mut instance: VkInstance = mem::uninitialized();

    //This is literally the bare minimum required to create a blank instance
    //You'll want to fill in this with real data yourself
    let info: InstanceCreateInfo = InstanceCreateInfo {
        sType: vk::STRUCTURE_TYPE_INSTANCE_CREATE_INFO,
        pNext: ptr::null(),
        flags: 0,
        pApplicationInfo: ptr::null(),
        enabledLayerCount: 0,
        ppEnabledLayerNames: ptr::null(),
        //These two should use the extensions returned by window.get_required_instance_extensions
        enabledExtensionCount: 0,
        ppEnabledExtensionNames: ptr::null()
    };

    let res: VkResult = entry_points.CreateInstance(&info as *const InstanceCreateInfo,
                                                    ptr::null(),
                                                    &mut instance as *mut VkInstance);

    assert_eq!(res, vk::SUCCESS);

    instance
}

unsafe fn destroy_instance(instance: VkInstance, instance_ptrs: &mut InstancePointers) {
    instance_ptrs.DestroyInstance(instance, ptr::null());
}
```

```bash
$ cargo run --bin main --features=vulkan
Compiling vulkanrust v0.1.0 (file:///home/florian/Documents/vulkanrust)
error[E0599]: no method named `vulkan_supported` found for type `glfw::Glfw` in the current scope
  --> src/main.rs:47:18
   |
47 |     assert!(glfw.vulkan_supported());
   |                  ^^^^^^^^^^^^^^^^

error[E0599]: no method named `get_required_instance_extensions` found for type `glfw::Glfw` in the current scope
  --> src/main.rs:49:36
   |
49 |     let required_extensions = glfw.get_required_instance_extensions().unwrap_or(vec![]);
   |                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error[E0599]: no method named `get_instance_proc_address` found for type `glfw::Window` in the current scope
  --> src/main.rs:59:16
   |
59 |         window.get_instance_proc_address(0, func.to_str().unwrap()) as *const c_void
   |                ^^^^^^^^^^^^^^^^^^^^^^^^^

error[E0599]: no method named `get_instance_proc_address` found for type `glfw::Window` in the current scope
  --> src/main.rs:65:16
   |
65 |         window.get_instance_proc_address(instance, func.to_str().unwrap()) as *const c_void
   |                ^^^^^^^^^^^^^^^^^^^^^^^^^

error: aborting due to 4 previous errors

For more information about this error, try `rustc --explain E0599`.
error: Could not compile `vulkanrust`.

To learn more, run the command again with --verbose.
```