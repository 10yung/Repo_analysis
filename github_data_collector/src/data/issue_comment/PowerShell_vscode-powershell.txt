Issue Type: <b>Bug</b>

Start.ps1
```powershell
. .\File2.ps1
```
File2.ps1
```powershell
1
2
3
```
.vscode\launch.json
```json
{
    // Use IntelliSense to learn about possible attributes.
    // Hover to view descriptions of existing attributes.
    // For more information, visit: https://go.microsoft.com/fwlink/?linkid=830387
    "version": "0.2.0",
    "configurations": [
        {
            "name": "PowerShell Launch Current File",
            "type": "PowerShell",
            "request": "launch",
            "script": "${file}",
            "cwd": "${file}"
        },
        {
            "name": "PowerShell: Interactive Session",
            "type": "PowerShell",
            "request": "launch",
            "cwd": ""
        }
    ]
}
```

1. Start "PowerShell: Interactive Session" debug.
2. Set breakpoint anywhere on File2.ps1.
3. Go to Start.ps1 and F8 on the line (debug will start and take you to the breakpoint on File2.ps1).
4. F8 on any line (it will not work).
5. F5 to finish debugging (All previous F8s will execute at once after the script finished).

![F8](https://user-images.githubusercontent.com/6960531/72567986-b84a2f80-38bf-11ea-9ce7-bf832906a780.gif)

Logs:
[EditorServices.log](https://github.com/PowerShell/vscode-powershell/files/4074102/EditorServices.log)
F8 presses are the `2020-01-17 00:39:29.212 +02:00 [DBG] Finding descriptor for evaluate` log lines. The lines after that are the F5

Extension version: 2020.1.0
VS Code version: Code 1.41.1 (26076a4de974ead31f97692a0d32f90d735645c0, 2019-12-18T14:58:56.166Z)
OS version: Windows_NT x64 10.0.18363

<details>
<summary>System Info</summary>

|Item|Value|
|---|---|
|CPUs|AMD Ryzen 7 1800X Eight-Core Processor          (4 x 3593)|
|GPU Status|2d_canvas: enabled<br>flash_3d: enabled<br>flash_stage3d: enabled<br>flash_stage3d_baseline: enabled<br>gpu_compositing: enabled<br>metal: disabled_off<br>multiple_raster_threads: enabled_on<br>oop_rasterization: disabled_off<br>protected_video_decode: unavailable_off<br>rasterization: unavailable_off<br>skia_renderer: disabled_off<br>surface_control: disabled_off<br>surface_synchronization: enabled_on<br>video_decode: enabled<br>viz_display_compositor: enabled_on<br>viz_hit_test_surface_layer: disabled_off<br>webgl: enabled<br>webgl2: enabled|
|Load (avg)|undefined|
|Memory (System)|4.00GB (1.36GB free)|
|Process Argv||
|Screen Reader|no|
|VM|100%|
</details>
<!-- generated by issue reporter -->
Using 2020.1.0 but I have seen it before the recent update. Going back to previous release, I found that 2019.9.0 was the last version where it still worked therefore it something in between 2019.9.0 and 2019.11.0 ,which is likely going to be the omnisharp refactoring @TylerLeonhardt 


System Details Output
```
### VSCode version: 1.42.0-insider 33c79d5ad447956814a2a3658029dffb9e28bae6 x64

### VSCode extensions:
DavidAnson.vscode-markdownlint@0.33.0
eamodio.gitlens@10.2.0
mauve.terraform@1.4.0
ms-azure-devops.azure-pipelines@1.157.4
ms-azuretools.vscode-azureappservice@0.16.2
ms-azuretools.vscode-azurefunctions@0.20.1
ms-azuretools.vscode-azurestorage@0.7.2
ms-azuretools.vscode-azureterraform@0.3.0
ms-azuretools.vscode-docker@0.9.0
ms-python.python@2020.1.58038
ms-vscode-remote.remote-containers@0.97.0
ms-vscode-remote.remote-wsl@0.42.1
ms-vscode.azure-account@0.8.8
ms-vscode.csharp@1.21.9
ms-vscode.powershell@2020.1.0
ms-vscode.powershell-preview@2020.1.0
ms-vsonline.vsonline@1.0.1424
msazurermtools.azurerm-vscode-tools@0.8.3
samcogan.arm-snippets@1.4.19


### PSES version:

### PowerShell version:

Name                           Value
----                           -----
PSVersion                      7.0.0-rc.1
PSEdition                      Core
GitCommitId                    7.0.0-rc.1
OS                             Microsoft Windows 10.0.18362
Platform                       Win32NT
PSCompatibleVersions           {1.0, 2.0, 3.0, 4.0â€¦}
PSRemotingProtocolVersion      2.3
SerializationVersion           1.1.0.1
WSManStackVersion              3.0
```

### Issue Description

Open a PowerShell file to start the extension.
When selecting the 'Select PSScriptAnalyzer rules' nothing happens

#### Expected Behaviour

A dropdown menu of PSSA rules should come up.

#### Actual Behaviour

Nothing happens

### Issue Description
PSIC crashe

### Steps to reproduce
1. Create a file with the following content:

**File.ps1**
```powershell
(Get-Credential -UserName 'Test' -Message 'Password please')
```
2. Press `F5` and the `PSIC` will ask you for the password.
3. Copy a random string in the terminal and watch the `PSIC` crash

```
Version: 1.42.0-insider (system setup)
Commit: 33c79d5ad447956814a2a3658029dffb9e28bae6
Date: 2020-01-15T09:36:35.018Z
Electron: 7.1.7
Chrome: 78.0.3904.130
Node.js: 12.8.1
V8: 7.8.279.23-electron.0
OS: Windows_NT x64 10.0.14393
```

PowerShell Preview version `2020.10`
OS Version: Win 10 -1903 (Windows_NT x64 10.0.18362)
PS Version : 5.1
VSCode version: 1.41.1 (user setup)
Powershell (ms-vscode.powershell) extension Version: 2019.12.0

### Steps to reproduce the issue:
* open a new tab
* select the language as PowerShell
* Create a variable and assign a string: `$Test = "test"`
* create cmdlet from snippeds
``` 
function Verb-Noun {
    [CmdletBinding()]
    param (
        
    )
    
    begin {
        
    }
    
    process {
        
    }
    
    end {
        
    }
}
```
* Intellisense should show the warning the the variable is never used
* comment out the cmdlet
```
# function Verb-Noun {
#     [CmdletBinding()]
#     param (
        
#     )
    
#     begin {
        
#     }
    
#     process {
        
#     }
    
#     end {
        
#     }
# }
```
* Now, intellisense shows 11 duplicate warning

 
Background:
I'm trying to move from PowerShell ISE to VS Code (and convince 15 coworkers to do the same). The PowerShell Integrated Console (PSIC) tab gives me the ability to have a script in the editor and hit F5 to make it run in the terminal. A normal "powershell" terminal tab will not react to the editor (seems totally disconnected). Same time, if you try to Split the PSIC window, the split screen is also just a normal "powershell" window. So once the one PSIC tab is running, you have to wait until it's done to launch another script from the terminal (an issue if you have a couple scripts to run, each going an hour at a time). The only work-around is to open a new VS Code instance, load up the script there, and run it. This is in contrast to ISE where you can open a new console tab, open the editor for it, and run your script (so 1 ISE window vs multiple VS Code instances).

Request:
So, the feature I'm hoping to see is the ability to have multiple PowerShell Integrated Console tabs in Terminal in order to be able to run multiple scripts from the editor. 

PS:
I'm sorry if this isn't the right label or location. New to seeking help, this is my fourth location for this issue ðŸ˜„.  To be honest, I'm not sure if this is something that should work but doesn't, doesn't exist yet (or can't exist ever), or if I'm just missing it.
Issue Description
=====
PS session fails to start with these errors. I have taken the cert from Start-EditorServices.ps1 and imported into my local machine's Trusted Publisher's store. I confirmed it's there with an expiration date of 5/2/2020. I have also executed this command but nothing happens.

Import-Module $HOME\.vscode\extensions\ms-vscode.powershell*\modules\PowerShellEditorServices\PowerShellEditorServices.psd1

1/14/2020 2:47:41 PM [NORMAL] - Language server startup failed.
1/14/2020 2:47:41 PM [ERROR] - The language service could not be started: 
1/14/2020 2:47:41 PM [ERROR] - Timed out waiting for session file to appear.

Attached Logs
=====

Follow the instructions in the [README](https://github.com/PowerShell/vscode-powershell%23reporting-problems) about
capturing and sending logs.

Environment Information
=====

Visual Studio Code
-----

| Name | Version |
| --- | --- |
| Operating System | Windows_NT x64 10.0.16299 |
| VSCode | 1.41.1|
| PowerShell Extension Version | 2019.12.0 |

PowerShell Information
-----

|Name|Value|
|---|---|
|PSVersion|5.1.16299.1146|
|PSEdition|Desktop|
|PSCompatibleVersions|1.0 2.0 3.0 4.0 5.0 5.1.16299.1146|
|BuildVersion|10.0.16299.1146|
|CLRVersion|4.0.30319.42000|
|WSManStackVersion|3.0|
|PSRemotingProtocolVersion|2.3|
|SerializationVersion|1.1.0.1|



Visual Studio Code Extensions
-----

<details><summary>Visual Studio Code Extensions(Click to Expand)</summary>


|Extension|Author|Version|
|---|---|---|
|All-Autocomplete|Atishay-Jain|0.0.23|
|bracket-pair-colorizer-2|CoenraadS|0.0.29|
|powershell|ms-vscode|2019.12.0|
|python|ms-python|2020.1.58038|
|todo-tree|Gruntfuggly|0.0.162|
I love the fact that after having run a script via the debugger, the variables and objects are still available in the console. 
**But** launching the debugger again, does not reset the session as well, what can cause unintended side effects, due to stuff created in the session like background jobs, variables, other runspaces and so on. 

This is such an big obvious problem for me that I do wonder why nobody seems to bother, which in turn makes me think: do I simply use it wrong? :)
But I am not aware of any way to remove, clear and close **really everything** than can be created, opened or assigned in a PoSh-Session, to avoid any potential problems, other than: killing the terminal manually and lauching a new session.

So I would like the option that every time the debugger is launched it either **resets** the session or **creates** a new one (an killing the old).
Issue Description
=====

I am experiencing a problem with... uploading bug report from VSCode. If you choose to upload report you get something like this:

![image](https://user-images.githubusercontent.com/15063294/72183752-0e663100-33ef-11ea-9e8a-1408aa1fa942.png)

1. When you pick open it opens up properly
2. If you choose copy, not so much 

![image](https://user-images.githubusercontent.com/15063294/72183785-2473f180-33ef-11ea-881c-4a1664907a63.png)

Attached Logs
=====

Follow the instructions in the [README](https://github.com/PowerShell/vscode-powershell%23reporting-problems) about
capturing and sending logs.

Environment Information
=====

Visual Studio Code
-----

| Name | Version |
| --- | --- |
| Operating System | Windows_NT x64 10.0.18363 |
| VSCode | 1.41.1|
| PowerShell Extension Version | 2019.12.0 |

PowerShell Information
-----

|Name|Value|
|---|---|
|PSVersion|5.1.18362.145|
|PSEdition|Desktop|
|PSCompatibleVersions|1.0 2.0 3.0 4.0 5.0 5.1.18362.145|
|BuildVersion|10.0.18362.145|
|CLRVersion|4.0.30319.42000|
|WSManStackVersion|3.0|
|PSRemotingProtocolVersion|2.3|
|SerializationVersion|1.1.0.1|



Visual Studio Code Extensions
-----

<details><summary>Visual Studio Code Extensions(Click to Expand)</summary>


|Extension|Author|Version|
|---|---|---|
|auto-rename-tag|formulahendry|0.1.1|
|azure-dark-theme|eddyw|0.2.0|
|beautify|HookyQR|1.5.0|
|bracket-pair-colorizer-2|CoenraadS|0.0.29|
|code-settings-sync|Shan|3.4.3|
|codesnap|adpyke|1.0.26|
|dark-plus-material|vangware|2.2.2|
|excel-to-markdown-table|csholmq|1.1.0|
|gistfs|vsls-contrib|0.0.43|
|github-linker|gimenete|0.2.3|
|gitlens|eamodio|10.2.0|
|html-preview-vscode|george-alisson|0.2.5|
|markdown-all-in-one|yzhang|2.6.1|
|markdown-preview-enhanced|shd101wyy|0.5.1|
|markdown-shortcuts|mdickin|0.12.0|
|material-icon-theme|PKief|3.9.2|
|moonlight|atomiks|0.10.0|
|nebula-theme|ChirtleLovesDolls|1.3.2|
|pdf|tomoki1207|0.5.1|
|powershell-preview|ms-vscode|2019.12.0|
|project-manager|alefragnani|10.9.1|
|reg|ionutvmi|1.0.1|
|synthwave-x-fluoromachine|webrender|0.0.9|
|theme-monokai-pro-vscode|monokai|1.1.14|
|vscode-html-css|ecmel|0.2.3|
|vscode-markdownlint|DavidAnson|0.33.0|
|vscode-power-mode|hoovercj|2.2.0|
|vscode-pull-request-github|GitHub|0.14.0|
|vscode-wakatime|WakaTime|2.2.1|
|vscode-yaml|redhat|0.6.1|
|xml|DotJoshJohnson|2.5.0|
<!--

BEFORE SUBMITTING A NEW ISSUE, PLEASE READ THE TROUBLESHOOTING DOCS!
https://github.com/PowerShell/vscode-powershell/tree/master/docs/troubleshooting.md

IMPORTANT: you can generate a bug report directly from the
PowerShell extension in Visual Studio Code by selecting
"PowerShell: Upload Bug Report to GitHub" from the command palette.

NOTE: If you have both stable (aka "PowerShell") and preview (aka "PowerShell Preview") installed,
you MUST DISABLE one of them for the best performance.
Docs on how to disable an extension can be found here:
https://code.visualstudio.com/docs/editor/extension-gallery#_disable-an-extension

The more repro details you can provide, along with a zip
of the log files from your session, the better the chances
are for a quick resolution.

You may also want to record a GIF of the bug occurring and
attach it here by dropping the file into the description body.

-->

### System Details

<!--
To help diagnose your issue, the following details are helpful:
- Operating system name and version
- VS Code version
- PowerShell extension version
- Output from `$PSVersionTable`

To get this information, run the following expression in your Integrated Console and paste the output here inside the backticks below:

& {"### VSCode version: $(code -v)"; "`n### VSCode extensions:`n$(code --list-extensions --show-versions | Out-String)"; "`n### PSES version: $($pseditor.EditorServicesVersion)"; "`n### PowerShell version:`n$($PSVersionTable | Out-String)"}


If you are running VSCode Insiders, use this expression instead (and paste the result inside the backticks):

& {"### VSCode version: $(code-insiders -v)"; "`n### VSCode extensions:`n$(code-insiders --list-extensions --show-versions | Out-String)"; "`n### PSES version: $($pseditor.EditorServicesVersion)"; "`n### PowerShell version:`n$($PSVersionTable | Out-String)"}

-->

<!-- PowerShell output from above goes here -->
System Details Output
```
### VSCode version: 1.41.1 26076a4de974ead31f97692a0d32f90d735645c0 x64

### VSCode extensions:
ms-vscode.powershell-preview@2019.12.0


### PSES version: 2.0.0.0

### PowerShell version:

Name                           Value
----                           -----
PSVersion                      5.1.17763.771
PSEdition                      Desktop
PSCompatibleVersions           {1.0, 2.0, 3.0, 4.0...}
BuildVersion                   10.0.17763.771
CLRVersion                     4.0.30319.42000
WSManStackVersion              3.0
PSRemotingProtocolVersion      2.3
SerializationVersion           1.1.0.1
```

### Issue Description

Trying to get the directory of the current script using `Split-Path -Path $PSScriptRoot -Parent`.

#### Expected Behaviour
![image](https://user-images.githubusercontent.com/26305145/72173874-65104280-33d0-11ea-981b-ee4c7508c659.png)
Running the same script in ISE gives the expected result.

#### Actual Behaviour
![image](https://user-images.githubusercontent.com/26305145/72174111-de0f9a00-33d0-11ea-947e-942c52ea0170.png)

As you can see, in VSCode, the result is not the parent. It's returned the whole file.

I have tried other variations such as 
```
$RootPathÂ =Â Split-PathÂ (Split-PathÂ $PSScriptRootÂ -Parent)Â -Parent
$RootPath

# or

(Get-ChildItem -Path $PSScriptRoot).Parent
```
It always returns the full path.

### Attached Logs

Follow the instructions in the [troubleshooting docs](https://github.com/PowerShell/vscode-powershell/blob/master/docs/troubleshooting.md#logs)
about capturing and sending logs.

<!--

BEFORE SUBMITTING A NEW ISSUE, PLEASE READ THE TROUBLESHOOTING DOCS!
https://github.com/PowerShell/vscode-powershell/tree/master/docs/troubleshooting.md

IMPORTANT: you can generate a bug report directly from the
PowerShell extension in Visual Studio Code by selecting
"PowerShell: Upload Bug Report to GitHub" from the command palette.

NOTE: If you have both stable (aka "PowerShell") and preview (aka "PowerShell Preview") installed,
you MUST DISABLE one of them for the best performance.
Docs on how to disable an extension can be found here:
https://code.visualstudio.com/docs/editor/extension-gallery#_disable-an-extension

The more repro details you can provide, along with a zip
of the log files from your session, the better the chances
are for a quick resolution.

You may also want to record a GIF of the bug occurring and
attach it here by dropping the file into the description body.

-->

### System Details

<!--
To help diagnose your issue, the following details are helpful:
- Operating system name and version
- VS Code version
- PowerShell extension version
- Output from `$PSVersionTable`

To get this information, run the following expression in your Integrated Console and paste the output here inside the backticks below:

& {"### VSCode version: $(code -v)"; "`n### VSCode extensions:`n$(code --list-extensions --show-versions | Out-String)"; "`n### PSES version: $($pseditor.EditorServicesVersion)"; "`n### PowerShell version:`n$($PSVersionTable | Out-String)"}


If you are running VSCode Insiders, use this expression instead (and paste the result inside the backticks):

& {"### VSCode version: $(code-insiders -v)"; "`n### VSCode extensions:`n$(code-insiders --list-extensions --show-versions | Out-String)"; "`n### PSES version: $($pseditor.EditorServicesVersion)"; "`n### PowerShell version:`n$($PSVersionTable | Out-String)"}

-->

<!-- PowerShell output from above goes here -->
System Details Output
```
### VSCode version: 1.41.1 26076a4de974ead31f97692a0d32f90d735645c0 x64

### VSCode extensions:
ms-vscode.powershell-preview@2019.12.0


### PSES version: 2.0.0.0

### PowerShell version:

Name                           Value
----                           -----
PSVersion                      5.1.17763.771
PSEdition                      Desktop
PSCompatibleVersions           {1.0, 2.0, 3.0, 4.0...}
BuildVersion                   10.0.17763.771
CLRVersion                     4.0.30319.42000
WSManStackVersion              3.0
PSRemotingProtocolVersion      2.3
SerializationVersion           1.1.0.1
```

### Issue Description

1. Launch VSCode
2. Close any open files.
3. Close VSCode.
4. Lauch VSCode.
The console looks like:
![image](https://user-images.githubusercontent.com/26305145/72171789-95091700-33cb-11ea-8619-edf51c0ef780.png)

5. Open a very basic `.ps1` file from a saved workspace.
![image](https://user-images.githubusercontent.com/26305145/72171963-e74a3800-33cb-11ea-9de9-2cbed62387bb.png)
The console changes to "PowerShell integrated console"
![image](https://user-images.githubusercontent.com/26305145/72172067-28dae300-33cc-11ea-9e67-c2f7d0c8790e.png)
However, the console (terminal or whatever you're calling it these days) is blank.
(Please note, PowerShell _Preview_ extension _is_ installed. I have reported the notification bug in #2406 )

If I scroll up, I can see your ASCII art:
![image](https://user-images.githubusercontent.com/26305145/72172262-a30b6780-33cc-11ea-9fa2-6aa35eab1fb0.png)
There is no prompt. (`C:\>`). I have to press enter to get a prompt.

6. Set focus to the script window.
7. Press `f5` to run the script.
![image](https://user-images.githubusercontent.com/26305145/72172625-87ed2780-33cd-11ea-929a-f95eec43b157.png)
As you can see, indentation and output are all over the place. Lines merged and strange indentation.
Even when the output isn't so mangled, the output still starts after the prompt (`C:\ >`) as opposed to ISEs behaviour where it is on its own line:
![image](https://user-images.githubusercontent.com/26305145/72174905-b8839000-33d2-11ea-9d71-6bdc93e580ca.png)

#### Expected Behaviour

What I want to see is an output like ISE.
![image](https://user-images.githubusercontent.com/26305145/72172806-01851580-33ce-11ea-98fd-052765115e95.png)
The output is on a new line, at the start of the line with no indentation and the prompt is clean, on a new line waiting for the next command.

#### Actual Behaviour

See "Issue description".
This behaviour isn't something new. It's been happening for ~12 months or more. In both the current and preview version of the PowerShell extension. It's finally annoyed me enough to write this.

I've also noticed other spurious behaviour. For instance, I can start typing in the console and it starts at some random position in the previous output, not after the `C:\ >` (greater-than symbol) as one would expect.

This behaviour happens on multiple PCs and laptops. The examples above have been taken from a laptop freshly installed today, with Windows 10 Enterprise 1909.

### Attached Logs

Follow the instructions in the [troubleshooting docs](https://github.com/PowerShell/vscode-powershell/blob/master/docs/troubleshooting.md#logs)
about capturing and sending logs.
