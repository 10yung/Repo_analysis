Running the following minimal working example:

```go
package main

import (
	"gopkg.in/russross/blackfriday.v2"
)

func main() {
	blackfriday.Run([]byte(`
whatever
: foo

[panics]: [test]
[test]: done`))
}
```

results in a panic:

```
panic: runtime error: index out of range [36] with length 36

goroutine 1 [running]:
gopkg.in/russross/blackfriday%2ev2.(*Markdown).listItem(0xc000108900, 0xc0000b603a, 0x24, 0x24, 0xc0000ffce8, 0x9)
        /home/sam/go/pkg/mod/gopkg.in/russross/blackfriday.v2@v2.0.0/block.go:1327 +0xb0a
gopkg.in/russross/blackfriday%2ev2.(*Markdown).list(0xc000108900, 0xc0000b6031, 0x2d, 0x2d, 0x2, 0x0)
        /home/sam/go/pkg/mod/gopkg.in/russross/blackfriday.v2@v2.0.0/block.go:1134 +0x101
gopkg.in/russross/blackfriday%2ev2.(*Markdown).paragraph(0xc000108900, 0xc0000b6031, 0x2d, 0x2d, 0x0)
        /home/sam/go/pkg/mod/gopkg.in/russross/blackfriday.v2@v2.0.0/block.go:1506 +0x4e5
gopkg.in/russross/blackfriday%2ev2.(*Markdown).block(0xc000108900, 0xc0000b6030, 0x2e, 0x2e)
        /home/sam/go/pkg/mod/gopkg.in/russross/blackfriday.v2@v2.0.0/block.go:194 +0x358
gopkg.in/russross/blackfriday%2ev2.(*Markdown).Parse(0xc000108900, 0xc0000b6030, 0x2e, 0x2e, 0x0)
        /home/sam/go/pkg/mod/gopkg.in/russross/blackfriday.v2@v2.0.0/markdown.go:404 +0x4d
gopkg.in/russross/blackfriday%2ev2.Run(0xc0000b6030, 0x2e, 0x2e, 0x0, 0x0, 0x0, 0x0, 0x4df700, 0xc000088058)
        /home/sam/go/pkg/mod/gopkg.in/russross/blackfriday.v2@v2.0.0/markdown.go:388 +0x1b9
main.main()
        /home/sam/testmarkdown/main.go:8 +0x7e
exit status 2
```

Adding some sort of separator between the definition list and the references fixes things:

```go
package main

import (
	"gopkg.in/russross/blackfriday.v2"
)

func main() {
	blackfriday.Run([]byte(`
whatever
: foo

fixed

[panics]: [test]
[test]: done`))
}
```

This looks vaguely similar to #420, #418, #417, #416, and #415, but I couldn't be sure and they didn't appear to have any comments so I wanted to add a bit more spam to the queue :)
Implement a furigana extension based on the syntax used in https://github.com/djfun/furigana_markdown. See https://discourse.gohugo.io/t/using-furigana-ruby-with-markdown/15156/4 to understand what this is for.

I made this some months ago and now I realized Hugo switched to goldmark, oh well...
**current and wrong:**
`<li>[ ] 练习vim的常用操作</li>`

**right:**
`<li class="task-list-item"><input id="" disabled="" class="task-list-item-checkbox" type="checkbox"> 练习vim的常用操作</li>`

**result show:**

current and wrong:
![深度截图_选择区域_20191127222425](https://user-images.githubusercontent.com/10773495/69732329-66f6ad00-1166-11ea-8153-a0a5209aa251.png)

right:
![深度截图_选择区域_20191127222416](https://user-images.githubusercontent.com/10773495/69732008-d7e99500-1165-11ea-8bdb-7449c6e63455.png)



- Originally found as a bug in kubernetes/website#16640
- Originally found as a bug in Hugo gohugoio/hugo#6438

Tested v1 and v2. Both affected.

## Short Description

Whitespace(s) or Tab before parentheses (`()`) opening is ignored if it comes after brackets (`[]`).

## Long Description

In the text blocks that "like" a link, are treated as a link, even if they are a links of a different kind.

----

**Reproducible Example**
```golang
package main

import (
	"fmt"

	"gopkg.in/russross/blackfriday.v2"
)

var input = `
* [example_org link]
* [example_net link](https://example.net)
* [example_com link] (hey, there is space before parenthese, ignoge me please)


[example_org link]: https://example.org
[example_com link]: https://example.com
`

func main() {
	output := string(blackfriday.Run([]byte(input)))
	fmt.Println(output)
}
```


**Expected Output**
```html
<ul>
<li><a href="https://example.org">example_org link</a></li>
<li><a href="https://example.net">example_net link</a></li>
<li><a href="https://example.com">example_com link</a> (hey, there is space before parenthese, ignoge me please)</li>
</ul>
```

**Actual Output**

```html
<ul>
<li><a href="https://example.org">example_org link</a></li>
<li><a href="https://example.net">example_net link</a></li>
<li><a href="hey, there is space before parenthese, ignoge me please">example_com link</a></li>
</ul>
```

I did upgrade from v1 to v2 recently and I am noticing that my lists do not render properly. Upon investigating I see that I am having "\r\n" in my database as line endings. With v1 this does render fine, but v2 does not parse the lists. Is that an oversight or are only unix line endings support in v2?
The source markdown code is:
```
- This is a demo list item
  
  ```shell
  $ service ssh status
  $ service ssh start
  (There should be three '`', however it leads parse error of the github's markdown parser)
```

And it would be parsed to:

```html
<ul>
  <li>
    <p>This is a demo list item</p>
    <div class="highlight">
      <pre class="chroma">
        <code class="language-shell" data-lang="shell">
          $ service ssh status
          $ service ssh start
        </code>
      </pre>
    </div>
  </li>
</ul>
```

This problem also happen when using ordered list.

However, if I add some text between list item and code block, like this:

```
- This is a demo list item

  test
  
  ```shell
  $ service ssh status
  $ service ssh start
  (There should be three '`', however it leads parse error of the github's markdown parser)
  ```

And the parsed result is: 

```html
<ul><li>This is a demo list item</li></ul>
<p>test</p>
<div class="highlight"><pre class="chroma"><code class="language-shell" data-lang="shell"> 
$ service ssh status
$ service ssh start</code></pre></div>
```

Anyone know how to fix it?
"Widont" is a common practice in blogging/CMS world that prevents a situation where a line break happened and there's only one world at the end.

- https://www.npmjs.com/package/widont
- https://www.drupal.org/project/widont
- https://shauninman.com/plete/2006/08/widont-wordpress-plugin

For example, a title or paragraph with a line break like this doesn't look good:

```text
Welcome to my really cool
blog!
```

What widont extensions do is to replace the last space with `&nbsp;` (non-breaking space character) so that the last two words will share the same fate:

```text
Welcome to my really
cool blog!
```

Blackfriday sounds about the right place to implement a functionality like this. Thoughts?

imports
        gopkg.in/russross/blackfriday.v2: cannot find module providing package gopkg.in/russross/blackfriday.v2

go version go1.13.1 windows/amd64
Add test for other protocols that are in browsers, in particular ftp, though https could also be added.
Closes #459