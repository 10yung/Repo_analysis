It's currently not possible to make custom scalars typesafe since the generated type for fields with a custom scalar type is `any`, an example of this can be seen [here](https://github.com/prisma-labs/nexus/blob/develop/examples/kitchen-sink/src/kitchen-sink-typegen.ts#L74). I'm not sure if this is simply a bug, or if the feature hasn't been implemented yet.
Since prisma2 does not yet support JSON/B columns, I'm storing my JSON data in Posgres as a string.

This is fine, but Id like to return JSON to my consumers.

How can I change the return type of a string field to an object in my graphql schema?

The example below returns this error: `"message": "String cannot represent value: {}",`

I think I need to tell GraphQL that the field `metadata` actually returns an object now.

```js
t.field("metadata", {
  type: "String",
  resolve(root, args, ctx) {
  const str = root["metadata"];
    if (!str) {
      return {};
    }
    return JSON.parse(str);
  }
});
```

Im relatively new to GraphQL and prisma, so any help is appreciated! Thanks
The field authorize plugin is executing authorization on publish rather than on subscribe like on beta versions.

## Expected behavior
Authorization should fail on subscribe

## Actual behavior
Subscription fires and only fails if a publish happens

Reproduction example [here](https://github.com/AndresRodH/nexus-authorization-bug-repro)

Given the following Nexus object definitions I am able to execute the `createMessage` mutation without issue.

_types.ts_
```js
export const Mutation = mutationType({
  definition(t) {
    t.field("createMessage", {
      type: Message,
      args: {
        text: stringArg()
      },
      resolve: (r, args, context, i) => {
        return {
          id: "messageId",
          text: args.text,
          author: {
            id: "authorId",
            name: "mark"
          }
        }
      }
    })
  }
})

export const Message = objectType({
  name: "Message",
  definition(t) {
    t.field("id", { type: "String" })
    t.field("text", { type: "String" })
    t.field("author", { type: Author, nullable: true })
  }
})

export const Author = objectType({
  name: "Author",
  definition(t) {
    t.string("id")
    t.string("name")
  }
})
```

![Screen Shot 2020-01-06 at 12 54 53 PM](https://user-images.githubusercontent.com/14949170/71844621-c4461e00-3083-11ea-9e23-33f71f755942.png)

However, if I add a Prisma model backing the `Message` type the `createMessage` resolver expects to return an object containing all of the Prisma fields, even if that field has not been exposed by the Nexus object.

_schema.prisma_
```prisma
model Message {
  id          String  @default(cuid()) @id
  messageType String?
  text        String

  author Author
}
```

![Screen Shot 2020-01-06 at 12 52 39 PM](https://user-images.githubusercontent.com/14949170/71844476-76c9b100-3083-11ea-98d6-b7e1b8c4520e.png)

Should the resolver return type match the Nexus object definition instead of the Prisma model definition?
 

I don't understand why it isn't possible to let object types take a second type parameter that specifies the backing type, i.e. `objectType<"Foo", Foo>`. Additionally, why can't makeSchema become `makeSchema<Context>`?

I feel as though nexus is reimplementing quite a lot of type-level logic to support the sources approach when a generic might suffice.

This is, in any case, the approach of this module: https://github.com/sikanhe/gqtx
I'm running into the same error as #100 however since that's closed I'm opening a new issue for visibility. I'm throwing a type error using the SDL converter. I input:

```graphql
type CreateDurationUnit {
  DurationUnit: DurationUnit
}

input CreateDurationUnitInput {
  durationUnit: String
  sortorder: Int
}

type DurationUnit {
  id: ID!
  durationUnit: String
  sortorder: Int
}

type Mutation {
  CreateDurationUnit(input: CreateDurationUnitInput!): CreateDurationUnit
}
```

And get back:

```typescript
import { objectType, arg, inputObjectType, scalarType } from 'nexus';

const CreateDurationUnit = objectType({
  name: "CreateDurationUnit",
  definition(t) {
    t.field("DurationUnit", {
      type: DurationUnit,
      nullable: true,
    })
  }
})
const DurationUnit = objectType({
  name: "DurationUnit",
  definition(t) {
    t.id("id")
    t.string("durationUnit", { nullable: true })
    t.int("sortorder", { nullable: true })
  }
})
const Mutation = objectType({
  name: "Mutation",
  definition(t) {
    t.field("CreateDurationUnit", {
      type: CreateDurationUnit,
      nullable: true,
      args: {
        input: arg({
          type: CreateDurationUnitInput,
          required: true
        }),
      },
    })
  }
})

const CreateDurationUnitInput = inputObjectType({
  name: "CreateDurationUnitInput",
  definition(t) {
    t.string("durationUnit")
    t.int("sortorder")
  }
});
```

Which has the error of:
![Screen Shot 2019-12-12 at 14 13 53](https://user-images.githubusercontent.com/11750061/70745571-a5a17100-1ce9-11ea-8c20-1f2eebc4f00c.png)

`package.json`:
```json
{
  "name": "script",
  "license": "MIT",
  "scripts": {
    "build": "yarn run clean && yarn run generate && tsc",
    "clean": "rm -rf dist",
    "dev:graphql": "ts-node-dev --no-notify --respawn --transpileOnly src/server",
    "dev:prisma": "prisma2 dev",
    "generate": "yarn run generate:prisma && yarn run generate:nexus",
    "generate:nexus": "ts-node --transpile-only src/schema",
    "generate:prisma": "prisma2 generate",
    "postinstall": "yarn run generate",
    "seed": "ts-node prisma/seed",
    "start": "node dist/server"
  },
  "dependencies": {
    "@prisma/photon": "2.0.0-preview018.2",
    "graphql": "^14.5.8",
    "graphql-yoga": "^1.18.3",
    "nexus": "^0.12.0-rc.5",
    "nexus-prisma": "^0.6.1"
  },
  "devDependencies": {
    "@prisma/sdk": "^0.0.99",
    "@types/node": "^12.12.17",
    "prettier": "^1.19.1",
    "prisma2": "2.0.0-preview018.2",
    "ts-node": "8.5.4",
    "ts-node-dev": "^1.0.0-pre.44",
    "typescript": "3.7.3"
  }
}
```

`tsconfig.json`:
```json
{
  "compilerOptions": {
    "sourceMap": true,
    "outDir": "dist",
    "strict": true,
    "lib": ["esnext"],
    "esModuleInterop": true
  },
  "include": ["src/**/*"]
}
```

I've tried running my `postinstall` script to generate new types but that doesn't fix it.
Currently my Apollo server runs with the schema-first approach. 
I want to migrate to the Nexus step by step, so that both have to run in parallel for a while. 
This is a follow up to #342, which doesn't seem to be resolved.

After removing --transpilyOnly from my startup script I started getting these errors.
–– using `t.dateTime('birthDate');`
```
return new TSError(diagnosticText, diagnosticCodes)
           ^
TSError: ⨯ Unable to compile TypeScript:
src/schema/Worker/mutations/createWorker.ts:27:7 - error TS2339: Property 'dateTime' does not exist on type 'InputDefinitionBlock<"createWorkerInput">'.

27     t.dateTime('birthDate');
         ~~~~~~~~
```
–– using `t.field('birthDate', { type: DateTime });`
```
   return new TSError(diagnosticText, diagnosticCodes)
           ^
TSError: ⨯ Unable to compile TypeScript:
src/schema/Worker/mutations/createWorker.ts:27:28 - error TS2322: Type 'GraphQLScalarType' is not assignable to type 'string | NexusInputObjectTypeDef<string> | NexusEnumTypeDef<string> | NexusScalarTypeDef<string>'.
  Type 'GraphQLScalarType' is missing the following properties from type 'NexusScalarTypeDef<string>': config, value

27     t.field('birthDate', { type: DateTime });
                              ~~~~

  node_modules/nexus/dist/definitions/definitionBlocks.d.ts:115:5
    115     type: AllInputTypes | AllNexusInputTypeDefs<string>;
            ~~~~
    The expected type comes from property 'type' which is declared here on type 'NexusInputFieldConfig<"createWorkerInput", "birthDate">'
```
I've read other issues talking about how this is a chicken and the egg problem, but my types are generated.
```ts
declare global {
  interface NexusGenCustomInputMethods<TypeName extends string> {
    dateTime<FieldName extends string>(fieldName: FieldName, opts?: core.ScalarInputFieldConfig<core.GetGen3<"inputTypes", TypeName, FieldName>>): void // "DateTime";
  }
}
declare global {
  interface NexusGenCustomOutputMethods<TypeName extends string> {
    dateTime<FieldName extends string>(fieldName: FieldName, ...opts: core.ScalarOutSpread<TypeName, FieldName>): void // "DateTime";
  }
}

export type NexusGenScalarNames = "Boolean" | "DateTime" | "Float" | "ID" | "Int" | "String";
```

The only way to make it work is to pass a string to `type`
```ts
t.field('birthDate', { type: 'DateTime' });
```
Lately I've been iterating on better ways to test what I call "native" GraphQL implementations, with this I mean a GraphQL backend implementation that isn't just wrapping existing services but instead if built directly on top of GraphQL, and thus resolvers that contain up to certain level of logic.

I've been going back and forth between code first and schema first approaches, one of the main benefits that I've noticed lately with schema first approaches is that testing logic inside a resolver is insanely simple. This is because the resolvers are usually just a simple object of plain old functions. This makes them very testable in isolation. 

However going to a code first approach this actually becomes more tedious, especially in nexus's case, the resolve is part of a config that is warpped in several function calls (so that nexus can do its magic) but this makes testing a single resolver to be more tedious... I've found that I have to resort to the following work-around's to test them:

- I create the entire schema in my test suite and perform a query against the field I wish to test it's resolver for. This is quite tedious because I have to spin up a lot of boilerplate, just to test a single function.
- I define my resolver separately and attach it in the resolve config. This is the "better" solution, but it requires me to always find a good place and/or name to put them somewhere. I feel like this solution is the better one out of the two, but I would prefer to not repeat myself and just create the resolve inline with the type definition, it keeps everything co-located nicely and gives all the context at once, which is one of the benefits for code-first approaches imho.

This got me thinking, if it would be possible to create some sort of extra API in nexus allowing the access to a field definition without letting it pass through the internals of nexus. The resolve function still remains a simple inline function so I'm wondering how hard it could be to just expose it out in some form that doesn't require a `makeSchema` invocation.

I was thinking something along the lines of: 

```typescript
export const UserType = objectType({
  name: "User",
  definition(t) {
    t.id("id");
    t.list.field("posts", {
      type: "Post",
      resolve: (user, args, context, info) => {
        // getPosts...
      }
    });
  }
});

UserType.getFieldDefinition("posts").resolve // resolve being the function here, which I can directly invoke.
```

This would open up the nexus types to be a lot more testable without ceremony. 
Thoughts?
I can't understand the documentation about "sources" ([doc](https://nexus.js.org/docs/api-makeschema#shouldgenerateartifacts-outputs-typegenautoconfig)):

> // Automatically finds any interface/type/class named similarly to the and infers it
> // the "source" type of that resolver.

I think there is an issue in the sentence. And what does the `source` and `alias` fields?