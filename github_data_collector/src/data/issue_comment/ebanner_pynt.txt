Open a .py file and get message:
File mode specification error: (error ‘:server’ is incompatible with ‘:nowait’)
EIN works well.
M-x pynt-mode to restart pynt mode and got the same error.
Personal config: https://github.com/IsaacPhys/Homebrewemacs
System: OS Mojave
Python: 3.7
Already finished: pip install pynt, pip install jupyter, etc.
This was the message I got after I hit <kbd>C-c C-s</kbd>

```
ein: [warn] No recorded kernelspecs for nil
ein:notebooklist-new-notebook: Wrong type argument: ein:$notebooklist, nil
```

I am using spacemacs on Windows and also my <kbd>M-x</kbd> `ein:jupyter-server-start` works fine if I start it manually.
Start emacs and open a .py file. it immediately give me this error:
epc:start-server: Server may raise an error. Use "M-x epc:pop-to-last-server-process-buffer RET" to see full traceback:
Traceback (most recent call last):
  File "/usr/local/bin/pynt-serve", line 5, in <module>
    import codebook.syntax
  File "/usr/local/lib/python2.7/site-packages/codebook/__init__.py", line 29
    open(f"{os.environ['HOME']}/.pynt", 'a').close()
                                     ^
SyntaxError: invalid syntax
What's the best approach to merge `pynt` into the [ipython-notebook layer](https://github.com/syl20bnr/spacemacs/blob/master/layers/%2Blang/ipython-notebook/packages.el)?
pynt-serve fails for me with python 3.4, because it's using f-strings which were added in python 3.6
```python
> pynt-serve
Traceback (most recent call last):
  File "/home/taupan/nobackup/virtualenvs/myproject/bin/pynt-serve", line 5, in <module>
    import codebook.syntax
  File "/home/taupan/nobackup/virtualenvs/myproject/lib/python3.4/site-packages/codebook/__init__.py", line 29
    open(f"{os.environ['HOME']}/.pynt", 'a').close()
                                     ^
SyntaxError: invalid syntax
```
[Org mode](https://orgmode.org/) has lots to offer over Jupyer notebooks / JupyterLab / EIN. Off the top of my head:
- [good markup](http://karl-voit.at/2017/09/23/orgmode-as-markup-only/) ([markdown has issues](http://www.wilfred.me.uk/blog/2012/07/30/why-markdown-is-not-my-favourite-language/))
- support for passing data between code blocks in different languages
- remote execution configured *per-cell*
- tree editing / navigation facilities (e.g. [navi-mode](https://orgmode.org/worg/org-tutorials/org-outside-org.html#navi-mode), [Speed keys](https://orgmode.org/manual/Speed-keys.html),[ org-refile](https://blog.aaronbieber.com/2017/03/19/organizing-notes-with-refile.html)) to ease working with large documents

Code cells in Org mode can execute in Jupyter kernels (for various languages) via the [ob-ipython](https://github.com/gregsexton/ob-ipython) package. This gives the user:
- dynamic completion from the kernel
- doc lookup from the kernel 
- access to [remote kernels](https://vxlabs.com/2017/11/30/run-code-on-remote-ipython-kernels-with-emacs-and-orgmode/)

By virtue of using Org, "notebooks" written this way:

- are **trivially version controlled**
- can generate source via [tangling](https://orgmode.org/manual/Extracting-source-code.html) - no more copy/pasting from notebooks
- are exportable to an absurd degree. Exporters include [ipynb](https://github.com/jkitchin/ox-ipynb/blob/master/ox-ipynb.el), Markdown, [html with Bootstrap](https://github.com/marsmining/ox-twbs), LaTex/PDF,  [reveal.js](https://github.com/yjwen/org-reveal), and [Google slides](https://github.com/coldnew/org-ioslide). Many more (even docx) are available via tools like [ox-pandoc ](https://github.com/kawabata/ox-pandoc).

The scimax project has [very interesting additions](https://github.com/jkitchin/scimax/blob/master/scimax-ipython.org) ([video](https://www.youtube.com/watch?v=dMira3QsUdg) demo) to ob-ipython, including:

- emulating most Jupyter notebook's commands + their keybindings (see the scimax-jupyter-command-mode hydra in [here](https://github.com/jkitchin/scimax/blob/master/scimax-org-babel-ipython-upstream.el))
- multiple kernels in one Org file
- [live editable LaTeX previews](https://www.youtube.com/watch?v=E0s3PDBqsEc) 

Here are some ways Pynt could be more powerful with Org:
1. Org manages sessions (kernels) per-document, per-subtree, and per-cell, with the most specific taking precedence.  This means that any operations which spawn new kernels could just inject a new subtree into the current document. You could then capture the complete history with multiple code variants attached to different kernels, all within one document.
2. Features like branch unpacking could benefit from having powerful tree manipulation facilities, which are the heart of Org. I assume you're relying on the markdown headings to manage the tree structure in the ipynb. According to [this spec](https://spec.commonmark.org/0.28/), you're limited to a depth of 6. Org has no limit that I can find and, more importantly, it gives the user powerful tools to navigate the tree. These tools open the door to more sophisticated cell generation facilities. For example, imagine generating a cell for each intermediate definition within a function trace of depth 5. Maybe I'd like to do that for 10 different invocations and then poke around in the *tree* of ~50 generated cells. Being forced to work at the top-level of a notebook would make this unwieldy, if not impossible.
3. Future proof. The ideas in Pynt are not Jupyter-specific, and ipynb can be generated from Org files ;)

I don't know the Pynt code well enough to guess the level of effort for this. It likely mainly depends on how much experience the contributor has with automating Org. 

I thought the best first step would be to discuss the pros/cons here.  
...to just dumping the entire region into the notebook.
So that you don't print out the exception trace. Maybe print out a nice message.

This is for raising returns.
Just like we're doing for for loops. It would be similarly useful to have for while loops.
For example the django migration has the following class:

```python
# Generated by Django 2.0.2 on 2018-03-01 19:55

from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Choice',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('choice_text', models.CharField(max_length=200)),
                ('votes', models.IntegerField(default=0)),
            ],
        ),
        migrations.CreateModel(
            name='Question',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('question_text', models.CharField(max_length=200)),
                ('pub_date', models.DateTimeField(verbose_name='date published')),
            ],
        ),
        migrations.AddField(
            model_name='choice',
            name='question',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='polls.Question'),
        ),
    ]
```

I can't access any of these fields. The namespace scheme that would make the most sense would be `0001_initial.Migration` but this will clash with the namespace conventions for functions. Will have to think about this some more...