I am able to add a VM to ManualDesktop using  Desktop_AddMachinesToManualDesktop service, however I am struggling with Assign a user to the VM created and added to the Desktop pool.

I am trying to used MachineService with Machine_Update option. The part of the code is attached below. The scripts in the github repository dont have examples to create VM and assign a user so raising this ticket. 

Any help is appreciated!

I am trying to assign a user to a VM added to the Desktop pool.


```
 $AddUserEntitlements=($queryService.queryservice_create($hvServices, $defn)).results[0].id

$VMBaseUpdate = New-Object VMware.hv.machinebase
$VMBaseUpdate.Name = $vmName
$VMBaseUpdate.DnsName = $vmName
$VMBaseUpdate.User = $AccessUserID
$VMBaseUpdate.Desktop = $desktopId

$VMUpdate = New-Object VMware.Hv.MachineInfo
$VMUpdate.Base = $VMBaseUpdate
$VMUpdate.Id = $vmID

$updateid = New-Object VMware.Hv.MapEntry
$updateid.key = 'id'
$updateid.value = $VMID
$updatebase = New-Object VMware.Hv.MapEntry
$updatebase.key = 'base'
$updatebase.value = $VMBaseUpdate.base

$vmupdates= @()
$vmupdates += $updateid
$vmupdates += $updatebase


$MachineService = New-Object VMware.Hv.MachineService

$MachineService.Machine_update($hvServices, $VMID, $vmupdates) 
```

Error message after running last line : 



```
PS C:\> $MachineService.Machine_update($hvServices, $VMID, $vmupdates)
Exception calling "Machine_Update" with "3" argument(s): "ExceptionType : VMware.Hv.UnexpectedFault
ErrorMessage : Encountered unexpected error during execution
CauseString : java.lang.IllegalArgumentException: Cannot get access group for non-assigned machines
CauseStackTrace : System.String[]
ErrorCode : 
ErrorAttributes : "
At line:1 char:1
+ $MachineService.Machine_update($hvServices, $VMID, $vmupdates)
+ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    + CategoryInfo          : NotSpecified: (:) [], MethodInvocationException
    + FullyQualifiedErrorId : VimException
 
 
```

Hi 

connection server version is 7.10.0 build-14584133 and i'm getting this error 

PS C:\> $services.Monitoring.Monitoring_GetHealthCounters()
Exception calling "Monitoring_GetHealthCounters" with "0" argument(s): "There is an error in the XML document."
At line:1 char:1
+ $services.Monitoring.Monitoring_GetHealthCounters()
+ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    + CategoryInfo          : NotSpecified: (:) [], MethodInvocationException
    + FullyQualifiedErrorId : InvalidOperationException

What could be the issue?


In the Json spec when creating a Desktop Pool, there is a property called DesktopSettings.displayProtocolSettings.pcoipDistplaySettings.VGPUGridProfile . The $VGPUGridProfile variable is NOT being set from the Json object. This causes the New-HVPool function to fail when you want vGPU support. The code should be equivalent to the code for the enableGRIDvGPUs property.
https://www.powershellgallery.com/packages?q=vmware.vmc.nsxt = :(

Please publish the VMware.VMC.NSXT module in the PowerShellGallery for standardized UX
Hello, guys. 

As a newbie to powercli and api, I am struggling to write this simple script for automating regular scheduled snapshot and corresponding recomposing the linked clone pool based on the image. 

After hours of searching, I landed on hv.helper module and managed to work on the simple script.

However, I faced the seemingly last but not the least obstacle.

I face the below error message which seems related to the module of hv.helper judging from it saying that I am having some parameter exception and missing. 

Anyone could help me? Any help would be appreciated. 

**My Script**

`Connect-VIServer -Server  -User  -Password 

###############

#Day values for snapshot name
$Today = (Get-Date).ToString(“yyyy-MM-d”)
$Yesterday = (Get-Date).AddDays(-1).ToString(“yyyy-MM-d”)

###############
 
$vm = Get-VM -Name $vmName
 
#Create snapshot for today
New-Snapshot -VM '1809_templete' -Name $Today -Description "$Today daily snapshot" 

#Delete snapshot from the previous day
Get-Snapshot -VM $vm | Where-Object {$_.name -contains $Yesterday} | Remove-Snapshot -Confirm:$false

Import-Module VMware.VimAutomation.HorizonView

Import-Module VMware.Hv.Helper

Connect-HVServer -Server  -User  -Password 

Start-HVPool -Pool 'link01' -Recompose -LogoffSetting FORCE_LOGOFF -ParentVM '1809_templete' -SnapshotVM '$Today' -StopOnFirstError $false`

### **The resulting  error message**

Exception calling "Desktop_Recompose" with "3" argument(s): "ExceptionType : VMware.Hv.MethodFault

ErrorMessage : Missing value for non-optional field snapshot"
At C:\Program Files\WindowsPowerShell\Modules\VMware.Hv.Helper\VMware.HV.Helper.psm1:6993 char:13
+             $desktop_helper.Desktop_Recompose($services,$item,$spec)
+             ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    + CategoryInfo          : NotSpecified: (:) [], MethodInvocationException
    + FullyQualifiedErrorId : VimException
 
Get-MapEntry : Cannot bind argument to parameter 'Value' because it is null.
At C:\Program Files\WindowsPowerShell\Modules\VMware.Hv.Helper\VMware.HV.Helper.psm1:6998 char:146
+ ... ettings.virtualCenterProvisioningData.snapshot' -value $spec.Snapshot
+                                                            ~~~~~~~~~~~~~~
    + CategoryInfo          : InvalidData: (:) [Get-MapEntry], ParameterBindingValidationException
    + FullyQualifiedErrorId : ParameterArgumentValidationErrorNullNotAllowed,Get-MapEntry 
 New-HVPool -InstantClone  -PoolName <String> [-PoolDisplayName <String>] [-Description <String>] [-AccessGroup <String>] [-GlobalEntitlement <String>] -UserAssignment <String> [-AutomaticAssignment <Boolean>] [-Enable <Boolean>] [-ConnectionServerRestrictions <String[]>] [-AutomaticLogoffPolicy <String>] [-AutomaticLogoffMinutes <Int32>] [-allowUsersToResetMachines <Boolean>] [-allowMultipleSessionsPerUser <Boolean>] [-deleteOrRefreshMachineAfterLogoff <String>] [-supportedDisplayProtocols <String[]>] [-defaultDisplayProtocol <String>] [-allowUsersToChooseProtocol <Int32>] [-enableHTMLAccess <Boolean>] [-renderer3D <String>] [-Quality <String>] [-Throttling <String>] [-Vcenter <String>] -ParentVM <String> -SnapshotVM <String> -VmFolder <String> -HostOrCluster <String> -ResourcePool <String> [-datacenter <String>] -Datastores <String[]> [-StorageOvercommit <String[]>] [-UseVSAN <Boolean>] [-UseSeparateDatastoresReplicaAndOSDisks <Boolean>] [-ReplicaDiskDatastore <String>] [-UseNativeSnapshots <Boolean>] [-ReclaimVmDiskSpace <Boolean>] [-RedirectWindowsProfile <Boolean>] [-Nics <DesktopNetworkInterfaceCardSettings[]>] [-EnableProvisioning <Boolean>] [-StopProvisioningOnError <Boolean>] [-TransparentPageSharingScope <String>] -NamingMethod <String> [-NamingPattern <String>] [-MaximumCount <Int32>] [-SpareCount <Int32>] [-ProvisioningTime <String>] [-MinimumCount <Int32>] [-SpecificNames <String[]>] [-StartInMaintenanceMode <Boolean>] [-NumUnassignedMachinesKeptPoweredOn <Int32>] [-AdContainer <Object>] -NetBiosName <String> [-DomainAdmin <String>] [-ReusePreExistingAccounts <Boolean>] [-PowerOffScriptName <String>] [-PowerOffScriptParameters <String>] [-PostSynchronizationScriptName <String>] [-PostSynchronizationScriptParameters <String>] [-HvServer <Object>] [-WhatIf ] [-Confirm ] [<CommonParameters>]


New-HVPool -LinkedClone  -PoolName <String> [-PoolDisplayName <String>] [-Description <String>] [-AccessGroup <String>] [-GlobalEntitlement <String>] -UserAssignment <String> [-AutomaticAssignment <Boolean>] [-Enable <Boolean>] [-ConnectionServerRestrictions <String[]>] [-PowerPolicy <String>] [-AutomaticLogoffPolicy <String>] [-AutomaticLogoffMinutes <Int32>] [-allowUsersToResetMachines <Boolean>] [-allowMultipleSessionsPerUser <Boolean>] [-deleteOrRefreshMachineAfterLogoff <String>] [-refreshOsDiskAfterLogoff <String>] [-refreshPeriodDaysForReplicaOsDisk <Int32>] [-refreshThresholdPercentageForReplicaOsDisk <Int32>] [-supportedDisplayProtocols <String[]>] [-defaultDisplayProtocol <String>] [-allowUsersToChooseProtocol <Int32>] [-enableHTMLAccess <Boolean>] [-renderer3D <String>] [-**enableGRIDvGPUs** <Boolean>] [-vRamSizeMB <Int32>] [-maxNumberOfMonitors <Int32>] [-maxResolutionOfAnyOneMonitor <String>] [-Quality <String>] [-Throttling <String>] [-overrideGlobalSetting <Boolean>] [-enabled <Boolean>] [-url <String>] [-Vcenter <String>] -ParentVM <String> -SnapshotVM <String> -VmFolder <String> -HostOrCluster <String> -ResourcePool <String> [-datacenter <String>] -Datastores <String[]> [-StorageOvercommit <String[]>] [-UseVSAN <Boolean>] [-UseSeparateDatastoresReplicaAndOSDisks <Boolean>] [-ReplicaDiskDatastore <String>] [-UseNativeSnapshots <Boolean>] [-ReclaimVmDiskSpace <Boolean>] [-ReclamationThresholdGB <Int32>] [-RedirectWindowsProfile <Boolean>] [-UseSeparateDatastoresPersistentAndOSDisks <Boolean>] [-PersistentDiskDatastores <String[]>] [-PersistentDiskStorageOvercommit <String[]>] [-DiskSizeMB <Int32>] [-DiskDriveLetter <String>] [-redirectDisposableFiles <Boolean>] [-NonPersistentDiskSizeMB <Int32>] [-NonPersistentDiskDriveLetter <String>] [-UseViewStorageAccelerator <Boolean>] [-ViewComposerDiskTypes <String>] [-RegenerateViewStorageAcceleratorDays <Int32>] [-BlackoutTimes <DesktopBlackoutTime[]>] [-Nics <DesktopNetworkInterfaceCardSettings[]>] [-EnableProvisioning <Boolean>] [-StopProvisioningOnError <Boolean>] [-TransparentPageSharingScope <String>] -NamingMethod <String> [-NamingPattern <String>] [-MinReady <Int32>] [-MaximumCount <Int32>] [-SpareCount <Int32>] [-ProvisioningTime <String>] [-MinimumCount <Int32>] [-SpecificNames <String[]>] [-StartInMaintenanceMode <Boolean>] [-NumUnassignedMachinesKeptPoweredOn <Int32>] [-AdContainer <Object>] [-NetBiosName <String>] [-DomainAdmin <String>] -CustType <String> [-ReusePreExistingAccounts <Boolean>] [-SysPrepName <String>] [-PowerOffScriptName <String>] [-PowerOffScriptParameters <String>] [-PostSynchronizationScriptName <String>] [-PostSynchronizationScriptParameters <String>] [-HvServer <Object>] [-WhatIf ] [-Confirm ] [<CommonParameters>]

As you can see I can create a linkedclone pool with -enableGRIDvGPUs but not with instanclone.

I hope this can be in the next release.




       We have datastores that are maintained by another team. The way they were setup we ended up with 2 hostorclusterids. I am able to create a new pool using new-hvpool and 1 of the data stores. I then tried to add another using 


 $dsId = New-Object VMware.Hv.DatastoreId
    $dsId  =  "Datastore/xxx"
 Set-HVPool -PoolName $poolName -key "automateddesktopdata.virtualCenterProvisioningSettings.virtualCenterStorageSettings.datastores.datastore" -Value  $dsId

I have also tried a few variations (datastores.datastore[0] and datastores.datastore) but I get "invalid member name" each time.


Is it possible to add another datastore using  Set-HVPool?




We make our full clone desktops from running VMs which are always fully patched. This ensures any new machines are fully patched upon first boot.

ParentVM and SnapshotId of New-HVPool are for instant and linked clones only so I can't use these to build my Full Clone pool:
```
.PARAMETER ParentVM
    Parent Virtual Machine to clone Virtual machines.
    Applicable only to Linked Clone and Instant Clone pools.

.PARAMETER SnapshotVM
    Base image VM for Linked Clone pool and current Image for Instant Clone Pool.
```
When attempting to get a spec of pool using a running VM as a template the following error produces:
```
PS C:\Users\myuser> Get-HVPool TESTPOOL01 | Get-HVPoolSpec 
Exception calling "VmTemplate_List" with "1" argument(s): "There is an error in the XML document."
At C:\Program Files\WindowsPowerShell\Modules\VMware.HV.Helper\VMware.HV.Helper.psm1:7993 char:10
+          $info = $services.VmTemplate.VmTemplate_List($VcId) | Where- ...
+          ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    + CategoryInfo          : NotSpecified: (:) [], MethodInvocationException
    + FullyQualifiedErrorId : InvalidOperationException
```
The command completes and the json of the pool I attempt to get looks like so for pool:
```
"VirtualCenterProvisioningData": {
    "template": null,
    "parentVm": null,
    "snapshot": null,
    ...
},
```
When I attempt to create a pool using a running VM as my template (this is exactly how it is presented in the gui), I receive the following error:
```
PS C:\Users\myuser>     New-HVPool -spec $specfile
New-HVPool : Failed to create Pool with error: No template VM found with Name: [POWERSHELLPOOL01]
At line:1 char:5
+     New-HVPool -spec $specfile
+     ~~~~~~~~~~~~~~~~~~~~~~~~~~
    + CategoryInfo          : NotSpecified: (:) [Write-Error], WriteErrorException
    + FullyQualifiedErrorId : Microsoft.PowerShell.Commands.WriteErrorException,New-HVPool
```
The json for my spec file is set as so:
```
"VirtualCenterProvisioningData": {
    "template": "POWERSHELLPOOL01",
    "parentVm": null,
    "snapshot": null,
    ...
},
```
In the module, I experimented by switching $templateList to $global:templateList to see what is returned and it is indeed only proper templates from the cluster.
This cmdlet does not have an ID parameter which allows a user to define the ID for a pre-installed application and, by default, the `ApplicationName` parameter is also used for the ID. This is a problem because if this cmdlet was used previously to create an application like "Calculator", then it cannot be used subsequently on another farm to create the same "Calculator" application. Attempts to do so throws the message "<app_name> already exists in the Application Pool." And since the `ApplicationName` parameter must match the name of the pre-installed application, you're just stuck if you need to publish the same application name from different farms.

Is there a workaround here?
Noticed in the .psm1 it is already version 1.2 but the psd1 still states 1.1