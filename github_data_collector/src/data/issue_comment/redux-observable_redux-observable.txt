
## The devDependency [sinon](https://github.com/sinonjs/sinon) was updated from `4.5.0` to `8.1.0`.
This version is **not covered** by your **current version range**.

If you don‚Äôt accept this pull request, your project will work just like it did before. However, you might be missing out on a bunch of new features, fixes and/or performance improvements from the dependency update.

---

**Publisher:** [mrgnrdrck](https://www.npmjs.com/~mrgnrdrck)
**License:** BSD-3-Clause

[Find out more about this release](https://github.com/sinonjs/sinon).

---

<details>
  <summary>FAQ and help</summary>

  There is a collection of [frequently asked questions](https://greenkeeper.io/faq.html). If those don‚Äôt help, you can always [ask the humans behind Greenkeeper](https://github.com/greenkeeperio/greenkeeper/issues/new).
</details>

---


Your [Greenkeeper](https://greenkeeper.io) bot :palm_tree:



## The devDependency [@types/node](https://github.com/DefinitelyTyped/DefinitelyTyped) was updated from `12.12.24` to `13.1.7`.
This version is **not covered** by your **current version range**.

If you don‚Äôt accept this pull request, your project will work just like it did before. However, you might be missing out on a bunch of new features, fixes and/or performance improvements from the dependency update.

---

**Publisher:** [types](https://www.npmjs.com/~types)
**License:** MIT

[Find out more about this release](https://github.com/DefinitelyTyped/DefinitelyTyped).

---

<details>
  <summary>FAQ and help</summary>

  There is a collection of [frequently asked questions](https://greenkeeper.io/faq.html). If those don‚Äôt help, you can always [ask the humans behind Greenkeeper](https://github.com/greenkeeperio/greenkeeper/issues/new).
</details>

---


Your [Greenkeeper](https://greenkeeper.io) bot :palm_tree:


Hi Again!
We are currently using the below setup for our store for SSR implementation.

https://pastebin.com/80tYcP5M

It was working flawlessly since we had to implement the last route to be fully rendered on the server. (seriously!)

On the server, we are doing two renders, by launching renderToString method twice.
First to launch all async actions from constructors, and second after shutdownEpics() will be resolved.

But we have one case where async action can reveal another constructor with extra async action that does not count during the first render.

Do you know how to deal with it?
I really looking forward to your opinion!

Best regards
Am new to redux, and my first encounter landed me in using epic, but i have one problem connectng epic with my store in my app module, am using angular.
**The Action Creators**
>this is action creator defined inside a class

      ` static LIST_ALL_COMPETITIONS = 'LIST_ALL_COMPETITIONS';
         listAllCompetition(payload : ICompetition[]) : AnyAction {
           return this.ngRedux.dispatch(
             { type: SessionActions.LIST_ALL_COMPETITIONS, 
           payload});
     };`

> i would want this action dispatched if a user hit  my url in the browser, kind of fetching the data from the server, so  i would probably call this in my ngOnit or use a resolver in the route path.

**The Reducer Function**
>My reducer function will take an initial state that comprises of the different endpoint that will prefetch which of course has the same structure with the remote data which i enforced by creating each interface for each endpoint.


      ` export const initialState:IAppState = {
         competitions: [],
         matches:[],
         teams : [],
         standing: [],
         players:[]
       }
     export function FootballReducer(state: IAppState = initialState, action){
         switch(action.type){
            case ActionTypes.ListCompetitionSuccess:
                return{
                    ...state, 
                    competitions: action.payload
               }     
         }
        return state;
    }`

> if am able to setup epic correctly, it suppose the intercept the actions coming in from the component, do the network call and return an action containing the payload of the fetched result

     `constructor(private http: HttpClient, private service : FootballStoreService, private action : 
        SessionActions ) { }
         listAllCompetitions  = (action$) : AnyAction => {
           return action$.pipe(
             ofType(SessionActions.LIST_ALL_COMPETITIONS),
                mergeMap(() => {
                   return this.service.listAllCompetition()
                     .map(result => {
                     return this.action.listAllCompetition(result)
          })
          .catch(error => Observable.of({
            type: SessionActions.ERROR_LIST
          }));
        }))
     }`
>the function that makes the api call

    `listAllCompetition(){
     return this.http.get<ICompetition[]>(BASE_URL+'competitions/', {headers: this.headers})
    }`


> the issue now is configuring epic to create a store at my app module. another thing am unsure of is whether an setting up epic correctly interm of my reducer and action, i need explanations on this.


**the app module congif**

    `export class AppModule {
       constructor(private ngRedux : NgRedux<IAppState>, private epic : EpicServiceService){
         const epicActiion = createEpicMiddleware(this.epic.listAllCompetitions(this is where the 
      problem is, bringing in my epic funtions here))
         // const middleWare = [createEpicMiddleware(SessionActions.LIST_ALL_COMPETITIONS)];
          ngRedux.configureStore(
          FootballReducer, 
         initialState
         )
         }
     }`

> my problem is that the createmiddleWare functions needs a action type and i don't know how to feed it that argument.

Setting up the store including epic middleware shouldn't be made too complicated, redux on its own is already confusing, if somebody is able to learn what an actions is, and where the reducer functions comes in, bringing in epic as a tool that will aid side effects should be made easy to integrate. so pls with the latest release of RxJS library, point me to a link that can detail how to work with redux and observable using epic as it relate to my reducers and actions. but better still somebody here can guide with code snippets on the best practice.

_Originally posted by @myquery in https://github.com/redux-observable/redux-observable/issues/78#issuecomment-569284193_

## The devDependency [@typescript-eslint/eslint-plugin](https://github.com/typescript-eslint/typescript-eslint) was updated from `2.9.0` to `2.10.0`.

üö® [View failing branch](https://github.com/redux-observable/redux-observable/compare/master...redux-observable:greenkeeper%2F%40typescript-eslint%2Feslint-plugin-2.10.0).

This version is **covered** by your **current version range** and after updating it in your project **the build failed**.




@typescript-eslint/eslint-plugin is a devDependency of this project. It **might not break your production code or affect downstream projects**, but probably breaks your build or test tools, which may **prevent deploying or publishing**.



<details>
<summary>Status Details</summary>

- ‚ùå **continuous-integration/travis-ci/push:** The Travis CI build failed ([Details](https://travis-ci.org/redux-observable/redux-observable/builds/619760997?utm_source=github_status&utm_medium=notification)).
</details>


---

<details>
<summary>Release Notes for v2.10.0</summary>

<h1><a href="https://urls.greenkeeper.io/typescript-eslint/typescript-eslint/compare/v2.9.0...v2.10.0">2.10.0</a> (2019-12-02)</h1>
<h3>Bug Fixes</h3>
<ul>
<li><strong>eslint-plugin:</strong> [no-empty-function] add missed node types (<a href="https://urls.greenkeeper.io/typescript-eslint/typescript-eslint/issues/1271" data-hovercard-type="pull_request" data-hovercard-url="/typescript-eslint/typescript-eslint/pull/1271/hovercard">#1271</a>) (<a href="https://urls.greenkeeper.io/typescript-eslint/typescript-eslint/commit/e9d44f5">e9d44f5</a>)</li>
<li><strong>eslint-plugin:</strong> [no-untyped-pub-sig] ignore set return (<a href="https://urls.greenkeeper.io/typescript-eslint/typescript-eslint/issues/1264" data-hovercard-type="pull_request" data-hovercard-url="/typescript-eslint/typescript-eslint/pull/1264/hovercard">#1264</a>) (<a href="https://urls.greenkeeper.io/typescript-eslint/typescript-eslint/commit/6daff10">6daff10</a>)</li>
<li><strong>eslint-plugin:</strong> [no-unused-expressions] ignore directives (<a href="https://urls.greenkeeper.io/typescript-eslint/typescript-eslint/issues/1285" data-hovercard-type="pull_request" data-hovercard-url="/typescript-eslint/typescript-eslint/pull/1285/hovercard">#1285</a>) (<a href="https://urls.greenkeeper.io/typescript-eslint/typescript-eslint/commit/ce4c803">ce4c803</a>)</li>
<li><strong>eslint-plugin:</strong> [prefer-optional-chain] allow $ in identifiers (<a href="https://urls.greenkeeper.io/typescript-eslint/typescript-eslint/commit/c72c3c1">c72c3c1</a>)</li>
<li><strong>eslint-plugin:</strong> [prefer-optional-chain] handle more cases (<a href="https://urls.greenkeeper.io/typescript-eslint/typescript-eslint/issues/1261" data-hovercard-type="pull_request" data-hovercard-url="/typescript-eslint/typescript-eslint/pull/1261/hovercard">#1261</a>) (<a href="https://urls.greenkeeper.io/typescript-eslint/typescript-eslint/commit/57ddba3">57ddba3</a>)</li>
<li><strong>eslint-plugin:</strong> [return-await] allow Any and Unknown (<a href="https://urls.greenkeeper.io/typescript-eslint/typescript-eslint/issues/1270" data-hovercard-type="pull_request" data-hovercard-url="/typescript-eslint/typescript-eslint/pull/1270/hovercard">#1270</a>) (<a href="https://urls.greenkeeper.io/typescript-eslint/typescript-eslint/commit/ebf5e0a">ebf5e0a</a>)</li>
<li><strong>eslint-plugin:</strong> [strict-bool-expr] allow nullish coalescing (<a href="https://urls.greenkeeper.io/typescript-eslint/typescript-eslint/issues/1275" data-hovercard-type="pull_request" data-hovercard-url="/typescript-eslint/typescript-eslint/pull/1275/hovercard">#1275</a>) (<a href="https://urls.greenkeeper.io/typescript-eslint/typescript-eslint/commit/3b39340">3b39340</a>)</li>
<li><strong>typescript-estree:</strong> make FunctionDeclaration.body non-null (<a href="https://urls.greenkeeper.io/typescript-eslint/typescript-eslint/issues/1288" data-hovercard-type="pull_request" data-hovercard-url="/typescript-eslint/typescript-eslint/pull/1288/hovercard">#1288</a>) (<a href="https://urls.greenkeeper.io/typescript-eslint/typescript-eslint/commit/dc73510">dc73510</a>)</li>
</ul>
<h3>Features</h3>
<ul>
<li><strong>eslint-plugin:</strong> [no-empty-func] private/protected construct (<a href="https://urls.greenkeeper.io/typescript-eslint/typescript-eslint/issues/1267" data-hovercard-type="pull_request" data-hovercard-url="/typescript-eslint/typescript-eslint/pull/1267/hovercard">#1267</a>) (<a href="https://urls.greenkeeper.io/typescript-eslint/typescript-eslint/commit/3b931ac">3b931ac</a>)</li>
<li><strong>eslint-plugin:</strong> [no-non-null-assert] add suggestion fixer (<a href="https://urls.greenkeeper.io/typescript-eslint/typescript-eslint/issues/1260" data-hovercard-type="pull_request" data-hovercard-url="/typescript-eslint/typescript-eslint/pull/1260/hovercard">#1260</a>) (<a href="https://urls.greenkeeper.io/typescript-eslint/typescript-eslint/commit/e350a21">e350a21</a>)</li>
<li><strong>eslint-plugin:</strong> [no-unnec-cond] support nullish coalescing (<a href="https://urls.greenkeeper.io/typescript-eslint/typescript-eslint/issues/1148" data-hovercard-type="pull_request" data-hovercard-url="/typescript-eslint/typescript-eslint/pull/1148/hovercard">#1148</a>) (<a href="https://urls.greenkeeper.io/typescript-eslint/typescript-eslint/commit/96ef1e7">96ef1e7</a>)</li>
<li><strong>eslint-plugin:</strong> [prefer-null-coal] opt for suggestion fixer (<a href="https://urls.greenkeeper.io/typescript-eslint/typescript-eslint/issues/1272" data-hovercard-type="pull_request" data-hovercard-url="/typescript-eslint/typescript-eslint/pull/1272/hovercard">#1272</a>) (<a href="https://urls.greenkeeper.io/typescript-eslint/typescript-eslint/commit/f84eb96">f84eb96</a>)</li>
<li><strong>experimental-utils:</strong> add isSpaceBetween declaration to Sou‚Ä¶ (<a href="https://urls.greenkeeper.io/typescript-eslint/typescript-eslint/issues/1268" data-hovercard-type="pull_request" data-hovercard-url="/typescript-eslint/typescript-eslint/pull/1268/hovercard">#1268</a>) (<a href="https://urls.greenkeeper.io/typescript-eslint/typescript-eslint/commit/f83f04b">f83f04b</a>)</li>
</ul>
</details>

<details>
<summary>Commits</summary>
<p>The new version differs by 16 commits.</p>
<ul>
<li><a href="https://urls.greenkeeper.io/typescript-eslint/typescript-eslint/commit/5adb8a2fded0785d8793b78bf96051aa7b60426a"><code>5adb8a2</code></a> <code>chore: publish v2.10.0</code></li>
<li><a href="https://urls.greenkeeper.io/typescript-eslint/typescript-eslint/commit/065393b151b40735bfa6e1eee8a5d368b8a8dfeb"><code>065393b</code></a> <code>docs(eslint-plugin): typo in the configs README (#1295)</code></li>
<li><a href="https://urls.greenkeeper.io/typescript-eslint/typescript-eslint/commit/96ef1e7afd429b98c63b3ed3b83cc5ff5be0e194"><code>96ef1e7</code></a> <code>feat(eslint-plugin): [no-unnec-cond] support nullish coalescing (#1148)</code></li>
<li><a href="https://urls.greenkeeper.io/typescript-eslint/typescript-eslint/commit/e350a21fb19d976b1cac84b097039f2e59fb26f6"><code>e350a21</code></a> <code>feat(eslint-plugin): [no-non-null-assert] add suggestion fixer (#1260)</code></li>
<li><a href="https://urls.greenkeeper.io/typescript-eslint/typescript-eslint/commit/ce4c803522d5606f6e25e33206502291c7b20474"><code>ce4c803</code></a> <code>fix(eslint-plugin): [no-unused-expressions] ignore directives (#1285)</code></li>
<li><a href="https://urls.greenkeeper.io/typescript-eslint/typescript-eslint/commit/f84eb96b2733c5e047c6ac6aa5fcfef21bac1d96"><code>f84eb96</code></a> <code>feat(eslint-plugin): [prefer-null-coal] opt for suggestion fixer (#1272)</code></li>
<li><a href="https://urls.greenkeeper.io/typescript-eslint/typescript-eslint/commit/dc735104d5671e5b05c3678a40ceadc152f27c58"><code>dc73510</code></a> <code>fix(typescript-estree): make FunctionDeclaration.body non-null (#1288)</code></li>
<li><a href="https://urls.greenkeeper.io/typescript-eslint/typescript-eslint/commit/3b393405fe496203fb2ebf226dc5c9f2077dd8b7"><code>3b39340</code></a> <code>fix(eslint-plugin): [strict-bool-expr] allow nullish coalescing (#1275)</code></li>
<li><a href="https://urls.greenkeeper.io/typescript-eslint/typescript-eslint/commit/ebf5e0a2eb5119448ded59a78d7cb9e4c3b36692"><code>ebf5e0a</code></a> <code>fix(eslint-plugin): [return-await] allow Any and Unknown (#1270)</code></li>
<li><a href="https://urls.greenkeeper.io/typescript-eslint/typescript-eslint/commit/e9d44f51efcede276ba45462c10f93cea91ae2f0"><code>e9d44f5</code></a> <code>fix(eslint-plugin): [no-empty-function] add missed node types (#1271)</code></li>
<li><a href="https://urls.greenkeeper.io/typescript-eslint/typescript-eslint/commit/3b931acf563cbf0e32508767ef9895011eeab4b9"><code>3b931ac</code></a> <code>feat(eslint-plugin): [no-empty-func] private/protected construct (#1267)</code></li>
<li><a href="https://urls.greenkeeper.io/typescript-eslint/typescript-eslint/commit/c72c3c1ade7d9dd42e222c85075e06a79b95260b"><code>c72c3c1</code></a> <code>fix(eslint-plugin): [prefer-optional-chain] allow $ in identifiers</code></li>
<li><a href="https://urls.greenkeeper.io/typescript-eslint/typescript-eslint/commit/f83f04b78a88dadde7e1885a0d20ab0e2f458b8e"><code>f83f04b</code></a> <code>feat(experimental-utils): add isSpaceBetween declaration to Sou‚Ä¶ (#1268)</code></li>
<li><a href="https://urls.greenkeeper.io/typescript-eslint/typescript-eslint/commit/57ddba3008675715712b28fa03fa7f06bef2fb47"><code>57ddba3</code></a> <code>fix(eslint-plugin): [prefer-optional-chain] handle more cases (#1261)</code></li>
<li><a href="https://urls.greenkeeper.io/typescript-eslint/typescript-eslint/commit/6daff1034ecbd1f4e1662e315da7d641a7f06b11"><code>6daff10</code></a> <code>fix(eslint-plugin): [no-untyped-pub-sig] ignore set return (#1264)</code></li>
</ul>
<p>There are 16 commits in total.</p>
<p>See the <a href="https://urls.greenkeeper.io/typescript-eslint/typescript-eslint/compare/8a4af38d7d28382a5b51f9df8af56615b5d90a50...5adb8a2fded0785d8793b78bf96051aa7b60426a">full diff</a></p>
</details>


<details>
<summary>FAQ and help</summary>

There is a collection of [frequently asked questions](https://greenkeeper.io/faq.html). If those don‚Äôt help, you can always [ask the humans behind Greenkeeper](https://github.com/greenkeeperio/greenkeeper/issues/new).
</details>

---


Your [Greenkeeper](https://greenkeeper.io) Bot :palm_tree:

## Description

The link, https://goo.gl/2GQ7Da in warning does not exist.  
(_Error occurs even with all ad-blockers turned off_)

![image](https://user-images.githubusercontent.com/8465237/69640764-eed89c00-102c-11ea-9819-a342587ef3a3.png)

The warning below is found here - https://github.com/redux-observable/redux-observable/blob/16f083d405/src/createEpicMiddleware.ts#L49

```javascript
warn(
  'this middleware is already associated with a store. createEpicMiddleware should be called for every store.\n\nLearn more: https://goo.gl/2GQ7Da'
);
```

![image](https://user-images.githubusercontent.com/8465237/69634457-3ad11400-1020-11ea-9da0-35746626b7ac.png)


## Additional Context

These are not directly related but added for completeness.

- **Redux-Observable version**: v1.2.0
- **Site framework**: Next.js v9.1.4
- **OS**: Windows 10 build 1903.
- **Browser**: All browsers (Used Brave in the screenshot)

Searching for `https://goo.gl/2GQ7Da` in the issue shows [Server Side Rendering Documentation](https://github.com/redux-observable/redux-observable/issues/635) (not a dupe), which I will be checking out for the warning.

Hi guys,
We have quite large commerce app. We need to implement SSR however our whole communication is going through redux-observable.
Previous developer recommend to rewrite all epics to redux-saga. We have them more then **50**. 

What do you think, should we do this migration or we maybe we should develop own solution based on[ this PR](https://github.com/redux-observable/redux-observable/pull/539)?
 
Or maybe [ this solution](https://github.com/redux-observable/redux-observable/issues/47#issuecomment-227578183) would be still working?

I also found [react-redux-epic](https://github.com/BerkeleyTrue/react-redux-epic) library.
[Guy here](https://github.com/redux-observable/redux-observable/issues/47#issuecomment-227578183) said 18 days ago that he is still using it and its working.

Our epics are in most cases are very simple. Mostly we do some ajax calls and fill store with data.
Sometimes we do some transformations or we dispatch other actions, but in general they are pretty straightforward.

All we need to do on server is to dispatch few actions (the same we have in componentDidMount) and wait for other few actions to be dispatched (success actions).

Maybe you know how to listen on action$ in server function?

What do you think we should start migration of 50 (or even more) epics to redux-saga or we should spend few days on getting working redux-observable event if ssr is not nativly supported?

I am using redux-observable for few years now but I don't feel strong enough to make decision at least now.

Btw redux-saga based on promise but I always though that streams are just more advanced promises. :)

Have a good day and thanks for any response :)
<!-- If this is your first PR for redux-observable, please mark these boxes to confirm (otherwise you can exclude them)-->

- [x] I have read the [Contributor Guide](https://github.com/redux-observable/redux-observable/blob/master/CONTRIBUTING.md)
- [x] My commit messages are in [conventional-changelog-standard](https://github.com/redux-observable/redux-observable/blob/master/CONTRIBUTING.md#sending-a-pull-request) format.

## Reason for PR

I noticed `combineEpics` doesn't do anything to help locate errors. Almost always, when using redux-observable, it's nearly impossible to find errors unless you've got a `catchError` at the bottom of your pipeline.

In my own Redux-less implementation of Redux-Observable, I added this functionality:

| `createRootEpic`  |  `catchEpicError` |
|:---:|:---:|
| ![createRootEpic](https://user-images.githubusercontent.com/3948069/66693572-fce67f00-ec6f-11e9-853c-37dede4ac338.png) | ![catchEpicError](https://user-images.githubusercontent.com/3948069/66693578-007a0600-ec70-11e9-88d2-ce50d87f32c3.png) |

Not only does this implementation include a way of logging errors as actions, it also logs them to the console with the name of the Epic that caused the error.

It's super helpful in debugging. `combineEpics` could definitely benefit from functionality like this.

In case there's a stack available such as the error being an `EventError` (Node.js), one of my other versions of this operator checks for stack information.

![image](https://user-images.githubusercontent.com/3948069/66693592-37e8b280-ec70-11e9-8e70-fb23ef0bc0b9.png)

## Changes
This method makes it obvious which epic actually threw an error and then throws it again so it proceeds as usual similar to doing a `Promise.prototype.catch` and throwing the error again so the next `.catch` picks it up.

Just like when throwing a `TypeError`, this also utilizes `epic.name`.

<!--
IMPORTANT PLEASE READ: Hi there! If this is a *usage question* or you're not sure if its a bug, please **do not post it here**, post it on Stack Overflow (http://stackoverflow.com/questions/tagged/redux-observable) first; if you get no response after a reasonable amount of time, create a ticket here and link us to your Stack Overflow question. If this is not a ‚Äúfeature‚Äù or a ‚Äúbug‚Äù, or the phrase ‚ÄúHow do I...?‚Äù applies, then it's probably a usage question. Thank you!

We also have a Gitter channel anyone is welcome to join to discuss and find help: https://gitter.im/redux-observable/redux-observable

Most usage questions are not actually redux-observable specific, but rather general RxJS questions and patterns, so you can also find help in the RxJS community at large. RxJS bugs can be reported in their repo: https://github.com/ReactiveX/rxjs
-->

**Do you want to request a *feature* or report a *bug*?**  

Don't find official documentation on SSR. 
<!-- Make sure someone else hasn't already reported it: https://github.com/redux-observable/redux-observable/issues -->

**What is the current behavior?**
It doesn't work on the server side or throws the following warning.

```
Learn more: https://goo.gl/2GQ7Da
redux-observable | WARNING: this middleware is already associated with a store. createEpicMiddleware should be called for every store.

```


**If the current behavior is a bug, please provide the steps to reproduce and a minimal demo of the problem using JSBin, StackBlitz, or similar.**

<!--
The easier it is to reproduce the more likely someone will be able to quickly help. Very often in the process you may discover it's not a bug or gain a better understanding of what the cause is.

Here are some you can use as starting points:

JSBins: https://redux-observable.js.org/#online-live-examples
StackBlitz: https://stackblitz.com/edit/redux-observable-playground
-->

**What is the expected behavior?**

Should work SSR.
**Which versions of redux-observable, and which browser and OS are affected by this issue? Did this work in previous versions of redux-observable?**
1.1.0
- [X] I have read the [Contributor Guide](https://github.com/redux-observable/redux-observable/blob/master/CONTRIBUTING.md)
- [X] My commit messages are in [conventional-changelog-standard](https://github.com/redux-observable/redux-observable/blob/master/CONTRIBUTING.md#sending-a-pull-request) format.

Hello!

When developing with `redux-observable`, we end up repeating the common pattern of passing `state$` to any dependency. For example, we have a `request` dependency which is a wrapper around `rxjs/ajax`. We pass `state$` to that function on every single call so that it can take the API token from the state and update the request headers accordingly.

My proposition is to introduce an option for `createEpicMiddleware` called `createDependencies` which must be a function that accepts the `state$` and returns the actual dependencies (the same dependencies that you'd pass to the `dependencies` option). This would avoid repeating code, as we wouldn't need manually to pass the `state$` to every single dependency.

If you like this change and will consider merging it, I suggest that we discuss whether or not `action$` should be passed too. I believe that it shouldn't, because I can't find any use cases for it, and might enable some anti-patterns. However, if there are legitimate use cases for it, implementing it in the future would break backward compatibility. So I think that this is an important discussion to have.

By the way, I regret that I committed these changes before realizing that #598 exists. I tried to search for this exact feature but couldn't find it. In [this comment](https://github.com/redux-observable/redux-observable/pull/598#issuecomment-453654980) you mention an alternative, but I think that the code example is hard to understand and honestly it feels a bit "hacky". I haven't tried it, but in TypeScript, it seems to me that we'd have to either use `any` or define some complex types.

If you need some examples of use cases, you can take a look at the commit f4dd2e042c1dcd579b738484d9f7d358bef782a5.

Thanks for your attention.