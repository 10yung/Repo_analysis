This line is not valid C# statement. Thus adding var in the beginning.
This is not an AKKA issue, but it is an issue that causes 1.4 (adding FileObserver/FileStream) not to work with .net core and/or on a MAC.

I ran into two issues.  The first was that in order to get the file change notifications, I had to modify the SystemFileWatcher construction in FileObserver.Start() to use a filter of "*", rather than _fileNameOnly.  Once I made this change, the OnFileChanged method was properly called.  To verify, I changed it back and the OnFileChanged was not called.  So, I changed initialization of _watcher to 
`_watcher = new FileSystemWatcher(_fileDir, "*")`

The second issue is that when the TailActor.OnReceive method properly received a FileWrite message, the FileStreamReader always returned an empty string.  Even though the SystemFileWatcher was properly seeing the change to the file, the FileStreamReader was not realizing the file size had increased and therefore .ReadToEnd was returning an empty string.  A hack workaround was to remember the previous file length, and then close and reopen the FileStream and FileStreamReader each time.  That worked, and allowed the modified text to be picked up and properly displayed.  Obviously this is not the best way of handling this, but it did allow the Tail to produce the desired output.  Of course this caused problems for lesson 1.6.

Lastly, to truly provide "Tail" behavior, you may want to change the ConsoleWriterActor's Console.WriteLine(message) (in the last "else" of the OnReceive) to simply a Console.Write(message) as this allows the output to precisely echo the file input.

As I said, none of what I point out is AKKA.net related, but with the increased popularity of .net core, including developing on a MAC, having a lesson which works as expected allows the student to focus on learning AKKA, and not battling environmental differences from the bootcamp lessons that were built on the original .net framework, likely in Windows. 

Referring to issue #108 which has supposedly not been fixed on that ticket, but in fact the 'Completed' code folder shows this line:

`if (series.Points == null) return; // means we're shutting down`

which is a fix for that problem, I believe.

Anyway, this line of code is not shown on the lesson webpage which you are instructed to cut-and-paste (`ChartingActor.cs`) from 'Step 7 - Update the ChartingActor'.


in https://github.com/petabridge/akka-bootcamp/blob/master/src/Unit-2/lesson5/README.md

We call Stash.Unstash() to pop off the message at the top of the Stash.
SHOULD BE
We call Stash.Unstash() to pop off **the oldest** message message at the top of the Stash.


Unhandled exception caught by debugger at Program.Main / Application.Run(new Main());

You need to click the buttons for some time for this to happen. It is very random. With my limited skills is hard to tell which caused this. 

How about Akka actor somewhere at least to catch this (and maybe reports as well) ? 

I have got the impression that the framework has ability to recover gracefully from these kind of situations.

Chapter 2.4 has this interaction chart https://github.com/petabridge/akka-bootcamp/blob/master/src/Unit-2/lesson4/images/system_overview_2_4.png which is really good but I am missing the actor hierarchy chart and the error recovery logic as well.



Minor wording changes.
Added definition for POCO for other newbies like me.
Fixes link to Untyped Actor API
the condition is implied by having "exit" as string received.
