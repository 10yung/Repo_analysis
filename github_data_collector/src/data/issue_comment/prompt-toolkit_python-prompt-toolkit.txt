For example text selection with shift+arrow keys seems to be implemented (https://github.com/prompt-toolkit/python-prompt-toolkit/issues/979) and works for me in at least XTerm when in inline mode in addition to just the full screen mode.

However, it doesn't seem to in Konsole when not in the full screen mode. Konsole has its own keybindings for shift+arrow keys, but disabling what it allowed me to (shift+left and shift+right) didn't help. In the full screen mode the shift utilizing bindings work (and for example in Nano as well). Is there some kind of an inherent limitation to the inline mode from which this issue arises? If not, then please fix.
I've looked for it, but there doesn't seem to be a way to do this easily currently. That is, having the up and down keys behave like a lot of text editors moving the cursor in an imaginary vertical line across the prompt, only straying from that when shorter rows are encountered and at the beginning/end of the document. Right now it seems that they go to the same index on the previous/next internal line, and not the "visual row".

My own hacky implementation is in this file:
https://github.com/MikkoMMM/Clover-Edition/blob/master/inline_editor.py
And even then I encountered problems where rarely but seemingly randomly the cursor would go in the slightly wrong column. That's why for example pressing left and right also manually invoke update_stored_pos in addition to the textf.buffer.on_cursor_position_changed event. And since I wasn't sure about the source of the problem, I also reimplemented the textf.document.cursor_position_col and textf.document.cursor_position_row functions.

So, it's a very messy solution and I'm not sure if it's working perfectly even still. It would be so much better if Python Prompt Toolkit could just offer the option to do it itself, and properly.
on system with systemd-245 testsuite fails with:

```
[  105s] _______________________________ test_with_style ________________________________
[  105s] 
[  105s]     def test_with_style():
[  105s]         f = _Capture()
[  105s]         style = style_from_dict({
[  105s]             Token.Hello: '#ff0066',
[  105s]             Token.World: '#44ff44 italic',
[  105s]         })
[  105s]         tokens = [
[  105s]             (Token.Hello, 'Hello '),
[  105s]             (Token.World, 'world'),
[  105s]         ]
[  105s]         print_tokens(tokens, style=style, file=f)
[  105s] >       assert b'\x1b[0;38;5;197mHello' in f.data
[  105s] E       AssertionError: assert '\x1b[0;38;5;197mHello' in '\x1b[0m\x1b[?7h\x1b[0;91mHello \x1b[0;92;3mworld\x1b[0m'
[  105s] E        +  where '\x1b[0m\x1b[?7h\x1b[0;91mHello \x1b[0;92;3mworld\x1b[0m' = <test_print_tokens._Capture instance at 0x7f88f75a1aa0>.data
[  105s] 
[  105s] tests/test_print_tokens.py:49: AssertionError
[  105s] ==================== 1 failed, 101 passed in 29.52 seconds =====================
```
I'm trying to add a `meta_dict` to a `prompt_toolkit.completion.NestedCompleter` but I'm not sure how the `options` argument can be used. 

Would be great if it would be implemented in the example.
```
[bckpkol@bckpkol-HP ~]$ python
Python 3.8.0 (default, Oct 23 2019, 18:51:26) 
[GCC 9.2.0] on linux
Type "help", "copyright", "credits" or "license" for more information.
>>>
[bckpkol@bckpkol-HP ~]$ pip list
Package                       Version   
----------------------------- ----------
absl-py                       0.8.1     
alabaster                     0.7.12    
appdirs                       1.4.3     
astor                         0.8.0     
av                            6.2.0     
Babel                         2.7.0     
bleach                        3.1.0     
btrfsutil                     1.1.1     
CacheControl                  0.12.5    
cffi                          1.13.2    
chardet                       3.0.4     
colorama                      0.4.1     
cycler                        0.10.0    
distlib                       0.3.0     
distro                        1.4.0     
docopt                        0.6.2     
docutils                      0.14      
filemagic                     1.6       
filetype                      1.0.5     
future                        0.18.2    
gast                          0.2.2     
google-pasta                  0.1.7     
grpcio                        1.25.0    
h5py                          2.9.0     
html5lib                      1.0.1     
idna                          2.8       
imagesize                     1.1.0     
importlib-metadata            0.23      
iotop                         0.6       
Jinja2                        2.10.3    
joblib                        0.14.1    
Keras-Applications            1.0.8     
Keras-Preprocessing           1.1.0     
keyutils                      0.6       
kiwisolver                    1.1.0     
lensfun                       0.3.2     
lhafile                       0.2.2     
lockfile                      0.12.2    
Markdown                      3.1.1     
MarkupSafe                    1.1.1     
matplotlib                    3.1.1     
MediaInfo                     0.0.8     
meld                          3.20.1    
more-itertools                7.2.0     
msgpack                       0.6.2     
npyscreen                     4.10.5    
numpy                         1.17.4    
opt-einsum                    3.1.0     
ordered-set                   3.1.1     
packaging                     19.2      
pacman-mirrors                4.16.2    
pefile                        2019.4.18 
pep517                        0.6.0     
pexpect                       4.7.0     
Pillow                        6.2.1     
pip                           19.2.3    
ply                           3.11      
pony                          0.7.11    
progress                      1.5       
prompt-toolkit                3.0.2     
protobuf                      3.10.1    
ptyprocess                    0.6.0     
pycairo                       1.18.2    
pycparser                     2.19      
pycryptodome                  3.9.4     
pyexiv2                       1.3.0     
Pygments                      2.5.2     
PyGObject                     3.34.0    
pymediainfo                   4.1       
pyparsing                     2.4.5     
PyQt5                         5.13.2    
PyQt5-sip                     4.19.19   
PySimpleGUI                   4.13.1    
PySolFC                       2.6.4     
python-dateutil               2.8.1     
pytoml                        0.1.21    
pytz                          2019.3    
PyYAML                        5.1.2     
random2                       1.0.1     
requests                      2.22.0    
retrying                      1.3.3     
scikit-learn                  0.22      
scipy                         1.4.1     
setuptools                    41.6.0    
six                           1.13.0    
sklearn                       0.0       
snowballstemmer               2.0.0     
sounddevice                   0.3.14    
Sphinx                        2.2.1     
sphinx-rtd-theme              0.4.3     
sphinxcontrib-applehelp       1.0.1     
sphinxcontrib-devhelp         1.0.1     
sphinxcontrib-htmlhelp        1.0.2     
sphinxcontrib-jsmath          1.0.1     
sphinxcontrib-qthelp          1.0.2     
sphinxcontrib-serializinghtml 1.1.3     
team                          1.0       
tensorboard                   2.1.0     
tensorflow                    2.1.0rc0  
tensorflow-estimator          2.0.0     
tensorflow-serving-api        2.0.0     
tensorflow-serving-api-gpu    2.0.0     
termcolor                     1.1.0     
typing                        3.7.4.1   
udiskie                       1.7.7     
urllib3                       1.25.7    
wcwidth                       0.1.7     
webencodings                  0.5.1     
Werkzeug                      0.16.0    
wheel                         0.33.6    
wrapt                         1.11.2    
yattag                        1.13.0    
youtube-dl                    2019.11.28
zipp                          0.6.0
```
```
from prompt_toolkit.shortcuts import yes_no_dialog
print(bool(yes_no_dialog))
```
Place that to a file and it will return True.
Inspired by the discussion in https://github.com/prompt-toolkit/python-prompt-toolkit/pull/1025#discussion_r360580489.

Instead of using a threaded approach for `remove_when_done` processing we check for removals as part of the rendering process instead.

@jonathanslenders this feels like a hack at this point, not sure if we'd want the `get_progress_bar`/`set_progress_bar`/`get_counter`/`set_counter` to be extending the `AppSession` or whether using this separate `ProgressBarSession` is preferred.

If we continue down this contexvar path then maybe `AppSession` should be made more generic to where anything can be set in a session? So we'd introduce something like `get_contextvar(key)` and `set_contextvar(key, value)`. Just thinking out loud here.
https://python-prompt-toolkit.readthedocs.io/en/master/pages/reference.html

Might need to rebuild the docs.
I get this exception when I have asynchronous logging on the terminal while in interactive mode as soon as I hit enter with a command. The following code can reproduce the problem:

```python
#!/usr/bin/env python3
import threading
import time

msg = b'This is the message.  It will be repeated.'

def UDP_receive():
    while True:
        print(msg)
        time.sleep(0.01)

listen_UDP = threading.Thread(target=UDP_receive)
listen_UDP.start()
```

which gives

```
...
b'This is the message.  It will be repeated.'
b'This is the message.  It will be repeated.'
In [1]: sdcs # just type something and hit enter
Exception in default exception handler
Traceback (most recent call last):
  File "/usr/local/Cellar/ipython/7.8.0/libexec/vendor/lib/python3.7/site-packages/prompt_toolkit/eventloop/posix.py", line 154, in _run_task
    t()
  File "/usr/local/Cellar/ipython/7.8.0/libexec/vendor/lib/python3.7/site-packages/prompt_toolkit/eventloop/context.py", line 115, in new_func
    return func(*a, **kw)
  File "/usr/local/Cellar/ipython/7.8.0/libexec/vendor/lib/python3.7/site-packages/prompt_toolkit/patch_stdout.py", line 102, in write_and_flush_in_loop
    run_in_terminal(write_and_flush, in_executor=False)
  File "/usr/local/Cellar/ipython/7.8.0/libexec/vendor/lib/python3.7/site-packages/prompt_toolkit/application/run_in_terminal.py", line 41, in run_in_terminal
    return run_coroutine_in_terminal(async_func, render_cli_done=render_cli_done)
  File "/usr/local/Cellar/ipython/7.8.0/libexec/vendor/lib/python3.7/site-packages/prompt_toolkit/application/run_in_terminal.py", line 62, in run_coroutine_in_terminal
    assert app._is_running
AssertionError

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/usr/local/Cellar/ipython/7.8.0/libexec/vendor/lib/python3.7/site-packages/prompt_toolkit/eventloop/base.py", line 129, in call_exception_handler
    self._exception_handler(context)
  File "/usr/local/Cellar/ipython/7.8.0/libexec/vendor/lib/python3.7/site-packages/prompt_toolkit/application/application.py", line 702, in handle_exception
    run_coroutine_in_terminal(print_exception)
  File "/usr/local/Cellar/ipython/7.8.0/libexec/vendor/lib/python3.7/site-packages/prompt_toolkit/application/run_in_terminal.py", line 62, in run_coroutine_in_terminal
    assert app._is_running
AssertionError
b'This is the message.  It will be repeated.'
b'This is the message.  It will be repeated.'
...
```
[test.py.txt](https://github.com/prompt-toolkit/python-prompt-toolkit/files/3992584/test.py.txt)


So a progress bar has two sets of keybindings in use. The standard keybindings for "c-l" and "c-c" assigned to `_ProgressControl` (created by `create_key_bindings`):

https://github.com/prompt-toolkit/python-prompt-toolkit/blob/5ee9df2417f41d6d374b0a716156141061a8ac8f/prompt_toolkit/shortcuts/progress_bar/base.py#L275-L283

https://github.com/prompt-toolkit/python-prompt-toolkit/blob/5ee9df2417f41d6d374b0a716156141061a8ac8f/prompt_toolkit/shortcuts/progress_bar/base.py#L69-L85

and whatever keybindings the user provides which are passed to the `Application`.
https://github.com/prompt-toolkit/python-prompt-toolkit/blob/5ee9df2417f41d6d374b0a716156141061a8ac8f/prompt_toolkit/shortcuts/progress_bar/base.py#L187-L205

This means, for example, that I cannot overwrite the "c-c" keybinding. Why are there two 2 sets of key bindings and what would be the correct way to overwrite the bindings?