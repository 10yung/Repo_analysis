Steps to reproduce:
```
> install.packages('countrycode')
> library(countrycode)
> countrycode('England', 'country.name', 'iso3c')
Error: 'codelist' is not an exported object from 'namespace:countrycode'
> data(package='countrycode')
Data sets in package 'countrycode':

countrycode_data         Country Code Translation Data Frame
```

```
> sessionInfo()
R version 3.6.1 (2019-07-05)
Platform: x86_64-pc-linux-gnu (64-bit)
Running under: Alpine Linux v3.10

Matrix products: default
BLAS:   /usr/lib/R/lib/libRblas.so
LAPACK: /usr/lib/R/lib/libRlapack.so

locale:
[1] en_US.UTF-8 C en_US.UTF-8

attached base packages:
[1] stats      graphics   grDevices   utils   datasets    methods   base

other attached packages:
[1] countrycode_1.1.0

loaded via a namespace (and not attached):
[1] Rcpp_1.0.3.3       pillar_1.4.2        compiler_3.6.1     R.methodsS3.1.7.1
[5] prettyunits_1.0.2 R.utils_2.9.1     remotes_2.1.0 ....
```
I've been playing with the newly released GitHub Actions, and I think it would be really cool to use it to automatically test the dictionary build process periodically and report if any changes have occurred. I setup a basic demonstration on a private fork [here](https://github.com/cjyetman/countrycode).

The action file is here: https://github.com/cjyetman/countrycode/blob/master/.github/workflows/scraper_test.yml

The scraper tester script is here: https://github.com/cjyetman/countrycode/blob/master/dictionary/test_scrapers.R

and the first results from an auto run are here (you can see the relevant results under the "run Scraper test" section): https://github.com/cjyetman/countrycode/commit/9b4b8766d36783d2967127941bda0c1ad310d66a/checks?check_suite_id=313706325

This example runs automatically every 3 months and also any time a push is committed to master, but obviously that could be changed to whatever is appropriate. Additionally, this could probably get to the point of auto-creating an issue whenever it detects a change, or even create a PR with the changes in the long run.

@vincentarelbundock do you think this is something worth investing time in?
Any interest in wrapping this in?

```
closest_field = function(x){
  if(length(x) > length(unique(x))) stop('x must be a vector of unique values')
  similarity = sapply(codelist, function(field){ 100 * sum(x %in% field) / length(x) })
  similarity = data.frame(field = names(similarity), similarity = as.vector(similarity), stringsAsFactors=FALSE)
  similarity = similarity[order(similarity$similarity, decreasing = TRUE),]
  if(suppressWarnings(suppressMessages(!require(tibble)))) return(similarity)
  return(as_tibble(similarity))
}

closest_field(c('CM','AL','PA','MK','HA','CO','ZI','KU','TH','FI'))
#> # A tibble: 730 x 2
#>    field         similarity
#>    <chr>              <dbl>
#>  1 fips                 100
#>  2 ecb                   70
#>  3 eurostat              70
#>  4 genc2c                70
#>  5 iso2c                 70
#>  6 wb_api2c              70
#>  7 cldr.name.bem         70
#>  8 cldr.name.bo          70
#>  9 cldr.name.cu          70
#> 10 cldr.name.gv          70
#> # … with 720 more rows

closest_field(c('Ivory Coast','Guinea','Iran','Russia','North Korea'))
#> # A tibble: 730 x 2
#>    field              similarity
#>    <chr>                   <dbl>
#>  1 cow.name                  100
#>  2 vdem.name                 100
#>  3 cldr.variant.en           100
#>  4 cldr.variant.en_gb        100
#>  5 country.name.en            80
#>  6 eurostat.name              80
#>  7 p4.name                    80
#>  8 wvs.name                   80
#>  9 cldr.name.en               80
#> 10 cldr.name.en_gb            80
#> # … with 720 more rows
```
in line 276 of  [data_static.csv](https://github.com/vincentarelbundock/countrycode/blob/master/dictionary/data_static.csv#L276)...

`country.name.de` =  [blank]
`country.name.de.regex` = `ASIA`

for comparison...
`country.name.en` = `Republic of Vietnam`
`country.name.en.regex` = `(?!social).*republic.of.viet.?nam|south.viet.?nam|viet.?nam.south`

e.g.
```r
countrycode("United States of America", "country.name", "country.name.de")
# [1] "Vereinigte Staaten"
> countrycode("Vietnam", "country.name", "country.name.de")
# [1] "Vietnam"
> countrycode("Republic of Vietnam", "country.name", "country.name.de")
# [1] NA
# Warning message:
#   In countrycode("Republic of Vietnam", "country.name", "country.name.de") :
#   Some values were not matched unambiguously: Republic of Vietnam
```

Tests specifically for "Vietnam" and "Republic of Vietnam" and their interaction are probably needed, in multiple languages.
The current regex for Vietnam causes a false positive on "Republic of Vietnam" if it is preceded by any character, including whitespace.

`^(?!south)(?!republic).*viet.?nam(?!.*south)|socialist.republic.of.viet.?nam|north.viet.?nam|viet.?nam.north`

e.g.
```r
countrycode(" Republic of Vietnam", 'country.name', 'country.name')
# [1] NA
# Warning messages:
#   1: In countrycode(" Republic of Vietnam", "country.name", "country.name") :
#   Some values were not matched unambiguously:  Republic of Vietnam
# 
# 2: In countrycode(" Republic of Vietnam", "country.name", "country.name") :
#   Some strings were matched more than once, and therefore set to <NA> in the result:  Republic of Vietnam,Vietnam,Republic of Vietnam
```

This causes failures on build when the tests for recognizing a country name within a sentence run because the sentence "The governement of Republic of Vietnam was reelected." matches "Vietnam" and "Republic of Vietnam".

e.g.

```r
countrycode("The governement of Republic of Vietnam was reelected.", 'country.name', 'country.name')
# [1] NA
# Warning messages:
#   1: In countrycode("The governement of Republic of Vietnam was reelected.",  :
#                       Some values were not matched unambiguously: The governement of Republic of Vietnam was reelected.
#                     
#                     2: In countrycode("The governement of Republic of Vietnam was reelected.",  :
#                                         Some strings were matched more than once, and therefore set to <NA> in the result: The governement of Republic of Vietnam was reelected.,Vietnam,Republic of Vietnam
```
Might be useful to check or enrich the package?

https://github.com/lukes/ISO-3166-Countries-with-Regional-Codes

> ISO 3166-1 country lists merged with their UN Geoscheme regional codes in ready-to-use JSON, XML, CSV data sets

Please add Eswatini as an alternate country.name for Swaziland. Thanks! :)
``` r
library(countrycode)
packageVersion("countrycode")
#> [1] '1.1.0'

countrycode("Somalia", "country.name", "wb")
#> Warning in countrycode("Somalia", "country.name", "wb"): Some values were not matched unambiguously: Somalia
#> [1] NA
```

though the [source file](http://databank.worldbank.org/data/download/site-content/CLASS.xls) used by [get_world_bank.R](https://github.com/vincentarelbundock/countrycode/blob/master/dictionary/get_world_bank.R) does contain code "SOM" for Somalia, I don't see any manual adjustments to remove it, and I don't see any previous issues here that mention Somalia.

(reported on [Stack Overflow here](https://stackoverflow.com/questions/54601932/countrycode-package-not-recognizing-som-as-iso3-character-code-for-somalia-r))
Is there any advantage to having complicated regexes versus a list of alterations of known variations, other than brevity?

For example, U.S. Virgin Islands...
"^(?=.*\\bu\\.?\\s?s).*virgin|^(?=.*states).*virgin" 
versus
"United States Virgin Islands|US Virgin Islands|U.S. Virgin Islands|Virgin Islands US|Virgin Islands U.S.|Virgin Islands, US|Virgin Islands, U.S."

which could easily be generated using a list such as our [country_name_known_variations.json](https://github.com/vincentarelbundock/countrycode/blob/master/tests/testthat/country_name_known_variations.json)
```r
library(jsonlite)
library(countrycode)
country_list <- fromJSON("tests/testthat/country_name_known_variations.json")
paste(country_list$`U.S. Virgin Islands`, collapse = "|")
# [1] "United States Virgin Islands|US Virgin Islands|U.S. Virgin Islands|Virgin Islands US|Virgin Islands U.S.|Virgin Islands, US|Virgin Islands, U.S."
```

I feel like it would be easier to maintain, easier to add new variations, less error prone, and honestly I would be less hesitant to mess with them. I'd even be motivated to build a list of all known variations for all countries based on all of our current code sets, plus a bunch of commonly used country level datasets, which would likely cover a very high percentage of possibilities.

The only minor difficulty I see would be adding exclusions, like preventing "Germany" from matching "East Germany", but that seems easy enough compared to managing complicated regexes for everything.

@vincentarelbundock do you see any major major problems with that (other than the fact that we currently use regex as the unique key for everything)? any thoughts on that?
in current master...

```r
countrycode('XXX', 'country.name', 'cown', nomatch = 999)
# [1] NA
# Warning messages:
# 1: In countrycode("XXX", "country.name", "cown", nomatch = 999) :
#   The argument `nomatch` must be NULL, NA, or of the same class
#                 as the destination vector. Filling-in bad matches with NA instead.
# 2: In countrycode("XXX", "country.name", "cown", nomatch = 999) :
#   Some values were not matched unambiguously: XXX
```