Currently the `.lintr` configuration file is read with `read.dcf()`, after which an `eval(parse(text = ..))` command is applied on each field of the result. This use of `eval(parse(text = ..))` seems to me not safe enough, in case I use a `.lintr` provided by someone else. Could this be avoided?
**Disclaimer**
I have posted this question first on [SO](https://stackoverflow.com/questions/59751617/object-usage-linter-marks-wrong-line-with-no-visible-binding-message) but I guess it is a bug and hence it should be better posted here.

**Problem**
Consider the following code snippet (comments at the end indicate line numbers and are **not** part of the problem):

```r
set.seed(1)                                   # 1
my_dat1 <- data.frame(x = runif(100, 1, 10),  # 2
                      w = runif(100, 1, 10))  # 3
                                              # 4
my_dat1$y_orig <- my_dat1$x * my_dat1$w       # 5
my_dat1$y_obs  <- my_dat1$y_orig + rnorm(100) # 6
                                              # 7
my_stat <- function(data, orig_mod) {         # 8
  new_mod <- update(orig_mod, data = data)    # 9
  r <- residuals(new_mod)                     #10
  f <- fitted(new_mod)                        #11
  l <- lowess(f, r)                           #12
  res <- c(l$x, l$y)                          #13
  res                                         #14
}                                             #15
```
When I `lint` this file via  `lintr:::addin_lint()` I get the following strange error:


> ```List of 2
> $ test.R:List of 8
>  ..$ filename     : chr "test.R
>  ..$ line_number  : int 6
>  ..$ column_number: int 14
>  ..$ type         : chr "warning"
>  ..$ message      : chr "no visible binding for global variable ‘x’"
>  ..$ line         : chr "  res <- c(l$x, l$y)                          #13"
>  ..$ ranges       :List of 1
>  .. ..$ : int [1:2] 14 14
>  ..$ linter       : chr "object_usage_linter"
>  ..- attr(*, "class")= chr "lint"
> $ test.R:List of 8
>  ..$ filename     : chr "test.R"
>  ..$ line_number  : int 6
>  ..$ column_number: int 19
>  ..$ type         : chr "warning"
>  ..$ message      : chr "no visible binding for global variable ‘y’"
>  ..$ line         : chr "  res <- c(l$x, l$y)                          #13"
>  ..$ ranges       :List of 1
>  .. ..$ : int [1:2] 19 19
>  ..$ linter       : chr "object_usage_linter"
>  ..- attr(*, "class")= chr "lint"
> - attr(*, "class")= chr "lints"
>```

However, if I **remove** lines `#5` and `#6` I do not have the error any more:

```r
set.seed(1)                                   # 1
my_dat1 <- data.frame(x = runif(100, 1, 10),  # 2
                      w = runif(100, 1, 10))  # 3
                                              # 4
                                              # 7
my_stat <- function(data, orig_mod) {         # 8
  new_mod <- update(orig_mod, data = data)    # 9
  r <- residuals(new_mod)                     #10
  f <- fitted(new_mod)                        #11
  l <- lowess(f, r)                           #12
  res <- c(l$x, l$y)                          #13
  res                                         #14
}                                             #15
```

There is **no** error when linting this file. 

The wrong line number maybe solved in #440 but I am still at loss why the error appears in the first place and why it goes away if the lines are removed.

**Session Info**

> ```
> R version 3.5.0 (2018-04-23)
> Platform: x86_64-w64-mingw32/x64 (64-bit)
> Running under: Windows 10 x64 (build 18363)
> 
> Matrix products: default
> 
> locale:
> [1] LC_COLLATE=German_Germany.1252  LC_CTYPE=German_Germany.1252   
> [3] LC_MONETARY=German_Germany.1252 LC_NUMERIC=C                   
> [5] LC_TIME=German_Germany.1252    
> 
> attached base packages:
> [1] stats     graphics  grDevices utils     datasets  methods   base     
> 
> other attached packages:
> [1] lintr_2.0.0
> 
> loaded via a namespace (and not attached):
>  [1] Rcpp_1.0.3       ps_1.3.0         crayon_1.3.4     withr_2.1.2     
>  [5] rprojroot_1.3-2  assertthat_0.2.1 R6_2.4.1         backports_1.1.5 
>  [9] magrittr_1.5     lazyeval_0.2.2   remotes_2.1.0    callr_3.4.0     
> [13] rex_1.1.2        xml2_1.2.2       cyclocomp_1.1.0  desc_1.2.0      
> [17] tools_3.5.0      compiler_3.5.0   processx_3.4.1  
> ```
> 
lintr bot gave me some useful linting comments in a PR:
https://github.com/greta-dev/greta/pull/327#commitcomment-36719618

then I pushed a change fixing the issues:
https://github.com/greta-dev/greta/pull/327/commits/85e9a0798da53b28174a392e0c88ed865223903e

and lintr bot commented again, but with the original (now incorrect) comments again:
https://github.com/greta-dev/greta/pull/327#issuecomment-572368115

This is obviously only a minor thing, since the local lintr run tells me it's all good. Just thought I'd flag it in case there is an easy fix.
`paren_brace_linter` flags the "){" within regex definition below:

```
#' Checks if a file has a .tar or .tar.bz2 extension
#'
#' @noRd
.is_tar_file <- function(x) {
  grepl(pattern = ".*\\.tar(\\.bz2){0,1}", x)
}
```

Should `paren_brace_linter` be made more strict - so that it doesn't consider strings?
fix #438 - pin exclusions relative to dir/pkg in lint_[package|dir]

When calling lint_package(path), any excluded-files specified in a
.lintr file were originally handled relative to the working directory.
This meant
~~~
lint_package("myPackage") # called from the parent of myPackage
    
lint_package(".") # called from inside myPackage
~~~
    
gave different results for excluded files (the former including files
that were supposed to be excluded).

3) Ensure `read_settings` handles exclusions when passed a directory

`read_settings` was modified: when it is passed a directory, any
excluded files that are specified in a user config are now specified
relative to the directory (eg, the package root), rather relative to the
current working directory

2) Added 'dir_prefix' argument to normalize_exclusions
    
`normalize_exclusions` is used to specify filepaths of the excluded
files; When running lint_dir or lint_package, the directory /
package-root is now passed to normalize_exclusions & excluded files are
pinned relative to this.

1) Added a test to ensure lint_package(path) handles excluded files
    
A couple of tests were added. These set up a temporary package with
lint-containing source files, run lint_package() from outside and
inside the temp package (+/- exclusions).
    
Exclusions of the form list(filename = lines_to_omit) and list(filename)
are both included in the test.

Hi, I recently started using lintr and it's pretty great. Thank you to everyone involved!

I bumped into an issue related with the `exclusions` extracted from `.lintr` files. It seems that the lint report depends on the current working directory of the R console.

Running the following script while the working directory was in the root of the project (`lintr/`)
```R
> lint_package(".")
```
does not show `inst/example/bad.R` in the report (since it's path is in `.lintr`). Then, if I run
```R
> setwd("..")
> lint_package("lintr")
```
the file `inst/example/bad.R` shows in the report.

There is a similar issue with `lint()`. I added a file `lintr/inst/example/.lintr` with the content
```
exclusions: list("bad.R")
```
Then, I ran the commands
```R
> setwd("lintr/inst/example")
> lint("bad.R")
```
and `bad.R` did not show up in the report (as expected). However, that was not the case when I ran
```R
> setwd("..")
> lint("example/bad.R")
```

Furthermore, when run directly from the console, it seems that `lint_dir()` always ignores the exclusions in `.lintr`.

Can you clarify if any of these contrasting behaviors are expected, or what the expected behaviors should be?

Thank you
João
I noticed that in RStudio a syntax error in a function name (say priint instead of print) will raise a "No symbol named priint in scope" warning.  I would have to have the same warning pop un in emacs (where I am using ess & flymake), but I cannot figure out which linter provides it.  With the default linters in ess & flymake, a syntax error like this does not get flagged.
Thanks for the help!
Linting the following code:
```
square <- function(x) {
  return (x * x)
}
```
results in:
```
R/test.R:2:10: style: Remove spaces before the left parenthesis in a function call.
  return (x * x)
         ^
```
However, "return" is not a function call. To be consistent with "for" and "if", a space should be allowed (maybe enforced?) before the parenthesis. This should be fixed in `function_left_parentheses`. Also, for consistency with "for" and "if", there should be a style warning if there is no space between return and a left parenthesis (maybe in `spaces_left_parentheses_linter`).
R tidyverse style guide recommends: 
x <- 5

This implicitly recommends a space after the "<-" operator, because without this space, the expression is ambiguous and very prone to bugs, eg does "x<-5" mean "x <- 5" (assignment) or "x < -5" (inequality test)

Recommends a new linter to check for the existence of 1 space character after an "<-" operator. 
Thanks for developing this linter, Jim.  One of the first things I wanted to do was figure out how to run it from the command line.  I'm used to running others linters like `pylint` and `shellcheck` from the command line.

I want to echo the suggestion of @greggles in https://github.com/jimhester/lintr/issues/278#issuecomment-412558489 to document how to do this.

As a novice R programmer, I knew about `Rscript` but did not know how to run lintr from the command line until I found that issue.

I ended up adding this to my .bash_aliases:
`alias lintr="Rscript -e 'lintr::lint(commandArgs(trailingOnly = TRUE))'"`