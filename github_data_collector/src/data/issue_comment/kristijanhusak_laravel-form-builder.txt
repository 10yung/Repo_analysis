Hi Kris,

I have found that when adding a multi-checkbox 'choice' to a Form class it fails to bind when there are multiple values. Only plain string data parses out correctly.

for example, I have in a Kris\LaravelFormBuilder\Form extension class:

` $this->add('history', 'choice', [
		    'choices' => ['heroin' => 'Heroin',
		                  'alcohol' => 'Alcohol',
		                  'cocaine' => 'Cocaine / Crack'],
            'expanded' => true,
	   		'multiple' => true
			])`

This results in a string ` ["heroin","alcohol", "cocaine"]` (a simple json string) saved to the database when all boxes are checked. 

However, any multiple selected fields do not properly bind/display when the data from the Eloquent Model is read back into the form using the 'mode' option.

To get around this problem, I had to resort to pulling any multi-select items out into the form controller as an addendum using "addAfter" so I could hard code the 'selected' option processing the string with json_decode.

  ` $form->addAfter('drug_types', 'history', 'choice', [
            'choices' => ['heroin' => 'Heroin',
                          'alcohol' => 'Alcohol',
                          'cocaine' => 'Cocaine / Crack'],
            'selected' => json_decode($model->history),
            'expanded' => true,
            'multiple' => true
            ]);`

Should the parsing of multi-selected value work "automatically" as well in the binding process? Is there something I missed in saving the data?

Thanks!





`\Kris\LaravelFormBuilder\FormHelper::mergeOptions` merges options with `rules` option behavior incorrectly. It should replace the rules entirely or just appends new rules. 
The current strategy may cause the merged rules duplicated, and has no way to "replace" the default rules entirely.
Can I create a "[form row](https://getbootstrap.com/docs/4.4/components/forms/#form-row)" with this package?

Anyway, the following code works for me.
Maybe this type of field can be added in the build-in ones? 

```php
<?php namespace App\Forms\Fields;

use Kris\LaravelFormBuilder\Fields\ParentType;

class FieldsType extends ParentType
{
    protected function getTemplate()
    {
        return 'form.fields.fields';
    }

    /**
     * @return mixed|void
     * @throws \Exception
     */
    protected function createChildren()
    {
        $this->children = [];
        $fields = $this->getOption('fields');
        $requiredOptions = ['type', 'name'];

        foreach ($fields as $field) {
            foreach ($requiredOptions as $requiredOption) {
                if (empty($field[$requiredOption])) {
                    throw new \Exception("Fields field [{$this->name}] requires [{$requiredOption}] option");
                }
            }

            $type = $field['type'];
            $name = $field['name'];
            $options = $field['options'] ?? [];
            $fieldType = $this->formHelper->getFieldType($type);
            $parentName = $this->getParent()->getName();
            $field = new $fieldType($parentName ? "{$parentName}[{$name}]" : $name, $type, $this->parent, $options);
            $this->children[] = $field;
        }
    }

    /**
     * @inheritdoc
     */
    public function getAllAttributes()
    {
        return $this->formHelper->mergeAttributes($this->children);
    }

    /**
     * @inheritdoc
     */
    public function getValidationRules()
    {
        return $this->formHelper->mergeFieldsRules($this->children);
    }
}
```


`resources/views/form/fields/fields.blade.php`

```blade
@extends('form.fields.base-layout')

@section('field')
    <div class="form-row">
        @foreach((array)$options['children'] as $child)
            {!! $child->render() !!}
        @endforeach
    </div>
@overwrite
```

`resources/views/form/fields/base-layout.blade.php`

```blade
@if($showLabel || $showField)
    @if($options['wrapper'] !== false)
        <div {!! $options['wrapperAttrs'] !!}>
    @endif

    @if ($showLabel && $options['label'] !== false && $options['label_show'])
        {!! Form::customLabel($name, $options['label'], $options['label_attr']) !!}
    @endif

    @if ($showField)
        @yield('field')
        @include('form.help_block')
        @include('form.errors')
        @yield('field_bottom')
    @endif

    @if($options['wrapper'] !== false)
        </div>
    @endif
@endif
```

### Usage
```php
<?php

namespace App\Forms;

class MyForm extends Form
{
    public function buildForm()
    {
        $this
            ->add('date', 'fields', [
                'label' => 'DATE',
                'fields' => [
                    [
                        'type' => 'date',
                        'name' => 'start_date',
                        'options' => [
                            'label' => false,
                            'rules' => 'required|date|max:255',
                        ],
                    ],
                    [
                        'type' => 'date',
                        'name' => 'end_date',
                        'rules' => 'date|max:255',
                        'options' => [
                            'label' => false,
                            'rules' => 'date|max:255',
                        ],
                    ]
                ],
            ]);
    }
}
```
Calling `\Kris\LaravelFormBuilder\Form::disableFields()` disables all the fields, but there is no way to tell if a form is completely disabled after the fact.

This would be useful to us because we re-use the forms on our "show" pages by disabling them. The "edit", "create" and "show" pages all share the same partials. Sometimes these disabled forms need some custom display logic only on the show page.
Although Travis CI works fine too, since this is hosted on GitHub and since you're going to start on a V2, I made the guess to add GitHub Actions support to the repo.

Currently test PHP 5.6 - 7.4, with releases from source (`--prefer-source`) and from releases (`--prefer-dist`), since users are more likely to get assets from the latter.

There's an option to add Windows and Mac OS to the matrix, but it'd result in 18 jobs, which seems  a bit too enthusiastic.
I'm trying to render a checkbox and it's label separately using the `form_label` and `form_widget` helper methods. However the label is not rendering because of the way the checkbox template is doing it's checks on the passed in booleans.

How should this be resolved? Create a custom template? If possible I would rather not.

Thanks in advance. 
I am in the process of preparing a new branch for laravel-form-builder which will be specific to Laravel 6.x moving forward.  

We will be maintaining the current 1.2 branch for issues related to Laravel <= 5.8, but moving forward, all new features will be applied to 2.x branch.

If you have issues related to Laravel 6, please continue to report them here, but know that they will only be applied to laravel-form-builder v2 branch

If you have specific questions or comments, please let us know.

@rudiedirkx @kristijanhusak 
```
Facade\Ignition\Exceptions\ViewException
Method Illuminate\Translation\Translator::trans does not exist.
```

inside of RulesParser.php
```php   
    protected function getTitle($rule, $params = array())
    {
        $params['attribute'] = $this->field->getOption('label');

        return $this->formHelper->getTranslator()->trans('validation.' . $rule, $params);
    }
```

change ->trans to ->get:

```php    
    protected function getTitle($rule, $params = array())
    {
        $params['attribute'] = $this->field->getOption('label');

        return $this->formHelper->getTranslator()->get('validation.' . $rule, $params);
    }
Hello,

I have a question that is probably easy to solve, but I can not do it.
When validating the form, how can I add the field "slug" in create ?

Thank you in advance !

```
        $form = $this->form(ArticleAddForm::class);
        if (!$form->isValid()) {
            return redirect()->back()->withErrors($form->getErrors())->withInput();
        }

        $slug = str_slug(e($request->input('nom')), '-');

        Article::create($form->getFieldValues());
```



I'm using latest Laravel and this package (fresh install).

```php
<?php

namespace App\Forms;

use Kris\LaravelFormBuilder\Form;
use Kris\LaravelFormBuilder\Traits\ValidatesWhenResolved;

class SongForm extends Form
{
    use ValidatesWhenResolved;

    public function buildForm()
    {
        $this
            ->add('ds', 'date', [
                'rules' => 'required',
            ]);
        $this
            ->add('submit', 'submit', ['label' => 'Save form'])
            ->add('clear', 'reset', ['label' => 'Clear form']);
    }
}
```

```php
class TestController extends Controller
{
    use FormBuilderTrait;

    public function index(Request $request)
    {
        $form = $this->form(SongForm::class, [
            'method' => 'POST',
            'url' => route('payment.test')
        ]);

        if ($form->isValid()) {
            dd($form->getFieldValues());
        }

        return view('home', [
            'form' => $form
        ]);
    }
}
```

When all fields are valid I get message `Field [ds] already exists in the form App\Forms\SongForm`. If I remove trait ValidatesWhenResolved then I get all the data.