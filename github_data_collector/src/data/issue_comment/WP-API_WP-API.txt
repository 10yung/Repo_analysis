
I am trying to send data to remote url using the wp_remote_post. I did not set up any permission call back for the code but i get a 403 forbidden error when i click to send form with data to remote url.This is my code;


function register_custom_route(){ register_rest_route( 'silentblast-dashboard/v1', '/getsetting/', array(

array(

'methods' => 'GET',
'callback' => 'retrieve_settings_data',

),

array(
'methods' => 'POST',
'callback' => 'update_settings_data',

)
));

}

function update_settings_data( $request ){

$out = update_option( 'buddy_settings', $request );

$out = get_option( 'buddy_settings' );

return $out ;

}

$remote_url = 'http://localhost/wordpress/wp-json/silentblast-     dashboard/v1/getsetting/';

$posts = (array) $posts;

$args = array (


        'method' => 'POST',
        'timeout'     => 45,
        'redirection' => 5,
        'httpversion' => '1.0',
        'blocking'    => true,
        'body'        => $posts,
        'cookies'     => array ()

    );

$request =  wp_remote_post( $remote_url, $args );
if ( is_wp_error( $request ) ) { $error_message = $request->get_error_message(); echo sprintf( 'Something went wrong: %1s

', $error_message ); }
else {

 //echo 'Response:<pre>';
 print_r($request);
 echo '</pre>';

}
Why do i get a 403 error when posting data to remote url with code below;

$remote_url = 'http://localhost/wordpress/wp-json/silentblast-dashboard/v1/getsetting/';

$response =  wp_remote_get( $url );

$posts = wp_remote_retrieve_body( $response );

$posts = json_decode($posts);

$posts = (array) $posts;

$args = array (

'method' => 'POST',
'timeout'     => 45,
'redirection' => 5,
'httpversion' => '1.0',
'blocking'    => true,
'body'        => $posts,
'cookies'     => array ()

);



$request =  wp_remote_post( $remote_url, $args );
if ( is_wp_error( $request ) ) { $error_message = $request->get_error_message(); echo sprintf( 'Something went wrong: %1s

', $error_message ); }
else {

//echo 'Response:<pre>';
print_r($request);
echo '</pre>';

}
This plugin appears to duplicate core functionality.  Maybe it should only include endpoints and functionality that isn't in core yet. 

## Object / Arrays in Meta

Currently, meta for posts, users, terms and comments support scalar values in the registered meta
keys. That's booleans, strings and numbers. For comparison, the Custom Fields meta box only allows
string values.

The response format of meta allows for arrays / objects as values, however these types are currently
not accepted in the PHP API via `register_meta`. There is a clear path forward to allow developers to register meta keys in the REST API using arrays and objects, however as the underlaying `register_meta` API doesn't support this either yet, it's my recommendation that this wait until a future release.
## Object / Arrays in Settings

Currently, settings support scalar values, this is primarily to keep strict data types when
performing validation / sanitization on values to make them match the Schema. Also, all of the WordPress Admin Settings are scalar values.

The WordPress.com API has only one key that is not a scalar, `jetpack_protect_whitelist` which
accepts an array of IP Addresses, which has specific sanitizing. There's no support for developers
to add settings, and therefore doesn't need to solve this issue generically.

Like meta, the format in the response would allow objects and arrays, it's instead a limitation of the PHP API via `register_setting` to support object and arrays. Again, this is a clear path forward to add this without breaking any compatibility,  it's my recommendation that this wait until a future release.

Add checks for these fields exceeding the DB col size and tests for each
field:
- comment_author
- comment_author_email
- comment_author_url
- comment_content

See #2785

Currently we handle registering meta even if your register the type as
anything other than `boolean` `number` and `string`, however we don't
currently have great ways to handle non-scaler meta. For now, let's
whitelist these types and throw a `doing_it_wrong` if meta is registered
with an invalid type.

Based on discussion following #2765:

Registering a meta field defines the data type that field should contain, but there are ways outside of the API's purview that a post could come to hold an invalid value in that meta field, such as a serialized object, which does not match the registered type. If the API tries to update the value of a meta object and the API discovers that an invalid type of data is being stored in that field, it should return an error rather than replacing the value of that field.

We need `load_plugin_textdomain` to recognize text domain for translation editor like Poedit or GlotPress.

Currently when you update a meta value, it checks  `current_user_can('edit_post_meta')` regardless of the actual object type. It needs to use object type dependent capability checks. These aren't in core yet but there's a ticket here:
https://core.trac.wordpress.org/ticket/38284

A workaround for the time being would be to check `edit_{$object_type}` I suppose.

Currently we handle registering meta even if your register the type as anything other than `boolean` `number` and `string`, however we don't currently have great ways to handle non-scaler meta. For now, let's whitelist these types and throw a `doing_it_wrong` if meta is registered with an invalid type.

We should match WordPress Core's sanitization function when adding/updating the title of a Post.  WordPress Core uses [`wp_filter_kses()`](https://core.trac.wordpress.org/browser/trunk/src/wp-includes/kses.php#L1625) but we use [`wp_filter_post_kses()`](https://github.com/WP-API/WP-API/blob/develop/lib/endpoints/class-wp-rest-posts-controller.php#L804).  
