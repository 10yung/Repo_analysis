
You will need to add your netlify auth token to your GitHub secrets as `NETLIFY_AUTH_TOKEN`, but after that this should work.
Thank you very much for the text. It was very helpful for getting my head around the reactive approach of Shiny.
small typo fix as I read the book
typo
Requesting pull request for typos
Requesting pull request for simple titlePanel added to sales Dashboard
Select a geom; conditional panel includes extra controls.
The original code doesn't 'do' anything meaningful.

Consider expanding the code a little, like this (added server and shinyApp at bottom of function) to make the function 'theme_demo' work across the example themes:

```
theme_demo  <- function(theme) {
  ui <- fluidPage(
    theme = shinythemes::shinytheme(theme),
    sidebarLayout(
      sidebarPanel(
        textInput("txt", "Text input:", "text here"),
        sliderInput("slider", "Slider input:", 1, 100, 30)
      ),
      mainPanel(
        h1("Header 1"),
        h2("Header 2"),
        p("Some text")
      )
    )
  )
  server <- function(input, output) {}
  shinyApp(ui = ui, server = server)
}



theme_demo("darkly")
theme_demo("flatly")
theme_demo("sandstone")
theme_demo("united")
```
Or turn it into an exercise...
Hi,

A small suggestion of a package that I often use to provide user feedback in a shiny app.

https://github.com/andrewsali/shinycssloaders

It provides a very simple function to add a spinner to a plot or table

       withSpinner(plotOutput("my_plot")) 
 
This compliments the wonderful Waiter/Waitress package that is already mentioned as it is added via the ui rather than the server function.

The use of spinners has provided the best UX improvement in Shiny apps that I have built.  

Cheers,

Iain
