Add changelog entries for:
- Update to more compatible syntax & protect stack [GH #217 by @jmartin-r7]
- Unlock the GVL when calculating hashes / salts [GH #124 by @tenderlove]

Static code check findings are (severity: slight/cosmetic):
[crypt_blowfish.c:390]: (style) The scope of the variable 'tmp' can be reduced.
[crypt_blowfish.c:390]: (style) The scope of the variable 'c1' can be reduced.
[crypt_blowfish.c:414]: (style) The scope of the variable 'c1' can be reduced.
[crypt_blowfish.c:414]: (style) The scope of the variable 'c2' can be reduced.
[crypt_blowfish.c:445]: (style) The scope of the variable 'tmp' can be reduced.
crypt_blowfish.c:364:31: style: Use pointers to const when referring to string literals [cert-STR05-C]
crypt_gensalt.c:31:28: style: Use pointers to const when referring to string literals [cert-STR05-C]
crypt_gensalt.h:20 : style: const


Re https://github.com/codahale/bcrypt-ruby/pull/74#issuecomment-492277126.

Hello, this happens when we try to install diaspora-installer on armhf platform.

```
/var/cache/diaspora-installer/diaspora-0.7.6.0.tar.gz: OK
Extracting files...
Copying files to /usr/share/diaspora...
diaspora archive to copy: diaspora-0.7.6.0
Copying source tarball to /var/lib/diaspora/public...
Setting up environment varibales...
Using /etc/diaspora.conf...
export DB_NAME=diaspora_production
Using system bundler...
Installing gems with rubygems ...
Fetching gem metadata from https://rails-assets.org/....
Fetching gem metadata from https://rails-assets.org/..
Fetching gem metadata from https://rubygems.org/..........
Fetching gem metadata from https://rails-assets.org/..
Fetching gem metadata from https://rails-assets.org/...
Fetching gem metadata from https://rubygems.org/...
Fetching gem metadata from https://rails-assets.org/..
Fetching gem metadata from https://rails-assets.org/...
Fetching gem metadata from https://rubygems.org/...
Resolving dependencies................................................................................................
Using rake 12.3.2
Using concurrent-ruby 1.1.5
Using i18n 1.6.0
Using minitest 5.11.3
Using thread_safe 0.3.6
Using tzinfo 1.2.5
Using activesupport 5.1.6
Using builder 3.2.3
Using erubi 1.8.0
Using mini_portile2 2.3.0
Using nokogiri 1.8.2
Using rails-dom-testing 2.0.3
Using crass 1.0.4
Using loofah 2.2.3
Using rails-html-sanitizer 1.0.4
Using actionview 5.1.6
Using rack 2.0.7
Using rack-test 1.1.0
Using actionpack 5.1.6
Using nio4r 2.3.1
Using websocket-extensions 0.1.3
Using websocket-driver 0.6.5
Using actioncable 5.1.6
Using globalid 0.4.2
Using activejob 5.1.6
Using mini_mime 1.0.1
Using mail 2.7.1
Using actionmailer 5.1.6
Using activemodel 5.1.6
Using active_model_serializers 0.9.7
Using arel 8.0.0
Using activerecord 5.1.6
Using activerecord-import 0.22.0
Using acts-as-taggable-on 5.0.0
Using acts_as_api 1.0.1
Using public_suffix 3.1.0
Using addressable 2.5.2
Using aes_key_wrap 1.0.1
Using excon 0.64.0
Using formatador 0.2.5
Using fog-core 1.45.0
Using mime-types-data 3.2019.0331
Using mime-types 3.2.2
Using unf_ext 0.0.7.6
Using unf 0.1.4
Using asset_sync 2.4.0
Using attr_required 1.0.1
Using execjs 2.7.0
Using autoprefixer-rails 8.2.0
[32mFetching bcrypt 3.1.13[0m
[32mInstalling bcrypt 3.1.13 with native extensions[0m
[31mGem::Ext::BuildError: ERROR: Failed to build gem native extension.
[0m
current directory:
/var/lib/diaspora/vendor/bundle/ruby/2.5.0/gems/bcrypt-3.1.13/ext/mri
/usr/bin/ruby2.5 -r ./siteconf20190609-16931-n9gtms.rb extconf.rb
creating Makefile

current directory:
/var/lib/diaspora/vendor/bundle/ruby/2.5.0/gems/bcrypt-3.1.13/ext/mri
make "DESTDIR=" clean

current directory:
/var/lib/diaspora/vendor/bundle/ruby/2.5.0/gems/bcrypt-3.1.13/ext/mri
make "DESTDIR="
compiling bcrypt_ext.c
compiling crypt_blowfish.c
compiling crypt_gensalt.c
compiling wrapper.c
gcc  -D__SKIP_GNU -Wdate-time -D_FORTIFY_SOURCE=2 -D_FILE_OFFSET_BITS=64   -c -o
x86.o x86.S
x86.S: Assembler messages:
x86.S:202: Error: junk at end of line, first unrecognized character is `,'
make: *** [<builtin>: x86.o] Error 1

make failed, exit code 2

Gem files will remain installed in
/usr/share/diaspora/vendor/bundle/ruby/2.5.0/gems/bcrypt-3.1.13 for inspection.
Results logged to
/usr/share/diaspora/vendor/bundle/ruby/2.5.0/extensions/arm-linux/2.5.0/bcrypt-3.1.13/gem_make.out

[0m[31mAn error occurred while installing bcrypt (3.1.13), and Bundler cannot
continue.
Make sure that `gem install bcrypt -v '3.1.13'` succeeds before bundling.[0m

In Gemfile:
  devise_lastseenable was resolved to 0.0.6, which depends on
    devise was resolved to 4.4.3, which depends on
      bcrypt[0m
dpkg: error processing package diaspora-installer (--configure):
 installed diaspora-installer package post-installation script subprocess returned error exit status 5
dpkg: dependency problems prevent configuration of autopkgtest-satdep:
 autopkgtest-satdep depends on diaspora-installer; however:
  Package diaspora-installer is not configured yet.
```

@tjschuck since you added that file in 4b97854ad663cf56b8f7c6924330fbf322cbd327, can you please make it customizable in some way, or exclude it in this arch from build artifacts? thanks!
It really could just be coincidence, but I've had a handful of users over the last couple days since running 3.1.13 in production swearing up and down they use only one password and they definitely haven't forgotten it. In all the cases I've tested 3.1.13 produces the same results as 3.1.11 that I was running before on my JRuby server, but in https://github.com/codahale/bcrypt-ruby/pull/182 @fonica says

> updated lib/bcrypt/engine.rb to pass the secret as java bytes; it seems jruby messes up the encoding for certain bytes if the secret is passed as a string.

Could this result in the same password resulting in different hashes in 3.1.11 and 3.1.13? If so, is it just in extreme edge cases or is this something that will happen for sure?
This PR changes a version specifier in the gemspec to **avoid warning output** when building the gem.

This is a trivial dusting change, not a blocker for anything.
There is a description of 2.6 in .travis.yml, but README.md statesAny 2.0 - 2.5 Ruby on a .... I think that 2.6 is also supported, but it seems that it would be better to include both 2.6 and support in README.md.
We probably shouldn't just be testing against `jruby-head`.

Per [JRuby's roadmap](https://github.com/jruby/jruby/wiki/Roadmap), 1.7 is EOL'd and was 1.9.3 compatible, which [we've also now EOL'd](https://github.com/codahale/bcrypt-ruby/pull/185), so not including `jruby-1.7`.

JRuby 9.0, 9.1, and 9.2 are intended to be MRI 2.2, 2.3, and 2.5 compatible, which we do support, so including them here.

JRuby 9.0 seems to be non-trivially failing, which is curious!  Will look into that before merging this â€”Â I think there have been a handful of issues here that jibe with that, so I'll investigate later.  Just getting this PR open in the meantime!
Hi, thank you for working hard to bring BCrypt to Ruby! I apologize if this is not the appropriate place for suggestions. However, is there any way to turn off the hashing so that the cost is truly zero? This is not meant for production of course, but for spec performance improvements. I understand the algorithm has a minimum, but is there the possibility of a return [here](https://github.com/codahale/bcrypt-ruby/blob/master/lib/bcrypt/password.rb#L44) ?

Thanks in advance!