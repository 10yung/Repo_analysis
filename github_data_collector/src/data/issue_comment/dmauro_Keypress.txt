Hello,

I couldn't find the key codes for play/pause, next  and previous so I merged _keycode_dictionary with the keys found on https://github.com/wesbos/keycodes/blob/gh-pages/scripts.js

I don't know if that's something you would want to do in the library but that's how I use it so I figured I would leave a note here. 

```
  //Modified with key codes from https://github.com/wesbos/keycodes
  _keycode_dictionary = {
      0: 'That key has no keycode',
      3: 'break',
      8: 'backspace / delete',
      9: 'tab',
      12: 'clear',
      13: 'enter',
      16: 'shift',
      17: 'ctrl',
      18: 'alt',
      19: 'pause/break',
      20: 'caps lock',
      21: 'hangul',
      25: 'hanja',
      27: 'escape',
      28: 'conversion',
      29: 'non-conversion',
      32: 'spacebar',
      33: 'page up',
      34: 'page down',
      35: 'end',
      36: 'home',
      37: 'left arrow',
      38: 'up arrow',
      39: 'right arrow',
      40: 'down arrow',
      41: 'select',
      42: 'print',
      43: 'execute',
      44: 'Print Screen',
      45: 'insert',
      46: 'delete',
      47: 'help',
      48: '0',
      49: '1',
      50: '2',
      51: '3',
      52: '4',
      53: '5',
      54: '6',
      55: '7',
      56: '8',
      57: '9',
      58: ':',
      59: 'semicolon (firefox), equals',
      60: '<',
      61: 'equals (firefox)',
      63: 'ß',
      64: '@ (firefox)',
      65: 'a',
      66: 'b',
      67: 'c',
      68: 'd',
      69: 'e',
      70: 'f',
      71: 'g',
      72: 'h',
      73: 'i',
      74: 'j',
      75: 'k',
      76: 'l',
      77: 'm',
      78: 'n',
      79: 'o',
      80: 'p',
      81: 'q',
      82: 'r',
      83: 's',
      84: 't',
      85: 'u',
      86: 'v',
      87: 'w',
      88: 'x',
      89: 'y',
      90: 'z',
      91: 'Windows Key / Left ⌘ / Chromebook Search key',
      92: 'right window key',
      93: 'Windows Menu / Right ⌘',
      95: 'sleep',
      96: 'numpad 0',
      97: 'numpad 1',
      98: 'numpad 2',
      99: 'numpad 3',
      100: 'numpad 4',
      101: 'numpad 5',
      102: 'numpad 6',
      103: 'numpad 7',
      104: 'numpad 8',
      105: 'numpad 9',
      106: 'multiply',
      107: 'add',
      108: 'numpad period (firefox)',
      109: 'subtract',
      110: 'decimal point',
      111: 'divide',
      112: 'f1',
      113: 'f2',
      114: 'f3',
      115: 'f4',
      116: 'f5',
      117: 'f6',
      118: 'f7',
      119: 'f8',
      120: 'f9',
      121: 'f10',
      122: 'f11',
      123: 'f12',
      124: 'f13',
      125: 'f14',
      126: 'f15',
      127: 'f16',
      128: 'f17',
      129: 'f18',
      130: 'f19',
      131: 'f20',
      132: 'f21',
      133: 'f22',
      134: 'f23',
      135: 'f24',
      144: 'num lock',
      145: 'scroll lock',
      160: '^',
      161: '!',
      162: '؛ (arabic semicolon)',
      163: '#',
      164: '$',
      165: 'ù',
      166: 'page backward',
      167: 'page forward',
      168: 'refresh',
      169: 'closing paren (AZERTY)',
      170: '*',
      171: '~ + * key',
      172: 'home key',
      173: 'minus (firefox), mute/unmute',
      174: 'decrease volume level',
      175: 'increase volume level',
      176: 'next',
      177: 'previous',
      178: 'stop',
      179: 'play/pause',
      180: 'e-mail',
      181: 'mute/unmute (firefox)',
      182: 'decrease volume level (firefox)',
      183: 'increase volume level (firefox)',
      186: 'semi-colon / ñ',
      187: 'equal sign',
      188: 'comma',
      189: 'dash',
      190: 'period',
      191: 'forward slash / ç',
      192: 'grave accent / ñ / æ / ö',
      193: '?, / or °',
      194: 'numpad period (chrome)',
      219: 'open bracket',
      220: 'back slash',
      221: 'close bracket / å',
      222: 'single quote / ø / ä',
      223: '`',
      224: 'left or right ⌘ key (firefox)',
      225: 'altgr',
      226: '< /git >, left back slash',
      230: 'GNOME Compose Key',
      231: 'ç',
      233: 'XF86Forward',
      234: 'XF86Back',
      235: 'non-conversion',
      240: 'alphanumeric',
      242: 'hiragana/katakana',
      243: 'half-width/full-width',
      244: 'kanji',
      251: 'unlock trackpad (Chrome/Edge)',
      255: 'toggle touchpad',
  };


```
Technically not an issue with Keypress.js, but nonetheless makes it harder to use:

EasyPrivacy (https://easylist.to/), which is a very common adblocking/content-blocking list, contains a filter that blocks any script named Keypress.js (/keypress.js$script). You can, of course, evade this by renaming the script to something else, but it might be worth reaching out to them to see if they are deliberately blocking your script (which would be strange, since it's just a library and doesn't do anything malicious on it's own) and if they could remove or tweak that filter.
This is just one example.  I'm having the issue with a number of keys, like other numbers and "K".

I am NOT using the number keypad.

I am using prevent_repeat, is_unordered, is_exclusive, is_solitary, and the "on_keydown" function.
is_exclusive is strange... for instance, on CTRL1, if I use prevent_default, I get nothing.  If I don't use prevent_default, it changes to the first tab (the default use of CTRL1).  

The debugger shows that they are registered:
![image](https://user-images.githubusercontent.com/49692017/56458973-1b1f9200-6353-11e9-9994-7f13abe7c0fc.png)




Hi,

I just discovered this is available now. Any chance it could be integrated into the API? That would be amazing. I will try and get it directly from the event and see what happens, but it'd be awesome if it were directly integrated.

https://www.w3.org/TR/DOM-Level-3-Events/#dom-keyboardevent-location
**Is it possible to increase the delay time of a combination?** 
I have longer combinations on my web app like 'a r c g' or 'a r c g k' and they take a bit time to think & press.
I am using below code to listen on `meta m` key event but it doesn't work if there is a bootstrap modal on the page.

```
listener.simple_combo('meta m', (e) => {
            console.log('hello ');
            e.stopDefault();
        });
```
When I load the Keypress script in my own site or even on https://dmauro.github.io/Keypress/, it does not work at all.

Browser: Firefox Quantum 60.0.1 (64 bit)
OS: Ubuntu 17.10

Error messages:
TypeError: window.keypress is undefined in main.js:5:3
Trace:
<anonymous>@https://dmauro.github.io/Keypress/js/main.js:5:3
<anonymous>@https://dmauro.github.io/Keypress/js/main.js:2:2

#### Testcase:

https://jsfiddle.net/xf0sf6zg/

#### What I did:

keydown `shift` first, then keydown `s`

#### What happened:

"You pressed shift and s together." was logged twice!

#### What is expected:

That the message be logged just once.

#### Additional info:

The reverse is not true. keydown `s`, then keydown `shift` == message logged just once!!!


With simple_combo('r'), I can't refresh the browser with ctrl + r. Actually, the event fires regardless of any modifier keys and blocks the browser refresh..
* Replace shell scripts / closure compiler with webpack/uglifyjs (`npm run prepublish`)
* Run jasmine tests with karma (`npm test`)
* Fix package.json to point "main" to minified library as UMD, i.e. should be usable in browser and CommonJS context
* Published to npm, e.g. usable with `<script src="https://unpkg.com/@kba/keypress.js@2.1.4-webpack-1/dist/keypress.min.js"></script>`