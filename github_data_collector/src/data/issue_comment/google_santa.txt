Maybe I'm missing something, but is there a Santa setting to monitor for launches of processes/apps that are unsigned, adhoc-signed, improperly signed (revoked or expired certificates etc.), third-party-signed, invalidated due to modifications after code-signing, and so on?

When reading this – https://www.fcvl.net/vulnerabilities/macosx-gatekeeper-bypass – I thought that it's a bit weird that my own app launch monitor, a shell script I created in one afternoon, would catch applications launching through this exploit, but Santa would not.

A block/whitelist option would actually be nice, not only because of this Gatekeeper exploit (or similar exploits not yet discovered), but also because of applications not receiving a com.apple.quarantine XA depending on the download method (cURL etc.) or archive extraction method.
Hello,

I ran into an issue with an app (running in Lockdown mode) where Santa wouldn't scan the bundle for binaries (or it fails). The app is: https://support.jeppesen.com/product?pc=Tools&pid=JDM_macOS

Here's the file tree (partial):
```
/Applications/JdmApp.app/
└── Contents
    ├── Frameworks
    │   
    │   └── jdmapp\ Helper.app
    │       └── Contents
    │           ├── Info.plist
    │           ├── MacOS
    │           │   └── jdmapp\ Helper
    │           ├── PkgInfo
    │           └── _CodeSignature
    │               └── CodeResources
    ├── Helpers
    │   └── plugins
    │       ├── G2_libusb
    │       │   ├── G2_plugin
    │       │  
    │       ├── g_plugin
    │       │   ├── g_plugin
    │       │   ├── libgcc_s.1.dylib
    │       │   └── libstdc++.6.dylib
    │       └── vsn_plugin
    │           
    │           └── vsn_plugin
    ├── Info.plist
    ├── MacOS
    │   ├── jdm
    │   ├── jdmapp
    │   ├── libgcc_s.1.dylib
    │   ├── libstdc++.6.dylib
    │   └── libusb-1.0.dylib
```

When the `jdmapp` is opened, it gets blocked, but doesn't calculate the bundle identifier

<img width="539" alt="Screen Shot 2019-05-21 at 12 37 06 PM" src="https://user-images.githubusercontent.com/6883189/58125335-31747400-7bc5-11e9-91d8-70dca8626744.png">

I double-checked to see if `Bundle Scanning` is enabled and it is.

When I whitelisted `jdmapp`, other binaries triggered and generated more Santa prompts.


Any help is appreciated :)
Hello,

I am exploring the FCM feature in Santa. I have a few questions:

1. As per Santa docs, the `fcm_token` should be pushed from the sync server. As per my understanding the way FCM works is: client generates the FCM token and sends it to the server which is then used by the server to send FCM messages. I don't have first-hand experience with FCM, so I might be incorrect.

2. If the `fcm_token` has to be generated from the server, can anyone point me to an API document for reference?


Thanks so much!
This is an enhancement request.

Do you think it would be possible to support pkg file with santactl fileinfo?

Currently this command can not parse signature of pkg file.
Therefore, we have to use `pkgutil --check-signature` command.

As explained in the design doc Santa makes no attempt to support blocking of shell scripts - which is understandable in general. But in the case of a user double clicking a ".app" containing a shell script or a ".sh" file directly from the finder it seems much more reasonable to allow for some way to block this action.

Perhaps you have already spent some time considering the feasibility of this, but I would like to discuss how this could be achieved - one thing that comes to mind is that if we had the ability to blacklist a process (bash) based on its parent process (launchctl) we might be able to block this vector of attack

Clearly this wouldn't prevent a user opening terminal and running malware, but we care more about preventing our non-technical staff from being tricked into running simple malware
Two existing methods on the driver interface exist just to expose stats:

`cache_count`
`cache_bucket_count`

These could be unified and extended with a `get_stats` method that returns a struct containing all the counters we'd want to expose. Some additional stats that would be nice to have: cache hits, cache misses, EXEC counts, WRITE counts, etc.

In the same vein, we have some methods for setting things that could be unified and replaced:

`clear_cache`
`filemod_prefix_filter_add`
`filemod_prefix_filter_reset`

These could be replaced with a `set_options` method that again takes a struct containing the new values. Other options that could be added: cache sizes, cache load factors.
Hello,

I am trying to use Client certificate auth for Santa sync server. I tried using the PKCS12 certificate on disk providing `ClientAuthCertificateFile` and `ClientAuthCertificatePassword`. However, when I try to sync, it doesn't seem to work.

I tried using the `ClientAuthCertificateCN` field importing the same PKCS12 certificate in system keychain and it worked as expected when sync'd **manually**. The auto sync doesn't seem to work in this case.

Logs when using `ClientAuthCertificateFile`:
```
$ sudo santactl sync --debug
Server Trust: /O=ABC, Inc./OU=(null)/CN=*.abc.com/SHA-1=b68494f670400768f85d10...
Server asked for client authentication but no usable client certificate found.
Failed to decode JSON response: Error Domain=NSCocoaErrorDomain Code=3840 "JSON text did not start with array or object and option to allow fragments not set." UserInfo={NSDebugDescription=JSON text did not start with array or object and option to allow fragments not set.}
Preflight complete
Event upload complete
Failed to decode JSON response: Error Domain=NSCocoaErrorDomain Code=3840 "JSON text did not start with array or object and option to allow fragments not set." UserInfo={NSDebugDescription=JSON text did not start with array or object and option to allow fragments not set.}
Rule download complete
Failed to decode JSON response: Error Domain=NSCocoaErrorDomain Code=3840 "JSON text did not start with array or object and option to allow fragments not set." UserInfo={NSDebugDescription=JSON text did not start with array or object and option to allow fragments not set.}
Postflight complete
Sync completed successfully
```

The JSON decode exception is due to the sync server returning a HTML response (200) since the server didn't receive a client certificate.

Am I missing anything?
* An overview of Santa.
* A detailed guide on how to set it up.
  * UAKEL
  * Rules
* A detailed guide on using a sync server.
* The "santad / santactl" "privileged / unprivileged" dance. 
* The filemod prefix filter.
* Check the rest of the docs for accuracy.
Proto3 has a canonical JSON encoding for proto messages (though as far as I can tell this isn't supported by the Objective-C library at the moment). 

It would be nice to use this instead of our hand-written JSON parser, which while fuzzed and probably relatively bug-free now is a bit of a pain to maintain and it's a lot of code. It would also allow the proto file to serve as documentation of what fields are in each request and response and and how those fit together.

Unfortunately this will have to wait until after switching to Bazel for building (as the alternative is a lot more work) and for the ObjC API to support JSON encoding, otherwise we'll have to use the C++ API (which wouldn't be terrible but would involve a lot of conversions from `NSString` to `std::string`)