So I am using image `FROM centos:7` but when I to try to execute code,  it broke and to generate panic. But when was tried in a VM or UNIX directly it success executing.

Error reference in two lines below:
 - https://github.com/uber-common/cpustat/blob/79c1ebd00ceaea633e818915edc51fc11cbcb67a/lib/netlink.go#L211
 - https://github.com/uber-common/cpustat/blob/79c1ebd00ceaea633e818915edc51fc11cbcb67a/lib/netlink.go#L224

Traceback:
```go
panic: Netlink error code -2 getting TASKSTATS family id

goroutine 1 [running]:
github.com/uber-common/cpustat/lib.getGenlFamily(0xc0000960a0, 0x50da20)
	/root/go/src/github.com/uber-common/cpustat/lib/netlink.go:274 +0x8e
github.com/uber-common/cpustat/lib.NLInit(0x4f04df)
	/root/go/src/github.com/uber-common/cpustat/lib/netlink.go:328 +0x1f3
main.main()
	/test.go:11 +0x34
```
`sudo cpustat -s 500 -s 10 -n 20`
should be 
`sudo cpustat -i 500 -s 10 -n 20`

based on your description that follows.
As of now, it looks like the main use case for cpustat is interactive. As the provided metrics are super useful, it would be nice to have a batch mode that allows the background logging of the metrics.

To achieve that, at minimum, a timestamp should be logged at the start of each sample. Even better, the tool could support for a machine-parsable CSV output like sadf does.

Many thanks for the outstanding work, much needed!

No idea how hard this would be, but would be cool to be able to run this on non-Linux OS's, particularly OSX for me ðŸ˜„ 

Right now it fails on `fatal error: 'linux/taskstats.h' file not found` (unsurprising, as it's not Linux)

Hi! Currently cpustat import latest versions of packages (`master` branch in repo). If some imported package change public API, installation by `go get` command will be broken.

I highly recommend to use import proxy for "freezing" imported version ([gopkg.in](http://labix.org/gopkg.in) or [pkg.re](https://github.com/essentialkaos/pkgre)).

While the builtin Go parser does work, its syntax is somewhat unexpected for many users.

The current set of "friendly" command line resolutions are potentially only useful to the production environment where this program was originally developed. We should:
- [ ] add a command line flag to disable this resolution
- [ ] collect more examples of other runtimes and how to name them

The Linux kernel doesn't necessarily update these stats as often we poll for them. Hopefully there is a tunable on the Linux side we can use to get more accurate taskstats.

This could be because we aren't giving termui enough data, or it could be a bug in our fork of termui.

On the termui "top procs" pane, a top process is only shown as long as it remains in the "top" as defined by the sorting scheme. If it drops out of the top or exits while it's data is still scrolling along, it mysteriously disappears. All of this data is still in memory, but by sharing the per-proc summary list, we run into this problem.
