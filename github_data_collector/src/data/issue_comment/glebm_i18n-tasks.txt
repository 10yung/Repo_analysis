Hi, I am using i18n reference keys in my .yml file e.g.

en:
    greetings:
         hello: hello
         hello_again: :greetings.hello

The problem I am running into is when I export the translations to a csv file the hello_again value is having the colon removed so its no longer a reference value.

If I then manually go into the csv and add back in the : to make it :greetings.hello and then import the translation I now end up with double quotes around the reference (like below)

en:
    greetings:
         hello: hello
         hello_again: ":greetings.hello"

Has anyone run into this problem before, anyone got any tips on how to export/import translation values that reference other values?
I would like setup following:
- I have 3 user interfaces in my app: Admin, Teacher, Client
- Admin and Teacher is English only
- Client is multiple languages

I would like to run "i18n-tasks missing" so that:
- for "en" locale it tooks everything into the consideration (all interfaces have to be English)
- for other locales ("de", "es", etc...) it ignores missing with following setup:
```
  ignore_missing:
  - 'admin.*'
  - 'admin_mailer.*'
  - 'teacher.*'
  - 'teacher_mailer.*'
```
I don't need translations of admin* and teacher* in other then English language.

Thank you very much for any hint how to automate this task.
Given this code:

```html
# foobar.html.slim

= select_tag :foobar, options_for_select([]),
  data: {\
    "blank-option-label" => t(\
      'form.blank_option_label',
    ),
  }
```

when i run `i18n-tasks unused` i see that `form.blank_option_label` isn't used. When i write it like this it works:

```html
# foobar.html.slim

= select_tag :foobar, options_for_select([]),
  data: {\
    "blank-option-label" => t('form.blank_option_label'),
  }
```

Any plans for supporing multilines within slim templates?
The fix described in issue https://github.com/glebm/i18n-tasks/issues/335
It looks like rails I18n 5.1.3 defines British English locale as `:'en-GB'` which breaks the current `required_plural_keys_for_locale(locale)!` method:

```
/Users/mabell/.rbenv/versions/2.5.3/lib/ruby/gems/2.5.0/gems/i18n-tasks-0.9.29/lib/i18n/tasks/missing_keys.rb:85:in `required_plural_keys_for_locale': undefined method `[]' for nil:NilClass (NoMethodError)
```

Stepped through to figure out that it was `:en-gb` that was not matching up properly in the hash, leading to the nil hash accessing error above. This one's a tough one to fix. But this seems to work for me:

```ruby
def required_plural_keys_for_locale(locale)
  @plural_keys_for_locale ||= {}
  return @plural_keys_for_locale[locale] if @plural_keys_for_locale.key?(locale)
  @plural_keys_for_locale[locale] = plural_keys_for_locale(locale)
end

private

def plural_keys_for_locale(locale)
  configuration = load_rails_i18n_pluralization!(locale)
  if configuration[locale.to_sym].nil?
    alternate_locale = alternate_locale_from(locale)
    return Set.new if configuration[alternate_locale].nil?
    return set_from_rails_i18n_pluralization(configuration, alternate_locale)
  end
  set_from_rails_i18n_pluralization(configuration, locale)
rescue SystemCallError, IOError
  Set.new
end

def alternate_locale_from(locale)
  re = /(\w{2})-*(\w{2})*/
  match = locale.match(re)
  language_code = match[1]
  country_code = match[2]
  country_code.upcase
  "#{language_code}-#{country_code}".freeze
end

def set_from_rails_i18n_pluralization(configuration, locale)
  Set.new(configuration[locale.to_sym][:i18n][:plural][:keys])
end
```

I'll open a PR later tonight. 
Currently this library seems to use Google Translate API v2.

Google provides a free tier of up to 500,000 characters when using API v3, but not for v2.

So it will be nice to upgrade `easy_install` and then update `i18n-tasks` accordingly. when ttps://github.com/seejohnrun/easy_translate/issues/47 is resolved.
It ignores datetime keys but the missing pluralisation keys still appear in the missing translations section.  Is there a specific rule needed to ignore pluralisations?

```
ignore_missing:
  - '{datetime, activerecord, date, datetime,i18n, number, devise, spree, support, time, helpers}.*'
```


```
Missing translations (13) | i18n-tasks v0.9.29
+--------+------------------------------------------------+----------------------------------+
| Locale | Key                                            | Value in other locales or source |
+--------+------------------------------------------------+----------------------------------+
|   pl   | cannot_register_samples.counting               | few, many                        |
|   pl   | datetime.distance_in_words.about_x_hours       | few, many                        |
|   pl   | datetime.distance_in_words.about_x_months      | few, many                        |
|   pl   | datetime.distance_in_words.about_x_years       | few, many                        |
|   pl   | datetime.distance_in_words.almost_x_years      | few, many                        |
|   pl   | datetime.distance_in_words.less_than_x_minutes | few, many                        |
|   pl   | datetime.distance_in_words.less_than_x_seconds | few, many                        |
|   pl   | datetime.distance_in_words.over_x_years        | few, many                        |
|   pl   | datetime.distance_in_words.x_days              | few, many                        |
|   pl   | datetime.distance_in_words.x_minutes           | few, many                        |
|   pl   | datetime.distance_in_words.x_months            | few, many                        |
|   pl   | datetime.distance_in_words.x_seconds           | few, many                        |
|   pl   | you_are_adding_items_from_the_trolley.counting | few, many                        |
+--------+------------------------------------------------+----------------------------------+
```



It would be nice if there was a command to get the word count of translation values. This is useful for getting estimates from translators. 
Hi. I'm using the command 'add-missing' for keys generation but this also add the default keys like 'date.abbr_month_names'. Can these be ignored?
I would like to use "standard" approach in custom validators of my model ... like that:
```
errors.add(:base, :my_custom_error_message)
```
So it is automatically placed into the scope: 
en.activerecord.errors.models.my_model.attributes.base.my_custom_error_message

Can I somehow config the i18n-tasks to handle this translations?