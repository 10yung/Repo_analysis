This is a collection of a few more cleanup and tooling commits in preparation of a first 4.0.0-alpha release.
The UUID generator can be built to a browser application using browserify, webpack, rollup or similar other bundler. However, if the application is built from pure JavaScript modules or [AMD] modules, this package cannot be used without an additional bundling work. (Scripts published from the NPM package cannot be loaded by the `script` element on a web page.)

How about including [UMD] modules in the NPM package, so that browser applications could load them directly, without each of them building such module themselves internally?

For example, by importing the UUID generator function globally:

```html
<script src="https://unpkg.com/uuid@3.4.0/browser/v1.min.js"></script>
<script>
  var id = uuidv1();
  console.log(id);
</script>
```

Another example, requiring the UUID generator as an [AMD] module (using [RequireJS], for example):

```html
<script src="https://unpkg.com/requirejs@2.3.6/require.js"></script>
<script>
  require.config({
    paths: {uuidv4: 'https://unpkg.com/uuid@3.4.0/browser/v4.min'}
  });
  require(['uuidv4'], function(uuid) {
    var id = uuid();
    console.log(id);
  });
</script>
```

[AMD]: https://github.com/amdjs/amdjs-api/blob/master/AMD.md#amd
[RequireJS]: https://requirejs.org/
[UMD]: https://github.com/umdjs/umd#umd-universal-module-definition

Umbrella issue to give an overview of what's planned for v4.0.0:

- [ ] ESM Build for the browser: #330
- [x] Platform Support matrix & Browser tests: #340
- [x] Automated Release / Changelog generation -> Was already mostly there. Full automation is maybe not a goal given that this library doesn't change so often at the moment.
- [ ] Improved TypeScript definitions (node Node.js dep for Browser): #328
- [ ] Insecure RNG Opt-In: #173
- [ ] Rename package script to build
As of 2019-10-31 ECMAScript Module (ESM) support in Node.js is still experimental and there is not yet a stable way of offering an ESM build for Node.js. The authors of the Node.js module working group even urge developers not to release dual CommonJS/ESM packages to npm yet, see: https://github.com/nodejs/modules/blob/master/doc/plan-for-new-modules-implementation.md#phase-4-further-improvements-after-unflagging which states:

> * Dual CommonJS/ESM packages: Either support packages with both CommonJS and ESM sources that can be used in either environment; or decide to specifically not support dual CommonJS/ESM packages.
>   * Status quo (at time of possible unflagging): "main" points to exactly one file, and all file extensions are mandatory (by default), so there is no possibility of an import specifier pointing to different files in ESM versus CommonJS. Recommended practice for dual packages is to have "main" point to the CommonJS entry point and have users use a deep import, e.g. /module.mjs, to access ESM entry point.

There is ongoing work within Node.js to support multiple exports for npm packages which will eventually solve this issue. We will support this feature once it becomes stable in node (i.e. once it's no longer hidden behind an experimental flag).

Corresponding Node.js issues:
 * https://github.com/nodejs/node/pull/29978
I've spent some time continuing the work started in #317 

I have the following high-level objectives:

- [x] Modernize the code base
- [x] Provide a CommonJS build for node.js
- [x] Provide an ESM (ECMAScript Module) build for use in Browser-Bundlers like webpack, rollup etc.
- [x] Provide an ESM build for direct use in the browser
- [x] ~~(Provide an ESM build for direct use in node 12 <-- Still unclear if/when Node.js will remove the experimental flag)~~ [Won't do as of Oct. 2019](https://github.com/nodejs/modules/blob/master/doc/plan-for-new-modules-implementation.md#phase-4-further-improvements-after-unflagging)
- [ ] Changelog

So far I have tried to build a hybrid npm package that contains both, a CommonJS build and an esm build. I followed the pattern, that https://date-fns.org/v2.2.1/docs/ECMAScript-Modules uses.

This works fine for CommonJS-usage in Node.js and esm-usage with bundlers like webpack for the browser.

However it does not play nice with pure esm usage:

* For webpack and other bundlers we're saved by the `"module": "esm/index.js"` property in `package.json`, so far so good.
* For Node.js, if we wanted true esm we'd have to publish the package with [`type: module` in `package.json` and have the `main` property point directly to the esm build](https://nodejs.org/api/esm.html#esm_package_entry_points), the `module` property as mentioned above does not seem to work. This could be something like `uuid-es` similar to https://www.npmjs.com/package/lodash-es
* For native esm usage in Browsers we run into yet another problem: We currently rely on the `"browser"` map in `package.json` to overwrite certain libraries in the browser context. This is again respected by webpack and other bundlers but obviously not by the browsers themselves. So here we'd maybe have to release another `uuid-es-browser` package with rng/sha1/md5 libraries swapped by the respective browser counterparts?
* Still have to check on TypeScriptâ€¦

At this point I'm not 100% certain how to move forward and any feedback would be highly appreciated @broofa @defunctzombie.
Unfortunately I'm trying to use this library with Typescript, so I need to use `@types/uuid`, but that contains a reference to `Buffer` in `globals.d.ts` which means it pulls in `@types/node`, which breaks my build. I'm writing code for browsers, not node.

There would be a few possible fixes for this, including just removing the reference to `Buffer` and just using `Array` / `ArrayLike` - or creating an interface for `Buffer` instead of pulling in the one from node...
Hi! I see the buffer/array support was added.

I would (again, see #216) propose to add the option to pass encoded (in particular binary) data to the CLI.

Previously you considered the CLI a convenience for simple use cases and binary names would not fall into that category.

When working with unique hardware ids or serial numbers, arbitrary byte sequences occur that would have be to be transformed otherwise beforehand.

Although for such cases, custom scripts may exist, but this feature might still be a nice to have out-of-the-box convenience - in particular when having to manually test or verify other processing steps.

Merely proposing ;)
#245 and as well as some of the work we're doing over at https://github.com/bcoe/proposal-standard-module-uuid have had me playing around with what this module might look like if it was rewritten using modern ES features (ES6 modules, BigInt) and with a UUID class for parsing/unparsing and validation.

This is the work-in-progress result.  (Posting this mostly because my laptop's logic board decided to crap out and enough work went into it I'd rather not risk losing it while dealing with Apple repair process.)

Feel free to comment, with the caveat that I don't have a concrete plan (yet) for merging to master here.

- New option for v1 and v4: allowInsecureRng
  - Require to be `true` if `rng.insecure == true`

Closes #173

----

Here's my attempt at closing #173, please let me know if a different approach is preferred.
Right now, this module will automatically fall back to `Math.random()` in browser environments that don't support CSPRNG use, essentially failing open.

To operate securely, it should instead fail hard with an error, and only allow falling back to an insecure random source if the developer explicitly indicates that this is acceptable.