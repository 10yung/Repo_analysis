Im wondering if theres anyone with experience integrating templates with fusebox bundler. Would there be any useful docs to point to?
I've been working on a plugin to make `{% with %}` blocks precompile correctly and the current solution I've had to end up with is essentially string replacing them to `{% block %}` statements with randomly generated names.

I'd quite like to be able to just push my own `WithNode` into the parse tree and then compile it to a simple frame push/pop on either side of the body, however extensions only have acess to `preprocess` and `parse`.

Could that change? I was tempted to push a bunch of `Literal`s to dump raw JS out to do this but it seemed unnecessarily hacky.
Jinja2 calls functions, passed to template only once, at render time.

Nunjucks seems to be doing so every frame.

` function map_style(x,y){
 if (State.fov[x][y] === 1){
     return "normal"
else{
     return "explored"
}

  var maintem = nunjucks.render('main.html', { style:map_style } )}`

HTML
`
%for y in range(0, 20)%} 
    <div style="height:18px;">
    {%for x in range(0, 20)%}<span style="{{map_style(x,y) }}">x</span>{%endfor%}
    </div>
    {%endfor%} 
`

If I put a breakpoint (or, even worse, console.log() ) in map_style, I can clearly see it's being evaluated every frame, flooding my browser's output.
The chokidar is an optional dependency yet it is on 2.* version which involves vulnerability of kind-of package as follows : 

 ctorName in index.js in kind-of v6.0.2 allows external user input to overwrite certain internal attributes via a conflicting name, as demonstrated by. Hence, a crafted payload can overwrite this builtin attribute to manipulate the type detection result.
 
Please upgrade the version to the latest.
Is it exists eslint plugin for njk files? I want to lint my nunjucks templates
When rendering a template string, I am getting the error _Code generation from strings disallowed for this context_. Is there a way to bypass the step where we compile the template into javascript? I think thats where its failing and I do not need that step since all I have is simple String with some jinja expressions _({{ and }})_ in it. Even _renderForString_ throws this error.
Sometimes `extName` is string, but sometimes `extName` is custom tag instance.

Seems like it is intended behaviour, but how? Why?

https://github.com/mozilla/nunjucks/blob/40dfdf0ea3e6ba43c3a180eca57d935c36d188c2/nunjucks/src/nodes.js#L139
## Summary

Proposed change:

Update optional dependency `chokidar` from `^2.0.0` to `^3.3.0`.

This fixes the warning users get when installing:
```
warning nunjucks > chokidar > fsevents@1.2.9: One of your dependencies needs to upgrade to fsevents v2: 1) Proper nodejs v10+ support 2) No more fetching binaries from AWS, smaller package size
```

There are also performance improvements, and `fsevents` no longer has to be built at install. For more information, see: https://paulmillr.com/posts/chokidar-3-save-32tb-of-traffic/

The API of v3 is the same as v2, except that dotfiles are no longer ignored by default. I don't think this is relevant for nunjucks. The minimum node version is bumped from v6 to v8, but i'm not sure if that matters considering v6 is no longer in maintenance.

## Checklist

I've completed the checklist below to ensure I didn't forget anything. This makes reviewing this PR as easy as possible for the maintainers. And it gets this change released as soon as possible.

* [ ] Proposed change helps towards [*purpose of this project*](https://github.com/mozilla/nunjucks/blob/master/CONTRIBUTING.md#purpose).
* [ ] [*Documentation*](https://github.com/mozilla/nunjucks/tree/master/docs/) is added / updated to describe proposed change.
* [ ] [*Tests*](https://github.com/mozilla/nunjucks/tree/master/tests) are added / updated to cover proposed change.
* [ ] [*Changelog*](https://github.com/mozilla/nunjucks/blob/master/CHANGELOG.md) has an entry for proposed change (if user-facing fix or feature).

<!-- Tick of items by replacing `[ ]` by `[x]` -->
## Summary

Replace [`yargs`](https://www.npmjs.com/package/yargs) with [`commander`](https://www.npmjs.com/package/commander), which is only used in `bin/precompile`. This PR does not break command interface, because they have the same logic and options.

Both yargs and commander can implement the same options for `bin/compile`, but [commander pulls in **0 dependency**](https://www.npmjs.com/package/commander?activeTab=dependencies) while [yargs pulls in **11 dependencies directly and maybe many others indirectly**](https://www.npmjs.com/package/yargs?activeTab=dependencies).

It seems most users of nunjucks use it as an library, not a cli-program, and they may not like many dependencies pulled in by yargs in their projects (like me).

## Checklist

I've completed the checklist below to ensure I didn't forget anything. This makes reviewing this PR as easy as possible for the maintainers. And it gets this change released as soon as possible.

* [X] Proposed change helps towards [*purpose of this project*](https://github.com/mozilla/nunjucks/blob/master/CONTRIBUTING.md#purpose).
* [X] [*Documentation*](https://github.com/mozilla/nunjucks/tree/master/docs/) is added / updated to describe proposed change.
* [X] [*Tests*](https://github.com/mozilla/nunjucks/tree/master/tests) are added / updated to cover proposed change.
* [X] [*Changelog*](https://github.com/mozilla/nunjucks/blob/master/CHANGELOG.md) has an entry for proposed change (if user-facing fix or feature).
As the documentation states [here](https://mozilla.github.io/nunjucks/templating.html#macro), you cannot do anything asynchronous inside a macro - in fact, it silently fails.
It would be really useful to be able to use async filters inside macros - and it would provide a much more consistent user experience.