This improves #80 and closes #75 
set shell=True, so ";" can be in command string.

This is the Ivoz/envoy PR, rebased as you asked 2 years ago. 

Looks like a problem lexing unicode commands. If I cast the command to a `str`, it works as expected.

This is with current latest envoy as pulled from pip.

```
Python 2.7.10 (default, Jul 14 2015, 19:46:27)
[GCC 4.2.1 Compatible Apple LLVM 6.0 (clang-600.0.39)] on darwin
Type "help", "copyright", "credits" or "license" for more information.
>>> import envoy
>>> r = envoy.run(u'uptime')
>>> r.std_out
''
>>> r.std_err
u'No such file or directory\nTraceback (most recent call last):\n  File "/Users/mwhooker/dev/wercker/devbox/formation/venv/lib/python2.7/site-packages/envoy/core.py", line 214, in run\n    out, err = cmd.run(data, timeout, kill_timeout, env, cwd)\n  File "/Users/mwhooker/dev/wercker/devbox/formation/venv/lib/python2.7/site-packages/envoy/core.py", line 93, in run\n    raise self.exc\nOSError: [Errno 2] No such file or directory\n'
>>> r.__dict__
{'std_err': u'No such file or directory\nTraceback (most recent call last):\n  File "/Users/mwhooker/dev/wercker/devbox/formation/venv/lib/python2.7/site-packages/envoy/core.py", line 214, in run\n    out, err = cmd.run(data, timeout, kill_timeout, env, cwd)\n  File "/Users/mwhooker/dev/wercker/devbox/formation/venv/lib/python2.7/site-packages/envoy/core.py", line 93, in run\n    raise self.exc\nOSError: [Errno 2] No such file or directory\n', 'std_out': '', 'status_code': 127, '_process': <envoy.core.Command object at 0x107fe4390>, 'command': u'e', 'history': [<Response [u]>, <Response [p]>, <Response [t]>, <Response [i]>, <Response [m]>]}
```

import envoy

c  = envoy.connect('echo 111 && sleep 1 && echo 222')
c.block()

print c.status_code,c.std_err,c.std_out

output: 
0 None None

expect:
0 111 222

Requesting a 'shell=True' option for envoy.run().

I am trying to handle a situation where i can call multiple 3rd party command line functions and need to tell if they worked or not (the apps may not be installed).

The current version is silent on errors.  An status_code is set on the result object, however there is no documentation on what this status code means or what expected values could be.

In my case, the error code was 127 and is being set manually by package.  Thankfully the source was brief, and I quickly saw this https://github.com/kennethreitz/envoy/blob/master/envoy/core.py#L216-L218

It would be great if a future version simply noted what good/bad values are for status codes -- or at least documented what known errors would be.  I dug through several stdlib packages and could not find a corresponding 127 error.

https://pypi.python.org/pypi/subprocess32/3.2.6

F='resources/ch06-mailboxes/data/enron.mbox.json.bz2'
----> 9 r = envoy.run("bunzip2 %s" % (F,))
     10 print r.std_out
     11 print r.std_err

Updated a whole lotta things.

Let me know if you'd anything in a separate pull request
- Updated license file
- pep8 style fixes
- ConnectedCommand std_out and std_err now mostly work
- Tests all pass on py 2.6 & 2.7 & 3.2 & 3.3 (on my machine)

Might want to consider dropping saying you support 3.1 in the classifiers?

Feel free to cherry pick
