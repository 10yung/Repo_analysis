Is RoughJS support WebGL? Or maybe sometimes it will support webgl context?
Is it possible to output an individual path to represent the hature pattern, as opposed to the pattern fill that currently exists.  The current form causes problems for SVG parsing and plotting software. 
Is this library supposed to work with `node`?

I've been developing an image-morph application with it https://chapuzzo.github.io/randomart/

It works great in the browser but when I try to recreate the steps in backend for async generation or batches the fill doesn't cover the paths in whole. I use `svg`. 

I have tried using `canvas` instead and it doesn't work (I think it's because of getBBox). 

Is there any hack/workaround you already know for it to work?

<img height=270 src="https://user-images.githubusercontent.com/1598156/67195732-c7712c80-f3f9-11e9-84fe-1b99ef62e07c.jpg"><img height=270 src="https://user-images.githubusercontent.com/1598156/67196398-094ea280-f3fb-11e9-9dd2-7bcb2559762c.png"><img height=270 src="https://user-images.githubusercontent.com/1598156/67195651-9b55ab80-f3f9-11e9-8ecf-7a26c442ecfe.jpg">

images are `original` `browser` and `node` respectively

Thanks
I am having issues with Rough SVG and importing the created SVG into inkscape. The svg looks like this in chrome. 
![firefox_2019-09-30_21-56-05](https://user-images.githubusercontent.com/45376111/65917637-bec7a080-e3cf-11e9-87e5-37b576d75f73.png)

Inkscape shows the file like this, with some bizzarre clipping.
![image](https://user-images.githubusercontent.com/45376111/65917892-53ca9980-e3d0-11e9-9fc4-c74c223ba83d.png)


The reason why I would like this in inkscape is because I would like to plot the SVG using an AxiDraw. The following code below is how I am creating the SVG. Iâ€™m thinking that because Iâ€™m using roughCanvas.path it creates a SVG pattern and not individual paths per line?

Any help would be hugely appreciated.


function setup() {
    let roughSvg = rough.svg(document.getElementById("svg"))
    const roughCanvas = rough.svg(svg);

    draw_path(roughCanvas, "M655.4,625.5l222,109.6 M877.4,735.1L994.2,651 M851,471.4l36.9-17.2 M387.2,121.6L519,107.4 M519,107.4 l200.6,25.5 M719.6,132.9l-134.1,19.6 M585.5,152.5l-198.3-30.8 M402.2,362.7l-15-241.1 M714.9,310.3l4.6-177.4 M587.1,314.1 l-1.6-161.6 M758.9,211.5l55.7,9.9 M853.2,191.1l-94.3,20.4 M907.6,199.5l-54.5-8.4 M814.6,221.4l93.1-21.9 M754.8,320.4l4.1-108.9 M808.7,333.9l5.9-112.6 M887.9,454.2l19.8-254.7 M389.6,366.1l202.3,76.3 M655.4,625.5l1.2-115.2 M656.6,510.3L888,605 M656.6,510.3l126.6-54.1 M888,605l119.9-72.7 M877.4,735.1L888,605 M994.2,651l13.7-118.8 M354.9,660.8l135.3-59.6 M194.4,553.9 l160.5,106.9 M490.2,601.2l103.5,56 M485.9,494l-90.6-41.1 M345.4,545.6L485.9,494 M181.5,453.3l163.9,92.3 M314,416l-132.5,37.3 M395.3,452.9L314,416 M490.2,601.2L485.9,494 M354.9,660.8l-9.5-115.3 M194.4,553.9l-12.9-100.6 M395.3,452.9l-5.7-86.8 M591.8,442.4l267.5-95.7 M593.7,657.2l-1.9-214.8 M593.7,657.2l61.7-31.7 M402.2,362.7l-12.7,3.3 M714.9,310.3l-58.1-14.6 M1007.9,532.2L850.5,479 M850.5,479l-67.3-22.8 M850.5,479l0.5-7.6 M851,471.4l8.4-124.7 M656.9,295.7l-69.8,18.4 M587.1,314.1 l-184.8,48.7 M754.8,320.4l-39.9-10.1 M859.3,346.7l-50.7-12.8 M808.7,333.9l-53.8-13.6")

    hatch_path(roughCanvas, "M877.4,735.1 655.4,625.5 656.6,510.3 888,605", style = "hachure", gap = 10);
    hatch_path(roughCanvas, "M387.2,121.6 519,107.4 719.6,132.9 585.5,152.5", style = "hachure", gap = 15, angle = 25);
    hatch_path(roughCanvas, "M387.2,121.6 585.5,152.5 587.1,314.1 402.2,362.7", style = "hachure", gap = 10);
    hatch_path(roughCanvas, "M585.5,152.5 719.6,132.9 714.9,310.3 656.9,295.7 587.1,314.1", style = "hachure", gap = 7);
    hatch_path(roughCanvas, "M887.9,454.2 851,471.4 859.3,346.7 808.7,333.9 814.6,221.4 907.6,199.5", style = "hachure", gap = 7);
    hatch_path(roughCanvas, "M994.2,651 877.4,735.1 888,605 1007.9,532.2", style = "hachure", gap = 7);
    hatch_path(roughCanvas, "M758.9,211.5 853.2,191.1 907.6,199.5 814.6,221.4", style = "hachure", gap = 15, angle = 25);
    hatch_path(roughCanvas, "M656.6,510.3 655.4,625.5 593.7,657.2 591.8,442.4 859.3,346.7 851,471.4 850.5,479 783.2,456.2", style = "hachure", gap = 7);
    hatch_path(roughCanvas, "M758.9,211.5 814.6,221.4 808.7,333.9 754.8,320.4", style = "hachure", gap = 10);
    hatch_path(roughCanvas, "M888,605 656.6,510.3 783.2,456.2 850.5,479 1007.9,532.2", style = "hachure", gap = 15, angle = 25);
    hatch_path(roughCanvas, "M490.2,601.2 354.9,660.8 345.4,545.6 485.9,494", style = "hachure", gap = 7);
    hatch_path(roughCanvas, "M354.9,660.8 194.4,553.9 181.5,453.3 345.4,545.6", style = "hachure", gap = 10);
    hatch_path(roughCanvas, "M593.7,657.2 490.2,601.2 485.9,494 395.3,452.9 389.6,366.1 591.8,442.4", style = "hachure", gap = 10);
    hatch_path(roughCanvas, "M591.8,442.4 389.6,366.1 402.2,362.7 587.1,314.1 656.9,295.7 714.9,310.3 754.8,320.4 808.7,333.9 859.3,346.7", style = "hachure", gap = 15, angle = 25);
    hatch_path(roughCanvas, "M395.3,452.9 485.9,494 345.4,545.6 181.5,453.3 314,416", style = "hachure", gap = 15, angle = 25);

    saveSvg(svg, "blocks_test.svg");
}

function draw() {

}


function hatch_path(roughCanvas, path, style = "cross-hatch", gap = 7, angle = 45, roughness = 0.25, bowing = 1) {
    svg.appendChild(roughCanvas.path(path, {
        roughness: roughness,
        bowing: bowing,
        hachureAngle: angle,
        hachureGap: gap,
        fillStyle: style,
        fillWeight: 1,
        fill: "black",
        strokeWidth: 1
    }));
}

function draw_path(roughCanvas, path, roughness = 0.25, bowing = 1) {
    svg.appendChild(roughCanvas.path(path, {
        roughness: roughness,
        bowing: bowing,
        strokeWidth: 1
    }));
}

function saveSvg(svgEl, name) {
    svgEl.setAttribute("xmlns", "http://www.w3.org/2000/svg");
    var svgData = svgEl.outerHTML;
    var preface = "<?xml version="1.0" standalone="no"?>\r\n";
    var svgBlob = new Blob([preface, svgData], { type: "image/svg+xml;charset=utf-8" });
    var svgUrl = URL.createObjectURL(svgBlob);
    var downloadLink = document.createElement("a");
    downloadLink.href = svgUrl;
    downloadLink.download = name;
    document.body.appendChild(downloadLink);
    downloadLink.click();
    document.body.removeChild(downloadLink);
}`

When trying to update Semiotic to use a version of Rough that was not my own ES5 tenderized version I get the following error: `Failed to minify the code from this file:  ./node_modules/roughjs/dist/rough.umd.js:1:220`

Are there certain settings for babel and rollup necessary to build Rough in a project?
`const rough = require('roughjs');`
works with 2.2.5
but with 3.0.0 console.log on rough just gives `{}`
I wanna add drag and drop on canvas items via [konvajs](https://konvajs.github.io) ðŸ‘»

Seems that `rough.generator` is not capable ðŸ˜£
Implement dashed lines. 

for canvas  ( [setLineDash](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/setLineDash)):

```js
const rc = rough.canvas(document.getElementById('canvas'));
rc.rectangle(10, 10, 200, 200, {lineDash: [10, 20]});
```

for svg  ([stroke-dash-array](https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/stroke-dasharray)):

```js
const rc = rough.svg(svg);
let node = rc.rectangle(10, 10, 200, 200, {lineDash: [10, 20]});
svg.appendChild(node);
```
![](https://p0.ssl.qhimg.com/t01e8f312fa996579d8.jpg)

This would be a great addition I think.
I experienced an odd error when trying to test an app using this library. The app's written in Typescript, using React, using Jest and Enzyme for testing. I have a component that imports this library with
`import rough from "roughjs";`
then tries to use it to draw with this code:
```
const rc = rough.canvas(this.canvasRef.
rc.line(100, 0, 100, 300);
```
However, when running tests using `react-scripts-ts --env=jsdom`, this code error's out with `Error: Uncaught [TypeError: Cannot read property 'canvas' of undefined`. This happens even if canvas or canvas-prebuilt is installed in the project. I can fix the problem by checking `if (rough)` before drawing, which would seem to indicate that the `rough` object doesn't exist in the test environment.