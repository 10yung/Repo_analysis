This was not working for forks as it was only killing the ancestor.
Updated the template to kill the whole tree

The command for killing a process group is from this [SO answer](https://stackoverflow.com/questions/392022/whats-the-best-way-to-send-a-signal-to-all-members-of-a-process-group/15139734#15139734)
I had some trouble running a command with quotes.  eval fixed it.
Added options variable. Should be useful for many services.
Doesn't break anything.
In the interest of writing valid INIT scripts, I have added `force-reload` action.

According to documentation `force-reload` is required action in LSB-compilant scripts.

Source:
* [Debian docs](https://wiki.debian.org/LSBInitScripts)

`force-reload` behavior is implemented according to instructions [here](http://refspecs.linuxfoundation.org/LSB_3.1.0/LSB-Core-generic/LSB-Core-generic/iniscrptact.html).

Hope it helps someone.
As explained in #20 the process stored in `/var/run/pid_file` is the PID for the command `sudo -U <user> <cmd>` which causes an error when the user attempts to stop the process since `kill <pid>` is not allowed because the pid is owned by root.

`pgrep -U "$user" -xf "$cmd"` captures the pid for the actual running script which is owned by `$user`, therefore allowing them to successfully stop the service without sudo.
I am having a problem stopping a script that I am running using the `user` option. I configured the permissions on some necessary directories to be able to start the service properly, but when I try to stop it, I get the following message:

```
kill: Operation not permitted
```

After some investigation I found that the PID stored for the init script is the one for the `sudo -u <user> <cmd>` command, and there is a separate one for the actual running script. I started the service and I cannot kill the process using `kill <pid>` using both the pid for the `sudo -u` command (stored in `/var/run/<cmd>.pid`) as the desired user. Any ideas?
Bash, even in posix emulation mode, will expand braced sequences (I don't think that's the official name for this construction).

```
$ bash --posix -c 'echo {1..10}'
1 2 3 4 5 6 7 8 9 10
```

But a more minimal shell like dash will not perform this expansion

```
$ dash -c 'echo {1..10}'
{1..10}
```

`seq` is pretty common on Linux, but is not itself POSIX. It isn't available on FreeBSD, for instance.

```
for i in `seq 1 10`; do
    echo "$i"
done
```

The POSIXest way I can think of to do this is to use a while loop and an explicit test.

```
i=1
while [ "$i" -le 10 ]; do
    echo "$i"
    i="$((i+1))"
done
```

Adding `-i` to sudo command. This uses a login shell for the $user.

I'm running as a non-root user that doesn't have access to /var/run. What I have to do so that the user has access to the pid file is to create it beforehand:

``` sh
sudo touch /var/run/$appName.pid
sudo chown $userName /var/run/$appName.pid
```

But this results in `Already running` all the time because the script checks only for file existence. My change checks for something in the file too.

> sudo: sorry, you must have a tty to run sudo

This message is found it error log file. This could be due to `requiretty` being enabled in visudo by default. Reference [here](https://github.com/WASdev/ci.chef.wlp/issues/9).

If this is the case, it is better to apply workaround in the init script, instead of altering visudo default configuration. 
