Details of the scenario you tried and the problem that is occurring:
SqlRSSetup does not contain SvcAccount parameter, similar to RSSvcAccount in SQLSetup.

We need to be able to specify a service account during install. 

The DSC configuration that is using the resource (as detailed as possible):
n/a

Version of the Operating System, SQL Server and PowerShell the DSC Target Node is running:
Microsoft SQL Server 2017 Reporting Services

What module (SqlServer or SQLPS) and which version of the module the DSC Target Node is running:
n/a

Version of the DSC module you're using, or 'dev' if you're using current dev branch:
13.2.0.0


#### Pull Request (PR) description
- Added verbose messages to measure the time it takes to run the tests

#### This Pull Request (PR) fixes the following issues
Preparation for issue #979 

#### Task list
<!--
    To aid community reviewers in reviewing and merging your PR, please take
    the time to run through the below checklist and make sure your PR has
    everything updated as required.

    Change to [x] for each task in the task list that applies to your PR.
    For those task that don't apply to you PR, leave those as is.
-->
- [x] Added an entry to the change log under the Unreleased section of the
      file CHANGELOG.md. Entry should say what was changed and how that
      affects users (if applicable), and reference the issue being resolved
      (if applicable).
- [ ] Resource documentation added/updated in README.md.
- [ ] Resource parameter descriptions added/updated in README.md, schema.mof
      and comment-based help.
- [ ] Comment-based help added/updated.
- [ ] Localization strings added/updated in all localization files as appropriate.
- [ ] Examples appropriately added/updated.
- [ ] Unit tests added/updated. See [DSC Community Testing Guidelines](https://dsccommunity.org/guidelines/testing-guidelines).
- [ ] Integration tests added/updated (where possible). See [DSC Community Testing Guidelines](https://dsccommunity.org/guidelines/testing-guidelines).
- [x] New/changed code adheres to [DSC Community Style Guidelines](https://dsccommunity.org/styleguidelines).

<!-- Reviewable:start -->
---
This change isâ€‚[<img src="https://reviewable.io/review_button.svg" height="34" align="absmiddle" alt="Reviewable"/>](https://reviewable.io/reviews/dsccommunity/sqlserverdsc/1460)
<!-- Reviewable:end -->

At present, this `SqlServerDsc`, PowerShell module is consistently using a 4-part version (e.g. `13.2.0.0`).

Unfortunately, when using the Microsoft-recommended approach to copying/duplicating/republishing a PowerShell module ...

[https://docs.microsoft.com/en-us/powershell/scripting/gallery/how-to/working-with-local-psrepositories?view=powershell-6#publishing-to-a-local-repository](https://docs.microsoft.com/en-us/powershell/scripting/gallery/how-to/working-with-local-psrepositories?view=powershell-6#publishing-to-a-local-repository)

... the version of the `SqlServerDsc` module published to the local/internal repository omits the final zero (e.g. `13.2.0.0` becomes `13.2.0`), presumably on the basis that this adds no/little value/meaning to the version of the module.

Seemingly, there are some aspects of PowerShellGet (and PowerShell, module management and dependency management) that treat `13.2.0.0` and `13.2.0` the same, and other areas that treat them as different values, so ensuring these are identical is important.

Is there any need for the `SqlServerDsc`, PowerShell module to be published to the public, PowerShell Gallery with the final zero? - Can the public, published version please be updated to a 3-part version (if the final part is going to be zero) to remove/reduce this down-stream, version adjustment problem (from future versions going forward) for anybody that may consume/reuse this module in their own, private, PowerShell repositories/galleries?


Hi,
We are setting a SQL Server Failover Cluster in Azure with VMs. We are wanting to use an Azure Storage Account setup as a FileShare. 
This is very similar to the setup defined in the Microsoft Docs here:
https://docs.microsoft.com/en-us/azure/virtual-machines/windows/sql/virtual-machines-windows-portal-sql-create-failover-cluster-premium-file-share

The SqlServer DSC block is as follows:
```
SqlSetup ConfigureSqlServerWithAlwaysOn
        {
            SourcePath = $Node.SqlSetupSourceFiles
            ForceReboot = $true;
            Action = "InstallFailoverCluster"
            SQLSvcAccount = $SQLServicecreds
            InstanceName = $Node.SqlInstanceName
            Features               = $Node.SqlSetupFeatures
            SQLCollation           = $Node.SqlCollation
            SecurityMode =  $Node.SqlSecurityMode
            SQLTempDBDir = $Node.SqlUserTempDbDataDir
            SQLTempDBLogDir = $Node.SqlUserTempDbLogsDir
            SQLBackupDir = $Node.SqlUserBackupDir
            SQLUserDBDir = $Node.SqlUserDbDir
            SQLUserDBLogDir = $Node.SqlUserLogsDir
            InstallSQLDataDir = $Node.SqlUserDbDir
            ProductKey = $Node.SqlProductKey
            SQMReporting = $true
            ErrorReporting = $true
            # SAPwd = 
            AgtSvcAccount = $SQLServicecreds
            SQLSysAdminAccounts = $Node.SqlSysAdminAccounts
            UpdateEnabled = $Node.SqlUpdateEnabled
            FailoverClusterGroupName = $Node.SqlClusterGroupName
            FailoverClusterNetworkName = $Node.SqlClusterNetworkName
            FailoverClusterIPAddress = $Node.SqlClusterIpAddress
            # PsDscRunAsCredential = $DomainCreds
            DependsOn = "[Computer]DomainJoin","[WindowsFeature]FailoverClusterTools"
        }
```

We are using configuration data an extract is shown below:

```
            SqlUserDbDir = '\\lthtuksppmdevsdcluster.file.core.windows.net\sqldata\Data'
            SqlUserLogsDir = '\\lthtuksppmdevsdcluster.file.core.windows.net\sqllogs\Logs'
            SqlUserTempDbDataDir = '\\lthtuksppmdevsdcluster.file.core.windows.net\sqldata\TempDb'
            SqlUserTempDbLogsDir = '\\lthtuksppmdevsdcluster.file.core.windows.net\sqllogs\TempDb'
            SqlUserBackupDir = '\\lthtuksppmdevsdcluster.file.core.windows.net\sqldata\backup'
```

So the SqlSetup section when running fails with the following:
```
VERBOSE: [ppmazsdsql-sql1]: LCM:  [ End    Set      ]  [[SqlSetup]ConfigureSqlServerWithAlwaysOn]  in 0.3030 seconds.
PowerShell DSC resource MSFT_SqlSetup  failed to execute Set-TargetResource functionality with error message: System.Exception: Unable to map the specified paths to valid cluster storage. 
Drives mapped: . 
```

An extract of the logs are shown below:

```
VERBOSE: [ppmazsdsql-sql1]:                            [[SqlSetup]ConfigureSqlServerWithAlwaysOn] The feature 'ADV_SSMS' is already installed so it will not be installed again.
VERBOSE: [ppmazsdsql-sql1]:                            [[SqlSetup]ConfigureSqlServerWithAlwaysOn] Found assigned parameter 'InstallSQLDataDir'. Adding path '\\lthtuksppmdevsdcluster.file.core
.windows.net\sqldata\Data' to list of paths that required cluster drive.
VERBOSE: [ppmazsdsql-sql1]:                            [[SqlSetup]ConfigureSqlServerWithAlwaysOn] Found assigned parameter 'SQLUserDBDir'. Adding path '\\lthtuksppmdevsdcluster.file.core.wind
ows.net\sqldata\Data' to list of paths that required cluster drive.
VERBOSE: [ppmazsdsql-sql1]:                            [[SqlSetup]ConfigureSqlServerWithAlwaysOn] Found assigned parameter 'SQLUserDBLogDir'. Adding path '\\lthtuksppmdevsdcluster.file.core.w
indows.net\sqllogs\Logs' to list of paths that required cluster drive.
VERBOSE: [ppmazsdsql-sql1]:                            [[SqlSetup]ConfigureSqlServerWithAlwaysOn] Found assigned parameter 'SQLTempDBDir'. Adding path '\\lthtuksppmdevsdcluster.file.core.wind
ows.net\sqldata\TempDb' to list of paths that required cluster drive.
VERBOSE: [ppmazsdsql-sql1]:                            [[SqlSetup]ConfigureSqlServerWithAlwaysOn] Found assigned parameter 'SQLTempDBLogDir'. Adding path '\\lthtuksppmdevsdcluster.file.core.w
indows.net\sqllogs\TempDb' to list of paths that required cluster drive.
VERBOSE: [ppmazsdsql-sql1]:                            [[SqlSetup]ConfigureSqlServerWithAlwaysOn] Found assigned parameter 'SQLBackupDir'. Adding path '\\lthtuksppmdevsdcluster.file.core.wind
ows.net\sqldata\backup' to list of paths that required cluster drive.
VERBOSE: [ppmazsdsql-sql1]:                            [[SqlSetup]ConfigureSqlServerWithAlwaysOn] Perform operation 'Query CimInstances' with following parameters, ''queryExpression' = SELECT
 * FROM MSCluster_ResourceGroup WHERE Name = 'Available Storage','queryDialect' = WQL,'namespaceName' = root/MSCluster'.
VERBOSE: [ppmazsdsql-sql1]:                            [[SqlSetup]ConfigureSqlServerWithAlwaysOn] Perform operation 'Enumerate Associated CimInstances' with following parameters, ''sourceRole
' = ,'sourceInstance' = MSCluster_ResourceGroup (Name = "Available Storage"),'associationClassName' = MSCluster_ResourceGroupToResource,'namespaceName' = root/MSCluster,'resultClassName' = MS
Cluster_Resource,'resultRole' = '.
VERBOSE: [ppmazsdsql-sql1]:                            [[SqlSetup]ConfigureSqlServerWithAlwaysOn] Operation 'Query CimInstances' complete.
VERBOSE: [ppmazsdsql-sql1]:                            [[SqlSetup]ConfigureSqlServerWithAlwaysOn] Operation 'Enumerate Associated CimInstances' complete.
VERBOSE: [ppmazsdsql-sql1]:                            [[SqlSetup]ConfigureSqlServerWithAlwaysOn] Perform operation 'Enumerate CimInstances' with following parameters, ''namespaceName' = root
/MSCluster,'className' = MSCluster_ClusterSharedVolume'.
VERBOSE: [ppmazsdsql-sql1]:                            [[SqlSetup]ConfigureSqlServerWithAlwaysOn] Operation 'Enumerate CimInstances' complete.
VERBOSE: [ppmazsdsql-sql1]: LCM:  [ End    Set      ]  [[SqlSetup]ConfigureSqlServerWithAlwaysOn]  in 0.3030 seconds.
PowerShell DSC resource MSFT_SqlSetup  failed to execute Set-TargetResource functionality with error message: System.Exception: Unable to map the specified paths to valid cluster storage. 
Drives mapped: . 
    + CategoryInfo          : InvalidOperation: (:) [], CimException
    + FullyQualifiedErrorId : ProviderOperationExecutionFailure
    + PSComputerName        : ppmazsdsql-sql1
```

So I understand what it is saying that Sql Setup cannot find the file share as part of a Cluster Disk, which is correct.

Am I missing something but this configuration should be ok. When setting this up via the SQL Server Setup UI a warning is displayed but you can continue. Is there a way to override and Force the installation to continue?

Thanks for your help.
Cheers
Simon
<!--
    Your feedback and support is greatly appreciated, thanks for contributing!
-->
Hi, just wondering if this repository has a script to wait or checking for additional AG replica like that of `SqlWaitForAG`? I would like to have a checking if 2 nodes or more (Primary and Seconday) are already added as replicas in the same AG group. Tried with `SqlAGReplica` but the script will only add replica as new node in the AG group. Thanks.
<!--
    Your feedback and support is greatly appreciated, thanks for contributing!
-->
Hi, I am getting `Error: An internal error occurred.`  upon executing SqlAGDatabase script in the Primary node. The backuppath is already existing via UNC. Does anyone bumped on the same error?

```
sqlagdatabase{'AGDatabase':
	ensure = 'Present'
	databasename = 'myAGDatabase'
	servername = 'hostname'
	instancename = 'MSSQLSERVER'
	availabilitygroupname = 'AGGroup'
	backuppath = "\\${myserver}\mySQLBackup"
	force = true
	isactivenode = true
}
```

Just to add, I get this error whenever I run the script without a Secondary node in AG group (only Primary). I have separate script for Primary and Secondary nodes AG stuffs. I think it is somehow related with the #1435 but am having issue in the first run. I have to relate my other open issue #1446 here. I can successfully add AG Databases **if and only if** the Secondary node exists. Any idea how to make `SqlAGDatabase` wait for a secondary replica added in AG prior to running?

Thanks.
#### Details of the scenario you tried and the problem that is occurring
Deploying SQL using DSC push and MSA and analysis services will not start. The MSA account does get added to the correct OLAP local group; however, that group is only added to P:\data\MSOLAP ACL with full access, and apparently, for AS to start, it needs to be in P:\data. Adding to the P:\data ACL manually lets AS start with no issues. 
P:\data is a mounted volume, btw. 
Additionally, tried deploying with built-in accounts (NT SERVICE\MSSQLSERVEROLAPSERVICE) and ran into the same problem. 
#### Verbose logs showing the problem
VERBOSE: [TESTSERVER01]:                            [[SqlSetup]InstallDefaultInstance::[OPSQLBase]SQLBase] Connected to SQL instance 'TESTSERVER01'. (SQLCOMMON0018)
VERBOSE: [TESTSERVER01]:                            [[SqlSetup]InstallDefaultInstance::[OPSQLBase]SQLBase] Clustered instance not detected.
VERBOSE: [TESTSERVER01]:                            [[SqlSetup]InstallDefaultInstance::[OPSQLBase]SQLBase] Detecting Full-text feature.
VERBOSE: [TESTSERVER01]:                            [[SqlSetup]InstallDefaultInstance::[OPSQLBase]SQLBase] Full-text feature not detected.
VERBOSE: [TESTSERVER01]:                            [[SqlSetup]InstallDefaultInstance::[OPSQLBase]SQLBase] Detecting Reporting Services feature.
VERBOSE: [TESTSERVER01]:                            [[SqlSetup]InstallDefaultInstance::[OPSQLBase]SQLBase] Reporting Services feature not detected.
VERBOSE: [TESTSERVER01]:                            [[SqlSetup]InstallDefaultInstance::[OPSQLBase]SQLBase] Detecting Analysis Services feature.
VERBOSE: [TESTSERVER01]:                            [[SqlSetup]InstallDefaultInstance::[OPSQLBase]SQLBase] Analysis Services feature detected.
VERBOSE: [TESTSERVER01]:                            [[SqlSetup]InstallDefaultInstance::[OPSQLBase]SQLBase] Perform operation 'Query CimInstances' with following 
parameters, ''queryExpression' = SELECT * FROM Win32_Service WHERE Name = 'MSSQLServerOLAPService','queryDialect' = WQL,'namespaceName' = root\cimv2'.
VERBOSE: [TESTSERVER01]:                            [[SqlSetup]InstallDefaultInstance::[OPSQLBase]SQLBase] Operation 'Query CimInstances' complete.
VERBOSE: [TESTSERVER01]: LCM:  [ End    Test     ]  [[SqlSetup]InstallDefaultInstance::[OPSQLBase]SQLBase]  in 4.6250 seconds.
PowerShell DSC resource MSFT_SqlSetup  failed to execute Test-TargetResource functionality with error message: System.InvalidOperationException: Failed to connected to 
Analysis Services instance 'TESTSERVER01'. (SQLCOMMON0021) ---> System.Management.Automation.MethodInvocationException: Exception calling "Connect" with "1" 
argument(s): "A connection cannot be made. Ensure that the server is running." ---> Microsoft.AnalysisServices.ConnectionException: A connection cannot be made. Ensure 
that the server is running. ---> System.Net.Sockets.SocketException: No connection could be made because the target machine actively refused it 127.0.0.1:2383
   at System.Net.Sockets.TcpClient..ctor(String hostname, Int32 port)
   at Microsoft.AnalysisServices.XmlaClient.GetTcpClient(ConnectionInfo connectionInfo)
   --- End of inner exception stack trace ---
   at Microsoft.AnalysisServices.XmlaClient.OpenConnection(ConnectionInfo connectionInfo, Boolean& isSessionTokenNeeded)
   at Microsoft.AnalysisServices.XmlaClient.Connect(ConnectionInfo connectionInfo, Boolean beginSession)
   at Microsoft.AnalysisServices.Core.Server.Connect(String connectionString, String sessionId, ObjectExpansion expansionType)
   at Microsoft.AnalysisServices.Core.Server.Connect(String connectionString)
   at CallSite.Target(Closure , CallSite , Object , Object )
   --- End of inner exception stack trace ---
   at System.Management.Automation.ExceptionHandlingOps.CheckActionPreference(FunctionContext funcContext, Exception exception)
   at System.Management.Automation.Interpreter.ActionCallInstruction`2.Run(InterpretedFrame frame)
   at System.Management.Automation.Interpreter.EnterTryCatchFinallyInstruction.Run(InterpretedFrame frame)
   at System.Management.Automation.Interpreter.EnterTryCatchFinallyInstruction.Run(InterpretedFrame frame)
   --- End of inner exception stack trace --- 
    + CategoryInfo          : InvalidOperation: (:) [], CimException
    + FullyQualifiedErrorId : ProviderOperationExecutionFailure
    + PSComputerName        : TESTSERVER01

#### Suggested solution to the issue
n/a 
#### The DSC configuration that is used to reproduce the issue (as detailed as possible)
```powershell
                SqlSetup 'InstallDefaultInstance'
                {

                    InstanceName         = 'MSSQLSERVER' 
                   
                    Features             = $Node.sqlfeatures 
                    SQLCollation         = $Node.collation
                    SQLSvcAccount        = $Node.SqlServiceCredential 
                    #SQLSvcStartupType    = $Node.SqlSvcStartupType
                    AgtSvcAccount        = $Node.SqlAgentServiceCredential 
                    RSSvcAccount         = $Node.SqlReportingServiceCredential 
                    ISSvcAccount         = $Node.SqlIntegrationServiceCredential 
                    ASSvcAccount         = $Node.SqlAnalysisServiceCredential 
                    FTSvcAccount         = $Node.SqlFTSearchServiceCredential 
                    SQLSysAdminAccounts  = 'DOMAIN\Group'
                    ASSysAdminAccounts   = 'DOMAIN\Group'
                    InstallSharedDir     = 'C:\Program Files\Microsoft SQL Server'
                    InstallSharedWOWDir  = 'C:\Program Files (x86)\Microsoft SQL Server'
                    InstanceDir          = 'C:\Program Files\Microsoft SQL Server'
                    InstallSQLDataDir    = $Node.DataVolume
                    SQLUserDBDir         = $Node.DataVolume + 'MSSQL'
                    SQLUserDBLogDir      = $Node.LogVolume + 'MSSQL'
                    SQLTempDBDir         = $Node.TempdbVolume + 'MSSQL'
                    SQLTempDBLogDir      = $Node.TempdbVolume + 'MSSQL'
                    SQLBackupDir         = $Node.DataVolume + 'Backup'
                    ASServerMode         = 'TABULAR'
                    ASConfigDir          = $Node.DataVolume + 'MSOLAP\Config'
                    ASDataDir            = $Node.DataVolume + 'MSOLAP'
                    ASLogDir             = $Node.LogVolume + 'MSOLAP'
                    ASBackupDir          = $Node.DataVolume + 'MSOLAP\Backup'
                    ASTempDir            = $Node.TempdbVolume + 'MSOLAP'
                    SourcePath           = Join-Path $Node.DestTempPath -childpath $Node.SQLVersion
                    UpdateEnabled        = 'True'    
                    UpdateSource         = Join-Path $Node.DestTempPath -childpath $Node.UpdatesFolder
                    ForceReboot          = $true
                    PsDscRunAsCredential = $Node.SqlInstallCredential

                }
```

#### SQL Server edition and version the target node is running
Microsoft SQL Server 2017 (RTM-CU14) (KB4484710) - 14.0.3076.1 (X64)   Mar 12 2019 19:29:19   Copyright (C) 2017 Microsoft Corporation  Enterprise Edition: Core-based Licensing (64-bit) on Windows Server 2016 Standard 10.0 <X64> (Build 14393: ) (Hypervisor) 
#### SQL Server PowerShell modules present on the target node
Name  Version Path
----  ------- ----
SQLPS 14.0    C:\Program Files (x86)\Microsoft SQL Server\140\Tools\PowerShell\Modules\SQLPS\SQLPS.psd1

#### The operating system the target node is running
OsName               : Microsoft Windows Server 2016 Standard
OsOperatingSystemSKU : StandardServerEdition
OsArchitecture       : 64-bit
WindowsBuildLabEx    : 14393.3204.amd64fre.rs1_release.190830-1500
OsLanguage           : en-US
OsMuiLanguages       : {en-US}

#### Version and build of PowerShell the target node is running
Name                           Value
----                           -----
PSVersion                      5.1.14393.3053
PSEdition                      Desktop
PSCompatibleVersions           {1.0, 2.0, 3.0, 4.0...}
BuildVersion                   10.0.14393.3053
CLRVersion                     4.0.30319.42000
WSManStackVersion              3.0
PSRemotingProtocolVersion      2.3
SerializationVersion           1.1.0.1


#### Version of the DSC module that was used ('dev' if using current dev branch)
Name         Version  Path
----         -------  ----
SqlServerDsc 13.2.0.0 C:\Program Files\WindowsPowerShell\Modules\SqlServerDsc\13.2.0.0\SqlServerDsc.psd1

The unit tests have always been running too long, this is due to the tests are too complex and (the code being tested) need to be broken down into smaller units (see issue https://github.com/PowerShell/SqlServerDsc/issues/979). Recently this issue has gotten worse and the tests run so long so that the CI can't complete before the timeout of 3 hours.

We need to refactor code in the offending resources and make sure the test runs optimally.
### Details of the scenario you tried and the problem that is occurring

I'm using the `SqlSetup` DSC resource to install a multi-node SQL cluster. The primary node uses the `InstallFailoverCluster` _Action_ parameter, while the secondary nodes use the `AddNode` _Action_.

This works fine on an *initial* install.

However, subsequent runs of the same code on the primary node fails. 
The SqlSetup resource runs through its Test function and then reports that the FailoverClusterIPAddress 'is not in the desired state for this cluster.' Of course, it then starts the Set function. IMHO, it shouldn't. Even if SQL is now active on another node in the cluster, the Test should still return that everything is in the desired state.

The SQLSetup resource proceeds to execute the Set function, but then that fails because Set also runs a Test and they don't agree.

**Note:** My code also includes a DSC Script that adds the IPs on the secondary nodes assigned for the SQL cluster as dependencies on the SQL Network cluster resource. 

e.g.:
<img width="438" alt="Screen Shot 2019-10-01 at 11 22 48 AM" src="https://user-images.githubusercontent.com/3866191/65976470-29afc080-e43e-11e9-942c-8ab45e13a4dc.png">

FWIW, subsequent runs on the secondary nodes (_AddNode_ action) works just fine.

#### Verbose logs showing the problem

FailoverClusterIPAddress is not in the 'desired state':
```
VERBOSE: [AUE1SQL001D]: [[SqlSetup]InstallPrimaryInstance] Clustered install, checking
parameters.
VERBOSE: [AUE1SQL001D]: [[SqlSetup]InstallPrimaryInstance] FailoverClusterIPAddress
'172.31.100.234' is not in the desired state for this cluster.
VERBOSE: [AUE1SQL001D]: LCM: [ End Test ] [[SqlSetup]InstallPrimaryInstance] in 5.5990 seconds.
VERBOSE: [AUE1SQL001D]: LCM: [ Start Set ] [[SqlSetup]InstallPrimaryInstance]
```

Set function fails because it doesn't match the Test:
```
PowerShell DSC resource MSFT_SqlSetup failed to execute Set-TargetResource functionality with error message: 
System.Exception: Test-TargetResource function returned false when Set-TargetResource function verified the desired state. 
This indicates that the Set-TargetResource did not correctly set set the desired state, 
or that the function Test-TargetResource does not correctly evaluate the desired state.
```

#### Suggested solution to the issue


#### The DSC configuration that is used to reproduce the issue (as detailed as possible)
```powershell
SqlSetup 'InstallPrimaryInstance' {
    Action                     = 'InstallFailoverCluster'
    ForceReboot                = $false
    UpdateEnabled              = 'False'
    SourcePath                 = '\\localhost\MSSQLmedia'
    # SourceCredential is only included to force the installer to first copy the media 
    # to a local location. Installation from a remote share does not work consistently.
    SourceCredential           = $ADCredentials
    InstanceName               = $SQLInstanceName
    Features                   = 'SQLENGINE,Replication,FullText,DQ'
    InstallSharedDir           = 'C:\Program Files\Microsoft SQL Server'
    InstallSharedWOWDir        = 'C:\Program Files (x86)\Microsoft SQL Server'
    InstanceDir                = 'C:\Program Files\Microsoft SQL Server'
    SQLCollation               = 'SQL_Latin1_General_CP1_CI_AS'
    SQLSvcAccount              = $SQLPSCredentials
    AgtSvcAccount              = $SQLPSCredentials
    SQLSysAdminAccounts        = $DomainAdminUser, $SQLAdminUserAD
    # Using Cluster Shared Volume
    InstallSQLDataDir          = "C:\ClusterStorage\SQL"
    FailoverClusterNetworkName = $SQLClusterNetworkName
    FailoverClusterIpAddress   = $SQLClusterIP
    PsDscRunAsCredential       = $ADCredentials
    DependsOn                  = '[WindowsFeature]NetFramework35', '[WindowsFeature]NetFramework45', '[xSmbShare]MSSQLMedia'
}
```

#### SQL Server edition and version the target node is running

Enterprise Edition 14.0.1000.169 (2017)

#### SQL Server PowerShell modules present on the target node
```
Name      Version    Path
----      -------    ----
SqlServer 21.1.18147 C:\Program Files\WindowsPowerShell\Modules\SqlServer\21.1.18147\SqlServer.psd1
SQLPS     14.0       C:\Program Files (x86)\Microsoft SQL Server\140\Tools\PowerShell\Modules\SQLPS\SQLPS.psd1
```

#### The operating system the target node is running
```
OsName               : Microsoft Windows Server 2019 Datacenter
OsOperatingSystemSKU : DatacenterServerEdition
OsArchitecture       : 64-bit
WindowsVersion       : 1809
WindowsBuildLabEx    : 17763.1.amd64fre.rs5_release.180914-1434
OsLanguage           : en-US
OsMuiLanguages       : {en-US}
```

#### Version and build of PowerShell the target node is running
```
Name                           Value
----                           -----
PSVersion                      5.1.17763.503
PSEdition                      Desktop
PSCompatibleVersions           {1.0, 2.0, 3.0, 4.0...}
BuildVersion                   10.0.17763.503
CLRVersion                     4.0.30319.42000
WSManStackVersion              3.0
PSRemotingProtocolVersion      2.3
SerializationVersion           1.1.0.1
```

#### Version of the DSC module that was used ('dev' if using current dev branch)
`SqlServerDsc 13.1.0.0 C:\Program Files\WindowsPowerShell\Modules\SqlServerDsc\13.1.0.0\SqlServerDsc.psd1`

#### Details of the scenario you tried and the problem that is occurring
I am using SqlAGDatabase with the win_dsc module in Ansible in order to add the databases to the AG. When i try to add the database **(already in sync in the AG between WIN_PRI-1(primary) and SEC-WIN-1(secondary)** in the 2nd replica SEC-WIN-2 using the SqlAGDatabase it gets added but does not sync

#### The DSC configuration that is used to reproduce the issue (as detailed as possible)
```powershell
SqlAGDatabase 'TestAGDatabaseMemberships'
            {
                       AvailabilityGroupName   = $Node.AvailabilityGroupName
                       BackupPath              = '\\SQL1\AgInitialize'
                       DatabaseName            = 'DB*', 'AdventureWorks'
                       InstanceName            = $Node.InstanceName
                       ServerName              = $Node.NodeName
                       Ensure                  = 'Present'
                       ProcessOnlyOnActiveNode = $true
                       PsDscRunAsCredential    = $SqlAdministratorCredential
            }
But the above i am passing as below via Ansible
- name: Add Database to Always On Availability Group in WINSER1
  win_dsc:
       resource_name: SqlAGDatabase
       DatabaseName: D*, Test*
       ServerName: WINSER1
       InstanceName: MSSQLSERVER
       AvailabilityGroupName: TEST_AG
       BackupPath: \\WINSER1\backup_demo
       Ensure: Present
       ReplaceExisting: true
```

#### SQL Server edition and version the target node is running
```
Microsoft SQL Server 2016 (SP2) (KB4052908) - 13.0.5026.0 (X64) 
```

#### SQL Server PowerShell modules present on the target node
```
Name      Version    Path
----      -------    ----
SqlServer 21.1.18147 C:\Program Files\WindowsPowerShell\Modules\SqlServer\21.1.18121\SqlServer.psd1
SQLPS     14.0       C:\Program Files (x86)\Microsoft SQL Server\130\Tools\PowerShell\Modules\SQLPS\SQLPS.psd1
```

#### The operating system the target node is running
```
OsName               : Microsoft Windows Server 2012 R2 Datacenter
OsOperatingSystemSKU : DatacenterServerEdition
OsArchitecture       : 64-bit
WindowsBuildLabEx    : 9600.17415.amd64fre.winblue_r4.141028-1500
OsLanguage           : en-US
OsMuiLanguages       : {en-US}
```

#### Version and build of PowerShell the target node is running
```
Name                           Value                                           
----                           -----                                           
PSVersion                      5.1.14409.1005                                  
PSEdition                      Desktop                                         
PSCompatibleVersions           {1.0, 2.0, 3.0, 4.0...}                         
BuildVersion                   10.0.14409.1005                                 
CLRVersion                     4.0.30319.42000                                 
WSManStackVersion              3.0                                             
PSRemotingProtocolVersion      2.3                                             
SerializationVersion           1.1.0.1
```

#### Version of the DSC module that was used ('dev' if using current dev branch)
```
Name         Version  Path                                                     
----         -------  ----                                                     
SqlServerDsc 13.2.0.0 C:\Program Files\WindowsPowerShell\Modules\SqlServerDsc\13.2.0.0\SqlServerDsc.psd1
```
<img width="652" alt="issue" src="https://user-images.githubusercontent.com/46727623/66160885-b5953880-e648-11e9-9fa8-71fe5f6f2c41.PNG">
