## Motivation

When using `printSchema` it's implementation will automatically sort all types by names. 
While for user types scalars and their types this makes sense. for very large schemas finding mutation, query etc. can be challenging without using find. Working with that schema layout is also hard as it is usually better to have mutations and queries together. 

I heard opinions from the community that would expect schema to be organized the same way as it was before printing was applied. Print schema is often used by some CLI tools where we just want to append some specific object to the schema while operating on ast objects rather than strings. Because of the lack of flexibility from reference implementation, the most use cases of schema operations I have seen were still string-based. It will be amazing to see print schema being used more for those use cases.

# How this could be done

## Always put queries/mutations on the bottom of printed schema

This is implemented in this PR as I thought that it will be the least controversial change, but it looks like it is causing failures to some tests that rely on print schema order. 
I wanted to make sure that the community will get that behavior out of the box without using some advanced functions etc. Ideally, Scalars and directives could be also reorganized

## Allow developers to apply their own sorting function 

Currently, the order of the types is not preserved as they are stored in type map. 
What it means is if users organized schema to their liking in DSL and then we parsed that into object original order is lost (not 100% sure about this but this is what I see happening)

To be able to get some organization when printing schema separate sorting function can be applied. For example, first, go scalars and directives. Then user types alphabetical order. Then Queries, Mutations. Subscriptions. This seems to be a tradeoff  

This can be done by adding additional parameter and exposing printFilteredSchema for advanced use cases



The Coercion functions for Scalars are currently named:

1. serialize: this is result or output coercion  
2. parseValue: this is runtime object input coercion 
3. parseLiteral: this is Ast literal input coercion 
4. (See #1817): serializeAsLiteral this takes an input value and converts it to an Ast literal 

I don't think the current names align very well with the spec: the spec talks about "Result Coercion" and "Input Coercion". Also `parseValue` doesn't parse anything, but convert a runtime input value to an internal value.

In my mental model `parseValue` and `parseLiteral` produce a `internalInputValue` and `serializeAsLiteral` converts the `internalInputValue` to a `literal`.

First rough idea (I am sure we can do better, just to start the discussion)

1. `coerceOutput` or `coerceResult` (the spec talks about result coercion, but output would mirror input)
2. `coerceInputValue`
3. `coerceInputLiteral`
4. `coerceInternalValueAsLiteral`

In GraphQL Java we are also thinking about renaming (and adding a 4th one) and it would be great to have a discussion about a more clear naming.


# Feature requests
Would a `canonicalize(node)` or `normalize(node)` utility be a desirable feature? I started [working on one](https://github.com/micimize/graphql-to-dart/blob/5de6b0e2cf51ce1a9a049d892a0f1dbfa50aafb2/src/canonicalize.ts) to simplify some aspects of ast-based code generation, though all it does right now is merge duplicate fields

I don't think it should inline fragments or anything like that (though maybe conditionally). Maybe we'd need to spec out exactly what a canonical document form would actually look like though
Actually a bug fix but since it's affect introspection can be a small breaking change.
At [1stdibs](https://www.1stdibs.com/), our GraphQL server is built on top of [Apollo Server](https://github.com/apollographql/apollo-server). We were first introduced to the concept of the `@defer` directive through an [Apollo blog post](https://blog.apollographql.com/introducing-defer-in-apollo-server-f6797c4e9d6e) detailing an experimental implementation. We attempted to resurrect this initiative by creating an [up-to-date pull request](https://github.com/apollographql/apollo-server/pull/2181) (in hopes of that getting merged); however, it became clear to us over time that support for a `@defer` directive would occur only if it would make it's way into the official GraphQL spec. There has been discussion on [this issue](https://github.com/graphql/graphql-spec/issues/269) to add `@defer` to the spec, but it seems it's still in its infancy!

Since then, Relay has added support for `@defer` and `@stream`, but there are no open source GraphQL servers that support its implementation.

This pull request is a proposal for a Relay compatible `@defer` and `@stream` directive. The main distinction between the Relay implementation of `@defer` and that of Apollo's is that the `@defer` directive is supported on a fragment spread and inline fragment instead of on an individual field. 

Furthermore, this pull request is implemented according to our understanding of Relay’s support for `@defer` and `@stream`. We outlined a few examples here: https://gist.github.com/robrichard/f563fd272f65bdbe8742764f1a149b2b

This is a feature we are very passionate about at 1stdibs and would be interested in working with contributors in any way possible!

Sketch RFC: https://github.com/graphql/graphql-spec/blob/master/rfcs/DeferStream.md
Hello to all,
this PR allows to support the @defer directive. Although the implementation is mostly complete, the PR is in draft to discuss it together and evaluate its integration.

In the PR I also created tests and I performed the integration tests with Relay, express-graphql & [fetch-multipart-graphql](https://github.com/relay-tools/fetch-multipart-graphql) with positive results.

In summary how I implemented defer:
  * @defer has two arguments:
     * if (optional, default true) the fragment is defer when true.
     * label (required) used to distinguish deferred fragments
  * @defer currently provides only FRAGMENT_SPREAD & INLINE_FRAGMENT (Relay) as location, but support for FIELD (Apollo) is commented in the PR https://github.com/graphql/graphql-js/blob/4226f231f74ad30c5e20a3ca3289417af8058ba1/src/execution/execute.js#L663-L668
  * I added `resolverResult: ResultResolver` new property in ExecutionContext which allows the management of the results to be returned at the end of the execution
  * modified execute function now its return type is `AsyncIterable<Promise<ExecutionResult> | PromiseOrValue<ExecutionResult>; `. Using `isAsyncIterable (result)` it is possible to distinguish if there are deferred results.
  * fields that are marked as deferred are resolved after the resolution of the previous result. I also implemented an optimization to avoid solving the same field multiple times.

this is a slow motion gif of how it works.
![deferred](https://user-images.githubusercontent.com/2670647/71583453-cb62ae80-2b0e-11ea-89b6-126577ebf184.gif)


Let me know if more information is needed.

Thank you
Lorenzo
We have some Node specific code in our codebase and it works fine but we can't fallback mechanism.
For example, we use `Error.captureStackTrace` if available but it's always available in Node so we never tested this code:
https://github.com/graphql/graphql-js/blob/576682fe691deaab79970ef103f3013508a4c587/src/error/GraphQLError.js#L203-L210
Hi @IvanGoncharov! I just wanted to check in on the roadmap to v15. I missed the last WG meeting, so perhaps this was discussed and I just didn't see it on the notes.

I know that previously we had discussed releasing 15 quickly (last month or so) with the existing breaking changes, and then releasing v16 with the TypeScript rewrite in early 2020, to corresponding with the next cut of the spec.

Is this still the game plan? There are several pieces sitting in master (such as intermediate interfaces) that could provide immediate value. If we're waiting on any other pieces, let me know and I can try to get some time over the next couple weeks to work on them.