<!--
Thank you for helping to improve Crossplane!

Please be sure to search for open issues before raising a new one. We use issues
for bug reports and feature requests. Please find us at https://slack.crossplane.io
for questions, support, and discussion.
-->

### What problem are you facing?
<!--
Please tell us a little about your use case - it's okay if it's hypothetical!
Leading with this context helps frame the feature request so we can ensure we
implement it sensibly.
--->

As part of the template stacks work, we want to migrate the app.yaml to a file named stack.yaml. The stack.yaml lives at the root of the stack resource folder. Or, for stacks which are just git repositories, it lives at the root of the repository.

### How could Crossplane help solve your problem?
<!--
Let us know how you think Crossplane could help with your use case. 
-->

We'll want to migrate this in a backwards-compatible way, so the phases will be something like this:

* Support both app.yaml and stack.yaml in the stack manager, but change all of tooling to generate stack.yaml, and change all of the documentation to talk about stack.yaml instead of app.yaml
* Change all of our stacks to use stack.yaml instead of app.yaml, and to build them into the right location in the stack
* Notify all of the stack owners that we know of that the migration is occurring
* Eventually, stop supporting app.yaml


<!--
Thank you for helping to improve Crossplane!

Please be sure to search for open issues before raising a new one. We use issues
for bug reports and feature requests. Please find us at https://slack.crossplane.io
for questions, support, and discussion.
-->

### What problem are you facing?
<!--
Please tell us a little about your use case - it's okay if it's hypothetical!
Leading with this context helps frame the feature request so we can ensure we
implement it sensibly.
--->

As part of developing template stacks, we'll want to have automated integration testing set up. Testing should be happening as part of all of the work that we're doing, but I'm opening a separate ticket to track the initial set up because the research and initial spin-up work could take longer than the incremental improvements to the tests.

### How could Crossplane help solve your problem?
<!--
Let us know how you think Crossplane could help with your use case. 
-->

There's already a manual integration test, but we'll want it to be as automated as possible. This could mean using one of the existing end-to-end testing harnesses that we have in the repo. It could also involve using the kudo test framework.

Other suggested lines of research:

* [Test API Servers](https://github.com/kubernetes-sigs/controller-runtime/blob/efbeb2728794b105247bbf27c76a5c4949a73010/FAQ.md#q-how-should-i-write-tests--any-suggestions-for-getting-started) (controller-runtime)
* [Test clusters](https://github.com/kubernetes/community/blob/master/contributors/devel/sig-testing/e2e-tests.md) (sig-testing)
<!--
Thank you for helping to improve Crossplane!

Please be sure to search for open issues before raising a new one. We use issues
for bug reports and feature requests. Please find us at https://slack.crossplane.io
for questions, support, and discussion.
-->

### What problem are you facing?
<!--
Please tell us a little about your use case - it's okay if it's hypothetical!
Leading with this context helps frame the feature request so we can ensure we
implement it sensibly.
--->

As part of creating the template stack controller, we've integrated an early version of the controller with the stack manager. However, we'd like to have the controller be more robust and hardened before we consider it ready for general consumption. Currently, a user must explicitly enable it by hand if they want to use it.

### How could Crossplane help solve your problem?
<!--
Let us know how you think Crossplane could help with your use case. 
-->

I'm going to start by dropping a bunch of miscellaneous items in here, and then we can reorganize them or split them out in the future.

* [ ] There is only ever one template rendering per CR; duplicate events should be deduped
* [ ] Error reporting is complete enough to be helpful for debugging; errors should be logged and recorded
* [ ] Helm chart should support a parameter for enabling template stack support when the chart is installed
* [ ] Parent-child relationships are tracked, so that users and garbage collection can discover the relationships
* [ ] RBAC permissions are set correctly
* [ ] Parameterize helper images where used, as suggested [in this comment](https://github.com/crossplaneio/crossplane/pull/1131#discussion_r365272573)
* [ ] Template stack controller failure should not affect stack manager failure
* [ ] Template stack controller should gracefully handle a CRD not existing yet
* [ ] Use directories other than `/usr/share` as the helm2 engine working directories
* [ ] Helper image sizes are optimized (we may move this into a separate issue). For example, by using alpine instead of ubuntu.
* [ ] Improve code coverage for the template stacks code to 80% test coverage
* [ ] Improve management of image id tags in a way that works well for local testing and in production. `:latest` with no image pull policy sets the pull policy to `Always`, which isn't good for local development
* [ ] I was noticing these in the logs recently when integration testing locally:
```
E0115 17:42:53.166691   54613 reflector.go:123] github.com/crossplaneio/crossplane/.work/pkg/pkg/mod/k8s.io/client-go@v0.0.0-20190918160344-1fbdaa4c8d90/tools/cache/reflector.go:96: Failed to list *unstructured.Unstructured: the server could not find the requested resource
```
* [ ] The template stack controller should support running in a hosted crossplane control cluster, which has special considerations
* [ ] The template stack controller's render phase should run with appropriate permissions. Any jobs which are created should also run with appropriate permissions
<!--
Thank you for helping to improve Crossplane!

Please be sure to search for open issues before raising a new one. We use issues
for bug reports and feature requests. Please find us at https://slack.crossplane.io
for questions, support, and discussion.
-->

### What problem are you facing?
<!--
Please tell us a little about your use case - it's okay if it's hypothetical!
Leading with this context helps frame the feature request so we can ensure we
implement it sensibly.
--->

In #1131, we worked on creating a first version of the shared template stack controller, in an experimental state. As we reviewed and discussed the changes, we realized our [existing frameworks for determining whether a changeset is ready for merging](https://github.com/crossplaneio/crossplane/blob/master/design/one-pager-definition-of-done.md) didn't quite cover the situation we were in, because we were intentionally merging something which is experimental and which must be explicitly enabled by someone who knows they want to use it.

### How could Crossplane help solve your problem?
<!--
Let us know how you think Crossplane could help with your use case. 
-->

We should think more about how we want to handle new, unproven, experimental features or systems that we're developing. Some considerations would include:

* What's the definition of done?
* How do we get them merged without them potentially affecting existing functionality?
* How do we explain experimental things to users, to set expectations properly?
* What sort of test coverage do we want in this type of situation?
<!--
Thank you for helping to improve Crossplane!

Please be sure to search for open issues before raising a new one. We use issues
for bug reports and feature requests. Please find us at https://slack.crossplane.io
for questions, support, and discussion.
-->

### What problem are you facing?
<!--
Please tell us a little about your use case - it's okay if it's hypothetical!
Leading with this context helps frame the feature request so we can ensure we
implement it sensibly.
--->

We want to have the template stacks experience evolve over time while also having a solid plan for what the First Edition of it will do and look like.

This is a continuation of a discussion around [a gist](https://gist.github.com/suskin/a188b0eec7a62b96ef96054fb06f9eba); the discussion was happening on the gist and over email. I want to move it into an issue so it's easier for others to follow along.

### How could Crossplane help solve your problem?
<!--
Let us know how you think Crossplane could help with your use case. 
-->

Here's a [gist where the experience is being sketched and discussed](https://gist.github.com/suskin/a188b0eec7a62b96ef96054fb06f9eba).

The result of this issue is that the discussion will be settled down and there'll be a plan.

### Related links

This is related to a separate [discussion about how to incorporate the kustomize engine](https://github.com/suskin/stack-template-engine/pull/4) into the template stacks experience; that discussion explores options for configuring the transformation of values from a CR to a rendered kustomization.

### What problem are you facing?
was talking with @jbw976 @displague and @rathpc and would like to add a targeted variant of [gcp-credentials.sh](https://github.com/crossplaneio/crossplane/blob/master/cluster/examples/gcp-credentials.sh) to [stack-gcp-minimal](https://github.com/crossplaneio/stack-gcp-minimal) that accept command-line variables or env variables for PROJECT_ID that (a) skips all the prompts if PROJECT_ID is specified and (b) only outputs the creds JSON, so we can provide easy bootstrap instructions so users can:
1. curl | bash [gcp-credentials.sh](https://github.com/crossplaneio/crossplane/blob/master/cluster/examples/gcp-credentials.sh) from an EasyGCP getting started page
1. copy / paste the output of this curl | bash command into the `Provider Secret`

Note that [stack-gcp-minimal](https://github.com/crossplaneio/stack-gcp-minimal) is designed to be forked/copied so infra owners can create a custom infra configs, with more or less resources created as part of their standard configs, which may in turn require more of less service permissions that the generated creds needs to have access to. Keeping the creds init script (secret / service account creation / permissions granting) in the [stack-gcp-minimal](https://github.com/crossplaneio/stack-gcp-minimal) repo is a more maintainable pattern that also simplifies the customization UX when forking/copying.

### How could Crossplane help solve your problem?
Add a targeted variant of [gcp-credentials.sh](https://github.com/crossplaneio/crossplane/blob/master/cluster/examples/gcp-credentials.sh) to [stack-gcp-minimal](https://github.com/crossplaneio/stack-gcp-minimal)as above.

https://github.com/crossplaneio/stack-gcp-minimal/pull/2

<!--
Thank you for helping to improve Crossplane!

Please be sure to search for open issues before raising a new one. We use issues
for bug reports and feature requests. Please find us at https://slack.crossplane.io
for questions, support, and discussion.
-->

### What happened?

Helm 3 enforces validation of the resources before deploying them and that means sending them over to cluster's validation endpoint and fetching the result back. However, in Kubernetes 1.15 and above versions, `DeploymentSpec` object has a few fields typed `IntOrString` which results in the following validation which is not supported by Kubernetes before 1.15:
```yaml
maxUnavailable:
  anyOf:
  - type: integer
  - type: string
  x-kubernetes-int-or-string: true
```

<!--
Please let us know what behaviour you expected and how Crossplane diverged from
that behaviour.
-->


### How can we reproduce it?

Get a 1.13 or 1.14 Kubernetes cluster and try to install Crossplane with Helm 3. Or you can just run the following to see the error:
```
helm3 template crossplane-alpha/crossplane
```
The following works just fine skipping the validation:
```
helm3 --validate=false template crossplane-alpha/crossplane
```
So, you can do the following:
```
helm3 --validate=false template crossplane-alpha/crossplane | kubectl --validate=false -n crossplane-system apply -f -
```

Helm 2 works OK, kubectl allows disabling the validation if you'd like, but Helm3 does not provide a flag for disabling the validation.



<!--
Help us to reproduce your bug as succinctly and precisely as possible. Artifacts
such as example manifests or a script that triggers the issue are highly
appreciated!
-->

### What environment did it happen in?
Crossplane version: 0.6.0
Helm: 3.0.2
Kubernetes: 1.13.11

<!--
Include at least the version or commit of Crossplane you were running. Consider
also including your:

* Cloud provider or hardware configuration
* Kubernetes version (use `kubectl version`)
* Kubernetes distribution (e.g. Tectonic, GKE, OpenShift)
* OS (e.g. from /etc/os-release)
* Kernel (e.g. `uname -a`)
-->

# Description of your changes

Adds more context to the Stacks Guide about the KubernetesApplication resource being created by the Wordpress Stack.

The additional text here helps to explain the mention of `KubernetesApplication` that immediately follows these changes:

> `# Get the name of the Kubernetes Application resource which is the top level workload definiton for our Wordpress instance`

Related to #1168 

### Checklist
<!--
Please run through the below readiness checklist. The first two items are
relevant to every Crossplane pull request.
-->
I have:
- [ ] Run `make reviewable` to ensure this PR is ready for review.
- [ ] Ensured this PR contains a neat, self documenting set of commits.
- [ ] Updated any relevant [documentation] and [examples].
- [ ] Reported all new error conditions into the log or as an event, as
  appropriate.

For more about what we believe makes a pull request complete, see our
[definition of done].

[documentation]: https://github.com/crossplaneio/crossplane/tree/master/docs
[examples]: https://github.com/crossplaneio/crossplane/tree/master/cluster/examples
[definition of done]: https://github.com/crossplaneio/crossplane/tree/master/design/one-pager-definition-of-done.md

<!--
Thank you for helping to improve Crossplane!

Please be sure to search for open issues before raising a new one. We use issues
for bug reports and feature requests. Please find us at https://slack.crossplane.io
for questions, support, and discussion.
-->

### What problem are you facing?
<!--
Please tell us a little about your use case - it's okay if it's hypothetical!
Leading with this context helps frame the feature request so we can ensure we
implement it sensibly.
--->

We have an encountered a few recent situations where API docs have not been regenerated when a new type has been added or an existing one has been updated.

### How could Crossplane help solve your problem?
<!--
Let us know how you think Crossplane could help with your use case. 
-->

We should check that generating API docs does not cause a dirty branch in our Jenkins PR pipelines when we run `check-diff`.
Environment roles, which can be easily identified by their `crossplane.io/scope: "environment"` labels, should not be confused with the `crossplane-admin` role. @lukeweber pointed out that the current assignments of `environment` scope labels includes `crossplane-admin`.

The `crossplane-admin` clusterrole should not have the `environment` scope label.

While included as an example, this was not the intention of https://github.com/crossplaneio/crossplane/blob/master/design/one-pager-stacks-security-isolation.md#default-crossplane-clusterroles

This PR changes the `crossplane.io/scope` label used for the `crossplane-admin` to `system` and updates the design doc to match the intention.
<!--
Briefly describe what this pull request does. Be sure to direct your reviewers'
attention to anything that needs special consideration.

We love pull requests that resolve an open Crossplane issue. If yours does, you
can uncomment the below line to indicate which issue your PR fixes, for example
"Fixes #500":

Fixes #
-->

### How has this code been tested?

This scope is not used by aggregation, so it does not affect any generated roles. Only discoverability has changed:

```
$ kubectl get clusterrole -l crossplane.io/scope=environment
NAME                   AGE
crossplane-env-admin   31m
crossplane-env-edit    31m
crossplane-env-view    31m
$ kubectl get clusterrole -l crossplane.io/scope=system
NAME               AGE
crossplane-admin   31m
```
<!--
Before reviewers can be confident in the correctness of a pull request,
it needs to tested and shown to be correct. In this section, briefly
describe the testing that has already been done or which is planned.
-->

### Checklist
<!--
Please run through the below readiness checklist. The first two items are
relevant to every Crossplane pull request.
-->
I have:
- [ ] Run `make reviewable` to ensure this PR is ready for review.
- [ ] Ensured this PR contains a neat, self documenting set of commits.
- [ ] Updated any relevant [documentation] and [examples].
- [ ] Reported all new error conditions into the log or as an event, as
  appropriate.

For more about what we believe makes a pull request complete, see our
[definition of done].

[documentation]: https://github.com/crossplaneio/crossplane/tree/master/docs
[examples]: https://github.com/crossplaneio/crossplane/tree/master/cluster/examples
[definition of done]: https://github.com/crossplaneio/crossplane/tree/master/design/one-pager-definition-of-done.md
