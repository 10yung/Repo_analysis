Hi, I would be interesting in adding league positions and team form into an analysis.  It would be useful if I could get info on each time , with regards to position in league. shots/shots on target ect. for each of the teams in a specific match. It probably already been done, but I want to weight a match prediction based on the recent league position and how the team has performed against other teams close or further away from them in the league. Getting the league table data and all other stats for a team with a time stamp or period would be useful. is there anyway I can get week by week league table data? 

thanks

Garry
All of the other datasets were updated with the exception of champs. Can you please post some code in champs.r that pulls in the most recent results and appends it to the older data?
1. Fantastic package!
2. england_current() returns the same column names as in data(england), but the column types are different. For example, division is numeric whereas it is a character in data(england). 

This causes an error when trying to bind these rows with dplyr::bind_rows().

Would work much better if these were all the same. Either all characters or numeric.
Hi James. I trust you are well. Here are the deductions for the safrica data...

https://gist.github.com/sibusiso16/113e3b773fdc6952708bba944381653e

to add - Brazil league data
Just posting a helper function for manually adding new results to the results dataframe in case you want to include it in the package. I often find myself wanting to analyse the latest results before the football-data.co.uk CSVs have been updated so this comes in handy. It uses the `matchTeamnames()` function described [here](https://github.com/jalapic/engsoccerdata/issues/41).

```{r}
addResult <- function(home, visitor, hgoal, vgoal, Date = Sys.Date(), division = 1, tier = 1, Season = 2017) {
  
  home <- matchTeamnames(home)
  visitor <- matchTeamnames(visitor)
  
  FT <- paste0(hgoal, "-", vgoal)
  totgoal <- hgoal + vgoal
  goaldif <- hgoal - vgoal
  result <- ifelse(hgoal > vgoal, "H", ifelse(hgoal < vgoal, "A", "D"))
  
  df <- data.frame(Date, Season, home, visitor, FT, hgoal, vgoal, division, tier, totgoal, goaldif, result)
  
  rbind(england, df) %>% 
    arrange(Date)
}
```

Example usage:

```
addResult("Man City", "Stoke", 7, 2, Sys.Date() - 1) %>% 
  tail(2)

#             Date Season             home    visitor  FT hgoal vgoal division tier totgoal goaldif result
#194110 2017-10-01   2017 Newcastle United  Liverpool 1-1     1     1        1    1       2       0      D
#194111 2017-10-14   2017  Manchester City Stoke City 7-2     7     2        1    1       9       5      H
```
Just a possible improvement that I've used in recent blog posts; a function which matches team names from another dataset onto `engsoccerdata` team names.

For each team name in a vector, it finds the highest similarity string in `name_other` variable of `teamnames` dataframe (using the `levenshteinSim` function from the `RecordLinkage` package).

Works well for me so far but untested with non-England teams.

```
#---------------------------------------------------------------------------
# matchTeamnames()
#---------------------------------------------------------------------------
# Matches a vector of team names with names used by 'teamnames' dataframe in
# engsoccerdata package
#---------------------------------------------------------------------------
# * Inputs a vector of team names outputs the original 
#   dataframe with new teamname in column 'team' and old teamname in column 
#   'team_old'
# * 'min_dist' specifies lowest similarity threshold for a match; if all
#   possible matches for a team are below this value, returns 'NA'
# * Returns a vector by default; if checkResults' is TRUE, returns a 
#   dataframe of old names and best matches for purposes of validation
#---------------------------------------------------------------------------
matchTeamnames <- function(teams, min_dist = 0.1, checkResults = FALSE) {
  require(engsoccerdata)
  require(RecordLinkage)
  require(dplyr)
  
  teams <- as.character(teams)
  
  old_new_df <- lapply(unique(teams), function(x) {
    distance <- levenshteinSim(as.character(x), as.character(teamnames$name_other))
    # threshold on distance
    new_name <- ifelse(max(distance, na.rm=T) >= min_dist, as.character(teamnames[which.max(distance),]$name), "NA")
    
    old_new_df <- data.frame(old_name = x, new_name, distance = max(distance, na.rm=T), stringsAsFactors = FALSE)
  }) %>%
    plyr::rbind.fill()
  
  if(checkResults) {
    return(old_new_df)
  } else {
    teams <- old_new_df$new_name[match(teams, old_new_df$old_name)]
    return(teams)
  }
}
```
Have German data - need to add for France, Holland, Italy, Spain - even if not all years just yet.
Teamnames for leagues portugal, belgium, scotland, greece, turkey are not necessarily consistent with teamnames in champions league dataset - this needs to be fixed.


Similarly, check facup teamnames dataset and check consistency of non-league teams with `england5`
Need to add playoff fixtures from other competitions e.g. scotland