Updates [org.scala-sbt:sbt](https://github.com/sbt/sbt) [from 1.3.6 to 1.3.7](https://github.com/sbt/sbt/compare/v1.3.6...v1.3.7).
[Release Notes/Changelog](https://github.com/sbt/sbt/releases/tag/v1.3.7)

I'll automatically update this PR to resolve conflicts as long as you don't change it yourself.

If you'd like to skip this version, you can just close this PR. If you have any feedback, just mention me in the comments below.

Have a fantastic day writing Scala!

<details>
<summary>Ignore future updates</summary>

Add this to your `.scala-steward.conf` file to ignore future updates of this dependency:
```
updates.ignore = [ { groupId = "org.scala-sbt", artifactId = "sbt" } ]
```
</details>

labels: library-update, semver-patch
I was just migrating to scala 2.13 and realised, that the only collections related migration I had to do, was with JsObject. I was using this two fields

```
  /**
   * The fields of this JsObject in the order passed to the constructor
   */
  lazy val fields: collection.Seq[(String, JsValue)] = underlying.toSeq

  /**
   * The value of this JsObject as an immutable map.
   */
  lazy val value: Map[String, JsValue] = underlying match {
    case m: immutable.Map[String, JsValue] => m
    case m                                 => m.toMap
  }
```

What I found interesting is, that even the second comment says `immutable map` and `underlying.toSeq` is returning an `immutable.Seq` the return values are `collection.Map`and `collection.Seq`. This seems odd to me. Especially because immutable collections should be considered the default, since it is what is defined in predef now (2.13).

Are there any good reasons to not change this to immutable?
http://reactivemongo.org/releases/0.1x/documentation/bson/typeclasses.html
The build in Travis-CI doesn't exercise the `docs/build.sbt` or forces the `sbt.version` to use for that build.

That is: https://github.com/playframework/play-json/pull/145 was merged without addressing https://github.com/playframework/play-json/pull/145#issuecomment-365727821
- Implicit conversions between `JValue` <=> `JsValue`
- Instances for Play typeclasses `Reads` and `Writes` based on implicit instances of JSON4S `Reader` and `Writer`
- Instances for JSON4 typeclass `Reader` and `Writer` based on implicit instances of Play `Reads` and `Writes`
I've a compile error with PlayJson macro and `cats.data.Newtype`.

More details and a reproducible failing snippet here: 
https://github.com/typelevel/cats/issues/2582
If would we awesome if sbt release process will have additional step with modifying README with latest version before commiting version changes.

As an example we can take: https://github.com/bot4s/telegram/blob/master/project/TelegramBot4sRelease.scala
# Pull Request Checklist

* [x] Have you read through the [contributor guidelines](https://www.playframework.com/contributing)?
* [ ] Have you signed the [Typesafe CLA](https://www.typesafe.com/contribute/cla)?
* [ ] Have you [squashed your commits](https://www.playframework.com/documentation/latest/WorkingWithGit#Squashing-commits)?
* [ ] Have you added copyright headers to new files?
* [ ] Have you updated the documentation?
* [x] Have you added tests for any changed functionality?

## Fixes

Doesn't have a ticket

## Purpose

Often I have or use java enums in my projects and have to serialize or deserialize them in json context.
So i wrote a generic solution for doing this and want give it back to the comunity.

## Background Context

Because i got sick of duplicating code :)

## References

Are there any relevant issues / PRs / mailing lists discussions?

### Play JSON Version (2.5.x / etc)

2.6.9

### API (Scala / Java / Neither / Both)

Scala

### Operating System (Ubuntu 15.10 / MacOS 10.10 / Windows 10)

macOS 10.13.6

### JDK (Oracle 1.8.0_72, OpenJDK 1.8.x, Azul Zing)

java version "1.8.0_172"
Java(TM) SE Runtime Environment (build 1.8.0_172-b11)
Java HotSpot(TM) 64-Bit Server VM (build 25.172-b11, mixed mode)

### Library Dependencies

N/A

### Expected Behavior

```
scala> :paste
// Entering paste mode (ctrl-D to finish)

import play.api.libs.json._

val js = Json.parse("""{
                       |  "a": 1,
                       |  "b": 2,
                       |  "c": 3
                       |}""".stripMargin)
val removeAAndB = (__ \ 'a).json.prune andThen (__ \ 'b).json.prune
val removeAAndBPickD = removeAAndB andThen (__ \ 'd).json.pick

// Exiting paste mode, now interpreting.

import play.api.libs.json._
js: play.api.libs.json.JsValue = {"a":1,"b":2,"c":3}
removeAAndB: play.api.libs.json.Reads[play.api.libs.json.JsObject] = play.api.libs.json.Reads$$anon$8@29d080fc
removeAAndBPickD: play.api.libs.json.Reads[play.api.libs.json.JsValue] = play.api.libs.json.Reads$$anon$8@1ed855bd

scala> removeAAndB.reads(js)
res0: play.api.libs.json.JsResult[play.api.libs.json.JsObject] = JsSuccess({"c":3},/a/b)

scala> removeAAndBPickD.reads(js)
res1: play.api.libs.json.JsResult[play.api.libs.json.JsValue] = JsError(List((/a/b/d,List(JsonValidationError(List(error.path.missing),WrappedArray())))))
```

Should evaluate to:
```
JsError(List((/d,List(JsonValidationError(List(error.path.missing),WrappedArray())))))
```

### Actual Behavior

It evaluates to:
```
JsError(List((/a/b/d,List(JsonValidationError(List(error.path.missing),WrappedArray())))))
```

The issue is that prune is effectively repathing the result and so it does not compose properly with subsequent `Reads`. It makes sense to use the path in the error cases but not success.

### Reproducible Test Case

See above.
## Issue
If a Java/Scala Long value is converted to JSON, then naturally I expect that it will be represented as JSON number. But counter-intuitively the Long value can be too large for javascript and therefore, it isn't good idea to represent as JSON number.

For an example you can take Long.MaxValue and try it out with browser's console. In my case the last four digits fail.
```
>>> var longVal = {"count" : 9223372036854775807}
>>> longVal 
Object { count: 9223372036854776000 }
```

### Actual Behavior
Play-json represents Long as JSON number. 

```Scala
println("[play-json] " + Json.toJson(Long.MaxValue) )
[play-json] 9223372036854775807
```

### Expected Behavior
As [Î¼Pickle](http://www.lihaoyi.com/upickle/) the Long value should be represented as JSON string.

```Scala
println("[upickle] " + write(Long.MaxValue) )
[upickle] "9223372036854775807"
```

### Tested Version 
- play-json 2.6.7
- upickle 0.6.6
- firefox 60.0.2
