## Things Done:
- Updated gemfile to support rails 6.
- Ran a bundle update to update all gems.
- Added additional configuration to the travis yml to test rails version 6.
  - Bumped ruby version to 2.5.7
  - Accept sqllite3 gem version from env to allow diff versions to be tested. 

Resolves: #157 
Hello,

could you please provide a minimal example of how to populate the database, assuming the table and the fields exist. Usual rails example doesn't work.

```
country_list = [
  [ "Germany", 81831000 ],
  [ "France", 65447374 ],
  [ "Belgium", 10839905 ],
  [ "Netherlands", 16680000 ]
]

country_list.each do |name, population|
  Country.create!( name: name, population: population )
end
```

Thank you
Are there any current maintainers interested in adding support for Rails 6.0?
I couldn't figure out why it bundler was complaining about this gem using rails 5.2.3. Perhaps it just me?

```
Bundler could not find compatible versions for gem "activesupport":
  In Gemfile:
    activerecord (~> 5.2.3) was resolved to 5.2.3, which depends on
      activesupport (= 5.2.3)

    standalone_migrations (~> 5.2.7) was resolved to 5.2.7, which depends on
      railties (>= 4.2.7, < 5.3.0) was resolved to 4.2.8.rc1, which depends on
        activesupport (= 4.2.8.rc1)
```
### Steps to reproduce
Run `standalone-migrations` specs

### Expected behavior
All tests green.

### Actual behavior
```
Finished in 53.11 seconds (files took 0.598 seconds to load)
61 examples, 2 failures

Failed examples:

rspec ./spec/standalone_migrations_spec.rb:316 # Standalone migrations db:seed loads
rspec ./spec/standalone_migrations_spec.rb:335 # Standalone migrations db:seed with non-default seed file loads

```

### System configuration
**Ruby version** 2.6.1

### Source of the issue
https://github.com/rails/rails/issues/35782


Hi, are custom templates for migrations supported by standalone-migrations? I tried to get some working using templates in `lib/templates/active_record/migration/create_table_migration.rb` and `lib/templates/migration/templates/create_table_migration.rb`, based off some Stackoverflow suggestions, but that didn't work.

No big deal if notâ€”just a nice to have.
move environment configuration into connection task, so it's not executed in situations where no standalone-migrations task is called. Allows other rake tasks to be executed when db/config.yml is missing. 
fixes #152 
db/config.yml is required in the moment the tasks are loaded. 

I tend to use a rake task like the following to setup development environments, without having having the actually used config under version control. 

```
namespace :dev do
  desc 'Setup Dev Environment'
  task setup: 'db/config.yml'

  # one rule to rule them all. Copy any .yml.example to matching .yml
  rule '.yml' => '.yml.example' do |task|
    cp task.source, task.name
  end
end
```

Sadly `StandaloneMigrations::Tasks.load_tasks` will fail with a missing db/config.yml, so i can't run my `dev:setup` tasks, which would create the file. 

Would be awesome if the db/config.yml would only be required when the tasks are executed, not just loaded. 
Having this

### .env vars
`DATABASE_URL_TEST=postgres://postgres:hele@postgres/techloop_automator_testik`

### db/config.yml
```
test:
  database: techloop_automator_test
  ...
```

###  Rakefile
```
require 'standalone_migrations'

StandaloneMigrations::Tasks.load_tasks

StandaloneMigrations::Configurator.environments_config do |env|
  env.on "test" do
    if (ENV['DATABASE_URL_TEST  '])
      db = URI.parse(ENV['DATABASE_URL_TEST'])
      return {
        :adapter  => db.scheme == 'postgres' ? 'postgresql' : db.scheme,
        :host     => db.host,
        :username => db.user,
        :password => db.password,
        :database => db.path[1..-1],
        :encoding => 'utf8'
      }
    end

    nil
  end
end
```

### When I run `rake db:create RAILS_ENV=test`, I get:
```
root@f0db907210df:/automator# rake db:create RAILS_ENV=test
Created database 'techloop_automator_test'
```
### >> it creates `techloop_automator_test` as opposed to `techloop_automator_testik`
I use .env file to pass postgres url into my apps.

Using this approach, I cannot migrate test environment db using `standalone-migrations`.

When `DATABASE_URL` is set in environment, gem ignores existing configuration when other env is specified:
`rake db:drop db:create db:migrate RAILS_ENV=testing` (where testing refers to valid config.yml)
takes whatever is stored in DATABASE_URL and creates the database. It does it in the specified (`testing`) mode so that dropping the database with `rake db:drop` produces `ActiveRecord::EnvironmentMismatchError`.
