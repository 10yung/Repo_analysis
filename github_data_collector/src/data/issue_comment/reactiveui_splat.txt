Bumps [PublicApiGenerator](https://github.com/PublicApiGenerator/PublicApiGenerator) from 9.3.0 to 10.0.1.
<details>
<summary>Release notes</summary>

*Sourced from [PublicApiGenerator's releases](https://github.com/PublicApiGenerator/PublicApiGenerator/releases).*

> ## 10.0.1
> Changes:
> 
> - Fix Output property even though indexer exists (PR)[#161](https://github-redirect.dependabot.com/PublicApiGenerator/PublicApiGenerator/issues/161)
> 
> ## 10.0.0
> Changes:
> 
> - Remove support for .NET 4.0 [PR](https://github-redirect.dependabot.com/PublicApiGenerator/PublicApiGenerator/pull/89)
> - Read-only structs support [PR](https://github-redirect.dependabot.com/PublicApiGenerator/PublicApiGenerator/pull/84)
> - In-modifier support [PR](https://github-redirect.dependabot.com/PublicApiGenerator/PublicApiGenerator/pull/85)
> - Unsafe modifier support [PR](https://github-redirect.dependabot.com/PublicApiGenerator/PublicApiGenerator/pull/120)
> - Support for default keyword for non primitive structs [PR](https://github-redirect.dependabot.com/PublicApiGenerator/PublicApiGenerator/pull/88)
> - Removing empty attribute parentheses and Attribute suffix if present [PR](https://github-redirect.dependabot.com/PublicApiGenerator/PublicApiGenerator/pull/118
> - Fix order of static and readonly keywords [PR](https://github-redirect.dependabot.com/PublicApiGenerator/PublicApiGenerator/pull/122)
> - Fix order of members within a type, by [@&#8203;adamralph](https://github.com/adamralph)  [PR](https://github-redirect.dependabot.com/PublicApiGenerator/PublicApiGenerator/pull/138)
> - Volatile public field support [PR](https://github-redirect.dependabot.com/PublicApiGenerator/PublicApiGenerator/pull/123)
> - Fix support for named indexers [PR](https://github-redirect.dependabot.com/PublicApiGenerator/PublicApiGenerator/pull/136)
> - More advanced support for Property, event and method modifiers 
>  - Event modifiers [PR](https://github-redirect.dependabot.com/PublicApiGenerator/PublicApiGenerator/pull/130)
>  - Property modifiers [PR](https://github-redirect.dependabot.com/PublicApiGenerator/PublicApiGenerator/pull/155)
>  - Method modifiers [PR](https://github-redirect.dependabot.com/PublicApiGenerator/PublicApiGenerator/pull/152)
> - C# 8 nullable reference type support, by [@&#8203;sungam3r](https://github.com/sungam3r) and [@&#8203;jnm2](https://github.com/jnm2) [PR](https://github-redirect.dependabot.com/PublicApiGenerator/PublicApiGenerator/pull/115)
> - Embedded PDB in package and source for better source-stepping [PR](https://github-redirect.dependabot.com/PublicApiGenerator/PublicApiGenerator/pull/131/)
> - Introduce `ApiGeneratorOptions` to configure the generator [PR](https://github-redirect.dependabot.com/PublicApiGenerator/PublicApiGenerator/pull/129)
> - Extension methods as public API for the generator [PR](https://github-redirect.dependabot.com/PublicApiGenerator/PublicApiGenerator/pull/134)
> 
> For more information see the [related milestone](https://github.com/PublicApiGenerator/PublicApiGenerator/milestone/17).
</details>
<details>
<summary>Commits</summary>

- [`539c99f`](https://github.com/PublicApiGenerator/PublicApiGenerator/commit/539c99fbf48f8a916b21759f2ff3c2ea81b06b2e) Merge pull request [#161](https://github-redirect.dependabot.com/PublicApiGenerator/PublicApiGenerator/issues/161) from sungam3r/indexer-name-fix
- [`3935ed2`](https://github.com/PublicApiGenerator/PublicApiGenerator/commit/3935ed2477dd1e41e6c40e8feee7f9bd80914cfb) fix
- [`6bab05c`](https://github.com/PublicApiGenerator/PublicApiGenerator/commit/6bab05ce01615bc410d5c3218747e6f641bab66e) add tests to demonstrate problem
- [`a5877c3`](https://github.com/PublicApiGenerator/PublicApiGenerator/commit/a5877c3f36eb6101929c5f80a505e3c0d48ad7ff) Merge pull request [#160](https://github-redirect.dependabot.com/PublicApiGenerator/PublicApiGenerator/issues/160) from PublicApiGenerator/fix-tool
- [`afe8481`](https://github.com/PublicApiGenerator/PublicApiGenerator/commit/afe8481ac31a0e8989fabbf6fca1525006bb63be) Update README.md
- [`9f385ef`](https://github.com/PublicApiGenerator/PublicApiGenerator/commit/9f385efb6540fd6f80daba31d12f4ae1e7bb7074) Fix tool and readme
- [`a2b5e9c`](https://github.com/PublicApiGenerator/PublicApiGenerator/commit/a2b5e9cc062e3c1ca2e6a0e5832696830c74ad55) Merge pull request [#158](https://github-redirect.dependabot.com/PublicApiGenerator/PublicApiGenerator/issues/158) from PublicApiGenerator/method-param-matching
- [`02c13f7`](https://github.com/PublicApiGenerator/PublicApiGenerator/commit/02c13f7342bb70560671a2b53abf763489d15bbf) Fix parameter comparison
- [`d7d3581`](https://github.com/PublicApiGenerator/PublicApiGenerator/commit/d7d35813e83be2e5d997fc782a746937a80196a6) Reproduce base class having method with different arguments
- [`f0a64bd`](https://github.com/PublicApiGenerator/PublicApiGenerator/commit/f0a64bdbf7131ccc76d098ae63d78c6ba35b518e) Merge pull request [#157](https://github-redirect.dependabot.com/PublicApiGenerator/PublicApiGenerator/issues/157) from PublicApiGenerator/whitespace
- Additional commits viewable in [compare view](https://github.com/PublicApiGenerator/PublicApiGenerator/compare/9.3.0...10.0.1)
</details>
<br />

[![Dependabot compatibility score](https://api.dependabot.com/badges/compatibility_score?dependency-name=PublicApiGenerator&package-manager=nuget&previous-version=9.3.0&new-version=10.0.1)](https://dependabot.com/compatibility-score.html?dependency-name=PublicApiGenerator&package-manager=nuget&previous-version=9.3.0&new-version=10.0.1)

Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.

[//]: # (dependabot-automerge-start)
[//]: # (dependabot-automerge-end)

---

<details>
<summary>Dependabot commands and options</summary>
<br />

You can trigger Dependabot actions by commenting on this PR:
- `@dependabot rebase` will rebase this PR
- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it
- `@dependabot merge` will merge this PR after your CI passes on it
- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it
- `@dependabot cancel merge` will cancel a previously requested merge and block automerging
- `@dependabot reopen` will reopen this PR if it is closed
- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually
- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)
- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)
- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)
- `@dependabot use these labels` will set the current labels as the default for future PRs for this repo and language
- `@dependabot use these reviewers` will set the current reviewers as the default for future PRs for this repo and language
- `@dependabot use these assignees` will set the current assignees as the default for future PRs for this repo and language
- `@dependabot use this milestone` will set the current milestone as the default for future PRs for this repo and language
- `@dependabot badge me` will comment on this PR with code to add a "Dependabot enabled" badge to your readme

Additionally, you can set the following in your Dependabot [dashboard](https://app.dependabot.com):
- Update frequency (including time of day and day of week)
- Pull request limits (per update run and/or open at any time)
- Automerge options (never/patch/minor, and dev/runtime dependencies)
- Out-of-range updates (receive only lockfile updates, if desired)
- Security updates (receive only security updates, if desired)



</details>

Question asked on [StackOverflow](https://stackoverflow.com/questions/58840777/visual-studio-cant-find-extension-methods-splat-bitmapmixins-fromnative-and-s)

**Describe the bug**
When attempting to call IBitmap.ToNative() or Bitmap.FromNative() we receive compiler errors despite having both Splat and Splat.Drawing referenced in both the .NET Standard project and the Android project. 
Further troubleshooting indicates that Visual Studio may not be attempting to bind the Android versions of the libraries, see SO question for full details.

**Steps To Reproduce**
1. Create a new Xamarin solution selecting .NET Standard for the code sharing project and Android for the platform
2. Using NuGet reference Splat and Splat.Drawing in both projects.
3. In the Android project, create a class with a method that calls the .ToNative() and .FromNative() methods
4. See errors:
'IBitmap' does not contain a definition for 'ToNative' and no accessible extension method 'ToNative' accepting a first argument of type 'IBitmap' could be found (are you missing a using directive or an assembly reference?)
'Bitmap' does not contain a definition for 'FromNative' and no accessible extension method 'FromNative' accepting a first argument of type 'Bitmap' could be found (are you missing a using directive or an assembly reference?)

An example project can be found on [Github](https://github.com/jctlp/SplatBitmap)

**Expected behavior**
No compiler error

**Environment(please complete the following information):**
 - OS: Android
 - Target Framework: 8.1
 - Device: N/A

**Describe the bug**
I just installed the latest ReactiveUI (10.5.7) into my Xamarin.Forms (4.3) app, and built a single ViewModel out using it. I love it so far, and I did all of my testing using the iOS simulator.

Upon testing the app on my Pixel 4XL (Android 10), I immediately got the following runtime exception when I hit the new page/viewmodel.

```csharp
PlatformBitmapLoader: Exception while detecting drawing types. - System.Reflection.ReflectionTypeLoadException: Exception of type 'System.Reflection.ReflectionTypeLoadException' was thrown.
Type '__callback_factory__class__' is not finished
  at System.Reflection.Emit.AssemblyBuilder.GetTypes (System.Boolean exportedOnly) [0x0012d] in <ff07eae8184a40a08e79049bbcb31a0e>:0 
  at System.Reflection.Assembly.GetTypes () [0x00000] in <ff07eae8184a40a08e79049bbcb31a0e>:0 
  at Splat.PlatformBitmapLoader.GetTypesFromAssembly (System.Reflection.Assembly assembly, Splat.IFullLogger log) [0x00000] in d:\a\1\s\src\Splat.Drawing\Platforms\Android\Bitmaps\PlatformBitmapLoader.cs:158 
System.TypeLoadException: Type '__callback_factory__class__' is not finished
```

followed by a really long list of this

> PlatformBitmapLoader: DrawableList Type: Drawable
> PlatformBitmapLoader: DrawableList Type: Drawable
> PlatformBitmapLoader: DrawableList Type: Drawable
> PlatformBitmapLoader: DrawableList Type: Drawable
> PlatformBitmapLoader: DrawableList Type: Drawable

The end result is an extremely long delay in loading the page.

**Steps To Reproduce**
Not sure how to fill this in. I'm assuming this is a tooling issue moresoe than anything else. I will give whatever information you ask for however.

**Expected behavior**
Page should load instantaneously

**Screenshots**
If applicable, add screenshots to help explain your problem.

**Environment(please complete the following information):**
 - Mono: 6.4.0.208
 - OS: Android 
 - Version 10
 - Device: Google Pixel 4 LX
 - android:minSdkVersion: 22"
 - android:targetSdkVersion: 29

notice in the gif where I press the (+) in the top right, there is an enormous delay and an enormous amount of output before the page loads.
![Nov-01-2019 13-55-54](https://user-images.githubusercontent.com/471626/68056039-61b15a00-fcaf-11e9-87c9-90a9942afa90.gif)


The height/width parameters don't change anything in the BitmapLoader.Current.Load() function, the size is always remains original. Project: Xamarin Forms, Android

I had to change your lib (Splat.Drawing), and use Bitmap.CreateScaledBitmap() after decoding the stream, because parameters outHeigth and outWidth that you used, didn't work in this situation.
In case with IOS everything works fine.

P.S. In case with Cocoa, Tizen platforms, you still provide the ability to set width/height despite the fact that you don't use these parameters at all in your source code, so the size will definitely remain the same.
from @anaisbetts 
Consider the following:
1. Test #1 calls WithResolver(), as a part of that by default we suppress auto-registration - this is implemented as an atomic refcount, we add a ref
2. Test #2 kicks off, it calls WithResolver(false) - we set the resolver, but because the prev ref is still at 1, the new resolver doesn't get initialized
3. Test #1 finally finishes, we remove our ref (edited) 

The ThreadStatic trick is definitely like, a compromise
Basically the core idea is, if you try to Set the locator, and you're in a unit test, we'll per-thread set it
If you're in the app, we never do this ThreadStatic bizness
MainThreadScheduler works similarly
So it means you can have two tests who pave Locator at the same time, and they might work, ofc if you schedule a Task everything falls over
But, we make you fall over a little less often
What you really want is "TaskContextStatic", i.e. something that follows the same "context" across a bunch of threads

Which I think exists now, but definitely didn't at the time
Maybe this is https://docs.microsoft.com/en-us/dotnet/api/system.threading.asynclocal-1?redirectedfrom=MSDN&view=netframework-4.8?
## if list empty remove contract entirely

https://github.com/reactiveui/splat/blob/5c73294dfeaede78353e0694758198f9403298d7/src/Splat.Microsoft.Extensions.DependencyInjection/MicrosoftDependencyResolver.cs#L327-L332

---

###### This comment was generated by [todo](https://todo.jasonet.co) based on a `TODO` comment in 5c73294dfeaede78353e0694758198f9403298d7 in #370. cc @weitzhandler.

_Originally posted by @todo in https://github.com/reactiveui/splat/pull/370#issuecomment-518169994_
Need to review use of ILogger instead of LogManager

- [ ] ReactiveUI: potential that some of the unit tests are watching a non-functioning logger
- [ ] Website: doc's need looking at
- [ ] Splat: Remove ILogger init, or have a default that returns the default logger from LogManager.

https://github.com/search?p=1&q=org%3Areactiveui+ilogger&type=Code
There is a method associated with GetAllRegistrations too that might need some testing around for the various DI engines to make sure they work as we expect.

_Originally posted by @glennawatson in https://github.com/_render_node/MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMTg2NDYzNjUwOnYy/pull_request_review_threads/discussion_

Split out into new issue as it got lost in the review comments for #360 so I had to hunt it out :)
Allow the static logging to pass through the caller member info.

See  https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/concepts/caller-information

Maybe some sort of wrapping logger like the others around the main logger.

Static loggers loose context at the moment.
As originally reported by @chuuddo, they have provided unit tests to help produce the exception here:

https://github.com/reactiveui/splat/compare/master...chuuddo:rxui_initialization_breaks_simpleinjector_resolver

Details of their explanation:
SimpleInjectorDependencyResolver not works in real apps. 
I made a pull request #239 with changes to View and ViewModel classes to start initialization of RxApp and all tests fails.

After some investigations i found this issues:
1. [The container is locked after the first call to resolve](https://simpleinjector.readthedocs.io/en/latest/decisions.html#the-container-is-locked-after-the-first-call-to-resolve) but ReactiveUI invoke all registrations after RxApp.EnsureInitialized(). This can be fixed by not getting instace of MainWindow from container. If there are no other solutions, we should add this workaround to documentation.
```csharp
    //var window = (MainWindow)container.GetInstance<IViewFor<MainViewModel>>();
    var window = new MainWindow();
    window.ViewModel = container.GetInstance<MainViewModel>();
    window.Show();
```

2. SimpleInjector support multiple registrations for same interface only through [Collection.Register](https://simpleinjector.readthedocs.io/en/latest/using.html#collections). We can't register [this lines](https://github.com/reactiveui/ReactiveUI/blob/ea99102c37bbbf2567c0193e558d1ef9402fdaed/src/ReactiveUI/Registration/Registrations.cs#L23-L25) using _container.Register() method.

https://github.com/reactiveui/splat/blob/d27b0b48e71d38402c8e224b25e2dfff2daef875/src/Splat.SimpleInjector/SimpleInjectorDependencyResolver.cs#L38

I don't have any workarounds for second issue. Can we use this DI container with ReactiveUI?

_Originally posted by @chuuddo in https://github.com/reactiveui/splat/issues/233#issuecomment-456362486_
