
Class XSSFWorkbook is not implementing the IDispose. So cant be use in using Statement. 

When using GetColumnStyle method of ISheet interface, getting the error "Nullable object must have a value."  

 var workbook = new XSSFWorkbook(fileStreem);
 var worksheet = package.GetSheetAt(0);
var columnStyle = worksheet?.GetColumnStyle(0); // Getting error "Nullable object must have a value." here if style for the column doesn't exists.


Could not open display (X-Server required. Check your DISPLAY environment variable)
   at System.Drawing.Graphics.FromHwnd(IntPtr hwnd)
   at NPOI.SS.Util.SheetUtil.getDefaultCharWidth(IWorkbook wb)
   at NPOI.SS.Util.SheetUtil.GetColumnWidth(ISheet sheet, Int32 column, Boolean useMergedCells)
   at NPOI.HSSF.UserModel.HSSFSheet.AutoSizeColumn(Int32 column, Boolean useMergedCells)
   at NPOI.HSSF.UserModel.HSSFSheet.AutoSizeColumn(Int32 column)

```csharp
 using (var stream = new MemoryStream())
{
   workbook.Write(stream);
}
```
ERROR:
```
NPOI.Util.RuntimeException: Buffer overrun i=6;endIndex=106502;writeIndex=106499
at NPOI.Util.LittleEndianByteArrayOutputStream.CheckPosition(System.Int32 i) at offset 64
at NPOI.Util.LittleEndianByteArrayOutputStream.Write(System.Byte[] b) at offset 45
at NPOI.HSSF.Record.AutoFilter.AutoFilterRecord.Serialize(NPOI.Util.ILittleEndianOutput out1) at offset 90
at NPOI.HSSF.Record.StandardRecord.Serialize(System.Int32 offset, System.Byte[] data) at offset 136
at NPOI.HSSF.Record.AutoFilter.AutoFilterRecord.Serialize(System.Int32 offset, System.Byte[] data)
at NPOI.HSSF.UserModel.HSSFWorkbook.SheetRecordCollector.Serialize(System.Int32 offset, System.Byte[] data) at offset 36
at NPOI.HSSF.UserModel.HSSFWorkbook.GetBytes() at offset 211
at NPOI.HSSF.UserModel.HSSFWorkbook.Write(System.IO.Stream stream) at offset 272
```

I have found in an application that the border formatting in XSSFCellStyle is a bit broken. It results in accidentally sharing a CT_Border instance.

From https://github.com/dotnetcore/NPOI/blob/master/src/NPOI.OOXML/XSSF/UserModel/XSSFCellStyle.cs#L227
```
        public BorderStyle BorderBottom
        {
            get
            {
                if (!_cellXf.applyBorder) return BorderStyle.None;

                int idx = (int)_cellXf.borderId;
                CT_Border ct = _stylesSource.GetBorderAt(idx).GetCTBorder();
                if (!ct.IsSetBottom())
                {
                    return BorderStyle.None;
                }
                else
                {
                    return (BorderStyle)ct.bottom.style;
                }
            }
            set
            {
                CT_Border ct = GetCTBorder();
                CT_BorderPr pr = ct.IsSetBottom() ? ct.bottom : ct.AddNewBottom();
                if (value == BorderStyle.None) 
                    ct.UnsetBottom();
                else 
                    pr.style = (ST_BorderStyle)value;

                int idx = _stylesSource.PutBorder(new XSSFCellBorder(ct, _theme));

                _cellXf.borderId = (uint)idx;
                _cellXf.applyBorder = (true);
            }
        }
```

Each of the border setters has the same but, I have chosen BorderBottom as an example.

The first time you assign a value to a border property. E.g. `cell.BorderBottom = BorderStyle.Thin;` it will create a CT_Border object, assign the border to it and then call `_stylesSource.PutBorder(new XSSFCellBorder(ct, _theme))` which will store the border object and return an ID. 

If it finds a matching CT_Border it will return that instances id, causing it to be shared. 

This seems to be from here:
https://github.com/dotnetcore/NPOI/blob/master/src/NPOI.OOXML/XSSF/Model/StylesTable.cs#L285

```
        public int PutBorder(XSSFCellBorder border)
        {
            int idx = borders.IndexOf(border);
            if (idx != -1)
            {
                return idx;
            }
            borders.Add(border);
            border.SetThemesTable(theme);
            return borders.Count - 1;
        }
```
Using `borders.IndexOf(border)` will search by the current value of the border. The XSSFCellBorder class implements equality based on the XML value of the CT_Border.

I think the easiest and possibly _best_ solution would be to delete the 5 lines:
```
            int idx = borders.IndexOf(border);
            if (idx != -1)
            {
                return idx;
            }
```

I'm not a regular contributer here, but if it would help I can try and put together a PR.

Warm Regards,
Stuart


When I change row height the image height also grows. My code is as the following:

`private void AddImageToWorkBook(Image img, int colIndex, int rowIndex, XSSFWorkbook workbook, ISheet sheet)
        {
            var ms = new MemoryStream();
            img.Save(ms, ImageFormat.Png);
            byte[] data = ms.ToArray();
            int pictureIndex = workbook.AddPicture(data, PictureType.PNG);
            ICreationHelper helper = workbook.GetCreationHelper();
            IDrawing drawing = sheet.CreateDrawingPatriarch();
            IClientAnchor anchor = helper.CreateClientAnchor();
            anchor.AnchorType = AnchorType.MoveDontResize;
            anchor.Col1 = colIndex;//0 index based column
            anchor.Row1 = rowIndex;//0 index based row
            IPicture picture = drawing.CreatePicture(anchor, pictureIndex);
            picture.Resize();
        }`

When I change the row height before or after calling this function, then the generated image will grow too while I've set the AnchorType to MoveDontResize. 
Expected behavior: Image size should not grow with row height.
Caching implemented for the result of HSSFCellStyle.GetDataFormatString() uses unguarded statics and is not thread safe. In a multi-threaded environment you may receive the format string for a different cell.
Hi

I am trying to use NPOI in my asp.net core 2.2 library but I get a warning sign on the package when I installed it but it does not really tell me what the warning is.

It won't let me import anything in though.

`    <TargetFramework>netcoreapp2.2</TargetFramework>`
the ICSharpCode.SharpZipLib.dll under version 1.0 is in GPL license, we can not use it in our software.
however, the new version had changed to MIT license. So, can ugrade the ICSharpCode.SharpZipLib.dll  to new version?