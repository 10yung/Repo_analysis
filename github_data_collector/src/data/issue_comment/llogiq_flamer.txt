I no longer use Rust that much, but the [flame](https://github.com/TyOverby/flame) crate is still being used quite heavily, often alongside flamer.  

Since it's hard for me to make releases, would you be interested in taking over development / maintenance? 
When I put a `#![flame]` attribute inside of a module, it gives me an error "file not found for module `module_name`". It gives me the same error randomly when I apply it to the `mod` item in its parent module.
It would be great to have a way of marking all `pub fn` of modules, structs, ... marked for flaming using one single command.

Currently, I add
```
#[cfg_attr(feature="flame_it", flame)]
```
to all `pub fn` of major modules and structs manually.
I was first curious if it was possible to easily modify things to use the full paths of items (`module::fn_name` instead of `fn_name`), but asking on `#rust-internals`, that may be impossible. So I guess perhaps an alternate scheme would be to allow an argument to the attribute, specifying a name.

```rust
#[flame("module::fn_name")]
fn fn_name() {}
```

I think that would be a really useful feature (especially if it wasn't applied recursively), perhaps deserving a different attribute.
The current unstable version breaks too often for my taste, and the above crates are likely the way forward.
E.g. `#[flame(loops)]` to insert measurements for all loops or `#[flame(blocks=5)]` to measure all blocks with at least 5 statements (or 4 statements + expression)

E.g.

```
#[flame]
fn outer() {
    fn inner() { // gets no flame (for now)
        ..
    }
}
```

There's currently exactly 0 (read: zero) documentation. I should really write up some.
