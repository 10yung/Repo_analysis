ERROR in ./app/javascript/stylesheets/application.scss (./node_modules/css-loader/dist/cjs.js??ref--7-1!./node_modules/postcss-loader/src??ref--7-2!./node_modules/sass-loader/dist/cjs.js??ref--7-3!./app/javascript/stylesheets/application.scss)
Module build failed (from ./node_modules/sass-loader/dist/cjs.js):

@import 'rails_bootstrap_forms';
^
      File to import not found or unreadable: rails_bootstrap_forms.
      in /home/wotogo/myapp/datamart/app/javascript/stylesheets/application.scss (line 2, column 1)
Error: 
@import 'rails_bootstrap_forms';
^
      File to import not found or unreadable: rails_bootstrap_forms.
      in /home/wotogo/myapp/datamart/app/javascript/stylesheets/application.scss (line 2, column 1)
    at options.error (/home/wotogo/myapp/datamart/node_modules/node-sass/lib/index.js:291:26)
This is a high-level issue to capture the tasks needed for version 5 of `bootstrap_form`/`bootstrap_form` for Bootstrap 5.
Currently running
`Rails 5` 
`Ruby 2.6`
`Bootstrap 4+`
`Bootstrap_form 4.3`

I can't figure out how to invoke the `invalid-feedback` element. The ReadME file makes it seem like this element should rendered by default but it isn't. I've tried forcing this by setting the form to `inline_errors: true` and I'm not seeing a change. 

Is this something that only comes in after a trip to the server? I'm hoping to use it for client-side validation. I can get around this with the `wrapper: false` setting on the input element and adding my own markup, but doing so feels like I'm omitting a chunk of functionality that is very useful otherwise. 

Here's my the code snippet of my form (HAML):
```
= bootstrap_form_for(@user),
      html: { class: 'needs-validation', novalidate: true },
      validate: :user_validators) do |f|
      .row
        .col.mb-4
          = f.hidden_field :url_hash, value: nil
          = f.email_field :email, required: true, autofocus: true, autocomplete: :off,
            placeholder: t('###')
          = f.password_field :password, required: true, autocomplete: :off,
            placeholder: "###"
    
      .row
        .col.text-center
          = f.submit t('v2.log_in.form.button'), class: 'btn btn-primary',
            title: t('v2.log_in.form.button')
```

Here's the generated HTML
```HTML
<form class="needs-validation" novalidate="novalidate" role="form" id="" action="" accept-charset="UTF-8" method="post">
<input name="utf8" type="hidden" value="âœ“">
<input type="hidden">
<div class="row">
 <div class="col mb-4">
  <input type="hidden" name="" id="" value="">
 <div class="form-group">
  <label class="required" for="user_email">Email</label>
  <input required="required" autofocus="autofocus" autocomplete="off" placeholder="" class="form-control" type="email" value="" name="" id="user_email">
 </div>
 <div class="form-group">
  <label class="required" for="user_password">Password</label>
  <input required="required" autocomplete="off" placeholder="password" class="form-control" type="password" name="" id="user_password">
 </div>
</div>
</div>
<div class="row">
<div class="col text-center">
<input type="submit" name="commit" value="Log In" class="btn btn-primary btn-rounded mb-3" title="Log In" data-disable-with="Log In">
</div>
</div>
</form>
```
Fixes #546 

Add Support for Ransack::Search object to the first argument of bootrap_form_for. 

## Usage example:

Controller

```
def index
  @q = Invoice.ransack(params[:q])
  @invoices = @q.result(distinct: true)
end
```

View

```
= bootstrap_form_for @q, url: invoices_path, method: :get do |f|
  = f.search_field :file_name_cont
  = f.submit
```
One approach to solving #477 and related issues would be to implement be to make our implementation use the Rails methods for `label` and `check_box` and `radio_button` in a way that would make our helpers easier to use in the collection helpers.

When using a ransack object, there's an error trying to get the model name's name:

https://github.com/bootstrap-ruby/bootstrap_form/blob/aa2cb2933cd655bb0ebf1e9691b28760f8a77054/lib/bootstrap_form/components/hints.rb#L23-L27

The workaround is setting the help text manually:
```
= f.text_field :nombre_cont, help: ""
```
Instead of using an `<input>` tag, marking it as readonly, and worrying in the documentation about seeing errors in your input parameters, perhaps it would be simpler to render static fields as an `<output>` tag instead. These are styled like an `<input>`, but they do not accept keyboard input, and they do not get submitted along with the rest of the form.
The [basic custom form fields](https://getbootstrap.com/docs/4.3/components/forms/#custom-forms) are usually something you want to apply either globally or not at all, so it would be great to have the ability to globally default to custom (maybe per-field type) rather than having to pass in the argument to each input.

This may be easily doable now by redefining some methods in an initializer, if anyone has done so it would be great to add docs on how to do it.

If not easily doable now, would be a nice feature to add! 


A picture is worth a thousand words.

------
![image](https://user-images.githubusercontent.com/104158/61865933-1b887580-aecc-11e9-99c8-03b4f0c4abeb.png)
------

```slim
= form.rich_text_area :summary
= form.submit "Save", class: 'btn-primary'
```
I haven't dug into the CSS yet to understand what's happening, but I'm not sure this is working out of the box as you might expect it to. 
It looks like the mark-up added by the relatively new option `required: true` causes Chrome (at least, likely others) to do the HTML5 validation on the front end. Needs investigation and test cases to confirm.