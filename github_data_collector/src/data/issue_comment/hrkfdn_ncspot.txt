I find myself unable to learn all the keyboard commands by heart, especially those i use less frequently. A hotkey (?\?) to bring up a list of commands/shortcuts would be very useful :)
Would it be possible to add volume control from within ncspot itself?
Hey,

I really like the project thanks for the nice work :)

I've been working on creating themes for `ncspot` and i think i found a strange bug.

While `#080808` (or e.g. `black`) provides you with the correct color, using `#080807` leads to a pink'ish tone on my system (i haven't checked other systems yet):
![2020-01-10-16:18:07](https://user-images.githubusercontent.com/7644803/72163850-de099d00-33c4-11ea-9540-f82df56f4806.png)

That seems to be the problem for every color if one of RGB is below `8` and no other value is above  or equal `2B`. So e.g. `#002B00` is working, while `#002A00` is pink.

Here is the theme used in the above picture:
```
[theme]
background = "#080808"
primary = "#080807"
secondary = "#080807"
title = "#080807"
playing = "#080807"
playing_bg = "#080807"
highlight = "#080807"
highlight_bg = "#080807"
error = "#080807"
error_bg = "#080807"
statusbar = "#080807"
statusbar_progress = "#080807"
statusbar_bg = "#080807"
cmdline = "#080807"
cmdline_bg = "#080807"
```

When I open the context menu on a song the navigation keys that I use in the main screens are not working (j, k, Backspace). Is this intentional? 
I stopped using MPD for a while and used MPV instead. They have a really great solution to seek quickly:

From their Wiki:
> **LEFT and RIGHT**
    Seek backward/forward 5 seconds. Shift+arrow does a 1 second exact seek (see --hr-seek).
**UP and DOWN**
    Seek forward/backward 1 minute. Shift+arrow does a 5 second exact seek (see --hr-seek).

I think this is a great concept to have a 'fast seek' and 'slow seek' option. Using the current 'seek' command (jump 1 second ahead) can be quite cumbersome, especially for long tracks.

I you don't like the idea with quick/fast seek, please consider increasing the jump to something like 5 seconds.

I know you can use the mouse to jump to the exact position, but terminal app users try to avoid using the mouse ;)
I was thinking about this... I have a repeatable pattern I do everymorning.

- open tmux
- Launch ncspot
- Open my main playlist
- put it onto shuffle
- pause it
- throw the app into the background in tmux
- Interact with ncspot throughout the day using my media keys

It would be interesting if you could launch ncspot with either cli paramaters or a cfg file to get to this same state. We could then autolaunch at startup.

If you allowed config/interactions via the CLI, it would allow custom keyboard shortcuts to a variety of states. Query the current song, etc. Potentially even easy integration to various linux desktop components.

 :thinking: 

Just an idea. It essentially becomes a spotify backend to many other potential interactions.

Completely ubnderstood if it is out of scope and what you see for the project.
nice client,
but is there a way to force connecting on port 80/443?
i am in an firewalled environment , there unfortunately is no way to connect on other ports.
```
ap_list | Â 
    -- | --
   0 | "gew1-accesspoint-a-2t2g.ap.spotify.com:4070"
   1 | "gew1-accesspoint-a-5gzt.ap.spotify.com:443"
   2 | "gew1-accesspoint-a-sln5.ap.spotify.com:80"
   3 | "gew1-accesspoint-a-zjsh.ap.spotify.com:4070"
   4 | "gew1-accesspoint-a-k969.ap.spotify.com:443"
   5 | "gew1-accesspoint-a-1djt.ap.spotify.com:80"
   6 | "guc3-accesspoint-a-m2zt.ap.spotify.com:4070"
   7 | "guc3-accesspoint-a-wz6l.ap.spotify.com:443"
   8 | "gae2-accesspoint-a-7zxr.ap.spotify.com:80"


```
I don't want to use ncspot to manage my playlists or anything, and I don't want to accidentally delete something (which I may have already done, considering I pressed `s` because I thought it was a different key). I just want it to be a simple player.

Even if there were confirmation dialogs for mutating actions, a read-only mode is a very good overall safeguard.
This is an effort to explore how to fix #69. There's quite a few challenges here, but I hope to simplify the `Queue` interface significantly along the way.
File with credentials is being deleted in case of failed validation regardless of a reason. For example when client does not have a internet connection, forcing user to re-enter them.