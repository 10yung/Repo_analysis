like title
Looks like a `Vec<Struct>` works and an `Option<Struct>` works, but an `Option<Vec<Struct>>` does not.

```
error[E0599]: no method named `validate` found for type `&std::vec::Vec<model::executeAlert::LanguageContentMap>` in the current scope
  --> src/model/executeAlert.rs:49:41
   |
   | #[derive(Debug, Serialize, Deserialize, Validate)]
   |         
```

```rust
#[validate]
        languageContentMap: Option<Vec<LanguageContentMap>>,
```


This will build if I remove the `#[validate]`
This:

```rust
#[validate(range(min=-90, max=90))]
northing: f32,
```

Doesn't work:

```
error: proc-macro derive panicked
 --> src/model/geospatial.rs:9:41
  |
9 | #[derive(Debug, Serialize, Deserialize, Validate)]
  |                                         ^^^^^^^^
  |
  = help: message: internal error: entered unreachable code: Got something other than a list of attributes while checking field `northing`
```

Should this be supported?
If I have the following:

```rust
pub struct Polygon {
    #[validate]
    #[validate(length(min=3, max=1000, message="INVALID_TARGET", code="Polygon is constructed of less than 3 or more than 1000 points"))]
    vertices: Vec<Coordinates>,
}

pub struct Coordinates {
    #[validate(custom(message="INVALID_TARGET", function="easting_validator"))]
    easting: f32,
   #[validate(custom(message="INVALID_TARGET", function="northing_validator"))]
    northing: f32,
}
```

And the validation on `vertices` fails then I do not get validation errors on `easting` or `northing`. 

Is there a way to get both in one response?




I'm using nested validations, and it would be great if there was a simple way to get at the ValidationError objects.

At the moment it's obscured by the many levels of ValidationErrors
I suggest to handle the derive macro like serde and create a "derive" feature. Then only

```rust
use validator::Validate;
```

is needed.

Edit: I am not sure if  #58 is related.
Hi,

I would like to validate enums, for example

```rust
enum A {
    A1 { a: u32 },
    A2 { b: String },
}
```

Is this possible?
From https://github.com/Keats/validator/issues/73

```rust 
// for length from 5 to 10 (10 is excluded)
#[validate(length(5..10))]   

// for length from 5 to 10 (10 is included)
#[validate(length(5..=10))]

// for length equal to 5
#[validate(length(5))]
```

To replace min/max/equal.

Thoughts?
Some issues with path resolution for regex and functions
Seeing https://blog.rust-lang.org/2019/04/11/Rust-1.34.0.html#custom-attributes-accept-arbitrary-token-streams maybe we can?

The `next` branch is using attr_literals already 