Hello,

I'm researching Pistache API just for educational purposes and have found the small part of code that, from my point of view, can be improved. It would be so greatful if you can get a feedback about changes that I propose. Let's start.
When you send a request using `Client`, `RequestBuilder` and `Request` objects you set a `timeout` value:
```
...
client.get(address).timeout(std::chrono::milliseconds(1000));
...
```
This field is stored in `RequestBuilder`.

1) I'm thinking about moving it to `Request` class from `RequestBuilder` class. It will reduce a lot of code in `Client` and `Connection` methods when `timeout` is passed from `doRequest` to `Connection::performImpl` call. I have doubts about having timeout value in `Request` entity from OOP point of view?

2) I have noticed that some methods in `Request` and `Responce` classes can be moved to `Message` class, for instance:
```
...
const Header::Collection& headers() const;
...
```
`headers_` filed is stored in `Message` class, but getters in other class. Looks like as a bad design.
What do you think about my proposals?
Hello, I would like to use pistache for a project and I need to know how many requests per seconds it can handle?
Simple explanation for the project: pistache will be used for the backend of an app like linkedin, it will have the same number of requests of linkedin.
can pistache handle hundreds of requests per second?
I follow the instruction to install pistache (build from source) on my ubuntu16.04.
But always get the follow error. 

![image](https://user-images.githubusercontent.com/36251267/72417015-e857dc80-37b2-11ea-989f-41e347783fac.png)



Hi , I recently cloned the new Pistache project and I keep getting this error when I try to compile the project with pictache

Error: no matching function for call to ‘equal(std::basic_string<char>::const_iterator, std::basic_string<char>::const_iterator, std::basic_string<char>::const_iterator, std::basic_string<char>::const_iterator, Pistache::Http::Header::LowercaseEqual::operator()(const string&, const string&) const::<lambda(const char&, const char&)>)’
             });
              ^	RestClientTest	C:\usr\local\include\pistache\http_headers.h	38	

Kindly look into this.

Moreover , is there any example for implementing HTTPS based server using pistache?

pass_by_value: Passing parameter response of type Pistache::Http::ResponseWriter (size 704 bytes) by value.
File: router.h
Line: 365
Hi @dennisjenkins75 

Is it possible to clean up the issues and pull requests, i mean resolved, answered, invalid,  unmergable issues and pull requests?

Now there are about 200 opened issues and 30 pull requests that most of them are useless.
 
It can be help us to find the main issues and can trace the activity of development processes, it also better to contributors to focus on the particular points that need improvement and bug fixes.

Best Regards
`Request::body()` is defined as follows:
```cpp
std::string body() const {
  return body_;
}
```

Is there is a reason for not defining it as follows:
```cpp
const std::string& body() const {
  return body_;
}
```
If not, then can we add the above to the `Request` class?
I am doing testing via CURL and its working fine.
Example Call:
`curl http://example.com/dev -H 'foo: bar'`
This call I am converting to ab command like this:
`ab -v 2 -H "foo: bar" -c 10 -n 100 -l http://example.com/dev`

Output:

```
This is ApacheBench, Version 2.3 <$Revision: 1843412 $>
Copyright 1996 Adam Twiss, Zeus Technology Ltd, http://www.zeustech.net/
Licensed to The Apache Software Foundation, http://www.apache.org/

Benchmarking example.com (be patient)...INFO: GET header == 
---
GET /arena HTTP/1.0
dsn: dev
Host: example.com
User-Agent: ApacheBench/2.3
Accept: */*
---
LOG: header received:
HTTP/1.1 426 Upgrade Required
date: Mon, 23 Dec 2019 10:25:50 GMT
server: envoy
content-length: 0


WARNING: Response code not 2xx (426)
LOG: header received:
HTTP/1.1 426 Upgrade Required
date: Mon, 23 Dec 2019 10:25:51 GMT
server: envoy
content-length: 0
```
Can someone help with this? 
This issue follows issue #294, as it had never been answered.

In order to implement timeout on server side, you need to override the `onTimeout()` function, as explained [in the User Guide](http://pistache.io/guide/#controlling-timeout).
However, when using a router, we can't easily override the Timeout function as we have access to a `Rest::Router` object, and not its handler directly.

How can I solve this issue and implement timeout on server side using a router ?
Hello~ 
I use Https Rest Api with SSL.
I test with curl and It works well 
can I use curl without crt, key files ?
do i have to use certification for using curl without crt,key files ?