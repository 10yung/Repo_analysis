Only installs enabled images by default

Closes #935
I've disabled the structure and duplication plugins in my `.codeclimate.yml` file, however when running `codeclimate engines:install` those two plugins are still installed. The `egines:install` command should not pull engine images that are disabled explicitly and will not be used.

`.codeclimate.yml`
```
version: "2"
plugins:
  structure:
    enabled: false
  duplication:
    enabled: false
  checkstyle:
    enabled: true
    config: './checkstyle.xml'
```

```
$ docker images codeclimate/*
REPOSITORY                TAG                 IMAGE ID            CREATED             SIZE
codeclimate/codeclimate   latest              d2fbd39cfd1a        5 days ago          127MB
codeclimate/codeclimate   0.85.6              12ee53c30164        8 weeks ago         111MB
$ codeclimate engines:install
...docker image pull output...
$ docker images codeclimate/*
REPOSITORY                            TAG                 IMAGE ID            CREATED             SIZE
codeclimate/codeclimate               latest              d2fbd39cfd1a        5 days ago          127MB
codeclimate/codeclimate-checkstyle    latest              fec8cdafcfac        8 days ago          394MB
codeclimate/codeclimate               0.85.6              12ee53c30164        8 weeks ago         111MB
codeclimate/codeclimate-structure     latest              79763c9b6233        4 months ago        5.16GB
codeclimate/codeclimate-duplication   latest              984fb1d1bb1f        4 months ago        5.16GB
```
tl;dr This helps CodeClimate engines not need intimiate docker host knowledge, which permits the usage of CodeClimate outside of docker-in-docker setups. In particular, this permits for easily running CodeClimate checks in Gitlab while retaining Docker layer caching, vastly improving the runtime of each build.

In contexts like self-hosted Gitlab, we sometimes have a context where we have an invoking runner like Gitlab CI running the Docker executor, which exposes the Docker socket to the running job, so that the running job may invoke its own Docker jobs on the host. Gitlab's top-level job will set up some filesystem context (/builds, mounted as a Docker volume, in the Gitlab case).

Right now, Gitlab can only support CodeClimate in a Docker-in-Docker runner, because CodeClimate performs volume mounting for the individual engines via Docker's --volume flag, which mounts not the path from the invoking container, but rather a path on the docker host. This requires that the path passed to CodeClimate as the CODECLIMATE_CODE variable match the real host path, and in the Gitlab CI case, we don't want that, so we have to "hide" the host with a DinD approach. However, this means that we also don't get any layer caching between jobs, which makes running CodeClimate prohibitively expensive, as all the engines etc have to be downloaded for each job.

By supporting Docker's `volumes-from` mounting option, we can instead tell the engines to inherit any mounts from the invoking orchestrator. This permits CodeClimate to allow the top-level context set up a Docker volume, bind it to the orchestrator, and then allow the orchestrator to pass that to invoked children. This sidesteps the issue of the Engines needing to know the actual host path; as long as the orchestrator's /code directory is mounted, the children can just presume to use it as-is.

To accomplish this, we just a) name the top-level container, and b) pass that name via the CODECLIMATE_ORCHESTRATOR env var:

        docker run \
          --interactive --tty --rm \
          --name codeclimate_orchestrator \
          --env CODECLIMATE_ORCHESTRATOR="codeclimate_orchestrator" \
          --env CODECLIMATE_CODE="/code" \
          --volume "$PWD":/code \
          --volume /var/run/docker.sock:/var/run/docker.sock \
          --volume /tmp/cc:/tmp/cc \
          codeclimate/codeclimate-wrapped analyze

In the bare-metal case, this doesn't change anything - we're mounting the real host path, which then gets passed to the individual children mounted on the /code mount.

While not immediately pertinent to the CodeClimate PR, In Gitlab, we can invoke the Gitlab codequality image like so:

```yaml
script:
    - CONTAINER_ID=$(docker ps -q -f "label=com.gitlab.gitlab-runner.job.id=${CI_JOB_ID}")
    - BUILDS_VOLUME_ID=$(docker inspect $CONTAINER_ID --format '{{ range .Mounts }}{{ if eq .Destination "$CI_BUILDS_DIR" }}{{ .Name }}{{ end }}{{ end }}')
    - SOURCE_CODE="/code/${CI_PROJECT_DIR#$CI_BUILDS_DIR}"
    - docker run
        --rm
        --name "codeclimate_orchestrator_${CI_JOB_ID}"
        --env SOURCE_CODE=$SOURCE_CODE
        --env REPORT_FILENAME="gl-code-quality-report.json"
        --env CODECLIMATE_IMAGE="codeclimate:latest"
        --env ORCHESTRATOR_ID="codeclimate_orchestrator_${CI_JOB_ID}"
        --volume /var/run/docker.sock:/var/run/docker.sock
        --volume "${BUILDS_VOLUME_ID}":/code
        gitlab/codequality:latest $SOURCE_CODE
```

Because this job _must_ be executed in a context that is visible to Docker, we can query Docker to get the current job's container ID, and from there get the volume ID mounted as `$CI_BUILDS_DIR`. We then volume mount that volume as /code, and specify /code as the "host" location of our code to be evaluated. The orchestrator will use the passed volume as /code, which is then passed onto the engine jobs, allowing the entire process to run against an ephemeral Docker volume rather than requiring a known path on the host.
See [Library Definitions](https://flow.org/en/docs/libdefs/) on flow.org and [flow-typed’s install command](https://github.com/flow-typed/flow-typed/wiki/CLI-Commands-and-Flags#install).
Hi,

First of all, I'm sorry if this isn't the right place to raise this issue, but I found it a bit unclear as to where this type of request actually belongs. If it belongs somewhere else, please let me know and I'll raise it there. Anyway...

The cppcheck engine [has been updated recently](https://github.com/antiagainst/codeclimate-cppcheck/commits/master) (most importantly IMO, it's now using cppcheck 1.87), but the Docker image over at Docker Hub hasn't yet been updated. Therefore I'd like to request that the official image gets updated.

Thanks
This seems similar to https://github.com/codeclimate/codeclimate/issues/238

When running `codeclimate analyze` (or just directly invoking docker) in a project with any `node_modules` folders, the command hangs for a while (usually in my case, just over 30 seconds) before actually starting analysis. 

If we do any of the following, the analysis runs as speedily as expected:
* Remove all `node_modules` folder in the project
* Remove Read access from all `node_modules` folders
* Mount empty directories to the `node_modules` folder, via docker flags, e.g.

```bash
docker run \
  --rm \
  --env CODECLIMATE_CODE="$PWD" \
  --volume "$PWD":/code \
  --volume /var/run/docker.sock:/var/run/docker.sock \
  --volume /tmp/cc:/tmp/cc \
  # this is the magic flag that "fixes" the issue
  --volume /code/node_modules \
  codeclimate/codeclimate analyze)
```

`- "**/node_modules/"` is in our `exclude_patterns` setting in `.codeclimate.yml`, and even if we wait for codeclimate to start with all the `node_modules` folders intact, the engines don't run on them, but it seems the excluded files are still being scanned before any engines start up.

Some output:
### Without cleaning up `node_modules`
```
 ❯ docker run \
  --rm \
  --env CODECLIMATE_CODE="$PWD" \
  --env CODECLIMATE_DEBUG \
  --volume "$PWD":/code \
  --volume /var/run/docker.sock:/var/run/docker.sock \
  --volume /tmp/cc:/tmp/cc \
  codeclimate/codeclimate analyze
I, [2019-04-19T18:32:50.980276 #1]  INFO -- : starting engine structure
D, [2019-04-19T18:33:27.439929 #1] DEBUG -- : /config.json content:
```
~37 seconds

### With cleaning up `node_modules` by any method mentioned above
```
❯ docker run \
  --rm \
  --env CODECLIMATE_CODE="$PWD" \
  --env CODECLIMATE_DEBUG \
  --volume "$PWD":/code \
  --volume /var/run/docker.sock:/var/run/docker.sock \
  --volume /tmp/cc:/tmp/cc \
  --volume /code/node_modules \
  codeclimate/codeclimate analyze
I, [2019-04-19T18:26:12.105992 #1]  INFO -- : starting engine structure
D, [2019-04-19T18:26:12.263300 #1] DEBUG -- : /config.json content: 
```
<1 second


Moving forward `codeclimate` should probably slowly and iteratively enable the `# frozen_string_literal: true` magic comment throughout the source files. There's currently several uses of strings in a mutable way.

After this is done, the `Style/FrozenStringLiteralComment` cop should be enabled.
Hi,

We're running code climate on a React project and we have noticed something.

If we have a stateless component that exceeds the allowed number of lines of code, like:

```jsx
const SomeComponent = () => {
  return (
    <div>
      {/* ... dozens of lines of code ... */}
    </div>
  );
}
```

As expected, we get a code smell saying:
`Function SomeComponent has X lines of code (exceeds 50 allowed)`

But, if we change the code to the equivalent:
```jsx
const SomeComponent = () => (
  <div>
    {/* ... dozens of lines of code ... */}
  </div>
);
```
We don't get any code smell.

The same thing happens in regular es6 (non-React) code.

Why is that? Is it possible to fix this?

Thanks



(breaking this out from [744](https://github.com/codeclimate/codeclimate/issues/744))

please add support to the `nodesecurity` plugin to configure pre-processors so that we can run `nsp` against `yarn.lock`. 


### Error Message

> error: (CC::CLI::Analyze::EngineFailure) engine structure ran for 900 seconds and was killed

### Description

I am getting consistently a timeout after 900 seconds of running codeclimate cli locally.
Seems like it's attempting to download a HUGE collection of docker images, and times out because of this.

I installed the app locally from the brew tap indicated on `README.md` of this repo.

What is the expected behavior?
Should I also manually install those images? Might run out of disk space tho... seems a bit strange.

Thanks! :)

### Questions

- Is this an issue with codeclimate.com?
> Nope, using codeclimate CLI

- Is this an issue with a specific engine?
> Nope, using defaults

- Is this an issue with your Docker installation in general?
> Nope, Docker looks happy

- Are you invoking `docker run codeclimate/codeclimate` without other options?
> No

- Are you having trouble using this project as a gem or not via Docker?
> No

- Make sure your problem exists in the latest version of the CLI and any engines
  you're using, the following commands will update everything:
> followed the steps, running latest and greatest

### Reproduce

- Include the exact command you're running
```
CODECLIMATE_DEBUG=1 codeclimate analyze -f html > codeclimate.html
```

-  and its complete output
```
I, [2018-09-04T11:51:19.712323 #1]  INFO -- : starting engine structure
D, [2018-09-04T11:51:19.751383 #1] DEBUG -- : /config.json content: {"enabled"=>true, "channel"=>"stable", "include_paths"=>["migrations/", "nodemon.json", "CHANGELOG.md", "Dockerfile", "knexfile.js", "README.md", ".gitignore", "seeds/", ".prettierrc", ".eslintrc.js", "docker-compose.yml", "codeclimate.html", ".gitlab-ci.yml", "build/", ".env.example", ".flowconfig", "data/", ".codeclimate.yml", "src/"], "debug"=>"1"}
D, [2018-09-04T11:51:19.760459 #1] DEBUG -- : docker run: ["docker", "run", "--name", "cc-engines-structure-stable-aa3d9509-f4ee-43fd-a5e3-6cf16bce17c4", "--cap-drop", "all", "--label", "com.codeclimate.label=43032f74-4007-42b2-90fa-4f35ea1487f8", "--log-driver", "none", "--memory-swap", "-1", "--net", "none", "--rm", "--volume", "/Users/mati/Projects/kyc-provider-api:/code:ro", "--volume", "/tmp/cc/901a7814-090c-4303-819b-94b0756bb059:/config.json:ro", "--user", "9000:9000", "--memory", "1024000000", "codeclimate/codeclimate-structure"]
D, [2018-09-04T11:51:19.776825 #1] DEBUG -- : engine stderr: Unable to find image 'codeclimate/codeclimate-structure:latest' locally
D, [2018-09-04T11:51:21.690526 #1] DEBUG -- : engine stderr: latest: Pulling from codeclimate/codeclimate-structure

[attempts to download a loooooooooooooooooooong list of images]
[which obviously times out]

error: (CC::CLI::Analyze::EngineFailure) engine structure ran for 900 seconds and was killed
D, [2018-09-04T12:35:26.214527 #1] DEBUG -- : backtrace: /usr/src/app/lib/cc/analyzer/raising_container_listener.rb:14:in `finished'
	/usr/src/app/lib/cc/analyzer/composite_container_listener.rb:13:in `block in finished'
	/usr/src/app/lib/cc/analyzer/composite_container_listener.rb:13:in `each'
	/usr/src/app/lib/cc/analyzer/composite_container_listener.rb:13:in `finished'
	/usr/src/app/lib/cc/analyzer/bridge.rb:52:in `block (2 levels) in run'
	/usr/src/app/lib/cc/analyzer/formatters/formatter.rb:31:in `engine_running'
	/usr/src/app/lib/cc/analyzer/bridge.rb:37:in `block in run'
	/usr/src/app/lib/cc/analyzer/bridge.rb:34:in `each'
	/usr/src/app/lib/cc/analyzer/bridge.rb:34:in `run'
	/usr/src/app/lib/cc/cli/analyze.rb:36:in `run'
	/usr/src/app/lib/cc/cli/command.rb:73:in `execute'
	/usr/src/app/lib/cc/cli/runner.rb:25:in `run'
	/usr/src/app/lib/cc/cli/runner.rb:9:in `run'
	/usr/src/app/bin/codeclimate:12:in `<main>'
```

- Indicate what you expected to happen and what happened instead
> Expected: Analysis to run and be captured in a nicely formatted html file.
> Received: timeout :s 

- Include your operating system, how you run Docker (e.g. Docker Machine) and
  the version of Docker you're using.
> Mac OS High Sierra 10.13.6, Docker mac client

 - Include the output of the following commands:

```
>>> uname -a
Darwin Matis-MBP.fritz.box 17.7.0 Darwin Kernel Version 17.7.0: Thu Jun 21 22:53:14 PDT 2018; root:xnu-4570.71.2~1/RELEASE_X86_64 x86_64

>>> docker version
Client:
 Version:           18.06.1-ce
 API version:       1.38
 Go version:        go1.10.3
 Git commit:        e68fc7a
 Built:             Tue Aug 21 17:21:31 2018
 OS/Arch:           darwin/amd64
 Experimental:      false

Server:
 Engine:
  Version:          18.06.1-ce
  API version:      1.38 (minimum version 1.12)
  Go version:       go1.10.3
  Git commit:       e68fc7a
  Built:            Tue Aug 21 17:29:02 2018
  OS/Arch:          linux/amd64
  Experimental:     true


>>>env | grep "^DOCKER_"

```
