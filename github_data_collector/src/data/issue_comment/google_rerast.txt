I was trying to replace `r#try!(...)` with `...?` in a project which happens to be inside a workspace.

I've put an example here:

https://github.com/jugglerchris/temp_rerast_workspace_bug

Running `cargo +nightly-2019-05-13 rerast --rules_file=rtry.rs --diff` from inside `crates/rerast_test` inside that repo just outputs:

```
error: No such file or directory (os error 2)


```
If I rename the `Cargo.toml` in the workspace root to `Cargo.toml_`, then it works.
I have a project which has moved to the 2018 edition and has had `rustfix` applied to replace `try!(...)` with `r#try!(...)`.  Should rerast work converting those to `?`?  I tried with the latest release, master, and  the nightly-2019-05-13 version mentioned above; in all cases the diff is empty and `--force` has no effect.

_Originally posted by @jugglerchris in https://github.com/google/rerast/issues/30#issuecomment-560110622_
I'd like to write a rule that modifies function declarations, such as deleting an argument of a specific type. For instance, I'd like to translate all functions of type `fn foo(file: File, s: &str)` to delete the `s` argument and all uses of it. However, in trying to do so, I received an error from `replace!`, saying that no rules expected the token `fn`.

How can I write a rule that would match `fn foo(file: File, s: &str)` and delete the `s: &str` argument? (And then additionally match inside the body of any matching function to make more changes?)
With an up to date nightly (`rustc 1.41.0-nightly (412f43ac5 2019-11-24)`), I get the following build failure:

```
   Compiling rerast v0.1.76
error[E0023]: this pattern has 3 fields, but the corresponding tuple variant has 2 fields
    --> /home/josh/.cargo/registry/src/github.com-1ecc6299db9ec823/rerast-0.1.76/src/rule_finder.rs:249:24
     |
249  |                 if let hir::ExprKind::AddrOf(_, _, ref expr) = addr_expr.kind {
     |                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected 2 fields, found 3

error[E0023]: this pattern has 3 fields, but the corresponding tuple variant has 2 fields
    --> /home/josh/.cargo/registry/src/github.com-1ecc6299db9ec823/rerast-0.1.76/src/rule_matcher.rs:516:18
     |
516  |                 &ExprKind::AddrOf(p_kind, p_mut, ref p_expr),
     |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected 2 fields, found 3

error[E0023]: this pattern has 3 fields, but the corresponding tuple variant has 2 fields
    --> /home/josh/.cargo/registry/src/github.com-1ecc6299db9ec823/rerast-0.1.76/src/rule_matcher.rs:517:18
     |
517  |                 &ExprKind::AddrOf(c_kind, c_mut, ref c_expr),
     |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected 2 fields, found 3
```
I tried this code:

```rust
extern crate rcc;

use rcc::data::Location;

fn rule1(l: Location) -> Location {
    replace!(l.clone() => l);
    unreachable!()
}
```

but I get a very long JSON error saying 'can't find crate for `rcc`'.
I've been trying to get a rules file that rewrites `Result<r, Box<Error>>` into `Result<r, Box<dyn Error>>` and failing. It would be useful to have an example for the replace_type macro since those are pretty much undocumented at the moment.

For reference my current attempt at this looks like

```rust
 use std::error::Error;

fn use_dyn_for_boxed_error_traits<T>(r: T) {
    replace_type!(Result<r, Box<Error>> => Result<r, Box<dyn Error>>);
    unreachable!()
}
```
If a crate has a non-empty [features] section, then it seems that not all targets get checked for matches unless the user runs "cargo clean" first.