It would be nice, and easily implementable, that when executing tidyverse_conflicts() function, a message is also included that "spreads the word" about "conflicted" R Package, as an alternative (and useful) conflict resolution strategy.

Current behavior is:

```
> library(tidyverse)
-- Attaching packages --------------------------------------- tidyverse 1.3.0 --
v ggplot2 3.2.1     v purrr   0.3.3
v tibble  2.1.3     v dplyr   0.8.3
v tidyr   1.0.0     v stringr 1.4.0
v readr   1.3.1     v forcats 0.4.0
-- Conflicts ------------------------------------------ tidyverse_conflicts() --
x dplyr::filter() masks stats::filter()
x dplyr::lag()    masks stats::lag()
```

My proposal is:
```
-- Conflicts ------------------------------------------ tidyverse_conflicts() --
x dplyr::filter() masks stats::filter()
x dplyr::lag()    masks stats::lag()
-- Strict Conflict Resolution Strategy: Use 'conflicted' R Package for making every conflict between loaded package functions an error, and force you to choose which function to use.
```
Or:
```
-- Conflicts ------------------------------------------ tidyverse_conflicts() --
x dplyr::filter() masks stats::filter()
x dplyr::lag()    masks stats::lag()
-- For a Strict Conflict Resolution Strategy: Use 'conflicted' R Package.
```
Current the tidyverse package does not include `dtplyr` (which is fun an awesome and amazing effort):

``` r
packageVersion('tidyverse')
#> [1] '1.3.0'

tidyverse::tidyverse_packages()
#>  [1] "broom"      "cli"        "crayon"     "dbplyr"     "dplyr"     
#>  [6] "forcats"    "ggplot2"    "haven"      "hms"        "httr"      
#> [11] "jsonlite"   "lubridate"  "magrittr"   "modelr"     "pillar"    
#> [16] "purrr"      "readr"      "readxl"     "reprex"     "rlang"     
#> [21] "rstudioapi" "rvest"      "stringr"    "tibble"     "tidyr"     
#> [26] "xml2"       "tidyverse"
```

<sup>Created on 2019-12-16 by the [reprex package](https://reprex.tidyverse.org) (v0.3.0)</sup>

I am wondering if you'd consider a PR adding `dtplyr` as a non-core tidyverse package. I was expecting `dtplyr` to be updated with `tidyverse::tidyverse_update`

From @hadley on the [RStudio Discourse](https://community.rstudio.com/t/what-is-the-core-tidyverse-packages/3628/7?u=hammer) in January 2018:

> The real question is why isn’t lubridate in core? The answer is that it currently conflicts (in a narrow sense) with too many base functions - in practice the lubridate functions extend or wrap the base alternatives so the conflict aren’t harmful in practice, but I haven’t had time to think through how this should be indicated in the tidyverse loading screen.

Figured I'd file an issue on GitHub in case there's any loading screen progress to track (that could perhaps be linked to this issue).
**Goal:** Make it clearer that the development version is, well, in development.

Original plan was to remove it from the landing pkgdown pages, but, since most of these are generated from the README.md, this would mean removing that information from the GH landing page as well.

**tidyverse repos**
- [ ] blob
- [ ] broom
- [ ] dbplyr
- [x] dplyr https://github.com/tidyverse/dplyr/pull/3709
- [ ] forcats
- [ ] ggplot2
- [ ] glue
- [ ] googledrive
- [ ] googlesheets4
- [ ] haven
- [ ] hms
- [ ] lubridate
- [ ] magrittr
- [ ] modelr
- [ ] principles
- [ ] purrr
- [ ] readr
- [ ] readxl
- [ ] reprex
- [ ] stringr
- [ ] style
- [ ] tibble
- [ ] tidyr
- [ ] tidyselect
- [x] tidytemplate
- [ ] tidyverse