Tool window content disappears when it is no longer pinned. Only the full class name is displayed. As soon as the window is pinned the content appears again. What am I doing wrong?

Screenshot Links:
[Pinned window](https://files.sms-online.net/Handlers/AnonymousDownload.ashx?file=0f7acc75&links=true)
[Unpinned window](https://files.sms-online.net/Handlers/AnonymousDownload.ashx?file=16f532e1&links=true)
When you open the Tools->Options and change a setting then click Cancel the user would assume that opening the Options window again would show the original setting however it currently shows the unsaved settings that the user selected before clicking Cancel. Changing the PartCreationPolicy to NonShared fixes this issue.
Our main software has a dependency on Metro (which we upgraded to 1.6.5), however a standalone editor we have also depends on Metro and Gemini, so we upgraded Metro to the Metro 1.6.5, seems to work without any side effects. - Brian

(Greetings Tim! This above comment is about the Verbs Editor, we just discovered it didn't work anymore because of our upgrade to Metro as mentioned above -Brian)

pls add a light bulb module like visual studio codefix bubble
Within my ToolViewModel, how do I know if the tool is docked as a Document? Or if it is floating for example?

I made a tweak in the `LayoutInitializer`. I've changed `PaneLocation` enum, adding `Floating` and `Document` options:
```
public void AfterInsertAnchorable(LayoutRoot layout, LayoutAnchorable anchorableShown)
        {
            // If this is the first anchorable added to this pane, then use the preferred size.
            var tool = anchorableShown.Content as ITool;
            if (tool != null)
            {
                var anchorablePane = anchorableShown.Parent as LayoutAnchorablePane;
                if (anchorablePane != null && anchorablePane.ChildrenCount == 1)
                {
                    switch (tool.PreferredLocation)
                    {
                        case PaneLocation.Left:
                        case PaneLocation.Right:
                            anchorablePane.DockWidth = new GridLength(tool.PreferredWidth, GridUnitType.Pixel);
                            break;
                        case PaneLocation.Bottom:
                            anchorablePane.DockHeight = new GridLength(tool.PreferredHeight, GridUnitType.Pixel);
                            break;
                        case PaneLocation.Floating:
                            {
                                anchorableShown.FloatingHeight = tool.PreferredHeight;
                                anchorableShown.FloatingWidth = tool.PreferredWidth;

                                var window = Application.Current.MainWindow;
                                var screen = System.Windows.Forms.Screen.FromHandle(new WindowInteropHelper(window).Handle);
                                anchorableShown.FloatingTop = (screen.WorkingArea.Height / 2d) - (anchorableShown.FloatingHeight / 2d);
                                anchorableShown.FloatingLeft = (screen.WorkingArea.Width / 2d) - (anchorableShown.FloatingWidth / 2d);
                                anchorableShown.Float();
                                break;
                            }
                        case PaneLocation.Document:
                            anchorableShown.DockAsDocument();
                            break;
                        default:
                            throw new ArgumentOutOfRangeException();
                    }
                }
            }
        }
```

However, MVVM in Avalon is fairly difficult, so I couldn't figure it out how to find out whether my ToolViewModel is docked as document.

Any insights?
Hello,
when trying to run the most basic application with gemini, I get the following (inner) exception when running the app:

Could not load type 'Caliburn.Micro.AssemblySource' from assembly 'Caliburn.Micro.Platform, Version=3.0.3.0, Culture=neutral, PublicKeyToken=8e5891231f2ed21f'.

Building works fine. Also, version 3.0.3.0 of Caliburn.Micro is installed, I downgraded that from 3.2.0. Note that I had to install Caliburn.Micro manually, the package manager gave an error on trying to install GeminiWpf as a dependency without install Caliburn.Micro first.

I am unsure how to resolve the exception. Any help appreciated!

Greets, Menno
I have already known that GraphViewModel should Inherit from PersistedDocument and override the 
three methods named DoNew„ÄÅDoSave and DoLoad . I am now confused about how to save GraphViewModel as a document and load it later. It will be pretty appreciated if someone can help me fix it.

I forgot to use the resource there even though there is one.