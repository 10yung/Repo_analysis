I have used git subtree merge to merge clap_derive into this repo thus making sure we don't lose history of clap_derive.

To check that the repo is merged correctly, we compare the hashes. The last non-merge commit here is https://github.com/clap-rs/clap/commit/0352bb30c897b00af88ad240e8e6f4aaf1855d05 where as the last commit in clap_derive is https://github.com/clap-rs/clap_derive/commit/0352bb30c897b00af88ad240e8e6f4aaf1855d05. As you can see, they are both the same.

https://github.com/clap-rs/clap/commit/5e8f424dfeef9c6dbd9c267dee323b8009e9a98b is the merge commit.

And then https://github.com/clap-rs/clap/commit/398e71fcd95eec09404f454beb1e95f8bcfb7232 is the commit which integrates both the repos together and sets up CI.

/cc @Dylan-DPC @CreepySkeleton

### Make sure you use the `merge` option instead of `squash` when merging this PR. Otherwise, all this git history would be lost.
The reason to do this is described well in issue #1327.
It is also a recommendation of the Rust book itself:
https://rust-cli.github.io/book/in-depth/exit-code.html

I have run the tests with no failures:
```
$ cargo test --no-default-features
...
test result: ok. 286 passed; 0 failed; 11 ignored; 0 measured; 0 filtered out
$ cargo test --features "yaml unstable"
...
test result: ok. 286 passed; 0 failed; 14 ignored; 0 measured; 0 filtered out
```
## Why?
Let's say you want to write a CLI program that requires the user to log in with a username and password, e.g. a CLI API for some web service. This is perfectly doable with arguments, but it may be preferred to prompt the user to supply these when they start the program, as follows:
```
$ example_program
> username: beepboop
> password: 
Successfully logged in!
```
Or, let's say you have an option that can be dangerous to enable in certain circumstances, and you want to ask the user if they're sure (like `rm -rf` does):
```
$ example_program --danger
> Are you sure you want to do the dangerous thing? [y/N] 
```
It's not hard to write this logic on your own, but given that these are rather common use-cases, it would be convenient to include this functionality within Clap.

## What?
I propose adding a few simple prompting functions for handling common prompting situations. Here's a rough list:
- `prompt_if_absent(prompt: &str)`: Asks the user to supply a value for this argument if they didn't at run time. Displays `prompt` on the line where they type; in the first example above, the `prompt`s would have been `"> username: "` and `"> password: "` respectively.
- `suggest_if_absent(prompt: &str, default: Fn() -> Option<String>)`: Like `prompt_if_absent`, but takes a function that can try to find a sensible default to suggest to the user, which can then be chosen by pressing enter without typing. Useful when you're not sure the default makes sense (e.g. if it's found from an envar or something), so you want to run it by the user to make sure.
- `ensure_if(prompt: &str, arg_id: Key, val: &str, default: Yes/No/None)` and similar `ensure_ifs`: Asks the user if they're sure when they've set `val`(s) with a `[y/n]` prompt. The user can select the default option by just pressing enter.
- `prompt_secret(prompt: &str)`: like `prompt_if_absent` but doesn't show what you're typing

These can all be gated behind a `prompts` feature or something to keep the core functionality simple. 

I realise there's been a little pushback on stuff like this in the past (~a few years ago?), but I do genuinely think it would be a nice addition. A lot of great CLI building tools in other languages include prompting functionality, so adding a few convenience methods for it reduces the friction required to port existing things over to Rust.

I'm happy to implement this myself if there's interest.

(Note: I'm aware of https://github.com/clap-rs/clap/issues/1471, but the changes they suggest are much more significant and have potentially quite wide implications, so I consider it a separate matter. I'd love to see that get added though :P)


### Summary

Implement `serde::Serialize/Deserialize` for `clap::App` so it could be deserialized not only from a YAML file, but from any other format.

### Motivation

Currently, yaml supports deserializing only from YAML via `App::from_yaml`. This restricts users to only the one blessed format, while the layout of `clap::App` is pretty simple on it's own and can be expressed in many config formats, such as [JSON](https://www.json.org/json-en.html), [TOML](https://github.com/toml-lang/toml), [`.plist`](https://en.wikipedia.org/wiki/Property_list) to name a few.

Supporting only the chosen one format is kind of inane nowadays, when we have `serde`, which   handles the differences between formats in a generic way.

Not to mention a number of ["YAML is too WTF-full format for config files"](https://github.com/clap-rs/clap/issues/552#issuecomment-572862739) considerations. Some users (myself included) would happily move to TOML if it was supported out-of-box.

### User experience

As for users of `clap` who only interested in YAML, nothing would change. From "user experience" side, there's no actual difference between 

```rust
let yml = load_yaml!("file.yml");
let app = App::from_yaml(&yml);
```
and 

```rust
let config = std::fs::File::open("file.yml").expect("No file.yaml!");
let app: App = serde_yaml::from_reader(config).unwrap();
```

But users interested on other formats, like TOML, JSON, you name it, could really make use of this feature.

### Implementation

I gave a quick look-over to `App` and `Arg` layout and I'm fairly certain that `Serialize` and `Deserialize` can be simply `derive`d. 

### Related issues

 #918: Serializing to / deserializing from JSON. @kbknapp agreed this feature would be pretty useful.

#853: use serde_yaml since it provides much more useful error messages.


Not sure if v2.x.x PRs are still being accepted. Please close if that's not the case.

This PR adds the version message to the `VersionDisplay` error that is produced. The same way that the help message is added to the `HelpDisplayed` error.
[As of Rust 2018][macro changes], there is no need to call `#[macro_use] extern crate foo` to import the macros from crate `foo`.

This pull request removes mentions of `#[macro_use]` from documentation examples, tests, and benchmarks, in favor of importing the macros directly.

The PR cuts down the number of instances of `#[macro_use]` from 39 down to one, required for importing in-crate macros.

[macro changes]: https://doc.rust-lang.org/nightly/edition-guide/rust-2018/macros/macro-changes.html#macro_rules-style-macros

 
[CreepySkeleton](https://github.com/CreepySkeleton) wrote in https://github.com/clap-rs/clap/pull/1624#issuecomment-571372359:

> I think that staying uniform is quite important here, let's just go for exclusive(bool).
