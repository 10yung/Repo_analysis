In C#, I have the following input:

```
namespace N
{
    public class DictionaryLookupCompare
    {
        public DictionaryLookupCompare()
        {
            foreach (var item in Enumerable.Range(0, 9).Select(x => new { str = "MyProperty" + (x + 1), i = x }))
            {
                hashTable.Add(Encoding.UTF8.GetBytes(item.str), item.i);
            }
        }
    }
}
```

with these in the config:

```
code_width                      = 80        # unsigned number
ls_code_width                   = true    # true/false
```

the output from uncrustify is:
```
namespace N
{
    public class DictionaryLookupCompare
    {
        public DictionaryLookupCompare()
        {
            foreach (var item in Enumerable.Range(0, 9).Select(x => new { str =
                                                                              "MyProperty"
                                                                              + (
                                                                                  x
                                                                                  +
                                                                                  1),
                                                                          i =
                                                                              x }))
            {
                hashTable.Add(Encoding.UTF8.GetBytes(item.str), item.i);
            }
        }
    }
}
```


I would like it be something more like:

```
namespace N
{
    public class DictionaryLookupCompare
    {
        public DictionaryLookupCompare()
        {
            foreach (var item in Enumerable.Range(0, 9).Select(
                x => new { str = "MyProperty" + (x + 1), i = x }))
            {
                hashTable.Add(Encoding.UTF8.GetBytes(item.str), item.i);
            }
        }
    }
}
```

I imagine it must be one of the "indent rather than align" options, but I can't find which. Any idea?
Thank you!
The language is C#.

I have 

```
code_width                      = 80        # unsigned number
ls_code_width                   = true    # true/false
```

this works nicely in keeping the code at 80 characters per line max.
However I found a couple of scenarios where it doesn't work.
Basically, if there is a group of parenthesis that are empty, that go over 80 chars, and they come after a sequence of identifiers separated by dot ("."), the dot sequence is not broken into two lines as it should be.

So if it's just the parenthesis that are over the 80 char limit, uncrustify won't split at the dot. If the identifer itself is over 80, even by just one character, then it will split.

The same happens with attributes, uncrustify won't split at the dot if it's just the parenthesis overflowing. It will split if an identifier goes over the 80. 

So you can end up with lines that are 2 or 3 characters over the code_width, which is bad enough for those who rely on the exact limit, but it's an even bigger problem when you have a bunch of spaces, in the parenthesis you end up with a line that can be 100 characters long that doesn't get split at all.


When assignments are involved, Uncrustify isn't as reluctant to split at the assignment character, whether it's the identifiers that go over 80 or just the parenthesis. It will happily, and correctly, split after the "=".




Examples:
This works fine
```
namespace MessagePack
{
    public class MyClass
    {
        public MyClass
        {
            sldfjsljkfdlskjdflsjkdflsjf.sldfjsljkfdlskjdfl.sjkdflsjfsdfsdfsdfssss();
         }
     }
}
```

uncrustify outputs a corect result:

 ```
namespace MessagePack
{
    public class MyClass
    {
        public MyClass
        {

            sldfjsljkfdlskjdflsjkdflsjf.sldfjsljkfdlskjdfl.
            sjkdflsjfsdfsdfsdfssss();
        }
    }
}
```


but for this input, the wrapping doesn't happen (the difference is that in this second case, the sjkdflsjfsdfsdfsdfsss stops right at the 80 char limit, whereas in the previous case it went one character over):
```
namespace MessagePack
{
    public class MyClass
    {
        public MyClass
        {
            sldfjsljkfdlskjdflsjkdflsjf.sldfjsljkfdlskjdfl.sjkdflsjfsdfsdfsdfsss();
         }
     }
}
```

the corect result would be:

namespace MessagePack
 ```
{
    public class MyClass
    {
        public MyClass
        {

            sldfjsljkfdlskjdflsjkdflsjf.sldfjsljkfdlskjdfl.
            sjkdflsjfsdfsdfsdfsss();
        }
    }
}
```

but uncrustify simply leaves it unmodified:
```
namespace MessagePack
{
    public class MyClass
    {
        public MyClass
        {
            sldfjsljkfdlskjdflsjkdflsjf.sldfjsljkfdlskjdfl.sjkdflsjfsdfsdfsdfsss();
         }
     }
}
```

Also this input works fine (it gets split)
```
namespace MessagePack
{
    public class MyClass
    {
        public MyClass
        {

            sldfjsljkfdlskjdflsjkdflsjf.sldfjsljkfdlskjdfl.sjkdflsjfsdfsdfsdfssss(          );
        }
    }
}
```

but this doesn't:
```
namespace MessagePack
{
    public class MyClass
    {
        public MyClass
        {

            sldfjsljkfdlskjdflsjkdflsjf.sldfjsljkfdlskjdfl.sjkdflsjfsdfsdfsdfsss(          );
        }
    }
}
```
(remains the same, 93 characters line).

This input gets split but not into enough lines:
```
namespace MessagePack
{
    public class MyClass
    {
        public MyClass
        {

            sldfjsljkfdlskjdflsjkdflsjf.sldfjsljkfdlskjdfl.sjkdflsjfsdfsdfsdfssss(                                                      );
        }
    }
}
```

uncrustify outputs incorrect result:
```
namespace MessagePack
{
    public class MyClass
    {
        public MyClass
        {

            sldfjsljkfdlskjdflsjkdflsjf.sldfjsljkfdlskjdfl.
            sjkdflsjfsdfsdfsdfssss(                                                      );
        }
    }
}
```



This gets split correctly:
```
namespace MessagePack
{
    public class MyClass
    {
        public MyClass
        {

            int a = sldfjsljkfdlskjdflsjkdflsjf.sldfjsljkfdlskjdfl.sljdflsjdfsdf();
        }
    }
}
```

uncrustify outputs the correct result:
```
namespace MessagePack
{
    public class MyClass
    {
        public MyClass
        {

            int a =
                sldfjsljkfdlskjdflsjkdflsjf.sldfjsljkfdlskjdfl.sljdflsjdfsdf();
        }
    }
}
```

This gets split, but into insufficient lines:
```
namespace MessagePack
{
    public class MyClass
    {
        public MyClass
        {
            int a = ldfjsljkfdlskjdflsjkdflsjf.sldfjsljkfdlskjdfl.sljdflsjdfsddffsdf();
        }
    }
}
```
uncrustify outputs incorrect result:
```
namespace MessagePack
{
    public class MyClass
    {
        public MyClass
        {
            int a =
                ldfjsljkfdlskjdflsjkdflsjf.sldfjsljkfdlskjdfl.sljdflsjdfsddffsdf();
        }
    }
}
```

If I add one more character then it finally gets split correctly:
Input:
```
namespace MessagePack
{
    public class MyClass
    {
        public MyClass
        {
            int a = ldfjsljkfdlskjdflsjkdflsjf.sldfjsljkfdlskjdfl.sljdflsjdfsddfsfsdf();
        }
    }
}
```
uncrustify outputs the correct result:
```
namespace MessagePack
{
    public class MyClass
    {
        public MyClass
        {
            int a =
                ldfjsljkfdlskjdflsjkdflsjf.sldfjsljkfdlskjdfl.
                sljdflsjdfsddfsfsdf();
        }
    }
}
```

Attributes. 
Input doesn't get split, although it should (AggressiveInlining stops right at the 80 border):
```
namespace MessagePack
{
    public class MyClass
    {
        [System.Runtime.CompilerServices.MethodImpl(
            System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)
        ]
    }
}
```
(uncrustify leaves it unmodified).
The correct result would be:
```
namespace MessagePack
{
    public class MyClass
    {
        [System.Runtime.CompilerServices.MethodImpl(
            System.Runtime.CompilerServices.MethodImplOptions.
            AggressiveInlining)
        ]
    }
}
```
but again if I add one more character to the identifier, to make it go over 80, 
with this input, it works:
Input:

```
namespace MessagePack
{
    public class MyClass
    {
        [System.Runtime.CompilerServices.MethodImpl(
            System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining1)
        ]
    }
}
```
Uncrustify outputs the correct result:
```
namespace MessagePack
{
    public class MyClass
    {
        [System.Runtime.CompilerServices.MethodImpl(
            System.Runtime.CompilerServices.MethodImplOptions.
            AggressiveInlining1)
        ]
    }
}
```


Thank you!
I'm making use of the config options:
```
# Add or remove newline after each ',' in a function declaration.
nl_func_decl_args               = remove   # ignore/add/remove/force

# Add or remove newline after each ',' in a function definition.
nl_func_def_args                = remove   # ignore/add/remove/force`
```
, setting them to Remove so that a list of parameters that spans many lines gets compacted to as few lines as possible, as permitted by code_width.

I'm looking for something similar for the parameters of a function call (as opposed to function definition/declaration). I can't seem to find anything. 

For example, this call
```
func( parameter1, parameter2, 
	parameter3, parameter4, 
	parameter5, parameter6, 
	parameter7, parameter8, 
	parameter9 );

```

would be transformed into

```
func( parameter1, parameter2, parameter3, parameter4, parameter5, parameter6, 
	parameter7, parameter8, parameter9 );

```

, assuming a code_width setting of 80 characters.

Any idea for that?
Thank you!

(The language that I'm using uncrustify for is C#, but this applies to C/C++ as well). 



I'm looking for something similar to indent_namespace and indent_class, but for functions.
Basically I would like to NOT have the body of a function indented. 
So instead of
```
class X
{
int F()
{
	int a = 0; 
	a++;
	return a;
}
}
```
I would like to get:
```
class X
{
int F()
{
int a = 0; 
a++;
return a;
}
}
```
Would there be any way to accomplish that?
Thank you!
[function_body.zip](https://github.com/uncrustify/uncrustify/files/4067620/function_body.zip)

(The language that I'm using uncrustify with is C#, but this applies to C/C++ as well). 
Debug file: https://pastebin.com/KiFZFHrY

The following code gets incorrectly treated when parsed. 
```
do(const name[], const ip[], bool:toggle)
{
	return 1;
}
```

becomes 
```
do
{
    (const name[], const ip[], bool:toggle)
}
{
    return 1;
}
```

it also gives the error
```
check_complex_statements(930): g:\pawn-uncrustify-test\main.pwn, orig_line is 5, Error: Expected 'while', got '{'
```

it believes the `do` function name is actually part of a do & while loop.
When an assignment continuation contains a lambda, it appears impossible to remove the extra level of indentation.

Input (and desired output):
```
const auto lambda = [this](int arg) {
  doSomething();
};
```

Output:
```
const auto lambda = [this](int arg) {
    doSomething();
  };
```

Debug: [debug.txt](https://pastebin.com/vTYQzKgN)

A very hacky and unacceptable patch that works around the problem: [hack.diff](https://pastebin.com/iCTik2ww)
I wanted to ask a question to know if there is anything I can do about the following 2 pieces of code, and prevent them from being changed. I have tried `set IGNORED` but it doesn't seem to apply to a specific macro I set, or any macros I try, the best I can do is ignore all `#define` instances. Which I was hoping to avoid.

Code 1
```
#define ALS_DO_PlayerExit<%0> %0<PlayerExit,i>(end:playerid)
```
becomes
```
#define ALS_DO_PlayerExit<%0> %0 < PlayerExit, i > (end:playerid)
```

It is required that the output of the macro be kept without spaces, since this becomes part of a much bigger macro that is used to make functions/natives/callbacks hookable using a certain library

Code 2
```
foreach(new i : Player)
{
}
```
becomes
```
foreach(new i:Player)
{
}
```

`foreach` is not present in Pawn generally, and is actually a macro function, that does some magic behind the scenes. (it uses a custom Iterator implementation)
I just found an issue, that also causes another crash_filter error. 
debug: https://pastebin.com/xwLtNQgn

in Pawn it is legal to do this
```
new 
	Text:testText[MAX_PLAYERS] = {Text:INVALID_TEXT_DRAW, ...},
	Text:testText1[MAX_ROWS][MAX_PLAYERS],
	bool:testText2[MAX_PLAYERS],
	testText3[MAX_PLAYERS];
```

However because the data doesn't start on the same line as the quantifier, it does in fact throw a crash filter error.
Using the latest version of uncrustify: Compiled it myself
Debug file: https://pastebin.com/78AveEza

The issue is related to this code 
```
static stock const data[][] =
{
	{0b00000011001111000010011100000000, 0b00000011001111000010011100000000},
	{0b00000011001111000010011100000000, 0b00000011001111000010011100000000}
};
```

it appears that the equal sign used to denote initializing the array with values, is the cause of a crash filter. 

The crash filter gives the error:
```
crash_filter: exception 0xC0000005 at [2141:0] (ip=00007FF676F04C3A) [CallStack: pawn_process_variable:261, pawn_process_line:202, pawn_prescan:170]
```
The space between the return type and parameters of a function type in a `std::function<return (params)>` declaration is incorrectly removed in some cases. Note that the `size_t` is incorrectly assessed as `FUNC_CALL`, whereas `void` is correctly assessed as `TYPE`.

Input (and expected output):
```
// Retains the space after "void".
typedef std::function<void (int arg)> Pass;

// Removes the space after "void".
typedef std::function<size_t (int arg)> Fail;
```

Output:
```
// Retains the space after "void".
typedef std::function<void (int arg)> Pass;

// Removes the space after "void".
typedef std::function<size_t(int arg)> Fail;
```

Debug: [debug.txt](https://pastebin.com/5i6UwNKv)
