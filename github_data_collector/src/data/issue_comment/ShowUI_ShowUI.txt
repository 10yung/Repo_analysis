For a UI I would Need to insert a additional row into a DataGrid. I have tried this:

`New-DataGrid -Name "DataGridTest" -ItemsSource @($colKonfig) -CanUserAddRows $true -Show`

$colKonfig is a PSCustomObject
The command Shows everything fine and I can edit items etc., but I can not add a row.

Does somebody knows a Workaround?
Imagine the following code:

```
$User = [ordered]@{
   FirstName = "John"
   LastName = "Doe"
   BirthDate = [DateTime]
   Age = [int]
}

Get-Input $User -Show
```

When run, if you write 0 on the age field, you will get an error that it couldn't convert '' to an int.

Other types might also be affected.

Another bigger part of this bug (which you might want to split into two), is that the validation is performed on PreviewTextInput, which will only trigger if the key is textual, which means it will not trigger the event on things like ... space, backspace, delete, CTRL+C, CTRL+V, etc...

This makes the validation really buggy, because I could enter '<space><space><space>1' into the age field and it would only say it can't convert into an int when I add the 1.

To take things another level, I could even paste in a string to the Age field and it wouldn't complain at all since no validation is performed. It would even allow me to press OK and would return the string as a value of the Age field back to the user, which is not intended.
There is currently a feature of all the controls where you can declare -ControlName to try and make blocks of ShowUI that can be re-used. It doesn't work well, and is confusing (people keep using that when they mean -Name).

A better approach would be to allow a scriptblock to override the "GetValue" results. That way, custom blocks of ShowUI wouldn't pretend to be "controls" but could still use custom logic to calculate their own value.

This will be a breaking change for 2.0
Would it be possible for ShowUI to automatically focus the first **named** control, when a window is shown, so that we don't constantly have to do:

```
Show-UI -On_Focus { $First.Focus() } ...
```
Hello @Jaykul , 

to continue the conversation from here: http://showui.codeplex.com/discussions/575759

I am picking up this project again, the problem I am running into using the MahApps 1.3.0 version is that the MetroWindow XAML is not valid and does not contain the MahApps Style. You can see the missing assembly reference's when using `New-MetroWindow | Out-Xaml`.

If i switch to the new update (2.0 ; previous was 1.5) it breaks my whole user interface there are many major errors in the new update, e.g. when i set New-DataGrid -CanUserReorderColumns $true -CanUserResizeColumns $true -CanUserSortColumns $true it gives me an error like this [33564,9: Set-WpfProperty] Cannot find an overload for "Add" and the argument count: "1". Any plans to resolve this issue?

Suppose a simple tab control window (gui.xaml):

```
<Window
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        Title="MainWindow">
    <TabControl>
        <TabItem Header="Tab1">
            <Grid>
                <Button Name="button1" Content="Button1"/>
            </Grid>
        </TabItem>
         <TabItem Header="Tab2">
            <Grid>
                <Button Name="button2" Content="Button2"/>
            </Grid>
        </TabItem>
    </TabControl>
</Window>
```

When loaded with Show-UI's -XAML parameter, button2 is not accessible.

Example gui.ps1:

```
Show-UI -Xaml $PSScriptRoot\gui.xaml -On_Loaded {
    Add-EventHandler $button1 Click {
        write-host "Button 1 was pressed!!!"
    }
    Add-EventHandler $button2 Click {
        Write-Host "Button 2 was pressed!!!"
    }
}
```

Output:

```
PS C:\Users\Tough> C:\data\working\tests\gui.ps1
Error in On_Loaded Event Handler on Window
At line:10 char:19
+     Add-EventHandler $button2 Click {
+                      ~~~~~~~~
The argument is null. Provide a valid value for the argument, and then try running the command again.
```

After importing the MahApps.Metro dll using the OutputXaml flag will out put the usual content and the xaml.

Also New-MetroWindow -OutputXaml will complain that a window must be a root when it is.
