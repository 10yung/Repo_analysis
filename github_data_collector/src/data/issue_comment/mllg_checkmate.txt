When I interact with database tables (through [odbc](https://CRAN.R-project.org/package=odbc)), , I come across [64-bit integers](https://cran.r-project.org/web/packages/bit64/bit64.pdf).  It would be nice to be able to check them directly with checkmate, instead of casting them to a character, and then using `checkmate::assert_character()`.

Would `assert_integer64()` be a useful function in this package?  Would the code resemble the checks for [tibble](https://github.com/mllg/checkmate/blob/master/R/checkTibble.R)?
All of the following assertions finish with success:

```
library(checkmate)

assert_character(NA_integer_)
assert_integer(NA_character_)
assert_factor(NA_complex_)
assert_double(NA)
assert_logical(NA_real_)
```

I can see that the type validation for vectors with only NAs is treated separately:

```
HANDLE_TYPE_NULL(is_class_string(x) || all_missing_atomic(x)...
```

I assume then that there is no way for checking type for missing values in C? If so do you have an idea how could it be efficiently done within R and incorporated into the package? I could then work on the pull request.
According to the documentation: "`makeAssertion` invisibly returns the checked object if the check was successful, and an exception is raised (or its message stored in the collection) otherwise."

It appears that when a collection to store assertion messages is specified with `add`, `makeAssertion` always invisibly returns the checked object (i.e., even if the check was not successful):
```R
> library(checkmate)
> 
> x <- FALSE
> y <- assertInt(x)
Error: Assertion on 'x' failed: Must be of type 'single integerish value', not 'logical'.
> exists("y")
[1] FALSE
> 
> x <- FALSE
> coll <- makeAssertCollection()
> w <- assertInt(x, add = coll)
> exists("w")
[1] TRUE
```

Is it the desired behavior? It would be convenient to not return the checked object when the check fails in that case (for example to allow further testing, or to skip testing other variables that may depend on the one that just failed the test).
Sometime default values are not `character(0)` but `""`. It would be helpful to have a test function for this, like `checkScalarNA`.
at teast a truncated version of it?
Unsure if this is required and wanted. Missingness would again be defined as `NULL` for these columns.
Feature request. Could you add an assertion for the maximum allowed number of characters in a string (e.g., `max.chars` ) with a meaningful error message in `assert_character()` and `assert_string()`. 
I kinda sorta expected the below to yield `TRUE`, but:

```
check_character(x = c("foo", NA, NA), any.missing = TRUE, unique = TRUE)
# > [1] "Contains duplicated values"
```

I guess that strictly speaking is true; `NA` is duplicate.

My *intention* here was to test whether the non-`NA`s were duplicate.

Am I using this wrong, or could the behavior of checkmate be changed here?
`assertList(x)` throws an error if `x` is a `pairlist` object. From the base-R point of view, this is unexpected:

```r
# create a pairlist
p <- pairlist(x = 1)
class(p)
# p is a list according to base R
base::is.list(p)
# p is not a list according to checkmate
checkmate::testList(p)
```

One might argue that a pairlist is a special list which should not be considered as a list by default, but in this case this should be documented in ?assertList. 

Note that this is not an issue of unevaluated symbols in a list:
```r
a <- alist(x = not_existing_variable)
testList(a)
```

An easy workaround would be to introduce a new argument to `checkList`: `pairlist.ok = FALSE` so that it does not affect existing code. Later the default could be changed to `TRUE`. 
As a possible enhancement, consider a function like this:

```r
prohibit_vector_recycling <- function(...){
  lengths <- vapply(list(...), FUN = length, FUN.VALUE = 0L)
  max.length <- max(lengths)
  if (any(lengths != 1L & lengths != max.length)){
    stop("Only permissible vector lengths are 1 or the maximum (nrow) of the inputs.")
  } else {
    invisible(max.length)
  }
}
```

The point of this function is to avoid nasty surprises from vector recycling and to a lesser extent to avoid checking multiple times. For example, if the inputs are being added to a data.frame 

https://github.com/HughParsonage/grattan/blob/6db7207687b4df6c6b67087a9cf970fd4ddd44b3/R/income_tax.R#L159-L164

It seems a good fit for `checkmate`. I could have added this as a pull request, but I'm guessing you might prefer it to be implemented in C.
