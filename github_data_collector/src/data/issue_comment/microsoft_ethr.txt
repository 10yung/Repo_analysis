Pull resquest for  #77  
Because res was initialized with a size of len(ifs), the UI displayed "empty" interfaces.
When testing low latency lines, 2 digits precision is not enough.

By displaying 3 digits after decimal point, ethr latency test helps me to find out some of our switch would incur about 40us latency.
https://github.com/microsoft/ethr/blob/fe09eed5fbce59a67e03295019b6258a1d7f8d3f/ui.go#L165

Currently, unicode network interface name is not displayed correctly.
Please change the code
xoff++ ==> xoff = xoff + 2

Thanks a lot.

![if_err](https://user-images.githubusercontent.com/17287772/70418268-764ef200-1aa6-11ea-9e6c-f56b70d2ea74.png)
Hi.
I am running a UDP network performance test with ethr.
The client reports sending speed, but the server reports only 0 bits/s. Why is that?

UDP/TCP ports 4200-4300 are open, so the traffic should pass. The same experiment with HTTP works well.

I need to know the speed of receiving,

### Server
`ethr -s -ports control=4287,tcp=4299,udp=4201,http=4289,https=4288`

```
[RemoteAddress]  Proto   Bits/s   Conn/s    Pkt/s   Latency 
[**.**.***.***]    UDP        0
[**.**.***.***]    UDP        0
[**.**.***.***]    UDP        0
[**.**.***.***]    UDP        0
[**.**.***.***]    UDP        0
[**.**.***.***]    UDP        0
[**.**.***.***]    UDP        0
[**.**.***.***]    UDP        0
[**.**.***.***]    UDP        0
[**.**.***.***]    UDP        0
Ending Bandwidth test from **.**.***.***
```

### Client

`ethr -c IP -n 1 -p udp -t b -ports control=4287,tcp=4299,udp=4201,http=4289,https=4288 -l 64KB`

```
[ ID]   Protocol    Interval      Bits/s
[  6]     UDP      000-001 sec     1.90G
[  6]     UDP      001-002 sec     1.89G
[  6]     UDP      002-003 sec     1.89G
[  6]     UDP      003-004 sec     1.89G
[  6]     UDP      004-005 sec     1.89G
[  6]     UDP      005-006 sec     1.89G
[  6]     UDP      006-007 sec     1.89G
[  6]     UDP      007-008 sec     1.89G
[  6]     UDP      008-009 sec     1.89G
[  6]     UDP      009-010 sec     1.89G
```
What's the behavior supposed to be for the buffer parameter on a bandwidth test?
 I've been taking tcpdumps thinking that it would increase the actual packet size but that doesnt seem to be the case. My test looks like 
``` ethr -c ethr-server -t b -i 1 -l 2mb -d 5s
ethr -c ethr-server -t b -i 1 -l 40mb -d 5s
ethr -c ethr-server -t b -i 1 -l 2gb -d 5s
```
The packet length ramps up from 64 to 22848 and never changes based on what buffer size I give it. I saw an issue that was closed https://github.com/microsoft/ethr/issues/16. I'm curious as to how one would go about crafting a packet size or what the buffer size is doing. If there is no way to do this, would you guys be open to PRs implementing that functionality? Thanks
hi,
is it will support QOS traffic later?

iperf3 support QOS on linux (-Q parameter), in windows there are another logical for QOS (https://docs.microsoft.com/en-us/windows/win32/api/_qos/)


Hello!

IP version output to display, when server side is in use. E.g.:

```
./ethr -4 -s
Accepting IP version: ipv4
Listening on 9999 for TCP bandwidth tests
Listening on 9998 for TCP conn/s tests
Listening on 9996 for TCP latency tests
Listening on 9899 for HTTP bandwidth tests
Listening on 9799 for HTTPS bandwidth tests
Listening on 8888 for control plane
```

```
./ethr -6 -s
Accepting IP version: ipv6
Listening on 9999 for TCP bandwidth tests
Listening on 9998 for TCP conn/s tests
Listening on 9996 for TCP latency tests
Listening on 9899 for HTTP bandwidth tests
Listening on 9799 for HTTPS bandwidth tests
Listening on 8888 for control plane
```

```
./ethr -4 -6 -s
Accepting IP version: ipv4, ipv6
Listening on 9999 for TCP bandwidth tests
Listening on 9998 for TCP conn/s tests
Listening on 9996 for TCP latency tests
Listening on 9899 for HTTP bandwidth tests
Listening on 9799 for HTTPS bandwidth tests
Listening on 8888 for control plane
```

```
./ethr -s
Accepting IP version: ipv4, ipv6
Listening on 9999 for TCP bandwidth tests
Listening on 9998 for TCP conn/s tests
Listening on 9996 for TCP latency tests
Listening on 9899 for HTTP bandwidth tests
Listening on 9799 for HTTPS bandwidth tests
Listening on 8888 for control plane
```

Can be useful for dropping specified packets from client side. Personally, after some tests I have 0.5 ratio of initial connections due to multiple TCP6 ```CLOSE_WAIT``` connections (12 hours) in ```ss -tunlp``` output.
Clients : Android 8 / Android 9 Pie 
Server : Ubuntu Server 18.04

Compiled from latest commit : 65627a0

Steps to reproduce:

Start the server
Initialize the first client with ethr -c IP -p udp
Initialize the second client with ethr -c IP -p -r udp

second client will print this output:

panic: runtime error: invalid memory address or nil pointer dereference
[signal SIGSEGV: segmentation violation code=0x1 addr=0x0 pc=0x23a5e4]

goroutine 1 [running]:
main.establishSession(0x100000001, 0x3e8000000001, 0x1000003e8, 0x4420010890, 0xf, 0x44200b6070, 0x34f4c0, 0x442005fb10)
        /root/go/src/ethr/client.go:74 +0x4a4
main.runClient(0x100000001, 0x3e8000000001, 0x1000003e8, 0x2540be400, 0x0, 0x7fc9bfa873, 0xd)
        /root/go/src/ethr/client.go:28 +0xc0
main.main()
        /root/go/src/ethr/ethr.go:374 +0x708


Then the server will be waiting forever for the UDP packets.

One more thing, when client sends the UDP packets, it will fill the pipe , in my case client tried to send 1Gbit of data in one try.
Hello!

It'll be useful to have final, extended, summary on server and client sides instead of current brief.

E.g. for ```ethr -s ```:

```
Ending Bandwidth test from <client_IP>
Min: %min_value
Max: %max_value
Avg: %avg_value
Dur: %duration
```
E.g. for ```ethr -c <server_IP>```:

```
Ethr done.
Min: %min_value
Max: %max_value
Avg: %avg_value
Dur: %duration
```

Doable?

Thanks!