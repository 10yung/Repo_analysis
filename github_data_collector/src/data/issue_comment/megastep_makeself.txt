Added `RUNNING_DIR` env variable which exposes the dirname of the makeself executable for startup scripts.
currently, any password supplied using --ssl-passwd when creating a makeself archive is exposed in the header --info block with the build commands. problem can be sidestepped by using --ssl-pass-src and a temporary file instead. should probably either rework the build info to drop/redact that argument or stop supporting --ssl-passwd
makeself's header checks if it can use openssl's password source flags by checking against $ENCRYPT, it should check against $COMPRESS to see if openssl was used to encrypt the archive here. other uses of the $ENCRYPT variable are also suspect.
This came from need to provide additional decryption parameters to GPG,
which is currently not possible. Instead of adding --gpg-decrypt-extra
option, this commit lets users provide custom commands (de)compression.

Example usage:

  ./makeself --compcmd "gpg -c" \
      --decompcmd "gpg -d --pinentry-mode=loopback" \
      . /tmp/sfx.sh installer ./run
This use of `type` is fine and should be converted to a shell function.
https://github.com/megastep/makeself/blob/50fb8888e8189f052be447dfc044831a22c137fc/makeself.sh#L643

This use is potentially problematic as it relies on `type` immediately without trying the more standard `which`.
https://github.com/megastep/makeself/blob/50fb8888e8189f052be447dfc044831a22c137fc/makeself.sh#L167

Apparently, `type` is in the [most recent](https://pubs.opengroup.org/onlinepubs/9699919799/utilities/V3_chap02.html#tag_18_09_01_01) POSIX shell spec; but, historically, it has not been a part of the POSIX shell.
Consider the following questions:

* What is the target platform for `makeself`?
* How should `makeself` be tested for proper function on the target platforms?
* Which (if any) assets, fixtures, and/or harnesses are required to test `makeself`?

Pursuant to earlier conversations...

* https://github.com/megastep/makeself/pull/177
* https://github.com/megastep/makeself/pull/176

...between @megastep , @bracketttc , and myself, I get the distinct impression that there is a need to specify the functional requirements on `makeself`. The `README.md` proudly (and rightfully) reports the following astounding accomplishments:

> As of version 2.1, Makeself has been rewritten and tested on the following platforms:
>    Linux (all distributions)
>    Sun Solaris (8 and above)
>    HP-UX (tested on 11.0 and 11i on HPPA RISC)
>    SCO OpenUnix and OpenServer
>    IBM AIX 5.1L
>    macOS (Darwin)
>    SGI IRIX 6.5
>    FreeBSD
>    UnicOS / Cray
>    Cygwin (Windows)

I want more; i.e., a CI test suite that _proves_ the aforementioned assertions at will, for any commit within the `makeself` repository.

To assemble such a test suite, we require at least some of the following:
* an enumeration of supported Operating Systems
* an enumeration of supported shells (possibly conditional on the supported Operating System)
* a mechanism whereby a given supported target can be mocked on a "modern platform"

I'll go first:
* I think that we should target a circa 1987 Bourne Shell.
* I think we should use containers to fake an environment for testing.

What say others?
When passing `;` to the inner script the rest of the arguments are interpreted as a command to be executed:
```
$ cat pkg/test.sh
echo "Arguments:"
for arg in "$@"; do
  echo "- $arg"
done
echo "Done!"
$ makeself pkg/ runner.sh "Args tester" ./test.sh >/dev/null 2>&1
$ ./runner.sh -- "one;two"
Verifying archive integrity... All good.
Uncompressing Args tester  100%
Arguments:
- one
Done!
./runner.sh: 1: eval: two: not found
```

This allows execution of commands:
```
$ ./runner.sh -- "dummy;wc -l /etc/passwd"
Verifying archive integrity... All good.
Uncompressing Args tester  100%
Arguments:
- one
Done!
49 /etc/passwd
```

Relates to #57.
I created the self installation package under ubuntu16.04 and run it under busybox on target.

it fails in the md5 check. it looks the "head" command used a option 's' that is not supported busybox. 

root@am335x:~# . ./ams_client-arm-a7-2019-5-4.sh
Verifying archive integrity...head: invalid option -- 's'
BusyBox v1.20.2 (2013-06-25 16:43:45 CDT) multi-call binary.

Usage: head [OPTIONS] [FILE]...

-sh: -sh: No such file or directory
Error in MD5 checksums: d41d8cd98f00b204e9800998ecf8427e is different from cd520c118a3d9e260648ae3280fccfdf

Ever since this PR (https://github.com/megastep/makeself/pull/149), I've been unable to build my self-extractable archive, I'm running into this error:

```
About to compress 7079540 KB of data...
Adding files to archive named "./output/artifact.up"...
tar: Cannot update compressed archives
Try 'tar --help' or 'tar --usage' for more information.
ERROR: failed to create temporary archive: /tmp/mkself28978.tar
```

Here is how I'm building it:
```
XZ_OPT="-1 --threads=0" ./makeself/makeself.sh \
     --needroot \
     --complevel 1 \
     --tar-extra "--use-compress-program=xz" \
     --untar-extra "-J" "./output/release" \
     "./output/artifact.up" "Self-Extractable Package Title" \
     "./install.sh" # my personal install script
```

Has anyone else seen this behaviour before? I was unable to find a workaround. 
Seems no matter what I do my start scripts don't execute when running the generated archive.
I've made certain the original script is executable.
I've tried setting the startup script to be ./startup.sh and "sh startup.sh" and neither approach works. I've also tried "sudo startup.sh" (since I'm running as root).

I either get "Permission denied" or "No such file or directory" or "Command not found"

I have even extracted the contents of the archive and then manually ran the startup script and it runs successfully if extracted first.

Here is sample of directory being used to create archive:
/appinstall
- abc.war
- def.war
- startup.sh

Then I run:
./makeself.sh appinstall appinstall.run "Generic message" ./startup.sh

Not sure what I am doing wrong. Any assistance is appreciated.