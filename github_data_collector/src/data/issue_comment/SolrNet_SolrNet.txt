Hello,

I have to build a query with grouping. I decided to use the ready to use the "CollapseExpand" property with a "CollapseExpandParameters" instance. This works just fine !

For some reason, I want to facet on the whole results rather than on the filtered results. On way to achieve this is to issue a query like this : 

`q=*:*&fq={!collapse field=GroupingField nullPolicy=collapse tag=grouping}&expand=true&facet.field={!ex=grouping}Author_exact&facet=true`

The CollapseExpandParameters doesn't have a "Tag" property and I dont't know how to inject that without leaving CollapseExpandParameters and building the whole FilterQuery by myself (which would be sad).

If you know a better to do this, this would make my day !

Thanks for your attention (and your great piece of software)
Guillaume
Hi. Is it possible to use basic authentication with synchronous methods in asp.net core (Microsoft.Extensions.DependencyInjection) and how? I have noticed that 
services.AddSolrNet(ApplicationContext.AppSettings.SolrSearchServer, 
                options => { options.HttpClient.DefaultRequestHeaders.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue("Basic", solrCredsBase64); });
only adds header if async methods are used, like AddAsync, DeleteAsync etc.
Sometimes it is quite difficult to convert code to async.
We use SolrNet quite extensively, thank you for providing this great package.

In a lot of projects we're bound to using LightInject DI and have no real possibility to use another DI container next to it.
It would be great if somebody could create a SolrNet implementation package for LightInject DI.

I have tried to do it myself, but my knowledge of the way SolrNet uses DI is not sufficient.
I was wondering if it would be a good idea to allow specifying the collection name on the type. 

Example:

```csharp
[SolrCollection("products")]
public class Product {
    [SolrUniqueKey("id")]
    public string Id { get; set; }

    [SolrField("manu_exact")]
    public string Manufacturer { get; set; }

    [SolrField("cat")] // cat is a multiValued field
    public ICollection<string> Categories { get; set; }

    [SolrField("price")]
    public decimal Price { get; set; }

    [SolrField("inStock")]
    public bool InStock { get; set; }

    [SolrField("timestamp")]
    public DateTime Timestamp { get; set; }

    [SolrField("weight")]
    public double? Weight { get; set;} // nullable property, it might not be defined on all documents.
}
```

I noticed in the code for solr cloud that when a collection name is not provided it defaults to the first collection in the state provider. I think being able to specify the collection name on the class would be very useful. Thanks!
Using the AutofacContrib.SolrNet package and wiring up multiple cores with HttpWebRequestFactory as follows doesn't actually inject the HttpWebRequestFactory (because it's not implemented in the multi-core logic).
```
var factory = new BasicAuthHttpWebRequestFactory("myLogin", "myPassword");
builder.RegisterModule(new SolrNetModule(new List<ISolrServer>
{
	new SolrServer("core0-id", "http://localhost:8983/solr/product", typeof(Person).AssemblyQualifiedName),
	new SolrServer("core1-id", "http://localhost:8983/solr/product2", typeof(Person).AssemblyQualifiedName)
})
{ HttpWebRequestFactory = factory });
```

I resolved this in my fork (see https://github.com/LCHarold/SolrNet/commit/82fb4c338be8f5f3a87683b1db3dc48aeb47c160) in the simplest way possible, and I'm happy to submit it as a PR, but wanted to see if there might be a better solution.

An obvious limitation with my implementation is there is only one possible HttpWebRequestFactory for all cores. That's fine for my use case, but is it feasible that you could want a different factory per core? And if so, any thoughts on how we'd do that with Autofac? Perhaps by registering IHttpWebRequestFactory itself and letting the caller decide how to implement? I'm not an Autofac expert so this is just speculation.

------------------------------------------------
*Update 2019-11-20:*
The original use case for the above multi-core config was the requirement to customize the URI because we're using a middleware product in front of SOLR, and it expects incoming requests go to its custom URIs, including NOT going to /select.

I was ultimately able to work around this by setting `QueryOptions.RequestHandler` on each request to the custom URI.

In case it helps anyone facing a similar situation.
Hello everyone,

Firstly, My english is not enough sorry. When I use the build and dll schemas look like pluralsight video's version 5.5, there is no problem, but when I try to install by nuget, I don't understand what to do. I've been looking for examples for days on google. but unfortunately I couldn't find anything. After downloading dll from nuget i want to open new core, But solr admin ui want the config file for the core. I couldn't find the default config to use as an example. How will this happen if I open a new core while use dll install Nuget package. I would appreciate your help.

Have a nice day
Since v7 of solr it is possible to map for example the generated field "content" to a custom field via parameter "fmap.content=myfield". Could solrnet add this parameter in the near future?

Hi how can I see if a version of SolrNet is compatible with a Solr version?
Hello,

I have started using solr.net core 1.0.15 version in my .net core application.
I am having difficulty getting the grouping functionality to work.

I have 5 items in my SOLR instance
Sample code:
```
this.solrGroupinApi = 
ServiceLocator.Current.GetInstance<ISolrOperations<ProjectItem>>();

//works like a charm, gets the 5 items
 var results = this.solrApi.Query("*:*");

//only returns the first item, result seems to be a simple list
 var response2 = this.solrGroupinApi.Query("*:*", new QueryOptions
            {
                Grouping = new GroupingParameters
                {
                    Fields = ["ProjectCode"], //this is a valid field
                    Format = GroupingFormat.Grouped,
                    Limit = 100,
                    Ngroups = true,
                    Main = true,
                }
            });
```

//I have played around with the grouping options but nothing seems to work.
What am I doing wrong ?