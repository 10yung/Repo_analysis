Follow up of #3597

**I'm submitting a ...**  (check one with "x")
```
[X] bug report => see 'Providing a Reproducible Scenario'
[] feature request => do not use Github for feature requests, see 'Customers of ag-Grid'
[] support request => see 'Requesting Community Support'
```

Versions : 
```json
    "ag-grid-angular": "22.1.1",
    "ag-grid-community": "22.1.1",
    "ag-grid-enterprise": "22.1.1",
    "@angular/common": "8.2.14",
    "@angular/core": "8.2.14",
    "@angular/compiler": "8.2.14",
```

Rhe following warnings are displayed when building the app :
```
DEPRECATION WARNING: As of Dart Sass 2.0.0, !global assignments won't be able to
declare new variables. Consider adding `$ag-secondary-font-weight: null` at the root of the
stylesheet.

    ╷
211 │     $ag-secondary-font-weight: $secondary-font-weight !global;
    │     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ╵
    node_modules/@ag-grid-community/all-modules/dist/styles/ag-theme-base/vars/_ag-theme-base-import-legacy-vars.scss 211:5        @import
    node_modules/@ag-grid-community/all-modules/dist/styles/ag-theme-material/vars/_ag-theme-material-import-legacy-vars.scss 3:9  @import
    node_modules/@ag-grid-community/all-modules/dist/styles/ag-theme-material/vars/_ag-theme-material-vars.scss 1:9                @import
    node_modules/@ag-grid-community/all-modules/dist/styles/ag-theme-material/sass/ag-theme-material.scss 1:9                      @import
```

The problems are in the theme files where all global variable declarations must be declared before-hand
https://github.com/ag-grid/ag-grid/blob/master/dist/styles/ag-theme-base/vars/_ag-theme-base-import-legacy-vars.scss

Relevant changelog https://github.com/sass/dart-sass/blob/master/CHANGELOG.md#1172

**there is not need a for a reproducible scenario, the syntax problem is clear and identified**

Thank you 

<!--
IF YOU DON'T FILL OUT THE FOLLOWING INFORMATION WE MIGHT CLOSE YOUR ISSUE WITHOUT INVESTIGATING
-->

**I'm submitting a ...**  (check one with "x")
```
[x] bug report => see 'Providing a Reproducible Scenario'
[] feature request => do not use Github for feature requests, see 'Customers of ag-Grid'
[] support request => see 'Requesting Community Support'
```

**Current behavior**
1. Re-define `numericColumn` in gridOptions.columnTypes, for example
```
numericColumn: {
  headerClass: "my-numeric-header",
  cellClass: "my-numeric-cell"
  filter: 'agNumberColumnFilter',
  enablePivot: false
}
```
2. Use the type in one of the ColDef
3. The re-defined numericColumn was overwritten by the default one, i.e. 
```
   numericColumn: {
        headerClass: "ag-numeric-header",
        cellClass: "ag-numeric-cell"
    }
```

**Expected behavior**
User defined default type (`numericColumn`, etc.) overwrites the original default type.

On the line:
https://github.com/ag-grid/ag-grid/blob/996ffcdcb828ffa3448d57fa919feb9eb465df15/community-modules/core/src/ts/columnController/columnFactory.ts#L343

lodash merges the object from right to left, that essentially makes DefaultColumnTypes overwrite the user defined types regardless (shallow copy)

Suggest change:
```
 const allColumnTypes = _.assign({}, DefaultColumnTypes, this.gridOptionsWrapper.getColumnTypes()); 

```

**Please tell us about your environment:**
OS: Windows
IDE: VS Code
Package Manager: NPM
Angular: 8.1.2
TS Config:
```
{
  "compileOnSave": false,
  "compilerOptions": {
    "baseUrl": "./",
    "outDir": "./dist/out-tsc",
    "sourceMap": true,
    "declaration": false,
    "downlevelIteration": true,
    "experimentalDecorators": true,
    "module": "esnext",
    "moduleResolution": "node",
    "importHelpers": true,
    "target": "es2015",
    "typeRoots": [
      "node_modules/@types"
    ],
    "lib": [
      "es2018",
      "dom"
    ]
  },
  "angularCompilerOptions": {
    "fullTemplateTypeCheck": true,
    "strictInjectionParameters": true
  }
}
```

* **ag-Grid version:** 21.2.2

* **Browser:**
Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/73.0.3683.75 Safari/537.36


* **Language:** 
Typescript 3.4.3


**I'm submitting a ...**  (check one with "x")
```
[x] bug report => see 'Providing a Reproducible Scenario'
[] feature request => do not use Github for feature requests, see 'Customers of ag-Grid'
[] support request => see 'Requesting Community Support'
```

Here is an example of source code from original documentation under "Accessing Cell Renderer Instances".

> // example - get cell renderer for first row and column 'gold'
var firstRowNode = gridOptions.api.getDisplayedRowAtIndex(0);
var params = { columns: ['gold'], rowNodes: [firstRowNode]};
var instances = gridOptions.api.getCellRendererInstances(params);
if (instances.length > 0) {
    // got it, user must be scrolled so that it exists
    var wrapperInstance = instances[0];
    var frameworkInstance = wrapperInstance.getFrameworkComponentInstance();
}

According to types definition ```instances``` is the array of ```ICellRendererComp```, so method ```getFrameworkComponentInstance``` is not defined on array elements. In consequences the compilation of angular application is not possible. Under the hood ```frameworkInstance``` is a wrapper instance, which has this method.

This is the question and "dirty" workaround.
https://stackoverflow.com/questions/59721659/property-getframeworkcomponentinstance-does-not-exist-on-type-icellrendererco
**I'm submitting a ...**
```
[X] bug report => see 'Providing a Reproducible Scenario'
[] feature request => do not use Github for feature requests, see 'Customers of ag-Grid'
[] support request => see 'Requesting Community Support'
```

**Providing a Reproducible Scenario**

Plunker : https://plnkr.co/edit/rIlMSK2uXJhA7SGTjYXw?p=preview

![icon_bug](https://user-images.githubusercontent.com/9250759/72475872-d594d600-37b9-11ea-8fd6-218dc64226e7.png)


**Current behavior**

If one of the column is hidden at first, then the master checkbox (left of the search bar in the column panel) doesn't work. It is only activated when the checkbox associated with the hidden column is checked.


**Expected behavior**

When a column is hidden and its checkbox unchecked, clicking on the master checkbox should check all checkboxes the first time and then uncheck them all the second time.

**Please tell us about your environment:**

AG Grid 22.1.2
Chrome 79
Windows 10
Angular 8
TypeScript 3.5.3


I'm submitting a ...
```
[X] support request => see 'Requesting Community Support'
```

**Customers of ag-Grid**

Man I've beaten my head against this for hours now and I just cannot get it to work.

How do I use the chrome date picker for cells?

You have an example here: https://next.plnkr.co/edit/QTyKicFzmHmpYCms for how to use Jquery

There are references to using `browserDatePicker=true`  yet I believe that is just for filtering.

There is a similar question here but it is also un answered: https://stackoverflow.com/questions/51763354/datepicker-in-ag-grid-not-working





[X] support request => see 'Requesting Community Support'

Is there a way to turn on filtering when exporting data from ag-grid to Excel?
So when the user opens the exported Excel file, the filter option is on and the user can filters columns on Excel?
I tried floatingFilter so far.

* **ag-Grid version:** X.X.X
"ag-grid-enterprise": "21.2.2"

* **Browser:**
Chrome

* **Language:** 
Angular


**I'm submitting a ...**  (check one with "x")
```
[x] bug report => see 'Providing a Reproducible Scenario'
[] feature request => do not use Github for feature requests, see 'Customers of ag-Grid'
[] support request => see 'Requesting Community Support'
```

Sidebar is not keyboard accessible. 
The vertical tabs are selectable by keyboard, but offer no UI indication that they are focused when tabbing. 

**Current behaviour (& Reproducible Scenario)**
_Using ag-Grid demo (https://www.ag-grid.com/example.php)_
- Mouse select 'Columns' in the sidebar
- Press `tab` and `return/enter`
- See that the 'Filters' sidebar is now selected/open, but no focus state was given to the vertical tab

**Expected behavior**
UI focus state on tab-able buttons/tabs

**Please tell us about your environment:**
N/A

* **ag-Grid version:** X.X.X
Using version 22.0.0

* **Browser:**
ag-Grid demo tested using Chrome & Firefox

* **Language:**
TypeScript
<!--
IF YOU DON'T FILL OUT THE FOLLOWING INFORMATION WE MIGHT CLOSE YOUR ISSUE WITHOUT INVESTIGATING
-->

**I'm submitting a ...**  (check one with "x")
```
[x] bug report => see 'Providing a Reproducible Scenario'
[] feature request => do not use Github for feature requests, see 'Customers of ag-Grid'
[] support request => see 'Requesting Community Support'
```

**Requesting Community Support**

**Providing a Reproducible Scenario**
Here is a link to the Plunker:

https://plnkr.co/edit/L37IqTqlOUlbjKXouicy?p=preview

**Current behavior**
The bug is for Date filtering, and for when `rowModelType: "serverSide"`. When I click "dd" in "Date", and going from left to right, type in 01, then 01, then say "2", the date automatically switches to 1902. If I continue and type in "0" it switches the entire filter to `dd/mm/yy` and it does not filter the rows.

Interestingly, if I were to go backwards, by typing the year, month, then day, the date does not automatically change, although it appears the filters are not working. Also, changing it to "clientSide",  or"infinite", has the Date filter work normally,, but since I'm using a "serverSide" application, I require "serverSide" as my rowModelType.

**Expected behavior**
The expected behaviour would be when filtering by date, going from dd, mm, yy, that once I enter the year, it does not automatically change, or reset, and that the rows will be filtered.

**Please tell us about your environment:**
I'm using Windows 10, Visual Code Studio, and Visual Code Studio 2019 as the IDEs. The packages I am using are provided in the Plunker.

* **ag-Grid version:** 21.2.2

* **Browser:**
Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/79.0.3945.88 Safari/537.36

* **Language:** ES6


<!--
IF YOU DON'T FILL OUT THE FOLLOWING INFORMATION WE MIGHT CLOSE YOUR ISSUE WITHOUT INVESTIGATING
-->

**I'm submitting a ...**  (check one with "x")
```
[x] bug report => see 'Providing a Reproducible Scenario'
[] feature request => do not use Github for feature requests, see 'Customers of ag-Grid'
[] support request => see 'Requesting Community Support'
```

**Reproducible scenario**:

https://stackblitz.com/edit/ag-grid-vue-columnorder

**Current behavior**
<!-- Describe how the bug manifests. -->
When updating a column definition in a live grid, that column moves to the right end of the table
**Expected behavior**
<!-- Describe what the behavior would be without the bug. If possible back this up with our docs/examples if possible-->
Columns remain in the order specified by columnDefs after update
**Please tell us about your environment:**
<!-- Operating system, IDE, package manager, HTTP server, ... -->
StackBlitz 
* **ag-Grid version:** 22.0.0
<!-- Check whether this is still an issue in the most recent ag-Grid version -->

* **Browser:** multiple
<!-- Run `navigator.userAgent` in console of all of the browsers where this could be reproduced -->

* **Language:** ES6/7, ES5

I reviewed similar issue #2874 which was closed with a comment that it would be resolved in v20.1


**I'm submitting a ...**  (check one with "x")
```
[x] bug report => see 'Providing a Reproducible Scenario'
[] feature request => do not use Github for feature requests, see 'Customers of ag-Grid'
[] support request => see 'Requesting Community Support'
```

**Providing a Reproducible Scenario**
https://plnkr.co/edit/zUe18KPX899hEJA2TQ7g?p=preview

**Current behavior**
Clicking on any row in Firefox 71 causes a exception to be thrown:
```
uncaught exception: undefined
````

**Expected behavior**
Clicking on any row should write the following into the clipboard:
```
Congrats your clipboard has text :D
```

**Please tell us about your environment:**
* OS: MacOS Mojave
* Version: 10.14.6
* **ag-Grid version:** latest


**Additional information**
In **Chrome** the exception usually corresponds to:
```
Uncaught (in promise) DOMException: Document is not focused.
```
But that might be a red herring.

