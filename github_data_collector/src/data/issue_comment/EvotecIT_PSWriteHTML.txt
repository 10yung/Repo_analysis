The module uses an ordered hash (```$RGBColors```) to store colors' name/value pairs.  This is, properly, script/module scoped.  At times, it is useful to access the list of colors from a script in order to populate the ```-color``` parameters of functions like ```New-ChartLegend``` (e.g. pull 10 random colors to populate a legend).
This can be achieved by either adding the```$RGBColors``` variable to the ```Export-ModuleMember``` OR creating a purposeful public function to export the hash.  The latter has the added advantage of avoiding potential variable collisions.  How should we proceed?
Currently, ApexCharts are locked to older version but with new Apex 3.13.1 polyfills are removed:

## Using it with IE11

If you need to make it work with IE11, you need to include these polyfills before including ApexCharts

- [promise-polyfill](https://github.com/taylorhakes/promise-polyfill)
- [classlist.js](https://github.com/eligrey/classList.js/)
- [blob.js](https://github.com/eligrey/Blob.js)

This needs to be tested/incorporated. 

DataTables, when Tabs or Collapsed Sections are used, require refresh when switching tabs or expanding collapsed section to make sure they are displayed properly. 

Unfortunately, my poor JavaScript skills provided a fix in two places to resolve that but the fix is so performance-intensive that it's driving me crazy. It's because every time section is expanded or tab is switched each and every table in HTML is recalculated when the only subset of tables should be. 

https://github.com/EvotecIT/PSWriteHTML/blob/d2c3d163b1686594770e368d7a1bea48980ef306/Resources/JS/HideSection.js#L5-L9


https://github.com/EvotecIT/PSWriteHTML/blob/d2c3d163b1686594770e368d7a1bea48980ef306/Resources/JS/tabbisAdditional.js#L13-L17

Need to find another way to do it:
1. On JS level find out how to do it properly
2. Use PowerShell and put those recalcs in proper places only targetting particular data tables. 
3. Wait for DataTables to fix it.
When using the 'like' and 'contains' operators in ___New-HTMLTableContition___ and viewing the output in ___IE11___, the unsupported (IE11) 'includes' JS method breaks DataTables.  

Simple fix below.


LIne 3529 of PSWriteHTML.psm1
```posh                    
switch ($Condition.Operator) {
    "contains" {
        # "if (data[$($ConditionHeaderNr)].includes('$($Condition.Value)')) {"
        "if (data[$($ConditionHeaderNr)].indexOf('$($Condition.Value)') >= 0 ) {"
    }
    "like" {
        # "if (data[$($ConditionHeaderNr)].includes('$($Condition.Value)')) {"
        "if (data[$($ConditionHeaderNr)].indexOf('$($Condition.Value)') >= 0 ) {"
    }
    default {
        "if (data[$ConditionHeaderNr] $($Condition.Operator) '$($Condition.Value)') {"
    }
}
```
This could be further simpified by using the '___-Regex___' parameter for the switch statement.
```posh
switch -Regex ($Condition.Operator) {
    "contains|like" {
        "if (data[$($ConditionHeaderNr)].indexOf('$($Condition.Value)') >= 0 ) {"
    }
    default {
        "if (data[$ConditionHeaderNr] $($Condition.Operator) '$($Condition.Value)') {"
    }
}
```
Something that I would like to have ability to create with PSWriteHTML

![image](https://user-images.githubusercontent.com/15063294/71275093-9c04b280-2354-11ea-88cf-b6b0209f7bff.png)




Some possible solutions:
- https://dev.to/blacksonic/add-dark-mode-to-your-site-with-this-short-css-trick-1g7b


1. I would like to have automatic dark mode switch available 
2. I would like to have manual switch available 

This looks easy, but there's a lot of things to make sure things run as required. Tables/Diagrams/etc. 

Not easy, unless I miss something obvious. 
When creating a dashboard using the -AutoRefresh option, Internet Explorer always reverts back to the first tab, while Chrome will stay on whichever tab you're already looking at.

This may be a limitation of IE, but it would be great if we can get it to match the behavior of Chrome.