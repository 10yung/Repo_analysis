will it compile and write my name?

```
class Being<T>(val name: T? = null) {

    fun greet(being: Matter) {
        (being as this.Human).sayHello(name)
    }

    inner class Human: Matter() {
        fun sayHello(name: T?) {
            print("hello $name")
        }
    }

    open class Matter
}

fun main() {
    val human = Being("shalva97")
    human.greet(Being.Matter())
}
```
Stumbled upon this puzzler while working on AdventOfCode.
What will be:
```kotlin
    println(17.0 / 5 / 2 / 2)
    println(17 / 5.0 / 2 / 2)
    println(17 / 5 / 2.0 / 2)
    println(17 / 5 / 2 / 2.0)
```
FYI I created this repo https://github.com/dkandalov/kotlin-puzzlers which includes some of the puzzlers from this repo and some new puzzlers. In particular these two might be interesting:
 - https://github.com/dkandalov/kotlin-puzzlers/blob/master/puzzlers/11-exhaustive-when.kt
    where `when` needs to be an expression in order to be exhaustive, e.g.:
``` kotlin
        fun printClassOf(x: X) = when (x) {
            is X.A -> println("is A")
            is X.B -> println("is B")
        }.exhaustive

        val Unit.exhaustive get() = this
```
 - https://github.com/dkandalov/kotlin-puzzlers/blob/master/puzzlers/13-exhaustive-enum.kts
   where `Color.from` is extension method on instances of enum, not on the enum class. For this to work enum needs companion object and semicolon:
``` kotlin
    enum class Color {
        Red, Green, Blue;
        companion object
    }

    fun Color.Companion.from(s: String) = when (s) {
        "#FF0000" -> Red
        "#00FF00" -> Green
        else -> null
    }
```
Multiple test files are necessary since not all variants compile. The intended use is to show the options, ask what options will at all compile, then check files `option-*.kts` one by one.

One option would be to have a test framework like JUnit to run those files and report the results simultaneously. 