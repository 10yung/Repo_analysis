llamadb is broken in the current rust nightly 1.15.0 release. 

The first change is using the `Cow::` smart pointer constructor instead of `into_cow`, since [it has been depreciated](https://github.com/rust-lang/rust/issues/27735). The other change is to the `time::Duration` module, where [span was depreciated](https://github.com/rust-lang/rust/issues/27799). The idiomatic way to time a function is to use `Instant::now()` with the corresponding `elapsed()` function.
This is a rather frustrating bug/limitation for those of us who like to copy and paste multi-lined text into the CLI. If a multi-line string is pasted, only the first line will be inputted.

`rust-linenoise` is used to drive the CLI input. Enabling multi-line mode with `linenoise::set_multiline(1);` doesn't seem to have any effect on my machine (64-bit Linux, using gnome-terminal).

I don't feel that LlamaDB is at a point where it can serve as a standalone library yet. The library crate is currently a bunch of hacks that expose internals such as parser modules.

This issue needs to wait on #4 so that developers have a somewhat reasonable API to work with, as well as a file-based DB. tempdb won't be around for long!

Until then, the `llamadb` crate has been reserved on crates.io.

---

Nice-to-haves for the library:
- A `sql!()` macro that statically validates and compiles the SQL query (to an extent).
  - This may be hard to do without schema information.
  - At least have it validate the syntax, possibly compile into AST?
- A C API, for use by other programming languages.

Columns should only be able to be omitted from `INSERT` if the column:
- is auto-incrementing, or
- has the `DEFAULT` constraint, with a provided default value

``` sql
SELECT avg(milliseconds) FROM track;
```

currently compiles into:

``` lisp
(temp-group-by :source_id 1
  (scan `track` :source_id 0
    (yield
      (column-field :source_id 0 :column_offset 0)
      (column-field :source_id 0 :column_offset 1)
      (column-field :source_id 0 :column_offset 2)
      (column-field :source_id 0 :column_offset 3)
      (column-field :source_id 0 :column_offset 4)
      (column-field :source_id 0 :column_offset 5)
      (column-field :source_id 0 :column_offset 6)
      (column-field :source_id 0 :column_offset 7)
      (column-field :source_id 0 :column_offset 8)))
  (group-by-values)
  (yield
    (avg :source_id 1 
      (column-field :source_id 1 :column_offset 6))))
```

---

The `temp-group-by` creates a redundant temporary group, when simply using the table's group could suffice. This could be done with a new `scan-group` function or similar.

``` lisp
(scan-group `track` :source_id 0
  (yield
    (avg :source_id 0
      (column-field :source_id 0 :column_offset 6))))
```

- [x] Numbers
- [x] Strings
- [x] `NULL`
- [ ] Byte arrays
- [x] Subqueries
- [x] Aggregate function calls
- [ ] Scalar function calls
- [x] Binary comparison: `=`, `<>`, `<`, `<=`, `>`, `>=`
- [x] Binary arithmetic: `+`, `-`, `*`, `/`
- [x] Unary `-`
- [x] `AND`
- [x] `OR`
- [ ] `NOT`
- [x] `||`
- [ ] `EXISTS`
- [ ] `BETWEEN` ... `AND`
- [ ] `IN`
- [ ] `CASE`
- [ ] `IS NULL`
- [ ] `IS NOT NULL`
- [ ] `LIKE`

To guarantee that SQL queries actually do as they're told, a very thorough test suite needs to be added.

Sqllogictest may be worth looking into: https://www.sqlite.org/sqllogictest/doc/trunk/about.wiki

These are in place until their features are complete.


- [x] **`STRING`**
  - A variable-length UTF-8 string.
  - Alias: `VARCHAR`
- [x] **`Ux`**, where x is >= 8 and <= 64, and is a multiple 8.
  - An unsigned integer.
- [x] **`Ix`**, where x is >= 8 and <= 64, and is a multiple 8.
  - An signed integer.
  - Alias for `I32`: `INT` or `INTEGER`
- [x] **`F64`**
  - A double-precision (64-bit) floating point number.
  - Alias: `DOUBLE`
- [x] **`byte[]`**
  - A variable-length byte array.
- [x] **`byte[N]`**
  - A fixed-length byte array.
- [ ] **`UUID`**
  - A [universally unique identifier](https://en.wikipedia.org/wiki/Universally_unique_identifier).
- [ ] **`JSON`**
  - A [JSON](https://en.wikipedia.org/wiki/JSON) document, encoded using MessagePack.
- [ ] **`BCRYPT`**
- [ ] **`SCRYPT`**
- [ ] **`PBKDF2`**
