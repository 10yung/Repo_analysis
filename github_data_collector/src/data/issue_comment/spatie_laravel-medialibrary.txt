when i try to define image height it not work only width is set 
this is my model code's
`public function registerMediaConversions(Media $media = null)
    {
        $this->addMediaConversion('events_thumb')
            ->width(257)
            ->height(579);
    }`
when i retrive converter image he height is 170 
Any recommended approach to manually get the appropriates placeholder value for a given conversion? I'm using Laravel solely as an API and React in the frontend. 

So far I've come up with the following "hack", but do not believe in any way that this is a proper solution (this is in my base Media model)

```
    /**
     * Extract Placeholder from Srcset
     *
     * @param $conversion
     * @return array|int
     */
    public function getPlaceholder($conversion)
    {
        preg_match('(data:image\/[^;]+;base64[^"]+)', $this->getSrcset($conversion), $match);

        $placeholder = explode(' ', array_shift($match));

        return array_shift($placeholder);
    }
```

The function above returns the base64 placeholder.

I know we can use $item->media to get all media for a selected item, but I prefer the same output as getMedia(). As it turns out, you can run `getMedia('')` and pass an empty `$collectionName` as argument. This will load all media with `loadMedia()` and supports empty strings.

https://github.com/spatie/laravel-medialibrary/blob/9fa2989f826da065d098f6f865cc7ad755c35d33/src/HasMedia/HasMediaTrait.php#L505-#L521

This seems to be expected / intended behaviour. I didn't expect this to be honest. I know it's hard to predict the future but can I expect this to stay like this or did I wake a sleeping dog?

Thanks for all the hard work by the way. It's very much appreciated!
I couldn't see this in docs, is it possible?
When i just try to get the path of a conversion:

```php
$item = Media::find(39);
$item->getPath("460");
```

I get the following error:

```
PHP Error:  Maximum function nesting level of '256' reached, aborting! in ... vendor/laravel/framework/src/Illuminate/Container/Container.php on line 768
```

I am on version `7.18.0` now and my conversions are defined like this:

```php
public function registerMediaConversions(SpatieMedia $media = null) {
    foreach([460, 380, 300] AS $width) {
        $this->addMediaConversion($width)->width($width);
    }
}
```
### Add authentication to retreive files from webdav

I'm trying to have an protected WebDav storage (stackstorage.com) to be accessable. You can access objects via an URL like: `https://rallypodium.stackstorage.com/remote.php/webdav/staging/1/mountain-1244132_960_720.jpg`, however, you need HTTP authentication.

My question is, how can I retrieve the files with a HTTP basic auth?

I currently have a class `WebdavUrlGenerator`, which should generate those URL's, but I have no clue on where to set the header for the request?

|    Q        |   A
|------------ | ------
| Version     | ^7.0.0

When using the `addMediaFromDisk()` method it looks like the system makes a direct copy of the file. For files hosted on a remote provider this means that the file needs to be downloaded to the server, then re-uploaded. I'd like to propose that we utilize the copy command instead if available. 

For example, changing this:
https://github.com/spatie/laravel-medialibrary/blob/1a882349f216855a37583dff81ff44bd1ec4ea63/src/Filesystem/Filesystem.php#L47-L66

To something like this:
```php
    public function copyToMediaLibraryFromRemote(RemoteFile $file, Media $media, ?string $type = null, ?string $targetFileName = null)
    {
        $storage = Storage::disk($file->getDisk());

        $destinationFileName = $targetFileName ?: $file->getFilename();

        $destination = $this->getMediaDirectory($media, $type).$destinationFileName;

        $this->filesystem->disk($media->disk)
            ->getDriver()->copy(
                $file->getKey(),
                $destination
            );
    }
```

I've tested the above with S3 and it seems to work. Although I haven't texted with any other drivers. Any thoughts?
I need to migrate all files that were stored (previously with medialibrary) on s3 disk to the public disk. 

I'm looking for a way to copy the files, in that way if something goes wrong, nothing is affected on Prod environment.

I've searched on the docs for an example to copy from one disk to another, but I couldn't find one.

Any help would be appreciated.
In the `Spatie\MediaLibrary\Models\Media` class there is the following function:

```
public function getPath(string $conversionName = ''): string
{
    $urlGenerator = UrlGeneratorFactory::createForMedia($this, $conversionName);

    return $urlGenerator->getPath();
}
```

The `UrlGeneratorFactory::createForMedia` returns a type of the `UrlGenerator` interface, which does not contain the `getPath()` function.

We had written our own `UrlGenerator` according to the docs, but when it went live we were seeing errors with the `PerformConversions` due to this unexpected method call which we hadn't implemented.
Per documentation at https://docs.spatie.be/laravel-medialibrary/v7/converting-other-file-types/creating-a-custom-image-generator/ , you should be able to add a getImageGenerators method in your model in order to use a custom generator specific to that model.

Unfortunately, it appears that this method will never get called as the getImageGenerators() method is called on the Spatie Media model and it gets the generators from the config file and never attempts to fetch from the model.   You'd have to do this with a custom Media model instead of just using the Spatie Media model with custom generators defined our own models as the documentation describes.

Let me know if a PR would warrant allowing this.  This would modify the HasMedia and HasMediaTraits to include a blank getImageGenerators method that by default returns an empty collection.  Then the Spatie media model can call this method from the model instance and if it's not empty, use the generators returned; otherwise default to getting the generator list from configuration.  This will allow the process in documentation to work and existing behavior to still function.  I'd be happy to create one if you feel comfortable with the approach described.

