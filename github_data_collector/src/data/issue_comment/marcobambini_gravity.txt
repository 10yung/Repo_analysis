DEBUG_STACK() only supports stack print. It's much better if we can stop at any line of code and investigate.
Just want to say I've had a lot of fun with gravity ðŸ˜„

I created an issue #280 about adding http support. I'm still unsure if this is wanted at this point in the project. With feedback, I'd be happy to refactor this janky pr a bit and implement the rest for an mvp. Or you can tell me my code sucks and to go home.

I've been testing using a basic flask server and the following gravity script:
```
func main() {
    var get_tests = [
        [
            "host": "https://reddit.com"
        ],
        [
            "host": "https://api.github.com",
            "path": "/users/jamesalbert"
        ],
        [
            "host": "https://httpbin.org",
            "path": "/get"
        ]
    ]

    get_tests.loop(func (request) {
        var resp = Http.get(request)
        System.print("=== " + resp.Hostname)
        System.print(resp)
    })

    var post_tests = [
        [
            "host": "https://httpbin.org/post",
            "path": "/post",
            "data": [
                "pet": "cat"
            ]
        ]
    ]

    post_tests.loop(func (request) {
        var resp = Http.post(request)
        System.print("=== " + resp.Hostname)
        System.print(resp)
    })
}
```
I'm not sure if http support is better implemented built-in or through a library, but it's a generally useful feature.

I took a stab at handling get requests (super ugly, just got an mvp going)

https://github.com/jamesalbert/gravity/commit/2695e5b24bd663e0957598c21472006d19ab737f

Are there already plans to implement something like this? If not, with some feedback, is this something that can be added to the project?
Hello there. I was writing some examples to test and document the access modifiers and I found that the code below works:
```
class TestAccessModifiers{
    public var my_var = "I'm public!";
    private var my_hidden_var = "I'm private!";
    public func get_hidden(){
        return my_hidden_var;
    }
    private func get_public(){
        return my_var;
    }
}
func puts(str){
    System.print(str);
}
func main(){
    var test = TestAccessModifiers();
    test.my_var;
    //puts("Public var holds = " + test.my_var );//works
    //puts("Get hidden var from public method = " + test.get_hidden());//works
    //puts("Private var holds = " + test.my_hidden_var );//works and cause error like it should
    puts("Get public var from private method = " + test.get_public());//doesn't works 

}
```
As result, from the terminal, I get : 
``` Get public var from private method = I'm public! ```
I donno, but I guessing that the keyword private before the keyword func should print the same, or almost the same value, as in  "puts("Private var holds = " + test.my_hidden_var );", which is :: RUNTIME ERROR: Unable to find my_hidden_var into class TestAccessModifiers

Thanks!
Hello!

What do you think to add command line arguments to the interpreter?

```gravity
./gravity myfile.gravity arg1 arg2 arg3
```
And perhaps a class or variable for read it.
Gravity could be a great candidate for WebAssembly to share code between web and mobile applications.
With your permission, I'd like to package this for Homebrew. The current WIP is below, any help you can provide is appreciated. Unfortunatly, I'm not familiar enough with C to know specifics re the install procedures or how this should be tested.

    class Gravity < Formula
      desc "The Gravity Programming Language"
      homepage "http://gravity-lang.org"
      url "https://github.com/marcobambini/gravity/archive/0.5.0.tar.gz"
      sha256 "ac05e5d154eac5c8159f4142b667b32021b4e4b7869ff993cf5eb7258fbfe85c"
      depends_on "cmake" => :build
    
      def install
        system "make", "install"
      end
    
      test do
    
        system "false"
      end
    end

Hello there. To begin this features requests stepping with my right feet, piedi!, I would like to say I'm very enthused, entusiasmato!, with your language. So congratulations and thank You for sharing your work.

Now, down to business: 
1) Finish writing the documentation, and enhance how to work with **c bindings**, publishing  examples, samples and tutorials. (I really want to create modules for gravity and to do that it would be nice to have a better binding mechanism fully documented)
2) I would like to know if you can think about a package manager to the language, and name it! It would be very nice to have this feature even if the language is new,  in order to allow the growth of the project and to allow us to interact more with gravity. This feature could work integrated with git repositories.
3) Organize the website and add in example the roadmap, blog, and more navbar links on the index page to find easily more about the language, eliminating the need to visit github's issues
4) Express what at the current moment is needed in terms of help to make the lang grow. 

Tutti Ã© bene! i grazie!
Python has a module named _ctypes.
the module relays on library named libffi, I was trying to implement the same feature for gravity.

this is an example how to use the library:
    https://linux.die.net/man/3/ffi_call
and this is the github page of the library:
    https://github.com/libffi/libffi
and this is how python uses the library to make native calls to c/c++ methods :
    https://github.com/python/cpython/tree/master/Modules/_ctypes

so if it should be planned to implement similar feature these resources can help.
By 'built-in' I mean that argument names for all functions should be simply generated from their definitions, for example: `func f(x, y, z) {.....}` would allow positional arguments call `f(10, 20, 30)`, named `f(y = 20, z = 30, x = 10)` and mixed `f(x = 10, 20, 30)`. Here every name defines exact position of the named argument to mix it with positional arguments. In mixed case the positional arguments should be counted from the position number of  named argument before it. If a name of used named argument does not exist then Gravity should rise an error.