The following test crashes NUnit:

```csharp
    [Test]
    public void Test1()
    {
      Received.InOrder(async () =>
      {
        throw new Exception();
      });
    }
```

If I remove the `async` keyword, then the exception is correctly propagated to the test.

Exception stack trace:

```
Unhandled exception. System.Exception: Exception of type 'System.Exception' was thrown.
   at NUnitTestProject1.Tests.<>c.<<Test1>b__0_0>d.MoveNext() in ...\ConsoleApp1\NUnitTestProject1\UnitTest1.cs:line 15
--- End of stack trace from previous location where exception was thrown ---
   at System.Threading.Tasks.Task.<>c.<ThrowAsync>b__139_1(Object state)
   at System.Threading.QueueUserWorkItemCallback.<>c.<.cctor>b__6_0(QueueUserWorkItemCallback quwi)
   at System.Threading.ExecutionContext.RunForThreadPoolUnsafe[TState](ExecutionContext executionContext, Action`1 callback, TState& state)
   at System.Threading.QueueUserWorkItemCallback.Execute()
   at System.Threading.ThreadPoolWorkQueue.Dispatch()
   at System.Threading._ThreadPoolWaitCallback.PerformWaitCallback()
```

Project dependencies:

```
<PackageReference Include="NSubstitute" Version="4.2.1" />
    <PackageReference Include="nunit" Version="3.12.0" />
    <PackageReference Include="NUnit3TestAdapter" Version="3.16.0">
      <PrivateAssets>all</PrivateAssets>
      <IncludeAssets>runtime; build; native; contentfiles; analyzers; buildtransitive</IncludeAssets>
    </PackageReference>
    <PackageReference Include="Microsoft.NET.Test.Sdk" Version="16.4.0" />
```


From https://github.com/nsubstitute/NSubstitute/issues/222#issuecomment-557198534, saying `protected virtual` is substitutable is misleading. While technically possible (hacky) with the current API, it's not something we encourage and people should not expect to mock these members with NSubstitute.

> By overridable we mean public virtual, protected virtual, protected internal virtual, or internal virtual with InternalsVisibleTo attribute applied.
I have this test class:

    using NSubstitute;
    using NUnit.Framework;
    using System;
    using System.Linq.Expressions;
    
    namespace MyTests
    {    
        public class Tests
        {
            [Test]
            public void Test()
            {
                var companyBL = Substitute.For<ICompanyBL>();
    
                companyBL.GetCompany(c => new { c.RegionID }).ReturnsForAnyArgs(new
                {
                    RegionID = 4,
                });
    
                var company = companyBL.GetCompany(c => new { c.RegionID });
    
                var dataRetriever = new DataRetriever(companyBL);
            }
        }
    }

and this code in another project:

    namespace MyTests
    {
        using System;
        using System.Linq.Expressions;
    
        public interface ICompanyBL
        {
            T GetCompany<T>(Expression<Func<Company, T>> selector);
        }
    
        public partial class Company
        {
            public int RegionID { get; set; }
        }
    
        public class DataRetriever
        {
            public DataRetriever(ICompanyBL companyBL)
            {
                //This is null:
                var company = companyBL.GetCompany(c => new
                {
                    c.RegionID
                });
            }
        }
    }

The `company` var is `null`.
However, when the code is all contained in the same .cs file in the same project, the value is not `null`.

Why is the value `null` when used in another file in another project?

NSubstitute version = 1.10.0.0.

.NET Framework version = 4.5.2.

StackOverflow question:
https://stackoverflow.com/questions/58945013/mocked-method-returning-null-when-called-from-a-different-project
**Mock Microsoft.Extensions.Logging in .Net core 3**
Following code is working in .Net core 2.2 but .Net Core 3

**Environments**
 - Microsoft.Extensions.Logging  Version="3.0.0"
 - NSubstitute Version="4.2.1"
 - Xunit "2.4.0"




***Domain Class***
```
public class Service
    {
        private readonly ILogger<Service> _logger;
        public Service(ILogger<Service> logger)
        {
            _logger = logger;
        }

        public void TestLogger()
        {
            _logger.LogInformation("Testing");
        }
    }
```
***Test Class***
```
public class ServiceTests
    {
        private readonly ILogger<Service> _logger;
        private readonly Service _service;
        public ServiceTests()
        {
            _logger = Substitute.For<ILogger<Service>>();
            _service = new Service(_logger);
        }

        [Fact]
        public void TestLogger_ShouldLogInformation()
        {
            // Act
            _service.TestLogger();

            // Assert
            _logger.Received().Log(LogLevel.Information, Arg.Any<EventId>(), Arg.Any<object>(),
                Arg.Any<Exception>(), Arg.Any<Func<object, Exception, string>>());
        }
    }
}
```

Not sure whether this is a bug. Any support would be appreciated.

**Describe the bug**
When there is a missing binding redirect, the mock does not throw an error when evaluating with Arg.Is(), which make it hard to debug the issue. It hides the fact that it could not load the assembly and simply return the default value when calling the method of the mock.

**To Reproduce**

c# code:
```
using DeepEqual.Syntax;
using FluentAssertions;
using NSubstitute;
using NUnit.Framework;

namespace TestProject3
{
	public class SomeModel
	{
		public int SomeProperty { get; set; }
	}

	public interface ISomeInterface
	{
		int SomeMethod(SomeModel model);
	}

	public class UnitTest
	{
		[Test]
		public void Test1()
		{
			var mock = Substitute.For<ISomeInterface>();
			var expected = new SomeModel {SomeProperty = 1};

			mock.SomeMethod(Arg.Is<SomeModel>(actual => actual.IsDeepEqual(expected, null)))
				.Returns(2);

			var result = mock.SomeMethod(new SomeModel {SomeProperty = 1});

			result.Should().Be(2);
		}

		[Test]
		public void Test2()
		{
			var expected = new SomeModel {SomeProperty = 1};

			var result = expected.IsDeepEqual(new SomeModel {SomeProperty = 1}, null);

			result.Should().BeTrue();
		}
	}
}
```

csproj file:
```
<Project Sdk="Microsoft.NET.Sdk">
    <PropertyGroup>
        <TargetFramework>net472</TargetFramework>
    </PropertyGroup>
    <ItemGroup>
        <PackageReference Include="FluentAssertions" Version="5.9.0" />
        <PackageReference Include="NSubstitute" Version="4.2.1" />
        <PackageReference Include="NSubstitute.Analyzers.CSharp" Version="1.0.11" />
        <PackageReference Include="NUnit" Version="3.12.0" />
        <PackageReference Include="DeepEqual" Version="2.0.0" />
        <PackageReference Include="Serilog.Sinks.TestCorrelator" Version="3.2.0" />
    </ItemGroup>
</Project>
```

**Expected behaviour**
It simply returns the default value when calling the method of the mock (see method Test1). I expected to get a error to help quickly identify the issue. For example, in the method Test2, the unit test fail with:
```
System.IO.FileLoadException : Could not load file or assembly 'System.Collections.Immutable, Version=1.2.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a' or one of its dependencies. The located assembly's manifest definition does not match the assembly reference. (Exception from HRESULT: 0x80131040)
```

**Environment:**
 - NSubstitute version: 4.2.1
 - NSubstitute.Analyzers version: CSharp 1.0.11
 - Platform: net472 project on Windows 10

**Additional context**
- There were 2 nuget packages using the nuget package System.Collections.Immutable, but with a different version.
    - The package DeepEqual was using version 1.3.0
    - The package Serilog.Sinks.TestCorrelator was using version 1.5.0
- The demo is simplified. In my case, the issue was coming from a project reference that as been added to another project, which make it hard to figure out what was happening.
- When you specify the property GenerateBindingRedirectsOutputType, it works again. The error was happening in a unit test project. (see also: https://stackoverflow.com/a/57985284)

csproj file:
```
<Project Sdk="Microsoft.NET.Sdk">
    <PropertyGroup>
        <TargetFramework>net472</TargetFramework>
        <GenerateBindingRedirectsOutputType>true</GenerateBindingRedirectsOutputType>
    </PropertyGroup>
    <ItemGroup>
        <PackageReference Include="FluentAssertions" Version="5.9.0" />
        <PackageReference Include="NSubstitute" Version="4.2.1" />
        <PackageReference Include="NSubstitute.Analyzers.CSharp" Version="1.0.11" />
        <PackageReference Include="NUnit" Version="3.12.0" />
        <PackageReference Include="DeepEqual" Version="2.0.0" />
        <PackageReference Include="Serilog.Sinks.TestCorrelator" Version="3.2.0" />
    </ItemGroup>
</Project>
```
**Describe the bug**
Running `Pack` gives this output: 
```
>C:\Program Files\dotnet\sdk\3.0.100\Sdks\NuGet.Build.Tasks.Pack\buildCrossTargeting\NuGet.Build.Tasks.Pack.targets(198,5): error NU5048: 
The 'PackageIconUrl'/'iconUrl' element is deprecated. Consider using the 'PackageIcon'/'icon' element instead. Learn more at https://aka.ms/deprecateIconUrl
```

**To Reproduce**
Try packing the `NSubstitute` project

**Expected behaviour**
Pack is executed without warnings/errors

**Environment:**
 - .NET Core SDK 3.0.100
- Visual Studio 2019 16.3.2

**Additional context**
See this discussion for more context/info: https://github.com/NuGet/Home/issues/8240

I think it would be helpful if the [partial subs page](https://nsubstitute.github.io/help/partial-subs/) mentioned the need to add:

    <ItemGroup>
        <AssemblyAttribute Include="System.Runtime.CompilerServices.InternalsVisibleTo">
            <_Parameter1>YOUR TEST ASSEMBLY</_Parameter1>
        </AssemblyAttribute>
        <AssemblyAttribute Include="System.Runtime.CompilerServices.InternalsVisibleTo">
            <_Parameter1>DynamicProxyGenAssembly2</_Parameter1>
        </AssemblyAttribute>
    </ItemGroup>

Usually when I'm reaching for a partial sub, I need to invoke a public method that calls a subbed internal virtual. It took me a long time to discover this assembly configuration. While writing this feature request, I actually found an [nsub page that talks about this](https://nsubstitute.github.io/help/how-nsub-works/)! Unfortunately, I never saw it while I was troubleshooting. I actually gave up on nsub for that specific test and imported moq. I mean why not both, right? 😄 Seeing moq crash gave me the insights needed to get nsub going again. I'm excited to see [progress on making nsub crash too](https://github.com/nsubstitute/NSubstitute.Analyzers/issues/66)!
**Is your feature request related to a problem? Please describe.**
A clear and concise description of what the problem is. Ex. I'm always frustrated when [...]

**Describe the solution you'd like**
A clear and concise description of what you want to happen.

**Describe alternatives you've considered**
A clear and concise description of any alternative solutions or features you've considered.

**Additional context**
Add any other context or screenshots about the feature request here.
It would be nice if we could have an overload of Received that takes in a quantity.
I need to check whether a method is called at least once.

I'm having to interrogate the ReceivedCalls and subsequently the ICall enumerable.

I'm happy to add this, but am unsure what test(s) would be wanted.
Thanks,
Sean.

**Describe the bug**
`NSubstitute.Exceptions.UnexpectedArgumentMatcherException` should be thrown for a test, however it is only thrown when the test is run in succession after another test.

**To Reproduce**
Run A() and B() by themselves, both will pass.
Run A() and B() by right clicking in the .cs file and selecting "Run all tests" -> only A() will pass.
```
using NSubstitute;
using NUnit.Framework;
using System;

namespace Tests
{
    [TestFixture]
    public class CreditorMapperTests
    {
        private IAbcContext _AbcContext;

        [SetUp]
        public void Setup()
        {
            _AbcContext = Substitute.For<IAbcContext>();
            _AbcContext.CompanyInfo.Returns(x => new CompanyInfo(Arg.Any<Guid>()));
        }

        [Test]
        public void A()
        {
            Creditor publishDocument = new Creditor();

            publishDocument.CompanyExternalId = _AbcContext.CompanyInfo.UniqueId;
        }

        [Test]
        public void B()
        {
            Creditor publishDocument = new Creditor();

            publishDocument.CompanyExternalId = _AbcContext.CompanyInfo.UniqueId;
        }
    }

    public interface IAbcContext
    {
        CompanyInfo CompanyInfo { get; }
    }

    public class CompanyInfo
    {
        public CompanyInfo(Guid uniqueId)
        {
            UniqueId = uniqueId;
        }

        public readonly Guid UniqueId;
    }

    public class Creditor
    {
        public Guid CompanyExternalId { get; set; }
    }
}
```

**Expected behaviour**
Both tests should throw the Exception, regardless of whether or not they were run individually, or as part of the "Run all tests in file".

**Environment:**
 - NSubstitute version: [4.2.1]
 - NSubstitute.Analyzers version: [CSharp 1.0.1.0]
 - Platform: [.NET Core 2.2, Windows 10]

When creating mock using Substitute.For method got exception : `Castle.DynamicProxy.ProxyGenerationException: Duplicate element: Castle.DynamicProxy.Generators.MetaMethod.`

**To Reproduce**
Create two identical interfaces with one identical method in two namespaces.
Inherit one of the interfaces and define the same method.
sample setup:
```csharp
namespace firstNamespace
{
    public interface BaseObject1
    {
        string SomeMethod { get; }
    }
}
namespace SecondNamespace
{
    public interface BaseObject1
    {
        string SomeMethod { get; }
    }
    public interface BaseFolder1 : BaseObject1
    {
        string SomeMethod { get; }
    }
}
```

Try create mock using Substitute.For method like that:
`firstNamespace.BaseObject1 mock = Substitute.For<firstNamespace.BaseObject1, SecondNamespace.BaseFolder1>();`

At first attempt please use exactly the same name for namespaces and interfaces. Even small change eg. FirstNamespace instead of firstNamespace magically fixes this issue.

**Expected behaviour**
Allow creating mock for provided scenario.

**Environment:**
 - NSubstitute version: 4.2.1.0
 - NSubstitute.Analyzers version: unable to  successfully install
 - Platform:  windows 8.1,  Visual Studio Express Edition 2015 version 14.0.25123.00 update 2, Net Framework version 4.8.03761 

**Additional context**
Sample VS project reproducing the issue is attached here:
[NSubstituteIssue.zip](https://github.com/nsubstitute/NSubstitute/files/3531049/NSubstituteIssue.zip)

Stack trace from exception:

```
  at Castle.DynamicProxy.Generators.TypeElementCollection`1.Add(TElement item)
   at Castle.DynamicProxy.Contributors.CompositeTypeContributor.CollectElementsToProxy(IProxyGenerationHook hook, MetaType model)
   at Castle.DynamicProxy.Generators.ClassProxyGenerator.GenerateType(String name, Type[] interfaces, INamingScope namingScope)
   at Castle.DynamicProxy.Generators.ClassProxyGenerator.<>c__DisplayClass1_0.<GenerateCode>b__0(String n, INamingScope s)
   at Castle.DynamicProxy.Generators.BaseProxyGenerator.<>c__DisplayClass34_0.<ObtainProxyType>b__0(CacheKey _)
   at Castle.Core.Internal.SynchronizedDictionary`2.GetOrAdd(TKey key, Func`2 valueFactory)
   at Castle.DynamicProxy.Generators.BaseProxyGenerator.ObtainProxyType(CacheKey cacheKey, Func`3 factory)
   at Castle.DynamicProxy.Generators.ClassProxyGenerator.GenerateCode(Type[] interfaces, ProxyGenerationOptions options)
   at Castle.DynamicProxy.DefaultProxyBuilder.CreateClassProxyType(Type classToProxy, Type[] additionalInterfacesToProxy, ProxyGenerationOptions options)
   at Castle.DynamicProxy.ProxyGenerator.CreateClassProxy(Type classToProxy, Type[] additionalInterfacesToProxy, ProxyGenerationOptions options, Object[] constructorArguments, IInterceptor[] interceptors)
   at NSubstitute.Proxies.CastleDynamicProxy.CastleDynamicProxyFactory.CreateProxyUsingCastleProxyGenerator(Type typeToProxy, Type[] additionalInterfaces, Object[] constructorArguments, IInterceptor[] interceptors, ProxyGenerationOptions proxyGenerationOptions)
   at NSubstitute.Proxies.CastleDynamicProxy.CastleDynamicProxyFactory.GenerateTypeProxy(ICallRouter callRouter, Type typeToProxy, Type[] additionalInterfaces, Object[] constructorArguments)
   at NSubstitute.Proxies.CastleDynamicProxy.CastleDynamicProxyFactory.GenerateProxy(ICallRouter callRouter, Type typeToProxy, Type[] additionalInterfaces, Object[] constructorArguments)
   at NSubstitute.Core.SubstituteFactory.Create(Type[] typesToProxy, Object[] constructorArguments, Boolean callBaseByDefault)
   at NSubstitute.Core.SubstituteFactory.Create(Type[] typesToProxy, Object[] constructorArguments)
   at NSubstitute.Substitute.For(Type[] typesToProxy, Object[] constructorArguments)
   at NSubstitute.Substitute.For[T1,T2](Object[] constructorArguments)
   at NSubstituteIssue.UnitTest1.TestMethod1() in C:\NSubstituteIssue\NSubstituteIssue\UnitTest1.cs:line 35
```
