Depending on if you have a `package.json` in your project you will get a prompt to install `@prisma/client` or now. Both methods behave differently:

```
C:\Users\Jan\Documents\throwaway\1363>prisma2 generate
In order to use the "prisma-client-js" generator, you need to install @prisma/client to your project.
√ Do you want to install it now? ... yes
yarn add v1.17.3
info No lockfile found.
[1/4] Resolving packages...
[2/4] Fetching packages...
[3/4] Linking dependencies...
[4/4] Building fresh packages...
success Saved lockfile.
success Saved 1 new dependency.
info Direct dependencies
└─ @prisma/client@2.0.0-alpha.571
info All dependencies
└─ @prisma/client@2.0.0-alpha.571
Done in 3.01s.
```

```
C:\Users\Jan\Documents\throwaway\1363>prisma2 generate
Error: 
    Error: In order to use the "prisma-client-js" generator, you need to install @prisma/client to your project:   
    npm install @prisma/client
        at C:/ProgramData/nvm/v12.6.0/node_modules/prisma2/build/index.js:183583:23
        at Generator.next (<anonymous>)
        at C:/ProgramData/nvm/v12.6.0/node_modules/prisma2/build/index.js:183554:71
        at new Promise (<anonymous>)
        at module.exports.9949.__awaiter (C:/ProgramData/nvm/v12.6.0/node_modules/prisma2/build/index.js:183550:12)
        at Object.prisma-client-js (C:/ProgramData/nvm/v12.6.0/node_modules/prisma2/build/index.js:183575:47)
        at Object.<anonymous> (C:/ProgramData/nvm/v12.6.0/node_modules/prisma2/build/index.js:83452:114)
        at Generator.next (<anonymous>)
        at C:/ProgramData/nvm/v12.6.0/node_modules/prisma2/build/index.js:83369:71
        at new Promise (<anonymous>)

C:\Users\Jan\Documents\throwaway\1363>npm install @prisma/client

> @prisma/client@2.0.0-alpha.538 postinstall C:\Users\Jan\Documents\throwaway\1363\node_modules\@prisma\client
> node scripts/postinstall.js

undefined
Error: In order to use "@prisma/photon", please install prisma2. You can install it with "npm add -D prisma2".
    at main (C:\Users\Jan\Documents\throwaway\1363\node_modules\@prisma\client\scripts\postinstall.js:22:9)
    at processTicksAndRejections (internal/process/task_queues.js:85:5)
npm notice created a lockfile as package-lock.json. You should commit this file.
npm WARN @prisma/client@2.0.0-alpha.538 requires a peer of prisma2@* but none is installed. You must install peer dependencies yourself.
npm WARN 1363@1.0.0 No description
npm WARN 1363@1.0.0 No repository field.

+ @prisma/client@2.0.0-alpha.538
added 1 package and audited 1 package in 2.701s
found 0 vulnerabilities


C:\Users\Jan\Documents\throwaway\1363>
```
I used `prisma2 init` to create a schema (in a new, empty folder), then edited it manually and introspected the database successfully. Then:

```
C:\Users\Jan\Documents\throwaway\initTest
λ prisma2 generate
Error:
    Error: In order to use the "prisma-client-js" generator, you need to install @prisma/client to your project:
    npm install @prisma/client
        at C:/ProgramData/nvm/v12.6.0/node_modules/prisma2/build/index.js:183583:23
        at Generator.next (<anonymous>)
        at C:/ProgramData/nvm/v12.6.0/node_modules/prisma2/build/index.js:183554:71
        at new Promise (<anonymous>)
        at module.exports.9949.__awaiter (C:/ProgramData/nvm/v12.6.0/node_modules/prisma2/build/index.js:183550:12)
        at Object.prisma-client-js (C:/ProgramData/nvm/v12.6.0/node_modules/prisma2/build/index.js:183575:47)
        at Object.<anonymous> (C:/ProgramData/nvm/v12.6.0/node_modules/prisma2/build/index.js:83452:114)
        at Generator.next (<anonymous>)
        at C:/ProgramData/nvm/v12.6.0/node_modules/prisma2/build/index.js:83369:71
        at new Promise (<anonymous>)

C:\Users\Jan\Documents\throwaway\initTest
λ npm install @prisma/client

> @prisma/client@2.0.0-alpha.538 postinstall C:\Users\Jan\Documents\throwaway\initTest\node_modules\@prisma\client
> node scripts/postinstall.js

undefined
Error: In order to use "@prisma/photon", please install prisma2. You can install it with "npm add -D prisma2".
    at main (C:\Users\Jan\Documents\throwaway\initTest\node_modules\@prisma\client\scripts\postinstall.js:22:9)
    at processTicksAndRejections (internal/process/task_queues.js:85:5)
npm WARN saveError ENOENT: no such file or directory, open 'C:\Users\Jan\Documents\throwaway\initTest\package.json'
npm notice created a lockfile as package-lock.json. You should commit this file.
npm WARN enoent ENOENT: no such file or directory, open 'C:\Users\Jan\Documents\throwaway\initTest\package.json'
npm WARN @prisma/client@2.0.0-alpha.538 requires a peer of prisma2@* but none is installed. You must install peer dependencies yourself.
npm WARN initTest No description
npm WARN initTest No repository field.
npm WARN initTest No README data
npm WARN initTest No license field.

+ @prisma/client@2.0.0-alpha.538
added 1 package and audited 1 package in 6.135s
found 0 vulnerabilities


C:\Users\Jan\Documents\throwaway\initTest
λ prisma2 -v
prisma2@2.0.0-alpha.571, binary version: 1a0db4166ffce810428c731661582371d3ab88c4
```

Note that a `package-lock.json` got created, but a `package.json` did not.
Before:

```
// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// The `datasource` block is used to specify the connection to your DB.
// Set the `provider` field to match your DB type: "postgresql", "mysql" or "sqlite".
// The `url` field must contain the connection string to your DB.
// Learn more about connection strings for your DB: https://pris.ly/connection-strings
datasource db {
  provider = "sqlite" 
  url      = "sqlite:./chinook.db"
}
// Other examples for connection strings are:
// SQLite: url = "sqlite:./dev.db"
// MySQL:  url = "mysql://johndoe:johndoe@localhost:3306/mydb"
// You can also use environment variables to specify the connection string: https://pris.ly/prisma-schema#using-environment-variables

// By adding the `generator` block, you specify that you want to generate Prisma's DB client.
// The client is generated by runnning the `prisma generate` command and will be located in `node_modules/@prisma` and can be imported in your code as:
// import { Prisma Client } from '@prisma/client'
generator client {
  provider = "prisma-client-js"
}

// Next steps:
// 1. Add your DB connection string as the `url` of the `datasource` block
// 2. Run `prisma2 introspect` to get your data model into the schema
// 3. Run `prisma2 generate` to generate Prisma Client JS
// 4. Start using Prisma Client JS in your application
```

After:

```
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "sqlite:./chinook.db"
}

model albums {
  AlbumId  Int      @id
  ArtistId artists
  Title    String
  trackses tracks[] @relation(references: [AlbumId])
}

model artists {
  ArtistId Int      @id
  Name     String?
  albumses albums[]
}

model customers {
  Address      String?
  City         String?
  Company      String?
  Country      String?
  CustomerId   Int        @id
  Email        String
  Fax          String?
  FirstName    String
  LastName     String
  Phone        String?
  PostalCode   String?
  State        String?
  SupportRepId employees?
  invoiceses   invoices[] @relation(references: [CustomerId])
}

model employees {
  Address     String?
  BirthDate   DateTime?
  City        String?
  Country     String?
  Email       String?
  EmployeeId  Int         @id
  Fax         String?
  FirstName   String
  HireDate    DateTime?
  LastName    String
  Phone       String?
  PostalCode  String?
  ReportsTo   employees?  @relation("employeesToemployees_ReportsTo")
  State       String?
  Title       String?
  customerses customers[]
  employeeses employees[] @relation("employeesToemployees_ReportsTo")
}

model genres {
  GenreId  Int      @id
  Name     String?
  trackses tracks[] @relation(references: [GenreId])
}

model invoices {
  BillingAddress    String?
  BillingCity       String?
  BillingCountry    String?
  BillingPostalCode String?
  BillingState      String?
  CustomerId        customers
  InvoiceDate       DateTime
  InvoiceId         Int             @id
  Total             Float
  invoice_itemses   invoice_items[]
}

model invoice_items {
  InvoiceId     invoices
  InvoiceLineId Int      @id
  Quantity      Int
  TrackId       tracks
  UnitPrice     Float
}

model media_types {
  MediaTypeId Int      @id
  Name        String?
  trackses    tracks[] @relation(references: [MediaTypeId])
}

model playlists {
  Name            String?
  PlaylistId      Int              @id
  playlist_tracks playlist_track[]
}

model tracks {
  AlbumId         albums?
  Bytes           Int?
  Composer        String?
  GenreId         genres?
  MediaTypeId     media_types
  Milliseconds    Int
  Name            String
  TrackId         Int              @id
  UnitPrice       Float
  invoice_itemses invoice_items[]
  playlist_tracks playlist_track[]
}

model playlist_track {
  PlaylistId playlists
  TrackId    tracks
  id         Int       @id
}
```
Current output of successful introspection:

```
C:\Users\Jan\Documents\throwaway\initTest
λ prisma2 introspect
Introspecting based on datasource defined in prisma\schema.prisma …
Done with introspection in 226ms

Moved existing prisma\schema.prisma to prisma\schema.backup.prisma
Wrote prisma\schema.prisma
```

It is unclear if this backup behavior is indeed what we want the command to do.
Introspecting SQLite:

```
CREATE TABLE "playlist_track" (
	"PlaylistId"	INTEGER NOT NULL,
	"TrackId"	INTEGER NOT NULL,
	"id"	INTEGER PRIMARY KEY AUTOINCREMENT,
	FOREIGN KEY("PlaylistId") REFERENCES "playlists"("PlaylistId") ON DELETE NO ACTION ON UPDATE NO ACTION,
	FOREIGN KEY("TrackId") REFERENCES "tracks"("TrackId") ON DELETE NO ACTION ON UPDATE NO ACTION
)
```

Creates error message:

```
 ERROR  Oops, an unexpected error occured!
Schema parsing

error: Error parsing attribute "@id": Fields that are marked as id must be required.
  -->  schema.prisma:126
   |
125 |   TrackId    tracks
126 |   id         Int?      @id
   |
```

Error message does not include name of table/model for context.
Problem we had previously:

![image](https://user-images.githubusercontent.com/183673/72615786-c0dd4d00-3935-11ea-8503-ee6ddea54491.png)

After reporting an error, the process just does not return to command line. Ctrl+C also doesn't do anything.

```
C:\Users\Jan\Documents\throwaway\initTest
λ prisma2 -v
prisma2@2.0.0-alpha.571, binary version: 1a0db4166ffce810428c731661582371d3ab88c4
```

Terminal is cmd.exe via Cmder

Right now, introspection orders all fields of a model alphabetically. Due to the special status of `@id` fields primary key, I suggest to have an extra rule for those and always put them into the model as the first first. For example:

### before

```
model Profile {
  bio  String?
  id   Int     @id
  user User
}
```

### after

```
model Profile {
  id   Int     @id
  bio  String?
  user User
}
```
![image](https://user-images.githubusercontent.com/1567498/72613621-583fa180-3930-11ea-9757-c5ae4854fa47.png)

```prisma
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = "postgresql://schickling@localhost:5432/schickling"
}

model Comment {
  author User
  id     String @id
  post   Post
  text   String @default("")
}

model Post {
  author   User
  id       String    @id
  title    String    @default("")
  comments Comment[]
}

model User {
  email    String    @default("") @unique
  id       String    @id
  name     String    @default("")
  comments Comment[]
  posts    Post[]
}
```
It's hard to tell the "useful error message with instructions" apart from the stacktrace. We should improve & streamline our CLI error formatting.

![image](https://user-images.githubusercontent.com/1567498/72613465-da7b9600-392f-11ea-908d-f1c936a86cce.png)

A tracking issue for CockroachDB

related: https://github.com/cockroachdb/appdev-issues/issues/12