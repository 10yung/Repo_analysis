*Please consider making a Pull Request if you are capable of doing so.*  
  
That's the plan, but would like some direction/suggestions first.

**What module does this apply to?**

Core.

**Description what you'd like to happen:**

Currently, withItem() requires a layoutRes id as its first argument and a ViewHolder-derived class type as its second template parameter.  View Binding classes seem to be the suggested mechanism for getting type-safe references to layout Views, which would essentially eliminate the need for ViewHolder classes (AFAIK anyway).  
  
Would a good way to approach this in recyclical be to remove the need for the first argument (layoutRes) and add an overload to withItem that takes a ViewBinding-derived class type as the second template parameter?  That second type parameter could be used to inflate the layout using ViewBinding.inflate() with the parent/activity context.  
  
Thoughts? :)

**Describe alternatives you've considered:**  
  
Not many, just using the regular ol' ViewHolder + findViewById right now.  
  
EDIT:
[View Binding](https://developer.android.com/topic/libraries/view-binding) is what I'm talking about, just to be clear.
When I scroll the list quickly, I can feel the obvious drop frame. If I slide slowly, it will not. The default Adapter does not have this problem.
Will you consider adding ViewPager2 support?

New ViewPager2 works with RecycleView.Adapter which could be provided by Recyclical library, but current implementation doesn't allow create adapter separately form target RecycleView
and _setup_ extension method can be used with RecyclerView or his subclass only and this is a very strong limitation.

Unfortunately ViewPager2  is not subclass of RecyclerView, and hasn't got public api to retrieve it.

Possible solution is create new class like RecyclicalSetup but without RecycleView dependency. Which will set up and return object of adapter.
Will you consider adding paging support? ðŸ“ƒ 
