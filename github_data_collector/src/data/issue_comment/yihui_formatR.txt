Hi Yihui,

I have code snippet as this:

```r
cc <- vapply(names(platforms),
                 function(x) list(suppressMessages(ConsensusClusterPlus::ConsensusClusterPlus(platforms[[x]][gene.sig,],
                                                                                              maxK = max.K, reps=rep.runs, pItem=pItem,
                                                                                              pFeature=pFeature, title=run.dir[x],
                                                                                              clusterAlg=clusterAlg, distance=distance,
                                                                                              seed=cc.seed, plot = NULL))),
                 # ConsensusClusterPlus returns a list of 7 elements, but we need a nested list
                 list(rep(list('aString'), 7)))
```

When I try tidy this file, something goes wrong:

```pre
Error in base::parse(text = code, keep.source = FALSE) : 
  <text>:48:1: unexpected 'function'
47: invisible(".BeGiN_TiDy_IdEnTiFiEr_HaHaHa# Must use <<- here for scope restrinction.HaHaHa_EnD_TiDy_IdEnTiFiEr")
48: function
    ^
```

Well, I have read the [documents](https://yihui.name/formatr/#in-line-comments-after-an-incomplete-expression-or) and I know that it can be confusing. But sometimes peoples need these comments in-place to remind contributors (often himself) what this part of code DOES do.
Could you consider just reserve these comments (or add a parameter for this aim)? You can assign this feature to me. It's my honor.
Hi Yihui :)

**EDIT: 2018-FEB-19**: I did a hack who tries to fit the desired width, and works for many cases. Reference: https://github.com/yihui/formatR/pull/71.

I'm using formatR inside bookdown and I found an issue when creating the PDF. The maximum width doesn't work for the code (but it does for comments!)

Easily reproducible at [formatR](https://yihui.shinyapps.io/formatR/), copy the following lines (using minimum line width=56)  

Input:
```
# Keeping all columns except the ones present in 'vars_to_remove' vector
heart_disease_2=select(heart_disease, -one_of(vars_to_remove))
aasd = select(daa, -one_of(holas), -one_of(holas), -one_of(holas))
```


Output:

```

# Keeping all columns except the ones present in
# 'vars_to_remove' vector
heart_disease_2 = select(heart_disease, -one_of(vars_to_remove))
aasd = select(daa, -one_of(holas), -one_of(holas), -one_of(holas))

```
Width line 3: 64
Width line 3: 66

So it didn't re adjust the with for the code.

Afer doing several test, I tracked the problem to what it seem its origin: `base::deparse` function.

Testing from your code: 

```
text="# Keeping all columns except the ones present in 'vars_to_remove' vector
heart_disease_2 = select(heart_disease, -one_of(vars_to_remove))
aasd = select(daa, -one_of(holas), -one_of(holas), -one_of(holas))"

exprs = parse_only(text)

base::deparse(exprs, width)
[1] "expression(heart_disease_2 = select(heart_disease, -one_of(vars_to_remove)), "
[2] "    aasd = select(daa, -one_of(holas), -one_of(holas), -one_of(holas)))"  

```
If I try lower width, let's say 40, it adjust the 3rd line but the max len is 50... 

I would have like to fix it myself, but I'm lack of ideas to debug `deparse` function... Any ideas?

Related to this case: https://stackoverflow.com/questions/20778635/formatr-width-cutoff-issue

Thanks!

Hi,
probably more a feature request than an issue. formatR does current not work out-of-the-box with a complete markdown file using "tidy_file", does it? 
Sub-question: Is there a way in RStudio to use the formatR addin on a specific chunk only? Selecting the chunk before running the addin does not do the trick for me. 
Thanks,
Oli
This patch adds another option, `width.strict=` to `tidy_source()`, defaulting to `FALSE`. If `TRUE`, instead of calling `deparse()` with `width.cutoff=` directly, it calls a new function, `strict_deparse(..., width.max)`, which performs a binary search for the highest `width.cutoff=` value to pass to `deparse()` such that the longest line in its output is, after stripping trailing whitespace, at most `width.max=` in length.

It seems to work quite well in most situations, though it still doesn't handle inline comments very well: the magic constant `%InLiNe_IdEnTiFiEr%` counts towards the line length, though it shouldn't. A possible solution might be to replace this magic constant with something much shorter, perhaps involving non-ASCII characters (which are legal in variable names in R, as far as I know) to reduce chances of a collision.
Hi Yihui,

Hope you are well.  I added a new feature to address magrittr line wrapping (issues #54, #62).  The unit tests run, and I added couple more.   

Most of it was writing the function magrittr_wrap_lines in utils.R, and adding it into the tidy_source function

Appreciate any feedback you may have
Love the package, but would it be possible to allow pipelines to have each operator on a separate line, so:

d2 <- d %>% 
          group_by(age) %>%
          summarize(height = mean(height))

I think this would make for much cleaner pipelines, as in long ones, operators are currently split over multiple lines. 

Thanks!

-Jon Zelner
After using "format code" in the latest RStudio, the parameters of functions are split into different lines and kept aligned.

But I am unable to find the corresponding settings in `formatR` package. How to do it with `formatR`?

Consider the source code:

``` r
my_sum = function(a = 1, b = 2, c =3) {
  return(a + b + c)
}
```

The desired formatted result (RStudio returns this):

``` r
my_sum = function(a = 1,
                  b = 2,
                  c = 3) {
  return(a + b + c)
}
```

Any way to automatically add braces for single line code inside `if` or something like that?

For the source code like this:

``` r
if (TRUE)
  a = 1
b = 2
```

Current default result for `tidy_source()`:

``` r
if (TRUE) a = 1
b = 2
```

Expected formatted result (of the requested feature):

``` r
if (TRUE) {
  a = 1
}
b = 2
```

Please add reformatting for magrittr pipe operator `%>%`.

For example:
`
result <- mydata %>% filter(criterion) %>% group_by(mygroup) %>% summarise(summand = sum(count))`

should be converted to something like:

```
mydata %>%
  filter(criterion) %>%
    group_by(mygroup) %>%
      summarise(summand = sum(count)) -> results
```

This looks very helpful it does not indent the lines that it does in the same way that Rstudio or emacs ESS does by default. 

For example, this line:

``` r
old.priors <- db.query(paste("select prior_id from pfts_priors where pft_id =", parent.pft.id, ";"), con = con)
```

is converted to `tidy_source()` as 

``` r
old.priors <- db.query(paste("select prior_id from pfts_priors where pft_id =", 
    parent.pft.id, ";"), con = con)
```

while Rstudio converts it to 

``` r
  old.priors <- db.query(paste("select prior_id from pfts_priors where pft_id =", 
                               parent.pft.id, ";"), con = con)
```

the Rstudio way makes it easier to see that the arguments on line 2 are arguments to the `paste` functions. 

Is there a way around this? I've reviewed many isues in this repository and suspect that the answer is 'no' but couldn't find a reference to this in particular.
