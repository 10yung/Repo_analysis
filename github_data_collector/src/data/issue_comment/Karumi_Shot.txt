I want to run yours plugin
I do:
`./gradlew executeScreenshotTests -Precord`

But get some errors:

```> Task :presentation:downloadScreenshots
⬇️  Pulling screenshots from your connected devices!

> Task :presentation:executeScreenshotTests FAILED
💾  Saving screenshots.

FAILURE: Build failed with an exception.

* What went wrong:
Execution failed for task ':presentation:executeScreenshotTests'.
> java.io.FileNotFoundException: /Users/ivan/AndroidStudioProjects/android-client/presentation/screenshots/screenshots-default/com.kg.project.presentation.RegressSuite_test_dump.json (No such file or directory)
```

But I found this Json at zip archive screenshot_bundle.zip

What I should do to avoid this error?

Thanks in advance

### Version of the library
com.karumi:shot:3.0.2
### Expected behaviour
Recording screenshots on Windows 10 with Nexus 4 (Android 5.1.1) connected via ADB over WIFI

### Actual behaviour
The task `gradlew executeScreenshotTests -Precord` takes the screenshots, pulls and saves them and the report, but the process finishes with: 
>`Execution failed for task ':app:executeScreenshotTests'.
   java.io.IOException: Unable to delete file: C: ... \app\screenshots\screenshots-default\metadata.xml`

- The same task works fine on Linux Ubuntu 18.04.1 (Nexus 4, ADB over WIFI)
- The same task works fine using USB connection  (Nexus 4, Win 10)
- The same task works fine with Samsung Galaxy Note 8 (ADB over Wifi, Win 10)

### Steps to reproduce
execute command on **Windows 10** in AndroidStudio Terminal or PowerShell
tested on: **Nexus 4 with android 5.1.1**
targetSdkVersion **28**
minSdkVersion **15**
custom testInstrumentationRunner:
```
public class ScreenshotAndroidJunitRunner extends AndroidJUnitRunner {
    @Override
    public void onCreate(Bundle arguments) {
        ScreenshotRunner.onCreate(this, arguments);
        super.onCreate(arguments);
    }

    @Override
    public void finish(int resultCode, Bundle results) {
        ScreenshotRunner.onDestroy();
        super.finish(resultCode, results);
    }
}
```
shot gradle settings:
```
shot {
    appId = 'myAppId'
    instrumentationTestTask = 'connectedDebugAndroidTest'
    packageTestApkTask = 'packageDebugAndroidTest'
}
```
Test class:
```
@LargeTest
@RunWith(AndroidJUnit4.class)
public class FirstEspressoTest {

    @Rule
    public ActivityTestRule<MainActivity> mActivityRule =
            new ActivityTestRule<>(MainActivity.class);

    @Test
    public void settingsArePresent() throws InterruptedException {
        Thread.sleep(5000);

        //ui interaction
        onView(withId(R.id.action_settings))
                .perform(click());

        //take screenshot
        TakeScreenshotUtil.takeScreenshot("settingsArePresent", mActivityRule.getActivity());

        //check result
        Context targetContext = InstrumentationRegistry.getTargetContext();
        onView(withText(targetContext.getResources().getString(R.string.action_settings)))
                .check(matches(ViewMatchers.isDisplayed()));
    }
}
```
TakeScreenshotUtil class:
```
public class TakeScreenshotUtil {
    public static void takeScreenshot(String name, Activity activity) throws InterruptedException {
        Thread.sleep(2500);
        Log.i("Taking screenshot of ", activity.getLocalClassName() + "(named: " + name + ")");
        InstrumentationRegistry.getInstrumentation().waitForIdleSync();
        Screenshot.snapActivity(activity).record();
    }
}
```
I can not delete the file metadata.xml manually when AndroidStudio is open. I tried to run the command from PowerShell with AndroidStudio closed, but I get the same error.

### Version of the library
shot 2.1.1
with facebooks screenshot testing plugin 0.8.0
with gradle 3.0.0

I'd like Shot to tell me if it finds some reference images that are not being used while running it. When you decide to rename your tests it often leaves some orphan screenshots so I think it's great if Shot displayed a warning in that situation.
### Expected behaviour

Show a fallback image when there is no reference image to compare with in the HTML report.

### Actual behaviour

When the reference image is missing we are showing a broken link in the HTML report.

### Steps to reproduce

Create a new screenshot test in your application and run screenshot tests with shot by executing `gradle executeScreenshotTests`. The  HTML report will show a broken link like the image below (ignore the gray rectangles 😅 ):

![slice](https://user-images.githubusercontent.com/3116415/34985285-db2feb12-fab3-11e7-9745-c59c3cd43936.png)

### Version of the library

1.0.0
Our current implementation compares the recorded screenshots used as a baseline and the new one taken from the device using a pixel-perfect strategy. We should provide a config value we can use to compare the screenshots letting the user consider two screenshots as the same even if some pixels are not the same. [This](https://github.com/Karumi/Shot/blob/master/core/src/main/scala/com/karumi/shot/screenshots/ScreenshotsComparator.scala#L33) is the code we should modify. I'd count the number of different pixels as a percentage before considering the comparison as a failure. **The tolerance value should be easily configured from the build.gradle file.**
The current implementation of the reporting system is using [Freemarker](https://freemarker.apache.org/) to render the HTML template shown to the user as a result. As the support for Scala is not so good we need to migrate the templates to [Scalate](https://github.com/scalate/scalate).
  
Cover the image comparison implementation using real images and improve unit tests written for the main class named ``Shot``. Integration tests will be hard to implement, but we should at list write unit tests.
