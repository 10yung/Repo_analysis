Considering the decision at https://github.com/docpad/docpad/issues/481#issuecomment-419222072

We should rip out the localisation code.
I have this weird issue where build files are being generated correctly (I see the desired result in my code editor and via the `file://` path in my browser), yet when served through DocPad, select changes are not applied.

Below is the build workflow:
- A less file is changed, DocPad picks this event up and transpiles into css (using `docpad-plugin-less`), nothing special here
- `docpad-plugin-gulp` is configured to execute the gulp `cssmin` task on `writeAfter`, this works
- Below is the `cssmin` task and the tasks it depends on

        # csspre(fix) task
        gulp.task 'csspre', ->
        	gulp
        		.src 'out/assets/css/screen.css'
        		.pipe autoprefixer
        			browsers: ['last 2 versions', 'firefox >= 18'],
        			cascade: false
        		.pipe gulp.dest 'out/assets/css'
        
        
        # cssconcat task
        gulp.task 'cssconcat', ['csspre'], ->
        	gulp
        		.src 'out/assets/css/*.css'
        		.pipe concat 'screen.css'
        		.pipe gulp.dest 'out/dist/css'
        
        
        # cssmin task
        gulp.task 'cssmin', ['cssconcat'], ->
        	gulp
        		.src 'out/dist/css/screen.css'
        		.pipe cssmin()
        		.pipe rename
        			suffix: '.min'
        		.pipe gulp.dest 'out/dist/css'

The resulting minified file is as desired ([the placeholders in the form are blue](https://c0d0g3n.github.io/subterra2/contact/)).

However, in development mode I want to link `assets/css/screen.css` directly (again, this setup does work). I can see in my code editor that the prefixes are applied after each generate, but if I view the files through the console on a DocPad served page, the prefixes are not present. (Neither are the on-screen results.)

My bet is DocPad stores the files somewhere in memory and they're updated after each generate but before my gulp tasks are completed.

I doubt this is caused by autoprefixer itself, because the files are updated correctly outside the DocPad environment. It is neither caused by livereload, as the issue persists while this plugin is disabled.

As the code of this project is available on GitHub, you may try to reproduce the issue[ there](https://github.com/c0d0g3n/subterra2/tree/bug). I don't exclude some stupidity of mine, but that would be an embarrassment :(
As per:
- https://bevry.me/patreon
- https://discuss.bevry.me/t/move-from-coffeescript-to-es6/581?u=balupton

This task will track progress of this conversion in relation to DocPad and what needs to be done.

Immediate:
- [ ] Update plugins to JavaScript
- [ ] Update core to JavaScript

Future:
- [x] Abstract out testers into own package
- [x] Abstract out plugin class to own package
- [x] Abstract out plugin loader to own package
One of the most common issues that people run into with DocPad as well as other node modules is permission errors due to incorrectly configuration installations of node. If people are using DocPad with sudo then we should error and tell them no. If people are using DocPad and permissions aren't set correctly, we should also exit and tell them no.

Besides the usual permission errors, here are some other issues caused by sudo and incorrect permissions:
- https://github.com/docpad/docpad/issues/488#issuecomment-135529728
- https://github.com/docpad/docpad/issues/990


<bountysource-plugin>

---

Want to back this issue? **[Place a bounty on it!](https://www.bountysource.com/issues/1431597-update-all-the-bootstrap-skeletons-to-use-bower-instead-like-interconnect-does?utm_campaign=plugin&utm_content=tracker%2F32879&utm_medium=issues&utm_source=github)** We accept bounties via [Bountysource](https://www.bountysource.com/?utm_campaign=plugin&utm_content=tracker%2F32879&utm_medium=issues&utm_source=github).
</bountysource-plugin>

Now that javascript objects have native getters, setters, and mutation observers, we could actually get rid of backbone models.

This would remove a whole lot of confusion about why `toJSON()` is needed etc.

It would also pave the way to having queryengine have live collections for native javascript objects.

<bountysource-plugin>

---

Want to back this issue? **[Place a bounty on it!](https://www.bountysource.com/issues/1386870-get-rid-of-backbone-models-for-native-javascript-objects?utm_campaign=plugin&utm_content=tracker%2F32879&utm_medium=issues&utm_source=github)** We accept bounties via [Bountysource](https://www.bountysource.com/?utm_campaign=plugin&utm_content=tracker%2F32879&utm_medium=issues&utm_source=github).
</bountysource-plugin>

<bountysource-plugin>

---

Want to back this issue? **[Place a bounty on it!](https://www.bountysource.com/issues/1370864-ensure-docpad-db-node_modules-and-out-are-inside-the-project-s-gitignore-file?utm_campaign=plugin&utm_content=tracker%2F32879&utm_medium=issues&utm_source=github)** We accept bounties via [Bountysource](https://www.bountysource.com/?utm_campaign=plugin&utm_content=tracker%2F32879&utm_medium=issues&utm_source=github).
</bountysource-plugin>

Related: https://github.com/bevry/docpad/pull/690

Repurposing the major version of the a plugin's version to specify metadata about a dependency (ie. depends on docpad plugin api v2) does not strike me as the best practice.

http://docpad.org/docs/plugin-write#package-json

> The reason reason why we do version 2.0.0 is just a general convention. Version 2 plugins are compatible for with DocPad v6, whereas Version 1 plugins are compatible with DocPad v5 (before DocPad v5 plugins were bundled).

Can we consider using the docpad key in the engine hash of `packages.json`? Or, if that already has a specific purpose, perhaps we could create a docpad-plugin engine? The current practice would seem to keep a user's plugin from being able to use semver, and likely also prevents them from properly versioning their own project (ie. things like using the `0.x.y` convention for pre-stable packages, etc.)

Thanks!

cc: @unframework

<bountysource-plugin>

---

Want to back this issue? **[Place a bounty on it!](https://www.bountysource.com/issues/1053321-reconsider-use-of-plugins-version-as-plugin-engine-spec?utm_campaign=plugin&utm_content=tracker%2F32879&utm_medium=issues&utm_source=github)** We accept bounties via [Bountysource](https://www.bountysource.com/?utm_campaign=plugin&utm_content=tracker%2F32879&utm_medium=issues&utm_source=github).
</bountysource-plugin>

This should already be supported, but their content will be in `document.getContent()` as a buffer. So a guide will need to be made.

<bountysource-plugin>

---

Want to back this issue? **[Place a bounty on it!](https://www.bountysource.com/issues/1053326-support-rendering-of-binary-markups?utm_campaign=plugin&utm_content=tracker%2F32879&utm_medium=issues&utm_source=github)** We accept bounties via [Bountysource](https://www.bountysource.com/?utm_campaign=plugin&utm_content=tracker%2F32879&utm_medium=issues&utm_source=github).
</bountysource-plugin>
