With the Type Definition of Object it leaves it on the consumer of `firebase-admin` to override the type definition to access things like `customClaims.admin`, many users may opt to use any here breaking type safety.

With that in mind would it be possible to use something like this typing in order to still allow type safety to some extent without needing the user to override the typing to consume it?

Error without this change
![Screen Shot 2020-01-18 at 22 13 44](https://user-images.githubusercontent.com/8206108/72674737-e48cba00-3a3f-11ea-93de-0ee4b87f4041.png)

Example code overriding the typing
![Screen Shot 2020-01-18 at 22 13 55](https://user-images.githubusercontent.com/8206108/72674735-dfc80600-3a3f-11ea-8deb-805b7565502e.png)

### [READ] Step 1: Are you in the right place?
Yes

### [REQUIRED] Step 2: Describe your environment

  * Firebase SDK version: `firebase-admin": "^8.2.0"`
  * Firebase Product: Firestore

### [REQUIRED] Step 3: Describe the problem

As described in [this blog](https://firebase.googleblog.com/2019/11/cloud-firestore-now-supports-in-queries.html) and [firestore documentation](https://firebase.google.com/docs/firestore/query-data/queries#in_and_array-contains-any), `IN` query is now supported. But when I run this query,

```js
firestore.collection("transactions")
		.where("uid", "==", uid)
		.where("number", "==", number)
		.where("status", "in", ["pending", "success"])
		.where("type", "==", type)
		.orderBy(admin.firestore.FieldPath.documentId(), "desc").limit(1).get()
```
 I get the following error:
```js
Error: Value for argument "opStr" is invalid. Acceptable values are: <, <=, ==, >, >=, array-contains
    at Object.validateEnumValue (/srv/node_modules/@google-cloud/firestore/build/src/validate.js:291:15)
    at validateQueryOperator (/srv/node_modules/@google-cloud/firestore/build/src/reference.js:1797:16)
    at Query.where (/srv/node_modules/@google-cloud/firestore/build/src/reference.js:954:17)
    at exports.createoid_v2.functions.runWith.https.onCall (/srv/index.js:2367:4)
    at func (/srv/node_modules/firebase-functions/lib/providers/https.js:318:32)
    at <anonymous>
    at process._tickDomainCallback (internal/process/next_tick.js:229:7)
```

Adds missing multi-factor related claims to the `DecodedIdToken` interface.
Modules like Firestore and Storage used to have the following bit of code:

https://github.com/firebase/firebase-admin-node/blob/00892e0b1f4c2e588834f81522f77387eab2e3c9/src/firestore/firestore.ts#L98-L110

This allowed checking if the SDK was initialized with ADC, and if so delegating the credential loading back to the corresponding GCP library. In other cases (e.g. custom credentials), an error was thrown.

But in the v8.9.1 release this code was refactored into this:

https://github.com/firebase/firebase-admin-node/blob/5ce91759724528dd574c14a4b3637230d691d4a8/src/firestore/firestore.ts#L88-L100

But this is not quite equivalent to the logic we used to have, because:

```
ApplicationDefaultCredential = 
  MetadataServiceCredential |
  RefreshTokenCredential loaded from well-known path |
  CertCredential loaded from environment variable
```

The new `ComputeEngineCredential` only accounts for the `MetadataServiceCredential`. 

In order to cover the remaining 2 cases, we need to differentiate the credentials that were explicitly instantiated by the developer and the credentials that were implicitly loaded by the SDK. This PR implements this capability and updates the rest of the code that depends on this behavior.

Resolves #763 
Using the new version _8.9.1_ of firebase-admin, firebase-functions deployments using NodeJS 10 with the Firebase CLI fail. Reverting firebase-admin to version _8.9.0_ resolves the issue.

Here is the command used to deploy functions:

> $ firebase deploy --only functions
> 
> === Deploying to 'ipregistry-dashboard-dev'...
> 
> i  deploying functions
> Running command: yarn --cwd functions run clean
> yarn run v1.21.1
> $ rm -rf dist/
> Done in 0.04s.
> Running command: yarn --cwd functions run lint
> yarn run v1.21.1
> $ tslint -p tsconfig.json
> Done in 2.03s.
> Running command: yarn --cwd functions run build
> yarn run v1.21.1
> $ yarn run lint && ./node_modules/.bin/tsc
> $ tslint -p tsconfig.json
> Done in 4.63s.
> Running command: cp -r $RESOURCE_DIR/keyfiles $RESOURCE_DIR/dist
> ✔  functions: Finished running predeploy script.
> i  functions: ensuring necessary APIs are enabled...
> ✔  functions: all necessary APIs are enabled
> i  functions: preparing functions directory for uploading...
> 
> Error: Error occurred while parsing your function triggers.
> 
> Error: Failed to initialize Google Cloud Firestore client with the available credentials. Must initialize the SDK with a certificate credential or application default credentials to use Cloud Firestore API.
>     at FirebaseFirestoreError.FirebaseError [as constructor] (/home/X/functions/node_modules/firebase-admin/lib/utils/error.js:42:28)
>     at new FirebaseFirestoreError (/home/X/functions/node_modules/firebase-admin/lib/utils/error.js:220:23)
>     at getFirestoreOptions (/home/X/functions/node_modules/firebase-admin/lib/firestore/firestore.js:96:11)
>     at initFirestore (/home/X/functions/node_modules/firebase-admin/lib/firestore/firestore.js:105:19)
>     at new FirestoreService (/home/X/functions/node_modules/firebase-admin/lib/firestore/firestore.js:43:32)
>     at /home/X/functions/node_modules/firebase-admin/lib/firebase-app.js:261:20
>     at FirebaseApp.ensureService_ (/home/X/functions/node_modules/firebase-admin/lib/firebase-app.js:351:23)
>     at FirebaseApp.firestore (/home/X/functions/node_modules/firebase-admin/lib/firebase-app.js:259:28)
>     at Object.<anonymous> (/home/X/functions/dist/callables/account-activate.js:10:33)
>     at Module._compile (internal/modules/cjs/loader.js:776:30)

The line 10 from account-active.js is `const firestoreDatabase = admin.firestore();`.

Firebase admin initialization is made as follows:

```
import {FirebaseAdminHelper} from '../helpers/firebase-admin-helper';
const admin = FirebaseAdminHelper.initializeApp();
const auth = admin.auth();
const config = functions.config();
const firestoreDatabase = admin.firestore();
```

where FirebaseAdminHelper is defined as follows:

```
import * as admin from 'firebase-admin';

export class FirebaseAdminHelper {

    static initializeApp(): admin.app.App {
        try {
            return admin.initializeApp();
        } catch (error) {
            // Ignore "already initialized" errors.
            // This case should only happen locally while deploying, not on real environments.
            return admin.app();
        }
    }

}
```
**Is your feature request related to a problem? Please describe.**
I am converting APNs tokens to Firebase registration tokens ("FRTs") on-the-fly in a backend push service. Many converted FRTs fail with the error `messaging/invalid-argument`, with no clues of what's going on. Through some fairly time consuming debugging using the Google API Explorer I was able to get some more details on what was happening, but it's a frustrating process.

**Describe the solution you'd like**
Provide the raw HTTPS response in the thrown `FirebaseMessagingError`. The python SDK [has this](https://firebase.google.com/docs/reference/admin/python/firebase_admin.exceptions), so I think it makes sense that the Node one would too. It would be especially helpful in cases like this where the error code doesn't make much sense.

**Describe alternatives you've considered**
The only real option to attain more info would be to use the REST API directly, but that feels a little over the top.

**Additional context**
There's definitely a possibility that the server or app is misconfigured somehow. Fixing the error is not the point here, though!
Our `index.d.ts` file is massive and continues to grow (5800 lines as of today). This makes locating specific elements and changing them difficult. This PR attempts to split the file into a number of smaller components by moving the service-specific API definitions to separate files.

The downside of this change is that, because of the limitations in TypeScript, we have to explicitly re-export each public type in the index.d.ts file again:

```
// index.d.ts

import * as _auth from './auth';

declare namespace admin.auth {
  export import Auth = _auth.admin.auth.Auth;
  export import UserRecord = _auth.admin.auth.UserRecord;
  // and so on...
}
```

This means whenever a new API/type is added, we have to update 2 files instead of one. I still feel like having smaller files outweighs this drawback. This issue is also likely to go away in a future version of TypeScript (https://github.com/Microsoft/TypeScript/issues/10187). Regardless, I'd like to see what others think about this change.

I have verified the TypeScript integration tests, and the doc generation pipeline with this PR and did not find any issues.
  * Operating System version: debian
  * Firebase SDK version: 8.9.0 and ^8.8.0
  * Firebase Product: Firestore
  * Node.js version: node:12-slim

  Getting the following error but not all the time. 

```js
commit error: TypeError: Cannot read property 'writeResults' of null
    at /app/node_modules/@google-cloud/firestore/build/src/write-batch.js:453:43
    at processImmediate (internal/timers.js:439:21)
From previous event:
    at WriteBatch.commit_ (/app/node_modules/@google-cloud/firestore/build/src/write-batch.js:450:14)
```

This only happens in node12. Works in node8 and node11
Replaces scrypt npm module (no longer maintained and
doesn't work for node 12) for testing standard scrypt with
`crypto.scryptSync` which has been supported since node v10.5.

This PR allows callers to retrieve a list of users by unique identifier (uid, email, phone, federated provider uid) as well as to delete a list of users.

RELEASE NOTE: Added `getUsers()` and `deleteUsers()` APIs for retrieving and deleting user accounts in bulk.