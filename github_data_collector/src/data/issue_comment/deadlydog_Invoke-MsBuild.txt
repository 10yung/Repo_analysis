If I have my build script in  the same folder as the solution and call Invoke-MSBuild with 

`-BuildLogDirectoryPath "PathDirectory"`

an error occurs here (line 295): 
`
if ($BuildLogDirectoryPath.Equals("PathDirectory", [System.StringComparison]::InvariantCultureIgnoreCase))
{
	$BuildLogDirectoryPath = [System.IO.Path]::GetDirectoryName($Path)
}
`

As `$Path` do not contain a directory.
If the current culture is 'de-DE' for example, the conversion results in wrong values.
For example: Found version string "14.0" will be converted to 140 which could not be found.
Adding `[System.Threading.Thread]::CurrentThread.CurrentCulture = 'en-US'` before conversion calls or for the whole script solves the problem.

https://github.com/deadlydog/Invoke-MsBuild/blob/2460dc4569cafd94df0b722365ef645675a01c7d/src/Invoke-MsBuild/Invoke-MsBuild.psm1#L679
When I use this it can never seem to create the build log. If I add the parameter to bypass dev tools it seems to build and generate a log but no output is shown and it seems to hang even though the build finished. Windows 10, PowerShell 5, VS 2017 Enterprise.


> C:\source\cbsnorthstar
>
>[Feature/CheckSearchServerTime]> Invoke-MSBuild NorthStar.OrderEntry.POS.sln
>WARNING: Cannot find the build log file at
>'C:\Users\geoffh\AppData\Local\Temp\NorthStar.OrderEntry.POS.sln.msbuild.log', so unable to determine >if build
>succeeded or not.
>
>Name                           Value
>----                           -----
>Message                        Cannot find the build log file at 'C:\Users\geoffh\AppData\Local\Temp\NorthStar.Order...
>MsBuildProcess
>BuildLogFilePath               C:\Users\geoffh\AppData\Local\Temp\NorthStar.OrderEntry.POS.sln.msbuild.log
>BuildErrorsLogFilePath         >C:\Users\geoffh\AppData\Local\Temp\NorthStar.OrderEntry.POS.sln.msbulid.errors.log
>BuildSucceeded
>ItemToBuildFilePath            NorthStar.OrderEntry.POS.sln
>CommandUsedToBuild             cmd.exe /k " "C:\Program Files (x86)\Microsoft Visual >Studio\2017\Enterprise\Common7\...
>BuildDuration                  00:00:04.0651079

With MSbuild version: 4.6.1590.0
Running Visual Studio 2017
The solution I am building is predominantly VB.NET code.  

MsBuild only reports 86 Warnings(s) and 0 Errors(s), however Invoke-MsBuild finishes with a BuildSucceeded=False. I've isolated this to the return code of MsBuild not being equal to 0. Because if I remove that check condition ( $result.MsBuildProcess.ExitCode -eq 0)  from line 441 in the script, then BuildSucceeded=True. That means that the string "Build FAILED" is not in the build output.

I've tried digging into the MsBuild docs to see if BC warnings (from vbc) are handled differently than that C# warnings. I've got a suspicion they are, but cannot confirm. 
Hello,

I try to make this part from my .csproj working:

```
<Target Name="CustomPostAfterBuild" AfterTargets="AfterBuild">
    <Exec Command="echo Post-Build event: Active configuration is: $(ConfigurationName)" />
    <PropertyGroup>
        <EmptyCheck>Scripts\dist\*.js</EmptyCheck>
    </PropertyGroup>
    <Error Condition="'@(EmptyCheck)' == ''" Text="Empty folder $(EmptyCheck)" />
    <ItemGroup>
      <!-- what ever is in the build folder should be included in the project -->
      <Content Include="Scripts\dist\*.js" />
      <!--<Content Include="$(MSBuildThisFileDirectory)Scripts\dist\*.js" />-->
    </ItemGroup>
  </Target>
```

When I publish my project from visual studio it is ok.
But when I use Invoke-MsBuild from my powershell script it fails.

I got the same problem with my Gulp task but I fixed it by using absolute path.

It's not possible for ItemGroup/Content

Is it a way for command line Invoke-MsBuild to be based on current project publishing ?

We are getting below error for few of the projects where rest of the projects getting compiled successfully.

```
$SolutionOutputPath=Join-Path $AgentFolderPath "\Src\DOTNET\Common\bin"
$BuildParameters="/target:Build /property:Configuration=Release /p:OutDir=""$SolutionOutputPath"";Platform=""AnyCPU"" /verbosity:Quiet"
$SolutionPath=Join-Path $AgentFolderpath "\Src\DOTNET\NonWebApps\ShipmentHistoryUpdateJob\ShipmentHistoryUpdateJob.csproj"
Invoke-MsBuild -Path $SolutionPath -MsBuildParameters $BuildParameters
```

> Invoke-MsBuild : Unexpect error occured while building "D:_yyy2\OEM\POC.SM.M_1
> _PS\src\Src\DOTNET\NonWebApps\ShipmentHistoryUpdateJob\ShipmentHistoryUpdateJob.csproj": Process with an Id of 10032 is not running.
> At D:_yyy2\POC.SM.M_1_PS\src\Build\Library\InvokeSolutions.ps1:716 char:1
> 
>    Invoke-MsBuild -Path $SolutionPath -MsBuildParameters $BuildParameters
> 
>    CategoryInfo : NotSpecified: (:) [Write-Error], WriteErrorException
>    FullyQualifiedErrorId : Microsoft.PowerShell.Commands.WriteErrorException,Invoke-MsBuild 

Migrated from [this codeplex issue](https://invokemsbuild.codeplex.com/workitem/3)

I'd like to see a Target parameter for Invoke-MSBuild added as `[string[]]` so we don't need to pass it as a string in MsBuildParameters. 

I'd also like a Properties parameter of type `[hashtable]` so we could write things like this: 

``` powershell
Invoke-MSBuild -Target Clean,Build -Properties @{Configuration='Debug';OutDir='..\artifacts\'}
```
