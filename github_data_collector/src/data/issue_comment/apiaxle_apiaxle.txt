Similarly to database docker images that allow providing a master password, database name, username, and password that get initialized on startup, it would be nice if the apiaxle entrypoint script supported something similar. This would allow for initializing redis with configuration information to allow calls to the apiaxle api with a given api key/secret. 
The `resolve` option does not seem to have any effect (either when using the [PHP Client for ApiAxle](https://github.com/silinternational/apiaxle-sdk-php) or when interacting with it via the repl, though those may be different issues).

Demonstration in the repl:

    axle> keyrings
    [2016-11-03 16:17:09.322] [DEBUG] [default] - Calling (GET) '/v1/keyrings?resolve=false&to=100&from=0'
    [ 'dummy-keyring-1',
      'dummy-keyring-2',
      'dummy-keyring-3',
      'dummy-keyring-4',
      'dummy-keyring-5',
      'dummy-keyring-6',
      'dummy-keyring-7',
      'dummy-keyring-8',
      'dummy-keyring-9',
      'dummy-keyring-10',
      'dummy-keyring-11',
      'dummy-keyring-12',
      'dummy-keyring-13',
      'dummy-keyring-14',
      'dummy-keyring-15',
      'dummy-keyring-16' ]
    axle> keyrings to="5"
    [2016-11-03 16:17:14.094] [DEBUG] [default] - Calling (GET) '/v1/keyrings?resolve=false&to=5&from=0'
    [ 'dummy-keyring-1',
      'dummy-keyring-2',
      'dummy-keyring-3',
      'dummy-keyring-4',
      'dummy-keyring-5',
      'dummy-keyring-6' ]
    axle> keyrings to="5" resolve="true"
    [2016-11-03 16:17:18.245] [DEBUG] [default] - Calling (GET) '/v1/keyrings?resolve=false&to=5&from=0'
    [ 'dummy-keyring-1',
      'dummy-keyring-2',
      'dummy-keyring-3',
      'dummy-keyring-4',
      'dummy-keyring-5',
      'dummy-keyring-6' ]
    axle> keyrings to="5" resolve=true
    [2016-11-03 16:17:23.084] [DEBUG] [default] - Calling (GET) '/v1/keyrings?resolve=false&to=5&from=0'
    [ 'dummy-keyring-1',
      'dummy-keyring-2',
      'dummy-keyring-3',
      'dummy-keyring-4',
      'dummy-keyring-5',
      'dummy-keyring-6' ]

Note that the query string still has `resolve=false` even if I specify true in the repl command.
I saw an interesting bit of output in our CI/CD environment:
```
2016-10-31T20:56:58.753Zproxy[2016-10-31 20:56:58.752] [DEBUG] [default] - POST /v1/api/test-0718815001477947418?api_key=...&api_sig=...
2016-10-31T20:56:58.769Zproxy[2016-10-31 20:56:58.768] [DEBUG] [default] - Backend: POST to 'http://api:undefined/v1/api/test-0718815001477947418
```
Looks like the port number is being output as 'undefined' by the proxy. Everything seems to work fine, but the log output shows 'undefined' as the port in the URL of the request is says it received.

In [this logger call](https://github.com/apiaxle/apiaxle/blob/d4c26e793fa41bee07575415c39a8e7d7ca2936c/proxy/apiaxle-proxy.coffee#L474), the port is printed out even if it's undefined. That value gets extracted [here](https://github.com/apiaxle/apiaxle/blob/d4c26e793fa41bee07575415c39a8e7d7ca2936c/proxy/apiaxle-proxy.coffee#L252), and conditionally set [here](https://github.com/apiaxle/apiaxle/blob/d4c26e793fa41bee07575415c39a8e7d7ca2936c/proxy/apiaxle-proxy.coffee#L257).

It might be worth either setting that `port` value to whatever default ends up being used or (if that's not worth the extra complexity) simply tweaking the log statement to only include the port if one was specified.
It would be helpful to others if the latest doc generation updates were referenced in documentation, either in README or in the docs website.

see https://github.com/apiaxle/apiaxle/pull/99

Currently the README has references to Docker.  That documentation might be more widely referenced in the documentation website http://apiaxle.com/docs.html, maybe in a new section.

I tried first with

`npm install apiaxle-api`

but it failed exactly for the same reason as #81 
As I saw the fix on the development branch #82 , so I downloaded the source and compiled with make.
I could compile it without any problems. But after that when I try to `npm install <folder-to-apiaxle-base>` it fails still:

``` bash
In file included from ../src/libxmljs.h:7:0,
                 from ../src/libxmljs.cc:7:
../node_modules/nan/nan.h: At global scope:
../node_modules/nan/nan.h:592:20: error: variable or field ‘AddGCEpilogueCallback’ declared void
       v8::Isolate::GCEpilogueCallback callback
                    ^
../node_modules/nan/nan.h:592:7: error: ‘GCEpilogueCallback’ is not a member of ‘v8::Isolate’
       v8::Isolate::GCEpilogueCallback callback
       ^
../node_modules/nan/nan.h:593:18: error: expected primary-expression before ‘gc_type_filter’
     , v8::GCType gc_type_filter = v8::kGCTypeAll) {
                  ^
../node_modules/nan/nan.h:598:20: error: variable or field ‘RemoveGCEpilogueCallback’ declared void
       v8::Isolate::GCEpilogueCallback callback) {
                    ^
../node_modules/nan/nan.h:598:7: error: ‘GCEpilogueCallback’ is not a member of ‘v8::Isolate’
       v8::Isolate::GCEpilogueCallback callback) {
       ^
../node_modules/nan/nan.h:603:20: error: variable or field ‘AddGCPrologueCallback’ declared void
       v8::Isolate::GCPrologueCallback callback
                    ^
../node_modules/nan/nan.h:603:7: error: ‘GCPrologueCallback’ is not a member of ‘v8::Isolate’
       v8::Isolate::GCPrologueCallback callback
       ^
../node_modules/nan/nan.h:604:18: error: expected primary-expression before ‘gc_type_filter’
     , v8::GCType gc_type_filter = v8::kGCTypeAll) {
                  ^
../node_modules/nan/nan.h:609:20: error: variable or field ‘RemoveGCPrologueCallback’ declared void
       v8::Isolate::GCPrologueCallback callback) {
                    ^
../node_modules/nan/nan.h:609:7: error: ‘GCPrologueCallback’ is not a member of ‘v8::Isolate’
       v8::Isolate::GCPrologueCallback callback) {
       ^
../node_modules/nan/nan.h: In function ‘bool Nan::SetAccessor(v8::Local<v8::Object>, v8::Local<v8::String>, Nan::GetterCallback, Nan::SetterCallback, v8::Local<v8::Value>, v8::AccessControl, v8::PropertyAttribute)’:
../node_modules/nan/nan.h:1939:16: warning: ‘bool v8::Object::SetAccessor(v8::Local<v8::Name>, v8::AccessorNameGetterCallback, v8::AccessorNameSetterCallback, v8::Local<v8::Value>, v8::AccessControl, v8::PropertyAttribute)’ is deprecated (declared at /home/gulyas/.node-gyp/6.3.1/include/node/v8.h:2735): Use maybe version [-Wdeprecated-declarations]
     , attribute);
                ^
../src/libxmljs.cc: In function ‘void libxmljs::xmlMemFreeWrap(void*)’:
../src/libxmljs.cc:56:24: warning: ‘static bool v8::V8::IsDead()’ is deprecated (declared at /home/gulyas/.node-gyp/6.3.1/include/node/v8.h:8462): Use isolate version [-Wdeprecated-declarations]
     if (v8::V8::IsDead())
                        ^
make: *** [Release/obj.target/xmljs/src/libxmljs.o] Error 1
make: Leaving directory `/home/gulyas/Projects/gli-solutions/apiaxle/apiaxle-user/node_modules/libxmljs/build'
gyp ERR! build error 
gyp ERR! stack Error: `make` failed with exit code: 2
gyp ERR! stack     at ChildProcess.onExit (/usr/lib/node_modules/npm/node_modules/node-gyp/lib/build.js:276:23)
gyp ERR! stack     at emitTwo (events.js:106:13)
gyp ERR! stack     at ChildProcess.emit (events.js:191:7)
gyp ERR! stack     at Process.ChildProcess._handle.onexit (internal/child_process.js:204:12)
gyp ERR! System Linux 3.16.0-77-generic
gyp ERR! command "/usr/bin/nodejs" "/usr/lib/node_modules/npm/node_modules/node-gyp/bin/node-gyp.js" "rebuild"
gyp ERR! cwd /home/gulyas/Projects/gli-solutions/apiaxle/apiaxle-user/node_modules/libxmljs
gyp ERR! node -v v6.3.1
gyp ERR! node-gyp -v v3.4.0
gyp ERR! not ok 
apiaxle-user@1.0.0 /home/gulyas/Projects/gli-solutions/apiaxle/apiaxle-user
├── date-utils@1.2.21  extraneous
├── express@3.2.6  extraneous
├── hiredis@0.4.1  extraneous
├── lodash@1.2.1  extraneous
├── redis@0.10.3  extraneous
├── request@2.20.0  extraneous
└── scarf@0.0.10  extraneous

npm WARN apiaxle-user@1.0.0 No description
npm WARN apiaxle-user@1.0.0 No repository field.
npm ERR! Linux 3.16.0-77-generic
npm ERR! argv "/usr/bin/nodejs" "/usr/bin/npm" "install" "../apiaxle/base"
npm ERR! node v6.3.1
npm ERR! npm  v3.10.6
npm ERR! code ELIFECYCLE

npm ERR! libxmljs@0.14.3 install: `node-gyp rebuild`
npm ERR! Exit status 1
npm ERR! 
npm ERR! Failed at the libxmljs@0.14.3 install script 'node-gyp rebuild'.
npm ERR! Make sure you have the latest version of node.js and npm installed.
npm ERR! If you do, this is most likely a problem with the libxmljs package,
npm ERR! not with npm itself.
npm ERR! Tell the author that this fails on your system:
npm ERR!     node-gyp rebuild
npm ERR! You can get information on how to open an issue for this project with:
npm ERR!     npm bugs libxmljs
npm ERR! Or if that isn't available, you can get their info via:
npm ERR!     npm owner ls libxmljs
npm ERR! There is likely additional logging output above.
```

[npm-debug.log.zip](https://github.com/apiaxle/apiaxle/files/412472/npm-debug.log.zip)

429 responses (and possibly other errors?) do not contain `X-ApiaxleProxy-*` headers.

Eg. when exceeding a QPS limit, the client cannot see how many QPD they have left

```
< HTTP/1.1 429 Too Many Requests
< Content-Type: application/json
< Date: Tue, 13 Oct 2015 12:52:32 GMT
* Server nginx/1.4.6 (Ubuntu) is not blacklisted
< Server: nginx/1.4.6 (Ubuntu)
< Content-Length: 159
< Connection: keep-alive
< 
```
