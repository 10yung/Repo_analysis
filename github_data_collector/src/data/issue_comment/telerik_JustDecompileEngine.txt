can we get some info where we put the JDE  on a non-windows environment?
since visual studio is available for other platforms such as Linux & OSX
Update bits so that they do not immediately call Registry on non windows systems and when resolving paths do not yield null because Windows Environment variables are not set. 
I don't see any reference to decompile a silverlight xap file. can you provide an example of the command
It appears the reconstruction of "foreach" loops fails when there is a return statement inside the loop body. This is only my best guess of what appears to cause the problem, there may be other cases (ie, there might be a more general cause for this rather the "return" itself).

Repro case:
```C#
private bool TestMethod()
{
    List<string> moo = new List<string>();
    foreach(string s in moo)
    {
        if (s.StartsWith("test"))
        {
            Console.WriteLine("moo");
            return false;
        }
    }
    return true;
}
```

Decompiler output (note that reconstruction of "foreach" failed):
```C#
private bool TestMethod()
{
	bool flag;
	List<string>.Enumerator enumerator = (new List<string>()).GetEnumerator();
	try
	{
		while (enumerator.MoveNext())
		{
			if (!enumerator.Current.StartsWith("test"))
			{
				continue;
			}
			Console.WriteLine("moo");
			flag = false;
			return flag;
		}
		return true;
	}
	finally
	{
		((IDisposable)enumerator).Dispose();
	}
	return flag;
}
```

If we remove the `return false` line from the repro case, and decompile again, then the "foreach" is correctly recovered:
```C#
private bool TestMethod()
{
	foreach (string str in new List<string>())
	{
		if (!str.StartsWith("test"))
		{
			continue;
		}
		Console.WriteLine("moo");
	}
	return true;
}
```
Is JustDecompiler able to batch decompile or decompile multiple .net assemblies in "parallel"?
We have been noticing that occasionally JustDecompile is unable to decompile C++/CLI assemblies like (WPF's) PresentationCore.dll.

Initially we thought that it might have been a compiler or a linker bug (ILspy also had trouble decompiling the DLL - see https://github.com/icsharpcode/ILSpy/issues/1408), but turns out that (a) the DLL is fine, and (b) the PDB is what JustDecompile seems to have a problem with and (c) the PDB is also well formed per folks in the C++ compiler/linker teams. 

We also found that dotPeek is able to handle these assemblies ok.

Any ideas on what is going on?

The error we see is this: 

```
JustDecompile supports only valid CLR assemblies. Not supported file(s).
```

[not-bad-presentationcore.zip](https://github.com/telerik/JustDecompileEngine/files/2818553/not-bad-presentationcore.zip)

Decompilation of a attribute with a Type[] parameter, where the parameter value has one or more null elements, causes a NullReferenceException.

The following code illustrates this issue:

```csharp
using System;

namespace ClassLibrary1 {
	class FooAttribute : Attribute {
		public FooAttribute(Type[] types) {	}
	}

	[Foo(new Type[] { typeof(string), null })]
	public class Class1 { }
}
```

Opening the assembly produced by this code works okay, but attempting to view the decompiled code for `Class1` results in the following output in the code view panel:

```csharp
using System;

namespace ClassLibrary1
{
    [Foo(new Type[] { typeof(String), typeof(
Current member / type: ClassLibrary1.Class1
File path: C:\Users\andrew.cooper\source\repos\ClassLibrary1\ClassLibrary1\bin\Debug\netstandard2.0\ClassLibrary1.dll

Product version: 2018.2.803.0
Object reference not set to an instance of an object.
at ..(Exception , IMemberDefinition ) in C:\DeveloperTooling_JD_Agent1\_work\15\s\OpenSource\Cecil.Decompiler\Languages\BaseLanguageWriter.cs:line 651
at ..( ) in C:\DeveloperTooling_JD_Agent1\_work\15\s\OpenSource\Cecil.Decompiler\Languages\BaseLanguageWriter.cs:line 917
at ..Visit(ICodeNode ) in C:\DeveloperTooling_JD_Agent1\_work\15\s\OpenSource\Cecil.Decompiler\Ast\BaseCodeVisitor.cs:line 264
at Telerik.JustDecompiler.Languages.BaseImperativeLanguageWriter.<>n__0(ICodeNode )
at Telerik.JustDecompiler.Languages.BaseImperativeLanguageWriter..() in C:\DeveloperTooling_JD_Agent1\_work\15\s\OpenSource\Cecil.Decompiler\Languages\BaseImperativeLanguageWriter.cs:line 1084
at Telerik.JustDecompiler.Languages.BaseImperativeLanguageWriter.(Action ) in C:\DeveloperTooling_JD_Agent1\_work\15\s\OpenSource\Cecil.Decompiler\Languages\BaseImperativeLanguageWriter.cs:line 1130
at Telerik.JustDecompiler.Languages.BaseImperativeLanguageWriter.Visit(ICodeNode ) in C:\DeveloperTooling_JD_Agent1\_work\15\s\OpenSource\Cecil.Decompiler\Languages\BaseImperativeLanguageWriter.cs:line 1084
at ..WriteInternal(IMemberDefinition ) in C:\DeveloperTooling_JD_Agent1\_work\15\s\OpenSource\Cecil.Decompiler\Languages\BaseLanguageWriter.cs:line 474
at ..(TypeDefinition ) in C:\DeveloperTooling_JD_Agent1\_work\15\s\OpenSource\Cecil.Decompiler\Languages\NamespaceImperativeLanguageWriter.cs:line 70
at ..(TypeDefinition ,  ) in C:\DeveloperTooling_JD_Agent1\_work\15\s\OpenSource\Cecil.Decompiler\Languages\NamespaceImperativeLanguageWriter.cs:line 43
at ..( ) in C:\DeveloperTooling_JD_Agent1\_work\15\s\UI\JustDecompile.CodeViewer\Writers\TypeDefinitionCodeWriter.cs:line 51

mailto: JustDecompilePublicFeedback@telerik.com
```

it's be great if the software can create the project inside folder based on the name of the binary
I'm using JustDecompile's command line interface to decompile an application with around 70 interdependent assemblies. It would be nice if I could generate one solution containing projects that depend on each other. This would make browsing the generated code in Visual Studio easier.