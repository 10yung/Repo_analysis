In the current implementation of OpenTK 3.x that is available via NuGet, there is code running in
GameWindow.cs that consumes 100% of a single core.

Since the main while loop executes infinitely as fast as possible, it locks up resources. I implemented a FixedTimestep with Thread.Sleep to mitigate this issue.

Reproduce:
Create an empty class and inherit from GameWindow, run the using statement and look at the CPU usage.

Before:
![grafik](https://user-images.githubusercontent.com/46710246/72206928-d107af00-3493-11ea-9ffe-8c95369278e0.png)

After:
![grafik](https://user-images.githubusercontent.com/46710246/72206917-b5040d80-3493-11ea-8094-c10ec125b9c6.png)

Proof of concept and a reference is the Monogame implementation of FixedTimesteps.

I would highly suggest to implement this behaviour and make it optional.
### Purpose of this PR

Implement the rest of the GLFW Window functions.

- glfwGetWindowContentScale
- glfwSetWindowUserPointer
- glfwGetWindowUserPointer
- glfwSetWindowMaximizeCallback
- glfwSetFramebufferSizeCallback
- glfwSetWindowContentScaleCallback
While studying the new build pipeline, I came across a few difficulties with the current documentation that I believe might be improved. Here are my thoughts:

1. Build instructions can currently be found both in README.md and CONTRIBUTING.md. Some of the git instructions seem outdated in CONTRIBUTING.md, for example it still [recommends doing work against the `develop` branch](https://github.com/opentk/opentk/blame/master/CONTRIBUTING.md#L87), which no longer exists.

2. None of the instructions mention the F# code generation pipeline, or how to get it to work, so I had to bump a bit against it until I figured it out. The batch scripts on the command-line are useful for this, but they also seem to be outdated. Specifically, the **SpecificationOpenGL** project requires the **gl.xml** file, which has to be obtained externally from the khronos.org website.

3. There are two files, `update-specifications.bat` and `update-bindings.bat`, that mention a **Generators** folder and two sub-projects (**Generator.Bind** and **Generator.Convert**) which no longer seem to exist. It's unclear in the build documentation what these projects are used for, e.g. which ones are for testing, and which ones for building?

4. The file `build.cmd` does not seem to get called correctly as a pre-build event on my machine using VS 2019. Furthermore, calling it manually from CLI always starts downloading the `dotnet` tool manually, even if it is already installed, so detection of latest version might not be implemented correctly. Currently had to manually call `dotnet fake run build.fsx -t UpdateBindings` myself to actually generate the bindings.

I imagine the project is maintained by a regular team who is already familiar with these procedures, so just wanted to share a bit of the perception that a complete outsider might have when coming into the code base.

I was eventually able to build all projects by manually downloading **gl.xml** from the khronos.org website and placing it where the **SpecificationOpenGL** project was looking for it. If someone is willing to walk me over the expected pipeline including the purpose of the FAKE scripts and code generators, I would be happy to offer pull requests to improve the docs!
I have just come back to updating OpenTK dependencies and prototype the new 4.0 version and just realized the full extent and implication of the decisions around the namespace change.

I believe this is a profound mistake for this project, but one which I hope we can still prevent. Allow me to elaborate:

OpenTK has a 14+ year history, the first commit harks back to 2006, when I first started programming professionally. Since then, I and many other developers have relied on it systematically for years and years. The presence and impact of the OpenTK in the community is sheer testament to this. This impact has led OpenTK to be appropriated by the mono project, and consequently official bits of documentation are now lingering in Microsoft's own support website: https://docs.microsoft.com/en-us/dotnet/api/opentk?view=xamarin-ios-sdk-12

I have just unrolled the events of the past year and I understand how painful it must be for the maintainers to have undertaken the decision to change the namespace. I don't want to reopen old wounds, but in the name of protecting this community, I believe that I must.

This is not about binary and source compatibility anymore, the sheer impact and extent of the OpenTK brand has now implications for SEO when people look for help. Documentation will be far more important than find/replace operations, especially for new users who will establish and represent the future of OpenTK.

I know Xamarin feels like the big shark who are entitled to hold their ground and just shut off, but on behalf of at least my community of indirect OpenTK users (extensive in open-science and visualization) I urge you not to concede this ground.

If I understand correctly, the problem stems from a particular distribution of OpenTK, the one that clashes with Mono/Xamarin official distro that is shipped with their platform. If this is the case, why not generate a specific distribution _**just for this scenario**_ until they come around and decide to remove the OpenTK assemblies, as per their [XAMCORE audit](https://github.com/xamarin/xamarin-macios/issues/5107
)?

The rationale is that if this use case didn't work before, then there are really no users which are depending on it working at the moment. This means that if you introduce a renamed OpenTK just for Xamarin, you will not harm any existing user base and more importantly, by keeping the _root_ namespace intact, you will keep the important documentation identity for OpenTK. Again this is NOT just about root namespace / child namespace. For non-English speaking users OpenTK is a completely different word from OpenToolkit, and should not be changed lightly. Especially changing the name of the assembly and nuget packages is a mistake, the ID change will take years to sort out.

The OpenTK community is not huge and marketing / communication is bandwidth limited so this risks fragmenting it even further into oblivion. _Please do not do this._

As for implementation, given that code generation tools are starting to be incorporated extensively in the OpenTK build process, it doesn't seem like it would be too hard to automate the publishing process for this temporary platform release. I am happy to help directly with this and allocate however many work hours are needed for me to familiarize myself with the build pipeline and make it happen.

As for a proposal for what name to use for the specific deployment NuGet / namespace for Xamarin platforms, I suggest: **OpenTK.Xamarin**

In light of everything that has happened, I feel it is only right, but would accept better suggestions.
### Description

Enum `OpenTK.Graphics.OpenGL4.TextureTarget3d` does not contain a definition for `TextureCubeMapArray`.

According to [wiki](https://www.khronos.org/registry/OpenGL-Refpages/gl4/html/glTexStorage3D.xhtml) the `glTexStorage3D` (`OpenTK.Graphics.OpenGL4.GL.TexStorage3D`) function's one possible target is `GL_TEXTURE_CUBE_MAP_ARRAY`. However `GL.TexStorage3D` target is `TextureTarget3d` enum and it has no member similar to `GL_TEXTURE_CUBE_MAP_ARRAY`.

### Example

I'm trying to create CubeMap array texture this way:
```c#
using System;
using System.Drawing;
using System.Drawing.Imaging;
using OpenTK.Graphics.OpenGL4;
using PixelFormat = System.Drawing.Imaging.PixelFormat;
using GL_PixelFormat = OpenTK.Graphics.OpenGL4.PixelFormat;
...

public int CreateCubemapArray(string[] imagePaths, int count)
{
    // Generate an array texture
    int texture = GL.GenTexture();
    GL.BindTexture(TextureTarget.TextureCubeMapArray, texture);
    GL.TexStorage3D(
        TextureTarget3d.TextureCubeMapArray, // does not work
        9, 
        SizedInternalFormat.Rgba8, 
        512, 512, 
        count);

    // Load images
    for (int i = 0; i < count * 6; i++)
    {
        LoadImage(imagePaths[i], 512, 512, TextureTarget.TextureCubeMapPositiveX + (i % 6), i / 6);
    }

    // Setting behavior
    GL.TexParameter(TextureTarget.TextureCubeMapArray, TextureParameterName.TextureMinFilter, (int)TextureMinFilter.Linear);
    GL.TexParameter(TextureTarget.TextureCubeMapArray, TextureParameterName.TextureMagFilter, (int)TextureMagFilter.Nearest);

    GL.TexParameter(TextureTarget.TextureCubeMapArray, TextureParameterName.TextureWrapS, (int)TextureWrapMode.ClampToEdge);
    GL.TexParameter(TextureTarget.TextureCubeMapArray, TextureParameterName.TextureWrapT, (int)TextureWrapMode.ClampToEdge);
    GL.TexParameter(TextureTarget.TextureCubeMapArray, TextureParameterName.TextureWrapR, (int)TextureWrapMode.ClampToEdge);

    // Generate Mipmaps
    GL.GenerateMipmap(GenerateMipmapTarget.TextureCubeMapArray);

    return texture;
}

void LoadImage(string path, int width, int height, TextureTarget textureTarget, int depth)
{
    using Bitmap image = new Bitmap(path);
    BitmapData imageData = image.LockBits(
        new Rectangle(0, 0, image.Width, image.Height),
        ImageLockMode.ReadOnly,
        PixelFormat.Format32bppArgb);
    GL.TexSubImage3D(
        textureTarget,
        0, // level
        0, 0, 0, // offsets
        width, height,
        depth,
        GL_PixelFormat.Bgra,
        PixelType.UnsignedByte,
        imageData.Scan0);
    image.UnlockBits(imageData);
}
```

### Related information 

* OpenTK 3.1.0
* .NET Core 3.0


### Description

I write a very simple shader, and using opengl4 API to render it. When I use gtx1060, it works fine, but when I use a WX5100 or RX580, the shader does not work. The driver is updated to the latest version. Have I do something wrong? How to make it work on a AMD graphic card? The project is attached.
Waiting for your kind reply

I pass the paras to the shader using:
           GL.UseProgram(_program);
            // add shader attributes here
            GL.VertexAttrib1(0, _time);
            GL.DrawArrays(PrimitiveType.Patches, 0, 3); 
            SwapBuffers();
The vertex shader:

#version 450 core

layout (location = 0) in float time;
layout (location = 1) in vec4 position;
out vec4 frag_color;

void main(void)
{
	gl_Position = position;
	frag_color = vec4(sin(time) * 0.5 + 0.5, cos(time) * 0.5 + 0.5, 0.0, 0.0);
}

the frag shader: 

#version 450 core
in vec4 frag_color;
out vec4 color;

void main(void)
{
	color = frag_color;
}




[opengl test.zip](https://github.com/opentk/opentk/files/4002010/opengl.test.zip)

### Description

Creating shaders with empty source codes will create invalid memory addressing, and ultimately results in crashes when later accessing/compiling/writing to these on certain version of windows/Radeon drivers.

### Reproduction

Create two shaders, immedaitely after one another, both with sources assigned to a null stream. Then, attempt to compile the first. The debugger will the catch the exception in the call. 
(Note the violation occurs in the call, not in the formation of the call itself)


Windows 10, version 1903 (This problem does not persist on version 1909)
.NET Framework 4.7.2


### Purpose of this PR

* Merge all OpenAL extensions into a single assembly.

### Testing status
* None

### Comments
* As requested by @varon.

### Description

SwapBuffers, GL.Flush, or GL.Finish takes a while to finish when a compute shader has been used, even though the compute shader is already finished on Win10 NVIDIA 1080 with Drivers: 441.41. Thus, causing the UI thread to completely freeze during this time. It can take upwards of  200+ms for SwapBuffers, GL.Flush, or GL.Finish to complete. I have not tested with SDL backend, due to using GLControl.

It is more apparent on compute shaders with large sizes. But, it can also happen on compute shaders with only DispatchCompute(1,1,1) and no for loops in a simple compute shader where a variable is assigned as output to a Persistent Mapped ShaderStorageBuffer. It seems any time the underlying OpenTK CPU code must sync with the GPU, after a compute shader is used, causes a huge spike in wait time before returning.

### Repro steps

Please provide the steps required to reproduce the problem

* Note: The worker size is set to 8,8,8 in the shader.

1. Use a DispatchCompute(2048 / 8, 2048 / 8, 100 / 8)

2. Use GL.Flush, GL.Finish or SwapBuffers called later. 

### Expected behavior

SwapBuffers, GL.Flush, or GL.Finish  should not be taking 200+ms. Since, the compute shader is already complete by the time these are called.

### Actual behavior

SwapBuffers, GL.Flush or GL.Finish can take upwards of 200ms to complete after a compute shader is launched. Even though the compute shader is finished by the time these are called. This can even happen on small compute shaders that have no for loops and are DispatchCompute(1,1,1);

### Related information 

* Win 10 pro Latest Build
* Nvidia 1080 with Drivers 441.41
* Native Backend
* OpenTK 3.1.0 from Nuget
* .Net Framework 4.6
* No workarounds currently available that I have found.


### Purpose of this PR

Co-operative work with @jvbsl and @realvictorprm to improve the OpenGL bindings generator.

This mostly includes a general cleanup and a new tool to diff our legacy API against the current one.