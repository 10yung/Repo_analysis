```
function Child() {
  Parent.call(this);
  this.name = 'child';
}

Child.prototype = Parent.prototype;
Child.prototype.constructor = Child;
```

I think the line Child.prototype = Parent.prototype should be **Child.prototype = Object.create(Parent.prototype);**
In the comparison table, the English and Chinese versions are not consistent for cookie initiator.

- The [English version](https://github.com/yangshun/front-end-interview-handbook/blob/master/questions/html-questions.md#describe-the-difference-between-a-cookie-sessionstorage-and-localstorage) says the cookie initiator can be client or server.
- The [Chinese version](https://github.com/yangshun/front-end-interview-handbook/blob/master/Translations/Chinese/questions/html-questions.md#%E8%AF%B7%E6%8F%8F%E8%BF%B0cookiesessionstorage%E5%92%8Clocalstorage%E7%9A%84%E5%8C%BA%E5%88%AB) says the cookie initiator can be server.
When a property is accessed on an object and if the property is not found on that object, the JavaScript engine should looks at the object's **\_\_proto\_\_**(different browser has their own implement) .Or, looks at the prototype of its constructor.

<!--
We typically do not accept submissions for new questions. This is because the [original questions repository](https://github.com/h5bp/Front-end-Developer-Interview-Questions) has been curated by a team of industry professionals and we use it as ground truth and keep our answers in sync with the questions/answers as much as possible. If you are keen to add a question/answer, firstly try to submit an issue/pull request to that repository, once your question is merged, you can then make a pull request with your answers to this repository.

You are welcome to make improvements to existing answers and/or answer unanswered questions. Try to add a list of references you used when arriving at the answers or any supplementary material that might be useful. This would be helpful for readers who would like to go further in-depth into the answer.
-->

Since the HTML5 specification it is no longer recommended to include the optional `<head>` tag.

https://google.github.io/styleguide/htmlcssguide.html#Optional_Tags

The body tag is also not always required.
https://html.spec.whatwg.org/multipage/syntax.html#syntax-tag-omission

Including both of these tags just increase the amount the browser must parse before rendering the page. It also increase the payload size.

Providing detailed explanation of higher order functions especially reduce().
Knowing more about how rendering happens is very important. With the latest JS frameworks, it has become very vague for new developers to know what is happening in the HTML world as they generate HTML in JS using JSX. I felt these questions would definitely introduce certain topics that they can read on at their own pace.

https://github.com/yangshun/front-end-interview-handbook/pull/174
<!--
We typically do not accept submissions for new questions. This is because the [original questions repository](https://github.com/h5bp/Front-end-Developer-Interview-Questions) has been curated by a team of industry professionals and we use it as ground truth and keep our answers in sync with the questions/answers as much as possible. If you are keen to add a question/answer, firstly try to submit an issue/pull request to that repository, once your question is merged, you can then make a pull request with your answers to this repository.

You are welcome to make improvements to existing answers and/or answer unanswered questions. Try to add a list of references you used when arriving at the answers or any supplementary material that might be useful. This would be helpful for readers who would like to go further in-depth into the answer.
-->

The examples for an answer is incorrect:
https://github.com/yangshun/front-end-interview-handbook/blob/master/questions/javascript-questions.md#explain-hoisting

Believe it or not, variables declared using `let` or `const` are hoisted, their namespace gets hoisted however they do not get declared until the interpreter reaches the line of code on which the declaration happens. To demonstrate this:

```javascript
var a = "foo";
function proofOfHoisting(){
  console.log(a);
  let a = "bar";
}
```

If hoisting was to not be a thing for `let` and/or `const` then running this function would actually log `foo`, however it does not, it gives a reference error because the inner variable is hoisted, but not declared, however because of hoisting the outer variable is not visible.
Hi guys, how are you?

I would like to know how is the translation to brazilian portuguese going?
I saw some issues about it, nothing more.

Could I start a translation?
It is reasonable to answer this question only regard non-replaced elements, since for replaced elements, display inline or inline-block are actually (almost?) the same. But without mentioned of replaced elements, its answer is a bit misleading, somehow.
In CSS section, the answer says "A BFC is an HTML box that satisfies at least one of the following conditions: ... The value of display is table-cell, table-caption, inline-block, flex, or inline-flex."

display flex create a new **flex formatting context**, not **block formatting context**. Only flex items (its children) create new BFC.