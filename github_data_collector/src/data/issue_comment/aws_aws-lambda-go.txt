According to the documentation at https://docs.aws.amazon.com/cognito/latest/developerguide/user-pool-lambda-post-confirmation.html, there should be a clientMetadata field on the request for the Post Confirmation Lambda Trigger. However, in the types in https://github.com/aws/aws-lambda-go/blob/master/events/cognito.go, there is no clientMetadata field on the corresponding type. When I add that field and deploy, I see that I'm able to access that data when it's passed in a request.

I'm down to open a little PR to add this, but I wanted to make sure it had the green light from project maintainers first. ðŸ˜„ 
*Description of changes:*
Add [goreleaser](https://github.com/goreleaser/goreleaser) to manage the release of new versions of the project.

The only 'problem' I found was related with the build part. It's injecting default ldflags. We're not using those flags, so I don't think that we gonna have any problem with that. This behaviour can be checked by running this command: `goreleaser release --rm-dist --snapshot --debug`:

```go build -trimpath -ldflags=-s -w -X main.version=v1.13.2-SNAPSHOT-072cade -X main.commit=072cadec8de74ff48a679ccc26ebfe7e4b22713d -X main.date=2019-11-20T18:45:04Z -X main.builtBy=goreleaser -o ...```

Output:
```
 âžœ make release
 â€¢ releasing using goreleaser 0.122.0...
   â€¢ loading config file       file=.goreleaser.yml
   â€¢ RUNNING BEFORE HOOKS
   â€¢ LOADING ENVIRONMENT VARIABLES
      â€¢ pipe skipped              error=publishing is disabled
   â€¢ GETTING AND VALIDATING GIT STATE
      â€¢ releasing v1.13.2, commit 072cadec8de74ff48a679ccc26ebfe7e4b22713d
      â€¢ pipe skipped              error=disabled during snapshot mode
   â€¢ PARSING TAG
   â€¢ SETTING DEFAULTS
      â€¢ LOADING ENVIRONMENT VARIABLES
      â€¢ SNAPSHOTING
      â€¢ GITHUB/GITLAB/GITEA RELEASES
      â€¢ PROJECT NAME
      â€¢ BUILDING BINARIES
      â€¢ ARCHIVES
      â€¢ LINUX PACKAGES WITH NFPM
      â€¢ SNAPCRAFT PACKAGES
      â€¢ CALCULATING CHECKSUMS
      â€¢ SIGNING ARTIFACTS
      â€¢ DOCKER IMAGES
      â€¢ ARTIFACTORY
      â€¢ S3
      â€¢ BLOB
      â€¢ HOMEBREW TAP FORMULA
         â€¢ optimistically guessing `brew[0].installs`, double check
      â€¢ SCOOP MANIFEST
   â€¢ SNAPSHOTING
   â€¢ CHECKING ./DIST
      â€¢ --rm-dist is set, cleaning it up
   â€¢ WRITING EFFECTIVE CONFIG FILE
      â€¢ writing                   config=dist/config.yaml
   â€¢ GENERATING CHANGELOG
      â€¢ pipe skipped              error=not available for snapshots
   â€¢ BUILDING BINARIES
      â€¢ building                  binary=dist/build-lambda-zip_windows_386/cmd/build-lambda-zip/build-lambda-zip.exe
      â€¢ building                  binary=dist/build-lambda-zip_darwin_amd64/cmd/build-lambda-zip/build-lambda-zip
      â€¢ building                  binary=dist/build-lambda-zip_darwin_386/cmd/build-lambda-zip/build-lambda-zip
      â€¢ building                  binary=dist/build-lambda-zip_windows_amd64/cmd/build-lambda-zip/build-lambda-zip.exe
      â€¢ building                  binary=dist/build-lambda-zip_linux_amd64/cmd/build-lambda-zip/build-lambda-zip
      â€¢ building                  binary=dist/build-lambda-zip_linux_386/cmd/build-lambda-zip/build-lambda-zip
   â€¢ ARCHIVES
      â€¢ creating                  archive=dist/aws-lambda-go_v1.13.2-SNAPSHOT-072cade_windows_386.zip
      â€¢ creating                  archive=dist/aws-lambda-go_v1.13.2-SNAPSHOT-072cade_linux_386.tar.gz
      â€¢ creating                  archive=dist/aws-lambda-go_v1.13.2-SNAPSHOT-072cade_darwin_386.tar.gz
      â€¢ creating                  archive=dist/aws-lambda-go_v1.13.2-SNAPSHOT-072cade_darwin_amd64.tar.gz
      â€¢ creating                  archive=dist/aws-lambda-go_v1.13.2-SNAPSHOT-072cade_windows_amd64.zip
      â€¢ creating                  archive=dist/aws-lambda-go_v1.13.2-SNAPSHOT-072cade_linux_amd64.tar.gz
   â€¢ LINUX PACKAGES WITH NFPM
      â€¢ pipe skipped              error=no output formats configured
   â€¢ SNAPCRAFT PACKAGES
      â€¢ pipe skipped              error=no summary nor description were provided
   â€¢ CALCULATING CHECKSUMS
      â€¢ checksumming              file=aws-lambda-go_v1.13.2-SNAPSHOT-072cade_linux_amd64.tar.gz
      â€¢ checksumming              file=aws-lambda-go_v1.13.2-SNAPSHOT-072cade_darwin_386.tar.gz
      â€¢ checksumming              file=aws-lambda-go_v1.13.2-SNAPSHOT-072cade_windows_386.zip
      â€¢ checksumming              file=aws-lambda-go_v1.13.2-SNAPSHOT-072cade_linux_386.tar.gz
      â€¢ checksumming              file=aws-lambda-go_v1.13.2-SNAPSHOT-072cade_darwin_amd64.tar.gz
      â€¢ checksumming              file=aws-lambda-go_v1.13.2-SNAPSHOT-072cade_windows_amd64.zip
   â€¢ SIGNING ARTIFACTS
      â€¢ pipe skipped              error=artifact signing is disabled
   â€¢ DOCKER IMAGES
      â€¢ pipe skipped              error=docker section is not configured
   â€¢ PUBLISHING
      â€¢ pipe skipped              error=publishing is disabled
   â€¢ release succeeded after 2.71s
```

[Instructions](https://goreleaser.com/install/) to install goreleaser.

--- 
By submitting this pull request, I confirm that you can use, modify, copy, and redistribute this contribution, under the terms of your choice.

Hi guys,

Would it be possible to add a line to the header stating which license the file is covered under?
Thank you,

*Issue #, if available:*

#246 

*Description of changes:*

Implement CodePipeline Events from the official documentation: 
* https://docs.aws.amazon.com/AmazonCloudWatch/latest/events/EventTypes.html#codepipeline_event_type

**Note:** this includes code from #245 as it is required to implement this properly as noted in #244

By submitting this pull request, I confirm that you can use, modify, copy, and redistribute this contribution, under the terms of your choice.

CodePipelineEvent is not implemented correctly yet (incorrect use explained in #244)

**Describe the solution you'd like**

Implemented according to documentation: 
* https://docs.aws.amazon.com/AmazonCloudWatch/latest/events/EventTypes.html#codepipeline_event_type

**Additional context**

Depends on a fix to #244 - Assuming the approach in #245 is taken.

**Is your feature request related to a problem? Please describe.**

`CodePipelineEvent` seems to be hardcoded as a `CodePipelineJob`
- https://github.com/aws/aws-lambda-go/blob/master/events/codepipeline_job.go#L6-L8

This incorrectly makes CodePipeline event unusable for its actual events.

[CodePipelineEvent documentation](CodePipelineEvent)

**Describe the solution you'd like**

I would like to move the current `CodePipelineEvent` into its own `CodePipelineJobEvent` as it seems to be seperate then the documented CodePipelineEvents

**Describe alternatives you've considered**

Considered just leaving it as is and creating `CodePipelineEvent` under some new name like `ActualCodePipelineEvent` but I think this is one of those instances where it would be better to just make the change.

**Additional context**

`Breaking Change`

#237 described a problem deleting resources on rollback. If merged, we should re-open #107 which describes a visibility problem on custom resource creation failures.

Remove DialogAction from LexEvent according to https://docs.aws.amazon.com/lex/latest/dg/lambda-input-response-format.html#using-lambda-input-event-format and align tests with LexResponse model.

**Is your feature request related to a problem? Please describe.**
Whenever a lambda backed custom resource creation fails, "github.com/aws/aws-lambda-go/cfn" returns a **physicalResourceID** to CloudFormation which doesn't exist. Then when CloudFormation tries to DELETE non-existent resource it fails. I have to manually skip the deletion of that particular custom resource to delete the Stack.

**Describe the solution you'd like**
Custom CloudFormation Resource should be able to be deleted like other normal Resources even though the CREATE event was not successful


**Additional context**

####### Here My Custom Resource is returning some ID when failed to create
<img width="906" alt="Screen Shot 2019-09-24 at 11 24 34 AM" src="https://user-images.githubusercontent.com/8892649/65484243-851e0380-debe-11e9-8c62-553779cb9f92.png">

####### Here AWS Security Group returning nothing when failed to create

<img width="906" alt="Screen Shot 2019-09-24 at 11 29 49 AM" src="https://user-images.githubusercontent.com/8892649/65484498-f1990280-debe-11e9-9199-484e2a60c013.png">

###### Related PR
https://github.com/remind101/empire/issues/918

Other language runtimes in Lambda provide X-Ray Trace information through the `_X_AMZN_TRACE_ID` environment variable. Recently this trace information also started to be appended to the Cloudwatch logs for each of the invocations as in the below:

![image](https://user-images.githubusercontent.com/16473976/65144154-5536b200-da1f-11e9-91fa-b60b56168b8e.png)

Even though in the other runtimes(Python, Node.js, etc.) the trace information provided through the environment variable and through the Cloudwatch logs seems to be consistent, this is not the case for the Go.

Following lambda function can be used to reproduce the issue: 
```go
package main

import (
	"context"
	"fmt"
	"os"

	"github.com/aws/aws-lambda-go/lambda"
)

type myEvent struct {
	ID string `json:"id"`
}

func handler(ctx context.Context, event myEvent) (string, error) {
	fmt.Println(os.Getenv("_X_AMZN_TRACE_ID"))
	fmt.Println(ctx.Value("x-amzn-trace-id"))

	return "Hello Æ›!", nil
}

func main() {
	lambda.Start(handler)
}
```

When I run the above lambda function, I got the values below:
![image](https://user-images.githubusercontent.com/16473976/65145152-857f5000-da21-11e9-9366-3e9395885696.png)

Here the values in the rectangle 2 and 3 are consistent as expected. However, the value provided by the environment variable(rectangle 1) does not seem to be correct.
