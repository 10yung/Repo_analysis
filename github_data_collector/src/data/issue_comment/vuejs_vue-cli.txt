See https://github.com/benmosher/eslint-plugin-import/pull/1591 and https://github.com/benmosher/eslint-plugin-import/pull/1602

As far as I understand, `createRequire` is the only semantically correct way to resolve modules from a different context.

**What kind of change does this PR introduce?** (check at least one)

- [ ] Bugfix
- [ ] Feature
- [ ] Code style update
- [x] Refactor
- [ ] Docs
- [ ] Underlying tools
- [ ] Other, please describe:

<!--
Note:
When submitting documentation PRs, please target the `master` branch (https://cli.vuejs.org) or `next` branch (https://next.cli.vuejs.org)
When submitting coding PRs, please target the `dev` branch.
-->

**Does this PR introduce a breaking change?** (check one)

- [ ] Yes
- [x] No

**Other information:**

This PR contains several features, but they are all to solve the `vue upgrade` usability problem in complex environments, so I put them into a single PR.

1. I refactored the `getInstalledVersion` function to use the `loadModule` utility, this is to support monorepo.
2. `vue upgrade --from` option can be used as an escape hatch if the user forgets or doesn't want to run `npm install` before upgrading, or if even `loadModule` failed to locate the installed plugin.
3. `vue migrate --from` is for those who previously failed to run `vue upgrade` and then upgraded the plugin version anyway, they might still want to benefit from the automated migration script. Or, because we previously used `^` version range in the templates, users may have installed the latest plugin unintentionally; in this case, if they want to automatically migrate to the latest template setup, they can use this command.
4. `resolveFrom` option is now respected in all these commands.

TODO: these changes haven't been thoroughly tested yet.

**What kind of change does this PR introduce?** (check at least one)

- [x] Bugfix
- [x] Feature
- [ ] Code style update
- [ ] Refactor
- [ ] Docs
- [ ] Underlying tools
- [ ] Other, please describe:

**Does this PR introduce a breaking change?** (check one)

- [ ] Yes
- [x] No

**Other information:**

<!-- Please don't delete this template -->

<!-- PULL REQUEST TEMPLATE -->
<!-- (Update "[ ]" to "[x]" to check a box) -->

**What kind of change does this PR introduce?** (check at least one)

- [x] Bugfix
- [ ] Feature
- [ ] Code style update
- [ ] Refactor
- [x] Docs
- [ ] Underlying tools
- [ ] Other, please describe:

<!--
Note:
When submitting documentation PRs, please target the `master` branch (https://cli.vuejs.org) or `next` branch (https://next.cli.vuejs.org)
When submitting coding PRs, please target the `dev` branch.
-->

**Does this PR introduce a breaking change?** (check one)

- [ ] Yes
- [x] No

**Other information:**

This PR is a bug fix which occure when you specify an URL inside the config's manifestPath option.

The bug is not blocking the `vue-cli-service build` command, but it throws a misleading error because it attemps to create a directory for the manifest, which is impossible when it is a full URL.
<!-- Please don't delete this template -->

<!-- PULL REQUEST TEMPLATE -->
<!-- (Update "[ ]" to "[x]" to check a box) -->

**What kind of change does this PR introduce?** (check at least one)

- [ ] Bugfix
- [x] Feature
- [ ] Code style update
- [ ] Refactor
- [ ] Docs
- [ ] Underlying tools
- [ ] Other, please describe:

<!--
Note:
When submitting documentation PRs, please target the `master` branch (https://cli.vuejs.org) or `next` branch (https://next.cli.vuejs.org)
When submitting coding PRs, please target the `dev` branch.
-->

**Does this PR introduce a breaking change?** (check one)

- [ ] Yes
- [x] No

**Other information:**
I think it would be useful to be able to ignore certain icons and not have the link/meta tags link to a missing file.
### Version
4.1.2

### Reproduction link
[https://github.com/AlexandreBonaventure/ts-monorepo-repro](https://github.com/AlexandreBonaventure/ts-monorepo-repro)





### Environment info
```
-
```


### Steps to reproduce
I know this not strictly a vue-cli bug but in a monorepo setup (using yarn workspaces), I am unable to pin a specific version of typescript because there is seemingly no way to provide a configuration to explicitly do so. Basically, here we have to rely on node module resolution and package manager which is not deterministic.

*Scenario 1: bare workspace setup*
```
|_ node_modules
  |_ @vue
  |_ ts-loader
  |_ typescript@3.7 <------ this typescript will always be used when compiling repro1 AND repro2
|_ apps
  |_ repro1 (requires typescript@3.7)
  |_ repro2 (requires typescript@3.5)
    |_ node_modules/typescript@3.5 <-- this one should be used but because of @vue packages being hoisted up in the root, it won't
```

*Scenario 2: using nohoist option*
```
|_ node_modules
|_ apps
  |_ repro1 (requires typescript@3.7)
  |_ repro2 (requires typescript@3.5)
    |_ node_modules
        |_ @vue
           |_cli-plugin-typescript
              |_ node_modules
                |_ typescript@3.7 <------ this typescript will be used by ts-loader is coming from devDepedencies of cli-plugin-typescript 
                |_ ts-loader
       |_ typescript@3.5
```

### What is expected?
Ability to have control on using a typescript version specifically for each project

### What is actually happening?
Difficult to do so

---
possible solutions could be : 
- plugin option to provide typescript binaries by ourselves
- remove typescript devDepedencies in cli-plugin-typescript so we can use the yarn `nohoist` option

<!-- generated by vue-issues. DO NOT REMOVE -->
TODO:
- Tests (would like to open another PR to make the migrator easier to test first)
- Documentation? Not sure where to put it.

**What kind of change does this PR introduce?** (check at least one)

- [ ] Bugfix
- [x] Feature
- [ ] Code style update
- [ ] Refactor
- [ ] Docs
- [ ] Underlying tools
- [ ] Other, please describe:

<!--
Note:
When submitting documentation PRs, please target the `master` branch (https://cli.vuejs.org) or `next` branch (https://next.cli.vuejs.org)
When submitting coding PRs, please target the `dev` branch.
-->

**Does this PR introduce a breaking change?** (check one)

- [ ] Yes
- [x] No

**Other information:**

### Version
4.1.1


### Environment info
```
vue cli 4.1.1
node 12.13.0
```


### Steps to reproduce
自定义插件 `vue-cli-plugin-i18n`，`vue-cli-plugin-svg-icon`，其中`i18n`插件依赖于`svg-icon`插件。
`i18n`配置如下：
```
// preset.json
{
  "plugins": {
    "vue-cli-plugin-svg-icon": {}
  }
}
// generator/index.js
module.exports = (api, options = {}) => {
  api.injectImports(api.entryFile, `import i18n from './i18n/i18n'`)
  api.injectRootOptions(api.entryFile, 'i18n')

  api.extendPackage({
    dependencies: {
      "vue-cli-plugin-svg-icon": "~0.1.13"
    }
  })

  api.render('./template')
}
```
1. 安装`i18n`插件，`vue add i18n`
2. 自动安装`svg-icon`插件（只是以组件方式安装），但是没有执行 `generate`，即没有将插件的`template`渲染到项目里

### What is expected?
希望自动安装依赖的插件

### What is actually happening?
希望以插件的方式安装依赖的插件，而不是以组件的方式安装插件，即没有`invoke`

<!-- generated by vue-issues. DO NOT REMOVE -->
### Version
4.1.2

### Environment info
```
  System:
    OS: Windows 10 10.0.18362
    CPU: (8) x64 Intel(R) Core(TM) i7-6700HQ CPU @ 2.60GHz
  Binaries:
    Node: 12.13.0 - C:\Program Files\nodejs\node.EXE
    Yarn: 1.3.2 - C:\Program Files (x86)\Yarn\bin\yarn.CMD
    npm: 6.12.0 - C:\Program Files\nodejs\npm.CMD
  Browsers:
    Edge: 44.18362.449.0
  npmPackages:
    @fortawesome/vue-fontawesome: ^0.1.9 => 0.1.9
    @vue/babel-helper-vue-jsx-merge-props:  1.0.0
    @vue/babel-plugin-transform-vue-jsx:  1.1.2
    @vue/babel-preset-app:  4.1.2
    @vue/babel-preset-jsx:  1.1.2
    @vue/babel-sugar-functional-vue:  1.1.2
    @vue/babel-sugar-inject-h:  1.1.2
    @vue/babel-sugar-v-model:  1.1.2
    @vue/babel-sugar-v-on:  1.1.2
    @vue/cli-overlay:  4.1.2
    @vue/cli-plugin-babel: ^4.1.0 => 4.1.2
    @vue/cli-plugin-e2e-cypress: ^4.1.0 => 4.1.2
    @vue/cli-plugin-eslint: ^4.1.0 => 4.1.2
    @vue/cli-plugin-router:  4.1.2
    @vue/cli-plugin-typescript: ^4.1.0 => 4.1.2
    @vue/cli-plugin-unit-mocha: ^4.1.0 => 4.1.2
    @vue/cli-plugin-vuex: ^4.1.0 => 4.1.2
    @vue/cli-service: ^4.1.0 => 4.1.2
    @vue/cli-shared-utils:  4.1.2
    @vue/component-compiler-utils:  3.1.0
    @vue/eslint-config-prettier: ^5.0.0 => 5.1.0
    @vue/eslint-config-typescript: ^4.0.0 => 4.0.0
    @vue/preload-webpack-plugin:  1.1.1
    @vue/test-utils: 1.0.0-beta.29 => 1.0.0-beta.29
    @vue/web-component-wrapper:  1.2.0
    eslint-plugin-vue: ^5.0.0 => 5.2.3
    typescript: ~3.5.3 => 3.5.3
    vue: ^2.6.10 => 2.6.11
    vue-class-component: ^7.0.2 => 7.1.0
    vue-cli-webpack:  1.0.0
    vue-eslint-parser:  5.0.0
    vue-hot-reload-api:  2.3.4
    vue-i18n: ^8.15.3 => 8.15.3
    vue-loader:  15.8.3
    vue-property-decorator: ^8.3.0 => 8.3.0
    vue-style-loader:  4.1.2
    vue-template-compiler: ^2.6.10 => 2.6.11
    vue-template-es2015-compiler:  1.9.1
    vue2-perfect-scrollbar: ^1.3.0 => 1.3.0
    vuex: ^3.1.2 => 3.1.2
  npmGlobalPackages:
    @vue/cli: Not Found
```

### Steps to reproduce
Create a Vue application which makes use of document.getSelection(). Generate this to a webcomponent.

### What is expected?
I get the current getSelection() so i can use it to save ranges for contenteditable input field.

### What is actually happening?
getSelections is not giving the right response.

---
I try to get my vue application in a web component. I have generated it with vue cli. I have created a emoji picker in the app. This uses a contenteditable div as input field. I save the range from document.getSelection(). But this not working properly in shadowDom. I read somewere that I can use getSelection() on the shadowRoot. But I cannot find the shadowroot in my app.

My question is: Where can I find shadowRoot of a Vue CLI generated webcomponent.

So I can use getSelection on it.

Thanks

<!-- generated by vue-issues. DO NOT REMOVE -->
### Version
4.1.2

### Reproduction link
[https://github.com/hawezo/minimal-content-base-issue-reproduction](https://github.com/hawezo/minimal-content-base-issue-reproduction)





### Environment info
```
System:
    OS: Windows 10 10.0.18363
    CPU: (6) x64 Intel(R) Core(TM) i5-8500 CPU @ 3.00GHz
  Binaries:
    Node: 12.5.0 - d:\programmes\laragon\bin\nodejs\node-v12\node.EXE
    Yarn: 1.19.2 - D:\Programmes\Laragon\bin\yarn\bin\yarn.CMD
    npm: 6.9.0 - d:\programmes\laragon\bin\nodejs\node-v12\npm.CMD
  Browsers:
    Edge: 44.18362.449.0
  npmPackages:
    @vue/babel-helper-vue-jsx-merge-props:  1.0.0
    @vue/babel-plugin-transform-vue-jsx:  1.1.2
    @vue/babel-preset-app:  4.1.2
    @vue/babel-preset-jsx:  1.1.2
    @vue/babel-sugar-functional-vue:  1.1.2
    @vue/babel-sugar-inject-h:  1.1.2
    @vue/babel-sugar-v-model:  1.1.2
    @vue/babel-sugar-v-on:  1.1.2
    @vue/cli-overlay:  4.1.2
    @vue/cli-plugin-babel: ^4.1.2 => 4.1.2
    @vue/cli-plugin-router:  4.1.2
    @vue/cli-plugin-typescript: ^4.1.2 => 4.1.2
    @vue/cli-plugin-vuex:  4.1.2
    @vue/cli-service: ^4.1.2 => 4.1.2
    @vue/cli-shared-utils:  4.1.2
    @vue/component-compiler-utils:  3.1.1
    @vue/preload-webpack-plugin:  1.1.1
    @vue/web-component-wrapper:  1.2.0
    typescript: ^3.7.4 => 3.7.4
    vue: ^2.6.10 => 2.6.11
    vue-hot-reload-api:  2.3.4
    vue-loader:  15.8.3
    vue-style-loader:  4.1.2
    vue-template-compiler: ^2.6.10 => 2.6.11
    vue-template-es2015-compiler:  1.9.1
  npmGlobalPackages:
    @vue/cli: Not Found
```


### Steps to reproduce
1. Initialize a vue-cli application.
2. Move /src and /public to a folder, in this case /playground.
3. Create a `vue.config.js` according to the [documentation](https://cli.vuejs.org/config/#devserver) (which leads to [this one](https://webpack.js.org/configuration/dev-server/)).
4. `serve` the application and notice that the `index.html` is not the same (check the meta title or whatever).

### What is expected?
The `contentBase` parameter should be taken into account so the new `public` folder location is served.

### What is actually happening?
The new `public` folder location is not served. Instead, the server is looking for a `/public` folder at the root of the project.

<!-- generated by vue-issues. DO NOT REMOVE -->
### Version
4.1.2

### Environment info
```
macOS 10.15
node v10.16.0 
npm v6.11.3

```

### Steps to reproduce
vue serve

### What is expected?
normal

### What is actually happening?
Unable to start Vue serve normally
 Error: Failed to load plugin 'vue' declared in 'BaseConfig':  Cannot find module 'eslint-plugin-vue'

<!-- generated by vue-issues. DO NOT REMOVE -->