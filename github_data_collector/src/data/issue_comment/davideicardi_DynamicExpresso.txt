When parsing an expression containing a type of null enum, an error occurs. I tried to fix it.

It would be great if the library supported `nameof` syntax

`Parser.cs` contains 2237 lines, so I tried to split it into three files/classes:

- `Parser.cs` (1307 lines) - methods that use and change the state of the parser
- `Expressions.cs` (663 lines) - methods that create, change and use expressions
- `Types.cs` (287 lines) - methods that get information about types

What do you think about this?
Accessing a property of an anonymous class fails when going through a dynamic object:

> Microsoft.CSharp.RuntimeBinder.RuntimeBinderException : 'object' does not contain a definition for 'Foo'



```
[Test]
public void Get_Property_of_a_nested_anonymous()
{
    dynamic dyn = new ExpandoObject();
    dyn.Sub = new { Foo = "bar"};
    var interpreter = new Interpreter()SetVariable("dyn", (object)dyn);
    Assert.AreEqual(dyn.Sub.Foo, interpreter.Eval("dyn.Sub.Foo"));
}
```

It works fine when the class is named: `dyn.Sub = new MyClass() { Foo = "bar"};` 
It also works if we introduce an intermediate variable:
```
    dynamic dyn = new ExpandoObject();
    dyn.Sub = new { Foo = "bar"};
    var interpreter = new Interpreter().SetVariable("dyn", dyn);
    interpreter.SetVariable("sub", interpreter.Eval("dyn.Sub"));
    Assert.AreEqual(dyn.Sub.Foo, interpreter.Eval("sub.Foo"));

```

Aslo discussed on stack overflow: https://stackoverflow.com/questions/53040955/how-can-i-use-dynamic-variables-with-anonymous-types
When trying to access vlues of an array (or dictionary) inside a dynamic object, I get the error:

DynamicExpresso.Exceptions.ParseException : No applicable indexer exists in type 'Object' (at index 7).

```
    [Test]
    public void Get_value_of_a_nested_array()
   {
       dynamic dyn = new ExpandoObject();
       dyn.Sub = new int[] {42};
       var interpreter = new Interpreter().SetVariable("dyn", (object)dyn);
       Assert.AreEqual(dyn.Sub[0], interpreter.Eval("dyn.Sub[0]"));
}
```
 This is also mentioned on Stack Overflow, https://stackoverflow.com/questions/53040955/how-can-i-use-dynamic-variables-with-anonymous-types
I am working with dynamic objects and so far managed the work around for objects but it is difficult to work with dynamically created collections.

Ex: 
Type dynamicListType = typeof(List<>).MakeGenericType(AnotherDynamicInferredType)
var dynamicList = Activator.CreateInstance(dynamicListType);

Use case:

string expression = "object.Source == \"Productions\"";
var dynamicWhere = interpreter.ParseAsDelegate<Func<dynamicType, bool>>(expression, "object");
var result3 = (dynamicList).Where(dynamicWhere);

What I want:

Some way for ParseAsDelegate to figure out {AnotherDynamicInferredType}, {dynamicListType} and {dynamicList}

I've added the option to use new resource files. As my project deals with the Brazilian Portuguese language, we need to extend the library so that it is possible to configure which language the exceptions will be displayed, if there is a resource for it.

We do it by implement a Helper and did some overloads onto the main methods from the Parser. We also added a new resource, with all the translations needed for Brazilian Portuguese.
Please, support C# verbatim strings:

Assert.AreEqual(@"Hello, world!", target.Eval(@"@""Hello, world!"""));
My expression has integer numbers operating with nullable decimals. In this case, an expression compatibility problem happens when I parse a simple multiplication: x * 100, where x is a nullable decimal parameter.

Then, I needed to extend the conversion behavior to enable custom number conversions that can be passed by the developer through parameters. 

After this implementation, I solved my problem writing a custom IntegerConverter in my project. This custom IntegerConverter converts all numbers to decimal. 
