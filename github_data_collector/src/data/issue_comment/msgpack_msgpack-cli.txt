Hi,

I am wondering whether it is possible to serialize and deserialize a list member is a class?  For example, in the below scenario, serialization of the Customer object seems working, however, when I deserialize it, all the info inside CustomerOrders are lost.  How should I fix this problem?  Thank you.

public class Order
{
   int OrderId{get;set;}
   string OrderType{get;set;}
}

public class OrderList
{
   public List<Order> Orders{get;set;}
}

public class Customer
{
   public int CustomerId{get;set;}
   public OrderList CustomerOrders{get;set;}
}
if I use il2cpp to build my app,the app throw this exception when i used msgpack
### Steps to reproduce

1. Create an iOS App in Visual Studio for Mac.
2. Add a package reference to MsgPack.Cli.
3. Add the following model:
```c#
    public class ExampleModel {
        [MessagePackMember(0, Name = "examples")]
        public string Example { get; set; }
    }
```
4. Add the following code:
```c#
    var x = MessagePackSerializer.Get<ExampleModel>();
```

### Results

A crash with:
```
System.NullReferenceException: Object reference not set to an instance of an object
  at System.Reflection.CustomAttributeNamedArgument.get_MemberInfo () [0x00030] in /Users/builder/jenkins/workspace/xamarin-macios/xamarin-macios/external/mono/external/corert/src/System.Private.CoreLib/src/System/Reflection/CustomAttributeNamedArgument.cs:80 
  at MsgPack.ReflectionAbstractions.GetMemberName (System.Reflection.CustomAttributeNamedArgument source) [0x00000] in <78757c4a7a9d40249bcf74135a5d8e10>:0 
  at MsgPack.Serialization.SerializationTarget.GetAttributeProperty (System.String attributeName, System.Reflection.CustomAttributeData attribute, System.String propertyName) [0x00025] in <78757c4a7a9d40249bcf74135a5d8e10>:0 
  at MsgPack.Serialization.SerializationTarget+<>c.<GetAnnotatedMembersWithDuplicationDetection>b__38_1 (System.Reflection.MemberInfo member) [0x0003d] in <78757c4a7a9d40249bcf74135a5d8e10>:0 
  at (wrapper delegate-invoke) System.Func`2[System.Reflection.MemberInfo,MsgPack.Serialization.SerializingMember].invoke_TResult_T(System.Reflection.MemberInfo)
  at System.Linq.Enumerable+SelectArrayIterator`2[TSource,TResult].ToArray () [0x00012] in /Users/builder/jenkins/workspace/xamarin-macios/xamarin-macios/external/mono/external/corefx/src/System.Linq/src/System/Linq/Select.cs:240 
  at System.Linq.Buffer`1[TElement]..ctor (System.Collections.Generic.IEnumerable`1[T] source) [0x0000a] in /Users/builder/jenkins/workspace/xamarin-macios/xamarin-macios/external/mono/external/corefx/src/System.Linq/src/System/Linq/Buffer.cs:33 
  at System.Linq.OrderedEnumerable`1[TElement].ToArray () [0x00000] in /Users/builder/jenkins/workspace/xamarin-macios/xamarin-macios/external/mono/external/corefx/src/System.Linq/src/System/Linq/OrderedEnumerable.cs:34 
  at System.Linq.Enumerable.ToArray[TSource] (System.Collections.Generic.IEnumerable`1[T] source) [0x0000e] in /Users/builder/jenkins/workspace/xamarin-macios/xamarin-macios/external/mono/external/corefx/src/System.Linq/src/System/Linq/ToCollection.cs:18 
  at MsgPack.Serialization.SerializationTarget.Prepare (MsgPack.Serialization.SerializationContext context, System.Type targetType) [0x00043] in <78757c4a7a9d40249bcf74135a5d8e10>:0 
  at MsgPack.Serialization.MessagePackSerializer.CreateReflectionInternal[T] (MsgPack.Serialization.SerializationContext context, System.Type concreteType, MsgPack.Serialization.PolymorphismSchema schema) [0x000be] in <78757c4a7a9d40249bcf74135a5d8e10>:0 
  at MsgPack.Serialization.MessagePackSerializer.CreateInternal[T] (MsgPack.Serialization.SerializationContext context, MsgPack.Serialization.PolymorphismSchema schema) [0x0009c] in <78757c4a7a9d40249bcf74135a5d8e10>:0 
  at MsgPack.Serialization.SerializationContext.GetSerializer[T] (System.Object providerParameter) [0x00109] in <78757c4a7a9d40249bcf74135a5d8e10>:0 
  at MsgPack.Serialization.MessagePackSerializer.Get[T] (MsgPack.Serialization.SerializationContext context, System.Object providerParameter) [0x0000e] in <78757c4a7a9d40249bcf74135a5d8e10>:0 
  at MsgPack.Serialization.MessagePackSerializer.Get[T] (MsgPack.Serialization.SerializationContext context) [0x00000] in <78757c4a7a9d40249bcf74135a5d8e10>:0 
  at MsgPack.Serialization.MessagePackSerializer.Get[T] () [0x00005] in <78757c4a7a9d40249bcf74135a5d8e10>:0 
  at MsgPackBugTest.AppDelegate.FinishedLaunching (UIKit.UIApplication application, Foundation.NSDictionary launchOptions) [0x00002] in /Users/jesper/Projects/MsgPackBugTest/MsgPackBugTest/AppDelegate.cs:19 
```

The crash seems to be caused by [this line](
https://github.com/msgpack/msgpack-cli/blob/15c033c252cbc86b422a43fef7ff9371a8f8c696/src/MsgPack/Serialization/SerializationTarget.cs#L486):

```c#
var property = attribute.GetNamedArguments().SingleOrDefault( a => a.GetMemberName() == propertyName );
if ( property.GetMemberName() == null )
{
	// Use default.
	return null;
}
```

The `property` type, `CustomAttributeNamedArgument`, is a struct, and when the named argument can't be found (in this case, `NilImplication`), `GetMemberName()` runs on a `default(CustomAttributeNamedArgument)`.

There is a [fix existing in the codebase](https://github.com/msgpack/msgpack-cli/blob/e6b43e4f82cd529dc1dd6f2086324a32db2cbe83/src/MsgPack/ReflectionAbstractions.cs#L412) to handle this case, but because of various `#if`s being used, the version that's being used by Mono does not have this fix. It appears that [this version](https://github.com/msgpack/msgpack-cli/blob/e6b43e4f82cd529dc1dd6f2086324a32db2cbe83/src/MsgPack/ReflectionAbstractions.cs#L445) is being pulled in instead, likely due to Mono not being possible to target for NuGet packages. Inserting the same fix in the other branch would solve the issue.


### Limited workaround

This exact instance can be worked around by specifying all named arguments used in `GetAnnotatedMembersWithDuplicationDetection` on all attributes. In other words, this:
```c#
    public class ExampleModel {
        [MessagePackMember(0, Name = "examples", NilImplication = NilImplication.Null)]
        public string Example { get; set; }
    }
```
doesn't throw. However, it is tedious and if there's a named argument/property added at some point, it will likely crash in the same way. Additionally, it seems that this issue recurs all over the place where any MsgPack.Cli attribute can be used, so it's hard not to run into.


### Versions used

=== Visual Studio Community 2019 for Mac ===

Version 8.3.6 (build 4)
Installation UUID: 687b26fe-e715-4df4-ac1c-280184e1a76a
	GTK+ 2.24.23 (Raleigh theme)
	Xamarin.Mac 5.16.1.24 (d16-3 / 08809f5b)

	Package version: 604000208

=== Mono Framework MDK ===

Runtime:
	Mono 6.4.0.208 (2019-06/07c23f2ca43) (64-bit)
	Package version: 604000208

=== NuGet ===

Version: 5.3.0.6192

=== .NET Core SDK ===

SDK: /usr/local/share/dotnet/sdk/3.0.100/Sdks
SDK Versions:
	3.0.100
	3.0.100-preview8-013656
	2.2.300
	2.2.103
	2.1.505
	2.1.401
	2.1.300-preview2-008533
	2.1.300-preview1-008174
	2.1.4
	2.0.0
	2.0.0-preview2-006497
	2.0.0-preview1-005977
	1.0.1
	1.0.0-rc4-004771
	1.0.0-preview2-1-003177
	1.0.0-preview2-003121
	1.0.0-preview1-002702
MSBuild SDKs: /Library/Frameworks/Mono.framework/Versions/6.4.0/lib/mono/msbuild/Current/bin/Sdks

=== .NET Core Runtime ===

Runtime: /usr/local/share/dotnet/dotnet
Runtime Versions:
	3.0.0
	3.0.0-preview8-28405-07
	2.2.5
	2.2.1
	2.1.13
	2.1.9
	2.1.3
	2.1.0-preview2-26406-04
	2.1.0-preview1-26216-03
	2.0.5
	2.0.0
	2.0.0-preview2-25407-01
	2.0.0-preview1-002111-00
	1.1.1
	1.1.0
	1.0.4
	1.0.3
	1.0.0
	1.0.0-rc2-3002702

=== Xamarin.Profiler ===

Version: 1.6.12.29
Location: /Applications/Xamarin Profiler.app/Contents/MacOS/Xamarin Profiler

=== Updater ===

Version: 11

=== Xamarin.Android ===

Not Installed

=== Microsoft Mobile OpenJDK ===

Java SDK: Not Found

Android Designer EPL code available here:
https://github.com/xamarin/AndroidDesigner.EPL

=== Android SDK Manager ===

Version: 1.4.0.65
Hash: c33b107
Branch: remotes/origin/d16-3
Build date: 2019-10-10 12:15:44 UTC

=== Android Device Manager ===

Version: 1.2.0.116
Hash: d2b2af0
Branch: remotes/origin/d16-3
Build date: 2019-10-10 12:16:06 UTC

=== Xamarin Inspector ===

Version: 1.4.3
Hash: db27525
Branch: 1.4-release
Build date: Mon, 09 Jul 2018 21:20:18 GMT
Client compatibility: 1

=== Apple Developer Tools ===

Xcode 11.2 (15519)
Build 11B44

=== Xamarin.Mac ===

Version: 6.4.0.2 (Visual Studio Community)
Hash: e37549bc
Branch: xcode11.1
Build date: 2019-10-07 22:43:23-0400

=== Xamarin.iOS ===

Version: 13.4.0.2 (Visual Studio Community)
Hash: e37549bc
Branch: xcode11.1
Build date: 2019-10-07 22:43:23-0400

=== Xamarin Designer ===

Version: 16.3.0.247
Hash: 52eac1a9e
Branch: remotes/origin/d16-3
Build date: 2019-10-03 23:04:28 UTC

=== Build Information ===

Release ID: 803060004
Git revision: 081f7b8bbd534cb73bbfb5cff3d9aa4907396a4f
Build date: 2019-10-31 17:10:49+00
Build branch: release-8.3
Xamarin extensions: ade6d975df7634a5d81feda320a6102e5bacf309

=== Operating System ===

Mac OS X 10.15.1
Darwin 19.0.0 Darwin Kernel Version 19.0.0
    Thu Oct 17 16:17:15 PDT 2019
    root:xnu-6153.41.3~29/RELEASE_X86_64 x86_64
Hi,

When serializing a MessagePack class which has a property of type "Object" it does not retain the type when you deserialize the MessagePack class. For example, I set the Property "Value" to an Int32 number of say 16. When I deserialize the class it comes out as a byte. 
```
    [MessagePackObject]
    public class Item {

        public Item() {

        }
        [Key(0)]
        public object Value { set; get; }
    }
```
The workaround is adding something like I have below where you implement your own type Property.  Is there another better way to do this or is it working as intended?
```
    [MessagePackObject]
    public class Item {

        public Item() {

        }

        public Item(object value) {
            if (value != null) {
                if (value.GetType().IsSerializable) {
                    this.Value = value;
                    this.Type = value.GetType().ToString();
                }
            }
        }

        [Key(0)]
        public object Value { set; get; }
        [Key(1)]
        public string Type { set; get; }

        public object GetOriginalValue() {
            object val = Value;
            if (val != null) {
                val = Convert.ChangeType(val, System.Type.GetType(Type));
            }
            return val;
        }
    }
```
Hi, we want to use MessagePack in our production and ran into a problem.
Current stable version does not work with EnumMemberAttribute. 
It's important for us.
I've wrote some tests for example

```csharp
public class Tests
    {
        [Fact]
        public void Failed()
        {
            // arrange

            // act
            var firstDto = new DtoWithFirstEnum {Enum = FirstEnum.NotOk};

            var serializerForFirst = MessagePackSerializer.Get<DtoWithFirstEnum>();
            var bytes = serializerForFirst.PackSingleObject(firstDto);

            var serializerForSecond = MessagePackSerializer.Get<DtoWithSecondEnum>();
            var secondDto = serializerForSecond.UnpackSingleObject(bytes);

            // assert 
            Assert.Equal(SecondEnum.SecondValue, secondDto.Enum);
        }

        [Fact]
        public void Pass()
        {
            // arrange

            // act
            var firstDto = new DtoWithFirstEnum {Enum = FirstEnum.NotOk};

            var json = JsonConvert.SerializeObject(firstDto);

            var secondDto = JsonConvert.DeserializeObject<DtoWithSecondEnum>(json);

            // assert 
            Assert.Equal(SecondEnum.SecondValue, secondDto.Enum);
        }
    }

    [DataContract]
    public class DtoWithFirstEnum
    {
        [DataMember(Name = "enum")] public FirstEnum Enum { get; set; }
    }

    [DataContract]
    public class DtoWithSecondEnum
    {
        [DataMember(Name = "enum")] public SecondEnum Enum { get; set; }
    }

    public enum FirstEnum
    {
        [EnumMember(Value = "ok")]
        OK,

        [EnumMember(Value = "not_ok")]
        NotOk
    }

    public enum SecondEnum
    {
        [EnumMember(Value = "ok")]
        FirstValue,

        [EnumMember(Value = "not_ok")]
        SecondValue
    }
```

Looks like we can refine the EnumMessagePackSerializer class in ctor
and add new value ByEnumMember in EnumSerializationMethod

```csharp

 protected EnumMessagePackSerializer( SerializationContext ownerContext, EnumSerializationMethod serializationMethod )
			: base( ownerContext, SerializerCapabilities.PackTo | SerializerCapabilities.UnpackFrom )
		{
			if ( !typeof( TEnum ).GetIsEnum() )
			{
				throw new InvalidOperationException(
					String.Format( CultureInfo.CurrentCulture, "Type '{0}' is not enum.", typeof( TEnum ) )
				);
			}

			this._serializationMethod = serializationMethod;
			this._underlyingType = Enum.GetUnderlyingType( typeof( TEnum ) );
			var members = Enum.GetValues( typeof( TEnum ) ) as TEnum[];
			this._serializationMapping = new Dictionary<TEnum, string>( members.Length );
			this._deserializationMapping = new Dictionary<string, TEnum>( members.Length );
			foreach ( var member in members )
			{
				var enumName = serializationMethod == EnumSerializationMethod.ByEnumMember
					? GetNameFromEnumMemberAttr( member )
					: member.ToString();
				
				var asString = ownerContext.EnumSerializationOptions.SafeNameTransformer( enumName);
				this._serializationMapping[ member ] = asString;
				this._deserializationMapping[ asString ] = member;
			}
		}

```
Can you suggest a quick way to solve the problem?
Thank you.

Currently Register is a generic method, and I have a situation where I need to pass a Type to Register.
I've implemented a custom MessagePackSerializer, and when trying to deserialize my type from the byte stream, which is expected to be a Map, I get an exception.

At the point of the exception `unpacker.IsMapHeader` returns true, but trying to do `unpacker.ReadMapLength(...)` throws:
`MsgPack.MessageTypeException: Cannot convert 'map' header from type 'FixedRaw'(0xA6) in position 1.`

Hi. 
I'm using MessagePack in Unity (_not_ using IL2CPP) and also in a standalone c# application (a master server, that sends and receives objects from the (Unity-)client). 

Somehow I get this error when trying to serialize an object of class "ClientSetupRequest": 
`System.TypeLoadException: Could not load type 'MessagePack.Formatters.ClientSetupRequestFormatter1' from assembly ''.
  at MessagePack.FormatterResolverExtensions.GetFormatterWithVerify[T] (MessagePack.IFormatterResolver resolver) [0x0001b] in <9584f10ef1c54d659bd9587a0a564bad>:0 
  at MessagePack.MessagePackSerializer.Serialize[T] (T obj, MessagePack.IFormatterResolver resolver) [0x0000a] in <9584f10ef1c54d659bd9587a0a564bad>:0 
  at MessagePack.MessagePackSerializer.Serialize[T] (T obj) [0x00000] in <9584f10ef1c54d659bd9587a0a564bad>:0 
  at (wrapper dynamic-method) System.Object.lambda_method(System.Runtime.CompilerServices.Closure,object)
  at MessagePack.MessagePackSerializer+NonGeneric.Serialize (System.Type type, System.Object obj) [0x00006] in <9584f10ef1c54d659bd9587a0a564bad>:0 
  at...`

The ClientSetupRequest class looks like this: 
`using MessagePack;

[MessagePackObject]
public class ClientSetupRequest : GameNetworkEvent
{

    [Key(0)]
    public string PlayerName;
}
`

The GameNetworkEvent class is just an empty  class. 

I'm not sure but I think something the exception doesn't occur for some reason...

What's strange is that it says:
> from assembly ''.

So the assembly is empty?

I don't know which version I was using before, but I just redownloaded MessagePack (version 1.7.3.4 using nuget) and copied the .dll from the net47 folder to my Unity Project and also referencing it from my standalone c# app. 
In agreement with the previous comment, when I serialise a simple class

```csharp
public class Person
{
    public string Name { get; set; }
}
```

The initial call to `MessagePackSerializer.Get` takes several hundred milliseconds (somewhere between 350ms to 400ms) and the first call to `MessagePackSerializer.Unpack()` takes a further 30ms~ or so. 

Subsequent calls to both `MessagePackSerializer.Pack()` and `MessagePackSerializer.Unpack()` are fast.

The delay only seems to happen when the program first runs. I assume this behaviour is by-design, but is there a way to work around, or at least reduce the "slow start" behaviour?

Tested on `MSgPack.Cli v1.0.0` targeting .NET Framework 4.5.

Code to reproduce:

```csharp
using System;
using System.Diagnostics;
using System.IO;
using MsgPack.Serialization;

namespace ConsoleApp1
{
    public static class Program
    {
        static void Main()
        {
            Sw.Start();

            Console.WriteLine($"{Sw.ElapsedMilliseconds}ms");

            // create serializer
            var serializer = MessagePackSerializer.Get<Person>();

            Console.WriteLine($"{Sw.ElapsedMilliseconds}ms");

            for (var i = 0; i < 5; i++)
            {
                var msgpack = Serialise(serializer, new Person { Name = "Bob" });
                var person = Deserialise(serializer, msgpack);

                Console.WriteLine($"{Sw.ElapsedMilliseconds}ms {person.Name}");
            }

            Console.ReadLine();
        }

        static byte[] Serialise(MessagePackSerializer serializer, Person person)
        {
            using (var stream = new MemoryStream())
            {
                serializer.Pack(stream, person);
                return stream.ToArray();
            }
        }

        static Person Deserialise(MessagePackSerializer serializer, byte[] packedBytes)
        {
            using (var stream = new MemoryStream(packedBytes))
            {
                return (Person) serializer.Unpack(stream);
            }
        }

        static readonly Stopwatch Sw = new Stopwatch();
    }

    public class Person
    {
        public string Name { get; set; }
    }
}
```

Example output:

```
0ms           <- application starts, executes MessagePackSerializer.Get<Person>()
341ms         <- MessagePackSerializer.Get() returns after 341ms
374ms Bob     <- First call to MessagePackSerializer.Pack() has a slight delay
374ms Bob     <- Subsequent calls to MessagePackSerializer.Pack() complete quickly.
374ms Bob
374ms Bob
374ms Bob
```

Is there anything I can do to reduce this initial time calls to `MessagePackSerializer.Get()` take?

See also https://github.com/msgpack/msgpack-cli/issues/191

Thanks!
Currently, there are some legacy techniques for build artifact versioning, it caused release failure of 1.0.1.

We should fix build scripts to use more simple and modern matter for versioning.

* The script should take advantage git tag if its format matches to semver.
* All version related parameters should be managed in common msbuild project file which will be refered from `Directory.build.props`
    * `AssemblyFileVersion` should be handled in it.
* The script should be run without `MSBuild.exe`
* The script should be run on `pwsh`
