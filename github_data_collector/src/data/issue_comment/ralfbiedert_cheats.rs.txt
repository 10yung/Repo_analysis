This allows to keep links to external resources in a single place, while also being able to add explanatory links to almost every occurences of an expression, which helps browsing visitors.

As discussed in https://github.com/ralfbiedert/cheats.rs/pull/82

Examples:
* from Wikipedia about computer graphics: https://en.wikipedia.org/wiki/Glossary_of_computer_graphics
* from the Rust book: https://doc.rust-lang.org/1.8.0/book/glossary.html
* from the Rust reference: https://doc.rust-lang.org/reference/glossary.html
Basically  https://github.com/rust-lang/rust/issues/53593 which does not fit perfectly into the API documentation.

![HashMap](https://user-images.githubusercontent.com/391975/58480897-96970f00-815b-11e9-9308-6139789dca0c.png)
https://stackoverflow.com/questions/34733811/what-is-the-difference-between-iter-and-into-iter

An "Iteration" section could give an overview over:

Tasks:
* iterate over references: [as_ref()](https://doc.rust-lang.org/std/convert/trait.AsRef.html)
* iterate over mutable references 
* iterate and consume 

Traits/methods:
* [trait Iterator](https://doc.rust-lang.org/std/iter/trait.Iterator.html)
* [trait IterMut](https://doc.rust-lang.org/std/slice/struct.IterMut.html)
* producing an iterator:
  * [trait IntoIterator](https://doc.rust-lang.org/std/iter/trait.IntoIterator.html): `into_iter()`:
    * consumes `Self`
      * use reference as in `for x in &y` if this is not desired
    * used by [`for` loop](https://doc.rust-lang.org/std/iter/index.html#for-loops-and-intoiterator)
  * `iter()` does not consume `Self`: defined for [HashMap](https://doc.rust-lang.org/std/collections/struct.HashMap.html#method.iter), [Vec](https://doc.rust-lang.org/std/vec/struct.Vec.html#method.iter)
* consuming an iterator:
  * [trait FromIterator](https://doc.rust-lang.org/std/iter/trait.FromIterator.html)
  * resuming vs non-resuming iterators


### General 
- Survey was online from September 1, 2019 until September 30, 2019. 
- 35 people participated 
- During that period we had about 26k page visits, giving a response rate of about 1 per 750 visit.
- Average response time was 1:49 minutes, but varied heavily between 13 seconds and 21 minutes.

### Questions 

#### 1. This visit to cheats.rs ...

![visit](https://user-images.githubusercontent.com/301288/65902730-579ff100-e3bb-11e9-9f7f-822b4e87bed0.png)


#### 2. Something you came to do in particular ...

| Comment |
| --- |
| function parameters |
| I looking for a Rust cheat sheet on Google and then I find the cheats.rs as the first result |
| No. Just to see the giraffe |
| Lifetime |
| Looking for an overall syntax summary |
| github redirected me to here and glad it did |
| async/await |
| I open cheats.rs almost every time I starting work |
| Lambda captures |
|  Macros |
|  rust |
|  macro syntax |
|  how to use matches |
|  It's kind of hard to remember the `as`, `to` something for methods. |
|  Tips on async/await :) |

#### 3. This site contains 

![xx](https://user-images.githubusercontent.com/301288/65903084-122ff380-e3bc-11e9-9c56-5333f10f2d41.png)

#### 4. Anything else you want to say 


| Comment |
| --- |
| Awesome!! |
| Great page! Well structured and has just the right amount of infos on it. |
| Keep up the great work! |
| Looks great! |
| Perhaps sometimes some more examples or links to examples would be nice? |
| Great site, wish even more explanations. |
| This is a wonderful resource! It's so helpful to have all the syntactical forms summarised like this. |
| Please provide more information on rust. If there are separate cheat sheats for topics like concurrency, type system it would be best!!! |
| Very useful resource!!! I loved it from the first time I met it. I think that adding section with links to sites like "Are we X yet?" like http://arewegameyet.com , https://areweideyet.com and so on, would be very useful. |
| Recently discovered cheats.rs, and it's my new goto reference. I think it's a great complement to the Rust book. Thanks for this, and well done! The Rust community is awesome! |
| examples would be helpful |
| I wish every language had this. cheats.rs is amazing, THANK YOU! |
| The font used looks fine using the light theme - it looks crap using the dark theme sadly. |
| Very good website. Very useful |
| Maybe add something about `mut ref` in pattern matching? |

#### 5. How likely is it that you recommend cheats.rs to a friend or colleague?

- 26 supporters (rating 9 or 10)
- 7 neutral (rating 7 or 8)
- 2 detractors (rating 1 to 6)

**NPS score of 69**

Is there a better way to do this than to copy the large font CSS generated by Google?
* when is something thread-safe?
* https://rust-unofficial.github.io/too-many-lists/third-arc.html
* `std::marker::Send`, `std::marker::Sync`:
  * From https://limpet.net/mbrubeck/2019/02/07/rust-a-unique-perspective.html
    * T: Send means it's safe to access a T on a single other thread, where one thread at a time has exclusive access. A value of this type can be moved to another thread by unique ownership, or borrowed on another thread by unique reference (&mut T). A more descriptive name for this trait might be UniqueThreadSafe.
    * T: Sync means itâ€™s safe for many threads to access a T simultaneously, with each thread having shared access. Values of such types can be accessed on other threads via shared ownership or shared references (&T). A more descriptive name would be SharedThreadSafe.
  * From https://www.reddit.com/r/rust/comments/e66aqb/need_clarification_about_sync_properties/f9o9pra/
    * "Think of Send as: it is safe to give another thread unique access to this value"
    * "Think of Sync as: it is safe to share access to this value across threads."
  * [Examples](https://www.reddit.com/r/rust/comments/ctdkyr/understanding_sendsync/exk8grg/):
    * `Send+Sync`: most types, `AtomicUsize`
    * `!Send+Sync`: `MutexGuard`, `RwLockReadGuard`, `RwLockWriteGuard`
    * `Send+!Sync`: `Cell`, `RefCell`
    * `!Send+!Sync`: `Rc`, `Formatter`, `&dyn Trait`
  * https://doc.rust-lang.org/nomicon/send-and-sync.html
  * https://doc.rust-lang.org/book/ch16-04-extensible-concurrency-sync-and-send.html
* `Mutex<T>`, `RWLock<T>`
* https://doc.rust-lang.org/std/sync/atomic/
Feel free to close this "issue". Just wanted to let you know ðŸ˜„ 