I use glium as renderer in a imgui-rs project, and have 3D object picking working on another thread by following this [example](https://github.com/glium/glium/blob/master/examples/picking.rs).

In summary, to enable 3D picking, a ```SimpleFrameBuffer``` is created with a color buffer and a depth buffer. The color buffer is initialized with a custom texture, which has -1 in the background and object ids on their corresponding 2D texture locations.

In the example the background ids are set to 0, but in my case I use -1 because my object id starts with 0, and that is not something determined by me.

Picking works well until I add some gui to the screen. The background ids in the background somehow become 0, which makes the program think the mouse clicks on object 0. The background on gui windows is -1. It seems to me that imgui-rs is interfering my ```SimpleFrameBuffer``` object, the gui clears the 3D background to 0, and my code sets the gui to -1. But they they should reside in separate memory. I am not sure what's going on.

I can hack it by adding 1 to all the ids, but the interfering still bothers me.
fixes #293 

with a default feature of "winit-19" and compiling with "--features
winit-20" causes both features to be active, leading to duplicate imports and
incorrect type versions
Apologies if this was reported somewhere already, I didn't see anything in the issue search.

relevant Cargo.toml dependencies:
```
winit = { version = "0.20.0", features = ["web-sys"] }
imgui = "0.2.1"
imgui-winit-support = { version = "0.2.1", features = ["winit-20"] }
```

output of `rustup show`:
```
Default host: x86_64-apple-darwin
rustup home:  /Users/matthewrusso/.rustup

installed toolchains
--------------------

stable-x86_64-apple-darwin (default)
nightly-x86_64-apple-darwin

active toolchain
----------------

stable-x86_64-apple-darwin (default)
rustc 1.40.0 (73528e339 2019-12-16)

```

full error list below:
```
error[E0252]: the name `winit` is defined multiple times
  --> /Users/matthewrusso/.cargo/registry/src/github.com-1ecc6299db9ec823/imgui-winit-support-0.2.1/src/lib.rs:73:5
   |
70 | use winit_19 as winit;
   |     ----------------- previous import of the module `winit` here
...
73 | use winit_20 as winit;
   |     ^^^^^^^^^^^^^^^^^ `winit` reimported here
   |
   = note: `winit` must be defined only once in the type namespace of this module
help: you can use `as` to change the binding name of the import
   |
73 | use winit_20 as other_winit;
   |     ^^^^^^^^^^^^^^^^^^^^^^^

error[E0252]: the name `DeviceEvent` is defined multiple times
  --> /Users/matthewrusso/.cargo/registry/src/github.com-1ecc6299db9ec823/imgui-winit-support-0.2.1/src/lib.rs:89:9
   |
81 |     DeviceEvent, ElementState, Event, KeyboardInput, MouseButton, MouseCursor, MouseScrollDelta,
   |     ----------- previous import of the type `DeviceEvent` here
...
89 |         DeviceEvent, ElementState, Event, KeyboardInput, MouseButton, MouseScrollDelta, TouchPhase,
   |         ^^^^^^^^^^^ `DeviceEvent` reimported here
   |
   = note: `DeviceEvent` must be defined only once in the type namespace of this module
help: you can use `as` to change the binding name of the import
   |
89 |         DeviceEvent as OtherDeviceEvent, ElementState, Event, KeyboardInput, MouseButton, MouseScrollDelta, TouchPhase,
   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error[E0252]: the name `ElementState` is defined multiple times
  --> /Users/matthewrusso/.cargo/registry/src/github.com-1ecc6299db9ec823/imgui-winit-support-0.2.1/src/lib.rs:89:22
   |
81 |     DeviceEvent, ElementState, Event, KeyboardInput, MouseButton, MouseCursor, MouseScrollDelta,
   |                  ------------ previous import of the type `ElementState` here
...
89 |         DeviceEvent, ElementState, Event, KeyboardInput, MouseButton, MouseScrollDelta, TouchPhase,
   |                      ^^^^^^^^^^^^ `ElementState` reimported here
   |
   = note: `ElementState` must be defined only once in the type namespace of this module
help: you can use `as` to change the binding name of the import
   |
89 |         DeviceEvent, ElementState as OtherElementState, Event, KeyboardInput, MouseButton, MouseScrollDelta, TouchPhase,
   |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error[E0252]: the name `Event` is defined multiple times
  --> /Users/matthewrusso/.cargo/registry/src/github.com-1ecc6299db9ec823/imgui-winit-support-0.2.1/src/lib.rs:89:36
   |
81 |     DeviceEvent, ElementState, Event, KeyboardInput, MouseButton, MouseCursor, MouseScrollDelta,
   |                                ----- previous import of the type `Event` here
...
89 |         DeviceEvent, ElementState, Event, KeyboardInput, MouseButton, MouseScrollDelta, TouchPhase,
   |                                    ^^^^^ `Event` reimported here
   |
   = note: `Event` must be defined only once in the type namespace of this module
help: you can use `as` to change the binding name of the import
   |
89 |         DeviceEvent, ElementState, Event as OtherEvent, KeyboardInput, MouseButton, MouseScrollDelta, TouchPhase,
   |                                    ^^^^^^^^^^^^^^^^^^^

error[E0252]: the name `KeyboardInput` is defined multiple times
  --> /Users/matthewrusso/.cargo/registry/src/github.com-1ecc6299db9ec823/imgui-winit-support-0.2.1/src/lib.rs:89:43
   |
81 |     DeviceEvent, ElementState, Event, KeyboardInput, MouseButton, MouseCursor, MouseScrollDelta,
   |                                       ------------- previous import of the type `KeyboardInput` here
...
89 |         DeviceEvent, ElementState, Event, KeyboardInput, MouseButton, MouseScrollDelta, TouchPhase,
   |                                           ^^^^^^^^^^^^^ `KeyboardInput` reimported here
   |
   = note: `KeyboardInput` must be defined only once in the type namespace of this module
help: you can use `as` to change the binding name of the import
   |
89 |         DeviceEvent, ElementState, Event, KeyboardInput as OtherKeyboardInput, MouseButton, MouseScrollDelta, TouchPhase,
   |                                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error[E0252]: the name `MouseButton` is defined multiple times
  --> /Users/matthewrusso/.cargo/registry/src/github.com-1ecc6299db9ec823/imgui-winit-support-0.2.1/src/lib.rs:89:58
   |
81 |     DeviceEvent, ElementState, Event, KeyboardInput, MouseButton, MouseCursor, MouseScrollDelta,
   |                                                      ----------- previous import of the type `MouseButton` here
...
89 |         DeviceEvent, ElementState, Event, KeyboardInput, MouseButton, MouseScrollDelta, TouchPhase,
   |                                                          ^^^^^^^^^^^ `MouseButton` reimported here
   |
   = note: `MouseButton` must be defined only once in the type namespace of this module
help: you can use `as` to change the binding name of the import
   |
89 |         DeviceEvent, ElementState, Event, KeyboardInput, MouseButton as OtherMouseButton, MouseScrollDelta, TouchPhase,
   |                                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error[E0252]: the name `MouseScrollDelta` is defined multiple times
  --> /Users/matthewrusso/.cargo/registry/src/github.com-1ecc6299db9ec823/imgui-winit-support-0.2.1/src/lib.rs:89:71
   |
81 |     DeviceEvent, ElementState, Event, KeyboardInput, MouseButton, MouseCursor, MouseScrollDelta,
   |                                                                                ---------------- previous import of the type `MouseScrollDelta` here
...
89 |         DeviceEvent, ElementState, Event, KeyboardInput, MouseButton, MouseScrollDelta, TouchPhase,
   |                                                                       ^^^^^^^^^^^^^^^^ `MouseScrollDelta` reimported here
   |
   = note: `MouseScrollDelta` must be defined only once in the type namespace of this module
help: you can use `as` to change the binding name of the import
   |
89 |         DeviceEvent, ElementState, Event, KeyboardInput, MouseButton, MouseScrollDelta as OtherMouseScrollDelta, TouchPhase,
   |                                                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error[E0252]: the name `TouchPhase` is defined multiple times
  --> /Users/matthewrusso/.cargo/registry/src/github.com-1ecc6299db9ec823/imgui-winit-support-0.2.1/src/lib.rs:89:89
   |
82 |     TouchPhase, VirtualKeyCode, Window, WindowEvent,
   |     ---------- previous import of the type `TouchPhase` here
...
89 |         DeviceEvent, ElementState, Event, KeyboardInput, MouseButton, MouseScrollDelta, TouchPhase,
   |                                                                                         ^^^^^^^^^^ `TouchPhase` reimported here
   |
   = note: `TouchPhase` must be defined only once in the type namespace of this module
help: you can use `as` to change the binding name of the import
   |
89 |         DeviceEvent, ElementState, Event, KeyboardInput, MouseButton, MouseScrollDelta, TouchPhase as OtherTouchPhase,
   |                                                                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error[E0252]: the name `VirtualKeyCode` is defined multiple times
  --> /Users/matthewrusso/.cargo/registry/src/github.com-1ecc6299db9ec823/imgui-winit-support-0.2.1/src/lib.rs:90:9
   |
82 |     TouchPhase, VirtualKeyCode, Window, WindowEvent,
   |                 -------------- previous import of the type `VirtualKeyCode` here
...
90 |         VirtualKeyCode, WindowEvent,
   |         ^^^^^^^^^^^^^^ `VirtualKeyCode` reimported here
   |
   = note: `VirtualKeyCode` must be defined only once in the type namespace of this module
help: you can use `as` to change the binding name of the import
   |
90 |         VirtualKeyCode as OtherVirtualKeyCode, WindowEvent,
   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error[E0252]: the name `WindowEvent` is defined multiple times
  --> /Users/matthewrusso/.cargo/registry/src/github.com-1ecc6299db9ec823/imgui-winit-support-0.2.1/src/lib.rs:90:25
   |
82 |     TouchPhase, VirtualKeyCode, Window, WindowEvent,
   |                                         ----------- previous import of the type `WindowEvent` here
...
90 |         VirtualKeyCode, WindowEvent,
   |                         ^^^^^^^^^^^ `WindowEvent` reimported here
   |
   = note: `WindowEvent` must be defined only once in the type namespace of this module
help: you can use `as` to change the binding name of the import
   |
90 |         VirtualKeyCode, WindowEvent as OtherWindowEvent,
   |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error[E0252]: the name `MouseCursor` is defined multiple times
  --> /Users/matthewrusso/.cargo/registry/src/github.com-1ecc6299db9ec823/imgui-winit-support-0.2.1/src/lib.rs:92:14
   |
81 |     DeviceEvent, ElementState, Event, KeyboardInput, MouseButton, MouseCursor, MouseScrollDelta,
   |                                                                   ----------- previous import of the type `MouseCursor` here
...
92 |     window::{CursorIcon as MouseCursor, Window},
   |              ^^^^^^^^^^^^^^^^^^^^^^^^^ `MouseCursor` reimported here
   |
   = note: `MouseCursor` must be defined only once in the type namespace of this module
help: you can use `as` to change the binding name of the import
   |
92 |     window::{CursorIcon as OtherMouseCursor, Window},
   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error[E0252]: the name `Window` is defined multiple times
  --> /Users/matthewrusso/.cargo/registry/src/github.com-1ecc6299db9ec823/imgui-winit-support-0.2.1/src/lib.rs:92:41
   |
82 |     TouchPhase, VirtualKeyCode, Window, WindowEvent,
   |                                 ------ previous import of the type `Window` here
...
92 |     window::{CursorIcon as MouseCursor, Window},
   |                                         ^^^^^^ `Window` reimported here
   |
   = note: `Window` must be defined only once in the type namespace of this module
help: you can use `as` to change the binding name of the import
   |
92 |     window::{CursorIcon as MouseCursor, Window as OtherWindow},
   |                                         ^^^^^^^^^^^^^^^^^^^^^

error[E0107]: wrong number of type arguments: expected 0, found 1
   --> /Users/matthewrusso/.cargo/registry/src/github.com-1ecc6299db9ec823/imgui-winit-support-0.2.1/src/lib.rs:365:83
    |
365 |     pub fn handle_event<T>(&mut self, io: &mut Io, window: &Window, event: &Event<T>) {
    |                                                                                   ^ unexpected type argument

error: aborting due to 13 previous errors

Some errors have detailed explanations: E0107, E0252.
For more information about an error, try `rustc --explain E0107`.
error: could not compile `imgui-winit-support`.
warning: build failed, waiting for other jobs to finish...
error: build failed
```
...discussion based on comments in #285 

Can everybody please clarify what exactly is expected of me that is not being provided at the moment? I'll happily consider giving full access to more people, but I'm also getting very mixed signals here.

@rasky wants review of this branch, which I'm not capable of delivering because this pull request has very little information about the change, and reviewing the pull request requires a good understanding of both the Dear Imgui feature (which is *still* experimental), and how that maps to imgui-rs.

What about @Jasper-Bekkers, @jaynus? What needs do you have that are not being met at the moment but would be if I gave full admin access to some people (you?)? My criteria for a crate being "unmaintained" is usually that pull requests don't get merged, which doesn't seem to be the case here, because the problem seems to be lack of review and/or lack of active development. I'm not actively doing work on this crate, but it's not the same thing as not accepting any changes.

There's nothing preventing somebody else from reviewing this pull request right here. In fact, if docking was in dear imgui master and somebody from Embark had reviewed this pull request, I'd merge it without hesitation.

There's nothing preventing somebody else from implementing "critical changes that weren't finished". If reasonable pull requests were submitted, I'd merge them.

And just to be clear: in any case, forking won't be needed. I'd much rather completely give away this project to somebody else than let it rot. However, the discussion so far seems to be mostly about credentials, not about the actual effort that moves the project forward. I've already given contributor access to one other person, and will gladly do it again. But what exactly does it change in practice other than credentials?

**TL;DR:**

"I need X but Gekkio doesn't do/provide Y" <- please fill in X and Y

"Q is not possible right now, but if Gekkio gave admin access to &lt;name of person&gt;, it would be possible" <- please fill in Q
The docs state 

> The DPI factor from winit is used directly without adjustment
```rust
#[derive(Copy, Clone, Debug, PartialEq)]
pub enum HiDpiMode {
    /// The DPI factor from winit is used directly without adjustment
    Default,
...
```

But if you look at this "helper" function, the winit dpi is not used at all in with `Default`.

```rust
    #[cfg(feature = "winit-19")]
    pub fn scale_pos_from_winit(
        &self,
        window: &Window,
        logical_pos: LogicalPosition,
    ) -> LogicalPosition {
        match self.hidpi_mode {
            ActiveHiDpiMode::Default => logical_pos,
            _ => logical_pos
                .to_physical(window.get_hidpi_factor())
                .to_logical(self.hidpi_factor),
        }
    }
```
On my machine the dpi for my window changes from 1.0 to 1.16 after a while, and now the mouse clicks are all off center. I realized that when I use `HiDpiMode::Rounded`, everything works fine.

I think the problem is that the framebuffer scale is set correctly for dpi changes, but `scale_pos_from_winit` doesn't get the correct size. I think it also should scale it by the current dpi.


The glium renderer always samples with linear interpolation:

https://github.com/Gekkio/imgui-rs/blob/ccec55c10a787f92b21054476f5817506c38692e/imgui-glium-renderer/src/lib.rs#L198-L200

I have a use case where I'd like to set this to Nearest: displaying sprites at magnified scales, where the original pixels should be clearly visible. For now, I've simply replaced the filter in the source of the renderer, but it'd be nice to customize this on a per-texture basis.
This PR adds initial support for the Dear Imgui `docking` branch. 

The docking/viewport branch is a long-living branch that will eventually be merged to master and brings many new features to Dear Imgui. While some features can be used almost without changing code (docking), others require extensive support in the backend (viewports). Since it might take a while to correctly implement for viewports in our several backends, I thought we might as well start implementation.

This PR has initial support: it passes cargo test by fixing the layouts, but does not yet wrap new APIs. It was written off v0.2, as 0.3 is still not stable.

*NOTE*: This PR should probably be merged into a new `docking` branch. There's no way for me to target a branch that doesn't exist yet; if somebody creates a `docking` branch, I can change this PR and let it point there.

Hello,

I've stumbled across your bindings to imgui, and would love to use it in my app that uses the [three.rs](https://github.com/three-rs/three)  crate, which is a pretty high-level graphics library akin to three.js.

I've used imgui in C projects before, and I know that for this to work I have to essentially implement the rendering component that draws the command buffers created by imgui. 

How does this task work in your library? Do I have to implement a specific trait? Are there there any rough pointers you could give me when it comes to me extending your library to work with three.rs?

Thank you in advance!
By running both the examples (Glium and gfx) I noticed that the frame rate is capped to 120
```
[examples/hello_world.rs:18] ui.io().framerate = 118.971596
[examples/hello_world.rs:18] ui.io().framerate = 119.00258
[examples/hello_world.rs:18] ui.io().framerate = 118.98891
[examples/hello_world.rs:18] ui.io().framerate = 118.98866
```
I've already removed the VSync (even if I've a 144hz monitor, so 120 is not due to VSync) but nothing change.
After some tests, I'm able to say that the frame limit is set in Glium, and I'm pretty sure that it depends on some internal configuration of the render.

I would like to remove this frame cap, because I would like to fully use the VSync, any idea?
```
use imgui::*;
mod support;

fn main() {
    let system = support::init(file!());
    system.main_loop(|_, ui| {
        Window::new(im_str!("Hello world"))
            .size([300.0, 200.0], Condition::FirstUseEver)
            .build(ui, || {
                let mut open: bool = true;
                unsafe { sys::igBeginTabBar("bar".as_bytes().as_ptr() as *const i8, 0 as ::std::os::raw::c_int) };
                unsafe { sys::igBeginTabItem("tab".as_bytes().as_ptr() as *const i8, &mut open, 0 as ::std::os::raw::c_int) };
                unsafe { sys::igEndTabItem() };
                unsafe { sys::igEndTabBar() };
            });
    });
}
```
![imgui-tab](https://user-images.githubusercontent.com/4561007/68032632-77655600-fc94-11e9-98e0-9c36898b40ee.png)

*igBeginTabBar()* and *igBeginTabItem* kind of gave me strange results:
1.  It shows an "x" icon at the end of tab when mouse hovers over. If I click that, the program would crash with the message
```Assertion failed: *p_backup == current && "PushID/PopID or TreeNode/TreePop Mismatch!", file third-party/cimgui/imgui/imgui.cpp, line 4781```
2. The text on the tab includes the window's title "Hello world". 

Am I using the API wrong?