``` java
		// MatrixTraceTransform.java
        try {
            doTransform(transformInvocation); // hack
        } catch (ExecutionException e) {
            e.printStackTrace();
        }
```

这里是不是将异常重新抛出中断流程会好点？
因为 transformInvocation 可能处于一种不确定的状态，这可能会导致一些意外的情况。或者将 transformInvocation 恢复到原先的状态，但这种处理会比较麻烦，需要深度拷贝。
fix #202
NOTCHANGED jar and file need to copy the target directory.
有个问题想咨询一下，MatrixIssue可以做聚合操作么，比如相同卡顿的问题多次上报，有没有一个字段可以确定这些report报的是相同的问题呢，类似安卓现有的StackKey


OOM的报告里出现了uuid和offset。使一堆数字，看起来他认识我，我不认识他。花了很多时间去研究，最后也没有符号化出来。
如果不能做到符号化，那么实际使用起来有什么意义？

matrix版本： 0.6.5

你好，看SQLiteLint.notifySqlExecution调用源码，发现方法参数类型不一致
SQLiteLint的notifySqlExecution方法参数timeCost是int类型
`public static void notifySqlExecution(String concernedDbPath, String sql, int timeCost) {...}`
SQLiteLintAndroidCore及之后调用的方法参数类型都是long类型
`public void notifySqlExecution(String dbPath, String sql, long timeCost) {...}`

想请问一下这里会有影响吗？这里的timeCost的参数单位是什么？秒/毫秒/纳秒？
谢谢

ActivityRefWatcher中mScanDestroyedActivitiesTask有个逻辑如下：
  if (destroyedActivityInfo.mDetectedCount < mMaxRedetectTimes
                    || !mResourcePlugin.getConfig().getDetectDebugger()) {
                    // Although the sentinel tell us the activity should have been recycled,
                    // system may still ignore it, so try again until we reach max retry times.
                    MatrixLog.i(TAG, "activity with key [%s] should be recycled but actually still \n"
                            + "exists in %s times, wait for next detection to confirm.",
                        destroyedActivityInfo.mKey, destroyedActivityInfo.mDetectedCount);
                    continue;
                }

mResourcePlugin.getConfig().getDetectDebugger()默认为false，所以条件一直为true,导致无法执行到后续activity leak上报逻辑



```
matrix版本：如: 0.4.7
问题描述：慢方法解析出来的数据stack字段，各个方法的调用关系应该怎么理解，第一个方法调用层数是1，第二个是2，第三个还是1，第四个方法层级也是2，那么第四个方法的上级是methid为27448嘛？

数据：
     "stack":"0,1048574,1,741

1,27448,1,78

2,45864,1,47

1,27448,1,96

2,45864,1,60

1,27448,1,121

2,45864,1,92

1,27448,1,48

1,27448,1,148

2,45864,1,130

3,15291,1,54

4,15299,1,54

5,15835,1,54

6,15830,1,54

7,15191,1,54

8,15284,1,54

3,15291,1,49

4,15299,1,49

5,15835,1,49

6,15830,1,49

7,15191,1,49

8,15284,1,49

1,27448,1,51

2,48255,1,45

3,48264,1,45

4,15291,1,45

5,15299,1,45

6,15835,1,45

7,15830,1,45

8,15191,1,45 ",
```


遇到裁剪写入文件丢失字节的bug,导致解析hprof文件失败。
如果是多字节的UTF-8字符，当前写入是使用字符长度，而不是字节长度，会丢失字节。导致解析hprof文件格式错误。