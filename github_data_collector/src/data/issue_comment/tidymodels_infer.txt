Hi all!

A PR to address an error message that often tripped students up last semester—when piping after visualize, 

``` r

library(infer)

gss %>% 
  specify(response = hours)  %>% 
  hypothesize(null = "point", mu = 40) %>% 
  generate(reps = 100, type = "bootstrap") %>% 
  calculate(stat = "mean") %>%
  visualize() %>%
  shade_p_value(obs_stat = 1, direction = "both")
#> Warning: Removed 1244 rows containing missing values.
#> Error: `color` must be 'color string', not 'list'.
```

<sup>Created on 2020-01-16 by the [reprex package](https://reprex.tidyverse.org) (v0.3.0)</sup>

Before running the current argument checking messages, `shade_p_value` and `shade_confidence_interval` will now check if a plot object was supplied as an argument, and raise an error if so. The new error for the code above would be:

```{r}
#> Warning: Removed 1244 rows containing missing values.
#> Error: It looks like the supplied `color` argument is a plot 
rather than a `color string` object. Did you pipe the result of 
`visualize()` into `shade_p_value` (using `%>%`) rather than 
adding the result of `shade_p_value` as a layer with `+`? 
```

The error will fill in the appropriate values for the name of the argument that was given the plot object, the type of argument needed, and the function the user actually called.
Hi,

Thanks for a great package!

I was interested in using infer to illustrate the difference between a between subjects and within subjects design (e.g. independent vs paired tests). I've added some functionality to specify() and generate() to allow the option for permute samples per subject, when the option subject="_column with subject identifier_" is included in specify().

<img width="740" alt="image" src="https://user-images.githubusercontent.com/6284366/72320784-5631d480-36dd-11ea-8324-9f27a5a67ac0.png">

<img width="740" alt="image" src="https://user-images.githubusercontent.com/6284366/72320886-88433680-36dd-11ea-8fcd-bde37cc3a194.png">

<img width="741" alt="image" src="https://user-images.githubusercontent.com/6284366/72320918-9d1fca00-36dd-11ea-8d5c-30376b324608.png">

<img width="739" alt="image" src="https://user-images.githubusercontent.com/6284366/72320961-ab6de600-36dd-11ea-957f-3c1fab7e2366.png">

Appreciate your review for incorporation in the package.

Cheers,
Kenneth
This may be addressed or intentional, but it seem as though `t_test` should not have to specify `order` in the specification, but if not (in the example from the vignette), things will fail:

# Read in the data

``` r
library(nycflights13)
library(dplyr)
#> 
#> Attaching package: 'dplyr'
#> The following objects are masked from 'package:stats':
#> 
#>     filter, lag
#> The following objects are masked from 'package:base':
#> 
#>     intersect, setdiff, setequal, union
library(stringr)
library(infer)
set.seed(2017)
fli_small <- flights %>% 
  sample_n(size = 500) %>% 
  mutate(half_year = case_when(
    between(month, 1, 6) ~ "h1",
    between(month, 7, 12) ~ "h2"
  )) %>% 
  mutate(day_hour = case_when(
    between(hour, 1, 12) ~ "morning",
    between(hour, 13, 24) ~ "not morning"
  )) %>% 
  select(arr_delay, dep_delay, half_year, 
         day_hour, origin, carrier)
```

# Do t-test
No `order` given, but `order = NULL` in the docs, so it seems as though this should be optional:
``` r
fli_small %>% 
  t_test(formula = arr_delay ~ half_year)
#> Error in t.test.formula(formula = formula, data = ., alternative = alternative, : grouping factor must have exactly 2 levels
```

There is no missing data
``` r
fli_small %>% 
  count(half_year)
#> # A tibble: 2 x 2
#>   half_year     n
#>   <chr>     <int>
#> 1 h1          255
#> 2 h2          245
```
`t.test` works just fine:
``` r
t.test(arr_delay ~ half_year, data = fli_small)
#> 
#>  Welch Two Sample t-test
#> 
#> data:  arr_delay by half_year
#> t = 0.27655, df = 487.94, p-value = 0.7822
#> alternative hypothesis: true difference in means is not equal to 0
#> 95 percent confidence interval:
#>  -5.739868  7.620333
#> sample estimates:
#> mean in group h1 mean in group h2 
#>         5.156000         4.215768
```

Can use `tidy`:
``` r
fli_small %>% 
  do(broom::tidy(t.test(.$arr_delay ~ .$half_year)))
#> # A tibble: 1 x 10
#>   estimate estimate1 estimate2 statistic p.value parameter conf.low conf.high
#>      <dbl>     <dbl>     <dbl>     <dbl>   <dbl>     <dbl>    <dbl>     <dbl>
#> 1    0.940      5.16      4.22     0.277   0.782      488.    -5.74      7.62
#> # … with 2 more variables: method <chr>, alternative <chr>
```

<sup>Created on 2020-01-13 by the [reprex package](https://reprex.tidyverse.org) (v0.3.0.9001)</sup>

<details style="margin-bottom:10px;">

<summary>Session info</summary>

``` r
sessioninfo::session_info()
#> ─ Session info ───────────────────────────────────────────────────────────────
#>  setting  value                       
#>  version  R version 3.6.0 (2019-04-26)
#>  os       macOS Mojave 10.14.6        
#>  system   x86_64, darwin15.6.0        
#>  ui       X11                         
#>  language (EN)                        
#>  collate  en_US.UTF-8                 
#>  ctype    en_US.UTF-8                 
#>  tz       America/New_York            
#>  date     2020-01-13                  
#> 
#> ─ Packages ───────────────────────────────────────────────────────────────────
#>  package      * version     date       lib source                             
#>  assertthat     0.2.1       2019-03-21 [1] CRAN (R 3.6.0)                     
#>  backports      1.1.5       2019-10-02 [1] CRAN (R 3.6.0)                     
#>  cli            2.0.0       2019-12-09 [1] CRAN (R 3.6.0)                     
#>  colorout     * 1.2-1       2019-06-19 [1] Github (jalvesaq/colorout@7ea9440) 
#>  colorspace     1.4-1       2019-03-18 [1] CRAN (R 3.6.0)                     
#>  crayon         1.3.4       2017-09-16 [1] CRAN (R 3.6.0)                     
#>  digest         0.6.23      2019-11-23 [1] CRAN (R 3.6.0)                     
#>  dplyr        * 0.8.3       2019-07-04 [1] CRAN (R 3.6.0)                     
#>  evaluate       0.14        2019-05-28 [1] CRAN (R 3.6.0)                     
#>  fansi          0.4.0       2018-10-05 [1] CRAN (R 3.6.0)                     
#>  fs             1.3.1       2019-05-06 [1] CRAN (R 3.6.0)                     
#>  ggplot2        3.2.1       2019-08-10 [1] CRAN (R 3.6.0)                     
#>  glue           1.3.1       2019-03-12 [1] CRAN (R 3.6.0)                     
#>  gtable         0.3.0       2019-03-25 [1] CRAN (R 3.6.0)                     
#>  highr          0.8         2019-03-20 [1] CRAN (R 3.6.0)                     
#>  htmltools      0.4.0       2019-10-04 [1] CRAN (R 3.6.0)                     
#>  infer        * 0.4.0.1     2019-04-22 [1] CRAN (R 3.6.0)                     
#>  knitr          1.26.1      2020-01-05 [1] Github (muschellij2/knitr@f5af631) 
#>  lazyeval       0.2.2       2019-03-15 [1] CRAN (R 3.6.0)                     
#>  lifecycle      0.1.0       2019-08-01 [1] CRAN (R 3.6.0)                     
#>  magrittr       1.5         2014-11-22 [1] CRAN (R 3.6.0)                     
#>  munsell        0.5.0       2018-06-12 [1] CRAN (R 3.6.0)                     
#>  nycflights13 * 1.0.0       2018-06-26 [1] CRAN (R 3.6.0)                     
#>  pillar         1.4.3       2019-12-20 [1] CRAN (R 3.6.0)                     
#>  pkgconfig      2.0.3       2019-09-22 [1] CRAN (R 3.6.0)                     
#>  purrr          0.3.3       2019-10-18 [1] CRAN (R 3.6.0)                     
#>  R6             2.4.1       2019-11-12 [1] CRAN (R 3.6.0)                     
#>  Rcpp           1.0.3       2019-11-08 [1] CRAN (R 3.6.0)                     
#>  reprex         0.3.0.9001  2020-01-05 [1] Github (tidyverse/reprex@5ae0b29)  
#>  rlang          0.4.2       2019-11-23 [1] CRAN (R 3.6.0)                     
#>  rmarkdown      2.0         2019-12-12 [1] CRAN (R 3.6.0)                     
#>  rstudioapi     0.10.0-9003 2020-01-05 [1] Github (rstudio/rstudioapi@abe596d)
#>  scales         1.1.0       2019-11-18 [1] CRAN (R 3.6.0)                     
#>  sessioninfo    1.1.1       2018-11-05 [1] CRAN (R 3.6.0)                     
#>  stringi        1.4.3       2019-03-12 [1] CRAN (R 3.6.0)                     
#>  stringr      * 1.4.0       2019-02-10 [1] CRAN (R 3.6.0)                     
#>  styler         1.1.1       2019-05-06 [1] CRAN (R 3.6.0)                     
#>  tibble         2.1.3       2019-06-06 [1] CRAN (R 3.6.0)                     
#>  tidyselect     0.2.5       2018-10-11 [1] CRAN (R 3.6.0)                     
#>  utf8           1.1.4       2018-05-24 [1] CRAN (R 3.6.0)                     
#>  vctrs          0.2.1       2019-12-17 [1] CRAN (R 3.6.0)                     
#>  withr          2.1.2       2018-03-15 [1] CRAN (R 3.6.0)                     
#>  xfun           0.11        2019-11-12 [1] CRAN (R 3.6.0)                     
#>  yaml           2.2.0       2018-07-25 [1] CRAN (R 3.6.0)                     
#>  zeallot        0.1.0       2018-01-28 [1] CRAN (R 3.6.0)                     
#> 
#> [1] /Library/Frameworks/R.framework/Versions/3.6/Resources/library
```

</details>

# Updated `infer`
I think the error is better in the newer version of `infer`, but just unsure why default is not the case for 2 level data:

``` r
library(nycflights13)
library(dplyr)
#> 
#> Attaching package: 'dplyr'
#> The following objects are masked from 'package:stats':
#> 
#>     filter, lag
#> The following objects are masked from 'package:base':
#> 
#>     intersect, setdiff, setequal, union
library(stringr)
library(infer)
set.seed(2017)
fli_small <- flights %>% 
  sample_n(size = 500) %>% 
  mutate(half_year = case_when(
    between(month, 1, 6) ~ "h1",
    between(month, 7, 12) ~ "h2"
  )) %>% 
  mutate(day_hour = case_when(
    between(hour, 1, 12) ~ "morning",
    between(hour, 13, 24) ~ "not morning"
  )) %>% 
  select(arr_delay, dep_delay, half_year, 
         day_hour, origin, carrier)

fli_small %>% 
  t_test(formula = arr_delay ~ half_year)
#> Error: Statistic is based on a difference; specify the `order` in which to subtract the levels of the explanatory variable. `order = c("first", "second")` means `("first" - "second")`. Check `?calculate` for details.
```

<sup>Created on 2020-01-13 by the [reprex package](https://reprex.tidyverse.org) (v0.3.0.9001)</sup>

<details style="margin-bottom:10px;">

<summary>Session info</summary>

``` r
sessioninfo::session_info()
#> ─ Session info ───────────────────────────────────────────────────────────────
#>  setting  value                       
#>  version  R version 3.6.0 (2019-04-26)
#>  os       macOS Mojave 10.14.6        
#>  system   x86_64, darwin15.6.0        
#>  ui       X11                         
#>  language (EN)                        
#>  collate  en_US.UTF-8                 
#>  ctype    en_US.UTF-8                 
#>  tz       America/New_York            
#>  date     2020-01-13                  
#> 
#> ─ Packages ───────────────────────────────────────────────────────────────────
#>  package      * version     date       lib source                             
#>  assertthat     0.2.1       2019-03-21 [1] CRAN (R 3.6.0)                     
#>  backports      1.1.5       2019-10-02 [1] CRAN (R 3.6.0)                     
#>  cli            2.0.0       2019-12-09 [1] CRAN (R 3.6.0)                     
#>  colorout     * 1.2-1       2019-06-19 [1] Github (jalvesaq/colorout@7ea9440) 
#>  colorspace     1.4-1       2019-03-18 [1] CRAN (R 3.6.0)                     
#>  crayon         1.3.4       2017-09-16 [1] CRAN (R 3.6.0)                     
#>  digest         0.6.23      2019-11-23 [1] CRAN (R 3.6.0)                     
#>  dplyr        * 0.8.3       2019-07-04 [1] CRAN (R 3.6.0)                     
#>  evaluate       0.14        2019-05-28 [1] CRAN (R 3.6.0)                     
#>  fansi          0.4.0       2018-10-05 [1] CRAN (R 3.6.0)                     
#>  fs             1.3.1       2019-05-06 [1] CRAN (R 3.6.0)                     
#>  ggplot2        3.2.1       2019-08-10 [1] CRAN (R 3.6.0)                     
#>  glue           1.3.1       2019-03-12 [1] CRAN (R 3.6.0)                     
#>  gtable         0.3.0       2019-03-25 [1] CRAN (R 3.6.0)                     
#>  highr          0.8         2019-03-20 [1] CRAN (R 3.6.0)                     
#>  htmltools      0.4.0       2019-10-04 [1] CRAN (R 3.6.0)                     
#>  infer        * 0.5.1       2020-01-13 [1] Github (tidymodels/infer@e356628)  
#>  knitr          1.26.1      2020-01-05 [1] Github (muschellij2/knitr@f5af631) 
#>  lazyeval       0.2.2       2019-03-15 [1] CRAN (R 3.6.0)                     
#>  lifecycle      0.1.0       2019-08-01 [1] CRAN (R 3.6.0)                     
#>  magrittr       1.5         2014-11-22 [1] CRAN (R 3.6.0)                     
#>  munsell        0.5.0       2018-06-12 [1] CRAN (R 3.6.0)                     
#>  nycflights13 * 1.0.0       2018-06-26 [1] CRAN (R 3.6.0)                     
#>  pillar         1.4.3       2019-12-20 [1] CRAN (R 3.6.0)                     
#>  pkgconfig      2.0.3       2019-09-22 [1] CRAN (R 3.6.0)                     
#>  purrr          0.3.3       2019-10-18 [1] CRAN (R 3.6.0)                     
#>  R6             2.4.1       2019-11-12 [1] CRAN (R 3.6.0)                     
#>  Rcpp           1.0.3       2019-11-08 [1] CRAN (R 3.6.0)                     
#>  reprex         0.3.0.9001  2020-01-05 [1] Github (tidyverse/reprex@5ae0b29)  
#>  rlang          0.4.2       2019-11-23 [1] CRAN (R 3.6.0)                     
#>  rmarkdown      2.0         2019-12-12 [1] CRAN (R 3.6.0)                     
#>  rstudioapi     0.10.0-9003 2020-01-05 [1] Github (rstudio/rstudioapi@abe596d)
#>  scales         1.1.0       2019-11-18 [1] CRAN (R 3.6.0)                     
#>  sessioninfo    1.1.1       2018-11-05 [1] CRAN (R 3.6.0)                     
#>  stringi        1.4.3       2019-03-12 [1] CRAN (R 3.6.0)                     
#>  stringr      * 1.4.0       2019-02-10 [1] CRAN (R 3.6.0)                     
#>  styler         1.1.1       2019-05-06 [1] CRAN (R 3.6.0)                     
#>  tibble         2.1.3       2019-06-06 [1] CRAN (R 3.6.0)                     
#>  tidyselect     0.2.5       2018-10-11 [1] CRAN (R 3.6.0)                     
#>  withr          2.1.2       2018-03-15 [1] CRAN (R 3.6.0)                     
#>  xfun           0.11        2019-11-12 [1] CRAN (R 3.6.0)                     
#>  yaml           2.2.0       2018-07-25 [1] CRAN (R 3.6.0)                     
#> 
#> [1] /Library/Frameworks/R.framework/Versions/3.6/Resources/library
```

</details>
Based on the `infer` vignette, I’ve put together a `learnr` tutorial for the package! The code for this addition is in the [`learnr`](https://github.com/tidymodels/infer/tree/learnr) branch (off `develop`), mostly in the `/inst` folder.

I’m opening up an issue rather than PRing because I’m having trouble figuring out the CRAN-appropriate way to import/suggest dependencies. Building the lesson depends on `learnr` and `gradethis`, the latter of which is only available via [rstudio-education/gradethis](https://github.com/rstudio-education/gradethis).

[The `learnr` website](https://rstudio.github.io/learnr/publishing.html#r-package) suggests that `learnr` needs to be installed for users to run a tutorial, which feels like a `Suggests:` entry to me. However, it also says that any exercise checker (in this case, `gradethis`) should be in `Imports:`. Since `gradethis` isn’t on CRAN, though, it would also need to be included in the `Remotes:` section (or `Additional_repositories:` if a built version exists somewhere), which [doesn’t seem to be fair game](https://cran.r-project.org/web/packages/devtools/vignettes/dependencies.html#CRAN-submission) by CRAN policy.

Not sure about what the best move forward with this is, but wanted to let yall know that this is something that exists.
Currently, when a test results in a very small p-value the default output rounds this p-value to 0. This hinders the conversation of properly reporting the size of you p-value, when teaching hypothesis testing. 
Could we modify the default output for small p-values? 
Issue #244 shows an example. 
This link says that the samples should be taken separately for `y` and `x` but `generate()` takes a sample from `c(y, x)`
https://en.m.wikipedia.org/wiki/Bootstrapping_(statistics)#Bootstrap_hypothesis_testing

Well either this is a mistake or this is how the bootstrap for difference in means should work. 
For difference in means, if the function is supposed to resample independently from the two samples then this package does not do this.  See example bellow:

Bootstrap samples only  from one of the factors: 
```
# A small data set. 
test <- mtcars %>% 
  filter(cyl ==6) %>% 
  mutate_at(vars(am), as.character) %>% 
  as_tibble() %>% 
  select(am, mpg)
```

```
set.seed(100)
 test %>% 
  specify(mpg ~am) %>% 
  generate(reps = 10, type = "bootstrap") %>% 
  group_by(replicate, am) %>% 
  summarise(out = mean(mpg)) %>% 
  summarise(out2 = out[am =="1"] - out[am=="0"])
```

Error: Column `out2` must be length 1 (a summary value), not 0

The error is the same if I use `calculate()`. 

Here we can see that `replicate` 10 only includes samples from `am==0`:

```
 set.seed(100)
 test %>% 
   specify(mpg ~am) %>% 
   generate(reps = 12, type = "bootstrap") %>% 
   filter(replicate ==10)

```

```
# A tibble: 7 x 3
# Groups:   replicate [1]
  replicate   mpg am   
      <int> <dbl> <fct>
1        10  17.8 0    
2        10  18.1 0    
3        10  17.8 0    
4        10  21.4 0    
5        10  19.2 0    
6        10  17.8 0    
7        10  21.4 0  
```

But I think, e.g., replicate 10 should contain 3 samples from `am==1` and 4 samples for `am==0`. But it just takes a sample of 7 from the whole data frame. 
I get an error running a two sample t test simulation " #> Error: Column `stat` must be length 1 (a summary value), not 0". 
Hopefully someone can figure out what's going on here.  Didn't come across a similar error on googlefu.  

Short reproducible example attached below  

```r
library(infer)
library(dplyr)
#> 
#> Attaching package: 'dplyr'
#> The following objects are masked from 'package:stats':
#> 
#>     filter, lag
#> The following objects are masked from 'package:base':
#> 
#>     intersect, setdiff, setequal, union
reprex_example <- data.frame(avg_fric = c(0.16,0.15,0.155,0.12,0.11,0.10), sample = c("1","0","0","1","1","1"))

reprex_example %>%
  mutate(sample = as.factor(sample)) %>%
  specify(response = avg_fric, explanatory = sample) %>%
  generate(reps = 100, type = "bootstrap") %>%
  calculate(stat = "diff in means", order = c("1", "0"))
#> Error: Column `stat` must be length 1 (a summary value), not 0


sessionInfo()
#> R version 3.5.3 (2019-03-11)
#> Platform: x86_64-w64-mingw32/x64 (64-bit)
#> Running under: Windows 10 x64 (build 16299)
#> 
#> Matrix products: default
#> 
#> locale:
#> [1] LC_COLLATE=English_United States.1252 
#> [2] LC_CTYPE=English_United States.1252   
#> [3] LC_MONETARY=English_United States.1252
#> [4] LC_NUMERIC=C                          
#> [5] LC_TIME=English_United States.1252    
#> 
#> attached base packages:
#> [1] stats     graphics  grDevices utils     datasets  methods   base     
#> 
#> other attached packages:
#> [1] dplyr_0.8.0.1 infer_0.4.0.1
#> 
#> loaded via a namespace (and not attached):
#>  [1] Rcpp_1.0.1       knitr_1.22       magrittr_1.5     munsell_0.5.0   
#>  [5] tidyselect_0.2.5 colorspace_1.4-1 R6_2.4.0         rlang_0.3.4     
#>  [9] plyr_1.8.4       stringr_1.4.0    highr_0.8        tools_3.5.3     
#> [13] grid_3.5.3       gtable_0.3.0     xfun_0.6         htmltools_0.3.6 
#> [17] lazyeval_0.2.2   yaml_2.2.0       digest_0.6.18    assertthat_0.2.1
#> [21] tibble_2.1.1     crayon_1.3.4     purrr_0.3.2      ggplot2_3.1.1   
#> [25] glue_1.3.1       evaluate_0.13    rmarkdown_1.12   stringi_1.4.3   
#> [29] compiler_3.5.3   pillar_1.3.1     scales_1.0.0     pkgconfig_2.0.2
```
Hello,
Thanks for your package. 
I have included a bias corrected confidence interval in get_confidence_interval. 
I have used the formulas on this page: https://www.jmp.com/support/help/14-2/bias-corrected-percentile-intervals.shtml

I hope it can get implemented. 
Thanks
David
Currently the package does three types of `generate()`: `bootstrap`, `permute`, or `simulate`. Every time I teach this I run info difficulties around this vocabulary. `bootstrap` is not problematic but `permute` and `simulate` are hard to distinguish for students.

One other issue is that much of Statistics Education literature refers to these methods as Simulation Based Inference, so having `simulate` as a type of simulation seems odd to me.

A third consideration is that a good portion of the consumers of this package are students in into stat / data science courses where probability is not a requirement. So the difference between permutation / combination may not be clear to them, nor in the learning goals for the course they're taking. Hence, introducing that term makes clearly teaching this material difficult in my experience.

I would like to propose a potentially radical change:

- `generate()` becomes `simulate()`
- `"simulate"` becomes `"draw"` (or `"flip"`, but I think `"draw"` is more general to both numerical and categorical data vs. `"flip"` only makes sense for categorical data to me)
- `"permute"` becomes `"shuffle"`

Discuss 😄 

Obviously we would do this in a non-breaking way via aliasing as opposed to renaming and breaking old code. But I can see the vignettes and teaching materials reading A LOT smoother with these changes.

cc @rudeboybert @mcconvil (when I discussed this with @andrewpbray a while back -- sorry for the delay!! -- he recommended tagging you two as you might have thoughts and feelings on this issue