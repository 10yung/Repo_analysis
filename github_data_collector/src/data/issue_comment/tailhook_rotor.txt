
[tokio-core](https://github.com/tokio-rs/tokio-core) is somewhat similar in purpose to this library.  However, this library uses explicit state machines, whereas [tokio-core](https://github.com/tokio-rs/tokio-core) uses futures that create state machines.

What are the advantages and disadvantages of each library?

It would be awesome if there was a polling loop implementation for rotor's event monitoring that used DPDK and userland TCP.

http://www.seastar-project.org/ manages to show some amazing numbers (lies, and more lies I'm sure, or maybe not!) that make me wonder how nice it would be to have that same functionality but without the nightmarish build they have going on.

Besides for some debugging purposes, (such as seeing how many ticks occurring before my other code wakes the socket up again), this would also be useful for the Machine to be able to notify a user if they are doing blocking work, or otherwise too much work, in the ready event. One could observe the time difference between ticks, and above a threshold, act accordingly.
