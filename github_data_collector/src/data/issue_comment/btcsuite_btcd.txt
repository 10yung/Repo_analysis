This is partially a continuation from [another issue thread](https://github.com/btcsuite/btcd/issues/1339), but I wanted to open a new issue to gain some attention to the problem and hopefully get a response from the main BTCD developers. 

First of all, I'm 100% on board with supporting alternative implementations of bitcoin nodes. Having multiple implementations interacting with the same blockchain is an essential part of a healthy blockchain ecosystem. Right now it appears that bitcoin core runs the vast majority of nodes in the network (judging solely based off logfiles describing peer connections to my node). This is all well and good, however if a critical flaw were to be found in bitcoin core, it would cripple most of the blockchain network and potentially impact trust and adoption of cryptocurrency as a whole. This is where alternative implementations such as BTCD play an important role: we need viable alternatives to turn to in the event that consensus decides the leading node implementation is flawed. 

BTCD very nearly works to solve this problem, but after some time testing, there exist some critical flaws preventing it from being seriously considered as an alternative node implementation. The syncing performance leaves much to be desired. Is it true that BTCD only syncs from a single peer to update the blockchain? This doesn't sound very decentralized. Additionally, the time to sync blocks increases exponentially as the block height increases, as you can see in the data collected from the logs below (the gap in the data was from where I stopped syncing to mess with configs). 

My fear is that the rate that new blocks are generated in the blockchain will exceed the rate at which they can be synced across BTCD nodes, which will render BTCD mostly useless in the near future if it can't keep up. I would really love to be able to recommend BTCD as a viable alternative node implementation, but until these problems are fixed, I can't recommend anybody to use it. 

![Figure_1](https://user-images.githubusercontent.com/8880061/72556099-531d1c80-3874-11ea-8e32-93adb7b88ea3.png)

Some wallet methods in the `rpcclient` library have hardcoded the `chaincfg.MainNetParams` for example the `GetNewAddress()` method calls the `Receive()` method which hardcodes the `MainNetParams` when decoding the address:

```
func (r FutureGetNewAddressResult) Receive() (btcutil.Address, error) {
	res, err := receiveFuture(r)
	if err != nil {
		return nil, err
	}

	// Unmarshal result as a string.
	var addr string
	err = json.Unmarshal(res, &addr)
	if err != nil {
		return nil, err
	}

	return btcutil.DecodeAddress(addr, &chaincfg.MainNetParams)
}
```

This returns an error when talking to btcwallet/btcd in `--simnet` mode.

Is there a way to tell the `rpcclient` to use `SimnetParams` when talking to a simnet server?

Potential way to fix this would be to allow the user to specify the network type when constructing the client:
```
	client, err := rpcclient.New(&rpcclient.ConnConfig{
		Host: ...,
		Endpoint: ...,
		User: ...,
		Pass: ...,
		Certificates: ...,
                Network: "Simnet",
	}, &notificationHandlers)
```
Hi all,

I hope you all are having a good day.
For a project, I'm working on. I need to modify [**`chaincfg`**](https://github.com/btcsuite/btcd/tree/master/chaincfg).

Ideally, I am able to migrate a btcd fork to be fully compatible with Divi. But for the time being... I just need to get chaincfg fully migrated and working properly in our atomic swaps implementation.

I need two files for the atomic swap implementation to be fully compatible with Divi.

- [**`genesis.go`**](https://github.com/DiviProject/atomic-swaps/blob/master/src/divichain/genesis.go)

- [**`params.go`**](https://github.com/DiviProject/atomic-swaps/blob/master/src/divichain/params.go)

Using [`chainparams.cpp`](https://github.com/DiviProject/Divi/blob/master0/divi/src/chainparams.cpp) as a reference to update these files. What exactly do I need to do to make this fully compatible with the Divi chain?

So far, I've modified:

**`genesis.go`**

1. `genesisCoinbaseTx` (but not `TxOut.PkScript`)

2. `genesisHash`

3. `genesisMerkleRoot`

4. `genesisBlock`

**`params.go`**

1. `TargetTimespan`

2. `TargetTimePerBlock`

3. `MinDiffReductionTime`

4. `PubKeyHashAddrID`

5. `ScriptHashAddrID`

**Please note that I am just trying to get testnet3 to work only for the time being.**

Currently. When I try to interact with a Divi RPC client. I will get this error:

```
{
    "error": "unknown address type",
    "code": 2,
    "message": "unknown address type"
}
```

Thank you in advance for the help.
And, if I am able to get this working. I am going to create a guide on how to update `btcd` to be compatible with other Bitcoin forks.
fixes #1512
syndtr/go-leveldb supports go module at now,we could migrate to latest go-leveldb libary to improve performance.
1. First, generate a P2SH multisig address including some custom content.

         script := txscript.NewScriptBuilder()

         // custom content
	script.AddOp(txscript.OP_HASH160)
	script.AddData(Hash_Preimage_R)
	script.AddOp(txscript.OP_EQUALVERIFY)

         // standard content
	script.AddOp(txscript.OP_2)
	script.AddData(aPubKey)
	script.AddData(bPubKey)
	script.AddOp(txscript.OP_2)
	script.AddOp(txscript.OP_CHECKMULTISIG)
	return script.Script()

Then got an address like `2Mv12R1VNdiSzeFiDxs2WVxeBZzTScrs8Q6`

2. Sent some test bitcoin to the address above.
3. Construct a transaction with btcd/txscript and btcd/wire to spend a UTXO of the address above.

**4. How to write the unlocking script?** 
Currently, I'm using `txscript.SignTxOutput`  reference from https://sourcegraph.com/github.com/btcsuite/btcd/-/blob/txscript/sign_test.go#L344

         // signature ...
	sigScript, err := txscript.SignTxOutput(&chaincfg.TestNet3Params,
		tx, 0, scriptPkScript, txscript.SigHashAll,
		mkGetKey(map[string]addressToKey{
			address1.EncodeAddress(): {key1.PrivKey, true},
			address2.EncodeAddress(): {key2.PrivKey, true},
		 }), mkGetScript(map[string][]byte{
			scriptAddr.EncodeAddress(): custom_pkScript,
		}), nil)

	if err != nil {
		fmt.Println("Sign has wrong : ", err)
		return
	}

	tx.TxIn[0].SignatureScript = sigScript

5. But got a error:  **Sign has wrong :  can't sign unknown transactions**

Anybody have some idea? Thank you very much!
the RawTxInput struct missing a field "Amount",the RPC will return err.
https://github.com/btcsuite/btcd/blob/master/txscript/engine.go#L587

this error message should read *compressed* not *uncompressed*
`
func SignTransaction(redeemTx *wire.MsgTx, secret string, destination string, amount float64, utxos []dto.Utxo) error {

	privByte, _ := hex.DecodeString(privKey)
	privateKey, pubKey := btcec.PrivKeyFromBytes( btcec.S256(), privByte)
	fromAddress, _ := btcutil.NewAddressWitnessPubKeyHash(btcutil.Hash160(pubKey.SerializeUncompressed()), &chaincfg.MainNetParams)

	sourceAddress, err := btcutil.DecodeAddress(fromAddress, &chaincfg.MainNetParams)
	destinationAddress, err := btcutil.DecodeAddress(destination, &chaincfg.MainNetParams)
	if err != nil {
		return err
	}
	
	// TODO : Calculate fee estimation
	estimatedFee, err := btcutil.NewAmount(0.0001) 
	if err != nil {
		return err
	}
	satoshiAmount, err := btcutil.NewAmount(amount) 
	if err != nil {
		return err
	}
	totalSatoshiAmount := satoshiAmount + estimatedFee 

	// TODO : optimize for selecting which UTXO to be used
	totalSum := int64(0)
	for i := 0; i < len(utxos); i++ {
		txValue, err := strconv.Atoi(utxos[i].Value)
		if err != nil {
			return err
		}
		totalSum += int64(txValue)

		sourceUtxoHash, _ := chainhash.NewHashFromStr(utxos[i].Txid)
		prevOut := wire.NewOutPoint(sourceUtxoHash, uint32(i))
		redeemTxIn := wire.NewTxIn(prevOut, nil, nil)
		redeemTx.AddTxIn(redeemTxIn)
		if totalSum > int64(totalSatoshiAmount) {
			break
		}
	}

	// Prepare pay to witness public script and add transaction outputs 
	sourcePkScriptForOutput, _ := txscript.PayToAddrScript(sourceAddress)
	destinationPkScriptForOutput, _ := txscript.PayToAddrScript(destinationAddress)
	change := totalSum - int64(totalSatoshiAmount)
	changeTxOut := wire.NewTxOut(int64(change), sourcePkScriptForOutput)
	redeemTx.AddTxOut(changeTxOut)
	redeemTxOut := wire.NewTxOut(int64(satoshiAmount), destinationPkScriptForOutput)
	redeemTx.AddTxOut(redeemTxOut)

	// Signing transaction
	sigHash := txscript.NewTxSigHashes(redeemTx)
	witnessSig, err := txscript.WitnessSignature(redeemTx, sigHash, 0, int64(satoshiAmount), sourcePkScriptForOutput, txscript.SigHashAll, privateKey, false)
	if err != nil {
		return err
	}

	redeemTx.TxIn[0].Witness = witnessSig
	flags := txscript.StandardVerifyFlags
	vm, err := txscript.NewEngine(sourcePkScriptForOutput, redeemTx, 0, flags, nil, sigHash, int64(satoshiAmount))
	if err != nil {
		fmt.Println("flag transactionerr > ", err)
		return err
	}
	if err := vm.Execute(); err != nil {
		fmt.Println("vm transactionerr > ", err)
		return err
	}

	return nil
}`

The above is to spend UTXO from a segwit address to a receiving segwit address, I am not sure if the issue I am having is with the implement, but I keep getting : **Only uncompressed keys are accepted post-segwit** when the code execution gets to **vm.Execute()** failing to validate the signature.
```
// String returns the ban score as a human-readable string.
func (s *DynamicBanScore) String() string {
	s.mtx.Lock()
	r := fmt.Sprintf("persistent %v + transient %v at %v = %v as of now",
		s.persistent, s.transient, s.lastUnix, s.Int())
	s.mtx.Unlock()
	return r
}

// Int returns the current ban score, the sum of the persistent and decaying
// scores.
//
// This function is safe for concurrent access.
func (s *DynamicBanScore) Int() uint32 {
	s.mtx.Lock()
	r := s.int(time.Now())
	s.mtx.Unlock()
	return r
}
```
s.Int() will cause deadlockã€‚So I fixed it #1509 