Set-BuildEnvironment runs as part of initialization, and is extraneous here. Causes additional warnings for users who may import the module outside of the intended folder, and increases load time for the module unnecessarily.

I have the task `BumpVersion` that I want the `Build` task to depend on. That said, I found `$PSBPreference.Build.Dependencies` and have supplied the following array `@('StageFiles', 'BuildHelp', 'BumpVersion')`. However, `BumpVersion` never runs. `StageFiles` and `BuildHelp` do run.

## Expected Behavior
When running the `Build` task, additional dependencies listed in `$PSBPreference.Build.Dependencies` should also run.

## Current Behavior
When running the `Build` task, additional dependencies listed in `$PSBPreference.Build.Dependencies` do not run. Strangely enough, when supplying `$PSBPreference.Build.Dependencies` with only `BumpVersion` the default build task dependencies `StageFiles` and `BuildHelp` still run making me think `$PSBPreference.Build.Dependencies` is not even being correctly passed. 

## Possible Solution
I've verified `$PSBPreference.Build.Dependencies` is being supplied to the `Build` task here: https://github.com/psake/PowerShellBuild/blob/11e1b94f22b295cfa7a6494bc7d0c25e2fb52864/PowerShellBuild/psakeFile.ps1#L54

## Steps to Reproduce (for bugs)
1. simply set `$PSBPreference.Build.Dependencies` in the `properties` block of a `psakeFile.ps1` with the value of @('MyExtraBuildTask')
2. create a task in the `psakeFile.ps1` e.g...
```
task MyExtraBuildTask {
    "doing extra things"
}
```
3. run build.ps1

## Context
I have a few extra tasks that I want to run as part of the build. Specifically, a task that bumps the module version if it has not already been incremented and also a task that uploads test results to appveyor when the BuildSystem is appveyor. 

## Your Environment
<!--- Include as many relevant details about the environment you experienced the bug in -->
* Module version used:
PowerShellBuild = 0.3.0
Psake = 4.8.0
* Operating System and PowerShell version:
MacOS 10.14.6
PowerShell = 6.2.0


I am trying to specify a non-default path for `$PSBPreference.Test.RootDir` in the `psakeBuild.ps1` file. It doesn't appear that the `$projectRoot` variable is being populated before the `Properties` block is instantiated.

I can see that the `$BHProjectPath` is populated at runtime, and `$projectRoot` is being derived from this value.

But if I output the value of $projectRoot during runtime, from inside the `Properties` block, it is empty.

Could you take a look and see if I am correct about the timing issue above?
Additional integration Pester tests are needed to verify the various psake/InvokeBuild tasks function as expected.

## Expected Behavior
psake/InvokeBuild tasks are tested to ensure quality.

## Current Behavior
There is only some basic tests to verify help documentation for the public functions.

## Possible Solution
- Create one or more basic PS modules, execute various build tasks and user Pester to verify the process works as expected.

## Steps to Reproduce (for bugs)
NA

## Context
We need to increase the test coverage to ensure any changes to the build functions or psake/InvokeBuild tasks do not break publicly exposed functionality.

## Your Environment
* Module version used: 0.3.0
* Operating System and PowerShell version: NA

Latest 0.3.0 Beta version. The `Build` task in PowerShell.IB.Tasks is empty `task Build`. As a consequence nothing happens when running ` invoke-build -File .\.build.ps1 -task build`

## Expected Behavior
In previous version 0.2.0 the Build task was `task Build StageFiles, BuildHelp` which built the module. I expect the same from the new version.

## Current Behavior
You get this:

![image](https://user-images.githubusercontent.com/12760779/50151622-53d23080-02b9-11e9-806a-201a15dd83a1.png)

## Possible Solution
Change the PowerShell.IB.Tasks file to either use the same build tasks as previous version or use the tasks specified in `$PSBPreference.Build.Dependencies` which by default is 'StageFiles', 'BuildHelp' (this doesn't appear to be used anywhere but I could be missing it).

* Module version used: 0.3.0-beta
* Operating System and PowerShell version: Windows 10, Windows PowerShell 5.1.17134.407

Since this is aiming to be a "library" of tasks and a framework to use for opinionated templates, perhaps some of the dependency ordering should be loosened?

For instance, maybe I don't want Publish to depend on Test, or maybe I don't want Test to be dependent on Pester because I want to use my own testing framework.

I was thinking of a variable(s?) to make these dependencies conditional. The dependencies would be on by default, but you could set the variable that would effectively remove all the dependencies and then you can pick-and-choose the tasks/jobs and assign dependencies as required in the downstream template.

This would be an "at-your-own-risk" item, but also should probably focus on individual tasks also being autonomous and not being "truly" dependent on each other (e.g. won't fail if a dependency isn't met)

For tasks that require interoperation, could define high level tasks like "Build", "Test", "Publish" but those are just empty tasks with dependencies, so that those could be overridden in the script.