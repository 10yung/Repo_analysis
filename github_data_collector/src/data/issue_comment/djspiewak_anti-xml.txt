Are there plans to release anti-xml for Scala 2.10? I see that there's no.arktekk:anti-xml_2.10:0.5.1 in Maven Central, but that doesn't look like an official anti-xml release. Or is it?


Suppose you have

```
val xml : Elem = <foo><bar/></foo>.convert
```

and I want to modify the document to `<foo><bar><baz/></bar></foo>`.

```
val bar_zipper : Zipper[Elem] = xml \ "bar"
val new_bar_zipper : Zipper[Elem] = bar_zipper.updated(0, bar_zipper.head addChild <baz/>.convert)
val new_xml = new_bar_zipper.unselect apply 0
```

The problem is that unlike most of the other `Zipper` methods, `Zipper[T].unselect` returns a `Zipper[Node]` rather than `Zipper[T]`. Thus `new_xml` has the general type `Node` rather than `Elem`, even though the original zipper was of type `Zipper[Elem]`. If you want to use `Elem`-specific functions on the result, you have to cast it:

```
val new_xml_with_extra_child : Elem = new_xml.asInstanceOf[Elem] addChild <blah/>.convert
```

Hi,

``` scala
  def syncElems(e1: Elem, e2: Elem): Elem = {
    val fullAttrs = e1.attrs.filterNot(_._2.isEmpty)
    val newAttrs = e2.attrs.filterNot(
      at => fullAttrs.keys exists (at._1 == _)).filter(
      at => e1.attrs.keys exists (at._1 == _))
    e1.copy(attrs = fullAttrs ++: newAttrs)
  }
```

throws a CastClassException while

``` scala
  def syncElems(e1: Elem, e2: Elem): Elem = {
    val fullAttrs = e1.attrs.filterNot(_._2.isEmpty)
    e1.copy(attrs = fullAttrs ++: e2.attrs.filterNot(
      at => fullAttrs.keys exists (at._1 == _)).filter(
      at => e1.attrs.keys exists (at._1 == _)))
  }
```

works fine.

Thanks,

G.N

I know Anti-XML is not an XHTML library, but if you want to be able to use it for XHTML (as I did want to), you should know that  while `<script src="foo"></script>` is valid XHTML,  `<script src="foo"/>` isn't.  And now the browser HATES me.

`scala.xml.XML` seems to go to the other extreme, always expanding empty tags to non-empty tags.  I guess I could use Anti-XML just for queries and manipulation XML, but use the `xml.NodeSeq`'s `.toString` to write it to disk, but then I'd either need to keep both representations around, or have some way to convert back from `antixml.Node` to `xml.Node`.

Any suggestions?

Thanks for a nice little library!

P.S. The only valid empty tags in XHTML 1.0 Strict are: `<base/>``<meta/>``<link/>``<hr/>``<br/>``<param/>``<img/>``<area/>``<input/>``<col/>`

I'm grabbing the XHTML 1.0 from this page:

http://en.wikipedia.org/wiki/Adams_State_College

As one big string blob. This is in Scala 2.9.1. on Windows 7, JRE 1.6. When i try to perform:

var xml = XML.fromString(body)

It's throwing me a StackOverflowException, a short segment of the stack trace looks like:

```
at java.util.regex.Pattern$GroupTail.match(Pattern.java:4227)
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4078)
at java.util.regex.Pattern$CharProperty.match(Pattern.java:3345)
at java.util.regex.Pattern$Branch.match(Pattern.java:4114)
at java.util.regex.Pattern$GroupHead.match(Pattern.java:4168)
at java.util.regex.Pattern$Loop.match(Pattern.java:4295)
at java.util.regex.Pattern$GroupTail.match(Pattern.java:4227)
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4078)
at java.util.regex.Pattern$CharProperty.match(Pattern.java:3345)
at java.util.regex.Pattern$Branch.match(Pattern.java:4114)
at java.util.regex.Pattern$GroupHead.match(Pattern.java:4168)
at java.util.regex.Pattern$Loop.match(Pattern.java:4295)
at java.util.regex.Pattern$GroupTail.match(Pattern.java:4227)
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4078)
```

The rest of the stack trace looks about the same. This is a pretty typical, if slightly large, XHTML page (~450kb), and it should not be cause the XML parser to fail.

The TODO list is quite outdated by now, and should probably be revised.

Also, I'm looking for a new issue to tackle, so having an updated list would definitely help me choosing.

Thanks.

When you have a namespace asigned to the root node default prefix like this.

``` xml
<root xmlns="urn:foo:bar">
<child/>
</root>
```

This translates into the Anti-xml tree

``` scala
Elem(Some(""), "root", Attributes(), Map(("" -> "urn:foo:bar"), Group(Elem(None, "child", Attributes(), Map(("" -> "urn:foo:bar"), Group.empty))
```

This is incorrect. The prefix in the child node should also be Some("")

I've been trying to use anti-xml to parse and generate some XML documents that use some elements from the atom namespace [1](http://www.w3.org/2005/Atom). My code uses our own private namespace, but in the documents it is bound to the default namespace. An example XML looks like this:

```
<profile xmlns="http://.." xmlns:atom="http://www.w3.org/2005/Atom">
  <atom:link id=".." href=".."/>
</profile>
```

I've run into two issues with this.

The first is that the conversions drop the namespace entirely (see [2](https://github.com/djspiewak/anti-xml/blob/5e5bd3fd95aba203d435c2266283ec6fc2296a7d/src/main/scala/com/codecommit/antixml/conversion.scala#L128)). I've fixed this so that it's more in line with the existing API.

The second issue I see now is that the entire API is oriented around the "prefix" parts instead of the namespace part. When I'm converting the XML to my Profile object I don't care about the prefix, I just want the elements named "link" inside the Atom namespace. Right now I'll have to do this by hand.

I would like to adjust the API so that it's more in line with java.xml.QName and W3's definition, see [3](http://docs.oracle.com/javase/6/docs/api/javax/xml/namespace/QName.html) and [4](http://www.w3.org/TR/xmlschema-2/#QName). The "prefix" is not a part of the qualified name of an element and really not very interesting when it comes to matching on objects.

I'm hoping to be able to write something like this:

```
def atomLinks(e: Elem) = (e / (Namespaces.atom -> "link"))
```

Does this make sense? I really like anti-xml and we're using it for most of our XML stuff now but this came up as an issue the other day and I don't see a way to fix it without changing anti-xml.

I've implemented my ideas under my own repository, [5](https://github.com/trygvis/anti-xml). I'm not entirely satisfied with the current solution but it shows what I want to achieve. All the existing tests passes and I've added some more too.

An attempt to break `Zipper` into traits as per #76.
Not sure whether this is the most elegant way to do this...

As there's a bunch of ZipperXXX files now, I decided to move them into a separate folder.
Should we move them into a separate sub-package as well?
