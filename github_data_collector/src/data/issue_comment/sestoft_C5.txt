This PR addresses #53:

* Implements `SCG.ISet<T>` on `TreeSet<T>`
* Implements `SCG.IDictionary<K, V>` on `DictionaryBase<K, V>`

I also attempted to implement `SCG.ISet<T>` on `HashSet<T>`, but since it seems to be missing a way to get and delete items by index, I am not sure how to proceed. Here is the (non compiling) attempt, in case you want to try to complete it:

* [4901d561dda3ee6385aa0f366ff34b51aee09904](https://github.com/NightOwl888/C5/commit/4901d561dda3ee6385aa0f366ff34b51aee09904)

## Redundant Behavior

Do note that the `AddAll`, `ContainsAll` `RetainAll`, and `RemoveAll` methods are now redundant with `UnionWith`, `IsSupersetOf`, `IntersectWith`, and `ExceptWith`, respectively.

### Options

1. Leave the redundant methods in place
2. Break C5 backward compatibility, but follow .NET conventions by removing (or making internal) `AddAll`, `ContainsAll` `RetainAll`, and `RemoveAll`
3. Preserve C5 backward compatibility, and hide `UnionWith`, `IsSupersetOf`, `IntersectWith`, and `ExceptWith` by using explicit interface declarations

## Performance

Most of the `ISet<T>` methods were reverse engineered from `SCG.HashSet<T>`, but it may be possible to implement some of the methods at a lower level for better performance - I didn't look into it.
## Description
When Importing C5 into Unity 2019.3 a whole slew of errors occur.  I've seen references that c5 is/was actually compatible with Unity and I even have access to an older c5.dll that works, but was hoping to get this into Unity 

## Solution
Version of c5 that is able to be integrated into Unity
GuardedDictionary implements the Keys property as 'return dict.Keys;' with a TODO:
//TODO: guard with a read-only wrapper? Probably so!

GuardedSortedDictionary implements the Keys property as 'return null;'

The implementations should be fixed, in particular the one in GuardedSortedDictionary.

The implementations should probably wrap the keys of the wrapped dictionary in a GuardedCollection / GuardedSorted.
Seems reasonable to expect a "Set" to implement `System.Collections.Generic.ISet`, especially since the TreeSet in Java does just that. Is there any particular reason why that was left out?
[The `MoveNextAfterUpdate()` test](https://github.com/sestoft/C5/blob/master/C5.Tests/arrays/ArrayListTest.cs#L908) in `ArrayListTest` seems to contain a mistake causing it to test the wrong thing:

``` C#
[Test]
public void MoveNextAfterUpdate()
{
    list.Add(5);
    list.Add(8);
    list.Add(5);

    SCG.IEnumerator<int> e = list.GetEnumerator();

    e.MoveNext();
    list.Add(99); // <-- Bug: this should be Update()
    Assert.Throws<CollectionModifiedException>(() => e.MoveNext());
}
```

The test checks if calling `Add()` makes the enumerator fail. It should probably be a call to `Update()` instead.

I'm not sure if this mistake has been duplicated elsewhere.

In `ArrayListTest` events are not properly tested. [The method `listen()`](https://github.com/sestoft/C5/blob/master/C5.Tests/arrays/ArrayListTest.cs#L90) only adds event handlers to the `Added` event, thereby ignoring all other events:

``` C#
private void listen() {
    seen.Listen(list, EventTypeEnum.Added);
}
```

This is correctly done in [the `HashedArrayListTest` class](https://github.com/sestoft/C5/blob/master/C5.Tests/arrays/HashedArrayListTest.cs#L88):

``` C#
private void listen() {
    seen.Listen(list, EventTypeEnum.All);
}
```

Be aware that fixing the `listen()` method will cause [the `Listenable()` test](https://github.com/sestoft/C5/blob/master/C5.Tests/arrays/ArrayListTest.cs#L93) to fail. It can, however, easily be fixed by inlining the method:

``` C#
[Test]
public void Listenable()
{
    Assert.AreEqual(EventTypeEnum.All, list.ListenableEvents);
    Assert.AreEqual(EventTypeEnum.None, list.ActiveEvents);
    seen.Listen(list, EventTypeEnum.Added); // <-- Bug fix
    Assert.AreEqual(EventTypeEnum.Added, list.ActiveEvents);
}
```

Even though C5 will compile successfully for a Windows 10 UWP, attempting to build a store package using .NET Native compilation will result in an Infinite Expansion exception that leads to an overflow.

I realize Windows 10 support is not listed here, but wanted to make sure you guys are aware of the issue.

C5 HashedLinkedList raises an assertion error at the method **splittaggroup** when adding lots of elements. In the attached image example, the list had close to 4 million integers.

As the debugger shows, previous-taggroup-tag (ptgt) is equal to _int.MaxValue - 1_ and next-taggroup-tag (ntgt) is equal to [int.MaxValue](http://msdn.microsoft.com/es-es/library/system.int32.maxvalue.aspx). So those values do not verify the assertion that `ptgt + 1 <= ntgt - 1`.

"[The C5 Generic Collection Library for C# and CLI](http://www.itu.dk/research/c5/latest/ITU-TR-2006-76.pdf)" technical report states at section 13.8 _Implementation of hashed linked lists_:

> Note, however, that the typical case of always inserting at the end of the list seems to be close to the worst-case scenario for maintaining the tags.

That is the case.

You can run this simple program that tries to reproduce this error: https://github.com/ovidiomanteiga/C5HashedLinkedListAssertionError

![c5hashedlinkedlistassertionerror](https://f.cloud.github.com/assets/5225102/1154219/e2f0b678-1f3a-11e3-93b3-305f29812237.png)
