I get the following error

```"error_message":"Display socket is taken but lock file is missing - check the Headless troubleshooting guide","error_class":"Headless::Exception","failed_at":1564710065.787636,"retry_count":0,"error_backtrace":["/Users/buzz/.gem/ruby/2.6.3/gems/headless-2.3.1/lib/headless.rb:207:in `ensure_xvfb_launched'","/Users/buzz/.gem/ruby/2.6.3/gems/headless-2.3.1/lib/headless.rb:195:in `launch_xvfb'","/Users/buzz/.gem/ruby/2.6.3/gems/headless-2.3.1/lib/headless.rb:182:in `block in pick_available_display'"```
i added extra but video doesnt have sound

`headless = Headless.new(dimensions: '1080x1920x24' ,video: {log_file_path: STDERR, frame_rate: 30, codec: 'libx264', devices: ["-draw_mouse 0"], extra: %w(-acodec libmp3lame -ar 44100 -ab 128k -threads 0) })`
Suppose I invoke `Headless.run(display: pick-a-display(), autopick: true) do ... end`, so that I specify both an initial guess for a display, and ask Headless to handle the rest.  My server, for whatever the reason, currently has a particular display that consistently responds with "Cannot establish any listening sockets".  (I don't know why; there are no Xvfb processes running at all.  But that's beside the point right now...)  So if `pick-a-display()` happens to hit that bad number, then this call to `Headless.run` will always fail, even though I've asked Headless to autopick a working display.

It seems to me that `ensure_xvfb_launched` is overly aggressive about terminating the call to `:run`.  It would be nice for `pick_available_display` do something like
```
  def pick_available_display(display_set, can_reuse)
    @pending_exception = nil
    display_set.each do |display_number|
      @display = display_number

      return true if xvfb_running? && can_reuse && (xvfb_mine? || !@autopick_display)
      begin
        return true if !xvfb_running? && launch_xvfb
      rescue Headless::Exception => e
        @pending_Exception = e
      end
    end
    raise @pending_exception || Headless::Exception.new("Could not find an available display")
  end
```
so that if other display options were available, the call would still succeed...
I am trying to use headless in a program with SuckerPunch were each job independently accesses different websites using watir/selenium/chrome.  Kicking off a single job works fine, but I begin to experience reliability issues if I try to run more than one job concurrently.  Is headless able to be used in this manner?  I followed your instructions for shared use via "forking", but if by that you meant creating separate processes, then that might explain my issue.  In any event, can headless be used by multiple threads withing the same process, and if so, what is the proper usage pattern?

Thanks.
Hi,

Can u give some guidance for using this project on command line? Is it possible to use it without knowing Ruby?

I am struggling with this issue and thought that may be your application solve the problem..

https://stackoverflow.com/questions/47294203/how-to-capture-html5-video-programmatically-headless?noredirect=1#comment81580305_47294203

I'm getting the following error with the `video: { log_file_path: STDERR} ` option

`Unknown input format: 'x11grab'`

This page seems to suggest that `avfoundation` should be used instead on mac.
https://github.com/Homebrew/legacy-homebrew/issues/17641

Any ideas on how to fix this?
Hello,

I have a few things about the headless gem and video recording. 

1. How can I hide the mouse cursor?
2. In method **stop_and_save** in **VideoRecorder** class good option is add mkdir_p before mv

```
def stop_and_save(path)
  Recorder::CliUtil.kill_process(@pid_file_path, :wait => true)
  if File.exists? @tmp_file_path
    begin
      **FileUtils.mkdir_p(File.dirname(path))**
      FileUtils.mv(@tmp_file_path, path)
    rescue Errno::EINVAL
      nil
    end
  end
end
```
what do you think?


3. In method **command_line_for_capture** in **VideoRecorder** class is a small bug:

Before (look on @devices position in array):
```
[
 CliUtil.path_to(provider_binary_path),
 "-y",
 "-r #{@frame_rate}",
 "-s #{dimensions}",
 "-f x11grab",
@devices,
 "-i :#{@display}",
 group_of_pic_size_option,
 "-vcodec #{@codec}",
 @extra,
 @tmp_file_path
].flatten.compact.join(' ')
```

After:
```
[
 CliUtil.path_to(provider_binary_path),
 "-y",
 "-r #{@frame_rate}",
 "-s #{dimensions}",
 "-f x11grab",
 "-i :#{@display}",
 @devices,
 group_of_pic_size_option,
 "-vcodec #{@codec}",
 @extra,
 @tmp_file_path
].flatten.compact.join(' ')
```

Could you fix it?


4. Good idea is add something like **post_processing_video** method or **yield** that will be triggered in method **stop_and_save** before `FileUtils.mv(@tmp_file_path, path)` command. For instance:

```
def stop_and_save(path, &block)
  Recorder::CliUtil.kill_process(@pid_file_path, :wait => true)
  if File.exists? @tmp_file_path
    begin
      FileUtils.mkdir_p(File.dirname(path))
      yield(@tmp_file_path) if block_given?
      FileUtils.mv(@tmp_file_path, path)
    rescue Errno::EINVAL
      nil
    end
  end
end
```

This solution will be very helpful for add watermark or other operation after recording.
What do you think?


5. Last one question: how can I stop recording from bash or external script if I know screen number?

Best Regards
Peter


Hello,

I saw the issue: [#66](https://github.com/leonid-shevtsov/headless/issues/66) 
and I saw the [video_recorder.rb](https://github.com/leonid-shevtsov/headless/blob/master/lib/headless/video/video_recorder.rb)

In line 97 is a small bug because probably variable @devices should be 1 line below:
```
"-s #{dimensions}",
"-f x11grab",
"-i :#{@display}",
@devices,
group_of_pic_size_option,
"-vcodec #{@codec}",
```

could you check it and fix?
Thank you!
Thanks for the wonderful gem. 

I am trying to see how this can work with Selenium Docker images. If I understand correctly, Docker selenium exposes a selenium server running already on port 4444

Do we just change headless to always use that selenium server or is there a better way to do this without having to write a lot of Dockerfile to install browsers/ruby/selenium etc?

Thanks
Rajat Jindal
First off, thanks for the awesome gem.

I want to use headless to run concurrent selenium builds using this gem, and I see that `xvfb` should allow being passed an [`--auto-servernum`](http://manpages.ubuntu.com/manpages/xenial/en/man1/xvfb-run.1.html) flag at runtime. This will presumably prevent the following collision error I'm seeing currently when running concurrent builds:

```
Errno::ECONNREFUSED: Failed to open TCP connection to 127.0.0.1:7057 (Connection refused - connect(2) for "127.0.0.1" port 7057)
```

I've tried invoking headless using a random display each time inside a sidekiq worker with concurrency of 3, but I get similar errors

``` ruby
headless = Headless.new(display: rand(100))
headless.start
```
