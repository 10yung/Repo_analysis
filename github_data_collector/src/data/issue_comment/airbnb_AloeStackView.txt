I would like to have access to the cell that contains a row. 
I wanted to create an extension similar to this one, but `stackView` is `private`.
```
extension AloeStackView {
    func cell(with row: UIView) -> StackViewCell? {
        return stackView.arrangedSubviews.first(where: { arrangedSubview in
            guard let cell = arrangedSubview as? StackViewCell, cell.contentView == row else { return false }
            return true
        }) as? StackViewCell
    }
}
```
I want this access because I want to change second cell's topLeft and topRight corner radius.

Is there a way to do what I mentioned without making `stackView` `public`? If no, would it be possible to make it `public`?

Thank you!
I want to know when each cell is visible/invisible like UITableViewDelegate.
What do you think?

I think paging would make this library work quite nicely for creating App Store-like headers and scroll views, see https://github.com/arnauddorgans/InfiniteLayout, purposes for which UICollectionView is still used.
On iOS 13, the view that's displayed within a popover now extends to include the popover arrow. As a result, additional safeAreaInsets are applied to include the arrow.

When presenting an AloeStackView in a popover with the arrow pointing left or right, this currently isn't being taken into account. As a result, the cell insets (content and separator) are too close to the edges. I've tracked this down to `insetsLayoutMarginsFromSafeArea = false` being partially the culprit, as well as the separator leading/trailing constraints not taking the safe area into account.

I haven't seen any visual issues in the sample app, or my own projects with  `insetsLayoutMarginsFromSafeArea` enabled, so I'm not sure if there is a specific reason for this being disabled in the Airbnb app. When I test this out with the default value set (true), everything works as expected (tested on iOS 11, 12, and 13).

I've included a screenshot of the issue on iOS 13.  As you can see, the content is too close to the left side of the popover.
![image](https://user-images.githubusercontent.com/104855/63295290-8473cb00-c289-11e9-8052-8c12b0e6ef6e.png)

With `insetsLayoutMarginsFromSafeArea` enabled and the separators taking the safe area into account, everything looks as expected (tested on iOS 11, 12, and 13).
![image](https://user-images.githubusercontent.com/104855/63295330-9d7c7c00-c289-11e9-83af-a497bf1d0be9.png)

Ignore the switch cell extending off the right hand side. That's not an issue with the stack view, just some internal constraints in one of the sample cells.
hello, I need a callback for animation when I use it by my case.
but, It was not implemented, so I made a request like this.
I hope to be approved

I'm add a sticky feature to the AloeStackView.
What do you think?
While using debug view hierarchy, it is showing "Layout Issues: Scrollable content size is ambiguous for AloeStackView.AloeStackView."
This pull request adds the ability to AloeStackView to adapt its insets to the superview's layout margins.

Motivations:
- Avoid to explicitly set the default margin when we want to inherit from the superview margins
- Automatic support for universal apps (iPhone and iPad can have different layout margins)

An example ViewController has been added to showcase this. The screenshot below comes from that VC. The default insets are set to 0. The existing margin is the one that the superview defines.

Most of the lines in this PR are related to the example. The actual trick is done by overriding the `preservesSuperviewLayoutMargins` property of AloeStackView/UIScrollView.

<img src="https://user-images.githubusercontent.com/6131420/52121807-85b11380-2629-11e9-8cf9-ab54420bc258.png" width=300/>