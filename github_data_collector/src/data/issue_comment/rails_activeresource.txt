Currently the ConnectionError class (that ServerError inherits its behavior from) implements a failure message that builds a Response message: 
```
"  Response message = #{response.message}." if response.respond_to?(:message)
```
This is resulting in 500 errors from our remote service always returning `"Internal Server Error "`, so instead of being able to manually create more granular failure reasons, we have roughly 13,000 "Internal Server Errors" 

I propose implementing an additional line to the error message, where developers can add in custom error messages, something like this 
```
message << "  Error Message = #{response.body.errors}." if response.respond_to?(:body) && response.body.respond_to?(:errors) 
```

This way we can add in additional functionality without having to change the existing api.

Thanks in advance!

# Steps to reproduce:

1. Make a REST API endpoint which supposedly fails, and returns HTML response (instead of JSON). Add a `rescue` block to catch all errors and get the `error` object from it.
2. Make the request with ActiveResource to that REST API endpoint.
3. See that the request blows up with an exception `JSON::ParserError`.
4. See that in the `error` object in the rescue block doesn't have a `response` attribute.

# Expected result:

The `error` object should ideally have the `request` and `response` objects attributes, so that we can log them, and properly react to such cases depending on the request and response attributes, headers, etc.

# Code place where the issue is:

It's in file:
https://github.com/rails/activeresource/blob/master/lib/active_resource/base.rb

This code fragment:
```ruby
        # Find every resource
        def find_every(options)
          begin
            case from = options[:from]
            when Symbol
              instantiate_collection(get(from, options[:params]), options[:params])
            when String
              path = "#{from}#{query_string(options[:params])}"
              instantiate_collection(format.decode(connection.get(path, headers).body) || [], options[:params])
            else
              prefix_options, query_options = split_options(options[:params])
              path = collection_path(prefix_options, query_options)
              instantiate_collection((format.decode(connection.get(path, headers).body) || []), query_options, prefix_options)
            end
          rescue ActiveResource::ResourceNotFound
            # Swallowing ResourceNotFound exceptions and return nil - as per
            # ActiveRecord.
            nil
          end
        end
```

This call fails:
```ruby
format.decode(connection.get(path, headers).body
```

The call is chained, so the request and response objects are not captured to a raised error, and cannot be accessed if `format.decode` raises an exception.


# Suggested solution:

```ruby
module ActiveResource

  class ResponseError < StandardError
    attr_reader :response

    def initialize(response, message = nil)
      @response = response
      @message = message
    end

    def to_s
      @message
    end
  end

end
```

Raise the `ResponseError` when there is an error parsing response JSON.


Would be really valuable if this can be solved.

Thanks so much!


Can i using bulk query in action?

In my case, at least, Unlike ActiveRecord thing, **Base#create** doesn't support argument shape of array.

If this feature doesn't implemented yet, is there any great idea to implement it on the concept of rails way?