Scenario:  We launch two different tasks in parallel.  Let's say two bash scripts.  One sleeps and echos that is done.  The other sleeps and doesn't echo and simply exits.

If the entire bash script does not send any output to console or error and exits, it may not be perceived as completed.

My hunch
-----------
The wrong exit code or wrong signal is sent and parallel doesn't capture that signal and never perceives that bash script as completed.  As a result all of the parallel did not complete and did not exit its own process.

OR

The empty output or empty error never gets closed because it never got used.  The buffer that was reading the output console or error console output never closed or exited so it never perceived that thread to be completed either and hung on reading an empty file expecting to read something.  As a result all of the parallel did not complete and did not exit its own process.

If I try to run two `parallel` commands at once, I get weird issues and panics. This is because both commands use the same directory `/tmp/parallel` for their internal state.
Every time a `parallel` command is ran, a different `/tmp` directory should be chosen, by appending several random characters to the end of the existing directory name, like other utilities using `/tmp` directories do.

Alternatively, use `/tmp/parallel-${PID}` as the tmp directory to avoid collisions.

In practice this bug causes hard to debug issues when shell scripts involving `parallel` are ran concurrently.
When using parallel with grep/ripgrep, without particular options, neither this parallel nor GNU parallel will display the file name (xargs works well). But GNU parallel has an `-X` that can solve this issue. How can I achieve with this parallel's command line?

![2018-09-27-204342_1919x856_scrot](https://user-images.githubusercontent.com/843267/46146902-84946200-c296-11e8-8df7-11b0335f31ed.png)

BTW, when using `xargs` with `ripgrep`, the matched patterns can still be highlighted automatically (`--color=auto`); while neither GNU parallel nor this parallel can keep the highlighting.

Do you intend to keep maintaining it? My intent was to continue the packaging for Fedora but if upstream is dead, it's moot.
parallel seems not to be able to understand Windows directory structure, and thus when I put {/} for basename, it just outputs the whole entire line and when I use {.} it outputs the whole entire line, minus the file's extension. This is under Powershell in Windows 10, not only that, it seems to not be able to understand Asian characters.
https://pastebin.com/zqbinCB5

When I use `ls -Recurse -file -Path '*.m4a' | select -ExpandProperty FullName | parallel 'echo {.}'`
it will not understand at all
https://pastebin.com/XB4kX2km
Dear Michael

Attached is a security bug. It has been encrypted for the key IDs 0xB2732D4240C9212C, 0xAAA0BBBF61CC465A, 0xE1FA5A7641DCA481, 0x70A85F710B8EFB78, 0xD4207ED15F3E197D, 0x777000CCB3384721. They all refer to the email address <michael@system76.com>, so I hope you have the private key to at least one of them.

-----BEGIN PGP MESSAGE-----
Version: GnuPG v1

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
EKH5L0h78+T4+as3
=ZfDC
-----END PGP MESSAGE-----

Regards,



Ole Tange


While executing the command
```sh
echo $TMP/*.html | xargs -n1 echo | shuf | parallel -v -j 12 timeout 25s ./classify.sh {}
```
parallel sometimes panics.

This is non-deterministic, but not rare, I encountered this panic 4 times today.

The line that panics is: https://github.com/mmstick/parallel/blob/master/src/input_iterator/iterator.rs#L127 - which means the start and end indices this code gets are bogus.

```rust
parallel: processing task #3470 of 5210: '/tmp/tmp.yrWq6RE9sE/01-0179.html'
parallel:  completed task #3465 of 5210: '/tmp/tmp.yrWq6RE9sE/06-0116.html'
parallel: processing task #3471 of 5210: '/tmp/tmp.yrWq6RE9sE/01-0143.html'
parallel:  completed task #3466 of 5210: '/tmp/tmp.yrWq6RE9sE/08-0116.html'
parallel: processing task #3472 of 5210: '/tmp/tmp.yrWq6RE9sE/17-0215.html'
parallel:  completed task #3471 of 5210: '/tmp/tmp.yrWq6RE9sE/17-0215.html'
parallel:  completed task #3469 of 5210: '/tmp/tmp.yrWq6RE9sE/01-0179.html'
parallel:  completed task #3470 of 5210: '/tmp/tmp.yrWq6RE9sE/01-0143.html'
parallel:  completed task #3467 of 5210: '/tmp/tmp.yrWq6RE9sE/05-0116.html'
parallel:  completed task #3468 of 5210: '/tmp/tmp.yrWq6RE9sE/02-0187.html'
parallel:  completed task #3463 of 5210: '/tmp/tmp.yrWq6RE9sE/15-0116.html'
parallel:  completed task #3458 of 5210: '/tmp/tmp.yrWq6RE9sE/01-0021.html'
parallel:  completed task #3460 of 5210: '/tmp/tmp.yrWq6RE9sE/07-0116.html'
parallel:  completed task #3464 of 5210: '/tmp/tmp.yrWq6RE9sE/14-0116.html'
thread '<unnamed>' panicked at 'slice index starts at 8184 but ends at 0', libcore/slice/mod.rs:791:5
stack backtrace:
   0:     0x5555555adcf3 - std::sys::unix::backtrace::tracing::imp::unwind_backtrace::h29e5ac0a73e43b37
                               at libstd/sys/unix/backtrace/tracing/gcc_s.rs:49
   1:     0x5555555a85d4 - std::sys_common::backtrace::_print::hb6ee6b541022327a
                               at libstd/sys_common/backtrace.rs:71
   2:     0x5555555acd5d - std::panicking::default_hook::{{closure}}::h8e9c6a32e77ac04c
                               at libstd/sys_common/backtrace.rs:59
                               at libstd/panicking.rs:206
   3:     0x5555555aca59 - std::panicking::default_hook::he3c4c5ba16c3cf24
                               at libstd/panicking.rs:222
   4:     0x5555555ad1bf - std::panicking::rust_panic_with_hook::hdbcff6b8ddc25d62
                               at libstd/panicking.rs:400
   5:     0x5555555acfe2 - std::panicking::begin_panic_fmt::h3d382061e7c80929
                               at libstd/panicking.rs:347
   6:     0x5555555acf12 - rust_begin_unwind
                               at libstd/panicking.rs:323
   7:     0x5555555f2440 - core::panicking::panic_fmt::h8b546590a7a56fd8
                               at libcore/panicking.rs:71
   8:     0x5555555f2864 - core::slice::slice_index_order_fail::ha1b5b1df83303204
                               at libcore/slice/mod.rs:791
   9:     0x55555558adb2 - <parallel::input_iterator::iterator::InputIterator<IO>>::next_value::hcaac5f652e3f3c94
  10:     0x555555579df5 - <parallel::input_iterator::lock::InputsLock<IO>>::try_next::ha880198ad3e6d90c
  11:     0x55555556e102 - <parallel::execute::exec_commands::ExecCommands<IO>>::run::h06077d53435c9547
  12:     0x55555557dead - std::sys_common::backtrace::__rust_begin_short_backtrace::h21aca1d76f499ac2
  13:     0x5555555761b7 - std::panicking::try::do_call::h0eccb819cd02e814
  14:     0x5555555bbb1e - __rust_maybe_catch_panic
                               at libpanic_unwind/lib.rs:102
  15:     0x55555559323a - <F as alloc::boxed::FnBox<A>>::call_box::h362177bfb878bea9
  16:     0x5555555b3a4b - std::sys::unix::thread::Thread::new::thread_start::h85318e0eb633e0b4
                               at /checkout/src/liballoc/boxed.rs:798
                               at libstd/sys_common/thread.rs:24
                               at libstd/sys/unix/thread.rs:90
  17:     0x7ffff77b7493 - start_thread
  18:     0x7ffff72e4abe - __clone
  19:                0x0 - <unknown>
thread '<unnamed>' panicked at 'called `Result::unwrap()` on an `Err` value: "PoisonError { inner: .. }"', libcore/result.rs:945:5
stack backtrace:
   0:     0x5555555adcf3 - std::sys::unix::backtrace::tracing::imp::unwind_backtrace::h29e5ac0a73e43b37
                               at libstd/sys/unix/backtrace/tracing/gcc_s.rs:49
   1:     0x5555555a85d4 - std::sys_common::backtrace::_print::hb6ee6b541022327a
                               at libstd/sys_common/backtrace.rs:71
   2:     0x5555555acd5d - std::panicking::default_hook::{{closure}}::h8e9c6a32e77ac04c
                               at libstd/sys_common/backtrace.rs:59
                               at libstd/panicking.rs:206
   3:     0x5555555aca59 - std::panicking::default_hook::he3c4c5ba16c3cf24
                               at libstd/panicking.rs:222
   4:     0x5555555ad1bf - std::panicking::rust_panic_with_hook::hdbcff6b8ddc25d62
                               at libstd/panicking.rs:400
   5:     0x5555555acfe2 - std::panicking::begin_panic_fmt::h3d382061e7c80929
                               at libstd/panicking.rs:347
   6:     0x5555555acf12 - rust_begin_unwind
                               at libstd/panicking.rs:323
   7:     0x5555555f2440 - core::panicking::panic_fmt::h8b546590a7a56fd8
                               at libcore/panicking.rs:71
   8:     0x55555558dcde - core::result::unwrap_failed::hb40f5f2f9c7868a2
   9:     0x55555557a142 - <parallel::input_iterator::lock::InputsLock<IO>>::try_next::ha880198ad3e6d90c
  10:     0x55555556e102 - <parallel::execute::exec_commands::ExecCommands<IO>>::run::h06077d53435c9547
  11:     0x55555557dead - std::sys_common::backtrace::__rust_begin_short_backtrace::h21aca1d76f499ac2
  12:     0x5555555761b7 - std::panicking::try::do_call::h0eccb819cd02e814
  13:     0x5555555bbb1e - __rust_maybe_catch_panic
                               at libpanic_unwind/lib.rs:102
  14:     0x55555559323a - <F as alloc::boxed::FnBox<A>>::call_box::h362177bfb878bea9
  15:     0x5555555b3a4b - std::sys::unix::thread::Thread::new::thread_start::h85318e0eb633e0b4
                               at /checkout/src/liballoc/boxed.rs:798
                               at libstd/sys_common/thread.rs:24
                               at libstd/sys/unix/thread.rs:90
  16:     0x7ffff77b7493 - start_thread
  17:     0x7ffff72e4abe - __clone
  18:                0x0 - <unknown>
thread '<unnamed>' panicked at 'called `Result::unwrap()` on an `Err` value: "PoisonError { inner: .. }"', libcore/result.rs:945:5
[more PoisonErrors omitted]
```
When using the `-v` flag for parallel, the `processing task #x` number doesn't match up with `completed task #x`

```
mateon@hydra:/shared/dev/fuzz$ parallel -v echo ::: 1
parallel: processing 1 inputs on 8 threads
parallel: processing task #1 of 1: '1'
1
parallel:  completed task #0 of 1: '1'
```
# Issue
Using parallel version `MIT/Rust Parallel 0.11.3`

## Steps to Test
1. Execute script
```
#!/usr/bin/env bash

parallel echo ::: 1 2 ::: A B
```
Output:
```
1 A
1 B
2 A
2 B
```
2. Execute script
```
#!/usr/bin/env bash
my_function() {
    echo $1 $2
    echo "more things"
}
export -f my_function
parallel my_function ::: 1 2 ::: A B
```
Output:
```
parallel: command error: I/O error: No such file or directory (os error 2)
parallel: command error: I/O error: No such file or directory (os error 2)
parallel: command error: I/O error: No such file or directory (os error 2)
parallel: command error: I/O error: No such file or directory (os error 2)
parallel: encountered errors during processing:
1: 1 A: I/O error: No such file or directory (os error 2)
2: 1 B: I/O error: No such file or directory (os error 2)
3: 2 A: I/O error: No such file or directory (os error 2)
4: 2 B: I/O error: No such file or directory (os error 2)
```

Am I doing something wrong in the second example?
I am on Mac OS

Thanks for your support

1. Installation instructions for a Mac without rustup would be really helpful.
(I had used homebrew to install rust: brew install rust)

2. Any prospect of supporting ssh for distributed parallel processing (like GNU parallel)?