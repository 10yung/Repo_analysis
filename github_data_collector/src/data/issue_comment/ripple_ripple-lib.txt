Bumps [mocha-junit-reporter](https://github.com/michaelleeallen/mocha-junit-reporter) from 1.23.2 to 1.23.3.
<details>
<summary>Commits</summary>
<ul>
<li><a href="https://github.com/michaelleeallen/mocha-junit-reporter/commit/94016cce032a62df330bf643437ddc1231848368"><code>94016cc</code></a> 1.23.3</li>
<li><a href="https://github.com/michaelleeallen/mocha-junit-reporter/commit/221d8309e45e98cccbc40f1af37e66063a8a7bdf"><code>221d830</code></a> Fix option parsing for mocha 6+</li>
<li><a href="https://github.com/michaelleeallen/mocha-junit-reporter/commit/3ecd9ea6ac7c1069c48fe3f6b7197ae425f4c67a"><code>3ecd9ea</code></a> Update libxmljs for node 12</li>
<li>See full diff in <a href="https://github.com/michaelleeallen/mocha-junit-reporter/compare/v1.23.2...v1.23.3">compare view</a></li>
</ul>
</details>
<br />


[![Dependabot compatibility score](https://api.dependabot.com/badges/compatibility_score?dependency-name=mocha-junit-reporter&package-manager=npm_and_yarn&previous-version=1.23.2&new-version=1.23.3)](https://dependabot.com/compatibility-score.html?dependency-name=mocha-junit-reporter&package-manager=npm_and_yarn&previous-version=1.23.2&new-version=1.23.3)

Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.

[//]: # (dependabot-automerge-start)
[//]: # (dependabot-automerge-end)

---

<details>
<summary>Dependabot commands and options</summary>
<br />

You can trigger Dependabot actions by commenting on this PR:
- `@dependabot rebase` will rebase this PR
- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it
- `@dependabot merge` will merge this PR after your CI passes on it
- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it
- `@dependabot cancel merge` will cancel a previously requested merge and block automerging
- `@dependabot reopen` will reopen this PR if it is closed
- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually
- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)
- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)
- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)
- `@dependabot use these labels` will set the current labels as the default for future PRs for this repo and language
- `@dependabot use these reviewers` will set the current reviewers as the default for future PRs for this repo and language
- `@dependabot use these assignees` will set the current assignees as the default for future PRs for this repo and language
- `@dependabot use this milestone` will set the current milestone as the default for future PRs for this repo and language
- `@dependabot badge me` will comment on this PR with code to add a "Dependabot enabled" badge to your readme

Additionally, you can set the following in your Dependabot [dashboard](https://app.dependabot.com):
- Update frequency (including time of day and day of week)
- Pull request limits (per update run and/or open at any time)
- Out-of-range updates (receive only lockfile updates, if desired)
- Security updates (receive only security updates, if desired)



</details>
> It seems like the default value cannot be overwritten because it is not listed on https://github.com/ripple/ripple-lib/blob/develop/src/common/schemas/input/api-options.json

https://github.com/ripple/ripple-lib/pull/1044#issuecomment-574112753
Per ripple/rippled#3214

The following fields are deprecated and may be removed without further notice: accepted, hash (use ledger_hash instead), seqNum (use ledger_index instead), totalCoins (use total_coins instead).
The `AccountDelete` Transaction has a transaction cost of 5,000,000 drops (before load scaling), per https://xrpl.org/transaction-cost.html#special-transaction-costs

This bumps into the 2,000,000 drop fee limit imposed on all transactions by default, so `AccountDelete` can't be used unless `maxFeeXRP` is set to '5' or higher. https://xrpl.org/rippleapi-reference.html

Is this acceptable, or do we want to make a special case for `AccountDelete`?
This test appears to pass, but emits an `UnhandledPromiseRejectionWarning`

```
    ✓ reconnect event on heartbeat failure (502ms)
(node:12842) UnhandledPromiseRejectionWarning: NotConnectedError: connect ECONNREFUSED 127.0.0.1:56420
    at Connection._onOpenError (/Users/user/ripple/ripple-lib/src/common/connection.ts:1:51991)
    at Object.onceWrapper (events.js:286:20)
    at WebSocket.emit (events.js:198:13)
    at ClientRequest.req.on (/Users/user/ripple/ripple-lib/node_modules/ws/lib/websocket.js:554:15)
    at ClientRequest.emit (events.js:198:13)
    at Socket.socketErrorListener (_http_client.js:392:9)
    at Socket.emit (events.js:198:13)
    at emitErrorNT (internal/streams/destroy.js:91:8)
    at emitErrorAndCloseNT (internal/streams/destroy.js:59:3)
    at process._tickCallback (internal/process/next_tick.js:63:19)
(node:12842) UnhandledPromiseRejectionWarning: Unhandled promise rejection. This error originated either by throwing inside of an async function without a catch block, or by rejecting a promise which was not handled with .catch(). (rejection id: 3)
(node:12842) [DEP0018] DeprecationWarning: Unhandled promise rejections are deprecated. In the future, promise rejections that are not handled will terminate the Node.js process with a non-zero exit code.
```
As a part of our work on https://github.com/ripple/xrp-api resiliency, I took a look this week at the connection logic inside of ripple-lib, specifically inside the `Connection` class in the `common/connection.ts` file. This file controls all of the connection/reconnection/disconnect/retry/heartbeat/timeout logic that implements the base of RippleAPI's websocket request->response interface, in addition to some basic ledger information tracking. It hasn't seen a meaningful refactoring since it was first created [4 years ago](https://github.com/ripple/ripple-lib/commit/15eb4c290abe144f16f3c64da8e9677fd20b2436) and is probably overdue for one.

Why overdue? The connect logic works fine for the first connection and simple unit tests, but begins to break down when network flakiness is introduced. Scenarios attempted:

- **Connect to Testnet, then remove network connection:** Attempts to reconnect indefinitely, never returns an error to the user that anything is wrong with the reconnect attempt
- **Connect to Testnet without network, then add network connection:** Would refuse to connect if first connection failed, even if network was fine.

Additionally, internal digging identified a few different implementation issues:
- `_disconnect(calledByUser)`: calledByUser has been overloaded to mean a ton of different things, where some not-called-by-user flows still needed the called-by-user behavior.
- `_retryConnect()` would hang unless you first disconnected. `_retry` counter was not always reset as expected
- Events didn't stick to a single format/structure
- errors weren't always propagated through the reconnect flow
- errors weren't always propagated through the request flow
- "onX" event handlers had to be bound and then juggled across async flows/callbacks

## Full interface audit

```ts
class Connection extends EventEmitter {
    
    //////////////
    // PUBLIC INTERFACE
    //////////////

    // GOOD! We don't want to change the public interface at this point
    connect(): Promise<void>;
    disconnect(): Promise<void>;
    reconnect(): Promise<void>;
    getLedgerVersion(): Promise<number>;
    hasLedgerVersions(lowLedgerVersion: any, highLedgerVersion: any): Promise<boolean>;
    hasLedgerVersion(ledgerVersion: any): Promise<boolean>;
    isConnected(): boolean;
    getFeeBase(): Promise<number>;
    getFeeRef(): Promise<number>;
    request(request: any, timeout?: number): Promise<any>;


    //////////////
    // PRIVATE INTERFACE
    //////////////

    // GOOD! These are lower-level helpers that don't seem to be causing any trouble on their own
    private _ws;
    private _nextRequestID;
    _parseMessage(message: any): [string, Object] | ['error', string, string, Object];
    _createWebSocket(): WebSocket;

    // We store a mapping of user-provided config options -> private properties.
    // 2. IMPROVE: Keep a single _options or _config property of all the ConnectionOptions (cleaned from user input)
    private _url;
    private _trace;
    private _proxyURL?;
    private _proxyAuthorization?;
    private _authorization?;
    private _trustedCertificates?;
    private _key?;
    private _passphrase?;
    private _certificate?;
    private _timeout;

    // 3. IMPROVE: Can be converted to constructor option (new RippleAPI({log: fn, debug: fn}));
    private _console?;
    
    // 4. IMPROVE: Pull ledger tracking implementation into a separate class/property, untangled from the connection logic
    protected _ledgerVersion: null | number;
    private _availableLedgerVersions;
    private _fee_base;
    private _fee_ref;
    _updateLedgerVersions(data: any): void;
    _updateFees(data: any): void;

    // 5. IMPROVE: Use an off-the-shelf retry algorithm, with builtin backoff logic
    private _retry;
    private _retryTimer;
    _calculateTimeout(retriesCount: any): number;
    _retryConnect(): void;

    // 6. IMPROVE: Rewrite the connect/reconnect implementation to be more resilient to errors
    private _connectTimer;
    private _onOpenErrorBound;
    private _onUnexpectedCloseBound;
    private _connectionTimeout;
    readonly _state: number;
    readonly _shouldBeConnected: boolean;
    _onUnexpectedClose(beforeOpen: any, resolve: any, reject: any, code: any): void;
    _clearReconnectTimer(): void;
    _clearConnectTimer(): void;
    _rebindOnUnexpectedClose(): void;
    _unbindOnUnexpectedClose(): void;
    _onOpenError(reject: any, error: any): void;
    private _clearHeartbeatInterval;
    private _startHeartbeatInterval;
    private _heartbeatInterval;
    private _heartbeat;
    _whenReady<T>(promise: Promise<T>): Promise<T>;
    _disconnect(calledByUser): Promise<void>;

    // 7. IMPROVE: Rewrite the request/response implementation to be more resilient to errors
    _send(message: string): Promise<void>;
    _onMessage(message: any): void;
}

//////////////
// EVENTS INTERFACE
// (Fix tenses throughout)
//////////////

// 8. IMPROVE: connection.emit('connect');
connection.emit('connected')

// 9. IMPROVE: connection.emit('error', {type: 'websocket'|'message', err: Error});
connection.emit('error', 'badMessage', error.message, message)
connection.emit('error', 'websocket', error.message, error)

// 10. IMPROVE: connection.emit('disconnect', {type: 'websocket'|'manual', code?: integer});
connection.emit('disconnected', code || 1006)

// 11. IMPROVE: connection.emit('reconnect', {attempt: integer, success: boolean, err?: Error});
connection.emit('reconnect')
connection.emit('reconnecting', connection._retry)
```

/ cc @intelliot @keefertaylor 
With my home internet connection (Cox cable) the connection tests fail:

```
  Connection
    ✓ default options
    ✓ trace
    ✓ with proxy
    ✓ Multiply disconnect calls
    ✓ reconnect
    ✓ NotConnectedError
(node:56246) UnhandledPromiseRejectionWarning: AssertionError [ERR_ASSERTION]: The expression evaluated to a falsy value:

  assert_plus__WEBPACK_IMPORTED_MODULE_0__.ok.apply(assert_plus__WEBPACK_IMPORTED_MODULE_0__.ok, arguments)

    at Object.AssertDiff [as default] (/Users/user/github/ripple/ripple-lib/node_modules/assert-diff/lib/webpack:/lib/index.mjs:5:1)
    at /Users/user/github/ripple/ripple-lib/test/connection-test.ts:122:13
(node:56246) UnhandledPromiseRejectionWarning: Unhandled promise rejection. This error originated either by throwing inside of an async function without a catch block, or by rejecting a promise which was not handled with .catch(). (rejection id: 2)
(node:56246) [DEP0018] DeprecationWarning: Unhandled promise rejections are deprecated. In the future, promise rejections that are not handled will terminate the Node.js process with a non-zero exit code.
```

Instead of getting `NotConnectedError`, I get the `ConnectionError` from here: https://github.com/ripple/ripple-lib/blob/develop/src/common/connection.ts#L300 (the connection times out after 2 seconds).

However, using a different internet connection (in my case, a VPN) resolves the issue; the test passes.
https://github.com/ripple/rippled/pull/3155

The field `ledgerVersion` is duplicated in the documentation twice. I think that this should be ledgerIndex? 

If so, we can add it to the mock response below. 