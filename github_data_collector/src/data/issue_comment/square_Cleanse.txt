Hello, thanks for this amazing library.
I have an issue with adding the library as a dependency using Swift Package Manager in Xcode 11.3

Error message:
```
The package dependency graph can not be resolved; unable find any available tag for the following requirements:

https://github.com/square/Cleanse â€” 4.2.4..<5.0.0
```

I think the format of `Package.swift` should be updated.
Right we throw a `fatalError` if we have duplicate bindings for the same type. This can be improved. Likely throw an exception to be handled by the `RootComponent` `of(_:)` function.
If the type was of a `AnyWeakProvider` type, then we would only retain a weak reference to its `FutureProvider` instance causing it to become deallocated. We want to retain a strong reference to this `FutureProvider` like we do for normal providers because we still need to be able to acquire an instance of its getter.
I'm having issues with dependency cycle. My Coordinator needs a LoginViewController and my LoginViewController needs a Coordinator to function. But I haven't found a way to get this to work with constructor injection. I also tried propertyInject, but the propertyInjection method doesn't get called. Below you'll see an example of my implementation. 

```swift
protocol HomeRoute {
   func routeHome()
}

protocol RegisterRoute {
   func routeRegister()
}

class Coordinator: HomeRoute, RegisterRoute {

   private let loginViewControllerProvider: Provider<LoginViewController>

   init(loginViewControllerProvider: Provider<LoginViewController>) {
      self. loginViewControllerProvider = loginViewControllerProvider
   }

   func routeHome() {
      // show Home
   }

   func routeRegister() {
      // show Register
   }
}
```


```swift
class LoginViewController {
   typealias Coordinator = HomeRoute & RegisterRoute
   
   private var coordinator: Coordinator

   init(coordinator: Coordinator) {
       self.coordinator = coordinator
   }

   // Tryout with propertyInjection (is not being called)
   func injectProperties(_ coordinator: Coordinator) {
       self.coordinator = coordinator
   }
}
```


```swift
extension Modules {
    struct App: Cleanse.Module {
        static func configure(binder: AppBinder) {
            // Bind Coordinator (BTW is there a way to bind multiple variations of protocols to the same Coordinator? e.g. my RegisterCoordinator might only need a Coordinator confirming to HomeRoute protocol but should get the same Coordinator as the Login)
            binder.bind(LoginViewController.Coordinator.self).sharedInScope().to(factory: ApplicationCoordinator.init)

            binder.bind().to(factory: LoginViewController.init)

            // When running the app, this doesn't seem to do anything.
            binder.bindPropertyInjectionOf(LoginViewController.self).to(injector: LoginViewController.injectProperties) 

        }  
    } 
}
```

