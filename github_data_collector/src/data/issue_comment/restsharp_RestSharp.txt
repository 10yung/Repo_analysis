Hi, I'm making updates for Open Collective. Either you or another core contributor signed this repository up for Open Collective. This pull request adds financial contributors from your Open Collective https://opencollective.com/RestSharp ❤️

  What it does:
  - adds a badge to show the latest number of financial contributors
  - adds a banner displaying contributors to the project on GitHub
  - adds a banner displaying all individuals contributing financially on Open Collective
  - adds a section displaying all organizations contributing financially on Open Collective, with their logo and a link to their website

P.S: As with any pull request, feel free to comment or suggest changes.

  Thank you for your great contribution to the Open Source community. You are awesome! 🙌
  And welcome to the Open Collective community! 😊

  Come chat with us in the #opensource channel on https://slack.opencollective.com - great place to ask questions and share best practices with other Open Source sustainers!
  
According to the documentation, the extension methods should throw an error for any response except 200.

> Asynchronous generic methods GetAsync<T>, PostAsync<T> and so on, which aren't a part of IRestClient interface (those methods are extension methods) return Task<T>. It means that there's no IRestResponse to set the response status to error. We decided to throw an exception when such a request fails. It is a trade-off between the API consistency and usability of the library. Usually, you only need the content of RestResponse instance to diagnose issues and most of the time the exception would tell you what's wrong.

Today, we discovered an issue with our NTLM authentication - while there are larger issues with NTLM, this was particularly problematic because the call to GetAsync<> returned an **empty** object, **not null**, instead of throwing an error, upon receiving 401 Unauthorized. The calling program continued on, unaware, until strange errors later in the program alerted us.

I believe the error lies in this code in the RestClientExtensions.cs. Only certain errors trigger the response, and if the error isn't matched, nothing is thrown.

```
        static void ThrowIfError(IRestResponse response)
        {
            var exception = response.ResponseStatus switch
            {
                ResponseStatus.Aborted   => new WebException("Request aborted", response.ErrorException),
                ResponseStatus.Error     => response.ErrorException,
                ResponseStatus.TimedOut  => new TimeoutException("Request timed out", response.ErrorException),
                ResponseStatus.None      => null,
                ResponseStatus.Completed => null,
                _                        => throw response.ErrorException ?? new ArgumentOutOfRangeException()
            };

            if (exception != null)
                throw exception;
        }
```

## Description

Throw exception on invalid resource query
Fixes #1404

## Purpose
This pull request is a:

- [x] Bugfix (non-breaking change which fixes an issue)
- [ ] New feature (non-breaking change which adds functionality)
- [ ] Breaking change (fix or feature that would cause existing functionality to not work as expected)


## Checklist

- [ ] I have added tests that prove my fix is effective or that my feature works
- [ ] I have added necessary documentation (if appropriate)

## Expected Behavior

Making simple GET/POST/PUT/DELETE commands should take <1 second when connecting to a fast server. This has been tested over network as well as connecting to localhost to rule out network issues.


<!-- If this issue is a feature request remove text below -->
## Actual Behavior
All GET/POST requests work fine. The first PUT/DELETE request made takes anywhere from 15-45 seconds. After that first request the subsequent requests drop to 100ms. Tested making the PUT requests with other methods and the issue does not exist.


## Steps to Reproduce the Problem

This issue occurs in a WPF application. All I have to do to reproduce is start the application debugging, make one put request and it will hang for ~15-45 seconds.

## Specifications

  - Version: 106.10.1

## Tried so far
I have tried googling the issue and found responses about proxy issues and such. I don't believe these apply to me because GET/POST requests are not affected. I tried the solutions anyway and they in fact did not make any difference. 

If there is anything I can provide to help track down the issue, please let me know!

Currently, RestSharp uses `HttpWebRequest`, since that was the "way to do it" back in the days.

Time passed by and `HttpClient` dominates now, so we need to move on.

There are several issues with `HttpWebRequest` implementation that could be resolved by using `HttpClient`:

- Use proper async flow with cancellation and context
- Use a single instance of `HttpClient` for connection pooling
- Support HTTP2

These are the main issues but there're advantages that overall come with more modern implementation.

In the latest versions of .NET framework (full and core), `HttpWebRequest` uses the `HttpClient` anyway. 
This is a continuation of issue https://github.com/restsharp/RestSharp/issues/1399

I followed the suggestions recommended by you with "proper typed object as a parameter" with the same issue that

{"errors":{"":["A non-empty request body is required."]},"title":"One or more validation errors occurred.","status":400,"traceId":"0HLSKFCCSHR42:00000001"}

Interestingly when i updated RestSharp to 16.10.1, i am getting a different message the GET method does not support body.

var request1 = new RestRequest(Method.GET);
request1.AddHeader("Content-Type", "application/json");
request1.AddHeader("Authorization", "Bearer 111");

var test = new SearchRequest()
    {
        ABC= "1253",
EFG = "5254",
Name = new SearchRequestName()
{
    Title = "",
    Forename = "",
    Mid_Initial = "",
    Surname = "",
    Suffix = ""
},
Dob = "",
Address = new SearchRequestAddress()
{
    Sub_Bld_Name = "",
    House_Name = "",
    House_Nb = "",
    Street = "",
    District = "",
    Town = "",
    County = "",
    Postcode = ""
}
};

     request1.RequestFormat = DataFormat.Json;

        var SerializedJsonBody = JsonConvert.SerializeObject(requestBody);

        request1.AddJsonBody(test );

response = apiService.Execute(request);

Could you please help us here.

To my understanding Resharp support "httpclient", please correct me if i am wrong.

Your assistance would be appreciated.
## Expected Behavior


<!-- If this issue is a feature request remove text below -->
## Actual Behavior


## Steps to Reproduce the Problem

  1. Use version 106.10.1
  2. Try this code    var request = new RestRequest(uri.AbsoluteUri);
  3. This version works 106.6.10.

## Specifications

  - Version: 106.10.1
  - Platform:
  - Subsystem:

## StackTrace
<details>

System.ArgumentNullException: Value cannot be null.
Parameter name: name
  at RestSharp.Validation.Ensure.NotEmpty (System.String parameter, System.String name) [0x00008] in <fba61e8429484999a16cc36b262a4d33>:0
  at RestSharp.Parameter..ctor (System.String name, System.Object value, RestSharp.ParameterType type) [0x00011] in <fba61e8429484999a16cc36b262a4d33>:0
  at RestSharp.RestRequest.AddParameter (System.String name, System.Object value, RestSharp.ParameterType type) [0x00000] in <fba61e8429484999a16cc36b262a4d33>:0
  at RestSharp.RestRequest.AddQueryParameter (System.String name, System.String value, System.Boolean encode) [0x00000] in <fba61e8429484999a16cc36b262a4d33>:0
  at RestSharp.RestRequest..ctor (System.String resource, RestSharp.Method method, RestSharp.DataFormat dataFormat) [0x00088] in <fba61e8429484999a16cc36b262a4d33>:0
  at RestSharp.RestRequest..ctor (System.String resource) [0x00000] in <fba61e8429484999a16cc36b262a4d33>:0
  at SNLA.Core.Communication.SNLAHttpClient.GetRaw (System.Uri uri, System.Boolean authenticated) [0x00023] in /Users/jorgenstorlie/Apper/SNLA-app/SNLA.Core/Communication/SNLAHttpClient.cs:182
  at SNLA.Core.Communication.VianettSMSService.CallVianettSMS (System.String vianettBaseUrl, System.Net.NetworkCredential vianettCredential, System.String mobileNumber, System.String message, SNLA.Core.Communication.VianettSMSService+SenderAddressType senderAddressType, SNLA.Core.Communication.VianettSMSService+Priority priority) [0x00064] in /Users/jorgenstorlie/Apper/SNLA-app/SNLA.Core/Communication/VianettSMSService.cs:44
  at Hjelp113.iOS.OnboardingMobileViewController.SendPhoneNumber (System.String phoneNumber) [0x000af] in /Users/jorgenstorlie/Apper/113Xamarin/Hjelp113.iOS/OnboardingMobileViewController.cs:147
  at Hjelp113.iOS.OnboardingMobileViewController.Register () [0x000b1] in /Users/jorgenstorlie/Apper/113Xamarin/Hjelp113.iOS/OnboardingMobileViewController.cs:114
  at Hjelp113.iOS.OnboardingMobileViewController.BtnDone_TouchUpInside (System.Object sender, System.EventArgs e) [0x00032] in /Users/jorgenstorlie/Apper/113Xamarin/Hjelp113.iOS/OnboardingMobileViewController.cs:63
  at System.Runtime.CompilerServices.AsyncMethodBuilderCore+<>c.<ThrowAsync>b__7_0 (System.Object state) [0x00000] in /Library/Frameworks/Xamarin.iOS.framework/Versions/Current/src/Xamarin.iOS/mcs/class/referencesource/mscorlib/system/runtime/compilerservices/AsyncMethodBuilder.cs:1021
  at Foundation.NSAsyncSynchronizationContextDispatcher.Apply () [0x00000] in /Library/Frameworks/Xamarin.iOS.framework/Versions/13.8.3.0/src/Xamarin.iOS/Foundation/NSAction.cs:178
  at at (wrapper managed-to-native) UIKit.UIApplication.UIApplicationMain(int,string[],intptr,intptr)
  at UIKit.UIApplication.Main (System.String[] args, System.IntPtr principal, System.IntPtr delegate) [0x00005] in /Library/Frameworks/Xamarin.iOS.framework/Versions/13.8.3.0/src/Xamarin.iOS/UIKit/UIApplication.cs:86
  at UIKit.UIApplication.Main (System.String[] args, System.String principalClassName, System.String delegateClassName) [0x0000e] in /Library/Frameworks/Xamarin.iOS.framework/Versions/13.8.3.0/src/Xamarin.iOS/UIKit/UIApplication.cs:65
  at Hjelp113.iOS.Application.Main (System.String[] args) [0x00001] in /Users/jorgenstorlie/Apper/113Xamarin/Hjelp113.iOS/Main.cs:12

</details>
## Expected Behavior
Array Of Multiple Cookies in response.cookies
## Actual Behavior
Array Of just one Cookie in response.cookies

## Steps to Reproduce the Problem

  1. Make a Request that sets multiple Cookies via one Set-Cookie

## Specifications

  - Version: 106.10.0
  - Platform: Win10

## Informations
`Set-Cookie: __Host-device_id=AQDx4WuRq1Vkh4ER6XAyZCtr4bOg1eiNydb8espt0ivTh8lNUkfUQchpUHFkup6iyibVP_AbRN67VtV1VI-HsvL53glELz_UNbY;Version=1;Path=/;Max-Age=2147483647;Secure;HttpOnly;SameSite=Lax,csrf_token=AQDDJvDRVpQHvqOQswqNJPpQR9MqMJrlApwADKjUPYRSi1M07dSBiINDdGJdPBS_uxXZPRnu7dUAtmY;Version=1;Domain=;Path=/;Secure;SameSite=Lax` is a example. This Leads to only One Cookie set in response.cookies

In a WPF application (Net 4.7.2) the first request takes some time (in my case about 2 seconds) to return a result. If the request is repeated, the time is drastically reduced (in my case to about 10ms). Under NetCore 3.1 all requests need about two seconds.
Whether the client is instantiated as a singltone or always new doesn't matter.

_Code for measuring the request response time_
```csharp
var restClient = new RestClient("https://localhost:10600");
var versionRequest = new RestRequest("/api/v1/Status/Version", Method.GET);
var stopwatch = new Stopwatch();

stopwatch.Start();
restClient.Execute(versionRequest);
stopwatch.Stop();

Debug.WriteLine($"{stopwatch.ElapsedMilliseconds} ms");
```

## Expected Behavior
A NetCore application should have the same behavior as a NetFramework application

## Actual Behavior
A NetCore application is dramatically slower in repetitive requests.

## Steps to Reproduce the Problem

  1. Create a WPF Application in NetCore and NetFramework 
  2. Include Restsharp
  3. Make an Api Request and measure the time
  4. Repeat the procedure

## Specifications

  - Version: 106.9.0
  - Platform: Windows 10 Pro - 1909
  - NetCore Version: 3.1.100
  - NetFramework Version: v4.7.2
  - NetFramework CLR Version: v4.0.30319 

## Expected Behavior
Correct deserialization of the object

<!-- If this issue is a feature request remove text below -->
## Actual Behavior
RestClient.GetAsync<T> never returns (staling)

## Steps to Reproduce the Problem
I have a REST API returning the following JSON (ContentType is application/json):
```
{
    "id": "5da97af27c020872ee2c6933",
    "name": "Customer1",
    "portfolios": [
        {
            "id": "5da97d6ff8d4ec73765978ed",
            "managerId": "5da97098e07f1e71c31d8072",
            "depositories": [
                {
                    "id": "5da97f12f8d4ec73765978f3",
                    "custodianId": "5da978097c020872ee2c692e",
                    "custodianDepositoryId": "0000007075901661"
                }
            ],
            "accounts": [
                {
                    "id": "5da97ec0f8d4ec73765978f2",
                    "custodianId": "5da978097c020872ee2c692e",
                    "custodianAccountId": "0000003644154420",
                    "currencyCode": "DKK"
                }
            ]
        },
        {
            "id": "5da97dcaf8d4ec73765978ee",
            "managerId": "5da973d8e07f1e71c31d8073",
            "depositories": [
                {
                    "id": "5da97fccf8d4ec73765978f6",
                    "custodianId": "5da9783f7c020872ee2c692f",
                    "custodianDepositoryId": "0150760000311358"
                }
            ],
            "accounts": [
                {
                    "id": "5da97f78f8d4ec73765978f4",
                    "custodianId": "5da9783f7c020872ee2c692f",
                    "custodianAccountId": "0000001020921102",
                    "currencyCode": "DKK"
                },
                {
                    "id": "5da97fb4f8d4ec73765978f5",
                    "custodianId": "5da9783f7c020872ee2c692f",
                    "custodianAccountId": "0050765801012256",
                    "currencyCode": "DKK"
                }
            ]
        },
        {
            "id": "5da97de2f8d4ec73765978ef",
            "managerId": "5da97415e07f1e71c31d8074",
            "active": true,
            "depositories": [
                {
                    "id": "5da98038f8d4ec73765978f9",
                    "custodianId": "5da978fa7c020872ee2c6930",
                    "custodianDepositoryId": "0050610060024338"
                },
                {
                    "id": "5da98042f8d4ec73765978fa",
                    "custodianId": "5da978fa7c020872ee2c6930",
                    "custodianDepositoryId": "0059760000366548"
                }
            ],
            "accounts": [
                {
                    "id": "5da98017f8d4ec73765978f7",
                    "custodianId": "5da978fa7c020872ee2c6930",
                    "custodianAccountId": "0050610201143566",
                    "currencyCode": "DKK"
                },
                {
                    "id": "5da98020f8d4ec73765978f8",
                    "custodianId": "5da978fa7c020872ee2c6930",
                    "custodianAccountId": "0050760001260390",
                    "currencyCode": "DKK"
                }
            ]
        },
        {
            "id": "5da97df4f8d4ec73765978f0",
            "managerId": "5da9741fe07f1e71c31d8075",
            "active": true,
            "depositories": [
                {
                    "id": "5da980b9f8d4ec73765978fd",
                    "custodianId": "5da979217c020872ee2c6931",
                    "custodianDepositoryId": "0008006100056997"
                }
            ],
            "accounts": [
                {
                    "id": "5da98074f8d4ec73765978fb",
                    "custodianId": "5da979217c020872ee2c6931",
                    "custodianAccountId": "0000061036138178",
                    "currencyCode": "DKK"
                },
                {
                    "id": "5da98083f8d4ec73765978fc",
                    "custodianId": "5da979217c020872ee2c6931",
                    "custodianAccountId": "0000031020960104",
                    "currencyCode": "DKK"
                }
            ]
        },
        {
            "id": "5da97e07f8d4ec73765978f1",
            "managerId": "5da97436e07f1e71c31d8076",
            "active": true,
            "depositories": [
                {
                    "id": "5da980f6f8d4ec73765978ff",
                    "custodianId": "5da9796f7c020872ee2c6932",
                    "custodianDepositoryId": "0000400802071606"
                }
            ],
            "accounts": [
                {
                    "id": "5da980e6f8d4ec73765978fe",
                    "custodianId": "5da9796f7c020872ee2c6932",
                    "custodianAccountId": "0004004023260059",
                    "currencyCode": "DKK"
                }
            ]
        }
    ]
}
```

The code consuming this REST API has the following model:
```
public class LegalEntity
    {
        public string Id { get; set; }
        public string Name { get; set; }
    }
```
(the rest of the API response should be ignored in this case)

My service contains the following code:
```
var request = new RestRequest
            {
                Resource = "legalentity/{legalEntityId}",
                Parameters =
                {
                    new Parameter("legalEntityId", id, ParameterType.UrlSegment)
                }
            };
var legalEntity = await restClient.GetAsync<LegalEntity>(request);
```
The last line of code (rest.GetAsync<LegalEntity>(request); seems to go into a loop or staling - never returning anything and making my webapp freeze completely.

If I try the following:
```
var request = new RestRequest
            {
                Resource = "legalentity/{legalEntityId}",
                Parameters =
                {
                    new Parameter("legalEntityId", id, ParameterType.UrlSegment)
                }
            };
var response = restClient.Execute(request);
var test = JsonConvert.DeserializeObject<LegalEntity>(response.Content);
var test2 = SimpleJson.DeserializeObject<LegalEntity>(response.Content);
```
I can see the response object is correct. Also `test` is an instance of LegalEntity with the expected values for Id and Name. `test2` however is an instance of LegalEntity with `null` for both Id and Name (but at least it returns instead of staling).

## Specifications

  - Version: 106.6.10
  - Platform: .Net 4.6.2 on Windows 10

## StackTrace
No stacktrace available