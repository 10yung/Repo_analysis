otherwise users are obliged to set the config values *after* sourcing the plugin. They're not able to do it before. Also, re-sourcing the plugin will reset the values to the defaults again.

A similar change was done in zsh-autosuggestions in the past: https://github.com/zsh-users/zsh-autosuggestions/commit/9e4d3c3
I've skimmed some of the various issues here and I understand that there's no single way to set the keybindings up, but I think the ones included in the README are _fine_ and shouldn't conflict with anything else.

Can we add this (or something similar) as a default?

```sh
bindkey '^[[A' history-substring-search-up
bindkey '^[[B' history-substring-search-down

# Bind up and down keys
zmodload -F zsh/terminfo +p:terminfo
if [[ -n ${terminfo[kcuu1]} && -n ${terminfo[kcud1]} ]]; then
  bindkey ${terminfo[kcuu1]} history-substring-search-up
  bindkey ${terminfo[kcud1]} history-substring-search-down
fi
  
bindkey '^P' history-substring-search-up
bindkey '^N' history-substring-search-down
bindkey -M vicmd 'k' history-substring-search-up
bindkey -M vicmd 'j' history-substring-search-down
```

See for https://github.com/zimfw/zimfw/issues/364#issuecomment-572713657 for some context, although it's probably not needed.
The plugin works fine with arrow keys.  However, in normal mode pressing `j` and `k` just scrolls through history as if I didn't have the plugin.

Some configuration information if it helps:
```
plugins=(vi-mode, history-substring-search)
setopt vi
autoload -U edit-command-line
zle -N edit-command-line
bindkey -M vicmd "" edit-command-line

```
I have a zsh setup that's not reliant on ohmyzsh. Can this plugin be used with just vanilla zsh? If so, what would be the correct installation method?
README.md says to add oh-my-zsh plugin with name of **history-substring-search**. However, this is inconsistent with zsh-users' other plugins, such as **zsh-completions**, **zsh-syntax-highlighting** and **zsh-autosuggestions**, which are all prefixed by **zsh** and have same name with their repositories. 

And actually, specifying its name as **zsh-history-substring-search** also works. 

So, why not change it? Is it due to some historical reason?
Add a new optional config variable that will anchor history search to the beginning of the command.

Note that the default behavior does not change with this

I thought disabling HISTORY_SUBSTRING_SEARCH_FUZZY would also disable search pattern `*abc*` but that's not the case.

`local search_pattern="*${(j:*:)_history_substring_search_query_parts[@]//(#m)[\][()|\\*?#<>~^]/\\$MATCH}*"`

Pattern always starts with a `*`. Fuzzy searching as I imagined would leave the position of a substring the same in the query. Search results for disabled fuzzy searching should always start with `abc` then match fuzzy `abc*d*`
I set this value in .zshrc like this in my .zshrc.
 
`HISTORY_SUBSTRING_SEARCH_FUZZY='whateveryouwant'`

But no fuzzy search effect observed. E.g., I type this at first:
 
`touch abdefch.txt`
 
After this command, I type 'touch ab c' and up arrow, but no history command found.
http://xonsh.org/ has this feature