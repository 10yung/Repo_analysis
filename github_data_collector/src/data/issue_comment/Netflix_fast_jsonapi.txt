Looking to output human readable JSON like this:

https://stackoverflow.com/questions/86653/how-can-i-pretty-format-my-json-output-in-ruby-on-rails

Tried this approach but I get 'only generation of JSON objects or arrays allowed'.
using grape for apis and
What I see that I have to give always provide serializer name like
`CompanySerializer.new(Company.all).serializable_hash` 

wondering if it can auto pick serialzier name depending upon resource name or object type like it used to do with active mode serializer.

and what about using Serializer in in relation like with has_many
Is there a way to add scope to relationship, so something like this 

Serializer:
```ruby
class CompanySerializer
  include FastJsonapi::ObjectSerializer

  has_many :employees_temp, scope: ->(record) { record.employees.temp }, serializer: EmployeeSerializer
  has_many :employees_full_time, scope: ->(record) { record.employees.full_time }, serializer: EmployeeSerializer
end
```

Given the following models:
```ruby
class Company < ApplicationRecord
  has_many :employees
end

class Employee < ApplicationRecord
  scope :temp, -> { where(type: 'temp') }
  scope :full_time, -> { where(type: 'full_time') }
end
```


The following fails with `undefined method 'person_path'`

```ruby
  attribute :person_path do |obj|
    url_helpers.person_path obj 
  end

  attribute :edit_person_path do |obj|
    "#{obj.person_path}/edit/person"
  end

```
For polymorphic has_many relations, instead of getting the ids in a batch, the code loops over each object to get its type and id. In Relationship#id_hash_from_record it was hardcoded to get the id by calling record.id, which overrides the id_method_name options passed into the relationship.

I tried fixing this by only changing the code in Relationship to dynamically call the id_method_name on the object, but unfortunately on has_many relationships the default value for id_method_name would be passed as if the ids would be pulled in a batch (for example groupee_ids). That default works for regular has_manys where we get the ids all at once but fails for polymorphic ones where it loops over each object.

So, fixing the problem required passing the polymorphic information to compute_id_method_name, which now defaults to id rather than id_method_name_from_relationship in the case where the relationship is polymorphic.

This also fixes a bug where the record_id is not carried over through inheritance.
Is there any option to show only the content of meta without showing the "meta" key? Currently if we pass meta data, it shows as follows:

`{
  "data": null,
  "meta": {
    "success": true
  }
}`

Is there any way to show it like:
`{
  "data": null,
  "success": true
}`

In my app sometimes I want camel case (for JS data) and sometimes I want underscore data. 

Is it possible to have one serializer class that can be configured at runtime to have different key transforms?
Just like `attribute`, this PR allows the dev to specify links as follows:

```ruby
link(:download, if: ->(obj, params) { params && params[:signed_url] }) do |obj, params|
  params[:signed_url]
end
```
I have a user with many heights (stature measurements) recorded in a Height model but would like to serialize only last height (as if it was a has_many association).

I tried to create a (fake) custom has_one association but it does not give me what I was looking for...

app/serializers/user_serializer.rb
```ruby
class UserSerializer < BaseSerializer
  attributes :email

  # has_many :heights
  has_one :last_height, record_type: :height do |user|
    user.heights.last
  end
end
```

app/controllers/users_controller.rb
```ruby
options[:include] = [:heights]
render json: UserSerializer.new(user, options).
```

As is, I get the error: `"heights is not specified as a relationship on UserSerializer."`

If I uncomment `# has_many :heights`, I get though: 
```json
{
    "data": {
        "id": "1",
        "type": "user",
        "attributes": {
            "email": "fake@email.com"
        },
        "relationships": {
            "heights": {
                "data": [
                    {
                        "id": "1",
                        "type": "height"
                    },
                    {
                        "id": "2",
                        "type": "height"
                    }
                ]
            },
            "lastHeight": {
                "data": {
                    "id": "2",
                    "type": "height"
                }
            }
        }
    },
    "included": [
        {
            "id": "1",
            "type": "height",
            "attributes": {
                "value": "186.0"
            }
        },
        {
            "id": "2",
            "type": "height",
            "attributes": {
                "value": "187.0"
            }
        }
    ]
}
```
But I don't want to include in the compound document all recorded heights...

## Expected result
```json
{
    "data": {
        "id": "1",
        "type": "user",
        "attributes": {
            "email": "fake@email.com"
        },
        "relationships": {
            "lastHeight": {
                "data": {
                    "id": "2",
                    "type": "height"
                }
            }
        }
    },
    "included": [
        {
            "id": "2",
            "type": "height",
            "attributes": {
                "value": "187.0"
            }
        }
    ]
}
```
When `include` is used to include related documents (compound document) and you also have sparse fieldsets (you filter returned attributes with the `fields` parameter), the `relationships` attribute of the root resource remains empty. 
This is rather confusing because this way you have no way how to link the root resources (if multiple) to their corresponding `included` related resources..
I've identified the issue to come from here:
https://github.com/Netflix/fast_jsonapi/blob/master/lib/fast_jsonapi/serialization_core.rb#L54
It works as expected if that line is commented out...
Now I see a related issue: https://github.com/Netflix/fast_jsonapi/issues/304 - according to which there is a way to trick / work around this:

>  you must specify associations in the fields option if you want fast_jsonapi to populate the relationships hash appropriately

But I'm not sure if this is the JSONAPI v1 compliant way ...

So, if this is not considered a bug, maybe some documentation improvements should make this clear.