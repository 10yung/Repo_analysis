**Describe the bug**
A clear and concise description of what the bug is.
Once I install this extension, the jupyterlab manager doesn't work:
![image](https://user-images.githubusercontent.com/28425640/72217914-713bf300-34e9-11ea-8f3c-9cfc707c232c.png)
The problem disappears when the ext is uninstalled.

**To Reproduce**
Steps to reproduce the behavior:
1. Install nbgather by `jupyter labextension install nbgather`


**Screenshots**
Seen above

**Desktop (please complete the following information):**
 - OS: Red Hat Enterprise Linux Server release 7.6
 - Browser: Chrome
 - Version [e.g. 22]

** Jupyter
jupyter core     : 4.5.0
jupyter-notebook : 6.0.0
qtconsole        : not installed
ipython          : 7.6.1
ipykernel        : 5.1.1
jupyter client   : 5.3.1
jupyter lab      : 1.0.2
nbconvert        : 5.5.0
ipywidgets       : 7.5.0
nbformat         : 4.4.0
traitlets        : 4.3.2

**Additional context**
I recalled to see this buggy behavior on another extension, "[autoversion](https://github.com/timkpaine/jupyterlab_autoversion)". Didn't test it.
In Issue https://github.com/microsoft/gather/issues/16, @micahjsmith proposed a new type of gather functionality. nbgather could be made more extensible to let others build new plugins like that one, which do new things with the gathered cells.

I imagine the interface for adding  would involve a `registerGatherCommand` function, where the caller provides a command title, an icon, and a callback that will get triggered and provided with the gathered cells.

Let's use this issue to track interest in having an API for registering new gather commands, and design discussions about what that API would look like.
The light blue and pink highlighting that Gather uses look great in the default grey+white Jupyter Lab theme, but highlighting REALLY highlights when you are in Dark mode or the Material Darker theme. Is there a way to tone things down that I am missing? Thanks!
**Is your feature request related to a problem? Please describe.**
A user might want to clear the history of a notebook, e.g., if they executed a cell with some sensitive data that they don't want to have stored to the notebook file.

**Describe the solution you'd like**
Add an action to the interface that lets someone "Clear History". This would then reset the execution history log, and make sure that any history metadata saved with the notebook is emptied.

**Describe alternatives you've considered**
Currently, an analyst could open up the `ipynb` file on their own, and delete the metadata that includes the execution history.

**Additional context**
One additional benefit of this is reducing storage space for notebooks with very long histories.

**Is your feature request related to a problem? Please describe.**
If we let people explore the versions of slices that produced results by default, the tool may be unusable for long sessions. This is because outputs can take up a lot of memory and, when the notebook is saved, storage. To enable people to explore versions of slices with their output, we need to keep every versions of every output produced.

**Describe the solution you'd like**
In the settings menu for the plugin, include a configuration option for turning on the "Gather from Revisions" action. Have a note next to the option that tells the user that if the feature is enabled,  all outputs ever created will be saved to a notebook, which has the potential for increasing the size of the notebook many times. Add documentation for how to do this to the README.

**Describe alternatives you've considered**
Leave Gather to Revisions in by default. That said, our usability study suggested the tool is most useful for slicing and gathering code that was executed out of order, not gathering from revisions. I also feel that this feature, while exciting, hasn't yet reached the form where it will be obviously useful and easy-to-use in common cases where people want to use it. So for this tool to be useful, perhaps the feature of gathering from revisions should be opt-in only.

**Additional context**
N/A
**Describe the solution you'd like**
It would be great if we could collect usage data from people who are using code gathering tools in their work. This could help us decide on future improvements to this tool, and collect data that could be shared other researchers and tool builders build better notebook tools.

Data collection would be strictly opt-in, and would be off by default.

**Additional context**
To do this, we would need the following:
- [x] Fill out relevant institutional paperwork
- [ ] A non-intrusive, easy-to-dismiss popup that appears when someone uses the tool, that asks if folks want to share their usage data with us, with a description of the data that will be collected, anonymization of the data, and research goals
- [ ] Persistent storage of a user's choice. Use this choice to decide whether to report log events
- [ ] A server (e.g., `notebooks.berkeley.edu`) that receives log events over a secure server

Some of the events we might want to collect are:
- [ ] when code gathering events get invoked, how large are the slices? Where in the notebook do they come from? Are these slices opened in notebooks, scripts, or as cells in existing notebooks?