I would maintain that copr
My $PATH without chruby.sh looks like:

    /usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin:/opt/X11/bin

**With** chruby.sh in my .bash_profile, it looks like:

    /Users/jrochkind/.gem/ruby/2.4.2/bin:/opt/rubies/ruby-2.4.2/lib/ruby/gems/2.4.0/bin:/opt/rubies/ruby-2.4.2/bin:/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin:/opt/X11/bin

That is, the ruby-specific directories -- including gem bins -- have been put at the *beginning* of $PATH. 

If a malicious or clumsy installed gem provided an executable called `make`, `cd`, `ssh`, etc, when typing such in a shell, the gem-provided executable with the same name as the standard utility I meant to call would be found first, and executed. 

Is this a security issue? Would it be preferable to add ruby-specific PATH -- or at least specifically any directories that can include third-party gem-provided executables -- at the END of $PATH instead of the beginning?
Support for mapping directory path names to Ruby versions from a per-user `$HOME/.moronrc` file, for projects with maintainers that for some reason refuse to check in `.ruby-version` files.
See https://github.com/postmodern/chruby/blob/master/share/chruby/chruby.sh#L43

Setting `RUBYOPT` may affect (and fail) ruby introspection. E.g. if you are using something like `-r mysomefile` and file is available only in target ruby
Now that chruby uses the ruby's install-dir name for the `GEM_HOME`, we should isolate all chruby `GEM_HOME` from rubygems' directory structure to prevent conflicts. This would also make cleaning-up/uninstalling chruby much easier.
This is an alternative to #406. It fixes #413 and uses bash native functionality instead of `ls` at all. The impetus for this change is that an alias to `ls` breaks `chruby`. Specifically in my case I have:

```sh
alias ls=exa
```

Which doesn't have a `-A` flag.
This is a proof-of-concept PR to address #422.
It still needs documentation and a changelog entry.

@postmodern @havenwood What do you think?
I would like a way to tell chruby to not set `$GEM_*` variables, as this is much safer (i.e., does not mix gems of different Ruby implementations) when e.g., developing TruffleRuby and executing two different Rubies without a `chruby` in between (see https://github.com/postmodern/chruby/pull/410#issuecomment-515233038).

Currently I'm doing this by using a [branch](https://github.com/postmodern/chruby/compare/master...eregon:do-no-set-gem-home) on my chruby fork, removing the code that sets `GEM_HOME`, but that's obviously not very convenient or maintainable, and I can't easily advise other TruffleRuby developers to do the same. I'd much rather this was possible in chruby itself.

Actually, there is already a way to do this, by running everything as `root`, but that's obviously not very safe for my use-case.
So I'm thinking to just extend the check `if (( UID != 0 )); then` to something like `if (( UID != 0 )) && [ "$CHRUBY_SET_GEM_HOME" != "false" ]; then`.

We could also automatically just detect if `$RUBY_ROOT` is under `$HOME` and not set `$GEM_*` vars in that case, but @postmodern had some concerns about that in https://github.com/postmodern/chruby/pull/410#issuecomment-515754740:
> Furthermore, there is value in keeping user-installed gems separate from the ruby, in case you need to delete/re-install one or the other.

@postmodern @havenwood What do you think?
I would like to have this available in chruby 1.0.0, I'm happy to make a PR.
Since RubyGems does not default to `--user-install`, it would be very useful for chruby to set `GEM_HOME` to `~/.gem` (and update `PATH` accordingly) when a non-root user invokes `chruby system`. `chruby reset` or `chruby clear` should fully reset the environment.
* Which then makes it easy to run them on a different Ruby version.

This for instance makes it possible to run tests locally with a Ruby version newer than 2.2 since that might be difficult to install on recent systems.

I tried with `ruby-install -r $PWD/test/opt/rubies ruby 2.6.5` and then modifying `test_ruby_version` in `test/helper.sh` is all that's needed.