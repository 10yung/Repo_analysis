Without this change, it would not be possible to build Validator with Xcode 10.3.

One may argue that SPM is only integrated starting with Xcode 11 (which includes Swift 5.1), but there are other dependency managers relying on the `Package.swift` manifest like [Accio](https://github.com/JamitLabs/Accio) and sometimes they are still used with Xcode 10.3.

Also after having merged this, it would good to release a new version.
Cannot invoke initializer for type 'ValidationRulePattern' with an argument list of type '(pattern: EmailValidationPattern, error: ValidationError)'
<img width="1027" alt="Screenshot 2019-11-22 at 4 44 39 PM" src="https://user-images.githubusercontent.com/10154955/69421615-86956c00-0d47-11ea-99cf-8226dca5af0c.png">

Look at https://github.com/adamwaite/Validator/blob/master/Validator/Sources/Patterns/EmailValidationPattern.swift

Simple and standart patterns are equal. Is it a bug?

In the version 3.0.2 they was different.


on UITextView+Validator

the compiler shows the following error on line 11:

'textDidChangeNotification' has been renamed to 'NSNotification.Name.UITextViewTextDidChange'

therefore you cannot build.
After updating to **Xcode Version 11.0 (11A420a)** on **macOS Mojave Version 10.14.6 (18G95)**,  with **Cocopods Version 1.7.5**, **Validator Pod Version swift-4.2**

`pod 'Validator', :git => 'https://github.com/adamwaite/Validator.git', :branch => 'swift-4.2'`

I have been facing this error.

<img width="1440" alt="image" src="https://user-images.githubusercontent.com/22313617/65481392-c4deee00-deb2-11e9-86b7-42479faa3bbe.png">

When trying set properties of `ValidatableInterfaceElement` in a subclass of UITextfield I am getting  `Cannot assign to property: 'self' is immutable swift error`.

To resolve this I had to restrict ValidatableInterfaceElement to AnyObject. Is there a known workaround for this? 

I'm happy to submit a PR if supported ?  

Side note:
https://stackoverflow.com/questions/52727345/cannot-assign-to-property-self-is-immutable-swift-error 

Thanks,

https://github.com/adamwaite/Validator/commit/f9e0b5916e493e9750915a473b0fdf3581fe7aa0#diff-82cfdd33ac3981dee67efa99e2338154L14

this is question.

With this commit, ValidationResult.swift's merge method has been deleted, but I would like to know if there is an alternative method here
Are there any plans to add support for SPM?
Validator was originally written when I was learning Swift (Swift 2) and has been adapted for Swift 3 and Swift 4. Now feels like a good time to update the code to honour the latest SDKs and Swift conventions.  

Goals:

1. Eliminate that horrible Objective-C run time stuff.

2. Make the ValidationResult a monoid and follow functional programming conventions over those dodgy `merge` style methods.

3. More 'Swifty' APIs where possible. 

4. Add CI support with Travis.
Why is this code valid?
How to use Wrong?

```
 var validationRuleSet = ValidationRuleSet<String?>()
let stringRequiredRule = ValidationRuleRequired<String?>(error: ValidationError(message: "email is required."))
validationRuleSet.add(rule: stringRequiredRule)

let email: String? = nil
let validationResult = Validator.validate(input: email, rules: validationRuleSet)
print(validationResult) // -> valid
```