
The following code has null pointers dereferencing, typically causing a crash or exit.

ae.h:111
```
    e = (redisAeEvents*)malloc(sizeof(*e));  // e may be null
    e->context = ac;
    e->loop = loop;
    e->fd = c->fd;
    e->reading = e->writing = 0;
```
dict.c:100
```
    n.table = calloc(realsize,sizeof(dictEntry*)); // n.table may be null
    ...
    for (i = 0; i < ht->size && ht->used > 0; i++) {
        if (ht->table[i] == NULL) continue;
        ....
        he = ht->table[i];
        ...
```
async.c:757
```
    if (!ac->c.timeout) {
        ac->c.timeout = calloc(1, sizeof(tv)); //ac->c.timeout  may be null
    }

    if (tv.tv_sec == ac->c.timeout->tv_sec &&
        tv.tv_usec == ac->c.timeout->tv_usec) {
        return;
    }
```
ivykis.h:58
```
    e = (redisIvykisEvents*)malloc(sizeof(*e)); // e may be null
    e->context = ac;
```
libevent.h:155
```
    e = (redisLibeventEvents*)calloc(1, sizeof(*e)); // e may be null
    e->context = ac;
```







I think hiredis_ssl.h header file needs:

```
#ifdef __cplusplus
extern "C" {
#endif
```

and

```
#ifdef __cplusplus
}
#endif
```

So that a c++ app can link to the libhiredis_ssl.so. The hiredis.h header file uses extern "C".

Hello, 

When doing an synchronous update command (INCRBY), if I receive a timeout, is it guaranteed that the server has not actually done the operation? 

What is the best way to ensure that the server-side operation is not done when the client receives a timeout?

Regards
branch: master
commit id: 0501c623c91344e54cb2775a91509650960789b1

when i compile with: make USE_SSL=1, i meet some errors. I see the error "No rule to make target '-lssl'", but i don't know why the '-ssl' is a target. Please help me, thanks!
 
`[root@80439c2caaee /usr1/newhiredis/hiredis]$make USE_SSL=1
cc -std=c99 -pedantic -c -O3 -fPIC  -DHIREDIS_TEST_SSL -Wall -W -Wstrict-prototypes -Wwrite-strings -Wno-missing-field-initializers -g -ggdb net.c
cc -std=c99 -pedantic -c -O3 -fPIC  -DHIREDIS_TEST_SSL -Wall -W -Wstrict-prototypes -Wwrite-strings -Wno-missing-field-initializers -g -ggdb hiredis.c
cc -std=c99 -pedantic -c -O3 -fPIC  -DHIREDIS_TEST_SSL -Wall -W -Wstrict-prototypes -Wwrite-strings -Wno-missing-field-initializers -g -ggdb sds.c
cc -std=c99 -pedantic -c -O3 -fPIC  -DHIREDIS_TEST_SSL -Wall -W -Wstrict-prototypes -Wwrite-strings -Wno-missing-field-initializers -g -ggdb async.c
cc -std=c99 -pedantic -c -O3 -fPIC  -DHIREDIS_TEST_SSL -Wall -W -Wstrict-prototypes -Wwrite-strings -Wno-missing-field-initializers -g -ggdb read.c
cc -std=c99 -pedantic -c -O3 -fPIC  -DHIREDIS_TEST_SSL -Wall -W -Wstrict-prototypes -Wwrite-strings -Wno-missing-field-initializers -g -ggdb sockcompat.c
cc -shared -Wl,-soname,libhiredis.so.0.14 -o libhiredis.so net.o hiredis.o sds.o async.o read.o sockcompat.o
ar rcs libhiredis.a net.o hiredis.o sds.o async.o read.o sockcompat.o
cc -std=c99 -pedantic -c -O3 -fPIC  -DHIREDIS_TEST_SSL -Wall -W -Wstrict-prototypes -Wwrite-strings -Wno-missing-field-initializers -g -ggdb test.c
cc -std=c99 -pedantic -c -O3 -fPIC  -DHIREDIS_TEST_SSL -Wall -W -Wstrict-prototypes -Wwrite-strings -Wno-missing-field-initializers -g -ggdb ssl.c
ar rcs libhiredis_ssl.a ssl.o
make: *** No rule to make target '-lssl', needed by 'hiredis-test'.  Stop.`
The following code never aborts when `malloc` is unsuccessful, causing dereferencing of null pointers.

async.c:61
```C
redisCallback *dup = malloc(sizeof(*dup));
memcpy(dup,src,sizeof(*dup)); // dup may be null
return dup;
```

dict.c:75
```C
dict *ht = malloc(sizeof(*ht));
_dictInit(ht,type,privDataPtr); // ht may be null
```

dict.c:146
```C
entry = malloc(sizeof(*entry));
entry->next = ht->table[index]; // entry may be null
```

dict.c:261
```C
dictIterator *iter = malloc(sizeof(*iter));
iter->ht = ht; // iter may be null
```
redisContext uses the calloc function to create the structure. Therefore, all values ​​are 0. I use Redis in my project. My project is a gateway. I am creating a tcp server. I have a lot of connections to Redis, so an error occurs and a socket for tcp connection with Redis is not created and therefore fd = 0. Further, by example, I clear the memory of the redisContext structure and at this time the socket closes with fd = 0. It is not right. Next, this fd is freed up and allocated by my client to connect to my tcp server, which causes my program to crash. Please set fd for the redisContext structure to InvalidSocket.
Hi,
add please OPTION like ENABLE_STATIC to choose compile static or shared type library

OPTION(ENABLE_STATIC "Build hiredis static library" OFF)

Thanks!
The current implementation doesn't keep a callback for `UNSUBSCRIBE` command, the reason from the code base comments is that: every channel will receive an unsubscribe msg.
This design cause two problem:
1. Callback passed with unsubscribe command never trigged.
2. If the channel hasn't been subscribed, then we don't have a chance to handle related msg. As no callback for that channel yet.

