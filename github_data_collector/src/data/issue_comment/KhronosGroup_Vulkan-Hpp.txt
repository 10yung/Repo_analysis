This PR tries to support building samples on Linux with minimal changes.

related issues:
#463 

checklists:
- [x] Replace window handling with GLFW
- [x] CMake support for building samples on Linux
- [ ] Fixing broken samples
- [ ] Testing on both Windows and Linux
- [ ] Reviews

known issues:
* ~~Most samples destroying window before destroying surface, which causes segfault.~~
* Raytracing sample doesn't compile, not really sure why.
* SurfaceCapabilities sample also doesn't compile now.
* Currently it only works with XCB surfaces. Not sure we can support more platforms.


In order to use the dynamic loader without causing including vulkan.hpp to pull in windows.h, I was including vulkan.hpp as follows:

```C++
#define VULKAN_HPP_ENABLE_DYNAMIC_LOADER_TOOL 0
#define VULKAN_HPP_DISPATCH_LOADER_DYNAMIC 1
#include <vulkan/vulkan.hpp>
```

And manually implementing the dynamic loader myself in a separate file.

This was working in 1.1.130.0 but does not work with the current version (which I picked up to resolve #478) due to the `init(vk::Instance const&, vk::Device const&)` function on `DispatchLoaderDynamic`: on line 68572 it creates a `vk::DynamicLoader` instance, which with the given `#define` rules does not exist.
I am on a MAC and using `clion` IDE.

When I clone this repo and all submodules, I am able to load the CMakeLists.txt project and compile and run with no trouble.

But when I load the CMakeLists.txt project in the samples/01_InitInstance folder, I get the following error when compiling:

```/Users/jeff/projects/personal/Vulkan-Hpp/samples/01_InitInstance/01_InitInstance.cpp:18:10: fatal error: 'vulkan/vulkan.hpp' file not found```

I see the vulkan/vulkan.hpp from the root directory.  How do the sample projects find this file?
Hello,

Is there specific reason why Linux build is "Unhandled platform" ? Seems like an easy thing to do. GLFW is already there.
Hello! I've been trying to port an application that I've been writing on Mac over to windows, and I'm using CMake. However, the compile is failing with the error:

```
C:\VulkanSDK\1.1.126.0\Include\vulkan/vulkan.hpp(74354): error C2664: 'PFN_vkVoidFunction (VkInstance,const char *)': cannot convert argument 1 from 'vk::Instance' to 'VkInstance'
C:\VulkanSDK\1.1.126.0\Include\vulkan/vulkan.hpp(74354): note: No user-defined-conversion operator available that can perform this conversion, or the operator cannot be called
```
repeating over and over again (The line number goes from 74354 to 74505 at which point make just gives up because we exceeded 100 errors)

I'm compiling with `/std:c++17`.

This compiles just fine on mac. (Of course, I've changed the CMakeLists.txt to link to the correct libraries and include dirs)

I'm using CLion's built in CMake on Windows 10 64-bit, and I'm building using:
`C:\Program Files\JetBrains\CLion 2019.3.1\bin\cmake\win\bin\cmake.exe" --build C:\Users\PATH\TO\MY\PROJECT\BUILD\DIR --target all`
It would be really great if structs could be initialized with designated initializers (C++20), e.g:
```
auto createInfo = vk::PipelineTessellationStateCreateInfo {
   .patchControlPoints = 4
};
```

Currently, this is prevented by:
  - The fact that structs define custom constructors.
  - The fact that most structs have a private ``StructureType`` member.
  - Default initialization is performed in the constructor instead of using default member initializers.

A possible solution for all these issues might be the following construction:
**EDIT: note that this original suggestion was *not* a good idea, since the resulting struct will not be guaranteed to have the correct memory layout.**
```
template<StructureType s>
struct StructureBase {
private:
  StructureType sType = s;
};

struct PipelineInputAssemblyStateCreateInfo
: StructureBase<StructureType::ePipelineInputAssemblyStateCreateInfo>
  {
    // no constructors
    ... // setters, operators as before
    // no private sType member
    // all fields use default member initializers
    const void* pNext = nullptr;
    PipelineInputAssemblyStateCreateFlags flags = PipelineInputAssemblyStateCreateFlags();
    PrimitiveTopology topology = PrimitiveTopology::ePointList;
    Bool32 primitiveRestartEnable = 0;
  };
```

To achieve backwards compatibility constructors could still be defined, unless disabled by an explicit ``#define``. An alternative to inheriting from a ``StructureBase`` template type would be another ``#define`` that changes the ``sType`` members from ``private`` to ``public``.

Any thoughts?

flextGL and volk already have custom headers with Vulkan API support (i.e. meta loaders). I want to suggest generation another header, instead of "vulkan.h" or "vulkan/vulkan.h" (if fully) make possible to choice another header (for example, "vulkan/flextVk.h" or "vulkan/volk.h"). 
The ArrayProxy class in functions like `vk::CommandBuffer::setViewport` and such has definitely proven its useful, however in the various `vk::*CreateInfo` constructors, the absence is sorely felt, with many structs having `objectCount` and `pObjects` members to specify in the constructor. It's especially notable when either `0, nullptr` or `1, &object` are so frequently used. It would be particularly useful to have an overloaded alternate constructor that replaced `uint32_t objectCount, T* pObjects` with `ArrayProxy<T> objects` as it does in the `vk::` commands.

For example, for fixed viewports,

`vk::PipelineViewportStateCreateInfo viewportState({}, 1, &viewport, 1, &scissor);`

could be replaced by

`vk::PipelineViewportStateCreateInfo viewportState({}, viewport, scissor);`
With OpenXR on the horizon, and apparently following the same model as Vulkan in terms of exposing the API in a machine readable XML format, it might be useful to try to abstract some of this repository so that it can be re-used with the OpenXR API once it's available.  
I would like to work on marking `UniqueHandle` operations, especially the constructors and destructor, as `noexcept`. As far as I can see, `vk::Device::destroy*`  functions don't throw anything and return `void`.

There are a couple of ways that I can think of on how to go about implementing this:

* Just mark them as `noexcept` and just assume that no destroy operations will throw.
* Add introspection to `UniqueHandleTraits` to see if underlying destroy/deleter operation is `noexcept` and have `UniqueHandle` operations base on that.
* Have `UniqueHandle` operations which calls the deleter type's `destroy` function depend on whether that `destroy` function is `noexcept`. Furthermore, have the `destroy` function base on its corresponding `vk::Device::destroy*`'s `noexcept`-iness.

I would like to know if my assumption about destroy operations is correct and on your preference on how to implement this.

**EDIT 1:** Additionally, `noexcept` for (non-`Unique`) handle types?