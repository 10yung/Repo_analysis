## Summary

Is it a good idea to add `vue` to the fileTypes in the JavaScript grammars?  A vue file can also contain html and css.  The atom (with atom-vue package installed) does a good job of supporting vue, however, in the `<script>` section, JavaScript snippets like `console.log` they are missing.

https://github.com/atom/language-javascript/blob/master/grammars/javascript.cson
<!--

Have you read Atom's Code of Conduct? By filing an Issue, you are expected to comply with it, including treating everyone with respect: https://github.com/atom/.github/blob/master/CODE_OF_CONDUCT.md

Do you want to ask a question? Are you looking for support? The Atom message board is the best place for getting support: https://discuss.atom.io

-->

### Prerequisites

* [x] Put an X between the brackets on this line if you have done all of the following:
    * Reproduced the problem in Safe Mode: <https://flight-manual.atom.io/hacking-atom/sections/debugging/#using-safe-mode>
    * Followed all applicable steps in the debugging guide: <https://flight-manual.atom.io/hacking-atom/sections/debugging/>
    * Checked the FAQs on the message board for common solutions: <https://discuss.atom.io/c/faq>
    * Checked that your issue isn't already filed: <https://github.com/issues?utf8=✓&q=is%3Aissue+user%3Aatom>
    * Checked that there is not already an Atom package that provides the described functionality: <https://atom.io/packages>

I'm unsure that any of the above apply as this is based on an issue I'm having with GitHub, not the atom client itself.

### Description

When looking at a PR that includes jsx, syntax highlighting fails after a closing bracket for a shorthand jsx fragment is included.

### Steps to Reproduce

1. Create a PR with jsx changes including a shorthand jsx fragment (ie `<></>`) on GitHub
2. See that syntax highlighting for the jsx file fails after the ending bracket

**Expected behavior:**

Syntax highlighting should continue normally after the fragment shorthand

**Actual behavior:**

Syntax highlighting breaks after the fragment shorthand

**Reproduces how often:**

100%

### Versions

Unsure, I was directed here from https://github.com/github/linguist#theres-a-problem-with-the-syntax-highlighting-of-a-file

### Additional Information

N/A

This Issue is very similar to [#646](https://github.com/atom/language-javascript/issues/646).

### Steps to Reproduce

1. In Atom, create a new Javascript file or edit an existing one.
2. Add the following lines of code:
```
var matches = line.match(/{/);
console.log("Javascript line to follow");
```
2. Select that code, and/or all code in the file.
3. Autoindent.

**Expected behavior:**
These two lines of code are indented to the same level, whatever that may be, as shown above.

**Actual behavior:**
The second line, and all which follow, are indented one extra level. 

*Edit by @rsese to add screenshot*

![auto-indent-with-regex-brace](https://user-images.githubusercontent.com/734194/63917192-b27eab00-c9ff-11e9-8bff-eb4e7036c183.png)

**Reproduces how often:**
Every time.

### Versions
`atom --version`:
Atom    : 1.23.2
Electron: 1.6.15
Chrome  : 56.0.2924.87
Node    : 7.4.0
`apm --version`:
apm  2.4.3
npm  6.2.0
node 10.2.1 x64
atom 1.40.1
python
git 2.15.0.windows.1
visual studio 2015

Windows 10

## Summary

In languages such as Ruby or CoffeeScript, Atom has a feature to quickly change a selection inside a string into a template literal. Since template literals are supported in JavaScript since [ES2015](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Template_literals), it would be nice to have the same feature for the language.

Steps:

1. Select any part inside a string (enclosed in backticks), e.g. `name`
2. Press `$` key
3. Selection becomes `${name}`

## Motivation

Existing feature in Ruby, CoffeeScript and possible other bundled Atom syntax languages.

## Additional context

Here's an animation showcasing the feature when working in CoffeeScript

![cs](https://user-images.githubusercontent.com/1504938/62013234-ff1c5f80-b18f-11e9-95b7-a855139f1645.gif)


## Summary

I have suggestions for scope additions/changes for the tree-sitter grammar. If any of these are warmly received, I’ll whip up a PR.

## Motivation

A bare-bones grammar is less useful. Scope names have value beyond syntax highlighting.

## The suggestions

### More `meta.` scopes

I’ve got a custom define-a-function command that behaves differently inside class bodies than it does elsewhere; with the Babel grammar I was able to use the `meta.class.body` scope to tell the difference. 

I’d love for that (and a few other similar scopes) to be added. Without scopes it’s quite hard to get commands to do different things in different contexts.

### Punctuation

All opening braces (`{`) — except in strings, of course — are scoped as `punctuation.definition.function.body.begin.bracket.curly`. This is inaccurate; lots of opening braces don’t signal the start of a function body. Closing braces are similarly scoped, as are square brackets and parentheses.

If the goal is to give all such punctuation the same scope regardless of context, I’d suggest these scopes be renamed like (e.g.) `punctuation.definition.begin.brace` so that the scope name doesn’t imply a context that may or may not be true. If these scopes should include information about their context so that `{`s can be distinguished from one another, then we need to be a bit more thorough in the grammar.

### Definition vs. invocation

Both function names and class names are scoped identically between definition and usage.

```
class Foo extends Bar {}
let foo = new Foo();

function baz(...args) {}
baz(false);
```

In this code sample, both occurrences of `Foo` have the scope `meta.class`. Both occurrences of `baz` have the scope `entity.name.function`.

This is intended behavior, as I understand from @maxbrunsfeld’s comments in past issues like these. I’m not trying to change how these identifiers appear in default syntax themes. But I’d like these scopes to be distinguished _somehow_ so that I can make them look different from one another in my own syntax theme if I so choose.

For functions, I’d suggest `entity.name.function.definition` in the definition case, and `entity.name.function.call` in the invocation case.

For classes, `meta.class` is a questionable choice in the first place, in my opinion; I’d suggest `entity.name.class.definition` and `entity.name.class.instantiation`. (If `meta.class` needs to be kept for backward-compatibility, that’s fine; I believe that it’s possible to apply two scope names to the same thing.)

Adding to the scope name shouldn’t affect their appearance in existing syntax themes.

## Describe alternatives you've considered

There aren't any, short of continuing to use `language-babel`. Grammars are the underpinning of most of the customization I already do.

<!--

Have you read Atom's Code of Conduct? By filing an Issue, you are expected to comply with it, including treating everyone with respect: https://github.com/atom/atom/blob/master/CODE_OF_CONDUCT.md

Do you want to ask a question? Are you looking for support? The Atom message board is the best place for getting support: https://discuss.atom.io

-->

### Prerequisites

* [X] Put an X between the brackets on this line if you have done all of the following:
    * Reproduced the problem in Safe Mode: http://flight-manual.atom.io/hacking-atom/sections/debugging/#using-safe-mode
    * Followed all applicable steps in the debugging guide: http://flight-manual.atom.io/hacking-atom/sections/debugging/
    * Checked the FAQs on the message board for common solutions: https://discuss.atom.io/c/faq
    * Checked that your issue isn't already filed: https://github.com/issues?utf8=✓&q=is%3Aissue+user%3Aatom
    * Checked that there is not already an Atom package that provides the described functionality: https://atom.io/packages

### Description

*Note:* This issues applies only to the `Flow JavaScript` source type. As far as I can tell that's provided by this package, but if not then I can redirect this issue elsewhere.

The CSS grammar is not properly injected for styled-components using custom components. This appears to be a regression from the tree-sitter update.

### Steps to Reproduce

The following correctly syntax highlights:

```javascript
const TestComponent = styled.div`
	h1 {
		color: green;
	}
`;
```

![](https://user-images.githubusercontent.com/6352776/51214824-e0c9d300-18d3-11e9-84d1-042a8409bcc3.png)

The following does not correctly syntax highlight:

```javascript
const TestComponent = styled(UnstyledComponent)`
	h1 {
		color: green;
	}
`;
```

![](https://user-images.githubusercontent.com/6352776/51214770-bd068d00-18d3-11e9-9de8-d85faf1c5c33.png)

### Versions

```
$ atom --version
Atom    : 1.37.0
Electron: 2.0.18
Chrome  : 61.0.3163.100
Node    : 8.9.3

$ apm --version
apm  2.1.7
npm  6.2.0
node 8.9.3 x64
atom 1.37.0
python 2.7.16
git 2.21.0
```

### Additional Information

This issue is closely related to #634, which reproduced the same error in the context of a vanilla JavaScript file. (That issue was resolved with PR #639.)
### Description
A multiline function call causes Atom's autoindenter to perform unexpectedly, adding an extra layer to indentation from that call down.

### Steps to Reproduce
1. In Atom, create a new Javascript file.
2. Write or paste code like the following:
```
if(myBoolean) {
    var result = MyObject.thisIsAVeryLongFunctionNameWithParameters(firstParam,
    secondParam, thirdParam, fourthParam, fifthParam); 
}
```
3. Select All.
4. Auto-indent.  

**Expected behavior:** 
Code formatted like this:
```
if(myBoolean) {
    var result = MyObject.thisIsAVeryLongFunctionNameWithParameters(firstParam,
        secondParam, thirdParam, fourthParam, fifthParam); 
}
```
Note that the close curly brace for the `if` is aligned with the if statement. 

**Actual behavior:** 
```
if(myBoolean) {
    var result = MyObject.thisIsAVeryLongFunctionNameWithParameters(firstParam,
        secondParam, thirdParam, fourthParam, fifthParam);
    }
```
Note that the close curly brace for the `if` is indented an extra level.
All the code which follows will also be indented an extra level, including closing function and object definitions.  In a long file, the end can be pretty far over to the right compared to where it should be.

**Reproduces how often:**
Always, even in safe mode. 

### Versions
Atom    : 1.23.2
Electron: 1.6.15
Chrome  : 56.0.2924.87
Node    : 7.4.0
Windows: 10 Pro

### Additional Information
May be related to #553.
### Prerequisites

* [x] Put an X between the brackets on this line if you have done all of the following:
    * Reproduced the problem in Safe Mode: http://flight-manual.atom.io/hacking-atom/sections/debugging/#using-safe-mode
    * Followed all applicable steps in the debugging guide: http://flight-manual.atom.io/hacking-atom/sections/debugging/
    * Checked the FAQs on the message board for common solutions: https://discuss.atom.io/c/faq
    * Checked that your issue isn't already filed: https://github.com/issues?utf8=✓&q=is%3Aissue+user%3Aatom
    * Checked that there is not already an Atom package that provides the described functionality: https://atom.io/packages

### Description

Optional chaining is currently supported in Javascript files, but not in embedded script (`<script>` tag in HTML). It is currently treated as a ternary operator which breaks the detection of the closing tag `</script>` since a colon is expected.

I first reported the issue to `language-vue` to finally realized it was the case for all embedded scripts:
https://github.com/hedefalk/atom-vue/issues/97

<img width="756" alt="51517628-a99b7a80-1e1b-11e9-8465-c8dec87ee902" src="https://user-images.githubusercontent.com/10983258/53072820-92b57a00-34e6-11e9-8a7c-33743d8a053a.png">

### Steps to Reproduce

1. Open a HTML file
2. Within a `<script>` tag, use the optional chaining operator (i.e. `window.test?.something`)

**Expected behavior:** Closing script tag detected

**Actual behavior:** Closing script tag not detected

**Reproduces how often:** Always

### Versions

Atom: ~1.32.2~ upgraded to 1.34.0
OS: macOS Mojave version 10.14.3 (18D109)

### Prerequisites

* [x] Put an X between the brackets on this line if you have done all of the following:
    * Reproduced the problem in Safe Mode: http://flight-manual.atom.io/hacking-atom/sections/debugging/#using-safe-mode
    * Followed all applicable steps in the debugging guide: http://flight-manual.atom.io/hacking-atom/sections/debugging/
    * Checked the FAQs on the message board for common solutions: https://discuss.atom.io/c/faq
    * Checked that your issue isn't already filed: https://github.com/issues?utf8=✓&q=is%3Aissue+user%3Aatom
    * Checked that there is not already an Atom package that provides the described functionality: https://atom.io/packages

### Description

In atom 1.34, I am trying to update my syntax sheet that worked with the old syntax parser to take advantage of the tree-sitter parsers. Without any other extension enabled, the examples below are just from toggling the use tree sitter parsers option. (examples below are using https://github.com/thomaslindstrom/no-caffeine-syntax)

### Steps to Reproduce

*Edit by @rsese to add code for copy/paste*

```javascript
function functionName(param1, param2, param3) {}
function functionName(param1, param2, param3 = 1) {}
functionName(param1, param2).then((result) => {});
functionName(param1, param2).then(({ result }) => {});
const newThing = calculate(param1, store.getState())
```

Have code like this with tree sitter parsers disabled:
![old syntax parser](https://user-images.githubusercontent.com/20247733/51395859-74351b00-1b03-11e9-8380-1e93f197175c.png)

Enable tree sitter parsers, and your code will look like this:
![tree sitter parser](https://user-images.githubusercontent.com/20247733/51395905-8d3dcc00-1b03-11e9-9ae2-56899d5751a9.png)

Problems seen between the two:
Line 1: No problems
Line 2: No scope present for param3
Line 3: No scope present for param1 and param2
Line 4: Same as line 3 except also no scope present for result
Line 5: No scope present for param and store

Notes:
line 4 lets me differentiate result from result in line 3
line 5 lets me differentiate store from param1

**Expected behavior:** All variables would have the unique scopes to target styles like we could with the old parser

**Actual behavior:** New parser does not target some variables with scopes to allow consistent styling with the old parser

**Reproduces how often:** 100%

### Versions

Atom 1.34.0
Electron 2.0.16
Chrome 61.0.3163.100
Node v8.9.3

### Additional

See #630 

### Prerequisites

* [x] Put an X between the brackets on this line if you have done all of the following:
    * Reproduced the problem in Safe Mode: http://flight-manual.atom.io/hacking-atom/sections/debugging/#using-safe-mode
    * Followed all applicable steps in the debugging guide: http://flight-manual.atom.io/hacking-atom/sections/debugging/
    * Checked the FAQs on the message board for common solutions: https://discuss.atom.io/c/faq
    * Checked that your issue isn't already filed: https://github.com/issues?utf8=✓&q=is%3Aissue+user%3Aatom
    * Checked that there is not already an Atom package that provides the described functionality: https://atom.io/packages

### Description

Comparing the new `language-javascript` using tree-sitter grammar and `language-babel` using the old system, I'm noticing many missing features, to the point where I can't use it yet but would like to. I hope that this list will help you improve the current highlighting.

- [x] ✅  Missing function parameters scope. However in `language-babel` arrow functions whose parameters spread multiple lines don't get highlighted (nor the function name)

- [x] ✅ Object property access `obj.property` is not differentiated from declaration, i.e. `obj = { property: '' } `. In `language-babel`, it seems to use `syntax--unquoted` for the object property.

- [x] ✅ Missing `jsx.component` to style components differently from classes

- [x] ✅ Add a spread-syntax scope. I like to enbolden and add a shadow to that specific operator

- [x] ✅ Missing a dom syntax scope, i.e. for `window`, `document`, `navigator`, etc, and a console scope for `console`

- [ ] `const func = () => {}` - the function name is not scoped as a function.

- [ ] The class properties proposal (arrow functions in classes) are not scoped as functions, e.g.

```js
class Example {
  notScopedAsFunction = () => {}
  scopedAsFunction() {}
}
```

- [ ] Missing a `method` scope if a function was called on an object like `this.func()` instead of simply `func()`

-  ~I think the `-` in negative numbers should be part of the number scope, as in `language-babel`~ (doesn't really matter)

-  ~`this` is missing a scope:~ (tracked in #618)

- ~Bracket matcher doesn't match JSX tags, but it does in `language-babel`~ (tracked in separate repo)

### Versions

1.32.2