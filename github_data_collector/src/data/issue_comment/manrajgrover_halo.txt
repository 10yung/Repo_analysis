<!--  Use the following format for your Pull Request title:

    BUG FIX
    {Issue ID|BUG FIX}: {Description of change}

    OTHERS
    {Whatever}: {Description of change} -->

## Description of new feature, or changes
<!-- What exactly does this PR do? -->
Adds support for all spinners when using windows terminal.

Note: If using jupyter notebook spawned from windows terminal, when all characters display correctly. If using jupyter notebook not spawned from WT, then the characters display fallbacks dispite not needing them. HaloNotebook could just patch the ```is_supported``` call``` to ignore it, but that would not work as well for LogSymbols.

## Checklist

- [x] Your branch is up-to-date with the base branch
- [ ] You've included at least one test if this is a new feature (bug fix)
- [ ] All tests are passing

## Related Issues and Discussions
<!-- Link related issues here to automatically close them when PR is merged -->
<!-- E.g. "Fixes #12" -->
Fixes #5
## People to notify
<!-- Please @mention relevant people here: -->

I propose to inject the spinner instance as an optional parameter to functions decorated by halo. This was my use case:
```python
@Halo(text='Doing work', spinner='dots', color="red")
def initialize_git(spinner=None):  # This argument is optional and can also be omitted
    try:
        my_complicated_function()
    except Exception:
        spinner.fail("Failed!")
        raise
    spinner.succeed("Succeeded!")
```
I know that this is possible to use a context manager, but this does require deeper nesting and is not that neat imo. Please let me know if you consider this a valid use case.

## Description
This PR adds functionality to declare the optional keyword argument as a parameter to obtain a reference to the spinner object. This does not break anything and is completely optional.

## Checklist
- [x] Your branch is up-to-date with the base branch
- [x] You've included at least one test if this is a new feature
- [x] All tests are passing

## Further considerations
It is also possible to inject the spinner instance as a positional argument, but this could not be made optional.
Not sure if this is a bug or if I am doing something wrong But the spinner shows up for each function
## Description
SO my code is 
from halo import Halo
import time
test_list = [1,2,3,4,5,6,7,8,9]
def function1():
    time.sleep(2)
    for num in test_list:
        test_num = num*100
        print(test_num)
def function2():
    time.sleep(2)
    for num in test_list:
        test_num = num*200
        print(test_num)
def main():
    function1()
    function2()


spinner = Halo(text='test', text_color="green", spinner='simpleDotsScrolling',placement="right",animation='marquee')
spinner.start()
main()
spinner.stop()

output is 
test |
100
200
test300
-400
500
600
700
800
900
test /200
400
600
800
1000
1200
1400
1600
1800

using with Halo output is
test -100
200
300
400
500
600
700
800
900
test /200
400
600
800
1000
1200
1400
1600
1800
### System settings

- Operating System: Windows
- Terminal in use: CMD
- Python version: 3.7
- Halo version: Latest

### Expected behaviour
I expected it to shows
spinner
function1 output
function2 output

## Steps to recreate
Run example code i provided in windows

## People to notify
<!-- Please @mention relevant people here:-->

<!-- Please use the appropriate issue title format:
    BUG REPORT
    Bug: {Short description of bug}
When using threads and having an instance of Halo for each threads the spinner info overwrites itself

Thank you for your help !

    SUGGESTION
    Suggestion: {Short description of suggestion}

    OTHER
    {Question|Discussion|Whatever}: {Short description} -->


## Description
<!-- Describe the bug or suggestion in detail -->
Basically I have multiple threads and for each thread I defined an instance of halo spinner , but when running the program the halo status just overwrites constantly between each thread until success or failure.
I'd like it to print a new line of halo spinner text for each thread , and update only that line till success or failure

### System settings

- Operating System:Mac OS
- Terminal in use: venv PyCharm
- Python version:3.6
- Halo version: 0.0.28
- `pip freeze` output:
beautifulsoup4==4.8.1
browsercookie==0.7.5
bs4==0.0.1
certifi==2019.9.11
cfscrape==2.0.8
chardet==3.0.4
colorama==0.4.1
cursor==1.3.4
entrypoints==0.3
halo==0.0.28
idna==2.8
keyring==19.2.0
log-symbols==0.0.14
lxml==4.4.1
lz4==2.2.1
pycrypto==2.6.1
requests==2.22.0
requests-file==1.4.3
selenium==3.141.0
selenium-requests==1.3
six==1.13.0
soupsieve==1.9.5
spinners==0.0.23
termcolor==1.1.0
tldextract==2.2.2
urllib3==1.25.6


## Description of new feature, or changes
Issue #59 Output gets hidden on stop_and_persist in Jupyter notebooks - added output to self.output.outputs instead of reassignment to persist output when cell finishes running.

## Checklist

- [x] Your branch is up-to-date with the base branch
- [x] You've included at least one test if this is a new feature
- [x] All tests are passing

## Related Issues and Discussions 
Fixes #59 


## Description of new feature, or changes
Added the ability to manually render single spinner steps, via:
 - 'manual_step' argument when creating Halo class instance
- '.step()' method to trigger single frame to render
- 'test_manual_step' test

## Usage
```
with Halo(spinner='dots', manual_step=True) as spinner:
    for text in ["foo","bar"]*5:
        spinner.text = 'Loading {}'.format(text)
        spinner.step()
        do_something(text)
```
or
```
spinner = Halo(spinner="dots", manual_step=True)
spinner.start()
for text in ["foo", "bar"]*5:
    spinner.text=text
    spinner.step()
    do_something(text)
spinner.stop()
```

## Checklist
- [x] Your branch is up-to-date with the base branch
- [x] You've included at least one test if this is a new feature
- [x] All tests are passing

## Related Issues and Discussions
Fixes #47 (new feature)

## People to notify
@steelman

## Description of new feature, or changes
Initializes documentation using Sphinx. Supports both reStructuredText and markdown. Content is mainly from docstrings via autodoc and a rewrite of README.md to reStructuredText format. Also added FAQ page that includes mention of Windows compatible spinners. Specifically, that it defaults to `line` for now. Compatibility with other operating systems can be added as needed.

## Checklist

- [x] Your branch is up-to-date with the base branch
- [x] You've included at least one test if this is a new feature
- [x] All tests are passing

## Related Issues and Discussions
Fixes #6 and finishes off #5.

Proofing may be needed to ensure all the desired information is present. For example, in `docs/source/conf.py` I set `copyright = '2019, Manraj Singh'` rather than `copyright = '2019, Manraj Singh and contributors'`.

Directions for building documentation included in `DEVELOPMENT.md`.

Documentation can be tested with `tox -e sphinx`.

## People to notify
@manrajgrover 

## Description of new feature, or changes
Whitelists spinners that are compatible with Windows OS in `halo.py`'s  `_get_spinner()` method instead of always defaulting to `line`. Still defaults to `line` if spinner is not in the whitelist.

## Checklist

- [x] Your branch is up-to-date with the base branch
- [x] You've included at least one test if this is a new feature
- [x] All tests are passing

I don't have much experience with testing, so I have to ask: is it being tested properly? Double-checking the `tox` output for `halo.py`, line 270 is the `is_supported()` check and lines 271-274 are only used in a non-Windows environment.

```
(venv36) C:\Users\User\PycharmProjects\halo>tox -e py36
GLOB sdist-make: C:\Users\User\PycharmProjects\halo\setup.py
py36 create: C:\Users\User\PycharmProjects\halo\.tox\py36
py36 installdeps: -rC:\Users\User\PycharmProjects\halo/requirements.txt, -rC:\Users\User\PycharmProjects\halo/requirements-dev.txt
py36 inst: C:\Users\User\PycharmProjects\halo\.tox\dist\halo-0.0.23.zip
py36 installed: astroid==2.2.5,attrs==19.1.0,bleach==3.1.0,certifi==2019.3.9,chardet==3.0.4,colorama==0.3.9,coverage==4.4.1,cursor==1.2.0,decorator==4.4.0,defusedxml==0.5.0,docu
tils==0.14,entrypoints==0.3,enum34==1.1.6,halo==0.0.23,idna==2.8,ipykernel==5.1.0,ipython==5.7.0,ipython-genutils==0.2.0,ipywidgets==7.1.0,isort==4.3.17,Jinja2==2.10.1,jsonschem
a==3.0.1,jupyter-client==5.2.4,jupyter-core==4.4.0,lazy-object-proxy==1.3.1,log-symbols==0.0.12,MarkupSafe==1.1.1,mccabe==0.6.1,mistune==0.8.4,nbconvert==5.4.1,nbformat==4.4.0,n
ose==1.3.7,notebook==5.7.8,pandocfilters==1.4.2,pickleshare==0.7.5,pkginfo==1.5.0.1,pluggy==0.9.0,prometheus-client==0.6.0,prompt-toolkit==1.0.15,py==1.8.0,Pygments==2.3.1,pylin
t==2.3.0,pyrsistent==0.14.11,python-dateutil==2.8.0,pywinpty==0.5.5,pyzmq==18.0.1,readme-renderer==24.0,requests==2.21.0,requests-toolbelt==0.9.1,Send2Trash==1.5.0,simplegeneric
==0.8.1,six==1.12.0,spinners==0.0.23,termcolor==1.1.0,terminado==0.8.2,testpath==0.4.2,tornado==6.0.2,tox==2.8.2,tqdm==4.31.1,traitlets==4.3.2,twine==1.12.1,typed-ast==1.3.1,url
lib3==1.24.1,virtualenv==16.4.3,wcwidth==0.1.7,webencodings==0.5.1,widgetsnbextension==3.1.4,wrapt==1.11.1
py36 runtests: PYTHONHASHSEED='929'
py36 runtests: commands[0] | nosetests --cover-package=halo --with-coverage --cover-erase --cover-branches --nologcapture
.......................................................
Name                    Stmts   Miss Branch BrPart  Cover   Missing
-------------------------------------------------------------------
halo\__init__.py            6      0      0      0   100%
halo\_utils.py             51     14     10      4    70%   9-10, 30, 45-46, 52, 54, 58-59, 131-134, 150, 29->30, 51->52, 53->54, 149->150
halo\halo.py              200     15     54      7    91%   82, 85-88, 271-274, 349-350, 406, 427, 456, 534, 546-547, 84->85, 270->271, 405->406, 426->427, 447->451, 455->456, 5
33->534
halo\halo_notebook.py      59      3     14      3    92%   58, 87, 99, 57->58, 86->87, 98->99
-------------------------------------------------------------------
TOTAL                     316     32     78     14    88%
----------------------------------------------------------------------
Ran 55 tests in 45.855s

OK
___________________________________________________________________________________ summary ____________________________________________________________________________________
  py36: commands succeeded
  congratulations :)

(venv36) C:\Users\User\PycharmProjects\halo>tox -e lint
GLOB sdist-make: C:\Users\User\PycharmProjects\halo\setup.py
lint recreate: C:\Users\User\PycharmProjects\halo\.tox\lint
lint installdeps: -rC:\Users\User\PycharmProjects\halo/requirements.txt, -rC:\Users\User\PycharmProjects\halo/requirements-dev.txt
lint inst: C:\Users\User\PycharmProjects\halo\.tox\dist\halo-0.0.23.zip
lint installed: astroid==2.2.5,attrs==19.1.0,bleach==3.1.0,certifi==2019.3.9,chardet==3.0.4,colorama==0.3.9,coverage==4.4.1,cursor==1.2.0,decorator==4.4.0,defusedxml==0.5.0,docu
tils==0.14,entrypoints==0.3,enum34==1.1.6,halo==0.0.23,idna==2.8,ipykernel==5.1.0,ipython==5.7.0,ipython-genutils==0.2.0,ipywidgets==7.1.0,isort==4.3.17,Jinja2==2.10.1,jsonschem
a==3.0.1,jupyter-client==5.2.4,jupyter-core==4.4.0,lazy-object-proxy==1.3.1,log-symbols==0.0.12,MarkupSafe==1.1.1,mccabe==0.6.1,mistune==0.8.4,nbconvert==5.4.1,nbformat==4.4.0,n
ose==1.3.7,notebook==5.7.8,pandocfilters==1.4.2,pickleshare==0.7.5,pkginfo==1.5.0.1,pluggy==0.9.0,prometheus-client==0.6.0,prompt-toolkit==1.0.15,py==1.8.0,Pygments==2.3.1,pylin
t==2.3.0,pyrsistent==0.14.11,python-dateutil==2.8.0,pywinpty==0.5.5,pyzmq==18.0.1,readme-renderer==24.0,requests==2.21.0,requests-toolbelt==0.9.1,Send2Trash==1.5.0,simplegeneric
==0.8.1,six==1.12.0,spinners==0.0.23,termcolor==1.1.0,terminado==0.8.2,testpath==0.4.2,tornado==6.0.2,tox==2.8.2,tqdm==4.31.1,traitlets==4.3.2,twine==1.12.1,typed-ast==1.3.1,url
lib3==1.24.1,virtualenv==16.4.3,wcwidth==0.1.7,webencodings==0.5.1,widgetsnbextension==3.1.4,wrapt==1.11.1
lint runtests: PYTHONHASHSEED='496'
lint runtests: commands[0] | pylint --errors-only --rcfile=C:\Users\User\PycharmProjects\halo/.pylintrc --output-format=colorized halo
___________________________________________________________________________________ summary ____________________________________________________________________________________
  lint: commands succeeded
  congratulations :)


```

## Related Issues and Discussions
Partially fixes #5 except for

> Now let's say we document Windows supported spinners.

This could be part of #6, which I can address using Sphinx in another PR.

It also doesn't address

> I wish to support Python 2.7 for as long as possible and yes, there are dependents who make use of this version.

I don't know what Python 2.7.x will have issues with, but I can try it out.

## People to notify
@manrajgrover 

Cursor is now under GPL license. Which means you should either change license too or stop using Cursor
<!-- Please use the appropriate issue title format:
    BUG REPORT
    Bug: {Short description of bug}

    SUGGESTION
    Suggestion: {Short description of suggestion}

    OTHER
    {Question|Discussion|Whatever}: {Short description} -->


## Description
<!-- Describe the bug or suggestion in detail -->
When used as a context manager, a Halo spinner starts itself before .start() is called.  

### Expected behaviour
<!-- Put expected behaviour here -->
The spinner should not start until .start() is called explicitly
## Steps to recreate
```python
with Halo(color="grey",spinner="clock",placement="left", animation="marquee") as spinner:
    try:
        with db.authenticate_user as db_connection: #prompts for username/password, hidden if spinner is running
            spinner.start("doing something")
            #do something
    except DBException:
        spinner.fail("caught exception")

```


