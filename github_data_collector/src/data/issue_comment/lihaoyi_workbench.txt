Hello,

it looks that the current build of Workbench is incompatible with Scala.js 1.0.0, do you have any plans to add support for this upcoming major version?

```
[error] java.lang.NoClassDefFoundError: org/scalajs/sbtplugin/ScalaJSPlugin$AutoImport$
[error] 	at com.lihaoyi.workbench.WorkbenchPlugin$.<init>(WorkbenchPlugin.scala:26)
[error] 	at com.lihaoyi.workbench.WorkbenchPlugin$.<clinit>(WorkbenchPlugin.scala)
[error] 	at java.lang.Class.forName0(Native Method)
[error] 	at java.lang.Class.forName(Class.java:348)
[error] 	at sbt.internal.inc.ModuleUtilities$.getObject(ModuleUtilities.scala:20)
[error] 	at sbt.internal.inc.ModuleUtilities$.getCheckedObject(ModuleUtilities.scala:27)
[error] 	at sbt.internal.inc.ModuleUtilities$.$anonfun$getCheckedObjects$1(ModuleUtilities.scala:31)
[error] 	at scala.collection.immutable.Stream.$anonfun$map$1(Stream.scala:415)
[error] 	at scala.collection.immutable.Stream$Cons.tail(Stream.scala:1169)
[error] 	at scala.collection.immutable.Stream$Cons.tail(Stream.scala:1159)
[error] 	at scala.collection.generic.Growable.loop$1(Growable.scala:54)
[error] 	at scala.collection.generic.Growable.$plus$plus$eq(Growable.scala:58)
[error] 	at scala.collection.generic.Growable.$plus$plus$eq$(Growable.scala:50)
[error] 	at scala.collection.mutable.ListBuffer.$plus$plus$eq(ListBuffer.scala:186)
[error] 	at scala.collection.mutable.ListBuffer.$plus$plus$eq(ListBuffer.scala:44)
[error] 	at scala.collection.TraversableLike.$plus$plus(TraversableLike.scala:147)
[error] 	at scala.collection.TraversableLike.$plus$plus$(TraversableLike.scala:143)
[error] 	at scala.collection.immutable.List.$plus$plus(List.scala:207)
[error] 	at sbt.internal.PluginDiscovery$.discoverAll(PluginDiscovery.scala:54)
[error] 	at sbt.internal.Load$.loadPlugins(Load.scala:1267)
[error] 	at sbt.internal.Load$.loadPluginDefinition(Load.scala:1212)
[error] 	at sbt.internal.Load$.buildPlugins(Load.scala:1191)
[error] 	at sbt.internal.Load$.plugins(Load.scala:1174)
[error] 	at sbt.internal.Load$.$anonfun$loadUnit$2(Load.scala:683)
[error] 	at sbt.internal.Load$.timed(Load.scala:1343)
[error] 	at sbt.internal.Load$.$anonfun$loadUnit$1(Load.scala:683)
[error] 	at sbt.internal.Load$.timed(Load.scala:1343)
[error] 	at sbt.internal.Load$.loadUnit(Load.scala:677)
[error] 	at sbt.internal.Load$.$anonfun$builtinLoader$4(Load.scala:477)
[error] 	at sbt.internal.BuildLoader$.$anonfun$componentLoader$5(BuildLoader.scala:158)
[error] 	at sbt.internal.BuildLoader.apply(BuildLoader.scala:223)
[error] 	at sbt.internal.Load$.loadURI$1(Load.scala:539)
[error] 	at sbt.internal.Load$.loadAll(Load.scala:555)
[error] 	at sbt.internal.Load$.loadURI(Load.scala:485)
[error] 	at sbt.internal.Load$.load(Load.scala:464)
[error] 	at sbt.internal.Load$.$anonfun$apply$1(Load.scala:253)
[error] 	at sbt.internal.Load$.timed(Load.scala:1343)
[error] 	at sbt.internal.Load$.apply(Load.scala:253)
[error] 	at sbt.internal.Load$.defaultLoad(Load.scala:69)
[error] 	at sbt.BuiltinCommands$.liftedTree1$1(Main.scala:707)
[error] 	at sbt.BuiltinCommands$.doLoadProject(Main.scala:707)
[error] 	at sbt.BuiltinCommands$.$anonfun$loadProjectImpl$2(Main.scala:680)
[error] 	at sbt.Command$.$anonfun$applyEffect$4(Command.scala:134)
[error] 	at sbt.Command$.$anonfun$applyEffect$2(Command.scala:130)
[error] 	at sbt.MainLoop$.processCommand(MainLoop.scala:154)
[error] 	at sbt.MainLoop$.$anonfun$next$2(MainLoop.scala:137)
[error] 	at sbt.State$$anon$1.runCmd$1(State.scala:242)
[error] 	at sbt.State$$anon$1.process(State.scala:248)
[error] 	at sbt.MainLoop$.$anonfun$next$1(MainLoop.scala:137)
[error] 	at sbt.internal.util.ErrorHandling$.wideConvert(ErrorHandling.scala:16)
[error] 	at sbt.MainLoop$.next(MainLoop.scala:137)
[error] 	at sbt.MainLoop$.run(MainLoop.scala:130)
[error] 	at sbt.MainLoop$.$anonfun$runWithNewLog$1(MainLoop.scala:108)
[error] 	at sbt.io.Using.apply(Using.scala:22)
[error] 	at sbt.MainLoop$.runWithNewLog(MainLoop.scala:102)
[error] 	at sbt.MainLoop$.runAndClearLast(MainLoop.scala:58)
[error] 	at sbt.MainLoop$.runLoggedLoop(MainLoop.scala:43)
[error] 	at sbt.MainLoop$.runLogged(MainLoop.scala:35)
[error] 	at sbt.StandardMain$.runManaged(Main.scala:113)
[error] 	at sbt.xMain.run(Main.scala:76)
[error] 	at xsbt.boot.Launch$$anonfun$run$1.apply(Launch.scala:109)
[error] 	at xsbt.boot.Launch$.withContextLoader(Launch.scala:128)
[error] 	at xsbt.boot.Launch$.run(Launch.scala:109)
[error] 	at xsbt.boot.Launch$$anonfun$apply$1.apply(Launch.scala:35)
[error] 	at xsbt.boot.Launch$.launch(Launch.scala:117)
[error] 	at xsbt.boot.Launch$.apply(Launch.scala:18)
[error] 	at xsbt.boot.Boot$.runImpl(Boot.scala:56)
[error] 	at xsbt.boot.Boot$.main(Boot.scala:18)
[error] 	at xsbt.boot.Boot.main(Boot.scala)
```
This PR builds upon and includes commits in PR #49 by zikolach

I've been using this with Play 2.7.0 and these updates now solve akka version conflicts with 2.7.0.

I've presumptive bumped the project version to 0.4.2, feel free to correct.

Cheers
I've just upgraded from Play 2.6.20 to Play 2.7.0 and have noticed an incompatible version of Akka when running `startWorkbenchServer`.

```
sbt:admin> startWorkbenchServer
Detected java.lang.NoSuchMethodError error, which MAY be caused by incompatible Akka versions on the classpath. Please note that a given Akka version MUST be the same across all modules of Akka that you are using, e.g. if you use akka-actor [2.5.18 (resolved from current classpath)] all other core Akka modules MUST be of the same version. External projects like Alpakka, Persistence plugins or Akka HTTP etc. have their own version numbers - please make sure you're using a compatible set of libraries.                 
```

As a test I cloned PR https://github.com/lihaoyi/workbench/pull/49 that updated Akka and other libraries and ran `publishLocal`.  I'm pleased to announce that this pull request fixed the issue for me.

Could we please get his merged so others can update to Play 2.7.0?
- scalajs
- akka
- sbt
- scala
I would like to ask some questions about this project which do not belong in an issue.  
Would it be possible to have a gitter channel for this project for general inquiries?
Would you please update the [example app](https://github.com/lihaoyi/workbench-example-app) to latest versions ? It is really outdated now.

I tried to do it myself but I'm still too much a newbie in sbt / scalajs to succeed.

Thanks !
When developing react apps, I've been using webpack proxy to forward `/api/*` to e.g. `localhost:9000/api/*` for speedy development of single page web apps. 
Correct me if I'm wrong, but I don't see any way to proxy servers with workbench.

Effectively, this gives my web-app the illusion that it is being hosted on the actual server allowing me to keep relative paths everywhere. (autowire is not an option for me currently).

Would it be much work to add a configuration to forward some sub-path to a user chosen URL?
The line `override def requires = WorkbenchPlugin` causes the 'refresh' plugin to load. It should be `override def requires = WorkbenchBasePlugin`.

```
scalaVersion in ThisBuild := "2.12.4"

val client = project.in(file("client"))
  .settings(
    name := "test-client"
  )
  .enablePlugins(ScalaJSPlugin, WorkbenchSplicePlugin)
```
```Loading Workbench
workbench.js:121:160
Workbench connected
workbench.js:438:172
workbench: Splicing http://localhost:12345\client\target\scala-2.12\test-client-fastopt.js
workbench.js:124:117
workbench: Checking test-client-jsdeps.js.js
workbench.js:124:117
workbench: Checking test-client-jsdeps.js
workbench.js:124:117
workbench: Checking test-client-fastopt.js.js
workbench.js:124:117
workbench: Checking test-client-fastopt.js
workbench.js:124:117
workbench: Reloading Pages...
```

If I override that, it does load modified files without refreshing, but none of the 'modify methods while preserving state' behaviour works - I don't think any of the `munge` regexes work on the current fastOptJS.
I can make the pr if you'd like, but the language [here](https://github.com/sbt/website/blob/master/src/reference/01-General-Info/02-Community-Plugins.md#available-plugins) seems to indicate the author should do it
I'm running
```bash
$ sbt ~fastOptJS
```
and point my browser at http://localhost:12345/index-dev.html.

When I change some code and fastOptJS triggers but gives an compile-error, my browser is refreshing anyways and therefore I cannot see the compile error in the browser log.

Is this expected behavior?