It seems to be the combination of a `Value.Enclosing` and the inner `Value.Immutable` classes extending the `Value.Enclosing` class making the parent (abstract) Value class the default one resolved when using an unqualified name.  The generated source code needs to qualify the `.super` reference with `ImmutableXYZ.InnerClass.super.xyz()`.

It will make sense if you look at the project: https://github.com/facboy/immutables-bug
Hi,

the suppression mechanisms for `@javax.annotation.Generated` do not seem to work for me.

I configured three exections using maven:

1.) run annotation processors on jdk11 with `javac -release=8 -proc:only`
2.) compile everything to java 9 with `-release=9 javac -proc:none`
3.) compile everything but module-info.java to java 8 `javac -release=8 -proc:none`

The first run is done in the generate-sources phase of maven like this:

```
<execution>
              <id>run-annotation-processors-only</id>
              <phase>generate-sources</phase>
              <goals>
                <goal>compile</goal>
              </goals>

              <configuration>
                <proc>only</proc>
                <compilerArgument>-Xlint:all</compilerArgument>
                <showWarnings>true</showWarnings>
                <showDeprecation>true</showDeprecation>
                <!-- false means trueâ€¦ -->
                <useIncrementalCompilation>false</useIncrementalCompilation>
                <annotationProcessorPaths>
                  <path>
                    <groupId>org.checkerframework</groupId>
                    <artifactId>checker</artifactId>
                    <version>${checker.version}</version>
                  </path>
                  <path>
                    <groupId>org.immutables</groupId>
                    <artifactId>value</artifactId>
                    <version><!-- any 2.7 or 2.8 --></version>
                  </path>
                </annotationProcessorPaths>
                <excludes>
                  <exclude>module-info.java</exclude>
                </excludes>
              </configuration>
            </execution>
```

For me it seems as immutables will not pick up the option `allowedClasspathAnnotations = {java.lang.Override.class}` on the main package, nor the file `META-INF/extensions/org.immutables.inhibit-classpath`.


I was working on a problem such as the following;

To allow to be optionally passed in with the builder, but if not passed in Lazily compute it.

```
Foo fooTheFirst  = ImmutableFoot.builder()
								.value1("1")
								.value2("2")
								.build();

Foo fooTheSecond = ImmutableFoot.builder()
								.value1("1")
								.value2("2")
								.bar(new Bar())
								.build();

fooTheFirst.getBar(); // returns lazily computed default Bar
fooTheSecond.getBar(); // returns instance of Bar
```

I know this seems very similar to the normal `Default`. Perhaps this is a logic error, and I'm just not thinking straight? I just want to create an instance of `Bar` once and use it for the life of the Immutable. Unless provided in the builder.
This fixes issues to copy over set custom `@SuppressWarnings` annotations.
When creating an immutable class that derives from a base class containing a method with a generic return value the Maven 'install' build fails. Any other immutable used somewhere in the source code  (here for example 'Index') produces errors of the type 

[ERROR] /Users/frank/Development/companies/bynubian/workspaces/development/bynubian-datamodel/bynubian-elasticsearch-core/src/main/java/com/bynubian/elasticsearch/management/IndexSetManagement.java:[64,61] cannot find symbol
[ERROR]   symbol:   class Index

But when going to the generated code in Eclipse no errors are present!

I have attached a example class for reference. Add the code to any project that uses Maven and has other immutables and you should see the problem.
Any ideas?

Best regards,
Frank Montyne

[Problem.zip](https://github.com/immutables/immutables/files/4036364/Problem.zip)

With Builders, we can add a static nested class named Builder that will be extended by a generated Builder.

There is no equivalent for Modifiable. Therefore, if we want to use Modifiable to simulate smart builders, there is no way to achieve the same functionality.

If I've an attribute that is, `List<List<?>>`, the library ensures that the outer list is immutable. However, I need deep immutability. The inner lists should also be detected made immutable.
We need the ability to determine the schema of Immutable objects that are persisted in a database like MongoDB. Since there is no way to inspect private fields of the Immutable class using reflection, the closest available alternative was to inspect the mutator methods on the Immutable Builder class. But that approach is hacky, because the builder class has additional methods (equals, from, wait and collection utility methods like addAll, remove, set, etc.). Additionally, the builder sometimes has overloaded methods, e.g. if a field is of type Optional. Also, fields annotated with @Gson.Ignore can't be excluded from the schema, when enumerating mutators on the Builder. So far, generating a new _Fields class seems to be the best available option to be able to determine a database schema. See https://github.com/immutables/immutables/pull/1129.
The main driver for this change is to be able to determine the schema of objects (X in our example) that are persisted in a database like mongoDB. Since there is no way to inspect private fields of the Immutable class using reflection, the closest alternative is to inspect the mutator methods on the Immutable Builder class. But that approach is hacky, because the builder class has additional methods (equals, from, wait and collection utility methods like addAll, remove, set, etc.). Also the builder sometimes has overloaded methods, e.g. if a field is of type Optional<T>. Also fields annotated with @Gson.Ignore can't be excluded from the schema, when enumerating mutators on the Builder. Thus generating a new _Fields class seems to be the best available option to be able to determine a database schema.