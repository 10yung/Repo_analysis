Hi

I am working on a idea and in that i am facing one issue about security. Then i started googling about that problem then i came to know that may be openpolicy agent may fit So posting my thoughts over here .

**Idea**
I have some classified data along with url and now i am trying to publish that data on a public social group which is organization based like **yammer, Microsoft teams**.

**Issue**
When a user clicking on a particular url then i am not able to validate the authenticity of the user before redirecting to the page.

**Expectation**
I want that when a user click on that particular url then i want to check the authenticity of that user, if it a valid user then i will redirect to that url otherwise through an error.
For this use-case, can i take the advantage of openpolicy agent? if yes then how?

Any lead will be appreciated.
Thanks

# Expected Behavior
If configuring a ready check for OPA using `/health?bundle=true` and a discovery service that requires a bundle to be downloaded, and then additional normal bundles, I expect that it wouldn't return true until _after_ all the bundles are activated for the first time.

# Actual Behavior
The ready check including bundles `/health?bundle=true` doesn't account for discovery bundles, or bundles found after discovery.

# Steps to Reproduce the Problem

  1. Run OPA with a bad discovery config (so it can never download a discovery bundle)
```
opa run --set services.local.url=http://localhost:8080 --set discovery.service=local --set discovery.name=local -s
```
  2. Curl OPA's health endpoint
```
curl -v 'localhost:8181/health?bundle=true'
```
  3. Observe a `200 OK` response

# Steps to reproduce

This problem can reproduced simply with `nc`. For example:

```
$ nc -l localhost 8000
GET /foo HTTP/1.1
```

In a separate terminal start opa and point it at the server:

```
$ opa run -s --set services.test.url=http://localhost:8000 --set bundles.test.resource=foo
{"addrs":[":8181"],"insecure_addr":"","level":"info","msg":"Initializing server.","time":"2020-01-17T17:17:10-05:00"}
{"level":"info","msg":"Starting bundle downloader.","name":"test","plugin":"bundle","time":"2020-01-17T17:17:10-05:00"}
```

netcat will print the request but not send any response. OPA will continue waiting indefinitely because there is no timeout set on the HTTP request.

# Solution

[This page does a good job of explaining how the various client timeouts can be set.](https://blog.cloudflare.com/the-complete-guide-to-golang-net-http-timeouts/) OPA should be updated to set the `Client.Do` timeout (which I think means cancelling the context). Note, we do not want to set default timeouts on reading the full response since that'll cause problems for users with large bundles. It should be safe to assume that OPA starts receiving HTTP headers on the order of seconds (e.g., 10 seconds is probably a safe default.)

Initially, users should be able to configure the timeout on the service object. For example:

```
services:
   test:
     url: https://example.com/v1
     response_header_timeout_seconds: 10
```
When running OPA in server mode and evaluating policies via HTTP I am getting the test results back for each decision. I would like the decision results to not contain the test output because my calling application would never need to use this data and it takes up more size on the response than the decision result itself. As more tests are written for the policy, the output is growing for each decision result.

Maybe when creating a bundle I wasn't supposed to add the tests? I assumed that bundling the tests is a good thing to allow opa to self test when it starts up. Is there a config option to hide the results?

Thank you

## Steps to reproduce

1. `authz.rego`

```
package something

default allow = false

allow {
  "admin" == input.role
}

```

2. `test_authz.rego`

```
package something

test_allowed_because_admin {
  allow with input as {
      "role": "admin"
   }
}
```
3. Build Bundle

```tar -czvf ../build/opa_bundle.tar.gz ./*```

3. Starting OPA

```opa run -s -b ./build/opa_bundle.tar.gz```

4. Execute the policy

```curl -X POST --data '{ "input": { "role" : "admin" } }' http://localhost:8181/v1/data/something```

5. HTTP Response contains test output

```
{"result":{"allow":true,"test_allowed_because_admin":true}}
```

Unlike the generic Walk implementation, they don't necessitate
allocating the visitor itself from heap.

Benchmarks changed:

    benchmark                                        old allocs     new allocs     delta
    BenchmarkScheduler10x30-4                        71521          71480          -0.06%
    BenchmarkLargeJSON-4                             603861         603927         +0.01%
    BenchmarkConcurrency1-4                          2122273        2118265        -0.19%
    BenchmarkConcurrency2-4                          2122371        2118360        -0.19%
    BenchmarkConcurrency4-4                          2122402        2118444        -0.19%
    BenchmarkConcurrency8-4                          2122463        2118451        -0.19%
    BenchmarkConcurrency4Readers1Writer-4            2122424        2118447        -0.19%
    BenchmarkConcurrency8Writers-4                   2122289        2118258        -0.19%
    BenchmarkPartialEvalCompile/1-4                  34863          34180          -1.96%
    BenchmarkPartialEvalCompile/10-4                 46741          44717          -4.33%
    BenchmarkPartialEvalCompile/100-4                245519         230087         -6.29%
    BenchmarkPartialEvalCompile/1000-4               11153000       11003511       -1.34%
    BenchmarkWalk/100-4                              9580           9531           -0.51%
    BenchmarkWalk/1000-4                             11413          11364          -0.43%
    BenchmarkWalk/2000-4                             13445          13396          -0.36%
    BenchmarkWalk/3000-4                             15446          15397          -0.32%
    BenchmarkInliningFullScan/1000-4                 85997          80994          -5.82%
    BenchmarkInliningFullScan/10000-4                860006         810003         -5.81%
    BenchmarkInliningFullScan/300000-4               25800022       24300018       -5.81%

Signed-off-by: Teemu Koponen <koponen@styra.com>

<!--

Thanks for submitting a PR to OPA!

Before pressing 'Create pull request' please read the checklist below.

* All code changes should be accompanied with tests. If you are not
modifying any tests, just provide a short explanation of why updates
to tests are not necessary. In addition to helping catch bugs, tests
are extremely helpful in providing _context_ that explains how your
changes can be used.

* All changes to public APIs **must** be accompanied with
docs. Examples of public APIs include built-in functions,
config fields, and of course, exported Go types/functions/constants/etc.

* Commit messages should explain _why_ you made the changes, not what
you changed. Use active voice. Keep the subject line under 50
characters or so.

* All commits must be signed off by the author. If you are not
familiar with signing off, see CONTRIBUTING.md below.

For more information on contributing to OPA see:

* [CONTRIBUTING.md](https://github.com/open-policy-agent/opa/blob/master/CONTRIBUTING.md)
  for high-level contribution guidelines.

* [DEVELOPMENT.md](https://github.com/open-policy-agent/opa/blob/master/docs/devel/DEVELOPMENT.md)
  for development workflow and environment setup.

-->

There was a typo from a while back that caused problems with this. It
would only occur in cases where the Rego object was created without
tracers, prepared, and then partially evaluated with tracers supplied
as part of the evaluation context. Any of the other code paths would
actually work as the original Rego object would still have them and
the (wrong) reference wouldn't cause a panic.

At some point more recently we changed `opa eval` to split up its
options for the Rego object and evaluation. Doing this caused the
problem to surface when doing anything with `opa eval -p --explain ..`

Fixes: #2007
Signed-off-by: Patrick East <east.patrick@gmail.com>

<!--

Thanks for submitting a PR to OPA!

Before pressing 'Create pull request' please read the checklist below.

* All code changes should be accompanied with tests. If you are not
modifying any tests, just provide a short explanation of why updates
to tests are not necessary. In addition to helping catch bugs, tests
are extremely helpful in providing _context_ that explains how your
changes can be used.

* All changes to public APIs **must** be accompanied with
docs. Examples of public APIs include built-in functions,
config fields, and of course, exported Go types/functions/constants/etc.

* Commit messages should explain _why_ you made the changes, not what
you changed. Use active voice. Keep the subject line under 50
characters or so.

* All commits must be signed off by the author. If you are not
familiar with signing off, see CONTRIBUTING.md below.

For more information on contributing to OPA see:

* [CONTRIBUTING.md](https://github.com/open-policy-agent/opa/blob/master/CONTRIBUTING.md)
  for high-level contribution guidelines.

* [DEVELOPMENT.md](https://github.com/open-policy-agent/opa/blob/master/docs/devel/DEVELOPMENT.md)
  for development workflow and environment setup.

-->

The current OPA health check endpoint only checks query evaluation and bundle activation status. There is no way for other plugins to provide health check information without recompile from source.

An enhancement can be made to OPA that allows plugins to provide health information. This is useful when a plugin needs to initialize some seed data and doesn't want an application to query it before it is ready. 

I have two implementation idea
1. provide a checker object that plugin author can register a health function to it. The health handler will iterate through the function. The API could be similar to this project https://github.com/heptiolabs/healthcheck

2. add a new method interface to the current Plugin interface. The plugin user can implement this method to return the current plugin status.



Currently OPA reports the timestamp of the last successful bundle download and bundle activation via the Status API. Status API implementations may also wish to know the last time OPA successfully attempted to refresh the bundle (i.e., in this case, the bundle server replied with HTTP 304).
```
$ docker run openpolicyagent/opa:0.16.1 eval -p --explain=full 'data'
panic: runtime error: index out of range

goroutine 1 [running]:
github.com/open-policy-agent/opa/rego.(*Rego).partial(0xc0001b8000, 0x10b5520, 0xc00002a030, 0xc0001dc000, 0x0, 0x0, 0x0)
	/src/rego/rego.go:1701 +0xbf0
github.com/open-policy-agent/opa/rego.PreparedPartialQuery.Partial(0xc0001b8000, 0xc000189ca0, 0x10b5520, 0xc00002a030, 0xc0001960e0, 0x1, 0x1, 0x0, 0x0, 0x0)
	/src/rego/rego.go:311 +0x170
github.com/open-policy-agent/opa/cmd.eval(0xc0001736e0, 0x1, 0x3, 0x100, 0xc0001882d0, 0x1, 0x1, 0x1627c90, 0x0, 0x0, ...)
	/src/cmd/eval.go:364 +0xe10
github.com/open-policy-agent/opa/cmd.init.3.func2(0xc00017c780, 0xc0001736e0, 0x1, 0x3)
	/src/cmd/eval.go:199 +0xde
github.com/spf13/cobra.(*Command).execute(0xc00017c780, 0xc000173680, 0x3, 0x3, 0xc00017c780, 0xc000173680)
	/src/vendor/github.com/spf13/cobra/command.go:766 +0x2ae
github.com/spf13/cobra.(*Command).ExecuteC(0x15c8520, 0x15c8520, 0xc0000bff88, 0x730d9f)
	/src/vendor/github.com/spf13/cobra/command.go:852 +0x2ec
github.com/spf13/cobra.(*Command).Execute(...)
	/src/vendor/github.com/spf13/cobra/command.go:800
main.main()
	/src/main.go:15 +0x32
```
The current guide doesn't really explain what all can or cannot be done with OPA policies and Terraform plans.

There are notably a few areas that are not easily covered by policies due to the information available at the time the JSON plan is generated:

* Expressions: Builtin functions in the plan may not have been evaluated yet, especially tricky are unknown values, dynamic blocks, and function calls:

https://www.terraform.io/docs/configuration/expressions.html#values-not-yet-known
https://www.terraform.io/docs/configuration/expressions.html#dynamic-blocks
https://www.terraform.io/docs/configuration/expressions.html#function-calls

It is probably worth noting in the docs update how Sentinel handles (or not) these sort of things: https://www.terraform.io/docs/cloud/sentinel/import/tfconfig.html#references-with-terraform-0-12 to ensure users have a good idea of what limitations there are with the different solutions and enforcing policies on terraform plans in general.