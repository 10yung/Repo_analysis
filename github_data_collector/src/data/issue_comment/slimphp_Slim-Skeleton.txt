I am trying to add any middleware, as example http://www.slimframework.com/docs/v4/cookbook/route-patterns.html

```php
<?php
declare(strict_types=1);

use App\Application\Middleware\SessionMiddleware;
use Middlewares\TrailingSlash;
use Slim\App;

return function (App $app) {
    $app->add(SessionMiddleware::class);
    $app->add(new TrailingSlash(true)); // true adds the trailing slash (false removes it)
};
```

But this doesn't work and I don't understand. Why? Can you help, please?
This issue is similar to #131 but on IIS

My site's physical path is `inetpub/www/project-name` bound to port `8888`. When I call an API (assuming its name is `/test`), calling with `http://localhost:8888/public/test` and `http://localhost:8888/test` will return 404. The route went through index.php.

I fixed it by adding a `web.config` file in the project root directory (not inside `/public/`) with these rules 

```
<?xml version="1.0" encoding="UTF-8"?>
<configuration>
    <system.webServer>
        <rewrite>
            <rules>
                <rule name="Imported Rule 1" stopProcessing="true">
                <match url="^$" ignoreCase="false" />
                <action type="Rewrite" url="public/" />
                </rule>
                <rule name="Imported Rule 2" stopProcessing="true">
                <match url="(.*)" ignoreCase="false" />
                <action type="Rewrite" url="public/index.php/{R:1}" />
                </rule>
            </rules>
            </rewrite>
    </system.webServer>
</configuration>
```

Now it returns the results as intended. 

Referring to my comment in https://github.com/slimphp/Slim-Skeleton/issues/131#issuecomment-566887084, converting the `.htaccess` inside the folder `/public/` is not needed and you don't need to install any packages nor set the base path with `$app->setBasePath($basePath)` like in Apache.
Add unit test to cover findAll function, for the case when calling the InMemoryUserRepository constructor passing $users with null value.

The array_key_exists() method allow to accepts the null value.

Most of the time we need to connect to a database.
Could we have a setup for example for 2 PDO database connections ?

In **setting.php** something like :
```
 'db' => [
                'host' => 'xxx'
                'dbname' => 'db',
                'username' => 'user',
                'password' => 'password',
                'options' => ['charset' => 'utf8'],
            ],
 'db2' => [
                'host' => 'xxx'
                'dbname' => 'db2',
                'username' => 'user2',
                'password' => 'password2',
                'options' => ['charset' => 'utf8'],
            ],
```
and some code in dependencies.php or external file db.php
and then update the index.php
and include some repository example how to use db and db2

My document root was MAMP/htdocs and my index.php was in htdocs/project-name/public/

Going to http://localhost:8888/project-name/public/users returned a 404 error.

My routes were going through the index.php, but were always returning a 404 code. I eventually fixed it by adding the following htaccess file to my project's root directory.

RewriteEngine On
RewriteCond %{REQUEST_FILENAME} !-f
RewriteCond %{REQUEST_FILENAME} !-d
RewriteRule ^ public/index.php [QSA,L]

Then http://localhost8888/project-name/users worked