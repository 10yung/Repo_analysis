Is there a way, to configure multiple Notification level in Watchtower?

like

- WATCHTOWER_NOTIFICATIONS_LEVEL=info,panic,fatal,error,warning

i'm not sure, if this is possible because i didn't found anything in the documentation about multiple levrels.

If this is not Possible, could you please create a Feature Request out of this?

Thank you for your amazing work <3
Hi,

I have been using Watchtower & it has some pretty cool features that I'm interested in. I would like to know
1. Is it possible for Watchtower to update running containers using images that are stored on a local filesystems (for eg. USB storage). I would like to do this employing lifecycle hooks the same way it works for online container registries?
2. Has there been any current effort/plans to implement anything similar to this?
3. Can this be done using any existing features? Please let me know.

Thanks,
Avinash.
I can't find this in the documentation, so I'll assume it isn't a feature.
---

It would be awesome to declare in the configuration file which containers are to be monitored and their respective registries and credentials.

The example in [the documentation](https://containrrr.github.io/watchtower/private-registries/#create_the_configuration_file_manually) is as follows:
```json
{
  "auths": {
    "<REGISTRY_NAME>": {
      "auth": "XXXXXXX"
      }
   }
}
```

My suggestion is to have an array of containers and an option to watch over the configured ones or all, defaulting to watch over all containers and the registry to DockerHub:

```json
{
  "watchAll": true,
  "containers": [
    {
      "name": "container-name",
      "interval": 10,
      "registry": {
        "name": "registry.gitlab.com",
        "username": "username",
        "password": "password"
      }
    }
  ]
}
```
**Is your feature request related to a problem? Please describe.**

I have been using Rocket.Chat for many of my dev-ops notifications instead of Slack. I recently implemented Watchtower for one of my projects and wondered if I could use the Slack notification feature to actually send notifications to a channel in [Rocket.Chat](https://rocket.chat). I did the following in my `docker-compose.yml` file:

```
environment:
      - WATCHTOWER_NOTIFICATIONS=slack
      - WATCHTOWER_NOTIFICATION_SLACK_HOOK_URL=${WATCHTOWER_NOTIFICATION_SLACK_HOOK_URL}
```

Where `WATCHTOWER_NOTIFICATION_SLACK_HOOK_URL` was the incoming webhook I created for one of my channels. The value looked something like this `https://rocketchat.somedomain.com/hooks/fXXXXXXXX/yyyyyyyyyyyyyyy`. In all, the screenshot attached below shows it works (or at least I think it does :) ).

![rocket-chat-with-watchtower](https://user-images.githubusercontent.com/6505395/72318925-7d8f8f80-3652-11ea-8ef2-59c45196d7f4.png)


**Describe the solution you'd like**

The following are things I would like to see:

- Are there any missing information / features in my example screenshot of using Rocket.Chat that I would be experiencing if I were using Slack? If so, may we implement the missing features to have robust support of Rocket.Chat?

- If the team decides to support Rocket.Chat, may there be similar documentation on using it as there is for Slack?

**Describe alternatives you've considered**

I thought of using Slack, but with all of my dev-ops projects configured to use Rocket.Chat, I did not want to move over to a new platform, therefore, I gave it a shot to see if it would work with Rocket.Chat.

**Additional context**

I believe this issue would be related to #264 . Thank you to the Watchtower team and collaborators for your awesome work!

This pull request implements the changes proposed in #429.

API Features + ToDo List:

- [x] **/v1/update** endpoint to trigger image updating process
- [x] **--http-api** flag to set up HTTP API mode
- [x] ~**--http-api-port** flag to customize the listening port~ (Container will always listen to 8080)
- [x] authentication token set by ENV variable
- [x] Expose port 8080 in the Dockerfile
- [x] Docs on how to use the API

Suggestions are welcomed!
Since Watchtower basically watches for docker registries and actively pulls images in order to check for outdated containers, it keeps continuously incrementing the registries' pull counter, making them useless. The counts can no longer be considered as user downloads/pulls.

This issue has been impacting some of my co-workers' personal projects and I have managed to use it as a working case in my bachelor's thesis. My proposal is to implement an HTTP API to enable DockerHub's Webook service to trigger Watchtower instances and make them check for updates only when a new image is pulled. Another use case would be a request made by a CI platform in order to trigger the update process.

I have already started some prototypes and I hope to be implementing a working version soon.
I'm using watchtower to test an automated container image update/download/run mechanism. The docker instance (which runs watchtower) is running on linux 5.0.19 built with yocto 2.7 in a qemuarm64 emulator. Docker has been tested and works correctly in pushing, pulling and running images in the QEMU ARM emulator. I face an issue with the following use case. I am uploading container images to gitlab container registry, I have also tested with docker hub and face this same issue. I am running these tests from behind a proxy.

This is the command I'm running to run watchtower.

docker run -d \
  --name watchtower \
  -v /home/root/.docker/config.json:/config.json \
  -v /var/run/docker.sock:/var/run/docker.sock \
registry.xxxx.io/avinashkurup/testcontainerregistry:mudball-arm64v8 --debug

$ docker logs watchtower
time="2020-01-07T05:27:18Z" level=debug msg="Retrieving running containers"
time="2020-01-07T05:27:18Z" level=debug msg="Retrieving running containers"
time="2020-01-07T05:27:18Z" level=debug msg="Scheduled next run: 2020-01-07 05:32:18 +0000 UTC"
time="2020-01-07T05:32:18Z" level=debug msg="Checking containers for updated images"
time="2020-01-07T05:32:18Z" level=debug msg="Retrieving running containers"
time="2020-01-07T05:32:18Z" level=debug msg="Retrieving running containers"
time="2020-01-07T05:32:18Z" level=debug msg="Retrieving running containers"
time="2020-01-07T05:32:18Z" level=debug msg="Scheduled next run: 2020-01-07 05:37:18 +0000 UTC"
time="2020-01-07T05:37:18Z" level=debug msg="Checking containers for updated images"
time="2020-01-07T05:37:18Z" level=debug msg="Retrieving running containers"
time="2020-01-07T05:37:18Z" level=debug msg="Retrieving running containers"
time="2020-01-07T05:37:18Z" level=debug msg="Retrieving running containers"
time="2020-01-07T05:37:18Z" level=debug msg="Scheduled next run: 2020-01-07 05:42:18 +0000 UTC"

I don't see any authentication taking place or any messages of downloading updated container images in the above logs? Is this normal?

docker ps
CONTAINER ID        IMAGE                   COMMAND                  CREATED             STATUS              PORTS               NAMES
8a4a8b19ca28        containrrr/watchtower   "/watchtower registrâ€¦"   About an hour ago   Up About an hour                        watchtower

docker images
REPOSITORY                                                   TAG                 IMAGE ID            CREATED             SIZE
registry.xxxx.io/avinashkurup/testcontainerregistry   mudball-arm64v8     eb6acdf50e46        About an hour ago   9.14kB
containrrr/watchtower                                        latest              2ad95879d2ee        10 days ago         13.7MB

I cannot see the container image updated with the version on the registry when the time interval of 5 minutes elapses. I see that the downloaded container image is supposed to be automatically run. also is docker-compose needed for using watchtower? I am new to docker and watchtower, am I missing something here?

Regards,
Avinash. B.
Hi guys,

This tool it is a great help in infrastructures where docker is used, or in organizations where the adoption of Kubernetes  is conditioned by first testing the cloud deployments in docker.

I read your documentation and i did not see any fallback mechanism in case the docker image is "broken".

This is a critical feature that needs to be implemented, as per production environments.

Here i just imagine somekind of restApi mechanism or ENV VARS where you instruct watchtower to spawn the latest working image.

Or there is another case of a wrapper implemented by the user to treat such cases.

What do you think and is there a step towards?

Thanks,
Catalin
**Is your feature request related to a problem? Please describe.**

It happens that an image is released, then recalled / pulled back because of an issue. Currently such an image would be updated by watchtower (as designed) 

**Describe the solution you'd like**

The ability to delay the update, such as in *update the image, but only if it is 3 days old*

Ideally on a per image basis, but a global setting is ok as well. 

**Describe alternatives you've considered**

There are none I can think of, except a very long time between checks but this will not solve the issue of a faulty image is released right before the check (it will be even worse, as a possible recovery/corrected one will not be pulled quickly) 


Following the document here https://github.com/containrrr/watchtower/blob/master/docs/credential-helpers.md

My docker config.json should be set up properly

```json
{
        "auths": {
                "https://index.docker.io/v1/": {},
                "xxxxxxx.dkr.ecr.xxxxx.amazonaws.com": {},
                "https://xxxxxxxx.dkr.ecr.xxxxxxx.amazonaws.com": {}
        },
        "credsStore": "secretservice",
        "HttpHeaders": {
                "User-Agent": "Docker-Client/19.03.5 (linux)"
        },
        "credHelpers": {
                "xxxxxxxx.dkr.ecr.xxxxx.amazonaws.com": "ecr-login"
        }
}
```

However with this setup I get an error `docker.errors.DockerException: Credentials store error: StoreError('docker-credential-ecr-login not installed or not available in PATH',)`

If I change my config to use ecr-login in the credsStore field instead of credHelpers it works fine
```json
{
        "auths": {
                "https://index.docker.io/v1/": {},
                "xxxxxxx.dkr.ecr.xxxxx.amazonaws.com": {},
                "https://xxxxxxxx.dkr.ecr.xxxxxxx.amazonaws.com": {}
        },
        "credsStore": "ecr-login",
        "HttpHeaders": {
                "User-Agent": "Docker-Client/19.03.5 (linux)"
        }
}
```

However this isn't ideal because now I can't pull public images from other container registries.

Am I missing something? Has anyone else been able to get the credHelpers field working with private registries?