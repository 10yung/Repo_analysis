
What happens? 

Gatling throws error and closes connection on 308 response from server, instead of simply following the redirect as expected. 

```
20:47:55.451 [ERROR] i.g.h.a.s.SseListener - unexpected state closed with error message: i.g.h.a.s.SseException: Server returned http response with code 308
```

This is a full blocker for testing server sent events connections. 

SSE should behave the same way to HTTP requests, in that, the default behavior should be to follow redirects, not throw. 

Can you help me,  How can I resolve this?
GATLING_HOME is set to /Users/sevenlm/workspace/gatling/gatling-charts-highcharts-bundle-3.3.1 BasicSimulation is the only simulation, executing it. Select run description (optional)
17:31:10.545 [ERROR] i.g.a.Gatling$ - Run crashed java.lang.NullPointerException: null	
at io.gatling.app.Selection$Selector.askRunDescription(Selection.scala:134)	
at io.gatling.app.Selection$Selector.$anonfun$selection$5(Selection.scala:60)	
at scala.Option.getOrElse(Option.scala:189)	
at io.gatling.app.Selection$Selector.selection(Selection.scala:60)	
at io.gatling.app.Selection$.apply(Selection.scala:36)	
at io.gatling.app.Runner.run0(Runner.scala:73)	
at io.gatling.app.Runner.run(Runner.scala:60)	
at io.gatling.app.Gatling$.start(Gatling.scala:80)	
at io.gatling.app.Gatling$.fromArgs(Gatling.scala:46)	
at io.gatling.app.Gatling$.main(Gatling.scala:38)	
at io.gatling.app.Gatling.main(Gatling.scala)
I mean something like this:
```
.assertions(
    global.requestPerSec(target=10, deviation=.05, inclusive=true),

)
```
where "target" is target intensity and "deviation" is deviation in percent.
Silencing - https://gatling.io/docs/current/http/http_request/#silencing - is currently supported only for HTTP requests. It would be great to have it also for websockets.

In the following example, `ws-check-poll-update` timeouts multiple times, which is correct (b/c we need to send client pings), however it's reported as an error, plus it adds the wait time to the response time, so it breaks lot of time statistics as well:
```
  val wsWaitForPollUpdate = asLongAs(_("capturedFeedbackId").validate[Int].isInstanceOf[Failure]) {
    exec(ws("ws-ping").sendText("2")
      .await(20 seconds)(ws.checkTextMessage("ws-check-poll-update")
        .matching(substring("poll.update"))
        .check(substring(""""event_uuid":"${uuid}""""))
        .check(regex(""""feedback_id":([0-9]+),""").saveAs("capturedFeedbackId"))))
  }
```

It's true that this is basically a workround to the missing feature described here https://github.com/gatling/gatling/issues/3783 but I think this feature could be useful even in other use cases.

Relevant mailing list threads:
https://groups.google.com/d/msg/gatling/CODxgKUoVVI/MLKwj4bKDAAJ
https://groups.google.com/d/msg/gatling/QHFu91DrCbM/zAQoroJWCgAJ
I am trying to use gatling to test an SSE endpoint that represents an update stream. To properly test this, I want to open the SSE stream, issue a normal HTTP request that triggers an update, then check that the SSE client has received the update event.
My code looks something like this:
```scala
[...]
                .exec(openSseStream)
                .exec(triggerUpdate)
                .exec(checkUpdateInSseStream)
[...]
```
My problem is that if the update message is sent to the SSE client very quickly, it might already be consumed and ignored by the time the check is activated.

I can think of three possible ways to solve this:
1. make the check non-blocking, so I can activate the check before I trigger the update
2. add an API to specify an `ActionBuilder` with the `setCheck` so that the action will be executed after the check is set up but before it blocks further execution
3. add an option to buffer incoming SSE messages while no check is active and "replay" them as soon as a check is set up

If necessary, I can build a sample application that demonstrates the problem, but I hope it's already clear from the explanation.
It would be nice to pass multiple actions to a `checkIf` method , the same way as a `check` allows through the comma.

So, for example, instead of writing this:
```
.check(
   checkIf("${first.exists()}")(do_first),
   checkIf("$first.exists()}")(do_second), 
   checkIf("${first.exists()}")do_third)
```
it would be nice to have API as follows:

```
check(checkIf("${first.exists()}")(do_first,do_second, do_third))
```

As of Gatling 3.2, as explained in the [documentation](https://gatling.io/docs/3.2/general/simulation_setup/#closed-model):

> Setting a smaller number of concurrent users wonâ€™t force existing users to abort. The only way for users to terminate is to complete their scenario.

It might make sense to reconsider and abort users, probably based on their age.
When useGroupDurationMetric is set to true, the report displays the true duration of a group, including pauses. But response time assertion on groups only verifies on the cumulated response times excluding pauses (the useGroupDurationMetric=false way of displaying response times in the report).

Then useGroupDurationMetric is set to true the assertions should use the duration metrics to make it consistent.
Single Page application often perform multiple requests at the same time while viewing pages.

Right now, the only way to simulate to behavior is to use the `resources` DSL element. However, if you do so you'd end up silencing your precious API requests with `silentResources`...

I'd see multiple ways to provide this ability :

- A copy of the `resources` DSL that isn't silenced
- A full-fledged DSL element that enables users to have parallel workflows inside the simulation like we do with WebSockets, Polling or SSE

See #2336 for a previous query on this
We have the following issue:

In our system (graphql subscriptions), messages are published with a regular http request, whereas subscribed with websocket, so websocket check does not need to send anything before it checks.

A case with check just after ws connection does not work either, because we need to send http request between ws connection and ws check.
