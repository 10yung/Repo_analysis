Does anyone know how to use the svm_train function?
I have followed the tutorial steps to use affine_train for image classification training, but the results were not very ideal. I want to change the training function into the svm_train. But the input of svm_train is different, I've got the following errors:
`Error using svmtrain (line 234)
Y must be a vector or a character array.

Error in svm_train (line 168)
		model.svm = svmtrain(double(feature_class.'), ...

Error in demo3 (line 18)
model = svm_train(db1, train_set, svm_options);`
Y represents the features of all images which is 681*4872 single array, but it seems that it can only be a vector, like maybe a 1*4872 array. I don't know how to fix it. Is there anyone can help?
The problem seems to be that in scat() the U{1}.meta.resolution field isn't initialized.
Therefore, in wavelet_layer_1d(), it's always set to 0.

I didn't see an easy way to solve this w/o passing an extra parameter to scat(), since Wop is a cell array of function handles and there's no access to x_resolution field.

hello, when I run the audio_ demo2.m, there are error:
Error using create_src (line 31)
No data files found in the specified directory!
Error in gtzan_src (line 31)
    src = create_src(directory,@(file)(gtzan_objects_fun(file,N)));
Error in audio_demo2 (line 2)
src = gtzan_src('/path/to/gtzan/dataset');

I can't fing the file of  gtzan.
Thanks

Hello,
I don't understand the following behaviour of the 2nd-order scattering in 1d. Some coefficients are exactly zero when Q2>1 and j2<j1, even when path_margin == Inf. At first, I thought it was because the anti-aliasing filter (named lowpass) in conv_sub_1d doesn't intersect the range of values 'rng', but the same problem happens when filt_opt.format is 'fourier_multires' or 'fourier'.

Below is a minimal working example. Oddly enough, setting filt_opt.B = [8 1] seems to solve the problem ; why so ?

N = 32768;
load handel;
y = y(1:N);
T = 4096;
filt_opt.Q = [8 2];
%filt_opt.B = [8 1];
filt_opt.J = T_to_J(T,filt_opt);
filt_opt.format = 'fourier';
scat_opt.M = 2;
scat_opt.path_margin = Inf;
[Wop, filters] = wavelet_factory_1d(N, filt_opt, scat_opt);
[S,U] = scat(y, Wop);

set(figure(1),'WindowStyle','docked');
[~,sc2] = display_slice(S,1);
imagesc(log(abs(sc2)); % display energy in log-scale to see the black vertical stripes
figure(1);hold on;colormap copper;hold off;drawnow;commandwindow;

why is the normalization constant i.e. 1/(2_pi_sigma^2/slant^2) in morlet_2d_noDC and morlet_2d_pyramid different from gabor_2d i.e.1/(2_pi_sigma^2/slant)? I can under stand the later as 1/2_pi_sigma_x*sigma_y but i don't understand the first one. I am completely new to this field so it might be a dumb question...

Should probably be moved to the relevant papers/\* folders, no? They aren't really relevant to the general classification framework.

Calculating the resolution of a signal by taking the quotient with the filter size is error-prone and not always well-defined. Perhaps this should be replaced by explicitly passing the resolution with the signal at all times. Notably this can cause problems in conv_sub_*d where fourier_multires needs to calculate the resolution.



