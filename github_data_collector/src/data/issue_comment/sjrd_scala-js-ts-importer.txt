Closes #50

Fields-only interfaces are commonly used as parameter object in JavaScript/TypeScript.
As an JS/TS library user, I want to instantiate such interface like 
```scala
foo.method(new ParameterObject() {
  var foo = "foo"
  var isBar = false
})
```
But `@js.native` annotation does not allow this.

> an optional parameter automatically adds `| undefined`

So let's convert optional parameters and properties to `js.UndefOr[T]`.
https://www.typescriptlang.org/docs/handbook/advanced-types.html#optional-parameters-and-properties
this pr fixes #103

enum values can be expressions including
- unary operators
- binary operators
- string and number literals
- parenthesis
- identifiers

See:
https://github.com/microsoft/TypeScript/blob/master/doc/spec.md#92-enum-members
https://github.com/microsoft/TypeScript/blob/master/doc/spec.md#419-binary-operators

**Note:**
this implementation performs a flat parse that neither
handles expression-tree-building nor operator precedences.

**Note:**
This commit removes the minus from the NumericLit-token and
parses it explicitly in TSDefParser.numberLiteral
Enum members can have optional values. At the moment they are parsed by parsing a number or a string.
The specification, however, allows full expressions, like

```
enum Test {
  Member = (1 <<  2)
}
```
I think it's a good idea to test against the DefinitelyTyped code base.
This pr adds a spec that tries to import every project on DefinitelyTyped (output goes into a temporary file).

It yields (at the moment) 5935 test cases.
![image](https://user-images.githubusercontent.com/4148534/59563788-c6d91b80-903e-11e9-9093-e669a182292b.png)
(this incorporates some of the currently open prs)

I'm not really happy with how DefinitelyTyped has to be cloned manually into the root directory at the moment. I tried to do it with sbt, but in the end the manual way was easier and works just as good :smile:. I made a small script that makes it even easier
Reserverd words such as `delete` can be identifer for type query.
https://github.com/vuejs/vue/blob/5e3823a5766da1df60481e1e7a20f36d08e716ce/types/vue.d.ts#L44
Closes #85

Treat type guard as normal `Boolean`, since Scala does not have a counterpart of [Type Guard in TypeScript](https://www.typescriptlang.org/docs/handbook/advanced-types.html#type-guards-and-differentiating-types)
Closes #86 

https://www.typescriptlang.org/docs/handbook/enums.html#const-enum
> Const enums can only use constant enum expressions and unlike regular enums they are completely removed during compilation. Const enum members are inlined at use sites. This is possible since const enums cannot have computed members.

Unlike normal enums, `const` enums are inlined at use sites in TypeScript.
That is not related to Scala.js, so this PR treat `const` enum as normal enums.

<del>Partially adresses #82</del>
I believe this now closes #82

* Allow missing semicolon at the end of import like `import A from "module"`
* Allow trailing comma in import block like `import { A, B, C, } from "module";`
* Allow comma-separated imports like `import A, { B, C } from "module";`


TypeScript has `foo?` notation to indicate *optional* (can be null/undefined) type

* [optional field](https://www.typescriptlang.org/docs/handbook/interfaces.html#optional-properties) 
* [optional method parameter](https://www.typescriptlang.org/docs/handbook/functions.html#optional-and-default-parameters)

Currently, scalajs-ts-importer converts `foo?: T;` into `foo: T` which can not accept `js.undefined`.
https://github.com/sjrd/scala-js-ts-importer/blob/12bc022dbf6345df96ac4950532cb7c178b22ddd/samples/numberlit.d.ts#L9
https://github.com/sjrd/scala-js-ts-importer/blob/12bc022dbf6345df96ac4950532cb7c178b22ddd/samples/numberlit.d.ts.scala#L12

I think it should be converted to `js.UndefOr[T]`



