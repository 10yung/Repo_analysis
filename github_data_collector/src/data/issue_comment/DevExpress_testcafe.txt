<!--
If you have all reproduction steps with a complete sample app, please share as many details as possible in the sections below.

Make sure that you tried using the latest TestCafe version (https://github.com/DevExpress/testcafe/releases), where this behavior might have been already addressed.

Before submitting an issue, please check CONTRIBUTING.md and existing issues in this repository (https://github.com/DevExpress/testcafe/issues) in case a similar issue exists or was already addressed. This may save your time (and ours).
-->

### What is your Test Scenario?
simple one from the docs
https://devexpress.github.io/testcafe/documentation/getting-started/ 
### What is the Current behavior?
just upgraded to 1.8.0 and wither you use CLI or programmatic interface we get this error:
ERROR TypeError: Cannot read property 'test' of undefined
it does not happen with 1.7.xxx

### What is the Expected behavior?
run as usual
 
### What is your web application and your TestCafe test code?
<!-- Share a public accessible link to your application or provide a simple app which we can run. -->
 
Your website URL (or attach your complete example):

<details>
<summary>Your complete test code (or attach your test files):</summary>

<!-- Paste your test code here: --> 
```js
 
```
</details>

<details>
<summary>Your complete configuration file (if any):</summary>

<!-- Paste your complete test config file here (even if it is huge): -->
```

```
</details>

<details>
<summary>Your complete test report:</summary>

<!-- Paste your complete result test report here (even if it is huge): -->
```
ERROR TypeError: Cannot read property 'test' of undefined
    at C:\projects\test\testcafe-simple-test\node_modules\testcafe-browser-tools\src\api\get-installations.js:61:24
    at Array.some (<anonymous>)
    at addInstallation (C:\projects\test\testcafe-simple-test\node_modules\testcafe-browser-tools\src\api\get-installations.js:58:30)
    at async Promise.all (index 3)
    at searchInRegistry (C:\projects\test\testcafe-simple-test\node_modules\testcafe-browser-tools\src\api\get-installations.js:97:5)
    at findWindowsBrowsers (C:\projects\test\testcafe-simple-test\node_modules\testcafe-browser-tools\src\api\get-installations.js:104:39)
    at findBrowsers (C:\projects\test\testcafe-simple-test\node_modules\testcafe-browser-tools\src\api\get-installations.js:170:16)
    at Object.default_1 [as default] (C:\projects\test\testcafe-simple-test\node_modules\testcafe-browser-tools\src\api\get-installations.js:223:30)
    at Object.default_1 [as getBrowserInfo] (C:\projects\test\testcafe-simple-test\node_modules\testcafe-browser-tools\src\api\get-browser-info.js:24:27)
    at BrowserProviderPluginHost.isValidBrowserName (C:\projects\test\testcafe-simple-test\node_modules\testcafe\src\browser\provider\built-in\dedicated\base.js:25:29)
    at BrowserProvider.isValidBrowserName (C:\projects\test\testcafe-simple-test\node_modules\testcafe\src\browser\provider\index.ts:279:16)
    at Object.getBrowserInfo (C:\projects\test\testcafe-simple-test\node_modules\testcafe\src\browser\provider\pool.js:108:14)
    at async Promise.all (index 0)
    at Bootstrapper._getBrowserInfo (C:\projects\test\testcafe-simple-test\node_modules\testcafe\src\runner\bootstrapper.ts:206:29)
    at Bootstrapper.createRunnableConfiguration (C:\projects\test\testcafe-simple-test\node_modules\testcafe\src\runner\bootstrapper.ts:421:29)

```
</details>

<details>
<summary>Screenshots:</summary>
<!-- If applicable, add screenshots to help explain the issue. -->

```

```
</details>

### Steps to Reproduce:
<!-- Describe what we should do to reproduce the behavior you encountered. -->

1. Go to my website ...
3. Execute this command...
4. See the error...
 
### Your Environment details:
 
* testcafe version:                   1.8.0
* node.js version:                    12.6.0
* command-line arguments:  <!-- example: "testcafe ie,chrome -e test.js" -->
* browser name and version: <!-- example: IE 11, Chrome 69, Firefox 100, etc. -->
* platform and version:          Window x64 bit
* other:                                   <!-- any notes you consider important -->

### What is your Test Scenario?
I want to check if pagination in my app works properly. To do that I need to resize window to get more/less pages (as there is less/more results on a single page).
 
### What is the Current behavior?
Resizing works randomly.
I've checked on Chrome (doesn't work at all) and Firefox (sometimes works, sometimes doesn't).
 
### What is the Expected behavior?
Resize feature works every time it is used.
 
### What is your web application and your TestCafe test code?

```
import { ClientFunction } from 'testcafe';
import channelsPage from '../page-model/channelsPage-model';
import loginPage from '../page-model/loginPage-model';
import config from '../config/config';


let l1 = require('../support/global').log[0];


fixture`SmokeTests`
  .beforeEach(async t => {
    await t.maximizeWindow()
  })
  .page`${config.baseUrl}`;

test('Check pagination CHANNELS', async t => {

  await t.maximizeWindow();

  //Log in
  await loginPage.logIn(l1.username, l1.password)

  //Check if proper site opened
  if (await loginPage.keycloakLoginError.exists) {
    await loginPage.logIn(l1.username, l1.password)

  }
  else {
    await t.expect(channelsPage.lineupsAndPackages.exists).ok();
    await t.expect(channelsPage.createDropUp.exists).ok();
  }
  const mainPage = ClientFunction(() => window.location.href)
  await t.expect(mainPage()).contains(`https://${config.baseUrl}` + `${config.channelsSufix}`);

  //Go to the next page and go back
  const channelForTheReference = await channelsPage.firstChannelNameField.innerText
  console.log(channelForTheReference);
  await t.expect(channelsPage.dropdownButton.withText('1 of').exists).ok()
  await t.click(channelsPage.nextPage);
  await t.expect(channelsPage.dropdownButton.withText('1 of').exists).notOk()
  await t.expect(channelsPage.dropdownButton.withText('2 of').exists).ok()
  await t.expect(channelsPage.channelNameField.withText(channelForTheReference).exists).notOk();
  await t.click(channelsPage.previousPage);
  await t.expect(channelsPage.dropdownButton.withText('2 of').exists).notOk()
  await t.expect(channelsPage.dropdownButton.withText('1 of').exists).ok()
  await t.expect(channelsPage.channelNameField.withText(channelForTheReference).exists).ok();

  //Go to the last page and go back to the first one via dropdown menu
  await t.click(channelsPage.dropdownButton);
  const lastPageNumber = await channelsPage.dropdownMenuItem.nth(-1).innerText;
  await t.click(channelsPage.dropdownMenuItem.nth(-1));
  await t.expect(channelsPage.dropdownButton.withText(lastPageNumber + ' of').exists).ok();
  await t.expect(channelsPage.channelNameField.withText(channelForTheReference).exists).notOk();
  await t.click(channelsPage.dropdownButton);
  await t.click(channelsPage.dropdownMenuItem.nth(0));
  await t.expect(channelsPage.dropdownButton.withText('1 of ' + lastPageNumber).exists).ok();
  await t.expect(channelsPage.channelNameField.withText(channelForTheReference).exists).ok();

  //Resize the window
  await t.resizeWindow(800, 600); //refine4automation Resize doesnt work
  await t.wait(5000);
  const lastPageNumberAfterResize = await channelsPage.dropdownMenuItem.nth(-1).innerText;
  const lastPageNumberConverted = parseInt(lastPageNumber, 10);
  const lastPageNumberAfterResizeConverted = parseInt(lastPageNumberAfterResize, 10);
  await t.expect(lastPageNumberAfterResizeConverted).gt(lastPageNumberConverted);
  await t.resizeWindow(1280, 720);
  await t.wait(5000);
  const lastPageNumberAfter2ndResize = await channelsPage.dropdownMenuItem.nth(-1).innerText;
  const lastPageNumberAfter2ndResizeConverted = parseInt(lastPageNumberAfter2ndResize, 10);
  await t.expect(lastPageNumberAfterResizeConverted).gt(lastPageNumberAfter2ndResizeConverted);
  await t.expect(lastPageNumberAfter2ndResizeConverted).gt(lastPageNumberConverted);

});

```

**Your complete test report:**

```
testcafe chrome .\smoke\checkPagination.js
Using locally installed version of TestCafe.
 Running tests in:
 - Chrome 79.0.3945.117 / Windows 10

 SmokeTests
Eleven Sports 12
 × Check pagination CHANNELS
   1) AssertionError: expected 146 to be above 146

      Browser: Chrome 79.0.3945.117 / Windows 10

         60 |  await t.resizeWindow(800, 600); //refine4automation Resize doesnt work
         61 |  await t.wait(5000);
         62 |  const lastPageNumberAfterResize = await channelsPage.dropdownMenuItem.nth(-1).innerText;
         63 |  const lastPageNumberConverted = parseInt(lastPageNumber, 10);
         64 |  const lastPageNumberAfterResizeConverted = parseInt(lastPageNumberAfterResize, 10);
       > 65 |  await t.expect(lastPageNumberAfterResizeConverted).gt(lastPageNumberConverted);
         66 |  await t.resizeWindow(1280, 720);
         67 |  await t.wait(5000);
         68 |  const lastPageNumberAfter2ndResize = await channelsPage.dropdownMenuItem.nth(-1).innerText;
         69 |  const lastPageNumberAfter2ndResizeConverted = parseInt(lastPageNumberAfter2ndResize, 10);
         70 |  await t.expect(lastPageNumberAfterResizeConverted).gt(lastPageNumberAfter2ndResizeConverted);

         at <anonymous> (C:\TestCafe\orchestrator-automation\smoke\checkPagination.js:65:54)



 1/1 failed (16s)
```

### Steps to Reproduce:
Just run any test and try to resize a window to some custom values.
 
### Your Environment details:
 
- testcafe version: 1.7.0
- node.js version: v10.16.3
- command-line arguments: testcafe chrome .\smoke\checkPagination.js
- browser name and version: Chrome 79.0.3945.117 / Firefox 72.0
- platform and version: Windows 10

```JS
import { Selector, ClientFunction } from 'testcafe';

fixture`T837275`
//.page(`${webRegressionUrl}/ASPxEditors/ASPxCheckBox/T837275.aspx`);
    .page(`http://maximov-w10/regression191/ASPxEditors/ASPxCheckBox/T837275.aspx`);


async function GetTopWindowDocumentScrollTop () {
    var clientFunction = ClientFunction(() => window.top.document.documentElement.scrollTop);
    return await clientFunction();
}

test('document scroll position should not change when you click checkbox located in iframe', async t => {
    var frame = Selector("#frame");
    await t
        .switchToIframe(frame);

    //const checkBox = await findCheckBox("checkBox")
    const checkBox = Selector("#checkBox");

    await t
        .debug()
        .hover(checkBox);

    var currentDocumentScrollTop = await GetTopWindowDocumentScrollTop();

    await t
        .expect(currentDocumentScrollTop).notEql(0)
        .click(checkBox);

    var newDocumentScrollTop = await GetTopWindowDocumentScrollTop();
    await t
        .expect(newDocumentScrollTop).notEql(0)
        .expect(newDocumentScrollTop).eql(currentDocumentScrollTop);
});

```
### What is your Test Scenario?
Just run any test that fails and capture a screenshot on failure.
 
### What is the Current behavior?
Screenshot feature works only once, or works very rarely (like once for many dozens times).
 
### What is the Expected behavior?
Screenshot is taken every time the test fails
 
### What is your web application and your TestCafe test code?
I can't give URL to the website :( So I'm not sure if a testcode will be of any use but anyways:

> import { ClientFunction } from 'testcafe';
> import channelsPage from '../page-model/channelsPage-model';
> import loginPage from '../page-model/loginPage-model';
> import commonElements from '../page-model/commonElements-model';
> import crmPage from '../page-model/crmPage-model';
> import config from '../config/config';
> 
> 
> let l1 =  require('../support/global').log[0];
> 
> 
> const customerIdProper = '3'
> const customerIdWrong = '1x2y3o5u'
> 
> fixture`SmokeTests`
>   .beforeEach(async t => {
>     await t.maximizeWindow()
>   })
>   .page`${config.baseUrl}`;
> 
> test('Search for a customer by Customer ID', async t => {
> 
>   await t.maximizeWindow();
> 
>   //Log in
>   await loginPage.logIn(l1.username, l1.password);
> 
>   //Check if proper site opened
>   if (await loginPage.keycloakLoginError.exists) {
>     await loginPage.logIn(l1.username, l1.password);
> 
>   }
>   else {
>     await t.expect(channelsPage.lineupsAndPackages.exists).ok();
>     await t.expect(channelsPage.createDropUp.exists).ok();
>   }
>   const mainPage = ClientFunction(() => window.location.href)
>   await t.expect(mainPage()).contains(`https://${config.baseUrl}` + `${config.channelsSufix}`);
> 
>   //Go to CRM main page (search)
>   await t.click(commonElements.navDropdown);
>   await t.click(commonElements.navDropdownItem.withText('CRM'));
> 
>   //Search for an existing Customer ID
>   await t.click(crmPage.customerIdRadioButton);
>   await t.typeText(crmPage.inputField, customerIdProper);
>   await t.click(crmPage.searchButton);
>   await t.expect(crmPage.resultsTable.exists).ok();
>   await t.expect(crmPage.searchMessage.withText('Found').exists).ok() && expect(crmPage.searchMessage.withExactText(customerIdProper).exists).ok();
> 
>   //Search for a non-existing Customer ID
>   await t.typeText(crmPage.inputField, customerIdWrong, {replace: true});
>   await t.click(crmPage.searchButton);
>   await t.expect(crmPage.resultsTable.exists).notOk();
>   await t.expect(crmPage.searchMessage.withText('No customer found with the provided ID:').exists).ok() && expect(crmPage.searchMessage.withExactText(customerIdWrong).exists).ok();
> 
> });

**<summary>Your complete configuration file (if any):</summary>**

> {
>   "browsers": "chrome",
>   "screenshots": {
>     "path": "reports/screenshots/",
>     "takeOnFails": true
>   },
>   "reporter": [
>     {
>       "name": "spec"
>     },
>     {
>       "name": "json",
>       "output": "reports/generatedReports/newReport.json"
>     }
>   ],
>   "pageLoadTimeout": 1000
> }



**<summary>Your complete test report:</summary>**

> {
>   "startTime": "2020-01-17T11:16:27.931Z",
>   "endTime": "2020-01-17T11:16:40.618Z",
>   "userAgents": [
>     "Chrome 79.0.3945.117 / Windows 10"
>   ],
>   "passed": 0,
>   "total": 1,
>   "skipped": 0,
>   "fixtures": [
>     {
>       "name": "SmokeTests",
>       "path": "C:\\TestCafe\\orchestrator-automation\\smoke\\searchForCustomerByCustomerID.js",
>       "meta": {},
>       "tests": [
>         {
>           "name": "Search for a customer by Customer ID",
>           "meta": {},
>           "errs": [
>             "AssertionError: expected false to be truthy\n\nBrowser: Chrome 79.0.3945.117 / Windows 10\n\n   43 |\n   44 |  //Search for an existing Customer ID\n   45 |  await t.click(crmPage.customerIdRadioButton);\n   46 |  await t.typeText(crmPage.inputField, customerIdProper);\n   47 |  await t.click(crmPage.searchButton);\n > 48 |  await t.expect(crmPage.resultsTable.exists).ok();\n   49 |  await t.expect(crmPage.searchMessage.withText('Found').exists).ok() && expect(crmPage.searchMessage.withExactText(customerIdProper).exists).ok();\n   50 |\n   51 |  //Search for a non-existing Customer ID\n   52 |  await t.typeText(crmPage.inputField, customerIdWrong, {replace: true});\n   53 |  await t.click(crmPage.searchButton);\n\n   at <anonymous> (C:\\TestCafe\\orchestrator-automation\\smoke\\searchForCustomerByCustomerID.js:48:47)"
>           ],
>           "durationMs": 12617,
>           "screenshotPath": null,
>           "skipped": false
>         }
>       ]
>     }
>   ],
>   "warnings": []
> }

### Steps to Reproduce:

Just run any test that fails and try to capture a screenshot on failure more than once.
 
### Your Environment details:

- testcafe version: 1.7.0
- node.js version: v10.16.3
- command-line arguments: testcafe ./smoke/searchForCustomerByCustomerID.js
- browser name and version: Chrome 79.0.3945.117
- platform and version: Windows 10

Testcafe versions 1.7.0 and 1.7.1 cannot launch Chrome on Heroku and throws error:

```
NativeBinaryHasFailedError: The /app/node_modules/testcafe-browser-tools/bin/linux/glibc-64/find-window process failed with the 101 exit code.
```

The same test works fine with version 1.6.1 or below and works fine with versions ^1.7.0 on MacOS so this could be a Heroku issue. Chrome is installed on the Heroku dyno via buildpack https://github.com/heroku/heroku-buildpack-google-chrome.git.

We can work-around this using v1.6.1 but want to report to save anyone else the time debugging this.

Fuller log:

```
> pw-app@1.0.0 test:e2e:heroku /app
> concurrently -k -s=first -n e2e:server,e2e:testcafe "PORT=3333 npm run start:heroku" "TESTCAFE_URL=http://127.0.0.1:3333/ testcafe chrome e2e/*.e2e.js -s takeOnFails=true"

{...}

[e2e:testcafe] ERROR Was unable to open the browser "chrome:" due to error.
[e2e:testcafe] 
[e2e:testcafe] NativeBinaryHasFailedError: The /app/node_modules/testcafe-browser-tools/bin/linux/glibc-64/find-window process failed with the 101 exit code.
[e2e:testcafe]     at Object.execFile (/app/node_modules/testcafe-browser-tools/src/utils/exec.js:120:15)
[e2e:testcafe] 
[e2e:testcafe] Type "testcafe -h" for help.
[e2e:testcafe] TESTCAFE_URL=http://127.0.0.1:3333/ testcafe chrome e2e/*.e2e.js -s takeOnFails=true exited with code 1
```


This PR introduces the `options` property under the [reporter](https://devexpress.github.io/testcafe/documentation/using-testcafe/configuration-file.html#reporter) config section.
The purpose of this new property is to pass down configuration to the custom reporter without using ENV variables.

fixes #4576
### What is your Test Scenario?

Attempting to use `typeText` into a `contenteditable` elements should fire the `beforeinput` event, allowing the input to be prevented.
 
### What is the Current behavior?

The `beforeinput` event is not fired.
 
### What is the Expected behavior?

The `beforeinput` event should be fired.
 
### What is your web application and your TestCafe test code?

<details>
<summary>index.html</summary>

```html
<!DOCTYPE html>
<html>
  <body>
    <input type="text" id="input"></input>
    <div contenteditable="true" id="div"></div>
    <script>
      document.addEventListener("beforeinput", function(evt) { evt.preventDefault(); })
    </script>
  </body>
</html>
```

</details>

<details>
<summary>test.js</summary>

```js
import { Selector } from 'testcafe';

fixture `index`.page `./index.html`;

test('beforeinput fires on input', async t => {
    await t
        .typeText('#input', 'hello world')
        .expect(Selector('#input').value).eql('');
});

test('beforeinput fires on contenteditable', async t => {
    await t
        .typeText('#div', 'hello world')
        .expect(Selector('#div').innerText).eql('');
});
```

</details>

<details>
<summary>Your complete test report:</summary>

```
$ testcafe chrome test.js
Running tests in:
 - Chrome 79.0.3945.117 / macOS 10.15.2

 index
 ✓ beforeinput fires on input
 ✖ beforeinput fires on contenteditable

   1) AssertionError: expected 'hello world' to deeply equal ''

      Browser: Chrome 79.0.3945.117 / macOS 10.15.2

          9 |});
         10 |
         11 |test('beforeinput fires on contenteditable', async t => {
         12 |    await t
         13 |        .typeText('#div', 'hello world')
       > 14 |        .expect(Selector('#div').innerText).eql('');
         15 |});
         16 |

         at <anonymous> (/Users/dstrelau/src/dstrelau/testcafe-beforeinput/test.js:14:45)
         at <anonymous> (/Users/dstrelau/src/dstrelau/testcafe-beforeinput/test.js:11:1)
         at <anonymous>
      (/usr/local/lib/node_modules/testcafe/src/api/wrap-test-function.js:17:28)
         at TestRun._executeTestFn
      (/usr/local/lib/node_modules/testcafe/src/test-run/index.js:294:19)
         at TestRun.start (/usr/local/lib/node_modules/testcafe/src/test-run/index.js:345:24)


 1/2 failed (5s)
```

</details>
 
### Your Environment details:
 
* testcafe version:                   `1.7.1`
* node.js version:                    `v13.2.0`
* command-line arguments:  `testcafe chrome test.js`
* browser name and version: `Chrome 79.0.3945.117`
* platform and version:          `macOS 10.15.2`
Hey Guys, 

I'm currently working with TestCafe Version 1.41.1. My current task is to write some test cases. One of them should check whether a button is visible on a page. I have two pages. I have done this: 

    await t
    .maximizeWindow() 
    cPage.navigateToC('abcd')
    mPage.navigateToM('place', 'time')


    await t
        .expect(Selector('#create-top-btn').exists).ok() 
   
The two methods called look like this: 
cPage.navigateToC('abcd'): 

async navigateToC(name) {

	await t
	.click(this.btnToC)
	.click(this.btnCreateC)
	.typeText(this.name, name)
	.click(this.btnAddMember)
	.click(this.btnMember1)
	.click(this.btnSave)
    } 

mPage.navigateToM('place', 'time'):

async navigateToM(Place, time) {

        await t
        .click(this.btnToM)
        .click(this.btnCreateM)
        .click(this.selectC)
        .click(this.testC)
        .click(this.date)
        .click(this.dateDay)
        .typeText(this.Place, Place)

        await t
        .typeText(this.time, time)
    }

The button is visible on the "M" Page. 

Now I get this long error message after test execution. 

Unhandled promise rejection: 
ActionSelectorError { code: 'E23', isTestCafeError: true, callsite: CallsiteRecord { filename: 'C:\\Users\\x\\test.js',
      lineNum: 18, callsiteFrameIdx: 6, stackFrames: [ [CallSite], [CallSite], [CallSite], [CallSite], [CallSite], [CallSite], [CallSite], CallSite {}, [CallSite], [CallSite], CallSite {}, [CallSite], [CallSite],
      [CallSite], [CallSite], CallSite {}, [CallSite], [CallSite], [CallSite], [CallSite] ], isV8Frames: true }, selectorName: 'selector', errMsg: 'Selector is expected to be initialized with a function, CSS
      selector string, another Selector, node snapshot or a Promise returned by a Selector, but undefined was passed.', originError: { Cannot prepare tests due to an error.
      Selector is expected to be initialized with a function, CSS selector string, another Selector, node snapshot or a Promise returned by a Selector, but undefined was passed. code: 'E1022', data: [ 'undefined'
      ], rawMessage: 'Selector is expected to be initialized with a function, CSS selector string, another Selector, node snapshot or a Promise returned by a Selector, but undefined was passed.', callsite: null }}

Can anyone help me with this? Don't understand what or where I did something wrong. 
**Code**::
await t.setFilesToUpload('#root > div > div.css-qop084 > div.body > div.content > div > div.ui.input > input[type=file]', [ filepath ]);

**UI Code**::
`<input type="file">`

**UI Look**::
<img width="311" alt="Screen Shot 2020-01-11 at 2 36 15 PM" src="https://user-images.githubusercontent.com/54145796/72209750-cf33f080-347f-11ea-9520-e4867fe77792.png">

**Version**::
"testcafe": "^1.6.1-alpha.3",


Manually how it works::
Step 1: User click the Choose File
Step 2: Popup will open and select the file
Step 3: Auto enter happens and pop up page will be loaded with the data exits in the input file.