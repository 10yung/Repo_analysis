Everything works fine when I use 4.x version.
After upgrade to 6.x, I get this error: **Error: Socket is busy writing; only one send operation may be in progress at any time**. 
My code block like below:
```js
const socket = new zmq.Push; 
socket.sendHighWaterMark = 1000;
socket.sendTimeout = 0;
socket.connect(address);
socket.send(msg)
```
The reason I set ```sendTimeout``` to 0 is that the message is huge at publisher side, any block will be exhaust the memory.
So do I use zeromq in wrong way?
**Is your feature request related to a problem? Please describe.**

zeromq is currently tested on [citgm](https://github.com/nodejs/citgm) as kind of smoke test to guarantee that it does not break in case Node.js internals change. Due to the recent move to cmake it's not possible to compile it anymore on our infrastructure.

**Describe the solution you'd like**

Please indicate if it's possible to move away from the cmake requirement. Removing that dependency would make it possible to run the test suite again with CITGM so that we are able to provide stable Node.js releases.

Otherwise we have to remove zeromq from CITGM and that would be not be ideal.

Refs: https://ci.nodejs.org/view/Node.js-citgm/job/citgm-smoker/2134/nodes=osx1011/testReport/junit/(root)/citgm/zeromq_v6_0_0_beta_5/
(Only available for ~7 days)
Context: I'm running a ZeroMQ `Dealer` and sending a message that the `Router` (written with pyzmq) can't consume. When the `dealer` does a `receive`, I get this error:

```
{ Error: Socket temporarily unavailable
    at Session.sendOnControl (/Users/kylek/code/src/github.com/rgbkrk/zeromq-new-for-nteract/session.js:50:49)
    at process._tickCallback (internal/process/next_tick.js:68:7) errno: 35, code: 'EAGAIN' }
```

My understanding is that the socket is timing out. I can code around this, but I'm curious if I should be looking at this differently.
_ZeroMQ.js version: 6.0.0-beta.5_

with current configuration, `typescript` v3.7.x is used for compiling which introduces backwards-incompatible typings for properties

this PR
 * ~~uses typescript v3.6.x for compiling~~ provides backwards compatible typings for `typescript` < 3.6.x via fields `types` and `typesVersions` in `package.json`:  
   backwards compatible typings avoid typing errors `error TS1086: An accessor cannot be declared in an ambient context.` when `zeromq.js` is used in projects that use `typescript` < v3.6.0
 * simplifies type definitions for `AsyncIterator` in order to increase typing compatibility:  
    make typings compatible with `esnext` lib, instead of only `es2018` lib, by omitting 2nd generics parameter

~~comparing the compiled results between v3.7.3 and v3.6.4, there were no differences in the generated JavaScript code, only in the generated typings, i.e. in the `*.d.ts` files, so currently, for the actual executable code, it makes no difference to downgrade to `typescript` v3.6.x~~

the drawback for the 2nd change regarding `AsyncIterator` is that the typing becomes less restrictive for target `es2018`, changing the `TReturn` type from `undefined` to `any`, but I think that in this context it is justifiable when weighing it against increased typings compatibility
Hello! 
The prebuild version seems to be compiled without the --with-pgm config option. I tried to migrate my app from zeromq.node (zmq) to zeromq.js, but get an error now that the pgm protocoll is not supported. I tried to compile libzmq by myself (on windows with cmake and VS2019) with no luck. 
Seems that the latest version of (prebuild) openpgm is build with toolset version 110  (VS2012!).
Is there a possibility to get pgm support for prebuild versions or does any one know where i can get a prebuild version of libzmq with pgm/epgm config on, so that i can use it with --zmq-external install option. 
Thx in advance!
Best regards
Peter
Hello! I'm not having any luck using `zeromq` with Electron v5 or v6. I'm having this issue: https://github.com/electron/electron/issues/20641

Not sure which repo this belongs in.
- [x] Merge ZeroMQ-NG into ZeroMQ.js
  - [x] Create zeromq.js@5.x branch for bugfixes
  - [x] [PR to zeromq.js@master that brings in zeromq-ng](https://github.com/zeromq/zeromq.js/pull/343)
  - [x] Check that PR doesn't include any version tags
  - [x] Fix CI (Travis only, AppVeyor is no longer needed)
  - [x] Provide access to integration users for Github & NPM
  - [x] Add encrypted API keys for Github & NPM to .travis.yml
  - [x] Await review from all maintainers
  - [x] Merge PR into master
  - [x] Turn off AppVeyor checks for the master branch
  - [x] [Merge remaining NG changes](https://github.com/zeromq/zeromq.js/pull/350)
- [x] Release v6.0.0-beta.1
  - [x] Tag v6.0.0-beta.1 and wait for prebuilds & deployment to NPM
  - [x] Release ZeroMQ-NG with a wrapper around the new ZeroMQ.js beta
  - [x] Point users of ZeroMQ-NG to ZeroMQ.js in its README
- [ ] Release v6.0.0
  - [x] Encourage people on all issues to try the new beta and see if there are any blockers
  - [ ] Deprecate zeromq@5.x
  - [ ] Publish zeromq@6.0.0 to npm once we feel ready
  - [ ] Submit PR to https://github.com/DefinitelyTyped/DefinitelyTyped to deprecate the old manual types as of v6.0.0
  - [ ] Triage open issues and close the ones that have been fixed with the new release
- [ ] Updating external resources
  - [ ] Update API usage in the official ZeroMQ guides
I'm working on several applications in Node.js that communicate to each other with zeromq sockets. I developed a charge test in order to see if the applications were scalable. One of those charge test sends 10 message every 10 ms for 15 minutes to one of those applications.

I've been having a EBADF error that causes the program to abort with this charge test. It seems like it is coming from zeromq. Here is the stack trace from gdb after retrieving a core dump file after a crash.

(gdb) bt
#0  0x00007f15c3cfd067 in raise () from /lib/x86_64-linux-gnu/libc.so.6
#1  0x00007f15c3cfe523 in abort () from /lib/x86_64-linux-gnu/libc.so.6
#2  0x0000000000ad365a in uv__async_send (loop=<optimized out>, loop=<optimized out>) at ../deps/uv/src/unix/async.c:153
#3  uv_async_send (handle=<optimized out>) at ../deps/uv/src/unix/async.c:65
#4  0x00007f15c0210a5d in zmq::Socket::OutgoingMessage::BufferReference::FreeCallback(void*, void*) ()
   from /media/project/node_modules/zeromq/build/Release/zmq.node
#5  0x00007f15c022ae14 in ?? () from /media/project/node_modules/zeromq/build/Release/zmq.node
#6  0x00007f15c0279c1e in ?? () from /media/project/node_modules/zeromq/build/Release/zmq.node
#7  0x00007f15c026d8c2 in ?? () from /media/project/node_modules/zeromq/build/Release/zmq.node
#8  0x00007f15c026dadf in ?? () from /media/project/node_modules/zeromq/build/Release/zmq.node
#9  0x00007f15c0268a99 in ?? () from /media/project/node_modules/zeromq/build/Release/zmq.node
#10 0x00007f15c0232f66 in ?? () from /media/project/node_modules/zeromq/build/Release/zmq.node
#11 0x00007f15c022bd96 in ?? () from /media/project/node_modules/zeromq/build/Release/zmq.node
#12 0x00007f15c0228655 in ?? () from /media/project/node_modules/zeromq/build/Release/zmq.node
#13 0x00007f15c02275b2 in ?? () from /media/project/node_modules/zeromq/build/Release/zmq.node
#14 0x00007f15c02276ca in ?? () from /media/project/node_modules/zeromq/build/Release/zmq.node
#15 0x00007f15c0248030 in ?? () from /media/project/node_modules/zeromq/build/Release/zmq.node
#16 0x00007f15c407b064 in start_thread () from /lib/x86_64-linux-gnu/libpthread.so.0
#17 0x00007f15c3db062d in clone () from /lib/x86_64-linux-gnu/libc.so.6

After realising that the crash was happening in async.c, I added some printf and recompiled node in order to have some results from those lines in /deps/uv/src/unix/async.c:153.

`static void uv__async_send(uv_loop_t* loop) {
  const void* buf;
  ssize_t len;
  int fd;
  int r;

  buf = "";
  len = 1;
  fd = loop->async_wfd;

#if defined(__linux__)
  if (fd == -1) {
    static const uint64_t val = 1;
    buf = &val;
    len = sizeof(val);
    fd = loop->async_io_watcher.fd;  /* eventfd */
  }
#endif

  do
    r = write(fd, buf, len);
  while (r == -1 && errno == EINTR);

  if (r == len)
    return;

  if (r == -1)
    if (errno == EAGAIN || errno == EWOULDBLOCK)
      return;

  abort();
}`


So whenever a crash happens I have 
r = -1
fd = a very high int (last one was for instance = 945893432)
errno = 9 (EBADF which stands for "bad file descriptor").

I might be wrong but I have the impression that the bug comes from a high usage of zeromq sockets in a short time. It seems like this bug does not happen if I make the charge test less challenging for my app.

Any help / advice would be greatly appreciated.


# Issue description

I can't seem to rebuild this module properly. Running `npm rebuild libzmq` finishes immediately and doesn't appear to do anything (as I still get the `NODE_VERSION` mismatches afterward), and trying to do `electron-rebuild -v 5.0.8` throws

```
clang: error: no such file or directory: './Release/../../zmq/lib/libzmq.a'
```

# Environment

macOS 10.14.5



Hi all,

I have implemented a Pub/Sub script using this library. Randomly , sometimes after an hour sometimes after two hours the script receive SIGABRT signal and it crash.  There is no error message when it crash...just receive the SIGABRT signal and crash silently ...

I have added handler for ``uncaughtException`` event but it is not triggered...

Initially i have suspected the script use lot of memory, I have started the script with a lot of memory limit ``--max-old-space-size=5G`` , still receive that mysterious signal...

The Pub/Sub is used intensively, I mean a lot of messages are handled/processed by the script and goes through the script. Messages are small in size.

Anyone else encountered similar issue or have any idea what could be the source of the issue?

I have ran the script with strace, these are the last output lines:
```
poll([{fd=27, events=POLLIN}], 1, 0)    = 1 ([{fd=27, revents=POLLIN}])
poll([{fd=27, events=POLLIN}], 1, 0)    = 1 ([{fd=27, revents=POLLIN}])
read(27, "\1\0\0\0\0\0\0\0", 8)         = 8
poll([{fd=27, events=POLLIN}], 1, 0)    = 0 (Timeout)
close(55)                               = 0
poll([{fd=27, events=POLLIN}], 1, 0)    = 0 (Timeout)
poll([{fd=26, events=POLLIN}], 1, 0)    = 0 (Timeout)
poll([{fd=26, events=POLLIN}], 1, 0)    = 0 (Timeout)
write(24, "\1\0\0\0\0\0\0\0", 8)        = 8
poll([{fd=26, events=POLLIN}], 1, 0)    = 0 (Timeout)
poll([{fd=27, events=POLLIN}], 1, 0)    = 0 (Timeout)
poll([{fd=26, events=POLLIN}], 1, 0)    = 0 (Timeout)
write(24, "\1\0\0\0\0\0\0\0", 8)        = 8
poll([{fd=26, events=POLLIN}], 1, 0)    = 0 (Timeout)
poll([{fd=27, events=POLLIN}], 1, 0)    = 0 (Timeout)
epoll_pwait(3, [{EPOLLIN, {u32=8, u64=50279631651078152}}], 1024, 481639, NULL, 8) = 1
read(8, "\2\0\0\0\0\0\0\0", 1024)       = 8
epoll_pwait(3, [{EPOLLIN, {u32=8, u64=50279631651078152}}], 1024, 481637, NULL, 8) = 1
read(8, "\1\0\0\0\0\0\0\0", 1024)       = 8
epoll_pwait(3,  <unfinished ...>
+++ killed by SIGABRT +++
Aborted

```

Thank you for your time!

Gabriel

