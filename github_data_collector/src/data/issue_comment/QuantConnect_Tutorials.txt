In the Historical Volatility and Implied Volatility Tutorial, for example, there is no documentation for the variables of the method:
```python
def bsm_price(option_type, sigma, s, k, r, T, q):
    pass
```
what is `q`?

Also, we should be able to run it in Research with QuantConnect data.
After cloning the [Strategy 28: Small Capitalization Stocks Premium Anomaly](https://github.com/QuantConnect/Tutorials/tree/master/04%20Strategy%20Library/28%20Small%20Capitalization%20Stocks%20Premium%20Anomaly) and running it, I receive 'FineFundamental' object has no attribute 'MarketCap' error.

**Potential Solution**

Replace this piece of code

```    
for i in fine:
    i.MarketCap = (i.EarningReports.BasicAverageShares.ThreeMonths * 
                      i.EarningReports.BasicEPS.TwelveMonths *
                      i.ValuationRatios.PERatio)

sorted_market_cap = sorted([x for x in fine if x.MarketCap > 0], key=lambda x: x.MarketCap)
```

with

```
market_cap = {}

# Calculate the market cap and add the "MarketCap" property to fine universe object
for i in fine:
    market_cap[i] = (i.EarningReports.BasicAverageShares.ThreeMonths *
                      i.EarningReports.BasicEPS.TwelveMonths *
                      i.ValuationRatios.PERatio)

sorted_market_cap = sorted([x for x in fine if market_cap[x] > 0], key=lambda x: market_cap[x])
```

So, both the code snippet in "02 Method.html" and the backtest URL in "03 Algorithm.html" need to be updated.
This file does not exist:
https://www.quantconnect.com/tutorials/wp-content/uploads/2017/08/F-F_Research_Data_5_Factors_2x3_daily.csv

Found in line [233](https://github.com/QuantConnect/Tutorials/blob/master/05%20Introduction%20to%20Financial%20Python%5B%5D/10%20Multiple%20Linear%20Regression/02%20Python%20Implementation.html#L233)
### Expected Behavior
Let's imagine we have two stocks, Y and X. When going long the 'spread', we invest k% of our portfolio to
buy Y while simultaneously selling (the quantity of stock in X which equals the market value of our position in Y)*Beta. The regression coefficient Beta is established by finding a linear relationship between log(Y) and log(X). 

The algorithm should put on a long 'spread' position when the value of the spread
exceeds mean(spread) - StdDev(spread) and a short 'spread' position when the value of 
spread exceeds mean(spread) + StdDev(spread).

The algorithm should close all positions when the spread crosses the mean of the spread, from either direction.

### Actual Behavior
Price ratio between stock price Y and X is being used to determine the size of the position in stock X instead of using the regression coefficient Beta. Also, the number of shares bought/sold for stock X should be a function of the market value of stock Y.

The current value of spread, spread[-1], which is being used to go long or short, returns the first element in the spread series, instead of the latest.

No mechanism is established to close all positions when the spread reverts to mean.

### Potential Solution
1. Use the regression coefficient Beta, and the market value of the position in stock Y to determine position sizing in stock X.
2. Retrieve correct current value for the spread.
3. Implement a fix to close all positions when the spread reverts to mean.

### Reproducing the Problem
Running the Cointegration trading algorithm in the QC Strategy Library will reproduce this problem. See the algorithm at the link below.

https://www.quantconnect.com/tutorials/strategy-library/pairs-trading-copula-vs-cointegration

### Checklist

- [x] I have completely filled out this template 

- [x] I have confirmed that this issue exists on the current master branch

- [x] I have confirmed that this is not a duplicate issue by searching issues 

- [x]  I have provided detailed steps to reproduce the issue

#### Expected Behavior
The algorithm should place trades only when the account has enough cash to places both orders (i.e., long order for one asset and short order for the second asset).

#### Actual Behavior
The algorithm will place an order for one of the assets but not the other if it doesn't meet proper margin requirements. This leads to portfolio having one long or one short position and it won't trade again once this is established, resulting in imbalanced holdings and the strategy will fail to execute properly for the remainder of the backtesting period.

#### Potential Solution
Add logic in OnData() method to check for margin requirements and only allow orders to be placed if the account can afford both trades. I have tried to test this but the result is that the algorithm places only a handful of trades rather than the anticipated several hundred (see the link to the test algorithm below). Proper controls should allow for significant trading volume but only when both trades can be afforded.

#### Reproducing the Problem
Running the copula pairs trading algorithm in the QC Strategy Library will reproduce this problem. See the algorithm at the link below.

https://www.quantconnect.com/tutorials/strategy-library/pairs-trading-copula-vs-cointegration
#### Checklist
- [x] I have completely filled out this template
- [x] I have confirmed that this issue exists on the current `master` branch
- [x] I have confirmed that this is not a duplicate issue by searching [issues](https://github.com/QuantConnect/Lean/issues)
- [x] I have provided detailed steps to reproduce the issue

<!--- Template inspired by https://github.com/stevemao/github-issue-templates -->
https://quantpedia.com/Screener/Details/376
https://quantpedia.com/Screener/Details/307
-premium quandl data necessary for upcoming earnings announcements: https://www.quandl.com/databases/ZEA/documentation/a-earnings-announcements 
https://quantpedia.com/Screener/Details/271

-need premium data for companies which announce stock repurchase program: https://www.quandl.com/data/EVB-EventVestor-Corporate-Buybacks
https://quantpedia.com/Screener/Details/144
-the entry signal occurs if today’s close is greater than or equal to the highest close during the stock’s entire history
https://quantpedia.com/Screener/Details/136
-uses regression model which is calculated every month for all eligible stocks using the Fama and French three factors as independent variables.