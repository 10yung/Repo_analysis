By adding `jsPDF-AutoTable` into a method we can actually use it also in NodeJS :)

Updates
* [x] README
  - Usage
* [x] Tests
* [x] Examples
jsPDF now has a separate distribution file for node.js, but jspdf-autotable does not support that. It adds the add-on to the regular version causing "doc.autoTable is not a function" error . jspdf-autotable needs to load the correct distribution file and add the add-on there when used under node.js.

The node examples work with the regular version but not with the node version. For some reason, however, my own tests cause "ReferenceError: Blob is not defined" with the regular version. Not sure what in my code causes jsPDF to use Blob, but Blob is only available in browsers, not in node.js.
First, Thank you for such a great plugin which made our life much easier.

I'm facing a big problem when using the plugin with real-life data, when there's even only one cell in a column with long text, the other columns cells will break in the middle of words which makes it unreadable and taking double the vertical space when it should take space from the big column.

![1](https://user-images.githubusercontent.com/5418859/67423537-bd575580-f5d4-11e9-9bbc-2e045004b5d5.jpg)

This makes it unusable without defining `minCellWidth` for columns or preventing it from wrapping altogether, that could work for some cases but that's not the answer, I have user-defined data in these rows which could be one word, or more, I want it to break into lines (correctly) only when needed.

So, as an attempt to solve the problem, I tried to figure out how HTML tables handle this, What I found is that each column will have a minimum width that will not get smaller than the longest word in that column.

So I used the following `hook` code to set `minWidth` for each column to the longest word :

```js
doc.autoTable({
  // ...

  /**
   * Prevent AutoTable from breaking lines in the middle of words
   * by setting the minWidth to the longest word in the column
   * 
   * WARNING: this may cause the table to exceede the allowed width (just like in HTML)
   * and give a "can't fit page" console error, could be improved.
   */
  didParseCell({doc, cell, column}) {
    if (cell === undefined) {
      return;
    }

    const hasCustomWidth = (typeof cell.styles.cellWidth === 'number');

    if (hasCustomWidth || cell.raw == null || cell.colSpan > 1) {
      return
    }

    let text;

    if (cell.raw instanceof Node) {
      text = cell.raw.innerText;
    } else {
      if (typeof cell.raw == 'object') {
        // not implemented yet
        // when a cell contains other cells (colSpan)
        return;
      } else {
        text = '' + cell.raw;
      }
    }

    // split cell string by spaces
    const words = text.split(/\s+/);

    // calculate longest word width
    const maxWordUnitWidth = words.map(s => Math.floor(doc.getStringUnitWidth(s) * 100) / 100).reduce((a, b) => Math.max(a, b), 0);
    const maxWordWidth = maxWordUnitWidth * (cell.styles.fontSize / doc.internal.scaleFactor)

    const minWidth = cell.padding('horizontal') + maxWordWidth;

    // update minWidth for cell & column

    if (minWidth > cell.minWidth) {
      cell.minWidth = minWidth;
    }

    if (cell.minWidth > cell.wrappedWidth) {
      cell.wrappedWidth = cell.minWidth;
    }

    if (cell.minWidth > column.minWidth) {
      column.minWidth = cell.minWidth;
    }

    if (column.minWidth > column.wrappedWidth) {
      column.wrappedWidth = column.minWidth;
    }
  }
});
```

codepen: [https://codepen.io/mmghv/pen/eYYvQqO?editors=1010](https://codepen.io/mmghv/pen/eYYvQqO?editors=1010)

And this was the result :

![2](https://user-images.githubusercontent.com/5418859/67425074-a36b4200-f5d7-11e9-8b19-c1c4d9cc392c.jpg)

As you can see, It fixed the problem, now the spacing makes more sense and the table actually look more like the HTML version.

I believe that this should be the default behavior.

I didn't do a pull request because it still needs improvements and a way to handle `colSpan` but I'm in the middle of a project right now, so I'm leaving this here as a starting point, and as a quick fix for anyone who could be facing the same problem.

`Note` side effect of this, it may cause the table width to get outside of the defined boundaries if the total width of the longest words in each column is greater than the defined `tableWidth`.

This is actually how HTML tables behave, But I fell like it shouldn't be that way with AutoTable, I'm not sure.
