If `env` is aliased or there is a function with a name conflict, this may cause `man` to fail. Prepending `env` with `command` "bypasses" any aliases or functions. See the issue I ran into in this [StackOverflow answer](https://unix.stackexchange.com/a/562814/297140).
There were some improper updates, this series of patches should address the issues that arised from that.

I added an `update` script precisely to avoid synchronization issues, and this script was completely ignored when updates were issued.
The old apple icon didn't appear once I installed a https://github.com/ryanoasis/nerd-fonts/blob/master/patched-fonts/UbuntuMono. Once I copied in the character taken from https://fontawesome.com/icons/apple , it appears properly.
On nixos systems, there is a `fzf-share` command available to find the fzf shell folder which directly contains the completion scripts. This pr updates the fzf plugin to use that.
Also the shell folder does not have a subdirectory `/shell` where the plugin would normally look for the scripts. This is the same as on arch based systems. This pr fixes this.

As my bash script skills are not the best, it may be a good idea to test the changes of this pr on an arch system first, to avoid breaking something unintentionally.
**Describe the bug**
Docker autocomplete plugin not working.

**To Reproduce**
Steps to reproduce the behavior:
1. Enable plugin 'docker'.
2. Start typing on your terminal emulator, hit the autocomplete button (Tab).
3. Nothing happens.

**Expected behavior**
Autocomplete suggests the relevant options.

**System:**
 - OS: arch 5.4.10
 - Zsh version: 5.7.1
 - Terminal emulator: Termite
Using latest GCC 10 and adding `-flto` to `CFLAGS` one will see a failure in test-suite. It's very likely caused by the following violation of strict aliasing:

```
gcc -c -I. -I../Src  -DHAVE_CONFIG_H -O2 -Wall -D_FORTIFY_SOURCE=2 -fstack-protector-strong -funwind-tables -fasynchronous-unwind-tables -fstack-clash-protection -Werror=return-type -flto=auto -fcommon -g -fno-strict-aliasing -o main.o ./main.c
make[2]: Leaving directory '/home/marxin/Programming/zsh/Src'
make[2]: Entering directory '/home/marxin/Programming/zsh/Src'
make[2]: Leaving directory '/home/marxin/Programming/zsh/Src'
rm -f zsh
gcc  -s -rdynamic -o zsh main.o  `cat stamp-modobjs`   -ldl -lncursesw -lrt -lm  -lc
hist.epro:19:18: warning: type of ‘histtab’ does not match original declaration [-Wlto-type-mismatch]
   19 | extern HashTable histtab;
      |                  ^
hist.c:101:11: note: ‘histtab’ was previously declared here
  101 | HashTable histtab;
      |           ^
hist.c:101:11: note: code may be misoptimized unless ‘-fno-strict-aliasing’ is used
hashtable.epro:21:38: warning: type of ‘cmdnamtab’ does not match original declaration [-Wlto-type-mismatch]
   21 | extern mod_import_variable HashTable cmdnamtab;
      |                                      ^
hashtable.c:585:22: note: ‘cmdnamtab’ was previously declared here
  585 | mod_export HashTable cmdnamtab;
      |                      ^
hashtable.c:585:22: note: code may be misoptimized unless ‘-fno-strict-aliasing’ is used
hashtable.epro:33:38: warning: type of ‘aliastab’ does not match original declaration [-Wlto-type-mismatch]
   33 | extern mod_import_variable HashTable aliastab;
      |                                      ^
hashtable.c:1172:22: note: ‘aliastab’ was previously declared here
 1172 | mod_export HashTable aliastab;
      |                      ^
hashtable.c:1172:22: note: code may be misoptimized unless ‘-fno-strict-aliasing’ is used
hashtable.epro:34:38: warning: type of ‘sufaliastab’ does not match original declaration [-Wlto-type-mismatch]
   34 | extern mod_import_variable HashTable sufaliastab;
      |                                      ^
hashtable.c:1177:22: note: ‘sufaliastab’ was previously declared here
 1177 | mod_export HashTable sufaliastab;
      |                      ^
hashtable.c:1177:22: note: code may be misoptimized unless ‘-fno-strict-aliasing’ is used
hashtable.epro:31:38: warning: type of ‘reswdtab’ does not match original declaration [-Wlto-type-mismatch]
   31 | extern mod_import_variable HashTable reswdtab;
      |                                      ^
hashtable.c:1109:22: note: ‘reswdtab’ was previously declared here
 1109 | mod_export HashTable reswdtab;
      |                      ^
hashtable.c:1109:22: note: code may be misoptimized unless ‘-fno-strict-aliasing’ is used
hashtable.epro:25:38: warning: type of ‘shfunctab’ does not match original declaration [-Wlto-type-mismatch]
   25 | extern mod_import_variable HashTable shfunctab;
      |                                      ^
hashtable.c:803:22: note: ‘shfunctab’ was previously declared here
  803 | mod_export HashTable shfunctab;
      |                      ^
hashtable.c:803:22: note: code may be misoptimized unless ‘-fno-strict-aliasing’ is used
utils.c: In function ‘getkeystring’:
```

For more info, please take a look here:
https://bugzilla.opensuse.org/show_bug.cgi?id=1161153
**Describe the bug**
When I try to source my config I get the following error:
```
source ~/.zshrc                         
is_plugin:3: command not found: yarn
is_plugin:4: command not found: yarn
is_plugin:3: command not found: yarn
is_plugin:4: command not found: yarn
[oh-my-zsh] plugin 'z' not found
```

**To Reproduce**

Steps to reproduce the behavior:
1. Enable plugin 'z'
2. Download yvm with brew
3. add yvm export to zshrc
```
export YVM_DIR=/usr/local/Cellar/yvm/3.6.1
[ -r $YVM_DIR/yvm.sh ] && . $YVM_DIR/yvm.sh
```
3. See error
-->

**Expected behavior**
<!-- A clear and concise description of what you expected to happen. -->
I should be able to source my zshrc with no errors and the z plugin should work as expected.

**System:**
 - OS: macOS 10.14.6
 - Zsh version: zsh 5.7.1 (x86_64-apple-darwin18.2.0)
 - Terminal emulator"  iTerm2


<!--
1. Look for similar issues already posted (including closed ones)
2. Include as much relevant information as possible
3. Try to make sure the issue is due to Oh My Zsh
-->
Sorry for this not related issue which I had during using oh-my-zsh.

Here is my environment:
1. OS: Windows 10 Enterprise, 1809
2. WSL: Ubuntu 18.04 LTS
3. MobaXterm: Personal Edition v12.4 Build 4248

Problem:
`zsh` and `oh-my-zsh` are installed successfully without errors. Default shell has been changed to `zsh` by `chsh -s $(which zsh)` (also tried `chsh -s /bin/zsh` which did not work also). When I start WSL from MobaXterm, it starts with `sh` instead of  `zsh`. But I can manually change to `zsh` by execute `zsh` command where `oh-my-zsh` is working really well. How do I know I am not using `zsh`? I have changed the theme to `agnoster` which is very obvious to tell. Also I have double checked that the default shell is set to `zsh` by `echo $SHELL`.

Has anybody come to similar problems?

I am using macOS Catalina.

Everything worked fine until the latest update.
zsh version: zsh 5.7.1 (x86_64-apple-darwin19.0.0)

Everything looks okay for normal folder. However, for remote file systems, it is stuck, until I press Ctrl +C and then type`cd ..`

I am attaching the screenshot below:

<img width="1440" alt="Screen Shot 2020-01-15 at 10 40 01 AM" src="https://user-images.githubusercontent.com/14984329/72447577-977cbf80-3783-11ea-81d4-c2855f0a88fd.png">



### When I use the kubectl plugin alone, the command line is correct, but after I use autosuggestion, I get this kind of error. I ca n’t delete it
- os type :mac 10.13
![image](https://user-images.githubusercontent.com/59188420/72435753-d0e01a00-37d9-11ea-9355-69dac18090b5.png)

