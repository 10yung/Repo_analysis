Hello.
Thank you for BrightFutures.
In this pull request I added `func map<U>(_ context: @escaping ExecutionContext, keyPath: KeyPath<Value.Value, U>) -> Future<U, Value.Error>`. It is similar to `map` that you already have, but accepts KeyPath instead of a closure.
Looks like 8.0.1 has not been published to Cocopods.
Latest version that shows up in the repos is 8.0.0: https://cocoapods.org/pods/BrightFutures


Thx!
`s.swift_version = '5'` will produce `SWIFT_VERSION = 5;` in file `project.pxproj`, which keeps Xcode to prompt to convert to Swift 5.
Setting `s.swift_version = '5.0'` fix this issue.
This pull request adds the functionality to `AsyncType` to be dispatched earliest at the given deadline. This is similar to `delay()`. However instead of always waiting for a fixed interval, `earliest(at:)` will dispatch immediately if the deadline has already passed. In other words, `earliest(at:)` ensures a minimum time before the future completes.

**Motivation**
When using `BrightFutures` in combination with network requests, you can't know when the server will respond to your request. If you have some animations for such network requests (e.g. activity indicators), you want the user interface to behave in a smooth manner. This includes no rapid UI changes. With `earliest(at:)`, you can ensure that the user will at least catch a glimpse at the activity indicator when having a fast internet connection. On the other hand, there is no need for waiting an additonal interval when the network request returns after two seconds.

**Example**
```swift
spinner.startAnimation()
doNetworkTask().earliest(at: 500.milliseconds.fromNow).onComplete { _ in
    spinner.stopAnimation()
}
```
I call executeNext() more than 500 times, app crash. I tested with physical device 
This is my sample code. Please helps me! 
```
class ViewController: UIViewController {
    enum TestError: Error {
    }

    override func viewDidLoad() {
        super.viewDidLoad()
        executeAll(number: 0).onSuccess {
            print("success")
        }
    }

    private func executeAll(number: Int) -> Future<Void, TestError>{
        return executeNext(number: number)
    }

    private func executeNext(number: Int) -> Future<Void, TestError> {
        let promise = Promise<Void, TestError>()
        executeOne(number: number).onSuccess {
            if number == 1000 {
                promise.success({}())
            } else {
                promise.completeWith(self.executeNext(number: number + 1))
            }
        }
        return promise.future
    }

    private func executeOne(number: Int) -> Future<Void, TestError> {
        let promise = Promise<Void, TestError>()
        promise.success({}())
        return promise.future
    }
}
```
Thank you!


Hi,

I have a weird error since I upgraded my code to swift4:

```
error: missing argument for parameter #1 in call
                    promise.success()
                                    ^
                                    <#Void#>
BrightFutures.Promise:16:17: note: 'success' declared here
    public func success(_ value: T)
```

The compiler is claiming an argument, if I insert Void `promise.success(Void)` it will complain that this method doesn't have any argument.

Is there any workaround ?

Thanks!

JC