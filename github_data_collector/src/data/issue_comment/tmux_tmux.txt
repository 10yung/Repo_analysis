### Issue description

I created the following minimal tmux.conf:

```
set-hook -g after-kill-pane 'selectl -E'
```

Setting a hook like in the minimal tmux.conf should execute `select -E` every time the command `killp` gets executed with the effect that every open pane has the same size after killing a pane. However, this hook seems to do nothing.

### Steps to reproduce

1. Create minimal tmux.conf as described above
2. Open tmux
3. Open new pane via `:splitw`
3. Open new split again via `:splitw ; selectl -E`
Notice how every pane has the same size.
4. Kill bottom pane via `:killp`
5. Notice how the two remaining panes don't have the same size although they should have due to the hook in the tmux.conf

### Required information

* tmux 3.0a
* Arch Linux
* $TERM inside `tmux-256color`
* $TERM outside `st-256color`

[tmux-client-152158.log](https://github.com/tmux/tmux/files/4079802/tmux-client-152158.log)
[tmux-out-152160.log](https://github.com/tmux/tmux/files/4079803/tmux-out-152160.log)
[tmux-server-152160.log](https://github.com/tmux/tmux/files/4079805/tmux-server-152160.log)

### Issue description

Currently, there seems to be no way to configure the style of the outside area of pane borders using inline styles in the pane-border-format variable. This also means there is no way to set the style dynamically based on variables.

My test tmux.conf:

```
set -g pane-border-status bottom
set -g pane-border-style ""
set -g pane-active-border-style ""
set -g pane-border-format "#[#{?#{pane_active},bg=red fill=red,bg=blue fill=blue}]"
```

A screenshot of the result is attached.

<img width="1282" alt="Screen Shot 2019-12-22 at 10 30 24 PM" src="https://user-images.githubusercontent.com/19711877/71334242-4b838580-250b-11ea-9ac9-805503dc24ee.png">

As you can see, the vertical bars are not styled according to the inline style, as well as the right and left side of the bottom-bars.

### Required information

Please provide the following information:

* tmux version (`tmux -V`).
tmux 3.0a
* Platform (`uname -sp`).
Darwin i386
* $TERM inside and outside of tmux (`echo $TERM`).
inside: screen-256color
outside: xterm-256color
* Logs from tmux (`tmux kill-server; tmux -vv new`).
no logs
## Premise

tmux is an incredibly flexible tool, with commands that can be combined with other commands or embedded in other commands like building blocks to create complex and powerful macros.

This is awesome, but it presents a problem for people just starting out learning tmux.

Often times, the first key sequence a new user learns is how to trigger list-keys so they can look up all the key sequences they haven't memorized. 

When looking at key bindings in list-keys, when the bound command is simple, like `select-window -t :=1`, it's pretty easy to figure out what that key binding does. When the bound command is more complicated, like `command-prompt -i -I "#{pane_search_string}" -p "(search up)" "send -X search-backward-incremental \"%%%\""`, it can be much more difficult for a new user, not familiar with the intricacies of the tmux command system, to figure out.

## Proposal

- Add an option to the `bind-key` command to annotate the binding with a string, a desription of what the bound command does
- Add an option to the 'list-keys` command to show key binding descriptions (instead of, or alongside the bound command

maybe for example:
```
bind-key -h "Send mouse wheel up event to pane, scroll up if in copy mode" -T root WheelUpPane       if-shell -F -t = "#{mouse_any_flag}" "send-keys -M" "if -Ft= \"#{pane_in_mode}\" \"send-keys -M\" \"copy-mode -et=\""
```

Thoughts?
### Ask or discuss any quick questions here about 3.0a only please.

Bug reports please open a new issue with full information, see [CONTRIBUTING](https://github.com/tmux/tmux/blob/master/.github/CONTRIBUTING.md).

3.0a is a patch release of 3.0.

**[The 3.0a CHANGES file is here](https://raw.githubusercontent.com/tmux/tmux/3.0a/CHANGES).**

---
**Note that you need to change \\ to '\\' and any {foo} to '{foo}' in .tmux.conf:**
~~~~
bind \ splitw
bind x kill-pane -t {top}
~~~~
Become:
~~~~
bind '\' splitw
bind x kill-pane -t '{top}'
~~~~
These will work on older tmux versions also.
### Issue description

I was testing moving and linking windows in control mode and crashed the tmux server. I was able to reproduce a few times.

I tested at commit 26f274011096b9eacfd2753d8f7afcb63e796ab9, which is the current head of `3.0-rc`. Let me know if I should be trying on master or 3.0 instead.

The steps to reproduce are to create a few sessions and send commands like `move-window -s 3:@3 -t 5+` in quick succession to move and link windows between sessions. I was able to cause it to crash while logging. FWIW it was much easier to reproduce when not producing a log.

[tmux-server-42639.log](https://github.com/tmux/tmux/files/3504465/tmux-server-42639.log)

I was able to get a core dump:

```
* thread #1, stop reason = signal SIGSTOP
  * frame #0: 0x000000010001a533 tmux`control_notify_session_window_changed(s=0x000000010041e9f0) at control-notify.c:256:16 [opt]
    frame #1: 0x0000000100034ed5 tmux`notify_callback(item=0x000000010042a480, data=0x000000010042a420) at notify.c:128:3 [opt]
    frame #2: 0x0000000100011ec0 tmux`cmdq_next [inlined] cmdq_fire_callback(item=<unavailable>) at cmd-queue.c:371:10 [opt]
    frame #3: 0x0000000100011eaf tmux`cmdq_next(c=<unavailable>) at cmd-queue.c:449 [opt]
    frame #4: 0x0000000100046547 tmux`server_loop at server.c:229:11 [opt]
    frame #5: 0x0000000100039458 tmux`proc_loop(tp=0x00000001004002c0, loopcb=(tmux`server_loop at server.c:224)) at proc.c:200:42 [opt]
    frame #6: 0x0000000100045e19 tmux`server_start(client=<unavailable>, base=<unavailable>, lockfd=6, lockfile="/private/tmp/tmux-501/default.lock") at server.c:213:2 [opt]
    frame #7: 0x00000001000031a9 tmux`client_main [inlined] client_connect(base=<unavailable>, path="/private/tmp/tmux-501/default") at client.c:158:8 [opt]
    frame #8: 0x0000000100002f2f tmux`client_main(base=0x00000001003005f0, argc=0, argv=0x00007ffeefbff4c0, flags=<unavailable>) at client.c:266 [opt]
    frame #9: 0x000000010004f093 tmux`main(argc=0, argv=0x00007ffeefbff4c0) at tmux.c:374:7 [opt]
    frame #10: 0x00007fff60de03d5 libdyld.dylib`start + 1
    frame #11: 0x00007fff60de03d5 libdyld.dylib`start + 1
(lldb) f 0
frame #0: 0x000000010001a533 tmux`control_notify_session_window_changed(s=0x000000010041e9f0) at control-notify.c:256:16 [opt]
   253 				continue;
   254
   255 			control_write(c, "%%session-window-changed $%u @%u", s->id,
-> 256 			    s->curw->window->id);
   257 		}
   258 	}
(lldb) p s->curw
(winlink *) $0 = 0x0000000000000000
```

My `.tmux.conf` contains only commented-out lines:

```
#set-window-option -g automatic-rename off
#set-option -g set-titles on
```

### Required information

Please provide the following information:

* tmux version (`tmux -V`). tmux 3.0-rc4
* Platform (`uname -sp`). Darwin i386
* $TERM inside and outside of tmux (`echo $TERM`). xterm-256color
* Logs from tmux (`tmux kill-server; tmux -vv new`). See above.

New option 'full-search' to control if copy-mode will search
over the full history.  Defaults to on, when off number of
results and highlighting is not shown.

When dealing with a history of ~20000 lines there's a small,
but noticeable, lag in the amount of time to jump to the first
result and search-again.  >50k+ histories results in multi-second wait.