When I try to build the simple angular app with guess js. It's giving me the error. 

My "extend.webpack.config.js" is like below:
```
const { GuessPlugin } = require('guess-webpack');
const { parseRoutes } = require('guess-parser');

module.exports = {
  plugins: [
    new GuessPlugin({
        GA: '', //ga code is not here because for security reason
        routeProvider() {
            return parseRoutes('.');
        },
        runtime: {
            delegate: false
        }
    })
  ]
};
```

The build error is like that.
```
cn4s-MacBook-Pro:guess-angular cn4$ npm run build

> guess-angular@0.0.0 build /Users/cn4/Documents/subhojit/practice/guess-js/guess-angular
> ng build

95% emitting GuessPluginError: No access, refresh token or API key is set.
    at OAuth2Client.getRequestMetadataAsync (/Users/cn4/Documents/subhojit/practice/guess-js/guess-angular/node_modules/google-auth-library/build/src/auth/oauth2client.js:249:19)
    at OAuth2Client.requestAsync (/Users/cn4/Documents/subhojit/practice/guess-js/guess-angular/node_modules/google-auth-library/build/src/auth/oauth2client.js:337:34)
    at OAuth2Client.request (/Users/cn4/Documents/subhojit/practice/guess-js/guess-angular/node_modules/google-auth-library/build/src/auth/oauth2client.js:331:25)
    at createAPIRequestAsync (/Users/cn4/Documents/subhojit/practice/guess-js/guess-angular/node_modules/googleapis-common/build/src/apirequest.js:248:27)
    at Object.createAPIRequest (/Users/cn4/Documents/subhojit/practice/guess-js/guess-angular/node_modules/googleapis-common/build/src/apirequest.js:44:9)
    at Resource$Reports.batchGet (/Users/cn4/Documents/subhojit/practice/guess-js/guess-angular/node_modules/googleapis/build/src/apis/analyticsreporting/v4.js:80:37)
    at /Users/cn4/Documents/subhojit/practice/guess-js/guess-angular/node_modules/guess-ga/dist/guess-ga/index.js:1:6740
    at new Promise (<anonymous>)
    at /Users/cn4/Documents/subhojit/practice/guess-js/guess-angular/node_modules/guess-ga/dist/guess-ga/index.js:1:6703
    at /Users/cn4/Documents/subhojit/practice/guess-js/guess-angular/node_modules/guess-ga/dist/guess-ga/index.js:1:5610
    at Object.next (/Users/cn4/Documents/subhojit/practice/guess-js/guess-angular/node_modules/guess-ga/dist/guess-ga/index.js:1:5715)
    at /Users/cn4/Documents/subhojit/practice/guess-js/guess-angular/node_modules/guess-ga/dist/guess-ga/index.js:1:4627
    at new Promise (<anonymous>)
    at r (/Users/cn4/Documents/subhojit/practice/guess-js/guess-angular/node_modules/guess-ga/dist/guess-ga/index.js:1:4372)
    at s (/Users/cn4/Documents/subhojit/practice/guess-js/guess-angular/node_modules/guess-ga/dist/guess-ga/index.js:1:6634)
    at /Users/cn4/Documents/subhojit/practice/guess-js/guess-angular/node_modules/guess-ga/dist/guess-ga/index.js:1:7578
(node:1185) UnhandledPromiseRejectionWarning: Error: No access, refresh token or API key is set.
    at OAuth2Client.getRequestMetadataAsync (/Users/cn4/Documents/subhojit/practice/guess-js/guess-angular/node_modules/google-auth-library/build/src/auth/oauth2client.js:249:19)
    at OAuth2Client.requestAsync (/Users/cn4/Documents/subhojit/practice/guess-js/guess-angular/node_modules/google-auth-library/build/src/auth/oauth2client.js:337:34)
    at OAuth2Client.request (/Users/cn4/Documents/subhojit/practice/guess-js/guess-angular/node_modules/google-auth-library/build/src/auth/oauth2client.js:331:25)
    at createAPIRequestAsync (/Users/cn4/Documents/subhojit/practice/guess-js/guess-angular/node_modules/googleapis-common/build/src/apirequest.js:248:27)
    at Object.createAPIRequest (/Users/cn4/Documents/subhojit/practice/guess-js/guess-angular/node_modules/googleapis-common/build/src/apirequest.js:44:9)
    at Resource$Reports.batchGet (/Users/cn4/Documents/subhojit/practice/guess-js/guess-angular/node_modules/googleapis/build/src/apis/analyticsreporting/v4.js:80:37)
    at /Users/cn4/Documents/subhojit/practice/guess-js/guess-angular/node_modules/guess-ga/dist/guess-ga/index.js:1:6740
    at new Promise (<anonymous>)
    at /Users/cn4/Documents/subhojit/practice/guess-js/guess-angular/node_modules/guess-ga/dist/guess-ga/index.js:1:6703
    at /Users/cn4/Documents/subhojit/practice/guess-js/guess-angular/node_modules/guess-ga/dist/guess-ga/index.js:1:5610
    at Object.next (/Users/cn4/Documents/subhojit/practice/guess-js/guess-angular/node_modules/guess-ga/dist/guess-ga/index.js:1:5715)
    at /Users/cn4/Documents/subhojit/practice/guess-js/guess-angular/node_modules/guess-ga/dist/guess-ga/index.js:1:4627
    at new Promise (<anonymous>)
    at r (/Users/cn4/Documents/subhojit/practice/guess-js/guess-angular/node_modules/guess-ga/dist/guess-ga/index.js:1:4372)
    at s (/Users/cn4/Documents/subhojit/practice/guess-js/guess-angular/node_modules/guess-ga/dist/guess-ga/index.js:1:6634)
    at /Users/cn4/Documents/subhojit/practice/guess-js/guess-angular/node_modules/guess-ga/dist/guess-ga/index.js:1:7578
(node:1185) UnhandledPromiseRejectionWarning: Unhandled promise rejection. This error originated either by throwing inside of an async function without a catch block, or by rejecting a promise which was not handled with .catch(). (rejection id: 3)
(node:1185) [DEP0018] DeprecationWarning: Unhandled promise rejections are deprecated. In the future, promise rejections that are not handled will terminate the Node.js process with a non-zero exit code.
```

Please help me to resolve this issue.


There's a lot of place for improvement of the documentation.

- [ ] Update the Angular guide to use `ngx-build-plus`
- [ ] Improve the API documentation explaining the configuration properties
- [ ] Include a guide showing how to use Guess.js with JWT instead of OAuth
- [ ] Include Gatsby guide

The content of the documentation is in the GitHub page [repo](https://github.com/guess-js/guess-js.github.io).


The `GuessPlugin` should cache the access token so it doesn't ask the user for authorization on each run.
## Prior implementation

The initial chunk clustering [implementation](https://github.com/mgechev/mlx/blob/d6d5b01588e15479b00ab469f6105d2040f015b7/packages/cluster/index.ts) accepts a minimum number of chunks that need to be produced by the build process and goes through a graph clustering based on Tarjan's algorithm for finding strongly connected components.

This algorithm has a number of problems:
- It treats chunks belonging to nested routes and chunks without a common ancestor the same way.
- It terminates when the number of chunks in the application is at most the minimum number of chunks specified in the configuration. Configuring the minimum number of chunks the application should consist is not a good heuristic for concatenating JavaScript files together.
- The algorithm does not consider the chunk size but only the probability two chunks to be visited in the same session.

## Suggested implementation

Combine only chunks of nested routes where the probability of two chunks to be used together is high (threshold should be discussed).

In such case, if we have the following routes in the application:

```
/a/b/c
/b
/c
/d
/e/f
/e
```
We'll recommend developers to load everything lazily (i.e. even load lazily `/a`, `/a/b`, and `/a/b/c`).

In such case, the probability `/a`, `/a/b`, and `/a/b/c` to be visited in the same session is `1` (because we have only one route with root `/a`), for `/e` and `/e/f` the probability is *`n`*.

In this case, we'll cluster the chunks from `/a`, `/a/b`, and `/a/b/c` into a single file. Depending on the value of *`n`*, we may also combine `/e` and `/e/f`.

When the user is at any page (e.g. `/a/b/c`) we'll prefetch the other bundles based on the Markov chain which we've built in the prefetch plugin.

**Note:** this algorithm does not solve the problem which occurs when combining large chunks together.