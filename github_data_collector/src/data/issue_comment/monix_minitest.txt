
Returning the exception that was intercepted allows the library users to inspect the exception a little bit more, so they don't have to rely on just the expected type and can compare, as an example, the error message.

Would you prefer to have this new signature as a new function for compat issues maybe?
The PR I made makes it possible, you only need to launch sbt with the environment variable set:
```scala
SCALANATIVE_VERSION="0.4.0-M2" sbt
```
The title says it all. I created the issue to get notified.
Fixes #16 

The main issues were that scala reflection isn't available in dotty, so I had to replace Platform.scala with something that does fairly rudimentary Java reflection. I should probably make it work for nested objects too. Also the `@EnableReflectiveInstantiation` annotation on `AbstractTestSuite` caused runtime exception. Looks like it can be safely removed in we're not targeting ScalaJS on Dotty yet.

Feedback would be welcome. It would be amazing to make minitest the first Scala testing framework in the galaxy that works with Scala 3!
I'm trying to use minitest on a project that is cross-compiled with dotty. I'm using minitest 2.1.1 using `withDottyCompat` so it picks up the 2.12 artifact.

I am getting the following compilation error at runtime:
```
[error] java.lang.NoSuchMethodError: minitest.api.SourceLocation$.fromContext()Lminitest/api/SourceLocation;
[error] 	at scalapb.lenses.SimpleTest$.$init$$$anonfun$1(SimpleTest.scala:82)
[error] 	at minitest.SimpleTestSuite.$anonfun$test$1(SimpleTestSuite.scala:27)
[error] 	at minitest.api.TestSpec$.$anonfun$sync$1(TestSpec.scala:51)
[error] 	at minitest.api.TestSpec.apply(TestSpec.scala:27)
[error] 	at minitest.api.Properties.$anonfun$iterator$2(Properties.scala:38)
[error] 	at minitest.api.TestSpec.apply(TestSpec.scala:27)
[error] 	at minitest.runner.Task.loop$1(Task.scala:40)
[error] 	at minitest.runner.Task.$anonfun$execute$4(Task.scala:55)
```