Will there be new version of Decodable supporting swift 5 ?
Use preferred capitalization of CocoaPods.
Change ErrorProtocol to Error.
Fix typos.

Fails with No Such module as Decodable. 
But when I run it installs fine and can distribute the app to appstore too.
import protocol Decodable.Decodable <- Error
This is an experiment to see what happens when we remove all existing functionality and rely on Swift 4's `Codable` instead.

- [x] Remove all existing functionality
- [x] Create a few overloads (this initial implementation is likely <s>suboptimal</s> complete nonsense though)
- [ ] Update tests 
- [ ] Investigate how different use-cases of e.g `DynamicDecodable` would be translated (subclassing `JSONDecoder`?)
- Would it be possible to gracefully migrate our syntax to rely on Swift 4's `Codable` instead?
- Would there even be a point in doing that? (yes?)



I have an array of dictionaries, each with a "Type" field that is used to determine which struct should be used for decoding it. Currently I have some unsupported types. I would like to just ignore those and keep parsing the rest of the array instead of throwing an error and cancelling the whole parsing operation at one point. I also don't want to end up with a dummy object just for the sole purpose of returning a non-nil object in the decode function. 

Is there anyway to do that with the latest version?
Swift 4 includes a built in `Decodable` protocol. Tried to build my project in Swift 4/Xcode 9 and got naming conflicts all over the place.

Obviously, it's early, but wanted to bring this to everyone's attention! I'm not sure what development of this library will look like in the future but figured this issue could begin that conversation.

Thanks!
So many times I did have situations with JSONs

For example json with Events
```json
[{
    "end_date": "2017-04-23T16:52:27.799Z",
    "name": "Session 0.2.1",
    "start_date": "2017-04-23T15:52:27.799Z"
},{
    "end_date": "2017-04-23T16:52:27.799Z",
    "name": "Session 0.2.2",
    "start_date": "2017-04-23T15:52:27.799Z"
},
{
    "end_date": "2017-04-23T16:52:27.799Z",
    "name": "Session 0.2.3",
    "start_date": "2017-04-23T15:52:27.799Z"
}]
```

So decoded struct should look like

```swift
struct JsonReposne: Decodable {
let events: [Event]
    
    static func decode(_ json: Any) throws -> JsonReposne {
        return try JsonReposne(
            events: json // but this will not work 
        )
    }
}
```

Workaround is to put JSON into dictionary and pass that dictionary

```swift
    static func decode(_ json: Any) throws -> JsonReposne {
        let data = ["data": json] as Any
        return try JsonReposne(
            events: data => "data" 
        )
    }
```

Maybe this is worth adding to Decodable itself?
