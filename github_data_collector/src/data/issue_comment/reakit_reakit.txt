Closes #529

This is an attempt to fix #529. Still work in progress. Need to reproduce the case in tests.

**Does this PR introduce a breaking change?**

No
## üêõ Bug report

### Current behavior

Parent dialog closes at the same time as the child dialog *after* parent dialog has been opened and closed once.

### Steps to reproduce the bug

1. Open parent dialog
   - Open child dialog
   - Click away from child dialog
    - Parent dialog stays open
1. Close parent dialog and open it again
   - Open child dialog
   - Click away from child dialog
    - Parent dialog closes at the same time as the child

**CodeSandbox:** https://codesandbox.io/s/react-reakit-nested-dialog-ebnve
**Recording:** https://streamable.com/lb04p

### Expected behavior

The parent dialog should not close at the same time as the child.

### Possible solutions

Not sure :|

### Environment

```sh
System:
    OS: Linux 5.4 Arch Linux
    CPU: (4) x64 Intel(R) Core(TM) i7-3820 CPU @ 3.60GHz
    Memory: 2.38 GB / 24.86 GB
    Container: Yes
    Shell: 5.7.1 - /bin/zsh
  Binaries:
    Node: 12.14.1 - ~/.nvm/versions/node/v12.14.1/bin/node
    Yarn: 1.21.1 - /bin/yarn
    npm: 6.13.4 - ~/.nvm/versions/node/v12.14.1/bin/npm
  Browsers:
    Brave Browser: unknown
    Firefox: 72.0.1
  npmPackages:
    react: ^16.12.0 => 16.12.0 
    react-compare-slider: ^1.0.0 => 1.0.0 
    react-dom: ^16.12.0 => 16.12.0 
    reakit: ^1.0.0-beta.12 => 1.0.0-beta.13
```

I'm using `1.0.0-beta.13` but the CodeSandbox link uses `1.0.0-beta.14` and has the same issue, it occurs on the latest on Chrome on Windows and Linux (haven't tested macOS).

If anyone knows of a solution I'm happy to attempt a PR.

Thanks!

## üêõ Bug report

Mainly had that issue when using bootstrap css, as seen  in the jsbin.

### Current behavior

https://jsbin.com/zehupeluwo/1/edit?html,output

1. Click on the show dialog button.
2. the dialog contains two buttons. The second one should be focused as per React.useEffect, as seen here: https://reakit.io/docs/dialog/#initial-focus
3. the first one is actually focused

I tracked it down to this bootstrap class:
```css
.hidden {
    display: none !important;
}
```
And saw that a global class is added to the dialog (`hidden`) that interferes with this.
It seems that focusing an element that still has `display: none` does not work.

### Steps to reproduce the bug

See above.
Comment out the `<link>` that holds the bootstrap css to make it work.

### Expected behavior

Second button should be focused.
(or actually: reakit shouldn't have global classes)

The dialog component contains a `hidden` class if it's closed.

I could not definitely find in the code where a `hidden` class is added. I've only come near it, it feels: 
https://github.com/reakit/reakit/blob/cd1845a5f393100c064caf807a6f7454cdfe249c/packages/reakit/src/Hidden/Hidden.ts#L50
### Possible solutions

add `setTimeout` to the `ref.current.focus()` as seen here: https://reakit.io/docs/dialog/#initial-focus

### Environment

```
  System:
    OS: Linux 5.0 Ubuntu 19.04 (Disco Dingo)
    CPU: (8) x64 Intel(R) Core(TM) i7-8550U CPU @ 1.80GHz
    Memory: 216.63 MB / 15.41 GB
    Container: Yes
    Shell: 5.0.3 - /bin/bash
  Binaries:
    Node: 10.15.3 - ~/.nvm/versions/node/v10.15.3/bin/node
    Yarn: 1.21.1 - ~/.nvm/versions/node/v10.15.3/bin/yarn
    npm: 6.4.1 - ~/.nvm/versions/node/v10.15.3/bin/npm
  Browsers:
    Chrome: 79.0.3945.88
    Firefox: 72.0.1

```

## üêõ Bug report

### Current behavior

When I change the `width` and `height` of radio buttons (in Chrome devtools), the actual radio button doesn't change size.

### Possible solutions

https://adrianroselli.com/2017/05/under-engineered-custom-radio-buttons-and-checkboxen.html

Bumps [handlebars](https://github.com/wycats/handlebars.js) from 4.1.2 to 4.5.3.
<details>
<summary>Changelog</summary>

*Sourced from [handlebars's changelog](https://github.com/wycats/handlebars.js/blob/master/release-notes.md).*

> ## v4.5.3 - November 18th, 2019
> Bugfixes:
> 
> - fix: add "no-prototype-builtins" eslint-rule and fix all occurences - f7f05d7
> - fix: add more properties required to be enumerable - 1988878
> 
> Chores / Build:
> - fix: use !== 0 instead of != 0 - c02b05f
> - add chai and dirty-chai and sinon, for cleaner test-assertions and spies, 
>   deprecate old assertion-methods  - 93e284e, 886ba86, 0817dad, 93516a0
> 
> Security:
> 
> - The properties `__proto__`, `__defineGetter__`, `__defineSetter__` and `__lookupGetter__` 
>   have been added to the list of "properties that must be enumerable".
>   If a property by that name is found and not enumerable on its parent, 
>   it will silently evaluate to `undefined`. This is done in both the compiled template and the "lookup"-helper. 
>   This will prevent new Remote-Code-Execution exploits that have been
>   published recently.
> 
> Compatibility notes: 
> 
> - Due to the security-fixes. The semantics of the templates using
>   `__proto__`, `__defineGetter__`, `__defineSetter__` and `__lookupGetter__` in the respect that those expression now return 
>   `undefined` rather than their actual value from the proto.
> - The semantics have not changed in cases where the properties are  enumerable, as in:
> 
> ```js
> {
>   __proto__: 'some string'
> }
> ```
> 
> - The change may be breaking in that respect, but we still only 
>   increase the patch-version, because the incompatible use-cases
>   are not intended, undocumented and far less important than fixing
>   Remote-Code-Execution exploits on existing systems.
> 
> 
> 
> [Commits](https://github.com/wycats/handlebars.js/compare/v4.5.2...v4.5.3)
> 
> ## v4.5.2 - November 13th, 2019
> # Bugfixes
> 
> - fix: use String(field) in lookup when checking for "constructor" - d541378
> - test: add fluent API for testing Handlebars - c2ac79c
> 
> Compatibility notes:
> - no incompatibility are to be expected
></tr></table> ... (truncated)
</details>
<details>
<summary>Commits</summary>

- [`c819c8b`](https://github.com/wycats/handlebars.js/commit/c819c8b533934d2ac18001d7eb27a3205b00c2f3) v4.5.3
- [`827c9d0`](https://github.com/wycats/handlebars.js/commit/827c9d0747bef7d7f89829779523b6b2dcf3051d) Update release notes
- [`f7f05d7`](https://github.com/wycats/handlebars.js/commit/f7f05d7558e674856686b62a00cde5758f3b7a08) fix: add "no-prototype-builtins" eslint-rule and fix all occurences
- [`1988878`](https://github.com/wycats/handlebars.js/commit/198887808780bbef9dba67a8af68ece091d5baa7) fix: add more properties required to be enumerable
- [`886ba86`](https://github.com/wycats/handlebars.js/commit/886ba86c2f9cc71b7d99b9018fbe2d72a57085cc) test/chore: add chai/expect and sinon to "runtime"-environment
- [`0817dad`](https://github.com/wycats/handlebars.js/commit/0817dad7e72c51d07f7700547d0c69aa79a4976b) test: add sinon as global variable to eslint in the specs
- [`93516a0`](https://github.com/wycats/handlebars.js/commit/93516a0b07026ebd23c84fddf270a0c8b570bc59) test: add sinon.js for spies, deprecate current assertions
- [`93e284e`](https://github.com/wycats/handlebars.js/commit/93e284ed9be1e38c5e6945f15af1ccd689f2ada6) chore: add chai and dirty-chai for better test assertions
- [`c02b05f`](https://github.com/wycats/handlebars.js/commit/c02b05fa819f46bb66c878bebc6e8006408ebd5c) fix: use !== 0 instead of != 0
- [`8de121d`](https://github.com/wycats/handlebars.js/commit/8de121d21c88a6ab877e3a0eec9daaac483f3bf0) v4.5.2
- Additional commits viewable in [compare view](https://github.com/wycats/handlebars.js/compare/v4.1.2...v4.5.3)
</details>
<br />

[![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=handlebars&package-manager=npm_and_yarn&previous-version=4.1.2&new-version=4.5.3)](https://help.github.com/articles/configuring-automated-security-fixes)

Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.

[//]: # (dependabot-automerge-start)
[//]: # (dependabot-automerge-end)

---

<details>
<summary>Dependabot commands and options</summary>
<br />

You can trigger Dependabot actions by commenting on this PR:
- `@dependabot rebase` will rebase this PR
- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it
- `@dependabot merge` will merge this PR after your CI passes on it
- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it
- `@dependabot cancel merge` will cancel a previously requested merge and block automerging
- `@dependabot reopen` will reopen this PR if it is closed
- `@dependabot ignore this [patch|minor|major] version` will close this PR and stop Dependabot creating any more for this minor/major version (unless you reopen the PR or upgrade to it yourself)
- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)
- `@dependabot use these labels` will set the current labels as the default for future PRs for this repo and language
- `@dependabot use these reviewers` will set the current reviewers as the default for future PRs for this repo and language
- `@dependabot use these assignees` will set the current assignees as the default for future PRs for this repo and language
- `@dependabot use this milestone` will set the current milestone as the default for future PRs for this repo and language

You can disable automated security fix PRs for this repo from the [Security Alerts page](https://github.com/reakit/reakit/network/alerts).

</details>
## üöÄ Feature request

Many Reakit components act as a focus trap, and it looks like there's a lot of complicated and thoughtfully considered logic under the hood for correctly passing focus between these components. I would like to make use of this behavior without the semantics of components like `Dialog` or `Menu`, perhaps with a `<FocusTrap>` component or `useFocusTrap()` hook in the public API.

### Motivation

I am currently rebuilding [PubPub's](https://github.com/pubpub/pubpub) rich text editing toolbar and using Reakit to ensure that it is as accessible as possible. There is a specific part of this system that requires a focus trap, and I'm having trouble modeling it using existing Reakit components. It is not a `Popover` as it usually doesn't correspond to a disclosure element, and while I think it could be a `Dialog`, I would like it to render _outside_ of a portal while still acting as a focus trap. 

### Example

Below are a few screenshots of our editor interface. The strip of buttons along the top of the document is called a `FormattingBar` and the blue pane below it is a `FormattingBarDetails`.

- `FormattingBarDetails` has complicated logic to determine whether it's open and what it displays ‚Äî sometimes it's triggered by a button press in the toolbar, but more often by a keypress or clicking something in the text editor itself, which is managed by [Prosemirror](https://prosemirror.net/).

- Once it's open, `FormattingBarDetails` should trap all keyboard focus and tabbing should cycle within the component until it's explicitly closed. It also needs to be aware of clicks outside of it, so it can decide whether to allow the click and handle cleanup before it closes. Although this behavior is like that of a `Dialog`, I would like the component to be statically positioned below the `FormattingBar` (i.e. outside of a portal) while still acting as a focus trap.

- This component can also appear either fixed to the `FormattingBar` as shown in the first image, or it can "pop out" into the editor contents as shown in the second. This resembles the relationship a `Popover` has to a `PopoverDisclosure`, but the position is determined by a bounding box given to us by Prosemirror rather than by reference to a specific element.

<img width="800" alt="Screen Shot 2019-12-17 at 11 58 33 PM" src="https://user-images.githubusercontent.com/2208769/71056988-28cb2880-2129-11ea-8dc7-f68864bdf972.png">

<img width="800" alt="Screen Shot 2019-12-17 at 11 54 40 PM" src="https://user-images.githubusercontent.com/2208769/71056919-f7525d00-2128-11ea-94aa-f191ac98d44b.png">

### Possible implementations

It looks like there's already a [`useFocusTrap()` hook](https://github.com/reakit/reakit/blob/master/packages/reakit/src/Dialog/__utils/useFocusTrap.ts) internal to Reakit. Exposing that in the public API could be a good start. I'm open to contributing a PR if there's agreement that this would work as part of Reakit.
I wanted to be able to set the flip behaviour on the popover in order to support the placement changing to `bottom` when the viewport is too small to support `right`.

I have changed the type of the `unstable_flip` prop to be either a `boolean` or the flip options from `Popper.Modifiers`. The existing behvaiour is the same so this shouldn't be a breaking change.

How do you feel about this API? I think it works well but would it be better to expose all the modifier options or perhaps _only_ expose the flip behaviour options?
## üêõ Bug report

### Current behavior

Rollup trows this error while building a project usign `reakit` as a dependency
> [!] Error: 'disableBodyScroll' is not exported by node_modules/body-scroll-lock/lib/bodyScrollLock.min.js
https://rollupjs.org/guide/en/#error-name-is-not-exported-by-module
node_modules/reakit/es/Dialog/Dialog.js (19:9)


### Steps to reproduce the bug

Create a project that uses `reakit` as a dependency and build it with `rollup`.

### Expected behavior

Is this expected ?

:information_source:  **Update** : I think the solution or intended thing to do is to move reakit as a `peerDependency` 


### Environment

Please, run the command below inside your project directory.
```sh
$ npx envinfo --system --binaries --browsers --npmPackages "{react*,reakit*}"

Environment:
  OS:  Linux 4.15
  Node:  10.15.3
  Yarn:  1.19.1
  npm:  6.12.0
  Watchman:  Not Found
  Xcode:  N/A
  Android Studio:  Not Found
```

## üêõ Bug report

### Current behavior

Interacting with a toolbar `item` or menu `item` (also inside toolbar) triggers updates for all the other items.

### Steps to reproduce the bug
1. Open sandbox: https://codesandbox.io/s/reakit-menu-with-tooltip-4wbml?from-embed
2. Remove any line
3. See console logs

### Expected behavior

I'll expect to just update the button that the user is interacting.
Since the api requires to pass `useToolbarState` and `useMenuState` to all items I guess this is expected if is tracking the last focused element, current focused element, values etc...

So I'm not sure if this is a real issue or the intended / expected behavior :confused: 

### Environment

Please, run the command below inside your project directory.
```sh
$ npx envinfo --system --binaries --browsers --npmPackages "{react*,reakit*}"

Environment:
  OS:  Linux 4.15
  Node:  10.15.3
  Yarn:  1.19.1
  npm:  6.12.0
  Watchman:  Not Found
  Xcode:  N/A
  Android Studio:  Not Found
```

## üöÄ Feature request

Following up on what @diegohaz mentioned [here](https://github.com/reakit/reakit/issues/350#issuecomment-533847935):

> in the future we may have a separate package to handle those animations more easily within Reakit (see how reakit-system-palette handles colors, for instance).

 I was wondering if there's any more information on the roadmap to bring animation features (like `fade` and `slide` for Popovers) back to the Reakit ecosystem. I've long been holding off on choosing an animation library, but I think it's about time I do that, and it would be great to get a better idea of what, if anything, is planned by Reakit in this regard before we nail down the specifics here.

### Motivation

A secondary package itself that allowed for easy animations like `slide` and `fade` from `reakit@0.x` would be amazing, but even some discussion of the plans would be a great help for planning.

### Example

Slide/fade in popovers like in `v0`