Hi there!

We just switched from awesome-typescript-loader@5.2.1 to ts-loader, and had instant boost from 10 minutes to 2.5 minutes of our storybook build time. And only 30% of our files are typescript – 70% are js (babel).

Just for your information.
The current version of micromatch depends on an outdated version of 'set-value' which
contains a security vulnerability (see https://nvd.nist.gov/vuln/detail/CVE-2019-10747)
The latest version of micromatch does not include this dependency, but requires node 8 or greater.
When importing TypeScript files and trying to build a project, the build fails saying the (typescript) files are "unsupported" and may need an "appropriate loader" to handle them. I'm using `awesome-typescript-loader` though.

If you would like to see the repository, you can find it [here](https://github.com/XplorationByAdrian/touch).

```bash
yarn run v1.17.3
$ yarn clean && webpack --config config/webpack.config.ts
$ rimraf lib
Using . in C:\Users\adria\Desktop\XplorationByAdrian\touch
Using lib in C:\Users\adria\Desktop\XplorationByAdrian\touch\lib
Using tsconfig.json in C:\Users\adria\Desktop\XplorationByAdrian\touch\tsconfig.json
Using package.json in C:\Users\adria\Desktop\XplorationByAdrian\touch\package.json
Using src in C:\Users\adria\Desktop\XplorationByAdrian\touch\src
Using node_modules in C:\Users\adria\Desktop\XplorationByAdrian\touch\node_modules
i ｢atl｣: Using typescript@3.6.3 from typescript
i ｢atl｣: Using tsconfig.json from C:/Users/adria/Desktop/XplorationByAdrian/touch/tsconfig.json
i ｢atl｣: Checking started in a separate process...
i ｢atl｣: Time: 648ms
Hash: da2bbabc48518ffba1e2
Version: webpack 4.40.2
Time: 2656ms
Built at: 10/11/2019 1:33:08 AM
 1 asset
Entrypoint main = touch.js
 [7] ./src/touch.ts 350 bytes {0} [built]
[11] (webpack)/buildin/module.js 497 bytes {0} [built]
[16] external "os" 42 bytes {0} [built]
[20] ./src/CommandEcho.ts 365 bytes {0} [built]
    + 17 hidden modules

ERROR in ./node_modules/xba-houston/src/ICommand.ts 1:7
Module parse failed: Unexpected token (1:7)
You may need an appropriate loader to handle this file type, currently no loaders are configured to process this file. See https://webpack.js.org/concepts#loaders
> export interface ICommand {
|   /**
|    * Gets the name of the command.
 @ ./node_modules/xba-houston/src/index.ts 5:0-38 5:0-38
 @ ./src/touch.ts

ERROR in ./node_modules/xba-houston/src/CommandBase.ts 3:7
Module parse failed: Unexpected token (3:7)
You may need an appropriate loader to handle this file type, currently no loaders are configured to process this file. See https://webpack.js.org/concepts#loaders
| import { ICommand } from './ICommand';
|
> export abstract class CommandBase implements ICommand {
|   public version?: string;
|
 @ ./node_modules/xba-houston/src/index.ts 1:0-44 1:0-44
 @ ./src/touch.ts

ERROR in ./node_modules/xba-houston/src/ICommandManager.ts 3:7
Module parse failed: Unexpected token (3:7)
You may need an appropriate loader to handle this file type, currently no loaders are configured to process this file. See https://webpack.js.org/concepts#loaders
| import { ICommand } from './ICommand';
|
> export interface ICommandManager {
|   /**
|    * Attempts to execute a command
 @ ./node_modules/xba-houston/src/index.ts 6:0-52 6:0-52
 @ ./src/touch.ts

ERROR in ./node_modules/xba-houston/src/CommandHandler.ts 4:10
Module parse failed: Unexpected token (4:10)
You may need an appropriate loader to handle this file type, currently no loaders are configured to process this file. See https://webpack.js.org/concepts#loaders
|
| export class CommandHandler {
>   private readonly commandMap: Map<string, ICommand> = new Map<
|     string,
|     ICommand
 @ ./node_modules/xba-houston/src/index.ts 2:0-50 2:0-50
 @ ./src/touch.ts

ERROR in ./node_modules/xba-houston/src/HoustonCommandManager.ts 6:10
Module parse failed: Unexpected token (6:10)
You may need an appropriate loader to handle this file type, currently no loaders are configured to process this file. See https://webpack.js.org/concepts#loaders
|
| export class HoustonCommandManager extends CommandHandler {
>   private readonly houston: Houston;
|   public constructor(houston: Houston) {
|     super();
 @ ./node_modules/xba-houston/src/index.ts 4:0-64 4:0-64
 @ ./src/touch.ts

ERROR in ./node_modules/xba-houston/src/Houston.ts 6:9
Module parse failed: Unexpected token (6:9)
You may need an appropriate loader to handle this file type, currently no loaders are configured to process this file. See https://webpack.js.org/concepts#loaders
|
| export class Houston {
>   public readonly commandManager: ICommandManager;
|   /**
|    *
 @ ./node_modules/xba-houston/src/index.ts 3:0-36 3:0-36
 @ ./src/touch.ts
error Command failed with exit code 2.
info Visit https://yarnpkg.com/en/docs/cli/run for documentation about this command.
```
This produces much better error output for the versions of TypeScript that support it.
### Minimal working example

```Javascript
// index.ts
import * as EventEmitter from "events";
console.log(EventEmitter);

// package.json
{
  "name": "mwe",
  "version": "1.0.0",
  "description": "Minimal working example for \"events\" bug in awesome-typescript-loader and webpack",
  "dependencies": {
    "@types/events": "^3.0.0",
    "awesome-typescript-loader": "^5.2.1",
    "events": "^3.0.0",
    "typescript": "^3.6.2",
    "webpack": "^4.39.3",
    "webpack-cli": "^3.3.7"
  }
}

// webpack.config.js
const webpack = require("webpack");
const {CheckerPlugin} = require("awesome-typescript-loader");

module.exports = {
  entry: `${__dirname}/index.ts`,
  output: {
    filename: "output.js",
    path: __dirname,
    library: "Test"
  },

  mode: process.env.NODE_ENV,

  module: {
    rules: [
     {
        test: /\.[jt]sx?$/,
        loader: "awesome-typescript-loader",
        options: {
          configFileName: `${__dirname}/tsconfig.json`
        }
      }
    ]
  },

  plugins: [
    new CheckerPlugin()
  ],

  resolve: {
    extensions: ["*.js", ".ts"]
  }
};

// tsconfig.json
{
  "files": ["./index.ts"]
}
```

### Steps to reproduce
Copy above files into a directory. Run
```
npm install
webpack --watch
```
This produces the output:
```
webpack is watching the files…

ℹ ｢atl｣: Using typescript@3.6.2 from typescript
ℹ ｢atl｣: Using tsconfig.json from mwe/tsconfig.json (in a forked process)
✖ ｢atl｣: Child process failed to process the request: TypeError: Cannot read property 'moduleAugmentations' of undefined
    at containsGlobalScopeAugmentation (mwe/node_modules/typescript/lib/typescript.js:93996:39)
    at isFileAffectingGlobalScope (mwe/node_modules/typescript/lib/typescript.js:94002:20)
    at Object.getAllDependencies (mwe/node_modules/typescript/lib/typescript.js:93932:41)
    at Object.result.getAllDependencies (mwe/node_modules/typescript/lib/typescript.js:94658:84)
    at processEmit (mwe/node_modules/awesome-typescript-loader/dist/checker/runtime.js:377:28)
    at process.<anonymous> (mwe/node_modules/awesome-typescript-loader/dist/checker/runtime.js:497:21)
    at process.emit (events.js:200:13)
    at emit (internal/child_process.js:876:12)
    at processTicksAndRejections (internal/process/task_queues.js:84:9)
ℹ ｢atl｣: Checking started in a separate process...
Hash: c7622806a916fe92d7c1
Version: webpack 4.39.3
Time: 2054ms
Built at: 09/01/2019 12:50:57 AM
    Asset      Size  Chunks             Chunk Names
output.js  5.07 KiB    main  [emitted]  main
Entrypoint main = output.js
[./index.ts] 106 bytes {main} [built]
    + 1 hidden module

ERROR in ./node_modules/events/events.js
Module build failed: Error: Final loader (./node_modules/awesome-typescript-loader/dist/entry.js) didn't return a Buffer or String
    at mwe/node_modules/webpack/lib/NormalModule.js:330:18
    at mwe/node_modules/loader-runner/lib/LoaderRunner.js:373:3
    at iterateNormalLoaders (mwe/node_modules/loader-runner/lib/LoaderRunner.js:214:10)
    at iterateNormalLoaders (mwe/node_modules/loader-runner/lib/LoaderRunner.js:221:10)
    at mwe/node_modules/loader-runner/lib/LoaderRunner.js:236:3
    at context.callback (mwe/node_modules/loader-runner/lib/LoaderRunner.js:111:13)
    at processTicksAndRejections (internal/process/task_queues.js:89:5)
 @ ./index.ts 3:19-36
ℹ ｢atl｣: Time: 174ms
```
It's been a while since this issue was detected and the PR was fired.
Just wanted to pay attention on this.

Using `resolveJsonModule` is not possible with ATL, because it does not track changes in imported *.json modules.

PR https://github.com/s-panferov/awesome-typescript-loader/pull/629
[pnpm](https://pnpm.js.org) is an alternative to npm that does not adhere to a flat node_modules structure. It instead organizes dependencies as a tree, only allowing files to require modules it explicitly depends on. This seems to cause an issue with awesome-typescript-loader. It fails to find the expected modules when looking at type declaration files. If I install the dependencies via npm, it succeeds. If I remove awesome-typescript-loader and build with webpack, treating the inputs as regular js, it succeeds.

I have created a repro repo https://github.com/andykais/pnpm-awesome-typescript-loader-error-repro/commit/1bebc0b662d1075d4f4a365ee78fed45b8f581df/checks#step:5:87

```
> pnpm-at-loader-fail@1.0.0 build /home/runner/work/pnpm-awesome-typescript-loader-error-repro/pnpm-awesome-typescript-loader-error-repro
> webpack --mode=development

ℹ ｢atl｣: Using typescript@3.5.3 from typescript
ℹ ｢atl｣: Using tsconfig.json from /home/runner/work/pnpm-awesome-typescript-loader-error-repro/pnpm-awesome-typescript-loader-error-repro/tsconfig.json
ℹ ｢atl｣: Checking started in a separate process...
 ✖ ｢atl｣: Checking finished with 6 errors
Hash: 83b60abbe2762d3916d5
Version: webpack 4.39.2
Time: 4887ms
Built at: 2019-08-21 15:04:02
        Asset      Size  Chunks             Chunk Names
    bundle.js  1.16 MiB    main  [emitted]  main
bundle.js.map   1.3 MiB    main  [emitted]  main
Entrypoint main = bundle.js bundle.js.map
[./node_modules/.registry.npmjs.org/webpack/4.39.2_webpack@4.39.2/node_modules/webpack/buildin/global.js] (webpack)/buildin/global.js 472 bytes {main} [built]
[./node_modules/.registry.npmjs.org/webpack/4.39.2_webpack@4.39.2/node_modules/webpack/buildin/harmony-module.js] (webpack)/buildin/harmony-module.js 573 bytes {main} [built]
[./src/index.ts] 121 bytes {main} [built]
    + 46 hidden modules

ERROR in [at-loader] ./node_modules/@types/react/index.d.ts:28:22 
    TS2307: Cannot find module 'csstype'.

ERROR in [at-loader] ./node_modules/@types/react/index.d.ts:29:28 
    TS2307: Cannot find module 'prop-types'.

ERROR in [at-loader] ./node_modules/redux/index.d.ts:149:11 
    TS2339: Property 'observable' does not exist on type 'SymbolConstructor'.

ERROR in [at-loader] ./node_modules/redux/index.d.ts:247:11 
    TS2339: Property 'observable' does not exist on type 'SymbolConstructor'.

ERROR in [at-loader] ./node_modules/redux/index.d.ts:1:23 
    TS2688: Cannot find type definition file for 'symbol-observable'.

ERROR in [at-loader] ./node_modules/@types/react-redux/index.d.ts:42:39 
    TS2307: Cannot find module 'hoist-non-react-statics'.
 ERROR  Command failed with exit code 2.
##[error]Process completed with exit code 1.
```
I'm running webpack with awesome-typescript-loader, and I get the error saying that Accessors are only available with es5. The thing is that in my tsconfig.json it already says target is es5. But somehow the loader doesn't pick it up.

My webpack config looks as following

```
const path = require("path");

module.exports = {
	entry: "./src/appbuilder/designer/app.ts",
	output: {
		path: path.resolve(__dirname, "dist"),
		filename: "appbuilder.js"
	},
	resolve: {
		extensions: [".ts", ".tsx", ".js", ".jsx"],
	},
	module: {
		rules: [
			{
				test: /\.tsx?$/,
				loader: "awesome-typescript-loader",
				options: {
					configFileName: path.resolve(__dirname, "appbuilder/tsconfig.json")
				}
			}
		]
	},
};


```

And my tsconfig.json looks like following
```
{
	"compileOnSave": true,
	"compilerOptions": {
		"declaration": true,
		"noImplicitAny": true,
		"noImplicitReturns": true,
		"preserveConstEnums": true,
		"sourceMap": true,
		"target": "es5"
	}
}

```

Is there some obvious errors in my configurations?
Hi,

npm install is breaking since the dependency types/chai 4.2.0 only compiles with typescript versions > 3.0.0

<img width="1046" alt="Screenshot 2019-08-12 at 13 35 21" src="https://user-images.githubusercontent.com/13946564/62862793-3437be80-bd07-11e9-86e0-e7a22deef5a0.png">

Would it be possible to update the typescript version in devDependencies to > 3.0.0?

Related chai PR -> https://github.com/DefinitelyTyped/DefinitelyTyped/pull/37451

Steps to reproduce:

1. Clone repo
2. cd into repo
3. npm i
This package requires an old version of 'micromatch' (3.1.10) that requires 'set-value' with old version (2.0.0) which has vulnerability issue.
Updating the package to require the latest version of micromatch will resolve the issue.

Thanks,
Michal.