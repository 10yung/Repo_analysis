Perhaps as part of the CI. Something like this (as suggested by @eastlondoner )

```
docker run -e 'NEO4JLABS_PLUGINS=[" apoc","graphql","graph-algorithms"]' neo4j:<NEO4J VERSION>  echo "success" 
```

> if it runs without error (exit code 0) all good. running that once a day in TC should not be tricky
Hi,

I'm trying to get `Map` to work as a parameter:

```
type MutationType {
    test(
        type_query: String!,
        id: ID!,
        weights: Map = {W: 10, X: 1}
    ): String
    @cypher(statement:"""
        RETURN $weights
    """)
}
```

I get the error: `java.lang.IllegalArgumentException: Unknown field type Map`

any advice?

Thanks
### Expected feature example:
```
type Query {
  getUserRankedCategories(userName: String!): Path
   @cypher(
      statement: "MATCH path=( (user:User{name: userName})-[rated:RATED]->(category:Category) ) RETURN path"
    )
}
```
with something like:
```
type Path {
  user: User
  category: Category
  rated: Rating
}
type User {
  name: String
}

type Category {
   name: String
}

type Rating @relation (name: "RATED") {
  from: User
  to: Category
  value: Int!
}
```
**but I get this error when I put a relationship type in another type like this:**
```
type Path {
  user: User
  category: Category
  rated: Rating
}
```

>     throw new Error("The '".concat(field.name.value, "' field on the '").concat(typeName, "' type uses the '").concat(relatedAstNode.name.value, "'\n    but '").concat(relatedAstNode.name.value, "' comes from '").concat(fromName, "' and goes to '").concat(toName, "'"));

> ReferenceError: field is not defined
>     at validateRelationTypeDirectedFields (/home/maieul/Desktop/dev/nexus-backend/api/node_modules/neo4j-graphql-js/dist/augment.js:863:36)
>     at handleRelationTypeDirective (/home/maieul/Desktop/dev/nexus-backend/api/node_modules/neo4j-graphql-js/dist/augment.js:961:75)
>     at handleRelationFields (/home/maieul/Desktop/dev/nexus-backend/api/node_modules/neo4j-graphql-js/dist/augment.js:915:23)
>     at /home/maieul/Desktop/dev/nexus-backend/api/node_modules/neo4j-graphql-js/dist/augment.js:177:17
>     at Array.forEach (<anonymous>)
>     at augmentTypeMap (/home/maieul/Desktop/dev/nexus-backend/api/node_modules/neo4j-graphql-js/dist/augment.js:165:37)
>     at makeAugmentedExecutableSchema (/home/maieul/Desktop/dev/nexus-backend/api/node_modules/neo4j-graphql-js/dist/augment.js:77:26)
>     at makeAugmentedSchema (/home/maieul/Desktop/dev/nexus-backend/api/node_modules/neo4j-graphql-js/dist/index.js:229:53)
>     at Object.<anonymous> (/home/maieul/Desktop/dev/nexus-backend/api/src/index.js:10:16)
>     at Module._compile (internal/modules/cjs/loader.js:778:30)
> 

I haven't found any way to return paths yet using the @cypher directive and even custom resolvers since we must specify a returned object in the typedefs.

I'm not very experienced with neo4j in general, but I feel that the power of neo4j and of graph databases in general, comes from the ability to create (merge, update, delete) and query a certain pattern/path, made of nodes and relationships consistently.

It seems like right now, I can get nodes on their own, relationships on their own, but not them linked together. So it takes many queries or different tricks to get the paths that I want which I fear might be hard to keep consistent when trying to use filter or Ordering and seems a lot less performant than being able to return a path directly.

I might be doing it wrong, but I haven't found any solution in the docs. Any solution right now is more than welcome. But if there are none, could it be added to the list of future features? I think it would be very useful and a greater developer experience.

P.S. I'll post what I've been able to achieve below, even if it doesn't work properly (or even at all) if it can help towards achieving this feature.
Currently, when creating a relationship with properties using the syntax below, It is only possible to "add" the relationship or to "remove" it through auto-generated mutations. I think it would be nice to be able to MERGE and UPDATE these kinds of relationships with properties through auto-generated queries.

```
type Rating @relation (name: "RATED") {
  from: User
  to: Category
  value: Int!
}
```
It seems to me that currently auto-generated update mutations can update nodes in the neo4j database only by retrieving the first item set in the schema.

Here is an example of my schema: 
type Business {
  id: ID!
  name: String
  address: String
  city: String
  state: String
  reviews: [Review] @relation(name: "REVIEWS", direction: "IN")
  categories: [BusinessCategory] @relation(name: "IN_CATEGORY", direction: "OUT")
}

and how the mutation works:
![UpdateBusiness](https://user-images.githubusercontent.com/45822175/64861134-7c603e80-d62f-11e9-91e8-fca2d0312af4.png)

So here the update would be possible only by providing an id. But what if I don't have access to the id in my application? 

Currently I have to create a custom resolver to solve the issue. Wouldn't it be nice if we could run updates according to filters and not only to the first property in the type definition?
Is there a way to disable auto-generated query types and auto-generated mutations?
I created a read-only user on Neo4j. It could read data but not write data in Neo4j browser, it couldn't run "call graphql.idl..." either. However, I could use this user in a GraphQL client (like Insomnia) then do a POST to "/graphql/idl/" with schema payload, and successfully updated schema on the server! It's very serious issue, please fix this ASAP thanks!
I would like to keep some information as property on relations, is it possible without using custom cypher queries, or is it in the roadmap and how far?
We are seeing some strange behavior with null fields and fragments.

Here is an example:
```graphql
fragment ChildPackage on Package {
  qid # non-null field
  name
  address {
    qid
  }
}
```

And this is the query:
```graphql
query Recipient {
	qid
	name
	packages {
		...ChildPackage 
		packages {
			...ChildPackage    
			packages {
				...ChildPackage    
				}
			}
		}
	}
}
```

In this particular example, we expect to get two items in the top level `packages` response, and then the follow up `packages` to be empty. However, what we get are in the top level `packages` is an array with two null values in it. However, when we expand fragment into the query like this:
```graphql
query Recipient {
	qid
	name
	packages {
		qid # non-null field
		name
		address {
			qid
		}
		packages {
			...ChildPackage    
			packages {
				...ChildPackage    
				}
			}
		}
	}
}
```

Then we get the expected response, two `Package` entities with empty `packages` arrays returned in them.

Why is the response between a fragment and it's exact same fields different? Also, the double null response seems incorrect, maybe it is related to the null expansion issue in #80 

Any thoughts?
Schemas with typed `@relation` queries are not parsed properly when published to the Neo4j graphql endpoint using CALL graphql.idl(). 

Given a graphql schema: 
```
schema {
   query: Query
}

type Person {
  name: String!
  born: Int
  movies: [ActedIn]
}

type Movie  {
  title: String!
  released: Int
  tagline: String
  actors: [ActedIn]
}

type ActedIn @relation(name: "ACTED_IN") {
  from: Person
  to: Movie
  roles: [String!]
}

type Query {

  movieByTitle(searchTerm: String): [Movie]!
    @cypher(statement:"MATCH (n:Movie) WHERE n.title CONTAINS $searchTerm RETURN n")

}
```
and a graphql query:

```
query SearchMovies {
  movieByTitle(searchTerm: "Polar Express") {
    title
    actors { 
      Person {name} 
      roles
    }
  }
}
```
When the schema is published via neo4j-graphql-js (eg grand-stack-starter) we get the expected result - returning relationship properties (roles)
```
{
  "data": {
    "movieByTitle": [
      {
        "title": "The Polar Express",
        "actors": [
          {
            "Person": {
              "name": "Tom Hanks"
            },
            "roles": [
              "Hero Boy",
              "Father",
              "Conductor",
              "Hobo",
              "Scrooge",
              "Santa Claus"
            ]
          }
        ]
      }
    ]
  }
}
```
when the schema is published via the plugin using `CALL graphql.idl('<schema>')` the query fails:

```
{
  "data": null,
  "errors": [
    {
      "message": "Validation error of type FieldUndefined: Field 'Person' in type 'ActedIn' is undefined @ 'movieByTitle/actors/Person'",
      "locations": [
        {
          "line": 6,
          "column": 7,
          "sourceName": null
        }
      ],
      "description": "Field 'Person' in type 'ActedIn' is undefined",
      "validationErrorType": "FieldUndefined",
      "queryPath": [
        "movieByTitle",
        "actors",
        "Person"
      ],
      "errorType": "ValidationError",
      "path": null,
      "extensions": null
    }
  ]
}
```
modifying the query to:

```
query SearchMovies {
  movieByTitle(searchTerm: "Polar Express") {
    title
    actors { 
      from {name} 
      roles
    }
  }
}
```
passes validation, but returns a null array for the `@relation` type and its properties

```
{
  "data": {
    "movieByTitle": [
      {
        "title": "The Polar Express",
        "actors": []
      }
    ]
  }
}
```


