When I try to upgrade java-jwt from 3.2.0 to the version after 3.3.0. The following code breaks.
```
public class TestJavajwt {
	
    private static final long EXPIRE_TIME = 7*12*3600*1000;
	
    public static String sign(String uid,String username, String secret) {
        try {
            Date date = new Date(System.currentTimeMillis()+EXPIRE_TIME);
            Algorithm algorithm = Algorithm.HMAC256(secret);
            
            return JWT.create()
                    .withClaim("uid", uid)
                    .withClaim("username", username)
                    .withExpiresAt(date)
                    .sign(algorithm);
        } catch (UnsupportedEncodingException e) {
            return null;
        }
    }
}
```
The code should pass, but it throws an error:
```
TestJavajwt.java:[23,11] exception java.io.UnsupportedEncodingException is never thrown in body of corresponding try statement
```


### Description

One would think the best solution to your extremely long processing time for issues and pull-request is to divert some man-hours to reviewing pull-requests, instead of nuking by stalebot? So wrong.

### Reproduction
Add a PR, wait patiently for more than a year, see PR closed by bot ('you were too slow to react').


### Description

I am trying to follow the example in README.md:

```
//HMAC
Algorithm algorithmHS = Algorithm.HMAC256("secret");

//RSA
RSAPublicKey publicKey = //Get the key instance
RSAPrivateKey privateKey = //Get the key instance
Algorithm algorithmRS = Algorithm.RSA256(publicKey, privateKey);
```

However getting the key instances is not that simple. After a lot of digging I managed to load at least the private key as follows:

1. I followed https://stackoverflow.com/questions/44474516/how-to-create-public-and-private-key-with-openssl to generate public and private key.
2. I converted private key to the DER form `openssl pkcs8 -topk8 -inform PEM -outform DER -in private_key.pem -out pkcs8.der -nocrypt`
3. Now I am able to load the private key as:

```
val privateKey = readKeyAsBytes("pkcs8.der")
        .run { PKCS8EncodedKeySpec(this) }
        .run { KeyFactory.getInstance("RSA").generatePrivate(this) }
        as RSAPrivateKey
```

4. However this doesn't work for generating the public key:

```
val publicKey = readKeyAsBytes("publickey.crt")
        .run { X509EncodedKeySpec(this) }
        .run { KeyFactory.getInstance("RSA").generatePublic(this) }
        as RSAPublicKey
```

as it fails with InvalidKeyException: invalid key format. I am not sure whether .getInstnace(RSA) is correct here, but I couldn't make it work with anything else either. I guess the public key is not in the X509 format, but I cannot seem to manage to convert it to it.

It would be great to provide some better example to start with this.

### Prerequisites

(note this is not a bug)

- [x] I have checked the documentation for this library in the README.
- [x] I have checked the [Auth0 Community](https://community.auth0.com/) for related posts.
- [x] I have checked for related or duplicate [Issues](https://github.com/auth0/java-jwt/issues) and [PRs](https://github.com/auth0/java-jwt/pulls).
- [x] I have read the [Auth0 general contribution guidelines](https://github.com/auth0/open-source-template/blob/master/GENERAL-CONTRIBUTING.md).
- [x] I have read the [Auth0 Code of Conduct](https://github.com/auth0/open-source-template/blob/master/CODE-OF-CONDUCT.md).
- [x] I am reporting this to the correct repository (note this library is used by many libraries, such as [auth0-java](https://github.com/auth0/auth0-java)).

### Environment

Please provide the following:

- Version of this library used: 3.9.0
- Version of Java framework used: Java 11
- Additional libraries that might be affecting your instance: -

### Reproduction

(not a bug)
**Please do not report security vulnerabilities here**. The [Responsible Disclosure Program](https://auth0.com/whitehat) details the procedure for disclosing security issues.

**Thank you in advance for helping us to improve this library!** Your attention to detail here is greatly appreciated and will help us respond as quickly as possible. For general support or usage questions, use the [Auth0 Community](https://community.auth0.com/) or [Auth0 Support](https://support.auth0.com/). Finally, to avoid duplicates, please search existing Issues before submitting one here.

By submitting an Issue to this repository, you agree to the terms within the [Auth0 Code of Conduct](https://github.com/auth0/open-source-template/blob/master/CODE-OF-CONDUCT.md).

### Describe the problem you'd like to have solved

To make the library useful need to add custom Map claim when creating a new token.

> A clear and concise description of what the problem is. Ex. I'm always frustrated when [...]

### Describe the ideal solution

The method should be like ".withMapClaim("map", map)":

String token = JWT.create()
        .withMapClaim("map", map)
        .sign(algorithm);


> A clear and concise description of what you want to happen.

Need to be able to add ad-hoc JSON map structure as claim

## Alternatives and current work-arounds

Current work-around to use JJWT or possibly hack into the JWT internals with reflection

> A clear and concise description of any alternatives you've considered or any work-arounds that are currently in place.

### Additional context

> Add any other context or screenshots about the feature request here.

The Header Claim (type) should not be hardcoded with the value "JWT".  We would like to use this library to stir/shaken authentication.

https://tools.ietf.org/html/rfc8225#page-6
https://tools.ietf.org/html/rfc7515#section-4.1.9


Suggestion:

Class (JWTCreator) - Method (sign) : Verify the header claims contains the key (value = typ), if it does not exist, create one entry with value "JWT".
### Changes

Add a manifest entry for automatic module name as a small improvement for use with modules and JDK9+. Or better yet, use a plugin to create a release compatible with both 8 and 9+, for example a multi-release jar.

### References

http://branchandbound.net/blog/java/2017/12/automatic-module-name/

### Testing

- [ ] This change adds test coverage
- [x] This change has been tested on the latest version of Java or why not

Manually inspected resulting jar.

### Checklist

- [x] I have read the [Auth0 general contribution guidelines](https://github.com/auth0/open-source-template/blob/master/GENERAL-CONTRIBUTING.md)
- [x] I have read the [Auth0 Code of Conduct](https://github.com/auth0/open-source-template/blob/master/CODE-OF-CONDUCT.md)
- [x] All existing and new tests complete without errors

<!--

**Please do not report security vulnerabilities here**. The [Responsible Disclosure Program](https://auth0.com/whitehat) details the procedure for disclosing security issues.

**Thank you in advance for helping us to improve this library!** Your attention to detail here is greatly appreciated and will help us respond as quickly as possible. For general support or usage questions, use the [Auth0 Community](https://community.auth0.com/) or [Auth0 Support](https://support.auth0.com/). Finally, to avoid duplicates, please search existing Issues before submitting one here.

By submitting an Issue to this repository, you agree to the terms within the [Auth0 Code of Conduct](https://github.com/auth0/open-source-template/blob/master/CODE-OF-CONDUCT.md).

-->

### Describe the problem you'd like to have solved

I'd like to be able to verify that certain claims are present on a JWT, but I don't want have to limit its value.

### Describe the ideal solution

A `Verification` method along the lines of `withClaim(String name)` which simply ensures the claim is present. Additionally `withClaim(String name, Type type)` which validates the claim is present and assignable to `type` would be nice.

## Alternatives and current work-arounds

I don't have any work around currently, especially since the implementing class is `final`. Alternative _names_ for the proposed method could be `hasClaim`, `isPresent`, `requireClaim`, etc, might make it clearer that the method is different to the other `withClaim`s. Not sure if this is preferred vs sticking with a consistent name.

<!--

**Please do not report security vulnerabilities here**. The [Responsible Disclosure Program](https://auth0.com/whitehat) details the procedure for disclosing security issues.

**Thank you in advance for helping us to improve this library!** Please read through the template below and answer all relevant questions. Your additional work here is greatly appreciated and will help us respond as quickly as possible. For general support or usage questions, use the [Auth0 Community](https://community.auth0.com/) or [Auth0 Support](https://support.auth0.com/). Finally, to avoid duplicates, please search existing Issues before submitting one here.

By submitting an Issue to this repository, you agree to the terms within the [Auth0 Code of Conduct](https://github.com/auth0/open-source-template/blob/master/CODE-OF-CONDUCT.md).

-->

### Description

When using Intellij's view javadoc feature on a `Verification` method such as `withIssuer`, no javadoc is found.

![image](https://user-images.githubusercontent.com/23565638/66859278-e51a3e00-ef82-11e9-9fc1-319ca5edb3f4.png)

### Proposed solution

Move or copy the relevant javadocs from the `JWTVerifier` class to the interface. Possibly add small javadocs on the class [linking or referring](https://stackoverflow.com/questions/10097199/javadoc-see-or-link) to the new interface javadoc.

### Reproduction

Given the following, click on `withIssuer` or `acceptLeeway` and press `Ctrl+Q`

```java
JWT.require(algorithm)
    .withIssuer(Version.API_URL)
    .acceptLeeway(120)
    .build();
```

### Environment

> Please provide the following:

- **Version of this library used:** 3.8.3
- **Version of the platform or framework used, if applicable:** Java 8
- **Other relevant versions (IDE):** Intellij IDEA Ultimate 2019.2
- **Other modules/plugins/libraries that might be involved:** N/A


JWTVerifer added isValid method. Reason for the addition
1) it shows false exception for instrumented tools like Dynatrace
2) Functional programming without exception

### References

Please include relevant links supporting this change such as a:
#354 https://github.com/auth0/java-jwt/issues/354

### Testing

Junit tests have been added. Test coverage has been verified.
- [X] This change adds test coverage
- [X] This change has been tested on the latest version of Java or why not

### Checklist

- [X] I have read the [Auth0 general contribution guidelines](https://github.com/auth0/open-source-template/blob/master/GENERAL-CONTRIBUTING.md)
- [X] I have read the [Auth0 Code of Conduct](https://github.com/auth0/open-source-template/blob/master/CODE-OF-CONDUCT.md)
- [X] All existing and new tests complete without errors

### Description
Currently, we use the following code to decrypt, but as we are supporting multiple data, if we cannot decrypt, we send the original value back.

```
        try {
            DecodedJWT decodedJWT = JWT.require(algorithm)
                .build()
                .verify(sid);
            return decodedJWT.getClaim(OLD_STYLE_SID).asString();
        } catch (Exception e) {
            LOGGER.info("Could not extract the SID, assuming old-style SID is being sent, returning the same.");
            return sid;
        }
```
This works fine, but we are seeing JWTDecodeException in Dynatrace, as Dynatrace instrumentation captures this exception and reports, which is creating noise. 

The ask if a convenience method (isValid) can be provided which will check the validity of the incoming string without throwing an exception.

I can work on this issue but need to ensure that it follows design guidelines.

### Prerequisites

- [x] I have checked the documentation for this library in the README.
- [x] I have checked the [Auth0 Community](https://community.auth0.com/) for related posts.
- [x] I have checked for related or duplicate [Issues](https://github.com/auth0/java-jwt/issues) and [PRs](https://github.com/auth0/java-jwt/pulls).
- [x] I have read the [Auth0 general contribution guidelines](https://github.com/auth0/open-source-template/blob/master/GENERAL-CONTRIBUTING.md).
- [x] I have read the [Auth0 Code of Conduct](https://github.com/auth0/open-source-template/blob/master/CODE-OF-CONDUCT.md).
- [x] I am reporting this to the correct repository (note this library is used by many libraries, such as [auth0-java](https://github.com/auth0/auth0-java)).

### Environment

Please provide the following:

- Version of this library used: 3.8.1
- Version of Java framework used: 1.8
- Additional libraries that might be affecting your instance: None

### Reproduction
See above for code sample
