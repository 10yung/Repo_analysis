Hi,

Not able to build pencil project on Mac OS X. Got this Error.

error: failed to run custom build command for `openssl v0.7.14`
process didn't exit successfully: `/private/tmp/p1/target/debug/build/openssl-acc287ae94d4e2d3/build-script-build` (exit code: 101)
--- stdout
TARGET = Some("x86_64-apple-darwin")
OPT_LEVEL = Some("0")
TARGET = Some("x86_64-apple-darwin")
HOST = Some("x86_64-apple-darwin")
TARGET = Some("x86_64-apple-darwin")
TARGET = Some("x86_64-apple-darwin")
HOST = Some("x86_64-apple-darwin")
CC_x86_64-apple-darwin = None
CC_x86_64_apple_darwin = None
HOST_CC = None
CC = None
HOST = Some("x86_64-apple-darwin")
TARGET = Some("x86_64-apple-darwin")
HOST = Some("x86_64-apple-darwin")
CFLAGS_x86_64-apple-darwin = None
CFLAGS_x86_64_apple_darwin = None
HOST_CFLAGS = None
CFLAGS = None
DEBUG = Some("true")
running: "cc" "-O0" "-ffunction-sections" "-fdata-sections" "-fPIC" "-g" "-m64" "-Wall" "-Wextra" "-o" "/private/tmp/p1/target/debug/build/openssl-8eb0017b41a0b327/out/src/c_helpers.o" "-c" "src/c_helpers.c"
cargo:warning=src/c_helpers.c:1:10: fatal error: 'openssl/ssl.h' file not found
cargo:warning=#include <openssl/ssl.h>
cargo:warning=         ^
cargo:warning=1 error generated.
exit code: 1

--- stderr
thread 'main' panicked at '

Internal error occurred: Command "cc" "-O0" "-ffunction-sections" "-fdata-sections" "-fPIC" "-g" "-m64" "-Wall" "-Wextra" "-o" "/private/tmp/p1/target/debug/build/openssl-8eb0017b41a0b327/out/src/c_helpers.o" "-c" "src/c_helpers.c" with args "cc" did not execute successfully (status code exit code: 1).
How can we use postgres?
I've updated dependencies, notably `hyper`. The `ssl` feature flag has been removed from `hyper 0.10` and I am unable to fully test, but things seems to be working for me. 
GitHub changed the way Markdown headings are parsed, so this change fixes it.

See [bryant1410/readmesfix](https://github.com/bryant1410/readmesfix) for more information.

Tackles bryant1410/readmesfix#1

Hi,

I've been using Pencil for the last few months, and I've built a web app that has now entering production stage. As I've been building my app, I've maintained a fork of Pencil, which has allowed me to quickly add features that I've needed. (The fork can be found here: https://github.com/golddranks/pencil/commits/master )

These changes include but are not limited to:
* Specifying the number of threads used (important in production even when using a reverse proxy, since connections to the DB might block, and I was surprised that Hyper spawned only one thread on a single-core server)
* Serving partial files in response to the Range header (I'm serving partly dynamic content so just offloading this to Nginx or to some CDN was not feasible)
* Rough support for serving HTTP 304 Not Modified and specifying cache expiry time when serving files
* Updating dependencies, supporting Hyper 0.10 which got rid of the dependency on old SSL versions
* Debug trait implementations for some structures
* After-request handlers getting a reference not only to the Response but to the Request too (this is handy if you use the TypeMap in Request to pass data from pre-request to post-request handler)
* Implemented routing by GET parameters

I also made some changes that may prove controversial:
* Implementing some methods for the dictionaries for getting ownership of the parsed arguments etc. I'd prefer if arguments, fields etc. were parsed in a non-copy way. This way you couldn't the take the ownership, but if you needed it, you could clone. At the moment the data is copied once when parsing, and second time when accessing. Taking ownership prevents the second copy, but it would obviously be better (but requires more work) if the data was copied when a copy is really needed.
* Exposed some private fields. Accessing fields through accessors is often painful in Rust, especially if mutable access is needed, since accessing one field locks the rest. Direct access to fields is more flexible. (Again, if the request was more immutable and parsed zero-copy, the fields should accessed only with shared references, and exposing the fields only with accessors would be sensible.)

I haven't really looked into how much work implementing more zero-copy parsing would be. Yet.


I'd like to contribute these changes back to Pencil, and help releasing Pencil 0.4. However, as the changes are just stop-gap solutions to my problems, I need to brush them up a bit if I were to contribute them. However, I want to have a confirmation from the maintainer @fengsp if he is willing to merge the PRs if I were to contribute stuff, since I don't want to do needless work :D What do you think?
Cargo allows you to run examples like this,
`cargo run --example http`
and would be a better option then using a separate project.
Now you can view the docs here,
https://docs.rs/pencil/0.3.0/pencil/
The AfterRequestFunc type signature  is now `fn(&Request, &mut Response)`. This change allows information from the request to be used in typical post-request tasks such as logging in a standard format or reporting request timings. Specifically I needed to log in the Apache common log format, which includes request info, the response status code, and the size of the response body in bytes.
Hi,

I am having issues with where to place static files. when I cargo run, I am getting an error 

thread 'main' panicked at 'Template not found: hello.html', /home/fullmetakdeku/.cargo/registry/src/github.com-1ecc6299db9ec823/pencil-0.3.0/src/app.rs:547

The directory structure is - 
Cargo.lock  Cargo.toml  src  static  target  template

fn main(){
  let mut app = Pencil::new("/workspace/web/pencil-demo");
}

I know it might be trivial, I'd appreciate any help. I have no experience with Flask.

Hi, I'm trying to define a RESTful API, and defined a route like this:
`app.put("/api/words/<id:int>?publish", "set_publish_words", set_publish);`
However, it seems that having query parameters like "?publish" is not supported.

In my opinion, they should EITHER 1) be supported (this would be nice) 2) or the call should fail, to signal that they, in fact, aren't supported.