Hello,
I need to store the IP address in requests but unfortunately, I couldn't.
Please guide me to do this.
Regards,
- Telescope Version: 2.1.3
- Laravel Version: 6.5.2
- PHP Version: 7.2
- Database Driver & Version: MySQL 5.7

### Description:
We're running our application Google App Engine and I'd like to use Telescope in our development environment. One challenge with App Engine is that, because it's a "serverless" solution, there's no way to run anything from a console. The simple reason is that you don't have any kind of dedicated server that's yours â€” servers spin up and down as needed. As such, migrations (and other console commands) run accomplished by setting up an endpoint that fires the command, such as `/artisan/migrate`.

This leads me to my problem. When Telescope determines whether or not to include the migrations it checks `$this->app->runningInConsole()`. Hmm. In our case it's _not_ running the console and never will be. This becomes a blocker in running the Telescope migrations. A workaround could be to use the `APP_RUNNING_IN_CONSOLE` env variable, but I'm reluctant to use that as the application really isn't running in the console.

I'm happy to make a PR for this. Could we add a `TELESCOPE_INCLUDE_MIGRATIONS` env variable to forego the console check? Or perhaps add a `telescope:migrate` console command to explicitly run the migrations?

Open to ideas!

### Steps To Reproduce:
1. Create an endpoint that runs `php artisan migrate:fresh` and echos the command output
2. Manually hit the endpoint
3. Notice the Telescope migrations are not included
- Telescope Version: 2.1.2
- Laravel Version: 6.10.1
- PHP Version: 7.2.10

### Description:
The date format of the value for the field `created_at` of the table `telescope_entries` doesn't match what is specified in the query grammar when inserting new rows.

In telescope the async requests will fail with a 500 error due to the mismatch (ex: `/telescope/telescope-api/requests?tag=&before=&take=50&family_hash=` or `/telescope/telescope-api/exceptions?tag=&before=&take=50&family_hash=`):

```
[2020-01-09 12:49:36] local.ERROR: Trailing data {"userId":1,"exception":"[object] (InvalidArgumentException(code: 0): Trailing data at /vagrant/www/vhosts/hermes.rifraf.it/vendor/nesbot/carbon/src/Carbon/Traits/Creator.php:576)
[stacktrace]
#0 /vagrant/www/vhosts/hermes.rifraf.it/vendor/nesbot/carbon/src/Carbon/Traits/Creator.php(598): Carbon\\Carbon::rawCreateFromFormat('U', '2020-01-09 12:4...', NULL)
#1 /vagrant/www/vhosts/hermes.rifraf.it/vendor/laravel/framework/src/Illuminate/Support/DateFactory.php(217): Carbon\\Carbon::createFromFormat('U', '2020-01-09 12:4...')
#2 /vagrant/www/vhosts/hermes.rifraf.it/vendor/laravel/framework/src/Illuminate/Support/Facades/Facade.php(261): Illuminate\\Support\\DateFactory->__call('createFromForma...', Array)
#3 /vagrant/www/vhosts/hermes.rifraf.it/vendor/laravel/framework/src/Illuminate/Database/Eloquent/Concerns/HasAttributes.php(813): Illuminate\\Support\\Facades\\Facade::__callStatic('createFromForma...', Array)
#4 /vagrant/www/vhosts/hermes.rifraf.it/vendor/laravel/framework/src/Illuminate/Database/Eloquent/Concerns/HasAttributes.php(365): Illuminate\\Database\\Eloquent\\Model->asDateTime('2020-01-09 12:4...')
#5 /vagrant/www/vhosts/hermes.rifraf.it/vendor/laravel/framework/src/Illuminate/Database/Eloquent/Concerns/HasAttributes.php(323): Illuminate\\Database\\Eloquent\\Model->getAttributeValue('created_at')
#6 /vagrant/www/vhosts/hermes.rifraf.it/vendor/laravel/framework/src/Illuminate/Database/Eloquent/Model.php(1523): Illuminate\\Database\\Eloquent\\Model->getAttribute('created_at')
#7 /vagrant/www/vhosts/hermes.rifraf.it/vendor/laravel/telescope/src/Storage/DatabaseEntriesRepository.php(105): Illuminate\\Database\\Eloquent\\Model->__get('created_at')
...
```

Of course I've also tried changing the table field type but in that case the insert will fail.

### Steps To Reproduce:

In my case I've extended the MySqlGrammar this way:

```php
namespace App\Database\Query\Grammars;

class MySqlGrammar extends \Illuminate\Database\Query\Grammars\MySqlGrammar
{
    public function getDateFormat()
    {
        return 'U';
    }
}
```

and registered it in the AppServiceProvider:

```php
class AppServiceProvider extends ServiceProvider
{
    /**
     * Bootstrap any application services.
     *
     * @return void
     */
    public function boot()
    {
        DB::connection()->setQueryGrammar(new \App\Database\Query\Grammars\MySqlGrammar);
    }
```

As a temporary solution I've wrapped the setQueryGrammar in a condition:
```php
        if (Telescope::isRecording()) {
            DB::connection()->setQueryGrammar(new \App\Database\Query\Grammars\MySqlGrammar);
        }
```

- Telescope Version: 2.1.3
- Laravel Version: 6.9.0
- PHP Version: 7.3.11

### Description:

After installing Telescope, test runner on Heroku started giving me this error:

```
PHP Fatal error:  Allowed memory size of 134217728 bytes exhausted (tried to allocate 8192 bytes) in /app/vendor/laravel/telescope/src/Watchers/FetchesStackTrace.php on line 16
```

during the test-setup script that seeds the database (the seeder isn't that heavy, but it does a couple of things :D it surely doesn't exceed memory limit on my local, even when setting memory limit to 64M).

When investigating the issue on Heroku I tried adding

```
<env name="TELESCOPE_ENABLED" value="false"/>
```

to my `phpunit.xml`, but it didn't have any effect. Only preventing discovery via `composer.json`:

```
"extra": {
        "laravel": {
            "dont-discover": [
                "laravel/telescope"
            ]
        }
    },
```

and adding:

```
        if (!$this->app->runningUnitTests()) {
            $this->app->register(\Laravel\Telescope\TelescopeServiceProvider::class);
            $this->app->register(TelescopeServiceProvider::class);
        }
```

to my `AppServiceProvider::register` did the trick.

While I'm fine with preventing package discovery, I'd think that setting TELESCOPE_ENABLED flag should be enough to prevent Telescope.

---

As far as I'm aware of, installing Telescope, creating a seeder that is resource heavy and running it on Heroku test runner is enough to replicate the issue, however I'm unable to replicate it at this moment. 
- Telescope Version: 2.1.3
- Laravel Version: 6.9.0
- PHP Version: 7.4.1
- Database Driver & Version:

### Description:
if getCallerFromStackTrace doesn't return an array, QueryWatcher.php at line 46 will throw an exception : 

ErrorException: Trying to access array offset on value of type null

https://www.php.net/manual/en/migration74.incompatible.php#migration74.incompatible.core.non-array-access

### Steps To Reproduce:

Any scenario in which getCallerFromStackTrace can't find a caller. In my case I ran a test contained in a vendor component that had to write to a test database.
I see that debug bar has a nice future, hydrated models, witch count how many eloquent models are build in memory. It is very important for performance measure. I think it would be a nice future in telescope, and help a lot of people to debug memory usage and build faster apps.
It would be nice to add `startDate` and `endDate` to query options and filter them against `created_at`.

examples:


![image](https://user-images.githubusercontent.com/46111162/71326134-8c0be080-24c4-11ea-9412-b4402e58abf6.png)
---
![image](https://user-images.githubusercontent.com/46111162/71325958-4b12cc80-24c2-11ea-8097-ba03446d1b1c.png)
---
![image](https://user-images.githubusercontent.com/46111162/71325942-14d54d00-24c2-11ea-88e6-ef8e1a0c5919.png)

- Telescope Version: 2.1
- Laravel Version: 6.6.0
- PHP Version: 7.3.4

### Description:
There are cases where you have models that only implement the Authorizable contract and not also the Authenticable contract. If you need a pivot model to scope permissions to a group for example, you might only want authorization capabilities and nothing more. The GateWatcher is not able to record these cases and there will be an exception.
I think it makes more sense to require an Authorizable there.

### Steps To Reproduce:
Create a regular model, apply
```php
use Illuminate\Contracts\Auth\Access\Authorizable as AuthorizableContract;
use Illuminate\Foundation\Auth\Access\Authorizable;
```

and finally try to use the ```can``` method on an instance of that model with the GateWatcher enabled.

What are your thoughts on this?
- Telescope Version: v2.1
- Laravel Version: 6.6.0
- PHP Version: 7.4.0
- Database Driver & Version: irrelevant

### Description:
When using a queued listener, it is impossible to have typed properties declared in that listener's class.
```php
class SomeListener implements ShouldQueue
{
    use InteractsWithQueue;

    /**
     * @var SubscriptionService
     */
    private SubscriptionService $subscriptionService;

    /**
     * @param SubscriptionService $subscriptionService
     */
    public function __construct(SubscriptionService $subscriptionService)
    {
        $this->subscriptionService = $subscriptionService;
    }

    public function handle(...)
    {
    }
}
```
When Telescope is enabled code above will produce an error:
```
Typed property App\Listeners\SomeListener::$subscriptionService must not be accessed before initialization
```

### Steps To Reproduce:
Create any queued listener and enable Telescope.


Issue is caused by `ExtractTags::modelsFor()` method:
```php
    protected static function modelsFor(array $targets)
    {
        $models = [];

        foreach ($targets as $target) {
            $models[] = collect((new ReflectionClass($target))->getProperties())->map(function ($property) use ($target) {
                $property->setAccessible(true);

                $value = $property->getValue($target); // <-- This throws error

                if ($value instanceof Model) {
                    return [$value];
                } elseif ($value instanceof EloquentCollection) {
                    return $value->flatten();
                }
            })->collapse()->filter()->all();
        }

        return collect(Arr::collapse($models))->unique();
    }
```
There are possible workarounds:
* do not use typed properties
* always initiate typed property (defacto allow nullable values and set null as default).

IMHO developer should not be forced to either not use typed properties or allow null values in properties. 

I've got very simple fix for that, but not sure if that is sufficient (probably not). Simply, there should be check if a property has been initialized before it can be accessed (https://wiki.php.net/rfc/typed_properties_v2#reflection):
```php
    protected static function modelsFor(array $targets)
    {
        $models = [];

        foreach ($targets as $target) {
            $models[] = collect((new ReflectionClass($target))->getProperties())->map(function ($property) use ($target) {
                $property->setAccessible(true);

                // Check if property is initialized (for PHP >= 7.4.0)
                if (PHP_VERSION_ID >= 70400 && is_object($target) && !$property->isInitialized($target)) {
                    return ;
                }

                $value = $property->getValue($target);

                if ($value instanceof Model) {
                    return [$value];
                } elseif ($value instanceof EloquentCollection) {
                    return $value->flatten();
                }
            })->collapse()->filter()->all();
        }

        return collect(Arr::collapse($models))->unique();
    }
```
If proposed solution is acceptable, I can create MR for that.
It would be nice to add a configuration entry to disable gravatar, if it doesn't already exists (I didn't see it in the docs)

Possible use-cases and concerns:

- Offline servers
- Privacy (I don't use Gravatar at all, so I don't want my email address to be sent to them with everything that implies in terms of security and privacy)

Another possibility would be to allow customising avatar's URL, so we can use third-party/self-hosted avatar-hosting services.