`chewy-5.1.0/lib/chewy/type/import.rb:88:in `import!'` seems send array

```
Index errors:
      `{"type"=>"mapper_parsing_exception", "reason"=>"failed to parse field [coordinates] of type [geo_point]", "caused_by"=>{"type"=>"illegal_argument_exception", "reason"=>"il
legal latitude value [100.555999] for coordinates"}}`
        on 1 documents: ["363"]
      `{"type"=>"mapper_parsing_exception", "reason"=>"failed to parse field [coordinates] of type [geo_point]", "caused_by"=>{"type"=>"parse_exception", "reason"=>"latitude must
 be a number"}}`
        on 1 documents: ["526"]
      `{"type"=>"mapper_parsing_exception", "reason"=>"failed to parse field [coordinates] of type [geo_point]", "caused_by"=>{"type"=>"illegal_argument_exception", "reason"=>"il
legal latitude value [100.0] for coordinates"}}`
        on 1 documents: ["610"]
```

my Index code

![image](https://user-images.githubusercontent.com/1275215/72609596-f2671000-3957-11ea-923f-1f7f5f22165d.png)


What is the best way to catch an exception (eq Chewy::ImportFailed) on `update_index 'some_index'` ?
Hey folks. Unsure what's going awry here, so please let me know what else we can provide.

We're using Chewy 5.1.0 with Rails 5.2 and Ruby 2.5.7. For some reason, neither of the documented approaches for configuration (`config/chewy.yml` or an initializer with `Chewy.settings = {...}`) are working.

Specifically, we're trying to set `request_strategy` to `:bypass` in development using either of the documented approaches:

```yml
# config/chewy.yml
development:
  host: 'localhost'
  request_strategy: :bypass
  request_timeout: 300
```

```ruby
# config/initializers/chewy.rb
Chewy.settings = { request_strategy: :bypass }
```

But **neither one works** and it remains `:atomic`:

```
$ rails c
Chewy console strategy is `urgent`
Loading development environment (Rails 5.2.4.1)
irb(main):001:0> Chewy.request_strategy
=> :atomic
```

The only way we can get this to stick is with an initializer that assigns `Chewy.request_strategy` directly:

```ruby
# config/initializers/chewy.rb
Chewy.request_strategy = :bypass
```

Which then creates the expected result:
```
$ rails c
Chewy console strategy is `urgent`
Loading development environment (Rails 5.2.4.1)
irb(main):001:0> Chewy.request_strategy
=> :bypass
```

(And yes, I confirmed the Rails env is `development`.)

I'm assuming most people don't have trouble with config, or this would be a bigger deal. So any ideas for how we can figure out what's going on?

🙏
Hello,

I seem to have a problem with building on 2.7 over 2.6

```
/home/circleci/projects/mastodon/vendor/bundle/ruby/2.7.0/gems/chewy-5.1.0/lib/chewy.rb:135: warning: Using the last argument as keyword parameters is deprecated; maybe ** should be added to the call
/home/circleci/projects/mastodon/vendor/bundle/ruby/2.7.0/gems/chewy-5.1.0/lib/chewy/type/adapter/object.rb:29: warning: The called method `initialize' is defined here
/home/circleci/projects/mastodon/vendor/bundle/ruby/2.7.0/gems/chewy-5.1.0/lib/chewy/type/mapping.rb:131: warning: Using the last argument as keyword parameters is deprecated; maybe ** should be added to the call
/home/circleci/projects/mastodon/vendor/bundle/ruby/2.7.0/gems/chewy-5.1.0/lib/chewy/fields/base.rb:7: warning: The called method `initialize' is defined here
/home/circleci/projects/mastodon/vendor/bundle/ruby/2.7.0/gems/chewy-5.1.0/lib/chewy/fields/base.rb:10: warning: Using the last argument as keyword parameters is deprecated; maybe ** should be added to the call
/home/circleci/projects/mastodon/vendor/bundle/ruby/2.7.0/gems/chewy-5.1.0/lib/chewy/fields/base.rb:15: warning: The called method `update_options!' is defined here
/home/circleci/projects/mastodon/vendor/bundle/ruby/2.7.0/gems/chewy-5.1.0/lib/chewy/fields/root.rb:10: warning: Using the last argument as keyword parameters is deprecated; maybe ** should be added to the call
/home/circleci/projects/mastodon/vendor/bundle/ruby/2.7.0/gems/chewy-5.1.0/lib/chewy/fields/base.rb:7: warning: The called method `initialize' is defined here
/home/circleci/projects/mastodon/vendor/bundle/ruby/2.7.0/gems/chewy-5.1.0/lib/chewy/fields/base.rb:10: warning: Using the last argument as keyword parameters is deprecated; maybe ** should be added to the call
/home/circleci/projects/mastodon/vendor/bundle/ruby/2.7.0/gems/chewy-5.1.0/lib/chewy/fields/root.rb:16: warning: The called method `update_options!' is defined here
/home/circleci/projects/mastodon/vendor/bundle/ruby/2.7.0/gems/chewy-5.1.0/lib/chewy/type/mapping.rb:39: warning: Using the last argument as keyword parameters is deprecated; maybe ** should be added to the call
/home/circleci/projects/mastodon/vendor/bundle/ruby/2.7.0/gems/chewy-5.1.0/lib/chewy/fields/root.rb:16: warning: The called method `update_options!' is defined here
rails aborted!
```
Users can currently call `import` and `import!` directly on an index. If
these methods are called without arguments, the index imports all data
matching the type definition.
If these methods are called with an argument, ex.
`UsersIndex.import(User.where('rating > 100'))`, only the given scope or
array will be imported into the index.
If these methods are called with an argument, but that argument is empty
(for example `User.where('rating > 100')` returns an empty relation),
the methods were behaving as if they had no args (importing all the data
for an index).
This is undesired behavior, as the expectation should be for an import
with an argument that is empty to import nothing.
The changes proposed here mirror the changes created in this
[commit](https://github.com/toptal/chewy/commit/2eeff144925d92e6410a4aa2efbed3e0aef24b48), so that the behavior of doing `UsersIndex.import([])` is the same as doing `UsersIndex::User.import([])`.
Is this the correct behaviour?

```
[59] pry(main)> EventsIndex::Event.all.limit(10).count
=> 15
[60] pry(main)> EventsIndex::Event.all.limit(10).to_a.length
  EventsIndex::Event Search (15.1ms) {:index=>["events"], :type=>["event"], :body=>{:size=>10}}
=> 10
```

I thought `total_count` would return the total number of records and `count` would return the number of records in the current query?
ElasticSearch has settings that limit the number of concurrent scrolls on the cluster. Scrolls are cleared automatically after the scroll ttl (eg, "1m") but I've found that iterating a lot of data in a lot of parallel jobs makes it easy to hit this limit. This may be avoided by staggering parallelism differently or by setting shorter scroll ttls, but it seems to also make sense to clear out the old scrolls when the use of scroll_batches is complete. 
I was upgrading rails from 5.1.6 to rails 5.2.3 because of the chewy dependency at https://github.com/toptal/chewy/blob/master/chewy.gemspec#L36 line the latest ES 7.3.0 was fetched and my chewy searching got suspend.

After I downgraded the elasticsearch to 7.0.0 that is when chewy search started working.

Could you please set the elasticsearch dependency upto 7.0.0 or put in the README file a note regarding this would be great. 

Thanks
I have an existed index and I want to add a new field into it without reindex.
Elasticsearch has the [put mapping api](https://www.elastic.co/guide/en/elasticsearch/reference/current/indices-put-mapping.html).
