Handle all colors from compatible non-RGBA colorspaces, instead of just `white` and `black`.

Especially since line 72 causes a crash with a non-RGBA color space, otherwise.
The current implementation of `final func grayscaled() -> DynamicColor` uses the HSL lightness as as measurement of lightness.

While this is computationally convenient it does not provide a good match for the [human perception of lightness](https://en.wikipedia.org/wiki/Lightness#Lightness_and_human_perception).

Relative luminance (the `Y` in `XYZ`) provides a much more accurate measure.

This PR adds support for specifying which color space (i.e. xyz, hsl, rgb, hsv) to be used for grayscaling, defaulting to `.lightness` (aka HSL) for the sake of not introducing a breaking-change.

⚠️ Depends on https://github.com/yannickl/DynamicColor/pull/56

This caused me some grief with recent update to Xcode 11 GM. Somehow, Swift (5.1) started re-ordering some of DynamicColor's math expressions to use `+` and `-` overloads I had created to handle mixing `CGFloat` and `Int` without the need to cast. This was possible because DynamicColor code and mine are in the same module. Strangely, this did not occur before Swift 5.1

The change in Swift's behavior caused major breakage in my app colors, because the math expressions became incorrect -- for example, `let r = hueToRGB(m1: m1, m2: m2, h: h + 1 / 3)` would compute `h + 1` _before_ `/ 3`.

Notwithstanding the dumbness of my operator overloads (!), I think DynamicColor should make these expressions more explicit to shield future problems from occurring.

Using that same example, change:
`let r = hueToRGB(m1: m1, m2: m2, h: h + 1 / 3)`
to
`let r = hueToRGB(m1: m1, m2: m2, h: h + (1.0 / 3.0))`

And of course, other places where similar precedence problems may occur.

I would be happy to create the pull request for this as soon as I have a moment. Else, if someone else does I'd be happy to review it.
It would be helpful to invert only the brightness while retaining the hue and saturation of a color. Is this possible? There is currently `DynamicColor.invert`. Would it be useful to add a `DynamicColor.invertBrightness` ?

I tried with the following code, and I get inconsistent results (for example, light-medium orange becomes almost black instead of dark orange). Mostly I'm finding the resulting colors are darker then I would expect.

```
let hue = hueComponent
let saturation = saturationComponent
let brightness = 1 - brightnessComponent
let alpha = alphaComponent
return DynamicColor(hue:hue, saturation:saturation, brightness:brightness, alpha:alpha)
```
https://github.com/yannickl/DynamicColor/releases is missing changelog information.
For ex : https://github.com/Alamofire/Alamofire/releases
Would you accept a PR to make the hexString init failable, so it'd return nil rather than a black color?

Something like: 
```swift
  public convenience init?(hexString: String) {
    let hexString = hexString.trimmingCharacters(in: .whitespacesAndNewlines)
    let scanner   = Scanner(string: hexString)

    if hexString.hasPrefix("#") {
      scanner.scanLocation = 1
    }

    var color: UInt32 = 0

    if scanner.scanHexInt32(&color) {
      self.init(hex: color, useAlpha: hexString.count > 7)
    }
    else {
      return nil
    }
  }
```

It would be nice to select the scale of each color in a gradient to gain in control.

Here an API example:

``` swift
let gradient = DynamicGradient(colors: [blue, red, yellow], scale: [0,0.25,1])
```

You can add the 

```
    public final func readableColor() -> DynamicColor {
        return isLightColor() ? UIColor.blackColor() : UIColor.whiteColor()
    }
```

and or another that use the inverse / complement at your discretion
it's not much related to the colors elaboration it's more an utility that can be useful
