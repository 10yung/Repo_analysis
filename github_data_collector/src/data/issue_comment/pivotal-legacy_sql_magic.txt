Hi,
Wonderful project for SQL at Jupyter. Let me add a question with below usage case.

Usage senario:
With cell magic, "drop if exist tmptab; creat temp tab" failed as no table. it might be failed as it execute as a statement i 
 postgres+psycopg2 env.

With two cell magic using a connection, it is okay.

With two line magic, how to specify a specific connection.

When engine configed with threadlocal and max 1, overflow 0, this case can be solved.

But, I like to use line magic in a function(not in cell magic) and parallel model for this case.

Thanks,
Taewon


Would it be possible for sql_magic to automatically run the SQL string through `sqlalchemy.text()`, or do we need to replace any instance of `%` in a regular SQL statement with `%%`?

For reference:

https://stackoverflow.com/questions/8657508/strange-sqlalchemy-error-message-typeerror-dict-object-does-not-support-inde
Hello, 
I have a postgres database that I connected to in jupyter, and when I query using LIKE '%1' like this:

```sql
SELECT topic_title
FROM engagement
WHERE url LIKE '%/1' AND is_pm = 'No';
```
I get: <sql_magic.exceptions.EmptyResult at 0x8dc35b0>

Now here's the thing. I know that this query will get be several results because I queried it successfully in pgadmin. But I would love to have it working it in jupyter. I tried restarting the kernel and running the cells again, and I tried it on a difference database, and LIKE % wildcards just don't work.

Any idea how to resolve this?

As it says in the title.
could heavily borrow from read_gbq and use the same kwarg requirements for a config. would greatly benefit anyone on GCP.
Even though it is a dependency
Traitlets version 4.0.0 returns error: `ImportError: cannot import name observe`
Tests will not without spark installed.
```
❯❯❯ ./run_tests.sh                                                                           master ✱ ◼
========================================== test session starts ==========================================
platform linux -- Python 3.6.3, pytest-3.2.3, py-1.4.34, pluggy-0.4.0
rootdir: /home/cperez/repos/sql_magic, inifile: pytest.ini
collected 0 items / 1 errors

================================================ ERRORS =================================================
_________________________________ ERROR collecting tests/test_magic.py __________________________________
tests/test_magic.py:14: in <module>
    from utils import create_spark_conn
tests/utils.py:4: in <module>
    findspark.init()
venv/lib/python3.6/site-packages/findspark.py:134: in init
    py4j = glob(os.path.join(spark_python, 'lib', 'py4j-*.zip'))[0]
E   IndexError: list index out of range
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! Interrupted: 1 errors during collection !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
======================================== 1 error in 0.63 seconds ========================================
---------------------------------------------------------------------------                                                                                                                               [12/1216]
SystemExit                                Traceback (most recent call last)
~/ans/venv/lib/python3.6/runpy.py in run_module(mod_name, init_globals, run_name, alter_sys)
    203         run_name = mod_name
    204     if alter_sys:
--> 205         return _run_module_code(code, init_globals, run_name, mod_spec)
    206     else:
    207         # Leave the sys module alone

~/ans/venv/lib/python3.6/runpy.py in _run_module_code(code, init_globals, mod_name, mod_spec, pkg_name, script_name)
     94         mod_globals = temp_module.module.__dict__
     95         _run_code(code, mod_globals, init_globals,
---> 96                   mod_name, mod_spec, pkg_name, script_name)
     97     # Copy the globals of the temporary module, as they
     98     # may be cleared when the temporary module goes away

~/ans/venv/lib/python3.6/runpy.py in _run_code(code, run_globals, init_globals, mod_name, mod_spec, pkg_name, script_name)
     83                        __package__ = pkg_name,
     84                        __spec__ = mod_spec)
---> 85     exec(code, run_globals)
     86     return run_globals
     87
~/repos/sql_magic/venv/lib/python3.6/site-packages/pytest.py in <module>()
     71     # we trigger the below "else" condition by the following import
     72     import pytest
---> 73     raise SystemExit(pytest.main())
     74 else:
     75

SystemExit: 2
/home/cperez/repos/sql_magic/venv/lib/python3.6/site-packages/IPython/core/interactiveshell.py:2598: UserWarning: Unknown failure executing module: <pytest>
  warn('Unknown failure executing module: <%s>' % mod_name)
```
This is awesome! I've hacked together both ipython-sql and background cell execution in the notebook before. This is more elegant than both. Thanks for doing this.

Looking at the source, I was confused by the `table_name` variable's meaning. I think I understand that it is actually the name of the variable that the result will be pushed to.

Because of the (SQL/RDBMS) context, I think a better name is `user_variable`.

What do you think? Happy to PR.