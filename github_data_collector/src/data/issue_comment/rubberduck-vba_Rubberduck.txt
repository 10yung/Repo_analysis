This started out as an attempt to make Rubberduck more sensitive to Windows theme but this failed miserably because we were using same colors in several different places. Thus, this PR aims to convert all hard-coded color literals (e.g. `AliceBlue`, `DimGray`, etc.) and all hex codes into references defined in new `LightBlueTheme.xaml` style. Furthermore, most, if not all xaml files now reference the `DefaultStyle.xaml`, making it much easier for to unify the common theming elements. The `DefaultStyle.xaml` contains all the shared converters & `Style` elements. 

The PR should not actually change the existing coloring scheme; we should be able to do this in a separate PR basing our changes on the `LightBlue.xaml`. 


So far, the `IAddComponentService` did not provide a possibility to name the new component. This is unfortunate, since the component is not returned, in order to shield the using code from using SCWs. 

This PR changes this by adding an optional parameter for the component name. That the name actually gets assigned is not fully guaranteed since a name collision will cause a `COMException`, which will be logged ans swallowed.  It is the callers responsibility to make sure that no component of the desired name already exists.
Below are a some ideas that could be considered for enhancements to the EncapsulateField Refactoring:
1. **Support/allow encapsulation of constants as Read Only properties**

2.  **Apply a '@ObjectStateUDT annotation on the ObjectStateUDT field**
	
    Use an annotation to explicitly identify the field to be used for future field encapsulations.  Once the user has elected to encapsulate the object's state in a UDT, the refactoring attempts to make it an explicit 'opt-out' decision to encapsulate a subsequent field using backing a field.   Using an annotation facilitates this objective.  The annotation would be especially important if the user has renamed the ObjectStateUDT Type. (the refactoring currently looks for an expected Type name to detect if an ObjectStateUDT exists).

3. 	**Introduce an "Add New Field" capability to the refactoring** and possibly expose a separate standalone refactoring option. (admittedly, this is more of a code generation feature than a refactoring).

	In order to add an new encapsulated field after all fields are encapsulated (backing field or UDT), the user needs to add a field, Parse, and then run the EncapsulateField Refactoring.  Or, do it all manually.  The "Add New Encapsulated Field" capability would present the user with a Property Name text box, a Type identifier combo box, and a Read Only check box.

Close #5346.

Still tracking down an issue where changing `ClassModule.Instancing` is not reflected properly in the View for the Extract Interface dialog. I'm stumped as to what's causing it. Documenting it here in case another duck can help me figure it out the root cause.

1. Have RD parse a class module with the code below while instancing is `Private`.
```
Option Explicit

Public Sub Bar()
    Debug.Print "bar"
End Sub

Public Sub Bazz()
    Debug.Print "Bazz"
End Sub

Public Sub Duk(value As String)
    Debug.Print value
End Sub
```

2. Change the instancing to `PublicNotCreatable` and perform a reparse. The Extract Interface dialog that shows is incorrect. The reason is a public implementing class mandates that the interface must also be public. Unfortunately as shown below the Private option is still enabled. Choose private and confirm with OK to create the private interface.
![Public implementing class has a private allowable interface which causes a compiler error](https://user-images.githubusercontent.com/26076874/72652333-3a2b6e80-393b-11ea-9c03-22f444e03313.png)

3. From the menu Debug>Compile Project and you have the case we're trying to eliminate. Delete the `Implements` keyword from the implementing class, then delete the newly created `IClass1` interface. This causes RD to reparse.

4. Go and extract another interface. Notice that now the Private option is greyed out, as it should have been originally. Confirm with OK to extract the interface and again Debug>Compile. This time everything is fine as both the implementing class and the interface are public.
![Private option greyed out with a public implementing class](https://user-images.githubusercontent.com/26076874/72652586-35b38580-393c-11ea-94bc-c8e3be7ac6ac.png)
**What**
The inspection should find spurious newlines at the end of the files and warn about it. It probably also needs a quickfix that removes the newlines to be useful. Could also be useful if it identified other whitespace that can be removed (lines with just whitespace), and potentially two or more newlines after each other (this is a code style preference and therefore not equally obviously something people might want).

**Why**
In my git repo's containing VBA code I quite often have changes that are purely adding or subtracting newlines at the end of files, and that distracts from the changes actually made by the commit. Also because of #4345 this is something Rubberduck introduces quite often in my code.

**Example**
This code should trigger the inspection:

```vb
Public Sub DoSomething()
End Sub




```

---

**QuickFixes**
Please add a quick fix that simply removes the spurious newlines (and or whitespace).

1. **RemoveTrailingNewLines**

    Example code, after quickfix is applied:

    ```vb
    Public Sub DoSomething()
    End Sub
    ```

---

**Resources**
Each inspection needs a number of resource strings - please provide a suggestion here:

 - **InspectionNames**: TrailingNewLinesInspection.
 - **InspectionInfo**: The file has trailing new lines that should be removed for aesthetic reasons.
 - **InspectionResults**: The file has trailing new lines that should be removed for aesthetic reasons.

**Rubberduck version information**
	Rubberduck version 2.4.1.5105
	Operating System: Microsoft Windows NT 10.0.18362.0 x64
	Host Product: Microsoft Office x86
	Host Version: 16.0.12026.20264
	Host Executable: EXCEL.EXE;

**Description**
- Indentation go (wrongly) to the left after a commented line with a complete FOR loop.

**To Reproduce**
- _Please read (and optionally copy, paste and test the problem with) the following sample code lines:_
```
Sub Indentation_Test_Sample_Code()
    '===================================================================================
    '== This method is just a sample for edition purposes. It is not intended to be
    '== executed nor used as coding hint sample, and it does not do any relevant action.
    '===================================================================================
    Dim i As Long
    Do
        Do
            '--= The below line does Not affects the rest of the lines when indenting...
            For i = 1 To 1: Beep: Next
            '--* But the next line Does it.
            'For i = 1 To 1: Beep: Next
        Beep
        '- From the above line (and all after the previous commented FOR loop) will be
        ' indented by RubberDuck to the left which actually it is a wrong behaviour.
        '- This issue can be reproduced using Module indentation, tested with a shortcut.
        '- It happens with loops like For-Next, Do-Loop and While-Wend, but always when
        ' they are in the same line and that line is commented out.
        '===
    
        'While False: Wend'--= Note that this comment just at the EOL "stops" the issue.
        Beep
        'While False: Wend '--* But this one (at least an space after the EOL) does not.
    Beep
Loop
Loop
End Sub
```

**Expected behavior**
- Indentation after a commented line, even when it has a complete FOR (or other kind of) loop, must keep aligned to the previous commented line, except if that line triggers a valid rule like be at begining of the method and that rule is active, just to say a valid rule as an example.

**Screenshots**
**Logfile**
**Additional context**

**Rubberduck version information**
Version 2.5.0.5288
Système d'exploitation : Microsoft Windows NT 10.0.17763.0, x64
Produit hôte : Microsoft Office x86
Version hôte : 16.0.11328.20492
Exécutable hôte : EXCEL.EXE

**Description**
I cannot start the Test Explorer. I have tried with the menu Rubberduck => Unit test => Test Explorer. With the option "Windows Settings" => Visibility at startup => Test explorer ticked.
Test explorer won't show.

**To Reproduce**
Steps to reproduce the behavior:
1. Go to Rubberduck => Test Unitaires => Explorateur de test

**Expected behavior**
Opening the test explorer window

**Logfile**
2020-01-16 16:37:21.5279;DEBUG-2.5.0.5288;Rubberduck.UI.Command.MenuItems.ParentMenus.ParentMenuItemBase;(37998331) Executing click handler for menu item 'Explorateur de &tests', hash code 35882557;
2020-01-16 16:37:21.5439;TRACE-2.5.0.5288;Rubberduck.UI._DockableWindowHost;IOleObject::DoVerb() called with iVerb OLEIVERB_SHOW.;
2020-01-16 16:37:27.6127;DEBUG-2.5.0.5288;Rubberduck.UI.Command.MenuItems.ParentMenus.ParentMenuItemBase;(45740948) Executing click handler for menu item '&A propos...', hash code 8574457;

**Additional context**
I have 3 test modules.
Unit test settings is as followed ::
<?xml version="1.0" encoding="utf-8"?>
<Configuration>
  <UnitTestSettings>
    <BindingMode>DualBinding</BindingMode>
    <AssertMode>StrictAssert</AssertMode>
    <ModuleInit>true</ModuleInit>
    <MethodInit>true</MethodInit>
    <DefaultTestStubInNewModule>true</DefaultTestStubInNewModule>
  </UnitTestSettings>
</Configuration>



**Justification**
Hello, I am Portuguese and I have some colleagues who would like to use the program but they are not very good in English.

**Description**
I could collaborate with you to translate the program to Portuguese
**Justification**
Having an easily-accessible file explorer window, automatically rooted at the exported files / source files directory, would make source control operations quicker to access.

**Description**
Since the removal of the Source Control window, Rubberduck has not had any means for users to perform source control operations without leaving the VBE. In VBA, the "Export Project" and "Sync" operations have simplified the process of moving code between the VBE and the file system, but the user must make their own arrangements to move code between the file system and a source control repository.

Whilst there is no appetite to reintroduce the Source Control component, we could (easily?) embed a Windows File Explorer inside a toolwindow in Rubberduck. This would allow:
- Easy visualisation of exported files
- Standard explorer operations (file rename, add directory, etc)
- Shell extension operations.

The last of these is particularly interesting. A popular Windows Git client is [TortoiseGit](https://tortoisegit.org/). This is implemented as a shell extension, with Git operations available from a right-click in Windows File Explorer. It also adds icon overlays to display changed, unchanged and conflicted files and directories. Thus, if we embed a file explorer and the user has TortoiseGit installed, they can achieve a git workflow without leaving the VBE, at minimal development and support cost to the RD team.

This could be implemented either as a new tool window or (preferably?) as a different mode of the Code Explorer, in a similar fashion to modern Visual Studio.

**Additional context**
Here's a mockup
![image](https://user-images.githubusercontent.com/25420409/72432287-94d39780-378e-11ea-87e6-7249b884b29c.png)


**Rubberduck version information**
Version 2.5.0.5288
OS: Microsoft Windows NT 10.0.18362.0, x64
Host Product: Microsoft Office x86
Host Version: 16.0.12325.20288
Host Executable: EXCEL.EXE

**Description**
RD doesn't create a Test Module

**To Reproduce**
Steps to reproduce the behavior:
1. In RD Menu>Unit Tests>Test Module
2. Nothing happens; no test module is created.

**Expected behavior**
A test module is expected to be created.

**Logfile**

[RubberduckLog.txt](https://github.com/rubberduck-vba/Rubberduck/files/4061733/RubberduckLog.txt)
