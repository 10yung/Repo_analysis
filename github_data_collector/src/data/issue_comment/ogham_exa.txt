Hey, thanks for this great ls replacement tool. :smile: 

In the latest version v0.9.0 exa can be crashed when invoked with the `--git` option in a directory with a broken symbolic link.

Example:

```bash
exa --git --long
```
produces
```
thread '<unnamed>' panicked at 'called `Result::unwrap()` on an `Err` value: Os { code: 2, kind: NotFound, message: "No such file or directory" }', src/libcore/result.rs:997:5
stack backtrace:
   0: <unknown>
   1: <unknown>
   2: <unknown>
   3: <unknown>
   4: <unknown>
   5: <unknown>
   6: <unknown>
   7: <unknown>
   8: <unknown>
   9: <unknown>
  10: <unknown>
  11: <unknown>
  12: <unknown>
  13: <unknown>
  14: <unknown>
  15: start_thread
  16: clone
[1]    8695 abort (core dumped)  RUST_BACKTRACE=1 exa --long --git
```
Previously, exa would attempt to get the metadata for
`std::env::temp_dir`, and if fetching a certain timestamp
(e.g., creation time) failed, it would assume that the OS couldn't
produce that stamp for _any_ file. Requests to display or sort by that
timestamp would misfire the entire program.

This caused exa to make some sweeping claims that aren't true; e.g., that
Linux can't produce file creation times. The real story is that tmpfs
(the filesystem usually used for `/tmp`) can't, but other Linux
filesystems can and do. (The Rust standard library docs even mention
that `Metadata.created()` is backed by `statx()` since Linux 4.11.)

Since exa could be asked to list files from several filesystems,
let's handle metadata on a per-file basis. This patch makes File's
`*_time()` methods return an Option<Duration>
(`changed_time()` always returns None on a non-Unix system),
and prints a hyphen for files without that particular timestamp.
For example:

        $ exa -lhUd --sort=created /tmp/example Cargo.toml Cargo.lock src target

        Permissions Size User    Date Created Name
        .rw-r--r--     0 mrkline -            /tmp/example
        .rw-r--r--   25k mrkline 12 Jan 22:35 Cargo.lock
        .rw-r--r--  1.2k mrkline 12 Jan 22:35 Cargo.toml
        drwxr-xr-x     - mrkline 12 Jan 22:35 src
        drwxr-xr-x     - mrkline 12 Jan 22:46 target
```
@ogham ogham released this on 15 Jul 2019 · 6 commits to master since this release
exa release v0.9.0

I will release more than one version of exa this year, mark my words.
```

Release?
If the current date is December 31, `<year>`, exa will think that the current year is `<year> + 1` for the purpose of displaying file modification times, so it may choose to use the "day and year" format instead of the "day and time" format, or vice versa.

To reproduce, set your system's current date to December 31, create a file, and run `exa -l`:

```console
$ date
Tue Dec 31 18:17:20 PST 2019
$ echo hello > hello.txt
$ exa -l
.rw-r--r-- 6 jtai 31 Dec  2019 hello.txt
$ ls -l
total 4
-rw-r--r-- 1 jtai jtai 6 Dec 31 18:17 hello.txt
```

Notice that exa displayed the date as "31 Dec 2019", instead of the expected "31 Dec 18:17", even though Dec 31, 2019 is the current day.
Hi, 
I just added a whitespace, in order to make the output a bit nicer (at least to me).
Thought it might be worth a PR in case someone else is interested.
Here are the preview comparisons:

macOS Terminal:
![terminal](https://user-images.githubusercontent.com/9359296/71624896-31ba0080-2be5-11ea-8236-dd73f58f2cbb.gif)

iTerm2:
![iterm](https://user-images.githubusercontent.com/9359296/71624897-32eb2d80-2be5-11ea-8068-054749c72f76.gif)

kitty:
![kitty](https://user-images.githubusercontent.com/9359296/71624898-3383c400-2be5-11ea-917d-538858284186.gif)
Apparently kitty tries to center non-ASCII glyphs in two cells if followed by two whitespaces, this leads to a bit weird aligning. (I believe I came across an issue regarding this)
```
lovesegfault.github.io on  source
❯ RUST_BACKTRACE=full exa --binary --header --long --classify --git
thread '<unnamed>' panicked at 'called `Result::unwrap()` on an `Err` value: SystemTimeError(2147483648s)', src/libcore/result.rs:1165:5
stack backtrace:
   0:     0x5596ed0ff4b6 - <std::sys_common::backtrace::_print::DisplayBacktrace as core::fmt::Display>::fmt::hd5cf01a6458823ce
   1:     0x5596ed076eed - core::fmt::write::h239984b34be80164
   2:     0x5596ed0fe826 - std::io::Write::write_fmt::h71b3597bde52e201
   3:     0x5596ed100857 - std::panicking::default_hook::{{closure}}::h22b55119be64c15e
   4:     0x5596ed100342 - std::panicking::rust_panic_with_hook::hc671c362d83d7750
   5:     0x5596ed0ffebe - std::panicking::continue_panic_fmt::h65e4009de34f6bc6
   6:     0x5596ed101476 - rust_begin_unwind
   7:     0x5596ed07a929 - core::panicking::panic_fmt::h40dcc4b041f86562
   8:     0x5596ed07f5f6 - core::result::unwrap_failed::h94202cff87bbead0
   9:     0x5596ed0cd548 - exa::fs::file::File::modified_time::hafd16d6ff73742f3
  10:     0x5596ed0b1475 - exa::output::table::Table::display::h1b441a367cb17277
  11:     0x5596ed0c24c2 - <F as scoped_threadpool::FnBox>::call_box::hc69440319c5dcb18
  12:     0x5596ed0f7d1f - std::sys_common::backtrace::__rust_begin_short_backtrace::hdde92595a8ef50f9
  13:     0x5596ed0f8dac - core::ops::function::FnOnce::call_once{{vtable.shim}}::h62ef011ccc734e69
  14:     0x5596ed0fe3ce - <alloc::boxed::Box<F> as core::ops::function::FnOnce<A>>::call_once::h36570ddedd92a948
  15:     0x5596ed0fece8 - std::sys::unix::thread::Thread::new::thread_start::hac7b969fab3af94c
  16:     0x7fd3b7d34ef7 - start_thread
  17:     0x7fd3b7a5422f - __GI___clone
  18:                0x0 - <unknown>
zsh: abort (core dumped)  RUST_BACKTRACE=full exa --binary --header --long --classify --git
```

I've noticed it only happens after `hugo --minify`. c.f. https://github.com/lovesegfault/lovesegfault.github.io
https://github.com/lovesegfault/lovesegfault.github.io
The problem:

- We can’t use creation time on some configurations because it checks on the temp directory that can be on `tmpfs`, which doesn’t support creation time
- It will panic if the check is successful but tries to display a file on a filesystem that doesn’t support creation time.

So basically I discovered that my first attempt to tackle this issue was… not good at all. And this one has the benefit to be simpler.

---

- Checking on a directory doesn’t tell us if supported elsewhere (some filesystems, like tmpfs, don’t support created time)
- We want to be able to display a column even if some subfiles or subdirectories don’t support it

So now if unsupported a time of zero since Epoch is used, and displayed as `-`.

---

A duration of zero since EPOCH is almost always a bug or a special case, so I think it is not a problem that it is sorted first when a sort on e.g. creation time is used.

Sample output:

```
     Running `target/debug/exa -l --created --sort=created /`
dr-xr-xr-x - root -              sys
drwxr-xr-x - root -              run
drwxr-xr-x - root -              boot
drwxr-xr-x - root -              dev
dr-xr-xr-x - root -              proc
drwxrwxrwt - root -              tmp
drwx------ - root  2 juil. 21:51 lost+found
drwxr-xr-x - root  2 juil. 21:54 var
drwxr-xr-x - root  2 juil. 21:54 etc
drwxr-xr-x - root  2 juil. 22:47 usr
drwxr-xr-x - root  2 juil. 22:47 home
drwxr-x--- - root  2 juil. 22:47 root
drwxr-xr-x - root  2 juil. 22:47 opt
drwxr-xr-x - root  2 juil. 22:47 mnt
drwxr-xr-x - root  2 juil. 22:47 srv
lrwxrwxrwx 7 root 19 nov.   1:47 bin -> usr/bin
lrwxrwxrwx 7 root 19 nov.   1:47 lib64 -> usr/lib
lrwxrwxrwx 7 root 19 nov.   1:47 sbin -> usr/bin
lrwxrwxrwx 7 root 19 nov.   1:47 lib -> usr/lib
```
https://github.com/ogham/exa/blob/9fcd7ad1502ab10cb3f50e92a2637bfe6e0fc8cc/src/fs/file.rs#L475


This is a bad idea. `temp_dir` may return a path that does not exist. `metadata()` will fail in this case, panicking the whole application. Please don't assume "this won't ever happen" and `unwrap()`.
I've tested it in a dir with such structure:
```
.
├── a      // dir
├── b      // dir
│  └── a   // file
├── c      // dir
│  └── a   // dir
└── d      // dir
```

I ran `exa --tree --git-ignore` with different versions of `.gitignore`. There are 2 problems 

### `exa` doesn't exclude directories if there's a backslash at the end of the line.
IMO this one is the most annoying. [`git`'s docs](https://git-scm.com/docs/gitignore) say:
> For example, a pattern `doc/frotz/` matches `doc/frotz` directory, but not `a/doc/frotz` directory; however `frotz/` matches `frotz` and `a/frotz` that is a directory (all paths are relative from the `.gitignore` file).

and

> If there is a separator at the end of the pattern then the pattern will only match directories, otherwise the pattern can match both files and directories.

It seems like the backslash at the end is a valid path in `.gitignore` but `exa` doesn't exclude it.

`.gitignore`:
```
a/
```
Output:
```
.
├── a      // dir not excluded
├── b
│  └── a
├── c
│  └── a   // subdir not excluded
└── d
```

### `exa` only excludes directories and files if they are at the same level as `.gitignore`.
Docs say:
> If there is a separator at the beginning or middle (or both) of the pattern, then the pattern is relative to the directory level of the particular `.gitignore` file itself. Otherwise the pattern may also match at any level below the `.gitignore` level.

However, `exa` doesn't exclude files nor dirs inside other dirs.

`.gitignore`:
```
a # notice that there's no backslash at the end of the line
```
Output:
```
.          // the `a` dir was properly excluded
├── b
│  └── a   // file not excluded
├── c
│  └── a   // subdir not excluded
└── d
```

I've also tested what happens if I put `.gitignore` in a dir and `exa` takes it into account. The behavior is expected (the same files are/are not excluded) but still not correct.

This issue is related to #369.

I use this flag quite often and I'd be very happy if a shortened version was added :).
Would it be possible to have an extra option that works in concert with `--extended`/`-@` so that the _values_ of an extended attribute is shown?

Right now, what I see is:

```sh
$ exa --long --extended test.txt
.rw-r--r--@ 132 kas 10 Sep 18:34 test.txt
                                 └── user.comment (len 16)
```

and I have to do e.g.

```sh
$ getfattr -n user.comment --only-values test.txt
Frække frølår
```

to see the comment.

Would it be possible to have something like

```sh
$ exa --long --extended --show-extended-values test.txt
.rw-r--r--@ 132 kas 10 Sep 18:34 test.txt
                                 └── user.comment: Frække frølår
```

?
