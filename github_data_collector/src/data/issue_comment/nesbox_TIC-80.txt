I think it would be better to use PNG for screenshots rather than GIF. This has two advantages:
1. To allow screens with more than 256 on-screen colors to be preserved. The maximum amount of colors that can be shown is `(16Ã—136)+16 = 2192` (using `TIC`/`SCN`/`OVR` together).
2. For tweeting multiple screenshots at once on Twitter. You can only tweet one GIF at a time, so I would have to spend a tedious amount of time converting my screenshots to PNG.

You can still keep GIF with cover images (F7) and animated videos (F9).
::Request::
I want to be able to execute console commands from a program written in a code editor.
External files can be read using the import command while the program is running, making it easy to create a full-length adventure game.
Please consider.
Mouse() returns values in excess of 239 (x) and 135 (y) up to a maximum value of 255. When the cursor is to the left of the visible area if returns 255. Shouldn't this be reporting screen co-ords rathr than 'wrapped' window co-ords?

Version 0.80.0 dev on Linux 64 bit.

It would be nice to be able to suppress the TIC boot/cartridge loading messages (in the PRO version). For game jams and stand-alone apps users may not know what a fantasy console is and might be confused or put off by these messages.

Is there also a way to suppress the button/key images that are overlaid when starting a game?
There are two 6-bit registers for this feature present at `0x0FF86` and `0x0FF87`, in addition to left/center/right buttons. Why aren't they directly accessible?
The keyboard buffer at `0x0FF88` to `0x0FF8B` in RAM can store the `Esc` key (66) and `F1` to `F12` keys (67 to 78). But the `key()` and `keyp()` API functions only go up to 65. Attempting to read above 65 produces the error message `unknown keyboard code`.
Hello! I am here to suggest an enhancement.

I'd be great if we had some sort of way to capture the mouse inside the TIC-80 window, and a function that returns its offset relative to its previous location or something similar. Useful for 3D games or visualisation tools.

I know that the focus of TIC-80 is to mimic a retro console, and some people may find that such advanced functions do not fit the style, but we already have functions for interacting with the mouse and entire keyboard, as well as rendering textured triangles (textri), so you might as well consider my humble suggestion.

Regardless of the final decision, thanks for your precious time. :D 
Fixes the cursor getting out of sync when undoing and redoing in the
code window.

Under the hood this is quite complicated, but I hope it produces the
desired effect and also it may enable some other undo improvements in
the future.

The principle is that when undoing a code change, you want the cursor to
end up where it was before the code change, and when redoing a code
change, you want the cursor to end up where it was _after_ the change.

To accomplish this, cursor undo is stored with a TAG (before or after).
When the code is modified by any means, both a BEFORE and an AFTER
cursor tag are added. When undoing, the cursor history is rewound to the
next BEFORE tag, and when redoing, it is forwarded to the next AFTER
tag.

One issue that is handled is the case of an edit after undoing. Normally,
edits creates a BABA... alternation in the cursor undo history.
If the user makes some changes, undoes a change, and then makes more
changes, you can get a BABBA where the BB is the point of the undone
change. To resolve this, when the tag being added to the history matches
the latest tag in the history, the latest tag is replaced so there won't
be two of the same tag in the sequence. I'm on the fence about whether
this behavior belongs in the history system or in the code, but there
are no other users of the tags yet so I'll leave it as written. In the
future the tags system might be used to implement "word" undo ala
VSCode, or stroke undo (instead of per-pixel) in the sprite editor. But
I'm not sure, these features might better benefit from an overhaul of
the undo system, I'd need to research other possibilities.

As a simplification, code changes are now flagged in a bool, which
triggers all the syntax highlighting, undo, etc. This may have fixed a
few places where these were applied redundantly.
I am trying to build from sources and have reached the 'make' command, however i encounter an error:
/usr/bin/ld: cannot find -lbcm_host
collect2: error: ld returned 1 exit status
make[2]: *** [CMakeFiles/player-sdl.dir/build.make:93: bin/player-sdl] Error 1
make[1]: *** [CMakeFiles/Makefile2:200: CMakeFiles/player-sdl.dir/all] Error 2
make: *** [Makefile:130: all] Error 2

I have found a similar error on this forum, but the solution was confusing. Here it is:
https://github.com/nesbox/TIC-80/issues/794
I don't understand the solution, where would i put that code? I tried placing it on line 4, but got this error:
/usr/bin/ld: lib/libSDL2.a(SDL_dynapi.c.o): undefined reference to symbol 'dlopen@@GLIBC_2.4'
/usr/bin/ld: //lib/arm-linux-gnueabihf/libdl.so.2: error adding symbols: DSO missing from command line
collect2: error: ld returned 1 exit status
make[2]: *** [CMakeFiles/player-sdl.dir/build.make:93: bin/player-sdl] Error 1
make[1]: *** [CMakeFiles/Makefile2:200: CMakeFiles/player-sdl.dir/all] Error 2
make: *** [Makefile:130: all] Error 2

I don't know what to do and i appreciate the help, 
Love what you're doing with TIC-80, i just wish i could access it!
Thanks!
After the effect-column update, I've noticed that some carts [like this one](https://tic.computer/play?cart=975) don't produce any software-generated sound anymore.

The reason for this is because of a change in the stereo registers at `0x0FF98` to `0x0FF9B`. The 4-bit values for the left and right balance levels used to be _**inverted**_ prior to the update (0 becomes 15, 1 becomes 14, etc.). As a result, poking `0x00` (the default value) to either of the four stereo registers causes the level to be 15 (the maximum volume) on both sides.

Now after the update, the left/right level registers aren't inverted anymore. This means writing `0x00` will _directly_ set both sides to 0 (mute), and now you'll need to write `0xFF` to set both sides to max. **Wait, what? Pre-0.80.0-dev carts don't write here!**

The [Fallspire](https://tic.computer/play?cart=806) demo isn't affected by this change, because that calls `sfx()` on all four channels, therefore setting all four stereo registers to `0xFF`.