当手机搜索外设时, 手机连接到自己不想要的外设, 这时弹框提示是否进行配对, 点击取消, 设置蓝牙中还是连接了设备, 但未进行配对, 这时只能开关蓝牙. 请问这种有办法解决吗? 
[self.baby setBlockOnConnected:^(CBCentralManager *central, CBPeripheral *peripheral) {
        NSLog(@"设备：%@--连接成功",peripheral.name);
        weakSelf.linkState = BluetoothLinkState_Successful;
        if ([weakSelf.delegate respondsToSelector:@selector(MyBluetoothToolLink:)]) {
            [weakSelf.delegate MyBluetoothToolLink:BluetoothLinkState_Successful];
            NSLog(@"")
            weakSelf.currentPeripheral = peripheral;
        }
        //停止扫描
        [weakSelf.baby cancelScan];
    }];
    
    该项目是否基于channel串行处理的？每个channel是不是不能并发处理扫描、连接任务的？
    貌似无法做到并行处理多个channel同时处理扫描，连接的回调，需要先处理完一个channel的扫描，连接后再切换到另外一个channel处理扫描，连接。（例如一个app一启动就需要同时以最快的速度扫描连接车辆、手环、手表、并且他们的处理逻辑都是独立很大差别的，如果必须一个一个串行的处理时间太长了）
    如果是这样自己很多需要同时处理多个外设的app的扫描和连接，该工程就不适用了，希望可以增加并发处理多个channel的实现
https://github.com/coolnameismy/BabyBluetooth/blob/94bc5a031f78b35c6a2d947764dc9a15f7dab3ee/Classes/objc/BabySpeaker.m#L57

不知道我有没有误解，建议：
- (BabyCallback *)callbackOnChnnel:(NSString *)channel
{
    BabyCallback *aCallBack = [channels objectForKey:channel];

    if (!aCallBack)
    {
        aCallBack = [self callback];
    }
    return aCallBack;
}

iOS13下，连接蓝牙设备，很快就会自动断开，也查询不到服务，在iOS12下能工作正常
连接成功后，如何配对绑定？
Update typos
 我在demo的setFilterOnDiscoverPeripherals方法里面设置了过滤条件,发现打断点,有时并不会执行.
1.编译警告
 ```
1).This block declaration is not a prototype

- (BabyPeripheralManager *(^)())removeAllServices;


2).Block implicitly retains 'self'; explicitly mention 'self' to indicate this is intended behavior...
虽然实际不会构成循环引用环，但是还是建议优化一下。

- (BabyPeripheralManager *(^)())stopAdvertising {
    return ^BabyPeripheralManager*() {
        [_peripheralManager stopAdvertising];
        return self;
    };
}
```

2.连接（或者取消）指定外设的时候，建议也加上超时检测。目前只有发现外设，自动连接的时候才检测超时。
```
//连接Peripherals
- (void)connectToPeripheral:(CBPeripheral *)peripheral{
    [centralManager connectPeripheral:peripheral options:[currChannel babyOptions].connectPeripheralWithOptions];
    //开一个定时器监控连接超时的情况
    [connectTimer invalidate];
    connectTimer = [NSTimer scheduledTimerWithTimeInterval:5.0f target:self selector:@selector(connectTimeout:) userInfo:peripheral repeats:NO];
}
```
3.BabyCallback 潜在的内存泄漏。
   如果有多个`channel`，`BabySpeaker` 会持有 多个委托`BabyCallback`，但是目前只能切换 `channel`，也就是切换委托`BabyCallback`，但是没法销毁。一般委托的生命周期是跟着 监听者走的，建议在监听者销毁的时候 同时移除委托。具体可以主动调用；也可以通过运行时来做被动调用。

