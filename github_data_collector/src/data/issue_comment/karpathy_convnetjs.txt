While extending my knowledge of neural networks, I implemented a neural network library in Javascript. It has capabilities similar to ConvNetJS, but both training and testing are 4x faster (while still running in a single JS thread on the CPU).

I did not have time to prepare such nice demos, as there are for ConvNetJS. I guess you can use ConvNetJS for learning and experimenting, and use my library when you want to train a specific network.

Also, my library can load pre-trained models from ConvNetJS (JSON) and Coffe (.coffemodel).

https://github.com/photopea/UNN.js - it is only 18 kB.
The basic example provided here does not seem to work because the output was always 0:
https://cs.stanford.edu/people/karpathy/convnetjs/docs.html

Proof:
I tried changing this line:
  var reward = action === 0 ? 1.0 : 0.0;
into:
  var reward = action === 1 ? 1.0 : 0.0;

*** and got the same result which is 0

Code Example:
/*START CODE*/
var brain = new deepqlearn.Brain(3, 2); // 3 inputs, 2 possible outputs (0,1)
var state = [Math.random(), Math.random(), Math.random()];
for(var k=0;k<10000;k++) {
    var action = brain.forward(state); // returns index of chosen action
    var reward = action === 0 ? 1.0 : 0.0;
    brain.backward([reward]); // <-- learning magic happens here
    state[Math.floor(Math.random()*3)] += Math.random()*2-0.5;
}
brain.epsilon_test_time = 0.0; // don't make any more random choices
brain.learning = false;
// get an optimal action from the learned policy
var action = brain.forward(state);
/*END CODE*/
Should fix #109 
There is a problem with this line: https://github.com/karpathy/convnetjs/blob/4c3358a315b4d71f31a0d532eb5d1700e9e592ee/build/deepqlearn.js#L142

the shape of the input vector is basically hardcoded here when given to the network's forward function. Which  makes it all break apart in line https://github.com/karpathy/convnetjs/blob/4c3358a315b4d71f31a0d532eb5d1700e9e592ee/src/convnet_layers_dotproducts.js#L67
Where we try to check for existence of those dimensions. 
Please create type definitions for TypeScript
I have tried to use ConvnetJS with 64x128 images, however I have a problem with image display.
![image](https://user-images.githubusercontent.com/45329339/48977794-bc235d00-f0d3-11e8-8e66-1df49f72f4ff.png)
Can you help me please!
how can I predict the average value of an amount of data in an array?

For example i am use real currency using all the data in an array
```
var balance = [
    '1,98',
    '10,50',
    '500,47',
    '5.000,64',
    '5.206,64',
    '5.778,03',
    '70.000,29',
    '900.000,16',
   '1.000.000,07'
]
```

How can I predict that the average balance is 5k and corresponds to 70% of the total of all the array?

I was looking at some examples and in the below it can predict what will be the next number of the array in order of 0 to 9

```
            var my_data = [
                0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10,
                0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10,
                0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10,
                0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10,
                0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10,
                0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10,
                0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10,
                0, 1, 2, 3, 4, 5, 6, 7, 8
            ];

            var trainer = new convnetjs.SGDTrainer(net, { learning_rate: 0.01, momentum: 0.2, batch_size: 1, l2_decay: 0.001 });

            var learn = function () {
                for (var j = 0; j < 100; j++) {
                    for (var i = 0; i < my_data.length - d; i++) {
                        var data = my_data.slice(i, i + d);
                        var real_value = [my_data[i + d]];
                        var x = new convnetjs.Vol(data);
                        trainer.train(x, real_value);
                        var predicted_values = net.forward(x);
                        console.log("data: [" + data + "] -> value: " + real_value);
                        console.log("prediction in learn stage is: " + predicted_values.w[0]);
                    }
                }

            }

            var predict = function (data) {
                var x = new convnetjs.Vol(data);
                var predicted_value = net.forward(x);
                return predicted_value.w[0];
            }

            learn();
            var item = [0, 1, 2, 3, 4, 5, 6, 7, 8];
            console.log("predicted value for [" + item + "] is: " + predict(item));
```
is it possible to learn deeply to predict the average values of an array?

Thanks a lot for the help 👍 
url = "https://cs.stanford.edu/people/karpathy/convnetjs/intro.html"
at sixth paragraph：
“But wait, it looks like the network only assigned 10 percent probability to this input being a 4, and 60 percent to it being a 9!“
 (is it a 8? get 8 from corresponding picture)

If i run a deepqlearn regression 1000 times using brain.value_net.to/fromJSON  I would expect the actions to improve. 

I don't see any significant improvement which is leading me to believe that I am not using the store and re-use correctly.

Does anyone have this working?
var net; // declared outside -> global variable in window scope
    function start() {
      var layer_defs = [];
    // input layer of size 1x1x2 (all volumes are 3D)
    layer_defs.push({type:'input', out_sx:1, out_sy:1, out_depth:2});
    // some fully connected layers
    layer_defs.push({type:'fc', num_neurons:20, activation:'relu'});
    layer_defs.push({type:'fc', num_neurons:20, activation:'relu'});
    // a softmax classifier predicting probabilities for two classes: 0,1
    layer_defs.push({type:'softmax', num_classes:2});

    // create a net out of it
    var net = new convnetjs.Net();
    net.makeLayers(layer_defs);

    // the network always works on Vol() elements. These are essentially
    // simple wrappers around lists, but also contain gradients and dimensions
    // line below will create a 1x1x2 volume and fill it with 0.5 and -1.3
    var x = new convnetjs.Vol([0.5, -1.3],[0.5, -1.3]);
    var x = new convnetjs.Vol([0],[1]);

    var probability_volume = net.forward(x);
    console.log('probability that x is class 0: ' + probability_volume.w);
    // prints 0.50101

    var trainer = new convnetjs.Trainer(net, {learning_rate:0.01, l2_decay:0.001});
    trainer.train(x, [[0],[1]]);


?????????????????????????????????????????/