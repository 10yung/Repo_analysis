Hello,
I am using your class to perform a task similar to this:
I own a worker and this worker called me another worker.
But every time I do this the process is locked, have you ever come across this error?

The query, which can take several seconds:

```
UPDATE `delayed_jobs` SET `delayed_jobs`.`locked_at` = '2016-02-17 05:20:59', `delayed_jobs`.`locked_by` = 'host:mine pid:60282' WHERE ((run_at <= '2016-02-17 05:20:59.484088' AND (locked_at IS NULL OR locked_at < '2015-02-17 05:20:59.484102') OR locked_by = 'host:mine pid:60282') AND failed_at IS NULL) ORDER BY priority ASC, run_at ASC LIMIT 1
```

My indexes:

``` SQL
Create Table: CREATE TABLE `delayed_jobs` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `priority` int(11) NOT NULL DEFAULT '0',
  `attempts` int(11) NOT NULL DEFAULT '0',
  `handler` text NOT NULL,
  `last_error` text,
  `run_at` datetime DEFAULT NULL,
  `locked_at` datetime DEFAULT NULL,
  `failed_at` datetime DEFAULT NULL,
  `locked_by` varchar(191) DEFAULT NULL,
  `queue` varchar(191) DEFAULT NULL,
  `created_at` datetime DEFAULT NULL,
  `updated_at` datetime DEFAULT NULL,
  PRIMARY KEY (`id`),
  KEY `delayed_jobs_priority` (`priority`,`run_at`),
  KEY `index_delayed_jobs_on_priority_and_run_at` (`priority`,`run_at`)
) ENGINE=InnoDB AUTO_INCREMENT=1154052 DEFAULT CHARSET=utf8 ROW_FORMAT=COMPRESSED
```

`EXPLAIN` says:

```
+----+-------------+--------------+-------+---------------+---------+---------+------+-------+-----------------------------+  
| id | select_type | table        | type  | possible_keys | key     | key_len | ref  | rows  | Extra                       |  
+----+-------------+--------------+-------+---------------+---------+---------+------+-------+-----------------------------+  
|  1 | SIMPLE      | delayed_jobs | index | NULL          | PRIMARY | 4       | NULL | 57281 | Using where; Using filesort |  
+----+-------------+--------------+-------+---------------+---------+---------+------+-------+-----------------------------+  
1 row in set (0.00 sec) 
```

Problem is described below.
1. Server try to fetch a JSON object of user information from a remote server. However some special character (maybe `utf8mb4`) make `JSON.parse` raise a error.
2. DelayedJob caught the error thrown above, then try to write the stack trace into `last_error` field of table.
3. MySQL backend of ActiveRecord happend to be in UTF8 encoding, it throw a error.
4. WHOLE running DelayedJob instance crashed and stopped.

I think some where need a 'begin ... rescue`

```
log writing failed. "\xEF" from ASCII-8BIT to UTF-8
Mysql2::Error: Incorrect string value: '\xF0\x9F\x92\x85 \xE1...' for column 'last_error' at row 1: UPDATE `delayed_jobs` SET `attempts` = 1, `last_error` = '757: unexpected token at \'{\"subscribe\":1,\"openid\":\"o6uLOt6Z3zaXfWBBcz4Z4Gz3PmP8\",\"nickname\":\" 麦小喵💅 ღ奶酪酱💋\",\"sex\":2,\"language\":\"zh_CN\",\"city\":\"\",\"province\":\"\",\"country\":\"斐 ....
```

Hi,

It seems like nothing has happened in this repository for a while and the work is being done in collectiveidea/delayed_job

Why not set the canonical repository to that one so that issues and pull requests aren't filed here?  This is easily done [in the settings for your repository](https://github.com/tobi/delayed_job/settings#transfer_button) which I've handily linked to. :smiley:

Cheers

Hi,

for examaple: User.rb model contains "reward" method which should be called using delayed job.

def reward
  puts self.inspect ==> its returning the db record not the delayed job object [handler].
end
Now the problem is how do i access the delayed job object in reward method.

See comment on issue #43.  
This actually does not work. The first worker will block the next until it receives a kill (TERM or INT) and then the next one starts. This is not multiple works but running three one after the other. Please remove this incorrect documentation as it will cause people to waste time trying it.

If you set the I18n.locale to a value different from the default locale the delayed tasks will not preserve the setting and you will have to set it manually inside each task (e.g. send delayed mail).

See https://github.com/rails/rails/commit/0b72a04

removing unnecessary line-break in README. that's all.
