This will make it possible to have text attributes with nested paragraph style attributes declared in style json. Example usage in Demo.
I'm using StyleKit in a project which we build to several targets (each has its own module name). While we have multiple styles defined (for each target) the structure remains the same. Its just easier for us  to define module name in runtime than edit all occurencies in several jsons. 

Maybe others will find this useful too. ü§∑‚Äç‚ôÇÔ∏è


Hi, great library!
It would be fantastic to be able to set something like a `styles`property on a view which would be an array of strings stored as an associated object. These styles could then be referenced in the json. This way you could style something without making it a specific subclass.
Live reload functionality will give developers the ability to reload styles at runtime. This enables developers to switch from one style to the other and opens up the possibility to create tools that hook up to the development environment and test styles on the fly without relaunching the application.

Mixins will give the ability to anyone styling the application to save and reuse styles, a mixin is created by treating an alias as a normal `Class` that requires styling, StyleKit will then associate all the styles contained in the block to that alias. Mixins would then be used by setting the `mixins` property that will be available on every component and passing in one or more aliases.

``` javascript
{
    "@primaryColor": "#641E16",
    "@secondaryColor": "#17202A",
    "@tertiaryColor": "#424949",
    "@textFieldStyle": {
        "font": "HelveticaNeue-Light:25.0",
        "color": "@primaryColor",
        "border": 0.5,
        "cornerRadius": 8.0
    },
    "MyApp.LoginView": {
        "MyApp.MainTextField": {
            "mixins": ["@textFieldStyle"],
            "backgroundColor": "@secondaryColor"
        },
        "MyApp.SecondaryTextField": {
            "mixins": ["@textFieldStyle"],
            "backgroundColor": "@tertiaryColor"
        }
    }
}
```

In values we're proposing the introduction of a set of reserved keywords that will serve as functions, by version 1 there will be a number of functions available:
### ImageURL

``` javascript
{
    "@logoImageURL": "https://avatars1.githubusercontent.com/u/17726261",
    "MyApp.LoginView": {
        "MyApp.LogoView": {
            "backgroundImage": "ImageURL(@logoImageURL)"
        }
    }
}
```
### Gradient

``` javascript
{
    "@primaryColor": "#641E16",
    "@secondaryColor": "#78281F",
    "MyApp.LoginView": {
        "backgroundColor": "Gradient(style: 'Horizontal', locations: [0.9, 1.0], colors: [@primaryColor, @secondaryColor])"
    }
}
```
### Alpha

``` javascript
{
    "@primaryColor": "#641E16",
    "MyApp.LoginView": {
        "UILabel": {
            "tintColor": "@primaryColor"
        },
        "UIButton": {
            "backgroundColor": "Alpha(@primaryColor, 80)"
        }
    }
}
```

In addition to these functions StyleKit will also provide a function registry so developers can add their own custom functions.

Added some documentation based on #24 

Any chance you can create a bridging header, so we can use this library from Objective C?

Thanks.

