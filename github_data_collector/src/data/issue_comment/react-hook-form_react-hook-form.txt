
**Describe the bug**
I'm running into an issue where an input I'm attempting to wrap (which is a DatePicker) returns a Date from OnChange, but a formatted String from OnBlur. react-hook-form is seemingly saving this String, then passing it back as the `value` which blows up the app as the PropType check fails extecting a Date.

I'm not sure who is truly at fault here. They shouldn't be returning a String on their OnBlur event (and I opened [this issue](https://github.com/telerik/kendo-react/issues/447) about it). But It also seems unintuitive that react-hook-form would be overwriting the saved values in it's controller on a OnBlur, even if it's attempting to re-run the validations then. OnChange seems like the more appropriate method to update the saved value.

**To Reproduce**
Steps to reproduce the behavior:
1. Wrap a @progress/kendo-react-dateinput DatePicker in a react-hook-library Controller
2. Set validation to OnBlur
3. Interact with the DateInput to trigger a blur event
4. See error

**Codesandbox link**
https://codesandbox.io/s/broken-thunder-9f4m3

**Expected behavior**
I would expect OnChange to update the values in the Controller, and OnBlur to not modify those values, but just trigger the validations on the already saved values if validations are in OnBlur mode.

**Desktop (please complete the following information):**
 - OS: Windows (and CodeSandbox)
 - Browser Chrome
 - Version 79

**Additional context**
As mentioned, I opened an issue there as well, and the reproduction in the code sandbox is very straightforward. 
**Describe the bug**
It seems that Controller 'rules' object is being kept in the initial state that they were set to on first render, including any scoped reference values. We have dynamic rules based on external factors that this bug breaks. I am currently bypassing this issue by setting a composite 'key' prop on the Controller component of all values used within the 'rules' object. 

**Codesandbox link**
https://codesandbox.io/s/react-hook-form-basic-validation-uxx2m

**To Reproduce**
Steps to reproduce the behavior:
1. Go to codesandbox link
2. Use the button to make the required rule false
3. Press submit
4. Observe that the required rule is being enforced

**Expected behavior**
I would expect rules to update alongside the component. In the above example I would expect there to be no errors when the required rule is set to false.

**Desktop (please complete the following information):**
 - OS: Ubuntu
 - Browser: Chrome
 - Version 73

**Describe the bug**

Calling useFieldArray hook methods does not update formState.dirty value.

**To Reproduce**
Steps to reproduce the behavior:
1. Go to https://codesandbox.io/s/react-hook-form-usefieldarray-popep
2. Click on APPEND
3. Observe that formState hasn't changed

**Codesandbox link**
https://codesandbox.io/s/react-hook-form-usefieldarray-popep

**Expected behavior**
append, prepend, remove, swap, move, insert should all update dirty state to true

**Desktop (please complete the following information):**
 - OS: Windows
 - Browser Chrome Version 79.0.3945.117 (Official Build) (64-bit)
 - Version 4.5.2

**Additional context**
Add any other context about the problem here.

This feature request is waiting for more upvote. 

related PR: https://github.com/react-hook-form/react-hook-form-website/pull/139

if you want such feature, you can thumb up this comment. 👍 

------

example for `@hapi/joi`, this will apply for any other schema/custom validation.

```
import React from "react";
import useForm from "react-hook-form";
import joi from "@hapi/joi";

const schema = Joi.object({
  username: Joi.string().alphanum().min(3).max(30).required()
});

// Build your resolver to display errors and pass valid values
const resolver = (data: any) => {
  const { error, value: values } = validationSchema.validate(data, {
    abortEarly: false,
  });
  return {
    values: error ? {} : values,
    errors: error
      ? error.details.reduce((previous, currentError) => {
          return {
            ...previous,
            [currentError.path[0]]: currentError,
          };
        }, {})
      : {},
  };
};

function App() {
  const { register, handleSubmit, errors } = useForm({
    validationSchema: { resolver }
   });
  
  return (
    <form onSubmit={handleSubmit(d => console.log(d))}>
      <input type="text" name="username" ref={register} />
    </form>
  );
}
```

FYI @kotarella1110 @JeromeDeLeon 