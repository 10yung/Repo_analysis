This can be considered an RFC patch to gauge interest/acceptance.

This adds a `queue_len()` option to the builder. This will limit the number of concurrent pending jobs that can be queued; attempts to queue a job when the queue is full will block until a slot becomes free. The main purpose of this feature is to allow back-pressure in the case where pending jobs use up limited resources (memory, file-handles, etc.).

In order to do this this in the simplest manner I've moved the pool to use `crossbeam_channel`, which has a drop-in bounded channel implementation.

There is a probably a strong case for also providing a `try_execute()` function that will return an error or `false` if the queue is full, but I've skipped that until this feature has been discussed.
This is a first draft for 2.0 where I tried to in-cooperate my thoughts on several of the open issues.

I would like to get some feed back over the next week. Eg. "no opinion" or "overloaded" or "looks good" or anything else.

Maybe some of the functionality should reside outside of this crate, like the detection of pinning.

Cheers,
Stefan

ping: @frewsxcv 
It would be great to provide a mechanism to terminate all pending tasks and wait for the current one to complete.

Essentially complete the current executing jobs (_since I'm not sure it's possible to terminate spawned threads_). And then don't proceed doing any more work.

At the moment this is not possible.
I am trying to create a threadpool as static. So that I dont have to pass this variable across multiple functions. 

```
lazy_static! {
    pub static ref TABLES_LOAD_POOL: ThreadPool = setup_thread_pool();
}

fn setup_thread_pool () -> ThreadPool {
        
    let thread_pool :ThreadPool  = threadpool::Builder::new()
                      .num_threads(10)
                      .thread_name("Table_Load".into())
                      .build();
    thread_pool

}

```
I get the following error 

`   | |_^ `std::sync::mpsc::Sender<std::boxed::Box<(dyn threadpool::FnBox + std::marker::Send + 'static)>>` cannot be shared between threads safely`
   |
`rust-threadpool` use `channel` for receiving jobs, that means if the number of jobs is very large it will consume lots of memory.

So I'd like to know if it is a good idea or not to use `sync_channel` instead of `sync`.

I googled and found:

- a post that address this issue: https://medium.com/@vsatayamas/limited-job-queue-thread-pool-6e473e6113c8
- and a commit that replace `channel` with `sync_channel`: https://github.com/veer66/rust-threadpool/commit/aa8b157314ede6817628a7b7c4fd867d02acd2f6

Not sure why the author hadn't submitted a PR. 
Hi,

I was looking for a thread pool, and found this repo. Thanks for working on this.

I was browsing the dependencies and saw that you use `num_cpus` to decide how many worker threads to use by default:
```rust
let num_threads = self.num_threads.unwrap_or_else(num_cpus::get);
```

Would it not be better to look into the affinity mask to get this default? The system may have 64 cores, but have the process pinned to, e.g. 4 cores. This would cause contention.

I found this crate, which might help (disclaimer, I've not used it and I'm not sure how portable it is):
https://crates.io/crates/core_affinity

Thanks
* add `struct ThreadPoolBuilder`

--------

* add `ThreadPoolBuilder` `fn new()`
  * uses `num_cpu` crate to default num of threads to num of cpus

--------

* remove: `ThreadPool` `fn new(num_threads: usize) -> ThreadPool`
* add: `ThreadPool` `fn new() -> ThreadPool`
  * uses `num_cpu` to default num of threads to num of cpus
* add: `ThreadPoolBuilder` `fn num_threads(self, num: usize) -> ThreadPoolBuilder`
  * set the number of threads for the pool that the builder will construct

----------

* remove: `ThreadPool` `fn with_name(name: String, num_threads: usize) -> ThreadPool`
* add: `ThreadPoolBuilder` `fn name(self, name: String) -> ThreadPoolBuilder`

--------

* add: `ThreadPoolBuilder` `fn stack_size(self, size: usize) -> ThreadPoolBuilder`
  * https://doc.rust-lang.org/std/thread/struct.Builder.html#method.stack_size

---------

In summary: remove all constructors off of `ThreadPool`, except a new `new` constructor. If you want to fine-tune your threadpool, you'd use a `ThreadPoolBuilder`.
I wonder if it would be useful to have a `scoped` function similar to the [scoped_threadpool](https://crates.io/crates/scoped_threadpool) crate.

Advantages could come from the design. Like:

- dedicate only a certain part of the pool to the scoped work
- add the scoped jobs in random order but join the whole pool at the end of the `scoped` function
- add the scoped jobs in random order but join only the scoped jobs

One could also state that the resources would be wasted since such a crate already exists.
Maybe something that searches for all *.jpeg in a directory, starts a thread pool, and in each thread, converts them to .png