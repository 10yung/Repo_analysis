I see that someone else has had problems with Cells 4.x not following the standard conventions for naming templates. #460 But the solution is opaque .

We have a large project with a lot of *.html.erb templates and _*.html.erb partials which worked with cells 3.x and don't work with cells 4.x . I don't want to go through renaming them because it's an unnecessary pain.

Is there some reason why this change was made, and not documented in the upgrade guide? 

If I forked the project, made a PR to correct this issue would it be accepted or is there some deep reason why the standard naming convention isn't being followed?
4.1.3 is published, but gem is at 4.5

https://rubygems.org/gems/cells/versions/4.1.3

<img width="771" alt="screenshot 2019-03-06 at 10 08 06" src="https://user-images.githubusercontent.com/11340230/53869101-cec50080-3ff7-11e9-9b3d-261d82022ed0.png">

This is for logging cache hit rate for specific cells
Looking at caching server hit rate is useless and also inaccurate since rails 5.2's cache versioning
Can't nest markdown under html
http://trailblazer.to/gems/cells/cells4.html
```
Cells per default does not escape HTML. However, you may run into problems when using Rails helpers. Internally, those helpers often blindly escape. This is not Cellsâ€™ fault but a design flaw in Rails.
```

I know this is not a bug, but want to provide a option to  do html escaping by default.

Because set html escape for every input data is difficult and will cause security problem if forget.

Hi,

"I think you got it all wrong" ;)
Well, no, quite possibly not everything, many things seem nice, but this particular part here........

http://trailblazer.to/gems/cells/api.html#html-escaping

Logically, IMHO "escaping" (or, possibly much more correctly: "transcoding") ALWAYS is
a matter of *protecting* (against conflicts vs. *control characters* space of a specific protocol!) *raw payload* (usually: raw strings) within a *specific foreign-protocol* *container* - the very moment that the raw string starts needing to be used within that container format protocol, that is, and not a blink of an eye before!
Thus, it's the task (and, intimate implementation detail knowledge!!) of an *OUTER* container layer which
is to escape (transcode) adopted raw payload content *right when* ([OSI] LAYER TRANSITION activity!!) embedding that payload element content into a containing container (whichever way that container might be defined, be it HTML, XML, binary format, ...).

Thus, having any signs of escaping whatsoever attached to any supposedly "simple" payload type whatsoever:
class CommentCell < Cell::ViewModel
  include Escaped

is a protocol-extensibility-breaking (what will happen if you [are forced to] change to a wholly different container spec??) LAYER VIOLATION and thus WRONG - at least from my (domain-specifically very unexperienced - perhaps this framework is indeed actually doing it right somehow...) POV.


Docs part "You can suppress escaping manually." seems to be a tell-tale sign for existence of that layer violation (one very likely shouldn't be in need of such questionable weak-toggle-disabling if handling were properly layer-designed...).

I.e., operation style should actually be something like

`MyString rawString("--> here");`
`myHtmlDom.RenderHeader(rawString);`

*inherently/implicitly/automatically* presented as:

`<h1>--&gt; here</h1>`

HTH!

Hashes can have default values different from `nil`, see https://docs.ruby-lang.org/en/2.5.0/Hash.html#method-i-default-3D

So we must not rely on the hash returning `nil` for missing keys.
Using this you can find a file name with a custom extension

```ruby
#cells/my_mailer_cell.rb
class MyMailerCell < Cell::ViewModel
  include Partial
end
```

```erb
<!-- cells/my_mailer/some_view.erb -->
...
render partial: '../views/mailer/shared/inky-partial, suffix: :'inky-erb, formats: [:html],'
...
```

```html
<!-- views/mailer/shared/_inky-partial.html.inky-erb -->
<row>
  <columns></columns>
  <columns>Easy emails with Inky templating language</columns>
  <columns></columns>
</row>
```

cf https://github.com/trailblazer/cells-erb/issues/8
Hey guys, I'm having some issue with Airbrake and Cells.

Gems used:
```
airbrake (7.1.0)
airbrake-ruby (2.6.0)
cells (4.1.7)
cells-haml (0.0.10)
cells-rails (0.0.8)
```

The problem occurs when there is exception raised within a Cell that doesn't implement a standard show method or view (named after the cell). Here's the relevant part of the stacktrace:

```
cells (4.1.7) lib/cell/view_model.rb:167:in `find_template'
cells (4.1.7) lib/cell/view_model.rb:109:in `render_to_string'
cells (4.1.7) lib/cell/layout.rb:23:in `render_to_string'
cells (4.1.7) lib/cell/view_model.rb:104:in `render'
cells (4.1.7) lib/cell/view_model.rb:98:in `show'
cells (4.1.7) lib/cell/view_model.rb:114:in `render_state'
cells (4.1.7) lib/cell/caching.rb:46:in `render_state'
cells (4.1.7) lib/cell/view_model.rb:92:in `call'
cells-rails (0.0.8) lib/cell/rails.rb:54:in `call'
cells (4.1.7) lib/cell/layout.rb:43:in `call'
cells (4.1.7) lib/cell/view_model.rb:125:in `to_s'
airbrake-ruby (2.6.0) lib/airbrake-ruby/filters/thread_filter.rb:89:in `sanitize_value'
airbrake-ruby (2.6.0) lib/airbrake-ruby/filters/thread_filter.rb:85:in `block in sanitize_value'
airbrake-ruby (2.6.0) lib/airbrake-ruby/filters/thread_filter.rb:85:in `map'
airbrake-ruby (2.6.0) lib/airbrake-ruby/filters/thread_filter.rb:85:in `sanitize_value'
airbrake-ruby (2.6.0) lib/airbrake-ruby/filters/thread_filter.rb:68:in `block in fiber_variables'
airbrake-ruby (2.6.0) lib/airbrake-ruby/filters/thread_filter.rb:66:in `map'
airbrake-ruby (2.6.0) lib/airbrake-ruby/filters/thread_filter.rb:66:in `with_object'
airbrake-ruby (2.6.0) lib/airbrake-ruby/filters/thread_filter.rb:66:in `fiber_variables'
airbrake-ruby (2.6.0) lib/airbrake-ruby/filters/thread_filter.rb:42:in `call'
airbrake-ruby (2.6.0) lib/airbrake-ruby/filter_chain.rb:47:in `block in refine'
airbrake-ruby (2.6.0) lib/airbrake-ruby/filter_chain.rb:45:in `each'
airbrake-ruby (2.6.0) lib/airbrake-ruby/filter_chain.rb:45:in `refine'
airbrake-ruby (2.6.0) lib/airbrake-ruby/notifier.rb:126:in `send_notice'
airbrake-ruby (2.6.0) lib/airbrake-ruby/notifier.rb:50:in `notify'
airbrake (7.1.0) lib/airbrake/rack/middleware.rb:80:in `notify_airbrake'
airbrake (7.1.0) lib/airbrake/rack/middleware.rb:54:in `rescue in call'
airbrake (7.1.0) lib/airbrake/rack/middleware.rb:51:in `call'
```

As you can see Airbrake is picking up the exception, and it goes all the way down to here:
https://github.com/airbrake/airbrake-ruby/blob/master/lib/airbrake-ruby/filters/thread_filter.rb#L89

`value` passed to sanitize is the Cell that caused the exception, and calling a `to_s` on it makes a call on that cell here:
https://github.com/trailblazer/cells/blob/master/lib/cell/view_model.rb#L125

Now without that `show` method implemented on the cell, it tries to load the template by the cell name, and as it is also missing I get another `Cell::TemplateMissingError` exception raised, within the Airbrake methods, which prevents from reporting the original exception.

I have tried adding empty `show` method to my cell and it fixed the problem.

But is there any way to make the Airbrake and Cells play nicer? 
I'm not always using the default `show` action or view...