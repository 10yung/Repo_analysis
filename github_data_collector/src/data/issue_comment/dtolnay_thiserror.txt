Added in https://github.com/dtolnay/thiserror/releases/tag/1.0.7. I am looking to build just a little more experience with this attribute in real code before settling on how best to approach it in docs.
For example `#[error("{}", .0.data)]` currently works but `#[error("{}", &.0.data)]` does not. We should make the `.0` / `.var` variables work wherever possible.
I'd like to use a single Error type for various modules inside my crate, and occasionally the need arises to propagate errors from other projects using `?` for ergonomics.

It seems intuitive to just include a
```rust
    #[error("Internal Error")]
    InternalError {
        #[from]
        e: anyhow::Error,
    },
```
in my Error enum, but the problem is that some errors require an additional conversion into anyhow::Error, for example:
```rust
fn load_records(db: DB) -> Result<Vec<Record>, MyError> {
    db.get_connection()?.load_records(...)?
}
```
In the above example I'd like the possible errors from diesel/r2d2/what not to map to my `InternalError` variant. The problem is there is no automatic conversion from those into MyError, since it requires an additional conversion to anyhow::Error...

What is the idiomatic/recommended way to deal with these cases?

Thanks in advance
I recently cooked up https://github.com/CraneStation/wasmtime/pull/532 which fixed a "double error message" getting printed for errors such as:

```rust
pub enum CompileError {
    #[error("WebAssembly translation error: {0}")]
    Wasm(#[from] WasmError),
}
```

It'd be great if this crate could somehow issue a diagnostic indicating that there's no need to include the `{0}` in the `#[error]` because it's already rendered in the final error via `#[from]`
I think it'd be immensely useful if `iter_chain` can be added on the type that derives Error and delegated to std::error::Error's iter_chain on nightlies with `error_iter` feature.  Sure, one can always convert it into the std::error trait object and do it from there, but I think this will be ergonomic to have it right on the type.

https://doc.rust-lang.org/std/error/trait.Error.html#method.iter_chain