Whats about the registering and unregistering, why cann't the @Subscribe function be Lifecycle Aware, registering on Class creation and unregistering on destruction, would be really neat if this could be added :)
Hello, 

I would like to contribute an AndroidX upgrade as well as the project upgrade to the Android library (aar).

Thank you,

Mykola
All @Subscribe methods gets deleted by using R8, no matter of proguard rules. All subscribe methods are public.

```
shrinkResources true
minifyEnabled true
```

Proguard rules:

```
-keepattributes *Annotation*
-keepclassmembers class * {
    @org.greenrobot.eventbus.Subscribe <methods>;
}
-keep enum org.greenrobot.eventbus.ThreadMode { *; }

# Only required if you use AsyncExecutor
-keepclassmembers class * extends org.greenrobot.eventbus.util.ThrowableFailureEvent {
    <init>(java.lang.Throwable);
}
```

This bug is critical since EventBus is no longer working with newest Android technologies
In many backend applications, we use exceptions to deal with business logic。For an example: 
if(accountAmount < 100) throw new AccountException("000001","lack of money");
There will be a interceptor to translate this exception to message, then front pages can show this message to users.  
throwSubscriberException(true)  wrap the original exception like 
if (throwSubscriberException) {
    throw new EventBusException("Invoking subscriber failed", cause);
}
So we have to modify interceptor to use EventBus.
may be , if cause instanceof rumtime  just throw it
I want to know what the best practice for threads working with EventBus is, such as when to register and when to unregister.
Use new dependency configurations. Note: for the processor this changes the dependencies on EventBus and java-common from `compile` to `runtime` in the resulting POM. Based on a quick test this is fine.

Change from `prefered` to `preferred` properties.

Extract common publishing script.
Phenomenon: usually we register EventBus in the base class and annotate the subscribe method in the subclass, but if there is no public method in the subclass,the Eventbus will report : Fragment and its super classes have no public methods with the @Subscribe annotation

Suggestion: delete this code:
if (subscriberMethods.isEmpty()) {
    throw new EventBusException("Subscriber " + subscriberClass
                    + " and its super classes have no public methods with the @Subscribe annotation");
}

so:When subscriberMethods is empty, it returns subscriberMethods directly and no more errors are reported
Closes #528 
When i used to start with onresume,

@Override
    public void onResume() {
        super.onResume();
        EventBus.getDefault().register(this);
    }


it shot the error like,


h.a.a.e: Subscriber class c.b.a.d.c.b.r and its super classes have no public methods with the @Subscribe annotation
        at h.a.a.p.a(:67)
        at h.a.a.c.c(:140)
        at c.b.a.d.c.b.r.onResume(:374)
        at androidx.fragment.app.Fragment.performResume(:2713)
        at androidx.fragment.app.l.a(:1388)
        at androidx.fragment.app.l.j(:1642)
        at androidx.fragment.app.l.i(:1736)
        at androidx.fragment.app.l.a(:1800)
        at androidx.fragment.app.a.e(:446)
        at androidx.fragment.app.l.a(:2584)
        at androidx.fragment.app.l.b(:2372)
        at androidx.fragment.app.l.c(:2327)
        at androidx.fragment.app.l.c(:2230)
        at androidx.fragment.app.l$c.run(:414)
        at android.os.Handler.handleCallback(Handler.java:739)
        at android.os.Handler.dispatchMessage(Handler.java:95)
        at android.os.Looper.loop(Looper.java:148)
        at android.app.ActivityThread.main(ActivityThread.java:7325)
        at java.lang.reflect.Method.invoke(Native Method)
        at com.android.internal.os.ZygoteInit$MethodAndArgsCaller.run(ZygoteInit.java:1230)
        at com.android.internal.os.ZygoteInit.main(ZygoteInit.java:1120)
refer：[refer](https://www.jianshu.com/p/3b2f5c4e1df7)
issue:  [issue](https://github.com/greenrobot/EventBus/issues/539)