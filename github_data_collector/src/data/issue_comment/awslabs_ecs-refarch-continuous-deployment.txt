Am getting S3 Access denied error. Can you please check this.
Removed mappings and added SSM Parameter as this will dynamically allow for the latest ecs-optimized-ami each time. 

      - /aws/service/ecs/optimized-ami/amazon-linux-2/gpu/recommended/image_id
      - /aws/service/ecs/optimized-ami/amazon-linux-2/arm64/recommended/image_id
      - /aws/service/ecs/optimized-ami/amazon-linux-2/recommended/image_id
      - /aws/service/ecs/optimized-ami/amazon-linux/recommended/image_id

Note: 
Your user account must have the following IAM permissions to retrieve the Amazon ECS-optimized AMI metadata. These permissions have been added to the AmazonECS_FullAccess IAM policy.
    ssm:GetParameters
    ssm:GetParameter
    ssm:GetParametersByPath

a0ccdc5
@Seblat5ch
Seblat5ch
No longer required

see ecs cluster template


By submitting this pull request, I confirm that you can use, modify, copy, and redistribute this contribution, under the terms of your choice.

Hi folks,

Is it possible to update this with a reference implementation for automatically rolling back to a previous version when the ECS deployment fails? Better still, to also run a small smoke test and rollback if it fails as well.
Hi!

Can you help me! How can add codeCommit instead for GitHub?
Access to S3 is denied. Can you provide the access to S3?
I would like to use a similar architecture to deploy my application to ECS in another account, that way I would have the source (in my case, CodeCommit) and CodeBuild project in one account and the deployment on an ECS in another account. I found something similar in [this article](https://aws.amazon.com/blogs/devops/aws-building-a-secure-cross-account-continuous-delivery-pipeline/?nc1=f_ls), but it uses CloudFormation to deploy to Lambda and since things can vary greatly from service to service, I decided to ask your opinions. Is it can be done with CodePipeline integration with ECS? If not, CloudFormation should work, right? 
Thanks in advance for the help!
Hello, I'm kind of new into the Cloudformation helper-scripts. Correct me if i'm wrong, but i realized that in the conf file **"/etc/cfn/hooks.d/cfn-auto-reloader.conf"** the path should point to the actual resource logical id (LaunchConfiguration) and it should look like this:  path=Resources.LaunchConfiguration.Metadata.AWS::CloudFormation::Init

Thank you for uploading this project, it has helped me a lot.

Sorry for my English.


Regards from Chile.


How should one go about implementing version control for CF templates?  For example, would it be possible to create a CodePipeline that connects to a GitHub repo where the templates are stored and then push files to an S3 bucket?
I have a containerized ASP.NET Core 2.1 Web API with the following Dockerfile:

```dockerfile
FROM microsoft/dotnet:2.1-sdk-alpine AS build

# Set working directory within container
WORKDIR /app

# Copy files
COPY ./src .

# Restore dependencies
RUN dotnet restore

# Build app
RUN dotnet publish -c Release -o dist

# Build runtime image
FROM microsoft/dotnet:2.1-aspnetcore-runtime-alpine AS runtime
COPY --from=build /app/dist .
ENTRYPOINT ["dotnet", "demo-netcore-api.dll"]
```

I need to update the `TaskDefinition` of service.yaml, but I need an example of the `ContainerDefinitions` section.  Would you be able to tell me where I could find one?

Thanks.
Update the CloudFormation links to use Fargate where available