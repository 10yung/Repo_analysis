I'm managing authentication using `passport` in my app(a `sails.js` app). I am using redis as storage for persistent session management using `connect-redis`.

### Expected behavior
Whenever user authenticates using username and password, a session key should be stored in redis(used to authenticate further requests without the need of username/password). Further requests should not create any new session key entries in redis unless user logs out.

### Actual behavior
New entries are created in redis for every request

### Steps to reproduce
Set up the following environment and log in the user and make subsequent requests, check redis keys

I have reported this issue with `sails` and `connect-redis` and have shared steps I used for debugging [here](https://github.com/balderdashy/sails/issues/6881#issue-512798239) and [here](https://github.com/tj/connect-redis/issues/287#issue-512797441). As discussed on sails issues, it is an issue in passport. 


### Environment

* Operating System: Linux
* Node version: `4.6.1`
* Passport version: `0.3.2`
* Passport auth strategy : `passport-local@1.0.0`
* Sails version : `0.12.14`
* connect-redis version : `3.0.2`

Link to 'delegated authentication' in documentation (under OAuth) is broken.

### Expected behavior
Link should redirect to an article

### Actual behavior
Receive a 404 error

### Steps to reproduce
Click the 'delegated authentication' link in documentation (under OAuth) is broken.

### Environment

* Operating System: N/A
* Node version: N/A
* passport version: N/A

I would like to write a custom strategy that validates requests based on a cookie.  The cookie can expire, but contains sufficient information that I can refresh the auth, but this changes the cookie value.  I would like this refresh process to be transparent to the client, so my strategy should be able to set a new cookie when necessary but only the request to strategies, not the response.

Strategies can optionally specify that they would like to receive the request; if the same was implemented for the response then it would be backward compatible for existing clients, as no additional arguments would be provided by default.

The inelegant workaround is to provide the refreshed data in the user and then use additional middleware to extract that data and set cookies as necessary.  The decoupling is a bit of a mess here though, as it makes it more complex to understand, and easier to mess up (e.g. by not resetting the cookie in the middleware).

Related to discussion issue https://github.com/passport/discuss/issues/38, but it seems like the best implementation would be a new feature, so added here as a "please do this" rather than "how do I do that".

### Expected behavior

Strategies should have access to responses.

### Actual behavior

Strategies do not have access to responses.

### Steps to reproduce

N/A

### Environment

N/A
Good night!
I was starting at authentication on nestjs on the official site https://docs.nestjs.com/techniques/authentication and after i build it, the following type error appear:

node_modules/@types/passport/index.d.ts(77,64): error TS2344: Type 'Request<Dictionary<string>>' does not satisfy the constraint 'IncomingMessage'.
  Type 'Request<Dictionary<string>>' is missing the following properties from type 'IncomingMessage': httpVersion, httpVersionMajor, httpVersionMinor, connection, and 38 more.
node_modules/@types/passport/index.d.ts(79,66): error TS2344: Type 'Request<Dictionary<string>>' does not satisfy the constraint 'IncomingMessage'.
node_modules/@types/passport/node_modules/@types/express/index.d.ts(90,90): error TS2315: Type 'ErrorRequestHandler' is not generic.
node_modules/@types/passport/node_modules/@types/express/index.d.ts(99,78): error TS2315: Type 'Request' is not generic.
node_modules/@types/passport/node_modules/@types/express/index.d.ts(100,85): error TS2315: Type 'RequestHandler' is not generic

passport: 0.4.0
@types/passport: 1.0.2
Any idea if this works with Github Enterprise?
Hi everybody!
I have a problem when I want to send response to frontend: 

"Error [ERR_HTTP_HEADERS_SENT]: Cannot set headers after they are sent to the client"

```
passport.use(new LocalStrategy(
  function(username, password, done) {
    console.log(username);
 users.map((u) => {
  if((u.login === username) && (u.password === password)){
    return done(null, username);
  }
 });
 return done(null, false);   
  }
));

app.post('/api/getAuth', passport.authenticate('local', { failureRedirect: '/login' }),
function(req, res) {
  return res.sendStatus(200);
});
```
In frontend log I see net::ERR_EMPTY_RESPONSE

passport v0.4.0, express v4.17.1
Hi, this is really minor, but whenever I want to check the example codes from the official documents, 

I click the link 
    > github informs me of 404 
    > I correct the link 
    > get to the right example repository.

Can somebody fix this?
### Expected behavior
I have an application that may look for the user in a different database based on the request's hostname.

Sure, I could store the DB identifier as part of the user id, and serialize/deserialize based on that, but that puts unnecesarry burden on the session store, that would have to store the DB identifier, even though it doesn't need to.

...

I started writing this issue as a feature request for the request object to be made available in [serializeUser](https://github.com/jaredhanson/passport/blob/master/lib/authenticator.js#L255)/[deserializeUser](https://github.com/jaredhanson/passport/blob/master/lib/authenticator.js#L315), but upon checking the source, I noticed that is alraedy the case in both [serializeUser](https://github.com/jaredhanson/passport/blob/master/lib/authenticator.js#L292) and in [deserializeUser](https://github.com/jaredhanson/passport/blob/master/lib/authenticator.js#L355), so really, the docs need to be updated... Unless I'm reading the source wrong, in which case, yeah, please also pass the req object to serializeUser/deserializeUser callback.

### Actual behavior
[The "session" section in the docs](http://www.passportjs.org/docs/configure/#sessions) makes no mention or example showing that a request can be used.

### Environment

* Operating System: Windows 10 x64
* Node version: latest
* passport version: latest

The Reddit strategy hasn't been updated in 7 years. The demo in it doesn't work.

If you have gotten Reddit oAuth to work, can you share your code?

Thanks!
This is, I'll admit, partially a request for help. But there's a general point as well: the Passport docs simply don't explain how it interacts with route handling. I believe it's causing the issue I posted here: https://stackoverflow.com/questions/57470000/cant-get-passport-js-redirect-and-flash-message-to-work (although correct me if I'm wrong). If so, the questions are:

1. How to use Passport with multiple route files?
2. Are the paths in e.g., `failureRedirect` relative to the application root or to the particular endpoint on which they're defined? This is particularly confusing if you're using a multiple route-file setup. (Because if relative to the endpoint, you'd have to do something like `'../../'` to get back to the application root. Although that doesn't seem to work in my case above.)