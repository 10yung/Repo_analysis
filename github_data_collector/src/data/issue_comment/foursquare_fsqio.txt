Hello! I was trying to use the buildgen plugin and it looks like pants development has left it in the dust. e.g. within the plugin source there's a `from pants.build_graph.source_mapper import LazySourceMapper`, which no longer exists within pants (since 2018 or so?). Is there an updated version of buildgen which hasn't been upstreamed yet or has the project been abandoned?
Hello,

I'm running into an issue using the latest fsqio master where ivy is consistently unable to resolve hadoop-lzo and fails to run serve.py.  

```
[NOT FOUND ] com.hadoop.gplcompression#hadoop-lzo;0.4.19!hadoop-lzo.jar (0ms)
==== maven.twttr.com-maven: tried
https://maven.twttr.com/com/hadoop/gplcompression/hadoop-lzo/0.4.19/hadoop-lzo-0.4.19.jar
```

I'm not all too familiar with the dependency management aspects of twofishes. I'm running this from an ubuntu 14.04 docker container, and everything has worked historically ... until now.  Any recommendations on how to figure out what's going on / solve for this?  I would greatly appreciate it.

Strangely, when I `git clone` the fsqio repo, and run serve.py from the command line on an Amazon Linux 1 EC2 instance it works perfectly.  No dependency issues.  I need to run it from a docker container, though preferably. 
The thrift value below does not compile. [Link to discussion in #code](https://foursquare.slack.com/archives/C024L62EB/p1540920946040500)
```
const map<string, list<string>> NamesToUrls = {
  "myName": [
    "https://helloworld.com",
    "https://foobar.com"
  ]
}
```

Error
```
==== stderr ====
                       SLF4J: Failed to load class "org.slf4j.impl.StaticLoggerBinder".
                       SLF4J: Defaulting to no-operation (NOP) logger implementation
                       SLF4J: See http://www.slf4j.org/codes.html#StaticLoggerBinder for further details.
                       java.lang.Exception: unable to parse map value '{
  							"myName": [
    							"https://helloworld.com",
    							"https://foobar.com"
 							]
						}'
                       	at io.fsq.spindle.codegen.runtime.MapRenderType.renderValue(RenderType.scala:275)
                       	at io.fsq.spindle.codegen.runtime.ScalaConst.valueOption(ScalaConst.scala:28)
                       	at src.resources.io.fsq.ssp.codegen.scala.$_scalate_$constants_ssp$$anonfun$$_scalate_$render$1.apply(constants.ssp.scala:32)
                       	at src.resources.io.fsq.ssp.codegen.scala.$_scalate_$constants_ssp$$anonfun$$_scalate_$render$1.apply(constants.ssp.scala:29)
                       	at scala.collection.immutable.List.foreach(List.scala:381)
                       	at src.resources.io.fsq.ssp.codegen.scala.$_scalate_$constants_ssp$.$_scalate_$render(constants.ssp.scala:29)
                       	at src.resources.io.fsq.ssp.codegen.scala.$_scalate_$constants_ssp.render(constants.ssp.scala:48)
                       	at org.fusesource.scalate.RenderContext$$anonfun$render$1$$anonfun$apply$mcV$sp$1.apply$mcV$sp(RenderContext.scala:391)
                       	at org.fusesource.scalate.RenderContext$$anonfun$render$1$$anonfun$apply$mcV$sp$1.apply(RenderContext.scala:391)
                       	at org.fusesource.scalate.RenderContext$$anonfun$render$1$$anonfun$apply$mcV$sp$1.apply(RenderContext.scala:391)
                       	at org.fusesource.scalate.RenderContext$class.withUri(RenderContext.scala:447)
                       	at org.fusesource.scalate.DefaultRenderContext.withUri(DefaultRenderContext.scala:30)
                       	at org.fusesource.scalate.RenderContext$$anonfun$render$1.apply$mcV$sp(RenderContext.scala:390)
                       	at org.fusesource.scalate.RenderContext$$anonfun$render$1.apply(RenderContext.scala:390)
                       	at org.fusesource.scalate.RenderContext$$anonfun$render$1.apply(RenderContext.scala:390)
                       	at org.fusesource.scalate.RenderContext$class.withAttributes(RenderContext.scala:421)
                       	at org.fusesource.scalate.DefaultRenderContext.withAttributes(DefaultRenderContext.scala:30)
                       	at org.fusesource.scalate.RenderContext$class.render(RenderContext.scala:389)
                       	at org.fusesource.scalate.DefaultRenderContext.render(DefaultRenderContext.scala:30)
                       	at src.resources.io.fsq.ssp.codegen.scala.$_scalate_$record_ssp$.$_scalate_$render(record.ssp.scala:53)
                       	at src.resources.io.fsq.ssp.codegen.scala.$_scalate_$record_ssp.render(record.ssp.scala:103)
                       	at org.fusesource.scalate.layout.NullLayoutStrategy$.layout(LayoutStrategy.scala:43)
                       	at org.fusesource.scalate.TemplateEngine$$anonfun$layout$1$$anonfun$apply$mcV$sp$1.apply$mcV$sp(TemplateEngine.scala:559)
                       	at org.fusesource.scalate.TemplateEngine$$anonfun$layout$1$$anonfun$apply$mcV$sp$1.apply(TemplateEngine.scala:559)
                       	at org.fusesource.scalate.TemplateEngine$$anonfun$layout$1$$anonfun$apply$mcV$sp$1.apply(TemplateEngine.scala:559)
                       	at org.fusesource.scalate.RenderContext$class.withUri(RenderContext.scala:447)
                       	at org.fusesource.scalate.DefaultRenderContext.withUri(DefaultRenderContext.scala:30)
                       	at org.fusesource.scalate.TemplateEngine$$anonfun$layout$1.apply$mcV$sp(TemplateEngine.scala:558)
                       	at org.fusesource.scalate.TemplateEngine$$anonfun$layout$1.apply(TemplateEngine.scala:555)
                       	at org.fusesource.scalate.TemplateEngine$$anonfun$layout$1.apply(TemplateEngine.scala:555)
                       	at org.fusesource.scalate.RenderContext$.using(RenderContext.scala:47)
                       	at org.fusesource.scalate.TemplateEngine.layout(TemplateEngine.scala:555)
                       	at org.fusesource.scalate.TemplateEngine.layout(TemplateEngine.scala:587)
                       	at org.fusesource.scalate.TemplateEngine.layout(TemplateEngine.scala:579)
                       	at io.fsq.spindle.codegen.binary.ThriftCodegen$$anonfun$compile$2.apply(ThriftCodegen.scala:233)
                       	at io.fsq.spindle.codegen.binary.ThriftCodegen$$anonfun$compile$2.apply(ThriftCodegen.scala:187)
                       	at scala.collection.immutable.List.foreach(List.scala:381)
                       	at io.fsq.spindle.codegen.binary.ThriftCodegen$.compile(ThriftCodegen.scala:187)
                       	at io.fsq.spindle.codegen.binary.ThriftCodegen$.main(ThriftCodegen.scala:142)
                       	at io.fsq.spindle.codegen.binary.ThriftCodegen.main(ThriftCodegen.scala)
                       	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
                       	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
                       	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
                       	at java.lang.reflect.Method.invoke(Method.java:498)
                       	at com.martiansoftware.nailgun.NGSession.run(NGSession.java:280)
                       Caused by: scala.MatchError: [Ljava.lang.String;@68cb85dc (of class [Ljava.lang.String;)
                       	at io.fsq.spindle.codegen.runtime.MapRenderType$$anonfun$2.apply(RenderType.scala:263)
                       	at io.fsq.spindle.codegen.runtime.MapRenderType$$anonfun$2.apply(RenderType.scala:263)
                       	at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
                       	at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
                       	at scala.collection.IndexedSeqOptimized$class.foreach(IndexedSeqOptimized.scala:33)
                       	at scala.collection.mutable.ArrayOps$ofRef.foreach(ArrayOps.scala:186)
                       	at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
                       	at scala.collection.mutable.ArrayOps$ofRef.flatMap(ArrayOps.scala:186)
                       	at io.fsq.spindle.codegen.runtime.MapRenderType.renderValue(RenderType.scala:263)
                       	... 44 more
                       
                       ==== stdout ====
```



Hi!

I've been trying to get twofishes working with docker but [your image](https://hub.docker.com/r/fsqio/twofishes/) pulls pre-compiled data from twofishes.net which seems to be down. 

Will twofishes be put back up? If not, would it be possible to get a link to the latest pre-compiled data? I am having trouble compiling it myself and I have resorted to using a pre-compiled version that I found in the DSTK EC2 AMI. 

Thanks  
During importing the data into the DB with "./src/jvm/io/fsq/twofishes/scripts/parse.py -w `pwd`/data/" the indexer crashed with the following error message. After the crash the indexer was stuck doing nothing, and the no more records were processed. Processed data was downloaded with "./src/jvm/io/fsq/twofishes/scripts/download-world.sh"
```
8246718 INFO  i.f.t.indexer.output.PrefixIndexer - done with 114000 of 2994876 prefixes
8247980 INFO  i.f.t.indexer.output.PrefixIndexer - done with 115000 of 2994876 prefixes
Exception in thread "main" io.fsq.rogue.RogueException: Mongo query on geocoder [db.name_index.find({ "name" : { "$regex" : "^?" , "$options" : ""} , "excludeFromPrefixIndex" : { "$ne" : true}}).sort({ "pop" : -1}).limit(1000)] failed after 2 ms
        at io.fsq.rogue.adapter.BlockingMongoClientAdapter.runCommand(BlockingMongoClientAdapter.scala:118)
        at io.fsq.rogue.adapter.BlockingMongoClientAdapter.runCommand(BlockingMongoClientAdapter.scala:52)
        at io.fsq.rogue.adapter.MongoClientAdapter.queryRunner(MongoClientAdapter.scala:471)
        at io.fsq.rogue.adapter.MongoClientAdapter.query(MongoClientAdapter.scala:496)
        at io.fsq.rogue.query.QueryExecutor.fetch(QueryExecutor.scala:144)
        at io.fsq.twofishes.indexer.output.PrefixIndexer.getRecordsByPrefix(PrefixIndexer.scala:76)
        at io.fsq.twofishes.indexer.output.PrefixIndexer$$anonfun$writeIndexImpl$2.apply(PrefixIndexer.scala:115)
        at io.fsq.twofishes.indexer.output.PrefixIndexer$$anonfun$writeIndexImpl$2.apply(PrefixIndexer.scala:110)
        at scala.collection.TraversableLike$WithFilter$$anonfun$foreach$1.apply(TraversableLike.scala:733)
        at scala.collection.immutable.List.foreach(List.scala:381)
        at scala.collection.TraversableLike$WithFilter.foreach(TraversableLike.scala:732)
        at io.fsq.twofishes.indexer.output.PrefixIndexer.writeIndexImpl(PrefixIndexer.scala:110)
        at io.fsq.twofishes.indexer.output.Indexer$$anonfun$writeIndex$1.apply$mcV$sp(Indexer.scala:54)
        at io.fsq.twofishes.indexer.output.Indexer$$anonfun$writeIndex$1.apply(Indexer.scala:54)
        at io.fsq.twofishes.indexer.output.Indexer$$anonfun$writeIndex$1.apply(Indexer.scala:54)
        at io.fsq.twofishes.util.DurationUtils$.inNanoseconds(DurationUtils.scala:16)
        at io.fsq.twofishes.util.DurationUtils$class.logDuration(DurationUtils.scala:23)
        at io.fsq.twofishes.indexer.output.Indexer.logDuration(Indexer.scala:37)
        at io.fsq.twofishes.indexer.output.Indexer.writeIndex(Indexer.scala:54)
        at io.fsq.twofishes.indexer.output.NameIndexer.writeIndexImpl(NameIndexer.scala:84)
        at io.fsq.twofishes.indexer.output.Indexer$$anonfun$writeIndex$1.apply$mcV$sp(Indexer.scala:54)
        at io.fsq.twofishes.indexer.output.Indexer$$anonfun$writeIndex$1.apply(Indexer.scala:54)
        at io.fsq.twofishes.indexer.output.Indexer$$anonfun$writeIndex$1.apply(Indexer.scala:54)
        at io.fsq.twofishes.util.DurationUtils$.inNanoseconds(DurationUtils.scala:16)
        at io.fsq.twofishes.util.DurationUtils$class.logDuration(DurationUtils.scala:23)
        at io.fsq.twofishes.indexer.output.Indexer.logDuration(Indexer.scala:37)
        at io.fsq.twofishes.indexer.output.Indexer.writeIndex(Indexer.scala:54)
        at io.fsq.twofishes.indexer.output.OutputIndexes.buildIndexes(OutputHFile.scala:28)
        at io.fsq.twofishes.indexer.importers.geonames.GeonamesParser$.writeIndexes(GeonamesParser.scala:144)
        at io.fsq.twofishes.indexer.importers.geonames.GeonamesParser$.main(GeonamesParser.scala:106)
        at io.fsq.twofishes.indexer.importers.geonames.GeonamesParser.main(GeonamesParser.scala)
Caused by: com.mongodb.MongoQueryException: Query failed with error code 2 and error message 'Regular expression is invalid: invalid UTF-8 string' on server 127.0.0.1:27017
        at com.mongodb.operation.FindOperation$1.call(FindOperation.java:521)
        at com.mongodb.operation.FindOperation$1.call(FindOperation.java:510)
        at com.mongodb.operation.OperationHelper.withConnectionSource(OperationHelper.java:431)
        at com.mongodb.operation.OperationHelper.withConnection(OperationHelper.java:404)
        at com.mongodb.operation.FindOperation.execute(FindOperation.java:510)
        at com.mongodb.operation.FindOperation.execute(FindOperation.java:81)
        at com.mongodb.Mongo.execute(Mongo.java:836)
        at com.mongodb.Mongo$2.execute(Mongo.java:823)
        at com.mongodb.OperationIterable.iterator(OperationIterable.java:47)
        at com.mongodb.OperationIterable.forEach(OperationIterable.java:70)
        at com.mongodb.FindIterableImpl.forEach(FindIterableImpl.java:166)
        at io.fsq.rogue.adapter.BlockingMongoClientAdapter.forEachProcessor(BlockingMongoClientAdapter.scala:162)
        at io.fsq.rogue.adapter.BlockingMongoClientAdapter.forEachProcessor(BlockingMongoClientAdapter.scala:52)
        at io.fsq.rogue.adapter.MongoClientAdapter$$anonfun$query$1.apply(MongoClientAdapter.scala:496)
        at io.fsq.rogue.adapter.BlockingMongoClientAdapter.findImpl(BlockingMongoClientAdapter.scala:272)
        at io.fsq.rogue.adapter.BlockingMongoClientAdapter.findImpl(BlockingMongoClientAdapter.scala:52)
        at io.fsq.rogue.adapter.MongoClientAdapter$$anonfun$queryRunner$1.apply(MongoClientAdapter.scala:472)
        at io.fsq.rogue.util.DefaultQueryLogger.onExecuteQuery(QueryLogger.scala:52)
        at io.fsq.rogue.adapter.BlockingMongoClientAdapter.runCommand(BlockingMongoClientAdapter.scala:113)
        ... 30 more

```
I have
```
const i64 MaxTotalAttachmentBytes = 10000000000
const i64 MaxCoverPhotoBytes = 50000000 // 50 MB
```
in my Thrift and get the following when I compile:
```
Omers-MacBook-Pro:sigma-monorepo-2point0 omer$ ./pants compile src/thrift/::

18:11:15 00:00 [main]
               (To run a reporting server: ./pants server)
18:11:15 00:00   [setup]
18:11:15 00:00     [parse]
               Executing tasks in goals: bootstrap -> imports -> unpack-jars -> deferred-sources -> gen -> jvm-platform-validate -> resolve -> compile
18:11:15 00:00   [bootstrap]
18:11:15 00:00     [jar-dependency-management]
18:11:15 00:00     [bootstrap-jvm-tools]
18:11:15 00:00   [imports]
18:11:15 00:00     [ivy-imports]
18:11:15 00:00   [unpack-jars]
18:11:15 00:00     [unpack-jars]
18:11:15 00:00   [deferred-sources]
18:11:15 00:00     [deferred-sources]
18:11:15 00:00   [gen]
18:11:15 00:00     [spindle]
18:11:16 00:01     [thrift]
18:11:16 00:01     [protoc]
18:11:16 00:01     [antlr]
18:11:16 00:01     [ragel]
18:11:16 00:01     [jaxb]
18:11:16 00:01     [wire]
18:11:16 00:01   [jvm-platform-validate]
18:11:16 00:01     [jvm-platform-validate]WARN] No default jvm platform is defined.

18:11:16 00:01       [cache]
                   No cached artifacts for 55 targets.
                   Invalidated 55 targets.
18:11:16 00:01   [resolve]
18:11:16 00:01     [ivy]
18:11:16 00:01   [compile]
18:11:16 00:01     [compile-jvm-prep-command]
18:11:16 00:01       [jvm_prep_command]
18:11:16 00:01     [compile-prep-command]
18:11:16 00:01     [compile]
18:11:16 00:01     [zinc]
18:11:16 00:01       [cache]
                   No cached artifacts for 1 target.
                   Invalidated 1 target.
18:11:16 00:01       [isolation-zinc-pool-bootstrap]
                   [1/1] Compiling 2 zinc sources in 1 target (.pants.d/gen/spindle/src/jvm:src.thrift.com.thesigma.merit.merit-scala).
18:11:16 00:01       [compile]

18:11:16 00:01         [zinc]
                       [info] Compiling 1 Scala source and 1 Java source to /Users/omer/code/sigma-monorepo-2point0/.pants.d/compile/zinc/252d64521cf9/.pants.d.gen.spindle.src.jvm.src.thrift.com.thesigma.merit.merit-scala/current/classes...
                       [error] /Users/omer/code/sigma-monorepo-2point0/.pants.d/gen/spindle/src/jvm/com/thesigma/merit/gen/merit.scala:24: integer number too large
                       [error]       val MaxTotalAttachmentBytes: Long = 10000000000
                       [error]                                           ^
                       [error] /Users/omer/code/sigma-monorepo-2point0/.pants.d/gen/spindle/src/jvm/com/thesigma/merit/gen/merit.scala:25: ';' expected but 'val' found.
                       [error]       val MaxCoverPhotoBytes: Long = 50000000
                       [error]       ^
                       [error] two errors found
                       [error] Compile failed at Jul 27, 2017 6:11:16 PM [0.427s]

                   compile(.pants.d/gen/spindle/src/jvm:src.thrift.com.thesigma.merit.merit-scala) failed: Zinc compile failed.
FAILURE: Compilation failure: Failed jobs: compile(.pants.d/gen/spindle/src/jvm:src.thrift.com.thesigma.merit.merit-scala)


18:11:16 00:01   [complete]
               FAILURE
```

It seems like just having Spindle output `10000000000L` instead of `10000000000` would fix the problem.
Hi, I've followed this: https://github.com/foursquare/fsqio/blob/master/src/jvm/io/fsq/twofishes/docs/twofishes_inputs.md#polygons and put my shape files into data/private/polygons/

When I run the build with `./src/jvm/io/fsq/twofishes/scripts/parse.py --world --output_s2_covering_index --output_s2_interior_index --output_prefix_index --output_revgeo_index --yes-i-am-sure` it uses significantly more disk space than without the shapefiles in place, however the resulting indexes are no bigger.

Is there some other step I need to run to export the polygons as well?
First thanks to the Foursquare team for opening such a great resource.  I've uncovered content issues, realizing some are TwoFishes-relevant while others Geonames-relevant

**Countries**
1. East Germany should not be a country.  Even shows on Foursquare.com... strange
2. Democratic Republic of Congo and Republic of Congo are being treated as the same country in foursquare.com and latest index build.  Strangely, the TwoFishes demo recognizes them as two different countries as they should be
3. Cities in American Samoa follow wrong nomenclature.  For example Pago Pago is labeled as Pago Pago, Eastern District instead of Pago Pago, American Samoa.  (eastern section is a division within American Samoa)
4. To be consistent all or no territories should be included.  Currently only some territories are included.  Those missing include American Samoa (AS), Antarctica (AQ), Bouvet Island (BV), French Southern Territories (TF), Isle of Man (IM), Tokelau (TK).  I omit Western Sahara from this list because it is disputed however the same can be said of Antarctica

**Rankings**
1. Madrid, Colombia ranks above Madrid, Spain (even with local bias this seems incorrect)

**Consistent Treatment of Woetype**
1. It seems impossible to truly isolate towns/cities because while most towns/cities are in woetype 7, some are also in woe type 10 (for example Westport, MA).  But if we open applications to woetype=7,10. Then we run into a lot of duplication issues such as Johannesburg below

**Same city, multiple ID’s**  (these are just a few examples.  Sometimes within same woetype. Other times span multiple woetypes )
1. Two instances of Johannesburg, South Africa (Johannesburg and City of Johannesburg).  Nothing online indicates there is a parental administrative area over Johannesburg with the same name)
2. Westport Township vs Town of Westport vs Westport, SD
3. Town of Howell, NJ vs Howell, NJ

**Bounding Boxes**
1. Bounding box for US and Russia seem to be entire globe on twofishes demo and latest index.  Though foursquare site seems to correct these two bounding boxes
Hi, 

If I do a query for [New York City](http://demo.twofishes.net/twofishes-static/geocoder.html?query=new%20york%20city) the returned data contains refrences to NYC's parents. That data allows me to traverse up and see that NYC lies in the state New York, and that the state New York lies in the US.

Now, I would like to do the opposite. That is, list all the cities in the US.

It doesn't look like Twofishes can do this, but I thought it was worth asking the question.

Thanks!
Twitter consumes some of the twofishes libraries, and are interested in helping to get a 2.12 branch started. This is a notice of our intent to do so!