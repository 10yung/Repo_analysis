Currently making my way through the book in detail (awesome btw), and I realised that in Chapter 5, `AccountService` is parameterised on `Account`, `Amount`, and `Balance`, which is awesome, but `AccountRepository` on which it depends is not; I was curious if it should be ?

https://github.com/debasishg/frdomain/blob/48664c35b2e583aeacfcacd5d740687afb2ed1de/src/main/scala/frdomain/ch5/domain/service/AccountService.scala#L17-L35

https://github.com/debasishg/frdomain/blob/48664c35b2e583aeacfcacd5d740687afb2ed1de/src/main/scala/frdomain/ch5/domain/repository/AccountRepository.scala#L11-L21

In effect, doesn't this mean that `AccountService` is coupled to the concrete models due to

https://github.com/debasishg/frdomain/blob/48664c35b2e583aeacfcacd5d740687afb2ed1de/src/main/scala/frdomain/ch5/domain/service/AccountService.scala#L18

?
The lens name `nameLens` did not correspond to the actual value assigned which in fact deals with `id`, so it must be either the name or the value which is not valid.
For the completeness this commit adds both: `idLens` and `nameLens`.

Related issue https://github.com/debasishg/frdomain/issues/43
https://github.com/debasishg/frdomain/blob/48664c35b2e583aeacfcacd5d740687afb2ed1de/src/main/scala/frdomain/ch3/lens/Domain.scala#L35

Given the implicit context (which is my own guess), it seems like the code for `nameLens` should probably be as follows:

```scala
protected val nameLens = Lens[Customer, String](
    get = _.name,
    set = (o, v) => o.copy(name = v)
)
```

Decoupled the contract from the implementation
The root cause why the operation need to return `Future` is because repository. Rather than eagerly calling `Future.apply` in service level, why can't we introduce `Future` as the return type from repository, and compose it accordingly in service level?

Let's say our repository is non-blocking, we will call this already well-shaped repository in another thread, which is unnecessary.
Due to the use of the today function in several places in the function, the account creation occasionally fails when the generated timestamp differs. 

I added a test to prove this is the case (it sometimes still passes, showing the "randomly failing" nature of the problem)

@debasishg a question about what comes first, `Command` or `Event`.

In the current code the service operations are mapped to a single `Event` which, in turn is mapped to a `Command`.
Seems this would not support a functionality where a service operation (logically a `Command`) would need to generate multiple `Event`s to different `Aggregate`s.

Scenario: funds transfer would update `Account` balances and update `Customer` net worth.

Then there is the question of whether the `Interpreter` is per `Aggregate` or can work with more than one.

Please advise.

See https://forums.manning.com/posts/list/38628.page#p108092


