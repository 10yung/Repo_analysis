
With point scales and data of different series lengths, points are not sorted correctly. To reproduce, run https://github.com/plouc/nivo/blob/master/packages/scales/tests/compute.test.js with the following data:

```json
{
                                id: 'A',
                                data: [
                                    { data: { [axis]: 'a' } },
                                    { data: { [axis]: 'c' } },
                                ],
                            },
                            {
                                id: 'B',
                                data: [
                                    { data: { [axis]: 'b' } },
                                    { data: { [axis]: 'c' } },
                                    { data: { [axis]: 'd' } },
                                    { data: { [axis]: 'e' } },
                                ],
                            }
```

I'd expect that the pointScaleExpectation would still be ['a', 'b', 'c', 'd', 'e']?

Will file a PR.

Network component seem to be poorly documented on how to use with Layers, as well as interactivity. My immediate desire is to be able to show some information about a node on hover (or always), such as a label. I can't seem to find anything about this anywhere, and it seems to be a very common use case for this type of data visualization. There isn't much to learn from an unlabeled graph.

Ideally the API would allow for rendering any arbitrary component as a node, which would take the place of supplying `nodeColor`, `nodeBorderWidth`, `nodeBorderColor` and allow for more flexibility. For example:

```jsx harmony
const CustomNodesNetwork = data => {
  const renderNode = node => (
    <svg width="50" height="50" version="1.1" xmlns="http://www.w3.org/2000/svg">
      <g>
        <rect
          x={10}
          y={10}
          width={30}
          height={30}
          fill={node.color}
         />
        <text
          x={0}
          y={0}
          fill="black"
        >
          {node.label}
        </text>
      </g>
    </svg>
  );

  return (
    <ResponsiveNetwork
      height={700}
      nodes={data.nodes}
      links={data.links}
      renderNode={t => renderNode(t)}
      linkThickness={t => (2 * (2 - t.source.depth))}
    />
  );
}
```

Alternatively, a default label/hover behavior could easily render some text under certain conditions: 

```jsx harmony
    <ResponsiveNetwork
      ...
      nodeLabel={t => t.label}
      labelVisibility={visible: boolean | string}
    />
```

Thanks for your hard work on this excellent library, and sorry if this the library already has this capability and I'm just dumb! First time using anything D3.js related.

**Is your feature request related to a problem? Please describe.**
I would like to wrap treemap labels and dynamically determine line length based on tile width/height. I saw that in https://github.com/plouc/nivo/issues/353 people suggested ways to wrap 'axis label text' and that there are properties like `{ opacity, textAnchor, textBaseline, textX, textY, theme, value, x, y}` that are exposed through the `renderTick` api. Is there a way the treemap api can also expose these values?

I am also hoping that the treemap api can expose the `width` and `height` of a tile. By digging into 'd3-hierarchy' for a bit, seems like `width` and `height` of a specific node is attainable through `nodeSize`. Anyway nivo's treemap api can somehow make the nodeSize accessible?

**Describe the solution you'd like**
It would be nice if the nivo treemap api can expose tile size and tile label's `textAnchor, textBaseline, textX, textY, x, y` properties.

**Describe alternatives you've considered**
For now I am just truncating the treemap labels (see code snippet below):
```
label={d => <tspan> {truncateText(d.id)} </tspan>}

function truncateText(text) {
    const truncatedText = text.slice(0, 7);
    return text.length > truncateText.length ? truncatedText + '...' : text;
 }
```
But it would be nicer if I can wrap treemap label text instead.

Thanks for considering!
**Describe/explain the bug**
![image](https://user-images.githubusercontent.com/18459691/72523659-2f4bdd80-3858-11ea-99a5-8a64b3af7a7a.png)

This is on the latest chrome browser
Not having a plot of 0 in the data set for the y axis causes the markers to shift and not scale, Int he example the 0 now would render below the x axis which has caused the fill to draw down to that point rather than stopping at the x axis. 

render code
```
import React from 'react';
import { ResponsiveLine } from '@nivo/line';
 // ...a react function that returns...

    <ResponsiveLine
      {...chartProps}
      data={data}
      curve={smooth ? 'natural' : 'linear'}
      lineWidth={3}
      enableArea={area}
      areaOpacity={0.5}
      data-testid="lineChart-ResponsiveLine"
    />
```
Data structure being passed
```
const chartProps = 
{"top":10,"right":40,"bottom":70,"left":40},"labelTextColor":"#000000","borderWidth":0,"enableDots":true,"enableDotLabel":true,"dotSize":8,"dotColor":"#000000","dotBorderWidth":0,"theme":{"labels":{"text":{"fontSize":9}},"legends":{"text":{"fontSize":9}},"axis":{"legend":{"text":{"fontSize":10,"fill":"#000000"}},"ticks":{"line":{"fill":"#CCC"},"text":{"fontSize":8,"fill":"#000000"}}},"grid":{"line":{"stroke":"#80808040","strokeWidth":0.5}}},"enableGridX":true,"enableGridY":true,"labelSkipWidth":10,"yScale":{"type":"linear","min":"auto","max":"auto"},"markers":[{"axis":"y","value":0,"lineStyle":{"stroke":"#80808040","strokeWidth":2}}],"axisBottom":{"orient":"bottom","tickRotation":-25,"tickSize":5,"tickPadding":10,"legend":"Date/Time - Hour of Day","legendOffset":65,"legendPosition":"middle"},"axisLeft":{"orient":"left","tickSize":5,"tickPadding":10,"tickRotation":0},"legends":[],"colors":{"scheme":"paired"},"animate":false,"isInteractive":true,"motionStiffness":90,"motionDamping":15};

const data = [{"id":"Date/Time - Hour of Day","data":[{"x":"0","y":100,"origClassName":"0"},{"x":"1","y":100,"origClassName":"1"},{"x":"2","y":100,"origClassName":"2"},{"x":"3","y":100,"origClassName":"3"},{"x":"4","y":100,"origClassName":"4"},{"x":"5","y":100,"origClassName":"5"},{"x":"6","y":81.76,"origClassName":"6"},{"x":"7","y":80.95,"origClassName":"7"},{"x":"8","y":85.72,"origClassName":"8"},{"x":"9","y":89.5,"origClassName":"9"},{"x":"10","y":89.92,"origClassName":"10"},{"x":"11","y":90.36,"origClassName":"11"},{"x":"12","y":84.23,"origClassName":"12"},{"x":"13","y":75.53,"origClassName":"13"},{"x":"14","y":80.12,"origClassName":"14"},{"x":"15","y":78.2,"origClassName":"15"},{"x":"16","y":74.68,"origClassName":"16"},{"x":"17","y":80.47,"origClassName":"17"},{"x":"18","y":65.95,"origClassName":"18"},{"x":"19","y":49,"origClassName":"19"},{"x":"20","y":47.47,"origClassName":"20"},{"x":"21","y":36.84,"origClassName":"21"},{"x":"22","y":28.78,"origClassName":"22"},{"x":"23","y":20,"origClassName":"23"}]}];
```


Legend prop  type is missing in Choropleth thus the builds are failing please add the types.
Just a question really :)
I'm using a BarChart with patterns. Unfortunately when overriding the BarComponent the computed pattern (eg. url(#lines)) is not accessible inside the BarComponent. 

Would it be possible to pass the matched fill to the BarComponent? Or is there another way to access it from within the BarComponent? 

[Here's a codesandbox](https://codesandbox.io/s/nivobar-chart-pattern-x9jnz) where I'm experimenting with defs and custom bar components. 

Thank you
## Migrate the whole code base to TypeScript  ðŸŽ¢ðŸ’¥ ðŸ”¥ 

### Infrastructure

- [x] update rollup config to support TS
- [ ] update rollup config to generate minified code (terser?)
- [ ] make storybook using TS
- [ ] update TS example to CRA
- [ ] Remove nivo custom babel config to use babel-env only
- [ ] Get rid of circular dependencies between packages

### Packages

#### Core packages

- [ ] annotations
- [x] axes
- [x] colors
- [x] core
- [ ] generators
- [x] legends
- [x] tooltip

### Charts

- [ ] bar
- [ ] bullet
- [ ] bump
- [ ] calendar
- [ ] chord
- [ ] circle-packing
- [ ] geo
- [ ] heatmap
- [ ] line
- [ ] network
- [ ] parallel-coordinates
- [ ] pie
- [x] radar
- [ ] sankey
- [ ] scales
- [ ] scatterplot
- [ ] stream
- [ ] sunburst
- [ ] swarmplot
- [ ] treemap
- [ ] voronoi
- [ ] waffle