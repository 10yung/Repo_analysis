Hi,
I have rails `3.1.0` application, which contains `rails-backbone`, `0.5.2`. And, working fine. However, now I need to upgrade it on rails 3.2.2.5. Everything broken and showing a lot of errors in the web console. As shown in the attached screenshot. 
Any help will be appreciated?
![bibliosim-javascript-errors](https://user-images.githubusercontent.com/52962423/68105377-1fcb2280-ff00-11e9-961e-0de55b359fab.png)


GitHub changed the way Markdown headings are parsed, so this change fixes it.

See [bryant1410/readmesfix](https://github.com/bryant1410/readmesfix) for more information.

Tackles bryant1410/readmesfix#1

https://github.com/codebrew/backbone-rails/blob/master/vendor/assets/javascripts/backbone_rails_sync.js

When passing `{patch: true}` to a model save, typically Backbone should be sending only the changed attributes to the server. Now when using the `backbone_rails_sync.js` override, using `{patch: true}` does not send the changed attributes but sends the entire model to rails. I am guessing during the override, backbone may think that the entire model attributes have been changed, therefore sending those values? When I do not use `backbone_rails_sync.js`, Backbone sends the proper changed attributes.


I use github `gem 'rails-backbone', git: 'https://github.com/codebrew/backbone-rails'` in rails 4.2.1. And use `rails g backbone:scaffold user username:string phone:string` to generate some file.

But in chrome console show `Uncaught TypeError: this.template is not a function` when I open 'http://localhost:3000/users'. 

I edit `template: JST["backbone/templates/users/index"]`  to `template: JST["backbone/templates/users/indexx"]` and index file name to 'indexx', it's fine.

so strange.

First, it's not updated on [rubygems](https://rubygems.org/gems/rails-backbone) server so instead of this 

```
gem "rails-backbone"
```

you should use this

```
gem "rails-backbone", "1.1.2", git: "https://github.com/codebrew/backbone-rails.git"
```

Second, Example usage isn't work either.

Thanks.

In [backbone_rails_sync.js](https://github.com/codebrew/backbone-rails/blob/master/vendor/assets/javascripts/backbone_rails_sync.js), the CSRF header is added to every request. I don't think this is necessary. The jquery-rails gem, which is a dependency of this gem, already does that. See also #186.

Sorry to change the sync monkey-patch so much. I didn't want to be more intrusive than necessary with this fix. But because Backbone's `sync` and `save` methods are so monolithic, there wasn't a way for me to address this issue with a more targeted patch.

[Line 19 in backbone_rails_sync.js](https://github.com/codebrew/backbone-rails/blob/master/vendor/assets/javascripts/backbone_rails_sync.js#L19) reads:

```
data = JSON.stringify(options.attrs || model.toJSON(options));
```

It looks like this variable is always overwritten in the next few lines:

```
if (model.paramRoot) {
  data = {};
  data[model.paramRoot] = model.toJSON(options);
} else {
  data = model.toJSON();
}
```

So line 19 seems to do nothing. If I'm correct, It's a few CPU cycles gone to waste.

More importantly though, `options.attrs` is ignored. That's bad because it breaks calls like the following:

```
myModelInstance.save({name: "example"}, {patch: true});
```

The above should send only `{name: "example"}` rather than the whole attributes hash in the HTTP request. This is very important in Rails, where [strong parameters](http://edgeguides.rubyonrails.org/action_controller_overview.html#strong-parameters) is the officially supported way to whitelist attributes. In Rails, you want to be able to set `config.action_controller.action_on_unpermitted_parameters = :raise` to catch your own mistakes, but it breaks when backbone-rails forces you to send every attribute with every request.
