Support static linking in cocoapods
I am running stub request test in XCTest and my case is as following:

```
func testExample() {
        func matchPath(request: URLRequest) -> Bool {
            let path = request.url?.path
            return path != nil // setup a breakpoint on this line and you can see it runs twice
        }

        var responseBodyJson: [String: String] = [:]
        responseBodyJson["appId"] = "1"
        stub(matchPath, json(responseBodyJson, status: 200, headers: nil))
        
        let urlPath: String = "http://www.stackoverflow.com"
        let url: URL = URL(string: urlPath)!
        let request1: URLRequest = URLRequest(url: url)
        let response: AutoreleasingUnsafeMutablePointer<URLResponse?>? = nil
        do{
            let dataVal = try NSURLConnection.sendSynchronousRequest(request1, returning: response)
            print(response)
            do {
                if let jsonResult = try JSONSerialization.jsonObject(with: dataVal, options: []) as? NSDictionary {
                    print("Synchronous\(jsonResult)")
                }
            } catch let error as NSError {
                print(error.localizedDescription)
            }
        }catch let error as NSError
        {
            print(error.localizedDescription)
        }
}
```
I have successfully installed via Cocoapods, imported the module in my XCTest class, and added methods. When I try and run my tests I see the below error. I have tried to import the project manually with no luck, have the framework in my linked frameworks for the test target. Any ideas?

![image](https://user-images.githubusercontent.com/18584125/60356588-38da2a80-9986-11e9-8c62-c3a2511e6bd6.png)

Thanks
@kylef  
 For pod files that do not use **use_frameworks!**, testing with Mockingjay returns a build error!

`<Mockingjay/Mockingjay-Swift.h> file not found `

So it will be better for you to add something like this in your MockingjayURLConfiguration.m
to check if include /Mockingjay-Swift.h or not.

this will make life easier for developers who use your pod to unit test their frameworks.
I tried to make a ullRequest on it, but it's not possible for me like I don't have the rights 
```
#if __has_include("Mockingjay-Swift.h")
    #import "Mockingjay-Swift.h"
#else
    #import <Mockingjay-Swift.h/Mockingjay-Swift.h>
#endif
```
All is in the title ;-) 
Is there a way to stub a redirect response, using the 302 status code with Mockingjay? Causing a call to https://developer.apple.com/documentation/foundation/urlsessiontaskdelegate/1411626-urlsession?
Following the announcement in https://github.com/kylef/Mockingjay/issues/98, just warn users about this and where to go to become a maintainer.
@kylef I've got a question about the future of the project. Do you think support for MockingJay and [URITemplate.swift](https://github.com/kylef/URITemplate.swift) will be continuing? There are multiple open pull requests which fix support for things like Xcode 9, Swift 4, Carthage, etc which have been ignored for months. 

If you don't have plans to continue support for both projects, can you put a request out for someone to take over support? These are great projects and I would like to continue using them. But if they are no longer going to be supported, I'll look for an alternative or (possibly) fork these and create something new based on these. 

It looks to be similar to: https://github.com/kylef/Mockingjay/issues/50 which was marked as fixed.

I have a SessionManager initialized as a singleton and then used in the service under test. I first stub everything with Mockingjay and then call one of the service's methods, this in turn makes a request using Alamofire SessionManager. And the real request goes through.

Now, if I don't use the singleton SessionManager and create it inside the test, then pass it to the service under test, then Mockingjay stubbing works.

Interestingly enough, in the original scenario, the SessionManager singleton is actually only called (so, initialized) for the first time in the service under test (I don't use the real AppDelegate in unit tests), meaning (I might still be wrong on this though) that the stub is called before the SessionManager is even created and still this fails to work...

Xcode 9.3
Swift 4.1
Alamofire 4.7.2
Mockingjay 2.0.1

**EDIT**

OK, this is more clear now. It's not about just SessionManager, but about the manager using non-default configuration:
```
static let sessionManager: Alamofire.SessionManager = {
    let configuration = URLSessionConfiguration.background(withIdentifier: "XXX")
    configuration.timeoutIntervalForRequest = 60

    return Alamofire.SessionManager(configuration: configuration)
  }()
```

When not using background configuration, stubbing works.
It seems current version (2.0.1) of matcher doesn't match uri path partly.

Example:

```
func testPartlyPathMatches() {
    let request = URLRequest(url: URL(string: "https://api.palaverapp.com/some/other/v42/auth/login")!)
    XCTAssertTrue(uri("/auth/login")(request))
}
```

This test will fail. It seems I always need to specify everything after the host in the uri matcher. This is a bit inconvenient.

Because eg. I as mobile app developer don't want to care how the backend has structured the login endpoint in my tests or which endpoint version it is. I'm only interested in stubbing the login request.

Or did I miss something?