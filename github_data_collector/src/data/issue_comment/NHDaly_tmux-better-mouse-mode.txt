Hi friends! :)

Unfortunately, I haven't had the time to maintain this package of late. I haven't been keeping up to date with the latest tmux in a long time. My setup mostly works, and I haven't been spending much time tweaking it anymore.

Would any of you active users be interested in joining maintenance of this package? If so, please let me know, either via an email or a comment here! Thanks!
Hi!

I installed this plugin today, but unfortunately, the option `@emulate-scroll-for-no-mouse-alternate-buffer` is not working properly for me. Here is my configuration:

    run-shell ~/config/tmux/plugins/tmux-better-mouse-mode/scroll_copy_mode.tmux
    set -g mouse on
    set -g @emulate-scroll-for-no-mouse-alternate-buffer on

I'd like to be able to scroll in `less` using my mouse wheel, but it doesn't work.

Here's the output of `tmux list-keys -T root`:

```
bind-key -T root MouseDown1Pane   select-pane -t = ; send-keys -M
bind-key -T root MouseDown1Status select-window -t =
bind-key -T root MouseDown3Pane   if-shell -F -t = "#{mouse_any_flag}" "select-pane -t=; send-keys -M" "select-pane -mt="
bind-key -T root MouseDrag1Pane   if-shell -F -t = "#{mouse_any_flag}" "if -Ft= \"#{pane_in_mode}\" \"copy-mode -M\" \"send-keys -M\"" "copy-mode -M"
bind-key -T root MouseDrag1Border resize-pane -M
bind-key -T root WheelUpPane      if-shell -F -t = "#{mouse_any_flag}" "send-keys -M" "         if -Ft= ''           \"send-keys -t= up ; send-keys -t= up ; send-keys -t= up ; \"           \"             select-pane -t= ;             if -Ft= '#{pane_in_mode}'               'send-keys -M ; send-keys -M ; send-keys -M ; '               'copy-mode -e ; send-keys -M ; send-keys -M ; send-keys -M ; '           \"       "
bind-key -T root WheelUpStatus    previous-window
bind-key -T root WheelDownPane    if-shell -F -t = "#{mouse_any_flag}" "send-keys -M" "         if -Ft= \"\"           \"send-keys -t= down ; send-keys -t= down ; send-keys -t= down ; \"           \"select-pane -t= ; send-keys -M ; send-keys -M ; send-keys -M ; \"       "
bind-key -T root WheelDownStatus  next-window
```

Have I missed something? I'm running OpenBSD 6.3.
tmux 2.7 brew install

from the docs
```
"3" (default) - Scroll three lines per every mouse wheel click.
"1" - One line per mouse wheel scroll click (smoothest).
"0.5" - Scroll one line only on every other mouse wheel scroll click.
"0.25" - Scroll one line only on every fourth mouse wheel scroll click.
```

The "0.5" and "0.25" cause a "Repeat Count Invalid" error from tmux.


Love the plugin but it seems not work with my tmux 2.7 setup.  I'm happy to paste config files if requested.
Thank you for this TPM plugin! I had been thinking about all of the different ways I could bullet-proof my tmux scrolling hack I made a while ago, the main idea was to contextually enable the ability to scroll up in history in a shell (which isn't in alternate window mode) via copy-mode and to naturally pass the event on into alternate window mode programs that enable mouse mode such as vim, and to emulate arrow keys when the alternate mode program doesn't enable mouse mode, such as less. This makes for perfect UX. 

This is exactly what you have done and it is a beautiful thing, we can even configure exactly whether doing so in a different pane yanks focus to it or not. I love it so much. 

Now, another concept that I was toying with in my mind is some method of addressing the disparity in when I change between using a mouse (with discrete clicks) and a Mac touchpad, which is able to give the control of individual scroll clicks but also effortlessly flick to spam a lot of events. 

So far we have config here letting us choose how many lines to scroll for scroll wheel emulation for the copy-mode scrolling and alternate mode arrow key emulation, this is a linear one to one relationship to the mouse event. I was hoping that maybe we could have a configuration that allows for acceleration here. As we rapidly send a lot of wheel events it can increase how many lines each event moves. This will make it more effortless to traverse larger distances with a traditional mouse wheel. 

A drawback might be that on a platform such as macOS the end result is the combination of two scrolling acceleration behaviors. I was going to use differing config between my different platforms though, it should address that issue.
Disclaimer: I'm new to this plugin and tmux.

I'm seeing the following problems:

1. scrolling up on my scrollwheel cycles through previous commands not history
2. if I press Prefix [ first, then scrollwheel works
3. if I select some text, I enter copy-mode and scrollwheel works (if I keep left button pressed)
4. scroll-without-changing-pane doesn't work

Details below:

$ tmux -V
tmux 2.5

$ tmux list-keys -T root
```
bind-key -T root MouseDown1Pane   select-pane -t = ; send-keys -M
bind-key -T root MouseDown1Status select-window -t =
bind-key -T root MouseDown3Pane   if-shell -F -t = "#{mouse_any_flag}" "select-pane -t=; send-keys -M" "select-pane -mt="
bind-key -T root MouseDrag1Pane   if-shell -F -t = "#{mouse_any_flag}" "if -Ft= \"#{pane_in_mode}\" \"copy-mode -M\" \"send-keys -M\"" "copy-mode -M"
bind-key -T root MouseDrag1Border resize-pane -M
bind-key -T root WheelUpPane      if-shell -F -t = "#{mouse_any_flag}" "send-keys -M" "         if -Ft= '#{alternate_on}'           \"send-keys up ; send-keys up ; send-keys up ; \"           \"                          if -Ft= '#{pane_in_mode}'               'send-keys -M ; send-keys -M ; send-keys -M ; '               'copy-mode -e -t= ; send-keys -M ; send-keys -M ; send-keys -M ; '           \"       "
bind-key -T root WheelUpStatus    previous-window
bind-key -T root WheelDownPane    if-shell -F -t = "#{mouse_any_flag}" "send-keys -M" "         if -Ft= \"#{alternate_on}\"           \"send-keys down ; send-keys down ; send-keys down ; \"           \" send-keys -M ; send-keys -M ; send-keys -M ; \"       "
bind-key -T root WheelDownStatus  next-window
```

```
$ cat /etc/os-release
NAME="Red Hat Enterprise Linux Server"
VERSION="7.4 (Maipo)"
ID="rhel"
ID_LIKE="fedora"
VARIANT="Server"
VARIANT_ID="server"
VERSION_ID="7.4"
PRETTY_NAME="Red Hat Enterprise Linux"
ANSI_COLOR="0;31"
CPE_NAME="cpe:/o:redhat:enterprise_linux:7.4:GA:server"
HOME_URL="https://www.redhat.com/"
BUG_REPORT_URL="https://bugzilla.redhat.com/"

$ cat ~/.tmux.conf
# List of plugins
set -g @plugin 'tmux-plugins/tpm'
set -g @plugin 'tmux-plugins/tmux-sensible'
set -g @plugin 'seebi/tmux-colors-solarized'
set -g @plugin 'tmux-plugins/tmux-pain-control'
set -g @plugin 'tmux-plugins/tmux-cpu'
set -g @plugin 'nhdaly/tmux-better-mouse-mode'

# Seans settings
set -g @colors-solarized 'light'

# Change the prefix key to C-a
set -g prefix C-a
unbind C-b
bind C-a send-prefix

# Allow vim key bindings in copy mode
set-window-option -g mode-keys vi

# mouse support
set-option -g mouse on
set -g @scroll-without-changing-pane "on"
#set -g @emulate-scroll-for-no-mouse-alternate-buffer "on"

# CPU settings
set -g status-right '#{cpu_bg_color} CPU: #{cpu_icon} #{cpu_percentage} | %a %h-%d %H:%M '
set -g @cpu_low_icon ""
set -g @cpu_medium_icon ""
set -g @cpu_high_icon ""

set -g @cpu_low_fg_color "#[fg=#000000]"
set -g @cpu_medium_fg_color "#[fg=#000000]"
set -g @cpu_high_fg_color "#[fg=#000000]"

set -g @cpu_low_bg_color "#[bg=#FF99FF]"
set -g @cpu_medium_bg_color "#[bg=#3399FF]"
set -g @cpu_high_bg_color "#[bg=#CCFFFF]"

# Initialize TMUX plugin manager (keep this line at the very bottom of tmux.conf)
run '~/.tmux/plugins/tpm/tpm'

Prefix U:
Installed plugins:                                                                                                                              [0/0]
  tpm
  tmux-sensible
  tmux-colors-solarized
  tmux-pain-control
  tmux-cpu
  tmux-better-mouse-mode
Type plugin name to update it.
- "all" - updates all plugins
- ENTER - cancels
```
The issue is that in
https://github.com/NHDaly/tmux-better-mouse-mode/blob/4c686e5a1f381e072b102df63f3f8a17426fb107/scroll_copy_mode.tmux#L67
and
https://github.com/NHDaly/tmux-better-mouse-mode/blob/4c686e5a1f381e072b102df63f3f8a17426fb107/scroll_copy_mode.tmux#L85
simple arrow keystrokes are sent, but irssi needs those for bash-style history browsing. There needs to be a way to send alternate keystrokes, for which bindings in irssi could then be defined.
Really nice project! I'm trying to get the `emulate-scroll-for-no-mouse-alternate-buffer` option to work, and it does for `less` but not for `git log`. I tried to understand how it works but I didn't get very far - could you maybe explain how it detects which programs it should send arrow keys to to scroll?

Thanks!
I'm running tmux-git, and copy-mode will exit upon scrolling back down to the bottom.
I think a cool feature could be if the Control key (or other modifier key) is pressed, the number of lines scrolled are different. For example, if control is pressed 30 lines are scrolled. This can be done with a multiplier (x10) or just another scroll speed variable.

Thank you for your time :)