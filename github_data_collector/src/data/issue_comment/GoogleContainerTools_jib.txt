Uses the `application` plugin to create a runnable distribution.

I'll leave Graal support for a separate PR as the [Palant√≠r Graal plugin](https://github.com/palantir/gradle-graal) doesn't support GraalVM 19.3.x.
Fixes #691.

I am not particularly happy with how this is done, but there are two many complicated matters intertwined around auth, so this is it.

The basic idea is that, instead of returning a working `Authorization`, some steps in `StepsRunner` returns a working `RegistryClient`.

- `PullBaseImageStep`: returns a working `RegistryClient` (previously returned a working `Authorization`) for the base image
- `AuthenticatePushStep`: returns a working `RegistryClient` (instead of `Authorization` likewise) for the target image

`RegistryClient` is now a mutable instance. Calling `configureBasicAuth()` will make it send a basic `Authorization`, while calling `doBearerAuth()` will send a bearer token `Authorization`. So, you basically create two `RegistryClient` instances (one for base and the other for target), and then these are used throughout the build (i.e., in other `Step`s).

And if the `RegistryClient` succeeded to `doBearerAuth()`, it will auth-refresh a token if necessary.

Fixes #2216.
<!--
Before filing an issue, please reproduce with the latest version of Jib.

If you are encountering errors pulling or pushing to remote registries,
please check our Frequently Asked Questions before filing an issue:

    https://github.com/GoogleContainerTools/jib/blob/master/docs/faq.md#registry-errors
-->

**Environment**:

- 1.8.0
- Maven
- "linux", version: "3.10.0-957.21.3.el7.x86_64", arch: "amd64", family: "unix"

**Description of the issue**:

Sometimes jib:build fails when running parallel build for a multi-module project. I use "mvn -T4" for four running threads.

**Expected behavior**:

Push images parallel

**Steps to reproduce**:
<!-- Please provide a minimal and precise series of steps -->

  That's hard... It happens sporadically as any multithreading issue. Non-parallel build apparently works fine.

**Log output**: <!-- If applicable, provide relevant log output -->

```
[2020-01-14T18:31:18.250Z] [ERROR] Failed to execute goal com.google.cloud.tools:jib-maven-plugin:1.8.0:build (default-cli) on project some-service: Tried to push image manifest for artifactory.xxxxx.com/dckr/some-service:17.1.0-SNAPSHOT but failed because: Registry may not support pushing OCI Manifest or Docker Image Manifest Version 2, Schema 2 | If this is a bug, please file an issue at https://github.com/GoogleContainerTools/jib/issues/new: 400 Bad Request
[2020-01-14T18:31:18.250Z] [ERROR] {"errors":[{"code":"MANIFEST_INVALID","message":"manifest invalid","detail":{"description":"Could not find item at docker-sc-release_local:dckr/some-service/_uploads/sha256__8e3d9783c8401812e442d0302c2b2f75456c9fc4a689d684bce2961b97ecf908"}}]}
[2020-01-14T18:31:18.250Z] [ERROR] -> [Help 1]
18:31:18  org.apache.maven.lifecycle.LifecycleExecutionException: Failed to execute goal com.google.cloud.tools:jib-maven-plugin:1.8.0:build (default-cli) on project some-service: Tried to push image manifest for artifactory.xxxxx.com/dckr/some-service:17.1.0-SNAPSHOT but failed because: Registry may not support pushing OCI Manifest or Docker Image Manifest Version 2, Schema 2 | If this is a bug, please file an issue at https://github.com/GoogleContainerTools/jib/issues/new
18:31:18      at org.apache.maven.lifecycle.internal.MojoExecutor.execute (MojoExecutor.java:215)
18:31:18      at org.apache.maven.lifecycle.internal.MojoExecutor.execute (MojoExecutor.java:156)
18:31:18      at org.apache.maven.lifecycle.internal.MojoExecutor.execute (MojoExecutor.java:148)
18:31:18      at org.apache.maven.lifecycle.internal.LifecycleModuleBuilder.buildProject (LifecycleModuleBuilder.java:117)
18:31:18      at org.apache.maven.lifecycle.internal.builder.multithreaded.MultiThreadedBuilder$1.call (MultiThreadedBuilder.java:190)
18:31:18      at org.apache.maven.lifecycle.internal.builder.multithreaded.MultiThreadedBuilder$1.call (MultiThreadedBuilder.java:186)
18:31:18      at java.util.concurrent.FutureTask.run (FutureTask.java:266)
18:31:18      at java.util.concurrent.Executors$RunnableAdapter.call (Executors.java:511)
18:31:18      at java.util.concurrent.FutureTask.run (FutureTask.java:266)
18:31:18      at java.util.concurrent.ThreadPoolExecutor.runWorker (ThreadPoolExecutor.java:1142)
18:31:18      at java.util.concurrent.ThreadPoolExecutor$Worker.run (ThreadPoolExecutor.java:617)
18:31:18      at java.lang.Thread.run (Thread.java:748)
18:31:18  Caused by: org.apache.maven.plugin.MojoExecutionException: Tried to push image manifest for artifactory.xxxxx.com/dckr/some-service:17.1.0-SNAPSHOT but failed because: Registry may not support pushing OCI Manifest or Docker Image Manifest Version 2, Schema 2 | If this is a bug, please file an issue at https://github.com/GoogleContainerTools/jib/issues/new
18:31:18      at com.google.cloud.tools.jib.maven.BuildImageMojo.execute (BuildImageMojo.java:149)
18:31:18      at org.apache.maven.plugin.DefaultBuildPluginManager.executeMojo (DefaultBuildPluginManager.java:137)
18:31:18      at org.apache.maven.lifecycle.internal.MojoExecutor.execute (MojoExecutor.java:210)
18:31:18      at org.apache.maven.lifecycle.internal.MojoExecutor.execute (MojoExecutor.java:156)
18:31:18      at org.apache.maven.lifecycle.internal.MojoExecutor.execute (MojoExecutor.java:148)
18:31:18      at org.apache.maven.lifecycle.internal.LifecycleModuleBuilder.buildProject (LifecycleModuleBuilder.java:117)
18:31:18      at org.apache.maven.lifecycle.internal.builder.multithreaded.MultiThreadedBuilder$1.call (MultiThreadedBuilder.java:190)
18:31:18      at org.apache.maven.lifecycle.internal.builder.multithreaded.MultiThreadedBuilder$1.call (MultiThreadedBuilder.java:186)
18:31:18      at java.util.concurrent.FutureTask.run (FutureTask.java:266)
18:31:18      at java.util.concurrent.Executors$RunnableAdapter.call (Executors.java:511)
18:31:18      at java.util.concurrent.FutureTask.run (FutureTask.java:266)
18:31:18      at java.util.concurrent.ThreadPoolExecutor.runWorker (ThreadPoolExecutor.java:1142)
18:31:18      at java.util.concurrent.ThreadPoolExecutor$Worker.run (ThreadPoolExecutor.java:617)
18:31:18      at java.lang.Thread.run (Thread.java:748)
18:31:18  Caused by: com.google.cloud.tools.jib.registry.RegistryErrorException: Tried to push image manifest for artifactory.xxxxx.com/dckr/some-service:17.1.0-SNAPSHOT but failed because: Registry may not support pushing OCI Manifest or Docker Image Manifest Version 2, Schema 2 | If this is a bug, please file an issue at https://github.com/GoogleContainerTools/jib/issues/new
18:31:18      at com.google.cloud.tools.jib.registry.RegistryErrorExceptionBuilder.build (RegistryErrorExceptionBuilder.java:105)
18:31:18      at com.google.cloud.tools.jib.registry.ManifestPusher.handleHttpResponseException (ManifestPusher.java:119)
18:31:18      at com.google.cloud.tools.jib.registry.ManifestPusher.handleHttpResponseException (ManifestPusher.java:39)
18:31:18      at com.google.cloud.tools.jib.registry.RegistryEndpointCaller.call (RegistryEndpointCaller.java:146)
18:31:18      at com.google.cloud.tools.jib.registry.RegistryEndpointCaller.call (RegistryEndpointCaller.java:115)
18:31:18      at com.google.cloud.tools.jib.registry.RegistryClient.callRegistryEndpoint (RegistryClient.java:473)
18:31:18      at com.google.cloud.tools.jib.registry.RegistryClient.pushManifest (RegistryClient.java:321)
18:31:18      at com.google.cloud.tools.jib.builder.steps.PushImageStep.call (PushImageStep.java:125)
18:31:18      at com.google.cloud.tools.jib.builder.steps.PushImageStep.call (PushImageStep.java:43)
18:31:18      at com.google.common.util.concurrent.TrustedListenableFutureTask$TrustedFutureInterruptibleTask.runInterruptibly (TrustedListenableFutureTask.java:125)
18:31:18      at com.google.common.util.concurrent.InterruptibleTask.run (InterruptibleTask.java:69)
18:31:18      at com.google.common.util.concurrent.TrustedListenableFutureTask.run (TrustedListenableFutureTask.java:78)
18:31:18      at java.util.concurrent.ThreadPoolExecutor.runWorker (ThreadPoolExecutor.java:1142)
18:31:18      at java.util.concurrent.ThreadPoolExecutor$Worker.run (ThreadPoolExecutor.java:617)
18:31:18      at java.lang.Thread.run (Thread.java:748)
18:31:18  Caused by: com.google.cloud.tools.jib.http.ResponseException: 400 Bad Request
18:31:18  {"errors":[{"code":"MANIFEST_INVALID","message":"manifest invalid","detail":{"description":"Could not find item at docker-sc-release_local:dckr/some-service/_uploads/sha256__8e3d9783c8401812e442d0302c2b2f75456c9fc4a689d684bce2961b97ecf908"}}]}
18:31:18      at com.google.cloud.tools.jib.http.FailoverHttpClient.call (FailoverHttpClient.java:315)
18:31:18      at com.google.cloud.tools.jib.http.FailoverHttpClient.call (FailoverHttpClient.java:237)
18:31:18      at com.google.cloud.tools.jib.registry.RegistryEndpointCaller.call (RegistryEndpointCaller.java:139)
18:31:18      at com.google.cloud.tools.jib.registry.RegistryEndpointCaller.call (RegistryEndpointCaller.java:115)
18:31:18      at com.google.cloud.tools.jib.registry.RegistryClient.callRegistryEndpoint (RegistryClient.java:473)
18:31:18      at com.google.cloud.tools.jib.registry.RegistryClient.pushManifest (RegistryClient.java:321)
18:31:18      at com.google.cloud.tools.jib.builder.steps.PushImageStep.call (PushImageStep.java:125)
18:31:18      at com.google.cloud.tools.jib.builder.steps.PushImageStep.call (PushImageStep.java:43)
18:31:18      at com.google.common.util.concurrent.TrustedListenableFutureTask$TrustedFutureInterruptibleTask.runInterruptibly (TrustedListenableFutureTask.java:125)
18:31:18      at com.google.common.util.concurrent.InterruptibleTask.run (InterruptibleTask.java:69)
18:31:18      at com.google.common.util.concurrent.TrustedListenableFutureTask.run (TrustedListenableFutureTask.java:78)
18:31:18      at java.util.concurrent.ThreadPoolExecutor.runWorker (ThreadPoolExecutor.java:1142)
18:31:18      at java.util.concurrent.ThreadPoolExecutor$Worker.run (ThreadPoolExecutor.java:617)
18:31:18      at java.lang.Thread.run (Thread.java:748)
18:31:18  Caused by: com.google.api.client.http.HttpResponseException: 400 Bad Request
18:31:18  {"errors":[{"code":"MANIFEST_INVALID","message":"manifest invalid","detail":{"description":"Could not find item at docker-sc-release_local:dckr/some-service/_uploads/sha256__8e3d9783c8401812e442d0302c2b2f75456c9fc4a689d684bce2961b97ecf908"}}]}
18:31:18      at com.google.api.client.http.HttpRequest.execute (HttpRequest.java:1097)
18:31:18      at com.google.cloud.tools.jib.http.FailoverHttpClient.call (FailoverHttpClient.java:309)
18:31:18      at com.google.cloud.tools.jib.http.FailoverHttpClient.call (FailoverHttpClient.java:237)
18:31:18      at com.google.cloud.tools.jib.registry.RegistryEndpointCaller.call (RegistryEndpointCaller.java:139)
18:31:18      at com.google.cloud.tools.jib.registry.RegistryEndpointCaller.call (RegistryEndpointCaller.java:115)
18:31:18      at com.google.cloud.tools.jib.registry.RegistryClient.callRegistryEndpoint (RegistryClient.java:473)
18:31:18      at com.google.cloud.tools.jib.registry.RegistryClient.pushManifest (RegistryClient.java:321)
18:31:18      at com.google.cloud.tools.jib.builder.steps.PushImageStep.call (PushImageStep.java:125)
18:31:18      at com.google.cloud.tools.jib.builder.steps.PushImageStep.call (PushImageStep.java:43)
18:31:18      at com.google.common.util.concurrent.TrustedListenableFutureTask$TrustedFutureInterruptibleTask.runInterruptibly (TrustedListenableFutureTask.java:125)
18:31:18      at com.google.common.util.concurrent.InterruptibleTask.run (InterruptibleTask.java:69)
18:31:18      at com.google.common.util.concurrent.TrustedListenableFutureTask.run (TrustedListenableFutureTask.java:78)
18:31:18      at java.util.concurrent.ThreadPoolExecutor.runWorker (ThreadPoolExecutor.java:1142)
18:31:18      at java.util.concurrent.ThreadPoolExecutor$Worker.run (ThreadPoolExecutor.java:617)
18:31:18      at java.lang.Thread.run (Thread.java:748)
```

**Additional Information**: <!-- Any additional information that may be helpful -->

I don't use OCI anywhere in configuration, looks like error text is misleading.

Not sure if it is our artifactory fails or the Jib plugin may not handle pushing shared layers between projects.

<!-- Thanks for contributing! -->

<!--
Before filing an issue, please reproduce with the latest version of Jib.

If you are encountering errors pulling or pushing to remote registries,
please check our Frequently Asked Questions before filing an issue:

    https://github.com/GoogleContainerTools/jib/blob/master/docs/faq.md#registry-errors
-->

**Environment**:
- *Jib version:* 1.8.0
- *Build tool:* Maven  3.6.1
- *OS:* Mac 10.15.2

**Description of the issue**:

run jib-maven-plugin:1.8.0:dockerBuild in idea
the image build successful
but when I run this image, failed

Maybe the JDK configuration is wrong
What should I do

**Expected behavior**:
run success

**Steps to reproduce**:
<!-- Please provide a minimal and precise series of steps -->

  1. dockerBuild
  2. run image

**`jib-maven-plugin` Configuration**: <!-- Delete this section if not used -->
```xml
<plugin>
                <groupId>com.google.cloud.tools</groupId>
                <artifactId>jib-maven-plugin</artifactId>
                <version>1.8.0</version>
                <configuration>
                    <to>
                        <image>harbor.test.com/${project.parent.artifactId}/${project.artifactId}:${env}-${project.version}</image>
                    </to>
                    <from>
                        <image>openjdk:alpine</image>
                    </from>
                    <container>
                        <mainClass>com.test.auth.server.AuthServerApplication</mainClass>
                        <jvmFlags>
                            <jvmFlag>-Xms512m</jvmFlag>
                        </jvmFlags>
                        <ports>
                            <port>9082</port>
                        </ports>
                        <environment>
                            <TZ>Asia/Shanghai</TZ>
                        </environment>
                        <volumes>/tmp</volumes>
                        <useCurrentTimestamp>true</useCurrentTimestamp>
                        <labels>
                            <maintainer>jade</maintainer>
                        </labels>
                    </container>
                    <allowInsecureRegistries>true</allowInsecureRegistries>
                </configuration>
            </plugin>
```


**Log output**: <!-- If applicable, provide relevant log output -->

/Library/Java/JavaVirtualMachines/jdk1.8.0_221.jdk/Contents/Home/bin/java -Dvisualvm.id=2681117957594 -Dmaven.multiModuleProjectDirectory=/Users/jade/work/workspace/test/test-auth/test-auth-server -Dmaven.home=/Users/jade/work/software/apache-maven-3.6.1 -Dclassworlds.conf=/Users/jade/work/software/apache-maven-3.6.1/bin/m2.conf "-Dmaven.ext.class.path=/Applications/IntelliJ IDEA.app/Contents/plugins/maven/lib/maven-event-listener.jar" "-javaagent:/Applications/IntelliJ IDEA.app/Contents/lib/idea_rt.jar=50153:/Applications/IntelliJ IDEA.app/Contents/bin" -Dfile.encoding=UTF-8 -classpath /Users/jade/work/software/apache-maven-3.6.1/boot/plexus-classworlds-2.6.0.jar org.codehaus.classworlds.Launcher -Didea.version2019.3.1 -s /Users/jade/work/software/apache-maven-3.6.1/conf/settings.xml -DskipTests=true com.google.cloud.tools:jib-maven-plugin:1.8.0:dockerBuild -P dev
[INFO] Scanning for projects...
[WARNING] 
[WARNING] Some problems were encountered while building the effective model for com.test:test-auth-server:jar:1.0-SNAPSHOT
[WARNING] 'dependencyManagement.dependencies.dependency.(groupId:artifactId:type:classifier)' must be unique: com.alibaba:fastjson:jar -> duplicate declaration of version 1.2.60 @ com.test:test-dependencies:1.0.2, /Users/jade/work/software/maven_repository/com/test/test-dependencies/1.0.2/test-dependencies-1.0.2.pom, line 3179, column 25
[WARNING] 'dependencyManagement.dependencies.dependency.version' for com.test.cloud:test-cloud-starter:jar is either LATEST or RELEASE (both of them are being deprecated) @ com.test:test-dependencies:1.0.2, /Users/jade/work/software/maven_repository/com/test/test-dependencies/1.0.2/test-dependencies-1.0.2.pom, line 3187, column 26
[WARNING] 
[WARNING] It is highly recommended to fix these problems because they threaten the stability of your build.
[WARNING] 
[WARNING] For this reason, future Maven versions might no longer support building such malformed projects.
[WARNING] 
[INFO] 
[INFO] ----------------------< com.test:test-auth-server >-----------------------
[INFO] Building test-auth-server 1.0-SNAPSHOT
[INFO] --------------------------------[ jar ]---------------------------------
Downloading from test: http://172.16.6.124:8044/nexus/repository/maven-public/com/test/test-auth-api/1.0.4-SNAPSHOT/maven-metadata.xml
Downloaded from test: http://172.16.6.124:8044/nexus/repository/maven-public/com/test/test-auth-api/1.0.4-SNAPSHOT/maven-metadata.xml (772 B at 3.4 kB/s)
Downloading from test: http://172.16.6.124:8044/nexus/repository/maven-public/com/test/cloud/test-cloud-starter/1.0.6-SNAPSHOT/maven-metadata.xml
Downloaded from test: http://172.16.6.124:8044/nexus/repository/maven-public/com/test/cloud/test-cloud-starter/1.0.6-SNAPSHOT/maven-metadata.xml (780 B at 52 kB/s)
Downloading from test: http://172.16.6.124:8044/nexus/repository/maven-public/com/test/test-utils/1.0-SNAPSHOT/maven-metadata.xml
Downloaded from test: http://172.16.6.124:8044/nexus/repository/maven-public/com/test/test-utils/1.0-SNAPSHOT/maven-metadata.xml (760 B at 51 kB/s)
Downloading from test: http://172.16.6.124:8044/nexus/repository/maven-public/com/test/test-base/1.0-SNAPSHOT/maven-metadata.xml
Downloaded from test: http://172.16.6.124:8044/nexus/repository/maven-public/com/test/test-base/1.0-SNAPSHOT/maven-metadata.xml (588 B at 42 kB/s)
[INFO] 
[INFO] --- jib-maven-plugin:1.8.0:dockerBuild (default-cli) @ test-auth-server ---
[WARNING] <container><useCurrentTimestamp> is deprecated; use <container><creationTime> with the value USE_CURRENT_TIMESTAMP instead
[WARNING] Setting image creation time to current time; your image may not be reproducible.
[INFO] 
[INFO] Containerizing application to Docker daemon as harbor.test.com/test-auth/test-auth-server:dev-1.0-SNAPSHOT...
[WARNING] Base image 'openjdk:alpine' does not use a specific image digest - build may not be reproducible
[INFO] Getting manifest for base image openjdk:alpine...
[INFO] Building dependencies layer...
[INFO] Building resources layer...
[INFO] Building snapshot dependencies layer...
[INFO] Building classes layer...
[INFO] The base image requires auth. Trying again for openjdk:alpine...
[INFO] Retrieving registry credentials for registry-1.docker.io...
[WARNING] The credential helper (docker-credential-desktop) has nothing for server URL: registry-1.docker.io

Got output:

credentials not found in native keychain

[WARNING] The credential helper (docker-credential-desktop) has nothing for server URL: registry.hub.docker.com

Got output:

credentials not found in native keychain

[WARNING] The credential helper (docker-credential-desktop) has nothing for server URL: index.docker.io

Got output:

credentials not found in native keychain

[WARNING] The credential helper (docker-credential-desktop) has nothing for server URL: docker.io

Got output:

credentials not found in native keychain

[INFO] Using base image with digest: sha256:d4c84528b8de75bf40ef402e7b02ffe60c5ae834a702e510664be1f6fc03d510
[INFO] 
[INFO] Container entrypoint set to [java, -Xms512m, -cp, /app/resources:/app/classes:/app/libs/*, com.test.auth.server.AuthServerApplication]
[INFO] Loading to Docker daemon...
[INFO] 
[INFO] Built image to Docker daemon as harbor.test.com/test-auth/test-auth-server:dev-1.0-SNAPSHOT
[INFO] 
[INFO] ------------------------------------------------------------------------
[INFO] BUILD SUCCESS
[INFO] ------------------------------------------------------------------------
[INFO] Total time:  15.254 s
[INFO] Finished at: 2020-01-14T09:34:38+08:00
[INFO] ------------------------------------------------------------------------



docker run log
Exception in thread "main" java.lang.IllegalAccessError: tried to access method org.springframework.core.io.support.SpringFactoriesLoader.loadFactoryNames(Ljava/lang/Class;Ljava/lang/ClassLoader;)Ljava/util/List; from class org.springframework.boot.SpringApplication
	at org.springframework.boot.SpringApplication.getSpringFactoriesInstances(SpringApplication.java:418)
	at org.springframework.boot.SpringApplication.getSpringFactoriesInstances(SpringApplication.java:412)
	at org.springframework.boot.SpringApplication.<init>(SpringApplication.java:268)
	at org.springframework.boot.SpringApplication.<init>(SpringApplication.java:249)
	at org.springframework.boot.builder.SpringApplicationBuilder.createSpringApplication(SpringApplicationBuilder.java:104)
	at org.springframework.boot.builder.SpringApplicationBuilder.<init>(SpringApplicationBuilder.java:92)
	at com.test.auth.server.AuthServerApplication.main(AuthServerApplication.java:22)

**Additional Information**: <!-- Any additional information that may be helpful -->
host
172.16.5.111 harbor.test.com

<!-- Thanks for contributing! -->

The jib-maven-plugin will now create a json file with image 
metadata during the build, like so:
```
$ mvn jib:build
...
$ cat target/jib-image.json | jq .
{
  "image": "gcr.io/project/image:tag",
  "imageId": "sha256:61bb3ec31a47cb730eb58a38bbfa813761a51dca69d10e39c24c3d00a7b2c7a9",
  "imageDigest": "sha256:3f1be7e19129edb202c071a659a4db35280ab2bb1a16f223bfd5d1948657b6fc",
  "tags": ["latest", "tag"]
}
```

This is handy if you generate the image name or tag in a dynamic
fashion (eg, including a timstamp) and you have other tools in a
CD pipeline that operate on the generated image. In our case, we
would like to use the reference to the generated image to deploy to
K8S, and our deployment tooling picks it up from a file.

The path to the output file is configurable in 
`outputPaths.imageJson`.

Related issue: #1875
**Environment**:

- *Jib version:* 1.8.0
- *Build tool:* Maven 3.6.2
- *OS:* Windows 10

**Description of the issue**:
When the build fails, the actual error message is null. This causes an NPE when the exception is wrapped thus hiding the original exception.

**Expected behavior**:
The actual error is shown

**Steps to reproduce**:

mvn clean package jib:build

**Additional Information**:

The target docker registry is spawned from minishift (on the same host).
Using a different docker registry works fine.

https://github.com/GoogleContainerTools/jib/blob/9905c13be36bf43a536eb3ad7de54c97c130ebb7/jib-plugins-common/src/main/java/com/google/cloud/tools/jib/plugins/common/JibBuildRunner.java#L275

<details><summary>Log</summary>

````txt
[INFO] --- jib-maven-plugin:1.8.0:build (default-cli) @ dummy-service ---
[WARNING] Setting image creation time to current time; your image may not be reproducible.
[INFO]
[INFO] Containerizing application to 192.168.1.2:2376/dummy-service:1.0.0-SNAPSHOT...
[WARNING] Base image 'adoptopenjdk/openjdk11:alpine-jre' does not use a specific image digest - build may not be reproducible
[WARNING] The credential helper (docker-credential-desktop) has nothing for server URL: 192.168.1.2:2376

Got output:

credentials not found in native keychain

[WARNING] Cannot verify server at https://192.168.1.2:2376/v2/. Attempting again with no TLS verification.
[WARNING] Failed to connect to https://192.168.1.2:2376/v2/ over HTTPS. Attempting again with HTTP.
[ERROR] I/O error for image [192.168.1.2:2376/dummy-service]:
[ERROR]     null
[WARNING] Cannot verify server at https://registry-1.docker.io/v2/adoptopenjdk/openjdk11/manifests/alpine-jre. Attempting again with no TLS verification.
[INFO] Executing tasks:
[INFO] [========                      ] 27,5% complete
[INFO] > pulling base image manifest
[INFO] > building dependencies layer
[INFO]
[INFO] ------------------------------------------------------------------------
[INFO] BUILD FAILURE
[INFO] ------------------------------------------------------------------------
[INFO] Total time:  46.389 s
[INFO] Finished at: 2020-01-10T15:00:00+00:00
[INFO] ------------------------------------------------------------------------
[ERROR] Failed to execute goal com.google.cloud.tools:jib-maven-plugin:1.8.0:build (default-cli) on project dummy-service: Execution default-cli of goal co
m.google.cloud.tools:jib-maven-plugin:1.8.0:build failed: expected a non-null reference -> [Help 1]
````

</details>


<details><summary>Debug-Log</summary>

````txt
[DEBUG] TIMING        Pulling base image manifest
[DEBUG] TIMING        Preparing application layer builders
[DEBUG] TIMED Preparing application layer builders : 0.976 ms
[DEBUG] TIMING        Building dependencies layer
[DEBUG] TIMING        Building resources layer
[DEBUG] TIMING        Building snapshot dependencies layer
[DEBUG] TIMING        Building classes layer
[DEBUG] TIMED Building classes layer : 227.477 ms
[DEBUG] TIMED Building snapshot dependencies layer : 230.405 ms
[DEBUG] Building resources layer built sha256:e1197e6b2e8ff0d348266e2cd02d484818ca148f868b20eb411b7b7dff330459
[DEBUG] TIMED Building resources layer : 303.636 ms
[WARNING] The credential helper (docker-credential-desktop) has nothing for server URL: 192.168.1.2:2376

Got output:

credentials not found in native keychain

[DEBUG] No credentials could be retrieved for registry 192.168.1.2:2376
[DEBUG] TIMED Retrieving registry credentials for 192.168.1.2:2376 : 366.123 ms
[DEBUG] TIMING        Authenticating push to 192.168.1.2:2376
[WARNING] Cannot verify server at https://192.168.1.2:2376/v2/. Attempting again with no TLS verification.
[WARNING] Failed to connect to https://192.168.1.2:2376/v2/ over HTTPS. Attempting again with HTTP.
[ERROR] I/O error for image [192.168.1.2:2376/dummy-service]:
[ERROR]     null
[DEBUG] TIMED Authenticating push to 192.168.1.2:2376 : 135.71 ms
[DEBUG] TIMED Building and pushing image : 523.297 ms
[WARNING] Cannot verify server at https://registry-1.docker.io/v2/adoptopenjdk/openjdk11/manifests/alpine-jre. Attempting again with no TLS verification.
[INFO] Executing tasks:
[INFO] [========                      ] 27,5% complete
[INFO] > pulling base image manifest
[INFO] > building dependencies layer
[INFO]
[INFO] ------------------------------------------------------------------------
[INFO] BUILD FAILURE
[INFO] ------------------------------------------------------------------------
[INFO] Total time:  47.025 s
[INFO] Finished at: 2020-01-10T15:00:00+00:00
[INFO] ------------------------------------------------------------------------
[ERROR] Failed to execute goal com.google.cloud.tools:jib-maven-plugin:1.8.0:build (default-cli) on project dummy-service: Execution default-cli of goal co
m.google.cloud.tools:jib-maven-plugin:1.8.0:build failed: expected a non-null reference -> [Help 1]
org.apache.maven.lifecycle.LifecycleExecutionException: Failed to execute goal com.google.cloud.tools:jib-maven-plugin:1.8.0:build (default-cli) on project du
mmy-service: Execution default-cli of goal com.google.cloud.tools:jib-maven-plugin:1.8.0:build failed: expected a non-null reference
    at org.apache.maven.lifecycle.internal.MojoExecutor.execute (MojoExecutor.java:215)
    at org.apache.maven.lifecycle.internal.MojoExecutor.execute (MojoExecutor.java:156)
    at org.apache.maven.lifecycle.internal.MojoExecutor.execute (MojoExecutor.java:148)
    at org.apache.maven.lifecycle.internal.LifecycleModuleBuilder.buildProject (LifecycleModuleBuilder.java:117)
    at org.apache.maven.lifecycle.internal.LifecycleModuleBuilder.buildProject (LifecycleModuleBuilder.java:81)
    at org.apache.maven.lifecycle.internal.builder.singlethreaded.SingleThreadedBuilder.build (SingleThreadedBuilder.java:56)
    at org.apache.maven.lifecycle.internal.LifecycleStarter.execute (LifecycleStarter.java:128)
    at org.apache.maven.DefaultMaven.doExecute (DefaultMaven.java:305)
    at org.apache.maven.DefaultMaven.doExecute (DefaultMaven.java:192)
    at org.apache.maven.DefaultMaven.execute (DefaultMaven.java:105)
    at org.apache.maven.cli.MavenCli.execute (MavenCli.java:956)
    at org.apache.maven.cli.MavenCli.doMain (MavenCli.java:288)
    at org.apache.maven.cli.MavenCli.main (MavenCli.java:192)
    at jdk.internal.reflect.NativeMethodAccessorImpl.invoke0 (Native Method)
    at jdk.internal.reflect.NativeMethodAccessorImpl.invoke (NativeMethodAccessorImpl.java:62)
    at jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke (DelegatingMethodAccessorImpl.java:43)
    at java.lang.reflect.Method.invoke (Method.java:566)
    at org.codehaus.plexus.classworlds.launcher.Launcher.launchEnhanced (Launcher.java:282)
    at org.codehaus.plexus.classworlds.launcher.Launcher.launch (Launcher.java:225)
    at org.codehaus.plexus.classworlds.launcher.Launcher.mainWithExitCode (Launcher.java:406)
    at org.codehaus.plexus.classworlds.launcher.Launcher.main (Launcher.java:347)
Caused by: org.apache.maven.plugin.PluginExecutionException: Execution default-cli of goal com.google.cloud.tools:jib-maven-plugin:1.8.0:build failed: expected a non-null reference
    at org.apache.maven.plugin.DefaultBuildPluginManager.executeMojo (DefaultBuildPluginManager.java:148)
    at org.apache.maven.lifecycle.internal.MojoExecutor.execute (MojoExecutor.java:210)
    at org.apache.maven.lifecycle.internal.MojoExecutor.execute (MojoExecutor.java:156)
    at org.apache.maven.lifecycle.internal.MojoExecutor.execute (MojoExecutor.java:148)
    at org.apache.maven.lifecycle.internal.LifecycleModuleBuilder.buildProject (LifecycleModuleBuilder.java:117)
    at org.apache.maven.lifecycle.internal.LifecycleModuleBuilder.buildProject (LifecycleModuleBuilder.java:81)
    at org.apache.maven.lifecycle.internal.builder.singlethreaded.SingleThreadedBuilder.build (SingleThreadedBuilder.java:56)
    at org.apache.maven.lifecycle.internal.LifecycleStarter.execute (LifecycleStarter.java:128)
    at org.apache.maven.DefaultMaven.doExecute (DefaultMaven.java:305)
    at org.apache.maven.DefaultMaven.doExecute (DefaultMaven.java:192)
    at org.apache.maven.DefaultMaven.execute (DefaultMaven.java:105)
    at org.apache.maven.cli.MavenCli.execute (MavenCli.java:956)
    at org.apache.maven.cli.MavenCli.doMain (MavenCli.java:288)
    at org.apache.maven.cli.MavenCli.main (MavenCli.java:192)
    at jdk.internal.reflect.NativeMethodAccessorImpl.invoke0 (Native Method)
    at jdk.internal.reflect.NativeMethodAccessorImpl.invoke (NativeMethodAccessorImpl.java:62)
    at jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke (DelegatingMethodAccessorImpl.java:43)
    at java.lang.reflect.Method.invoke (Method.java:566)
    at org.codehaus.plexus.classworlds.launcher.Launcher.launchEnhanced (Launcher.java:282)
    at org.codehaus.plexus.classworlds.launcher.Launcher.launch (Launcher.java:225)
    at org.codehaus.plexus.classworlds.launcher.Launcher.mainWithExitCode (Launcher.java:406)
    at org.codehaus.plexus.classworlds.launcher.Launcher.main (Launcher.java:347)
Caused by: com.google.common.base.VerifyException: expected a non-null reference
    at com.google.common.base.Verify.verify (Verify.java:124)
    at com.google.common.base.Verify.verifyNotNull (Verify.java:500)
    at com.google.common.base.Verify.verifyNotNull (Verify.java:477)
    at com.google.cloud.tools.jib.plugins.common.JibBuildRunner.runBuild (JibBuildRunner.java:275)
    at com.google.cloud.tools.jib.maven.BuildImageMojo.execute (BuildImageMojo.java:99)
    at org.apache.maven.plugin.DefaultBuildPluginManager.executeMojo (DefaultBuildPluginManager.java:137)
    at org.apache.maven.lifecycle.internal.MojoExecutor.execute (MojoExecutor.java:210)
    at org.apache.maven.lifecycle.internal.MojoExecutor.execute (MojoExecutor.java:156)
    at org.apache.maven.lifecycle.internal.MojoExecutor.execute (MojoExecutor.java:148)
    at org.apache.maven.lifecycle.internal.LifecycleModuleBuilder.buildProject (LifecycleModuleBuilder.java:117)
    at org.apache.maven.lifecycle.internal.LifecycleModuleBuilder.buildProject (LifecycleModuleBuilder.java:81)
    at org.apache.maven.lifecycle.internal.builder.singlethreaded.SingleThreadedBuilder.build (SingleThreadedBuilder.java:56)
    at org.apache.maven.lifecycle.internal.LifecycleStarter.execute (LifecycleStarter.java:128)
    at org.apache.maven.DefaultMaven.doExecute (DefaultMaven.java:305)
    at org.apache.maven.DefaultMaven.doExecute (DefaultMaven.java:192)
    at org.apache.maven.DefaultMaven.execute (DefaultMaven.java:105)
    at org.apache.maven.cli.MavenCli.execute (MavenCli.java:956)
    at org.apache.maven.cli.MavenCli.doMain (MavenCli.java:288)
    at org.apache.maven.cli.MavenCli.main (MavenCli.java:192)
    at jdk.internal.reflect.NativeMethodAccessorImpl.invoke0 (Native Method)
    at jdk.internal.reflect.NativeMethodAccessorImpl.invoke (NativeMethodAccessorImpl.java:62)
    at jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke (DelegatingMethodAccessorImpl.java:43)
    at java.lang.reflect.Method.invoke (Method.java:566)
    at org.codehaus.plexus.classworlds.launcher.Launcher.launchEnhanced (Launcher.java:282)
    at org.codehaus.plexus.classworlds.launcher.Launcher.launch (Launcher.java:225)
    at org.codehaus.plexus.classworlds.launcher.Launcher.mainWithExitCode (Launcher.java:406)
    at org.codehaus.plexus.classworlds.launcher.Launcher.main (Launcher.java:347)
````

</details>

-----------

PS: Do you have any hint what the original error could have been?
I haven't reproduced this. This might be easier to hit on a slow network.

In https://github.com/GoogleContainerTools/jib/issues/2207#issuecomment-572128861, it looks like we already got an exception, but it doesn't seem to terminate the JVM right away. I thought an exception from `Future.get()` would make Maven or Gradle to stop immediately, but maybe I'm wrong or there's something preventing that from happening.
Observed this in [#2215](https://github.com/GoogleContainerTools/jib/issues/2215#issuecomment-571772325).

> If the Jib cache is empty, Docker Hub returns 404 (and fail) in the first run. Interestingly, subsequent runs return 401. Worth understanding why.

If a base image referred to by a digest, we look into the manifest cache. If the manifest is in the cache, we return it along with no (null) base image credentials.

```java
    if (buildContext.isOffline() || imageReference.isTagDigest()) {
      Optional<Image> image = getCachedBaseImage();
      if (image.isPresent()) {
        return new ImageAndAuthorization(image.get(), null);
      }
```

However, if the base image cache hasn't yet cached some layers (e.g., pulling base image layers failed for some reason after caching the manifest), Jib will go out and try to download the missing layers. But it may fail because we didn't return base image credentials above.