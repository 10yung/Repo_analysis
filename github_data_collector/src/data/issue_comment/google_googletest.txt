I'm having build problems with google mock using this week's commit: daff5fea.

If I grab google test master: 8b4817

Then things go bad here - this seems to be true of various versions of clang and gcc (6,7,8,9):
```
Scanning dependencies of target gmock                                                                                                                                          
[ 28%] Building CXX object third_party/googletest/build/googlemock/CMakeFiles/gmock.dir/src/gmock-all.cc.o                                                                     
In file included from /home/mrn/packages/benchmark/googletest/googlemock/include/gmock/gmock.h:66:0,                                                                           
                 from /home/mrn/packages/benchmark/googletest/googlemock/src/gmock-all.cc:39:                                                                                  
/home/mrn/packages/benchmark/googletest/googlemock/include/gmock/gmock-more-actions.h:138:1: error: ISO C++11 requires at least one argument for the "..." in a variadic macro 
 ACTION_P(ReturnPointee, pointer) { return *pointer; }                                                                                                                         
 ^~~~~~~~~~~~~~~~~~~~                                                                                                                                                          
/home/mrn/packages/benchmark/googletest/googlemock/include/gmock/gmock-more-actions.h:138:1: error: ISO C++11 requires at least one argument for the "..." in a variadic macro 
/home/mrn/packages/benchmark/googletest/googlemock/include/gmock/gmock-more-actions.h:138:1: error: ISO C++11 requires at least one argument for the "..." in a variadic macro 
/home/mrn/packages/benchmark/googletest/googlemock/include/gmock/gmock-more-actions.h:138:1: error: ISO C++11 requires at least one argument for the "..." in a variadic macro 
/home/mrn/packages/benchmark/googletest/googlemock/include/gmock/gmock-more-actions.h:138:1: error: ISO C++11 requires at least one argument for the "..." in a variadic macro 
 ACTION_P(ReturnPointee, pointer) { return *pointer; }                                                                                                                         
```
If I checkout release-1.8.1 of google test, builds on all the same compilers seem to go just fine.

Maybe this is entirely a problem with google test? If so, happy to close this issue.

An always false condition was remove from Normalize member function of FilePath and the body of the function which was poorly written, is improved.

Closes #2647 
I am trying to write some code by modifying densityBasedTurbo in foam extend 4. I am getting the following error:

```
BSTurboFoam.C:127:25: error: passing ‘const surfaceVectorField {aka const Foam::GeometricField<Foam::Vector<double>, Foam::fvsPatchField, Foam::surfaceMesh>}’ as ‘this’ argument discards qualifiers [-fpermissive]
dbnsFlux.dotX() = mrfZones.faceU();
```

In BSTurboFoam.C : 
`dbnsFlux.dotX() = mrfZones.faceU();`

In numericFlux.C:

```
template<class Flux, class Limiter>
Foam::numericFlux<Flux, Limiter>::numericFlux
(
const volScalarField& p,
const volVectorField& U,
const volScalarField& T,
basicThermo& thermo
)
:
numericFluxBase<Flux>(p.mesh()),
p_(p),
U_(U),
T_(T),
thermo_(thermo),
rhoFlux_
(
....
),
rhoUFlux_
(
...
),
rhoEFlux_
(
...
),
dotX_
(
IOobject
(
"dotX",
this->mesh().time().timeName(),
this->mesh(),
IOobject::NO_READ,
IOobject::NO_WRITE
),
this->mesh(),
dimensionedVector("zero", dimVelocity, vector::zero)
)

{}
```

In MRFZone.C :
```
void Foam::MRFZone::faceU
(
surfaceVectorField& zoneFaceU
) const
{
...
}
```
In MRFZones.C :
```
Foam::tmp<Foam::surfaceVectorField> Foam::MRFZones::faceU() const
{
tmp<surfaceVectorField> tMRFZonesFaceU
(
new surfaceVectorField
(
...
)
);
surfaceVectorField& MRFZonesFaceU = tMRFZonesFaceU();

forAll(*this, i)
{
operator[](i).faceU(MRFZonesFaceU);
}

return tMRFZonesFaceU;
}
```


I shall be greatly helped if the error gets resolved and can proceed further. Thanks a lot for your time.
Removing exclusion of *-main and*-all targets from the library.json used on platformio.

Closes #2671 
With the current library.json configuration, platformio is not capable of compiling the gtest and gmock.

Because here we exclude the files from the installing:
```yml
"exclude": [
            "ci",
            "googlemock/cmake",
            "googlemock/scripts",
            "googlemock/src/gmock-all.cc",
            "googlemock/src/gmock_main.cc",
            "googlemock/test",
            "googlemock/CMakeLists.txt",
            "googletest/cmake",
            "googletest/scripts",
            "googletest/src/gtest-all.cc",
            "googletest/src/gtest_main.cc",
            "googletest/test",
            "googletest/CMakeLists.txt"
          ]
``` 
Which exclude gtest-all.cc,gmock-all.cc, gtest_main.cc and gmock_main.cc.

And then, the only source to be compiled are determined here:
```yaml
"srcFilter": [
          "+<*>",
          "-<.git/>",
          "-<googlemock>",
          "-<googlemock/test/>",
          "-<googlemock/src>",
          "+<googlemock/src/gmock-all.cc>",
          "+<googletest/src/gtest-all.cc>",
          "+<googlemock/src/gmock_main.cc>",
          "-<googletest>",
          "-<googletest/codegear/>",
          "-<googletest/samples>",
          "-<googletest/test/>",
          "-<googletest/xcode>",
          "-<googletest/src>",
          "+<googletest/src/gtest-all.cc>",
          "+<googletest/src/gtest_main.cc>"
        ]
```

Which set to compile only the excluded files: gtest-all.cc,gmock-all.cc, gtest_main.cc and gmock_main.cc.

Therefore the library generated by this target is empty.

Am I missing something?
I feel as though the alphanumeric + `_` charset is too restrictive, especially when formatting complex objects into names.  Added a few extra characters which will help with this.
<details>
<summary>toolchain.cmake</summary>

```cmake
set(CMAKE_SYSTEM_NAME Windows)
set(CMAKE_SYSTEM_PROCESSOR x86_64)

set(triple x86_64-pc-w64-mingw32)

message(STATUS "Setting CLang as compiler")
set(CMAKE_C_COMPILER "clang")
set(CMAKE_CXX_COMPILER "clang++")
set(CMAKE_CPP_COMPILER "clang++")

set(CMAKE_MAKE_PROGRAM "ninja" CACHE FILEPATH "Path to make")
set(CMAKE_NM "/usr/x86_64-w64-mingw32/bin/nm" CACHE FILEPATH "Path to nm")
set(CMAKE_OBJCOPY "/usr/x86_64-w64-mingw32/bin/objcopy" CACHE FILEPATH "Path to objcopy")
set(CMAKE_STRIP "/usr/x86_64-w64-mingw32/bin/strip" CACHE FILEPATH "Path to strip")

set(CMAKE_AR "llvm-ar" CACHE FILEPATH "Path to ar")
set(CMAKE_OBJDUMP "llvm-objdump" CACHE FILEPATH "Path to objdump")
set(CMAKE_RANLIB "llvm-ranlib" CACHE FILEPATH "Path to ranlib")

set(CMAKE_LINKER "lld-link-10" CACHE FILEPATH "Path to linker")
set(CMAKE_RC_COMPILER "x86_64-w64-mingw32-windres" CACHE FILEPATH "Path to windres")

set(CMAKE_C_COMPILER_TARGET ${triple})
set(CMAKE_CXX_COMPILER_TARGET ${triple})
set(CMAKE_CPP_COMPILER_TARGET ${triple})

set(CMAKE_C_FLAGS ${CMAKE_FLAGS})
set(CMAKE_CXX_FLAGS ${CMAKE_FLAGS})

set(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} ${CMAKE_LINKER_FLAGS}")
set(CMAKE_SHARED_LINKER_FLAGS "${CMAKE_SHARED_LINKER_FLAGS} ${CMAKE_LINKER_FLAGS}")


set(CMAKE_LINKER_FLAGS "${CMAKE_LINKER_FLAGS}")
set(CMAKE_C_LINKER_FLAGS ${CMAKE_LINKER_FLAGS})
set(CMAKE_CXX_LINKER_FLAGS ${CMAKE_LINKER_FLAGS})

set(CMAKE_CXX_STANDARD_LIBRARIES "-lssp")


set(CMAKE_FIND_ROOT_PATH_MODE_PROGRAM NEVER)
set(CMAKE_FIND_ROOT_PATH_MODE_LIBRARY NEVER)
set(CMAKE_FIND_ROOT_PATH_MODE_INCLUDE NEVER)
set(CMAKE_FIND_ROOT_PATH_MODE_PACKAGE NEVER)
```

The distro is Ubuntu Eoan.

</details>

```
binutils-mingw-w64-i686/eoan,now 2.33-2ubuntu1+8.3ubuntu3 amd64 [installed,automatic]
binutils-mingw-w64-x86-64/eoan,now 2.33-2ubuntu1+8.3ubuntu3 amd64 [installed,automatic]
clang-10/unknown,now 1:10~++20200113081712+c958639098a-1~exp1~20200113072319.77 amd64 [installed]
g++-mingw-w64-i686/eoan,now 9.2.1-9ubuntu1+22~exp1ubuntu2 amd64 [installed]
g++-mingw-w64-x86-64/eoan,now 9.2.1-9ubuntu1+22~exp1ubuntu2 amd64 [installed,automatic]
g++-mingw-w64/eoan,eoan,now 9.2.1-9ubuntu1+22~exp1ubuntu2 all [installed,automatic]
gcc-mingw-w64-base/eoan,now 9.2.1-9ubuntu1+22~exp1ubuntu2 amd64 [installed,automatic]
gcc-mingw-w64-i686/eoan,now 9.2.1-9ubuntu1+22~exp1ubuntu2 amd64 [installed,automatic]
gcc-mingw-w64-x86-64/eoan,now 9.2.1-9ubuntu1+22~exp1ubuntu2 amd64 [installed,automatic]
gcc-mingw-w64/eoan,eoan,now 9.2.1-9ubuntu1+22~exp1ubuntu2 all [installed,automatic]
libclang-10-dev/unknown,now 1:10~++20200113081712+c958639098a-1~exp1~20200113072319.77 amd64 [installed]
libclang-common-10-dev/unknown,now 1:10~++20200113081712+c958639098a-1~exp1~20200113072319.77 amd64 [installed,automatic]
libclang1-10/unknown,now 1:10~++20200113081712+c958639098a-1~exp1~20200113072319.77 amd64 [installed,automatic]
llvm-10-dev/unknown,now 1:10~++20200113081712+c958639098a-1~exp1~20200113072319.77 amd64 [installed]
llvm-10-runtime/unknown,now 1:10~++20200113081712+c958639098a-1~exp1~20200113072319.77 amd64 [installed,automatic]
llvm-10-tools/unknown,now 1:10~++20200113081712+c958639098a-1~exp1~20200113072319.77 amd64 [installed]
llvm-10/unknown,now 1:10~++20200113081712+c958639098a-1~exp1~20200113072319.77 amd64 [installed,automatic]
mingw-w64-common/eoan,eoan,now 6.0.0-3 all [installed,automatic]
mingw-w64-i686-dev/eoan,eoan,now 6.0.0-3 all [installed,automatic]
mingw-w64-x86-64-dev/eoan,eoan,now 6.0.0-3 all [installed,automatic]
mingw-w64/eoan,eoan,now 6.0.0-3 all [installed]
```

llvm+clang are installed from the official deb repo apt.llvm.org. clang++ of version 10 (and other llvm 10 tools) are selected using `update-alternatives`.

The result is the error:

```
[1/4] /usr/bin/clang++ --target=x86_64-pc-w64-mingw32   -isystem ../include -isystem ../ -Wall -Wshadow -Werror -Wconversion -DGTEST_HAS_PTHREAD=1 -fexceptions -W -Wpointer-arith -Wreturn-type -Wcast-qual -Wwrite-strings -Wswitch -Wunused-parameter -Wcast-align -Wchar-subscripts -Winline -Wredundant-decls -MD -MT CMakeFiles/gtest_main.dir/src/gtest_main.cc.obj -MF CMakeFiles/gtest_main.dir/src/gtest_main.cc.obj.d -o CMakeFiles/gtest_main.dir/src/gtest_main.cc.obj -c ../src/gtest_main.cc
FAILED: CMakeFiles/gtest_main.dir/src/gtest_main.cc.obj 
/usr/bin/clang++ --target=x86_64-pc-w64-mingw32   -isystem ../include -isystem ../ -Wall -Wshadow -Werror -Wconversion -DGTEST_HAS_PTHREAD=1 -fexceptions -W -Wpointer-arith -Wreturn-type -Wcast-qual -Wwrite-strings -Wswitch -Wunused-parameter -Wcast-align -Wchar-subscripts -Winline -Wredundant-decls -MD -MT CMakeFiles/gtest_main.dir/src/gtest_main.cc.obj -MF CMakeFiles/gtest_main.dir/src/gtest_main.cc.obj.d -o CMakeFiles/gtest_main.dir/src/gtest_main.cc.obj -c ../src/gtest_main.cc
In file included from ../src/gtest_main.cc:31:
In file included from ../include/gtest/gtest.h:62:
In file included from ../include/gtest/internal/gtest-internal.h:40:
../include/gtest/internal/gtest-port.h:1487:3: error: unknown type name 'AutoHandle'
  AutoHandle thread_;
  ^
1 error generated.
ninja: build stopped: subcommand failed.

```
I'm looking to make test duration printed in microseconds/nanoseconds for benchmarking. 
Millisecond precision seems to be backed into GetTimeInMillis() for all measurements, so guessing there's no some easy flag to switch precision?

Would that be of any interest if I prep PR to update GetTimeInMillis() to GetTimeInNanos() or smth like that? Keeping default output in millis but config switchable to nanos?
This fixes unit test failure in gmock-matchers_test.cc when compiled using latest VS 2019 on Windows : 

[ RUN      ] PredicateFormatterFromMatcherTest.NoShortCircuitOnFailure
..\..\..\googlemock\test\gmock-matchers_test.cc(6889): error: Expected equality of these values:
  expect
    Which is: "Value of: dummy-name\nExpected: [DescribeTo]\n  Actual: 1, [MatchAndExplain]"
  result.message()
    Which is: "Value of: dummy-name\nExpected: [DescribeTo]\n  Actual: 1 (of type enum testing::gmock_matchers_test::`anonymous namespace'::PredicateFormatterFromMatcherTest::Behavior), [MatchAndExplain]"
With diff:
@@ -1,3 +1,3 @@
 Value of: dummy-name
 Expected: [DescribeTo]
-  Actual: 1, [MatchAndExplain]
+  Actual: 1 (of type enum testing::gmock_matchers_test::`anonymous namespace'::PredicateFormatterFromMatcherTest::Behavior), [MatchAndExplain]

[ RUN      ] PredicateFormatterFromMatcherTest.DetectsFlakyShortCircuit
..\..\..\googlemock\test\gmock-matchers_test.cc(6900): error: Expected equality of these values:
  expect
    Which is: "Value of: dummy-name\nExpected: [DescribeTo]\n  The matcher failed on the initial attempt; but passed when rerun to generate the explanation.\n  Actual: 2, [MatchAndExplain]"
  result.message()
    Which is: "Value of: dummy-name\nExpected: [DescribeTo]\n  The matcher failed on the initial attempt; but passed when rerun to generate the explanation.\n  Actual: 2 (of type enum testing::gmock_matchers_test::`anonymous namespace'::PredicateFormatterFromMatcherTest::Behavior), [MatchAndExplain]"
With diff:
@@ -2,3 +2,3 @@
 Expected: [DescribeTo]
   The matcher failed on the initial attempt; but passed when rerun to generate the explanation.
-  Actual: 2, [MatchAndExplain]
+  Actual: 2 (of type enum testing::gmock_matchers_test::`anonymous namespace'::PredicateFormatterFromMatcherTest::Behavior), [MatchAndExplain]
Can installation instructions please be added to this project.

Previously the team here had helped to set up builds for Gumbo Parser. But the instructions are no longer working and now he build is broken at

https://github.com/google/gumbo-parser

Thank you