<!--
Thank you for your interest in using `âœ¨ polished` in your project. Submitting bugs and issues helps us keep the library relevant and usable for developers.

Please fill out this template with all the information you have so we can
understand the issue that you are seeing and address it.
-->

- `polished` version: 3.4.2
- `JSS-in_CSS` library and version: not relevant
- Any relevant JS library and version: not relevant

First of all thank you for this great library. It's really awesome and pleasure to use. 
Recently I was searching for similar library using 'color manipulation' term. There were plenty of different libraries in the results list but polished [wasn't](https://npms.io/search?q=color+manipulation) among them. So in order to gain more attraction from people that might need this great lib I suggest adding some more tags like:
`color manipulate`, `color manipulation`, `curried color manipulation`.

Currently in some search engines like npms your lib looks like this:
![polished](https://user-images.githubusercontent.com/3624386/70779271-638e3300-1dae-11ea-8797-bc8003766257.png)

In its most recent version, flow errors on the position shorthand with the following error:

![image](https://user-images.githubusercontent.com/8217788/70454625-0858f980-1aab-11ea-9d61-2cac6ba0e007.png)

This is correct, since position would be overwritten if it was part of the `directionalProperty` function call (currently typed with an indexer in src/types/style.js:6 ). 

With the proposed change, we always take the position that was passed to the function
This adds the ability to use `round()` in the `math` helper, with tests. 

I'm not totally sure what the process is for adding functionality here, and what math functions are going to be supported or not, so I though I'd just put a PR up for.
<!--
Thank you for your interest in using `âœ¨ polished` in your project. Submitting bugs and issues helps us keep the library relevant and usable for developers.

Please fill out this template with all the information you have so we can
understand the issue that you are seeing and address it.
-->

- `polished` version: 3.4.1
- `JSS-in_CSS` library and version: styled-components 4.0.2
- Any relevant JS library and version: 16.3.2

Mixin/Helper/Shorthand you were using and how you were using it:

```javascript
// Specific method used:
lighten(0.5, 'var(--warning)');

// In context:

export const Post = styled.div`
  border: 1px solid var(--black-light);
  border-radius: 3px;
  padding: 20px;

  h5 {
    padding: 5px 10px;
    background: ${(props) =>
      ({
        blog: lighten(0.5, 'var(--warning)'),
        video: lighten(0.5, 'var(--primary)'),
        audio: lighten(0.5, 'var(--purple)'),
      }[props.type])};
  }
`;
```

What you are seeing:

When loading up the page where this is used, during server-side rendering, I see this error printed to my terminal:

```
Error running template: Error: Couldn't parse the color string. Please provide the color as a string in hex, rgb, rgba, hsl or hsla notation.
```

What you expected to see:

The CSS variable interpreted correctly and lightened.

Reproduction:

If the above doesn't clarify I can whip up an example.
I find myself giving some components only a top and bottom margin/padding. Or only a left and right margin / padding. 

Maybe a shorthand for marginX/paddingX would be useful. It takes two arguments one for left and one for the right margin/padding. The same could be done for marginY/paddingY taking an argument for the top and bottom margin/padding.

With the deprecation of `getValueAndUnit` I was looking at replacing it with `stripUnit`, however the return type of `stripUnit` is not as helpful as `getValueAndUnit`, as `stripUnit` always returns `any`.

```
stripUnit(value: (string | number), unitReturn: boolean): any
```

```
getValueAndUnit(value: string): [(number | string), (string | void)]
```

<!--
Thank you for your interest in using `âœ¨ polished` in your project. Submitting bugs and issues helps us keep the library relevant and usable for developers.

Please fill out this template with all the information you have so we can
understand the issue that you are seeing and address it.
-->

- `polished` version: 3.4.1
- `JSS-in_CSS` library and version: N/A
- Any relevant JS library and version: N/A

Mixin/Helper/Shorthand you were using and how you were using it:

```javascript
const [value, unit] = stripUnit("100px", true);
```

What you are seeing:

![image](https://user-images.githubusercontent.com/1895462/61010271-95a0f200-a343-11e9-9642-18220afea20a.png)

![image](https://user-images.githubusercontent.com/1895462/61010274-9df92d00-a343-11e9-8fe8-9c91129ad6fd.png)

What you expected to see:

More well-defined return types, such as those previously returned by `getValueAndUnit`.

Reproduction:

https://codesandbox.io/s/pensive-thunder-z5ijj
- `polished` version: 3.4.1
- `JSS-in_CSS` Material-UI 3+

The width parameter for the `ellipsis()` helper function seems to always refer to the literal width of the element, even if the container has been rotated.   It sure would be nice if it could always refer to the width of the text itself and not the container.  

For example, the vertical axis of a chart, or other vertical text
```transform: 'rotate(90deg)'```

I realize it could be tricky to support any arbitrary rotation, so maybe just that one common use case could be covered.

<!--
Thank you for your interest in using `âœ¨ polished` in your project. Submitting bugs and issues helps us keep the library relevant and usable for developers.

Please fill out this template with all the information you have so we can
understand the issue that you are seeing and address it.
-->

- `polished` version: 3.4.0
- `JSS-in_CSS` library and version: styled-components 4.2.0

Mixin/Helper/Shorthand you were using and how you were using it:

```
h4 {
    ${fluidRange(
      {
        prop: 'font-size',
        fromSize: 1rem,
        toSize:4rem
      },
      '400px',
      '1000px'
    )}
  }

```

What you are seeing:

The font-size between screen sizes 400px and 100px is not calculated correctly.

What you expected to see:

A smooth change in font size between 400px and 1000px screen widths

Reproduction:

https://codepen.io/daveybrown/pen/GaLXVE

ðŸ‘‹ Hi all! I've been a big fan of polished; especially coming from the Sass/PostCSS world. I'm working on a project with Emotion, and am missing a few common PostCSS plugins I used to use; one of them being https://github.com/larsenwork/postcss-easing-gradients

Any thoughts on adding something like that to polished? Thanks!

- `polished` version: 3.2.0

Mixin/Helper/Shorthand you were using and how you were using it:

```javascript
triangle({
    pointingDirection: "top",
    width: `6px`,
    height: `6px`,
    foregroundColor: 'inherit,
})
```

What you are seeing:

A black box

What you expected to see:

A colored triangle

Reproduction:

 https://codepen.io/anon/pen/vMVqyM

It seems that browsers (tested on Firefox and Chrome) do not support the border color inherit in the form

```css
border-color: transparent inherit transparent transparent;
```
but do if they are declared by side.

I would propose to revert back the triangle logic to make it work for inherit (and make the bundle slightly bigger).

This is very useful when creating tooltip arrows who can inherit the color of the border of the tooltip.
