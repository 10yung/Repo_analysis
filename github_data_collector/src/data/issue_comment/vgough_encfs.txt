I tried creating an encrypted view using `--reverse` on exact copies, including the `.encfs6.xml` of the same folder on different machines using different encfs versions.

encfs version 1.8.1
encfs version 1.9.2

When I compared random files using `md5sum` from the two encrypted views, I got different hashes on both systems. The files do actually differ, while the size is the same.

Is the encryption result not stable across versions, or is another input - other than the file-content and the `.encfs6.xml`, e.g. the file's metadata or something, used for the encryption?

Thanks.

`encfsctl decode [--extpass=prog] rootdir [encoded name ...]` will take only 99 arguments for `encoded name`and I do sometimes have hundreds.

Observe:
```
$ find ./encrypted | sed -En 's,.*encrypted/,,p' | \
    head -n 99 | \
    xargs encfsctl decode ./encrypted  # works fine
EncFS Password:^C

$ find ./encrypted | sed -En 's,.*encrypted/,,p' | \
    head -n 100 | \
    xargs encfsctl decode ./encrypted  # too many, breaks
Incorrect number of arguments for command "decode"
$ encfsctl --version
encfsctl version 1.9.2
```
I can work around this limitation, but it is a bit annoying.
I've used to encrypt my external disks using EncFS on Linux. Now I switched to Mac and tried to decrypt and mount such an external disk on the Mac. However, it seems that on Mac, EncFS only supports encrypting/decrypting directories, not disks. Is that the case?

Is there a way I can decrypt an external disk that was encrypted using EncFS on a Mac?
After running `encfs ~/encrypted/ ~/decrypted/`

If I add files to` ~/decrypted/` , will the files be written to the disk in `~/decrypted/` ? if so, isn't it a security issue when someone steals your laptop and takes out the disk ?

If they are not written to the disk, where are they kept ?

Also, There is a security concern about Encfs:

> EncFS is probably safe as long as the adversary only gets one copy of the ciphertext and nothing more. EncFS is not safe if the adversary has the opportunity to see two or more snapshots of the ciphertext at different times. EncFS attempts to protect files from malicious modification, but there are serious problems with this feature.

If I use Encfs personally, without uploading anything to the cloud, Am I affected by this ?

How can someone get their hands on two copies of an encrypted file ? Is it like this:

pasting `file.txt` to `~/decrypted/` then there will be an encrypted file in `~/encrypted/` .. call it version 1.

then at a later time, (Perhaps after umount and mount also ?) you modify `file.txt` in `~/decrypted/`, call the modified and encrypted `file.txt` in `~/encrypted/` version 2 ...

If someone has access to version 1 and 2 , then this is where Encfs becomes insecure...Am I getting this right ?
In reverse encryption mode (not tested in normal mode), there doesn't appear to be a good way to determine the existence of a file because a generic i/o error is returned, as opposed to something specific.

This was discussed/discovered in this github issue:
[https://github.com/syncthing/syncthing/issues/6171#issuecomment-557257895](url)
and still exists in a binary built from mater.
I have an encrypted volume in my host OS (Manjaro 64-bit) where I place my work files which includes git workspaces.  If I decrypt and mount the volume while inside the guest OS (Ubuntu 19.04 64-bit), I cannot update the workspaces as the pull operations fails due to a permission denied in the .git/objects/pack/  directory. I checked that every directory starting from the workspace is owned by my guest OS user and that the permission is 777. I even did a recursive chmod and chown for good measure but the error still persists. 

If I rsync the workspace to outside the volume (i.e. /tmp ) then I can pull the updates and I can rsync it back without any issues. 

Does the volume retain any identity information of the original user that created the files and directories? Most if not all of the files in the volume is created and owned by my host OS user.
Could you please take a look at https://travis-ci.org/mouse07410/encfs/jobs/610664135 and help me figure why one test is failing?
When using --reverse the local files are unencrypted

Fixes #566
The  man page of `--reverse` option states:
> This can be useful for creating remote encrypted backups, where you do not wish to keep the
local files **un**encrypted.

However, I think it is wrong and it should be the opposite:
> This can be useful for creating remote encrypted backups, where you do not wish to keep the
local files encrypted.

Storing the local files in encrypted form is the _normal_ usage, with `--reverse` letting you have the local files unencrypted, which is suitable for users that **not** wish to keep the
local files _encrypted_.
Hi all,
Use case is to synchronize a --reversewrite folder between one server and different clients.
The sync software is "syncthing", which:
(1) places some additional files called ".stignore" and ".stfolder" in the folder it is synchronizing.
(2) writes data to a temporary filename when syncing: ".syncthing.filename.tmp"

For issue (1) there is a workaround by having the --reversewrite folder as a subfolder of the sync folder, e.g. ./syncfolder/reversewritefolder
For issue (2) I have a workaround to save the temp file in the parent syncthing folder, then copy-and-delete to the correct place in the --reversewrite folder. However that could lead to corrupted data if an error occurred in the copy-and-delete stage.

So I wonder, is it possible for encfs to somehow store files that are written to a --reversewrite folder even when the filename or the file contents don't match the cipher and can't be decrypted?

More info at https://github.com/syncthing/syncthing/issues/2208.