Currently is this a missing feature?

I see only `add_child ()` which likely insert children at end, and `set_children()` which reloads all children, also it has `replace_child_at_index()` but I want to insert new node without removing existing node.

This is a big change that allows us to run the library without a heap (of course feature gated).

Some trade-offs that have been made:

  - I changed `Id` from using a pair of `u32` to using a single `u64`.  This removes the need to re-use IDs.  Conceivably we could overflow `u64` but this shouldn't happen until the death of the universe.
  - To get the current crate `no_std` + `alloc` behavior, you need to activate the `alloc` feature. I guess this is a breaking change if someone was relying on `default-features = false` in their `Cargo.toml`...
  - The public API no longer contains any allocations like `Vec` or `Box`, as a result measure functions can no longer return errors, and you need to use unboxed closures.  If there is a need it should be easy to add back boxed closures.
  - For the heapless mode, a cap had to be put on the number of elements supported.  The max number of nodes is 256 and only vecs up to size 8 are supported.  This can easily be controlled through the `sys` module.  One big limiting factor is that some algorithms use `Vec<Vec<...>>` which for heapless mode allocates 8*8=64 memory cells.  For non-heapless mode, we still support an indefinite number of nodes/elements.
I can't seem to get basic flex layout working in Javascript, not sure if I'm missing something.
I would expect the child items in the following to be assigned a height matching the full height of the parent node (per align-items: stretch). In fact they are assigned height 0

```javascript
import('stretch-layout').then((stretch) => {
  
  const { Allocator, Node, Display, AlignItems } = stretch;
  const allocator = new Allocator();
 
  const rootNode = new Node(allocator, {width: 600, height: 300, display: Display.Flex, alignItems: AlignItems.Stretch});

  const childNodes = [
    new Node(allocator, {flexShrink:1, flexGrow:1, flexBasis: 'auto'}),
    new Node(allocator, {flexShrink:1, flexGrow:1, flexBasis: 'auto'})
  ]
  rootNode.addChild(childNodes[0]);
  rootNode.addChild(childNodes[1]);

  const computedLayout = rootNode.computeLayout();
 
  logLayout(computedLayout)

})

function logLayout(computedLayout){
  const {x, y, width, height, childCount} = computedLayout;
  console.log(`x:${x}, y:${y}, width:${width}, height:${height}`);

  for (let i=0;i<childCount; i++) {
      logLayout(computedLayout.child(i));
  };

};
```

logs the following:

```
x:0, y:0, width:600, height:300
x:0, y:0, width:300, height:0
x:300, y:0, width:300, height:0
```
Hello!
I "ported" rust test -- https://github.com/vislyhq/stretch/blob/master/tests/generated/absolute_layout_align_items_center_on_child_only.rs to JS (I believe, I made it correctly)
```js
import { Allocator, Node, AlignSelf, PositionType } from 'stretch-layout';

const allocator = new Allocator();

const node = new Node(allocator, {
    width: 110,
    height: 100,
});

const childNode = new Node(allocator, {
    width: 60,
    height: 40,
    alignSelf: AlignSelf.Center,
    positionType: PositionType.Absolute
});

node.addChild(childNode);

const layout = node.computeLayout(), childLayout = childNode.computeLayout();

console.log(layout.width, layout.height, layout.x, layout.y);
console.log(childLayout.width, childLayout.height, childLayout.x, childLayout.y);
```

In browser (both FF & Chrome) console I get:
```
110 100 0 0
60 40 0 0
```
According to `assert_eq!(stretch.layout(node0).unwrap().location.y, 30f32);` -- childNode y should be 30 px. I also tried other tests, but no luck either.
Hi,

I've been wondering how to work with leaf nodes. I have following code:
```rust
use stretch::Stretch;
use stretch::style::{Style, Dimension};
use stretch::geometry::Size;
use stretch::number::Number;

fn main() {
    let mut stretch = Stretch::new();

    let leaf1 = stretch.new_leaf(Style::default(), Box::new(|_| {
        Ok(Size {
            width: 75.0,
            height: 30.0,
        })
    })).unwrap();

    let node1 = stretch.new_node(Style {
        flex_grow: 1.0,
        ..Default::default()
    }, vec![leaf1]).unwrap();

    let leaf2 = stretch.new_leaf(Style::default(), Box::new(|_| {
        Ok(Size {
            width: 75.0,
            height: 30.0,
        })
    })).unwrap();

    let node2 = stretch.new_node(Style {
        flex_grow: 1.0,
        ..Default::default()
    }, vec![leaf2]).unwrap();

    let root = stretch.new_node(Style {
        size: Size {
            width: Dimension::Percent(1.0),
            height: Dimension::Percent(1.0),
        },
        ..Default::default()
    }, vec![node1, node2]).unwrap();

    stretch.compute_layout(root, Size {
        width: Number::Defined(100.0),
        height: Number::Defined(50.0),
    }).unwrap();

    println!("root:  {:?}", stretch.layout(root).unwrap());
    println!("node1: {:?}", stretch.layout(node1).unwrap());
    println!("leaf1: {:?}", stretch.layout(leaf1).unwrap());
    println!("node2: {:?}", stretch.layout(node2).unwrap());
    println!("leaf2: {:?}", stretch.layout(leaf2).unwrap());
}
```
which results in following output:
```
root:  Layout { order: 0, size: Size { width: 100.0, height: 50.0 }, location: Point { x: 0.0, y: 0.0 } }
node1: Layout { order: 0, size: Size { width: 75.0, height: 50.0 }, location: Point { x: 0.0, y: 0.0 } }
leaf1: Layout { order: 0, size: Size { width: 75.0, height: 50.0 }, location: Point { x: 0.0, y: 0.0 } }
node2: Layout { order: 1, size: Size { width: 75.0, height: 50.0 }, location: Point { x: 75.0, y: 0.0 } }
leaf2: Layout { order: 0, size: Size { width: 75.0, height: 50.0 }, location: Point { x: 0.0, y: 0.0 } }
```

I'm scratching my head here. Why the sum of widths of `node1` and `node2` are greater than the number passed to `compute_layout`?
If I understand this correctly, leaf nodes should represent a content inside a flexbox container (which is represented by a normal node). The leaf requests some size, which is returned by the `MeasureFunc` passed to the leaf.
Why `node1` and `node2` grow beyond the size of the `root`? Shouldn't they shrink to 50 points each? Should the leaf nodes shrink too?
Am I misunderstanding something?
Would the `overflow` property fix this if it were implemented?

I also don't understand the meaning of the `Size` argument which is passed into the `MeasureFunc`. It's not explained in the documentation in any way. In above program, if I print the argument of the `MeasureFunc` I see it's called multiple times (which is understandable - the layout engine probably does multiple passes), but the `width` and `height` properties make no sense to me. The `width` is always `Undefined`.
First of all, this is an awesome project and I really appreciate everyone putting their effort into it.

While working on [react-slate](https://github.com/zamotany/react-slate/tree/next) (a React renderer for terminal in Node JS), which is based on Stretch, I noticed that, when setting `width`/`height`, basically any `Dimension` property as a percentage, it is converted to plain `Points`:

setting `width` to `100%` will result in `Points(100)` being used in layout calculations.

I've done some digging and found one line of code, which might be causing that in `get_dimension` function in `bindings/js`:
https://github.com/vislyhq/stretch/blob/a7e2c07bc343a1f16e1d651ea9f0c17fb0fbd098/bindings/js/src/lib.rs#L608-L613

Shouldn't this `if let` return `return stretch::style::Dimension::Percent(number / 100);`?

I'm happy to do a PR to fix that, but wanted a feedback before doing so.
Hey, first of all, let me thank you for this! I am currently using yoga and I'd like to replace it in the future so the stretch might be a great alternative.

Do you have any benchmarks already? I've stitched really qnd integration of stretch into my project and it seems to be a bit slower than yoga (15-25%) so I'm wondering if this is expected or if I'm doing something very wrong.
We should investigate if we can support https://github.com/web-platform-tests/wpt.

ping @jugglinmike who wanted to help out with this.
Cross-Posting because #6 is closed...

Any planned progress on the C-API? I don't have any Rust experience... so no idea how interfacing Rust and C works.

IMO a C-API should be top-priority because not everyone is doing Web stuff...   
I am currently working on a project whose minimum support version is iOS 8, I wonder is there any reason that the minimum deployment requirement for iOS is iOS 9.3?