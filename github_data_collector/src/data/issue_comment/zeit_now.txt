I cannot use `now dev` or `now` to run my application anymore as it doesn't seem to respect a previously working tspath setting which aliases `@` to `src` for a create-react-app.

Is there an example of a working setup anywhere for Now's current environment?

```
/usr/lib
├── now@16.7.3
├── npm@6.13.6
├── ts-node@8.6.2
├── typescript@3.7.5
└── typescript-language-server@0.4.0
```

```
"@now/node": "^1.3.5"
```
How do I deploy an app that uses express? None of the tutorials online work. Whenever I try deploying an express app, it gets stuck at the "Queued" step.
Moved from zeit/next.js#10061

Describe the bug
====
When I run my Next.js app with now dev, after a while (on the order of minutes, definitely less than an hour) my requests to it will stop working.

How to reproduce
====

The original reporter provided this: 
> I'm not sure how to isolate this one. It happens all the time with this project https://github.com/mjm/courier-js but it's not an easy thing to get running for reproduction.

> Run `now dev`
> Work on the app, making changes to files, saving, and watching them hot reload in the browser
> Eventually, one of these changes will try to reload and will get stuck. The on-page indicator for a page compiling will be there and keep spinning continuously. Trying to refresh the page just causes the browser to try to load the page until it times out.
> When I give up, I can hit Ctrl-C to try to kill the server, but if it's in this state, it can take a minute or two to actually get the message and quit.

I encounter the same issue on a different private repo. Changing even css in styled-jsx can block the server. Since `ctrl+c` is so slow to answer I `ctrl+z` then `kill -9 %1` then restart `now dev`

Expected behavior
====
Continuing to make changes should keep working and trigger refreshes in the browser.

System information
====
original reporter's
> OS: macOS Catalina, though I think this happened before upgrading too
> Browser (if applies): I've seen in both Chrome and Safari
> Version of Next.js: 9.1.7, has happened in earlier versions of Next 9 as well
> Version of Now CLI: 16.7.3

>OS: Ubuntu 19.10
>Browser: both chrome and firefox trigger the issue
> Version of Next.js : 9.1.6, 9.1.7,9.2.0
> Version of Now cli : 16.7.3 

the problem has started since we upgraded to next.js 9

Additional context
==== 
The issue disappears if we run `next dev` directly.


Hi

Could you elaborate on your plans to deprecate `builds` in the `now.json` config file?

What will happen to existing projects with complex monorepo style setups?

Thanks
Please could you create (or modify the existing) a Nuxt.js example that supports `universal` mode with SSR.

Thanks
When you use `now dns` in scripts there are summary lines that can't easily be redirected or muted. In some cases this makes it hard to create nice output.

Would be great if one could suppress these with an option.

```sh
$ now dns ls
> 18 Records found under username4 [2s]
[...]
```

Developing this app in svelte using parceljs for bundling. Also have serverless functions running, `now dev` works fine with routing, but once deployed and reload on a route other than / I get a 404 page and not entirely sure what the now.json should look like. 

https://github.com/knipferrc/plate-app
Whenever I make a new deployment by means of a git commit or via the now cli the build process will take the gatsby .cache folder into account.

At the start of the build process it will show something like this:
Build runtime installed: 412.484ms
Build cache found [44.40 MB, 34674 files]
Build cache unpacked: 1856.891ms
Installing dependencies...

However, when I use a deploy hook the cache is not taken into account. The lines 'build cache found' and 'build cache unpacked' are never printed.

I reproduced this behaviour by creating a [new gatsby repository](https://github.com/dmerckx/Now-gatsby-caching-test/commits/master) following the 2 steps described in the [docs](https://zeit.co/guides/deploying-gatsby-with-now). 

Whenever I made a regular commit (simply modifying the README file) the cache was used, when I used a deploy hook the cache was not used. 

Side note: for some reason the build actually failed when making a new commit, but that is unrelated to this issue (I noticed the same behaviour in other projects without failing builds).
Currently this instruction
https://zeit.co/docs/runtimes#advanced-usage/advanced-ruby-usage/rack-interface
does not work unless manually specify the runtime.
I thought it would be just `src: index.js` which index `module.exports` a function that gets a Probot instance.

But it's not exactly that way. I also switched to `src: package.json` where I have `now-start` which runs the probot, but seems to not work.