I found this issue porting from 0.5.0 to 0.6.0.

When I run my parser test, it get stuck in an infinite loop (ie it never terminate).

This is the reduced test case:

```rust
extern crate peg;

peg::parser!{grammar p() for str {

pub rule string_literal() -> String
        = "\"" s:$((!['"'])*) "\"" { println!("literal {}", s); s.to_owned() }

}}

fn main() {

    let r = p::string_literal("\"literal\"");

    if let Ok(l) = r {
        println!("Parsed {}", l);
    } else {
        println!("Parse failed {:?}", r);
    }
}
```

Expected:
- either it doesn't compile because it's a syntax error (i.e. I'm doing the rule wrong with the update syntax)
- or it is a parse error

Instead it just get stuck when I `cargo run`.
I think it might be a nice addition, maybe as a Crate Feature, to have some basic defaults, such as for matching alphanumerics, newlines, etc. `use peg::preset_rules;` at the top of a grammar, and have access to a set of "primitives", so to speak.
Essentially a very crude and unassuming design for how you might choose to implement #25.

The essential stuff:
  * grammars can `share` rules, which marks them `pub(crate)` but doesn't produce the wrapper api.  Since templates are inlined, they can't be shared.
  * grammars can `import` other grammars, which opens up their shared rules to be used under that grammar name with the syntax `<grammar_name>::<rule_name>`.
  * grammars can import with a `converter`, which is a piece of Rust code which is the arguments to the second grammar written in terms of the arguments of the first (if any)
  * Rules are actually accessed by assuming that the `import`ed grammar's code lives in a module of the same name under the parent module - if either of these things are not true, you get a cryptic compile error
  * subgrammar types are converted to/from at need, but are **not** yet persisted by the parent grammar i.e. a new `ParseState` is created at each boundary, etc.

This isn't meant to be the final design - cache persistence of subgrammars would be good, for example, and a better build-time system of catching errors (such as by sharing a Compiler, maybe?) - but I would appreciate any feedback about how this aligns with what you imagined and what could/should be improved.

Hi, I'd like to stop parsing the string input when a given pattern is matched. I'll give example for SMTP:

> helo abc
> mail from:<<me@example.com>>
> rcpt to:<<him@example.com>>
> data
> $%!...?^รถ

The desire is that I could parse all the commands until including the data command. There is no point parsing further as there may be binary data there.

You could add a #quit instruction to terminate further processing:

pub cmd_data -> SmtpCommand
        = "data"i NL #quit
        { SmtpCommand::Data }

FYI: [the full SMTP grammar on github](https://github.com/BrightOpen/Samotop/blob/master/src/protocol/grammar.rustpeg). Btw, thanks a lot for PEG.
Rustpeg generates code causing warnings during compilation if repetition count range starts with explicit 0.

Given Rustpeg code:
```
pub foo -> Vec<()>
    = "a"*<0,9>
```
There is a warning during compilation about useless `if` statement. The generated code (mind last line):
```
fn parse_foo<'input>(__input: &'input str, __state: &mut ParseState<'input>, __pos: usize) -> RuleResult<Vec<()>> {
    #![allow(non_snake_case, unused)] {
        let mut __repeat_pos = __pos;
        let mut repeat_value = vec!();
        loop {
            let __pos = __repeat_pos;
            if repeat_value.len() >= 9 { break }
            let step_res = slice_eq(__input, __state, __pos, "a");
            match step_res {
                Matched(newpos, value) => {
                    __repeat_pos = newpos;
                    repeat_value.push(value);
                },
                Failed => { break; }
            }
        }
        if repeat_value.len() >= 0 { Matched(__repeat_pos, repeat_value) } else { Failed }
        //                    ^ Pointless check, causes warnings
    }
}
```
Other than that the rule works fine.

This version works exactly same, but doesn't cause warning:
```
pub bar -> Vec<()>
    = "a"*<,9>
```
I love having `--features peg/trace`, but I found it was difficult to read through, so i've wrapped the output with a little script that handles indenting to make it easier to understand.

Then i started thinking, it would be event better if I visualized the parser output in one of a couple ways - either a collapsable tree or simply through something like graphviz. 

To make this process somewhat straightforward, I'd like to add support for dumping the peg trace as structured JSON to a file.  Thoughts?

Assume I define a few parsers within a module and export the parsing functions, similar like the following:

``` rust
pub use self::parser::empty as empty;

peg! parser(r#"
#[pub]
empty -> ()
    = "" { () }
"#)
```

I'm wondering if it is possible to reuse the exporter parser in another module in another PEG macro call. In general, I'm interested in reusing parsers defined in different source files.

Any ideas?
