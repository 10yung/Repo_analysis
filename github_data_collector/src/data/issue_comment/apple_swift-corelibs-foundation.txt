This is exposed for Linux, but also is needed for linking on BSD.

(Let me know if you think there should be one definition of mach_absolute_time in Prefix and the body ifdef'd between Windows and Linux/BSD. I thought to include that in this PR, but I'm not sure I like the look of it, so I omitted it. If you think it'd be worthwhile though, I'm happy to roll it in this PR.)
I believe it was just a typo. There are other similar checks already, and all of them use `<=` comparison.

This was discovered as the reason of `paragraphRange(for:)` fail on whole string range. E.g, following code is crashing:
```
let s = "abc" as NSString
let range = NSRange(location: 0, length:3)
_ = s.paragraphRange(for: range) // <- crash
```

Test is also included.

Test checks paragraphRange on:
- whole string range
- every subrange in every single paragraph
- every subrange in every two consecutive paragraphs

(This was ported from the overlay fix in https://github.com/apple/swift/pull/28919)

Data provides a settable `count` property. Its expected behavior is undocumented, but based on the implementation, it is intended to zero-extend (or truncate) the collection to the specified length.

This does not work correctly if we start with an empty Data and we try to increase the count by a small integer:

```
import Foundation

var d = Data()
d.count = 2
print(d.count) // ⟹ 0 ⁉️

d.count = 100
print(d.count) // ⟹ 100 ✓
```

It looks like this bug was introduced with the Data overhaul that shipped in Swift 5.

(This issue was uncovered by https://github.com/apple/swift/pull/28918.)

rdar://58134026

> The "Pragma" header field allows backwards compatibility with
   HTTP/1.0 caches, so that clients can specify a "no-cache" request
   that they will understand (as Cache-Control was not defined until
   HTTP/1.1).  When the Cache-Control header field is also present and
   understood in a request, Pragma is ignored.

The current implementation of `HTTPURLProtocol` duplicates the parsing of `Cache-Control` header and checks for `no-cache` but the `Pragma` header is ignored.

Also `httpResponse.statusCode` check for status codes: `200, 203, 204, 206, 300, 301, 404, 405, 410, 414, 501` was checked after the interpretations of headers wich was unnecessary. 
From Swift 5.0, new APIs of `FileHandle` are [introduced](https://github.com/apple/swift-corelibs-foundation/commit/55c404ba3b7edac0f9712d5556bcd8f1d404e935#diff-8ecab93373e5147e5738e6bdebbcda43R293).
While they are defined as `open` in DarwinFoundation (as you know they are imported from objc), they are `public` in SwiftFoundation.
They should be defined as `open` also in SwiftFoundation to ensure compatibility (for example, making subclasses of `FileHandle` in other modules).

Resolves [SR-11926](https://bugs.swift.org/browse/SR-11926).
- The test was slow for 2 reasons, NSPathUtilities.completePath() was
  slow and the test directory used may already have an unknown number of
  files in it.

- [POSIX] NSURLDirectoryEnumerator was modified to allow it to output
  either a URL (defualt), a String with the item name relative to the
  directory being enumerated or the raw FTSENT result.

- Using the raw FSENT result without constructing a full URL() value,
  the Strings used for the matches that ran against the filename and
  extension were constructed using String(bytesNoCopy:...) and full
  copies only made if a match was found. On a directory with about 7500
  items this showed an improvement for the entire test from about 120
  secs to 2 seconds.

- Use a subdirectory of NSTemporaryDirectory() to control number of
  files in the directory. This stops the tests running on an unbounded
  number of files which can increase test time.
The [documentation of DateComponents.isValidDate(in:)](https://developer.apple.com/documentation/foundation/nsdatecomponents/1412707-isvaliddate) indicates that the receiver's timezone is used, if it is set. The code also appears to be attempting to implement this, by setting the `timeZone` property on a local `cal` var, but this var wasn't being used at all later in the function. 

The result is that seemingly valid DateComponents can return false for isValidDate(), when the receiver's timezone differs from the passed in calendar's timezone, which is often system timezone. 
- If the array or dictionary is empty, do not add indention spacing.

- Enable more tests in TestJSONEncoder that were never added to the
      list of tests.
Fixed issue SR-11621.

When calling `start()` on a synchronous operation, the main was not called.
