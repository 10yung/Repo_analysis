The codebase contains a few exception based APIs:
- `InsufficientCapacityException`, thrown in `RingBuffer.TryNext()` and `RingBuffer.TryNext(int)`.
- `TimeoutException`, thrown in timeout-based wait strategies.
- `AlertException`, thrown when stopping the event processors.

I think that, at least for the first two cases, the exception usage is against Framework design guidelines in addition to being very bad regarding performance.

In my view `InsufficientCapacityException` can be removed along with the `RingBuffer.TryNext()` and `RingBuffer.TryNext(int)` methods. There are now overloads for these methods that follow the .NET convention (see #33) and there is no point in keeping the other ones.

`TimeoutException` could also be simply removed but it would be a feature loss for projets using timeout-based wait strategies and `ITimeoutHandler`. An other option is to change the `IWaitStrategy` to allow the wait strategies to returns timeouts. For example:
```cs
public interface IWaitStrategy
{
    WaitResult WaitFor(ref long sequence, Sequence cursor, ISequence dependentSequence, ISequenceBarrier barrier);
    // ....
}

public enum WaitResult
{
    Success,
    Timeout,
}
```

I am not fond of `AlertException`, but this exception is not really an issue because it is only used to stop the event processors. However, a change in the `IWaitStrategy` could also be used to get rid of the exception, for example:
```cs
public enum WaitResult
{
    Success,
    Timeout,
    Canceled,
}
```

What do you think?