I wanted a default route to run if there was not a match found.  My route root can be defined in the module and is set on page render through  `bone.router.start({root:resp.path,pushState: true})`.  I was running into issues finding a simple work around.

My first question is am I overlooking something simple here?

If not, this is the solution I am using to add a catchall regex route.  Is there a better way?

Add a defaultRoute as the last route:

```
'*': defaultRoute
```

and update routeToRegex:

```
routeToRegex = function(route) {
  var escapeRegExp, namedParam, optionalParam, splatParam;

  if(route === '*') {
    return new RegExp("([^\s]+)");
  } 

  optionalParam = /\((.*?)\)/g;
  namedParam = /(\(\?)?:\w+/g;
  splatParam = /\*\w+/g;
  escapeRegExp = /[\-{}\[\]+?.,\\\^$|#\s]/g;
  route = route.replace(escapeRegExp, "\\$&").replace(optionalParam, "(?:$1)?").replace(namedParam, function(match, optional) {
    if (optional) {
      return match;
    } else {
      return "([^/]+)";
    }
  }).replace(splatParam, "(.*?)");
  return new RegExp("^" + route + "$");

};
```

as client 

<script>
    socket = io.connect();
    bone.set('io.options', {
        socket: socket 
    });
</script>


how to send chat message ?

I saw bone.io is quite similar to backbone.js for some aspect like router and views. Why has been decided to not provide a built in support for models and collections?
Is there another way to manage data structures? Have I to rely only on bone.io feature for that? 

In this example, clicking the link will redirect user to a 404 page. 

``` javascript
<a href="/search/ohhyea">search</a>
<script>
    bone.router({
        routes: {
            "/search/:query": "find"
        },
        find: function(query, data) {
            alert(query);
        }
    });
    bone.router.start({pushState: true});
</script>
```


Hi! bone.io looks really interesting. I did some work with NodeJS, but I still need to use other server-side programming languages and technologies for other stuff. Mostly I've been using SockJS and it's various implementations on top of other servers.

For now, bone.io seems to work with socket.io and on top of NodeJS (correct me if I'm wrong). Is there a plan for create a "pluggable" system, where I can map bone.io calls to SockJS (just an example) and then make it work with my own technologies? That would be really interesting.

Best regards,
Richard.

Great framework. Just curios to see if there is a scaffolded template to start a new project with?
