
Hi.
I wanted to add some server-side hooks to the repo and was following the [official guide](https://docs.gitlab.com/ce/administration/custom_hooks.html) to do this, but failed finding the folder where repos live. 

Here is the listing of the folder I believe shall be the storage. And there is really nothing about project files there. 

```
root@c26db5408b37:/home/git/gitlab# ll /home/git/data/repositories
total 20
drwx--S---  4 git git 4096 Dec 21 02:34  +gitaly/
drwxrws---  4 git git 4096 Jan  5 15:11  ./
drwxr-xr-x 10 git git 4096 Jul 29 19:52  ../
-rw-------  1 git git   64 Aug 20 03:42  .gitaly-metadata
drwxr-x--- 35 git git 4096 Dec 26 13:06 '@hashed'/
```
So where is the actual file storage to manage server-side hooks?

thnx

I just upgraded my docker-gitlab to version `12.5.2`. And I found a lot of `INFO reaped unknown pid <pid-number>` messages in the log of gitlab.

```
2019-12-25 03:18:24,637 INFO reaped unknown pid 44831
2019-12-25 03:18:27,127 INFO reaped unknown pid 44863
2019-12-25 03:18:29,721 INFO reaped unknown pid 44876
2019-12-25 03:18:30,251 INFO reaped unknown pid 44889
2019-12-25 03:18:32,941 INFO reaped unknown pid 44902
...
```


The messages are found by running `docker logs -f <docker-gitlab-container-id>`.

Does anyone know if this is a normal phenomenon or not?
I'm trying to deploy gitlab-ce using your provided .yml in /kubernetes.
Redis and Postgre are well deployed but gitlab seems to be unable to dial on tcp. for the readinessProbe. I'm a beginner to minikube. It seems that it can't provide LoadBalancer Service, so I tried with a Cluster IP and an Ingress. Unfornately this doesn't work too :/

**Does anyone already achieved to deploy on minikube ?**

gitlab-rc.yml
```
apiVersion: v1
kind: ReplicationController
metadata:
  name: gitlab
spec:
  replicas: 1
  selector:
    name: gitlab
  template:
    metadata:
      name: gitlab
      labels:
        name: gitlab
    spec:
      containers:
      - name: gitlab
        image: sameersbn/gitlab:12.5.2
        env:
        - name: TZ
          value: Europe/Berlin
        - name: GITLAB_TIMEZONE
          value: Berlin

        - name: GITLAB_SECRETS_DB_KEY_BASE
          value: long-and-random-alpha-numeric-string
        - name: GITLAB_SECRETS_SECRET_KEY_BASE
          value: long-and-random-alpha-numeric-string
        - name: GITLAB_SECRETS_OTP_KEY_BASE
          value: long-and-random-alpha-numeric-string

        - name: GITLAB_ROOT_PASSWORD
          value: Aw3s0mePassw0rd
        - name: GITLAB_ROOT_EMAIL
          value: admin@minikube.local

        - name: GITLAB_HOST
          value: gitlab.minikube.local
        - name: GITLAB_PORT
          value: "80"
        - name: GITLAB_SSH_PORT
          value: "22"

        - name: GITLAB_NOTIFY_ON_BROKEN_BUILDS
          value: "false"
        - name: GITLAB_NOTIFY_PUSHER
          value: "false"

        - name: GITLAB_BACKUP_SCHEDULE
          value: disable

        - name: DB_TYPE
          value: postgres
        - name: DB_HOST
          value: postgresql
        - name: DB_PORT
          value: "5432"
        - name: DB_USER
          value: gitlab
        - name: DB_PASS
          value: gitlab
        - name: DB_NAME
          value: gitlab

        - name: REDIS_HOST
          value: redis
        - name: REDIS_PORT
          value: "6379"

        - name: SMTP_ENABLED
          value: "false"

        - name: IMAP_ENABLED
          value: "false"
        ports:
        - name: http
          containerPort: 80
        - name: ssh
          containerPort: 22
        volumeMounts:
        - mountPath: /home/git/data
          name: data
        livenessProbe:
          httpGet:
            path: /
            port: 80
          initialDelaySeconds: 120
          timeoutSeconds: 5
        readinessProbe:
          httpGet:
            path: /
            port: 80
          initialDelaySeconds: 60
          timeoutSeconds: 5
      volumes:
      - name: data
        emptyDir: {}
```

gitlab-svc.yml
```
apiVersion: v1
kind: Service
metadata:
  name: gitlab
  labels:
    name: gitlab
spec:
  ports:
    - name: http
      port: 80
      targetPort: http
    - name: ssh
      port: 22
      targetPort: ssh
  selector:
    name: gitlab
```

Other files are not updated from the kubernetes directory.
version: '2'

services:
  redis:
    restart: always
    image: sameersbn/redis:4.0.9-2
    command:
    - --loglevel warning
    volumes:
    - /temp/docker/gitlab/redis:/var/lib/redis:Z

  postgresql:
    restart: always
    image: sameersbn/postgresql:10-2
    volumes:
    - temp/docker/gitlab/postgresql:/var/lib/postgresql:Z
    environment:
    - DB_USER=gitlab
    - DB_PASS=password
    - DB_NAME=gitlabhq_production
    - DB_EXTENSION=pg_trgm

  gitlab:
    restart: always
    image: sameersbn/gitlab:12.5.2
    depends_on:
    - redis
    - postgresql
    ports:
    - "13800:80"
    - "13822:22"
    volumes:
    - temp/docker/gitlab/gitlab:/home/git/data:Z
    environment:
    - DEBUG=false

    - DB_ADAPTER=postgresql
    - DB_HOST=postgresql
    - DB_PORT=5432
    - DB_USER=gitlab
    - DB_PASS=password
    - DB_NAME=gitlabhq_production

    - REDIS_HOST=redis
    - REDIS_PORT=6379

    - TZ=Asia/Kolkata
    - GITLAB_TIMEZONE=Kolkata

    - GITLAB_HTTPS=false
    - SSL_SELF_SIGNED=false

    - GITLAB_HOST=wxl.fanjiahe.cn
    - GITLAB_PORT=13800
    - GITLAB_SSH_PORT=13822
    - GITLAB_RELATIVE_URL_ROOT=
    - GITLAB_SECRETS_DB_KEY_BASE=long-and-random-alphanumeric-string
    - GITLAB_SECRETS_SECRET_KEY_BASE=long-and-random-alphanumeric-string
    - GITLAB_SECRETS_OTP_KEY_BASE=long-and-random-alphanumeric-string

    - GITLAB_ROOT_PASSWORD=12345678
    - GITLAB_ROOT_EMAIL=m15232583691_1@163.com

    - GITLAB_NOTIFY_ON_BROKEN_BUILDS=true
    - GITLAB_NOTIFY_PUSHER=false

    - GITLAB_EMAIL=notifications@example.com
    - GITLAB_EMAIL_REPLY_TO=noreply@example.com
    - GITLAB_INCOMING_EMAIL_ADDRESS=reply@example.com

    - GITLAB_BACKUP_SCHEDULE=daily
    - GITLAB_BACKUP_TIME=01:00

    - SMTP_ENABLED=false
    - SMTP_DOMAIN=www.example.com
    - SMTP_HOST=smtp.gmail.com
    - SMTP_PORT=587
    - SMTP_USER=mailer@example.com
    - SMTP_PASS=password
    - SMTP_STARTTLS=true
    - SMTP_AUTHENTICATION=login

    - IMAP_ENABLED=false
    - IMAP_HOST=imap.gmail.com
    - IMAP_PORT=993
    - IMAP_USER=mailer@example.com
    - IMAP_PASS=password
    - IMAP_SSL=true
    - IMAP_STARTTLS=false

    - OAUTH_ENABLED=false
    - OAUTH_AUTO_SIGN_IN_WITH_PROVIDER=
    - OAUTH_ALLOW_SSO=
    - OAUTH_BLOCK_AUTO_CREATED_USERS=true
    - OAUTH_AUTO_LINK_LDAP_USER=false
    - OAUTH_AUTO_LINK_SAML_USER=false
    - OAUTH_EXTERNAL_PROVIDERS=

    - OAUTH_CAS3_LABEL=cas3
    - OAUTH_CAS3_SERVER=
    - OAUTH_CAS3_DISABLE_SSL_VERIFICATION=false
    - OAUTH_CAS3_LOGIN_URL=/cas/login
    - OAUTH_CAS3_VALIDATE_URL=/cas/p3/serviceValidate
    - OAUTH_CAS3_LOGOUT_URL=/cas/logout

    - OAUTH_GOOGLE_API_KEY=
    - OAUTH_GOOGLE_APP_SECRET=
    - OAUTH_GOOGLE_RESTRICT_DOMAIN=

    - OAUTH_FACEBOOK_API_KEY=
    - OAUTH_FACEBOOK_APP_SECRET=

    - OAUTH_TWITTER_API_KEY=
    - OAUTH_TWITTER_APP_SECRET=

    - OAUTH_GITHUB_API_KEY=
    - OAUTH_GITHUB_APP_SECRET=
    - OAUTH_GITHUB_URL=
    - OAUTH_GITHUB_VERIFY_SSL=

    - OAUTH_GITLAB_API_KEY=
    - OAUTH_GITLAB_APP_SECRET=

    - OAUTH_BITBUCKET_API_KEY=
    - OAUTH_BITBUCKET_APP_SECRET=

    - OAUTH_SAML_ASSERTION_CONSUMER_SERVICE_URL=
    - OAUTH_SAML_IDP_CERT_FINGERPRINT=
    - OAUTH_SAML_IDP_SSO_TARGET_URL=
    - OAUTH_SAML_ISSUER=
    - OAUTH_SAML_LABEL="Our SAML Provider"
    - OAUTH_SAML_NAME_IDENTIFIER_FORMAT=urn:oasis:names:tc:SAML:2.0:nameid-format:transient
    - OAUTH_SAML_GROUPS_ATTRIBUTE=
    - OAUTH_SAML_EXTERNAL_GROUPS=
    - OAUTH_SAML_ATTRIBUTE_STATEMENTS_EMAIL=
    - OAUTH_SAML_ATTRIBUTE_STATEMENTS_NAME=
    - OAUTH_SAML_ATTRIBUTE_STATEMENTS_USERNAME=
    - OAUTH_SAML_ATTRIBUTE_STATEMENTS_FIRST_NAME=
    - OAUTH_SAML_ATTRIBUTE_STATEMENTS_LAST_NAME=

    - OAUTH_CROWD_SERVER_URL=
    - OAUTH_CROWD_APP_NAME=
    - OAUTH_CROWD_APP_PASSWORD=

    - OAUTH_AUTH0_CLIENT_ID=
    - OAUTH_AUTH0_CLIENT_SECRET=
    - OAUTH_AUTH0_DOMAIN=
    - OAUTH_AUTH0_SCOPE=

    - OAUTH_AZURE_API_KEY=
    - OAUTH_AZURE_API_SECRET=
    - OAUTH_AZURE_TENANT_ID=

volumes:
  redis-data:
  postgresql-data:
  gitlab-data:

i can't login in as root using the cofiguration file's root_email and root_password and just get "invalid login or password" in page.

ssl_protocols for Nginx are hard-coded at 'TLSv1 TLSv1.1 TLSv1.2'.  TLSv1 and TLSv1.1 are no longer considered secure.  Rather than changing the defaults, I thought it best to add an environment variable "SSL_PROTOCOLS" that will allow the end user to override the default setting. This change is similar to a past change that added the SSL_CIPHERS variable.

I don't know if this is an upstream issue or not but health check returns this after the upgrade. The gitlab admin UI says that its working as expected and I can't see that anything actually is wrong with the install.

```js
{
status: "failed",
master_check: [
{
status: "failed",
message: "unexpected Master check result: false"
}
]
}
```
# Description

On recent versions, some pdf (valid pdf, but not encrypted, in clear texts) don't have any preview in gitlab repository file explorer. Instead we need to download them. These pdf displays correctly when using gitlab dev server, leading me to think it's an issue with this docker image.

Here is such a pdf [hello.pdf](https://github.com/sameersbn/docker-gitlab/files/3931283/hello.pdf)

# Step to reproduce

- Go to a repository
- use the WebIDE to upload the linked pdf 
- commit
- go to the repository file explorer and click on the newly committed hello.pdf

**expected**

We can immediately see the pdf preview

**actual**

No pdf preview, we can click to download the file instead.

# Versions

I have tested Here are the versions I tested 

- docker 11.11.3: OK :+1: 
- docker 12.4.5: KO :red_circle: 
- docker 12.5.2: KO :red_circle: 
- gitlab dev server master: OK :+1: 
- gitlab dev server tag 12.4.3-ee: OK :+1: 

Thanks!

When I try to delete a project (even as a user with admin rights), it just ends everytime with the following message:
`Deletion failed on path/to/project with the following message: execution expired`

I went into the Admin Area to see if I could find anything, and I can see the destruction task being queued in the Planified section of the Sidekiq Background Jobs.
If I understand correctly the task seems to triggers 10 minutes after I ask to delete a project from the Gitlab GUI.

I also found relevant lines in the sidekiq.log file:
`... ProjectDestroyWorker JID-somenumber INFO: start`
`... ProjectDestroyWorker JID-somenumber INFO: done: 60.112 sec`

At the same timestamp, in the application.log, I have:
`... Deletion failed for user/project with the following message: execution expired`

It looks like the ProjectDestroyWorker just times out after a minute, but I can't find any additional logs as to why it doesn't work. After all this, when I go back on the project page via the Gitlab GUI, an orange message keeps being displayed at the top: `This project was scheduled for deletion, but failed with the following message: execution expired`.

Can anyone help me on this ?
Thanks

Edit: I'm using a version of docker-gitlab with Gitlab 11.8.0 (ce138642)