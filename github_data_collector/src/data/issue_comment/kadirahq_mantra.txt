 have a meteor v1.6.1 app, with react@16.2.0. But I have a problem with the composeWithTracker function. This function have been taken off react-komposer@2, used by storybook, but is still declared in /dist/index. So, I have a question. How could I send data from my containers to my components? Need help please.
When I do this in my container with :
import {useDeps, composeWithTracker, composeAll} from '';
export const classeComposer = ({context}, onData) =>{
const {Meteor, FlowRouter, Collections,} = context();
if (Meteor.subscribe('classes.list').ready()){
const lesClasses = Collections.Classes.find({},
{fields: {_id:1, code:1, nbrePlaces:1},
sort: {code:1, nbrePlaces:1}}).fetch();
const nbreClasses = Collections.Classes.find({}).count();
onData(null, { lesClasses, nbreClasses});
}else{
onData();
}
};
export const classeMapper = (context, actions) => ({
addclasse: actions.classes.addclasse,
updateclasse: actions.classes.updateclasse,
deleteclasse: actions.classes.deleteclasse,
context: () => context
});

export default (component) => composeAll(
composeWithTracker(classeComposer),
useDeps(classeMapper)
)(component);
I have this error in my consol:
Uncaught (in promise) TypeError: composeWithTracker is not a function
at eval (/imports/modules/core/containers/Classes.js:88:21)
at Route._callee$ (http://localhost:4000/app/app.js?hash=9e577aa13e8896245acee791ed37df88948a09c2:381:32)
at tryCatch (http://localhost:4000/packages/modules.js?hash=5763c96b3eee7f2b55565963c705a396d19a512b:34210:40)
at Generator.invoke [as _invoke] (http://localhost:4000/packages/modules.js?hash=5763c96b3eee7f2b55565963c705a396d19a512b:34444:22)
at Generator.prototype.(anonymous function) [as next] (http://localhost:4000/packages/modules.js?hash=5763c96b3eee7f2b55565963c705a396d19a512b:34262:21)
at tryCatch (http://localhost:4000/packages/modules.js?hash=5763c96b3eee7f2b55565963c705a396d19a512b:34210:40)
at invoke (http://localhost:4000/packages/modules.js?hash=5763c96b3eee7f2b55565963c705a396d19a512b:34300:20)
at http://localhost:4000/packages/modules.js?hash=5763c96b3eee7f2b55565963c705a396d19a512b:34310:13
at http://localhost:4000/packages/meteor.js?hash=b0f12795c8cc1423b5850502871996903f947ed5:1167:22
at

Need help please.
I would like to clarify for myself the meaning of module termin related to Mantra.
Does module represent single view/page or does it represent collection of pages related to each other with common sense? One way or another there is some problems i feel in design concept.

Example 1: module represent a single page/view. So, if i add a custom accounts management to the project, i end up with 3 modules just for this one purpose: userList, userAdd, userEdit. I see a problem in this as module should represent one concept (like it does in Django for example).

Example 2: module represent a several pages/views. In this case userList, userAdd and userEdit view are gathered up in one module that is seems correct for me. But all actions/components/conteiners from all this pages/views are ending up in one directory. Sometimes it's really hard to tell which component belongs to specific view. I tried to create a sub-directories for each view, but this approach has a bottleneck in how Mantra handles actions. I cannot have an action defined as {viewInsideModule: {component: {cmpAction}}}. I think it may be related to #199 . It would be nice to have n-deep tree of actions. That would allow any kind of namespacing: per-module or per-view inside the module.

``` js
class MyComponent extends React.Component {
  ....
  dataINeed() {
    return this.state
  }
  ...
}

const MyComponentContainer = composeAll(
  composeWithTracker(composer),
  useDeps(mapper)
)(ExamQuestion);


const MainComponent = () => {
  return <div>
    <MyComponent ref={c => console.log(c.dataINeed())} />
    <MyComponentContainer /> // how to get components REF ???
  </div>
}
```

Example of actions format is given here:
https://kadirahq.github.io/mantra/#sec-Module-Definition

This lays out the following format for actions:

```
  actions: {
    myNamespace: {
      doSomething: (context, arg1) => {}
    }
  },
```

This is ok, however it would be much better to namespace the actions by the module instead. When dealing with a lot of actions within many modules, I'd much rather have this format:

```
  actions: {
    myModule: {
      myNamespace: {
        doSomething: (context, arg1) => {}
      }
    }
  },
```

For example, given this layout currently:

```
/modules/core/actions/
  /index.js
  /foo.js
  /bar.js
/modules/foo/actions/
  /index.js
  /foo.js
```

Since actions are not namespaced per module, it's very easy to overwrite and cross bounds of other files. Right now, calling `actions.foo.setTitle`, with the above structure, leads to a lot of problems.

This leads one to currently do the following:

```
/modules/core/actions/
  /index.js
  /coreFoo.js
  /coreBar.js
/modules/foo/actions/
  /index.js
  /fooFoo.js
```

This properly resolves the ambiguity problem, because now I can call `actions.coreFoo.setTitle`, and `actions.fooFoo.setTitle`, and I know which one I'm calling, however this is not DRY.

It would be much better to be able to have this layout:

```
/modules/core/actions/
  /index.js
  /foo.js
  /bar.js
/modules/foo/actions/
  /index.js
  /foo.js
```

and properly module-namespace as follows:

```
  actions: {
    core: {
      foo: {
        setTitle: (context, arg1) => {}
      }
    }
  },
```

So, then the action can be called with `actions.core.foo.setTitle` and `actions.foo.foo.setTitle`.

I know it's been fairly settled on using all lowercase naming conventions, with an underscore to separate words per https://kadirahq.github.io/mantra/#sec-Source-File-Names

I think this is ok for regular files. However, I've used both formats, and this format (PascalCase) feels far more intuitive, specifically for react components:
https://github.com/airbnb/javascript/tree/master/react#naming

I'd like to know others thoughts on this, and why.

In the current mantra spec, it is recommended to define the methods in the server and then again to define a method stub in the client to benefit from the optimistic UI. But this **results in a lot of code replication**.

Wouldn't be better to define the methods in `lib` or common code as it is suggested by the [guide](https://guide.meteor.com/methods.html#basic)? 

I have been working with Mantrajs for awhile and I love it. Great work all around. There is an issue I have been facing that seems to be exclusive to Google Chrome on android (firefox, safari, or others work fine, Chrome works fine on iOS, and any browser works fine on desktop). When I scroll up and down the page, the site keeps re-rendering everything and it makes it unusable. No where in my code do I explicitly specify when to re-render. It is odd because unless it is Chrome on Android, it works perfectly and makes it seem like this is an odd bug.

Has anyone run into this issue? Does anyone have any suggestions? Is there something about Android Chrome that I need to know about?

Thanks in advance.

Tim

In the specs at 2.5State Management, the bullet point with "Meteor/MiniMongo (Remote State)"suggests that Meteor/MiniMongo is a Remote State. 

However, Meteor/MiniMongo is located at the client and therefore a Local State.

And yes, in most of the use cases MiniMongo is connected with a real Mongo database on a server but that is not mandatory.

Since 1.3 is out of beta, I updated the link to point to the Meteor 1.3 announcement.

@sungwoncho started working on a linter for Mantra. I think this will help us to write better Mantra code.
Here's the project: https://github.com/sungwoncho/mantra-lint

We can discuss about this here: https://talk.mantrajs.com/t/linter-for-mantra/67
