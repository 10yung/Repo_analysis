Malformed URLs through an exception in a manner that''s inappropriate. It happens so early in the request flow that the request isn't even seen by the application.

java.lang.IllegalArgumentException: URLDecoder: Incomplete trailing escape (%) pattern
        at java.net.URLDecoder.decode(URLDecoder.java:187) ~[na:1.7.0_67]
        at smoke.Request$class.decode(Request.scala:93) ~[smoke_2.10-2.1.0.jar:2.1.0]
        at smoke.netty.NettyRequest.decode(NettyRequest.scala:22) ~[smoke_2.10-2.1.0.jar:2.1.0]
        at smoke.Request$$anonfun$parseParams$2.apply(Request.scala:88) ~[smoke_2.10-2.1.0.jar:2.1.0]
        at smoke.Request$$anonfun$parseParams$2.apply(Request.scala:87) ~[smoke_2.10-2.1.0.jar:2.1.0]
        at scala.collection.TraversableLike$$anonfun$map$1.apply(TraversableLike.scala:244) ~[scala-library-2.10.4.jar:na]
        at scala.collection.TraversableLike$$anonfun$map$1.apply(TraversableLike.scala:244) ~[scala-library-2.10.4.jar:na]
        at scala.collection.IndexedSeqOptimized$class.foreach(IndexedSeqOptimized.scala:33) ~[scala-library-2.10.4.jar:na]
        at scala.collection.mutable.ArrayOps$ofRef.foreach(ArrayOps.scala:108) ~[scala-library-2.10.4.jar:na]
        at scala.collection.TraversableLike$class.map(TraversableLike.scala:244) ~[scala-library-2.10.4.jar:na]
        at scala.collection.mutable.ArrayOps$ofRef.map(ArrayOps.scala:108) ~[scala-library-2.10.4.jar:na]
        at smoke.Request$class.parseParams(Request.scala:87) ~[smoke_2.10-2.1.0.jar:2.1.0]
        at smoke.netty.NettyRequest.parseParams(NettyRequest.scala:22) ~[smoke_2.10-2.1.0.jar:2.1.0]
        at smoke.Request$class.formParams(Request.scala:46) ~[smoke_2.10-2.1.0.jar:2.1.0]
        at smoke.netty.NettyRequest.formParams$lzycompute(NettyRequest.scala:22) ~[smoke_2.10-2.1.0.jar:2.1.0]
        at smoke.netty.NettyRequest.formParams(NettyRequest.scala:22) ~[smoke_2.10-2.1.0.jar:2.1.0]
        at smoke.Request$class.params(Request.scala:50) ~[smoke_2.10-2.1.0.jar:2.1.0]
        at smoke.netty.NettyRequest.params$lzycompute(NettyRequest.scala:22) ~[smoke_2.10-2.1.0.jar:2.1.0]
        at smoke.netty.NettyRequest.params(NettyRequest.scala:22) ~[smoke_2.10-2.1.0.jar:2.1.0]
        at com.mdialog.odsm.StreamsApi.authenticate(StreamsApi.scala:33) ~[on_demand_stream_manager-5.8.0.jar:na]
        at com.mdialog.odsm.StreamsApi$$anonfun$handleRequest$1.apply(StreamsApi.scala:86) ~[on_demand_stream_manager-5.8.0.jar:na]
        at com.mdialog.odsm.StreamsApi$$anonfun$handleRequest$1.apply(StreamsApi.scala:86) ~[on_demand_stream_manager-5.8.0.jar:na]
        at scala.concurrent.impl.Future$PromiseCompletingRunnable.liftedTree1$1(Future.scala:24) ~[scala-library-2.10.4.jar:na]
        at scala.concurrent.impl.Future$PromiseCompletingRunnable.run(Future.scala:24) ~[scala-library-2.10.4.jar:na]
        at akka.dispatch.TaskInvocation.run(AbstractDispatcher.scala:41) [akka-actor_2.10-2.3.4.jar:na]
        at akka.dispatch.ForkJoinExecutorConfigurator$AkkaForkJoinTask.exec(AbstractDispatcher.scala:393) [akka-actor_2.10-2.3.4.jar:na]
        at scala.concurrent.forkjoin.ForkJoinTask.doExec(ForkJoinTask.java:260) [scala-library-2.10.4.jar:na]
        at scala.concurrent.forkjoin.ForkJoinPool$WorkQueue.runTask(ForkJoinPool.java:1339) [scala-library-2.10.4.jar:na]
        at scala.concurrent.forkjoin.ForkJoinPool.runWorker(ForkJoinPool.java:1979) [scala-library-2.10.4.jar:na]
        at scala.concurrent.forkjoin.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:107) [scala-library-2.10.4.jar:na]

Apart from the way used in examples, I have tried several other ways to send big files using smoke server but there is no way to do it correctly.
This is probably because when sending the raw data, the function only accepts an array and not a stream.

So far I haven't found a way to close the server without closing the entire process.

If the server is created using the object of a class by extending to Smoke and not SmokeApp, then shouldn't there be a method to shutdown the server if needed.

Static assets to be read from jar file. 
(Built on top of json change. You can check just StatisAssets file and ignore the rest)

Parsing POST JSON parameters. 
Used scala distribution json parser (deprecated, adds dependency on parser combinators)

In 2.11.0 DelayedInit has been deprecated. Smoke should avoid using it in the future.

More discussion here:

https://issues.scala-lang.org/browse/SI-4330?jql=labels%20%3D%20delayedinit%20AND%20resolution%20%3D%20unresolved

We should emphasize the importance of updating the session secret.


I was trying to parse request body to multipart/form-data using `org.apache.commons.fileupload`. For that I needed request content as `Array[Byte]`. I first used `getBytes("UTF-8")` on body. This worked fine with text files, but for binary files, this didn't seem to work. On further examination, I noticed that the hex for new file was shifted by some amount.
As a workaround, I changed the type of body to `Array[Byte]` and made these changes in netty/NettyRequest.scala:

``` scala
  val contentLength = nettyRequest.getContent.readableBytes
  var byteArray = new Array[Byte](contentLength)
  nettyRequest.getContent.readBytes(byteArray)

  val body = byteArray
```

This seemed to work fine with any type of file.
