The following code produces no warning despite the type mismatch on the second line:
```
var c = "abc"[1];
var /**number*/ n = c;  // no warning
```
It looks like getting a character from a string in this way produces a value of unknown type (I have confirmed this by turning `reportUnknownTypes` on).

clouser-library from [closer-library](https://developers.google.com/blockly/guides/modify/web/closure)
**npm**: v6.9.0
**platform**: macOS
I am using **scratch** project and after compilation of scratch-blocks, when I run npm start, this error is being thrown.
```
blockly_compressed_vertical.js:1698 Uncaught TypeError: goog.isString is not a function
    at Object.../scratch-blocks/node_modules/imports-loader/index.js?this=>window!../scratch-blocks/node_modules/exports-loader/index.js?Blockly&goog!./node_modules/scratch-blocks/blockly_compressed_vertical.js.Blockly.Extensions.register (blockly_compressed_vertical.js:1698)
    at blockly_compressed_vertical.js:1709
    at Object.../scratch-blocks/node_modules/imports-loader/index.js?this=>window!../scratch-blocks/node_modules/exports-loader/index.js?Blockly&goog!./node_modules/scratch-blocks/blockly_compressed_vertical.js (blockly_compressed_vertical.js:2442)
    at __webpack_require__ (bootstrap:84)
    at Object../node_modules/scratch-blocks/shim/blockly_compressed_vertical.js (blockly_compressed_vertical.js:1)
    at __webpack_require__ (bootstrap:84)
    at Object../node_modules/scratch-blocks/shim/blockly_compressed_vertical.goog.js (blockly_compressed_vertical.goog.js:1)
    at __webpack_require__ (bootstrap:84)
    at Object.../scratch-blocks/node_modules/imports-loader/index.js?goog=./shim/blockly_compressed_vertical.goog,Blockly=./shim/blockly_compressed_vertical-blocks_compressed!../scratch-blocks/node_modules/exports-loader/index.js?Blockly!./node_modules/scratch-blocks/blocks_compressed_vertical.js (blocks_compressed_vertical.js:2)
    at __webpack_require__ (bootstrap:84)
```
I am trying to run:

`mvn -DskipTests -pl externs/pom.xml,pom-main.xml,pom-main-shaded.xml
`
and mvn errors out with the following:

```
[ERROR] Failed to execute goal org.apache.maven.plugins:maven-compiler-plugin:3.5.1:compile (default-compile) on project closure-compiler: Compilation failure: Compilation failure: 
[ERROR] /home/centos/libphonenumber-tools/closure-compiler/src/com/google/javascript/jscomp/deps/JsFileFullParser.java:[27,35] [deprecation] BasicErrorManager in com.google.javascript.jscomp has been deprecated
```

I am running the latest mvn:

> mvn --version
> Apache Maven 3.6.3 (cecedd343002696d0abb50b32b541b8a6ba2883f)
> Maven home: /opt/maven
> Java version: 1.8.0_232, vendor: Oracle Corporation, runtime: /usr/lib/jvm/java-1.8.0-openjdk-1.8.0.232.b09-0.el7_7.x86_64/jre
> Default locale: en_CA, platform encoding: UTF-8
> OS name: "linux", version: "3.10.0-1062.7.1.el7.x86_64", arch: "amd64", family: "unix"

I am trying to run this on a centos7 EC2 instance on AWS.

The dependency for protobuf (com.google.protobuf's artifact protobuf-java) has a reported vulnerability as described in https://nvd.nist.gov/vuln/detail/CVE-2015-5237. Updating to a version where this has been patched (3.4.0 onwards apparently, current dependency is for 3.0.2) would be highly advisable.
The API is documented here:
http://www.w3.org/TR/FileAPI/#arraybuffer-method-algo
How can you annotate a function that "fails" / returns the [bottom type](https://en.wikipedia.org/wiki/Bottom_type) ⊥ / "always throws an exception"?  For example:

```js
function panic (e) { console.error('panic: ' + e); throw new Error(e) }
```

While its return type is naively void, it's really `⊥`.  Code directly following an invocation of `panic(e)` can be assumed to never run.  And code following a branch can safely assume that any conditions that would've led to `panic(e)` were false.   Knowing this, a compiler can often make extreme optimizations.

If it doesn't exist, could you add a failure annotation?
Destructured properties are renamed for ECMA-2015+ lang output.
```js
// t.js
const {
  'contenttype': ct,
  'content-type': ct2,
} = window

console.log(ct, ct2, window['contenttype'])
```
```sh
java -jar compiler.jar --compilation_level \
ADVANCED --language_out ES5
--js t.js
```
```js
var a=window;console.log(a.contenttype,a["content-type"],window.contenttype);
```
--- 
```sh
java -jar compiler.jar --compilation_level \
ADVANCED --language_out ECMASCRIPT_2015/16/17/18
--js t.js
```
```js
'use strict';console.log(window.b,window.a,window.contenttype);
```
I always assumed that using quoted props on destructuring behaves the same way as **accessing** a quoted property, and I'm pretty such it's how it's suppose to behave (see ES5), but the properties in the output are renamed. 
(updated, see below) TypeScript allows to set a type on a function 
![image](https://user-images.githubusercontent.com/21156791/71304856-22fd6d80-23dd-11ea-860f-903d352576a7.png)
CC should allow that too 
This will allow to define a function as a type in one file and then use it in implementation. 
This way I can create interfaces for functions, import them in implementations and have type checking done by the compiler. Otherwise, I have manually add the parameters to the function which I don't want to do because it's wasting time since I already have function's types in a separate place. TypeScript in vs code does it properly as you can see on the screenshot.
The "shaded" JAR of closure-compiler includes all the classes in `com.google.gson` without shading (renaming). This can lead to confusing errors far downstream - for example, I came upon this issue when [sbt-dependency-check](https://github.com/albuch/sbt-dependency-check) raised a `NoMethodError`, which turned out to be caused by my project using [scala-js](https://github.com/scala-js/scala-js). I am [definitely](https://github.com/google/closure-compiler/issues/2815) [not](https://github.com/google/closure-compiler/issues/2562) [the first](https://github.com/google/closure-compiler/issues/2120) one to experience this.

Is there a reason why `com.google.gson` is bundled rather than shaded? What is the "preferred" way to deal with such problems downstream?
I want an interface to extend a constructor. It's always been working fine like so
```js
/**
 * The application interface.
 * @extends {events.EventEmitter}
 * @interface
 */
_goa.Application
```
This did behave indeed like an interface, I could annotate JS code like `@implements {_goa.Application}`. 
I then added the assignment `= function() {}`
```js
/**
 * The application interface.
 * @extends {events.EventEmitter}
 * @interface
 */
_goa.Application = function() {}
```
This started giving me the warning 
```
types/externs/application.js:13: WARNING - [JSC_CONFLICTING_EXTENDED_TYPE]
_goa.Application cannot extend this type; interfaces can only extend interfaces
```

I think you should allow to extend constructors because the two are closely related, and tsicle will generate constructors and not interfaces. The difference is pretty subtle anyway, there's not interface concept in JS so I intuitively know what the difference is but it's hard to explain, it can be only explained in terms what you can and cannot do with both, like write `@implements` for interfaces.

https://github.com/google/closure-compiler/issues/937 this was closed 

So this issue, is that there's no `interfaces can only extend interfaces` check on interfaces without `= function() {}` in externs, but please don't add it because say Node.JS API has EventEmitter, which is a constructor (maybe I should actually rename it to interface, like here I struggle to understand what the difference is, it's an implementation and and interface at the same time, so why should't I be able to create an interface which extends it... in any way, you get the idea. 