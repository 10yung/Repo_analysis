Hi,
I've found myself copying Stream.Read(Async) overloads around lately and I've tried to look around for some reasoning why it's not available, but couldn't find anything even mentioning this topic, so would it be possible to get [this piece of code](https://github.com/dotnet/runtime/blob/master/src/libraries/System.IO.Pipelines/src/System/IO/Pipelines/StreamExtensions.netstandard.cs) from System.IO.Pipelines built into the System.Memory package, or some new optional netstandard2.0 compatibility package?
Thanks
- Unify more of CoreLib interop files
- Replace manual interop with regular managed APIs where possible
- Delete unused code

Contributes to #1232
Please read PR #1853 and issue #1740 first, thanks.

It seems like the test is failing on 2 platforms: Windows_NT netfx x86 Release, and Windows_NT x64.
I imagine the reasoning behind the netfx failure is because it must still have the old code, but can anyone tell me what the other one is, its error messages don't make sense to me.
Also, what should I do to fix the netfx platform?

_Originally posted by @hamarb123 in https://github.com/dotnet/runtime/pull/1853#issuecomment-575776850_

https://github.com/dotnet/runtime/pull/1853/checks?check_run_id=395012296
This adds the Mono runtime sources including the full history and some initial build system integration ðŸŽ‰ 

We're planning to wire up the CI on Monday and then we'll enable Mono by default as part of the build.

/cc @dotnet/runtime-infrastructure @jkotas @danmosemsft @jaredpar 
Make `Microsoft.VisualBasic.CompilerServices.Utils.GetResourceString()` public.

See https://github.com/microsoft/referencesource/blob/master/Microsoft.VisualBasic/runtime/msvbalib/Helpers/Utils.vb#L164

Required to build embedded `My` template code.
In AesGcm.cs the properties NonceByteSizes and TagByteSizes represents the size in **Byte**.

https://github.com/dotnet/runtime/blob/4f9ae42d861fcb4be2fcd5d3d55d5f227d30e723/src/libraries/System.Security.Cryptography.Algorithms/src/System/Security/Cryptography/AesGcm.cs#L11-L13

But the used type KeySizes represent valid key sizes in **Bit**.

```xml
<summary>Specifies the maximum key size in bits.</summary>
<value>The maximum key size in bits.</value>
```

see https://github.com/dotnet/dotnet-api-docs/blob/01e31683fa1feea031c94a1243b01d8ee0255a6d/xml/System.Security.Cryptography/KeySizes.xml#L135

In the namespace System.Security.Cryptography properties like "*Size*" vary between amount of bit and bytes. In this case the documentation is not consistent with the name of the property, `ByteSizes` to `Specifies the maximum key size in bits`.

I hope this description meets your quality standards for new issues.
The last of the CoreFX renames.  Anything remaining are generally Issue urls for the old repo. Is there a simple way to remove these links if the issue is closed already?

@danmosemsft @jkotas 
On Windows if we enumerating file system we should take into account reparse points and reparse point tags too - that is symbolic links, OneDrive and AppX.
For example, attempting to read OneDrive reparse point causes an unwanted file download from the Internet. AppX reparse point would be considered like symbolic link. (It seems the last does not taken into account in Directory.Delete())

FileSystemEntry exposes FileAttributes there we can check reparse point flag. But we don't have reparse point tags. 
FileSystem also exposes only FileAttributes without reparse point tags.

The request comes from PowerShell Core repo. I am trying to utilize new FileSystemEnumerable and have to use extra P/Invoke to get reparse point tags.
It will be great to have reparse point tags in FileSystemEntry and FileSystem types or another way to work with the scenarios in a Core standard way.

 /cc @JeremyKuhne 
Same type can be loaded by multiple threads in parallel in rare situations

Fixes #1847
It will be great to add method for setting custom entry resolver when loading native libraries using `DllImportAttribute`.

Example:

```csharp
NativeLibrary.SetDllImportEntryResolver(Assembly.GetExecutingAssembly(), (libraryHandle, entryPoint) =>
{
    if (NativeLibrary.TryGetExport(libraryHandle, entryPoint, out IntPtr handle))
    {
        return handle;
    }

    if (NativeLibrary.TryGetExport(libraryHandle, "GetProcAddress", out IntPtr getProcAddressHandle))
    {
        var getProcAddress = Marshal.GetDelegateForFunctionPointer<GetProcAddressDelegate>(getProcAddressHandle);

        return getProcAddress.Invoke(entryPoint);
    }

    return IntPtr.Zero;
});
```