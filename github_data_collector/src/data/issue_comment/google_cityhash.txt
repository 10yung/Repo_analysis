Envs: 
- win 10
- anaconda
- python 3.6
- pip install cityhash

Error:
```
  cl: 命令行 error D8021 :无效的数值参数“/Wno-unused-value”
  error: command 'C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\BuildTools\\VC\\Tools\\MSVC\\14.21.27702\\bin\\HostX86\\x64\\cl.exe' failed with exit status 2

  Failed building wheel for cityhash
```

Add shebang
Assigning an array to a string! Assign as array, or use * instead of @ to concatenate.
I really appreciated the fact that a version of cityhash can provide 256 bit output, e.g. when using `CityHashCrc256()`. However, to get that going I had to build with `./configure --enable-sse4.2` and `make all check CXXFLAGS="-g -O3 -msse4.2"` (as per instructions). As far as my understanding goes, however, `SSE4.2` is not supported on a Raspberry Pi 3.

So I was wondering: how can I get a 256 bit output on that platform? Are there workarounds that don't use hardware-accelerated CRC?
Converted README to Github Flavoured Markdown

MSVC 2015 emitted a handful of truncation errors about implicitly converting
from a size_t length argument to a uint32 or long. These all look intentional or
benign. This commit adds casts to silence the warnings.

The errors addressed are:

```
3>external\city.cc(170): error C2220: warning treated as error - no 'object' file generated
3>external\city.cc(170): warning C4267: 'initializing': conversion from 'size_t' to 'uint32', possible loss of data
3>external\city.cc(183): warning C4267: 'argument': conversion from 'size_t' to 'uint32', possible loss of data
3>external\city.cc(187): warning C4267: 'initializing': conversion from 'size_t' to 'uint32', possible loss of data
3>external\city.cc(202): warning C4267: 'initializing': conversion from 'size_t' to 'uint32', possible loss of data
3>external\city.cc(307): warning C4267: 'initializing': conversion from 'size_t' to 'uint32', possible loss of data
3>external\city.cc(425): warning C4267: 'initializing': conversion from 'size_t' to 'long', possible loss of data
```


```
A comment in city.h says:
// By the way, for some hash functions, given strings a and b, the hash
// of a+b is easily derived from the hashes of a and b.  This property
// doesn't hold for any hash functions in this file.

But I didn't find how it can be done. It would be nice to have this feature. 
For example, it can be used to hash a data stream that becomes available one 
block at a time, but the block sizes are arbitrary, and we need both the hash 
of each block and the hash of the whole stream (invariant of block sizes).
```

Original issue reported on code.google.com by `mk.al...@gmail.com` on 26 Mar 2014 at 9:54

```
 Given the exact same input twice, the hash function should always produce the same output. I cann't understand why cityhash32 and cityhash64 function produce the different output when giving the exact same input string twice.

```

Original issue reported on code.google.com by `www_09me...@163.com` on 23 Aug 2013 at 2:40

```
Please provide any additional information below.

Any chance of an extern "C" interface in header files compatible with C 
programs? C programs don't like typedef std::pair<uint64, uint64> uint128 
unfortunately.
```

Original issue reported on code.google.com by `fullung@gmail.com` on 8 Feb 2012 at 8:15

```
this may help:

https://gitorious.org/cityhash_c/cityhash_c/blobs/master/configure.ac


```

Original issue reported on code.google.com by `yafei.zh...@langtaojin.com` on 4 Aug 2011 at 3:45
