Hi, thanks for the great library. Correct me if I'm naive, but Auto Layout seems to get better performance https://developer.apple.com/videos/play/wwdc2018/220 sine iOS 12. Have you redone any benchmarks with Auto Layout to see the performance gain with LayoutKit, and would you still recommend LayoutKit, especially for big apps that uses UITableView/UICollectionView a lot ?
With iOS 13 coming out soon, is there any functionality in the framework that allows us to handle dark mode?

Maybe an example on how to handle that?
In class `LabelLayoutDefaults`, `UILabel.init()` is called on static stored property declaration.
This leads `[UIView init] must be used from main thread only` warning on Xcode.
Moreover, it breaks on runtime some cases (e.g. XCUITest tests layout built with using LabelLayout)

This PR fixes this problem.

![image](https://user-images.githubusercontent.com/7913887/61192553-1e2ae400-a6f0-11e9-9c68-2c0cb1cf5970.png)


`SizeLayout<CustomView>` will not actually create a `CustomView` instance. 
It doesn't feel right. 
Maybe `SizeLayout` should override `needsView` property return `true`? 
Or just make this property to be a storage property and set default value is `true`?



Hi there,

Is there any reason why the initializers, containing the viewClass argument, are marked internal? It would be extremely useful if they were exposed as public.

Reason:
Let's say for example you want to define a SizeLayout<UITextField> and you want to determine what UITextField.Type you want to use at runtime, the current public initializers for SizeLayout prevents you from doing so. 

```swift
func createSizeLayout<T: UITextField>(type: T.Type) -> SizeLayout<T> {
    .... logic for creation here ...
}

let textFieldLayout = createSizeLayout(type: YourCustomTextField.self) // this inferred as SizeLayout<UITextField> 

// if you follow the initialization steps, the used initializer in BaseLayout is:
public init(alignment: Alignment, flexibility: Flexibility, viewReuseId: String? = nil, config: ((V) -> Void)?) {
    self.alignment = alignment
    self.flexibility = flexibility
    self.viewReuseId = viewReuseId
    self.viewClass = V.self
    self.config = config
}

// instead of:
init(alignment: Alignment, flexibility: Flexibility, viewReuseId: String? = nil, viewClass: V.Type, config: ((V) -> Void)?) {
    self.alignment = alignment
    self.flexibility = flexibility
    self.viewReuseId = viewReuseId
    self.viewClass = viewClass
    self.config = config
}
```

Using the latter will still yield an inferred type of `SizeLayout<UITextField>` BUT if you set breakpoints in the `config` closure it will be a YourCustomTextField instance.


This updates support for SwiftPM manifest based dependency managers. Specifically this adds support for installing via [Accio](https://github.com/JamitLabs/Accio) but will probably also work with SwiftPM once it's integrated into Xcode.

Please note that this project is part of Accio's official [integration tests](https://github.com/JamitLabs/Accio/tree/work/1000-frameworks/Demo/Shared/AppDependencies) within the [Demo project](https://github.com/JamitLabs/Accio/tree/work/1000-frameworks/Demo).
Update to Swift 5.0. Maybe specifying SWIFT_VERSION in build.sh could fix the CI error?
I ended up getting two approaches for this working:

The first marks whichever view is hosting the layout as a layout kit root, and blocks the view recycler from examining the subviews of any view marked similarly.  The code for this is much simpler, but there's no way to clean up an `isLayoutKitRoot` property from the root view, and this would have no effect on view hierarchies created from `makeViews` with a nil view.  (Theoretically, a view hierarchy created without a parent then added to a parent view should still allow view recycling if `makeViews` is called again with the new parent).

The second, implemented here, would be to mark the top level views a layout generates as roots.  This should resolve the issues the first approach had at the cost of some additional complexity.  It makes the assumption that all direct subviews marked as root of a parent view passed in to `makeViews` belong to that layout or should be removed, but that should be consistent with the existing behavior of ViewRecycler.  I'm at a loss as to what the automatically created container view for a parentless layout with multiple views should be marked as, but I think leaving it as is will match the current behavior.

There's also a small bug fix for associated objects - namely, they should be stored as copy, nonatomic.