php environment: php7.3.12

PHP User Notice 'yii\base\ErrorException' with message 'Serialization of closure failed: The closure was not found within the abstract syntax tree.'
â€‹
 echo $x ?? '111';

super_closure don't suport ?? syntax 

change: 
opcache.enable_cli=1
to: 
opcache.enable_cli=0
It would be nice to have it at 7.4 final release

https://wiki.php.net/rfc/arrow_functions

```php
$serializer = new SuperClosure\Serializer();
$b = 5;
$test = fn($a) => $a * 5;
$c = $serializer->serialize($test);
```

Expected: serialized closure
Actual result: `ClosureAnalysisException: The closure was not found within the abstract syntax tree`
Hi, first of all thank you for bringing us SuperClosure! It inspired me to write a userland implementation of `var_export()`, that can export closures as well:

https://github.com/brick/varexporter

Just like SuperClosure, it's based on nikic's PHP-Parser library, and works pretty well, with a few [caveats](https://github.com/brick/varexporter#caveats).

Would you be willing to add a link to it in the Alternatives section of the README?

Cheers!
Ben
Package `nikic/php-parser` minimal version is `^2.0` (otherwise - tests failed)
when a closure like this

```php
<?php
$hello = function ($name = 'world') {
    echo "${name}";
}
```
it will be unserialize failed.
https://github.com/jeremeamia/super_closure/blob/f57f48cb328552f6af7c4ad61f51b35a4237b546/src/SerializableClosure.php#L114-L120

The above says it can't throw, but [my small test shows it's possible](https://3v4l.org/mQ5E0). Am I missing something?
Nested closures not working... First works but the nestes does not. 
Inspired on your work I created my own serializable closure, take a look here:
https://github.com/salojc2006/Webos/blob/master/src/Webos/Closure.php

Bellow a test code to understand the issue:
```
#!/usr/bin/php
<?php
// CHANGE PATH TO AUTOLOAD!
require_once('/home/salomon/dev/php/repos/vendor/autoload.php');
error_reporting(E_ALL);

use SuperClosure\Serializer;
use SuperClosure\SerializableClosure;

class MyTestClass {
	private $onTest = null;
	
	public function __construct() {
		// FIRST CLOSURE WORKS
		$this->onTest(function() {
			echo "first test!\n";
			// HERE IS THE PROBLEM!!
			// NESTED CLOSURE NOT WORKS!
			$this->onTest(function() {
				echo "second test!\n";
			});
		});
	}
	
	public function onTest(callable $callback) {
		echo "adding closure!\n";
		$this->onTest = new SerializableClosure($callback, new Serializer());
		//print_r($callback);
	}
	
	public function test() {
		call_user_func_array($this->onTest, []);
	}
}

$t = new MyTestClass();
$s = serialize($t);
$t2 = unserialize($s);
/// die();
$t2->test();
$t->test();
```

I hope my little contribution be helpful for you
I recently started using your Super Closure PHP module in our Yii 1.1 framework when implementing a worker queue. I got a problem there when I used self:: in the closures I want to serialize. In the moment the unserialized closure is called, I get a fatal PHP error:

> PHP Fatal error:  Call to undefined method SuperClosure\SerializableClosure::_sendNotifications() in ~~[...]~~/common/vendor/jeremeamia/SuperClosure/src/SerializableClosure.php(153) : eval()'d code on line 2

Let me provide some information: the closure passed looks like

``` php
        function($users) use ($push_notification,$item_id,$item_type,$link_type,$silent,$app_notification_id){
            self::_sendNotifications($users, $push_notification, $item_id, $item_type, $link_type, $silent, $app_notification_id);
        }
```

This is how I unserialize and run the closure:

``` php
$this->body = (new SuperClosure\Serializer())->unserialize($this->body['_payload']);
$this->exitCode = call_user_func_array($this->body, is_array($this->params) ? $this->params : array());
```

The serialized string contains the following:

```
C:32:"SuperClosure\SerializableClosure":1113:{a:5:{s:4:"code";s:234:"function ($users) use($push_notification, $item_id, $item_type, $link_type, $silent, $app_notification_id) { self::_sendNotifications($users, $push_notification, $item_id, $item_type, $link_type, $silent, $app_notification_id); };";s:7:"context";a:6:{s:17:"push_notification";O:16:"PushNotification":12:{s:11:"page_search";N;s:19:"CActiveRecord_new";b:0;s:26:"CActiveRecord_attributes";a:7:{s:6:"status";i:3;s:16:"is_category_text";i:0;s:4:"week";i:0;s:4:"text";s:19:"guest4 followed you";s:4:"date";s:19:"2015-11-27 11:16:39";s:16:"app_notification";s:3:"314";s:2:"id";s:3:"412";}s:23:"CActiveRecord_related";a:0:{}s:17:"CActiveRecord_c";N;s:18:"CActiveRecord_pk";s:3:"412";s:21:"CActiveRecord_alias";s:1:"t";s:15:"CModel_errors";a:0:{}s:19:"CModel_validators";N;s:17:"CModel_scenario";s:6:"update";s:14:"CComponent_e";N;s:14:"CComponent_m";N;}s:7:"item_id";s:1:"1";s:9:"item_type";s:4:"user";s:9:"link_type";s:12:"user_profile";s:6:"silent";b:1;s:19:"app_notification_id";s:3:"314";}s:7:"binding";N;s:5:"scope";s:23:"PushNotificationService";s:8:"isStatic";b:1;}}
```

I'm using the AstAnalyzer, but as I understood the documentation, it should actually work with both analyzers. I'm running on PHP 5.4.16.

[reported in my email to @jeremeamia on 11/27, copy here for tracking reasons]

- Take a look at [Opis\Closure](https://github.com/opis/closure)
  - Uses stream wrapper to load code instead of eval(), allows for multiple (un)serializations.
  - Compare Token Parser logic
- See if we can determine if a closure is static with code parsing, instead of with [this awful function](https://github.com/jeremeamia/super_closure/blob/master/src/Analyzer/ClosureAnalyzer.php#L56-L61)
- Next major version
  - See if we can get the token parser's feature up-to-par
  - Make PHP-Parser an optional dependency
  - Perhaps join projects with Opis\Closure
