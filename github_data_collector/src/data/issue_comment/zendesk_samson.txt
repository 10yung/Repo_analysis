In this story, Users can add s3 URL for **ENV Groups** on their project settings page. The s3 file consists of list of environment variables grouped by deploy_group.

The S3 files should be managed by some external service, the external service is responsible for syncing files to s3 and provide relevant s3 file URL.

Currently, It is not mandated for using only external service env groups, adding s3 files allows the system to read values and merge ENV's along with ENV stored in the database.

<img width="1090" alt="Screen Shot 2020-01-16 at 9 10 57 PM" src="https://user-images.githubusercontent.com/1404500/72585932-b7f06b00-38a4-11ea-9c55-2e36fece2b05.png">

We have preview options to view the values from the s3 URL, once it is validated and added to the system.

### s3 URL format  
Currently, AWS widely accepts various s3 URL format eg: s3://bucket/key, http://s3.amazonaws.com/bucket, http://s3-aws-region.amazonaws.com/bucket ..etc

In this release, we have validated only to use **https://[bucket].s3.amazonaws.com/[key]?versionId=[version_id]** which is the most common format and available in AWS s3 page for all s3 object, it allows users to just copy and use it here.

### File format
In this release, we support only JSON and YAML file format for the external env groups as it is widely known formats.

### File schema
 As mentioned above the file should have list of ENV variables(key: value) and grouped by `Deploy group Permalink`

Eg:
```
pod1:
  name: pod1
  env: development
pod2:
  name: pod2
  env: test  
```

### Risks
- Med

Documentation about the kubernetes plugin mentions connecting to EKS clusters. I naively tried using the kubeconfig you get using EKS and adding to samson, but I just got an error.

So my question is just; How to solve getting samson to talk to an EKS cluster?
A little background here, I'm running Samson in Kubernetes, and every so often update the version of Samson and usually log into the pod after upgrading to run migrations. This has worked for the past few years without much issue. All the environment variables are correctly configured, and Samson has been working great.

However, after upgrading from `v2784` (old I know ü§¶‚Äç‚ôÇ) to `v3071`, I tried running `bin/rake db:migrate` and was met with the following error:

```
user@samson:/app# bin/rake db:migrate
rake aborted!
Database URL cannot be empty
/usr/local/bundle/gems/activerecord-6.0.1/lib/active_record/connection_adapters/connection_specification.rb:39:in `initialize'
/usr/local/bundle/gems/activerecord-6.0.1/lib/active_record/database_configurations/url_config.rb:64:in `new'
/usr/local/bundle/gems/activerecord-6.0.1/lib/active_record/database_configurations/url_config.rb:64:in `build_url_hash'
/usr/local/bundle/gems/activerecord-6.0.1/lib/active_record/database_configurations/url_config.rb:69:in `build_config'
/usr/local/bundle/gems/activerecord-6.0.1/lib/active_record/database_configurations/url_config.rb:36:in `initialize'
/usr/local/bundle/gems/activerecord-6.0.1/lib/active_record/database_configurations.rb:172:in `new'
/usr/local/bundle/gems/activerecord-6.0.1/lib/active_record/database_configurations.rb:172:in `build_db_config_from_hash'
/usr/local/bundle/gems/activerecord-6.0.1/lib/active_record/database_configurations.rb:150:in `build_db_config_from_raw_config'
/usr/local/bundle/gems/activerecord-6.0.1/lib/active_record/database_configurations.rb:126:in `block in build_configs'
/usr/local/bundle/gems/activerecord-6.0.1/lib/active_record/database_configurations.rb:122:in `each'
/usr/local/bundle/gems/activerecord-6.0.1/lib/active_record/database_configurations.rb:122:in `flat_map'
/usr/local/bundle/gems/activerecord-6.0.1/lib/active_record/database_configurations.rb:122:in `build_configs'
/usr/local/bundle/gems/activerecord-6.0.1/lib/active_record/database_configurations.rb:18:in `initialize'
/usr/local/bundle/gems/activerecord-6.0.1/lib/active_record/tasks/database_tasks.rb:159:in `new'
/usr/local/bundle/gems/activerecord-6.0.1/lib/active_record/tasks/database_tasks.rb:159:in `for_each'
/usr/local/bundle/gems/activerecord-6.0.1/lib/active_record/railties/databases.rake:28:in `block (2 levels) in <top (required)>'
/usr/local/bundle/gems/activerecord-6.0.1/lib/active_record/railties/databases.rake:23:in `block in <top (required)>'
/usr/local/bundle/gems/activerecord-6.0.1/lib/active_record/railties/databases.rake:7:in `<top (required)>'
/usr/local/bundle/gems/activesupport-6.0.1/lib/active_support/dependencies.rb:319:in `load'
/usr/local/bundle/gems/activesupport-6.0.1/lib/active_support/dependencies.rb:319:in `block in load'
/usr/local/bundle/gems/activesupport-6.0.1/lib/active_support/dependencies.rb:291:in `load_dependency'
/usr/local/bundle/gems/activesupport-6.0.1/lib/active_support/dependencies.rb:319:in `load'
/usr/local/bundle/gems/activerecord-6.0.1/lib/active_record/railtie.rb:49:in `block in <class:Railtie>'
/usr/local/bundle/gems/railties-6.0.1/lib/rails/railtie.rb:246:in `instance_exec'
/usr/local/bundle/gems/railties-6.0.1/lib/rails/railtie.rb:246:in `block in run_tasks_blocks'
/usr/local/bundle/gems/railties-6.0.1/lib/rails/railtie.rb:255:in `each'
/usr/local/bundle/gems/railties-6.0.1/lib/rails/railtie.rb:255:in `each_registered_block'
/usr/local/bundle/gems/railties-6.0.1/lib/rails/railtie.rb:246:in `run_tasks_blocks'
/usr/local/bundle/gems/railties-6.0.1/lib/rails/application.rb:509:in `block in run_tasks_blocks'
/usr/local/bundle/gems/railties-6.0.1/lib/rails/engine/railties.rb:15:in `each'
/usr/local/bundle/gems/railties-6.0.1/lib/rails/engine/railties.rb:15:in `each'
/usr/local/bundle/gems/railties-6.0.1/lib/rails/application.rb:509:in `run_tasks_blocks'
/usr/local/bundle/gems/railties-6.0.1/lib/rails/engine.rb:459:in `load_tasks'
/usr/local/bundle/gems/railties-6.0.1/lib/rails/railtie.rb:190:in `public_send'
/usr/local/bundle/gems/railties-6.0.1/lib/rails/railtie.rb:190:in `method_missing'
/app/Rakefile:11:in `<top (required)>'
(See full trace by running task with --trace)
```

Looking through releases I can see that in `v3052` rails was updated to v6. Running the same migrate command in version `v3051`, the database is migrated, all is hunky-dory. No errors üëç

Apologies, but I don't really know too much about rails, but some Googling brings up this issue https://github.com/rails/rails/issues/36610 ‚Äì could this be related?

The @channel is not desired in our use-case. Sometimes we're just deploying a branch to staging that doesn't have any PRs in it because we are just directly pushing to the branch. Is there a way to disable this @channel? Could argue that it'd be more flexible if it just used some unique word and then users could setup a notification based on that word if they wanted to. https://github.com/zendesk/samson/blob/71e4bb4e732efa919a8f07ec95196f6821984211/plugins/slack_webhooks/app/views/samson_slack_webhooks/notification.text.erb#L9
They should not be eager-loaded since their order is important,
zeitwerk failed on that previously incorrect setup.
Moving them from /app/decorators to just /decorators to avoid load-path trouble.

All plugins had to rename their engine too ... this will break existing plugins, but at least it won't be silent ... they can stay backwards compatible by defining both the Engine and the SamsonPlugin

@zendesk/compute 
app/decorators seem to be a problem with that ... so need some workaround like removing it from autoload_paths ... ideally never adding it in the first place with some rails patch or putting them into root directory (big git diff + test changes but should be harmless ... annoying part is having to set files for single_cov so might need to add root folder support)
we need to do discover once per cluster and api version and then reuse that for parallel clients
so for example dup a cached+discovered client and replace it's connection ... ideally use Rails.cache for storing the discovered endpoints too and only refresh once per hour
Similar to previous contributions, i'd like to be able to perform CRUD operations on environment variable groups via a json api and this PR adds support for this

Probably this could also be cleaned up and simplified to inherit from `ResourceController` but not sure about your stance on sharing code between plugins & the main codebase and also wanted to get buy-in on the change itself first

### References
- Jira link: 

### Risks
- Low/Med/High: thing that could happen

Restrict namespaces to only those managed by samson.
Need a way to migrate existing applications which are deploying to other namespaces....

### References
- Jira link: https://zendesk.atlassian.net/browse/PAAS-4185

### Risks
- Low: breaks deployment of apps outside their namespace, potentially breaking some complex use cases

![Screen Shot 2019-09-17 at 6 41 23 pm](https://user-images.githubusercontent.com/153219/65025896-ddaf4700-d97a-11e9-9074-cc797ea8f386.png)

Work in progress.

### References
- Jira link: 

### Risks
- Low/Med/High: thing that could happen
