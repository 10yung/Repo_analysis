
I have a system with Python 3.8 installed.  If I create a Python 3.7 virtualenv with pyenv, I can't import the library:

```bash
> ./bin/pip install ujson
Collecting ujson
Installing collected packages: ujson
Successfully installed ujson-1.35
> ./bin/python
Python 3.7.5 (default, Nov 27 2019, 13:18:45) 
[GCC 9.2.0] on linux
Type "help", "copyright", "credits" or "license" for more information.
>>> import ujson
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
ImportError: libpython3.7m.so.1.0: cannot open shared object file: No such file or directory
>>> 
```

This problem doesn't occur with other similar packages, such as nujson and orjson.
Run this code (indent by : of previous line):
import ujson

def create_json_string(value):
    return "{\"x\":" + value + "}"

num = (2 ** 64) / 9

def inputs():
    yield str(num) + "77777777777777777777777"
    yield str(num) + "9"
    yield str(num) + "0"

for input_str in inputs():
    try:
        json_str = create_json_string(input_str)
        js = ujson.loads(json_str)
        print ("json "+json_str+" returned x=" + str(js['x']))
    except Exception as e:
        print ("json "+json_str+" returned error: "+str(e))

The result is:
> json {"x":204963823041217240177777777777777777777777} returned x=2049638230412172401
json {"x":20496382304121724019} returned x=2049638230412172403
json {"x":20496382304121724010} returned error: Value is too big!

The problem is that the number 204963823041217240177777777777777777777777 should raise "Value is too big!" exception.
The reason is that in ultrajsondec.c: , at the line "if (intNeg == 1 && prevIntValue > intValue)" , comparing intValue to prevIntValue doesn't indicate that the number is too long. You need to compare it to MAX_VALUE / 10.
Hello, I am a core dev for [spyder-ide/spyder](https://github.com/spyder-ide/spyder/) and we would like to update this package to distribute wheels. 

Do you think this is possible @cgbystrom, @hrosenhorn, @Jahaja, @Jhonte, @jskorpan, @mhansson, @mkristo, @msjolund, @mthurlin, @ogabrielson, @oskarblom, @ronniekk, @T0bs, @tjogin?

Thanks!
The [Python packaging specifications](https://packaging.python.org/specifications/core-metadata) indicate that the [`license` parameter](https://packaging.python.org/specifications/core-metadata/#license) to `setup()` should be used in one of the following cases:

* the license is not a selection from the “License” Trove classifiers
* to specify a particular version of a license which is named via the `Classifier` field
* to indicate a variation or exception to such a license

This PR removes the explicit `license` parameter since the usage for this project does not fit any of those cases and it makes it more difficult to use tools like [pip-licenses](https://pypi.org/project/pip-licenses) since it is not consistent with other projects that just have `License :: OSI Approved :: BSD License` as one of their trove classifiers.

Please note that this does _not_ change the license of the project in any way, and since this project already has a `License :: OSI Approved :: BSD License` trove classifier the `license` parameter is redundant.
When you try to encode an unsupported object type, you can get a hard-to-understand error:
```
>>> import numpy
>>> import ujson
>>> ujson.dumps(numpy.bool_(True))
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
OverflowError: Maximum recursion level reached
```

Add a hint to this error message about why the encoding may have failed: `(maybe you tried encoding a type of object that isn't supported?)`

Fixes https://github.com/esnme/ultrajson/issues/339
Right now, `ujson` gives this error when you try to encode certain types (e.g. `numpy.bool_`) that cannot be encoded:
```
OverflowError: Maximum recursion level reached
```

For example, you can get this error by running this code:
```
import numpy
import ujson
print(ujson.dumps(numpy.bool_(True)))
```

This error does not indicate what actually went wrong, which is that `numpy.bool_` objects cannot be encoded.

As a basic fix for this problem, I'd suggest changing the error message to:
```
OverflowError: Maximum recursion level reached (maybe you tried encoding a type of object that isn't supported?)
```
I USE Python version: 2.7.5
the code example:
```
    import ujson
    print(datetime.datetime.now())
    print(ujson.dumps(datetime.datetime.now()))
```
the print info:
```
2019-09-20 12:12:37.541496
1568981557
```

and the timestamp really is:
```
1568981557  = 2019/9/20 20:12:37  , more than 8h
```
how should I modify, to make the timestamp is right?
Hi,

My colleague and I have been working on a fork project to support NumPy's int64 under Python3: [caiyunapp/ultrajson](https://github.com/caiyunapp/ultrajson).

All you need to do is `pip install nujson` and `import nujson as ujson`.

What we mainly change is call NumPy's header in C, you can see https://github.com/caiyunapp/ultrajson/commit/187bd155b7acd303aa6f5571f5b858c0d244edd6 for details.

In [26]: ujson.dumps(c)
Out[26]: '["b","a","c","d"]'

In [27]: c
Out[27]: ChainMap({'a': 1, 'b': 2}, {'c': 1, 'd': 2})