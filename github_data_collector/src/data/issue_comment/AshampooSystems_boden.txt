
I encountered a syntax error ...
I have a little trouble interpreting it.
Please explain to me the cause of this error.
This is the code of error : 
![Capture](https://user-images.githubusercontent.com/59345775/71566408-a0993b80-2ab7-11ea-918f-204410c61f53.PNG)
`
Thank you
Hello! I heard about Boden on Cppcast (https://cppcast.com/marcus-tobias/), and it sounds really cool! :)

I love the idea of a pure C++ library that embraces modern C++, and provides _native_ UIs for the target environments. To me, this is the _right solution_ for building UIs in C++, so all my best wishes and support! :)

This issue is a proposal to support a key feature of C++ that has, as far as I know, never been well supported in a widely used C++ GUI framework: native C++ exception handling.

**TL;DR**: My 2013 (ðŸ˜…) undergraduate honors thesis proposes a mechanism to properly support user code throwing arbitrary exceptions in a C++ application framework, and I believe this work could be easily added to Boden! The idea is essentially to have user code dynamically register exception handlers by exception type, and have the framework implement a central handler function that matches the caught exception to the correct handler. This solution places minimal burden on the app developer.

Boden is attempting to be a modern C++17 GUI framework, and good, modern C++ code often throws exceptions, so I think having a great story around exception handling would be really neat. 

The paper can be found here:
_"Dynamically Registering C++ Exception Handlers: Centralized Handling of C++ Exceptions in Application Framework Libraries"_
https://deepblue.lib.umich.edu/handle/2027.42/102769

Unfortunately, this was my first academic paper, so it is quite rambly. Sorry about that! You might enjoy simply scanning the code in the Appendix, which contains a simple example implementation of this idea.

--------------

I wasn't able to find any information on exception handling in your documentation, so I might be mistaken, but glancing through the source code I think these ideas could be relevant. Boden is slightly less of an easy candidate for this than other C++ gui frameworks could be, because the main application run-loop (a convenient place to put the exception handling) isn't in your code; it's of course instead in either Apple's or Android's code. However, by placing `try`/`catch` wrappers around a few key callback points in the Boden code, I think this could still be valuable.



The goal of the work in the paper is to prevent users from having to repeat their exception-handling boiler-plate across every one of their callbacks. For example, a purely custom-written terminal UI application might have code that looks like this:

```c++
int main() {
  while (true) { // loop forever until the program exits
    try {
      auto cmd = read_user_input_cmd();

      if (cmd == ACTION__X) {
        do_x_action(read_x_input());
      } else if (/* ... */) { /* ... */ }

      // ...

    } catch (const BadInputException& e) {
      cout << "Error: Got bad input `" << e.got << "`, expected `" << e.expected << "`." << endl;
    } catch (/*...*/) { /*...*/ }
  }
  return 0;
}
```

But for a GUI program, where the developer is implementing callbacks to hook-up their functionality to GUI actions, there is no central place for the developer to put the exception handlers, so they may have to repeat that handling logic across many different callbacks, which is especially annoying if there are several different types that the developer wants to handle.


The paper essentially proposes having developers dynamically register exception handlers per-exception-type with the GUI framework, which the framework can then match exceptions against whenever an exception escapes user code. The crux of this approach relies on a somewhat weird trick where the GUI framework's handler repeatedly _`rethrow`s the exception_ in a new `try`-block, where it can be caught by the user's registered dynamic handlers.

It's essentially taking advantage of this (somewhat surprising) behavior:
```c++
try {
  throw /* ...Something... */; // 0. exception object is allocated here.
}
catch(...) {
  // 1. From here, the exception type is unknown.
  try { // 2. so we enter a new try-block to try again to find a good handler.
    throw; // 3. rethrow the exception (the runtime still know's the exceptions type even though code in this `...` block doesn't have access to it.)
  }
  catch(A &e) {
    // 4. the original exception was of type A.
  }
  catch(B &e) {
    // 5. the original exception was of type B.
  }
  catch(...) {
    // 6. we still do not know the type of the exception.
  }
} // 7. the exception object is deallocated here.
```
The only addition is that you repeat this `try`/re-`throw`/`catch` sequence in a loop, once for each dynamically registered handler, calling their `try_handle_exception` function, which is templated for the correct exception type.

--------

AAAAAANNNNNYYYYYYYWAY, sorry for the long post! I just got excited when hearing about Boden in the podcast, and wanted to share the ideas in that paper because it's rare to find a relevant audience! ðŸ˜Š

Unfortunately, I'm not working on C++ much anymore these days (instead I'm working almost exclusively in [julia](https://julialang.org/), and I love it!) but i'm happy to chat with you about these ideas and/or maybe help you implement them in my spare time if it's something you're interested in!

Cheers! All the best,
~Nathan Daly
Hi,
 Is there any publicly published roadmap for this framework anywhere that I can look? Also I tried to join Boden's Google group but I got a response that the group doesn't exist?

Thanks.
android studio is so heavy

Be nice if there are some document about command line.

Hi,
 I just downloaded boden framework to play around with it. My question is, roughly, if I would like to integrate with a mapping library like tangram-es (https://github.com/tangrams/tangram-es) or mapbox, what is the best way to do it using boden?

TIA.
See: https://polly.readthedocs.io/en/latest/toolchains/ios/errors/polly_ios_development_team.html

For now I added the following to my CMakeLists.txt as a workaround:

```
# Based on: https://github.com/ruslo/polly/blob/c7462593865acbc0557fae6d461607a274dc6e36/utilities/polly_ios_development_team.cmake
string(COMPARE EQUAL "$ENV{BODEN_IOS_DEVELOPMENT_TEAM}" "" _is_empty)
if(_is_empty)
  polly_fatal_error(
      "Environment variable BODEN_IOS_DEVELOPMENT_TEAM is empty"
      " (see details: http://polly.readthedocs.io/en/latest/toolchains/ios/errors/polly_ios_development_team.html)"
  )
endif()

set(
    CMAKE_XCODE_ATTRIBUTE_DEVELOPMENT_TEAM
    "$ENV{BODEN_IOS_DEVELOPMENT_TEAM}"
)
```
Based on #13

CMakeLists.txt:

```
[...]

ios_configure_app_info(TARGET Authenticator
    LAUNCHSCREEN "LaunchScreen"
    TARGETED_DEVICES IPHONE IPAD
    IPHONE_ORIENTATIONS ALL
    IPAD_ORIENTATIONS ALL
    URI_ROLE Editor
    URI_HANDLERS otpauth totp)

[...]
```

For now only iOS support, but there should be a similar feature on Android. No documentation was updated and only manual testing was performed (By scanning a QR code with an `otpauth://` url and allowing it to open my app, see: http://security-totp.appspot.com).

Please let me know if this is a desired feature, I can do more work if needed but couldn't really find any contributor guidelines.

I'm just wondering to what's your plans about some features like UI and animations of itself. As Boden evolves, will you make improvements to the application look in the future using ui libraries such as **Material design**?
I think this would open up an even wider space as other non C++ languages can then bind to your library to write cross platform UIs.