Added iPadOS to the list of OS's
It's okay to lose audit records if the pipe is full (line 462) because that scenario can be handled by the client in almost all cases. When the kernel is busy, however, audit records are being dropped immediately and the audit trail is compromised in that coherence between data before and after dropping is potentially broken. This seems like a big no-no for the single performant security mechanism available from user space on macOS.

This PR comprises two changes.

1. Allow malloc to wait if the memory manager is busy.
2. Do the memory allocation for audit records in one chunk to minimize wait time.

In case 1. is not feasible in the kernel (I am not an expert), at least 2. reduces the chance to experience a drop by 50% (per call).
Already fixed in FreeBSD with https://github.com/freebsd/freebsd/commit/db248ffff183c72dab407a2ee84ff13843902997
```
// NO PREVIOUS INCLUDE


#include <libkern/libkern.h>

int foo()
{
 // Macro expands to ___builtin___strncpy_chk here!!!
    strncpy(0,0,0);
}
```

```
// NO PREVIOUS INCLUDE

#include <AvailabilityMacros.h>
#include <libkern/libkern.h>

int foo()
{
 // default strncpy function here
    strncpy(0,0,0);
}
```
If one entry fits perfectly into the queue (no room left between the entry and end of the queue), calling peek will always return NULL as this check `headOffset >= queueSize` is wrong.
The check should be `headOffset > queueSize`. In case of equality between the two variables, `headOffset` should be given the chance to wrap to the beginning of the queue.
It is important to note that dequeue function has the right check. I tested it and I was able to get a NULL (fail) from the peek function, but a successful dequeue call.
This pull request fix the issue. 


Small typographical and grammar fixes.
Minor typos in comments.

See Radar 36356714 and 37208696
This makes nullfs usable for non-system processes as a "bind mount" mechanism, which then makes `chroot` a whole lot more valuable because we can create workable roots that share large swaths of the filesystem with the host (even if just read-only).

I also filed rdar://35545568 on this issue, asking for the entitlement requirement to be removed.

If this can't be accepted, can you possibly explain why it's needed in the first place? It seems pretty harmless to me but I might just be missing something.