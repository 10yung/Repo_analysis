This will fix issue https://github.com/andygrove/sqlparser-rs/issues/147

<!-- Reviewable:start -->
---
This change isâ€‚[<img src="https://reviewable.io/review_button.svg" height="34" align="absmiddle" alt="Reviewable"/>](https://reviewable.io/reviews/andygrove/sqlparser-rs/148)
<!-- Reviewable:end -->

The AlterTable statements seems to lack support for adding a new column to an existing table.

```rust
pub enum AlterTableOperation {
    AddConstraint(TableConstraint),
    DropConstraint { name: Ident },
}
```

I want to use this crate as a dependency to implement my own keywords and operations. It would be really nice to see a concrete example.
Maybe I missed something, but I think placeholders are not yet supported and cannot be parsed. I would like to ask if this could be added.

Ideally, with few extensions than a regular parser:
* In regular SQL queries, only SELECT, INSERT, UPDATE queries can have placeholders. But for my use case it would be great if also other statements can have them, like `CREATE VIEW` which takes a query, and that one could have placeholders, because `CREATE VIEW` is specially processed in my case. (See https://github.com/mit-pdos/noria/issues/142 for more information.)
* Common SQL databases support position-based placeholders, I would love it some way of having keyword-based ones could be added. This then maps very well to how one can provide values with a dict structure instead of position.
Intervals are confusing. This makes the interpretation of the individual
fields more obvious.
Hi, I am using sqlparser 0.4.0 and rust version 1.36.0

Sql Query 
`
SELECT "emp"."id" FROM "emp" WHERE "emp"."id" = $1 LIMIT $2 -- binds: [123, 5]
`

Parse error
`
ParserError("Expected literal int, found: $2")
`

Used Dialect: 
```rust
impl Dialect for AckoPostgresSqlDialect {
    fn is_identifier_start(&self, ch: char) -> bool {
        (ch >= 'a' && ch <= 'z')
            || (ch >= 'A' && ch <= 'Z')
            || (ch == '@')
            || ch == '$'
            || ch == '_'
    }

    fn is_identifier_part(&self, ch: char) -> bool {
        (ch >= 'a' && ch <= 'z')
            || (ch >= 'A' && ch <= 'Z')
            || (ch >= '0' && ch <= '9')
            || (ch == '@')
            || ch == '$'
            || ch == '_'
    }
}
```
I am using sqlparser 0.4.0 with rust version 1.36.0
Query: 
`
SELECT "emp"."id", "emp"."data" FROM "emp" WHERE id = $1 AND data->>'id'=$2 -- binds: ["emp_name", "123"]
`

Error: 
`ParserError("Expected an expression, found: >")`

Dialect Used:
```rust
impl Dialect for MyPostgresSqlDialect {
    fn is_identifier_start(&self, ch: char) -> bool {
        (ch >= 'a' && ch <= 'z')
            || (ch >= 'A' && ch <= 'Z')
            || (ch == '@')
            || ch == '$'
            || ch == '_'
    }

    fn is_identifier_part(&self, ch: char) -> bool {
        (ch >= 'a' && ch <= 'z')
            || (ch >= 'A' && ch <= 'Z')
            || (ch >= '0' && ch <= '9')
            || (ch == '@')
            || ch == '$'
            || ch == '_'
    }
}
```

Even I am adding chars `-`  and `>` into `is_identifier_part` then it is giving Error:: `ParserError("Expected end of statement, found: \'id\'")`
Resubmission of #78, which caused some compilation failures due to merge skew when it landed. @andygrove are you game to try this again? 


Postgresql [RETURNING](https://www.postgresql.org/docs/9.5/dml-returning.html)

```sql
INSERT INTO users (firstname, lastname) VALUES ('Joe', 'Cool') RETURNING id;

UPDATE products SET price = price * 1.10
  WHERE price <= 99.99
  RETURNING name, price AS new_price;

DELETE FROM products
  WHERE obsoletion_date = 'today'
  RETURNING *;
```
```rust
Err(ParserError("Expected end of statement, found: RETURNING"))
```
It would be nice to have a `parse_select` method that returns `SQLSelect` struct rather than have to deal with `SQLQuery` and `SQLSetExpr` for simple use cases.