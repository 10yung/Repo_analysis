Just thought that I'd mention that a downside to using eps for figures is that transparency is not supported. As an example, I have found that having a legend that is semi-transparent and overlaps a curve slightly can allow for a better figure.
Made some sentence more concise and clear. Hope this helps!
Some packages of mine that may come in handy:

 * [matplotlib2tikz](https://github.com/nschloe/matplotlib2tikz): Convert matplotlib figures into native, easily editable LaTeX code. ([matlab2tikz](https://github.com/matlab2tikz/matlab2tikz) works the same way)
 * [betterbib](https://github.com/nschloe/betterbib): Improve your BibTeX bibliography with online data
 * [blacktex](https://github.com/nschloe/blacktex): Correct some common LaTeX antipatterns.

Just adding a comment here that I prefer to use one script (usually `plot.py` at top level) that has a positional command line argument (using `argparse`) for which figure(s) to create. This seems cleaner to me because you can keep your plotting functions all in one file, and generate multiple figures with a single command.
I had a journal request that your final PDF should not contain Type 1 fonts and in my case the culprit were matplotlib figures. I found that with this setting in ~/.config/matplotlib/matplotlibrc
you can make matplotlib avoid Type 1 fonts:

<pre>
ps.useafm : True
pdf.use14corefonts : True
text.usetex : True
</pre>

Maybe you consider this useful and can add it here somewhere.