Trying to use the mysql2_makara adapter with Foreigner as in a rake task i was getting the error:
 [exec] "Database adapter mysql2_makara not supported. Use:\nForeigner::Adapter.register 'mysql2_makara', 'path/to/adapter'"
Thanks.

This PR solves two problems which are highly relevant if you are either using explicit schema names in add_foreign_key instructions, and/or you are using the Apartment gem.
1. Incorrect behaviour of using foreign keys in conjunction with schema name (see Example 1)
2. Unfavorable behaviour when using Apartment gem. When creating a new tenant, Apartment will create a new schema with specified name and load schema.rb. schema.rb as we all know contains add_foreign_key statements, some of which may reference the public (shared) schema (i e public foreign keys). In current version of foreigner this will throw an exception because the FKs already exists!
   - We need to let foreigner skip adding foreign key if:
     - Apartment gem is in use
     - Foreign key instruction wants to add to public (shared) schema
     - Foreign key already exist

We have patched the gem in our production environment and would like to share it with the main repo.

Example 1:

``` ruby
add_foreign_key "public.roles_users", "public.roles", :name => "roles_users_role_id_fk", :dependent => :delete, :column => "role_id"
```

With foreigner v1.7.4 we will get this sql:

``` sql
"ALTER TABLE `public`.`roles_users` ADD CONSTRAINT `public.roles_users_public.role_id_fk` FOREIGN KEY (`public.role_id`) REFERENCES `public`.`roles`(id)"
```

What is expected is this sql:

``` sql
"ALTER TABLE `public`.`roles_users` ADD CONSTRAINT `public.roles_users_role_id_fk` FOREIGN KEY (`public.role_id`) REFERENCES `public`.`roles`(id)"
```

Hello,

I have a multi tenanted app using the (well known, at least as far multi-tenancy goes) Apartment gem. This means that the concept of schemas beyond :public schema is introduced. Every tenant gets his own schema, and each schema contains all tables.

However, for common tables (system tables for read only) which are shared for all tenants, there is a possibility to configure Apartment to exclude these models. If you have foreign key constraints on these tables you will get into trouble with Foreigner. 

Example:
The model Diagnosis is shared for all my tenants, hence its data is in PUBLIC schema. On this table I have a FK constraint.

When I run rake db:migrate what happens is that the migration is run once for each tenant. What also happens is schema dump, and here is where Foreigner comes in:
I get this false diff:

``` diff
-  add_foreign_key "send_vet_prescription_items", "public.diagnoses", name: "send_vet_prescription_items_diagnosis_id_fk", column: "diagnosis_id"
+  add_foreign_key "send_vet_prescription_items", "diagnoses", name: "send_vet_prescription_items_diagnosis_id_fk"
```

This is because Foreigner assumes everything is in public schema (as all vanilla rails applications are). But in this case each foreign key is in a tenant schema, and each foreign key need to explicitly point to the table in public schema. This is because when postgres evaluates a FK in a tenant schema it will assume that the table being referred to also exist in the local schema, UNLESS it explicitly says otherwise.

I have made a pull request to fix this: https://github.com/matthuhiggins/foreigner/pull/165/files

PS: Comments/review are welcome, I hope you like it and can consider merging it.

Add support for Apartment gem with excluded models -- tables of which exist in public schema.

If Apartment class is defined, excluded models are inspected. In case the current table that we are generating foreign keys for is one of the excluded tables, it means it needs to have 'public.' prepended to it's table name

In the latest RC of Rails 4.2, they renamed the instance variable containing the table name. This broke the ability to use the `foreign_key` method within `change_table`. Then new version introduces a `name` method, which should (hopefully) be more stable. This patch tries to use the `name` method if it exists, and falls back to `@table_name` otherwise.

Without setting up appraisal or some such, I'm not sure there's an easy way to test this, but it's working for me with Rails 4.2.rc1.

Trying to run db:schema:load runs the first time, but on subsequent tries it fails trying to drop any tables that have foreign keys defined on them. This is happening in both postgres and sqlserver.
