
The quick start example provided here: https://github.com/kubernetes/examples/tree/master/staging/storage/minio

... is not working. It fails with:

```
ProvisioningFailed | storageclass.storage.k8s.io "standard" not found
```
Hello, I am trying to configure scaleio in openshift using below link. Everything has been configured, but when a pod moves to another node, underlying block device is not accessible on another node. Trying to see if anybody has configured to make it working in Cluster environment.

https://github.com/kubernetes/examples/tree/master/staging/volumes/scaleio
Hello evreybody. Recently I start study kubernetes. And I try to understand PV and PVC with nfs.
And I really cant understand:
1. When I using nfs. Where need to deploy nfs server ? It is some independent or need to deploy in master node or minion node ? 
2. In my pvc - yaml
======================================================
apiVersion: v1
kind: PersistentVolume
metadata:
 name: pvc1
spec:
 accessModes:
   - ReadWriteMany
 capacity:
   storage: 10Gi
 nfs:
   server: - I think need to past nfs server ???? 
   path:  --- which path need to past ??? 
===============================================

> It moves all current examples into a /staging directory to prepare for a cleanup .

is the cleanup still planned? https://github.com/kubernetes/kubernetes/pull/80356/files is attempting to update links to things in this subfolder folder, but I'm not sure why it exists

_Originally posted by @liggitt in https://github.com/kubernetes/examples/pull/2#issuecomment-515138884_
The example https://github.com/kubernetes/examples/tree/master/staging/volumes/nfs works fine if the container using nfs mount is running as root user. If I use securityContext to run not as root user then I have no write access to the mounted volume.

How to reproduce:
here is the nfs-busybox-rc.yaml with securityContext:
```
# This mounts the nfs volume claim into /mnt and continuously
# overwrites /mnt/index.html with the time and hostname of the pod.

apiVersion: v1
kind: ReplicationController
metadata:
  name: nfs-busybox
spec:
  replicas: 2
  selector:
    name: nfs-busybox
  template:
    metadata:
      labels:
        name: nfs-busybox
    spec:
      securityContext:
        runAsUser: 10000
        fsGroup: 10000
      containers:
      - image: busybox
        command:
          - sh
          - -c
          - 'while true; do date > /mnt/index.html; hostname >> /mnt/index.html; sleep $(($RANDOM % 5 + 5)); done'
        imagePullPolicy: IfNotPresent
        name: busybox
        securityContext:
          runAsUser: 10000
        volumeMounts:
          # name must match the volume name below
          - name: nfs
            mountPath: "/mnt"
      volumes:
      - name: nfs
        persistentVolumeClaim:
          claimName: nfs
```

Actual result:
```
kubectl exec nfs-busybox-2w9bp -t -- id
uid=10000 gid=0(root) groups=10000

kubectl exec nfs-busybox-2w9bp -t -- ls -l /
total 48
<..>
drwxr-xr-x    3 root     root          4096 Aug  2 12:27 mnt
```
Expected result:
the group ownership of /mnt folder should be user 10000

The mount  options in nfs pv are not allowed except rw
```
apiVersion: v1
kind: PersistentVolume
metadata:
  name: nfs
spec:
  capacity:
    storage: 5Gi
  accessModes:
    - ReadWriteMany
  nfs:
    # FIXME: use the right IP
    server: 10.23.137.115
    path: "/"
  mountOptions:
#    - rw // is allowed
#    - root_squash // error during pod scheduling: mount.nfs: an incorrect mount option was specified
#    - all_squash // error during pod scheduling: mount.nfs: an incorrect mount option was specified
#    - anonuid=10000 // error during pod scheduling: mount.nfs: an incorrect mount option was specified
#    - anongid=10000 // error during pod scheduling: mount.nfs: an incorrect mount option was specified
```

```
kubectl version
Client Version: version.Info{Major:"1", Minor:"10", GitVersion:"v1.10.3", GitCommit:"2bba0127d85d5a46ab4b778548be28623b32d0b0", GitTreeState:"clean", BuildDate:"2018-05-21T09:17:39Z", GoVersion:"go1.9.3", Compiler:"gc", Platform:"windows/amd64"}
Server Version: version.Info{Major:"1", Minor:"10+", GitVersion:"v1.10.3-rancher1", GitCommit:"f6320ca7027d8244abb6216fbdb73a2b3eb2f4f9", GitTreeState:"clean", BuildDate:"2018-05-29T22:28:56Z", GoVersion:"go1.9.3", Compiler:"gc", Platform:"linux/amd64"}
```

