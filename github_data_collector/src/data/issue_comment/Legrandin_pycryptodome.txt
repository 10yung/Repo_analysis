Hello!

I'm using the PYOIDC library which is used to handle OpenID Connect authorization workflow. It includes a special session state which stores RSA keys. By default, the library uses Python's native dictionary object to store the keys, but it's not persistent. Trying to serialzie the session state raises a PicklingException:

```
app  |     state = obj.__getstate__()
app  |   File "/usr/local/lib/python3.6/site-packages/Cryptodome/PublicKey/RSA.py", line 204, in __getstate__
app  |     raise PicklingError
app  | _pickle.PicklingError
```

Can you share some insight on why is the public key not serializable?

To my knowledge public keys are just plain bytearrays or Base64 encoded strings - in which case they could be serialized just fine.
Using pycryptodomex-3.9.4

>>> import Cryptodome.SelfTest
>>> Cryptodome.SelfTest.run()

Fails with:

Skipping AESNI tests
Skipping test of PCLMULDQD in AES GCM
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
  File "/proj/digig5_1_sjc2/devel/wakeford/crypotn100_tb_b/trunk/tbcs/python_lib/lib/python3.5/site-packages/Cryptodome/SelfTest/__init__.py", line 73, in run
    result = runner.run(suite)
  File "/usr/opt/pmc/python/python-3.5.2.x86_64/lib/python3.5/unittest/runner.py", line 185, in run
    self.stream.writeln(result.separator2)
  File "/usr/opt/pmc/python/python-3.5.2.x86_64/lib/python3.5/unittest/runner.py", line 25, in writeln
    self.write(arg)
TypeError: a bytes-like object is required, not 'str'


import os
from Crypto.Cipher import AES
Key = os.urandom(16)
Iv = os.urandom(16)
encryption_suite = AES.new(Key, AES.MODE_CBC, Iv)
print(encryption_suite.decrypt(encryption_suite.encrypt("a"*32)))

The above code prints a garbage first block 
$ python3 /tmp/bug.py
b'\xbd/>\x02\xb6\xa7\xb2\x02\xf0A\xe2\xe4l\x8eL/aaaaaaaaaaaaaaaa'

i believe its because decrypt call is assuming the Initialization vector is not present and creating a new one resulting in a garbage first block

import os
from Crypto.Cipher import AES
Key = os.urandom(16)
Iv = os.urandom(16)
encryption_suite = AES.new(Key, AES.MODE_CBC, Iv)
decryption_suite =  AES.new(Key, AES.MODE_CBC, Iv)
print(decryption_suite.decrypt(encryption_suite.encrypt("a"*32)))

The second code prints the plain text properly

After the issue #355 and the *__merged__* pull-request #356 updating the docs, the changes have yet to be mirrored online at https://pycryptodome.readthedocs.io. This will only take the readthedocs account holder a second or two to initialize.
Example code:

```
#!/usr/bin/python3

from hashlib import sha512
from Cryptodome.Hash import SHA512
import time

initial_digest=b'test.test.test.test.test'
iterations=500000

# *******************

digest=initial_digest

start = time.time()

for counter in range(iterations):
    digest=sha512(digest).digest()


end = time.time()
print("  Time (hashlib sha512):\t", end - start)

# *******************

digest=initial_digest

start = time.time()

for counter in range(iterations):
    digest=SHA512.new(data=digest).digest()


end = time.time()
print("Time (cryptodome sha512):\t", end - start)


# *******************

digest=initial_digest

start = time.time()

MySHA512=SHA512.new

for counter in range(iterations):
    digest=MySHA512(data=digest).digest()


end = time.time()
print("Time (cryptodome sha512):\t", end - start)

```

Output on my computer:

```
valentin@computer:~/python/test3$ ./test-sha512.py
  Time (hashlib sha512):	 0.5348014831542969
Time (cryptodome sha512):	 7.416509389877319
Time (cryptodome sha512):	 7.28940749168396
valentin@computer:~/python/test3$ ./test-sha512.py
  Time (hashlib sha512):	 0.5275444984436035
Time (cryptodome sha512):	 7.590082168579102
Time (cryptodome sha512):	 7.583686351776123
valentin@computer:~/python/test3$ ./test-sha512.py
  Time (hashlib sha512):	 0.5171098709106445
Time (cryptodome sha512):	 7.440552234649658
Time (cryptodome sha512):	 7.221668243408203
valentin@computer:~/python/test3$ 
```

Is this because of Cryptodome using more object oriented approach? Or the underlying implementation of the algorithm is somehow inefficient?
how can i install this without using pip? im sure everyone in the python world uses pip but Darwin is being an ass plus it restricts the ability for my code to be portable. any advice on how to get past the "
Traceback (most recent call last):
  File "/Users/andrew/Documents/GitHub/Libre/pycryptodome/setup.py", line 455, in <module>
    with open(os.path.join("lib", package_root, "__init__.py")) as init_root:
FileNotFoundError: [Errno 2] No such file or directory: 'lib/Crypto/__init__.py'
"
error when running as setup.py as sudo 

Thanks for your help
Hello,
I'm try to use Encrypt a large file but try to decrypt this file got a error!

I tried to encrypt & decrypt a 11 byte txt file, it working perfectly, but tried a 50mb file get the error

```
    text = unpad(cryptor.decrypt(data),16)
  File "C:\Python\Python38-32\lib\site-packages\Crypto\Util\Padding.py", line 90, in unpad
    raise ValueError("Padding is incorrect.")
ValueError: Padding is incorrect.
```
```

import os
import hashlib
import binascii
from Crypto.Cipher import AES

from Crypto.Util.Padding import pad, unpad


def aes_decode(data, key):
    cryptor = AES.new(key, AES.MODE_CBC, key)
    text = unpad(cryptor.decrypt(data),16)
    return text
    #return text.rstrip(b'\0')  # .decode("utf-8")


def aes_encode(data, key):
    cryptor = AES.new(key, AES.MODE_CBC, key)
    text = cryptor.encrypt(pad(data,16))
    return text



def encrypt_by_aes(file_path,new_file_path,password):
    aes_pass = password
    aes_key = hashlib.md5(aes_pass.encode('utf-8')).hexdigest()
    print(aes_key)
    aes_key = binascii.unhexlify(aes_key)


    if os.path.exists(new_file_path):
        os.remove(new_file_path)

    file = open(file_path, 'rb')
    file_size = os.path.getsize(file_path)
    CHUNK_SIZE = 16*1024*1024

    while file.tell() < file_size:
        data = file.read(CHUNK_SIZE)
        if data:
            with open(new_file_path, 'ab') as f:
                f.write(aes_encode(data, aes_key))
        else:
            break
    print("encode %s OK!" % file_path)







def decrypt_by_aes(file_path,new_file_path,password):
    aes_pass = password
    aes_key = hashlib.md5(aes_pass.encode('utf-8')).hexdigest()
    print(aes_key)
    aes_key = binascii.unhexlify(aes_key)


    if os.path.exists(new_file_path):
        os.remove(new_file_path)

    file = open(file_path, 'rb')
    file_size = os.path.getsize(file_path)
    CHUNK_SIZE = 16*1024*1024

    while file.tell() < file_size:
        data = file.read(CHUNK_SIZE)
        if data:
            with open(new_file_path, 'ab') as f:
                f.write(aes_decode(data, aes_key))
        else:
            break
    print("encode %s OK!" % file_path)








encrypt_by_aes('LICENSE.txt','LICENSE_.txt','123')
decrypt_by_aes('LICENSE_.txt','LICENSE__.txt','123')
```



Made the following 2 changes after running into performance issues with Shamir Secret Sharing:

* For `split`, use [Horner's method](https://en.wikipedia.org/wiki/Horner%27s_method) which uses only a single multiplication by a small number in our case (instead of 2 multiplications including one between two potentially large numbers). For large-ish `k` and `n` this is significant. I tested with `n = 1000` and `k = 666` and `split` now takes 3s instead of 33s on my system. There are faster algorithms for evaluating a polynomial on many points at once but that would require a lot more changes and might not be worth it for smaller parameters.

* For `combine`, separately compute numerator and denominator to avoid expensive modular inverse computations. Doing it this way requires `k` times less inversions. I also removed the `coeff_0_l` and `inv` variables, I can't imagine why they were here in the first place since they just cancel each other. On my system, for `n = 100` and `k = 66`, this brings down computation time from 8s to 300ms (and makes it possible to use `n = 1000`).

I checked that this returns the same shares as before for the same random coefficients (in reverse order).
Hello,

When loading a privkey using RSA.import_key, the exception raised is "ValueError" either if the content isn't a valid RSA key OR if it is a RSA key but encrypted and wrong/no passphrase was provided. 
The only way to programmatically determine which of those situations is happening is to parse the Exception string value, which should be avoided at all cost (considering internationalization and such)

It would be great to define and raise custom exceptions when relevant so that it is possible to determine what the problem is without having to parse strings
I had a project which imported and used Pycryptodome. But I had to make executable for Windows and used PyInstaller to do so. PyInstaller generated a very  big .exe file (32MB) due to the fact that by importing Pycryptodome it also had to import numpy, scipy and a lot of big dependencies.

I switched from Pycryptodome to cryptography, which doesn't seem to use so much dependencies, and the resulting file is much smaller (8MB), while libraries such as numpy and scipy are not included.

Are those big dependencies absolutely necessary for Pycryptodome?