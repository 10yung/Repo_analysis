| Q              | A
| -------------- | ---
| Bug?           | no
| New Feature?   | yes
| Version Used   | n/a
| FFmpeg Version | n/a
| OS             | n/a

Probably a captain obvious question here, but has this project considered using FFI? Maybe some performance gains to be had?

+ https://www.php.net/manual/en/ffi.examples-basic.php
+ https://github.com/FFmpeg/FFmpeg/blob/master/fftools/ffmpeg.h

Some examples:

+ https://github.com/gabrielrcouto/awesome-php-ffi
+ https://jolicode.com/blog/php-7-4-ffi-what-you-need-to-know
+ https://github.com/ircmaxell/FFIMe

| Q              | A
| -------------- | ---
| Bug?           | no
| New Feature?   | Yes
| Version Used   | Specific tag or commit sha
| FFmpeg Version | FFmpeg or AVConv and version
| OS             | Your OS and version

Is it possible to add 'copy' as an available video/audio codec for X264?

I've tested this by simply adding it to the front of each array in FFMpeg\Format\Video\X264 and seems to work fine

This is helpful when you have a video of the same codec/size etc and you don't care about converting bitrate, you just want to add +faststart, for example, as it doesn't have to re-encode the entire video and completes in only a few seconds. 

any reason not to allow this as an option?

| Q              | A
| -------------- | ---
| Bug?           | yes
| New Feature?   | no
| Version Used   | v0.14 (according to composer.lock)
| FFmpeg Version | 4.1-11
| OS             | Linux version 4.4.59+ (running on a Synology DS218play)

#### Actual Behavior

Whenever I try to run `FFMpeg::create()`, I get this Exception thrown:

> Warning: Uncaught ErrorException: init.php:15 - require_once(/volume1/web/class/Symfony/Component/Process/ProcessBuilder.php): failed to open stream: No such file or directory (2) in /volume1/web/init.php:5
Stack trace:
#0 /volume1/web/init.php(15): {closure}(2, 'require_once(/v...', '/volume1/we...', 15, Array)
#1 /volume1/web/init.php(15): require_once()
#2 [internal function]: {closure}('Symfony\\Compone...')
#3 [internal function]: spl_autoload_call('Symfony\\Compone...')
#4 /volume1/web/vendor/alchemy/binary-driver/src/Alchemy/BinaryDriver/ProcessBuilderFactory.php(182): method_exists('Symfony\\Compone...', 'setPrefix')
#5 /volume1/web/vendor/alchemy/binary-driver/src/Alchemy/BinaryDriver/ProcessBuilderFactory.php(62): Alchemy\BinaryDriver\ProcessBuilderFactory->detectEmulation()
#6 /volume1/web/vendor/alchemy/binary-driver/src/Alchemy/BinaryDriver/AbstractBinary.php(172): Alchemy\BinaryDriver\ProcessBuilderFactory->__construct('/bin/ffprobe')
#7 /volume1/web/vendor/php-ffmpeg/ in /volume1/web/init.php on line 5

The exception stems from an autoloader I added myself, but that already means that the missing file couldn't be found by Composer's autoloader. Searching through Symfony's files, I can't find a class called `ProcessBuilder` myself.

#### Expected Behavior

Obviously for the exception not to be thrown and the extension working just fine.

#### Steps to Reproduce

After installing PHP-FFMpeg in my project via composer, adding the FFMpeg package via Synology's DRM Package Manager, copying `ffprobe` to the `/bin` directory, and appending my own autoloader after composer's one, running the code as such gives me the exception:

```
require_once(__DIR__ . '/vendor/autoload.php'); //composers autoloader
require_once(__DIR__ . '/autoload.php'); //my own autoloader

use FFMpeg\FFMpeg;

$ffmpeg = FFMpeg::create([
                'ffmpeg.binaries'  => '/bin/ffmpeg',
                'ffprobe.binaries' => '/bin/ffprobe'
            ]);
```

#### Possible Solutions

Taking out my own autoloader makes it work just fine, I suppose because Composer's autoloader only uses the non-strict `include` for files, while mine uses `require`. I could adapt my autoloader to not throw exceptions as well, although I'd prefer it doing so. Any chance the Symfony dependency for this extension could get fixed instead?
| Q              | A
| -------------- | ---
| Bug?           | no
| New Feature?   | no
| Version Used   | 0.13.0
| FFmpeg Version | N-95710-gb25b643
| OS             | CentOS 7.7

#### Actual Behavior

We are using PHP-FFMPeg on laravel to process a video file to 720p and 480p.
The PHP-FFMPeg is not processing the file or generate a file with 0 bytes.
Sometimes one of this resolutions is precessed, most of the time is the 720p.
The Exception return "Encoding failed".
This occours only on production server CentOS.
Executing the command of FFmpeg on prompt of production server works well.

#### Expected Behavior

PHP-FFMPeg process a video file to 720p and 480p.

#### Steps to Reproduce

We have two jobs of Laravel to process the files in chain.
In the ProcessVideo720PJob.php file: 
[https://gist.github.com/Diego-MNG/e58228afe459dd65fcc58fb5970d627f#file-processvideo720pjob-php](https://gist.github.com/Diego-MNG/e58228afe459dd65fcc58fb5970d627f#file-processvideo720pjob-php)

In the ProcessVideo480PJob.php file: 
[https://gist.github.com/Diego-MNG/e58228afe459dd65fcc58fb5970d627f#file-processvideo480pjob-php](https://gist.github.com/Diego-MNG/e58228afe459dd65fcc58fb5970d627f#file-processvideo480pjob-php)
| Q                  | A
| ------------------ | ---
| Bug fix?           | yes
| New feature?       | no
| BC breaks?         | no
| Deprecations?      | no
| Fixed tickets      | fixes #323 
| Related issues/PRs | https://github.com/PHP-FFMpeg/PHP-FFMpeg/issues/402#issuecomment-464319454
| License            | MIT

#### What's in this PR?

- Edited the `$ffmpeg->open()` method to send `Video` if and only if at least one video stream is not marked as `attatched_pic`.
- A sample audio file with cover which is created by adding a cover image to the already existing [audio.mp3](https://github.com/PHP-FFMpeg/PHP-FFMpeg/blob/master/tests/files/Audio.mp3) using [eye-d3](https://pypi.org/project/eyeD3/)
- Functional tests to confirm the reported issue and verify the fix.

#### Why?

Fixes https://github.com/PHP-FFMpeg/PHP-FFMpeg/issues/323
FFMmpeg::open() has 'media type' bug with MP3s (image metadata)

Fffmpeg source uses this function to detect if a video stream is actually a valid video stream or just a cover art.
https://github.com/FFmpeg/FFmpeg/blob/release/4.2/libavformat/movenc.c#L149-L154

I did not use the patch in https://github.com/PHP-FFMpeg/PHP-FFMpeg/issues/402#issuecomment-464319454 because the `codec_type` can be either `png` or `jpeg`. If the `codec_type` is `jpeg`, that stream can be either a cover art or just a `MotionJPEG` video stream. Hence, it was not the right way to detect this.


#### BC Breaks/Deprecations

No.
There is a small chance that some code depends on this behavior to detect audio with cover images.

#### To Do

- [x] Create tests to confirm the issue
- [x] Fix till the new tests pass
- [x] Run full test suite after making the change
| Q                  | A
| ------------------ | ---
| Bug fix?           | no
| New feature?       | yes
| BC breaks?         | no
| Deprecations?      | no
| Fixed tickets      | fixes #issuenum
| Related issues/PRs | #issuenum
| License            | MIT

#### What's in this PR?

This PR adds a new api method to retrieve frames through ffprobe
It also adds a support for additional options allowing more custom calls
As an addition, as `last`  method has been added to `StreamCollection` and `FrameCollection` for easier retrieval

I also regenerated the api doc which was largely outdated, using sami 1.4.1, feel free to hide this commit to make the review easier

#### Why?

Frames information can be needed in some cases (see example below)
Additional options allow some filtering directly within ffprobe which would otherwise require iteration and operations on our output and therefore defeat the purpose ffprobe having such features

#### Example Usage

Retrieving the starting byte and ending byte matching a timestamp interval in an audio file (needed to generate audio previews without persistence)
```php
$probe = FFProbe::create();
$filepath = 'tests/files/Jahzzar_-_05_-_Siesta.mp3';

// Now we can do
$options = array('-select_streams a', '-read_intervals 00:08%00:18');
$frames = $probe->frames($filepath, $options);
$startByte = $frames->first()->get('pkt_pos');
$endByte = $frames->last()->get('pkt_pos');
echo sprintf('The byte interval closest to 08 -> 18 seconds is %d -> %d', $startByte, $endByte);

// Outputs: The byte interval closest to 08 -> 18 seconds is 193618 -> 433735
```
#### Backward compatibility
No BC break.
Interfaces are left unmodified and public api methods only offer a new parameter with a default value not altering the behavior in any way
Unit tests have been updated accordingly

Hello I'm having troubles configuring in CentOS.

I have installed ffmpeg and ffprobe correctly in /usr/bin/

Also I've checked via terminal and It works.

Also, via terminal, if I made a "which ffmpeg" it returns me "/usr/bin/ffmpeg"

I have made the following:

var_dump(getenv('PATH'));
var_dump(exec('which ffmpeg'));
var_dump(ini_get('open_basedir'));
var_dump(is_file(exec('which ffmpeg')));
var_dump(is_executable(exec('which ffmpeg')));

And it returns me:
string(49) "/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin"
string(0) ""
string(44) "/var/www/vhosts/name-of-the-domain.com/:/tmp/"
bool(false)
bool(false)
NULL

And the permissions are right:
[root@vps bin]# ls -lha ffmpeg
-rwxr-xr-x 1 root root 217K abr  4  2019 ffmpeg

Â¿What could be happening?

It's a Linux production server. I my dev server (macOS) was working fine

Thanks!
How do i compress the video using php? The documentation only refers to size as in dimension of the video, but i don't want that. I want the video to resize from let say 100mb to 50 mb of video.

| Q              | A
| -------------- | ---
| Bug?           | no
| New Feature?   | no
| Version Used   | 5.0
| FFmpeg Version | FFmpeg
| OS             | ubuntu

I used following code but i got encoding failed. How I should solve this problem?
```
		FFMpeg::fromDisk('videos_disk')
			->open("proxy.mp4")
			->exportForHLS()
			->toDisk('streamable_videos')
			->setSegmentLength(10) // optional
			->addFormat($lowBitrate)
			->addFormat($midBitrate)
			->addFormat($highBitrate)
			->save( 'adaptive_steve.m3u8');
```
Hi 
I have a problem in calling `$ffmpeg = FFMpeg\FFMpeg::create();` that dosen't work on linux server i already installed FFMpeg in my linux server.
Also i tried use `$ffmpeg = FFMpeg\FFMpeg::create([
    'ffmpeg.binaries' => 'usr/share/man/man1/ffmpeg',
    'ffprobe.binaries' => 'usr/share/man/man1/ffprobe',
    'timeout' => 3600,
    'ffmpeg.threads' => 12,
]);` that also not working because ffmpeg binaries path is a wrong When i use "whereis ffmpeg" in linux command he give me these paths >`ffmpeg: /usr/bin/ffmpeg /usr/share/ffmpeg /usr/share/man/man1/ffmpeg.1.gz` I tried all of them but it's still not working!!
What i have to do?? Please help
