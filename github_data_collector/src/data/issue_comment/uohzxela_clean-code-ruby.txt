Hi ðŸ‘‹ and thank you for creating this repo!

I'd like to suggest some modifications:

- Fix typo from [#33](https://github.com/uohzxela/clean-code-ruby/issues/33)
- Shorten examples with the `interpret` method
- Use more general naming in the examples with the `email_clients` method
- Do not forget about previously explained concepts in the `show_employee_list` method by making methods do one thing
- Fix the issue with variable scope introduced in [#36](https://github.com/uohzxela/clean-code-ruby/pull/36) and mentioned in [#37](https://github.com/uohzxela/clean-code-ruby/issues/37)
- Remove un-Ruby inheritance from the OCP section
- Remove not working `super` method from `EmployeeTaxData` - in order to work it requires `name` and `email` parameters
- Remove redundant `super` methods from the example with `Shape` class
Hi @uohzxela 
Thanks for your good contents. It is really helpful.
But I have a question about **Methods should do one thing**

**Bad:**

```
def email_clients(clients)
  clients.each do |client|
    client_record = database.lookup(client)
    email(client) if client_record.active?
  end
end

email_clients(clients)
```

**Good:**

```
def email_clients(clients)
  clients.each { |client| email(client) }
end

def active_clients(clients)
  clients.select { |client| active_client?(client) }
end

def active_client?(client)
  client_record = database.lookup(client)
  client_record.active?
end

email_clients(active_clients(clients))
```

It seems **Good** code is more clear but if we use this code, we have to loop all  **clients** twice.
But first **Bad** code only loops **clients** once.
So **Bad** code is faster than **Good** code.
What do you think?

I think the local variable in the method split_into_first_and_last_name is different from the one name = 'Ryan McDermott' .  So it will not affect the outside name variable's value.

DRY is more prevailing than removing duplicate code.

Method names should say what they do
Poorly named methods add to the code reviewer's cognitive load at best, and mislead the code reviewer at worst. Strive to capture**` the the`**precise intent when naming methods.
In ruby:
```ruby
a = nil || 'a'   
=> 'a'

a = false || 'a'
=> 'a'
```
I don't disagree with the sentiment here, but [Favor functional programming over imperative programming](https://github.com/uohzxela/clean-code-ruby#favor-functional-programming-over-imperative-programming) states that "Functional languages are cleaner and _easier to test_".

The test for the example doesn't change between implementations, so doesn't give the reader an indication of _why_ functional style is easier to test.

```ruby
require 'minitest/autorun'

class FunctionalVsImperativeTest < Minitest::Test
  def test_imperative
    calculator = Imperative.new
    assert_equal(calculator.calculate(test_data), 3150)
  end

  def test_functional
    calculator = Functional.new
    assert_equal(calculator.calculate(test_data), 3150)
  end

  private

  def test_data
    [ { name: 'Uncle Bobby',
        lines_of_code: 500 },
      { name: 'Suzie Q',
        lines_of_code: 1500 },
      { name: 'Jimmy Gosling',
        lines_of_code: 150 },
      { name: 'Grace Hopper',
        lines_of_code: 1000 } ]
  end
end

class Imperative
  def calculate(programmer_output)
    total_output = 0

    programmer_output.each do |output|
      total_output += output[:lines_of_code]
    end

    total_output
  end
end

class Functional
  INITIAL_VALUE = 0

  def calculate(programmer_output)
    programmer_output.sum(INITIAL_VALUE) { |output| output[:lines_of_code] }
  end
end
```
Hi,

I really like this repo. I can see it being immensely useful when working on PR reviews in my company. Instead of explaining something I can simply link to a section in this repo.

Similarly to eg [ruby-style-guide](https://github.com/rubocop-hq/ruby-style-guide) what do you think about creating a standalone github organization for this repo? The full link to this repo would be something like: `https://github.com/clean-code-ruby/clean-code-ruby`. I think this would be really nice and give this repo a nice, "official touch".