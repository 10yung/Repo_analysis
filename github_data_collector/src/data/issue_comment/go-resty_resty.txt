Hi, I think it will be nice if you support Redirect history logs.
https://github.com/go-resty/resty/blob/7a9880107942440bdca20fe3e7217022ee35da73/util.go#L236-L238

This function prevents it.

but If I pass a byte buffered body, then it works.

---

About HTTP GET and request body:

> The RFC2616 referenced as "HTTP/1.1 spec" is now obsolete. In 2014 it was replaced by RFCs 7230-7237. Quote "the message-body SHOULD be ignored when handling the request" has been deleted. It's now just "Request message framing is independent of method semantics, even if the method doesn't define any use for a message body" The 2nd quote "The GET method means retrieve whatever information ... is identified by the Request-URI" was deleted.

 - https://stackoverflow.com/a/983458
Can You add a method to directly obtain all the original request packets and response packets? It is convenient to output to the log center to understand the entire process of sending packets at that time. Similar to the following
```
GET /js/gowalker.js?v=2.5.3.0803 HTTP/1.1
Host: gowalker.org
Connection: close
Pragma: no-cache
Cache-Control: no-cache
User-Agent: xxxxx
Accept: */*
Sec-Fetch-Site: same-origin
Sec-Fetch-Mode: no-cors
Referer: https://gowalker.org/github.com/parnurzeal/gorequest
Accept-Encoding: gzip, deflate
Accept-Language: en;q=0.7
Cookie:xxxxx
```

```
HTTP/1.1 200 OK
Accept-Ranges: bytes
Content-Length: 6330
Content-Type: application/javascript
Date: Fri, 03 Jan 2020 13:26:39 GMT
Last-Modified: Sat, 02 Mar 2019 06:50:39 GMT
Server: Caddy
Connection: close

$(document).ready(function () {
   ……………………
```

I'm using this library for our internal project's command line tools, and I met a problem that we need a customized flag `--dry-run` to print all useful information but the request will not really sent.

Currently I added a util package to print the client object directly in `client.OnBeforeRequest` if the dry run mode is enabled then let the function return not `nil` error, and it seems not a good solution. 

Do you have any suggestion to print the request information and stop sending API in this case?

Currently my solution:
``` go
if util.IsDryRunEnabled() {
    client = client.OnBeforeRequest(func(_ *resty.Client, request *resty.Request) error {
        fmt.Println("In dry-run mode:")
        fmt.Println(request)
        return errors.New("Dry run and interrupted.")
    })
}
```

Is there a way to see the how many bytes have been uploaded already when uploading a file (as a multipart field)? I've tried displaying the reading progress of the reader, but that doesn't work because resty seems to read the entire file at once.

(I'm new to Go, so I apologize if there is an obvious solution to this that I'm just not seeing.)
Thank you for creating such a useful library!

I check the response body in the RetryConditionFunc. And If the response body is invalid, I will return true to retry. But after maxRetry, it will still output the response. What I want is to return an error, so after maxRetry, it will return the error instead of the invalid response.
I find out there is an option to provide fallback content-type when it's not available in response. But what if the response has a wrong content-type? Can I force a correct content-type? For example with the following code, I expect to see a application/json content-type:

```go
resp, _ := client.R().SetResult(&obj).Get(url)
```

But  the server incorrectly replies a json plain text with content-type text/plain. It's a json format in a plain text type. How can I handle this? 

Thanks a lot. 
Hi!
It would be really, really practical if there was SetHostURLs() that accepts multiple addresses.  Resty would choose one of them upon each request. This could be configurable as well, but a random choice at first could suffice.

Cheers!
Hi! 
Thank you so much for this project, it saved me a lot of time!

Do you plan on adding a per-endpoint rate limiter, or a global rate-limiter of outgoing requests?

Thanks
It's possible to get a 200 OK response with HTML contents from a JSON endpoint due to faulty backend configuration (e.g. a problem in API gateway, etc.).
Since resty only parses response if content type is JSON or XML the call won't return an error. Such errors could be hard to debug.

I suggest to fix the default behaviour and always parse response if SetResult has been called.