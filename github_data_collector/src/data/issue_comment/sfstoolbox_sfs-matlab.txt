Hi all,

I was wondering if anyone had any guidance regarding how I would implement a control method (WDAF / MCWS / etc) to minimise the effects of unwanted room reverberations. 

I have modelled the room reverberations using a simplified Image Source Method, as shown in my code. I believe that the basic approach of the control method should be to alter the driving signals to the array of loudspeakers, however as I am relatively new to this field I am struggling to make much progression in my thesis.

If anyone has also dealt with the implementation of WDAF/ MCWS in applications not involving SFS_toolbox I would also be very interested in hearing their approach.

Thanks for any help

Jack Williams 




`%%%~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
%%% ISM CODE.
%Room reverberations modelled as their own sources. Based off ISM. 
%Image positions are calculated, with a driving signal the same as its
%respective secondary source. 
%Listening area is central ring of speakers

% In order to see effect of room absorption manually change value of 'w_abs' (before main loop) 
%  Value of 1 all sound absorbed  (anechoic). 
%  Value of ~0.8: shows modest room reverberations, visually affecting
% quality of of sound field in listening area.

%%% Jack Williams 2019
%%% SFS-Toolbox: H.Wierstorf et. al. 
%%% Notes:  WORK IN PROGRESS - 'W_abs' is in no means an accurate representation of how walls reflect sound and is to be altered in the future

%%%~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

clear 
clc
conf = SFS_config; %load default configuration settings from SFS_config.m file

%Simulation Resolution i.e. - 500 means 500 x 500 grid of pressure values

conf.resolution = 500;

% input parameters for: sound_field_mono_nfchoa(X,Y,Z,xs,src,f,conf)

%X, Y, Z, = axes INCLUDING image sources
%xs = position of point source
%src = source type- pw = plane wave, ps = point source
%f = monochromatic frequency
%R = room dimensions
R = [3 , 4];
X = [0, R(1)];
Y = [0 ,R(2)];
Z = 0;
xs = [1.5 ,4 , 0 ];
src ='ps';
f = 500;

%%% Calculating Positions of Primary Sources within unshifted listening
%%% room

centreX = X(1,2) / 2; 
centreY = Y(1,2) / 2;
conf.secondary_sources.number = 20;
conf.secondary_sources.size = 2;
conf.secondary_sources.center = [centreX , centreY , 0 ];
conf.secondary_sources.geometry = 'circle';
x_primary = secondary_source_positions(conf);

%%% driving signals calculated for initial speaker set up 
x0 = x_primary;
D_primary = driving_function_mono_nfchoa(x0,xs,src,f,conf);

%%% listening position to consider reflections from = centre of speaker set up 
Xl = [centreX , centreY, 0 ];

%%% number of speakers to find images for
inmax = conf.secondary_sources.number;

%%% creating matrix of ones for position and driving signals of images
x_image = ones((inmax*4),7);
D_images = ones((inmax*4 ), 1);

%%% Initialising ISM Loop
%%% jn = image number, with 4 images modelled per secondary source
jn = 0;


%%% Weight of image sources //// Not finalised///
w_abs = 0.8
%~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
%%% jn = image source number 
%%% in = primary source number
%%% >For each i primary, positions im_(1,2,3,4)are calculated for their
%%% corresponding image source.
%%% >For each i primary source, driving signals D_images are set for their
%%% corresponding image sources.
%~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

 for in = 1:inmax
 
     
  
     %%% columns 4-6 not considered yet, all directions are -1 
     %%% column 7 / weight needs to be considered through difference in pos
     %%% SEE IMAGE_SOURCE_LOCATIONS code for calculations 
     
im_1 = [(2 *R(1) -x_primary(in,1 )) , x_primary(in,2) , 0 ,-x_primary(in,4) , x_primary(in,5) , 0 ,(1 - w_abs)];
jn = jn+1;
x_image(jn,:) = im_1;
D_images(jn) = D_primary(in);
 
im_2 = [-x_primary(in,1) , x_primary(in,2) , 0, x_primary(in,4) , x_primary(in,5) , 0, (1 - w_abs)];
jn = jn + 1;
x_image(jn,:) = im_2;
D_images(jn) = D_primary(in);

im_3 = [x_primary(in,1) , (2 *R(2) - x_primary(in,2)), 0, x_primary(in,4) , -x_primary(in,5) , 0 ,(1 - w_abs)];
jn = jn + 1;
x_image(jn,:) = im_3;
D_images(jn) = D_primary(in);

im_4 = [x_primary(in,1) , -x_primary(in,2), 0,x_primary(in,4) , -x_primary(in,5), 0 ,(1 - w_abs)];
jn = jn + 1;
x_image(jn,:) = im_4;
D_images(jn) = D_primary(in);

 end
 
%%% finding max / min [X,Y] values of image sources
max_image = max(x_image(:, 1:2));
min_image = min(x_image(:, 1:2));
 
%%% combining image sources and primary sources
x0 = [x_image ; x_primary];

%%% shifting entire x0 
x0(:,1) = x0(:,1) - min_image(1);
x0(:,2) = x0(:,2) - min_image(2);


%%% assigning new limits of simulation area
X = [0, ( max_image(1) - min_image(1))];
Y = [0, ( max_image(2) - min_image(2))];
Z = 0;

%%% Assigning driving signals for image sources 
D = [D_images ; D_primary];

% Calculating sound Field
[P,x,y,z] = sound_field_mono(X,Y,Z,x0,src,D,f,conf)

%%% Plotting sound field
conf.plot.normalisation = 'center';
conf.plot.usenormalisation = true;
plot_sound_field(P,x,y,z,x0,conf);

`
As during the last years nobody contacted us via email and only I have access (at least my guess) to it, I would propose to remove it and disable it in two years together with the sfstoolbox.org domain.
Still WIP. Predictions are possible for single positions or as the mininum over extended listening areas (only circles at the moment, lines and ellipses are planned ). The algorithm sets the according parameters for the prediction of the aliasing frequency based on the SFS method (WFS, NFCHOA, LWFS-SBL or LWFS-VSS) and its parametrisation.
As the structure of the configuration struct undergoes continual changes, it might be a good idea to add a validation script, that compares the given struct against the current output of ``SFS_config``. It should check for additional and missing entries in the struct. One may use https://github.com/fietew/research/blob/master/tools/matlab/isfield_recursive.m
Some of the figures in the documentation are generated by using the implicit plotting functionality of some functions, e.g.
```Matlab
time_response_wfs(X,xs,src,conf)
```
Since Matlab has changed its default colors, the output will no longer look the same as before and it will also deviate between Octave and Matlab.
We should find a way to avoid this, but still show the cool automatic plotting functionality of the toolbox.

Note: for changing the color in Matlab after the plot was done, one could use the following:
```Matlab
hline = findobj(gcf, 'type', 'line');
set(hline,'Color','red');
```
This includes two points:

* Update the documentation on local WFS as `sound_field_mono_localwfs()` is now deprecated.
* Repeat the structure of WFS, NFC-HOA, LWFS for the Time Domain

See:
http://matlab.sfstoolbox.org/en/latest/frequency-domain/
http://matlab.sfstoolbox.org/en/latest/time-domain/
For the start of the discussion have a look at #136.
As discussed in #141 we have some inconsistencies in the description of dimension length in the function header.
For example
```Matlab
%       x0      - position  and direction of secondary sources [N0x7] / m
%       d       - matrix of driving signals [NxN0]
```
in `driving_function_imp_nfchoa()` as opposed to
```Matlab
%       x0      - positions and directions of secondary sources / m [nx6]
%       d       - driving signals [mxn]
```
in `driving_function_imp_wfs()`.

We should agree on a common naming scheme and create a pull request in order to fix this.
We might add the driving functions of plane wave, point/line source of the unified 2.5D WFS framework for different referencing schemes / positions of amplitude correct synthesis (PCS) into the toolbox based on the findings 
[https://doi.org/10.1109/TASLP.2017.2689245](https://doi.org/10.1109/TASLP.2017.2689245)
, see also 
[142nd Audio Eng. Soc. Conv, Berlin, #9722](http://www.aes.org/events/142/papers/?ID=5360)
for general vector notation of these driving functions. Then, 'only' the referencing function must be adapted to work in general vector notation for desired reference curves.
I encountered a problem when using dummy_irs() and Matlab's `resample()` function together. `resample()` does not work properly when the to be resampled vector does not contain some zeros at the start and end. This happens since we moved the impulse to the first sample in commit 4b50bd7.

An example where this matters: Simulating the impulse response of a linear WFS array with `ir_wfs()` leads to ripples in the frequency response below the aliasing frequency (in this case about 850 Hz). Setting `conf.delayline.resampling = 'none'` shows the expected behaviour.

``` Matlab
SFS_start
SOFAstart

conf = SFS_config;
conf.N = 5000;
%secondary sources
conf.secondary_sources.geometry = 'line';
conf.secondary_sources.size = 10;
conf.secondary_sources.number = 51;
hrtf = dummy_irs(conf);
%wfs
conf.wfs.hprefhigh = 20000;
conf.xref = [0 -3 0];
%interpolation, delaying, weighting
conf.ir.hrirpredelay = 0; %pre-delay in samples
conf.delayline.resampling = 'matlab';
conf.delayline.resamplingfactor = 100;
conf.delayline.filter = 'integer';

[ir,x0] = ir_wfs(conf.xref,pi/2,[0 3 0],'ps',hrtf,conf);

%plot
N = length(ir(:,1));
f = (0:N-1)/N*conf.fs;
TF = fft(ir(:,1));
figure
    semilogx(f,db(abs(TF)))
    grid
    set(gca,'XLim',[20 conf.fs/2])
    xlabel('frequency / Hz'), ylabel('dB')
```

My suggestion would be to move the position of the dirac in `dummy_irs()` to e.g. sample 101 (from my experience the `resample()` problem is not noticable for this value) and then the additional delay can be substracted by setting `conf.ir.hrirpredelay = 100` if this is important to the user for time alignment of stimuli. This procedure would be in accordance with the handling of predelays in HRTF/BRIRs.
