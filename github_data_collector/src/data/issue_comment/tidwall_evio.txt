We are trying to echo messages received from one UDP connection to other connected UDP clients.  However, it looks like the UDP connection doesn't have an associated `loop`, so calling `Wake()` on the connection does nothing because loop is nil.
Should the connection created in `func loopUDPRead(s *server, l *loop, lnidx, fd int)` have a reference to the `loop`? 

  how to performance  a push service base on evio ?
Hello. I start from simple example how to work with evio:
```
	events.Data = func(ec evio.Conn, in []byte) (out []byte, action evio.Action) {
		if in == nil {
			fmt.Printf("wake from %s\n", ec.RemoteAddr())
			return nil, evio.Close
		}
		c := ec.Context().(*conn)
		data := c.is.Begin(in)
		for {
			leftover, response, err := mcproto(data, b52)
			if err != nil {
				if err != ErrClose {
					// bad thing happened
					println(err.Error())
				}
				action = evio.Close
				break
			} else if len(leftover) == len(data) {
				// request not ready, yet
				break
			}
			// handle the request
			out = response//next response may overwrite previous buffer
			data = leftover
		}
		c.is.End(data)
		return
	}
```
But out buffer will be overrided in case of piplined requests. 
I think we must write to output - like this:
```
                responses := make([]byte, 0)
		for {
			leftover, response, err := mcproto(data, b52)

			// handle the response
			responses = append(responses, response...)
			//out = response// don't do like this
			data = leftover
		}
		out = responses// do like this
		c.is.End(data)
```
You may find test for that case - here: https://github.com/recoilme/b52/blob/master/main_test.go#L19

I am not sure what's going on internally - but spent two weeks, for finding that problem)
May be you have this kind of problem in rediconn+evio+pipelined,  too
I want to implement a proxy program.

A = evio
B = backend service

The client will connect to A , and A read data from B then out data to A

If B's max connections is 10.  and clients is more than 10
In  event.Opened  , I use time.Sleep to wait B finish the work , but evio looks like  blocked.

So how do I implement it ? or any options can set max connections and backlog ?


https://github.com/tidwall/evio/blob/b353be3a765785dafabbb63a7b25aadec3533946/internal/socktoaddr.go#L28-L29

Thank you for the great framework! and I want to ask you about this question.
panic: no such file or directory

goroutine 50 [running]:
github.com/tidwall/evio/internal.(*Poll).ModReadWrite(0xc4202ea060, 0x507)
	/xagiot/home/yangxin/iot-proxy/src/github.com/tidwall/evio/internal/internal_linux.go:116 +0x8c
github.com/tidwall/evio.loopRead(0xc42030a000, 0xc4202d0100, 0xc4209c9050, 0xc4208ffb70, 0x0)
	/xagiot/home/yangxin/iot-proxy/src/github.com/tidwall/evio/evio_unix.go:445 +0x17d
github.com/tidwall/evio.loopRun.func2(0x507, 0x0, 0x0, 0x0, 0x0)
	/xagiot/home/yangxin/iot-proxy/src/github.com/tidwall/evio/evio_unix.go:245 +0xe6
github.com/tidwall/evio/internal.(*Poll).Wait(0xc4202ea060, 0xc420a93fa8, 0xc42030a000, 0x0)
	/xagiot/home/yangxin/iot-proxy/src/github.com/tidwall/evio/internal/internal_linux.go:66 +0xb3
github.com/tidwall/evio.loopRun(0xc42030a000, 0xc4202d0100)
	/xagiot/home/yangxin/iot-proxy/src/github.com/tidwall/evio/evio_unix.go:230 +0x93
created by github.com/tidwall/evio.serve
	/xagiot/home/yangxin/iot-proxy/src/github.com/tidwall/evio/evio_unix.go:157 +0x483

I thought there have some exception in listen unsolve, so sometimes evio will panic without any recover.
Iâ€˜m looking forward to hearing from you, best wishs to U.


goroutine 8 [IO wait]:
internal/poll.runtime_pollWait(0x7faa33483bc8, 0x72, 0xffffffffffffffff)
	C:/Go/src/runtime/netpoll.go:182 +0x56
internal/poll.(*pollDesc).wait(0xc0000ea218, 0x72, 0x1000, 0x1000, 0xffffffffffffffff)
	C:/Go/src/internal/poll/fd_poll_runtime.go:87 +0x9b
internal/poll.(*pollDesc).waitRead(...)
	C:/Go/src/internal/poll/fd_poll_runtime.go:92
internal/poll.(*FD).Read(0xc0000ea200, 0xc0001e8000, 0x1000, 0x1000, 0x0, 0x0, 0x0)
	C:/Go/src/internal/poll/fd_unix.go:169 +0x19b
net.(*netFD).Read(0xc0000ea200, 0xc0001e8000, 0x1000, 0x1000, 0x0, 0xc006875938, 0x6ba3ea)
	C:/Go/src/net/fd_unix.go:202 +0x4f
net.(*conn).Read(0xc00000e090, 0xc0001e8000, 0x1000, 0x1000, 0x0, 0x0, 0x0)
	C:/Go/src/net/net.go:177 +0x69
net/http.(*connReader).Read(0xc00007f890, 0xc0001e8000, 0x1000, 0x1000, 0x8bd6a8, 0xc006875a10, 0x3ae0042cdee)
	C:/Go/src/net/http/server.go:787 +0x107
bufio.(*Reader).fill(0xc000060a20)
	C:/Go/src/bufio/bufio.go:100 +0x10f
bufio.(*Reader).ReadSlice(0xc000060a20, 0xc006875a0a, 0x7faa32b2e098, 0xc006875b00, 0x40b7a9, 0xc015940400, 0x100)
	C:/Go/src/bufio/bufio.go:356 +0x3d
bufio.(*Reader).ReadLine(0xc000060a20, 0xc006875b08, 0xc01c2a2a80, 0x7faa356f0d98, 0x0, 0x0, 0x89ebc0)
	C:/Go/src/bufio/bufio.go:385 +0x34
net/textproto.(*Reader).readLineSlice(0xc01765f200, 0xc015940400, 0xc0000ea200, 0x0, 0x0, 0x42ba81)
	C:/Go/src/net/textproto/reader.go:55 +0x6f
net/textproto.(*Reader).ReadLine(...)
	C:/Go/src/net/textproto/reader.go:36
net/http.readRequest(0xc000060a20, 0x0, 0xc015940400, 0x0, 0x0)
	C:/Go/src/net/http/request.go:968 +0x8d
net/http.(*conn).readRequest(0xc000099040, 0x959280, 0xc00005e840, 0x0, 0x0, 0x0)
	C:/Go/src/net/http/server.go:967 +0x163
net/http.(*conn).serve(0xc000099040, 0x959280, 0xc00005e840)
	C:/Go/src/net/http/server.go:1819 +0x6a8
created by net/http.(*Server).Serve
	C:/Go/src/net/http/server.go:2884 +0x2f4

goroutine 24135 [syscall, 258 minutes]:
syscall.Syscall(0x1, 0xa, 0xc01090fdd8, 0x8, 0x1, 0xc01090fd58, 0xc01090fd58)
	C:/Go/src/syscall/asm_linux_amd64.s:18 +0x5
syscall.write(0xa, 0xc01090fdd8, 0x8, 0x8, 0xc01090fde0, 0x8, 0x0)
	C:/Go/src/syscall/zsyscall_linux_amd64.go:1005 +0x5a
syscall.Write(...)
	C:/Go/src/syscall/syscall_unix.go:192
github.com/tidwall/evio/internal.(*Poll).Trigger(0xc0001054a0, 0x86d840, 0xc00012e630, 0x2, 0x2)
	G:/gowork/pkg/mod/github.com/tidwall/evio@v1.0.2/internal/internal_linux.go:52 +0x3df
github.com/tidwall/evio.(*conn).Wake(0xc00012e630)
	G:/gowork/pkg/mod/github.com/tidwall/evio@v1.0.2/evio_unix.go:49 +0x165
created by main.(*srv).tx
	G:/gowork/src/gprs-server/server.go:231 +0x5d1
Hey there,

What do you think about adding a function that can serve events from a specified net.PacketConn or do you have a will to accept a PR with this feature?
Hi,
There is no way to make sure that no error has been occurred during the "write": I suggest adding a `PostWrite` event with an error as a parameter! 
Thanks :)
https://github.com/tidwall/evio/blob/b353be3a765785dafabbb63a7b25aadec3533946/examples/http-server/main.go#L174

I found this code to be able to query the path

2019/01/22 15:25:40 req path:/
2019/01/22 15:25:40 req query:file=1.txt

req.Path = sdata[s:s+q]
req.Query = sdata[s+q+1:i]