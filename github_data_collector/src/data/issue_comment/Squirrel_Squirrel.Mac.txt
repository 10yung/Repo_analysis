Currently, ShipIt is compiled with the source of ReactiveCocoa and Mantle, vs linking the frameworks that are distributed with Squirrel. This causes some issues in certain environments, where ShipIt can't figure out which copy of the objects to use. This PR fixes that.

First, it takes out all of the Mantle and ReactiveCocoa from the "Copy Sources" build step in ShipIt.
Next, it links against the Mantle and ReactiveCocoa frameworks in ShipIt.
Lastly, it adds a post build stage to link the compiled ShipIt binary to the Mantle and ReactiveCocoa frameworks using their location when distributed in Squirrel.
I have a code-signed Electron app to which I'm trying to add auto-update functionality.

I have set up a Lambda function at `https://api.staging.my-domain.com/updater/checkUpdates/products/product-name/platforms/darwin?v=1.0.0` which returns a 200-status JSON response that looks like this:

```json
{
  "upgradeStatus": "minor",
  "url": "https://s3.amazonaws.com/my-bucket/staging/installers/latest/My Product Name.zip"
}
```

I can paste that URL into my browser and it will download the file without a problem.

Despite this, I get the error `Error: Update check failed. The server sent an invalid response. Try again later.` which is coming from [SQRLUpdater.m](https://github.com/Squirrel/Squirrel.Mac/blob/cb838776ce22bcbf41def7b9a1352f24120bab29/Squirrel/SQRLUpdater.m). Objective-C is looks quite foreign to me though so it's hard to understand what is causing the error to be thrown.

As far as I can tell, I am doing everything I should be to get updates working. Is there something else I need to be doing?
A recent change to Squirrel attempted to link to ReactiveCocoa and Mantle in ShipIt, vs copying and compiling their source files into the ShipIt binary. This was done because, in certain environments, dylib was loading multiple copies of the classes, which was causing errors in ReactiveCocoa's assertions.

This PR actually removes the dependency classes from the Copy Files build step. It adds an additional build step to re-link ReactiveCocoa and Mantle, using @executable_path instead of @rpath, as @rpath linking was causing the same double loading problem in certain environments.
Is there a way to notarize an app with Squirrel in it?

I'm trying to submit it for notarization, but I get:

```
Hardened Runtime is not enabled.

"ShipIt" must be rebuilt with support for the Hardened Runtime. Enable the Hardened Runtime capability in the project editor, then test your app, rebuild your archive, and upload again.
```

I've set "Enable Hardened Runtime" on ShipIt target but didn't help.
ShipIt repeatedly crashes every few seconds on my Mac.

*** Assertion failure in __28-[RACSignal(Operations) and]_block_invoke(), /Users/sattard/projects/Squirrel.Mac/Carthage/Checkouts/ReactiveCocoa/ReactiveCocoa/RACSignal+Operations.m:1280
A follow up for https://github.com/Squirrel/Squirrel.Mac/issues/182

The issue was never solved and it creates a big bunch of problems to many of us.

https://github.com/Microsoft/vscode/issues/7426

Nothing you can do about it?

The problem still exist on macOS Mojave
Hello! I noticed that release 0.3.2 doesn't contain `initWithUpdateRequest:updateRequest requestForDownload:requestForDownload` in SQRLUpdater.h. This method has been added back to SQRLUpdater.h in current master (via https://github.com/Squirrel/Squirrel.Mac/commit/c80f0066498e72e1983fba40dc8b55bfe1ad5d15#diff-b53ab009e033cc0b6170c88536855d67). 

Are there any plans to cut a new release containing this change, among others? I'm happy to help if I can. Thanks!
Shipit is respawning every second how to I get rid of that thing?

Apparently some lunatic in Microsoft Teams and Postman decided to use it for software update, can we shut it down?

Thanks

```
Aug 22 08:22:29 iMac-Yann ShipIt[78850]: Installation error: Error Domain=SQRLShipItRequestErrorDomain Code=2 "Could not read update request" UserInfo={NSLocalizedDescription=Could not read update request, NSUnderlyingError=0x7fe414704620 {Error Domain=NSCocoaErrorDomain Code=260 "The file “ShipItState.plist” couldn’t be opened because there is no such file." UserInfo={NSFilePath=/var/root/Library/Caches/com.microsoft.teams.ShipIt/ShipItState.plist, NSUnderlyingError=0x7fe4147044c0 {Error Domain=NSPOSIXErrorDomain Code=2 "No such file or directory"}}}}
```
A lot my users are reporting an error when trying to update the app.

It throws a code 8 with domain SQRLUpdaterError....

Any idea what this can be? Or how I can debug this further? It doesn't happen on my machine so I have no way to reproduce it and I don't know what the error means.

Thanks in advance!
I've noticed that released versions of `Squirrel.framework` contain temporary `.DS_Store` files in the following locations:

- `Squirrel.framework/.DS_Store`
- `Squirrel.framework/Versions/.DS_Store`
- `Squirrel.framework/Versions/A/.DS_Store`

I was able to find that `Squirrel.framework` contains these `.DS_Store` files in various macOS apps by using the following command:

`find "/Applications/" -name ".DS_Store" -type f -print`

I think the build script can include some code to remove these unnecessary `.DS_Store` files.