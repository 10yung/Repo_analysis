Updates [org.scala-sbt:sbt](https://github.com/sbt/sbt) [from 1.3.6 to 1.3.7](https://github.com/sbt/sbt/compare/v1.3.6...v1.3.7).
[Release Notes/Changelog](https://github.com/sbt/sbt/releases/tag/v1.3.7)

I'll automatically update this PR to resolve conflicts as long as you don't change it yourself.

If you'd like to skip this version, you can just close this PR. If you have any feedback, just mention me in the comments below.

Have a fantastic day writing Scala!

<details>
<summary>Ignore future updates</summary>

Add this to your `.scala-steward.conf` file to ignore future updates of this dependency:
```
updates.ignore = [ { groupId = "org.scala-sbt", artifactId = "sbt" } ]
```
</details>

labels: library-update, semver-patch


AbsoluteUrl parsing is not validating the domain name in authority to only allow LDH ("letter digit hyphen") characters. Where as standard Java URI honors it. This is what it is mentioned in RFC-3986

`
Such a name consists of a sequence of domain labels separated by ".", each domain label starting and ending with an alphanumeric character and possibly also containing "-" characters
`

**To Reproduce**
```scala
import io.lemonlabs.uri.AbsoluteUrl
import java.net.URI

scala> println(AbsoluteUrl.parse("https://www.goog le.com?q=i+am+invalid"))
https://www.goog le.com?q=i%2Bam%2Binvalid

scala> println(new URI("https://www.goog le.com?q=i+am+invalid").toURL)
java.net.URISyntaxException: Illegal character in authority at index 8: https://www.goog le.com?q=i+am+invalid
  at java.net.URI$Parser.fail(URI.java:2848)
  at java.net.URI$Parser.parseAuthority(URI.java:3186)
  at java.net.URI$Parser.parseHierarchical(URI.java:3097)
  at java.net.URI$Parser.parse(URI.java:3053)
  at java.net.URI.<init>(URI.java:588)
  ... 36 elided
```

Updates [org.scalameta:scalafmt-core](https://github.com/scalameta/scalafmt) [from 2.2.2 to 2.3.2](https://github.com/scalameta/scalafmt/compare/v2.2.2...v2.3.2).
[Release Notes/Changelog](https://github.com/scalameta/scalafmt/releases/tag/v2.3.2)

I'll automatically update this PR to resolve conflicts as long as you don't change it yourself.

If you'd like to skip this version, you can just close this PR. If you have any feedback, just mention me in the comments below.

Have a fantastic day writing Scala!

<details>
<summary>Ignore future updates</summary>

Add this to your `.scala-steward.conf` file to ignore future updates of this dependency:
```
updates.ignore = [ { groupId = "org.scalameta", artifactId = "scalafmt-core" } ]
```
</details>

labels: semver-minor
**Description**

There are many tests that already exist for checking parsing URL's. For example [web-platform-tests](https://github.com/web-platform-tests/wpt/tree/master/url/resources) (see test cases into *.json files). We can reuse these tests for free, for improving the quality of this project. What do you think?

Updated: 
Does 'scala-uri' parser support https://url.spec.whatwg.org/?
**Description**
Provide instances of `Eq`, `Order`, `Show`, etc for all the Uri types such as `Uri`, `Url`, `AbsoluteUrl`, `Host`, etc.

Make `Functor` instances for mapping path parts, query params, etc?

Prior to releasing `2.0.0`, I would like to get [scala-uri-benchmarks](https://github.com/lemonlabsuk/scala-uri-benchmarks) migrated over to [sbt-jmh](https://github.com/ktoso/sbt-jmh) and do a comparison against previous versions
**Description**
Since https://github.com/lemonlabsuk/scala-uri/pull/75 the scala-uri JAR has gone from 456K to 1.6M and a compiled [minimal Scala.js project](https://github.com/lemonlabsuk/scala-uri-scalajs-example) has gone from 1.65MB to 16.3MB!

It might be worth moving this public suffixes functionality into a separate module so that users who do not need this functionality can have a scala-uri dependency with a smaller file size

**Description**
Investigate including the typeclasses added in https://github.com/lemonlabsuk/scala-uri/pull/51 in the core API

For example, so you can do something like:

```scala
import io.lemonlabs.uri.Url
final case class Foo(a: Int, b: String)
 object Foo {
  implicit val traversableParams: TraversableParams[Foo] = TraversableParams.product
}

val foo = Foo(a = 1, b = "bar")
Url.parse("http://theon.github.com/scala-uri").withParams(foo)
```

https://en.wikipedia.org/wiki/IPv6_address#Use_of_zone_indices_in_URIs