https://github.com/node-gh/gh/issues/745

npm WARN marked-terminal@3.2.0 requires a peer of marked@^0.4.0 || ^0.5.0 || ^0.6.0 but none is installed. You must install peer dependencies yourself.
**Version number**
2.8.1

**Describe the bug**
```
]$ gh pr --remote upstream 2
Fetching pull request #2 into branch pr-2
remote: Enumerating objects: 78, done.
remote: Counting objects: 100% (78/78), done.
remote: Compressing objects: 100% (7/7), done.
remote: Total 45 (delta 17), reused 45 (delta 17), pack-reused 0
Unpacking objects: 100% (45/45), done.
From github.com:foo/bar
 * [new branch]          ensure-all-tests-pass-and-finish-web-integration -> pr-2
Switched to branch 'pr-2'
[hook] gh pr 2 --comment 'Just started reviewing :)'
Adding comment on pull request #2
Error: Can't comment on pull request 2.
HttpError: Not Found
    at Object.commentHandler (/usr/lib/node_modules/gh/lib/cmds/pull-request/comment.js:16:15)
    at process._tickCallback (internal/process/next_tick.js:68:7)
```

**To Reproduce**
See above.

1. Run Cmd 'gh pr --remote <remote> <pr>'
2. See error
See above

**Expected behavior**
PR is fetched and no error results.

**Screenshots**
N/A

**Additional context**
Ubuntu Linux 19.10

**Is your feature request related to a problem? Please describe.**
<!--A clear and concise description of what the problem is. Ex. I'm always frustrated when [...]-->
Every time I send a PR I need to go to the UI to update reviewers and labels, when they are almost always basically the same.

**Describe the solution you'd like**
<!--A clear and concise description of what you want to happen.-->
I'd expect a flag in the command line, or a config setup where it's possible to define default reviewers (not those who send the PR to, github reviewers) and default labels.

**Describe alternatives you've considered**
<!--A clear and concise description of any alternative solutions or features you've considered.-->
Going through the UI?

**Additional context**
<!--Add any other context or screenshots about the feature request here.-->
NOOP

**_If you are interested on gh updates, you can subscribe to this issue._**

## New v2 Features

![image](https://media.giphy.com/media/5wWf7GW1AzV6pF3MaVW/giphy.gif)


-  Fantastic work by @hamxabaig for implementing **beautiful table style** printing for listing pull requests
-  **Pagination** for all list endpoints
-   Upgraded to **latest GitHub rest endpoints**
-   Added **throttling** Octokit plugin that uses best practices to prevent hitting rate limits
-  Significantly more **robust testing suite**
-  **Before + After Hooks** available for every cmd
-  Remove all **vulnerabilities** reported by `npm audit`

### Node Versions

- Dropped support for v6
- Only Supporting >= v8

### Issues

- `--label` flag is now `--labels`
- Clearer delineation between repos when listing

### Milestones

- Stabilize milestones listing implementation

### Pull Requests

- New list table view (turn off by removing `pretty_print` from `~/.gh.json`)
- Thanks to @drewbrokke for prefixing each branch name with `"Branch:"` to make it easier to see separations
- Thanks to @drewbrokke for adding line breaks after each repo and after each branch when displaying pulls
- Add line breaks between repos when listing pull requests
- Include "merge" hook in "fetch" hook
- Remove undocumented code that will do a local git merge

### Repo

- Thanks to @keaglin for fixing silent failures of `gh re --new`

### Hooks

- Merge plugin hooks to .gh.json file only upon first run of plugin
- Hooks will now always be managed through the .gh.json file

### House Cleaning

- Convert to **async await** style from callback hell 🎉
- Removed `alias` cmd as aliases are implemented more portably & powerfully by the shell (_conversation to add it back here: https://github.com/node-gh/gh/issues/661_)
- Updated error handling
- Clearer **logging** messages
- Deeper **end to end test coverage** of critical code paths like authentication
- Remove gist paste **deprecation** warning
- Simplify the hooks flow

## About myself 👋

Hi there, I’m Ryan! My goal is to improve your dev life by increasing your **productivity**. If you run into any **issues**, or would like to **contribute**, feel free to reach out to me and it would be my joy to help!

`gh pr` displays a table and `gh is` displays a list.

As a user, I'd like to see same info about issues than in pulls, including issue status.
`gh` reports my current user incorrectly when called from a folder that is a git repo (I think that's what is triggering it?).

```bash
$ gh user --whoami
First we need authorization to use GitHub's API. Login with your GitHub account.
? Enter your GitHub user bpatram
? Enter your GitHub password [hidden]
? Enter your two-factor code 851335
Writing GH config data: /Users/brandonpatram/.gh.json
Authentication succeed.
ebth

# Calling this from a repo
$ gh user --whoami
ebth

# Moving to a directory that is not a git repo
$ cd ~
$ gh user --whoami
bpatram
```

In my case, it seems to return the organization the repo is owned by (ebth). Interestingly enough my `.gh.json` does list the correct user.

```json
    "github_user": "bpatram",
```

Deleting the `.gh.json` file and relogging has no effect.
Hi. I did expect that

```gh is 1111 -L "some label"```

would add the label, but it does not. 
Would it be possible to have a configuration property containing a regex pattern that GH could use to name a branch when pulling a PR down?

For example, if someone sends me a PR titled `TICKET-1234`, I could give GH a regex pattern that matches some `TEXT dash NUMBERS` and either grab that from the PR title, or from the latest commit as this is also a common practice. 

Most of the cmds are already singular, but there are a couple inconsistencies with Notifications & Gists
Hi.  Just trying out gh and realized many of the commands don't have much (if at all) descriptions

```
$ gh repo --help
usage: gh <command> [payload] [--flags] [--verbose] [--no-hooks]

List of available commands:
  re, repo Provides a set of util commands to work with Repositories.
    -B, --browser* (Boolean)
    -c, --clone* (Boolean)
    -C, --color (String)
    -D, --delete* (String)
    --description (String)
    -d, --detailed (Boolean)
    --gitignore (String)
    -f, --fork* (String)
    --homepage (String)
    --init (Boolean)
    -L, --label (Boolean)
    -l, --list* (Boolean)
    -N, --new* (String)
    -O, --organization (String)
    --page (String)
    --per_page (String)
    -p, --private (Boolean)
    -P, --protocol (String)
    -r, --repo (String)
    -t, --type (all, forks, member, owner, public, private, sources)
    -U, --update* (String)
    -u, --user (String)


(*) Flags that can execute an action.
'gh help' lists available commands.
'gh help -a' lists all available subcommands.
```

So I'm somewhat unsure how to use it without dipping into the source code.

Like what does --gitignore "string" do?

What command line parser are you using? I'm familiar with https://www.npmjs.com/package/commander