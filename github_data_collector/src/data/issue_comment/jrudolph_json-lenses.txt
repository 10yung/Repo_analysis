

Hi ,

I have a scenario in my application , where i have to recusrively get all the data, and i tried to use the jsonPath `$.store.book[*].subBooks[*]..author` as mentioned in http://goessner.net/articles/JsonPath/ . But i am getting an error while parsing. I tested the same using some online parsers and it is working fine.  I would like to know if this is the right syntax to be used in JsonLenses. Please let me know if am missing some thing.

```json
{ 
"store": {
    "book": [
      { "category": "reference",
        "author": "Nigel Rees",
        "title": "Sayings of the Century",
        "price": 8.95,
        "subBooks": [
          { "category": "fiction",
            "author": "Evelyn Waugh",
            "title": "Sword of Honour",
            "price": 12.99,
            "isbn": "0-553-21311-3",
            "subBooks": [
          { "category": "fiction",
            "author": "Evelyn Waugh",
            "title": "Sword of Honour",
            "price": 12.99,
            "isbn": "0-553-21311-3"
          }
        ]
          }
        ]
      },
      { "category": "fiction",
        "author": "Evelyn Waugh",
        "title": "Sword of Honour",
        "price": 12.99,
        "isbn": "0-553-21311-3"
      }

    ],
    "bicycle": {
      "color": "red",
      "price": 19.95
    }
  }
}
```

Regards
Johns
When trying to write a nested js:

``` javascript
{"a" : { "b" : "c"}}
```

using a single lens

``` scala
val ab = 'a / 'b
JsObject.update(ab ! set("c"))
```

That fails.
So far I solved this with a rather poor solution, another combining operator:

``` scala
trait EskoLenses extends ScalarLenses with OptionLenses with SeqLenses with Operations with JsonPathIntegration with ExtraImplicits {

  def writeIfAbscentCombine[M[_], M2[_], R[_]](outer: Lens[M], inner: Lens[M2])(implicit ev: Join[M2, M, R]): Lens[R] =
    new LensImpl[R]()(ev.get(inner.ops, outer.ops)) {
      def retr: JsValue => Validated[R[JsValue]] = parent =>
        for {
          outerV <- outer.retr(parent)
          innerV <- ops.allRight(outer.ops.flatMap(outerV)(x => inner.ops.toSeq(inner.retr(x))))
        } yield innerV

      def updated(f: SafeJsValue => SafeJsValue)(parent: JsValue): SafeJsValue =
        outer.updated {
          case l: Left[_, _] =>
            inner.updated(f)(JsObject())
          case r @ Right(js) =>
            inner.updated(f)(js)
        }(parent)
    }

}

object EskoLenses extends EskoLenses {
  implicit class WriteIfAbscenCombinator(outer: ScalarLens) {
    /**
     * When using this operator, the resulting lens join will not fail when trying to to do inner level writes, it will instead initialize an empty object
     *
     * @param inner
     * @return
     */
    def /?(inner: ScalarLens): ScalarLens = {
      EskoLenses.writeIfAbscentCombine(outer, inner)
    }
  }
}
```

I'm sure better solutions could be thought of.
E.g.  a combining lens could be a class which can be matched against and from which the inner and outer can be recovered. That way the need for parent node creation could be detected and executed before attempting to write the nested json.

I'm trying to construct a JSON object using multple JsonPath expressions and values extracted from different sources. The following snippet reproduces the problem I'm facing. Namely, the set operation doesn't work on JsonPath expressions. `json.update('object_id ! set(1))` works as expected.

``` scala
val json = JsObject()
val lens = JsonLenses.fromPath("$.object_id")
val updated  = json.update(lens ! set(1))
```

In this case `updated` will be an empty object.

I'm just getting started using this library and I'm running into a requirement to support both field renames and field mappers. 

One step further would be to be able to completely map a field in both its name and its value (including its type), i.e. being able to write a simple conversion from `{foo: 42)` to `{bar: {baz: 42}}` (so using the old value but wrapping it in some new structure with a new key)

The way I currently implement these cases is by using a combination of an extract and a set. Of course this does mean that the old field will still be present.

Do you think it is possible to implement this with the current codebase or would it require a major redesign? I haven't really dived into the implementation yet but if you would give some hints I might be able to come up with a pull request.

If I have a field which may be null then it blows up on extraction:

``` scala
val json = """{ "url": null }""".parseJson
json.extract[String]("url".?)
```

This causes a runtime exception with root cause:

```
spray.json.DeserializationException: Expected String as JsString, but got null
```

Is this an issue with son-lenses, or am I doing something wrong (a strong possibility)?

Attempting to extract a Seq[Seq[String]] from this document

``` scala
val json = JsonParser("""{
    "vmaz" : {
        "a" : {
            "b" : [ 
                {
                    "c" : {
                        "d" : [ 
                            {
                                "name" : "[Internal RAID10] 123",
                                "datastoreId" : "datastore-66",
                                "sizeInBytes" : 6443746134
                            }, 
                            {
                                "name" : "[Internal RAID10] 456",
                                "datastoreId" : "datastore-66",
                                "sizeInBytes" : 0
                            }, 
                            {
                                "name" : "[Internal RAID10] 789",
                                "datastoreId" : "datastore-66",
                                "sizeInBytes" : 25769803776
                            }, 
                            {
                                "name" : "[Internal RAID10] 111",
                                "datastoreId" : "datastore-66",
                                "sizeInBytes" : 0
                            }, 
                            {
                                "name" : "[Internal RAID10] 123",
                                "datastoreId" : "datastore-66",
                                "sizeInBytes" : 3615490048
                            }
                        ]
                    }
                }, 
                {
                    "c" : {
                        "d" : [ 
                            {
                                "name" : "11aa",
                                "datastoreId" : "datastore-66",
                                "sizeInBytes" : 6443746148
                            }, 
                            {
                                "name" : "22aa",
                                "datastoreId" : "datastore-66",
                                "sizeInBytes" : 0
                            }, 
                            {
                                "name" : "33aa",
                                "datastoreId" : "datastore-66",
                                "sizeInBytes" : 1006686208
                            }, 
                            {
                                "name" : "44aa",
                                "datastoreId" : "datastore-66",
                                "sizeInBytes" : 0
                            }, 
                            {
                                "name" : "55aa",
                                "datastoreId" : "datastore-66",
                                "sizeInBytes" : 413696
                            }
                        ]
                    }
                }, 
                {
                    "c" : {
                        "d" : [ 
                            {
                                "name" : "66aaa",
                                "datastoreId" : "datastore-66",
                                "sizeInBytes" : 6443746148
                            }, 
                            {
                                "name" : "77aaa",
                                "datastoreId" : "datastore-66",
                                "sizeInBytes" : 0
                            }, 
                            {
                                "name" : "88aaaa",
                                "datastoreId" : "datastore-66",
                                "sizeInBytes" : 15451869184
                            }, 
                            {
                                "name" : "999aaa",
                                "datastoreId" : "datastore-66",
                                "sizeInBytes" : 0
                            }, 
                            {
                                "name" : "10900assas",
                                "datastoreId" : "datastore-66",
                                "sizeInBytes" : 17190912
                            }
                        ]
                    }
                }
            ]
        }
    }
}""")

json.extract[Seq[Seq[String]]](fromPath("$.vm.a.b[*].c.d[*].name"))
```

I attempted other combinations and realized that it seems to be flattening it to a Seq[String]. I wouldn't want this but rather a Seq[Seq[String]] in order to preserve the alignment.

Could you please let me know if I might be missing a step here 

The extraction seems to be failing 

https://gist.github.com/conikeec/7354320

for both reading and writing
