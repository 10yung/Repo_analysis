Encountered the following FTBFS on Debian "unstable" _x86_64_:

~~~~
In file included from ip.c:44:
ip.c: In function 'mill_ipremote_':
dns/dns.h:1009:24: error: lvalue required as unary '&' operand
 1009 | #define dns_opts(...) (&dns_quietinit((struct dns_options)DNS_OPTS_INIT(__VA_ARGS__)))
      |                        ^
ip.c:268:31: note: in expansion of macro 'dns_opts'
  268 |         mill_dns_hints, NULL, dns_opts(), &rc);
      |                               ^~~~~~~~
~~~~
I get the following error when running the first code example.

```c
#define MILL_USE_PREFIX
#include <stdio.h>
#include <libmill.h>

mill_coroutine void worker(int count, char *text) {
	int i;
	for(i = 0; i != count; i++) {
		printf("%s\n", text);
		mill_msleep(mill_now() + 10);
	}
}

int main() {
	mill_go(worker(4, "a"));
	mill_go(worker(2, "b"));
	mill_go(worker(3, "c"));
	mill_msleep(mill_now() + 100);
	return 0;
}

```

compiling with
`clang -Wall -o main main.c -lmill`
tests/ip hangs with 100% cpu load
in libmill-git-2dd13ae at `make check`

```
$ ip addr show
1: lo: <LOOPBACK,UP,LOWER_UP> mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1000
    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00
    inet 127.0.0.1/8 scope host lo
       valid_lft forever preferred_lft forever
2: en: <BROADCAST,MULTICAST> mtu 1500 qdisc noop state DOWN group default qlen 1000
    link/ether xx:xx:xx:xx:xx:xx brd ff:ff:ff:ff:ff:ff
3: wl: <BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1500 qdisc htb state UP group default qlen 1000
    link/ether xx:xx:xx:xx:xx:xx brd ff:ff:ff:ff:ff:ff
    inet 192.168.2.102/24 brd 192.168.2.255 scope global noprefixroute wlp3s0
       valid_lft forever preferred_lft forever
```

```
$ sysctl -a -r 'net.ipv6.conf.*.disable_ipv6'
net.ipv6.conf.all.disable_ipv6 = 1
net.ipv6.conf.default.disable_ipv6 = 1
net.ipv6.conf.en.disable_ipv6 = 1
net.ipv6.conf.lo.disable_ipv6 = 1
net.ipv6.conf.wl.disable_ipv6 = 1
```
`tc.bash stop` did not help [stop traffic shaping]

```
$ diff ...
-3: wl: <BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1500 qdisc htb state UP group default qlen 1000
+3: wl: <BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1500 qdisc mq state UP group default qlen 1000
```
me clueless

but at least the tests should be wrapped in `timeout -k $sec $sec $cmd`
Missing documentation for multiple data protection between coroutines.
I'm writing a simple TCP proxy. It's a pleasure to do that with libmill. But there is a corner case. 

The design of proxy is rather straightforward. For every proxied connection I run something like this:
```
        cd = connection_to_client;
        rs  = connection_to_server;
	go(do_proxy_half_duplex(cd, rs, ch));
	go(do_proxy_half_duplex(rs, cd, ch));
```
Where the do_proxy_half_duplex is:

```
coroutine void do_proxy_half_duplex(int a, int b, chan ch)
{
	int err = 0;
	while (1) {
		char buf[BUF_SIZE];
		int more = 0;
		size_t nbytes = tcprecvpkt(a, buf, sizeof(buf), -1, &more);
		if (errno != 0) {
			err = errno;
			goto out;
		}

		size_t p = 0;
		while (p < nbytes) {
			size_t r = tcpsendpkt(b, &buf[p], nbytes - p, -1, more);
			if (errno != 0) {
				err = errno;
				goto out;
			}
			p += r;
		}
	}
out:
	if (err == ECONNRESET) {
		shutdown(a, SHUT_RDWR);
		shutdown(b, SHUT_RDWR);
	} else {
		shutdown(a, SHUT_RD);
		shutdown(b, SHUT_WR);
	}
	chs(ch, int, err);
}
```

It really can't be much simpler. One coroutine reads from the client and writes to the server. Another reads from the server and writes to the client. Tadam.

But there is an issue. Imagine a case that server does not do read() and client does fill the buffers with write().

In such case we have:
 * first coroutine is stuck on write(to_the_server)
 * second coroutine is stuck on read(from_the_server)

The problem? Client connection my ECONNRESET and go away and we won't notice!

Solution: I think the right solution is to start another coroutine that would wait on `fdwait(FDW_ERR)` and force `shutdown()` on both connections in case any ECONNRESETS.

Sadly, libmill doesn't allow me to run coroutine and hang on `fdwait(FDW_ERR)` only in current implementation.
If I read this code right:
https://github.com/sustrik/libmill/blob/2dd13ae8a1e4c9b5b89670f813a185dd51c43a66/tcp.c#L209

```
    int rc = connect(s, (struct sockaddr*)&addr, mill_iplen(addr));
    if(rc != 0) {
        mill_assert(rc == -1);
        if(errno != EINPROGRESS)
            return NULL;
        rc = fdwait(s, FDW_OUT, deadline);
        if(rc == 0) {
            errno = ETIMEDOUT;
            return NULL;
        }
```
On fdwait() timeout, the "s" never gets "closed()".
Hello,
Do you know about [Conan](https://github.com/conan-io/conan)?
[Conan](http://docs.conan.io/en/latest/) is modern dependency manager for C++. And will be great if your library will be available via package manager for other developers.

[Here](https://github.com/bincrafters/conan-templates) you can find example, how you can create package for the library. 

If you have any questions, just ask :-)
Hi
we write a go example in libmill and seem to consume lot of memory?

https://play.golang.org/p/8YDG82gqnF
hi,
i try to create simple actor model with libmill :). i found a way but im not sure is it right way to do. im currently passing response channel as parameter to request listener. Is there something wrong with  idea? i check memory is not groving and no message corruption in response...

thanks for advice ^^


```c
//============= types.h ==========

typedef struct{
    char *name;
    chan resp_ch;
} reqtype;

typedef struct  {
    int type;
    union{
        char *strval;
        int intval;
    }data;
} resptype;
```


```c
// ========== main.c =========
#include <errno.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include "libmill-1.18/libmill.h"
#include "types.h"

coroutine void doit(chan ch) {
    while (1) {
        reqtype req = chr(ch, reqtype);

        resptype resp ;
        resp.type = 0;
       // resp.data.strval = malloc(1024);
        
        char strval[40];
        strval[0]='\0';
        strcat(strval, "Hello ");
        strcat(strval, req.name);
        
        
        resp.data.strval = strval;
        
        chs(req.resp_ch, resptype, resp);
        //chdone(req.resp,resptype,NULL);
    }
}

resptype send_req(chan *ch_req,reqtype *req) {
    
    chan ch_resp = chmake(resptype, 0);
    req->resp_ch = ch_resp;
    chs(*ch_req, reqtype, *req);
    resptype resp = chr(ch_resp, resptype);
    chclose(ch_resp);
    req->resp_ch = NULL;
    return resp;
}


int main(int argc, char** argv) {

    int port = 5555;
    if (argc > 1)
        port = atoi(argv[1]);

    chan ch_req_listen = chmake(reqtype, 0);

    go(doit(ch_req_listen));

    for (int i = 0; i < 1000; i++) {
       

        char name[100];
        sprintf(name, "%d", i);
        
        
        reqtype req;
        req.name = name;

        resptype resp = send_req(&ch_req_listen,&req);
        
        printf("Response For %s = \"%d : %s\"\n", req.name, resp.type, resp.data.strval);

    }

    getc(stdin);


}
```

When invoke udpsend method, the error occurs. error code is 22, means invalid argument.