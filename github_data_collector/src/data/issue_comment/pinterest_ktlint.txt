Hi, I am having trouble with setting Android Studio so it exactly follows formatting applied by ktlint.
The style is set to official kotlin one.
<img width="1232" alt="Screenshot 2020-01-17 at 16 10 36" src="https://user-images.githubusercontent.com/29818981/72622641-ecffca80-3943-11ea-999a-9c0f903d31c1.png">

I've done everything as described in your readme file (try to apply settings via --apply-to-idea-project Option1 , and also Option 2 and 3https://github.com/pinterest/ktlint#option-3

I guess the problem could be probably solved by applying some settings into .editorconfig file,
but I am not sure what property can cause it.
I had the same inconsistency with max line lenght property. Adding `max_line_length=100` did solved the issue.

Screenshots before formatting
<img width="828" alt="Screenshot 2020-01-17 at 16 08 01" src="https://user-images.githubusercontent.com/29818981/72622526-ac07b600-3943-11ea-8994-23c2c4fcfb7f.png">

after formatting via Android Studio:
<img width="874" alt="Screenshot 2020-01-17 at 16 08 11" src="https://user-images.githubusercontent.com/29818981/72622578-ca6db180-3943-11ea-9d72-14bb718ec095.png">

Any suggestions?

ktlint version: **0.32.0**



See: https://github.com/gradle/wrapper-validation-action
### Source code

```kt
val y = 5
val x =
  """
    $y
  """.trimIndent()
```

### Expected behavior

`ktlint --experimental --format` is a no-op after at most one invocation.

### Actual behavior

ktlint always adds 6 additional space characters in front of `$y`, i.e. running ktlint `n` times will prepend `6*n` spaces to `$y`.
If a code snippet contains a multi-line type parameter list, ktlint may produce contradictory errors with the experimental indentation rule.

E.g. for this code snippet
```kotlin
object TestCase {
  inline fun <
    T1,
    T2,
    T3> create(
      t1: T1,
      t2: T2,
      t3: T3
  ) {
    // do things
  }
}
```

... ktlint produces this errors for each function parameter line (t1, t2, t3):
> Unexpected indentation (6) (should be 4)

If the indentation on the function parameter lines is "corrected" like so
```kotlin
object TestCase {
  inline fun <
    T1,
    T2,
    T3> create(
    t1: T1,
    t2: T2,
    t3: T3
  ) {
    // do things
  }
}
```

... ktlint is still not satisfied, now producing this error on each of those lines:
> Unexpected indentation (expected 6, actual 4)

https://repo1.maven.org/maven2/com/pinterest/ktlint/0.36.0/ktlint-0.36.0.pom

Is `junit:junit:4.12` really required as a runtime dependency of `ktlint`?

The list of dependencies is as follows:

```
\--- com.pinterest:ktlint:0.36.0
     +--- com.pinterest.ktlint:ktlint-core:0.36.0
     |    +--- org.jetbrains.kotlin:kotlin-compiler-embeddable:1.3.60
     |    |    +--- org.jetbrains.kotlin:kotlin-stdlib:1.3.60
     |    |    |    +--- org.jetbrains.kotlin:kotlin-stdlib-common:1.3.60
     |    |    |    \--- org.jetbrains:annotations:13.0
     |    |    +--- org.jetbrains.kotlin:kotlin-script-runtime:1.3.60
     |    |    +--- org.jetbrains.kotlin:kotlin-reflect:1.3.60
     |    |    |    \--- org.jetbrains.kotlin:kotlin-stdlib:1.3.60 (*)
     |    |    +--- org.jetbrains.kotlin:kotlin-daemon-embeddable:1.3.60
     |    |    \--- org.jetbrains.intellij.deps:trove4j:1.0.20181211
     |    +--- org.jetbrains.kotlin:kotlin-stdlib:1.3.60 (*)
     |    \--- org.ec4j.core:ec4j-core:0.2.0
     +--- com.pinterest.ktlint:ktlint-reporter-checkstyle:0.36.0
     |    +--- com.pinterest.ktlint:ktlint-core:0.36.0 (*)
     |    \--- org.jetbrains.kotlin:kotlin-stdlib:1.3.60 (*)
     +--- com.pinterest.ktlint:ktlint-reporter-json:0.36.0
     |    +--- com.pinterest.ktlint:ktlint-core:0.36.0 (*)
     |    \--- org.jetbrains.kotlin:kotlin-stdlib:1.3.60 (*)
     +--- com.pinterest.ktlint:ktlint-reporter-html:0.36.0
     |    +--- com.pinterest.ktlint:ktlint-core:0.36.0 (*)
     |    \--- org.jetbrains.kotlin:kotlin-stdlib:1.3.60 (*)
     +--- com.pinterest.ktlint:ktlint-reporter-plain:0.36.0
     |    +--- com.pinterest.ktlint:ktlint-core:0.36.0 (*)
     |    \--- org.jetbrains.kotlin:kotlin-stdlib:1.3.60 (*)
     +--- com.pinterest.ktlint:ktlint-ruleset-experimental:0.36.0
     |    +--- com.pinterest.ktlint:ktlint-core:0.36.0 (*)
     |    +--- com.pinterest.ktlint:ktlint-test:0.36.0
     |    |    +--- com.pinterest.ktlint:ktlint-core:0.36.0 (*)
     |    |    +--- org.jetbrains.kotlin:kotlin-stdlib:1.3.60 (*)
     |    |    +--- org.assertj:assertj-core:3.12.2
     |    |    \--- junit:junit:4.12
     |    |         \--- org.hamcrest:hamcrest-core:1.3
     |    \--- org.jetbrains.kotlin:kotlin-stdlib:1.3.60 (*)
     +--- com.pinterest.ktlint:ktlint-ruleset-standard:0.36.0
     |    +--- com.pinterest.ktlint:ktlint-core:0.36.0 (*)
     |    +--- com.pinterest.ktlint:ktlint-test:0.36.0 (*)
     |    \--- org.jetbrains.kotlin:kotlin-stdlib:1.3.60 (*)
     +--- com.pinterest.ktlint:ktlint-test:0.36.0 (*)
     +--- org.jetbrains.kotlin:kotlin-stdlib:1.3.60 (*)
     +--- org.jetbrains.kotlin:kotlin-compiler-embeddable:1.3.60 (*)
     +--- com.github.shyiko.klob:klob:0.2.1
     \--- info.picocli:picocli:3.9.6
```
![delete](https://user-images.githubusercontent.com/4056983/71226415-b750cd00-2316-11ea-9a9a-e9edbf9add57.png)

> 

> `git commit -m "my comment"` it will delete all my files leaving nothing to push
Consider the following example:

```kotlin
class Foo @JvmOverloads @SuppressLint("CheckResult") constructor(...)
```

There alternative is basically this

```kotlin
class Foo
@JvmOverloads
@SuppressLint("CheckResult")
constructor(...)
```

Which I'm not sure is better. From `experimental:annotation`
I've got a kotlin project in which it's common practice to create files which hold multiple classes. In each of these cases we name the file with a common suffix.

A simple example of this, using the suffix "Things" would be something like:

```kotlin
// FooThings.kt

data class Foo(...)

data class Bar(...)
```

The problem is that we trip the `filename` rule when there's only one such class in one of these files.

Based on this comment - https://github.com/pinterest/ktlint/issues/237#issuecomment-520032996 - I was hopeful I could add an `.editorconfig` rule like so to disable the `filename` error:

```editorconfig
[**/*Things.kt]
disabled_rules = filename
```

However, this doesn't work.
Would it be possible that ktlint respect the @formatter:on|off ?
It could check the content within the tags, but it should not format it.
The fix for #506 in https://github.com/pinterest/ktlint/commit/b997561532fffbc5c37b27e15aec9618c02c560d hardcoded the `org.gradle.kotlin.dsl.provideDelegate` import but `provideDelegate` operator functions aren't limited to `org.gradle.kotlin.dsl` and could be present in any Kotlin library.

See https://kotlinlang.org/docs/reference/delegated-properties.html#providing-a-delegate-since-11

The fix should be extended to any import of a `provideDelegate` operator function.
