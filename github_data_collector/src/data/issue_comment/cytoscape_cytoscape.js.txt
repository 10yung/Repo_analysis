<!--
Is your issue related solely to the core library, or is your issue related to an extension?  An extension issue must be filed in the extension's repo.
-->

**Issue type**

<!--
Are you submitting a bug report or a feature request?

When submitting a bug report, check the following:
- The report has a descriptive title.
- The bug still exists in most recent version of the library.

A request for help or a requests for a how-to should be directed to Stack Overflow:
http://stackoverflow.com/questions/tagged/cytoscape.js
-->

<!-- Delete one option -->
Feature request

<!-- FEATURE REQUEST : Delete if reporting a bug -->

**Description of new feature**

<!-- What should the new feature do?  For visual features, include an image/mockup of the expected output. -->
This is more of a question than a feature request.

I have many graphs that a user can switch between, each with data updated through a websocket. When the user goes from Graph A to Graph B, then back to Graph A, I want the nodes in the graph to be in the same position as was calculated before. Is there anyway to keep the physics simulation in the layout from completely randomizing the location of every node without having multiple Cytoscape objects in memory? Perhaps maybe giving some sort of seed?

**Motivation for new feature**
With graphs that are visited many times in a short time span, it would be nice to not have to figure out where each node ends up with every iteration

<!-- Describe your use case for this new feature. -->


<!-- END FEATURE REQUEST -->

Feature request

Is any work being done to add support for hypergraphs?
Currently ```cy.add``` method works with cy element collections and with element definition arrays.

It would be cool to make this method work with element definition iterators as well to get users rid from obligatory caching of all element definitions into temporary array before adding them to the graph.

It can also be handy for users to be able to work with iterators of single cy elements and asynchronous iterators.
Backport to 3.11.x : Outside-to-line-or-label intersects towards the centre of label rather than the centre of the node #2597
Backport to 3.11.x : A label may be cut off if it contains two or more whitespace characters in a row #2596
**Issue type**
Bug report

**Environment info**
- Cytoscape.js version : latest
- Browser/Node.js & version : latest Chrome

**Current (buggy) behaviour**
I am currently writing a layout algorithm that extensively uses [edge endpoints](https://js.cytoscape.org/#style/edge-endpoints). When I specify values for both source and target endpoint of an edge then there is no problem. However, if only one of them is specified, I expect the other endpoint to continue its default `outside-to-node` rule. Meaning it should point towards the node’s center and gets placed on the outside of the node’s shape. But instead, it starts to point a bit off-center.

Here is a picture demonstrating the issue. I specified target endpoint of the edge going from n1 to n2 as `"target-endpoint": "30% 50%"`.
![Screenshot from 2020-01-08 16-03-21](https://user-images.githubusercontent.com/15351692/71980149-6e62a900-3230-11ea-8bd9-41489b2c3c5a.png)


**Desired behaviour**
It should look like this. I can workaround this issue using `"source-endpoint": "0 0"` but it looks bad when compound nodes are involved. 
![Screenshot from 2020-01-08 15-59-27](https://user-images.githubusercontent.com/15351692/71979904-ea102600-322f-11ea-910c-027e9838bc13.png)

**Minimum steps to reproduce**
[Here](https://codesandbox.io/s/nostalgic-dream-88h4e) is the code I wrote to demonstrate this bug. 






<!--
Is your issue related solely to the core library, or is your issue related to an extension?  An extension issue must be filed in the extension's repo.
-->

**Issue type**

<!--
Are you submitting a bug report or a feature request?

When submitting a bug report, check the following:
- The report has a descriptive title.
- The bug still exists in most recent version of the library.

A request for help or a requests for a how-to should be directed to Stack Overflow:
http://stackoverflow.com/questions/tagged/cytoscape.js
-->

<!-- Delete one option -->

Feature request





<!-- FEATURE REQUEST : Delete if reporting a bug -->

**Description of new feature**

<!-- What should the new feature do?  For visual features, include an image/mockup of the expected output. -->

There is a function, `ele.pannable()`, which is used to change the pannable state of an element or to get the pannable state of an element.  While `ele.pannable()` is analogous to similar functions, like `ele.selectable()`, there is no `pannable` field in [the element JSON](https://js.cytoscape.org/#notation/elements-json).

- [ ] `ele.json()` should support getting and setting `pannable`.
- [ ] `ele.jsons()` should support getting and setting `pannable`.
- [ ] `cy.json()` should support getting and setting `pannable`.
- [ ] `cytoscape(options)` should support specifying `pannable` under the `elements`.

**Motivation for new feature**

<!-- Describe your use case for this new feature. -->

- Having a `pannable` field makes this feature more consistent with other toggle states in the library. 
- The `pannable` state can be specified at element creation.
- The `pannable` state is serialisable via `ele.json()` etc.


<!-- END FEATURE REQUEST -->

Hi there :)

I want to make something like this: 
```ts
        cy.on('position', 'edge', e => {
            console.log('edge; ' + edge.midpoint().x);
        });
```
I never get any log statements on any graph I tried.

I currently use the following workaround:
```ts
        cy.on('position', 'node', e => {
            (e.target as cytoscape.NodeSingular)
                .connectedEdges()
                .forEach(edge => {
                        // timeout to wait until the new position of the edge has been correctly calculated
                        setTimeout(() => {
                            console.log('edge; ' + edge.midpoint().x);
                        }, 10);
                    }
                });
        });
```
Poor animation frame rate on a top end machine.

Bug report

- Cytoscape.js version : 3.12.1
- Browser/Node.js & version : Chrome 78

I have 6 nodes and have a simple animation that centers the node that I click on using the following code:

```
		cy.on("tap", "node", (event) => {
			cy.animate({
				easing: "ease",
				duration: 1000,
				center: {
					eles: event.target
				},
			})
		})
```

The framerate for said animation is poor. Its very poor. There is noticeable tearing, and I am using a high end gaming machine. I would not expect such a poor framerate for such a basic animation, so I thought there must be something wrong with the way the core lib calls requestAnimationFrame...

A simple pan around the network with a mouse grab demonstrates how canvas panning is updated at a high framerate. What is the animation loop doing that a manual pan is not?

**Minimum steps to reproduce**

http://jsbin.com/fiqugiq

Insert the code snippet above at the end of the js in the jsbin provided, click on a node and notice the poor framerate of the transition.

Hello Everyone,

I am looking for a beginner-friendly tutorial for visualizing a network given a json-file that describes the network structure (nodes and edges).

As I am new in the javascript community, I need a tutorial that also provides me with information about 

- structure of the project folder
- generating the html
- generating the js-code


I hope there is a good tutorial that you can recommend
Lazloo