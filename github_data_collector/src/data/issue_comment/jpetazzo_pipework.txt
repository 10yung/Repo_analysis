I am trying to pass the `-H hostnametest` parameter to `dhclient` with `dhclient:-H hostnametest` but I am getting a `"hostnametest" is invalid lladdr` error.

Any ideas?

Edit: Options need to be encased in doublequotes: `dhclient:"-H hostnametest"` .
Documentation should be updated to reflect this.
Thank you for creating pipework. It's very cool and very easy to use. 
However, I have a problem with it recently and I hope I can find a solution for it.
After upgrading the kernel version of my ubuntu server to 5.0.0-20, I added an IP with the following command to my container:  
pipework br0 -i eth1 CONTAINER 192.168.1.25/29@192.168.1.1

It worked fine but when I stopped the container, its network was not destroyed completely. I can ping the IP . I tried to find the interface on the host or on the container and remove it manually  but I could not find anything. After restarting the server the ping was gone and the problem was solved.
Is there a way to remove the IP‌ manually from the container (without container termination)? or do you have any idea for solving the issue?

How do I combine get dhclient to use the DHCP server-provided default route (latest version as of Aug '17)?

I can do the following to assign an IP address with all traffic flowing via 10.234.2.47, but then the address has to be static:
sudo pipework/pipework ens1f1 vxlab-red 10.234.2.47/24@10.234.2.254

Or I can do the following to assign an IP address via our local DHCP server, but then there is no default route (see below):
sudo pipework/pipework ens1f1 -i eth0 vxlab-red dhcp:-f U:red1

root@864d3754976a:~# route -n
Kernel IP routing table
Destination     Gateway         Genmask         Flags Metric Ref    Use Iface
10.42.1.0       10.234.2.49     255.255.255.0   UG    0      0        0 eth0
10.234.2.0      0.0.0.0         255.255.255.0   U     0      0        0 eth0

(For normal clients such as the docker host, dhclient shows an additional entry
0.0.0.0         10.234.2.254    0.0.0.0         UG    100    0        0 ens1f1
)
Hi, this change should work much better than [macvlan_mode](https://github.com/jpetazzo/pipework/pull/221), please review the changes.

The new option for setting upper interface was added, example usage:
```
pipework br63@bond0 -i eth0 <guest> 1.2.3.4/24@1.2.3.1 @63
```
This cmd will create the next chain of devices:
```
bond0 (top interface)
    \
    bond0.63 (vlan)
       \
       br63 (bridge)
          \
          <your container veth>
```
If vlan option is not set, it will add `bond0` directly to the bridge
Hi,

I'm trying to assign IP (which is obtained from DHCP server) to a docker container (actually a Gitlab container).
I used the command `sudo pipework/pipework p13p1 gitlab-instance udhcpc-f 9e:01:b2:2b:08:62`.
But it keeps showing the message:
```
udhcpc (v1.21.1) started                                                                         
SIOCSIFFLAGS: Device or resource busy                                                                           
Sending discover...                                                                                          
udhcpc: sendto: Network is down                                                            
Read error: Network is down, reopening socket                          
Sending discover...                                                    
udhcpc: sendto: Network is down                                                                                                                                                                         
Read error: Network is down, reopening socket                                                                                                                                                                    
Sending discover...                                                                                                                                                                                               
udhcpc: sendto: Network is down                                                                                                                                                                                
Read error: Network is down, reopening socket                                                                                                                                                                       
/etc/udhcpc/default.script: Lease failed:                                                                                                                                                                      
Read error: Network is down, reopening socket                       
Read error: Network is down, reopening socket                                                                                                                                                           
Read error: Network is down, reopening socket                                                                                                                                                                    
Read error: Network is down, reopening socket                                                                                                                                                                     
Read error: Network is down, reopening socket                                                                                                                                                                  
Read error: Network is down, reopening socket                                                                                                                                                                       
Read error: Network is down, reopening socket                                                                                                                                                                  
Sending discover...                                                                                                  
udhcpc: sendto: Network is down
Read error: Network is down, reopening socket
Sending discover...
udhcpc: sendto: Network is down
Read error: Network is down, reopening socket
Sending discover...
udhcpc: sendto: Network is down
Read error: Network is down, reopening socket
```
This is probably related to https://github.com/jpetazzo/pipework/issues/163
But I still can't figure out how this works.
Any one encounter the same situation?

Thank you!
hello, thank you for pipework

I`ve been struggling hard trying to get a container to have public ip address assigned by dhcp

(running kali linux on virtualbox, network is that III type and promisc mode allow all is already set)

I´m following these instructions:
https://stackoverflow.com/questions/27516284/is-it-possible-to-assign-a-static-public-ip-to-a-docker-container

`commands:

ip link add dev macvlan0 link eth0 type macvlan #macvlan0 being the name of the v-card (lol)

Connect container to virtual network interface with pipework:

see https://github.com/jpetazzo/pipework/#connect-a-container-to-a-local-physical-interface

commands:

pipework macvlan0 $($containerid) dhcp`

This does not work, cause I get only an 172.x.x ip which is not accesible from external networks

I`m trying to get an external ip address assigned to the container, just like a vm machine does in bridge mode. Is that possible? Please help, I've been stuck on that for several days now

thank you
best regards



I have tried to add two network interfaces to a container, but, for the second, I received the error:
RTNETLINK answers file exists

Both the interfaces I try to add are real and I used the command:
pipework eth1 dockerID 10.0.0.1/24
pipework eth2 dockerID 10.0.0.2/24

Thanks in advance
We're using pipework with docker and running it from our systemd service unit, which starts the container.
To get it work we had to add a sleep 2 before the arping is done, in this line:

https://github.com/jpetazzo/pipework/blob/ae42f1b5fef82b3bc23fe93c95c345e7af65fef3/pipework#L455
Looks like udhcp does not create a pid file (at least on Ubuntu 14.04). 

I run latest script version from Github:


    /opt/pipework.sh int-br docker.registry udhcpc 00:d0:11:11:12:12

This command returns non-zero exit code, because
```
+ ip netns exec 28712 ip link set dev eth1 address 00:d0:11:11:12:12
+ case "$DHCP_CLIENT" in
+ DHCP_Q=-q
+ '[' '' ']'
+ ip netns exec 28712 udhcpc -qi eth1 -x hostname:docker.registry -p /var/run/udhcpc.docker.registry.pid
udhcpc (v1.22.1) started
/etc/resolvconf/update.d/libc: Warning: /etc/resolv.conf is not a symbolic link to /run/resolvconf/resolv.conf
Sending discover...
Sending select for 10.99.16.32...
Lease of 10.1.1.32 obtained, lease time 1576800
/etc/resolvconf/update.d/libc: Warning: /etc/resolv.conf is not a symbolic link to /run/resolvconf/resolv.conf
+ '[' '!' '' ']'
+ rm /var/run/udhcpc.docker.registry.pid
rm: cannot remove ‘/var/run/udhcpc.docker.registry.pid’: No such file or directory
```
Does anybody else see this behaviour?
with the current new release of docker 1.13, the default Policy of iptables changes from `FORWARD` to `DROP` (see: docker/docker#28257)

pipework won't be successful anymore to assign valid global IPs to docker containers, as all packets get dropped by iptables.