**Is your feature request related to a problem? Please describe.**

Based on #3136: We should add also a `RadioButton` Windows 10 style (inspired from UWP).

![2020-01-06_22h59_07](https://user-images.githubusercontent.com/658431/71852027-1fa1fb80-30d8-11ea-8f36-f20fc35a8dac.png)

when using TiltBehavior, color and Theme change does not work
![gif07](https://user-images.githubusercontent.com/5471789/71559234-0f48ab80-2a5c-11ea-9eac-dbfc7e4adcc5.gif)

Does something like a timespan up/down exist in MahApps Metro? I've tried NumericUpDown control but that only allows a double value. And the TimePicker control is... a time picker, great if you want to choose a day time. However I would need the user to choose a value within a specific time range (more like within a duration) only.

The extended toolkit has such a control: https://github.com/xceedsoftware/wpftoolkit/blob/1e0b826e1fca8cdb2bb4640194c906ac23e53c2b/ExtendedWPFToolkitSolution/Src/Xceed.Wpf.Toolkit/TimeSpanUpDown/Implementation/TimeSpanUpDown.cs
**Is your feature request related to a problem? Please describe.**
I ran into the same issue as the OP in #2302 

While i did find a workaround to link up TabItems in a mvvm friendly way, getting a solution which is async+await friendly is more of an issue.

**Describe the solution you'd like**
Ideally https://github.com/MahApps/MahApps.Metro/blob/71d455826f77d37ad0aa33a922e2b5394406fa52/src/MahApps.Metro/Controls/MetroTabControl.cs#L88 would be `public delegate Task ...`

... so resulting event handlers can be executed asynchronously. That way a viewModel could contain method signatures like `Task TryCloseTabAsync` and do non blocking calls and set the close args onec the async call is done.

The current state is very annoying if you try to delegate close permission handling to the viewModel, since you have to do a blocking call on the viewModel of a tab in the event handler before setting the args to Canceled.

**Closed Issues**
#2302
**Describe the changes you have made to improve this project**
Introduce a new `ColorCanvas` - `Control`. With this `Control` we can build a `ColorPicker` in the future.

Still to do:
- [ ] improve eyepicker
- [ ] Implement a  `ColorPalette` 
- [ ] Create a `ColorPickerComboBox`

**Unit test**
None until now

**Additional context**

Add any other context or screenshots about the feature request here.
![image](https://user-images.githubusercontent.com/47110241/70389177-285dbf80-19bc-11ea-9245-616639473bda.png)


**Closed Issues**
Part solution for #3520 
I cannot use CodedUI to create a test on a window that has multiple ToggleSwitch controls.
The automation ID for every toggle control is always "Switch", even though I have set up my own Automation.AutomationID in my XAML. Technically the problem, exists for a single ToggleSwitch too.

I can record commands to turn on/off the different toggleswitches, but on playback, of course, it only ever finds the first one.

**Expected behavior**
I expected my automation ID's to be used for the controls. I need to be able to turn the toggles on/off and be able to test against the control's state of "Pressed".

**Screenshots**
![Clip2](https://user-images.githubusercontent.com/18488212/68786467-d3719800-060d-11ea-83c8-1cdf4f4c2c34.png)

**Environment(please complete the following information):**
 - MahApps.Metro version v1.6.5
 - OS: Win10
 - Visual Studio 2017
 - .NET Framework 4.52
**Describe the bug**
When running ShowModalInputExternal, or any type of MahApps external modal, from a button click the PowerShell process will crash. I know an earlier alpha from ~October 28 the external modal worked, but the OK and Cancel buttons were missing their styles.

(This works perfectly on 1.6.5, though.)

**To Reproduce**
Steps to reproduce the behavior:
1. Download the repo. linked below.
2. Right-click "Run Me.ps1", click "Run with PowerShell"
3. Click the "Open external input modal" button in the window.
4. PowerShell will crash along with the window...

**Expected behavior**
The dialog should be appearing above the main window.

**Environment**
 - MahApps.Metro version 2.0.0
 - Windows 10 (1903)
 - PowerShell 5 (5.1.18362.145)
 - Visual Studio 2019 (16.3.8)
 - .NET Core 3

**Repo**
https://github.com/slashpowered/PS-MahApps
I'm migrating my .NET 4.7.2 WPF application using MahApps.Metro 1.6.5 to .NET Core 3.0 using MahApp.Metro 2.0.0-alpha0531 and some of my styles that were working fine simply break at runtime with the newest version.

- `MetroListBox` style is not referenced anymore thus break the styling of my ListBox.
- The same goes for `MetroListBoxItem`.
- `AccentedSquareButtonStyle` style does not exist anymore and break the styling of my Buttons.
- `SearchMetroTextBox` style does not exist anymore and break the styling of my TextBox.

I've carefullly watched the documentation and searched for those missing styles but couldn't find any equivalent/migration guide for these particular components.
**Description**

1. Add DataGrid
2. Set as ItemsSource ObservableCollection with records which implement INotifyDataErrorInfo and INotifyPropertyChanged and with errors after initialization
3. Run app
4. Textbox has red border but icon is missing (strange but I can live with that)
5. Double click on cell (icon in row header is shown)
6. fix value and hit enter
7. Textbox hasn't got red border (PASS) but icon with tooltip with original error is still there (FAIL)

Am I implemented it incorrectly? Or it's an issue in header style?

**Environment**
- .NET Framework 4.7.2
- Windows 10 1903

**Nuget libraries**
- MahApps.Metro 1.6.5
- FluentValidation 8.5.1 (for validation)
- Fody 6.0.4
- PropertyChanged.Fody 3.1.3 (for autiomatic notifications)
- Caliburn.Micro 3.2.0 (only base class)

**Code**
```c#
using Caliburn.Micro;
using FluentValidation;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Linq;
using System.Runtime.CompilerServices;
namespace WpfDataGridValidation
{
public class MainWindowViewModel : Conductor<IScreen>.Collection.AllActive
{
    public MainWindowViewModel()
    {
        var validator = new MyRecordValidator();
        var record = new MyRecord(validator);
        Records = new ObservableCollection<MyRecord>(Enumerable.Repeat(record, 1));
    }

    public ObservableCollection<MyRecord> Records { get; set; }
}

public class MyRecord : Caliburn.Micro.PropertyChangedBase, INotifyDataErrorInfo
{
    private readonly FluentValidation.AbstractValidator<MyRecord> _validator;

    public MyRecord(FluentValidation.AbstractValidator<MyRecord> validator)
    {
        _validator = validator;
        Validate();
    }

    public event EventHandler<DataErrorsChangedEventArgs> ErrorsChanged;

    public bool HasErrors => Errors.Any();

    public IEnumerable GetErrors(string propertyName)
    {
        if (string.IsNullOrEmpty(propertyName))
            return null;
        if (Errors.TryGetValue(propertyName, out List<string> value))
            return value;
        return Enumerable.Empty<string>();
    }

    private void Validate()
    {
        if (_validator == null)
            return;
        var previousKeys = Errors.Select(x => x.Key).ToList();
        Errors = _validator.Validate(this)
            .Errors
            .GroupBy(x => x.PropertyName)
            .ToDictionary(x => x.Key, x => x.Select(y => y.ErrorMessage).ToList());
        if (ErrorsChanged == null)
            return;
        foreach (var key in Errors.Keys)
            ErrorsChanged.Invoke(this, new DataErrorsChangedEventArgs(key));
        foreach (var key in previousKeys.Except(Errors.Select(x => x.Key)))
            ErrorsChanged.Invoke(this, new DataErrorsChangedEventArgs(key));
    }

    public override void NotifyOfPropertyChange([CallerMemberName] string propertyName = null)
    {
        if (propertyName != null && propertyName != nameof(Errors) && propertyName != nameof(HasErrors))
            Validate();
        base.NotifyOfPropertyChange(propertyName);
    }

    public string Name { get; set; }
    public Dictionary<string, List<string>> Errors { get; private set; } = new Dictionary<string, List<string>>();
}

public class MyRecordValidator : FluentValidation.AbstractValidator<MyRecord>
{
    public MyRecordValidator()
    {
        RuleFor(x => x.Name).NotEmpty();
    }
}
}
```
**MainWindow view**
```xaml
<Window x:Class="WpfDataGridValidation.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:local="clr-namespace:WpfDataGridValidation"
        mc:Ignorable="d"
        Title="MainWindow" Height="450" Width="800">
    <Grid>
        <DataGrid
            x:Name="dataGrid"
            ItemsSource="{Binding Records}"
            CanUserAddRows="False"
            CanUserSortColumns="False"
            CanUserResizeColumns="False"
            CanUserResizeRows="False"
            CanUserReorderColumns="False"    
            SelectionMode="Single"
            SelectionUnit="Cell"
            AutoGenerateColumns="False"
            VerticalAlignment="Top"
            HorizontalAlignment="Left"
            GridLinesVisibility="All"
            VirtualizingStackPanel.VirtualizationMode="Standard"
            HeadersVisibility="All"
            RowHeaderWidth="40"
            >
            <DataGrid.Columns>
                <DataGridTextColumn Header="Name" Binding="{Binding Name, NotifyOnSourceUpdated=True, NotifyOnTargetUpdated=True, NotifyOnValidationError=True,ValidatesOnNotifyDataErrors=True}"/>
            </DataGrid.Columns>
        </DataGrid>
    </Grid>
</Window>
```
**MainWindow bode behind**
```c#
using System.Windows;

namespace WpfDataGridValidation
{
    public partial class MainWindow : Window
    {
        public MainWindow()
        {
            InitializeComponent();
            DataContext = new MainWindowViewModel();
        }
    }
}
```
**App.xaml**
```xaml
<Application x:Class="WpfDataGridValidation.App"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:local="clr-namespace:WpfDataGridValidation"
             StartupUri="MainWindow.xaml">
    <Application.Resources>
        <ResourceDictionary>
            <ResourceDictionary.MergedDictionaries>
                <ResourceDictionary Source="pack://application:,,,/MahApps.Metro;component/Styles/Controls.xaml" />
                <ResourceDictionary Source="pack://application:,,,/MahApps.Metro;component/Styles/Fonts.xaml" />
                <ResourceDictionary Source="pack://application:,,,/MahApps.Metro;component/Styles/Colors.xaml" />
                <ResourceDictionary Source="pack://application:,,,/MahApps.Metro;component/Styles/Accents/Green.xaml" />
                <ResourceDictionary Source="pack://application:,,,/MahApps.Metro;component/Styles/Accents/BaseLight.xaml" />
            </ResourceDictionary.MergedDictionaries>
        </ResourceDictionary>
    </Application.Resources>
</Application>
```

I am using MahApps.Metro, v1.6.5.

MetroWindow with `mah:DialogParticipation.Register="{Binding}"` doesn't get disposed after the ShowDialog() call.

Example usage: I have two windows - MainWindow and MyDialogView. Each has it's own view model - MainWindowViewModel and MyDialogViewModel. 
MainWindowViewModel contains a OpenDialogCommand, which opens the dialog view.
MyDialogViewModel contains a CloseCommand, which raises an OnClose event. The MainWindowViewModel handles the OnClose event and closes the dialog window.

For easier debugging I instantiate a large byte array in the MyDialogViewModel constructor. If I open and close the dialog window multiple times the memory usage only increases (by 1GB). But if I remove the DialogParticipation.Register parameter, then the memory usage gets decreased when the garbage collector runs.

I prepared an example [here](https://github.com/kmetic/MahAppsMemoryLeak)
