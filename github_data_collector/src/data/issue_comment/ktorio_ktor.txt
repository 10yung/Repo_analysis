**Ktor Version and Engine Used (client or server and name)**
    implementation("io.ktor:ktor-client-apache:1.3.0")
    implementation("io.ktor:ktor-client-jackson:1.3.0")
    implementation("io.ktor:ktor-client-logging-jvm:1.3.0")

**Describe the bug**
When using the ktor client to make calls to external services and receiving a non-200 response trying to receive the body results in an exception. 

When calling an external service we receive a non-200 error code with a body response detailing why. We receive  the status code and try to log the body of the failed request for additional information. 
We log the results by calling httpResponse.readText(Charsets.UTF_8), however instead of the body text we receive an exception ClientRequestException. 

io.ktor.client.features.DefaultResponseValidationKt$addDefaultResponseValidation$1$1.invokeSuspend(DefaultResponseValidation.kt:35)
	at io.ktor.client.features.DefaultResponseValidationKt$addDefaultResponseValidation$1$1.invoke(DefaultResponseValidation.kt)
	at io.ktor.client.features.HttpCallValidator.validateResponse(HttpCallValidator.kt:35)
	at io.ktor.client.features.HttpCallValidator$Companion$install$2.invokeSuspend(HttpCallValidator.kt:96)
	at io.ktor.client.features.HttpCallValidator$Companion$install$2.invoke(HttpCallValidator.kt)
	at io.ktor.util.pipeline.SuspendFunctionGun.loop(PipelineContext.kt:273)
	at io.ktor.util.pipeline.SuspendFunctionGun.proceed(PipelineContext.kt:141)
	at io.ktor.util.pipeline.SuspendFunctionGun.execute(PipelineContext.kt:161)
	at io.ktor.util.pipeline.Pipeline.execute(Pipeline.kt:27)
	at io.ktor.client.call.HttpClientCall.receive(HttpClientCall.kt:75)
	at io.ktor.client.statement.HttpStatementKt.readText(HttpStatement.kt:158)
	at com.myapp.repository.Person.search(Person.kt:93)

It looks like the DefaultResponseValidation.kt
HttpClientConfig<*>.addDefaultResponseValidation()
throws an exception if the status is not 200. 

**To Reproduce**
Steps to reproduce the behavior:

 val httpResponse = client.getClient().get<HttpResponse>(searchURI) {
	header("X-Expand-Results", "true")
	header("X-Auth-code", authToken)
}

return when (val httpStatusCode = httpResponse.status) {
	HttpStatusCode.OK -> {
		httpResponse.receive<Person>()
	}
	HttpStatusCode.NotFound -> {
		logger.debug("Person search returned a 404 status")
		/*return*/ null
	}
	else -> {
		val msg = "Person search returned a non-OK status code $httpStatusCode " +
			"with text ${httpResponse.readText(Charsets.UTF_8)}"
		logger.error { msg }
		throw AppException(StatusCode.InternalServerError, msg)
	}
}


**Expected behavior**
We already know the response is a a non-200 and should be able to log the body text along with the response. 

If this is expected and there is a separate way to receive the body of a non-200 response please let us know. 

**Screenshots**
If applicable, add screenshots to help explain your problem.

**Subsystem**
OkHttp client.

**Motivation**
The initial problem is mentioned in https://github.com/ktorio/ktor/issues/1262.

**Solution**
Add `onClosing()` handler to `OkHttpWebsocketSession.kt`.


**Subsystem**
Client 

**Is your feature request related to a problem? Please describe.**
I want to make http requests to XML API.

**Describe the solution you'd like**
Create `ktor-client-xml` like [ktor-client-json](https://github.com/ktorio/ktor/tree/12c1bdf547b193726a7d7df1aeee424eb81da98e/ktor-client/ktor-client-features/ktor-client-json) to (de-) serialize  request/response.

**Motivation to include to ktor**
XML very popular format for data transferring.

**Ktor Version and Engine Used (client or server and name)**
This occurred in a client application upgrading from ktor 1.2.6 to 1.3.0.
Modules used: `ktor-client-okhttp`, `ktor-client-core`, `ktor-client-serialization-jvm`.

**Describe the bug**
In order to upload files, `body = LocalFileContent(File("build.gradle"))` was used to specify a body for requests, as suggested by [quick start guide for clients](https://ktor.io/clients/http-client/quick-start/requests.html).
 In `1.2.6`, it could be imported using

> import io.ktor.http.content.LocalFileContent

 but after setting the ktor version to `1.3.0`, this line fails with `Unresolved reference`. And Intellij couldn't suggest any imports for `LocalFileContent`.

I went through some git log and found that in this commit: [Reduce jdk8 dependencies in client ](https://github.com/ktorio/ktor/commit/06077ee8bc6be688af5c393f21f81f57065c085f), the file

> ktor-http/jvm/src/io/ktor/http/content/LocalFileContent.kt

was moved to 

> ktor-server/ktor-server-core/jvm/src/io/ktor/http/content/LocalFileContent.kt

 It seems to suggest that `LocalFileContent` is now only in `ktor-server`.

`LocalFileContent` is still mentioned in [quick start guide for clients](https://ktor.io/clients/http-client/quick-start/requests.html) but not in the guide [Migrating 1.2.4 â†’ 1.3.0](https://ktor.io/quickstart/migration/1.3.0.html). I guess it could also be the docs that need updating.


**Subsystem**
Server

**Is your feature request related to a problem? Please describe.**
As far as I can tell there is no version of withApplication / withTestApplication that takes a gracePeriod parameter, which we would like to use in our tests to give the application time to close a connection. 

**Describe the solution you'd like**
Changing the signature of withTestApplication and withApplication to include a `gracePeriod` parameter:
```kotlin
fun <R> withTestApplication(
    gracePeriod: Long = 0L,
    moduleFunction: Application.() -> Unit,
    configure: TestApplicationEngine.Configuration.() -> Unit = {},
    test: TestApplicationEngine.() -> R
): R {
    return withApplication(gracePeriod, createTestEnvironment(), configure) {
        moduleFunction(application)
        test()
    }
}

fun <R> withApplication(
    gracePeriod: Long = 0L,
    environment: ApplicationEngineEnvironment = createTestEnvironment(),
    configure: TestApplicationEngine.Configuration.() -> Unit = {},
    test: TestApplicationEngine.() -> R
): R {
    val engine = TestApplicationEngine(environment, configure)
    engine.start()
    try {
        return engine.test()
    } finally {
        engine.stop(gracePeriod, 0L, TimeUnit.MILLISECONDS)
    }
}
```

**Motivation to include to ktor**
This should be helpful for anyone trying to achieve a graceful shutdown of the application between tests.

**Subsystem**
ktor-server-netty
ktor-server-jetty
ktor-server-tomcat

**Motivation**
Solves #336

**Solution**
If an exception is raised while binding engine sockets to ports, the server is stopped.
A similar behavior as described in the issue occurred for Jetty and Tomcat, hence analogous changes are applied there.
After the client upgrade (Apache engine) to 1.3.0 timeout exceptions stopped to handle properly
```kotlin
fun main() {
    val env = applicationEngineEnvironment {
        module {
            main()
        }
        connector {
            host = "127.0.0.1"
            port = 80
        }
    }
    embeddedServer(Netty, env).start()


    val client = HttpClient(Apache) {
        engine {
            socketTimeout = 5
        }
    }
    runBlocking {
        print(client.get<String>("/"))
    }
}

fun Application.main() {
    install(CallLogging) {
        level = Level.INFO
    }
    routing {
        get("/") {
            delay(Duration.ofSeconds(10))
            call.respond("Hi")
        }
    }
}
```

It simply logs in the console 
`Exception in thread "main" kotlinx.coroutines.JobCancellationException: Job was cancelled; job=JobImpl{Cancelled}@4acf72b6` 
with no extra details

Expected:
- error cause
- program termination?
**Ktor Version and Engine Used (client or server and name)**
Ktor client 1.2.6, default platform engine (iOS)

**Describe the bug**
HttpClient can only be used from the main thread. It does not matter on which thread the object is instantiated.

The issue is caused by global declarations that are not annotated properly for Kotlin/Native.

Uncaught Kotlin exception: io.ktor.http.URLParserException: Fail to parse url: <redacted>
Caused by: kotlin.native.IncorrectDereferenceException: Trying to access top level value not marked as @ThreadLocal or @SharedImmutable from non-main thread
        at 0   test.kexe                           0x0000000101edb8e7 kfun:kotlin.Throwable.<init>(kotlin.String?)kotlin.Throwable + 87 (/Users/teamcity3/buildAgent/work/4d622a065c544371/runtime/src/main/kotlin/kotlin/Throwable.kt:22:37)
        at 1   test.kexe                           0x0000000101ed4ee5 kfun:kotlin.Exception.<init>(kotlin.String?)kotlin.Exception + 85 (/Users/teamcity3/buildAgent/work/4d622a065c544371/runtime/src/main/kotlin/kotlin/Exceptions.kt:23:44)
        at 2   test.kexe                           0x0000000101ed4aa5 kfun:kotlin.RuntimeException.<init>(kotlin.String?)kotlin.RuntimeException + 85 (/Users/teamcity3/buildAgent/work/4d622a065c544371/runtime/src/main/kotlin/kotlin/Exceptions.kt:34:44)
        at 3   test.kexe                           0x0000000101f07b55 kfun:kotlin.native.IncorrectDereferenceException.<init>(kotlin.String)kotlin.native.IncorrectDereferenceException + 85 (/Users/teamcity3/buildAgent/work/4d622a065c544371/runtime/src/main/kotlin/kotlin/native/Runtime.kt:30:36)
        at 4   test.kexe                           0x0000000101f25e99 ThrowIncorrectDereferenceException + 137 (/Users/teamcity3/buildAgent/work/4d622a065c544371/runtime/src/main/kotlin/kotlin/native/internal/RuntimeUtils.kt:87:11)
        at 5   test.kexe                           0x0000000102200ed9 CheckIsMainThread + 25
        at 6   test.kexe                           0x00000001020e16a3 kfun:io.ktor.http.<get-URL_ALPHABET_CHARS>#internal + 35 (/opt/buildAgent/work/a85294440dc5c6e/ktor-http/common/src/io/ktor/http/Codecs.kt:11:9)
        at 7   test.kexe                           0x00000001020e2ecd kfun:io.ktor.http.encodeURLPath@kotlin.String.()kotlin.String + 717 (/opt/buildAgent/work/a85294440dc5c6e/ktor-http/common/src/io/ktor/http/Codecs.kt:59:0)
...

I am using the CoroutineWorker library from Autodesk.

**To Reproduce**
Steps to reproduce the behavior:
1. Make a client request from a non-main thread for a native target.

**Subsystem**
ktor-http

**Is your feature request related to a problem? Please describe.**
ChunkedTransferEncoding.kt uses a fixed chunk size of 4088 bytes.

**Describe the solution you'd like**
The chunk size should be configurable.

**Motivation to include to ktor**
Small chunk sizes can result in a lot of network overhead when transferring a large file.  If a server serves up mainly large files, having a tunable chunk size can cut down on the overhead thus speeding up large file transfers.

**Ktor Version and Engine Used (client or server and name)**
1.2.6, 1.3.0-rc2

**Describe the bug**
Any `sendPipeline` interceptor installed does not get called when testing using `withTestApplication`.

**To Reproduce**
Steps to reproduce the behavior:
Install a `sendPipeline` interceptor an try to use it with a `handleRequest`. The interception lambda will not be called.

**Expected behavior**
The interception lambda to be called.

You can check out the [test](https://github.com/lamba92/ktor-spa/blob/master/src/jvmTest/kotlin/com/github/lamba92/ktor/features/Tests.kt) code here in [this feature](https://github.com/lamba92/ktor-spa/blob/master/src/jvmMain/kotlin/com/github/lamba92/ktor/features/SinglePageApplication.kt) of mine where I'm having the issue. A run of the tests is also available [here](https://travis-ci.org/lamba92/ktor-spa/builds/635388649) on TravisCI and the corresponding [build scan](https://gradle.com/s/no4wmc5swmx26) here.
