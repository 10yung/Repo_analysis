Currently this doesn't work for `tbl_dbi` objects (tested on SQLite and MySQL) but it's fine for `data.frame` and `tbl_df`.
Love this package! I'm setting up all sorts of validations and one thing I think would be useful is to enable a direct comparison of one column to another.

For example if we wanted to validate that column a is always greater than column b, we should be able to use `col_vals_gt(vars(a), vars(b))`. What do you think?

Again, this package is incredible. Thanks!
Right now, it's a pretty barebones report.
This is needed to simplify the model for validation steps. With a list column we can accommodate any type so any values put in `value`, `set`, and `regex` would simply go into the `values` list column. 

This also makes it easier to have non-numeric comparisons so dates or date-times could then be specified and used. 
This is necessary for creating any schematics of the validation plan and for reporting post-interrogation. It should indicate the settings for the object returned by the `action_levels()` helper function and applied to the validation step.

These will need to be SVGs. It also has to fit in nicely with the SVG-based function frame. 
This function is just to display simple instructions on how to do the basic things *Ã  la* https://tldr.sh/.
We need a standardized test suite that exercises all of the validation step functions with a variety of database types. The databases and their drivers should be: MySQL (with `RMariaDB`), PostgreSQL (with `RPostgres`), SQLite (with `RSQLite`).
Right now date and datetime column values cannot be validated, and thatâ€™s a shame. 
I intended to check key-properties of `sf(c)`-objects making use of `rows_not_duplicated()`. The check was supposed to ignore the geometry column of the object (cf. 2nd example in reprex).

It seems that `interrogate()` ran into an error, because of the way, `summarize()` works on these objects.

Reprex example:
``` r
library(pointblank)
library(sf)
#> Linking to GEOS 3.6.1, GDAL 2.1.3, PROJ 4.9.3

# Geometry object with 2 features
g <- rep(st_sfc(st_point(1:2)), 2)

# vector with 2 entries
v <- c("a", "b")

# object including both objects
mixed_obj <- st_sf("vector" = v, "points" = g)
mixed_obj
#> Simple feature collection with 2 features and 1 field
#> geometry type:  POINT
#> dimension:      XY
#> bbox:           xmin: 1 ymin: 2 xmax: 1 ymax: 2
#> epsg (SRID):    NA
#> proj4string:    NA
#>   vector      points
#> 1      a POINT (1 2)
#> 2      b POINT (1 2)

agent <- create_agent()
agent %>% 
  focus_on("mixed_obj") %>% 
  rows_not_duplicated() %>% 
  interrogate()
#> Error: Can't coerce element 2 from a list to a double

# It already happens, when I only check if column "vector" is duplicated 
# (likely because `sf`-objects have "sticky geometries")
agent <- create_agent()
agent %>% 
  focus_on("mixed_obj") %>% 
  rows_not_duplicated(cols = vector) %>% 
  interrogate()
#> Error: Can't coerce element 2 from a list to a double
```

<sup>Created on 2019-02-12 by the [reprex package](https://reprex.tidyverse.org) (v0.2.1)</sup>

I think it happens at the following chunk in `interrogate()` in the section "# Judge tables on expectation of non-duplicated rows":
```r      
      # Get total count of rows
      row_count <-
        table %>%
        dplyr::group_by() %>%
        dplyr::summarize(row_count = n()) %>%
        dplyr::as_tibble() %>%
        purrr::flatten_dbl()
```

My expectation would be, that

1. in the first case of the reprex (`rows_not_duplicated()`, without specifying columns) each whole row, including the geometry column, would be compared with the others.
2. in the second case (`rows_not_duplicated(cols = vector)`) the check would be done only for the column "vector".

Perhaps a solution might be to call `as_tibble()` before `group_by()` and `summarize()`?

CC: @krlmlr
ðŸ‘‹ Howdy! Not so much an issue, but a request. Would it be useful to create a vignette detailing how to use this package for data testing prior to retraining a machine learning model?

.pb
