See #372 for reference

I believe `String` values in mocks should return `""` by default.

It is a historically 'special' type which has always had some special 'primitive-like' privileges. 
I assume people expect it to return a nice value as well!

Thank you for submitting a pull request! But first:

 - [x] Can you back your code up with tests?
 - [x] Keep your commits clean: [squash your commits if necessary](https://git-scm.com/book/en/v2/Git-Tools-Rewriting-History).

It looks like Mockito is using `null` as a default value for properties in a interface even though they are non-nullable.

Reproduce: 
```kotlin
interface Dog {
  val name: String
}

class DogCaller {
  fun callDog(dog: Dog) = callSomeone(dog.name)
  private fun callSomeone(name: String) = "Hey $name come here!"
}


class DogCallerTests {

  private val dogCaller = DogCaller()

  @Test
  fun `dog caller should call dog by its name`() {
    val beagle: Dog = mock()

    // This makes the test pass 
    // whenever(beagle.name).thenReturn("Firulais")
    
    dogCaller.callDog(beagle)

    verify(beagle).name // This fails cause it detects dog.name : String = null !
  }
}

```

Thank you for submitting a pull request! But first:

 - [x] Can you back your code up with tests?
 - [x] Keep your commits clean: [squash your commits if necessary](https://git-scm.com/book/en/v2/Git-Tools-Rewriting-History).

These are not wrapped, I can use them as intended but I have to use `any<String>()`.
There must be a reason for this I am unaware of (not putting them in MockitoKotlin), I am curious why. Do you need a PR?
Hi,

I'dont now if this is a bug. I'm trying to verify two arguments by using `check {}`. Of course I can use an argument capture, but I'm expecting this should working too.

```kotlin
import com.nhaarman.mockitokotlin2.check
import com.nhaarman.mockitokotlin2.mock
import com.nhaarman.mockitokotlin2.verify
import org.assertj.core.api.Assertions.assertThat
import org.junit.jupiter.api.Test
import org.mockito.internal.verification.Times

class Tweet(val id: Int, val text: String)

interface TweetRepository {
    fun persist(tweet: Tweet)
}

class TweetTest {

    @Test
    internal fun `verify multiple perists`() {
        val repositoryMock = mock<TweetRepository>()

        repositoryMock.persist(Tweet(1, "first tweet"))
        repositoryMock.persist(Tweet(2, "second tweet"))

        verify(repositoryMock, Times(1)).persist(check {
            assertThat(it.id).isEqualTo(1)
            assertThat(it.text).isEqualTo("first tweet")
        })
        verify(repositoryMock, Times(1)).persist(check {
            assertThat(it.id).isEqualTo(2)
            assertThat(it.text).isEqualTo("second tweet")
        })
    }
}
```

is green but logs assertion errors

```sh
org.opentest4j.AssertionFailedError: 
Expecting:
 <2>
to be equal to:
 <1>
but was not.
	at java.base/jdk.internal.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)
```

Context
* mockito-kotlin version: 2.2.0
* OS: OSX
* Kotlin version: 1.3.60
* JDK version: 11
* JUnit version: 5.5.2
* AssertJ version: 3.13.2
* Type of test: unit test
Adding the `infix` to the `stub` function will allow for a more dsl format:

```kotlin
myMock stub {
  on { call() } doReturn someMagicResult
}
```

Is it possible to do this?
```kotlin
interface Repository {
  fun setFoo(value)
  fun getFoo()
}
...
class Intercator (repository: Repository) {
  fun setFoo(value) {
    repository.setFoo(value)
  }
  fun getFoo() {
    return repository.getFoo()
  }
}
...
@Test
@Parameters(value = ["foo", "bar"])
fun testSetter(expectedResult: String) {
  val repo = mock<Repository>()
  val interactor = Interactor(repo)

  whenever(repo.setFoo(expectedResult)).then {
    whenever(repo.getFoo()).thenReturn(expectedResult)
  }

  val result = interactor.setFoo(expectedResult)
  assertEquals(result, expectedResult)
}
```
I've been trying to upgrade from `2.1.0` to `2.2.0` and now I have a few tests that fail with this exception:

```
java.lang.NoSuchMethodError: com.nhaarman.mockitokotlin2.MockingKt.withSettings([Lkotlin/reflect/KClass;Ljava/lang/String;Ljava/lang/Object;Lorg/mockito/stubbing/Answer;ZLorg/mockito/mock/SerializableMode;Z[Lorg/mockito/listeners/InvocationListener;ZLcom/nhaarman/mockitokotlin2/UseConstructor;Ljava/lang/Object;Z)Lorg/mockito/MockSettings;

	at com.qonto.qonto.ui.otp.setup.phonenumber.PhoneNumberPresenterTest.<init>(PhoneNumberPresenterTest.kt:180)
	at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)
	at sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62)
	at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
	at java.lang.reflect.Constructor.newInstance(Constructor.java:423)
	at org.junit.runners.BlockJUnit4ClassRunner.createTest(BlockJUnit4ClassRunner.java:217)
	at org.junit.runners.BlockJUnit4ClassRunner$1.runReflectiveCall(BlockJUnit4ClassRunner.java:266)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
	at org.junit.runners.BlockJUnit4ClassRunner.methodBlock(BlockJUnit4ClassRunner.java:263)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363)
	at org.junit.runners.Suite.runChild(Suite.java:128)
	at org.junit.runners.Suite.runChild(Suite.java:27)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363)
	at org.junit.runner.JUnitCore.run(JUnitCore.java:137)
	at com.intellij.junit4.JUnit4IdeaTestRunner.startRunnerWithArgs(JUnit4IdeaTestRunner.java:68)
	at com.intellij.rt.execution.junit.IdeaTestRunner$Repeater.startRunnerWithArgs(IdeaTestRunner.java:47)
	at com.intellij.rt.execution.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:242)
	at com.intellij.rt.execution.junit.JUnitStarter.main(JUnitStarter.java:70)
```

This is on a test that does something like this:
```
    private val otpViewModel = mock<OTPSetupViewModel> {
        on { mustSwitchOtpFromAppToSms() } itAnswers { mustSwitchOtpFromAppToSms }
        on { createMfaBySms() } itAnswers { createMfaBySmsResponse }
        on { showError } itAnswers { showErrorLiveData }
    }
```

Any idea?
### Info:
- Reference: https://kotlinlang.org/docs/reference/basic-types.html#unsigned-integers
- KEEP: https://github.com/Kotlin/KEEP/blob/master/proposals/unsigned-types.md

### Test case:
```
    @Test
    fun mockitoTest() {
        val fixture: UnsignedFixture = mock()

        fixture.ubyte(42u)
        fixture.ushort(42u)
        fixture.uInt(42u)
        fixture.uLong(42u)

        verify(fixture).ubyte(eq(42u))
        verify(fixture).ushort(eq(42u))
        verify(fixture).uInt(eq(42u))
        verify(fixture).uLong(eq(42u))
    }

    interface UnsignedFixture {
        fun ubyte(value: UByte)
        fun ushort(value: UShort)
        fun uInt(value: UInt)
        fun uLong(value: ULong)
    }
```

### Error:
```
Argument(s) are different! Wanted:
unsignedFixture.uInt-WZ4Q5Ns((UInt) 42);
-> at lt.libredrop.peerdiscovery.PeerDiscoverySpecsComplainTest.mockitoTest(PeerDiscoverySpecsComplainTest.kt:72)
Actual invocations have different arguments:
unsignedFixture.uInt-WZ4Q5Ns((Integer) 42);
-> at lt.libredrop.peerdiscovery.PeerDiscoverySpecsComplainTest.mockitoTest(PeerDiscoverySpecsComplainTest.kt:67)
```

### Tried workarounds:

#### argThat
```
        verify(fixture).uInt(argThat {
            this == 42u
        })
```

throws:
```
java.lang.NullPointerException
	at lt.libredrop.peerdiscovery.PeerDiscoverySpecsComplainTest.mockitoTest(PeerDiscoverySpecsComplainTest.kt:117)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
```

#### Capture

```
        val captor = argumentCaptor<UInt>()

        verify(fixture).uInt(captor.capture())

        assertEquals(42u, captor.firstValue)
```

Throws:
```
java.lang.NullPointerException
	at lt.libredrop.peerdiscovery.PeerDiscoverySpecsComplainTest.mockitoTest(PeerDiscoverySpecsComplainTest.kt:74)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
```
I just cloned the repo and runed `./gradlew test` and the project failed with lots of errors

```shell
w: /Users/brais/projects/mockito-kotlin/mockito-kotlin/src/main/kotlin/com/nhaarman/mockitokotlin2/internal/CreateInstance.kt: (45, 30): Parameter 'kClass' is never used
e: /Users/brais/projects/mockito-kotlin/tests/src/test/kotlin/test/ArgumentCaptorTest.kt: (5, 21): Unresolved reference: mockitokotlin2
e: /Users/brais/projects/mockito-kotlin/tests/src/test/kotlin/test/ArgumentCaptorTest.kt: (14, 26): Unresolved reference: mock
e: /Users/brais/projects/mockito-kotlin/tests/src/test/kotlin/test/ArgumentCaptorTest.kt: (20, 22): Unresolved reference: argumentCaptor
e: /Users/brais/projects/mockito-kotlin/tests/src/test/kotlin/test/ArgumentCaptorTest.kt: (21, 9): Unresolved reference: verify
e: /Users/brais/projects/mockito-kotlin/tests/src/test/kotlin/test/ArgumentCaptorTest.kt: (28, 26): Unresolved reference: mock
e: /Users/brais/projects/mockito-kotlin/tests/src/test/kotlin/test/ArgumentCaptorTest.kt: (34, 34): Unresolved reference: argumentCaptor
e: /Users/brais/projects/mockito-kotlin/tests/src/test/kotlin/test/ArgumentCaptorTest.kt: (35, 9): Unresolved reference: verify
e: /Users/brais/projects/mockito-kotlin/tests/src/test/kotlin/test/ArgumentCaptorTest.kt: (36, 9): Unresolved reference: verify
e: /Users/brais/projects/mockito-kotlin/tests/src/test/kotlin/test/ArgumentCaptorTest.kt: (44, 26): Unresolved reference: mock
e: /Users/brais/projects/mockito-kotlin/tests/src/test/kotlin/test/ArgumentCaptorTest.kt: (50, 43): Unresolved reference: argumentCaptor
e: /Users/brais/projects/mockito-kotlin/tests/src/test/kotlin/test/ArgumentCaptorTest.kt: (51, 27): Unresolved reference: KArgumentCaptor
e: /Users/brais/projects/mockito-kotlin/tests/src/test/kotlin/test/ArgumentCaptorTest.kt: (63, 26): Unresolved reference: mock
e: /Users/brais/projects/mockito-kotlin/tests/src/test/kotlin/test/ArgumentCaptorTest.kt: (69, 52): Unresolved reference: argumentCaptor
e: /Users/brais/projects/mockito-kotlin/tests/src/test/kotlin/test/ArgumentCaptorTest.kt: (70, 27): Unresolved reference: KArgumentCaptor
e: /Users/brais/projects/mockito-kotlin/tests/src/test/kotlin/test/ArgumentCaptorTest.kt: (83, 26): Unresolved reference: mock
e: /Users/brais/projects/mockito-kotlin/tests/src/test/kotlin/test/ArgumentCaptorTest.kt: (89, 61): Unresolved reference: argumentCaptor
e: /Users/brais/projects/mockito-kotlin/tests/src/test/kotlin/test/ArgumentCaptorTest.kt: (90, 27): Unresolved reference: KArgumentCaptor
e: /Users/brais/projects/mockito-kotlin/tests/src/test/kotlin/test/ArgumentCaptorTest.kt: (104, 26): Unresolved reference: mock
e: /Users/brais/projects/mockito-kotlin/tests/src/test/kotlin/test/ArgumentCaptorTest.kt: (110, 22): Unresolved reference: argumentCaptor
e: /Users/brais/projects/mockito-kotlin/tests/src/test/kotlin/test/ArgumentCaptorTest.kt: (111, 9): Unresolved reference: verify
e: /Users/brais/projects/mockito-kotlin/tests/src/test/kotlin/test/ArgumentCaptorTest.kt: (118, 26): Unresolved reference: mock
e: /Users/brais/projects/mockito-kotlin/tests/src/test/kotlin/test/ArgumentCaptorTest.kt: (124, 22): Unresolved reference: nullableArgumentCaptor
e: /Users/brais/projects/mockito-kotlin/tests/src/test/kotlin/test/ArgumentCaptorTest.kt: (125, 9): Unresolved reference: verify
e: /Users/brais/projects/mockito-kotlin/tests/src/test/kotlin/test/ArgumentCaptorTest.kt: (132, 26): Unresolved reference: mock
e: /Users/brais/projects/mockito-kotlin/tests/src/test/kotlin/test/ArgumentCaptorTest.kt: (139, 22): Unresolved reference: argumentCaptor
e: /Users/brais/projects/mockito-kotlin/tests/src/test/kotlin/test/ArgumentCaptorTest.kt: (140, 9): Unresolved reference: verify
e: /Users/brais/projects/mockito-kotlin/tests/src/test/kotlin/test/ArgumentCaptorTest.kt: (140, 22): Unresolved reference. None of the following candidates is applicable because of receiver type mismatch: 
@InlineOnly public inline operator fun BigDecimal.times(other: BigDecimal): BigDecimal defined in kotlin
@InlineOnly public inline operator fun BigInteger.times(other: BigInteger): BigInteger defined in kotlin
...
```

I fixed it changing the file `tests/build.gradle`:

```diff
- compile files("${rootProject.projectDir}/mockito-kotlin/build/libs/mockito-kotlin-${rootProject.ext.versionName}.jar")
+ compile project(":mockito-kotlin")
```

I don't know why the project is picked in that way. If there is not a good reason for do it that way I have the commit that does the change: 10faa1f2491fab6c9a1439d225fd382402603955 so I can create the PR if you want.