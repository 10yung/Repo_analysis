Hi,

I'm having the following working python code snippet in an an application
things works fine, however I wanted to convert  into Ruby using rbNaCL and am having an issue
```
sk = nacl.signing.SigningKey.generate().encode(nacl.encoding.Base64Encoder)
pk = sk.verify_key.to_curve25519_public_key().encode(encoder=nacl.encoding.Base64Encoder)

# send pk to user BOB where they encrypt data with pk and BoB private key
# then Alice recieves encrypted message with nonce and a public key that is base64 encoded
# `'LDuRaopE6MSgoJpswcSlXZsqqxaqv7LeDTgc4QbWQoQ='`
# then Alice decrypts using the following working code

userPubk = nacl.signing.VerifyKey('LDuRaopE6MSgoJpswcSlXZsqqxaqv7LeDTgc4QbWQoQ=', encoder=nacl.encoding.Base64Encoder)
box = Box(
        sk.to_curve25519_private_key(),
        userPubk.to_curve25519_public_key()
    )
decrypted = box.decrypt(ciphertext, nonce)
```
I want to achieve same thing with Ruby (I successfully did it in golang)
However I can not seem to be able to convert a key to `curve25519_public_key`
Here's a code snippet from the decryption phase

```
privateKey = RbNaCl::PrivateKey.generate
...........
............

# decryption phase
userPublicKey = Base64.strict_decode64('LDuRaopE6MSgoJpswcSlXZsqqxaqv7LeDTgc4QbWQoQ=')
pk = RbNaCl::PublicKey.new(userPublicKey)
userPublicKeyObj = RbNaCl::VerifyKey.new(pk)

decrypted = JSON.load(RbNaCl::Box.new(pk, privateKey).decrypt(nonce, cipherText))
```

my Issue is I can not seem to convert the public key into `curve25519` so the decrypt method fails
is there any way to achieve this? i.e
converting a ` #<RbNaCl::Signatures::Ed25519::VerifyKey:2c3b916a>` Object into
`RbNaCl::Boxes::Curve25519XSalsa20Poly1305::PublicKey:2c3b916a>`