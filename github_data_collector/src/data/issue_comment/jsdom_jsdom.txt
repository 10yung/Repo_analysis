This setup follows the spec more, is a lot simpler to follow, fixes #2800, and fixes #2617.
Closes #2795.

I manually tested this (using nvm). I'm not sure it's worth testing on CI, but if we wanted to I think something like this (not tested) could work:

```yaml
    - node_js: stable
      ENV: TEST_SUITE=downlevel
      script:
        - nvm use 10
        - yarn test-api
```
### Basic info:

- **Node.js version:** 13.0.1
- **jsdom version:** 16.0.0
- Seen on Windows 10

### Minimal reproduction case

```js
var JSDOM = require('jsdom').JSDOM;

JSDOM.fromFile('loop.html', {
  resources: 'usable',
  runScripts: 'dangerously',
}).then(function(dom) {
  setTimeout(function() { dom.window.close(); }, 5000);
});
```

```html
<!DOCTYPE html>
<html lang=en>
<head>
<title>JSDOM test</title>
</head>

<body>

<script><!--
setInterval(function() { console.log('*'); }, 1000);
--></script>

</body>
</html>
```
This script runs forever.
Fix for https://github.com/jsdom/jsdom/issues/2787

When setting the value of a `textarea` or `input type=text`, the selection should be set to the end of the new text.

Also fixed an issue in `textarea`, the selection start/end should initially be set to 0.
Currently, each&nbsp;**Node.js**&nbsp;version needs&nbsp;to&nbsp;have its&nbsp;own&nbsp;`needs‑node*`&nbsp;reason added&nbsp;to&nbsp;`run‑wpts.js`.

This&nbsp;is&nbsp;problematic, as&nbsp;the&nbsp;code currently&nbsp;performs the&nbsp;`Number(process.versions.node.split(".")[0])`&nbsp;conversion for&nbsp;every&nbsp;supported&nbsp;`needs‑node*`&nbsp;entry, and&nbsp;each&nbsp;`needs‑node*`&nbsp;entry has&nbsp;to&nbsp;be&nbsp;manually&nbsp;added.

This&nbsp;simplifies&nbsp;that to&nbsp;only&nbsp;need to&nbsp;perform that&nbsp;conversion&nbsp;once.

I’ve&nbsp;also&nbsp;added a&nbsp;fail&nbsp;reason to&nbsp;<code>[expected&nbsp;fail]</code> when&nbsp;the&nbsp;reason is&nbsp;`needs‑node*` or&nbsp;`fail‑with‑canvas`.
### Basic info:

- **Node.js version:** v10.16.1 (actually all v10 versions)
- **jsdom version:** v16

### Minimal reproduction case

```js
const { JSDOM } = require("jsdom");

const options = {
  runScripts: "dangerously"
};
const dom = new JSDOM(``, options);

```
Then you'll see the error, since Node.js doesn't support globalThis but  `js-globals.json` includes `globalThis` and `runInContext('globalThis', windowInstance)` is executed in https://github.com/jsdom/jsdom/blob/master/lib/jsdom/browser/Window.js#L48 

```
ReferenceError: globalThis is not defined
    at evalmachine.<anonymous>:1:1
    at Script.runInContext (vm.js:133:20)
    at Object.runInContext (vm.js:311:6)
    at setupWindow (/Users/clark/projects/nuxt.js/node_modules/jsdom/lib/jsdom/browser/Window.js:49:55)
    at new Window (/Users/clark/projects/nuxt.js/node_modules/jsdom/lib/jsdom/browser/Window.js:105:3)
    at new JSDOM (/Users/clark/projects/nuxt.js/node_modules/jsdom/lib/api.js:36:20)
    at repl:1:1
    at Script.runInThisContext (vm.js:122:20)
    at REPLServer.defaultEval (repl.js:332:29)
    at bound (domain.js:402:14)
```
<!--
Please create a minimal repro. Any reports involving third party libraries
will be closed, as we cannot debug third-party library interactions for you.

Please do not use syntax that is not supported in Node.js, such as JSX or
`import` statements. If we cannot run the code in Node.js, we will close the
issue, as we cannot debug whatever toolchain you are using.
-->

This PR aims to address the longstanding issues with noscript nodes.(https://github.com/jsdom/jsdom/issues/1611, https://github.com/jsdom/jsdom/issues/1802).
By setting the `scriptingEnabled` flag to `false` we can now query nodes inside `<noscript/>`

I didn't find any places in the code where this feature could have been implemented so I did it ( I tried at least)
Hope everything is in the right place and nothing is missing.

Thx for this awesome library ;)
We are currently using [both](https://github.com/jsdom/jsdom/blob/d240291edbe7d4180a5152993ced7950c834dc57/package.json#L35-L36) request and request-promise-native. We should replace them both with something better.

- **request** is in [maintenance mode](https://github.com/request/request/issues/3142).
- **request** is already quite [bloated](https://bundlephobia.com/result?p=request@2.88.0).
- **request-promise-native** uses [stealthy-require](https://www.npmjs.com/package/stealthy-require) which essentially results in two copies of request (see https://github.com/jsdom/jsdom/pull/2783#issuecomment-572415665)

Some alternatives are in https://github.com/request/request/issues/3143. Strongest candidate right now is probably **[node-fetch](https://www.npmjs.com/package/node-fetch)**.
Originally posted by @domenic in https://github.com/jsdom/jsdom/pull/2783#pullrequestreview-341498256

> That said, requiring request twice does suck, so I guess we should proceed. But can we try to do whatever the "right" thing is, instead of a temporary workaround? It's not clear to me what that is... should we have independent agents per jsdom window? Per XHR instance?

---- 

Currently, jsdom uses the global `request` agent pool for all the requests it issues. As discussed in https://github.com/jsdom/jsdom/pull/2783#issuecomment-572917337, the current request implementation has some bug related to `Connection: keep-alive` header when using the global agent pool. In order to get around this issue, jsdom issued requests should use its own agent pool.

IMO requests issued by a jsdom instance should share the same agent pool.

Thoughts?
This PR aims to address the longstanding issues with reflection. Currently, we support [reflecting content attributes in IDL attributes](https://html.spec.whatwg.org/multipage/common-dom-interfaces.html#reflecting-content-attributes-in-idl-attributes) using the Chrome-style [[Reflect]](https://github.com/jsdom/webidl2js#reflect) extended attribute in webidl2js. However, this proved to be inflexible, as supporting additional reflection varieties requires putting more jsdom-specific details in webidl2js. This has resulted in better reflection support being [stalled](https://github.com/jsdom/webidl2js/issues/15) over the past few years.

This PR introduces a different way to implement reflection. Rather than putting annotations in the IDL definition, the reflection is implemented using "decorator" functions for implementation classes, much like how event listener IDL attributes are implemented currently. For example, the reflected IDL attributes of `HTMLInputElement` are done as:

```js
// parameters: (implementation class prototype, IDL attribute, content attribute[, default value])
reflectLimitedToNonNegativeGreaterThanZeroWithFallback(HTMLTextAreaElementImpl.prototype, "cols", "cols", 20);
reflectLimitedToNonNegativeGreaterThanZeroWithFallback(HTMLTextAreaElementImpl.prototype, "rows", "rows", 2);
reflectLimitedToNonNegative(HTMLTextAreaElementImpl.prototype, "maxLength", "maxlength");
reflectLimitedToNonNegative(HTMLTextAreaElementImpl.prototype, "minLength", "minlength");
```

Right now, I only introduced these very specific reflectors, though we could certainly extend it to the cases currently covered by [Reflect] in the future.

Even though brevity is on the side of [Reflect], I see several advantages for implementing reflections in the implementation file:

* Allow reflection to be more closely integrated with the rest of jsdom.
* More metadata about the reflected attribute can be specified in JavaScript than in Web IDL. (E.g., range of clamped attributes, allowed values for enumerated attributes.)
* Implementation classes can make use of the reflected attributes, instead of having to use the clunkier attribute manipulator.
* Smoother path to the automated updating of IDL files, if done in the future.
* Better layering between jsdom and webidl2js.

On the other hand, a downside for moving reflection to the implementation file is that the implementation class is not aware of the type of the IDL attribute. This makes reflection of some IDL attributes that use default behaviors that are currently serviced by [Reflect] more verbose than before. (Chrome uses a hybrid behavior, using [Reflect] for some attributes but C++ for more complex behavior.)

----

Admittedly, the function names are a bit long at the moment, as I'm pretty much using the spec terminology verbatim. I'm open to suggestions on better names. Another idea is we could introduce a utility function, like `addReflectedAttributes()` which we can use as follows:

```js
addReflectedAttributes(HTMLTextAreaElementImpl.prototype, {
  cols: { attribute: "cols", kind: "unsigned-positive-with-fallback", defaultValue: 20 },
  maxLength: { attribute: "maxlength", kind: "signed-non-negative" },
  type: { attribute: "type", kind: "enumerated-known-values", validValues: acceptedTypesSet, missingValueDefault: "text", invalidValueDefault: "text" }
});
```

where `kind` is

* for strings: "string", ["url"](https://html.spec.whatwg.org/multipage/common-dom-interfaces.html#reflecting-content-attributes-in-idl-attributes:url), ["enumerated-nullable"](https://html.spec.whatwg.org/multipage/common-dom-interfaces.html#reflecting-content-attributes-in-idl-attributes:enumerated-attribute-2), ["enumerated-known-values"](https://html.spec.whatwg.org/multipage/common-dom-interfaces.html#limited-to-only-known-values)
* for boolean: ["boolean"](https://html.spec.whatwg.org/multipage/common-dom-interfaces.html#reflecting-content-attributes-in-idl-attributes:idl-boolean)
* for numbers: ["signed"](https://html.spec.whatwg.org/multipage/common-dom-interfaces.html#reflecting-content-attributes-in-idl-attributes:idl-long), ["signed-non-negative"](https://html.spec.whatwg.org/multipage/common-dom-interfaces.html#limited-to-only-non-negative-numbers), ["unsigned"](https://html.spec.whatwg.org/multipage/common-dom-interfaces.html#reflecting-content-attributes-in-idl-attributes:idl-unsigned-long), ["unsigned-positive"](https://html.spec.whatwg.org/multipage/common-dom-interfaces.html#limited-to-only-non-negative-numbers-greater-than-zero), ["unsigned-positive-with-fallback"](https://html.spec.whatwg.org/multipage/common-dom-interfaces.html#limited-to-only-non-negative-numbers-greater-than-zero-with-fallback), ["unsigned-clamped"](https://html.spec.whatwg.org/multipage/common-dom-interfaces.html#clamped-to-the-range), ["float"](https://html.spec.whatwg.org/multipage/common-dom-interfaces.html#reflecting-content-attributes-in-idl-attributes:idl-double), and ["float-positive"](https://html.spec.whatwg.org/multipage/common-dom-interfaces.html#limited-to-numbers-greater-than-zero)

----

This PR is rebased on top of #2786 and also uses one commit from #2789. Opening it as a draft for discussion and the Travis CI run.