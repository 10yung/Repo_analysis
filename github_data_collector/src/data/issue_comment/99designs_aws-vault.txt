On aws-vault login, having a flag to return the generated URL to STDOUT would be handy for a couple of use cases:
* Manipulating the generated login URL on remote systems without it opening a browser on that end
* Copying and pasting the URL into a Firefox container
I just upgraded from 5.0.1 to 5.1.2. The biggest change I noticed is that I now have to use my MFA token on every invocation of the tool. When looking in my Keychain Access in MacOS I no longer see a session being created like I had before, no matter how many times I run the command.  Here is my command with debug:

```sh
$ aws-vault --debug exec PROFILE --duration=1h -- aws s3 ls
2020/01/17 19:43:37 [keyring] Considering backends: [keychain pass file]
2020/01/17 19:43:37 Loading config file /Users/cgilmer/.aws/config
2020/01/17 19:43:37 Parsing config file /Users/cgilmer/.aws/config
2020/01/17 19:43:37 Using region "us-west-2" from AWS_DEFAULT_REGION
2020/01/17 19:43:37 [keyring] Querying keychain for service="aws-vault", keychain="login.keychain"
2020/01/17 19:43:37 [keyring] Found 4 results
2020/01/17 19:43:37 profile PROFILE: using stored credentials
2020/01/17 19:43:37 profile PROFILE: using AssumeRole (using MFA)
Enter token for arn:aws:iam::XXXXX:mfa/cgilmer: XXXXX
2020/01/17 19:43:41 Looking up keyring for 'PROFILE'
2020/01/17 19:43:41 [keyring] Querying keychain for service="aws-vault", account="PROFILE", keychain="login.keychain"
2020/01/17 19:43:42 [keyring] Found item "aws-vault (PROFILE)"
2020/01/17 19:43:42 Generated credentials ****************DEOK using AssumeRole, expires in 1h0m12.509135s
2020/01/17 19:43:42 Setting subprocess env: AWS_DEFAULT_REGION=us-west-2, AWS_REGION=us-west-2
2020/01/17 19:43:42 Setting subprocess env: AWS_ACCESS_KEY_ID, AWS_SECRET_ACCESS_KEY
2020/01/17 19:43:42 Setting subprocess env: AWS_SESSION_TOKEN, AWS_SECURITY_TOKEN
2020/01/17 19:43:42 Setting subprocess env: AWS_SESSION_EXPIRATION
```

Can I provide other details?
Not sure if this is a regression or intentional

```
$ aws-vault --version
v5.1.2
$ aws-vault login --help | grep no-session
$ aws-vault exec --help | grep no-session
  -n, --no-session               Don't create a session with GetSessionToken
```

This prevents using a `--duration` greater than 1 hour for the console login.
`aws-vault --debug exec poc --duration 8h --no-session --server`

Used above command to run server mode. 

Trying to get nodes from eks cluster; command `kubectl get nodes`

OUTPUT:
`The source profile "IAM" must have credentials.

The source profile "IAM" must have credentials.

Unable to connect to the server: getting credentials: exec: exit status 255
bash-3.2$ printenv | grep AWS
AWS_VAULT=poc
AWS_DEFAULT_REGION=eu-west-2
AWS_REGION=eu-west-2`

IAM = Main profile
POC = is a profile using assume role

I tried to use aws-vault on both windows and mac. Mac is working fine. 

I installed aws-vault in Windows with choco. When i do `aws-vault add profile` then it asks for access id and secret key. it says successfully added. 
When i try aws-vault exec profile it shows:
`aws-vault: error: exec: Failed to get credentials for PROFILE: InvalidClientTokenId: The security token included in the request is invalid.
        status code: 403, request id: DDGYGDYGD-386a-11ea-b0ce-AHDAHDFGASGDF`

I investigated it. I think root cause is `aws-vault add profile` can not set `AWS_ACCESS_KEY_ID` and `AWS_SECRET_ACCESS_KEY` as Environment Variable. 

Anyone having a similar issue? 
The`AWS_SECURITY_TOKEN` is set and also `AWS_SESSION_TOKEN` but looking at this [article](https://aws.amazon.com/blogs/security/a-new-and-standardized-way-to-manage-credentials-in-the-aws-sdks/) it seems like `AWS_SESSION_TOKEN` is the standard.

Having both variables can cause weird problems like https://github.com/gruntwork-io/terragrunt/issues/998, I was wondering if it makes sense to add a flag for this variable or to remove it completely. 
Hello! Trying out the tool for the first time and hit a stumbling block. I'm unable to tell `aws-cli` to use a profile different than `default` - when I'm trying to use a different profile.

My app uses the aws ruby sdk. Part of the SDK has a class for setting up credentials (https://docs.aws.amazon.com/sdkforruby/api/Aws/SharedCredentials.html) that references the `AWS_PROFILE` env variable. If it's not set, it assumes the profile will be 'default'.

So, I've tried to set that env variable both in my .zshrc file and the shell directly. I've also tried executing the was-vault command with something like 

`AWS_PROFILE=desired-profile aws-vault --debug exec desired-profile -- bundle exec rake pg:import`

But, in my app when it comes time to create that `Aws::SharedCredentials` class, `AWS_PROFILE` remains unset, the shared credentials attempt to load the `default` profile (which has no credentials) and my command fails. I tried setting `AWS_DEFAULT_PROFILE` as well, just in case, but that also did not work. I saw some various issues in this repo saying that the `AWS_PROFILE` gets unset when you use `aws-vault`, but I don't see a way to prevent that from happening when I need it to be set.

I saw the section in the usage document about overriding `aws-cli` to use `aws-vault` (https://github.com/99designs/aws-vault/blob/master/USAGE.md#overriding-the-aws-cli-to-use-aws-vault) that seemed somewhat related,

but when I tried pasting that command into my `.zshrc`, my terminal would immediately quit when I opened it, so that did not work.

I can log in and execute commands using `aws-vault` perfectly fine when the AWS_PROFILE is not needed for the command. My `~/.aws/config` is quite simple and is just 

```
[default]
region = us-east-1

[profile dev]

[profile prod]
mfa_serial = arn:aws:iam::000000000000:mfa/token
```

Feel like I must be missing something obvious here - any help is appreciated!
Currently if I "aws-vault foobar" and don't have a foobar profile in my aws config file, a profile section will be added and written to the file. However, if I then /remove/ the credentials, the profile section remains despite being empty. The expected behavior from me would be that if the profile were still empty (that is, never filled with extra data by the user), then it would be removed.
Fixes issues #122.

There are numerous use-cases where the credentials server won't work, particular when building tooling /around/ aws-vault itself.
Occasionally I'll have the following sequence of events occur:

```
t0: Start a session with a 4 hour expiration
t3h,55m: Invoke `aws-vault exec` with some long running operation (creating new ASG's)
t4h: Session expires, Terraform starts timing out commands
```

It would be nice to have some way to specify, say, `minimum-session-duration` or similar to ensure that a new session will be created and used if the existing one has less time on it than the minimum amount.