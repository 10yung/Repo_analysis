### mycode:
```
package main
import (
	"fmt"
	"golang.org/x/crypto/ssh"
	"golang.org/x/crypto/ssh/terminal"
	"io"
	"net"
	"os"
	"time"
)

type Cli struct {
	IP         string      //IP地址
	Username   string      //用户名
	Password   string      //密码
	Port       int         //端口号
	client     *ssh.Client //ssh客户端
	LastResult string      //最近一次Run的结果
}

//创建命令行对象
//@param ip IP地址
//@param username 用户名
//@param password 密码
//@param port 端口号,默认22
func New(ip string, username string, password string, port ...int) *Cli {
	cli := new(Cli)
	cli.IP = ip
	cli.Username = username
	cli.Password = password
	if len(port) <= 0 {
		cli.Port = 22
	} else {
		cli.Port = port[0]
	}
	return cli
}

//执行shell
//@param shell shell脚本命令
func (c Cli) Run(shell string) (string, error) {
	if c.client == nil {
		if err := c.connect(); err != nil {
			return "", err
		}
	}
	session, err := c.client.NewSession()
	if err != nil {
		return "", err
	}
	defer session.Close()
	buf, err := session.CombinedOutput(shell)

	c.LastResult = string(buf)
	return c.LastResult, err
}
//连接
func (c *Cli) connect() error {
	config := ssh.ClientConfig{
		User: c.Username,
		Auth: []ssh.AuthMethod{ssh.Password(c.Password)},
		HostKeyCallback: func(hostname string, remote net.Addr, key ssh.PublicKey) error {
			return nil
		},
		Timeout: 10 * time.Second,
	}
	addr := fmt.Sprintf("%s:%d", c.IP, c.Port)
	sshClient, err := ssh.Dial("tcp", addr, &config)
	if err != nil {
		return err
	}
	c.client = sshClient
	return nil
}
//执行带交互的命令
func (c *Cli) RunTerminal(shell string, stdout, stderr io.Writer) error {
	if c.client == nil {
		if err := c.connect(); err != nil {
			return err
		}
	}
	session, err := c.client.NewSession()
	if err != nil {
		return err
	}
	defer session.Close()

	fd := int(os.Stdout.Fd())
	oldState, err := terminal.MakeRaw(fd)
	if err != nil {
		panic(err)
	}
	defer terminal.Restore(fd, oldState)

	session.Stdout = stdout
	session.Stderr = stderr
	session.Stdin = os.Stdin

	termWidth, termHeight, err := terminal.GetSize(fd)
	if err != nil {
		panic(err)
	}
	// Set up terminal modes
	modes := ssh.TerminalModes{
		ssh.ECHO:          1,     // enable echoing
		ssh.TTY_OP_ISPEED: 14400, // input speed = 14.4kbaud
		ssh.TTY_OP_OSPEED: 14400, // output speed = 14.4kbaud
	}

	// Request pseudo terminal
	if err := session.RequestPty("xterm-256color", termHeight, termWidth, modes); err != nil {
		return err
	}

	session.Run(shell)
	return nil
}

func main(){
	cli := New("serverIP", "root", "passwd", 22)
	cli.RunTerminal("top", os.Stdout, os.Stdin)
}

```

### run code env :

```
 x86 cpu and windows os 
```

### go version:  
```
go1.13.4 windows/amd64
```

### run result:
```
panic: The handle is invalid.

goroutine 1 [running]:
main.(*Cli).RunTerminal(0xc000085f00, 0x5d131c, 0x3, 0x6057c0, 0xc000088008, 0x6057c0, 0xc000088000, 0x0, 0x0)
	D:/go/place/1.go:91 +0x4c1
main.main()
	D:/go/place/1.go:122 +0xff
```

can you help me？ It's a question. Don't pretend that nothing happened. I find out that someone had asked the same question but you didn't answer him。
@nsf do you think it properly fixes #215 ?
I use [Lf](https://github.com/gokcehan/lf) which depends on termbox. I set in my `.tmux.conf` the following:

```
set -g default-terminal tmux-256color
```

Using Rxvt-unicode and **tmux inside it**,  get this error when starting `lf`:

```
2019/10/06 16:34:09 initializing termbox: termbox: error while reading terminfo data: termbox: unsupported terminal
```

If I use a different terminal emulator (say, [Alacritty](https://github.com/jwilm/alacritty)), I don't get this error.

If I use the following in my `.tmux.conf`:

```
set -g default-terminal screen-256color
```

In either urxvt / alacritty, I don't get that error from `lf`.

To summarize, only the combination of:

- urxvt
- tmux
- `$TERM=tmux-256color` (because of `set -f terminal-default tmux-256color` in `.tmux.conf`)

Causes the error.

I wouldn't mind that much if italics would have worked with tmux inside urxvt when using `screen-256color` `$TERM`/`default-terminal. Sfee this FAQ: https://github.com/tmux/tmux/blob/2.1/FAQ#L355-L383

Running `env TERM=screen-256color lf`doesn't raise the error but any inner child process of `lf` reads `TERM=screen-256color` in it's environment. This means that this `env` wrapping wouldn't be much helpful because I often use Lf to browse files and edit them, expecting to see italics.

Would solving this be easy by just adding an entry here:

https://github.com/nsf/termbox-go/blob/5a49b82160547cc98fca189a677a1c14eff796f8/terminfo.go#L113-L126

?
Every exported function in a program should have a doc comment. The first sentence should be a summary that starts with the name being declared.
From [effective go](https://golang.org/doc/effective_go.html#commentary).


PR generated by [CodeLingo](https://codelingo.io). [Install here](https://github.com/apps/codelingo) to drive Continuous Higher Standards.

I'm trying to use Hecate, which uses termbox, on WSL Ubuntu.
When running the application, it results in panic when `termbox.Init()`.
You can see the raised Hecate issue here https://github.com/evanmiller/hecate/issues/15
Unfortunately I don't know enough about go, or Linux, to understand whet the rest of the trace output means 😢 

```bash
$ hecate hecate_0.0.1_amd64.deb
panic: invalid argument

goroutine 1 [running]:
main.main()
        /Users/emiller/Code/gocode/src/github.com/evanmiller/hecate/hecate.go:187 +0x3d9

goroutine 5 [syscall]:
os/signal.loop()
        /usr/local/go/src/os/signal/signal_unix.go:22 +0x18
created by os/signal.init.1
        /usr/local/go/src/os/signal/signal_unix.go:28 +0x37

goroutine 17 [select, locked to thread]:
runtime.gopark(0x5deb50, 0xc820028728, 0x597c78, 0x6, 0x443718, 0x2)
        /usr/local/go/src/runtime/proc.go:185 +0x163
runtime.selectgoImpl(0xc820028728, 0x0, 0x18)
        /usr/local/go/src/runtime/select.go:392 +0xa64
runtime.selectgo(0xc820028728)
        /usr/local/go/src/runtime/select.go:212 +0x12
runtime.ensureSigM.func1()
        /usr/local/go/src/runtime/signal1_unix.go:227 +0x353
runtime.goexit()
        /usr/local/go/src/runtime/asm_amd64.s:1696 +0x1
```
Hi, I would like to be able to choose whether or not to switch to the alternate screen.

Here is an example use-case:
https://github.com/gokcehan/lf/issues/127

Currently, termbox is hard coded to go to the alternate screen and leave it on Init and Close:
https://github.com/nsf/termbox-go/blob/0938b5187e61bb8c4dcac2b0a9cf4047d83784fc/api.go#L81
https://github.com/nsf/termbox-go/blob/0938b5187e61bb8c4dcac2b0a9cf4047d83784fc/api.go#L134

I have some experience using this library.
Sometimes it would be nice to have an ability to fire keyboard event in tests.
For example in such case:

```
func Listen() {
  for {
    e := termbox.PollEvent()

    switch e.Type {
    case termbox.EventKey:
      //do smth
    case termbox.EventInterrupt:
      //do smth
    case termbox.EventError:
      //do smth
    }
  }
}
```
```
panic: The handle is invalid. [recovered]
        panic: The handle is invalid.

goroutine 74 [running]:
github.com/nsf/termbox-go.get_win_size(0x1e4, 0xc0004319e0)
        /home/dg/go/src/github.com/nsf/termbox-go/termbox_windows.go:448 +0xc4
github.com/nsf/termbox-go.update_size_maybe()
        /home/dg/go/src/github.com/nsf/termbox-go/termbox_windows.go:470 +0x38
github.com/nsf/termbox-go.Clear(0xc000000000, 0x729849, 0xc00025a9c0)
        /home/dg/go/src/github.com/nsf/termbox-go/api_windows.go:187 +0x41
github.com/nsf/termbox-go.Close()
        /home/dg/go/src/github.com/nsf/termbox-go/api_windows.go:77 +0x34
github.com/gizak/termui.Close()
        /home/dg/go/src/github.com/gizak/termui/render.go:75 +0x27
github.com/gizak/termui.render.func1()
        /home/dg/go/src/github.com/gizak/termui/render.go:104 +0x91
panic(0x73aee0, 0xc00000a038)
        /usr/local/go/src/runtime/panic.go:513 +0x1c7
github.com/nsf/termbox-go.get_win_size(0x1e4, 0xc00006f8f0)
        /home/dg/go/src/github.com/nsf/termbox-go/termbox_windows.go:448 +0xc4
github.com/nsf/termbox-go.update_size_maybe()
        /home/dg/go/src/github.com/nsf/termbox-go/termbox_windows.go:470 +0x38
github.com/nsf/termbox-go.Flush(0xaee4e8, 0xc00006fb60)
        /home/dg/go/src/github.com/nsf/termbox-go/api_windows.go:108 +0x2d
github.com/gizak/termui.render(0xc00029e210, 0x1, 0x1)
        /home/dg/go/src/github.com/gizak/termui/render.go:164 +0x1fb
github.com/gizak/termui.Init.func2()
        /home/dg/go/src/github.com/gizak/termui/render.go:65 +0x7a
created by github.com/gizak/termui.Init
        /home/dg/go/src/github.com/gizak/termui/render.go:63 +0x31e
```
It appears that when termbox-go was first written, the Windows console didn't support more than 8 colors. The relevant functionality seems to have been stubbed out in the Windows build. E.g., in windows_api.go there is the following comment:

```go
// Windows console does not support extra colour modes,
// so this will always set and return OutputNormal.
func SetOutputMode(mode OutputMode) OutputMode {
	return OutputNormal
}
```

The Windows console does now support 256 and 24-bit colors, as of one of the "Creators Updates." [This Microsoft blog post](https://blogs.msdn.microsoft.com/commandline/2016/09/22/24-bit-color-in-the-windows-console/) has some info about support for the new colors. The cmd.exe properties page hasn't been updated with the appropriate settings yet, so it may not be obvious, but the new colors can be used by console apps.
Hi,

In xterm, the keypad middle arrow can produce a `\e[OE` sequence, but it is not parsed by termbox. Not sure if this is intentional. It seems that there are [4 possible sequences](https://github.com/anaseto/boohu/issues/24#issuecomment-423737436) for this key.