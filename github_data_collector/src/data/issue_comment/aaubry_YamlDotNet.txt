I am using YamlDotNet to deserialize a yml file into a custom object. For certain strings I'd like to append some prefix on the result. 
For example, my custom class is:
```
class Metadata {
  public string Path {get; set; }
}
```

and my YML has:
```
path: image.jpg
```

and I want to append a given relative path so that when a path value is found it will be modified resulting in `myMetadata.Path // /myPrefix/image.jpg` when deserializing.

Something like `.WithAttributeOverride` but for values would be ideal. But I suspect I should do something with a custom Type converters although documentation at https://github.com/aaubry/YamlDotNet/wiki/Serialization.TypeConverters is empty and I couldn't manage to have anything working.

Any guide on whether this is possible would be much appreciated. Cheers!
My take on implementing #311

Not sure how to add tests for it though...

PS: Merry Christmas  :-)
Although there is already an attribute YamlMember, DataMember does not depend on Yaml, and allows one to have consistent serialized field names in YamlDotNet and System.Text.Json

Best regards.
The current interface of IYamlTypeConverter one cannot deserialize a type that contains other types. Unlike that interface INodeDeserializer, the interface does not receive a nested object deserializer (Func<IParser, Type, object?> nestedObjectDeserializer). 

This makes it difficult to customize deserialization of custom types.
Implementing IYamlConvertible is another option, but forces one to mix class code with yaml deserialization code, and is not possible for types from third party libraries.
I can't find why when I specify string with leading space in some line it is stored as `DoubleQuoted` instead of `Literal`.

Example:
```csharp
class Program
{
    static void Main(string[] args)
    {
        var serializer = new SerializerBuilder()
            .WithEventEmitter(e => new LiteralMultilineEventEmitter(e))
            .Build();

        var obj = "line with leading space \nother line";
        Console.WriteLine(serializer.Serialize(obj));
    }

    private class LiteralMultilineEventEmitter : ChainedEventEmitter
    {
        public LiteralMultilineEventEmitter(IEventEmitter nextEmitter) : base(nextEmitter)
        {
        }

        public override void Emit(ScalarEventInfo eventInfo, IEmitter emitter)
        {
            if (eventInfo.Source.Type == typeof(string) && eventInfo.Source.Value is string value && value.Contains("\n"))
            {
                eventInfo.Style = ScalarStyle.Literal;
            }
            base.Emit(eventInfo, emitter);
        }
    }
}
```
Returns:
```
"line with leading space \nother line"
```
While if I change value `obj` value to:
```csharp
var obj = "line with leading space\nother line";
```
without space then it is serialized right:
```
|-
  line with leading space
  other line
```

I've debug code to [Emitter](https://github.com/aaubry/YamlDotNet/blob/d856dbc52a1b9d7bdd7a07f774637a018e8fb907/YamlDotNet/Core/Emitter.cs#L423) where I can see that this is expected behavior, but I can't find such behavior in [documentation](https://yaml.org/spec/1.2/spec.html#id2795688).

More over even if I will try to read this `Literal` string from YAML it will be deserialized right as expected:
```csharp
    static void Main(string[] args)
    {
        var serializer = new SerializerBuilder()
            .WithEventEmitter(e => new LiteralMultilineEventEmitter(e))
            .Build();

        var obj = "line with leading space \nother line";
        Console.WriteLine(serializer.Serialize(obj));

        var yaml =
            "|-\r\n" +
            "  line with leading space \r\n" +
            "  other line";
        
        var deserializer = new DeserializerBuilder().Build();
        var deserializedValue = deserializer.Deserialize<string>(yaml);
        Console.WriteLine(deserializedValue);
        Console.WriteLine(deserializedValue == obj);
    }
```

With output:
```
line with leading space 
other line
True
```
TODO, before merging Pull Request:
- [x] Update conditional statements to support all .NET Standard, .NET Core, and back to .NET Framework 4.5 
```#if` NETSTANDARD && !NETSTANDARD1_3```
- [x] Create more tests for serialization
- [ ] Resolve performance build issues
- [ ] Add async around deserialization (Not sure there is much async to be done here)
I have a yaml file.
```yaml
---
Name: aaa
Age: 12
Props:
  "text/html": a
```

And I have a class.
```csharp
public class YamlData
{
    public string Name { get; set; }
    public int Age { get; set; }
    public Dictionary<string, string> Props { get; } = new Dictionary<string, string>();
}
```

Specially, `YamlData.Props` dictionary has only get accessor.

For deserializing,
```csharp
var deserializerBuilder = new DeserializerBuilder()
                .IgnoreUnmatchedProperties()
                .Build();

var data = deserializerBuilder.Deserialize<YamlData>(File.ReadAllText("test.yaml"));
```

`data.Props` dictionary count is zero.
if I put the `set` on `Props` property, It is well.
But I can not change the `YamlData.Props` in code.

How to resolve these problem?
This is a request to add support for inline style for sequences and mappings to both Parser and Emitter.

An example of a [flow style block](https://yaml.org/spec/1.1/#id933010):
`{name: John Smith, age: 33}`

An example of a [flow style sequence](https://yaml.org/spec/1.1/#id931285):
`[milk, pumpkin pie, eggs, juice]`

This format can be extremely useful for logging when double quotation mark tax of JSON is inappropriate, or in any other cases when single-line representation of data is more preferable.
Hi,

I'm using your library to generate my I18n translations right here : https://github.com/NosWings/NosWings.Server.Translations

I got a Dictionary, with an enum as a key and a string as value (for my i18n)
*here is an example project I'd like to make working*
https://dotnetfiddle.net/XS8DBo

Is it possible to have a Type converter that will append a comment **after the KeyPairValue's value**

I tried to simply make a type converter for my Enum, but it does not work, it simply breaks the YAML cause it's appended after the Key

Expected :
```yaml
BlaBlaBla: '{0}' # Params : {0} FirstParamName
BlaBla2: '{0} {1}' # Params: {0} FirstParamName, {1} SecondParamName
```

Result with only my enum TypeConverter :
```yaml
BLABLABLA
# Params : {0} : FirstParamName
: '{0}'
BLABLA2
# Params : {0} : FirstParamName, {1} : SecondParamName
: '{0} {1}'
```

My BrokenEnumTypeConverter
```cs

    public class I18nKeyTypeConverter : IYamlTypeConverter
    {
        public bool Accepts(Type type) => type == typeof(I18nKey);

        public object? ReadYaml(IParser parser, Type type)
        {
            string value = parser.Consume<Scalar>().Value;
            Enum.TryParse(value, out I18nKey key);

            return key;
        }

        public void WriteYaml(IEmitter emitter, object? value, Type type)
        {
            var key = (I18nKey)value;
            emitter.Emit(new Scalar(null, null, key.ToString().ToUpper()));
            if (!(typeof(I18nKey).GetField(key.ToString()).GetCustomAttribute(typeof(I18NParamsAttribute)) is I18NParamsAttribute tmp))
            {
                return;
            }

            emitter.Emit(new Comment(PrettifyI18NParams(tmp), false));
        }
    }
```

Thanks by advance.
I'm updating a node with YamlMapping inside a potentially large Yaml file that has comments. I quickly realized that the library is not handling this correctly right now even for a simple read/write test.

```csharp
        [Fact]
        public void HandlingComments()
        {
            var yamlContent = @"# Name your package! Package names should contain only lowercase characters
name: 'test_package'
target-path: target  # directory which will store compiled SQL files
models:
  test_package:
      # Applies to all files under models/example/
      example:
          materialized: view";

            var input = new StringReader(yamlContent);
            var yaml = new YamlStream();
            yaml.Load(input);
            var document = (YamlMappingNode)yaml.Documents[0].RootNode;

            var newYaml = new YamlDocument(document);
            var yamlStream = new YamlStream(newYaml);
            var buffer = new StringBuilder();
            using (var writer = new StringWriter(buffer))
            {
                yamlStream.Save(writer, assignAnchors: false);
                var yamlText = writer.ToString();
                Assert.Equal(yamlContent, yamlText);
            }
        }
```

I understand the standard is vague on comments, however in practice comments are very useful. I'm not asking for full serialiazation / de-serializaton support, but a basic read/update/write flow leveraging the YamlMappingNode directly should work. 

Is it possible ?