Allows to pass in array of roles, not just attributes, makes things a little easier when dealing w/ arrays and not having to use call_user_func_array('User::whereIs', ['admin', 'manager'])->get() which looks clunky.
In my usecase a User can view some Data in case the Data belong to User's Client. I'm implementing this with the Bouncer Ownership feature.

```
Bouncer::allow($user)->toOwn(Data::class)->to(['view']);

Bouncer::ownedVia(Data::class, function ($data, $caller) {
    return $caller->clients->contains($data->client->id);
}
```

This works fine! 

But now a User can also edit Data in case the Data is created by the User. 

If I do this, then the user can edit and view the same group of Data.
```
Bouncer::allow($user)->toOwn(Data::class)->to(['view', 'edit']);
```

How can I have different "ownerships" for various abilities? Like this:

```
Bouncer::ownedVia(Data::class, function ($data, $caller) {
    // if ability is view 
    return $caller->clients->contains($data->client->id);
    // else if ability is edit
   return $data->owners()->contains($caller->id);
}
```
I understand that this section isn't for for support, but I think the question and answer could benefit more users. 

In my application I have users and teams (teams extends Illuminate\Foundation\Auth\Access\Authorizable and uses the HasRolesAndAbilities trait), and when I apply permissions to specific models, I'm doing it by either allowing a user or team a certain ability. And then one or more teams could be added to a user.

Now, when I want to check if a user has access to something, it would make sense to keep the:

```
    $user->can('view');
    // or
    $user->can('view', $model);
```

But that would only check the abilities applied directly to the user or by the users roles.

What would be the best way to achieve this so that it would also check the teams access?

Right now I'm overriding the can method on the user model to the following:

```
    public function can($ability, $arguments = []){

        $check = app(Gate::class)->forUser($this)->check($ability, $arguments);

        if($check === true){
            return $check;
        }

        if (!isset($this->relations['teams'])) {
            $this->load(['teams']);
        }

        foreach($this->teams as $team){
            $check = app(Gate::class)->forUser($team)->check($ability, $arguments);

            if($check === true){
                return $check;
            }
        }

        return false;
    }
```
And that seems to work, though I haven't tested it all that well yet. But is there a better way to do this?

One thought I had was to try using the Gate::after to make the extra check instead, but it felt more messy and in the end it didn't seem that bouncer respected that at all.

Also keep up the good work, I think bouncer is really powerfull, does a good job and is very flexible when it comes to allowing/denying permissions for different stuffs.
In relation to issue #485.
Hi,

When I create following Role Model abilities:
```php
\Bouncer::ability()->firstOrCreate([
    'name' => 'list',
    'title' => 'List roles',
    'entity_type' => Role::class,
]);

\Bouncer::ability()->firstOrCreate([
    'name' => 'read',
    'title' => 'Read roles',
    'entity_type' => Role::class,
]);
```

Entries in DB have the right entity_type <code>Silber\Bouncer\Database\Role</code>

When allowing a specific role to list and read Role Model with following command:
```php
\Bouncer::allow('administrator')->to(['list', 'read'], Role::class);
```

Its seems not finding existing abilities and create new ones with entity_type <code>roles</code>.

After having a look into source code it seems that when using <code>->forModel($entity, true)</code> into <code>findAbility</code> method from <code>FindsAndCreatesAbilities.php</code> file the model class name is retreived using <code>$entity->getMorphClass()</code> which returns <code>roles</code> instead of the real entity class name.

How can I fix it ?

regards,
Make query on database where $authority (in most cases the auth()->user()) is created

At the moment if Bouncer is used on multi tenant application this query looks up in default DB (which is given inside config('database.default')).

With this change nothing would break and it it will make the query in proper DB.
Poking around in the code I see references to Constraints.  (Silber\Bouncer\Constraints and associated classes)

I have played around with them some and even got them to write out their configuration to the database, but I can't figure out how to actually use them.  They appear to be completely undocumented, and I can't quite figure out how they tie into things, although they also appear to be VERY powerful.

If you could get me started on using them, I could whip up some documentation for them.  I already created a holding page on the Wiki: https://github.com/JosephSilber/bouncer/wiki/Ability-Constraints
Hi,

When I use softdelete with my user Model and try to delete a user all assigned roles assigned are completely removed from my DB  and I can't have a real soft delete behavior. How can I activate softdelete on role assigned ? So I'll be able to restore my users with their origin roles !

regards,
Is it possible to query a model based on it's access for a given user? For example a user could own it's own models, but it could also have been given access to a specific model, example below

```
Bouncer::allow($user1)->toOwn(Posts::class);
Bouncer::allow($user1)->to('view', $post2);
```

```
// Append this query to somehow get all posts that use has view access for
$posts = Posts::get();
```

Would it be possible to fetch all Posts based on if the user has access to view it? If that's not currently possible, I think it's something that would be really useful and make a lot of sense. 

If it isn't currently possible, what would be the best way to acheive something like this in the meanwhile?

Might be be same questions asked in #461 
Hi,

I'd like to override "assigned_roles" model to add Auditable trait (which add timestamps and ID of user responsible of action on the model) but I don't find any Model for tables others than Ability and Role.

How can I override other Bouncer Models ?

regards