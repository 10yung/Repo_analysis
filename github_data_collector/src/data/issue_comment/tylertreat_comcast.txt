
The kernel sends the client an eperm when `tc` or `iptables` drops a packet. In real packet loss, the client wouldn't be made immediately aware that the packet didn't reach its destination. The process I'm testing responds to eperm by closing down the socket and trying again on a new socket.

See https://www.spinics.net/lists/netfilter/msg42592.html.

I worked around this by rerouting the packet to a port, 9999, which hopefully isn't used - this solution probably isn't ideal here.

That said, if the intention is to run these scripts on a machine acting as a router then this isn't an issue.
when I use this command
```shell
./comcast --device=eth0 --latency=5000 --target-proto=tcp,udp,icmp --target-addr=10.215.45.5
```
it is useful.but if i add --target-port=9999 like 
```shell
./comcast --device=eth0 --latency=5000 --target-proto=tcp,udp,icmp --target-addr=10.215.45.5 --target-port=9999
```
it  doesnâ€™t work  .

system CentOS release 6.9 (Final)
Comcast version 1.0.0

I know it's easy to build one but I'm just wondering if someone already built it
Hi,

It would be great to see an exclusion parameter in `comcast` which will exclude the rules to a specific network.

e.g., Apply the delay to everyone but 192.16.0.10:

    comcast --device=eth0 --latency=250 --target-bw=1000 --packet-loss=10% -exclude-network 192.168.0.10

or to a specific CIDR:

    comcast --device=eth0 --latency=250 --target-bw=1000 --packet-loss=10% -exclude-network 192.168.0.10/24

Example of tc command for network exclusion of packets of 192.168.1.15 with destination port 9001:
```
tc filter add dev eth0 protocol ip parent 1:0 prio 3 u32 match ip src 0/0 flowid 1:3
tc filter add dev eth0 protocol ipv6 parent 1:0 prio 4 u32 match ip6 src ::/0 flowid 1:3

tc filter add dev eth0 protocol ip parent 1:0 prio 1 u32 match ip dport 22 0xffff flowid 1:2
tc filter add dev eth0 protocol ip parent 1:0 prio 1 u32 match ip sport 22 0xffff flowid 1:2
tc filter add dev eth0 protocol ip parent 1:0 prio 1 u32 match ip src 192.168.1.15 match ip dport 9001 0xffff flowid 1:2

tc filter add dev eth0 protocol ipv6 parent 1:0 prio 2 u32 match ip6 dport 22 0xffff flowid 1:2
tc filter add dev eth0 protocol ipv6 parent 1:0 prio 2 u32 match ip6 sport 22 0xffff flowid 1:2
tc filter add dev eth0 protocol ipv6 parent 1:0 prio 2 u32 match ip6 dport 9001 0xffff flowid 1:2
```
Thanks,
Pavlos
Hi,
i'm new to the GO environment and it would be very nice if you would include a howto for building it on debian (jessie) with the golang version of the repository.

I want to simulate update-behaviour of various systems of virtual machines :)

Thanks for your work :)

Any idea on how I could use Comcast to provide a shitty connection to a mobile device via Wifi?

It would be nice to use it instead as it's meant to replace *tables.

Is there any way of making this work on Windows? I have no idea how much of a job that would be...

./bin/comcast --latency=300 --target-bw=150 --default-bw=150 --packet-loss=3%

I see that the incoming traffic is having no effect. 
