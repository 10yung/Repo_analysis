Updated the Windows section to reflect the correct file to download on the SDL2 website as well as the latest version of mingw
Mingw is currently installed, its directory is in  `D:\Program Files\mingw-w64\x86_64-8.1.0-win32-seh-rt_v6-rev0\mingw64
`, the SDL_image and ttf are installed to copy the entire `SDL2_image-devel-2.0.5-mingw.tar.gz\SDL2_image-devel-2.0.5-mingw.tar\SDL2_image-2.0.5\x86_64-w64-mingw32` folder to `D:\Program Files\mingw-w64\x86_64-8.1.0-win32-seh-rt_v6-rev0\mingw64\x86_64-w64-mingw32 
`

But SDL_gfx is different from SDL_ttf, it does not have the x86_64-w64-mingw32 folder, I do not understand how to install  SDL_gfx-2.0.26.tar.gz to Windows 10 . 

On an Ubuntu 19.10 (Eoan Ermine) system, the following command:
`CGO_ENABLED=1 CC=i686-w64-mingw32-gcc GOOS=windows GOARCH=386 go build -v -tags static -ldflags "-s -w"`
fails to build https://github.com/20kdc/CCUpdaterUI (Please be noted: If you wish to test this specific application, it expects my fork of CCUpdaterCLI) with:
```
/usr/bin/i686-w64-mingw32-ld: ../../veandco/go-sdl2/sdl/../.go-sdl2-libs/libSDL2_windows_386.a(SDL_mouse.o):(.text+0xa1): undefined reference to `GetDoubleClickTime'
```

Note: This issue mostly exists to document the workaround, which is:

Overwriting the .go-sdl2-libs files with the relevant MinGW static libraries (not the .dll-postfixed ones) from https://www.libsdl.org/download-2.0.php works.

Specifically:
If an issue occurred with GetDoubleClickTime:
 + Get the MinGW devlibs from https://www.libsdl.org/download-2.0.php
 + Overwrite libSDL2_windows_386.a with 32-bit libSDL2.a
 + Overwrite libSDL2main_windows_386.a with 32-bit libSDL2main.a

Any interests on this?
https://github.com/mozeal/SDL_gui
When I try to build my Go app to wasm, I get many SDL failures:

$ GOOS=js GOARCH=wasm go build -o myapp.wasm
.\sdl.go:9:20: undefined: sdl.Surface
.\sdl.go:9:43: undefined: sdl.Renderer
.\sdl.go:22:46: undefined: sdl.MapRGB
.\sdl.go:34:37: undefined: sdl.Rect
.\sdl.go:39:12: undefined: sdl.Init
.\sdl.go:39:21: undefined: sdl.INIT_EVERYTHING
.\sdl.go:42:8: undefined: sdl.Quit
.\sdl.go:44:27: undefined: sdl.CreateWindowAndRenderer
.\sdl.go:52:18: undefined: sdl.CreateRGBSurface
.\sdl.go:64:16: undefined: sdl.PollEvent
.\sdl.go:64:16: too many errors

Is this expected to work? I've built many C/C++ SDL games to WebAssembly - but new to Go
Hey there,

I'm developing an [application](https://github.com/Linus4/csgoverview) that I want to port to windows. But when I cross-compile from linux, the colors of most of the shapes I draw with the gfx library are flickering or are just wrong.

Cross-compiled on windows: [Video](https://giant.gfycat.com/GiddyThreadbareGibbon.webm)
Linux: [Image](https://camo.githubusercontent.com/1476c0b230d98718802eea3efb928f53fefa7c6f/68747470733a2f2f692e696d6775722e636f6d2f734e59543465482e706e67)

**Weird things I've noticed:**

* grenades (little rectangles flying across the map) have the correct color when drawn on the map, but have different colors for both the left and the right team in the infobars
* color-flickering of the player-circle on the map gets slower when there are less players alive; and it stays at the correct color when there is only one player alive
* the transparent filled circle indicating that a player is blinded by a flashbang is missing completely
* I don't need to put the SDL2_gfx.dll in the folder when I execute the program

**What I did to cross-compile:**

Using Fedora 30; mingw packages for sdl image and ttf are provided by the distro (mingw64-SDL2, mingw64-SDL2_image and mingw64-SDL2_ttf); go-sdl v0.3.3

1. download sdl2_gfx sources
2. `mingw64-configure`
3. `mingw64-make`
4. `sudo mingw64-make install`
5. `env CGO_ENABLED="1" CC="/usr/bin/x86_64-w64-mingw32-gcc" GOOS="windows" CGO_LDFLAGS="-lmingw32 -lSDL2 -L/usr/x86_64-w64-mingw32/sys-root/mingw/lib/ -lSDL2_gfx" CGO_CFLAGS="-D_REENTRANT" go build -o csgoverview.exe -x *.go`

Then I put these files into the same directory as the executable:

* .dem file (demo/replay) that I want to watch
* .jpg file matching the map from the demo
* liberationserif-regular.ttf (from my repo)
* libfreetype-6.dll
* libjpeg-9.dll
* SDL2.dll
* SDL2_image.dll
* SDL2_ttf.dll
* (SDL2_gfx.dll) this does not affect anything

I have no idea where I'm going wrong - any help would be greatly appreciated :)

PS: a few demos (= replays) for testing can be found [here](https://csgodemo.esugesports.de/) - but any demo should work just fine



```
fatal error: unexpected signal during runtime execution
[signal SIGSEGV: segmentation violation code=0x1 addr=0x0 pc=0x7f4a4f717a10]

runtime stack:
runtime.throw(0x51dacd, 0x2a)
        /usr/local/go/src/runtime/panic.go:774 +0x72
runtime.sigpanic()
        /usr/local/go/src/runtime/signal_unix.go:378 +0x47c

goroutine 1 [syscall, locked to thread]:
runtime.cgocall(0x4cc330, 0xc00004fbe8, 0x100000000000000)
        /usr/local/go/src/runtime/cgocall.go:128 +0x5b fp=0xc00004fbb8 sp=0xc00004fb80 pc=0x419f5b
github.com/veandco/go-sdl2/sdl._Cfunc_RenderCopy(0x298b020, 0x43f7010, 0x0, 0x32a000000ce, 0x2400000030, 0x0)
        _cgo_gotypes.go:2065 +0x4d fp=0xc00004fbe8 sp=0xc00004fbb8 pc=0x4b68bd
github.com/veandco/go-sdl2/sdl.(*Renderer).Copy.func2(0x298b020, 0x43f7010, 0x0, 0xc000177880, 0xc000177880)
        /home/matias/go/src/github.com/veandco/go-sdl2/sdl/render.go:785 +0xd9 fp=0xc00004fc38 sp=0xc00004fbe8 pc=0x4b9209
github.com/veandco/go-sdl2/sdl.(*Renderer).Copy(0x298b020, 0x43f7010, 0x0, 0xc000177880, 0x0, 0xc000016570)
        /home/matias/go/src/github.com/veandco/go-sdl2/sdl/render.go:785 +0x52 fp=0xc00004fc70 sp=0xc00004fc38 pc=0x4b87e2
github.com/Matias-Barrios/SDL_Universe/SDL.DrawStuff(0x298b020, 0x43f7010, 0xac, 0x384, 0x28, 0x28)
        /home/matias/go/src/github.com/Matias-Barrios/SDL_Universe/SDL/SDL.go:67 +0xdf fp=0xc00004fcb0 sp=0xc00004fc70 pc=0x4bd95f
github.com/Matias-Barrios/SDL_Universe/board.Draw(0x298b020)
        /home/matias/go/src/github.com/Matias-Barrios/SDL_Universe/board/board.go:63 +0x10a fp=0xc00004fd20 sp=0xc00004fcb0 pc=0x4c075a
main.main()
        /home/matias/go/src/github.com/Matias-Barrios/SDL_Universe/main.go:124 +0x851 fp=0xc00004ff60 sp=0xc00004fd20 pc=0x4c7e01
runtime.main()
        /usr/local/go/src/runtime/proc.go:203 +0x21e fp=0xc00004ffe0 sp=0xc00004ff60 pc=0x4437be
runtime.goexit()
        /usr/local/go/src/runtime/asm_amd64.s:1357 +0x1 fp=0xc00004ffe8 sp=0xc00004ffe0 pc=0x46be41
exit status 2
```

I am having a sudden panic while my game is running. Out of nowhere the app just stops and throws this. It seems to be tied to line 124 in my main.go.

In that specific line I am polling for events. But nothing else.

Any ideas? It happens randomly, sometimes it does not even happen at all.
sdl/vulkan.go isn't included in any of the release tags, so the default module Go tries to use won't work if you want to work with Vulkan. This should probably be fixed for future releases.
Example code for drawing **RED** square:

```go
package main

import (
	"github.com/veandco/go-sdl2/sdl"
	"image/color"
	"os"
)

const width, height = 100, 100

func main() {
	if err := sdl.Init(sdl.INIT_EVERYTHING); err != nil {
		panic(err)
	}
	window, err := sdl.CreateWindow(
		"color bug",
		sdl.WINDOWPOS_UNDEFINED,
		sdl.WINDOWPOS_UNDEFINED,
		width,
		height,
		sdl.WINDOW_SHOWN)
	if err != nil {
		panic(err)
	}
	surface, err := window.GetSurface()
	if err != nil {
		panic(err)
	}

	// fill background with black color
	rect := sdl.Rect{W: width, H: height}
	surface.FillRect(&rect, 0xff000000)

	// draw RED square
	for x := width / 4; x < width - (width / 4); x++ {
		for y := height / 4; y < height - (height / 4); y++ {
			surface.Set(x, y, color.RGBA{
				R: 0xff,
				G: 0,
				B: 0,
				A: 0xff,
			})
		}
	}

	// flush our square
	window.UpdateSurface()

	for {
		for event := sdl.PollEvent(); event != nil; event = sdl.PollEvent() {
			if event.GetType() == sdl.QUIT {
				os.Exit(0)
			}
		}
	}
}
```

Problem: Windows 10 draws RED square, but in Linux (Ubuntu, KDE) that code draws BLUE square.
Due debugging I found difference between pixel format in surface (windows have RGB888 but linux have RGBA8888).
If we look at the code of Surface.Set() we can found 2 branches:
```go
	case PIXELFORMAT_ARGB8888:
		col := surface.ColorModel().Convert(c).(color.RGBA)
		pix[i+0] = col.R
		pix[i+1] = col.G
		pix[i+2] = col.B
		pix[i+3] = col.A
```
And
```go
	case PIXELFORMAT_RGB24, PIXELFORMAT_RGB888:
		col := surface.ColorModel().Convert(c).(color.RGBA)
		pix[i+0] = col.B
		pix[i+1] = col.G
		pix[i+2] = col.R
```
First branch executes on linux and not working correctly.
Second branch executes on windows and work correctly.
But, first should have "SAME" logic (+alpha), but in first case we have RGBA to RGBA conversion and it possible not correctly for SDL2 and we have RGBA to BRG which possible correctly.
On windows : 

```
D:\eu\Workspace\Emissaries>go get github.com/veandco/go-sdl2/sdl
go: finding github.com/veandco/go-sdl2/sdl latest
# github.com/veandco/go-sdl2/sdl
C:\Users\martin\go\pkg\mod\github.com\veandco\go-sdl2@v0.3.0\sdl\hints.go:86:50:
could not determine kind of name for C.SDL_HINT_ANDROID_SEPARATE_MOUSE_AND_TOUCH
```

```
D:\eu\Workspace\Emissaries>go version
go version go1.12.6 windows/386
```