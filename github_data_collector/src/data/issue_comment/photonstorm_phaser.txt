Phaser v3.22.0

Excellent work with the typescript types update for matter;  I have run into a type that still seems to be missing.   Accessing the body property of a matterImage object doesn't have any awareness of matterjs BodyType properties, and the compiler throws an error if you try to access the speed property.
```
Property 'speed' does not exist on type 'object | BodyType | Body | Body'.
  Property 'speed' does not exist on type 'object'.ts(2339)
```
I tried to add a MatterJS.BodyType type to the phaser body property on the GameObject type manually but it still didnt work.
`body: object | Phaser.Physics.Arcade.Body | Phaser.Physics.Impact.Body | MatterJS.BodyType;`

I don't really have much experience with manipulating the d.ts files of types, so I could very well be doing something wrong.
`line 14834 body: object | Phaser.Physics.Arcade.Body | Phaser.Physics.Impact.Body  `
I suspect that line needs to be modified with something? 
Please do not update the README or Change Log, we will do this when we merge your PR.

This PR (delete as applicable)

* Updates the TypeScript definitions

Describe the changes below:

Reference comment by @jonchun https://github.com/photonstorm/phaser/pull/4948

- extends from Phaser.GameObjects.GameObject
- implements interfaces for mixins
- use Omit for setSize signature conflicts in ComputedSize
- use @ts-ignore for state property conflict; spine.AnimationState significantly different than GameObject.state
- added semi-colons to better match rest of definition files
Parallel downloads on an android device can be not more than 6 (default is 32) based on HTTPS protocol that android devices are using (I've read about that somewhere, unfortunately, can't find the link). So I think it will be nice if the phaser will automatically set that value in the game configuration if the device is android and of course if there is no manual config of that property. Haven't tested for ios devices
[Spanish]
Cuando tratas de obtener una imagen desde el canvas en webGL hay un error al tratar de hacer snapshot al renderer: La imagen resultante está movida 1px hacía abajo.

Este error no ocurre en el modo CANVAS de Phaser.

[English]
When you want get a image from canvas in webGL there is a error in renderer snapshot, the image down 1px.

This error does not occur on Phaser.CANVAS type.

[error_webgl.zip](https://github.com/photonstorm/phaser/files/4065902/error_webgl.zip)
![Captura](https://user-images.githubusercontent.com/9221946/72450162-2dcbd800-37ba-11ea-9cc3-f141c0463911.PNG)

<!--
Thank you for taking the time to contribute towards Phaser. Before submitting your issue, check the following:

1. This repo is for Phaser 3 only. Phaser 2.x issues should be raised in the [Phaser CE](https://github.com/photonstorm/phaser-ce) repo.

2. This repo should not be used for technical support. If you're struggling to use Phaser then post your question to the [forum](https://phaser.discourse.group/), [Slack](https://phaser.io/community/slack) or [Discord](https://phaser.io/community/discord) channels. GitHub Issues are for bugs and feature requests only.

3. Make sure your issue isn't a duplicate, or has already been fixed.

4. If your issue contains _any_ form of hostility it will be closed and you will be blocked from access to all our repos. Be nice. We do this for free.

5. If all the above is ok, fill out the template below.
-->


## Version
<!--
Enter the version of Phaser you're using. You can find this output to the Dev Tools console in your browser.
-->
* Phaser Version: 3.20.1
<!--
Place the operating system **below** this comment.
-->
* Operating system: Windows 10
<!--
If the bug is browser specific, please enter the version **below** this comment:
-->
* Browser: Google Chrome


## Description

<!--
Write a detailed description of the bug **below** this comment. Include the expected behavior and what actually happens. If the issue is device specific, please say so.
-->

This often happens when tab is muted from browser.
Throws error `Uncaught (in promise) TypeError: Cannot read property 'pause' of null`
![image](https://user-images.githubusercontent.com/30594036/72243050-45f9f680-3604-11ea-8139-907f5799fa20.png)

## Example Test Code

<!--
All issues must have source code demonstrating the problem. We automatically close issues after 30 days if no code is provided.

The code can be pasted directly below this comment, or you can link to codepen, jsbin, or similar. The code will ideally be runnable instantly. The more work involved in turning your code into a reproducible test case, the longer it will take the fix the issue.
-->
```
this.sfxs = []
for(const key of sfxKeys){
const sfx = this.sound.add(key)
}
```
```
function playSfx(key){
const sfx = this.sfxs.find((sfx) => sfx.key === key);
sfx.play()
}
```
```
function stopAll(){
for(const sfx of this.sfxs){
sfx.stop();
}
```
Possible that this error throws on not played sfx.
## Additional Information

<!--
Is there anything else you think would be useful for us to reproduce the error? Do you have a solution in mind?

If you have any screen shots or gifs demonstrating the issue (if it can't be seen when running your code), please include those too.
-->

Sound manager type is `Phaser.Sound.HTML5AudioSoundManager`.
#4105  Version

* Phaser Version: v3.20.1-FB
* Operating system: macOS 10.15
* Browser: Firefox (dev edition) 72.0b11

## Description

Expected: I expect to be able to load multiple spine models that share a texture.
Result: TextureManager complains that texture already exists in cache.

## Example Test Code

```
this.load.spine("jsonkey", "json-filename1", "atlas-filename");
this.load.spine("jsonkey", "json-filename2", "atlas-filename");
```

## Possible fix

I dug into SpinePlugin.js and located where I can avoid the error inside the addToCache function. But this seems janky?

before:
`this.loader.textureManager.addImage(key, file.data);`

after:

```
if(!this.loader.textureManager.exists(key)){
  this.loader.textureManager.addImage(key, file.data);
}
```

## Version
* Phaser Version: 3.21.0
* Operating system: Windows 10
* Browser: Google Chrome 79.0.3945.88 (Official Build) (64-bit)

## Description

`Graphics.strokeEllipse` and `Graphics.strokeCircle` don't close properly for higher stroke width values.

## Example Test Code

A slightly modified code from following example:
https://labs.phaser.io/view.html?src=src\game%20objects\graphics\primitive%20types.js

```
var config = {
    width: 800,
    height: 600,
    type: Phaser.AUTO,
    parent: 'phaser-example',
    scene: {
        create: create
    }
};

var game = new Phaser.Game(config);

function create ()
{
    var graphics = this.add.graphics();

    graphics.lineStyle(4, 0x00ff00, 1);

    graphics.strokeRect(32, 32, 256, 256);

    graphics.fillStyle(0xff0000, 0.8);

    graphics.lineStyle(34, 0xff00ff, 1);
    graphics.strokeEllipse(400, 250, 200, 128);

    graphics.lineStyle(64, 0x00ffff, 1);
    graphics.strokeCircle(260, 260, 120);

    // graphics.setAlpha(0.5);
}
```

## Additional Information

1.  `Phaser.WEBGL` renderer:

![image](https://user-images.githubusercontent.com/7340300/71974277-6b0bf500-3211-11ea-90da-570ece9ab7b2.png)

2. `Phaser.CANVAS` renderer:

![image](https://user-images.githubusercontent.com/7340300/71974331-8545d300-3211-11ea-8719-2c68eebc8fe0.png)


I'm doing post efx, but I found if I need to use the camera buffer, I have to call `camera.setRenderToTexture`, and if with some shader efx, I have to create a new pipeline which actually takes a large block of memory (for vertex batching) which is unnecessary.

and, if I need to create 2 texture for multi-pass ping-pong rendering, I can't find a better way to do this (or I don't know how)
if I use `rendertexture`, this one can only draw things on it without shader.
if I use `shader`, this one actually is a quad display object, so I can't reuse this with the `renderer` in the same frame ticking.

and, if I use `camera.setRenderToTexture()` without a new pipeline to have my final framebuffer, what is the right next step to apply my shaders with it (for example in a handler function of camera's `postRender` event)?

my current solution is in the camera's `postRender` event use native gl code to handle the rest steps... obviously that's a bit awkward.


the second parameter (`type` ) for `pipeline.addAttribute` method will make user confused.
normally I'll use this method like this:

        ppl.addAttribute('inBlur', 2, renderer.gl.UNSIGNED_BYTE, true, Float32Array.BYTES_PER_ELEMENT * 5 + Uint8Array.BYTES_PER_ELEMENT * 4);

that is, directly use GL consts to pass to this method, but actually this method requires a number to use (for example `addAttribute('name', 2, 2, true, offset)`),
https://github.com/photonstorm/phaser/blob/5b17e0e61e9bdf902eb40899eaa7df498d4986be/src/renderer/webgl/WebGLPipeline.js#L268-L276
(line 273)

so should we just improve the TS doc or change to use another way?

this is not a bug so I made it as feature request.

if doc improvement is enough, I'll PR, thanks.

I had an issue recently where I could not rotate or zoom the cameras without the bounds of the camera changing relative to the values when using setRenderToTexture(). The solution is by changing the file:
src/renderer/webgl/WebGLRenderer.js

In this section: 
pipeline.batchTexture(
                camera,
                camera.glTexture,
                camera.width, camera.height,
                camera.x, camera.y,
                camera.width, camera.height,
                1, 1,  //previously zoom, zoom
                0,  //previously rotation
                camera.flipX, !camera.flipY,
                1, 1,
                0, 0,
                0, 0, camera.width, camera.height,
                getTint(camera._tintTL, camera._alphaTL),
                getTint(camera._tintTR, camera._alphaTR),
                getTint(camera._tintBL, camera._alphaBL),
                getTint(camera._tintBR, camera._alphaBR),
                (camera._isTinted && camera.tintFill),
                0, 0,
                this.defaultCamera,
                null
            );