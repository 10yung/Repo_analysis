Does it strategically keep DOM elements alive and update only ones that have changed (for example, similar to React or Aurelia, both of which use completely different techniques)?

Once a view has been removed from the DOM it permanently loses all of its listeners. Reattaching it to the DOM makes the view completely static.

Controller.loaded doesn't work for templates with multiple root nodes, especially when there are some DynamicNodes.

template.serenade:

```
form[class="form-inline" event:submit=search!]
  ...
- if @searchTopicsCount
  ...
- else
    "No results were found."
- in @pager
  ...
```

controller.coffee:

```
class SearchController
  loaded: (view, model) ->
    console.log(view, model)
```

Expected input to `loaded` is `view, model`, however the argument list for this template is:

```
<form>
undefined
undefined
model
```

The related code in `View.prototype.render` is following:

``` javascript
      if (typeof controller.loaded === "function") {
        controller.loaded.apply(controller, __slice.call(nodes.map(function(node) {
          return node.element;
        })).concat([model]));
      }
```

So first three arguments are product of `node.element` and this property is not defined for `DynamicNodes` build for `@searchTopicsCount` or `@pager`, thats why the second and third argument is undefined.

How this is suppose to work? I expected compiled view as the first argument but instead of that I got node list in first three arguments for this particular case. I need to hookup after view is rendered to initialize jQuery UI Sortable on the result set since I'm preloading the result set when the app is initialized. Is there a better way? Something like "view rendered" event?

This doesn't work:

class @User extends Serenade.Model
    @property 'id', serialize: 'id'
    @property 'username', serialize: 'username'
    @property 'email', serialize: 'email'


There's no info on the - if and - else template commands in the documentation.

``` ruby
class @FriendsPanel extends Serenade.Model
  @property "user"
  @delegate "friends", to: "user"
  @selection "onlineFriends", from: "friends", filter: "online"

new FriendsPanel(user: undefined)
```

When assigning a property, the following should hold:

``` coffeescript
class Foo extends Serenade.Model
  @property "name"

foo = new Foo()
Object.hasOwnProperty(foo, "name") # => false
foo.name = "bar"
Object.hasOwnProperty(foo, "name") # => true
```

Making Serenade define itself as an AMD or CommonJS module would be very useful and really easy to implement.

It can be achieved by wrapping the code this way:

``` javascript
(function (root, factory) {
  if (typeof define === 'function' && define.amd) {

    // AMD
    define(['exports'], factory);
  } else if (typeof exports !== 'undefined') {

    // CommonJS
    var target;
    if(typeof module !== undefined){
      target = module.exports;
    }else{
      target = exports;
    }

    factory(target);
  } else {

    // Browser global
    root.Serenade = factory({})
  }
}(this, function (Serenade) {

  // Code goes here

  return Serenade;

}));
```

Very helpful `in` is missing in the documentation on http://serenadejs.org/

Nice example

```
- in @weeksJob
  div "Week job name " @name
  - view "jobs_table"
```
