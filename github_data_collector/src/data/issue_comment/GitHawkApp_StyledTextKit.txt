
Hi @rnystrom 

Could you please help to release a new version for Swift 5? It seems already done on master branch. üôè
TextStyle doesn't respect its own min and max size, noticed it's not actually applied anywhere. These seemed to be missing.
I'm trying to create a string that has a mix of two font sizes, but I can't seem to make it work. Is this supported by StyledTextKit? (if not, would this be addressed by issue #61 ?)

Here's a sample of what I tried. Adding calls to save() / restore() don't affect the behavior, nor does changing the contentSizeCategory
```
let attrStr = StyledTextBuilder(text: "")
        .add(text: "Foo", attributes: [.font: UIFont.systemFont(ofSize: 32)])
        .add(text: "Bar", attributes: [.font: UIFont.systemFont(ofSize: 14)])
        .build()
        .render(contentSizeCategory: .unspecified)
```
Love [this blog post](https://felginep.github.io/2018-11-23/attributed-string-with-style)! Removing all color/font from building would be amazing. Instead:

- Use "style builder" pattern that registers styles
  - Need to still be able to "push" and "pop" styles
  - Should all props be in one style (`.font`, `.foregroundColor`, etc), or should there be a style per prop? Latter seems harder to maintain
- Remove `UIContentSizeCategory` from all params until render

Necessary to make progress towards GitHawkApp/GitHawk#198 so you can have themes/styles and re-render (missing all caches) w/out having to rebuild everything (which you'd have to do today).
This blog post was great! We could get rid of all the hacky font-scaling math.

https://www.iosdev.recipes/fonts/ui-font-metrics-and-resizable-text/
Hi, Thank you for this amazing library.

I have a question about links and attributes.
StyledTextKit provides three attributes `.tapable`, `.tapHighlight`, `.highlight`.
Are there use-cases for using these attributes separately?
These just increase complexity in my opinion.

As alternative for UITextView, Is it not enough to have only NSLinkAttribute?

Once you create the StyledTextRenderer, you would need to create an entirely new object to change one small attribute like font size.  This is an expensive process
h/t @SD10 for the idea! Inspired by [TTTAttributedLabel](https://github.com/TTTAttributedLabel/TTTAttributedLabel/blob/b0f1f93d5d4368a7aaf52e848013a1b40b00dc3c/TTTAttributedLabel/TTTAttributedLabel.m#L220).
Just curious as if there is a performance tradeoff for creating an attributed string, and then using the convenience initializer of the StyledTextBuilder that takes in an attributed string vs just using the StyledTextedBuilder API to build up a string? Does this affect the background rendering as well?
