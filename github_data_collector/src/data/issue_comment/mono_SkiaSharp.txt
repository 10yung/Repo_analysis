I ask, because I can't find function prototypes in libskia.so which are defined in include/c/*.h
**Description**

When a class is derived from SKGLView UI elements on top of that element are not shown in XF WPF

**Code**

The custom SKGLView is created like this:

```csharp
using SkiaSharp;
using SkiaSharp.Views.Forms;

namespace Mapsui.UI.Forms
{
    public class MyCustomView : SKGLView
    {
        public MyCustomView()
        {
            PaintSurface += MyCustomView_PaintSurface;
        }

        private void MyCustomView_PaintSurface(object sender, SKPaintGLSurfaceEventArgs e)
        {
            e.Surface.Canvas.Clear(new SKColor(255, 128, 128));
        }
    }
}
```

Put it in a page and put a button on top like this:
```xaml
<?xml version="1.0" encoding="utf-8" ?>
<ContentPage xmlns="http://xamarin.com/schemas/2014/forms"
             xmlns:x="http://schemas.microsoft.com/winfx/2009/xaml"
			 xmlns:mapsui="clr-namespace:Mapsui.UI.Forms;assembly=Mapsui.UI.Forms"
             x:Class="Mapsui.Samples.Forms.MainPageLarge">
    <ContentPage.Content>
            <Grid
                VerticalOptions="FillAndExpand"
                HorizontalOptions="FillAndExpand">
            <mapsui:MyCustomView x:Name="mapView"
    		    VerticalOptions="FillAndExpand"
                HorizontalOptions="FillAndExpand"
		        BackgroundColor="Gray" 
		        Margin="0" />
                <Button 
                    WidthRequest="160" 
                    HeightRequest="160" 
                    HorizontalOptions="Center" 
                    VerticalOptions="Center" 
                    Text="Hello"></Button>
            </Grid>
    </ContentPage.Content>
</ContentPage>
```


**Expected Behavior**

The button is visible as in XF UWP:
![image](https://user-images.githubusercontent.com/963462/72649654-8a77f000-397e-11ea-965f-346de09502a5.png)

**Actual Behavior**

The button is not visible in XF WPF

![image](https://user-images.githubusercontent.com/963462/72649714-b004f980-397e-11ea-8cb4-35eb5fcef78a.png)

**Basic Information**

- Version with issue:  1.68.2-preview.17
- Last known good version:  wpf did not work at all in the previous version we used.
- IDE: VS 2019 professional
- Platform Target Frameworks: XF WPF
- Target Devices: Windows desktop

**Related reports**
Mapsui got a bug reported [here](https://github.com/Mapsui/Mapsui/issues/775). Alerts are also not shown on top of the map.
When using GDI I was able to set the Pen::Alignment to Inset, which drew the stroke on the inside of the path. Does SkiaSharp have a similar concept? I've scoured all the SKPaint documentation and haven't found what I'm looking for.
**Description**

SkTypeface cannot be created in Windows Docker container. It simply returns null. I use SkiaSharp 1.68.1.1 version and SkiaSharp.NativeAssets.NanoServer 1.68.1.1 version. .csproj file is modified as required

  <ItemGroup>
    <PackageReference Include="SkiaSharp" ExcludeAssets="native" Version="1.68.1.1" />
    <PackageReference Include="SkiaSharp.NativeAssets.NanoServer" Version="1.68.1.1" />
  </ItemGroup>

I tried creating SkTypeface from file, stream, family name with the same result - SkTypeface is null. Also SkTypeface.CreateDefault() returns SkTypeface that is not null, but FamilyName is empty.

**Code**

            SKTypeface typeface = SKTypeface.FromFamilyName("Lucida Console", SKFontStyleWeight.Normal, SKFontStyleWidth.Normal, SKFontStyleSlant.Upright);
            Console.WriteLine("SkSKTypeface created from family name - {0}", typeface != null);

            const string fontFileName = @"C:\Windows\Fonts\lucon.ttf";
            typeface = SKTypeface.FromFile(fontFileName);
            Console.WriteLine("SkSKTypeface created from file name - {0}", typeface != null);

            using (FileStream fs = File.OpenRead(fontFileName))
            {
                typeface = SKTypeface.FromStream(fs);
                Console.WriteLine("SkSKTypeface created from stream - {0}", typeface != null);
            }

            typeface = SKTypeface.CreateDefault();
            Console.WriteLine(typeface.FamilyName);


When I try to open the SkiaSharp.Views.Mac namespace in an F# project targeting Xamarin.Mac Modern, I get a bunch of errors for a few System.Drawing types:

```
Error: A reference to the type 'System.Drawing.PointF' in assembly Xamarin.Mac was found,
but the type could not be found in the assembly.
```
including for Point, Size, SizeF, Rectangle, RectangleF.

This is with Visual Studio Mac 8.4.1 (build 4).

<img width="1440" alt="Screenshot 2020-01-16 at 12 22 38 PM" src="https://user-images.githubusercontent.com/2024912/72510043-acd91300-3883-11ea-9c67-fc20ad3680a8.png">

* These types seem to coincide with this type forwarding in xamarin.macios:
https://github.com/xamarin/xamarin-macios/blob/7f717f01ae9af6490866369b101f57baa0afb50a/src/System.Drawing/PointSizeRectangleTypeForwarders.cs

According to this Available Assemblies doc https://docs.microsoft.com/en-us/xamarin/cross-platform/internals/available-assemblies, System.Drawing is not supportedfor Xamarin.Mac Modern.

But it seems that there are extension methods in SkiaSharp.Views.Mac that use System.Drawing classes.
https://github.com/mono/SkiaSharp/blob/5e8dc3e2c9e72f2ad0d9feecefbef503ca9fcc15/source/SkiaSharp.Views/SkiaSharp.Views.Shared/Extensions.cs#L45

The preprocessor directives wrapping the System.Drawing extension methods indicate that they will be included for Mac.

`    #if !WINDOWS_UWP && !__TIZEN__`

---

However, a similar project in C# seems to work fine.

Could this be due to something that the F# project system does differently for the assemblies or can/should these System.Drawing extensions in SkiaSharp not be necessary for Mac (Modern target) since they aren't supported?

Here is a repo containing both C# and F# projects which are identical in function and does not use any System.Drawing types. https://github.com/danien/SkiaSharpViewsMacFSharpIssue
The F# project will not even build due to the above errors.

Any suggestions for how I can get around this issue if it can't be fixed, preferably without having to include the System.Drawing alternative mentioned in the Available Assemblies doc above since I don't really need it?

I'm not that familiar with the more advanced assemblies and project build systems in the .NET ecosystem so apologies in advance if I misunderstood something.

**Description**

Skia sharp measures wrong Width value while measuring Arabic Text (RTL issues).

**Code**

namespace portable_console
{

    class Program
    {
        static void Main(string[] args)
        {
            string text = "Welcome to syncfusion software private limited";
            float fontsize = 12f;

            float SystemDrawing = GDIMeasureString(text, fontsize);
            float Skia = SkiaMeasurements(text, fontsize);
            Console.WriteLine(Skia + " Skia sharp");
            Console.WriteLine(SystemDrawing + " GDI");
            Console.ReadLine();
        }
        /// <summary>
        /// Retrun skia measured width value
        /// </summary>
        /// <param name="text"></param>
        /// <param name="fontsize"></param>
        /// <returns></returns>
        private static float SkiaMeasurements(string text, float fontsize)
        {
            SKImageInfo info = new SKImageInfo(120, 120);
            float skiaMeasurement = 0;
            using (SKSurface surface = SKSurface.Create(info))
            {
                SKCanvas canvas = surface.Canvas;
                canvas.Clear(SKColors.White);
                using (SKPaint paint = new SKPaint())
                {
                    paint.Typeface = SKTypeface.FromFile(@"D:\font\traditional_arabic.ttf");
                    paint.Color = SKColors.Black;
                    paint.IsAntialias = true;
                    paint.TextSize = fontsize;
                    paint.SubpixelText = true;
                    paint.TextAlign = SKTextAlign.Left;
                    paint.TextEncoding = SKTextEncoding.Utf8;
                    SKRect rect = new SKRect();
                    skiaMeasurement = paint.MeasureText(text, ref rect);
                }
            }
            return skiaMeasurement;
        }
        /// <summary>
        /// Returns system.Drawing (GDI) measured width value.
        /// </summary>
        /// <param name="text"></param>
        /// <param name="fontsize"></param>
        /// <returns></returns>
        private static float GDIMeasureString(string text, float fontsize)
        {
            Bitmap bitmap = new Bitmap(540, 720);
            Graphics graphics = Graphics.FromImage(bitmap);
            // Create string to draw.
            String drawString = text;
            graphics.FillRectangle(Brushes.White, new System.Drawing.Rectangle(0, 0, (int)540, (int)720));
            // Create font and brush.
            Font drawFont = new Font("Traditional Arabic", fontsize, FontStyle.Regular, GraphicsUnit.Point);
            SolidBrush drawBrush = new SolidBrush(Color.Black);
            StringFormat drawFormat = new StringFormat(StringFormat.GenericTypographic);
            //remove the linelimit flag from create stringformat object.
            //The behavior of the linelimit flag is “only entire lines are laid out in the formatting rectangle”, 
            //By default layout continues until the end of the text, or until no more lines are visible as a result of clipping”.
            drawFormat.FormatFlags &= ~StringFormatFlags.LineLimit;
            drawFormat.FormatFlags |= StringFormatFlags.MeasureTrailingSpaces;
            drawFormat.FormatFlags |= StringFormatFlags.NoClip;
            graphics.PageUnit = GraphicsUnit.Point;

            drawFormat.Trimming = StringTrimming.Word;
            // Set format of string.
            float width = graphics.MeasureString(drawString, drawFont, new PointF(0, 0), drawFormat).Width;

            return width;
        }
    }
}

**Expected Behavior**

For English text eg: "Hello world" measures 93.57 point in both skia sharp and GDI,
For Arabic text eg: "مرحبا بكم في التزامن " width should be 66.21 points.  

**Actual Behavior**

Actual measurement was for "مرحبا بكم في التزامن " is 95.61 points, so there is 29.4 points, i have referred using harfbuzz but i cannot use third party module, please let me know if there is any way to achieve this in skia sharp in 1.59.3 version itself, or please confirm me whether it's a bug. 

**Basic Information**

- Version with issue:  1.59.3
- IDE:  Visual studio 2017
- Platform Target Frameworks: .Net core 2.1
**Description**

In version 1.68.1.1 PeekPixels() returns `null` on raster-images.

**Code**

            using (var image = SKImage.FromEncodedData(path))
            using (var rasterImage = image.ToRasterImage())
            {
                Debug.Assert(rasterImage.PeekPixels() != null);
            }
**Expected Behavior**

`image.ToRasterImage()` should return a raster image.
` PeekPixels()` should then return the pixmap of the raster-based image.

**Actual Behavior**

` PeekPixels()` returns null as if the image returned by ` image.ToRasterImage()` wouldn't be raster-based.

**Basic Information**

- Version with issue:  1.68.1.1
- IDE: Visual Studio
- Platform Target Frameworks: 
  - Windows Classic:  Windows 10

**Reproduction Link**
[PeekPixels.zip](https://github.com/mono/SkiaSharp/files/4048258/PeekPixels.zip)


**Description of Change**

Updated "SKTouchEventArgs" so it contains boolean "RequestDisallowIntercept" which will call the equal function in Androids SKTouchHandler to enable more control for the user like the solution of @FoggyFinder in #953 

Tests made but hang after "SkiaSharp.Tests.SKCodecTest.ReadOnlyStream [FINISHED] Time: 0,0163149s"

**Bugs Fixed**

- Related to issue #937 

**API Changes**

List all API changes here (or just put None), example:

Added: 
 
- bool SkiaSharp.Views.Forms.SKTouchEventArgs.RequestDisallowIntercept { get; set; }

**PR Checklist**

- [ ] Has tests (if omitted, state reason in description)
- [ ] Rebased on top of master at time of PR
- [x] Changes adhere to coding standard
- [ ] Updated documentation

**Description**

According to https://docs.microsoft.com/en-us/dotnet/api/skiasharp.skpaint.getglyphwidths?view=skiasharp-1.68.1 the return value of SKPaint.GetGlyphWidths is equal to the length of the input string

> Returns
Single[]
Returns the text advances **for each glyph**

In the given code sample this is not true, input string length and result length missmatch.
Also this seems to be a real bug, because if each char of the string is performed separately GetGlyphWidths works as expected.

**Code**

```
        [TestMethod]
        public void TestGlyphWidths()
        {
            //All ISO 10646 chars 
            const int maxChar = (char)65534;
            var builder = new StringBuilder(maxChar);
            for (var c = (char)0; c <= maxChar; c++)
            {
                builder.Append(c);
            }

            var s = builder.ToString();
            using (var newPaint = new SKPaint())
            {
                var glyphWidths = newPaint.GetGlyphWidths(s);

                //Assert below already fails: Assert.AreEqual failed. Expected:<65535>. Actual:<65534>. 
                Assert.AreEqual(s.Length, glyphWidths.Length);
            }

            //But the following works:
            foreach (var c in s)
            {
                using (var newPaint = new SKPaint())
                {
                    var glyphWidths = newPaint.GetGlyphWidths(c.ToString());
                    Assert.AreEqual(1, glyphWidths.Length);
                }
            }
        }
```
**Basic Information**

- Version with issue: 1.68.1.1
- Last known good version:  ?
- IDE:  Visual Studio 2017
- Platform Target Frameworks: 
I could reproduce it as a unit test, so it should be plattform indepentent (Originally observed in WPF and UWP).
**Description**

See attachted unit test: If a assign an array of SKColors to the SKBitmaps "Pixel"-Property the values arent the values I assigned.

**Code**
```

        [TestMethod]
        public void TestBitmapCreation()
        {
            using (var bitmap = new SKBitmap(1, 1, SKColorType.Bgra8888, SKAlphaType.Unpremul))
            {
                var newPixels = new SKColor[] {new SKColor(208, 208, 129, 13)};
                bitmap.Pixels = newPixels;
                Assert.AreEqual(bitmap.Pixels[0], newPixels[0]);
            }
        }
```

Output: Assert.AreEqual failed. Expected:<#0dd8d889>. Actual:<#0dd0d081>.

**Expected Behavior**

Assigned values should not be modified.

**Basic Information**

- Version with issue:  1.68.1.
- Last known good version:  ?
- IDE:  Visual Studio 2017 Professional
- Platform Target Frameworks: 
  -  I could reproduce it as a unit test, so it should be plattform indepentent (Originally observed in WPF and UWP).

