**What version of OR-tools and what language are you using?**
Version: v7.4
Language: Python

**Which solver are you using (e.g. CP-SAT, Routing Solver, GLOP, BOP, Gurobi)**
MIP with SCIP

**What operating system (Linux, Windows, ...) and version?**
macOS Catalina

**What did you do?**
Following instructions from https://developers.google.com/optimization/install/python/source_mac.
1. I downloaded SCIP (tried versions 6.0.0, 6.0.1, 6.0.2) and compiled using the make command as in instructions.
2. I added the path to the SCIP install folder to Makefile.local in ortools
3. When running make python, I get the following error:
```clang: error: no such file or directory: '.../scipoptsuite-6.0.1/install_dir/lib/libsoplex-pic.a'```

When looking in the install dir for SCIP, I can only find libsoplex.a, libsoplex-pic.a is not there. Have I missed some step or is the link to the libsoplex-pic.a file wrong?
Currently, the RELAX-IV algorithm is considered the most efficient.
I suggest using the following project to incorporate new ideas:

https://github.com/frangio68/Min-Cost-Flow-Class
Some convenience methods in the java interface:
- query the domain of an IntVar
- remove constraint in CpModel
- remove IntVar/IntervalVar in CpModel
The domain query would be really nice :-)
**What version of OR-tools and what language are you using?**
Version: 7.4.7247
Language: Python

Hello,
so i am trying to make a scenario such as to limit the number of nodes to be visited by the same vehicle after a certain node.
I control the problem with a time_dimension as well, but its irrelevant here.
so for instance if i choose node 20, and have a total number of nodes=40
then node 20 can be anywhere in the route as long as the max number of nodes to be visited after it is three 
how i thought i can do it is to make a capacity for vehicles = 40,
and let each node has a load of 1,
when node 20 is passed, then it resets the slackvar to 37,
that way it the vehicle can only take three more vehicles only

```python
capacity_dimension = routing.GetDimensionOrDie('Capacity')
capacity_dimension.SlackVar(20).SetValue(37)
```

what can i do?

 thx
# Issue
Once calling the method `RoutingModel::ReadAssignmentFromRoutes()`

The method `RoutingModel::SolveFromAssignmentWithParameters()` or `RoutingModel::SolveWithParameters` ignore the SearchParameter argument (without any warning)...

i.e.
1. The log search parameter is ignored and does not print anything.
2. The solver seems to fall back to a greedy descent instead of using the specified metaheuristic. I checked it by using a solution obtained by a greedy descent without initial solution. This solution is close to the best one obtained when using the GLS metaheuristic without initial solution. Yet the solver can not find it because it requires to degrade the solution, which is impossible with a greedy descent.

# Test
## Environment
OR tools version : 7.4
OS: Ubuntu 18.04 using binaries.
## Test samples
Here is the tested code (modified version of the CVRP tutorial code)
```cpp
// [START program]
// [START import]
#include "ortools/constraint_solver/routing.h"
#include "ortools/constraint_solver/routing_enums.pb.h"
#include "ortools/constraint_solver/routing_index_manager.h"
#include "ortools/constraint_solver/routing_parameters.h"
#include <iterator>
// [END import]

namespace operations_research {
// [START data_model]
struct DataModel {
  const std::vector<std::vector<int64>> distance_matrix{
      {0, 548, 776, 696, 582, 274, 502, 194, 308, 194, 536, 502, 388, 354, 468,
       776, 662},
      {548, 0, 684, 308, 194, 502, 730, 354, 696, 742, 1084, 594, 480, 674,
       1016, 868, 1210},
      {776, 684, 0, 992, 878, 502, 274, 810, 468, 742, 400, 1278, 1164, 1130,
       788, 1552, 754},
      {696, 308, 992, 0, 114, 650, 878, 502, 844, 890, 1232, 514, 628, 822,
       1164, 560, 1358},
      {582, 194, 878, 114, 0, 536, 764, 388, 730, 776, 1118, 400, 514, 708,
       1050, 674, 1244},
      {274, 502, 502, 650, 536, 0, 228, 308, 194, 240, 582, 776, 662, 628, 514,
       1050, 708},
      {502, 730, 274, 878, 764, 228, 0, 536, 194, 468, 354, 1004, 890, 856, 514,
       1278, 480},
      {194, 354, 810, 502, 388, 308, 536, 0, 342, 388, 730, 468, 354, 320, 662,
       742, 856},
      {308, 696, 468, 844, 730, 194, 194, 342, 0, 274, 388, 810, 696, 662, 320,
       1084, 514},
      {194, 742, 742, 890, 776, 240, 468, 388, 274, 0, 342, 536, 422, 388, 274,
       810, 468},
      {536, 1084, 400, 1232, 1118, 582, 354, 730, 388, 342, 0, 878, 764, 730,
       388, 1152, 354},
      {502, 594, 1278, 514, 400, 776, 1004, 468, 810, 536, 878, 0, 114, 308,
       650, 274, 844},
      {388, 480, 1164, 628, 514, 662, 890, 354, 696, 422, 764, 114, 0, 194, 536,
       388, 730},
      {354, 674, 1130, 822, 708, 628, 856, 320, 662, 388, 730, 308, 194, 0, 342,
       422, 536},
      {468, 1016, 788, 1164, 1050, 514, 514, 662, 320, 274, 388, 650, 536, 342,
       0, 764, 194},
      {776, 868, 1552, 560, 674, 1050, 1278, 742, 1084, 810, 1152, 274, 388,
       422, 764, 0, 798},
      {662, 1210, 754, 1358, 1244, 708, 480, 856, 514, 468, 354, 844, 730, 536,
       194, 798, 0},
  };
  // [START demands_capacities]
  const std::vector<int64> demands{
      0, 1, 1, 2, 4, 2, 4, 8, 8, 1, 2, 1, 2, 4, 4, 8, 8,
  };
  const std::vector<int64> vehicle_capacities{15, 15, 15, 15};
  // [END demands_capacities]
  const int num_vehicles = 4;
  const RoutingIndexManager::NodeIndex depot{0};
};
// [END data_model]

// [START solution_printer]
//! @brief Print the solution.
//! @param[in] data Data of the problem.
//! @param[in] manager Index manager used.
//! @param[in] routing Routing solver used.
//! @param[in] solution Solution found by the solver.
void PrintSolution(const DataModel &data, const RoutingIndexManager &manager,
                   const RoutingModel &routing, const Assignment &solution) {
  int64 total_distance{0};
  int64 total_load{0};
  for (int vehicle_id = 0; vehicle_id < data.num_vehicles; ++vehicle_id) {
    int64 index = routing.Start(vehicle_id);
    LOG(INFO) << "Route for Vehicle " << vehicle_id << ":";
    int64 route_distance{0};
    int64 route_load{0};
    std::stringstream route;
    while (routing.IsEnd(index) == false) {
      int64 node_index = manager.IndexToNode(index).value();
      route_load += data.demands[node_index];
      route << node_index << " Load(" << route_load << ") -> ";
      int64 previous_index = index;
      index = solution.Value(routing.NextVar(index));
      route_distance += routing.GetArcCostForVehicle(previous_index, index,
                                                     int64{vehicle_id});
    }
    LOG(INFO) << route.str() << manager.IndexToNode(index).value();
    LOG(INFO) << "Distance of the route: " << route_distance << "m";
    LOG(INFO) << "Load of the route: " << route_load;
    total_distance += route_distance;
    total_load += route_load;
  }
  LOG(INFO) << "Total distance of all routes: " << total_distance << "m";
  LOG(INFO) << "Total load of all routes: " << total_load;
  LOG(INFO) << "";
  LOG(INFO) << "Advanced usage:";
  LOG(INFO) << "Problem solved in " << routing.solver()->wall_time() << "ms";
}
// [END solution_printer]

void VrpCapacity() {
  constexpr bool use_initial_solution = true;
  // Instantiate the data problem.
  // [START data]
  DataModel data;
  // [END data]

  // Create Routing Index Manager
  // [START index_manager]
  RoutingIndexManager manager(data.distance_matrix.size(), data.num_vehicles,
                              data.depot);
  // [END index_manager]

  // Create Routing Model.
  // [START routing_model]
  RoutingModel routing(manager);
  // [END routing_model]

  // Create and register a transit callback.
  // [START transit_callback]
  const int transit_callback_index = routing.RegisterTransitCallback(
      [&data, &manager](int64 from_index, int64 to_index) -> int64 {
        // Convert from routing variable Index to distance matrix NodeIndex.
        int from_node = manager.IndexToNode(from_index).value();
        int to_node = manager.IndexToNode(to_index).value();
        return data.distance_matrix[from_node][to_node];
      });
  // [END transit_callback]

  // Define cost of each arc.
  // [START arc_cost]
  routing.SetArcCostEvaluatorOfAllVehicles(transit_callback_index);
  // [END arc_cost]

  // Add Capacity constraint.
  // [START capacity_constraint]
  const int demand_callback_index = routing.RegisterUnaryTransitCallback(
      [&data, &manager](int64 from_index) -> int64 {
        // Convert from routing variable Index to demand NodeIndex.
        int from_node = manager.IndexToNode(from_index).value();
        return data.demands[from_node];
      });
  routing.AddDimensionWithVehicleCapacity(
      demand_callback_index,   // transit callback index
      int64{0},                // null capacity slack
      data.vehicle_capacities, // vehicle maximum capacities
      true,                    // start cumul to zero
      "Capacity");
  // [END capacity_constraint]

  // Setting first solution heuristic.
  // [START parameters]
  RoutingSearchParameters searchParameters = DefaultRoutingSearchParameters();
  searchParameters.set_local_search_metaheuristic(
      LocalSearchMetaheuristic::GUIDED_LOCAL_SEARCH);
  google::protobuf::Duration *time_limit = new google::protobuf::Duration();
  time_limit->set_seconds(10);
  searchParameters.set_allocated_time_limit(time_limit);
  searchParameters.set_log_search(true);

  // [END parameters]

  // Solve the problem.
  // [START solve]
  const Assignment *solution = nullptr;
  if (use_initial_solution) {
    // Start with an initial solution
    // [START init]
    std::vector<std::vector<int64>> node_solution = {
        {1, 3, 4, 7}, {2, 5, 6, 8}, {9, 10, 13, 15}, {11, 12, 14, 16}};
    // Uncomment to start with a solution close to the best one obtained from
    // the GLS
    //    std::vector<std::vector<int64>> node_solution = {
    //        {1, 4, 3, 15}, {14, 16, 10, 2}, {7, 13, 12, 11}, {9, 8, 6, 5}};
    const Assignment *initial_solution =
        routing.ReadAssignmentFromRoutes(node_solution, true);
    LOG(INFO) << "Initial solution: ";
    PrintSolution(data, manager, routing, *initial_solution);
    // [START init]

    solution = routing.SolveFromAssignmentWithParameters(initial_solution,
                                                         searchParameters);
  } else {
    solution = routing.SolveWithParameters(searchParameters);
  }

  // Print solution on console.
  // [START print_solution]
  if (solution)
    PrintSolution(data, manager, routing, *solution);
  // [END print_solution]
}
} // namespace operations_research

int main(int argc, char **argv) {
  operations_research::VrpCapacity();
  return EXIT_SUCCESS;
}
// [END program]
```

```python
# Set default search parameters.
    search_parameters = pywrapcp.DefaultRoutingSearchParameters()
    search_parameters.solution_limit = 200
    search_parameters.local_search_metaheuristic = routing_enums_pb2.LocalSearchMetaheuristic.GREEDY_DESCENT #routing_enums_pb2.LocalSearchMetaheuristic.SIMULATED_ANNEALING
    search_parameters.log_search = True
```

Using different Local search metaheuristics on the or-tools vrp code results in the same solution every time......is there something I am doing wrong or don't understand about or-tools
Crash Logs 


A fatal error has been detected by the Java Runtime Environment:
SIGSEGV (0xb) at pc=0x0000000124b88cb7, pid=921, tid=0x0000000000005103
JRE version: Java(TM) SE Runtime Environment (8.0_172-b11) (build 1.8.0_172-b11)
Java VM: Java HotSpot(TM) 64-Bit Server VM (25.172-b11 mixed mode bsd-amd64 compressed oops)
Problematic frame:
C  [libjniortools.jnilib+0x4fcb7]  _ZN7JNIEnv_15DeleteGlobalRefEP8_jobject+0x7
Failed to write core dump. Core dumps have been disabled. To enable core dumping, try "ulimit -c unlimited" before starting Java again
If you would like to submit a bug report, please visit:
 http://bugreport.java.com/bugreport/crash.jsp
The crash happened outside the Java Virtual Machine in native code.
 See problematic frame for where to report the bug.

---------------  T H R E A D  ---------------

Current thread (0x00007fc218847000):  JavaThread "Finalizer" daemon [_thread_in_native, id=20739, stack(0x000070001041a000,0x000070001051a000)]

siginfo: si_signo: 11 (SIGSEGV), si_code: 1 (SEGV_MAPERR), si_addr: 0x00000000000000c0

Registers:
RAX=0x0000000000000010, RBX=0x00007fc21e424310, RCX=0x0000000000000000, RDX=0x000000000004b740
RSP=0x0000700010519610, RBP=0x0000700010519610, RSI=0x00007fc219c84e48, RDI=0x00007fc2183e39f8
R8 =0x0000000000000000, R9 =0x00007fc21e0b3a90, R10=0x0000000000000001, R11=0x0000000000000001
R12=0x00007fc21d2ca200, R13=0x00007fc21d2ca2f8, R14=0x00007fc21e441720, R15=0x00007fc21e441828
RIP=0x0000000124b88cb7, EFLAGS=0x0000000000010206, ERR=0x0000000000000004
  TRAPNO=0x000000000000000e

Top of Stack: (sp=0x0000700010519610)
0x0000700010519610:   0000700010519620 0000000124ba11d3
0x0000700010519620:   0000700010519640 0000000124ba1385
0x0000700010519630:   0000000124c84bf8 00007fc21e424310
0x0000700010519640:   0000700010519660 0000000124ba133e
0x0000700010519650:   0000000124c84bf8 00007fc21e43b590
0x0000700010519660:   0000700010519680 0000000124be45e2
0x0000700010519670:   0000000124c84bf8 00007fc21e441750
0x0000700010519680:   0000700010519740 000000012b25c4e8
0x0000700010519690:   00007000105196d0 0000000000000000
0x00007000105196a0:   00007fc21d2ca200 00007fc21d2ca2f8
0x00007000105196b0:   00007fc21d2caa18 0000000124c62080
0x00007000105196c0:   0000000000000000 0000000000000000
0x00007000105196d0:   0000000000000000 0000000000000000
0x00007000105196e0:   0000000000000000 0000000124c62080
0x00007000105196f0:   0000000000000000 0000000000000000
0x0000700010519700:   0000000000000000 0000000000000000
0x0000700010519710:   0000000000000000 00007fc21d2ca200
0x0000700010519720:   0000000000000000 0000000124a35f68
0x0000700010519730:   00007000105197e8 00007fc218847000
0x0000700010519740:   0000700010519760 0000000124b81446
0x0000700010519750:   0000000124b81430 0000000124a35f68
0x0000700010519760:   00007000105197c0 00000001113d7667
0x0000700010519770:   00007000105197b0 00000001113d7382
0x0000700010519780:   0000700010519780 0000000124a35f68
0x0000700010519790:   00007000105197e8 0000000124a46270
0x00007000105197a0:   0000000000000000 0000000124a35f68
0x00007000105197b0:   0000000000000000 00007000105197e0
0x00007000105197c0:   0000700010519840 00000001113c72bd
0x00007000105197d0:   00000007ad201e58 00000001113d0d18
0x00007000105197e0:   00007fc21d2ca200 00000007ade603b0
0x00007000105197f0:   00000017c2e70609 00000007ade603b0
0x0000700010519800:   00007000105197f0 0000000124948fd9 

Instructions: (pc=0x0000000124b88cb7)
0x0000000124b88c97:   48 8b 80 18 07 00 00 5d ff e0 66 2e 0f 1f 84 00
0x0000000124b88ca7:   00 00 00 00 0f 1f 44 00 00 55 48 89 e5 48 8b 07
0x0000000124b88cb7:   48 8b 80 b0 00 00 00 5d ff e0 66 2e 0f 1f 84 00
0x0000000124b88cc7:   00 00 00 00 0f 1f 44 00 00 55 48 89 e5 48 8b 07 

Register to memory mapping:

RAX=0x0000000000000010 is an unknown value
RBX=0x00007fc21e424310 is an unknown value
RCX=0x0000000000000000 is an unknown value
RDX=0x000000000004b740 is an unknown value
RSP=0x0000700010519610 is pointing into the stack for thread: 0x00007fc218847000
RBP=0x0000700010519610 is pointing into the stack for thread: 0x00007fc218847000
RSI=0x00007fc219c84e48 is a global jni handle
RDI=0x00007fc2183e39f8 is an unknown value
R8 =0x0000000000000000 is an unknown value
R9 =0x00007fc21e0b3a90 is an unknown value
R10=0x0000000000000001 is an unknown value
R11=0x0000000000000001 is an unknown value
R12=0x00007fc21d2ca200 is an unknown value
R13=0x00007fc21d2ca2f8 is an unknown value
R14=0x00007fc21e441720 is an unknown value
R15=0x00007fc21e441828 is an unknown value


Stack: [0x000070001041a000,0x000070001051a000],  sp=0x0000700010519610,  free space=1021k
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)
C  [libjniortools.jnilib+0x4fcb7]  _ZN7JNIEnv_15DeleteGlobalRefEP8_jobject+0x7
C  [libjniortools.jnilib+0x681d3]  _ZN14GlobalRefGuardD2Ev+0x13
C  [libjniortools.jnilib+0x68385]  _ZNSt3__114__shared_count16__release_sharedEv+0x25
C  [libjniortools.jnilib+0x6833e]  _ZNSt3__119__shared_weak_count16__release_sharedEv+0xe
C  [libjniortools.jnilib+0xab5e2]  _ZNSt3__110__function6__funcIZ86Java_com_google_ortools_constraintsolver_mainJNI_RoutingModel_1registerTransitCallbackE4$_91NS_9allocatorIS2_EEFxxxEE18destroy_deallocateEv+0x12
C  [libortools.dylib+0x4de4e8]  _ZN19operations_research12RoutingModelD2Ev+0x4f8
C  [libjniortools.jnilib+0x48446]  Java_com_google_ortools_constraintsolver_mainJNI_delete_1RoutingModel+0x16
j  com.google.ortools.constraintsolver.mainJNI.delete_RoutingModel(J)V+0
j  com.google.ortools.constraintsolver.RoutingModel.delete()V+25
j  com.google.ortools.constraintsolver.RoutingModel.finalize()V+1
J 3634 C2 java.lang.ref.Finalizer.access$100(Ljava/lang/ref/Finalizer;Lsun/misc/JavaLangAccess;)V (6 bytes) @ 0x0000000111c9ef10 [0x0000000111c9ed20+0x1f0]
j  java.lang.ref.Finalizer$FinalizerThread.run()V+45
v  ~StubRoutines::call_stub
V  [libjvm.dylib+0x2f0b3a]
V  [libjvm.dylib+0x2f12de]
V  [libjvm.dylib+0x2f148a]
V  [libjvm.dylib+0x34bdb1]
V  [libjvm.dylib+0x570a2f]
V  [libjvm.dylib+0x57212a]
V  [libjvm.dylib+0x48f2f6]
C  [libsystem_pthread.dylib+0x333d]  _pthread_body+0x7e
C  [libsystem_pthread.dylib+0x62a7]  _pthread_start+0x46
C  [libsystem_pthread.dylib+0x2425]  thread_start+0xd
C  0x0000000000000000

Java frames: (J=compiled Java code, j=interpreted, Vv=VM code)
j  com.google.ortools.constraintsolver.mainJNI.delete_RoutingModel(J)V+0
j  com.google.ortools.constraintsolver.RoutingModel.delete()V+25
j  com.google.ortools.constraintsolver.RoutingModel.finalize()V+1
J 3634 C2 java.lang.ref.Finalizer.access$100(Ljava/lang/ref/Finalizer;Lsun/misc/JavaLangAccess;)V (6 bytes) @ 0x0000000111c9ef10 [0x0000000111c9ed20+0x1f0]
j  java.lang.ref.Finalizer$FinalizerThread.run()V+45
v  ~StubRoutines::call_stub




Code Snippet 

```
private fun orToolsSolver(dataModel: DataModel): HashMap<Int, ArrayList<Long>> {
        val resourceConstraints: ResourceConstraints = get()
        val dimensionConstraints: DimensionConstraints = get()
        val penaltiesConstraints: PenaltiesAndDroppingVisitConstraints = get()

        val dd = dataModel.timeDistancePair.first

        val manager = RoutingIndexManager(dd.size, dataModel.mVehicleList.size, dataModel.depot)
        val routing = RoutingModel(manager)

        val transitCallbackIndex = routing.registerTransitCallback { fromIndex: Long, toIndex: Long ->
            // Convert from routing variable Index to user NodeIndex.
            val fromNode = manager.indexToNode(fromIndex)
            val toNode = manager.indexToNode(toIndex)
            dd[fromNode][toNode]
        }
        routing.setArcCostEvaluatorOfAllVehicles(transitCallbackIndex)

        val demandCallbackIndex = routing.registerUnaryTransitCallback { fromIndex: Long ->
            // Convert from routing variable Index to user NodeIndex.
            val fromNode = manager.indexToNode(fromIndex)
            dataModel.demands[fromNode]
        }
        routing.addDimensionWithVehicleCapacity(
            demandCallbackIndex, 0, // null capacity slack
            dataModel.vehicleCapacities.toLongArray(), // vehicle maximum capacities
            true, // start cumul to zero
            "Capacity"
        )

        resourceConstraints.applyResourceConstraint(dataModel, manager, routing)
        dimensionConstraints.applyDimensionConstraint(dataModel, manager, routing)
        penaltiesConstraints.applyPenaltyConstraint(dataModel, manager, routing)

        val searchParameters = main.defaultRoutingSearchParameters()
            .toBuilder()
            .setFirstSolutionStrategy(FirstSolutionStrategy.Value.PATH_CHEAPEST_ARC)
            .build()

        val solution = routing.solveWithParameters(searchParameters)

        val ret = returnResult(routing, manager, solution, dataModel.mVehicleList.size, dataModel.demands)
        return ret
    }

// ResouceConstraints File

private fun applyResourceConstraint(dataModel: DataModel, manager: RoutingIndexManager,
                                       routing: RoutingModel) {
        val map = ConstraintsUtility.prepareCustomerToVehiclesMap(dataModel, masterDataDao)
        dataModel.nodeToAllowedDriversMap = map
        for (index in 0 until dataModel.customerMap.size) {
            // here +1 to bypass depot i.e. there is no restriction on depot
            val pickupIndex = manager.nodeToIndex(index + 1)
            routing.setAllowedVehiclesForIndex(dataModel.nodeToAllowedDriversMap[index], pickupIndex)
        }
    }


// Dimension Constraint File

private fun applyDimensionConstraint(
        dataModel: DataModel,
        manager: RoutingIndexManager,
        routing: RoutingModel
    ) {
        val maxCeilingAmount = dataModel.ceilingAmount.max() ?: 0
        val vehicleNumber = dataModel.mVehicleList.size
        for (i in 0 until vehicleNumber) {
            val earnedAmount = maxCeilingAmount - dataModel.ceilingAmount[i]
            routing.setFixedCostOfVehicle(earnedAmount, i)
        }
    }


// Penalty Constraints File

private fun addPenaltyConstraints(dataModel: DataModel, manager: RoutingIndexManager, routing: RoutingModel) {
        val distMat = dataModel.timeDistancePair.first
        val noOfNodes = distMat.size // including depot
        var maxNodeDistance = 0L
        distMat.forEach {
            val max = it.max() ?: 0
            maxNodeDistance = if (maxNodeDistance < max) max else maxNodeDistance
        }

        val basePenalty = getbasePenality(dataModel, maxNodeDistance, noOfNodes)

        for (i in 1 until noOfNodes) {
            val penalty = basePenalty + dataModel.nodePriority[i] * maxNodeDistance
            dataModel.penalty.add(penalty)
            routing.addDisjunction(longArrayOf(manager.nodeToIndex(i)), penalty)
        }
    }
```
Hi!

I would like to ask which local search strategy the implementation of guided local search is using. Fast local search or greedy local search?

If greedy local search is used is there any way to enable fast local search?

I'm using or-tools v7.1

Thank you.
I'm using the routing library in order to solve some VRPs. I'm trying to use Solver::Reseed().Expecting to see different results in the search log but every time i get exactly the same log. The results seems to be deterministic.
Is there a flag or any other specific configuration that i need to do?
 
using or tools 7.1
best_insertion
C++
and guided local search
 
 
if you need more info i will be more than happy to help 
 
related issues 
https://github.com/google/or-tools/issues/1804
https://github.com/google/or-tools/issues/1145
https://github.com/google/or-tools/issues/881
https://github.com/google/or-tools/issues/291
https://github.com/google/or-tools/issues/702
Hello! I need function SetSoftSpanUpperBoundForVehicle to penalize overdue time for each vehicle. The thing is that each vehicle has different limit of time, so I really need this function.
However, it seems such function exists only in C/C++ implementation. (routing.h, line 2344) 