This PR contains the following updates:

| Package | Type | Update | Change |
|---|---|---|---|
| [google-closure-library](https://developers.google.com/closure/library/) ([source](https://togithub.com/google/closure-library)) | devDependencies | major | [`20200101.0.0` -> `20200112.0.0`](https://renovatebot.com/diffs/npm/google-closure-library/20200101.0.0/20200112.0.0) |
| [google-closure-library](https://developers.google.com/closure/library/) ([source](https://togithub.com/google/closure-library)) | devDependencies | major | [`20190709.0.0` -> `20200112.0.0`](https://renovatebot.com/diffs/npm/google-closure-library/20190709.0.0/20200112.0.0) |

---

### Release Notes

<details>
<summary>google/closure-library</summary>

### [`v20200112.0.0`](https://togithub.com/google/closure-library/compare/e754d4a19bfd9332ba5dc8b62687500655f2d8b9...e754d4a19bfd9332ba5dc8b62687500655f2d8b9)

[Compare Source](https://togithub.com/google/closure-library/compare/e754d4a19bfd9332ba5dc8b62687500655f2d8b9...e754d4a19bfd9332ba5dc8b62687500655f2d8b9)

</details>

---

### Renovate configuration

:date: **Schedule**: "before 3am on Friday" (UTC).

:vertical_traffic_light: **Automerge**: Disabled by config. Please merge this manually once you are satisfied.

:recycle: **Rebasing**: Whenever PR becomes conflicted, or if you modify the PR title to begin with "`rebase!`".

:no_bell: **Ignore**: Close this PR and you won't be reminded about these updates again.

---

 - [ ] <!-- rebase-check -->If you want to rebase/retry this PR, check this box

---

This PR has been generated by [WhiteSource Renovate](https://renovate.whitesourcesoftware.com). View repository job log [here](https://app.renovatebot.com/dashboard#firebase/firebase-js-sdk).
This PR contains the following updates:

| Package | Type | Update | Change |
|---|---|---|---|
| [google-closure-compiler](https://developers.google.com/closure/compiler/) ([source](https://togithub.com/google/closure-compiler-npm)) | devDependencies | major | [`20190709.0.0` -> `20200112.0.0`](https://renovatebot.com/diffs/npm/google-closure-compiler/20190709.0.0/20200112.0.0) |

---

### Release Notes

<details>
<summary>google/closure-compiler-npm</summary>

### [`v20200112.0.0`](https://togithub.com/google/closure-compiler-npm/compare/v20200101.0.0...v20200112.0.0)

[Compare Source](https://togithub.com/google/closure-compiler-npm/compare/v20200101.0.0...v20200112.0.0)

### [`v20200101.0.0`](https://togithub.com/google/closure-compiler-npm/compare/v20191111.0.0...v20200101.0.0)

[Compare Source](https://togithub.com/google/closure-compiler-npm/compare/v20191111.0.0...v20200101.0.0)

### [`v20191111.0.0`](https://togithub.com/google/closure-compiler-npm/compare/v20191027.0.0...v20191111.0.0)

[Compare Source](https://togithub.com/google/closure-compiler-npm/compare/v20191027.0.0...v20191111.0.0)

### [`v20191027.0.0`](https://togithub.com/google/closure-compiler-npm/compare/v20190929.0.0...v20191027.0.0)

[Compare Source](https://togithub.com/google/closure-compiler-npm/compare/v20190929.0.0...v20191027.0.0)

### [`v20190929.0.0`](https://togithub.com/google/closure-compiler-npm/compare/v20190909.0.0...v20190929.0.0)

[Compare Source](https://togithub.com/google/closure-compiler-npm/compare/v20190909.0.0...v20190929.0.0)

### [`v20190909.0.0`](https://togithub.com/google/closure-compiler-npm/compare/v20190819.0.0...v20190909.0.0)

[Compare Source](https://togithub.com/google/closure-compiler-npm/compare/v20190819.0.0...v20190909.0.0)

### [`v20190819.0.0`](https://togithub.com/google/closure-compiler-npm/compare/v20190729.0.0...v20190819.0.0)

[Compare Source](https://togithub.com/google/closure-compiler-npm/compare/v20190729.0.0...v20190819.0.0)

### [`v20190729.0.0`](https://togithub.com/google/closure-compiler-npm/compare/v20190709.0.0...v20190729.0.0)

[Compare Source](https://togithub.com/google/closure-compiler-npm/compare/v20190709.0.0...v20190729.0.0)

</details>

---

### Renovate configuration

:date: **Schedule**: "before 3am on Friday" (UTC).

:vertical_traffic_light: **Automerge**: Disabled by config. Please merge this manually once you are satisfied.

:recycle: **Rebasing**: Whenever PR becomes conflicted, or if you modify the PR title to begin with "`rebase!`".

:no_bell: **Ignore**: Close this PR and you won't be reminded about this update again.

---

 - [ ] <!-- rebase-check -->If you want to rebase/retry this PR, check this box

---

This PR has been generated by [WhiteSource Renovate](https://renovate.whitesourcesoftware.com). View repository job log [here](https://app.renovatebot.com/dashboard#firebase/firebase-js-sdk).

Hi, I have witnessed a major bug with Firestore where when you update a document, one field failed to get updated while succeeding in other fields. There is no way I can reproduce it again, and there no debugging logs from Firestore that I have to give you, but the update method for document failed to update one field while updating the other two. in the below example once.

Is it possible that update for document fails for one field but not the others? Does the update gets written all together atomically? All or nothing?

I saw it happen in Firebase database console, after I called cloud function, it updated 2nd and 3rd rows, but not 1st row of the document (see below example). I am troubled by it, and without changing anything I re-ran the function, and all three field got updated just fine. But it is deeply troubling that sometimes firebase update would not update all fields.

I have stared at the code and really the dictionary key from the below example should have been updated, but it didn't. Codes around this "await" line got called meaning this code did get executed and updated two fields, and I know this for SURE. After staring at my code, there is no way that I could have caused this. Is it possible that Firestore update to a document field fails to write while succeeding in other fields in rare cases? My dictionaryObject is 2 dictionary objects inside a dictionary.

Let me know if this is ever possible.

```
await documentSnapShot.ref.update({
            dictionary: dictionaryObject,
            [`outerDictionary.${innerDictionaryKeyName}.fieldName`] : object1,
            [`outerDictionary.${innerDictionaryKeyName}.fieldName2`] : object1,
        }
```


### Describe your environment

  * Operating System version: macOS 10.14.6
  * Browser version: Chrome 79.0.3945.117
  * Firebase SDK version: 7.6.2
  * Firebase Product: firestore

### Describe the problem

When I'm updating a few hundred documents with batches, rendering is blocked while firestore is sending the changed documents back through the WebChannel. Having `firebase.firestore.setLogLevel("debug")` on I can see that I get a bunch of messages, one for each document change: `[Connection]: WebChannel received: {"documentChange": ...`. While these messages are received the rendering of my application is blocked.

Using `snapshot.docChanges()` I have already got the documents and rendered the changes, but the lag happens after that, while the server is responding with pending writes.
This breaks the dependency of SyncEngine and RemoteStore on indexeddb_persistence.ts and makes it easier to have a clean separation between 'yet-to-be-named-component' and 'firebase/firestore/persistence'.
<!-- Step 1 [READ THIS] -->
<!--
Are you in the right place?
  * For issues or feature requests related to __the code in this repository__
    file a Github issue.
    * If this is a __feature request__ make sure the issue title starts with "FR:".
  * For general technical questions, post a question on [StackOverflow](http://stackoverflow.com/)
    with the firebase tag.
  * For general Firebase discussion, use the [firebase-talk](https://groups.google.com/forum/#!forum/firebase-talk)
    google group.
  * For help troubleshooting your application that does not fall under one
    of the above categories, reach out to the personalized
    [Firebase support channel](https://firebase.google.com/support/).
-->

<!-- Step 2 -->

### [REQUIRED] Describe your environment

  * Operating System version: n/a
  * Browser version: n/a
  * Firebase SDK version: 7.6.2
  * Firebase Product: firestore

<!-- Step 3 -->

### [REQUIRED] Describe the problem

Using `CollectionReference#add`,Â the `.add()` command, returns a promise containing a WriteResult, but the documentation says it should be a DocumentReference.
- https://firebase.google.com/docs/reference/node/firebase.firestore.CollectionReference.html#add
- https://firebase.google.com/docs/reference/js/firebase.firestore.CollectionReference.html#add
- https://googleapis.dev/nodejs/firestore/latest/CollectionReference.html#add

```javascript
const admin = require('firebase-admin');
admin.intializeApp({ ... });
const db = admin.firestore();
db.collection('things').add({ a: 1 }).then((ref) => {
  // "ref" is of type WriteResult
  console.log(ref.id) // is undefined
})
```

**Update**: I do not see see this issue in the web version of the sdk, just in the admin `@google-cloud/firestore` thing.

Probably has something to do with this: https://github.com/googleapis/nodejs-firestore/blob/94ddc897400cafe5a1ee16f3ad0d285411bdd0b2/dev/test/typescript.ts#L158

I couldn't find any info online after digging for awhile so I am asking two important pricing questions below.

#1 From Firebase Video from https://www.youtube.com/watch?v=6NegFl9p_sE&feature=emb_logo Todd Kerpelman says that when you send messages in 1 on 1  chat in 10 minutes, there will be roughly 60 writes and 120 reads. I don't know why it is 120 reads? Shouldn't it be 60 writes and 60 reads from the other person? When you send a message, why would that count as 1 write AND 1 read? Why we have to pay more 1 read whenever you write once to a document?

#2 Does this mean when I do addSnapshotListenerWithIncludeMetadataChanges: instead of mere addSnapshotListener:, would I would get twice as more reads? Whenever you send a message, it would be 1 write, 1 read when hasPendingWrites = true, and 1 read when hasPendingWrites = false?

Thank you for answering my questions. Seems like Firebase will be pretty costly for messaging apps.
This is my current state. The code changes in /src are not meant to be looked at (and a bit hacky).

If you invoke `yarn build` in packages/firestore, it spits out two ESM files:

dist/thick-client/index.ems.js
dist/persistence/index.ems.js

The two things that I am still trying to figure out its: 
- How do I change `persistence` to import from `thick-client`? Right now, it imports all external dependencies from `src`.
- How do I export all internal state in `thick-client` so that `persistence` can find it?

Note that for now, this Rollup change is based on our existing code structure. If that is a blocker, we can split out code into multiple packages.