This is a minor issue, but should be relatively easy to correct.
While great care has gone into namespacing style rules for multiple xterm instances, one small detail has been overlooked.
The problem is that all CSS keyframe animation rules share the same `blink_block` name.
Because of this, all instances will share the last defined keyframe rule so that every instance will have the same cursor color regardless of theme.

The following excerpt from an xterm generated style block illustrates the problem.

```
<style>
@keyframes blink_block { 
    0% {  
        background-color: rgba(255, 255, 0, 1);
        color: rgba(0, 94, 0, 1);
    }
    50% {  
        background-color: rgba(0, 94, 0, 1);
        color: rgba(255, 255, 0, 1);
    }
}

...

.xterm-dom-renderer-owner-1 .xterm-rows.xterm-focus .xterm-cursor.xterm-cursor-blink.xterm-cursor-block { 
    animation: blink_block 1s step-end infinite;
}
</style>
```

Instead, you may consider just concatenating the integer used to uniquely identify the render owner to the end of the keyframe rule name as follows.

```
<style>
@keyframes blink_block_1 { 
    0% {  
        background-color: rgba(255, 255, 0, 1);
        color: rgba(0, 94, 0, 1);
    }
    50% {  
        background-color: rgba(0, 94, 0, 1);
        color: rgba(255, 255, 0, 1);
    }
}

...

.xterm-dom-renderer-owner-1 .xterm-rows.xterm-focus .xterm-cursor.xterm-cursor-blink.xterm-cursor-block { 
    animation: blink_block_1 1s step-end infinite;
}
</style>
```

My thanks to all contributors for the excellent work going into this project.

Take care



## Details
- Browser and browser version: Any
- OS version:  Any
- xterm.js version:  4.3.0

### Steps to reproduce

1.  Create multiple DOM rendered xterm.js instances within the same HTML document.
2.  Assign different themes to each instance, specifically cursor and cursorAccent.
3.  Transfer focus between the different instances to see the cursor color remains the same as the last one defined.

Fixes #2658.
Several sequences handlers of `InputHandler` show a different behavior than in xterm or officially specced in VT520 manual / DEC STD 070:
- ICH: should not work outside of scroll margins (for left/right)
- DCH: should not work outside of scroll margins (for left/right)
- SU: should add scrolled out lines to scrollback under certain circumstances
- DECSTR: lots of attributes are not reset
- DECRQSS: fix SGR reporting, decide how to deal with unsupported features that are still reported (DECSCA, DECSCL)
- LRM: commented out?
- no DECSET 5 (DECSCNM)
- DECSET 1049: does not clear altbuffer
- DECSET 12 (blinking cursor): why disabled?
- DECCOLM: reset is currently broken (already fixed in #2393)
- DA1 & DA2: responses are way off
- SGR: blinking is implemented in attrs, but does not work in renderers?
- SGR: remove dead branch for p=100
Tracking issue for better Unicode version support.

Things to do:
- create a build tool based on https://github.com/fluffos/fluffos/tree/master/src/thirdparty/widecharwidth to extract needed Unicode information for a specific version
- automate version addon creation as far as possible with the build tool
- options to treat ambiguous character as double width

better Unicode support in general:
- bidi and grapheme support
- long run: conceptual work towards a better unicode handling in terminals via terminal-wg
Causes issues for ports in URLs and Windows path drives
Hi,

I'm developing an application that consume telnet protocol data from an application using websocket , and  an core functionality missing is the ability to switch between line-mode and chractermode , and switch local-echo on and off base on server side request.  What's the best way to achieve this? 

Thanks


https://github.com/xtermjs/xterm.js/issues/985#issuecomment-570037111

Right now the canvas size is changed based on `window.devicePixelRatio`, one idea is to disable this type fo scaling (see how VS Code's minimap doesn't change when zooming) and then scale manually by applying a multiplier to relevant numbers.

Applies to WebGL and canvas renderers.
## Details
- Browser and browser version: Firefox 71.0
- OS version: macOS 10.15.2 - Finnish keyboard
- xterm.js version: 4.3.0

### Steps to reproduce

1. Type tilde + space or tilde + n
2. Observe that instead of getting ~ and ñ you get ~~ and ~ññ

### Description

For me on macOS, Fnnish keyboard, with Safari and Chrome a tilde + space results in ~ and tilde + n results in ñ as it should. But on Firefox a tilde + space results in ~~ and tilde + n results in ~ññ.

Interestingly this behavior difference can be seen (but a bit differently for some reason) on the https://xtermjs.org/ home page example terminal. If you enter tilde + space there on Safari you get nothing at all. Same for tilde + n. But with Firefox while tilde + space gets you nothing a tilde + n gets you ñ. Not sure why it's working differently there.

Debug logging shows the following when typing tilde + space on Firefox:

```
xterm.js: sending data "~" Array [ 126 ]
xterm.js: sending data "~" Array [ 126 ]
xterm.js: parsing data ~~
```

For tilde + n it shows:

```
xterm.js: sending data "~" Array [ 126 ]
xterm.js: sending data "ñ" Array [ 241 ]
xterm.js: sending data "ñ" Array [ 241 ]
xterm.js: parsing data ~
xterm.js: parsing data ññ
```

The "sending data" log lines reported by xterm.js also match what I'm seeing being sent to the onData() callback.

Note that there are differences in browsers and platforms with regards to what is reported when entering composed characters from e.g. compositionend vs. input vs. keydown vs. keypress events.

I should add that nothing is being sent until you hit space or n. That is, the initial tilde that starts the character compose does not result in any callbacks firing, whch is correct.

The sequence of keyboard events recording by attaching a custom keyboard handler using the Terminal API, for tilde + n is on Windows Firefox (71) with Finnish keyboard is the following:

```
keydown Control { target: textarea.xterm-helper-textarea, key: "Control", charCode: 0, keyCode: 17 }
keydown { target: textarea.xterm-helper-textarea, key: "AltGraph", charCode: 0, keyCode: 18 }
keydown { target: textarea.xterm-helper-textarea, key: "Dead", charCode: 0, keyCode: 160 }
keyup { target: textarea.xterm-helper-textarea, key: "Dead", charCode: 0, keyCode: 160 }
keyup { target: textarea.xterm-helper-textarea, key: "Control", charCode: 0, keyCode: 17 }
keyup { target: textarea.xterm-helper-textarea, key: "AltGraph", charCode: 0, keyCode: 18 }
keydown { target: textarea.xterm-helper-textarea, key: "ñ", charCode: 0, keyCode: 78 }
keyup { target: textarea.xterm-helper-textarea, key: "n", charCode: 0, keyCode: 78 }

```

On macOS with Firefox (71) with Finnish keyboard the sequence is:

```
keydown Alt { target: textarea.xterm-helper-textarea, key: "Alt", charCode: 0, keyCode: 18 }
keydown Alt { target: textarea.xterm-helper-textarea, key: "Dead", charCode: 0, keyCode: 160 }
keyup Alt { target: textarea.xterm-helper-textarea, key: "~", charCode: 0, keyCode: 160 }
keyup { target: textarea.xterm-helper-textarea, key: "Alt", charCode: 0, keyCode: 18 }
keydown { target: textarea.xterm-helper-textarea, key: "ñ", charCode: 0, keyCode: 78 }
keyup { target: textarea.xterm-helper-textarea, key: "n", charCode: 0, keyCode: 78 }
```
VS Code issue: https://github.com/microsoft/vscode/issues/84925

Canvas renderer:

![image](https://user-images.githubusercontent.com/2193314/71597170-0c4ec900-2af7-11ea-9064-69022ed838c1.png)
VS Code: https://github.com/microsoft/vscode/issues/86482