<!--
Before posting your issue, please check our FAQ:
    https://github.com/shelljs/shelljs/wiki/FAQ
-->
### Node version (or tell us if you're using electron or some other framework):

all

### ShellJS version (the most recent version/Github branch you see the bug on):

master

### Operating system:

all

### Description of the bug:

`shell.tail` doesn't support `+<num>` correctly. While it's true negative numbers should be treated the same as sign-less numbers (ex. `tail -n -10` means "print last 10 lines of file"), numbers with a `+` sign mean to print that numbered line and all lines following. So `tail -n +2 file.txt` means "print all lines except the first line."

### Example ShellJS command to reproduce the error:

```sh
$ shx tail -n +10 file_with_11_lines.txt
2
3
4
5
6
7
8
9
10
11

$ tail -n +10 file_with_11_lines.txt
10
11
```
Hello - Can you please give me the exact sed command to remove 1st line from a set of files. Basically I have a bunch of csv files and they do contain header as their 1st line. I first want to delete their headers and then merge all of those files into a single file. Thanks for your help in advance!

MC
I'm using NodeJS v10.13.0, with shelljs 0.8.3, under Mac OSX 10.13.6, and am performing a copy command, such as:
```
shell.cp('-RLu', srcDir, targDir);
```

My understanding is that -u should copy only newer files. But, after a copy, I am seeing the timestamp on the existing files in the target directory are changed to the current time, thus defeating the point of the copy operation to leave existing files unchanged.


<!--
Before posting your issue, please check our FAQ:
    https://github.com/shelljs/shelljs/wiki/FAQ
-->
### Node version (or tell us if you're using electron or some other framework):
8.10.0
### ShellJS version (the most recent version/Github branch you see the bug on):
0.5.3
### Operating system:
Windows 10
### Description of the bug:
Problem arises after a windows update in october 2019. Before the update when user had a space in username, the temp file created created a new folder with "%20" instead of the space in "C:\\Users\". After the update the command execSync is not able to run the command if the user has a space in username.
### Example ShellJS command to reproduce the error:
"C:\Program Files\nodejs\node.exe" C:\Users\FirstName LastName\AppData\Local\Temp\shelljs_clsjdbfljsbdfldf456456
```javascript

```

Github does not currently recognize the license of this project.  It says "View License" at the top.  Other BSD-3-Clause projects like [freeCodeCamp](https://github.com/freeCodeCamp/freeCodeCamp) clearly say BSD-3-Clause in the top bar.

It seems that Github is very finicky and expects the exact formatting as well as body text.  The license was reshaped to match the formatting of other projects, so with this change GH will finally recognize that shelljs is BSD-3-clause
### Node version (or tell us if you're using electron or some other framework):
12.1.0
### ShellJS version (the most recent version/Github branch you see the bug on):
0.8.3
### Operating system:
Windows
### Description of the bug:
sed is applied only once by line:
original archive:
`import [COMPONENTNAME]Base from './[COMPONENTNAME]Base'`;
`const [COMPONENTNAME] = styled( [COMPONENTNAME]Base );`
`export default [COMPONENTNAME];`

after execute:
`shell.sed( '-i', `\\[${"componentname".toUpperCase()}\\]`, "AUITest", "component.js"` );`

Result:
`import AUITestBase from './[COMPONENTNAME]Base';`
`const AUITest = styled( [COMPONENTNAME]Base );`
`export default AUITest;`


<!--
Before posting your issue, please check our FAQ:
    https://github.com/shelljs/shelljs/wiki/FAQ
-->
### Node version (or tell us if you're using electron or some other framework):
NodeJS 9.11.2
### ShellJS version (the most recent version/Github branch you see the bug on):
0.8.3/master
### Operating system:
WSL (Ubuntu) on Windows
### Description of the bug:
When running sed on multiple files a newline is introduced between the file contents
### Example ShellJS command to reproduce the error:
(Assuming file1.txt is `test1\n` and file2.txt is `test2\n`)
```javascript
shell.sed('test', 'hello', 'file*.txt');
```
Expected: `hello1\nhello2\n`
Got: `hello1\n\nhello2\n`
<!--
Before posting your issue, please check our FAQ:
    https://github.com/shelljs/shelljs/wiki/FAQ
-->
### Node version (or tell us if you're using electron or some other framework):
v12.8.1

### ShellJS version (the most recent version/Github branch you see the bug on):
0.8.3

### Operating system:
Ubuntu 18.04.3 LTS

### Description of the bug:

First of all, thanks for an amazing library, it has been working great for me in all cases I needed it. Apart from today that I tried bundling one of my Node apps.

It would be great if the calls to `requires` were explicit and not dynamic as it's done at https://github.com/shelljs/shelljs/blob/57df38c6ea264493a4219547331f2be049494ed5/shell.js#L24-L26

Reason is that when we want to bundle the whole Node application/script into a single JS file, it's impossible to get it to bundle correctly. 

One example is something I was trying to do today using Shadow-CLJS; more details at https://github.com/thheller/shadow-cljs/issues/290#issuecomment-524626179

I tried almost every popular bundler, including [`@zeit/ncc`](https://www.npmjs.com/package/@zeit/ncc), [`Parcel-bundler`](https://parceljs.org), [`Rollup`](https://rollupjs.org/guide/en/), and finally [`Webpack`](https://webpack.js.org/).

To be honest, I believe `webpack` managed to resolve the dynamic `requires` but then had other issues with `__dirname` which I use in my code (whole other different issue).

However, it would be much easier to integrate with these bundlers if the `requires` calls were explicit. Any specific reason why you go through the indirection of `array of strings` and a loop to require versus the direct require of the commands (other than saving a few characters)?

Thanks
Fixes [issue #159](https://github.com/shelljs/shx/issues/159) with shx
Node version (or tell us if you're using electron or some other framework): v8.11.1

ShellJS version: 0.8.3

Operating system: linux

Description of the bug: sed command is omitting characters at the end of the file.

Example ShellJS command to reproduce the error:
cat file.log:
{MessageId: '0001', Body: 'sometexthere', Timestamp: '1561356344876' }

shelljs.sed('-i', 'MessageId:', 'QueueId: QN001, MessageId: ', 'file.log');

cat file.log:
{QueueId: QN001, MessageId: '0001', Body: 'sometexthere', Timestamp: '156





