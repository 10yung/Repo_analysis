Fantastic git!

I'm wondering if anyone has tried to capture and analyse the CSI data in real-time using this extractor?

I've seen people successfully do it with this approach, though can't see anything on this git about it. 

My guess is if sticking to the original approach, you'd somehow have to feed back the constantly updating .pcap file from the Nexus 5 to the computer and then adjust the Matlab code to somehow constantly run the updated file?

Many thanks for anyone's thoughts!
Hi, 

I have the trouble with the collected CSI data from Nexus 5 phone. My CSI data is scattering (some subcarriers's signals are on/off suddenly). There are 2 unchanged subcarriers (32 and 61). I compared that result with the provided sample files (experiment2c_outside). The patterns are totally different, the sample files are very stable & consistent.  

My router is TPlink AC1750 router (channel 36, 5GHz, 20 MHz). The filter is set for Beacon Frames ( 0x8000).

What is the problem here? Does Nemon work with any type of WiFi router or I have to use 2 Nexus 5 (one as the transmitter, one as the receiver) like the sample files?

Thank you so much for your help. 

![image](https://user-images.githubusercontent.com/22141080/55114963-936e9c80-50a0-11e9-8a26-24b9af434e5f.png)
 
![image](https://user-images.githubusercontent.com/22141080/55115430-b51c5380-50a1-11e9-8efb-21667ddd4a8c.png)

Hey,
I wanted to know how I can use/port this tool for my Raspberry Pi Zero, so that CSi Extraction could be done for my project. 
@matthiasseemoo had a paper on Nexmon from Wintech2017 but that paper couldn't be found anywhere (https://seemoo.de/mschulz/wintech2017 - This was the link which was provided everywhere but it doesn't exist) .
If anybody was able to port this tool to another device, it would really help me if you could share what and how I could do it for the Raspberry Pie Zero.
Diving into the data a bit, i'm seeing that only about a quarter of the UDP payload data is changing from packet to packet.  Seems strange.

AP is on channel 149, init string was:

echo "3cd0010080000000ffffffffffffb6fbe4196e08" | xxd -r -p | base64

pcap attached.  (I sniffed the UDP traffic with tcpdump, dumped to a file, adb pulled that.)

[mon2.pcap.zip](https://github.com/seemoo-lab/mobisys2018_nexmon_channel_state_information_extractor/files/2715360/mon2.pcap.zip)

>>> r
array([[  255,   255,   255, ..., -3315,  7193,  -522],
       [  255,   255,   255, ..., -3315,  7193,  -522],
       [ -256,    -1,    -1, ..., -3315,  7193,  -522],
       ...,
       [   -1,    -1,    -1, ..., -3315,  7193,  -522],
       [    0,     0,     0, ..., -3315,  7193,  -522],
       [  255,   255,   255, ..., -3315,  7193,  -522]], dtype=int16)


Everything appears to build fine on Bionic but the resulting firmware doesn't appear to work.  I managed to build under a Docker Xenial environment, after hitting a fair number of missing dependencies (build-essential, file, vim, bison, flex, maybe one or two others).  It's a bear getting adb working from inside a container, but ultimately copying fw*bin to /vendor/firmware via the host worked.

The failed image does something wonky too.  wlan0 stays down even after backup restoration and power cycle.  Need to return to a full backup.

Could use slightly less opaque ioctl syntax :)
Hello,
After we complete the installation, when we execute "nexutil -s500 -l20 -b -vZNABAIAAAAD///////+cIWoPIF4=", such a error  “__nex_driver_io: error” occurred. We don't know what went wrong. Could you give us some advice? We would appreciate your help very much.
Looking forward to your reply .
Hello.
I am not sure how to define the first 4 bytes 64d0 of: 64d0010080000000ffffffffffff001122334455
Iv'e tried to enable all of the bits with ffff, but the results of tcpdump does not contain CSI information.

Thank you.
Hello,
I have implemented this patch on the Nexus 5 to extract CSI on Channel 44 of the 5GHz band.
Currently, the beacon frame of the router can be seen which occurs at 100ms
increments. I am inside with no known connections to the router. Will extracting CSI from this frame be too fast for the firmware?

Router: Sagemcom (4883c7d27897)
I have attached two files, one showing the beaconing of the router and another with CSI output of the channel at a different time. It looks like somehow the filter I applied "2cd0010080000000ffffffffffff4883c7d27897" was rotated for the packets that did not output properly.

Any and all help would be appreciated. Thank you!
[data.tar.gz](https://github.com/seemoo-lab/mobisys2018_nexmon_channel_state_information_extractor/files/2088050/data.tar.gz)


hello, 
Since the nexmon framwork can support raspberry pi 3+(bcm43430a1), 
so is there any chance that we can extract channel state information on raspberry pi 3+(bcm43430a1)?


Hello, under the nexmon framework, you continued to do a tool to extract CSI. However, there are a few things I'd like to learn.
1: I have read the source code of UCODE, and there is no hint of CSI, how do you know where is CSI? Can all BCM wifi SoCs extract the CSI of OFDM?
2: Where is the CSI address in D11 core? Are all BCM SoCs the same? What's the CSI address of different antennas?
