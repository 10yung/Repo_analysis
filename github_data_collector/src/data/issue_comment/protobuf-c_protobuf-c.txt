Hello, 

I have a protobuf code in Python that writes my data to a .bin file, and I need to read that data from that .bin file using C, using the protobuf-c I did the generation of the libraries for C and protobuf --python to get the library for python for the same proto file. 

The writing is good however the reading I am facing so much issues. Please help me with it, As I cannot find a solution to this elsewhere. 
I am new to protobuf-c, I want to know how the .proto file complier works, so I plan to debug a single test case to learn about the C code generation process. Can someone tell me how to do it?

Thanks.

Linking with libprotobuf-c.a will cause `relocation R_X86_64_32 ...` error currently. Can we add `-fPIC` in the configure.ac file?
 I have tried to build according to documentation, but I just got a `protoc-gen-c`. It looks to depend on `protobuf` and `libprotoXXX.dylib` on my machine.

How can I  get a separate protoc-c binary, which can be copied to any other machines and exec `protoc-c --c_out=xxxxxxx` directly?
Hey guys,

This was made as an answer to #240 which I would also need, as it is a useful feature when implementing "union" like messages.

Obviously this isn't an actual patch, I just commented out the lines that specifically disable the behaviour I'd like, but I hoped to show more interest for this feature and maybe we can discuss how/if you want that feature implemented (always on, command-line option, build-time arg...)
 
Thanks.

In `required_field_pack_to_buffer` (maybe also others), there is `case PROTOBUF_C_TYPE_MESSAGE` where the nested message is first encoded into `simple_buffer_scratch` and then this temporary buffer is appended to the user supplied `buffer`.

Now my alternative way is
1) determine the packed size of the nested message by means of `protobuf_c_message_get_packed_size` and append that size to the buffer,
2) then call `protobuf_c_message_pack_to_buffer` recursively with the nested message and the same `buffer`.

Con / Pro:
 * Con: In my suggestion, we have to descent twice: once for the count, once for encoding. In the current implementation, counting and encoding is done in one step, so we have to descent only once.
 * Pro: saves a copy. Not only a single one, but in the current implementation, there is a copy on each nesting level. E.g. the contents of a message that is on level N (counting from the top level), is copied N-1 times in total.

From my perspective, descending twice should be more performant than copying.

I also created a patch, and it worked for a small example. Would need more testing, but I could file a merge request if interested.
The file [gribi_aft.proto](https://github.com/openconfig/gribi/blob/164784215d05c6cd20130651284ca8573ffa15c7/proto/gribi_aft/gribi_aft.proto#L61), has a message `LabelEntryKey` which has enum and oneof with same name just the case difference:
```
    enum Label {
      LABEL_UNSET = 0;
      ...
      ...
      LABEL_NO_LABEL = 9 [(yext.yang_name) = "NO_LABEL"];
    }
    oneof label {
      Label label_label = 39380472;
      uint64 label_uint64 = 369699564;
    }
```
With the recent version of protobuf-c(1.3.1), this results in `error: redeclaration of enumerator` error.

Here is a simplified version of the replication of the problem.
[enum_int_test.proto](https://gist.github.com/rambattu/7575ea0786d4f2d0843d2393d4e5c7c7#file-enum_int_test-proto)
```
syntax = "proto3";

message EnumIntTest {
  enum Label {
    LABEL_1 = 0;
    LABEL_2 = 1;
  }
  oneof label {
    Label label_label = 123;
    uint64 label_uint64 = 124;
  }
}
```
This proto file generates the following header file [enum_int_test.pb-c.h](https://gist.github.com/rambattu/7575ea0786d4f2d0843d2393d4e5c7c7#file-enum_int_test-pb-c-h)

```
...
...
/* --- enums --- */

typedef enum _EnumIntTest__Label {
  ENUM_INT_TEST__LABEL__LABEL_1 = 0,
  ENUM_INT_TEST__LABEL__LABEL_2 = 1
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(ENUM_INT_TEST__LABEL)
} EnumIntTest__Label;

/* --- messages --- */

typedef enum {
  ENUM_INT_TEST__LABEL__NOT_SET = 0,
  ENUM_INT_TEST__LABEL_LABEL_LABEL = 123,
  ENUM_INT_TEST__LABEL_LABEL_UINT64 = 124
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(ENUM_INT_TEST__LABEL)
} EnumIntTest__LabelCase;
...
...
```
It has this definition `PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(ENUM_INT_TEST__LABEL)` twice, including this header file resuling in compilation error.
[enum_int_test.c](https://gist.github.com/rambattu/7575ea0786d4f2d0843d2393d4e5c7c7#file-enum_int_test-c)
```
#include "enum_int_test.pb-c.h"

int main(){
    return 0;
}
```
```
$protoc --c_out=. enum_int_test.proto . 

$ gcc enum_int_test.c  
In file included from enum_int_test.pb-c.h:7:0,  
                 from enum_int_test.c:1:  
enum_int_test.pb-c.h:35:5: error: redeclaration of enumerator ‘_ENUM_INT_TEST__LABEL_IS_INT_SIZE’ . 
     PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(ENUM_INT_TEST__LABEL) 
     ^
enum_int_test.pb-c.h:26:5: note: previous definition of ‘_ENUM_INT_TEST__LABEL_IS_INT_SIZE’ was here
     PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(ENUM_INT_TEST__LABEL)
```

I believe this was introduced through this (commit)(https://github.com/protobuf-c/protobuf-c/commit/bb6553c3975124ca3257f46be14489574be73cbd)

One of the possible fixes that I tried is to add a variant (_ONEFOF_) in this line     https://github.com/protobuf-c/protobuf-c/blob/1390409f4ee4e26d0635310995b516eb702c3f9e/protoc-c/c_message.cc#L172

Changed this line
`printer->Print(vars, "  PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE($ucclassname$__$oneofname$)\n"); `

to 
`printer->Print(vars, "  PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE($ucclassname$__ONEOF_$oneofname$)\n"); `

This should result in the following code in enum_int_test.pb-c.h
```
...
...
/* --- enums --- */

typedef enum _EnumIntTest__Label {
  ENUM_INT_TEST__LABEL__LABEL_1 = 0,
  ENUM_INT_TEST__LABEL__LABEL_2 = 1
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(ENUM_INT_TEST__LABEL)
} EnumIntTest__Label;

/* --- messages --- */

typedef enum {
  ENUM_INT_TEST__LABEL__NOT_SET = 0,
  ENUM_INT_TEST__LABEL_LABEL_LABEL = 123,
  ENUM_INT_TEST__LABEL_LABEL_UINT64 = 124
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(ENUM_INT_TEST__ONEOF_LABEL)
} EnumIntTest__LabelCase;
...
...
```

Reaching out to this community to see if there is a better alternative.


Executing "./configure" produces the following error:
configure:4907: /home/edan/AG35/ql-ol-sdk/ql-ol-crosstool/sysroots/x86_64-oesdk-linux/usr/bin/arm-oe-linux     -gnueabi/arm-oe-linux-gnueabi-gcc -mfloat-abi=hard -E  conftest.c
  conftest.c:11:28: fatal error: ac_nonexistent.h: No such file or directory
  #include <ac_nonexistent.h>
