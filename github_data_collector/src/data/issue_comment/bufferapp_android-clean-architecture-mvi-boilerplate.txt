- Refactor to use jvmTarget from 1.7 to 1.8
- Remove buildToolsVersion 26.0.2 to use 28.0.3 by default
- Refactor `compile` to `implementation`
- Refactor `provided` to `compileOnly`
- Modify targetSdk and compileSdk version from 26 to 28
- Change `kotlin-stdlib-jre8` to `kotlin-stdlib-jdk8`
- Fix jacoco version to 0.1.4 to support gradle 5.4.* & above
- Update gradle tools to 3.5.1
- Update kotlin plugin version to 1.3.50
- Update gradle wrapper to 5.4.1
Fix input/output in the documentation, were written on the wrong parameter
I have updated Gradle wrapper version to  :  4.10.1
And Gradle version to : 3.3.0
And Kotlin version to : 1.3.11

I receive two Kotlin compiler error : 
1 - error: no interface expected here
public class ViewModelFactory extends android.arch.lifecycle.ViewModelProvider.Factory {

2 - error: @Binds methods must have only one parameter whose type is assignable to the return type
    public abstract android.arch.lifecycle.ViewModelProvider.Factory bindViewModelFactory(@org.jetbrains.annotations.NotNull()

Full question can be found at : https://stackoverflow.com/questions/54270912/dagger2-and-architectural-components-kotlin-compiler-error

Could you help to resolve errors?


I am a new learner and I am having a hard time trying to figure of the data flow happening in the presentation layer. A little more explanation would help a beginner greatly.
When trying to encapsulate some behavior in a View instead of an Activity or a Fragment, I do not have access to the ViewModelProvider. What would be the mot appropriate way of having the same architecture when using Views?

I can see at least 4 options. 

1.  Pass the ViewModelProvider as an argument to the View constructor
2.  Pass the already obtained ViewModel as an argument to the View constructor
3.  Pass a LifecycleOwner as an argument to the View constructor
4.  Hold the ViewModel in the containing Fragment/Activity and expose events from the view and consume states.
Trying run in Emulator: Nexus 5 with Android 4.4 x86

12-26 10:25:33.999 4036-4036/org.buffer.android.boilerplate.ui E/AndroidRuntime: FATAL EXCEPTION: main
                                                                                 Process: org.buffer.android.boilerplate.ui, PID: 4036
                                                                                 java.lang.RuntimeException: Unable to get provider android.arch.lifecycle.ProcessLifecycleOwnerInitializer: java.lang.ClassNotFoundException: Didn't find class "android.arch.lifecycle.ProcessLifecycleOwnerInitializer" on path: DexPathList[[zip file "/data/app/org.buffer.android.boilerplate.ui-1.apk"],nativeLibraryDirectories=[/data/app-lib/org.buffer.android.boilerplate.ui-1, /vendor/lib, /system/lib]]
                                                                                     at android.app.ActivityThread.installProvider(ActivityThread.java:4793)
                                                                                     at android.app.ActivityThread.installContentProviders(ActivityThread.java:4385)
                                                                                     at android.app.ActivityThread.handleBindApplication(ActivityThread.java:4325)
                                                                                     at android.app.ActivityThread.access$1500(ActivityThread.java:135)
                                                                                     at android.app.ActivityThread$H.handleMessage(ActivityThread.java:1256)
                                                                                     at android.os.Handler.dispatchMessage(Handler.java:102)
                                                                                     at android.os.Looper.loop(Looper.java:136)
                                                                                     at android.app.ActivityThread.main(ActivityThread.java:5017)
                                                                                     at java.lang.reflect.Method.invokeNative(Native Method)
                                                                                     at java.lang.reflect.Method.invoke(Method.java:515)
                                                                                     at com.android.internal.os.ZygoteInit$MethodAndArgsCaller.run(ZygoteInit.java:779)
                                                                                     at com.android.internal.os.ZygoteInit.main(ZygoteInit.java:595)
                                                                                     at dalvik.system.NativeStart.main(Native Method)
                                                                                  Caused by: java.lang.ClassNotFoundException: Didn't find class "android.arch.lifecycle.ProcessLifecycleOwnerInitializer" on path: DexPathList[[zip file "/data/app/org.buffer.android.boilerplate.ui-1.apk"],nativeLibraryDirectories=[/data/app-lib/org.buffer.android.boilerplate.ui-1, /vendor/lib, /system/lib]]
                                                                                     at dalvik.system.BaseDexClassLoader.findClass(BaseDexClassLoader.java:56)
                                                                                     at java.lang.ClassLoader.loadClass(ClassLoader.java:497)
                                                                                     at java.lang.ClassLoader.loadClass(ClassLoader.java:457)
                                                                                     at android.app.ActivityThread.installProvider(ActivityThread.java:4778)
                                                                                     at android.app.ActivityThread.installContentProviders(ActivityThread.java:4385) 
                                                                                     at android.app.ActivityThread.handleBindApplication(ActivityThread.java:4325) 
                                                                                     at android.app.ActivityThread.access$1500(ActivityThread.java:135) 
                                                                                     at android.app.ActivityThread$H.handleMessage(ActivityThread.java:1256) 
                                                                                     at android.os.Handler.dispatchMessage(Handler.java:102) 
                                                                                     at android.os.Looper.loop(Looper.java:136) 
                                                                                     at android.app.ActivityThread.main(ActivityThread.java:5017) 
                                                                                     at java.lang.reflect.Method.invokeNative(Native Method) 
                                                                                     at java.lang.reflect.Method.invoke(Method.java:515) 
                                                                                     at com.android.internal.os.ZygoteInit$MethodAndArgsCaller.run(ZygoteInit.java:779) 
                                                                                     at com.android.internal.os.ZygoteInit.main(ZygoteInit.java:595) 
                                                                                     at dalvik.system.NativeStart.main(Native Method) 
I was just working on a similar architecture when I ran into this boilerplate. So far I think it's great and it completes a lot of the thoughts and inner dilemmas I was having. 

One particular problem I keep running into comes down to what the responsibility of the ViewModel is. As in here, the architecture component ViewModel (presentation layer *1) is responsible for receiving Ui events and return Ui states. On the other hand, models from other layers get mapped to another kind of ViewModel (UI layer *2) which is only a representation of the data to be displayed.

1.  [BrowsBuferoosViewModel](https://github.com/bufferapp/android-clean-architecture-mvi-boilerplate/blob/master/presentation/src/main/java/org/buffer/android/boilerplate/presentation/browse/BrowseBufferoosViewModel.kt).
2.  [BuferooViewModel](https://github.com/bufferapp/android-clean-architecture-mvi-boilerplate/blob/master/mobile-ui/src/main/java/org/buffer/android/boilerplate/ui/model/BufferooViewModel.kt)

In my project I'm using databinding and so I bind the UI layer ViewModel to list item layouts, for example. In the case of the whole screen, I bind the activity/fragment instead of the presentation layer ViewModel. But I know a colleague binds the layout directly to the presentation layer ViewModel and might have a RecyclerView adapter directly in the VM.

Would you agree with me that the two kinds of ViewModel I mention are different? Or do you consider them the same? If they are different, shouldn't we find a better naming for one of them?