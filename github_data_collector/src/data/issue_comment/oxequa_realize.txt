# Problem

When I build the docker image, I faced with a below problem.

```
< Omitted >

Step 9/11 : RUN go get github.com/oxequa/realize
 ---> Running in 615cd3c98668
go: finding github.com/oxequa/realize v2.0.2+incompatible
go: downloading github.com/oxequa/realize v2.0.2+incompatible
go: extracting github.com/oxequa/realize v2.0.2+incompatible
go: downloading golang.org/x/net v0.0.0-20190923162816-aa69164e4478
go: downloading golang.org/x/crypto v0.0.0-20190923035154-9ee001bba392
go: finding github.com/oxequa/interact latest
go: extracting golang.org/x/crypto v0.0.0-20190923035154-9ee001bba392
go: finding github.com/go-siris/siris/core/errors latest
go: extracting golang.org/x/net v0.0.0-20190923162816-aa69164e4478
go: finding gopkg.in/urfave/cli.v2 v2.0.0
go: downloading github.com/oxequa/interact v0.0.0-20171114182912-f8fb5795b5d7
go: extracting github.com/oxequa/interact v0.0.0-20171114182912-f8fb5795b5d7
go: downloading gopkg.in/urfave/cli.v2 v2.0.0
go: finding github.com/go-siris/siris/core latest
go: finding github.com/go-siris/siris v7.4.0+incompatible
go: downloading github.com/go-siris/siris v7.4.0+incompatible
go: extracting github.com/go-siris/siris v7.4.0+incompatible
go: finding github.com/satori/go.uuid v1.2.0
go: downloading github.com/satori/go.uuid v1.2.0
go: extracting github.com/satori/go.uuid v1.2.0
build github.com/oxequa/realize: cannot load gopkg.in/urfave/cli.v2: cannot find module providing package gopkg.in/urfave/cli.v2
ERROR: Service 'app' failed to build: The command '/bin/sh -c go get github.com/oxequa/realize' returned a non-zero code: 1
```

# Environment
- macOS Mojave 10.14.6
- Golang: 1.12.5

# Proposal solution

I propose to this problem below solution.
PR is [here](https://github.com/oxequa/realize/pull/261).

---

I changed import path of `urfave/cli` like below and fixed it.

Before: `"gopkg.in/urfave/cli.v2"`
After: `"github.com/urfave/cli/v2"`






# Overview

Issue is [here](https://github.com/oxequa/realize/issues/262).

# Modifications

I changed import path of urfave/cli like below and fixed it.

Before: "gopkg.in/urfave/cli.v2"
After: "github.com/urfave/cli/v2"

# Test result

```
$ go test ./...
ok  	github.com/yyh-gl/realize	(cached)
ok  	github.com/yyh-gl/realize/realize	0.385s
```
When I run realize from inside docker, there is no panic. Panics when running from outside. Same realize version in both environments.

```
panic: runtime error: invalid memory address or nil pointer dereference
[signal SIGSEGV: segmentation violation code=0x1 addr=0x0 pc=0x10be1de]

goroutine 387 [running]:
os.(*Process).signal(0x0, 0x1654d80, 0x19a5830, 0x0, 0x0)
        /usr/local/go/src/os/exec_unix.go:56 +0x2e
os.(*Process).Signal(...)
        /usr/local/go/src/os/exec.go:131
github.com/oxequa/realize/realize.(*Project).run.func1(0xc0000c36a8)
        /Users/prats/workspace/src/github.com/oxequa/realize/realize/projects.go:581 +0x5d
github.com/oxequa/realize/realize.(*Project).run(0xc000128e00, 0xc000024e80, 0x13, 0xc000408d80, 0xc00019c000, 0x16504c0, 0xc00014e000)
        /Users/prats/workspace/src/github.com/oxequa/realize/realize/projects.go:646 +0xc5b
github.com/oxequa/realize/realize.(*Project).Reload.func3(0xc000128e00, 0xc000408d80, 0xc00019c000)
        /Users/prats/workspace/src/github.com/oxequa/realize/realize/projects.go:262 +0x147
created by github.com/oxequa/realize/realize.(*Project).Reload
        /Users/prats/workspace/src/github.com/oxequa/realize/realize/projects.go:260 +0x297
```

Realize version 2.0.3
go version go1.12.7 linux/amd64 (Inside docker)
go version go1.12.6 darwin/amd64 (outside)

yaml file:

```
settings:
  legacy:
    force: false
    interval: 0s
  schema:
  - name: test
    path: .
    commands:
      build:
        status: true
        method: go build -i -o test .
      run:
        status: true
        method: test
```
Hey maintainers,
First and foremost - many thanks for all the work contributed to this project. I've yet to find another project runner that works as well as Realize does.

That said, seems like work on the project has stalled (based on visible commit history). A) is Realize no longer being maintained, and/or are there any plans to continue work on it? B) seems like a decent community has popped up around this project - if it is indeed no longer being actively contributed to by the core team, what can we (the community) do to help/contribute? Is it something you guys would entertain to open up contributions a bit?

Regards,
Jon
## Steps to reproduce
- Set env
```
env:
    GO111MODULE: on
```

## Found
`PATH` is empty.

Hey. Just implemented go modules on a project and when i run go run main.go works fine. But once I want to use realize for my dev workflow I get:

`/usr/lib/go/src/crypto/tls/cipher_suites.go:17:2: non-standard import "golang.org/x/crypto/chacha20poly1305" in standard package "crypto/tls"
/usr/lib/go/src/crypto/x509/x509.go:28:2: non-standard import "golang.org/x/crypto/cryptobyte" in standard package "crypto/x509"
/usr/lib/go/src/net/dnsclient.go:11:2: non-standard import "golang.org/x/net/dns/dnsmessage" in standard package "net"
/usr/lib/go/src/net/http/h2_bundle.go:48:2: non-standard import "golang.org/x/net/http/httpguts" in standard package "net/http"
`

[REALIZE] : 2.0.3
go version go1.13 linux/amd64
trying things to fix deps
Hi,

When I run `go get -u github.com/oxequa/realize` I got the following error

```
build github.com/oxequa/realize: cannot load gopkg.in/urfave/cli.v2: cannot find module providing package gopkg.in/urfave/cli.v2
```

# My Dockerfile

```
FROM golang:1.13.0-alpine3.10 as build

WORKDIR /go/app

COPY . .

RUN set -ex && \
  apk update && \
  apk add --no-cache git && \
  go build -o portfolio-backend && \
  go get -u github.com/oxequa/realize && \
  go get -u github.com/go-delve/delve/cmd/dlv && \
  go build -o /go/bin/dlv github.com/go-delve/delve/cmd/dlv

FROM alpine:3.10

WORKDIR /app

COPY --from=build /go/app/portfolio-backend .

RUN set -x && \
  addgroup go && \
  adduser -D -G go go && \
  chown -R go:go /app/portfolio-backend

CMD ["./portfolio-backend"]
```

# Result Log
```
+ go get -u github.com/oxequa/realize
go: finding github.com/oxequa/realize v2.0.2+incompatible
go: downloading github.com/oxequa/realize v2.0.2+incompatible
go: extracting github.com/oxequa/realize v2.0.2+incompatible
go: downloading golang.org/x/net v0.0.0-20190912160710-24e19bdeb0f2
go: finding github.com/oxequa/interact latest
go: finding gopkg.in/urfave/cli.v2 v2.0.0-alpha.2
go: finding github.com/sirupsen/logrus v1.4.2
go: finding github.com/go-siris/siris v7.4.0+incompatible
go: finding github.com/fsnotify/fsnotify v1.4.7
go: finding github.com/fatih/color v1.7.0
go: finding gopkg.in/yaml.v2 v2.2.2
go: finding github.com/labstack/echo v3.3.10+incompatible
go: downloading github.com/go-siris/siris v7.4.0+incompatible
go: downloading github.com/sirupsen/logrus v1.4.2
go: downloading github.com/fsnotify/fsnotify v1.4.7
go: downloading github.com/fatih/color v1.7.0
go: downloading gopkg.in/yaml.v2 v2.2.2
go: downloading github.com/labstack/echo v3.3.10+incompatible
go: extracting golang.org/x/net v0.0.0-20190912160710-24e19bdeb0f2
go: extracting github.com/fatih/color v1.7.0
go: extracting gopkg.in/yaml.v2 v2.2.2
go: downloading github.com/oxequa/interact v0.0.0-20171114182912-f8fb5795b5d7
go: extracting github.com/fsnotify/fsnotify v1.4.7
go: extracting github.com/labstack/echo v3.3.10+incompatible
go: extracting github.com/sirupsen/logrus v1.4.2
go: extracting github.com/go-siris/siris v7.4.0+incompatible
go: extracting github.com/oxequa/interact v0.0.0-20171114182912-f8fb5795b5d7
go: finding gopkg.in/urfave/cli.v2 v2.0.0-alpha.2
go: downloading github.com/konsorten/go-windows-terminal-sequences v1.0.1
go: extracting github.com/konsorten/go-windows-terminal-sequences v1.0.1
go: downloading golang.org/x/crypto v0.0.0-20190308221718-c2843e01d9a2
go: finding github.com/labstack/gommon v0.3.0
go: downloading github.com/labstack/gommon v0.3.0
go: extracting github.com/labstack/gommon v0.3.0
go: downloading golang.org/x/sys v0.0.0-20190422165155-953cdadca894
go: finding github.com/valyala/fasttemplate v1.0.1
go: finding github.com/satori/go.uuid v1.2.0
go: finding github.com/dgrijalva/jwt-go v3.2.0+incompatible
go: finding github.com/mattn/go-colorable v0.1.2
go: finding github.com/mattn/go-isatty v0.0.9
go: downloading github.com/dgrijalva/jwt-go v3.2.0+incompatible
go: downloading github.com/mattn/go-isatty v0.0.9
go: downloading github.com/satori/go.uuid v1.2.0
go: downloading github.com/valyala/fasttemplate v1.0.1
go: extracting golang.org/x/crypto v0.0.0-20190308221718-c2843e01d9a2
go: extracting github.com/dgrijalva/jwt-go v3.2.0+incompatible
go: extracting github.com/satori/go.uuid v1.2.0
go: extracting github.com/valyala/fasttemplate v1.0.1
go: downloading github.com/mattn/go-colorable v0.1.2
go: extracting github.com/mattn/go-isatty v0.0.9
go: extracting github.com/mattn/go-colorable v0.1.2
go: extracting golang.org/x/sys v0.0.0-20190422165155-953cdadca894
go: downloading golang.org/x/sys v0.0.0-20190813064441-fde4db37ae7a
go: downloading github.com/valyala/bytebufferpool v1.0.0
go: extracting github.com/valyala/bytebufferpool v1.0.0
go: extracting golang.org/x/sys v0.0.0-20190813064441-fde4db37ae7a
go: finding golang.org/x/net latest
go: finding github.com/valyala/bytebufferpool v1.0.0
go: finding golang.org/x/crypto latest
go: finding golang.org/x/sys latest
go: finding github.com/konsorten/go-windows-terminal-sequences v1.0.2
go: downloading golang.org/x/sys v0.0.0-20190913121621-c3b328c6e5a7
go: downloading golang.org/x/crypto v0.0.0-20190911031432-227b76d455e7
go: downloading github.com/konsorten/go-windows-terminal-sequences v1.0.2
go: extracting github.com/konsorten/go-windows-terminal-sequences v1.0.2
go: extracting golang.org/x/crypto v0.0.0-20190911031432-227b76d455e7
go: downloading golang.org/x/text v0.3.0
go: extracting golang.org/x/sys v0.0.0-20190913121621-c3b328c6e5a7
go: extracting golang.org/x/text v0.3.0
go: finding golang.org/x/text v0.3.2
go: downloading golang.org/x/text v0.3.2
go: extracting golang.org/x/text v0.3.2
build github.com/oxequa/realize: cannot load gopkg.in/urfave/cli.v2: cannot find module providing package gopkg.in/urfave/cli.v2
```
realize.yml

```
settings:
  legacy:
    force: true
    interval: 100ms
schema:
- name: project-name
  path: .
  commands:
    install:
      status: false
    run:
      status: true
  watcher:
    extensions:
    - go
    paths:
    - /
    ignored_paths:
    - .git
    - .realize
    - vendor
```

cmd: realize start

Realize version:  2.0.3

Golang Version

go version go1.12.7 linux/amd64

Error log:

```
panic: runtime error: invalid memory address or nil pointer dereference
[signal SIGSEGV: segmentation violation code=0x1 addr=0x0 pc=0x45b457]

goroutine 7188 [running]:
fmt.(*buffer).WriteString(...)
	/usr/local/go/src/fmt/print.go:83
fmt.(*fmt).padString(0xc001fa2040, 0x0, 0x66)
	/usr/local/go/src/fmt/format.go:110 +0x90
fmt.(*fmt).fmtS(0xc001fa2040, 0x0, 0x66)
	/usr/local/go/src/fmt/format.go:347 +0x61
fmt.(*pp).fmtString(0xc001fa2000, 0x0, 0x66, 0x76)
	/usr/local/go/src/fmt/print.go:448 +0x132
fmt.(*pp).printArg(0xc001fa2000, 0x8e4700, 0xc001fc2a60, 0x76)
	/usr/local/go/src/fmt/print.go:684 +0x880
fmt.(*pp).doPrint(0xc001fa2000, 0xc000a85de8, 0x1, 0x1)
	/usr/local/go/src/fmt/print.go:1147 +0xfd
fmt.Sprint(0xc000a85de8, 0x1, 0x1, 0xc002d70820, 0xc002d70820)
	/usr/local/go/src/fmt/print.go:250 +0x52
github.com/fatih/color.(*Color).Sprint(0xc000a85ca8, 0xc000a85de8, 0x1, 0x1, 0x1, 0xc002d70820)
	/go/src/github.com/fatih/color/color.go:256 +0x3f
github.com/oxequa/realize/realize.colorBase.Regular(0x5e, 0xc000a85de8, 0x1, 0x1, 0xc002789f50, 0x29)
	/go/src/github.com/oxequa/realize/realize/style.go:27 +0xf5
github.com/oxequa/realize/realize.(*Project).Reload.func2(0xc0001b7800, 0xc000428600, 0xc00008e300)
	/go/src/github.com/oxequa/realize/realize/projects.go:253 +0x209
created by github.com/oxequa/realize/realize.(*Project).Reload
	/go/src/github.com/oxequa/realize/realize/projects.go:241 +0x258
```

What I did:

I used "realize start" to run the project for a long time in terminal, about 10 hours or some.  There are about 10 logs per second printed out in the terminal.
Hi,

I am not sure if this is a realize issue or not but I would be much appreciated if someone could help.

I added realize to my go + nginx setup, but the requests breaks with `502` as shown below. Any idea what could be the solution to it?

```bash
Attaching to dev_hello_api_go_1, dev_hello_api_nginx_1

hello_api_go_1     | [12:13:47][APP] : Watching 2 file/s 9 folder/s

hello_api_nginx_1  | 2019/08/14 12:16:07 [error] 6#6: *2 connect() failed (111: Connection refused) while connecting to upstream, client: 172.18.0.1, server: , request: "GET / HTTP/1.1", upstream: "http://172.18.0.8:8080/", host: "localhost:6000"
hello_api_nginx_1  | 172.18.0.1 - - [14/Aug/2019:12:16:07 +0000] "GET / HTTP/1.1" 502 157 "-" "PostmanRuntime/7.13.0" "-"
```

Thanks

---

```bash
.
├── .realize.yaml
├── cmd
│   └── server.go
├── docker
    └── dev
        ├── docker-compose.yaml
        ├── go
        │   └── Dockerfile
        └── nginx
            ├── Dockerfile
            └── app.conf

```
#### docker-compose.yaml
```yaml
version: "3.4"

services:

  hello_go:
    build:
      context: "../.."
      dockerfile: "docker/dev/go/Dockerfile"
    hostname: "hello-go"
    volumes:
      - "../..:/app"
    environment:
      PS1: "\\u@\\h:\\w\\$$ "

  hello_nginx:
    build:
      context: "../.."
      dockerfile: "docker/dev/nginx/Dockerfile"
    hostname: "hello-nginx"
    environment:
      PS1: "\\u@\\h:\\w\\$$ "
    ports:
      - "6000:80"
    depends_on:
      - "hello_go"
```

#### .realize.yaml
```yaml
settings:
  legacy:
    force: false
    interval: 0s
schema:
- name: app
  path: .
  commands: {}
  watcher:
    extensions:
    - go
    paths:
    - /
    ignore:
      paths:
      - .git
      - .realize
      - vendor

```
---

### GO

#### Dockerfile
```bash
FROM golang:1.12.7-alpine3.10

RUN apk update \
 && apk add --no-cache \
    git

WORKDIR /app

COPY . .

RUN go mod download \
 && go mod verify \
 && go build -o /server /app/cmd/server.go \
 && go get github.com/oxequa/realize

EXPOSE 8080

CMD ["realize", "start", "--path", "/server"]
```

#### server.go
```go
package main

import (
	"fmt"
	"log"
	"net/http"
)

func handler(w http.ResponseWriter, r *http.Request) {
	w.Write([]byte("Hello"))
}

func main() {
	http.HandleFunc("/", handler)
	fmt.Println("Server is running on port 8080 ...")
	log.Fatal(http.ListenAndServe(":8080", nil))
}
```
---
### NGINX

#### Dockerfile
```bash
FROM nginx:1.15.8-alpine

COPY docker/dev/nginx/app.conf /etc/nginx/conf.d/default.conf

EXPOSE 80
```

#### app.conf
```bash
server {
    listen 80 default_server;

    location / {
        proxy_set_header X-Request-Id $request_id;
        proxy_set_header Host $host;

        proxy_pass http://hello_go:8080/;
    }
}
```