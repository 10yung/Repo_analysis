Afaics there is currently no support for setting the `SameSite` attribute for cookies in http4k. 

Would be nice to have a dedicated method for that and probably add the three options `None`, `Strict` and `Lax` as an enum.

I'd even go so far and make `Lax` the default for Cookies as recommended in [1]. Would love to know your opinion on that.

[1]: https://scotthelme.co.uk/csrf-is-really-dead/
Receiving the following headers and body as a response, I'm not able to parse the parts. Exception thrown:

`org.http4k.multipart.ParseError: no name for part`

Headers received:
```
HTTP/1.1 200 OK
Date: Fri, 13 Dec 2019 09:10:19 GMT
Content-Type: multipart/form-data; boundary=ofz0Oi4n1E68F6IC91sf36bcHAX5sy
Transfer-Encoding: chunked
Connection: keep-alive
Y-Tro-Optapi-Requestid: ofz0Oi4n1E68F6IC91sf36bcHAX5sy
Strict-Transport-Security: max-age=15724800; includeSubDomains
Server: trorisalve
```

Body received:
```
--ofz0Oi4n1E68F6IC91sf36bcHAX5sy
Content-Disposition: attachment; name=values
Content-Type: text/csv

A,B,C
932,059A,2019-11-25
933,96A,2019-11-25


--ofz0Oi4n1E68F6IC91sf36bcHAX5sy
Content-Disposition: attachment; name=logs
Content-Type: application/x-ndjson

{"level":"info","time":1576656181033,"message":"Starting, build 01e3342d 2019-12-11 12:03:51 +0100 (master) with run id ","pid":152568,"thread_id":152568}
{"level":"info","time":1576656181033,"message":"Reading input from stdin...","pid":152568,"thread_id":152568}

--ofz0Oi4n1E68F6IC91sf36bcHAX5sy--

```
The exception is thrown in `StreamingMultipartFormsPart.kt`:
```
val contentDisposition = ParameterParser().parse(headers["Content-Disposition"], ';')
val fieldName = (if (contentDisposition.containsKey("attachment")) mixedName else trim(contentDisposition["name"]))
                ?: throw ParseError("no name for part")
```
`mixedName` is `null`, and should probably only be used within a `multipart/mixed` context if I read the code correctly?

Call site code:
```
val client = ApacheClient()
val response = client(request)
val multipart = MultipartFormBody.from(response)
println("multipart boundary = ${multipart.boundary}")
```

http4k version: 3.196.0
Seems like the below code will always default to 'null' unless an asterisk is provided. Am I misunderstanding it? 

This code would return a null for the origins header:

```
    ServerFilters.Cors(CorsPolicy(headers = listOf("content-type", "query"),
            methods = listOf(Method.GET, Method.POST, Method.PUT, Method.DELETE, Method.OPTIONS, Method.TRACE, Method.PATCH, Method.PURGE, Method.HEAD),
            origins = listOf("localhost:8080", "mydomain.com")))
```



```
object Cors {
        private fun List<String>.joined() = joinToString(", ")

        operator fun invoke(policy: CorsPolicy) = Filter { next ->
            {
                val response = if (it.method == OPTIONS) Response(OK) else next(it)

                val origin = it.header("Origin")
                val allowedOrigin = when {
                    policy.origins.contains("*") -> "*"
                    policy.origins.contains(origin) -> origin!!
                    else -> "null"
                }

                response.with(
                    Header.required("access-control-allow-origin") of allowedOrigin,
                    Header.required("access-control-allow-headers") of policy.headers.joined(),
                    Header.required("access-control-allow-methods") of policy.methods.map { it.name }.joined()
                )
            }
        }
    }
```


It's common for teams to use a common serialisation approach with a core set of `data` classes.

[kotlinx.serialization](https://github.com/Kotlin/kotlinx.serialization) can do a lot of the things that we need. Investigate ways to use this library as the serialisation/deserialisation method for things like JSON, CBOR, Protobufs, and Avro.
http4k already supports Zipkin traces. It would be useful to support other distributed tracing services like AWS X-Ray.
another one, we'll take a look at pushing a pr to you for this one. with normal routes, you do a regex matcher on the path, but for resources you do string starts with. that means that you can't use wildcards as there's no regex handling, but also if you have multiple routes at different levels, you might have the wrong ones catch the wrong resource (say /ui/data and /ui routes would both match for a resource at /ui/data, though if you put them in the wrong order you're a numpty anyway). the issue we're seeing is we want the resource route to support the wildcards (as an example, we build our ui via react but package it as a single page js into the server rather than run a node server just for the ui, so we're trying to mirror the wildcard support in react router to pass the server routes through to react)

The line in question if in  org.http4k.routing.internal.kt line 26.

obviously there's others matches you use to fallback to index.html so we'll see what comes out, but that's the area we're looking into , not sure if that's something you're already looking at as well though.

thanks!
In trying to add a catch all using the http4k routing but am struggling. From what I can see, aggregate routing http handler had the catch all already, in the form of the not found handler Param, but the ability to set that is not exposed (at least from what I can see, maybe I'm missing a component). Is there any chance of adding an additional method to routing.kt to pass in my own not found catch all handler please?
V3 of the WebDriver uses some deprecated `By` implementations. This PR:

- upgrades to the new API, which is more restrictive as we are backed by `JSoup` and hence only support CSS search (and not Xpath).
- Implements a new set of `By` implementations which hang off of the `org.http4k.webdriver.By` object. Future implementations of `By` can be attached to that object.

Due to JSoup not implementing some lookups, we suspect that no current users of the module will be broken (apart from reimporting the correct `By` class), but want to make sure, so sending to contributors for possible clarification - although those implementations will break with V4 of selenium anyway as the APIs are being removed. <-- @quii @gypsydave5 @jshiell 
We are blocked on this: https://github.com/Kotlin/dokka/issues/294

<!-- Love http4k? Please consider supporting our collective:
ðŸ‘‰  https://opencollective.com/http4k/donate -->

Pretty much as the title says - doesn't look like it's supported:

https://github.com/http4k/http4k/blob/59c9814cae8203857e30138501e979366f797817/http4k-testing-webdriver/src/main/kotlin/org/http4k/webdriver/JSoupWebElement.kt#L83

I'm taking a look and seeing if I can put together a PR