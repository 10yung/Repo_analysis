This PR updates the CI matrix to use latest JRuby, **9.2.8.0**.

[JRuby 9.2.8.0 release blog post](https://www.jruby.org/2019/08/12/jruby-9-2-8-0.html)
See https://blog.travis-ci.com/2018-11-19-required-linux-infrastructure-migration for more details
Relies on https://github.com/trailblazer/representable/pull/205
This is currently raising a `NoMethodError` for `NilClass` and I expect this should be evaluating with the instance. (This used to be possible in roar 1.0.4)

Let me know if my assumptions are correct, or if you have other ideas about where this should be fixed.
Maybe there's a way to do this, but if there is, I'm hitting a wall.

Suppose you had this:

```
class ArticleRepresenter < Roar::Decorator
  include Roar::JSON

  property :author, exec_context: :decorator, decorator: UserRepresenter
  property :last_editor, exec_context: :decorator, decorator: UserRepresenter

  def author
    represented.author
  end
end

class ArticlesRepresenter < Roar::Decorator
  include Roar::JSON::Collection
  items extend: ArticleRepresenter
end
```

Now say this is for an API and you only want to render certain fields depending on user permissions. So when rendering the collection of articles, or a single article, you show `author` all the time, but only `last_editor` if the user is an editor.

Seems like one way to do this would be pass in some kind of set of options and check them in the decorator methods. I think this can be accomplished on the single representer by passing in the options with `initialize`, but how would you do this at the collection level and have it pass it down to each single representer?
Hi,

It doesn't seem possible to represent timestamp properties in certain (or default) format.

### Steps to reproduce
`config/initializers/date_format.rb`
```ruby
Time::DATE_FORMATS[:default] = "%Y-%m-%dT%H:%M:%S.%N%z!!!"
```

It converts timestamp to proper format:
```ruby
song.created_at.to_s
=> "2017-04-05T19:10:47.146095000+0000!!!"
```

`app/representers/song_representer.rb`
```ruby
class SongRepresenter < Roar::Decorator
  include Roar::JSON

  property :created_at
end
```

### Actual behavior
Anyway, it renders not expected output:
```ruby
SongRepresenter.new(song).to_json
=> "{\"created_at\":\"2017-04-05T19:10:47Z\"}"
# expected: "{\"created_at\":\"2017-04-05T19:10:47.146095000+0000!!!\"}"
```

Please, help me understand if it's a bug or find a way to achieve expected result.

### System configuration
**Roar version**: 1.1.0
A model that has `image_versions` might want to have a link for image item in the field. Like so:

``` json
{
  "id" : 123,
  "image_versions" : ["small", "large"],
  "_links" : {
     "image:small" : {
       "href" : "http://example.org/images/123/small.jpg"
     },
     "image:large" : {
       "href" : "http://example.org/images/123/large.jpg"
     }
   }
}
```

we can override https://github.com/apotonick/roar/blob/master/lib/roar/hypermedia.rb#L54, but maybe we want a better DSL? How about something that is evaluated on an instance before representing it?

``` ruby
before_represent do
  represented.image_versions each do |image_version|
    link image_version do 
       "http://example.com/images/#{represented.id}/#{image_version}.jpg"
    end
  end
end
```

Hi there, sorry to keep bothering you about these HAL rendering issues!  On the latest 1.0.3 I'm still having the following issue:

``` ruby
Roar::VERSION
=> "1.0.3"

class PersonRepresenter < Roar::Decorator
  include Roar::JSON::HAL

  property :id, :skip_render => true
  property :name

  collection :favorite_foods,
             :decorator    => FavoriteFoodRepresenter,
             :class        => OpenStruct,
             :as           => :favoriteFoods,
             :embedded     => true,
             :skip_render  => true,
             :render_empty => false
end

class FavoriteFoodRepresenter < Roar::Decorator
  include Roar::JSON::HAL

  property :id, :skip_render => true
  property :name
end

json_string1 = "{\"id\": 123, \"name\": \"Bob\", \"_embedded\": {\"favoriteFoods\": [{\"id\": 321, \"name\": \"Pizza\"}]}}"
json_string2 = "{\"id\": 124, \"name\": \"Joe\", \"_embedded\": {\"favoriteFoods\": []}}"

person1 = PersonRepresenter.new(OpenStruct.new).from_json(json_string1)
=> #<OpenStruct id=123, name="Bob", favorite_foods=[#<OpenStruct id=321, name="Pizza">]>

person2 = PersonRepresenter.new(OpenStruct.new).from_json(json_string2)
=> #<OpenStruct id=124, name="Joe", favorite_foods=[]>

PersonRepresenter.new(person1).to_json
=> "{\"name\":\"Bob\",\"_embedded\":{\"favoriteFoods\":[]}}"

PersonRepresenter.new(person2).to_json
=> "{\"name\":\"Joe\"}"
```

As you can see from the above contrived example, the `skip_render` option only empties out the related collection, but still renders an empty array in its place.  In addition to that, the `render_empty` option won't help in this scenario either, although it does work when the collection is legitimately empty.

Hope this helps!

I am using cells (concept cells)
So I kind of expect support for similar syntax in representable
But this is what I need for rendering a controller loaded neighbourhoods (with a city):

``` ruby
class MyRepresenter < Roar::Decorator
          include Roar::JSON

          self.representation_wrap = :city

          collection :neighbourhoods, getter: -> (args) {
            args[:neighbourhoods]
          } do
            property :name
          end
end

MyRepresenter.new(city).to_json(neighbourhoods: my_custom_neighbourhoods)
```

I kind of expect

``` ruby
class MyRepresenter < Roar::Decorator
          include Roar::JSON
          include Roar::SomeMagicModule # :P

          self.representation_wrap = :city

          collection :neighbourhoods do
            property :name
          end

          private

          def neighbourhoods
             args[:neighbourhoods] # Still not the best form but still better than setting a lambda in option
          end
end

MyRepresenter.new(city, neighbourhoods: my_custom_neighbourhoods)
```

I understand the class might also used for parsing input
But is there anyway to NOT use option to get custom input?
Or I should use a custom class (e.g. `Struct`) for carrying the data into the representer?

Code:

``` ruby
class ProductRepresenter < Roar::Decorator
  include Roar::JSON
  include Roar::XML
  self.representation_wrap= nil

  Product.attribute_names.each do |attr|
    property attr.to_sym,  render_nil: true 
  end

 # This works fine  - cause this is a required attribute
  property :manufacturer, class: Manufacturer, decorator: ManufacturerRepresenter, render_nil: true

  # For the product in Question - this  :distribution_restriction is nil ( can be set to NULL if there is no restriction) so it causes a problem when trying to render xml
  property :distribution_restriction, class: DistributionRestriction, decorator: RestrictionRepresenter, render_nil: true

end
```

here is the error

``` ruby

ArgumentError: Requires a Node, NodeSet or String argument, and cannot accept a NilClass.
(You probably want to select a node from the Document with at() or search(), or create a new Node via Node.new().)
from /home/vagrant/.rbenv/versions/2.2.1/lib/ruby/gems/2.2.0/gems/nokogiri-.6.6.2/lib/nokogiri/xml/node.rb:803:in `coerce'
```
