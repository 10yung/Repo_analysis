Hello -

I have a project that references another project. Admissions requires the Admissions.Extensions .dll to work correctly.

I have installed shimmer for my project using nuget and followed the instructions for adding an dependency to the installer, located [here](https://github.com/squirrel/Squirrel.Windows/wiki/Specifying-The-Right-Dependencies).

However, when I run the Setup.exe file, the installer crashes with an exception: 

> Additional information: Could not load file or assembly 'Admissions.Extensions, Version=1.0.49.0, Culture=neutral, PublicKeyToken=null' or one of its dependencies. The system cannot find the file specified.

Both Admissions and Admissions.Extensions have the `<BuildPackage>true</BuildPackage>` nodes in the .csproj files.

**Admissions.nuspec**:

``` xml
<?xml version="1.0"?>
<package xmlns="http://schemas.microsoft.com/packaging/2010/07/nuspec.xsd">
  <metadata>
    <id>AIS</id>
    <title>AIS</title>
    <version>$version$</version>
    <authors>...</authors>
    <requireLicenseAcceptance>false</requireLicenseAcceptance>
    <description>...</description>
    <tags>...</tags>
    <dependencies>
      <dependency id="Admissions.Extensions" version="[$version$]" />
    </dependencies>    
  </metadata>
  <files>
    <file src="..\Admissions.Extensions\bin\$configuration$\Admissions.Extensions.dll" target="lib\net451\" />
  </files>
</package>
```

**packages.config**:

``` xml
<?xml version="1.0" encoding="utf-8"?>
<packages>
  <package id="MarkdownSharp" version="1.13.0.0" targetFramework="net451" />
  <package id="Microsoft.Bcl" version="1.1.7" targetFramework="net451" />
  <package id="Microsoft.Bcl.Async" version="1.0.16" targetFramework="net451" />
  <package id="Microsoft.Bcl.Build" version="1.0.14" targetFramework="net451" />
  <package id="Microsoft.Web.Xdt" version="1.0.0" targetFramework="net451" />
  <package id="NuGet.Core" version="2.7.0" targetFramework="net451" />
  <package id="Rx-Core" version="2.1.30214.0" targetFramework="net451" />
  <package id="Rx-Interfaces" version="2.1.30214.0" targetFramework="net451" />
  <package id="Rx-Linq" version="2.1.30214.0" targetFramework="net451" />
  <package id="Rx-Main" version="2.1.30214.0" targetFramework="net451" />
  <package id="Rx-PlatformServices" version="2.1.30214.0" targetFramework="net451" />
  <package id="Shimmer" version="0.7.4" targetFramework="net451" />
  <package id="Shimmer.Client" version="0.7.4" targetFramework="net451" />
  <package id="Shimmer.Core" version="0.7.4" targetFramework="net451" />
  <package id="Squirrel.Client" version="0.7.5" targetFramework="net451" />
  <package id="Squirrel.Core" version="0.7.5" targetFramework="net451" />
  <package id="System.IO.Abstractions" version="1.4.0.66" targetFramework="net451" />
  <package id="Admissions.Extensions" version="1.0.49.0" targetFramework="net451" />
</packages>
```

How do I get the Setup.exe file to contain and install the required Admissions.Extensions.dll?

Thank you,

Chuck

I forgot to report this, but all our programs are obsfucated. Therefore when we call update manager, there is always new releases to apply because assembly version to shimmer is reported as 0.0.0 when it's actually, i.e 1.2.3102.

The problem can easily be solved by adding a parameter overload accepting a "here is my real assembly version" version :)

Today we solve it by manually resolving the update graph ourselfs by excluding any prior versions to `currentVersion`

Looking to use Squirrel.Windows for an application that I need to provide auto-update functionality.  It's a Kiosk style application, and has a central "server" component that hosts the data bits that are fed into the Kiosk application.  According to the documents, we're supposed to call: `bool UpdateManager.CheckForUpdates("http://mycoolsite.com/releases/")` to check for updates, but I'd rather have it check the web address from which the software was initially installed from, much like what ClickOnce did, to see if any updates exist for the application.  

The base 'data services' project, we're going to install using a forced mechanism to manage which of our clients are on a specific version.

Any suggestions on this?

Ok, here are some thoughts I had while trying to integrate Squirrel.Windows into my application.

Currently, Squirrel takes the package that is created for the application and flattens all of the dependencies that come with it. The problem is that we now must figure out which binaries we want exactly in the final package (`net20`, `net45`, etc.)

This is currently a bit broken, as Squirrel sometimes takes the wrong binaries. To work around this issue, I created a `.nuspec` files that has the following spec for the file includes:

```
<files>
    <file src="bin\Release\*.dll" target="lib\" />
    <file src="bin\Release\MyApp.exe" target="lib\" />
    <file src="bin\Release\MyApp.exe.config" target="lib\" />
</files>
```

The `.nuspec` doesn't contains any dependencies under the `dependencies` tag, so Squirrel just packs the build output.

So I thought, why do we make the effort to figure out the right dependencies manually if we could just let the build system handle it? Wouldn't it be easier if we just let the developers specify their build output?

Any thoughts?

Creating a pre-release package, for example `1.0.0-beta1` and installing it, creates a folder called `app-1.0.0` in the installation directory.

Also, incrementing the beta package to `1.0.0-beta2` doesn't work, it won't create a diff package and also can't be installed as it Squirrel tries to overwrite the existing `app-1.0.0` directory.

This reduces the failing tests from 23 to 18.

I'm not absolutely certain what ICreatesObservableForProperty is around in the code for now, but given the summary in ReactiveUI/RegisterableInterfaces.cs:

```
/// <summary>
/// ICreatesObservableForProperty represents an object that knows how to
/// create notifications for a given type of object. Implement this if you
/// are porting RxUI to a new UI toolkit, or generally want to enable WhenAny
/// for another type of object that can be observed in a unique way.
/// </summary>
```

and that the tests in `WhenAnyTests` all pass, as well as the use of WhenAny for only `IReactiveNotifyPropertyChanged`s i.e. being covered by `WhenAnyShim`, it looks like things are safe

Since cloning put everything in "Squirrel.Windows" it was tripping up Bump-Version. It was trying to run on SampleUpdatingApp's AssemblyInfo (which has version 1.3.0.0 versus the other projects at 0.7.x) and failing.

Also threw in a quick tip into bootstrap for people without Git in their path

Thought I'd start on a .NET 4.5 retarget if it's decided on.

This would close #234, close #196<del>, maybe close 175 if 4.5.1 detection isn't needed</del>

For the first time ever I have had a scenario where the application doesn't update. It clearly downloads the update but doesn't install it properly. all I get from the installer log is this:
[INFO][2014-02-10T07:13:25] UpdateManager: Downloading RELEASES file from http://[site].azurewebsites.net/setup
[INFO][2014-02-10T07:13:34] UpdateManager: cleanDeadVersions: for version 1.0.23
[INFO][2014-02-10T07:13:34] UpdateManager: cleanDeadVersions: exclude folder app-1.0.23

Which appears to indicate the installer has started and stopped for an unknown reason.  

I'm wondering what the best way to handle this is?  Because it is now an out of date release I can't test anything else about the update, but presumably there been an exception in UpdateManager.ApplyReleases? My code is:
using (var updateStatusBarItem = StatusBarTrayManager.CreateNewItem("Updating application"))
{
    updateStatusBarItem.Maximum = 100;
    var releases = updateInfo.ReleasesToApply;

```
var progress = new Subject<int>();
progress.Subscribe(p => updateStatusBarItem.CurrentValue = p, exception => { /* ignore */ });
await updateManager.DownloadReleases(releases, progress);

List<string> results = await updateManager.ApplyReleases(updateInfo);
_updateChecked = true;
// do nothing with results?
return true;
```

}

I was wondering if this could potentially be an issue with the diff version only, so maybe I could automatically force it to use the full version if I ever do get an exception in ApplyReleases?  I have confirmed that the full version works on the basis of completely reinstalling, which does work (except for the icon never appearing, but that's another post).

Stefan

If you build squirrel locally, then add it to a project (through nuget) and then generate the installer, it will display just an empty window.
The log looks like this:

```
[INFO][2014-01-25T10:00:50] App: WiX events: DisplayMode: Full, Action: Install
[INFO][2014-01-25T10:00:51] WixUiBootstrapper: DetectPackageCompleteObs: got id: 'NetFx40Web', state: 'Present', status: '0'
[INFO][2014-01-25T10:00:51] WixUiBootstrapper: DetectPackageCompleteObs: got id: 'UserApplicationId', state: 'Absent', status: '0'
[INFO][2014-01-25T10:00:51] WixUiBootstrapper: We are doing an UI install! Huzzah!
```
