please feel free to comment and participate to share your views :)

https://github.com/mauricemach/coffeekup/issues/120

I'm trying to use something like this:

<code>
a class:"gold", data-action:"add" ->
  "Add data point"
</code>

I always get the NaN error, please can you explain how to get this to work?

Please make a package for use with meteorjs at https://atmospherejs.com/

Meteor has blade/jade but coffeescript is better

as you say 
one language to rule them all

When using require.js + node.js to combine scripts:

The below code in the `coffeecup.js` does not load the compiler.js file, the below code only works for the `coffeecup` executable...

``` coffee
  coffeecup = exports;
  coffee = require('coffee-script');
  compiler = require(__dirname + '/compiler');
  compiler.setup(coffeecup);
  fs = require('fs');
```

The following valid CoffeeCup throws an error on compilation:

``` CoffeeScript
script '#button_template', type: 'text/html', ->
    menuitem '.Button', data: {bind: 'text'}, ->
```

Running the example for Express in examples/express only renders the HTML in specific view files (eg. index.coffee) and doesn't place the rendered view into the layout.coffee @body block as expected.

Steps:
- Install express, coffeecup
- coffee app.coffee
- Visit http://localhost:3000/
- View source -- shows only the h1 and p tags from index.coffee, not the entire HTML page.

coffeecup@0.3.20
express@3.2.6

I'm using CoffeeCup to create SVG content. This works great except for one issue. SVG has a `<text>` element. But in CoffeeCup, the obvious way of creating such elements doesn't work. I want to generate `<text x="42" y="13">Hello</text>`.

```
text {x: 42, y:13}, 'Hello'
```

This only produces `[Object]`, as it invokes the `text` helper function instead of a tag function. A workaround I found is to define my own helper function that can create arbitrary elements:

```
helpers = element: (tagname, args...) -> __cc.tag(tagname, args)
coffeecup.render myTemplate, myData, hardcode: helpers
```

I use it like this in the template to produce the desired result:

```
element 'text', {x: 42, y:13}, 'Hello'
```

Maybe a similar function could be added to the CoffeeCup DSL, to deal with this situation, as well as any other potential future situation where an element name may clash with a helper or reserved word?

I could be wrong about this, but I can't think of any situation where a person would not want to escape what goes into an HTML attribute.

Doing, for instance, `span 'data-equation': 'x<22', "x is less than 22"` leads to HTML of dubious validity (but it will probably still render properly).

Trying `span 'data-outcome': 'She said "yes"', "He asked if she wanted to"` will render as `<span data-outcome="She said "yes"">He asked if she wanted to</span>`, which is definitely invalid. So when there is arbitrary data going into an attribute I have to add the `h()` helper around the value every time, which is not so neat.

I'd say this should go for attribute names and the ID and class values too, even though the characters which would be escaped are likely not ever valid in attribute, ID and class names. Better to throw warnings or end up with invalid ID/class names than to end up with invalid HTML.

Even if you don't agree that they should always be escaped (I suppose if you happen to have the strings in already-escaped format you might not want to), it should at least be an option.

This has been unresolved in a [satisfactory](http://stackoverflow.com/a/11170168/2004521) manner since June 2012 someone first popped [the question](http://stackoverflow.com/q/11166715/2004521) I believe.

Could there at least be some discussion on what would be a desirable approach to cleanly implement such a feature, if even desired, into coffeecup? I'd like to here what the lot of you think...

I didn't do a pull request. You have a few waiting anyway.

I suggest something like, to stay in line with the rest of the code and conventions, to modify `cli.coffee` and append a switch e.g. `-i` for processing stdin.

``` coffeescript
 ['-i', '--stdin', 'accept input over standard input interface stdin']
```

Then add

``` coffeescript
codeIn = ""
stdin = process.openStdin()

# and under run...

if options.stdin
    # Buffer streams of data and concat to string until finished
    stdin.on 'data', (buffer) -> codeIn += buffer.toString() if buffer
    stdin.on 'end', -> log coffeecup.render codeIn
```

This will allow for something like

``` sh
$ coffee -p -b myfile.litcoffee | js2coffee | coffeecup -i
```

As a little round-trip since coffeescript cli tool doesn't really allow a unmangle of the `.litcoffee` files yet.
