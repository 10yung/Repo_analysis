#1493, #1498

Use absolute paths for database generated source directory
I couldn't find relevant docs or example of usage SqlDelight with coroutines and Flow in Android.
https://cashapp.github.io/sqldelight/1.x/coroutines-extensions/index.html leads to 404
Found similar solution for Room: https://medium.com/androiddevelopers/threading-models-in-coroutines-and-android-sqlite-api-6cab11f7eb90
not to use GlobalScope - use single-thread scopes for SQLite operations:
```
val driver: SqlDriver = AndroidSqliteDriver(Database.Schema, context, "test.db")
    val database = Database(driver)
    val userQueries: UserQueries = database.userQueries
    val dbContext = newSingleThreadContext("DB")
    CoroutineScope(dbContext).launch {
        userQueries.createUserTable()
        userQueries.selectAll().addListener(object : Query.Listener {
            override fun queryResultsChanged() {
                val result = userQueries.selectAll().executeAsList().toString()
                CoroutineScope(dbContext).launch {
                    log(result) //log into TextView on Main Thread
                }
            }
        })
}
```
Then I've tried to wrap listener into Flow (by coroutines-extensions).
Listener tries  to make a query before table created and therefore crashes.

Is there an example with Flow?
Should I pull request note about single-thread scope usage need into docs?
Thank you for any help
#1328 sounds as if sqldelight was supposed to deterministically build but we get diffs in every(?) sqldelight generated file between two devs, both running linux and equal Dockers. In fact, using or not the Docker container makes no difference on the respective machines but somehow we have a huge diff between the two machines.

The code is [this commit](https://github.com/mycelium-com/wallet-android/commit/ec26a254c0bf21b7e9d1a56bf7f4db475c471618) and the diff is
[this](https://github.com/cashapp/sqldelight/files/4040535/sqldelight.zip).
App is not running after updating version to 1.2.1 from 1.2.0. Getting this error:

> NoSuchMethodError: com.squareup.javapoet.ClassName.reflectionName()Ljava/lang/String;

Tried:
1. Rebuild project
2. restart studio
3. restart pc
Android Studio's automated memory analysis reported a leak of 67MB in the IntelliJ plugin. Unfortunately, I do not know which version of the plugin had this leak. We only know that the leak was from the static field holding a reference to a disposed/closed project.

```
ROOT: Static field: com.squareup.sqldelight.core.SqlDelightFileIndex$Companion.indexes: 1 objects (25%), 78B
[    1/ 25%/   78B] 67.3MB          1   java.util.LinkedHashMap
[    1/ 25%/   78B] 67.2MB          1   java.util.LinkedHashMap$Entry
[    1/ 25%/   78B] 67.0MB          1   com.intellij.openapi.module.impl.ModuleImpl (disposed)
[    1/ 25%/   78B] 66.6MB          1 * com.intellij.openapi.project.impl.ProjectImpl (disposed)
```
This is a feature request to improve type inference.

The below creates a function where the wingsuit parameter is a boolean as defined in the table creation query:

`SELECT * FROM exit WHERE wingsuit = :wingsuit AND :wingsuit = 1`

This, however, creates a function where the wingsuit parameter is a long:

`SELECT * FROM exit WHERE :wingsuit = 1 AND wingsuit = :wingsuit`

If I specify column wingsuit as type Boolean in my table creation query, then I expect that all generated functions will expect Boolean.

The latter query I'd expect to be more performant than the former. This issue is moot if sqlite recognizes the chance for optimization automatically.

Both queries are pared-down versions of larger compound queries.
Steps to reproduce:

1.  Create an inline class
```kotlin
inline class Id(val value: String)
```

2. Create a mapper
```kotlin
object IdColumnAdapter : ColumnAdapter<Id, String> {

  override fun decode(databaseValue: String): Id {
    return Id(databaseValue)
  }

  override fun encode(value: Id): String {
    return value.value
  }

}
```

3 .Add this `.sq` file

```sql
CREATE TABLE USER(
 id TEXT
);

select:
SELECT * FROM User
```

4. Insert and run the code
```kotlin
db.UserQueries.select().executeAsList()
```

Error Log:
```
java.lang.ClassCastException: com.example.sqldelightcrash.Id cannot be cast to java.lang.String
        at android.app.ActivityThread.performLaunchActivity(ActivityThread.java:3374)
        at android.app.ActivityThread.handleLaunchActivity(ActivityThread.java:3513)
        at android.app.servertransaction.LaunchActivityItem.execute(LaunchActivityItem.java:83)
        at android.app.servertransaction.TransactionExecutor.executeCallbacks(TransactionExecutor.java:135)
        at android.app.servertransaction.TransactionExecutor.execute(TransactionExecutor.java:95)
        at android.app.ActivityThread$H.handleMessage(ActivityThread.java:2109)
        at android.os.Handler.dispatchMessage(Handler.java:107)
        at android.os.Looper.loop(Looper.java:214)
        at android.app.ActivityThread.main(ActivityThread.java:7682)
        at java.lang.reflect.Method.invoke(Native Method)
        at com.android.internal.os.RuntimeInit$MethodAndArgsCaller.run(RuntimeInit.java:516)
        at com.android.internal.os.ZygoteInit.main(ZygoteInit.java:950)
     Caused by: java.lang.ClassCastException: com.example.sqldelightcrash.Id cannot be cast to java.lang.String
        at com.example.sqldelightcrash.app.UserQueriesImpl$select$1.invoke(TestDbImpl.kt:58)
        at com.example.sqldelightcrash.app.UserQueriesImpl$select$1.invoke(TestDbImpl.kt:49)
        at com.squareup.sqldelight.Query.executeAsList(Query.kt:136)
        at com.example.sqldelightcrash.MainActivity.onCreate(MainActivity.kt:30)
        at android.app.Activity.performCreate(Activity.java:7815)
        at android.app.Activity.performCreate(Activity.java:7804)
        at android.app.Instrumentation.callActivityOnCreate(Instrumentation.java:1318)
        at android.app.ActivityThread.performLaunchActivity(ActivityThread.java:3349)
        at android.app.ActivityThread.handleLaunchActivity(ActivityThread.java:3513) 
        at android.app.servertransaction.LaunchActivityItem.execute(LaunchActivityItem.java:83) 
        at android.app.servertransaction.TransactionExecutor.executeCallbacks(TransactionExecutor.java:135) 
        at android.app.servertransaction.TransactionExecutor.execute(TransactionExecutor.java:95) 
        at android.app.ActivityThread$H.handleMessage(ActivityThread.java:2109) 
        at android.os.Handler.dispatchMessage(Handler.java:107) 
        at android.os.Looper.loop(Looper.java:214) 
        at android.app.ActivityThread.main(ActivityThread.java:7682) 
        at java.lang.reflect.Method.invoke(Native Method) 
        at com.android.internal.os.RuntimeInit$MethodAndArgsCaller.run(RuntimeInit.java:516) 
        at com.android.internal.os.ZygoteInit.main(ZygoteInit.java:950) 
```

It might be due to the let check not executed, as it's just returning directly from cursor.getString.

I made a reproducible repo to check easily
http://github.com/vincent-paing/SQLDelightCrash
If I have a table:

```
CREATE TABLE MigrationTest(
  test INTEGER NOT NULL
);
```

and run `generate*Schema`, `1.db` is correctly generated.

If I then create `1.sqm` and put:

```
ALTER TABLE MigrationTest ADD COLUMN test2 INTEGER NOT NULL;
```

and run `generate*Schema`, `2.db` is correctly generated.

If I then run `verify*Migration`, nothing fails.

If I delete `1.sqm` and run `verify*Migration`, nothing fails.

I tried a bunch more permutations that I thought would fail, but I can't get `verify*Migration` to actually fail. Am I doing something wrong?

I ran into two problems trying to follow the instructions at https://cashapp.github.io/sqldelight/.

First, it does not seem to mention the `sqldelight` closure that is required:

```
sqldelight {
  HockeyDb {
    packageName = "com.example.sqldelight.hockey"
  }
}
```

Without this, I cannot get any code to generate.

Also, this statement seems misleading:

> From this SQLDelight will generate a Database Kotlin class

Given that the file above it is identified as `src/main/sqldelight/com/example/sqldelight/hockey/data/Player.sq`, it seems like this will generate a `Player` class, not a `Database` class. 

Once I got past those two hiccups, I was able to get SQLDelight rocking in a Kotlin/JVM project!
When running a build scan I noticed two API deprecations:
```
Property 'outputDirectory' is annotated with @PathSensitive that is not allowed for @OutputDirectory properties.
Type 'SqlDelightTask': non-property method 'pluginVersion()' should not be annotated with: @Input.
```