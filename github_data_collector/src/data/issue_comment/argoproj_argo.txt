# Summary
Argo CLI  should support Basic username and password auth with API server.


Checklist:

* [x] Either (a) I've created an [enhancement proposal](https://github.com/argoproj/argo/issues/new/choose) and discussed it with the community, (b) this is a bug fix, or (c) this is a chore.
* [x] The title of the PR is (a) [conventional](https://www.conventionalcommits.org/en/v1.0.0/), (b) states what changed, and (c) suffixes the related issues number. E.g. `"fix(controller): Updates such and such. Fixes #1234"`.  
* [x] I have written unit and/or e2e tests for my change. PRs without these are unlike to be merged.
* [x] Optional. I've added My organization is added to the README.
* [x] I've signed the CLA and required builds are green. 

See #2016 
Checklist:

 * [x] I've included the version.
 * [x] I've included reproduction steps.
 * [x] I've included the workflow YAML.
 * [x] I've included the logs.
 
**What happened**:
i followed the CONTRIBUTING.md to  setup my dev environment。
![image](https://user-images.githubusercontent.com/14087435/72664752-8d391a80-3a3c-11ea-8d1b-af8cc2dd31d1.png)

i built "myrep:workflow-controller:v1" image, and install argo with "myrep:workflow-controller:v1".
it was successed, but when i logs( kubectl logs workflow-controller-7cf6ffb79f-hck2g -n argo
)，it shows error:
```
E0118 11:15:26.880066       1 reflector.go:125] github.com/argoproj/argo/workflow/cron/controller.go:79: Failed to list *v1alpha1.CronWorkflow: cronworkflows.argoproj.io is forbidden: User "system:serviceaccount:argo:argo" cannot list resource "cronworkflows" in API group "argoproj.io" at the cluster scope
E0118 11:15:27.882645       1 reflector.go:125] github.com/argoproj/argo/workflow/cron/controller.go:79: Failed to list *v1alpha1.CronWorkflow: cronworkflows.argoproj.io is forbidden: User "system:serviceaccount:argo:argo" cannot list resource "cronworkflows" in API group "argoproj.io" at the cluster scope
E0118 11:15:28.891255       1 reflector.go:125] github.com/argoproj/argo/workflow/cron/controller.go:79: Failed to list *v1alpha1.CronWorkflow: cronworkflows.argoproj.io is forbidden: User "system:serviceaccount:argo:argo" cannot list resource "cronworkflows" in API group "argoproj.io" at the cluster scope
E0118 11:15:29.893796       1 reflector.go:125] github.com/argoproj/argo/workflow/cron/controller.go:79: Failed to list *v1alpha1.CronWorkflow: cronworkflows.argoproj.io is forbidden: User "system:serviceaccount:argo:argo" cannot list resource "cronworkflows" in API group "argoproj.io" at the cluster scope
```
but  i edit the pod workflow-controller-7cf6ffb79f-hck2g, and use the "argoproj/workflow-controller:v2.4.3" image, it works。the logs:
```
kubectl logs workflow-controller-c85dbfdb6-8hl7t -n argo
time="2020-01-18T09:21:35Z" level=warning msg="ConfigMap 'workflow-controller-configmap' does not have key 'config'"
time="2020-01-18T09:21:35Z" level=info msg="Starting workflow TTL controller (resync 20m0s)"
time="2020-01-18T09:21:35Z" level=info msg="Workflow Controller (version: v2.4.3) starting"
time="2020-01-18T09:21:35Z" level=info msg="Workers: workflow: 8, pod: 8"
time="2020-01-18T09:21:35Z" level=info msg="Watch Workflow controller config map updates"
time="2020-01-18T09:21:35Z" level=info msg="Detected ConfigMap update. Updating the controller config."
time="2020-01-18T09:21:35Z" level=warning msg="ConfigMap 'workflow-controller-configmap' does not have key 'config'"
time="2020-01-18T09:21:36Z" level=info msg="Started workflow TTL worker"
time="2020-01-18T09:26:35Z" level=info msg="Alloc=3924 TotalAlloc=14509 Sys=70590 NumGC=7 Goroutines=69"
time="2020-01-18T09:31:35Z" level=info msg="Alloc=3946 TotalAlloc=14605 Sys=70590 NumGC=9 Goroutines=69"
W0118 09:34:58.922558       1 reflector.go:289] github.com/argoproj/argo/workflow/controller/config_controller.go:116: watch of *v1.ConfigMap ended with: too old resource version: 18714926 (18717484)
time="2020-01-18T09:36:35Z" level=info msg="Alloc=3935 TotalAlloc=14761 Sys=70590 NumGC=12 Goroutines=69"
time="2020-01-18T09:41:35Z" level=info msg="Alloc=3970 TotalAlloc=14800 Sys=70590 NumGC=14 Goroutines=69"
time="2020-01-18T09:46:35Z" level=info msg="Alloc=3957 TotalAlloc=14897 Sys=70590 NumGC=17 Goroutines=69"
time="2020-01-18T09:51:35Z" level=info msg="Alloc=4002 TotalAlloc=14979 Sys=70590 NumGC=19 Goroutines=69"
```
it seems my image is wrong。but i followed the CONTRIBUTING.md, and then got my image. And the log is ok when "make start" command is running。

#### so i want to know it is a bug。or something wrong when i setup my dev environment。

**What you expected to happen**:


**How to reproduce it (as minimally and precisely as possible)**:

**Anything else we need to know?**:

**Environment**:
- Argo version:
```
$ argo version
``` argo: v2.4.3
- Kubernetes version :
```
Client Version: version.Info{Major:"1", Minor:"17", GitVersion:"v1.17.0", GitCommit:"70132b0f130acc0bed193d9ba59dd186f0e634cf", GitTreeState:"clean", BuildDate:"2019-12-07T21:20:10Z", GoVersion:"go1.13.4", Compiler:"gc", Platform:"linux/amd64"}
Server Version: version.Info{Major:"1", Minor:"15", GitVersion:"v1.15.5", GitCommit:"20c265fef0741dd71a66480e35bd69f18351daea", GitTreeState:"clean", BuildDate:"2019-10-15T19:07:57Z", GoVersion:"go1.12.10", Compiler:"gc", Platform:"linux/amd64"}
$ kubectl version -o yaml
```


- the logs when i setup my dev environment:
# Get Go dependencies
rm -Rf .vendor-new
dep ensure -v
(1/121) Wrote contrib.go.opencensus.io/exporter/ocagent@v0.5.1
(2/121) Wrote github.com/beorn7/perks@v1.0.1
(3/121) Wrote github.com/dgrijalva/jwt-go@v3.2.0
(4/121) Wrote github.com/ajg/form@v1.5.1
(5/121) Wrote upper.io/db.v3@v3.6.3
(6/121) Wrote github.com/docker/spdystream@master
(7/121) Wrote github.com/PuerkitoBio/urlesc@master
(8/121) Wrote github.com/Knetic/govaluate@9aa49832a739dcd78a5542ff189fb82c3e423116
(9/121) Wrote github.com/PuerkitoBio/purell@v1.1.1
(10/121) Wrote github.com/Azure/go-autorest@v12.4.3
(11/121) Wrote github.com/argoproj/pkg@master
(12/121) Wrote github.com/colinmarc/hdfs@9746310a4d311e21ce43b2a645c5a1e64c5e8efa
(13/121) Wrote github.com/imdario/mergo@v0.3.8
(14/121) Wrote github.com/davecgh/go-spew@v1.1.1
(15/121) Wrote github.com/census-instrumentation/opencensus-proto@v0.2.1
(16/121) Wrote github.com/dustin/go-humanize@v1.0.0
(17/121) Wrote github.com/emicklei/go-restful@v2.11.1
(18/121) Wrote github.com/evanphx/json-patch@v4.6.0
(19/121) Wrote github.com/fatih/structs@v1.1.0
(20/121) Wrote github.com/ghodss/yaml@v1.0.0
(21/121) Wrote github.com/emirpasic/gods@v1.12.0
(22/121) Wrote github.com/go-openapi/jsonpointer@v0.19.3
(23/121) Wrote github.com/go-openapi/jsonreference@v0.19.3
(24/121) Wrote github.com/go-openapi/swag@v0.19.6
(25/121) Wrote github.com/go-sql-driver/mysql@v1.4.1
(26/121) Wrote github.com/go-openapi/spec@v0.19.5
(27/121) Wrote github.com/hashicorp/golang-lru@v0.5.3
(28/121) Wrote github.com/hashicorp/go-uuid@v1.0.1
(29/121) Wrote github.com/xeipuuv/gojsonpointer@master
(30/121) Wrote github.com/imkira/go-interpol@v1.1.0
(31/121) Wrote github.com/jbenet/go-context@master
(32/121) Wrote github.com/inconshreveable/mousetrap@v1.0
(33/121) Wrote github.com/gorilla/websocket@v1.4.1
(34/121) Wrote gopkg.in/inf.v0@v0.9.1
(35/121) Wrote gopkg.in/yaml.v2@v2.2.7
(36/121) Wrote github.com/grpc-ecosystem/grpc-gateway@v1.12.1
(37/121) Wrote gopkg.in/jcmturner/aescts.v1@v1.0.1
(38/121) Wrote gopkg.in/ini.v1@v1.51.1
(39/121) Wrote github.com/googleapis/gnostic@v0.3.1
(40/121) Wrote gopkg.in/jcmturner/dnsutils.v1@v1.0.1
(41/121) Wrote gopkg.in/jcmturner/rpc.v0@v0.0.2
(42/121) Wrote gopkg.in/src-d/go-billy.v4@v4.3.2
(43/121) Wrote gopkg.in/warnings.v0@v0.1.2
(44/121) Wrote gopkg.in/src-d/go-git.v4@v4.13.1
(45/121) Wrote k8s.io/apimachinery@release-1.16
(46/121) Wrote github.com/gophercloud/gophercloud@v0.7.0
(47/121) Wrote github.com/stretchr/objx@v0.1.1
(48/121) Wrote github.com/robfig/cron@v3.0.1
(49/121) Wrote github.com/prometheus/procfs@v0.0.8
(50/121) Wrote github.com/sergi/go-diff@v1.1.0
(51/121) Wrote github.com/sirupsen/logrus@v1.4.2
(52/121) Wrote github.com/soheilhy/cmux@v0.1.4
(53/121) Wrote k8s.io/code-generator@release-1.16
(54/121) Wrote github.com/spf13/pflag@v1.0.5
(55/121) Wrote github.com/spf13/cobra@fe5e611709b0c57fa4a89136deaa8e1d4004d053
(56/121) Wrote github.com/src-d/gcfg@v1.4.0
(57/121) Wrote github.com/google/go-querystring@v1.0.0
(58/121) Wrote k8s.io/utils@master
(59/121) Wrote github.com/golang/glog@master
(60/121) Wrote github.com/matttproud/golang_protobuf_extensions@v1.0.1
(61/121) Wrote github.com/google/gofuzz@v1.0.0
(62/121) Wrote github.com/jcmturner/gofork@v1.0.0
(63/121) Wrote k8s.io/client-go@release-12.0
(64/121) Wrote github.com/jmespath/go-jmespath@c2b33e84
(65/121) Wrote github.com/json-iterator/go@v1.1.9
(66/121) Wrote github.com/kevinburke/ssh_config@1.0
(67/121) Wrote github.com/konsorten/go-windows-terminal-sequences@v1.0.2
(68/121) Wrote k8s.io/kube-openapi@master
(69/121) Wrote github.com/lib/pq@v1.3.0
(70/121) Wrote github.com/mailru/easyjson@v0.7.0
(71/121) Wrote k8s.io/gengo@master
(72/121) Wrote github.com/tidwall/pretty@v1.0.0
(73/121) Wrote github.com/stretchr/testify@v1.4.0
(74/121) Wrote github.com/tidwall/match@v1.0.1
(75/121) Wrote github.com/golang/protobuf@v1.3.2
(76/121) Wrote github.com/modern-go/concurrent@1.0.3
(77/121) Wrote github.com/tidwall/gjson@v1.3.5
(78/121) Wrote github.com/mitchellh/go-homedir@v1.1.0
(79/121) Wrote github.com/mitchellh/go-ps@master
(80/121) Wrote sigs.k8s.io/yaml@v1.1.0
(81/121) Wrote github.com/xeipuuv/gojsonreference@master
(82/121) Wrote github.com/minio/minio-go@v6.0.25
(83/121) Wrote github.com/yalp/jsonpath@master
(84/121) Wrote k8s.io/api@release-1.16
(85/121) Wrote github.com/yudai/golcs@master
(86/121) Wrote github.com/xeipuuv/gojsonschema@v1.2.0
(87/121) Wrote github.com/klauspost/compress@v1.9.7
(88/121) Wrote github.com/yudai/gojsondiff@1.0.0
(89/121) Wrote k8s.io/klog@v1.0.0
(90/121) Wrote github.com/valyala/bytebufferpool@v1.0.0
(91/121) Wrote github.com/valyala/fasthttp@v20180529
(92/121) Wrote github.com/valyala/fasttemplate@v1.1.0
(93/121) Wrote golang.org/x/crypto@master
(94/121) Wrote github.com/pkg/errors@v0.8.1
(95/121) Wrote github.com/modern-go/reflect2@1.0.1
(96/121) Wrote golang.org/x/net@master
(97/121) Wrote github.com/xanzy/ssh-agent@v0.2.1
(98/121) Wrote gopkg.in/jcmturner/gokrb5.v5@v5.3.0
(99/121) Wrote github.com/pmezard/go-difflib@v1.0.0
(100/121) Wrote github.com/prometheus/client_golang@v0.8.0
(101/121) Wrote golang.org/x/sync@master
(102/121) Wrote google.golang.org/grpc@v1.26.0
(103/121) Wrote github.com/prometheus/common@v0.7.0
(104/121) Wrote github.com/prometheus/client_model@v0.1.0
(105/121) Wrote github.com/grpc-ecosystem/go-grpc-middleware@v1.1.0
(106/121) Wrote gonum.org/v1/gonum@v0.6.2
(107/121) Wrote gopkg.in/gavv/httpexpect.v2@v2.0.2
(108/121) Wrote golang.org/x/time@master
(109/121) Wrote github.com/google/go-cmp@v0.3.1
(110/121) Wrote golang.org/x/sys@master
(111/121) Wrote github.com/gogo/protobuf@v1.3.1
(112/121) Wrote google.golang.org/appengine@v1.6.5
(113/121) Wrote golang.org/x/text@v0.3.2
(114/121) Wrote go.opencensus.io@aab39bd6a98b853ab66c8a564f5d6cfcad59ce8a
(115/121) Wrote google.golang.org/genproto@master
(116/121) Wrote golang.org/x/tools@master
(117/121) Wrote cloud.google.com/go@v0.51.0
(118/121) Wrote github.com/aws/aws-sdk-go@v1.27.1
(119/121) Wrote golang.org/x/oauth2@master
(120/121) Wrote moul.io/http2curl@v2
(121/121) Wrote google.golang.org/api@v0.15.0
CGO_ENABLED=0 GOOS=linux GOARCH=amd64 go build -v -i -ldflags '-X github.com/argoproj/argo.version=2.5.0 -X github.com/argoproj/argo.buildDate=2020-01-18T08:58:14Z -X github.com/argoproj/argo.gitCommit=3b26af7dd4cc3d08ee50f3bc2f389efd516b9248 -X github.com/argoproj/argo.gitTreeState=dirty -extldflags "-static"' -o dist/workflow-controller-linux-amd64 ./cmd/workflow-controller
github.com/argoproj/argo/pkg/apis/workflow/v1alpha1
github.com/argoproj/argo/workflow/packer
github.com/argoproj/argo/workflow/artifacts/hdfs
github.com/argoproj/argo/pkg/client/listers/workflow/v1alpha1
github.com/argoproj/argo/pkg/client/clientset/versioned/scheme
github.com/argoproj/argo/workflow/common
github.com/argoproj/argo/pkg/client/clientset/versioned/typed/workflow/v1alpha1
github.com/argoproj/argo/pkg/client/clientset/versioned
github.com/argoproj/argo/workflow/templateresolution
github.com/argoproj/argo/workflow/validate
github.com/argoproj/argo/pkg/client/informers/externalversions/internalinterfaces
github.com/argoproj/argo/pkg/client/informers/externalversions/workflow/v1alpha1
github.com/argoproj/argo/workflow/util
github.com/argoproj/argo/pkg/client/informers/externalversions/workflow
github.com/argoproj/argo/pkg/client/informers/externalversions
github.com/argoproj/argo/workflow/metrics
github.com/argoproj/argo/workflow/ttlcontroller
github.com/argoproj/argo/workflow/config
github.com/argoproj/argo/workflow/cron
github.com/argoproj/argo/persist/sqldb
github.com/argoproj/argo/workflow/controller
github.com/argoproj/argo/cmd/workflow-controller
# Create controller image
cp dist/workflow-controller-linux-amd64 workflow-controller
docker build -t argoproj/workflow-controller:latest --target workflow-controller -f Dockerfile.dev .
#1 [internal] load .dockerignore
#1 transferring context: 284B done
#1 DONE 0.1s

#2 [internal] load build definition from Dockerfile.dev
#2 transferring dockerfile: 3.00kB done
#2 DONE 0.1s

#3 [internal] load metadata for docker.io/library/golang:1.11.5
#3 DONE 2.5s

#4 [builder 1/5] FROM docker.io/library/golang:1.11.5@sha256:34287274584796...
#4 DONE 0.0s

#10 [internal] load build context
#10 transferring context: 54.04MB 0.6s done
#10 DONE 0.6s

#7 [builder 4/5] RUN wget -O docker.tgz "https://download.docker.com/linux/...
#7 CACHED

#8 [builder 5/5] RUN wget https://github.com/golang/dep/releases/download/v...
#8 CACHED

#5 [builder 2/5] RUN apt-get update && apt-get install -y     git     make ...
#5 CACHED

#6 [builder 3/5] WORKDIR /tmp
#6 CACHED

#9 [workflow-controller 1/2] COPY --from=builder /usr/share/zoneinfo /usr/s...
#9 CACHED

#11 [workflow-controller 2/2] COPY workflow-controller /bin/
#11 DONE 0.1s

#12 exporting to image
#12 exporting layers
#12 exporting layers 0.4s done
#12 writing image sha256:c3485ead9477fe4184283a74cff4889542ad18ca8a98ecd0526b81e67d97e6b6 done
#12 naming to docker.io/argoproj/workflow-controller:latest done
#12 DONE 0.4s
rm -f workflow-controller




Checklist:

 * [Y ] I've included the version.
 * [ Y] I've included reproduction steps.
 * [ Y] I've included the workflow YAML.
 * [ Y] I've included the logs.
 
**What happened**:
set up dev environment by following [CONTRIBUTING.md](https://github.com/argoproj/argo/blob/master/docs/CONTRIBUTING.md)

```bash
kubectl get po -n argo
NAME                                   READY   STATUS    RESTARTS   AGE
argo-server-57dd9c6468-bw277           1/1     Running   0          16m
minio                                  1/1     Running   4          20h
postgres-79bf6fc4f4-6hhld              1/1     Running   5          20h
workflow-controller-78d555f86f-vq9f2   1/1     Running   0          16m
```

```bash
kubectl create ns crontest

argo cron create examples/cron-workflow.yaml -n crontest
```
cron workflow is not started, LAST RUN is N/A
```bash
argo cron list -n crontest
NAME          AGE   LAST RUN   SCHEDULE    SUSPENDED
hello-world   10m   N/A        * * * * *   false
```

I cannot get any useful log for this. 

**What you expected to happen**:
argo workflows shall be found based on schedule

```bash
argo list -n crontest

```
**How to reproduce it (as minimally and precisely as possible)**:
set dev environment by following CONTRIBUTING.md
try to create cron workflow

**Anything else we need to know?**:

**Environment**:
- Argo version:
```
$ argo version
argo: v2.5.0+3b26af7
  BuildDate: 2020-01-18T05:25:30Z
  GitCommit: 3b26af7dd4cc3d08ee50f3bc2f389efd516b9248
  GitTreeState: clean
  GoVersion: go1.11.13
  Compiler: gc
  Platform: darwin/amd64
```
- Kubernetes version :
```
$ kubectl version -o yaml
clientVersion:
  buildDate: "2019-12-07T21:20:10Z"
  compiler: gc
  gitCommit: 70132b0f130acc0bed193d9ba59dd186f0e634cf
  gitTreeState: clean
  gitVersion: v1.17.0
  goVersion: go1.13.4
  major: "1"
  minor: "17"
  platform: darwin/amd64
serverVersion:
  buildDate: "2019-10-15T12:02:12Z"
  compiler: gc
  gitCommit: 211047e9a1922595eaa3a1127ed365e9299a6c23
  gitTreeState: clean
  gitVersion: v1.14.8
  goVersion: go1.12.10
  major: "1"
  minor: "14"
  platform: linux/amd64


```

**Other debugging information (if applicable)**:
- workflow result:
```
argo cron list -n crontest
NAME          AGE   LAST RUN   SCHEDULE    SUSPENDED
hello-world   3m    N/A        * * * * *   false

argo list -n crontest
NAME   STATUS   AGE   DURATION   PRIORITY
```
- executor logs:
```
kubectl logs <failedpodname> -c init
kubectl logs <failedpodname> -c wait
```
- workflow-controller logs:
```
kubectl logs -n argo $(kubectl get pods -l app=workflow-controller -n argo -o name)
```

**Logs**

```
argo get <workflowname>
kubectl logs <failedpodname> -c init
kubectl logs <failedpodname> -c wait
kubectl logs -n argo $(kubectl get pods -l app=workflow-controller -n argo -o name)

kubectl logs workflow-controller-78d555f86f-vq9f2 -n argo
time="2020-01-18T05:26:31Z" level=info msg="workflow controller configuration from workflow-controller-configmap:\nartifactRepository:\n  archiveLogs: true\n  s3:\n    bucket: my-bucket\n    endpoint: minio:9000\n    insecure: true\n    accessKeySecret:\n      name: my-minio-cred\n      key: accesskey\n    secretKeySecret:\n      name: my-minio-cred\n      key: secretkey\npersistence:\n  connectionPool:\n    maxIdleConns: 100\n    maxOpenConns: 0\n  nodeStatusOffLoad: true\n  archive: true\n  postgresql:\n    host: postgres\n    port: 5432\n    database: postgres\n    tableName: argo_workflows\n    userNameSecret:\n      name: argo-postgres-config\n      key: username\n    passwordSecret:\n      name: argo-postgres-config\n      key: password\n"
time="2020-01-18T05:26:31Z" level=info msg="Persistence configuration enabled"
time="2020-01-18T05:26:31Z" level=info msg="Migrating database schema" schemaVersion=10
time="2020-01-18T05:26:31Z" level=info msg="Persistence Session created successfully"
time="2020-01-18T05:26:31Z" level=info msg="Workflow archiving is enabled"
time="2020-01-18T05:26:31Z" level=info msg="Starting CronWorkflow controller"
time="2020-01-18T05:26:31Z" level=info msg="Workflow Controller (version: v2.5.0+3b26af7) starting"
time="2020-01-18T05:26:31Z" level=info msg="Workers: workflow: 8, pod: 8"
time="2020-01-18T05:26:31Z" level=info msg="Watch Workflow controller config map updates"
time="2020-01-18T05:26:31Z" level=info msg="Starting workflow TTL controller (resync 20m0s)"
time="2020-01-18T05:26:31Z" level=info msg="Detected ConfigMap update. Updating the controller config."
time="2020-01-18T05:26:31Z" level=info msg="workflow controller configuration from workflow-controller-configmap:\nartifactRepository:\n  archiveLogs: true\n  s3:\n    bucket: my-bucket\n    endpoint: minio:9000\n    insecure: true\n    accessKeySecret:\n      name: my-minio-cred\n      key: accesskey\n    secretKeySecret:\n      name: my-minio-cred\n      key: secretkey\npersistence:\n  connectionPool:\n    maxIdleConns: 100\n    maxOpenConns: 0\n  nodeStatusOffLoad: true\n  archive: true\n  postgresql:\n    host: postgres\n    port: 5432\n    database: postgres\n    tableName: argo_workflows\n    userNameSecret:\n      name: argo-postgres-config\n      key: username\n    passwordSecret:\n      name: argo-postgres-config\n      key: password\n"
time="2020-01-18T05:26:31Z" level=info msg="Persistence configuration enabled"
time="2020-01-18T05:26:31Z" level=info msg="Migrating database schema" schemaVersion=10
time="2020-01-18T05:26:31Z" level=info msg="Persistence Session created successfully"
time="2020-01-18T05:26:31Z" level=info msg="Workflow archiving is enabled"
time="2020-01-18T05:26:31Z" level=info msg="Started workflow TTL worker"
time="2020-01-18T05:31:30Z" level=info msg="Alloc=4370 TotalAlloc=14775 Sys=71358 NumGC=8 Goroutines=97"
time="2020-01-18T05:36:30Z" level=info msg="Alloc=4472 TotalAlloc=14902 Sys=71358 NumGC=10 Goroutines=97"
time="2020-01-18T05:41:30Z" level=info msg="Alloc=4429 TotalAlloc=14962 Sys=71358 NumGC=13 Goroutines=97"
time="2020-01-18T05:46:30Z" level=info msg="Alloc=4415 TotalAlloc=15055 Sys=71358 NumGC=15 Goroutines=97"
time="2020-01-18T05:51:29Z" level=info msg="Alloc=4432 TotalAlloc=15189 Sys=71358 NumGC=18 Goroutines=97"
```

```
kubectl get po -n crontest
No resources found in crontest namespace.
```

---
<!-- Issue Author: Don't delete this message to ecourage other users to support your issue! -->
**Message from the maintainers**:

If you are impacted by this bug please add a 👍 reaction to this issue! We often sort issues this way to know what to prioritize.

**What happened**:

Our Makefile does some pretty intrusive things such as installing manifests, scaling up and down services, and deleting untracked files in the git repo, with the assumption that the current kubeconfig is pointing to a cluster which is safe for development purposes.

This is *not* always a safe assumption, **especially** when the development namespace we are manipulating is the `argo` namespace (where we install by default)

It's okay to have convenience make targets, so long as if it were accidentally run against a prod kubeconfig, it would fail with no affect.

Let's not default to the `argo` namespace, and/or allow a *different* namespace to be used.

Checklist:

 * [x] I've included the version.
 * [x] I've included reproduction steps.
 * [ ] I've included the workflow YAML.
 * [ ] I've included the logs.
 
**What happened**:

I open the UI and it redirected to http://localhost:2746/workflows/?namespace=argo, but I get "forbidden" error.

**What you expected to happen**:

It should actually redirect to managed namespace.

**How to reproduce it (as minimally and precisely as possible)**:

See above

**Anything else we need to know?**:

**Environment**:
- Argo version:
```
$ argo version
```
- Kubernetes version :
```
$ kubectl version -o yaml
```

**Other debugging information (if applicable)**:
- workflow result:
```
argo get <workflowname>
```
- executor logs:
```
kubectl logs <failedpodname> -c init
kubectl logs <failedpodname> -c wait
```
- workflow-controller logs:
```
kubectl logs -n argo $(kubectl get pods -l app=workflow-controller -n argo -o name)
```

**Logs**

```
argo get <workflowname>
kubectl logs <failedpodname> -c init
kubectl logs <failedpodname> -c wait
kubectl logs -n argo $(kubectl get pods -l app=workflow-controller -n argo -o name)
```

---
<!-- Issue Author: Don't delete this message to ecourage other users to support your issue! -->
**Message from the maintainers**:

If you are impacted by this bug please add a 👍 reaction to this issue! We often sort issues this way to know what to prioritize.

Checklist:

* [x] Either (a) I've created an [enhancement proposal](https://github.com/argoproj/argo/issues/new/choose) and discussed it with the community, (b) this is a bug fix, or (c) this is a chore.
* [x] The title of the PR is (a) [conventional](https://www.conventionalcommits.org/en/v1.0.0/), (b) states what changed, and (c) suffixes the related issues number. E.g. `"fix(controller): Updates such and such. Fixes #1234"`.  
* [x] I have written unit and/or e2e tests for my change. PRs without these are unlike to be merged.
* [x] Optional. I've added My organization is added to the README.
* [x] I've signed the CLA and required builds are green. 

While attempting to add support for K3D I found and fixed a bunch of issues:

* feat(controller): Exposes container runtime executor as CLI option.
* fix(rbac): Corrects RBAC roles.  
* test: Add support for K3D.
* test: Run all tests using v2 token.
* build: Speeds up builds.
Checklist:

* [x] Either (a) I've created an [enhancement proposal](https://github.com/argoproj/argo/issues/new/choose) and discussed it with the community, (b) this is a bug fix, or (c) this is a chore.
* [x] The title of the PR is (a) [conventional](https://www.conventionalcommits.org/en/v1.0.0/), (b) states what changed, and (c) suffixes the related issues number. E.g. `"fix(controller): Updates such and such. Fixes #1234"`.  
* [x] I have written unit and/or e2e tests for my change. PRs without these are unlike to be merged.
* [x] Optional. I've added My organization is added to the README.
* [ ] I've signed the CLA and required builds are green. 

# Summary
Argo Server UI is keep showing the error page if UI gets an unauthorized response from the server.

What change you think needs making.
UI should show the login page with an error message or Error page should have login page link

# Motivation
The token is cached in the browser. if token changed or accessing the different servers. UI should show the login page to update the token

<!-- Also consider asking your question on our Slack channel. See the README for more info! -->

# Summary
How to prove a private CA cert to talk to self hosted GitHub enterprise?

# Motivation

I need to be able to clone repos hosted in a private github enterprise, but how to mount the CA cert to communicate with it when using the gut artifact feature?
