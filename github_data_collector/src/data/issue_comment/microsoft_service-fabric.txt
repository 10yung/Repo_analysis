https://github.com/microsoft/service-fabric/blob/6f2a641bdfe4b7e7100780cd4a4473f8eda30d5c/src/prod/src/Common/AccessToken.cpp#L59
Hi,

I am writing a SF applicaiton where I want to use the <SetupEntryPoint> to perform some admin actions at service deployment time. I am in a dev cluster. However, that fails and in the fabric_traces I see the following sequence of events:

Information
[myappnamehere]_App3: Creating user token: Account=WF-HmIbBRXsuyVLSTv, AccountType LocalUser
Warning
LogonUser failed for WF-HmIbBRXsuyVLSTv. ErrorCode=0x80070569
Warning
[myappnamehere]_App3: Create user token: Account=WF-HmIbBRXsuyVLSTv, AccountType LocalUser error = 0x80070569
Warning
End(Service Activate): ErrorCode=0x80070569, Service Id =20618666-4589-495a-8b0e-f7ba48e403a1, ExeName Setup.bat

(0x80070569 is "Logon failure: the user has not been granted the requested logon type at this computer. ")

Looking at the Fabric sources, it looks like this is coming from LocalUser::CreateLogonToken(__out AccessTokenSPtr & userToken), where logon type is coming from LocalUser::CreateLogonToken, where it's like so:

DWORD logonType = this->performInteractiveLogon_ ? LOGON32_LOGON_INTERACTIVE : LOGON32_LOGON_NETWORK_CLEARTEXT;

I suspect that performInteractiveLogon_ is false in this context, so LOGON32_LOGON_NETWORK_CLEARTEXT is the forbidden logon type. This is probably caused by  the security policies in my company (I will open a ticket with our security about that) - but in the meantime

* can somebody confirm what logon type is actually supposed to happen? (my reading of the code above is possibly wrong)

* is it possible to say see what security policies are influencing this?
The `ClearAsync` method is part of the `IReliableCollection` interface, but is [not yet implemented](https://github.com/microsoft/service-fabric/blob/master/src/prod/src/managed/Microsoft.ServiceFabric.Data.Impl/Collections/DistributedQueue.cs#L236) for the  `DistributedQueue`.  Instead, it throws a `NotImplementedException`.
## Vision & Rationale

With WSL2 fast approaching GA and with support for development scenarios using VS Code's [Remote - WSL](https://marketplace.visualstudio.com/items?itemName=ms-vscode-remote.remote-wsl) extension, consider adding to Service Fabric the ability to orchestrate multiple WSL2 Linux Docker containers per node, on Windows clusters. 

The benefits of this feature would be numerous, for example full compatibility for Docker Linux Containers running on existing Windows clusters and alongside Windows workloads. 

WSL2 containers would be perfect for running trusted workloads whilst LCOW would be more suited to running un-trusted container workloads in their own VM.
The most recent commit on this repository was several months ago. Will this repository ever be updated with the latest service fabric code?
I have just a simple (hopefully) question around using the Actor model. Is there any current known issues around memory leaks when using it? I have been told that there is a significant issue with memory leakage over time if we use it.
### Scenario

When I hit my services through the localhost:19081/applicationPath it seems like that the Reverse Proxy tries to forward requests to the remote node as well (I assume). If we have NSGs configured to deny one of the services port, for instance, such requests may ended up with timeout issue (see below) or the response becomes very slow (up to 2 mins, but localhost:servicePort responses instantly). Workaround: make sure that services traffic is not denied between the node types..

So, does the reverse proxy also act as an internal load balancer? Sorry for may be silly question, but I haven't found any detailed description of the reverse proxy flow/architecture.

### Error
â€œForwarding request to service failed, retrying with re-resolve: phase = SendRequestHeaders, error = -805,306,139, internal error = ERROR_WINHTTP_TIMEOUT ") I guess it happens when the reverse proxy forwards the request to the remote node and, when the timeout is reached, redirects the request to the localhost (finally) and service web app opens. A bit strange..but I don't have other explanation why NSGs  have impact here...I thought localhost is localhost..

### Environment

- Azure, Service Fabric Cluster
- 2 node types (seed/secondary)
- 6 stateless applications
- Reverse Proxy (HTTP)
I am a Service Fabric fan and I am working on preparing for https://docs.microsoft.com/en-us/learn/certifications/exams/az-203.

I am very surprised to see that ASF is not in the exam syllabus. There is AKS and containers and stuff but not ASF. So, what is the idea behind that? Will Microsoft be dropping support to ASF and moving to Docker, Kubernetes? I am also learning ASF, so please let me know whether ASF will be sunset.
The guidance located [here](https://docs.microsoft.com/en-us/azure/service-fabric/service-fabric-application-secret-management-windows) describes how one creates a self-signed certificate, installs it to the VMs in the cluster and how secrets must be encrypted using the same certificate. However, the certificate I created with this approach has a one-year expiration. 

How does one roll secrets to use with a new certificate in a year's time? Would all secrets have to be re-generated and the secret values re-deployed with the new cert?
Presently, the Service Fabric object at resources.azure.com, the ARM template, the [Powershell certificate update script ](https://docs.microsoft.com/en-us/powershell/module/az.servicefabric/add-azservicefabricclustercertificate?view=azps-3.1.0) and undoubtedly all the other uses all point to using Azure Key Vault's secrets capability. 

Opening the secrets in the portal yields a deprecated warning urging users to utilize the certificate functionality instead (likely because the secrets can't be imported if they're protected with passwords). This leads to the odd process of generating a cert from my CA, uploading it to the Key Vault certificates (with its password), downloading it from there as a PEM (no longer with a password) and re-uploading into the Key Vault secrets where I can finally reference it in the various Service Fabric contexts.

Is there any timeline on being able to simply utilize Key Vault certificates instead?