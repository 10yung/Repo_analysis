**Stencil version:**
<!-- (run `npm list @stencil/core` from a terminal/cmd prompt and paste output below): -->
```
 @stencil/core@1.9.0-12
```

**I'm submitting a:**
<!-- (check one with "x") -->
[x] bug report
[ ] feature request
[ ] support request => Please do not submit support requests here, use one of these channels: https://stencil-worldwide.herokuapp.com/ or https://forum.ionicframework.com/

**Current behavior:**
When generating a dist build for a library, the collection-manifest was previously generated at /dist/collection/collection-manifest.json. This file doesn't seem to be generated. When I use my component library (https://github.com/splitinfinities/stellar) in my app (https://github.com/barcamp-events/app), the app doesn't render due to this file not being present. 

**Expected behavior:**
When this file generates, I can use my library in another project. 

**Steps to reproduce:**
Check out the beta branch on https://github.com/splitinfinities/stellar. I've tested in other repos too with the same result. 
<!--
NOTE:
Before submitting an issue, please consult our docs -> https://stenciljs.com/
-->

**Stencil version:**
<!-- (run `npm list @stencil/core` from a terminal/cmd prompt and paste output below): -->
```
 @stencil/core@1.8.5
```

**I'm submitting a:**
<!-- (check one with "x") -->
[x] bug report
[ ] feature request
[ ] support request => Please do not submit support requests here, use one of these channels: https://stencil-worldwide.herokuapp.com/ or https://forum.ionicframework.com/

**Current behavior:**
Async component initialization and queue management using rAF are causing noticeable flickers when custom components are composed. Updates that should be dealt with within a single animation frame now instead will be spread out over multiple frames. This deteriorates the app experience.

![bug](https://user-images.githubusercontent.com/10029826/72667371-7a621e00-3a1b-11ea-8015-b3f9dd9cb876.gif)


<!-- Describe how the bug manifests. -->

**Expected behavior:**
I'd expect a single render update caused by prop/state changes to be completed as a whole. I managed to emulate this by either replacing the rAF with a direct call, or by disabling `initializeNextTick`.

![expected](https://user-images.githubusercontent.com/10029826/72667343-396a0980-3a1b-11ea-9b60-cf72df357a84.gif)

**Other information:**

A somewhat related problem occurs when combining multiple component libraries. I assume that each component library will have its own runtime and scheduler, in which case updates will be uncoordinated/decoupled even more.

<!--
NOTE:
Before submitting an issue, please consult our docs -> https://stenciljs.com/
-->

**Stencil version:**
<!-- (run `npm list @stencil/core` from a terminal/cmd prompt and paste output below): -->
```
 @stencil/core@1.8.1
```

**I'm submitting a:**
<!-- (check one with "x") -->
[x] bug report
[ ] feature request
[ ] support request => Please do not submit support requests here, use one of these channels: https://stencil-worldwide.herokuapp.com/ or https://forum.ionicframework.com/

**Current behavior:**
When executing `insertBefore` on a Stencil element in a polyfilled browsers, a `NotFoundError` occurs as the parent/child relationship between the element and reference node is changed by content in the shadowDOM in other browsers. This a primarily an issue for content slotted within a Stencil element.

The same issue occurs in the `removeChild` polyfill.

**Expected behavior:**
`insertBefore` wrapper verifies that the calling node is the parent of the reference node and adjusts accordingly.

**Steps to reproduce:**
In elements that support slotted content, mutate its children insert before.  Our case was a custom select with dynamically rendered options.  Below is an approximation of the implementation:

**Related code:**

```tsx
@Component({
    tag: 'custom-select',
    shadow: true,
    styleUrl: 'styles.css'
})
export class CustomSelect implements ComponentInterface {
 render() {
        return (
            <click-elsewhere (attrs)>
                <custom-input (attrs) />
                <div class="custom-select-dropdown custom-element-dropdown">
                    <div class="custom-select-options">
                        <slot />
                    </div>
                </div>
            </click-elsewhere>
        )
    }
}
```

```tsx
@Component({
    tag: 'custom-option',
    shadow: true,
    styleUrl: 'styles.css'
})
export class CustomOption implements ComponentInterface {
    render() {
        return (
            <div role="option" (attrs)>
                <div class="custom-option-selection">
                    {this.selected ? (<custom-icon type="checkmark" class="custom-option-selection-icon" />) : ( '')}
                </div>
                <div class="custom-option-content">
                    <slot />
                </div>
            </div>
        );
    }
}
```

```html
<custom-select>
    <div hidden class="reference-node"></div>
</custom-select>
<script>
    const newChild = document.createElement('custom-option');
    const referenceNode = document.querySelector('.reference-node');
    document.querySelector('custom-select').insertBefore(newChild, referenceNode);
</script>
```

**Other information:**

The real case occurs in a Ember app where `insertBefore` is called by glimmer during the template render.

I would recommend verifying that the calling node is equivalent to the reference node's parent in the wrapping DOM polyfill where the native `insertBefore` method is called (`J.call(this, a, c);`) Below is what we implemented in the short term before we import the Stencil code:

```ts
function remapInsertBefore(): void {
    const nativeInsertBefore = window.Node.prototype.insertBefore;
    function wrappedInsertBefore<T extends Node>(this: any, newChild: T, refChild: Node | null) : T { 
        let referenceNode = this;
        if (refChild && refChild.parentNode && referenceNode !== refChild.parentNode) {
            referenceNode = refChild.parentNode;
        }
        return nativeInsertBefore.call(referenceNode, newChild, refChild) as T;
    }

    window.Node.prototype.insertBefore = wrappedInsertBefore;
}

function remapRemoveChild(): void {
    const nativeRemoveChild = window.Node.prototype.removeChild;
    function wrappedRemoveChild<T extends Node>(this: any, oldChild: T) : T {
        let referenceNode = this;
        if (oldChild.parentNode && referenceNode !== oldChild.parentNode) {
            referenceNode = oldChild.parentNode;
        }
        return nativeRemoveChild.call(referenceNode, oldChild) as T;
    }

    window.Node.prototype.removeChild = wrappedRemoveChild;
}

if (!window.Element.prototype.attachShadow) {
    remapInsertBefore();
    remapRemoveChild();
}

```

I have added a dependencies: boolean property to OutputTargetDocsReadme, this allows the developer to disable the dependencies part of the markdown readme.md file.

If the property is undefined the dependencies will still be rendered.
**Stencil version:**
```
 @stencil/core@1.9.0-12 (using --next)
```

**I'm submitting a:**
[x] bug report
[ ] feature request
[ ] support request

**Current behavior:**
Hydrate app renderToString causes Eleventy to throw `Unexpected identifier "let scopeId;"` error when using `--next` flag.

**Expected behavior:**
Without `--next` flag everything is working like previously.

**Steps to reproduce:**
I’m basically trying to do what I’ve described in our documentation here: https://www.duetds.com/server-side-rendering/#ssr-configuration This works in`1.9.0-12` without the next flag, but not anymore when using `--next` compiler. The exact error in console is:

```shell
Eleventy fatal error: (more in DEBUG output)
> Error in your Eleventy config file '/duet/docs/.eleventy.js'.

`EleventyConfigError` was thrown
> Unexpected identifier

`SyntaxError` was thrown:
    /duet/packages/components/hydrate/index.js:3790
    let scopeId;
        ^^^^^^^
    
    SyntaxError: Unexpected identifier
        at Module._compile (internal/modules/cjs/loader.js:895:18)
        at Object.Module._extensions..js (internal/modules/cjs/loader.js:995:10)
        at Module.load (internal/modules/cjs/loader.js:815:32)
        at Function.Module._load (internal/modules/cjs/loader.js:727:14)
        at Module.require (internal/modules/cjs/loader.js:852:19)
        at require (internal/modules/cjs/helpers.js:74:18)
        at Object.<anonymous> (/duet/docs/.eleventy.js:9:17)
        at Module._compile (internal/modules/cjs/loader.js:959:30)
        at Object.Module._extensions..js (internal/modules/cjs/loader.js:995:10)
        at Module.load (internal/modules/cjs/loader.js:815:32)
```

**Related code:**

```js
const hydrate = require(".../packages/components/hydrate")

module.exports = function(config) {
  config.addTransform("hydrate", async (content, outputPath) => {
    if (outputPath.endsWith(".html")) {
      try {
        const results = await hydrate.renderToString(content, {
          clientHydrateAnnotations: true,
          removeScripts: false,
          removeUnusedStyles: false
        })
        return results.html
      } catch (error) {
        return error
      }
    }
    return content
  })
}
```

**Stencil version:**
```
 @stencil/core@1.9.0-12>
```

**I'm submitting a:**
<!-- (check one with "x") -->
[x] bug report
[ ] feature request
[ ] support request => Please do not submit support requests here, use one of these channels: https://stencil-worldwide.herokuapp.com/ or https://forum.ionicframework.com/

**Current behavior:**
The project consisting of several packages in a `lerna` environment builds but throws this error in the console in the browser:
```
index-7d8f9f58.js:2562 TypeError: Cannot read property '$hostElement$' of undefined
    at setValue (index-7d8f9f58.js:1696)
    at MyComponent.set [as first] (index-7d8f9f58.js:1774)
    at new MyComponent (my-component.entry.js:15)
    at initializeComponent (index-7d8f9f58.js:1872)
```

**Expected behavior:**
Compiles **AND** runs successfully.

Related Slack conversation:
https://stencil-worldwide.slack.com/archives/C9LTCKAN8/p1579115167152400

**Steps to reproduce:**
Repo that re-produces the case: https://github.com/bitflower/stencil-lerna/tree/stencil-next


**Stencil version:**
```
 @stencil/core@1.9.0-12
```

**I'm submitting a:**
[X] bug report

**Current behavior:**
Transpiling a component using `@stencil/core@1.9.0-12/compiler/stencil.js` generates invalid code.

**Steps to reproduce:**
https://webcomponents.dev/edit/~gluck/stencil-compiler-vnext (check the result code in the console).
![image](https://user-images.githubusercontent.com/604263/72531371-96c25700-3871-11ea-89a3-721e831eda07.png)
Generated constructor can't run (no method `this.__registerHost`)
(working fine in previous versions, that's what we use on https://webcomponents.dev)

Thanks.

<!--
NOTE:
Before submitting an issue, please consult our docs -> https://stenciljs.com/
-->

**Stencil version:**
<!-- (run `npm list @stencil/core` from a terminal/cmd prompt and paste output below): -->
```
    @stencil/core@1.8.4 
```

**I'm submitting a:**
<!-- (check one with "x") -->
[x] bug report
[ ] feature request
[ ] support request => Please do not submit support requests here, use one of these channels: https://stencil-worldwide.herokuapp.com/ or https://forum.ionicframework.com/

**Current behavior:**
<!-- Describe how the bug manifests. -->
I try to run command `stencil generate lorem-ipsum` but instead of generating folder `lorem-ipsum` it's generated folder `ipsum`. But the tag component and test name are correct though. 

![image](https://user-images.githubusercontent.com/7524911/72518001-f0814c00-3886-11ea-8f85-192cb0bd1455.png)


```js
import { Component, Host, h } from '@stencil/core';

@Component({
  tag: 'lorem-ipsum',
  styleUrl: 'ipsum.css',
  shadow: true
})
export class Ipsum {

  render() {
    return (
      <Host>
        <slot></slot>
      </Host>
    );
  }

}

```

**Expected behavior:**
<!-- Describe what the behavior would be without the bug. -->

It should generate files and the folder with `lorem-ipsum`

**Steps to reproduce:**
<!-- If you are able to illustrate the bug or feature request with an example, please provide steps to reproduce and if possible a demo
-->
Run 
```
npx stencil generate lorem-ipsum
```

**Related code:**

```tsx
// insert any relevant code here
```

**Other information:**
<!-- List any other information that is relevant to your issue. Stack traces, related issues, suggestions on how to fix, Stack Overflow links, forum links, etc. -->

Following up on this tweet: https://twitter.com/romannurik/status/1217219379357724673

I think the CLI could provide some simple hooks to make it easier to integrate and work with other tooling. I was hoping to open this up to the community to help design this API so we can follow some of the best practices and ideas out there.

Throughout the build, the CLI receives events from the compiler of when it starts, its progress, and at the end it the compiler provides the cli with the build results. If we were to have hooks fire off when the build starts and finish, what would you envision the API should look like? Thanks in advance!