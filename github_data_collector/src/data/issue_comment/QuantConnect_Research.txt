Enable support for custom indicators, similar to how one would be created for a QC Algorithm

```
class CustomSimpleMovingAverage:
    def __init__(self, name, period):
        self.Name = name
        self.Time = datetime.min
        self.Value = 0
        self.IsReady = False
        self.queue = deque(maxlen=period)

    def __repr__(self):
        return "{0} -> IsReady: {1}. Time: {2}. Value: {3}".format(self.Name, self.IsReady, self.Time, self.Value)

    # Update method is mandatory
    def Update(self, input):
        self.queue.appendleft(input.Close)
        count = len(self.queue)
        self.Time = input.EndTime
        self.Value = sum(self.queue) / count
        self.IsReady = count == self.queue.maxlen

custom = CustomSimpleMovingAverage('SPY', 21)
x = qb.Indicator(CustomSimpleMovingAverage, 'SPY', 360, Resolution.Daily)
```
matplotlib.finance module isn't found when imported to the Research Environment. An update is needed so that the current module is available in the RE.
Both of the code snippets below should return weekly options data, but instead, they return a `NullReferenceException`. This issue stems for this forum thread: https://www.quantconnect.com/forum/discussion/4552/weekly-options-in-notebook/p1

```
class MyQuantBook(QuantBook):
def UniverseFunc(self, universe):
return universe.IncludeWeeklys().Strikes(-2, 2).Expiration(timedelta(0), timedelta(365*2))
qb = MyQuantBook()
spy = qb.AddOption("GOOG")
spy.SetFilter(qb.UniverseFunc)
```

```
qb = QuantBook()

def UniverseFunc(self, universe):
        return universe.IncludeWeeklys().Strikes(-8, 8).Expiration(timedelta(25), timedelta(35))
qb.AddEquity("SPY", Resolution.Daily)
spy = qb.AddOption("SPY", Resolution.Daily)
spy.SetFilter(UniverseFunc)
```
#### Expected Behavior
A call such as 
```
qb = QuantBook()
begin = datetime(2009,2,27)
end = datetime.now()
stocks = ["AAPL","MSFT","ADBE","IBM","BRK.B"]
data = qb.GetFundamental(stocks, 'ValuationRatios.EVToEBIT3YrAvg' ,begin,end).fillna(method='ffill')
df = data.apply(pd.to_numeric)
```
should return a data frame of values. This problem exists for a number of ValuationRatios class members, the full extent of which is unknown.
#### Actual Behavior
The above call returns the dataframe
```
            AAPL R735QTJ8XC9X  MSFT R735QTJ8XC9X  ADBE R735QTJ8XC9X  \
2009-02-27                0.0                0.0                0.0   
2009-02-28                0.0                0.0                0.0   
2009-03-02                0.0                0.0                0.0   
2009-03-31                0.0                0.0                0.0   
2009-04-03                0.0                0.0                0.0   

            IBM R735QTJ8XC9X  BRKB R735QTJ8XC9X  
2009-02-27               0.0                0.0  
2009-02-28               0.0                0.0  
2009-03-02               0.0                0.0  
2009-03-31               0.0                0.0  
2009-04-03               0.0                0.0
```
where all entries are 0
#### Potential Solution

#### Reproducing the Problem
Code snippet above can reproduce the problem, or see this notebook: https://www.quantconnect.com/research/8d474cf62e3f2fd72bf8891abafa7f0a

#### Checklist
- [x] I have completely filled out this template
- [x] I have confirmed that this issue exists on the current `master` branch
- [x] I have confirmed that this is not a duplicate issue by searching [issues](https://github.com/QuantConnect/Lean/issues)
- [x] I have provided detailed steps to reproduce the issue

<!--- Template inspired by https://github.com/stevemao/github-issue-templates -->