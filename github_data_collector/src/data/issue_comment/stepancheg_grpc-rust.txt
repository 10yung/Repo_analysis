considering the protobuf message possesses a field `async`, the generated grpc rust code will irritate compiler under 2018 edition.

here's a simple demonstration,  add two lines in greeting example repo:

```git
greeter $ git diff
diff --git a/grpc-examples/greeter/Cargo.toml b/grpc-examples/greeter/Cargo.toml
index 4477fde..4a5bc33 100644
--- a/grpc-examples/greeter/Cargo.toml
+++ b/grpc-examples/greeter/Cargo.toml
@@ -3,6 +3,7 @@ name = "grpc_examples_greeter"
 version = "0.0.0"
 authors = ["Stepan Koltsov <stepan.koltsov@gmail.com>"]
 publish = false
+edition = "2018"

 [lib]
 doctest = false
diff --git a/grpc-examples/greeter/helloworld.proto b/grpc-examples/greeter/helloworld.proto
index 0bee1fc..dc3f75d 100644
--- a/grpc-examples/greeter/helloworld.proto
+++ b/grpc-examples/greeter/helloworld.proto
@@ -45,6 +45,7 @@ service Greeter {
 // The request message containing the user's name.
 message HelloRequest {
   string name = 1;
+  bool async = 2;
 }

 // The response message containing the greetings
```

and rustc would complain

```
error: expected identifier, found reserved keyword `async`
   --> grpc-examples/greeter/src/helloworld.rs:216:14
    |
216 |         self.async = false;
    |              ^^^^^ expected identifier, found reserved keyword
help: you can escape reserved keywords to use them as identifiers
    |
216 |         self.r#async = false;
    |              ^^^^^^^

error: aborting due to 11 previous errors

error: Could not compile `grpc_examples_greeter`.
```
In Server return a GrpcMessageError to client.

```rust
    fn send_bulk_encu(
        &self,
        _m: grpc::RequestOptions,
        req: BulkEncu,
    ) -> grpc::SingleResponse<Empty> {
        grpc::SingleResponse::err(grpc::Error::GrpcMessage(grpc::GrpcMessageError {
            grpc_status: 2,
            grpc_message: String::from("Some custom error msg"),
        }))
    }
```

BUT in client, I recieve a Http(CodeError(InternalError)) with message "http error: Encountered HTTP named error"

```rust
match client.send_bulk_encu(opt, data).wait_drop_metadata() {
    Ok(_) => (),
    Err(e) => {
        println!("{}",e);
        ()
    }
}
```
Hey guys, really awesome job with this one. I am heavy user of this crate as it seamless integrates into the rust with bazel using rules_rust. I do have a question: Async/Await just got pushed to stable in rust 1.39 a week ago. I am wondering if there was any plan to migrate this crate to use futures 0.3.x and move the crate and it's dependencies to the new async/await syntax.
 #99  touches my questions, but there has been little discussion since Jan of this year. 

Happy to help in the efforts. 

I'm not sure I'm actually putting this in the correct repo in terms of root cause, since it could be down to an HTTP or TLS error :) but gRPC is what I'm directly interacting with

So I'm trying to write a Rust client for one of our products, which uses gRPC.  I've managed to get everything to compile, but when I try to interact with either of the two gRPC services I'm importing, the requests seem to be failing with "http error: Client died"

Both are unary requests and unary responses.  One of the responses is an Empty, the other is a real thing.

I'm not opposed to digging in and debugging, since I'm sure I'm just doing something wrong, but I'm not sure where to start - any direction to kick that off would be very appreciated.

Thanks!


in example grpc::ServerHandlerContext is private i can not import my project.
Hi! Could you maybe add some kind of feature list to the readme? Nothing extraordinary, just a place where interested people can see what is supported (and what is not).
build failed in both examples.

```
error[E0277]: the trait bound `T: tls_api::TlsConnector` is not satisfied
  --> grpc/src/client/mod.rs:50:13
   |
50 |     Explict(ClientTlsOption<T>),
   |             ^^^^^^^^^^^^^^^^^^ the trait `tls_api::TlsConnector` is not implemented for `T`
   |
   = help: consider adding a `where T: tls_api::TlsConnector` bound
   = note: required by `httpbis::ClientTlsOption`

error[E0277]: the trait bound `A: tls_api::TlsAcceptor` is not satisfied
  --> grpc/src/server/mod.rs:77:5
   |
77 |     pub http: httpbis::ServerBuilder<A>,
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `tls_api::TlsAcceptor` is not implemented for `A`
   |
   = help: consider adding a `where A: tls_api::TlsAcceptor` bound
   = note: required by `httpbis::ServerBuilder`

error[E0277]: the trait bound `TLS: tls_api::TlsConnector` is not satisfied
   --> grpc/src/client/mod.rs:144:5
    |
144 | /     pub fn explicit_tls<TLS: tls_api::TlsConnector>(
145 | |         self,
146 | |         tls: ClientTlsOption<TLS>,
147 | |     ) -> ClientBuilder<'a, TLS> {
...   |
154 | |         }
155 | |     }
    | |_____^ the trait `tls_api::TlsConnector` is not implemented for `TLS`
    |
    = help: consider adding a `where TLS: tls_api::TlsConnector` bound
    = note: required by `httpbis::ClientTlsOption`

error: aborting due to 3 previous errors

For more information about this error, try `rustc --explain E0277`.
error: Could not compile `grpc`.
```
Hii, great library i love it.
But i need example about how to use interceptor like a UnaryClientInterceptor and also ServerUnaryInterceptor..

Thanks
Somewhere in the dependency tree is the crate openssl 0.9, which is too old for my openssl version.

This causes the following issue :
https://github.com/sfackler/rust-openssl/issues/987

This is specifically due to:
httpbis -> tls-api-openssl -> openssl 0.9.*

You may consider switching to an http implementation more widely used which may be updated better, and also of better quality.
Note that openssl was updated to 0.10 two months ago already.