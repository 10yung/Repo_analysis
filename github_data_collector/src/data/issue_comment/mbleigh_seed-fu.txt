Here I setup TravisCI.
I believe we need to have CI so that we can detect regression earlier.
For now we depend on Rails 6 on tests. I know it's not enough but as a start it should be good.
Hi,

This patches will do:
 * RSpec transition from 2 to 3
 * Make compatible with Rails 6.0.0

This patch will close: #132 #136

Cheers,
When I tried building and testing this with following:
```
bundle install --path vendor/bundle
bundle exec rake spec
```

Following error is occured:
```
rake aborted!
NoMethodError: undefined method `last_comment' for #<Rake::Application:0x000055b2ccc367f0>
/tmp/seed-fu/vendor/bundle/ruby/2.5.0/gems/rspec-core-2.99.2/lib/rspec/core/rake_task.rb:143:in `initialize'
/tmp/seed-fu/Rakefile:5:in `new'
/tmp/seed-fu/Rakefile:5:in `<top (required)>'
/tmp/seed-fu/vendor/bundle/ruby/2.5.0/gems/rake-12.3.3/exe/rake:27:in `<top (required)>'
(See full trace by running task with --trace)
```
Seems like current filtering feature not working if filter regexp triggered by element of the project path.
I'm trying to create a dev environment for an existing project. I'm working on this project for the first time and I'm new to this gem. When I run 'rake db:seed_fu', it gets to a certain point and then I start getting timeout errors. Is there a way to change the default timeout setting?
So typically, when passing a block to `File.open`, the `IO` object with automatically close when the block terminates.  However, we have notice when attempting to write fixtures for largish database dumps that the `IO` stream is closing before the last few strings are written.

I believe the cause of this is here:

https://github.com/mbleigh/seed-fu/blob/master/lib/seed-fu/writer.rb#L96-L98

Basically, the `ensure` is killing the the stream before the last chunks have been written to the file by niling it.

I am not sure this solution is the best, but it solved our issue.  I might take a stab at refactoring this code later.
Tests failing with rails 5.2

Please enable support for rails 5.2

```
Using sqlite3 to run the tests.
-- create_table(:seeded_models, {:force=>true})
   -> 0.0130s
-- create_table(:seeded_model_no_primary_keys, {:id=>false, :force=>true})
   -> 0.0075s
-- create_table(:seeded_model_no_sequences, {:id=>false, :force=>true})
   -> 0.0064s

SeedFu::Runner
  should seed data from Ruby and gzipped Ruby files in the given fixtures directory
  should seed only the data which matches the filter, if one is given
  should use the SpecFu.fixtures_path variable to determine where fixtures are

SeedFu::Seeder
  should work with negative seeds
  should create a model if one doesn't exist
  should be able to handle multiple constraints
  should be able to create models from an array of seed attributes
  should be able to create models from a list of seed attribute hashes at the end of the args
  should update, not create, if constraints are met
  should create but not update with seed_once
  should default to an id constraint
  should require that all constraints are defined
  should not perform validation
  should raise an ActiveRecord::RecordNotSaved exception if any records fail to save (FAILED - 1)

SeedFu::Writer
  should successfully write some seeds out to a file and then import them back in (FAILED - 2)
  should support chunking (FAILED - 3)
  should support specifying the output to use 'seed_once' rather than 'seed' (FAILED - 4)

Failures:

  1) SeedFu::Seeder should raise an ActiveRecord::RecordNotSaved exception if any records fail to save
     Failure/Error: expect { SeededModel.seed(:fail_to_save => true, :title => "Foo") }.to raise_error(ActiveRecord::RecordNotSaved)
       expected ActiveRecord::RecordNotSaved but nothing was raised
     # ./spec/seeder_spec.rb:173:in `block (2 levels) in <top (required)>'

  2) SeedFu::Writer should successfully write some seeds out to a file and then import them back in
     Failure/Error: FileUtils.rm(@file_name)

     NameError:
       uninitialized constant FileUtils
     # ./spec/writer_spec.rb:9:in `block (2 levels) in <top (required)>'

  3) SeedFu::Writer should support chunking
     Failure/Error: FileUtils.rm(@file_name)

     NameError:
       uninitialized constant FileUtils
     # ./spec/writer_spec.rb:9:in `block (2 levels) in <top (required)>'

  4) SeedFu::Writer should support specifying the output to use 'seed_once' rather than 'seed'
     Failure/Error: FileUtils.rm(@file_name)

     NameError:
       uninitialized constant FileUtils
     # ./spec/writer_spec.rb:9:in `block (2 levels) in <top (required)>'

Deprecation Warnings:

Using `should` from rspec-expectations' old `:should` syntax without explicitly enabling the syntax is deprecated. Use the new `:expect` syntax or explicitly enable `:should` with `config.expect_with(:rspec) { |c| c.syntax = :should }` instead. Called from /<<PKGBUILDDIR>>/spec/runner_spec.rb:7:in `block (2 levels) in <top (required)>'.


If you need more of the backtrace for any of these deprecations to
identify where to make the necessary changes, you can configure
`config.raise_errors_for_deprecations!`, and it will turn the
deprecation warnings into errors, giving you the full backtrace.

1 deprecation warning total

Finished in 0.42254 seconds (files took 0.56322 seconds to load)
17 examples, 4 failures

Failed examples:

rspec ./spec/seeder_spec.rb:172 # SeedFu::Seeder should raise an ActiveRecord::RecordNotSaved exception if any records fail to save
rspec ./spec/writer_spec.rb:12 # SeedFu::Writer should successfully write some seeds out to a file and then import them back in
rspec ./spec/writer_spec.rb:23 # SeedFu::Writer should support chunking
rspec ./spec/writer_spec.rb:35 # SeedFu::Writer should support specifying the output to use 'seed_once' rather than 'seed'

```
By passing the record into the Exception, the developer has one
more tool to debug the seed-process.

I created Table without 'id',
And then When I try to `seed_fu`, it was occurred below.
```
Your seed constraints contained unknown columns: `id`
```
How can I do that?