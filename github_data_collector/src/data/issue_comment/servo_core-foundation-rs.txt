Hi! Could you please add `NSThread` bindings ([shouldn't be very hard](https://developer.apple.com/documentation/foundation/nsthread)). Or is there a guide explaining adding new bindings? Thanks.
This pull request includes:
* Low-level CoreFoundation bindings for `CFMutableData`.
* Implementation of `CFMutableData` type.
* Implementation of `IntoIterator` trait for `CFData`.
* Implementation of `Deref`, `DerefMut`, `IntoIterator`, `Extend` and `FromIterator` trait for `CFMutableData`.
* Tests for `CFData` and `CFMutableData`.

Potential future improvements:
* When invalid `CFRange` is detected, should we return a `Result::Err` instead of panicking?
* `data::IntoIter` can be made more efficient. Currently `data::IntoIter` calls `CFDataGetBytePtr` on every iteration. We can instead call `CFDataGetBytePtr` only once and cache the data pointer for future iterations.
Not sure if this belongs here. It would be awesome to have bindings to the CoreWLAN interface which provides functionality for WLAN and AirDrop. 

**Documentation:** https://developer.apple.com/documentation/corewlan
**Since:**: macOS 10.6+

I do have access to a MacBook. If you guys could provide me a small how-to I can try to implement it myself and create a PR.
This could be useful for the `authenticator` and `notify` crates.
Calling this function twice in a row will crash the program. I think the issue is that the implementation is creating a `CGDisplayMode` by taking a pointer to the display mode returned by `CGDisplayCopyAllDisplayModes`, but the array is freed when the function returns. I believe there is a double-free happening here. Adding a `CGDisplayModeRetain` call might solve the issue. I'm confused by the macros that this library uses, so I'm not sure that this is the correct solution however.
Hey there, this is an initial work to make CGImages saveable and it was tested with the code below.
I didn't see much tests around, should I add them with my PR?
I also put some TODOs on the code because those were questions that I could not answer.
Let me know if this is useful and I will keep with the work.

```rust
use core_graphics::display::{
    kCGNullWindowID, kCGWindowImageDefault, kCGWindowListOptionAll, CGDisplay, CGPoint, CGRect,
    CGSize,
};

use core_graphics::image::CGImageDestination;

use core_foundation::string::CFString;
use core_foundation::url::CFURL;

fn main() {
    let position = CGPoint::new(0.0, 0.0);
    let size = CGSize::new(1000.0, 1000.0);
    let bounds = CGRect::new(&position, &size);

    let screenshot = CGDisplay::screenshot(
        bounds,
        kCGWindowListOptionAll,
        kCGNullWindowID,
        kCGWindowImageDefault,
    )
    .unwrap();
    let destination = CGImageDestination::with_url(
        CFURL::from_path("screenshot.bmp", false).unwrap(),
        CFString::new("com.microsoft.bmp"),
        1,
        None,
    );
    destination.add_image(screenshot, None);
    assert!(destination.finalize());
}
```

<!-- Reviewable:start -->
---
This change isâ€‚[<img src="https://reviewable.io/review_button.svg" height="34" align="absmiddle" alt="Reviewable"/>](https://reviewable.io/reviews/servo/core-foundation-rs/292)
<!-- Reviewable:end -->

https://github.com/servo/core-foundation-rs/blob/36d7c972feeeb4a93879e76ac0b9d410cb6130b8/core-foundation/src/array.rs#L66-L74

---

Elements in CFArray are pointers. It should be ok to allow storing raw pointers, `usize`, etc. in the CFArray, but not any `Copy`-able. 
```
wait_200_milliseconds, elapsed: 0.3790910243988037
thread 'runloop::test::wait_200_milliseconds' panicked at 'assertion failed: elapsed > 0.19 && elapsed < 0.30', core-foundation/src/runloop.rs:184:9
note: Run with `RUST_BACKTRACE=1` for a backtrace.
test runloop::test::wait_200_milliseconds ... FAILED
failures:
failures:
    runloop::test::wait_200_milliseconds
```
We should make it more reliable.
For example, `NSApplicationActivationOptions` allow a value of 0 (default behaviour) or a combination of flags (`NSApplicationActivateAllWindows | NSApplicationActivateIgnoringOtherApps`), but with it being implemented as enum, neither is not possible. 
Refs #200 

---

Thoughts on this? These crates are frustrating to use in Rust. Adapting the Swift APIs would lead to a significantly better UX in the API. 

We could offer the Objective C API in addition to the Swift API for _some_ backwards compatibility though I'm unsure if we could keep it 100% as the types are just `id` aliases now.
