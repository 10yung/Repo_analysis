
**I'm submitting a ...**  (check one with "x")
[ ] bug report
[x] feature request
[ ] support request => Please do not submit support requests here, use one of these channels: https://forum.ionicframework.com/ or https://ionicworldwide.herokuapp.com/

**Current behavior:**
Plugin(https://github.com/Taracque/cordova-plugin-braintree) is not maintened.
Docs(https://ionicframework.com/docs/native/braintree) says: 

> Ionic Native utilizes a maintained fork of the original cordova-plugin-braintree

But the plugin has not been updated for more than 2 years.

**Expected behavior:**
Ionic native should provide working and up to date plugins, propose alternatives or update docs.

**Other information:**
In ionic 4 and cordova 8 the pluguin not working. The config file(`res/xml/config.xml`) path is incorrect. There is issues(https://github.com/Taracque/cordova-plugin-braintree/issues/53) and a pull  request(https://github.com/Taracque/cordova-plugin-braintree/pull/47) but no one is merging.
I have applied the fix but it still does not work.

**Plus**: there is no support for Braintree v3 for android to allow PSD2 Strong Customer Authentication. https://github.com/Taracque/cordova-plugin-braintree/issues/70


I have tried using fileReader and base64 native but it is not working, I have used same in ionic 3 . I think it is cause of webview ionic:// or earlier we used to have file://

**I'm submitting a ...**  (check one with "x")
[X] bug report
[ ] feature request
[ ] support request => Please do not submit support requests here, use one of these channels: https://forum.ionicframework.com/ or https://ionicworldwide.herokuapp.com/

**Current behavior:**
<!-- Describe how the bug manifests. -->
it is crashing when we choose DATA.URL and it is not working with FILE.URI

**Expected behavior:**
<!-- Describe what the behavior would be without the bug. -->
It should not crash provide base64

**Steps to reproduce:**
<!-- If you are able to illustrate the bug or feature request with an example, please provide steps to reproduce. -->
https://github.com/indraraj26/camera-test-ios/blob/master/src/app/home/home.page.ts
Repo: https://github.com/indraraj26/camera-test-ios/ 

When we choose DATA_URL it is crashing timeout timeout.

**Related code:**

```
insert any relevant code here
```

**Other information:**
<!-- List any other information that is relevant to your issue. Stack traces, related issues, suggestions on how to fix, Stack Overflow links, forum links, etc. -->

**Ionic info:** (run `ionic info` from a terminal/cmd prompt and paste output below):

```
Ionic:

   Ionic CLI                     : 5.2.3 (/usr/local/lib/node_modules/ionic)
   Ionic Framework               : @ionic/angular 4.11.8
   @angular-devkit/build-angular : 0.801.3
   @angular-devkit/schematics    : 8.1.3
   @angular/cli                  : 8.1.3
   @ionic/angular-toolkit        : 2.1.2

Cordova:

   Cordova CLI       : 8.1.2 (cordova-lib@8.1.1)
   Cordova Platforms : ios 5.1.1
   Cordova Plugins   : cordova-plugin-ionic-keyboard 2.2.0, cordova-plugin-ionic-webview 4.1.3, (and 5 other plugins)

Utility:

   cordova-res : not installed
   native-run  : 0.2.8 (update available: 0.3.0)

System:

   ios-deploy : 1.9.4
   ios-sim    : 8.0.2
   NodeJS     : v12.13.0 (/usr/local/bin/node)
   npm        : 6.12.0
   OS         : macOS High Sierra
   Xcode      : Xcode 10.1 Build version 10B61

```

Hello This is Solee Choi working for a Korean IT Company which is called SIOT.
We offer payment API like Stripes and have been developing some modules for react-native, flutter, capacitor etc.
Now we are working on ionic cordova plugin and trying to add iamport-cordova plugin(https://github.com/iamport/iamport-cordova) on ionic-native to make developers use our plugin on ionic environment.
It would be pleasure for you to allow iamport-cordova plugin.
Thanks!

**I'm submitting a ...**  (check one with "x")
[ ] bug report
[ ] feature request
[ ] support request => Please do not submit support requests here, use one of these channels: https://forum.ionicframework.com/ or https://ionicworldwide.herokuapp.com/

**Current behavior:**
<!-- Describe how the bug manifests. -->

**Expected behavior:**
<!-- Describe what the behavior would be without the bug. -->

**Steps to reproduce:**
<!-- If you are able to illustrate the bug or feature request with an example, please provide steps to reproduce. -->

**Related code:**

```
insert any relevant code here
```

**Other information:**
<!-- List any other information that is relevant to your issue. Stack traces, related issues, suggestions on how to fix, Stack Overflow links, forum links, etc. -->

**Ionic info:** (run `ionic info` from a terminal/cmd prompt and paste output below):

```
insert the output from ionic info here
```

**I'm submitting a ...**  (check one with "x")
[ ] bug report
[ X] feature request
[ ] support request => Please do not submit support requests here, use one of these channels: https://forum.ionicframework.com/ or https://ionicworldwide.herokuapp.com/

**Current behavior:**
@ionic-native/firebase-authentication doesn't export getCurrentUser() 

**Expected behavior:**
why doesn't  @ionic-native/firebase-authentication export getCurrentUser() of cordova-plugin-firebase-authentication? Is there a reason or different way to check if a user is already logged?





**I'm submitting a ...**  (check one with "x")
[X] bug report
[ ] feature request
[ ] support request => Please do not submit support requests here, use one of these channels: https://forum.ionicframework.com/ or https://ionicworldwide.herokuapp.com/

**Current behavior:**
Ionic native http client JSON serializer behaves differently in iOS than in Android.
`httpClient.setDataSerializer('json');` Will create a different payload depending on the platform (the order of the fields in the  serialized JSON changes). 

For iOS it seems that the order is alphabetically inverse (Z to A for the field keys, both in root and in nested level)
For Android the order of the fields in the object is preserved


**Expected behavior:**
The serialization is the same regardless of the platform.

**Steps to reproduce:**

- Create a component with a httpService
- Set serializer to json
- Make a post request
- The content can be verified in the server side, if printing the body as it comes the serialization will be seen as different

**Related code:**

```
import {HTTP} from '@ionic-native/http/ngx';

export class SomeService {
  constructor(private httpClient: HTTP) {}

  async postRequest(url: string, postBody: object): Promise<object> {
    this.httpClient.setDataSerializer('json');
    try {
      return await this.httpClient.post(url, postBody, null);
    } catch (e) {
      throw new MyCustomError(e);
    }
  }

}
```

**Other information:**
In order to work around the issue, we set the serializer to `utf8`, stringify the payload and add a `{'Content-Type': 'application/json'}` header.
```
    this.httpClient.setDataSerializer('utf8');
    await this.httpClient.post(url, JSON.stringify(postBody), {'Content-Type': 'application/json'});

```

**Ionic info:** (run `ionic info` from a terminal/cmd prompt and paste output below):

Ionic:

   Ionic CLI                     : 5.2.3 (/usr/local/lib/node_modules/ionic)
   Ionic Framework               : @ionic/angular 4.11.5
   @angular-devkit/build-angular : 0.801.3
   @angular-devkit/schematics    : 8.1.3
   @angular/cli                  : 8.1.3
   @ionic/angular-toolkit        : 2.1.1

Cordova:

   Cordova CLI       : 9.0.0 (cordova-lib@9.0.1)
   Cordova Platforms : android 8.1.0, ios 5.0.1
   Cordova Plugins   : cordova-plugin-ionic-keyboard 2.2.0, cordova-plugin-ionic-webview 4.1.3, (and 8 other plugins)

Utility:

   cordova-res : not installed
   native-run  : 0.2.9 (update available: 0.3.0)

System:

   ios-deploy : 1.9.4
   ios-sim    : 8.0.2
   NodeJS     : v12.6.0 (/usr/local/Cellar/node/12.6.0/bin/node)
   npm        : 6.9.0
   OS         : macOS Mojave
   Xcode      : Xcode 11.3 Build version 11C29

```

Hi,

I have backend API like so:

```
      registerFcmToken(userIdToken: string, firebaseInstanceId: string, fcmToken: 
string): Promise<ConfirmationResponseModel> {
        // code
      }
```
Can you tell me what should I send here? firebaseInstanceId

I use FirebaseX plugin here: https://github.com/dpa99c/cordova-plugin-firebasex#api

I can generate `this.fcmToken = await this.firebase.getToken();` But what is `firebaseInstanceId`?

Firebase doc says this: https://firebase.google.com/docs/reference/android/com/google/firebase/iid/FirebaseInstanceId.html#public-taskinstanceidresult-getinstanceid-

But what is the equivalent of FirebaseX?

I can see this on Cordova plugin: https://github.com/dpa99c/cordova-plugin-firebasex/blob/master/www/firebase.js#L14

But it is not on your Typescript native wrapper. Any workaround?

https://github.com/ionic-team/ionic-native/blob/master/src/%40ionic-native/plugins/firebase-x/index.ts
**I'm submitting a ...**  (check one with "x")
[x] bug report
[ ] feature request
[ ] support request => Please do not submit support requests here, use one of these channels: https://forum.ionicframework.com/ or https://ionicworldwide.herokuapp.com/

**Current behavior:**
Obviously we don't want to use any of this hardware when server side rendering. But if we have a unified code base, if you do `import {BarcodeScanner} from '@ionic-native/http'`, for example, you're going to run into node issues when you visit any page. Imports are static, so everything is processed as long as the require tree hits this file.

**Expected behavior:**
End-distribution files should stick to CommonJS imports and exports, along with declaration files.

**Steps to reproduce:**
1. Have server.ts as an entry point to your SSR logic.
2. In that, import `BarcodeScanner`
3. Try to visit the server, even if you don't use `BarcodeScanner` (and of course, you won't, it's the server)`

**Related code:**
Troublesome code, affecting all of the plugins I use, is in the index.js files. Example:
`node_modules/@ionic-native/barcode-scanner/index.js` has

`import { IonicNativePlugin, cordova } from '@ionic-native/core';`

which will cause `SyntaxError: Unexpected token import`

**Other information:**
The fix is quite easy. When publishing to NPM, compile these files down to ES5.

Current workaround I use is messy, but I centralized all my hardware plugins into a single `hardware.ts` file that automagically only imports when running on the client, while still keeping type support:

```typescript
const LaunchReviewImport = async () => (await import('@ionic-native/launch-review')).LaunchReview;
const BarcodeScannerImport = async () => (await import('@ionic-native/barcode-scanner')).BarcodeScanner;
const HTTPImport = async () => (await import('@ionic-native/http')).HTTP;

type Unpromise<T extends Promise<any>> = T extends Promise<infer U> ? U : never;


export const LaunchReview: Unpromise<ReturnType<typeof LaunchReviewImport>> = (typeof window === 'undefined') ? (null as any) : require('@ionic-native/launch-review').LaunchReview;
export const BarcodeScanner: Unpromise<ReturnType<typeof BarcodeScannerImport>> = (typeof window === 'undefined') ? (null as any) : require('@ionic-native/barcode-scanner').BarcodeScanner;
export const HTTP: Unpromise<ReturnType<typeof HTTPImport>> = (typeof window === 'undefined') ? (null as any) : require('@ionic-native/http').HTTP;
```

Again, the nulls don't matter here, because all of this hardware is used on event handlers, which by definition only run on the client.
