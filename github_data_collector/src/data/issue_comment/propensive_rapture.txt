IntelliJ version: 2017.2.6
sbt version: 0.13.15
Scala version: 2.12.3

Hi, i cloned the project and tried to import the SBT and i got this error: not found: value java8SupportJVMi.

I also tried to do the sbt publishLocal and this was what i got: 
Error: Could not find or load main class #

Here is the stack trace:

Error:Error while importing SBT project:<br/>...<br/><pre>[info] Resolving org.scala-sbt#cache;0.13.13 ...
[info] Resolving org.scala-sbt#testing;0.13.13 ...
[info] Resolving org.scala-sbt#test-agent;0.13.13 ...
[info] Resolving org.scala-sbt#main-settings;0.13.13 ...
[info] Resolving org.scala-sbt#apply-macro;0.13.13 ...
[info] Resolving org.scala-sbt#command;0.13.13 ...
[info] Resolving org.scala-sbt#template-resolver;0.1 ...
[info] Resolving org.scala-sbt#logic;0.13.13 ...
[info] Resolving org.scala-sbt#compiler-interface;0.13.13 ...
[info] Resolving org.scala-lang#jline;2.10.6 ...
[info] Resolving org.fusesource.jansi#jansi;1.4 ...
[info] Done updating.
C:\Users\Tiago Filipe\Desktop\travisTest\rapture\build.sbt:56: error: not found: value java8SupportJVMi
.dependsOn(baseJVM, coreJVM, timeJVM, uriJVM, codecJVM, cryptoJVM, csvJVM, ioJVM, fsJVM, netJVM, httpJVM, mimeJVM, cliJVM, mailJVM, logJVM, i18nJVM, googleTranslateJVM, textJVM, latexJVM, testJVM, dataJVM, xmlJVM, jsJVM, cssJVM, currencyJVM, jsonJVM, htmlJVM, domJVM, coreScalazJVM, httpJsonJVM, java8SupportJVMi, unixsocketJVM)
^
sbt.compiler.EvalException: Type error in expression
[error] sbt.compiler.EvalException: Type error in expression
[error] Use 'last' for the full log.
Picked up JAVA_TOOL_OPTIONS: -Dfile.encoding=UTF8
Java HotSpot(TM) 64-Bit Server VM warning: ignoring option MaxPermSize=384M; support was removed in 8.0</pre><br/>See complete log in <a href="file:/C:/Users/Tiago%20Filipe/.IdeaIC2017.2/system/log/sbt.last.log">file:/C:/Users/Tiago%20Filipe/.IdeaIC2017.2/system/log/sbt.last.log</a>
I've tried to migrate my sample to rapture 2.0 M9 but I cannot find the correct way to do it, here is a minimalist sample: https://github.com/tyrcho/rapture-json-demo/blob/rapture_2/src/main/scala/Demo.scala

this code worked with rapture 1.1 (my [master](https://github.com/tyrcho/rapture-json-demo/blob/master/src/main/scala/Demo.scala) branch)

```scala
Json.parse(string).as[Person]
```

but fails with rapture 2 (branch [rapture_2](https://github.com/tyrcho/rapture-json-demo/blob/rapture_2/src/main/scala/Demo.scala)):

```
Error:(16, 32) not enough arguments for method as: (implicit ext: rapture.data.Extractor[Demo.Person,rapture.json.Json], implicit mode: rapture.core.Mode[rapture.data.Data#as])mode.Wrap[Demo.Person,ext.Throws].
Unspecified value parameters ext, mode.
  val p = Json.parse(string).as[Person]
```
I found the [blog post](http://rapture.io/mod/i18n) about Rapture's i18n library and am really interested in trying it out but had a heck of a time trying to find where it is. I think if you just pointed out either in the blog post or in the readme which artifacts you need for different rapture libraries it would be a big help.   

Cheers! 👍 
Josh
I hit an issue in a production system with this string using the jawn backend:
```
scala> json"""{"description":" "}"""
java.util.NoSuchElementException: None.get
  at scala.None$.get(Option.scala:347)
  at scala.None$.get(Option.scala:345)
  ... 29 elided

scala> """" """".getBytes()
res16: Array[Byte] = Array(34, 32, 11, 34)
```
Some further testing was done, and this issue was definitely jawn related.  Looks like it works on Json4s and Argonaut, but seems to fail for the others. Jackson actually gives a useful exception which says that the control character 11 needs to be escaped with a backslash. Jackson is right, according to RFC7159 (https://tools.ietf.org/html/rfc7159#page-8), this should be escaped.

Rapture should take a conservative stance on what is allowed inside an interpolated string. So making that a compile error would be better.
`Xml` module is not able to dispatch a valid `Extractor` from nested structures when the extraction of some middle elements has been customized. The behavior has been observed starting from nested structures greater than three elements. See the next code snippet as an example of this issue:

```scala
object RaptureXmlOk {
  import rapture.xml._

  case class Foo(bar: Bar)
  case class Bar(baz: Baz)
  case class Baz(qux: Qux)
  case class Qux(value: String)

  implicitly[Extractor[Bar, Xml]] // works
  implicitly[Extractor[Foo, Xml]] // works
}

// REPL
// :paste
// Entering paste mode (ctrl-D to finish)
// CTRL +D
// Exiting paste mode, now interpreting.
// defined object RaptureXmlOk

object RaptureXmlKo {
  import rapture.xml._, xmlBackends.stdlib._

  case class Foo(bar: Bar)
  case class Bar(baz: Baz)
  case class Baz(qux: Qux)
  object Baz {
    // custom extractor in order to be able to extract this:
    // xml"""<foo><bar><baz><value>xxx</value></baz></bar></foo>""".as[Foo]
    // i.e. without the extra <qux>...</qux>
    implicit val bazExtractor: Extractor[Baz, Xml] =
      Xml.extractor[Qux].map(Baz(_))
  }
  case class Qux(value: String)

  implicitly[Extractor[Bar, Xml]] // works
  implicitly[Extractor[Foo, Xml]] // fails!!!
}

// REPL
// :paste
// Entering paste mode (ctrl-D to finish)
// CTRL +D
// Exiting paste mode, now interpreting.
// <console>:27: error: cannot extract type RaptureXmlKo.Foo from rapture.xml.Xml.
//  implicitly[Extractor[Foo, Xml]] // fails!!!
```
**Issue:**
Wrong extracting of XML list nodes

**Example:**
`xml"""<a><b>1</b><b>2</b><b>23</b></a> """.b.as[List[Int]] // List[Int](1, 2, 23); - is ok`
`xml"""<a><b>1</b><b>2</b><b>23</b></a> """.b.as[List[String]] // List[String](1, 2, 23); - not ok`
`xml"""<a><b>1</b><b>2</b></a> """.b.as[Int] //res2: Int = 12 - not ok`
`xml"""<a><b>1</b><b>2</b></a> """.b.as[String] //res2: String = 12 - not ok`

**Expected:**
`xml"""<a><b>1</b><b>2</b><b>23</b></a> """.b.as[List[String]]` should lead to `rapture.json.TypeMismatchException:t ype mismatch: Expected string but found number`

`xml"""<a><b>1</b><b>2</b></a> """.b.as[Int]` should lead to `rapture.xml.TypeMismatchException: type mismatch: Expected number but found array`

`xml"""<a><b>1</b><b>2</b></a> """.b.as[String]` should lead to `rapture.xml.TypeMismatchException: type mismatch: Expected string but found array`

**Issue:**
Wrong List serialization to XML

**Example:**
```
case class Foo(name: String, abc: List[String])
val user = Foo("Joe", List("abc", "1,2,3"))
val userXML = Xml(user) //userXML: rapture.xml.Xml = xml"""<name>Joe</name><abc>abc1,2,3</abc>"""
userXML.abc.as[List[String]] 
```
result is 
`xml"""<name>Joe</name><abc>abc1,2,3</abc>"""`
`List(abc1,2,3)`

**Expected:**
```
val userXML = Xml(user) //userXML: rapture.xml.Xml = xml"""<name>Joe</name><abc>abc</abc><abc>1,2,3</abc>"""
userXML.abc.as[List[String]]  // List("abc", "1,2,3")
```

**Issue:**
Rapture-XML cannot extract "top"-level xml elements

**Example:**
```
import rapture.xml._
import rapture.core.java8.time._
xml"""<name>Joe</name><birthday>1983-03-29</birthday>""".birthday.as[LocalDate]
```
result: `MissingValueException`

**Expected:**
`LocalDate.of(1983, 3, 29)` 
It should be possible to do something like this:

    val q : Option[String] =  Some("badger")
    json"""{"snake":${q.getOrElse("snake")}}"""

For some reason it doesn't compile.
When I add the following dependency:
"com.propensive" %% "rapture" % "2.0.0-M7"
I end up with rapture-test in my compile scope which pulls scalatest 2.2.6 into my compile scope.

I have worked around it by excluding rapture-test explicitely.

