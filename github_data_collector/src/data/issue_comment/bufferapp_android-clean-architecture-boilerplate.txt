I see modularization by layer. How would package/modularize by feature to improve build speeds fall into this?

I have a question
the data model that are using for sending between activity/fragment live? 

the data model most likely domain's data model but it's can be serialized/Parcelized
Hi, I'm new on Clean architecture and we are planning to convert our project(MVP) to Clean architecture and I'm making POC project from our code base and see how it goes for my team.

as the sample code, the data fetch from the cache only the cache not expired or cached in our case is fetch the data from cached when fetching the data from network failed whatever case.

Any ideas?
App can't load data from the URL , gives  404  https://joe-birch-dsdb.squarespace.com/s/team.json
> The layer defines the Bufferoo class but no mapper. This is because the Domain layer is our central layer, it knows nothing of the layers outside of it so has no need to map data to any other type of model.

Is there a detailed reason why the Domain Has no Mappings?
wouldn't a Bufferoo fetched from an external source need to be mapped to a Bufferoo in the domain?

Hi, one question related to domain project/module...
Can you explain a little bit more what is a reason that use-cases and domain logic are in
the same module, shouldn't it be more appropriate to separate use-cases to application layer
and domain entities with all their logic to domain layer... This way the domain layer is
shareable as enterprise-wide rules....


> More on stackexchange: [Application layer vs Domain layer](https://softwareengineering.stackexchange.com/questions/140999/application-layer-vs-domain-layer)
On the screen that shows the members

![image](https://user-images.githubusercontent.com/11631092/47849668-4caa9e00-ddb1-11e8-8b07-790b664739e3.png)


If I want to fetch the network on the pagination event, like while the user is scrolling.
What would it be the best aproach?
Presentation gradle has :

def presentationDependencies = rootProject.ext.cacheDependencies
def presentationTestDependencies = rootProject.ext.cacheTestDependencies

but I guess that this has to be something like : 

def presentationDependencies = rootProject.ext.presentationDependencies
def presentationTestDependencies = rootProject.ext.presentationTestDependencies

Also in dependencies.gradle, presentationDependencies has to be changed to provide only the necessary libraries.
Updated gradle, kotlin and travis configuration to compile with Android Oreo, which is the default for new projects now.