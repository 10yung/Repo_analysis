## Environment
 - macOS Catalina 10.15.2
 - Xcode 11.3
 - Carthage 0.34.0 

## Reproduce steps
1. Create `Cartfile` like following

```
github "Bendingspoons/katana-swift"
```

2. Run `carthage update`

## Result
```
*** Fetching katana-swift
*** Checking out katana-swift at "3.1.0"
*** xcodebuild output can be found in /var/folders/bs/dbz4nbxn5td3_t2tfwnp59jh0000gn/T/carthage-xcodebuild.WVmBg3.log
*** Skipped building katana-swift due to the error:
Dependency "katana-swift" has no shared framework schemes

If you believe this to be an error, please file an issue with the maintainers at https://github.com/Bendingspoons/katana-swift/issues/new
```

## Note
Actually, this could be solved by re-creating `Katana` schema.

However, we still couldn't build Katana with carthage after it:

```
*** xcodebuild output can be found in /var/folders/bs/dbz4nbxn5td3_t2tfwnp59jh0000gn/T/carthage-xcodebuild.GjLfSJ.log
*** Building scheme "Katana" in Katana.xcodeproj
Build Failed
        Task failed with exit code 65:
        /usr/bin/xcrun xcodebuild -project /Users/knothole/git/Katana/Katana.xcodeproj -scheme Katana -configuration Release -sdk iphoneos ONLY_ACTIVE_ARCH=NO CODE_SIGNING_REQUIRED=NO CODE_SIGN_IDENTITY= CARTHAGE=YES archive -archivePath /var/folders/bs/dbz4nbxn5td3_t2tfwnp59jh0000gn/T/Katana SKIP_INSTALL=YES GCC_INSTRUMENT_PROGRAM_FLOW_ARCS=NO CLANG_ENABLE_CODE_COVERAGE=NO STRIP_INSTALLED_PRODUCT=NO (launched in /Users/knothole/git/Katana)

This usually indicates that project itself failed to compile. Please check the xcodebuild log for more details: /var/folders/bs/dbz4nbxn5td3_t2tfwnp59jh0000gn/T/carthage-xcodebuild.GjLfSJ.log
```

And the log file said

```
/usr/bin/xcrun xcodebuild -project /Users/knothole/git/Katana/Katana.xcodeproj -scheme Katana -configuration Release -sdk iphoneos ONLY_ACTIVE_ARCH=NO CODE_SIGNING_REQUIRED=NO CODE_SIGN_IDENTITY= CARTHAGE=YES archive -archivePath /var/folders/bs/dbz4nbxn5td3_t2tfwnp59jh0000gn/T/Katana SKIP_INSTALL=YES GCC_INSTRUMENT_PROGRAM_FLOW_ARCS=NO CLANG_ENABLE_CODE_COVERAGE=NO STRIP_INSTALLED_PRODUCT=NO (launched in /Users/knothole/git/Katana)User defaults from command line:
    IDEArchivePathOverride = /var/folders/bs/dbz4nbxn5td3_t2tfwnp59jh0000gn/T/Katana

Build settings from command line:
    CARTHAGE = YES
    CLANG_ENABLE_CODE_COVERAGE = NO
    CODE_SIGN_IDENTITY = 
    CODE_SIGNING_REQUIRED = NO
    GCC_INSTRUMENT_PROGRAM_FLOW_ARCS = NO
    ONLY_ACTIVE_ARCH = NO
    SDKROOT = iphoneos13.2
    SKIP_INSTALL = YES
    STRIP_INSTALLED_PRODUCT = NO

note: Using new build system
note: Planning build
note: Constructing build description
error: /Users/knothole/git/Katana/Pods/Target Support Files/Pods-Katana/Pods-Katana.release.xcconfig: unable to open file (in target "Katana" in project "Katana") (in target 'Katana' from project 'Katana')
error: /Users/knothole/git/Katana/Pods/Target Support Files/Pods-Katana/Pods-Katana.release.xcconfig: unable to open file (in target "Katana" in project "Katana") (in target 'Katana' from project 'Katana')
error: /Users/knothole/git/Katana/Pods/Target Support Files/Pods-Katana/Pods-Katana.release.xcconfig: unable to open file (in target "Katana" in project "Katana") (in target 'Katana' from project 'Katana')

** ARCHIVE FAILED **
```

I guess, the easy way to fix this is adding `Pods` directory into this repository.
**Why**
 - I want to use katana at macOS project.
 - Since README says that macOS 10.10+ is requirement, the deployment target should be match with it.

**Changes**
- Update `Package.swift` for SwiftPM.
- Update `*.podspec` for CocoaPods.
- Add missing availability for old macOS.
 - Fix headers to work both iOS and macOS.

**Tasks**
* [x] ~~Add relevant tests, if needed~~
* [x] ~~Add documentation, if needed~~
* [x] ~~Update README, if needed~~
* [x] Ensure that all the examples (as well as the demo) work properly
  * [x] Build passed with SwiftPM
  * [x] Build passed with CocoaPods
  * [ ] Build passed with Carthage (couldn't due to #185)
**Why**
Make the `context.dispatch` function returns a value when a returning side effect is dispatched.
**Why**
Improve documentation and tests over the new changes brought by the returning side effects

Check the "hide whitespace changes" button in order to make the review easier on you (I also indented all the files).
Sometimes it is useful to pass information between side effects when the logic requires to combine them. At the moment the only ways this can be done are either using callbacks or with the support of the state. None of them are optimal.

This pr introduces the possibility of passing a return value from a side effect.


Note that it is still a WIP and must be properly tested and documented. Moreover, we should make sure that we're not introducing performance issues or cases that cannot be managed.

Finally, old code related to `Actions` has been removed for good

**The PR brings breaking changes**
Will there be a lightweight version of Katana for SwiftUI?
# Problem

Right now `StoreListener`s do not have the capability to reason about diffs between old state and new state.
An example of usage could be change the `LocalState` of a `ViewController` in [Tempura](https://github.com/BendingSpoons/tempura-swift/tree/master) based on those differences inside [`func update(with state: V.VM.S)`](https://github.com/BendingSpoons/tempura-swift/blob/a5279c04fafcaff05f4f192c39570e9b7c7a8bb3/Tempura/Core/ViewController.swift#L285) that could become `func update(oldState: V.VM.S)`.

# Proposal

Modify `StoreListener` to accept the oldState as parameter, this should be fairly simple.
Appreciate all the great work on Katana.  Would it be possible to keep a Changelog.md like you have done with Tempura?  I tried to go through the commit history and the release tagging, but they aren't structured in a way to determine the changes.  