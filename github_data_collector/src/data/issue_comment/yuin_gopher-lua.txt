Fixes #250 

Changes proposed in this pull request:

- LStates can now optionally limit how many LTables and how many LTable keys are set
- This provides basic memory quotas for LStates as LTable growth is the most common way for an LState to grow in memory use
- Defaults to not being tracked
- When enabled - has almost negligible speed and memory impact

Is it possible?

~~~
$ cat sun.lua
local http = require("http")

$ glua sun.lua
sun.lua:1: module http not found:
no field package.preload['http']
CreateFile .\http.lua: The system cannot find the file specified.
CreateFile C:\opt\lua\http.lua: The system cannot find the path specified.
CreateFile C:\opt\lua\http\init.lua: The system cannot find the path specified.
~~~

https://github.com/yuin/gopher-lua#standalone-interpreter

I'v made the lib [gopherlua-debugger](https://github.com/edolphin-ydf/gopherlua-debugger). But it need modify some code in gopher-lua

1. #131  this pr is needed which make gopher-lua support the hook feature.
2. some fix in the first pr, include import error and `SetHook` fix [hook fix](https://github.com/edolphin-ydf/gopher-lua/commit/efef5f867eba15d68518a5aec6e6debac457c311)
3. #252 a bug in gopher-lua. I'v tried to fix it in my fork [getlocal buf fix](https://github.com/edolphin-ydf/gopher-lua/commit/92ca436742b9ce047fa0bfbe13faf4bb207bb359).  I could make a pr if needed.

A debugger is very useful sometimes.  Hope to finish this work together.
- [x] GopherLua is a Lua5.1 implementation. You should be familiar with Lua programming language. Have you read [Lua 5.1 reference manual](http://www.lua.org/manual/5.1/) carefully?
- [x] GopherLua is a Lua5.1 implementation.  In Lua, to keep it simple, **it is more important to remove functionalities rather than to add functionalities unlike other languages** . If you are going to introduce some new cool functionalities into the GopherLua code base and the functionalities can be implemented by existing APIs, It should be implemented as a library. 

Please answer the following before submitting your issue:

1. What version of GopherLua are you using? : 1cd887c
2. What version of Go are you using? : 1.13
3. What operating system and processor architecture are you using? : linux/amd64
4. What did you do? : N/A
5. What did you expect to see? : N/A
6. What did you see instead? : N/A

I want to add part of the baselib functions to LState, but there is no way to do that since every baselib function implementation is private.  
What about add something like `OpenBaseStrip` which can pass a list of baselib function name, and add them to LState.


- [x] GopherLua is a Lua5.1 implementation. You should be familiar with Lua programming language. Have you read [Lua 5.1 reference manual](http://www.lua.org/manual/5.1/) carefully?
- [x] GopherLua is a Lua5.1 implementation.  In Lua, to keep it simple, **it is more important to remove functionalities rather than to add functionalities unlike other languages** . If you are going to introduce some new cool functionalities into the GopherLua code base and the functionalities can be implemented by existing APIs, It should be implemented as a library. 

Please answer the following before submitting your issue:

1. What version of GopherLua are you using? : 
2. What version of Go are you using? : 
3. What operating system and processor architecture are you using? :
4. What did you do? :
5. What did you expect to see? :
6. What did you see instead? :

the test code is
```lua
local t = {aa = 1, bb = 2}
for k, v in pairs(t) do
    print(k, v)
end

local a = 1
local b = 2
local c = a+b
local x = 1
while true do
    local name, value = debug.getlocal(1, x)
    if not name then
        break
    end
    print(name, value)
    x = x + 1
end

```

and the output is
```
aa      1
bb      2
t       table: 0xc00006c420
(for generator) 1
(for state)     2
(for control)   3
k       5
v       function: 0xc000118700
a       1
```

the debug.getlocal(1, x) cannot get vars like b, c, x.
hope to fix this.

- [x] GopherLua is a Lua5.1 implementation. You should be familiar with Lua programming language. Have you read [Lua 5.1 reference manual](http://www.lua.org/manual/5.1/) carefully?
- [x] GopherLua is a Lua5.1 implementation.  In Lua, to keep it simple, **it is more important to remove functionalities rather than to add functionalities unlike other languages** . If you are going to introduce some new cool functionalities into the GopherLua code base and the functionalities can be implemented by existing APIs, It should be implemented as a library. 

Please answer the following before submitting your issue:

1. What version of GopherLua are you using? :  latest
2. What version of Go are you using? : 1.13
3. What operating system and processor architecture are you using? : osx
4. What did you do? : write a value to a LTable with very large int index
5. What did you expect to see? : the k,v should be stored in LTable.dic
6. What did you see instead? : the k,v stored in LTable.array and fill many many LNil before the index


hi, i'v seen #117 , but i think it could be optimized just like the c-lua which ensure at least more than 50% usage of the array. so, i'v tried to implement this feature by learned from c-lua.  i could make a pr to show what i'v done with this if you agree with me


- [X] GopherLua is a Lua5.1 implementation. You should be familiar with Lua programming language. Have you read [Lua 5.1 reference manual](http://www.lua.org/manual/5.1/) carefully?
- [X] GopherLua is a Lua5.1 implementation.  In Lua, to keep it simple, **it is more important to remove functionalities rather than to add functionalities unlike other languages** . If you are going to introduce some new cool functionalities into the GopherLua code base and the functionalities can be implemented by existing APIs, It should be implemented as a library. 

Please answer the following before submitting your issue:

1. What version of GopherLua are you using? : 1cd887cd
2. What version of Go are you using? : 1.13.1
3. What operating system and processor architecture are you using? : darwin/amd64
4. What did you do? : N/A
5. What did you expect to see? : N/A
6. What did you see instead? : N/A

I am interested in limiting the amount of memory used by individual `LState`s, so that lua scripts with leaks in them cannot completely consume all process memory. It would be great to discuss some ideas here. At the end of this process I can potentially propose a patch.

My thoughts so far:

It is unlikely that we can get an exact measure of memory used by `LState`s, the goal really is to total up the sizes of all `LTable`s which are currently retained, and their contents. `LTable` reference cycles should be handled and `LTable`s which are global and local should be considered.

## Passive tracking
Somehow keep a running approximation of the size of allocated memory. This would involve hooking code into table operations like `RawSet` etc, table creation `NewLTable` and possibly other points. Difficulties arise with tracking frees, as the GC nature of go means that we currently have no single point to hook when an `LTable` is freed. (Go's finalizers are not helpful for data structures which can contain cycles). I think this could only be made to work if we stopped relying on GC to collect tables, and instead modified the VM to do explicit ref counting on table references - which would be too intrusive a change I think.

## On demand calculation
Another approach could be to calculate the size of an `LState` on demand - eg an `ApproxMemSize` method for `LState`. This method would iterate all values in the registry and the global table and sum their sizes - taking care to avoid double counting. This could be a relatively expensive operation, but it would have no runtime overhead to normal operation of the VM. It may be possible to do some caching between calls to `ApproxMemSize` to try and skip sizing on tables which have not changed since the last call.

I'm interested in hearing any comments on these ideas or any alternative approaches - thanks!
- [X] GopherLua is a Lua5.1 implementation. You should be familiar with Lua programming language. Have you read [Lua 5.1 reference manual](http://www.lua.org/manual/5.1/) carefully?
- [X] GopherLua is a Lua5.1 implementation.  In Lua, to keep it simple, **it is more important to remove functionalities rather than to add functionalities unlike other languages** . If you are going to introduce some new cool functionalities into the GopherLua code base and the functionalities can be implemented by existing APIs, It should be implemented as a library. 

Please answer the following before submitting your issue:

1. What version of GopherLua are you using? : `1cd887cd`
2. What version of Go are you using? : 1.13.1
3. What operating system and processor architecture are you using? : darwin/amd64
4. What did you do? : N/A
5. What did you expect to see? : N/A
6. What did you see instead? : N/A

I'm always interested in reducing the runtime memory of gopher lua as my use case has thousands of `LState`s and tens of thousands of `LTables` per process.

I noticed recently that quite a good memory saving was possible by removing the `k2i` and `keys` fields of the `LTable` for tables which were never iterated - which is the vast majority in my case. I think it could be interesting to only initialize and start updating `keys` and `k2i` on the first call to `next`, so that `LTable`s which are never iterated do not incur this memory overhead.

It would also marginally speed up table update operations for tables which have never had `next` called on them, although there would be a slight spike on first call to `next`.

@yuin what do you think? I'm happy to propose a patch for this.
I have a question about "Pop" purposes, in the README.rst there is only one reference to it in this section : https://github.com/yuin/gopher-lua/blob/master/README.rst#calling-lua-from-go 

But I didn't noticed any call to Pop when retrieving arguments in the documentation or related modules. In my software I use Pop this way everytime I retrieve arguments of my functions : 
```go
argA := L.ToString(1)
argB := L.ToInt(2)
L.Pop(2)

// or : 

top := L.GetTop
// forloop
L.Pop(top)
```

Is it good / bad / required / not required ? Why ? 

I think it can lighten Go's garbage collector's work by reducing heap scan about not reachable variables.
Hello. What would you think about integrating with a fuzzing service? It could catch bugs. [Fuzzit](https://fuzzit.dev/) gives free service for open source.

This patch fuzzes `DoString()`. I ran for a few hours locally. No crashes so far.

Build will fail due to missing an API key. If you're interested the setup is like this:
* In Fuzzit create target `gopher-lua`.
* In Fuzzit settings grab an API key. In repo settings in [Travis](https://travis-ci.org/) paste it to envvar `FUZZIT_API_KEY`.