测试类
-----------------------------------------------------------------
public sealed class TestView {

    Vector3 m_curPos;
    public void Test() {
        Vector3 rawPos = new Vector3(1, 2, 3);
        Vector3 tmpPos = rawPos;
        m_curPos = rawPos;
        Debug.Log("before raw:" + rawPos + " tmp:" + tmpPos + " cur:" + m_curPos);
        ChangePosY(tmpPos);
        ChangePosY(m_curPos);
        Debug.Log("after raw:" + rawPos + " tmp:" + tmpPos + " cur:" + m_curPos);

        rawPos = new Vector3(1, 2, 3);
        tmpPos = rawPos;
        m_curPos = rawPos;
        Debug.Log("before2 raw:" + rawPos + " tmp:" + tmpPos + " cur:" + m_curPos);
        ChangePosY2(tmpPos);
        ChangePosY2(m_curPos);
        Debug.Log("after2 raw:" + rawPos + " tmp:" + tmpPos + " cur:" + m_curPos);
    }

    private void ChangePosY(Vector3 pos) {
        pos.y = 0;
    }

    private void ChangePosY2(Vector3 pos) {
        Vector3 p = pos;
        p.y = 0;
    }
}
------------------------------------------------------------------------------
输出
before raw:(1.0, 2.0, 3.0) tmp:(1.0, 2.0, 3.0) cur:(1.0, 2.0, 3.0)
after raw:(1.0, 2.0, 3.0) tmp:(1.0, 2.0, 3.0) cur:(1.0, 0.0, 3.0)

直接使用函数参数，tmp 没有变化，但是成员变量cur被改变了Y值

before2 raw:(1.0, 2.0, 3.0) tmp:(1.0, 2.0, 3.0) cur:(1.0, 2.0, 3.0)
after2 raw:(1.0, 2.0, 3.0) tmp:(1.0, 2.0, 3.0) cur:(1.0, 2.0, 3.0)

在函数中使用临时变量保存参数后，cur不会变化了

泛型二维数组T[][]在运行时会new失败;代码如下:
         T[][] _datas = new T[w][];
        for (int i = 0; i<w; i++)
        {
            _datas[i] = new T[h];//<--------ILRuntime new 失败
        }
class Aaaa
{
    public void FunA1<<T>T>()
    {
        FunA2<<T>T>();
    }

    private void FunA2<T>()
    {
        //在GenerateBindingCode时
        //如果class A先于class B进行Prewarm
        //则FunA2中对主工程的调用就会无法分析到
    }
}

class Bbbb
{
    public void FunB()
    {
        var a = new Aaaa();
        a.FunA1<<T>int>();
    }
}

public static void Fun<T>()
{
    var t = typeof(T);//出错
    UnityEngine.Debug.Log(t);
}
//调用
Fun<int[]>();

出错的原因是通过ILMethod.GetTypeTokenHashCode得到的hashcode，去AppDomain.mapTypeToken里找不到对应类型。

在AppDomain.GetType里把int[]对应的CLRType放到mapTypeToken里可以解决问题，不过不知道这样解决问题是否恰当。
出现报错：
ArgumentException: Object of type 'ILRuntime.Runtime.Intepreter.ILEnumTypeInstance' cannot be converted to type 'System.Enum'.
System.RuntimeType.CheckValue (System.Object value, System.Reflection.Binder binder, System.Globalization.CultureInfo culture, System.Reflection.BindingFlags invokeAttr) (at <7ba07f088431485bb722f3b3373e87ee>:0)
System.Reflection.MonoMethod.ConvertValues (System.Reflection.Binder binder, System.Object[] args, System.Reflection.ParameterInfo[] pinfo, System.Globalization.CultureInfo culture, System.Reflection.BindingFlags invokeAttr) (at <7ba07f088431485bb722f3b3373e87ee>:0)
System.Reflection.MonoMethod.Invoke (System.Object obj, System.Reflection.BindingFlags invokeAttr, System.Reflection.Binder binder, System.Object[] parameters, System.Globalization.CultureInfo culture) (at <7ba07f088431485bb722f3b3373e87ee>:0)
System.Reflection.MethodBase.Invoke (System.Object obj, System.Object[] parameters) (at <7ba07f088431485bb722f3b3373e87ee>:0)
ILRuntime.CLR.Method.CLRMethod.Invoke (ILRuntime.Runtime.Intepreter.ILIntepreter intepreter, ILRuntime.Runtime.Stack.StackObject* esp, System.Collections.Generic.IList`1[T] mStack, System.Boolean isNewObj) (at Assets/Scripts/Core/ILRuntime/CLR/Method/CLRMethod.cs:316)
ILRuntime.Runtime.Intepreter.ILIntepreter.Execute (ILRuntime.CLR.Method.ILMethod method, ILRuntime.Runtime.Stack.StackObject* esp, System.Boolean& unhandledException) (at Assets/Scripts/Core/ILRuntime/Runtime/Intepreter/ILIntepreter.cs:1797)
Rethrow as ILRuntimeException: Object of type 'ILRuntime.Runtime.Intepreter.ILEnumTypeInstance' cannot be converted to type 'System.Enum'.
IL_0051: call System.Boolean System.Enum::HasFlag(System.Enum)
    public void Test(int a, string b)
    {
        Debug.LogError(a + " ---- " + b);
    }

    void Awake()
    {
        for(int i=0; i<5; i++)
        {
            System.Type T = this.GetType();
            T.GetMethod("Test").Invoke(this, new object[] { 1, "2" });
        }
    }



NullReferenceException: Object reference not set to an instance of an object.
ILRuntime.CLR.Method.CLRMethod.Invoke (ILRuntime.Runtime.Intepreter.ILIntepreter intepreter, ILRuntime.Runtime.Stack.StackObject* esp, System.Collections.Generic.IList`1[T] mStack, System.Boolean isNewObj) (at Assets/WMPlatform/HotCSharp/ILRuntime_master/ILRuntime/CLR/Method/CLRMethod.cs:309)
ILRuntime.Runtime.Intepreter.ILIntepreter.Execute (ILRuntime.CLR.Method.ILMethod method, ILRuntime.Runtime.Stack.StackObject* esp, System.Boolean& unhandledException) (at Assets/WMPlatform/HotCSharp/ILRuntime_master/ILRuntime/Runtime/Intepreter/ILIntepreter.cs:1797)
我们的项目有跨平台的需求，需要编译到Android、IOS、WebGL。目前在Android跟IOS上都没有问题。但是在WebGL运行的时候报异常：NotSupportedException,具体内容是UnSupported internal call for IL2CPP:AppDomain::LoadAssemblyRaw-"This icall is not supported by il2cpp."
ILRumtime模式下，如果热更层协程函数体内使用foreach，并在作用域内使用yield return null，执行一次后就不能正常执行。

示例：
IEnumerator Test（）
{
    foreach（var item in list）
    {
        yield return null；//只能正常执行一次
    }
}
AmbiguousMatchException: Ambiguous match found.
System.DefaultBinder.SelectMethod (System.Reflection.BindingFlags bindingAttr, System.Reflection.MethodBase[] match, System.Type[] types, System.Reflection.ParameterModifier[] modifiers) (at <f2e6809acb14476a81f399aeb800f8f2>:0)
System.RuntimeType.GetMethodImpl (System.String name, System.Reflection.BindingFlags bindingAttr, System.Reflection.Binder binder, System.Reflection.CallingConventions callConv, System.Type[] types, System.Reflection.ParameterModifier[] modifiers) (at <f2e6809acb14476a81f399aeb800f8f2>:0)
System.Type.GetMethod (System.String name, System.Reflection.BindingFlags bindingAttr, System.Reflection.Binder binder, System.Type[] types, System.Reflection.ParameterModifier[] modifiers) (at <f2e6809acb14476a81f399aeb800f8f2>:0)
ILRuntime.Runtime.Generated.UnityEngine_AssetBundle_Binding.Register (ILRuntime.Runtime.Enviorment.AppDomain app) (at Assets/Starter/Src/ILRuntime/Generated/UnityEngine_AssetBundle_Binding.cs:88)
ILRuntime.Runtime.Generated.CLRBindings.Initialize (ILRuntime.Runtime.Enviorment.AppDomain app) (at Assets/Starter/Src/ILRuntime/Generated/CLRBindings.cs:76)
com.cotokid.starter.Hotfix.Bindings.BindCLR (ILRuntime.Runtime.Enviorment.AppDomain appdomain) (at Assets/Starter/Src/Hotfix/Bindings.cs:46)
com.cotokid.starter.Hotfix.Bindings.Bind (ILRuntime.Runtime.Enviorment.AppDomain appDomain) (at Assets/Starter/Src/Hotfix/Bindings.cs:241)
com.cotokid.starter.MainMono.OnLoadFinish () (at Assets/Starter/Src/Starter/MainMono.cs:125)
com.cotokid.starter.MainMono+<LoadDll>c__Iterator0.MoveNext () (at Assets/Starter/Src/Starter/MainMono.cs:64)
UnityEngine.SetupCoroutine.InvokeMoveNext (System.Collections.IEnumerator enumerator, System.IntPtr returnValueAddress) (at /Users/builduser/buildslave/unity/build/Runtime/Export/Coroutines.cs:17)
具体原因不知道，我猜是因为 ILIntepreter 中 RetriveObject 的时候，如果属性是struct，直接被复制了，而不是值引用。所以导致后来 给 mStack最上层的属性赋值时，其实是在给一个全新的变量复制。