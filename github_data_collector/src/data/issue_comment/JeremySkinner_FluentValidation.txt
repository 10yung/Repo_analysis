### System Details

- FluentValidation version: 8.6.1

### Issue Description

How to access the index of element in RuleForEach WithMessage when using SetValidator?
As an example:

```
RuleFor(x => x.Orders)
 .NotEmpty()
 .WithMessage("Orders list must not be empty")
 .ForEach(order => {
   order.SetValidator(new OrderValidator());
 });

...

public class OrderValidator: AbstractValidator<Order>
{
  public OrderValidator()
  {
     RuleFor(order => order.Number)
       .NotEmpty()
       .WithMessage("{PropertyName} at {CollectionIndex} must not be empty");
  }
}
```

Is there a way to access parent context collection index?

Related to https://github.com/JeremySkinner/FluentValidation/issues/1166

Thanks!

### System Details

- FluentValidation version: 8.5.1
- Web Framework version - ASP.NET Core 3.0

### Issue Description
Hi,

I am new to Fluentvalidation. I am trying to use SetValidator() to validate collection.
For some reason validation rules are not getting executed. 

Am I doing something wrong? Can you please help.

Here is the code. 

TradeInfo (class with 2 properties)
-----------------
public class TradeInfo
{
        public string SecurityNumber { get; set; }
        public int Quantity { get; set; }
}
TradeDetails (collection class)
-----------------------
public class TradeDetails
{
        public int Id { get; set; }
        public TradeInfo[] TradeInfoItems { get; set; }
}

public class TradeInfoValidator : AbstractValidator<TradeInfo>
{
        public TradeInfoValidator()
        {
            RuleFor(req => req.SecurityNumber).NotNull().WithMessage("Secuirty Number is required");
        }
}
public class TradeDetailsValidator : AbstractValidator<TradeInfo[]>
{
       public TradeDetailsValidator()
       {
           RuleForEach(req => req).SetValidator(new TradeInfoValidator());
       }
}
Should read "Jeremy Skinner and contributors" rather than just "Jeremy Skinner"
- [x] Update Readme
- [ ] Update source code headers
- [ ] Nuget package metadata needs updating
### System Details

- FluentValidation version: 8.6.0
- Web Framework version: .NET Core 3.0 Web API

### Issue Description

Hello everyone, I checked through the documentation multiple times and didn't quite find an answer so i'm sorry if its something too obvious :)
What I want to do is run the default rules, and only if all of them pass, run a specific ruleset.
This is how my code looks like atm:
```
var result = await validator.ValidateAsync(request);
if (result.IsValid)
    result = await validator.ValidateAsync(request, ruleSet: "DbChecks");
```

Was just wondering if this is really how I should go about it, or is there a better way to achieve this?

Edit: for more clarification I want to do something like this:
https://stackoverflow.com/questions/21896249/conditionally-executing-rule-with-fluentvalidation-for-net
But without having to duplicate code as suggested in the answer...

Or even like this:
https://github.com/JeremySkinner/FluentValidation/issues/65
But with more than 1 rule, e.g. I want to check if a confirmPassword field equals the password field only if both confirmPassword and password fields aren't empty.
### System Details
- FluentValidation version: 8.5.1

### Issue Description
I'm trying to figure out the best way to validate some of the built-in F# types such as Option. In my case I have a record with some option types, such as:

`type Model = { Name: string option }`

I want to be able to apply the standard string validators such as MaximumLength to the Name field, but I can't because the type of the field is `Option<String>` not `String`. I thought `Transform` might work, but it requires the end type to be the same as the starting type.

Similar to the the existing `When`  functionality, what I want is something like:

`base.WhenSome(fun model -> model.Name).MaximumLength(50)`

Any pointers on implementing this functionality or is there another option to achieve this?
### System Details

- FluentValidation version: 8.5.0
- Web Framework version : ASP.NET Core 2.1

### Issue Description

I need to inherit from FluentValidationModelValidatorProvider.
Can you make it public with virtual CreateValidators method.
I also need to inherit from FluentValidationModelValidator.
Can you make it pulbic with virtual Validate method.

I want to add validators from another ModelMetadata.
I will override the Validate method, create a new ModelValidationContext based on another ModelMetadata and the call base.Validate on this new context. If the result is empty I will then call the base.Validate method with current context.

Thanks


I recently created a PR #1235 for the implementation of inheritance validation. I think I got a little bit too enthousiastic with my first PR to an opensource project because I implemented the functionalitity right away before discussing it first. 

The reason I've created the PR is because I have seen alot of constructions with a visitor pattern to manage this kind of validation. It's take alot of files to get it done like that. 

My proposal as it implemented in the PR:

```
var validator = new TestValidator(v => {
  v.RuleFor(x => x.Vehicle.Title).NotNull();
  v.RuleFor(x => x.Vehicle).AddInheritance(i => {
    i.Include<Car>(b => { b.RuleFor(m => m.IsElectric).Must(x => x); });
    i.Include<Bike>(b => { b.RuleFor(m => m.HasBell).Must(x => x); });
  });
});

validator.Validate(new Person { Vehicle = new Bike() { HasBell = true, Title = "My awesome bike" } });

public class Person {

  (...)

  public IVehicle Vehicle { get; set; }

}

public interface IVehicle {
  string Title { get; set; }
}

public class Car : IVehicle {
  public string Title { get; set; }
  public bool IsElectric { get; set; }
}

public class Bike : IVehicle {
  public bool HasBell { get; set; }
  public string Title { get; set; }
}
```
The Microsoft Blazor front-end uses an ObjectInstance/PropertyName combination to identify errors, whereas FluentValidation uses a RootObject/PathToProperty.

Could we have some way of retrieving the actual object + property name (rather than path)?

For example. A ValidationFailure for Person.HomeAddress.City would give us
`object Person.HomeAddress, string "City"`

Take a look here for more information in a blog by Steve Sanderson - https://chrissainty.com/using-fluentvalidation-for-forms-validation-in-razor-components/

I'd be happy to submit a PR if you are open to the idea of this improvement and would like to discuss an approach you are happy with?
### System Details

- FluentValidation version: 8.4

### Issue Description

https://github.com/JeremySkinner/FluentValidation/blob/2eb493886b3f2f630f6c82ae7fc1baf6f34ec496/src/FluentValidation/Validators/PropertyValidatorContext.cs#L31

```csharp
        public class Foo
        {
            public List<int> Numbers { get; set; }
        }

        [Fact]
        public void Should_show_property_name()
        {
            var validator = new InlineValidator<Foo>();
            validator.RuleFor(x => x.Numbers).ForEach(x => x.GreaterThan(10));

            validator.ShouldHaveValidationErrorFor(x => x.Numbers, new List<int>() {2})
                     .WithErrorMessage("'Numbers[0]' must be greater than '10'.");
            
            validator = new InlineValidator<Foo>();
            validator.RuleForEach(x => x.Numbers).GreaterThan(10);

            validator.ShouldHaveValidationErrorFor(x => x.Numbers, new List<int>() {2})
                     .WithErrorMessage("'Numbers[0]' must be greater than '10'.");

        }
```

maybe because https://github.com/JeremySkinner/FluentValidation/blob/2eb493886b3f2f630f6c82ae7fc1baf6f34ec496/src/FluentValidation/DefaultValidatorExtensions.cs#L1091 using a `InlineValidator<IEnumerable<TElement>>()` with `x=>x` lambda, so the `MemberInfo` will be resolved as null.
`FluentValidationClientModelValidatorProvider` uses validator instances to generate clientside rules. This is usally the desired behaviour, but can cause confusion in certain sitautions, eg if the validator is intentionally *not* registered with the container (eg it's only ever invoked with SetValidator, so shouldn't be isntantiated automatically). Also causes issues where multiple validators are registered for the same type.

Investigate implementing an abstraction (eg `IFluentValidationClientValidator`). The default implementation would retrieve rules directly from the validator's descriptor, like now, but would allow others implementations to be registered that would allow the process to be customized. 