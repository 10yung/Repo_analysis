This PR has a set of changes which make `ocl` build without warnings.
The images_safe_clamp example specifies '*' as the version for the time
crate.  Update the example to the v0.2 API and pin the version there.
When compiling `em = "0.3.0"`, I get the following error from Cargo on `5.4.7-arch1-1`. 

```
error[E0277]: the trait bound `syn::Expr: std::convert::From<quote::__rt::TokenStream>` is not satisfied
   --> /home/ritoban/.cargo/registry/src/github.com-1ecc6299db9ec823/emu_macro-0.1.0/src/passing.rs:338:38
    |
338 |                     i.args.insert(0, gpu_ident);
    |                                      ^^^^^^^^^ the trait `std::convert::From<quote::__rt::TokenStream>` is not implemented for `syn::Expr`
    |
    = help: the following implementations were found:
              <syn::Expr as std::convert::From<syn::ExprArray>>
              <syn::Expr as std::convert::From<syn::ExprAssign>>
              <syn::Expr as std::convert::From<syn::ExprAssignOp>>
              <syn::Expr as std::convert::From<syn::ExprAsync>>
            and 35 others
    = note: required because of the requirements on the impl of `std::convert::Into<syn::Expr>` for `quote::__rt::TokenStream`
```
Hi,

Just an FYI: on Debian Buster, I had to add the following to be able to use this library:
```bash
ln -s /usr/lib/x86_64-linux-gnu/libOpenCL.so.1.0.0 /usr/lib/x86_64-linux-gnu/libOpenCL.so
```

Not sure if that's the right way of solving this...
Changes:

1. `r#try!(...)`  --> `(...)?`
2. `mem::uninitialized()` --> `mem::MaybeUninit::uninit().assume_init()`

Dear rust/opencl folk,

I've encountered an error in the ocl-interop crate while building for mac. I know it is untested, and I'm not quite sure what I expected but please hear me out.
If you try to set up things as the README shows, building crashes (build.rs) with the message that the crate gl_generator can not be found. This is red flag 1 AFAIK because gl_generator shouldn't even be included in mac builds. In my local copy of the crate, I removed the extern crate and the use line in lib.rs. To properly fix this, I'm confident that some well placed pre compile flags would do the trick, but on my end I just ended up deleting most of the file involving gl_generator. 

On my end this lets me move past build.rs, and consequently it crashes in lib.rs in the following bit (which is line 38-43 of ocl-interop/lib.rs):

#[cfg(target_os = "macos")]
    unsafe {
        let gl_context = cgl::CGLGetCurrentContext();
        let share_group = cgl::CGLGetShareGroup(gl_context);
        properties.cgl_sharegroup(share_group);
    }

because `properties` is moved by the `cgl_sharegroup()` call, it cannot be returned at the end of the function. I'm unsure why it is moved, as when we dive in `cgl_sharegroup()` it seems to give ownership back by returning self.

So thats what I found out. Sorry if I made some error and this is an incoherent rambling mess. I'm willing to fix this, but I am unsure where to continue.

Thanks for reading and looking forward to any responses!


Currently PRs [cannot be built on Travis CI](https://travis-ci.org/cogciprocate/ocl/jobs/606107323) due to:

```console
$ sudo -E apt-get -yq --no-install-suggests --no-install-recommends $(travis_apt_get_options) install intel-opencl ocl-icd-opencl-dev
Reading package lists...
Building dependency tree...
Reading state information...
Some packages could not be installed. This may mean that you have
requested an impossible situation or if you are using the unstable
distribution that some required packages have not yet been created
or been moved out of Incoming.
The following information may help to resolve the situation:
The following packages have unmet dependencies:
 intel-opencl : Depends: intel-igc-opencl but it is not installable
E: Unable to correct problems, you have held broken packages.
```

Using `ppa:ocl-dev/intel-opencl` instead of `ppa:intel-opencl/intel-opencl` would fix that problem, but I'm unsure if that would be the right thing to do.


It is really unfortunate in the current api, as this will create a panic if no compatible gpu can be found. This fixes that issue.
Fix a buffer fill event assertion to allow for the usage of those events when using the BufferBuilder.

The fix should allow for the fill event to be set/retrieved. Error before the fix:
```
thread 'tests::buffer_fill::fill_with_event' panicked at 'Buffer::fill_event: Fill event already set.', ocl/src/standard/buffer.rs:2326:29
```

This assertion will now only trigger when calling the fill_event method twice (or more).