**[Mailing List thread](https://groups.google.com/forum/#!topic/liftweb/zH_rKQVbSVQ)**

**[Example page in a wider project - you know how to find the Scala code](https://github.com/gravelld/lift-duplicate-renders/blob/master/src/main/webapp/lazyload-comet.html).**

I have a Comet Actor which uses `LazyLoad.render` programmatically to lazy load part of its display. When the lazy loading is complete the rendered NodeSeq contains further Comet Actors. These display initially, however no further updates occur - rerendering of the nested Comet Actors are not passed to the page.

#### Workaround
Create your own `MyLazyLoad` Actor and, if required programmatically, initialise it as so:

```
S.findOrCreateComet("MyLazyLoad", Full(Helpers.nextFuncName), ns, S.attrsFlattenToMap, true).map { foundComet =>
  foundComet ! MyLazyLoad.Init(initData)
  Comet.containerForCometActor(foundComet, Full(ns))
} match {
  case Full(cometContainer) => cometContainer
  case failedResult => throw new IllegalArgumentException(s"$failedResult")
}
```
In case we want to use this instead of removing the minified js files.

â€¦ongo-java-driver.

Fixes #1830 

The mongo-java-driver has deprecated a lot of their classes and are going to remove them in the next release. This is long overdue.

One of the big changes is the use of a codec model for encoding and decoding data to/from the db into a language type. I took advantage of that to change how Records are stored. A RecordCodec is now used, which means data is put directly into a Record instead of first being put into a DBObject (or the newer Document) and then converting from there. I didn't do any benchmarks, but I would think that's a decent performance improvement.

I'm not 100% sure if I'm done with this yet, but I wanted to get this up. I need to set it aside for a couple of weeks while I get back to my job. The main thing I'm still thinking about doing is replacing the BsonParser with a Codec for JValue. I have a lot of it written already, but I'm not sure it's worth the effort to finish it.
**[Mailing List](https://groups.google.com/forum/#!msg/liftweb/V8Jj3hQEFIM/JtsR68afDgAJ) thread:**

Below is a bit of code out of LiftActor.scala and it looks to me like
the proper return type of sendAndGetReply should be Box[Any] rather
than Any.

/**
* Send a message to the Actor and wait for
* up to timeout milliseconds for
* the actor to process the message and reply.
* This method is the Java callable version of !?.
*/
def sendAndGetReply(timeout: Long, msg: Any): Any = this.!?(timeout, msg)

/**
* Send a message to the Actor and wait for
* up to timeout milliseconds for
* the actor to process the message and reply.
*/
def !?(timeout: Long, message: Any): Box[Any] =
  this !! (message, timeout)

https://github.com/dispatch/reboot/issues/210 depends on `net.liftweb#lift-json` to be available for Scala 2.13.0-M5.

Improvement idea based on mailing list discussion about AWS deployment:
**[Mailing List](https://groups.google.com/forum/#!topic/liftweb/u4XtscYxeE8) **

It was discovered that when deploying a WAR file to AWS Beanstalk, along with H2 database, the application will not function properly. The reason is that Beanstalk doesn't allow write access locally, but H2 db configured with local file configuration would require write access.

In the logs it can be seen that while the DB init will throw an exception, it is ignored and the process is continued, while part of the boot sequence operations will be left undone, for example setting the Classpath for lift snippets. This will be shown as template render failures on browser.

It is however not immediately apparent what is causing these render failures, and in some environments like Beanstalk, accessing the logs can be difficult.

Handling the DB init failure should be better and more apparent for the developer.

At first two different approaches were thought of:

- In case of db init failure, quit the whole process or,
- inform about the initialization failure somehow through the browser.

First option would be easier to implement, but poses breaking changes in expected behaviour of Lift.

Also would be good to investigate if applying the other boot sequence operations despite of DB init failure would be possible.
**[Mailing List](https://groups.google.com/forum/#!forum/liftweb) thread:** https://groups.google.com/forum/#!topic/liftweb/lcn6U6_Igxk

**[Example project]** https://github.com/fanf/demo-bug-lift-session 

When the underlying session ID change without a clean invalidate/create cycle, for example with the `HttpServletRequest.changeSessionId` which seems to be the recommanded session fixation prevention method for servlet 3.1 (and so is used in authentication frameword like spring security), Lift session are destroyed after the `data-lift-gc` attribute is generated, and so lift page javascript at then end of the page fails because of 404 error.
**[Mailing List](https://groups.google.com/forum/#!forum/liftweb) thread:** https://groups.google.com/forum/#!topic/liftweb/nGl82UL6T4k

**[Example project]** https://github.com/fanf/demo-bug-lift-session 

When a page is stateless (for ex with the `>> Stateless` modifier in Menu), it still get the following code at its end (which force create a session):

```	
<script type="text/javascript" src="/lift/page/F446450137052YRAVO5.js"></script>
```
Addresses #1840.  Added a basic structure. A partial first pass. Not tested yet. Still working on it.
I had some time, and I was sort of waiting for a response on another issue I was working on. And since we are looking for a release in less than two weeks, I thought I would go ahead create a PR for this without asking about it first. If that's inappropriate, please decline this right away.

Otherwise, does this look like the right approach here? Wanted to ask before I went ahead with changing a whole bunch of files.