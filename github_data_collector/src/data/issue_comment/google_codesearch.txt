just added a hyperlink
Is there is a way (or a flag to set) that will make the output coloring the matched words when performing `csearch <pattern>` ? 
I run this on a very large mount of codes, my index is becoming larger than 4GB after I run the cindex.go
When I run csearch.go with my regex pattern, raise a error : index cannot be larger than 4GB.
how can i improve my index limitation? thanks !
When multiple IndexWriter instances call Flush concurrently, they hit race or index out of range for `sortTmp` since it's getting modified from multiple go routines. 
example: 
```
goroutine 59 [running]:
github.com/meerkat/vendor/github.com/google/codesearch/index.sortPost(0xc023ab0000, 0x32f2, 0x800000)
	/Users/behrooz/go/src/github.com/meerkat/vendor/github.com/google/codesearch/index/write.go:648 +0x298
github.com/meerkat/vendor/github.com/google/codesearch/index.(*IndexWriter).mergePost(0xc0000d62c0, 0xc001e8e300)
	/Users/behrooz/go/src/github.com/meerkat/vendor/github.com/google/codesearch/index/write.go:291 +0x13c
github.com/meerkat/vendor/github.com/google/codesearch/index.(*IndexWriter).Flush(0xc0000d62c0)
	/Users/behrooz/go/src/github.com/meerkat/vendor/github.com/google/codesearch/index/write.go:210 +0x1f1
github.com/meerkat/index.(*indexer).Index(0xc00011e000, 0x13a56e0, 0xc001fb4060, 0x0, 0x0)
	/Users/behrooz/go/src/github.com/meerkat/index/indexer.go:239 +0x429
main.main.func1(0xc0002c4280, 0xc001e4e6d0, 0xc00011c000, 0x30, 0x13a25a0, 0xc00011e000, 0xc00039b800)
	/Users/behrooz/go/src/github.com/meerkat/main.go:88 +0x206
created by main.main
	/Users/behrooz/go/src/github.com/meerkat/main.go:76 +0x334
panic: runtime error: index out of range

goroutine 181 [running]:
github.com/meerkat/vendor/github.com/google/codesearch/index.sortPost(0xc01fab0000, 0x3b65, 0x800000)
	/Users/behrooz/go/src/github.com/meerkat/vendor/github.com/google/codesearch/index/write.go:628 +0x29f
github.com/meerkat/vendor/github.com/google/codesearch/index.(*IndexWriter).mergePost(0xc0011d2000, 0xc0000a6240)
	/Users/behrooz/go/src/github.com/meerkat/vendor/github.com/google/codesearch/index/write.go:291 +0x13c
github.com/meerkat/vendor/github.com/google/codesearch/index.(*IndexWriter).Flush(0xc0011d2000)
	/Users/behrooz/go/src/github.com/meerkat/vendor/github.com/google/codesearch/index/write.go:210 +0x1f1
github.com/meerkat/index.(*indexer).Index(0xc00011e000, 0x13a56e0, 0xc0003a7ae0, 0x0, 0x0)
	/Users/behrooz/go/src/github.com/meerkat/index/indexer.go:239 +0x429
main.main.func1(0xc0002c4280, 0xc001e4e6d0, 0xc00011c000, 0x30, 0x13a25a0, 0xc00011e000, 0xc00039b500)
	/Users/behrooz/go/src/github.com/meerkat/main.go:88 +0x206
created by main.main
	/Users/behrooz/go/src/github.com/meerkat/main.go:76 +0x334
```

This fix simply moves global unprotected vars to local func scope. We could alternatively include them in `IndexWriter` struct too. 
Added parameter to refine the query.
Is it possible to include git repos? Or do they have to be on disk.
It would be awesome to be able to search my IRC log files, but I compress them to save space. Would it be possible to implement automatic decompression of gzip, bzip2 and xz to the toolchain?

I would like to add exclusion of subdirectories to `cindex`. For example indexing of chromium `/src` takes about 50 seconds while only 20 seconds if I exclude `/src/out` and `/src/third_party`.
Right now it works like `cindex --exclude /src/out --exclude /src/tmp /src` plus I have to pass excludes if I want to re-index. As I understand the way to integrate that is to modify index format to store list of excluded directories. Is it OK to introduce such backward incompatible changes?

Easier to demonstrate.

``` make
% cat  Makefile
.PHONY: all test clean

BAD1 = a
BAD2 = a-b

GOOD1 = a-x
GOOD2 = a-y

.PHONY: template good bad

template:
    rm -rf test
    mkdir -p test/$(VAR1) test/$(VAR2)
    ls > test/$(VAR1)/a
    ls > test/$(VAR2)/a
    rm -f test/.csearchindex
    /usr/bin/env CSEARCHINDEX=test/.csearchindex $(GOPATH)/bin/cindex test/$(VAR1) test/$(VAR2)
    /usr/bin/env CSEARCHINDEX=test/.csearchindex $(GOPATH)/bin/cindex -list
    # Just index them again to reproduce the bug
    /usr/bin/env CSEARCHINDEX=test/.csearchindex $(GOPATH)/bin/cindex -verbose
    /usr/bin/env CSEARCHINDEX=test/.csearchindex $(GOPATH)/bin/cindex -list
    test `/usr/bin/env CSEARCHINDEX=test/.csearchindex $(GOPATH)/bin/cindex -list | wc -l` = 2

bad:
    VAR1=$(BAD1) VAR2=$(BAD2) $(MAKE) template

good:
    VAR1=$(GOOD1) VAR2=$(GOOD2) $(MAKE) template
```

No bug when test run with two directories where basenames are not a prefix or another:

``` sh
% make good
VAR1=a-x VAR2=a-y /Applications/Xcode.app/Contents/Developer/usr/bin/make template
rm -rf test
mkdir -p test/a-x test/a-y
ls > test/a-x/a
ls > test/a-y/a
rm -f test/.csearchindex
/usr/bin/env CSEARCHINDEX=test/.csearchindex /Users/xxxx/pkgs/go/bin/cindex test/a-x test/a-y
2016/02/08 17:37:14 index /Users/xxxx/work/codesearch/test/a-x
2016/02/08 17:37:14 index /Users/xxxx/work/codesearch/test/a-y
2016/02/08 17:37:14 flush index
2016/02/08 17:37:14 merge 0 files + mem
2016/02/08 17:37:14 166 data bytes, 1596 index bytes
2016/02/08 17:37:14 done
/usr/bin/env CSEARCHINDEX=test/.csearchindex /Users/xxxx/pkgs/go/bin/cindex -list
/Users/xxxx/work/codesearch/test/a-x
/Users/xxxx/work/codesearch/test/a-y
# Just index them again to reproduce the bug
/usr/bin/env CSEARCHINDEX=test/.csearchindex /Users/xxxx/pkgs/go/bin/cindex -verbose
2016/02/08 17:37:14 index /Users/xxxx/work/codesearch/test/a-x
2016/02/08 17:37:14 83 79 /Users/xxxx/work/codesearch/test/a-x/a
2016/02/08 17:37:14 index /Users/xxxx/work/codesearch/test/a-y
2016/02/08 17:37:14 83 79 /Users/xxxx/work/codesearch/test/a-y/a
2016/02/08 17:37:14 flush index
2016/02/08 17:37:14 merge 0 files + mem
2016/02/08 17:37:14 166 data bytes, 1596 index bytes
2016/02/08 17:37:14 merge test/.csearchindex test/.csearchindex~
2016/02/08 17:37:14 done
/usr/bin/env CSEARCHINDEX=test/.csearchindex /Users/xxxx/pkgs/go/bin/cindex -list
/Users/xxxx/work/codesearch/test/a-x
/Users/xxxx/work/codesearch/test/a-y
test `/usr/bin/env CSEARCHINDEX=test/.csearchindex /Users/xxxx/pkgs/go/bin/cindex -list | wc -l` = 2
```

Bug seen when test run with two directories where one basename is prefix of another:

``` sh
% make bad
VAR1=a VAR2=a-b /Applications/Xcode.app/Contents/Developer/usr/bin/make template
rm -rf test
mkdir -p test/a test/a-b
ls > test/a/a
ls > test/a-b/a
rm -f test/.csearchindex
/usr/bin/env CSEARCHINDEX=test/.csearchindex /Users/xxxx/pkgs/go/bin/cindex test/a test/a-b
2016/02/08 17:37:11 index /Users/xxxx/work/codesearch/test/a
2016/02/08 17:37:11 index /Users/xxxx/work/codesearch/test/a-b
2016/02/08 17:37:11 flush index
2016/02/08 17:37:11 merge 0 files + mem
2016/02/08 17:37:11 166 data bytes, 1592 index bytes
2016/02/08 17:37:11 done
/usr/bin/env CSEARCHINDEX=test/.csearchindex /Users/xxxx/pkgs/go/bin/cindex -list
/Users/xxxx/work/codesearch/test/a
/Users/xxxx/work/codesearch/test/a-b
# Just index them again to reproduce the bug
/usr/bin/env CSEARCHINDEX=test/.csearchindex /Users/xxxx/pkgs/go/bin/cindex -verbose
2016/02/08 17:37:11 index /Users/xxxx/work/codesearch/test/a
2016/02/08 17:37:11 83 79 /Users/xxxx/work/codesearch/test/a/a
2016/02/08 17:37:11 index /Users/xxxx/work/codesearch/test/a-b
2016/02/08 17:37:11 83 79 /Users/xxxx/work/codesearch/test/a-b/a
2016/02/08 17:37:11 flush index
2016/02/08 17:37:11 merge 0 files + mem
2016/02/08 17:37:11 166 data bytes, 1592 index bytes
2016/02/08 17:37:11 merge test/.csearchindex test/.csearchindex~
2016/02/08 17:37:11 done
/usr/bin/env CSEARCHINDEX=test/.csearchindex /Users/xxxx/pkgs/go/bin/cindex -list
/Users/xxxx/work/codesearch/test/a
test `/usr/bin/env CSEARCHINDEX=test/.csearchindex /Users/xxxx/pkgs/go/bin/cindex -list | wc -l` = 2
make[1]: *** [template] Error 1
make: *** [bad] Error 2
```

It would be great if one could tell the indexer to (re-)index a single file and merge that efficiently into the existing index.

A strong plus would be to read the file names - 1 per line - from a (named or regular) pipe, and index those as soon as a new line becomes available.
