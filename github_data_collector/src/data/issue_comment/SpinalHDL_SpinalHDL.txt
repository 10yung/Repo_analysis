Below is what I brought up on Gitter :) The questions asked point to places, where new diagnostics could be printed.

I have set up a number of simulations for a component of mine and I have trouble interpreting the results I am getting.

Inside the component, I have this assertion:

```assert(!recordWriteLock, "push first fire while holding record write lock", FAILURE)```

When I run it, i might get this: (i seem to depend on random signals, so assertions fail randomly as well)

```
[info] [Progress] Verilator compilation done in 2386.726 ms
[info] [Progress] Start RecordFifo basic simulation with seed -7657521877275568118, wave in /home/joe/FPGA/prj/hdl/cisc/./simWorkspace/RecordFifo/basic.vcd
[info] [Done] Simulation done in 26.360 ms
[info] [Progress] Start RecordFifo oneoverflow simulation with seed -7497477908939138281, wave in /home/joe/FPGA/prj/hdl/cisc/./simWorkspace/RecordFifo/oneoverflow.vcd
[info] FAILURE push first fire while holding record write lock
[info] - /home/joe/FPGA/prj/hdl/cisc/tmp/job_1/RecordFifo.v:87: Verilog $finish
[info] FAILURE push first fire while holding record write lock
[info] - /home/joe/FPGA/prj/hdl/cisc/tmp/job_1/RecordFifo.v:87: Verilog $finish
[info] - /home/joe/FPGA/prj/hdl/cisc/tmp/job_1/RecordFifo.v:87: Second verilog $finish, exiting
[success] Total time: 9 s, completed Jan 16, 2020, 10:26:36 AM
```

I have set up 4 different simulations, however here I am only seeing two of them mentioned, basic.vcd and oneoverflow.vcd.

- Can I assume that the failure happened in trace `oneoverflow.vcd`, because it's the last one printed before the error?
- Because it's a `FAILURE`, simulation stops right when the assertion fails. Time is not printed. How would I spot the failed assertion when it's just an `ERROR`?
- Why is the overall process (last line) successful even if the simulation failed?

Hi @Dolu1990 ,

Here is the pull-request I mentioned in https://github.com/SpinalHDL/SpinalHDL/issues/256

Pretty print for module instantiations.

Let me know if I did something incorrect WRT to the pull-request
The `valid` behavior of `BusSlaveFactory.driveFlow` is different for flows that fit within the bus data width and those that don't.

For the former, `valid` is asserted for one clock cycle, with a combinatorial signal.

For larger flows, `valid` is asserted in the next clock cycle and never deasserted.

There is a `regValid` in `driveFlow`:
```
val regValid = Reg(that.valid) init(False)
```

which is set right below

```
onWrite(address + ((wordCount - 1) * wordAddressInc)){ regValid := True }
```

but never reset.

Maybe I misunderstood something, but I believe that `regValid` should stay asserted for only one clock cycle.
I'd like to change the name of my module when it's compiled to Verilog. This is especially relevant when including black box modules, because it must name my class "SOME_CAPITALIZED_BULLSHIT" so that it is instanciated correctly. I'd rather have something like `setModuleName(string)` to override the use of the class name and keep my camel case naming convention internally.
Just ignore for now
Currently, the output of the Travis CI when failing is very bloated. There are many empty lines and progress information that dilute the actually interesting stuff. I suspect this is because of "interactive" features that work well in user terminals, but not when the output is written to a file.

I don't know much about sbt, I couldn't find a name for this "feature" or how to disable it.

Example:

```
  | => core / Compile / unmanagedSources / inputFileStamps 0s
[error] Failed tests:
[5 empty lines]
  | => core / Compile / unmanagedSources / inputFileStamps 0s
[error] 	spinal.tester.scalatest.MandelbrotTesterCocotbBoot
[5 empty lines]
  | => core / Compile / unmanagedSources / inputFileStamps 0s
[5 empty lines]
[error] (tester / Test / test) sbt.TestsFailedException: Tests unsuccessful
[error] Total time: 944 s (15:44), completed Jan 11, 2020 9:32:29 PM
```
I wondering if something like this can be adjusted. Similar to https://github.com/SpinalHDL/SpinalHDL/issues/132. If I have a Bundle that I use up a hierarchy, outputs seem to get reassigned.

Here is an example
```scala
class MyBundle extends Bundle{
  val a = in  UInt(8 bits)
  val b = in  UInt(8 bits)
  val c = out UInt(8 bits)
}

class TestBundle extends Bundle{
  val somein  = in  Bool
  val someout = out Bool
}

class MyMod extends Component {
  val io = new MyBundle
  val tb = new TestBundle
  
  io.c := io.a + io.b
  
  tb.someout := False
  
  noIoPrefix()   
}

class MyMod2 extends Component {
  val io = new MyBundle
  val tb = new TestBundle
  
  val mod = new MyMod
  
  mod.io.a := io.a
  mod.io.b := io.b
  
  io.c := io.a + mod.io.c
  
  tb <> mod.tb
  
}
```

This will produce:
```verilog
module MyMod (
      input  [7:0] a,
      input  [7:0] b,
      output [7:0] c,
      input   tb_somein,
      output  tb_someout);
  assign c = (a + b);
  assign tb_someout = 1'b0;
endmodule

module MyMod2 (
      input  [7:0] io_a,
      input  [7:0] io_b,
      output [7:0] io_c,
      input   tb_somein,
      output  tb_someout);
  wire [7:0] mod_1__c;
  wire  mod_1__tb_someout;
  MyMod mod_1_ ( 
    .a(io_a),
    .b(io_b),
    .c(mod_1__c),
    .tb_somein(tb_somein),
    .tb_someout(mod_1__tb_someout) 
  );
  assign io_c = (io_a + mod_1__c);
  assign tb_someout = mod_1__tb_someout;
endmodule
```

It would be ideal if it could do this:
```verilog
module MyMod2 (
      input  [7:0] io_a,
      input  [7:0] io_b,
      output [7:0] io_c,
      input   tb_somein,
      output  tb_someout);
  wire [7:0] mod_1__c;
  MyMod mod_1_ ( 
    .a(io_a),
    .b(io_b),
    .c(mod_1__c),
    .tb_somein(tb_somein),
    .tb_someout(tb_someout ) 
  );
  assign io_c = (io_a + mod_1__c);
endmodule
```

I know this is a byproduct of VHDL, but is there a way to remove this intermediate variable? A reason I'm asking is that in ASIC flows you will often need to set a "dont_touch" on a particular signal. This keeps the synthesis tool from inserting a buffer or other logic. These tools can often handle an assign statement, but I know being able to only have 1 signal name is ideal. I've only seen this on outputs, and not on inputs.

I have dug through the SpinalHDL code some, but I'm pretty fresh with it and Scala in general, so I don't really have much to offer in terms of what I've tried. But I'm willing to try some things out if needed. I'm not sure how much effort this would be.

Thanks!
I focused mostly on the Stream/Flow classes, because I use these the most.

- Fixed formatting where I went
- Added and improved some of the documentation
- Added a few helper objects/functions that I missed while using Spinal
- Changed the build system until it worked for me in Eclipse
- Changed default assertion severity to FATAL
- Normal Verilog backend generates formal assertions as well (in an `ifdef FORMAL` block)
 

I want to put assertions into my hardware that get checked during simulation. But currently, I can only get simulation-level\* assertions to work. If I put

    assert(counter.value == 2, "This is fine")

into my design, this will fail during *evaluation*, and not during *simulation*. If I alternatively put

    GenerationFlags.formal {
      assert(counter.value == 2, "This is fine")
    }

into my code, the simulation will run through without ever failing, which is obviously not what should be happening.

\* What works: If I put an assertion into the `dut` testing code that drives the hardware, it will work as expected. But that's not really what I want.