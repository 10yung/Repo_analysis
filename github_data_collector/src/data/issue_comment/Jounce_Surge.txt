I would like to propose the following (WIP) roadmap of changes for a future 3.0 release:

# Code

## Non-breaking

- [ ] [Auto-generate unit tests & benchmarks](https://github.com/Jounce/Surge/issues/145)
- [ ] [Efficient randomized initializers for Array/Vector/Matrix](https://github.com/Jounce/Surge/issues/144)
- [ ] [Efficient non-allocating column/row-based Matrix iterators](https://github.com/Jounce/Surge/issues/143)

## Potentially Breaking

- [ ] [Migrate from `Float`/`Double` to `T: FloatingPoint`](https://github.com/Jounce/Surge/issues/147)

## Breaking

- [ ] [Migrate API to a more idiomatic naming scheme](https://github.com/Jounce/Surge/issues/148)
- [ ] [Deprecation/Removal of `sqrt` variant with custom output storage](https://github.com/Jounce/Surge/issues/121)

# Operation

## Service Integrations

- [ ] Add [CodeCov](https://codecov.io) integration? (free for open source)
- [ ] Add [CodeClimate](https://codeclimate.com/quality/) integration? (free for open source)

## Bookkeeping

- [ ] Add `CHANGES.md` file
- [ ] Add `CONTRIBUTING.md` file
- [ ] Add `.github/PULL_REQUEST_TEMPLATE.md` & `.github/ISSUE_TEMPLATE.md` file

---

This is a meta issue intended for coordination and tracking of a 3.0 release.

For technical discussions of specific proposals please use the corresponding issue page.  

---

**Edit:** (Oct 24th, 2019) Added "Operation" section for non-code tasks.
# tl;dr

Surge's API naming scheme does not quite follow Swift's [API Design Guidelines](https://swift.org/documentation/api-design-guidelines/).  
We might want to fix that.

# What

Swift and its stdlib have gone through several major changes since its initial release in 2014 (Surge's initial commit was shortly after, on Aug 24, 2014).

The most notable change probably was the migration to the then new and more idiomatic naming scheme with Swift 3: [SE-0005](https://github.com/apple/swift-evolution/blob/master/proposals/0005-objective-c-name-translation.md), which resulted in the [API Design Guidelines](https://swift.org/documentation/api-design-guidelines/).

The most relevant part of them being:

> Name functions and methods according to their side-effects
> 
> - Those without side-effects should read as noun phrases, e.g. > x.distance(to: y), i.successor().
> 
> - Those with side-effects should read as imperative verb phrases, > e.g., print(x), x.sort(), x.append(y).
> 
> - Name Mutating/nonmutating method pairs consistently. A mutating > method will often have a nonmutating variant with similar semantics, > but that returns a new value rather than updating an instance > in-place.
> 
>   - When the operation is naturally described by a verb, use the > verb’s imperative for the mutating method and apply the “ed” or > “ing” suffix to name its nonmutating counterpart.
> 
>     | **Mutating** | **Nonmutating** |
>     |  ---  |  ---  |
>     | `x.sort()` | `z = x.sorted()` |
>     | `x.append(y)` | `z = x.appending(y)` |
> 
>   - When the operation is naturally described by a noun, use the > noun for the nonmutating method and apply the “form” prefix to > name its mutating counterpart.
> 
>     | **Nonmutating** | **Mutating** |
>     |  ---  |  ---  |
>     | `x = y.union(z)` | `y.formUnion(z)` |
>     | `j = c.successor(i)` | `c.formSuccessor(&i)` |

# Why

As @mattt and I discussed in more depth in https://github.com/Jounce/Surge/pull/107 the current naming scheme of our `public`, as well as `internal` API does not quite fit the idiomatic naming scheme as established with Swift 3.

Surge in its current state has the following naming scheme:

| **Mutating**        | **Nonmutating** |
|---------------------|-----------------|
| `addInPlace(&a, b)` | `z = add(a, b)` |

**Note:** For the sake of simplicity I will refer to `T: Unsafe(Mutable)MemoryAccessible` as simply `[Scalar]` for the remainder of this writing.

**Surge** contains APIs for working with low-level scalar-buffers (`[Scalar]`), as well as APIs for working with high-level vectors (`Vector<Scalar>`) and matrices (`Matrix<Scalar>`). While both APIs are related by the fact of the latter being implemented in terms of the former, from a user's perspective they can be considered mostly unrelated, i.e. it is unlikely that an expression will contain both a `[Scalar]` and a `Matrix<Scalar>`.

A major release gives us the unique opportunity to make code-breaking changes.

# How

As such I would argue that both APIs can and possibly should be dealt with individually, given their different constraints:

- `[Scalar]`: due to dealing with generic collection types `public` functions can end up polluting the global namespace, adding needless noise to auto-completion, and ambiguity (e.g. `Array` already uses `+` for concatenation, forcing **Surge** to use `.+` instead) etc.
- `Vector<Scalar>`/`Matrix<Scalar>`: due to being tied to concrete and **Surge**-owned types there is no, or at least less, risk of namespace pollution, nor ambiguity.

As mentioned earlier, both APIs also differ in abstractness.

As such I would like to propose the following options going forward:

## Option A

1. Keep all of **Surge's** API as free functions.
2. Change functions' naming scheme:

|         | **Nonmutating**    | **Mutating**        | **Idiomatic** |
|---------|--------------------|---------------------|---------------|
| Before: | `z = add(a, b)`    | `addInPlace(&a, b)` | NO            |
| After:  | `z = adding(a, b)` | `add(&a, b)`        | YES           |

### Pro

- A semi-idiomatic API for `[Scalar]`/`Vector<Scalar>`/`Matrix<Scalar>`.
- By using `@available(*, …, renamed: …)` Xcode would be able to provide a reasonably effortless/automated migration path with easy fix-its.

### Contra

- Free functions don't quite feel at home with Swift's dominating OOP syntax.

## Option B

1. Keep **Surge's** `[Scalar]` API as free functions, changing their naming scheme to:

|         | **Nonmutating**    | **Mutating**        | **Idiomatic** |
|---------|--------------------|---------------------|---------------|
| Before: | `z = add(a, b)`    | `addInPlace(&a, b)` | NO            |
| After:  | `z = adding(a, b)` | `add(&a, b)`        | YES           |

2. Turn **Surge's** `Vector<Scalar>`/`Matrix<Scalar>` APIs into OOP methods, changing their naming scheme to:

|         | **Nonmutating**   | **Mutating**        | **Idiomatic** |
|---------|-------------------|---------------------|---------------|
| Before: | `z = add(a, b)`   | `addInPlace(&a, b)` | NO            |
| After:  | `z = a.adding(b)` | `a.add(b)`          | YES           |

### Pro

- A semi-idiomatic API for `[Scalar]`.
- By using `@available(*, …, renamed: …)` Xcode would be able to provide a reasonably effortless/automated migration path for `[Scalar]` API changes with easy fix-its.
- A fully idiomatic API for `Vector<Scalar>`/`Matrix<Scalar>`, following the [API Design Guidelines](https://swift.org/documentation/api-design-guidelines/).

### Contra

- `[Scalar]` and `Vector<Scalar>`/`Matrix<Scalar>` would have different syntax. However as mentioned earlier it is quite common to have low-level APIs use C-style free functions and high-level APIs use OOP patterns (i.e. methods). Also both APIs as unlikely to get mixed, as `Vector<Scalar>`/`Matrix<Scalar>` generally work with instances of `Vector<Scalar>`, not `[Scalar]`.
- It seems like `@available(*, …, renamed: …)` does not provide Xcode fix-its for changing an n-ary free function call into an (n-1)-ary method call on the first argument. We might want to ask the Swift Standard Library team for a recommendation here?

---

# Deprecation vs. Removal

We would also have to decide whether we wanted to mark renamed functions as `deprecated`, or go straight to `unavailable`.
## tl;dr

Surge currently provides separate implementations for each function for `Float` and `Double`, respectively. This makes Surge basically incompatible with Swift's `T: FloatingPoint` generics. By introducing a little bit of internal runtime dynamism we aim to migrate existing function pairs to their generic equivalent for `T: FloatingPoint`.

## What?

With the recent refactors we have managed to reduce the implementations of each computation into a function set consisting of a single `internal` core-implementation, acting as a  single source of truth, and a bunch of thin `public` convenience wrapper functions.

Scalar-Division (`[Scalar] / Scalar`) is implemented like this:

```swift
public func / <L>(lhs: L, rhs: Float) -> [Float] where L: UnsafeMemoryAccessible, L.Element == Float {
    return div(lhs, rhs)
}

public func div<L>(_ lhs: L, _ rhs: Float) -> [Float] where L: UnsafeMemoryAccessible, L.Element == Float {
    return withArray(from: lhs) { divInPlace(&$0, rhs) }
}

func divInPlace<L>(_ lhs: inout L, _ rhs: Float) where L: UnsafeMutableMemoryAccessible, L.Element == Float {
    lhs.withUnsafeMutableMemory { lm in
        var scalar = rhs
        vDSP_vsdiv(lm.pointer, numericCast(lm.stride), &scalar, lm.pointer, numericCast(lm.stride), numericCast(lm.count))
    }
}
```

… with an almost identical copy existing for each of these functions for `Double`, instead of `Float`.

## Why?

While the project's current state is quite an improvement over its previous state it has a couple of remaining deficits:

- We have literally everything in two near-identical flavors: `Float` and `Double`.
- One cannot currently use Surge in contexts where one is using `T: FloatingPoint`  over `Float`/`Double`.

So this got me thinking: What if we migrated Surge from using `Float`/`Double` to an API with `T: FloatingPoint` and then internally make use of some dynamic language features to roll our own polymorphism over the closed set of `Float` and `Double` with a `fatalError(…)` on type-mismatch?

Aforementioned dynamism would add a certain amount of runtime overhead to Surge. It is important to note however that we would be adding a constant overhead (`O(1)` vs. `O(N)`), as a single call of `Surge.divInPlace(_:_:)` over a pair of `10_000`-element arrays only adds a single branch per execution, not `10_000` branches in a loop, as would be the case for a naïve non-parallel looping implementation.

## How?

So how would this look like? What would we need to change?

1. We would replace every existing pair of thin  `public` wrapper functions for `Float`/`Double` with a single equivalent function that is generic over `T: FloatingPoint`, instead.
2. We would merge every existing pair of `internal` `…InPlace(…)` core-implementation functions for `Float`/`Double` into a single equivalent function that is generic over `T: FloatingPoint` on the outside and then performs a `switch` on  `T.self` on the inside, instead.
3. We would add `func withMemoryRebound(to:_:)` to `UnsafeMemory<T>` and `UnsafeMutableMemory<T>`, so that we can efficiently cast from `UnsafeMemory<T: FloatingPoint>` to `UnsafeMemory<Double>`,  without having to copy/cast any individual values.
4. We would add `func withUnsafeMemory(as:…)` convenience functions for retrieving type-cast variants of `UnsafeMemory<T>` from instances of `UnsafeMemoryAccessible`/`UnsafeMutableMemoryAccessible`.
5. We would refactor the `func …InPlace(…)` implementations into something like this:

```swift
func divInPlace<L, T>(_ lhs: inout L, _ rhs: T) where L: UnsafeMutableMemoryAccessible, L.Element == T, T: FloatingPoint & ExpressibleByFloatLiteral {
    let rhs = CollectionOfOne(rhs)
    withUnsafeMemory(
        &lhs,
        rhs,
        float: { lhs, rhs in
            vDSP_vsdiv(lhs.pointer, numericCast(lhs.stride), rhs.pointer, lhs.pointer, numericCast(lhs.stride), numericCast(lhs.count))
        },
        double: { lhs, rhs in
            vDSP_vsdivD(lhs.pointer, numericCast(lhs.stride), rhs.pointer, lhs.pointer, numericCast(lhs.stride), numericCast(lhs.count))
        }
    )
}
```

So far I have not been able to measure any noticeable performance regressions introduced by this change.

There also should be very little breakage from the changes, as `T: FloatingPoint` is for the most part a strict superset of either `Float` or `Double`.

(I already have a proof-of-concept for this on a local branch and will push it as a PR at some point.)
## tl;dr

We've gone way past the point where writing/maintaining highly redundant manual unit tests is any fun. If writing unit tests becomes tedious and a maintenance hell people start neglecting them instead. Let's thus make use of the fact that our APIs (and such the tests) almost all follow the pattern and automatically generate the tests for us, allowing us to increase test coverage even more, at actually far less overall cost.

## What?

A quick look at the [/Tests](https://github.com/Jounce/Surge/tree/master/Tests) reveals a suite of tests that all pretty much share the same pattern:

Our tests look something like this:

```swift
func test_<something>_float() {
    // Define a type-alias for convenience:
    typealias Scalar = Float

    // Create some dummy data:
    let lhs: [Scalar] = .monotonicNormalized()
    let rhs: [Scalar] = .monotonicNormalized()

    // Create a working copy of the dummy data:
    var actual: [Scalar] = lhs
    // Operate on the working copy:
    Surge.eladdInPlace(&actual, rhs)

    // Provide a ground-truth implementation to compare against:
    let expected = zip(lhs, rhs).map { $0 + $1 }

    // Compare the result:
    XCTAssertEqual(actual, expected, accuracy: 1e-8)
}
```

… only differentiating each other by a change in this line:

```swift
Surge.eladdInPlace(&actual, rhs)
```

… and this line:

```swift
let expected = zip(lhs, rhs).map { $0 + $1 }
```

And our  benchmarks look something like this:

```swift
// benchmarks:
func test_add_in_place_array_array_float() {
    // Call convenience function:
    measure_inout_array_array(of: Float.self) { measure in
        // Call XCTest's measurement method:
        measureMetrics([.wallClockTime], automaticallyStartMeasuring: false) {
            // Perform the actual operations to be measured:
            measure(Surge.eladdInPlace)
        }
    }
}
```

… which is semantically equivalent to the more verbose:

```swift
func test_add_in_place_array_array_float() {
    typealias Scalar = T

    let lhs = produceLhs()
    let rhs = produceRhs()

    // Call XCTest's measurement method:
    measureMetrics([.wallClockTime], automaticallyStartMeasuring: false) {
        var lhs = lhs
        
        startMeasuring()
        let _ = Surge.eladdInPlace(&lhs, rhs)
        stopMeasuring()
    }
}
```

… again, only differentiating each other by a change in this line:

```swift
let _ = Surge.eladdInPlace(&actual, rhs)
```

## Why?

At now shy **over 200 tests** and **over 60 benchmarks** maintenance of our tests/benchmarks suites has become quite a chore. 😣

So this got me thinking: What if … what if instead of writing and maintaining hundreds of highly redundant tests functions (for a lack of macros in Swift) we had a way to have the tests and even benchmarks generated auto-magically for us?

With this we could easily increase test coverage from "just the functions containing non-trivial logic" to "basically every public function, regardless of complexity", allowing us to catch regressions for even the most-trivial wrapper function, currently not covered at hardly any additional maintenance burden.

## How?

The basic idea is to get rid of all the existing unit tests and replace them with mere [Sourcery](https://github.com/krzysztofzablocki/Sourcery) annotations, like this:

```swift
// sourcery: test, floatAccuracy = 1e-5, expected = "add(array:array)"
public func add<L, R>(_ lhs: L, _ rhs: R) -> [Float] where L: UnsafeMemoryAccessible, R: UnsafeMemoryAccessible, L.Element == Float, R.Element == Float {
    // …
}
```

… given a fixture like this:

```swift
enum Fixture {
    enum Argument {
        func `default`<Scalar>() -> Scalar { … }
        func `default`<Scalar>() -> [Scalar] { … }
        func `default`<Scalar>() -> Vector<Scalar> { … }
        func `default`<Scalar>() -> Matrix<Scalar> { … }
    }
    enum Accuracy {
        func `default`() -> Float { … }
        func `default`() -> Double { … }
    }
    enum Expected {}
}

extension Fixture.Expected {
    func add<Scalar>(array lhs: [Scalar], array rhs: [Scalar]) -> [Scalar] {
        return zip(lhs, rhs).map { $0 + $1 }
    }
}
```

| Function Annotation                | Description                                                                  |
|------------------------------------|------------------------------------------------------------------------------|
| `test`                             | Generate test function (Optional)                                            |
| `bench`                            | Generate benchmark function (Optional)                                       |
| `expected = <function name>`                      | The fixture function to use as ground-truth (Required by `test`)             |
| `accuracy = <float literal>`       | A custom testing accuracy (Optional, used by `test`)                         |
| `floatAccuracy = <float literal>`  | A custom `Float`-specific testing accuracy (Optional, used by `test`)        |
| `doubleAccuracy = <float literal>` | A custom `Double`-specific testing accuracy (Optional, used by `test`)       |
| `arg<N> = <function name>`        | The fixture factory function for the nth argument (Optional, used by `test`) |
| …                                  | …                                                                            |

One would have [Sourcery](https://github.com/krzysztofzablocki/Sourcery) parse the ource code and generate a test suite per source file (or type extension, preferably), looking for `test` and `bench` annotations.

The current unit tests make use of minimal customization of `lhs`/`rhs` dummy values, so `arg<N>` will rarely find use, but a few tests need custom data to test against.

Also given that Surge has a rather restricted set of types that are to be expected as function arguments we should be able to match against them (`Scalar`, `Collection where Element == Scalar`, `Vector<Scalar>`, `Matrix<Scalar>`) rather naïvely, allowing us to elide most data we would otherwise have to specify explicitly.
Currently `Matrix<Scalar>` is rather opaque when in comes to accessing its contents.
A common access pattern of matrices is to iterate over them by either column or row order.

Being a performance framework however we would rather not have (the lowest-level) matrix iterators allocate any temporary memory, as would be necessary for column-wise iteration, given that `ArraySlice<Scalar>` does not allow for providing a stride.

(I already have a proof-of-concept for this on a local branch and will push it as a PR at some point.)
# tl;dr

A pair of functions seems to have been marked as `public` at some point in the past, that should have remained `internal` and have since been obsoleted. We should remove them from the public API.

# What

Surge contains a somewhat odd function for calculating `sqrt` by providing a custom output buffer:

```swift
/// Elemen-wise square root with custom output storage.
///
/// - Warning: does not support memory stride (assumes stride is 1).
public func sqrt<MI: UnsafeMemoryAccessible, MO: UnsafeMutableMemoryAccessible>(_ lhs: MI, into results: inout MO) where MI.Element == Float, MO.Element == Float {
    return lhs.withUnsafeMemory { lhsMemory in
        results.withUnsafeMutableMemory { rm in
            precondition(lhsMemory.stride == 1 && rm.stride == 1, "sqrt doesn't support step values other than 1")
            precondition(rm.count >= lhsMemory.count, "`results` doesnt have enough capacity to store the results")
            vvsqrtf(rm.pointer, lhsMemory.pointer, [numericCast(lhsMemory.count)])
        }
    }
}
```

([Source](https://github.com/mattt/Surge/blob/master/Sources/Surge/General%20Arithmetic/Arithmetic.swift#L620-L631))

# Why

This pattern is nowhere else to be found in the framework and it looks to me like it was intended primarily for internal use as a base-implementation of the non-custom variant and possibly marked as `public` by accident(?):

```swift
/// Elemen-wise square root.
///
/// - Warning: does not support memory stride (assumes stride is 1).
public func sqrt<C: UnsafeMemoryAccessible>(_ lhs: C) -> [Double] where C.Element == Double {
    var results = [Double](repeating: 0.0, count: numericCast(lhs.count))
    sqrt(lhs, into: &results)
    return results
}
```

([Source](https://github.com/mattt/Surge/blob/master/Sources/Surge/General%20Arithmetic/Arithmetic.swift#L636-L640))

(The method in question was added in [this commit](https://github.com/mattt/Surge/commit/bb3e9b48d1b19428d2cda97fcc0becfdcf0cd663).)

# How

As such I'd like to nominate both variants (`Float` & `Double`) of this function for deprecation with the next minor release, with removal on next major release.

What do you guys think, @mattt, @alejandro-isaza?

---

Update: with #119 merged we now have a proper `sqrtInPlace` function for efficient non-allocating computation of `sqrt`:

```swift
func sqrtInPlace<C: UnsafeMutableMemoryAccessible>(_ lhs: inout C) where C.Element == Float {
    var elementCount: Int32 = numericCast(lhs.count)
    lhs.withUnsafeMutableMemory { lm in
        precondition(lm.stride == 1, "\(#function) doesn't support step values other than 1")
        vvsqrtf(lm.pointer, lm.pointer, &elementCount)
    }
}
```

([Source](https://github.com/mattt/Surge/blob/master/Sources/Surge/Arithmetic/Arithmetic.swift#L775-L797))
Any plans for implementing [Short-Time Fourier transform](https://en.wikipedia.org/wiki/Short-time_Fourier_transform)?
I'm currently evaluating several FFT implementations and I tried out your implementation (of the vDSP algorithm collection). After some reading there're two things I don't fully understand and I hope you might help us out here:

1. Is there a reason you're not using `vDSP_fft_zrip` / `vDSP_fft_zripD`? I understand that your implementation works with real input vectors. So what's the benefit of not (!) using the "packed" implementation with the 'r' in the middle of the function name. The 'packed' implementation needs some additional packing / unpacking - but that's it.

I'm specifically referring to the statement in https://github.com/jseales/numpy-style-fft-in-obj-c

> The little 'r' somewhere in the middle of the function name is what designates it as the special fft designed to work with the packed up array. "vDSP_fft_zipD" with no 'r' is the complex version, and is easier to use because there are no packing and unpacking steps, but not as efficient, beautiful, or clever.

Certainly your implementation works, but it seems using the different method it should run faster or at least more efficient? On that note it's worth exploring the "in-place" variants of the methods as well.

2. Your implementation calculates the (normalized) magnitudes of all input values. But from my understanding of the so called `conjugate symmetric fft` "half of the result" could be discarded anyhow (for real input values).
I am attempting to plot a periodogram in Swift of a signal using Surge.

Code:
```
var fft_mat = Surge.pow(Surge.fft(signal), 2)
var const_mult = 2.0/Double(signal.count)
for var i in 0..<fft_mat.count { //multiply fft_mat by const_mult
    fft_mat[i] = Float(const_mult) * fft_mat[i]
}
var pgram = fft_mat
```

Plotting pgram yields the following results

![ios-periodogram](https://user-images.githubusercontent.com/23534697/51628118-fef98980-1ef8-11e9-86cb-409b22b8314e.png)

However, after loading and creating the exact same periodogram in Python I get a very different periodogram.

Code:
`pgram = (2.0/len(signal)) * numpy.power(numpy.fft.fft(signal), 2)
`

![pure-numpy-periodogram](https://user-images.githubusercontent.com/23534697/51628237-5566c800-1ef9-11e9-9b02-26e87a7faed8.png)

Since I am using the exact same method to plot the periodogram (and the same data as well), I was wondering if there are some differences in the implementation of the Surge fft and numpy fft which might cause this issue?

do you plan support vDSP_DCT_Execute