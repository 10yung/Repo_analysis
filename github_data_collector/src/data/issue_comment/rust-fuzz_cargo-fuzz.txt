I'm trying to set up cargo-fuzz for a web-based project. For production we deploy to wasm (using cargo-web) however we run are tests natively as well so the project runs just fine on x86. In fact we have AFL set up with a regular binary which works for fuzzing, however I figured I would try out libfuzzer as well.

When compiling with `cargo fuzz run` we get many linker errors such as `in function <alloc::vec::IntoIter<T> as core::ops::drop::Drop>::drop':  main.1d8o2qxf-cgu.0:(.text._ZN71_$LT$alloc..vec..IntoIter$LT$T$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h62c937e915a268ffE+0x316): undefined reference to emscripten_asm_const_int`.  Indicating that for some reason LLVM functions are being used even though they shouldn't be.

I have ensured that we are compiling with LTO however this doesn't seem to help.

Working bin target:

```
fn main() {
	onuw::fuzz::fuzz("binary", std::io::stdin().lock());
}
```

Failing cargo-fuzz target:

```
#![no_main]
use libfuzzer_sys::fuzz_target;

libfuzzer_sys::fuzz_target!(|data: &[u8]| {
	onuw::fuzz::fuzz("binary", data);
});
```

It would be really nice if this worked.
This would be particularly useful for folks running `cargo fuzz` in their CI, so they didn't have to wait on `cargo-fuzz` itself to build.
Steps to reproduce:

```
$ cargo new blah
     Created binary (application) `blah` package

$ cd blah/

$ cargo fuzz init

$ cargo fuzz run fuzz_target_1 -O -a
    Updating git repository `https://github.com/rust-fuzz/libfuzzer-sys.git`
    Updating crates.io index
   Compiling cc v1.0.47
   Compiling arbitrary v0.2.0
     Running `rustc --edition=2018 --crate-name cc /home/fitzgen/.cargo/registry/src/github.com-1ecc6299db9ec823/cc-1.0.47/src/lib.rs --error-format=json --json=diagnostic-rendered-ansi --crate-type lib --emit=dep-info,metadata,link -C opt-level=3 -C metadata=fda7a29c1d1050d9 -C extra-filename=-fda7a29c1d1050d9 --out-dir /tmp/blah/fuzz/target/release/deps -L dependency=/tmp/blah/fuzz/target/release/deps --cap-lints allow`
     Running `rustc --crate-name arbitrary /home/fitzgen/.cargo/registry/src/github.com-1ecc6299db9ec823/arbitrary-0.2.0/src/lib.rs --error-format=json --json=diagnostic-rendered-ansi,artifacts --crate-type lib --emit=dep-info,metadata,link -C opt-level=3 -C metadata=16b871a1b970df3d -C extra-filename=-16b871a1b970df3d --out-dir /tmp/blah/fuzz/target/x86_64-unknown-linux-gnu/release/deps --target x86_64-unknown-linux-gnu -L dependency=/tmp/blah/fuzz/target/x86_64-unknown-linux-gnu/release/deps -L dependency=/tmp/blah/fuzz/target/release/deps --cap-lints allow --cfg fuzzing -Cpasses=sancov -Cllvm-args=-sanitizer-coverage-level=4 -Cllvm-args=-sanitizer-coverage-trace-compares -Cllvm-args=-sanitizer-coverage-inline-8bit-counters -Cllvm-args=-sanitizer-coverage-trace-geps -Cllvm-args=-sanitizer-coverage-prune-blocks=0 -Cllvm-args=-sanitizer-coverage-pc-table -Zsanitizer=address -Cllvm-args=-sanitizer-coverage-stack-depth -Cdebug-assertions`
   Compiling libfuzzer-sys v0.1.0 (https://github.com/rust-fuzz/libfuzzer-sys.git#0c450753)
     Running `rustc --edition=2018 --crate-name build_script_build /home/fitzgen/.cargo/git/checkouts/libfuzzer-sys-e07fde05820d7bc6/0c45075/build.rs --error-format=json --json=diagnostic-rendered-ansi --crate-type bin --emit=dep-info,link -C opt-level=3 -C metadata=ab0c2d9e48354b5d -C extra-filename=-ab0c2d9e48354b5d --out-dir /tmp/blah/fuzz/target/release/build/libfuzzer-sys-ab0c2d9e48354b5d -L dependency=/tmp/blah/fuzz/target/release/deps --extern cc=/tmp/blah/fuzz/target/release/deps/libcc-fda7a29c1d1050d9.rlib --cap-lints allow`
     Running `/tmp/blah/fuzz/target/release/build/libfuzzer-sys-ab0c2d9e48354b5d/build-script-build`
     Running `rustc --edition=2018 --crate-name libfuzzer_sys /home/fitzgen/.cargo/git/checkouts/libfuzzer-sys-e07fde05820d7bc6/0c45075/src/lib.rs --error-format=json --json=diagnostic-rendered-ansi --crate-type lib --emit=dep-info,metadata,link -C opt-level=3 -C metadata=259f8345fb0f35cb -C extra-filename=-259f8345fb0f35cb --out-dir /tmp/blah/fuzz/target/x86_64-unknown-linux-gnu/release/deps --target x86_64-unknown-linux-gnu -L dependency=/tmp/blah/fuzz/target/x86_64-unknown-linux-gnu/release/deps -L dependency=/tmp/blah/fuzz/target/release/deps --extern arbitrary=/tmp/blah/fuzz/target/x86_64-unknown-linux-gnu/release/deps/libarbitrary-16b871a1b970df3d.rmeta --cap-lints allow --cfg fuzzing -Cpasses=sancov -Cllvm-args=-sanitizer-coverage-level=4 -Cllvm-args=-sanitizer-coverage-trace-compares -Cllvm-args=-sanitizer-coverage-inline-8bit-counters -Cllvm-args=-sanitizer-coverage-trace-geps -Cllvm-args=-sanitizer-coverage-prune-blocks=0 -Cllvm-args=-sanitizer-coverage-pc-table -Zsanitizer=address -Cllvm-args=-sanitizer-coverage-stack-depth -Cdebug-assertions -L native=/tmp/blah/fuzz/target/x86_64-unknown-linux-gnu/release/build/libfuzzer-sys-c622530de11013fe/out -l static=fuzzer -l stdc++`
   Compiling blah-fuzz v0.0.0 (/tmp/blah/fuzz)
     Running `rustc --edition=2018 --crate-name fuzz_target_1 fuzz_targets/fuzz_target_1.rs --error-format=json --json=diagnostic-rendered-ansi --crate-type bin --emit=dep-info,link -C opt-level=3 -C metadata=dd8ee4c86bcc8a73 -C extra-filename=-dd8ee4c86bcc8a73 --out-dir /tmp/blah/fuzz/target/x86_64-unknown-linux-gnu/release/deps --target x86_64-unknown-linux-gnu -L dependency=/tmp/blah/fuzz/target/x86_64-unknown-linux-gnu/release/deps -L dependency=/tmp/blah/fuzz/target/release/deps --extern libfuzzer_sys=/tmp/blah/fuzz/target/x86_64-unknown-linux-gnu/release/deps/liblibfuzzer_sys-259f8345fb0f35cb.rlib --cfg fuzzing -Cpasses=sancov -Cllvm-args=-sanitizer-coverage-level=4 -Cllvm-args=-sanitizer-coverage-trace-compares -Cllvm-args=-sanitizer-coverage-inline-8bit-counters -Cllvm-args=-sanitizer-coverage-trace-geps -Cllvm-args=-sanitizer-coverage-prune-blocks=0 -Cllvm-args=-sanitizer-coverage-pc-table -Zsanitizer=address -Cllvm-args=-sanitizer-coverage-stack-depth -Cdebug-assertions -L native=/tmp/blah/fuzz/target/x86_64-unknown-linux-gnu/release/build/libfuzzer-sys-c622530de11013fe/out`
warning: unused variable: `data`
 --> fuzz_targets/fuzz_target_1.rs:4:15
  |
4 | fuzz_target!(|data: &[u8]| {
  |               ^^^^ help: consider prefixing with an underscore: `_data`
  |
  = note: `#[warn(unused_variables)]` on by default

    Finished release [optimized] target(s) in 33.69s
       Fresh cc v1.0.47
       Fresh arbitrary v0.2.0
       Fresh libfuzzer-sys v0.1.0 (https://github.com/rust-fuzz/libfuzzer-sys.git#0c450753)
       Fresh blah-fuzz v0.0.0 (/tmp/blah/fuzz)
warning: unused variable: `data`
 --> fuzz_targets/fuzz_target_1.rs:4:15
  |
4 | fuzz_target!(|data: &[u8]| {
  |               ^^^^ help: consider prefixing with an underscore: `_data`
  |
  = note: `#[warn(unused_variables)]` on by default

    Finished release [optimized] target(s) in 0.01s
     Running `fuzz/target/x86_64-unknown-linux-gnu/release/fuzz_target_1 -artifact_prefix=/tmp/blah/fuzz/artifacts/fuzz_target_1/ /tmp/blah/fuzz/corpus/fuzz_target_1`
INFO: Seed: 3570160596
INFO: Loaded 1 modules   (36 inline 8-bit counters): 36 [0x557a27e5aae0, 0x557a27e5ab04), 
INFO: Loaded 1 PC tables (18 PCs): 18 [0x557a27e5ab08,0x557a27e5ac28), 
ERROR: The size of coverage PC tables does not match the
number of instrumented PCs. This might be a compiler bug,
please contact the libFuzzer developers.
Also check https://bugs.llvm.org/show_bug.cgi?id=34636
for possible workarounds (tl;dr: don't use the old GNU ld)
```
This is something that hasn't been super clear to me, and I haven't really seen it discussed anywhere ever.

The corpus

* can end up getting sizable (see also #163)
* often isn't human readable

Committing it to the project-being-fuzzed's repo seems like it could add a bunch of git overhead and even make merges difficult.

But, it is needed to "pick up where you left off" when doing time-budgeted fuzzing. Anyone fuzzing the project is going to want that corpus.

I guess it could be in a git submodule? That has its own overhead, but seems like maybe a good fit for when only some folks (or just CI or something) are fuzzing, and not every local developer.

Although, maybe I'm more concerned about this than I should be?

Do folks have thoughts on this?
Hi,
I am fuzzing the Rust implementation of [`swf-parser`](https://github.com/open-flash/swf-parser/tree/master/rs) with `cargo fuzz`. The fuzzer is helpful and found some issues, but it crashes due to OOM (out of memory) errors about a third of the time. When looking into the input that caused this error, it seems that **the OOM error is caused by the fuzzer itself, not the library**.

Here is [the fuzz target](https://github.com/open-flash/swf-parser/blob/311ad7e93100ded90c64b0b8fa5b595dfa43f7c2/rs/fuzz/fuzz_targets/tag.rs#L5-L9):
```rust
fuzz_target!(|data: &[u8]| {
  if let Some((swf_version, data)) = data.split_first() {
    let _ = swf_parser::complete::parse_tag(data, *swf_version);
  }
});
```

You can run it yourself by cloning the repo and then running:
```
cd rs
cargo fuzz run tag
```

The OOM is caused when the fuzzer generates the following inputs:
- `b""` (empty slice): Due to how the fuzz target is defined, **the library shouldn't even be called**. How is it possible to cause an OOM? This input is the most common cause of OOM. 
- `b"\x5b\x01\x06\x00\x40"` this input caused an OOM error once. This is a well-formed input that works fine when executed as a unit test (it produces a tag marking the SWF file as protected, with an empty password). There's no recursion or advanced resource management going on in the lib: this just produces a struct and should not exceed the default 2GiB memory limit.

Here is a log of one of the execution causing an OOM due to the empty slice:
<details>
<summary>See log</summary>

```
/home/demurgos/.cargo/bin/cargo fuzz run tag
       Fresh unicode-xid v0.1.0
       Fresh semver-parser v0.7.0
       Fresh cfg-if v0.1.7
       Fresh build_const v0.2.1
       Fresh version_check v0.1.5
       Fresh autocfg v0.1.6
       Fresh nodrop v0.1.14
       Fresh static_assertions v0.3.4
       Fresh ucd-util v0.1.3
       Fresh lazy_static v1.3.0
       Fresh cc v1.0.34
       Fresh utf8-ranges v1.0.2
       Fresh hex v0.3.2
       Fresh itoa v0.4.3
       Fresh adler32 v1.0.3
       Fresh half v1.4.0
       Fresh arbitrary v0.1.1
       Fresh semver v0.9.0
       Fresh log v0.4.6
       Fresh regex-syntax v0.6.6
       Fresh thread_local v0.3.6
       Fresh inflate v0.4.5
       Fresh proc-macro2 v0.4.27
       Fresh rustc_version v0.2.3
       Fresh memchr v2.2.0
       Fresh ryu v1.0.2
       Fresh arrayvec v0.4.12
       Fresh byteorder v1.3.1
       Fresh quote v0.6.11
       Fresh crc v1.8.1
       Fresh aho-corasick v0.7.6
       Fresh syn v0.15.30
       Fresh lzma-rs v0.1.1
       Fresh regex v1.1.9
       Fresh num-traits v0.2.8
       Fresh serde_derive v1.0.90
       Fresh lexical-core v0.4.6
       Fresh libfuzzer-sys v0.1.1
       Fresh serde v1.0.90
       Fresh nom v5.0.1
       Fresh swf-fixed v0.1.4
       Fresh serde_json v1.0.41
       Fresh swf-tree v0.9.0 (https://github.com/open-flash/swf-tree.git?rev=524f19adc098d83900e94bbe693887a63b50786d#524f19ad)
   Compiling swf-parser v0.9.0 (/data/projects/open-flash/swf-parser/rs)
     Running `rustc --edition=2018 --crate-name swf_parser /data/projects/open-flash/swf-parser/rs/src/lib.rs --error-format=json --json=diagnostic-rendered-ansi --crate-type lib --emit=dep-info,metadata,link -C debuginfo=2 -C metadata=61e283fed3cc1cf1 -C extra-filename=-61e283fed3cc1cf1 --out-dir /data/projects/open-flash/swf-parser/rs/fuzz/target/x86_64-unknown-linux-gnu/debug/deps --target x86_64-unknown-linux-gnu -C incremental=/data/projects/open-flash/swf-parser/rs/fuzz/target/x86_64-unknown-linux-gnu/debug/incremental -L dependency=/data/projects/open-flash/swf-parser/rs/fuzz/target/x86_64-unknown-linux-gnu/debug/deps -L dependency=/data/projects/open-flash/swf-parser/rs/fuzz/target/debug/deps --extern half=/data/projects/open-flash/swf-parser/rs/fuzz/target/x86_64-unknown-linux-gnu/debug/deps/libhalf-edb4f4d84be331bf.rmeta --extern inflate=/data/projects/open-flash/swf-parser/rs/fuzz/target/x86_64-unknown-linux-gnu/debug/deps/libinflate-5b679699785d38a5.rmeta --extern lazy_static=/data/projects/open-flash/swf-parser/rs/fuzz/target/x86_64-unknown-linux-gnu/debug/deps/liblazy_static-baf135a10834eeaf.rmeta --extern lzma_rs=/data/projects/open-flash/swf-parser/rs/fuzz/target/x86_64-unknown-linux-gnu/debug/deps/liblzma_rs-246e16db36b00216.rmeta --extern memchr=/data/projects/open-flash/swf-parser/rs/fuzz/target/x86_64-unknown-linux-gnu/debug/deps/libmemchr-9950ca4825b54084.rmeta --extern nom=/data/projects/open-flash/swf-parser/rs/fuzz/target/x86_64-unknown-linux-gnu/debug/deps/libnom-753393ed81863ed8.rmeta --extern num_traits=/data/projects/open-flash/swf-parser/rs/fuzz/target/x86_64-unknown-linux-gnu/debug/deps/libnum_traits-beec309a9be3db3c.rmeta --extern regex=/data/projects/open-flash/swf-parser/rs/fuzz/target/x86_64-unknown-linux-gnu/debug/deps/libregex-8590be608ed69cc2.rmeta --extern serde_json=/data/projects/open-flash/swf-parser/rs/fuzz/target/x86_64-unknown-linux-gnu/debug/deps/libserde_json-b650a2f567d8eed8.rmeta --extern swf_fixed=/data/projects/open-flash/swf-parser/rs/fuzz/target/x86_64-unknown-linux-gnu/debug/deps/libswf_fixed-a7f81cf33dce1629.rmeta --extern swf_tree=/data/projects/open-flash/swf-parser/rs/fuzz/target/x86_64-unknown-linux-gnu/debug/deps/libswf_tree-57a868c88b0df0ab.rmeta --cfg fuzzing -Cpasses=sancov -Cllvm-args=-sanitizer-coverage-level=4 -Cllvm-args=-sanitizer-coverage-trace-compares -Cllvm-args=-sanitizer-coverage-inline-8bit-counters -Cllvm-args=-sanitizer-coverage-trace-geps -Cllvm-args=-sanitizer-coverage-prune-blocks=0 -Cllvm-args=-sanitizer-coverage-pc-table -Zsanitizer=address -Cllvm-args=-sanitizer-coverage-stack-depth`
   Compiling swf-parser-fuzz v0.0.1 (/data/projects/open-flash/swf-parser/rs/fuzz)
     Running `rustc --edition=2018 --crate-name tag fuzz_targets/tag.rs --error-format=json --json=diagnostic-rendered-ansi --crate-type bin --emit=dep-info,link -C debuginfo=2 -C metadata=8ef32776a5e8aad8 -C extra-filename=-8ef32776a5e8aad8 --out-dir /data/projects/open-flash/swf-parser/rs/fuzz/target/x86_64-unknown-linux-gnu/debug/deps --target x86_64-unknown-linux-gnu -C incremental=/data/projects/open-flash/swf-parser/rs/fuzz/target/x86_64-unknown-linux-gnu/debug/incremental -L dependency=/data/projects/open-flash/swf-parser/rs/fuzz/target/x86_64-unknown-linux-gnu/debug/deps -L dependency=/data/projects/open-flash/swf-parser/rs/fuzz/target/debug/deps --extern libfuzzer_sys=/data/projects/open-flash/swf-parser/rs/fuzz/target/x86_64-unknown-linux-gnu/debug/deps/liblibfuzzer_sys-b6f1eb7920522c41.rlib --extern swf_parser=/data/projects/open-flash/swf-parser/rs/fuzz/target/x86_64-unknown-linux-gnu/debug/deps/libswf_parser-61e283fed3cc1cf1.rlib --cfg fuzzing -Cpasses=sancov -Cllvm-args=-sanitizer-coverage-level=4 -Cllvm-args=-sanitizer-coverage-trace-compares -Cllvm-args=-sanitizer-coverage-inline-8bit-counters -Cllvm-args=-sanitizer-coverage-trace-geps -Cllvm-args=-sanitizer-coverage-prune-blocks=0 -Cllvm-args=-sanitizer-coverage-pc-table -Zsanitizer=address -Cllvm-args=-sanitizer-coverage-stack-depth -L native=/data/projects/open-flash/swf-parser/rs/fuzz/target/x86_64-unknown-linux-gnu/debug/build/libfuzzer-sys-aab13c62c2cc6b9d/out`
    Finished dev [unoptimized + debuginfo] target(s) in 12.43s
       Fresh unicode-xid v0.1.0
       Fresh semver-parser v0.7.0
       Fresh cfg-if v0.1.7
       Fresh build_const v0.2.1
       Fresh autocfg v0.1.6
       Fresh nodrop v0.1.14
       Fresh version_check v0.1.5
       Fresh ucd-util v0.1.3
       Fresh cc v1.0.34
       Fresh static_assertions v0.3.4
       Fresh lazy_static v1.3.0
       Fresh adler32 v1.0.3
       Fresh itoa v0.4.3
       Fresh utf8-ranges v1.0.2
       Fresh hex v0.3.2
       Fresh half v1.4.0
       Fresh arbitrary v0.1.1
       Fresh semver v0.9.0
       Fresh log v0.4.6
       Fresh regex-syntax v0.6.6
       Fresh thread_local v0.3.6
       Fresh inflate v0.4.5
       Fresh proc-macro2 v0.4.27
       Fresh rustc_version v0.2.3
       Fresh ryu v1.0.2
       Fresh memchr v2.2.0
       Fresh arrayvec v0.4.12
       Fresh byteorder v1.3.1
       Fresh quote v0.6.11
       Fresh aho-corasick v0.7.6
       Fresh crc v1.8.1
       Fresh syn v0.15.30
       Fresh num-traits v0.2.8
       Fresh regex v1.1.9
       Fresh lzma-rs v0.1.1
       Fresh libfuzzer-sys v0.1.1
       Fresh serde_derive v1.0.90
       Fresh lexical-core v0.4.6
       Fresh serde v1.0.90
       Fresh nom v5.0.1
       Fresh swf-fixed v0.1.4
       Fresh serde_json v1.0.41
       Fresh swf-tree v0.9.0 (https://github.com/open-flash/swf-tree.git?rev=524f19adc098d83900e94bbe693887a63b50786d#524f19ad)
       Fresh swf-parser v0.9.0 (/data/projects/open-flash/swf-parser/rs)
       Fresh swf-parser-fuzz v0.0.1 (/data/projects/open-flash/swf-parser/rs/fuzz)
    Finished dev [unoptimized + debuginfo] target(s) in 0.03s
     Running `fuzz/target/x86_64-unknown-linux-gnu/debug/tag -artifact_prefix=/data/projects/open-flash/swf-parser/rs/fuzz/artifacts/tag/ /data/projects/open-flash/swf-parser/rs/fuzz/corpus/tag`
INFO: Seed: 1676543060
INFO: Loaded 1 modules   (39836 inline 8-bit counters): 39836 [0x55aecfc8a170, 0x55aecfc93d0c),
INFO: Loaded 1 PC tables (39836 PCs): 39836 [0x55aecfc93d10,0x55aecfd2f6d0),
INFO:      216 files found in /data/projects/open-flash/swf-parser/rs/fuzz/corpus/tag
INFO: -max_len is not provided; libFuzzer will not generate inputs larger than 4096 bytes
INFO: seed corpus: files: 216 min: 1b max: 6b total: 1015b rss: 3397Mb
#217	INITED cov: 5457 ft: 6648 corp: 189/879b lim: 4 exec/s: 0 rss: 3397Mb
#863	REDUCE cov: 5457 ft: 6648 corp: 189/878b lim: 4 exec/s: 0 rss: 3397Mb L: 5/6 MS: 1 EraseBytes-
	NEW_FUNC[1/2]: ==205169== ERROR: libFuzzer: out-of-memory (used: 3397Mb; limit: 2048Mb)
   To change the out-of-memory limit use -rss_limit_mb=<N>

MS: 4 ChangeByte-ChangeBinInt-ChangeBinInt-ChangeBit-; base unit: 5a796ce42572e152c35f0061fff1cd41eaede520


artifact_prefix='/data/projects/open-flash/swf-parser/rs/fuzz/artifacts/tag/'; Test unit written to /data/projects/open-flash/swf-parser/rs/fuzz/artifacts/tag/oom-da39a3ee5e6b4b0d3255bfef95601890afd80709
Base64:
SUMMARY: libFuzzer: out-of-memory

Process finished with exit code 77
```

</details>

System information:
- OS: Linux 64bit (`x86_64-unknown-linux-gnu`)
- Toolchain: `nightly-2019-11-06-x86_64-unknown-linux-gnu`
- Cargo fuzz version: `0.5.4` (latest)

The issue may still lie in my lib, but I find it very unlikely given the inputs causing the OOM errors.
```rust
#![no_main]
use libfuzzer_sys::fuzz_target;

fuzz_target!(|data: [u8; 16]| {
   // fuzzed code goes here
});
```
causes the following error:
```console
error[E0463]: can't find crate for `arbitrary`
 --> fuzz_targets/fuzz_target_1.rs:4:1
  |
4 | / fuzz_target!(|data: [u8; 16]| {
5 | |    // fuzzed code goes here
6 | | });
  | |___^ can't find crate
  |
  = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)
```

I tried to fix this by adding the missing crate to `fuzz/Cargo.toml`.
```toml
[dependencies.arbitrary]
version = "0.2"
```
but this caused the following error:
```console
error[E0308]: mismatched types
 --> fuzz_targets/fuzz_target_1.rs:4:1
  |
4 | / fuzz_target!(|data: [u8; 16]| {
5 | |    // fuzzed code goes here
6 | | });
  | |___^ expected enum `arbitrary::BufferError`, found &str
  |
  = note: expected type `std::result::Result<_, arbitrary::BufferError>`
             found type `std::result::Result<_, &str>`
  = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)
```

To fix the problem, I had to switch back to the `0.1` version of the `arbitrary` crate.
```toml
[dependencies.arbitrary]
# breaks with 0.2
version = "0.1"
```

I think the dependency should be automatically included instead.
It'd be easier to get started if `cargo fuzz run` ran fuzzing, instead of failing with not-very-helpful:

> error: The following required arguments were not provided:
>    &lt;TARGET>

It could behave similarly to `cargo run`, which runs binary if there's only one. It asks to specify a binary only if there's more than one.


I'm looking into fuzzing parts of Rust standard library to detect bugs such as [CVE-2018-1000810](https://bugzilla.redhat.com/show_bug.cgi?id=1632932). See also: [the fix](https://github.com/rust-lang/rust/pull/54397). 

However, this is currently impossible with cargo-fuzz because it passes `-Cpanic=abort` during compilation, while for this function panic on overflow is the expected behavior. I need a way to disable that.
This surfaces when calling `cargo fuzz tmin <target> <crash>` where `<crash>` is a filename with special shell characters (honggfuzz produces those by default). I don't know how the shell is called -- it seems that `exec_tmin` is using `exec`.

```
# ~/g/c/testcrate on master ⨯ ../target/debug/cargo-fuzz tmin fuzz_target_1 fuzz/artifacts/fuzz_target_1/crash-\(\)
       Fresh cc v1.0.30
       Fresh arbitrary v0.1.1
       Fresh testcrate v0.1.0 (/home/johannes/git/cargo-fuzz/testcrate)
       Fresh libfuzzer-sys v0.1.0 (https://github.com/rust-fuzz/libfuzzer-sys.git#4a413199)
       Fresh testcrate-fuzz v0.0.1 (/home/johannes/git/cargo-fuzz/testcrate/fuzz)
    Finished dev [unoptimized + debuginfo] target(s) in 0.01s
     Running `fuzz/target/x86_64-unknown-linux-gnu/debug/fuzz_target_1 -artifact_prefix=/home/johannes/git/cargo-fuzz/testcrate/fuzz/artifacts/fuzz_target_1/ -minimize_crash=1 -runs=255 'fuzz/artifacts/fuzz_target_1/crash-()'`
INFO: Seed: 1638552190
INFO: Loaded 1 modules   (1445 guards): 1445 [0x560e72897b50, 0x560e728991e4),
CRASH_MIN: minimizing crash input: 'fuzz/artifacts/fuzz_target_1/crash-()' (7 bytes)
CRASH_MIN: executing: fuzz/target/x86_64-unknown-linux-gnu/debug/fuzz_target_1 -artifact_prefix=/home/johannes/git/cargo-fuzz/testcrate/fuzz/artifacts/fuzz_target_1/ -runs=255 fuzz/artifacts/fuzz_target_1/crash-() >/tmp/libFuzzerTemp.28621.txt 2>&1
sh: -c: line 0: syntax error near unexpected token `('
sh: -c: line 0: `fuzz/target/x86_64-unknown-linux-gnu/debug/fuzz_target_1 -artifact_prefix=/home/johannes/git/cargo-fuzz/testcrate/fuzz/artifacts/fuzz_target_1/ -runs=255 fuzz/artifacts/fuzz_target_1/crash-() >/tmp/libFuzzerTemp.28621.txt 2>&1'
CRASH_MIN: 'fuzz/artifacts/fuzz_target_1/crash-()' (7 bytes) caused a crash. Will try to minimize it further
CRASH_MIN: executing: fuzz/target/x86_64-unknown-linux-gnu/debug/fuzz_target_1 -artifact_prefix=/home/johannes/git/cargo-fuzz/testcrate/fuzz/artifacts/fuzz_target_1/ -runs=255 fuzz/artifacts/fuzz_target_1/crash-() -minimize_crash_internal_step=1 -exact_artifact_path=/home/johannes/git/cargo-fuzz/testcrate/fuzz/artifacts/fuzz_target_1/minimized-from-a18f4b6a8d7b1f437c41fa9f2b3d8fd9b458c8f7 >/tmp/libFuzzerTemp.28621.txt 2>&1
sh: -c: line 0: syntax error near unexpected token `('
sh: -c: line 0: `fuzz/target/x86_64-unknown-linux-gnu/debug/fuzz_target_1 -artifact_prefix=/home/johannes/git/cargo-fuzz/testcrate/fuzz/artifacts/fuzz_target_1/ -runs=255 fuzz/artifacts/fuzz_target_1/crash-() -minimize_crash_internal_step=1 -exact_artifact_path=/home/johannes/git/cargo-fuzz/testcrate/fuzz/artifacts/fuzz_target_1/minimized-from-a18f4b6a8d7b1f437c41fa9f2b3d8fd9b458c8f7 >/tmp/libFuzzerTemp.28621.txt 2>&1'
*********************************
No such directory: /home/johannes/git/cargo-fuzz/testcrate/fuzz/artifacts/fuzz_target_1/minimized-from-a18f4b6a8d7b1f437c41fa9f2b3d8fd9b458c8f7; exiting
```
[Libfuzzer supports user-supplied mutators for structure-aware fuzzing.](https://github.com/google/fuzzer-test-suite/blob/530dae991ed41b4214a2a36844fecdf3f246cab9/tutorial/structure-aware-fuzzing.md) The user should provide a function

```cpp
extern "C" size_t LLVMFuzzerCustomMutator(
  uint8_t *Data,
  size_t Size,
  size_t MaxSize,
  unsigned int Seed
)
```

that mutates the data, and it can call `LLVMFuzzerMutate` to while doing so.

Would it be possible to support this in `cargo-fuzz`?