Fix for glimmer warning about possible XSS when static styles are used with element modifier applied to the same element.

- style-warnings-test.js - added test demonstrating problem
- template-compiler.ts - extended condition for trusting static styles attributes and removed duplicate branches
- allocate-symbols.ts - my guess is that there was a typo, so I fixed it - without it, tests fail - please double check this change
Parsing `<TITLE>{{aVariable}} a title</TITLE>` with `@glimmer-vm/syntax` fails with the following error:
```
SyntaxError: Unclosed element `TITLE`
```

The error is thrown on this line: https://github.com/glimmerjs/glimmer-vm/blob/v0.45.3/packages/@glimmer/syntax/lib/parser/handlebars-node-visitors.ts#L59

I get the same error for `SCRIPT` and `STYLE`. Is this something expected?
Based on an idea that @krisselden and I had while working on #988 this adds tests that run a number of iterations removing a random node, and confirming that the final rehydrated (e.g. client rendered) HTML is correct.

In order to make these tests actionable the infrastructure added here provides a way to replicate _specific_ iterations upon failure. The way this works is based on QUnit's internal `QUnit.config.seed` implementation. When a `QUnit` test suite is ran with the `seed` query param set (with no value e.g. `/tests/index.html?hidepassed&seed`), QUnit will choose a random seed and use that seed to choose a randomized test order. Then if a failure occurs with the randomized and seeded test run, you can run the tests again with **exactly** that seed value by
specifying the `seed` query param _with_ the failing seed value (e.g. `/tests/index.html?hidepassed&seed=THEVALUEHERE`). The implementation here piggie backs on that system to use the QUnit's seed value (along with a copied version of their [hashing function](qunitjs/qunit:src/core/utilities.js@2.9.3#L144-L158)
and [seeded randomizer](qunitjs/qunit:src/core/processing-queue.js@2.9.3#L134-L154)) in addition to the iteration being ran to always select a "known value" to remove. This means that given the correct seed (and iteration number) we can easily replicate **specific** failure scenarios without manually having to track it down.

The way you'd do this is:

1. Run the tests with `/tests/index.html?hidepassed&seed` until a failure occurs.
2. Look at the failed tests assertion, grab the rerun URL printed in the failed assertion.
3. Run the tests again with that set of query params (e.g. `/tests/index.html?hidepassed&seed=SEED_HERE&iteration=ITERATION_HERE`).

---

Currently includes the changes from #988, but will rebase once that lands.
After talking with @pzuraq what I think is needed to get Glimmer Native list views fully working cleanly is rehydration. I wanted to create this issue to kick off the conversation, and perhaps I could help out with implementation given direct tasks.

The issue I need to solve regarding list views is as follows.

1) I render a page in nativescript, which has a certain glimmer result and state.
2) On that page, we add a ListView. ListView tells us that we need to generate x items, so Glimmer Native creates a `StackLayout` to use as a container, then tries to render a template into that stack layout. The issue being it was rendered outside of the page element, so Glimmer knows nothing about the context or element. This prevents tracked properties and misc other things (like `if` blocks) from working correctly.
3) When the user scrolls, instead of creating elements we re-use the elements created and just swap the data attached to the element to be another list item.

[Here](https://github.com/halfnelson/svelte-native/blob/master/src/dom/native/ListViewElement.ts#L34) is how svelte works as an example.

They are able to just create a new component and give it a `target` which correctly provides the right context and binds everything correctly.


For a glimmer implantation, perhaps we could do something like this.

```
const wrapper = createElement('StackLayout') as NativeElementNode;
const nativeElement = wrapper.nativeView;
const componentTemplate = Compilable(this._templateEl.component.args.src);
const compiled = componentTemplate.compile(Application.context);
const result = Applicaton.result; //result from page rerender
const cursor = { element: wrapper, nextSibling: null } as Cursor;
const component = result.addComponent(compiledTemplate, cursor, state);
nativeElement.component = component;
return nativeElement;
```


If any of my terms are misleading or incorrect I apologize, still trying to learn the ins and outs of glimmer


It is unclear what this document is describing and what version it belongs to so we might as well delete it.
Edit: Changed entire description since it was no longer relevant.

This PR resolves https://github.com/glimmerjs/glimmer-vm/issues/978 by Checking the state of the the tokenizer whenever it hits a `MustacheStatement` and throws a `SyntaxError` if the tokenizer is in in an `EndTag`

Quite open to feedback on this approach! As well as what the error message should be say exactly.
for now - this is valid syntax
```hbs
<div></ {{mod-name}} div >
```
and it's parsed like
![image](https://user-images.githubusercontent.com/1360552/66519691-75becd00-eaf0-11e9-870b-e142878275b2.png)

@pzuraq is it make sence?

// https://github.com/glimmerjs/glimmer-vm/pull/964
The perf work we did recently requires us to update to a more recent version of TS (`3.3.3`), and there are failures on the latest TS for some of our typings. It would probably be best to update and get the latest features, and fix the typing issues.
When a ConcatStatement has a `TextNode` as its first part, the location information of that `TextNode` is wrong.

A specific test for this existed, but the location information used in the assertion was wrong :weary:.

You can see the issue in this AST Explorer gist:

https://astexplorer.net/#/gist/9d5730ddbe7f93870d1580f2531fc5c8/5e9d5e9ff50731c96d2b78f73933e77659b4ab2f

The starting locations for the first part in each of those concat statements are different, the one that starts with a text node is wrong.