# Question

From React Native v0.61, `useWindowDimensions` has been implemented to the core repository https://github.com/facebook/react-native/commit/5ec382d#diff-d22b00f3f4e10cfb3e6ac4e653bcebd7R17

This is essentially the same functionality as `useDimensions` in this repo.
Should `useDimensions` be removed from this package? or should it continue to exist for RN 0.59, and 0.60 users?
<!--
  Before submitting it, please ensure that this was not already asked in another issue, or on StackOverflow. Ideally, you should always refer to StackOverflow first.

  This issue should serve for you to ask a question about the library to the maintainers and other fellow developers - remember that even if the issue gets closed, the conversation can move forward ü§ó
  Also, ideally this issue should culminate in a PR to the documentation for this library so that future developers will have that doubt cleared.
-->

# Summary

Just simple refactor:
- remove unused React import
- stop create an object of initial value for each call 

## Test Plan
-

### What's required for testing (prerequisites)?

### What are the steps to reproduce (after prerequisites)?

## Compatibility

| OS      | Implemented |
| ------- | :---------: |
| iOS     |    ‚úÖ     |
| Android |    ‚úÖ     |

## Checklist

<!-- Check completed item, when applicable, via: [X] -->

- [x] I have tested this on a device and a simulator
- [ ] I added the documentation in `README.md`
- [ ] I mentioned this change in `CHANGELOG.md`
- [ ] I updated the typed files (TS and Flow)
- [ ] I added a sample use of the API in the example project (`example/App.js`)

<!-- Thanks for submitting a pull request! We appreciate you spending the time to work on these changes. Please follow the template so that the reviewers can easily understand what the code changes affect -->

# Summary

Added community eslint config/prettier and applied linting.

<!--
Explain the **motivation** for making this change: here are some points to help you:

* What issues does the pull request solve? Please tag them so that they will get automatically closed once the PR is merged
* What is the feature? (if applicable)
* How did you implement the solution?
* What areas of the library does it impact?
-->

## Test Plan

- yarn lint
<!-- Demonstrate the code is solid. Example: The exact commands you ran and their output, screenshots / videos if the pull request changes UI. -->

### What's required for testing (prerequisites)?

### What are the steps to reproduce (after prerequisites)?

## Compatibility

| OS      | Implemented |
| ------- | :---------: |
| iOS     |    ‚úÖ‚ùå     |
| Android |    ‚úÖ‚ùå     |


Excuse me for the words but I just looked around the hooks and saw so many bad practices in your project (mostly about performance) so I wonder whether you still maintain this project or not.

For example, this hook does resubscribe event every time the component renders. There is a fix here but for maybe some reasons it is merged yet: https://github.com/react-native-community/react-native-hooks/pull/38

`src/useAppState.ts`

```javascript

import React, { useEffect, useState } from 'react'
import { AppState, AppStateStatus } from 'react-native'

export default function useAppState() {
  const currentState = AppState.currentState
  const [appState, setAppState] = useState(currentState)

  function onChange(newState: AppStateStatus) {
    setAppState(newState)
  }

  useEffect(() => {
    AppState.addEventListener('change', onChange)

    return () => {
      AppState.removeEventListener('change', onChange)
    }
  })

  return appState
}
```

This hook creates new `getPhotos` and `saveToCameraRoll` functions every time the hook is called. It would cause the hook consumer component to rerender unexpectedly.

`src/useCameraRoll.ts`

```javascript
export default function useCameraRoll() {
  const [photos, setPhotos] = useState(initialState)

  async function getPhotos(config = defaultConfig) {
    try {
      const photos = await CameraRoll.getPhotos(config)
      setPhotos(photos)
    } catch (err) {
      console.log('error: ', err)
    }
  }

  async function saveToCameraRoll(tag: string, type?: 'photo' | 'video') {
    try {
      await CameraRoll.saveToCameraRoll(tag, type)
    } catch (err) {
      console.log('error saving to camera roll: ', err)
    }
  }

  return [photos, getPhotos, saveToCameraRoll]
}
```
This is to prevent the usual Warning

> Can't perform a React state update on an unmounted component. This is a no-op, but it indicates a memory leak in your application.

<!-- Thanks for submitting a pull request! We appreciate you spending the time to work on these changes. Please follow the template so that the reviewers can easily understand what the code changes affect -->

# Summary
I had a _memory leak warning_ with the previous code, and opened a [StackOverflow question](https://stackoverflow.com/questions/59216957/cancel-a-hook-subscription) to solve it.
I ended doing my own hook based on this code to solve the warning.
<!--
Explain the **motivation** for making this change: here are some points to help you:

* What issues does the pull request solve? Please tag them so that they will get automatically closed once the PR is merged
* What is the feature? (if applicable)
* How did you implement the solution?
* What areas of the library does it impact?
-->


## Compatibility

| OS      | Implemented |
| ------- | :---------: |
| iOS     |    ‚úÖ     |
| Android |    ‚úÖ     |

## Checklist

<!-- Check completed item, when applicable, via: [X] -->

- [x] I have tested this on a device and a simulator
- [ ] I added the documentation in `README.md`
- [ ] I mentioned this change in `CHANGELOG.md`
- [ ] I updated the typed files (TS and Flow)
- [ ] I added a sample use of the API in the example project (`example/App.js`)


# Summary
Change Deprecated API (CameraRoll)
CameraRoll is Deprecated from 'react-native'
Now CameraRoll is "@react-native-community/cameraroll" Here
:)
BTW this repo is awesome!

## Checklist

<!-- Check completed item, when applicable, via: [X] -->

- [ O ] I have tested this on a device and a simulator
- [ X ] I added the documentation in `README.md`
- [ X ] I mentioned this change in `CHANGELOG.md`
- [ O ] I updated the typed files (TS and Flow)
- [ X ] I added a sample use of the API in the example project (`example/App.js`)

Hi, it seems like no license is attached to this repo yet. This would imply exclusive copyright by default, as stated [here](https://choosealicense.com/no-permission/).

Assuming this is just an oversight, a license should probably be added to avoid any doubt that this repo is open source.
<!-- Thanks for submitting a pull request! We appreciate you spending the time to work on these changes. Please follow the template so that the reviewers can easily understand what the code changes affect -->

# Summary

Adding `index.d.ts` to project to handle exports from typescript projects and fixing the imports from `./src/` instead of `./lib/`

<!--
Explain the **motivation** for making this change: here are some points to help you:

* What issues does the pull request solve? Please tag them so that they will get automatically closed once the PR is merged
* What is the feature? (if applicable)
* How did you implement the solution?
* What areas of the library does it impact?
-->

## Test Plan

<!-- Demonstrate the code is solid. Example: The exact commands you ran and their output, screenshots / videos if the pull request changes UI. -->

### What's required for testing (prerequisites)?

### What are the steps to reproduce (after prerequisites)?

## Compatibility

| OS      | Implemented |
| ------- | :---------: |
| iOS     |    ‚úÖ‚ùå     |
| Android |    ‚úÖ‚ùå     |

## Checklist

<!-- Check completed item, when applicable, via: [X] -->

- [x] I have tested this on a device and a simulator
- [ ] I added the documentation in `README.md`
- [ ] I mentioned this change in `CHANGELOG.md`
- [x] I updated the typed files (TS and Flow)
- [ ] I added a sample use of the API in the example project (`example/App.js`)

# Is it correct that you bind `keyboardHidden` method to `keyboardWillShow` event?

https://github.com/react-native-community/react-native-hooks/blob/7abd32f513db2cc5ecedb504cb50827685ae6d7b/lib/useKeyboard.js#L26-L28

<!-- Thanks for submitting a pull request! We appreciate you spending the time to work on these changes. Please follow the template so that the reviewers can easily understand what the code changes affect -->

# Summary

<!--
Explain the **motivation** for making this change: here are some points to help you:

* What issues does the pull request solve? Please tag them so that they will get automatically closed once the PR is merged
* What is the feature? (if applicable)
* How did you implement the solution?
* What areas of the library does it impact?
-->
Every time this function was called you will add a new `addEventListener`, now we passed an argument to create a new listener only when receive a new function

## Test Plan

<!-- Demonstrate the code is solid. Example: The exact commands you ran and their output, screenshots / videos if the pull request changes UI. -->

### What's required for testing (prerequisites)?

### What are the steps to reproduce (after prerequisites)?

## Compatibility

| OS      | Implemented |
| ------- | :---------: |
| iOS     |    ‚úÖ‚ùå     |
| Android |    ‚úÖ‚ùå     |

## Checklist

<!-- Check completed item, when applicable, via: [X] -->

- [x] I have tested this on a device and a simulator
- [ ] I added the documentation in `README.md`
- [ ] I mentioned this change in `CHANGELOG.md`
- [x] I updated the typed files (TS and Flow)
- [ ] I added a sample use of the API in the example project (`example/App.js`)
