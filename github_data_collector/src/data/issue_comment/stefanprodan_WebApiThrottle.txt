I handled Preflight and it works fine.
but when used WebApiThrottle, it fires preflight errors from Ionic app and don't know when.

           config.MessageHandlers.Add(new CustomThrottlingHandler()
            {
                Policy = new ThrottlePolicy(perSecond: 5, perMinute: 300)
                {
                    IpThrottling = true,
                    EndpointThrottling = true,
                    ClientThrottling = true
                },
                Repository = new CacheRepository()
            });


Hello, 

 I fear I found a security hole in the white list feature by ClientKeys. In order to make this configuration to work:

 ```
<whitelists>
       <add policyType="2" entry="some-user" />
</whitelists>
```
 you have to configure this setting:

```
  <throttlePolicy clientThrottling="true">
```

whithout enabled `clientThrottling`, the whitelists are ignored. 

The problem with that is that enabling `clientThrottling` is IMHO a security hole because this allows the hackers bypassing the throttling by sending random clientIds.

It would be great if the ClientKey white lists would work as well without enabled clientThrottling.

many thanks for the great project and your support!

best
Lukas
I'd like to set the rate to 2/min for function #1 and to 10/min for the 2nd function following the example as the code below. The code is running fine, but the throttling is not working at all. I can get an unlimited number of "value" and "value1 and value2". Do I also need to change settings in webApiConfig.cs? Please help.

```
using System.Web.Http;
using WebApiThrottle;
namespace wepApiThrottle.Controllers
{
    [EnableThrottling(PerMinute = 2)]
    public class ValuesController : ApiController
    {
    // GET api/values
    [EnableThrottling(PerMinute = 2)]
    public IEnumerable<string> Get()
    {
        return new string[] { "value1", "value2" };
    }

    // GET api/values/5
    [EnableThrottling(PerMinute = 10)]
    public string Get(int id)
    {
        return "value";
    }
}
```
On a high traffic site, all visitors suddenly got this message:


```
"   Arithmetic operation resulted in an overflow:
at System.Collections.Generic.List`1..ctor(IEnumerable`1 collection)\r\n   
at System.Linq.Enumerable.ToList[TSource](IEnumerable`1 source)\r\n   
at WebApiThrottle.ThrottlingCore.ApplyRules(RequestIdentity identity, TimeSpan timeSpan, RateLimitPeriod rateLimitPeriod, Int64& rateLimit)\r\n   
at WebApiThrottle.ThrottlingHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)\r\n   
at System.Web.Http.HttpServer.<SendAsync>d__0.MoveNext()"
```

The problem disappeared after a restart. Is this a bug?
Hi there,
When I use this library, it breaks my CORS policy, for example

`var corsAttr = new EnableCorsAttribute("*", "*", "*");
            config.EnableCors(corsAttr);`

Is there something I can do to fix this?

Thanks,
David
The `var policy = policyRepository.FirstOrDefault(ThrottleManager.GetPolicyKey());` is always null

Here is my code : 

 //Rate Limits
```
 public static class WebApiConfig
    {
        public static void Register(HttpConfiguration config)
        {
            config.MessageHandlers.Add(new MyThrottlingHandler()
            {
                Policy = new ThrottlePolicy(perMinute: 2)
                {
                    ClientThrottling = true,
                    ClientRules = new Dictionary<string, RateLimits>
                    {
                        { "testkey", new RateLimits { PerMinute = 5 } },
                    },
                    ClientWhitelist = new List<string> { "anon", "anotherkeyhere" }
                },
                Repository = new CacheRepository(),
                PolicyRepository = new PolicyCacheRepository()
            });
}
}
```

```
public class MyThrottlingHandler: ThrottlingHandler
        {
            protected override RequestIdentity SetIdentity(HttpRequestMessage request)
            {
                string apiKey = Utility.ExtractApiKey(request);

                return new RequestIdentity()
                {                    
                    ClientKey = string.IsNullOrEmpty(apiKey) ? "anon" : apiKey,
                    ClientIp = GetClientIp(request).ToString(),
                    Endpoint = request.RequestUri.AbsolutePath.ToLowerInvariant()
                };
            }
        }
```

On the controller, I am simply checking if the Key is PAID customer update the rate limit to higher.

```
public static void UpdateRateLimits(string apiKey, RateLimits rateLimits)
        {
            //init policy repo
            var policyRepository = new PolicyCacheRepository();
 
            //get policy object from cache
            var policy = policyRepository.FirstOrDefault(ThrottleManager.GetPolicyKey());
            **// Error here - policy is always null**   
         
            if (policy.ClientRules.ContainsKey(apiKey))
            {
                //update client rate limits
                policy.ClientRules[apiKey] = rateLimits;
            }
            else
            {   
                //add new client rate limits
                policy.ClientRules.Add(apiKey, rateLimits);
            }
            //apply policy updates
            ThrottleManager.UpdatePolicy(policy, policyRepository);
        }
```
Any way to send X headers in every call response to tell clients about their limitation? As [implemented in asp.core version](https://github.com/stefanprodan/WebApiThrottle/issues/30)

```
"X-RateLimit-Limit": "5000",
"X-RateLimit-Remaining": "4966",
"X-RateLimit-Reset": "1372700873"
```
I want to implement ThrottlingHandler.SetIdentity so that it fetches the ClientId from a application/x-www-form-urlencoded POST like:

POST /WebAPI.DemoThrottle/Values/Throttle HTTP/1.1
Host: localhost:63621
Content-Type: application/x-www-form-urlencoded

**ClientId=MyClientId**&OtherParam=123

I came up with the following:

`        protected override RequestIdentity SetIdentity(HttpRequestMessage request)
        {
            var form = request.Content.ReadAsFormDataAsync().Result;
            var clientId = form["ClientId"];
`

But this seems to remove the body from the Action in the controller:

`public async Task<IHttpActionResult> Throttle([FromBody] ThrottleData throttle)`

and throttle will be null.

Any suggestions or am I doing this the wrong way?
 I Try to user it as folllowing:
QuotaExceededMessage = JsonConvert.SerializeObject(new ApiResult(429001, "it use frequently,only allow {0} per {1}")ï¼Œplease wait a moment"))
but it don't support , 
I just want to response a custom json result , how can I to  implement
Hi, I changed the key calculation algorithm a bit to improve performance and reduce key size