
https://github.com/ktorio/ktor/releases/tag/1.3.0

**Describe the bug**
App crashes when activity is reopened from recent tasks, calling onCreate of activity and restoring saved state of fragments.

**To Reproduce**
See error
```
java.lang.RuntimeException: Unable to start activity ComponentInfo{com.checkin.app.checkin/com.checkin.app.checkin.restaurant.activities.PublicRestaurantProfileActivity}: org.koin.core.error.NoBeanDefFoundException: No definition found for class:'com.checkin.app.checkin.misc.fragments.NetworkBlockingFragment'. Check your definitions!
        at android.app.ActivityThread.performLaunchActivity(ActivityThread.java:3270)
        at android.app.ActivityThread.handleLaunchActivity(ActivityThread.java:3409)
        at android.app.ActivityThread.handleRelaunchActivityInner(ActivityThread.java:5279)
        at android.app.ActivityThread.handleRelaunchActivity(ActivityThread.java:5187)
        at android.app.servertransaction.ActivityRelaunchItem.execute(ActivityRelaunchItem.java:69)
        at android.app.servertransaction.TransactionExecutor.executeCallbacks(TransactionExecutor.java:135)
        at android.app.servertransaction.TransactionExecutor.execute(TransactionExecutor.java:95)
        at android.app.ActivityThread$H.handleMessage(ActivityThread.java:2016)
        at android.os.Handler.dispatchMessage(Handler.java:107)
        at android.os.Looper.loop(Looper.java:214)
        at android.app.ActivityThread.main(ActivityThread.java:7356)
        at java.lang.reflect.Method.invoke(Native Method)
        at com.android.internal.os.RuntimeInit$MethodAndArgsCaller.run(RuntimeInit.java:492)
        at com.android.internal.os.ZygoteInit.main(ZygoteInit.java:930)
     Caused by: **org.koin.core.error.NoBeanDefFoundException: No definition found for class:'com.checkin.app.checkin.misc.fragments.NetworkBlockingFragment'. Check your definitions!**
        at org.koin.core.scope.Scope.throwDefinitionNotFound(Scope.kt:220)
        at org.koin.core.scope.Scope.resolveInstance(Scope.kt:194)
        at org.koin.core.scope.Scope.get(Scope.kt:178)
        at org.koin.core.scope.Scope.get$default(Scope.kt:167)
        at org.koin.androidx.fragment.android.KoinFragmentFactory.instantiate(KoinFragmentFactory.kt:15)
        at androidx.fragment.app.FragmentStateManager.<init>(FragmentStateManager.java:72)
        at androidx.fragment.app.FragmentManager.restoreSaveState(FragmentManager.java:2666)
        at androidx.fragment.app.FragmentController.restoreSaveState(FragmentController.java:196)
        at androidx.fragment.app.FragmentActivity.onCreate(FragmentActivity.java:287)
        at androidx.appcompat.app.AppCompatActivity.onCreate(AppCompatActivity.java:106)
        at com.checkin.app.checkin.restaurant.activities.PublicRestaurantProfileActivity.onCreate(PublicRestaurantProfileActivity.kt:139)
        at android.app.Activity.performCreate(Activity.java:7803)
        at android.app.Activity.performCreate(Activity.java:7792)
        at android.app.Instrumentation.callActivityOnCreate(Instrumentation.java:1306)
        at android.app.ActivityThread.performLaunchActivity(ActivityThread.java:3245)
        at android.app.ActivityThread.handleLaunchActivity(ActivityThread.java:3409) 
        at android.app.ActivityThread.handleRelaunchActivityInner(ActivityThread.java:5279) 
        at android.app.ActivityThread.handleRelaunchActivity(ActivityThread.java:5187) 
        at android.app.servertransaction.ActivityRelaunchItem.execute(ActivityRelaunchItem.java:69) 
        at android.app.servertransaction.TransactionExecutor.executeCallbacks(TransactionExecutor.java:135) 
        at android.app.servertransaction.TransactionExecutor.execute(TransactionExecutor.java:95) 
        at android.app.ActivityThread$H.handleMessage(ActivityThread.java:2016) 
        at android.os.Handler.dispatchMessage(Handler.java:107) 
        at android.os.Looper.loop(Looper.java:214) 
        at android.app.ActivityThread.main(ActivityThread.java:7356) 
        at java.lang.reflect.Method.invoke(Native Method) 
        at com.android.internal.os.RuntimeInit$MethodAndArgsCaller.run(RuntimeInit.java:492) 
        at com.android.internal.os.ZygoteInit.main(ZygoteInit.java:930) 
```


**Expected behavior**
Working activity.

**Koin project used and used version (please complete the following information):**
 `koin version 2.1.0-alpha-8`

**Additional moduleDefinition**
```
val menuCartModule = module {
    scope<PublicRestaurantProfileActivity> {
        scoped { UserMenuGroupsFragment(ScheduledCartViewModel::class) }
    }
}

class PublicRestaurantProfileActivity: AppCompatActivity() {
	override fun onCreate(savedInstanceState: Bundle?) {
        setupKoinFragmentFactory(lifecycleScope)
        super.onCreate(savedInstanceState)
		setContentView(R.layout.activity_public_restaurant_profile)
		// ...
}
```

I also loaded KotlinFragmentFactory module in Application class. Only **UserMenuGroupsFragment** has a with-args constructor, but the crash happens when restoring state tries to  get fragments from koin fragment factory, even if they are no-arg constructors and aren't setup.
**Describe the bug**
Licenses section of maven pom is not defined

**To Reproduce**
Steps to reproduce the behavior:
1. Go to https://bintray.com/ekito/koin/download_file?file_path=org%2Fkoin%2Fkoin-core%2F2.0.1%2Fkoin-core-2.0.1.pom
2. Open pom file in text editor
3. See missing licenses section

**Expected behavior**
Licenses section should be defined in the .pom file for this dependency e.g.
```
<licenses>
    <license>
        <name>The Apache Software License, Version 2.0</name>
        <url>http://www.apache.org/licenses/LICENSE-2.0.txt</url>
        <distribution>repo</distribution>
    </license>
</licenses>
```
**Koin project used and used version (please complete the following information):**
koin-core version 2.0.1

**Describe the bug**
I am using -
`implementation "org.koin:koin-androidx-viewmodel:2.1.0-alpha-3"`

In my modules, I declare it as -
`private val viewModels = module {
        viewModel { (handle: SavedStateHandle) -> HomeViewModel(handle, get()) }
    }`

I create my `HomeFragment` inside `onCreate()` of `MainActivity` when `savedInstanceState == null`.

In my `HomeFragment` I inject my viewModel like this -

`private val homeViewModel: HomeViewModel by viewModel {
        parametersOf(
            Bundle(),
            "homeViewModel"
        )
    }`

And in `HomeFragment`, inside `onViewCreated()` I observe the changes in livedata -

`homeViewModel.showResults().observe(this, Observer {
            ....
        })`

When the screen is rotated to landscape, the `onCreate()` of `MainActivity` is called again and the  fragment is newly created and the viewModel instance in the fragment is gone.

Is it not possible for the viewmodel instance to be retained even after screen rotation change?

**Describe the bug**
App crashes when I try to inject dependencies via the fragment constructor with Koin `fragmentFactory` and JetPack navigation component.

**To Reproduce**
1. Use JetPack navigation component to create a "single-activity" app.
2. Create a fragment inside the navigation graph.
3. Inject any dependency into the fragment's constructor with Koin `fragmentFactory`.
4. App crashes when the navigation component tries to inflate the fragment. The following is the error log.

```
2020-01-08 15:02:30.459 27978-27978/com.example.koinfragmentfactoryissue E/AndroidRuntime: FATAL EXCEPTION: main
    Process: com.example.koinfragmentfactoryissue, PID: 27978
    java.lang.RuntimeException: Unable to start activity ComponentInfo{com.example.koinfragmentfactoryissue/com.example.koinfragmentfactoryissue.BaseActivity}: android.view.InflateException: Binary XML file line #22: Binary XML file line #22: Error inflating class fragment
        at android.app.ActivityThread.performLaunchActivity(ActivityThread.java:2781)
        at android.app.ActivityThread.handleLaunchActivity(ActivityThread.java:2859)
        at android.app.ActivityThread.-wrap11(Unknown Source:0)
        at android.app.ActivityThread$H.handleMessage(ActivityThread.java:1592)
        at android.os.Handler.dispatchMessage(Handler.java:106)
        at android.os.Looper.loop(Looper.java:164)
        at android.app.ActivityThread.main(ActivityThread.java:6518)
        at java.lang.reflect.Method.invoke(Native Method)
        at com.android.internal.os.RuntimeInit$MethodAndArgsCaller.run(RuntimeInit.java:438)
        at com.android.internal.os.ZygoteInit.main(ZygoteInit.java:807)
     Caused by: android.view.InflateException: Binary XML file line #22: Binary XML file line #22: Error inflating class fragment
     Caused by: android.view.InflateException: Binary XML file line #22: Error inflating class fragment
     Caused by: org.koin.core.error.NoBeanDefFoundException: No definition found for class:'androidx.navigation.fragment.NavHostFragment'. Check your definitions!
        at org.koin.core.scope.Scope.throwDefinitionNotFound(Scope.kt:245)
        at org.koin.core.scope.Scope.resolveInstance(Scope.kt:219)
        at org.koin.core.scope.Scope.get(Scope.kt:176)
        at org.koin.core.Koin.get(Koin.kt:113)
        at org.koin.core.Koin.get$default(Koin.kt:112)
        at org.koin.androidx.fragment.android.KoinFragmentFactory.instantiate(KoinFragmentFactory.kt:16)
        at androidx.fragment.app.FragmentLayoutInflaterFactory.onCreateView(FragmentLayoutInflaterFactory.java:97)
        at androidx.fragment.app.FragmentController.onCreateView(FragmentController.java:135)
        at androidx.fragment.app.FragmentActivity.dispatchFragmentsOnCreateView(FragmentActivity.java:356)
        at androidx.fragment.app.FragmentActivity.onCreateView(FragmentActivity.java:335)
        at android.view.LayoutInflater.createViewFromTag(LayoutInflater.java:780)
        at android.view.LayoutInflater.createViewFromTag(LayoutInflater.java:730)
        at android.view.LayoutInflater.rInflate(LayoutInflater.java:863)
        at android.view.LayoutInflater.rInflateChildren(LayoutInflater.java:824)
        at android.view.LayoutInflater.inflate(LayoutInflater.java:515)
        at android.view.LayoutInflater.inflate(LayoutInflater.java:423)
        at android.view.LayoutInflater.inflate(LayoutInflater.java:374)
        at androidx.appcompat.app.AppCompatDelegateImpl.setContentView(AppCompatDelegateImpl.java:555)
        at androidx.appcompat.app.AppCompatActivity.setContentView(AppCompatActivity.java:161)
        at com.example.koinfragmentfactoryissue.BaseActivity.onCreate(BaseActivity.kt:16)
        at android.app.Activity.performCreate(Activity.java:7023)
        at android.app.Activity.performCreate(Activity.java:7014)
        at android.app.Instrumentation.callActivityOnCreate(Instrumentation.java:1215)
        at android.app.ActivityThread.performLaunchActivity(ActivityThread.java:2734)
        at android.app.ActivityThread.handleLaunchActivity(ActivityThread.java:2859)
        at android.app.ActivityThread.-wrap11(Unknown Source:0)
        at android.app.ActivityThread$H.handleMessage(ActivityThread.java:1592)
        at android.os.Handler.dispatchMessage(Handler.java:106)
        at android.os.Looper.loop(Looper.java:164)
        at android.app.ActivityThread.main(ActivityThread.java:6518)
        at java.lang.reflect.Method.invoke(Native Method)
        at com.android.internal.os.RuntimeInit$MethodAndArgsCaller.run(RuntimeInit.java:438)
        at com.android.internal.os.ZygoteInit.main(ZygoteInit.java:807)
```

The following are some example codes.

``` kotlin
// BaseApplication.kt
class BaseApplication : Application() {
    val appModule = module {
        single { MyApi() }
        fragment { MainFragment(get()) }
    }
    override fun onCreate() {
        super.onCreate()
        startKoin {
            androidLogger()
            androidContext(this@BaseApplication)
            fragmentFactory()
            modules(appModule)
        }
    }
}
```

``` kotlin
// BaseActivity.kt
class BaseActivity : AppCompatActivity() {
    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setupKoinFragmentFactory()
        setContentView(R.layout.activity_base)
        setSupportActionBar(toolbar)
        val navController = findNavController(R.id.nav_host_fragment)
        val appBarConfiguration = AppBarConfiguration(navController.graph)
        toolbar.setupWithNavController(navController, appBarConfiguration)
    }
}
```

``` kotlin
// MainFragment.kt
class MainFragment(private val myApi: MyApi) : Fragment() {
    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        myApi.hello()
    }
    override fun onCreateView(
        inflater: LayoutInflater,
        container: ViewGroup?,
        savedInstanceState: Bundle?
    ): View? {
        return inflater.inflate(R.layout.fragment_main, container, false)
    }
}
```

``` kotlin
// MyApi.kt
private const val TAG = "MyApi"
class MyApi {
    fun hello() {
        Log.i(TAG, "hello")
    }
}
```

**Expected behavior**
The fragment should be successfully inflated with `MyApi` injected.

**Koin project used and used version (please complete the following information):**
`org.koin:koin-android:2.1.0-alpha-10`
`org.koin:koin-androidx-fragment:2.1.0-alpha-10`
**Koin Version used : 2.1.0-alpha-8**

I have a FeatureActivity that hosts two Fragments 1) `FirstFragment` and 2) `SecondFragment`

My Module looks like this

```
val featureModule = module {

    scope<FeatureActivity> {

        // FeatureDao
        scoped {
            val appDatabase: AppDatabase = get()
            appDatabase.featureDao()
        }

        scope(named(FirstFragment.SCOPE_ID)) {
            scoped { FirstFragmentRepository(get()) }
            viewModel { FirstFragmentViewModel(get()) } // needs FeatureDao
            scoped { FirstFragmentAdapter(get()) }
        }

        scope(named(SecondFragment.SCOPE_ID)) {
            scoped { SecondFragmentRepository(get()) }
            viewModel { SecondFragmentViewModel(get()) } // needs FeatureDao
            scoped { SecondFragmentAdapter(get()) }
        }

    }
```

With <FeatureActivity> scope, I want to restrict access to `FirstFragmentRepository`, `FirstFragmentViewModel`etc. to FirstFragment alone and `SecondFragmentRepository`, `SecondFragmentViewModel`etc. to SecondFragment alone.

**Question 1:** However, my ViewModels need FeatureDao to be injected. How do I access `FeatureDao`, given it's a part of parent scope [ FeatureActivity scope]? `FeatureDao` is in ActivityScope because it is necessary for both `FirstFragment` and `SecondFragment`

My Activity looks like this

```
class FeatureActivity : AppCompatActivity() {

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
         loadKoinModules(featureModule)
    }

    override fun onDestroy() {
        super.onDestroy()
        unloadKoinModules(featureModule)
    }

}
```

and my FirstFragment looks like this

```
class FirstFragment : Fragment() {

    companion object{
        const val SCOPE_ID = "FirstFragment"
    }

    val scope = getKoin().getOrCreateScope(SCOPE_ID, named(SCOPE_ID))
    val viewModel   by lazy {  scope.get<FirstFragmentViewModel>()}
    val adapter  by lazy { scope.get<FirstFragmentAdapter>() }

}

```

When I do this `getKoin().getOrCreateScope(SCOPE_ID, named(SCOPE_ID))`, the app crashes

```
Caused by: org.koin.core.error.NoScopeDefFoundException: No Scope Definition found for qualifer 'FirstFragment'
        at org.koin.core.registry.ScopeRegistry.createScope(ScopeRegistry.kt:128)
        at org.koin.core.Koin.createScope(Koin.kt:181)
        at org.koin.core.Koin.getOrCreateScope(Koin.kt:203)
        at com.temp.testkoin.FirstFragment.<init>(FirstFragment.kt:24)
```

However, if I use `val scope = getKoin().getScopeOrNull(SCOPE_ID)`, scope is set to null.

I went through a few questions on this forum and none of them are similar to what I want to achieve.

 - **Question 2:** My Scopes are already created. Why then does `getScopeOrNull()` return null?
 - **Question 3:** I even tried doing this and `getScopeOrNull()` still returns null?

```
val featureModule = module {

    scope<FeatureActivity> {

        // FeatureDao
        scope(named("featureDao")) {
            scoped {
                val appDatabase: AppDatabase = get()
                appDatabase.featureDao()
            }
        }

        scope(named(FirstFragment.SCOPE_ID)) {
            scoped { FirstFragmentRepository(get()) }
            viewModel { FirstFragmentViewModel(getScope("featureDao").get()) }
            scoped { FirstFragmentAdapter(get()) }
        }

       ...
       ...

    }
```
 - **Question 4:** What's the right way to get a handle on my scope & inject my dependencies properly?
 - **Question 5:** Are scopes stable? Removing nested scopes `scope(named(FirstFragment.SCOPE_ID))` and `scope(named(SecondFragment.SCOPE_ID))` gets it going. Works as expected. However, accessing a Bean from another Scope in a given Scope isn't yet supported or so it seems. No matter how much I try, it keeps complaining `org.koin.core.error.NoBeanDefFoundException: No definition found for class`
**Describe the bug**
While getting instance via factory in a root scope, the factory called only once per each get. But when factory defined in a root scope and got in a custom scope, that factory called twice per each get, for a custom scope and for a root scope.

**To Reproduce**
```
val fooModule = module {
    factory { "Some string" }  // called twice for each scope ("foo" and root scope)
    scope(named="foo") {
        scoped {
            val someString: String = get()  // called only once
            Foo(someString)
        }
    }
}
```
**Expected behavior**
I expect factory called only once.

**Koin project used and used version (please complete the following information):**
`koin-core version 2.1.0-alpha-8`
`koin-androidx-scope version 2.1.0-alpha-8`

This is idea for solution of multi module Android app. 
If Android have these modules:
:core
:feature:login
:feature:market

then :core modul can have global koin and every :feature module can have own koin module binded with parent koin from :core. Parent koin contains shared instances (singletons) as OkHttp and Retrofit.


**For injecting in none activity or fragment we use KoinComponent.**

When i use this :

```
class MainClass(private val mContext:Context):KoinComponent {

    private val mMainPresenter:MainPresenter by inject()

    init {

        startKoin {
            androidContext(mContext)
            modules(listOf(
                apiModule,
                repositoryModule,
                dataBaseModule,
                presenterModule,
                viewModule
            ))
        }
    }
.

.

.
}
```

I faced with this error in run time:

```
e: Supertypes of the following classes cannot be resolved. Please make sure you have the required dependencies in the classpath:
    class de.netalic.mobiletoken.ui.MainFragment, unresolved supertypes: org.koin.core.KoinComponent


> Task :mobiletoken:bundleLibRuntimeDebug

FAILURE: Build failed with an exception.

* What went wrong:
Execution failed for task ':app:compileDebugKotlin'.
> Compilation error. See log for more details

* Try:
Run with --stacktrace option to get the stack trace. Run with --info or --debug option to get more log output. Run with --scan to get full insights.
```


My dependencies are:
```

    //Koin
    implementation "org.koin:koin-android:2.0.1" //i implemented just this
    implementation "org.koin:koin-core-ext:2.0.1"//I try to solve my problem with add these but these are not necessary 
    implementation "org.koin:koin-core:2.0.1"
    implementation "org.koin:koin-android-scope:2.0.1"
    implementation "org.koin:koin-android-ext:2.0.1"
```