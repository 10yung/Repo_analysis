I'm looking at if it's possible to have SSLH in transparent mode, while routing traffic to other LAN clients.

In order to run multiple services behind a single IPv4, I use an Apache reverse proxy with SNI and VirtualHosts. This works fine, but one service Windows Server 2012 R2 Remote Web Access/SSTP VPN (running on an IIS server), is limited behind an Apache reverse proxy. The SSTP VPN part doesn't work because Apache doesn't understand the SSTP data packets and it cannot handle them.

I put SSLH in front of Apache and Apache now runs on localhost. So the connection path is

SSLH -> Apache (local) -> VirtualHost > Reverse Proxy to LAN server

For Windows RWA/SSTP to work, I use an SNI rule to match the RWA/SSTP hostname and forward all traffic to the IIS server in the LAN, rather than going through Apache, because it causes issues. IIS can handle if the request is for the RWA https:// interface or if it's an SSTP VPN connection natively. This works fine without transparent mode.

When enabling transparent mode, Apache works, but traffic to the IIS server doesn't flow. This seems to be somewhat expected as the iptables example indicates it only works when SSLH and other protocols are running on the same server. However for IIS, this isn't the case.

It is most certainly routing related. I was wondering if anyone had success working with transparent mode when routing traffic to other LAN clients?

It looks like TPROXY is a possible avenue, but the example is Linux to Linux, can TPROXY work from Linux to Windows?
Hi,

I tried to set up sslh as described here:
http://rutschle.net/pipermail/sslh/2018-April/000674.html
What works:
- if I set transparent to false, and do NOT set up the the ip routing rules, I can connect to my httpd (as expected)
- if I set transparent to true, and do still NOT set up the ip routing rules, I can no longer connect (as expected, with transparency, the httpd should try to send to an address it can't reach, as far as I understand)
- if I set transparent to true, and DO set up the routing rules, connection works again (as expected)
  BUT in this case the access log of my httpd (nginx) still logs my local address (192.168.xxx.xxx) as the remote ip, even though wireshark shows TCP packets going from 127.0.0.2 to 2.247.xxx.xxx, which is the remote address I'm connecting from.
A similar thing happens on SSH. I can login via ssh to port 443 (through transparent sslh), but ssh shows my login coming from the local IP address again. Wireshark shows here that sshd sends its packets to 127.0.0.1.

I don't understand how this happens. And as the ip routing setup (or the iptables setup mentioned in the docs) only affect the outgoing packets from sshd/httpd, this behaviour is not due to me choosing ip rules vs iptables, right? So something goes wrong in sslh?

I have the same behaviour with sslh 1.18 from debian, and 1.20 from master branch (bae16ab29e).

First off, sslh is wonderful and works great. This is not a bug, more of a "How do I do this" sort of question as I don't quite understand how support is on over the email chain?

### End goal
I want to add a TURN server into the sslh.cfg file.

### What is happening right now
Per all the README's, I am suppose to add a REGEX from [this website](https://www.iana.org/assignments/tls-extensiontype-values/tls-extensiontype-values.xhtml#alpn-protocol-ids) that looks something like `0x73 0x74 0x75 0x6E 0x2E 0x74 0x75 0x72 0x6E` in order to forward the traffic to my [coturn](https://github.com/coturn/coturn) server. However, no idea how to make "matches" so that this gets turned on.

### What I've tried
This line in the sslh.cfg file:
```
{ name: "tls"; host: "localhost"; port: "5349"; alpn_protocols: [ "stun.turn" ]; log_level: 0;  tfo_ok: true },
```

Any thoughts or insights to regex (besides having my cat play on my keyboard to generate regex queries) in order to enable it for coturn would be greatly appreciated. Thanks in advance.
Hi,

I can't get working both OpenVPN and https in transparent mode.

SSLH is on a NGINX server (IP 1.1.1.1), and need to pass openvpn traffic to another server (2.2.2.2). https traffic goes on localhost.

Here's my configuration (I used root to debug) : 
DAEMON_OPTS="--user root --transparent --listen 1.1.1.1:8443 --openvpn 2.2.2.2:1194 --ssl 1.1.1.1:443 --pidfile /var/run/sslh/sslh.pid -v"

Here are the iptables / ip route configuration that I used : 

/sbin/iptables -t mangle -N SSLH
/sbin/iptables -t mangle -A OUTPUT --protocol tcp --out-interface eth0 --sport 1194 --jump SSLH
/sbin/iptables -t mangle -A OUTPUT --protocol tcp --out-interface eth0 --sport 443 --jump SSLH
/sbin/iptables -t mangle -A SSLH --jump MARK --set-mark 0x1
/sbin/iptables -t mangle -A SSLH --jump ACCEPT
ip rule add fwmark 0x1 lookup 100
ip route add local 0.0.0.0/0 dev lo table 100

Syslog extract : 
Sep 23 17:16:11 myserver sslh[494]: accepted fd 4
Sep 23 17:16:12 myserver sslh[494]: **** writing deferred on fd -1
Sep 23 17:16:12 myserver sslh[494]: probing for openvpn
Sep 23 17:16:12 myserver sslh[494]: connecting to 2.2.2.2:1194 family 2 len 16
Sep 23 17:17:15 myserver sslh[494]: forward to openvpn failed:connect: Connection timed out
Sep 23 17:17:15 myserver sslh[494]: connect: Connection timed out

SSL works fine.

When I remove --transparent from cmdline, openvpn works.

What am I missing ?

Thanks in advance !






Hello!
I have problem with sslh connection
Some http transfers return as chunked with errors.
I don't see something strange in logs 
What information to diagnose this?
Thank you!
Hello!
Can I use transparent connection only for some connections&
For example - http with transparent connection and ssh without
With the current master d78c810 (and conf2struct 1.0), I'm getting a segmentation fault when I run:
`sslh --foreground -p [::]:443 -p 0.0.0.0:443 --tls 127.0.0.1:8443 --ssh 127.0.0.1:22`

It's very reproducible; hopefully you can easily see this issue as well.

Thanks!
Please reopen. We can reproduce exactly the same issue on our production environment and it seems also to affect connections that come from normal browsers. 

Key factors to reproduce the issue: 
- the issue gets active when we have about ~14,000 connections running through sslh ... if there are fewer connections there are no problems
- but even when the issue is active some requests come through, our curl based nagios checks are constantly flapping then
- it not only affects curl based requests, but also our webapp that is running https and wss through the sslh
- the issue seems to be correlated to our upgrade from openssl 1.1.0 to openssl 1.1.1 ... one day later the issue started to appear

_Originally posted by @rrschmidt in https://github.com/yrutschle/sslh/issues/189#issuecomment-511708844_
This change presents a new configuration style for sslh with systemd unit files. Where previously, the global sslh configuration would be in `/etc/sslh.cfg`, the new configuration layout is `/etc/sslh/*.cfg`. 

For each file located in `/etc/sslh/` ending in `.cfg`, the systemd generator will automatically generate the accompanying socket and drop-in configurations. Individual system service files for each configuration are not required and instead are covered by a single service template `sslh@.sercice` which takes the name of the desired sslh configuration as a target. The new system follows the structure:
- Config File: `/etc/sslh/example.cfg`
- Systemd Socket: `sslh@example.socket`
- Systemd Forking Service: `sslh@example.service`
- Systemd Select Service: `sslh-select@example.service`
- Systemd Drop-In Configuration: 
   `{SYSTEMD_RUN_DIR}/{sslh, sslh-select}@example.service.d/example.conf`

Note: `{SYSTEMD_RUN_DIR}` is provided to the `systemd-sslh-generator` binary when invoked by systemd and is thus portable to multiple distributions.

Generator Changes:
- Added Early systemd generator error logging through `/dev/kmsg`
- Fixed memory and file descriptor leaks
- Added a global systemd service for `sslh-select` 
- Added systemd-drop-in configurations to prevent the system from running both sslh forking and select units simultaneously, and to associate a configuration's unit with its respective systemd socket configuration
So here is a working solution for the previous transparent rules if you are routing to localhost like this

```
sslh --listen 0.0.0.0:443 --ssh localhost:22 ...
```
```
listen:
(
    { host: "0.0.0.0"; port: "443"; keepalive: true; }
);

protocols:
(
     { name: "ssh"; service: "ssh"; host: "localhost"; port: "22"; fork: true; }
     ...
);
```

Say your servers interface ip is 192.168.0.10 and you have this rule:
> iptables -t mangle -A OUTPUT -p tcp -o eth0 --sport 22 -j SSLH

tcpdump now shows outgoing LAN IP addresses from ssh server on port 22 on the **loopback** interface:
192.168.0.10.22 > 12.34.56.78.54321

since sslh and the ssh server communicates via localhost / 127.0.0.1 means that packages from 192.168.0.10 is to someone who connected directly towards port 22 and not 443, you can just apply another rule which prevents them from being routed towards the loopback interface

> iptables -t mangle -A OUTPUT -p tcp -o eth0 -s 192.168.0.10 --sport 22 -j ACCEPT
> iptables -t mangle -A OUTPUT -p tcp -o eth0 --sport 22 -j SSLH

_Originally posted by @Stenudd in https://github.com/yrutschle/sslh/issues/39#issuecomment-475829711_