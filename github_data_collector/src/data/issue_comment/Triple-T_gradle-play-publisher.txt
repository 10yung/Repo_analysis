Root issue for stuff that needs to happen when AGP v4.0 is the new minimum.
I've been bashing my head against screen for some time - I followed instructions from your [doc](https://github.com/Triple-T/gradle-play-publisher/#service-account), but my service account would just not show up in my google dev console.

Then I started googling and found this stackoveflow question:
https://stackoverflow.com/questions/50208046/service-account-doesnt-show-up-in-google-play-console-after-creation
I set owner permission (or whatever was required for the access here) and suddenly it appreared.

Why do you explicitly say, that I should not select any roles? Is it outdated or am I missing something? It definitely confused me and needs some clarifications.
This options leads to unexpected behavior. If a user has a play config like this `play.promoteTrack = "foo"`, then the `--track` option won't actually do anything since we'll see that a `promoteTrack` has been specified. We could redirect the `--track` option to the `--promote-track` option, but that could lead to more confusion so might as well keep things explicit and just get rid of the option altogether.
Root issue for stuff that needs to happen when we bump the plugin to v3.0.
There have been numerous regressions that should have been caught by tests.

Tests to add:
- [x] Unit tests for Validation.kt methods
- [x] Unit tests for Plugins.kt
- [x] Unit tests for logic in CliOptions.kt
- [x] Unit tests + integration tests for PlayWorkers.kt
- [x] Integration tests Agp.kt
- [x] Integration tests with and without a mapping file
- [x] Integration tests validating customDir artifact fetching behavior
- [ ] Integration tests for each task validating that it's publishing stuff
- [ ] Integration tests validating the correct extension was picked
- [ ] Remove all Groovy
Root issue for stuff that needs to happen when AGP v3.6 is the new minimum.
Currently, we let devs put whatever they want in `playConfigs`, even if it's something the plugin never looks at. This is bad since it requires guesswork to know if you've got the right flavor/variant/etc.
https://github.com/Triple-T/gradle-play-publisher/blob/132c119d179f185f4742b5b16785d4aec65a4827/plugin/src/main/kotlin/com/github/triplet/gradle/play/tasks/internal/EditTaskBase.kt

See https://github.com/gradle/gradle/issues/10497#issuecomment-529887960

This will let us get rid of `dependsOn(genEditTask)`.
Currently, if all release variants are disabled, the lifecycle publishing tasks will run and succeed, but nothing will actually happen. Instead, we should:
- Wrap each lifecycle task creator in a lazy that gets invoked only when a dependent task needs it. That way, the build will fail if someone tries to run an empty task (because it won't exist).
- Keep track of every task we've created with some static set that gets reset after every build, keep track of whether or not any release variants have been configured. If none and the startParameter.taskNames contains one of our tasks, log an error. This is needed so we don't log an error on every single build, only those intended to use GPP. Also, this solution isn't perfect since someone could create a wrapper task with us a dependency and we wouldn't know, but whatevs.
My project has a few flavors. Each flavor has its own app ID.
I wanted to publish pre-built APKs per each flavor. After reading the documentation section about [Uploading a pre-existing artifact](https://github.com/Triple-T/gradle-play-publisher#uploading-a-pre-existing-artifact) I understood that I need to execute the following command per each flavor's apk:
`./gradlew publishApk --artifact-dir path/to/flavor/apk`

But executing the command above actually tried to publish that specific apk to all flavors!
I could see that the flavor specific publishing task, i.e. `publishApkFlavorBuildType`, was executed where the first one which matched the app ID of the provided apk was successful while the rest obviously failed.

I decided to try specifying the flavor specific `publishApk` task with `--artifact-dir` option, e.g.: `./gradlew publishApkFlavorBuildType --artifact-dir path/to/flavor/apk` and ðŸŽ‰ it worked! 

I'm not sure if this is by design or a bug. If it's by design, please make the documentation clearer regarding flavor publishing.

Thank you for your awesome work! ðŸ˜„ 