
I have made the following changes :
 - **Renamed capital city of Kazakhstan from Astana to Nur-Sultan**
    - The capital city was renamed from Astana to Nur-Sultan in March 2019. [source](https://en.wikipedia.org/wiki/Nur-Sultan)
 - **Changed capital city of Burundi from Bujumbura to Gitega**
    - The capital city of Burundi has recently been moved. [source](https://en.wikipedia.org/wiki/Burundi)
 - **Changed demonym of United States Minor Outlying Islands to American Islander**
    - According to Wikipedia, the demonym of UMI is "American Islander". [source](https://en.wikipedia.org/wiki/United_States_Minor_Outlying_Islands)
 - **Added South African rand as a currency to Eswatini.**
    - [source](https://en.wikipedia.org/wiki/Eswatini)
I have a use case for England, Scotland, Wales & Northern Ireland to be identified individually rather than blanket 'GB' attribution.

I note that this was mentioned quite a while ago in https://github.com/mledoze/countries/issues/6#issuecomment-27485840 but can't see there's been any discussion since...

@mledoze I'd be happy to contribute. Sounds like there were some hierarchy changes suggested for implementation, were they started? Did you have any thoughts on this specific issue? Could we put them at the top-level and retain shared information across the 4?
There are problems with both South Sudan country map and Sudan country map. The South Sudan map is empty: https://github.com/mledoze/countries/blob/master/data/ssd.geo.json

The Sudan country map is not empty, but it includes South Sudan, which is obviously wrong as well: https://github.com/mledoze/countries/blob/master/data/sdn.geo.json

What can be done about this? Are there known editors that I can use to edit Sudan GEO JSON file to make South Sudan out of it?

Support SQL insert and updated scripts for countries and translations of country names.
Added two converters for SQL inserts and updates
HI, thanks for this project.
I´m trying to load the country boundaries in Blender with Python.
I have one function to translate the lat and lon to xyz :

```
    self.EARTH = 2

    def simpleCoorToXyz(  self, _lat, _lon, _r ):

        tLon = _lon * pi/180
        tLat = _lat * pi/180

        x = cos( tLat ) * cos( tLon ) * self.EARTH
        y = cos( tLat ) * sin( tLon ) * self.EARTH
        z = sin( tLat ) * self.EARTH

        return [ x, y, z ]
```

The proble is that in some sides the countris will be deformed.
Any idea? 

![blender-006-gml-a-0000](https://user-images.githubusercontent.com/20370607/44998256-55027a80-afb4-11e8-837b-b75286b0b6c4.jpg)

![blender-006-gml-a-0002](https://user-images.githubusercontent.com/20370607/44998260-5a5fc500-afb4-11e8-8a97-d1cff2c224c6.jpg)

Thanks again


This pull request refactors the build command. It fixes some problems in the code, especially the fact that the class `AbstractConverter` did too much: the conversion and saving the files to disk.

I also added a factory to create the converters in order to remove the `converters` variables in the class `ExportCommand`.

This is a work in progress. Your comments are welcome! 

To do:

- [x] add missing translations (see below)
- [x] remove "cym" translations because they are incomplete (only 62 countries have it)
- [x] reorder translations alphabetically 
- [ ] fix "suffixes" column in CSV file not being generated as "idd.suffixes"

List of missing translations
- [x] China (CHN): chinese (zho)
- [x] Curaçao (CUW): croatian (hrv), japan (jpn)
- [x] Hong Kong (HKG): chinese (zho)
- [x] Kosovo (UNK): japan (jpn)
- [x] Macau (MAC): chinese (zho)
- [x] Singapore (SGP): chinese (zho)
- [x] Taiwan (TWN): chinese (zho)
Hello there!
We translated the countries in Arabic and Persian with the help of @Abeerm171.
All the strings are encoded in UTF-8.

Thanks
**Few things worth mentioning:**
- Followed the three-letter ISO 639-3 language code in adding Arabic.
- Escaped all Arabic characters.
