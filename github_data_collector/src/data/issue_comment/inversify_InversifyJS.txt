<!--- Provide a general summary of the issue in the Title above -->

Hi, I am trying to get the scope of the service so I can register it (as a proxy) into another module.

## Expected Behavior
<!--- If you're describing a bug, tell us what should happen -->
<!--- If you're suggesting a change/improvement, tell us how it should work -->
There should be an option to get a scope of the injected service, which will help me to bind it into another container with the same scope.

## Current Behavior
<!--- If describing a bug, tell us what happens instead of the expected behavior -->
<!--- If suggesting a change/improvement, explain the difference from current behavior -->
You have to record scopes somewhere.

## Possible Solution
<!--- Not obligatory, but suggest a fix/reason for the bug, -->
<!--- or ideas how to implement the addition or change -->
add `getScope()` method or to inherit the scope of whatever it is resolving.

## Context
<!--- How has this issue affected you? What are you trying to accomplish? -->
<!--- Providing context helps us come up with a solution that is most useful in the real world -->

Example:
```ts
const cont = new Container();

@injectable()
class A {
  constructor(
    @inject('date') private readonly date: any,
  ) { }

  show() {
    console.log(this.date);
  }
}
@injectable()
class B {
  constructor(
    @inject('date') private readonly date: any,
  ) { }

  show() {
    console.log(this.date);
  }
}

@injectable()
class C {
  constructor(
    private readonly a: A,
    private readonly b: B,
  ) {
    this.a.show();
    this.b.show();
  }
}

cont.bind('dateproxy').toDynamicValue(() => Math.random()).inRequestScope();
cont.bind('date').toDynamicValue(ctx => ctx.container.get('dateproxy')).inRequestScope(); // I am forced to guess which scope I have to use here.

cont.bind(A).toSelf().inRequestScope();
cont.bind(B).toSelf().inRequestScope();
cont.bind(C).toSelf().inRequestScope();

cont.get(C); // expect to log same values
cont.get(C); // expect to log same values but different ones from previous

/**
  example output (which is right):

  0.7445851333757381
  0.7445851333757381

  0.3560601971708015
  0.3560601971708015
*/
```
If I change the `date` binding's scope into something else, then I get either the same values all the time or different ones for each call (TRANSIENT/SINGLETON).

The real-world use case would be that I am trying to write an angular-like modular system that requires imports to be handled. Every module has a container inside and when imported, it should bind a `proxy` accessor which resolves a class from the imported container. 

E.g. ModuleA imports ModuleB (both of them have Container inside) and ModuleB has providers. Let's say, ServiceA. When ModuleA imports ModuleB, ServiceA is registered into ModuleB's container and I need it to be also accessible in ModuleA.

## Your Environment
<!--- Include as many relevant details about the environment you experienced the bug in -->
* Version used: 5.0.1
* Environment name and version: Node10
* Operating System and version (desktop or mobile): Desktop
<!--- Provide a general summary of the issue in the Title above -->
General Note on my tech-stack: I have an application composed of Node.js - Express- Inversifyjs - Typescript

I have a modular structure on my express-routes on seperate files. Now when I try to inject my database-connector class on one of the routes classes, I get the error: ` TypeError: Cannot read property 'mongoDBClient' of undefined`
## Expected Behavior
<!--- If you're describing a bug, tell us what should happen -->
My expected behaviour should be to normally inject a class into other classes, if i take into consideration that my inversify-config is setted properly.

## Current Behavior
<!--- If describing a bug, tell us what happens instead of the expected behavior -->
Inversify does not inject my class properly. Node detects injected class as `undefined`.

## Steps to Reproduce (for bug)
<!--- Provide a link to a live example, or an unambiguous set of steps to -->
<!--- reproduce this bug. Include code to reproduce, if relevant -->
### inversify config
```
import 'reflect-metadata';
...

const dependencyContainer = new Container();
dependencyContainer.bind<Object>(TYPES.ENVIRONMENTAL_CONFIG).toFactory(
    () => (context: interfaces.Context) => context ? CONFIG_DEVELOPMENT : CONFIG_PRODUCTION);
dependencyContainer.bind<AbstractRoutes>(TYPES.ABSTRACT_ROUTES).to(AuthRoutes).inTransientScope();
dependencyContainer.bind<AbstractRoutes>(TYPES.ABSTRACT_ROUTES).to(ApiRoutes).inTransientScope();
dependencyContainer.bind<MongoDBClient>(TYPES.MONGO_DB_CLIENT).to(MongoDBClient).inSingletonScope();
dependencyContainer.bind<CredentialHelper>(TYPES.HASH_GENERATOR).to(CredentialHelper).inSingletonScope();
dependencyContainer.bind<EmailCreator>(TYPES.EMAIL_CREATOR).to(EmailCreator).inSingletonScope();
dependencyContainer.bind<Express>(TYPES.EXPRESS).to(Express).inSingletonScope();

export default dependencyContainer;
```
### entry-point file
```
import dependencyContainer from './di-config/inversify.config';
import MongoDBClient from './modules/db/mongo-db-client';
import Express from './modules/server/express';
import {TYPES} from './di-config/types';

const app = dependencyContainer.get<Express>(TYPES.EXPRESS);

(async () => app.start())();
```
### express.file
```
@injectable()
export default class Express {

    private static readonly PORT: any = process.env.PORT;
    public app: express.Application;
    public server: Http.Server;
    private MongoStore = connectStore(session);
    private readonly environmentalProps: any;

    constructor(
        @inject(TYPES.MONGO_DB_CLIENT) private mongoDBClient: MongoDBClient,
        @inject(TYPES.ENVIRONMENTAL_CONFIG) private environmentFactory: Function,
        @multiInject(TYPES.ABSTRACT_ROUTES) private routeManager: AbstractRoutes[]
    ) {
        this.app = express();
        this.server = new Http.Server(this.app);
        this.environmentalProps = this.environmentFactory(isProduction);
    }

    public start() {
        return this.mongoDBClient.connect()
            .then(() => this.initServer())
            .then(console.log);
    }

    private async initServer() {
        this.createMiddleware();
        this.assignRouteEndpoints();
        return new Promise((resolve) => this.server.listen(Express.PORT, () => resolve(`Server listens on Port ${Express.PORT}`)));
    }

    private createMiddleware() {
        ...
        this.app.use(express.static(joinDir(this.environmentalProps.PATH_TO_STATIC_FILES)));
    }

    private assignRouteEndpoints() {
        this.routeManager.map((route: AbstractRoutes) => this.app.use(route.ROUTE_PARAMS, route.getRoutes()));
    }
}
```

### abstract route class
```
@injectable()
export default abstract class AbstractRoutes {
    abstract ROUTE_PARAMS: string;
    public router = express.Router();

    abstract createEndpoints(): void;

    public getRoutes() {
        this.createEndpoints();
        return this.router;
    }
}
```
### one of the route files
#### Error is thrown here
```
@injectable()
export default class AuthRoutes extends AbstractRoutes {

    public ROUTE_PARAMS: string = '/auth';

    constructor(@inject(TYPES.MONGO_DB_CLIENT) public mongoDBClient: MongoDBClient,
                @inject(TYPES.EMAIL_CREATOR) public emailCreator: EmailCreator) {
        super();
        console.log(mongoDBClient); // <== is defined
        console.log(mongoDBClient.connectionManager); // <== some property is undefined
    }

    public async checkLoggedIn(request: any, response: any) {
        const sessionId = request.cookies.sid;
        const uid = request.session?.user?.uid;
        console.log(this.mongoDBClient); // <== crashes here
        response.status(200).send({foo: 'bar'})
    }
```

## Context
The error is thrown in my route file in the `checkdLogggedIn` method. Normally i should be able to import the mongoDBClient class. Be aware that i import the mongoDBClient also in the parent Express class.
<!--- How has this issue affected you? What are you trying to accomplish? -->
<!--- Providing context helps us come up with a solution that is most useful in the real world -->

## Your Environment
Versions:

- Node: 12.13.0
- Inversifyjs: 5.0.1
- Reflect-metadata: 0.1.13
- Typescript: 3.5.3

# Stack trace
```
(node:7480) UnhandledPromiseRejectionWarning: TypeError: Cannot read property 'mongoDBClient' of undefined
    at /home/marco/WebstormProjects/help-educate/backend/src/modules/server/routes/auth-routes.ts:24:26
    at step (/home/marco/WebstormProjects/help-educate/backend/src/modules/server/routes/auth-routes.ts:58:23)
    at Object.next (/home/marco/WebstormProjects/help-educate/backend/src/modules/server/routes/auth-routes.ts:39:53)
    at /home/marco/WebstormProjects/help-educate/backend/src/modules/server/routes/auth-routes.ts:33:71
    at new Promise (<anonymous>)
    at __awaiter (/home/marco/WebstormProjects/help-educate/backend/src/modules/server/routes/auth-routes.ts:29:12)
    at AuthRoutes.checkLoggedIn (/home/marco/WebstormProjects/help-educate/backend/src/modules/server/routes/auth-routes.ts:86:16)
    at Layer.handle [as handle_request] (/home/marco/WebstormProjects/help-educate/backend/node_modules/express/lib/router/layer.js:95:5)
    at next (/home/marco/WebstormProjects/help-educate/backend/node_modules/express/lib/router/route.js:137:13)
    at Route.dispatch (/home/marco/WebstormProjects/help-educate/backend/node_modules/express/lib/router/route.js:112:3)
(node:7480) UnhandledPromiseRejectionWarning: Unhandled promise rejection. This error originated either by throwing inside of an async function without a catch block, or by rejecting a promise which was not handled with .catch(). (rejection id: 1)
(node:7480) [DEP0018] DeprecationWarning: Unhandled promise rejections are deprecated. In the future, promise rejections that are not handled will terminate the Node.js process with a non-zero exit code.

```

<!--- Include stack trace -->
<!--- Provide a general summary of the issue in the Title above -->
I want to use contextual binding in my inversify-express application. I have a problem using contextual injection. Here is a minimal example. Suppose we have the following interfaces and classes

```javascript
export type AuthenticationParams = {
    userId: string,
}

export interface NextInteractor<T>{
    execute(params: T): void;
}

@injectable()
export class AuthenticationInteractor<T extends AuthenticationParams>{
    constructor(@inject(TYPES.NEXT_INTERACTOR) private nextInteractor: NextInteractor<T>){}

    execute(params: T){
        console.log(`continuing as user with userId ${params.userId}`);
        this.nextInteractor.execute(params);
    }
}
```
And theses are some classes implementing `NextInteractor`
```javascript
export type FirstParams = {
    userId: string
}

@injectable()
export class FirstInteractor implements NextInteractor<FirstParams>{
    execute(params: FirstParams) {
        console.log(`printing from first interactor ${params.userId}`)
    }
}


export type SecondParams = {
    userId: string,
    otherParam: string,
}

@injectable()
export class SecondInteractor implements NextInteractor<SecondParams>{
    execute(params: SecondParams) {
        console.log(`printing from second interactor, ${params.userId}, ${params.otherParam}`)
    }
}
```
And I use `AuthenticationInteractor` in the following file

```javascript
@controller('/first')
export class FirstInput {
    constructor(@inject(TYPES.AUTHENTICATION_INTERACTOR) private authInteractor: AuthenticationInteractor<FirstParams>) {}

    @httpGet('/')
    get(@queryParam('userId') userId: string) {
        this.authInteractor.execute({ userId });
        return 'first url';
    }
}

@controller('/second')
export class SecondInput {
    constructor(@inject(TYPES.AUTHENTICATION_INTERACTOR) private authInteractor: AuthenticationInteractor<SecondParams>) { }

    @httpGet('/')
    get(@queryParam('userId') userId: string, @queryParam('otherParam') otherParam: string) {
        this.authInteractor.execute({ userId, otherParam });
        return 'second url';
    }
}
```
My intention is to call `AuthenticationInteractor` as the first step in every controller and only then continuing to the main logic. I hoped to achieve this with contextual binding as follows
 ```javascript
container.bind<AuthenticationInteractor<any>>(TYPES.AUTHENTICATION_INTERACTOR).to(AuthenticationInteractor);

container.bind<NextInteractor<FirstParams>>(TYPES.NEXT_INTERACTOR).to(FirstInteractor).whenAnyAncestorIs(FirstInput);
container.bind<NextInteractor<SecondParams>>(TYPES.NEXT_INTERACTOR).to(SecondInteractor).whenAnyAncestorIs(SecondInput);
```
## Expected Behavior
<!--- If you're describing a bug, tell us what should happen -->
<!--- If you're suggesting a change/improvement, tell us how it should work -->
To bind nextInteractor to the correct one in each case
## Current Behavior
<!--- If describing a bug, tell us what happens instead of the expected behavior -->
<!--- If suggesting a change/improvement, explain the difference from current behavior -->
inversify returns this error
```
Error: Ambiguous match found for serviceIdentifier: Symbol(NEXT_INTERACTOR)
```
## Possible Solution
<!--- Not obligatory, but suggest a fix/reason for the bug, -->
<!--- or ideas how to implement the addition or change -->

## Steps to Reproduce (for bugs)
<!--- Provide a link to a live example, or an unambiguous set of steps to -->
<!--- reproduce this bug. Include code to reproduce, if relevant -->
1. clone https://gitlab.com/dadsetan.ali/inversify-express-contextual-binding-issue.git
2. npm i
3. npm start

## Context
<!--- How has this issue affected you? What are you trying to accomplish? -->
<!--- Providing context helps us come up with a solution that is most useful in the real world -->
In my real project, I am trying to create a single Class for All authentication logic. Authentication, Authorization, token refresh, etc.
## Your Environment
<!--- Include as many relevant details about the environment you experienced the bug in -->
* Version used:         "inversify": "5.0.1",
        "inversify-express-utils": "^6.3.2"
* Environment name and version: node 10.15.3
* Operating System and version: ubuntu 16.04
* Link to your project:  https://gitlab.com/dadsetan.ali/inversify-express-contextual-binding-issue.git
# Stack trace
<!--- Include stack trace -->
## Description
LazyServiceIdentifer where added at https://github.com/inversify/InversifyJS/pull/774 . But the PR only supported LazyServiceIdentifer in contruction injection and forgot to consider property injection. 

## Related Issue

fix https://github.com/inversify/InversifyJS/issues/944
fix https://github.com/inversify/InversifyJS/issues/865

## Types of changes

<!--- What types of changes does your code introduce? Put an `x` in all the boxes that apply: -->

- [x] Updated docs / Refactor code / Added a tests case (non-breaking change)
- [x] Bug fix (non-breaking change which fixes an issue)
- [ ] New feature (non-breaking change which adds functionality)
- [ ] Breaking change (fix or feature that would cause existing functionality to change)

## Checklist:

- [x] My code follows the code style of this project.
- [ ] My change requires a change to the documentation.
- [ ] I have updated the documentation accordingly.
- [x] I have read the **CONTRIBUTING** document.
- [x] I have added tests to cover my changes.
- [x] All new and existing tests passed.
- [ ] I have updated the changelog.

<!--- Provide a general summary of the issue in the Title above -->
The code for v3.4.1 that fixes a security vulnerability has been merged into the repo, it's just not deployed

## Expected Behavior
<!--- If you're describing a bug, tell us what should happen -->
<!--- If you're suggesting a change/improvement, tell us how it should work -->

## Current Behavior
<!--- If describing a bug, tell us what happens instead of the expected behavior -->
<!--- If suggesting a change/improvement, explain the difference from current behavior -->

## Possible Solution
<!--- Not obligatory, but suggest a fix/reason for the bug, -->
<!--- or ideas how to implement the addition or change -->

## Steps to Reproduce (for bugs)
<!--- Provide a link to a live example, or an unambiguous set of steps to -->
<!--- reproduce this bug. Include code to reproduce, if relevant -->
1.
2.
3.
4.

## Context
<!--- How has this issue affected you? What are you trying to accomplish? -->
<!--- Providing context helps us come up with a solution that is most useful in the real world -->

## Your Environment
<!--- Include as many relevant details about the environment you experienced the bug in -->
* Version used:
* Environment name and version (e.g. Chrome 39, node.js 5.4):
* Operating System and version (desktop or mobile):
* Link to your project:

# Stack trace
<!--- Include stack trace -->
Hi @remojansen 

Thank you for your wonderful IoC  library, we are leveraging this for our enterprise solutions microservices that are based on DDD. We have various modules encapsulating various aspects of domain driven design, but currently having challenge in making request context available across various container objects defined using this library. I do not want define every method with additional context parameter which is not elegant way. I was looking something similar to TLS in multi thread environment like .NET and Java where we access request specific information from current thread. Do you have anything available in this framework or any suggestion would be greatly appreciated.

I could see solutions like CLS that are based on async_hooks, but I couldnt get it working with TypeScript and more over looks like there are performance concerns on async_hooks and also being experimental, I am skeptical to use it.

***UPDATE***

Also I do not want any solution specific to express, because our services are reactive services based on event driven architecture. So our external points could be REST or events from middlewares like Kafka as well. 

## The devDependency [gulp-rename](https://github.com/hparra/gulp-rename) was updated from `1.4.0` to `2.0.0`.
This version is **not covered** by your **current version range**.

If you don’t accept this pull request, your project will work just like it did before. However, you might be missing out on a bunch of new features, fixes and/or performance improvements from the dependency update.

---

**Publisher:** [contra](https://www.npmjs.com/~contra)
**License:** MIT

[Find out more about this release](https://github.com/hparra/gulp-rename).

---

<details>
  <summary>FAQ and help</summary>

  There is a collection of [frequently asked questions](https://greenkeeper.io/faq.html). If those don’t help, you can always [ask the humans behind Greenkeeper](https://github.com/greenkeeperio/greenkeeper/issues/new).
</details>

---


Your [Greenkeeper](https://greenkeeper.io) bot :palm_tree:


<!--- Provide a general summary of the issue in the Title above -->

## Expected Behavior
<!--- If you're describing a bug, tell us what should happen -->
<!--- If you're suggesting a change/improvement, tell us how it should work -->

In the documentation I read that `tsconfig.json` should have

````
{
    "compilerOptions": {
        "target": "es5",
        "lib": ["es6"],
        "types": ["reflect-metadata"],
        "module": "commonjs",
        "moduleResolution": "node",
        "experimentalDecorators": true,
        "emitDecoratorMetadata": true
    }
}
````


## Current Behavior
<!--- If describing a bug, tell us what happens instead of the expected behavior -->
<!--- If suggesting a change/improvement, explain the difference from current behavior -->

However in my project I have

````
 "target": "es2018",    
    // "lib": [],      
  "types": ["node"],       
  "module": "commonjs",   
 // "moduleResolution": "node",   
"experimentalDecorators": true,
"emitDecoratorMetadata": true, 

````

And it's still working, so now I'm confused.




## Context
<!--- How has this issue affected you? What are you trying to accomplish? -->
<!--- Providing context helps us come up with a solution that is most useful in the real world -->

Could it be because I have just used a minimum portion of the library and I will find problems in the future? May it be due to my project being deployed as AWS lambda?


## Your Environment
<!--- Include as many relevant details about the environment you experienced the bug in -->
* Version used:
````

 "inversify": "^5.0.1",
    "reflect-metadata": "^0.1.13"
````
* Environment name and version (e.g. Chrome 39, node.js 5.4):
nodejs v10.16.3
* Operating System and version (desktop or mobile):
w10


Thanks,

I'm just getting into InversifyJS and I'm struggling to get my head around the concept of Express controllers.

Usually I write my code in such a fashion that the routing chain is executed step by step and the context of the request is incrementally stored inside the request object.

**`routes/index.ts`**
```javascript
router.use("/users", usersRouter);

export default router;
```

**`routes/users/index.ts`**
```javascript
router.use("/:userId", (req, res, next) => {
  let user = fakedSyncGetUserById(req.params.userId);

  req.context.user = user;

  next();
});

router.use("/:userId/posts", postsRouter);

router.get("/:userId", (req, res) => {
  res.status(200).json(req.context.user);
});
```

**`routes/users/posts.ts`**
```javascript
router.get("/", (req, res) => {
  let posts = fakeGetPostsByUser(req.context.user);

  res.status(200).json(posts);
});
```

This way I don't have to validate the user in the controller that manages the posts. How would this be achieved in a sane way using InversifyJS?

Another issue I couldn't find the answer to is the order routes are executed, such `/users/me` being executed before `/users/:userId` is evaluated.
I am facing an issue while working with inRequestScope with Inverisyfy. I am expecting that if i change the object first time when it is being created then this object should be injected everywhere in the application. I am adding and updating a traceId for this in my logger class. But when i am injecting logger class in my other classes then i am receiving undefined with traceId.
 
My problem statement and code is: 
Binding
```
container.bind<ILogService>(types.ILogService).to(LogService).inRequestScope();
```
Interface
```
export default interface ILogService {
    traceId: string;
    }

```
Implementation
```
@injectable()
export default class LogService implements ILogService {
    traceId: string;

    constructor(){
        console.log("Constructor called " + this.traceId);
    }
}

```

I am initializing my traceId in My Controller like this
```
let loggerservice = container.get<ILogService>(types.ILogService);
loggerservice.traceId = "Dummy Trace Id";
```

But when i inject same property in my other service classes it gives traceId as undefined.
