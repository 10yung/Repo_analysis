/**
 * AtomicMarkableReference则是将一个boolean值作是否有更改的标记，本质就是它的版本号只有两个，true和false，
 * 修改的时候在这两个版本号之间来回切换，这样做并不能解决ABA的问题，只是会降低ABA问题发生的几率而已
 * @author :  mazh
 * @date :  2020/1/17 14:41
 */
public class SolveABAByAtomicMarkableReference {
    private static AtomicMarkableReference atomicMarkableReference =  new AtomicMarkableReference(100,false);

    public static void main(String[] args)  {

        Thread refT1 = new Thread(() -> {
            try {
                TimeUnit.SECONDS.sleep(1);
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
            atomicMarkableReference.compareAndSet(100, 101, atomicMarkableReference.isMarked(), !atomicMarkableReference.isMarked());
            atomicMarkableReference.compareAndSet(101, 100, atomicMarkableReference.isMarked(), !atomicMarkableReference.isMarked());
        });

        Thread refT2 = new Thread(() -> {
            boolean marked = atomicMarkableReference.isMarked();
            try {
                TimeUnit.SECONDS.sleep(2);
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
            boolean c3 = atomicMarkableReference.compareAndSet(100, 101, marked, !marked);
            System.out.println(c3); // 返回true,实际应该返回false
        });

        refT1.start();
        refT2.start();
    }
}

个人理解是这样，不知是否正确？

原文说:在讲继承的时候我们就知道父类的私有属性和构造方法并不能被继承


实际上Java的继承说的是子类可以继承父类的所有属性和方法  父类中被private修饰的方法和属性 仅仅是被子类继承了 但是子类并不能使用 
基础知识
1、HTTP和RPC不是一个层面的东西，不能直接比较
2、RPC框架可以使用HTTP协议，也可以不使用HTTP协议；HTTP协议只是RPC框架可选择的一种通讯协议；rest/soap webservice也属于RPC框架，采用http协议通讯；
3、HTTP协议在应用层，传输层也是采用了TCP协议，TCP协议是固定的，大家都一样，不存在HTTP协议的TCP和RCP的TCP的区别；“http1.1协议的 TCP 报文包含太多在传输过程中可能无用的信息”应该修改为http1.1协议自身携带的报文内容太多；而且http1.1采用纯文本形式通讯，存在“队头堵塞”问题，因此效率低；http2采用二进制编码，头压缩，分帧多路复用等技术提高了通讯效率；
4、自定义的私有通讯协议（可以基于TCP、UDP，或基于谷歌最新的QUIC）可以避免HTTP协议自身的一些问题，从而提高通讯效率；

根据 https://www.javatt.com/p/47643

>JVM 中有三类常量池
1. 静态常量池（class 文件中的常量池）
2. 运行时常量池
3. 字符串常量池

他们再 JDK6~8 中分别位于不同的地方

> 在JDK6及之前的版本：
静态常量池在Class文件中。
运行时常量池在Perm Gen区(也就是方法区)中。（所谓的方法区是在Java堆的一个逻辑部分，为了与Java堆区别开来，也称其为非堆（Non-Heap），那么Perm Gen（永久代）区也被视为方法区的一种实现。）
字符串常量池在运行时常量池中。


>在JDK7版本：
静态常量池在Class文件中。
运行时常量池依然在Perm Gen区(也就是方法区)中。在JDK7版本中，永久代的转移工作就已经开始了，将譬如符号引用(Symbols)转移到了native heap；字面量(interned strings)转移到了java heap；类的静态变量(class statics)转移到了java heap。但是运行时常量池依然还存在，只是很多内容被转移，其只存着这些被转移的引用。网上流传的一些测试运行时常量池转移的方式或者代码，其实是对字符串常量池转移的测试。

>在JDK8版本：
静态常量池在Class文件中。
JVM已经将运行时常量池从方法区中移了出来，在Java 堆（Heap）中开辟了一块区域存放运行时常量池。同时永久代被移除，以元空间代替。元空间并不在虚拟机中，而是使用本地内存。因此，默认情况下，元空间的大小仅受本地内存限制。其主要用于存放一些元数据。
字符串常量池存在于Java堆中。

请问这三类常量池在 JDK6~8 中分别如何对应到 JVM 的内存模型中？
请问各位大佬，如果向某个仓库发起pr申请，必须当前已发起的pr申请被同意了之后，我才能再发起一个新的pr吗？
<img src="https://my-blog-to-use.oss-cn-beijing.aliyuncs.com/2019-7/put%E6%96%B9%E6%B3%95.png">
图中若key存在，直接覆盖其节点值，这时不应该将size加1吧？按照源码分析应该直接返回被覆盖之前的值吧？
就是关于JDK新特性那章节的接口默认方法中，有个地方使用了“//TODO通过匿名内部类方式访问接口”，这点我感觉容易导致歧义，因为这里我感觉好像是注释的感觉，但是按道理说TODO是表示程序中的代码还有部分任务没有完成，后面待解决的意思，作者觉得呢？
作者在5.3节中写到CyclicBarrier调用await方法计数加1，但是在jdk1.8下，我查看了代码,结果发现如下图所示。
![image](https://user-images.githubusercontent.com/7549337/70414317-b60cde00-1a94-11ea-9402-fd966f4c4d3d.png)
在jdk1.8中,CyclicBarrier调用的await方法会调用dowait方法,并且执行减一操作之后判断是否已经有指定数量的线程调用了await方法,然后为0则唤醒所有的线程,否则就阻塞。
不知道是作者笔误还是在jdk之后的版本这部分进行了修改。
刚学习到这，有几处问题实在理解不了，希望博主不吝赐教一下：
1、redlock 中的多个节点跟平时理解的redis的集群模式 是不是一回事呢？
2、各个节点之间是如何同步数据的呢？
