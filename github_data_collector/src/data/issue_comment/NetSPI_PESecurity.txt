Hi

Get-PESecurity is a great tool, and it works well to scan a wide variety of EXEs and DLLs...I have one EXE that fails to scan (hasplms.exe sentinel security license manger) with the error at line 592:

"Cannot find type [PE.IMAGE_SECTION_HEADER, Win32, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null]: make sure the assembly containing this type is loaded."

Is there anything that can be done about that? I can send the EXE to someone for analysis if that's helpful.

Thanks in advance :)

-Dave

Edit: this is on a Server 2008R2 Standard 64bit machine with PowerShell 2.0 in case that makes any difference.
Request to add support for stack protection (/GS) option - see https://msdn.microsoft.com/en-us/library/8dbf701c.aspx for more information
SafeSEH is reported False for resource-only DLLs. While it is technically valid, it just generates a noise in the reports as this can't be 'fixed' in the DLL itself. Resource-only DLLs contain no code, so they can't have safe Structured Exception Handlers.
PESecurity could skip such DLLs by checking whether they have non-0 entry point.
More info: https://docs.microsoft.com/en-us/cpp/build/creating-a-resource-only-dll?view=vs-2017
[IO.File]::ReadAllBytes will place entire file in memory.  On large files, this is a performance issue.
Get-AuthenticodeStatus is extremely slow on large files.  Added -SkipAuthenticode argument to skip checking authenticode.
It's not clear if this is related to Issue #13 or not, but on a Windows 7 system with PowerShell 4, I'm trying to do a recursive directory scan of C:\Program Files, and a couple of errors are emitted before PowerShell crashes:

![win7-pesecurity](https://user-images.githubusercontent.com/14325582/43112393-f2fbcbc2-8ec3-11e8-8942-ba741861d941.png)

It seems reasonable to do a scan of the executable code on an entire system.  To do this, I ran:
Get-PESecurity -Directory 'C:\' -Recursive > pesecurity.log

Eventually the script started throwing errors:

```
Exception calling "ReadAllBytes" with "1" argument(s): "Exception of type 'System.OutOfMemoryException' was thrown."
At C:\Users\test_user\Get-PESecurity.psm1:399 char:5
+     $FileByteArray = [IO.File]::ReadAllBytes($CurrentFile)
+     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    + CategoryInfo          : NotSpecified: (:) [], MethodInvocationException
    + FullyQualifiedErrorId : OutOfMemoryException
```

I'm not too keen on powershell to know where the problem is, but just looking at the memory usage of PowerShell when doing a recursive directory scan, it is mostly only increasing.  I'd think that ideally as it crawls through the directories it analyzes a binary one at a time, outputting the results and releasing any allocated memory/objects for each one.   The current behavior never actually gets to the point of outputting any results because it runs out of memory before it gets to that point.
I am running PESecurity against an EXE that has /SAFESEH set in its linker options, however when I run PESecurity against the EXE its reporting SafeSEH=False.  If I run BinSkim, or BinScope it detects its set correctly?
Hey,
first of all thanks for providing this. Can you tell me, if this is also providing information about the validity of a authenticode signing?

Thanks in advance!

It would be nice if ASLR High Entropy would be also tested.
