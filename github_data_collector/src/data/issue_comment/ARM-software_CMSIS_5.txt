It looks like something changed recently in the `index.pidx` file, crashing the SAX parser:

```
Parsing "http://www.keil.com/pack/index.pidx"...
org.xml.sax.SAXParseException; lineNumber: 1; columnNumber: 50; White spaces are required between publicId and systemId.
```

The current file reads like:

```
<?xml version="1.0" encoding="UTF-8" ?> 
<index schemaVersion="1.1.0" xs:noNamespaceSchemaLocation="PackIndex.xsd" xmlns:xs="http://www.w3.org/2001/XMLSchema-instance">
<vendor>Keil</vendor>
<url>http://www.keil.com/pack/</url>
<timestamp>2020-01-14T04:02:51.9611227+00:00</timestamp>
<pindex>
  <pdsc url="http://www.keil.com/pack/" vendor="ARM" name="minar" version="1.0.0" />
  ...
  <pdsc url="http://mcu.holtek.com.tw/pack" vendor="Holtek" name="HT32_DFP" version="1.0.24" />
</pindex>
</index>
```

I would suspect that the `PackIndex.xsd` requires a full absolute URL.

I am working on a CM3 based project, my ported RTX with CMSIS-5 seems too big, over 7KB code space consumed. I did some tailor, now the code size is a problem to me,  according with http://www.keil.com/support/man/docs/rlarm/rlarm_ar_technical_data.htm
It says the code size is <4KB for  cortex-M? Is there anything I did wrong? I tried a lot of configurations from the rtx_config.h, my arm-gcc is configured as -O3.

![image](https://user-images.githubusercontent.com/12571759/72332939-e7ad4080-36f5-11ea-9057-6efd3230fb22.png)


Hello All,

I have a task of performing regression learning on a target board (ARM Cortex A53 processor).

I have completed the tasks of data and feature extraction.

Now, i am analyzing the performances of different learning algorithms (GRUs and LSTM) in tensorflow.

However, my concern is that not all models has the software supports to be deployed on the target board.

Out of the software libraries privided by ARM for ML models, i found out that only ARM NN on top of ARM compute library is the way to go. However, in the description of the compute library - it specifies that it supports only SVM (Binary Classification) and CNN models.

I wanted to know, if there is any other way of accomplishing this task? 

Thanks in advance

While I use `osMessageQueuePut` in ISR at a high frequency for a long time(where I use a knob key to test), I always get a `HardFault_Handler` error，the following is the test code：

```
typedef struct {
    osMessageQueueId_t  mq;
    osMemoryPoolId_t    mp;
    osEventFlagsId_t    ef;
    osMutexId_t         mtx;
    u8                  ack;
    int                 msg_size;
} msg_t;

static int msg_put(msg_t *m, void *ptr, int len)
{
    void *p;

    osStatus_t st;
    p = osMemoryPoolAlloc(m->mp, 0);
    if(!p) {
        return -1;
    }
    
    memcpy(p, ptr, len);
    st = osMessageQueuePut(m->mq, &p, 0, 0);
    if(st!=osOK) {
        return -1;
    }
    return 0;
}

msg_t* msg_init(int max, int msg_size)
{
    msg_t *m=NULL;
    
    m = (msg_t*)calloc(1, sizeof(msg_t));
    if(!m) {
        return NULL;
    }

    m->mq = osMessageQueueNew(max, sizeof(void*), NULL);
    m->mp = osMemoryPoolNew(max, msg_size, NULL);
    m->ef = osEventFlagsNew(NULL);
    m->ack = 0;
    m->msg_size = msg_size;

    return m;
}

int msg_post(msg_t *m, void *ptr, int len)
{
    int r=0;

    if(!m || !ptr || !len || len>m->msg_size) {
        return -1;
    }

    r = msg_put(m, ptr, len);

    return r;
}


int msg_recv(msg_t *m, void *ptr, int len)
{
    int r=0;
    void *p=NULL;

    if(!m || !ptr || !len || len<m->msg_size) {
        return -1;
    }

    osStatus_t st;
    st = osMessageQueueGet(m->mq, &p, NULL, osWaitForever);
    if(st!=osOK || !p) {
        return -1;
    }
    
    memcpy(ptr, p, m->msg_size);
    osMemoryPoolFree(m->mp, p);

    return r;
}

////////////////////////////////
static msg_t *msg=NULL;
void uart_rx_cb(u8 *data, u16 data_len)
{
    int r;
    key_t k;
    evt_t e;
    
    //...
    //data convert
    
    e.evt = EVT_KEY;
    e.key = k;
    r = msg_post(msg, &e, sizeof(e));
    if(r==0) {
        //...
    }
}


void gui_task(void *arg)
{
    int r;
    evt_t e;
    osStatus_t st;

    msg = msg_init(10, sizeof(e));
    if(!msg) {
        return;
    }

    while(1) {
        r = msg_recv(msg, &e, sizeof(e));
        if(r==0) {
            switch(e.evt) {
                case EVT_KEY:
                {
                    //do nothing
                }
                break;
            }
        }
    }

    msg_free(&msg);
}

int main(void)
{
    ...
    
    osThreadNew(gui_task, NULL, NULL);
    ...
    while(1);
}
```

TIP：the `uart_rx_cb()` called frequency is about 10~20 times/ms

when the fault occur，the caller is `__svcMessageQueueGet()`.  when I use timer to trigger, all is ok.

Anyone have this problem？or my code has some wrong？

Changed the trigger by usb or  spi, I get the same result(fault error), the driver I used is stm32 driver library. I don't think that it's the driver bug.

thanks



- Corrected quick sort (for constant signal)
- Added Neon/MVE exponential smoothing + tests
- Added Neon/MVE IIR functions + tests
- Corrected order of static functions for bitonic sort
- Added arm_error_handler
- Added Neon/MVE Cholesky decomposition + tests
- Added Neon/MVE Goertzel DFT + tests
- Added median filter + tests
- Added MVE support for logical operators
- Corrected Doxygen documentation
- Added intrinsics for GCC on Cortex A
- Corrected error for 2 filters with LOOP_UNROLL
- Removed tab characters from source files
I have a cmake-based project targeting arm cortex-m4, and I want to run clang-tidy on my code. 

When I attempt to run clang-tidy, I get this message
```
CMSIS_5/CMSIS/Core/Include/cmsis_compiler.h:278:4: error: Unknown compiler. [clang-diagnostic-error]
  #error Unknown compiler.
```

my version of clang has `__clang__` instead of `__ARMCC_VERSION`

maybe there's an option 
`set(CMAKE_CXX_CLANG_TIDY clang-tidy --header-filter=* -checks=*)`
I could set to get this to work for the purposes of static analysis? clang-tidy doesn't need to link/execute, it just needs to be able to compile the code.

As a side note, I think a good feature request could be to formally add support for llvm clang, since it appears to be an unsupported compiler. 
Non-functional change to rewrite this counting down while-loop into a for-loop,
and also using array indexing instead of pointer arithmetic.

This is a little experiment how you guys feel about simplifying this code: I
hope it's easy to agree that first of all this increases readability of the
code and, believe it or not, makes the life of the compiler and
auto-vectorisation easier. I am in the process of fixing the vectoriser who is
struggling with this counting down loop (in the context of MVE and
tail-predication), but thought that a rewrite of this loop would be good too.

If we like this, I think I will give a few more kernels a similar treatment.
The IAR DSP libraries were mistakenly built with debug info
 core_sc300.h should be included instead of core_SC300.h
