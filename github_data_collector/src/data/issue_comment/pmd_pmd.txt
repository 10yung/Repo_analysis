* Introduce a "DataMap" type, something to cache values on Node instances
   * Deprecate getUserData/setUserData from Node. Using the DataMap is better, since any kinds of frameworks can cache their own data at they like. If you don't have the key, you can't even touch or even see the data, so nobody can mess with someone else's data.
* Cache metrics on Nodes. 
   * This means, we can drop all the stuff about MetricsFacade, MetricsMemoizer, MetricsComputer, QualifiedName, QualifiableNode etc. 
   * We don't need to reset the static cache awkwardly 
   * We can also stop constraining metrics framework to only a few kinds of nodes. One can define a metric for any node, without having to introduce awkward supertypes like MethodLikeNode
* All the framework is condensed into MetricsUtil in pmd-core. Language-specific façades are deprecated. The only thing, that cannot be made language independent, is ResultOption (in fact, just fetching operation nodes from a type node). This is not a big deal, as the aggregation logic can still be reused, on any Iterable of node.

This makes the metrics "framework" pretty trivial, and very easy to extend.

I'd like this to be part of 6.21.0, since this avoids publishing LanguageMetricsProvider implementations.


**Affects PMD Version:** 
Further releases.

**Rule:**
CommentedOutCode.

**Description:**
Commented out code is a no-no.

https://stackoverflow.com/questions/3664288/is-it-bad-practice-to-leave-commented-out-code-in-production-releases/3664326#3664326

FYI, lintr has a linter that flags commented out code for removal. 

#### TODO on master

- [ ] Internalize CharStream and its implementations
- [ ] Internalize all classes generated by JavaCC (in particular, `*ParserConstants`, `*ParserTreeConstants`, `*ParserTokenManager`). 


#### TODO on 7.0

- PMD languages to port
   - [x] Java, Modelica #2211 
   - [ ] VM
   - [ ] VF
   - [ ] PLSQL
   - [ ] JSP
- CPD languages to port (must set the property `no-jjtree` on the target in the pom.xml) 
   - [ ] Python
   - [ ] ObjectiveC
   - [ ] Javascript
   - [ ] Matlab
- TODO once all languages are ported:
   - [ ] Move CharStream to `impl.javacc` package
   - [ ] Rename CharStream methods to match decent naming conventions
   - [ ] Cleanup AbstractNode
       - [ ] Remove token methods & fields and put them on AbstractJjtreeNode
       - [ ] Remove text position fields (beginLine/etc)
       - [ ] Remove ID field
   - [ ] Cleanup Node interface
       - [ ] Remove JJTree methods (jjtClose, jjtGetId, etc)


Should we really consider `*TokenKinds` a published API? Since token kinds are compile-time constants, adding or removing tokens in the grammar may break binary compatibility implicitly.



**Description:**

Can anyone tell me what role and purpose does SourceForge continue to serve PMD as?

I signed up at the group and apart from an update email from Oracle wrt to upcoming Java releases, there is no activity on the group discussions.

As far as I can see, this list is defunct. If it's being used, it's mainly as an referenced archive and a mailing list.

You can easily create a Google group, one for PMD developers and another for users to answer more general questions. 

Existing users can be migrated to these groups with their permission. 

There appears to be some commit activity visible for pmd-core.

https://sourceforge.net/projects/pmd/

Additionally, the site is not mobile-friendly either.
So I was fiddling with Intellij's profiler, and found out that the constructor of ClassNotFoundException slows down classloading by a huge factor. In all usages that matter, the exception is immediately caught by the caller and ignored.

With this change we return null instead. This speeds up type resolution by a factor of 2.

Here's a comparison on the sources of OpenJDK 12 (around 17700 source files):

* Master:
```java

17700
Resolved: 18006988, unresolved 2591866
Resolved 88.0%
Errors 5

--------------------------------------------<<< Rule >>>--------------------------------------------
Label                                              Time (secs) Self Time (secs)  # Calls     Counter

TypeResTest                                             2,4144           2,4144   17 742

Total Rule                                              2,4144           2,4144

------------------------------------------<<< Summary  >>>------------------------------------------
Label                                              Time (secs) Self Time (secs)  # Calls     Counter

Rule                                                    2,4265           0,0122   17 742
Rulechain Rule                                          0,0065           0,0065   17 742
Collect Files                                           0,1902           0,1902        1
Load Rules                                              0,0587           0,0587        1
Parser                                                 38,6618          38,6618   17 743
Qualified Name Resolution                               6,5715           6,5715   17 743
Symbol Table                                           25,9257          25,9257   17 743
Type Resolution                                       175,0367         175,0367   17 742
Rulechain Visit                                         1,6539           1,6539   17 742
Reporting                                               0,0525           0,0525   17 746
File Processing                                       252,8111         252,7726        1
Unaccounted                                             0,8519           0,8519

-------------------------------------------<<< Total  >>>-------------------------------------------
Label                                              Time (secs) Self Time (secs)  # Calls     Counter

Wall Clock Time                                       253,1100
```

* Now:
```java

17700
Resolved: 18006855, unresolved 2591999
Resolved 88.0%
Errors 5
--------------------------------------------<<< Rule >>>--------------------------------------------


Summary:

Label                                              Time (secs) Self Time (secs)  # Calls     Counter

TypeResTest                                             2,4051           2,4051   17 742

Total Rule                                              2,4051           2,4051

------------------------------------------<<< Summary  >>>------------------------------------------
Label                                              Time (secs) Self Time (secs)  # Calls     Counter

Rule                                                    2,4164           0,0113   17 742
Rulechain Rule                                          0,0058           0,0058   17 742
Collect Files                                           0,3163           0,3163        1
Load Rules                                              0,1324           0,1324        1
Parser                                                 43,7286          43,7286   17 743
Qualified Name Resolution                               7,0715           7,0715   17 743
Symbol Table                                           27,5194          27,5194   17 743
Type Resolution                                        91,8995          91,8995   17 742
Rulechain Visit                                         1,7523           1,7523   17 742
Reporting                                               0,1810           0,1810   17 746
File Processing                                       177,2106         177,0803        1
Unaccounted                                             0,9306           0,9306


-------------------------------------------<<< Total  >>>-------------------------------------------
Label                                              Time (secs) Self Time (secs)  # Calls     Counter

Wall Clock Time                                       177,7950
```

Bonus: I tried the same thing with my prototype for 7.0, and got these results:

```java
17700
Resolved: 7276268, unresolved 1161416
Resolved 87.0%
Errors 811
--------------------------------------------<<< Rule >>>--------------------------------------------
Label                                              Time (secs) Self Time (secs)  # Calls     Counter

TypeResTest                                            49,6563          49,6563   17 742

Total Rule                                             49,6563          49,6563

--------------------------------<<< Language Specific Processing >>>--------------------------------
Label                                              Time (secs) Self Time (secs)  # Calls     Counter

Java: Java processing                                   7,6579           0,0738   17 742
Qualified name resolution                               3,5481           3,5481   17 742
Symbol table resolution                                 4,0360           4,0360   17 742

Total Language Specific Processing                     15,2660           7,6819

------------------------------------------<<< Summary  >>>------------------------------------------
Label                                              Time (secs) Self Time (secs)  # Calls     Counter

Rule                                                   49,6796           0,0233   17 742
Rulechain Rule                                          0,0096           0,0096   17 742
Collect Files                                           0,3966           0,3966        1
Load Rules                                              0,1217           0,1217        1
Parser                                                 49,5277          49,5277   17 743
Rulechain Ast Indexation                                1,6956           1,6956   17 742
Reporting                                               0,0867           0,0867   17 746
File Processing                                       111,6540         111,5844        1
Unaccounted                                             1,0617           1,0617

-------------------------------------------<<< Total  >>>-------------------------------------------
Label                                              Time (secs) Self Time (secs)  # Calls     Counter

Wall Clock Time                                       112,2610
```
So it's nearly 4 times faster than current master. Note that the time is spent in the rule rather than in the processing stage. That's because it's done on demand by the rule. This sample rule resolves all TypeNodes in the tree though. "Qualified name resolution" and "Symbol table resolution" are sub tasks of "Java Processing".

The contract of `Node::getChild` (#2172) is to throw when the index is out of bounds. Antlr parse trees also happen to have a `getChild` method whose contract is to return null in this case. Should we align ourselves? I think it's reasonable, though this needs to be pointed out in the release notes, as it's a noticeable departure from the current status quo
I think it would be nicer to have a single command `pmd` with various subcommands, instead of shipping a `run.sh` + 5 batch scripts. Eg `pmd designer`, `pmd ast-dump`, `pmd run` (or just `pmd` as the default command?). We would then only need a `pmd` script for bash and `pmd.bat` for windows. This is probably would make it easier to setup (no need to define an alias, less risk for conflicts with other programs). Having one JCommander that knows about all subcommands would also probably improve the documentation/ usage text. Useful to know that PicoCLI can also generate bash completion scripts, and this would be made simpler with a single entry point.

Wdyt? How are you setting up PMD locally, with an alias for `run.sh`, different aliases for interesting subcommands, both? I do both, but my aliases are ugly, which is why I'd appreciate the added consistency 
<!-- Please, prefix the report title with the language it applies to within brackets, such as [java] or [apex].
If not specific to a language, you can use [core]. -->

<!-- NB: issues about the rule designer should be opened at https://github.com/pmd/pmd-designer/issues -->

**Rule:**
[AvoidFieldNameMatchingMethodName](https://pmd.github.io/latest/pmd_rules_java_errorprone.html#avoidfieldnamematchingmethodname)

**Description:**
The rule seems to be case insensitive and hence, reports a violation for the code sample below. 

**Code Sample demonstrating the issue:**

```java
public class Foo implements IdProvider {

    private static final String ID = "foo";

    @Override
    public String id() {
        return ID;
    }

    private void blah() {
        // Another method that uses ID.
    }
}
```

**Running PMD through:** *[Gradle]*

<!-- If relevant, also include your JDK and OS information, e.g. for ClassNotFoundException, LinkageError, reflection failures, etc. -->

Follow up on #2178. The PR includes:
* Implementations of the symbol tables for import declarations. The order these tables are chained in respects the precedence of each kind of import (eg import on demands are shadowed by java lang imports). This is described on the package-info of the internal package
* Implementation of the symbol table resolver. This is a new visitor, that runs after qualified name resolution. Its role is to create symbol tables, chain them in the correct order, and set them on the relevant nodes
  * Input to this process is a SymbolResolver (abstraction over a ClassLoader), and a special logger object used to report missing declarations. If an imported type is missing it's still resolved as an "unresolved class" to perform symbolic resolution later, instead of dealing with null everywhere.
* For now everything is inside a processing stage

#### Next steps

* Implement AST-based symbols & related symbol tables (eg for blocks)
* Introduce new type representation API



The message attribute of a rule should be validated as a correct MessageFormat at the time the ruleset is parsed. In #2226 the failure happens at the time a violation is reported.

The use of MessageFormat for messages should also be documented on the website