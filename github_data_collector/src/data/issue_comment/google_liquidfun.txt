Trying to compile under ARM64-V8a has been unsuccessful...

running these flags:
``` QMAKE_CFLAGS_RELEASE = -O3 -march=armv7-a -mtune=cortex-a8 -mfpu=neon -mfloat-abi=softfp
    QMAKE_CXXFLAGS_RELEASE = -O3 -march=armv7-a -mtune=cortex-a8 -mfpu=neon -mfloat-abi=softfp
    QMAKE_CFLAGS_DEBUG = -O3 -march=armv7-a -mtune=cortex-a8 -mfpu=neon -mfloat-abi=softfp
    QMAKE_CXXFLAGS_DEBUG = -O3 -march=armv7-a -mtune=cortex-a8 -mfpu=neon -mfloat-abi=softfp
```
you get 
```:-1: error: the clang compiler does not support '-march=armv7-a'```

Omitting it you get the same error for cortex-a8, omitting THAT and you get a problem with the neon assembly file.  I am able to compile and deploy without those flags for armeabi-v7a which tells me the compiler does not like the assembly file. I have a feeling this is me being inexperienced with android compilers but I was able to compiler the library, and link with the .a 

Doing so ran into another issue where the library could not see the Box2DParticleSystem, which led me back to trying to link the static library
I have a question, is liquidfun based on some form of SPH ? After looking at source code it doesn't seem so. Is there any paper I can read about algorithms being used ?
uname -a 
Linux amd-Diesel 4.13.0-46-generic #51-Ubuntu SMP Tue Jun 12 12:36:29 UTC 2018 x86_64 x86_64 x86_64 GNU/Linux

cd liquidfun/Box2D
cmake -G'Unix Makefiles'

Error: 
CMake Error at CMakeLists.txt:165 (set_target_properties):
  set_target_properties Can not find target to add properties to:
  Threads::Threads

[CMakeOutput.log](https://github.com/google/liquidfun/files/3938237/CMakeOutput.log)
[CMakeError.log](https://github.com/google/liquidfun/files/3938238/CMakeError.log)

If there are particles with `b2_fixtureContactListenerParticle` flag in the system, contact listener receives `BeginContact` callbacks for all particles - even for particles without this flag. This happens because `NotifyBodyContactListenerPostContact` method doesn't take `b2_fixtureContactListenerParticle` flag into account. 

Even worse, for particles without `b2_fixtureContactListenerParticle` flag, `BeginContact` callback is being called multiple times per contact - filtering out old contacts doesn't work.

The same bug applies to `b2_particleContactListenerParticle` and `NotifyContactListenerPostContact` method.
I'm trying to build lfjs from source but it fails with the following error:

`undefined exported function: "_GenerateOffsets"`

The pre-built version doesn't work either.

Is this project even maintained anymore?
I'd like to have particles of different sizes interact.

What would be an easier modification:
1) Implement multiple particle systems to interact with each other
or
2) Create separate buffers for particle radius, and any other properties I want to make per-particle
CMake Error at CMakeLists.txt:165 (set_target_properties):
  INTERFACE_LIBRARY targets may only have whitelisted properties.  The
  property "LIBRARY_OUTPUT_DIRECTORY" is not allowed.
Hi, great that this exists and thanks for the work!

Trying to install on ubuntu following these instructions:
http://google.github.io/liquidfun/Building/html/md__building_linux.html

```
$ uname -a
Linux fibonacci 4.4.0-134-generic #160-Ubuntu SMP Wed Aug 15 14:58:00 UTC 2018 x86_64 x86_64 x86_64 GNU/Linux
```

when I get to this step, get this output:
```
$ cmake -G'Unix Makefiles'

CMake Error at CMakeLists.txt:165 (set_target_properties):
  set_target_properties Can not find target to add properties to:
  Threads::Threads

-- Configuring incomplete, errors occurred!
See also "/home/galen/Downloads/liquidfun-master/liquidfun/Box2D/CMakeFiles/CMakeOutput.log".
See also "/home/galen/Downloads/liquidfun-master/liquidfun/Box2D/CMakeFiles/CMakeError.log".
```

Files also attached.
Thanks in advance for any help.

[CMakeError.log](https://github.com/google/liquidfun/files/2445985/CMakeError.log)
[CMakeOutput.log](https://github.com/google/liquidfun/files/2445986/CMakeOutput.log)



in order to debugDraw joints in lfjs, we need to add GetAnchorA() and GetAnchorB() functions in all b2Joints
So what this pr does are:

1. make all Joint classes (b2DistanceJoint for instance) extends from b2Joint
2. reorder the classes in uglify.sh, to make sure all joint class load after b2Joint
3. bind methords of all Joints classes
4. add js variables to quick access b2Joint properties
See stackoverflow [here](https://stackoverflow.com/questions/49079057/liquidfun-variable-timestep-adds-energy-to-particles):

Changing timestep causes particle system to gain energy and become unstable. Box2D bodies remain unaffected by the timestep changes. LiquidFun's particles should behave in the same manner (with respect to the timestep) as Box2D bodies.
