This crash happens irregular with some clients and is not reproducible.
There is some evidence, that it is in connection with update grid after changing/updating the datasource, maybe layout-cycle, because when its happen, the user did changes on the data, which is bound to the grid.
Since this is not reproducible, can you imagine of some place in code where the grid is refreshing where we could place a try-catch, so that we can at least avoid crashing the app?



```
QvxWin,  Version=1.0.3.30
64 bit, .NET Framework 4.8, Eto.Wpf.Platform
Copyright © 1996-2020 Thomas Flemming
 
Root folder qvx data:
D:\QuoVadis\QVX_Data
 
deviceid=5
cmdmanstatus=16 Tracks   (XplorerDetail)
 
date=18.01.2020 02:22:06
type=System.ArgumentNullException
message=Der Wert darf nicht NULL sein.
Parametername: key
stacktrace=   bei System.ThrowHelper.ThrowArgumentNullException(ExceptionArgument argument)
   bei System.Collections.Generic.Dictionary`2.FindEntry(TKey key)
   bei System.Collections.Generic.Dictionary`2.TryGetValue(TKey key, TValue& value)
   bei System.Windows.Controls.DataGridItemAttachedStorage.TryGetValue(Object item, DependencyProperty property, Object& value)
   bei System.Windows.Controls.DataGridRow.RestoreAttachedItemValue(DependencyObject objectWithProperty, DependencyProperty property)
   bei System.Windows.Controls.DataGridRow.SyncProperties(Boolean forcePrepareCells)
   bei System.Windows.Controls.DataGridRow.PrepareRow(Object item, DataGrid owningDataGrid)
   bei System.Windows.Controls.DataGrid.PrepareContainerForItemOverride(DependencyObject element, Object item)
   bei System.Windows.Controls.ItemsControl.MS.Internal.Controls.IGeneratorHost.PrepareItemContainer(DependencyObject container, Object item)
   bei System.Windows.Controls.VirtualizingStackPanel.InsertContainer(Int32 childIndex, UIElement container, Boolean isRecycled)
   bei System.Windows.Controls.VirtualizingStackPanel.AddContainerFromGenerator(Int32 childIndex, UIElement child, Boolean newlyRealized, Boolean isBeforeViewport)
   bei System.Windows.Controls.VirtualizingStackPanel.MeasureChild(IItemContainerGenerator& generator, IContainItemStorage& itemStorageProvider, IContainItemStorage& parentItemStorageProvider, Object& parentItem, Boolean& hasUniformOrAverageContainerSizeBeenSet, Double& computedUniformOrAverageContainerSize, Double& computedUniformOrAverageContainerPixelSize, Boolean& computedAreContainersUniformlySized, Boolean& hasAnyContainerSpanChanged, IList& items, Object& item, IList& children, Int32& childIndex, Boolean& visualOrderChanged, Boolean& isHorizontal, Size& childConstraint, Rect& viewport, VirtualizationCacheLength& cacheSize, VirtualizationCacheLengthUnit& cacheUnit, Boolean& foundFirstItemInViewport, Double& firstItemInViewportOffset, Size& stackPixelSize, Size& stackPixelSizeInViewport, Size& stackPixelSizeInCacheBeforeViewport, Size& stackPixelSizeInCacheAfterViewport, Size& stackLogicalSize, Size& stackLogicalSizeInViewport, Size& stackLogicalSizeInCacheBeforeViewport, Size& stackLogicalSizeInCacheAfterViewport, Boolean& mustDisableVirtualization, Boolean isBeforeFirstItem, Boolean isAfterFirstItem, Boolean isAfterLastItem, Boolean skipActualMeasure, Boolean skipGeneration, Boolean& hasBringIntoViewContainerBeenMeasured, Boolean& hasVirtualizingChildren)
   bei System.Windows.Controls.VirtualizingStackPanel.MeasureOverrideImpl(Size constraint, Nullable`1& lastPageSafeOffset, List`1& previouslyMeasuredOffsets, Nullable`1& lastPagePixelSize, Boolean remeasure)
   bei System.Windows.Controls.VirtualizingStackPanel.MeasureOverride(Size constraint)
   bei System.Windows.Controls.Primitives.DataGridRowsPresenter.MeasureOverride(Size constraint)
   bei System.Windows.FrameworkElement.MeasureCore(Size availableSize)
   bei System.Windows.UIElement.Measure(Size availableSize)
   bei System.Windows.ContextLayoutManager.UpdateLayout()
   bei System.Windows.ContextLayoutManager.UpdateLayoutCallback(Object arg)
   bei System.Windows.Media.MediaContext.FireInvokeOnRenderCallbacks()
   bei System.Windows.Media.MediaContext.RenderMessageHandlerCore(Object resizedCompositionTarget)
   bei System.Windows.Media.MediaContext.RenderMessageHandler(Object resizedCompositionTarget)
   bei System.Windows.Threading.ExceptionWrapper.InternalRealCall(Delegate callback, Object args, Int32 numArgs)
   bei System.Windows.Threading.ExceptionWrapper.TryCatchWhen(Object source, Delegate callback, Object args, Int32 numArgs, Delegate catchHandler)

```
Hi:

I downloaded and unzipped  from github.
I tried opening the samples solution in VS2017.

**I get the following errors:**

> Severity	Code	Description	Project	File	Line	Suppression State
> Error	MSB3644	The reference assemblies for framework "Xamarin.Mac,Version=v2.0" were not found. To resolve this, install the SDK or Targeting Pack for this framework version or retarget your application to a version of the framework for which you have the SDK or Targeting Pack installed. Note that assemblies will be resolved from the Global Assembly Cache (GAC) and will be used in place of reference assemblies. Therefore your assembly may not be correctly targeted for the framework you intend.	Eto.XamMac2	C:\Program Files (x86)\Microsoft Visual Studio\2017\Professional\MSBuild\15.0\Bin\Microsoft.Common.CurrentVersion.targets	1179	
> Error	NU1104	Unable to find project 'C:\Downloads\Cross Platform Solutions\Eto-develop\lib\monomac\src\MonoMac.csproj'. Check that the project reference is valid and that the project file exists.	Eto.Mac64	C:\Downloads\Cross Platform Solutions\Eto-develop\src\Eto.Mac\Eto.Mac64.csproj	1	
> Error	NU1104	Unable to find project 'C:\Downloads\Cross Platform Solutions\Eto-develop\lib\monomac\src\MonoMac.csproj'. Check that the project reference is valid and that the project file exists.	Eto.Mac64	C:\Downloads\Cross Platform Solutions\Eto-develop\src\Eto.Mac\Eto.Mac64.csproj	1	


I tried doing a **Nuget restore and I get the following issues**:

> Severity	Code	Description	Project	File	Line	Suppression State
> Error	MSB3644	The reference assemblies for framework "Xamarin.Mac,Version=v2.0" were not found. To resolve this, install the SDK or Targeting Pack for this framework version or retarget your application to a version of the framework for which you have the SDK or Targeting Pack installed. Note that assemblies will be resolved from the Global Assembly Cache (GAC) and will be used in place of reference assemblies. Therefore your assembly may not be correctly targeted for the framework you intend.	Eto.XamMac2	C:\Program Files (x86)\Microsoft Visual Studio\2017\Professional\MSBuild\15.0\Bin\Microsoft.Common.CurrentVersion.targets	1179	
> Error	NU1104	Unable to find project 'C:\Downloads\Cross Platform Solutions\Eto-develop\lib\monomac\src\MonoMac.csproj'. Check that the project reference is valid and that the project file exists.	Eto.Mac64	C:\Downloads\Cross Platform Solutions\Eto-develop\src\Eto.Mac\Eto.Mac64.csproj	1	
> Error	NU1104	Unable to find project 'C:\Downloads\Cross Platform Solutions\Eto-develop\lib\monomac\src\MonoMac.csproj'. Check that the project reference is valid and that the project file exists.	Eto.Mac64	C:\Downloads\Cross Platform Solutions\Eto-develop\src\Eto.Mac\Eto.Mac64.csproj	1	
> 

What do I need to do to resolve these issues?
Am I missing something or doing something wrong here?

Thanks,
JohnB
## Expected Behavior
Working code preview on MainForm.eto.cs and similar files.  

## Actual Behavior
A list of exceptions about double references is thrown. No preview but red screen. (attached)
The application builds/runs fine. It seems to be somehow related to the previewer? 

## Steps to Reproduce the Problem

  1. Start Eto.Forms project with 3 default platforms (gtk, mac, wpf). Defaults to .net standard 1.6
  2. Runs fine; code preview works for .eto.cs files in split window as expected
  3. Change to .net standard 2.0 (reason is i wanted to use [Serializable] attributes. Then code view doesn't work anymore with exceptions as in picture. 

![image](https://user-images.githubusercontent.com/2496269/72262001-4b603c80-3616-11ea-88b5-78e93e7a7142.png)



  - Version: 2.4.1 eto, Extension 2.4.1.1.
  - Platform(s): main app. (platform independent)
  - Operating System(s): windows 10, VS2017, eto extension installed
  

I could create an add to this wonderful open source ide.
## Expected Behavior

Code builds without issue

## Actual Behavior

Code fails to build with errors : 

```
  Microsoft.NET.Sdk.FrameworkReferenceResolution.targets(283, 5): [NETSDK1073] The FrameworkReference 'Microsoft.WindowsDesktop.App.WindowsForms' was not recognized
  Microsoft.NET.Sdk.FrameworkReferenceResolution.targets(283, 5): [NETSDK1073] The FrameworkReference 'Microsoft.WindowsDesktop.App' was not recognized
```

## Steps to Reproduce the Problem

This derives from trying to workaround issues #1546 and #1547 by manually editing the project files.

  1. Changing the TargetFramework in the two project files (one for the library, one for the executable) to dotnetcoreapp3.1 yields a fail to compile with the mentioned errors.
  2. Changing Project SDK to 'Microsoft.NET.Sdk.WindowsDesktop' makes those errors go away, but a new one appears (this is building with Rider under Linux Mint with dotnet 3.1 installed) : 
```
  The imported project "/usr/share/dotnet/sdk/3.1.100/Sdks/Microsoft.NET.Sdk.WindowsDesktop/targets/Microsoft.WinFX.props" was not found. Confirm that the path in the <Import> declaration is correct, and that the file exists on disk.  /usr/share/dotnet/sdk/3.1.100/Sdks/Microsoft.NET.Sdk.WindowsDesktop/targets/Microsoft.NET.Sdk.WindowsDesktop.props
```
Up to now, I think Windows doesn't suffer from this problem.


<!-- Supplying code that demonstrates the problem expedites a fix (and a response)! -->
## Code that Demonstrates the Problem

I've attached a ZIP file corresponding to step (2) above.

<!-- Please specify the version of Eto and all platforms this can be reproduced in -->
## Specifications

  - Version: 2.5.0-ci-10403
  - Platform(s): Non-Windows
  - Operating System(s): Non-Windows
  
[nc31_modified.zip](https://github.com/picoe/Eto/files/4022045/nc31_modified.zip)

## Expected Behavior

Project files are set to be .NET Core 3.1 applications

## Actual Behavior

Project files are set to use the .NET 4.6.1 framework.

## Steps to Reproduce the Problem
Confirm the dotnet version installed : 
dotnet --version
3.1.100

For the 3.1 version installed, do:

  1. dotnet new -i "Eto.Forms.Templates::2.5.0-ci-10403" --nuget-source https://www.myget.org/F/eto/api/v3/index.json
  2. dotnet new etoapp -sln -s -m code -wf
OR
  2. dotnet new etoapp -sln -m code -wf

Review the resulting project files (e.g. under .Desktop for the not-separate case) or under the platform folders for the separate case :

```
<Project Sdk="Microsoft.NET.Sdk">
        
  <PropertyGroup>
    <OutputType>WinExe</OutputType>
    <TargetFramework>net461</TargetFramework>
  </PropertyGroup>
        
  <ItemGroup>
    <ProjectReference Include="..\nc31\nc31.csproj" />
  </ItemGroup>
        
  <ItemGroup>
    <PackageReference Include="Eto.Platform.Windows" Version="2.5.0-ci-10403" />
    <PackageReference Include="Eto.Platform.Wpf" Version="2.5.0-ci-10403" />
    <PackageReference Include="Eto.Platform.Gtk" Version="2.5.0-ci-10403" />
    <PackageReference Include="Eto.Platform.Mac64" Version="2.5.0-ci-10403" />
  </ItemGroup>
        
</Project>
```
I would expect TargetFramework to be : netcoreapp3.1

<!-- Please specify the version of Eto and all platforms this can be reproduced in -->
## Specifications

  - Version: 2.5.0-ci-10403
  - Platform(s): All
  - Operating System(s): All
 
Example ZIP attached for the result of the dotnet commands under Linux, for both the all-in-one and separate project creation

[nc31_linux.zip](https://github.com/picoe/Eto/files/4022034/nc31_linux.zip)

Not a functional issue, so ignoring the template.

The Exceed Extended WPF Toolkit recently made a license change that appears to make it incompatible with commercial applications without a license fee being paid. I wondered whether this might be an issue for Eto-based applications where Eto licensing doesn't require a license to be paid for commercial usage. Ticket is https://github.com/xceedsoftware/wpftoolkit/issues/1557

There is a fork at https://github.com/dotnetprojects/WpfExtendedToolkit that might be a suitable replacement, if an alternative is needed.
You have excellent set of "layouts", but I think your "DynamicPanel" is overengineered thing and looks more "clumsy" than useful. I frequently use DockPanel and it could be also useful addition to your set.
<!-- Thanks for taking the time to report an issue!  Some things to consider:

 - Please be detailed and ensure there isn't already an open issue for your bug/request.
 - If you can, please try to reproduce the problem using the develop branch first as your issue may already be fixed.
 - If you have an enhancement request, you can remove the sections that don't apply.
 
-->

## Expected Behavior

Eto.Gtk should run with gtk+3 on Mac with the default font.

## Actual Behavior

Loading the default font throws an [`ArgumentOutOfRangeException`](https://github.com/picoe/Eto/blob/467854cc623b1c593990a75c44ee2cc4ee63c5f4/src/Eto.Gtk/Drawing/FontFamilyHandler.cs#L86), following the logic in [this comment](https://github.com/picoe/Eto/blob/467854cc623b1c593990a75c44ee2cc4ee63c5f4/src/Eto.Gtk/Drawing/FontFamilyHandler.cs#L35-L42) (which states it only works in Gtk2 on Mac). Can this be fixed for Eto.Gtk/gtk+3 on Mac too?

## Steps to Reproduce the Problem

  1. `brew install gtk+3`
  2. Create a new netcoreapp3.0
  3. Add Eto.Forms and Eto.Gtk via nuget
  4. Load the default font (sample code below)

<!-- Supplying code that demonstrates the problem expedites a fix (and a response)! -->
## Code that Demonstrates the Problem

```csharp
var label = new Label();
var controlFamily = label.Font.ControlObject.Family; // returns ".AppleSystemUIFont"
var family = label.Font.Family; // <-- throws
```

<!-- Please specify the version of Eto and all platforms this can be reproduced in -->
## Specifications

  - Version: 2.4.1
  - Platform(s): Gtk
  - Operating System(s): macOS 10.14
  

I have a `TestView` (defined via XAML). This view has a Binding to `Image`:
```xaml
<?xml version="1.0" encoding="UTF-8"?>
<Panel
	xmlns="http://schema.picoe.ca/eto.forms" 
	xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
	Padding="4"
	>
	<Scrollable>
		<ImageView Image="{Binding Image}" />
	</Scrollable>
</Panel>
```
I create an instance of this view at runtime like this (it is added to a DocumentControl):
```csharp
new TestView() { DataContext = new TestViewModel() }
```
When the `Image` of the `TestViewModel` changes, the view does not update. A bit of debugging showed, that the `PropertyChanged` event of the view model is `null`, which looks suspicious to me.

When the `DataContext` is passed in the ctor and set *before* the call to `XamlReader.Load(this);` everything works as expected. `OnDataContextChanged` is always called as expected.

Is this a bug, or am I missing something?

  - Version: 4.2.1, 4.5.0-rc.4
  - Platform(s): Gtk3
  - Operating System(s): Ubuntu 18.04
  
