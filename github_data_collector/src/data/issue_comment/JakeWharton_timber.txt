Added the HyperlinkedDebugTree class that creates Logs that include hyperlinks to the calling line

This way you can just click on the Tag and directly jump to the source. Very useful in big projects.

I think this should be included in some form as otherwise people who use the library won't know that this is even a possibility. I certainly didn't :D
The class also has a boolean variable that controls whether or not to show the method name too.

So planting it either looks like this:
`Timber.plant(HyperlinkedDebugTree(false))`
Or (because it's default value is true):
`Timber.plant(HyperlinkedDebugTree())`

This then looks similar to this (with clickable Hyperlinks)
`D/`[(AddItemFragment.kt:222)](https://www.reddit.com/r/mAndroidDev/comments/dxtzc6/he_is_the_messiah/)`getImageCaptureUri(): logMessage`

`D/`[(AddItemFragment.kt:222)](https://www.reddit.com/r/mAndroidDev/comments/dxtzc6/he_is_the_messiah/)`: logMessage`
(there is no space after the ":", only here because I had to mark it as a link)

If you want to merge this PR but I forgot something like Testing or perhaps stuff like adding it in the Changelog, tell me.

At some point this might even be useful in the Readme file, but that's just my opinion ðŸ—¡  
Embedded lint rules get inheritted transitively through dependencies.  When a libary author wants to use Timber, it then requires all consumers of that library to either use Timber or configure their tooling to ignore all Timber lint checks.  Its an additional cost to consumers that shouldn't even need to know what logging implementation a library is using.

This cost is especially high as Android Studio's code analysis has it's own separate configuration (inspection profiles) that does not use the lintOptions in the build.gradle or lint.xml.  Inspection profiles exist in the .idea metadata folder and it is considered bad practice to include that folder in source control repositories.  So consumers would either need to configure each checkout's Timber lint rules independently, or they would need to go against good practice by committing the .idea metadata folder to their source control repository. Neither of these is a good approach.

I propose a build variant that does not contain the embedded lint rules, such that published builds of libraries can use said variant and not cause unneccessary trouble for their consumers.
I'm not sure that it's a bug, but here's what's happening.
This happens in one specific scenario. We have a JNI component that calls callback methods.
In debug it works fine, however in release timber trows "IllegalStateException: Synthetic stacktrace didn't have enough elements". The proguard is in fact used.
Currently we work around this issue by doing Timber.tag("something") to specify an explicit tag.
It's not clear what might be the reason why it crashes only in this scenario (the JNI attached thread has less stack frames, perhaps) and how to workaround or fix this properly (since getTag() is final). Please advise.
When you have to use Timber with a delegator, currently you log just the delegator class. -sad-
Or when you change logging tool just in one place and do not change every log call in code (this can be very easy > 1000 places), you probably need a delegator.

With this PR you can solve this (in my point of view) elegant
First, thanks for this awesome library.

The idea is to allow timber to serialize the args that you send into the log, and be able to get the objects in custom `Timber.Tree`. Currently the trees just get the message and tag, but not the args with its own types.

One idea:

> Timber.o("my message", myCustomObjectInstance)

And then on the tree allow to receive that custom object.

This is helpfull if you have a lot of kotlin sealed event classes for instance and want to log into some analytics with properties on it.
This commit adds a Gradle plugin that enables one to rewrite `Log.x` calls into `Timber.x` calls in any upstream libraries.

There's some basic configuration options available via a `timber {}` extension:

```
configure<TimberExtension> {
  variantNameFilter = { it == "debug" }
  classNameFilter = { !it.startsWith("com/foobar/log") }
}
```

The re-written implementation at callsites isn't very performant so I wouldn't recommend to use it in production.
Hi!!
I am using Timber on my app, and I use my own HttpLoggingInterceptor to get the logs from OkHttp library that I use it.
I have a request that returns from server with https status code 404, and after that I get this error on logs : 

` java.util.UnknownFormatConversionException: Conversion = ';'
        at java.util.Formatter$FormatSpecifier.conversion(Formatter.java:2781)
        at java.util.Formatter$FormatSpecifier.<init>(Formatter.java:2811)
        at java.util.Formatter$FormatSpecifierParser.<init>(Formatter.java:2624)
        at java.util.Formatter.parse(Formatter.java:2557)
        at java.util.Formatter.format(Formatter.java:2504)
        at java.util.Formatter.format(Formatter.java:2458)
        at java.lang.String.format(String.java:2770)
        at timber.log.Timber$Tree.formatMessage(Timber.java:539)
        at timber.log.Timber$Tree.prepareLog(Timber.java:525)
        at timber.log.Timber$Tree.d(Timber.java:405)
        at timber.log.Timber$1.d(Timber.java:243)
        at timber.log.Timber.d(Timber.java:38)
        at com.myapp.AndroidLogger.d(AndroidLogger.kt:51)
        at com.myapp.LoggingInterceptor.log(LoggingInterceptor.kt:7)
        at okhttp3.logging.HttpLoggingInterceptor.intercept(HttpLoggingInterceptor.java:277)
        at okhttp3.internal.http.RealInterceptorChain.proceed(RealInterceptorChain.java:142)
        at okhttp3.internal.http.RealInterceptorChain.proceed(RealInterceptorChain.java:117)
        at okhttp3.RealCall.getResponseWithInterceptorChain(RealCall.java:221)
        at okhttp3.RealCall.execute(RealCall.java:81)`

I think it tries to print the response and it is a html content and from there comes this error. Can it be fixed somehow? 
Hi!!
I am using Timber on my app, and I use my own HttpLoggingInterceptor to get the logs from OkHttp library that I use it. 
I make a request to server and the url contains a serial Number that looks like this "18:93:D7:56:B1:7B". When the library try to log the url I get this error : 

` java.util.IllegalFormatConversionException: a != [Ljava.lang.Object;
        at java.util.Formatter$FormatSpecifier.failConversion(Formatter.java:4402)
        at java.util.Formatter$FormatSpecifier.printFloat(Formatter.java:2897)
        at java.util.Formatter$FormatSpecifier.print(Formatter.java:2844)
        at java.util.Formatter.format(Formatter.java:2523)
        at java.util.Formatter.format(Formatter.java:2458)
        at java.lang.String.format(String.java:2770)
        at timber.log.Timber$Tree.formatMessage(Timber.java:539)
        at timber.log.Timber$Tree.prepareLog(Timber.java:525)
        at timber.log.Timber$Tree.d(Timber.java:405)
        at timber.log.Timber$1.d(Timber.java:243)
        at timber.log.Timber.d(Timber.java:38)
        at com.myapp.AndroidLogger.d(AndroidLogger.kt:51)
        at com.myapp.LoggingInterceptor.log(LoggingInterceptor.kt:7)
        at okhttp3.logging.HttpLoggingInterceptor.intercept(HttpLoggingInterceptor.java:169)
        at okhttp3.internal.http.RealInterceptorChain.proceed(RealInterceptorChain.java:142)
        at okhttp3.internal.http.RealInterceptorChain.proceed(RealInterceptorChain.java:117)
        at okhttp3.RealCall.getResponseWithInterceptorChain(RealCall.java:221)
        at okhttp3.RealCall.execute(RealCall.java:81)`

How can it be fixed? I think the problem is with ":", it see the serialNumber as a HEXADECIMAL_FLOAT and when it try to print, the conversion fails. 
Fixes #180 on a per-Tree basis.
Replaces #314 given the new internal tag-determination logic.

Add `DebugTree#ignoreForTagging(Class)` to allow more classes to be ignored when the tag is inferred from the stacktrace. This is useful for anyone needing to wrap Timber, e.g. for use in a Java-only module.

Also changes `fqcnIgnore` from a list into a set because only its `contains` method is used.
https://issuetracker.google.com/issues/128749768