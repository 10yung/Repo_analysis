Thanks for this nice package. I am a teacher mainly interested in including sections of help pages in my xaringan presentations so that I can explain functions to students. However, I still want my tibbles printed in the regular way. Could you make the functionality modular so that we can choose what gets pretty-printed?
Instead of reproducing everything repr has been doing for a long time, knit_print should use [repr](https://github.com/IRkernel/repr) instead of this.
Help pages are rendered as a code block in knit to pdf, whereas for knit to html, the proper page is displayed. Is there any way to get similar result in pdf ?
[Tibbles](http://tibble.tidyverse.org/) do not render correctly all the time when `printr` is used. If they are grouped, they are rendered as plain text. 

Versions: 
  * printr 0.1
  * knitr 1.20

Below is a reproducible example:
 
```r
library(dplyr)
library(printr)
```

Normal tibble is rendered as table

```r
mtcars %>% head
```



|                  |  mpg| cyl| disp|  hp| drat|    wt|  qsec| vs| am| gear| carb|
|:-----------------|----:|---:|----:|---:|----:|-----:|-----:|--:|--:|----:|----:|
|Mazda RX4         | 21.0|   6|  160| 110| 3.90| 2.620| 16.46|  0|  1|    4|    4|
|Mazda RX4 Wag     | 21.0|   6|  160| 110| 3.90| 2.875| 17.02|  0|  1|    4|    4|
|Datsun 710        | 22.8|   4|  108|  93| 3.85| 2.320| 18.61|  1|  1|    4|    1|
|Hornet 4 Drive    | 21.4|   6|  258| 110| 3.08| 3.215| 19.44|  1|  0|    3|    1|
|Hornet Sportabout | 18.7|   8|  360| 175| 3.15| 3.440| 17.02|  0|  0|    3|    2|
|Valiant           | 18.1|   6|  225| 105| 2.76| 3.460| 20.22|  1|  0|    3|    1|

Grouped tibble is rendered as text

```r
mtcars %>% group_by(cyl)  %>% head
```

```
## # A tibble: 6 x 11
## # Groups:   cyl [3]
##     mpg   cyl  disp    hp  drat    wt  qsec    vs    am  gear  carb
##   <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl>
## 1  21.0    6.  160.  110.  3.90  2.62  16.5    0.    1.    4.    4.
## 2  21.0    6.  160.  110.  3.90  2.88  17.0    0.    1.    4.    4.
## 3  22.8    4.  108.   93.  3.85  2.32  18.6    1.    1.    4.    1.
## 4  21.4    6.  258.  110.  3.08  3.22  19.4    1.    0.    3.    1.
## 5  18.7    8.  360.  175.  3.15  3.44  17.0    0.    0.    3.    2.
## 6  18.1    6.  225.  105.  2.76  3.46  20.2    1.    0.    3.    1.
```

Removing the class "grouped_df" leads to correct rendering again

```r
class(x) <- setdiff(class(x),"grouped_df")
x %>% head
```

|  mpg| cyl| disp|  hp| drat|    wt|  qsec| vs| am| gear| carb|
|----:|---:|----:|---:|----:|-----:|-----:|--:|--:|----:|----:|
| 21.0|   6|  160| 110| 3.90| 2.620| 16.46|  0|  1|    4|    4|
| 21.0|   6|  160| 110| 3.90| 2.875| 17.02|  0|  1|    4|    4|
| 22.8|   4|  108|  93| 3.85| 2.320| 18.61|  1|  1|    4|    1|
| 21.4|   6|  258| 110| 3.08| 3.215| 19.44|  1|  0|    3|    1|
| 18.7|   8|  360| 175| 3.15| 3.440| 17.02|  0|  0|    3|    2|
| 18.1|   6|  225| 105| 2.76| 3.460| 20.22|  1|  0|    3|    1|

I would like an option to limit the maximum rows/cols for latex output. An option similar to `options(dplyr.print_max = 10)` would be good. There should be some indication of how many rows & columns are omitted, similar to the tibble string output.

I have a few tables with hundreds of rows and columns. In the notebook preview these print nicely as tibble truncated tables (10 rows max), but when rendered to PDF I get pages of tables which also overflow the right margin.
It would be great to have `printr`'s magic work with the elegant jquery tables from the DT package for HTML documents...

http://rstudio.github.io/DT/


I like the concept of [Rmd partials](http://rmarkdown.rstudio.com/rmarkdown_websites.html#rmd_partials) for repetitive things I do (like summaries of models, robustness checks, making a codebook for the items in a survey).

But I'm not sure I'm using them right, because it seems a bit hacky at times.

To give an example: here, you can see where I used one to summarise a regression with some plots and headlines (this is a simplified example, it's usually a bit more involved).

The partial itself: https://rubenarslan.github.io/repro_web_stack/_regression_summary.html 
Used: https://rubenarslan.github.io/repro_web_stack/3_analyses.html 

Here are things that felt a bit hacky:
- I needed to set `options(knitr.duplicate.label = 'allow')` globally if I want named chunks.
- I "needed" this convenience function: https://github.com/rubenarslan/formr/blob/master/R/rmarkdown_options.R#L234 so that it's rendered "asis" and so that the environment is the calling environment for knit_child.
- I wanted to call the partials from a function (could simply be `knit_print.lm` or something more "custom" like I use now). So it takes arguments from the calling environment, but I cannot specify these in the Rmd file. I tried using parameters, but I think knitr:knit_child does not support them.

I was thinking of packaging some partials that I've made for myself, but wanted to collect your opinion on best practices first. Should I maybe use an htmlwidget-style approach for this as this is more "standard"? I like about the knit_child approach that I can treat it like text, concatenate several etc.
This makes sessionInfo look better in markdown documents by changing the output to a nested unnumbered list.  It provides a bit more information for packages installed from GitHub via devtools by giving the SHA1 hash for those packages.
I was working with a series of tables and had put a `***` between them to get a horizontal line.  However this seemed to really destroy the LaTex rendering if there was not a blank line between the preceding code chunk and  the `***`.   (Maybe there is an rmarkdown rule I am unaware of about this?)  I just wanted to note it since someone else may come across it.

There is still a slight problem in that it prints 

```
Pr(>|t|)
```

 as:

```
Pr(¿—t—)
```

in LaTeX documents
