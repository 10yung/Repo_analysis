## Describe the bug
unhandled promise rejection if session driver set "file" on a read-only system such as free plan on ZEIT Now

Unlike local development, there are always restrictions on cloud deployment, especially for free accounts

## To Reproduce
1. `bottender.config.js` set `'file'` as session.driver
2. `$ now`
3. See zeit.co the **Runtime** tab.

## Expected behaviour
> A clear and concise description of what you expected to happen.

expect errorMessage to like "You haven't permission to create files"

## Screenshots
![image](https://user-images.githubusercontent.com/1500206/72450760-d5b2c700-37f5-11ea-9f8c-fe8d81aa5c11.png)

## Additional context
- free plan on ZEIT Now
- now version 2

Hi, I just looking for a development guide for TypeScript.

Or maybe just an interface `LineClient` or `LineAction` got export is enough for me.

The reason is bottender now got have interfaces of Action, Client, Event and Props etc. It's wonderful.

With these interfaces, I can say `const SayHi: Action<Client, Event>`, which with argument interfaces `context.sendText` and `props?.next` and etc.

But the problem is `Action<Client, Event>` interface has no `context.sendFlex`, and seems `LineClient` has no export by bottender. Therefore I can not tell VSCode `Action<LineClient, LineEvent>`.

Currently, my workaround is

```ts
export const QueryWar3rStreams= async (
 context: LineContext,
  props: Props<Client, LineEvent> & { ownPropsAsString: string },
) => {
  console.info(props.ownPropsAsString)

  return props?.next
}
```

The workaround is working fine, but it will get the next problem on `import { text } from 'bottender'`

```ts
export default async function App(context: LineContext): Promise<unknown> {
  return router([text(/^[$＄](直播|live)/i, QueryWar3rStreams as any)])
}
```

```sh
[ts]   Types of parameters 'context' and 'context' are incompatible.
[ts]     Type 'Context<LineClient, LineEvent>' is missing the following properties from type 'LineContext': _customAccessToken, _isReplied, _shouldBatch, _replyMessages, and 61 more.
```

What do you think?
update NLU guides due to the latest bottender NLU related oackages
This is an example that deploys bottender bot on AWS Lambda and API Gateway.
**Is your feature request related to a problem? Please describe.**
A clear and concise description of what the problem is. Ex. I'm always frustrated when [...]

I'm trying to write a solution for clients where it is actually a feature if bots can communicate directly with each other. At the moment, this is not possible, since 'messages' with the 'bot_message' subtype and/or a 'bot_id' are filtered out entirely. 

**Describe the solution you'd like**
A clear and concise description of what you want to happen.

I would like to have a solution where 'bot_message' is its own event type. Messages that are sent by this particular bot itself should be filtered out entirely, of course. But for the others, a user should have at the option to handle them in a way that suits their purpose

**Describe alternatives you've considered**
A clear and concise description of any alternative solutions or features you've considered.

I tried to modify the rawEvent on the request object and also to override the _isBotRequest method on the connector. Both lead to very messy solutions.

**Additional context**
Add any other context or screenshots about the feature request here.

I mentioned the whole error message in the title just for SEO performance. This feature request is for showing a concise error message when confronting problem that results from duplicate ngrok running in the background.

**Is your feature request related to a problem? Please describe.**

When running `npm run dev`, I got an error message below:

```
✖ An unexpected error occurred in provider dev: undefined
undefined
undefined
```

It turns out to be that I have another ngrok running in the background.

**Describe the solution you'd like**

It would be nice if the error message can point out this error for someone who will confront the same issue.

It's still a WIP. We are moving those code from bottender-facebook to here.
https://github.com/bottenderjs/bottender-facebook
add docs for telegram games
This PR is the workspace for the emulator experiment.
It's still a WIP that aim to replace `nodemon` with `child_process` and `watchpack` and try to fix:

- support ts 
- fix /exit bug