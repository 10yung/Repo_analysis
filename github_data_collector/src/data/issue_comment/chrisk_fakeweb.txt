```
┌──────────────────────────────────────────────────────────────────────────────┐
│ Run tests for ruby2.5 from debian/ruby-tests.rb                              │
└──────────────────────────────────────────────────────────────────────────────┘

RUBYLIB=/<<BUILDDIR>>/ruby-fakeweb-1.3.0+git20170806+dfsg1/debian/ruby-fakeweb/usr/lib/ruby/vendor_ruby:. GEM_PATH=debian/ruby-fakeweb/usr/share/rubygems-integration/all:/var/lib/gems/2.5.0:/usr/lib/x86_64-linux-gnu/rubygems-integration/2.5.0:/usr/share/rubygems-integration/2.5.0:/usr/share/rubygems-integration/all ruby2.5 debian/ruby-tests.rb
Loaded suite debian/ruby-tests
Started
...................................................F
===============================================================================
Failure: test_real_https_request(TestFakeWeb):
  not all expectations were satisfied
  unsatisfied expectations:
  - expected at least once, not yet invoked: #<Mock:SSLSocket>.session()
  satisfied expectations:
  - expected at least once, invoked once: #<Mock:SSLSocket>.read_nonblock(any_parameters)
  - expected exactly once, invoked once: #<Mock:SSLSocket>.write(all_of(includes("GET /main/rss/hotnews/hotnews.rss HTTP/1.1"), includes("Host: images.apple.com")))
  - allowed any number of times, invoked twice: #<Mock:SSLSocket>.close(any_parameters)
  - allowed any number of times, invoked 3 times: #<Mock:SSLSocket>.closed?(any_parameters)
  - allowed any number of times, invoked twice: #<Mock:SSLSocket>.setsockopt(any_parameters)
  - expected at least once, invoked twice: #<Mock:SSLSocket>.connect_nonblock(any_parameters)
  - allowed any number of times, invoked twice: #<Mock:SSLSocket>.sync_close=(any_parameters)
  - expected at least once, invoked twice: OpenSSL::SSL::SSLSocket.new(#<Mock:SSLSocket>, instance_of(OpenSSL::SSL::SSLContext))
  - expected at least once, invoked twice: OpenSSL::SSL::SSLSocket.===(#<Mock:SSLSocket>)
  - expected at least once, invoked twice: TCPSocket.open("images.apple.com", 443, nil, nil)
/<<BUILDDIR>>/ruby-fakeweb-1.3.0+git20170806+dfsg1/test/test_helper.rb:123:in `setup_expectations_for_real_request'
/<<BUILDDIR>>/ruby-fakeweb-1.3.0+git20170806+dfsg1/test/test_helper.rb:175:in `setup_expectations_for_real_apple_hot_news_request'
/<<BUILDDIR>>/ruby-fakeweb-1.3.0+git20170806+dfsg1/test/test_fake_web.rb:410:in `test_real_https_request'
     407: 
     408:   def test_real_https_request
     409:     FakeWeb.allow_net_connect = true
  => 410:     setup_expectations_for_real_apple_hot_news_request(:port => 443)
     411: 
     412:     http = Net::HTTP.new('images.apple.com', 443)
     413:     http.use_ssl = true
===============================================================================
...............................................................................
.............................................................
Finished in 0.254606772 seconds.
-------------------------------------------------------------------------------
192 tests, 353 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications
99.4792% passed
-------------------------------------------------------------------------------
```
Hi @chrisk Thanks for maintaining this gem.
I added the Ruby latest version 2.6 to CI based on below pull-request.
https://github.com/chrisk/fakeweb/pull/63

Do you like to start Travis CI on this repository again?

There is an error on Ruby 2.6.

```
Failure: test_real_http_request(TestFakeWeb):
  unexpected invocation: #<Mock:TCPSocket>.write_nonblock("GET /main/rss/hotnews/hotnews.rss HTTP/1.1\r\nAccept-Encoding: gzip;q=1.0,deflate;q=0.6,identity;q=0.3\r\nAccept: */*\r\nUser-Agent: Ruby\r\nHost: images.apple.com\r\n\r\n", {:exception => false})
  unsatisfied expectations:
  - expected at least once, not yet invoked: #<Mock:TCPSocket>.read_nonblock(any_parameters)
  - expected exactly once, not yet invoked: #<Mock:TCPSocket>.write(all_of(includes("GET /main/rss/hotnews/hotnews.rss HTTP/1.1"), includes("Host: images.apple.com")))
```

https://travis-ci.org/junaruga/fakeweb/builds/493767431

Do you like to fix it?
This PR changes the build badges to SVG for sharper readability ✨
All added Ruby versions tests pass at https://travis-ci.org/nicolasleger/fakeweb/builds/340300926
I installed fakeweb (1.3.0) in Ruby 2.4.1 and Rails 5.1.4 and when tried to use it I started to get a this error.

    Failure/Error: Net::HTTP.get(url)
    NoMethodError:  undefined method `<<' for {:read_timeout=>60, :continue_timeout=>nil, :debug_output=>nil}:Hash

And this one, whenever I tried to make and HTTP call using Net::HTTP.

    Failure/Error: puts Net::HTTP.get(@uri)
    NoMethodError:  undefined method `close' for #<FakeWeb::StubSocket:0x007fc72ea8f230>

I searched the web and found that many other testing frameworks are affected by this compatibility issue and after reading many posts for WebMock and VCR, I finally came across a solution.  It suggested doing this and oddly enough it worked.  

    gem 'fakeweb', :git => 'https://github.com/chrisk/fakeweb.git'

Is it time to make a new gem release?
Why does this work around actually work but the release gem fails?

I hope this helps.
  
Right now, if I want to verify that I'm POST'ing the right data, I need to do something like this:

```
FakeWeb.register_uri(:post, my_url, body: 'i-dont-care-about-the-response-only-the-request')
do_something_that_hits_my_url
request_data = CGI.parse FakeWeb.last_request.body_stream.instance_variable_get('@stream').string
expect(request_data).to ...
```

Line 3 of this example should be encapsulated.  For instance, it could be exposed as `FakeWeb.last_request.form_data`
The last version `1.3.0` was released **in year 2010**, 6 years ago!
People needed to pull down changes which were made since that. 

Please please please bump up and release a new version.

Hi,

In a project where we use fakeweb I ran into an issue when I tried to connect to Neo4j (a graph database). The gem I used to connect to it (neo4jrb) uses net-http to connect to the database and it turns out that fakeweb interfered with this in development. 

I described my issues in detail here:
https://github.com/neo4jrb/neo4j/issues/555#issuecomment-173632558

After some back and forth between ruby versions and disabling various gems I found out that fakeweb was, in the end, the culprit in my spotty connection with the database. Since removing fakeweb from my Gemfile I haven't had any issues.

The error I received was:

```
Net::HTTP::Persistent::Error: too many connection resets (due to closed stream - IOError) after 0 requests on 2237191000, last used 4.27705 seconds ago
from /Users/achilleas/.rbenv/versions/2.3.0/lib/ruby/2.3.0/net/protocol.rb:211:in `write'
```

Please let me know if you need any more information.

In the method `FakeWeb.register_uri` there is a `:body` option but it is related to the `response.body`. 

How can I define a `request.body` in the way the mocked request has to have this body in order to accomplish the mock?

This is for a `post` method.

The problem is that prior to matching, the URI is passed through `normalize_uri` which mangles it.

For example:

```
> require 'fakeweb'
> FakeWeb.allow_net_connect = false
> FakeWeb.register_uri(:get, /http:\/\/good\.com\/\?a=1\&b=2/, :body => "good")
> FakeWeb.register_uri(:get, /http:\/\/bad\.com\/\?b=1\&a=2/, :body => "bad")

> Net::HTTP.get('good.com', '/?a=1&b=2')
"good"
> Net::HTTP.get('bad.com', '/?b=1&a=2')
FakeWeb::NetConnectNotAllowedError: Real HTTP connections are disabled. Unregistered request: GET http://bad.com/?b=1&a=2
```

which is incredibly confusing, given that error message contains exactly the same URL that I passed in, while in reality match happens against the URL with normalized parameters (see https://github.com/chrisk/fakeweb/blob/master/lib/fake_web/registry.rb#L58)
