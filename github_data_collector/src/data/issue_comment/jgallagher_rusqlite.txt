```
echedey@debian-pi-3b:~$ git clone https://github.com/jgallagher/rusqlite
Clonando en 'rusqlite'...
remote: Enumerating objects: 53, done.
remote: Counting objects: 100% (53/53), done.
remote: Compressing objects: 100% (44/44), done.
remote: Total 6358 (delta 21), reused 20 (delta 9), pack-reused 6305
Recibiendo objetos: 100% (6358/6358), 5.09 MiB | 261.00 KiB/s, listo.
Resolviendo deltas: 100% (4507/4507), listo.
echedey@debian-pi-3b:~$ cd rusqlite/
echedey@debian-pi-3b:~/rusqlite$ cargo build
echedey@debian-pi-3b:~/rusqlite$ cargo build
    Updating crates.io index
error: process didn't exit successfully: `rustc -vV` (signal: 11, SIGSEGV: invalid memory reference)
--- stdout
rustc 1.40.0 (73528e339 2019-12-16)
binary: rustc
commit-hash: 73528e339aae0f17a15ffa49a8ac608f50c6cf14
commit-date: 2019-12-16
host: aarch64-unknown-linux-gnu
release: 1.40.0
```

My table has 34 columns (included the UNIQUE id), I have problems with INSERT as whenever I try to insert all 33 values (id is excluded), I get a compile error which I believe is due to a limit in the number of values sent in a single .execute() with params![values, ..., values]

My question is, is there a safe way to increase the limit of values processed?

Note: SELECT has no problem retrieving all 34 columns.
For example, all the `_named` (vs the non-`_named`) functions on https://docs.rs/rusqlite/0.21.0/rusqlite/struct.Statement.html. In mozilla/application-services, we even have a extension trait which exists/started mainly as a way to get more methods for `_named` variants (also cached) and such: https://github.com/mozilla/application-services/blob/master/components/support/sql/src/conn_ext.rs

Really this is probably my biggest complaint about rusqlite's API. I don't really have a solution (the ones I've thought of all hit coherence issues or restrict the API in ways I wouldn't want to give up), but it seems like it should have an issue on file, since its a pain for maintenance. It's probably worth investigating what other non-orm (and non-macro) SQL crates do.
https://github.com/jgallagher/rusqlite/issues/572
I'm trying to compile rusqlite to WebAssembly.
However, Clang throws this error when targeting `wasm32-unknown-unknown`:

`cargo build --target=wasm32-unknown-unknown`

`rusqlite = { version = "0.20.0", features = ["bundled"] }`

```
In file included from sqlite3/sqlite3.c:25517:
/usr/include/pthread.h:682:6: error: 'regparm' is not valid on this platform
     __cleanup_fct_attribute;
     ^~~~~~~~~~~~~~~~~~~~~~~
```

<details>
  <summary>Full log</summary>

```log
running: "clang" "-Os" "-ffunction-sections" "-fdata-sections" "-fPIC" "--target=wasm32-unknown-unknown" "-Wall" "-Wextra" "-DSQLITE_CORE" "-DSQLITE_DEFAULT_FOREIGN_KEYS=1" "-DSQLITE_ENABLE_API_ARMOR" "-DSQLITE_ENABLE_COLUMN_METADATA" "-DSQLITE_ENABLE_DBSTAT_VTAB" "-DSQLITE_ENABLE_FTS3" "-DSQLITE_ENABLE_FTS3_PARENTHESIS" "-DSQLITE_ENABLE_FTS5" "-DSQLITE_ENABLE_JSON1" "-DSQLITE_ENABLE_LOAD_EXTENSION=1" "-DSQLITE_ENABLE_MEMORY_MANAGEMENT" "-DSQLITE_ENABLE_RTREE" "-DSQLITE_ENABLE_STAT2" "-DSQLITE_ENABLE_STAT4" "-DSQLITE_HAVE_ISNAN" "-DSQLITE_SOUNDEX" "-DSQLITE_THREADSAFE=1" "-DSQLITE_USE_URI" "-DHAVE_USLEEP=1" "-o" "/.../target/wasm32-unknown-unknown/release/build/libsqlite3-sys-cde8838d455ff3e5/out/sqlite3/sqlite3.o" "-c" "sqlite3/sqlite3.c"
sqlite3/sqlite3.c:22431:49: warning: unused parameter 'id' [-Wunused-parameter]
SQLITE_PRIVATE int sqlite3OsFetch(sqlite3_file *id, i64 iOff, int iAmt, void **pp){
                                                ^
sqlite3/sqlite3.c:22431:57: warning: unused parameter 'iOff' [-Wunused-parameter]
SQLITE_PRIVATE int sqlite3OsFetch(sqlite3_file *id, i64 iOff, int iAmt, void **pp){
                                                        ^
sqlite3/sqlite3.c:22431:67: warning: unused parameter 'iAmt' [-Wunused-parameter]
SQLITE_PRIVATE int sqlite3OsFetch(sqlite3_file *id, i64 iOff, int iAmt, void **pp){
                                                                  ^
sqlite3/sqlite3.c:22435:51: warning: unused parameter 'id' [-Wunused-parameter]
SQLITE_PRIVATE int sqlite3OsUnfetch(sqlite3_file *id, i64 iOff, void *p){
                                                  ^
sqlite3/sqlite3.c:22435:59: warning: unused parameter 'iOff' [-Wunused-parameter]
SQLITE_PRIVATE int sqlite3OsUnfetch(sqlite3_file *id, i64 iOff, void *p){
                                                          ^
sqlite3/sqlite3.c:22435:71: warning: unused parameter 'p' [-Wunused-parameter]
SQLITE_PRIVATE int sqlite3OsUnfetch(sqlite3_file *id, i64 iOff, void *p){
                                                                      ^
In file included from sqlite3/sqlite3.c:25517:
/usr/include/pthread.h:682:6: error: 'regparm' is not valid on this platform
     __cleanup_fct_attribute;
     ^~~~~~~~~~~~~~~~~~~~~~~
/usr/include/bits/pthreadtypes-arch.h:103:50: note: expanded from macro '__cleanup_fct_attribute'
# define __cleanup_fct_attribute __attribute__ ((__regparm__ (1)))
                                                 ^            ~
In file included from sqlite3/sqlite3.c:25517:
/usr/include/pthread.h:694:3: error: 'regparm' is not valid on this platform
  __cleanup_fct_attribute;
  ^~~~~~~~~~~~~~~~~~~~~~~
/usr/include/bits/pthreadtypes-arch.h:103:50: note: expanded from macro '__cleanup_fct_attribute'
# define __cleanup_fct_attribute __attribute__ ((__regparm__ (1)))
                                                 ^            ~
In file included from sqlite3/sqlite3.c:25517:
/usr/include/pthread.h:717:6: error: 'regparm' is not valid on this platform
     __cleanup_fct_attribute;
     ^~~~~~~~~~~~~~~~~~~~~~~
/usr/include/bits/pthreadtypes-arch.h:103:50: note: expanded from macro '__cleanup_fct_attribute'
# define __cleanup_fct_attribute __attribute__ ((__regparm__ (1)))
                                                 ^            ~
In file included from sqlite3/sqlite3.c:25517:
/usr/include/pthread.h:730:3: error: 'regparm' is not valid on this platform
  __cleanup_fct_attribute;
  ^~~~~~~~~~~~~~~~~~~~~~~
/usr/include/bits/pthreadtypes-arch.h:103:50: note: expanded from macro '__cleanup_fct_attribute'
# define __cleanup_fct_attribute __attribute__ ((__regparm__ (1)))
                                                 ^            ~
In file included from sqlite3/sqlite3.c:25517:
/usr/include/pthread.h:735:6: error: 'regparm' is not valid on this platform
     __cleanup_fct_attribute __attribute__ ((__noreturn__))
     ^~~~~~~~~~~~~~~~~~~~~~~
/usr/include/bits/pthreadtypes-arch.h:103:50: note: expanded from macro '__cleanup_fct_attribute'
# define __cleanup_fct_attribute __attribute__ ((__regparm__ (1)))
                                                 ^            ~
sqlite3/sqlite3.c:37692:36: warning: unused parameter 'fd' [-Wunused-parameter]
static int unixFetch(sqlite3_file *fd, i64 iOff, int nAmt, void **pp){
                                   ^
sqlite3/sqlite3.c:37692:44: warning: unused parameter 'iOff' [-Wunused-parameter]
static int unixFetch(sqlite3_file *fd, i64 iOff, int nAmt, void **pp){
                                           ^
sqlite3/sqlite3.c:37692:54: warning: unused parameter 'nAmt' [-Wunused-parameter]
static int unixFetch(sqlite3_file *fd, i64 iOff, int nAmt, void **pp){
                                                     ^
sqlite3/sqlite3.c:54186:37: warning: unused parameter 'pPager' [-Wunused-parameter]
static void pagerFixMaplimit(Pager *pPager){
                                    ^
sqlite3/sqlite3.c:114906:7: warning: unused parameter 'argc' [-Wunused-parameter]
  int argc,
      ^
sqlite3/sqlite3.c:194913:9: warning: unused parameter 'pAux' [-Wunused-parameter]
  void *pAux,
        ^
sqlite3/sqlite3.c:194965:40: warning: unused parameter 'tab' [-Wunused-parameter]
static int statBestIndex(sqlite3_vtab *tab, sqlite3_index_info *pIdxInfo){
                                       ^
sqlite3/sqlite3.c:195373:27: warning: unused parameter 'idxStr' [-Wunused-parameter]
  int idxNum, const char *idxStr,
                          ^
sqlite3/sqlite3.c:195374:7: warning: unused parameter 'argc' [-Wunused-parameter]
  int argc, sqlite3_value **argv
      ^
15 warnings and 5 errors generated.
```

</details>
it's since 3.10.0 and later gives us colUsed in sqlite3_index_info struct - it's a bitmask of column used in query. That could potentialy improve some vtabs implementations - if I know I don't need some large/hard to compute column I can skip.
https://www.reddit.com/r/rust/comments/e1az07/fyi_if_you_have_a_crate_that_involves_a_lot_of/
> If you have a crate that involves a lot of unsafe code, you might consider adding Miri to your CI configuration

We do have a lot of unsafe code
> miri can detect some types of UB caused by unsafe code at runtime. cargo miri test runs all of your tests under miri.
This avoids annoying wrong indentation when people use tabs in their editors (like they are supposed to :speak_no_evil:).
I cloned this repo and tried to build `libsqlite3-sys` but I get this error:
```sh
$ cargo check
    Updating crates.io index
   Compiling libsqlite3-sys v0.17.0 (D:\3rdparty\rusqlite\libsqlite3-sys)
error: couldn't read D:\3rdparty\rusqlite\target\debug\build\libsqlite3-sys-0ac88c455badfd8a\out/bindgen.rs: The system cannot find the path specified. (os error 3)
  --> libsqlite3-sys\src\lib.rs:52:1
   |
52 | include!(concat!(env!("OUT_DIR"), "/bindgen.rs"));
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error: aborting due to previous error

error: could not compile `libsqlite3-sys`.

To learn more, run the command again with --verbose.
```
I'm on Windows 10, I have this in my `.cargo/config`:
```toml
[target.x86_64-pc-windows-msvc.sqlite3]
rustc-link-search = ['D:\_rustlibs\x64']
rustc-link-lib = ["sqlite3"]
```
When I remove this, `libsqlite3-sys` builds but for my own crate that depends on `libsqlite3-sys` (through diesel), I get:
> LINK : fatal error LNK1181: cannot open input file 'sqlite3.lib'

But when I have that part of `.cargo/config`, I get the first error when building my crate..

What's the correct way? :)
And how can I choose between static and dynamic linking?
Following the explanations from SQLite's [recommended compile-time options](https://www3.sqlite.org/compile.html), this adds a Cargo feature to libsqlite-sys so that the bundled SQLite can be better tailored to the specific needs of rusqlite. The feature is enabled by default and rusqlite does explicitly not request it, so that if any other crate pulls libsqlite-sys into the dependency, no features are removed.

As a first step, this commit
* adds `SQLITE_OMIT_PROGRESS_CALLBACK` as rusqlite does not use `sqlite3_progress_handler`
 * and sets `SQLITE_DEFAULT_MEMSTATUS` to `0` as rusqlite does not use `sqlite3_status`.