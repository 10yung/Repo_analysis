"Loosely connected ... poly-Bézier" is used six times. That's four times too many.
This section starts with "We can also represent Bézier curves as matrix operations, by expressing the Bézier formula as a polynomial basis function and a coefficients matrix, and the actual coordinates as a matrix. Let's look at what this means for the cubic curve:" but should include a sentence that explains we're going to use `P` notation for coordinates, representing full-dimensional vectors.
This function shows the standard Bezier formula using indices and component form that doesn't match the rest of the primer.
@apodtele [wrote](https://github.com/Pomax/bezierinfo/issues/69:):

---
Offsetting by scaling clearly has issues: lines drop out and color is inconsistent. That is understandable as the center of scaling is not equidistant from ends in general. Can you try miter moves along bisectors for control points as in line joins. This would preserve the tangent directions at the ends. You won't need a requirement of for controls to be on one side: it will work for wiggly segments too. Perhaps you can come up with a reasonable criteria for a straightness based on distance from controls to the chord trisections.

I would love to hear your thoughts.

[This page](https://math.stackexchange.com/questions/465782/control-points-of-offset-bezier-curve/467038) has illustrations and references. [This one](http://web.mit.edu/hyperbook/Patrikalakis-Maekawa-Cho/node222.html) does too.

Actually text doesn't mention that weights and points can and are usually vectors (i.e. in 2-d space).

Just applying blindly all the functions and formulas will give you a constant function `1` or a line on 1-d line. Not very useful at all and well confusing.


Hi Mike, thanks for a great resource. There's an inconsistency between your treatment of the tension parameter when you go from the control vector representation to the matrix+points representation in https://pomax.github.io/bezierinfo/#catmullconv (attached screenshot). Either the tension is in the denominator (former rep), so higher tension implies shorter tangents as in the text, or tension is in the numerator (latter rep), so lower tension implies shorter tangents. Could you fix this? The inconsistency is there at various places all the way to the end of that section.

![catmull_rom](https://user-images.githubusercontent.com/53786/64920482-d3a01380-d7d5-11e9-9fcd-0f1fcd006a98.png)
- [x] first formula should not include `ratio`, it should include the binomial coefficient, and control point.
- [ ] explain that this operation is akin to "projecting" a conic, which allows it to become circular.
- [ ] change the sliders so that the current value is clear, vs. the min/max values
This requires generating ES6 class code rather than using the ES5 createClass approach
- [ ] extend all examples with so that they generate a "representative" image that is useful in print form, or mark the example (+ however much text) as "for web only" so it doesn't end up in the print medium.
- [ ] create duplicate guide texts for graphics, with for-print text that doesn't talk about interacting with graphics
- [ ] find an appropriate (set of) free fonts

Mike,

Regarding "Let's derive the full formula anyway" via the curvature function, you state the "the function C(t) is the cross product between the first and second derivative functions for the parametric dimensions of our curve." Isn't there a denominator (cube of the length of the first derivatives) missing from your expression? See [Wikipedia: Curvature, Local expressions](https://en.wikipedia.org/wiki/Curvature#Local_expressions). As a sanity test, observe that if the point coordinates are all integers, the erroneous C(t) polynomial coefficients will also all be integers, which isn't intuitive (curvature is surely not always an integer at integer t's).

My understanding: The missing denominator is the cube of the length of the velocity (first derivative in t) vector.  Since that length involves the square root of a polynomial, the denominator is not a polynomial.  Hence C(t) is not a polynomial, and not a rational function.  This presents an unhappy predicament, that there is no convenient way to analyze the properties of C(t) with polynomial-handling code; to my knowledge it can only be evaluated for specific t's.

The erroneous C(t) happens to still work to find inflections because the roots of a (quadratic) numerator are the roots of any ratio with that numerator.  I.e., a quadratic P(x)=0 and P(x)/thing=0 have identical roots for any given thing that is finite and non-zero.  The degenerate cases correspond to straight lines (colinear end/control points; zero curvature everywhere) or zero extent (coincident end/control points).

Also, is there not a typo in the text: the Bezier derivative function names should each have an x (or y) subscript?