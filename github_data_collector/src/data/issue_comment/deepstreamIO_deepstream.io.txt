

```
const DeepstreamServer = new Deepstream({
	httpServer: {
		type: 'uws', // 'default'
		options: {
			port: 6020,
			host: '127.0.0.1',
			allowAllOrigins: true,
			origins: ['https://admin.iris.localhost:8088']
		}
	},
});
```

Message in browser console
```
[Warning] [blocked] The page at https://admin.iris.localhost:8088/app/soc.main/index.html was not allowed to run insecure content from ws://localhost:6020/deepstream. (bundle.js, line 641)
```

Server code
```
const { Deepstream } = require( '@deepstream/server' ); // v.5.0.5

const DeepstreamServer = new Deepstream( {
	httpServer: {
		type: 'default',
		options: {
			port: 6020,
			host: '127.0.0.1'
		}
	},
})

DeepstreamServer.set('authentication', {
	isValidUser( handshakeData, authData ) {
		return {
			isValid: true,
			id: authData.username,
		}
	},
	async whenReady () {
		console.log('whenReady')
	},
	//	This event never fired!!!
	onClientDisconnect( username ) {
		console.log( 'onClientDisconnect', username )
	},
});

DeepstreamServer.start();
console.log( 'DeepStream started...' );
```

When trying to stop a Deepstream server it does not release/finish the node process, but hangs instead. The following example never exits.

```
const { Deepstream } = require('@deepstream/server');

const run = async () => {
  const server = new Deepstream('./emptyConf.yml');
  server.start();
  await new Promise(r => setTimeout(r, 5000));
  server.stop();
};

run();
```
Node API docs first example does not work:

```
const { Deepstream } = require('@deepstream/server')
const server = new Deepstream()
```

It gives the following error output:
```
(node:28249) UnhandledPromiseRejectionWarning: Error: No config file found
    at getDefaultConfigPath (/home/blomqesb/dev/web/ds-node-service/node_modules/@deepstream/server/src/config/js-yaml-loader.ts:194:9)
    at setGlobalConfigDirectory (/home/blomqesb/dev/web/ds-node-service/node_modules/@deepstream/server/src/config/js-yaml-loader.ts:129:7)
    at Object.exports.loadConfigWithoutInitialization (/home/blomqesb/dev/web/ds-node-service/node_modules/@deepstream/server/src/config/js-yaml-loader.ts:61:22)
    at Object.exports.loadConfig (/home/blomqesb/dev/web/ds-node-service/node_modules/@deepstream/server/src/config/js-yaml-loader.ts:87:24)
    at Deepstream.loadConfig (/home/blomqesb/dev/web/ds-node-service/node_modules/@deepstream/server/src/deepstream.io.ts:455:35)
    at new Deepstream (/home/blomqesb/dev/web/ds-node-service/node_modules/@deepstream/server/src/deepstream.io.ts:91:10)
    at Object.<anonymous> (/home/blomqesb/dev/web/ds-node-service/test/bug1.js:3:16)
    at Module._compile (internal/modules/cjs/loader.js:959:30)
    at Object.Module._extensions..js (internal/modules/cjs/loader.js:995:10)
    at Module.load (internal/modules/cjs/loader.js:815:32)
(node:28249) UnhandledPromiseRejectionWarning: Unhandled promise rejection. This error originated either by throwing inside of an async function without a catch block, or by rejecting a promise which was not handled with .catch(). (rejection id: 2)
(node:28249) [DEP0018] DeprecationWarning: Unhandled promise rejections are deprecated. In the future, promise rejections that are not handled will terminate the Node.js process with a non-zero exit code.
```

I found a few issues with storage authentication. I was able to fix them, but was not able to successfully submit a pull request. Attached is the source file with my changes.
Here are the issues:

- "storageId" constant was defined after it was accessed
- when creating a new user, the result was not properly returned in a promise
- when validating an existing user, the partition between the hash and the salt was not properly done due to variableness in the length of the base64-encoded hash

[storage-based-authentication.ts.zip](https://github.com/deepstreamIO/deepstream.io/files/3889625/storage-based-authentication.ts.zip)


Trying to add as a service 
sudo ./deepstream service add -c ./conf -l /var/log

Fails with the following error . The Service was never installed.

Service already exists, please uninstall first

deepstream version: 5.0.4
This is meant to be a continuation of the conversation on #867, but since so much has changed I wanted to open up a new discussion.

Over the last six months since I quit my day to day job we have implemented ALOT of new concepts and cleanups in deepstream.io, including:

1) Adding MQTT, JSON and Protobuf endpoints
1a) allowing you to easily add any other protocol seamlessly
1b) allow all those protocols to actually talk to each other
2) Adding offline functionality to the JS client
3) Adding official plugin support for over 7 core extensions types AND the ability to create custom plugins
4) Creating a HTTP endpoint that allows you to easily just register your own HTTP calls and websockets into the server, and also use the awesome uws stack across the whole networking stack. (You can even cluster lots of servers on one machine now just having redis installed locally).
5) New website in gatsby and react that is automatically generated from markdown, minus a couple main files
6) New realtime-search provider
7) Changed license to MIT
8) Adding monitoring into the opensource core
9) Added new authentication types
10) Refactored everything to actually make it easier for people to contribute, I hope

And so much more.

However, all this work has not been easy and I have spent most of my professional time working on this in the second half of 2019, with alot of <3 and financial support from companies such as [backboneplm](https://backboneplm.com/) that helped me get deepstream from where it left off in #867 to where it is today.

That being said, I'm finding it hard to maintain the large eco-system that compromises deepstream alone, and although there have been core community members ❤️that have contributed there is just ALOT of things to ensure are up and running which make it more like a drop in puddle.

As such I'm now looking to move all non-core aspects to contributors, including:

- all connectors to third party systems (cache, database, clustering, monitoring) 
- front-end frameworks like angular, react, knockout, vue
- mobile frameworks like react-native, etc

Alot of these projects are only ~100 lines of code and I feel like it's a great place for people to get their feet wet with opensource and very well scoped projects in node. I'm more than happy to add author tags into any documentation and point to a repo in your github/bitbucket account, as long as it falls under a `community` flag.

I'm also looking for people who are looking to build and maintain SDKs in different languages. This is definitely not that easy however it's a fun project that can take a few days (for a simple one). 

You can even write connection-adaptors for deepstream to allow it to understand other protocols that already exist, similar to those found on [ably.io](https://www.ably.io/adapters) (a great paas alternative 😁).

Writing a small front-end library is easy to maintain as a sole contributor and can be taken over easily if they step down. However writing a product that is meant to rival a company backed by google like [firebase](https://firebase.google.com/) and keeping it opensource is not simple.

My gut feeling is that I feel this sort of technology can help most small to medium size companies get from a concept to production with realtime tech in zero time, if used as intended. My biased view is that it is superior to other node-based tech out there, since there are barely any other node based projects that allow you deploy a scalable data-sync platform with just a couple of docker images. 

However, at the same time there are a tiny amount of contributions and I had to sacrifice the majority of my paycheck in order to give it the love these last few months (I haven't exactly reached that point in life where I have a safety net to be able to continue to do that). 

Anyways this is the current thought process I'm going through. Since this is *open source* I figured it makes sense for me to be transparent and to allow the community to provide feedback, suggestions and hopefully a couple of people to volunteer to become core contributors to motivate me to keep this project going on the long term and avoid me from potentially burning out.

Thanks for the reading!
Deepstream.io v5.0.4 Linux binary

As I wasn't able to set custom db name in Deepstream config, I created in RethinkDB web interface fresh database `deepstream` and then a `devices` table in it (but I changed primary key name to `imei`).
Then inserted sample document
`r.db('deepstream').table('devices').insert({
  imei: "123456789876543",
  holder: "John Doe",
  contacts: ["john@doe.com", "doe@john.com"]
})`

Now I accessed local HTML file to read `holder` value.
```
<!DOCTYPE html>
<html>
    <head>
        <script src="https://cdn.deepstream.io/js/client/latest/ds.min.js"></script>
    </head>
    <body>
        <script type="text/javascript">
            const client = new DeepstreamClient('ip:6020')
            client.login()
            const record = client.record.getRecord('123456789876543')
            console.log(record.get('holder'));
        </script>
    </body>
</html>
```

Unfortunately it causes immediate server crash.
Result:
```
CONFIG_TRANSFORM | Loaded content from /root/deepstream/conf/permissions.yml for fileLoad(permissions.yml)
INFO | logger ready: std out/err
INFO | server name: k2nr950f-y1l1uyke5ao0
INFO | deepstream version: 5.0.4
INFO | configuration file loaded from conf/config.yml
INFO | library directory set to: /root/deepstream/lib
CLUSTER_JOIN | k2nr950f-y1l1uyke5ao0
CLUSTER_SIZE | The cluster size is now 1
INFO | logger ready: std out/err
INFO | monitoring ready: Noop Monitoring
INFO | subscriptions ready: Subscription Registry
INFO | cache ready: Local Cache
INFO | permission ready: Valve Permissions
INFO | locks ready: Distributed Lock Registry
INFO | clusterNode ready: Single Cluster Node
INFO | clusterRegistry ready: Distributed Cluster Registry
INFO | clusterStates ready: Distributed State Registry
INFO | authentication ready: Open Authentication
INFO | Listening for http connections on 0.0.0.0:6020
INFO | Listening for health checks on path /health-check
INFO | httpService ready: NodeJS HTTP Service
INFO | storage ready: Rethinkdb Storage Connector 2.0.0
INFO | connectionEndpoint ready: Binary WebSocket Connection Endpoint
INFO | connectionEndpoint ready: WS Text Protocol Connection Endpoint
INFO | connectionEndpoint ready: WS Text Connection Endpoint
INFO | connectionEndpoint ready: HTTP connection endpoint
INFO | Deepstream started
INCOMING_CONNECTION | from undefined (censored.ip.address.__)
AUTH_SUCCESSFUL | open

/root/deepstream/lib/@deepstream/storage-rethinkdb/src/connector.ts:155
            version = entry.__ds._v
                                 ^
TypeError: Cannot read property '_v' of undefined
    at rethinkdb.table.get.run (/root/deepstream/lib/@deepstream/storage-rethinkdb/src/connector.ts:155:34)
    at tryCatcher (/root/deepstream/lib/@deepstream/storage-rethinkdb/node_modules/bluebird/js/main/util.js:26:23)
    at Promise.successAdapter (/root/deepstream/lib/@deepstream/storage-rethinkdb/node_modules/bluebird/js/main/nodeify.js:23:30)
    at Promise._settlePromiseAt (/root/deepstream/lib/@deepstream/storage-rethinkdb/node_modules/bluebird/js/main/promise.js:582:21)
    at Promise._settlePromises (/root/deepstream/lib/@deepstream/storage-rethinkdb/node_modules/bluebird/js/main/promise.js:700:14)
    at Async._drainQueue (/root/deepstream/lib/@deepstream/storage-rethinkdb/node_modules/bluebird/js/main/async.js:123:16)
    at Async._drainQueues (/root/deepstream/lib/@deepstream/storage-rethinkdb/node_modules/bluebird/js/main/async.js:133:10)
    at Immediate.Async.drainQueues (/root/deepstream/lib/@deepstream/storage-rethinkdb/node_modules/bluebird/js/main/async.js:15:14)
    at runCallback (timers.js:705:18)
    at tryOnImmediate (timers.js:676:5)
    at processImmediate (timers.js:658:5)
```
I am using Deepstream.io v5.0.4 binary for Linux.
My configuration file (config.yml) looks like this
```
storage:
  name: rethinkdb
  options:

    host: localhost
    port: 28015

    database: mydatabase
    defaultTable: mytable

    splitChar: /
```

It's default config + copy & pasted config from Deepstream docs of the RethinkDB connector at the end of file.
First, I realised the [docs](https://deepstream.io/tutorials/plugins/database/rethinkdb/) are outdated. There is `path: rethinkdb`, but I had to change it to `name: rethinkdb`.

But the main problem is -- I can't set default DB name to `mydatabase`. When deepestream server is launched, it always creates a new database called `deepstream` and creates a table called `mytable`.

Is there any syntax change for the `database:` option, as same as for `path:` -> `name:`?
Writing UTs for a CLI command is just absurdly complex (given it actually loads up large parts of the server and reads files)

But for things like

Deepstream info
Deepstream hash
Deepstream Nginx

And so forth it would be good to write small scripts that ensure they actually run and return parts of what we would expect.

