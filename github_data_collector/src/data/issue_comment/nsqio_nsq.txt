Using the golang nsdq client.

What is the correct way to consume all the messages of a channel, and then when it is empty, stop the consumer and eliminate the topic and / or the channel?
right now an nsqd  client doesn't refresh it's ip connections to lookupd on lookupd DNS changes.  this causes a problem on long running instances when a lookupd instance gets rebuilt.
Hello, 

I noticed nsqd correctly marked the health state to "not ok" (e.g. via /ping end point) when disk is full and a message is published. However, it did not do this when a message is published to *existing* topic -- even worse, it reset the state to healthy/ok.

Steps to replicate:

```
./nsqd -mem-queue-size=0
curl 'http://localhost:4151/ping'
## see OK
echo "Haha" | ./to_nsq --topic t1 --nsqd-tcp-address 127.0.0.1:4150 --rate 1000
curl 'http://localhost:4151/ping'
## see OK
sudo fallocate -l 80G penuh80g
df
## see 0 available space left
curl 'http://localhost:4151/ping'
## see OK
echo "Haha" | ./to_nsq --topic t1 --nsqd-tcp-address 127.0.0.1:4150 --rate 1000
curl 'http://localhost:4151/ping'
## still OK
echo "Hoho" | ./to_nsq --topic t2 --nsqd-tcp-address 127.0.0.1:4150 --rate 1000
curl 'http://localhost:4151/ping'
## now NOK
echo "Haha" | ./to_nsq --topic t1 --nsqd-tcp-address 127.0.0.1:4150 --rate 1000
## sending to existing topic reset the error status -- now OK
df
## see 0 available space left
```
![ÂõæÁâá](https://user-images.githubusercontent.com/41467027/71457313-3d1dbe00-27d8-11ea-96ef-c6f2ce7b9bff.png)
![ÂõæÁâá](https://user-images.githubusercontent.com/41467027/71457319-4c047080-27d8-11ea-8df1-1b6352c38c11.png)


Is this a bug
Users cannot create topic through nsqadmin
The topic created cannot be implemented to nsqd

This can help distinguish log levels in gcp stackdriver üëç 
This PR will fix register db write lock starvation.

We have encountered a circumstance: 
* we have many topics with many ephemeral channels.
* our cluster fo nsqd is large with more than 600+ instances. 
* some channels will register and unregister itself normally since the consumer client can break because timeout is readed or other various situations.

And, finally, the register db is large.

So the lookup api will consume some little more time to respond. In the case where a lookup api get the read lock fo register db, all the write lock, for example, register/unregister channels, will be blocked. And since the read lock can be acquired simultaneously by lookup requests, the operations that needs  write lock will all be blocked and the memory and goroutine will accumulated.

This PR will add a cache for the FindProducers resposne. TTL is 1 minute, the purge operation will be operated at 5 minutes interval.

Corns: 
* This will add some pressure on the memory since a new memory will be allocated.
* newly added nsqds instance may have some more time to be discovered by consumer.
There were some small errors in bench.py (fixes #1202):

- ssh_connect_with_retries() did not ask for the ssh key
- I also added some logging in ssh_cmd()
- bootstrap(addr) followed the old build process
- run() called the async ssh command, however, sometimes the pkill killed the deamon immediately; so I switched to the usual ssh_cmd and to screen
I'd like to provide an experience report from introducing new nsqd nodes to a cluster while operational activities which involve pausing channels are underway.

---

Currently nsqd discovers the topic/channel topology from `nqlookupd` when it receives a new message. This ensures that if you have say 10 channels on a topic, all 10 channels get a copy of the first message.

If a channel is in a paused state when the first message is published to a new `nsqd` node it's naturally expected that the new node would also end up with channels in an appropriately paused states. That doesn't happen unfortunately because `nsqlookupd` has no context about the paused state of a channel, and so it can't provide it when queried by nsqd on a new topic creation. (There also isn't technically anything that requires all hosts to be paused or unpaused together, even though that's obviously most common)

---

Feature Request: `nsqd`  propagate topic/channel pause states to `nsqlookupd`. On discovery, nsqlookupd can advise if the majority of clients for a topic/channel are paused and if so, nqsd will create a pre-paused topic or channel. If there are no clients for a topic/channel connected to nsqd at the time of topic discovery, nsqd should create a topic and channel un-paused.  When `nsqd` queries multiple `nqslookupd` if any response indicates paused, the result should be a paused state. i.e. `paused` is preferred.

Note: nsqlookupd response changes to support this should be backwards compatible.
Currently messages are received in order of publishing and recently published messages are waiting to be received while older messages are completed. We have a requirement of receiving messages in random order. Read the docs but could not find any option. 

Is it possible?
Fix #1139 
Fix #1137 