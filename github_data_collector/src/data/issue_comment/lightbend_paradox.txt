An issue was noted [here](https://github.com/cloudstateio/cloudstate/issues/178) with the doc for the [Cloudstate](https://cloudstate.io) project: The markdown for emojis/icons, which appear to be supported, don't appear in the output as images, but as the original markdown.

In [this page in the Paradox doc](https://developer.lightbend.com/docs/paradox/current/overview.html), we say we support GitHub-flavored markdown (e.g. [this style](https://help.github.com/en/github/writing-on-github/basic-writing-and-formatting-syntax)), which in turn [supports Emojis]( https://help.github.com/en/github/writing-on-github/basic-writing-and-formatting-syntax#using-emoji). However, any use of ✔️, etc appear as the source markdown in the output.

I was able to verify this locally (by building the Cloudstate doc locally), but have not tried every variation.


We are using paradox 0.6.8 version and  while running `paradoxValidateLinks` we get a whole bunch of 301 redirect errors, mostly saying that 

```
Received a 301 Moved Permanently on external link, location redirected to is [https://github.com/tmtsoftware/myproject/blob/master/..] at somepage.md
```

and we have set `github.base_url` to `https://github.com/tmtsoftware/myproject/tree/master/..`.

By looking at the code of `validateExternalLink` method

```
private def validateExternalLink(capturedLink: CapturedLink, errorContext: ErrorContext, logger: ParadoxLogger) = {
    logger.info(s"Validating external link: ${capturedLink.link}")

    def reportError = reportErrorOnSources(errorContext, capturedLink.allSources)(_)
    val url = capturedLink.link.toString

    try {
      val response = Jsoup.connect(url)
        .userAgent("Paradox Link Validator <https://github.com/lightbend/paradox>")
        .followRedirects(false)
        .ignoreHttpErrors(true)
        .ignoreContentType(true)
        .execute()

      // jsoup doesn't offer any simple way to clean up, the only way to close is to get the body stream and close it,
      // but if you've already read the response body, that will throw an exception, and there's no way to check if
      // you've already tried to read the response body, so we can't do that in a finally block, we have to do it
      // explicitly every time we don't want to consume the stream.
      def close() = response.bodyStream().close()

      if (response.statusCode() / 100 == 3) {
        close()
        reportError(s"Received a ${response.statusCode()} ${response.statusMessage()} on external link, location redirected to is [${response.header("Location")}]")
      } else if (response.statusCode() != 200) {
        close()
        reportError(s"Error validating external link, status was ${response.statusCode()} ${response.statusMessage()}")
      } else {
        if (capturedLink.hasFragments) {
          validateFragments(url, response.parse(), capturedLink.fragments, errorContext)
        } else {
          close()
        }
      }
    } catch {
      case NonFatal(e) =>
        reportError(s"Exception occurred when validating external link: $e")
        logger.debug(e)
    }
  }
```

Here, `followRedirects` is hardcoded `false` in `validateExternalLink` method. Hence, can we take a customised boolean setting from users like `followRedirects` to let them choose whether paradoxValidateLinks errors out on 301 or not ?

We can also think to take custom error code list to fail only on limited errors mentioned (white list of error codes or black list of error codes or both available as settings and if both are provided then default to white list).
Updates [com.geirsson:sbt-ci-release](https://github.com/olafurpg/sbt-ci-release) [from 1.3.2 to 1.5.0](https://github.com/olafurpg/sbt-ci-release/compare/v1.3.2...v1.5.0).
[Release Notes/Changelog](https://github.com/olafurpg/sbt-ci-release/releases/tag/v1.5.0)

I'll automatically update this PR to resolve conflicts as long as you don't change it yourself.

If you'd like to skip this version, you can just close this PR. If you have any feedback, just mention me in the comments below.

Have a fantastic day writing Scala!

<details>
<summary>Ignore future updates</summary>

Add this to your `.scala-steward.conf` file to ignore future updates of this dependency:
```
updates.ignore = [ { groupId = "com.geirsson", artifactId = "sbt-ci-release" } ]
```
</details>

labels: sbt-plugin-update, semver-minor
```
[error] java.net.URISyntaxException: Illegal character in path at index 28: /home/aengelen/dev/akka-http docs/docs/src/main/paradox
[error]         at java.net.URI$Parser.fail(URI.java:2848)
[error]         at java.net.URI$Parser.checkChars(URI.java:3021)
[error]         at java.net.URI$Parser.parseHierarchical(URI.java:3105)
[error]         at java.net.URI$Parser.parse(URI.java:3063)
[error]         at java.net.URI.<init>(URI.java:588)
[error]         at com.lightbend.paradox.markdown.Path$.relativeLocalPath(Page.scala:234)
[error]         at com.lightbend.paradox.ParadoxProcessor.mapping$1(ParadoxProcessor.scala:413)
[error]         at com.lightbend.paradox.ParadoxProcessor.$anonfun$rootPageMappings$1(ParadoxProcessor.scala:418)
```
File 1: /paradox/index-a.md
```
@@toc { depth=2 }
@@@ index

* [a-topic](common/a-topic.md)
```

File 2: /paradox/typed/index-a.md
```
@@toc { depth=2 }
@@@ index

* [a-topic](../common/a-topic.md)
```

* If you only have the entry in file 2, it is in the index.
* If you have the entry in both the root and the subdir indexes, the subdir index entry gets **silently** removed.
* It is removed from the subdir index even if you name the labels differently
Fixes #14

A little something I've been working on in my spare time (I've wanted to do this for ages, since before Paradox existed, I wanted to do it for playdoc).

So, there's actually quite a few features in this. First is single page support, this allows generation of a single page site using `paradoxSingle`:

* A few overidden link renderers and directives have been made to rename all anchors/ref links to `#path/to/page.html~anchor`.
* Header rendering is overridden to offset header depth by the pages depth in the forest, and also to wrap the header content in a span to allow inserting a counter via css (otherwise it messes with the anchor).
* toc directive is disabled, doesn't make sense to have a TOC in the middle of a single page document.
* Images are resolved so they can be included in the single page
* A new template, `single.st`, is used to render the page, it's passed the first page as `page`, and the rest of the `pages` as pages.
* toc renderer (for nav) is overridden to support correct link generation
* `single.st` links to both `page.css`, and `single.css`, so if `page.css` has been overridden, `single.st` will just get that.
* `single.css` adds styling counters to number headings up to 4 levels deep, and adds the necessary numbering to the nav too.

The next feature is a print layout support, which can be compiled by running `paradoxPdfSite`:

* Introduced a `print.st` and `print.css`. Basically, foundations grid layout messed up wkhtmltopdfs rendering, so the print template gets rid of all that, and while it's at it, it drops all navs, headers, footers, etc. They aren't needed.
* There's also a `print-cover.st`, this is for rendering the cover page.

Finally, the PDF support, which can be run by running `paradoxPdf`:

* Runs a [wkhtmltopdf](https://wkhtmltopdf.org/) docker image that I built. Using a docker image has a few advantages, it means it works on all platforms that have docker, but it also avoids problems where wkhtmltopdf running on different platforms can produce different results. Biggest disadvantage - the docker image is 2GB.
* Generates a table of contents. There's a `print-toc.xslt` (xslt!!) that converts the generated overview xml file from wkhtmltopdf to a table of contents, this includes the `page.css`, `single.css` and `print.css` stylesheets, so the TOC is styled by those, and by default, it will number all the headings in the same way that they are numbered in the document.
* The output of `print-cover.st` is used as the cover page.
* Everything seems to work, page numbers, footers, it renders nicely, prettify works.

The regular paradox config for all these commands can be customised, so for example if you want to pass custom properties just for the PDF, use `paradoxProperties in (Compile, paradoxPdf)`, it defaults to the normal one, so you can append to it too to add or override properties.
When developing custom theme on Windows minimal webjar assets are not included in theme resources.

`referencedWebjarAssets` returns all referenced assets:
```
[info] Set(lib/foundation/dist/css/foundation.min.css, lib/jquery/jquery.min.js, lib/foundation/dist/js/foundation.min.js, lib/foundation/dist/css/foundation-prototype.min.cs
s, lib/foundation/dist/css/foundation-float.min.css)
```
Accoring to `show webModules / mappings` all referenced resources are on classpath:
```
[info] * (C:\Git\nczi-paradox\theme\target\web\web-modules\main\webjars\lib\foundation\dist\css\foundation-float.min.css,lib\foundation\dist\css\foundation-float.min.css
)
[info] * (C:\Git\\nczi-paradox\theme\target\web\web-modules\main\webjars\lib\foundation\dist\css\foundation-prototype.min.css,lib\foundation\dist\css\foundation-prototype
.min.css)
[info] * (C:\Git\\nczi-paradox\theme\target\web\web-modules\main\webjars\lib\foundation\dist\css\foundation.min.css,lib\foundation\dist\css\foundation.min.css)
[info] * (C:\Git\nczi-paradox\theme\target\web\web-modules\main\webjars\lib\foundation\dist\js\foundation.min.js,lib\foundation\dist\js\foundation.min.js)
...
[info] * (C:\Git\nczi-paradox\theme\target\web\web-modules\main\webjars\lib\jquery\jquery.min.js,lib\jquery\jquery.min.js)
```

But when compared in `ParadoxThemePlugin`  in `WebKeys.exportedMappings` with `include(path)` there is no match, because `referencedWebjarAssets` are using URL slash `/`, but `webModules / mappings` are using Windows file separator `\`.

Our current workaround is to override `referencedWebjarAssets` and normalize it to file separator slashes with help of `SbtWeb.path`:
```sbt
Assets / referencedWebjarAssets ~= (_.map(SbtWeb.path(_)))
```
It would make sense to produce a (eg. CSV) file of the link validation reporting so it can be easier consumed for fixing links.

Especially when URLs validate with HTTP 429 "Too many requests" those could be verified manually at a later point.
Markdown links with anchors to the current page do not validate correctly.

It works for `@ref` links with just the anchor name.


```
Could not find path [jms/] in site at /Users/enno/dev/alpakka/docs/src/main/paradox/jms/consumer.md:61
selector                | JMS selector expression (see [below](#using-jms-selectors))          | Empty               |
```

Paradox 0.6.5

You may have some html files that you want included in tocs and navigation that are not generated from markdown - for example API docs (in my case, I have multiple embedded api docs, for different languages that this project supports, and I want them to be part of the overall navigation). It would be ideal if these could be included in the navigation, eg:

```
@@@index

* [Foo](foo.md)
* [Bar](bar.md)
* [API docs](api/index.html)

@@@
```