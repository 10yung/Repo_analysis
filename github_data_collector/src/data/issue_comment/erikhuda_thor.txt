Not sure if the fix implementation is good enough. Let me know if you want some changes.

Closes #706.
Try to replace text but skip overwritting file with pretend option
Before this commit 25dc317f71f5d212d63fbd9eb4b81bd437ee762f inject_into_file with pretend option was printing inject line, but now it complains about file didn't change.

The best way it would try to replace and return success, without writing file
If I use `append_file` or `insert_into_file` in a generator, and I execute generator twice, then `File unchanged! The supplied flag value not found!` warning is printed.

Is this the expected behavior. It sounds curious to me. Why doesn't it print `identical` or `unchanged` without warning, since `content.include?(replacement)` returns true?

Related to #683
Hi, I'm curious why nobody asking insert_into_file with between feature? I was get embarrassed many times without any solution to do this:

Here is a simplified webpacker.yml that we just focus on the key point.
 
```yaml
# config/webpacker.yml
default: &default
  extract_css: false
development:
  <<: *default
test:
  <<: *default
production:
  <<: *default
  extract_css: true
```

I'm going to write a rails template that add `extract_css: true` to `development` section with this code:

```ruby
inject_into_file 'config/webpacker.yml', after: /^development:\n *<<: \*default\n/ do
  <<~YAML.indent(2)
    extract_css: true
  YAML
end
```

unfortunately `extract_css: true` already exists after production section which also after development section, so inject_into_file will do nothing.

what if `inject_into_file` support option `between` or bi-options `after` + `before`, it should inserted successfully.

```ruby
inject_into_file 'config/webpacker.yml', between: [/^development:\n *<<: \*default\n/, /^production:/] do
  <<~YAML.indent(2)
    extract_css: true
  YAML
end
```

or

```ruby
inject_into_file 'config/webpacker.yml', after: /^development:\n *<<: \*default\n/, before: /^production:/ do
  <<~YAML.indent(2)
    extract_css: true
  YAML
end
```
Hi,

i need to build a program which performs different action depending on the name it is called by symlinking (like busybox and some other do), i.e.  instead of  calling program command   do a symlink ln -s program command and then just call it as command. 

A simple 
ARGV.unshift File.basename($0,'.rb')
does the job, but then the program does not respond to --help or help anymore. 

Would be nice to get some support for that. 


There could be cases where users have a very short name for the package
name, which is the cli name, in such cases it would be good to provide a
way to add a top-level package description just like there is for
sub-commands.

## Example.

With the following class:
```
class Marvel < Thor
  package_name "marvel"
  package_description "A command-line interpreter for the Marvel Corporation."
end
```

We would see the follosing help:
```
$ marvel help
A command-line interpreter for the Marvel Corporation.

marvel commands:
```

Signed-off-by: Salim Afiune <afiune@chef.io>
How to display a custom message when the program cannot find a command?
Using this toy example:

```
#!/usr/bin/env ruby

require "thor"
require "thor/group"

class MyGroup < Thor::Group
  class_option :opt, aliases: :o, default: "1"

  def one
    puts options[:opt]
  end
end

class MyCLI < Thor
  register(MyGroup, "print_opt", "print_opt", "Prints the options")
end

MyCLI.start
```

And running:

```
bundle exec broken_class_options.rb help print_opt
```

Produces this output:

```
Usage:
  broken_class_options.rb print_opt
```

The class options are not printed for this group. This appears related to this issue: https://github.com/erikhuda/thor/issues/402


As seen in following line, currently `Thor::Shell::Basic#say_status` prints its content to `stdout`.
https://github.com/erikhuda/thor/blob/04d75607b9d5d93079f898377a7d609778315c9c/lib/thor/shell/basic.rb#L120

I think, in case we `say_status`, we'd generally want to print that message to stderr; if you are making an cli tool whose main purpose is to print some information to `stdout`, then `say_status` saying status to `stdout` is a bit troublesome.

So, if this sounds sensible to the library maintainers, then I plan to make a PR for such change; changing output of `say_status` to `stderr`.

Any opinion/suggestions or reason this is not good idea?