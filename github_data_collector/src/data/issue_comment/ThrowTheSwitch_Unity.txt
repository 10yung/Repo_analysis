Since the regular expressions in https://github.com/ThrowTheSwitch/Unity/blob/master/auto/generate_test_runner.rb#L452 and https://github.com/ThrowTheSwitch/Unity/blob/master/auto/generate_test_runner.rb#L458 are too "liberal", paths to the output file containing .h/.yaml/.yml are interpreted as files so the default output filename is used instead.

Example for commandline argument path containing `.h`:
`generate_test_runner.rb default.yml test_mocked_TestM_Handler_Main.c C:/Jenkins/workspace/ler-set-wuccfg.hardfault_set-bit/build/test_mocked_TestM_Handler_Main_Runner.c`
Create a dummy.h, use this file as the source to generate mock_dummy.h .

    #ifndef DUMMY_H_
    #define DUMMY_H_
    
    extern void Func(void);

    #endif

Do test on following test file.

    // Test file
    #include "unity.h"
    #include "mock_dummy.h"
    void tearDown(void)
    {
        Func();
    }
    void Test_DoTest(void)
    {
        Func();
    }

The test would crash and generate empty output.
Hi all,

I am using some malloc() calls in my tests. But I am not able to allocate more than 250 bytes using malloc().
Like a ,
`int * myPtr = (int* ) malloc(400); `
results in a segFault. malloc() does not return a NULL pointer in this case.
Other malloc() calls which request much smaller memory are working fine.
Also I free() all pointers after their use is over in each test case.

Does Unity somehow put a limit on amount of heap memory that can be allocated?
If yes, is that configurable ? 
 
Thanks,
Shubhi
This is an initial step for adding support to CMock to support files with extensions other than only .h and .c. For example this permits easier use with C++ projects that use file extensions like .hh, .hpp, .cc, .cpp, .cxx, etc.
There is something anoying when testing heavily nested libraries with many .c files. 
For example: an error message is:
<path to c file>/some_file.c:31:<test_name>:FAIL: Expression Evaluated To FALSE
but maybe the line number 31 is not from some_file.c but from another nested function within another .c file that called TEST_ASSERT, instead. 
Tracking the file that actually failed is somehow time consuming. 


This option allows you to specify your own function to print additional context
as part of the error message when a test has failed.  It can be useful if you
want to output some specific information about the state of the test at the
point of failure, and UNITY_SET_DETAILS isn't flexible enough for your needs.
Also fix some whitespace consistency issues.
Use 2 newlines (not 1 or 3) before /*====Heading====*/ comments.
when `-Wfloat-equal` option is configured, float number compared with `==` will report an error, replace it with `fabs(a-b) < PRECISION` is more safe.
I'm defining `UNITY_INCLUDE_PRINT_FORMATTED` in my test, but when I try to use `UnityPrintFormatted`, I get a linker error claiming: 

```
build/test/out/c/test_robot_bus_power.o: In function `test_robot_bus_power_current_scaling':
/home/brett/workspace/firmware/link-controller/test/robot/test_robot_bus_power.c:33: undefined reference to `UnityPrintFormatted'
collect2: error: ld returned 1 exit status
ERROR: Shell command failed.
> Shell executed command:
'gcc "build/test/out/c/test_robot_bus_power_runner.o" "build/test/out/c/test_robot_bus_power.o" "build/test/out/c/mock_robot_internal_adc.o" "build/test/out/c/unity.o" "build/test/out/c/robot_bus_power.o" "build/test/out/c/cmock.o" -o "build/test/out/te
st_robot_bus_power.out"'
> And exited with status: [1].


NOTICE: If the linker reports missing symbols, the following may be to blame:
  1. Test lacks #include statements corresponding to needed source files.
  2. Project search paths do not contain source files corresponding to #include statements in the test.
  3. Test does not #include needed mocks.

rake aborted!
```
I checked `unity.h` and it is most definitely there. 

I am using ceedling 0.29.0
I'm able to run my unit tests and get the correct PASS/FAIL results, but "make" is returning an error.  I'm using GNU make 3.81.  My console output is shown below, with the make error in **bold**.


```
$ make
rm -f test_timer.exe
gcc -std=c99 -Wall -Wextra -Wpointer-arith -Wcast-align -Wwrite-strings -Wswitch-default -Wunreachable-code -Winit-self -Wmissing-field-initializers -Wno-unknown-pragmas -Wstrict-prototypes -Wundef -Wold-style-definition -fprofile-arcs -ftest-coverage -g -O0 -I. -I../../unitTest/Unity-master/src  ../../unitTest/Unity-master/src/unity.c timer.c  test_timer.c  test_runner/test_timer_Runner.c -o test_timer.exe
./test_timer.exe
test_timer.c:21:test_timerExpired_uint32:PASS

-----------------------
1 Tests 0 Failures 0 Ignored
OK
**make: [default] Error 2 (ignored)**
$
```
Any ideas on how I can fix this error?

Thanks,
Matt