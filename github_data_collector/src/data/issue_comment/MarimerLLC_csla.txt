**Describe the bug**
Fetching a large (~10k) data set using CSLA 5.0.1 takes several seconds (5-6). Doing the same with version 4.11.2 takes less than one second (~200ms). For a minimal example see https://github.com/ka-fim/CSLA-Performance

**Version and Platform**
CSLA version: 5.0.1
OS: Windows
Platform: .Net Framework 4.7.2
**Describe the bug**
The PropertyStatus control is not showing on any broken rules when using a .Net Core 3 WPF project. Both for .net core 3.0 and 3.1.

I have created a simple project in both WPF .Net project and WPF .Net Core 3.1 project with the same code. In WPF .Net the brokenrule triggers the error display of the PropertyStatus control. In the WPF .Net Core 3.1 project nothing happens.

**Version and Platform**
CSLA version: 5.0.1
OS: Windows
Platform:  WPF .Net Core 3.1

Set up a CSLA-specific NuGet feed (not on nuget.org, but on Azure DevOps or MyGet or something) so every CSLA CI/CD build in master results in an updated set of packages pushed to this feed.

That would allow people who want to use these "daily builds" to reference them by adding the feed to their Visual Studio instance. It would simplify testing quite a lot for people working on CSLA itself too.
#1312 
**Describe the bug**
I used the MinLength rule in some unit tests in Csla.Blazor.Test without specifying the optional message parameter. The AppVeyor build failed, and this appears to be because there is a missing resources entry that the MinLength rule requires, but only under the culture under which AppVeyor runs tests. Unit tests were all passing when run on my local machine, which will execute under the culture of en-GB.

**Version and Platform**
CSLA version: 5.1 preview
OS/platform: AppVeyor, triggered by submission of PR to csla project on GitHub.

**Code that Fails**
rule = new Csla.Rules.CommonRules.MinLength(LastNameProperty, 2);
rule.Severity = Csla.Rules.RuleSeverity.Warning;
BusinessRules.AddRule(rule);

Rule is broken after update to the property with which the rule is associated

**Stack Trace or Exception Detail**
The LastName field is required.; rule://csla.rules.commonrules.minlength/LastName?min=2:Could not find the resource "Csla.Properties.Resources.resources" among the resources "" embedded in the assembly "Csla", nor among the resources in any satellite assemblies for the specified culture. Perhaps the resources were embedded with an incorrect name.

**Additional context**
Identified during submission of PR #1437

**Describe the bug**
When the code fix for CSLA0008 is applied when no modifiers exist on the property, the resultant code is odd.

**Version and Platform**
CSLA version: Whatever the latest is

**Code that Fails**
If I have my backing property defined like this:
```
    // This should fail because it isn't public
    PropertyInfo<bool> ResourceNotPublicProperty = RegisterProperty<bool>(c => c.ResourceNotPublic);
```
And I use the code fix, the resulting code looks like this:
```
    // This should fail because it isn't public
    public static readonly

    // This should fail because it isn't public
    PropertyInfo<bool> ResourceNotPublicProperty = RegisterProperty<bool>(c => c.ResourceNotPublic);
```
Technically, it **does** compile, but that's ugly. For some reason, it repeats the comment that's there. This doesn't happen if I have at least one modifier for the property. The code fix has to be better than that!
As of version 5.0 the `Csla` NuGet package only contains the default (en-us) language.

There's a doc that [describes two options for including localized resources via NuGet](https://docs.microsoft.com/en-us/nuget/create-packages/creating-localized-packages).

It sounds like the most direct approach is for the Csla nuspec to include the localized resources in the primary package.
**Is your feature request related to a problem? Please describe.**
No problem, just a code cleanup issue.

**Describe the solution you'd like**
I went through CSLA's code base using the VS Code Clones tool. There are a couple of areas where there are exact copies. Here are some examples:

- `BusinessBase.LoadProperty<P>(PropertyInfo<P> propertyInfo, P newValue)` - the code in the `try` block is duplicated in 6 other places.
- A lot of the portal classes - `GrpcPortal`, `HttpPortal`, and `RabbitMqPortal` - are copies.
- `CslaActionExtender.ExecuteSaveAction(ISavable savableObject, ITrackStatus trackableObject, CslaActionExtenderProperties props)` - this is duplicated in 3 other places.
- `GrpcProxy` and `HttpProxy` have duplication.
- `BusinessBase.InitializeBusinessRules()` is duplicated in `ReadOnlyBase`.

I realize that code duplication isn't always a "bad" thing in code, and sometimes trying to share code can actually be a detriment. That said, it may be worth seeing if some of these duplications can be eliminated.

**Describe alternatives you've considered**
Just leave it as-is :)
**Is your feature request related to a problem? Please describe.**
Manager classes can be removed in support of DI/IoC.

**Describe the solution you'd like**
I know CSLA has "manager" classes (like `ConnectionManager` and I think `DbContextManager`) that frankly should be handled by DI/IoC. With CSLA 5.0, injecting dependencies like this is pretty easy, and this is the pattern that is typically done in most code. Furthermore, using manager classes like this is a static, shared dependency and follows the service locator anti-pattern, and it makes it harder to write isolated unit tests.

Therefore, we should consider deprecating, or at least discouraging developers from using them. I realize these types are hard to remove given that they've been used in the past. But better patterns/approaches exist, and I think a long-term strategy should be investigated to remove them.

**Describe alternatives you've considered**
Keep the types in CSLA, but â€¦ discourage people from using them? :)
**Is your feature request related to a problem? Please describe.**
Ideally, we would like the ConnectionManager<T> class to support .NET 4.6's `SqlConnection.AccessToken` property. We're about to start using Azure MFA authentication, so we aren't going to be passing a User/PW but instead an Access Token. However, because ConnectionManager<T> calls `new C()` followed by `C.Open()`, there is no time to set the `AccessToken` property.

**Describe the solution you'd like**
Recognizing that this would probably break pre-4.6 apps, i could imagine three options.

1. Change ConnectionManager<T> to offer a virtual function we could override and set properties to prior to calling `Open` within an inherited class. For example, on Line 148 [here](https://github.com/MarimerLLC/csla/blob/9037cfee81f7fe98b1d8dec2150bc9962571f7e2/Source/Csla.Shared/Data/ConnectionManagerT.cs#L147), make a virtual function called `OnBeforeOpen`, where we could set it similar to how you do it in GetHttpClient [here](https://github.com/MarimerLLC/csla/blob/dc44e4d952049f4172b64a197799d7d259c5badd/Source/Csla.Shared/DataPortalClient/HttpProxy.cs)
1. Add a static event we'd listen for to set the connection's properties prior to calling `Open`.
2. Add a static dictionary of properties `<string PropertyName, object PropertyValue>` to set with reflection prior to calling `Open`.

**Describe alternatives you've considered**
The only other option would be to handle the sql references ourselves, which is basically reinventing the wheel since you already offer an excellent solution.