```
= asdf

[[h2]]
== h2 xref:h3[]

[[h3]]
=== h3 xref:h2[]
```

then at asciidoctor 20.10:

```
asciidoctor main.adoc
```

fails with:

```
stack level too deep
  Use --trace for backtrace
```

On GitHub: https://github.com/isaacs/github/issues/1718
resolves #1338
Info from https://discuss.asciidoctor.org/Awesome-Asciidoctor-Auto-Number-Callouts-td7488.html


In Asciidoctor it is possible to auto number callouts (see blog post https://mrhaki.blogspot.com). This information should be integrated in the Asciidoctor user manual.

```
= Callout sample
:source-highlighter: prettify
:icons: font
 
[source,groovy]
----
package com.mrhaki.adoc
 
class Sample {
    String username // <.>
 
    String toString() {
        "${username?.toUpperCase() ?: 'not-defined'}" // <.>
    }
}
----
<.> Simple property definition where Groovy will generate the `setUsername` and `getUsername` methods.
<.> Return username in upper case if set, otherwise return `not-defined`.
```

This makes it very easy to add new callouts without having to change all numbers we first typed by hand. 
When creating a `horizontal` description list with the last time containing a nested `horizontal` description list it captures content even after multiple new lines.

Given this markup

```asciidoc
[horizontal]
Term 1:: Some definition...
Term 2:: Some definition...
+
[horizontal]
Term 3::: Some definition...

A separate paragraph of text.
```

You get this output

![image](https://user-images.githubusercontent.com/53531/72182583-04b9da80-33a9-11ea-9d05-c36108e36f0d.png)

Note how the last paragraph is being captured as part of the description list.

When working with source code includes we often face the challenge that the code uses trailing line comments to force line breaks. This is particularly common when using builder APIs

```java
new Builder() //
  .someMethod(…) // <1>
  .someOtherMethod(…);
```

Note the trailing ` //` on the first line. If that kind of code is included in documentation I'd like to be able to define the trailing characters that should be stripped. I.e. a declaration like this:

```
[source, java, strip-trailing=" //"]
----
include::…
----
```

would result in

```java
new Builder()
  .someMethod(…) (1)
  .someOtherMethod(…);
```
- `hrows` attribute can be used to define the number of rows in the header (it can also be defined programmatically with `Asciidoctor::Table.header_rowcount` attribute)
- `header` option is now optional if `hrows` attribute has a value greater than one
- `hrows=0` has an higher precedence over  the `header` option (since the attribute is more specific). Meaning that a table with the following definition `[%header,hrows=0]` will have no header.

I think we should implement the same feature for footer using `frows` attribute but I don't want to introduce two features at once in this pull request.

resolves #1687
I tried to do the least amount of changes to make sure that if you are not using this feature the code is as fast as before.
For instance, I'm using the condition `stylesheet.include? ';'` but we could have a more readable/DRY code with:

```rb
stylesheets = ((doc.attr 'stylesheet').split ';').map {|v| v.strip }.reject {|v| v.empty? }
```

I've seen the following comment in the code "should Stylesheets also handle the user stylesheet?" and I think we should move some logic to `Stylesheets`:

```rb
Stylesheets.instance.write_user_stylesheets stylesoutdir # write user stylesheets to stylesoutdir
```
But `SafeMode#name_for_value` returns `nil` if the value is not found. 
I think we should use the same behavior between the two methods (ie. either throws an exception or returns nil if the SafeMode is not found).

Since the Asciidoctor API does not extensively use exceptions, I think we should return `nil` if the name is not found:

```ruby
SafeMode.value_for_name 'server'   # returns 10 (SafeMode::SERVER)
SafeMode.value_for_name 'paranoid' # returns nil
```
Current Situation
=============
`:chapter-refsig:` defines the prefix to a chapter number. 
E.g. 
`:chapter-refsig: Chap.`
will result in 
`Chap. 2. The Title`

Problem:
=======
There are situations, where the chapter number is actually in-between characters. This is the case for texts written in Japanese. In Japanese you would refer to the chapter as
`弟2章 The Title`

Idea:
====

1. Allow to setup a prefix and a postfix for numbered elements 
OR (even better)
2. allow advanced templating for chapter links
OR (maybe easier to implement)
3. Allow to reference the number / title seperately on a per-link base. E.g. `弟<<mysect NR>>章 (<<mysect TITLE>>)` 

The third idea is probably more flexible and easier to implement, than the first ones. However, it would mix content with styling, which is actually not wanted
If a start value is set, then the lines to highlight specified by the highlight attribute should be relative to the start value. In other words, if the start value is 5 and highlight=5, then the first line should be highlighted. Otherwise, it gets confusing which lines are being highlighted.

```
[source%linenums,ruby,start=5,highlight=6]
----
get {
  render "Hello, World!"
}
----
```

Note that this scenario is only relevant when linenums are enabled.