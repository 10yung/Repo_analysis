https://storybook.grommet.io/?path=/story/layer--fixed-header-scroll-body
When using the below, the time printed is not changing:
```
<Clock type="digital"  onChange={t => console.log(t)} />
```

### Expected Behavior

Time should increment on every printout

### Actual Behavior

Startup time is printed over and over again.

### URL, screen shot, or Codepen exhibiting the issue

https://codesandbox.io/s/grommet-sandbox-0e6bh
https://0e6bh.csb.app/clock

### Steps to Reproduce

Run the above code and check console

### Your Environment

<!--- Include as many relevant details about the environment you experienced the bug in -->

- Grommet version: 2.9.0
- Browser Name and version: Chrome (latest), FF (latest)
- Operating System and version (desktop or mobile): Win10

### Possible fix

Changed run() of Clock to fix:
```
      this.setState({ elements: nextElements }, () => {
        if (onChange) {
          if (elements.duration) {
            onChange(
              `P${nextElements.hours}H${nextElements.minutes}M${nextElements.seconds}S`,
            );
          } else {
            onChange(
              `T${nextElements.hours}:${nextElements.minutes}:${nextElements.seconds}`,
            );
          }
        }
```

I know is not a bug, but I'm trying to use grommet with the [react-hook-form](https://react-hook-form.com) library instead of formik. The react-hook-form is increasing its popularity and I think is a good way to manage forms in term of code quality and performance, but grommet seems to not be totally compatible with it.

Anyone tried react-hook-form with grommet? Any suggestion? I'm trying to use the `Select` component and the `forwardRef` prop to pass the `register` function (as needed by react-hook-form), but when I click on the select on browser everything crash, causing a blank page.

Here a codesandbox: https://codesandbox.io/s/grommet-select-not-working-with-react-hook-form-5rjsb

If you click twice on the second Select everything will crash.
<!--- Provide a general summary of the issue in the Title above -->

I'm trying to use redux-form with Grommet, and for some reason my validate function is getting passed "undefined" on submit. The function is getting passed the correct values whenever a change is made to one of my inputs. 

<!--- Tell us what should happen -->

Validate should be passed the same data on submit that it is passed whenever the form input is changed.

<!--- Tell us what happens instead -->

Validate is passed undefined.

### URL, screen shot, or Codepen exhibiting the issue

https://codesandbox.io/s/grommet-v2-template-jhb1f?fontsize=14&hidenavigation=1&theme=dark

### Steps to Reproduce

1. Open Console in order to register console.log statements
2. Type input into form field, and see the log statements originating from the `validate` function
3. Click "submit"
4. Logs show two different values for "formValues", one registered in the `validate` function (undefined) and one registered in the `onSubmit` function (accurate)

### Your Environment

<!--- Include as many relevant details about the environment you experienced the bug in -->

- Grommet version: 2.9.0
- Browser Name and version: Chrome Version 79.0.3945.79 (Official Build) (64-bit)
- Operating System and version (desktop or mobile): MacOS Mojave 10.14.6

### Expected Behavior

`Grid`s would have similar props to `Box`

### Actual Behavior

`Box` has many more stylistic props than `Grid`

### Reasoning

As `Grid`s and `Box`es are both used for basic layouting often, it could be beneficial to add similar stylistic props to `Grid`.

Currently focusing on `border` and `pad` before considering other props

See this Slack thread for more info - https://grommet.slack.com/archives/C04LMHN59/p1578672831048600
I'm trying to use [react-hook-form](https://react-hook-form.com) with grommet but I have a typing issue.

Using the register function provided by react-hook-form inside the `ref` prop (see react-hook-form doc) with `TextInput` component I get this compiling error:

```
TS2322: Type 'void' is not assignable to type 'string | (string & ((instance: HTMLInputElement) => void)) | (string & RefObject<HTMLInputElement>) | (((instance: Component<TextInputProps & Pick<...>, any, any>) => void) & string) | ... 4 more ... | (RefObject<...> & RefObject<...>)'
```

Using a standard react `<input>` everything works as expected.

[This codesandbox](https://codesandbox.io/s/grommet-ts-dwb3w) reproduces my problem.
As you can see at 12 line I get transpiler error but next line, with the standard input component I get no errors by the transpiler.

Grommet version: 2.9.0

#### What does this PR do?

Changed Box to add border='between'.
This makes it easy to add visual separators between children of Box.

#### Where should the reviewer start?

Box/doc.js

#### What testing has been done on this PR?

Enhanced Box Border story

#### How should this be manually tested?

Storybook

#### Do the grommet docs need to be updated?

yes

#### Should this PR be mentioned in the release notes?

yes

#### Is this change backwards compatible or is it a breaking change?

backwards compatible

#### What does this PR do?

Fixed some issues with how `tabindex` is manipulated.

Supersedes https://github.com/grommet/grommet/pull/3648.

#### Where should the reviewer start?

DOM.js

#### What testing has been done on this PR?

storybook, unit

Also, pair programmed this with `taysea`.

#### How should this be manually tested?

storybook, observe `tabindex`

#### Do the grommet docs need to be updated?

no

#### Should this PR be mentioned in the release notes?

yes

#### Is this change backwards compatible or is it a breaking change?

backwards compatible

### Expected Behavior

When I do 

```jsx
<FormField
  label={'Password'}
  onChange={(e) => this.setState({new_password1: e.target.value})}
  value={this.state.new_password1}
  type={'password'}
/>
<FormField
  label={'Password Confirm'}
  onChange={(e) => this.setState({new_password2: e.target.value})}
  value={this.state.new_password2}
  type={'password'}
/>
```
I expect each form field to have distinct update logic.


### Actual Behavior

Typing into one field, updates the other field. 

### Demo
![formfield](https://user-images.githubusercontent.com/487897/71861248-5584b700-30bb-11ea-8085-8e8623f0baac.gif)


### Steps to Reproduce

- Use a `FormField` component in a normal React-idomatic way.
- Become surprised with the behavior.

### Your Environment

- Grommet version: 2.9.0
- Browser Name and version: Chrome


### Workarounds
Use FormFields only for the label and TextInput for the input logic. The issue is not present with `TextInput`.
<!--- Provide a general summary of the PR in the Title above -->

#### What does this PR do?

Adds TypeScript support for using styled-components interpolations as `extend` values in the `ThemeType`, fixing #3578.

#### Where should the reviewer start?

src/js/themes/base.d.ts
src/js/all/stories/typescript/ExtendTheme.tsx

#### What testing has been done on this PR?

* Created a TypeScript story to type-check various usages of `extend` in a custom theme.
* Updated my own project using locally linked `grommet` and confirmed our custom theme now passed type-checking

#### How should this be manually tested?

* Ensure that `yarn tsc --project .` reports no type-checking errors for the ExtendTheme story.

#### Any background context you want to provide?

1) I added a utility type called `PropsOf` which makes use of a TypeScript 2.8 feature called conditional types. This means that TypeScript Grommet users should be using TypeScript >= 2.8, which I think is a reasonable tradeoff. If one of the goals of Grommet's TypeScript support is to be compatible with TypeScript pre-2.8 let me know and I can come up with another solution to cover what that utility type does.

2) I spent some time also investigating the possibility of adding more types for the `extend` props, which could be convenient for TypeScript users since they would get intellisense about what `props` are available when `extend`ing the theme; however, I couldn't see a 100% reliable way of determining which props would be passed to the `styled` version of the component, so most of the extend props will be typed as `Record<string, any>` instead. It should be possible to progressively type more of the props given the new definition of `ExtendType`, but if you have any suggestions on how to tell with accuracy which props will be available in `extend` I'd be happy to look into adding more of them.

3) One other thing to note is that there is an open issue for conflicting react / react-native types at https://github.com/DefinitelyTyped/DefinitelyTyped/issues/33311/. To work around this I've added a .yarnclean to remove `@types/react-native` post-install. There are a few other alternatives to work around this problem suggested in that issue, and if desired we can take another approach:

* Fix @types/styled-components version to an older version
* Declare types explicitly in tsconfig.json

Overall I thought the .yarnclean seemed like the most straightforward way, so long as this project is not planning to make use of `@types/react-native` at this time

#### What are the relevant issues?

#3578 

#### Do the grommet docs need to be updated?

I don't believe any updates are necessary.

#### Should this PR be mentioned in the release notes?

Potentially worth mentioning as a bug fix, but probably not worth drawing a large amount of attention to it or anything :)

#### Is this change backwards compatible or is it a breaking change?

Backward compatible for TypeScript >= 2.8.