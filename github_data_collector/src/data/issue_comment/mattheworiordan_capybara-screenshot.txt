When I'm debugging test failure, I usually open the screenshot file in a browser. e.g

![Jepretan Layar 2020-01-10 pukul 17 55 36](https://user-images.githubusercontent.com/1826884/72148078-8c680f00-33d2-11ea-8812-aa24dcd236d2.png)

And then I made some changes to that specific error. If another error happens. I have to open the screenshot directory, order it by created time and select the topmost screenshot to see what is happening.

It would be tedious when I have a complex error, small changes may result in another error. And I have to redo the step above (Open dir, order file, click the topmost file)

Is there any possibility to keep the last error naming with
`screenshot_last_error.html`

so that when I reload the browser, and then I get the latest error information.

I do not really care if the screenshot has to be duplicated in order to achieve it.
I'm using selenium ruby cucumber 
the screenshot happens on the failure 
  HTML screenshot: ./runs/screenshot_2019-11-07-15-23-38.098.html
    Image screenshot: ./runs/screenshot_2019-11-07-15-23-38.098.png
its links, but its blank

gem 'capybara-screenshot', :group => :test
require 'capybara-screenshot/cucumber'

the screenshot is blank !

![image](https://user-images.githubusercontent.com/9959969/68429062-01b92880-0173-11ea-9f32-00320a23f69b.png)

I am running Cucumber ruby with Capybara and the capybara-screenshot gem.  Everything was working fine until I added a driver.close call to the After scenario hook.  Now my screenshots are blank.  I know that it is because it is closing the driver FIRST and then taking the screenshot.  What I don't know is how to fix that - how can I get cucumber to do the driver closing last (but still after each scenario)?
With Rails 6, I'm struggling getting "good-looking" (with css styles) HTML screenshots when running my specs _without_ JS. Anyone solve this problem?

I run a bunch of specs without JS on because it they run faster but the default setting for `webpacker` in a `test` environment is to "inject" the CSS into the HTML.  The injection does not happen if you're not running with JS.   

You can change webpacker.yml to `extract_css: true`, and that allows you to generate the css file before running the suite, but I can't figure out why my development environment does not want to serve anything from `public/packs-test` when I load the html screenshot in a browser: `Cannot GET /packs-test/css/application-d7079357.css`

Anyone else have this use case?








I'm not sure what the best way is to add support for system specs, but this is working for me in a Rails 6 project. Maybe it can help someone else to incorporate in a cleaner way.
From: lib/capybara-screenshot/rspec/html_link_reporter.rb :
url = URI.escape("file://#{path}")

is url configurable via a .yml file?

Current output is:
file:///var/lib/jenkins/agent/workspace/tmp/tmp/Pelican-CI/196/screenshot_2019-07-11-15-29-02.049.html

Preferred:
<<capybara.asset_host>>/<<capybara.save_path>>
e.g.
http://jenkins/project1/build8/something.jpg


I had to patch Capybara::Selenium::Driver#wait_for_empty_page for that.
I like to make custom screenshots for demonstration purpose, so this PR updates `screenshot_and_save_page` and `screenshot_and_open_image` with two additional parameters: `prefix` and `html`

This is useful to differentiate screenshots from failures.
See https://github.com/mattheworiordan/capybara-screenshot/pull/245#issuecomment-457922580

This is probably not thread safe i.e. running multiple parallel sessions.
fixes #143 

unfortunately couldn't figure out how to properly test this - base capybara driver is not capable of switching windows