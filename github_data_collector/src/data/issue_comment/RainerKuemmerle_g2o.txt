Hi guys, i am not sure if this is g2o issue or openvslam. But just trying my luck here. i am trying to compile ros package in openvslam.
------------------------------------------------------------------------------------
Steps as per instruction in https://openvslam.readthedocs.io/en/master/ros_package.html:

cd /path/to/working/dir
git clone https://github.com/RainerKuemmerle/g2o.git
cd g2o
git checkout 9b41a4ea5ade8e1250b9c1b279f3a9c098811b5a
mkdir build && cd build
cmake \
    -DCMAKE_BUILD_TYPE=Release \
    -DCMAKE_INSTALL_PREFIX=/usr/local \
    -DCMAKE_CXX_FLAGS=-std=c++11 \
    -DBUILD_SHARED_LIBS=ON \
    -DBUILD_UNITTESTS=OFF \
    -DBUILD_WITH_MARCH_NATIVE=ON \
    -DG2O_USE_CHOLMOD=OFF \
    -DG2O_USE_CSPARSE=ON \
    -DG2O_USE_OPENGL=OFF \
    -DG2O_USE_OPENMP=ON \
    ..
make -j4
make install


cd /path/to/openvslam/ros
catkin_make \
    -DBUILD_WITH_MARCH_NATIVE=ON \
    -DUSE_PANGOLIN_VIEWER=ON \
    -DUSE_SOCKET_PUBLISHER=OFF \
    -DUSE_STACK_TRACE_LOGGER=ON \
    -DBOW_FRAMEWORK=DBoW2

-----------------------------------------------------------------------------
Error generated after "catkin_make step":
...
gw1604@gw1604:~/vslamopen/ros$ catkin_make \
>     -DBUILD_WITH_MARCH_NATIVE=ON \
>     -DUSE_PANGOLIN_VIEWER=ON \
>     -DUSE_SOCKET_PUBLISHER=OFF \
>     -DUSE_STACK_TRACE_LOGGER=ON \
>     -DBOW_FRAMEWORK=DBoW2
Base path: /home/gw1604/vslamopen/ros
Source space: /home/gw1604/vslamopen/ros/src
Build space: /home/gw1604/vslamopen/ros/build
Devel space: /home/gw1604/vslamopen/ros/devel
Install space: /home/gw1604/vslamopen/ros/install
####
#### Running command: "make cmake_check_build_system" in "/home/gw1604/vslamopen/ros/build"
####
####
#### Running command: "make -j8 -l8" in "/home/gw1604/vslamopen/ros/build"
####
[  0%] Built target std_msgs_generate_messages_nodejs
[  0%] Built target sensor_msgs_generate_messages_eus
[  0%] Built target std_msgs_generate_messages_eus
[  0%] Built target std_msgs_generate_messages_lisp
[  0%] Built target sensor_msgs_generate_messages_nodejs
[  0%] Built target sensor_msgs_generate_messages_py
[  0%] Built target geometry_msgs_generate_messages_nodejs
[  0%] Built target sensor_msgs_generate_messages_lisp
[  0%] Built target sensor_msgs_generate_messages_cpp
[  0%] Built target geometry_msgs_generate_messages_cpp
[  0%] Built target std_msgs_generate_messages_cpp
[  0%] Built target geometry_msgs_generate_messages_py
[  0%] Built target geometry_msgs_generate_messages_lisp
[  0%] Built target std_msgs_generate_messages_py
[  0%] Built target geometry_msgs_generate_messages_eus
[  0%] Built target rosgraph_msgs_generate_messages_py
[  0%] Built target roscpp_generate_messages_lisp
[  0%] Built target roscpp_generate_messages_nodejs
[  0%] Built target rosgraph_msgs_generate_messages_eus
[  0%] Built target roscpp_generate_messages_eus
[  0%] Built target rosgraph_msgs_generate_messages_nodejs
[  0%] Built target roscpp_generate_messages_cpp
[  0%] Built target roscpp_generate_messages_py
[  0%] Built target rosgraph_msgs_generate_messages_cpp
[  0%] Built target rosgraph_msgs_generate_messages_lisp
[ 20%] Built target cv_bridge
[ 33%] Built target video_publisher
[ 53%] Built target image_publisher
[ 73%] Built target cv_bridge_boost
[ 80%] Linking CXX executable /home/gw1604/vslamopen/ros/devel/lib/openvslam/run_slam
[ 86%] Linking CXX executable /home/gw1604/vslamopen/ros/devel/lib/openvslam/run_localization
/home/gw1604/vslamopen/build/lib/libopenvslam.so: undefined reference to `g2o::OptimizableGraph::addVertex(g2o::OptimizableGraph::Vertex*, g2o::HyperGraph::Data*)'
/home/gw1604/vslamopen/build/lib/libopenvslam.so: undefined reference to `g2o::OptimizationAlgorithmLevenberg::OptimizationAlgorithmLevenberg(std::unique_ptr<g2o::Solver, std::default_delete<g2o::Solver> >)'
/home/gw1604/vslamopen/build/lib/libopenvslam.so: undefined reference to `g2o::OptimizableGraph::addEdge(g2o::OptimizableGraph::Edge*)'
/home/gw1604/vslamopen/build/lib/libopenvslam.so: undefined reference to `g2o::OptimizableGraph::addVertex(g2o::OptimizableGraph::Vertex*, g2o::HyperGraph::Data*)'
/home/gw1604/vslamopen/build/lib/libopenvslam.so: undefined reference to `g2o::OptimizationAlgorithmLevenberg::OptimizationAlgorithmLevenberg(std::unique_ptr<g2o::Solver, std::default_delete<g2o::Solver> >)'
/home/gw1604/vslamopen/build/lib/libopenvslam.so: undefined reference to `g2o::OptimizableGraph::addEdge(g2o::OptimizableGraph::Edge*)'
collect2: error: ld returned 1 exit status
collect2: error: ld returned 1 exit status
openvslam/src/CMakeFiles/run_localization.dir/build.make:155: recipe for target '/home/gw1604/vslamopen/ros/devel/lib/openvslam/run_localization' failed
openvslam/src/CMakeFiles/run_slam.dir/build.make:155: recipe for target '/home/gw1604/vslamopen/ros/devel/lib/openvslam/run_slam' failed
make[2]: *** [/home/gw1604/vslamopen/ros/devel/lib/openvslam/run_localization] Error 1
make[2]: *** [/home/gw1604/vslamopen/ros/devel/lib/openvslam/run_slam] Error 1
CMakeFiles/Makefile2:2051: recipe for target 'openvslam/src/CMakeFiles/run_slam.dir/all' failed
make[1]: *** [openvslam/src/CMakeFiles/run_slam.dir/all] Error 2
make[1]: *** Waiting for unfinished jobs....
CMakeFiles/Makefile2:1989: recipe for target 'openvslam/src/CMakeFiles/run_localization.dir/all' failed
make[1]: *** [openvslam/src/CMakeFiles/run_localization.dir/all] Error 2
Makefile:138: recipe for target 'all' failed
make: *** [all] Error 2
Invoking "make -j8 -l8" failed


------------------------------------------------------------------------------------------
Appreciate if any one has any idea( even just pointing out if it is g2o or Openvslam issue. Thanks!


I am compiling openvslam as per the installation instructions provided.

from openvslam/openvslam/src/openvslam/optimize/local_bundle_adjuster.cc:20:
/usr/local/include/g2o/solvers/csparse/csparse_extension.h:27:16: fatal error: cs.h: No such file or directory

I did a cmake with the following options
cmake
-DBUILD_WITH_MARCH_NATIVE=ON
-DUSE_PANGOLIN_VIEWER=ON
-DUSE_SOCKET_PUBLISHER=OFF
-DUSE_STACK_TRACE_LOGGER=OFF
-DBOW_FRAMEWORK=DBoW2
-DBUILD_TESTS=ON
..

Stack Trace logging was disabled as I was seeing glog cmake errors while running cmake (which I believe is ok).

I followed the comments at "#53" and also installed libsuitesparse-dev, but no luck. 
cs.h is installed at /usr/local//include/g2o/EXTERNAL/csparse/. g2o compiles file and am able to execute few binaries from the g2o/bin directory.

Any help would be appreciated.

Thanks
KK
I am using windows 7. I build g2o project with cmake and suitesparse-metis version 1.3.0.
The problem occurs when I try to build solver_cholmod. It cannot find 'FALSE.lib'. Any idea how to solve it?
I've read the paper "[VITAMIN-E: VIsual Tracking And MappINg with Extremely Dense Feature Points](https://arxiv.org/abs/1904.10324)" and I'm wondering wheater it's possible to implement a Bundle Adjustment procedure like the one described there and named by the author "Subsbace Guass Newton Method" (see section 3.2). Thanks to anybody will want to help me.
Since last release, it has last  two years. hope the author could publish a new stable release.
While trying to compile [a slam code](https://github.com/tum-vision/lsd_slam/blob/master/lsd_slam_core/src/GlobalMapping/g2oTypeSim3Sophus.cpp)  [line 30, 32, 34, 35] I am getting the following error 
`
g2oTypeSim3Sophus.cpp:0: error: undefined reference to 'g2o_type_group_sba'`

I'm stuck and cannot proceed with the build. Please help in resolving this error. 
Dear @RainerKuemmerle  and other contributers,
 I can run the following command:
<pre>
g2o_viewer xx.g2o
</pre>
and it can show me the picture, but when I press the **optimize** button, it will exit and tell me 
<pre>
Segment fault (core dumped) 
</pre>
A few other buttons still work.
What's the problem?

Hi,
I want to create a g2o file of my own dataset and perform some optimization, however, I have been facing some issues in understanding the format of g2o file. I have the Key frames from ORB_Slam and the poses between the consecutive frames i.e Rotation (R) and Translation (T) as shown in following figure

![Untitled drawing](https://user-images.githubusercontent.com/47419730/68941975-204d9e00-07c9-11ea-9d2e-8c90699c7fd9.jpg)

In g2o file, first all the poses for respective keyframes are mentioned with "VERTEX_SE3" e.g. VERTEX_SE3:QUAT 1 0.341895 -0.0416997 0.0330394 -0.00189341 0.00395691 0.0899835 0.995934 where the first three values are x,y,z coordinates and others are quaternions).  After that, there is "EDGE_SE3" section in which I am facing problem to understand (e.g. EDGE_SE3:QUAT 0 1 0.341895 -0.0416997 0.0330394 -0.00189341 0.00395691 0.0899835 0.995934  10 0 0 0 0 0 10 0 0 0 0 10 0 0 0 400.021 0.00193512 2.06612 399.993 0.496977 99.203). In  "EDGE_SE3", I think the first two values show the link between frames. I don't understand the the succeeding values. What are these values in case of keyframes from ORB_Slam and how to calculate them? What is format of g2o file?

Hey,
I have noticed that you have commented the second derivative term for the Kernel weighted  Information matrix.       

at here
https://github.com/RainerKuemmerle/g2o/blob/91c7593221fc16191b6c3f015da0ee4b85e82fef/g2o/core/base_edge.h
This term，row 121
//result.noalias() += 2 * rho[2] * (weightedErrror * weightedErrror.transpose());

Why it could be neglected? I mean the neglected term is the value evaluated at the current position, it may not be a very small term.
For most Kernel functions, it could be right,but for Fair Kernel, for which rho[2] is not 0, Isn't it then wrong? 

![图片](https://user-images.githubusercontent.com/32970024/68925455-0ce90580-07be-11ea-9f5e-4f99d4ad1da5.png)
![图片](https://user-images.githubusercontent.com/32970024/68925153-656bd300-07bd-11ea-8179-de43ebbe1320.png)

Thanks!
Hello,

I've made some changes in the CMakeLists of g2o and I though it could be interesting to share it.

First I've set output directory to the BUILD_DIR instead of g2o_SOURCE_DIR.

Then I've updated most of the g2o modules headers to be relocatable (in a modern cmake way) by using placeholders. Before headers paths was hard-coded in the generated `g2oTargets.cmake`, and with this modification path are relatives to the install path.

Example with `stuff` module

before:

```cmake
(g2oTragets.cmake)
...
 # Create imported target g2o::stuff
 add_library(g2o::stuff SHARED IMPORTED)
 
 set_target_properties(g2o::stuff PROPERTIES
   INTERFACE_INCLUDE_DIRECTORIES "/home/mschweitzer/dev/others/install/g2o/release/include"
 )
```

after:

```cmake
(g2oTragets.cmake)
...
 # Create imported target g2o::stuff
 add_library(g2o::stuff SHARED IMPORTED)
 
 set_target_properties(g2o::stuff PROPERTIES
   INTERFACE_INCLUDE_DIRECTORIES "${_IMPORT_PREFIX}/include"
 )

```
the `${_IMPORT_PREFIX}` is automatically generated by CMake and is relative to the install directory. 

I think this is much more convenient to deal with transitive dependencies (when using for example ORB_SLAM2, OpenVSLAM, etc...).

I didn't check all the corner-case of g2o library, so let my know if there is anything wrong with this PR.

