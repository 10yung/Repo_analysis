## same interface,  use unvariable way

![image](https://user-images.githubusercontent.com/21983419/71720725-a4351580-2e5d-11ea-8b90-53782e683865.png)

## use variable way
![image](https://user-images.githubusercontent.com/21983419/71720755-c2027a80-2e5d-11ea-9ca1-ad8a0ef1f846.png)

## streamID is ID! type
## unvariable way can prompt: it is type error, 1.1 is useless value, but variable way can't.
## so it will let front-end confuse when use variable way
This is primarily a fix for the way an old version of relay will sometimes arrange duplicate fragments (in my understanding... which may be wrong - I've just cherry picked this back onto master today)

We (myself and @bencallaway) have run this for almost a year now and are trying to get back onto upstream and port some of our changes back.

Without this change, this is an example of the error we encounter (apologies for the very blurry screenshot).

![1571770211](https://user-images.githubusercontent.com/10286538/67319693-cd9c0180-f4fc-11e9-9e42-2fc7e031c650.png)

GraphQL libraries like [GraphQL Ruby](https://graphql-ruby.org/schema/limiting_visibility) and [GraphQL Java](https://github.com/graphql-java/graphql-java/blob/v13.0/src/main/java/graphql/schema/visibility/GraphqlFieldVisibility.java) support hiding GraphQL schema fields from certain types of users. 

I'm having a hard time finding such a feature in this library. Does such a feature exist? If not, that's totally fine. I just don't want to reinvent the wheel. Thanks!
This fixes the error 
> Schema must contain unique named types but contains multiple types named
when fields are of type Object.
See #516 
Cheers

![image](https://user-images.githubusercontent.com/22353572/66862960-4bf32380-ef92-11e9-9274-6670c459af8d.png)

and the query is 
`http://localhost:8080/product?query={order(id:3){client}}`

Hello,
First thanks for this great project.
I ran into the issue when updating a schema.
For an update, I first remove the type then add the new one
```
delete(schema.TypeMap(), resourceType.Name())
schema.AppendType(resourceType)
```
It works when the schema doe not contain a field of type object.
But when using an object, it seems that updates have a collision name, as it returns the error:
> Schema must contain unique named types but contains multiple types named "objectA".
See code sample:
https://play.golang.org/p/N8iBmXzG-U1

Kind regards,
I'm always shocked by the boilerplate I need to write to add simple structs to my schema. 

What I did is: I started to write some helper methods to analyze my structs via reflection and generate the gql types from my go structs.

Looks like this:
```
type Model struct {
	Id        int64     `gorm:"type:bigserial;primary_key" json:"id"`
	CreatedAt time.Time `sql:"DEFAULT:NOW()" json:"createdAt"`
	UpdatedAt time.Time `json:"updatedAt"`
}

type IntegrationHttp struct {
	Model
	App   *model.AppInstance `gorm:"not null;foreignkey:id;association_foreignkey:AppId" json:"app"`
	AppId int64              `gorm:"not null" json:"appId"`

	Method  string `json:"method"`
	Url     string `json:"url"`
	Skipped string `json:"-"`
}

func TestNewTypeFromStruct(t *testing.T) {
	conf := schema.NewTypeFromStruct(IntegrationHttp{})

	assert.Equal(t, "IntegrationHttp", conf.Name())

	confFields := conf.Fields()
	assert.Equal(t, 7, len(confFields))
}
```

Yet it takes the fields names from the `json` tag, could be configurable as well.
I also added a custom tag `gql` where you can override the type of a field with e.g. `gql:"type:String"`.

I can Imagine a bunch of more features. Since the code runs only once at startup time, I do not see any performance issues but reducing a lot of boilerplate code.

Now my questions are: 
* **Is this kind of struct generation interesting for this library?** 
* **Is it interesting in general (I could start another repository)?**

Or do you see any general issues with that and I should keep it private? Else I would love to share the implementation and would be happy to further improve it.





Fix copy-paste error that assigns all Lukes friends to Vaders friends.
Is there any plan to add pagination support? https://graphql.org/learn/pagination/
Hey,

I have a custom type system and i have few constraints:

1. I cannot implement Resolve on the object level as I cannot change the type system.
2. I don't want to implement a resolver on every low level field just to resolve the custom object
3. Default DefaultResolveFn fails to resolve the custom object.

Unless there's a better approach, I would like to provide a custom `DefaultResolveFn`.


Thanks.