I encountered a problem when consuming testify through gobuffalo. I wanted to boot the development environment using a tests fixture from their fixture tooling. They use testify suites to integrate fixtures into controller tests. Since setting up a concrete T is quite laborious given much of what go test uses to do it is hidden, it makes more sense to me to provide a stub which can only work if testify consumes an interface.
Implements a `ErrorIs` as a test for error wrappers from [the new error methods in go 1.13](https://blog.golang.org/go1.13-errors)

```go
errA := errors.New("some error")
errB := fmt.Errorf("wrapping: %w", errA)
assert.ErrorIs(t, errA, errB)
```
Hi All!

I would like to be able to assert/require that a function panics with an error, and that the error message matches some regexp.

Currently, I'm solving this in a test like this:
```
func TestPanic(t *testing.T) {

  defer func() {
    if r := recover(); r != nil {
      err, ok := r.(error)
      require.True(t, ok, "Did not panic with error")
      require.Regexp(t, "someRegexp", err.Error())
    } else {
      require.Fail(t, "Did not panic")
    }
  }()

  funcToTest()
}
```

But I'd like to wrap this up into a single assertion/require, e.g:
```
func TestPanic(t *testing.T) {

  require.PanicsWithErrorRegexp(t, "someRegexp", func(){ funcToTest() })
}
```

(For consistency there would also be a `PanicsWithErrorRegexpf` assertion which accepts a formatted string.)

Any comments on the idea, or the assertion name, before I start coding something up?
Nil/NotNil assertions should work with unsafe.Pointer, since == nil and != nil do.
Will be great to add some alerting if no tests were found using testify filter.
For example, standard go test displays `testing: warning: no tests to run` at `go test -run unesistingTest`

For now testify works as follow:
```
go test -failfast -v -run Test_SuiteSomeOperation_Execute -testify.m AAAAA
=== RUN   Test_SuiteSomeOperation_Execute
--- PASS: Test_SuiteSomeOperation_Execute (0.00s)
PASS
ok  	github.com/some/path/to/package	0.005s
```
`Codegen` has a bug when the docstring contains nested brackets (parenthesis). This needs to be fixed as it manifests into inconsistent & incorrect docstrings for our auto-generated functions.
Example: `InDelta`
Hi all!
I have a code.
`
func xxx (x int) {
  if (x != 1) {
       log.Fatalf("Fatal msg")
   }
}
`

Now I can't catch it, it'd be great to catch it like this.

`
func xxx () {
    assert.NotFatals(t, func(){ xxx(1) })  // and some other functions, like PanicsWithError
}
`

A solution proposition for my issue #849 
I'm writing a testing suite that spins up some resource on `SetupSuite` (in my case a virtual machine), runs some tests against it, then destroys the resource on `TearDownSuite`.

Now, sometimes the resource may fail to spin up or have some issue with it which makes running the tests useless, in which case I'd like to `suite.T().FailNow()`.  However, if you run `suite.T().FailNow()` during `SetupSuite` then the `TearDownSuite` never runs, which could lead to the VM not being destroyed & could lead to dangling/costly VMs.

Is this by design?  If so, how could I go about solving my issue.
tip:
* Can change at any time
* Has no stability/compatability guarantee
* Is development code & can be broken
* Is out of control of testify contributors

I addition, go versions 1.12 and 1.13 are completely missing from the build matrix, as well as "release", yet "tip" is present...