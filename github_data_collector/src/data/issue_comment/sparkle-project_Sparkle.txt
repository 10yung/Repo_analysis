When building Sparkle 1.22.0, the bsdiff vendor library doesn't seem to be built prior to trying to use it. The error is:

```
Ld /Users/user1/sparkle/build/Release/Sparkle.framework/Versions/A/Sparkle normal x86_64 (in target: Sparkle)
    cd /Users/user1/sparkle
    export MACOSX_DEPLOYMENT_TARGET=10.7
    /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/clang -arch x86_64 -dynamiclib -isysroot /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.14.sdk -L/Users/user1/sparkle/build/Release -F/Users/user1/sparkle/build/Release -filelist /Users/user1/sparkle/build/Sparkle.build/Release/Sparkle.build/Objects-normal/x86_64/Sparkle.LinkFileList -install_name @rpath/Sparkle.framework/Versions/A/Sparkle -Xlinker -rpath -Xlinker @executable_path/../Frameworks -Xlinker -rpath -Xlinker @loader_path/Frameworks -mmacosx-version-min=10.7 -dead_strip -Xlinker -object_path_lto -Xlinker /Users/user1/sparkle/build/Sparkle.build/Release/Sparkle.build/Objects-normal/x86_64/Sparkle_lto.o -fobjc-arc -fobjc-link-runtime -Wl,-U,_NSURLQuarantinePropertiesKey -framework AppKit -framework Foundation -framework IOKit -lbsdiff -lbz2 -led25519 -lxar.1 -lz -framework Security -framework SystemConfiguration -framework WebKit -compatibility_version 1.6 -current_version 1.22.0 -Xlinker -dependency_info -Xlinker /Users/user1/sparkle/build/Sparkle.build/Release/Sparkle.build/Objects-normal/x86_64/Sparkle_dependency_info.dat -o /Users/user1/sparkle/build/Release/Sparkle.framework/Versions/A/Sparkle
ld: library not found for -lbsdiff
clang: error: linker command failed with exit code 1 (use -v to see invocation)
```

Should this be built manually prior to the `make build` step?

Any instructions would be appreciated.


HI,


I have an issue when using the sparkle framework from ui-separation-and-xpc branch with App Sandbox

1.I have dragged the entire sparkle project into my application.
![Screenshot 2020-01-16 at 3 32 39 PM](https://user-images.githubusercontent.com/59958086/72516445-b3fa2400-3877-11ea-999c-f3f40ef62adc.png)

2.Added The XPC Service in dependencies
![Screenshot 2020-01-16 at 2 57 04 PM](https://user-images.githubusercontent.com/59958086/72516487-c4aa9a00-3877-11ea-84c5-582b23f18d5a.png)

3.Created a file phase and added the XPC Services
![Screenshot 2020-01-16 at 2 58 58 PM](https://user-images.githubusercontent.com/59958086/72516518-d12ef280-3877-11ea-9cd2-f72254878d26.png)

4.Added Run Script
![Screenshot 2020-01-16 at 3 37 24 PM](https://user-images.githubusercontent.com/59958086/72516538-d9872d80-3877-11ea-83d7-456099b86546.png)

5.Added below line of codes in AppDelegate to check for update


Added the delegates SPUUpdaterDelegate,SPUStandardUserDriverDelegate


        let updaterNew = SPUStandardUpdaterController.init(updaterDelegate: self, userDriverDelegate: self)
        updaterNew.updater?.automaticallyChecksForUpdates = true
        updaterNew.updater?.checkForUpdatesInBackground()


When running the application  I am getting Time Out issue
Please advice me to find out the mistake I have done, any extra thing have to do to get it working.

Branch: ui-separation-and-xpc
Xcode: 11.1
macOS: 10.15.2

Log:
[Sparkle] Timed out while probing installer progress


I may be grossly misunderstanding the way this actually works. If so, forgive me.

I'm currently in the middle of migrating my sparkle:version number from a single digit (say 600) to the actual app version number, say 2.1.34. I could explain the reasons for this change in more details but my question is regarding the behavior I'm observing while putting this together.

Because this move is seen like a downgrade by Sparkle, I decided to use a transition build of my app which contains a version of Sparkle that allows downgrades. Using the "version(build number)" notation here, people who have 2.1.33(500) can't downgrade but they are directed to 2.1.34(600) which contains a build of Sparkle that allows downgrades. That build will then find build 2.1.35(2.1.35) and should allow the perceived downgrade. Once the user has 2.1.35(2.1.35), downgrades are not allowed again and the next build will be 2.1.36(2.1.36).

The problem is, this doesn't seem to work reliably. I have situation when the 2.1.34 build refuses to downgrade and some machines when the same build updates to 2.1.35 without any problem.

My question is: Is the code that checks for the downgrade (I'm assuming its AutoUpdate) cached anywhere? I seem to be getting some builds of 2.1.34 allowing downgrades and some which do not. The code is the same and the Sparkle framework is the same (and should allow downgrades). So where is this finding a test for downgrading in some cases and not others?
I'm looking for a little help from someone with a little more sparkle experience than I do. I'd like to build out a github action for building and deploying a macOS app to S3. I'm a little hung up on how to achieve the `generate_appcast` aspect of it from within what is almost certainly a container.

If anyone has a little free time to help... I'll reward with a free write-up/tutorial for the community. Possibly a cold beer if you live close to me :)
Please clean the cache on the dir "/Library/Cache/generate_appcast/" before generate the appcast file
Work required to make Sparkle 2.x official:

* [ ] Port EdDSA keys #1423
* [ ] Create documentation for installation and configuration of 2.x
* [ ] Create migration guide for 1.x users
* [ ] Add banners/labels to every 1.x documentation page that it is outdated
* [ ] Add banners/labels to 2.x documentation pages that they apply only to new Sparkle
* [x] Add issue templates for 2.x
* [ ] Add "which version am I using?" help page to the website that helps select the right documentation
* [ ] Add version to logs (perhaps even call it Sparkle2?)

I invoke Sparkle by cocoapods，when I push code to remote(CI server)，xcodebuild failed。please help me。Here is my .yml code:
```
- xcodebuild -workspace CSC-OSX/CSC-OSX.xcworkspace CODE_SIGN_IDENTITY="-" -scheme CSC-OSXTestScheme test | xcpretty
```

and error info:
![image](https://user-images.githubusercontent.com/14361098/70793301-f393a300-1dd5-11ea-8a46-70050bebb923.png)

In the alert dialog when running from read-only volume, both sentences are in bold. The second should move to non-bold text below. This is accomplished by splitting the text between `localizedDescription` (`NSLocalizedDescriptionKey`) and `localizedRecoverySuggestion` (`NSLocalizedRecoverySuggestionErrorKey`).

![image](https://user-images.githubusercontent.com/283971/70722746-d2dc2800-1cc5-11ea-89e8-aca7f2a66f71.png)

The code that creates the NSError should pass 2 localized strings for both userInfo keys, and content of the `Sparkle.strings` files should be updated.
We currently support deployment of Sparkle on macOS as old as 10.7. I think bumping oldest supported OS version to 10.8 should be uncontroversial.

Can we bump to 10.9?


The abort() function is sprinkled liberally in the 2.0 code base.  A failure, or incorrect usage, in Sparkle 2.0, should not cause the client program to crash in production.

Failure modes in Sparkle should be dealt with. by logging via the Apple System Log functionality. and then terminating gracefully. This functionality and API is supported back to 10.4:

https://crucialsecurity.wordpress.com/2011/06/22/the-apple-system-log-%E2%80%93-part-1/

Apple's new unified logging API is only supported back to 10.12, which makes it unsuitable for Sparkle.  Sparkle supports OS versions back to 10.9.