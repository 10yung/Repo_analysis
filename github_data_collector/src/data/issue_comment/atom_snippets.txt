<!--

Have you read Atom's Code of Conduct? By filing an Issue, you are expected to comply with it, including treating everyone with respect: https://github.com/atom/.github/blob/master/CODE_OF_CONDUCT.md

Do you want to ask a question? Are you looking for support? The Atom message board is the best place for getting support: https://discuss.atom.io

-->

### Prerequisites

* [X] Put an X between the brackets on this line if you have done all of the following:
    * Reproduced the problem in Safe Mode: <https://flight-manual.atom.io/hacking-atom/sections/debugging/#using-safe-mode>
    * Followed all applicable steps in the debugging guide: <https://flight-manual.atom.io/hacking-atom/sections/debugging/>
    * Checked the FAQs on the message board for common solutions: <https://discuss.atom.io/c/faq>
    * Checked that your issue isn't already filed: <https://github.com/issues?utf8=âœ“&q=is%3Aissue+user%3Aatom>
    * Checked that there is not already an Atom package that provides the described functionality: <https://atom.io/packages>

### Description

<!-- Description of the issue -->
Within a snippet, pressing shift+TAB to go to the previous tab stop results in the buffer being tabbed back.

The command palette displays `editor:outdent-selected-rows` as the first event, over `snippets:previous-tab-stop`

### Steps to Reproduce
1. Within a Python file, I type `ase` inserting a snippet.
2. Press tab to go to next stop
3. Press shift tab, observe that previous stop is highlighted, but buffer is moved back as well.

**Expected behavior:**

<!-- What you expect to happen -->
Only previous stop gets highlighted, buffer remains.

**Actual behavior:**

<!-- What actually happens -->
Previous stop is highlighted, buffer is shifted back.

**Reproduces how often:**

<!-- What percentage of the time does it reproduce? -->
100%

### Versions

<!-- You can get this information from copy and pasting the output of `atom --version` and `apm --version` from the command line. Also, please include the OS and what version of the OS you're running. -->

```
Atom    : 1.42.0
Electron: 4.2.7
Chrome  : 69.0.3497.128
Node    : 10.11.0
```
```
apm  2.4.3
npm  6.2.0
node 10.2.1 x64
atom 1.42.0
python 2.7.15
git 2.21.0
```

OS: macOS 10.15.2

### Additional Information

<!-- Any additional information, configuration or data that might be necessary to reproduce the issue. -->

### Description of the Change

This pull request changes a test in spec suite which at the time of writing expects a very specfic indentation logic behavior from core: it assumes that when text is selected, hitting <kbd>Tab</kbd> always results in indenting the line. The aim of the pull request is somewhat to loosen the test to allow any core behavior (within reason) to occur, while retaining the constraints that make sense for this package.

### Alternate Designs

None considered for now.

### Benefits

The test is not as tightly coupled to the core, allowing core to change behavior without the need to update this spec.

### Possible Drawbacks

There could be future developments which may pass with the new test, but that did not pass with the old one, however this should be unlikely due to the amount of similar tests which possibly catch such cases.

### Applicable Issues

atom/atom#20137
# NOTE: Ready for review
______

### Requirements

* Filling out the template is required. Any pull request that does not include enough information to be reviewed in a timely manner may be closed at the maintainers' discretion.
* All new code requires tests to ensure against regressions

### Description of the Change

<!--

We must be able to understand the design of your change from this description. If we can't get a good idea of what the code will be doing from the description here, the pull request may be closed at the maintainers' discretion. Keep in mind that the maintainer reviewing this PR may not be familiar with or have worked with the code here recently, so please walk us through the concepts.

-->

Redoes a lot of stuff. Basic idea is to comply with [the VS Code spec](https://code.visualstudio.com/docs/editor/userdefinedsnippets) (based on TextMate spec; also used by Sublime Text) as much as possible, because that's the spec language servers are supposed to use. With this, we'll fully support well formed LSP snippets. The added features are also useful anyway, and following an existing spec means we don't have to define our own (though I believe it's all based off of TextMate anyway).

Putting this up now for feedback and trying it out while it's still being worked on.


#### Added
- [X] Support for variables
- [X] Support for replacement if / else conditionals based on capture group match
- [X] Support for choices (parses the syntax; actual choice popup deferred to later PR)
- [X] Support for LSP transformation syntax
- [X] Service for custom variable resolvers (not in the spec, but I like this idea a lot)
- [X] Implicit end tab stops when one was not already defined (togglable in settings)
- [X] Forced undo breaks at each tabstop

#### Changed
- [X] Removed implicit `g` flag from transformation regex. If users want it, they can add it explicitly. And now, if they don't want it, they have a choice.
- [X] The parser has been rewritten, but still creates a tree compatible with the existing logic when using existing features. A notable change is that `\` only escapes the characters `$`, `}`, and `\` (and a few others depending on context).
- [X] Specs have been updated to add the `g` flag where the implicit one was relied upon.
- [X] Snippet bodies and tab stops are now formed on demand, and are no longer members of the snippet. This is necessary, given the dynamic nature of variables and their transformations. They are now made in the `SnippetExpansion`, which is a temporary representation for the expanded snippet.
- [x] Refactoring the existing `snippet.getTabStops` into something more modular. Currently renamed to `toString`, but it will make the insertion string and tab stops.
- [X] Implicit end tab stops (configurable in Settings)
- [X] End tab stops now break out of the snippet, so you will no longer be able to tab backwards from one (this is in line with their purpose of marking where to put the cursor when the snippet finishes).
- [X] Redid a lot of `editor.transact` calls; these appeared to only make the undo behaviour fail in strange ways.

#### Open Questions
- ~~[ ] Should `\` escape everything? It would make it easier to remember what it does, but subtly break VS Code compatibility (which is slightly different in a few areas anyway). It would also simplify the grammar.~~
  - Am going with no in this PR. May be possible to make configurable in future (especially if users complain), by [passing an argument](https://github.com/pegjs/pegjs/blob/master/docs/guides/using-the-parser.md#using-the-parser) to the parser.

### Alternate Designs

Would have removed `\u` and co flags entirely, but they appear to be supported by TextMate too and so are worth keeping.

### Benefits

<!-- What benefits will be realized by the code change? -->
99% backwards compatible, and adds much more advanced and dynamic capabilities. With custom variable resolvers, users can do pretty much anything with the provided text editor (and any other relevant params).

### Possible Drawbacks

Bodies that contained text like `${1|one,two,three|}` will now be interpreted, instead of being a literal. But 1. the fix is to escape the `$` like this `\\${1|one,two,three|}` (as the raw CSON value), and 2. no one<sup>*</sup> would be doing that unless they wanted a choice placeholder anyway.

<sup>*me</sup>
### Applicable Issues

Closes #287 (this also contains the decaffeination changes)

Closes #285 

Also closes #41 I think

Closes https://github.com/atom/apm/issues/213. That conversion uses alternate replacement syntax `(?1:=:=)` that now has support added here too.
### Description

There are a few features of snippets that are missing. E.g., choices and variables. This issue is to request the snippet implmentation be changed / improved to implement the rules [as described below here](https://microsoft.github.io/language-server-protocol/specification#textDocument_completion). 

While improving Atom's own snippet handling, it also makes it easier to use completions provided by language servers directly. Technically, they should currently be sanitised to remove unsupported features.

In summary (some of this is already implemented):
- Tab stops: `$n` for cursor locations
- Placeholders: `${1:foo}` for preselected placeholder values
- Nested placeholders: Support of `${1:foo ${2:bar}}` is required
- Choice: `${|one,two,three|}` prompts the user to pick a value (not sure how prompt should work)
- Variables: Allows replacements to use context such as file name, selected text, etc.
- Variable transforms: Regex applied to variables.

I'm not sure how the current `\u` and friends fit in, but could potentially be an enhancement if not already supported by the regex.

Here's the EBNF grammar provided in the link
```
any         ::= tabstop | placeholder | choice | variable | text
tabstop     ::= '$' int | '${' int '}'
placeholder ::= '${' int ':' any '}'
choice      ::= '${' int '|' text (',' text)* '|}'
variable    ::= '$' var | '${' var }'
                | '${' var ':' any '}'
                | '${' var '/' regex '/' (format | text)+ '/' options '}'
format      ::= '$' int | '${' int '}'
                | '${' int ':' '/upcase' | '/downcase' | '/capitalize' '}'
                | '${' int ':+' if '}'
                | '${' int ':?' if ':' else '}'
                | '${' int ':-' else '}' | '${' int ':' else '}'
regex       ::= JavaScript Regular Expression value (ctor-string)
options     ::= JavaScript Regular Expression option (ctor-options)
var         ::= [_a-zA-Z] [_a-zA-Z0-9]*
int         ::= [0-9]+
text        ::= .*
```
<!--

Have you read Atom's Code of Conduct? By filing an Issue, you are expected to comply with it, including treating everyone with respect: https://github.com/atom/atom/blob/master/CODE_OF_CONDUCT.md

Do you want to ask a question? Are you looking for support? The Atom message board is the best place for getting support: https://discuss.atom.io

-->

### Prerequisites

* [x] Put an X between the brackets on this line if you have done all of the following:
    * Reproduced the problem in Safe Mode: http://flight-manual.atom.io/hacking-atom/sections/debugging/#using-safe-mode
    * Followed all applicable steps in the debugging guide: http://flight-manual.atom.io/hacking-atom/sections/debugging/
    * Checked the FAQs on the message board for common solutions: https://discuss.atom.io/c/faq
    * Checked that your issue isn't already filed: https://github.com/issues?utf8=âœ“&q=is%3Aissue+user%3Aatom
    * Checked that there is not already an Atom package that provides the described functionality: https://atom.io/packages

### Description

Okay, so this is weird.
I have a multi-line snippet with a multi-cursor tab stop:
```
'\\begin{}...\\end{}':
    'prefix': '\\begin'
    'body': '\\\\begin{${1:env}}$2\n\t$0\n\\\\end{${1:env}}'
```
This works fine and properly inserts the snippet with proper indentation of the last line. However, if the next character I type is any of `c d e m n o t u` (and no other letters!), the indentation on the last line gets eaten.

Here's a little video that I hope will help clarify the actual behavior: 
![bug](https://user-images.githubusercontent.com/8881658/48589794-50ced380-e8fa-11e8-9386-db7398074448.gif)


### Steps to Reproduce

**Expected behavior:** Should preserve the indentation on the last line.

**Actual behavior:** The weird thing described above.

**Reproduces how often:** 100%

### Versions

Atom version 1.32.2, Mac OS X 10.14.1.
Fixes #15.

### Description of the Change

#### The problem

Hereâ€™s a simple example of a snippet that has never quite worked right.

```
${2:bar}${3:baz}
```

Iâ€™ll quote from my comment in #236 to explain how this goes wrong:

> Iâ€™ll use parentheses to illustrate the invisible markers. After tab expansion, youâ€™ve got:
> 
> ```
> (bar)(baz)
> ```
> 
> You type `x` and now youâ€™ve got:
> 
> ```
> (x)(baz)
> ```
> 
> The editor knows to put `x` into the first marker because bar was selected, and that removed all ambiguity. But right now the cursor is between `x` and `baz`, so when you type text, it could plausibly get added to either marker. We want thisâ€¦
> 
> ```
> (xyzz)(baz)
> ```
> 
> â€¦but weâ€™re getting this instead:
> 
> ```
> (x)(yzzbaz)
> ```

#### The fix

All snippet markers are getting created with `exclusive: false`. That means that theyâ€™ll expand to claim text thatâ€™s typed at their boundaries. But when inserted text is right between two adjacent markers, the one on the right always wins. The only way to force it in the direction you want is to create one marker with `exclusive: true` and one with `exclusive: false`.

In our example, `$2` is the active tab stop, so we want its marker to claim the characters that we type. But when we hit <kbd>Tab</kbd> and make `$3` the active tab stop, we want the opposite behavior. So weâ€™ll have to change the settings on the markers as the active tab stop changes â€” or, rather, copy them to new markers with the settings we want.

Thereâ€™s one more edge case to consider, and I wasnâ€™t sure how to conceptualize it until I peeked at VScodeâ€™s strategy for avoiding this problem: tab stops can reference other tab stops in their placeholder content. If `$2` has a placeholder that includes a reference to `$1`, then `$2`â€™s marker needs to be inclusive when _either_ `$1` _or_ `$2` is the active tab stop, because we need `$2`â€™s marker to grow as we type the value for `$1`. If you find this hard to wrap your brain around, youâ€™re not the only one.

### Alternate Designs

The marker API, though robust, is not so rich as to give me lots of options here. The fact that this implementation is nearly identical to VScodeâ€™s is validation of the approach.

There were a few different ways I couldâ€™ve used to determine the cross-references between tab stops, their placeholders, and any tab stops those placeholders referenced. I decided to capture those references just after parsing, as we consume the syntax tree. Another option wouldâ€™ve been to inspect the markers after creation and infer the relationships based on which markers were completely surrounded by other markers, but that felt like an indirect approach.

### Benefits

A number of snippets that _seemed_ like they should just work _havenâ€™t_ worked (or have worked incorrectly) for a long time, and now they will.

### Possible Drawbacks

The fact that we have to destroy and recreate markers as tab stops move is not ideal, but I donâ€™t think itâ€™s a bottleneck. If it turns out to be a problem, we can make the changes necessary in text-buffer to allow the `exclusive` setting to be changed after creation on an existing `DisplayMarker`.

### Applicable Issues

 #236 is a duplicate of #15 but contains a lot of relevant discussion.
I am trying to develop a snippet in which i can use in the body, the snippets prefix, description and/or other values.

For example:
```
"Snippet x": {
        "prefix": "<my-snippet-prefix>",
	"description": "A prototype of a snippet",
	"types": "html",
	"inputs": ["input1", "input2"],
	"outputs": ["output1", "output2"],
	"body": [
		"<@prefix>",
		"\t${1|@inputs|}",
                "\t${2|@outputs|}",
                "$3",
		"</@prefix>$0"
	]
}
```
The point is basically to be able to define values like inputs and outputs (e.g. read from a .txt file and writen on the .json file) instead of writting it all down like:

```
        "prefix": "<my-snippet-prefix>",
	"description": "A prototype of a snippet",
	"types": "html",
	"body": [
		"<my-snippet-prefix>",
		"\t${1|'input1', 'input2'|}",
                "\t${2|'output1', 'output2'|}",
                "$3",
		"</my-snippet-prefix>$0"
	]
```
I don't think this is supported yet, nor the ability to press Ctrl+Space in the code and, within the selected snipped, be able to choose its parameters/values. Is it something doable or am I just missing something?
### Description

Atom snippets fail to treat an octal in multiline strings as expected. While the specification at https://github.com/bevry/cson proclaims "Multi-line Strings! Without Quote Escaping!" and gives no warning about octal Atom editor gives an error message while saving a snippet definition containing an octal.

Escaping a closing brace in a multi-line string is in the README for the snippets package: https://github.com/atom/snippets/blob/edf7db4e5f3d9bb0354745433cf09e14c933d75a/README.md#multi-line-snippet-body

Using the same technique to escape the opening backslash of the octal delivers the same error message as with no escaping.

### Steps to Reproduce

1. Open `$HOME/.atom/snippets.cson`
2. Save the CSON snippet definition described in **Actual behavior** below
3. Save the file

**Expected behavior**:

Unlike a closing brace, other values do not require escaping in `snippets.cson` using CSON multi-line strings.

OR, a means of escaping the octal exists for snippets as that require them.

OR, the README is updated to reflect this limitation in addition to the closing brace limit.

**Actual behavior**:

While running Atom like this, `atom --safe`

Add this code fragment snippet definition to `$HOME/.atom/snippets.cson`:

```cson
'.source.makefile':
  'makefile':
    prefix: 'start.make'
    description: 'Makefile help'
    body: '''
      .DEFAULT_GOAL := help
      .PHONY: help
      help:
      	@grep -E '^[a-zA-Z_-]+:.*?## .*$$' $(MAKEFILE_LIST) | sort | awk 'BEGIN {FS = ":.*?## "}; {printf "\033[36m%-30s\033[0m %s\n", $$1, $$2}'
      '''
```

Upon saving the file, get this error:

```plain
Failed to load snippets from '/.../.atom/snippets.cson'

/.../.atom/snippets.cson: ocatal esccape sequences are not allowed \03
```

Using the debugger arrive at this error message:


```plain
fs.js line 122
Error reading snippets file '/Users/mark/.atom/snippets.cson': [stdin]:147:99: error: octal escape sequences are not allowed \03
      	@grep -E '^[a-zA-Z_-]+:.*?## .*$$' $(MAKEFILE_LIST) | sort | awk 'BEGIN {FS = ":.*?## "}; {printf "\033[36m%-30s\033[0m %s\n", $$1, $$2}'
```

Which comes from this line/function:

```javascript
function nullCheck(path, callback) {
  if (('' + path).indexOf('\u0000') !== -1) {
    var er = new Error('Path must be a string without null bytes');
    er.code = 'ENOENT';
    if (typeof callback !== 'function')
      throw er;
    process.nextTick(callback, er); // <-- line 122
    return false;
  }
  return true;
}
```

**Reproduces how often**: Always

### Versions

```plain
> atom --version
Atom    : 1.22.0
Electron: 1.6.15
Chrome  : 56.0.2924.87
Node    : 7.4.0

> apm --version
apm  1.18.8
npm  3.10.10
node 6.9.5 x64
python 2.7.10
git 2.15.0

> sw_vers
ProductName:	Mac OS X
ProductVersion:	10.13.1
BuildVersion:	17B48
```

### Additional Information

Not certain to which of these this issue belongs:

- https://github.com/atom/season
- https://github.com/atom/snippets
- https://github.com/atom/atom
- https://en.wikipedia.org/wiki/ECMAScript
Because snippets are represented as Objects, a snippet called `__proto__` actually gets assigned as the object's real `__proto__`!  Definitely not intentional.  Blocked on atom/season#23, which is transmitting the CSON data back to us as an object.
<!--

Have you read Atom's Code of Conduct? By filing an Issue, you are expected to comply with it, including treating everyone with respect: https://github.com/atom/atom/blob/master/CODE_OF_CONDUCT.md

Do you want to ask a question? Are you looking for support? The Atom message board is the best place for getting support: https://discuss.atom.io

-->

### Prerequisites

* [x] Put an X between the brackets on this line if you have done all of the following:
    * Reproduced the problem in Safe Mode: http://flight-manual.atom.io/hacking-atom/sections/debugging/#using-safe-mode
    * Followed all applicable steps in the debugging guide: http://flight-manual.atom.io/hacking-atom/sections/debugging/
    * Checked the FAQs on the message board for common solutions: https://discuss.atom.io/c/faq
    * Checked that your issue isn't already filed: https://github.com/issues?utf8=âœ“&q=is%3Aissue+user%3Aatom
    * Checked that there is not already an Atom package that provides the described functionality: https://atom.io/packages

### Description

Backspacing on second tabstop deletes part of text in first tabstop when tabstops are contiguous.

### Steps to Reproduce

1. Create a simple "foo" snippet, such as:
```cson
  "foo":
    prefix: "foo"
    body: """
    ${2:bar}${3:baz}
    """
```
2. Open a new file and change the syntax to the one the snippet was placed under.
3. Activate the "foo" snippet
4. Type something of 2 characters or more to replace "bar" ("xyzz" for this example)
5. Tab to "baz"

**Expected behavior:** [What you expect to happen]
Only "baz" should be selected for replacement

**Actual behavior:** [What actually happens]
"yzzbaz" is selected for replacement. Only the first character of the first tabstop replacement ("x") is left unselected.

**Reproduces how often:** [What percentage of the time does it reproduce?]
100%

### Versions
Atom 1.17.0
MacOs Sierra 10.12.5

