This should fix the unstability we're having in TravisCI with JRuby at the moment. 
I believe this is much more user friendly as opposed to the
thinking what is positive/negative (like in an unless ... else,
or case when else). This way people see immediately that the else
branch was/wasn't hit or the then branch or the body of a loop.

Specifically I think it also helps with us reporting else branches
that aren't even defined (for if/case) - when people see 0 hits
for an else branch I think that's easier to figure out than
0 hits for the "-" branch. There's less of a "what does -/+ mean?"
going on.

As a side effect, also removes some code for checking what's
positive that's also rather intricately tied to how branch
coverage hands out its IDs which I don't believe we should take
for granted forever.

Old:

![Selection_090](https://user-images.githubusercontent.com/606517/72669258-b901d380-3a2f-11ea-83e1-de0a980e417d.png)

New:

![Selection_088](https://user-images.githubusercontent.com/606517/72669260-c028e180-3a2f-11ea-8da3-08b3eb029b44.png)




Shouldn't change within one process. As we check the value
potentially a lot caching it can/would/should be nice as opposed
to a require (that should no op but needs to check) and getting
a method arity.
We changed our file format with the 0.18.0 release series - unfortunately our code still seems to want to read the old file format and then break ;) We gotta be more careful there. I don't think we need to be able to read all old versions of files but I think we should rather capture the error and continue without processing the old results (easiest to achieve I believe).

This is my preliminary diagnosis, problems goes away when deleting the `coverage` directory.
Reported by @klyonrad https://github.com/colszowka/simplecov/issues/781#issuecomment-572633020

```
bundle show simplecov
/Users/username/.rvm/gems/ruby-2.6.5/gems/simplecov-0.18.0.beta1

bundle show simplecov-html
/Users/username/.rvm/gems/ruby-2.6.5/gems/simplecov-html-0.11.0.beta1

bundle exec rspec spec/policies
Run options: exclude {:future=>true}                                                                                 

Randomized with seed 25469
 237/237 |========================================== 100 ==========================================>| Time: 00:00:23 

Finished in 23.37 seconds (files took 10.5 seconds to load)
237 examples, 0 failures

Randomized with seed 25469
Traceback (most recent call last):
	15: from /Users/username/.rvm/gems/ruby-2.6.5/gems/simplecov-0.18.0.beta1/lib/simplecov/defaults.rb:29:in `block in <top (required)>'
	14: from /Users/username/.rvm/gems/ruby-2.6.5/gems/simplecov-0.18.0.beta1/lib/simplecov.rb:164:in `run_exit_tasks!'
	13: from /Users/username/.rvm/gems/ruby-2.6.5/gems/simplecov-0.18.0.beta1/lib/simplecov/configuration.rb:196:in `block in at_exit'
	12: from /Users/username/.rvm/gems/ruby-2.6.5/gems/simplecov-0.18.0.beta1/lib/simplecov.rb:74:in `result'
	11: from /Users/username/.rvm/gems/ruby-2.6.5/gems/simplecov-0.18.0.beta1/lib/simplecov/result_merger.rb:83:in `merged_result'
	10: from /Users/username/.rvm/gems/ruby-2.6.5/gems/simplecov-0.18.0.beta1/lib/simplecov/result_merger.rb:57:in `results'
	 9: from /Users/username/.rvm/gems/ruby-2.6.5/gems/simplecov-0.18.0.beta1/lib/simplecov/result_merger.rb:57:in `each'
	 8: from /Users/username/.rvm/gems/ruby-2.6.5/gems/simplecov-0.18.0.beta1/lib/simplecov/result_merger.rb:58:in `block in results'
	 7: from /Users/username/.rvm/gems/ruby-2.6.5/gems/simplecov-0.18.0.beta1/lib/simplecov/result.rb:72:in `from_hash'
	 6: from /Users/username/.rvm/gems/ruby-2.6.5/gems/simplecov-0.18.0.beta1/lib/simplecov/result.rb:86:in `symbolize_names_of_coverage_results'
	 5: from /Users/username/.rvm/gems/ruby-2.6.5/gems/simplecov-0.18.0.beta1/lib/simplecov/result.rb:86:in `each_with_object'
	 4: from /Users/username/.rvm/gems/ruby-2.6.5/gems/simplecov-0.18.0.beta1/lib/simplecov/result.rb:86:in `each'
	 3: from /Users/username/.rvm/gems/ruby-2.6.5/gems/simplecov-0.18.0.beta1/lib/simplecov/result.rb:87:in `block in symbolize_names_of_coverage_results'
	 2: from /Users/username/.rvm/gems/ruby-2.6.5/gems/simplecov-0.18.0.beta1/lib/simplecov/result.rb:87:in `each_with_object'
	 1: from /Users/username/.rvm/gems/ruby-2.6.5/gems/simplecov-0.18.0.beta1/lib/simplecov/result.rb:87:in `each'
/Users/username/.rvm/gems/ruby-2.6.5/gems/simplecov-0.18.0.beta1/lib/simplecov/result.rb:88:in `block (2 levels) in symbolize_names_of_coverage_results': undefined method `to_sym' for 1:Integer (NoMethodError)
Did you mean?  to_s
```

#781 

By default SimpleCov also tracks "coverage" for the run tests (spec/test/features directories) - which has always confused me as that pretty much only tests "are we running all of our tests?" (which sometimes leads to surprising results but that's a different topic...).

We also do the same thing in our own test (aka we assert against the specs and all of them are 100% covered). 

I find this to always artificially inflate coverage numbers as of course way more code is executed but that's not what you really want to check for - you care about your application code!

So one of the first things I do in any code base personally is `add_filter "spec"` and `add_filter "features"` or what not.

Of course if we did this, we'd also need a nicer way to remove filters/profiles again #803 

What do you think? Would that be a good default? Yes/No/Maybe?

@colszowka @deivid-rodriguez @bf4 
Discovered/verified in #814

Basically apparently it can happen that we generate the correct report but override it with an outdated one. Discovered running the parallel tests part of the features introduced in #841 (currently tagged wip to avoid flakies, remove the wip tag if you want to test this out). It doesn't happen reliably. Might happen 3 times in a row or not at all for 20 runs (for me at least).

I gathered some examples here: https://github.com/colszowka/simplecov/pull/814#issuecomment-573313375

What you can see there is something like this:

```
Coverage report generated for (2/8) to /home/tobi/github/simplecov/tmp/aruba/project/coverage. 23 / 33 LOC (69.7%) covered.
Coverage report generated for (1/8), (2/8), (3/8) to /home/tobi/github/simplecov/tmp/aruba/project/coverage. 37 / 43 LOC (86.05%) covered.
Coverage report generated for (1/8), (2/8), (3/8), (4/8) to /home/tobi/github/simplecov/tmp/aruba/project/coverage. 42 / 47 LOC (89.36%) covered.
Coverage report generated for (1/8), (2/8) to /home/tobi/github/simplecov/tmp/aruba/project/coverage. 32 / 39 LOC (82.05%) covered.
```

Notice that the second too last has the right number of loc and coverage expected in the test and also seems to take everything into account (unsure why it says n/8 though, guess: I could run 8 in parallel but parallel tests only spawned 4 as there are only 4 test files) but is seemingly later overridden by an outdated report.

If possible we should of course find and fix that race condition, and then remove the wip tags to always run these tests!
**ruby** version: 2.6.3
**simplecov** version: 0.17.1
**test-unit** version: 3.3.4

**Issue**
I have a project with some ruby scripts for CI purposes, and just now I'm creating unit tests for my ruby scripts, and I'm trying to get coverage from it with simplecov, but simplecov always gives me `0.0 / 0.0 LOC (100.0%) covered`.

Here's sample script to reproduce the issue

`test_calculator.rb`

```ruby
require 'simplecov'
SimpleCov.start

require 'test/unit'
require_relative '.scripts/tool/calculator'

# Test calculator
class CalculatorTest < Test::Unit::TestCase
  def test_add_2_different_numbers
    assert sum(2, 2) == 4
  end

  def test_add_same_numbers
    assert sum(2) == 4
  end
end
```

`.scripts/tool/calculator.rb`

```ruby
def sum(first, second = nil)
  first + second unless second.nil?
  first + first
end
```

```sh
Loaded suite test_calculator
Started
..
Finished in 0.000728 seconds.
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
2 tests, 2 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications
100% passed
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
2747.25 tests/s, 2747.25 assertions/s
Coverage report generated for Unit Tests to /Users/fadeltd/project/ruby-scripts/coverage. 0.0 / 0.0 LOC (100.0%) covered.
```

It seems that simplecov can't generate coverage for `require_relative` when the first directory name has `.` prefix
I've tried renaming my directory to `scripts/.tool/calculator`, and  it works

```sh
Loaded suite test_calculator
Started
..
Finished in 0.000402 seconds.
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
2 tests, 2 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications
100% passed
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
4975.12 tests/s, 4975.12 assertions/s
Coverage report generated for Unit Tests to /Users/fadeltd/project/ruby-scripts/coverage. 3 / 3 LOC (100.0%) covered.
```

How can I fix this issue without having to rename my directory?
Thanks
JSON serialization/parsing works fine for line coverage, however for branch coverage the structure we have is that of an array that is the key pointing to values. Sadly, that breaks when dumping and parsing from JSON:

```ruby
irb(main):031:1* map = {
irb(main):032:1*   [:if, 0, 3, 11, 3, 33] =>
irb(main):033:1*   {[:then, 1, 3, 23, 3, 27] => 1, [:else, 2, 3, 30, 3, 33] => 0
},
irb(main):034:1*   [:if, 3, 6, 6, 10, 9] =>
irb(main):035:1*   {[:then, 4, 7, 8, 7, 12] => 0, [:else, 5, 9, 8, 9, 11] => 1}
irb(main):036:0> }
irb(main):037:0> JSON.parse JSON.dump map
=> {"[:if, 0, 3, 11, 3, 33]"=>{"[:then, 1, 3, 23, 3, 27]"=>1, "[:else, 2, 3, 30, 3, 33]"=>0}, "[:if, 3, 6, 6, 10, 9]"=>{"[:then, 4, 7, 8, 7, 12]"=>0, "[:else, 5, 9, 8, 9, 11]"=>1}}
```

Which needs to be solved via either regexp based parsing or evaling strings (currently on my branch) which is medium fine as we read our own output but doesn't sound quite great.

This particula scenario does work when using YAML though:

```ruby
irb(main):038:0> YAML.load YAML.dump map
=> {[:if, 0, 3, 11, 3, 33]=>{[:then, 1, 3, 23, 3, 27]=>1, [:else, 2, 3, 30, 3, 33]=>0}, [:if, 3, 6, 6, 10, 9]=>{[:then, 4, 7, 8, 7, 12]=>0, [:else, 5, 9, 8, 9, 11]=>1}}
```

However, YAML support was removed way back in [0.5.0](https://github.com/colszowka/simplecov/blob/master/CHANGELOG.md#v050-2011-09-09-changes). I haven't been around then so I don't know about the errors caused there and if that's still relevant.

Right now there is a third problem, namely we parse symbolizing keys which creates tons of symbols just to transform them to strings again for evaling/parsing.

Anyhow, it's a problem. Possible solutions with different levels of "solving it":

* stop symbolizing keys (minimum requirement)
* evaluate storing YAML again instead of JSON
* store a format that is further away from the original coverage data but that is easier to parse again
  * like [using arrays instead of hashes](https://github.com/colszowka/simplecov/issues/801#issuecomment-569648280) thanks @tycooon !

@colszowka input especially on the YAML thing rather welcome :)

#781
I find it a bit odd that simplecov doesn't check it's own coverage. What do you think about adding that functionality?

I guess this might be not super straightforward since there also is Cucumber present in the project, but maybe it's possible to merge the results. Or at least having RSpec coverage reported would be a benefit.