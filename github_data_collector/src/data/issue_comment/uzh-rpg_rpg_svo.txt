Hi,

We are trying to run SVO with ROS on a DOWNLOOKING camera and high frequency texture using iPhone camera with 60 fps.

We are observing a strange phenomenon of the ground "rising" as the camera is moving. also when the camera is making a turn the ground is observed as if it is on a tilt to the left and not horizontal. 
Another issue is that the "density" of seeds and points on the map are spreading farther as the camera moves.
We have an hypothesis that it is something to do with the depth estimation / seed insertion with wrong depth, Can anyone have a suggestion on where in the code we can look for it?

attached are snapshots of the stated issues:
![ground lift](https://user-images.githubusercontent.com/59387535/71615717-4b465280-2bbb-11ea-9fcc-4f832bf2ec1d.jpg)

![density](https://user-images.githubusercontent.com/59387535/71615719-4ed9d980-2bbb-11ea-8f8e-11a11b582400.jpg)


the paramater file:
[pinhole_iPhone2.txt](https://github.com/uzh-rpg/rpg_svo/files/4012226/pinhole_iPhone2.txt)

Someone can give some help?
The davis camera`s resolution is 240x180.
![Screenshot from 2019-11-13 11-58-40](https://user-images.githubusercontent.com/20484903/68732020-f780a980-060c-11ea-960b-1dc7491d9ca7.png)

I have installed svo and test the example successfully, but when  I run it on my own data it only shows images and cant estimate the camera pose.
As the log shows: My bag only has /dvs/image_raw, and the example bag has many other topics, what should I do to run svo on my own bag?

**usr@usr:~/svo_ws/src/SVO/rpg_svo/svo_ros/data$ rosbag info airground_rig_s3_2013-03-18_21-38-48.bag** 
path:        airground_rig_s3_2013-03-18_21-38-48.bag
version:     2.0
duration:    2:42s (162s)
start:       Mar 19 2013 04:38:50.32 (1363639130.32)
end:         Mar 19 2013 04:41:32.76 (1363639292.76)
size:        1.7 GB
messages:    61273
compression: none [1625/1625 chunks]
types:       geometry_msgs/PoseStamped    [d3812c3cbc69362b77dc0b19b345f8f5]
             geometry_msgs/Vector3Stamped [7b324c7325e683bf02a9b14b01090ec7]
             sensor_msgs/CameraInfo       [c9a58c1b0b154e0e6da7578cb991d214]
             sensor_msgs/Image            [060021388200f6f0f447d0fcd9c64743]
             sensor_msgs/Imu              [6a62c6daae103f4ff57a132d6f95cec2]
topics:      /imu/magnetometer    16244 msgs    : geometry_msgs/Vector3Stamped
             Rig                  19039 msgs    : geometry_msgs/PoseStamped   
             camera/camera_info    4873 msgs    : sensor_msgs/CameraInfo      
             camera/image_raw      4873 msgs    : sensor_msgs/Image           
             imu/data             16244 msgs    : sensor_msgs/Imu
**usr@usr:~/svo_ws/src/SVO/rpg_svo/svo_ros/data$ rosbag info DAVIS240C-2018-11-26T16-51-05+0800-08360021-0.bag** 
path:        DAVIS240C-2018-11-26T16-51-05+0800-08360021-0.bag
version:     2.0
duration:    15.5s
start:       Jan 01 1970 08:03:43.94 (223.94)
end:         Jan 01 1970 08:03:59.39 (239.39)
size:        115.6 MB
messages:    533
compression: none [126/126 chunks]
types:       dvs_msgs/EventArray [5e8beee5a6c107e504c2e78903c224b8]
             sensor_msgs/Image   [060021388200f6f0f447d0fcd9c64743]
topics:      /dvs/events      349 msgs    : dvs_msgs/EventArray
             /dvs/image_raw   184 msgs    : sensor_msgs/Image
I have installed svo, it is working on (detecting camera) on the sequence provided online. I have changed the calibration settings, but my own bag file it is giving error. 

![error svo](https://user-images.githubusercontent.com/42496188/62519804-c0e50700-b845-11e9-9853-04717f672e2b.jpeg)

![installed svo](https://user-images.githubusercontent.com/42496188/62519815-c5112480-b845-11e9-928f-8a214866cd95.jpeg)
I would like to create a nice environment so the SVO package works well. I'm using an AR.Drone 2.0. The bottom camera is a QVGA (320*240) and works at 20 Hz. The environment where this package is going to be used is a 80cm x 80cm platform and nothing outside it. In the platform I can put all the images or things that I want. 

This is how the platform looks now (the white papers with some AR tags on them), and SVO says that there are not enough features:
![Screenshot from 2019-07-25 17-56-47](https://user-images.githubusercontent.com/31355184/61911292-78f0e680-af0d-11e9-825f-b805aae02def.png)

So I added some black and white squares between some tags and it seems to work:

![Screenshot from 2019-07-25 18-34-25](https://user-images.githubusercontent.com/31355184/61911401-c1a89f80-af0d-11e9-8bbb-39d594aada97.png)

but then I move the camera a little and this is what happens:

![Screenshot from 2019-07-25 18-34-50](https://user-images.githubusercontent.com/31355184/61911440-dedd6e00-af0d-11e9-80fc-3d080940a209.png)


So, how do you recommend me to design that platform? Maybe adding a lot of black and white squares between all tags? Or is there anything better to do?

Thanks


when I run the cmd: **rosrun rqt_svo rqt_svo**,then met the problem:
![image](https://user-images.githubusercontent.com/26212984/61217399-2f9cdc00-a742-11e9-9099-8491bdde9a1a.png)
then I use the cmd: **rm ~/.config/ros.org/rqt_gui.ini** 
and the qusetion is still existence。

I have install **libqt4-dev,qt4-qmake , and with ubuntu 16.04, ROS kinetic。**
Someone says it should install  Qt 5 on my computer, but I found that Ubuntu 16.04 LTS uses an independent system for controlling the Qt version, and it is QT4.

I do not know how to solve it. Please help me, thanks a lot.
Tried to follow installation guide, but Sophus isn't cooperating. When I checkout a621ff and then subsequently try to make, I get:

`[  5%] Building CXX object CMakeFiles/Sophus.dir/sophus/so2.cpp.o
/home/per/workspace/Sophus/sophus/so2.cpp: In constructor ‘Sophus::SO2::SO2()’:
/home/per/workspace/Sophus/sophus/so2.cpp:32:26: error: lvalue required as left operand of assignment
   unit_complex_.real() = 1.;
                          ^~
/home/per/workspace/Sophus/sophus/so2.cpp:33:26: error: lvalue required as left operand of assignment
   unit_complex_.imag() = 0.;
                          ^~
CMakeFiles/Sophus.dir/build.make:65: recipe for target 'CMakeFiles/Sophus.dir/sophus/so2.cpp.o' failed
make[2]: *** [CMakeFiles/Sophus.dir/sophus/so2.cpp.o] Error 1
CMakeFiles/Makefile2:144: recipe for target 'CMakeFiles/Sophus.dir/all' failed
make[1]: *** [CMakeFiles/Sophus.dir/all] Error 2
Makefile:140: recipe for target 'all' failed
make: *** [all] Error 2
`

Trying to build from master is a no-go as well. Relevant information:

`$ lsb_release -a
No LSB modules are available.
Distributor ID:	Ubuntu
Description:	Ubuntu 18.04.2 LTS
Release:	18.04
Codename:	bionic`

`$ dpkg -l ros-melodic-desktop-full
Desired=Unknown/Install/Remove/Purge/Hold
| Status=Not/Inst/Conf-files/Unpacked/halF-conf/Half-inst/trig-aWait/Trig-pend
|/ Err?=(none)/Reinst-required (Status,Err: uppercase=bad)
||/ Name           Version      Architecture Description
+++-==============-============-============-=================================
ii  ros-melodic-de 1.4.1-0bioni amd64        A metapackage to aggregate severa`

`$ g++ --version
g++ (Ubuntu 7.3.0-27ubuntu1~18.04) 7.3.0
Copyright (C) 2017 Free Software Foundation, Inc.
This is free software; see the source for copying conditions.  There is NO
warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.`

Would appreciate any help available.
I would like to know if the groundtruth for the dataset given as an example on the wiki is available somewhere, to compare it with the results of svo. I have been trying to obtain it from the imu linear acceleration (by integrating it twice) but it seems to not be working. 

Has anyone done this too? Thanks in advance!
Hi,

I am aware `svo` is not optimized to work on forward facing cameras. But the problem is not with tracking.

I am using `KITTI sequence 00` dataset. The problem is with initial map estimation. The number of inliers computed seems to be very less (102/333 with mean disparity 15 and 23/258 with mean disparity 56). This is quite surprising given that camera is well calibrated for this official dataset.

My conclusion is that;

1. KITTI doesn't provide camera distortion parameters, could this be the problem?
2. Also, `svo` runs perfectly well on the provided [dataset](https://github.com/uzh-rpg/rpg_svo/tree/master/svo/test) using `test_pipeline` functionality. So I reckon there is no problem with [Homography](https://github.com/uzh-rpg/rpg_svo/blob/master/svo/src/initialization.cpp#L187) nor [inliers computation](https://github.com/uzh-rpg/rpg_svo/blob/master/svo/src/initialization.cpp#L190)

@cfo @zhangzichao Could you please have a look at this issue?
I built the test_pipeline with llvm 7.0 on Mac, then play with sample data "sin2_tex2_h1_v8_d". I am using the Release with debug info build type thus local BA not enabled.

Sometimes (not often) test_pipeline finishes w/o any exception, but **most times** it finishes with an error at the cleanup stage:

> Frame-Id: 185 	#Features: 121 	Proc. Time: 1.915ms 
last position: 11.539 4.90906 -0.00978625
 [INFO] DepthFilter stop thread invoked.
 [INFO] DepthFilter interrupt and join thread... 
 [INFO] DepthFilter destructed.
test_pipeline(6773,0x7fffc47a33c0) malloc: *** error for object 0x3e21d75abf37abac: pointer being freed was not allocated
*** set a breakpoint in malloc_error_break to debug
Abort trap: 6

Then I tried to use lldb get the back trace:

> (lldb) bt
* thread #1, queue = 'com.apple.main-thread', stop reason = signal SIGABRT
  * frame #0: 0x00007fffbb9bbd42 libsystem_kernel.dylib`__pthread_kill + 10
    frame #1: 0x00007fffbbaa9457 libsystem_pthread.dylib`pthread_kill + 90
    frame #2: 0x00007fffbb921420 libsystem_c.dylib`abort + 129
    frame #3: 0x00007fffbba10fe7 libsystem_malloc.dylib`free + 530
    frame #4: 0x00000001000bf1d5 libsvo.dylib`svo::initialization::KltHomographyInit::~KltHomographyInit() [inlined] Eigen::internal::handmade_aligned_free(ptr=<unavailable>) at Memory.h:98 [opt]
    frame #5: 0x00000001000bf1cc libsvo.dylib`svo::initialization::KltHomographyInit::~KltHomographyInit() [inlined] Eigen::internal::aligned_free(ptr=<unavailable>) at Memory.h:179 [opt]
    frame #6: 0x00000001000bf1cc libsvo.dylib`svo::initialization::KltHomographyInit::~KltHomographyInit() [inlined] Eigen::aligned_allocator<Eigen::Matrix<double, 3, 1, 0, 3, 1> >::deallocate(p=<unavailable>) at Memory.h:763 [opt]
    frame #7: 0x00000001000bf1cc libsvo.dylib`svo::initialization::KltHomographyInit::~KltHomographyInit() [inlined] std::__1::allocator_traits<Eigen::aligned_allocator<Eigen::Matrix<double, 3, 1, 0, 3, 1> > >::deallocate(__p=<unavailable>) at memory:1556 [opt]
    frame #8: 0x00000001000bf1cc libsvo.dylib`svo::initialization::KltHomographyInit::~KltHomographyInit() [inlined] std::__1::__vector_base<Eigen::Matrix<double, 3, 1, 0, 3, 1>, Eigen::aligned_allocator<Eigen::Matrix<double, 3, 1, 0, 3, 1> > >::~__vector_base(this=<unavailable>) at vector:459 [opt]
    frame #9: 0x00000001000bf1b9 libsvo.dylib`svo::initialization::KltHomographyInit::~KltHomographyInit() [inlined] std::__1::vector<Eigen::Matrix<double, 3, 1, 0, 3, 1>, Eigen::aligned_allocator<Eigen::Matrix<double, 3, 1, 0, 3, 1> > >::~vector(this=<unavailable>) at iterator:1427 [opt]
    frame #10: 0x00000001000bf1b9 libsvo.dylib`svo::initialization::KltHomographyInit::~KltHomographyInit() [inlined] std::__1::vector<Eigen::Matrix<double, 3, 1, 0, 3, 1>, std::__1::allocator<Eigen::Matrix<double, 3, 1, 0, 3, 1> > >::~vector(this=<unavailable>) at global.h:36 [opt]
    frame #11: 0x00000001000bf1b9 libsvo.dylib`svo::initialization::KltHomographyInit::~KltHomographyInit() [inlined] std::__1::vector<Eigen::Matrix<double, 3, 1, 0, 3, 1>, std::__1::allocator<Eigen::Matrix<double, 3, 1, 0, 3, 1> > >::~vector(this=<unavailable>) at global.h:36 [opt]
    frame #12: 0x00000001000bf1b9 libsvo.dylib`svo::initialization::KltHomographyInit::~KltHomographyInit(this=0x0000000116000380) at initialization.h:39 [opt]
    frame #13: 0x00000001000bb796 libsvo.dylib`svo::FrameHandlerMono::~FrameHandlerMono() [inlined] svo::initialization::KltHomographyInit::~KltHomographyInit(this=<unavailable>) at initialization.h:39 [opt]
    frame #14: 0x00000001000bb791 libsvo.dylib`svo::FrameHandlerMono::~FrameHandlerMono(this=0x0000000116000020) at frame_handler_mono.cpp:57 [opt]
    frame #15: 0x00000001000bb8be libsvo.dylib`svo::FrameHandlerMono::~FrameHandlerMono() [inlined] svo::FrameHandlerMono::~FrameHandlerMono(this=0x0000000116000020) at frame_handler_mono.cpp:55 [opt]
    frame #16: 0x00000001000bb8b9 libsvo.dylib`svo::FrameHandlerMono::~FrameHandlerMono(this=0x0000000116000020) at frame_handler_mono.cpp:55 [opt]
    frame #17: 0x000000010000f67c test_pipeline`main [inlined] svo::BenchmarkNode::~BenchmarkNode() at test_pipeline.cpp:56 [opt]
    frame #18: 0x000000010000f66d test_pipeline`main [inlined] svo::BenchmarkNode::~BenchmarkNode() at test_pipeline.cpp:55 [opt]
    frame #19: 0x000000010000f66d test_pipeline`main(argc=<unavailable>, argv=<unavailable>) at test_pipeline.cpp:103 [opt]
    frame #20: 0x00007fffbb88d235 libdyld.dylib`start + 1

My Eigen library is 3.3.7. 

Not sure if anyone has met similar issue and got a fix?

 
