I tried to build pyrebox on my debian machine and it fails during compilation. Here the steps:

```
$ apt-get install build-essential zlib1g-dev pkg-config libglib2.0-dev binutils-dev libboost-all-dev autoconf libtool libssl-dev libpixman-1-dev libpython-dev python-pip virtualenv python-capstone
$ virtualenv pyrebox_venv
$ source pyrebox_venv/bin/activate
$ pip install -r requirements.txt
$ source pyrebox_venv/bin/activate
$ ./build.sh
```
It compiles the sleuthkit successfully but it fails during compiling qemu, with the following error:
```
In file included from /usr/include/string.h:494,
                 from /home/cube/security/tools/pyrebox/qemu/include/qemu/osdep.h:101,
                 from util/qemu-sockets.c:18:
In function ‘strncpy’,
    inlined from ‘unix_connect_saddr.isra.0’ at util/qemu-sockets.c:925:5:
/usr/include/x86_64-linux-gnu/bits/string_fortified.h:106:10: error: ‘__builtin_strncpy’ specified bound 108 equals destination size [-Werror=stringop-truncation]
  106 |   return __builtin___strncpy_chk (__dest, __src, __len, __bos (__dest));
      |          ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
In function ‘strncpy’,
    inlined from ‘unix_listen_saddr.isra.0’ at util/qemu-sockets.c:880:5:
/usr/include/x86_64-linux-gnu/bits/string_fortified.h:106:10: error: ‘__builtin_strncpy’ specified bound 108 equals destination size [-Werror=stringop-truncation]
  106 |   return __builtin___strncpy_chk (__dest, __src, __len, __bos (__dest));
      |          ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

```
Any suggestion?
usb_add does no longer exist (https://wiki.qemu.org/ChangeLog/2.11). Malware monitor 2 is not properly documented, and new features such as file system inspection, symbol caches, volatility3, are not documented.
Hi! I tried running the current codebase on two machines with Ubuntu 18.04.2 and Debian 9.6. To get a taste of what I mean by extremely slow, it takes over 5 minutes to boot a freshly installed Windows 7 on an i7-3632QM machine compared to 1 minute in Ubuntu's QEMU 2.11.1 in emulation mode (no `-enable-kvm` and same switches used for `./pyrebox-i386` and vanilla `qemu-system-i386`). When I start a demo program within mw_monitor, say Al-Khaser or the standalone PuTTY client, I can see the agent transferring the file in the expected path and the entry point for the executable shown on screen, then I'll have to wait a few dozens of minutes to see any activity (say, for PuTTY it took about 20 minutes to reach the `Executed first instruction` + `Successfully removed trigger` stage, and then 5-10 minutes to show the GUI).

When I unload the monitor the function call log is generated apparently correctly (I only tried it in light mode). On the first run ever file `symbols.Win7SP1x86` was generated with about three errors on missing files. I once let mw_monitor run Al-Khaser for about two days and it was still executing some of its checks when I killed it.

Any idea where the issue may lie? Could it be a wrong Volatility/QEMU setup/build?

Some details on the configuration. The guest is Windows 7 SP1 build 7601 running with 2 GB of RAM. For `pyrebox.conf`:
```
[MODULES]
plugins.guest_agent: False
mw_monitor.mw_monitor: False

[VOL]
profile: Win7SP1x86

[AGENT]
name: win_agent_32.exe
conf: win_agent_32.exe.conf 

[SYMBOL_CACHE]
path: symbols.Win7SP1x86
```

Command line to boot up QEMU (I get the same behavior w/ and w/o snapshot):
```
./pyrebox-i386 -m 2048 -monitor stdio -usb -drive file=images/win7sp1_x86.qcow2,index=0,media=disk,format=qcow2,cache=unsafe -device usb-tablet -loadvm cmd2 -vnc 127.0.0.1:0
```

Once the system is up I import the guest agent module, run its executable from a command prompt, and then proceed with mw_monitor:
```
import_module plugins.guest_agent
(run the agent from cmd.exe)
import_module mw_monitor.mw_monitor
```

I am using the default `mw_monitor.conf` updated to point to the SQLite DB shipped with the PyREBox repository, and customized `mw_monitor_run.json` as follows:

```
{
    "api_tracer": {
        "bin_log": false,
        "exclude_apis": [],
        "exclude_modules": ["ntdll.dll"],
        "exclude_origin_modules": [],
        "include_apis": [],
        "light_mode": true,
        "procs": null,
        "text_log": true
    },
    "coverage": {
        "procs": null
    },
    "dumper": {  
        "dump_at": "kernel32.dll!CopyFileA",
        "dump_on_exit": false
    },
    "general": {
        "files_path": "C:\\Users\\Dabura\\Desktop\\",
        "main_executable": "putty.exe",
        "files_bundle": "/mnt/data/malware/testing/putty.zip"
    },
    "interproc": {
        "basic_stats": true,
        "bin_log": true,
        "text_log": true
    },
    "modules": {
        "api_tracer": true,
        "coverage": false,
        "dumper": false,
        "interproc": false
    }
}
```

The sample scripts "script_example_min.py" doesn't work for my setting. 
**My settings**:
1. PyREBox installed on Ubuntu 16.04.
2. Guest system Windows 10 x64 1607.

**My observations**: 
1. I can't see callback logs after PyREBox is started. 
2. I checked the code of vmi.cpp and found that "os_index" parameter in method vmi_init() is set to VistaSP2x64 rather than Win10x64, when vol_profile equals to "Win10x64". 
**My question is**: is it because Windows 10 is not supported on current PyREBox, or Windows 10 works the same way as VistaSP2?
3. When I modified source code by changing "os_index" in vmi_init() from VistaSP2x64 to Win10x64. I can see one log message for the creation of first process, and then no logs for the remaining processes.

Please suggest on how to make PyREBox callbacks work in Windows 10 setting. 
Thank you.
This PR adds a custom command called `rap` that implements a radare RAP server.

To start using it, add the following module to pyrebox.conf:

```
[MODULES]
radare2.rap: True
```

Then, from the pyrebox shell, use the following command to start a RAP server listening on `localhost:1234`:

```
[1] pyrebox> custom rap :1234
```

After that, you can connect to pyrebox using r2 with:

```
$ r2 -e 'io.va=0' -w rap://localhost:1234/<pid or proc name>
```

The RAP server can be closed from the pyrebox shell with:

```
[2] pyrebox> custom rap shutdown
```
Hi,

I am trying to use your project to speed up malware unpacking. So, I am trying to set up malware monitor.

Following the instructions I have compile the DbGenerator from the project Deviare2 after patching it as you saw (first just this tool and after that the full project). The issue is that to use Database/DbBuilder/ run build_db32 you need a prepossess headers(in this case preprocessW32.h) or just a .h file with the headers you want to build the database for. The preprocessW32.h headers are missing, at least in my case. I have seem many headers file under the directory HeaderBuilder. What would be the proper header file to be used with Malware monitor in Pyrebox?

Cheers,

Vicente

The VM agent allows easier full automation of tests, both for windows and linux. The tests should be improved so that they can be run automatically.
- [x] Listing processes during system boot and system operation
- [x] Monitoring individual address spaces (processes)
- [ ] Monitoring individual threads separately
- [x] Extracting module information for user processes and kernel, as well as symbols
- [ ] Extracting symbols from .dynsym (dynamic symbols) from memory.
- [ ] Add documentation on how to generate volatility profiles for linux kernels.
- [ ] Add tests for linux VMI, process and module creation/removal detection, and other relevant callback types.
Hey all,

Super interested to play with this. I see you have a Dockerfile created. Unfortunately, I cannot create an automated build against your github account since I do not own it. Could you guys setup an auto-build?
what about the performance ? Whole system emulation would be very slow , i think :(