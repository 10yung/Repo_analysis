### What are you trying to achieve? (Expected behavior)
<!-- Please fill -->
Sometimes, async elements overlaying another element intercept clicks, even though `ElementToBeClickable` suggests that the underlying element is clickable (it's not)

### What do you get instead? (Actual behavior)
<!-- Please fill -->
The method to return true only when the element *really* is clickable. When other items overlay it (like fixed position elements) the element is **not** clickable, even though it's in the DOM, visible, and ready.

### How could the issue be reproduced? (Steps to reproduce)
<!-- Please fill everything relevant - the exact code you use, how you initialize the WebDriver, HTML snippet or URL of the page where you encounter the issue etc. -->
Just overlay a button with a fixed element.

```php
// You can insert your PHP code here (or remove this block if it is not relevant for the issue).
```

### Details
<!-- Please fill relevant following versions: -->

* Php-webdriver version: 1.8@dev
* PHP version: 7.3
* Selenium server version: 3.141.59-yttrium
* Operating system: Mac OS X Mojave
* Browser used + version: Chrome 76

I've included an extra commit here because the W3C mode doesn't take any arguments but JSONWire does but we were still including the args still.
Selenium website was changed, so let's build example on something with less progressive design - like wikipedia :).
### What are you trying to achieve? (Expected behavior)
If I have a cookie from webdriver I expect to read the "SameSite" attribute of the cookie.

### What do you get instead? (Actual behavior)
In https://github.com/facebook/php-webdriver/blob/community/lib/Cookie.php#L49 the "SameSite" attribute is not saved in the cookie.

### Details

* Php-webdriver version: 1.7.1
* PHP version: 7.3.11
* Operating system: CentOS 7
* Browser used + version: Chromium 77.0.3865.90
* Chromedriver used: ChromeDriver 77.0.3865.90

I've just been through the spec document comparing to the actions in the HttpCommandExecutor. The following commands defined in the W3C specification are currently missing:

- [x] 11.7 Switch to Parent Frame #718
`POST  /session/{session id}/frame/parent`
- [x] 11.8.4 Minimize Window #719
`POST  /session/{session id}/window/minimize`
- [ ] 11.8.5 Fullscreen Window #720
`POST  /session/{session id}/window/fullscreen`
- [x] 14.2 Get Named Cookie #717 
`GET  /session/{session id}/cookie/{name}`
- [ ] 15.6 Release Actions
`DELETE  /session/{session id}/actions`
- [x] 17.2 Take Element Screenshot #701 
`GET  /session/{session id}/element/{element id}/screenshot`

Source: https://www.w3.org/TR/webdriver/
Ref. #469 
![IMG_20190816_114003_856](https://user-images.githubusercontent.com/54153824/63150667-addbef00-c01c-11e9-94cf-3c00d802401a.jpg)
When I Use takeScreenShot Method The Output Will Be Something Like That! It Will Screenshot Top Left Corner Of The Page Not The Full Page!
This is request for comments about  the next major version of php-webdriver (2.0). Once we understand what we want/need to do, we can divide the work among interested volunteers and get it rollin'! :rocket: 

### Suggested objectives
#### Support only W3C WebDriver
Support only the new protocol and drop support of JsonWire protocol. This will allow us to focus our limited resources to make long-term working implementation of PHP language bindings. 

In my opinion, maintaining compatibility with the old protocol is not effective, as the situation has developed rapidly since issue #469 was originally written:

- W3C WebDriver standard was published on 2018-06-05 - its already a year ago
- Support of the new protocol amongst browsers is getting better with every version of the respective browsers: see https://webdriver-herald.herokuapp.com/  or https://wpt.fyi/results/webdriver
  - Chrome uses W3C protocol [by default](https://chromedriver.storage.googleapis.com/75.0.3770.8/notes.txt) since version 75 (released 2019-06-04); even though it could be disabled, it won't work with Selenium 3.9.0 and newer (because of the missing passThrough mode)
  - Chromedriver 76 [will include](https://bugs.chromium.org/p/chromedriver/issues/detail?id=1897) W3C WebDriver Actions API, one of the last missing pieces of full implementation of the standard
  - Firefox (geckodriver) support only W3C protocol from the beginning
  - IEServerDriver was, in fact, the first one with W3C protocol support
- Selenium 3 is now in maintenance-only mode, development is now focused on Selenium 4, which will even improve W3C protocol support (and may start breaking JsonWire protocol support).
- The last Firefox working with the JsonWire protocol is Firefox 47 released in June 2016 (over 3 years ago). Even the last Firefox Extended Support (ESR) version which supported JsonWireProtocol is over two years old (45.x) and no longer supported.
- Most people probably run php-webdriver against Chrome/Chromium, which supports both protocols.

So I don't see an actual need for the JsonWire protocol.

#### Drop PHP 5.6 and 7.0 support
Those version of PHP are no longer supported.  We may also drop PHP 7.1 support, as it is in security-support mode (and only for few next months).

With PHP 7.1+ or 7.2+ we can use many of its new features, most importantly types in method parameters and return values. 

If someone cannot use those new versions of PHP, he is probably working in rigid environment and maybe don't use the latest version of browsers  - so one can still use the 1.x version of php-webdriver. Or has to upgrade :man_shrugging: .

#### Clean object dependencies
Historically, this library object model is based on interfaces, which often breaks [LSP](https://en.wikipedia.org/wiki/Liskov_substitution_principle). It also causes headaches for static analysis. This could be taken care of in the new version.

#### Other suggestions?
Are there any other issues we should solve? 
Any missing features (see Java version changelog)?
Or something which should be done together with BC break?

Please comment!
### What are you trying to achieve? (Expected behavior)
Test website for presence of alert messages

### What do you get instead? (Actual behavior)
Falsy behavior when site contains elements such us inline `<style>` or more complicated DOM Tree

### How could the issue be reproduced? (Steps to reproduce)
When presenting simple page to webdriver (for example only with `<script>alert(1)</script>` tag, script does correctly check for alert presence

on the other hand, embedding script in more complex DOM Tree (such as this Bootstrap Snippet: https://bootsnipp.com/snippets/RE68M) makes script fail to detect alert.

Alert is still present in user browser

I had situations in which alert is not correctly detected by script, but removing only inline css style (it might be only 1 line) ended in changing script behavior to correct again.

```php
$host = 'http://localhost:4444/wd/hub'; // this is the default
$capabilities = DesiredCapabilities::chrome();

$options = new ChromeOptions();

// all options required to work
$options->addArguments(array(
    "--headless", "window-size=1024,768", "--no-sandbox"
));
$prefs = array(
    'permissions.default.stylesheet' => 2,
    'permissions.default.image' => 2
);
$options->setExperimentalOption('prefs', $prefs);
$capabilities->setCapability(ChromeOptions::CAPABILITY, $options);
$driver = RemoteWebDriver::create($host, $capabilities, 5000);

$driver->get("url");

function isAlertPresent($driver){
    $presentFlag = false;

    try{
        $driver->wait(10)->until(WebDriverExpectedCondition::alertIsPresent());
        $driver->switchTo()->alert()->accept();
        $presentFlag = true;
    }
    catch (Exception $ex){}

    return $presentFlag;
}

$alert_is_present = isAlertPresent($driver);
// close the browser
$driver->quit();
```

Example of HTML file: https://gist.github.com/jpastuszuk/fc6dff861a75c1588345792bb69b3820

In this state, Result of check fo alert will be False
Removing/commenting only style tags will result in correct Alert detection (true)

### Details
<!-- Please fill relevant following versions: -->

* Php-webdriver version: 1.7.1
* PHP version: 7.2.19
* Selenium server version: 3.9.1
* Operating system: Mac OS Mojave/ Ubuntu 18.10
* Browser used + version: ChromeDriver 76.0.3809.68 / Google Chrome 76.0.3809.87

Has they been thought about having something like a `findElementWithWait()` function

I know there is there is the `$driver->wait()->until()` logic (and it's not in the standard java api), but this is a bit cumbersome to always write, especially if the element you are looking for is a child of the parent element you are calling the find from. In this case you will need to write some function like

```php

    $parent = $this->driver->findElement(WebDriverBy::xpath("..."));
    $this->driver->wait()->until(
        function () use ($parent){
            try{
                return  $parent->findElement(WebDriverBy::xpath("...")) 
            }
            catch (NoSuchElementException $e){
                return null;
            }
        }
    );
    
    $parent->findElement($elementPath)->click()
}
```

And i know, you can just refactor this out (which I have done), but would be great if we can call this method on a parent item directly. i.e

```php
 $parent = $this->driver->findElement(WebDriverBy::xpath("..."));
 $parent->findElementWithWait(WebDriverBy::xpath("...."))->click()
 ```

Do you think this is something worth implementing?
 
### Details
<!-- Please fill relevant following versions: -->

* Php-webdriver version: 1.7.0
* PHP version: 7.2
* Selenium server version:  3.9.1
* Operating system: Ubuntu 18.02
* Browser used + version: Chrome 25

### What are you trying to achieve? (Expected behavior)
After try/catch with Exception on get() method, you should able to continue use driver instance.

### What do you get instead? (Actual behavior)
But after catch Exception and in next commands internal timeout occurred
(Facebook\WebDriver\Exception\TimeOutException: timeout) on every HttpCommandExecutor commands.

### How could the issue be reproduced? (Steps to reproduce)
create a php link in server with this content ( to get it with selenium) :
_we call it http://example.com/timeout.php for example here._
```
<html>
	<head>
		<title>Page with Timeout</title>
	</head>

	<body>
		<script src="https://httpstat.us/200?sleep=600000"></script>
	</body>
</html>
```

**Scenario # 1 (with problem)**
```php
$link1 = 'http://example.com/timeout.php'; // html response received but <script> link will not be complete before pageLoadTimeout value.
$driver->manage()->timeouts()->pageLoadTimeout(10);

try {
    $driver->get($link);
}
catch (\Exception $e) {
    \Log::debug('Exception: (Timeout)');
}

$driver->refresh(); // OR any other command to interact with browser.
```

**Scenario # 2 (without problem)**
```php
$link2 = 'https://httpstat.us/200?sleep=600000'; // main url will not be load in long time.
$driver->manage()->timeouts()->pageLoadTimeout(10);

try {
    $driver->get($link);
}
catch (\Exception $e) {
    \Log::debug('Exception: (Timeout)');
}

$driver->refresh(); // OR any other command to interact with browser.
```

In both scenarios I get catch exception Log output as `Exception: (Timeout)` text. so Exception called in both of them.

* In Laravel codes I used \Exception for test, but it has same result in TimeOutException, WebDriverException, WebDriverCurlException, OTHERS.

I use this component in Laravel, So it's my error trace for every command after main timeout exception lines.

`
Error
Facebook\WebDriver\Exception\TimeOutException: timeout
(Session info: chrome=71.0.3578.98)
(Driver info: chromedriver=2.45.615279 (12b89733300bd268cff3b78fc76cb8f3a7cc44e5),platform=Linux 4.19.8-1.el7.elrepo.x86_64 x86_64) in /PROJECT-HOME/vendor/facebook/webdriver/lib/Exception/WebDriverException.php:130
Stack trace:
#0 /PROJECT-HOME/vendor/facebook/webdriver/lib/Remote/HttpCommandExecutor.php(326): Facebook\WebDriver\Exception\WebDriverException::throwException(21, 'timeout\n (Sess...', Array)
#1 /PROJECT-HOME/vendor/facebook/webdriver/lib/Remote/RemoteWebDriver.php(547): Facebook\WebDriver\Remote\HttpCommandExecutor->execute(Object(Facebook\WebDriver\Remote\WebDriverCommand))
#2 /PROJECT-HOME/vendor/facebook/webdriver/lib/Remote/RemoteExecuteMethod.php(40): Facebook\WebDriver\Remote\RemoteWebDriver->execute('refresh', Array)
#3 /PROJECT-HOME/vendor/facebook/webdriver/lib/WebDriverNavigation.php(70): Facebook\WebDriver\Remote\RemoteExecuteMethod->execute('refresh')
#4 /PROJECT-HOME/app/Services/Supply/ProcessWays/MainProcessor.php(65): Facebook\WebDriver\WebDriverNavigation->refresh()
`


### Details

* Php-webdriver version: 1.6.0
* PHP version: 7.3.1
* Selenium server version: 3.141.59
* Operating system: Docker-Selenium [3.141.59-dubnium](https://github.com/SeleniumHQ/docker-selenium/releases/tag/3.141.59-dubnium)
Selenium: 3.141.59
Google Chrome: 71.0.3578.98
ChromeDriver: 2.45
GeckoDriver: 0.23.0
