Currently SCD30 CO2 sensors do not work "out of the box" with ESPHome.  This is because the current code sends an (invalid) start measurement command with no pressure setting.  This likely "worked" for others because they had sensors that had already been configured for continuous measurements and the sensor itself will retain that setting its on board non-volatile memory.

So this fixes the start measurement command to be valid.  Since "valid" in this case also means disabling altitude/pressure compensation (the parameter is required and overwrites any stored one), it also adds an optional setting to set the measurement altitude.

It also adds a setting to enable/disable automatic self calibration by the sensor.  This is somewhat analogous to the "baseline" measurement resistive VOC/CO2eq sensors require, though the measurement principal is very different and it is not required for normal operation.  However, mine gave somewhat odd readings until I turned it on and let it calibrate, but I can't really say for sure it was required: I was changing other things at the time.

Finally, it also sets I2C clock stretching when the sensor is used on ESP8266.  The interface specification says the sensor requires up to 150ms of stretching, but this appears to only be when it's doing a daily cycle of some sort.  Normally it only seems to require a much smaller amount, but I was still getting spurious I2C errors on ESP8266 until I increased it, so this just sets it the maximum the sensor would ever need.

## Description:


**Related issue (if applicable):** fixes esphome/issues#987

**Pull request in [esphome-docs](https://github.com/esphome/esphome-docs) with documentation (if applicable):** esphome/esphome-docs#473

## Checklist:
  - [x] The code change is tested and works locally.
  - [x] Tests have been added to verify that the new code works (under `tests/` folder).

If user exposed functionality or configuration variables are added/changed:
  - [x] Documentation added/updated in [esphome-docs](https://github.com/esphome/esphome-docs).

## Description:
Next set of test cases to cover code generation.

Also has improvements to code for Python 3
- Improved annotations
- Some improved docs and exceptions (and messages)

**Related issue (if applicable):** fixes more tests!

**Pull request in [esphome-docs](https://github.com/esphome/esphome-docs) with documentation (if applicable):** N/A

## Checklist:
  - [x] The code change is tested and works locally.
  - [ ] Tests have been added to verify that the new code works (under `tests/` folder).

If user exposed functionality or configuration variables are added/changed:
  - [ ] Documentation added/updated in [esphome-docs](https://github.com/esphome/esphome-docs).

# Description:

This effect allows user defined gradients which the effect shifts through.
The gradient is defined with the gimp gradient format and a user defined length,
which should be much larger then the number of pixels in the strip. Setting flip
to true, will cause the gradient to change direction on the end.


Example:
```
light:
  - platform: neopixelbus
    type: GRBW
    variant: SK6812
    pin: RX
    num_leds: 20
    name: "Test neopixel"
    effects:
      - addressable_gradient:
          length: 50
          name: Fuschia 6
          use_white: true
          gradient: |
            GIMP Gradient
            Name: Fuschia 6
            4
            0.000000 0.125000 0.250000 0.811765 0.192157 0.870588 1.000000 0.784314 0.388235 0.937255 1.000000 0 0
            0.250000 0.375000 0.500000 0.784314 0.388235 0.937255 1.000000 0.560784 0.207843 0.964706 1.000000 0 0
            0.500000 0.625000 0.750000 0.560784 0.207843 0.964706 1.000000 0.823678 0.190171 0.822934 1.000000 0 0
            0.750000 0.875000 1.000000 0.823678 0.190171 0.822934 1.000000 0.560784 0.207843 0.964706 1.000000 0 0
```

**Related issue (if applicable):** fixes <link to issue>

fixes https://github.com/esphome/feature-requests/issues/417

**Pull request in [esphome-docs](https://github.com/esphome/esphome-docs) with documentation (if applicable):** esphome/esphome-docs#<esphome-docs PR number goes here>

esphome/esphome-docs#471

## Checklist:
  - [x] The code change is tested and works locally.
  - [ ] Tests have been added to verify that the new code works (under `tests/` folder).

If user exposed functionality or configuration variables are added/changed:
  - [x] Documentation added/updated in [esphome-docs](https://github.com/esphome/esphome-docs).

## Description:

My ESP32 was unable to do OTA updates with ESPHome. After further investigations it turned out that the Task Watchdog kills the OTA process since it blocks all other processes for too long. The simple fix/workaround was to add a sleep of 10ms for every 1000ms (1s) so that other processes _could_ be completed within these 10ms. Therefor the watchdog doesn't kill the OTA anymore and doesn't reset the whole chip.

**Related issue (if applicable):** fixes https://github.com/esphome/issues/issues/857

**Pull request in [esphome-docs](https://github.com/esphome/esphome-docs) with documentation (if applicable):** -

## Checklist:
  - [x] The code change is tested and works locally.
  - [x] Tests have been added to verify that the new code works (under `tests/` folder).

If user exposed functionality or configuration variables are added/changed:
  - [ ] Documentation added/updated in [esphome-docs](https://github.com/esphome/esphome-docs).

@pauln could you test this fix with your ESP32s?

## Description:

Feit Wi-Fi Smart Dimmers see checksum errors in some situations where a second command is sent to the MCU before the response is received for the first.  This update imposes a 50ms delay if there is an attempt to send a second command while a response is outstanding.  In testing there is a dramatic reduction in checksum errors, but a few still slip through.  Raising the delay to 250ms didn't eliminate them, so a more complicated patch to queue commands until the response is received is probably necessary to eliminate the issue.  It isn't clear that the bug is worth that level of effort.

**Related issue (if applicable):** fixes https://github.com/esphome/issues/issues/986

**Pull request in [esphome-docs](https://github.com/esphome/esphome-docs) with documentation (if applicable):** N/A

## Checklist:
  - [x] The code change is tested and works locally.
  - [ ] Tests have been added to verify that the new code works (under `tests/` folder).

If user exposed functionality or configuration variables are added/changed:
  - [ ] Documentation added/updated in [esphome-docs](https://github.com/esphome/esphome-docs).

## Description:
This pull request implements support for multiple component libraries and loading additional packages via entry points (more details in the feature request linked below).

The existing component locations are given priority (in the existing order).

A sample component library package:
https://github.com/timsavage/esphome-poc-component-lib

**Related issue (if applicable):** implementation of https://github.com/esphome/feature-requests/issues/542

**Pull request in [esphome-docs](https://github.com/esphome/esphome-docs) with documentation (if applicable):** Docs will be written to go with this.

## Checklist:
  - [x] The code change is tested and works locally.
  - [ ] Tests have been added to verify that the new code works (under `tests/` folder).

If user exposed functionality or configuration variables are added/changed:
  - [ ] Documentation added/updated in [esphome-docs](https://github.com/esphome/esphome-docs).

## Description:

This adds a support for Adalight protocol support over UART.

It works best with https://github.com/psieg/Lightpack.

```yaml
logger:
  baud_rate: 0

uart:
  - id: adalight_uart
    tx_pin: TX
    rx_pin: RX
    baud_rate: 115200

adalight:

light:
  - id: adalight_leds
    platform: neopixelbus
    pin: GPIO23
    method: ESP32_I2S_1
    variant: SK6812
    type: GRBW
    num_leds: 40
    effects:
      - adalight:
          uart_id: adalight_uart
```

**Pull request in [esphome-docs](https://github.com/esphome/esphome-docs) with documentation (if applicable):** esphome/esphome-docs#TBD

## Checklist:
  - [ ] The code change is tested and works locally.
  - [ ] Tests have been added to verify that the new code works (under `tests/` folder).

If user exposed functionality or configuration variables are added/changed:
  - [ ] Documentation added/updated in [esphome-docs](https://github.com/esphome/esphome-docs).

Also fixes https://github.com/esphome/esphome-docs/pull/453 - Looking at the code I don't see a reason why sleep duration would be required for KEEP_AWAKE mode.
## Description: Allow custom light components to use the full addressable schema. Most importantly, addressable effects.


**Related issue (if applicable):** N/A

**Pull request in [esphome-docs](https://github.com/esphome/esphome-docs) with documentation (if applicable):** N/A

## Checklist:
  - [X] The code change is tested and works locally.


## Description: Don't try to decode output from platformio command; doing so fails on py3


**Related issue (if applicable):** N/A

**Pull request in [esphome-docs](https://github.com/esphome/esphome-docs) with documentation (if applicable):** N/A

## Checklist:
  - [x] The code change is tested and works locally.

  _- [ ] Tests have been added to verify that the new code works (under `tests/` folder)._
I don't think we can test for this since it's triggered on reading a stack trace from the logs, but it would be nice.