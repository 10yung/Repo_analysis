+ when I execute "systemctl start xxx" in terminal, nothing print, did I miss some config ?
+ something like  (in service_systemd_linux.go)
```
[Unit]
Description={{.Description}}
ConditionFileIsExecutable={{.Path|cmdEscape}}

[Service]
StartLimitInterval=5
StartLimitBurst=10
ExecStart={{.Path|cmdEscape}}{{range .Arguments}} {{.|cmd}}{{end}}
###{{if .KillMode}}KillMode={{.KillMode}}{{end}}###
{{if .ChRoot}}RootDirectory={{.ChRoot|cmd}}{{end}}
{{if .WorkingDirectory}}WorkingDirectory={{.WorkingDirectory|cmdEscape}}{{end}}
{{if .UserName}}User={{.UserName}}{{end}}
{{if .ReloadSignal}}ExecReload=/bin/kill -{{.ReloadSignal}} "$MAINPID"{{end}}
{{if .PIDFile}}PIDFile={{.PIDFile|cmd}}{{end}}
Restart=always
RestartSec=120
EnvironmentFile=-/etc/sysconfig/{{.Name}}

[Install]
WantedBy=multi-user.target
```


I noticed that in https://github.com/kardianos/service/blob/master/service_systemd_linux.go#L218 when checking for `Status()` of a service that's not installed, it returns `inactive` instead.

I'm running this on Ubuntu server and here is example output:

```
$ systemctl is-active asd
inactive
$ systemctl is-active asfdsafdsad
inactive
```

Both `asd` and `asfdsafdsad` are not valid services, so they shouldn't be returning `inactive`. Therefore it's not possible to check whether a service is installed or not -- ie. it's not possible to get `ErrNotInstalled`.

I'm not sure if there's a workaround at this time but I'll investigate. Potentially we might have to fallback to checking whether such file exists in `/etc/systemd/system` if the response from `systemd` is `inactive`?

Without Specify "/bin/bash -c"  to execute a command,in  some distros such as Fedora 31,systemd may not know how to do it,and will except error 203 and failed to start.
Most syslog systems do not log anything below notice level.

- macOS `/etc/asl.conf`: 
```
? [<= Level notice] file system.log
```
- freebsd `/etc/syslog.conf`:
```
*.err;kern.warning;auth.notice;mail.crit		/dev/console
*.notice;authpriv.none;kern.debug;lpr.info;mail.crit;news.err	/var/log/messages
```  

As a result, on those platforms, all `log.Info` are dumped unless the system configuration is changed. I'm thus proposing to set the syslog level of `log.Info` to `notice`.

Thoughts?

I have a program that uses lots of goroutines, and I suspect that a rare panic is possible. This program runs as a service on Windows, and as far as I can tell that means you cannot access stderr to view the stacktrace when this happens (I'm not a Windows expert). 

I've been investigating how to try and capture one of these crashes. Obviously the brute force approach would be to put recovers everywhere, but this program is very complex and the crash is rare. Is there a better way to track down the issue?

I've got two ideas right now, neither of which is ideal. The first is to do something equivalent to dup2 to redirect stderr to a file, and bypass the Windows service logs entirely. The second is to make the service program a dumb wrapper that spawns the real program as a child process, then reads its stderr and logs it. 
I have created service using kardianos package service name is "TestOne" this was running under the Systemd,From "TestOne" had run one child process called "ProcessOne"
Now i am trying to kill "TestOne" from "ProcessOne" . Is this possible?
If it is possible how can i do?

What is "KillMode" option to create service in Systemd.For better understanding refer the below URL

https://www.freedesktop.org/software/systemd/man/systemd.kill.html   

Expectation : Need to kill Parent process from child process. 
Can we add support for systemd user services? There is a pull request hanging which looks quite good: https://github.com/kardianos/service/pull/185.

For the root user, I would, however, put the service file in `/usr/lib/systemd/user/` (if optionUserService is set to true). This would allow all users to use the service file.