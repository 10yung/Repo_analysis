Please help me with this

here's my webpack config, I'm getting `SyntaxError: Unexpected token 'const'`

```
const path = require('path');
const webpack = require('webpack');
const HtmlWebpackPlugin = require('html-webpack-plugin');
const ExtractTextPlugin = require('extract-text-webpack-plugin');
const project = require('../project.config');

const inProject = path.resolve.bind(path, project.basePath);
const inProjectSrc = (file) => inProject(project.srcDir, file);

const __DEV__ = project.env === 'development';
const __TEST__ = project.env === 'test';
const __PROD__ = project.env === 'production';

const config = {
  entry: {
    normalize: [ inProjectSrc('normalize') ],
    main: [ inProjectSrc(project.main) ]
  },
  devtool: project.sourcemaps ? 'source-map' : false,
  output: {
    path: inProject(project.outDir),
    filename: __DEV__ ? '[name].js' : '[name].[chunkhash].js',
    publicPath: project.publicPath
  },
  resolve: {
    modules: [
      inProject(project.srcDir),
      'node_modules'
    ],
    extensions: ['*', '.js', '.jsx', '.json']
  },
  externals: project.externals,
  module: { rules: [] },
  plugins: [
    new webpack.DefinePlugin(Object.assign({
      'process.env': {
        NODE_ENV: JSON.stringify(process.env.NODE_ENV || project.env)
      },
      __DEV__,
      __TEST__,
      __PROD__
    }, project.globals))
  ]
};

// JavaScript
// ------------------------------------
config.module.rules.push({
  test: /\.(js|jsx)$/,
  exclude: /node_modules/,
  use: [{
    loader: 'babel-loader',
    query: {
      cacheDirectory: true,
      plugins: [
        'babel-plugin-transform-class-properties',
        'babel-plugin-syntax-dynamic-import',
        [
          'babel-plugin-transform-runtime',
          {
            helpers: true,
            polyfill: true, // we polyfill needed features in src/normalize.js
            regenerator: true
          }
        ],
        [
          'babel-plugin-transform-object-rest-spread',
          { useBuiltIns: true } // we polyfill Object.assign in src/normalize.js
        ]
      ],
      presets: [
        'babel-preset-react',
        ['babel-preset-env', {
          modules: false,
          targets: { ie9: true },
          uglify: true
        }]
      ]
    }
  }]
});

// Styles
// ------------------------------------
const extractStyles = new ExtractTextPlugin({
  filename: 'styles/[name].[contenthash].css',
  allChunks: true,
  disable: __DEV__
});

config.module.rules.push({
  test: /\.(sass|scss|css)$/,
  loader: extractStyles.extract({
    fallback: 'style-loader',
    use: [
      {
        loader: 'css-loader',
        options: {
          sourceMap: project.sourcemaps,
          minimize: {
            autoprefixer: {
              add: true,
              remove: true,
              browsers: ['last 2 versions']
            },
            discardComments: { removeAll: true },
            discardUnused: false,
            mergeIdents: false,
            reduceIdents: false,
            safe: true,
            sourcemap: project.sourcemaps
          }
        }
      },
      {
        loader: 'sass-loader',
        options: {
          sourceMap: project.sourcemaps,
          includePaths: [ inProjectSrc('styles') ]
        }
      }
    ]
  })
});
config.plugins.push(extractStyles);

// Images
// ------------------------------------
config.module.rules.push({
  test: /\.(png|jpg|gif)$/,
  loader: 'url-loader',
  options: { limit: 8192 }
});

// Fonts
// ------------------------------------
[
  ['woff', 'application/font-woff'],
  ['woff2', 'application/font-woff2'],
  ['otf', 'font/opentype'],
  ['ttf', 'application/octet-stream'],
  ['eot', 'application/vnd.ms-fontobject'],
  ['svg', 'image/svg+xml']
].forEach((font) => {
  const extension = font[0];
  const mimetype = font[1];

  config.module.rules.push({
    test: new RegExp(`\\.${extension}$`),
    loader: 'url-loader',
    options: {
      name: 'fonts/[name].[ext]',
      limit: 10000,
      mimetype
    }
  });
});

// HTML Template
// ------------------------------------
config.plugins.push(new HtmlWebpackPlugin({
  template: inProjectSrc('index.html'),
  inject: true,
  minify: { collapseWhitespace: true }
}));

// Development Tools
// ------------------------------------
if (__DEV__) {
  config.entry.main.push(
    `webpack-hot-middleware/client.js?path=${config.output.publicPath}__webpack_hmr`
  );
  config.plugins.push(
    new webpack.HotModuleReplacementPlugin(),
    new webpack.NamedModulesPlugin()
  );
}

// Bundle Splitting
// ------------------------------------
if (!__TEST__) {
  const bundles = ['normalize', 'manifest'];

  if (project.vendors && project.vendors.length) {
    bundles.unshift('vendor');
    config.entry.vendor = project.vendors;
  }
  config.plugins.push(new webpack.optimize.CommonsChunkPlugin({ names: bundles }));
}

// Production Optimizations
// ------------------------------------
if (__PROD__) {
  config.plugins.push(
    new webpack.LoaderOptionsPlugin({
      minimize: true,
      debug: false
    }),
    new webpack.optimize.UglifyJsPlugin({
      sourceMap: !!config.devtool,
      comments: false,
      compress: {
        warnings: false,
        screw_ie8: true,
        conditionals: true,
        unused: true,
        comparisons: true,
        sequences: true,
        dead_code: true,
        evaluate: true,
        if_return: true,
        join_vars: true
      }
    })
  );
}

module.exports = config;
```
Can someone please enlighten me, I'm currently adding routes in my app, and I want to get the req.session to work also in production build but it returns null

Production using script "cross-env NODE_ENV=production pm2 start server/main.js --name ucf-www"
```
app.post('/api', bodyParser.json(), (req, res) => {
  const nodeSession = req.session;
  console.log(nodeSession)

  // undefined
})
```
Development using script "cross-env NODE_ENV=development babel-node build/scripts/start"
```
app.post('/api', bodyParser.json(), (req, res) => {
  const nodeSession = req.session;
  console.log(nodeSession)

  /*
    Session {
      cookie: {
        path: '/',
        _expires: null,
        originalMaxAge: null,
        httpOnly: true
      }
    }
   */
})
```

please delete, just forgot to use express-session in my production config
How to save the parameters passed during the routing jump and to apply this parameter when refreshing the page.
My scripts contains following lines and I'm not able to create the build.zip.
After a lot of changes on below script, only empty bundle.zip get created.

"scripts": {
    **"dev":** "babel-node ./webpack.dev.server.js",
    **"dev:proxy":** "babel-node ./webpack.dev.server.proxy.js",
    **"build:zip":** "cd build/target && bestzip ../bundle.zip /*",
    **"build":** "rimraf build && cross-env NODE_ENV=development webpack --config webpack.config.babel.js && npm run build:zip",
    **"build:dev":** "rimraf build && webpack --config webpack.config.babel.js && npm run build:zip",
    **"precommit":** "babel-node resources/git/precommit.js && mocha --compilers js:babel-register -r test/index.js -R min \"./test/**/*.test.js\"",
    **"test":** "rimraf mocha.json && istanbul cover node_modules/mocha/bin/_mocha --  --compilers js:babel-register --require test/index.js --recursive -u exports -R mocha-bamboo-reporter \"./test/**/*.test.js\" || cat mocha.json",
    **"tdd"**: "mocha --compilers js:babel-register -r test/index.js -R min -w \"./test/**/*.test.js\""
  }
Hi I am trying to implement server side rendering in the current codebase.

I tried taking https://github.com/Anomen/universal-react-redux-starter-kit as reference.
I am having issue implementing **webpack isomorphic tools** in this repo as the image imports are not working.

webpack.config.js
```
const path = require('path')
const webpack = require('webpack')
const HtmlWebpackPlugin = require('html-webpack-plugin')
const ExtractTextPlugin = require('extract-text-webpack-plugin')
const OfflinePlugin = require('offline-plugin')
const project = require('../project.config')
const BrowserSyncPlugin = require('browser-sync-webpack-plugin')
const server = require('./server/webpack-isomorphic-tools-configuration')

const inProject = path.resolve.bind(path, project.basePath)
const inProjectSrc = (file) => inProject(project.srcDir, file)

var WebpackIsomorphicToolsPlugin = require('webpack-isomorphic-tools/plugin')
var webpackIsomorphicToolsPlugin = new WebpackIsomorphicToolsPlugin(server)

const __DEV__ = project.env === 'development'
const __TEST__ = project.env === 'test'
const __PROD__ = project.env === 'production'

const config = {
  entry: {
    normalize: [
      inProjectSrc('normalize'),
    ],
    main: [
      inProjectSrc(project.main),
    ],
  },
  devtool: project.sourcemaps ? 'source-map' : false,
  output: {
    path: inProject(project.outDir),
    filename: __DEV__ ? '[name].js' : '[name].[chunkhash].js',
    publicPath: project.publicPath,
  },
  resolve: {
    modules: [
      inProject(project.srcDir),
      'node_modules',
    ],
    extensions: ['*', '.js', '.jsx', '.json'],
  },
  externals: project.externals,
  module: {
    rules: [],
  },
  plugins: [
    new webpack.DefinePlugin(Object.assign({
      'process.env': { NODE_ENV: JSON.stringify(project.env) },
      __DEV__,
      __TEST__,
      __PROD__,
    }, project.globals))
  ],
}

// JavaScript
// ------------------------------------
config.module.rules.push({
  test: /\.(js|jsx)$/,
  exclude: /node_modules/,
  use: [{
    loader: 'babel-loader',
    query: {
      cacheDirectory: true,
      plugins: [
        'babel-plugin-transform-class-properties',
        'babel-plugin-syntax-dynamic-import',
        [
          'babel-plugin-transform-runtime',
          {
            helpers: true,
            polyfill: false, // we polyfill needed features in src/normalize.js
            regenerator: true,
          },
        ],
        [
          'babel-plugin-transform-object-rest-spread',
          {
            useBuiltIns: true // we polyfill Object.assign in src/normalize.js
          },
        ],
      ],
      presets: [
        'babel-preset-react',
        ['babel-preset-env', {
          modules: false,
          targets: {
            ie9: true,
          },
          uglify: true,
        }],
      ]
    },
  }],
})


// Server
config.module.rules.push({
  test: /\.(ttf|eot|svg|woff(2)?)(\S+)?$/,
  // test: webpackIsomorphicToolsPlugin.regular_expression('images'),
  loader: 'file?limit=8192'
})

// Styles
// ------------------------------------
const extractStyles = new ExtractTextPlugin({
  filename: 'styles/[name].[contenthash].css',
  allChunks: true,
  disable: __DEV__,
})

config.module.rules.push({
  test: /\.(ttf|eot|svg|woff(2)?)(\S+)?$/,
  loader: 'file-loader?name=[name].[ext]'
})

config.module.rules.push({
  test: /\.(sass|scss|css)$/,
  loader: extractStyles.extract({
    fallback: 'style-loader',
    use: [
      {
        loader: 'css-loader',
        options: {
          sourceMap: project.sourcemaps,
          minimize: {
            autoprefixer: {
              add: true,
              remove: true,
              browsers: ['last 2 versions'],
            },
            discardComments: {
              removeAll : true,
            },
            discardUnused: false,
            mergeIdents: false,
            reduceIdents: false,
            safe: true,
            sourcemap: project.sourcemaps,
          },
        },
      },
      {
        loader: 'sass-loader',
        options: {
          sourceMap: project.sourcemaps,
          includePaths: [
            inProjectSrc('styles'),
          ],
        },
      }
    ],
  })
})
config.plugins.push(extractStyles)

// Images
// ------------------------------------
config.module.rules.push({
  test    : /\.(png|jpg|gif)$/,
  loader  : 'url-loader',
  options : {
    limit : 8192,
  },
})

// Fonts
// ------------------------------------
;[
  ['woff', 'application/font-woff'],
  ['woff2', 'application/font-woff2'],
  ['otf', 'font/opentype'],
  ['ttf', 'application/octet-stream'],
  ['eot', 'application/vnd.ms-fontobject'],
  ['svg', 'image/svg+xml'],
].forEach((font) => {
  const extension = font[0]
  const mimetype = font[1]

  config.module.rules.push({
    test    : new RegExp(`\\.${extension}$`),
    loader  : 'url-loader',
    options : {
      name  : 'fonts/[name].[ext]',
      limit : 10000,
      mimetype,
    },
  })
})

// HTML Template
// ------------------------------------
config.plugins.push(new HtmlWebpackPlugin({
  template: inProjectSrc('index.html'),
  inject: true,
  minify: {
    collapseWhitespace: true,
  },
}))

// Development Tools
// ------------------------------------
if (__DEV__) {
  config.entry.main.push(
    `webpack-hot-middleware/client.js?path=${config.output.publicPath}__webpack_hmr`
  )
  config.plugins.push(
    new webpack.HotModuleReplacementPlugin(),
    new webpack.NamedModulesPlugin(),
    new BrowserSyncPlugin({
      host: 'localhost',
      port: 3000,
      proxy: 'http://localhost:3000/'
    }, {
      reload: false
    }),
    webpackIsomorphicToolsPlugin.development()
  )
}

// Bundle Splitting
// ------------------------------------
if (!__TEST__) {
  const bundles = ['normalize', 'manifest']

  if (project.vendors && project.vendors.length) {
    bundles.unshift('vendor')
    config.entry.vendor = project.vendors
  }
  config.plugins.push(new webpack.optimize.CommonsChunkPlugin({ names: bundles }))
}

// Production Optimizations
// ------------------------------------
if (__PROD__) {

  config.plugins.push(
    new OfflinePlugin(),
    new webpack.LoaderOptionsPlugin({
      minimize: true,
      debug: false,
    }),
    new webpack.optimize.UglifyJsPlugin({
      sourceMap: !!config.devtool,
      comments: false,
      compress: {
        warnings: false,
        screw_ie8: true,
        conditionals: true,
        unused: true,
        comparisons: true,
        sequences: true,
        dead_code: true,
        evaluate: true,
        if_return: true,
        join_vars: true,
      },
    })
  )
}

module.exports = config

```

and 

**webpack-isomorphic-tools-configuration.js**

```
import WebpackIsomorphicToolsPlugin from 'webpack-isomorphic-tools/plugin'
// import path from 'path'



module.exports = {
  assets: {
    images: {
      extensions: [
        'jpeg',
        'jpg',
        'png',
        'gif',
        'svg'
      ],
      parser: WebpackIsomorphicToolsPlugin.url_loader_parser
    },
    fonts: {
      extensions: [
        'woff',
        'woff2',
        'ttf',
        'eot'
      ],
      parser: WebpackIsomorphicToolsPlugin.url_loader_parser
    },
    svg: {
      extension: 'svg',
      parser: WebpackIsomorphicToolsPlugin.url_loader_parser
    }
  }
}


```

My error for  **webpack isomorphic tools**

```
SyntaxError: /<PROJECT>/src/routes/AboutUs/assets/banner_v4.jpg: Unexpected character '�' (1:0)
> 1 | ����9Exif
error Command failed with exit code 1.
info Visit https://yarnpkg.com/en/docs/cli/run for documentation about this command.
```
.
Please help me with isomorphic rendering.

Hi recently I update my webpack and add loader for my app
my problem occurs when trying to import CSS in component js files
like this component or any other component from semantic-ui-css
```
semantic-ui-css/components/button.css
```
add this CSS loader but it's not working and I don't have any error 
is my webpack config 
please help 
```
{
    test: /\.(css)$/,
    loader: extractStyles.extract({
        fallback: 'style-loader',
        use: [
          {
            loader: 'css-loader',
            options: {
              sourceMap: project.sourcemaps,
              minimize: {
                autoprefixer: {
                  add: true,
                  remove: true,
                  browsers: ['last 2 versions'],
                },
                discardComments: {
                  removeAll : true,
                },
                discardUnused: false,
                mergeIdents: false,
                reduceIdents: false,
                safe: true,
                sourcemap: project.sourcemaps,
              },
            },
          }
          ]
      }
    )
  }
```
I deployed the app to heroku saving dist folder but am just getting a blank screen with this error in the console 

**Profile** 
`web: node bin/server`

**bin/server**
const express = require('express')
const path = require('path')
const PORT = process.env.PORT || 5000

```
express()
  .get('*', function(req, res) {  
    res.sendFile(path.join(__dirname, '../dist/index.html'));
  })
  .listen(PORT, () => console.log(`Listening on ${ PORT }`))
```

when executing npm run deploy:prod my server get 98-10% CPU usage 
and then build dist failed

https://supload.com/SJaqVNRZf

![screen shot 2017-12-13 at 11 29 29](https://user-images.githubusercontent.com/8231792/33922544-0f900b10-dffe-11e7-957e-3ce3bbff3402.png)


How to solve this ?

here my npm-debug.log

```
0 info it worked if it ends with ok
1 verbose cli [ '/usr/bin/nodejs', '/usr/bin/npm', 'run', 'deploy:prod' ]
2 info using npm@3.10.10
3 info using node@v6.11.2
4 verbose run-script [ 'predeploy:prod', 'deploy:prod', 'postdeploy:prod' ]
5 info lifecycle react-redux-starter-kit@3.0.0-alpha.2~predeploy:prod: react-redux-starter-kit@3.0.0-alpha.2
6 silly lifecycle react-redux-starter-kit@3.0.0-alpha.2~predeploy:prod: no script for predeploy:prod, continuing
7 info lifecycle react-redux-starter-kit@3.0.0-alpha.2~deploy:prod: react-redux-starter-kit@3.0.0-alpha.2
8 verbose lifecycle react-redux-starter-kit@3.0.0-alpha.2~deploy:prod: unsafe-perm in lifecycle true
9 verbose lifecycle react-redux-starter-kit@3.0.0-alpha.2~deploy:prod: PATH: /usr/lib/node_modules/npm/bin/node-gyp-bin:/home/admin/sepulsa/test-yapulsav2-admin/node_modules/.bin:/usr/local/bin:/usr$
10 verbose lifecycle react-redux-starter-kit@3.0.0-alpha.2~deploy:prod: CWD: /home/admin/sepulsa/test-yapulsav2-admin
11 silly lifecycle react-redux-starter-kit@3.0.0-alpha.2~deploy:prod: Args: [ '-c', 'better-npm-run deploy:prod' ]
12 silly lifecycle react-redux-starter-kit@3.0.0-alpha.2~deploy:prod: Returned: code: 1  signal: null
13 info lifecycle react-redux-starter-kit@3.0.0-alpha.2~deploy:prod: Failed to exec deploy:prod script
14 verbose stack Error: react-redux-starter-kit@3.0.0-alpha.2 deploy:prod: `better-npm-run deploy:prod`
14 verbose stack Exit status 1
14 verbose stack     at EventEmitter.<anonymous> (/usr/lib/node_modules/npm/lib/utils/lifecycle.js:255:16)
14 verbose stack     at emitTwo (events.js:106:13)
14 verbose stack     at EventEmitter.emit (events.js:191:7)
14 verbose stack     at ChildProcess.<anonymous> (/usr/lib/node_modules/npm/lib/utils/spawn.js:40:14)
14 verbose stack     at emitTwo (events.js:106:13)
14 verbose stack     at ChildProcess.emit (events.js:191:7)
14 verbose stack     at maybeClose (internal/child_process.js:891:16)
14 verbose stack     at Process.ChildProcess._handle.onexit (internal/child_process.js:226:5)
15 verbose pkgid react-redux-starter-kit@3.0.0-alpha.2
16 verbose cwd /home/admin/sepulsa/test-yapulsav2-admin
17 error Linux 3.16.0-4-amd64
18 error argv "/usr/bin/nodejs" "/usr/bin/npm" "run" "deploy:prod"
19 error node v6.11.2
20 error npm  v3.10.10
21 error code ELIFECYCLE
22 error react-redux-starter-kit@3.0.0-alpha.2 deploy:prod: `better-npm-run deploy:prod`
22 error Exit status 1
23 error Failed at the react-redux-starter-kit@3.0.0-alpha.2 deploy:prod script 'better-npm-run deploy:prod'.
23 error Make sure you have the latest version of node.js and npm installed.
23 error If you do, this is most likely a problem with the react-redux-starter-kit package,
23 error not with npm itself.
23 error Tell the author that this fails on your system:
23 error     better-npm-run deploy:prod
23 error You can get information on how to open an issue for this project with:
23 error     npm bugs react-redux-starter-kit
23 error Or if that isn't available, you can get their info via:
23 error     npm owner ls react-redux-starter-kit
23 error There is likely additional logging output above.
24 verbose exit [ 1, true ]
```
There is a problem with sourcemaps generation on a production build (`yarn build`). The problem is described at the below link, as the current fix is to, change the default output style to `compact`:
https://github.com/webpack-contrib/sass-loader/issues/351#issuecomment-279925341
Why does the data-target and  data-toggle wont work when i use it with react.

Heres a sample code which am facing issue with 

```
<div c;lassName="dropdown"> 
    <span className="dropdown-toggle" data-toggle="collapse" data-target="#target">Toggle Dropdown</span>
    <ul id="target" className="collapse">
        <li><a href="#"><i className="fa fa-bar-chart"></i><span className="menuName">Options</span></a></li>
    </ul>
</div>
```


