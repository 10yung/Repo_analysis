#267 shows that the current in-tree fuzzing based on `cargo-fuzz` has some blindspots.  Investigate adding afl-based fuzzing to the in-tree test suite.
Are the custom options supported?
I tried options and uninterpreted_option without success.
Thanks 
Laurent
I have a project where we have receive following proto message:

```proto
message Request {
    string requestId = 1;
    google.protobuf.Any payload = 2
}
```

The `payload` field can contain any proto message, for example:

```proto
package test;

message Foo {
    string data = 1;
    google.protobuf.Timestamp timestamp = 2;
}
```

The request message, with something like Foo packed in it as payload, can be received as binary, or as JSON. The JSON format would look as follows:

```
{
  "requestId": "message1",
  "payload": {
    "@type": "type.googleapis.com/test.Foo",
    "data": "Hello World!",
    "timestamp": "2019-11-29T02:11:40.066Z"
  }
}
```

To support this, the following needed to be added:
* Support packing and unpacking of messages into an Any
* Support binary serializing and deserializing of an Any
* Support JSON serialization and deserialization of an Any

The changes in this commit add support for the above by using the `typetag` 
and `mopa` crates.

To support JSON serialization and deserialization, a new `include_serde`
property needs to be set in the prost_build `build.rs` configuration:

```rust
fn main() {
    let mut prost_build = prost_build::Config::new();
    prost_build.include_serde();
    prost_build.compile_protos(&["src/frontend.proto", "src/backend.proto"],
                               &["src"]).unwrap();
}
```

This will then add the necessary macro properties for `prost-derive` to use
to enable `Message` serialization and deserialization with the `serde`
framework.

All `Message` structs can then be packed into an Any type, and correctly
serialized to JSON. Likewise they can also be deserialized again to an
Any struct, and the original message can be `unpacked` to either a
generic trait object, or the concrete struct.

This pull request does involve a lot of changes and requires two extra crates as
a dependency, but so far it works well in our project. Perhaps it can be useful
for others as well.
As far as I understand Prost does not store any details about the message itself, such as the message name that was used to generate it, and the package name that was defined in the proto file. This information can be useful though. For example, when "packing" a message into an Any type, the `type_url` usually takes the form of `type.googleapis.com/package_name.message_name`. 

For example, in one of our java projects, we have a proto file as follows:
```protobuf
syntax = "proto3";

import "google/protobuf/any.proto";

package my.project;

message ServerRequest {
    string requestId = 1;
    google.protobuf.Any payload = 2;
}

message Query {
    string key = 1;
}
```

When using the [Java Any API](https://developers.google.com/protocol-buffers/docs/reference/java), when you "pack" the Query message into an Any, it will generate a type_url as `type.googleapis.com/my.project.Query`.

To support a similar "pack" API as the Java, C++ and Python implementations have, perhaps each Message struct can implement a MessageMeta trait with the following:
```rust
pub trait MessageMeta {
    fn name(&self) -> &'static str;
    fn package_name(&self) -> &'static str;
}
```

The "pack" and "unpack" API could then look something as follows:
```rust
#[test]
fn test_well_known_types_any() {
    let msg = Foo {
        null: ::prost_types::NullValue::NullValue.into(),
        timestamp: Some(::prost_types::Timestamp {
            seconds: 99,
            nanos: 42,
        }),
    };
    let any = Any::pack(msg);
    println!("{:?}", any);
    let unpacked = any.unpack(Foo::default()).unwrap();
    println!("{:?}", unpacked);
}
```

I got this working in my cloned repo (see branch [pb-any](https://github.com/fdeantoni/prost/tree/pb-any)) and so far it seems to work ok. Downside of course is that each message now implements a trait called MessageMeta, but I suppose this can be turned on/off by defining it as a feature.
I have a message as follows:
```
syntax = "proto3";
import "google/protobuf/struct.proto";

message SomeMessage {
    google.protobuf.Value arbitrary_json = 1;
}
```

In Go you can then stuff arbitrary json data in the `arbitrary_json` field as follows:
```
import "github.com/golang/protobuf/ptypes/struct"
import "github.com/golang/protobuf/jsonpb"

func example(json string) (*SomeMessage, error) {
    msg := &SomeMessage{ArbitraryJson: &structpb.Value{}}
    jsm := jsonpb.Marshaler{}
    if err := jsm.Unmarshal(json, msg.ArbitraryJson); err != nil {
        return nil, err
    }
    return msg, nil
}
```
(copied from [here](https://groups.google.com/forum/#!topic/protobuf/ZWp_REiHlF4))

I understand serializing from JSON is not available for Prost, but is something similar like stuffing a `HashMap<String, Value>` into a `StructValue` possible? I took a look at [tests/src/well_known_types.rs](https://github.com/danburkert/prost/blob/master/tests/src/well_known_types.rs) but got no closer to a possible solution.
I saw the related item https://github.com/danburkert/prost/issues/42 -- I agree changing the representation or having two is unneeded.

However, I think ergonomics could be dramatically improved by generating implementations like the one in the title.

Does that make sense to you? If I can find the time, it'd be something I'd be happy to contribute if so.

For now, I've just been writing these by hand.

For more clarity on what I mean:

```proto
message ContainerMsg {
    oneof container_field {
        A a = 10;
        B b = 11;
    }
}

message A { ... }
message B { ... }
```

Would include these generated impls:

```rust
impl From<A> for container_msg::ContainerField {
    fn from(x: A) -> Self {
        container_msg::ContainerField::A(x)
    }
}

impl From<B> for transaction_update::Status {
    fn from(x: B) -> Self {
        container_msg::ContainerField::B(x)
    }
}
```
Thanks for prost. I use it for a lot of projects and it has served us well.

Recently, my company started using `#![deny(missing_docs)]`, and I am getting the following error:
```
warning: missing documentation for a method
   |
10 |     #[derive(Clone, PartialEq, ::prost::Oneof)]
   |                                ^^^^^^^^^^^^^^

```

How can I add a docstring for `::prost::Oneof`? It is not a matter of it being documented in the prost crate itself, as denying missing docs ignores docs outside of my project, so there must be a way for me to document it within my project, right? Or if not, perhaps there should be?

Thanks.

Is it possible to define a `fn descriptor(&self) -> MessageDescriptor` function in trait `Message` in order to get Message name?
Reference: https://developers.google.com/protocol-buffers/docs/reference/cpp/google.protobuf.descriptor#Descriptor
This (hopefully) resolves #233 

This is my first time looking through the prost source, so it's entirely possible I didn't understand something, review with the assumption that I'm missing the obvious.
Trying the example from https://docs.rs/prost-build/0.5.0/prost_build/ with #![deny(missing_docs)] on has some issues:

1)  The comment for the `Shirt` message doesn't get applied to the generated `shirt` module.

2) The `::prost::Message` proc macro seems to generate at least one method, and that method doesn't have a doc string.

Ideally I'd rather not make an `allow(missing_docs)` exception because I like the idea of forcing my users to document their messages.  Would you be open to a PR that fixes these things?