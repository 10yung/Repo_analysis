For unix and windows we have defined the jpegtran.executable and advpng.executable locations, so to find out if we have them we have to check that variable, not the ENV.PATH variable.

Is it intentional that the _validate_ routine is hard coded to a single file specified in #file.root.page# ?
`<!-- Validate target, run separately -->
    <target name="validate">
     <apply dir="${dir.source}/" executable="java" parallel="false">
      <fileset dir="./${dir.source}/">
        <include name="${file.root.page}"/>
      </fileset>
`
Should it instead loop over all the files specified in _file.pages_?  Or is the intent to simply call it multiple times as a separate ant-call, e.g.
`ant validate -Dfile.root.page=index2.html`

I am using a single css file in my index.html file:
`
        <link rel="stylesheet" href="css/style.css">
`
This links out to a file that consists only of imports:
`
@import url(normalize.css);
@import url(main.css);
@import url(site.css);
`

The _main.css_ is the default css that is packaged w/Boilerplate.  However, all the parens on one of the media queries seems to be breaking the minification routine.  It looks like the _5/4_ expression is causing issues; maybe the slash is escaping something?

 The problematic section is bolded below, with its result (unminified for readability):
## Before

.clearfix {
    *zoom: 1;
}

/\* ==========================================================================
   EXAMPLE Media Queries for Responsive Design.
   These examples override the primary ('mobile first') styles.
   Modify as content requires.
   ========================================================================== */

@media only screen and (min-width: 35em) {
    /\* Style adjustments for viewports that meet the condition */
}

**@media print,
       (-o-min-device-pixel-ratio: 5/4),
       (-webkit-min-device-pixel-ratio: 1.25),
       (min-resolution: 120dpi) {
    /\* Style adjustments for high resolution devices */
}**

/\* ==========================================================================
   Print styles.
   Inlined to avoid required HTTP connection: h5bp.com/r
   ========================================================================== _/
@media print {
    \* {
        background: transparent !important;
        color: #000 !important; /_ Black prints faster: h5bp.com/s */
        box-shadow: none !important;
        text-shadow: none !important;
    }
    a,
    a:visited {
        text-decoration: underline;
    } <snip ...>
## After

` 
.clearfix {
    *zoom: 1
}

@media print,(-o-min-device-pixel-ratio: 5 / @media print { *{background:transparent
!important;color:#000
!important;box-shadow:none
!important;text-shadow:none
!important
}

a, a:visited {
    text-decoration: underline
}
`

I just cloned bp5 and the buildscript in a clean directory and everything works fine for the first building-process.
After that, the html file won't get updated with the new hashname for the css-file on `ant build`. - Though changes in the original html-file get respected and the css-file gets copied to the publish-folder with a new hashname.
Removing the intermediate-dir makes it work again.
Is there a way to just 'update' (change) the existing files in the publish-folder after another build-execution? (Like I understand it's supposed to be.)
_I'm trying to get this to work for a couple of hours now, but I couldn't find any really helpfull infos. - In the end I wanna set this up together with sass, but that's not the problem._

Did I miss something? Any advice on this?

This is a placeholder for any work I'll do on the image optimization tasks. There's a new branch for that work. I'll pull in the bugs and any other changes here in order to have one place to track the problems. 

I get this on "Minifying any unconcatenated css files..."

```
java.io.FileNotFoundException: /site/publish/html/css/outside/outside.css
```

It looks like `css`-directory is not yet created on publish at this point. I'm still trying to figure out how to overcome this.

If I understand correctly, this ANT Build task does js-minification in this order:
1. minifies every js file
2. concatenates minified js files

This is really problematic if you want to use Closure Compiler's ADVANCED_OPTIMIZATIONS. The order should be reversed:
1. concatenates js files
2. minifies the concatenated file

Or have I understood something wrong?

I may have a unique case or maybe not. I've included a screen shot of my text editor with the directory tree on the left. Only trouble I'm running into is that my `minified` directory for JS won't copy over to the publish directory created by ant. I use Codekit for minifying my JS so I don't need ant to do that for me. Hopefully this is a setting I'm missing or something.

**ant `project.properties` file**

``` bash
# V1.0
# project.properties file defines overrides for default.properties
# Explanation: This file should be created by each user as and when he or she needs to override particular values.
# Consequently, it should not be placed under version control.
#---------------------------------------#
# HTML                                  #  
#---------------------------------------#
# These are the pages (files) that will be served to users (.html, .php, .asp, etc). Files in this property will
# be minified / optimised and have any stylesheet or javascript references updated to the minified examples
#
# The paths need to be relative
#
# Files can be added in a comma separated form
file.pages        = index.php, missing.html
##
# Root page file
# The <script> tags between the magic comments in this page
#     <!-- //-beg- concat_js -->
#    <script src="js/plugins.js"></script>
#    <script src="js/main.js"></script>
#    <!-- //-end- concat_js -->
# determine the ordered list of scripts to be concatenated, minified,
# and swapped with file.root.script in all the pages.
# file.root.page      = index.html
# htmlcompressor Options
# Override default htmlcompressor options
# HTML Compressor documentation http://code.google.com/p/htmlcompressor/
# tool.htmlcompressor.opts    = --remove-quotes --preserve-multi-spaces --compress-css --preserve-php --preserve-ssi
# Add optional htmlcompressor options
#
tool.htmlcompressor.opts.extra = --preserve-php
#---------------------------------------#
# Stylesheets                           #  
#---------------------------------------#
# Note: Stylesheets will be concatenated in the order they are listed in the file.stylesheets property (i.e. the last
# file listed will be at the end of the concatenated file), so it probably makes sense to have the main style.css file
# as the first entry
#
# NOTE: avoid adding spaces after the comma unless your file name has spaces (which you should probably consider not using anyway)
#
# Example:
# file.stylesheets  = style.css,lightbox.css,plugin.css
#
file.stylesheets  =
##
# LESS CSS Processing (http://lesscss.org)
#
# You must tell the script if you want to process your CSS as LESS
# build.css.less            = true
#
# You must also set your LESS css file as the root CSS file
#
# Example:
# file.root.stylesheet    = style.less
##
# SASS (SCSS) CSS Processing (http://sass-lang.com)
#
# You must tell the script if you want to process your CSS as SCSS
# build.css.scss            = true
#
# You must also set your SCSS css file as the root CSS file
#
# Example:
# file.root.stylesheet    = style.scss
##
# Override default CSSLint Options (see http://csslint.net/about.html#settings for description of options)
# tool.csslint.opts =
#---------------------------------------#
# Directories                           #  
#---------------------------------------#
# Excluded files and dirs
#
# Add any files or directories you add to the project and do not want to be copied to the publish directory as a
# comma separated list
# These files are ignored in addition to the default ones specified in default.properties.
# Example: file.exclude = badfolder/**
file.exclude      = new0513/scss/**.scss, new0513/scss/partials/**.scss, .sass-cache/**, new0513/js/libs/**, dandelion.yml, new0513/.bowerrc, new0513/.editorconfig, new0513/component.json, config.rb, codekit-config.json
##
# Directory Structure
#
# Override any directory paths specific to this project
#
# dir.source          = .
dir.intermediate    = intermediate
dir.publish         = publish
dir.build           = build
# dir.build.tools     = ${dir.build}/tools
# dir.jsdoc           = ${dir.build.tools}/jsdoc3
# dir.test            = test
# dir.demo            = demo
dir.js              = new0513/js/minified/
dir.js.main         = ${dir.js}/js/minified/
# scripts in the lib directory will only be minified, not concatenated together
# dir.js.libs         = ${dir.js}/vendor
# this is identical to the 'libs' in dir.js.libs but just an easier reference when you dont need the full path
# slug.libs           = vendor
# scripts in the modules directory will be minified, not concatenated, but will be cachebusted
dir.js.modules    = ${dir.js}/minified
# this is identical to the 'modules' in dir.js.modules but just an easier reference when you dont need the full path
# slug.modules    = modules
dir.css             = new0513/css0513
# dir.docs            = docs
#---------------------------------------#
# Javascript                            #  
#---------------------------------------#
# Bypassed JavaScript files and dirs
#
# Add any files or folders within the js directory that you want to be copied to the publish directory as a
# comma separated list
# These files will not be concatenated or minimized and will simply be copied over as is.
# Note: you cannot declare an empty file.bypass property
# Example:
file.js.bypass = new0513/js/minified/main-min.js
# file.js.bypass =
# 
## 
# Closure Compiler Options
# options are WHITESPACE_ONLY, SIMPLE_OPTIMIZATIONS, ADVANCED_OPTIMIZATIONS
# scripts.compilation.level =  SIMPLE_OPTIMIZATIONS
# options are QUIET DEFAULT AND VERBOSE
# scripts.compilation.warninglevel = QUIET
##
# Override default JSHint Options (see http://jshint.com/ for description of options)
# tool.jshint.opts =
##
# Override default JSLint Options (see http://www.jslint.com/lint.html for description of options)
# tool.jslint.opts =
##
# uncomment to enable inline JavaScript compression. For now we've disabled it to protect against errors generated with template script tags.
# tool.htmlcompressor.javascript = --compress-js
##
# Optional property used to determine whether to include requirejs' implementation of <script> in the build process
# Uncomment and include the path
# Example: script.require.path = js/libs/require-jquery.js
# script.require.path =# You can set multiple directories here, e.g: img, css/img# dir.images          = img, css/img
##
# uncomment to set async and/or defer attributes on your scripts
# scripts.async = async
# scripts.defer = defer
#
#---------------------------------------#
# Build                                 #  
#---------------------------------------#
#
# Specify an environment to build
#
# By Default, it builds a production environment
# Set to dev if building a development environment
# Set to test if building a test environment
env               =
##
# set the hash length used for versioning css and js files.
# valid values are between 1 and 40.
# shorter values use less bytes at the expense of increasing the probability of a hash collision.
# hash.length = 7
##
# concat tokens 
# build.jstoken = concat_js
#---------------------------------------#
# Images                                #  
#---------------------------------------#
#
# Bypass Optimization for these image files or folders
#
# images.bypass
# If set, these images will not be optimized
# Note: you cannot declare an empty images.bypass property, it would exclude the entire img folder from being optimized
##
# Rev Image Filenames within the main stylesheet
# defaults to true
css.rev.images = false
## 
# Rev Image Filenames within the HTML files.
# defaults to false
html.rev.images = true
##
# You can set multiple directories here, e.g: img, css/img
dir.images          = new0513/img
##
# Image Optimisation
#
# images.strip.metadata       = true
# Seting this to true will strip the metadata from all jpeg and png files.
# YOU SHOULD ONLY DO THIS IF YOU OWN THE COPYRIGHT TO ALL THE IMAGES IN THE BUILD
##
# uncomment this to enable progressive jpg conversion using jpegtran
# images.opts.progressive = -progressive
#---------------------------------------#
# Misc                                  #  
#---------------------------------------#
# Compatibility with older versions of html5boilerplate
# recently js/libs was changed to js/vendor and the main JS file was changed to main.js
# uncomment these lines to support the old file structure
# dir.js.libs = ${dir.js}/libs
# file.root.script = script.js
# slug.libs = libs
##
# Override default jsdoc3 options
#tool.jsdoc3.opts                       = --template templates/default
##
# https://github.com/h5bp/ant-build-script/wiki/Setting-up-the-Qunit-task-for-use-with-Jenkins
# the path to your phantomjs binary. It should live in ${dir.build.tools}
# tool.phantomJS = phantomjs-1.8.1-windows/phantomjs.exe
# the location of qunit.js for PhantomJS
# tool.qunit.js = qunit-1.11.0.js
# the name of your qunit-runner.js file for PhantomJS
# tool.qunitrunner.js = qunit-runner.js
# the location of your tests
# dir.tests           = tests
##
# JSDOC3 Documentation (https://github.com/jsdoc3/jsdoc)
# You must tell the script if you want to build documentation
# build.jsdoc3      = true
#
```

![screen shot 2013-05-19 at 7 23 07 pm](https://f.cloud.github.com/assets/934322/523754/fc408878-c0db-11e2-84d1-cf34bef835e4.png) 

1)in my project more tha n 10 html file...whin i ant build.it only compress index.html file ..not my other file wahy...i want to minify all html file....
2)i dont want to cancatiniate css file ..how can i do that
3)is override existing .js.css .html posssible...then how

please help me

I renamed `index.html` to `index.php`, and in `project.properties` I added :

```
file.root.page = index.php
```

The build finishes succefully, but the `index.php` in the publish folder contains :  

```
<!-- //-beg- concat_js -->
<script src="js/plugins.js"></script>
<script src="js/main.js"></script>
<script src="js/login.js"></script>
<!-- //-end- concat_js -->
```

Instead of :  

```
<script src="js/5ebd021.js"></script>
```

I don't have this issue if I delete `file.root.page` and rename the file back to `index.html`
