Hello,

Regarding [this](https://developers.google.com/maps/documentation/urls/ios-urlscheme)

Should we add `comgooglemaps-x-callback`?
I know this is really stupid, but some apps, do not support QueryParameters like they should, and only support QueryItems in custom order. (like Maps.Me)

Any suggestions on how to fix this problem?
I was trying to add:
```swift
enum Query {
    case parameters([String:String])
    case items([URLQueryItem])

    var queryItems: [URLQueryItem] {
        switch self {
            case .parameters(let params): return params.map { URLQueryItem(name: $0, value: $1) }
            case .items(let queryItems): return queryItems
        }
    }
}
```
And use Query as an input, But since `Path`'s `queryParameters` is variable and public, it'll definitely break backward compatibility.
Any suggestions? 


Instead of manually writing new Swift classes, tests, pod specs, and modifying the readme, we can have a configuration file with all the apps specs we have, and then a script that generates all the files needed. This will help us move much faster and adapt to future changes more quickly.
### Tasks
- [x] Design the configuration files
- [x] Script the Swift source files generator
- [ ] Script the Pod Subspecs generator
- [ ] Script the readme table generator

iOS 10 adds a way to asynchronously try opening an applications, and registering a callback once that's over:

``` swift
open func open(_ url: URL, options: [String : Any] = [:], completionHandler completion: (@escaping (Bool) -> Swift.Void)? = nil)
```

We can probably provide a new method that conditionally compiles if the minimum SDK requirement is iOS 10.

Should we create an example project for the library?

Having added applications inherit `ExternalApplication` gives us a lot of flexibility, but I am starting to question the need for such a flexible design. Perhaps making it a simple struct instance would reduce all the boilerplate code written for the added apps... Need to investigate.
