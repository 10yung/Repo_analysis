It would be great if results contained not only commands exactly matching the input, but allow for imperfections.

For starters ignoring special characters (`[^a-zA-Z0-9]`). 
Another round could implement real fuzziness (chars in incorrect order, typos made by pressing neighboring keys, ...).
    $ ls -la /tmp/mcfly.* |wc -l
    130

Hello,

Could it be possible to support arm64/armhf plateforms ? I love your work, and I miss mcfly on my raspberries and arm64 virtual instances :(

thanks
When Terminal window can't fit all 10 results, then attempt to navigate into 6+ result just moves selection cursor out of the screen.

I'm proposing to implement clever scrolling, where search results are scrolled to fit inside visible Terminal window area.

## CASE1 (works currently): when 10 results fits initially (14 lines occupied):

```
McFly | ESC - Exit | ⏎ - Run | TAB - Edit | F2 - Delete                                                                           

$ 

result1 <--- cursor here
result2
result3
result4
result5
result6
result7
result8
result9
result10
```

## CASE2 (works currently): When 6 results fits initially (10 lines occupied):

```
McFly | ESC - Exit | ⏎ - Run | TAB - Edit | F2 - Delete                                                                           

$ 

result1 <--- cursor here
result2
result3
result4
result5
result6
```

## CASE3 (proposed): When 6 results fits and I've scrolled to 7th result (10 lines occupied):

```
McFly | ESC - Exit | ⏎ - Run | TAB - Edit | F2 - Delete                                                                           

$ 

result2
result3
result4
result5
result6
result7 <--- cursor here
```

Real use case: `Terminal` opened inside `PhpStorm`.
This has been in my .bashrc for many years:

```
export HISTSIZE=100000
export HISTTIMEFORMAT=': %Y-%m-%d_%H:%M:%S; '
export HISTIGNORE="&:ls:ll:[bf]g:w:who:exit:history"
export HISTCONTROL="ignoreboth"
```

I'm looking at swapping in mcfly. Do I need to modify these in any way? Does mcfly's database honor HISTSIZE or does it store/remember forever?
Hi,
Please add "Usage" section to the readme file. And especially information about using '%' symbol as a way to use multiple searching patterns.
Thanks in advance
• • • source mcfly.bash
• • •
McFly: Upgrading McFly DB to version 3, please wait...thread 'main' panicked at 'McFly error: Unable to add cmd_tp      
l to commands: SqliteFailure(Error { code: Unknown, extended_code: 1 }, Some("duplicate column name: cmd_tpl"))',       
src/libcore/result.rs:999:5
stack backtrace:
   0: <unknown>
   1: <unknown>
   2: <unknown>
   3: <unknown>
   4: <unknown>
   5: <unknown>
   6: <unknown>
   7: <unknown>
   8: main
   9: __libc_start_main
  10: <unknown>
I am using a custom HISTFILE name. And to keep it that way, I also make this variable readonly.

As mcfly does
`export HISTFILE="${HISTFILE:-$HOME/.bash_history}"`

this leads to an annoying warning:
`bash: HISTFILE: readonly variable`
A check like
```
if [ -z "${HISTFILE}" ]; then
    export HISTFILE="$HOME/.bash_history}"
fi
```
would prevent this warning for me.
    McFly: Importing Bash history for the first time. This may take a minute or two...

This is misleading. My .bash_history is about 5MB big and I keep seeing this message for at least 15 minutes on a quad core CPU. Another ugly side effect that no terminal windows can be spawned meanwhile - they stay locked (the workaround is simple, use a shell in a terminal that was already started before enabling mcfly, but this can be a problem if there's none). Perhaps you need to add some import progress like "x out of y lines from .bash_history are imported"?
Once you learn it, it's simple: have mcfly in PATH and source the provided shell script. But a total beginner still may need to go back to the github repo to read the README after downloading the binary release. I suppose binary releases are often a choice for first time end users, since rust is still quite new and exotic / not available everywhere by default / not trivial to use to compile from source by someone who knows nothing about it. Having the README in the binary release tarball would make it self-sufficient.