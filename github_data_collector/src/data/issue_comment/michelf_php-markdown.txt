GitHub automatically creates links from standard URLs...
but php-markdown does not do it unless the link is placed between '<' and '>'
This should produce an `<abbr>` tag in Markdown Extra:
```
abbr  
next line

*[abbr]: Abbreviation
```
Edit/Clarification: there is a two-space newline that transforms into a `<br>` at the end of the first line.
Code:

```
- Pre-History
	- Year x | Highschool | Web design for online magazine
	- Year x | Middle school | Home made magazine
	- Year x | Primary School | award for school wall magazine & buying kids magazings
- why not
```

Output:

```
<ul>
<li>Pre-History</li>
<li>Year x | Highschool | Web design for online magazine</li>
<li>Year x | Middle school | Home made magazine</li>
<li>Year x | Primary School | award for school wall magazine &amp; buying kids magazings</li>
<li>why not</li>
</ul>
```

Preferred:
 
```
<ul>
<li>Pre-History
  <ul>
    <li>Year x | Highschool | Web design for online magazine</li>
    <li>Year x | Middle school | Home made magazine</li>
    <li>Year x | Primary School | award for school wall magazine &amp; buying kids magazings</li>
  </ul>
</li>
<li>why not</li>
</ul>
```

It's a good package, but sometimes it comes short.
Would be cool to have some sort of support for the `<mark>` html tag to highlight text.
When trying to parse something like `hello *, this is emphasized* etc..` the part between the asterisks doesn't get rendered. It happens at least when the first asterisk is followed by a comma, period, or semicolon and a space. See the following image:

![captura](https://user-images.githubusercontent.com/754783/41485090-84c97de2-70b5-11e8-8bf8-f229c2a94558.PNG)

In the following:

```
1. List 1 item 1
    1. List 2 item 1
    2. <div class="foo">
    List 2 item 2
    </div>
    3. List 2 item 3
```

The div breaks the `<ol>` and is rendered as a new line. 

I am following this rule listed [here](https://michelf.ca/projects/php-markdown/extra/)
 
>When the block element is found inside a list, all its content should be indented with the same amount of space as the list item is indented. (More indentation won’t do any harm as long as the first opening tag is not indented too much and then become a code block — see first rule.)


With this markdown, the first bit of code is not rendered as code, but the second bit is:
------------------------------------------------------------

With objects & namespaces there’s no reason to put the object name in the method name:

	api->apiRequest()

vs

	api->request()


------------------------------------------------------------
The only way I can get it to render properly is to add a blank line and a line containing any character before it, like this:
------------------------------------------------------------

With objects & namespaces there’s no reason to put the object name in the method name:

.

	api->apiRequest()

vs

	api->request()

when writing something like this:

```
> my blockquote
> 
> <footer>a footer for reference</footer>
```

I expect something like this:

```
<blockquote>
<p>my blockquote</p>
<footer>a footer for reference</footer>
</blockquote>
```

However what I get is something like this:

```
<blockquote>
<p>my blockquote</p>
</blockquote>
<footer>a footer for reference</footer>
```

Actually this works well in `erusev/parsedown-extra` but there other features fail ... I'm using the Extra version on [iba](http://iba.piratelp.com/) and you can view a live result [here](http://lostideaslab.com/journal/2/beispiel-liebeserklaerung/)

Thanks for considering this bug in advance
In my extension on MarkdownExtra I have to copy a lot of methods only to change a single line.

Sometimes I have changed the regex a little bit (attributes on an image by reference), sometimes I want to add attributes (target=blank on external links), sometimes I want to change the output (img is wrapped in <span class="image">).

In all of these cases, having a hook that is called would suffice. If several functions would check if a hook function is added I wouldn't have to copy a lot of code.

For example, this is the beginning of the inline anchors callback:
```
	protected function _doAnchors_inline_callback($matches) {
		$whole_match	=  $matches[1];
		$link_text		=  $this->runSpanGamut($matches[2]);
		$url			=  $matches[3] == '' ? $matches[4] : $matches[3];
		$title			=& $matches[7];
		$attr  = $this->doExtraAttributes("a", $dummy =& $matches[8]);
```

If this would be like this:
```
	protected function _doAnchors_inline_callback($matches) {
		$whole_match	=  $matches[1];
		$link_text		=  $this->runSpanGamut($matches[2]);
		$url			=  $matches[3] == '' ? $matches[4] : $matches[3];
		$title			=& $matches[7];
		$attr  =  $matches[8];
		if ($this->hooks['beforeAnchorsInline']) {
			$this->hooks['beforeAnchorsInline']($whole_match, $link_text, $url, $title, $attr);
		}
		$attr  = $this->doExtraAttributes("a", $attr);
```

And from my script (no extension needed, could be a wrapper), I could do this:
```
$parser->addHook('beforeAnchorsInline', function(&$whole, &$text, &$url, &$title, &$attr) {
	if (preg_match('//', $url)) {
		$attr .= " target=blank";
	}
};
```

This way I wouldn't have to copy any code, I can add the same hook to beforeAnchorInline and beforeAnchorByReference to save duplicate code.

When I have finished my current project, I could fork this project and work on it and make pull requests if you prefer.

I am too busy on a project that already has an extension of MarkdownExtra or I would fork this and make a pull request, but if in `doImages` the pattern for images by references gets this extra line:
```
(?:[ ]? ' . $this->id_class_attr_catch_re . ' )?	 # $4 = id/class attributes
```
almost at the end, right before the closing bracket for $1, then `_doImages_reference_callback` can have this at the top:
```
$attr  = $this->doExtraAttributes("img", $dummy =& $matches[4]);
```

That means you can add a class to an image by reference same as you can with an inline image:
```
![alt text][logo]{.some-class-name}

[logo]: https://mydomain.com/icon.png "This is our logo"
```
