### Subject of the issue
Hi

I started getting a strange issue. The BW_RS container becomes unresponsive sometime after starting, when I sya unresponsive I mean unresponsive to browsing via clients like Firefox. I can neither access the local ip nor the reverse proxied url. The Docker logs shows nothing, it looks  as if it is running normally.

Here last couple lines from `docker logs -f bitwarden` 
```
[2020-01-19 03:49:10][request][INFO] POST /notifications/hub/negotiate
[2020-01-19 03:49:10][response][INFO] POST /notifications/hub/negotiate (negotiate) => 200 OK
```

### Your environment

Debian Testing, Docker

`docker run -d --name bitwarden -v /media/bitwarden:/data/ -p 4080:80 -p 3012:3012 --restart=always bitwardenrs/server:latest`


* Bitwarden_rs version:  1.13.1

* Install method:  Docker 
* Clients used: Firefox, Android
* Reverse proxy and version: Apache

* Other relevant information: 

### Steps to reproduce
Start the Docker container  wand wait about half an hour, the web page is unaccessible.

### Expected behaviour
I should be able to access the site nomatter how long the container was up and running.

### Actual behaviour
The site is not reachable. The site is initally reachable for a while, but after sometime it is not reachable via all the IPs the server has or the reverse proxy (via Apache2)

### Relevant logs

`curl -v http://localhost:80/alive`

```
 Expire in 1 ms for 1 (transfer 0x55d21c2f0dc0)    
* Expire in 0 ms for 1 (transfer 0x55d21c2f0dc0)    
* Expire in 0 ms for 1 (transfer 0x55d21c2f0dc0)
* Expire in 1 ms for 1 (transfer 0x55d21c2f0dc0)
* Expire in 0 ms for 1 (transfer 0x55d21c2f0dc0)
* Expire in 0 ms for 1 (transfer 0x55d21c2f0dc0)
* Expire in 1 ms for 1 (transfer 0x55d21c2f0dc0)
* Expire in 0 ms for 1 (transfer 0x55d21c2f0dc0)
* Expire in 0 ms for 1 (transfer 0x55d21c2f0dc0)
* Expire in 1 ms for 1 (transfer 0x55d21c2f0dc0)
* Expire in 0 ms for 1 (transfer 0x55d21c2f0dc0)
* Expire in 0 ms for 1 (transfer 0x55d21c2f0dc0)
* Expire in 0 ms for 1 (transfer 0x55d21c2f0dc0)
*   Trying 127.0.0.1...
* TCP_NODELAY set
* Expire in 150000 ms for 3 (transfer 0x55d21c2f0dc0)
* Expire in 200 ms for 4 (transfer 0x55d21c2f0dc0)
* Connected to localhost (127.0.0.1) port 80 (#0)
> GET /alive HTTP/1.1
> Host: localhost
> User-Agent: curl/7.64.0
> Accept: */*
> 


```

`root@9af1c2f0025e:/# bash healthcheck.sh`
No results shown



bitwarden_rs with nginx proxy, let's encrypt certificate does not work with OnlyKey.io U2F.

Bitwarden started with command:

```
docker run -d --name bitwarden \
-e SIGNUPS_ALLOWED=false \
-e WEBSOCKET_ENABLED=true \
-e DOMAIN=https://bw.darkn.space \
-v /opt/bitwarden-rs/:/data/ \
bitwardenrs/server:latest
```

Nginx config:

```
server {
  listen 443 ssl http2;
  server_name bw.darkn.space;

  # Specify SSL config if using a shared one.
  #include conf.d/ssl/ssl.conf;

  # certs sent to the client in SERVER HELLO are concatenated in ssl_certificate
  ssl_certificate /root/dehydrated/certs/bw.darkn.space/fullchain.pem;
  #/etc/letsencrypt/live/darkn.space/fullchain.pem;
  ssl_certificate_key /root/dehydrated/certs/bw.darkn.space/privkey.pem;
  #/etc/letsencrypt/live/darkn.space/privkey.pem;
  ssl_session_timeout 1d;
  ssl_session_cache shared:SSL:50m;
  ssl_session_tickets off;

  # Diffie-Hellman parameter for DHE ciphersuites, recommended 2048 bits
  ssl_dhparam /etc/ssl/certs/dhparam.pem;

  # intermediate configuration. tweak to your needs.
  ssl_protocols TLSv1 TLSv1.1 TLSv1.2;
  ssl_ciphers 'ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA256:ECDHE-ECDSA-AES128-SHA:ECDHE-RSA-AES256-SHA384:ECDHE-RSA-AES128-SHA:ECDHE-ECDSA-AES256-SHA384:ECDHE-ECDSA-AES256-SHA:ECDHE-RSA-AES256-SHA:DHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA:DHE-RSA-AES256-SHA256:DHE-RSA-AES256-SHA:ECDHE-ECDSA-DES-CBC3-SHA:ECDHE-RSA-DES-CBC3-SHA:EDH-RSA-DES-CBC3-SHA:AES128-GCM-SHA256:AES256-GCM-SHA384:AES128-SHA256:AES256-SHA256:AES128-SHA:AES256-SHA:DES-CBC3-SHA:!DSS';
  ssl_prefer_server_ciphers on;

  # HSTS (ngx_http_headers_module is required) (15768000 seconds = 6 months)
  add_header Strict-Transport-Security max-age=15768000;

  # OCSP Stapling ---
  # fetch OCSP records from URL in ssl_certificate and cache them
  ssl_stapling on;
  ssl_stapling_verify on;

  ## verify chain of trust of OCSP response using Root CA and Intermediate certs
  ssl_trusted_certificate /root/dehydrated/certs/bw.darkn.space/chain.pem;

  #resolver <IP DNS resolver>;

  # Allow large attachments
  client_max_body_size 128M;

  location / {
    proxy_pass http://172.17.0.3:80;
    proxy_set_header Host $host;
    proxy_set_header X-Real-IP $remote_addr;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header X-Forwarded-Proto $scheme;
  }

  location /notifications/hub {
    proxy_pass http://172.17.0.3:3012;
    proxy_set_header Upgrade $http_upgrade;
    proxy_set_header Connection "upgrade";
  }

  location /notifications/hub/negotiate {
    proxy_pass http://172.17.0.3:80;
  }

  # Optionally add extra authentication besides the AUTH_TOKEN
  # If you don't want this, leave this part out
  location /admin {
    # See: https://docs.nginx.com/nginx/admin-guide/security-controls/configuring-http-basic-authentication/
    #auth_basic "Private";
    #auth_basic_user_file /path/to/htpasswd_file;

    proxy_set_header Host $host;
    proxy_set_header X-Real-IP $remote_addr;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header X-Forwarded-Proto $scheme;

    proxy_pass http://172.17.0.3:80;
  }

}
```

Bitwarden_rs logs:

```
[2020-01-18 16:17:13][request][INFO] PUT /api/two-factor/u2f
[2020-01-18 16:17:13][error][ERROR] U2fError.
[CAUSE] BadCertificate
[2020-01-18 16:17:13][response][INFO] PUT /api/two-factor/u2f (activate_u2f_put) => 400 Bad Request
```
Currently, uppercase bool values seems not to work e.g. `SIGNUPS_ALLOWED=False` which is really confusing and can lead to missconfigured public servers.

Normally, most common bool-ish string values like `1,0/yes,no/y,n/true,false/True,False` should be converted to a real bool while reading env variables.
Hello , 

I have problem with the ios APP . Web Vault works fine.

"Sync Failed" 

in the log is :

[2020-01-17 14:21:21][bitwarden_rs::api::identity][WARN] Detected unexpected parameter during login: devicepushtoken
[2020-01-17 14:22:01][auth][ERROR] Unauthorized Error: Invalid device id

Can I somehow clean the device
It could be handy to have some basic CLI options for the `bitwarden_rs` binary in place. Minimum set could be something like `bitwarden_rs --help` and `bitwarden_rs --version`.

These CLI options can also be used to verify if the compiled binary is executable.
Hello, 

I just compiled bitwarden_rs using postgresql.

now i'm setting my bitwarden_rs.env file and I don't really if i'm supposed to point to a database and if yes, what should i set in front of DATABASE_URL=

thanks a lot for all your work !
Hi there
I originally created a template for the bitwarden_rs docker container for use with unRAID. Now that there is an official docker image and unRAID template I have depreciated my template. 

I have had, since then, a few support questions and I just want to know where to direct people. Typically a support thread is opened on the unRAID forums and support is provided there, but if you would prefer it to be over here on github then that's cool. I just want to know where to send people ðŸ˜Š

Thanks for making this awesome software! I use it every day! 
Unless I overlooked them, there aren't any notes specifying these key points when configuring SSL for containers.

- Certificates must be in RSA format. If they aren't, it will complain it could not parse the environment variables and fail to start. I spent a lot of time trying to use an ECDSA key not realizing this. Switched to RSA and things started working (after cleaning up other debugging steps I took)
- Use the environment variable `ROCKET_PORT` to change the system to listen on 443 if necessary. I had to do this for it to run on Google Cloud Platform (GCP). You could probably also just port forward 443 to 80 if you'd like, but this seems to be a more ideal solution, at least for me. You can always change the port to something completely different as well if desired (ex. 8443).
- If you plan on using Cloudflare in front of your install, I highly recommend using the `Full (Strict)` SSL/TLS option if possible. This ensures the highest level of security (meaning your server has a valid signed certificate being used).
---
To use Cloudflare with minimal hassle and not having to fight with LetsEncrypt:
1. Generate an origin certificate if desired, it's free for all plans on Cloudflare
1. Install the certs to your container storage somewhere
1. Use `ROCKET_TLS` to point to both files
1. Use `ROCKET_PORT` to change the default port to 443
1. Switch `Full (Strict)` SSL/TLS on for the domain on Cloudflare

Note the longest period a generated origin cert can be set valid for is 15 years. Additionally, these certs are only trusted by Cloudflare's origin servers (hence why it's signed by them). The general public's browsers will still freak out. There is a possibility the cert will be terminated earlier than 15 years at Cloudflare's discretion, and you would need to update your cert again if/when it expires or gets revoked. This is just a matter of signing in to your control panel, clicking a few things, copying the text, and pasting it over the files on your server, then reloading it. Sure, not automated like LE, but considering the time it takes in comparison, it's not that bad. You can always regenerate new certs ahead of time as well, to extend the final expiration date.

I'm not expecting all of this to be added to the wiki. I'm just dropping it here in case anyone else is having issues and can't figure it out. Might save them some time.
Hi guys,

Maybe a dumb question , but where in the code is this logic handled?
Is it possible to set limits per account/organization or is it a global setting for everyone?

Cheers
Hey there,

no actual issue, but I don't want to miss anything. We are using Bitwarden hosted at our Servers and dislike this heavy infrastructure for only 7 users. As I read this implementation should be far more lightweight and easier to maintain than the official one.

I have a few questions which I was not able to find answers for in the wiki or in other issues.

1.) How to Migrate from Bitwarden Server to Bitwarden RS Server

We have a running bitwarden instance. What do we need to migrate the MSSql Installation to this? Docker is no issue, but I don't know Rust.

2.) Organisations for Free?

With this server it looks like we are not required to pay money to Bitwarden anymore. I read that you request your users to still pay money to Bitwarden for Client and Co update. We are going to do this, but did I understand the texts right?

3.) How to Update the Server

When we have all data in Bitwarden RS what is necessary to update the server? How often do we get bitwarden client releases and have to wait before we are able to work with Bitwarden RS again? Are data migrations to new formats done within the server or do we have to start scripts manually? Is this even a thing?

Just to know how stable this will be as this will become a very important part of our infrastructure.

Have a nice weekend,

Bastian