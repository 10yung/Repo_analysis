The CPU cannot do anything else during io-wait.
So if you include it, it will better represent how busy the CPU is ("why my computer is so sluggish when I copy that large file despite the CPU usage is under 5%").
After htop 2.2 the memory information displayed in non-global zones shows the physical memory capacity instead of the zone's memory cap.

In zone memory stats should first come from the `memory_cap` kstat, and only display physical memory if the zone is uncapped.
Hotkey 's' on FreeBSD and derivatives should use truss instead of strace for tracing. truss is base-system utility on BSDs.
Fixes #44

This is #153, but rebased to be mergable with the current head.
Hello, I'm using htop version 2.2.0 on DragonFly BSD, and I find that htop shows wrong 'CPU%' and 'TIME+' data.  Specifically, htop is showing **0.0% CPU** and **0:00.01 TIME+** for all processes, which I think is wrong.  Please see the following screenshot for an example.

![Screenshot_2020-01-11_22-40-45](https://user-images.githubusercontent.com/686169/72205982-fad8ca00-34c3-11ea-8f5a-113a306c72d0.png)

Please have a look and I'm happy to help solve this issue.  Thank you very much.
Before this patch, the "START" column is a zero-width string. This also causes subsequent columns to be misaligned with their titles.
Add two new display options for filtering mode:

- Display all parent processes up to root process.

- Display all children processes for filtered process.

I imagine a regular use case (at least it's my main use case) where user has multiple commands being executed in different screen/tmux windows which user would like to monitor without the distractions from kernel tasks and other processes. 

Example how it looks like with the two options enabled.

```
CPU% MEM%   TIME+  Command                                                                                                                                             
 0.0  0.1  0:26.54 /sbin/init splash
 0.0  0.1  0:00.23 ├─ /lib/systemd/systemd --user
 0.0  0.0  0:00.94 │  ├─ tmux                                                                                                                                          
 0.0  0.1  0:00.09 │  │  ├─ -bash
 0.0  0.0  0:00.00 │  │  │  └─ -bash
 0.0  0.0  0:00.00 │  │  │     └─ tail -f tmp.sh
 0.0  0.1  0:00.07 │  │  ├─ -bash
 0.0  0.1  0:00.02 │  │  │  └─ vi edit.txt
 0.0  0.1  0:00.14 │  │  └─ -bash
 4.6  0.1  0:02.60 │  │     └─ ./install_dir/bin/htop 
 1.3  0.5  1:02.26 │  ├─ /usr/lib/gnome-terminal/gnome-terminal-server
 0.0  0.1  0:01.06 │  │  └─ bash
 0.0  0.0  0:00.00 │  │     └─ tmux



F1Help  F2Setup F3SearchF4FilterF5SortedF6CollapF7Nice -F8Nice +F9Kill  F10Quit                                                                                                                                    
```
It has bothered me for quite some time that running `htop -d 590` does not delay 59 seconds but something much less. I finally looked at the code today and see that the delay is clamped to `1 <= delay <= 100', i.e. a minimum of 0.1 seconds and maximum of 10.0 seconds. It's not clear to me in looking at the code history if there's some design reason for this, so I propose this change to the manual page. I'd be happy to change the code to remove this restriction and revert this proposed change to the manual page, but I think that requires a bit more discussion.
I suggest the following small fix with the following reasoning:

- the conditionals with `amtRead` in function `LinuxProcessList_readCmdlineFile` are meant to protect the execution of the for loop (and what follows it), which is not supposed to be run with `amtRead == 0` (if I understand correctly),
- the command for zombie processes is then set in function `LinuxProcessList_recurseProcTree` at line [883](https://github.com/hishamhm/htop/blob/402e46bb82964366746b86d77eb5afa69c279539/linux/LinuxProcessList.c#L883) after the "offending" call to `LinuxProcessList_readCmdlineFile` at line [856](https://github.com/hishamhm/htop/blob/402e46bb82964366746b86d77eb5afa69c279539/linux/LinuxProcessList.c#L856).

To me this is a quick fix and the setting of command name of processes seems a little bit clumsy (i.e. `readCmdlineFile` is not just reading, but actually setting the command name of a process and classifying it as a kernel thread), however, I lack the insight as well as experience to write it better. Maybe setting the command name of a zombie process should also be moved to `readCmdlineFile` and the function renamed. Please, let me know what you think about it.

This closes issue #930.
When you turn on "show custom thread names" (F2 -> Display options), htop indeed shows the custom thread name, but also hides the process name/path.

This makes the output rather confusing when not in tree mode, since it's hard to tell what the process is for any programs that use thread names that don't mention the process (which is pretty much all of them as far as I can tell...). It also prevents you from effectively filtering on the process name.

`iotop` uses a display format like `process [thread name]` (e.g., `chromium [ThreadPoolForeg]`) -- would that or some other solution be possible in `htop`?