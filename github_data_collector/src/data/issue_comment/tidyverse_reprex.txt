I rendered https://github.com/tidyverse/reprex/tree/master/inst/rmarkdown/templates/reprex-minimal repeatedly and found that the following line is appended every time.
By this PR, the advertisement is skipped if the one already exists.

```md
<sup>Created on `r Sys.Date()` by the [reprex package](https://reprex.tidyverse.org) (v`r utils::packageVersion("reprex")`)</sup>
```
Such as `si` vs. `session_info`. I feel like I may need to do more around soft-deprecation.
Figure out whether to do anything in response to this and, if so, what:

https://github.com/r-lib/callr/pull/135#issuecomment-559907943

Probably related to #284
I dislike the way `outfile` works. In particular, `input = NULL, outfile = NA` is a very weird way to say "create a reprex in the current working directory".
After the big internal refactoring, it's time to look at all the path handling again.

A few specific things to look into:

  * Maybe we should (almost) always reprex in a subdirectory? For example, if no `input` file is given but `output = NA` (work in current working directory), maybe that should be more like the usual scenario where we work below temp dir.
  * If we start with a file, should we work with a (suitably named) copy, so that `reprex_render()` is idempotent? I.e. repeated rendering doesn't potentially add multiple copies of the ad, session info, standard output error stub.
HTML preview works the way I want with the traditional `reprex()` workflow.

But now that `reprex_document()` and `reprex_render()` exist and are exported, some people might render a reprex via the "Knit" button or a direct call to `reprex_render()`. And the HTML preview is wonky/spotty.
Prepare for release: 
 
* [x] Check [current CRAN check results](https://cran.rstudio.org/web/checks/check_results_reprex.html) 
* [ ] `devtools::check(remote = TRUE, manual = TRUE)` 
* [ ] `devtools::check_win_devel()` 
* [ ] `rhub::check_for_cran()` 
* [ ] `revdepcheck::revdep_check(num_workers = 4)` 
* [ ] Update `cran-comments.md` 
* [ ] [Polish NEWS](https://style.tidyverse.org/news.html#news-release) 
* [ ] Review pkgdown reference index for, e.g., missing topics 
* [ ] Draft blog post 
 
Submit to CRAN: 
 
* [ ] `usethis::use_version('minor')` 
* [ ] `devtools::submit_cran()` 
* [ ] Approve email 
 
Wait for CRAN... 
 
* [ ] Accepted :tada: 
* [ ] `usethis::use_github_release()` 
* [ ] `usethis::use_dev_version()` 
* [ ] Finish blog post 
* [ ] Tweet 
* [ ] Add link to blog post in pkgdown news menu 

This is a PR to offer an alternative to current proposal in #265 to deal with #193 , (and it is inspired by it)

Instead of adding a custom post processing from md file produce by `reprex_render` to transform to JIRA markup, it is build on new jira output format added in pandoc 2.7.3. This allows to have a full conversion of markdown syntax to JIRA markup. This seems more robust to build on pandoc, with the drawback of requiring last pandoc version 2.7.3 (not included in RStudio IDE yet) to be able to work. 

I added a new shortcut `reprex_jira` too and some test, showing that pandoc is able to convert markdown syntax to jira markup. 

Also, it is rebased already on new dev reprex codebase.

One question: you don't seem to use `@importFrom`, so I did not add the two `rmarkdown` function into NAMESPACE.
Various reasons it might be interesting to offer a workflow that is `.Rmd`-based:

  * User is more comfortable in `.Rmd`. @Hadley had some thoughts about this, based on talking to @mine-cetinkaya-rundel.
  * Chunks could take advantage of knitr/rmarkdown's support for languages other than R.
From https://github.com/rstudio/renv/issues/208.

Projects using `renv` typically require some extra gymnastics, which are performed (normally) through the use of a project `.Rprofile`. However, `reprex()` does not read that `.Rprofile` by default, leading to some subtle differences in how `reprex()` runs code versus how `renv` might run that same code.

It could be worth considering whether `reprex()` could support this by default; e.g. by allowing the project `.Rprofile` to be loaded -- either by default, or when it detects or knows `renv` is active.