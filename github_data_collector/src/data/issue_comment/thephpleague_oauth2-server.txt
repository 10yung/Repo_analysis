I've been working with integrating doctrine with zend-expressive-oauth2 which officially uses this library, I have the auth flow pretty much working whereby user has to login and authorise clients & scopes (if present).

During the process due to having a large amount of scopes (and readability) I wanted to drop the [imploded] "scopes" column from the oauth_access_tokens table, create related scopes table, "oauth_token_scopes" which consisted of (token_id,scope_id).

There's one function in the AbstractGrant class which is causing me problems doing this:

```
private function convertScopesQueryStringToArray($scopes)
{
    return array_filter(explode(self::SCOPE_DELIMITER_STRING, trim($scopes)), function ($scope) {
        return !empty($scope);
    });
}
```

Throws an exception "trim expects parameter 1 to be a string, object given", understandable as I am no longer using imploded string but array from related table.

I am able to fix and allow scopes in separate table by modifying the above function to:
```
private function convertScopesQueryStringToArray($scopes)
{
    // parse as string as usual
    if (is_string($scopes)) {
        return array_filter(explode(self::SCOPE_DELIMITER_STRING, trim($scopes)), function ($scope) {
            return !empty($scope);
        });
    }

    // parse array
    $scopes = (array)json_decode(json_encode($scopes), true);
    return array_map('trim', $scopes);
}
```

Any chance I could submit a suggestion, or PR, to allow this functionality?

Hello,
Since I needed the device authorization grant for a project I'm working on, I've decided to give a shot at implementing it in a presentable way.

For the most part I copied other grants code where needed and tried to keep the methods and interfaces as similar to what's already implemented as possible.

The interval checking between requests for an access token is currently not implemented, as I think this could be more easily delegated to a framework middleware than implement the logic right inside the package.

Pairing a user identifier with the device code is left outside the scope of this implementation as well.

I've created a laravel passport implementation based off this code that you can find here: https://github.com/lucadegasperi/passport/tree/device-flow

Let's make this grant happen!
Something that was confusing to me about this is the `AuthCodeGrant` [only calls `validateCredentials` for private clients](https://github.com/thephpleague/oauth2-server/blob/e1dc4d708c56fcfa205be4bb1862b6d525b4baac/src/Grant/AuthCodeGrant.php#L102) which made it seem like you no longer needed to check if the client was confidential before attempting to verify the secret.

However the refresh token grant and password grant both are supposed to support public clients according to the OAuth specification and do not check `Client::isConfidential` before calling `validateClient`.

Wouldn't that mean the `isConfidential` check in the `AuthCodeGrant` is unnecessary as you will need to check yourself in `validateClient` in order to support the other grant types?

_Originally posted by @matt-allan in https://github.com/thephpleague/oauth2-server/issues/1034#issuecomment-513974013_
Most repos return `string` for their `getIdentifier()` function. However, the user repo returns `mixed`. This causes confusion as implementers might think that you can return `mixed` for a client repository but this is not true.

We either need to move the `getIdentifier` calls into their own respective repos or force the user interface `getIdentifier` call to return a string in version 9.
Most error cases in `AuthCodeGrant::validateAuthorizationRequest` doesn't redirect back to client even when `client_id` is specified.

For example when using "Authorization code grant" and client sends query with
 `response_type=code&client_id=existing&redirect_uri=https://...` I would expect that it would get redirected back with error so client would know they're doing something wrong.

But for most errors there are no redirects, also even with `response_type=invalid&client_id=existing` I would want it to be redirected back.

See https://www.oauth.com/oauth2-servers/server-side-apps/possible-errors/


The validateClient method is called for public clients when using the refresh_token and password grant type and the interface allows passing a null secret, so it's not necessary to skip calling the method for the authorization_code grant type.

When I saw that we skipped calling `validateSecret` for public clients in the auth code grant and that the `$mustValidateSecret` parameter was removed for 8.0 I assumed that meant `validateClient` would no longer be called for public clients. I later realized`validateClient` is called for public clients when using the password or refresh token grant.

If `validateClient` is called for public clients for the other grant types you will need to do something like `return !$client->isConfidential() || hash_equals($client->getSecret(), $clientSecret)` anyway, so it doesn't seem necessary to skip calling it here.

Hopefully by removing the unnecessary check it will be less misleading to other developers and increase the likelihood that they handle public clients appropriately in `validateClient`.

The `validateClient` method also calls `validateRedirectUri` which emits a `CLIENT_AUTHENTICATION_FAILED` event if validation fails. The `validateAuthorizationCode` also validates the redirect URI but does not emit an event. Calling `validateClient` regardless will ensure the event is consistently fired for invalid redirect URIs just in case someone is relying on it.
resolves issue #942
As part of the release for version 8, I removed PHPStan's strict rules as it required big changes to a lot of signatures. I didn't want this to delay the release of v8 any further so will aim to add this back in at a later version. Adding an issue here to track.
We're using this package, via [Laravel Passport](https://github.com/laravel/passport), to build the API for a mobile app. Having mobile clients comes with problems surrounding unstable connections. In this case, the problem seems to be that the client can successfully send a request to the server, but can't receive the server's response. For most requests and responses, this isn't too much of a problem. Except when you can't try again.

This is the case when trying to exchange a refresh token for a new access token; a new access token and refresh token are generated and the old tokens are revoked. But if the client hasn't been able to receive the new tokens, it can't try again. As with many apps, most of the users of this app are not registered, resulting in being locked out if the token exchanges fails.

What I think should happen is not immediately revoking the old tokens (or at least not revoking the refresh token) when the refresh_token grant is called. The old tokens should only be revoked when the new one are successfully used for the first time. When the client tries again with the old refresh token, the new tokens could be returned again or they could be revoked while returning a new and third set of tokens.

What do you think about this? And what's your take on the way to change this behaviour? I'm very much willing to make a PR, but based on your replies I might find a different path if that leads to a better result.
The JWT library we use now supports clock leeway. We should allow implementations to use this feature in an upcoming version of this library