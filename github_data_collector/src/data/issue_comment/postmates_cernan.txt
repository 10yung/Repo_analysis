From the security review bug (https://github.com/postmates/cernan/issues/461):
> None of the sources auth, the few sinks that have auth credentials are, iirc, not wired up to authenticate. IP whitelisting and/or presence in a blessed subnet was Good Enough. Obvious issues there.
https://github.com/postmates/cernan/wiki/SinksElasticSearch
* secure :: whether to attempt HTTPS or not with the elasticsearch host [default: false]

It makes sense to change the default to true, as per https://github.com/postmates/cernan/issues/461.
My comment from the security review (https://github.com/postmates/cernan/issues/461):

Is this essentially insecure by default?  If itâ€™s insecure with the default setting that should probably at minimum be called out explicitly in the wiki. 
 https://github.com/postmates/cernan/wiki/Configuration#Scripts-Directory

So IMO, there either shouldn't be an (insecure) default location configured, or at least the wiki documentation should very clearly state that the default should be changed prior to any production deployment.

blt@ suggests this issue may be interesting for more than just scripts:
---
Depends on what cernan is shipping of course, but, yeah. I guess it is. The wiki should be amended. I'm open to suggestions for alternative behavior. My main thinking when I wrote this was that it's easy to screw up the operation of cernan by fiddling with those files. We never implemented checksums or recovery for queue files, on account of there not being a call for them at the time of implementation.

Weak area, generally.

Oh, you're talking about scripts here. Well, both are probably unsafe. If you craft a special purpose queue file for, say, the kafka sink you can get cernan to ship whatever you want. Same deal for scripts.
---
As noticed in security review (https://github.com/postmates/cernan/issues/461):
https://github.com/postmates/cernan/blob/4c96e203fdc5eb8f85aee2fd462daf081a0db811/src/config.rs#L849

Followup action:
> We should document a limit to this value and check the user's input, emit a warning if the value is too large.
As per: https://github.com/postmates/cernan/issues/461#issuecomment-460741158
"This is part of the generated protobuf code. It'd be reasonable to regen this and see if the unsafe bits have disappeared. It'd also be willing to open up an issue for deprecation in the next release, removal in the release after."
The rlua project looks to be pretty tidy and has a full head of steam behind it, as of this writing. Our specific lua -- mond -- is a fork that has little but maintenance work go into it. 
While kcov was broken, cernan's unit test coverage dropped to 91.6%. I have temporarily reduced the project requirement to 91%, but we should also work on improving the coverage to >95% again.
Hello friends! Rusoto has recently gained `hyper` 0.11 support and basic async behavior ( https://github.com/rusoto/rusoto/pull/868 ). Since `cernan` is not only open source but also a potentially high traffic user of AWS services, we'd love some feedback on the new version.

Async is available in the `master` branch of [Rusoto](https://github.com/rusoto/rusoto). Using this version and helping us find any bugs or issues would be greatly appreciated. ðŸ˜„ 

This is a breaking change to the API since we return `RusotoFuture`s instead of the call result. Updated integration tests, [including Kinesis](https://github.com/rusoto/rusoto/blob/master/integration_tests/tests/kinesis.rs), are available.

Thanks!
For more visibility into how many retries it's taking to flush cernan's log lines buffer.  I suppose a counter for any failures would be helpful here too if there's not already one.
Right now the flush function has no way of signaling error. As @pulltab noted the InfluxDB sink flush will loop infinitely without an influxdb to report to, which is... not great. #353 is caused by an inability to signal error upward. 

This can be repaired by having `Result` kicked out of the function, or some other kind of [failure](https://github.com/withoutboats/failure).