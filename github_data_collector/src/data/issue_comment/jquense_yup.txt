I've just now started using `yup` in combination with `formik`, and so far I like it. However, when I reviewed my bundle size (as I often to do ensure that our application is as speedy as possible) I noticed that `lodash` was getting included twice (once in its ES module form from `formik` and once again from `yup` in CommonJS form). Here's a screenshot of what I mean:

![screenshot](https://user-images.githubusercontent.com/16436212/72661883-bd85a800-39ad-11ea-9169-392cb1904ea9.png)

After this PR (and switching to the ES module version of the library):

![image](https://user-images.githubusercontent.com/16436212/72673148-53fcac80-3a34-11ea-9ee3-cb2a85942675.png)

In order to achieve this I had to convert the Babel configuration into JavaScript, but this seems to work fine and reduces the bundle size quite nicely.

Verified on browser (Chromium 79.0.3945.130 and Firefox 72.0.1) and Node.js 12.14.0.
Version:   "yup": "^0.27.0"


I'm currently using Yup and Formik in React Native. I want to check for any duplicate email as part of the signing up process using a custom validation from Yup:
```js
validationSchema={yup.object().shape({
    firstName: yup
        .string()
        .max(20)
        .required(),
    lastName: yup
        .string()
        .max(20)
        .required(),
    email: yup
        .string()
        .email()
        .test({
            name: 'duplicate-email-check',
            params: 'value',
            message: 'Duplicate email already exists',
            test: async (value) => {
                firebase
                    .auth()
                    .fetchSignInMethodsForEmail(value)
                    .then(result => {
                        if (result === "password") {
                            return false
                        } else {
                            return true
                        }
                    })
                    .catch(err => console.log(err))
            }
        })
        .required(),
    password: yup
        .string()
        .min(8)
        .required(),
    passwordConfirmation: yup
        .string()
        .oneOf([yup.ref('password'), null], 'Passwords must match')
        .required(),
})}
```

I'm using `fetchSignInMethodsForEmail` to fetch any kind of accounts with the same email and if it exists, a validation error message will be thrown. 

**Issue 1**
The problem is the error message "Duplicate email already exists" appears appropriately, but it doesn't disappear once it shows up even though there is no duplicate email.

**issue 2**
I'm getting the following error message when I first arrive on the screen:

> [Unhandled promise rejection: TypeError: undefined is not an object (evaluating 'yupError.inner.length')]


I am creating a factory which churns out schemas for objects, and one of the schema validations is an array of homogeneous types of exactly length n, if this wasn't done at scale it'd be something like this:

```typescript
type TExample = [string, string, string]
```

Yup has a nice-enough way of enforcing array length and type, let's say for the first object `object1` I need it to have an array of strings exactly 3 long:

```typescript
const kvSettings = {
  object1: 3
}

// validation would then be
const shapeObject1 = yup.object().shape({
  args: yup.array().of(yup.string()).test('test arg length', '', (v: []) => v.length === kvSettings.object1),
})
```

That validation works but the inffered types incorrectly report a type of `string[]` for the array instead of `[string, string, string]`. This happens too with the less graceful double `.min(3).max(3)` syntax.

```typescript
type Test = yup.InferType<typeof shapeObject1>

// type Test = {
//   args: string[];
// }
```

Yup should infer the types correctly as `[string, string, string]`.
First, My goal is to extend the yup library, add some new validation methods.

I already tried using addMethod, extending the schema types and it worked well, the only problem was that after doing so, I was unable to work using intellisense suggestions with the new methods.
Then I thought trying to build the lib from scratch just adding some methods here and there. So what i did was: 

1. clone yup repo 
2. checkout to latest stable version, (tag v0.28.0)
3. run yarn install and build
4. run yarn publish 

obs: i did not make any changes to the code

But the result was not what i expected, after importing in another project via yarn add or just copying the code actually runs, but the got intellisense suggestions does not work as normally would.

There's a specific way to do this process?  

In our application, we have some helpers used to generate initial values given to formik forms, based on the yup schema.

Nullability is currently very hard to handle, because it is not exposed when calling `.describe()`. This will add nullable to the field description.
Original regex was inspired from [here](https://emailregex.com). I've added the length constraints - max 64 for local and max 255 for the domain.
**Description**
I want to compare two dates with the following criteria

* startDate should be less than endDate
* startDate should not be equal to endDate

Comparing two equal dates with min and max results in no validation error.

**To Reproduce**

```javascript
const startDate = moment().toDate();
const endDate = moment().add(1, 'month').toDate();

const schema = yup.object().shape({
  startDate: yup.date()
    .default(new Date(startDate))
    .when('endDate', (endDate, schema) => endDate && schema.max(endDate))
    .required('Date is required'),
  endDate: yup.date()
    .default(new Date(endDate))
    .min(yup.ref('startDate', 'End date should be later than start date'))
    .required('Date is required'),
});
```

**Expected behavior**
I expect this one to raise a validation error, it works as expected when I pass 

_Does not raise an error_
```javascript
schema.validate({
  startDate: new Date('2020-01-15'),
  endDate: new Date('2020-01-15'),
});
```

_Raises an error as expected_
```javascript
schema.validate({
  startDate: new Date('2020-01-16'),
  endDate: new Date('2020-01-15'),
});
```

**Platform (please complete the following information):**
 - Chrome 79.0.3945.117
 - Version Latest
When you try to use when method referencing to the field that has strip() in its description, it will always run otherwise option.

**To Reproduce**
```
object().shape({
    advancedSearch: boolean().strip(),
    firstName: mixed().when('advancedSearch', {
      is: true,
      then: string().required(),
      otherwise: string().strip(),
    }),
});
```

**Expected behavior**
That advancedSearch value first will be used in when() method and will be removed at the end.

I am trying to validate a text field based on a drop down in the form. for example if there is a drop down with list of colors and there is a text field. If the selected color is red, then Id field should have ID value starting with letter R and In such a way each color selected has different validation condition on ID field. How to achieve this using Yup test method or any other method in Yup.

**Describe the bug**
Hey there,

I am having trouble validating country codes. I have an array with all the possible country codes (below I put only 2 to exemplify) and wanted to test if the user typed one of them, like below:

    ...
    .string().oneOf(['213', '1-684'])
    ...

The  validation for the 213 work fine, but the 1-684 don't, probably because of the "-".

**Platform:**
 - Version 0.27.0