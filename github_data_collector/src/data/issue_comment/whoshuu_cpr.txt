This addresses #342 -- uploading buffers larger than about 16,000 bytes results in corrupt data.

There's no changes to cpr just simply a curl version bump.

I've not rigorously tested this change yet.
Hey I'm trying to use cpr to upload an image from memory (generated with CImg). It 'works' for most of the file however all data after 0x00003EDF becomes corrupt (note sending the same image using a file on disk first works -- though is not a usable solution).

I can't figure out what's going on.
I've been toying in a debugger for ages & I've yet to locate where the bug occurs.
I've tried doing stuff like removing all frees to see if some kind of use after free is happening.

I expect this is probably on my side but I can't for the life of me find it.

Some code:

```c++
    char *buffer = NULL;
    size_t size = 0;
    FILE *fp = open_memstream(&buffer, &size);
    image.save_png(fp);
    // image.save_png("./test2.png"); -- this works
    fflush(fp);
    // data also seems correct in a debugger.
    get_client()->uploadFile(
      channel, reinterpret_cast<uint8_t*>(buffer), size, message, name); 
    fclose(fp);
    free(buffer);
```

Skipping some miss-direction that end up here where it's added to the session.
```c++
	void CPRSession::setMultipart(const std::initializer_list<Part>& parts) {
		std::vector<cpr::Part> cprParts;
		for (Part m : parts) {
			if (m.isFile) 
				cprParts.push_back(cpr::Part(m.name, cpr::File(m.value)));
			else if (m.buffer_len > 0) {
				auto buffer = cpr::Buffer(m.buffer, m.buffer + m.buffer_len, m.name);
				cprParts.push_back(cpr::Part(m.name, buffer));
			}
			else
				cprParts.push_back(cpr::Part(m.name, m.value));
		}

		muiltpart.parts = cprParts;
		session.SetMultipart(muiltpart); // add to cpr session
	}
```
that will after a while call `` session.Post  ()``.
At all stages in the code a above the data seems fine. Note the cpr calls are going through a library first hence the abridged code.

I've attached two sample images (correct.png & courrupt.png).
![Corrupt](https://user-images.githubusercontent.com/11597044/71605257-7602bd80-2b5f-11ea-9dca-f8b676f1a27e.png)
![Correct](https://user-images.githubusercontent.com/11597044/71605270-8024bc00-2b5f-11ea-9c5f-daff075aab16.png)

  

Hello, could you provide more informations on building cpr ? CMake gives errors, and wich gcc you don't tell what files to compile : 
With CMake : 
```
C++ Requests CMake Options
=======================================================
  USE_SYSTEM_CURL: OFF
  BUILD_CPR_TESTS: ON
  GENERATE_COVERAGE: OFF
  CPR_CURL_NOSIGNAL: OFF
  USE_SYSTEM_GTEST: OFF
  CMAKE_USE_OPENSSL: ON
=======================================================
Not using system Curl, using built-in curl project instead.
CMake Error at opt/CMakeLists.txt:48 (add_subdirectory):
  The source directory

    D:/Developpement/C++/cpr-master/opt/curl

  does not contain a CMakeLists.txt file.


CMake Error at opt/CMakeLists.txt:60 (set_property):
  set_property could not find TARGET libcurl.  Perhaps it has not yet been
  created.


Set CURL_FOUND to TRUE.
Set CURL_LIBRARIES to libcurl.
Set CURL_INCLUDE_DIRS to /include;/include/curl.
Not using system gtest, using built-in googletest project instead.
CMake Error at opt/CMakeLists.txt:82 (add_subdirectory):
  The source directory

    D:/Developpement/C++/cpr-master/opt/googletest

  does not contain a CMakeLists.txt file.


CMake Error at opt/CMakeLists.txt:90 (set_property):
  set_property could not find TARGET gtest.  Perhaps it has not yet been
  created.


CMake Error at opt/CMakeLists.txt:91 (set_property):
  set_property could not find TARGET gtest_main.  Perhaps it has not yet been
  created.


Set GTEST_FOUND to TRUE.
Set GTEST_LIBRARIES to gtest.
Set GTEST_MAIN_LIBRARIES to gtest_main.
Set GTEST_BOTH_LIBRARIES to gtest;gtest_main.
Set GTEST_INCLUDE_DIRS to /include.
Building mongoose project for test support.
CMake Error at opt/CMakeLists.txt:106 (add_subdirectory):
  The source directory

    D:/Developpement/C++/cpr-master/opt/mongoose

  does not contain a CMakeLists.txt file.


Set MONGOOSE_FOUND to TRUE.
Set MONGOOSE_LIBRARIES to mongoose.
Set MONGOOSE_INCLUDE_DIRS to .
CMake Error at opt/CMakeLists.txt:116 (set_property):
  set_property could not find TARGET mongoose.  Perhaps it has not yet been
  created.


Using CURL_INCLUDE_DIRS: /include;/include/curl.
Using CURL_LIBRARIES: libcurl.
Configuring incomplete, errors occurred!
See also "D:/Developpement/C++/cpr-master/build/CMakeFiles/CMakeOutput.log".
See also "D:/Developpement/C++/cpr-master/build/CMakeFiles/CMakeError.log".
```
Read version information from the file [VERSION](https://github.com/whoshuu/cpr/blob/master/VERSION) and add the variables
cpr_VERSION and cpr_VERSION_MAJOR. cpr_VERSION_MAJOR is used as SOVERSION.

My SOVERSION choice implies that the ABI does only break when the major version number changes. If that is not the case it should be changed.

`file(STRINGS …)` is available in 2.8.7: <https://cmake.org/cmake/help/v2.8.7/cmake.html#command:file>  
`project(… VERSION …)` is available in 3.0: <https://cmake.org/cmake/help/v3.0/command/project.html>  
`string(REPLACE …)` is available in 2.8.7: <https://cmake.org/cmake/help/v2.8.7/cmake.html#command:string>  
`list(GET …)` is available in 2.8.7: <https://cmake.org/cmake/help/v2.8.7/cmake.html#command:list>  
`set_target_properties(… VERSION … SOVERSION …)` is available in 2.8.7: <https://cmake.org/cmake/help/v2.8.7/cmake.html#command:set_target_properties>
The background-color on the website is missing. Without it, the browser falls back on the default color, which is [user-configurable](https://support.mozilla.org/en-US/kb/change-fonts-and-colors-websites-use#w_change-font-color).

### Before:

![screenshot_2019-12-17T19-50-25](https://user-images.githubusercontent.com/3681516/71025246-ec86d080-2106-11ea-9c28-7ade7b64502f.png)

### After:

![screenshot_2019-12-17T19-51-57](https://user-images.githubusercontent.com/3681516/71025257-f27cb180-2106-11ea-9e0b-eed62728ca2d.png)

I want to make WebDav-requests with libcurl.

Is it in the scope of cpr to also support the webdav-verbs COPY, LOCK, MKCOL, MOVE, PROPFIND, PROPPATCH, UNLOCK somewhere in the future?

I'd prefer to contribute to this project to match my needs instead of writing another bad libcurl-wrapper just for my use-case. But I'd like to make sure that a PR with these changes would have a chance to make it into master.
‘mimetype’ undeclared (first use in this function); did you mean ‘mimetypd’?
opt/curl/lib/mime.c:1320

renamed CURLcode curl_mime_type(curl_mimepart *part, const char *mimetyped) to 
CURLcode curl_mime_type(curl_mimepart *part, const char *mimetype) and build no problem.

Respects!
Required modification of #315 added
I am trying to use CPR in android.  This is my `src/main/cpp` directory's structure:
```
cpr/ 
native-lib.cpp
CMakeLists.txt
```

note:  cpr/ directory is generated by running this command `git clone --recurse-submodules https://github.com/whoshuu/cpr.git`

This is the content of CMakeLists.txt in src/main/cpp directory:
```
cmake_minimum_required(VERSION 3.4.1)
add_library(
        native-lib
        SHARED
        native-lib.cpp
)
find_library(
        log-lib
        log
)

add_subdirectory(cpr)
target_link_libraries(
        native-lib
        cpr
        ${log-lib}
)
```
But I get this error when I build and run the code:
```
Could NOT find OpenSSL, try to set the path to OpenSSL root folder in the
  system variable OPENSSL_ROOT_DIR (missing: OPENSSL_CRYPTO_LIBRARY
  OPENSSL_INCLUDE_DIR)
```


EDIT
I have found the answer soon I will be posting the answer
Hi,I have Linux Makefile project how to use this wrapper lib in my project? What "keys" i must add to Makefile rules e.t.c  in cURL is  **-lcurl** but what about wrappers "keys"?
BTW is any Install guides how to install this wrapper on Linux/VSCode do not using CMake?