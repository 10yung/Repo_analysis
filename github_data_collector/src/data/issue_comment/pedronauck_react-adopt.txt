Bumps [handlebars](https://github.com/wycats/handlebars.js) from 4.0.11 to 4.5.3.
<details>
<summary>Changelog</summary>

*Sourced from [handlebars's changelog](https://github.com/wycats/handlebars.js/blob/master/release-notes.md).*

> ## v4.5.3 - November 18th, 2019
> Bugfixes:
> 
> - fix: add "no-prototype-builtins" eslint-rule and fix all occurences - f7f05d7
> - fix: add more properties required to be enumerable - 1988878
> 
> Chores / Build:
> - fix: use !== 0 instead of != 0 - c02b05f
> - add chai and dirty-chai and sinon, for cleaner test-assertions and spies, 
>   deprecate old assertion-methods  - 93e284e, 886ba86, 0817dad, 93516a0
> 
> Security:
> 
> - The properties `__proto__`, `__defineGetter__`, `__defineSetter__` and `__lookupGetter__` 
>   have been added to the list of "properties that must be enumerable".
>   If a property by that name is found and not enumerable on its parent, 
>   it will silently evaluate to `undefined`. This is done in both the compiled template and the "lookup"-helper. 
>   This will prevent new Remote-Code-Execution exploits that have been
>   published recently.
> 
> Compatibility notes: 
> 
> - Due to the security-fixes. The semantics of the templates using
>   `__proto__`, `__defineGetter__`, `__defineSetter__` and `__lookupGetter__` in the respect that those expression now return 
>   `undefined` rather than their actual value from the proto.
> - The semantics have not changed in cases where the properties are  enumerable, as in:
> 
> ```js
> {
>   __proto__: 'some string'
> }
> ```
> 
> - The change may be breaking in that respect, but we still only 
>   increase the patch-version, because the incompatible use-cases
>   are not intended, undocumented and far less important than fixing
>   Remote-Code-Execution exploits on existing systems.
> 
> 
> 
> [Commits](https://github.com/wycats/handlebars.js/compare/v4.5.2...v4.5.3)
> 
> ## v4.5.2 - November 13th, 2019
> # Bugfixes
> 
> - fix: use String(field) in lookup when checking for "constructor" - d541378
> - test: add fluent API for testing Handlebars - c2ac79c
> 
> Compatibility notes:
> - no incompatibility are to be expected
></tr></table> ... (truncated)
</details>
<details>
<summary>Commits</summary>

- [`c819c8b`](https://github.com/wycats/handlebars.js/commit/c819c8b533934d2ac18001d7eb27a3205b00c2f3) v4.5.3
- [`827c9d0`](https://github.com/wycats/handlebars.js/commit/827c9d0747bef7d7f89829779523b6b2dcf3051d) Update release notes
- [`f7f05d7`](https://github.com/wycats/handlebars.js/commit/f7f05d7558e674856686b62a00cde5758f3b7a08) fix: add "no-prototype-builtins" eslint-rule and fix all occurences
- [`1988878`](https://github.com/wycats/handlebars.js/commit/198887808780bbef9dba67a8af68ece091d5baa7) fix: add more properties required to be enumerable
- [`886ba86`](https://github.com/wycats/handlebars.js/commit/886ba86c2f9cc71b7d99b9018fbe2d72a57085cc) test/chore: add chai/expect and sinon to "runtime"-environment
- [`0817dad`](https://github.com/wycats/handlebars.js/commit/0817dad7e72c51d07f7700547d0c69aa79a4976b) test: add sinon as global variable to eslint in the specs
- [`93516a0`](https://github.com/wycats/handlebars.js/commit/93516a0b07026ebd23c84fddf270a0c8b570bc59) test: add sinon.js for spies, deprecate current assertions
- [`93e284e`](https://github.com/wycats/handlebars.js/commit/93e284ed9be1e38c5e6945f15af1ccd689f2ada6) chore: add chai and dirty-chai for better test assertions
- [`c02b05f`](https://github.com/wycats/handlebars.js/commit/c02b05fa819f46bb66c878bebc6e8006408ebd5c) fix: use !== 0 instead of != 0
- [`8de121d`](https://github.com/wycats/handlebars.js/commit/8de121d21c88a6ab877e3a0eec9daaac483f3bf0) v4.5.2
- Additional commits viewable in [compare view](https://github.com/wycats/handlebars.js/compare/v4.0.11...v4.5.3)
</details>
<br />

[![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=handlebars&package-manager=npm_and_yarn&previous-version=4.0.11&new-version=4.5.3)](https://help.github.com/articles/configuring-automated-security-fixes)

Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.

[//]: # (dependabot-automerge-start)
[//]: # (dependabot-automerge-end)

---

<details>
<summary>Dependabot commands and options</summary>
<br />

You can trigger Dependabot actions by commenting on this PR:
- `@dependabot rebase` will rebase this PR
- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it
- `@dependabot merge` will merge this PR after your CI passes on it
- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it
- `@dependabot cancel merge` will cancel a previously requested merge and block automerging
- `@dependabot reopen` will reopen this PR if it is closed
- `@dependabot ignore this [patch|minor|major] version` will close this PR and stop Dependabot creating any more for this minor/major version (unless you reopen the PR or upgrade to it yourself)
- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)
- `@dependabot use these labels` will set the current labels as the default for future PRs for this repo and language
- `@dependabot use these reviewers` will set the current reviewers as the default for future PRs for this repo and language
- `@dependabot use these assignees` will set the current assignees as the default for future PRs for this repo and language
- `@dependabot use this milestone` will set the current milestone as the default for future PRs for this repo and language

You can disable automated security fix PRs for this repo from the [Security Alerts page](https://github.com/pedronauck/react-adopt/network/alerts).

</details>
I don't like React hooks. I understand them, and I understand the benefit in some situations, but have you written an async componentDidMount() type hook? It's a mess with nested closures and ending with empty brackets:

useEffect((() => async () => ...)(), [])

The intent of that is not clear at all, compared to the very descriptive "async componentWillMount()".

One of the "problems" hooks solve is actually not a problem - render props. When composed, I like this pattern better than hooks.

To sum up my rant, I was curious about the state of this project. It seems like the perfect solution.

 I also use Unstated, a simple library to share state between components. It has a similar way of composing containers.
Including react as a dependency causes this module to break on certain environments when using react hooks. This is because yarn/npm will resolve react-adopt's version of react _and_ any local react dependencies and include them _both_. This will happen in some Jest testing environments, as well.

This PR moves react to a peer dependency to avoid multiple versions of react existing in the same application/environment.
Hello there! 

I'm using React Adopt in a Graphql/Apollo website. The code works great on almost every browser. One exception happens with Chrome version 38. Users that have this version can't navigate the site because in the browser console they get the following error message:
```
Uncaught TypeError: undefined is not a function 
```
Clicking on the error I get to the following line in the code:
```js
if (!values(e).some(isValidRenderProp)) throw Error("The render props object mapper just accept valid elements as value");
```

I assume that this has to do something with the way I pass children to the queries used for the mapper object and this is one example:
```js
const productsQuery = ({ render, type }) => (
  <Query query={PRODUCT_QUERY} variables={{ type }}>
    {render}
  </Query>
);

const mapper = { productsQuery };

 <Adopt mapper={mapper}>
  /* code */
</Adopt>
```

I'm still investigating the issue to see if it happens on other browsers as well (currently using Hotjar to catch the error and Browser Stack to debug it) but I can already tell you that most browsers and versions do not have any issue with the code. Any help/suggestion would be very much appreciated. Apologies in advance if I didn't include enough details in the description, please let me know what you need to see and I'll respond with it right away.
I would like to use React Adopt with Formik and Apollo Client. I am getting initial form data in `getUser` but first time I am getting empty `data` object with `loading` flag, and when the result came back from server, `loading` flag turn to false and I get the result. Using following snippet, Formik always initialised with empty array, because rendering Formik doesn't wait for loading=false.

```js
const Composed = adopt({
  getUser: ({ render }) => <Query query={CURRENT_USER_PROFILE_QUERY} children={render}/>,
  updateUser: ({ render }) => <Mutation mutation={CURRENT_USER_UPDATE_MUTATION} 
                                            children={render}/>,
  form: ({ render, updateUser, getUser }) =>
        <Formik initialValues={{ ...formDefaultValue, ...getUser.data.me }} children={render} />,
    });
```

Without React Adopt my code looks like this:

```js
<Query query={CURRENT_USER_PROFILE_QUERY}>
  {({ loading, error, data }) => {
     if (!loading) return (
        <Formik initialValues={{ ...formDefaultValue, ...data.me }}>
```

How can I achieve it with React Adopt?
I tried to build the package locally.

`yarn install` && `yarn test` both passes, but `yarn build:prod` fails:
```
16:19 $ yarn build:prod
yarn run v1.12.3
$ yarn run fix
$ run-s fix:*
$ prettier "src/**/*.{ts,tsx}" --write
src/index.test.tsx 301ms
src/index.tsx 58ms
$ tslint -p ./
$ yarn build --compress
$ libundler build --ts --sourcemap --compress
‚ôªÔ∏è  Cleaning old files...
üöÄ  Start compiling...
‚†π Compiling src/index.tsx...
Error: src/index.tsx:3:38 - error TS2497: Module ''hoist-non-react-statics'' resolves to a non-module entity and cannot be imported using this construct.

3 import * as hoistNonReactStatic from 'hoist-non-react-statics'
                                       ~~~~~~~~~~~~~~~~~~~~~~~~~


error Command failed with exit code 1.
info Visit https://yarnpkg.com/en/docs/cli/run for documentation about this command.
error Command failed with exit code 1.
info Visit https://yarnpkg.com/en/docs/cli/run for documentation about this command.
```
Hi, today I tried to use `react-adopt` on Codepen served via `unpkg`.

I used this link: `https://unpkg.com/react-adopt@0.6.0/dist/index.umd.js` and got following error: `Uncaught ReferenceError: exports is not defined`.

It seems to me that umd bundle is broken but maybe I did miss something?


Consider the following code:

```
import * as React from 'react';
import { adopt, Mapper, MapProps } from 'react-adopt';
import { Mutation, Query } from 'react-apollo';

import { MY_QUERY, MY_MUTATION } from 'graphql/queries';

interface AdoptRenderProps {
    myQuery: string;
    myMutation: () => void;
}

interface AdoptProps {
    render?: any;
}

export default class Search extends React.Component<
    {},
    {
        token: string;
    }
> {
    state = {
        token: '',
    };

    public render(): JSX.Element {
        const mapper: Mapper<AdoptRenderProps, AdoptProps> = {
            myQuery: ({ render }) => <Query query={MY_QUERY}>{render}</Query>,
            myMutation: ({ render }) => (
                <Mutation mutation={MY_MUTATION}>
                    {(mutation, result) => render({ mutation, result })}
                </Mutation>
            ),
        };

        const mapProps: MapProps<AdoptRenderProps> = ({
            myQuery,
            myMutation,
        }) => ({
            myQuery: myQuery.data,
            myMutation: myMutation.mutation,
        });

        const Composed = adopt(mapper, mapProps);

        return (
            <Composed>
                {({ myQuery, myMutation }) => {
                    const { token } = this.state;
                    return (
                        <form>
                            <input
                                type="text"
                                value={token}
                                onChange={this.handleInputChange}
                            />
                        </form>
                    );
                }}
            </Composed>
        );
    }

    private handleInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {
        this.setState({
            token: e.target.value,
        });
    };
}
```

Input field focus in lost immediately after I type a letter.
First thing, I really like the API of this lib, however I've noticed that for every composed component `adopts` adds a discrete number of intermediary components that substantially increase the React tree depth.

```js
const Composed = adopt({
  one: ({ render }) => <One render={render} />,
  two: ({ render }) => <Two render={render} />,
});
// becomes
<Composed>
  <Adopt(one)(two)>
    <Adopt(one)>
      <Adopt>
        <one>
          <One>
            <two>
               <Two>
                 // children
```

This not only makes debugging the React tree harder, but if you start using it extensively to create several dozens of combined components the tree simply "explodes" and you might start having performance problems too. 

It would be great if `adopt` could do it's magic in just one layer:

```js
<Composed>
  <One>
    <Two>
      // children
```
