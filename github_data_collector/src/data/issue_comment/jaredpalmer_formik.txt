The diff isn't too clear on what changed, so here you go:
- Despite it's name -> Despite its name
- usecases -> use cases
- Turned `[useFormikContext]` into a link.
- Added line between text and warning.

Not sure if the `**` was meant to make the text bold or not?

-----
[View rendered docs/api/useFormik.md](https://github.com/stephan281094/formik/blob/patch-1/docs/api/useFormik.md)
Exposes the shouldValidate parameter from setFieldValue and setFieldTouched to useField's helpers object.

-----
[View rendered docs/api/useField.md](https://github.com/drivasperez/formik/blob/addparams/docs/api/useField.md)
I have a use case where I've disabled `validateOnChange` but wanted to run the validations using only `setValue` in case of a Checkbox as it only calls `onChange`. So I've added the support for `shouldValidate` in `FieldHelperProps`, i.e. `setValue` and `setTouched`.

Fixed Issue #2219 in this PR.

-----
[View rendered docs/api/useField.md](https://github.com/mrmuhammadali/formik/blob/master/docs/api/useField.md)

## üöÄ Feature request

### Current Behavior

The current behavior is to send relatively large chunks of information to the reducer. 

For instance when dealing with an array of values the change is sent for the entire array. HandleChange computes change when it instead it could be sent to the reducer.

Dispatch and state is in the same context.

### Desired Behavior

The desired behavior is to send "smaller" messages in order to let the reducer do the work.

Having dispatch and state in the same React context can if we believe [this post](https://kentcdodds.com/blog/how-to-use-react-context-effectively) impact performance.

### Suggested Solution

Send messages such as :

- 'ARRAY_PUSH'
- 'ARRAY_SWAP'
- 'ARRAY_MOVE'
- 'ARRAY_INSERT'
- 'ARRAY_REPLACE'
- 'ARRAY_UNSHIFT'
- 'ARRAY_REMOVE'
- 'CHECKBOX_FLIP'

That way ArrayHelpers could contain less state.

Split Formik React context into two parts.

### Who does this impact? Who is this for?

People who have very large forms using `FieldArray`. Removing return values from array helpers could change the API slightly. In order to avoid having an impact on people using specific parts of the FieldArray API you could have an alternate version with a slightly different API and a new name.

### Describe alternatives you've considered

Using a fork of Formik without regard for backwards compatibility (that can be used alongside Formik):
https://github.com/wallymathieu/formik-reimagined 

### Additional context



## üêõ Bug report

### Current Behavior
isValid returns true when the form is just rendered (i.e not dirty) as errors object is empty (no errors).

### Previous behavior
isValid depended on isInitialValid when not dirty, hence by default returned false.

Since isValid is meant to be used to make buttons and stuff disabled, now this change has brought a change. And provided, there are too many instances of isValid in an application, making the upgrade would require a lot of effort.

### Suggested solution(s)

Ideally, a form should not be valid when rendered as it requires some user interaction at the very least. Hence, when the form is not dirty, it should not be valid. 2 solutions:
1. Do not deprecate isInitialValid.
2. set isValid = false, when the form in not dirty. (But the user cannot change this behaviour, so we may need something like setIsValid?). 

Also, I think this deprecation detail should be added in the migrating docs. I found out this inconsistency after the tests failed :p 

### Your environment

<!-- PLEASE FILL THIS OUT -->

| Software         | Version(s) |
| ---------------- | ---------- |
| Formik           | 2.x
| React            | 16.8
| TypeScript       | 3.x
| Browser          | All
| npm/Yarn         | Both
| Operating System | MacOS

## üöÄ Feature request

### Current Behavior

The helper object returned by `useField` contains a `setTouched(isTouched)` method. That method accepts only the intended `isTouched` boolean value, and does not allow skipping validation while setting it.

### Desired Behavior

There is a `shouldValidate` parameter on form-wide `setFieldTouched(name, isTouched, shouldValidate)` method that allows skipping validation when updating this flag. Would be great to have the equivalent `shouldValidate` parameter on the field-specific helper `setTouched` method.

### Suggested Solution

Seems like this would be a straightforward pass-through to add in the helper function here: https://github.com/jaredpalmer/formik/blob/d71efdec147e94b66eba86ec17c715d0d4ef3d29/packages/formik/src/Formik.tsx#L893

I.e. could add the `shouldValidate` parameter to the arrow function and then passing it to the `setFieldTouched` method call.

### Who does this impact? Who is this for?

This would be handy for folks who are coding complex form inputs and are converting to use the `useField` hook.

### Describe alternatives you've considered

For now, the workaround is to get `form` object via `useFormikContext` and use the `setFieldTouched` method on that.

### Additional context

No extra notes to add.

Thanks for all the amazing work on Formik!

## üìñ Documentation

Sorry if the format is wrong, I just wanted to write my findings regarding the `validationSchema` prop.

I have an IBAN form input where I wanted to add a custom validation (aka `test`).

```jsx
const schema = object({
  iban: string().test('name', '', () => false), // no message
})

<Formik validationSchema={schema} ...
```

In this example the form will submit ignoring the iban test.

I'm not sure this is a bug in yup, as using `schema.isValid` works fine.

Thanks for making Formik!
As per comments on [here](https://github.com/jaredpalmer/formik/commit/e696e57c97a297b332be66515cbddfc8f4176321#r36783717), updated the signature of setError to take string instead of Value as param.