Much thanks for the new `breaks_width` function in response to #190.  Would there be any objection to supporting its use for `hms` as well?

``` r
library(hms)
library(ggplot2)

df <- data.frame(hours = 1:3, hms = hms(hours = 1:3))

ggplot(df, aes(x = hours, y = hms)) + 
  scale_y_time(breaks = scales::breaks_width(900))
#> Error in UseMethod("fullseq"): no applicable method for 'fullseq' applied to an object of class "c('hms', 'difftime')"
```

I made a simple change in a fork to add `fullseq.hms` and it appears to work fine.  
https://github.com/bhogan-mitre/scales/commit/70a55db66531f838e4735d2e24363c8c417efe09 I'm happy to submit as a PR if you're open to it.

Looking ahead, it would be nice to have more intuitive specification from `ggplot2::scale_*_time` similar to `date_breaks`.  Although I figured I'd start here.  Thanks for considering.

Using `scales 1.1.0`:

I get the following, to my eyes, unexpected result:

```
> percent(c(0.11111))
[1] "11%"
> percent(c(0.11111, 0.11))
[1] "11.11%" "11.00%"
> percent(c(0.111, 0.11))
[1] "11.100%" "11.000%"
> percent(c(0.111, 0.111))
[1] "11%" "11%"
```

So the depending on how many digits I provide something else happens, but this only occurs with multiple values. If I only provide a single value the result is always `11%` no matter how many decimal digits are provided.

Packages such as [prismatic](https://github.com/EmilHvitfeldt/prismatic) manipulate color properties such as lightness, saturation, and negation.

Adding these effects to `gradient_n_pal()` would allow _convenient_ manipulation of color palettes in [ggplot2](https://github.com/tidyverse/ggplot2) (i.e. `scale_color_viridis_c()`) and elsewhere.

```r
library(ggplot2)
library(scales)
library(prismatic)

# Example implementation
gradient_n_pal <- function (colours, values = NULL, space = "Lab", 
                            lighten = NULL, darken = NULL,
                            saturate = NULL, desaturate = NULL,
                            negate = FALSE) {
  if (!identical(space, "Lab")) {
    warning("Non Lab interpolation is deprecated", 
            call. = FALSE)
  }
  ramp <- colour_ramp(colours)
  force(values)
  function(x) {
    if (length(x) == 0) 
      return(character())
    if (!is.null(values)) {
      xs <- seq(0, 1, length.out = length(values))
      f <- stats::approxfun(values, xs)
      x <- f(x)
    }
    pal <- ramp(x)
    
    if (!is.null(lighten))    pal <- prismatic::clr_lighten(pal, lighten)
    if (!is.null(darken))     pal <- prismatic::clr_darken(pal, darken)
    if (!is.null(saturate))   pal <- prismatic::clr_saturate(pal, saturate)
    if (!is.null(desaturate)) pal <- prismatic::clr_desaturate(pal, desaturate)
    if (negate)     pal <- prismatic::clr_negate(pal)
    
    pal
  }
}

# Example ggplot2 scale function
scale_color_viridis_c <- function (..., alpha = 1, begin = 0, end = 1, direction = 1, 
          option = "D", values = NULL, space = "Lab", na.value = "grey50", 
          guide = "colourbar", aesthetics = "colour",
          lighten = NULL, darken = NULL,
          saturate = NULL, desaturate = NULL,
          negate = FALSE) 
{
  continuous_scale(aesthetics, "viridis_c", 
                   gradient_n_pal(viridis_pal(alpha, begin, end, direction, option)(6), 
                                  values, space, 
                                  lighten = lighten, darken = darken,
                                  saturate = saturate, desaturate = desaturate,
                                  negate = negate),
                   na.value = na.value, 
                   guide = guide, ...)
}

# Possible uses
ggplot(diamonds) +
  stat_density_2d(aes(price, carat, fill = stat(density)), geom = "raster", contour = FALSE) +
  scale_color_viridis_c(aesthetics = "fill", direction = -1, negate = TRUE)
```
![image](https://user-images.githubusercontent.com/16291809/69353330-f5899c80-0c43-11ea-8d42-e892a984d827.png)

```r
library(dplyr)

diamonds %>%
  group_by(color) %>%
  summarize_at(vars(carat), mean) %>%
  ungroup() %>%
  ggplot(aes(color, carat, fill = carat)) +
  geom_col() +
  scale_color_viridis_c(aesthetics = "fill",
                        option = "A",
                        begin = 0.15,
                        end = 0.9,
                        desaturate = 0.7)
```
![image](https://user-images.githubusercontent.com/16291809/69353344-fa4e5080-0c43-11ea-85a6-8a534d0ccf6e.png)

Proposed fix for #234.
**TLDR:** `label_number_si()` is currently using [short scale prefixes](https://en.wikipedia.org/wiki/Long_and_short_scales) instead of [SI prefixes](https://en.wikipedia.org/wiki/Metric_prefix#List_of_SI_prefixes).

If you'd like to keep the old version of the function, please let me know what the new name should be and I can add it to this PR (e.g. `label_number_short_scale()`). I could also add a version for the long scale prefixes, if desired?

Here's what changed:
- Adjusted the `label_number_si()` function so that it uses SI prefixes
- Fixed docs to use `1e3` instead of `10e3`, etc
- Added example to demonstrate prefixes for values < 1
- Added a couple of new tests


Thanks for this release. It looks like it delivers great improvements.

The `label_number_si()` uses [short scale (English) prefixes](https://en.m.wikipedia.org/wiki/Long_and_short_scales) instead of [SI prefixes](https://en.m.wikipedia.org/wiki/Metric_prefix). The naming is confusing, since with that function name I would expect labels like "1k, 1M, 1G".

In several European countries 1 billion is 1 million millions. As far as I know there is no SI agreement on what a billion is, and the SI recommends using metric prefixes (1G for 1E9).

Also, the documentation for that function states 10e9, when it means 1e9 ("e" means "multiplied by 10 to the power of").

Either there is a rationale I am missing or without a breaking change this behaviour will last for a long time... If that's the case I hope there is an early bugfix release that breaks backwards compatibility...

Thanks again!
## Summary
The notation with 10 as a power index is [often discussed](https://stackoverflow.com/questions/10762287/how-can-i-format-axis-labels-with-exponents-with-ggplot2-and-scales).
Therefore, I thought it is useful to include this notation in `scales` package and implemented it.

## Example
```r
> scientific(1:10)
 [1] "1e+00" "2e+00" "3e+00" "4e+00" "5e+00" "6e+00" "7e+00" "8e+00" "9e+00" "1e+01"

> scientific(0:10, exponent="10", exact_zero = FALSE)
expression(0 %*% 10^00, 1 %*% 10^00, 2 %*% 10^00, 3 %*% 10^00, 
    4 %*% 10^00, 5 %*% 10^00, 6 %*% 10^00, 7 %*% 10^00, 8 %*% 10^00, 
    9 %*% 10^00, 1 %*% 10^01)

> scientific(0:10, exponent="10", exact_zero = TRUE)
expression(0, 1 %*% 10^00, 2 %*% 10^00, 3 %*% 10^00, 4 %*% 10^00, 
    5 %*% 10^00, 6 %*% 10^00, 7 %*% 10^00, 8 %*% 10^00, 9 %*% 10^00, 
    1 %*% 10^01)
```
I'm not sure if this should be fixed, but it does lead to some confusing behaviour (tidyverse/ggplot2#980):

``` r
library(scales)

trans <- sqrt_trans()
trans$inverse(-2)
#> [1] 4
trans$transform(4)
#> [1] 2

trans <- sqrt_trans()
trans$inverse(-2)
#> [1] 4

# this is what I would expect to happen
trans2 <- trans_new("sqrt2", sqrt, function(x) ifelse(x < 0, NA_real_, x^2), domain = c(0, Inf))
trans2$inverse(-2)
#> [1] NA
```

<sup>Created on 2019-06-25 by the [reprex package](https://reprex.tidyverse.org) (v0.2.1)</sup>
There currently isn't any break, label, or trans functions for difftime objects. There are some excellent functions that do this for difftimes in the **bench** package that could be used for inspiration:

https://github.com/r-lib/bench/blob/3e5d63fbe263f3ced4b61715f21b951361bfef77/R/time.R

And some combination of these functions could be used to generate difftime breaks even for log scales (see r-lib/bench#50)


Some ranges seem to break the calculation of the breaks/tickmarks for these transformed axes:
It works for `y <- 1:3`, `Â y <- (-10):-7`, e.g., but I haven't found an example with more than 4 values that worked ... ?!?

``` r
library(ggplot2)
df <- data.frame(x = 1:10)

ggplot(df, aes(x, 1)) + 
  geom_blank() +
  scale_x_continuous(trans = scales::exp_trans())
#> Warning in self$trans$inverse(limits): NaNs produced
#> Error in if (zero_range(as.numeric(limits))) {: missing value where TRUE/FALSE needed

ggplot(df, aes(x, 1)) + 
  geom_blank() +
  scale_x_continuous(trans = scales::logit_trans())
#> Warning in qfun(x, ...): NaNs produced
#> Warning: Transformation introduced infinite values in continuous x-axis
```

![](https://i.imgur.com/h79dyDY.png)

<sup>Created on 2019-10-31 by the [reprex package](https://reprex.tidyverse.org) (v0.3.0)</sup>