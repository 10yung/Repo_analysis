
[censored]>cargo run --release
    Finished release [optimized] target(s) in 0.12s
     Running `[censored]\robinson-master\robinson-master\target\rel
ease\robinson.exe`
thread 'main' panicked at 'called `Result::unwrap()` on an `Err` value: Os { cod
e: 3, kind: NotFound, message: "The system cannot find the path specified." }',
libcore\result.rs:945:5
note: Run with `RUST_BACKTRACE=1` for a backtrace.
error: process didn't exit successfully: `[censored]\robinson-maste
r\robinson-master\target\release\robinson.exe` (exit code: 101)
I wish I had written below. :(
1-) If either c was written in c ++ or python. now i will learn rust but i get
2-) I would like to add a screenshot or Intro video

https://github.com/mbrubeck/robinson/blob/474a2b48c8d9ea83e68821eb43f6f53001743b6d/src/pdf.rs#L33

FIXME
So I've implemented basic `link` support. I'm pretty sure you don't want to merge it because you don't want this toy browser to grow uncontrollably. But I wanted to leave it here and discuss a little bit.

So the tricky thing here is that I implemented `get_elements_by_tag_name` on `Node`. But it is not a `Node` method but rather `Element` method. But `Element` itself in our case (`ElementData`) does not have `children` available.
I'm not really sure what to think about the relationship between `Element` and `Node`. It's like `Element` is a type of `Node` but with limited functionality. It's not inheritance either.

I checked and servo's `Element` simply has `Node` inside of it. And

``` rust
    fn GetElementsByTagName(self, localname: DOMString) -> Temporary<HTMLCollection> {
        let window = window_from_node(self).root();
        HTMLCollection::by_tag_name(*window, NodeCast::from_ref(self), localname)
    }
```

is casting `Element` onto `Node`. Is this cast something more than just `self.node`?
