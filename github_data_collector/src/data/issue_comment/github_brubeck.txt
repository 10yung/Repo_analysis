This fixes build errors (unknown size of ctx) on distributions that use OpenSSL 1.1.*, which includes Ubuntu Bionic.
see problem manifestation description in: https://github.com/github/brubeck/issues/42, https://github.com/github/brubeck/issues/56

nature of the fix - ensure that code does not iterate thru elements that either have not been initialized or have residual values from previous `recvmmsg` call
I propose adding support for environment variable config substitutions, using a bask-like syntax, to obviate the need for any external config template solutions when using brubeck in a container deployment, where environment variables are the norm.

This feature is toggled via BRUBECK_CONFIG_SUBSTITUTE_ENV so users may opt-in to this behavior, since any config using this syntax is not technically valid json and could theoretically be a breaking change, though unlikely in practice.

A simple local test case does the right thing, and is valgrind-clean:

```
$ GRAPHITE_SERVER=foo GRAPHITE_PORT=1234 BRUBECK_CONFIG_SUBSTITUTE_ENV=1 valgrind ./brubeck --conf brubeck.json
==21044== Memcheck, a memory error detector
==21044== Copyright (C) 2002-2013, and GNU GPL'd, by Julian Seward et al.
==21044== Using Valgrind-3.10.1 and LibVEX; rerun with -h for copyright info
==21044== Command: ./brubeck --conf brubeck.json
==21044==
instance=(null) replaced config GRAPHITE_SERVER with foo from environment
instance=(null) replaced config GRAPHITE_PORT with 1234 from environment
[FATAL]: failed to resolve address 'foo'
==21044==
==21044== HEAP SUMMARY:
==21044==     in use at exit: 1,064,806 bytes in 206 blocks
==21044==   total heap usage: 1,316 allocs, 1,110 frees, 1,152,072 bytes allocated
==21044==
==21044== LEAK SUMMARY:
==21044==    definitely lost: 776 bytes in 1 blocks
==21044==    indirectly lost: 4,930 bytes in 95 blocks
==21044==      possibly lost: 1,232 bytes in 35 blocks
==21044==    still reachable: 1,057,868 bytes in 75 blocks
==21044==         suppressed: 0 bytes in 0 blocks
==21044== Rerun with --leak-check=full to see details of leaked memory
==21044==
==21044== For counts of detected and suppressed errors, rerun with: -v
==21044== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
```

and

```
$ cat brubeck.json
{
    "sharding" : false,
    "server_name" : "brubeck",
    "dumpfile" : "/var/log/brubeck/brubeck.dump",
    "capacity" : 15,
    "expire" : 2147483647,
    "http" : ":8080",

    "backends" : [
        {
            "type" : "carbon",
            "address" : "${GRAPHITE_SERVER}",
            "port" : ${GRAPHITE_PORT},
            "frequency" : 60
        }
    ],

    "samplers" : [
        {
            "type" : "statsd",
            "address" : "0.0.0.0",
            "port" : 8126,
            "workers" : 4,
            "multisock" : true,
            "multimsg" : 1
        }
    ]
}
```
By default, the http endpoint is started on the IPv4 wildcard address.
It may be desirable to restrict this to a specific address (see issue #58).
Clearly state that sampling is supported.
Allows for creating a debian package.. 
Trying to create a debian package for this.. and default it runs make test..

Which has failed tests.. perhaps because of this (from compile step):
```
gcc -g -Wall -O3 -Wno-strict-aliasing -Isrc -Ivendor/ck/include -DNDEBUG=1 -DGIT_SHA=\"2536347\" -DBRUBECK_HAVE_MICROHTTPD -c src/http.c -o src/http.o
src/http.c: In function ‘expire_metric’:
src/http.c:67:3: warning: ‘MHD_create_response_from_data’ is deprecated [-Wdeprecated-declarations]
   return MHD_create_response_from_data(
   ^
In file included from src/http.c:4:0:
/usr/include/microhttpd.h:2022:1: note: declared here
 MHD_create_response_from_data (size_t size,
 ^
src/http.c: In function ‘send_metric’:
src/http.c:100:3: warning: ‘MHD_create_response_from_data’ is deprecated [-Wdeprecated-declarations]
   return MHD_create_response_from_data(
   ^
In file included from src/http.c:4:0:
/usr/include/microhttpd.h:2022:1: note: declared here
 MHD_create_response_from_data (size_t size,
 ^
src/http.c: In function ‘send_stats’:
src/http.c:177:2: warning: ‘MHD_create_response_from_data’ is deprecated [-Wdeprecated-declarations]
  return MHD_create_response_from_data(
  ^
In file included from src/http.c:4:0:
/usr/include/microhttpd.h:2022:1: note: declared here
 MHD_create_response_from_data (size_t size,
 ^
src/http.c: In function ‘send_ping’:
src/http.c:210:2: warning: ‘MHD_create_response_from_data’ is deprecated [-Wdeprecated-declarations]
  return MHD_create_response_from_data(
  ^
In file included from src/http.c:4:0:
/usr/include/microhttpd.h:2022:1: note: declared here
 MHD_create_response_from_data (size_t size,
 ^
src/http.c: In function ‘handle_request’:
src/http.c:244:3: warning: ‘MHD_create_response_from_data’ is deprecated [-Wdeprecated-declarations]
   response = MHD_create_response_from_data(
   ^
In file included from src/http.c:4:0:
/usr/include/microhttpd.h:2022:1: note: declared here
 MHD_create_response_from_data (size_t size,
 ^
gcc -g -Wall -O3 -Wno-strict-aliasing -Isrc -Ivendo
```

Test output:
```
== Entering suite #1, "histogram: time/data series aggregation" ==

[1:1]  test_histogram__single_element:#1  "histogram size"  pass
[1:2]  test_histogram__single_element:#2  "histogram value count"  pass
[1:3]  test_histogram__single_element:#3  "sample.min"  pass
[1:4]  test_histogram__single_element:#4  "sample.max"  pass
[1:5]  test_histogram__single_element:#5  "sample.percentile[3]"  pass
[1:6]  test_histogram__single_element:#6  "sample.mean"  pass
[1:7]  test_histogram__single_element:#7  "sample.count"  pass
[1:8]  test_histogram__single_element:#8  "sample.sum"  pass
[1:9]  test_histogram__large_range:#1  "sample.min"  pass
[1:10]  test_histogram__large_range:#2  "sample.max"  pass
[1:11]  test_histogram__large_range:#3  "sample.median"  pass
[1:12]  test_histogram__multisamples:#1  "histogram size"  pass
[1:13]  test_histogram__multisamples:#2  "histogram value count"  pass
[1:14]  test_histogram__multisamples:#3  "sample.min"  pass
[1:15]  test_histogram__multisamples:#4  "sample.max"  pass
[1:16]  test_histogram__multisamples:#5  "sample.percentile[3]"  FAIL
!    Type:      fail-unless
!    Condition: sample.percentile[3] == 127.0
!    Line:      105
[1:17]  test_histogram__multisamples:#6  "sample.mean"  pass
[1:18]  test_histogram__multisamples:#7  "sample.count"  pass
[1:19]  test_histogram__multisamples:#8  "sample.sum"  pass
[1:20]  test_histogram__multisamples:#9  "histogram size"  pass
[1:21]  test_histogram__multisamples:#10  "histogram value count"  pass
[1:22]  test_histogram__multisamples:#11  "sample.min"  pass
[1:23]  test_histogram__multisamples:#12  "sample.max"  pass
[1:24]  test_histogram__multisamples:#13  "sample.percentile[3]"  FAIL
!    Type:      fail-unless
!    Condition: sample.percentile[3] == 127.0
!    Line:      105
[1:25]  test_histogram__multisamples:#14  "sample.mean"  pass
[1:26]  test_histogram__multisamples:#15  "sample.count"  pass
[1:27]  test_histogram__multisamples:#16  "sample.sum"  pass
[1:28]  test_histogram__multisamples:#17  "histogram size"  pass
[1:29]  test_histogram__multisamples:#18  "histogram value count"  pass
[1:30]  test_histogram__multisamples:#19  "sample.min"  pass
[1:31]  test_histogram__multisamples:#20  "sample.max"  pass
[1:32]  test_histogram__multisamples:#21  "sample.percentile[3]"  FAIL
!    Type:      fail-unless
!    Condition: sample.percentile[3] == 127.0
!    Line:      105
[1:33]  test_histogram__multisamples:#22  "sample.mean"  pass
[1:34]  test_histogram__multisamples:#23  "sample.count"  pass
[1:35]  test_histogram__multisamples:#24  "sample.sum"  pass
[1:36]  test_histogram__multisamples:#25  "histogram size"  pass
[1:37]  test_histogram__multisamples:#26  "histogram value count"  pass
[1:38]  test_histogram__multisamples:#27  "sample.min"  pass
[1:39]  test_histogram__multisamples:#28  "sample.max"  pass
[1:40]  test_histogram__multisamples:#29  "sample.percentile[3]"  FAIL
!    Type:      fail-unless
!    Condition: sample.percentile[3] == 127.0
!    Line:      105
[1:41]  test_histogram__multisamples:#30  "sample.mean"  pass
[1:42]  test_histogram__multisamples:#31  "sample.count"  pass
[1:43]  test_histogram__multisamples:#32  "sample.sum"  pass
[1:44]  test_histogram__multisamples:#33  "histogram size"  pass
[1:45]  test_histogram__multisamples:#34  "histogram value count"  pass
[1:46]  test_histogram__multisamples:#35  "sample.min"  pass
[1:47]  test_histogram__multisamples:#36  "sample.max"  pass
[1:48]  test_histogram__multisamples:#37  "sample.percentile[3]"  FAIL
!    Type:      fail-unless
!    Condition: sample.percentile[3] == 127.0
!    Line:      105
[1:49]  test_histogram__multisamples:#38  "sample.mean"  pass
[1:50]  test_histogram__multisamples:#39  "sample.count"  pass
[1:51]  test_histogram__multisamples:#40  "sample.sum"  pass
[1:52]  test_histogram__multisamples:#41  "histogram size"  pass
[1:53]  test_histogram__multisamples:#42  "histogram value count"  pass
[1:54]  test_histogram__multisamples:#43  "sample.min"  pass
[1:55]  test_histogram__multisamples:#44  "sample.max"  pass
[1:56]  test_histogram__multisamples:#45  "sample.percentile[3]"  FAIL
!    Type:      fail-unless
!    Condition: sample.percentile[3] == 127.0
!    Line:      105
[1:57]  test_histogram__multisamples:#46  "sample.mean"  pass
[1:58]  test_histogram__multisamples:#47  "sample.count"  pass
[1:59]  test_histogram__multisamples:#48  "sample.sum"  pass
[1:60]  test_histogram__multisamples:#49  "histogram size"  pass
[1:61]  test_histogram__multisamples:#50  "histogram value count"  pass
[1:62]  test_histogram__multisamples:#51  "sample.min"  pass
[1:63]  test_histogram__multisamples:#52  "sample.max"  pass
[1:64]  test_histogram__multisamples:#53  "sample.percentile[3]"  FAIL
!    Type:      fail-unless
!    Condition: sample.percentile[3] == 127.0
!    Line:      105
[1:65]  test_histogram__multisamples:#54  "sample.mean"  pass
[1:66]  test_histogram__multisamples:#55  "sample.count"  pass
[1:67]  test_histogram__multisamples:#56  "sample.sum"  pass
[1:68]  test_histogram__multisamples:#57  "histogram size"  pass
[1:69]  test_histogram__multisamples:#58  "histogram value count"  pass
[1:70]  test_histogram__multisamples:#59  "sample.min"  pass
[1:71]  test_histogram__multisamples:#60  "sample.max"  pass
[1:72]  test_histogram__multisamples:#61  "sample.percentile[3]"  FAIL
!    Type:      fail-unless
!    Condition: sample.percentile[3] == 127.0
!    Line:      105
[1:73]  test_histogram__multisamples:#62  "sample.mean"  pass
[1:74]  test_histogram__multisamples:#63  "sample.count"  pass
[1:75]  test_histogram__multisamples:#64  "sample.sum"  pass
[1:76]  test_histogram__with_sample_rate:#1  "histogram size"  pass
[1:77]  test_histogram__with_sample_rate:#2  "histogram value count"  pass
[1:78]  test_histogram__with_sample_rate:#3  "sample.min"  pass
[1:79]  test_histogram__with_sample_rate:#4  "sample.max"  pass
[1:80]  test_histogram__with_sample_rate:#5  "sample.percentile[3]"  FAIL
!    Type:      fail-unless
!    Condition: sample.percentile[3] == 127.0
!    Line:      130
[1:81]  test_histogram__with_sample_rate:#6  "sample.mean"  pass
[1:82]  test_histogram__with_sample_rate:#7  "sample.count"  pass
[1:83]  test_histogram__with_sample_rate:#8  "sample.sum"  pass
[1:84]  test_histogram__capacity:#1  "histogram size"  pass
[1:85]  test_histogram__capacity:#2  "histogram value count"  pass
[1:86]  test_histogram__capacity:#3  "sample.min"  pass
[1:87]  test_histogram__capacity:#4  "sample.max"  pass
[1:88]  test_histogram__capacity:#5  "sample.count"  pass
[1:89]  test_histogram__capacity:#6  "histogram size"  pass
[1:90]  test_histogram__capacity:#7  "histogram value count"  pass
[1:91]  test_histogram__capacity:#8  "sample.min"  pass
[1:92]  test_histogram__capacity:#9  "sample.max"  pass
[1:93]  test_histogram__capacity:#10  "sample.count"  pass

--> 93 check(s), 84 ok, 9 failed (9.68%)

== Entering suite #2, "mstore: concurrency test for metrics hash table" ==

[2:1]  test_mstore__save:#1  "stored 15000 metrics in table"  pass
[2:2]  test_mstore__save:#2  "lookup all metrics from table"  pass

--> 2 check(s), 2 ok, 0 failed (0.00%)

== Entering suite #3, "atomic: atomic primitives" ==

[3:1]  test_atomic_spinlocks:#1  "spinlock doesn't race"  pass

--> 1 check(s), 1 ok, 0 failed (0.00%)

== Entering suite #4, "ftoa: double-to-string conversion" ==

[4:1]  test_ftoa:#1  "0"  pass
[4:2]  test_ftoa:#2  "15"  pass
[4:3]  test_ftoa:#3  "15.5"  pass
[4:4]  test_ftoa:#4  "15.505"  pass
[4:5]  test_ftoa:#5  "0.125"  pass
[4:6]  test_ftoa:#6  "1234.567"  pass
[4:7]  test_ftoa:#7  "100000"  pass
[4:8]  test_ftoa:#8  "0.999"  pass

--> 8 check(s), 8 ok, 0 failed (0.00%)

== Entering suite #5, "statsd: packet parsing" ==

[5:1]  test_statsd_msg__parse_strings:#1  "github.auth.fingerprint.sha1:1|c"  pass
[5:2]  test_statsd_msg__parse_strings:#2  "msg.value == expected"  pass
[5:3]  test_statsd_msg__parse_strings:#3  "msg.sample_rate == expected"  pass
[5:4]  test_statsd_msg__parse_strings:#4  "msg.modifiers == expected"  pass
[5:5]  test_statsd_msg__parse_strings:#5  "github.auth.fingerprint.sha1:1|c|@0.1"  pass
[5:6]  test_statsd_msg__parse_strings:#6  "msg.value == expected"  pass
[5:7]  test_statsd_msg__parse_strings:#7  "msg.sample_rate == expected"  pass
[5:8]  test_statsd_msg__parse_strings:#8  "msg.modifiers == expected"  pass
[5:9]  test_statsd_msg__parse_strings:#9  "github.auth.fingerprint.sha1:1|g"  pass
[5:10]  test_statsd_msg__parse_strings:#10  "msg.value == expected"  pass
[5:11]  test_statsd_msg__parse_strings:#11  "msg.sample_rate == expected"  pass
[5:12]  test_statsd_msg__parse_strings:#12  "msg.modifiers == expected"  pass
[5:13]  test_statsd_msg__parse_strings:#13  "lol:1|ms"  pass
[5:14]  test_statsd_msg__parse_strings:#14  "msg.value == expected"  pass
[5:15]  test_statsd_msg__parse_strings:#15  "msg.sample_rate == expected"  pass
[5:16]  test_statsd_msg__parse_strings:#16  "msg.modifiers == expected"  pass
[5:17]  test_statsd_msg__parse_strings:#17  "this.is.sparta:199812|C"  pass
[5:18]  test_statsd_msg__parse_strings:#18  "msg.value == expected"  pass
[5:19]  test_statsd_msg__parse_strings:#19  "msg.sample_rate == expected"  pass
[5:20]  test_statsd_msg__parse_strings:#20  "msg.modifiers == expected"  pass
[5:21]  test_statsd_msg__parse_strings:#21  "this.is.sparta:0012|h"  pass
[5:22]  test_statsd_msg__parse_strings:#22  "msg.value == expected"  pass
[5:23]  test_statsd_msg__parse_strings:#23  "msg.sample_rate == expected"  pass
[5:24]  test_statsd_msg__parse_strings:#24  "msg.modifiers == expected"  pass
[5:25]  test_statsd_msg__parse_strings:#25  "this.is.sparta:23.23|g"  pass
[5:26]  test_statsd_msg__parse_strings:#26  "msg.value == expected"  pass
[5:27]  test_statsd_msg__parse_strings:#27  "msg.sample_rate == expected"  pass
[5:28]  test_statsd_msg__parse_strings:#28  "msg.modifiers == expected"  pass
[5:29]  test_statsd_msg__parse_strings:#29  "this.is.sparta:0.232030|g"  pass
[5:30]  test_statsd_msg__parse_strings:#30  "msg.value == expected"  pass
[5:31]  test_statsd_msg__parse_strings:#31  "msg.sample_rate == expected"  pass
[5:32]  test_statsd_msg__parse_strings:#32  "msg.modifiers == expected"  pass
[5:33]  test_statsd_msg__parse_strings:#33  "this.are.some.floats:1234567.89|g"  pass
[5:34]  test_statsd_msg__parse_strings:#34  "msg.value == expected"  pass
[5:35]  test_statsd_msg__parse_strings:#35  "msg.sample_rate == expected"  pass
[5:36]  test_statsd_msg__parse_strings:#36  "msg.modifiers == expected"  pass
[5:37]  test_statsd_msg__parse_strings:#37  "this.are.some.floats:1234567.89|g|@0.025"  pass
[5:38]  test_statsd_msg__parse_strings:#38  "msg.value == expected"  pass
[5:39]  test_statsd_msg__parse_strings:#39  "msg.sample_rate == expected"  pass
[5:40]  test_statsd_msg__parse_strings:#40  "msg.modifiers == expected"  pass
[5:41]  test_statsd_msg__parse_strings:#41  "this.are.some.floats:1234567.89|g|@0.25"  pass
[5:42]  test_statsd_msg__parse_strings:#42  "msg.value == expected"  pass
[5:43]  test_statsd_msg__parse_strings:#43  "msg.sample_rate == expected"  pass
[5:44]  test_statsd_msg__parse_strings:#44  "msg.modifiers == expected"  pass
[5:45]  test_statsd_msg__parse_strings:#45  "this.are.some.floats:1234567.89|g|@0.01"  pass
[5:46]  test_statsd_msg__parse_strings:#46  "msg.value == expected"  pass
[5:47]  test_statsd_msg__parse_strings:#47  "msg.sample_rate == expected"  pass
[5:48]  test_statsd_msg__parse_strings:#48  "msg.modifiers == expected"  pass
[5:49]  test_statsd_msg__parse_strings:#49  "this.are.some.floats:1234567.89|g|@000.0100"  pass
[5:50]  test_statsd_msg__parse_strings:#50  "msg.value == expected"  pass
[5:51]  test_statsd_msg__parse_strings:#51  "msg.sample_rate == expected"  pass
[5:52]  test_statsd_msg__parse_strings:#52  "msg.modifiers == expected"  pass
[5:53]  test_statsd_msg__parse_strings:#53  "this.are.some.floats:1234567.89|g|@1.0"  pass
[5:54]  test_statsd_msg__parse_strings:#54  "msg.value == expected"  pass
[5:55]  test_statsd_msg__parse_strings:#55  "msg.sample_rate == expected"  pass
[5:56]  test_statsd_msg__parse_strings:#56  "msg.modifiers == expected"  pass
[5:57]  test_statsd_msg__parse_strings:#57  "this.are.some.floats:1234567.89|g|@1"  pass
[5:58]  test_statsd_msg__parse_strings:#58  "msg.value == expected"  pass
[5:59]  test_statsd_msg__parse_strings:#59  "msg.sample_rate == expected"  pass
[5:60]  test_statsd_msg__parse_strings:#60  "msg.modifiers == expected"  pass
[5:61]  test_statsd_msg__parse_strings:#61  "this.are.some.floats:1234567.89|g|@1."  pass
[5:62]  test_statsd_msg__parse_strings:#62  "msg.value == expected"  pass
[5:63]  test_statsd_msg__parse_strings:#63  "msg.sample_rate == expected"  pass
[5:64]  test_statsd_msg__parse_strings:#64  "msg.modifiers == expected"  pass
[5:65]  test_statsd_msg__parse_strings:#65  "this.are.some.floats:|g"  pass
[5:66]  test_statsd_msg__parse_strings:#66  "msg.value == expected"  pass
[5:67]  test_statsd_msg__parse_strings:#67  "msg.sample_rate == expected"  pass
[5:68]  test_statsd_msg__parse_strings:#68  "msg.modifiers == expected"  pass
[5:69]  test_statsd_msg__parse_strings:#69  "this.are.some.floats:1234567.89|g"  pass
[5:70]  test_statsd_msg__parse_strings:#70  "msg.value == expected"  pass
[5:71]  test_statsd_msg__parse_strings:#71  "msg.sample_rate == expected"  pass
[5:72]  test_statsd_msg__parse_strings:#72  "msg.modifiers == expected"  pass
[5:73]  test_statsd_msg__parse_strings:#73  "gauge.increment:+1|g"  pass
[5:74]  test_statsd_msg__parse_strings:#74  "msg.value == expected"  pass
[5:75]  test_statsd_msg__parse_strings:#75  "msg.sample_rate == expected"  pass
[5:76]  test_statsd_msg__parse_strings:#76  "msg.modifiers == expected"  pass
[5:77]  test_statsd_msg__parse_strings:#77  "gauge.decrement:-1|g"  pass
[5:78]  test_statsd_msg__parse_strings:#78  "msg.value == expected"  pass
[5:79]  test_statsd_msg__parse_strings:#79  "msg.sample_rate == expected"  pass
[5:80]  test_statsd_msg__parse_strings:#80  "msg.modifiers == expected"  pass
[5:81]  test_statsd_msg__parse_strings:#81  "this.are.some.floats:12.89.23|g"  pass
[5:82]  test_statsd_msg__parse_strings:#82  "this.are.some.floats:12.89|a"  pass
[5:83]  test_statsd_msg__parse_strings:#83  "this.are.some.floats:12.89|msdos"  pass
[5:84]  test_statsd_msg__parse_strings:#84  "this.are.some.floats:12.89g|g"  pass
[5:85]  test_statsd_msg__parse_strings:#85  "this.are.some.floats:12.89|"  pass
[5:86]  test_statsd_msg__parse_strings:#86  "this.are.some.floats:12.89"  pass
[5:87]  test_statsd_msg__parse_strings:#87  "this.are.some.floats:12.89 |g"  pass
[5:88]  test_statsd_msg__parse_strings:#88  "this.are.some.floats|g"  pass
[5:89]  test_statsd_msg__parse_strings:#89  "this.are.some.floats:1.0|g|1.0"  pass
[5:90]  test_statsd_msg__parse_strings:#90  "this.are.some.floats:1.0|g|0.1"  pass
[5:91]  test_statsd_msg__parse_strings:#91  "this.are.some.floats:1.0|g|@0.1.1"  pass
[5:92]  test_statsd_msg__parse_strings:#92  "this.are.some.floats:1.0|g|@0.1@"  pass
[5:93]  test_statsd_msg__parse_strings:#93  "this.are.some.floats:1.0|g|@0.1125.2"  pass
[5:94]  test_statsd_msg__parse_strings:#94  "this.are.some.floats:1.0|g|@0.1125.2"  pass
[5:95]  test_statsd_msg__parse_strings:#95  "this.are.some.floats:1.0|g|@1.23"  pass
[5:96]  test_statsd_msg__parse_strings:#96  "this.are.some.floats:1.0|g|@3.0"  pass
[5:97]  test_statsd_msg__parse_strings:#97  "this.are.some.floats:1.0|g|@-3.0"  pass
[5:98]  test_statsd_msg__parse_strings:#98  "this.are.some.floats:1.0|g|@-1.0"  pass
[5:99]  test_statsd_msg__parse_strings:#99  "this.are.some.floats:1.0|g|@-0.23"  pass
[5:100]  test_statsd_msg__parse_strings:#100  "this.are.some.floats:1.0|g|@0.0"  pass
[5:101]  test_statsd_msg__parse_strings:#101  "this.are.some.floats:1.0|g|@0"  pass

--> 101 check(s), 101 ok, 0 failed (0.00%)

==> 205 check(s) in 5 suite(s) finished after 0.00 second(s),
    196 succeeded, 9 failed (4.39%)

[FAILURE]
Makefile:56: recipe for target 'test' failed
make: *** [test] Error 1
```
config.json:

```
{
  ...
  "http" : "127.0.0.1:8080",
  ...
}
```

**Expected**: brubeck should bind only to the loopback interface / 127.0.0.1.

**Actual**: brubeck binds it's http listener on all interfaces (see `*:8080` below)
```
[localhost]# ss -tulpn | grep brubeck
udp    UNCONN     0      0      127.0.0.1:8125     *:*     users:(("brubeck",pid=27614,fd=6))
tcp    LISTEN     0      32     *:8080             *:*     users:(("brubeck",pid=27614,fd=7))
```

Possible fix is to parse out the address from the "http" bind string and pass along as MHD_OPTION_SOCK_ADDR in `brubeck_http_endpoint_init`.

See https://github.com/github/brubeck/blob/c3b66aa89e224598c0ff9312e88619752c7988d8/src/http.c#L258
Hi
Seems like brubeck got overflow, when handling gauge-value more, than 2^32 (4294967296).

(I did not find in statsd specification max values for gauge:
https://github.com/etsy/statsd/blob/master/docs/metric_types.md,
and in my production envs we often sent values more than 2^32)

How to reproduce:
1. Send metric to brubeck and watch network packets (I use ngrep):
`
echo "complex.delete_me.mem:4294967296|g" | nc -u -q1 127.0.0.1 8126
...
U 127.0.0.1:38487 -> 127.0.0.1:8126
  complex.delete_me.mem:4294967296|g.
`


2. Watch network traffic from brubeck to storage:
`
T 10.0.2.9:53546 -> 10.9.192.2:2003 [AP]
  complex.delete_me.mem 0 1493135074. # brubeck send 0 instead of 4294967296
`

My investigation lead me to this function.
https://github.com/github/brubeck/blob/master/src/utils.c#L137

May you provide fix for that case?
Thanks in advance!
https://github.com/github/brubeck/blob/master/src/samplers/statsd.c#L56
`
for (i = 0; i < SIM_PACKETS; ++i) {
`