I detected changes in the release/3.0 branch which have not been merged yet to release/3.1. I'm a robot and am configured to help you automatically keep release/3.1 up to date, so I've opened this PR.

This PR merges commits made on release/3.0 by the following committers:

* @vijayrkn
* @mmitche
* @dotnet-maestro[bot]

## Instructions for merging from UI

This PR will not be auto-merged. When pull request checks pass, complete this PR by creating a merge commit, *not* a squash or rebase commit.

<img alt="merge button instructions" src="https://i.imgur.com/GepcNJV.png" width="300" />

If this repo does not allow creating merge commits from the GitHub UI, use command line instructions.

## Instructions for merging via command line

Run these commands to merge this pull request from the command line.

``` sh
git fetch
git checkout release/3.0
git pull --ff-only
git checkout release/3.1
git pull --ff-only
git merge --no-ff release/3.0

# If there are merge conflicts, resolve them and then run git merge --continue to complete the merge
# Pushing the changes to the PR branch will re-trigger PR validation.
git push https://github.com/dotnet-maestro-bot/templating-1 HEAD:merge/release/3.0-to-release/3.1
```

<details>
<summary>or if you are using SSH</summary>

```
git push git@github.com:dotnet-maestro-bot/templating-1 HEAD:merge/release/3.0-to-release/3.1
```

</details>


After PR checks are complete push the branch
```
git push
```

## Instructions for resolving conflicts

:warning: If there are merge conflicts, you will need to resolve them manually before merging. You can do this [using GitHub][resolve-github] or using the [command line][resolve-cli].

[resolve-github]: https://help.github.com/articles/resolving-a-merge-conflict-on-github/
[resolve-cli]: https://help.github.com/articles/resolving-a-merge-conflict-using-the-command-line/

## Instructions for updating this pull request

Contributors to this repo have permission update this pull request by pushing to the branch 'merge/release/3.0-to-release/3.1'. This can be done to resolve conflicts or make other changes to this pull request before it is merged.

```
git checkout -b merge/release/3.0-to-release/3.1 release/3.1
git pull https://github.com/dotnet-maestro-bot/templating-1 merge/release/3.0-to-release/3.1
(make changes)
git commit -m "Updated PR with my changes"
git push https://github.com/dotnet-maestro-bot/templating-1 HEAD:merge/release/3.0-to-release/3.1
```

<details>
    <summary>or if you are using SSH</summary>

```
git checkout -b merge/release/3.0-to-release/3.1 release/3.1
git pull git@github.com:dotnet-maestro-bot/templating-1 merge/release/3.0-to-release/3.1
(make changes)
git commit -m "Updated PR with my changes"
git push git@github.com:dotnet-maestro-bot/templating-1 HEAD:merge/release/3.0-to-release/3.1
```

</details>

Contact .NET Core Engineering if you have questions or issues.
Also, if this PR was generated incorrectly, help us fix it. See https://github.com/dotnet/arcade/blob/master/scripts/GitHubMergeBranches.ps1.

The file generated after doing `dotnet new` has a different encoding than what was in the original file for the template.

Repro:
- Install dotnet 3.1 sdk
- Unzip `C:\Program Files\dotnet\templates\3.1.0\microsoft.dotnet.web.projecttemplates.3.1.3.1.0.nupkg` and go to `Web.ProjectTemplates/content/BlazorServerWeb-Csharp/`
- Verify the encoding of `App.razor` (It should be UTF-8 with BOM)
- Now create a new app with `dotnet new blazor`
- Open the generated `App.razor` and check its encoding

Expected:
UTF-8 with BOM

Actual:
Windows Codepage 1252

cc @phenning 
Was just reading through the README and found this error.
Hi,

dotnet sdk version 3.1.100

Attempting to install dotnet CLI templates from a secured Azure Artifacts NuGet repository does not seem to be working.  The command correctly outputs that an --interactive authentication flow may be required.  However, the dotnet new -i command does not actually support the --interactive flag.  

Using the same repository, csproj dependencies can be restored via the CLI.  See below for command output.

```
dotnet new -i Test.Templates --nuget-source https://privatesource.pkgs.visualstudio.com/_packaging/Test/nuget/v3/index.json

C:\Program Files\dotnet\sdk\3.1.100\NuGet.targets(123,5): warning : The plugin credential provider could not acquire credentials. Authentication may require manual action. Consider re-running the command with --interactive for `dotnet`, /p:NuGetInteractive="true" for MSBuild or removing the -NonInteractive switch for `NuGet` [C:\Users\Greg\.templateengine\dotnetcli\v3.1.100\scratch\restore.csproj]

C:\Program Files\dotnet\sdk\3.1.100\NuGet.targets(123,5): error : Unable to load the service index for source https://privatesource.pkgs.visualstudio.com/_packaging/Test/nuget/v3/index.json. [C:\Users\Greg\.templateengine\dotnetcli\v3.1.100\scratch\restore.csproj]

C:\Program Files\dotnet\sdk\3.1.100\NuGet.targets(123,5): error :   Response status code does not indicate success: 401 (Unauthorized). [C:\Users\Greg\.templateengine\dotnetcli\v3.1.100\scratch\restore.csproj]
```
I'm after a way to get the lowercase version of the main template name. The below template configuration produces the issue with the below csproj file. Maybe I've got invalid syntax or an something else isn't correct. I can't just specify the lowercase name as the -n command because I want to support a mixed case for that parameter (e.g. I want the user to specify FooDomain instead of foodomain because of naming conventions).

To repro, you can use the following template config:
```
{  
  "$schema": "http://json.schemastore.org/template",
  "author": "Blank",
  "classifications": [
    "Web",
    "WebAPI"
  ],
  "name": "Test",
  "identity": "Test.Casing",
  "shortName": "casing-test",
  "sourceName": "ApplicationName",
  "preferNameDirectory": true,
  "tags": {  
    "language": "C#"
  },
  "primaryOutputs": [
    {  
      "path": "ApplicationName.csproj"
    }
  ],
  "symbols": {
    "sourceNameLower": {
      "type": "generated",
      "generator": "casing",
      "parameters": {
        "source":"sourceName",
        "toLower": true
      },
      "replaces": "ApplicationNameLower"
    }
  },
  "postActions": []
}
```

And a single file in the template content called "ApplicationName.csproj":
```
<Project Sdk="Microsoft.NET.Sdk.Web">

  <PropertyGroup>
    <TargetFramework>netcoreapp2.2</TargetFramework>
    <Authors>Blank/Authors>
    <Version>1.0.0</Version>
    <AspNetCoreHostingModel>InProcess</AspNetCoreHostingModel>
    <UserSecretsId>dd663411-3e30-405b-85b6-be2f9b61bf95</UserSecretsId>
    <DockerDefaultTargetOS>Linux</DockerDefaultTargetOS>
    <ArtifactsDirectory>app</ArtifactsDirectory>
  </PropertyGroup>

  <ItemGroup>
    <PackageReference Include="Microsoft.AspNetCore.App" />
    <PackageReference Include="Microsoft.VisualStudio.Azure.Containers.Tools.Targets" Version="1.7.9" />
  </ItemGroup>

    <!--
        DeleteArtifacts target:
            This target runs after clean.
    -->
    <Target Name="DeleteArtifacts" BeforeTargets="Package" Condition="Exists('$(ArtifactsDirectory)')">
        <Message Importance="High" Text="Deleting artifacts directory '$(ArtifactsDirectory)''" />
        <RemoveDir Directories="$(ArtifactsDirectory)" />
    </Target>
  
    <!--
        Package target:
            This target compiles the project in release mode and builds the docker container.
    -->
    <Target Name="Package">
        <Message Importance="High" Text="Publishing release artifacts..." />
        <Exec Command="dotnet publish -c Release -o $(ArtifactsDirectory)" />

        <Message Importance="High" Text="Building docker container..." />
        <Exec Command="docker build . -t ApplicationNameLower:latest" />
    </Target>

</Project>
```

My expectation is that when a user runs `dotnet new casing-test -n FooDomain` that they get a csproj called FooDomain.csproj with the Exec step in the Package target matching `<Exec Command="docker build . -t foodomain:latest" />`. Currently, the part that says `foodomain` is just left blank. 
This conditional fails to execute correctly and you end up with the code below in the final project output:

```c#
#if Foo || Bar
// Some code
#endif

#if !Foo
// Some code
#endif

```

This successfully removes the code if the condition fails:

```c#
#if (Foo || Bar)
// Some code
#endif

#if (!Foo)
// Some code
#endif
```

This only seems to be the case with complex conditionals. A simple conditional succeeds with or without brackets:

```c#
#if Foo
// Some code
#endif

#if (Foo)
// Some code
#endif
```

The reason I'd like this fixed is that it's very easy to get this wrong and I also get warnings from C# analzers about unnecessary paranthesis.
I have an `.editorconfig` file with the following conditional in it:

```
...omitted

##if (StyleCop)
##########################################
# StyleCop
##########################################

...omitted

#endif

...omitted
```

In my `template.json` file, I have then added the following boolean option:

```json
    "StyleCop": {
      "type": "parameter",
      "datatype": "bool",
      "description": "Adds and enforces StyleCop analyzers.",
      "defaultValue": "true"
    },
```

When I create a project using `dotnet new` and turn off the `StyleCop` option, the `.editorconfig` file failes to remove the code above. Is there a bug with files that start with a `.` or have no file extension?
Dotnet cli supports tab completion, it would be really handy to have support for template parameters / symbols as well?

https://docs.microsoft.com/en-us/dotnet/core/tools/enable-tab-autocomplete
# Steps to reproduce
dotnet new console and dotnet new 
# Expected behavior
Creates a new console app / lists help for dotnet new
# Actual Behavior  
``` Bash
Getting ready...
Object reference not set to an instance of an object.
   at Microsoft.TemplateEngine.Edge.Settings.SettingsLoader.Save(TemplateCache cacheToSave)
   at Microsoft.TemplateEngine.Edge.Settings.SettingsLoader.Save()
   at Microsoft.TemplateEngine.Cli.Installer.InstallPackages(IEnumerable`1 installationRequests, IList`1 nuGetSources, Boolean debugAllowDevInstall)
   at Microsoft.TemplateEngine.Cli.Installer.InstallPackages(IEnumerable`1 installationRequests)
   at Microsoft.DotNet.Tools.New.NewCommandShim.FirstRun(IEngineEnvironmentSettings environmentSettings, IInstaller installer)
   at Microsoft.TemplateEngine.Cli.New3Command.ConfigureEnvironment()
   at Microsoft.TemplateEngine.Cli.New3Command.Initialize()
   at Microsoft.TemplateEngine.Cli.New3Command.ExecuteAsync()
   at Microsoft.TemplateEngine.Cli.CommandParsing.NewCommandInputCli.<>c__DisplayClass19_0.<<OnExecute>b__0>d.MoveNext()
```
# Environment Data
``` bash
dotnet --info
```
```bash
.NET Core SDK (reflecting any global.json):
 Version:   3.1.100
 Commit:    cd82f021f4

Runtime Environment:
 OS Name:     opensuse-tumbleweed
 OS Version:  20191204
 OS Platform: Linux
 RID:         linux-x64
 Base Path:   /usr/share/dotnet/sdk/3.1.100/

Host (useful for support):
  Version: 3.1.0
  Commit:  157910edee

.NET Core SDKs installed:
  3.1.100 [/usr/share/dotnet/sdk]

.NET Core runtimes installed:
  Microsoft.AspNetCore.App 3.1.0 [/usr/share/dotnet/shared/Microsoft.AspNetCore.App]
  Microsoft.NETCore.App 3.1.0 [/usr/share/dotnet/shared/Microsoft.NETCore.App]

To install additional .NET Core runtimes or SDKs:
  https://aka.ms/dotnet-download
```

Tried Fixes in [Dotnet new fails: Object reference not set to an instance of an object #657](https://github.com/dotnet/templating/issues/657)

ie. 
```bash
dotnet new --debug:reinit
rm -rf ~/.templateengine
```
Did not have this problem with dotnet sdk 2.0.
In one of my templates, I have a useTests flag that will include test .csproj boilerplate.  I also have a .sln file in my template but find it difficult to have to support this with conditionals (and documentation does not mention .sln as an MSBuild project for conditionals).

Although I could use if/else for .sln if it is supported I actually foresee a better approach...

Can there be post steps in templates that run a dotnet command?

For instance, suppose my template does not have a solution, but based on all the .csproj in the template I could have a post step to create the solution with a given name and then add all .csproj files to the solution with the appropriate glob pattern.