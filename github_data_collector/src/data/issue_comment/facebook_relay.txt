the first one returns json data from http API server, the second one returns a placeholder which will be used to get json data using `useFragment`. both queries have fragment defined, why their behavior are different? 
```
const { createAutoBrandFormSchema } = useLazyLoadQuery<Create_AutoBrandFormSchemaQuery>(
    graphql`
      query Create_AutoBrandFormSchemaQuery($_org_id: Id) {
        createAutoBrandFormSchema(_org_id: $_org_id) {
          ...Form_formSchema
        }
      }
    `,
    {
      _org_id
    },
    {
      fetchPolicy: "store-or-network",
    }
  );

  console.log(createAutoBrandFormSchema);
  const { gridMetadata } = useLazyLoadQuery<brandGridMetadataQuery>(
    graphql`query brandGridMetadataQuery($gridName: String!) {
      gridMetadata(gridName: $gridName) {
        ...Grid_metadata
      }
    }`,
    {
      'gridName': 'brand-grid'
    },
    {
      fetchPolicy: "store-or-network",
    }
  );

  console.log(gridMetadata);

```

![image](https://user-images.githubusercontent.com/4058341/72611526-4fb58e00-3965-11ea-9600-e6a28fd12f42.png)

I have a url like `/admin/product/create?_org_id=1`, the `_org_id` is very special which is globally available for resource creation, I don't like to add it to `CreateProductInput`, because if we follow this way, we need to add it to every resource creation input type. Can we pass arbitrary query string to a Relay query without variables declared first inside that query? or any workaround?
```
input CreateProductInput {
  name: String
  description: String
  images: [File]
  price: Int
  onHand: Int
  tracked: Boolean
  autoSeries: String
  channels: String
  clientMutationId: String
}

```


I noticed a strange behavior caused by this `if`: https://github.com/facebook/relay/blob/master/packages/relay-compiler/codegen/writeRelayGeneratedFile.js#L98
in practice the fragment nodes are rewritten every time it is compiled even if they have not been modified.

Is this the expected behavior or is it a bug?
Relay Config package doesn't exist in every project which results in `yargs.config(undefined)` call. Unfortunately, yargs adds a new `--config` option for these cases. However, this option is not specified by Relay Compiler so it confuses people. I am not sure if it's a bug or feature though because technically it's fine as well. I'd argue that it's better to hide it and expose it manually (when needed) because now it's sometimes available and sometimes not.
This will prevent calling Relay Compiler with unsupported arguments (`relay-compiler --unknown`). See: http://yargs.js.org/docs/#api-strictenabledtrue
This is in an example 1:1 from the official documentation https://relay.dev/docs/en/local-state-management

```
commitLocalUpdate(modernEnvironment, store => {
  const dataID = 'client:store';
  const record = store.create(dataID, 'Store');

  modernEnvironment.retain({
    dataID,
    variables: {},
    node: {selections: []},
  });
});
```

that causes the following error:

```
Uncaught TypeError: Cannot read property 'identifier' of undefined
    at RelayModernStore.retain (RelayModernStore.js:158)
    at RelayModernEnvironment.retain (RelayModernEnvironment.js:223)
```

I did a bare bones setup based on `relay-examples` todo app. Nothing fancy.

Not sure if related: https://github.com/facebook/relay/issues/2971
Fixes various typos on the landing page.

Note: Some corrections like adding a missing "s" at the and of a word or capitalizing the "S" in TypeScript seem to not be highlighted properly in the GitHub diff. Weird...
# have many article and each article has many comment
I build this structure follow by this https://github.com/facebook/relay/issues/2223#issuecomment-350165328 example
When i call loadMore method inside TimelinePaginationContainer  it works perfectly but when i call loadMore method inside CommentsPaginationContainer it return old data, in network return correctly but inside component not working .

## RootComponent
```javascript
import React, { Component } from "react";
import TimelineComponent from "../../components/TimelineComponent";
import CreatePost from "../../components/CreatePost/CreatePost";
import environment from "Environment";
import { QueryRenderer, graphql } from "react-relay";

const TimelineQuery = graphql`
  query TimelineQuery($count: Int!, $cursor: String) {
    ...TimelineComponent_timeline
  }
`;

class Timeline extends Component {
  render() {
    return (
      <>
        <CreatePost />
        <QueryRenderer
          environment={environment}
          variables={{ count: 1 }}
          query={TimelineQuery}
          render={({ error, props }) => {
            if (error) {
              return <div>{error.message}</div>;
            } else if (props) {
              return <TimelineComponent timeline={props} />;
            }
            return <div>TimelineLoading</div>;
          }}
        />
      </>
    );
  }
}

export default Timeline;
```
### TimelinePaginationContainer
```javascript
import React, { Component } from "react";
import { graphql, createPaginationContainer } from "react-relay";
import AddCommentMutation from "shared/mutations/AddCommentMutation";
import Feed from "./Feed";
import "./timeline.scss";
class TimelineComponent extends Component {
  state = {
    CommentText: null
  };

  AddComment = postId => {
    AddCommentMutation(this.state.CommentText, postId);
  };

  loadMore = () => {
    if (!this.props.relay.hasMore() || this.props.relay.isLoading()) {
      return;
    }

    this.props.relay.loadMore(1, error => {
      console.log(error);
    });
  };
  render() {
    const { timeline } = this.props.timeline;
    return (
      <>
        {timeline.edges.map((item, index) => (
          <Feed feed={item.node} key={index} loadM={this.loadMore} />
        ))}
      </>
    );
  }
}

export default createPaginationContainer(
  TimelineComponent,
  {
    timeline: graphql`
      fragment TimelineComponent_timeline on RootQuery {
        timeline(first: $count, after: $cursor)
          @connection(key: "Posts_timeline") {
          edges {
            cursor
            node {
              ...Feed_feed
            }
          }
        }
      }
    `
  },
  {
    direction: "forward",
    query: graphql`
      query TimelineComponentQuery($count: Int!, $cursor: String) {
        ...TimelineComponent_timeline
      }
    `,
    getConnectionFromProps: props => props.timeline.timeline,
    getFragmentVariables: (prevVars, totalCount) => ({
      ...prevVars,
      count: totalCount
    }),
    getVariables: (props, { count, cursor }, fragmentVariables) => ({
      count,
      cursor
    })
  }
);
```
## Refetch Container
```javascript
  import React, { Component } from "react";
  import TimelineImage from "../Ui/TimelineImage";
  import { graphql, createRefetchContainer } from "react-relay";
  import moment from "moment";
  import Comments from "./Comments";

  class Feed extends Component {
    render() {
      const { feed } = this.props;
      return (
        <div>
          <div className="timeline_box">
            <div className="timeline-creator">
              <img src={`http://127.0.0.1:8000/media/${feed.picture}`} />
              <div className="timelie-creator-box">
                <p onClick={() => this.props.loadM()}>{feed.author.username}</p>
                <span>{moment(feed.createdAt).format("DD MMMM, YYYY")}</span>
              </div>
            </div>
            <div className="timeline-description">
              {feed.postType === "A_1" ? (
                <p>{feed.text}</p>
              ) : (
                <h3>{feed.text}</h3>
              )}
            </div>
            <div className="timeline-media">
              <TimelineImage
                src={`http://127.0.0.1:8000/media/${feed.picture}`}
                ImageWidth={feed.pictureWidth}
                ImageHeight={feed.pictureHeight}
              />
            </div>
            <div className="timeline-actions">
              <div
                onClick={this._loadMore}
                className={
                  feed.checkIfLiked
                    ? "timeline-action-item liked"
                    : "timeline-action-item like"
                }
              >
                <span></span>
                <p>{feed.likesCount}</p>
              </div>
              <div className="timeline-action-item comment">
                <span></span>
                <p>{feed.commentsCount}</p>
              </div>
            </div>
            <div className="timeline-comments">
              <Comments feed={feed} postId={feed.id} />
            </div>
            <div className="timeline-add-comments">
              <button onClick={() => this.AddComment(feed.id)}>Post</button>
              <textarea
                placeholder="Add comment..."
                onChange={e => this.setState({ CommentText: e.target.value })}
              ></textarea>
            </div>
          </div>
        </div>
      );
    }
  }

  export default createRefetchContainer(
    Feed,
    {
      feed: graphql`
        fragment Feed_feed on TimelineNode
          @argumentDefinitions(
            count: { type: "Int", defaultValue: 3 }
            cursor: { type: "String", defaultValue: null }
          ) {
          id
          postType
          path
          picture
          likesCount
          commentsCount
          text
          pictureWidth
          pictureHeight
          checkIfLiked
          createdAt
          ...Comments_feed
          author {
            fullName
            username
          }
        }
      `
    },
    graphql`
      query FeedQuery($id: String, $count: Int!, $cursor: String) {
        feed(id: $id) {
          ...Feed_feed @arguments(count: $count, cursor: $cursor)
        }
      }
    `
  );
```
## CommentsPaginationContainer
```javascript
import React, { Component } from "react";
import { graphql, createPaginationContainer } from "react-relay";
import "./timeline.scss";

class Comments extends Component {
  loadMore = () => {
    if (!this.props.relay.hasMore() || this.props.relay.isLoading()) {
      return;
    }

    this.props.relay.loadMore(3, error => {
      console.log(error);
    });
  };
  render() {
    const { comments } = this.props.feed;
    return (
      <>
        {comments.edges.map((comment, key) => (
          <p key={key} onClick={this.loadMore}>
            <b>{comment.node.user.username}</b> {comment.node.text}
          </p>
        ))}
        {comments.pageInfo.hasNextPage ? <span>Load more comments</span> : null}
      </>
    );
  }
}

export default createPaginationContainer(
  Comments,
  {
    feed: graphql`
      fragment Comments_feed on TimelineNode
        @argumentDefinitions(
          count: { type: "Int", defaultValue: 3 }
          cursor: { type: "String", defaultValue: null }
        ) {
        id
        comments(first: $count, after: $cursor)
          @connection(key: "Comment_comments") {
          edges {
            node {
              user {
                fullName
                username
              }
              created
              text
            }
          }
        }
      }
    `
  },
  {
    direction: "forward",

    getConnectionFromProps: props => props.feed.comments,

    getFragmentVariables: (prevVars, totalCount) => ({
      ...prevVars,
      count: totalCount
    }),
    getVariables: (props, { count, cursor }, fragmentVariables) => ({
      count,
      cursor,
      id: props.feed.id
    }),
    query: graphql`
      query CommentsQuery($id: String, $count: Int!, $cursor: String) {
        feed(id: $id) {
          ...Comments_feed @arguments(count: $count, cursor: $cursor)
        }
      }
    `
  }
);
```



# relay refetch return old data

I want to when i call relay.refetch inside Comments component update store in new sense and also update Comments components but it returns the value that was first loaded.
The reason why I'm doing this is because want to paginate posts and also want to paginate comments which belong posts. 
In network everything is ok

## pagination container
```javascript
import React, { Component } from "react";
import TimelineImage from "../Ui/TimelineImage";
import { graphql, createPaginationContainer } from "react-relay";
import moment from "moment";
import AddCommentMutation from "shared/mutations/AddCommentMutation";
import Comments from "./Comments";

import "./timeline.scss";
class TimelineComponent extends Component {
  state = {
    CommentText: null
  };

  AddComment = postId => {
    AddCommentMutation(this.state.CommentText, postId);
  };

  loadMore = () => {
    alert("halu");
    if (!this.props.relay.hasMore() || this.props.relay.isLoading()) {
      console.log(
        !this.props.relay.hasMore(),
        "this.props.relay.hasMore()",
        this.props.relay.isLoading(),
        this.props
      );
      alert("here");
      return;
    }

    this.props.relay.loadMore(
      4, // Fetch the next 10 feed items
      error => {
        console.log(error);
      }
    );
  };
  render() {
    const { timeline } = this.props.timeline;
    console.log(this.props, "propsss");
    return (
      <>
        {timeline.edges.map((feed, key) => (
          <div className="timeline_box" key={key}>
            <div className="timeline-creator">
              <img src={`http://127.0.0.1:8000/media/${feed.node.picture}`} />
              <div className="timelie-creator-box">
                <p onClick={this.loadMore}>{feed.node.author.username}</p>
                <span>{moment(timeline.created).format("DD MMMM, YYYY")}</span>
              </div>
            </div>
            <div className="timeline-description">
              {feed.node.postType === "A_1" ? (
                <p>{feed.node.text}</p>
              ) : (
                <h3>{feed.node.text}</h3>
              )}
            </div>
            <div className="timeline-media">
              <TimelineImage
                src={`http://127.0.0.1:8000/media/${feed.node.picture}`}
                ImageWidth={feed.node.pictureWidth}
                ImageHeight={feed.node.pictureHeight}
              />
            </div>
            <div className="timeline-actions">
              <div
                className={
                  timeline.checkIfLiked
                    ? "timeline-action-item liked"
                    : "timeline-action-item like"
                }
              >
                <span></span>
                <p>{feed.node.likesCount}</p>
              </div>
              <div className="timeline-action-item comment">
                <span></span>
                <p>{feed.node.commentsCount}</p>
              </div>
            </div>
            <div className="timeline-comments">
              <Comments comments={feed.node} key={key} postId={feed.node.id} />
            </div>
            <div className="timeline-add-comments">
              <button onClick={() => this.AddComment(feed.node.id)}>
                Post
              </button>
              <textarea
                placeholder="Add comment..."
                onChange={e => this.setState({ CommentText: e.target.value })}
              ></textarea>
            </div>
          </div>
        ))}
      </>
    );
  }
}

export default createPaginationContainer(
  TimelineComponent,
  {
    timeline: graphql`
      fragment TimelineComponent_timeline on RootQuery {
        timeline(first: $pageSize, after: $after)
          @connection(key: "Posts_timeline") {
          edges {
            node {
              id
              postType
              path
              picture
              likesCount
              commentsCount
              text
              pictureWidth
              pictureHeight
              checkIfLiked
              createdAt
              ...Comments_comments
              author {
                fullName
                username
              }
            }
          }
        }
      }
    `
  },
  {
    direction: "forward",
    query: graphql`
      query TimelineComponentQuery($pageSize: Int!, $after: String) {
        ...TimelineComponent_timeline
      }
    `,
    getConnectionFromProps: props => props.timeline.timeline,
    getFragmentVariables: (previousVars, pageSize) => ({
      ...previousVars,
      pageSize
    }),
    getVariables: (props, paginationInfo) => ({
      pageSize: 4,
      after: paginationInfo.cursor
    })
  }
);


```


## Comments component
```javascript
import React, { Component } from "react";
import { createRefetchContainer } from "react-relay";
import { graphql } from "relay-runtime";
import "./timeline.scss";

class Comments extends Component {
  loadMore = () => {
    const refetchVariables = fragmentVariables => ({
      after: this.props.comments.comments.pageInfo.endCursor
    });
    const renderVariables = {
      first: 10
    };

    this.props.relay.refetch(
      refetchVariables,
      renderVariables,
      null,

      () => {
        console.log("Refetch done");
      },
      { force: true }
    );
  };
  render() {
    const { comments } = this.props.comments;
    console.log(comments, "comment props");
    return (
      <>
        {comments.edges.map((comment, key) => (
          <p key={key} onClick={this.loadMore}>
            <b>{comment.node.user.username}</b> {comment.node.text}
          </p>
        ))}
        {comments.pageInfo.hasNextPage ? <span>Load more comments</span> : null}
      </>
    );
  }
}

export default createRefetchContainer(
  Comments,
  {
    comments: graphql`
      fragment Comments_comments on TimelineNode {
        comments(first: 5) @connection(key: "Comment_comments") {
          edges {
            node {
              user {
                fullName
                username
              }
              created
              text
            }
          }
        }
      }
    `
  },
  graphql`
    query CommentsQuery($after: String) {
      comments(first: 5, after: $after)
        @connection(key: "Com_Comment_comments") {
        pageInfo {
          hasNextPage
        }
        edges {
          cursor
          node {
            user {
              fullName
              username
            }
            id
            created
            text
          }
        }
      }
    }
  `
);


```



There are two different functions named 'fetchQuery' - one in relay hooks, one in relay-runtime. It isn't well documented that they are actually different. It can be confusing.

Are there plans to rename one of them?