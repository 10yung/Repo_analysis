Hi.

Issue: if you try to config test (with -t) a hitch.conf with some `pem-file = /etc/hitch/foo.pem` lines in it, and one of the pem files have mismatched key and certificate, hitch exits with return code 1 and does not output anything.

Expected: An explanation to stdout/stderr before exiting. "pem-file /etc/hitch/foo.pem is not valid", or "Certificate for foo.example.com is not loadable".

Using 1.5.0.

I've checked documentation and I can't find it anywhere. Which order are loaded the certs? In case of a colision, which takes preference? It would be nice to have it documented. 

We are using some directives `pem-file` followed by a `pem-dir` where a lot of letsencrypt autogenerated certificates are. We had the case of adding a pem-file with a new certificate and we didn't know there was an old, expired cert for the same site (the new one in pem-file directive was a wildcard).
The old and expired certificate was taking precedence in this case. The contrary should be a nice to have functionality, preferring fresh certificate over expired ones, but if it's a difficult task, merely having in the documentation the loading order of the certs should be enought.

Best, 

Diego. 

 
I've noticed that if I use a "regular" certificate where the domain is listed in the CN and the certificate does not use any SANs I get a "Error code: SSL_ERROR_BAD_CERT_DOMAIN".  When using a certificate where I list the domain as a SAN, it work as expected.

I'm unsure if it's a configuration issue, or something I'm doing wrong with my non-SAN certs.  Before I go crazy trying to track that down... I figured I might as well ask the question:  Can I use non-SAN certificates with Hitch?

This is what my configuration looks like.  I'm using 1.5.0

```
frontend = "[*]:443"
backend = "[127.0.0.1]:8000"
ciphers = ""
prefer-server-ciphers = off
ssl-engine = ""
ocsp-dir = "/var/cache/hitch"
workers = 1
backlog = 100
keepalive = 3600
chroot = ""
user = "hitch"
group = "hitch"
quiet = off
syslog = on
syslog-facility = "daemon"
daemon = on
write-ip = off
write-proxy = off
write-proxy-v2 = on
proxy-proxy = off
pem-dir = "/usr/local/etc/cert.d/"
pem-dir-glob = "*.pem"
alpn-protos = "h2,http/1.1"
log-level = 2
```

Under `/usr/local/etc/cert.d/` I have the certificates in PEM format using KEY > CERT > CHAIN > $( openssl dhparam 2048)
Fixes #303

DRAFT, needs documentation.

Executive summary: TLSv1,2 uses `SSL_CTX_set_cipher_list`, TLSv3 uses independently another cipher list, set by `SSL_CTX_set_ciphersuites`.

The 2 cipher list is independent, hence the introduced new parameter: `ciphers_v3`
Backed in something like stunnel's `sessiond` (probably the best option), `redis` or `memcache`.
When setting cipher this only effects TLSv1.2 and below. TLSv1.3 will regardless use the default cipher settings. 

Openssl uses a different function call to set TLS1.3 ciphers I would think that is the underlying issue. 

Running hitch:
/usr/local/sbin/hitch --user=hitch --backend=[wiki]:80 --config=/etc/hitch.conf --ciphers
=AES256+EECDH:AES256+EDH /etc/ssl/hitch/site.pem
(config file set port 443 as frontend) 

openssl s_client -connect 172.17.0.4:443 -ciphersuites TLS_AES_128_GCM_SHA256 -servername somewhere.com

.....

Post-Handshake New Session Ticket arrived:
SSL-Session:
    Protocol  : TLSv1.3
    Cipher    : TLS_AES_128_GCM_SHA256


Hi,

Not sure if I am doing something wrong, but I get this error on a SSLLabs check;

HTTP Requests: (Request failed)

My Hitch config:
backend = "[127.0.0.1]:8080"
frontend = "[*]:443"
log-level = 1
keepalive = 5
workers = 8
daemon = on
sni-nomatch-abort = on
pem-file = "/etc/apache2/certs/certname/ssl-cert.combined.crt" 
pem-dir = "/etc/letsencrypt/live-pem-files"
pem-dir-glob = "*.pem"
user = "_hitch"
syslog = on
ciphers = "EECDH+AESGCM:EDH+AESGCM:AES256+EECDH:AES256+EDH"
prefer-server-ciphers = on
alpn-protos = "h2,http/1.1"
tls-protos = TLSv1.0 TLSv1.1 TLSv1.2
write-proxy-v2 = on

On port 443 there is a Nginx proxy to Port 80 (Apache).
In the browser everything is okay, on SSLLabs I get the error above. 
The documentation (man-page) says:
```
   tls-protos = ...
       The  SSL/TLS  protocols  to  be  used. This is an unquoted list of tokens. Available tokens are SSLv3, TLSv1.0, TLSv1.1, TLSv1.2 and
       TLSv1.3.

       The default is TLSv1.2 and TLSv1.3.
```

I think this should be extended to mention that you need very recent openssl (1.1.1) as well.

On my Ubuntu Bionic system 1.1.0g-2ubuntu4.3 is installed, and hitch quietly only responds to TLS v1.2 now. 

Either something in the documentation or a startup notification to syslog if TLS 1.3 can't be found/enabled, would be very nice.

Adds a new configuration option pem-dir-subdir-glob, which will (recursively) drag in matching subdirectories when scanning pem-dir. The semantics may not be great (matches directory name not full path), but it makes it a relatively simple change.

e.g.
pem-dir                    "/etc/hitch/pem.d"
pem-dir-subdir-glob "conf.d"
will also scan all subdirectories under /etc/hitch/pem.d named conf.d for pem files, "*" is generally more useful to include all subdirectories.

The change also allows pem-dir / pem-dir-glob / pem-dir-subdir-glob to be used inside frontend configuration sections.



I am getting syntax error while using pem-dir in hitch. 
Here is my hitch.conf file details.
hitch: Parsing error in line 22: syntax error: 'pem-dir = "/var/lib/hitch/conf.d/"'

```
log-filename="/var/log/hitch.log"
syslog = on
syslog-facility = "daemon"
frontend = {
    host = "*"
    port = "8443"
    tls-protos = TLSv1.0,TLSv1.1,TLSv1.2

    ciphers = "deleting time being. I have tested this and working fine with pem-file"

    prefer-server-ciphers = on
    pem-dir = "/var/lib/hitch/conf.d/"
}
backend = "[127.1.1.1]:6086"
workers = 32                    

daemon = on

user = "hitch"
group = "hitch"
alpn-protos = "h2, http/1.1"


write-proxy-v2 = on
#write-ip = on
```