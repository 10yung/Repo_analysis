This commit shows how to use a struct that can be set at some point in the middleware stack and reuse later on in another layer.
Hi,

How to create an event source server with Nickel? and also how to set the `text/event-stream` mime-type?

Best regards
Hi,

How works  the multi-threading in the Nickel lib? what is the good value to set in the option `thread_count`?

Related to: https://github.com/clintnetwork/lucid/issues/16

Thank you
Hi,

I would like to use a custom handler or a logger in the same impl, but i've this error:
```
44 |         server.utilize(self.logger);
   |                             ^^^^^^ help: use parentheses to call the method: `logger(...)
``` 

Thanks
Hey,

In the goal to publish a binary that can include a web page, I try to use `StaticFilesHandler` with included resources files, do you think there are an easy way to achieve this ?

Cheers

Add middleware for every request

```rust
server.utilize(middleware! { | request |
    println!("logging request from middleware! macro: {:?}", request.origin.uri);
});
```

Handle a route

```rust
server.get('/',  middleware!("Yes, got it!");
```

start server

```rust
let _ = server.listen("127.0.0.1:8080");
```

visit `http://localhost:8080`, get corrent response from server, and terminal display:

```
logging request from middleware! macro: AbsolutePath("/")
```

But browser got 404 while visiting with a domain(by SwitchyOmega chrome plugin), the HTTP request header begin with:

```
GET http://xxx.com/ HTTP/1.1
``` 

And log middleware output the message:

```
logging request from middleware! macro: AbsoluteUri("http://xxx.com/")
```
Here's a route I made

```
    server.get("/test/:id", middleware!{|req| 
        let id = req.param("id").unwrap();
        format!("{}", id.to_string())
    });
```

If you try to browse the url `/test/fun.js` get param will only match `fun` and not `fun.js`. Also if you want to browse the url:  `/test/fun:time.js` It will not match anything and fail with NotFound.
The route matching has limitation that can be worked around by using a Regex matcher. Let's create an example of how to do that.
If `Response::end()` fails, the response is consumed so there's no way to create a `NickelError` without `unsafe` (except that `NickelError` has all fields public so it's possible to bypass the constructor completely). The reasoning for `unsafe` on `NickelError::without_response()` talks about deadlock if the response is not flushed, which is what the user is trying to do by calling `Response::end()`. So if the flush fails, what are we meant to do? It seems like a guaranteed deadlock since we can't call `bail()` now.
We inadvertently disabled SSL support in the upgrade to hyper 0.10 (sadly, no one noticed). Hyper 0.11 does not have native SSL support.