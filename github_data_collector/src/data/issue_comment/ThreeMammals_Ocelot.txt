Hi everyone.

I use Ocelot in my Routing Service and I love this library so much! It's a truly powerful library that allows me to develop microservices and not care about routings.

I store all my configuration related to Ocelot in `routing.json`. Also, I use this file to build documentation for API of all microservices. 

But recently I ran into a problem that I have to copy-paste a lot of configuration peaces to add new endpoint of my microservices.
For example, I have microservices that upload images to store. I describe this one in my configuration as:

```
{
      "Key": "ImageUploader",
      "DownstreamPathTemplate": "/image-uploader-microservice/upload-images",
      "DownstreamScheme": "http",
      "DownstreamHostAndPorts": [
        {
          "Host": "localhost",
          "Port": 5000
        }
      ],
      "UpstreamPathTemplate": "/image-uploader-microservice/upload-images",
      "UpstreamHttpMethod": [ "POST" ],
}
    
```

But when I am adding new endpoint to ImageUploader microservice (for example `/delete-images`) I have to copy this block of configuration and paste with replacing `/upload-images` to /`delete-images`).

I've read that I can use placeholders in the `UpstreamPathTemplate`, but in this case, I will broke my main logic of documentation building. Are there more attractive way that allows me to configure routings more flexible? Something like this:

```
 "UpstreamPathTemplate": "/image-uploader-microservice/{action}",
 "AvailablePlaceholders": {
    "action": [
       "upload-images",
       "delete-images"
    ]
 }
```





## Expected Behavior / New Feature
Hi there ,

I'm using custom aggregator class for aggregation my multiple responses.

Here is my configuration file.


```
"ReRoutes": [
    {
      "DownstreamPathTemplate": "/api1",
      "DownstreamScheme": "http",
      "DownstreamHostAndPorts": [
        {
          "Host": "redacted",
          "Port": 80
        }
      ],
      "Key": "api1Key",
      "UpstreamPathTemplate": "/api1",
          "AuthenticationOptions": {
            "AuthenticationProviderKey": "Bearer",
            "AllowedScopes": ["api1"]
        }
    },
    {
      "DownstreamPathTemplate": "/api2",
      "DownstreamScheme": "http",
      "DownstreamHostAndPorts": [
        {
          "Host": "redacted",
          "Port": 8081
        }
      ],
      "Key": "api2Key",
      "UpstreamPathTemplate": "/api2",
          "AuthenticationOptions": {
            "AuthenticationProviderKey": "Bearer",
            "AllowedScopes": ["api2"]
        }
    }
  ],
  "DynamicReRoutes": [],
  "Aggregates": [
    {
      "ReRouteKeys": [
        "api1key",
        "api2key"
      ],
      "UpstreamPathTemplate": "/getAll",
      "Aggregator": "Aggregator"
    }
  ],
```


When i send get request to /get all stub without token ocelot says not authenticated request in

aggregator class. But downstream property is empty.

Here is my startup file,

```
    public override void ConfigureDependencies(IServiceCollection services)
        {

            Action<IdentityServerAuthenticationOptions> options = o =>
            {
                o.Authority = "http://localhost:5000";
                o.ApiName = "api1";
                o.RequireHttpsMetadata = false;
            };
            services.AddAuthorization();
            services.AddAuthentication("Bearer").AddIdentityServerAuthentication(options);
            services.AddOcelot().AddTransientDefinedAggregator<Aggreagator>().AddConsul().AddConfigStoredInConsul();
        }

        public override void ConfigureRequestPipeline(IApplicationBuilder app, IWebHostEnvironment env)
        {
  
            app.UseAuthorization();

            app.UseAuthentication();
            app.UseOcelot().Wait();
        }
```
## Expected Behavior / New Feature
Ocelot starts and works with IdentityServer4 Authentication

## Actual Behavior / Motivation for New Feature
Ocelot crashes with:

> Unable to start Ocelot, errors are: Authentication Options AuthenticationProviderKey:TestKey,AllowedScopes:[] is unsupported authentication provider
![image](https://user-images.githubusercontent.com/7326054/72298583-28aa4400-3667-11ea-950a-e3d6967f6379.png)

## Steps to Reproduce the Problem

  1. [Follow the steps for IdentityServer 4](https://ocelot.readthedocs.io/en/latest/features/authentication.html#identity-server-bearer-tokens) 
Config looks like:
```
    {
      "DownstreamPathTemplate": "/{everything}",
      "DownstreamScheme": "https",
      "DownstreamHostAndPorts": [
        {
          "Host": "localhost",
          "Port": 44309
        }
      ],
      "UpstreamPathTemplate": "/{everything}",
      "UpstreamHttpMethod": [ "Get", "Post" ],
      "AuthenticationOptions": {
        "AuthenticationProviderKey": "TestKey",
        "AllowedScopes": []
      }
    }
```
Startup:
```
    public class Startup
    {
        public Startup(IConfiguration configuration)
        {
            Configuration = configuration;
        }

        public IConfiguration Configuration { get; }

        // This method gets called by the runtime. Use this method to add services to the container.
        public void ConfigureServices(IServiceCollection services)
        {
            //services.AddControllers();
            ConfigureIdentityServer(services);
            services.AddOcelot();
        }

        // This method gets called by the runtime. Use this method to configure the HTTP request pipeline.
        public void Configure(IApplicationBuilder app, IWebHostEnvironment env)
        {
            if (env.IsDevelopment())
            {
                app.UseDeveloperExceptionPage();
            }

            app.UseStaticFiles();
            app.UseHttpsRedirection();
            app.UseRouting();

            app.UseAuthentication();
            app.UseAuthorization();

            //app.UseEndpoints(endpoints =>
            //{
            //    endpoints.MapControllers().RequireAuthorization();
            //});

            app.UseOcelot().Wait();
        }

        private void ConfigureIdentityServer(IServiceCollection services)
        {
            //IdentityServerConfig identityServerConfig = new IdentityServerConfig();
            //Configuration.Bind("IdentityServerConfig", identityServerConfig);
            var authenticationProviderKey = "TestKey";

            services.AddAuthentication()
                .AddIdentityServerAuthentication(authenticationProviderKey, options =>
                {
                    options.RequireHttpsMetadata = false;
                    options.Authority = $"http://localhost:5000";
                    options.ApiName = "api1";
                }
                );
        }
```
Program
```
    public class Program
    {
        public static void Main(string[] args)
        {
            Log.Logger = new LoggerConfiguration()
               .Enrich.FromLogContext()
               .MinimumLevel.Debug()
               .WriteTo.Console(
                   LogEventLevel.Verbose,
                   "{NewLine}{Timestamp:HH:mm:ss} [{Level}] ({CorrelationToken}) {Message}{NewLine}{Exception}")
                   .CreateLogger();

            try
            {
                CreateHostBuilder(args).Build().Run();
            }
            finally
            {
                Log.CloseAndFlush();
            }
        }

        public static IWebHostBuilder CreateHostBuilder(string[] args) =>
            WebHost.CreateDefaultBuilder(args)
            .UseStartup<Startup>()
            .ConfigureAppConfiguration((hostingContext, config) =>
            {
                config
                    .SetBasePath(hostingContext.HostingEnvironment.ContentRootPath)
                    .AddJsonFile("ocelot.json")
                    .AddEnvironmentVariables();
            })
            .ConfigureServices(s =>
            {
                s.AddOcelot();
                s.AddMvc();
            })
            .ConfigureLogging((hostingContext, logging) =>
            {
                //add your logging
                logging.AddSerilog();
            })
            .Configure(a =>
            {
                a.UseOcelot().Wait();
            });
    }
```
  1. Run the application

## Specifications

  - Version: Ocelot 13.8.0
  - Platform: .Net Core 3.0 on Windows 10 x64
  - Subsystem:

Hi! 

Like Ocelot is already using Polly. Is there a way to retry X times the calls to downstream to prevent occasionally fails?
i'm trying to implement Api GateWay using ocelot and .Net Core 3.0 but in Program class when i try to add ocelot VS2019 shows me this error: "IServiceCollection" doesn't contain a definition for "AddOcelot" or an accessible extension method "AddOcelot" that accepts a first argument of type "IServiceCollection" (is any directive using or an assembly reference missing?)
Why every timeï¼Ÿ
   var services = await _services.Invoke();
   why no callback  PollConsul.

As both middlewares should be at the end of the pipeline, they cannot work together.

## Expected Behavior / New Feature

It is expected to allow Ocelot to "bypass" the calls if they do not match a pattern, for example. That way, the request could go to the next middleware. In this case, the dotnet Spa middleware.

This could be a parameter in the configuration when adding Ocelot

## Actual Behavior / Motivation for New Feature

- If Ocelot is defined before the Spa middleware: the APIs gateway works, but we do not have the SPA feature
- If Ocelot is defined after the Spa middleware: the APIs gateway doesn't work, as all the requests are proxied to the Spa (in my case: Angular)

The motivation is to allow adding more middlewares to the pipeline, without assuming Ocelot should be the last one.

## Steps to Reproduce the Problem

Just configure the middleware with .UseOcelot() and .UseSpa() in whatever the order you want.

## Specifications

  - Version: 13.5.2 (latest stable for .Net core 2.2)

## How to fix the problem

I fixed the issue by adding Ocelot first, and controlling the calls via a simple validation:

- If the request starts with "/gw" then I should process it
- Otherwise: continue with the next middleware in the pipeline

I copied the code from **OcelotMiddlewareExtensions.cs** and added a simple validation:
```

private static string gateWayPrefix = "/gw";

private static IApplicationBuilder CreateOcelotPipeline(IApplicationBuilder builder, OcelotPipelineConfiguration pipelineConfiguration)
{
  ...
                builder.Use(async (context, task) =>
                {
                    var defaultHttpContext = context as Microsoft.AspNetCore.Http.DefaultHttpContext;

                    if (defaultHttpContext != null && 
                        !defaultHttpContext.Request.Path.StartsWithSegments(new Microsoft.AspNetCore.Http.PathString(gateWayPrefix)))
                    {
                        // We are not receiving a "gw" API call. Therefore, we should just pass the request 
                        // to the next object in the pipeline
                        await task.Invoke();
                    }
                    else
                    {
                        // Processing as usual...
                        var downstreamContext = new DownstreamContext(context);
                        await firstDelegate.Invoke(downstreamContext);
                    }
                });
}

```

this simple trick solves my problem, although I'm not sure if it's in line with the development of the library.
## Expected Behavior / New Feature
Administration API should work after being properly configured in a .NET Core 3.x project.

## Actual Behavior / Motivation for New Feature
Ocelot throws error when executed in pipeline claiming that `.UseMvc` method should not be used on .NET Core 3.x projects.

## Steps to Reproduce the Problem

  1. Create a .NET Core 3.x project
  1. Install and configure Ocelot and Ocelot Administration (with IdentityServer authentication)
  1. Run the app.

## Specifications

  - Version: 13.8.0
  - Platform: ---
  - Subsystem: ---

As far as I can see, it all comes because of this line: https://github.com/ThreeMammals/Ocelot/blob/release/13.8.0/src/Ocelot.Administration/IdentityServerMiddlewareConfigurationProvider.cs#L30

I'm just starting to migrate stuff to .NET Core 3.x and still trying to come around with the new Endpoints stuff it brings, but I assume Ocelot should make use of them to properly configure it?

If I remove the `.AddAdministration()` configuration from my `Startup`, the Ocelot application runs with no further issues.
Fixes / New Feature #
Fix https://github.com/ThreeMammals/Ocelot/issues/1086
## Proposed Changes

  - Should use registered scheme not only `http`
  -
  -

## Expected Behavior
No exception

## Actual Behavior / Motivation for New Feature
```
System.UriFormatException: Invalid URI: The URI scheme is not valid.
   at Ocelot.Middleware.Pipeline.OcelotPipelineBuilderExtensions.<>c__DisplayClass5_2.<<UseMiddleware>b__3>d.MoveNext() in D:\Documents\GitHub\Ocelot\src\Ocelot\Middleware\Pipeline\OcelotPipelineBuilderExtensions.cs:line 92
--- End of stack trace from previous location where exception was thrown ---
   at Ocelot.Middleware.Pipeline.MapWhenMiddleware.Invoke(DownstreamContext context) in D:\Documents\GitHub\Ocelot\src\Ocelot\Middleware\Pipeline\MapWhenMiddleware.cs:line 40
   at Ocelot.Errors.Middleware.ExceptionHandlerMiddleware.Invoke(DownstreamContext context) in D:\Documents\GitHub\Ocelot\src\Ocelot\Errors\Middleware\ExceptionHandlerMiddleware.cs:line 55
```

## Steps to Reproduce the Problem

  1. AddEureka
  1. Browse service
  1.

## Specifications

  - Version: develop source
  - Platform: Windows
  - Subsystem: Windows 10

## Reason
DownstreamRequest.Scheme not use registered service scheme, `Ocelot.Values.Service` should add `Scheme` property and use it
https://github.com/ThreeMammals/Ocelot/blob/5d82e68534ff41bfbf8a0eaede1cd15a4ae2d900/src/Ocelot/DownstreamUrlCreator/Middleware/DownstreamUrlCreatorMiddleware.cs#L40
https://github.com/ThreeMammals/Ocelot/blob/5d82e68534ff41bfbf8a0eaede1cd15a4ae2d900/src/Ocelot/DownstreamUrlCreator/Middleware/DownstreamUrlCreatorMiddleware.cs#L73
