Added small helper function to get all enum values.
```
// MaxLen adds a length validator for this field.
// Operation fails if the length of the string is greater than the given value.
func (b *stringBuilder) MaxLen(i int) *stringBuilder {
	b.desc.Size = i
	b.desc.Validators = append(b.desc.Validators, func(v string) error {
		if len(v) > i {
			return errors.New("value is less than the required length")
		}
		return nil
	})
	return b
}

```
This is a WIP PR, as we need to add a "fixture" logic to the migration to make this change backward compatible.

Fixes #285
Title is self explanatory. It's a known issue we found today, and currently working on a backward compatibility fix for it.

Should be addressed soon. 



Hi, I found that the generated table names conflicted with Golang keywords when using ent.

When I use Package as the table name, try to generate code using ent.

```golang
type Package struct {}
```

```bash
$ entc generate ./ent/schema/

# The error message is too long, I deleted the path
format file /ent/package_create.go:277:10: expected operand, found 'package' (and 10 more errors)
```

You can see that the structure name is converted to lowercase in the `(t Type) Package() string` function. If I use the words `Package` or `Type` as the database table name, it will be converted to `package` or `type`, which will conflict with the Golang keywords.

https://github.com/facebookincubator/ent/blob/f270e41f6e45131c72a0c6d3991180a1091d7eb4/entc/gen/type.go#L216

Note the **fourth line** of code generated below, this will produce an error.

```golang
var (
	pa = &Package{config: pc.config}
	spec = &sqlgraph.CreateSpec{
		Table: package.Table,
		ID: &sqlgraph.FieldSpec{
			Type: field.TypeUUID,
			Column: package.FieldID,
		},
	}
)
```

I think it can be solved by using the following method like #276.

https://github.com/facebookincubator/ent/blob/f270e41f6e45131c72a0c6d3991180a1091d7eb4/entc/gen/type.go#L779-L784

Change the package name.

```golang
package package

package _package
```

And add the package alias.

```golang
import "github.com/username/repository/package"

import _package "github.com/username/repository/package"
```
I wanted to submit the PR after fixing it myself, but when I modified [import.tmpl](https://github.com/facebookincubator/ent/blob/master/entc/gen/template/import.tmpl), it didn't work and I didn't find the reason, so I gave up :)
Hi,

just started playing around with ent and ran into compiler errors with the generated code. I have a mixin that looks something like this:
```go
type LabelMixin struct{}

func (LabelMixin) Fields() []ent.Field {
	return []ent.Field{
		field.String("label").NotEmpty(),
	}
}
```

When compiling this produces an error along the lines of:
```
# server/ent/phone
ent\phone\where.go:122:6: Label redeclared in this block
	previous declaration at ent\phone\phone.go:14:10
```

Looking at the generated code we see this:
```go
// in phone/where.go

// Label applies equality check predicate on the "label" field. It's identical to LabelEQ.
func Label(v string) predicate.Phone {
	return predicate.Phone(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldLabel), v))
	},
	)
}

// in phone/phone.go
const (
	// Label holds the string label denoting the phone type in the database.
	Label = "phone"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreatedAt holds the string denoting the created_at vertex property in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at vertex property in the database.
	FieldUpdatedAt = "updated_at"
	// FieldLabel holds the string denoting the label vertex property in the database.
	FieldLabel = "label"
	// FieldNumber holds the string denoting the number vertex property in the database.
	FieldNumber = "number"
	// FieldPrimary holds the string denoting the primary vertex property in the database.
	FieldPrimary = "primary"

	// Table holds the table name of the phone in the database.
	Table = "phones"
)
```

Might be worth catching those during codegen or somehow making sure the names cannot collide. It's not really an issue for me, so feel free to close. I'll just use a different name for now.
> The TIMESTAMP data type is used for values that contain both date and time parts. TIMESTAMP has a range of '1970-01-01 00:00:01' UTC to '2038-01-19 03:14:07' UTC. 
>
> The DATETIME type is used for values that contain both date and time parts. MySQL retrieves and displays DATETIME values in 'YYYY-MM-DD hh:mm:ss' format. The supported range is '1000-01-01 00:00:00' to '9999-12-31 23:59:59'. 

It's a great experimental ent feature to be able to store structs as Json in a database table. I have a few questions regarding this feature:

- How to search for data within JSON?
- How to extract only specific fields from JSON?
- Is there a plan to standardize the abstraction for common use cases?
- What should be the syntax to  write nested JSON queries?

In the meantime, I believe that ent should have the primitives to allow ent users to write those queries even without out-of-the-box support.

Examples  for JSON queries:
```sql
-- search sqlite
SELECT *
FROM users, json_each(user_data)
WHERE 
    json_extract(json_each.value, '$.email') LIKE '%criteria%';

-- filter specific values in sqlite
select value, json_extract(user_data, '$.email') from entry where id = '12345';

-- filter specific values in postgres
SELECT user -> 'email' AS user_email
FROM users;
```

If I read the documentation right, the way to implement search would be a [custom predicate](https://entgo.io/docs/predicates/#custom-predicates).

I am not sure how a custom select statement with only specific fields can be generated. Is the way  to go a custom select `Select(t1.Columns("name", "age")...)` statement? I think the challenge will be to find a good syntax for JSON extraction (specifically for nested fields) and its unclear to me how the mapping to entities should look like.


Are there any plans to support "soft" deletes? That is, assuming the File schema has a deleted_at column, the code:

```go
client.File.
	Delete().
	Where(file.UpdatedAtLT(date))
	Exec(ctx)
```

Would execute (approximately):
```sql
UPDATE files SET deleted_at = NOW() WHERE updated_at < ?
```
and 
```go
client.File.
	Query().
	All(ctx)
```
Would execute (approximately):
```sql
SELECT * FROM files WHERE deleted_at IS NULL
```
It would be nice to have some way to create / insert multiple entities of the same type at once.