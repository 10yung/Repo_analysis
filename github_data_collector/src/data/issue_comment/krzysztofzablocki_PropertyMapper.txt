We could modify the Assertion code to handle better cases where the developer forgot to write the code to handle the custom Box.

```
    SEL mappingSelector = NSSelectorFromString([NSString stringWithFormat:@"boxValueAs%@:", mappingType]);
    AssertTrueOrReturnNoBlock([self respondsToSelector:mappingSelector], ^(NSError *error) {
    });
```

In the `AssertTrueOrReturnNoBlock` we could print the expected selector.
Lets say I have a JSON object like this:

```
  { 
       success: false,
       error: {code: 1, message: "Something was wrong!"},
       data: nil
  }
```

And I wan't to map object like this:

```
@interface Response : NSObject
@property (assign, nonatomic) BOOL    isSuccess;
@property (strong, nonatomic) id      data;
@property (strong, nonatomic) NSError *error;
@end
```

I can map error with KZCall or by custom boxing. But this methods unable to specify any errors during certain class instantiation or mapping. Is there any way to fix it with current library implementation?

Let's say I have an User object, and an user belongs to a group.

```
@interface User : NSObject
@property (strong, nonatomic) NSString *firstName;
@property (strong, nonatomic) NSString *lastName;
@property (strong, nonatomic) Group *group;
@end

@interface Group : NSObject
@property (strong, nonatomic) NSString *name;
@end
```

Now, what I'd like to be able to do is something like this:

```
@implementation User

- (instancetype)initWithDict:(NSDictionary *)dict {
    self = [super init];

    KZPropertyMapper mapValuesFrom:dict toInstance:self usingMapping:@{
        @"name": KZProperty(firstName),
        @"lastname": KZProperty(lastName),
        @"group": KZCall(Group, groupWithDict:, group),
    }];

    return self;
}

@end
```

So, call `[Group groupWithDict:dict]` and save that result to `self.group`. However, I now constantly have to create an intermediary helper method on the object I'm parsing, so the user object now gets something like this:

```
- (id)groupWithDict:(NSDictionary *)dict {
    return [Group groupWithDict:dict];
}
```

After writing a bunch of classes like this, it gets really tedious to duplicate these methods like this. Is there any solution? It looked like `KZCallT` would be handy, but the property then needs to be on the target object instead of self.
