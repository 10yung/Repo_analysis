Steps to reproduce
 1. Open desktop Google Chrome wiht dev tools and turn on device format
 2. Try to move map

Expected
 Map move by dragging

Actual 
 Map don't move by dragging

Environment 

leaflet 1.6.0


Bug not reproduced in 1.5.1. 
Also I found reason of this problem - pointer event turn off for any browser on webkit (line 1905 in leaflet-src.js)


**Steps to reproduce**
Steps to reproduce the behavior:
- Create a map
- Add multiple large image overlays as layers. In the example, I used (11042x6138, 7.5 MB, jpeg)
- Pan and zoom around

**Expected behavior**
The map should pan and zoom without lagging without the need to switch layers from the beginning

**Current behavior**
The map is lagging and slow. This however can be fixed (weird enough) by switching back and forth once between layers. In fact, simply turning an overlay layer on/off also seems to be sufficient.

**Environment**
- Leaflet version: 1.6.0
- Browser (with version): Chrome 79.0.3945.117 (Official Build) (64-bit)
- OS/Platform (with version): Linux Ubuntu 79.0.3945.117 (Official Build) (64-bit)

**Additional context**
I made a dirty fix in which I use JQuery to toggle a layer on/off in the beginning and for now this seems to do the trick.

**Minimal example reproducing the issue**
https://codepen.io/hope_feda/pen/bGNjxNJ

**Edit 1**
This doesn't seem to be an issue on Firefox 71.0 (64-bit) on the same OS
**How to reproduce**
I create a function to refresh the map each 60 seconds calling my getUnitLayers function:
```
setInterval(function () {
	getUnitLayers();
}, 60000);
```

```
function getUnitLayers() {
    map.off();
    map.invalidateSize();

    $.ajax({
        type: "POST",
        contentType: 'application/json',
        processData: true,
        url: rootUrl + '/Home/GetUnitsFeatures',
        cache: false,
        [...]
        success: function (data) {
            if (!data.errorMessage) {
                if (unitLayer) {
                    $('#feature-list tbody').empty();
                    map.removeLayer(unitLayer);
                    $(".legend").remove();
                }
                unitLayer = L.geoJSON(data, {
                    onEachFeature: onEachUnitFeature
                });
                map.addLayer(unitLayer);

                if (laterControl) {
                    laterControl.remove();
                }
                laterControl = L.control.layers(
                    baseGroup, {
                        'LABEL ': unitLayer
                    }
                ).addTo(map);
            } else {
                afterErrorOperations(data.errorMessage);
            }
        }
    });
}
```

**What behaviour I'm expecting and which behaviour I'm seeing**
![Cattura](https://user-images.githubusercontent.com/3437478/72335186-dbf25780-36be-11ea-83c7-c9af24ab167e.PNG)

With Google Chrome and Edge the amount of memory occupied is stable, but with Internet Explorer it grows quickly, often over 1 GB.

**Expected behavior**
Why is so much memory allocated with Internet Explorer?

**Environment**
- Leaflet version I'm using: 1.3.4
- Browser: Chrome 79.0.3945.117 / Internet Explorer 11 / Edge
- OS: Windows 10
Hello,

I'm very beginner in JS and also leaflet library. I would like to if something existe to change how the zoom works. Is there a class or feature that enable to change the tileSize on zoom.

Thank you.

As a result of using importing Marker as ES6 module and *not* importing Popup the function `closePopup` does not exist on the marker object.

This is a quick fix. A better approach would be to make the popup register a move listener on the marker, while its open. And then close itself when the marker is moved.

Closes #6961
**Steps to reproduce**

import the following packages:
```
import { map } from "leaflet/src/map"
import { icon } from "leaflet/src/layer/marker/Icon"
import { Marker } from "leaflet/src/layer/marker/Marker"
import { tileLayer } from "leaflet/src/layer/tile/TileLayer"
import "leaflet/src/layer/vector/Renderer.getRenderer"
```
With those imports one can render a marker on the map but not drag it.

**Expected behavior**

Clicking and dragging a marker works and does not crash.

**Current behavior**

A crash occurs cause it assumes a certain member function is present.

```
Marker.Drag.js:111 Uncaught TypeError: this._marker.closePopup is not a function
    at NewClass._onDragStart (Marker.Drag.js:111)
    at NewClass.fire (Events.js:190)
    at NewClass._onMove (Draggable.js:157)
    at HTMLDocument.handler (DomEvent.js:79)
```

**Environment**
- Leaflet version: 1.6.0

It would be better if the different classes would not depend on each other that much. I know it has historical reasons, but the whole idea of using ES6 import is to not import code one does not use.

The library would benefit from a cleaner separation of concerns/dependency injection.

In that particular case, couldn't the popup register a move listener on the marker itself and then close itself when this listener is called?

Are there any ES6 enabled specs, I could not find any. When all the specs are based on `window.L` then these kind of bug are hard to find.
Currently long press touch duration ( firing `contextmenu` event on touch devices) is fixed to 1 second.

It would be very useful to be able to set the duration of long press touch duration, either by some touch interaction option like `longTouchDuration` or at least by some internal value in tape handler object (like `_longTouchDuration: 1000`) that could be easily changed by `L.Map.Tap.include`.

**Is your feature request related to a problem? Please describe.**
The Mapbox URL on the  Quick Start page, https://leafletjs.com/examples/quick-start/ needs to be updated. The documentation on the Mapbox ids can't be found on the Mapbox website. 

**Describe the solution you'd like**
Use the Mapbox Styles instead. 
https://docs.mapbox.com/help/glossary/static-tiles-api/

Hi, https://leafletjs.com/reference-1.6.0.html does not mention setContent() as a method of Tooltip and I had to dig in the code to find it. It's important as if you want to create a tooltip with options, you need to then setContent() to set the text.

