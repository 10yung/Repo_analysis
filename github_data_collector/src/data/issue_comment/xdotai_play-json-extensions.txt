This project hasn't been build on CircleCI since dec 20th, 2018.

The project has valid CircleCI v2 configuration, so re-enabling is very simple.

A maintainer can do this by going to https://circleci.com/setup-project/gh/xdotai/play-json-extensions and pressing the "Start building" button
Upgrade play-json to 2.8.1
Upgrade Scala 2.12 to 2.12.10, 2.13 to 2.13.1
Upgrade SBT to 1.3.5

Drop Scala 2.11 support, not supported by play-json 2.8

Simplify CircleCI file
I wrote this code

```
{
  case class Foo(accountNumber: String)
  object Foo {
      implicit val config = JsonConfiguration(SnakeCase)
      import ai.x.play.json.Jsonx
      implicit lazy val jsonFormat = Jsonx.formatCaseClass[Foo]
  }
}
Json.parse("""{"account_number":"a"}""").validate[Foo]
```

If I was not using Play Json extensions, it would have parsed account_number to accountNumber. but with the extensions (in code above). it fails

```
res11: JsResult[Foo] = JsError(
  List((JsPath(List(KeyPathNode("accountNumber"))), List(JsonValidationError(List("error.path.missing"), WrappedArray()))))
)
```

After upgrading to 0.40.2 it stopped working. I'm using Play 2.7.3. Version 0.30.1 worked just fine.

This is the error I get:

`Image.scala:13:81: not found: value JsSuccess
[error]   implicit lazy val jsonFormat: OFormat[Image] = Jsonx.formatCaseClassUseDefaults[Image]`

```
case class Image(url: String,
                 size: Option[Size] = None,
                 owned: Boolean = false,
                 thumbnails: List[Image] = List())

object Image {

  implicit lazy val jsonFormat: OFormat[Image] = Jsonx.formatCaseClassUseDefaults[Image]

}

case class Size(width: Int,
                height: Int)

object Size {

  implicit lazy val jsonFormat: OFormat[Size] = Jsonx.formatCaseClassUseDefaults[Size]

}
```
Without this change the following message is generated when using `formatCaseClassUseDefaults`:
```
not found: value JsSuccess
```
On Maven Central, there is a [version 0.14.0](https://repo1.maven.org/maven2/ai/x/play-json-extensions_2.12/) published for this project; however, this GitHub repo does not contain a release, tag, or branch for 0.14.0, and the `build.sbt` on `master` has the version 0.10.0. Is the version on Maven Central legitimate?
When I use jsonx and joda time in a case class.
```scala
import ai.x.play.json.Jsonx
import org.joda.time.DateTime
// case class
case class A (var a: Option[DateTime] = None)
// json object
object A { implicit val a = Jsonx.formatCaseClass[A]}
```
I also use `slickless` and `shapeless` to resolve the 22 params.
It throws the error:
```bash
could not find implicit value for parameter helper: play.api.libs.json.Reads[Option[org.joda.time.DateTime]]
TRIGGERED BY: could not find implicit value for parameter helper: ai.x.play.json.OptionValidationDispatcher[Option[org.joda.time.DateTime]]
TO SOLVE THIS
1. Make sure there is a Reads[Option[org.joda.time.DateTime]] or Format[Option[org.joda.time.DateTime]] in the implicit scope
2. In case of Reads[Option[...]] you need to either
   import ai.x.play.json.implicits.optionWithNull // suggested
   or
   import ai.x.play.json.implicits.optionNoError // buggy play-json 2.3 behavior
3. In case of Reads[... .type]
   import ai.x.play.json.SingletonEncoder.simpleName
   import ai.x.play.json.implicits.formatSingleton
```

We've been using this library in combination with `require` to constrain our domain objects, but still get nice `JsError`s back.

Unfortunately this does not work with `Jsonx.formatInline`
```
case class PositiveInteger(i: Int) {
   require(i >= 1, "Number must be a positive integer")
}

import play.api.libs.json.Json
// JsError(ValidationError("Number must be a positive integer"))
Jsonx.formatCaseClass[PositiveInteger].reads(Json.parse("""{ "i": -1 }""")))

// IllegalArgumentException("Number must be a positive integer") gets thrown
Jsonx.formatInline[PositiveInteger].reads(Json.parse("-1")))
```

I might be able to create a PR for this friday if this is wanted