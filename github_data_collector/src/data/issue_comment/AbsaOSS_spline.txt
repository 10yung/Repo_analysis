The message should give more information about what is working and what not.
I found this useful for my own local evaluation of Spline, I figured it might be helpful to add to the repository.
Spline is not initialized properly!


Using Python version 3.7.4 (default, Aug  9 2019 18:34:13)
SparkSession available as 'spark'.
```
>>> from pyspark import SparkContext
>>> from pyspark.sql import SQLContext
>>> from pyspark.sql import SparkSession
>>> import pandas as pd
>>>
>>> SC = SparkContext
>>> SC.setSystemProperty('spline.mode','REQUIRED')
>>> SC.setSystemProperty('spline.producer.url', 'http://localhost:8080/producer')
>>> SC._jvm.za.co.absa.spline.harvester.SparkLineageInitializer.enableLineageTracking(spark._jsparkSession)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
  File "C:\SPARK\spark-2.4.4-bin-hadoop2.7\python\lib\py4j-0.10.7-src.zip\py4j\java_gateway.py", line 1257, in __call__
  File "C:\SPARK\spark-2.4.4-bin-hadoop2.7\python\pyspark\sql\utils.py", line 63, in deco
    return f(*a, **kw)
  File "C:\SPARK\spark-2.4.4-bin-hadoop2.7\python\lib\py4j-0.10.7-src.zip\py4j\protocol.py", line 328, in get_return_value
py4j.protocol.Py4JJavaError: An error occurred while calling z:za.co.absa.spline.harvester.SparkLineageInitializer.enableLineageTracking.
: za.co.absa.spline.harvester.exception.SplineNotInitializedException: Spline is not initialized properly!
        at za.co.absa.spline.harvester.dispatcher.HttpLineageDispatcher.ensureProducerReady(HttpLineageDispatcher.scala:69)
        at za.co.absa.spline.harvester.SparkLineageInitializer$SparkSessionWrapper.enableLineageTracking(SparkLineageInitializer.scala:80)
        at za.co.absa.spline.harvester.SparkLineageInitializer$.enableLineageTracking(SparkLineageInitializer.scala:39)
        at za.co.absa.spline.harvester.SparkLineageInitializer.enableLineageTracking(SparkLineageInitializer.scala)
        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
        at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
        at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
        at java.lang.reflect.Method.invoke(Unknown Source)
        at py4j.reflection.MethodInvoker.invoke(MethodInvoker.java:244)
        at py4j.reflection.ReflectionEngine.invoke(ReflectionEngine.java:357)
        at py4j.Gateway.invoke(Gateway.java:282)
        at py4j.commands.AbstractCommand.invokeMethod(AbstractCommand.java:132)
        at py4j.commands.CallCommand.execute(CallCommand.java:79)
        at py4j.GatewayConnection.run(GatewayConnection.java:238)
        at java.lang.Thread.run(Unknown Source)
```
Does container-based spline 0.4.0 work correctly? I try to run them according to the documentation (https://absaoss.github.io/spline/), however the spline-web-client component has a problem connecting to consumer with URL :http://172.17.0.1:8080/consumer
- ArangoDB driver converts the returned data type to Scala right now, but everything deeper in the structure stays in java types.
- Convert the whole structure to Scala before handing it to the higher layers.
A good deal of Spline's `commons` module could be moved to a newly created [ABSA OSS Commons](https://github.com/AbsaOSS/commons) project
Is spline4.0 support atlas integration? Where can I find a guid?thanks
## Background [Optional]
One aspect of 'clarity', auditing & lineage is understanding 'who' ran the query or transformation. Many compliance regimes require knowing who access what and when. Further which spline does is to capture the 'how' of the transformation (or query). 

## Question
Does Spline capture any form of user identity, is it feasible to capture the identity and to do so as transparently as possible (e.g. in flight recorder mode) on a multi-tenant cluster (Hadoop or Databricks) ? - Thank you!
Opposite and complimentary to the (Backward) Data Lineage.
Traces how the data is used / errors are propagated down the pipeline
## Background [Optional]
Spline 0.3.9
Performed a Spline testing on current process, however when clicked on Detailed lineage graph (gear button) nothing showed up

## Question
We just try to figure out if the issue comes within our code or Spline

1. There are some exceptions (yes, several similar exception but pretty much the same cause) while running our Spark code
>ERROR CodeGenerator: failed to compile: org.codehaus.commons.compiler.CompileException: File 'generated.java', Line 567, Column 28: Redefinition of parameter "agg_expr_21"                      
org.codehaus.commons.compiler.CompileException: File 'generated.java', Line 567, Column 28: Redefinition of parameter "agg_expr_21"

These errors should be pretty benign as our final results generated correctly, but not sure how it impacts Spline's result

2. We have some code on rdd but it is for the dataframe so I don't think they are RDD api and should pick up by Spline

>val tableDf= spark.sql("blah....")
>val releaseDate= tableDf.where(tableDf("item") <=> "releaseDate").select("value").rdd.map(_.getString(0)).toLocalIterator.toList.head

3. Where to find Spline log to track any exception or error from Spline?

Thanks in advance for any advice.
