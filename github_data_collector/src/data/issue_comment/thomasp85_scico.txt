I noticed that Fabio Crameri also created three cyclic color palettes that are specifically for depicting circular data: <http://www.fabiocrameri.ch/cycliccolourmaps.php>

If you'd like to have these in the `scico` package, this PR adds them: brocO, corkO, and vikO.
There are several diverging color palettes like broc, cork, vic, etc. where the center color value is as meaningful as the extremes.

However, if you use `scale_*_scico()` on a variable that's not symmetrically distributed around zero, the colors also won't be centered around zero:

``` r
library(tidyverse)
library(scico)

fake_data <- tribble(
  ~category, ~pct_change,
  "A",      0.5,
  "B",      0.3,
  "C",      0.01,
  "D",      -0.2
)

# Zero should be the lightest color, or the middle of the scico gradient, but
# it's not because the range here isn't symmetrical
ggplot(fake_data, aes(x = category, y = pct_change, fill = pct_change)) +
  geom_col() +
  scale_fill_scico(palette = "vik") +
  theme_minimal()
```

![](https://i.imgur.com/Tpp9MUq.png)

One workaround is to extract the extreme and center values from the palette with `scico(3)` and use `scale_fill_gradientn()` to interpolate colors between low, mid, and high. This unfortunately loses the magical range of colors in the palette that makes scico so great

``` r
fake_scico <- scico(3, palette = "vik")

ggplot(fake_data, aes(x = category, y = pct_change, fill = pct_change)) +
  geom_col() +
  scale_fill_gradient2(low = fake_scico[1], mid = fake_scico[2], high = fake_scico[3]) +
  theme_minimal()
```

![](https://i.imgur.com/fVhUH1L.png)

The better solution is to use the `limits` argument to make the scale be symmetrical, but doing so requires additional code and math to work

``` r
ggplot(fake_data, aes(x = category, y = pct_change, fill = pct_change)) +
  geom_col() +
  scale_fill_scico(palette = "vik", 
                   limits = c(-1, 1) * max(abs(fake_data$pct_change))) +
  theme_minimal()
```

![](https://i.imgur.com/ggGmbL7.png)

Would it be worth it to add an argument like `center = TRUE` or `center = 0` to `scale_*_scico()` for the diverging palettes, or should users handle the centering on their own? 

I haven't found any other examples of how this is done in other packages. None of the viridis palettes are diverging, and the ColorBrewer diverging palettes that are accessible with `scale_*_brewer(type = "div", palette = "PuOr")` only work with discrete scales (which lets ggplot get around this centering issue)