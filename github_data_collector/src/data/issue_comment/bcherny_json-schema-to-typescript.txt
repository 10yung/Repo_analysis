We are using a schema to include other schemas to generate, e.g.

Schema
```{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "type": "object",
  "$id": "schema/lookup.schema.json",
  "title": "Lookup Data",
  "anyOf": [
    {
      "$ref": "rating-authority.schema.json"
    },
    {
      "$ref": "region.schema.json"
    },
    {
      "$ref": "country.schema.json"
    },
    {
      "$ref": "distributor.schema.json"
    },
    {
      "$ref": "managing-lab.schema.json"
    },
    {
      "$ref": "content-tag.schema.json"
    },
    {
      "$ref": "rating-authorityrating.schema.json"
    }
  ]
}
```
However the output only includes the first 5 in the anyOf list, i.e.

```
export type LookupData = Region | Country | Distributor | ManagingLab | ContentTag;
[etc etc]
...
```
Is this a know issue and is there a workaround?

#238 is adding the ability to specify multiple file input for this library. 

An additional feature would be to allow the user to specify a single file output for a multi file input and have everything be concatenated into the single file output.

Currently, a check is in place in the CLI to throw an error when the user attempts this operation.
Awesome project, thanks! 

I'm using Python and pydantic to export JSONSchemas:
```python
from pydantic import BaseModel


class MyModel(BaseModel):
    id: int
    name: str
    readonly: bool


print(MyModel.schema_json(indent=2))
```

This outputs the schema:
```json
{
  "title": "MyModel",
  "type": "object",
  "properties": {
    "id": {
      "title": "Id",
      "type": "integer"
    },
    "name": {
      "title": "Name",
      "type": "string"
    },
    "readonly": {
      "title": "Readonly",
      "type": "boolean"
    }
  },
  "required": [
    "id",
    "name",
    "readonly"
  ]
}
```

When run-through json-schema-to-typescript, the output has types for each schema property:
```typescript
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

export type Id = number;
export type Name = string;
export type Readonly = boolean;

export interface MyModel {
  id: Id;
  name: Name;
  readonly: Readonly;
  [k: string]: any;
}
```

Can you suggest a way to suppress the exported types for these fields, even if they have titles? More like this:

```typescript
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

export interface MyModel {
  id: number;
  name: string;
  readonly: boolean;
  [k: string]: any;
}
```
I use this library to compile, but get the warining:
```
./node_modules/_prettier@1.18.2@prettier/index.js
Critical dependency: the request of a dependency is an expression

./node_modules/_prettier@1.18.2@prettier/index.js
Critical dependency: the request of a dependency is an expression

./node_modules/_prettier@1.18.2@prettier/index.js
Critical dependency: the request of a dependency is an expression

./node_modules/_prettier@1.18.2@prettier/third-party.js
Critical dependency: the request of a dependency is an expression
```
Hi there. First of all thanks for your efforts! I've been using this tool with much success and find it very effective. Second - I'm experiencing a repeated issue when I'm converting openapi schemas of type array, namely this:

```TypeError: comment.split is not a function
    at generateComment (/Users/naamanhirschfeld/workspace/polyrepo/yoda-api-specs/node_modules/json-schema-to-typescript/dist/src/generator.js:251:22)
    at generateStandaloneInterface (/Users/naamanhirschfeld/workspace/polyrepo/yoda-api-specs/node_modules/json-schema-to-typescript/dist/src/generator.js:268:37)
    at declareNamedInterfaces (/Users/naamanhirschfeld/workspace/polyrepo/yoda-api-specs/node_modules/json-schema-to-typescript/dist/src/generator.js:63:128)
    at generate (/Users/naamanhirschfeld/workspace/polyrepo/yoda-api-specs/node_modules/json-schema-to-typescript/dist/src/generator.js:13:9)
    at Object.<anonymous> (/Users/naamanhirschfeld/workspace/polyrepo/yoda-api-specs/node_modules/json-schema-to-typescript/dist/src/index.js:120:68)
    at step (/Users/naamanhirschfeld/workspace/polyrepo/yoda-api-specs/node_modules/json-schema-to-typescript/dist/src/index.js:56:23)
    at Object.next (/Users/naamanhirschfeld/workspace/polyrepo/yoda-api-specs/node_modules/json-schema-to-typescript/dist/src/index.js:37:53)
    at fulfilled (/Users/naamanhirschfeld/workspace/polyrepo/yoda-api-specs/node_modules/json-schema-to-typescript/dist/src/index.js:28:58)```
### Expected Behaviour
Generate typescript definitions from json schema.
Generate interface that defines some fields, that are optional and also defines a type for all other properties of that object.

```ts
interface Foo {
    bar?: string;
    baz?: string;
    [k: string]: string;
}
```

However this throws an Type Error, due to `prop?:string` translating to `prop: string | undefined`.
To fix this, undefined has to be added to the key-value definition.

```ts
interface Foo {
    bar?: string;
    baz?: string;
    [k: string]: string | undefined;
}
```

json2ts should do this automatically

## Actual Behaviour
json2ts does not add that `| undefined` and generates an invalid typescript definition.

## Reproduce this behaviour
json2ts: 7.1.0
node: 10.16.1
typescript: 3.6.4
os: ubuntu 18.04

<details><summary>json schema</summary>
<p>

```json
{
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "Benchmark result report format",
    "type": "array",
    "additionalItems": false,
    "items": {
        "description": "executions of benchmark tests.",
        "type": "object",
        "properties": {
            "test": {
                "type": "string",
                "description": "name of the benchmark session."
            },
            "tags": {
                "description": "set of tags associated with this benchmark session. tags can be used to filter benchmark execution runs and for execution results comparison criteria (for generic, supplemental information, use annotations)",
                "type": "object",
                "properties": {
                    "jvm": {
                        "type": "string",
                        "description": "predefined tag to identify jvm flavors"
                    },
                    "clr": {
                        "type": "string",
                        "description": "predefined tag to identify clr versions"
                    },
                    "runtime": {
                        "type": "string",
                        "description": "predefined tag to identify runtime used to execute tests (eg. Node.js 8.10, go1.12.1)"
                    },
                    "agentOperationMode": {
                        "type": "string",
                        "enum": [
                            "disabled",
                            "CIM"
                        ],
                        "description": "defines specific agent operational modes"
                    }
                },
                "additionalProperties": {
                    "type": "string"
                }
            },
            "annotations": {
                "description": "Annotations contain benchmark execution specific information. This information is purely informational and cannot be used to in test result filtering or comparison.",
                "type": "object",
                "additionalProperties": {
                    "type": "string"
                }
            },
            "iterations": {
                "description": "results of each iteration executed in the benchmark session",
                "type": "array",
                "items": {
                    "type": "object",
                    "properties": {
                        "numOperations": {
                            "type": "number",
                            "description": "number of operations executed in this iteration"
                        },
                        "measurements": {
                            "$ref": "#/definitions/MeasurementValueContainer"
                        }
                    },
                    "required": [ "numOperations", "measurements"],
                    "additionalItems": false
                }
            },
            "measurements": {
                "description": "discrete measurements done outside of iterations scope. e.g. measure memory before and after benchmark session",
                "$ref": "#/definitions/MeasurementValueContainer"
            },
            "profilingResults": {
                "description": "result string of optional profiling session. to be elaborated in more detail.",
                "type": "string"
            },
            "units": {
                "description": "optional unit definitions for measurements",
                "type": "object",
                "properties": {},
                "additionalProperties": {
                    "type": "string",
                    "default": "ns/op",
                    "examples": [
                        "ns",
                        "μs",
                        "ms",
                        "ns/op",
                        "μs/op",
                        "ms/op",
                        "bytes/sec",
                        "kb/sec",
                        "mb/sec",
                        "req/sec",
                        "bytes",
                        "kB",
                        "MB",
                        "GB",
                        "KiB",
                        "MiB",
                        "GiB"
                    ]
                }
            }
        },
        "additionalProperties": false,
        "required": [
            "test",
            "iterations"
        ]
    },
    "definitions": {
        "MeasurementValueContainer": {
            "type": "object",
            "description": "container for measurement values.",
            "properties": {
                "duration": {
                    "type": "number",
                    "description": "wall clock duration"
                }
            },
            "additionalProperties": {
                "type": "number"
            }
        }
    }
}
```

</p>
</details>

<details><summary>ts definitions</summary>
<p>

```ts
/* tslint:disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

export type BenchmarkResultReportFormat = {
    /**
     * name of the benchmark session.
     */
    test: string;
    /**
     * set of tags associated with this benchmark session. tags can be used to filter benchmark execution runs and for execution results comparison criteria (for generic, supplemental information, use annotations)
     */
    tags?: {
        /**
         * predefined tag to identify jvm flavors
         */
        jvm?: string;
        /**
         * predefined tag to identify clr versions
         */
        clr?: string;
        /**
         * predefined tag to identify runtime used to execute tests (eg. Node.js 8.10, go1.12.1)
         */
        runtime?: string;
        /**
         * defines specific agent operational modes
         */
        agentOperationMode?: "disabled" | "CIM";
        [k: string]: string;
    };
    /**
     * Annotations contain benchmark execution specific information. This information is purely informational and cannot be used to in test result filtering or comparison.
     */
    annotations?: {
        [k: string]: string;
    };
    /**
     * results of each iteration executed in the benchmark session
     */
    iterations: {
        /**
         * number of operations executed in this iteration
         */
        numOperations: number;
        measurements: MeasurementValueContainer;
        [k: string]: any;
    }[];
    /**
     * discrete measurements done outside of iterations scope. e.g. measure memory before and after benchmark session
     */
    measurements?: {
        /**
         * wall clock duration
         */
        duration?: number;
        [k: string]: number;
    };
    /**
     * result string of optional profiling session. to be elaborated in more detail.
     */
    profilingResults?: string;
    /**
     * optional unit definitions for measurements
     */
    units?: {
        [k: string]: string;
    };
}[];

/**
 * container for measurement values.
 */
export interface MeasurementValueContainer {
    /**
     * wall clock duration
     */
    duration?: number;
    [k: string]: number;
}

```

</p>
</details>


a good idea of adding support for this: https://github.com/Surnet/swagger-jsdoc
so we can add this documentation out of the box when we generate the interfaces.
Resolves #263

I'm a little unclear on the structure of the project so any feedback on the PR is gratefully received. This is a little exploratory and I have no idea if this can be said to implement the feature from json schema draft 06, but I think it covers enough for my needs.
Support const values (new in v6). https://json-schema.org/understanding-json-schema/reference/generic.html#constant-values

Input

```json
{
  "$id": "https://api.nn-group.com/t/nn-nl/2/json_schemas/forwardcache_notify_participation",
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "Foo",
  "required": ["bar"],
  "additionalProperties": false,
  "properties": {
    "bar": {
      "const": true
    }
  }
}
```

Expected output:

```ts
export interface Foo {
  bar: true;
}
```

Current output:

```ts
export interface Foo {
  bar: {
    [k: string]: any;
  };
}
```

This feature was mentioned in #120 but as the scope of that is a bit too big for beginning contributors I thought I would split this feature out.

Any hints for json-schema-to-typescript newbies would be much appreciated.
Addresses #200 . Tests seem to do what I expect and the snapshot file generates what I want as well. 

I'm hopeful this can be merged and released soon, or at least reviewed and I can reply to feedback ASAP.

Thanks!