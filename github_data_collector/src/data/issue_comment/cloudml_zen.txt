Hi,
It seems that these distance computation functions (i.e., `euclideanDistance(a, b)`) frequently return the euclidean distance upper than `0.1`.
I'm not sure this is the best solution but I think it's better than to set the larger value (e.g., use `0.3` instead of `0.1`) for similarity testing.

Cheers,
What's the status of the project?

The version published on Maven is `0.1.1` and is dated back to 2015, the version on the repository is `0.4-SNAPSHOT`, with the latest update dating back 7 months. This all raises the question of whether the project is at all alive.
Could you provide file formats to run LambdaMARTRunner.scala? Or files itself?
It would be better to support this defacto standart: https://arxiv.org/ftp/arxiv/papers/1306/1306.2597.pdf

Hello, 

Could you provide some documentation to run the examples - I'm having issues compiling, as `mvn install` is disabled, its difficult to do a `mvn exec:java` from inside the examples directory. Is there a way to get a single shaded Jar for all sub-modules? The jar created in assembly/target does not include the examples, and with install disabled I'm not clear how to run an example.

Any advice?

Craig
I use the fm algorithm in zen to train a dataset, which has 15 partition and about 600MB. The training is so slow, about 1h30m. The xgboost and lr algorithm only cost 30min. 


I get the exception below whenever I run the FM code on any of my real datasets. It seems to break roughly when you have >100k training examples and >100 machines.

```
java.lang.ArrayIndexOutOfBoundsException: -1
    at org.apache.spark.graphx.util.collection.GraphXPrimitiveKeyOpenHashMap$mcJI$sp.apply$mcJI$sp(GraphXPrimitiveKeyOpenHashMap.scala:64)
    at org.apache.spark.graphx.impl.EdgePartition.updateVertices(EdgePartition.scala:91)
    at org.apache.spark.graphx.impl.ReplicatedVertexView$$anonfun$2$$anonfun$apply$1.apply(ReplicatedVertexView.scala:75)
    at org.apache.spark.graphx.impl.ReplicatedVertexView$$anonfun$2$$anonfun$apply$1.apply(ReplicatedVertexView.scala:73)
    at scala.collection.Iterator$$anon$11.next(Iterator.scala:328)
    at scala.collection.Iterator$$anon$13.hasNext(Iterator.scala:371)
    at scala.collection.Iterator$$anon$11.hasNext(Iterator.scala:327)
    at org.apache.spark.shuffle.sort.UnsafeShuffleWriter.write(UnsafeShuffleWriter.java:163)
    at org.apache.spark.scheduler.ShuffleMapTask.runTask(ShuffleMapTask.scala:73)
    at org.apache.spark.scheduler.ShuffleMapTask.runTask(ShuffleMapTask.scala:41)
    at org.apache.spark.scheduler.Task.run(Task.scala:89)
    at org.apache.spark.executor.Executor$TaskRunner.run(Executor.scala:214)
    at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
    at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
    at java.lang.Thread.run(Thread.java:745)
```

Here's the driver stacktrace:

```
org.apache.spark.rdd.RDD.mapPartitions(RDD.scala:706)
com.github.cloudml.zen.ml.partitioner.DBHPartitioner$.partitionByDBH(DBHPartitioner.scala:70)
com.github.cloudml.zen.ml.recommendation.FM$.initializeDataSet(FM.scala:498)
```

The odd thing is that the driver stacktrace shows the error happening in `initializeDataSet`, but it doesn't seem to occur until training is done. To speed reproduction of the problem I set `numIterations` to 1.


I'd like to make any changes necessary to graphx to use the upstream library. This repo is still on graphx 1.4 I believe and so we're not getting any of the graphx bug fixes.

I sent https://github.com/cloudml/zen/pull/56 and https://github.com/cloudml/zen/pull/57 to reduce the diff between graphx2 and upstream

I sent https://github.com/apache/spark/pull/14291 to upstream addition of a new method

Changes left:
- [`GraphImpl.fromEdgeRDD` visibility](https://github.com/cloudml/zen/commit/c8a8b0ad8dd2224ebd631e48f7acb72f2920be3b)
- [`RoutingTablePartition.routingTable` visibility](https://github.com/cloudml/zen/commit/8a64a141685d6637a993c3cc6d1788f414d6c3cf)
- [Immutability in EdgePartition](https://github.com/cloudml/zen/commit/c93ee631609a141f327313e2cf5add6d1be8379f)
- Can you explain why [this change in `GraphImpl`](https://github.com/cloudml/zen/commit/9f5a6e72af4c95931457913860457fc321f52f7b) was necessary?

If I run `mvn test` I get:

```
Tests: succeeded 4, failed 5, canceled 0, ignored 8, pending 0
*** 5 TESTS FAILED ***
```
