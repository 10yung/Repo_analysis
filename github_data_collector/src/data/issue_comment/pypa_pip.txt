* workflow vs job name
* TOX_PARALLEL_NO_SPINNER
* vendoring
* env state logging
* Pip cache
One way (and before the rewrite release the only way) to bootstrap a virtual environment in an offline environment is to point pip to some bundled wheels via the ``--find-links`` parameter. The problem is that if this folder contains both wheels that support the target environment and wheels that don't (e.g. with setuptools 45 dropping python 2), pip does not pick the last supported version of a package, but instead picks the highest version, and then fails at install time.

Triggered by https://github.com/pypa/virtualenv/issues/1496.
**Environment**

* pip version: 19.3.1
* Python version: 3.6.9, also tested with 3.7
* OS: linux 


**Description**

Package A is being installed and depends on package B version 1 and package C.
Package C depends on package B version 2.

Package B is already installed in version 1.
When I now run `pip install .` in package A, B is not upgraded to version 2.

This happend because a package depended on astropy and numpy, where numpy was required to 
be > 1.15. Astropy depends on numpy > 1.16. 
When installing said package in an environment where numpy 1.15 is installed, it does not get updated, although astropy is downloaded and installed and requires numpy 1.16.


**Expected behavior**
Upgrade Package B (numpy) to the version required by the dependency.

**How to Reproduce**
<!-- Describe the steps to reproduce this bug. -->

setup.py of test package: 
```
from setuptools import setup, find_packages


setup(
    name='testpipdep',
    packages=find_packages(),
    version='0.1.0',
    author='me',
    install_requires=[
        'astropy>=4',   # requires numpy 1.16
         'numpy>=1.15',
    ],
)
```

Commands:
```
$ python3 -m venv testenv
$ . testenv/bin/activate
$ pip install -U pip
$ pip install numpy==1.15
$ pip install ../testpackage
```

**Output**

```
Obtaining file:///home/maxnoe/testpackage
Collecting astropy>=4
  Using cached https://files.pythonhosted.org/packages/45/8a/1392bcc8e2f666aa7b7652b302b3642ca0cadf56b606e5d74550f8f8250a/astropy-4.0-cp36-cp36m-manylinux1_x86_64.whl
Requirement already satisfied: numpy>=1.15 in /home/maxnoe/testenv/lib/python3.6/site-packages (from testpipdep==0.1.0) (1.15.4)
ERROR: astropy 4.0 has requirement numpy>=1.16, but you'll have numpy 1.15.4 which is incompatible.
Installing collected packages: astropy, testpipdep
  Running setup.py develop for testpipdep
Successfully installed astropy-4.0 testpipdep
```
Quoting @chrahunt in https://github.com/pypa/pip/issues/7571#issuecomment-571893409:

> One issue with globally managing the temporary build directory is that `InstallCommand` and `WheelCommand` catch a `PreviousBuildDirError` and then explicitly set `options.no_clean`. This prevents us from taking a straightforward approach for configuring global tempdir handling if `options.no_clean` is set.

From my reading of the implementation, the problem is that the temp directory relies on the registry to decide whether it should clean up, but that decision is made on instantiation, so the `PreviousBuildDirError` handler cannot affect that decision. This patch would delay that decision until cleanup time instead, so the `PreviousBuildDirError` handler can be kept to tell the registry to stop the cleanup.

Feel free to close this if you think this is not the way to go.
**Environment**

* pip version: 19.3.1 and master
* Python version: 3.8.1
* OS: Windows 10

**Description**
Copied from [here](https://github.com/pypa/pip/issues/7599#issuecomment-575192581):

> Oh, if additional arguments are needed to run pip's tests out of the box, that's not right.

The commands to run the tests on Windows (from the CI config) are:

```
tox -e py -- -m unit -n auto
tox -e py -- -m integration -n auto
```

Those work. But just `tox -e py` produces loads of errors, suggesting that there are tests that are marked as neither "unit" nor "integration" that are failing on Windows. Worse, after running the incorrect command, I found masses of unexpected packages installed *in my system Python*! (I was running tox from a venv created just for testing pip, so everything should have been 100% isolated from the system install. It was bad enough that reinstalling my system Python was the easiest fix.

I'll make this comment into a separate issue, but honestly I don't want to spend a lot of time fighting the test suite into submission on Windows, particularly if it involves trashing my system Python on a regular basis üôÅ So if anyone else wants to pick this up, they are welcome to do so.
Following up https://github.com/pypa/pip/pull/7596/files#r366809139

Currently there are no tests around special characters for things like `&subdirectory=`, `#egg=`, and other parts of the URL like auth. We should add those and verify they are all working. (`egg` is probably fine since all valid package names are URL-safe anyway, but it won‚Äôt hurt to at least understand its behaviour.)

Related: #7596 #7604
**What's the problem this feature will solve?**
When the new resolver is implemented, we will need to have a way to allow users to test it. One option is to add a new option to pip to allow selection of which resolver to use.

**Describe the solution you'd like**
Add a pip option `--resolver=[legacy|new]`. Name of the option and the values can be discussed. Choosing "legacy" will select the current resolver, choosing "new" will select the new resolver.

Notes:
* The default should initially be "legacy", so that the new resolver is opt-in. After a suitable period of testing, the default should change to "new".
* The option should be temporary, being removed along with the legacy resolver code once the new resolver is considered "final".
* Adding the option in advance of the new resolver code [has been discussed](https://github.com/pypa/pip/issues/7531#issuecomment-574166720) - it's not yet clear what benefit this would have, but it is certainly possible.

**Alternative Solutions**
A boolean option like `--enable-new-resolver` could be used instead. The transition process might be more complex with such an option.

The new resolver could be made available simply as a separate feature branch of pip. This would make it significantly harder for users to try the new code, though.

**Additional context**
See [Zulip](https://python.zulipchat.com/#narrow/stream/218659-pip-development/topic/opt-in.20flag) for some additional discussion.
**Environment**

* pip version: 19.3.1
* Python version: 3.7.3
* OS: debian Buster

The machine is setup in a secure / isolated network with no internet connection. I have two machines supplying a PyPi server (namely hereafter `index0` and `index1`).

My `/etc/pip.conf` looks like this :

```
[global]

index = http://index0:8080
index-url = http://index0:8080/simple
extra-index = http://index1:8080
extra-index-url = http://index1:8080/simple
trusted-host = index0
                        index1
timeout = 100
```

**Description**

When installing a package present on `index0`'s PyPi server, everything works fine. But when installing a package that isn't present on `index0` but is on `index1`, pip tries to contact `https://pypi.org/simple/<package_name>`. This results in pip retrying 5 times to request this URL in vain eventhough I have my `pip.conf` overriding the index URLs and where to search for packages. This is extremely similar to #6799 but is not fixed by upgrading pip or python or system whatsoever.

**Expected behavior**

Pip would skip index0 upon failure and directly request index1.

**How to Reproduce**

/

**Output**

I am not able to copy / paste the output of the commands directly since it happens on a network-isolated machine. However, output is extremely similar to that of #6799 and contains :

```
$ pip install --verbose <package>
[creating some temp dirs]
Looking in indexes: http://index0:8080/simple, http://index1:8080/simple
* http://index0:8080/simple/<package>
* http://index1:8080/simple/<package>
Getting page http://index0:8080/simple/<package>
Found index url http://index0:8080/simple
Starting new HTTP connection (1): index0:8080
http://index0:8080 "GET /simple/<package>/ HTTP/1.1" 303 0
Looking up "https://pypi.org/simple/<package>" in the cache
```

And then a bunch of pointless retries on this request before successfully contacting index1 and installing the package as expected.

This is pretty annoying I must admit. It would be less of a pain would I be able to override the default retry count in the pip configuration but I haven't been able to find such parameter anywhere.

Thanks in advance for the quick reply
Finishing #6958.
Given the recent automation added to our release process (see #2314 for details), I know that it'll work on MacOS (and, likely Linux) systems because I've tested that. I expect that it works on Windows, but I've not been able to test that.

It'd be great if someone could try it out on Windows, to make sure things work as expected there as well. This is basically someone running the `prepare-release` and `build-release` nox commands, to make sure they work well on Windows.

I've assigned folks that I know run Windows machine and informally agreed to try this when they'd find time to tackle this. If a new contributor wants to try this out, please go through step 1-4 here: https://pip.pypa.io/en/latest/development/release-process/#creating-a-new-release