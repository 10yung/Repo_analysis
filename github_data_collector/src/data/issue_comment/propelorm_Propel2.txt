With 7.4 on the base models, the lifecycle callbacks use the `parent` keyword.  However, there isn't a parent class.

`Cannot use "parent" when current class scope has no parent`

I'm unsure if Propel is doing anything fancy that'd allow this code to actually execute properly.  Why is this written the way it is?  Can it be safely removed?  Is it possible to refactor this without being a huge rewrite?
After a recent `composer update`, my Propel2 validation behaviors began failing.

Error message given include:
```
In Inline.php line 450:
                                                                                                                                                                 
  Colons must be followed by a space or an indication character (i.e. " ", ",", "[", "]", "{", "}") at line 1 (near "{column: per_firstname, validator: Length   
  , options: {min:2, max: 50}}").                                                                                                                                
                       
```

```
In Inline.php line 450:
                                                                                                                                                                 
  Colons must be followed by a space or an indication character (i.e. " ", ",", "[", "]", "{", "}") at line 1 (near "{column: linkname, validator: Length, opt   
  ions: {min:2, max: 50}}").
```

It looks like `symfony/yaml` updated (since it's not specified in Propel2's `composer.json` file) from `3.4.35` to `4.3.8`, which introduced a breaking change to Propel2's reliance on it for the validate behavior.

I resolved it by specifying `"symfony/yaml":"^3.4"` in my project's composer.json.

Using aliases in joins results in an additional CROSS JOIN being added to the query. I see that this was originally raised in #991 back in 2015 and marked as a bug, but was closed by the OP shortly after before any fix was released. Maybe the premature closing of that issue is the reason this bug fix never got to the development stage?

Doesn't look like there's much movement with Propel2 updates these days, but I still wanted to bring this issue back, for the record.
Propel has the ability to create config values from environment variables. During development it's much easier to load these variables from the .env file. 
Refs https://github.com/propelorm/Propel2/issues/1521
package should be bumped to 5.6+ in composer and docs as well, no point maintaining 5.5 anymore here.

Lots of fails though still in Travis that require fixing.

There seem to now surface more severe issues, as well:

> Class 'Symfony\Component\Translation\IdentityTranslator' not found


We have found several issues in our pre-trial of PHP74 in Travis.
Currently, the test matrix here fails and does not yet include this new version.

Maybe we can share and create a required patch here to make it compatible with the new soon to be released PHP minor (dec 2019).
Hello,

I just add in the list the config component which is referenced in composer.json
Is this good for you ?

Cheers ðŸ˜‰
Code sniffer is not happy about the additional unneeded newline in the docblocks.
This solves it.
Similar to #1478 , I used the "easy mode" to init the schema and model from an existing postgresql database, which all worked fine (barring invalid PHP names being generated, that's another issue).

However, since the schema generation did not add `identifierQuoting="true"` to the database node, each query dies with a `SQLSTATE[42703]: Undefined column` error.

Manually adding the setting and rebuilding the model seems to work fine, but why is it missing in the first place? Or rather, if the default is intended to be enabled, why is it not working?
I think there is a bug in the file
 src/Propel/Generator/Builder/Om/ObjectBuilder.php 

line: 5780

`        if ($reloadOnInsert || $reloadOnUpdate) {
            $script .= "
            if (\$reloadObject) {
                \$this->reload(\$con);
            }
";`

**reload** function has a  connection as second parameter, first is deep and in this case  inside **reload** connection will be null