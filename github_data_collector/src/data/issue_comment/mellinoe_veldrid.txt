Hi @mellinoe,

I've added in a RenderTest as you suggested which can reproduce the bug on the D3D11 backend. I've also given you access to modify the branch so feel free to change whatever you feel like, no need to check with me first.

I loaded the details into the issue here: #247 
Hi @mellinoe, this is the bug that I was talking about on Gitter the other day where using a render target as a texture view binding doesn't always work on D3D11 backend.

Tl;dr of the bug as far as I can see is:
* First render pass writes to render target 1 and has render target 2 as a texture view binding
* A second render pass runs writing to render target 2 with a different shader which has no texture bindings (this implicitly unbinds render target 2 from the first shader)
* A third render pass runs writing back to render target 1 with render target 2 as a texture view binding again - this time, the texture view binding doesn't get bound back to the shader properly

I've done a little digging and it looks like when render target 2 gets unbound, it isn't removed from the list of bound texture views in D3D11CommandList, therefore in the third pass, it thinks it is already bound and doesn't actually bind it properly (I could be way off here though).
Let me know if you have any questions

PR for the repro test is here: #248 
As the title says this will update ImageSharp to the latest released version and makes some minor adjustments to the changes in this version.

This will fix issue [Issue240](https://github.com/mellinoe/veldrid/issues/240)
Creating texture arrays with 1 layer is impossible, as implemented [here](https://github.com/mellinoe/veldrid/blob/0be2107806d3f3543132fdfdead2443fee1713a3/src/Veldrid/Vk/VkTextureView.cs#L60)
I need the latest Imagesharp because of a bugfix. When I upgrade it to beta 7 the following code throws an exception:
```
var texPath = Path.Combine(AppContext.BaseDirectory, "Assets", imageName);
var imTex = new ImageSharpTexture(texPath, false);
```
The exception is: 
```
System.MissingMethodException: Method not found: 'SixLabors.ImageSharp.Image`1<SixLabors.ImageSharp.PixelFormats.Rgba32> SixLabors.ImageSharp.Image.Load(System.String)'.
   at Veldrid.ImageSharp.ImageSharpTexture..ctor(String path, Boolean mipmap)
   at Engine.ImageManager.Load(String imageName) ...
```
The issue is not present with ImageSharp beta 6. I am using Veldrid 4.7.0, .NET Core 3
Any plans for OpenXR support?

As far as I know, Oculus already has preliminary support.
Hi, I wanted to check in on the hi dpi support branch: https://github.com/mellinoe/veldrid/tree/hi-dpi

It looks like it hasn't been merged in yet, what are the plans for this?

Thanks.
All in title.
Looks like imgui itself supports those platforms, but veldrid does not. 

Is that planned to be addressed and fixed?
I don't think there's anything in Veldrid's D3D11 backend that prevents it from supporting older GPUs. Just tested my project on a laptop with an NVIDIA 9600M GT (which is a D3D10-era GPU), and this is all I had to change in Veldrid in order for it to work. 

Note that I had to remove the HResult check. That's because on my old laptop I'm getting a different error code when the debug runtime is missing (0x80004005, which can mean pretty much anything).

There's also one thing I'm wondering about. What is the point of trying to create a D3D device twice in a row with the exact same arguments? Could it be that the second call was supposed to have different arguments, and this is just a bug?
I write a project on my Windows machine. There everything works well with GraphicsBackend.Direct3D11. Now I try to get this project to run on Linux-Ubuntu 18 and get this error:

_Unhandled Exception: System.NullReferenceException: Object reference not set to an instance of an object.
   at Veldrid.Vk.VkCommandList.GetStagingBuffer(UInt32 size) in C:\projects\veldrid\src\Veldrid\Vk\VkCommandList.cs:line 1163
   at Veldrid.Vk.VkCommandList.UpdateBufferCore(DeviceBuffer buffer, UInt32 bufferOffsetInBytes, IntPtr source, UInt32 sizeInBytes) in C:\projects\veldrid\src\Veldrid\Vk\VkCommandList.cs:line 728
   at Veldrid.CommandList.UpdateBuffer[T](DeviceBuffer buffer, UInt32 bufferOffsetInBytes, T[] source) in C:\projects\veldrid\src\Veldrid\CommandList.cs:line 826_

I first tried GraphicsBackend.OpenGL and then I installed GraphicsBackend.Vulkan. Every time the same error.

GraphicsDevice and Window seem to work and a black window opens up to this error, when i try to update the first Buffer cl.UpdateBuffer(_vb, 0, s_vertices),  _vb and s_vertices are not null. 
Is it maybe a permission thing? 

Would be really great if someone could help me,
thanks

