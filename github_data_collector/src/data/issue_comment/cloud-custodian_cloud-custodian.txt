some of the service apis will return back all resources if we issue an api call for an empty set of ids. when using get_resources we should explicitly check for an empty set and return in the base describe source / or query resource manager get_resources method.
closes #5235 
Hi Team,

Is there a way that I can resize an EC2 based on resource tag?. Am trying to implement AWS trusted adviser's recommendations and am tagging ec2 with current size as well as recommended size.

Example Tags
cSize : t3.large
rSize : t3.small

Document says hard-coding the type map.

type-map:
c5.18xlarge: c5.9xlarge
m5.24xlarge: m5.12xlarge

Can we get this mapping from the instance tags?
first step to actually exposing these in documentation and schema, validate they are valid, and fixes those that are not.

this also includes a data source of valid iam permissions from the iam permission generator and a script to update that data set. we store this in the repo (guideline is unit tests should run offline), in a prettyprinted, ordered json format (196kb), as it will enable minimal updates and readable diffs. The alternative of gzip data set (19k) feels as though it would grow larger over time with changes. Note the dataset is missing elbv2 permissions, so those are whitelisted in the permission validity checking test, and will need additional scrutiny in prs.


Maybe I'm simply misunderstanding what each of these filters do, but I found that `present` and `not absent` return different counts.

# Cloud Custodian version
```
$ custodian version
0.8.45.4
```

# Steps to reproduce
I created 4 users in an aws account, and a policy named `Test`. I attached the Test policy to 1 user. Then I created the following custodian policy:
```
  - name: iam-users-without-test-policy
    resource: aws.iam-user
    description: Number of users without Test policy
    filters:
      - type: policy
        key: PolicyName.Test
        value: absent
```
Now executing the policy:
```
$ custodian run -d --output-dir out play-policies.yml
2020-01-16 14:27:42,757: custodian.policy:INFO policy:iam-users-without-test-policy resource:aws.iam-user region:us-west-2 count:1 time:0.99
```
`count:1`
I'm new to custodian, so I didn't realize that this means I'm expecting that no users will have this Test policy. Fine, let's change the value to `present` instead:
```
  - name: iam-users-without-test-policy
    resource: aws.iam-user
    description: Number of users without Test policy
    filters:
      - type: policy
        key: PolicyName.Test
        value: present
```
Now this is weird. I'm expecting this to be the opposite count. I have 4 users, and 1 user has the Test policy attached, so the count should be 3, right? Let's see:
```
$ custodian run -d --output-dir out play-policies.yml
2020-01-16 14:30:57,735: custodian.policy:INFO policy:iam-users-without-test-policy resource:aws.iam-user region:us-west-2 count:0 time:0.94
```
`count:0`
Well that's weird, the count was actually 0... What if we try changing the custodian policy from `present` to `not absent`?
```
  - name: iam-users-without-test-policy
    resource: aws.iam-user
    description: Number of users without Test policy
    filters:
      - not:
        - type: policy
          key: PolicyName.Test
          value: absent
```
Running this policy:
```
$ custodian run -d --output-dir out play-policies.yml
2020-01-16 14:34:09,843: custodian.policy:INFO policy:iam-users-without-test-policy resource:aws.iam-user region:us-west-2 count:3 time:1.06
```
`count:3`

Ok, so I finally got what I expected. But now I'm really confused because `present` is different from `not absent`. Is this a bug, or am I just not understanding the nuances of custodian?
Since each resource already has a `permissions` block. It would be nice to expose those permissions using the following command

    custodian schema aws.ec2

This would allow easier creation of least privilege IAM roles for policies instead of a blanket IAM role. We could even have builtin iam role validation for a given policy to make sure the iam role has the required perms.

    custodian validate --iam-role "cloud-custodian" policy/some-policy.yml

References:
* https://github.com/cloud-custodian/cloud-custodian/issues/1693
I'd like to test out my template before sending an email. Currently to do this I need to

1. Disable my mailer lambda by disabling the cw alarm trigger
2. Run my policy to create/update the policy lambda
3. Manually execute my policy lambda to send a message to SQS
4. Dump out the message in SQS using awscli to get `policy-lambda.message.json`
5. Base64 decode the `.Messages[].Body` key to get `policy-lambda.zlib`
6. Uncompress the zlib using gzip to get `policy-lambda.json`
7. Delete the message from the SQS queue
8. Re-enable my mailer lambda
9. `c7n-mailer-replay -p policy-lambda.json -T --config mailer.yml`

If I can print out the plain SQS message from the policy, I could avoid using the above steps completely. The JSON structure of the sqs message seems straightforward enough to script for.

```json
{
  "event": null,
  "account_id": "snip",
  "account": "snip",
  "region": "us-west-2",
  "execution_id": "snip",
  "execution_start": 1579115895.6639857,
  "policy": {
    "_": "json_policy_here",
    "name": "c7n-mailer-test",
    "resource": "sqs",
    "etc": "..."
  },
  "action": {
    "_": "json_action_here",
    "type": "notify",
    "template": "test-template",
    "priority_header": "2",
    "subject": "testing the c7n mailer",
    "etc": "..."
  },
  "resources": [
    {
      "_": "outputted resources json here"
    }
  ]
}
```

Could this be integrated into `c7n-mailer-replay`, `custodian`, or a separate script?

Reference:
* Separate script: https://gist.github.com/nitrocode/858782c706838ba11779539ca2b831c9
Per https://awsapichanges.info/archive/changes/78305c-securityhub.html

Security Hub added native support for the following resources. Note they continue to use their own bespoke naming convention thats completely idiosyncratic. 

Custodian supported these in security hub via the Other generic resource, investigate. Also see if we can chat with the service team to have better uniformity to integration, its very bespoke and labor intensive, compare to ssm ops center which has more features and more resource support.

- [ ] AwsElbv2LoadBalancer
- [ ] AwsKmsKey
- [ ] AwsIamRole
- [ ] AwsSqsQueue
- [ ] AwsLambdaFunction
- [ ] AwsSnsTopic
- [ ] AwsCloudFrontDistribution

During **onhours** when instances are being started and there is an error - 

> "errorCode": "Server.InsufficientInstanceCapacity",
>     "errorMessage": "We currently do not have sufficient t3a.large capacity in the Availability Zone you requested (us-east-1d). Our system will be working on provisioning additional capacity. You can currently get t3a.large capacity by not specifying an Availability Zone in your request or choosing us-east-1a, us-east-1b, us-east-1c, us-east-1f."

Instances that are not t3a.large are also not being started. I understand this is not a code issue but a corner case. Because of this we have to turn instances manually and preventing from using offhours.
closes ##5232