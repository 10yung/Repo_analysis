
**Is your feature request related to a problem? Please describe.**

I've been setting up a Content Security Policy (CSP) for a react-static site and I've noticed that the way static html is generated currently requires `script-src 'unsafe-inline'` and `style-src 'unsafe-inline';` policies. Adding these policies opens up XSS and other attack vectors, so I'd prefer if the site worked without these policies.

Looking at a `react-static-example-basic` site, there are two issues. One is an inline script with the route info:

```html
<script type="text/javascript">
    window.__routeInfo = JSON.parse("{\"template\":\"READACTED/my-static-site/src/pages/index.js\",\"sharedHashesByProp\":{},\"data\":{},\"path\":\"/\",\"sharedData\":{},\"siteData\":{}}");
</script>
```

And two divs with the following inline style:

```html
<div style="outline:none" tabindex="-1" role="group">
```

**Describe the solution you'd like**

It would be great if there was an option to not to include the inline script and load the route info from the `routeInfo.json` at the cost of performance. I'm not sure where the `outline:none` style comes from and why it's necessary, but it would be great if that could be excluded somehow as well.

**Describe alternatives you've considered**

For the inline script, one could compute its hash and insert a meta tag with the CSP option  `script-src '<hash-algorithm>-<base64-value>';`, but I'm not sure how this would play with additional CSP configurations eg. from headers.

Happy to provide a PR with some guidance :)
<!--
ARE YOU LOOKING FOR HELP OR HAVE A QUESTION ABOUT IMPLEMENTATION?
If so, then STOP right there! We have a dedicated [Spectrum Community](https://spectrum.chat/react-static) where you can ask all the questions you want.

IF YOU OPEN AN ISSUE AS A QUESTION ABOUT IMPLEMENTATION, IT WILL BE CLOSED IMMEDIATELY AND YOU WILL BE DIRECTED TO JOIN THE [SPECTRUM COMMUNITY](https://spectrum.chat/react-static)
-->

### Bug

Internet explorer with compatibility found in the guide does not work. Static routes will show a 404 and when using things like `useRouteData` or `withRouteDate` the site will never load. There are also no console.error messages so I'm not sure where the issues lies.


### Environment

```

  System:
    OS: Windows 10 10.0.18363
    CPU: (12) x64 AMD Ryzen 5 3600 6-Core Processor
    Memory: 6.76 GB / 15.93 GB
  Binaries:
    Node: 12.13.0 - C:\Program Files\nodejs\node.EXE
    npm: 6.12.0 - C:\Program Files\nodejs\npm.CMD
  Browsers:
    Edge: 44.18362.449.0
  npmPackages:
    react: ^16.9.0 => 16.12.0
    react-dom: ^16.9.0 => 16.12.0
    react-hot-loader: ^4.12.11 => 4.12.18
    react-static: ^7.2.0 => 7.2.3
    react-static-plugin-reach-router: ^7.2.0 => 7.2.3
    react-static-plugin-sitemap: ^7.2.0 => 7.2.3
    react-static-plugin-source-filesystem: ^7.2.0 => 7.2.3
    react-static-plugin-typescript: ^7.2.0 => 7.2.3
    babel-polyfill: "^6.26.0",

```

### Steps to Reproduce the problem

**Base your steps off of any freshly installed react-static template!**

1.  Use  react-static template typescript (I'm sure others work)
2.  Add IE compatibility
```
    webpack: (config, { stage }) => {
        config.entry = [
            'babel-polyfill',
            ...(Array.isArray(config.entry) ? config.entry : [config.entry]),
        ];
        return config;
    },
```
3.  `npm start`

### Expected Behavior

Routes to load fine

### Reporting a bug?
Error: EINVAL: invalid argument, mkdir 'E:\www\test-react-static\dist\templates\E:\www\test-react-static\src\pages


### Environment

`npx envinfo --system --npmPackages react* --binaries --npmGlobalPackages react* --browsers` 

here:

```

  System:
    OS: Windows 10 10.0.19041
    CPU: (6) x64 AMD Phenom(tm) II X6 1090T Processor
    Memory: 659.62 MB / 12.00 GB
  Binaries:
    Node: 12.13.0 - C:\Program Files\nodejs\node.EXE
    npm: 6.13.6 - C:\Program Files\nodejs\npm.CMD
  Browsers:
    Edge: 44.19041.1.0
    Internet Explorer: 11.0.19041.1
  npmPackages:
    react: ^16.9.0 => 16.12.0
    react-dom: ^16.9.0 => 16.12.0
    react-helmet: ^5.2.1 => 5.2.1
    react-static: ^7.2.0 => 7.2.3
    react-static-plugin-reach-router: ^7.2.0 => 7.2.3
    react-static-plugin-sitemap: ^7.2.0 => 7.2.3
    react-static-plugin-source-filesystem: ^7.2.0 => 7.2.3

```

of course include any other package versions here if relevant. 

### Steps to Reproduce the problem

1.  react-static build --staging

Hey, I have a Navigation component and i need to access the current path to set current active item and also some other operations based on current user location. I've used Reach-router's Location API and it working on browser but in build time i gets errors that location is undefined. Yes, that's obvious because `document` and `window` is not exists in node, So what is the right way to do that? I'm looking for a document for this problem. I've also opened a question in Spectrum but no one answered. Thanks.


[Get current path in v7](https://spectrum.chat/react-static/general/get-current-path-in-v7~01c70eeb-48b9-44cd-a5c7-0a7dedc39ed8)

Version: react-static 7.0.0
When I set a nested page that contains the `:` character in the `path` argument within `getRoutes` of `static.config.js` I end up with an unwanted `:` character at the end of the resulting URL.

So for example, if I set the path to `example:-post`, the resulting URL will be `example:-post:`. For some reason the extra `:` character is being added at the end. This happens on dev and when doing `yarn build`.

When I prepend a parent path the string, everything works as expected. For example if I set the path to `/post/example:-post` instead, I **DON'T** end up with the extra `:` character.

> NOTE: I only hardcoded the path string for debug purposes.

Here's some screenshots:

![Screen Shot 2019-12-23 at 2 44 15 pm](https://user-images.githubusercontent.com/6222411/71344855-47e91080-2596-11ea-81d2-0b6fe0807bb9.png)

Then after doing `yarn build`:
![Screen Shot 2019-12-23 at 2 44 58 pm](https://user-images.githubusercontent.com/6222411/71344883-5afbe080-2596-11ea-9b09-d59af76d53ca.png)


Prepending a parent path works:
![Screen Shot 2019-12-23 at 2 45 38 pm](https://user-images.githubusercontent.com/6222411/71344922-7109a100-2596-11ea-83c1-d034c9ff4ad8.png)

Then after doing `yarn build`:
![Screen Shot 2019-12-23 at 2 46 36 pm](https://user-images.githubusercontent.com/6222411/71344942-7961dc00-2596-11ea-9dc9-ddb2419373f8.png)


-----


### Environment

```

System:
    OS: macOS 10.15.2
    CPU: (4) x64 Intel(R) Core(TM) i5-4278U CPU @ 2.60GHz
    Memory: 317.23 MB / 8.00 GB
    Shell: 5.7.1 - /bin/zsh

npmPackages:
    @reach/router: ^1.2.1 => 1.2.1 
    axios: ^0.19.0 => 0.19.0 
    babel-eslint: ^10.0.2 => 10.0.3 
    eslint: ^6.1.0 => 6.8.0 
    eslint-config-react-app: ^5.0.1 => 5.1.0 
    eslint-config-react-tools: ^1.1.7 => 1.1.7 
    eslint-plugin-flowtype: ^4.2.0 => 4.5.2 
    eslint-plugin-import: ^2.18.2 => 2.19.1 
    eslint-plugin-jsx-a11y: ^6.2.3 => 6.2.3 
    eslint-plugin-react: ^7.14.3 => 7.17.0 
    jdown: ^1.0.3 => 1.0.3 
    react: ^16.9.0 => 16.12.0 
    react-dom: ^16.9.0 => 16.12.0 
    react-static: ^7.2.0 => 7.2.3 
    react-static-plugin-reach-router: ^7.2.0 => 7.2.3 
    react-static-plugin-sitemap: ^7.2.0 => 7.2.3 
    react-static-plugin-source-filesystem: ^7.2.0 => 7.2.3 
    serve: ^11.1.0 => 11.2.0

Binaries:
    Node: 12.9.1 - /usr/local/bin/node
    Yarn: 1.12.1 - /usr/local/bin/yarn
    npm: 6.10.3 - /usr/local/bin/npm
    Watchman: 4.9.0 - /usr/local/bin/watchman

Browsers:
    Chrome: 79.0.3945.88
    Safari: 13.0.4

```

### Steps to Reproduce the problem

**Base your steps off of any freshly installed react-static template!**

1.  Create routes with nested blog post pages.
2.  Set the path string with a `:` character without any prefix/parent path.
eg. `path: "example:-post"`
3.  `yarn build`

### Expected Behavior

It should not have the added `:` character at the end of the path.

My react-static project resides in `http://mywebsite` and I'm trying to fetch from a local CraftCMS install: `const projects = await axios.get('http://craftapi/projects?page=1')`

But I get an error saying `Error: socket hang up`

Is it some CORS issue? I tried using this approach https://github.com/nozzle/react-static/issues/380 but to no avail. Is there another way?
Hi, I am new to react-static, I like how it easily enables me to generate static web pages with react and markdown.

I found that mdx plugin will automatically generate route for mdx files.
but how to get correspondent routeData from the mdx file?

thanks
I just fetch the upstream on my fork of the repo and merged that in my own master branch:

```zsh
$ git checkout master
$ git fetch upstream
$ git merge upstream/master
```

Everything worked OK but I'm stuck with a dirty master branch:

```zsh
On branch master
Your branch is up to date with 'origin/master'.

Changes not staged for commit:
  (use "git add <file>..." to update what will be committed)
  (use "git restore <file>..." to discard changes in working directory)
	modified:   media/flow.png
	modified:   media/media.sketch
	modified:   media/react-static-emblem-on-white.png
	modified:   media/react-static-emblem.png
	modified:   media/react-static-logo-2x.png
	modified:   media/react-static-logo.png
	modified:   packages/react-static/templates/blank/src/logo.png

no changes added to commit (use "git add" and/or "git commit -a")
```

Running `git diff`, I get the following:

```zsh
warning: CRLF will be replaced by LF in media/flow.png.
The file will have its original line endings in your working directory
warning: CRLF will be replaced by LF in media/media.sketch.
The file will have its original line endings in your working directory
warning: CRLF will be replaced by LF in media/react-static-emblem-on-white.png.
The file will have its original line endings in your working directory
warning: CRLF will be replaced by LF in media/react-static-emblem.png.
The file will have its original line endings in your working directory
warning: CRLF will be replaced by LF in media/react-static-logo-2x.png.
The file will have its original line endings in your working directory
warning: CRLF will be replaced by LF in media/react-static-logo.png.
The file will have its original line endings in your working directory
warning: CRLF will be replaced by LF in packages/react-static/templates/blank/src/logo.png.
diff --git a/media/flow.png b/media/flow.png
index 13f99df..b4ea1a4 100644
Binary files a/media/flow.png and b/media/flow.png differ
diff --git a/media/media.sketch b/media/media.sketch
index d26a064..6b2f857 100644
Binary files a/media/media.sketch and b/media/media.sketch differ
diff --git a/media/react-static-emblem-on-white.png b/media/react-static-emblem-on-white.png
index 3005eed..ea9a42f 100644
Binary files a/media/react-static-emblem-on-white.png and b/media/react-static-emblem-on-white.png differ
diff --git a/media/react-static-emblem.png b/media/react-static-emblem.png
index c715d4a..1781397 100644
Binary files a/media/react-static-emblem.png and b/media/react-static-emblem.png differ
diff --git a/media/react-static-logo-2x.png b/media/react-static-logo-2x.png
index 0114ef6..651aa90 100644
Binary files a/media/react-static-logo-2x.png and b/media/react-static-logo-2x.png differ
diff --git a/media/react-static-logo.png b/media/react-static-logo.png
index 2abb946..85a5268 100644
Binary files a/media/react-static-logo.png and b/media/react-static-logo.png differ
diff --git a/packages/react-static/templates/blank/src/logo.png b/packages/react-static/templates/blank/src/logo.png
index c715d4a..1781397 100644
Binary files a/packages/react-static/templates/blank/src/logo.png and b/packages/react-static/templates/blank/src/logo.png differ
```

Unclear what to do to get rid of this, I tried to run `git restore media/flow.png` but that didn't do anything. I've also tried changing my `git config core.autocrlf` setting to `false` from `input` - without any luck either..

Reading https://help.github.com/en/github/using-git/configuring-git-to-handle-line-endings I'm wondering if PNG should explicitly be set to `binary` in `.gitattributes` - unclear what to do for `.sketch` files. ?


So let's say that I want a Dynamic route with a url parameter. I can do this using reach router like this:

```html
<Router>
    <Post path="post/:postId" />
    <Dynamic path="dynamic" />
    <Routes path="*" />
</Router>
```

Let's say that for Post pages I want to render statically a part of the view, such as the menus and so. At runtime I want to query the server for the Post data, but show something to the user while it is loading.

Since this is a Dynamic URL, if the user uses it directly, as I understand it the whole bundle will be loaded before showing anything.

Is there a way to show something to the user, a "loading..." page for the Post, while he waits for the bundle to complete downloading?