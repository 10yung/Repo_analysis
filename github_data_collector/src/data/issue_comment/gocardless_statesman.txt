Hey guys, I've tried reading all the docs, reverse engineering the source code, etc., but I can't figure this out. I would really appreciate it if you could point me in the right direction.

A have a model (subclass of `ActiveRecord::Base`) that encapsulates a Statesman state machine. I would like to test this model class, which requires me to be able to configure the state of the model, including its internal state machine.

How can I create a new model object, in a particular initial state?

I know I can create a new model (with its state implicitly set to the initial state) and manually push it through a series of state transitions, but that triggers call backs, wastes time, and ruins the isolation of the test.
After initial gem setup with `t.json :metadata, default: {}` field I've got this error:
```
ActiveRecord::AttributeMethods::Serialization::ColumnNotSerializableError: Column `metadata` of type ActiveRecord::Type::Json does not support `serialize` feature.
Usually it means that you are trying to use `serialize`
on a column that already implements serialization natively.
from /home/gleb/.rbenv/versions/2.7.0/lib/ruby/gems/2.7.0/gems/activerecord-6.0.2.1/lib/active_record/attribute_methods/serialization.rb:74:in `block in serialize'
```
Environment:
Ruby 2.7.0
Rails 6.0.2.1
Postgres 11
Updates the requirements on [pg](https://github.com/ged/ruby-pg) to permit the latest version.
<details>
<summary>Changelog</summary>
<p><em>Sourced from <a href="https://github.com/ged/ruby-pg/blob/master/History.rdoc">pg's changelog</a>.</em></p>
<blockquote>
<p>== v1.2.0 [2019-12-20] Michael Granger <a href="mailto:ged@FaerieMUD.org">ged@FaerieMUD.org</a></p>
<p>Repository:</p>
<ul>
<li>Our primary repository has been moved to Github <a href="https://github.com/ged/ruby-pg">https://github.com/ged/ruby-pg</a> .
Most of the issues from <a href="https://bitbucket.org/ged/ruby-pg">https://bitbucket.org/ged/ruby-pg</a> have been migrated. <a href="https://github-redirect.dependabot.com/ged/ruby-pg/issues/43">#43</a></li>
</ul>
<p>API enhancements:</p>
<ul>
<li>Add PG::Result#field_name_type= and siblings to allow symbols to be used as field names. <a href="https://github-redirect.dependabot.com/ged/ruby-pg/issues/306">#306</a></li>
<li>Add new methods for error reporting:
<ul>
<li>PG::Connection#set_error_context_visibility</li>
<li>PG::Result#verbose_error_message</li>
<li>PG::Result#result_verbose_error_message (alias)</li>
</ul>
</li>
<li>Update errorcodes and error classes to PostgreSQL-12.0.</li>
<li>New constants: PG_DIAG_SEVERITY_NONLOCALIZED, PQERRORS_SQLSTATE, PQSHOW_CONTEXT_NEVER, PQSHOW_CONTEXT_ERRORS, PQSHOW_CONTEXT_ALWAYS</li>
</ul>
<p>Type cast enhancements:</p>
<ul>
<li>Add PG::TextEncoder::Record and PG::TextDecoder::Record for en/decoding of Composite Types. <a href="https://github-redirect.dependabot.com/ged/ruby-pg/issues/258">#258</a>, <a href="https://github-redirect.dependabot.com/ged/ruby-pg/issues/36">#36</a></li>
<li>Add PG::BasicTypeRegistry.register_coder to register instances instead of classes.
This is useful to register parametrized en/decoders like PG::TextDecoder::Record .</li>
<li>Add PG::BasicTypeMapForQueries#encode_array_as= to switch between various interpretations of ruby arrays.</li>
<li>Add Time, Array<Time>, Array<BigDecimal> and Array<IPAddr> encoders to PG::BasicTypeMapForQueries</li>
<li>Exchange sprintf based float encoder by very fast own implementation with more natural format. <a href="https://github-redirect.dependabot.com/ged/ruby-pg/issues/301">#301</a></li>
<li>Define encode and decode methods only in en/decoders that implement it, so that they can be queried by respond_to? .</li>
<li>Improve PG::TypeMapByColumn#inspect</li>
<li>Accept Integer and Float as input to TextEncoder::Numeric . <a href="https://github-redirect.dependabot.com/ged/ruby-pg/issues/310">#310</a></li>
</ul>
<p>Other enhancements:</p>
<ul>
<li>Allocate the data part and the ruby object of PG::Result in one step, so that we don't need to check for valid data.
This removes PG::Result.allocate and PG::Result.new, which were callable but without any practical use. <a href="https://github-redirect.dependabot.com/ged/ruby-pg/issues/42">#42</a></li>
<li>Make use of PQresultMemorySize() of PostgreSQL-12 and fall back to our internal estimator.</li>
<li>Improve performance of PG::Result#stream_each_tuple .</li>
<li>Store client encoding in data part of PG::Connection and PG::Result objects, so that we no longer use ruby's internal encoding bits. <a href="https://github-redirect.dependabot.com/ged/ruby-pg/issues/280">#280</a></li>
<li>Update Windows fat binary gem to OpenSSL-1.1.1d and PostgreSQL-12.1.</li>
<li>Add support for TruffleRuby. It is regulary tested as part of our CI.</li>
<li>Enable +frozen_string_literal+ in all pg's ruby files</li>
</ul>
<p>Bugfixes:</p>
<ul>
<li>Update the license in gemspec to &quot;BSD-2-Clause&quot;.
It was incorrectly labeled &quot;BSD-3-Clause&quot;. <a href="https://github-redirect.dependabot.com/ged/ruby-pg/issues/40">#40</a></li>
<li>Respect PG::Coder#flags in PG::Coder#to_h.</li>
<li>Fix PG::Result memsize reporting after #clear.</li>
<li>Release field names to GC on PG::Result#clear.</li>
<li>Fix double free in PG::Result#stream_each_tuple when an exception is raised in the block.</li>
<li>Fix PG::Result#stream_each_tuple to deliver typemapped values.</li>
<li>Fix encoding of Array<unknown> with PG::BasicTypeMapForQueries</li>
</ul>
<p>Deprecated:</p>
<ul>
<li>Add a deprecation warning to PG::Connection#socket .</li>
</ul>
<p>Removed:</p>
</tr></table> ... (truncated)
</blockquote>
</details>
<details>
<summary>Commits</summary>
<ul>
<li><a href="https://github.com/ged/ruby-pg/commit/de577148da02c8e0f3ddc9d0d2e11da8a42eb4e7"><code>de57714</code></a> Update the ignorefile</li>
<li><a href="https://github.com/ged/ruby-pg/commit/a32980729af9de4c6ce61bd06b4935771f8d96ed"><code>a329807</code></a> Update my gem-signing cert</li>
<li><a href="https://github.com/ged/ruby-pg/commit/775865985ecba1d8f5aba5fd6c96f3378ab434b4"><code>7758659</code></a> Bump the minor version, set history date</li>
<li><a href="https://github.com/ged/ruby-pg/commit/5f0575d7c03640916218ed988168caaba9500687"><code>5f0575d</code></a> hgignore -&gt; gitignore</li>
<li><a href="https://github.com/ged/ruby-pg/commit/0f5bc242c10d1a0427d2abf647c9f375735646e6"><code>0f5bc24</code></a> Update the license in the Rakefile</li>
<li><a href="https://github.com/ged/ruby-pg/commit/1ff2f472e849a3d1ef5b88769dd824a606557826"><code>1ff2f47</code></a> Merge pull request <a href="https://github-redirect.dependabot.com/ged/ruby-pg/issues/315">#315</a> from larskanis/typecast-overview</li>
<li><a href="https://github.com/ged/ruby-pg/commit/84d0a606e408a7d1253d0107938cfc2414a26825"><code>84d0a60</code></a> Fix and improve Coder docs</li>
<li><a href="https://github.com/ged/ruby-pg/commit/2314f0d14a669dac1e8729cb1f2a7c3f354f326c"><code>2314f0d</code></a> Remove old PostgreSQL version info from docs</li>
<li><a href="https://github.com/ged/ruby-pg/commit/2d1d9424f6bd120726739c5fb25f00cba3462934"><code>2d1d942</code></a> Replace #if 0 by an ordinary comment</li>
<li><a href="https://github.com/ged/ruby-pg/commit/49e987358c94c6bb7ba54f0c7d57f1439a54fb87"><code>49e9873</code></a> Add an overview about coders and type maps to README</li>
<li>Additional commits viewable in <a href="https://github.com/ged/ruby-pg/compare/v0.18.0...v1.2.0">compare view</a></li>
</ul>
</details>
<br />


Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.

[//]: # (dependabot-automerge-start)
[//]: # (dependabot-automerge-end)

---

<details>
<summary>Dependabot commands and options</summary>
<br />

You can trigger Dependabot actions by commenting on this PR:
- `@dependabot rebase` will rebase this PR
- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it
- `@dependabot merge` will merge this PR after your CI passes on it
- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it
- `@dependabot cancel merge` will cancel a previously requested merge and block automerging
- `@dependabot reopen` will reopen this PR if it is closed
- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually
- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)
- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)
- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)
- `@dependabot use these labels` will set the current labels as the default for future PRs for this repo and language
- `@dependabot use these reviewers` will set the current reviewers as the default for future PRs for this repo and language
- `@dependabot use these assignees` will set the current assignees as the default for future PRs for this repo and language
- `@dependabot use this milestone` will set the current milestone as the default for future PRs for this repo and language
- `@dependabot badge me` will comment on this PR with code to add a "Dependabot enabled" badge to your readme

Additionally, you can set the following in your Dependabot [dashboard](https://app.dependabot.com):
- Update frequency (including time of day and day of week)
- Pull request limits (per update run and/or open at any time)
- Automerge options (never/patch/minor, and dev/runtime dependencies)
- Out-of-range updates (receive only lockfile updates, if desired)
- Security updates (receive only security updates, if desired)



</details>
I've recently implemented the approach recommended in the readme for storing the current state on my mode:

```
after_transition do |model, transition|
  model.state = transition.to_state
  model.save!
end
```

Very pleased with the results - based on benchmarks, I've seen a 40-50% improvement in my queries.

In doing so I had to change a lot of code which was using `Model.in_state(:foo)` to use the new column (`Model.where(state: 'foo')`) and ended up doing some meta programming to automatically create the scopes based on the state machine states.

I was wondering if you had ever considered incorporating something like this into the gem, and supporting this usage in a more robust way? Given the performance gains we have seen I feel like it could be of interest.

In terms of what I'm thinking would be ideal:

1. In the State Machine class you would specify the column on the model which should be used to store the current state.
2. If declared, the column value is automatically set after a transition.
3. If declared, the `in_state` method would automatically use this column for querying.

Thoughts? If we feel this is useful, happy to work on a PR.
The current index provided to ensure only one `most_recent` transition per object by the migration generator does not work with ORACLE. As a result, it's not possible to have more than 2 transitions in the database.

When trying to create the third transition on the same order, I was getting the error: `OCIError - ORA-00001: unique constraint violated:`

To make it work with Oracle, I used the function `NVL2` when creating the unique index: 
```ruby
    add_index(:order_transitions,
              ['NVL2(MOST_RECENT, ORDER_ID, null)', :most_recent],
              unique: true,
              name: 'idx_order_trans_most_recent')
```

Original Migration generated:
```ruby
    add_index(:order_transitions,
              %i(order_id most_recent),
              unique: true,
              name: 'idx_order_trans_most_recent')
```

Ref: https://stackoverflow.com/questions/45280025/unique-constraint-allow-null-for-one-column-in-oracle

The issue wasn't that straight forward to identify. Shall we add this info somewhere? Maybe having this issue closed is enough to work as documentation.
Adds a commit to https://github.com/gocardless/statesman/pull/350 (I'm not a maintainer, so couldn't do it from within that PR).
### Context

Dependabot is using statesman, and we are running the Dependabot service using MySQL at GitHub.
After some load testing the system, we found out some increasing number of deadlocks coming from states man. This fixed the problem for us.

This is a lock-free solution for #228. Probably also fixes #206

### Short problem description
When we were trying to call `ar_model.transition_to!`, we would get a Deadlock error if the system was under pressure. (lots of concurrent transitions happening at the same time) 

### Detailed problem and root cause analysis
#### Some context
When doing a `transition_to!` statesman will do, mainly, [two operations](https://github.com/gocardless/statesman/blob/fdab116b9b0d9e1d77b5df151641761fbc7c15dd/lib/statesman/adapters/active_record.rb#L75-L82) in the database, inside the same transaction: 
1. Update the old transitions to mark them as non-most-recent
2. Insert the new transition with a most_recent set to TRUE. 

Also, the transitions table usually have two unique indexes, `(parent_id,sort_key)` and  `(parent_id,most_recent)`, the second index is there to guarantee we only have one most_recent transition for the parent entry. Thus we need the update before the insert.

#### Problem
MySQL default transaction isolation level is `REPEATABLE READ` and that's what we use at Dependabot/GitHub. [It states](https://dev.mysql.com/doc/refman/5.7/en/innodb-transaction-isolation-levels.html#isolevel_repeatable-read):
> This is the default isolation level for InnoDB. Consistent reads within the same transaction read the snapshot established by the first read.

What means is if in a loop, we do the same SELECT within a db transaction, even if other clients have committed data between the runs, it will, ALWAYS, see the first results it saw the first time.
That is also respected when doing writes (Update/Delete). so `UPDATE transitions SET most_recent=NULL where parent_id=1 AND most_recent=true;` will put an exclusive lock on the row for that unique index, as it cannot allow other transactions to change the data. However, if there is no row to update, MySQL will have to create a next-key lock, to also prevent others from changing this data, as the transaction's view of the snapshot didn't include any rows, as the UPDATE returned 0 rows changed.
The issue is, two independent transactions can put the next-key lock on the table (even if they reference different columns values on the index), and when it tries to do the next operation, the insert, it will lock, waiting for the next-key lock to be released. Therefore, if two updates happen first, and two inserts after, they will deadlock. (for better understanding see Simulation 1)
However, if the Update would have changed at least one row, there would be no locking, as for REPEATABLE READ that would be our current snapshot of the data. Thus no need for a gap locking. 
[See](https://dev.mysql.com/doc/refman/5.7/en/innodb-locking.html#innodb-gap-locks)
> If id is not indexed or has a nonunique index, the statement does lock the preceding gap.

This is also explained on this [2003 issue](https://bugs.mysql.com/bug.php?id=1866), by the people that wrote InnoDB, and on a few articles: [1](https://www.percona.com/blog/2013/12/12/one-more-innodb-gap-lock-to-avoid/) [2](https://www.percona.com/blog/2012/03/27/innodbs-gap-locks/)


### Solution

There are a few different ways to fix this. The easiest is just to (1)retry on deadlock, another one,(2) would be to change the transaction isolation level for that transaction to READ COMMITTED, which means SELECTS within the transaction are not consistent, and will always return committed data, thus, MySQL will not create the gap lock, as it is safe to update without the lock.
The problem of 1 is that we would still need to limit the number of retries, and eventually can still have the deadlocks, and number 2 would require us to always use ROW based replication as statement base replication wants REPEATABLE READ. [Also, not advised to change the transaction isolation level inside a library]
Instead, we can tackle the root problem: First, I thought in doing a select, and if transition data had to be updated do the update. However, that is race prone.
The actual fix is, re-order the operations, and always do the insert before, so we know the next Update will at least touch one row, and make our latest transition most_recent after. Thus, no next-key lock will happen and less contention will be created. 

To simulate this: 
### Simulation 1 (SQL)
A and B are different MySQL clients:
```
CREATE TABLE `transitions` (
  `id` bigint(20) NOT NULL AUTO_INCREMENT,
  `to_state` varchar(40) NOT NULL,
  `sort_key` int(11) NOT NULL,
  `parent_id` bigint(20) NOT NULL,
  `most_recent` tinyint(1) DEFAULT NULL,
  PRIMARY KEY (`id`),
  UNIQUE KEY `index_parent_sort` (`parent_id`,`sort_key`),
  UNIQUE KEY `index_parent_most_recent` (`parent_id`,`most_recent`)
) ENGINE=InnoDB AUTO_INCREMENT=4 DEFAULT CHARSET=utf8mb4

A: START TRANSACTION;
B: START TRANSACTION;
A: UPDATE transitions SET most_recent=NULL where parent_id=1 AND most_recent=true;
B: UPDATE transitions SET most_recent=NULL where parent_id=42 AND most_recent=true;
A: INSERT INTO transitions(to_state, sort_key, parent_id, most_recent) values ('pending', 10, 1, TRUE);
B: INSERT INTO transitions(to_state, sort_key, parent_id, most_recent) values ('pending', 10, 42, TRUE);
```


cc @greysteil @hmarr 
Closes #263 

Before:
```
previous_state = project.transitions.where(most_recent: false).last.to_state || project.initial_state
```

After:
```
project.last_transition.from_state
```
We've found that these queries are causing a lot of latency, so I'm hoping they can be optimized by just JOINing instead of LEFT JOINing. See also https://github.com/gocardless/statesman/issues/121#issuecomment-72493310
When I run `rails g statesman:active_record_transition Order OrderTransition`, the migration created includes `t.text :metadata, default: {}`. This line causes the migration to fail with the error `TypeError: can't quote Hash`

Changing the line to `t.json :metadata, default: {}` allows the migration to complete.

Seems the migration generator shouldn't be defaulting the column to type text.

Rails 5.1.5
Statesman 3.4.1