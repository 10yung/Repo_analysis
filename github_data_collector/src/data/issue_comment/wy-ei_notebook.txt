Bumps [jekyll](https://github.com/jekyll/jekyll) from 3.7.3 to 3.7.4.
<details>
<summary>Release notes</summary>

*Sourced from [jekyll's releases](https://github.com/jekyll/jekyll/releases).*

> ## v3.7.4
> ### Bug Fixes
> 
>   * Security: fix `include` bypass of EntryFilter#filter symlink check (https://github-redirect.dependabot.com/jekyll/jekyll/pull/7224)
</details>
<details>
<summary>Changelog</summary>

*Sourced from [jekyll's changelog](https://github.com/jekyll/jekyll/blob/master/History.markdown).*

> ## 3.7.4 / 2018-09-07
> 
> ### Bug Fixes
> 
>   * Security: fix `include` bypass of EntryFilter#filter symlink check ([#7224](https://github-redirect.dependabot.com/jekyll/jekyll/issues/7224))
</details>
<details>
<summary>Commits</summary>

- [`07561b3`](https://github.com/jekyll/jekyll/commit/07561b301b75010d5c4e447f68db4e4130f3bc26) Release :gem: 3.7.4
- [`bd70949`](https://github.com/jekyll/jekyll/commit/bd70949ecf59fdf5a410fb0f4355989f5eab285e) Release :gem: v3.7.4
- [`4108ddb`](https://github.com/jekyll/jekyll/commit/4108ddb05c404355f78c99b81aa44b58fbed87ef) Merge pull request [#7224](https://github-redirect.dependabot.com/jekyll/jekyll/issues/7224) from jekyll/3.7-entryfilter-symlink-fix
- [`2025d12`](https://github.com/jekyll/jekyll/commit/2025d1250239d0a8e96a1f5e5da6567cfc3d1c42) Revert "Run this branch."
- [`7f1faea`](https://github.com/jekyll/jekyll/commit/7f1faea47d0d1665b32d075cbe6b5f0990f11577) LayoutReader: skip tests if Windows
- [`f5cd15c`](https://github.com/jekyll/jekyll/commit/f5cd15cfd4094ba0632dbf2901d79479ff062494) Run this branch.
- [`35219a8`](https://github.com/jekyll/jekyll/commit/35219a8c42e4853485ef10dc1bb8ef1766c6aca3) Fix fmt errors.
- [`2c088e2`](https://github.com/jekyll/jekyll/commit/2c088e2596c9ad6bb15ded045adbde8da2c245f5) Update tests for EntryFilter#filter fix and add comments for it
- [`a8b91de`](https://github.com/jekyll/jekyll/commit/a8b91de97b3196b3e0f282145f6bdefab1303bda) EntryFilter#filter: reject all symlinks, even if included
- [`2a679e7`](https://github.com/jekyll/jekyll/commit/2a679e797c0eee5864acdf8706d5b478fae86dc7) Add failing tests for symlink check.
- See full diff in [compare view](https://github.com/jekyll/jekyll/compare/v3.7.3...v3.7.4)
</details>
<br />

[![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=jekyll&package-manager=bundler&previous-version=3.7.3&new-version=3.7.4)](https://help.github.com/articles/configuring-automated-security-fixes)

Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.

[//]: # (dependabot-automerge-start)
[//]: # (dependabot-automerge-end)

---

<details>
<summary>Dependabot commands and options</summary>
<br />

You can trigger Dependabot actions by commenting on this PR:
- `@dependabot rebase` will rebase this PR
- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it
- `@dependabot merge` will merge this PR after your CI passes on it
- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it
- `@dependabot cancel merge` will cancel a previously requested merge and block automerging
- `@dependabot reopen` will reopen this PR if it is closed
- `@dependabot ignore this [patch|minor|major] version` will close this PR and stop Dependabot creating any more for this minor/major version (unless you reopen the PR or upgrade to it yourself)
- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)
- `@dependabot use these labels` will set the current labels as the default for future PRs for this repo and language
- `@dependabot use these reviewers` will set the current reviewers as the default for future PRs for this repo and language
- `@dependabot use these assignees` will set the current assignees as the default for future PRs for this repo and language
- `@dependabot use this milestone` will set the current milestone as the default for future PRs for this repo and language

You can disable automated security fix PRs for this repo from the [Security Alerts page](https://github.com/wy-ei/notebook/network/alerts).

</details>
这里收集了我在学习 **机器学习**、**自然语言处理** 等内容时觉得不错的资料。
- [部分正则语法](#issuecomment-467437972)
- [re 模块](#issuecomment-467438049)
- [Match 对象](#issuecomment-467438086)
实验室的服务器性能比自己的 PC 性能强的多（256G 内存，32核），所以希望在服务器上运行 PyCharm，这样一来可以获得更好的性能，二来可以直接编辑服务器上的文件。

利用 ssh 的 X11-Forwarding 功能，可以把服务器上有 GUI 的程序的显示转发到自己PC的显示器上。

利用 MobaXterm 这个软件，一切变得就更加简单了。在 MobaXterm 中开启到服务器的 ssh 连接，并让 X11-Forwarding 选型勾选上（默认是勾选上的）。

![image](https://user-images.githubusercontent.com/7794103/53609339-69d96700-3c01-11e9-8908-185d9189ca3a.png)

去 [jetbrains 官方网站](https://www.jetbrains.com) 下载 PyCharm，然后将软件包解压，运行软件包中 `bin` 文件夹下的 `pycharm.sh` 脚本，稍等几秒后 PyCharm 就会显示在你的显示器上。

但有时候可能出现中文字体无法显示的问题，即中文都显示为一些方框，其根本原因服务器上没有中文字体，因此需要安装一个支持中文的字体，这里当然推荐使用 PingFang 字体。可以去这个[代码仓库](https://github.com/yellowpeter2019/PingFangSC4Linux) 中下载。

下载完成后，需要安装字体，方法很简单。新建 `~/.fonts` 目录，然后将 `*.ttf` 拷贝至该目录下。退出重新登录后，就可以使用这些字体了。

```
$ mkdir ~/.fonts
$ mv *.ttf ~/.fonts/
```

此时再打开 PyCharm 中文显示应该就正常了。如果依然不正常，那就修改一下默认字体。

jetbrains 的其他软件也可以这么搞。
- [安装 neo4j 数据库](#issuecomment-467694738)
- [neo4j 数据库建库指南](#issuecomment-467694948)
- [其他技巧](#issuecomment-467694995)
## 牛顿迭代法

对于一元 N 次方程，当 N 大于 2 时没有固定的求根公式，为了求方程的根，可以使用牛顿迭代法。

牛顿迭代法的思想是在曲线上任意取一个点，然后求这一点的切线，使用切线的解来逼近多项式的解。


<div align="center"><img src="https://user-images.githubusercontent.com/7794103/51423436-0835de00-1bfb-11e9-8c12-8aeb1e122031.png" /></div>


然后在 <img src="https://latex.codecogs.com/gif.latex?x_%7Bn%2B1%7D" class="tex" alt="x_{n+1}" /> 处继续做切线：

<div align="center"><img src="https://user-images.githubusercontent.com/7794103/51423442-213e8f00-1bfb-11e9-906f-f3ae6c775a11.png" /></div>

不断的逼近，可以看到上图中切斜的解 <img src="https://latex.codecogs.com/gif.latex?x_%7Bn%2B1%7D" class="tex" alt="x_{n+1}" /> 已经接近真实的解 <img src="https://latex.codecogs.com/gif.latex?x_n" class="tex" alt="x_n" /> 了一些。

<div align="center"><img src="http://ww1.sinaimg.cn/large/b5d7bcc1ly1fgf50c0t0jg208c05ydge.gif" /></div>

这个过切点的直线的方程为：

<div align="center"><img src="https://latex.codecogs.com/gif.latex?y-f(x_n)%3Df%5E%5Cprime(x_n)(x-x_n)" class="tex" alt="y-f(x_n)=f^\prime(x_n)(x-x_n)"/></div>

令 <img src="https://latex.codecogs.com/gif.latex?y%3D0" class="tex" alt="y=0" /> 可以求得 <img src="https://latex.codecogs.com/gif.latex?x" class="tex" alt="x" />，这里 <img src="https://latex.codecogs.com/gif.latex?x_%7Bn%2B1%7D" class="tex" alt="x_{n+1}" /> 与 <img src="https://latex.codecogs.com/gif.latex?x_n" class="tex" alt="x_n" /> 的关系如下：

<div align="center"><img src="https://latex.codecogs.com/gif.latex?x_%7Bn%2B1%7D%3Dx_%7Bn%7D-%5Cfrac%7Bf(x_n)%7D%7Bf%5E%5Cprime(x_n)%7D" class="tex" alt="x_{n+1}=x_{n}-\frac{f(x_n)}{f^\prime(x_n)}"/></div>

其中 <img src="https://latex.codecogs.com/gif.latex?f%5E%5Cprime(x_n)" class="tex" alt="f^\prime(x_n)" /> 表示 <img src="https://latex.codecogs.com/gif.latex?f(x)" class="tex" alt="f(x)" /> 在 <img src="https://latex.codecogs.com/gif.latex?x_n" class="tex" alt="x_n" /> 处的斜率。

## 使用牛顿迭代法求平方根

求某个数(如 N)的平方根，可以理解为求如下函数的解：

<div align="center"><img src="https://latex.codecogs.com/gif.latex?f(x)%3Dx%5E2-N" class="tex" alt="f(x)=x^2-N"/></div>

其中 <img src="https://latex.codecogs.com/gif.latex?f(x)" class="tex" alt="f(x)" /> 的导数为：

<div align="center"><img src="https://latex.codecogs.com/gif.latex?f%5E%5Cprime(x)%3D2*x" class="tex" alt="f^\prime(x)=2*x"/></div>

牛顿迭代式为：

<div align="center"><img src="https://latex.codecogs.com/gif.latex?x_%7Bn%2B1%7D%3Dx_n-%5Cfrac%7Bx_%7Bn%7D%5E2-N%7D%7B2*x_n%7D%3D%5Cfrac%7B1%7D%7B2%7D*(x_n%2B%5Cfrac%7BN%7D%7Bx_n%7D)" class="tex" alt="x_{n+1}=x_n-\frac{x_{n}^2-N}{2*x_n}=\frac{1}{2}*(x_n+\frac{N}{x_n})"/></div>

利用以上原理可以写出下面代码：

```python
def sqrt(n):
    if n < 0:
        return float('nan')
    
    # 因为牛顿迭代法只是逼近真实值，所以需要设置一个误差范围
    e = 1e-15
    
    x = n
    x_next = (x + n / x) / 2
    
    # 两次迭代得到的解之间相差小于误差允许范围后跳出
    while abs(x_next - x) > e:
        x = x_next
        # 计算下一个近似解
        x_next = (x + n / x) / 2
    
    return x
```
- [散点图](#issuecomment-453535976)
- [对三维数据可视化](#issuecomment-453537504)
## 系列文章

- [npm 基本用法](#issuecomment-266274004)
- [常用的 npm 命令](#issuecomment-266274086)
- [npm script 用法详解](#issuecomment-266274139)
- [npm 是如何影响 node_modules 的目录结构的 ？](#issuecomment-266946999)
## 目录

- [前端性能优化](#issuecomment-266937246)
- [读书笔记 --《高性能 JavaScript》](#issuecomment-266937340)
- [GPU 是如何加速网页渲染的](#issuecomment-266946140)
- [避免强制性同步布局](#issuecomment-266946255)
- [How To Reach 60FPS](#issuecomment-399297988)

更多内容：

- [Make the Web Fast - PPT 演讲稿](https://docs.google.com/presentation/d/e/2PACX-1vSRTeaScin3cWualsJVNfVzj1j4cTaOS-Oxf551_Tk5n8VibqQhJptZ_BYGAc-lPZlSuqr-7LZ9nkoI/pub?start=false&loop=false&delayms=3000) _(Google Docs 需要翻墙)_