I need to be able to model this, in Fluent.

```sql
DELETE FROM devices d
WHERE NOT EXISTS (
	SELECT 1
	FROM registrations r
	WHERE d."id" = r.device_id
	LIMIT 1
);
```

That's the PostgreSQL version of  "Delete all rows from the devices table where the device ID doesn't appear in the registrations table under the 'device_id' foreign key" 

I've come across a few places where it makes ergonomic sense to use a Set in my Swift code. 

I understand that none of the database backends support storing of native sets, however arrays do seem to be supported. 

I would love to be able to have my Fluent models expose a Set property, but save to whatever the native database field type is, and transparently serialise/deserialise as required.
I give devs option which DB to use in which case I have to do something like `.field("id", .uuid, .identifier(auto: Webug.DbIdType.self == Int.self))` (please note the `.uuid` will be dynamic as well)
This could be useful when having a database structure that uses subclassing.

Think of the scenario where only the id of the superclass is know, but you need the extra information form the subclasses that also contain the same id. 

By using optional decoding, you would be able to left join the different types on the ids and from there derive what type it is.

The alternative would to do a `.find(...)` on the different models, but this would lead to more requests and possibly a lower performance.
Add the SQL MERGE (aka UPSERT) capability to fluent.

https://en.wikipedia.org/wiki/Merge_(SQL)

**Related**

* https://github.com/vapor/fluent-sqlite-driver/issues/23
* https://stackoverflow.com/questions/54389866/using-vapor-fluent-to-upsert-models
* https://stackoverflow.com/questions/57096321/how-to-upsert-multiple-records-at-once-with-vapor-3-postgressql
And the whole app crashes on the next request
System info:
macOS 10.14.4 (18E226)
Xcode 10.2.1 (10E1001)
Apple Swift version 5.0.1 (swiftlang-1001.0.82.4 clang-1001.0.46.5)

From Package.swift:
```
.package(url: "https://github.com/vapor/vapor.git", from: "3.0.0"),
.package(url: "https://github.com/vapor/fluent-mysql.git", from: "3.0.0"),
```

I'm trying to run this reversion:

```
static func revert(
        on connection: MySQLConnection
        ) -> Future<Void> {
        return Database.update(
            User.self,
            on: connection
        ) { builder in
            builder.deleteField(for: \.shareToken)
        }
    }
```

This is the output I get with `databases.enableLogging(on: .mysql)`:
```
[ INFO ] Reverting migration 'AddShareTokenToUser' (/Users/nickservidio/Developer/vapor/Foo/.build/checkouts/fluent/Sources/Fluent/Migration/Migrations.swift:151)
[mysql] [2019-07-13 16:13:30 +0000] ALTER TABLE `User`  []
[mysql] [2019-07-13 16:13:30 +0000] DELETE FROM `fluent` WHERE `fluent`.`name` = (?) [string("AddShareTokenToUser")]
...
[ INFO ] Succesfully reverted last batch of migrations
```

Examining the database using DataGrip shows that the shareToken column still exists.
```swift
Node.query(on: db)
            .filter(\Node.running < \Node.executors)
            .first()
```
Add `autoMigrate: Bool` to `FluentProvider` to allow for migrations to run automatically on boot. This is useful for things like in-memory SQLite dbs.
Fluent will now compile on the master branch