the [following](https://github.com/satwikkansal/wtfpython/blob/master/README.md#L1225-L1226) is untrue:
```
>>> print(r"\\n")
'\\\\n'
```

it should be one of the following:
```
>>> print(r"\\n")
\\n
>>> print(repr(r"\\n"))
'\\\\n'
```
```py
print(3 - - 2)
print(3 + + 2)
"""output
5
5
"""
```

The example
```python
from typing import Optional


class S:
    pass


class A:
    S: Optional[S] = S()

    pass


if __name__ == '__main__':
    print("ok?")
```
```
TypeError: Optional[t] requires a single type.
```
https://repl.it/repls/LikableCommonRobodoc

I believe there is a namespace clash between the class variables and the types.

```python
var = tuple([
    [1, 2, 3],
    [4, 5, 6]
])
l1, l2 = zip(*sorted(zip(*var)))
print(l1, l2)
l3 = zip(*sorted(zip(var)))
print(l3)
print(zip(*sorted(zip(var))))
print(list(zip(*sorted(zip(var)))))
```

- result:
```shell
(1, 2, 3) (4, 5, 6)
<zip object at 0x000001C68A45DAC8>
<zip object at 0x000001C68A45DC48>
[([1, 2, 3], [4, 5, 6])]
```
>>> int(1.99)
1
>>> int(7.7)
7
>>> int(7.7) + 1 
8
The above does not round up

>>> 'Alice' * 5.0
TypeError: can't multiply sequence by non-int of type 'float'
The implementation of deep copy was not shown.
a=[11,22]
b=a
The ids of the two will be the same.
Now,
a[0]=1
The ids of the two will still be the same as both a and b are referring to the same location, changes made to a are made to b as well.
Hence, 
a=[1,22]
b=[1,22]

Now if we do 
import copy
c=copy.deepcopy(a)
id(a) will not be equal to id(c)



# Python3.x load module path error

Program execute display like this error: `ImportError: No module named 'xxx'` also you used like this code: `from .xxx import xxx` or `from ..xxx import xxx`.

### Example:

- `module/`
    - `__init__.py`
    - `A/`
        - `__init__.py`
        - `a.py`
            ```python
            def func():
                print("A.a")
            ```
    - `B/`
        - `__init__.py`
        - `b.py`
            ```python
            from ..A.a import func

            func()
            ```
- `main.py`
    ```python
    from module.B import *
    ```


This code will display error when running `python3 b.py`. I think maybe Python3 Interpreter not support this grammar.
And code will display error when running `python3 main.py`. if you use `sys.paths.append("../")` or `sys.paths.append("./")` like this code, still a mistake. Because program when load module abspath is main.py file, not b.py file. And `C++ /C` language is not such.

### Solve Method

- `__file__` return current file path
- `os.path.abspath(path)`  return file abspath
- `os.path.dirname()`  return folder abspath
- `os.path.join()`  join path


load one level catalog path: `os.path.abspath(os.path.join(os.path.dirname(__file__), "../"))`, load two level catalog path: `os.path.abspath(os.path.join(os.path.dirname(__file__), "../../"))`, etc.

Now that the project has Travis integration, I think we can use a static code analysis tool like coala which can help in detecting errors like following upfront,

- Markdown linting errors (and the linting errors in the code inside the markdown)
- Invalid or broken links (like TOC, references, etc)
- Grammar checks

The commands to perfrom such checks can be added to Travis as well as pre-commit hooks (if the contributor likes), and will help in reducing future errors.