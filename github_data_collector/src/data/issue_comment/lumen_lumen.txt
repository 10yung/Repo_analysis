1. `cd liblumen_eir_interpreter`
2. `cargo run -- --ident foo:run/0 examples/simple_server/*`

## Actual

```
thread 'main' panicked at '{value31}', /Users/luke.imhoff/.cargo/git/checkouts/eir-9a91440c84f5797a/795f6bb/libeir_ir/src/algo/live.rs:145:9
```

<details>

[simple_server.log](https://github.com/lumen/lumen/files/4065955/simple_server.log)

</details>

## Expected

I'm not ðŸ’¯ sure what the output should be, but I doubt it is a panic
@KronicDeth encouraged me to report "not implemented" stuff I ran into while trying Lumen so y'all can get an idea of what is actually used.

I tried a few things by modifying spawn-chain and most things ran into "panicked at 'not implemented', examples/spawn-chain/src/elixir/enum/reduce_range_dec_4.rs:36:5"

Trying to interact with a JS object. Trying to start a GenServer and a few other experiments all lead there. Hope that helps. Let me know if you need anything more.
As seen in https://cirrus-ci.com/task/5041448550662144 and other test runs, `otp::erlang::term_to_binary_1::test::roundtrips_through_binary_to_term` sometimes fails.  For this specific failure it was shrunk to

```
thread 'otp::erlang::term_to_binary_1::test::roundtrips_through_binary_to_term' panicked at 'called `Result::unwrap()` on an `Err` value: Fail(Reason("assertion failed: `(left == right)` \n  left: `Ok(Box(0x7f66849fa090, literal=false, value=Term(Boxed<liblumen_alloc::erts::term::tuple::Tuple>(Tuple(Term(#PID<0.15629.8176>), Box(0x7f66849fa078, literal=false, value=Term(Boxed<liblumen_alloc::erts::term::pid::ExternalPid>(ExternalPid { header: Header<liblumen_alloc::erts::term::pid::ExternalPid>(0b111000000000000000000000000000000000000000000000010), arc_node: Node { id: 2752935265332143140, name: Mutex { data: Cell { value: :\"@external\" } }, creation: 1363588961 }, pid: Pid(220293369) } at 0x7f66849fa078)))) at 0x7f66849fa090))))`,\n right: `Ok(Box(0x7f66849fa018, literal=false, value=Term(Boxed<liblumen_alloc::erts::term::tuple::Tuple>(Tuple(Term(#PID<0.15629.8176>), Box(0x7f66849fa000, literal=false, value=Term(Boxed<liblumen_alloc::erts::term::pid::ExternalPid>(ExternalPid { header: Header<liblumen_alloc::erts::term::pid::ExternalPid>(0b111000000000000000000000000000000000000000000000010), arc_node: Node { id: 8102711248322546474, name: Mutex { data: Cell { value: :\"@external\" } }, creation: 3801472872 }, pid: Pid(220293369) } at 0x7f66849fa000)))) at 0x7f66849fa018))))` at lumen_runtime/src/otp/erlang/term_to_binary_1/test.rs:25"), (Pid(263518), Box(0x7f66849fa1e8, literal=false, value=Term(Boxed<liblumen_alloc::erts::term::tuple::Tuple>(Tuple(Term(#PID<0.15629.8176>), Box(0x7f66849fa1d0, literal=false, value=Term(Boxed<liblumen_alloc::erts::term::pid::ExternalPid>(ExternalPid { header: Header<liblumen_alloc::erts::term::pid::ExternalPid>(0b111000000000000000000000000000000000000000000000010), arc_node: Node { id: 8102711248322546474, name: Mutex { data: Cell { value: :"@external" } }, creation: 3801472872 }, pid: Pid(220293369) } at 0x7f66849fa1d0)))) at 0x7f66849fa1e8)))))', src/libcore/result.rs:1188:5
note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace.
```

Reformatting for clarity:

```
assertion failed: `(left == right)`

left:

Ok(Box(0x7f66849fa090, literal=false, value=Term(Boxed<liblumen_alloc::erts::term::tuple::Tuple>(Tuple(Term(#PID<0.15629.8176>), Box(0x7f66849fa078, literal=false, value=Term(Boxed<liblumen_alloc::erts::term::pid::ExternalPid>(ExternalPid { header: Header<liblumen_alloc::erts::term::pid::ExternalPid>(0b111000000000000000000000000000000000000000000000010), arc_node: Node { id: 2752935265332143140, name: Mutex { data: Cell { value: :\"@external\" } }, creation: 1363588961 }, pid: Pid(220293369) } at 0x7f66849fa078)))) at 0x7f66849fa090))))

right:

Ok(Box(0x7f66849fa018, literal=false, value=Term(Boxed<liblumen_alloc::erts::term::tuple::Tuple>(Tuple(Term(#PID<0.15629.8176>), Box(0x7f66849fa000, literal=false, value=Term(Boxed<liblumen_alloc::erts::term::pid::ExternalPid>(ExternalPid { header: Header<liblumen_alloc::erts::term::pid::ExternalPid>(0b111000000000000000000000000000000000000000000000010), arc_node: Node { id: 8102711248322546474, name: Mutex { data: Cell { value: :\"@external\" } }, creation: 3801472872 }, pid: Pid(220293369) } at 0x7f66849fa000)))) at 0x7f66849fa018))))` at lumen_runtime/src/otp/erlang/term_to_binary_1/test.rs:25"), (Pid(263518), Box(0x7f66849fa1e8, literal=false, value=Term(Boxed<liblumen_alloc::erts::term::tuple::Tuple>(Tuple(Term(#PID<0.15629.8176>), Box(0x7f66849fa1d0, literal=false, value=Term(Boxed<liblumen_alloc::erts::term::pid::ExternalPid>(ExternalPid { header: Header<liblumen_alloc::erts::term::pid::ExternalPid>(0b111000000000000000000000000000000000000000000000010), arc_node: Node { id: 8102711248322546474, name: Mutex { data: Cell { value: :"@external" } }, creation: 3801472872 }, pid: Pid(220293369) } at 0x7f66849fa1d0)))) at 0x7f66849fa1e8)))))
```
Do you have any example of its usage using Erlang (and not elixir) that are not imply npm also?

Although the location is optional for stacktraces from `get_stacktrace/0`, we should include it because we have it.
Based on the examples in the docs for [`get_stacktrace/0`](http://erlang.org/doc/man/erlang.html#get_stacktrace-0), `:badarg` exception should have a stacktrace when caught with `catch` or when using `get_stacktrace`.  However, the `badarg` macro and other exception macros do not do this, so most of the usages are not going to show helpful stacktraces.

- [ ] Generate stacktraces for all exception macros from the `Process::stacktrace()`.
- [ ] [`external_size/2`](http://erlang.org/doc/man/erlang.html#external_size-2)
- [ ]  [`term_to_binary/2`](http://erlang.org/doc/man/erlang.html#term_to_binary-2)

Should only be implemented if it called by other code as it requires supporting multiple deprecated and future versions of the protocol and compression.
To be able to support the community debugging tools, specifically Observer, we'll need to be able to expose the Lumen runtime running in a browser tab to the host.  Because the host wants to connect to nodes it can find by first talking to EPMD, we will need a proxy that shows up as another node on the host, but then gets forwarded to the browser.

- [ ] Make the distribution transport pluggable in `lumen_runtime`.
   This may be the same interface as `net_kernel` or something specific to Lumen using Rust `fn` similar to the time source.
  - [ ] Use [@mobileoverlord's `phoenix_client`](https://github.com/mobileoverlord/phoenix_client) to connect to the `HOST`
    - [ ] Use wrapper around `Lumen.Web.WebSocket` to connect to `HOST` in place of `websocket_client` that `phoenix_client` uses by default.
- [ ] A `Lumen.BeamSplitter` Elixir project that runs on the `HOST`
  - [ ] A dedicated `socket`, similar to how `phoenix_live_reload` is on a separate socket prefix from the app's default one
  - [ ] Bind a port on the host that can act as a secondary node on the host (`PROXY_PORT`)
  - [ ] Negotiate with EPMD so it thinks `PROXY_PORT` is another node.
  - [ ] Pass messages received on `PROXY_PORT` to the Phoenix Channel

With this setup it should be possible for `:observer.start()` launched from `iex -S mix phx.server` on `HOST` to then connect to the `localhost:PROXY_PORT` and talk to the Lumen runtime in the browser tab.

## Alternatives

### `net_kernel` on `HOST`

Overriding `net_kernel` on `HOST` so that it natively understand websockets, similar to how other developers have overridden `net_kernel` on Heroku and other restricted environments.

### Raw WebSockets

Instead of going over Phoenix Channels, we could use a raw websocket.  This makes it easier to talk to things that aren't Phoenix, but makes it hard to integrate with Phoenix as we couldn't use the Endpoint `socket` DSL.
Process spawning BIFs that take a Node on which to spawn the process, which should be implemented with the Distribution work and (potentially) as stubs that only work for `:nonode@nohost` when the local node is not alive.

- [ ] [`spawn(node, fun)`](http://erlang.org/doc/man/erlang.html#spawn-2)
- [ ] [`spawn(node, module, function, args)`](http://erlang.org/doc/man/erlang.html#spawn-4)
- [ ] [`spawn_link(node, function)`](http://erlang.org/doc/man/erlang.html#spawn_link-2)
- [ ] [`spawn_link(node, module, function, args)`](http://erlang.org/doc/man/erlang.html#spawn_link-4)
- [ ] [`spawn_opt(node, function, options)`](http://erlang.org/doc/man/erlang.html#spawn_opt-3)
- [ ] [`spawn_opt(node, module, function, args, options)`](http://erlang.org/doc/man/erlang.html#spawn_opt-5)