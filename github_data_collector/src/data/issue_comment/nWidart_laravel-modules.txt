I'm trying to create command in the module but it's not sowing in commands list. I've created a console file using php artisan module:make-command.
then change provider file as follow : 

```
<?php

namespace Modules\Manage\Providers;

use Illuminate\Database\Eloquent\Factory as EloquentFactory;
use Illuminate\Support\ServiceProvider;
use Modules\Core\Traits\CanPublishConfiguration;
use Modules\Core\Events\BuildingSidebar;
use Modules\Core\Events\LoadingBackendTranslations;
use Modules\Core\Services\Composer;
use Modules\Core\Traits\CanGetSidebarClassForModule;
use Modules\Manage\Events\Handlers\RegisterManageSidebar;
use Modules\Workshop\Scaffold\Module\ModuleScaffold;
use Modules\Manage\Console\customModule;
use Modules\Workshop\Events\Handlers\RegisterWorkshopSidebar;
use Modules\Workshop\Manager\StylistThemeManager;
use Modules\Workshop\Manager\ThemeManager;
use Modules\Workshop\Scaffold\Module\Generators\EntityGenerator;
use Modules\Workshop\Scaffold\Module\Generators\FilesGenerator;
use Modules\Workshop\Scaffold\Module\Generators\ValueObjectGenerator;
use Modules\Workshop\Scaffold\Theme\ThemeGeneratorFactory;
use Modules\Workshop\Scaffold\Theme\ThemeScaffold;
use Nwidart\Modules\Contracts\RepositoryInterface;

class ManageServiceProvider extends ServiceProvider
{
    use CanPublishConfiguration;
    /**
     * Indicates if loading of the provider is deferred.
     *
     * @var bool
     */
    protected $defer = false;

    /**
     * Register the service provider.
     *
     * @return void
     */
    public function register()
    {
        $this->registerBindings();
        $this->registerCommands();
        $this->app['events']->listen(BuildingSidebar::class, RegisterManageSidebar::class);

        $this->app['events']->listen(LoadingBackendTranslations::class, function (LoadingBackendTranslations $event) {
            $event->load('manages', array_dot(trans('manage::manages')));
            // append translations

        });

        $this->registerEloquentFactoriesFrom(__DIR__ . '/../Database/factories');
    }

    /**
     * Register artisan commands
     */
    private function registerCommands()
    {
        $this->registercustomModuleCommand();
        // $this->registerUpdateCommand();
        // $this->registerThemeScaffoldCommand();

        $this->commands([
            'command.asgard.module.scaffold',
            'command.asgard.module.update',
            'command.asgard.theme.scaffold',
            EntityScaffoldCommand::class,
        ]);
    }

    public function boot()
    {
        $this->publishConfig('manage', 'permissions');

        $this->loadMigrationsFrom(__DIR__ . '/../Database/Migrations');
    }

    private function registercustomModuleCommand()
    {
        $this->app->singleton('asgard.module.scaffold', function ($app) {
            return new ModuleScaffold(
                $app['files'],
                $app['config'],
                new EntityGenerator($app['files'], $app['config']),
                new ValueObjectGenerator($app['files'], $app['config']),
                new FilesGenerator($app['files'], $app['config'])
            );
        });

        $this->app->singleton('command.asgard.module.scaffold', function ($app) {
            return new customModule($app['asgard.module.scaffold']);
        });
    }

    /**
     * Get the services provided by the provider.
     *
     * @return array
     */
    public function provides()
    {
        return array();
    }

    private function registerBindings()
    {
        $this->app->bind(
            'Modules\Manage\Repositories\ManageRepository',
            function () {
                $repository = new \Modules\Manage\Repositories\Eloquent\EloquentManageRepository(new \Modules\Manage\Entities\Manage());

                if (! config('app.cache')) {
                    return $repository;
                }

                return new \Modules\Manage\Repositories\Cache\CacheManageDecorator($repository);
            }
        );
// add bindings

    }

    /**
     * Register factories.
     *
     * @param  string  $path
     * @return void
     */
    protected function registerEloquentFactoriesFrom($path)
    {
        $this->app->make(EloquentFactory::class)->load($path);
    }
}

```
I had the version for Laravel 5.5 and now wanted to update to the latest one. However no matter what I do, I always get this error:
"You don't have a valid activator configuration class. This might be due to your config being out of date. Run php artisan vendor:publish - provider="Nwidart\Modules\LaravelModulesServiceProvider" --force to publish the up to date configuration"

Publishing the vendor does work because  this same message appears when I try to run any artisan command. Tried copying the config file manually, even after that getting the same message.
Tried with another project on Laravel where Laravel-modules was never installed - same message appears but this time it happens when I try to create a module, the initial vendor:publish works fine.

Any help is highly appreciated.
Hi;

I'm trying to read a value from laravel .env file on a vue file...as laravel mix docs says we need just to call :
process.env.MIX_VARNAME

when .env file contains 
VARNAME=test
MIX_VARNAME="${VARNAME}"

it's work on laravel main apps.js but if try it on a module folder it's not work (undefined)

I try to require dotenv but same problem

any idea ?
When I run my tests with this command `./vendor/bin/phpunit --coverage-text --colors=never` I have this error:
`Undefined variable: factory`.

I have checked that the `registerFactories()` method is called in my provider (`MyModuleServiceProvider`), it is well called.

I saw on the documentation that we need to add this piece of code in  `MyModuleServiceProvider`
```
$this->app->singleton(Factory::class, function () {
            $faker = $this->app->make(\Faker\Generator::class);
            return Factory::construct($faker, __DIR__ . '/../Database/factories');
});
```
it doesn't work ( same after I ran the command  `composer dumpautoload` )

Do you know how to fix the error ? 
Laravel: 6.2
Lararvel-module: 6.1

I try to remove some folder I don't need from module generator, and flagged their `generate` key on config file to `false` but nothing effected

after some trace, I found the problem with method `generateFiles` on `ModuleGenerator` line `360`

you need to use `continue`  keyword not `$this->filesystem->makeDirectory($dir, 0775, true);`

![carbon](https://user-images.githubusercontent.com/22733622/68083941-b1bb2880-fe37-11e9-9283-ae8877c7eb5b.png)

please fix it ASAP
Hi! This PR is a working implementation of the database activator, however it needs quite a few improvements. I don't have enough time to improve the database implementation, however I need this part in some projects. I'd therefore like this PR to be merged already so other can also improve the database implementation.
Hi,

We found out that using multiple route service providers (one per module) causes performance issues. This is due to the fact that the (cached) routes are re-loaded for each RouteServiceProvider. In our test-suite this causes delays due to createApplication taking 60ms where 40ms is spent in reloading routes.

According to the Laravel developers the RouteServiceProvider should not be instantiated more than once (see https://github.com/laravel/framework/issues/30171 ).   

We solved our performance issues by using loadRoutesFrom in the main ServiceProvider of each module. 

To prevent other users of this package from having the same issues, I suggest to remove the module:route-provider command as it promotes usage of multipe RouteServiceProviders and thus leads to performance issues. If you want this, I can provide a PR to remove the module:route-provider command (or to replace it with a hint to use loadRoutesFrom) 




Hi, Would just like to say thanks for the work so far, is my first time using the package and has been a good experience, however I've now run into an issue which there seems to be a few similar issues which have been previously closed - however not being addressed by the package maintainers.

How to reproduce:

- `php artisan module:make DemoModule`
- `php artisan view:cache`

--

It seems to be because the way the package scaffolds the service providers. e.g. it does:

```php
    public function registerViews()
    {
        $viewPath = resource_path('views/modules/demomodule');

        $sourcePath = __DIR__.'/../Resources/views';

        $this->publishes([
            $sourcePath => $viewPath
        ],'views');

        $this->loadViewsFrom(array_merge(array_map(function ($path) {
            return $path . '/modules/demomodule';
        }, Config::get('view.paths')), [$sourcePath]), 'demomodule');
    }
```

This seems to **assume** that `resource_path('views/modules/demomodule');` exists as when it runs 

```
$this->loadViewsFrom(array_merge(array_map(function ($path) {
    return $path . '/modules/demomodule';
}, Config::get('view.paths')), [$sourcePath]), 'demomodule');
```

This is the section that breaks the vanilla Laravel commands.

Would you please investigate into a way to making this compatible with the Laravel defaults?

Many thanks :)
This is a work in progress pull request to replace the custom `Migrator` class by using laravel's native `migrate:` commands.
This is an experiment and is not guaranteed to merged.

Current module command would still exist, but as a proxy to the native command.

| laravel-modules  | native  | status |
|---|---|---|
| `module:migrate`  | `migrate`  | âœ…|
| `module:migrate-reset` | `migrate:reset`  | in progress |
| `module:migrate-rollback` | `migrate:rollback`  | in progress |
| `module:migrate-status` | `migrate:status`  |  |

***

## Issues:

### `migrate:reset`

When we have more than 1 module, the migration table will contain migrations for multiple modules:

![image](https://user-images.githubusercontent.com/882397/57585066-31001d00-74e3-11e9-9d74-9a3719bb9de5.png)

Knowing this, when running `module:reset` (proxying to `migrate:reset`), it loops over every module, and calls the reset command.
This will show:

```
â•°â”€ art module:migrate-reset
Running for module: Blog
Migration not found: 2019_03_04_121211_create_recipes_table
Rolling back: 2019_05_12_160047_create_posts_table
Rolled back:  2019_05_12_160047_create_posts_table
Running for module: Recipe
Rolling back: 2019_03_04_121211_create_recipes_table
Rolled back:  2019_03_04_121211_create_recipes_table
```

It shows a "migration not found" error, because when trying to reset the first module, `Blog`, it sees there's another migration name in the database, but cannot find the file associated with it.

This will probably be recurring in other commands like rollback.
I'm currently not sure how to fix this.

Fix when calling for all modules: Instead of looping over every module and calling `reset`, prepare the array of paths and call reset with this.
Issue remains when calling reset on a specific module.

### `migrate:rollback`

Unlike `migrate:reset`, `migrate:rollback` does not support getting an array of paths.
Depends on: https://github.com/laravel/framework/pull/28495

### `migrate:status`

Depends on: https://github.com/laravel/framework/pull/28496
Hey,

Laravel itself supports the factory generation for the model making command:

```
php artisam make:model <Model> --factory|-f
```

Could we have this feature for this package aswell? :)