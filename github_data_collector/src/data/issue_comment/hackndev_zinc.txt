I know it's early days (and other MCU support is coming), but the HiFive1 seems like an *awesome* potential target platform for something like this.

At the moment there is a gcc / g++ toolchain you can build binaries for RISC-V with, and load them onto the HiFive1 with openocd.

https://www.sifive.com/products/hifive1/
I was looking through the repository and couldn't find any mentions about other peripherials on the MCU, specifically ADC. Is it possible to use these now? If not, how hard would it be to add it and where should I start? 
Fix #329 

Obvously, `k20` is still a special case, but I think this gives a good base on which to build a generator that will work generically accross all supported MCUs. (We still have #109) to track the `k20` layout in.

I would make an attempt, but I don't have a k20 board or anything, so maybe @bgamari could take a look at some additions to this generator?

I think the way forward is to have like `flash_config: Option[McuFlashConfig]` in `McuLayout` and then `struct McuFlashConfig { ... }` elsewhere... but that could be a naive  solution that I just came up with at first glance.
Most of the iomem.ld stuff can be moved in to native rust I *think*. (ping @farcaller).

We can just have them as rust statics that get changed to `&'static` references to their actual types. This is what I see for a lot of the newer register code.

Is there a downside to doing this @farcaller? As for #329, this would allow us to completely do away with mcu-specific linker scripts (with the exception of maybe `k20`).

Also kinda related to #403, as this, as long as it's 0-cost, will help us phase out a huge amount of our `extern static` usage.
We'll need to comply with the new `safe_extern_statics` lint. It's currently set to `warn` by default, but that's going to change.

Upstream issue in rust: rust-lang/rust#35112
Hey farcaller

(this is only an idea, its not for merging)

What do you think about using features to select not only the chip family but to select the available hardware features? The user would use his exact model number as a feature, e.g. mc_mk20dx256vlq10 and the feature system would use the Cargo.toml to select all available hardware parts. (at least the K20 family (and even the Kxx family) are build to be software compatible). It would also use the features to select the appropiate linker scripts using the correct flash sizes.
Also shortcuts for popular boards are possible, e.g. board_teensy. (That is the one I have :D)
This would also allow to use a special pin number assignment for these arduino like boards since their pins are labeled with a different enumerating system.

(I'm using some free time to make my teensy more rust compatible. But maybe you have some Ideas for zinc and no time to implement them / play with them. I would be happy to chat about zinc with you. I'm not yet an expert with all of this, but I am going to be :D)

PS: https://github.com/Phaiax/cargo-teensy
Currently, all methods in traits describing hardware classes (such as GPIO pins and SPI bus interfaces) use non-mutable `&self` pointers. This might cause problems with two or more consumers meddling with hardware state at the same time and getting into race conditions, for example, which are going to be very hard to diagnose at some point.

I have a suggestion to make the methods require `&mut self` pointers, except for those which are generally thread-safe and, more importantly, guaranteed to not change hardware state. What this means, is that operations such as send, receive (since it shifts buffer registers), write pin state, change pinmux configuration etc. should require mutability of the corresponding hardware resource. However peek (get buffer contents without shifting it), read pin state, get current time and similar operations may be made to work with non-mutable resources.

Also, in case of devices depending on underlying lower-level resources (for example, most real-time clocks and on-board sensors using buses such as I2C or SPI), the device driver owning mutable references to those resources may expose methods which don't require mutability - for operations which don't change the overall hardware state except for lower level bus registers etc., abstracted away by the driver. The driver, however, should ensure thread safety of those methods via locking mechanisms, atomicity guarantees and whatnot.

This is one of the topics I want to discuss as part of RFC party (#359), and I finally cleaned up code enough to share it.

https://github.com/farcaller/zinc-hal-lpc11xx ([api doc](http://farcaller.github.io/zinc-hal-lpc11xx/zinc_hal_lpc11xx/ioregs/index.html)) provides a Cargoized hal layer for single MCU family (actually only ioregs now). It's generated with yasha (#341) with some modifications, most notably additional renaming/cleanup step (you can see the modification rules [here](https://github.com/farcaller/zinc-hal-lpc11xx/blob/master/names.yml)). It also fixes #344 and makes few modifications to the layout, most notably it supports sparse peripherals by addressing not the peripheral but individual registers.

Pinging in @bgamari @0xc0170 @bharrisau @kvark @posborne @mcoffin and @errordeveloper. Are you in for a few hours of discussion on project goals?

What to discuss:
- switching to rustfmt (#358)
- switching from `ioreg!` macro to pre-generated code (I'll try hard to submit the demo tomorrow, to show pros and cons)
- zinc as part of crates.io infrastructure (do we want to split stuff into crates?)
- something else?

Putting out a feeler.  I think using the standard style is probably a good idea and makes contributing easier (in addition to making my emacs configuration easier).

https://github.com/rust-lang/rust/tree/master/src/doc/style

rustfmt can probably do a majority of the work, although it still needs some handholding in my experience to prevent it from going in the weeds in edge cases.  With `cargo install` we can be `rustfmt`ing in no time.

I don't think there are too many major outstanding PRs that would need to be reworked, so now seems as good a time as any to make the switch if this suggestion is amenable. 
