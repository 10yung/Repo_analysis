Reported in https://github.com/greymd/tmux-xpanes/issues/114#issuecomment-561247362

The session file is automatically deleted when tmux session is detached.
I imagine it must be helpful for users if the session file is kept in that case.
Because, in a common case, the user does not recognize the possibility that the session is better to be kept alive when opening the new windows.

### How to reproduce
(1) Create session from outside of tmux session.

```sh
$ xpanes --ssh localhost
```
(2) Detach the session (`ctrl+b` and `d` by default)

(3) Session is alive but session file is deleted.

```
$ ps alx | grep tmux
1  1000 20005     1  20   0  27648  4032 poll_s Ss   ?          0:00 tmux -S /home/ubuntu/.cache/xpanes/socket.19931 new-session -s xpanes-19931 -n tmp-19931 -d /usr/bin/xpanes '--ssh' '-c' 'ssh -o StrictHostKeyChecking=no {} '  '--' 'localhost'

$ ls /home/ubuntu/.cache/xpanes/socket.19931
ls: cannot access '/home/ubuntu/.cache/xpanes/socket.19931': No such file or directory
```

### Technical reason

This is caused by this `trap`.
https://github.com/greymd/tmux-xpanes/blob/dda18b9283d49d757eb525161fe866fc61ef6e94/bin/xpanes#L11

```
$ bash -x xpanes -c 'ssh {}' localhost localhost
+ readonly 'XP_SHELL=/usr/bin/env bash'
...
+ tmux -S /home/ubuntu/.cache/xpanes/socket.9635 attach-session -t xpanes-9635
[detached (from session xpanes-9635)]
+ exit 0
+ rm -f '/home/ubuntu/.cache/xpanes/__xpns_*9635'
+ rm -f /home/ubuntu/.cache/xpanes/socket.9635
```

The temporal session file `~/.cache/xpanes/socket.<PID>` is supposed to be used to [recover the session](https://github.com/greymd/tmux-xpanes#recover-disconnected-session).
So, the file may be kept in case of network disconnection or any other troubles.
On the other hand, the file is going to be deleted if the tmux session is **explicitly exited** because any recovery won't be required.

However, tmux also makes its own process exit when detaching (ctrl+b d).
As far as investigated, there is no way for `xpanes` to confirm whether the session is "explicitly exited" or "detached". This is the reason why `xpanes` deletes the session file.


Hi @greymd,

Firstly, thank you for this amazing piece of kit.
I've made a tool built on xpanes that really helped my research: [htop cluster](https://gitlab.com/beevabeeva/htop-cluster).

I've found myself building another tool using xpanes. This time, I needed to run an alias command on each of the servers in the cluster which I ssh into on xpanes. Similar to the tool mentioned earlier, just with an alias instead of htop.

I eventually figured out how this needs to be done from following the instructions [here](https://askubuntu.com/questions/810098/why-doesnt-my-alias-work-over-ssh).

The following is a snippet from my Python script:
```python
# Make ha partition hosts (mscluster1...mscluster10) procedurely:
ha = ""
for i in range(0,10):
    ha+= 'mscluster'+str(i+1)+" "


run2 = xpanes + " -C 2 -t -c \"ssh abank@{} -t bash -ci 'atm-run'\" " + ha
system(run2)

```

The  ```-t bash -ci 'atm-run' ``` allows me to execute my alias (atm-run) in each of the panes, corresponding to each node in the cluster.

I know there shouldn't be instructions for ssh options in these docs, but it seems to me like it would be beneficial to have this as one of the examples in the docs.
At the very least, this issue will remind me of how to do this in the future :yum: 

All the best
 
Thanks for this software. It is so cool :)
Actually, very useful. I did not now about its existence, it works so great. I combine it with synchronized panes and it is wonderful.

Sorry, I know issues are not always for random comments like this one.

If we don't close this issue, can people share the use cases for what you guys use it?

ZZC^ad
Here is my rough idea.
New feature called alias feature.
Any feedbacks is welcome.

For now, `xpanes` has following problems.

 * Users cannot set pane's title provided by `-t` individualy.
 * Re-define `xpanes` with built-in `alias` is lazy.
   * Many escaping
   * i.e: `alias prod-servers="xpanes -c 'ssh {}' \"-i key1 user1@server1\" \"-i key2 user2@server2\" "`

Alias feature would solve above problems.

Creating file. It would be TSV, YAML or JSON.
`${HOME}/.config/tmux-xpanes/aliases/prod-servers.yaml`

```yaml
- cmd: ssh server1
  title: server1
- cmd: ssh server2
  title: server2
- cmd: ssh server3
  title: server3
- cmd: ssh server4
  title: server4
```

Execute with `--alias`, `-A` + `Alias name`

```
xpanes -A prod-servers
```

Result

```
    +-------------------------------+------------------------------+
    │$ ssh server1                  │$ ssh server2                 │
    │                               │                              │
    │                               │                              │
    │                               │                              │
    │                               │                              │
    │                               │                              │
    │                               │                              │
    │                               │                              │
    +-[server1]---------------------+-[server2]--------------------+
    │$ ssh server3                  │$ ssh server4                 │
    │                               │                              │
    │                               │                              │
    │                               │                              │
    │                               │                              │
    │                               │                              │
    │                               │                              │
    │                               │                              │
    +-[server3]---------------------+-[server4]--------------------+
```
Hey @greymd, in my workflow as it pertains to `tmux-xpanes` I use what I call "schemes."

For example, I have an `iTerm` profile called "XP::Packages" that executes this script after login:
`${HOME}/.config/tmux-xpanes/schemes.bash pkgmgnt`


```bash
function pkgmgnt() {
    title Package management

    xpanes -t -d -l t -c "{}" "title gems; gem outdated" \
           "title macports; port outdated" \
           "title yarn global; yarn global upgrade-interactive" \
           "title composer global; composer global outdated"
}
```

Would it be possible to build in such a feature? 

