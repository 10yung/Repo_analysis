When `Marginalia::Comment.prepend_comment` is set to `true` in a rails app, ActiveRecord explain stops showing the explain results in the rails console

<img width="1255" alt="Screenshot 2020-01-01 at 15 17 38" src="https://user-images.githubusercontent.com/5461473/71640111-e0277980-2ca9-11ea-95fd-a9fa6fe23e73.png">


### Environment
Database: PostgreSQL 10.10
Rails: 5.2.3
Ruby: 2.6.5
Marginalia: 1.8.0

When I try to install the gem as is, I get the error in the issue title. Is anyone else getting the same error? 

I've looked into this error and it sounds like instead of using `ActiveSupport.on_load :action_controller do` on `lib/marginalia/railtie.rb:13` it should be using `ActiveSupport.on_load :action_controller_base do`. Can someone confirm this?
Ran some benchmarks using `derailed_benchmarks` for one of our endpoints that does a lot of data loading. What I noticed was the `line` and `lines_to_ignore` methods were showing up in the samples a bunch. I did a before and after `perf:ips` test and got a ~25% improvement after removing the `:line` component. Each test was for 5 minutes, so I'm fairly confident in the results.

This PR is just to add a note to the README noting the performance impact of using the `:line` component.
## Problem

I noticed the string allocations from the [`str.include?` calls in escape_sql_comment](https://github.com/basecamp/marginalia/blob/v1.8.0/lib/marginalia/comment.rb#L39) in a stackprof object profile.  These are unnecessary to allocate on each call since they aren't modified.

## Solution

Use `# frozen_string_literal: true` so that it doesn't allocate these strings on each call.
Rails 6 now returns an instance of `NullPool` instead of `nil` in response to `Connection#pool` at times, and `NullPool` does not have `#spec` so this method blows up. Instead of testing for a `nil` pool, test if the pool responds to `#spec` which should cope with both `nil` and `NullPool` instances with full backwards compatibility.
Also upgrades Travis Ubuntu to 16.04, as I don't know how to downgrade bundler on 14.04.
This is to make it easier to parse these comments from logs.
This introduces a change to combine the `controller` and
`controller_with_namespace` components by making the `controller`
component rely on `controller_path` and manipulate the value that comes
back from that.

The idea for this came from an issue where we wanted the benefits of the
`controller_with_namespace` component but we already have a bunch of
logs with `controller`. Once I looked into how the controller name was
being fetched, I seen we had the chance to consolidate the two
components and remove some of the duplicated functionality.
The gem now includes the Sidekiq middleware, so the example in the wiki might lead someone to duplicate the code in their app, potentially overriding any future upstream improvements or fixes.

I tried forking the wiki, but it seems like it's not editable by non-committers.
