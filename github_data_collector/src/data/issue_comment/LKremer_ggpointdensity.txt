Hi, thanks for the work on this very useful package!

This might be a dumb thought, but I was wondering if it would be possible to incorporate jitter'ed points (probably through `geom_jitter`) as an option. I'm not sure if it would be better to calculate the density before or after jittering, too.  

Thanks again!
Great work on this package! One challenge I often face is that I'll want to export a plot as an SVG for the final version, but each point is rendered as an individual object which makes the files unwieldy. 

One solution to this problem is to render the the entire plot as vector graphics except for the point later which is rendered as a raster. This is implemented in the [ggrasr](https://github.com/VPetukhov/ggrastr), package. 

Would you consider adding a raster option to `stat_pointdensity`? The ideal use scenario would be to call `  stat_pointdensity(geom = 'pointrastr')`, but I'm not sure how to get that to get the pointrastr geom to export. Another solution would be to create a another geom, `geom_pointdensity_rastr` which would serve this purpose. 

Here's my hacky solution for now (using @VPetukhov 's code from [here](https://github.com/VPetukhov/ggrastr/blob/master/R/geom-point-rast.R))

```
> DrawGeomPointRast <- function(data, panel_params, coord, na.rm = FALSE, raster.width=NULL, raster.height=NULL, raster.dpi=300) {
+   if (is.null(raster.width)) {
+     raster.width <- par('fin')[1]
+   }
+   
+   if (is.null(raster.height)) {
+     raster.height <- par('fin')[2]
+   }
+   
+   prev_dev_id <- dev.cur()
+   
+   p <- ggplot2::GeomPoint$draw_panel(data, panel_params, coord)
+   dev_id <- Cairo::Cairo(type='raster', width=raster.width*raster.dpi, height=raster.height*raster.dpi, dpi=raster.dpi, units='px', bg="transparent")[1]
+   
+   grid::pushViewport(grid::viewport(width=1, height=1))
+   grid::grid.points(x=p$x, y=p$y, pch = p$pch, size = p$size,
+                     name = p$name, gp = p$gp, vp = p$vp, draw = T)
+   grid::popViewport()
+   cap <- grid::grid.cap()
+   dev.off(dev_id)
+   dev.set(prev_dev_id)
+   
+   grid::rasterGrob(cap, x=0, y=0, width = 1,
+                    height = 1, default.units = "native",
+                    just = c("left","bottom"))
+ }
> 
> GeomPointRast <- ggplot2::ggproto(
+   "GeomPointRast",
+   ggplot2::GeomPoint,
+   draw_panel = DrawGeomPointRast
+ )
> 
> diamonds %>%
+   ggplot(aes(x=carat, y = depth)) + 
+   stat_pointdensity(geom = GeomPointRast) + 
+   scale_color_viridis_c()
geom_pointdensity using method='kde2d' due to large number of points (>20k)
```
![image](https://user-images.githubusercontent.com/22528952/69922768-c1dd1c80-1464-11ea-8905-dac658ee37b1.png)

This adds the ndensity stat for use in faceted plots, as suggested in #1 
See below for an example:
```
> diamonds %>%
+   ggplot(aes(x=carat, y = depth)) + 
+   stat_pointdensity(aes(col = stat(ndensity))) + 
+   scale_color_viridis_c() + 
+   facet_wrap(cut~.)
geom_pointdensity using method='kde2d' due to large number of points (>20k)
```
![image](https://user-images.githubusercontent.com/22528952/69774668-33af2080-115c-11ea-8614-6000b61606dd.png)

When plotting millions of points, counting the number of neighbors of each point is extremely slow. The current algorithm calculates the pairwise distance for *all* points. This could be optimized, for instance [with this approach](https://en.wikipedia.org/wiki/Fixed-radius_near_neighbors#Solution_by_rounding_and_hashing). Other ideas are welcome.
Would it make sense to create a computed statistic to show the normalized/relative number of neighbors per group to the max nearest neighbors?

```r
# i.e.
data$r_neighbors <- data$n_neighbors / max(data$n_neighbors)
```