No function or variable is defined  'adjacentRegionsGraph'。
I found the image and  features used in demo.m as follows:
image = imread('docia.png');
features = image(:, size(image, 2) / 2 + 1 : end, :);
  and  It can show the segmentation result。
but  I have a question，what is the relation  between this project and the sister project ，the  python realization version http://people.inf.ethz.ch/aksoyy/sss/？
 another question：
   when I input the 128 dimension features，the segmentation result is similar with the above。
so  why do you  need  the sister  implementation？  we can get the  soft semantic segmentation result just using this project，can we？
many thanks！
Hi YAksoy

I was unable o produce the same results as given in the paper on any other image and also **new to MATLAB**.

- I used the SIGGRAPH18SSS repo to generate the features that gave me docia.mat file.
- I later placed the mat file along with the input PNG in this repo and ran the demo.m where I read the docia.png file as the input and the results that I got was as follows.

![out](https://user-images.githubusercontent.com/13079008/60858516-47e59600-a22c-11e9-8b68-8c8377fd8a3a.jpg)

Which is fine but was unable to understand how to get the middle section of the PNG that is highlighted as follows.
![op1jpg jpgwith text](https://user-images.githubusercontent.com/13079008/60858573-88ddaa80-a22c-11e9-9a76-018e0410a5e6.jpg)



Also I am not sure if the code was even using the docia.mat file. And it just used the PNG file below.
![docia2](https://user-images.githubusercontent.com/13079008/60858646-d0643680-a22c-11e9-987a-e828f594e392.png)


Could you help me on how to run this to get the input file from the features(docia.mat file) as desired.

Regards
Yash
Hi, @yaksoy 
Thank you for your great paper!

I have some questions about ways to solve problems more efficiently.
I think your prototype implementation roughly includes 4 processes excluding a feature extractor and their respective computational costs for a single 640x480 image follow:
1. calculation of Laplacian matrix `L` from affinities (~1 sec)
2. calculation of eigenvectors of `L` (~ 1 min)
3. solving a constrained sparsification problem (~3 mins)
4. solving a relaxed sparsification problem (~30 secs)

By the way, you say in paper,

> The efficiency of our method can be optimized in several ways, such as **multi-scale solvers**, but an **efficient implementation of linear solvers** and **eigendecomposition** lies beyond the scope of our paper.

There seems to be 3 ways to make the execution time shorter, multi-scale solver, more efficient linear solvers and eigendecomposition.

Questions:
1. However, which processes do they correspond to?
2. What is multi-scale solver?
3. Can I make the most heavy process (process 3) faster?
when I running  this code ,there are some errors:
错误使用  .* 
矩阵维度必须一致。

出错 groupSegments (line 12)
        cc = segments(:,:,i) .* features;

出错 SemanticSoftSegmentation (line 42)
    groupedSegments = groupSegments(initSoftSegments, features);

出错 demo (line 20)
sss = SemanticSoftSegmentation(image, features);

I don't know what the thing I mistake, can you help me to solve this problem.

thankyou ! 