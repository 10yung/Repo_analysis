I create VMs using the following command in R:
```
vms <- gce_vm_cluster(vm_prefix=vm_base_name,
                      cluster_size=cluster_size,
                      docker_image = my_docker,
                      ssh_args = list(username="test_user",
                      key.pub="/home/test_user/.ssh/google_compute_engine.pub", 
                      key.private="/home/test_user/.ssh/google_compute_engine"),
                      predefined_type = "n1-highmem-2")
```
now when I SSH into the VMs, I do not find the .docker folder in the home directory

```
test_user@test_server_name:~$ gcloud beta compute --project "my_test_project" ssh --zone "us-central1-a" "r-vm3"
test_user@r-vm3 ~ $ ls -a
.  ..  .bash_history  .bash_logout  .bash_profile  .bashrc  .ssh
```
Now the below command gives an error (..obviously)

```
test_user@r-vm3 ~ $ docker pull gcr.io/my_test_project/myimage:version1
Unable to find image 'gcr.io/my_test_project/myimage:version1' locally
/usr/bin/docker: Error response from daemon: unauthorized: You don't have the needed permissions to perform this operation, and you may have invalid credentials. To authenticate your request, follow the steps in: https://cloud.google.com/container-registry/docs/advanced-authentication.
See '/usr/bin/docker run --help'.
```
I need to run the `docker-credential-gcr configure-docker` command to get the folder/file `.docker/config.json`
```
test_user@r-vm3 ~ $ docker-credential-gcr configure-docker
/home/test_user/.docker/config.json configured to use this credential helper for GCR registries
test_user@r-vm3 ~ $ ls -a
.  ..  .bash_history  .bash_logout  .bash_profile  .bashrc  .docker  .ssh
```
Now,
```
test_user@r-vm3 ~ $ docker pull gcr.io/my_test_project/myimage:version1
version1: Pulling from my_test_project/myimage
Digest: sha256:98abc76543d2e10987f6ghi5j4321098k7654321l0987m65no4321p09qrs87654t
Status: Image is up to date for gcr.io/my_test_project/myimage:version1
gcr.io/my_test_project/myimage:version1
```

**What I am trying to resolve**:
I need the .docker/config.json to appear in the VMs without SSHing in and running the `docker-credential-gcr configure-docker` command


I get an error when I'm trying to setup an instance, i don't know why because I'm following all the tutorial steps

**To Reproduce**
When I run...

```
project = "rootestvis"
zone = 'us-central1-a'
account_key= 'rootestvis-7847656b043f.json'

Sys.setenv(CGE_AUTH_FILE = account_key,
           GCE_DEFAULT_PROJECT_ID = project,
           GCE_DEFAULT_ZONE = zone)

gce_global_project(project)
gce_global_zone(zone)
  

vm <- gce_vm(template= "rstudio",
             name= "rstudiobot",
             username= "rstudio",
             password= "rforpresident",
            )
```

Instead of everything going ok, I get the following error:

```
2019-10-20 18:12:13> Request Status Code: 403
Error: API returned: Insufficient Permission: Request had insufficient authentication scopes.


```

**Session Info
```

R version 3.6.1 (2019-07-05)
Platform: x86_64-pc-linux-gnu (64-bit)
Running under: Linux Mint 19.2

Matrix products: default
BLAS:   /usr/lib/x86_64-linux-gnu/blas/libblas.so.3.7.1
LAPACK: /usr/lib/x86_64-linux-gnu/lapack/liblapack.so.3.7.1

locale:
 [1] LC_CTYPE=en_US.UTF-8       LC_NUMERIC=C               LC_TIME=en_US.UTF-8        LC_COLLATE=en_US.UTF-8    
 [5] LC_MONETARY=pt_BR.UTF-8    LC_MESSAGES=en_US.UTF-8    LC_PAPER=pt_BR.UTF-8       LC_NAME=C                 
 [9] LC_ADDRESS=C               LC_TELEPHONE=C             LC_MEASUREMENT=pt_BR.UTF-8 LC_IDENTIFICATION=C       

attached base packages:
[1] stats     graphics  grDevices utils     datasets  methods   base     

other attached packages:
[1] googleComputeEngineR_0.3.0

loaded via a namespace (and not attached):
 [1] Rcpp_1.0.2        codetools_0.2-16  listenv_0.7.0     future_1.14.0     packrat_0.5.0     digest_0.6.21    
 [7] assertthat_0.2.1  R6_2.4.0          jsonlite_1.6      httr_1.4.1        rlang_0.4.0       curl_4.2         
[13] fs_1.3.1          googleAuthR_1.1.1 tools_3.6.1       glue_1.3.1        parallel_3.6.1    compiler_3.6.1   
[19] askpass_1.1       gargle_0.4.0      globals_0.12.4    memoise_1.1.0     openssl_1.4.1    
>
```



## What goes wrong
Calling `gce_vm_delete` or `gce_vm_stop` (googleComputerEngineR package) throws an error:

```
Request Status Code: 400
Error: API returned: Invalid value '2019-08-30T12:00:51.270-07:00'. Values must match the following regular expression: '[a-z](?:[-a-z0-9]{0,61}[a-z0-9])?|[1-9][0-9]{0,19}'
```

(The date/time here appears to be the current date/time. The problem seems to be the "T" in the date/time string.) Using R 3.6.1 in Rstudio on Debian Linux. 

I am posting here because I tracked the error down to the underlying function,
`googleAuthR::gar_api_generator`, but I cannot figure out where the date/time parsing error originates within that function. 


## Steps to reproduce the problem
Start a vm:
vm <- gce_vm("vm-ssh")

Stop vm:
gce_vm_stop(vm)

Or delete vm:
gce_vm_delete(vm)


## Expected output
No error


## Actual output
```
Request Status Code: 400
Error: API returned: Invalid value '2019-08-30T12:00:51.270-07:00'. Values must match the following regular expression: '[a-z](?:[-a-z0-9]{0,61}[a-z0-9])?|[1-9][0-9]{0,19}'
```
Note that the vm does stop or is deleted, depending on the function called, despite the error. 

Before you run your code, please run:

`options(googleAuthR.verbose=2)` and copy-paste the console output here.  
Check it doesn't include any sensitive info like auth tokens or accountIds - you can usually just edit those out manually and replace with say `XXX`

No output

## Session Info

Please run `sessionInfo()` so we can check what versions of packages you have installed
attached base packages:
[1] stats     graphics  grDevices utils     datasets  methods   base     

other attached packages:
[1] googleComputeEngineR_0.3.0     googleCloudStorageR_0.5.0.9000

loaded via a namespace (and not attached):
 [1] zip_2.0.3         Rcpp_1.0.2        compiler_3.6.1    googleAuthR_1.0.0 prettyunits_1.0.2
 [6] remotes_2.1.0     tools_3.6.1       testthat_2.2.1    digest_0.6.20     packrat_0.5.0    
[11] pkgbuild_1.0.3    pkgload_1.0.2     jsonlite_1.6      memoise_1.1.0     gargle_0.3.1     
[16] rlang_0.4.0       cli_1.1.0         rstudioapi_0.10   parallel_3.6.1    curl_4.0         
[21] yaml_2.2.0        withr_2.1.2       httr_1.4.0        globals_0.12.4    desc_1.2.0       
[26] fs_1.3.1          askpass_1.1       devtools_2.1.0    rprojroot_1.3-2   glue_1.3.1       
[31] listenv_0.7.0     R6_2.4.0          processx_3.4.1    sessioninfo_1.1.1 callr_3.3.1      
[36] magrittr_1.5      codetools_0.2-16  backports_1.1.4   ps_1.3.0          usethis_1.5.1    
[41] assertthat_0.2.1  future_1.14.0     mime_0.7          openssl_1.4.1     crayon_1.3.4   
It should not let you launch a VM unless you specify the username/password
Is it possible to add in a vector of username and password? I have tested with the `gce_vm` with `template = "rstudio"` and the following did not work as expected. 

`gce_rstudio_adduser(instance = vm, username = c("user1", "user2"), password = c("user1", "user2"))`

My installation version is `cloudyr/googleComputeEngineR@b58de2e`
**Describe the bug**
When connecting to google compute engine, I am able to set up a machine, but am not able to communicate with it.

**To Reproduce**
``` r
library(googleComputeEngineR)
#> Setting scopes to https://www.googleapis.com/auth/cloud-platform
#> Successfully auto-authenticated via /Users/Kendall/Documents/programming/key.json
#> Set default project ID to 'learning-245421'
#> Set default zone to 'us-west1-a'

vm <- 
  gce_vm(
    name = "newvm", ## Name of the VM on GCE,
    predefined_type = "n1-standard-4",
    template = "rstudio", ## Use the rocker/rstudio docker image
    username = "oprah", password = "oprah1234" ## Username and password for RStudio Server login
  )
#> 2019-07-03 14:05:09> Creating template VM
#> 2019-07-03 14:05:11> Operation running...
#> 2019-07-03 14:05:21> Operation running...
#> 2019-07-03 14:05:41> Operation complete in 11 secs
#> 2019-07-03 14:05:42> ## VM Template: 'rstudio' running at http://34.83.114.44
#> 2019-07-03 14:05:42> On first boot, wait a few minutes for docker container to install before logging in.
#> ==Google Compute Engine Instance==
#> 
#> Name:                newvm
#> Created:             2019-07-03 14:05:10
#> Machine Type:        n1-standard-4
#> Status:              RUNNING
#> Zone:                us-west1-a
#> External IP:         34.83.114.44
#> Disks: 
#>        deviceName       type       mode boot autoDelete
#> 1 newvm-boot-disk PERSISTENT READ_WRITE TRUE       TRUE
#> 
#> Metadata:  
#>                      key            value
#> 2               template          rstudio
#> 3 google-logging-enabled             true
#> 4           rstudio_user            oprah
#> 5             rstudio_pw        oprah1234
#> 6      gcer_docker_image rocker/tidyverse
#> 2019-07-03 14:05:42> newvm VM running

gce_vm_stop(vm)
#> 2019-07-03 14:05:42> Request Status Code: 404
#> Error : lexical error: invalid char in json text.
#>                                        Not Found
#>                      (right here) ------^
#> 
#> Not Found
#> Error: lexical error: invalid char in json text.
#>                                        Not Found
#>                      (right here) ------^
```

<sup>Created on 2019-07-03 by the [reprex package](https://reprex.tidyverse.org) (v0.2.1)</sup>

**Expected behavior**
I expected to be able to stop the virtual machine from within R studio.

**Session Info

```R version 3.5.3 (2019-03-11)
Platform: x86_64-apple-darwin15.6.0 (64-bit)
Running under: macOS High Sierra 10.13.6

Matrix products: default
BLAS: /System/Library/Frameworks/Accelerate.framework/Versions/A/Frameworks/vecLib.framework/Versions/A/libBLAS.dylib
LAPACK: /Library/Frameworks/R.framework/Versions/3.5/Resources/lib/libRlapack.dylib

locale:
[1] en_US.UTF-8/en_US.UTF-8/en_US.UTF-8/C/en_US.UTF-8/en_US.UTF-8

attached base packages:
[1] stats     graphics  grDevices utils     datasets  methods   base     

other attached packages:
[1] googleComputeEngineR_0.3.0

loaded via a namespace (and not attached):
 [1] Rcpp_1.0.1        compiler_3.5.3    googleAuthR_0.8.0 prettyunits_1.0.2
 [5] remotes_2.0.4     tools_3.5.3       digest_0.6.19     pkgbuild_1.0.3   
 [9] jsonlite_1.6      memoise_1.1.0     evaluate_0.14     rlang_0.4.0      
[13] reprex_0.2.1      cli_1.1.0         rstudioapi_0.10   curl_3.3         
[17] parallel_3.5.3    xfun_0.8          withr_2.1.2       httr_1.4.0       
[21] knitr_1.23        fs_1.3.1          askpass_1.1       globals_0.12.4   
[25] rprojroot_1.3-2   listenv_0.7.0     R6_2.4.0          processx_3.3.0   
[29] rmarkdown_1.13    whisker_0.3-2     callr_3.2.0       clipr_0.5.0      
[33] magrittr_1.5      backports_1.1.4   codetools_0.2-16  ps_1.3.0         
[37] htmltools_0.3.6   assertthat_0.2.1  future_1.14.0     openssl_1.4      
[41] crayon_1.3.4     
```

**Additional context**
Thanks!
Hi all, I've also been struggling with this issue while trying to set up a VM cluster using `gce_vm_cluster` and unfortunately the solutions suggested both here and in #32 have not been working.

Here is how my `gce_vm_cluster` is set up:

```
ssh <- list(
  "username" = "crayn",
  "ssh_overwrite" = FALSE,
  "key.pub" = file.path("C:","Users", "crayn", ".ssh", "id_rsa.pub"), 
  "key.private" = file.path("C:","Users", "crayn", ".ssh", "id_rsa")
)

vms <- gce_vm_cluster(
  vm_prefix = "attempt25-", 
  cluster_size = 1,
  docker_image = "rocker/r-parallel", 
  ssh_args = ssh,
  project = gce_get_global_project(), 
  zone = gce_get_global_zone()
)
```

I've gone through all the suggestions both here and in #32, but am getting the following error message: 

```
2019-06-08 18:35:31> # Creating cluster with settings: template = r-base, dynamic_image = rocker/r-parallel, wait = FALSE, predefined_type = n1-standard-1
2019-06-08 18:35:34> Operation running...
2019-06-08 18:35:37> Operation running...
2019-06-08 18:35:43> Operation complete in 6 secs
2019-06-08 18:35:44> attempt24-1 VM running
2019-06-08 18:35:44> # Setting up SSH:username = crayn,ssh_overwrite = FALSE,key.pub = C:/Users/crayn/.ssh/id_rsa.pub,key.private = C:/Users/crayn/.ssh/id_rsa
2019-06-08 18:35:44> Using ssh-key files given as C:/Users/crayn/.ssh/id_rsa.pub / C:/Users/crayn/.ssh/id_rsa
2019-06-08 18:35:52> Public SSH key uploaded to instance
2019-06-08 18:35:52> # Testing cluster:
Failed to add the host to the list of known hosts ('C:\\Users\\crayn\\AppData\\Local\\Temp\\RtmpkP30Ts/hosts').
GetConsoleMode on STD_INPUT_HANDLE failed with 6
```

My session then hangs for several minutes until it times out, although it does creates the VM in my GCP Console. 

After doing some investigation with `trace`, the problem seems to isolate to `gce_ssh_addkeys` > `do_system` > `system2`

It tried running the same arguments through `system2` verbosely:
```
`test_cmd <- "ssh"`
`test_sargs <- c(
  "-v", 
  "-o BatchMode=yes -o StrictHostKeyChecking=no -o UserKnownHostsFile='C:\\Users\\crayn\\AppData\\Local\\Temp\\RtmpkP30Ts/hosts'", " -i ", 
  "'C:\\Users\\crayn\\.ssh\\id_rsa'", "crayn@35.203.124.94", "\"echo attempt25-1 ssh working\""
)
system2(test_cmd, args = test_sargs, wait = TRUE, stdout = "", stderr = "")
```
This produced the following readout:
```
OpenSSH_for_Windows_7.7p1, LibreSSL 2.6.5
debug1: Connecting to 35.203.124.94 [35.203.124.94] port 22.
debug1: Connection established.
debug1: identity file C:\\Users\\crayn/.ssh/id_rsa type 0
debug1: key_load_public: No such file or directory
debug1: identity file C:\\Users\\crayn/.ssh/id_rsa-cert type -1
debug1: key_load_public: No such file or directory
debug1: identity file C:\\Users\\crayn/.ssh/id_dsa type -1
debug1: key_load_public: No such file or directory
debug1: identity file C:\\Users\\crayn/.ssh/id_dsa-cert type -1
debug1: key_load_public: No such file or directory
debug1: identity file C:\\Users\\crayn/.ssh/id_ecdsa type -1
debug1: key_load_public: No such file or directory
debug1: identity file C:\\Users\\crayn/.ssh/id_ecdsa-cert type -1
debug1: key_load_public: No such file or directory
debug1: identity file C:\\Users\\crayn/.ssh/id_ed25519 type -1
debug1: key_load_public: No such file or directory
debug1: identity file C:\\Users\\crayn/.ssh/id_ed25519-cert type -1
debug1: key_load_public: No such file or directory
debug1: identity file C:\\Users\\crayn/.ssh/id_xmss type -1
debug1: key_load_public: No such file or directory
debug1: identity file C:\\Users\\crayn/.ssh/id_xmss-cert type -1
debug1: Local version string SSH-2.0-OpenSSH_for_Windows_7.7
debug1: Remote protocol version 2.0, remote software version OpenSSH_7.5
debug1: match: OpenSSH_7.5 pat OpenSSH* compat 0x04000000
debug1: Authenticating to 35.203.124.94:22 as 'crayn'
debug1: SSH2_MSG_KEXINIT sent
debug1: SSH2_MSG_KEXINIT received
debug1: kex: algorithm: curve25519-sha256
debug1: kex: host key algorithm: ssh-ed25519
debug1: kex: server->client cipher: chacha20-poly1305@openssh.com MAC: <implicit> compression: none
debug1: kex: client->server cipher: chacha20-poly1305@openssh.com MAC: <implicit> compression: one
debug1: expecting SSH2_MSG_KEX_ECDH_REPLY
debug1: Server host key: ssh-ed25519 SHA256:fJX2gVMR82gN6SlA2BCwZvvwmbt7JlRQc/Xa1+LK/fU
Failed to add the host to the list of known hosts ('C:\\Users\\crayn\\AppData\\Local\\Temp\\RtmpkP30Ts/hosts').
debug1: rekey after 134217728 blocks
debug1: SSH2_MSG_NEWKEYS sent
debug1: expecting SSH2_MSG_NEWKEYS
debug1: SSH2_MSG_NEWKEYS received
debug1: rekey after 134217728 blocks
debug1: SSH2_MSG_EXT_INFO received
debug1: kex_input_ext_info: server-sig-algs=<ssh-ed25519,ssh-rsa,rsa-sha2-256,rsa-sha2-512,ssh-dss,ecdsa-sha2-nistp256,ecdsa-sha2-nistp384,ecdsa-sha2-nistp521>
debug1: SSH2_MSG_SERVICE_ACCEPT received
debug1: Authentications that can continue: publickey
debug1: Next authentication method: publickey
debug1: Offering public key: RSA SHA256:R2VhkqCUoT7Clr2qCBH3dC6AFD/4eUJopH2q3szWWMY C:\\Users\\crayn\\.ssh\\id_rsa
debug1: Authentications that can continue: publickey
debug1: Offering public key: RSA SHA256:1GPFycnKhdNiG1HhPpxxc+fmY1oIkRSDF6Dfu7Bg5kk C:\\Users\\crayn/.ssh/id_rsa
debug1: Server accepts key: pkalg rsa-sha2-512 blen 279
debug1: Authentication succeeded (publickey).
Authenticated to 35.203.124.94 ([35.203.124.94]:22).
debug1: channel 0: new [client-session]
debug1: Requesting no-more-sessions@openssh.com
debug1: Entering interactive session.
debug1: pledge: network
debug1: client_input_global_request: rtype hostkeys-00@openssh.com want_reply 0
debug1: Sending command: echo attempt25-1 ssh working
debug1: client_input_channel_req: channel 0 rtype exit-status reply 0
GetConsoleMode on STD_INPUT_HANDLE failed with 6
debug1: client_input_channel_req: channel 0 rtype eow@openssh.com reply 0
```
It seems to me that the problem has something to do with writing to the "hosts" file. Do you have any suggestion to resolve this?

_Originally posted by @camraynor in https://github.com/cloudyr/googleComputeEngineR/issues/35#issuecomment-500176570_
Hardest bit is finding where the error logs are.  A section on logging and finding stuff.  Include:

* `docker exec -it shiny bash ls /var/log`
*  `docker container ls`
*  `docker logs container_id`
If a template VM had a startup script that ran the Docker container containing the R script, that VM can be booted up by cloud scheduler or a cloud function
https://cloud.google.com/solutions/reliable-task-scheduling-compute-engine
Preventing the build at the moment:
https://github.com/r-lib/remotes/issues/306