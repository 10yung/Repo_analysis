Hi all,

I can get the RSSI values from BLE devices which are not connected.

However, after I connect a device using Peripheral.connect(dev1), the Scanner() keeps returning the same RSSI value it had for 'dev1' before the connection (basically the RSSI is not being updated for connected device dev1).

Has anyone come across this before?

Thanks
If I try to pair with a device I have already previously paired with, the pair() method fails (as expected?) but halts the bluetooth helper (unexpected). Any subsequent method which requires the helper then fails with an internal error. 

I can work round this in my code by checking for a BTLEManagementError exception with estat == 19 to trigger a (re) connect. However for me, the halting of the helper was unexpected and so should either be documented - or the pair method itself should handle the re-connect (or not cause a problem in the first place). One could argue that a failed pair - because already paired, should be a nop.

Thoughts?
Hi,
Sorry for bothering you. Is there any way to include carriage return (\r) and line feed (\n) at the end of the packet we are sending. something like the 
![IMG_2693](https://user-images.githubusercontent.com/38612951/70851386-c0224880-1ea9-11ea-8065-c3b642b359da.PNG)
Bluefruit app.


If the connection is lost during (or just before?) a call to setSecurityLevel or setMTU, _getResp('stat') therein consumes the stat reply without noticing the disconnected state.

A subsequent call to disconnect() then sends 'disc' to the Helper which is ignored (because it's already disconnected), and then disconnect() blocks forever waiting for a reply it will never get (and just one step shy of calling _stopHelper()).

This is causing my app to hang when a device with a weak connection drops (undetected) early on, leading to a badstate exception on subsequent calls, and finally to a hang when my try:finally calls disconnect() attempting to clean things up.  (Note if I didn't call disconnect, it could get called by __del__ during GC which would be an even worse place to hang!)

I can see a few "easy" ways to fix it but all have possible side effects and I'm not familiar enough with the whole flow to know what's the best approach.  Suggestions?

Hi,
I am using bluepy with bluez on an arm board. I use two nordic dev kits with the zephyr HCI_UART sample code running, connected via USB.The board has no native bt device. I use btattach to bring up these two boards, and get access to devices HCI0 and HCI1. So far, so good. When I scan I can use the iface param to set which board I want to use. Using btmon I can verify that this is working as I expect. 
However, when I try to create the Peripheral object, setting the iface param fails. btmon tells me that the device I attached last is the one being used. I.e. if I execute btattach -B /dev/ttyACM0 and then the same with ttyACM1, hci1 will be used. If I kill the first instance of btattach, and the re-start btattach -B /dev/ttyACM0, hci0 will be the prefered. In my python script I print the iface-property available in the Peripheral object. It is consistent with what I request, and not with what btmon tells me. I've also verified that this happens with bluepy-helper and btmon. I've attached three screenshots of bluepy-helper, showing that hci0 is always used.

When testing on my PC (native bt + 1 nordic kit) this was not an issue. Then I was able to create two Peripheral connections on two separate interfaces, just as I expected.

I have had no issues with bluepy/bluez on the arm board, when using one interface. 

Any help / follow-up question / stuff to investigate will be appreciated. 

Versions on arm64:
Bluepy: 1.3.0
Bluez: 5.50.0-1
Kernel: 4.19 (compiled by me)
Python 3.7.3
My PC runs bluez 5.50-ubuntu4 and kernel 5.3.0-23 stock ubuntu. Bluepy 1.3.0. Python 3.7.5.
![bluepy-helper_1](https://user-images.githubusercontent.com/53931820/70039657-979d7300-15ba-11ea-933c-8e28407a4daf.png)
![bluepy-helper_2](https://user-images.githubusercontent.com/53931820/70039658-979d7300-15ba-11ea-9fe8-7736185d1787.png)
![bluepy-helper_3](https://user-images.githubusercontent.com/53931820/70039659-98360980-15ba-11ea-8c24-07c9ab0a4943.png)



**I'm attempting to turn on and off an LED by using the writeCharacteristic command. My arduino BLE code takes in any number other than zero to turn the led on and zero to turn the LED off**

This is the python script used for the central device:

from bluepy import btle
import time
import binascii

print ("Connecting...")
dev = btle.Peripheral("3c:71:bf:cc:5c:7a")
 
print ("Services...")
for svc in dev.services:
    print (str(svc))

char = dev.getCharacteristics()
for c in char:
    print (c)

ser = dev.getServiceByUUID("19b10000-e8f2-537e-4f6c-d104768a1214")
c = ser.getCharacteristics()[0]
    
print(c.valHandle)

dev.writeCharacteristic(c.valHandle, bytes(0x0110010))


I don't run into any run time error but the nano doesn't seem to respond to any of the writeCharacteristic commands. I can connect to the nano using my android phone through nrfConnect App and it works like magic. Is there something that  I am missing out on?

Thank you.
Hi there,
Lately this error appears more and more often in my logs:

```python
File "/usr/local/lib/python3.7/site-packages/avea/avea.py", line 237, in discover_avea_bulbs
    devices = scanner.scan(4.0)
  File "/usr/local/lib/python3.7/site-packages/bluepy/btle.py", line 852, in scan
  File "/usr/local/lib/python3.7/site-packages/bluepy/btle.py", line 790, in start
  File "/usr/local/lib/python3.7/site-packages/bluepy/btle.py", line 309, in _mgmtCmd
    DBG("Select timeout")
  File "/usr/local/lib/python3.7/site-packages/bluepy/btle.py", line 352, in _waitResp
    elif deviceAddr is not None:
  File "/usr/local/lib/python3.7/site-packages/bluepy/btle.py", line 318, in parseResp
    if 'rsp' not in resp:
ValueError: too many values to unpack (expected 2)
```
After that, communication with the device is no longer possible.

Best regards
pattyland
I have tried "sudo" :
cd /usr/local/lib/python3.5/dist-packages/bluepy
sudo ./bluepy-helper 0
then I typed "le on" or "scan"
but I got this:
rsp=$mgmtcode=$mgmterrestat=hCemsg='Not Supported

What means "Not Supported"? And, how can I fix it?

I have a thread which continuously tries to connect to a peripheral. When the peripheral is out of range, the connect just sits and waits until it times out. When I want to cleanly shutdown my application, I'd like to "interrupt" the connect call that's waiting from another thread. Is there a "nice" way to do that? If not, is just exiting the app with the connect call hanging around in a daemon thread OK? Might anything bad happen with that?

  I am trying to use bluepy for Parrot drones and found this issue with bluepy. It seems, there are some permission issues


File "/usr/local/lib/python3.6/dist-packages/bluepy/btle.py", line 852, in scan
    self.start(passive=passive)
  File "/usr/local/lib/python3.6/dist-packages/bluepy/btle.py", line 790, in start
    self._mgmtCmd("le on")
  File "/usr/local/lib/python3.6/dist-packages/bluepy/btle.py", line 309, in _mgmtCmd
    rsp = self._waitResp('mgmt')
  File "/usr/local/lib/python3.6/dist-packages/bluepy/btle.py", line 366, in _waitResp
    raise BTLEManagementError("Management not available (permissions problem?)", resp)
bluepy.btle.BTLEManagementError: Management not available (permissions problem?)