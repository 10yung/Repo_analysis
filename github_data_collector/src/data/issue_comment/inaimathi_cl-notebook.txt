
I get this:
```
; caught ERROR:
;   READ error during COMPILE-FILE: Package QLOT/UTIL does not exist. Line: 109, Column: 41, File-Position: 4215 Stream: #<SB-INT:FORM-TRACKING-STREAM for "file /home/quicklisp/quicklisp-controller/dist/build-cache/cl-notebook/ddee9b7876e1ce489b09165910c76abe2301cc7f/cl-notebook-20191121-git/src/model.lisp" {100E2AA373}>
```

Full log is here: http://report.quicklisp.org/2019-11-21/failure-report/cl-notebook.html#cl-notebook

Maybe this is due to a recent change in https://github.com/fukamachi/qlot but I don't see immediately what it might be.
Sometimes I want to do a search/replace (presumably) on a word across all the cells in a notebook, not just the current one. Figure out a way to do this smoothly in the front-end.
When we change a cell mode, it stops registering the `transpose-cell!` binding (possibly all global bindings). This might be a bug in the transition code, or it might be something wrong with `transpose-*!` itself.
Currently, `parenscript` cells with unmatched parens end up getting evaluated as `object` rather than being flagged with an error. This causes problems when the programmer assumes a cell evaluated properly. Check for balanced parens before doing the thing.
It should be possible to do an export action from a history state, and not just the current state of a `notebook`
Default cell-type needs to be settable per notebook (most of the time, `common-lisp`/`code` makes sense, but I've worked on a number of notebooks already where `common-lisp`/`parenscript` would have been simpler and caused fewer errors)
Now that we have the idea of `focused` cells, we really should just unify `focusCell` and `showEditor` so that they both do their thing on focused cells.
The binary is pretty out of date at this point. But, introducing `qlot` seems to have broken the `buildapp` binary building process. We should either fix it, or use this as an excuse to get [`ceramic`](https://github.com/ceramic/ceramic) or something else running to generate appropriate binaries.
For instance, macroexpansion as `Ctrl-e` really only makes sense in Common Lisp `code` cells (`parenscript` cells, at the very least, need different behavior for the same binding if not its removal entirely). Once we add `markdown` and `javascript` language cells, there's no point in having that binding associated in the relevant editors.