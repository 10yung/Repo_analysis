I was trying to form a BLE connection between BLE_UART (server) and BLE_CLIENT (client).
After seeing `haveServiceUUID` fail in  BLE_CLIENT I found this [related issue]( https://github.com/nkolban/esp32-snippets/issues/144) that fixed the connection.
To summarize the changes:
1. Shorten the BLE Device name to 5 or less characters.
2.  In BLE_UART change:
```// Start advertising
pServer->getAdvertising()->start();
```
to
```//Start advertising
BLEAdvertising *pAdvertising = pServer->getAdvertising();
pAdvertising->addServiceUUID(pService->getUUID());
pAdvertising->start();
```
With later experiments, I found that it was not necessary to shorten the device.  Only the start of advertising needed to be changed.  Strangely, the IOS App BLE Scanner worked **without** the advertising modification.

Please update BEL_UART.ino in the repository


Hello, can you tell me some steps or, if you can, the library, where BLE will only scan for devices, not connect nor create no server or client.

I want it because full library is very heavy for only scanning purpouse.

Thanks, best regards.
Using ESP32 BLE Arduino 1.0.1 in Platformio IDE
I have tried several power levels using this command immediately after BLEDevice::init
BLEDevice::setPower(ESP_PWR_LVL_P7);
The advertised TxPowerLevel is always 3 in the iPhone BLE Scanner App and the RSSI values
don't change. 
Seems like an old issue that was claimed to have been fixed?

Edit:
Fixed by adding all this:
`
 BLEDevice::setPower(ESP_PWR_LVL_P7);  // Changing had no affect.  Client reports power level = 3
  esp_ble_tx_power_set(ESP_BLE_PWR_TYPE_DEFAULT, ESP_PWR_LVL_P9);
  esp_ble_tx_power_set(ESP_BLE_PWR_TYPE_CONN_HDL0, ESP_PWR_LVL_P9);
  esp_ble_tx_power_set(ESP_BLE_PWR_TYPE_CONN_HDL1, ESP_PWR_LVL_P9);
  esp_ble_tx_power_set(ESP_BLE_PWR_TYPE_CONN_HDL2, ESP_PWR_LVL_P9);
  esp_ble_tx_power_set(ESP_BLE_PWR_TYPE_CONN_HDL3, ESP_PWR_LVL_P9);
  esp_ble_tx_power_set(ESP_BLE_PWR_TYPE_CONN_HDL4, ESP_PWR_LVL_P9);
  esp_ble_tx_power_set(ESP_BLE_PWR_TYPE_CONN_HDL5, ESP_PWR_LVL_P9);
  esp_ble_tx_power_set(ESP_BLE_PWR_TYPE_CONN_HDL6, ESP_PWR_LVL_P9);
  esp_ble_tx_power_set(ESP_BLE_PWR_TYPE_CONN_HDL8, ESP_PWR_LVL_P9);
  esp_ble_tx_power_set(ESP_BLE_PWR_TYPE_ADV, ESP_PWR_LVL_P9);
`
The advertised TxPower Level is now 9 and getting about 6 dB more power than default.
Perhaps BLEDevice::setPower should call the other  esp_ble_tx_power_set statements.
There is a memory leak in the u8g2_esp32_hal.c when using I2C. The driver uses the SP32 native hw through i2c_cmd_link_create which in the i2c.c os-driver allocates memory for each link in a linked list which is then freed by i2c_cmd_link_delete. Sometimes the linked list seems to remain allocated or is lost.

I'm not sure if this due to faulty error handling in the os-driver or something missing in the hal but wanted to add this note here for the benefit of other users.

My solution has been to rewrite the i2c.c os-driver to use static allocated memory for the cmd-link, see: 
[i2c_static.zip](https://github.com/nkolban/esp32-snippets/files/4050795/i2c_static.zip)



I am seeking help with a program to make a high frequency measurement and then report it out by a BLE connection. My current problem is that measurements are intermittently delayed.
The measurement code is running on core 0 at 1kHz; the duration of each measurement is 400msec with a 80MHz esp32 CPU clock frequency.
The BLE_server runs on core 1, advertising, connecting and disconnecting correctly. It is a direct copy of the example BLE_server in Nicks excellent library.
The timing of core 0 measurements is intermittently delayed by up to 600 msec every 40 or so measurements as measured by a scope attached to a GPIO port. The delays do not occur when the core 1 task is an empty while (true) loop (no BLE comms).
I had wrongly assumed that the core 1 BLEcomms task would not affect the measurement task on core 0. What interrupts on core 0 might cause such a delay? 
Note core0 WDT is disabled.
I would appreciate any ideas of how I might debug this, and even better, how I might improve the code!  A few details follow below.

Many thanks

Rob

===============================

The tasks are created as follows.  There are only two.  

`  disableCore0WDT(); // source https://github.com/espressif/arduino-esp32/blob/master/cores/esp32/esp32-hal.h#L76-L91
  // see epic thread https://github.com/espressif/arduino-esp32/issues/595
  
  //create a task that will be executed in the measureVibration() function, with priority 2 and executed on core 0
  xTaskCreatePinnedToCore(
  measureVibration,   /* Task function. */
  "vibeTask",     /* name of task. */
  10000,       /* Stack size of task */
  NULL,        /* parameter of the task */
  2,           /* priority of the task */
  &vibeTask,      /* Task handle to keep track of created task */
  0);          /* pin task to core 0 */

  
  //create a task that will be executed in the BLEComms() function, with priority 1 and executed on core 1
  xTaskCreatePinnedToCore(
  BLEComms,   /* Task function. */
  "commsTask",     /* name of task. */
  28800,       /* Stack size of task */
  NULL,        /* parameter of the task */
  1,           /* priority of the task */
  &commsTask,      /* Task handle to keep track of created task */
  1);          /* pin task to core 1 */`


A timer is set-up to create 1kHz ticks communicated to the measurement task by semaphore

`////////////////////////////////////// onTimer //////////////////////////////////////////


void IRAM_ATTR onTimer(){
	// Increment the counter and set the time of ISR
	portENTER_CRITICAL_ISR(&timerMux);
	isrCounter++;
	lastIsrAt = millis();
	portEXIT_CRITICAL_ISR(&timerMux);
	
	
	// Give a semaphore that we can check in the loop
	xSemaphoreGiveFromISR(timerSemaphore, NULL);
	// It is safe to use digitalRead/Write here if you want to toggle an output

}
////////////////////////////////////// initTime //////////////////////////////////////////


void initTime(uint32_t period)
// check type for period
{
  // Create semaphore to inform us when the timer has fired
  timerSemaphore = xSemaphoreCreateBinary();

  // Use 1st timer of 4 (counted from zero).
  // Set 80 divider for prescaler (see ESP32 Technical Reference Manual for more
  // info).
  timer = timerBegin(0, 80, true);

  // Attach onTimer function to our timer.
  timerAttachInterrupt(timer, &onTimer, true);

  // Set alarm to call onTimer function every second (value in microseconds).
  // Repeat the alarm (third parameter)
  timerAlarmWrite(timer, period, true);

  // Start an alarm
  timerAlarmEnable(timer);
}`
Hello,
although this repository seems to be "out of service" I post my question here hoping that someone can point me to the right approach.
I would like to setup something similar to SPP in classic Bluetooth but now with BLE. A PC (or smartphone) app will connect to the ESP32 via BLE and all data shall be tunneled to and from a UART.
Is there somewhere a useful example to start with?
Is it possible to use the cpp classes without Arduino?
Where is the latest version of this repository - I see that @chegewara also maintained a copy of this one?
Any hint would be helpful.
Kind regards
Hello.
I wanted to change scan time property from Second to Millisecond. There is scanTime in BLEScan example File in Arduino library. 

```
int scanTime = 5 ; //In seconds

BLEScanResults foundDevices = pBLEScan->start(scanTime, false);
```
It is used there. First It accepted Integer but I changed the these two Function in .h library Files + .CPP file to Float. 

```
bool  start(float duration, void (*scanCompleteCB)(BLEScanResults), bool is_continue = false);
	BLEScanResults start(float duration, bool is_continue = false);
..

```

then change int to float in the main arduino file.
`float scanTime = 0.5 ; //In seconds - means 500 ms`

File is uploaded in Esp32 with no error ,then Receive first BLE signal but is not received more data .

is there anybody to know what do i do for this changing ?
Is there any way to sent a string like "5,10" to ble_server?
I use the sample client and server code.
Using ESP-WROOM-32U, running a simple code to simulate `init` and `deinit` of a BLEDevice.

Compile settings:
- Board: ESP32 Dev Module;
- Upload Speed: 921600;
- Flash Frequency: 80MHz;
- Flash Mode: QIO;
- Partition Scheme: Default;
- Core Debug Level: Verbose;
- PSRAM: Disabled;

```
#include <BLEDevice.h>

void setup() {
  // put your setup code here, to run once:
    Serial.begin(115200);
    BLEDevice::init("testeaqi");
}

void loop() {
    Serial.println(ESP.getFreeHeap());
    if (BLEDevice::getInitialized() == true){
        Serial.println("BLE_OFF()");
        BLEDevice::deinit(false);
    }
    else {
        Serial.println("NEW_INIT()");
        BLEDevice::init("testeasd");
    }
}
```

Here are the logs:

```
rst:0x1 (POWERON_RESET),boot:0x13 (SPI_FAST_FLASH_BOOT)
configsip: 0, SPIWP:0xee
clk_drv:0x00,q_drv:0x00,d_drv:0x00,cs0_drv:0x00,hd_drv:0x00,wp_drv:0x00
mode:DIO, clock div:1
load:0x3fff0018,len:4
load:0x3fff001c,len:1100
load:0x40078000,len:9296
load:0x40080400,len:6364
entry 0x400806a4
184740
BLE_OFF()
268236
NEW_INIT()
181468
BLE_OFF()
264960
NEW_INIT()
178180
BLE_OFF()
261536
NEW_INIT()
174760
BLE_OFF()
258248
NEW_INIT()
171476
BLE_OFF()
254828
NEW_INIT()
168072
BLE_OFF()
251552
NEW_INIT()
164800
BLE_OFF()
248424
NEW_INIT()
161664
BLE_OFF()
245152
NEW_INIT()
158400
BLE_OFF()
241880
NEW_INIT()
155116
BLE_OFF()
238460
NEW_INIT()
151712
BLE_OFF()
235332
NEW_INIT()
148584
BLE_OFF()
231912
NEW_INIT()
145164
BLE_OFF()
228636
NEW_INIT()
141912
BLE_OFF()
225368
NEW_INIT()
138756
BLE_OFF()
222244
NEW_INIT()
135484
BLE_OFF()
218972
NEW_INIT()
132216
BLE_OFF()
220036
NEW_INIT()
128844
BLE_OFF()
212428
NEW_INIT()
125664
BLE_OFF()
209156
NEW_INIT()
122276
BLE_OFF()
205736
NEW_INIT()
119008
BLE_OFF()
202464
NEW_INIT()
115736
BLE_OFF()
199336
NEW_INIT()
112584
BLE_OFF()
196060
NEW_INIT()
109300
BLE_OFF()
192788
NEW_INIT()
105884
BLE_OFF()
193476
NEW_INIT()
102752
BLE_OFF()
186240
NEW_INIT()
99504
BLE_OFF()
182820
NEW_INIT()
96092
BLE_OFF()
179548
NEW_INIT()
92820
BLE_OFF()
176424
NEW_INIT()
89680
BLE_OFF()
173152
NEW_INIT()
86412
BLE_OFF()
169880
NEW_INIT()
83136
BLE_OFF()
166460
NEW_INIT()
79720
BLE_OFF()
163332
NEW_INIT()
76588
BLE_OFF()
159916
NEW_INIT()
73164
BLE_OFF()
161128
NEW_INIT()
69888
BLE_OFF()
153372
NEW_INIT()
66756
BLE_OFF()
150240
NEW_INIT()
63476
BLE_OFF()
146968
NEW_INIT()
60204
BLE_OFF()
148036
NEW_INIT()
56800
BLE_OFF()
140424
NEW_INIT()
53536
BLE_OFF()
137152
NEW_INIT()
Guru Meditation Error: Core  0 panic'ed (StoreProhibited). Exception was unhandled.
Core 0 register dump:
PC      : 0x4000c46c  PS      : 0x00060b30  A0      : 0x8011ab82  A1      : 0x3ffd7d30  
A2      : 0x00000000  A3      : 0x00000000  A4      : 0x0000001c  A5      : 0x00000000  
A6      : 0x4018844c  A7      : 0x00000001  A8      : 0x800dc11e  A9      : 0x3ffd7cd0  
A10     : 0x3ffe3e60  A11     : 0x00000044  A12     : 0x00000000  A13     : 0x00000000  
A14     : 0x00001800  A15     : 0x00000084  SAR     : 0x0000001e  EXCCAUSE: 0x0000001d  
EXCVADDR: 0x00000000  LBEG    : 0x4000c46c  LEND    : 0x4000c477  LCOUNT  : 0x00000000  

Backtrace: 0x4000c46c:0x3ffd7d30 0x4011ab7f:0x3ffd7d40 0x4011b455:0x3ffd7d60 0x400f6279:0x3ffd7d80 0x400f62b3:0x3ffd7da0 0x40092da5:0x3ffd7dd0

Rebooting...

```

The backtrace results in this: 

```
0x4011ab7f: bta_ar_init at /Users/ficeto/Desktop/ESP32/ESP32/esp-idf-public/components/bt/bluedroid/bta/ar/bta_ar.c line 72

Decoding stack results
0x4011b455: bta_sys_init at /Users/ficeto/Desktop/ESP32/ESP32/esp-idf-public/components/bt/bluedroid/bta/sys/bta_sys_main.c line 186
0x400f6279: btu_task_start_up at /Users/ficeto/Desktop/ESP32/ESP32/esp-idf-public/components/bt/bluedroid/stack/btu/btu_task.c line 284
0x400f62b3: btu_task_thread_handler at /Users/ficeto/Desktop/ESP32/ESP32/esp-idf-public/components/bt/bluedroid/stack/btu/btu_task.c line 226
0x40092da5: vPortTaskWrapper at /Users/ficeto/Desktop/ESP32/ESP32/esp-idf-public/components/freertos/port.c line 143
0x4011ab7f: bta_ar_init at /Users/ficeto/Desktop/ESP32/ESP32/esp-idf-public/components/bt/bluedroid/bta/ar/bta_ar.c line 72
0x4011b455: bta_sys_init at /Users/ficeto/Desktop/ESP32/ESP32/esp-idf-public/components/bt/bluedroid/bta/sys/bta_sys_main.c line 186
0x400f6279: btu_task_start_up at /Users/ficeto/Desktop/ESP32/ESP32/esp-idf-public/components/bt/bluedroid/stack/btu/btu_task.c line 284
0x400f62b3: btu_task_thread_handler at /Users/ficeto/Desktop/ESP32/ESP32/esp-idf-public/components/bt/bluedroid/stack/btu/btu_task.c line 226
0x40092da5: vPortTaskWrapper at /Users/ficeto/Desktop/ESP32/ESP32/esp-idf-public/components/freertos/port.c line 143
```

Every single iteration of the init/deinit loop is leaking ~4k, and I could'nt find any other way to fix this. My initial problem is based on this memory leak, I think you could help me with this.

Thanks in advance
Hello
When I am scanning-->connecting with my BLE device, and a Ticker function, or MQTT message comes into play at the same time, sometimes my ESP32 never goes back to the arduino loop.

It remains only executing the attached Ticker functions, but never back to my loop, until my watchdog (a function attached to another Ticker) is triggered, rebooting the ESP32. 
Could it be a problem of a missing "return" at the end of the attached Ticker function, even if the function return is void? Or maybe a thread/semaphore/priority task issue?
What are your suggestions?
What can I study in order to solve this issue?

Many thanks! 
