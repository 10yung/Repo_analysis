Recently, I stared receiving awk errors:

```awk: cmd. line:49: (FILENAME=- FNR=11) warning: Invalid multibyte data detected. There may be a mismatch between your data and your locale.```

It seems this has to do with the locale setting on my machine not being set to `C` and some interplay between awk and lower level libraries. Further discussion can be read [here](https://stackoverflow.com/questions/40049546/fix-mismatch-between-data-and-local-in-awk-command/56777447).

I fixed this by setting the environment variable to `LC_ALL=C` within the `z.sh` script as a workaround:

`LC_ALL=C awk...`

I don't think it's appropriate  to ask people to change their locale settings machine wide or even in their shell to remove these warning. 

 I'm wondering if this is a good idea to have added to the script permanently via PR? I guess this may have something to do with the way `awk` or dependent library was compiled on my current machine (Arch Linux); However it can still happen to anyone in a similar situation.

Thoughts?
Hello!

I get the following error when running z in MinGW (git bash 2.23 on Windows 10):
```bash: /dev/fd/62: No such file or directory```

I added a `set -x` in `_z` to see what line outputs this, but I doesn't seem obvious to me.
Here is the full output:

```
$ z tools
+ _z tools
+ set -x
+ local datafile=/c/Users/y.lerestif/.z
+ '[' -h /c/Users/y.lerestif/.z ']'
+ '[' -z '' -a -f /c/Users/y.lerestif/.z -a '!' -O /c/Users/y.lerestif/.z ']'
+ '[' tools = --add ']'
+ '[' tools = --complete -a -s /c/Users/y.lerestif/.z ']'
+ local echo fnd last list opt typ
+ '[' tools ']'
+ case "$1" in
+ fnd=tools
+ last=tools
+ '[' 1 -gt 0 ']'
+ shift
+ '[' '' ']'
+ '[' tools -a tools '!=' '^/c/tools/z ' ']'
+ case "$last" in
+ '[' -f /c/Users/y.lerestif/.z ']'
+ local cd
+++ date +%s
++ awk -v t=1576498307 -v list= -v typ= -v q=tools '-F|' '
            function frecent(rank, time) {
              # relate frequency and time
              dx = t - time
              return rank * (3.75/((0.0001 * dx + 1) + 0.25))
            }
            function output(matches, best_match, common) {
                # list or return the desired directory
                if( list ) {
                    cmd = "sort -g >&2"
                    for( x in matches ) {
                        if( matches[x] ) {
                            printf "%-10s %s\n", matches[x], x | cmd
                        }
                    }
                    if( common ) {
                        printf "%-10s %s\n", "common:", common > "/dev/stderr"
                    }
                } else {
                    if( common ) best_match = common
                    print best_match
                }
            }
            function common(matches) {
                # find the common root of a list of matches, if it exists
                for( x in matches ) {
                    if( matches[x] && (!short || length(x) < length(short)) ) {
                        short = x
                    }
                }
                if( short == "/" ) return
                for( x in matches ) if( matches[x] && index(x, short) != 1 ) {
                    return
                }
                return short
            }
            BEGIN {
                gsub(" ", ".*", q)
                hi_rank = ihi_rank = -9999999999
            }
            {
                if( typ == "rank" ) {
                    rank = $2
                } else if( typ == "recent" ) {
                    rank = $3 - t
                } else rank = frecent($2, $3)
                if( $1 ~ q ) {
                    matches[$1] = rank
                } else if( tolower($1) ~ tolower(q) ) imatches[$1] = rank
                if( matches[$1] && matches[$1] > hi_rank ) {
                    best_match = $1
                    hi_rank = matches[$1]
                } else if( imatches[$1] && imatches[$1] > ihi_rank ) {
                    ibest_match = $1
                    ihi_rank = imatches[$1]
                }
            }
            END {
                # prefer case sensitive
                if( best_match ) {
                    output(matches, best_match, common(matches))
                } else if( ibest_match ) {
                    output(imatches, ibest_match, common(imatches))
                }
            }
        '
+++ _z_dirs
+++ local line
+++ read line
+++ '[' -d /usr/bin ']'
+++ echo '/usr/bin|2|1576497276'
+++ read line
+++ '[' -d /c/tools/z.lua ']'
+++ echo '/c/tools/z.lua|3|1576242551'
+++ read line
+++ '[' -d /c/cbs/mct ']'
+++ echo '/c/cbs/mct|3|1576237668'
+++ read line
+++ '[' -d /c/tools/z ']'
+++ echo '/c/tools/z|12|1576498132'
+++ read line
+++ '[' -d /c/tools ']'
+++ echo '/c/tools|11|1576497052'
+++ read line
+++ return 0
bash: /dev/fd/62: No such file or directory
+++ _z_dirs
+++ local line
+++ read line
+++ '[' -d /usr/bin ']'
+++ echo '/usr/bin|2|1576497276'
+ cd=
+ '[' 1 -eq 0 ']'
++ history -a
++ ConEmuC -StoreCWD
+++ command pwd -P
++ _z --add /c/tools/z
++ __git_ps1
++ local exit=1
++ local pcmode=no
++ local detached=no
++ local 'ps1pc_start=\u@\h:\w '
++ local 'ps1pc_end=\$ '
++ local 'printf_format= (%s)'
++ case "$#" in
++ printf_format=' (%s)'
++ local ps1_expanded=yes
++ '[' -z '' ']'
++ '[' -z '4.4.23(1)-release' ']'
++ shopt -q promptvars
++ local repo_info rev_parse_exit_code
+++ git rev-parse --git-dir --is-inside-git-dir --is-bare-repository --is-inside-work-tree --short HEAD
++ repo_info='.git
false
false
true
4f08e7f'
++ rev_parse_exit_code=0
++ '[' -z '.git
false
false
true
4f08e7f' ']'
++ local short_sha=
++ '[' 0 = 0 ']'
++ short_sha=4f08e7f
++ repo_info='.git
false
false
true'
++ local inside_worktree=true
++ repo_info='.git
false
false'
++ local bare_repo=false
++ repo_info='.git
false'
++ local inside_gitdir=false
++ local g=.git
++ '[' true = true ']'
++ '[' -n '' ']'
++ local r=
++ local b=
++ local step=
++ local total=
++ '[' -d .git/rebase-merge ']'
++ '[' -d .git/rebase-apply ']'
++ '[' -f .git/MERGE_HEAD ']'
++ __git_sequencer_status
++ local todo
++ test -f .git/CHERRY_PICK_HEAD
++ test -f .git/REVERT_HEAD
++ __git_eread .git/sequencer/todo todo
++ test -r .git/sequencer/todo
++ return 1
++ '[' -f .git/BISECT_LOG ']'
++ '[' -n '' ']'
++ '[' -h .git/HEAD ']'
++ local head=
++ __git_eread .git/HEAD head
++ test -r .git/HEAD
++ IFS='
'
++ read head
++ b=refs/heads/master
++ '[' 'ref: refs/heads/master' = refs/heads/master ']'
++ '[' -n '' ']'
++ local w=
++ local i=
++ local s=
++ local u=
++ local c=
++ local p=
++ '[' true = false ']'
++ '[' true = true ']'
++ '[' -n '' ']'
++ '[' -n '' ']'
++ '[' -n '' ']'
++ '[' -n '' ']'
++ local 'z= '
++ '[' no = yes ']'
++ b=master
++ '[' no = yes ']'
++ local f=
++ local gitstring=master
++ '[' no = yes ']'
++ printf -- ' (%s)' master
++ return 1```
see: https://specifications.freedesktop.org/basedir-spec/basedir-spec-0.6.html

This is backwards compatible with the old `_Z_DATA` env-var but enhances
the user experiences with the XDG-specification.

closes #267
Occasionally, I randomly get the following message on my terminal:
```
mv: cannot move '/home/protist/.z.24161' to '/home/protist/.z': No such file or directory
```

This doesn't necessarily occur after `cd`-ing; most recently it occurred after `ls`. There *is* a file at `~/.z`, with user write/read permissions, and recently modified, presumably by z.

I'm not sure if relevant, but I can also see numerous other files with a similar name.
```
$ ls -al ~/.z{,.*}
-rw-r--r-- 1 protist protist    33436 Nov 20 19:32 .z
-rw-r--r-- 1 protist protist    19561 Aug 15  2017 .z.10923
-rw-r--r-- 1 protist protist        0 Feb  8  2018 .z.11675
-rw-r--r-- 1 protist protist    19561 Aug 15  2017 .z.16124
-rw-r--r-- 1 protist protist    25188 Feb 12  2018 .z.23515
-rw-r--r-- 1 protist protist        0 Feb  8  2018 .z.25040
-rw-r--r-- 1 protist protist    25188 Feb 12  2018 .z.29510
-rw-r--r-- 1 protist protist        0 Feb  8  2018 .z.5317
-rw-r--r-- 1 protist protist    19561 Aug 15  2017 .z.6607
```

I'm running the latest version, z 1.11 with zsh 5.7.1 on Arch Linux.

EDIT:
I got a different error after another `ls`.
```
mv: cannot stat '/home/protist/.z.3141': No such file or directory                                          
```
It looks like the shell can't find the source file `~/.z.3141`, which is true; it doesn't exist. In contrast the original error reported above (i.e. `mv: cannot move 'foo' to 'bar': No such file or directory`) appears when the target directory cannot be found (and perhaps other situations?).
Fixes #273
Currently there's no license for z, which might restrict its use in some business settings.  https://choosealicense.com has lots of information on different ones, I recommend MIT since it's very open.
I just noticed those two options where missing from the header :)

when I run 'z path_name' 
The results are these:

common:    /Users/kangkang/.oh-my-zsh/plugins
28         /Users/kangkang/.oh-my-zsh/plugins
108        /Users/kangkang/.oh-my-zsh/plugins/z
Would you consider supporting XDG_BASE_DIRECTORY natively ? 

This can currently be implemented using `$ export _Z_DATA="XDG_DATA_HOME/z"` but native support would make the experience transparent.

See [archlinux wiki](https://wiki.archlinux.org/index.php/XDG_Base_Directory) for more information.

Thanks for this great software.