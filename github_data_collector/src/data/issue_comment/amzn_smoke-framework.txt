In SwiftNIO it's generally a good idea that on `errorCaught`, the `Channel` should be closed to prevent leaking network connections that are in some error states. In Smoke this should be added to the `HTTP1ChannelInboundHandler` and the same for smoke-http-client wants that too.

Why? Generally, `ChannelHandler`s fire errors in cases where they don't know how to recover themselves. If another, later `ChannelHandler` knows how to recover, that `ChannelHandler` would consume the error. In other words: If an error reaches the end of the pipeline, nobody knew how to handle that error and closing the `Channel` is a good default.

This has always been true in SwiftNIO but in NIO 2 this will become especially important because `ByteToMessageDecoder`s (and the HTTP decoders) won't close the connections themselves anymore. Why is that? If the decoders themselves close the connection, then there's no way for the user to opt out.

The code to implement this is very straightforward:

```swift
public func errorCaught(ctx: ChannelHandlerContext, error: Error) {
    switch error {
    case let e as SomeErrorTypeIKnowHowToHandle where e.someCondition == expectedValue:
        // handle error
    case let e as SomeOtherErrorIKnowHowToHandle:
        // handle that error
    default:
        // log error?
        ctx.close(promise: nil)
    }
}
```