When I have the urge to format a Markdown table, I generally have one of two outcomes in mind:

* optimize for storage
* optimize for readability

Currently, comrak defaults to optimizing for _storage_. That is, a table input with extra spaces or dashes loses in output any unnecessary spaces or dashes in cells.

I'd like to see an option to optimize for _readability_. That is, a table input will have its cells padded with spaces or dashes to fit the longest cell in that column.

Example input:

```
| h1 | h2 | h3 |
|---|---|---|
| data1 | data2 | wide cell data |
| data1      | data2     | data3      |
|     longerdata | data2      |      data3 |
```

Comrack 0.6.2 output, optimized for storage:

```
| h1 | h2 | h3 |
| --- | --- | --- |
| data1 | data2 | wide cell data |
| data1 | data2 | data3 |
| longerdata | data2 | data3 |
```

Output optimized for text readability by [markdowntable.com](http://markdowntable.com/) ([src](https://github.com/alanwsmith/markdown_table_formatter/blob/gh-pages/src/MarkdownTableFormatter.js)):
```
| h1         | h2    | h3             |
|------------|-------|----------------|
| data1      | data2 | wide cell data |
| data1      | data2 | data3          |
| longerdata | data2 | data3          |
```

This latter format is better for static files like READMEs that are just as often read in text format as they are consumed in HTML format and other places where editing the table is more important than reducing the byte size of the table.
```
$ time python -c 'print("* " * 10000 + "a")' | ./target/release/comrak >/dev/null
real    0m1.054s
user    0m1.046s
sys     0m0.009s

$ time python -c 'print("* " * 20000 + "a")' | ./target/release/comrak >/dev/null
real    0m4.244s
user    0m4.207s
sys     0m0.037s

$ time python -c 'print("* " * 40000 + "a")' | ./target/release/comrak >/dev/null
real    0m20.608s
user    0m20.306s
sys     0m0.301s
```

```
$ time python -c 'print("<>" * 10000)' | ./target/release/comrak >/dev/null
real    0m0.394s
user    0m0.392s
sys     0m0.002s

$ time python -c 'print("<>" * 20000)' | ./target/release/comrak >/dev/null
real    0m1.549s
user    0m1.547s
sys     0m0.003s

$ time python -c 'print("<>" * 40000)' | ./target/release/comrak >/dev/null
real    0m6.184s
user    0m6.180s
sys     0m0.004s
```
```
$ time python -c 'print("[a]: u\n" * 10000)' | ./target/release/comrak >/dev/null
real    0m0.166s
user    0m0.164s
sys     0m0.003s

$ time python -c 'print("[a]: u\n" * 20000)' | ./target/release/comrak >/dev/null
real    0m0.631s
user    0m0.631s
sys     0m0.001s

$ time python -c 'print("[a]: u\n" * 40000)' | ./target/release/comrak >/dev/null
real    0m2.482s
user    0m2.481s
sys     0m0.002s
```
```
$ time python -c 'print("[t](/u) " * 10000)' | ./target/release/comrak >/dev/null
real    0m1.599s
user    0m1.593s
sys     0m0.006s

$ time python -c 'print("[t](/u) " * 20000)' | ./target/release/comrak >/dev/null
real    0m6.280s
user    0m6.276s
sys     0m0.004s

$ time python -c 'print("[t](/u) " * 40000)' | ./target/release/comrak >/dev/null
real    0m25.403s
user    0m25.386s
sys     0m0.011s
```
```console
$ python -c 'print("<" * 10000)' | time comrak > /dev/null
0.29user 0.00system 0:00.32elapsed 92%CPU (0avgtext+0avgdata 5328maxresident)k
0inputs+0outputs (0major+678minor)pagefaults 0swaps
$ python -c 'print("<" * 20000)' | time comrak > /dev/null
1.15user 0.00system 0:01.19elapsed 97%CPU (0avgtext+0avgdata 7384maxresident)k
0inputs+0outputs (0major+1155minor)pagefaults 0swaps
$ python -c 'print("<" * 40000)' | time comrak > /dev/null
4.62user 0.00system 0:04.65elapsed 99%CPU (0avgtext+0avgdata 11036maxresident)k
0inputs+0outputs (0major+2114minor)pagefaults 0swaps
$ python -c 'print("<" * 80000)' | time comrak > /dev/null
18.76user 0.02system 0:18.84elapsed 99%CPU (0avgtext+0avgdata 18688maxresident)k
0inputs+0outputs (0major+5319minor)pagefaults 0swaps
```
From the title you can probably tell that this is related to #58.

The [documentation for `ext_footnotes`](https://docs.rs/comrak/newest/comrak/struct.ComrakOptions.html#structfield.ext_footnotes) has this example:

```rust
let options = ComrakOptions {
  ext_footnotes: true,
  ..ComrakOptions::default()
};
assert_eq!(markdown_to_html("Hi[^x].\n\n[^x]: A greeting.\n", &options),
           "<p>Hi<sup class=\"footnote-ref\"><a href=\"#fn1\" id=\"fnref1\">1</a></sup>.</p>\n<section class=\"footnotes\">\n<ol>\n<li id=\"fn1\">\n<p>A greeting. <a href=\"#fnref1\" class=\"footnote-backref\">↩</a></p>\n</li>\n</ol>\n</section>\n");
```

However, this does not work when you also have `ext_superscript` enabled.

```rust
use comrak::*;

fn main() {
    let options = ComrakOptions {
        ext_superscript: true,
        ext_footnotes: true,
      ..ComrakOptions::default()
    };
    assert_eq!(markdown_to_html("Hi[^x].\n\n[^x]: A greeting.\n", &options),
               "<p>Hi<sup class=\"footnote-ref\"><a href=\"#fn1\" id=\"fnref1\">1</a></sup>.</p>\n<section class=\"footnotes\">\n<ol>\n<li id=\"fn1\">\n<p>A greeting. <a href=\"#fnref1\" class=\"footnote-backref\">↩</a></p>\n</li>\n</ol>\n</section>\n");
}
```

Instead of the expected string, you just get `"<p>Hi[^x].</p>\n"`.
Rust [typically protects you](https://stackoverflow.com/questions/49225860/does-rust-protect-me-from-iterator-invalidation-when-pushing-to-a-vector-while-i) from iterator invalidation by not allowing you to modify a collection while you are iterating over it. When you use constructs like `RefCell`, the Rust compiler won't complain, but these checks are still performed when the program is running.

I found out the hard way today that there is a case where you can cause an iterator over nodes to become invalidated and instead of panicking, it will fail silently and just stop iterating.

In Rust pseudo-code, here's what I was doing:

```rust
let root = comrak::parse_document(...);

for node in root.traverse() {
    if !want_to_modify_node(node) {
        continue;
    }

    for child in nodechildren() {
        if !want_to_modify_child(node, child) {
            continue;
        }

        child.detach();
    }
}
```

By detaching the child during traverse, I inadvertantly invalidated the iterator. This didn't result in any memory unsafety. Instead, the iterator just never continues past the node whose child I detached.

This wasn't immediately obvious to me because I assumed that since I was deleting a child, the original node could still be iterated further.

Furthermore, the only reason I figured this out is probably because I am quite experienced in other languages where iterator invalidation is an issue. I imagine a newer programmer might not have come to the same conclusion.

If it isn't possible to `panic` in these situations with a helpful error message, we should at least add some documentation to all of the iterator methods that can be invalided by a detach.

An even better solution would be to make it so you can detach and still continue traversing the rest of the tree. I'm specifically asking to be able to detach a node that hasn't been traversed yet, I don't expect detaching a parent during `traverse()` to ever work.

---

A workaround for this (as with any case of iterator invalidation) is to store the nodes you want to detach and detach them all at once after you're done traversing.
Comrak contains code that turns header text into IDs that are ostensibly compatible with the IDs that GitHub creates. I'd like to be able to use that code without generating HTML. I've written a proof-of-concept PR to do this.

My desire for this functionality is due to having written a [tiny program](https://github.com/ctm/mdck) that looks for broken "internal links" in Markdown files. It currently only looks to see that the local files referenced in links are present, but I'm adding additional functionality. One of the first things I'm adding is the ability to verify that if a location contains a fragment, then the target file contains markdown that will cause the corresponding anchor to be created.

So, if comrak exposes this functionality, I'll use it and also contribute PRs to increase compatibility. For example, the current comrak code appears to let periods and question marks pass from headers into anchors, whereas GitHub's special sauce appears not to.

I realize that any additional functionality exposed also increases maintenance, so I fully understand why you might not want to do this, but I figure it's worth asking, especially since a single implementation is probably better for the community than parallel similar-but-slightly-different implementations.
`^` is valid in URLS, but as a postprocessing pass, strings that should probably get autolinked end up superscripted, mangling the link.

```
https://www.wolframalpha.com/input/?i=x^2+(y-(x^2)^(1/3))^2=1
```

run through comrak with `-e autolink -e superscript` comes out as

```
<p><a href="https://www.wolframalpha.com/input/?i=x">https://www.wolframalpha.com/input/?i=x</a><sup>2+(y-(x</sup>2)^(1/3))^2=1</p>
```

The link gets chopped off to become superscript text.

There may be other syntax that interacts similarly-wierdly with the autolinker. I don't have any ideas for how to fix this beyond integrating the autolinker into the inline parser.

FWIW snudown miraculously autolinks that URL as one might expect.