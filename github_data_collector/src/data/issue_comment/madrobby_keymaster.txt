
**Is it possible to increase the delay time of a combination?** 
I have longer combinations on my web app like 'a r c g' or 'a r c g k' and they take a bit time to think & press.
Hi, @madrobby @okonet  @agnoster  @devongovett  @jlukic  ` ctrl+enter` dont work, this is my code:

```js
$('textarea').on('keydown', null, 'ctrl+enter', function (e) {
  // No coming, why?
})
```
Just want to be able to set scope back to previous one without setting a variable, and without knowing what the previous scope was. In my current application, I have many components where when a specific component is mounted I want it to use its scope and when that component dismounts -> back to previous scope [my component doesn't need to know the previous scope]. 
Support 'INSERT' Key also.

aka when re-focusing window.

## Teh problem
In our app we use `key.isPressed(KEYS.ALT)` to detect when `alt` is pressed to execute some alternate-power-user-hidden actions. ðŸ’ª 

We noticed that very often `alt` is being detected as pressed while it was in fact: Not pressed. ðŸ˜±

## Teh steps
This can be reproducible quite easily (especially when `alt` is being used for Alfred or Spotlight):
- Focus page/app
- Press and hold `alt`
- Unfocus page/app (can be by focusing dev tools)
- Release `alt`
- Focus page/app
- `console.log(key.isPressed(18), key.getPressedKeyCodes())`. ðŸ’¥ 

In long-lived apps, youâ€™ll notice that `key.getPressedKeyCodes()` tends to get bigger and bigger. The only way to reset it is finding and pressing all the keys present in the array. ðŸ˜…

## Teh fix
Reseting `_downKeys` on `resetModifiers` fixes that. ðŸ¤˜ 

I canâ€™t really think of a false-positive or unexpected behaviour since `key.isPressed` donâ€™t work for keys pressed prior to focusing page/app.
keyCode of delete or del on mac is 8 not 46, which not dispatch the event


# Feature Request: Unbind Scope 

## Motivaiton

I often find myself writing the following code:

```javascript
['up', 'down', 'esc'].forEach((key) => {
  keymaster.unbind(this.scope, key)
})
```

While this works, it could potentially lead to memory leaks, if a specific key is forgotten. E.g. if my module would have registered `key('space', this.scope, cb)`.

## Proposed Solution

A possibility to remove every event-handler for a given scope would be very helpful. Possible APIs:

```javascript
keymaster.unbind(null, this.scope)
keymaster.unbindScope(this.scope)
```

## Discussion

If such a feature is desired, I would be willing to send a PR along with tests. This being said, I would love to get your input on this beforehand. Do you consider the use-case good enough to add this functionality to `keymaster`? And if yes, what would the ideal API for this be?