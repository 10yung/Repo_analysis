`log_arguments` option added in Rails 6.0.1 (or 6.0.2?): https://github.com/rails/rails/pull/37660

Job arguments are logged by default, meaning sensitive job arguments (e.g. tokens, passwords, PII) could be written to logs.

Avoid this by setting `log_arguments` to `false` by default in `ApplicationJob`. If you need to re-enable logging in a particular job, it can be done in that job's class.

```rb
class ApplicationJob < ActiveJob::Base
  # Disable argument logging
  self.log_arguments = false
end
```

```rb
class NoSensitiveArgsJob < ApplicationJob
  # Enable argument logging for this job only.
  self.log_arguments = true
end
```
Prefer placing throttles nearer to your vulnerable code, as they are less likely to be bypassed due to developer forgetfulness.

For example:
1. Developer protects all API v1 endpoints authentication from brute force attacks with a throttle in your rack attack initializer.
2. Developer introduces API v2 endpoints that use the same authentication code (`User.authenticate`) as API v1, but forgets to add a corresponding throttle to the rack attack initializer for the new endpoints.
3. API v2 is vulnerable to brute force attacks.

If the throttle had instead been placed in `User.authenticate`, then API v2 would have been protected from brute force attacks and developer forgetfulness.

Relevant discussion and ideas for using rack attack throttles outside of the initializer: https://github.com/rubygems/rubygems.org/pull/2088#discussion_r313837702
Prefer uncompressed JS files in the project (which can later be minified by the asset pipeline or similar). 

These are more friendly to reviewers and makes it harder for vulnerabilities to be slipped in compared to minified JS files.
- Setup service like dependabot to help keep JS dependencies up-to-date
- Consider using yarn or similar tool to help keep track of JS lib versions
IP-based throttle keys are often used in rack-attack configurations. These are not enough to protect against attacks coming from multiple IP addresses. Add other protections to mitigate.
In your rack attack throttles, favor identifying routes using `Rails.application.routes.recognize_path(path, ...)` rather than trying to sculpt regular expressions to match a path. Its already defined in `routes.rb` anyway. Helps avoid creating throttle bypasses accidentally when the regular expression doesn't quite match the behaviour of `Rails.application.routes.recognize_path`.
E.g. instead of an api token like `ab23dlp832...`, prefix it with a unique value to your service, e.g. `myservice_ab23dlp832...`.

This is helpful to reduce false positives if you decide to integrate with a token scanning service such as GitHub provide, which relies on regular expressions to find potential matches: https://developer.github.com/partnerships/token-scanning/

`config/initializers/cookies_serializer.rb`

```rb
 # Specify a serializer for the signed and encrypted cookie jars.
 # Valid options are :json, :marshal, and :hybrid.
Rails.application.config.action_dispatch.cookies_serializer = :json
```
For example, say a user is able to link their profile to a URL of their choice or host HTML on your site including links. 

For these kind of URLs that aren't under your control, consider:

1. Checking URL is safe to access and doesn't 404. You will want to repeat this check at regular intervals to catch URLs that are compromised at a later date. Some APIs that can help identify malicious URLs are:
  - https://developers.google.com/api-client-library/ruby/apis/safebrowsing/v4
  - https://github.com/pwelch/virustotal_api (https://www.virustotal.com/)
  - https://urlhaus.abuse.ch/api/
  - https://cloud.google.com/web-risk/
  - further suggestions welcome

2. Consider disallowing non-HTTPS/TLS URLs, or at least display warnings when users see/follow insecure links.

3. When a user clicks on a link to a site not under your control, consider showing an interstitial that warns the user they are leaving your site and displays the full URL. Here's a screengrab of how HackerOne does it, the text isn't likely relevant to your use case, but is here just to give you an idea. IIRC Facebook does something like this too.

<img width="595" alt="Screen Shot 2019-04-26 at 12 46 52" src="https://user-images.githubusercontent.com/31698/56805649-a8665900-6821-11e9-8e39-834a24229bb4.png">


Here are the character ranges for a few of the `SecureRandom` generator methods:

method|characters|total available characters
--------|-----------|------------------------------
`SecureRandom.hex`|`0-9`, `a-f`|`16`
`SecureRandom.alphanumeric `|`A-Z`, `a-z`, `0-9`|`62` **better**
`SecureRandom.urlsafe_base64 `|`A-Z`, `a-z`, `0-9`, `-`,`_`|`64` **even better**

`.hex` generates a token with a limited character set. One of the alternatives with a larger character set would increase the complexity of the generated tokens.

Related issue: https://github.com/doorkeeper-gem/doorkeeper/issues/1199