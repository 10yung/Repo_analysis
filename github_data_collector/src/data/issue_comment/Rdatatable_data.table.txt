Closes #3804 
This bug is really a bug in Microsoft Excel, but manifests as a "bug" in fread.
This bug is related to Issues #2542, #2248, #1183

`#` `Summary of Issue`
When saving a CSV as a mac-type in MS Excel Office 2016 from a Windows10 PC, Excel creates a file that has \r after every line EXCEPT the final line, which ends as \r\n. fread then interprets each "line" as a separate column.

`#` [`Minimal reproducible example`](https://stackoverflow.com/questions/5963269/how-to-make-a-great-r-reproducible-example)

You may be able to skip many of these file creation steps...taking a well-formed csv or xls file and saving it as mac-type csv is the most critical step.

Create the following in a notepad application and save as input.csv
```
Col1,Col2
1,data1
2,data2
3,data3
``` 
Open input.csv in Excel (2016 used...but likely applies to other versions)
File->Save As->Save as type: Excel Workbook (*.xlsx)->intermed.xlsx 
Close Excel
 
Open intermed.xlsx in Excel
File->Save As->Save as type: CSV (Macintosh) (*.csv)->final.csv
Close Excel

In R...

`fread("final.csv")`
> 3,data3ata.table (0 rows and 5 cols): Col1,Col2

`fredT<-fread("final.csv",header=T)`
`dim(fredT)`
> [1] 0 5

`fredF <-fread("final.csv",header=F)`
`dim(fredF)`
> [1] 1 5

`fredF`
>     V1      V2       V3       V4    V5
>   1: Col1 Col2\r1 data1\r2 data2\r3 data3

`#` `Output of sessionInfo()`
`sessioninfo::platform_info()`

>  setting  value                       
>  version  R version 3.5.0 (2018-04-23)
>  os       Windows 8.1 x64             
>  system   x86_64, mingw32             
>  ui       RStudio                     
>  language (EN)                        
>  collate  English_United States.1252  
>  ctype    English_United States.1252  
>  tz       America/Los_Angeles         
>  date     2020-01-17            

`packageVersion("data.table")`
> [1] ‘1.12.2’
as discussed with @mattdowle recently on slack
Referring to the recursive implementation in https://stackoverflow.com/questions/38285789/get-the-last-row-of-a-previous-group-in-data-table/42427568#42427568 and https://stackoverflow.com/questions/47126224/dplyr-group-by-carry-forward-value-from-previous-group-to-next/47209858#47209858. 

It appears that there might a regression introduced since that time (late 2017).

MWE:
```
DT <- data.table(rn=1:4, X=1:4)[, 
    CHECK := X + shift(X, fill=0L)]

prev <- 0L
DT[, Y := {
        s <- X + prev
        prev <- X
        .(s)
    },    
    rn]
```
output:

```
   rn X CHECK Y
1:  1 1     1 1
2:  2 2     3 4
3:  3 3     5 6
4:  4 4     7 8
```

It seems like expressions in `j` are not evaluated in sequence. If we use `prev <- copy(X)`, then it will work as before.
Closes #4173 

Maybe not  a perfect solution but it gets the job done.

Probably fair to say people aren't nesting `.SD` further than 5 levels down...
follow up of https://github.com/Rdatatable/data.table/pull/4164#issuecomment-574434666
ready to merge: https://gitlab.com/jangorecki/data.table/pipelines

----

side effect of this PR:
in r-devel cran linux build we no longer check pdf manual, we still do it in r-release build.
Closes #4179 

Note the intentional break vs. `base` for the stated reason:

```
x = as.data.table(table(iris$Species))
# this implementation
rbind(x, as.data.table(table(NULL)))
#            V1     N
# 1:     setosa    50
# 2: versicolor    50
# 3:  virginica    50
# base implementation
rbind(x, as.data.frame(table(NULL)))
# Error in rbindlist(l, use.names, fill, idcol) : 
#   Item 2 has 1 columns, inconsistent with item 1 which has 2 columns. To fill missing columns use fill=TRUE.
```
```
as.data.table(table(NULL))
# Error in (function (..., sorted = TRUE, unique = FALSE)  : 
#   attempt to set an attribute on NULL
```

with full `traceback()`:

```
5: (function (..., sorted = TRUE, unique = FALSE) 
   {
       l = list(...)
       if (isFALSE(getOption("datatable.CJ.names", TRUE))) {
           if (is.null(vnames <- names(l))) 
               vnames = paste0("V", seq_len(length(l)))
           else if (any(tt <- vnames == "")) 
               vnames[tt] = paste0("V", which(tt))
       }
       else {
           vnames = name_dots(...)$vnames
           if (any(tt <- vnames == "")) 
               vnames[tt] = paste0("V", which(tt))
       }
       dups = FALSE
       for (i in seq_along(l)) {
           y = l[[i]]
           if (!length(y)) 
               next
           if (sorted) {
               if (!is.atomic(y)) 
                   stop("'sorted' is TRUE but element ", i, " is non-atomic, which can't be sorted; try setting sorted = FALSE")
               o = forderv(y, retGrp = TRUE)
               thisdups = attr(o, "maxgrpn", exact = TRUE) > 1L
               if (thisdups) {
                   dups = TRUE
                   if (length(o)) 
                     l[[i]] = if (unique) 
                       y[o[attr(o, "starts", exact = TRUE)]]
                     else y[o]
                   else if (unique) 
                     l[[i]] = y[attr(o, "starts", exact = TRUE)]
               }
               else {
                   if (length(o)) 
                     l[[i]] = y[o]
               }
           }
           else {
               if (unique) 
                   l[[i]] = unique(y)
           }
       }
       nrow = prod(vapply_1i(l, length))
       if (nrow > .Machine$integer.max) 
           stop(gettextf("Cross product of elements provided to CJ() would result in %.0f rows which exceeds .Machine$integer.max == %d", 
               nrow, .Machine$integer.max, domain = "R-data.table"))
       l = .Call(Ccj, l)
       setDT(l)
       l = setalloccol(l)
       setnames(l, vnames)
       if (sorted) {
           if (!dups) 
               setattr(l, "sorted", names(l))
           else setkey(l)
       }
       l
   })(V1 = NULL, sorted = FALSE)
4: do.call(CJ, c(val, sorted = FALSE))
3: data.table(do.call(CJ, c(val, sorted = FALSE)), N = as.vector(x), 
       key = key)
2: as.data.table.table(table(NULL))
1: as.data.table(table(NULL))
```

Probably we should return `data.table(NULL)` here.

Use case: edge case of a code that was returning proper tables the rest of the time.
I am on my last step of my R session, where I got a huge data.table object to be passed on to my 2 clients in CSV format. The 2 clients only need several columns of my data.table object. But, I am running tight on RAM and couldn't afford to create another R object, I also can't delete the unnecessary variable as the other client need it. 

Currently, my implementation is:
```
set.seed(1)
dt <- data.table(
  a = rnorm(1e8),
  b = runif(1e8),
  c = sample(letters,1e8,T)
)
fwrite(dt)
fwrite(dt[,.(a,c)]) # data requested by the first client
fwrite(dt[,.(b,c)]) # data requested by the second client
```
From my inspection and understanding, the second and the third fwrite, will create a throwaway object that requires additional RAM. Is it possible to have select argument for fwrite that doesn't require such temporary object? Something like, `fwrite(dt,select=c("a","c")`?

`#` `Output of sessionInfo()`
```
R version 3.6.1 (2019-07-05)
Platform: x86_64-w64-mingw32/x64 (64-bit)
Running under: Windows 10 x64 (build 17763)

Matrix products: default

locale:
[1] LC_COLLATE=English_Singapore.1252  LC_CTYPE=English_Singapore.1252   
[3] LC_MONETARY=English_Singapore.1252 LC_NUMERIC=C                      
[5] LC_TIME=English_Singapore.1252    

attached base packages:
[1] stats     graphics  grDevices utils     datasets  methods   base     

other attached packages:
[1] data.table_1.12.9

loaded via a namespace (and not attached):
[1] compiler_3.6.1 tools_3.6.1    curl_4.2
```
When setDT is called on a list there are a series of sanity checks, e.g. the check for homogenous column length:

```
l = list(A=1:5, B=1)
setDT(l)
# Error in setDT(l) : 
#  All elements in argument 'x' to 'setDT' must be of same length, but the profile of input lengths (length:frequency) is: [1:1, 5:1]
# The first entry with fewer than 5 entries is 2
```

However this check is not triggered if we set the class to "data.table" or "data.frame" beforehand:

```
l = list(A=1:5, B=1)
class(l) = "data.table"
setDT(l)
l
#        A     B
#    <int> <num>
# 1:     1     1
# 2:     2     1
# 3:     3     1
# 4:     4     1
# 5:     5     1
str(l)
# Classes ‘data.table’ and 'data.frame':	5 obs. of  2 variables:
#  $ A: int  1 2 3 4 5
#  $ B: num 1
#  - attr(*, ".internal.selfref")=<externalptr> 
```

Only the check for multi-column columns (E.g. matrix columns) is triggered before the check `is.data.table(x)` - which then simply fixes the key, names, and internal reference. 

Instead, it would be better to proceed with the list sanity checks even when the input has class "data.table" or "data.frame". To avoid these checks when a user mistakenly calls `setDT` on an existing valid data.table we could simply return if `selfrefok(x) == 1L`.