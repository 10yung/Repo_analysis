I see anumber of open pull requests needing reviews and merging. Does this project need new/more maintainers?
https://github.com/Dwolla/dwolla-v2-ruby/issues/47

awesome_print should probably ignore trying to pretty print that class.
Ref: https://github.com/ruby/ruby/commit/9f1fb0a17febc59356d58cef5e98db61a3c03550

Warnings:

```ruby
:001 > hash = {a: 4}
 :002 > ap hash
/Users/akshay/.rvm/gems/ruby-2.7.0/gems/awesome_print-1.8.0/lib/awesome_print/formatters/base_formatter.rb:113: warning: Capturing the given block using Proc.new is deprecated; use `&block` instead
/Users/akshay/.rvm/gems/ruby-2.7.0/gems/awesome_print-1.8.0/lib/awesome_print/inspector.rb:63: warning: Capturing the given block using Proc.new is deprecated; use `&block` instead
{
    :a => 4
}
nil
```

After this change:
```ruby
 :001 > hash = {a: 4}
 :002 > ap ap
{
    :a => 4
}
nil
```
In some big hash. For example api payload.
There are sometimes text and many other keys and value.
Mainly when we use ap the wall object is print but when there is big text. It takes sometime many screens and needs to scroll a lot just to see if a simple attribute is well set.
It can be good if we can truncate those text by passing a truncate param to ap.
like

```ruby
ap my_object, truncate: 4
# or
ap my_object, string_trucate: 4

# and it will print on screen only the first 4th char of a string

```

thank for this awesome gem and all your work
ðŸ‘‹ Howdy!

There were a couple small changes to Rails 6.0 model structure, which should be accounted for in the new 6_0 files in `spec/support/active_record_data`. Aside from that, the appraisal changes should be pretty straightforward.
There are some CVEs known in older nokogiri versions that are causing this gem to fail vulnerability scans, specifically CVE-2016-4658, CVE-2019-11068, and CVE-2019-5477.
## Changes in this PR

- Fix Rails 5 errors with sqlite3 (details bellow)
- Add Ruby 2.6 to CI
- Allows errors with ruby-head (to be fixed in another PR)

### SQlite3 version compat with Rails 5.0

New sqlite3 version arrived in February 2019 but Rails 5.0 (actually sqlite3_adapter) was expecting `~> 1.3.6`

- https://rubygems.org/gems/sqlite3/versions/1.4.1
- https://github.com/rails/rails/issues/35153

This leads to failed builds with the following error:

```
>> BUNDLE_GEMFILE=/home/diovani/Development/Ruby/awesome_print/gemfiles/rails_5.0.gemfile bundle exec rake             
                                                                                                                                                                                                                                               
An error occurred while loading ./spec/ext/active_record_spec.rb.                                                      
Failure/Error: ActiveRecord::Base.establish_connection adapter: 'sqlite3', database: ':memory:'                                                                                                                                                
                                                                                                                       
Gem::LoadError:                                                                                                                                                                                                                                
  Specified 'sqlite3' for database adapter, but the gem is not loaded. Add `gem 'sqlite3'` to your Gemfile (and ensure its version is at the minimum required by ActiveRecord).
# ./spec/active_record_helper.rb:10:in `<top (required)>'                                                                                                                                                                                      
# ./spec/ext/active_record_spec.rb:2:in `require'                                                                                                                                                                                              
# ./spec/ext/active_record_spec.rb:2:in `<top (required)>'                                                                                                                                                                                     
# ------------------                                                                                                   
# --- Caused by: ---                                                                                                                                                                                                                           
# Gem::LoadError:                                                                                                                                                                                                                              
#   can't activate sqlite3 (~> 1.3.6), already activated sqlite3-1.4.1. Make sure all dependencies are added to Gemfile.                                                                                                                       
#   ./spec/active_record_helper.rb:10:in `<top (required)>'                                                            
Run options: include {:focus=>true}                                                                                                                                                                                                            
                                                                                                                                                                                                                                               
All examples were filtered out; ignoring {:focus=>true}                                                                                                                                                                                        
                                                                                                                                                                                                                                               
                                                                                                                                                                                                                                               
Finished in 0.00016 seconds (files took 0.49679 seconds to load)                                                                                                                                                                               
0 examples, 0 failures, 1 error occurred outside of examples                                                                                                                                                                                   
```

This PR sets to use sqlite3 ~> 1.3.6, which works with Rails 5.0.
I don't think we need a specific sqlite3 version for the tests, so this is the easiest fix.
example : a model Country with an attribute `:geometry` containing the geometry to display on a map (i.e all the coordinates on the border)

There are long long long arrays which are unreadable in the console
(console which uses `ai` output : 
`Pry.config.print = proc { |output, value| output.puts value.ai }`)

Is is possible to mark this attribute `:geometry` in some way,
in order to not show it in `ai` output ?
Now Mongoid models will display their alias field names in parentheses.
Rails 5.0 builds are failing, because the sqlite3 version being installed doesn't meet the requirements Rails 5.0 sets.

This PR locks the rails 5.0 gemfile to the same version requirement that rails 5.0 uses. It also switches to run against ruby 2.6 instead of head which is now past 2.6 and has several deprecations causing failures.