The Wasm in person meeting is coming up:

https://github.com/WebAssembly/meetings/blob/master/2020/CG-02.md

Do we want to have subgroup breakout meeting?  Or perhaps a lunch / dinner meeting?   Lets use this ticket to propose agenda items.   Are there topics that could benefit from being discussed in person?
This makes it more consistent with naming through the rest of the witx
specs.
Ken Thompson was once asked what he would do differently if he were
redesigning the UNIX system. His reply: "I'd spell creat with an e."

 - https://en.wikiquote.org/wiki/Ken_Thompson#Quotes
The buffer contains arbitrary bytes, not UTF-8-encoded bytes, so use
`u8` rather than `char8`.

Fixes #184.
Remove $process_cputime_id and $thread_cputime_id.

Some implementations will not have one wasm nanoprocess per OS process,
or one wasm thread per OS thread, making it difficult to implement
$process_cputime_id meaningfully. Also, the concept of "cputime"
available in most host environments isn't easy to directly connect to
what we might expect "cputime" to mean for wasm code.

These correspond to `CLOCK_PROCESS_CPUTIME_ID` and `CLOCK_THREAD_CPUTIME_ID`
in POSIX, which are optional:

https://pubs.opengroup.org/onlinepubs/9699919799/basedefs/time.h.html
As part of a larger effort to answer questions about what capability-based design means, whether WASI is intending to be POSIX-oriented, and other things, here's a draft of a design principles document.

This also includes a section on virtualization, which takes some ideas from #69, but modifies it to focus on using interface types and the linking proposal to implement virtualization.

Feedback is welcome!

Edit: [Click here to read as rendered html](https://github.com/WebAssembly/WASI/blob/7d6a36e4f52c3965b8e8732061e1b9642e2bb276/docs/DesignPrinciples.md)
The discussion about enforcing (ensuring?) determinism in WASI has already been started and touched upon in a couple of issues here and there (#185, #118, bytecodealliance/wasmtime#748, if I missed any, please feel free to mention it in this thread). I'd like to gather all the knowledge, ideas, perceived issues, etc. here creating essentially a meta-issue that we could use to track this, and come up with solutions, or at least guidance as to what direction to take.

I'll try and describe all potential sources of nondeterminism below leaving out sockets for now though. Feel free to correct me, add more, etc.

## Randomness and entropy
This is an obvious one, and from what I understand, the current consensus is to have it require a capability (see #185 and bytecodealliance/wasmtime#748 for more details). `random_get` also will get its own module in the upcoming WASI snapshot: [wasi_ephemeral_random.witx].

[wasi_ephemeral_random.witx]: https://github.com/WebAssembly/WASI/blob/master/phases/ephemeral/witx/wasi_ephemeral_random.witx

## Clocks
Access to system/thread/process clocks will also lead to nondeterminism, and as far as I understand, like in the randomness case, the consensus is to have it require a capability (see #118 and bytecodealliance/wasmtime#748 for more details). Also as in the randomness case, `clock_time_get` will get its own module in the upcoming WASI snapshost: [wasi_ephemeral_clock.witx].

[wasi_ephemeral_clock.witx]: https://github.com/WebAssembly/WASI/blob/master/phases/ephemeral/witx/wasi_ephemeral_clock.witx

## File access/modification/change times
This one concerns four WASI syscalls that may introduce nondeterminism into the picture, namely: `fd_filestat_get`, `fd_filestat_set_times`, `path_filestat_get`, and `path_filestat_set_times`. The nondeterminism may sneak in if the client app makes use in some way of the access (`atim`), modification (`mtim`) or change (`ctim`) times of a file descriptor which can change between any two runs of the app.

I'm not sure what the best approach to handle this would be, so I'd like to start some brain storming on this. Could we only perhaps populate the filestat time values if a clock capability was requested/provided? Or introduce a different type of capability?

## Readdir
This one is potentially of lesser importance/impact since, I assume that on the same host, `fd_readdir` syscall *should* return the same ordering of the entries---according to the macOS man of `readdir`

> Note that the order of the directory entries vended by **readdir()** is not specified. Some filesystems may return entries in lexicographic sort order and others may not.

I assume similar will hold on all *nixes, so as long as the same host with the same filesystem is used, the order should be the same between the app runs. The problem, however, may become more pronounced in distributed settings where we'd like to execute an app on two unknown and potentially different hosts, and expect deterministic, comparable results on both.

There already was some discussion about ordering of results, seeking, and `fd_readdir` in general in #61.

## Poll
I'm adding that one in since I remember having a discussion with @marmistrz about this one, and he was convinced he could generate entropy with a clever use of `poll_oneoff`, hence bringing in nondeterminism into the picture. @marmistrz perhaps you could shed more light on this?
Same as for [`random_get`](https://github.com/WebAssembly/WASI/issues/185), `environ_get` probably also should require a capability, as pointed out by @erights in an [issue in the Wasmtime repo](https://github.com/bytecodealliance/wasmtime/issues/748).
This was [brought up in a recent meeting](https://github.com/WebAssembly/WASI/blob/0e7c2c65b531f39b349d5e471acc8dd95ec81ae4/meetings/2019/WASI-11-07.md#make-clocksrandom-into-capabilities) after @sunfishcode [mentioned it in an issue](https://github.com/WebAssembly/WASI/issues/118#issuecomment-542948882), and @erights [filed an issue](https://github.com/bytecodealliance/wasmtime/issues/748) about it in the Wasmtime repo.

As Dan mentioned in the call on November 7, there's no mechanism yet for asking for such a capability.

@lukewagner, I think you had thoughts on mechanisms for these kinds of capabilities, tooâ€”around Interface Types, IIRC?
https://github.com/WebAssembly/WASI/blob/01924c740b4d982310ce39d5881700fe0c75ad46/phases/ephemeral/witx/wasi_ephemeral_random.witx#L14-L25

`buf` should not have been changed to `char8` since it is random bytes -- not valid UTF-8