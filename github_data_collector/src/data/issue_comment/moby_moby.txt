Hello,

We have computers where just installing docker set the default bridge network to 172.17.0.0/16 (the more of them) and on some others computers this network is set to 172.18.0.0/24.
Docker don't seems consistent on this (this was the exactly same installation process, using Vagrant deployment).
No problem, i think this is because of some internal mechanism.

The problem is we wanted to set 172.17.0.0/24 for all, so we have set in daemon.json :

```
"bip": "172.17.0.0/24"
```

**Docker cannot restart with this `"bip": "172.17.0.0/24"` setting.**
But if we set `"bip": "172.17.0.1/24"`, it works.

_For information, we tested on several computers having already the native 172.17.0.0/24 and they can't either, this is not a problem of adresse availability on the computer. The only other network on all computers is eth0 with a 10.xx.xx.xx network. So there is no network/ip overlap._

Question 1 please, the bug:
**Is it a bug that we cannot set `"bip": "172.17.0.0/24"` but only `"bip": "172.17.0.1/24"` ?**
As result we cannot have the 172.17.0.0 IP address if we use `bip` option (so only starting from 172.17.0.1). But native configuration have it.

Question 2 please, impact :
Is it a problem for docker or all will work ok with `172.17.0.1/24` instead `172.17.0.0/24` ?

Thanks a lot.

**Description**



I'm working with K8S and I've got severe issue with docker. The log :

time="2020-01-17T13:34:00.228328085Z" level=error msg="failed to get event" error="rpc error: code = Unavailable desc = all SubConns are in TransientFailure, latest connection error: connection error: desc = \"transport: Error while dialing dial unix /run/containerd/containerd.sock: connect: connection refused\"" module=libcontainerd namespace=plugins.moby

this error is in a permanent loop

I do not use snap and snap has never been install on this machine, so this pb is not link to a snap install.
I use a classic docker version: Docker version 18.09.9, build 039a7df9ba

If someone as any idea to fix it or find the reason...

**Steps to reproduce the issue:**
I don't know as I just use my K8S
**Describe the results you received:**


**Describe the results you expected:**


**Additional information you deem important (e.g. issue happens only occasionally):**

**Output of `docker version`:**
Docker version 18.09.9, build 039a7df9ba
**Output of `docker info`:**

```
docker info
Containers: 41
 Running: 0
 Paused: 0
 Stopped: 41
Images: 1
Server Version: 18.09.9
Storage Driver: overlay2
 Backing Filesystem: extfs
 Supports d_type: true
 Native Overlay Diff: true
Logging Driver: json-file
Cgroup Driver: cgroupfs
Plugins:
 Volume: local
 Network: bridge host macvlan null overlay
 Log: awslogs fluentd gcplogs gelf journald json-file local logentries splunk syslog
Swarm: inactive
Runtimes: runc
Default Runtime: runc
Init Binary: docker-init
containerd version: N/A
runc version: 425e105d5a03fabd737a126ad93d62a9eeede87f
init version: fec3683
Security Options:
 apparmor
 seccomp
  Profile: default
Kernel Version: 4.15.0-72-generic
Operating System: Ubuntu 16.04.6 LTS
OSType: linux
Architecture: x86_64
CPUs: 4
Total Memory: 15.66GiB
Name: 1b93ee77-d636-4555-9140-15e5da5cd904
ID: CNN4:IF4P:5EDQ:KUAX:2D26:2IO3:K45F:UEYX:33M7:VXTB:UFHI:QBLG
Docker Root Dir: /var/vcap/data/docker/docker

```

**Additional environment details (AWS, VirtualBox, physical, etc.):**

<!--
If you are reporting a new issue, make sure that we do not have any duplicates
already open. You can ensure this by searching the issue list for this
repository. If there is a duplicate, please close your issue and add a comment
to the existing issue instead.

If you suspect your issue is a bug, please edit your issue description to
include the BUG REPORT INFORMATION shown below. If you fail to provide this
information within 7 days, we cannot debug your issue and will close it. We
will, however, reopen it if you later provide the information.

For more information about reporting issues, see
https://github.com/moby/moby/blob/master/CONTRIBUTING.md#reporting-other-issues

---------------------------------------------------
GENERAL SUPPORT INFORMATION
---------------------------------------------------

The GitHub issue tracker is for bug reports and feature requests.
General support for **docker** can be found at the following locations:

- Docker Support Forums - https://forums.docker.com
- Slack - community.docker.com #general channel
- Post a question on StackOverflow, using the Docker tag

General support for **moby** can be found at the following locations:

- Moby Project Forums - https://forums.mobyproject.org
- Slack - community.docker.com #moby-project channel
- Post a question on StackOverflow, using the Moby tag

---------------------------------------------------
BUG REPORT INFORMATION
---------------------------------------------------
Use the commands below to provide key information from your environment:
You do NOT have to include this information if this is a FEATURE REQUEST
-->

**Description**

dockerd ignores the --default-address-pool option.

**Steps to reproduce the issue:**
```
$ cat empty.json
{}

$ cat daemon.json
{
        "default-address-pools": [ { "base": "10.123.0.0/16", "size": 24 } ]
}

$ dockerd --config-file daemon.json

$ while true; do docker network create n1 > /dev/null; docker network inspect n1 --format '{{json .}}' | jq .IPAM.Config[0].Subnet; docker network rm n1 > /dev/null; done
"10.123.1.0/24"
"10.123.2.0/24"
"10.123.3.0/24"
"10.123.4.0/24"
"10.123.5.0/24"
"10.123.6.0/24"
"10.123.7.0/24"
...

$ dockerd --default-address-pool 'base=10.123.0.0,size=24' --config-file empty.json

$ while true; do docker network create n1 > /dev/null; docker network inspect n1 --format '{{json .}}' | jq .IPAM.Config[0].Subnet; docker network rm n1 > /dev/null; done
"172.17.0.0/16"
"172.18.0.0/16"
"172.19.0.0/16"
"172.20.0.0/16"
"172.21.0.0/16"
"172.22.0.0/16"
"172.23.0.0/16"
"172.24.0.0/16"
"172.25.0.0/16"
"172.26.0.0/16"
"172.27.0.0/16"
"172.28.0.0/16"
"172.29.0.0/16"
"172.30.0.0/16"
"172.31.0.0/16"
"192.168.0.0/20"
"192.168.16.0/20"
"192.168.32.0/20"
"192.168.48.0/20"
"192.168.64.0/20"
"192.168.80.0/20"
"192.168.96.0/20"
"192.168.112.0/20"
"192.168.128.0/20"
"192.168.144.0/20"
"192.168.160.0/20"
"192.168.176.0/20"
"192.168.192.0/20"
"192.168.208.0/20"
"192.168.224.0/20"
"192.168.240.0/20"
"172.17.0.0/16"
...
```

**Describe the results you received:**
docker network create uses "172.*.0.0/16" and "192.168.*.0/20" networks.

**Describe the results you expected:**
docker network create should use "10.123.*.0/24" networks, which are specified by the --default-address-pool option.

**Additional information you deem important (e.g. issue happens only occasionally):**
```
$ dockerd --help
...
      --default-address-pool pool-options       Default address pools for node specific local networks
...
```
Can be confusing, because the name of the option in the daemon.json is plurar and the option on the CLI is singular.

**Output of `docker version`:**

```
Client: Docker Engine - Community
 Version:           19.03.5
 API version:       1.40
 Go version:        go1.12.12
 Git commit:        633a0ea838
 Built:             Wed Nov 13 07:29:52 2019
 OS/Arch:           linux/amd64
 Experimental:      false

Server: Docker Engine - Community
 Engine:
  Version:          19.03.5
  API version:      1.40 (minimum version 1.12)
  Go version:       go1.12.12
  Git commit:       633a0ea838
  Built:            Wed Nov 13 07:28:22 2019
  OS/Arch:          linux/amd64
  Experimental:     false
 containerd:
  Version:          1.2.10
  GitCommit:        b34a5c8af56e510852c35414db4c1f4fa6172339
 runc:
  Version:          1.0.0-rc8+dev
  GitCommit:        3e425f80a8c931f88e6d94a8c831b9d5aa481657
 docker-init:
  Version:          0.18.0
  GitCommit:        fec3683
```

**Output of `docker info`:**

```
Client:
 Debug Mode: false

Server:
 Containers: 3
  Running: 3
  Paused: 0
  Stopped: 0
 Images: 6
 Server Version: 19.03.5
 Storage Driver: overlay2
  Backing Filesystem: extfs
  Supports d_type: true
  Native Overlay Diff: true
 Logging Driver: json-file
 Cgroup Driver: cgroupfs
 Plugins:
  Volume: local
  Network: bridge host ipvlan macvlan null overlay
  Log: awslogs fluentd gcplogs gelf journald json-file local logentries splunk syslog
 Swarm: inactive
 Runtimes: runc
 Default Runtime: runc
 Init Binary: docker-init
 containerd version: b34a5c8af56e510852c35414db4c1f4fa6172339
 runc version: 3e425f80a8c931f88e6d94a8c831b9d5aa481657
 init version: fec3683
 Security Options:
  apparmor
  seccomp
   Profile: default
 Kernel Version: 4.15.0-74-generic
 Operating System: Ubuntu 18.04.3 LTS
 OSType: linux
 Architecture: x86_64
 CPUs: 8
 Total Memory: 15.64GiB
 Name: REDACTED
 ID: SF2M:PRNH:SXW4:2MR2:WNUL:6JIA:UQUA:7BAW:Q4CW:GE3G:YL3V:V75F
 Docker Root Dir: /var/lib/docker
 Debug Mode: false
 Registry: https://index.docker.io/v1/
 Labels:
 Experimental: false
 Insecure Registries:
  127.0.0.0/8
 Live Restore Enabled: true

WARNING: No swap limit support```

**Additional environment details (AWS, VirtualBox, physical, etc.):**

<!--
If you are reporting a new issue, make sure that we do not have any duplicates
already open. You can ensure this by searching the issue list for this
repository. If there is a duplicate, please close your issue and add a comment
to the existing issue instead.

If you suspect your issue is a bug, please edit your issue description to
include the BUG REPORT INFORMATION shown below. If you fail to provide this
information within 7 days, we cannot debug your issue and will close it. We
will, however, reopen it if you later provide the information.

For more information about reporting issues, see
https://github.com/moby/moby/blob/master/CONTRIBUTING.md#reporting-other-issues

---------------------------------------------------
GENERAL SUPPORT INFORMATION
---------------------------------------------------

The GitHub issue tracker is for bug reports and feature requests.
General support for **docker** can be found at the following locations:

- Docker Support Forums - https://forums.docker.com
- Slack - community.docker.com #general channel
- Post a question on StackOverflow, using the Docker tag

General support for **moby** can be found at the following locations:

- Moby Project Forums - https://forums.mobyproject.org
- Slack - community.docker.com #moby-project channel
- Post a question on StackOverflow, using the Moby tag

---------------------------------------------------
BUG REPORT INFORMATION
---------------------------------------------------
Use the commands below to provide key information from your environment:
You do NOT have to include this information if this is a FEATURE REQUEST
-->

**Description**
`docker-compose run` allows spawning a container based on a service template from the compose file, with overrides from command line flags. This is useful for spawning one-off containers(e.g. "jobs") using the same environment as a service, without having to specify on the command line the full service specs. Also very useful for debugging purposes(why is this service failing? start a shell in a container using the same template as the service to look around and test). 

While one can still use `docker-compose run` with a stack file, useful swarm-specific options won't be supported, like `configs` and `secrets`.

Maybe the issue is more that `docker-compose` and `docker run` don't support those options. But it would be nice to have a coherent, complete API that covers all use case with `docker stack`.

 
**Additional information you deem important (e.g. issue happens only occasionally):**

**Output of `docker version`:**

```
Client: Docker Engine - Community
 Version:           19.03.5
 API version:       1.40
 Go version:        go1.12.12
 Git commit:        633a0ea838
 Built:             Wed Nov 13 07:50:12 2019
 OS/Arch:           linux/amd64
 Experimental:      false

Server: Docker Engine - Community
 Engine:
  Version:          19.03.5
  API version:      1.40 (minimum version 1.12)
  Go version:       go1.12.12
  Git commit:       633a0ea838
  Built:            Wed Nov 13 07:48:43 2019
  OS/Arch:          linux/amd64
  Experimental:     false
 containerd:
  Version:          1.2.10
  GitCommit:        b34a5c8af56e510852c35414db4c1f4fa6172339
 runc:
  Version:          1.0.0-rc8+dev
  GitCommit:        3e425f80a8c931f88e6d94a8c831b9d5aa481657
 docker-init:
  Version:          0.18.0
  GitCommit:        fec3683

```
<!--
If you are reporting a new issue, make sure that we do not have any duplicates
already open. You can ensure this by searching the issue list for this
repository. If there is a duplicate, please close your issue and add a comment
to the existing issue instead.

If you suspect your issue is a bug, please edit your issue description to
include the BUG REPORT INFORMATION shown below. If you fail to provide this
information within 7 days, we cannot debug your issue and will close it. We
will, however, reopen it if you later provide the information.

For more information about reporting issues, see
https://github.com/moby/moby/blob/master/CONTRIBUTING.md#reporting-other-issues

---------------------------------------------------
GENERAL SUPPORT INFORMATION
---------------------------------------------------

The GitHub issue tracker is for bug reports and feature requests.
General support for **docker** can be found at the following locations:

- Docker Support Forums - https://forums.docker.com
- Slack - community.docker.com #general channel
- Post a question on StackOverflow, using the Docker tag

General support for **moby** can be found at the following locations:

- Moby Project Forums - https://forums.mobyproject.org
- Slack - community.docker.com #moby-project channel
- Post a question on StackOverflow, using the Moby tag

---------------------------------------------------
BUG REPORT INFORMATION
---------------------------------------------------
Use the commands below to provide key information from your environment:
You do NOT have to include this information if this is a FEATURE REQUEST
-->

**Description**

When deploying using `docker stack deploy`, I often end up with failed tasks, for example because scheduling order is non-deterministic and some services try to start before their dependencies. 
Or if there's a misconfiguration for some services, or an application bug somewhere, and then I fix it and redeploy, those services will be updated and new tasks scheduled. 

Using `docker service logs` to debug and check tasks status becomes inconvenient, since logs of all tasks ever created for that service are mixed together, and it seems logs of old(now dead) tasks keep popping up in the middle of logs from currently running tasks.

Suggestions:
* option flag to force total ordering by timestamp, so that newer logs always show up first
* `--task-filter` flag for `docker service logs` command to filter which tasks should be looked at(e.g. `--task-filter current-state=running`)

**Additional information you deem important (e.g. issue happens only occasionally):**

**Output of `docker version`:**

```
Client: Docker Engine - Community
 Version:           19.03.5
 API version:       1.40
 Go version:        go1.12.12
 Git commit:        633a0ea838
 Built:             Wed Nov 13 07:50:12 2019
 OS/Arch:           linux/amd64
 Experimental:      false

Server: Docker Engine - Community
 Engine:
  Version:          19.03.5
  API version:      1.40 (minimum version 1.12)
  Go version:       go1.12.12
  Git commit:       633a0ea838
  Built:            Wed Nov 13 07:48:43 2019
  OS/Arch:          linux/amd64
  Experimental:     false
 containerd:
  Version:          1.2.10
  GitCommit:        b34a5c8af56e510852c35414db4c1f4fa6172339
 runc:
  Version:          1.0.0-rc8+dev
  GitCommit:        3e425f80a8c931f88e6d94a8c831b9d5aa481657
 docker-init:
  Version:          0.18.0
  GitCommit:        fec3683

```

The "node discovery" feature was added to implement overlay networks with an external k/v store
https://docs.docker.com/engine/reference/commandline/dockerd/#node-discovery

With swarm "standalone" being in maintenance mode, and SwarmKit providing all functionality to create overlay networks (which could be used for standalone swarm if created with the `--attachable` option), we should deprecate this feature, and remove it.

- [ ] deprecate/remove `--cluster-advertise`, `--cluster-store `, `--cluster-store-opt` flags from `dockerd` CLI
    - [ ] remove options from libnetwork
    - [ ] hide/deprecate flags and print error instead
    - [ ] remove equivalent options from `daemon.json` (or produce error)
- [ ] update reference docs
    - [ ] remove flags from [`dockerd` command line reference](https://github.com/docker/cli/blob/86281a7b4b956446fe9a0f33b59a7defa9b3cb27/docs/reference/commandline/dockerd.md)
    - [ ] remove flags from [`dockerd (8)` man page](https://github.com/docker/cli/blob/master/86281a7b4b956446fe9a0f33b59a7defa9b3cb27/dockerd.8.md)
- [ ] Remove the [Overlay networking with an external key-value store](https://github.com/docker/docker.github.io/blob/a8e84a80e1b9968b55d3487bbfef0a98bcd5c5a4/network/overlay-standalone.swarm.md) documentation


The following flags will be removed/deprecated on the `dockerd` daemon:

```
      --cluster-advertise string                Address or interface name to advertise
      --cluster-store string                    URL of the distributed storage backend
      --cluster-store-opt map                   Set cluster store options (default map[])
```



(this is just a placeholder to start the discussion, I'll add more information about things to change)
 
This allows for users to actually use `github.com/moby/moby` imports
instead of relying on github to properly resolve the repo


<!--
Please make sure you've read and understood our contributing guidelines;
https://github.com/moby/moby/blob/master/CONTRIBUTING.md

** Make sure all your commits include a signature generated with `git commit -s` **

For additional information on our contributing process, read our contributing
guide https://docs.docker.com/opensource/code/

If this is a bug fix, make sure your description includes "fixes #xxxx", or
"closes #xxxx"

Please provide the following information:
-->

**- What I did**

Engaged the next step in docker's rename to moby

**- How I did it**
```
 rg 'github.com/docker/docker/' -l | xargs sed -i 's|github.com/docker/docker/|github.com/moby/moby/|'
rg '// import "github.com/moby' -l | xargs sed -i 's| // import.*||'
```
**- How to verify it**

Running tests

**- Description for the changelog**
Rename imports to moby
- define `PREFIX` in `base` stage. All uses of PREFIX are currently the same, so might as well set it as an ENV in the base stage.
- remove `INSTALL_BINARY_NAME` envs. Using a variable here doesn't seem to add much, so inlining the value instead.
- mount install scripts instead of copying. These scripts are only used to build the binaries, and the scripts themselves don't have to be persisted in an image, so we can mount them instead of copying to the stage
BuildKit is planned to replace the classic builder and has been available as an opt-in feature since Docker 18.06. BuildKit provides many enhancements over the classic builder, fixes bugs that cannot be fixed (or cannot _easily_ be fixed) in the classic builder, and is overall recommended to be used if supported on the user's platform.

So far, BuildKit was still opt-in, which makes it harder to use (not all users are even aware of the new builder), but also inconsistent with our recommendation.

I'm opening this issue to discuss the option to make BuildKit the default builder in the next (docker) release.

### Proposal: make BuildKit the default builder on Linux

- Toggle the default: if no environment variable or daemon configuration is set, BuildKit will be used by default
- Document the classic builder to be "in maintenance":
    - Bugs can be fixes, but within limits (no extensive modifications)
    - Feature-parity / enhancements can be made, but should (where possible) be limited to fixes that affect Windows (which does not yet have BuildKit support)
- Users are still able to disable BuildKit (`DOCKER_BUILDKIT=0` or the equivalent `daemon.json` configuration)
- Update the documentation to document new features (where needed)

### Why BuildKit is not yet the default?

We made BuildKit an opt-in feature get a wider audience for testing the new builder in many scenarios, allowing us to catch important regressions without breaking existing users. While stability and regressions have been addressed, and we're confident that BuildKit is a good replacement for most scenarios, there were still some things left to be done:

- **No support on Windows**. For BuildKit to be used on Windows, additional changes are still needed (e.g., changes to the runtime, using containerd). Work on this is still in progress, but there is no definitive ETA.
- **Feature parity**. The classic builder received some advanced options over the years; not all of those are implemented yet in BuildKit, and for some of those, no decision has been made yet if they _will_ be implemented (or implemented in different ways). See the _"Feature parity: (advanced) options supported by BuildKit"_ section below with more details.

Even though both of the above still hold true, I think it makes sense to switch BuildKit to be the default:

- Linux and Windows will never have _full_ feature parity. They're different platforms, and not all things possible on Linux will be possible on Windows (and vice-versa). There are already differences between both platforms, and having a different builder will not _substantially_ change that situation. (It should be properly documented though)
- Most of the options that are not (yet) supported are for "advanced" use-cases, and won't be used by _most_ users. While switching the default to BuildKit would affect users of those advanced options, _not_ switching is probably worse: users don't get the best experience "out of the box".

### Prerequisites

- Review the missing features and changes in behavior between BuildKit and the classic builder
- Decide if any of those options should be considered a "blocking" option.
- Blocking issues: estimate if they can be fixed/addressed before the next release
- Non-blocking issues: update the documentation (and prepare release notes) to describe differences
- Create tracking issues for missing options that should be implemented in future (roadmap)

### Feature parity: (advanced) options supported by BuildKit

Note: I also added a `area/feature-parity` label in the BuildKit repository to make it easier to find issues and pull requests related to feature-parity with the classic builder;
https://github.com/moby/buildkit/issues?q=is%3Aopen+is%3Aissue+label%3Aarea%2Ffeature-parity


- [ ] Debugging is more complicated with BuildKit, because no "intermediate containers", nor "intermediate images" are created, therefore it's not (easily) possible to debug failures in build by starting a container from the intermediate step.
    - [ ] document steps / workarounds / recommendations on how to debug build failures when using BuildKit
    - [ ] create a plan/roadmap on how this can be improved in future
- [ ] Build progress is printed on `stderr` instead of `stdout` (see https://github.com/moby/buildkit/issues/1155). This is a bugfix / by design, but is a change in behavior that should be called out (changelog?)
    - [ ] document change in behavior
    - [ ] consider adding `Successfully built`, `Successfully tagged` output (https://github.com/moby/buildkit/issues/1155)
- [ ] BuildKit does not use intermediate images for caching, but uses a dedicated build-cache. While this has many advantages, it also makes it less discoverable where disk-space is consumed by Docker (many users are familiar with "the old way", and remove dangling images to clean up disk space)
    - [ ] consider enabling BuildKit garbage-collection _by default_
    - [ ] improve documentation around managing build-cache and garbage-collection (related: https://github.com/moby/moby/pull/37846)
    - [ ] (for Docker Desktop) consider adding configuration options in the Docker Desktop UI to make the garbage-collection options better discoverable, and to make it easier to configure.

### List of options, and their status in BuildKit

Note that the current CLI always shows all options (even if not supported), but https://github.com/docker/cli/pull/2123 added annotations to hide unsupported options (currently only on master)

Looking at these options:

- Some of these options may need discussion wether or not they _will_ be supported by BuildKit, or should be marked "deprecated".
- Decide if any of these options are a "blocker" for switching the default builder, or a "nice to have" and are ok to be implemented in future updates. Note that users are still able to opt-out by setting `DOCKER_BUILDKIT=0`, or disabling BuildKit to be the default in the daemon configuration

Status                    | Option                    |  Notes/Tracking
--------------------------|:--------------------------|:--------------------------------------------------
:white_check_mark:        | `--add-host`              | -
:white_check_mark:        | `--build-arg`             | -
:white_check_mark:        | `--cache-from`            | -
:question:                | `--cgroup-parent`         | -
:question:                | `--cpu-period`            | -
:question:                | `--cpu-quota`             | -
:question:                | `-c, --cpu-shares`        | -
:question:                | `--cpuset-cpus`           | https://github.com/moby/buildkit/issues/1276
:question:                | `--cpuset-mems`           | -
:white_check_mark:        | `--disable-content-trust` | -
:white_check_mark:        | `-f, --file`              | -
:white_check_mark:        | `--force-rm`              | no-op: not needed for BuildKit. Needs to be documented(?)
:white_check_mark:        | `--iidfile`               | -
:question:                | `--isolation`             | windows-only (should be hidden?)
:white_check_mark:        | `--label`                 | -
:question:                | `-m, --memory`            | -
:question:                | `--memory-swap`           | -
:question: :construction: | `--network`               | only `none` and `host`, but no custom networks see https://github.com/moby/buildkit/issues/978
:white_check_mark:        | `--no-cache`              | -
:white_check_mark:        | `-o, --output`            | (BuildKit-only feature)
:white_check_mark:        | `--platform`              | -
:white_check_mark:        | `--progress`              | (BuildKit-only feature)
:white_check_mark:        | `--pull`                  | -
:white_check_mark:        | `-q, --quiet`             | -
:white_check_mark:        | `--rm`                    | no-op: not needed for BuildKit. Needs to be documented(?)
:white_check_mark:        | `--secret`                | (BuildKit-only feature)
:question:                | `--security-opt`          | -
:question:                | `--shm-size`              | -
:construction:            | `--squash`                | Partial support: https://github.com/moby/buildkit/issues/819 https://github.com/moby/moby/issues/38903 https://github.com/moby/moby/pull/39187<br>`DOCKER_BUILDKIT=1 docker build --squash` should not squash the base image https://github.com/moby/moby/issues/38903.<br> This feature is still "experimental" so should not be a blocker
:white_check_mark:        | `--ssh`                   | (BuildKit-only feature)
:white_check_mark:        | `-t, --tag`               | -
:white_check_mark:        | `--target`                | -
:question:                | `--ulimit`                | -


https://master.dockerproject.org/ hasn't been updated since 2019-12-12.

https://download.docker.com/linux/static/nightly/x86_64/ hasn't been updated since 2019-07-29.



