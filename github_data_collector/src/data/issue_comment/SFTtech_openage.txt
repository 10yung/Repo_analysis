Using #1212 we would be able to extract diagnostics data from users in a standardized format.

This could be utilized to:

* Automatically report errors to a debug server (opt-in)
* Reproduce the error in a testing environment (VM)
* Group similar errors automatically
Not every end-user is capable of finding, reading or interpreting error logs and much less will be able or want to to create detailed bug reports. An automated error diagnostics module that pins down crashes and error while also preparing standardized output that can be posted to Github or the Forum would be a nice addition and improve reporting.

Example output:

```
Error detected in module XYZ

<Description of problem or Error message. What happened, Where does it happen, When did it happen, ...>

* Platform/Operating System: ...
* Version: (Output of openage --version)
* Activated mods: ...

<Additional info, expected behaviour, screenshots, logs>
```
Hi, after the `make run` command the game seems to start but then it crashes.

below the error:
```
make run
[  0%] Automatic MOC for target libopenage
bin/run game
INFO [py] launching openage v0.4.0-104-g0ccc92c0
INFO [py] compiled by AppleClang 11.0.0.11000033
INFO [py] running in DEVMODE
INFO launching engine with Path(Union(Directory(/Users/u***a/AOE2_HD/openage/cfg).root @ (b'cfg',), Directory(/Users/u***a/AOE2_HD/openage/assets).root @ (b'assets',)):) and fps limit 0
INFO SDL audio subsystems initialized
INFO Using audio device: default [freq=48000, format=32784, channels=2, samples=4096]
INFO Initialized SDL video subsystems.
INFO Compiled with Qt 5.13.2 and run with Qt 5.13.2
Traceback (most recent call last):
  File "run.py", line 15, in init run
    main()
  File "/Users/u***a/AOE2_HD/openage/.bin/g++-release-Oauto-sanitize-none/openage/__main__.py", line 129, in main
    return args.entrypoint(args, cli.error)
  File "/Users/u***a/AOE2_HD/openage/.bin/g++-release-Oauto-sanitize-none/openage/game/main.py", line 78, in main
    return run_game(args, root)
  File "openage/game/main_cpp.pyx", line 47, in openage.game.main_cpp.run_game
    result = run_game_cpp(args_cpp)
  File "", line 0, in __pyx_pw_7openage_4game_8main_cpp_1run_game(_object*, _object*, _object*)+0xd97
  File "", line 0, in openage::run_game(openage::main_arguments const&)+0x182
  File "", line 0, in openage::Engine::Engine(openage::util::Path const&, int, bool, char const*)+0xf99
  File "", line 0, in openage::gui::GUI::GUI(SDL_Window*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, openage::gui::EngineQMLInfo*)+0x60d
  File "", line 0, in openage::shader::Program::link()+0x39
  File "", line 0, in openage::shader::Program::check(unsigned int)+0x18d
  File "", line 0, in openage::error::Error::Error(openage::log::message const&, bool, bool)+0x111
  File "libopenage/shader/program.cpp", line 97, in void openage::shader::Program::check(GLenum)
    auto errormsg = MSG(err);
openage.cppinterface.exctranslate.CPPException: Program validation failed
Validation Failed: Current draw framebuffer is invalid.

make: *** [run] Error 1
```
So here I am with my first contribution, as asked in #985 
There is a lot of optimization that must be done, but first I need to understand the logic of the code.
The code don't run because I can't extract properly the special `SLP` data from an `SLP`, and pass it to `determine_rgba_matrix()`

Thanks in advance for your feedback.
This adds the version of a config file for the ci from an environment variable to version output of openage for later debugging.
Python 3.8 changes the behaviour of resolving DLLs on Windows. 

> DLL dependencies for extension modules and DLLs loaded with ctypes on Windows are now resolved more securely. Only the system paths, the directory containing the DLL or PYD file, and directories added with add_dll_directory() are searched for load-time dependencies. Specifically, PATH and the current working directory are no longer used, and modifications to these will no longer have any effect on normal DLL resolution. If your application relies on these mechanisms, you should check for add_dll_directory() and if it exists, use it to add your DLLs directory while loading your library. Note that Windows 7 users will need to ensure that Windows Update KB2533623 has been installed (this is also verified by the installer). (Contributed by Steve Dower in bpo-36085.)

Src.: https://docs.python.org/3/whatsnew/3.8.html#bpo-36085-whatsnew

I'm not entirely sure if this is also an Upstream issue as well for the python dependencies we pull in.
Judging by #920 and #1125, the current idea for a game launcher seems to be a python/Qt, cross-platform implementation. I felt like playing around with PyQt5, so I tried to implement @heinezen 's [tiled launcher mockup](https://heinezen.github.io/openage/launcher/tiled.html).

Functionality is basically nonexistent at the moment, except for the `Quit` button, which works marvellously :)

ci:  adding windows and ubuntu workflows,
doc: adding status badges for mac and win to readme.md

For the caching there is still some fine-tuning needed in the future. I'm also waiting for an increase of the limit and possibility to cache `vcpkg/installed`-dir of github-actions (actions/cache#6) and adding vcpkg packages to the virtual env (actions/virtual-environments#11) and that Qt gets added to the images (actions/virtual-environments#8). That overall could lower the win build for around 12 minutes.

The Ubuntu-CI is **not running** inside this main repo, but just outside for any forks of **openage**. People can make future use of this for pre-diagnosing `clang-tidy`-errors or `clang-format`-stuff inside their forked repositories. This functionality (clang-tidy and clang-format) is not added with this PR though and might come in the future.

- [ ] WIN: Add caching for vcpkg-dir
- [ ] WIN: Add `clcache` to build procedure (or extra issue)? [1]
- [ ] WIN: Look into `install prefix` on x64 target being `program files (x86)` => [Around this function](https://gitlab.kitware.com/cmake/cmake/blob/8065a686ddcb54b10fd6758eca24280f3e68926b/Modules/CMakeGenericSystem.cmake#L68-156) (thanks tu)
- [ ] MAC: Wait for the 2 GiB individual cache limit and cache brew+llvm, use brew again to install Qt
- [ ] Code Analysis: Get clang-tidy script to work and let it upload a fixes-patch as artifact
- [ ] Code Analysis: Get clang-format to work and let it upload a fixes-patch as artifact
- [ ] Lockfile: Use config for the same system as lockfile so config changes rebuild cache 
- [ ] File headers: Add header from copying.md to scripts

[1]: Set property to run with clcache, probably not working with *linking*
```
set_property(GLOBAL PROPERTY RULE_LAUNCH_COMPILE clcache)
set_property(GLOBAL PROPERTY RULE_LAUNCH_LINK clcache)
```
Might as well start an issue for this (I hope that's okay). 

Just downloaded it and started looking at the data files, and seems they have changed the graphics format again, now it is .smx files. Haven't gotten very far yet, just diffed a couple with dhex, and it seems like the header is now `53 4d 50 58 02 00`, so 'SMPX' followed by 0x2 0x0 (that seems to be constant). Then there's two int32s, it seems, that varies in different graphics for the same unit, so I assume it is frame numbers.


I'm not sure if they did this with AoE:DE, but now they actually have a `Tools_Build` folder with various tools for modding, including a tool (`DEAssetTool.exe`) for converting SLPs or PSDs to SM(P)X files, which will probably help a lot. A fun fact is that they also include AGE/genieutils, which I guess indicates that the .dat formats haven't changed (I don't see the source anywhere for it, so I assume they haven't modified it, it being GPL and all). :-)

They also seem to do the terrain blending and hill stuff in shaders (I think they did the same in AoE1:DE), and also the conversion from SMP to RGB.

But now it's getting late, just wanted to get this down somewhere.


List:

- [ ] Wwise audio formats for sounds
- [x] SMX/SMP for sprites
- [x] SMX/SMP damage masks
- [ ] DDS for terrain files
- [ ] Particle effects (JSON config files)
- [ ] A bunch of blend masks are now configured by JSON files too

#1185 