Hi!

According to #83 and #79 the end of the interval is included when splitting by period. I guess there should be a way in this library to cover not only the inclusive case but also the exclusive.

To cover the exclusive case I suggest one of the following:

1. Add `until` to [RichReadableInstant.scala](https://github.com/nscala-time/nscala-time/blob/master/src/main/scala/com/github/nscala_time/time/RichReadableInstant.scala#L33)
```scala
// RichReadableInstant.scala
// ...
def until(other: ReadableInstant): Interval = to(other).withEnd(other.toInstant.minus(1L))
// ...

// User's code
val inclusive = start to stop by 5.minutes
val exclusive = start until stop by 5.minutes
```
The problem here is that `interval contains interval.end` is `false`.

2. Add `exclusiveBy` to [RichInterval.scala](https://github.com/nscala-time/nscala-time/blob/master/src/main/scala/com/github/nscala_time/time/RichInterval.scala#L23)
```scala
// RichInterval.scala
// ...
def exclusiveBy(period: ReadablePeriod): List[DateTime] = by(period).dropRight(1)
// ...

// User's code
val inclusive = start to stop by 5.minutes
val exclusive = start to stop exclusiveBy 5.minutes
```

I will be glad to create a PR with one of the proposed or any other solutions.

Hi!

Recently I've seen something missing from this library, the ability to add a duration to a date time. I've written an extension class for this myself, but maybe something similar could be added to nscala-time? If you think that's cool, I could probably work in a PR to add this feature.

```scala
import scala.concurrent.duration.FiniteDuration

import org.joda.time.DateTime

object DateTimeSyntax {
  implicit class RichDateTime(dateTime: DateTime) {
    def minus(duration: FiniteDuration): DateTime = dateTime.minusMillis(duration.toMillis.toInt)
    def -(duration: FiniteDuration): DateTime     = minus(duration)
    def plus(duration: FiniteDuration): DateTime  = dateTime.plusMillis(duration.toMillis.toInt)
    def +(duration: FiniteDuration): DateTime     = plus(duration)
  }
}
```
Existing `toDateTime` in `RichLong` always uses default time zone which is not always what is desired. For using custom time zone it's necessary to do double call like `123.toDateTime.toDateTime(DateTimeZone.UTC)` which doesn't look nice.

So my request is to please add more toDateTime helper which also accept DateTimeZone.

code

``` scala
import com.github.nscala_time.time.Imports._
24.hour
24.hour.millis

1.day
1.day.millis
```

results:

```
import com.github.nscala_time.time.Imports._
res0: com.github.nscala_time.time.DurationBuilder = com.github.nscala_time.time.DurationBuilder@fef68c09
res1: Long = 86400000

res2: org.joda.time.Period = P1D
res3: Int = 0
```

At the moment ScalaJS allows to use either javascript Date class or java.util.Date classes. That is why for cross scala-scalajs libraries one has to use only terrible default java.util.Date class :-(
