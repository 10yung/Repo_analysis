What I did:
```
$ jo -- -s foo="null"
{"foo":""}
```

What I expected:
`{"foo":"null"}`

Inexplicably I want the word "null" to appear in my JSON. :)
`jq` in modern linuxes
`jsonfilter` in OpenWRT
\+ 100500 other tools (like Python pretty-printing)
I have to take a JSON object and use it as an escaped string property of another object.

```
~ ❯❯❯ foo=$(jo bar=baz)
~ ❯❯❯ echo $foo
{"bar":"baz"}
~ ❯❯❯ newFoo=$(echo $foo | sed 's/"/\\"/g')
~ ❯❯❯ echo $newFoo
{\"bar\":\"baz\"}
~ ❯❯❯ jo newFoo=$newFoo
{"newFoo":"{\\\"bar\\\":\\\"baz\\\"}"}
```
What I want:
```
{"newFoo":"{\"bar\":\"baz\"}"}
```

Simpler example:
``` 
❯❯❯ jo foo="{\"bar\":\"baz\"}"
{"foo":{"bar":"baz"}}
~ ❯❯❯ jo foo='{\"bar\":\"baz\"}'
{"foo":"{\\\"bar\\\":\\\"baz\\\"}"}
```

I've tried playing with type coercion and I can't seem to get that working either.
Trying the following test case with jo 1.1 from master branch:
`$ jo -p -d . parent.1st_obj.one=1 parent.1st_obj.two=2 parent.2nd_obj:=/tmp/2nd_obj.txt`

With the contents of `/tmp/2nd_obj.txt` being:
```
{"three":3, "four": 4}
```

The output returned is:
`$ jo -p -d . parent.1st_obj.one=1 parent.1st_obj.two=2 parent.2nd_obj:=/tmp/2nd_obj.txt`
```
{
   "parent": {
      "1st_obj": {
         "one": 1,
         "two": 2
      }
   },
   "parent.2nd_obj": {
      "three": 3,
      "four": 4
   }
}
```

Though I expected the following:
```
{
   "parent": {
      "1st_obj": {
         "one": 1,
         "two": 2
      },
      "2nd_obj": {
         "three": 3,
         "four": 4
      } 
   }
}
```

Is this a bug? Or I'm using it wrong?