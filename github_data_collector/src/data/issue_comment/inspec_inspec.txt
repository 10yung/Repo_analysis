Signed-off-by: Michael Lihs <michael.lihs@thoughtworks.com>

<!--- Provide a short summary of your changes in the Title above -->

## Description
Adds support to the `service` resource for yocto-based linux distributions.

## Related Issue

https://github.com/inspec/inspec/issues/4842

requires https://github.com/inspec/train/pull/558 to be merged in the `train` library.

## Types of changes
<!--- What types of changes does your code introduce? Put an `x` in all the boxes that apply: -->
- [ ] Bug fix (non-breaking change which fixes an issue)
- [x] New content (non-breaking change)
- [ ] Breaking change (a content change which would break existing functionality or processes)

## Checklist:
<!--- Go over all the following points, and put an `x` in all the boxes that apply. -->
<!--- If you're unsure about any of these, don't hesitate to ask. We're here to help! -->
- [x] I have read the **CONTRIBUTING** document.

Provide support for the `service` resource on Yocto-based linux systems.

## Detailed Description
When your target is a Yocto-based linux and you test for a service in your controls, e.g.

```ruby
describe service('docker') do
  it { should be_running }
end
```

you get the following output from inspec

```
↺  The `service` resource is not supported on your OS yet.
```

## Context
Service should be supported on Yocto based linux systems

## Possible Implementation
See Pull Request...

Signed-off-by: Mary Jinglewski <mjinglewski@chef.io>

## Description
With EOL for Windows 7 happening this month, related documentation needs updating.

## Types of changes
- [ ] Bug fix (non-breaking change which fixes an issue)
- [x] New content (non-breaking change)
- [ ] Breaking change (a content change which would break existing functionality or processes)

## Checklist:
- [x] I have read the **CONTRIBUTING** document.


<!--- Provide a general summary of the issue in the Title above -->

# Describe the problem
<!--- Briefly describe the issue and the expected behavior. -->
<!--- Also, please be aware of our [Code of Conduct](https://www.chef.io/code-of-conduct/). -->
I use InSpec 3.9.3.
This is quite simple, user resource can't get some information from all numeric user.
Following results are generated from same control, however only the result of all numeric user is failed.

```
     ✔  User oracle should exist
     ✔  User oracle uid should cmp == "2000"
     ✔  User oracle groups should cmp == ["oinstall", "dba"]
     ✔  User oracle home should cmp == "/home/oracle"
     ✔  User oracle shell should cmp == "/bin/bash"
     ✔  User 100101 should exist
     ✔  User 100101 uid should cmp == "2001"
     ✔  User 100101 groups should cmp == ["numeric"]
     ×  User 100101 home should cmp == "/home/100101"
     expected: "/home/100101"
          got: nil
     (compared using `cmp` matcher)
     ×  User 100101 shell should cmp == "/bin/bash"
     expected: "/bin/bash"
          got: nil
     (compared using `cmp` matcher) 
```

Ofcourse 100101 user has the values home directory and user shells.

```
# grep 100101 /etc/passwd
100101:x:2001:2001::/home/100101:/bin/bash
```
Are there any workarounds except upgrading InSpec?

Regards.

Following up on #4833. My tests are failing on Catalina because the groups are being reported differently... it shouldn't be system dependent. At the same time, I'm glad we caught this.
# DO NOT MERGE UNTIL RELATED PRs ARE MERGED AND THIS PR IS UPDATED

## Description
This changes makes the neccessary changes to enable the pkg to pass apples notarization requirements.

1. Update omnibus and omnibus-software to versions that support deep signing
2. Drop 'Developer ID Installer:' from signing key. This lets sigining pick up the correct key for what is being signed.
3. Update inspec software definition to delete test dir from rubyzip gem because its fixtures contain zip files that the notarization service cannot inspect.

Signed-off-by: Jon Morrow <jmorrow@chef.io>

## Related Issue
https://github.com/chef/omnibus/pull/924
https://github.com/chef/omnibus-software/pull/1146

## Types of changes
<!--- What types of changes does your code introduce? Put an `x` in all the boxes that apply: -->
- [ ] Bug fix (non-breaking change which fixes an issue)
- [ ] New content (non-breaking change)
- [ ] Breaking change (a content change which would break existing functionality or processes)

## Checklist:
<!--- Go over all the following points, and put an `x` in all the boxes that apply. -->
<!--- If you're unsure about any of these, don't hesitate to ask. We're here to help! -->
- [ ] I have read the **CONTRIBUTING** document.

See https://discourse.chef.io/t/how-to-prevent-tests-to-be-cached-on-remote-targets/16517/5

If a user wants to use the `--no-backend-cache` option to ensure repeated tests get live results, it does not work with some resources. e.g. the `service` resource will [cache results itself](https://github.com/inspec/inspec/blob/master/lib/inspec/resources/service.rb#L181)

I think in general, resources should not try to cache, and should leave it up to the backend - even if it does waste some compute resource.

<!--- Provide a general summary of the requested feature in the Title above. -->
<!--- Also, please be aware of our [Code of Conduct](https://www.chef.io/code-of-conduct/). -->

## Detailed Description
Currently Inspec 3 fails to read last repository from YUM using the Inspec yum resource. In Inspec 4 a fix has been merged, which should be backmerged to Inspec 3.

## Context
Testing YUM repositories fail on CentOS 8 with Inspec 3.

## Possible Implementation
Backmerge the Fix from master (Inspec 4) to Inspec 3 as described in #4568.
