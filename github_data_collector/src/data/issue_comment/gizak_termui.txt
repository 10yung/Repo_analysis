Hi guys,

Hope you are all well !

I tried to find some documentation but could not find it. How to migrate legacy termui integration to v3...

```bash
./dashboard.go:18:15: undefined: termui.NewList
./dashboard.go:24:26: undefined: termui.NewPar
./dashboard.go:30:27: undefined: termui.NewPar
./dashboard.go:36:23: undefined: termui.NewPar
./dashboard.go:42:25: undefined: termui.NewPar
./dashboard.go:48:21: undefined: termui.NewPar
./dashboard.go:54:24: undefined: termui.NewPar
./dashboard.go:60:20: undefined: termui.NewPar
./dashboard.go:66:17: undefined: termui.NewPar
./dashboard.go:120:17: undefined: termui.Body
```

What is replacing ?
termui.NewList()
termui.NewPar()
termui.Body

here is the code:
```go
package main

import (
	"fmt"
	"time"

	"github.com/gizak/termui/v3"
)

func dashboard(stopTheUI, stopTheCrawler chan bool) {
	if err := termui.Init(); err != nil {
		panic(err)
	}
	defer termui.Close()

	var snapshots []Snapshot

	logWindow := termui.NewList()
	logWindow.ItemFgColor = termui.ColorYellow
	logWindow.BorderLabel = "Log"
	logWindow.Height = 22
	logWindow.Y = 0

	totalBytesDownloaded := termui.NewPar("")
	totalBytesDownloaded.Height = 3
	totalBytesDownloaded.TextFgColor = termui.ColorWhite
	totalBytesDownloaded.BorderLabel = "Data downloaded"
	totalBytesDownloaded.BorderFg = termui.ColorCyan

	totalNumberOfRequests := termui.NewPar("")
	totalNumberOfRequests.Height = 3
	totalNumberOfRequests.TextFgColor = termui.ColorWhite
	totalNumberOfRequests.BorderLabel = "URLs crawled"
	totalNumberOfRequests.BorderFg = termui.ColorCyan

	requestsPerSecond := termui.NewPar("")
	requestsPerSecond.Height = 3
	requestsPerSecond.TextFgColor = termui.ColorWhite
	requestsPerSecond.BorderLabel = "URLs/second"
	requestsPerSecond.BorderFg = termui.ColorCyan

	averageResponseTime := termui.NewPar("")
	averageResponseTime.Height = 3
	averageResponseTime.TextFgColor = termui.ColorWhite
	averageResponseTime.BorderLabel = "Average response time"
	averageResponseTime.BorderFg = termui.ColorCyan

	numberOfWorkers := termui.NewPar("")
	numberOfWorkers.Height = 3
	numberOfWorkers.TextFgColor = termui.ColorWhite
	numberOfWorkers.BorderLabel = "Number of workers"
	numberOfWorkers.BorderFg = termui.ColorCyan

	averageSizeInBytes := termui.NewPar("")
	averageSizeInBytes.Height = 3
	averageSizeInBytes.TextFgColor = termui.ColorWhite
	averageSizeInBytes.BorderLabel = "Average response size"
	averageSizeInBytes.BorderFg = termui.ColorCyan

	numberOfErrors := termui.NewPar("")
	numberOfErrors.Height = 3
	numberOfErrors.TextFgColor = termui.ColorWhite
	numberOfErrors.BorderLabel = "Number of 4xx errors"
	numberOfErrors.BorderFg = termui.ColorCyan

	elapsedTime := termui.NewPar("")
	elapsedTime.Height = 3
	elapsedTime.TextFgColor = termui.ColorWhite
	elapsedTime.BorderLabel = "Elapsed time"
	elapsedTime.BorderFg = termui.ColorCyan

	draw := func() {

		snapshot := stats.LastSnapshot()

		// ignore empty updates
		if snapshot.Timestamp().IsZero() {
			return
		}

		// don't update if there is no new snapshot available
		if len(snapshots) > 0 {
			previousSnapShot := snapshots[len(snapshots)-1]
			if snapshot.Timestamp() == previousSnapShot.Timestamp() {
				return
			}
		}

		// capture the latest snapshot
		snapshots = append(snapshots, snapshot)

		// log messages
		logWindow.Items = stats.LastLogMessages(20)

		// total number of requests
		totalNumberOfRequests.Text = fmt.Sprintf("%d", snapshot.TotalNumberOfRequests())

		// total number of bytes downloaded
		totalBytesDownloaded.Text = formatBytes(snapshot.TotalSizeInBytes())

		// requests per second
		requestsPerSecond.Text = fmt.Sprintf("%.1f", snapshot.RequestsPerSecond())

		// average response time
		averageResponseTime.Text = fmt.Sprintf("%s", snapshot.AverageResponseTime())

		// number of workers
		numberOfWorkers.Text = fmt.Sprintf("%d", snapshot.NumberOfWorkers())

		// average request size
		averageSizeInBytes.Text = formatBytes(snapshot.AverageSizeInBytes())

		// number of errors
		numberOfErrors.Text = fmt.Sprintf("%d", snapshot.NumberOfErrors())

		// time since first snapshot
		timeSinceStart := time.Now().Sub(snapshots[0].Timestamp())
		elapsedTime.Text = fmt.Sprintf("%s", timeSinceStart)

		termui.Render(termui.Body)
	}

	termui.Body.AddRows(
		termui.NewRow(
			termui.NewCol(12, 0, logWindow),
		),
		termui.NewRow(
			termui.NewCol(3, 0, totalBytesDownloaded),
			termui.NewCol(3, 0, totalNumberOfRequests),
			termui.NewCol(3, 0, requestsPerSecond),
			termui.NewCol(3, 0, averageResponseTime),
		),
		termui.NewRow(
			termui.NewCol(3, 0, numberOfWorkers),
			termui.NewCol(3, 0, numberOfErrors),
			termui.NewCol(3, 0, averageSizeInBytes),
			termui.NewCol(3, 0, elapsedTime),
		),
	)

	termui.Body.Align()

	termui.Render(termui.Body)

	termui.Handle("/sys/wnd/resize", func(e termui.Event) {
		termui.Body.Width = termui.TermWidth()
		termui.Body.Align()
		termui.Clear()
		termui.Render(termui.Body)
	})

	termui.Handle("/sys/kbd/q", func(termui.Event) {
		stopTheCrawler <- true

		termui.StopLoop()
	})

	termui.Handle("/timer/1s", func(e termui.Event) {
		draw()
	})

	// stop when the crawler is done
	go func() {
		select {
		case <-stopTheUI:
			// wait 10 seconds before closing the ui
			time.Sleep(time.Second * 10)
			termui.StopLoop()
		}
	}()

	termui.Loop()
}
```

Cheers,
X

What's the reason that text displayed in termui can't be selected with the mouse for copy-and-paste? The curses library supports it, tools like "top" allow the user to select text and copy it.

![image](https://user-images.githubusercontent.com/60705/72027712-de732e00-3234-11ea-853a-385d7aefe7cd.png)

This seems to be related to https://github.com/gizak/termui/issues/67, which claims it only happens after a while, but I've found it happens right from the start, even with a simple hello world program on both Mac and Linux.

Would be great if you could add some hints on why this is, this would be a great thing to have for termui (and downstream projects like termdash), as almost all users expect this to work in a terminal UI.


As shown in the table demo, there is a method to remove row separators:
```
ui.Render(primary)

table2 := widgets.NewTable()
table2.Rows = [][]string{
    []string{"header1", "header2", "header3"},
    []string{"Foundations", "Go-lang is so cool", "Im working on Ruby"},
    []string{"2016", "11", "11"},
}
table2.TextStyle = ui.NewStyle(ui.ColorWhite)
table2.TextAlignment = ui.AlignCenter
table2.RowSeparator = false
table2.SetRect(0, 10, 20, 20)

ui.Render(table2)
```

The table widget seems very promising to display things as a grid (for example I am attempting to make my own terminal based battleship). Only not having the option to hide column separators makes it impossible to do so...
Not sure if this is by design or a bug. When using text with tabs in it (`\t`), the tabs are removed.

In my use case, I am loading go source files into a paragraph widget, and all indentation is lost.

If it is by design - shouldn't they at least be replaced by 1, 2, 4 or 8 spaces? Seems to me like any of these will be a better default behavior than removing them, unless there is a particular issue that removing them solves.

### Reproduction code

```go
package main

import (
	ui "github.com/gizak/termui/v3"
	"github.com/gizak/termui/v3/widgets"
)

func main() {
	if err := ui.Init(); err != nil {
		panic(err)
	}
	defer ui.Close()

	ui.Theme.Paragraph.Text.Fg = ui.ColorClear
	ui.Theme.Block.Border.Fg = ui.ColorClear
	ui.Theme.Block.Title.Fg = ui.ColorClear
	
	p := widgets.NewParagraph()
	p.Text = "tabs\tare\tignored\ntest"
	p.SetRect(0, 0, 40, 5)

	ui.Render(p)

	for e := range ui.PollEvents() {
		if e.Type == ui.KeyboardEvent {
			break
		}
	}
}
```

### Actual output

```
┌──────────────────────────────────────┐
│tabsareignored                        │
│test                                  │
│                                      │
└──────────────────────────────────────┘
```

### Expected output

```
┌──────────────────────────────────────┐
│tabs    are    ignored                │
│test                                  │
│                                      │
└──────────────────────────────────────┘
```

Right now, when working with light terminal background, there are quite a few places that need to be overridden from `ColorWhite` to `ColorClear` (or some other color that is readable on white background).

Not only this makes development and experimentation a little lengthier, I suspect it also causes developers who publish packages that rely on termui to have a default theme that is not friendly to light background users.

I believe that if `ColorClear` is used as the default color, and both `ColorBlack` and `ColorWhite` are avoided in all the defaults, this will be a good starting point for everybody, and will provide a sensible theme that works out of the box for both dark and light background users.



No matter what order I put in for `Rows` in `widgets.List`, the color wouldn't work for the first items. The first item would display normally, but in the default white color even if I put something like 
```
"[text](fg:green)"
```

Option to hide table column seperator
If a bar chart's values are all zero, the program tries to allocate all available memory and crashes.
For mouse support in list widget need export TopRow for calculate SelectedRow under mouse cursor.
