Hello,

Notification enabled for hashicorp/consul-template about release (see joined file) but nothing received...
![github com_hashicorp_consul-template_releases](https://user-images.githubusercontent.com/10907233/72101947-245bef00-3326-11ea-86be-36783ab4ad11.png)

hashicorp/terraform notifications about releases works, what's wrong with hashicorp/consul-template ?

Regards
This PR aims to introduce a new configuration value, allowing custom block query timeout. I would appreciate feedback on this as I'm not sure if I have covered all the necessary bases.

Closes https://github.com/hashicorp/consul-template/issues/1096
When working on consul-template I find myself switching between log levels quite a bit and having to keep editing scripts or commands. If it supported an environment variable for setting the log-level it would make this much easier.

The cli argument should override the environment variables.

My initial proposed variable name is `CONSULT_TEMPLATE_LOG_LEVEL`, though that is a bit long. 
this will compute the sha256 hash function and output the hex version
of it.

tests and doc updated.

how to use:

```liquide
{{ "bladibla" | sha256Hex }}
```

this will output 

```
54cf4c66bcabb5c20e25331c01dd600b73369e97a947861bd8d3a0e0b8b3d70b
```

This can be handy when, for instance, computing the amount of services to spawn depending on some numeral characteristics contained in consul and default values

Add support for Consul namespaces following the same pattern as for
Vault namespaces.

Depends on code in consul's master branch (unreleased). So won't build unless you update the modules dependencies to the correct master commit. Once the upstream code is released, the module dependencies will be updated and added to this PR.
How about adding some string functions such as hasPrefix, hasSuffix, regexp.Match?
EDIT: Oh I see there's regexp.Match() which should cover all other cases.
But maybe it's still worth to add these simple ones as most programming languages have them without regexes..?
### Consul Template version

`consul-template v0.23.0 (5cf9d687)`

### `cfg1.tpl` (working)

```liquid
{{ define "some-json" }}
{
    "ds": {
        "meta-data": {
            "local-ipv4": "127.0.0.1"
        }
    }
}
{{ end }}

{{- $id := executeTemplate "some-json" | parseJSON -}}

{{- index (index $id.ds "meta-data") "local-ipv4" -}}
```

`consul-template -dry -once -template=cfg1.tpl` works as expected, returning `127.0.0.1`.

### Configuration 2 (fails)

`consul-template -dry -once -template=cfg2.tpl` fails with:

```
2019/11/15 11:44:37.457560 [ERR] (cli) cfg2.tpl: execute: template: :2:10: executing "" at <index $id.ds "meta-data">: error calling index: index of untyped nil
```

#### `cfg2.tpl`

```liquid
{{ $id := file "instance-data.json" | parseJSON }}
{{ index (index $id.ds "meta-data") "local-ipv4" }}
```

#### `instance-data.json`

(same as `some-json` template above)

```json
{
    "ds": {
        "meta-data": {
            "local-ipv4": "127.0.0.1"
        }
    }
}
```

### Configuration 3 (fails)

`consul-template -dry -once -template=cfg3.tpl` fails with:

```
2019/11/15 11:39:57.817484 [ERR] (cli) cfg3.tpl: execute: template: :7:11: executing "" at <index $id.ds "meta-data">: error calling index: index of untyped nil
```

#### `cfg3.tpl`

```liquid
{{ define "file-json" -}}
{{ file "instance-data.json" }}
{{- end }}

{{- $id := executeTemplate "file-json" | parseJSON -}}

{{- index (index $id.ds "meta-data") "local-ipv4" -}}
```

#### `instance-data.json`

As above.

### Expected behavior

Should have gotten same output regardless of source of JSON.

### Actual behavior

Ability to access JSON-parsed map structure is dependent upon source of JSON.

This is a proof of concept PR that includes the helper functions from the [Sprig](https://github.com/Masterminds/sprig) library.  Because there are some name conflicts, the sprig functions are renamed `«function»_sprig` in cases where there is an existing consul-template function.
Consul is growing namespaces (like Vault already has). This is a placeholder for adding support for it to consul-template. I'll edit it with more details once I have them.