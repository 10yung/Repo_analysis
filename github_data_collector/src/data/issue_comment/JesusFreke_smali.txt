com.sun.tools.jdi.StringReferenceImpl cannot be cast to com.sun.jdi.ArrayReference
java.lang.ClassCastException: com.sun.tools.jdi.StringReferenceImpl cannot be cast to com.sun.jdi.ArrayReference
	at org.jf.smalidea.debugging.value.LazyArrayReference.length(LazyArrayReference.java:61)
	at com.intellij.debugger.ui.tree.render.ClassRenderer.a(ClassRenderer.java:257)
	at com.intellij.debugger.ui.tree.render.ClassRenderer.isExpandable(ClassRenderer.java:274)
	at com.intellij.debugger.ui.impl.watch.ValueDescriptorImpl.calcRepresentation(ValueDescriptorImpl.java:283)
	at com.intellij.debugger.ui.impl.watch.NodeDescriptorImpl.updateRepresentationNoNotify(NodeDescriptorImpl.java:85)
	at com.intellij.debugger.ui.impl.watch.NodeDescriptorImpl.updateRepresentation(NodeDescriptorImpl.java:77)
	at com.intellij.debugger.engine.JavaValue$1.contextAction(JavaValue.java:165)
	at com.intellij.debugger.engine.events.SuspendContextCommandImpl.action(SuspendContextCommandImpl.java:73)
	at com.intellij.debugger.engine.events.DebuggerCommandImpl.run(DebuggerCommandImpl.java:47)
	at com.intellij.debugger.engine.DebuggerManagerThreadImpl.processEvent(DebuggerManagerThreadImpl.java:147)
	at com.intellij.debugger.engine.DebuggerManagerThreadImpl.processEvent(DebuggerManagerThreadImpl.java:43)
	at com.intellij.debugger.impl.InvokeThread.a(InvokeThread.java:155)
	at com.intellij.debugger.impl.InvokeThread.access$100(InvokeThread.java:32)
	at com.intellij.debugger.impl.InvokeThread$WorkerThreadRequest.run(InvokeThread.java:61)
	at com.intellij.openapi.application.impl.ApplicationImpl$1.run(ApplicationImpl.java:315)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
	at java.lang.Thread.run(Thread.java:745)
To let DexBackedDexFile be able to read in DEX file using MappedByteBuffer.
there is no reason why this rewriter should be hard-coded in DexRewriter.

impact: if you want to filter or add classes in a RewriterModule, you cannot.

i know you have chosen to hard-code collection rewriters, but i can still get to them by rewriting the collection owner object. except in the case of DexFile: DexFile is a type that owns a collection and still cannot be rewritten. this breaks symmetry and makes a RewriterModule not capable of some rewrites. the dexlib2 client then needs to resort to custom code.

easy fix, but breaks backwards compatibility of Rewriters interface.

if you are tempted to do the change and break compat, i say go for it.
hi @JesusFreke,

i'm trying to hook existing calls to instance constructors and replace them with calls to static methods that return a newly constructed instance of the right type of object.

the problem is: when new-instance is executed, the arguments to the constructor call are not known, so i can't call the hook method there. and when the call to `<init>` is executed, the constructor arguments are known and i can call the hook. but the pointer to the supposed new object has already been accessible to the rest of the code since new-instance executed. can code use it in any way before `<init>`?

it seems i have 2 options:
1. replace `new-instance v0,xxx` with `const v0,#1` so that if v0 is used by interleaving code it will trigger a verification error. and then replace the call to `<init>` with the call to the hook, which will return the real value for v0.
2. or just give up and simply provide an "after constructor" hook, which will get an already constructed object and hopefully can modify it. but it can't modify the constructor call itself.

so my question is: would option 1 work? what can happen to the pointer returned by new-instance before the constructor is called? can anything actually happen to it? it seems that even allowing a store of the pointer is unsafe: what happens if an exception is thrown after the store but before `<init>` succeeds? an uninitialized object would be reachable in the heap, which is unacceptable.

what is your opinion on option 1?

thank you very much!
though not a bug, i think this line:

https://github.com/JesusFreke/smali/blob/bf65e575a0fd7f03c41aa56d7a49bf0cda1da06a/dexlib2/src/main/java/org/jf/dexlib2/rewriter/EncodedValueRewriter.java#L127

would be 'more correct' like this:
```
return RewriterUtils.rewriteList(rewriters.getEncodedValueRewriter(), arrayEncodedValue.getValue());
```

the expectation is that rewriters delegate to the module, not to themselves just because they happen to match the needed type of rewriter.
@JesusFreke,

re: https://github.com/JesusFreke/smali/commit/586ec594e2efd35dfe8d31cc221208fc886851dd

why backticks? are backticks not allowed in dex bytecode names?

they are certainly valid in jvm type names. if backticks are allowed in dex bytecode, then this commit is breaking compatibility with old smali files. if true this would it be very bad and IMHO should be fixed ASAP before the new format gains any traction.

the characters that cannot be part of JVM names ever are `;` and `[` (see JVM spec, class file format, names). to retain compatibility with old smali they could be put to use, and better for escaping than quoting, maybe like this:
- `com.example.My[20]Crap`
- or `[u20]` or `[u0020]`
- or `[space]` or `[s]`
- or even `[ ]` (but that complicates some parser implementations and i recommend against it)

 (btw, backticks are a bit impractical because they are a deadkeys on most international keyboard layouts, a thing english users tend to overlook.)
@JesusFreke,

It looks like this sample code:

https://github.com/JesusFreke/smali/blob/bf65e575a0fd7f03c41aa56d7a49bf0cda1da06a/dexlib2/src/main/java/org/jf/dexlib2/rewriter/DexRewriter.java#L58-L60

does not map arrays of `MyBlah`.

is this true? or does dexlib2 dig down array types to get to the base type before invoking the type rewriter? thanks!
It seem that there is no way to inspect v0, v1,... or p1, p2,... inside intelij unless the method parameters were explained with `.param` or the locals were explained with `.local`?
When I key in p1 into the watch window, intelij evaluate to "Internal error" which is correct because p1 is not a variable name, it's the virtual variable understood by smali compiler only.

Any way to inspect these? It seems that even jdb won't show these local variables without `.local` added to the source code.
this line:

https://github.com/JesusFreke/smali/blob/bf65e575a0fd7f03c41aa56d7a49bf0cda1da06a/dexlib2/src/main/java/org/jf/dexlib2/rewriter/InstructionRewriter.java#L84

should really be:

```
switch (instruction.getReferenceType()) {
```

in case someone overrides getReferenceType().
java.lang.NullPointerException
	at org.jf.smalidea.debugging.value.LazyObjectReference.disableCollection(LazyObjectReference.java:48)
	at com.intellij.debugger.impl.DebuggerUtilsEx.disableCollection(DebuggerUtilsEx.java:1071)
	at com.intellij.debugger.engine.SuspendContextImpl.keep(SuspendContextImpl.java:191)
	at com.intellij.debugger.impl.DebuggerUtilsEx.keep(DebuggerUtilsEx.java:437)
	at com.intellij.debugger.ui.impl.watch.EvaluationDescriptor.calcValue(EvaluationDescriptor.java:90)
	at com.intellij.debugger.ui.impl.watch.ValueDescriptorImpl.setContext(ValueDescriptorImpl.java:186)
	at com.intellij.debugger.engine.JavaDebuggerEvaluator$1.threadAction(JavaDebuggerEvaluator.java:87)
	at com.intellij.debugger.engine.events.DebuggerContextCommandImpl.contextAction(DebuggerContextCommandImpl.java:83)
	at com.intellij.debugger.engine.events.SuspendContextCommandImpl.action(SuspendContextCommandImpl.java:73)
	at com.intellij.debugger.engine.events.DebuggerCommandImpl.run(DebuggerCommandImpl.java:33)
	at com.intellij.debugger.engine.DebuggerManagerThreadImpl.processEvent(DebuggerManagerThreadImpl.java:147)
	at com.intellij.debugger.engine.DebuggerManagerThreadImpl.processEvent(DebuggerManagerThreadImpl.java:43)
	at com.intellij.debugger.impl.InvokeThread.run(InvokeThread.java:141)
	at com.intellij.debugger.impl.InvokeThread.access$100(InvokeThread.java:18)
	at com.intellij.debugger.impl.InvokeThread$WorkerThreadRequest.run(InvokeThread.java:47)
	at com.intellij.openapi.application.impl.ApplicationImpl$1.run(ApplicationImpl.java:305)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
	at java.lang.Thread.run(Thread.java:745)