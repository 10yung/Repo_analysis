
Project looks like dead and poor documented. Is there alternatives?
Hi, I admire your work, and these are some suggestions:
1- Add "Const" as another name to "Then"
2- Add another overload to AnyOf that accepts Char Array, because it's more friendly. 
```
 public VerbalExpressions AnyOf(char[] value, bool sanitize = true)
        {
            if (value == null)
                throw new ArgumentNullException("value");

            return AnyOf(string.Join ("", value));
        }

```
3-	Range Method can be more friendly like this:
Range(char start, char end);
Range(int start, int end);

4- A Repeat(string Valuem, int min, int max) will be useful , and A Repeat(VerbalExpressions expr, int min, int max ) will be more friendly than BeginCapture/EndCapture/RepeatPrevious, besides RepeatPrevious(int min, int max) 

5- Need some methods without parameters such as Letter(), UpperCaseLetter(), LowerCaseLetter(), Digit(), Boundry()  and other famous formulas.

6- All Repetition methods needs optional param. for laziness.

5- Where Are LookAhead(), LookBehind( ), Atomic(VerbalExpressions Exp1)?

7- Add If(VerbalExpressions expr, VerbalExpressions expr1, VerbalExpressions expr2) to imo;ement regex conditions.




I have changes the csproj into xproj.

I have also added the double dll's in nuget package, so there is a net4 and new netstandard

Make a Verbal Expression wizard, that helps you visually create and test the expressions validations and captures.

Sorry for wasting your time and mine. I didn't read the code, and thought you don't have this.
Also misunderstood how this works. - I thought it was an alternative to regex, now I understand that its a regex builder. (Is the reverse being considered?)

Looked at the tests and saw the capture syntax which is much better than mine (BeginCapture, EndCapture). 

---

My original comment: 

Matching syntax for getting lists of text
- Saved groups: .MatchBy  
- Grouping: Non saving groups: .MatchFor .
-  Dependency: And. Or 
- .AllThat  .FirstThat   .LastThat .AnyThat 
- .Is  .IsNot .IsLike (wildcard syntax) .HasFormat (String.Format() syntax)
- .HasDate(  DateFormat DateSeperator )  HasTime, HasDateAndTime 
-  .Until (inclusive), Before (non inclusive until) , After (starts after the found text)
- .HasUnicode  .HasAscii  .Has (calls delegate with params)
  
  '''C#
   [TestMethod]  
      public void TestingIfWeHaveAValidURL()  
      {  
          // Create an example of how to find the params in a RESTful url  
          var verbEx = new VerbalExpressions()  
                      .MatchFor( name:"param code", () => {
                          .AnyThat( afterOccurence: 1) // all matches after 1st param found by next match  
                           // this is the way to get parenthesis around a group of rules  
                           .MatchFor(  name: "param name", () =>  {
                                  .After("?").Or.After(";") 
                                   MatchBy( name: "param name", () => {  
                                         .Anything.Before("=")  
                                    });  
                              });  
                             .And.MatchFor( name: "param val", ()=>{  
                                   .After( matchFor: "param name")
                                   //.Maybe(Environment.Quotemark)
                                   .MatchBy(name: "param val", ()=>{  
                                             .Until.
                                              //Maybe(Environment.Quotemark)
                                              .Then(";").Or.EndOfLine;
                                    });  
                              });    
  
  ```
      // Create an example URL
      var testMe = "https://www.google.com?param1=val1;&param2=val2";
      var matches = verbEx.Match( testMe );
      Assert.IsGreaterThan( matches.Count, 0, "The URL has no parameters");
  
      Console.WriteLine("We have a correct URL ");
  }
  ```
  
  '''

Like the look of this lib but was wondering how I could produce something like this:

`/(?<age>[\d]{1,2})`

That way I can use it in a Nancy route definition like so:

```
Get["/(?<age>[\d]{1,2})"] = parameters => {"Hello World"};
```

When you have an `AnythingBut` followed by a `Maybe` assuming the value of `Maybe` isn't the value of `AnythingBut` then the `Maybe` should be ignored.

For instance the two following are semantically the same:

```
var verbEx = VerbalExpressions.DefaultExpression
    .StartOfLine()
    .Then( "http" )
    .Maybe( "s" )
    .Then( "://" )
    .Maybe( "www." )
    .AnythingBut( " " )
    .EndOfLine();
```

Â 

```
var verbEx = VerbalExpressions.DefaultExpression
    .StartOfLine()
    .Then( "http" )
    .Maybe( "s" )
    .Then( "://" )
    .Maybe( "www." )
    .AnythingBut( " " )
            .Maybe("/")
    .EndOfLine();
```

Both of the above should output `^(http)(s)?(://)(www\.)?([^\ ]*)$` because the `AnythingBut` is greedy and will capture whatever is in the `Maybe`. 

When using the `.Range` method with range arrays greater than 3, it causes invalid Regex to be output. An example can be seen with the following snippet taken from a Unit test and modified:

```
var verbEx = VerbalExpressions.DefaultExpression;
object[] range = new object[4] { 1, 6, 7, 12 };
verbEx.Range(range);
```

That expression outputs `[1-126-7]` which is obviously invalid regex. Not sure what is supposed to happen here? Maybe throw an `ArgumentException`?

Hi all,
I ran the following test to check how well verbal expression performs compared to a regular expression:

```
    [Test]
    public void TestingIfWeHaveAValidURL()
    {
        var testMe = "https://www.google.com";

        var swVerb = new Stopwatch();
        swVerb.Start();
        verbEx = VerbalExpressions.DefaultExpression
                    .StartOfLine()
                    .Then("http")
                    .Maybe("s")
                    .Then("://")
                    .Maybe("www.")
                    .AnythingBut(" ")
                    .EndOfLine();


        Assert.IsTrue(verbEx.Test(testMe), "The URL is incorrect");
        swVerb.Stop();

        var swRegex = new Stopwatch();
        swRegex.Start();
        var regex = new Regex( @"^http(s)?://([\w-]+.)+[\w-]+(/[\w- ./?%&=])?$" );
        Assert.IsTrue( regex.IsMatch( testMe ) );
        swRegex.Stop();
        //Verb: 133 ms Regex: 4 ms
        Console.WriteLine("Verb: {0}   Regex: {1}", swVerb.ElapsedMilliseconds, swRegex.ElapsedMilliseconds);
    }
```

I ran it a couple of times and verbal expression runs at about 130 milliseconds, while regular expression runs in about 5 ms.

Same results returned in other tests I did.
I'm considering using the verbal expression in my indexing project, so this time gap is too big.
What do you think?

Thanks
