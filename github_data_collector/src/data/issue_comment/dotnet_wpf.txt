Issue to pickup any documentation changes needed for the newly added APIs added to XamlReader as part of #2424, #2425.

// cc: @gomathip02 
* .NET Core Version: 4.8
* Windows version: 10
* Does the bug reproduce also in WPF for .NET Framework 4.8?: Yes
* Is this bug related specifically to tooling in Visual Studio (e.g. XAML Designer, Code editing, etc...)? If yes, please file the issue via the instructions [here](https://docs.microsoft.com/visualstudio/ide/how-to-report-a-problem-with-visual-studio?view=vs-2019).
* Security issues and bugs should be reported privately, learn more via our [responsible disclosure guidelines](https://github.com/dotnet/wpf/blob/master/README.md#reporting-security-issues-and-security-bugs).

 <!-- Read https://github.com/dotnet/wpf/blob/master/Documentation/issue-guide.md -->
 
 **Problem description:** Create WPF TopMost Window in double touchscreen （duplicated screen） condition，switch one of the screen video source，another screen lost touch。it's about 30% ratio。
 
 **Actual behavior:** <!-- callstack for crashes / exceptions --> 
 
 **Expected behavior:**no touch lost
 
 **Minimal repro:**

In .Net Framework, I can declare an Int32 resource with xaml namespace such as:
```xaml
xmlns:sys="clr-namespace:System;assembly=mscorlib"
```

But in netcoreapp, it need another xaml namespace such as:
```xaml
xmlns:sys="clr-namespace:System;assembly=System.Runtime"
```
Since the namespace "http://schemas.microsoft.com/winfx/2009/xaml" is not supported in WPF, is there any way to do that?

* .NET Core Version: (e.g. 3.0 Preview1, or daily build number, use `dotnet --info`)
Version:   3.1.101
* Windows version: (`winver`)
Verson 1903 Build 18362.592
* Does the bug reproduce also in WPF for .NET Framework 4.8?: Yes/No
Yes
* Is this bug related specifically to tooling in Visual Studio (e.g. XAML Designer, Code editing, etc...)?
No
 If yes, please file the issue via the instructions [here](https://docs.microsoft.com/visualstudio/ide/how-to-report-a-problem-with-visual-studio?view=vs-2019).
* Security issues and bugs should be reported privately, learn more via our [responsible disclosure guidelines](https://github.com/dotnet/wpf/blob/master/README.md#reporting-security-issues-and-security-bugs).

 <!-- Read https://github.com/dotnet/wpf/blob/master/Documentation/issue-guide.md -->
 
 **Problem description:**
 When main window style is `WindowStyle="None"`, a thick bar appears at the top of the window

 **Actual behavior:** <!-- callstack for crashes / exceptions -->

![image](https://user-images.githubusercontent.com/567927/72442531-50d29980-3772-11ea-8a4d-8bd544953301.png)
 
 **Expected behavior:**
 
No bar appears at the top.

I've seen workarounds for this issue on Stackoverflow that recommend setting `AllowsTransparancy="True"` but this also disables window sizing using the borders. 

 **Minimal repro:**

Create a new WPF app in Visual Studio and set `WindowStyle="NONE"`.

```
<Window
  x:Class="WpfAppNoWindowStyleFramework.MainWindow"
  xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
  xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
  xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
  xmlns:local="clr-namespace:WpfAppNoWindowStyleFramework"
  xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
  Title="MainWindow"
  WindowStyle="None"
  mc:Ignorable="d">
  <Grid>
    <TextBlock>Hello World</TextBlock>
  </Grid>
</Window>
```
This pull request updates the following dependencies

[marker]: <> (Begin:256c8be3-de58-46f5-d219-08d6ba11f126)
## From https://github.com/dotnet/winforms
- **Subscription**: 256c8be3-de58-46f5-d219-08d6ba11f126
- **Build**: 20200118.1
- **Date Produced**: 1/18/2020 1:29 PM
- **Commit**: 35533cbc44412dd7bbee288b7a888b1c797056e6
- **Branch**: refs/heads/master
- **Updates**:
  - **Microsoft.Private.Winforms** -> 5.0.0-alpha1.20068.1

[marker]: <> (End:256c8be3-de58-46f5-d219-08d6ba11f126)




























In .NET Framework 4.8 (and possibel on Core) when you drag a Thumb and handle the OnThumbDragCompleted event, the DragCompletedEventArgs.VerticalChange doesn't take DPI into account.

You need to divide the VerticalChange by the DPI factor to get the correct value.

There are reports on the internet about this issue, so I decided to log a bug:
https://social.msdn.microsoft.com/Forums/en-US/59e7ece9-e073-430a-8e12-307718077671/thumb-dragcompletedeventargshorizontalchange-not-scaling-to-screen-dpi?forum=wpf

My workaround is: 

```
        public static (double dpiX, double dpiY) GetDPI(Visual visual)
        {
            var source = PresentationSource.FromVisual(visual);
            var transformToDevice = source.CompositionTarget.TransformToDevice;
            double dpiX = transformToDevice.M11;
            double dpiY = transformToDevice.M22;
            return (dpiX, dpiY);
        }

        void OnThumbDragCompleted(object sender, DragCompletedEventArgs args)
        {
            // it appears that the DragCompletedEventArgs.VerticalChange doesn't take DPI into account, so work around that.
            double verticalChange = args.VerticalChange / dpiY;
```

# Microsoft Security Advisory CVE-2020-0606 : .NET Core Remote Code Execution Vulnerability

## <a name="executive-summary"></a>Executive summary

Microsoft is releasing this security advisory to provide information about a vulnerability in .NET Core. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.

Microsoft is aware of a remote code execution vulnerability exists in .NET software when the software fails to check the source markup of a file. An attacker who successfully exploited the vulnerability could run arbitrary code in the context of the current user.

Exploitation of the vulnerability requires that a user open a specially crafted file with an affected version of .NET Core. In an email attack scenario, an attacker could exploit the vulnerability by sending the specially crafted file to the user and convincing the user to open the file.

The security update addresses the vulnerability by correcting how .NET Core checks the source markup of a file.

## Announcement

The original announcement for this issue can be found at https://github.com/dotnet/announcements/issues/149

## <a name="mitigation-factors"></a>Mitigation factors

Microsoft has not identified any mitigating factors for this vulnerability.

## <a name="affected-software"></a>Affected software

Any .NET Core application running on .NET Core 3.0.0, 3.0.1 or 3.1.0.

### <a name="how-affected"></a>How do I know if I am affected?

If you have a runtime or SDK with a version listed in [affected software](#affected-software) you are exposed to the vulnerability.

### <a name="how-fix"></a>How do I fix the issue?

To fix the issue please install the latest version of .NET Core. If you have multiple versions of .NET Core installed you will need to install multiple runtimes, or SDKs depending on what you have installed.

You can list the versions you have installed by running the `dotnet --info` command. You will see output like the following;

```
.NET Core SDK (reflecting any global.json):
 Version:   3.1.100
 Commit:    cd82f021f4

Runtime Environment:
 OS Name:     Windows
 OS Version:  10.0.18363
 OS Platform: Windows
 RID:         win10-x64
 Base Path:   C:\Program Files\dotnet\sdk\3.1.100\

Host (useful for support):
  Version: 3.1.0
  Commit:  65f04fb6db

.NET Core SDKs installed:
  3.0.101 [C:\Program Files\dotnet\sdk]
  3.1.100 [C:\Program Files\dotnet\sdk]

.NET Core runtimes installed:
  Microsoft.AspNetCore.App 3.0.1 [C:\Program Files\dotnet\shared\Microsoft.AspNetCore.App]
  Microsoft.AspNetCore.App 3.1.0 [C:\Program Files\dotnet\shared\Microsoft.AspNetCore.App]
  Microsoft.NETCore.App 3.0.1 [C:\Program Files\dotnet\shared\Microsoft.NETCore.App]
  Microsoft.NETCore.App 3.1.0 [C:\Program Files\dotnet\shared\Microsoft.NETCore.App]
  Microsoft.WindowsDesktop.App 3.0.1 [C:\Program Files\dotnet\shared\Microsoft.WindowsDesktop.App]
  Microsoft.WindowsDesktop.App 3.1.0 [C:\Program Files\dotnet\shared\Microsoft.WindowsDesktop.App]

To install additional .NET Core runtimes or SDKs:
  https://aka.ms/dotnet-download
```

* For machines running .NET Core 3.0, you should download and install Runtime 3.0.2 or SDK 3.0.102 from https://dotnet.microsoft.com/download/dotnet-core/3.0.
* For machines running .NET Core 3.1, you should download and install Runtime 3.1.1 or SDK 3.1.101 from https://dotnet.microsoft.com/download/dotnet-core/3.1.

If you have both 3.0 and 3.1 installed, you need to install the updates for both versions.

Once you have installed the updated runtime or SDK, restart your apps for the update to take effect.

Additionally, if you've deployed [self-contained applications](https://docs.microsoft.com/dotnet/core/deploying/#self-contained-deployments-scd) targeting any of the impacted versions, these applications are also vulnerable and must be recompiled and redeployed.

## Other Information

### Reporting Security Issues

If you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including terms and conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).

### Support

You can ask questions about this issue on GitHub in the .NET Core GitHub organization. The main repos are located at https://github.com/dotnet/runtime and https://github.com/dotnet/aspnet/. The Announcements repo (https://github.com/dotnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the linked discussion issue.

### Disclaimer

The information provided in this advisory is provided "as is" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.

### Acknowledgments

Soroush Dalili ([@irsdl](https://twitter.com/irsdl))

### External Links

[CVE-2020-0606](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2020-0606)

### Revisions

V1.1 (January 16, 2020): Clarified versions.
V1.0 (January 14, 2020): Advisory published.

_Version 1.1_

_Last Updated 2020-01-16_

# Microsoft Security Advisory CVE-2020-0605 : .NET Core Remote Code Execution Vulnerability

## <a name="executive-summary"></a>Executive summary

Microsoft is releasing this security advisory to provide information about a vulnerability in .NET Core. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.

Microsoft is aware of a remote code execution vulnerability exists in .NET software when the software fails to check the source markup of a file. An attacker who successfully exploited the vulnerability could run arbitrary code in the context of the current user.

Exploitation of the vulnerability requires that a user open a specially crafted file with an affected version of .NET Core. In an email attack scenario, an attacker could exploit the vulnerability by sending the specially crafted file to the user and convincing the user to open the file.

The security update addresses the vulnerability by correcting how .NET Core checks the source markup of a file.

## Announcement

The original announcement for this issue can be found at https://github.com/dotnet/announcements/issues/148

## <a name="mitigation-factors"></a>Mitigation factors

Microsoft has not identified any mitigating factors for this vulnerability.

## <a name="affected-software"></a>Affected software

Any .NET Core application running on .NET Core 3.0.0, 3.0.1 or 3.1.0.

### <a name="how-affected"></a>How do I know if I am affected?

If you have a runtime or SDK with a version listed in [affected software](#affected-software) you are exposed to the vulnerability.

### <a name="how-fix"></a>How do I fix the issue?

To fix the issue please install the latest version of .NET Core. If you have multiple versions of .NET Core installed you will need to install multiple runtimes, or SDKs depending on what you have installed.

You can list the versions you have installed by running the `dotnet --info` command. You will see output like the following;

```
.NET Core SDK (reflecting any global.json):
 Version:   3.1.100
 Commit:    cd82f021f4

Runtime Environment:
 OS Name:     Windows
 OS Version:  10.0.18363
 OS Platform: Windows
 RID:         win10-x64
 Base Path:   C:\Program Files\dotnet\sdk\3.1.100\

Host (useful for support):
  Version: 3.1.0
  Commit:  65f04fb6db

.NET Core SDKs installed:
  3.0.101 [C:\Program Files\dotnet\sdk]
  3.1.100 [C:\Program Files\dotnet\sdk]

.NET Core runtimes installed:
  Microsoft.AspNetCore.App 3.0.1 [C:\Program Files\dotnet\shared\Microsoft.AspNetCore.App]
  Microsoft.AspNetCore.App 3.1.0 [C:\Program Files\dotnet\shared\Microsoft.AspNetCore.App]
  Microsoft.NETCore.App 3.0.1 [C:\Program Files\dotnet\shared\Microsoft.NETCore.App]
  Microsoft.NETCore.App 3.1.0 [C:\Program Files\dotnet\shared\Microsoft.NETCore.App]
  Microsoft.WindowsDesktop.App 3.0.1 [C:\Program Files\dotnet\shared\Microsoft.WindowsDesktop.App]
  Microsoft.WindowsDesktop.App 3.1.0 [C:\Program Files\dotnet\shared\Microsoft.WindowsDesktop.App]

To install additional .NET Core runtimes or SDKs:
  https://aka.ms/dotnet-download
```

* For machines running .NET Core 3.0, you should download and install Runtime 3.0.2 or SDK 3.0.102 from https://dotnet.microsoft.com/download/dotnet-core/3.0.
* For machines running .NET Core 3.1, you should download and install Runtime 3.1.1 or SDK 3.1.101 from https://dotnet.microsoft.com/download/dotnet-core/3.1.

If you have both 3.0 and 3.1 installed, you need to install the updates for both versions.

Once you have installed the updated runtime or SDK, restart your apps for the update to take effect.

Additionally, if you've deployed [self-contained applications](https://docs.microsoft.com/dotnet/core/deploying/#self-contained-deployments-scd) targeting any of the impacted versions, these applications are also vulnerable and must be recompiled and redeployed.

## Other Information

### Reporting Security Issues

If you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including terms and conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).

### Support

You can ask questions about this issue on GitHub in the .NET Core GitHub organization. The main repos are located at https://github.com/dotnet/runtime and https://github.com/dotnet/aspnet/. The Announcements repo (https://github.com/dotnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the linked discussion issue.

### Disclaimer

The information provided in this advisory is provided "as is" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.

### Acknowledgments

Soroush Dalili ([@irsdl](https://twitter.com/irsdl))

### External Links

[CVE-2020-0605](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2020-0605)

### Revisions

V1.1 (January 16, 2020): Clarifying versions.
V1.0 (January 14, 2020): Advisory published.

_Version 1.1_

_Last Updated 2020-01-16_

* .NET Core Version:  3.1.100  Commit:    cd82f021f4
* Windows version: Windows 10 v1909 OS Build 18363.476)
* Does the bug reproduce also in WPF for .NET Framework 4.8?: Unknown
* Is this bug related specifically to tooling in Visual Studio (e.g. XAML Designer, Code editing, etc...)? Probably not, but I am Publishing using Visual Studio.
 
 **Problem description:**
A minimal .NET Core 3.1 WPF app with publish options "Produce Single File" and "Trim unused assemblies (in preview)" checked -> crashes immediately upon launching.

If I republish **without** checking "Trim unused assemblies (in preview)", it launches just fine.
 
 **Actual behavior:** <!-- callstack for crashes / exceptions -->
Nothing appears to happen when executing the WpfCoreApp.exe file.   

EventViewer says:
Description: A .NET Core application failed.
Application: WpfCoreApp.exe
Path: C:\code\WpfCoreApp\bin\Release\netcoreapp3.1\publish\WpfCoreApp.exe
Message: The application to execute does not exist: 'C:\Users\bignis\AppData\Local\Temp\.net\WpfCoreApp\gusxieru.uvn\WpfCoreApp.dll'.

 **Expected behavior:**
A simple app with a few buttons appears
 
 **Minimal repro:**
In Visual Studio 2019 v16.4.2, load the source code of this simple WPF app = 
[WpfAppSourceCode.zip](https://github.com/dotnet/wpf/files/4048255/WpfAppSourceCode.zip) 

Use these publish settings
![image](https://user-images.githubusercontent.com/1821535/72189975-e6ada380-33c3-11ea-9806-0439a40eb7f2.png)

and run the file \bin\Release\netcoreapp3.1\publish\WpfCoreApp.exe

nothing will happen and the error appears in the EventViewer.
# Issue I get a error MSB4062 with Build Wpf Project  

1>------ 已启动全部重新生成: 项目: WpfSimple, 配置: Debug Any CPU ------
1>C:\Program Files (x86)\dotnet\sdk\3.1.100\Sdks\Microsoft.NET.Sdk.WindowsDesktop\targets\Microsoft.WinFX.targets(225,9): error MSB4062: 未能从程序集 C:\Program Files %28x86%29\dotnet\sdk\3.1.100\Sdks\Microsoft.NET.Sdk.WindowsDesktop\tools\net472\PresentationBuildTasks.dll 加载任务“Microsoft.Build.Tasks.Windows.MarkupCompilePass1”。未能加载文件或程序集“file:///C:\Program Files %28x86%29\dotnet\sdk\3.1.100\Sdks\Microsoft.NET.Sdk.WindowsDesktop\tools\net472\PresentationBuildTasks.dll”或它的某一个依赖项。系统找不到指定的文件。 请确认 <UsingTask> 声明正确，该程序集及其所有依赖项都可用，并且该任务包含实现 Microsoft.Build.Framework.ITask 的公共类。
1>已完成生成项目“WpfSimple.csproj”的操作 - 失败。
========== 全部重新生成: 成功 0 个，失败 1 个，跳过 0 个 ==========

Use .Net Core 3.1.00
System: Windows 7 sp1
Visual Studio 2019 Version: 16.4.2

Demo Project File Content:
```
<Project Sdk="Microsoft.NET.Sdk.WindowsDesktop">

  <PropertyGroup>
    <OutputType>WinExe</OutputType>
    <TargetFramework>netcoreapp3.1</TargetFramework>
    <UseWPF>true</UseWPF>
  </PropertyGroup>

</Project>
```

How to fix It?But, I can build with .net core 3.0

Path File tree:
```
C:\Program Files (x86)\dotnet\sdk\3.1.100\Sdks\Microsoft.NET.Sdk.WindowsDesktop\
tools\net472>tree /f
卷 系统 的文件夹 PATH 列表
卷序列号为 0000-40A4
C:.
│  PresentationBuildTasks.dll
│  System.Collections.Immutable.dll
│  System.Memory.dll
│  System.Numerics.Vectors.dll
│  System.Reflection.Metadata.dll
│  System.Reflection.MetadataLoadContext.dll
│  System.Runtime.CompilerServices.Unsafe.dll
│
├─cs
│      PresentationBuildTasks.resources.dll
│
├─de
│      PresentationBuildTasks.resources.dll
│
├─es
│      PresentationBuildTasks.resources.dll
│
├─fr
│      PresentationBuildTasks.resources.dll
│
├─it
│      PresentationBuildTasks.resources.dll
│
├─ja
│      PresentationBuildTasks.resources.dll
│
├─ko
│      PresentationBuildTasks.resources.dll
│
├─pl
│      PresentationBuildTasks.resources.dll
│
├─pt-BR
│      PresentationBuildTasks.resources.dll
│
├─ru
│      PresentationBuildTasks.resources.dll
│
├─tr
│      PresentationBuildTasks.resources.dll
│
├─zh-Hans
│      PresentationBuildTasks.resources.dll
│
└─zh-Hant
        PresentationBuildTasks.resources.dll
```