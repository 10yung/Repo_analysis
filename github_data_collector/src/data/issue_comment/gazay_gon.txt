I have a use case where I would like to add to the gon based on variables that are set in the controller/view - specifically the rails layout being used

![peek 18-12-2018 10-46](https://user-images.githubusercontent.com/1306646/50159069-862d5f00-02b4-11e9-8676-bdba5633a5e3.gif)

rails version: 5.2.2
ruby version: 2.5.3
gon version: 6.2.1

I have two actions:
```
class IndexController < ApplicationController
  def index
    @your_int = 123
    @your_array = [1,2]
    @your_hash = {'a' => 1, 'b' => 2}
    gon.your_int = @your_int
    gon.your_other_int = 345 + gon.your_int
    gon.your_array = @your_array
    gon.your_array << gon.your_int
    gon.your_hash = @your_hash
  end

  def about
  end
end
```
in my header i put gon:
```
%meta{content: 'text/html; charset=UTF-8', 'http-equiv': 'Content-Type'}

%meta{content: 'no-cache', name: 'turbolinks-cache-control'}

= Gon::Base.render_data

%title Testes

-#= favicon_link_tag

= csrf_meta_tags

= csp_meta_tag

= stylesheet_link_tag    'application', media: 'all', 'data-turbolinks-track': 'reload'

= javascript_include_tag 'application', 'data-turbolinks-track': 'reload'
```
in  browser colose on page index i write gon and returns this:
```
gon
{your_int: 123, your_other_int: 468, your_array: Array(3), your_hash: {â€¦}}
```
i navigate with turbolinks to page about and i write gon from console and return this:
```
gon
{}
```
so i back to index with tuborlinks and i write in console gon and the return not put the value, but an empty object
```
gon
{}
```
This test fails with rails 4 (works with rails 5) even though gemspec says actionpack >= 3.0 as dependency.

actionpack >= 5.0 should be added as a development dependency or it should be made compatible with actionpack 4.0 (ideally for 3.0 as well).

```
Failures:

  1) threading behaviour is threadsafe
     Failure/Error: @request ||= ActionDispatch::TestRequest.create

     NoMethodError:
       undefined method `create' for ActionDispatch::TestRequest:Class
     # ./spec/gon/thread_spec.rb:5:in `request'
     # ./spec/gon/thread_spec.rb:13:in `execute'
     # ./spec/gon/thread_spec.rb:33:in `block (4 levels) in <top (required)>'

Finished in 0.17894 seconds (files took 1.02 seconds to load)
73 examples, 1 failure

```
Hi.
I found that `json.cache!` was not working when I was using jbuilder template with `gon.jbuilder`. 
I found this error message:
`undefined method controller' for #<StaffsController:0x007f984fb67440> Did you mean?  controller_path`
The error comes from this line.
https://github.com/rails/jbuilder/blob/master/lib/jbuilder/jbuilder_template.rb#L35

I think this problem will be fixed by changing the argument `controller` to right one.
(`controller` is equal to `@context` on `JbuilderTemplate`)
https://github.com/gazay/gon/blob/master/lib/gon/jbuilder/parser.rb#L69

Is it hard to replace it?
And is there other way to use `json.cache!` when using `gon.jbuilder`?

Thanks.
Hi,

I'm using something like 

```
  protected

  def init_gon
    ...
    gon.vapid_public_key = Base64.urlsafe_decode64(Rails.application.secrets.vapid[:public_key])
  end
```

But the Gon::Base.render_data complains that : "\xD2" from ASCII-8BIT to UTF-8
I've tried different string conversion using force_encoding method without success.

Any hints ?
Thanks a lot


I set up a gon variable for checking if current user is available in controller.
`gon.watch.has_current_user = current_user.present?`
I open a page (with current user presents) and duplicate that page to a new browser window.
I logged out in one page and call ` gon.watch('has_current_user')`, then call `alert(gon.has_current_user` in the console. The variable was updated from true to false successfully.
Now I called the same two methods in the page I had not logged out. I assume that the variable must be checked and updated again by gon.watch and become false, too. However, the current_user still existed there.
Why?
I don't have any suggestions here, but wanted to start a thread about ways to make gon work in a webpacker world... Specifically such that `gon` could be imported by JS files rather than being a global?
    respond_to do |format|
      format.js { gon.followername = params[:follower][:username] }
   end

alert(gon.followername)
I wrote these lines in application layout file
 ```
= csrf_meta_tags
= Gon::Base.render_data({}) 
```
and assign values to gon in Rails controller and using in angular controller with $scope
In Rails controller

`gon.hotel_data = hotel_data
` 
In Angular controller

`$scope.hotel = gon.hotel_data`

gon variable is accessible in angular controller 
But when I write test case for this controller and it shows this error in angular controller when I run test case 

> ReferenceError: Can't find variable: gon

Kindly let me know how to initialize gon variable in Javascript test case 

Thanks
6.2.0 has been released :tada: 
https://rubygems.org/gems/gon

But we don't have a tag in git.
https://github.com/gazay/gon/releases