For OnSetNextStatement(), convert exceptions into NotSupportedException
so that higher-level code properly handles this case.

For Stepping, just drop & log the exception like SoftDebuggerSession does.

Fixes https://devdiv.visualstudio.com/DevDiv/_workitems/edit/1042237
…tions

When hovering the mouse cursor over most method invocation
expressions, the logic returns a null expression to evaluate
(thereby bypassing evaluation of said expression), but when
hovering over conditional method invocations, the logic failed.

Since the logic is identical to VS Windows, do what VS Windows does
in this scenario as well, which is to ignore evaluation errors
and not show them.

Fixes https://devdiv.visualstudio.com/DevDiv/_workitems/edit/1054139
This switches the aspx file editing to the old editor an and includes .aspx, .ashx, .asmx, .ascx, .master, .asax, ~.cshtml, .html, .htm~ extensions.

Fixes https://devdiv.visualstudio.com/DevDiv/_workitems/edit/1049891
Fixes https://devdiv.visualstudio.com/DevDiv/_workitems/edit/1019742

Another possible fix could be moving `dialog.CloseDialog ()` (https://github.com/mono/monodevelop/blob/master/main/src/core/MonoDevelop.Ide/MonoDevelop.Ide.Projects/NewProjectController.cs#L683) at the beginning of `Create` method.

Here is how this dialog looks like after clicking on "Create" button:
![image](https://user-images.githubusercontent.com/43088712/72618462-cc377500-3943-11ea-8e05-d99db486d56c.png)

Fixes VSTS #1052169

With this update:
* Light & Dark editor themes are updated to match Visual Studio with enhanced colors (barring some bug fixes we need to make in the editor).
* The existing Light & Dark editor themes are renamed to "Legacy - Light" and "Legacy - Dark"
* The Visual Studio Light theme is removed, now that Light contains the same colors.
**THE FEATURE IT'S IN PROGRESS PLEASE DO NOT MERGE**

This PR adds a new mechanism to create our own keyloop system to sync Gtk and Cocoa world focus chain.

![xRCBhpk7dk](https://user-images.githubusercontent.com/1587480/68583025-7abec580-047c-11ea-85a5-53fc72cc1b71.gif)

![zXN2k3hSf7-1](https://user-images.githubusercontent.com/1587480/68591890-02fb9580-0492-11ea-8dcc-c42d859a15ce.gif)


Basically right now VS4Mac is a Gtk application which recently added a way to include embeded native views based in a hacked gtkquarz window which it has this structure:

- GtkQuarzWindow
   - GtkQuarzView
     - Embeded widgets (ProppyPad, ToolboxPad, Source Editor Pad)

Under the hood this native views are overlapped on top of Gtk and synchronized with a Gtk view container host (GtkNSViewHost)

In VS4Mac is the Gtk application is who captures the keypress events and the CommandManager ensures if the selected view is a native view it tunnels the event to cocoa world (making stop the escalation of the event in the Gtk) or otherwise it continues the gtk event flow.

Actually we were doing this tunneling to cocoa in a incomplete way, we were only calling to ".OnKeyDown" from the focused view, which it doesn't match the same behaviour as pressing a key in a cocoa application which also affects to the tab key navigation (Keyloop) mechanism.... and this the reason we were getting some unexpected behaviours in this case.

To try to fix this, I checked a lot of documentation, but it seems there are not much information about how this works under the hood or how replicate it... and after a lot of tests didn't found any good way to do it more easily... that's because I decided to rewrite current implementation to create our own mechanism to calculate this keyloop calculation.

The current cocoa view structure described above adds more complexity to our implementation, first because all the native embeded views shares the same NSWindow (GtkQuarzWindow) and this means when the NextKeyView is not set in a native view, the NSWindow autocalculates the next or previous element, and this could be **or the correct next view or the first GtkQuarzView or another view from another embeded view**, and that's because pressing tab in the old implementation press tab was giving us randomly unexpected (wrong) results.

Another problem we had was how connect the Gtk focus chain to Cocoa, that's means we needed to handle cases when user press tab and next view is a GtkNSViewHost then calculate which is our first candidate for item focus.. and ... the same for pressing SHIFT+Tab (focus last item from this embedded view).

And.. sorry about the hack.. but didn't found any idea about how do it in a better way living into a Gtk application :-(

Fixes #1001596 - A11Y_Xamarin Designers_Property pane_keyboard : User is unable to navigate from property filter to the next controls inside property panel window
https://devdiv.visualstudio.com/DevDiv/_workitems/edit/1001596

Backport of #9267.

/cc @sevoku @netonjm
…when updating breakpoints

Fixes https://devdiv.visualstudio.com/DevDiv/_workitems/edit/960963

![Screenshot from 2020-01-16 00-17-52](https://user-images.githubusercontent.com/6353864/72498984-49ed6a80-37f6-11ea-99e2-e8d824c62665.png)

Please fix the UI elements.
… async

Fixes https://devdiv.visualstudio.com/DevDiv/_workitems/edit/804257/