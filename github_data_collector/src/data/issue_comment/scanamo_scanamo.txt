Updates [org.scala-sbt:sbt](https://github.com/sbt/sbt) [from 1.3.6 to 1.3.7](https://github.com/sbt/sbt/compare/v1.3.6...v1.3.7).
[Release Notes/Changelog](https://github.com/sbt/sbt/releases/tag/v1.3.7)

I'll automatically update this PR to resolve conflicts as long as you don't change it yourself.

If you'd like to skip this version, you can just close this PR. If you have any feedback, just mention me in the comments below.

Have a fantastic day writing Scala!

<details>
<summary>Ignore future updates</summary>

Add this to your `.scala-steward.conf` file to ignore future updates of this dependency:
```
updates.ignore = [ { groupId = "org.scala-sbt", artifactId = "sbt" } ]
```
</details>

labels: library-update, semver-patch
In some of our projects, we don't want to use the whole functionality of `Scanamo`.  We only need the mapping from case classes (and other types) to Dynamo, i.e., exactly what `DynamoFormat` does.

Would you be open to the proposal to split the whole `DynamoFormat` functionality into a separate library (like `scanamo-format` or sth like that)? Or are there any concerns about the separation? Any other notes if somebody wants to try it?

Add support for Dotty compilation ( https://github.com/lampepfl/dotty-example-project ).

Closes #370 
~~For some reasons this is broken, or at least I couldn't run it on my machine.~~ But since the library has evolved quite a lot recently, the live docs have drifted and this is not a great onboarding experience.

- [x] make sure the site is published whenever a tag/release is pushed
- [x] make sure version numbers are up to date when the site is published
- [x] make sure examples are accurate according to the latest API changes
- [ ] base the documentation on [these guidelines](https://www.divio.com/blog/documentation/)
- There are many data types in the cats library for which an instance is trivial to build. See 
https://github.com/typelevel/cats/tree/master/core/src/main/scala/cats/data
- There are many data types in the standard library too: date/times and related, numbers (also we need to make sure these encoding preserve properties for those numbers), `Unit`, etc.
```scala
trait DynamoEncoder[-A] {
  def write(x: A): DynamoValue
}
trait DynamoDecoder[+A] {
  def read(x: DynamoValue): Either[DynamoReadError, A]
}
trait DynamoFormat[A] extends DynamoEncoder[A] with DynamoDecoder[A]
```
See https://github.com/scanamo/scanamo/pull/460

It is not great that the testing framework repels potential contributors. It's my fault, I had to disable the automatic start/stop as it was creating issues in CI and never got around to properly study the problem.
Partially addresses #398 

The new `Key` replaces `UniqueKey` and has two type parameters: `Key[KT, T]`

- `KT` identifies whether the table has a `Simple` or `Composite` key
- `T` is the type of key values. In the `Composite` case, it is actually `(T', T")`

`KT` is just a phantom type to make sure a key is "correct by construction". This changes ripples through the whole API, notably `Table` is now indexed by these two types to make sure all APIs relying on keys receive correct values.

This is still a WIP as I want to tackle `Query` in here too, because now we can enforce the `query*` APIs can only be called when the table has a composite key at compile time, which I think is great.
```scala
attr"Something.$like[${that * thus}].Products[5]"
```

Reserved words and variables containing special characters should be properly handled.

With that we can drop all the implicit string conversions lying around in the library.
Closes #389 