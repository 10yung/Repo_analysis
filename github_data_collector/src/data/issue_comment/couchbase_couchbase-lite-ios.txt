Unable to include Couchbase Lite iOS via Carthage with Xcode 11.3

Incompatible Swift version - framework was built with 5.1 (swiftlang-1100.0.270.13 clang-1100.0.33.7) and the local version is 5.1.3 (swiftlang-1100.0.282.1 clang-1100.0.33.15).

--------
* Version:   2.6.3
* Client OS: macOS Catalina 10.15.2

When I lock the device before the socket has started receiving a response my app crashes. The device does have a passcode. So I'm assuming the database is being accessed after the "isProtectedDataAvailable" is false. Seems to be more common when network connectivity is slow.

Crashed: DB->wss://***************
0  CouchbaseLiteSwift             0x10551198c sqlite3_backup_init + 37836
1  CouchbaseLiteSwift             0x1055111a8 sqlite3_backup_init + 35816
2  CouchbaseLiteSwift             0x1055132bc sqlite3_backup_init + 44284
3  CouchbaseLiteSwift             0x10551ab44 sqlite3_backup_step + 26728
4  CouchbaseLiteSwift             0x105515120 sqlite3_backup_step + 3652
5  CouchbaseLiteSwift             0x105526a6c sqlite3_step + 12572
6  CouchbaseLiteSwift             0x105523b1c sqlite3_step + 460
7  CouchbaseLiteSwift             0x1054bd7c0 SQLite::Statement::executeStep() + 40
8  CouchbaseLiteSwift             0x10547cb40 litecore::SQLiteDataFile::intQuery(char const*) + 76
9  CouchbaseLiteSwift             0x10547c4b4 litecore::SQLiteDataFile::optimizeAndVacuum() + 40
10 CouchbaseLiteSwift             0x10547b36c litecore::SQLiteDataFile::close() + 108
11 CouchbaseLiteSwift             0x10547ce48 litecore::SQLiteDataFile::~SQLiteDataFile() + 40
12 CouchbaseLiteSwift             0x10547b2e8 litecore::SQLiteDataFile::~SQLiteDataFile() + 12
13 CouchbaseLiteSwift             0x1054b77f4 c4Internal::Database::~Database() + 424
14 CouchbaseLiteSwift             0x105471134 c4Database::~c4Database() + 56
15 CouchbaseLiteSwift             0x1054878dc litecore::repl::DBWorker::computeActivityLevel() const + 776
16 CouchbaseLiteSwift             0x105487530 c4socket_received + 124
17 libdispatch.dylib              0x182cb0aa0 _dispatch_call_block_and_release + 24
18 libdispatch.dylib              0x182cb0a60 _dispatch_client_callout + 16
19 libdispatch.dylib              0x182cba9b4 _dispatch_queue_serial_drain$VARIANT$mp + 608
20 libdispatch.dylib              0x182cbb2fc _dispatch_queue_invoke$VARIANT$mp + 336
21 libdispatch.dylib              0x182cbbcc8 _dispatch_root_queue_drain_deferred_wlh$VARIANT$mp + 340
22 libdispatch.dylib              0x182cc4098 _dispatch_workloop_worker_thread$VARIANT$mp + 668
23 libsystem_pthread.dylib        0x182fe3e70 _pthread_wqthread + 860
24 libsystem_pthread.dylib        0x182fe3b08 start_wqthread + 4

Create database and start replication is crashing on pull (only some users, not all).
--------
* Version:   CouchbaseLite Swift Enterprise 2.6.1
* Client OS: iOS 13.1.3
* Server:    Couchbase Sync Gateway Enterprise 2.5.0
--------
* Source Code:
```
let config: ReplicatorConfiguration = {
  let config = ReplicatorConfiguration(database: database, target: URLEndpoint(url: url))
  config.replicatorType = ReplicatorType.pull
  config.authenticator = SessionAuthenticator(sessionID: sessionId, cookieName: cookieName)
  config.continuous = true
  return config
}()
let replicator = Replicator(config: config)
replicator.start()
```
--------
* Crash Log:
```
Exception Type:  SIGSEGV
Exception Codes: SEGV_MAPERR at 0x124
Crashed Thread:  7

Thread 7 Crashed:
0   CouchbaseLiteSwift                   0x0000000101dae204 std::__1::__function::__func<litecore::repl::Replicator::getRemoteCheckpoint()::$_0, std::__1::allocator<litecore::repl::Replicator::getRemoteCheckpoint()::$_0>, void (litecore::blip::MessageProgress const&)>::operator()(litecore::blip::MessageProgress const&) (atomic:918)
1   CouchbaseLiteSwift                   0x0000000101dd1aec std::__1::__function::__func<litecore::repl::Worker::sendRequest(litecore::blip::MessageBuilder&, std::__1::function<void (litecore::blip::MessageProgress const&)>)::$_0, std::__1::allocator<litecore::repl::Worker::sendRequest(litecore::blip::MessageBuilder&, std::__1::function<void (litecore::blip::MessageProgress const&)>)::$_0>, void (litecore::blip::MessageProgress)>::operator()(litecore::blip::MessageProgress&&) (Worker.cc:125)
2   CouchbaseLiteSwift                   0x0000000101dd1850 ___ZZN8litecore5actor5Actor13_asynchronizeIJNS_4blip15MessageProgressEEEENSt3__18functionIFvDpT_EEESA_ENUlS4_E_clES4__block_invoke (Actor.hh:125)
3   CouchbaseLiteSwift                   0x0000000101e51458 litecore::actor::GCDMailbox::safelyCall(void () block_pointer) const (GCDMailbox.cc:87)
4   CouchbaseLiteSwift                   0x0000000101e5152c ___ZN8litecore5actor10GCDMailbox7enqueueEU13block_pointerFvvE_block_invoke (GCDMailbox.cc:98)
5   libdispatch.dylib                    0x0000000180a5f610 _dispatch_call_block_and_release + 20
6   libdispatch.dylib                    0x0000000180a60184 _dispatch_client_callout + 12
7   libdispatch.dylib                    0x0000000180a0c464 _dispatch_lane_serial_drain$VARIANT$mp + 604
8   libdispatch.dylib                    0x0000000180a0ce58 _dispatch_lane_invoke$VARIANT$mp + 416
9   libdispatch.dylib                    0x0000000180a16340 _dispatch_workloop_worker_thread + 584
10  libsystem_pthread.dylib              0x0000000180aaffa4 _pthread_wqthread + 272
11  libsystem_pthread.dylib              0x0000000180ab2ae0 start_wqthread + 4


```
From CBSE-6281, the CBLDynamicObject's +propertyNames could be called from multiple threads and could cause EXE_BAD_ACCESS to the classToNames dictionary.

--------
* Version:   1.4.x

Steps: 
1. App with DB in the shared container, also it should be encrypted. 
2. When the app is send to background, the app crashes, with console message, 
```
[CBLiteTaskExten:1441] Forcing crash report with description: CBLiteTaskExten:1441 was suspended with locked system files:
/private/var/mobile/Containers/Shared/AppGroup/FCDB5594-893D-4832-B1C9-755519574284/CBLite/demo.cblite2/db.sqlite3
```
3. Only happens in device

[SQLCipherVsSharedData](https://github.com/signalapp/SQLCipherVsSharedData) explained in detail how this issue happens with SQLCipher.

Easily replicated with adding an encryptionKey to this [extension project](https://github.com/couchbaselabs/couchbase-mobile-ios-app-extension) and run on device. Will get the log from device console log. 

SQLCipher team has analyzed and shared what really happens, and how iOS can't identify it as a sqlite file. [comment from Stephen](https://github.com/sqlcipher/sqlcipher/issues/255#issuecomment-355063368)

Link: [#2241](https://github.com/couchbase/couchbase-lite-ios/issues/2241)
Is it possible to include the "type" property value of a document as part of a database change notification?  This would circumvent the need to load each changed document to see if it's of a type I might be interested in. (I had started implementing this as part of a new feature, but the functionality was moved to the server and synced to the device via a document) 


We are create replication like this:

```
        CBLReplication *pull = [database createPullReplication:url];
        CBLReplication *push = [database createPushReplication:url];
        
        NSDictionary *auth = @{ @"Authorization" : ***};
        [pull setHeaders:auth];
        [push setHeaders:auth];
        
        pull.continuous = YES;
        push.continuous = YES;
        [pull start];
        [push start];
```

In logs:

```
15:33:58.000‖ ChangeTracker: CBLSocketChangeTracker[0x60c0003d8150 pl_restik_sjapxviwg]: Start timeout, will timeout in 330 sec.
15:33:58.000‖ ChangeTracker: CBLSocketChangeTracker[0x60c0003d8150 pl_restik_sjapxviwg]: Started... <https://***/_changes?feed=longpoll&heartbeat=300000&style=all_docs&since=***>
15:39:28.000‖ ChangeTracker: CBLSocketChangeTracker[0x60c0003d8150 pl_restik_sjapxviwg]: Timeout ...
15:39:28.002‖ CBLSocketChangeTracker[0x60c0003d8150 pl_restik_sjapxviwg]: Connection error #1, retrying in 2.0 sec: NSURLError[-1001, "Timeout", <https://***/_changes?feed=longpoll&heartbeat=300000&style=all_docs&since=***>]
```

Then interval between request increases.

```
retrying in 2.0
retrying in 4.0
retrying in 8.0
...
```

 What we are doing wrong? Thank you

--------
* Version:   1.4.1
* Client OS: iOS
* Server: Apache CouchDB 2.1.1
I have a situation in a customer's database where he has a basically empty record that can't be deleted.

I traced through the code and found that CBL (1.4.1) is returning kCBLStatusNotFound when trying to delete (or even modify) the document.

Here's the relevant code being executed in CBL_SQLiteStorage.m (1728) in 

```
- (CBL_Revision*) addDocID: (NSString*)inDocID

                 prevRevID: (CBL_RevID*)inPrevRevID

                properties: (NSMutableDictionary*)properties

                  deleting: (BOOL)deleting

             allowConflict: (BOOL)allowConflict

           validationBlock: (CBL_StorageValidationBlock)validationBlock

                    status: (CBLStatus*)outStatus

                     error: (NSError**)outError

...

        SequenceNumber parentSequence = 0;

        if (prevRevID) {

            // Replacing: make sure given prevRevID is current & find its sequence number:

            if (isNewDoc)

                return kCBLStatusNotFound;

            parentSequence = [self getSequenceOfDocument: docNumericID revision: prevRevID

                                             onlyCurrent: !allowConflict];

            if (parentSequence == 0) {

                // Not found: kCBLStatusNotFound or a kCBLStatusConflict, depending on whether there is any current revision

                if (!allowConflict && [self existsDocumentWithID: docID revisionID: nil])

                    return kCBLStatusConflict;

                else

                    return kCBLStatusNotFound;

            }
```

The last `return kCBLStatusNotFound` bit is what's being executed when this code runs. 

Is there any way that I can get rid of this document even though the parentSequence is 0 and it falls through to the else statement? I just want to be able to delete it and move on. But it's preventing any documents in a batch transactions from being saved if this document appears in the transaction block being saved.



--------
* Version:   1.4.1
* Client OS: macOS 10.13.4
* Server:    n/a

This happens rarely on our iOS app.

Seems like the _changeTracker is either not cleared on -stop or -startChangeTracker is called in succession.

--------
* Version:   1.4.1
* Client OS: iOS 10.3.3 (14G60)
* Server:  custom reverse proxy + couchbase-sync-gateway-community_1.3.1 + couchbase-server-community-4.1.1

--------
Exception:

`*** Terminating app due to uncaught exception 'NSInternalInconsistencyException', reason: '!_changeTracker'`

--------
Call stack as follows:

```
Thread 9 name: CouchbaseLite
Thread 9 Crashed:
0 CoreFoundation 0x000000018c21efe0 0x18c0f2000 + 1232864 (<redacted> + 124)
1 libobjc.A.dylib 0x000000018ac80538 0x18ac78000 + 34104 (objc_exception_throw + 56)
2 CoreFoundation 0x000000018c21eeb4 0x18c0f2000 + 1232564 (<redacted> + 104)
3 Foundation 0x000000018ccb77cc 0x18cc09000 + 714700 (<redacted> + 88)
4 KetoDiet 0x000000010060dfe8 0x100000000 + 6348776 (_AssertFailed + 384)
5 KetoDiet 0x00000001005aa274 0x100000000 + 5939828 (-[CBLRestPuller startChangeTracker] + 1344)
6 KetoDiet 0x00000001005a9ce8 0x100000000 + 5938408 (-[CBLRestPuller beginReplicating] + 412)
7 KetoDiet 0x00000001005a8f54 0x100000000 + 5934932 (__45-[CBLRestReplicator fetchRemoteCheckpointDoc]_block_invoke + 452)
8 KetoDiet 0x00000001005c0cb4 0x100000000 + 6032564 (-[CBLRemoteRequest respondWithResult:error:] + 116)
9 KetoDiet 0x00000001005c2954 0x100000000 + 6039892 (-[CBLRemoteJSONRequest didFinishLoading] + 160)
10 KetoDiet 0x00000001005ee56c 0x100000000 + 6219116 (__57-[CBLRemoteSession URLSession:task:didCompleteWithError:]_block_invoke + 124)
11 Foundation 0x000000018cd1350c 0x18cc09000 + 1090828 (<redacted> + 340)
12 CoreFoundation 0x000000018c1cd42c 0x18c0f2000 + 898092 (<redacted> + 24)
13 CoreFoundation 0x000000018c1ccd9c 0x18c0f2000 + 896412 (<redacted> + 540)
14 CoreFoundation 0x000000018c1ca9a8 0x18c0f2000 + 887208 (<redacted> + 744)
15 CoreFoundation 0x000000018c0fada4 0x18c0f2000 + 36260 (CFRunLoopRunSpecific + 424)
16 Foundation 0x000000018cc15db4 0x18cc09000 + 52660 (<redacted> + 304)
17 KetoDiet 0x00000001005a4738 0x100000000 + 5916472 (-[CBL_RunLoopServer runServerThread] + 316)
18 Foundation 0x000000018cd13318 0x18cc09000 + 1090328 (<redacted> + 996)
19 libsystem_pthread.dylib 0x000000018b2e168c 0x18b2de000 + 13964 (<redacted> + 240)
20 libsystem_pthread.dylib 0x000000018b2e159c 0x18b2de000 + 13724 (_pthread_start + 284)
21 libsystem_pthread.dylib 0x000000018b2decb4 0x18b2de000 + 3252 (thread_start + 4)
```