Why there is no pattern to match dynamic paths?
Something like this:
`https://website.com/search/:a-lot-of-filters`
to match all variants of url
`https://website.com/search/filter-1/filter-2/filter-8/filter-n`.
I want to parse this string by myself with parse_url, without using patterns after **search**.
In symfony i can do the following:
`(new RouteCollection)->add("search", new Route("/search/{any}", 
["controller" => AppBundle:Default:search"], 
["any" => ".+"]));`

support building route automatically from something like this:

```
function partialCoverAction($id)
```

into:

```
/partial/cover/:id
```
Facing this issue: 

PHP is compiled and installed at a custom path.

~~~~
[root@server ext]#
[root@server ext]# php -v
PHP 7.0.13 (cli) (built: Nov 25 2016 12:27:01) ( NTS )
Copyright (c) 1997-2016 The PHP Group
Zend Engine v3.0.0, Copyright (c) 1998-2016 Zend Technologies
    with Zend OPcache v7.0.13, Copyright (c) 1999-2016, by Zend Technologies
[root@server ext]#
[root@server ext]# ./configure
-bash: ./configure: No such file or directory
[root@server ext]#
[root@server ext]#
[root@server ext]#
[root@server ext]# php -v
PHP 7.0.13 (cli) (built: Nov 25 2016 12:27:01) ( NTS )
Copyright (c) 1997-2016 The PHP Group
Zend Engine v3.0.0, Copyright (c) 1998-2016 Zend Technologies
    with Zend OPcache v7.0.13, Copyright (c) 1999-2016, by Zend Technologies
[root@server ext]#
[root@server ext]#
[root@server ext]# phpize
Configuring for:
PHP Api Version:         20151012
Zend Module Api No:      20151012
Zend Extension Api No:   320151012
[root@server ext]# ./configure
checking for grep that handles long lines and -e... /bin/grep
checking for egrep... /bin/grep -E
checking for a sed that does not truncate output... /bin/sed
checking for cc... cc
checking whether the C compiler works... yes
checking for C compiler default output file name... a.out
checking for suffix of executables...
checking whether we are cross compiling... no
checking for suffix of object files... o
checking whether we are using the GNU C compiler... yes
checking whether cc accepts -g... yes
checking for cc option to accept ISO C89... none needed
checking how to run the C preprocessor... cc -E
checking for icc... no
checking for suncc... no
checking whether cc understands -c and -o together... yes
checking for system library directory... lib
checking if compiler supports -R... no
checking if compiler supports -Wl,-rpath,... yes
checking build system type... x86_64-unknown-linux-gnu
checking host system type... x86_64-unknown-linux-gnu
checking target system type... x86_64-unknown-linux-gnu
checking for PHP prefix... /server/php7
checking for PHP includes... -I/server/php7/include/php -I/server/php7/include/php/main -I/server/php7/include/php/TSRM -I/server/php7/include/php/Zend -I/server/php7/include/php/ext -I/server/php7/include/php/ext/date/lib
checking for PHP extension directory... /server/php7/lib/php/extensions/no-debug-non-zts-20151012
checking for PHP installed headers prefix... /server/php7/include/php
checking if debug is enabled... no
checking if zts is enabled... no
checking for re2c... no
configure: WARNING: You will need re2c 0.13.4 or later if you want to regenerate PHP parsers.
checking for gawk... gawk
checking Whether to enable the "pux" extension... yes, shared
checking if PUX should be built in debug mode... no
checking for ld used by cc... /bin/ld
checking if the linker (/bin/ld) is GNU ld... yes
checking for /bin/ld option to reload object files... -r
checking for BSD-compatible nm... /bin/nm -B
checking whether ln -s works... yes
checking how to recognize dependent libraries... pass_all
checking for ANSI C header files... yes
checking for sys/types.h... yes
checking for sys/stat.h... yes
checking for stdlib.h... yes
checking for string.h... yes
checking for memory.h... yes
checking for strings.h... yes
checking for inttypes.h... yes
checking for stdint.h... yes
checking for unistd.h... yes
checking dlfcn.h usability... yes
checking dlfcn.h presence... yes
checking for dlfcn.h... yes
checking the maximum length of command line arguments... 1572864
checking command to parse /bin/nm -B output from cc object... ok
checking for objdir... .libs
checking for ar... ar
checking for ranlib... ranlib
checking for strip... strip
checking if cc supports -fno-rtti -fno-exceptions... no
checking for cc option to produce PIC... -fPIC
checking if cc PIC flag -fPIC works... yes
checking if cc static flag -static works... no
checking if cc supports -c -o file.o... yes
checking whether the cc linker (/bin/ld -m elf_x86_64) supports shared libraries... yes
checking whether -lc should be explicitly linked in... no
checking dynamic linker characteristics... GNU/Linux ld.so
checking how to hardcode library paths into programs... immediate
checking whether stripping libraries is possible... yes
checking if libtool supports shared libraries... yes
checking whether to build shared libraries... yes
checking whether to build static libraries... no

creating libtool
appending configuration tag "CXX" to libtool
configure: creating ./config.status
config.status: creating config.h
[root@server ext]# make
/bin/sh /tmp/Pux-1.6/ext/libtool --mode=compile cc  -I. -I/tmp/Pux-1.6/ext -DPHP_ATOM_INC -I/tmp/Pux-1.6/ext/include -I/tmp/Pux-1.6/ext/main -I/tmp/Pux-1.6/ext -I/server/php7/include/php -I/server/php7/include/php/main -I/server/php7/include/php/TSRM -I/server/php7/include/php/Zend -I/server/php7/include/php/ext -I/server/php7/include/php/ext/date/lib -I/opt/local/include  -DHAVE_CONFIG_H  -g -O2   -c /tmp/Pux-1.6/ext/php_pux.c -o php_pux.lo
mkdir .libs
 cc -I. -I/tmp/Pux-1.6/ext -DPHP_ATOM_INC -I/tmp/Pux-1.6/ext/include -I/tmp/Pux-1.6/ext/main -I/tmp/Pux-1.6/ext -I/server/php7/include/php -I/server/php7/include/php/main -I/server/php7/include/php/TSRM -I/server/php7/include/php/Zend -I/server/php7/include/php/ext -I/server/php7/include/php/ext/date/lib -I/opt/local/include -DHAVE_CONFIG_H -g -O2 -c /tmp/Pux-1.6/ext/php_pux.c  -fPIC -DPIC -o .libs/php_pux.o
In file included from /tmp/Pux-1.6/ext/php_pux.c:15:0:
/tmp/Pux-1.6/ext/php_pux.h:90:27: error: unknown type name ‘zend_rsrc_list_entry’
 void pux_mux_le_hash_dtor(zend_rsrc_list_entry *rsrc TSRMLS_DC);
                           ^
/tmp/Pux-1.6/ext/php_pux.c: In function ‘pux_init_exception’:
/tmp/Pux-1.6/ext/php_pux.c:51:3: error: too many arguments to function ‘zend_register_internal_class_ex’
   ce_pux_exception = zend_register_internal_class_ex(&e, (zend_class_entry*)zend_exception_get_default(TSRMLS_C), NULL TSRMLS_CC);
   ^
In file included from /server/php7/include/php/main/php.h:39:0,
                 from /tmp/Pux-1.6/ext/php_pux.c:5:
/server/php7/include/php/Zend/zend_API.h:290:28: note: declared here
 ZEND_API zend_class_entry *zend_register_internal_class_ex(zend_class_entry *class_entry, zend_class_entry *parent_ce);
                            ^
/tmp/Pux-1.6/ext/php_pux.c: At top level:
/tmp/Pux-1.6/ext/php_pux.c:54:27: error: unknown type name ‘zend_rsrc_list_entry’
 void pux_mux_le_hash_dtor(zend_rsrc_list_entry *rsrc TSRMLS_DC)
                           ^
/tmp/Pux-1.6/ext/php_pux.c: In function ‘zm_startup_pux’:
/tmp/Pux-1.6/ext/php_pux.c:97:63: error: ‘pux_mux_le_hash_dtor’ undeclared (first use in this function)
   le_mux_hash_table = zend_register_list_destructors_ex(NULL, pux_mux_le_hash_dtor, "hash table", module_number);
                                                               ^
/tmp/Pux-1.6/ext/php_pux.c:97:63: note: each undeclared identifier is reported only once for each function it appears in
make: *** [php_pux.lo] Error 1
~~~~

Please suggest.
/bin/bash /home/Pux/ext/libtool --mode=compile cc  -I. -I/home/Pux/ext -DPHP_ATOM_INC -I/home/Pux/ext/include -I/home/Pux/ext/main -I/home/Pux/ext -I/usr/local/include/php -I/usr/local/include/php/main -I/usr/local/include/php/TSRM -I/usr/local/include/php/Zend -I/usr/local/include/php/ext -I/usr/local/include/php/ext/date/lib -I/opt/local/include  -DHAVE_CONFIG_H  -g -O2   -c /home/Pux/ext/pux_functions.c -o pux_functions.lo 
 cc -I. -I/home/Pux/ext -DPHP_ATOM_INC -I/home/Pux/ext/include -I/home/Pux/ext/main -I/home/Pux/ext -I/usr/local/include/php -I/usr/local/include/php/main -I/usr/local/include/php/TSRM -I/usr/local/include/php/Zend -I/usr/local/include/php/ext -I/usr/local/include/php/ext/date/lib -I/opt/local/include -DHAVE_CONFIG_H -g -O2 -c /home/Pux/ext/pux_functions.c  -fPIC -DPIC -o .libs/pux_functions.o
/home/Pux/ext/pux_functions.c: In function ‘my_copy_zval’:
/home/Pux/ext/pux_functions.c:80:10: error: ‘IS_CONSTANT_ARRAY’ undeclared (first use in this function)
     case IS_CONSTANT_ARRAY:
          ^
/home/Pux/ext/pux_functions.c:80:10: note: each undeclared identifier is reported only once for each function it appears in
/home/Pux/ext/pux_functions.c: In function ‘my_zval_copy_ctor_func’:
/home/Pux/ext/pux_functions.c:123:14: error: ‘IS_CONSTANT_ARRAY’ undeclared (first use in this function)
         case IS_CONSTANT_ARRAY: {
              ^
/home/Pux/ext/pux_functions.c: In function ‘my_zval_copy_ctor_persistent_func’:
/home/Pux/ext/pux_functions.c:179:14: error: ‘IS_CONSTANT_ARRAY’ undeclared (first use in this function)
         case IS_CONSTANT_ARRAY: {
              ^
Makefile:193: recipe for target 'pux_functions.lo' failed
make: *** [pux_functions.lo] Error 1
Hey,
I'm trying to add a route to my website with **tools?p=K94rF** pattern and **_not_ /tools/K94rF**.
So i've written:
`$router->get('/tools?p=:p_id', [ToolsController::class, 'actionGetTools'], [
        'require' => [ 'p_id' => '[a-zA-Z0-9_-]{5}', ],
        'default' => [ 'p_id' => '', ]
    ]);`

And it is not working, so i tried to change it from ? to /, like this:
`$router->get('/tools/:p_id', [ToolsController::class, 'actionGetTools'], [
        'require' => [ 'p_id' => '[a-zA-Z0-9_-]{5}', ],
        'default' => [ 'p_id' => '', ]
    ]);`

And it works perfect.
I need the routing with ? (the first one), there is any other way to implement it ?

Thank you 😄 

Hi,
I am new to use this awesome library. I am having bit trouble to find an example of http 404 request. How do I handle 404 requests?

Current supported route types:
1. `Closure`
2. `[Controller, Action]`
3. `[Class, method]`
4. `[Object, method]`
5. `function()`

Since users can define the app in a closure, we should provide a tool to validate the closure prototype by using PHP Reflection API.

- method `generateClass` to generates static class code to reduce runtime overhead.
