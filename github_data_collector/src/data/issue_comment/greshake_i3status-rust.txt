This is possible as `ip` has a JSON output option.

Since have been working with dependencies a lot lately this had been getting on my mind.

Had a gander at some other crates like `tokio` and they do this there too.
Would be nice to be able to customize the load block similarly to how the CPU block can be customized with `info`, `warning` and `critical`.

The load on my system is generally high, so the load block is constantly blue or yellow, with no way to change it.

Also, if load goes above `0.9 * logical_cores`, state is set to `Idle` as it is the default. Load can go beyond `1 * logical_cores`, so the logic should probably be changed to something similar to the CPU block.

https://github.com/greshake/i3status-rust/blob/840ceb23230ee22a42c14d3faeab67610b6aea46/src/blocks/load.rs#L112-L117
fixes #422 
Using the music block like this:
```
[[block]]
block = "music"
on_collapsed_click = "spotify"
```
After clicking on it to launch `spotify` and starting music playback, 
going full-screen in i3 will cause it to pause music/freeze.

I reckon this is caused because spotify is lauched as a child process of i3status-rust, and going full-screen suspends both processes.

Launching spotify by other means, avoids this issue, but loses the convenience of the single interface for music control.

---

```
$ i3status-rs --version
i3status-rs 0.12.0
```

This adds a simple block to display the current time tracking status for [watson](http://tailordev.github.io/Watson/).

The module does not add any dependencies and is rather simplistic.
Right now it just supports {volume}. Defaults to {volume}%.
After not getting sysfs access to work, even with the udev rule mentioned in the documentation, I investigated how other applications/desktops are controlling the backlight brightness.

As it turns out, on systems governed by systemd-logind (or elogind), the correct way [according to the systemd developers](https://github.com/systemd/systemd/issues/14463#issuecomment-570190340) is the DBus interface of logind.

This commit uses this method as a fallback for when we cannot open the sysfs file. This works great on my system, but I'm not particularly attached to this method if you find it too surprising. If you'd rather like a configuration option to switch between two methods, I can implement that as well.
Prior to this `NaturalScrolling` option configured on XServer's input devices would lead to inverted behavior. The new functionality is enabled via a top level `scrolling = "natural"` line in the config file. The default is `scrolling = "reverse"`.