Hi there we are intermittently experiencing this error and it seems to be an issue with cglib (could be related to this https://github.com/cglib/cglib/issues/75), can you please investigate your usage of it?

We are using squeryl v0.9.14 & OpenJDK12


```
java.lang.LinkageError: loader scala.reflect.internal.util.ScalaClassLoader$URLClassLoader @79b4d0f attempted duplicate class definition for com.company.transaction.history.core.repository.model.OdsHolding$$EnhancerByCGLIB$$58bf1aa7_2. (com.company.transaction.history.core.repository.model.OdsHolding$$EnhancerByCGLIB$$58bf1aa7_2 is in unnamed module of loader scala.reflect.internal.util.ScalaClassLoader$URLClassLoader @79b4d0f, parent loader 'platform')
	java.base/java.lang.ClassLoader.defineClass1(Native Method)
	java.base/java.lang.ClassLoader.defineClass(ClassLoader.java:1016)
	java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	java.base/java.lang.reflect.Method.invoke(Method.java:567)
	net.sf.cglib.core.ReflectUtils.defineClass(ReflectUtils.java:459)
	net.sf.cglib.core.AbstractClassGenerator.generate(AbstractClassGenerator.java:339)
	net.sf.cglib.proxy.Enhancer.generate(Enhancer.java:492)
	net.sf.cglib.core.AbstractClassGenerator$ClassLoaderData$3.apply(AbstractClassGenerator.java:96)
	net.sf.cglib.core.AbstractClassGenerator$ClassLoaderData$3.apply(AbstractClassGenerator.java:94)
	net.sf.cglib.core.internal.LoadingCache$2.call(LoadingCache.java:54)
	java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	net.sf.cglib.core.internal.LoadingCache.createEntry(LoadingCache.java:61)
	net.sf.cglib.core.internal.LoadingCache.get(LoadingCache.java:34)
	net.sf.cglib.core.AbstractClassGenerator$ClassLoaderData.get(AbstractClassGenerator.java:119)
	net.sf.cglib.core.AbstractClassGenerator.create(AbstractClassGenerator.java:294)
	net.sf.cglib.proxy.Enhancer.createHelper(Enhancer.java:480)
	net.sf.cglib.proxy.Enhancer.create(Enhancer.java:324)
	org.squeryl.internals.PosoMetaData.$anonfun$_builder$1(PosoMetaData.scala:223)
	org.squeryl.internals.PosoMetaData.$anonfun$createSample$1(PosoMetaData.scala:207)
	org.squeryl.internals.FieldReferenceLinker$.executeAndRestoreLastAccessedFieldReference(FieldReferenceLinker.scala:101)
	org.squeryl.internals.PosoMetaData.createSample(PosoMetaData.scala:207)
	org.squeryl.dsl.AbstractQuery.createSubQueryable(AbstractQuery.scala:255)
	org.squeryl.dsl.boilerplate.Query1.<init>(Query1.scala:27)
	org.squeryl.dsl.boilerplate.FromSignatures.from(FromSignatures.scala:25)
	org.squeryl.dsl.boilerplate.FromSignatures.from$(FromSignatures.scala:24)
	com.company.common.database.SquerylCustomTypes$.from(SquerylCustomTypes.scala:11)
	org.squeryl.Queryable.where(Queryable.scala:33)
	org.squeryl.Queryable.where$(Queryable.scala:31)
	org.squeryl.View.where(View.scala:27)
```


thanks
Shannon
when i use squeryl as data storage layer with latest version in flink, i got java.lang.IncompatibleClassChangeError, it was raised when a  new class extend from schema, it was trait in v0.9.5-7,but then changed to class until now ,  so is it possible to change back to traitï¼Ÿ
Scala version- 2.11.12
sbt -1.2.6
jdk 1.8.191
squeryl : 0.9.13
cglib - 3.2.10 

`!clazzName.startsWith("net.sf.cglib.")` . is creating problem from my class and evaluates to false so columns are not selected in the query and generated query is - 
`select  from book` .  without any column name.

This is the Github link for my sample code
[https://github.com/rahulsharmaindia/Squeryl-Demo-ISSUE-259](https://github.com/rahulsharmaindia/Squeryl-Demo-ISSUE-259)
### Problem description
When a query is executed with `Query.headOption` the iterator if the query (and thus also the ResultSet and the PreparedStatement) is not closed properly.
Although the ResultSet is closed when the transaction/session terminates, this can lead to problems when executing a lot of queries in one transaction, like the  "maximum open cursors exceeded" error in Oracle databases.

This also happens in the lastest master version.

### How to reproduce
Connect to an oracle database, and then in one transaction and in a loop execute a query to a table with headOption:

```scala
object ExampleApp extends App {

  // Init db ...

  // Run tests
  println("Testing open Cursors ...")
  val myDao = new MyDAO
  inTransaction {
    for (i <- 0 to 20000) {  // Enter number > max cursors
      if (i % 100 == 0) println(s"$i ...")
      myDao.fetchByName("admin").get
    }
  }
  println("Testing open Cursors finished successfully.")

  class MyDAO {
    val table: Table[User] = MySchema.userT

    def fetchByName(name: String): Option[User] = inTransaction {
      table.where(_.login === name).headOption
    }
  }
}
```

After the configured numer of cursors in the database is reached, an error `java.sql.SQLException: ORA-01000: maximum open cursors exceeded` occurs.

### How to Fix
I believe the simplest solution would be for the `headOption` function to explicitely close the iterator it opened. Probably there is a solution the doesn't require the match to Closeable, e.g. by adding this interface to the declaration of `iterator` in the class Query.

```scala
def headOption = {
  val i = iterator
  try {
    if (i.hasNext)
      Some(i.next)
    else
      None
  } finally {
    i match {
      case c: Closeable => c.close()
    }
  }
}
```
Hi @xuwei-k,

Here are the various other changes from our fork that are general enough for inclusion on master. I'm happy to do the merge myself if you just want to approve. dd6d217 is a bug fix. Others are just things we use, but should be generally useful. 

Definitely no need to do another release any time soon unless you think dd6d217 warrants it.

When i do that:

```scala
case class RouteSchedule(routeStopId: Int = 0,
                         round: Int,
                         time: Timestamp,
                         dayCode: Int) extends KeyedEntity[CompositeKey3[Int, Int, Int]] {

  import org.squeryl.PrimitiveTypeMode._

  def id = compositeKey(routeStopId, round, dayCode)
  def dayType = DayType(dayCode)
  lazy val routeStops: ManyToOne[RouteStop] = ACrossSchema.routeScheduleToRouteConcreteStopRelation.right(this)

}
```

It's work, but when i just change this class to

```scala
case class RouteSchedule(routeStopId: Int = 0,
                         round: Int,
                         time: Timestamp,
                         dayCode: Int) extends KeyedEntity[CompositeKey3[Int, Int, Int]] with PrimitiveTypeMode {

  def id = compositeKey(routeStopId, round, dayCode)
  def dayType = DayType(dayCode)
  lazy val routeStops: ManyToOne[RouteStop] = ACrossSchema.routeScheduleToRouteConcreteStopRelation.right(this)

}
```
I have NPE while Schema.create.
Even though I am able to select and insert in tables that have one columns defined as a postgres enum type by using `dbType("my_enum_type").explicitCast`, I can't use the column in the where clause. 

If I do I get a `org.squeryl.SquerylSQLException`:
```
Exception while executing statement : ERROR: operator does not exist: company_type = character varying
[info]     Hint: No operator matches the given name and argument type(s). You might need to add explicit type casts.
[info]     Position: 287
[info]   errorCode: 0, sqlState: 42883
```


Table qualifier should be ` instead of ", prefix is not supported

```
Exception while executing statement : You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near '."name" as "rule_conf13_name",
  "rule_conf13"."expression_category" as "rule_co' at line 2
errorCode: 1064, sqlState: 42000
Select
  "rule_conf13"."name" as "rule_conf13_name",
  "rule_conf13"."expression_category" as "rule_conf13_expression_category",
  "rule_conf13"."createdTime" as "rule_conf13_createdTime",
  "rule_conf13"."interval" as "rule_conf13_interval",
  "rule_conf13"."id" as "rule_conf13_id",
  "rule_conf13"."expression" as "rule_conf13_expression",
  "rule_conf13"."receivers" as "rule_conf13_receivers",
  "rule_conf13"."origin" as "rule_conf13_origin",
  "rule_conf13"."status" as "rule_conf13_status",
  "rule_conf13"."template" as "rule_conf13_template",
  "rule_conf13"."updatedTime" as "rule_conf13_updatedTime",
  "rule_conf13"."object_id" as "rule_conf13_object_id"
From
  "rule_conf" "rule_conf13"
```
Any clues on what it would take to do this?

https://docs.snowflake.net/manuals/user-guide/snowsql.html