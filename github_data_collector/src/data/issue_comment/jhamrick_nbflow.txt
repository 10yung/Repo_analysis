Scons does not properly detect whether a notebook needs to be rebuilt when using the timeout option:
`scons timout=360`
Instead all notebooks will be rebuilt regardless if changes were made or not. 
Directly providing a dict `{'timeout':'360'}` to the setup in the SConstruct file does result in the same issue.
Issue occured on Arch Linux using Miniconda with Python 3.7.
Hello there!

I like to use [pydoit](http://pydoit.org/) as my build system; it supports Python3 and is quite extensible. This PR adds a module to `nbflow` for pydoit.

The folder `doit-example` shows how it works. It uses a `dodo.py` file, which follows a similar pattern to the scons example:

``` python
from nbflow.doit import create_build_tasks

def task_nbflow():
    yield from create_build_tasks(['analyses'])
```

Major kudos for your arch making this really easy to write!

Todos:
- [ ] Needs tests ;)
- [x] Works only with Python 3, which conflicts with he scons module and example notebooks. See [here](http://stackoverflow.com/questions/30492623/using-both-python-2-x-and-python-3-x-in-ipython-notebook) for instructions on putting Python 2 and 3 kernels side by side.
- [ ] Should possibly be its own package, something like `nbflow-doit`
- [x] A couple bugs have been fixed which I need to push downstream (more PRs incoming)
- [ ] If keeping in same project, update README

Cheers,
Camille

Can nbflow detect dependencies that can't be generated by nbconvert?

I have a use case for a notebook flow that has interaction early on. E.g., An interactive notebook (with a widget) in stage 1 defines a set of windows that I use to visualize data in stage 2. The window definition is best done interactively, so it can't be run by nbconvert (if I understand that right).

In my playing with nbflow, a dependency must be generated by a notebook with nbconvert in order to for the dependency identified by scons. That is, I defining __depends__ in stage 2 to a text file that I create with a text editor. Updating/editing that file did not trigger a build when running scons.

So I guess I'm hoping there's a way to get scons to identify the dependency in this use case. Any thoughts would be welcome. I'm experimenting at this point.

BTW, I saw your talk at the BIDS meetup last week. Great stuff!

Currently, nbflow only supports scons, but there's not really any reason why it can't in principle support other build systems. For example, I could support [waf](https://waf.io/) and then there would be python 3 support! :tada: 
