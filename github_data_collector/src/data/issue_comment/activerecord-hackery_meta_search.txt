I have a structure set up

``` rb
class Organization < ActiveRecord::Base
  has_many :groups
end

class Group < ActiveRecord::Base
  has_many :conversations, inverse_of: :group
  belongs_to :organization
end

class Conversation < ActiveRecord::Base
  belongs_to :group, inverse_of: :conversations
  has_many :messages, as: :subject
end

class Message < ActiveRecord::Base
  belongs_to :subject, polymorphic: true
end
```

When I run the following search, there are no issues. It works great.

``` rb
Message.search({subject_conversation_type_group_id_eq: 1}) 
# => [<#Message>, <#Message>]
```

**But here's the problem: If I add the next `belongs_to` association, it fails:**

``` rb
Message.search({subject_conversation_type_group_organization_id_eq: 1}) 
# => ActiveRecord::ConfigurationError: Association named 'group' was not found for 'Message'; perhaps you misspelled it?
```

Also, when running the search from the level above the polymorphism, it also works fine.

``` rb
Conversation.search({group_organization_id_eq: 1}) 
# => [<#Conversation>]
```

Running `Rails 3.0.20` and `Ruby 1.9.2-p320`

When search for `%` , meta_search will match any text, how can I match character `%`

For example: `50%`

if your model contains an attribute named "phone", then you may got an exception

For example if a model has an attribute phone, the preferred_method_name changes this to phodoes_not_equal (substitutes the ne in phone for does_not_equal since ne is an alias for does_not_equal).  Then in matches_attribute_method, you will get undefined method `captures' for nil:NilClass since method_name does not match anything as phodoes isnt the attribute.

I'm using meta_search 1.1.3 and discovered that it seems I can't trust present?/presence with a meta_search collection - they always return true, regardless of whether the result set has rows or not. 

```
User.where(id: 0).present?
=> false  
User.search(id_eq: 0).present?
=> true
```

I was a little surprised, as this is counter to what I would expect if I assume it has the same behaviour as with ActiveRelation. Is this by design, expected behaviour, or something that should be fixed?

Metasearch gets confused on fields like `foo_or_bar`. Can't create `foo_or_bar_equals=` search method as it thinks there are 2 columns in play.


I have a model "document" which users have different roles on. This role is extracted and shown in the search results table like so:

```
<% user_role = '---'
   user_role = 'Member' if (standard.user_ids.include? @current_user.id)
   user_role = 'Leader' if (standard.lead == @current_user)
   %>

<%= user_role %>
```

Is it possible to sort by the outcome of this logic instead of by something in the document model?

List of checkboxes for form helper generates array of params like this (I don't select any checkbox and use "id_in" predicate):

```
[""]
```

Validator pass them and gem generates wrong select like this:

``` sql
select * from smth where id in (NULL)
```

So my changes fix this issue

I have a User model:

``` ruby
class User < ActiveRecord::Base
  has_one :other_details
end
```

and then:

``` ruby
class OtherDetails < ActiveRecord::Base
  belongs_to :user
end
```

In my other_details table, i have a column named "receive_emails" that is a boolean, when i try to search by this attribute using:

``` ruby
f.check_box other_details_receive_emails_is_present
```

I get:

``` ruby
undefined method `other_details_receive_emails_is_present' for #<MetaSearch::Searches::User:0x007fbcd656def8>
```

After minutes of trying everything possible, i discovered this error is due the underscored column name (receive_emails). If i try another attribute (say "state") it works as expected.

Any workarounds to this particular issue? Am i forced to change this column name (remove the underscore?).

Thanks.
