I'm adopting an iOS that was developed over two years ago and has been sitting around since. Naturally, the first thing I did after cloning the repo was to pod install the dependencies. While all was successful, in an initial attempt to build the app I was thrown two errors that repeat countless times. the read:

```
Unknown type name 'Block' 
Property with 'copy' attribute must be of object type
```

I'm wondering if you've seen these errors before and perhaps know how to remedy it?

Specs:
App Minimum deployment: 7.1
Base SDK 10.3
Xcode: 8.3.3
Compiler: Apple LLVM 8.1
Architectures: armv7 armv7s arm64 
Strings that only contained the characters in the passed-in set were not trimmed to the empty string. This fixes that bug.

@sobri909 
Please consider this PR.
You're UIView category can be duplicate with personal categories or other pod categories and create a conflict.
Please let us the choice to not use yours.

Not auto size when remove box in MGBox, Please check!

 MGBox *section = (id)tempBox.parentBox;
 [section.boxes removeObject:tempBox];
 [section layout];

When I put a longpress handler on an MGBox - it gets called twice

Adding tests as part of the CocoaPods test jam.

What is the best approach to use this to lay out a list of vertically aligned columns? 

Should I lay out MGLines filled with a grid of fixed sized boxes within each row of MGLines?

Thank you for this fantastic tool!  I realize how much work this represents and it is truly pro-grade!

I would so love to see some examples of how you use it and I'd appreciate it if you could throw in a few examples of real world use to help me refine my approach to coding with this kit.  

Thanks again. 

UIScrollView doesn't automatically take into account contentSize changes on rotate, so can leave you at an offset that shows different content. 

If you're using the `boxProvider` system, you can now use `saveScrollOffset` and `restoreScrollOffset` to keep things looking sensible after rotate.  

``` smalltalk
- (void)willRotateToInterfaceOrientation:(UIInterfaceOrientation)orient
      duration:(NSTimeInterval)duration {
    [super willRotateToInterfaceOrientation:orient duration:duration];
    [self.scroller saveScrollOffset];
}

- (void)willAnimateRotationToInterfaceOrientation:(UIInterfaceOrientation)orient
      duration:(NSTimeInterval)duration {
    [super willAnimateRotationToInterfaceOrientation:orient duration:duration];
    [self.scroller restoreScrollOffset];
}
```

I'm throwing some working example code in here, but will shortly also write up some more formal documentation. 

``` smalltalk
- (MGScrollView *)scroller {
    if (_scroller) {
        return _scroller;
    }
    _scroller = [MGScrollView scrollerWithSize:self.view.size];
    _scroller.autoresizingMask = UIViewAutoresizingFlexibleHeight | UIViewAutoresizingFlexibleWidth;
    _scroller.contentLayoutMode = MGLayoutGridStyle;
    _scroller.boxProvider = self.boxProvider;
    return _scroller;
}
```

``` smalltalk
- (MGBoxProvider *)boxProvider {
    if (_boxProvider) {
        return _boxProvider;
    }

    _boxProvider = MGBoxProvider.provider;

    // returns raw empty boxes 
    _boxProvider.boxMaker = ^{
        return [SGPadPerformerCell boxWithSize:(CGSize){250, 250}];
    };

    __weakSelf me = self;

    // is given a fresh box or a reused box, and customises it based on given index
    _boxProvider.boxCustomiser = ^(SGPadPerformerCell *box, NSUInteger index) {
        box.performer = me.performers[index];
        __weak SGPadPerformerCell *wBox = box;
        box.onTap = ^{
            id controller = [SGPadTeamController controllerForItem:wBox.performer];
            [me.navigationController pushViewController:controller animated:YES];
        };
    };

    _boxProvider.boxKeyMaker = ^id(NSUInteger index) {
        return [me.performers[index] key];
    };

    _boxProvider.boxSizeMaker = ^(NSUInteger index) {
        return (CGSize){250, 250};
    };

    _boxProvider.boxMarginMaker = ^(NSUInteger index) {
        return UIEdgeInsetsMake(4, 4, 0, 0);
    };

    // returns the total boxes count
    _boxProvider.counter = ^{
        return me.performers.count;
    };

    return _boxProvider;
}
```
