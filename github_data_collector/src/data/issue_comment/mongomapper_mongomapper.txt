
Hi MongoMapper team!

Please explain, `attributes` is a valid name for key or not?

If yes, could you please complain about that to stderr/stdout while you see user tries to create such attribute? We spending a lot of time founding why our app not working with such key name.. 

```
class Point
  include MongoMapper::Document
  key :name_id, ObjectId
  key :value, Float
  key :attributes, Hash, {}
...
end
```
Thank you!
I am using gem mongomapper in my rails application. I have installed mongo and there is mongo router which managing different mongo instances. The schema which I am using in my rails application requires username and password to connect. when I am connecting this schema from mongo console I am able to successfully pass through but it fails when the same thing tries from my rails application. I am getting mongo authentication error.  Here are the logs 
`/usr/local/rvm/gems/ruby-1.9.3-p374/gems/mongo-1.11.1/lib/mongo/functional/authentication.rb:205:in `issue_authentication': Failed to authenticate user 'xxxxx' on db 'xxxxxx'. (Mongo::AuthenticationError)
from /usr/local/rvm/gems/ruby-1.9.3-p374/gems/mongo-1.11.1/lib/mongo/functional/authentication.rb:135:in `add_auth'
from /usr/local/rvm/gems/ruby-1.9.3-p374/gems/mongo-1.11.1/lib/mongo/db.rb:159:in `authenticate'
from /usr/local/rvm/gems/ruby-1.9.3-p374/gems/mongo_mapper-0.12.0/lib/mongo_mapper/connection.rb:83:in `connect'
from /usr/local/rvm/gems/ruby-1.9.3-p374/gems/mongo_mapper-0.12.0/lib/mongo_mapper/connection.rb:89:in `setup'`


**Linux:** Ubuntu 17.04
**Ruby version:**  2.3.1
**mongodb:** 3.2.11

Any idea what could be going wrong ? Should I update/downgrade something ? 

Cheers

Matias

```
2.3.1 :002 > MongoMapper.connection = ::Mongo::Connection.new('localhost',27017)
ArgumentError: wrong number of arguments (given 2, expected 1)
	from /usr/local/rvm/gems/ruby-2.3.1/gems/bson-1.12.5/lib/bson/bson_c.rb:24:in `deserialize'
	from /usr/local/rvm/gems/ruby-2.3.1/gems/bson-1.12.5/lib/bson/bson_c.rb:24:in `deserialize'
	from /usr/local/rvm/gems/ruby-2.3.1/gems/mongo-1.12.5/lib/mongo/networking.rb:238:in `read_documents'
	from /usr/local/rvm/gems/ruby-2.3.1/gems/mongo-1.12.5/lib/mongo/networking.rb:184:in `receive'
	from /usr/local/rvm/gems/ruby-2.3.1/gems/mongo-1.12.5/lib/mongo/networking.rb:146:in `receive_message'
	from /usr/local/rvm/gems/ruby-2.3.1/gems/mongo-1.12.5/lib/mongo/cursor.rb:551:in `block in send_initial_query'
	from /usr/local/rvm/gems/ruby-2.3.1/gems/mongo-1.12.5/lib/mongo/functional/logging.rb:55:in `block in instrument'
	from /usr/local/rvm/gems/ruby-2.3.1/gems/mongo-1.12.5/lib/mongo/functional/logging.rb:20:in `instrument'
	from /usr/local/rvm/gems/ruby-2.3.1/gems/mongo-1.12.5/lib/mongo/functional/logging.rb:54:in `instrument'
	from /usr/local/rvm/gems/ruby-2.3.1/gems/mongo-1.12.5/lib/mongo/cursor.rb:547:in `send_initial_query'
	from /usr/local/rvm/gems/ruby-2.3.1/gems/mongo-1.12.5/lib/mongo/cursor.rb:532:in `refresh'
	from /usr/local/rvm/gems/ruby-2.3.1/gems/mongo-1.12.5/lib/mongo/cursor.rb:139:in `next'
	from /usr/local/rvm/gems/ruby-2.3.1/gems/mongo-1.12.5/lib/mongo/db.rb:607:in `command'
	from /usr/local/rvm/gems/ruby-2.3.1/gems/mongo-1.12.5/lib/mongo/mongo_client.rb:542:in `block in check_is_master'
	from /usr/local/rvm/rubies/ruby-2.3.1/lib/ruby/2.3.0/timeout.rb:91:in `block in timeout'
	from /usr/local/rvm/rubies/ruby-2.3.1/lib/ruby/2.3.0/timeout.rb:101:in `timeout'
	from /usr/local/rvm/gems/ruby-2.3.1/gems/mongo-1.12.5/lib/mongo/mongo_client.rb:541:in `check_is_master'
	from /usr/local/rvm/gems/ruby-2.3.1/gems/mongo-1.12.5/lib/mongo/mongo_client.rb:395:in `connect'
	from /usr/local/rvm/gems/ruby-2.3.1/gems/mongo-1.12.5/lib/mongo/mongo_client.rb:656:in `setup'
	from /usr/local/rvm/gems/ruby-2.3.1/gems/mongo-1.12.5/lib/mongo/mongo_client.rb:179:in `initialize'
	from /usr/local/rvm/gems/ruby-2.3.1/gems/mongo-1.12.5/lib/mongo/legacy.rb:52:in `initialize'
	from (irb):2:in `new'
	from (irb):2
	from /usr/local/rvm/rubies/ruby-2.3.1/bin/irb:11:in `<main>'
```
Using fixnum in ruby 2.4 generate warnings. change shouldn't have any real world impact (unless someone has a replica set with 2^63 members)
I have device model which is default mapped with device collection but based on some user permission I need to map this model to some different table having the same attributes so the data can be fetched from this new collection.
These instructions do not work:
http://mongomapper.com/documentation/getting-started/sinatra.html

The required gems to run mongo_mapper with sinatra seems to be:
```
gem 'sinatra'
gem 'activemodel-serializers-xml'
gem 'active_model_serializers'
gem 'mongo_mapper'
gem 'bson_ext' #well, sort of optional but highly recommended
```
Mongo mapper it is not compatible with mongodb 3.4.

Because it depends on mongo gem ~> 1.8 which does not support mongodb 3.x

Is there a way to enable the support with mongo 3.x?
This PR changes badges to use SVG.
Ended up needing this, and whipped it up. It's not on by default (since the requisite libs may not be in a particular project) but can be included easily enough via `MongoMapper::Document.plugin MongoMapper::Plugins::StrongParameters`.