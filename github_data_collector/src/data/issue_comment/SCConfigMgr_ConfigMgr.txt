According to the log, following parameters are used to extract the package 

> Info: Using Hewlett-Packard silent switches: **-PDF -F**C:\Program Files\SCConfigMgr\Driver Automation Tool\Temp\HPBIOSTemp\ZBook Studio x360 G5 Convertible Workstation\Extract\ **-S -E**

The -PDF parameter dosen 't seem to work, I downloaded the BIOS exe file manually , please see the attachment 
![2020-01-10_1213](https://user-images.githubusercontent.com/29057819/72149192-e4871d00-33a2-11ea-92a1-7b77c9a1ba4b.png)

I'm referring to the setting within Package Options "**Clean Up Unused Drivers**" _Remove drivers not referenced by driver packages_.

I assume this is to remove the previous driver package source locations which were dependent upon beforehand but now becoming superseded.

So as of now if I run the tool and it finds a newer version of bios/drivers available for download the older bios/driver files remain on the server even though they are no longer being targeted.

Thank you
So I was attempting to use this script on a Dell Optiplex 7010, and the script kept failing. Looking at the logs, below is what it was detecting:

-Manufacturer determined as: Dell
-Computer model determined as: OptiPlex 7010
-Computer SKU determined as: OptiPlex 7010
-Fallback SKU determined as: 0577

After this, once it finds the 7010 driver package, we see this in the logs:

-Attempting to find a match for driver package: Drivers - Dell OptiPlex 7010 - Windows 10 x64
-Unable to match computer model using detection method: SystemSKU (OptiPlex 7010)
-Fallback from SystemSKU match found for computer model instead using detection method: SystemSKU
-Driver package does not meet computer model, manufacturer and operating system and architecture criteria: Drivers - Dell OptiPlex 7010 - Windows 10 x64

So we can see the script detects the SKU as a fallback, and the model as the SKU. I didn't dig into the SKU detection logic, but figured I'd look at the fallback, as if it's detecting that, it should still work. Looking at the script, there are only 3 references to the $FallBackSKU variable. and those are as follows:

Line 598: `$FallBackSKU = [regex]::Matches($OEMString, '\[\S*]')[0].Value.TrimStart("[").TrimEnd("]")`

Line 610-612:
        `if (-not ([string]::IsNullOrEmpty($FallBackSKU))) {
		Write-CMLogEntry -Value "Fallback SKU determined as: $FallBackSKU" -Severity 1
	}`

So really, the variable is detected, filled, and logged, but never used.

To make it work, I simply added a clause to the if statement on line 813, which now reads:
`if (($Package.PackageManufacturer -match $ComputerManufacturer) -and ($Package.PackageName -match $OSName) -and ($Package.PackageName -match $OSImageArchitecture) -and (($Package.PackageDescription -match $SystemSKU) -or ($Package.PackageDescription -match $FallBackSKU))) {`

The change is the statement after the last -and. Previously, it didn't reference the $FallBackSKU variable, but now that it does, if either the $SystemSKU or $FallBackSKU are in the package description (which was already the case with the 7010), then the statement will evaluate as true.

This worked as a fix at 4:45, so there may be a better way to fix this, but that's what I found that worked for my scenario. Please let me know if you need any additional information, validation, or testing.
Hi,

There's an issue with Invoke-CMApplyDriverPackage.ps1 on line 889:
https://github.com/SCConfigMgr/ConfigMgr/blob/5005be8d0477d4b7d71a1084b0c4137710bc625e/Operating%20System%20Deployment/Drivers/Invoke-CMApplyDriverPackage.ps1#L889

The DISM command will fail if there's a space in the driver path. I changed it from `/Driver:$($DriverINF.FullName)"` to ``/Driver:`"$($DriverINF.FullName)`""`` which solved it in our environment.
hi all,
Don't know if this is the right place or what. first post.  I think the driver automation tool is the best things since SCCM came out... the old version. 

found an issue downloading Lenovo X1 Gen 5, Gen 4 and Yoga gen 2 drivers in the automation tool for windows 10 1809.  

in the automation tool, i select the proper fields in the automation tool.  when the automation tool downloads the drivers, it downloads the wrong version (example, 1803 or 1703 drivers when i choose 1809).

after a lot of troubleshooting and XML combing.  I think the script or the automation tool is ending with the wrong search info with the date stamp in the name of the EXE file Lenovo uses with the windows 10 version of 1809.
tp_x1carbon_mt20hq-20hr-20k3-20k4_w1064_1803_20**1809**.exe - this driver file is obviously for 1803 (check https://datacentersupport.lenovo.com/us/en/downloads/ds120420 to verify)


Hope this helps a few of you figure out why drivers may not be working correctly.





proxy settings in dat doesn't seem to be working... work around is to set it on internet explorer settings and leave dat settings blank
## Bug Description
If a wrong package id (which is not a operating system image package) is defined in the task sequence variable `OSImagePackageId` the script failed with the following error during an OSD tasksequence:  
**Snippet from smsts.log**
```
<![LOG[CommandLine: '"X:\WINDOWS\system32\windowspowershell\v1.0\powershell.exe" -NoProfile -NonInteractive -ExecutionPolicy Bypass -Command "& 'C:\_SMSTaskSequence\Packages\P0100059\Invoke-CMApplyDriverPackage.ps1' -URI "http://<FQDN PrimarySiteServer>/ConfigMgrWebService/ConfigMgr.asmx" -SecretKey "<MYSECRETKEY>" -Filter "Drivers" -OSImageTSVariableName OSImagePackageId ; exit ($LASTEXITCODE -bor [int](-not $? -and -not $LASTEXITCODE)) "']LOG]!><time="11:08:18.081-60" date="11-04-2019" component="RunPowerShellScript" context="" type="1" thread="1476" file="main.cpp:462">
<![LOG[Executing command line: Run PowerShell Script with options (0, 4)]LOG]!><time="11:08:18.081-60" date="11-04-2019" component="RunPowerShellScript" context="" type="0" thread="1476" file="CommandLine.cpp:822">
<![LOG[Process completed with exit code 1]LOG]!><time="11:08:32.784-60" date="11-04-2019" component="RunPowerShellScript" context="" type="0" thread="1476" file="CommandLine.cpp:1136">
<![LOG[C:\_SMSTaskSequence\Packages\P0100059\Invoke-CMApplyDriverPackage.ps1 : Cannot validate argument on parameter ]LOG]!><time="11:08:32.784-60" date="11-04-2019" component="RunPowerShellScript" context="" type="3" thread="1476" file="main.cpp:67">
<![LOG['InputObject'. The argument is null or empty. Provide an argument that is not null or empty, and then try the command ]LOG]!><time="11:08:32.784-60" date="11-04-2019" component="RunPowerShellScript" context="" type="3" thread="1476" file="main.cpp:67">
<![LOG[again.]LOG]!><time="11:08:32.784-60" date="11-04-2019" component="RunPowerShellScript" context="" type="3" thread="1476" file="main.cpp:67">
<![LOG[At line:1 char:1]LOG]!><time="11:08:32.784-60" date="11-04-2019" component="RunPowerShellScript" context="" type="3" thread="1476" file="main.cpp:67">
<![LOG[+ & 'C:\_SMSTaskSequence\Packages\P0100059\Invoke-CMApplyDriverPackage. ...]LOG]!><time="11:08:32.785-60" date="11-04-2019" component="RunPowerShellScript" context="" type="3" thread="1476" file="main.cpp:67">
<![LOG[+ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~]LOG]!><time="11:08:32.785-60" date="11-04-2019" component="RunPowerShellScript" context="" type="3" thread="1476" file="main.cpp:67">
<![LOG[    + CategoryInfo          : InvalidData: (:) [Invoke-CMApplyDriverPackage.ps1], ParameterBindingValidationException]LOG]!><time="11:08:32.785-60" date="11-04-2019" component="RunPowerShellScript" context="" type="3" thread="1476" file="main.cpp:67">
<![LOG[    + FullyQualifiedErrorId : ParameterArgumentValidationError,Invoke-CMApplyDriverPackage.ps1]LOG]!><time="11:08:32.785-60" date="11-04-2019" component="RunPowerShellScript" context="" type="3" thread="1476" file="main.cpp:67">
<![LOG[ ]LOG]!><time="11:08:32.785-60" date="11-04-2019" component="RunPowerShellScript" context="" type="3" thread="1476" file="main.cpp:67">
<![LOG[PowerShell command line returned code 1]LOG]!><time="11:08:32.785-60" date="11-04-2019" component="RunPowerShellScript" context="" type="1" thread="1476" file="main.cpp:475">
```

**ApplyDriverPackage.log**
```
<![LOG[===== SCConfigMgr Invoke-CMApplyDriverPackage Version 2.2.3 ====]LOG]!><time="11:08:20.230-60" date="11-04-2019" component="ApplyDriverPackage" context="NT AUTHORITY\SYSTEM" type="1" thread="2328" file="">
<![LOG[Driver download package process initiated]LOG]!><time="11:08:20.27260" date="11-04-2019" component="ApplyDriverPackage" context="NT AUTHORITY\SYSTEM" type="1" thread="2328" file="">
<![LOG[Manufacturer determined as: Hewlett-Packard]LOG]!><time="11:08:20.59660" date="11-04-2019" component="ApplyDriverPackage" context="NT AUTHORITY\SYSTEM" type="1" thread="2328" file="">
<![LOG[Computer model determined as: HP EliteBook 840 G5]LOG]!><time="11:08:20.59760" date="11-04-2019" component="ApplyDriverPackage" context="NT AUTHORITY\SYSTEM" type="1" thread="2328" file="">
<![LOG[Computer SKU determined as: 83B2]LOG]!><time="11:08:20.60060" date="11-04-2019" component="ApplyDriverPackage" context="NT AUTHORITY\SYSTEM" type="1" thread="2328" file="">
<![LOG[Retrieved a total of 6 driver packages from web service]LOG]!><time="11:08:26.96160" date="11-04-2019" component="ApplyDriverPackage" context="NT AUTHORITY\SYSTEM" type="1" thread="2328" file="">
<![LOG[Attempting to detect OS Image data from task sequence, running in DeploymentType: BareMetal]LOG]!><time="11:08:26.98160" date="11-04-2019" component="ApplyDriverPackage" context="NT AUTHORITY\SYSTEM" type="1" thread="2328" file="">
<![LOG[Multiple OS Image objects detected. Objects will be matched against provided task sequence variable name 'OSImagePackageId' to determine the correct object]LOG]!><time="11:08:32.52960" date="11-04-2019" component="ApplyDriverPackage" context="NT AUTHORITY\SYSTEM" type="1" thread="2328" file="">

```

## Root Cause
The function `Get-OSImageData` does not validate if the given PackageId is a valid Operating System Image package.  
If the PackageId is not an Operating System Image package, the function does not return anything.
This results in an `ParameterArgumentValidationError` exception when the script runs the following line ([Line 654](https://github.com/Wav3/ConfigMgr/blob/45bbab77308328d0a955b8d1f30719bf1623a481/Operating%20System%20Deployment/Drivers/Invoke-CMApplyDriverPackage.ps1#L654)):
```powershell
$OSDetails = Get-OSDetails -InputObject $OSImageVersion
```

## Solution Description
The function `Get-OSImageData` now perform a check if the variable `$PSCustomObject` is null when trying to select the OS Image matching the value in the task sequence variable `OSImageTsVariableName`.  
If the value is null, a log entry is created and the script exits with the exit code 4.
Hello,

I have been having some issues with the Dell 5289 BIOS management and I was wondering if there's a workaround to my issue. Dell 5289 BIOS updates are weird because you can't just upgrade to the latest version you have to do it incrementally based on the BIOS version currently installed in the system. Please let me know if there's a workaround if not we will do these models manually then.

Thanks!
So we tried to put the Webservice behind a load balancer to make HTTPS sligtly easier. And the Webservice is returning the wrong address. Basically it should be https://loadbalancedaddress/..., but it Returns http://loadbalancedaddress:portnumber/… 
This causes a Connection error in the script. 
I noticed this by testing the Webservice using SoapUI where it seemed to work without problems. But i did notice the wrong address being returned.
Current workaround we are using is just adding a $WebService.URL = "CORRECTADDRESS" to the script. 
Im still verifying if this is a Webservice problem or a, im an idiot that has configured something wrong problem. But i thought i would let you know regardless. 