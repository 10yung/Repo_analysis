Hey!

Today my envoy proxy stopped working after I rebuild my Docker image

I am getting that error using your example:
```
[2020-01-19 03:38:58.528][6][critical][main] [source/server/server.cc:94] error initializing configuration '/etc/envoy.yaml': Proto constraint validation failed (Using deprecated option 'envoy.api.v2.route.CorsPolicy.allow_origin' from file route_components.proto. This configuration will be removed from Envoy soon. Please see https://www.envoyproxy.io/docs/envoy/latest/intro/deprecated for details. If continued use of this field is absolutely necessary, see https://www.envoyproxy.io/docs/envoy/latest/configuration/operations/runtime#using-runtime-overrides-for-deprecated-features for how to apply a temporary and highly discouraged override.): allow_origin: "*"
allow_methods: "GET, PUT, DELETE, POST, OPTIONS"
allow_headers: "keep-alive,user-agent,cache-control,content-type,content-transfer-encoding,custom-header-1,x-accept-content-transfer-encoding,x-accept-response-streaming,x-user-agent,x-grpc-web,grpc-timeout"
expose_headers: "custom-header-1,grpc-status,grpc-message"
max_age: "1728000"
```

**Dockerfile**

```
# This configuration will build a Docker container containing
# an Envoy proxy that routes to Google.

FROM envoyproxy/envoy-dev:latest
RUN apt-get update
COPY envoy.yaml /etc/envoy.yaml
CMD /usr/local/bin/envoy -c /etc/envoy.yaml
```
I want to use it in production, but there is no update for long time :(
I cloned this repository, and run `docker-compose up -d node-server envoy commonjs-client`, but failed with the error `Error code: 14 "upstream connect error or disconnect/reset before headers. reset reason: connection failure"`

![failedd](https://user-images.githubusercontent.com/31976113/72199425-43ba5f80-347f-11ea-8722-cfbb53ac9dd8.gif)

Hi all,

I have a very basic question and cannot find an answer yet.

This is what I have from docs:

```ts
const echoService = new EchoServiceClient('http://localhost:8080', null, null);
```

That's all fine until it comes to deployment to the real world where I have just one domain (let's say this is a limitation) and want to split the traffic by path prefixes as one normally does in REST.

In other words this is the desired URL structure:

- web app: https://example.com
- grpc-web proxy: https://example.com/grpc-proxy

and the configuration of the client would be

```ts
const echoService = new EchoServiceClient('https://example.com/grpc-proxy', null, null);
```

or even more preferrable

```ts
const echoService = new EchoServiceClient('/grpc-proxy', null, null);
```

There is an option to configure some sort of path prefix strip and make one more proxy step on the envoy itself, so it looks something like

```
browser => envoy proxy strip path prefix => envoy grpc web proxy => grpc server
```

However, it looks dirty. 

And I am still unsure whether the `grpc-web` library itself is going to support the non-root path prefixes such as described above in the long run .

Is this possible? Is there an example how to configure envoy in this case?

Thanks in advance.
We are running a grpc-python server on a k8s cluster with knative. We are able to connect to the server from a grpc-node client but struggle to set up the connection from a grpc-web client. Has anyone done that?

If I am not mistaken we are able to circumvent the istio-gateway and envoy sidecar in the case of the grpc-node call by connection to `service.namespace.cluster:port` but have to go through that for grpc-web. 

We tried following [this blog post](https://venilnoronha.io/seamless-cloud-native-apps-with-grpc-web-and-istio) which sets up a connection with a service through the istio gateway but we struggle to convert it to a knative setup.
Allows the specification of "commonjs" as an import style, as documented here: https://github.com/grpc/grpc-web#import-style
I do have a simple service which provides a server streaming to all users connected via grpc-web and a simple unary call to send a message to a specific user.

My question is, how can I send something to all grpc connected users ? what is the best approach?
I was thinking to store all connected users in a go map structure and then iterate over it, but this method doesn't really scale in case if I have multiple services. 

```
service NotificationsService {
    rpc SendNotificationMessage(NotificationMessageRequest) returns (NotificationMessageResponse) {};
    rpc GetLatestNotifications(NotificationsRequest) returns (stream NotificationsResponse) {};
}
```
Hello,

There seems to be an issue with the capitalization of the header names. It seems that everything under this repository expects lowercase capitalization for the header names.
This is a bit odd, seeing that header names are usually capitalized on each word.
`Grpc-Message` vs `grpc-message`.

The golang proxy of improbable engineering returns the former, `Grpc-Message` and `Grpc-Status` which causes the error handling to fail in the grpc-web javascript client. The callback for the request is never called if an error is returned. Manually editing these to include the caps solves the issue.

Note: I believe this might also the issue causing #415 
This fixes that a grpc-status in the response header resulted in double execution of the callback that was provided to the rpcCall (https://github.com/grpc/grpc-web/issues/632)

In the echoAbort exampl to test grpc error response codes, this bug (https://github.com/grpc/grpc-web/issues/632) was not hit, because the used server library (grpc-js) is not fully compliant with other grpc server libraries. It seems that the grpc-js library is not sending grpc-status response headers in the same way as the golang, c++ implementations or that these headers are removed by envoy if grpc-js is used (this needs to be confirmed separately). In my tests, I found that simply changing the npm package to the native "grpc" library in the provided examples would result in the bug mentioned above. Therefore, I suggest to switch to the grpc npm package in the examples (i.e. grpc-js is still in beta).
If you run the docker file for 16.04:
https://github.com/grpc/grpc-web/blob/master/net/grpc/gateway/docker/ubuntu_16_04/Dockerfile

It will fail to compile the Nginx proxy, stating:
`/github/grpc-web/net/grpc/gateway/protos/pair.pb.cc:80:13: error: 'dynamic_init_dummy_pair_2eproto' defined but not used [-Werror=unused-variable]
 static bool dynamic_init_dummy_pair_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_pair_2eproto), true);
             ^
cc1plus: all warnings being treated as errors
make[2]: *** [objs/addon/protos/pair.pb.o] Error 1
objs/Makefile:1466: recipe for target 'objs/addon/protos/pair.pb.o' failed
make[2]: Leaving directory '/github/grpc-web/third_party/nginx/src'
make[1]: *** [all] Error 2
Makefile:8: recipe for target 'all' failed
make[1]: Leaving directory '/github/grpc-web/third_party/nginx/src'
make: *** [nginx_static] Error 2
Makefile:72: recipe for target 'nginx_static' failed
The command '/bin/sh -c cd /github/grpc-web &&   make' returned a non-zero code: 2`

I could go in and ignore this warning. But, if this is an issue, I know others will be running on 16.04

I only found this because I'm running an Ubuntu 16.04 base with those RUN commands plus a few of my own. Running this Dockerfile from the latest master will fail.

But in node:10-stretch, with the same commands will successfully compile.

Running them one at a time in a clean Ubuntu 16.04, there is an issue after running make install in the third_party/grpc and it doesn't initialize correctly third_party/grpc/third_party/protobuf. 

I can move to node:10-stretch for the time, but I need to get this figured out