
Continuation of https://github.com/RubyMoney/money/pull/914. Allows each Money instance to hold its own infinite_precision setting
Continuation of https://github.com/RubyMoney/money/pull/913
Continuation of https://github.com/RubyMoney/money/pull/912
Extracted from https://github.com/RubyMoney/money/pull/886
Hi,
money doesn't fallback to my locales despite:

``Money.locale_backend = :i18n``

I'm testing this through spree (master) that extends money in /core/lib/spree/money.rb

I have to do:
```
uyu = {
    "priority": 100,
    "iso_code": "UYU",
    "name": "Uruguayan Peso",
    "symbol": "$U",
    "alternate_symbols": ["$U"],
    "subunit": "CentÃ©simo",
    "subunit_to_unit": 100,
    "symbol_first": true,
    "html_entity": "$U",
    "decimal_mark": ",",
    "thousands_separator": ".",
    "iso_numeric": "858",
    "smallest_denomination": 100
}

`Money::Currency.register(uyu)
```

To see "$U" instead of "&#x20B1;"

Can you check this. 
Thanks, MateoLa

I called `.round(2)` on an object which I did not recognize as being a Money object. Contrary to BigDecimal's `round` method, the first argument actually sets the rounding_mode. I find this very confusing and harmful. 

This creates the following rather unexpected output:

```
total = Money.new(13160) * 1.21
total
=> #<Money fractional:15924>

total.round(2)
=> #<Money fractional:15923>

total.to_d.round(2)
=> 0.15924e3
```

You can imagine how this can easily create confusing scenarios with rounding errors.
```
#!/usr/bin/env ruby

require 'money/rates_store/memory'

store = Money::RatesStore::Memory.new

threads = []

expected_rate = 1.5

1000.times do
	threads << Thread.new do
		while true
			currency1 = ("A".ord..."Z".ord).to_a.sample(3).map(&:chr).join
			currency2 = ("A".ord..."Z".ord).to_a.sample(3).map(&:chr).join
			
			store.add_rate(currency1, currency2, expected_rate)
			rate = store.get_rate(currency1, currency2)
			
			if rate != expected_rate
				puts "Rate #{rate.inspect} != #{expected_rate.inspect}"
			end
		end
	end
end

threads.each(&:join)
```

MRI is okay, JRuby shows the problem (rates are not equal).

Because if a thread enters `#transaction`

https://github.com/RubyMoney/money/blob/3ca8a3b95a1230315b5b4e19982b3520a734ad11/lib/money/rates_store/memory.rb#L64-L76

Any subsequent thread does not acquire the mutex so you end up corrupting the hash table.
Some systems are set up in a way where the assume that #cents
will always return 100 times the value displayed by #format.
This is only the case for currencies with subunit_to_unit ratio 100.

In order to cater to the needs of those systems without altering
the behavior of the gem we introduce a convience method which
anihilates the effect of subunit_to_unit ratio.
I fixed the low hanging fruits without breaking the specs (at least
locally).

Rules that could not be fixed that easy were added as exception to the
`.rubocop.yml` configuration file.

Some of those exceptions might be fixable with some code recatoring,
which might be a good point to start with future PRs.

See #815