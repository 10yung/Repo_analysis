既然此方法是根据地址去查询handler，就应该仅返回handler即可，而不应该把handler的block执行了，这样会导致在调用此查询方法时，触发handler代码块的执行
```
+ (id)objectForURL:(NSString *)URL withUserInfo:(NSDictionary *)userInfo
{
    MGJRouter *router = [MGJRouter sharedInstance];
    
    URL = [URL stringByAddingPercentEscapesUsingEncoding:NSUTF8StringEncoding];
    NSMutableDictionary *parameters = [router extractParametersFromURL:URL matchExactly:NO];
    MGJRouterObjectHandler handler = parameters[@"block"];
    
    if (handler) {
        if (userInfo) {
            parameters[MGJRouterParameterUserInfo] = userInfo;
        }
        [parameters removeObjectForKey:@"block"];
        return handler(parameters);
    }
    return nil;
}
```
调用[MGJRouter canOpenURL:@"app-settings:"]返回YES，调用[MGJRouter canOpenURL:@"tel://10086"]返回NO，同样是打开系统scheme，返回结果却不相同
请问router+protocol的方案在哪里
项目包含主工程和2个子工程，工程之间要如何交互，注册要在哪个工程？
如果主工程register了，子工程openURL，貌似不是同一个Router，所以没触发到register的回调
首先，请恕我学识浅薄。
我感觉app内的跳转，下面的就可以胜任了，而且可以在data里面传callback，下级页面直接回掉callback刷新上级页面
```
class func pushToController(_ vcName:String,data:AnyObject?) {
        var cls = NSClassFromString(vcName) as? UIViewController.Type
        let vc = cls!.init()
        self.pushToController(vc, data: data)
    }
```
还请大佬有空回复一下
什么时候新增Carthage支持啊

In Swift lanuage, + (void)registerURLPattern:(NSString *)URLPattern toHandler:(MGJRouterHandler)handler; have a error: Ambiguous use of 'registerURLPattern'
如题，swift在使用open方法时设置了block：
MGJRouter.openURL(actionURL, withUserInfo: [:], completion: { _ in
                Print("ssss")
            })
在注册时调用registerURLPattern取“MGJRouterParameterCompletion”保存的内容，执行block：
 if let openURLCallbacks = parameters["MGJRouterParameterCompletion"] as? ()->() {
                openURLCallbacks()
            }
但是openURLCallbacks()并不会执行。
场景：控制器A------->控制器B（VC1跳转到VC2，在VC2的页面发起请求,成功后，用代理的方式，回调到VC1中，实现某些操作。）

现在想用MGJ路由的方式来实现，跳转是实现了，但是遇到这种类似delegate中回调改怎么处理。

控制器A调用openURL进行跳转。
控制器B是要跳转的目标，在控制器B的+load方法中，调用reigster方法，同时创建控制器B对象，并push.


现在需求是跳转到控制器B之后，发送了一个网络请求，当请求成功后，会回调到控制器A，做一个刷新的操作。这个该怎么办？

之前是定一个了一个协议，控制器A去实现这个方法。