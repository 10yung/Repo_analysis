I don't understand the function of flag in example2 how_to_determine_if_a_thread_has_started (12.2). The scripts works fine when I remove the flag part likes below.
```
import threading
import time
class PeriodicTimer:
    def __init__(self, interval):
        self._interval = interval
        self._cv = threading.Condition()
    
    def start(self):
        t = threading.Thread(target=self.run)
        t.daemon = True
        t.start()
    
    def run(self):
        print('running start')
        while True:
            time.sleep(self._interval)
            with self._cv:
                self._cv.notify_all()
    
    def wait_fot_tick(self):
        with self._cv:
            self._cv.wait()


ptimer = PeriodicTimer(5)
ptimer.start()

def countdown(nticks):
    print('countdown start')
    while nticks > 0:
        ptimer.wait_fot_tick()
        print('T-minus', nticks)
        nticks -= 1


def countup(last):
    n = 0
    print('counting start')
    while n < last:
        ptimer.wait_fot_tick()
        print('Counting', n)
        n += 1


threading.Thread(target=countdown, args=(10,)).start()
threading.Thread(target=countup, args=(5,)).start()
```

should be re.compile(r'"(.*)"')
because with r'...', backslashes will be remained
so the findall should return [],The fix should be to delete the two backslashes.
The code has missed ignore_types arg when calling the method of `flatten` recursively in the example about how to flatten a nested sequence.

 `src/4/how_to_flatten_a_nested_sequence/example.py`

```python
from collections import Iterable

def flatten(items, ignore_types=(str, bytes)):
    for x in items:
        if isinstance(x, Iterable) and not isinstance(x, ignore_types):
            yield from flatten(x)
        else:
            yield x
```

The corrected code is `yield from flatten(x, ignore_types)`.

The code is not provided with any kind of license, making it difficult to determine if these snippets can be used in a professional context.
If the ignore_types is tuple instead of default (str, bytes), need add ignore_types argument when calling flatten() recursively.

Hello, I have set up the urlimport.py script as described, but from the jupyternotebook a method or attribute from urlimport.py is not being recognized as such
<img width="858" alt="screen shot 2018-10-05 at 10 22 09 pm" src="https://user-images.githubusercontent.com/28736542/46566493-65787e80-c8ed-11e8-9013-ed57147ce3b0.png">



python-cookbook/src/8/extending_classes_with_mixins/example2.py

that's seem not a solutino for minin class which needs init method, i have checked on python 2.7, this is what i got:

C:\Python27\python.exe D:/dev/python/pyqt/workapce/pyqt/widget/test/test.py
  File "D:/dev/python/pyqt/workapce/pyqt/widget/test/test.py", line 2
    def __init__(self, *args, _restrict_key_type, **kwargs):
                                               ^
SyntaxError: invalid syntax
hi, David

i have just tested
python-cookbook/src/8/lazily_computed_attributes/example1.py
but happened to findout it does not workout like what the book tell, which i meam python cookbook, 3rd. 
After a little research, i found that you need to put a object there, like this :
class lazyproperty(object):
but i dont konw why.
please tell me if you know.

PS:
### TEST based on 
**PyCharm** 2016.3.1
Build #PY-163.9735.8, built on December 15, 2016
Subscription is active until February 25, 2017
JRE: 1.8.0_111-b14 amd64
JVM: Java HotSpot(TM) 64-Bit Server VM by Oracle Corporation

**Python** 
2.7.11 (v2.7.11:6d1b6a68f775, Dec  5 2015, 20:40:30) [MSC v.1500 64 bit (AMD64)] on win32
