hello how can i upload multiple file from front end?
Hi Jeffrey,

**Background and a thank you**
I've just started using Rook to create a web interface for a "digitizing application". I was previously using shiny because I was unaware of Rook but I was basically using shiny just to send/receive data between the server and R - I designed the entire html/javascript interface myself (see the current version here: https://aaronolsen.github.io/software/digitizing.html). Of course for that shiny is overkill. I now realize Rook is sufficient for what I need and will in fact be better because I can access multiple local directories using 'File$new' (e.g. to load images from the users computer). With shiny I've been having to copy over everything that I want to access to the 'www' folder. This is all to say that Rook is a game-changer for me - thank you very much for writing it!

**The code that generates the error**
Here is the code I'm running (Rook v1.1-1, R v3.4.2, Safari v10.0.2) that generates the error - it's a server that provides access to my Downloads folder. I've reduced it down to a near minimal working example with some extra bits to confirm things are working.
```
library(Rook)
tryCatch({ R.server$stop() }, error = function(e) {}, warning = function(e) {})
R.server <<- Rhttpd$new()
R.server$add(app = File$new('/Users/aaron/Downloads'), name = "pic_dir")
R.server$start(quiet=TRUE)
iter <<- 0
Rook.app <- function(env) {
	iter <<- iter + 1
	print(paste0('Rook.app ', iter))
	request <- Request$new(env)
	response <- Response$new()
	write.HTML(response, R.server)
	response$finish()
}
write.HTML <- function(response, server){
	response$write("<form method=\"POST\">")
	response$write("<input type=\"submit\" value=\"Submit\" name=\"submit_button\">")
}
R.server$add(app = Rook.app, name = "Rook app")
R.server$browse("Rook app")
```

**The error**
When I run this code I periodically get the following error message in the R console.

`Error in appList[[i]] : subscript out of bounds`

I don't get the error every time I call the server. Sometimes I have to submit a request multiple times or close/open the server multiple times to get the error. Less frequently, the error just spontaneously occurs while the server is running with no user interaction. The error causes the server to crash so I have to close the browser window and re-start.

This may have something to do with me making the server a global variable. But I want to use a global variable so that I can access the server outside the function to stop it. That's why I've included a `R.server$stop()` command before I start the server (in case it's still running).

**A solution**
I tracked down the source of the error to the 'finalize' method of the 'Rhttpd' class. Somehow this method is being called while the server is running but when it gets called seems somewhat unpredictable. It seems all this method does is remove the apps associated with the server. So to solve the issue I wrote a revised 'Rhttpd' class ('Rhttpd2') with the 'finalize' method actions commented out. 'Rhttpd2' is the same as the [current version of 'Rhttpd'](https://github.com/jeffreyhorner/Rook/blob/master/R/Rhttpd.R) with the following changes:

```
Rhttpd2 <- setRefClass(
   'Rhttpd2',
. . .
   finalize = function(){
#      if (length(appList) == 0) return()
#      for (i in rev(1:length(appList))){
#         remove(appList[[i]])
#      }
   },
. . . 
   listenPort <<- suppressMessages(tools::startDynamicHelp(TRUE))
. . .
   stop = function(){
      listenPort <<- suppressMessages(tools::startDynamicHelp(FALSE))
   },
```

And here is the revised code that sets up and starts the server (assuming the revised 'Rhttpd2' above has been loaded).

```
library(Rook)
tryCatch({ R.server$stop() }, error = function(e) {}, warning = function(e) {})
tryCatch({ remove(R.server) }, error = function(e) {}, warning = function(e) {})
R.server <<- Rhttpd2$new()
R.server$add(app = File$new('/Users/aaron/Downloads'), name = "pic_dir")
R.server$start(quiet=TRUE)
iter <<- 0
Rook.app <- function(env) {
	iter <<- iter + 1
	print(paste0('Rook.app ', iter))
	request <- Request$new(env)
	response <- Response$new()
	write.HTML(response, R.server)
	response$finish()
}
write.HTML <- function(response, server){
	response$write("<form method=\"POST\">")
	response$write("<input type=\"submit\" value=\"Submit\" name=\"submit_button\">")
}
R.server$add(app = Rook.app, name = "Rook app")
R.server$browse("Rook app")
```

At this point I don't have a need for stopping and re-starting the same server. So for me when I stop the server I'm content to simply remove the entire server and re-define everything when I want to start it up again. That's why I've also included a `remove(R.server)` command after stopping the server. This should cover everything that the 'finalize' method was doing previously. If the user quits R I'm assuming R.server is also removed so I see no way the server object would stick around.

I see you haven't been developing Rook actively for some time now - which is totally OK - so I don't necessarily expect a response. If you do have a chance to look into this that'd be great. But I'm also posting here so that if others encounter the same error this will give them an idea of how to find a solution.

Many thanks,
Aaron
Header names are case insensitive as per e.g. RFC 7230, and `Response$header()` records them as-is.
This is fine, except for `Content-Type` and `Content-Length`, which are treated specially by `Rhttpd`:  the treatment fails if the app's choice of capitalization doesn't match `Rhttpd`'s.
e.g.  a Rook app using this fragment:
```R
    res$header("Content-type", "application/json")
```
still leads to the client getting a response with header `Content-Type:  text/html`
because lookup in `Rhttpd$handler()` is by the differently-capitalized `Content-Type`
I was trying to sent a custom parameter in the request header from java to R which is the transaction ID but the Rook was not able to get the custom request parameters other than the one already present in the environment variable. So kindly suggest me the solution for my problem and it would be nice if you provide the facility to add new custom parameter in the environment .
We' re having an issue with Rook handling long GET requests longer than 1024 bytes - the request doesn't complete, resulting in a no response being returned.  The problem essentially seems equivalent to this nginx issue, but there doesn't seem to be anywhere in Rook where that buffersize of 1024 is set: http://stackoverflow.com/questions/22697584/nginx-uwsgi-104-connection-reset-by-peer-while-reading-response-header-from-u 

It appears that the Hmisc example application is no longer working (at least in Windows 7 and 10).

Example code (from `?Rook::Builder`):

``` r
library(Rook)

s <- Rhttpd$new()
library(Hmisc)
dir.create(file.path(tempdir(),'plots'),showWarnings=FALSE)
s$add( name="Hmisc",
    app=Builder$new(
        Static$new(
            urls = c('/css','/images','/javascript'),
            root = system.file('exampleApps/Hmisc',package='Rook')
        ),
        Static$new(urls='/plots',root=tempdir()),
        Brewery$new(
            url='/brew',
            root= system.file('exampleApps/Hmisc',package='Rook'),
            imagepath=file.path(tempdir(),'plots'),
            imageurl='../plots/'
        ),
        Redirect$new('/brew/useR2007.rhtml')
    )
)
s$start(quiet=TRUE)
s$browse('Hmisc') # Opens a browser window to the application.
```

And 127.0.0.1:17941/custom/Hmisc/brew/useR2007.rhtml results in "The 127.0.0.1 page isn't working" with "ERR_TOO_MANY_REDIRECTS" (Chrome browser).

``` r
sessionInfo()
```

R version 3.3.1 (2016-06-21)
Platform: x86_64-w64-mingw32/x64 (64-bit)
Running under: Windows 10 x64 (build 14393)

locale:
[1] LC_COLLATE=English_United States.1252
[2] LC_CTYPE=English_United States.1252
[3] LC_MONETARY=English_United States.1252
[4] LC_NUMERIC=C
[5] LC_TIME=English_United States.1252

attached base packages:
[1] stats     graphics  grDevices utils     datasets  methods   base

other attached packages:
[1] brew_1.0-6      Hmisc_3.17-4    ggplot2_2.1.0   Formula_1.2-1
[5] survival_2.39-5 lattice_0.20-33 Rook_1.1-1

loaded via a namespace (and not attached):
 [1] Rcpp_0.12.6         chron_2.3-47        grid_3.3.1
 [4] plyr_1.8.4          gtable_0.2.0        acepack_1.3-3.3
 [7] scales_0.4.0        data.table_1.9.6    latticeExtra_0.6-28
[10] rpart_4.1-10        Matrix_1.2-6        splines_3.3.1
[13] RColorBrewer_1.1-2  tools_3.3.1         foreign_0.8-66
[16] munsell_0.4.3       colorspace_1.2-6    cluster_2.0.4
[19] nnet_7.3-12         gridExtra_2.2.1

Hi,

A user of one of my packages emailed me with the following error message:

```
Error in grepl(paste("^", root, url, .Platform$file.sep, sep = ""), file_path) : 
  invalid regular expression '^C:\Users\USER\Documents\R\win-library\3.1\pkg\example/brew/', reason 'Invalid back reference'
```

This appeared to be caused by `.Platform$file.sep` being a backref in regex-land when used on Windows (i.e. `.Platform$file.sep` is `\`.

I made a minor change so that there is a char vector substring match instead of a regular expression (should be faster too, not that it matters).

Unfortunately I was unable to test whether this fixes the problem (don't have a Windows machine handy), but it does not break anything in Linux anyway.

After some number of cookies is set (for me, about 20-30), cookies() stops returning the truth and starts returning an empty list. Test case below. Run and hit refresh in your browser until you get 0. Then check that in fact your browser has (and is sending) the right number of cookies. Tested in Firefox and Chrome.

``` r
library(Rook)

app <- function (env) {
  r <- Rook::Request(env)
  cookies <- r$cookies()
  res <- Rook::Response$new()
  res$set_cookie(paste0("foo", sample(100000,1)), paste0("bar",sample(100000,1)))
  res$write("<html><body>");
  res$write(paste("I can see", length(cookies), "cookies in your last request.. 
    adding another one with random name  and content</body></html>"))
  res$finish()
}

svr <- Rhttpd$new()
rhapp <- RhttpdApp$new(name="cookies", app=app)
svr$add(rhapp)
require(tools)
svr$start(port=35538)
```

 Rook packageVersion: 1.1.1. R version: 3.1.1.

As far as I understand (see gWidgetsWWW2 [issue 22](https://github.com/jverzani/gWidgetsWWW2/issues/22)), Rook apps can be quite easily manipulated by other users on a multiuser system. This makes it possible to run arbitrary R code including system calls with the privileges of the user running the Rook app.

Would it be possible to add some basic security mechanism to prevent this?

I guess because Rhttpd now listens only on the loopback... still, it makes things break.
