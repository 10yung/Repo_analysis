The current int_to_bytestring method is susceptible to the "Odd-length string" error.
Added a verification with bit_length() and adjusted the conversion into bytestring.
error while using on kali linux 
./bootstrap: 3: ./bootstrap: autoreconf: not found

After following the instructions for docker setup. I'm able to scan single ip addresses whenever i scan a single ip address using docker run cve-2019-0708:latest x.x.x.x:3389

However, using the python script i'm getting errors whenever attempting to scan a subnet. I'd actually like to scan from a list of specific ips within a txt file. Would that be possible?

./scan_with_docker.py x.x.x.x/24

Results:

root@kali:~/Desktop/CVE-2019-0708# ./scan_with_docker.py x.x.x.x/24
Traceback (most recent call last):
  File "./scan_with_docker.py", line 28, in run_rdesktop_in_docker
    stdout, stderr = process.communicate(timeout=10)
  File "/usr/lib/python3.7/subprocess.py", line 939, in communicate
    stdout, stderr = self._communicate(input, endtime, timeout)
  File "/usr/lib/python3.7/subprocess.py", line 1682, in _communicate
    self._check_timeout(endtime, orig_timeout)
  File "/usr/lib/python3.7/subprocess.py", line 982, in _check_timeout
    raise TimeoutExpired(self.args, orig_timeout)
subprocess.TimeoutExpired: Command '['/usr/bin/docker', 'run', 'cve-2019-0708:latest', 'x.x.x.x']' timed out after 10 seconds

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "./scan_with_docker.py", line 105, in <module>
    main()
  File "./scan_with_docker.py", line 87, in main
    rdesktop_result = rdesktop_pool.map(run_rdesktop_in_docker, hosts_with_port_3389_open)
  File "/usr/lib/python3.7/multiprocessing/pool.py", line 268, in map
    return self._map_async(func, iterable, mapstar, chunksize).get()
  File "/usr/lib/python3.7/multiprocessing/pool.py", line 657, in get
    raise self._value
  File "/usr/lib/python3.7/multiprocessing/pool.py", line 121, in worker
    result = (True, func(*args, **kwds))
  File "/usr/lib/python3.7/multiprocessing/pool.py", line 44, in mapstar
    return list(map(*args))
  File "./scan_with_docker.py", line 31, in run_rdesktop_in_docker
    stdout, stderr = process.communicate(timeout=1)
  File "/usr/lib/python3.7/subprocess.py", line 939, in communicate
    stdout, stderr = self._communicate(input, endtime, timeout)
  File "/usr/lib/python3.7/subprocess.py", line 1682, in _communicate
    self._check_timeout(endtime, orig_timeout)
  File "/usr/lib/python3.7/subprocess.py", line 982, in _check_timeout
    raise TimeoutExpired(self.args, orig_timeout)
subprocess.TimeoutExpired: Command '['/usr/bin/docker', 'run', 'cve-2019-0708:latest', 'x.x.x.x']' timed out after 1 seconds
Hi. :-)
Just encountered a small bug. When a target computer has some licensing issue (Remote Deskop Connection: 'The remote computer disconnected the session because of an error in the licensing protocol. Please try connecting to the remote computer again or contact your server administrator.') the script will report it as vulnerable. Example from a Windows 2012 R2 server:

$ ./rdesktop 185.xxx.xxx.xxx:3389
[+] Registering MS_T120 channel.
[+] Connection established using SSL.
WARNING: License error alert from server: Invalid client
[!] Target is VULNERABLE!!!

Using the console will yield the proper result:

$ ./rdesktop -0 185.xxx.xxx.xxx:3389
[+] Registering MS_T120 channel.
[+] Connection established using SSL.
[+] Sending MST_120 check packet (size: 0x20 - offset: 0x8)
[+] Sending MST_120 check packet (size: 0x10 - offset: 0x4)
[+] Sending MST_120 check packet (size: 0x20 - offset: 0x8)
[+] Sending MST_120 check packet (size: 0x10 - offset: 0x4)
[+] Sending MST_120 check packet (size: 0x20 - offset: 0x8)
[+] Sending MST_120 check packet (size: 0x10 - offset: 0x4)
[+] Sending MST_120 check packet (size: 0x20 - offset: 0x8)
[+] Sending MST_120 check packet (size: 0x10 - offset: 0x4)
[+] Sending MST_120 check packet (size: 0x20 - offset: 0x8)
[+] Sending MST_120 check packet (size: 0x10 - offset: 0x4)
[+] Sending MST_120 check packet (size: 0x20 - offset: 0x8)
[+] Sending MST_120 check packet (size: 0x10 - offset: 0x4)
[-] Max sends reached, please wait for race condition to be sure...
[*] Target appears patched.

Keep up the good work. And thanks for not unleashing the digipocalypse. :-)




There is a python version, based on original author's msf plugin. It works on windows xp, windows 2008 R2, windows 7. thanks for @zerosum0x0's work.

Usage:

➜ pip3 install pocsuite3
➜ pocsuite -r cve_2019_0708.py -u 10.211.55.21

,------. ,--. ,--. ,----. {1.3.0-nongit-20190411}
| .--. ',---. ,---.,---.,--.,----,-' '-.,---.'.-. | | '--' | .-. | .--( .-'| || ,--'-. .-| .-. : .' < | | --'' '-' \ --.-' ' '' | | | | \ --/'-' | --' ---' -------' ----'--' --' --------' http://pocsuite.org
[*] starting at 13:18:44

[13:18:44] [INFO] loading PoC script 'cve_2019_0708.py'
[13:18:49] [INFO] pocsusite got a total of 1 tasks
[13:18:49] [INFO] running poc:'windows rdp rce (cve-2019-0708)' target '10.211.55.21'
[13:18:52] [+] POSSIBLE OS : 2008R2DC
[13:18:52] [+] VULNERABLE TARGET : 10.211.55.21:3389

+--------------+---------------------------------+--------+-----------+----------------------------------------+---------+
| target-url | poc-name | poc-id | component | version | status |
+--------------+---------------------------------+--------+-----------+----------------------------------------+---------+
| 10.211.55.21 | windows rdp rce (cve-2019-0708) | 97954 | rdp | win7, win2k8, win2k8 r2, win2k3, winxp | success |
+--------------+---------------------------------+--------+-----------+----------------------------------------+---------+
success : 1 / 1

[*] shutting down at 13:18:52

➜ pocsuite -r cve_2019_0708.py -u 10.211.55.26

,------. ,--. ,--. ,----. {1.3.0-nongit-20190411}
| .--. ',---. ,---.,---.,--.,----,-' '-.,---.'.-. | | '--' | .-. | .--( .-'| || ,--'-. .-| .-. : .' < | | --'' '-' \ --.-' ' '' | | | | \ --/'-' | --' ---' -------' ----'--' --' --------' http://pocsuite.org
[*] starting at 13:18:58

[13:18:58] [INFO] loading PoC script 'cve_2019_0708.py'
[13:19:03] [INFO] pocsusite got a total of 1 tasks
[13:19:03] [INFO] running poc:'windows rdp rce (cve-2019-0708)' target '10.211.55.26'
[13:19:06] [+] POSSIBLE OS : 2000/xp
[13:19:06] [+] VULNERABLE TARGET : 10.211.55.26:3389

+--------------+---------------------------------+--------+-----------+----------------------------------------+---------+
| target-url | poc-name | poc-id | component | version | status |
+--------------+---------------------------------+--------+-----------+----------------------------------------+---------+
| 10.211.55.26 | windows rdp rce (cve-2019-0708) | 97954 | rdp | win7, win2k8, win2k8 r2, win2k3, winxp | success |
+--------------+---------------------------------+--------+-----------+----------------------------------------+---------+
success : 1 / 1

[*] shutting down at 13:19:06
Impressive work here, congratulations!
Just a few questions: 
1. Suricata seems to set "Must be within 372 bytes (31 channels * 12 bytes per channel)" for the use after free channel, so that will be little fun with the payload, when there is only space for 372 bytes. 
2. Why did you chose this specific amount of channels and is the hardcoded ID for easier compliance with a potential exploit?
3. Is the size of the heap the same with and without this ruleset of Suricata?