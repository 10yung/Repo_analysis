Upon running and executing rails_best_practices, it labels `search_data` as unused model method whereas `search_data` is used from **searchkick** to control the type of indexing. 

```
  def search_data
    attributes.merge(
      group_id: groups.try(:ids)
    )
  end
```

This should be ignored!
Hey there!

Some weeks ago I tried out the RailsBestPractices hook with [Overcommit](https://github.com/sds/overcommit) to no avail. I [opened an issue](https://github.com/sds/overcommit/issues/693) to ask about my problem, and it turns out it may be related to how rails_best_practices expect explicit files to be passed. However, I still have not found the cause of the problem.

I tried running this (which is what overcommit ends up running to my understanding):
```
echo app/controllers/application_controller.rb config/routes.rb | tr ',' '\n' | xargs bundle exec rails_best_practices
```
And this works perfectly (by this I mean it detectes warnings in those two files correctly), so I don't really know what could be going wrong with that.

Can anyone give me a hand with this? Thanks!
`gem install rails_best_practices` went fine.  I even tried installing old releases.

I've tried installing via command line and Gemfile, but any time I invoke the gem, I get the same result:
```
/home/brianh/.rvm/gems/ruby-1.9.3-p551/gems/require_all-2.0.0/lib/require_all.rb:208:in `require': /home/brianh/.rvm/gems/ruby-1.9.3-p551/gems/rails_best_practices-1.19.4/lib/rails_best_practices/core/check.rb:276: unknown type of %string (SyntaxError)
                if %i[symbol_literal string_literal...
                      ^
/home/brianh/.rvm/gems/ruby-1.9.3-p551/gems/rails_best_practices-1.19.4/lib/rails_best_practices/core/check.rb:276: syntax error, unexpected $end
                if %i[symbol_literal string_literal...
                      ^
        from /home/brianh/.rvm/gems/ruby-1.9.3-p551/gems/require_all-2.0.0/lib/require_all.rb:208:in `__require'
        from /home/brianh/.rvm/gems/ruby-1.9.3-p551/gems/require_all-2.0.0/lib/require_all.rb:98:in `block in require_all'
        from /home/brianh/.rvm/gems/ruby-1.9.3-p551/gems/require_all-2.0.0/lib/require_all.rb:96:in `each'
        from /home/brianh/.rvm/gems/ruby-1.9.3-p551/gems/require_all-2.0.0/lib/require_all.rb:96:in `require_all'
        from /home/brianh/.rvm/gems/ruby-1.9.3-p551/gems/require_all-2.0.0/lib/require_all.rb:118:in `block in require_rel'
        from /home/brianh/.rvm/gems/ruby-1.9.3-p551/gems/require_all-2.0.0/lib/require_all.rb:117:in `each'
        from /home/brianh/.rvm/gems/ruby-1.9.3-p551/gems/require_all-2.0.0/lib/require_all.rb:117:in `require_rel'
        from /home/brianh/.rvm/gems/ruby-1.9.3-p551/gems/rails_best_practices-1.19.4/lib/rails_best_practices/core.rb:3:in `<top (required)>'
        from /home/brianh/.rvm/gems/ruby-1.9.3-p551/gems/rails_best_practices-1.19.4/lib/rails_best_practices.rb:5:in `require'
        from /home/brianh/.rvm/gems/ruby-1.9.3-p551/gems/rails_best_practices-1.19.4/lib/rails_best_practices.rb:5:in `<top (required)>'
        from /home/brianh/.rvm/gems/ruby-1.9.3-p551/gems/rails_best_practices-1.19.4/bin/rails_best_practices:6:in `require'
        from /home/brianh/.rvm/gems/ruby-1.9.3-p551/gems/rails_best_practices-1.19.4/bin/rails_best_practices:6:in `<top (required)>'
        from /home/brianh/.rvm/gems/ruby-1.9.3-p551/bin/rails_best_practices:23:in `load'
        from /home/brianh/.rvm/gems/ruby-1.9.3-p551/bin/rails_best_practices:23:in `<main>'
        from /home/brianh/.rvm/gems/ruby-1.9.3-p551/bin/ruby_executable_hooks:24:in `eval'
        from /home/brianh/.rvm/gems/ruby-1.9.3-p551/bin/ruby_executable_hooks:24:in `<main>'
```

I know I'm running an old version of Ruby, but I just joined a new team and this is all part of cleaning up and modernizing.
Hi, 
I'm using rails 5.1.5 and rails_best_practices  1.16.0.
I'm trying to use resources with a concern in the routes.rb but I'm having this error:

> restrict auto-generated routes (only: [])

This is the code that generates the error with the concern in the resources groceries:
```
concern :shopper_actions do
   scope module: :shops do
        member do
          resources :orders, only: :index
       end
   end
end

namespace :shoppers do
  resources :groceries, param: :shop_id, controller: 'shops', only: :index,
                                       concerns: :shopper_actions
end
```

and this is the code that works fine without the concern:
```
namespace :shoppers do
  resources :groceries, param: :shop_id, controller: 'shops', only: :index do
     scope module: :shops do
         member do
            resources :orders, only: :index
          end
      end
   end
end
```
When i run results in html format i sometimes get "stmts_add" and "unary" in my line number column. What does it mean?
As the title says, an unused helper method was crashing the system.

I fixed it by monkey patching into /core/check.rb:347 and changing this like:
```
@except_methods + internal_except_methods
```
to
```
@except_methods.to_a + internal_except_methods
```
So if it's already an array nothing happens, otherwise it converts `nil` into an empty array, allowing the `+` method to function.

It would be good to put this into the actual code, instead of monkey patches.
Hi, I'm making rails_best_practices plugin for [pre-commit gem](https://github.com/jish/pre-commit).

So, I want to call rails_best_practices checks from program like this code.
https://github.com/jish/pre-commit/blob/master/lib/plugins/pre_commit/checks/rubocop.rb#L32

```ruby
::RuboCop::CLI.new.run(args) == 0
```

I check [command.rb file](https://github.com/flyerhzm/rails_best_practices/blob/master/lib/rails_best_practices/command.rb)
and it looks it can't be called from program.

Are there some way to call from program?
or if it need CLI class, I'm glad to make it :)

thanks,
**move model logic into model (command use_count > 4)**
I got this error while calling a service from controller. Isn't services the best way rather than making models fat ?
Here's an enhancement idea.

In Rails, flash.now should never end up with redirect_to, and flash (without .now) should normally not end up at "render".  However, it's not that hard to make that mistake, especially after making other changes.  I think it'd be useful for rails_best_practices to detect that case.

E.g., detect misuses like this:
~~~~ruby
      flash.now[:danger] = t('admin_only')
      redirect_to '/'
~~~~
```    
def show
    # code here
end
alias index show
```

Will generate a message like

```
config/routes.rb - restrict auto-generated routes api/model (only: [:show]
```