This is my docker-compose file:

```
version: "3.7"
services:
  etcd:
    container_name: etcd
    image: "bitnami/etcd:latest"
    environment:
      - ALLOW_NONE_AUTHENTICATION=yes
      - ETCD_ADVERTISE_CLIENT_URLS=http://etcd:2379
    ports:
      - 4001:4001
      - 2380:2380
      - 2379:2379
    networks:
      - micro-net
 micro:
    container_name: micro
    command: --registry=etcd --registry_address=etcd:2379 api  --namespace=go.micro.example.srv --handler=http
    image: micro/micro
    ports:
      - "8080:8080"
    networks:
      - micro-net
luna:
    container_name: luna
    build:
      context: ./luna
      dockerfile: Dockerfile
    depends_on:
      - etcd
      - lunadb
      - registrator
    command: ["./wait_for_postgres.sh", "lunadb", "/usr/local/bin/app"]
    ports:
      - "8088:8080"
    networks:
      - micro-net 

```


When I run micro api from local it works,but it does not work in docker container and i get 

```
{
    "id": "go.micro.example.srv",
    "code": 500,
    "detail": "service not found",
    "status": "Internal Server Error"
}

```
If you use the image at `micro/micro:latest` and either set the environment variable `MICRO_REGISTRY=nats` or use `--registry=nats` micro will print the default help page and no error like this: 

```
> docker run --name=test micro/micro:latest --registry=nats

NAME:
   micro - A microservice runtime

USAGE:
   micro [global options] command [command options] [arguments...]

VERSION:
   v1.18.0-6b64c1e-1578946501

COMMANDS:
     api         Run the api gateway
     bot         Run the chatops bot
     cli         Run the interactive CLI
     call        Call a service e.g micro call greeter Say.Hello '{"name": "John"}
     services    List the services in the network
     stream      Create a service stream
     publish     Publish a message to a topic
     stats       Query the stats of a service
     list        List items in registry or network
     register    Register an item in the registry
     deregister  Deregister an item in the registry
     get         Get item from registry
     broker      Run the message broker
     health      Check the health of a service
     proxy       Run the service proxy
     monitor     Run the monitoring service
     router      Run the micro network router
     tunnel      Run the micro network tunnel
     network     Run the micro network node
     registry    Run the service registry
     runtime     Run the micro runtime
     run         Run a service e.g micro run service version
     kill        Kill removes a running service e.g micro kill service
     ps          Ps returns status of a running service or lists all running services e.g. micro ps
     debug       Run the micro debug service
     log         Get logs for a service
     server      Run the micro network server
     service     Run a micro service
     store       Run the micro store service
     token       API token commands
     new         Create a service template
     plugin      Plugin commands
     web         Run the web dashboard
     init        Run the micro operator
     help, h     Shows a list of commands or help for one command

GLOBAL OPTIONS:
   --client value                  Client for go-micro; rpc [$MICRO_CLIENT]
   --client_request_timeout value  Sets the client request timeout. e.g 500ms, 5s, 1m. Default: 5s [$MICRO_CLIENT_REQUEST_TIMEOUT]
   --client_retries value          Sets the client retries. Default: 1 (default: 1) [$MICRO_CLIENT_RETRIES]
   --client_pool_size value        Sets the client connection pool size. Default: 1 (default: 0) [$MICRO_CLIENT_POOL_SIZE]
   --client_pool_ttl value         Sets the client connection pool ttl. e.g 500ms, 5s, 1m. Default: 1m [$MICRO_CLIENT_POOL_TTL]
   --register_ttl value            Register TTL in seconds (default: 60) [$MICRO_REGISTER_TTL]
   --register_interval value       Register interval in seconds (default: 30) [$MICRO_REGISTER_INTERVAL]
   --server value                  Server for go-micro; rpc [$MICRO_SERVER]
   --server_name value             Name of the server. go.micro.srv.example [$MICRO_SERVER_NAME]
   --server_version value          Version of the server. 1.1.0 [$MICRO_SERVER_VERSION]
   --server_id value               Id of the server. Auto-generated if not specified [$MICRO_SERVER_ID]
   --server_address value          Bind address for the server. 127.0.0.1:8080 [$MICRO_SERVER_ADDRESS]
   --server_advertise value        Used instead of the server_address when registering with discovery. 127.0.0.1:8080 [$MICRO_SERVER_ADVERTISE]
   --server_metadata value         A list of key-value pairs defining metadata. version=1.0.0 [$MICRO_SERVER_METADATA]
   --broker value                  Broker for pub/sub. http, nats, rabbitmq [$MICRO_BROKER]
   --broker_address value          Comma-separated list of broker addresses [$MICRO_BROKER_ADDRESS]
   --profile value                 Debug profiler for cpu and memory stats [$MICRO_DEBUG_PROFILE]
   --registry value                Registry for discovery. etcd, mdns [$MICRO_REGISTRY]
   --registry_address value        Comma-separated list of registry addresses [$MICRO_REGISTRY_ADDRESS]
   --runtime value                 Runtime for building and running services e.g local, kubernetes (default: "local") [$MICRO_RUNTIME]
   --selector value                Selector used to pick nodes for querying [$MICRO_SELECTOR]
   --store value                   Store used for key-value storage [$MICRO_STORE]
   --store_address value           Comma-separated list of store addresses [$MICRO_STORE_ADDRESS]
   --store_namespace value         Namespace for store data [$MICRO_STORE_NAMESPACE]
   --transport value               Transport mechanism used; http [$MICRO_TRANSPORT]
   --transport_address value       Comma-separated list of transport addresses [$MICRO_TRANSPORT_ADDRESS]
   --local                         Enable local only development
   --enable_acme                   Enables ACME support via Let's Encrypt. ACME hosts should also be specified. [$MICRO_ENABLE_ACME]
   --acme_hosts value              Comma separated list of hostnames to manage ACME certs for [$MICRO_ACME_HOSTS]
   --acme_provider value           The provider that will be used to communicate with Let's Encrypt. Valid options: autocert, certmagic [$MICRO_ACME_PROVIDER]
   --enable_tls                    Enable TLS support. Expects cert and key file to be specified [$MICRO_ENABLE_TLS]
   --tls_cert_file value           Path to the TLS Certificate file [$MICRO_TLS_CERT_FILE]
   --tls_key_file value            Path to the TLS Key file [$MICRO_TLS_KEY_FILE]
   --tls_client_ca_file value      Path to the TLS CA file to verify clients against [$MICRO_TLS_CLIENT_CA_FILE]
   --api_address value             Set the api address e.g 0.0.0.0:8080 [$MICRO_API_ADDRESS]
   --proxy_address value           Proxy requests via the HTTP address specified [$MICRO_PROXY_ADDRESS]
   --web_address value             Set the web UI address e.g 0.0.0.0:8082 [$MICRO_WEB_ADDRESS]
   --network value                 Set the micro network name: local, go.micro [$MICRO_NETWORK]
   --network_address value         Set the micro network address e.g. :9093 [$MICRO_NETWORK_ADDRESS]
   --router_address value          Set the micro router address e.g. :8084 [$MICRO_ROUTER_ADDRESS]
   --gateway_address value         Set the micro default gateway address e.g. :9094 [$MICRO_GATEWAY_ADDRESS]
   --tunnel_address value          Set the micro tunnel address e.g. :8083 [$MICRO_TUNNEL_ADDRESS]
   --api_handler value             Specify the request handler to be used for mapping HTTP requests to services; {api, proxy, rpc} [$MICRO_API_HANDLER]
   --api_namespace value           Set the namespace used by the API e.g. com.example.api [$MICRO_API_NAMESPACE]
   --web_namespace value           Set the namespace used by the Web proxy e.g. com.example.web [$MICRO_WEB_NAMESPACE]
   --enable_stats                  Enable stats [$MICRO_ENABLE_STATS]
   --auto_update                   Enable automatic updates [$MICRO_AUTO_UPDATE]
   --report_usage                  Report usage statistics [$MICRO_REPORT_USAGE]
   --namespace value               Set the micro service namespace (default: "go.micro") [$MICRO_NAMESPACE]
   --plugin value                  Comma separated list of plugins e.g broker/rabbitmq, registry/etcd, micro/basic_auth, /path/to/plugin.so [$MICRO_PLUGIN]
   --help, -h                      show help
   --version, -v                   print the version
```
I'm assuming the nats plugin isn't in the build by default so some help on the best way to include it would be great, but I'm assuming this isn't the intended behavior.

I tried the kubernetes deployment guide with GKE v1.13.11-gke.14. 
https://github.com/micro/micro/blob/master/network/config/kubernetes/gcloud.md

It went with a lot of things that I need to tweak (fix).
CMIIW. The following notes I experienced during deployment:
1. There is no explanation how to use Cloudflare DNS and its API. 
2. So, I went with `autocert` and remove the unnecessary Cloudflare settings. 
3. The guide needs to fix where the `helm` tiller is required. Since it is not required in helm 3 or rather specify the helm version is important. 
4. The GKE guides need to increase minimum size `n1-standard-1` is not enough based on my experience. I got insufficient vCPU. Thus, I need to increase my cluster size. 


Right now I am having difficulty to deploy the greeting web example where the deployed service cannot dial the ETCDv3.  

greeter-svc.yaml
```
apiVersion: v1
kind: Service
metadata:
  name: greeter
  namespace: default
  labels:
    app: greeter
spec:
  ports:
  - port: 8080
    protocol: TCP
  selector:
    name: greeter-srv
---
apiVersion: v1
kind: Service
metadata:
  name: greeter-web
  namespace: default
  labels:
    app: greeter-web
spec:
  ports:
  - port: 9090
    protocol: TCP
  selector:
    name: greeter-web
```

greeter-srv.yaml
```yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  namespace: default
  name: greeter
spec:
  replicas: 1
  selector:
    matchLabels:
      name: greeter-srv
  template:
    metadata:
      labels:
        name: greeter-srv
    spec:
      containers:
      - name: greeter
        command: [
          "/greeter-srv",
        ]
        env:
        - name: MICRO_SERVER
          value: "grpc"
        - name: MICRO_SERVER_NAME
          value: "go.micro.srv.greeter"
        - name: MICRO_SERVER_ADDRESS
          value: "0.0.0.0:8080"
        - name: MICRO_REGISTRY
          value: "etcdv3"
        - name: MICRO_REGISTRY_ADDRESS
          value: "etcd-cluster-client"
        image: gcr.io/xxxxx/greeter-srv
        imagePullPolicy: Always
        ports:
        - containerPort: 8080
          name: greeter-port
```


greeter-web.yaml
```yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  namespace: default
  name: greeter-web
spec:
  replicas: 1
  selector:
    matchLabels:
      name: greeter-web
  template:
    metadata:
      labels:
        name: greeter-web
    spec:
      containers:
        - name: greeter-web
          command: [
		    "/greeter-web"
          ]
          env:
          - name: MICRO_PROXY
            value: "go.micro.proxy"
          - name: MICRO_REGISTRY
            value: "etcdv3"
          - name: MICRO_REGISTRY_ADDRESS
            value: "etcd-cluster-client"
          image: gcr.io/xxxxxx/greeter-web
          imagePullPolicy: Always
          ports:
          - containerPort: 9090
            name: web-port
```

**Greeter web error log** 
```shell
❯ k logs --tail=200 -f -p greeter-web-555f85f96-vkp8g
2020-01-13 10:13:27.656641 I | Listening on [::]:34171
{"level":"warn","ts":"2020-01-13T10:13:32.657Z","caller":"clientv3/retry_interceptor.go:61","msg":"retrying of unary invoker failed","target":"endpoint://client-8356bd0a-0da9-4d78-900a-148097d5f12e/etcd-cluster-client","attempt":0,"error":"rpc error: code = DeadlineExceeded desc = latest connection error: connection error: desc = \"transport: Error while dialing dial tcp: address etcd-cluster-client: missing port in address\""}
2020-01-13 10:13:32.657343 I | context deadline exceeded
```

List of services
```
❯ k get services
NAME                    TYPE           CLUSTER-IP      EXTERNAL-IP    PORT(S)                      AGE
etcd-cluster            ClusterIP      None            <none>         2379/TCP,2380/TCP            19h
etcd-cluster-client     ClusterIP      10.43.250.17    <none>         2379/TCP                     19h
etcd-restore-operator   ClusterIP      10.43.241.251   <none>         19999/TCP                    19h
greeter                 ClusterIP      10.43.241.9     <none>         8080/TCP                     9h
greeter-web             ClusterIP      10.43.254.93    <none>         9090/TCP                     5h34m
kubernetes              ClusterIP      10.43.240.1     <none>         443/TCP                      19h
micro-api               LoadBalancer   10.43.252.14    34.94.xxx.xxx   443:31448/TCP                11h
micro-broker            ClusterIP      10.43.250.77    <none>         8001/TCP                     11h
micro-gateway           ClusterIP      10.43.245.91    <none>         8080/TCP                     11h
micro-network           LoadBalancer   10.43.253.32    34.94.xxx.xxx   8085:30567/UDP               11h
micro-proxy             ClusterIP      10.43.251.245   <none>         8081/TCP                     11h
micro-registry          ClusterIP      10.43.240.110   <none>         8000/TCP                     11h
micro-router            ClusterIP      10.43.252.119   <none>         8084/TCP                     11h
micro-tunnel            NodePort       10.43.240.47    <none>         8083:30036/UDP               11h
micro-web               LoadBalancer   10.43.249.100   34.94.xxx.xxx   443:32297/TCP                11h
nats-cluster            ClusterIP      10.43.242.153   <none>         4222/TCP                     18h
nats-cluster-mgmt       ClusterIP      None            <none>         6222/TCP,8222/TCP,7777/TCP   18h
```

List of pods
```
❯ k get pods
NAME                                                              READY   STATUS             RESTARTS   AGE
etcd-operator-1578842949-etcd-operator-etcd-backup-operatotvzdx   1/1     Running            0          5h17m
etcd-operator-1578842949-etcd-operator-etcd-operator-779bdpkh59   1/1     Running            0          5h17m
etcd-operator-1578842949-etcd-operator-etcd-restore-operatzz6cv   1/1     Running            0          5h17m
greeter-5d4d9d986-cs9lc                                           1/1     Running            0          5h39m
greeter-web-555f85f96-vkp8g                                       0/1     CrashLoopBackOff   6          10m
micro-api-7d8c65469b-2vbhj                                        1/1     Running            0          10h
micro-api-7d8c65469b-52zsp                                        1/1     Running            3          5h17m
micro-api-7d8c65469b-82gmn                                        1/1     Running            3          5h17m
micro-bot-758d9c8846-nzqc9                                        0/1     CrashLoopBackOff   66         5h17m
micro-broker-6d5bcbdd89-2f7dg                                     1/1     Running            3          5h17m
micro-broker-6d5bcbdd89-kbvvb                                     1/1     Running            3          5h17m
micro-broker-6d5bcbdd89-mscn2                                     1/1     Running            3          5h17m
micro-debug-79b59796d4-qqqvv                                      0/1     CrashLoopBackOff   65         5h17m
micro-debug-web-79c74f8ddc-bj6sz                                  1/1     Running            0          10h
micro-init-595c7dd764-jf9qc                                       1/1     Running            0          10h
micro-monitor-5d8d5889b8-8hdj8                                    1/1     Running            3          5h17m
micro-network-7bfff7cb87-4t574                                    0/1     CrashLoopBackOff   64         5h17m
micro-network-7bfff7cb87-qrpwn                                    1/1     Running            0          10h
micro-network-7bfff7cb87-w5rk8                                    0/1     CrashLoopBackOff   64         5h17m
micro-network-api-8cc6bcc89-jtv7d                                 1/1     Running            2          5h17m
micro-network-web-76d797c747-j7mn6                                1/1     Running            0          10h
micro-proxy-66649877b5-6dfnt                                      1/1     Running            3          5h17m
micro-proxy-66649877b5-qwp7m                                      1/1     Running            3          5h17m
micro-proxy-66649877b5-v5nbh                                      1/1     Running            2          5h17m
micro-registry-7c6c98b7cd-qmqgv                                   1/1     Running            0          10h
micro-router-6cc45fcbb-ctk57                                      1/1     Running            0          10h
micro-runtime-7d9bd4f4f5-ptddm                                    1/1     Running            3          5h17m
micro-store-7ffd5cfbdb-zvkl7                                      0/1     CrashLoopBackOff   66         5h17m
micro-tunnel-68b877c957-mcgcs                                     0/1     CrashLoopBackOff   65         5h17m
micro-web-59b8c7464-b9xvk                                         1/1     Running            0          10h
nats-cluster-1                                                    1/1     Running            0          5h16m
nats-cluster-2                                                    1/1     Running            0          5h16m
nats-cluster-3                                                    1/1     Running            0          5h16m
nats-operator-7dcd546854-k5snb                                    1/1     Running            0          5h17m
```





I'm having trouble changing the transport type from 'http' to 'tcp' when running the 'micro service' command from the terminal. using the --transport=http argument works, but --transport=tcp fails with help output. I'm getting by by doing:

micro service --name memcached-activation --endpoint localhost:11212 --metadata host=localhost:11212

micro service --name mqtt-broker --endpoint localhost:1883 --metadata host=tcp://localhost:1883

and then reading the metadata, but I'd rather it just forward the traffic from the url given by the registry. I do understand that micro has a tcp plugin, but how do I use or install it properly using the micro command?
List of hacks/technical debt that needs to be fixed

- Micro debug dashboard should not use netdata by default
```
package github.com/cenkalti/backoff/v3: cannot find package "github.com/cenkalti/backoff/v3" in any of:
	/home/logan/go/src/github.com/cenkalti/backoff/v3 (from $GOROOT)
	/home/logan/Dev/go/src/github.com/cenkalti/backoff/v3 (from $GOPATH)
```

However, it most definitely is in `/home/logan/Dev/go/src/github.com/cenkalti/backoff`

11 days ago centkali release v4 of library, and doesn't have a v3.0* (although it should use `^3*`, right?).

What am I doing wrong here?

----

After some things it seems `GO111MODULE=on` was the issue, but when enabling that we came across this issue

```
../../pkg/mod/github.com/lucas-clemente/quic-go@v0.14.1/internal/handshake/crypto_setup.go:433:40: not enough arguments in call to h.conn.GetSessionTicket
```
Hello,

I have a service failed and got restarted by supervisor, but the previously registered node was not removed by consul.

service log:
```
2019/12/18 20:01:25 Registry [consul] Registering node: cmn-83735645-56b9-43c0-a1f7-60e5e8aa9308
2019/12/27 04:09:37 rpc: unable to write error response: write tcp 172.16.194.193:37701->172.16.157.166:33044: write: broken pipe
2019/12/27 04:09:48 rpc: unable to write error response: write tcp 172.16.194.193:37701->172.16.157.166:33036: write: broken pipe
2019/12/27 04:10:36 rpc: unable to write error response: write tcp 172.16.194.193:37701->172.16.157.166:33048: write: broken pipe
2019/12/27 04:11:06 rpc: unable to write error response: write tcp 172.16.194.193:37701->172.16.157.166:33040: write: broken pipe
2019/12/27 05:26:52 Transport [http] Listening on [::]:37277
2019/12/27 05:26:52 Broker [http] Connected to [::]:45244
2019/12/27 05:26:52 Registry [consul] Registering node: cmn-b4e895d4-978e-4cab-ada6-9967956587e2
2019/12/28 11:54:19 Registry [consul] Deregistering node: cmn-b4e895d4-978e-4cab-ada6-9967956587e2
2019/12/28 11:54:37 Transport [http] Listening on [::]:36049
```

consul log:
```
2019/12/27 01:50:53 [INFO] raft: Snapshot to 786482 complete
2019/12/27 04:02:33 [ERR] yamux: keepalive failed: i/o deadline reached
2019/12/27 04:09:36 [ERR] yamux: keepalive failed: connection write timeout
2019/12/27 04:10:57 [WARN] consul: error getting server health from "res": context deadline exceeded
2019/12/27 04:16:22 [WARN] consul: error getting server health from "res": rpc error getting client: failed to get conn: dial tcp 172.16.194.193:0->172.16.194.193:8300: i/o timeout
2019/12/27 05:14:30 [WARN] consul.coordinate: Batch update failed: timed out enqueuing operation
2019/12/27 05:26:52 [INFO] agent: Synced service "cmn-b4e895d4-978e-4cab-ada6-9967956587e2"
==> Newer Consul version available: 1.6.2 (currently running: 1.5.1)
2019/12/28 11:51:41 [INFO] agent: Caught signal:  terminated
2019/12/28 11:51:41 [INFO] agent: Graceful shutdown disabled. Exiting
2019/12/28 11:51:41 [INFO] agent: Requesting shutdown
2019/12/28 11:51:41 [INFO] consul: shutting down server
```

Since failed node was not removed, it became a zombie node, a lot of requests were still directed to it.

How to make consul remove the failed node?
Because of some reason, I only can use windows to dev my application.

I exec ` micro` in powershell and wait load finished, then exec ` micro list service` in another powershell, but it show nothing, even try more times.

I thought maybe my network have too much mDNS package, After I stop connet LAN, thing is going better, but it can not show all service every time(maybe nothing, or incomplete, or full). I run it in the `Windows Sandbox`, where have a very clear network , It seem everythings is ok.

Because mDNS can't use, I have tried use consul, but when I exec `micro --register consul`, it show the help list without any error. So I have no way to use it.

Here is my `go env`
``` bash
set GO111MODULE=on
set GOARCH=amd64
set GOBIN=
set GOCACHE=C:\Users\XXX\AppData\Local\go-build
set GOENV=C:\Users\XXX\AppData\Roaming\go\env
set GOEXE=.exe
set GOFLAGS=
set GOHOSTARCH=amd64
set GOHOSTOS=windows
set GONOPROXY=
set GONOSUMDB=
set GOOS=windows
set GOPATH=C:\Users\XXX\go
set GOPRIVATE=
set GOPROXY=https://proxy.golang.org,direct
set GOROOT=C:\Go\go1.13.5
set GOSUMDB=sum.golang.org
set GOTMPDIR=
set GOTOOLDIR=C:\Go\go1.13.5\pkg\tool\windows_amd64
set GCCGO=gccgo
set AR=ar
set CC=gcc
set CXX=g++
set CGO_ENABLED=1
set GOMOD=NUL
set CGO_CFLAGS=-g -O2
set CGO_CPPFLAGS=
set CGO_CXXFLAGS=-g -O2
set CGO_FFLAGS=-g -O2
set CGO_LDFLAGS=-g -O2
set PKG_CONFIG=pkg-config
set GOGCCFLAGS=-m64 -mthreads -fmessage-length=0 -fdebug-prefix-map=C:\Users\XXX\AppData\Local\Temp\go-build615869278=/tmp/go-build -gno-record-gcc-switches
```

If you need other infomation, please tell me.
 I’ve just started to study go micro. I need process message like tcp long connect, so i chose use stream rpc, and create service with tcp transport. I define a read rpc and a write rpc in proto,  and use this two rpc create read/write stream:
rpc Request (stream ReqMessage) returns (ResMessage) { }
rpc Response (ReqMessage) returns (stream ResMessage) { }

in my server code,  i use two goroutine to process Requeststream/ResponseStream read/write:
func (c *ClientStream) WriteLoop(stream pb.MicroService_ResponseStream) {
	for {
		select {
		case msg := <-c.chBuf:
			if err := stream.Send(msg); err != nil {
				log.Errorf("WriteLoop error:%v", err)
				break
			}
		case <-c.close:
			return
		}
	}
}

func (c *ClientStream) ReadLoop(rsp pb.MicroService_RequestStream) {
	for {
		msg, err := rsp.Recv()
		if err != nil {
			log.Errorf("ReadLoop error:%s", err.Error())
			break
		}
		c.Recv(msg)
	}
	close(c.close)
}
 
if I  kill client to disconnect from server， but this two stream can't capture disconnect event,  this two loop can't  break. In go micro source code rpc_server.go，i found transprot.socket close was blocked by wg.wait() :
func (s *rpcServer) ServeConn(sock transport.Socket) {
	var wg sync.WaitGroup
	var mtx sync.RWMutex
	// streams are multiplexed on Micro-Stream or Micro-Id header
	sockets := make(map[string]*socket.Socket)

	defer func() {
		// wait till done
		wg.Wait()

		// close underlying socket
		sock.Close()

		// close the sockets
		mtx.Lock()
		for id, psock := range sockets {
			psock.Close()
			delete(sockets, id)
		}
		mtx.Unlock()

		// recover any panics
		if r := recover(); r != nil {
			log.Log("panic recovered: ", r)
			log.Log(string(debug.Stack()))
		}
	}()
      ...
}

in debug, i found wg value was 2,  so defer was blocked.

problem：
1 Please explain why wg value was 2.  
     I guess,  psock have two goroutine(read/write).。If  no message in psock's chan(send and recv), this two goroutine will be blocked, can't break loop ??

2 How to solve wg.wait() block problem in stream rpc?




we know Go-Micro has integrated Etcd/Consul `k-v store `and `watch` for distributed configuration.

But for most services, just reading the configs is not enough. we need a service to support reading and watching configs and also have the ability to manage data on a web portal. 

- to be a service
- distributed
- store pluggable: MySQL/PostgreSQL/Redis/Etcd/Consul/Git etc etc
- cluster: supports different clusters. they can share and copy configs from each other.
- version: easy for clients to read special version data
- canary tests: supports push data to special clients based on IP/Metadata/...
- able to roll-back: supports rolling back the last push. 
- global and unified management entrance(web portal). 

## Design:

![image](https://user-images.githubusercontent.com/20906540/69901711-06fb4300-13c0-11ea-81d3-3e2280ec8ecc.png)

- Clients: any client or service which reading configs from `config-srv(micro config)`
- Platform-web: UI-Portal,  web dashboard.
- Config-Srv: `micro config`，supports for micro-services to read configs and watch the change of config.  but only supports update/delete data for `admin-srv`
- admin-srv:  management srv for `micro config`(we can merge `config-srv` and `admin-srv`)

## Config Data structure:

![image](https://user-images.githubusercontent.com/20906540/69901773-01eac380-13c1-11ea-80e9-19b0d97af190.png)

- App: application name
  - Cluster: eg. dev-a, dev-b, test-a, test-b
    - Namespace
      - Item: config item
        - Key
        - Value

## Request AND Protocol AND Store

> VERSION1:#{APP}/#{CLUSTER}/#{Namespace1}

### Core Store

id | namespace_id | key | value 
--- | --- | --- | --- 
1 | 2 | micro.book.name | BOOK-NAME 
2 | 2 | micro.book.price | 123 

### Format Convertible

Easy converts to JSON、Properties、YAML：

```json
{
  "micro": {
    "book": {
      "name": "BOOK-NAME",
      "price": "123"
    }
  }
}
```

So we don't support the data below:

id | namespace_id | key | value 
--- | --- | --- | --- 
1 | 2 | micro.book.name | BOOK-NAME 
2 | 2 | micro.book.price | 123 
3| 2 | **micro.book** | I am a good man

there are sub-keys in `micro.book`,  so it could not be a key, otherwise, it will get a conflict. 


