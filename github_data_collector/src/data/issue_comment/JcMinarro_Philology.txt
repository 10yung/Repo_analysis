Because we attach new wrapped context to support translations, the other resources (dimensions, colors) that we're trying to get from the Resources rely on initial Resources and in result we get non-correct values if `android:configChanges="orientation"` attribute is applied for the Activity in `Manifest.xml`. Also, the `onConfigurationChanged` method isn't called for any custom views.

### Changes
 1. Override all remaining methods in `PhilologyResources` and used the `baseResources` field to get all values except text resources.
2. Create `CustomView` and update the sample project to test configuration changes.

### How to test
1. Run the sample project.
2. Observe text is changing on text view at the bottom on orientation change.
**Describe the bug**
When reading a custom attribute for a custom view component we are using the `TypedArray` returned by [Context#obtainStyledAttributes](https://developer.android.com/reference/android/content/Context#obtainStyledAttributes(android.util.AttributeSet,%20int%5B%5D)). This function is invoked on a [PhilologyContextWrapper](https://github.com/JcMinarro/Philology/blob/9523b9f810c7c9c13af7a58748961281fc11ebff/philology/src/main/java/com/jcminarro/philology/PhilologyContextWrapper.kt#L11) provided by [Philology#wrap](https://github.com/JcMinarro/Philology/blob/9523b9f810c7c9c13af7a58748961281fc11ebff/philology/src/main/java/com/jcminarro/philology/Philology.kt#L30).

The current issue with this `TypedArray` instance is that its [getString()](https://developer.android.com/reference/android/content/res/TypedArray.html#getString(int)) function does not return a translated text. That's why we need the [ViewTransformer#reword](https://github.com/JcMinarro/Philology/blob/d26966208d7b1da99805ba0fcdd3e029f2ba3a25/philology/src/main/java/com/jcminarro/philology/ViewTransformer.kt#L10) where we basically [obtain the resource id](https://github.com/JcMinarro/Philology/blob/d26966208d7b1da99805ba0fcdd3e029f2ba3a25/philology/src/main/java/com/jcminarro/philology/ViewTransformer.kt#L18) of the String and reapply it on the view. And that's why the android framework also fails to set a translated text from a custom attribute(we've added the support in #27 but it's still handle this manually). This is handled currently by [transformer](https://github.com/JcMinarro/Philology/tree/d26966208d7b1da99805ba0fcdd3e029f2ba3a25/philology/src/main/java/com/jcminarro/philology/transformer) package implementations for various components.

**To Reproduce**
Replace [this](https://github.com/JcMinarro/Philology/blob/d26966208d7b1da99805ba0fcdd3e029f2ba3a25/philology/src/main/java/com/jcminarro/philology/transformer/TextViewTransformer.kt#L16) reword implementation with:
```
    private fun TextView.reword(attributeSet: AttributeSet) {
        @StringRes val text =
            context.obtainStyledAttributes(attributeSet, intArrayOf(android.R.attr.text)).getString(0)
        @StringRes val hint =
            context.obtainStyledAttributes(attributeSet, intArrayOf(android.R.attr.hint)).getString(0)

        if (text.isNotEmpty()) setText(text)
        if (hint.isNotEmpty) setHint(hint)
    }
```
Run the sample and see the `TextView` components missing translations.
**Expected behavior**
The ideal case would be to help the framework use a correct `TypedArray` instance containing translated strings. This would help us get rid of `ViewTransformer.reword`, but this is the ideal case.

In order to ease the life of other teams would be nice to have a lint rule that will prohibit the usage of the [TypedArray#getString()](https://developer.android.com/reference/android/content/res/TypedArray.html#getString(int)) letting devs now that it will not return a translated text.
This should be a temporary solution while we search for a real fix.

**Library version**
[v-2.1.0](https://github.com/JcMinarro/Philology/releases/tag/v-2.1.0)

**Describe the bug**
`Activity#getTitle` method returns untranslated label we set in `android:label` attribute in the `AndroidManifest.xml` and we cannot intercept it. The workaround is to read label of the activity directly from the `AndroidManifest.xml` and after that request string by this id from repository:
```
ActivityInfo activityInfo = getPackageManager().getActivityInfo(
                        getComponentName(),
                        PackageManager.GET_META_DATA
                );
 String label = getString(activityInfo.labelRes);
```

**Expected behavior**
`Activity#getTitle` method should return translated label

**Library version**
2.0.1

**Describe the bug**
Updating [`Appcompat` library to `1.1.0`](https://developer.android.com/jetpack/androidx/releases/appcompat#1.1.0) on the app side stop's `Philology` intercepting the text value on devices with API levels 21-25. Since the problem doesn't reproduce on versions bellow [1.1.0-rc01](https://developer.android.com/jetpack/androidx/releases/appcompat#1.1.0-rc01) most likely it is caused by the [`26079d8`](https://android.googlesource.com/platform/frameworks/support/+/26079d87c79a64829f036236353fac1dae4e0613) commit ([diff](https://android.googlesource.com/platform/frameworks/support/+/26079d87c79a64829f036236353fac1dae4e0613%5E%21/#F2)) with the description:

> Turned out to be a gnarly framework bug on API levels 21-25. The test was failing due to the application Resources seemingly being updated when it shouldn't have been. Worked around by always using applyOverrideConfiguration() on those API levels, to force a new Resources instance.


**To Reproduce**

1. Update the `Appcompat` by changing `Dependencies#APP_COMPAT_VERSION` to `1.1.0` or change `implementation Dependencies.appCompat` to `implementation "androidx.appcompat:appcompat:1.1.0"` just for the `sample` module.
2. Run the sample app

**Expected behavior**
`Philology` should replace the text in the sample app based on the device locale.

**Actual behavior**
`Philology` doesn't replace the text in the sample app.

**Logs/Screenshots**
<img src="https://user-images.githubusercontent.com/1947850/68860389-1a38be00-06f2-11ea-8013-041c17abaa7e.png" width =300 />

**Library version**
2.0.1

How is the performance of this library? Is it fast? Does it increase screen rendering time? 
I am an Android developer from China.  What is the use of this project for the application?   
I have used the method to set only the String files of different countries.  Forgive me for not posting an app on Google Play