I think there is a bug in the DefaultConsumerErrorStrategy (https://github.com/EasyNetQ/EasyNetQ/blob/95382c5ecd7967b2db3ed7485f0bd0205973f901/Source/EasyNetQ/Consumer/DefaultConsumerErrorStrategy.cs)

Publisher Confirm is not taken into account when the channel is created in the DefaultConsumerErrorStrategy.

```csharp
using (var model = connection.CreateModel())
{
    var errorExchange = DeclareErrorExchangeWithQueue(model, context);

     var messageBody = CreateErrorMessage(context, exception);
     var properties = model.CreateBasicProperties();
     properties.Persistent = true;
     properties.Type = typeNameSerializer.Serialize(typeof(Error));

     model.BasicPublish(errorExchange, context.Info.RoutingKey, properties, messageBody);

     return AckStrategies.Ack;
}
```

I think it needs to wait for the Publisher Confirm if it is enabled - before it returns Ack or Nack for example by using

```csharp
model.WaitForConfirmsOrDie(new TimeSpan(0, 0, 5));
```

or

```csharp
model.ConfirmSelect();
model.BasicAcks += (sender, ea) =>
{
  // code when message is confirmed
};
model.BasicNacks += (sender, ea) =>
{
  //code when message is nack-ed
};
```

or am i missing something ?

Best Regards René :)
# DO NOT MERGE THIS

This is just a proof of concept about the idea of having an injectable ILogger interface along with LibLob as default implementation.

See the discussion #991 
https://github.com/damianh/LibLog
"⚠️ LibLog is now deprecated (see https://github.com/damianh/LibLog/issues/270).

My recommend course of action for library developers is to use Microsoft.Extensions.Logging.Abstractions as it is now the defacto standard logging interface in the .NET ecosystem. For library developers that wish to continue to use LibLog or need to make adjustments for their needs should copy the code into their project (after all, that's just what LibLog did).

Thanks to all contributors and users for the support over the years.

Damian"
I'm using this library and quite happy with it. But I have a problem and I didn't find any solution for it int docs or sources.

Yesterday my DC restarted several times so rabbit broker seems to cancel subscription. This is the most recent entry in the logs:

> Context: EasyNetQ.Consumer.BasicConsumer
> MessageTemplate: Consumer with consumerTag {consumerTag} has cancelled

Then my app stuck because it couldn't reconnect back to the broker. Or I suspect that because nothing get written in the logs (although queue contained some messages).

In other words: if there are some reconnection attempts I don't see them in logs.

Is there any way to handle this? As I see `BasicConsumer.HandleBasicCancel` is not virtual or anything so I don't see how can I change this behavior. I'd like to either setup some reconnect strategy (like start polling broker and re-establish connect) or at least allow code to crash with "broker is unavailable" so I could restart my app and thus make reconnect happen.


Looks related to #984
In a word: **System.Threading.Channels** from netcore 3.0 above and it has built-in async support, and uses the new `ValueTask` for better performance when the task completes synchronously.

Some info:

- [An Introduction to System.Threading.Channels](https://devblogs.microsoft.com/dotnet/an-introduction-to-system-threading-channels/)
- [System.Threading.Channels Namespace](https://docs.microsoft.com/en-us/dotnet/api/system.threading.channels?view=netcore-3.0)

The core abstractions exposed from the System.Threading.Channels library are a writer:

```csharp
public abstract class ChannelWriter<T>
{
    public abstract bool TryWrite(T item);
    public virtual ValueTask WriteAsync(T item, CancellationToken cancellationToken = default);
    public abstract ValueTask<bool> WaitToWriteAsync(CancellationToken cancellationToken = default);
    public void Complete(Exception error);
    public virtual bool TryComplete(Exception error);
}
```

and a reader:

```csharp
public abstract class ChannelReader<T>
{
    public abstract bool TryRead(out T item);
    public virtual ValueTask<T> ReadAsync(CancellationToken cancellationToken = default)
    public abstract ValueTask<bool> WaitToReadAsync(CancellationToken cancellationToken = default);
    public virtual IAsyncEnumerable<T> ReadAllAsync([EnumeratorCancellation] CancellationToken cancellationToken = default);
    public virtual Task Completion { get; }
}
```
Hi, I'm trying to use the request/respond methods, following the example here: https://github.com/EasyNetQ/EasyNetQ/issues/748#issuecomment-366006906

I've created a new solution to try and get this working, so I'm running the same code as in that comment.

The server responds correctly whenever I publish a message: Throwing 1 about Hello World!, Throwing 2 about Hello World!, but the exception isn't picked up in the client - it just times out after a few seconds: Unhandled exception. System.TimeoutException: Request timed out.

Any idea what's going on here? Has error handling for request/respond changed since Feb 2018?

EasyNetQ Version: 3.8.0-alpha0040
RabbitMQ Version: 3.8.1
Erlang Version: 22.1

---

Whenever I try to alter the name of my connection using EasyNetQ, `undefined` is displayed inside the management ui - which basically indicates that a `null` value was given.

I do not believe that the RabbitMQ server is the problem root here as it is possible to set the name using python.

Unfortunately, I am not able to derive a solution from looking at the [ConnectionConfiguration](https://github.com/EasyNetQ/EasyNetQ/blob/95382c5ecd7967b2db3ed7485f0bd0205973f901/Source/EasyNetQ/ConnectionConfiguration.cs)s source code and cannot debug the problem myself.

### Example Coding

``` c#
var configuration = new ConnectionConfiguration
{
    ...,
    Name = "MyCustomName"
 };

// tried this as well. same result
configuration.ClientProperties.Add("connection_name", "MyCustomName");

// gives `undefined`
var connection = RabbitHutch.CreateBus(configuration, _ => { });

// gives `undefined`
var connection = RabbitHutch.CreateBus("... ;name=MyCustomName");
```

However, it is possible to declare completely new fields on `ClientProperties`.
Hi Brother,

we use EasyNetQ to publish message every 5 minutes in client,  If RabbitMQ highwater mark(either disk space or memory) is reached, RabbitMQ Server will refuse any client incoming message, which will cause client application threads count to increase to more than thousands. 
how to solve this problem? is is possible to pre-check highwater mark in client before publish message? thank you! 
Hi,

We currently hosting rabbitmq as docker image and sometimes we need to kill or restart that container while subscribers using easynetq are connected. If it happens after rabbit is available to subscribers no queues are created till subscribers are restarted. Also it looks like that if we configure rabbit in a way that all needed queues are automatically created then pub and sub side can't communicate. 

So how to force subscribers to create queues after recovering from Rabbit restart?
Hi team,

I wish to know how we can customize the client properties visible in the connection tab in RabbitMq server using EasyNetQ?

Please guide.

Thanks.