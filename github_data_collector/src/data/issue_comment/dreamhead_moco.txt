Even it's simple to run the jar package, maybe we can build the docker image to start up a stub server.
Just give the json config, then we can run a stub server via docker.

 post request, json: {   "input":"{\"amount\":10.0,\"request_id\":\"20191029010433\"}}
'request_id' is unique for each request, how can I deal with such request and return a unique response_id
 

.\moco-runner-1.0.0.jar中没有主清单属性

why?
eg.
 "response": {
        "text": {
            "template": "${req.queries['foo']}"
        }
    }
 to:
 "response": {
        "json": { 
             "foo" : { "template": "${req.queries['foo']}" }
        }
    }



post image 
textview
------WebKitFormBoundaryQr5LoziEuwpwRaul
Content-Disposition: form-data; name="file"; filename="xsx123.jpg"
Content-Type: image/jpeg
how to match it?
I use Socket Api，I want to forward request, such as
text a,   response mock data;
text b,   forward data to real server

Please show me some demos,  Thanks.
When I try to build your project to get a SNAPSHOT I get the next error. 
```
[...]
Warning: org.objectweb.asm.signature.SignatureWriter: can't find referenced class java.lang.String
Warning: org.objectweb.asm.signature.SignatureWriter: can't find referenced class java.lang.String
Warning: org.objectweb.asm.signature.SignatureWriter: can't find referenced class java.lang.String
Warning: org.objectweb.asm.signature.SignatureWriter: can't find referenced class java.lang.String
Warning: there were 76611 unresolved references to classes or interfaces.
         You may need to add missing library jars or update their versions.
         If your code works fine without the missing classes, you can suppress
         the warnings with '-dontwarn' options.
         (http://proguard.sourceforge.net/manual/troubleshooting.html#unresolvedclass)
Warning: there were 131 unresolved references to program class members.
         Your input classes appear to be inconsistent.
         You may need to recompile the code.
         (http://proguard.sourceforge.net/manual/troubleshooting.html#unresolvedprogramclassmember)

> Task :moco-runner:proguard FAILED

FAILURE: Build failed with an exception.

* What went wrong:
Execution failed for task ':moco-runner:proguard'.
> java.io.IOException: Please correct the above warnings first.

* Try:
Run with --stacktrace option to get the stack trace. Run with --info or --debug option to get more log output. Run with --scan to get full insights.

* Get more help at https://help.gradle.org
```
test case code:
```
import com.github.dreamhead.moco.Moco;
import com.github.dreamhead.moco.junit.MocoJunitRunner;
import org.apache.http.HttpResponse;
import org.apache.http.client.fluent.Request;
import org.junit.Rule;
import org.junit.Test;
import org.junit.runner.RunWith;

import java.io.IOException;

public class BzdWithdrawHisServiceImplTest {
    @Rule
    public MocoJunitRunner runner = MocoJunitRunner.jsonHttpRunner(12306, Moco.pathResource("foo.json"));

    @Test
    public void  mockTest() throws IOException {
        HttpResponse httpResponse = Request.Get("http://localhost:12306").execute().returnResponse();
        System.out.println(httpResponse);
    }
}
```

error when running with `mvn test`:

```
Tests run: 1, Failures: 0, Errors: 1, Skipped: 0, Time elapsed: 2.355 sec <<< FAILURE! - in com.ppmoney.feastful.fc.BzdWithdrawHisServiceImplTest
mockTest(com.ppmoney.feastful.fc.BzdWithdrawHisServiceImplTest)  Time elapsed: 0.012 sec  <<< ERROR!
java.lang.IllegalArgumentException: unknown field [$jacocoData]
	at com.ppmoney.feastful.fc.BzdWithdrawHisServiceImplTest.<init>(BzdWithdrawHisServiceImplTest.java:15)
```

configuration in pom.xml: 

```
...
        <!-- https://mvnrepository.com/artifact/com.github.dreamhead/moco-junit -->
        <dependency>
            <groupId>com.github.dreamhead</groupId>
            <artifactId>moco-junit</artifactId>
            <version>0.12.0</version>
        </dependency>

        <!-- https://mvnrepository.com/artifact/com.github.dreamhead/moco-runner -->
        <dependency>
            <groupId>com.github.dreamhead</groupId>
            <artifactId>moco-runner</artifactId>
            <version>0.12.0</version>
        </dependency>
...
            <plugin>
                <groupId>org.jacoco</groupId>
                <artifactId>jacoco-maven-plugin</artifactId>
                <version>${jacoco.maven.plugin.version}</version>
                <executions>
                    <execution>
                        <goals>
                            <goal>prepare-agent</goal>
                        </goals>
                    </execution>
                    <execution>
                        <id>report</id>
                        <phase>prepare-package</phase>
                        <goals>
                            <goal>report</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>
```

I have test with several versions, here is the result:

| jacoco maven plugin version| result|
|-----------------------------|------|
|0.7.2.201409121644|success|
|0.7.7.201606060606|success|
|0.7.8 | error |
| 0.8.2 | error |

Almost the same as  this issue: [ERROR : Maven test fails to run moco server when using jacoco maven plugin.](https://github.com/dreamhead/moco/issues/111). Since it is closed, so I created this new issue instead.
I want to know more about moco and its design pattern. Could you help me.