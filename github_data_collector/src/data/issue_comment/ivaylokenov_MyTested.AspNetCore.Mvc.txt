#283 
We can extend the support for adding errors to the test's model state, with the following extension to the API.

```
 MyController<MvcController>
    .Instance()
    .WithModelState(modelState => modelState
        .For<RequestModel>()
        .WithErrorFor(m => m.RequiredString, "Some Error")
        .WithErrorFor(m => m.Integer, "Another Error"))
```

This should add to the current model state's dictionary the following 2 entries:

1.  Entry with key "RequiredString" and a value of "Some Error"
2.  Entry with key "Integer" and a value of "Another Error"
The tutorial should reflect the routing and the pipeline testing change - the difference between the execution of the filters.
It should be based on the MVC options. It should provide `.WithEndpoints` method after the `StartsFrom` call.
Route tests should not execute the action and its action filters. A route test should only assert whether ASP.NET Core has the correct mapping of the URL and whether the model binding is working.

A pipeline test should execute both the action and its action filters - the whole MVC pipeline.

This breaking change is required because currently, the route tests mock the actual action call for performance reasons but action filters may need the actual data but unfortunately, they receive mocks, which leads to unexpected behavior.

```c#
// Does not execute action and action filters by default.
MyRouting
    .Configuration()
    .ShouldMap("/My/Action/5")
    .To<MyController>(c => c.Action(5));
```

```c#
// Executes action and action filters by default.
MyPipeline
    .Configuration()
    .ShouldMap("/My/Action/5")
    .To<MyController>(c => c.Action(5));
```

Optional methods should be provided - `WithActionExecution` and `WithoutActionExecution` for overriding the default behaviour.
It should be resembling JsonSeriallizerSettings as a structure and idea.

(ivaylokenov#41), (ivaylokenov#34)

`.Instance` should allow creating controllers and view components with inner builder like so:

```c#
MyController<MyMvcController>
    .Instance(instance => instance    
        .WithOptions(options => options
            .For<MyAppSettings>(settings => settings.Cache = true))
        .WithSession(session => session
            .WithEntry("MySession", "MySessionValue")))
    .Calling(c => c.MyAction())
    .ShouldReturn()
    .View();
```

It should directly use the `IControllerBuilder` and `IViewComponentBuilder` interfaces.