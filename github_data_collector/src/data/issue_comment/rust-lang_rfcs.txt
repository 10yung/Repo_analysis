Rust gives we programmers strong safety(thanks for Rust team~), but also gives us freedom to write some code maybe unsafe with keyword "unsafe". But as should be known to all Rust programmers, it doesn't mean the code be tagged as "unsafe" is exactly unsafe, as long as we know what we are doing (no undefined behavior).

For example (maybe crazy), about the classic panic issue--- giving a value to a vector with index that is out of range. Does it should be recognized as unsafe **all the time**? Generally, yes , it is unsafe. But what if as a reverse engineering, I know exactly what the data in heap is, and for some purpose, I want to give a value exactly behind the "safe" bound of the vector?

Here, what I want to point out is that I agree with what Rust team think about what Rust should be. But following the road, I think maybe the keyword "unsafe" is **too subjective**, maybe a word more objective is better ,like say "caution". Though in my own style , I would prefer "!", but to follow Rust philosophy, a more complex word may be better to caution us and try best to avoid it.

Ok, I have to admit that the reason for this suggestion is due to the recent "Actix" issue, I don't want to someone who would be pissed off **by just not quite knowing about the keyword "unsafe" ,but not exactly unsafety**.
A redesigned `asm!` macro, with a path to stabilization.

[Rendered](https://github.com/Amanieu/rfcs/blob/inline-asm/text/0000-inline-asm.md)

Thanks to everyone involved in the [inline asm project group](https://github.com/rust-lang/project-inline-asm/) for their feedback which helped make this RFC possible!
From https://github.com/rust-lang/rust/issues/48649 (closed as needing an RFC): It would be nice for `Range<Idx: Copy>` to implement `Copy`.

I want to store a Range in a struct, but that prevents me from making the struct Copy. I can make a (start, end) struct that wraps it but that seems a little silly.

With `Range` from the standard library ([playground](https://play.rust-lang.org/?version=stable&mode=debug&edition=2018&gist=bfd0263b6280708f5c7edfdd4418b9ae)):

```rust
use core::ops::Range;

// error[E0204]: the trait `Copy` may not be implemented for this type
#[derive(Copy)]
struct HasRange {
    r: Range<usize>,
    other_field: usize,
}

// works fine
struct HasRangeWrapper {
    r: RangeWrapper,
    other_field: usize,
}

#[derive(Copy, Clone)]
pub struct RangeWrapper {
    start: usize,
    end: usize,
}

// Note that Range is isomorphic to RangeWrapper;
// you can convert freely between the two
impl From<Range<usize>> for RangeWrapper {
    fn from(range: Range<usize>) -> Self {
        Self { start: range.start, end: range.end }
    }
}

impl From<RangeWrapper> for Range<usize> {
    fn from(range: RangeWrapper) -> Self {
        Self { start: range.start, end: range.end }
    }
}
```

There is more discussion of pros and cons [in the rust-lang/rust issue](https://github.com/rust-lang/rust/issues/48649#issuecomment-478350940).
Assuming that the elements within a `LinkedList` never move in memory (which is normally the case), iterating over the list could return `Pin<&T>` or `Pin<&mut T>` rather than plain `&T` or `&mut T`.
### :framed_picture: [Rendered](https://github.com/lcdr/rfcs/blob/master/text/0000-supertrait-item-shadowing.md)

### [Pre-RFC thread](https://internals.rust-lang.org/t/pre-rfc-supertrait-item-shadowing/11421)

### :memo: Summary

Change item resolution for generics and trait objects so that a trait bound does not bring its supertraits' items into scope if the subtrait defines an item with this name itself.

This makes it possible to write the following, which is currently rejected by the compiler due to ambiguity:

```rust
trait Super {
    fn foo(&self);
}

trait Sub: Super {
    fn foo(&self);
}

fn generic_fn<S: Sub>(x: S) {
    x.foo();
}
```
Sometimes we want do divide an integer by another integer and round up the result to next integer. For example we might want to know how many write operations of a specific size are required to fully write a file of a specific size. 

Regular integer division in such scenarios will result in a value that is 1 below the desired result for all operations that involve a remainder and correct for those that don't. There are typically three methods used to calculate such a value: 

- cast to a floating point and subsequently round up
- do the integer division, then check if the modulo produces a remainder and add one in that case
- and finally (dividend + divisor - 1) / divisor

The final method while being efficient is not the most readable. Not only can it get very long if we use long and descriptive variable names like: 

`(data_file_size + max_write_length - 1) / max_write_length` 

but it's not quite so obvious what we are doing. For this reason I suggest adding the operator `+/` so the same operation can be written as such:

`data_file_size +/ max_write_length` or `dividend +/ divisor`

Although such operations almost always only make sense for positive integers. One might consider also adding additional operators `-/`, `/-` and `-/-` to deal with situations where it is known before hand that, respectively, the dividend, divisor or both are negative to avoid unnecessary calls to the absolute value function. 

This is the first RFC from the inline asm project group!

[Rendered](https://github.com/Amanieu/rfcs/blob/llvm-asm/text/0000-llvm-asm.md)
[Rendered](https://github.com/MaulingMonkey/rfcs/blob/pr/export-executable-symbols/text/0000-export-executable-symbols.md)

Add the ability to export symbols from executables, not just dylibs, via a new compiler flag: -C export-executable-symbols.

(Bonus:  I've also [implemented](https://github.com/MaulingMonkey/rust/commit/aa17dfbd63455a4aae1fce86a270035f74180c3e) and [used](https://github.com/MaulingMonkey/jerk/commit/e8c286cbdad0c98012350edb553bb38481398fde) this flag as a proof-of-concept to make sure I am indeed solving my problems with this suggestion, but I'm happy to rewrite or discard that if another approach seems better.)
For example, several of the iterator types in my crate [StaticVec](https://github.com/slightlyoutofphase/staticvec) could pretty trivially provide correct implementations of it, and I'd absolutely add them immediately if it were possible.
[Rendered](https://github.com/Amanieu/rfcs/blob/project-asm/text/0000-project-asm.md)