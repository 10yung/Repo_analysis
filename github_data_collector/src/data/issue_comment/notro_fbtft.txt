
This display is actually designed for the Arduino (pay more attention when purchasing...) but after some digging in the schematics, I discovered that, other than a 5V power supply, the logic is all 3.3v and since it's SPI I thought I'd give it a go.

It's based on the ili9486 controller and after much trial-and-error, I now have the display mostly working, using the following:

`sudo modprobe fbtft_device speed=16000000 custom name=fb_ili9486 gpios=reset:23,dc:24,led:22 width=320 height=480 buswidth=8 regwidth=8
`

This initializes the display and I can move the console (con2fbmap 1 1) and see the content.

However, the colors are all wrong. I tried setting `bgr=1` but that doesn't make the colors better, just different. Red comes out blue. Yellow comes out cyan.

Digging through the Arduino code (https://github.com/ImpulseAdventure/Waveshare_ILI9486/blob/master/src/LCD_Driver.cpp), it appears there's an initialization string that doesn't match the one in the ili9486 driver. I'm unsure of how to convert it though, can I literally take the sections and convert them? The initialization code seems _very_ different, so I suspect only elements of it need changing but I'm no expert here and I'm hoping someone can help.

This is the initialization code I've mangled from the Arduino file (I would put this all on one line):
```
-1,0XF9,0x00,0x08,
-1,0xC0,0x19,0x1a,
-1,0xC1,0x45,0x00,
-1,0xC2,0x33,
-1,0XC5,0x00,0x28,
-1,0xB1,0xA0,0x11,
-1,0xB4,0x02,
-1,0xB6,0x00,0x42,0x3B,
-1,0xB7,0x07,
-1,0xE0,0x1F,0x25,0x22,0x0B,0x06,0x0A,0x4E,0xC6,0x39,0x00,0x00,0x00,0x00,0x00,0x00,
-1,0XE1,0x1F,0x3F,0x3F,0x0F,0x1F,0x0F,0x46,0x49,0x31,0x05,0x09,0x03,0x1C,0x1A,0x00,
-1,0XF1,0x36,0x04,0x00,0x3C,0x0F,0x0F,0xA4,0x02,
-1,0XF2,0x18,0xA3,0x12,0x02,0x32,0x12,0xFF,0x32,0x00,
-1,0XF4,0x40,0x00,0x08,0x91,0x04,
-1,0XF8,0x21,0x04,
-1,0X3A,0x55,
-1,0xB6,0X00,0x22,
-1,0x36,0x08,
-2,200,
-1,0x11,
-2,120,
-1,0x29,
-3
```

**Edit**: Tried that and it didn't work, which doesn't surprise me.
This is a follow-up of [this thread](https://github.com/notro/fbtft/issues/518
)
So I've successfully integrated my 2.2" display using the "modprobe" method, but I'm not quite satisfied yet with how late in the boot process the display turns on, approx 50sec on the Pi Zero.

Here is the command that I am using to mount the display:
in /etc/modprobe.d/fbtft.conf:
`options fbtft_device name=rpi-display speed=10000000 gpios=reset:5,dc:6,led:13 rotate=90 cs=0 busnum=1`
	
in /etc/modules-load.d/fbtft.conf:
`spi-bcm2835aux`
`fbtft_device`

So to make the driver load earlier in the boot process, I understand that I should compile it directly into the kernel. I've successfully downloaded, cross-compiled and updated the kernel with success, but I can't seem to figure out which changes need to be made to enable:

1.  The device overlay for this specific display: 320x240, ili9341 chip,  no touchscreen, SPI1 port, CE0
2.  How to load it into the PI Zero. [These](https://github.com/notro/fbtft/wiki/Build-kernel-and-fbtft-drivers#configure-devices) instructions seem to be for different SoC bcm2708, whereas the PI zero has a bcm2835. The bcm_register_device function is not found in the board_bcm2835.c file includes, and I am not quite sure how to port it to the Pi Zero.

Any insights or guide on how to integrate this display into the kernel is highly welcome.
The error was: fbtft_device: unknown parameter 'gpios' ignored
Looking at the code, somebody removed the gpios module_param definition from fbtft_device.c since 5.1.rc1 and it has been broken ever since. Missing code:
static char *gpios;
module_param(gpios,

Do you know what the new interface should be? I have been using the commands like the following:
sudo modprobe fbtft_device custom name=fb_ili9341 gpios=reset:1,dc:201,led:6 speed=16000000 txbuflen=32768 rotate=270 bgr=1

The parameter gpios is not being recognized any more. What should it be replaced with to specify reset, dc, and led? Thanks.
I am doing development and prototyping using fbtft (using an ILI9341 based screen, though I don't think that particularly matters to the question).

Because of some issues with our test setup, it would be really useful to be able to re-initialise the attached screen if it gets power cycled. Currently doesn't work being power cycled as it won't be re-initialised by fbtft, which (understandably) assumes everything is fine.

Is there a way to do this?
I see the info about Beaglebone is targeting the caps folder which are un-existent in the version I have.

By the: '_Kernel Overlays are going bye-bye, too many bugs, too many race conditions, no kernel maintainers interested._'
https://elinux.org/Beagleboard:BeagleBoneBlack_Debian#Loading_custom_capes


```
bootloader:[microSD-(push-button)]:[/dev/mmcblk0]:[U-Boot 2018.09-00002-g0b54a51eee]:[location: dd MBR]
bootloader:[eMMC-(default)]:[/dev/mmcblk1]:[U-Boot 2018.01-00002-g9aa111a004]:[location: dd MBR]
kernel:[4.14.108-ti-r108]
nodejs:[v6.14.4]
uboot_overlay_options:[enable_uboot_overlays=1]
uboot_overlay_options:[uboot_overlay_pru=/lib/firmware/AM335X-PRU-RPROC-4-14-TI-00A0.dtbo]
uboot_overlay_options:[enable_uboot_cape_universal=1]
pkg check: to individually upgrade run: [sudo apt install --only-upgrade <pkg>]
pkg:[bb-cape-overlays]:[4.4.20180928.0-0rcnee0~stretch+20180928]

```
I have all the divers build OK  on the 108 TI kernel. I dont have a dts for BBB.
Is there an update information. 
Thank you.

Can I use the driver to test aka:
`
sudo modprobe fbtft_device custom busnum=1 name=fb_ili9488 gpios=reset:60,dc:48,led:115 speed=16000000
`

Thank you

now I try use oled ssd1306 chip on device mt7688.
the dts config  is below:
ssd1306@1 {
#address-cells = <1>;
#size-cells = <1>;
status = "okay";
compatible = "solomon,ssd1306";
reg = <1 0>;
spi-max-frequency = <1000000>;
#txbuflen = <16>;
rotate = <0>;
bgr;
fps = <15>;
buswidth = <8>;
dc-gpios = <&gpio0 11 1>;
reset-gpios = <&gpio0 14 1>;
cs-gpios = <&gpio0 6 1>;
};
the screen  is not normally display.
when it running, the debug information is write_vmem:write failed and returned -5;fbtft_update_display :write_vmem failed to display buffer.
I am trying to enable the fbtft debug messages but I have not been able to do so.

My kernel has been compiled with the dynamic debug flag and I have executed these commands to try to enable the debug logs:
`echo 'module fbtft +p' > /sys/kernel/debug/dynamic_debug/control`
`echo 'module fbtft_device +p' > /sys/kernel/debug/dynamic_debug/control`
`echo 8 > /proc/sys/kernel/printk`


But when I insert de module with:
`sudo modprobe fbtft_device name=ra8876_800x600 gpios=reset:46,dc:7 busnum=2 debug=7`

I cannot see any debug message on the dmesg output.
Hi, I am trying to get this display to work in full resolution with the fbtft_device module, but I am having no luck. I tried these options:
1. ~~Use fbtft_device name=adafruit28~~
2. Use fbtft_device name=pitft
Both of them have the same result. There is a part of the screen that I can draw onto and the rest just stays as random pixels. What should I do to get it working on full resolution? Also it may be worth mentioning, that I am on a Raspberry Pi zero w running Arch Linux ARM.

Edit: The adafruit28 option does not do anything.
The module with the fix for the Nokia 3310 to treat it as RGB works fine when loaded for the 5110, but when using nokia5110 as the name, the buffer is 128x128 (display is 84x48) and con2fbmap does not redirect the console.