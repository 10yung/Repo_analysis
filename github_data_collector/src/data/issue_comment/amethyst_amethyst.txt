## Description

For a mouse input axis one of the two radial values is guaranteed to go unused, so this simplifies the structure.

## Additions

- amethyst_input::Axis::Mouse::radius

## Removals

- amethyst_input::Axis::Mouse::radius_x
- amethyst_input::Axis::Mouse::radius_y

## Modifications

- N/A

## PR Checklist

By placing an x in the boxes I certify that I have:

- N/A Updated the content of the book if this PR would make the book outdated.
- [x] Added a changelog entry if this will impact users, or modified more than 5 lines of Rust that wasn't a doc comment.
- N/A Added unit tests for new code added in this PR.
- [x] Acknowledged that by making this pull request I release this code under an MIT/Apache 2.0 dual licensing scheme.

If this modified or created any rs files:

- [x] Ran `cargo +stable fmt --all`
- [x] Ran `cargo clippy --all --features "empty"`
- [x] Ran `cargo test --all --features "empty"`

## Description

The versions of Amethyst published on [crates.io](https://crates.io/crates/amethyst) don't compile on a Mac due to problems with metal v0.15.0 (from gfx-backend-metal 0.2.4, from rendy-util 0.3.1).

metal 0.15.0 fails with a number of occurrences of the following error:

```
error[E0282]: type annotations needed
...
consider giving 'result' a type
in this macro invocation
```

## Reproduction Steps

1. Create a new empty cargo project
2. add the dependency `amethyst = { version = "0.12.*", features = ["metal"] }` [or `0.13.2`]
3. `cargo build`


## What You Expected to Happen

All the Amethyst components should compile

## What Actually Happened

metal fails to compile.

## Screenshots and Logs

If applicable, add screenshots to help explain your problem. Any relevant logs would be helpful as well.

## Your Environment

1. OS: Mac OS Mojave
2. OS version: 10.14.16
3. Amethyst versions 0.12 and 0.13 (crates.io)

## Additional Context

The master version of Amethyst is using metal 0.16.0 (from gfx-backend-metal 0.3.3,
from rendy-util 0.4.1), which compiles.

## Description

When trying to build an example, there is no "OpenGL backend" feature. I see that there is a gfx-backend-gl in gfx-rs, so I was expecting that Amethyst and Rendy would support it.

## What problem does this solve? What need does it fill?
Add an OpenGL backend, so people without Vulkan support can still develop with Amethyst (or even ship games using OpenGL as a backend).

## Describe the solution you'd like
I'd like to see an OpenGL backend :)
I'm willing to contribute code for this.

## Describe alternatives you've considered
Keep using Rust + Amethyst and buy another laptop, use OpenGL directly, switch to JavaScript and use WebGL.

## Description

It fixes this issue(https://github.com/amethyst/amethyst/issues/2095)

## Additions

None

## Removals

None

## Modifications

Makes it so that draggable works with percent based widgets

## PR Checklist

By placing an x in the boxes I certify that I have:

- [ ] Updated the content of the book if this PR would make the book outdated.
- [ ] Added a changelog entry if this will impact users, or modified more than 5 lines of Rust that wasn't a doc comment.
- [ ] Added unit tests for new code added in this PR.
- [x] Acknowledged that by making this pull request I release this code under an MIT/Apache 2.0 dual licensing scheme.

If this modified or created any rs files:

- [x] Ran `cargo +stable fmt --all`
- [x] Ran `cargo clippy --all --features "empty"`
- [x] Ran `cargo test --all --features "empty"`

## Description

When using `percent: true` on my `UiTransformData` in the `UiFormat` prefab, the widget moves on dragging, but it moves incorrectly, presumably because the `percent: true` causes some bad scaling behavior.

## Reproduction Steps

1. Edit the ui example to make the "Draggable Button" have "percent: true"
2. Fix the x, y, width, height to make sure the button is still a reasonable size and position
3. Run the example and try to drag the button

## What You Expected to Happen

The button stays under my cursor while dragging.

## What Actually Happened

The button flew off the screen.

## Your Environment

1. Mac OS
2. 10.14.6 (18G1012)
3. rev 8c022f464e3d17a4b997cad83c5a1a62c7289ace
## Feature

amethyst_ui and the Amethyst Book

## Change

Add a chapter in the Amethyst Book about the UI code. Should include things like:

- what are the main components for UI entities?
- how do `UiTransform`s differ from `Transforms`
- how does the `Widgets` resource work?
- when should I use the `UiFinder` instead of `Widgets` and vice versa?
- how do I find my widgets?
- how can I define new `Widget`s?
- how do I create new widgets dynamically (not using a prefab)?
- how is the `Widget` entity hierarchy organized?
- how can I animate UI entities?
- what kind of patterns make UI workflows and management easier?

## Reason

The best way to understand the UI code right now is to read it. It's a lot of code, and it takes significant effort to understand use cases and design decisions. It would be better if users could read a chapter that describes the design of the UI code with annotated examples.

## Impact

Users would be able to understand the UI code much more quickly, and it would probably prevent a lot of questions from making it to the Discord #help channel.

## What problem does this solve? What need does it fill?
It would be nice to have a way to render an image generated with a shader as a UI element.

## Describe the solution you'd like
I believe we could provide another variant for `UiImageLoadPrefab` or `TexturePrefab` containing a handle of `ImageView`.
## Description

Change getting-started to explain how to setup and decide graphical engine for your newly started project.

Additionally, I think it would also be awesome if `amethyst new` could detect and set it, based on user OS. I am not sure how feasible it is.

## Reason

As it is neither getting-started or `amethyst new` mention about settings the graphics backend, leading to quite a few confusing people arriving on discord, unable to start their very first project.  I think that's a not great welcome experience, and should be improved. In the end, there is only one chance at first impressions ;).

## Impact

I can't see how it will have any but positive impact on new users.
## Description

A selected editable text field seems to be affected by clicks outside of its transform, and can't be deselected.

## Reproduction Steps

1. `cargo run --example ui --features vulkan`
2. Click inside the "Editable" text transform to select it.
3. Click anywhere else on the screen.

## What You Expected to Happen

It should be deselected.

## What Actually Happened

The cursor moves to the closest glyph at the X position that clicked, instead of being deselected. This should only happen if the click was inside the bounds of the transform.

## Your Environment

1. Operating System: Void Linux
2. Operating System Version: latest
3. Version of Amethyst: tested on master, 0.13, 0.12, and 0.11.
## Description

Tried to adapt the `asset_custom` example for a different type and tried to load it into the application. It fails with message:
```
thread 'main' panicked at 'Tried to fetch a resource of type "amethyst_assets::storage::AssetStorage<game::ResourceType>", but the resource does not exist.
Try adding the resource by inserting it manually or using the setup method.', /home/myuser/.cargo/registry/src/github.com-1ecc6299db9ec823/shred-0.9.4/src/world/mod.rs:420:13
note: run with RUST_BACKTRACE=1 environment variable to display a backtrace.
Segmentation fault (core dumped)
```

## Reproduction Steps

Code of main.rs
```
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ResourceType {
    name: String,
    weight: ResourceWeight,
    value: ClassValue,
}

pub type ResTypeHandle = Handle<ResourceType>;

impl Asset for ResourceType {
    const NAME: &'static str = "game::ResourceType";
    type Data = Self;
    type HandleStorage = VecStorage<ResTypeHandle>;
}

impl From<ResourceType> for Result<ProcessingState<ResourceType>, Error> {
    fn from(data: ResourceType) -> Result<ProcessingState<ResourceType>, Error> {
        Ok( ProcessingState::Loaded(data) )
    }
}

pub struct TestResourceLoadingState {
    progress: ProgressCounter,
    asset: Option<ResTypeHandle>,
}

impl TestResourceLoadingState {
    pub fn new() -> Self {
        Self {
            progress: ProgressCounter::new(),
            asset: None,
        }
    }
}

impl SimpleState for TestResourceLoadingState {
    fn on_start(&mut self, data: StateData<'_, GameData<'_, '_>>) {

        data.world.register::<ResourceType>();
        let loader = &data.world.read_resource::<Loader>();

        let handle = loader.load(
            "/common/resourcetypes/asset.ron",
            RonFormat,
            &mut self.progress,
            &data.world.read_resource::<AssetStorage<ResourceType>>()
        );
        self.asset = Some(handle);
    }

    fn update(&mut self, data: &mut StateData<'_, GameData<'_, '_>>) -> SimpleTrans {
        if self.progress.is_complete() {
            let rtypes_assets = data.world.read_resource::<AssetStorage<ResourceType>>();

            let asset = rtypes_assets.get(
                self.asset
                    .as_ref()
                    .expect("Expected asset handle to be set")
            )
            .expect("Expected asset resource to be loaded");

            info!("Loaded asset:\n{}", asset);

            Trans::Quit
        } else {
            Trans::None
        }
    }
}


impl Component for ResourceType {
    type Storage = VecStorage<Self>;
}

#[derive(Debug, Copy, Clone, PartialEq, Eq, PartialOrd, Ord, Serialize, Deserialize)]
#[repr(u32)]
pub enum ResourceWeight {
    Sack = 1,
    Barrel = 10,
    Stack = 100,
}

#[derive(Debug, Copy, Clone, PartialEq, Serialize, Deserialize)]
pub struct ClassValue {
    beggar:   f32,
    poor:     f32,
    middle:   f32,
    rich:     f32,
    merchant: f32,
    city:     f32,
}



fn main() -> amethyst::Result<()> {
    // Start Amethyst logger
    amethyst::start_logger(Default::default());

    // Create the App root
    let approot = application_root_dir()?;
    let display_cfgpath = approot.join("config").join("display.ron");

    // Create Game Data state
    let assets_dir = approot.join("assets");
    let binding_path = approot.join("config").join("bindings.ron");

    let gdata = GameDataBuilder::default()
        .with_bundle(
            RenderingBundle::<DefaultBackend>::new()
                // opens a window and draws to it
                .with_plugin(
                    RenderToWindow::from_config_path(display_cfgpath)
                        .with_clear([0.0, 0.0, 0.0, 1.0])
                )
                // Renders to a sprite
                .with_plugin(RenderFlat2D::default())
        )?
        .with_bundle(TransformBundle::new())?
        .with_bundle(
            InputBundle::<StringBindings>::new()
                .with_bindings_from_file(binding_path)?
        )?;

    let mut game = Application::new(assets_dir, game::TestResourceLoadingState::new(), gdata)?;

    game.run();

    Ok(())
}
```

asset.ron, located in assets/common/resourcetype/asset.ron
```
(
    name: "Asset",
    weight: Barrel,
    value: (
        beggar: 0.15,
        poor: 0.2,
        middle: 0.12,
        rich: 0.08,
        merchant: 0.1,
        city: 0.12,
    ),
)
```

## What You Expected to Happen

Custom asset to be loaded and displayed when available. Then the app would quit.

## What Actually Happened

App does not load the asset, fails and segfaults.

## Screenshots and Logs

```
thread 'main' panicked at 'Tried to fetch a resource of type "amethyst_assets::storage::AssetStorage<game::ResourceType>", but the resource does not exist.
Try adding the resource by inserting it manually or using the setup method.', /home/myuser/.cargo/registry/src/github.com-1ecc6299db9ec823/shred-0.9.4/src/world/mod.rs:420:13
note: run with RUST_BACKTRACE=1 environment variable to display a backtrace.
Segmentation fault (core dumped)
```

## Your Environment

1. Ubuntu
2. 18.04
3. Version of Amethyst : Version: 0.13.2
