Thank you for the nice package! I have implemented appender and layout functions (`appender_syslognet`, `layout_syslognet`) that can be used to interface with the recently uploaded to CRAN `syslognet` R package that allows logging by sending TCP messages to a remote server running syslog.
When using `log_shiny_input_changes()` in an app displaying a plotly plot, I get a lot of empty logging lines when hovering the graph. Can hovers be filtered out of the logging? Also it would be nice if you can set the log levels. For the rest a very nice feature :)

```{r}
library(shiny)
library(plotly)
library(logger)

shinyApp(
  ui = fluidPage(
    plotlyOutput("plot"),
    selectInput("test", "test", choices = c("a", "b", "c"))
  ),
  server = function(input, output, session) {
    log_shiny_input_changes(input)
    
    output$plot <- renderPlotly({
      plot_ly(mtcars, x = ~mpg, y = ~wt, mode = "markers", type = "scatter")
    })
  }
)
```
When I am using `logger::log_errors()`, if I want to catch failures, `logger` will still log those errors; which I don't necessarily always want. For example:

```
library(logger)
log_errors()

my_fun <- function() {
  res <- try(stop("hello world"), silent = TRUE)
  if (methods::is(res, "try-error")) {
    TRUE
  } else {
    FALSE
  }
}

my_fun()
# ERROR [2019-11-11 15:47:08] hello world
# [1] TRUE
```
#30 introduced the syslog appender, but sending all log records on the `INFO` level. We can do a better job there after #26
Have you considered invisibly returning the log message?

I find myself periodically doing something like:

```r
if (x < badcondition) {
  logger::log_fatal("message of badness {x}")
  stop("message of badness ", x)
}
```

I *can* form the message once and use it in both `logger::log_fatal` and `stop`, but (1) I might like to take advantage of `logger`'s formatting methodologies (e.g., `glue` or json); and (2) I think a more straight-forward approach is something like:

```r
if (x < badcondition) {
  stop(logger::log_fatal("message of badness {x}"))
}
```

(This if course applies to other loggers, not just `log_fatal`.)

I'd think there are two good options for exactly what to return:

- `"message of badness 42"`, before some of the final formatting ... or
- `"[2019-07-12 17:04:42] FATAL message of badness 42"`, the literal full log entry

Thoughts?
The use of `{fn}` in a custom formatter goes a little crazy when the calling function name is not easily determined.

```r
logger::log_layout(logger::layout_glue_generator(format = '[{time}] {level} {fn}: {msg}'))
log_info("hello")
# [2019-04-01 15:50:31] INFO NA: hello
func <- function(...) { log_info('hello'); }
func()
# [2019-04-01 15:50:39] INFO func: hello
```

But when done from an anonymous function (or similar), the log includes the entire function definition.

```r
(function(...) { log_info('hello'); })()
# [2019-04-01 15:50:47] INFO (function(...) {: hello
# [2019-04-01 15:50:47] INFO     log_info("hello"): hello
# [2019-04-01 15:50:47] INFO }): hello
```

You can imagine how this gets crazy when the anon-function is more than "hello world".

Actually, it's a little more than just an anonymous function. In the code below, the function is perfectly named but not well-named within `Map`.

```r
Map(func, 1, 2)
# [2019-04-01 15:54:02] INFO function (...) : hello
# [2019-04-01 15:54:02] INFO {: hello
# [2019-04-01 15:54:02] INFO     log_info("hello"): hello
# [2019-04-01 15:54:02] INFO }: hello
# [[1]]
# NULL
```

I wonder if the solution is to catch when `{fn}` will expand to something ridiculous and either `head` it or replace it with something much less unreasonable (such as `"omg_im_lost"` :-).