<!--- Verify first that your issue/request is not already reported in GitHub -->

##### ISSUE TYPE
<!--- Pick one item below and delete the rest: -->
 - Bug Report

##### container.yml 
<!--- Paste verbatim a copy of your container.yml between the quotes below -->
```
...
settings:
  conductor:
    base: alpine:3.5
...
```

##### OS / ENVIRONMENT
<!--- Paste output from `ansible-container --debug version` between the quotes below -->
```
Ansible Container, version 0.9.2
Linux, MacBookPro, 4.15.0-33-generic, #36-Ubuntu SMP Wed Aug 15 16:00:05 UTC 2018, x86_64
2.7.15rc1 (default, Apr 15 2018, 21:51:34) 
[GCC 7.3.0] /usr/bin/python
{
  "ContainersPaused": 0, 
  "Labels": [], 
  "CgroupDriver": "cgroupfs", 
  "ContainersRunning": 0, 
  "ContainerdCommit": {
    "Expected": "773c489c9c1b21a6d78b5c538cd395416ec50f88", 
    "ID": "773c489c9c1b21a6d78b5c538cd395416ec50f88"
  }, 
  "InitBinary": "docker-init", 
  "NGoroutines": 34, 
  "Swarm": {
    "ControlAvailable": false, 
    "NodeID": "", 
    "Error": "", 
    "RemoteManagers": null, 
    "LocalNodeState": "inactive", 
    "NodeAddr": ""
  }, 
  "LoggingDriver": "json-file", 
  "OSType": "linux", 
  "HttpProxy": "", 
  "Runtimes": {
    "runc": {
      "path": "docker-runc"
    }
  }, 
  "DriverStatus": [
    [
      "Backing Filesystem", 
      "extfs"
    ], 
    [
      "Supports d_type", 
      "true"
    ], 
    [
      "Native Overlay Diff", 
      "true"
    ]
  ], 
  "OperatingSystem": "Ubuntu 18.04.1 LTS", 
  "Containers": 0, 
  "HttpsProxy": "", 
  "BridgeNfIp6tables": true, 
  "MemTotal": 8268759040, 
  "SecurityOptions": [
    "name=apparmor", 
    "name=seccomp,profile=default", 
    "name=userns"
  ], 
  "Driver": "overlay2", 
  "IndexServerAddress": "https://index.docker.io/v1/", 
  "ClusterStore": "", 
  "InitCommit": {
    "Expected": "949e6fa", 
    "ID": "949e6fa"
  }, 
  "GenericResources": null, 
  "Isolation": "", 
  "SystemStatus": null, 
  "OomKillDisable": true, 
  "ClusterAdvertise": "", 
  "SystemTime": "2018-09-14T14:48:05.445818653+02:00", 
  "Name": "kaj-MacBookPro", 
  "CPUSet": true, 
  "RegistryConfig": {
    "AllowNondistributableArtifactsCIDRs": [], 
    "Mirrors": [], 
    "IndexConfigs": {
      "docker.io": {
        "Official": true, 
        "Name": "docker.io", 
        "Secure": true, 
        "Mirrors": []
      }
    }, 
    "AllowNondistributableArtifactsHostnames": [], 
    "InsecureRegistryCIDRs": [
      "127.0.0.0/8"
    ]
  }, 
  "DefaultRuntime": "runc", 
  "ContainersStopped": 0, 
  "NCPU": 4, 
  "NFd": 20, 
  "Architecture": "x86_64", 
  "KernelMemory": true, 
  "CpuCfsQuota": true, 
  "Debug": false, 
  "ID": "6ZID:HBNY:HAQ2:VK6F:NGND:HVKM:DYNA:2AHJ:DI2K:KB7T:TKXN:4YUS", 
  "IPv4Forwarding": true, 
  "KernelVersion": "4.15.0-33-generic", 
  "BridgeNfIptables": true, 
  "NoProxy": "", 
  "LiveRestoreEnabled": false, 
  "ServerVersion": "18.03.1-ce", 
  "CpuCfsPeriod": true, 
  "ExperimentalBuild": false, 
  "MemoryLimit": true, 
  "SwapLimit": false, 
  "Plugins": {
    "Volume": [
      "local"
    ], 
    "Network": [
      "bridge", 
      "host", 
      "macvlan", 
      "null", 
      "overlay"
    ], 
    "Authorization": null, 
    "Log": [
      "awslogs", 
      "fluentd", 
      "gcplogs", 
      "gelf", 
      "journald", 
      "json-file", 
      "logentries", 
      "splunk", 
      "syslog"
    ]
  }, 
  "Images": 7, 
  "DockerRootDir": "/var/lib/docker/1000.1000", 
  "NEventsListener": 0, 
  "CPUShares": true, 
  "RuncCommit": {
    "Expected": "4fc53a81fb7c994640722ac585fa9ca548971871", 
    "ID": "4fc53a81fb7c994640722ac585fa9ca548971871"
  }
}
{
  "KernelVersion": "4.15.0-33-generic", 
  "Components": [
    {
      "Version": "18.03.1-ce", 
      "Name": "Engine", 
      "Details": {
        "KernelVersion": "4.15.0-33-generic", 
        "Os": "linux", 
        "BuildTime": "2018-06-20T21:42:00.000000000+00:00", 
        "ApiVersion": "1.37", 
        "MinAPIVersion": "1.12", 
        "GitCommit": "9ee9f40", 
        "Arch": "amd64", 
        "Experimental": "false", 
        "GoVersion": "go1.9.5"
      }
    }
  ], 
  "Arch": "amd64", 
  "BuildTime": "2018-06-20T21:42:00.000000000+00:00", 
  "ApiVersion": "1.37", 
  "Platform": {
    "Name": ""
  }, 
  "Version": "18.03.1-ce", 
  "MinAPIVersion": "1.12", 
  "GitCommit": "9ee9f40", 
  "Os": "linux", 
  "GoVersion": "go1.9.5"
}
```
##### SUMMARY
<!--- Explain the problem briefly -->
`ansible-container build` fails when using user namespaces. The conductor container is being run privileged but we cannot add `userns_mode: "host"` to the conductor. 
`"privileged mode is incompatible with user namespaces.  You must run the container in the host namespace when running privileged mode". `

##### STEPS TO REPRODUCE
<!---
For bugs, show exactly how to reproduce the problem.
For new features, show how the feature would be used.
-->
Enable userns remap on the daemon: https://docs.docker.com/engine/security/userns-remap/#enable-userns-remap-on-the-daemon 

Run:
<!--- Paste any example commands between quotes below -->
```
ansible-container build
```

<!--- You can also paste gist.github.com links for larger files -->

##### EXPECTED RESULTS
<!--- What did you expect to happen when running the steps above? -->
`ansible-container build` executes succesfully

##### ACTUAL RESULTS
<!--- What actually happened? If possible run with debugging (--debug) -->

<!--- Paste verbatim command output between quotes below -->
```
ansible-container build
Building Docker Engine context...	
Starting Docker build of Ansible Container Conductor image (please be patient)...	
ERROR	Unknown exception	
Traceback (most recent call last):
  File "/usr/local/lib/python2.7/dist-packages/container/cli.py", line 299, in __call__
    getattr(core, u'hostcmd_{}'.format(args.subcommand))(**vars(args))
  File "/usr/local/lib/python2.7/dist-packages/container/__init__.py", line 28, in __wrapped__
    return fn(*args, **kwargs)
  File "/usr/local/lib/python2.7/dist-packages/container/core.py", line 201, in hostcmd_build
    'build', dict(config), base_path, kwargs, save_container=save_container)
  File "/usr/local/lib/python2.7/dist-packages/container/docker/engine.py", line 454, in await_conductor_command
    conductor_id = self.run_conductor(command, config, base_path, params)
  File "/usr/local/lib/python2.7/dist-packages/container/docker/engine.py", line 105, in __wrapped__
    return fn(self, *args, **kwargs)
  File "/usr/local/lib/python2.7/dist-packages/container/__init__.py", line 28, in __wrapped__
    return fn(*args, **kwargs)
  File "/usr/local/lib/python2.7/dist-packages/container/docker/engine.py", line 446, in run_conductor
    reraise(*sys.exc_info())
  File "/usr/local/lib/python2.7/dist-packages/container/docker/engine.py", line 439, in run_conductor
    **run_kwargs
  File "/usr/local/lib/python2.7/dist-packages/docker/models/containers.py", line 719, in run
    detach=detach, **kwargs)
  File "/usr/local/lib/python2.7/dist-packages/docker/models/containers.py", line 777, in create
    resp = self.client.api.create_container(**create_kwargs)
  File "/usr/local/lib/python2.7/dist-packages/docker/api/container.py", line 450, in create_container
    return self.create_container_from_config(config, name)
  File "/usr/local/lib/python2.7/dist-packages/docker/api/container.py", line 461, in create_container_from_config
    return self._result(res, True)
  File "/usr/local/lib/python2.7/dist-packages/docker/api/client.py", line 228, in _result
    self._raise_for_status(response)
  File "/usr/local/lib/python2.7/dist-packages/docker/api/client.py", line 224, in _raise_for_status
    raise create_api_error_from_http_exception(e)
  File "/usr/local/lib/python2.7/dist-packages/docker/errors.py", line 31, in create_api_error_from_http_exception
    raise cls(e, response=response, explanation=explanation)
APIError: 400 Client Error: Bad Request ("privileged mode is incompatible with user namespaces.  You must run the container in the host namespace when running privileged mode")
Makefile:33: recipe for target 'build' failed
make: *** [build] Error 1
```

<!--- Verify first that your issue/request is not already reported in GitHub -->

##### ISSUE TYPE
<!--- Pick one item below and delete the rest: -->
 - Question

##### container.yml 
<!--- Paste verbatim a copy of your container.yml between the quotes below -->
```
version: "2"
settings:

  conductor:
    # The Conductor container does the heavy lifting, and provides a portable
    # Python runtime for building your target containers. It should be derived
    # from the same distribution as you're building your target containers with.
    base: centos:7
    # volumes:      # Provide a list of volumes to mount
    # environment:  # List or mapping of environment variables

  # Set the name of the project. Defaults to basename of the project directory.
  # For built services, concatenated with service name to form the built image name.
  project_name: demo

  # The deployment_output_path is mounted to the Conductor container, and the
  # `run` and `deployment` commands then write generated Ansible playbooks to it.
  # deployment_output_path: ./ansible-deployment

  # When using the k8s or openshift engines, use the following to authorize with the API.
  # Values set here will be passed to the Ansible modules. Any file paths will be mounted
  # to the conductor container, allowing the `run` command to access the API.
  #k8s_auth:
    # path to a K8s config file
    #config_file:
    # name of a context found within the config file
    #context:
    # URL for accessing the K8s API
    #host:
    # An API authentication token
    #api_key:
    # Path to a ca cert file
    #ssl_ca_cert:
    # Path to a cert file
    #cert_file:
    # Path to a key file
    #key_file:
    # boolean, indicating if SSL certs should be validated
    #verify_ssl:

  # When using the k8s or openshift engines, use the following to set the namespace.
  # If not set, the project name will be used. For openshift, the namespace maps to a project,
  # and description and display_name are supported.
  #k8s_namespace:
  #  name:
  #  description:
  #  display_name:

services:
  # Add your containers here, specifying the base image you want to build from.
  # To use this example, uncomment it and delete the curly braces after services key.
  # You may need to run `docker pull ubuntu:trusty` for this to work.

   web:
     from: "centos:7"
     roles:
       - role: flask
  #   ports:
  #     - "80:80"
  #   command: ["systemctl daemon-reload"]
  #   dev_overrides:
  #     environment:
  #       - "DEBUG=1"
registries: {}
  # Add optional registries used for deployment. For example:
  #  google:
  #    url: https://gcr.io
  #    namespace: my-cool-project-xxxxxx

```

##### OS / ENVIRONMENT
<!--- Paste output from `ansible-container --debug version` between the quotes below -->
```
Windows 10
Docker version 18.06.0-ce, build 0ffa825
Ansible/Ansible-container running in Docker image `mac89/ansible-container`
```
##### SUMMARY
<!--- Explain the problem briefly -->
I get the following error `the role 'flask' was not found in ./roles:/src/roles:/etc/ansible/roles:` when attempting to build the container from within my Docker image `mac89/ansible-container`.
I suspect it has something to do with my running ansible-container from within a Docker image, but I have no idea how to solve it.

Using the steps described here I can use external roles:
https://hub.docker.com/r/mac89/ansible-container/

However I cannot use `ansible-container install` which results in the error `container.exceptions.AnsibleContainerGalaxyFatalException: Failed to load container.yml: [Errno 2] No such file or directory: '/src/con
tainer.yml'`

##### STEPS TO REPRODUCE
<!---
For bugs, show exactly how to reproduce the problem.
For new features, show how the feature would be used.
-->
You can reproduce by using my Docker image and adding the volume mapping `/var/run/docker.sock:/var/run/docker.sock`  and executing the commands below.
<!--- Paste any example commands between quotes below -->
```
docker exec -it YOUR_CONTAINER_ID bash
mkdir demo
cd demo
ansible-container init
pico container.yml (add flask role)
ansible-container build
```

<!--- You can also paste gist.github.com links for larger files -->

##### EXPECTED RESULTS
<!--- What did you expect to happen when running the steps above? -->
The role to be found and the container to build

##### ACTUAL RESULTS
<!--- What actually happened? If possible run with debugging (--debug) -->

<!--- Paste verbatim command output between quotes below -->
```
Traceback (most recent call last):
  File "/usr/bin/conductor", line 11, in <module>
    load_entry_point('ansible-container', 'console_scripts', 'conductor')()
  File "/_ansible/container/__init__.py", line 19, in __wrapped__
    return fn(*args, **kwargs)
  File "/_ansible/container/cli.py", line 389, in conductor_commandline
    conductor_config = AnsibleContainerConductorConfig(list_to_ordereddict(containers_config))
  File "/_ansible/container/__init__.py", line 19, in __wrapped__
    return fn(*args, **kwargs)
  File "/_ansible/container/config.py", line 297, in __init__
    self._process_services()
  File "/_ansible/container/config.py", line 357, in _process_services
    role_metadata = get_metadata_from_role(role_name)
  File "/_ansible/container/__init__.py", line 19, in __wrapped__
    return fn(*args, **kwargs)
  File "/_ansible/container/utils/__init__.py", line 275, in get_metadata_from_role
    return get_content_from_role(role_name, os.path.join('meta', 'container.yml'))
  File "/_ansible/container/__init__.py", line 19, in __wrapped__
    return fn(*args, **kwargs)
  File "/_ansible/container/utils/__init__.py", line 264, in get_content_from_role
    role_path = resolve_role_to_path(role_name)
  File "/_ansible/container/__init__.py", line 19, in __wrapped__
    return fn(*args, **kwargs)
  File "/_ansible/container/utils/__init__.py", line 210, in resolve_role_to_path
    loader=loader)
  File "/usr/lib/python2.7/site-packages/ansible/playbook/role/include.py", line 59, in load
    return ri.load_data(data, variable_manager=variable_manager, loader=loader)
  File "/usr/lib/python2.7/site-packages/ansible/playbook/base.py", line 244, in load_data
    ds = self.preprocess_data(ds)
  File "/usr/lib/python2.7/site-packages/ansible/playbook/role/definition.py", line 94, in preprocess_data
    (role_name, role_path) = self._load_role_path(role_name)
  File "/usr/lib/python2.7/site-packages/ansible/playbook/role/definition.py", line 187, in _load_role_path
    raise AnsibleError("the role '%s' was not found in %s" % (role_name, ":".join(role_search_paths)), obj=self._ds)
ansible.errors.AnsibleError: the role 'flask' was not found in ./roles:/src/roles:/etc/ansible/roles:.
Conductor terminated. Cleaning up.      command_rc=1 conductor_id=ebddaca72c02d2f0eb20d37e85511d869fcc29175e947726d949286348dc4a3b save
_container=False
```
```
Parsing conductor CLI args.
- downloading role 'solr', owned by geerlingguy
- downloading role from https://github.com/geerlingguy/ansible-role-solr/archive/4.2.2.tar.gz
- extracting geerlingguy.solr to /tmp/tmplHyWDz/geerlingguy.solr
ERROR   Failed to load container.yml: [Errno 2] No such file or directory: '/src/container.yml'
Undoing changes to .yml files
Traceback (most recent call last):
  File "/usr/bin/conductor", line 11, in <module>
    load_entry_point('ansible-container', 'console_scripts', 'conductor')()
  File "/_ansible/container/__init__.py", line 19, in __wrapped__
- geerlingguy.solr (4.2.2) was installed successfully
    return fn(*args, **kwargs)
  File "/_ansible/container/cli.py", line 399, in conductor_commandline
    **params)
  File "/_ansible/container/__init__.py", line 19, in __wrapped__
    return fn(*args, **kwargs)
  File "/_ansible/container/core.py", line 940, in conductorcmd_install
    galaxy.install(roles)
  File "/_ansible/container/utils/galaxy.py", line 74, in install
    self._update_container_yml(role_obj)
  File "/_ansible/container/utils/galaxy.py", line 135, in _update_container_yml
    raise exceptions.AnsibleContainerGalaxyFatalException('Failed to load container.yml: %s' % str(exc))
container.exceptions.AnsibleContainerGalaxyFatalException: Failed to load container.yml: [Errno 2] No such file or directory: '/src/con
tainer.yml'
Conductor terminated. Cleaning up.      command_rc=1 conductor_id=493a4cb91702e61cb9a03f5f1e283754768e0fc6b94cdf0d689a68ea55cd210c save
_container=False
ERROR   Conductor exited with status 1
```
##### ISSUE TYPE
 - Bug Report

##### container.yml
```
version: "2"

# This is the docker-container config file. For more info check http://docs.ansible.com/ansible-container/
settings:
  conductor:
    # The Conductor container does the heavy lifting, and provides a portable
    # Python runtime for building your target containers. It should be derived
    # from the same distribution as you're building your target containers with.
    base: ubuntu:xenial
    roles_path:   # Specify a local path containing Ansible roles
    - ./roles/java_service
    # volumes:      # Provide a list of volumes to mount
    # environment:  # List or mapping of environment variables

  # Set the name of the project. Defaults to basename of the project directory.
  # For built services, concatenated with service name to form the built image name.
  project_name: smart-platform

  # The deployment_output_path is mounted to the Conductor container, and the
  # `run` and `deployment` commands then write generated Ansible playbooks to it.
  # deployment_output_path: ./ansible-deployment

services:
  gateway:
    from: store/oracle/serverjre:8
    roles:
      - role: java_service
        vars:
          service: smart-platform-gateway-service
          service_name: "Gateway"
          service_description: "Smart Platform Gateway service"
        environment:
          AWS_SESSION_TOKEN: "{{ aws_session_token }}"
          AWS_ACCESS_KEY_ID: "{{ aws_access_key_id }}"
          AWS_SECRET_ACCESS_KEY: "{{ aws_secret_access_key }}"
    command: [/app/run_service.sh]
    entrypoint: [/usr/bin/entrypoint.sh]
    network_mode: "host"

  stf:
    from: store/oracle/serverjre:8
    roles:
      - role: java_service
        vars:
          service: supply-traffic-filtering-service
          service_name: "STF"
          service_description: "Supply Traffic Filtering service"
        environment:
          AWS_SESSION_TOKEN: "{{ aws_session_token }}"
          AWS_ACCESS_KEY_ID: "{{ aws_access_key_id }}"
          AWS_SECRET_ACCESS_KEY: "{{ aws_secret_access_key }}"
    command: [/app/run_service.sh]
    entrypoint: [/usr/bin/entrypoint.sh]
    network_mode: "host"

  dtf:
    from: store/oracle/serverjre:8
    roles:
      - role: java_service
        vars:
          service: demand-traffic-filtering-service
          service_name: "DTF"
          service_description: "Demand Traffic Filtering service"
        environment:
          AWS_SESSION_TOKEN: "{{ aws_session_token }}"
          AWS_ACCESS_KEY_ID: "{{ aws_access_key_id }}"
          AWS_SECRET_ACCESS_KEY: "{{ aws_secret_access_key }}"
    command: [/app/run_service.sh]
    entrypoint: [/usr/bin/entrypoint.sh]
    network_mode: "host"
```
##### OS / ENVIRONMENT
```
Ansible Container, version 0.9.2
Linux, SM393, 4.15.0-32-generic, #35~16.04.1-Ubuntu SMP Fri Aug 10 21:54:34 UTC 2018, x86_64
3.5.2 (default, Nov 23 2017, 16:37:01) 
[GCC 5.4.0 20160609] /home/janko/IdeaProjects/smart-platform-infra/ansible/venv/bin/python3.5
{
  "DefaultRuntime": "runc",
  "Name": "SM393",
  "IndexServerAddress": "https://index.docker.io/v1/",
  "SystemStatus": null,
  "ClusterStore": "",
  "MemTotal": 25027665920,
  "NGoroutines": 34,
  "GenericResources": null,
  "ContainersPaused": 0,
  "ContainersRunning": 0,
  "CpuCfsPeriod": true,
  "IPv4Forwarding": true,
  "BridgeNfIp6tables": true,
  "ServerVersion": "18.03.1-ce",
  "Driver": "overlay2",
  "Containers": 0,
  "CPUShares": true,
  "OSType": "linux",
  "CPUSet": true,
  "NoProxy": "",
  "MemoryLimit": true,
  "InitBinary": "docker-init",
  "OperatingSystem": "Ubuntu 16.04.4 LTS",
  "SwapLimit": false,
  "KernelMemory": true,
  "SystemTime": "2018-08-16T16:56:52.967705832+02:00",
  "ExperimentalBuild": false,
  "HttpsProxy": "",
  "RegistryConfig": {
    "IndexConfigs": {
      "docker.io": {
        "Official": true,
        "Name": "docker.io",
        "Mirrors": [],
        "Secure": true
      }
    },
    "Mirrors": [],
    "AllowNondistributableArtifactsCIDRs": [],
    "AllowNondistributableArtifactsHostnames": [],
    "InsecureRegistryCIDRs": [
      "127.0.0.0/8"
    ]
  },
  "Plugins": {
    "Log": [
      "awslogs",
      "fluentd",
      "gcplogs",
      "gelf",
      "journald",
      "json-file",
      "logentries",
      "splunk",
      "syslog"
    ],
    "Network": [
      "bridge",
      "host",
      "macvlan",
      "null",
      "overlay"
    ],
    "Volume": [
      "local"
    ],
    "Authorization": null
  },
  "RuncCommit": {
    "ID": "4fc53a81fb7c994640722ac585fa9ca548971871",
    "Expected": "4fc53a81fb7c994640722ac585fa9ca548971871"
  },
  "ClusterAdvertise": "",
  "LoggingDriver": "json-file",
  "ID": "GU2L:7HDF:QXOM:P6TQ:BJTF:YJSP:TRNQ:CTWS:YV4K:SIY6:GVOI:UXBH",
  "NFd": 21,
  "NEventsListener": 0,
  "Swarm": {
    "ControlAvailable": false,
    "Error": "",
    "RemoteManagers": null,
    "NodeID": "",
    "LocalNodeState": "inactive",
    "NodeAddr": ""
  },
  "NCPU": 4,
  "LiveRestoreEnabled": false,
  "Architecture": "x86_64",
  "OomKillDisable": true,
  "InitCommit": {
    "ID": "949e6fa",
    "Expected": "949e6fa"
  },
  "Images": 2,
  "Debug": false,
  "KernelVersion": "4.15.0-32-generic",
  "BridgeNfIptables": true,
  "Labels": [],
  "DriverStatus": [
    [
      "Backing Filesystem",
      "extfs"
    ],
    [
      "Supports d_type",
      "true"
    ],
    [
      "Native Overlay Diff",
      "true"
    ]
  ],
  "ContainersStopped": 0,
  "ContainerdCommit": {
    "ID": "773c489c9c1b21a6d78b5c538cd395416ec50f88",
    "Expected": "773c489c9c1b21a6d78b5c538cd395416ec50f88"
  },
  "CpuCfsQuota": true,
  "Runtimes": {
    "runc": {
      "path": "docker-runc"
    }
  },
  "Isolation": "",
  "CgroupDriver": "cgroupfs",
  "SecurityOptions": [
    "name=apparmor",
    "name=seccomp,profile=default"
  ],
  "DockerRootDir": "/var/lib/docker",
  "HttpProxy": ""
}
{
  "MinAPIVersion": "1.12",
  "Version": "18.03.1-ce",
  "Os": "linux",
  "GoVersion": "go1.9.5",
  "Components": [
    {
      "Version": "18.03.1-ce",
      "Name": "Engine",
      "Details": {
        "BuildTime": "2018-04-26T07:15:30.000000000+00:00",
        "Experimental": "false",
        "MinAPIVersion": "1.12",
        "Os": "linux",
        "Arch": "amd64",
        "GoVersion": "go1.9.5",
        "GitCommit": "9ee9f40",
        "KernelVersion": "4.15.0-32-generic",
        "ApiVersion": "1.37"
      }
    }
  ],
  "GitCommit": "9ee9f40",
  "KernelVersion": "4.15.0-32-generic",
  "BuildTime": "2018-04-26T07:15:30.000000000+00:00",
  "Platform": {
    "Name": ""
  },
  "ApiVersion": "1.37",
  "Arch": "amd64"
}
```
##### SUMMARY
We are using ansible playbook to create docker images for our services. For conductor we image `ansible/container-conductor-ubuntu-xenial:0.9.2` from dockerhub. Our services are created from `/store/oracle/serverjre` image. 

We experience non-deterministic behavior while running `ansible-container build`; there is a chance that building will get stuck (this image displays point where it gets stuck: https://imgur.com/gChyVXI).
Command which is executed is given below:
`ansible-container build --no-cache --services {{ component }}`

In order to solve this problem, we have to stop execution (i.e. Ctrl+C it) and rerun again. It has approximately 40% chance to get stuck. Even if we build different services, behavior is non-deterministic.

After debugging, we realized that process gets stuck at this line of code:
https://github.com/ansible/ansible-container/blob/9250b44e0810c74c19b1f3610799d052b54f9018/container/core.py#L709, therefore we suspect the problem is in race between threads.

##### STEPS TO REPRODUCE
Run: `ansible-container build --no-cache --services {{ component }}` within ansible playbook, until it gets stuck.

##### EXPECTED RESULTS
Image should be built in deterministic behavior.

##### ACTUAL RESULTS
Image building sometimes gets stuck.


##### ISSUE TYPE
 - Bug Report

##### container.yml 

```
version: "2"
settings:
  conductor:
    base: ubuntu:bionic
  project_name: web

services:
  web:
    from: ubuntu:bionic
    roles:
      - flask
    ports:
      - "5000:5000"
    working_dir: /app
    environment:
      - "FLASK_APP=/app/app.py"
    command: ["flask", "run", "--host=0.0.0.0"]
```

##### OS / ENVIRONMENT

```
{
  "ID": "DJFK:FRYW:6MDK:AZP7:6I2W:C75V:FJNR:2JE4:KYCI:4NTN:CWCN:JK7G",
  "Containers": 3,
  "ContainersRunning": 1,
  "ContainersPaused": 0,
  "ContainersStopped": 2,
  "Images": 48,
  "Driver": "overlay2",
  "DriverStatus": [
    [
      "Backing Filesystem",
      "extfs"
    ],
    [
      "Supports d_type",
      "true"
    ],
    [
      "Native Overlay Diff",
      "false"
    ]
  ],
  "SystemStatus": null,
  "Plugins": {
    "Volume": [
      "local"
    ],
    "Network": [
      "bridge",
      "host",
      "macvlan",
      "null",
      "overlay"
    ],
    "Authorization": null,
    "Log": [
      "awslogs",
      "fluentd",
      "gcplogs",
      "gelf",
      "journald",
      "json-file",
      "logentries",
      "splunk",
      "syslog"
    ]
  },
  "MemoryLimit": true,
  "SwapLimit": true,
  "KernelMemory": true,
  "CpuCfsPeriod": true,
  "CpuCfsQuota": true,
  "CPUShares": true,
  "CPUSet": true,
  "IPv4Forwarding": true,
  "BridgeNfIptables": true,
  "BridgeNfIp6tables": true,
  "Debug": false,
  "NFd": 26,
  "OomKillDisable": true,
  "NGoroutines": 38,
  "SystemTime": "2018-08-13T21:45:16.816269104+02:00",
  "LoggingDriver": "json-file",
  "CgroupDriver": "cgroupfs",
  "NEventsListener": 0,
  "KernelVersion": "4.17.14-arch1-1-ARCH",
  "OperatingSystem": "Arch Linux",
  "OSType": "linux",
  "Architecture": "x86_64",
  "IndexServerAddress": "https://index.docker.io/v1/",
  "RegistryConfig": {
    "AllowNondistributableArtifactsCIDRs": [],
    "AllowNondistributableArtifactsHostnames": [],
    "InsecureRegistryCIDRs": [
      "127.0.0.0/8"
    ],
    "IndexConfigs": {
      "docker.io": {
        "Name": "docker.io",
        "Mirrors": [],
        "Secure": true,
        "Official": true
      }
    },
    "Mirrors": []
  },
  "NCPU": 4,
  "MemTotal": 8257572864,
  "GenericResources": null,
  "DockerRootDir": "/home/cluosh/tuwien/conmw/docker-storage",
  "HttpProxy": "",
  "HttpsProxy": "",
  "NoProxy": "",
  "Name": "hopper",
  "Labels": [],
  "ExperimentalBuild": false,
  "ServerVersion": "18.05.0-ce",
  "ClusterStore": "",
  "ClusterAdvertise": "",
  "Runtimes": {
    "runc": {
      "path": "docker-runc"
    }
  },
  "DefaultRuntime": "runc",
  "Swarm": {
    "NodeID": "",
    "NodeAddr": "",
    "LocalNodeState": "inactive",
    "ControlAvailable": false,
    "Error": "",
    "RemoteManagers": null
  },
  "LiveRestoreEnabled": false,
  "Isolation": "",
  "InitBinary": "docker-init",
  "ContainerdCommit": {
    "ID": "773c489c9c1b21a6d78b5c538cd395416ec50f88",
    "Expected": "773c489c9c1b21a6d78b5c538cd395416ec50f88"
  },
  "RuncCommit": {
    "ID": "4fc53a81fb7c994640722ac585fa9ca548971871",
    "Expected": "4fc53a81fb7c994640722ac585fa9ca548971871"
  },
  "InitCommit": {
    "ID": "949e6fa",
    "Expected": "949e6fa"
  },
  "SecurityOptions": [
    "name=seccomp,profile=default"
  ]
}
{
  "Platform": {
    "Name": ""
  },
  "Components": [
    {
      "Name": "Engine",
      "Version": "18.05.0-ce",
      "Details": {
        "ApiVersion": "1.37",
        "Arch": "amd64",
        "BuildTime": "2018-05-16T22:28:17.000000000+00:00",
        "Experimental": "false",
        "GitCommit": "f150324782",
        "GoVersion": "go1.10.2",
        "KernelVersion": "4.17.14-arch1-1-ARCH",
        "MinAPIVersion": "1.12",
        "Os": "linux"
      }
    }
  ],
  "Version": "18.05.0-ce",
  "ApiVersion": "1.37",
  "MinAPIVersion": "1.12",
  "GitCommit": "f150324782",
  "GoVersion": "go1.10.2",
  "Os": "linux",
  "Arch": "amd64",
  "KernelVersion": "4.17.14-arch1-1-ARCH",
  "BuildTime": "2018-05-16T22:28:17.000000000+00:00"
}
```
##### SUMMARY

Ubuntu Bionic cannot be used as conductor base despite there being an image on dockerhub. It is not listed in PREBAKED_DISTROS in container/docker/engine.py:

```
PREBAKED_DISTROS = {
    'centos:7': ['centos:latest', 'centos:centos7'],
    'fedora:27': ['fedora:latest'],
    'fedora:26': [],
    'fedora:25': [],
    'amazonlinux:2': ['amazonlinux:2'],
    'debian:jessie': ['debian:8', 'debian:latest', 'debian:jessie-slim'],
    'debian:stretch': ['debian:9', 'debian:stretch-slim'],
    'debian:wheezy': ['debian:7', 'debian:wheezy-slim'],
    'ubuntu:precise': ['ubuntu:12.04'],
    'ubuntu:trusty': ['ubuntu:14.04'],
    'ubuntu:xenial': ['ubuntu:16.04'],
    'ubuntu:zesty': ['ubuntu:17.04'],
    'alpine:3.5': ['alpine:latest'],
    'alpine:3.4': []
}
```

In ```_prepare_conductor_manifest``` the ```ansible/``` is only prepended, if the the tag is found in PREBAKED_DISTROS, making it impossible to pull the official prebaked Ubuntu Bionic image.

##### STEPS TO REPRODUCE

```
ansible-container --debug build
```

##### EXPECTED RESULTS

Since the image is on dockerhub, I expected it to build.

##### ACTUAL RESULTS

```   
2018-08-13T21:48:50.582616 The default type is            [container.config] caller_file=/home/cluosh/tools/ansible-container/container/config.py caller_func=_resolve_defaults caller_line=255 config=<class 'ruamel.yaml.comments.CommentedMap'> defaults=<class 'ruamel.yaml.compat.ordereddict'>
2018-08-13T21:48:50.583860 Getting environment variables... [container.config] caller_file=/home/cluosh/tools/ansible-container/container/config.py caller_func=_get_environment_variables caller_line=271
2018-08-13T21:48:50.585080 Read environment variables     [container.config] caller_file=/home/cluosh/tools/ansible-container/container/config.py caller_func=_get_environment_variables caller_line=276 env_vars={}
2018-08-13T21:48:50.585813 Resolved template variables    [container.config] caller_file=/home/cluosh/tools/ansible-container/container/config.py caller_func=_resolve_defaults caller_line=260 template_vars={}
2018-08-13T21:48:50.586646 Parsed config                  [container.config] caller_file=/home/cluosh/tools/ansible-container/container/config.py caller_func=set_env caller_line=196 config={"version": "2", "settings": {"conductor": {"base": "ubuntu:bionic"}, "project_name": "secenv", "pwd": "/home/cluosh/tuwien/secenv-infrastructure/web_docker"}, "services": {"web": {"from": "ubuntu:bionic", "roles": ["flask"], "ports": ["5000:5000"], "working_dir": "/app", "environment": ["FLASK_APP=/app/app.py"], "command": ["flask", "run", "--host=0.0.0.0"]}}, "defaults": {}}
2018-08-13T21:48:50.587634 Loading engine capabilities    [container.utils.loader] caller_file=/home/cluosh/tools/ansible-container/container/utils/loader.py caller_func=load_engine caller_line=14 capabilities=['BUILD', 'RUN'] engine=docker
2018-08-13T21:48:50.631553 Setting Docker client timeout to 60 [container.docker.engine] caller_file=/home/cluosh/tools/ansible-container/container/docker/engine.py caller_func=get_timeout caller_line=124
2018-08-13T21:48:50.646913 Could not find container for secenv_conductor [container.docker.engine] all_containers=['secenv_web-43fc3093-flask', 'secenv_web-1dc7da32-flask', 'secenv_web_1'] caller_file=/home/cluosh/tools/ansible-container/container/docker/engine.py caller_func=get_container_id_by_name caller_line=570
2018-08-13T21:48:50.671974 Call: Engine.build_conductor_image [container.docker.engine] args=('/home/cluosh/tuwien/secenv-infrastructure/web_docker', 'ubuntu:bionic') caller_file=/home/cluosh/tools/ansible-container/container/docker/engine.py caller_func=Engine.build_conductor_image caller_line=1043 kwargs={'cache': True, 'environment': []}
2018-08-13T21:48:50.673184 Using temporary directory      [container.utils.temp] caller_file=/home/cluosh/tools/ansible-container/container/utils/temp.py caller_func=__enter__ caller_line=17 path=/tmp/tmp5k0rcq60
2018-08-13T21:48:50.673860 Building Docker Engine context... [container.docker.engine] caller_file=/home/cluosh/tools/ansible-container/container/docker/engine.py caller_func=build_conductor_image caller_line=1049
2018-08-13T21:48:50.711076 Rendered Jinja Template:       [container.utils] body=b'FROM ubuntu:bionic\nENV ANSIBLE_CONTAINER=1\n\n\n\n\nRUN apt-get update -y && \\\n    apt-get install -y make dpkg-dev curl gcc git libffi-dev libpopt0 libssl-dev python2.7 python-apt python-dev rsync sudo && \\\n    cd /usr/bin && \\\n    rm -f lsb_release && \\\n    ln -fs python2.7 python && \\\n    \n    apt-get clean\n\n\nRUN (curl https://bootstrap.pypa.io/get-pip.py | python - --no-cache-dir ) && \\\n    mkdir -p /etc/ansible/roles /_ansible/src && \\\n    mkdir -p /licenses && \\\n    \n    (curl https://get.docker.com/builds/Linux/x86_64/docker-17.04.0-ce.tgz \\\n       | tar -zxC /usr/local/bin/ --strip-components=1 docker/docker )\n\nADD LICENSE /licenses/LICENSE\nADD help.1 /help.1\n\n# The COPY here will break cache if the version of Ansible Container changed\nCOPY /container-src /_ansible/container\n\nRUN cd /_ansible && \\\n    pip install --no-cache-dir -r container/conductor-build/conductor-requirements.txt && \\\n    PYTHONPATH=. LC_ALL="en_US.UTF-8" python container/conductor-build/setup.py develop -v -N && \\\n    ansible-galaxy install -p /etc/ansible/roles -r container/conductor-build/conductor-requirements.yml\n' caller_file=/home/cluosh/tools/ansible-container/container/utils/__init__.py caller_func=jinja_render_to_temp caller_line=104
2018-08-13T21:48:50.718578 Rendered Jinja Template:       [container.utils] body=b'FROM container-conductor-ubuntu-bionic:0.9.3rc0\n\n\n# The COPY here will break cache if the requirements or ansible.cfg has changed\nCOPY /build-src /_ansible/build\n\n\nRUN cp /_ansible/build/ansible.cfg /etc/ansible/ansible.cfg\n\n\nVOLUME /usr\n\nVOLUME /lib\n\n\n' caller_file=/home/cluosh/tools/ansible-container/container/utils/__init__.py caller_func=jinja_render_to_temp caller_line=104
2018-08-13T21:48:50.721225 Context manifest:              [container.docker.engine] caller_file=/home/cluosh/tools/ansible-container/container/docker/engine.py caller_func=build_conductor_image caller_line=1116
2018-08-13T21:48:50.721695 tarball item: build-src/ansible.cfg (144 bytes) [container.docker.engine] bytes=144 file=build-src/ansible.cfg
2018-08-13T21:48:50.722048 tarball item: build-src/ansible-requirements.txt (130 bytes) [container.docker.engine] bytes=130 file=build-src/ansible-requirements.txt
2018-08-13T21:48:50.722274 tarball item: build-src/requirements.yml (298 bytes) [container.docker.engine] bytes=298 file=build-src/requirements.yml
2018-08-13T21:48:50.722393 tarball item: build-src/.touch (0 bytes) [container.docker.engine] bytes=0 file=build-src/.touch
2018-08-13T21:48:50.722478 tarball item: contrib/get-pip.py (1595409 bytes) [container.docker.engine] bytes=1595409 file=contrib/get-pip.py
2018-08-13T21:48:50.722560 tarball item: container-src (0 bytes) [container.docker.engine] bytes=0 file=container-src
2018-08-13T21:48:50.722643 tarball item: container-src/__init__.py (950 bytes) [container.docker.engine] bytes=950 file=container-src/__init__.py
2018-08-13T21:48:50.722723 tarball item: container-src/__pycache__ (0 bytes) [container.docker.engine] bytes=0 file=container-src/__pycache__
2018-08-13T21:48:50.722803 tarball item: container-src/__pycache__/__init__.cpython-37.pyc (1087 bytes) [container.docker.engine] bytes=1087 file=container-src/__pycache__/__init__.cpython-37.pyc
2018-08-13T21:48:50.722895 tarball item: container-src/__pycache__/cli.cpython-37.pyc (16435 bytes) [container.docker.engine] bytes=16435 file=container-src/__pycache__/cli.cpython-37.pyc
2018-08-13T21:48:50.722977 tarball item: container-src/__pycache__/config.cpython-37.pyc (15479 bytes) [container.docker.engine] bytes=15479 file=container-src/__pycache__/config.cpython-37.pyc
2018-08-13T21:48:50.723057 tarball item: container-src/__pycache__/core.cpython-37.pyc (26953 bytes) [container.docker.engine] bytes=26953 file=container-src/__pycache__/core.cpython-37.pyc
2018-08-13T21:48:50.723150 tarball item: container-src/__pycache__/engine.cpython-37.pyc (9867 bytes) [container.docker.engine] bytes=9867 file=container-src/__pycache__/engine.cpython-37.pyc
2018-08-13T21:48:50.723230 tarball item: container-src/__pycache__/exceptions.cpython-37.pyc (4641 bytes) [container.docker.engine] bytes=4641 file=container-src/__pycache__/exceptions.cpython-37.pyc
2018-08-13T21:48:50.723309 tarball item: container-src/cli.py (24218 bytes) [container.docker.engine] bytes=24218 file=container-src/cli.py
2018-08-13T21:48:50.723387 tarball item: container-src/config.py (18968 bytes) [container.docker.engine] bytes=18968 file=container-src/config.py
2018-08-13T21:48:50.723465 tarball item: container-src/core.py (47917 bytes) [container.docker.engine] bytes=47917 file=container-src/core.py
2018-08-13T21:48:50.723543 tarball item: container-src/docker (0 bytes) [container.docker.engine] bytes=0 file=container-src/docker
2018-08-13T21:48:50.723621 tarball item: container-src/docker/__init__.py (205 bytes) [container.docker.engine] bytes=205 file=container-src/docker/__init__.py
2018-08-13T21:48:50.723701 tarball item: container-src/docker/__pycache__ (0 bytes) [container.docker.engine] bytes=0 file=container-src/docker/__pycache__
2018-08-13T21:48:50.723779 tarball item: container-src/docker/__pycache__/__init__.cpython-37.pyc (292 bytes) [container.docker.engine] bytes=292 file=container-src/docker/__pycache__/__init__.cpython-37.pyc
2018-08-13T21:48:50.723858 tarball item: container-src/docker/__pycache__/config.cpython-37.pyc (1949 bytes) [container.docker.engine] bytes=1949 file=container-src/docker/__pycache__/config.cpython-37.pyc
2018-08-13T21:48:50.723937 tarball item: container-src/docker/__pycache__/engine.cpython-37.pyc (35082 bytes) [container.docker.engine] bytes=35082 file=container-src/docker/__pycache__/engine.cpython-37.pyc
2018-08-13T21:48:50.724020 tarball item: container-src/docker/__pycache__/secrets.cpython-37.pyc (4324 bytes) [container.docker.engine] bytes=4324 file=container-src/docker/__pycache__/secrets.cpython-37.pyc
2018-08-13T21:48:50.724097 tarball item: container-src/docker/config.py (2384 bytes) [container.docker.engine] bytes=2384 file=container-src/docker/config.py
2018-08-13T21:48:50.724176 tarball item: container-src/docker/deploy.py (248 bytes) [container.docker.engine] bytes=248 file=container-src/docker/deploy.py
2018-08-13T21:48:50.724254 tarball item: container-src/docker/engine.py (53581 bytes) [container.docker.engine] bytes=53581 file=container-src/docker/engine.py
2018-08-13T21:48:50.724332 tarball item: container-src/docker/files (0 bytes) [container.docker.engine] bytes=0 file=container-src/docker/files
2018-08-13T21:48:50.724410 tarball item: container-src/docker/files/get-pip.py (1595409 bytes) [container.docker.engine] bytes=1595409 file=container-src/docker/files/get-pip.py
2018-08-13T21:48:50.724495 tarball item: container-src/docker/importer.py (24885 bytes) [container.docker.engine] bytes=24885 file=container-src/docker/importer.py
2018-08-13T21:48:50.724575 tarball item: container-src/docker/secrets.py (5255 bytes) [container.docker.engine] bytes=5255 file=container-src/docker/secrets.py
2018-08-13T21:48:50.724653 tarball item: container-src/docker/templates (0 bytes) [container.docker.engine] bytes=0 file=container-src/docker/templates
2018-08-13T21:48:50.724731 tarball item: container-src/docker/templates/atomic-help.j2 (1333 bytes) [container.docker.engine] bytes=1333 file=container-src/docker/templates/atomic-help.j2
2018-08-13T21:48:50.724809 tarball item: container-src/docker/templates/conductor-local-dockerfile.j2 (489 bytes) [container.docker.engine] bytes=489 file=container-src/docker/templates/conductor-local-dockerfile.j2
2018-08-13T21:48:50.724888 tarball item: container-src/docker/templates/conductor-src-dockerfile.j2 (3166 bytes) [container.docker.engine] bytes=3166 file=container-src/docker/templates/conductor-src-dockerfile.j2
2018-08-13T21:48:50.724966 tarball item: container-src/docker/templates/license.j2 (7837 bytes) [container.docker.engine] bytes=7837 file=container-src/docker/templates/license.j2
2018-08-13T21:48:50.725044 tarball item: container-src/docker/tests (0 bytes) [container.docker.engine] bytes=0 file=container-src/docker/tests
2018-08-13T21:48:50.725122 tarball item: container-src/docker/tests/import (0 bytes) [container.docker.engine] bytes=0 file=container-src/docker/tests/import
2018-08-13T21:48:50.725199 tarball item: container-src/docker/tests/import/Dockerfile (1151 bytes) [container.docker.engine] bytes=1151 file=container-src/docker/tests/import/Dockerfile
2018-08-13T21:48:50.725282 tarball item: container-src/docker/tests/import/blue-fish.txt (10 bytes) [container.docker.engine] bytes=10 file=container-src/docker/tests/import/blue-fish.txt
2018-08-13T21:48:50.725357 tarball item: container-src/docker/tests/import/lulz.tgz (59072 bytes) [container.docker.engine] bytes=59072 file=container-src/docker/tests/import/lulz.tgz
2018-08-13T21:48:50.725435 tarball item: container-src/docker/tests/import/one-fish.txt (6 bytes) [container.docker.engine] bytes=6 file=container-src/docker/tests/import/one-fish.txt
2018-08-13T21:48:50.725516 tarball item: container-src/docker/tests/import/red-fish (0 bytes) [container.docker.engine] bytes=0 file=container-src/docker/tests/import/red-fish
2018-08-13T21:48:50.725599 tarball item: container-src/docker/tests/import/red-fish/lulz.txt (10 bytes) [container.docker.engine] bytes=10 file=container-src/docker/tests/import/red-fish/lulz.txt
2018-08-13T21:48:50.725673 tarball item: container-src/docker/tests/import/two-fish (0 bytes) [container.docker.engine] bytes=0 file=container-src/docker/tests/import/two-fish
2018-08-13T21:48:50.725742 tarball item: container-src/docker/tests/import/two-fish/green-eggs (0 bytes) [container.docker.engine] bytes=0 file=container-src/docker/tests/import/two-fish/green-eggs
2018-08-13T21:48:50.725810 tarball item: container-src/docker/tests/import/two-fish/green-eggs/ham.txt (5 bytes) [container.docker.engine] bytes=5 file=container-src/docker/tests/import/two-fish/green-eggs/ham.txt
2018-08-13T21:48:50.725879 tarball item: container-src/docker/tests/import/two-fish/who.txt (7 bytes) [container.docker.engine] bytes=7 file=container-src/docker/tests/import/two-fish/who.txt
2018-08-13T21:48:50.725946 tarball item: container-src/engine.py (7421 bytes) [container.docker.engine] bytes=7421 file=container-src/engine.py
2018-08-13T21:48:50.726016 tarball item: container-src/exceptions.py (2319 bytes) [container.docker.engine] bytes=2319 file=container-src/exceptions.py
2018-08-13T21:48:50.726083 tarball item: container-src/k8s (0 bytes) [container.docker.engine] bytes=0 file=container-src/k8s
2018-08-13T21:48:50.726150 tarball item: container-src/k8s/__init__.py (196 bytes) [container.docker.engine] bytes=196 file=container-src/k8s/__init__.py
2018-08-13T21:48:50.726217 tarball item: container-src/k8s/base_config.py (932 bytes) [container.docker.engine] bytes=932 file=container-src/k8s/base_config.py
2018-08-13T21:48:50.726283 tarball item: container-src/k8s/base_deploy.py (34402 bytes) [container.docker.engine] bytes=34402 file=container-src/k8s/base_deploy.py
2018-08-13T21:48:50.726350 tarball item: container-src/k8s/base_engine.py (10144 bytes) [container.docker.engine] bytes=10144 file=container-src/k8s/base_engine.py
2018-08-13T21:48:50.726458 tarball item: container-src/k8s/config.py (660 bytes) [container.docker.engine] bytes=660 file=container-src/k8s/config.py
2018-08-13T21:48:50.726532 tarball item: container-src/k8s/deploy.py (1903 bytes) [container.docker.engine] bytes=1903 file=container-src/k8s/deploy.py
2018-08-13T21:48:50.726596 tarball item: container-src/k8s/engine.py (1276 bytes) [container.docker.engine] bytes=1276 file=container-src/k8s/engine.py
2018-08-13T21:48:50.726659 tarball item: container-src/openshift (0 bytes) [container.docker.engine] bytes=0 file=container-src/openshift
2018-08-13T21:48:50.726722 tarball item: container-src/openshift/__init__.py (196 bytes) [container.docker.engine] bytes=196 file=container-src/openshift/__init__.py
2018-08-13T21:48:50.726786 tarball item: container-src/openshift/config.py (427 bytes) [container.docker.engine] bytes=427 file=container-src/openshift/config.py
2018-08-13T21:48:50.726849 tarball item: container-src/openshift/deploy.py (6302 bytes) [container.docker.engine] bytes=6302 file=container-src/openshift/deploy.py
2018-08-13T21:48:50.726912 tarball item: container-src/openshift/engine.py (2207 bytes) [container.docker.engine] bytes=2207 file=container-src/openshift/engine.py
2018-08-13T21:48:50.726975 tarball item: container-src/schema.yml (2547 bytes) [container.docker.engine] bytes=2547 file=container-src/schema.yml
2018-08-13T21:48:50.727037 tarball item: container-src/templates (0 bytes) [container.docker.engine] bytes=0 file=container-src/templates
2018-08-13T21:48:50.727099 tarball item: container-src/templates/ansible-container-inventory.py (1230 bytes) [container.docker.engine] bytes=1230 file=container-src/templates/ansible-container-inventory.py
2018-08-13T21:48:50.727163 tarball item: container-src/templates/ansible-dockerfile.j2 (1194 bytes) [container.docker.engine] bytes=1194 file=container-src/templates/ansible-dockerfile.j2
2018-08-13T21:48:50.727226 tarball item: container-src/templates/ansible.cfg (41 bytes) [container.docker.engine] bytes=41 file=container-src/templates/ansible.cfg
2018-08-13T21:48:50.727288 tarball item: container-src/templates/builder.sh (620 bytes) [container.docker.engine] bytes=620 file=container-src/templates/builder.sh
2018-08-13T21:48:50.727350 tarball item: container-src/templates/compose_versioned.j2.yml (237 bytes) [container.docker.engine] bytes=237 file=container-src/templates/compose_versioned.j2.yml
2018-08-13T21:48:50.727413 tarball item: container-src/templates/hosts.j2 (90 bytes) [container.docker.engine] bytes=90 file=container-src/templates/hosts.j2
2018-08-13T21:48:50.727475 tarball item: container-src/templates/init (0 bytes) [container.docker.engine] bytes=0 file=container-src/templates/init
2018-08-13T21:48:50.727537 tarball item: container-src/templates/init/.dockerignore.j2 (60 bytes) [container.docker.engine] bytes=60 file=container-src/templates/init/.dockerignore.j2
2018-08-13T21:48:50.727600 tarball item: container-src/templates/init/ansible-requirements.j2.txt (131 bytes) [container.docker.engine] bytes=131 file=container-src/templates/init/ansible-requirements.j2.txt
2018-08-13T21:48:50.727663 tarball item: container-src/templates/init/ansible.j2.cfg (145 bytes) [container.docker.engine] bytes=145 file=container-src/templates/init/ansible.j2.cfg
2018-08-13T21:48:50.727725 tarball item: container-src/templates/init/container.j2.yml (2514 bytes) [container.docker.engine] bytes=2514 file=container-src/templates/init/container.j2.yml
2018-08-13T21:48:50.727788 tarball item: container-src/templates/init/meta.j2.yml (1231 bytes) [container.docker.engine] bytes=1231 file=container-src/templates/init/meta.j2.yml
2018-08-13T21:48:50.727851 tarball item: container-src/templates/init/requirements.j2.yml (299 bytes) [container.docker.engine] bytes=299 file=container-src/templates/init/requirements.j2.yml
2018-08-13T21:48:50.727912 tarball item: container-src/templates/install-docker-compose.j2.yml (712 bytes) [container.docker.engine] bytes=712 file=container-src/templates/install-docker-compose.j2.yml
2018-08-13T21:48:50.727975 tarball item: container-src/templates/restart-docker-compose.j2.yml (75 bytes) [container.docker.engine] bytes=75 file=container-src/templates/restart-docker-compose.j2.yml
2018-08-13T21:48:50.728038 tarball item: container-src/templates/role (0 bytes) [container.docker.engine] bytes=0 file=container-src/templates/role
2018-08-13T21:48:50.728100 tarball item: container-src/templates/role/.travis.j2.yml (540 bytes) [container.docker.engine] bytes=540 file=container-src/templates/role/.travis.j2.yml
2018-08-13T21:48:50.728163 tarball item: container-src/templates/role/README.j2.md (1287 bytes) [container.docker.engine] bytes=1287 file=container-src/templates/role/README.j2.md
2018-08-13T21:48:50.728225 tarball item: container-src/templates/role/defaults (0 bytes) [container.docker.engine] bytes=0 file=container-src/templates/role/defaults
2018-08-13T21:48:50.728288 tarball item: container-src/templates/role/defaults/main.j2.yml (55 bytes) [container.docker.engine] bytes=55 file=container-src/templates/role/defaults/main.j2.yml
2018-08-13T21:48:50.728351 tarball item: container-src/templates/role/meta (0 bytes) [container.docker.engine] bytes=0 file=container-src/templates/role/meta
2018-08-13T21:48:50.728413 tarball item: container-src/templates/role/meta/main.j2.yml (3220 bytes) [container.docker.engine] bytes=3220 file=container-src/templates/role/meta/main.j2.yml
2018-08-13T21:48:50.728475 tarball item: container-src/templates/role/test (0 bytes) [container.docker.engine] bytes=0 file=container-src/templates/role/test
2018-08-13T21:48:50.728538 tarball item: container-src/templates/role/test/test.j2.yml (81 bytes) [container.docker.engine] bytes=81 file=container-src/templates/role/test/test.j2.yml
2018-08-13T21:48:50.728600 tarball item: container-src/templates/run-docker-compose.j2.yml (75 bytes) [container.docker.engine] bytes=75 file=container-src/templates/run-docker-compose.j2.yml
2018-08-13T21:48:50.728663 tarball item: container-src/templates/stop-docker-compose.j2.yml (75 bytes) [container.docker.engine] bytes=75 file=container-src/templates/stop-docker-compose.j2.yml
2018-08-13T21:48:50.728760 tarball item: container-src/templates/wait_on_host.py (2365 bytes) [container.docker.engine] bytes=2365 file=container-src/templates/wait_on_host.py
2018-08-13T21:48:50.728832 tarball item: container-src/utils (0 bytes) [container.docker.engine] bytes=0 file=container-src/utils
2018-08-13T21:48:50.728896 tarball item: container-src/utils/__init__.py (15734 bytes) [container.docker.engine] bytes=15734 file=container-src/utils/__init__.py
2018-08-13T21:48:50.728960 tarball item: container-src/utils/__pycache__ (0 bytes) [container.docker.engine] bytes=0 file=container-src/utils/__pycache__
2018-08-13T21:48:50.729023 tarball item: container-src/utils/__pycache__/__init__.cpython-37.pyc (12348 bytes) [container.docker.engine] bytes=12348 file=container-src/utils/__pycache__/__init__.cpython-37.pyc
2018-08-13T21:48:50.729086 tarball item: container-src/utils/__pycache__/_text.cpython-37.pyc (8254 bytes) [container.docker.engine] bytes=8254 file=container-src/utils/__pycache__/_text.cpython-37.pyc
2018-08-13T21:48:50.729149 tarball item: container-src/utils/__pycache__/loader.cpython-37.pyc (942 bytes) [container.docker.engine] bytes=942 file=container-src/utils/__pycache__/loader.cpython-37.pyc
2018-08-13T21:48:50.729212 tarball item: container-src/utils/__pycache__/logmux.cpython-37.pyc (1975 bytes) [container.docker.engine] bytes=1975 file=container-src/utils/__pycache__/logmux.cpython-37.pyc
2018-08-13T21:48:50.729275 tarball item: container-src/utils/__pycache__/ordereddict.cpython-37.pyc (756 bytes) [container.docker.engine] bytes=756 file=container-src/utils/__pycache__/ordereddict.cpython-37.pyc
2018-08-13T21:48:50.729337 tarball item: container-src/utils/__pycache__/temp.cpython-37.pyc (1085 bytes) [container.docker.engine] bytes=1085 file=container-src/utils/__pycache__/temp.cpython-37.pyc
2018-08-13T21:48:50.729401 tarball item: container-src/utils/__pycache__/visibility.cpython-37.pyc (3015 bytes) [container.docker.engine] bytes=3015 file=container-src/utils/__pycache__/visibility.cpython-37.pyc
2018-08-13T21:48:50.729463 tarball item: container-src/utils/_text.py (12304 bytes) [container.docker.engine] bytes=12304 file=container-src/utils/_text.py
2018-08-13T21:48:50.729525 tarball item: container-src/utils/galaxy.py (8139 bytes) [container.docker.engine] bytes=8139 file=container-src/utils/galaxy.py
2018-08-13T21:48:50.729588 tarball item: container-src/utils/loader.py (906 bytes) [container.docker.engine] bytes=906 file=container-src/utils/loader.py
2018-08-13T21:48:50.729651 tarball item: container-src/utils/logmux.py (1313 bytes) [container.docker.engine] bytes=1313 file=container-src/utils/logmux.py
2018-08-13T21:48:50.729713 tarball item: container-src/utils/ordereddict.py (678 bytes) [container.docker.engine] bytes=678 file=container-src/utils/ordereddict.py
2018-08-13T21:48:50.729790 tarball item: container-src/utils/temp.py (698 bytes) [container.docker.engine] bytes=698 file=container-src/utils/temp.py
2018-08-13T21:48:50.729855 tarball item: container-src/utils/visibility.py (3270 bytes) [container.docker.engine] bytes=3270 file=container-src/utils/visibility.py
2018-08-13T21:48:50.729919 tarball item: container-src/conductor-build/setup.py (4720 bytes) [container.docker.engine] bytes=4720 file=container-src/conductor-build/setup.py
2018-08-13T21:48:50.729981 tarball item: container-src/conductor-build/conductor-requirements.txt (242 bytes) [container.docker.engine] bytes=242 file=container-src/conductor-build/conductor-requirements.txt
2018-08-13T21:48:50.730045 tarball item: container-src/conductor-build/conductor-requirements.yml (60 bytes) [container.docker.engine] bytes=60 file=container-src/conductor-build/conductor-requirements.yml
2018-08-13T21:48:50.730107 tarball item: Dockerfile (1108 bytes) [container.docker.engine] bytes=1108 file=Dockerfile
2018-08-13T21:48:50.730170 tarball item: build-src/ansible.cfg (144 bytes) [container.docker.engine] bytes=144 file=build-src/ansible.cfg
2018-08-13T21:48:50.730233 tarball item: build-src/ansible-requirements.txt (130 bytes) [container.docker.engine] bytes=130 file=build-src/ansible-requirements.txt
2018-08-13T21:48:50.730296 tarball item: build-src/requirements.yml (298 bytes) [container.docker.engine] bytes=298 file=build-src/requirements.yml
2018-08-13T21:48:50.730358 tarball item: build-src/.touch (0 bytes) [container.docker.engine] bytes=0 file=build-src/.touch
2018-08-13T21:48:50.730420 tarball item: Dockerfile (253 bytes) [container.docker.engine] bytes=253 file=Dockerfile
2018-08-13T21:48:50.730977 Starting Docker build of Ansible Container Conductor image (please be patient)... [container.docker.engine] caller_file=/home/cluosh/tools/ansible-container/container/docker/engine.py caller_func=build_conductor_image caller_line=1124
Step 1/5 : FROM container-conductor-ubuntu-bionic:0.9.3rc0

2018-08-13T21:48:52.433972 Cleaning up temporary directory [container.utils.temp] caller_file=/home/cluosh/tools/ansible-container/container/utils/temp.py caller_func=__exit__ caller_line=22 path=/tmp/tmp5k0rcq60
2018-08-13T21:48:52.435875 Unknown exception Error building conductor image: pull access denied for container-conductor-ubuntu-bionic, repository does not exist or may require 'docker login' [container.cli] caller_file=/home/cluosh/tuwien/secenv-infrastructure/web_docker/venv/lib/python3.7/site-packages/structlog/stdlib.py caller_func=exception caller_line=95
Traceback (most recent call last):
  File "/home/cluosh/tools/ansible-container/container/cli.py", line 302, in __call__
    getattr(core, u'hostcmd_{}'.format(args.subcommand))(**vars(args))
  File "/home/cluosh/tools/ansible-container/container/__init__.py", line 28, in __wrapped__
    return fn(*args, **kwargs)
  File "/home/cluosh/tools/ansible-container/container/core.py", line 184, in hostcmd_build
    environment=env_vars
  File "/home/cluosh/tools/ansible-container/container/docker/engine.py", line 107, in __wrapped__
    return fn(self, *args, **kwargs)
  File "/home/cluosh/tools/ansible-container/container/__init__.py", line 28, in __wrapped__
    return fn(*args, **kwargs)
  File "/home/cluosh/tools/ansible-container/container/docker/engine.py", line 1140, in build_conductor_image
    "Error building conductor image: {0}".format(line['errorDetail']['message']))
container.exceptions.AnsibleContainerException: Error building conductor image: pull access denied for container-conductor-ubuntu-bionic, repository does not exist or may require 'docker login'
```

<!--- Verify first that your issue/request is not already reported in GitHub -->
##### ISSUE TYPE
<!--- Pick one item below and delete the rest: -->
 - Bug Report


##### container.yml 
<!--- Paste verbatim a copy of your container.yml between the quotes below -->
```
version: "2"
settings:

  conductor:
    base: alpine:3.5
    roles_path: 
      - ../../roles

  project_name: dante
  vars_files:
    - ../../group_vars/all.yml
    - vars.yml
  vault_password_file: ../../.vault_pass
 
services:
  dante:
    from: alpine:3.5
    roles:
      - dante-container
    ports:
      - 1080:1080
    volumes:
      - /etc/sockd.conf
    entrypoint: ["dumb-init"]
    command: ["sockd"]

registries:
  docker:
    url: https://index.docker.io
    namespace: sokolko

```

##### OS / ENVIRONMENT
<!--- Paste output from `ansible-container --debug version` between the quotes below -->
```
Ansible Container, version 0.9.2
Linux, terminator, 4.4.0-83-generic, #106-Ubuntu SMP Mon Jun 26 17:54:43 UTC 2017, x86_64
2.7.12 (default, Nov 19 2016, 06:48:10) 
[GCC 5.4.0 20160609] /home/godzilla/projects/openitsolutions/deploy/containers/.env/bin/python2
{
  "ContainersPaused": 0, 
  "Labels": null, 
  "CgroupDriver": "cgroupfs", 
  "ContainersRunning": 1, 
  "ContainerdCommit": {
    "Expected": "aa8187dbd3b7ad67d8e5e3a15115d3eef43a7ed1", 
    "ID": ""
  }, 
  "InitBinary": "docker-init", 
  "NGoroutines": 27, 
  "Swarm": {
    "Managers": 0, 
    "ControlAvailable": false, 
    "NodeID": "", 
    "Cluster": {
      "Spec": {
        "TaskDefaults": {}, 
        "Orchestration": {}, 
        "EncryptionConfig": {
          "AutoLockManagers": false
        }, 
        "Raft": {
          "HeartbeatTick": 0, 
          "ElectionTick": 0
        }, 
        "CAConfig": {}, 
        "Dispatcher": {}
      }, 
      "Version": {}, 
      "ID": "", 
      "CreatedAt": "0001-01-01T00:00:00Z", 
      "UpdatedAt": "0001-01-01T00:00:00Z"
    }, 
    "Nodes": 0, 
    "Error": "", 
    "RemoteManagers": null, 
    "LocalNodeState": "inactive", 
    "NodeAddr": ""
  }, 
  "LoggingDriver": "json-file", 
  "OSType": "linux", 
  "HttpProxy": "", 
  "Runtimes": {
    "runc": {
      "path": "runc"
    }
  }, 
  "DriverStatus": [
    [
      "Root Dir", 
      "/var/lib/docker/aufs"
    ], 
    [
      "Backing Filesystem", 
      "extfs"
    ], 
    [
      "Dirs", 
      "30"
    ], 
    [
      "Dirperm1 Supported", 
      "true"
    ]
  ], 
  "OperatingSystem": "Ubuntu 16.04.2 LTS", 
  "Containers": 1, 
  "HttpsProxy": "", 
  "BridgeNfIp6tables": true, 
  "MemTotal": 8245301248, 
  "SecurityOptions": [
    "name=apparmor", 
    "name=seccomp,profile=default"
  ], 
  "Driver": "aufs", 
  "IndexServerAddress": "https://index.docker.io/v1/", 
  "ClusterStore": "", 
  "InitCommit": {
    "Expected": "949e6facb77383876aeff8a6944dde66b3089574", 
    "ID": "N/A"
  }, 
  "Isolation": "", 
  "SystemStatus": null, 
  "OomKillDisable": true, 
  "ClusterAdvertise": "", 
  "SystemTime": "2018-07-26T23:49:52.294411976+05:00", 
  "Name": "terminator", 
  "CPUSet": true, 
  "RegistryConfig": {
    "InsecureRegistryCIDRs": [
      "127.0.0.0/8"
    ], 
    "IndexConfigs": {
      "docker.io": {
        "Official": true, 
        "Name": "docker.io", 
        "Secure": true, 
        "Mirrors": null
      }
    }, 
    "Mirrors": []
  }, 
  "DefaultRuntime": "runc", 
  "ContainersStopped": 0, 
  "NCPU": 8, 
  "NFd": 21, 
  "Architecture": "x86_64", 
  "KernelMemory": true, 
  "CpuCfsQuota": true, 
  "Debug": false, 
  "ID": "4ADH:UOSB:ZSEP:5MX4:IPGK:7A3S:GNW3:7TW2:I6KO:3VXJ:U5BA:MF2V", 
  "IPv4Forwarding": true, 
  "KernelVersion": "4.4.0-83-generic", 
  "BridgeNfIptables": true, 
  "NoProxy": "", 
  "LiveRestoreEnabled": false, 
  "ServerVersion": "1.13.1", 
  "CpuCfsPeriod": true, 
  "ExperimentalBuild": false, 
  "MemoryLimit": true, 
  "SwapLimit": false, 
  "Plugins": {
    "Volume": [
      "local"
    ], 
    "Network": [
      "bridge", 
      "host", 
      "macvlan", 
      "null", 
      "overlay"
    ], 
    "Authorization": null
  }, 
  "Images": 43, 
  "DockerRootDir": "/var/lib/docker", 
  "NEventsListener": 0, 
  "CPUShares": true, 
  "RuncCommit": {
    "Expected": "9df8b306d01f59d3a8029be411de015b7304dd8f", 
    "ID": "N/A"
  }
}
{
  "KernelVersion": "4.4.0-83-generic", 
  "Arch": "amd64", 
  "BuildTime": "2017-11-02T20:40:23.484070968+00:00", 
  "ApiVersion": "1.26", 
  "Version": "1.13.1", 
  "MinAPIVersion": "1.12", 
  "GitCommit": "092cba3", 
  "Os": "linux", 
  "GoVersion": "go1.6.2"
}

```
##### SUMMARY
<!--- Explain the problem briefly -->
I've come across the situation when ansible won't include my vars_files if they are encrypted via vault even if I specify vault_password_file. In the example below everything works fine if vars.yml is not encrypted. But as soon as I encrypt vars.yml I get the error (see below). Maybe I should use some other technique to inject vault encrypted variales into my container build process?
##### STEPS TO REPRODUCE
<!---
For bugs, show exactly how to reproduce the problem.
For new features, show how the feature would be used.
-->

<!--- Paste any example commands between quotes below -->
```
ansible-container --debug  build --no-cache
```

<!--- You can also paste gist.github.com links for larger files -->

##### EXPECTED RESULTS
<!--- What did you expect to happen when running the steps above? -->
Sucessfull build
##### ACTUAL RESULTS
<!--- What actually happened? If possible run with debugging (--debug) -->

<!--- Paste verbatim command output between quotes below -->
```
2018-07-26T23:53:31.786400 Use variable file: /home/godzilla/projects/openitsolutions/deploy/group_vars/all.yml [container.config] caller_file=/home/godzilla/projects/openitsolutions/deploy/containers/.env/local/lib/python2.7/site-packages/container/config.py caller_func=_get_variables_from_file caller_line=226 file=/home/godzilla/projects/openitsolutions/deploy/group_vars/all.yml
2018-07-26T23:53:31.797446 Use variable file: /home/godzilla/projects/openitsolutions/deploy/containers/dante/vars.yml [container.config] caller_file=/home/godzilla/projects/openitsolutions/deploy/containers/.env/local/lib/python2.7/site-packages/container/config.py caller_func=_get_variables_from_file caller_line=226 file=/home/godzilla/projects/openitsolutions/deploy/containers/dante/vars.yml
2018-07-26T23:53:31.800491 Unknown exception 'str' object has no attribute 'iteritems' [container.cli] caller_file=/home/godzilla/projects/openitsolutions/deploy/containers/.env/local/lib/python2.7/site-packages/structlog/stdlib.py caller_func=exception caller_line=95
Traceback (most recent call last):
  File "/home/godzilla/projects/openitsolutions/deploy/containers/.env/local/lib/python2.7/site-packages/container/cli.py", line 299, in __call__
    getattr(core, u'hostcmd_{}'.format(args.subcommand))(**vars(args))
  File "/home/godzilla/projects/openitsolutions/deploy/containers/.env/local/lib/python2.7/site-packages/container/__init__.py", line 28, in __wrapped__
    return fn(*args, **kwargs)
  File "/home/godzilla/projects/openitsolutions/deploy/containers/.env/local/lib/python2.7/site-packages/container/core.py", line 153, in hostcmd_build
    config = get_config(base_path, vars_files=vars_files, engine_name=engine_name, project_name=project_name)
  File "/home/godzilla/projects/openitsolutions/deploy/containers/.env/local/lib/python2.7/site-packages/container/utils/__init__.py", line 49, in get_config
    project_name=project_name, vault_files=vault_files)
  File "/home/godzilla/projects/openitsolutions/deploy/containers/.env/local/lib/python2.7/site-packages/container/__init__.py", line 28, in __wrapped__
    return fn(*args, **kwargs)
  File "/home/godzilla/projects/openitsolutions/deploy/containers/.env/local/lib/python2.7/site-packages/container/config.py", line 62, in __init__
    self.set_env('prod')
  File "/home/godzilla/projects/openitsolutions/deploy/containers/.env/local/lib/python2.7/site-packages/container/docker/config.py", line 45, in set_env
    super(AnsibleContainerConfig, self).set_env(env, config=config)
  File "/home/godzilla/projects/openitsolutions/deploy/containers/.env/local/lib/python2.7/site-packages/container/config.py", line 146, in set_env
    self._resolve_defaults(config)
  File "/home/godzilla/projects/openitsolutions/deploy/containers/.env/local/lib/python2.7/site-packages/container/config.py", line 187, in _resolve_defaults
    defaults.update(self._get_variables_from_file(var_file=var_file), relax=True)
  File "/home/godzilla/projects/openitsolutions/deploy/containers/.env/local/lib/python2.7/site-packages/container/config.py", line 238, in _get_variables_from_file
    return iteritems(config)
  File "/home/godzilla/projects/openitsolutions/deploy/containers/.env/local/lib/python2.7/site-packages/six.py", line 605, in iteritems
    return d.iteritems(**kw)
AttributeError: 'str' object has no attribute 'iteritems'
```

##### ISSUE TYPE
 Bug Report
##### OS / ENVIRONMENT
Google Cloud
Cloud SDK 207.0.0
alpha 2018.06.22
beta 2018.06.22
bq 2.0.34
core 2018.06.22
gsutil 4.32 ```

```
##### SUMMARY
We are trying to setup Ansible-Container in our google cloud. We are facing error while running install command using pip

##### STEPS TO REPRODUCE
Pip Version 10.0.1
python Version 2.7.5
git 1.8.3.1
Docker 1.13.1

command tried: pip install ansible-container[docker,k8s]

##### EXPECTED RESULTS
Ansible-container has to be installed successfully

##### ACTUAL RESULTS
Error : Command "python setup.py egg_info" failed with error code 1 in /tmp/pip-install-UA6vuF/ansible-container/

Fix tried : pip install --upgrade setuptools
Requirement already up-to-date: setuptools in ./.local/lib/python2.7/site-packages (40.0.0)

##### ISSUE TYPE
 - Bug Report

##### OS / ENVIRONMENT
<!--- Paste output from `ansible-container --debug version` between the quotes below -->
```
cannot build, but I have OSX High Sierra and use Python 3.6.3 and pip 10.0.1
```
##### SUMMARY
After running the pip install I got an error that is probably related to pip 10. See https://mail.python.org/pipermail/distutils-sig/2017-October/031642.html 

##### STEPS TO REPRODUCE
<!--- Paste any example commands between quotes below -->
```
virtualenv venv
. venv/bin/activate
pip install "ansible-container[docker,openshift]"
```

<!--- You can also paste gist.github.com links for larger files -->

##### EXPECTED RESULTS
a successful install

##### ACTUAL RESULTS
```
Collecting ansible-container[docker,openshift]
  Using cached https://files.pythonhosted.org/packages/bc/2a/b1252de3931173d26a30fc965be33c9cc0044cf7b23ce4c707f55d86830c/ansible-container-0.9.2.tar.gz
    Complete output from command python setup.py egg_info:
    Traceback (most recent call last):
      File "<string>", line 1, in <module>
      File "/private/var/folders/kk/v8l241ds0yb_vtgj9hmgc9600000gp/T/pip-install-11yi5z3_/ansible-container/setup.py", line 10, in <module>
        from pip.req import parse_requirements
    ModuleNotFoundError: No module named 'pip.req'
```

<!--- Verify first that your issue/request is not already reported in GitHub -->

##### ISSUE TYPE
<!--- Pick one item below and delete the rest: -->
 - Bug Report

##### container.yml 
<!--- Paste verbatim a copy of your container.yml between the quotes below -->
```
version: "2"
settings:
  conductor:
    base: centos:7
    environment:
        http_proxy: http://proxy.corp.com:80
        https_proxy: http://proxy.corp.com:80
        no_proxy: corp.com,localhost,127.0.0.1
services:
  xldcli:
    from: "registry.corp.com/base:latest"
    roles:
      - my-cli
registries:
  openshift:
    url: https://registry.apps.dev.corp.com
    namespace: my_utils
    repository_prefix: ''

```

##### OS / ENVIRONMENT
<!--- Paste output from `ansible-container --debug version` between the quotes below -->
```
Ansible Container, version 0.9.3rc0
Linux, runner-f0cad82a-project-250-concurrent-0, 3.10.0-862.3.2.el7.x86_64, #1 SMP Tue May 15 18:22:15 EDT 2018, x86_64
2.7.5 (default, Feb 20 2018, 09:19:12) 
[GCC 4.8.5 20150623 (Red Hat 4.8.5-28)] /usr/bin/python
{
  "ContainersPaused": 0, 
  "Labels": null, 
  "CgroupDriver": "systemd", 
  "ClusterAdvertise": "", 
  "ContainersRunning": 1, 
  "ContainerdCommit": {
    "Expected": "aa8187dbd3b7ad67d8e5e3a15115d3eef43a7ed1", 
    "ID": ""
  }, 
  "InitBinary": "/usr/libexec/docker/docker-init-current", 
  "NGoroutines": 39, 
  "Swarm": {
    "Managers": 0, 
    "ControlAvailable": false, 
    "NodeID": "", 
    "Cluster": {
      "Spec": {
        "TaskDefaults": {}, 
        "Orchestration": {}, 
        "EncryptionConfig": {
          "AutoLockManagers": false
        }, 
        "Raft": {
          "HeartbeatTick": 0, 
          "ElectionTick": 0
        }, 
        "CAConfig": {}, 
        "Dispatcher": {}
      }, 
      "Version": {}, 
      "ID": "", 
      "CreatedAt": "0001-01-01T00:00:00Z", 
      "UpdatedAt": "0001-01-01T00:00:00Z"
    }, 
    "Nodes": 0, 
    "Error": "", 
    "RemoteManagers": null, 
    "LocalNodeState": "inactive", 
    "NodeAddr": ""
  }, 
  "LoggingDriver": "json-file", 
  "OSType": "linux", 
  "HttpProxy": "http://proxy.corp.com:80/", 
  "Runtimes": {
    "runc": {
      "path": "docker-runc"
    }, 
    "docker-runc": {
      "path": "/usr/libexec/docker/docker-runc-current"
    }
  }, 
  "DriverStatus": [
    [
      "Pool Name", 
      "docker--vg-docker--pool"
    ], 
    [
      "Pool Blocksize", 
      "524.3 kB"
    ], 
    [
      "Base Device Size", 
      "107.4 GB"
    ], 
    [
      "Backing Filesystem", 
      "xfs"
    ], 
    [
      "Data file", 
      ""
    ], 
    [
      "Metadata file", 
      ""
    ], 
    [
      "Data Space Used", 
      "31.08 GB"
    ], 
    [
      "Data Space Total", 
      "106.2 GB"
    ], 
    [
      "Data Space Available", 
      "75.1 GB"
    ], 
    [
      "Metadata Space Used", 
      "5.755 MB"
    ], 
    [
      "Metadata Space Total", 
      "109.1 MB"
    ], 
    [
      "Metadata Space Available", 
      "103.3 MB"
    ], 
    [
      "Thin Pool Minimum Free Space", 
      "10.62 GB"
    ], 
    [
      "Udev Sync Supported", 
      "true"
    ], 
    [
      "Deferred Removal Enabled", 
      "true"
    ], 
    [
      "Deferred Deletion Enabled", 
      "true"
    ], 
    [
      "Deferred Deleted Device Count", 
      "0"
    ], 
    [
      "Library Version", 
      "1.02.146-RHEL7 (2018-01-22)"
    ]
  ], 
  "OperatingSystem": "Red Hat Enterprise Linux", 
  "Containers": 12, 
  "HttpsProxy": "http://proxy.corp.com:80/", 
  "BridgeNfIp6tables": true, 
  "MemTotal": 25005211648, 
  "SecurityOptions": [
    "name=seccomp,profile=/etc/docker/seccomp.json", 
    "name=selinux"
  ], 
  "Driver": "devicemapper", 
  "IndexServerAddress": "https://registry.access.redhat.com/v1/", 
  "ClusterStore": "", 
  "InitCommit": {
    "Expected": "949e6facb77383876aeff8a6944dde66b3089574", 
    "ID": "5b117de7f824f3d3825737cf09581645abbe35d4"
  }, 
  "Isolation": "", 
  "Registries": [
    {
      "Name": "registry.access.redhat.com", 
      "Secure": false
    }, 
    {
      "Name": "registry.access.redhat.com", 
      "Secure": false
    }, 
    {
      "Name": "docker.io", 
      "Secure": true
    }
  ], 
  "SystemStatus": null, 
  "OomKillDisable": true, 
  "PkgVersion": "docker-1.13.1-63.git94f4240.el7.x86_64", 
  "SystemTime": "2018-07-11T09:50:59.381926155-04:00", 
  "Name": "myserver.corp.com", 
  "CPUSet": true, 
  "RegistryConfig": {
    "InsecureRegistryCIDRs": [
      "127.0.0.0/8"
    ], 
    "IndexConfigs": {
      "registry.access.redhat.com": {
        "Official": false, 
        "Name": "registry.access.redhat.com", 
        "Secure": false, 
        "Mirrors": []
      }, 
      "docker.io": {
        "Official": true, 
        "Name": "docker.io", 
        "Secure": true, 
        "Mirrors": null
      }
    }, 
    "Mirrors": []
  }, 
  "DefaultRuntime": "docker-runc", 
  "ContainersStopped": 11, 
  "NCPU": 9, 
  "NFd": 29, 
  "Architecture": "x86_64", 
  "KernelMemory": true, 
  "CpuCfsQuota": true, 
  "Debug": false, 
  "IndexServerName": "registry.access.redhat.com", 
  "ID": "GPQD:7DT6:3IMD:ECQX:TO4J:ROSI:Z76I:BKWS:CTWO:VQQI:VQ3P:73RL", 
  "IPv4Forwarding": true, 
  "KernelVersion": "3.10.0-862.3.2.el7.x86_64", 
  "BridgeNfIptables": true, 
  "NoProxy": "corp.com,localhost,127.0.0.1", 
  "LiveRestoreEnabled": false, 
  "ServerVersion": "1.13.1", 
  "CpuCfsPeriod": true, 
  "ExperimentalBuild": false, 
  "MemoryLimit": true, 
  "SwapLimit": true, 
  "Plugins": {
    "Volume": [
      "local"
    ], 
    "Network": [
      "bridge", 
      "host", 
      "macvlan", 
      "null", 
      "overlay"
    ], 
    "Authorization": [
      "rhel-push-plugin"
    ]
  }, 
  "Images": 11, 
  "DockerRootDir": "/var/lib/docker", 
  "NEventsListener": 0, 
  "CPUShares": true, 
  "RuncCommit": {
    "Expected": "9df8b306d01f59d3a8029be411de015b7304dd8f", 
    "ID": "e9c345b3f906d5dc5e8100b05ce37073a811c74a"
  }
}
{
  "KernelVersion": "3.10.0-862.3.2.el7.x86_64", 
  "PkgVersion": "docker-1.13.1-63.git94f4240.el7.x86_64", 
  "Arch": "amd64", 
  "BuildTime": "2018-04-30T15:45:42.898562214+00:00", 
  "ApiVersion": "1.26", 
  "Version": "1.13.1", 
  "MinAPIVersion": "1.12", 
  "GitCommit": "94f4240/1.13.1", 
  "Os": "linux", 
  "GoVersion": "go1.9.2"
}
```
##### SUMMARY
Have an ansible-requirements.txt file to install necessary python modules during build time.  The proxy settings in the container.yml are not being passed as build-arguments to the downstream container build.  This is necessary because we need to set http_proxy, no_proxy, and https_proxy in order to do these external builds.  The builds are failing because it is unable to reach the external network because the necessary environment variables are not being passed back to the downstream build.

##### STEPS TO REPRODUCE
<!---
For bugs, show exactly how to reproduce the problem.
For new features, show how the feature would be used.
-->

<!--- Paste any example commands between quotes below -->
```
ansible-container build
```

<!--- You can also paste gist.github.com links for larger files -->

##### EXPECTED RESULTS
Container builds

##### ACTUAL RESULTS
<!--- What actually happened? If possible run with debugging (--debug) -->
Without debugging
<!--- Paste verbatim command output between quotes below -->
```
BuildError: The command '/bin/sh -c pip install --no-cache-dir -r /_ansible/build/ansible-requirements.txt && ansible-galaxy install -p /etc/ansible/roles -r /_ansible/build/requirements.yml && cp /_ansible/build/ansible.cfg /etc/ansible/ansible.cfg' returned a non-zero code: 1
```
With debugging
```
  Retrying (Retry(total=0, connect=None, read=None, redirect=None, status=None)) after connection broken by 'NewConnectionError('<pip._vendor.urllib3.connection.VerifiedHTTPSConnection object at 0x7fe5d448aa10>: Failed to establish a new connection: [Errno 101] Network is unreachable',)': /simple/ansible-modules-hashivault/

  Could not find a version that satisfies the requirement ansible-modules-hashivault>=3.9.5 (from -r /_ansible/build/ansible-requirements.txt (line 3)) (from versions: )

No matching distribution found for ansible-modules-hashivault>=3.9.5 (from -r /_ansible/build/ansible-requirements.txt (line 3))

2018-07-11T02:23:28.583127 Cleaning up temporary directory [container.utils.temp] caller_file=/sources/ansible-container/container/utils/temp.py caller_func=__exit__ caller_line=22 path=/tmp/tmp5__sJy
2018-07-11T02:23:28.585547 Unknown exception Error building conductor image: The command '/bin/sh -c pip install --no-cache-dir -r /_ansible/build/ansible-requirements.txt && ansible-galaxy install -p /etc/ansible/roles -r /_ansible/build/requirements.yml && cp /_ansible/build/ansible.cfg /etc/ansible/ansible.cfg' returned a non-zero code: 1 [container.cli] caller_file=/usr/lib/python2.7/site-packages/structlog/stdlib.py caller_func=exception caller_line=95
Traceback (most recent call last):
  File "/sources/ansible-container/container/cli.py", line 304, in __call__
    getattr(core, u'hostcmd_{}'.format(args.subcommand))(**vars(args))
  File "/sources/ansible-container/container/__init__.py", line 28, in __wrapped__
    return fn(*args, **kwargs)
  File "/sources/ansible-container/container/core.py", line 184, in hostcmd_build
    environment=env_vars
  File "/sources/ansible-container/container/docker/engine.py", line 107, in __wrapped__
    return fn(self, *args, **kwargs)
  File "/sources/ansible-container/container/__init__.py", line 28, in __wrapped__
    return fn(*args, **kwargs)
  File "/sources/ansible-container/container/docker/engine.py", line 1140, in build_conductor_image
    "Error building conductor image: {0}".format(line['errorDetail']['message']))
AnsibleContainerException: Error building conductor image: The command '/bin/sh -c pip install --no-cache-dir -r /_ansible/build/ansible-requirements.txt && ansible-galaxy install -p /etc/ansible/roles -r /_ansible/build/requirements.yml && cp /_ansible/build/ansible.cfg /etc/ansible/ansible.cfg' returned a non-zero code: 1
```

 - Bug Report
##### container.yml 
<!--- Paste verbatim a copy of your container.yml between the quotes below -->
```
version: "2"
settings:

  conductor:
    base: ubuntu:16.04
    environment:  # List or mapping of environment variables
      - DISTRO=xenial

  project_name: site1

services:
  web:
    from: ubuntu:16.04
    roles:
      - apache2
      - sardex/site1-web
    depends_on:
      - "mysql_database"
    ports:
      - "127.0.0.1:80:80"
      - "127.0.0.1:443:443"
    volumes:
      - "$PWD/sources/site1:/var/www/html:rw"
    entrypoint: ["/etc/init.d/startup.sh"]
    command: ["start"]

  mysql_database:
    from: ubuntu:16.04
    roles:
      - mysql
      - sardex/site1-db
    ports:
      - "127.0.0.1:3306:3306"
    entrypoint: ["/etc/init.d/startup.sh"]
    command: ["start"]

registries: {}

```
```
version: "2"
settings:

  conductor:
    base: ubuntu:16.04
    environment:  # List or mapping of environment variables
      - DISTRO=xenial

  project_name: site2
  
services:
  web:
    from: ubuntu:16.04
    roles:
      - apache2
      - sardex/site2-web
    depends_on:
      - "mysql_database"
    ports:
      - "127.0.0.1:80:80"
      - "127.0.0.1:443:443"
    volumes:
      - "$PWD/sources/site2:/var/www/html:rw"
    entrypoint: ["/etc/init.d/startup.sh"]
    command: ["start"]

  mysql_database:
    from: ubuntu:16.04
    roles:
      - mysql
      - sardex/site2-db
    ports:
      - "127.0.0.1:3306:3306"
    entrypoint: ["/etc/init.d/startup.sh"]
    command: ["start"]

registries: {}

```
##### OS / ENVIRONMENT
<!--- Paste output from `ansible-container --debug version` between the quotes below -->
```
bug version
Ansible Container, version 0.9.2
Linux, matteo-pc, 4.13.0-45-generic, #50~16.04.1-Ubuntu SMP Wed May 30 11:18:27 UTC 2018, x86_64
3.6.5 (default, May  3 2018, 10:08:28) 
[GCC 5.4.0 20160609] /home/matteo/.virtualenvs/sites-53tickPf/bin/python3.6

```
##### SUMMARY
After building those two container.yml, if I destroy one project, both projects conductors are deleted so I have to rebuild both.

##### STEPS TO REPRODUCE

* put two simple roles or just one for container.yml;
* build my two container.yml projects
* destroy one of them
* You can see both projects conductors deleted.

##### EXPECTED RESULTS
I expect that destroy command doesn't destroy other projects images.

##### ACTUAL RESULTS
Both conductors, site1-conductor and site2-conductor images are deleted.



##### ISSUE TYPE
 - Bug Report

##### container.yml 
This is a reasonably small example I created to demonstrate the problem.  (Yes it fails.)
```
version: '2'

settings:
  project_name: buildbox
  conductor:
    base: 'centos:7'

services:
  base:
    from: centos:7
    roles:
      - BuildBox/Base
      - BuildBox/Configuration1
      - BuildBox/Configuration2
      - BuildBox/Configuration3
      - BuildBox/Configuration4
    working_dir: /tmp
    ports:
      - '22'
    command:
      - /usr/sbin/sshd
      - -D
```
Individual roles have a tasks/main.yml of the form
```
---
- command: echo BASE
```
substitute BASE for ONE, TWO, THREE, FOUR to match role

##### OS / ENVIRONMENT
The environment for a virtualenv ansible-container install direct on ubuntu xenial:
```
Ansible Container, version 0.9.2
Linux, dhsueh-ubuntu, 4.13.0-43-generic, #48~16.04.1-Ubuntu SMP Thu May 17 12:56:46 UTC 2018, x86_64
2.7.12 (default, Dec  4 2017, 14:50:18) 
[GCC 5.4.0 20160609] <virtualenv directory path>/bin/python2
```

Believed-identical environment configured as a Dockerfile-built docker container "FROM ubuntu:xenial":
```
Ansible Container, version 0.9.2
Linux, b92df59f4255, 4.13.0-43-generic, #48~16.04.1-Ubuntu SMP Thu May 17 12:56:46 UTC 2018, x86_64
2.7.12 (default, Dec  4 2017, 14:50:18) 
[GCC 5.4.0 20160609] /usr/bin/python
```
(I have tried a "FROM centos:7" version as well - no difference.)

My environments are set up pinned to 0.9.2 with various workarounds applied as I encountered the need for them (ubuntu paths below):
```
pip --disable-pip-version-check install pip==9.0.3
pip --disable-pip-version-check install setuptools==39.2.0
pip --disable-pip-version-check install docker==2.7.0
pip --disable-pip-version-check install ansible-container[docker]==0.9.2
sed -i "s/filters={'name': self.secrets_volume_name}//g" /usr/local/lib/python2.7/dist-packages/container/docker/secrets.py
sed -i "s/return os.path.join(os.sep, 'run', 'secrets')/return os.path.join(os.sep, 'docker', 'secrets')/g" /usr/local/lib/python2.7/dist-packages/container/docker/engine.py
```
pip docker==2.7.0 is workaround that I can't find a reference for now (?!?!)
sed filters workaround addresses ansible-container bug described in https://github.com/moby/moby/issues/34121
sed return is workaround for https://github.com/ansible/ansible-container/issues/762

##### SUMMARY

Heads up: The observed behavior is strikingly similar to https://github.com/ansible/ansible-container/issues/673 but does not involve any cloud-enabled roles; all roles requested confirmed to exist on the filesystem in the single path specified in --roles-path option. 

I have many services, each with many different roles listed.  Previous to 2018-06-05 everything was working fine on a particular docker host.  On 2018-06-05 I added an extra role to my services. at the end of the list (e.g. "BuildBox/Configuration4") which resulted in different failures depending on the environment.

In a direct-on-iron ansible-container virtualenv environment created after the problem date, an "ansible-container build" call completes fine.

Depending on the docker host I run an ansible-container docker image on, I get an error like:
```
2018-06-07T18:00:35.723801 Processing defaults section... [container.config] caller_file=/_ansible/container/config.py caller_func=_process_defaults caller_line=325
2018-06-07T18:00:35.726157 Processing section...          [container.config] caller_file=/_ansible/container/config.py caller_func=_process_top_level_sections caller_line=334 section=volumes
2018-06-07T18:00:35.728781 Processing section...          [container.config] caller_file=/_ansible/container/config.py caller_func=_process_top_level_sections caller_line=334 section=registries
2018-06-07T18:00:35.731282 Processing section...          [container.config] caller_file=/_ansible/container/config.py caller_func=_process_top_level_sections caller_line=334 section=secrets
2018-06-07T18:00:35.733772 Processing service...          [container.config] caller_file=/_ansible/container/config.py caller_func=_process_services caller_line=340 service=u'base' service_data={u'command': [u'/usr/sbin/sshd', u'-D'], u'working_dir': u'/tmp', u'from': u'centos:7', u'ports': [u'22'], u'roles': [u'BuildBox/Base', u'BuildBox/Configuration1', u'BuildBox/Configuration2', u'BuildBox/Configuration3', u'BuildBox/Configuration4']}
Traceback (most recent call last):
  File "/usr/bin/conductor", line 11, in <module>
    load_entry_point('ansible-container', 'console_scripts', 'conductor')()
  File "/_ansible/container/__init__.py", line 19, in __wrapped__
    return fn(*args, **kwargs)
  File "/_ansible/container/cli.py", line 389, in conductor_commandline
    conductor_config = AnsibleContainerConductorConfig(list_to_ordereddict(containers_config))
  File "/_ansible/container/__init__.py", line 19, in __wrapped__
    return fn(*args, **kwargs)
  File "/_ansible/container/config.py", line 297, in __init__
    self._process_services()
  File "/_ansible/container/config.py", line 357, in _process_services
    role_metadata = get_metadata_from_role(role_name)
  File "/_ansible/container/__init__.py", line 19, in __wrapped__
    return fn(*args, **kwargs)
  File "/_ansible/container/utils/__init__.py", line 275, in get_metadata_from_role
    return get_content_from_role(role_name, os.path.join('meta', 'container.yml'))
  File "/_ansible/container/__init__.py", line 19, in __wrapped__
    return fn(*args, **kwargs)
  File "/_ansible/container/utils/__init__.py", line 264, in get_content_from_role
    role_path = resolve_role_to_path(role_name)
  File "/_ansible/container/__init__.py", line 19, in __wrapped__
    return fn(*args, **kwargs)
  File "/_ansible/container/utils/__init__.py", line 210, in resolve_role_to_path
    loader=loader)
  File "/usr/lib/python2.7/site-packages/ansible/playbook/role/include.py", line 59, in load
    return ri.load_data(data, variable_manager=variable_manager, loader=loader)
  File "/usr/lib/python2.7/site-packages/ansible/playbook/base.py", line 244, in load_data
    ds = self.preprocess_data(ds)
  File "/usr/lib/python2.7/site-packages/ansible/playbook/role/definition.py", line 94, in preprocess_data
    (role_name, role_path) = self._load_role_path(role_name)
  File "/usr/lib/python2.7/site-packages/ansible/playbook/role/definition.py", line 187, in _load_role_path
    raise AnsibleError("the role '%s' was not found in %s" % (role_name, ":".join(role_search_paths)), obj=self._ds)
ansible.errors.AnsibleError: the role '<NOTFOUNDROLE>' was not found in ./roles:<AC_ROLES_PATH>:/src/roles:/etc/ansible/roles:.
```
The \<AC_ROLES_PATH\> is the path provided in the ansible-container --roles-path option.

The missing \<NOTFOUNDROLE\> role is, at times:
- when using docker container running on host for the first time post 2018-06-05:
- - the first role in the container.yml listing ("BuildBox/Base")
- - removing that role simply results in failing to find the new first role
- when using docker container running on host working successfully previous to 2018-06-05:
- - the last role in the container.yml listing ("BuildBox/Configuration4")
- - if I remove the last role, making the list match what was working previous to 2018-06-05, the build completes fine

In all cases I can confirm all roles are present on the local / in-container filesystem before the ansible-container call.

The fact that on the working-before-2018-06-05 docker host, I can delete the recently-added last role and build successfully suggests that some caching is happening and maybe some intermediary tool changed (c.f. https://github.com/ansible/ansible-container/issues/673) but I am unable to determine what and where.

Failures not affected by presence/absense of --debug and/or --use-local-python

##### STEPS TO REPRODUCE

Create an on-iron virtualenv and set up environment as shown above
Create a Dockerfile with ansible-container environment as shown above
Set up the container.yml and various roles as described above
Run:
```
ansible-container build --services base --roles-path <wherever you put the roles>
```

##### EXPECTED RESULTS
working build, direct on-iron

##### ACTUAL RESULTS
debug output above, for ansible-container run in docker container on host, varies depending on host
