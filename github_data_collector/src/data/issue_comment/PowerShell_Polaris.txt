## Problem Statement

When I run `Start-Polaris` inside a container, the container exits immediately because the command is asynchronous. I tried adding a `Start-Sleep -Seconds 100` command after `Start-Polaris`, but this caused the route handlers to block, so the web server was non-responsive.

## Proposed Solution

Add a `-Wait` parameter to the `Start-Polaris` command, to block script execution and force the command to run synchronously.
# Polaris Feature Request

## Is your feature request related to a problem? Please describe

I want to be able to troubleshoot individual scripts after the fact.

## Describe the solution you'd like

I'd like to have standardized logging to be able to log which response code was delivered at what time. 

## Describe alternatives you've considered

I'm thinking about having a standardized log format like the [Apache CLF](https://httpd.apache.org/docs/1.3/logs.html#common)
I have considered writing my own Logging function and overloading the built-in function in the Polaris class. But the problem is that some `$Response.Send()` does not have a `$Polaris.Log()`.
Also, I'm unsure if the $Polaris.Log() function has access to the $Response and $Request objects, which is required if you want to log the Request-string and  Response-code. I

# Pull Request Creation Checklist
-   [x] Added a short procedure in order to get a working kerberos Auth with Polaris
# Polaris Bug Report

## Description of the bug

---

When PowerShell's strict mode is enabled the Start-Polaris command throws the following exception:

```powershell
The variable '$Script:ClassDefinitions' cannot be retrieved because it has not been set.
At C:\Program Files\WindowsPowerShell\Modules\Polaris\0.2.0\lib\Polaris.Class.ps1:15 char:33
```

## Steps to reproduce

Steps to reproduce the behavior:

1. ```Import-Module Polaris```
2. ```Set-StrictMode -Version Latest```
3. ```Start-Polaris```
4. See error.

## Expected behavior

Polaris should not throw exceptions in strict mode - at least when these are not related to the Polaris module itself. Using PowerShell's strict mode is good practice for identifying bugs and scripting issues that can otherwise by difficult and time consuming to track down

## Verbose output of the script

There is no additional information obtained by setting the Verbose preference. The exception is thrown before any Write-Verbose statements are encountered.

## Additional context

The issue is caused by the following line, within the parameter declarations, in ```Polaris.Class.ps1```:

```powershell
    [string]$ClassDefinitions = $Script:ClassDefinitions
```

$Script:ClassDefinitions is undefined at the time the parameter declaration is encountered, and therefore in strict mode, this will throw an exception.

It is possible to workaround this issue by using the following script line before calling ```Start-Polaris```:

```powershell
$Script:ClassDefinitions = [string]::Empty
```

Having declared the variable, strict mode will no longer cause the command to throw an exception.

Not sure why the parameter in the reference script uses an undeclared variable as a default value. I would suggest a quick fix would be to declare the variable early in the execution lifecycle of the module, perhaps in the ```.psm1``` file, before any command that relies on its value can be invoked.

## Version Information

---

Polaris 0.2.0


<table>
<colgroup><col/><col/></colgroup>
<tr><th>Name</th><th>Version</th></tr>
<tr><td>Polaris</td><td>0.2.0</td></tr>
</table>
<table>
<colgroup><col/><col/><col/><col/><col/><col/><col/><col/></colgroup>
<tr><th>PSVersion</th><th>PSEdition</th><th>PSCompatibleVersions</th><th>BuildVersion</th><th>CLRVersion</th><th>WSManStackVersion</th><th>PSRemotingProtocolVersion</th><th>SerializationVersion</th></tr>
<tr><td>5.1.18362.145</td><td>Desktop</td><td>1.0.-1.-1,  2.0.-1.-1,  3.0.-1.-1,  4.0.-1.-1,  5.0.-1.-1,  5.1.18362.145</td><td>10.0.18362.145</td><td>4.0.30319.42000</td><td>3.0</td><td>2.3</td><td>1.1.0.1</td></tr>
</table>

 
# Polaris Bug Report
After running Stop-Polaris and when try to re-start the (start-Polaris) it will throw an error.
## Description of the bug
Stop-Polaris is not stopping web server on whichever port its started with. I get a below when try to run Start-polaris 

```
Exception` calling "Start" with "0" argument(s): "Failed to listen on prefix 'http://localhost:8080/' because it conflicts with an existing registration on the machine." At C:\Users\harikant\Documents\WindowsPowerShell\Modules\Polaris\0.2.0\lib\Polaris.Class.ps1:316 char:9 + $this.Listener.Start() + ~~~~~~~~~~~~~~~~~~~~~~ + CategoryInfo : NotSpecified: (:) [], MethodInvocationException + FullyQualifiedErrorId : HttpListenerException
```
---

A clear and concise description of what the bug is.

## Steps to reproduce
Example when you run the below code
```Import-Module Polaris -Verbose
New-PolarisGetRoute -Path "/helloworld" -Scriptblock {
    $Response.Send('Hello World!')
}

Start-Polaris -Port 8080
```
And run Stop-Polaris and again try to start-polaris command it thows the above error.

## Expected behavior

To be able to stop and start the Polaris server without any errors.

## Version Information

---

PSVersion                 : 5.1.17134.858
PSEdition                 : Desktop
PSCompatibleVersions      : {1.0, 2.0, 3.0, 4.0...}
BuildVersion              : 10.0.17134.858
CLRVersion                : 4.0.30319.42000
WSManStackVersion         : 3.0
PSRemotingProtocolVersion : 2.3
SerializationVersion      : 1.1.0.1

<table>
<colgroup><col/><col/></colgroup>
<tr><th>Name</th><th>Version</th></tr>
<tr><td>Polaris</td><td>0.2.0</td></tr>
</table>
<table>
<colgroup><col/><col/><col/><col/><col/><col/><col/><col/></colgroup>
<tr><th>PSVersion</th><th>PSEdition</th><th>PSCompatibleVersions</th><th>BuildVersion</th><th>CLRVersion</th><th>WSManStackVersion</th><th>PSRemotingProtocolVersion</th><th>SerializationVersion</th></tr>
<tr><td>5.1.17134.858</td><td>Desktop</td><td>System.Version[]</td><td>10.0.17134.858</td><td>4.0.30319.42000</td><td>3.0</td><td>2.3</td><td>1.1.0.1</td></tr>
</table>


i was assuming that if i use $response.send() the request is closed and the response is sent to the client. however, the code will continue to run. The result is that the last $ response.send is displayed as a result on the client side. how do I force the code to end the request before the end of the routine is reached?

my work-around at this moment : 

```powershell
Import-Module -Name Polaris
$global:PolarisRestPort = 8183
$global:AppName = "Polaris-Test"

    $app = Start-Polaris -Port $global:PolarisRestPort -MinRunspaces 1  -MaxRunspaces  5   # all params are optional

    $functionMiddleWare = {
        $authkey = $Request.Headers['Authorization']
        if($authkey -eq $null)
        { 
            $Response.SetStatusCode(401)
            $Response.Send("not authorized")
            [Polaris]::Send($Response)
            }}
    New-PolarisRouteMiddleware -Name MyParser -Polaris $app  -Scriptblock $functionMiddleWare
    $functionHello = { $Response.Send("hello")}
    New-PolarisRoute -method GET -Path '/hello' -Polaris $app  -Scriptblock $functionHello
    while($app.Listener.IsListening){Wait-Event callbackcomplete}
```

Hi guys,

I was wondering if there were any tests (with numbers) about how well Polaris can scale?

### Background of my question

If I want to introduce an open source project like Polaris into a project at my company, I need to have some kind of proof that it the module will support scaling. 
do you guys have anything like that by any chance?
# Add some default index page
Might be useful for testing (to make sure it's up and running,)

# Add a param to make adding pages (get routes) easy
routes are a bit tedious while experimenting
```
$pages=  @{
 index= "C:\temp\index.html"  # if valid path may just extract content
 proccess = {get-process | select name, id, cpu | convertto-html}
 services = {get-service | convertto-html }

}

# then smth like
$polaris | Add-PolarisPages $pages   #OR  Start-Polaris -port 8888 -pages $pages
```

# Have Start-Polaris to open server with default browser
explorer "http://localhost:port" (Win)
open  "http://localhost:port"  (Mac)
xgd-open  "http://localhost:port"  (linux)

# Polaris Bug Report

## Description of the bug

After executing start-polaris everything works fine internally, but I can't reach that site from outside. After opening up ports on firewall and running "netsh http add urlacl ... " I'm getting 503 error. If I run a site with Flancy (similar PS micro webserver) it works with external request, so I presume some extra setting is needed for Polaris to make it visible from outside?

## Steps to reproduce
Start-Polaris -port 8000 # on local
Iwr -uri http://someserver:8000 # from external machine - either hangs or getting 503


## update
After some experiments I was able to make it work for http. The key was to have delegate=yes when doing netsh, and using "+" as a host name when starting polaris.
```
netsh http add urlacl url=http://+:8005/ user=everyone delegate=yes
Start-Polaris -port 8005 -hostname "+"
```

Howerver this does not fix the issue if using https
## update 2
Somehow https start working externally on some specific ports if I use the ip address as hostname parameter (not working with + or actual host name). Also need to add sslcert  to that port (I did it before reporting the issue, so the IP was the fix).  But still can't recreate it on new ports

I also used base aspnet core app (instaled with 'dotnet new webapp' command). It works just fine using it's built in ssl cert. I only need to add urlacl (no need to set sslcer with netsh).  So it's probably a better idea to switch to Kestrel. I think httplistener might be a good option to run stuff locally, for example  for webapps as an alternative to WPF.

# Polaris Feature Request

## Is your feature request related to a problem? Please describe

Using Windows integrated authentication uses a popup for user authentication.

## Describe the solution you'd like

Support Custom login pages and uri's for login and logoff.
Maybe c#s claims principal and sessions in cookies.

## Describe alternatives you've considered

Writing my own login page that uses javascript to set a cookie and checking the cookie client side.

## Additional context