Solution: bump dependency versions and update module imports based on compiler errors.
There hasn't been any activity for the last half year and documentation is still very sparse. Is this already dead?  Looked like a useful software.
Queue operation doc pages are missing their input / output sections. A quick update to this will make it easier to understand their usage.
Running `cargo bench acker` in the pumpkindb_engine crate:

*nightly-2017-06-20*: (last known "good" nightly)

```
test script::tests::ackermann                                                  ... bench:  32,562,056 ns/iter (+/- 4,313,209)
test script::tests::ackermann_stack                                            ... bench:  24,391,250 ns/iter (+/- 4,758,534)
```

----

Most likely "first offender"

**nightly-2017-06-21**: (https://github.com/rust-lang/rust/commit/445077963)

```
test script::tests::ackermann                                                  ... bench:  99,398,843 ns/iter (+/- 5,556,874)
test script::tests::ackermann_stack                                            ... bench:  51,625,752 ns/iter (+/- 3,971,108)
```

Random builds:

*2017-07-24*:

```
test script::tests::ackermann                                                  ... bench:  49,617,433 ns/iter (+/- 6,028,955)
test script::tests::ackermann_stack                                            ... bench:  36,797,438 ns/iter (+/- 4,442,438)
```

*2017-07-01*:

```
test script::tests::ackermann                                                  ... bench:  97,953,353 ns/iter (+/- 5,756,554)
test script::tests::ackermann_stack                                            ... bench:  51,599,955 ns/iter (+/- 3,756,541)
```

*2017-07-12*:

```
test script::tests::ackermann                                                  ... bench:  50,183,660 ns/iter (+/- 7,364,549)
test script::tests::ackermann_stack                                            ... bench:  39,244,258 ns/iter (+/- 6,607,862)
```

*2017-06-23*:

```
test script::tests::ackermann                                                  ... bench: 111,698,229 ns/iter (+/- 17,495,313)
test script::tests::ackermann_stack                                            ... bench:  58,807,694 ns/iter (+/- 4,591,336)
```

Last build:

*2017-08-02*:

```
test script::tests::ackermann                                                  ... bench:  49,253,683 ns/iter (+/- 9,255,754)
test script::tests::ackermann_stack                                            ... bench:  35,636,600 ns/iter (+/- 5,089,613)
```

Proposed solution: figure out what happened in the first place, why did it get so much slower?
Currently, [`builtins!`](https://github.com/PumpkinDB/PumpkinDB/blob/master/pumpkindb_engine/src/script/macros.rs#L8-L30) uses `lazy_static!` to prepare `BUILTINS` map of instructions. 
This means that until `handle_builtins` is first called, nothing is going to get parsed. So if
there's, for example, a parsing mistake, the whole engine will crash.

Proposed solution: find a way to parse builtins during compile time
For most end-user cases, PumpkinDB is too "close to the metal"  to be easily plugged into a business application, especially if "event sourcing" type of scenarios are considered.

Proposed solution: implement a higher level database on top of PumpkinDB
Currently, all "builtin" instruction files (currently using `.builtins` extension) with instruction / implementation pairs, handle these as rough equivalents of [DEF](http://pumpkindb.org/doc/script/DEF.html). This works most of the time, except that in some cases it would be preferable to avoid recomputing values that are static in nature.

Proposed solution: find a way to have a notation for a semantic equivalent of [SET](http://pumpkindb.org/doc/script/SET.html) and implement it
For example, they would use different prefixes for "constant" instructions, "private" instructions, namespaces, etc.

Proposed solution: develop a "standard convention" proposal
Currently, lmdb is very entangled with PumpkinDB's code. Should we want to add another backend (existing or a new one we develop for PumpkinDB), it will require some serious modifications.
When adding a constant to a "builtins" (see `builtins!` and `handle_builtins!` macros) file like this:

```
$FIXATTRLEN : 20.
```

When trying to use it, get the following error:

```
PumpkinDB> $FIXATTRLEN.
Error: "Unknown instruction: 20" 0x03823230 0x02
```

However, using binary syntax works fine.

```
$FIXATTRLEN : 0x14.
```

works as expected:

```
PumpkinDB> $FIXATTRLEN.
0x14
```

