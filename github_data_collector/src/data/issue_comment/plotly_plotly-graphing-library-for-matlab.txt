Mathworks renamed the colorbar peer appdata entry in the axes object in some recent release. Hence fig2plotly fails when there is a colorbar (I tested 2019a and 2019b Matlab release). The suggested change fixes this problem.
In some cases, the filename is obtained as a cellstr. This edit converts to a valid char filename to be used for local storage.
It seems that it is not possible to save figures to SVG/PDF/PNG in offline mode:
`plot(1:10);
plotlyfig = fig2plotly(gcf, 'offline', true);
saveplotlyfig(plotlyfig,'myPlotlyFig','pdf');`

Gives the following output:

> Error using response_handler (line 29)
> Aw, snap! We don't have an account for . Want to try again? Sign in is not case sensitive.
> 
> Error in plotlygenimage (line 63)
>     response_handler(response_string, extras);
> 
> Error in plotlyfig/saveas (line 332)
>             plotlygenimage(imgfig, filename, varargin{:});
> 
> Error in saveplotlyfig (line 68)
> p.saveas(filename, varargin{:});
When I invoke fig2plotly on a boxplot as in:

`boxplot(SQ_reads_mean,'Jitter',0.15);`
`fig2plotly(gcf, 'offline', true, 'open', false, 'filename', 'Control_AAGC_63bp_raw_reads_quality');`

the system(Matlab running on a Code Ocean compute capsule)  reports the following error:
 
{Index exceeds matrix dimensions.
 
Error in updateData (line 100)
        ~strcmp(obj.data{dataIndex}.type,'box')
 
Error in plotlyfig/update (line 582)
                updateData(obj,n);
 
Error in plotlyfig (line 208)
                obj.update;
 
Error in fig2plotly (line 44)
p = plotlyfig(varargin{:});
 
Error in SSR_Control_Account_for_PB_Artifact_Bbedit (line 68)
  fig2plotly(gcf, 'offline', true, 'open', false, 'filename',
  'Control_AAGC_63bp_raw_reads_quality');
}
Edit m2json to check if input char arrays have more than 1 row. If so, convert to cell array using cellstr() and let cell2json escape the strings.
I am using dates as axis labels in the format mm/dd/yy, and I'm storing them as a char array, i.e.:
```
val =
5/26/18
2/26/18
1/26/18
```
fig2plotly (offline and online) breaks trying to escape the strings this kind of char array. Seems that this particular case isn't accounted for in charescape(). Using a cell array of strings works normally.

I think a simple fix for this would be to simply check if you have a char array with >1 column, use cellstr(), and continue as normal. Screenshots below.

![plotly_chararray](https://user-images.githubusercontent.com/6799046/43342588-c6c8aa04-91d2-11e8-8375-c636bcd8a071.png)

![plotly_cellstr](https://user-images.githubusercontent.com/6799046/43342889-d270991a-91d3-11e8-8ff2-487f1da0bbc4.png)




When writing the figure to Matlab the default legend position is as shown below
![image](https://user-images.githubusercontent.com/33550946/40789010-6c041314-64bf-11e8-99b0-9d9f71f73968.png)

However, there does not seem to be a way to edit this location such that it resembles the figure below. You need to manually go and edit the figure in plotly. This does seem possible in Python. But changing the orientation in Matlab by using
`legend(legendData, 'Location','North','Orientation','horizontal')`
does not produce the same figure once exported to plotly

![image](https://user-images.githubusercontent.com/33550946/40789158-bc5f85aa-64bf-11e8-9ac2-96cbc913e0e6.png)


In the tutorial https://plot.ly/matplotlib/histograms/ tutorials matplotlib.pyplot is imported as plt. But during plotting the histogram we are usintg pyplot which gives the error of "pyplot not defined".
fig2plotly fails completely if I provide it with a timeseries plot that has datetimes on as the x-axis. 
Here's an example with a tscollection `mydata`, where `mydata.Time` is `double` data that is posix time (seconds since epoch), and the `mydata.TimeInfo.StartDate` is `'01-Jan-1970 00:00:00.000'`. 

`fig = figure; plot(myData.accelmeterZ_mps2)`
![image](https://user-images.githubusercontent.com/17805666/34056125-aec3fa6e-e186-11e7-93ae-3211a6061cad.png)

`fig2plotly(fig);`
```
Error using response_handler (line 31)
Hm... Plotly had some trouble decoding your 'args'. Are you sure your data or styling object is in the right format? Check out
the examples at plot.ly/api for guidance.
```

However, if I just plot the underlying data, it works just fine:
```
fig2 = figure; plot(myData.Time, myData.accelmeterZ_mps2.Data);
```
![image](https://user-images.githubusercontent.com/17805666/34056383-9c9bf46c-e187-11e7-962b-4dd50a6cc123.png)

```
fig2plotly(fig2);
```

The Plotly `/clientresp` API was replaced over 2 years ago and deprecated over 1 year ago. Switch to the V2 API documented at https://api.plot.ly