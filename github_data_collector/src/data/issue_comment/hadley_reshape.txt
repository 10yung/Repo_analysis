reshape 0.8.8 on CRAN says it NeedsCompilation, but it does not.
stringr dependency is only used in a sample for cast.r
It seems it's not even used in the sample (no str_ function)
It could be safely removed (no str_ function at all in your code)
As you well know, `data.table` also has a `dcast` function. There is one option that it is very helpful:

```
sep | Character vector of length 1, indicating the separating character in variable names generated during casting. Default is _ for backwards compatibility.
```
Is there a way to do the same thing with `reshape2::dcast`? I really like `reshape2` and that option for `dcast` would be really useful.
I'm running into memory allocation issues using the melt function post-Windows 10 update (KB4100347: Intel microcode updates on 8/24/18). I'm using the 64-bit version of R on a computer with 32GB RAM and trying to replicate the same data format as I was able to complete pre-Windows 10 update. I wasn't experiencing this allocation issue prior to the update, leading me to believe that the relationship between reshape2 and the new Windows update may have been compromised. 
Hi,

I am having difficulty using the sparse matrices supplied by the Matrix package with the reshape package. Example, using a `dgCMatrix`:

```
require(Matrix)
(m <- Matrix(c(0,0,2:0), 3,5))
str(m)
m[,1]
melt(m)
```

This is problematic as `igraph` by default in the `as_adj` method produces `dgCMatrix` objects, making it difficult to use with the `reshape2` package without internal conversion scripts.
When the argument 'drop' is set to FALSE,  in some cases dcast incorrectly assigns the column names.  

Note 1. I understand that the reshape2 package is retired, but I think this might be important because, if I am not mistaken, currently some data manipulation tasks, including usage of formulas, are available only true the reshape2 package and not through the newer package tidyr. 

Note2. If anyone knows an alternative way to accomplish the task mentioned in the clarifying example below I would appreciate it if they can let me know.

Example to demonstrate the issue:

a = data.frame(Year = c(2000, 2001, 2000, 2001), Country = c("A", "B", "B", NA), City = c("A1", "B1", NA, "C1"), Cost = c(10, 20, 50, 30))

print(a)

  Year Country City Cost
1 2000       A   A1   10
2 2001       B   B1   20
3 2000       B <NA>   50
4 2001    <NA>   C1   30

Now we apply the dcast function with the argument 'drop = F':

dcast(a, "Year ~ Country + City", aggregate.fun = sum, value.var = "Cost", drop = F)

Output:
  Year A_A1 A_B1 A_C1 B_A1 B_B1 B_C1 NA NA NA NA NA NA
1 2000   10   NA   NA   NA   NA   NA NA 50 NA NA NA NA
2 2001   NA   NA   NA   NA   NA   20 NA NA NA NA 30 NA

Note that the value at B_C1 at year 2001 is incorrectly mentioned to be 20. I think that is just because the columns names are mistakenly assigned.

Things look good with the argument 'drop = T'. 
dcast(a, "Year ~ Country + City", aggregate.fun = sum, value.var = "Cost", drop = T)

Output:

  Year A_A1 B_B1 B_NA NA_C1
1 2000   10   NA   50    NA
2 2001   NA   20   NA    30


Please include this German translation
reshape2/tests/testthat/test-melt.R uses an illegal-on-CRAN .Internal(inspect(x)) along with some ugliness to see if an item is an S4 object:

 object_bit_set <- function(x) {
    grepl("\\[OBJ", capture.output(.Internal(inspect(x)))[1])
  }
  t.long <- melt(t.wide, measure.vars=c("t1", "t2", "t3"), value.name="time")
  expect_true(object_bit_set(t.long$time))

I believe object_bit_set(x) is equivalent to is.object(x) and is.object is a core R function.
On StackOverflow, a [recent answer](http://stackoverflow.com/a/43005787/3358272) by G. Grothendieck mentioned an [old email of yours](https://stat.ethz.ch/pipermail/r-help/2006-January/086064.html) about an idempotent `apply`. Have you (would you?) consider adding an `iapply` to your `reshape` package?

Perhaps simply:

```r
iapply <- function (X, MARGIN, FUN, ...)  {
	dims <- c((1:length(dim(X)))[!(1:length(dim(X)) %in% MARGIN)], MARGIN)
	res <- apply(X, MARGIN, FUN, ...)

	if (length(dim(res)) == length(dims)) {
		aperm(res, order(dims))
	} else {
		res
	}	
}
```

(I added the `...` to the `apply` call since I thought it was appropriate, otherwise this is verbatim from your 2006 email.)

**Edit**: 121d0ff60eba973fd4383df620c7341f50a9041e suggests functions were moved to `plyr` (I find no use of it there), and 6058c3bfce551c700a52f56c91d0505efdc3b8ea is what actually removed `iapply` with no direct mention of why it was removed.
Margin variables "grand_row" and "grand_col" have been dropped but still show up in ?cast. 