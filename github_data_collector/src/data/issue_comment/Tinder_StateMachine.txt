Some of the state will need a timeout to go to idle or something.
How do you do that?
Can somewhere give an example?
Hi, amazing library. I'm trying to implement it in my own project.

These are my states
```
sealed class State {
    object Loading : State()
    class Success(val response: SomeDataClass) : State()
    class Failure(val exception: Exception) : State()
}

```
These are the events:
```
sealed class Event {
    class OnApiSuccess(val response: SomeDataClass) : Event()
    class OnApiFailure(val exception: Exception) : Event()
}
```

Finally this is the side effect:
```
sealed class SideEffect {
    object AfterApiSuccess : SideEffect()
    object AfterApiFailure : SideEffect()
}
```

This is the implementation of state machine:
```
val stateMachine = StateMachine.create<State, Event, SideEffect> {
    initialState(State.Loading)
    state<State.Loading> {
        on<Event.OnApiSuccess> {
            transitionTo(State.Success(it.response), SideEffect.AfterApiSuccess)
        }
        on<Event.OnApiFailure> {
            transitionTo(State.Failure(it.exception), SideEffect.AfterApiFailure)
        }
    }
    state<State.Success> { }
    state<State.Failure> { }

    onTransition {
        if (it is StateMachine.Transition.Valid) {
            when (it.sideEffect) {
                SideEffect.AfterApiSuccess ->
                    Log.e("StateMachine", "Current State is : ${it.toState.javaClass.simpleName}")
                SideEffect.AfterApiFailure ->
                    Log.e("StateMachine", "Current State is : ${it.toState.javaClass.simpleName}")
            }
        } else if (it is StateMachine.Transition.Invalid) {
            Log.e("StateMachine", "Something went wrong")
        }
    }
}
```
I have a `MutableLiveData` in my viewmodel which observes `State`
`val stateObserver: MutableLiveData<State> = MutableLiveData()`
to which I'm posting value as 
`stateObserver.postValue(stateMachine.transition(Event.OnApiSuccess(response)).fromState)`
or `stateObserver.postValue(stateMachine.transition(Event.OnApiFailure(exception)).fromState)`

And my implementation of LiveData observer is as below:
```
someViewModel.stateObserver.observe(this, Observer { state ->
            when (state) {
                is State.Loading -> {
                    progress.visibility = View.VISIBLE
                    list.visibility = View.GONE
                    error.visibility = View.GONE
                }
                is State.Success -> {
                    progress.visibility = View.GONE
                    list.visibility = View.VISIBLE
                    error.visibility = View.GONE
                    Log.e("TAG", "Response is :${state.response.results}")
                }
                is State.Failure -> {
                    progress.visibility = View.GONE
                    list.visibility = View.GONE
                    error.visibility = View.VISIBLE
                    Log.e("TAG", "Error is :${state.exception.message}")
                }
            }
        })
```
I don't what is I'm doing wrong but my app is getting stuck on loading. Help is much appreciated. Thanks. 
Hi,

As in your readme file, I would like to test the transitions:

```kotlin
assertThat(transition).isEqualTo(
    StateMachine.Transition.Valid(Solid, OnMelted, Liquid, LogMelted)
)
```

But, the "Valid" data class has an `internal` constructor so I can't access it in my tests.

What should I do ? Thanks.
First of all, thanks for this awesome library.
And I have a little question about underlying theory.
Is onEnter callback applicable for side effects (in terms of finite state machine theory)?
Or should I create a model for every side effect and perform them exclusively in onTransition callback? 
Thanks in advance.
Because I want to determine the action according to the `toState` state.
If you can I can create an extension function then I can write to flow.

ex)

If `toState` property is publish and  you define below extension
```
fun State.navigate() {
  when(this) {
     Solid -> foo
  }
}
```

we can write the following: 
```
stateMachine.transition(<SomeEvent>).toState.navigate()
```

Now we can only write the following:
```
stateMachine.run {
    transition(it)
    state.navigate()
}
```

Thank you.
any chance to set this one file library to a more open license, e.g. MIT, Apache 2, etc.? it's neat but that license makes it basically unusable to almost every commercial application. i wonder if that is truly necessary for this particular library. have a nice day
I have a use case where the state machine is governing a long running process that spans over multiple device restarts (android). Is there a way I can start the machine in a specific state (different from default initial state)?

Related to https://github.com/Tinder/StateMachine/issues/7
Hi, I wanna bounce of you a design question, since im trying to rewrite "implicit" state machine to explicit one

Usually the code looks like this

```
fun foo() {
   if (currentState == Bar) {
    doSomething()
    currentState = Quax
   }
}
```

What I usually see is people having transition function, which according to input action changes state, but however it would do so before doSomething is ran, to me which is a problem
since currentState will be observable, and subscribers expect doSomething to have ran if state is Quax

Do I need some PRE + POST_state pairs or something? Seems weird for synchronous code

What would be your solution?
As proposed in https://github.com/Tinder/StateMachine/issues/9, invalid transition should cause an exception. In my opinion, current behavior (returning `Invalid` object) is a good solution, however users should be able to enable throwing exceptions in such cases.
