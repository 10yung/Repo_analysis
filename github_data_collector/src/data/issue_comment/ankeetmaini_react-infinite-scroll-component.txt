Just attempted updating from 4.5.3 => 5.0.4 and it breaks with importing the package.

I'm using typescript 3.7.5
`import * as InfiniteScroll from "react-infinite-scroll-component";`
worked previously.

Now we get:
```
Failed to compile.
(125,12): JSX element type 'InfiniteScroll' does not have any construct or call signatures.
```
It seems that in `UNSAFE_componentWillReceiveProps`,  key and dataLength diffing was the only way to detect whether states listed above should be reset. 

This comes with the assumption that each data fetching would be done successfully and eventually result in data item increment or key change,.

While this is sometimes untrue since it occurred to me that when there are more data to be loaded, yet due to poor network condition or some other reasons, my data fetching was not done properly( just  occasionally fails ). props,states and property like dataLength,showLoader ,actionTriggered are in consequence maintained in an on-progress condition( I intended to keep previous data ), thus further retries  wouldn't be triggered anymore.

I tried to refresh the key passed down to the component after my request failed, but this would result in continuous key refresh as atBottom stays true, otherwise manual key diffing seems to be implicit and error prone.

Is there any necessity triggering a fallback method  after `next` was executed to force reset? 

Using v5.0.4

When I scroll to the bottom of my table, my `next` function is not triggering to fetch more data. If I'm wrapping `InfiniteScroll` with multiple children, how can I ensure that the scroll events are being triggered? I also tried using and id string for scrollableTarget but got an error saying that it's expecting an Element instead of String.


```import React from 'react';
import PropTypes from 'prop-types';
import classNames from 'classnames';
import { connect } from 'react-redux';
import { withTranslation } from 'react-i18next';

import InfiniteScroll from 'react-infinite-scroll-component';

import { thunks as DownloadsThunks } from 'reducers/Downloads';
import { thunks as PlayQueueThunks } from 'reducers/PlayQueue';
import ReleaseActions, { thunks as ReleaseThunks } from 'reducers/Releases';

import {
	ReleasesMenu,
	ReleaseGridCell,
	RecentlySearched,
	ReleasesTable
} from 'components';
import { MainLayout } from 'containers';


const mapStateToProps = ({ releases, setting, playQueue, global }) => ({
	releases: releases.releases,
	page: releases.page,
	totalItemsCount: releases.totalItemsCount,
	loading: releases.loading,
	isListView: setting.listView,
	playingItem: playQueue.selectedItem,
	isIpadView: global.isIpadView
});

@connect(mapStateToProps)
class ReleasesView extends React.PureComponent {
	static propTypes = {
		releases: PropTypes.arrayOf(PropTypes.object).isRequired,
		page: PropTypes.number.isRequired,
		totalItemsCount: PropTypes.number,
		loading: PropTypes.bool.isRequired,
		isListView: PropTypes.bool.isRequired,
		isIpadView: PropTypes.bool.isRequired,
		playingItem: PropTypes.object,

		t: PropTypes.func.isRequired,
		dispatch: PropTypes.func.isRequired
	}

	state = {
		isSearching: false,
		itemsPerRow: 5,
		selectedRelease: null
	}

	componentDidMount() {
		const { page, dispatch } = this.props;
		if (page === 0) {
			this.onLoadMore();
		} else {
			dispatch(ReleaseThunks.refreshList());
		}
		this.releasesScrollView = React.createRef();
		this.getItemsPerRow();
		window.addEventListener('resize', this.getItemsPerRow);
	}

	componentWillUnmount() {
		window.removeEventListener('resize', this.getItemsPerRow);
	}

	onSearchFocus = () => this.setState({ isSearching: true });

	onSearchUnfocus = () => this.setState({ isSearching: false });

	onLoadMore = () => {
		const { dispatch, page, loading } = this.props;
		if (!loading) {
			dispatch(ReleaseThunks.search(page + 1));
		}
	}

	handlePlayRelease = release => {
		const { dispatch } = this.props;
		dispatch(PlayQueueThunks.playRelease(release.releaseid));
	}

	handleDownloadRelease = release => {
		const { dispatch } = this.props;
		dispatch(DownloadsThunks.addReleaseToDownloadQueue(release));
	}
	handleShowModal = release => {
		const { dispatch } = this.props;
		dispatch(
			ReleaseThunks.getDetail(release.releaseid, releaseDetail => {
				dispatch(ReleaseActions.toggleReleaseInModal(releaseDetail));
			})
		);
	}
	getItemsPerRow = () => {
		const { isIpadView } = this.props;
		const mainWidth = document.getElementById('mainLayout').offsetWidth;
		const desktopReleaseGridSize = mainWidth > 1450 ? 260 : 300;
		const widthOfCell = isIpadView ? 250 : desktopReleaseGridSize;
		const count = Math.min(Math.floor(mainWidth / widthOfCell), 7);
		this.setState({ itemsPerRow: count });
	}

	hasMorePage = () => {
		const { releases, totalItemsCount } = this.props;
		if (totalItemsCount === null) {
			return true;
		}
		return totalItemsCount > releases.length;
	}

	setSelectedRelease = (release) => this.setState({ selectedRelease: release });

	renderReleaseGrid = () => {
		const { itemsPerRow, selectedRelease } = this.state;
		const { releases, t, isListView, playingItem, isIpadView } = this.props;

		const hasMorePage = this.hasMorePage();

		const releaseCells = releases.map((item, index) => (
			<div
				key={`${item.releaseid} ${index + 1}`}
				className={`inline-block w-1/${itemsPerRow}`}>
				<ReleaseGridCell
					isHighlighted={
						item &&
						playingItem &&
						item.releaseid === playingItem.releaseid
					}
					selectedRelease={selectedRelease}
					release={item}
					isIpadView={isIpadView}
					setSelectedRelease={this.setSelectedRelease}
					onShowModal={this.handleShowModal}
					onPlay={this.handlePlayRelease}
					onDownload={this.handleDownloadRelease} />
			</div>
		));

		return (
			<InfiniteScroll
				dataLength={releases.length}
				next={this.onLoadMore}
				hasMore={true}
				className="overflow-visible-important"
				loader={
					<h4 className="px-4 py-4 text-white">
						{t('home.release-loading')}
					</h4>
				}
				scrollableTarget={
					this.releasesScrollView && this.releasesScrollView.current
				}>
				{releases.length !== 0 &&
					(isListView ? (
						<ReleasesTable
							showMarkets
							showPlayQueueOptions
							items={releases} />
					) : (
						releaseCells
					))}
			</InfiniteScroll>
		);
	}

	renderContent = () => {
		const { isSearching } = this.state;

		const blockClasses = classNames([
			'px-8',
			'h-full',
			'w-full',
			{
				'opacity-0': isSearching,
				'opacity-100': !isSearching,
				invisible: isSearching,
				visible: !isSearching
			}
		]);

		return (
			<div className="relative flex-1">
				<div
					ref={this.releasesScrollView}
					className={blockClasses}>
					{ this.renderReleaseGrid() }
				</div>
				{
					isSearching &&
					<div className="absolute top-0 right-0 w-full h-full overflow-auto scrollbar">
						<RecentlySearched />
					</div>
				}
			</div>
		);
	}

	render() {
		const { isSearching } = this.state;
		const { isListView } = this.props;
		return (
			<MainLayout
				content={this.renderContent()}
				menu={
					<ReleasesMenu
						isSearching={isSearching}
						isListView={isListView}
						handleViewToggle={this.onViewToggle}
						handleSearchFocus={this.onSearchFocus}
						handleSearchUnfocus={this.onSearchUnfocus} />
				} />
		);
	}
}

export default withTranslation()(ReleasesView);```
As specified in types: https://github.com/ankeetmaini/react-infinite-scroll-component/blob/master/src/index.tsx#L10

Is `loader` prop required now or is it a typo in types?
fetchMoreData can not fetch
Hi!

I spent some time debugging why our infinite scrolls didn't add content and it turned out that I had missed the dataLength prop. The dataLength prop seems very important and it would be nice to see a warning or an error if it is missing. I'd be happy to submit a PR. What do you think?

Thanks 
This warning appears as I scroll down a bit within infinite-scroll component and then navigate to another page of my site.
it's related to the throttled function of scroll.
this throttled needs to be canceled on componentWillUnmount.

Any help will be appreciated!
Wishing some sort of pagination functionality so that you won't loose your position if going back to the list of items from eg. a post that was linked from the scroll list, or if you'd like to link the site to another user and get a more accurate position/page index. 
* Move data fetching code or side effects to componentDidUpdate.
* If you're updating state whenever props change, refactor your code to use memoization techniques or move it to static getDerivedStateFromProps. Learn more at: https://fb.me/react-derived-state
* Rename componentWillReceiveProps to UNSAFE_componentWillReceiveProps to suppress this warning in non-strict mode. In React 17.x, only the UNSAFE_ name will work. To rename all deprecated lifecycles to their new names, you can run `npx react-codemod rename-unsafe-lifecycles` in your project source folder.

Please update the following components: InfiniteScroll



I get this warning in my console constantly. Am I using InfiniteScroll incorrectly or this legit something that needs to be addressed?
Is this intentional? It causes a lot of inconvenience and redundant calls.

[Live Example](https://codesandbox.io/s/react-infinite-scroll-example-0ve8e)

Try scrolling down to the end then scrolling up, it will fetch more data when scrolling up.