Related issue: https://github.com/github/orchestrator/issues/874

### Description

Add ConsulScheme config variable and skip TLS verification (for now).
Fixes #874.
Hi

I'm pretty novice to Mysql & Orchestrator but since I got the work to design solution for production MySQL database which is mission critical.I researched and found that Orchestrator along with Proxy SQL & hook scripts can be best suited for requirement.

Talking about solution I want to have 

DC 1
a) Primary (Master) with VIP that application can connect & in case DB server have issue we can failover VIP to new node without making any change in application or DNS.

b) **Slave 1** :: One Lossless Semi Synchronous slave.

c) Following Two Read Replicas with Another VIP so that if one slave have sync issue. The reporting don't suffer , we will switch vip to another slave
    i) **Slave 2** ::  for reporting 
    ii) **Slave 3** :: Backups .

 **DR Side**
a) Slave 4 :: That should take over when DC  side is completely down. Can be semi synchronous (not sure)
b) Slave 5 :: Semi Synchronous to Slave 4.
c) Slave 6 & 7 would slave to slave 4.

Talking about POC

I got error in first step in preparing POC environment for DC. I make 1 master with 2 slave (1 semi synchronous & 1 normal)

First of all i like orchestrator interface and its accuracy in detecting the failure 

But it can't failover automatic for me. May be i'm naive and did some misconfig. I have one question to ask 
a)  i was initially following the link https://medium.com/searce/design-a-highly-available-mysql-clusters-with-orchestrator-and-proxysql-in-gcp-part-2-7868d8db75d0 .

But when reached the end i found that hook scripts & vip scripts are not production ready and have some part missing in them.

Are the hook scripts (PreFailover & Post Failover) Necessary to have it & if we don't have will orchestrator not move to Automatic Recovery.  

I, remember some where in documentation it is written have to use some script so i thought about the flow of script.

For making hook scripts i feel like if master go down. PreFailover script should check
a) All Slave status & last gtid executed.
b)All slave read_only or not.
c) Have semi synchronous slave or not, If have & gtid executed are consistent then promote semi synchronous first, if  gtid_executed of semi synchronous is far behind then check among other slaves and make decision.
d) select name for slave to promote.

then orchestrator promote it

Post Failover 
a) turn new master to read write.
b) Redirect remaining slaves to new master
c) consistency checks.

I may be wrong in some of the steps but please guide if architecture/steps would have some flaw that i have overlooked.

[orchestrator.conf.json.txt](https://github.com/github/orchestrator/files/4068983/orchestrator.conf.json.txt)

ProxySQL i think should be used for Master vip relocation ?

Can we have separated vip for reporting that can be relocated in case of issue?

please guide me.


https://github.com/github/orchestrator/blob/17485ac9d32a70c997be21077bfe6c1544e82880/go/inst/instance_topology_dao.go#L1043

here instance maybe nil pointer，because no error handler for 

https://github.com/github/orchestrator/blob/17485ac9d32a70c997be21077bfe6c1544e82880/go/inst/instance_topology_dao.go#L1039

cc @yangeagle
https://github.com/github/orchestrator/blob/17485ac9d32a70c997be21077bfe6c1544e82880/go/logic/topology_recovery_dao.go#L246

the above line's topologyRecovery maybe be nil due to the following line。

https://github.com/github/orchestrator/blob/17485ac9d32a70c997be21077bfe6c1544e82880/go/logic/topology_recovery_dao.go#L196

so there is no need to raft sync when topologyRecovery is nil, pls check。

cc @yangeagle

Please help
First start orchestrator is sucess,but when I kill the orchestrator process and restart ,
Tips：FATAL Failed to parse gcfg data from file: invalid section: section "mysql"
orchestrator version：3.1.3
OS ：ubuntu 18.04.1
mysql version :5.7.28
![image](https://user-images.githubusercontent.com/35521643/70785718-07370d80-1dc6-11ea-930b-32c8a9de7b72.png)


https://github.com/github/orchestrator/blob/855e930e89c0cf7934a4bd05281cc010c9cde589/go/inst/instance_topology.go#L692-L695

"if replicaErr != nil && movedReplica != nil {" seems like should be 

"if replicaErr == nil && movedReplica != nil {" ?

what's the original thought here?

cc @yangeagle
Hi,
We have few cases of the following replication flow with GTID enabled: 
Master(R/W)---> Slave2(R/O),
Master(R/W)---> Slave3(R/W)-->Slave4(R/O)

On Slave3 we have an application that writes to deddicated DB on it and it's being replicated to Slave4 . We understand that slave3 can't replace the master ,but still Orchestrator identify these writes as errant transactions . 
Can we somehow filter these cases(like Slave3) and not get alerts for it ?  


When using the aggregation mode, the display alias feature display the wrong title: it displays a bogus alias instead of the expected text.

The reason is that the aggregation code is modifying the title of the instance but not its alias.

PR on the way.

If master alive time is too long， master's gtid_slave_pos  does not exist slave binlog

testing only