This pull requests adds a new target that builds ASCIImage as a framework for OS X. This is useful to use tools like Carthage https://github.com/Carthage/Carthage to pull it into a project.

I renamed the two app targets, to be able to use the plain `ASCIImage` for the framework name.

Perhaps this is beyond the realm of ASCIIImage, but it would be awesome to be able to animate between two (or more) ascii images. It would make the creation of things like this easier:

https://github.com/jonathantribouharet/JTHamburgerButton

![example](https://cloud.githubusercontent.com/assets/1590436/7044110/c498dc24-dde7-11e4-99ca-50c636d76b93.gif)

https://github.com/sebastienwindal/FRDLivelyButton

![screenshot-3](https://cloud.githubusercontent.com/assets/1590436/7044123/ed1b86ce-dde7-11e4-87a6-c7dbac32c0ab.gif)

See comment from @milen-me : https://github.com/cparnot/ASCIImage/issues/6#issuecomment-86984508

I started using ASCIIImage with some Apple Watch code and noticed that the automatic scaling done by the current code will be done based on the current device scale, which can be wrong if running in the watch extension. For instance, if running on iPhone 6+, you'll get a 3x image, when you actually need 2x.

There are methods normally exposed only for tests that have a scaleFactor parameter that can be used as a workaround, but the naming can be confusing and there is the issue #1 that needs to be taking into account.

Paths need not be contiguous and having composite paths are necessary to have shapes with holes in them. Personally, I think all paths in one ASCII representation should be part of one path and you would use multiple paths/representations for separate shapes. But if you want to work it all into a single rep then that's your choice.

I think it makes more sense to have the parsing code in a NSBezierPath category. You can keep the API on NS/UIImage as a wrapper around this but it allows this to be used in other drawing contexts.

It would be wonderful to have ASCIImage as an Xcode plug-in, perhaps utilising Monodraw - http://monodraw.helftone.com

So a user could:
• hit a key-combo
• draw image
• hit return
• have a ASCIIImage method written, with perfect iOS 8 style lines

![mono-ascii](https://cloud.githubusercontent.com/assets/1590436/6799848/18819d7c-d211-11e4-9d76-a59613b40739.png)

The endless tyranny of relying on designers and photoshop would be finished. The dawn bell would mark the hour of liberation, and the soothing light of justice would flood over the horizon. In the far future, when our own humble sun explodes, and when giant spaceships send our descendants into space to populate the universe, they will carry with them the memory of when ASCIIImage was made into an Xcode plugin. Something like that anyway.

The aim of this issue is to get the discussion started on a point that, I think we all agree, would be pretty useful: finding some implementation-independent method to define context/path metadata (i.e. both default and per-path overrides of fill color, stroke color and stroke width, aliasing/anti-aliasing, and open/closed path choices).

A possibility would be a JSON or YAML snippet holding a simple map having keys `default`, `element0`, ... `elementN` (or something similar), and with values maps of the properties to their values.

This does have the downside that more sophisticated selections (e.g. "if index is less than 2 or higher than 16") are not possible; a solution would be to allow keys in the hash to be arrays or ranges or something similar.

- Adds an optional relative scale parameter to the image context handler.
- Also fixes a compilation error in a scenario where source is being built without Foundation.h coming in via prefix header.
