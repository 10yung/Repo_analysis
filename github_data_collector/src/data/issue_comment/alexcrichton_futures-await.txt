After upgrading to 1.34.0-nightly, this compiler have following message and stopped. 
```
error[E0599]: no method named `resume` found for type `T` in the current scope
   --> /Users/shisoft/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-await-0.1.1/src/lib.rs:120:35
    |
120 |             match unsafe { self.0.resume() } {
    |                                   ^^^^^^
    |
    = help: items from traits can only be used if the trait is implemented and in scope
    = note: the following trait defines an item `resume`, perhaps you need to implement it:
            candidate #1: `std::ops::Generator`

error[E0599]: no method named `resume` found for type `T` in the current scope
   --> /Users/shisoft/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-await-0.1.1/src/lib.rs:140:37
    |
140 |             match unsafe { self.gen.resume() } {
    |                                     ^^^^^^
    |
    = help: items from traits can only be used if the trait is implemented and in scope
    = note: the following trait defines an item `resume`, perhaps you need to implement it:
            candidate #1: `std::ops::Generator`

error: aborting due to 2 previous errors

For more information about this error, try `rustc --explain E0599`.
error: Could not compile `futures-await`.
warning: build failed, waiting for other jobs to finish...
error: build failed
```

I know this crate is under maintaining mode. Just asking suggestions for migrate to rust built-in features to move on.
Thanks
This PR upgrades the code to latest Rust nightly.

* Fixed compilation errors in tests.
* Removed stabilized and subsumed feature flags.
* Switched to 2018 edition.
* Simplified `stream_yield` macro.
* Formatted the code with rustfmt
* Fixed breakage caused by move of generators to Pin API.
This crate has been in maintenance mode (and pitifully maintained) for several months. However, at this point, I think it might be time to straight deprecate it. There are now bridges between the futures 0.3 version (which is used by the async/await native syntax) and the futures 0.1 version (which is used by libraries like tokio and hyper) provided in the [tokio-async-await](https://crates.io/crates/tokio-async-await) crate.

So I'm asking: are you still using this crate? If so, what is stopping you from moving to native syntax?
I realize this crate is legacy, but at the moment it's the best way to write async software if you depend on anything from crates.io, which is basically every useful program one might want to write. Also, this could be a much bigger issue with proc macros that surely needs reporting, so, sometimes when developing a new program the compiler spits out error messages like this,

This happens on rustc 1.30.0-nightly (73c78734b 2018-08-05) and ever other version of nightly I tried (which believe me is quite a few more than I want to list)

```
error[E0507]: cannot move out of borrowed content

error[E0597]: borrowed value does not live long enough
   --> src/protocol.rs:339:5
    |
339 |     #[async]
    |     ^^^^^^^-
    |     |      |
    |     |      temporary value only lives until here
    |     temporary value does not live long enough
    |     borrow later used here

error: aborting due to 2 previous errors
```

This is almost completely useless, and I have to say, intensely frustrating. The horrible thing about this problem is that sometimes the error message is completely reasonable, and I have yet to identify a small example that triggers the behaviour, it doesn't seem to happen in small projects, but once a project crosses some complexity threshold the error context is getting totally clobbered by either async await, or proc macro. Another example, even more frustrating,

```
error[E0308]: match arms have incompatible types
  |
  = note: expected type `std::result::Result<protocol::Client, _>`
             found type `std::result::Result<(), _>`

error[E0308]: mismatched types

error: aborting due to 2 previous errors
```

That was the entire error message. It could be anywhere in the crate. Or even worse,

```
error[E0308]: mismatched types

error: aborting due to previous error

For more information about this error, try `rustc --explain E0308`.
```

This one happened to be a u64 vs i64 type mismatch in a function call. The function expected i64 and was being passed a u64. The function being called wasn't async, but the caller was.

Barring a simple example, I can make the code available, it's only about 400 lines, just let me know.

This crate uses the proc-macro APIs, which have been going through a lot of churn as they prepare for stabilization. As a result, its been broken a lot - more often than not probably - on recent nightlies.

Now that async/await is being implemented in the compiler, this is basically a deprecated legacy API. As a result, my focus (and Alex's) has not been on getting this crate to build again, leaving it broken for too long at a time. But of course there are definitely users who depend on this crate and can't upgrade to the built-in feature yet.

So I'm wondering: does anyone want to take on responsibility for keeping this code green? The proc macro APIs are supposed to stabilize soon, so hopefully once that happens it will go back to being fairly stable.
I can not successfully compile the basic await! example on the readme.
```bash
$ rustc --version
rustc 1.29.0-nightly (1ecf6929d 2018-07-16)
```

My first attempt to compile it gave me this compilation error:

```bash
error[E0658]: macro await! is unstable (see issue #50547)========>       ] 8/9: check_await                                                                                                                        
  --> src/main.rs:11:12
   |
11 |     Ok(1 + await!(bar())?)
   |            ^^^^^^^^^^^^^
   |
   = help: add #![feature(await_macro)] to the crate attributes to enable
```
According to the information in the error message, I added `#![feature(await_macro)]`. Later I also added `#![feature(custom_attribute)]`, to obtain this source file:

main.rs
```rust
#![feature(proc_macro, generators)]
#![feature(await_macro)]
#![feature(custom_attribute)]

extern crate futures_await as futures;

use futures::prelude::{await, async};

#[async]
fn foo() -> Result<i32, i32> {
    Ok(1 + await!(bar())?)
}

#[async]
fn bar() -> Result<i32, i32> {
    Ok(2)
}

fn main() {
    assert_eq!(foo().wait(), Ok(3));
}
```

Cargo.toml:
```toml
[package]
name = "check_await"
version = "0.1.0"
authors = ["real"]

[dependencies]
futures-await = "0.1"
```

Compilation errors:

```bash
$ cargo build
   Compiling check_await v0.1.0 (file:///home/real/temp/check_await)                                                                                                                                               
error[E0432]: unresolved import `futures::prelude::await`========>       ] 8/9: check_await                                                                                                                        
 --> src/main.rs:7:24
  |
7 | use futures::prelude::{await, async};
  |                        ^^^^^ no `await` in `prelude`

error[E0432]: unresolved import `futures::prelude::async`
 --> src/main.rs:7:31
  |
7 | use futures::prelude::{await, async};
  |                               ^^^^^ no `async` in `prelude`. Did you mean to use `Async`?

warning: unused imports: `async`, `await`
 --> src/main.rs:7:24
  |
7 | use futures::prelude::{await, async};
  |                        ^^^^^  ^^^^^
  |
  = note: #[warn(unused_imports)] on by default

error[E0277]: the trait bound `std::result::Result<i32, i32>: std::future::Future` is not satisfied
  --> src/main.rs:11:12
   |
11 |     Ok(1 + await!(bar())?)
   |            ^^^^^^^^^^^^^ the trait `std::future::Future` is not implemented for `std::result::Result<i32, i32>`
   |
   = note: required by `std::future::poll_in_task_cx`
   = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)

error[E0277]: the trait bound `std::result::Result<i32, i32>: std::future::Future` is not satisfied
  --> src/main.rs:11:12
   |
11 |     Ok(1 + await!(bar())?)
   |            ^^^^^^^^^^^^^ the trait `std::future::Future` is not implemented for `std::result::Result<i32, i32>`
   |
   = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)

error[E0627]: yield statement outside of generator literal
  --> src/main.rs:11:12
   |
11 |     Ok(1 + await!(bar())?)
   |            ^^^^^^^^^^^^^
   |
   = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)

error[E0599]: no method named `wait` found for type `std::result::Result<i32, i32>` in the current scope
  --> src/main.rs:20:22
   |
20 |     assert_eq!(foo().wait(), Ok(3));
   |                      ^^^^

error: aborting due to 6 previous errors

Some errors occurred: E0277, E0432, E0599, E0627.
For more information about an error, try `rustc --explain E0277`.
error: Could not compile `check_await`.                                                                                                                                                                            

To learn more, run the command again with --verbose.
```

Is there anything I can do to resolve these issues?
I realise that this isn't really about async/await itself, but using it in surrounding code made me question my instincts, so I figured I'd open a discussion...

I want to write some code along the lines of:

```rust
fn foo(&self) -> impl Future<...> {
  if let Some(early_value) = self.check() {
    // Doesn't compile because Ok is a Result, but function returns an `impl Future`.
    // Need to return a futures::future::ok(early_value) instead.
    return Ok(early_value);
  }

  // Doesn't compile because the ? operator can't be used in a function which returns an impl Future.
  // Need to explicitly match and early-return instead.
  let request = self.prepare_request()?;

  // Clone value out because borrows aren't allowed in async_blocks.
  let client = self.client.clone();

  async_block! {
    let response = await!(client.make_request(request));
    await!(parse(response))
  }
}
```

There are three big things that stop me from being able to do this today; the two things commented on in the code, and that my function returns an `impl Future`, but after making the two changes in the comments, I'm no longer returning one unique anonymous `Future` type, so I need to `Box` everything up rather than returning an `impl Trait`.

My instinct is that my `async_block` should be as short as possible, because minimising the scope where the reader needs to consider asynchrony feels good. But if I'd moved the lines before the client cloning as-is into the `async_block`, the code would compile fine (modulo the`self` borrows), because the `async_block` itself _does_ effectively return a `Result`.

Is my instinct to minimise the size of `aync_block`s wrong? Is there a more ergonomic way of doing what I'm doing without enlarging the `async_block`?

Thanks!
Hi,
It seems like the nightly rust have already built in `await` macro which conflict with this crate. 
Is there any suggestion to resolve this problem before futures 0.3 was settled?

Thanks

> error[E0659]: `await` is ambiguous
>    --> src/raft/client.rs:152:5
>     |
> 152 |     #[async(boxed)]
>     |     ^^^^^^^^^^^^^^^
>     |
> note: `await` could refer to the name imported here
>    --> src/raft/client.rs:20:5
>     |
> 20  | use futures::prelude::*;
>     |     ^^^^^^^^^^^^^^^^^^^
>     = note: `await` is also a builtin macro
>     = note: consider adding an explicit import of `await` to disambiguate
> 
I'm a new-comer to rust, particularly to futures and async/await; however, I'm pretty familiar with coroutines and some of the javascript libraries like async-parallel.

I'm aiming to call 2 (or N) long-running async functions, and wait for them both to finish before continuing.

I did a fair bit of googling, and couldn't find any examples in rust of something along these lines  in rust.

Here's how one might do it in javascript...
```js
async.parallel({
    one: function(callback) { callback(null, 'done1\n'); },
    two: function(callback) { callback(null, 'done2\n'); }
}, function(err, results) {
    // now we can continue
});
```

Or in golang...
```go
    messages := make(chan int)

    go func() {
        time.Sleep(time.Second * 3)
        messages <- 1
        done <- true
    }()
    go func() {
        time.Sleep(time.Second * 2)
        messages <- 2
        done <- true
    }() 
    for i := 0; i < 2; i++ {
        <-done
    }

   // now we can continue
```

Any chance we could add an example of this to the documentation?
As per the title. The only occurrence of `async_stream_block` I can find in the source is in its definition.