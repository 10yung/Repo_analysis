fmt library support compile-time format error checking using FMT_STRING.
can spdlog enable this?
spdlog has a `formatter` interface which one can implement to create custom formatters. This is not needed however for most cases if one needs only a minor change or addition to the `pattern_formatter`. 

Currently, the `pattern_formatter` has a hardcoded `switch` in `pattern_formatter::handle_flag_` to create `flag_formatter`s by flag-character which isn't really extensible.

I propose the following changes:

1. Instead of the hardcoded switch, store character -> flag_formatter somehow (maybe a char -> "create"-function in a map or something similar)

2. Create a _public_ api to allow clients to register their own flags.


This would make it possible to implement a _minor_ change or addition without the need to write a whole new `formatter` and reimplement what's already existing in the `pattern_formatter`.
Hello,

I'm updating the spdlog package for Debian and I'm no longer easily able to run the tests against the installed headers due to the removal of the standalone `tests/Makefile`.

Here is the current setup
```
# this is after copying the contents of the tests directory from the libspdlog-dev package to the # temporary working directory
cmake -DSPDLOG_BUILD_TESTS=ON -DSPDLOG_BUILD_TESTS_HO=ON .
make CFLAGS=-DSPDLOG_FMT_EXTERNAL
make test
```

And the current result

```
-- The CXX compiler identification is GNU 9.2.1
-- Check for working CXX compiler: /usr/bin/c++
-- Check for working CXX compiler: /usr/bin/c++ -- works
-- Detecting CXX compiler ABI info
-- Detecting CXX compiler ABI info - done
-- Detecting CXX compile features
-- Detecting CXX compile features - done
-- Found PkgConfig: /usr/bin/pkg-config (found version "0.29") 
-- Checking for module 'libsystemd'
--   Found libsystemd, version 242
CMake Warning (dev) in CMakeLists.txt:
  No cmake_minimum_required command is present.  A line of code such as

    cmake_minimum_required(VERSION 3.13)

  should be added at the top of the file.  The version specified may be lower
  if you wish to support older CMake versions for this project.  For more
  information run "cmake --help-policy CMP0000".
This warning is for project developers.  Use -Wno-dev to suppress it.

-- Configuring done
CMake Warning (dev) at CMakeLists.txt:58 (add_executable):
  Policy CMP0028 is not set: Double colon in target name means ALIAS or
  IMPORTED target.  Run "cmake --help-policy CMP0028" for policy details.
  Use the cmake_policy command to set the policy and suppress this warning.

  Target "spdlog-utests-ho" links to target "spdlog::spdlog_header_only" but
  the target was not found.  Perhaps a find_package() call is missing for an
  IMPORTED target, or an ALIAS target is missing?
This warning is for project developers.  Use -Wno-dev to suppress it.

-- Generating done
-- Build files have been written to: /tmp/autopkgtest.u6TQBq/autopkgtest_tmp/tests
Scanning dependencies of target spdlog-utests
[  2%] Building CXX object CMakeFiles/spdlog-utests.dir/test_file_helper.o
In file included from /usr/include/spdlog/common.h:38,
                 from /usr/include/spdlog/spdlog.h:12,
                 from /tmp/autopkgtest.u6TQBq/autopkgtest_tmp/tests/includes.h:17,
                 from /tmp/autopkgtest.u6TQBq/autopkgtest_tmp/tests/test_file_helper.cpp:4:
/usr/include/spdlog/fmt/fmt.h:22:10: fatal error: bundled/core.h: No such file or directory
   22 | #include "bundled/core.h"
      |          ^~~~~~~~~~~~~~~~
compilation terminated.
```

```

Hi,

Firstly, thank you for a great library! :-)

We are using it for storing the logging information using the UTF-8 format, but sometimes the tools we are using (on Windows) for viewing the logs don't show the specific characters correctly, when the UTF-8 encoding is not recognized or manually set. It would be very helpfull, if the log file could contain a 3-byte UTF-8 identifier (BOM), that would suggest the tools the encoding of the content.

@gabime, would this be something you could be willing to include into your repo? If so, I would be willing to contribute in getting it done.

So far, I've made a fork of your repo and implemented this functionality into a branch and verified everything works fine. As you can see at https://github.com/martinjansa/spdlog/commit/ff5495ee2bc2d925c4907f951db2472b95c2fc9c, the interface is fully backwards compatible. 

Is it going the right way? If so, how shall we proceed further?

Thank you,

Martin
Tested using VS2017.

To reproduce:

```cpp
#include <iostream>
#include <spdlog/spdlog.h>
#include <spdlog/sinks/basic_file_sink.h>
#include <windows.h>

int main()
{
	// use Bash from Git for Windows
	//
	// $ touch app.log
	// $ tail -f app.log

	auto file_logger = spdlog::basic_logger_mt("default", "app.log");
	spdlog::set_default_logger(file_logger);
	
	spdlog::flush_every(std::chrono::seconds(1));

	spdlog::info("first");

	// change system time to an earlier point, then press enter
	//
	// C:\>time 10:00

	getchar();

	// then you won't see this line

	spdlog::info("second");

	for (;;) { Sleep(1000); }
	return 0;
}
```

Similar to issue #609. But caused by MSVC's buggy implementation of `std::condition_variable::wait_for`. (According to [cppreference](https://en.cppreference.com/w/cpp/thread/condition_variable/wait_for), this function must use a *steady* clock.)

File `periodic_worker-inl.h`:

```cpp
SPDLOG_INLINE periodic_worker::periodic_worker(const std::function<void()> &callback_fun, std::chrono::seconds interval)
{
    active_ = (interval > std::chrono::seconds::zero());
    if (!active_)
    {
        return;
    }

    worker_thread_ = std::thread([this, callback_fun, interval]() {
        for (;;)
        {
            std::unique_lock<std::mutex> lock(this->mutex_);
            // â†“ THIS LINE
            if (this->cv_.wait_for(lock, interval, [this] { return !this->active_; }))
            {
                return; // active_ == false, so exit this thread
            }
            callback_fun();
        }
    });
}
```

I try to replace `std::mutex` & `std::condition_variable` to `CRITICAL_SECTION` & `CONDITION_VARIABLE`, then the problem disappears.


This is an updated version of @fegomes PR from last year.  I made an effort to give as much credit as possible by merging in his code before updating and modifying it.

I updated the implementation to adhere to the current coding standards, added test, and added support for alignment of custom tags.  Your hesitations to accept the MR may still be valid but I thought I would open a new MR for others to see there is an implementation that compatible with the current Feb2019 spdlog.

These changes allows to use custom types as thread identifiers to get more information inside formatters.
I faced with problem in spdlog when I tried to print thread names, which were named by pthread_setname_np function. Because thread identifiers (under Linux) received by syscall there is no way to get pthread identifier to use it in pthread_getname_np function. But now thread identifiers can have any type, can be received from any function and can be printed with any custom code (this is the most confusing one).
Some examples (all in tweakme.h):
_to use pthread on Linux_
`#define SPDLOG_CUSTOM_THREAD_T pthread_t`
`#define SPDLOG_CUSTOM_THREAD_ID_GETTER pthread_self()`
SPDLOG_CUSTOM_THREAD_ID_PRINTER can be not defined if pthread_t is integral, but if it is not then this macro can be defined but be empty - in case if you don't want to use pattern formatter

_to show what you can do with this_
`struct custom_thread_t
{
    some_type some_variable;
    int value = 42;
};`
`#define SPDLOG_CUSTOM_THREAD_T custom_thread_t`
`#define SPDLOG_CUSTOM_THREAD_ID_GETTER custom_thread_t()`
`#define SPDLOG_CUSTOM_THREAD_ID_PRINTER { fmt_helper::append_int(msg.thread_id.value, dest); }`

I think you should look at this as just a suggestion of using custom thread types, because I hope someone have better ideas to implement this. This feature will be really useful.
Hi,

I'm curious to know if there is any implementation of sink in SPDLOG based on Windows event log. I will be grateful if anyone let me know.

Thanks
spdlog uses std::condition_variable. However std::condition_variable does not use monotonic timer. 
It means that when system clock is changed, it does not work expectedly.


One solution is using pthread with `pthread_condattr_setclock(&m_attr, CLOCK_MONOTONIC);` instead of std::thread. 
https://stackoverflow.com/questions/51005267/how-do-i-deal-with-the-system-clock-changing-while-waiting-on-a-stdcondition-v


Hello,

it seems like there is a problem with daylight saving time, because the method `spdlog::sinks::daily_file_sink::next_rotation_tp_()` just adds 24 hours on return.

Kind regards
Mario
