Fixes #99
https://jakearchibald.com/2017/async-iterators-and-generators/
Similar to https://github.com/sindresorhus/is/issues/95, but this is more of a feature request: `.oneOf` method that allows you to check a value against multiple predicates.

I've implemented it by doing the following:
```js
is.oneOf = (item, predicatesArray) => {
  return predicatesArray.some(predicate => predicate(item));
}
```

To use it:
```js
it("uses is predicates for a true match", () => {
      expect(is.oneOf("hi", [is.function, is.string, is.object])).toEqual(true);
    });
```

Uses the typescript v3.7 feature `asserts value is T` to create `assert` variants of the `is` type guards. The assertions are used to narrow types at compile time, and to throw `TypeError` at runtime for values which are not of the correct type.

```typescript
import {assert} from '@sindresorhus/is';

assert.string(foo);
```

- Each method in `is` is wrapped and mirrored in `assert`.
- Tests for `is` are duplicated for `assert`.

Notes

- The explicit typing in `interface Assert` is required for typescript to acknowledge the assertions.
- Due to the assertions requiring explicit typing, using ` property for is.assert.string()` (and so on) would require using `namespace is`, which was removed in #78. This also means that `assert` needs to be exported separately.
- Custom descriptions are used to enhance some assertion error messages. The value is not included in the error message.
- Could perhaps use Node.js' fitting `AssertionError` on the server-side, but it would require an `import`.

Fixes #91.

See

- https://github.com/sindresorhus/is/issues/91
- https://www.typescriptlang.org/docs/handbook/release-notes/typescript-3-7.html#assertion-functions
- https://github.com/microsoft/TypeScript/pull/32695
A new typescript language feature is slated for the [v3.7.0 milestone](https://github.com/microsoft/TypeScript/milestone/98): `asserts`. I think adding new [`asserts value is T`](https://github.com/microsoft/TypeScript/pull/32695) variants of the type guard-enabled functions in `is` would be very useful. It would reduce the often repetitive "if-not-typeof-throw" pattern to a single line, while narrowing types.

Example implementation:

```typescript
is.assertedString = (value: unknown): asserts value is string {
  if (!is.string(value)) {
    throw new TypeError("Not a string.");
  }
}
```

<details>Without asserts:

```typescript
function f(input: unknown) {
  if (!is.string(input)) {
    throw new TypeError("Not a string.");
  }
  // input has type string here.
}
```
</details>

With asserts:

```typescript
function f(input: unknown) {
  is.assertedString(input);
  // input has type string here.
}
```

Function naming to be discussed.

Please see https://github.com/sindresorhus/type-fest/issues/10
<!-- Issuehunt Badges -->

[<img alt="Issuehunt badges" src="https://issuehunt.io/r/sindresorhus/is/issues/81/badge.svg" />](https://issuehunt.io/r/sindresorhus/is/issues/81)

<!-- /Issuehunt Badges -->

It would be nice if this worked:

```ts
const a = foo();
const b = bar();

// Both `a` and `b` is an `object`, but TS only knows they're `any`.

if (is.all(is.object, a, b)) {
	// `a` and `b` is now known by TS as `object`
}
```
<!-- Issuehunt content -->



> There is a $30.00 open bounty on this issue. Add more on [Issuehunt](https://issuehunt.io/r/sindresorhus/is/issues/81).
> - Checkout the [Issuehunt explorer](https://issuehunt.io/r/sindresorhus/is/) to discover more funded issues.
> - Need some help from other developers? [Add your repositories](https://issuehunt.io/r/new) on Issuehunt to raise funds.


<!-- /Issuehunt content-->
In some cases `is.instanceof` doesn't work and we need to use duck typing.

Something like

```js
is.equivalent(objectBeingTested, [members, to, look, for]): boolean;
```

Used like this:

```js
if (!is.equivalent(myAnimal, [Animal.name, Animal.species, Animal.size]))
  throw Error("Not an animal!");
```

I'm not sure what is the best method signature, but you get the idea.

I'm also not sure what is the best name, `is.equivalent()` is maybe incorrect as that implies testing two objects that are fully equivalent. Maybe something like `is.duckTypeof()`, `is.duckType()`, `is.ducktype()`.