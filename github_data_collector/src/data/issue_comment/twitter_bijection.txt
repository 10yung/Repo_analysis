Updates [org.apache.hbase:hbase](http://hbase.apache.org) from 0.94.27 to 0.99.2.


I'll automatically update this PR to resolve conflicts as long as you don't change it yourself.

If you'd like to skip this version, you can just close this PR. If you have any feedback, just mention me in the comments below.

Have a fantastic day writing Scala!

<details>
<summary>Ignore future updates</summary>

Add this to your `.scala-steward.conf` file to ignore future updates of this dependency:
```
updates.ignore = [ { groupId = "org.apache.hbase", artifactId = "hbase" } ]
```
</details>

labels: semver-minor
Updates [org.apache.avro:avro](http://avro.apache.org) from 1.7.7 to 1.9.1.


I'll automatically update this PR to resolve conflicts as long as you don't change it yourself.

If you'd like to skip this version, you can just close this PR. If you have any feedback, just mention me in the comments below.

Have a fantastic day writing Scala!

<details>
<summary>Ignore future updates</summary>

Add this to your `.scala-steward.conf` file to ignore future updates of this dependency:
```
updates.ignore = [ { groupId = "org.apache.avro", artifactId = "avro" } ]
```
</details>

labels: semver-minor
The many modules, especially those with scala dependencies, create pains to publish new versions (e.g. #285 ) since we need all the scala library dependencies to be published first.

I think we should reverse the dependency graph: if bijection-util is useful, it should be merged into the util repo. Similarly with scrooge.

cc @mosesn 
Updates [com.google.protobuf:protobuf-java](http://code.google.com/p/protobuf) from 2.4.1 to 2.6.1.


I'll automatically update this PR to resolve conflicts as long as you don't change it yourself.

If you'd like to skip this version, you can just close this PR. If you have any feedback, just mention me in the comments below.

Have a fantastic day writing Scala!

<details>
<summary>Ignore future updates</summary>

Add this to your `.scala-steward.conf` file to ignore future updates of this dependency:
```
updates.ignore = [ { groupId = "com.google.protobuf", artifactId = "protobuf-java" } ]
```
</details>

labels: semver-minor
This blocks chill https://github.com/twitter/chill/issues/316 which blocks Spark 2.13 support
This [commit](https://github.com/twitter/util/commit/b87f9d19ac7571b7404a9d05016f7b51620d3ab1) in twitter-util removed `NonFatal` from `com.twitter.util` in favor of the version from `scala.util.control`.

Unfortunately FuturePoolJavaFutureConverter (and perhaps other places as well) relies on the version from `com.twitter.util` (which no longer exists) leading to `NoClassDefFoundError` exceptions at runtime.
I am getting an error where the consumer fails to invert when the producer uses old schema and consumer uses new schema
I have a producer still producing using old schema. Our schemas are backwards compatible. Only the consumers have been updated to use the new backwards compatible schema
The consumer fails with exception. 

Exception in thread "main" com.twitter.bijection.InversionFailure: Failed to invert: [B@644baf4a
	at com.twitter.bijection.InversionFailure$$anonfun$partialFailure$1.applyOrElse(InversionFailure.scala:43)
	at com.twitter.bijection.InversionFailure$$anonfun$partialFailure$1.applyOrElse(InversionFailure.scala:42)
	at scala.runtime.AbstractPartialFunction.apply(AbstractPartialFunction.scala:33)
	at scala.util.Failure.recoverWith(Try.scala:172)
	at com.twitter.bijection.Inversion$.attempt(Inversion.scala:30)
	at com.twitter.bijection.avro.BinaryAvroCodec.invert(AvroCodecs.scala:278)
	at com.twitter.bijection.avro.BinaryAvroCodec.invert(AvroCodecs.scala:269)
	at twitter_bijection.AvroConsumer.main(AvroConsumer.java:57)
Caused by: java.io.EOFException
	at org.apache.avro.io.BinaryDecoder.ensureBounds(BinaryDecoder.java:473)
	at org.apache.avro.io.BinaryDecoder.readInt(BinaryDecoder.java:128)
	at org.apache.avro.io.BinaryDecoder.readIndex(BinaryDecoder.java:423)
	at org.apache.avro.io.ResolvingDecoder.doAction(ResolvingDecoder.java:290)
	at org.apache.avro.io.parsing.Parser.advance(Parser.java:88)
	at org.apache.avro.io.ResolvingDecoder.readIndex(ResolvingDecoder.java:267)
	at org.apache.avro.generic.GenericDatumReader.readWithoutConversion(GenericDatumReader.java:179)
	at org.apache.avro.generic.GenericDatumReader.read(GenericDatumReader.java:153)
	at org.apache.avro.generic.GenericDatumReader.readField(GenericDatumReader.java:232)
	at org.apache.avro.generic.GenericDatumReader.readRecord(GenericDatumReader.java:222)
	at org.apache.avro.generic.GenericDatumReader.readWithoutConversion(GenericDatumReader.java:175)
	at org.apache.avro.generic.GenericDatumReader.read(GenericDatumReader.java:153)
	at org.apache.avro.generic.GenericDatumReader.read(GenericDatumReader.java:145)
	at com.twitter.bijection.avro.BinaryAvroCodec$$anonfun$invert$3.apply(AvroCodecs.scala:281)
	at com.twitter.bijection.avro.BinaryAvroCodec$$anonfun$invert$3.apply(AvroCodecs.scala:279)
	at com.twitter.bijection.Inversion$$anonfun$attempt$1.apply(Inversion.scala:30)
	at scala.util.Try$.apply(Try.scala:161)
	... 4 more
I had to go back to Java in some projects... I had to used AWS library and he return Future (java future), this is not cool... i'm using Spring Boot 2.0 with Netty and to take benefit in using this stack, i needed convert Future (from AWS library) to CompletableFuture, follow in https://github.com/renanpalmeira/alfred/blob/master/alfred-templates/src/main/scala/com/alfred/templates/conversions/Conversions.scala#L35-L50, this is a relevant PR to add in bijection library? 

Also i created bijections to reactive types of Reactor library (a reactive library for Spring Boot) https://github.com/renanpalmeira/alfred/blob/master/alfred-templates/src/main/scala/com/alfred/templates/conversions/Conversions.scala#L13-L33 and if is relevant follow link about types (Flow and Mono) of Reactor https://spring.io/blog/2016/04/19/understanding-reactive-types#reactive-apis

Sorry if this a idiot issue for contribute to library  :sweat_smile:

Thanks, 

* [ ] Go between Java SQL APIs to JSR-310 APIs: 
```
java.sql.Date <=> java.time.LocalDate
java.sql.Time <=> java.time.LocalTime
java.sql.Timestamp <=> java.time.Instant
```
* [ ] Go between legacy Java date APIs to JSR-310 APIs
```
java.util.Date <=> java.time.LocalDate
java.util.TimeZone <=> java.time.ZoneId
```
* [ ] Go between Scala's Duration to JSR 310 Duration
```
scala.concurrent.Duration <=> java.time.Duration
```

Anything else?

Cats have [InjectionK](https://github.com/typelevel/cats/blob/master/core/src/main/scala/cats/InjectK.scala#L25) but their `invert` function returns `Option[F[_]]` which they are unwilling to change. It would nice to have InjectionK with `invert` defined as `Try[F[_]]` as we have for all our existing injections. While `Option[F[_]]` maybe more theoretically correct, I have found `Try[F[_]]` to be more useful as I usually want to do something with he exception when inversion fails!. We would also need `FunctionK` as well