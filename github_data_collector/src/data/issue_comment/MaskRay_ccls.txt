### Observed behavior

We are trying to get ccls to work on our (somewhat) messy and complicated C++ code-base. We have it indexing and mostly working but we get some strange error hints in VSCode that stands out and I can't figure out where they come from:

To take one we can look at this line of code:

`int mediaBitrate = media->get(PLEX_ATTRIBUTE_BITRATE, 0);`

which tells us:

```
no matching member function for call to 'get'ccls(2)
PropertyContainer.h(42, 23): candidate function template not viable: no known conversion from 'PlexMedia' to 'PropertyContainer' for object argument
PropertyContainer.h(30, 8): candidate function not viable: no known conversion from 'PlexMedia' to 'PropertyContainer' for object argument
PropertyContainer.h(51, 26): candidate template ignored: could not match 'T *' against 'int'
PropertyContainer.h(32, 10): candidate function not viable: requires single argument 'name', but 2 arguments were provided
```

Via various inheritances this is the method that should be called:

```
template<class T> T get(const string& name, const T& defaultValue=T())
```

This of course builds just fine and I can copy and paste the line from ccls.log and don't see any errors (after I add back the arguments to include our PCH).

We build ccls with llvm 8.0.1 since this is what we use to build the application. One developer said that the error seemed to have gone away when he built ccls locally against llvm 9. Is there something that was made better in upstream versions and we should just upgrade?

Does it matter much if the version of llvm ccls is linked to differs from the compiler we use?

### Expected behavior

Not an error on this line.

### Steps to reproduce


### System information

* ccls version (`git describe --tags --long`): cef02034841294f0ae1495684048677832878fa4
* clang version: 8.0.1
* OS: Linux and macOS behaves the same way
* Editor: VSCode 1.41.0
* Language client (and version): vscode-ccls 0.1.28

Some lsp servers provide marked doc string. Both VSCode and `lsp-ui-doc` support rendering marked string

Correctly rendered doc string is more readable than plain text:

![](https://cloud.githubusercontent.com/assets/951776/25342373/2e6c7d06-290c-11e7-94be-63caf31ae1e3.png)
![](https://cloud.githubusercontent.com/assets/951776/25342372/2e50a8f6-290c-11e7-9051-0e792ddef688.png)

Screenshot form vscode (rust)

![20191211_21:21:56_Selection](https://user-images.githubusercontent.com/44964100/70625008-7abd0b80-1c5c-11ea-8453-adf7a57ad2ed.png)

Screenshot from `lsp-ui` (python)

![](https://raw.githubusercontent.com/emacs-lsp/lsp-ui/master/images/lsp-ui-doc-webkit.png)

It would be good to have C++ comments prettified (doxygen or standardese). 

Ref1: [LSP Spec about markup content](https://microsoft.github.io/language-server-protocol/specifications/specification-3-15/#markupContent)
Ref2: [Clang helpers for documentation comments](https://clang.llvm.org/doxygen/group__CINDEX__COMMENT.html)
Ref3: [lsp-ui-doc supports MarkupContent](https://github.com/emacs-lsp/lsp-ui/blob/master/lsp-ui-doc.el#L279)
Setup Travis/AppVeyor/Azure/GitHub Actions, also integrate the LGTM.com for the code static analysis.

It might be a good idea also to run the clang-analyzer too.
- https://lgtm.com
- https://github.com/marketplace/lgtm
The [README](https://github.com/neoclide/coc.nvim) homepage from coc.nvim shows a small demo for TypeScript where it automatically adds an include when a specific function is written and the import is missing.

I'm currently using coc.nvim + ccls. Is there a way that if I write `printf("Hello world!");` it will automatically add `#include <stdio.h>` to the top of the file? Would like to see this.
# Observed behavior
Completion works properly when inheriting from templated struct, but not when using struct directly.

```c++
template <typename U, typename V> struct A { using type = void; };
template <typename U> struct B : A<U, U> {};

template <typename U> struct C {
  typename A<U, U>::type; // completion doesn't work
  typename B<U>::type;    // completion works
};
```

### Expected behavior

Inside the definition of `C`, ccls should complete both `typename A<U>::type` and `typename B<U>::type` after one types the double colon, but it only provides completion for the latter.

### Steps to reproduce

1. Copy the above code in neovim with coc-nvim and ccls set up.
2. Inside the definition of `C`, type `typename A<U>::` and request code completion.

### System information

* ccls version (`git describe --tags --long`): 0.20190823.5-8-gbd609e8
* clang version: 9.0.1-+2019110512525408009a9b6492a66-1~exp1~20191105211527.67
* OS: Linux
* Editor: NVIM v0.5.0-dev
* Language client (and version): coc-nvim 0.0.74-1ff50ec3b0

I wasn't sure whether my idea of supporting extra reference methods with a slight extension of the language server protocol would work, so I implemented this proof-of-concept.  Unfortunately, it turned out that I don't really know c++.  On the other hand, the code works.   The corresponding code implementing the client side is here: https://github.com/nemethf/eglot-x/tree/reference-codeActionKind

And this is the summary of the 'reference' codeActionKind extension:
https://github.com/joaotavora/eglot/issues/302#issuecomment-550225329

I hope you find this useful, and I'm eager to receive your feedback.
Hi @MaskRay ,

I noted one thing with completion:
 inside function I enter a few symbols for local variable or class member, but usually I have function from std/keywords instead of local stuff. 

![image](https://user-images.githubusercontent.com/2340958/67897064-b13c3c80-fb6e-11e9-8cb3-8f2b1855c093.png)

![image](https://user-images.githubusercontent.com/2340958/67897169-e21c7180-fb6e-11e9-8660-afdbe015d053.png)

Same thing happens I I have local variable and type with similar names:
![image](https://user-images.githubusercontent.com/2340958/67897247-0ed08900-fb6f-11e9-886c-298a51cf1e8e.png)

I would expect, that when I enter something, that matches with results by case(eg log, not Log) I will have local variable on top.
But I enter something with different cases- then I would expect best match.

Seems like with types it works as expected:
![image](https://user-images.githubusercontent.com/2340958/67897410-5c4cf600-fb6f-11e9-8104-1aa3be8a9203.png)
 
Thank you in advance!

source code: https://bitbucket.org/myrgy/rhino/src/develop/
ccls version: 3e049970 

### Observed behavior

Minimal example:
```
$ ls
a.h  b.cpp  compile_commands.json
```
```
$ cat a.h
#pragma once

struct A {};

#include "a.h"
```
```
$ cat b.cpp
#include "a.h"

int main(void) {
  return 0;
}
```
```
$ cat compile_commands.json
[
  {
    "directory": "/path/to/workspace",
    "command": "clang++ -c -o /path/to/workspace/b.o /path/to/workspace/b.cpp -std=c++14 -Wall -Werror -m64",
    "file": "/path/to/workspace/b.cpp"
  }
]
```

If you open `a.h` in your favorite editor, you should get a diagnostic `redefinition of 'A'`.

### Expected behavior

`#pragma once` should ensure that the cyclic include of `a.h` is harmless.

### Steps to reproduce

See the minimal example above.

### System information

* ccls version: 0.20190823.1
* clang version: 7
* OS: Ubuntu 4.15.0-50-generic
* Editor: VSCode 1.38.1
* Language client (and version): vscode-ccls 0.1.26

### Additional info

I was able to verify that the issue doesn't occur with ccls version 0.20181225.8. I didn't have a build available on hand for any in-between releases to bisect it further.

### Observed behavior

For code containing non-UTF-8 documentation comments (e.g. in a latin1-encoded source file), the strings are included verbatim in the JSON-RPC output generated by ccls, resulting in invalid JSON.

### Expected behavior

ccls should detect invalid/unknown encoding and handle it gracefully (i.e. omit the documentation string). Re-encoding is probably not an option because clang already does not "understand" non-UTF-8 source code (i.e. GCC's `-finput-charset` and `-fexec-charset` are not fully implemented).

### Steps to reproduce

test.cpp, convert this to latin1 (e.g. using iconv), and hover over the symbol in Emacs/eglot:

    //! Döcumentätion
    int foo()
    {
        return 42;
    }

Gives the following error: 

    [jsonrpc] (warning) Invalid JSON: (, 0) {"jsonrpc":"2.0","id":21,"result":{"contents":["D\366cument\344tion",{"language":"c","value":"int foo()"}],"range":{"start":{"line":4,"character":4},"end":{"line":4,"character":7}}
### System information

ccls version 0.20190314.1-27-g2b552f6
clang version 8.0.1 

