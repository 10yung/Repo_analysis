Looks nicer on higher res screens.

Also fix some typos and update some links
Includes PR #207. 
Python 3.2-3.3 are EOL and no longer receiving security updates (or any updates) from the core Python team.

Version | Release date | Supported until
--- | ---------- | ----------
2.7 | 2010-07-03 | 2020-01-01
3.2 | 2011-02-20 | 2016-02-27
3.3 | 2012-09-29 | 2017-09-29
3.4 | 2014-03-16 | 2019-03-16

Source: https://en.wikipedia.org/wiki/CPython#Version_history

Python 3.2 and 3.3 are also failing on Travis CI as they've also dropped them.

added some ideas for koans from https://www.dabeaz.com/coroutines/Coroutines.pdf 
Any plans on removing the python 2 support (directory) and just keep python3, moving it to the root directory and also removing support for older python versions?
Hey, looks like typo in [about_scope.py:73](https://github.com/gregmalcolm/python_koans/blob/75b749221afea775b9c23d84a26b9790ea7bd09e/python3/koans/about_scope.py#L73)

```python
 def test_incrementing_with_local_counter(self):
        global counter
        start = counter
        self.increment_using_local_counter(start)  # should be `counter` instead of `start`
        self.assertEqual(False, counter == start + 1)
```
Yes, in both cases the answer is False. But logically in `start` we should keep initial value and then compare with ~~modified~~ `counter`.
Hey @gregmalcolm. I hope this post finds you well. 
Thanks for maintaining this awesome project. 

While solving the Koans when I saw something at the `about_tuples.py` file: 

### Now
```python
def test_tuples_of_one_look_peculiar(self):
    self.assertEqual(__, (1).__class__)
    self.assertEqual(__, (1,).__class__)
    self.assertEqual(__, ("I'm a tuple",))
    self.assertEqual(__, ("Not a tuple"))
```
I'm not sure if that's the expected behaviour but I think it will be an improvement to check the class at the last two asserts.  Doing that will help those who do the koans to understand that the trailing comma means a `tuple` even if the value is not there and when it's just an element, it behaves as the value that is contained inside the `tuple`

### Suggestion

```python
def test_tuples_of_one_look_peculiar(self):
    self.assertEqual(__, (1).__class__)
    self.assertEqual(__, (1,).__class__)
    self.assertEqual(__, ("I'm a tuple",).__class__)
    self.assertEqual(__, ("Not a tuple").__class__)
```

I'll open a PR with it just in case you think it's a good idea too. 
The CI builds appear to be failing on Python 3.2 and 3.3. From what I saw it looks like the installations for those versions of Python might not be available any more at the URLs we're specifying. Not sure if we want to try to fix that or consider dropping support for those versions of Python.

See: https://travis-ci.org/gregmalcolm/python_koans/builds/544882513
Hello!

in `python3/about_inheritance.py` there is a koan telling the next:

```
    class Pug(Dog):
        def __init__(self, name):
            pass

    class Greyhound(Dog):
        def __init__(self, name):
            super().__init__(name)

    def test_base_init_does_not_get_called_automatically(self):
        snoopy = self.Pug("Snoopy")
        with self.assertRaises(___): name = snoopy.name

    def test_base_init_has_to_be_called_explicitly(self):
        boxer = self.Greyhound("Boxer")
        self.assertEqual(__, boxer.name)
```

The last one is false in Python 3, I suggest to rearrange it to something like:


```
    class Pug(Dog):
        def __init__(self, name):
            pass

    class Greyhound(Dog):
        pass

    def test_base_init_could_be_override(self):
        snoopy = self.Pug("Snoopy")
        with self.assertRaises(___): name = snoopy.name

    def test_base_init_is_not_required_to_be_called_explicitly(self):
        boxer = self.Greyhound("Boxer")
        self.assertEqual(__, boxer.name)
```


Break apart the last test for clarity. Removed try-catch as it seems unnecessary.