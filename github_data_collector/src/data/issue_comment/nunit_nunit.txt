It would be nice if `Is.EqualTo(collection)` and `Is.EquivalentTo(collection)` allowed a collection of constraints to be specified, not exact values.

For example:

    Assert.That(list, Is.EquivalentTo(new[] { Is.EqualTo(5), Is.GreaterThan(800) }));

Would require that `list` contains exactly two items, one of which is equal to 5 and the other of which is greater than 800, in an unspecified order.  Of course, it's more useful with more complex constraints than these.

(Implementation for `EqualTo` ought to be straightforward.  `EquivalentTo` might be trickier in the event that a constraint matches multiple items; it's probably a combinatorial problem to avoid falsely failing something that would have worked with a different constraint/actual matchup ordering.  But I think Google Test allows these sorts of things.)
Sometimes it is needed to verify value type against default value. 
Common use case - verify that value in rest response is not empty, e.g. Guid (not empty) or enums (not Undefined value).

Current alternative - using EqualConstraint (e.g. `Is.Not.EqualTo(Guid.Empty)`, `Is.Not.EqualTo(default(MyEnumTypeName))`), which is not always convenient.

Details:
1. If actual is non-nullable value type - should pass if `actual == default`.

2. If actual is nullable value type - should pass if `actual` is equal to default value of underlying type, so the following code could be possible:
```
MyValueType? actual = ...;
Assert.That(actual, Is.Not.Null & Is.Not.Default);
```

Open question - what the expected behavior if nullable `actual` is null? Technically it is default value for nullable value type, but I think would make sense to fail it in this case, i.e. only account for underlying type default value.

3. Not sure about the behavior for reference types. Not sure it should be allowed at all. Another option - allow (passing when null), and provide roslyn analyzer with warning if used against reference type.
Creating a custom attribute that derives from `TestActionAttribute`, then using that attribute from a test library that uses a newer version of NUnit will result in NUnit not executing the test because it could not load the older NUnit library.  Using an `app.config` to redirect to the newer NUnit version fixes the issue and tests then run as expected.

The issue is non-obvious because normal tests appear to not run (status: inconclusive). This was the cause of [NUnit.ApplicationDomain Issue #25:  Unable to run with VS2017 test runner](https://bitbucket.org/zastrowm/nunit.applicationdomain/issues/25/unable-to-run-with-vs2017-test-runner) and I discovered the root of the problem only because one of the parameterized test fixtures gave the following stack trace:

```
An exception was thrown while loading the test.
System.IO.FileLoadException: Could not load file or assembly 'nunit.framework, Version=3.7.0.0, Culture=neutral, PublicKeyToken=2638cd05610744eb' or one of its dependencies. The located assembly's manifest definition does not match the assembly reference. (Exception from HRESULT: 0x80131040)
File name: 'nunit.framework, Version=3.7.0.0, Culture=neutral, PublicKeyToken=2638cd05610744eb'
   at System.ModuleHandle.ResolveType(RuntimeModule module, Int32 typeToken, IntPtr* typeInstArgs, Int32 typeInstCount, IntPtr* methodInstArgs, Int32 methodInstCount, ObjectHandleOnStack type)
   at System.ModuleHandle.ResolveTypeHandleInternal(RuntimeModule module, Int32 typeToken, RuntimeTypeHandle[] typeInstantiationContext, RuntimeTypeHandle[] methodInstantiationContext)
   at System.Reflection.RuntimeModule.ResolveType(Int32 metadataToken, Type[] genericTypeArguments, Type[] genericMethodArguments)
   at System.Reflection.CustomAttribute.FilterCustomAttributeRecord(CustomAttributeRecord caRecord, MetadataImport scope, Assembly& lastAptcaOkAssembly, RuntimeModule decoratedModule, MetadataToken decoratedToken, RuntimeType attributeFilterType, Boolean mustBeInheritable, Object[] attributes, IList derivedAttributes, RuntimeType& attributeType, IRuntimeMethodInfo& ctor, Boolean& ctorHasParameters, Boolean& isVarArg)
   at System.Reflection.CustomAttribute.GetCustomAttributes(RuntimeModule decoratedModule, Int32 decoratedMetadataToken, Int32 pcaCount, RuntimeType attributeFilterType, Boolean mustBeInheritable, IList derivedAttributes, Boolean isDecoratedTargetSecurityTransparent)
   at System.Reflection.CustomAttribute.GetCustomAttributes(RuntimeType type, RuntimeType caType, Boolean inherit)
   at NUnit.Framework.Internal.TypeWrapper.GetCustomAttributes[T](Boolean inherit)
   at NUnit.Framework.Internal.Builders.DefaultSuiteBuilder.GetFixtureBuilderAttributes(ITypeInfo typeInfo)
   at NUnit.Framework.Internal.Builders.DefaultSuiteBuilder.BuildFrom(ITypeInfo typeInfo)

WRN: Assembly binding logging is turned OFF.
To enable assembly bind failure logging, set the registry value [HKLM\Software\Microsoft\Fusion!EnableLog] (DWORD) to 1.
Note: There is some performance penalty associated with assembly bind failure logging.
To turn this feature off, remove the registry value [HKLM\Software\Microsoft\Fusion!EnableLog].

  Exception doesn't have a stacktrace
```

The underlying issue - referencing an older version of NUnit for attributes - might be closed as "will-not-fix", but I think it might be useful for users to have some sort of error message rather than having the tests *seemingly* refuse to execute.

I've created a reproduction solution over @ [_repo_NUnitAttributesTargettingDifferentVersion](https://github.com/zastrowm/_repo_NUnitAttributesTargettingDifferentVersion)
There appears to be an issue with the pre-filtering in NunitLite.

If there is a a namespace a.b which contains a SetupFixture, and a namespace a.b.c which has a test method a.b.c.TestMethod, and only the test a.b.c.TestMethod is specified, the setup fixture's OneTimeSetup and OneTimeTearDown methods are never run. 

Apparently, the pre-filtering excludes the a.b namespace from consideration.

It would seem that pre-filtering should examine all parent namespaces for a SetupFixture, even if tests in those namespaces are excluded by the pre-filtering.

Maybe there needs to be a simple way to turn pre-filtering off entirely?
As far as I can tell, there are no assertions, in either model, that allow the use of an existing Regex in the assertion.

All of the Regex assertions take a string containing the regex pattern.

It would be quite useful to have constraints which take an existing Regex in place of the string pattern, but function identically.
Annotating any more than a class at a time will be overwhelming to review. I'm starting with the most-seen types.

The intent with all annotations is to reflect current behavior. If `null` is tolerated, I'm marking the parameter as nullable. If it causes ArgumentNullException, NullReferenceException, etc, I'm marking as non-nullable.
We've had these four methods as far back as NUnit source history goes. The `double?` overloads are the same as the first two overloads except that they throw InvalidOperationException if you pass `null`. Since they can't be used to pass `null`, they don't do anything that the safer `double` overloads don't do.

Should we obsolete them or fix them? What would fixing them look like?

```cs
namespace NUnit.Framework
{
    public abstract class Assert
    {
        public static void AreEqual(double expected, double actual, double delta, string message, params object[] args);
        
        public static void AreEqual(double expected, double actual, double delta);
        
        public static void AreEqual(double expected, double? actual, double delta, string message, params object[] args);
        
        public static void AreEqual(double expected, double? actual, double delta);
    }
}
```
[`System.Collections.Immutable.ImmutableArray`](https://docs.microsoft.com/en-us/dotnet/api/system.collections.immutable.immutablearray-1?view=netcore-3.1) implements both reference equality and structural equality via [`IStructuralEquatable`](https://docs.microsoft.com/en-us/dotnet/api/system.collections.istructuralequatable?view=netcore-3.1).

I want to be able to check two arrays for structural equality, but only some of the overloads of [`EqualConstraint.Using`](https://github.com/nunit/nunit/blob/cefc0c3a86c065daa4130aa255b1384db51b2b08/src/NUnitFramework/framework/Constraints/EqualConstraint.cs#L308) work as expected.

The two overloads that take `IEqualityComparer` or `IComparer` don't use the correct comparison, whereas the versions that take delegates do.

The attached code (which was built with packages **NUnit 3.12.0** and **System.Collections.Immutable 1.7.0** fails the last two tests.

```C#
using System;
using System.Collections;
using System.Collections.Immutable;
using NUnit.Framework;

namespace NUnitStructural
{
    [TestFixture]
    public class Test
    {
        [Test]
        public void ImmutableArrayNotReferenceEquality()
        {
            var x = ImmutableArray.Create(1, 2, 3);
            var y = ImmutableArray.Create(1, 2, 3);

            Assert.That(x != y);
        }

        [Test]
        public void ImmutableArrayWithStructuralEqualityComparison()
        {
            var x = ImmutableArray.Create(1, 2, 3);
            var y = ImmutableArray.Create(1, 2, 3);

            Comparison<ImmutableArray<int>> comparison = (a, b) => StructuralComparisons.StructuralComparer.Compare(a, b);
            Assert.That(x, Is.EqualTo(y).Using(comparison));
        }

        [Test]
        public void ImmutableArrayWithStructuralEqualityComparerEquals()
        {
            var x = ImmutableArray.Create(1, 2, 3);
            var y = ImmutableArray.Create(1, 2, 3);

            var del = new Func<ImmutableArray<int>, ImmutableArray<int>, bool>((a, b) => StructuralComparisons.StructuralEqualityComparer.Equals(a, b));
            Assert.That(x, Is.EqualTo(y).Using<ImmutableArray<int>>(del));
        }

        [Test]
        public void ImmutableArrayWithStructuralComparerEquals()
        {
            var x = ImmutableArray.Create(1, 2, 3);
            var y = ImmutableArray.Create(1, 2, 3);

            var del = new Func<ImmutableArray<int>, ImmutableArray<int>, bool>((a, b) => StructuralComparisons.StructuralComparer.Compare(a, b) == 0);
            Assert.That(x, Is.EqualTo(y).Using<ImmutableArray<int>>(del));
        }

        [Test]
        public void ImmutableArrayWithStructuralEqualityComparer()
        {
            var x = ImmutableArray.Create(1, 2, 3);
            var y = ImmutableArray.Create(1, 2, 3);

            Assert.That(x, Is.EqualTo(y).Using(StructuralComparisons.StructuralEqualityComparer));
        }

        [Test]
        public void ImmutableArrayWithStructuralComparer()
        {
            var x = ImmutableArray.Create(1, 2, 3);
            var y = ImmutableArray.Create(1, 2, 3);

            Assert.That(x, Is.EqualTo(y).Using(StructuralComparisons.StructuralComparer));
        }
    }
}

```

**Case 1: Without reflection**

In this case, even if we are throwing the exception in catch the NUnit only show's that there was one assert.

```
[Test]
public void Test1()
{
   try
   {
     Method()
   }
   catch(Exception ex)
   { 
     throw;
   }
}
public void Method()
{
Assert.Fail("Assertion Test");
}
[TearDown]
public void TearDown() {}
```

 
**Result:** 

 Error : Assertion Test:
at NunitTests.Class1.KuchNai() in C:\Users\**\Documents\Visual Studio 2015\Projects\SameMessageTest\NunitTests\Class1.cs:line 28
at NunitTests.Class1.Test1() in C:\Users\**\Documents\Visual Studio 2015\Projects\SameMessageTest\NunitTests\Class1.cs:line 18

 

**Case 2: With Reflection**

In this case, we are using reflection inside the test, if there is failure/Assert inside the method getting called using reflection, Nunit shows that there were two assertions as shown in the result below.

```
[Test]
public void Test1()
{
   try
   {
 //Calling the method using reflection
 Type magicType = Type.GetType("NunitTests.Class1");
 ConstructorInfo magicConstructor = magicType.GetConstructor(Type.EmptyTypes);
 object magicClassObject = magicConstructor.Invoke(new object[] { });
 MethodInfo magicMethod = magicType.GetMethod("Method");
 object magicValue = magicMethod.Invoke(magicClassObject, new object[] { });
   }
   catch(Exception ex)
   { 
     throw;
   }
}
public void Method()
{
Assert.Fail("Assertion Test");
}
[TearDown]
public void TearDown() {}
```



 **Result**

1-1) Error : NunitTests.Class1.Test1
Error Assert
at NunitTests.Class1.KuchNai() in C:\Users\***\Documents\Visual Studio 2015\Projects\**\**\Class1.cs:line 38

1-2) Error : NunitTests.Class1.Test1
System.Reflection.TargetInvocationException : Exception has been thrown by the target of an invocation.
----> NUnit.Framework.AssertionException : Error Assert
at System.RuntimeMethodHandle.InvokeMethod(Object target, Object[] arguments, Signature sig, Boolean constructor)
at System.Reflection.RuntimeMethodInfo.UnsafeInvokeInternal(Object obj, Object[] parameters, Object[] arguments)
at System.Reflection.RuntimeMethodInfo.Invoke(Object obj, BindingFlags invokeAttr, Binder binder, Object[] parameters, CultureInfo culture)
at System.Reflection.MethodBase.Invoke(Object obj, Object[] parameters)
at NunitTests.Class1.Test1() in C:\Users\***\Documents\Visual Studio 2015\Projects\**\**\Class1.cs:line 32

 
Sometimes it is necessary to unit-test the code which relies on a static state or even worse, on the type initializers execution order. Even after fixing this kind of nonsense, the problem doesn't entirely go away, because now you need to test it against different scenarios to avoid false positives.

[My solution](https://github.com/astef/IsolatedTestFixtureAttribute) is intended to solve this problem for `.NET Core`  users, who doesn't have full `AppDomain` functionality.

It relies on [AssemblyLoadContext](https://github.com/dotnet/coreclr/blob/master/Documentation/design-docs/assemblyloadcontext.md) and [IFixtureBuilder](https://github.com/nunit/docs/wiki/IFixtureBuilder-Interface) extension point to achieve the result. I have basically copy-pasted `TestFixtureAttribute` code and changed `BuildFrom` methods to use the type from the newly created `AssemblyLoadContext`.

This approach have a few limitations:

- It doesn't support isolation of test methods, only test classes.


- It doesn't support `AssemblyLoadContext` unload, because as of now, it is not supported by the run-time, but it is planned: https://github.com/dotnet/coreclr/blob/master/Documentation/design-docs/unloadability.md

- The design is poor. It can look better as a property of existing `TestFixtureAttribute`

But in general it works, my tests are no longer sharing static variables! 

So I request you to add this killer-feature to the NUnit, to make more users happier.