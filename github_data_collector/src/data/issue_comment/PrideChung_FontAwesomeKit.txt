The problem only appears in iOS 13, it works fine in iOS 12.
When an image is created via FontAwesomeKit and then assigned to a UIButton, it creates another call to viewDidLayoutSubviews which results in an infinite loop and finally an app crash.

The following example illustrates the problem:


    class ViewController: UIViewController {

        @IBOutlet weak var button: UIButton!
    
        override func viewDidLayoutSubviews() {
            super.viewDidLayoutSubviews()
        
            let fakImage = FAKFontAwesome.addressBookOIcon(withSize: 30)
            let image = fakImage?.image(with: CGSize(width: 30, height: 30))
        
            // This works fine
            // button.setImage(UIImage.add, for: .normal)
        
            // But this fails
            button.setImage(image, for: .normal)
        }
    }

System images or images loaded from files are working fine.

Font file doesn't exist
I gave example project a try and it works well, but there's a problem with the last page which exposes all icons:

<img width="352" alt="image" src="https://user-images.githubusercontent.com/1264761/29517846-ed96324a-8644-11e7-82b2-9da7bbbd5301.png">

_None icons are being displayed from that last tab, tried all icon sets_.

Clicking an icons logs this:

```
===================Code Autogeneration ===================

FAKFontAwesome *Icon = [FAKFontAwesome IconWithSize:30];
[Icon addAttribute:NSForegroundColorAttributeName value:[UIColor whiteColor]];
UIImage *IconImage = [Icon imageWithSize:CGSizeMake(30, 30)];

==========================================================
```

I'd say this code generator is broken, it shouldn't be using the computed characters, but the character's name instead.

Problem would be somewhere in [FontAwesomeKitExample/FontAwesomeKitExample/IconMapViewController.m](https://github.com/PrideChung/FontAwesomeKit/blob/ed5eb02f4bcf76e218bb1c966c551a7b5240b6b4/FontAwesomeKitExample/FontAwesomeKitExample/IconMapViewController.m)

I suppose this used to work in previous versions of xcode. It's not a big problem, but I'm sure this would deserve a fix as it may prevent new people from using this library as it seems broken, but everything else works fine.

I see that a swift rewrite was planed for the code generator in #92 
May I please ask what is the incremental file size on the final `.app` when using this library?
Dependency "FontAwesomeKit" has no shared framework schemes for any of the platforms: iOS

please check this 

FAKIcon.m:16: registerIconFontWithURL: CGFontRef newFont = CGFontCreateWithDataProvider(fontDataProvider);
Crashes with little explanation. Was working fine in 9.3.2, but after upgrading to iOS 10, both older versions, and the new 2.2.0 crash on this line. The code seems to have been unchanged.

For some reason, I was able to follow the instructions in this SO post:

http://stackoverflow.com/questions/24900979/cgfontcreatewithdataprovider-hangs-in-airplane-mode

and call [UIFont familyNames]; before the registerIconFontWithURL: method was called, and the problem was solved. Weird.

Something small I ran into. If you go to the settings for FontAwesomeKit framework and look at the "signing" settings. There is a value set for "Team". It should be set to "None" otherwise you get build issues in Xcode 8

When I use this library, app crashed.

> can't find font file in library.

This library try to find font library from man bundle, instead of itself library.

You can test on **HelloWorld** project, by adding this to that project `pod 'FontAwesomeKit'`

Sorry for the absence of this project in the last year, I've been busy doing a lot of other things. Anyway, I'm back, with the whole new v3.0 road map!
## Compatibility:

FAK 3.0 would still be a pure Objective-C library so legacy projects don't need to include a large Swift runtime for just one tiny third party library. For Swift projects, to have better swift interoperability, nullability and weak genric will be added to the APIs. 

Most of it's APIs should be compatible with v2.x. However, there're some design flaws in the v2.x, to fix them, minor breaking changes have to be made, so v3.0 won't be 100% compatible with v2.0.
## //TODO:

✅ Better propery setter and getters
✅ Better initializer
✅ Immutability and thread safety
✅ Nullability and weak generic
⬜️ Use class_addMethod to dynamic create icon generating methods to reduce binary size of this library
⬜️ Rewrite code genrator in Swift (Half way done)
⬜️ 100% test coverage
⬜️ Snapshot tests
⬜️ Carthage support
⬜️ IBDesignable support
⬜️ QuickLook support
⬜️ Mac support
⬜️ Header doc icon preview url link
⬜️ Migration Guide
