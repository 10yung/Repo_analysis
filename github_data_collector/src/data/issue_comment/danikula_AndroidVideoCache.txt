Attempt to write to field 'com.android.okio.Segment com.android.okio.Segment.next' on a null object reference

java.lang.RuntimeException:Wait... but why? WTF!? Really shouldn't happen any more after fixing https://github.com/danikula/AndroidVideoCache/issues/43. If you read it on your device log, please, notify me danikula@gmail.com or create issue here https://github.com/danikula/AndroidVideoCache/issues.
--
2 e.d.a.h.close(SourceFile:4)
3 ......
4 Caused by:
5 java.lang.NullPointerException:Attempt to write to field 'com.android.okio.Segment com.android.okio.Segment.next' on a null object reference
6 com.android.okio.Segment.pop(Segment.java:54)
7 com.android.okio.OkBuffer.write(OkBuffer.java:592)
8 com.android.okio.OkBuffer.read(OkBuffer.java:610)
9 com.android.okio.RealBufferedSource.read(RealBufferedSource.java:53)
10 com.android.okhttp.internal.http.HttpConnection$FixedLengthSource.read(HttpConnection.java:442)
11 com.android.okhttp.internal.Util.skipAll(Util.java:227)
12 com.android.okhttp.internal.http.HttpConnection.discard(HttpConnection.java:212)
13 com.android.okhttp.internal.http.HttpConnection$FixedLengthSource.close(HttpConnection.java:464)
14 com.android.okhttp.internal.Util.closeQuietly(Util.java:97)
15 com.android.okhttp.internal.http.HttpEngine.close(HttpEngine.java:433)
16 com.android.okhttp.internal.http.HttpURLConnectionImpl.disconnect(HttpURLConnectionImpl.java:113)
17 com.android.okhttp.internal.http.DelegatingHttpsURLConnection.disconnect(DelegatingHttpsURLConnection.java:93)
18 com.android.okhttp.internal.http.HttpsURLConnectionImpl.disconnect(HttpsURLConnectionImpl.java:25)
19 e.d.a.h.close(SourceFile:2)
20 e.d.a.m.c(SourceFile:1)
21 e.d.a.m.f(SourceFile:18)
22 e.d.a.m.a(SourceFile:1)
23 e.d.a.m$b.run(SourceFile:1)
24 java.lang.Thread.run(Thread.java:818)


2019-12-17 15:44:39.301 28787-28819/com.example.videocachesample E/Pinger: Error reading ping response
    com.danikula.videocache.ProxyCacheException: Error opening connection for http://127.0.0.1:39266/ping with offset 0. Version: 2.7.1
        at com.danikula.videocache.HttpUrlSource.open(HttpUrlSource.java:85)
        at com.danikula.videocache.Pinger.pingServer(Pinger.java:101)
        at com.danikula.videocache.Pinger.access$100(Pinger.java:33)
        at com.danikula.videocache.Pinger$PingCallable.call(Pinger.java:123)
        at com.danikula.videocache.Pinger$PingCallable.call(Pinger.java:119)
        at java.util.concurrent.FutureTask.run(FutureTask.java:266)
        at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1167)
        at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:641)
        at java.lang.Thread.run(Thread.java:764)
     Caused by: java.io.IOException: Cleartext HTTP traffic to 127.0.0.1 not permitted
        at com.android.okhttp.HttpHandler$CleartextURLFilter.checkURLPermitted(HttpHandler.java:115)
        at com.android.okhttp.internal.huc.HttpURLConnectionImpl.execute(HttpURLConnectionImpl.java:458)
        at com.android.okhttp.internal.huc.HttpURLConnectionImpl.getResponse(HttpURLConnectionImpl.java:407)
        at com.android.okhttp.internal.huc.HttpURLConnectionImpl.getResponseCode(HttpURLConnectionImpl.java:538)
        at com.danikula.videocache.HttpUrlSource.openConnection(HttpUrlSource.java:171)
        at com.danikula.videocache.HttpUrlSource.open(HttpUrlSource.java:78)
        at com.danikula.videocache.Pinger.pingServer(Pinger.java:101) 
        at com.danikula.videocache.Pinger.access$100(Pinger.java:33) 
        at com.danikula.videocache.Pinger$PingCallable.call(Pinger.java:123) 
        at com.danikula.videocache.Pinger$PingCallable.call(Pinger.java:119) 
        at java.util.concurrent.FutureTask.run(FutureTask.java:266) 
        at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1167) 
        at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:641) 
        at java.lang.Thread.run(Thread.java:764) 
2019-12-17 15:44:39.309 28787-28819/com.example.videocachesample I/chatty: uid=10200(com.example.videocachesample) pool-3-thread-1 identical 1 line
2019-12-17 15:44:39.317 28787-28819/com.example.videocachesample E/Pinger: Error reading ping response
    com.danikula.videocache.ProxyCacheException: Error opening connection for http://127.0.0.1:39266/ping with offset 0. Version: 2.7.1
        at com.danikula.videocache.HttpUrlSource.open(HttpUrlSource.java:85)
        at com.danikula.videocache.Pinger.pingServer(Pinger.java:101)
        at com.danikula.videocache.Pinger.access$100(Pinger.java:33)
        at com.danikula.videocache.Pinger$PingCallable.call(Pinger.java:123)
        at com.danikula.videocache.Pinger$PingCallable.call(Pinger.java:119)
        at java.util.concurrent.FutureTask.run(FutureTask.java:266)
        at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1167)
        at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:641)
        at java.lang.Thread.run(Thread.java:764)
     Caused by: java.io.IOException: Cleartext HTTP traffic to 127.0.0.1 not permitted
        at com.android.okhttp.HttpHandler$CleartextURLFilter.checkURLPermitted(HttpHandler.java:115)
        at com.android.okhttp.internal.huc.HttpURLConnectionImpl.execute(HttpURLConnectionImpl.java:458)
        at com.android.okhttp.internal.huc.HttpURLConnectionImpl.getResponse(HttpURLConnectionImpl.java:407)
        at com.android.okhttp.internal.huc.HttpURLConnectionImpl.getResponseCode(HttpURLConnectionImpl.java:538)
        at com.danikula.videocache.HttpUrlSource.openConnection(HttpUrlSource.java:171)
        at com.danikula.videocache.HttpUrlSource.open(HttpUrlSource.java:78)
        at com.danikula.videocache.Pinger.pingServer(Pinger.java:101) 
        at com.danikula.videocache.Pinger.access$100(Pinger.java:33) 
        at com.danikula.videocache.Pinger$PingCallable.call(Pinger.java:123) 
        at com.danikula.videocache.Pinger$PingCallable.call(Pinger.java:119) 
        at java.util.concurrent.FutureTask.run(FutureTask.java:266) 
        at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1167) 
        at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:641) 
        at java.lang.Thread.run(Thread.java:764) 
2019-12-17 15:44:39.327 28787-28787/com.example.videocachesample E/Pinger: Error pinging server (attempts: 3, max timeout: 280). If you see this message, please, report at https://github.com/danikula/AndroidVideoCache/issues/134. Default proxies are: [DIRECT]
    com.danikula.videocache.ProxyCacheException: Error pinging server (attempts: 3, max timeout: 280). If you see this message, please, report at https://github.com/danikula/AndroidVideoCache/issues/134. Default proxies are: [DIRECT]. Version: 2.7.1
        at com.danikula.videocache.Pinger.ping(Pinger.java:73)
        at com.danikula.videocache.HttpProxyCacheServer.isAlive(HttpProxyCacheServer.java:185)
        at com.danikula.videocache.HttpProxyCacheServer.<init>(HttpProxyCacheServer.java:84)
        at com.danikula.videocache.HttpProxyCacheServer.<init>(HttpProxyCacheServer.java:69)
        at com.example.videocachesample.App.newProxy(App.java:17)
        at com.example.videocachesample.App.getProxy(App.java:13)
        at com.example.videocachesample.MainActivity.onCreate(MainActivity.java:50)
        at android.app.Activity.performCreate(Activity.java:7140)
        at android.app.Activity.performCreate(Activity.java:7131)
        at android.app.Instrumentation.callActivityOnCreate(Instrumentation.java:1272)
        at android.app.ActivityThread.performLaunchActivity(ActivityThread.java:2894)
        at android.app.ActivityThread.handleLaunchActivity(ActivityThread.java:3049)
        at android.app.servertransaction.LaunchActivityItem.execute(LaunchActivityItem.java:78)
        at android.app.servertransaction.TransactionExecutor.executeCallbacks(TransactionExecutor.java:108)
        at android.app.servertransaction.TransactionExecutor.execute(TransactionExecutor.java:68)
        at android.app.ActivityThread$H.handleMessage(ActivityThread.java:1809)
        at android.os.Handler.dispatchMessage(Handler.java:106)
        at android.os.Looper.loop(Looper.java:193)
        at android.app.ActivityThread.main(ActivityThread.java:6692)
        at java.lang.reflect.Method.invoke(Native Method)
        at com.android.internal.os.RuntimeInit$MethodAndArgsCaller.run(RuntimeInit.java:493)
        at com.android.internal.os.ZygoteInit.main(ZygoteInit.java:858)
2019-12-17 15:44:39.327 28787-28787/com.example.videocachesample I/HttpProxyCacheServer: Proxy cache server started. Is it alive? false
What is proguard rules?
Can AndroidVideoCache support "Transfer-Encoding: chunked" mode?
这个框架的原理是：将网络视频的url传给这个框架，框架返还给播放器一个file类型的uri，然后由框架直接开线程进行网络下载，播放器间接的去读取框架下载到本地的数据进行播放。
这样就会有一个很严重的问题：**播放器无法控制缓冲进度！**
例如，一个视频有200M，用户只看了四分之一，假设是50M，目前市面上的播放器大都有设置缓冲进度的功能，这样一来，设置将无效，框架仍然会将完整的200M视频全量下载，用户将耗费大量的数据流量，因为播放器设置的最大缓冲进度是播放器从本地读取的最大缓冲进度，而不是网络下载的进度。
Here's the above content translated automatically with Google Translate，maybe not very accurate, but still worth a look
Title : Friends who do video on demand should pay attention to this framework. This framework is caching first and then playing, not caching while playing!
The principle of this framework is: pass the URL of the network video to this framework, the framework returns a file type uri to the player, and then the framework directly opens the thread for network download, and the player indirectly reads the data downloaded by the framework to the local data Play.
There will be a serious problem: **The player cannot control the buffering progress!** 
For example, a video has 200M, and the user only sees a quarter. Assuming it is 50M, most players on the market currently have a function to set the buffering progress. In this way, the setting will be invalid, and the frame will still complete the 200M video. For full downloads, users will consume a lot of data traffic, because the maximum buffering progress set by the player is the maximum buffering progress that the player reads locally, not the progress of the network download.
Can I actively get the percentage of cache?
Sample can not play  wether android 9 nor android 7，did anyone met this situation？ I pulled tag v2.7.1 .     
use AndroidVideoCache to cache music can't play while buffering, only when finished the buffer can play music, why?

```
HttpProxyCacheServer proxy = MainApplication.getProxy(mContext);
proxy.registerCacheListener(this, item.getSongUri());
String proxyUrl = proxy.getProxyUrl(item.getSongUri());
mMusicPlayer.setDataSource(proxyUrl);
mMusicPlayer.prepareAsync(); 
mMusicPlayer.setOnPreparedListener(this);
```
缓存的文件结构异常,导致播放出现问题,有没有遇到的
In Android 9,

The ``proxy.getProxyUrl(url);`` return the same url and not cached url.

But it works on Android 4.4-7.