I was surprised to find you aren't publishing images for beta. I understand it is probably less used but it would have been useful in my particular case.
# Problem
Currently it's annoying to clean up build caches on CI systems because:

- `cargo build` just keeps adding stuff to your cache directory without cleaning up unused artefacts
- `cargo clean` just cleans out everything

Thus any cache that follows the approach of:

1. Load cache
2. Cargo build
3. Save cache

Will cause you to maintain a technically unbounded cache, and thus, step 1 and 3 will start taking more time than 2. (Have personally seen this happen after ~100 builds of not resetting a cache on shipcat).

Thus finding out a way to ensure the cache doesn't grow and require manual purging is useful.

There's a [relevant cargo meta tracking issue](https://github.com/rust-lang/cargo/issues/7150) for cargo cache improvements.

## CI Suggestions

CircleCI recommends adding dynamic suffixes to your [cache keys](https://circleci.com/docs/2.0/caching/#cache-expiration) to force cache expiry. E.g.:

- `target-{{ checksum "Cargo.lock" }` (every time you make a version or add new dep)
- `target.release-{{ .Environment.CACHE_VERSION }}` (whenever you want to manually bump)

But neither are really that satisfactory. Fast release cadence makes the first basically useless (blank cache constantly), and the second requires manual intervention every now and then (cache too big constantly).

TravisCI has a only a [manual option to clear your cache](https://docs.travis-ci.com/user/caching/#clearing-caches), and normally caches last for 28 days.

## Related Tools
One alternative is: [`cargo-sweep`](https://github.com/holmgr/cargo-sweep), but this only cleans based on date AFAIKT, which feels like just kicking the can down the road because it'll cause you to rebuild more than you need if you just haven't bumped that dependency in a while..

Another alternative is [`cargo-cache`](https://github.com/matthiaskrgr/cargo-cache), but this seems to be more for general gc-ing and probably won't solve the unbounded cache problem.

Tools that would solve this could potentially be bundled inside the build image if it doesn't bloat it too much.
Since it's annoying to keep not encouraging multi-stage builds because you cannot reuse a build cache effectively, we should look into using [buildkit](https://github.com/moby/buildkit).

It appears available on circleci now as [orbs](https://circleci.com/orbs/registry/orb/springload/buildkit), and [evars](https://ideas.circleci.com/ideas/CCI-I-1003) supposedly. So worth seeing if we can give out some good advice on how to do this.
Mounting the `cargo-cache` volume at `/root/.cargo/registry` excludes the `/root/.cargo/git` directory. This causes Cargo to re-fetch all Git dependencies on each build, which can be quite slow.
There are some project put `rust-toolchain` file in root directory, for example: `nightly-2019-05-22`.

With those project, no matter which tag I choose, I have to `info: syncing channel updates for 'nightly-2019-05-22-x86_64-unknown-linux-gnu'` when I build the docker image, even I chosed `clux/muslrust:nightly-2019-05-22`(because this image installed `nightly channel` toolchain rather than `nightly-2019-05-22`).

If I have to download toolchain, maybe image without pre-installed toolchain is better?

The way to install rustup without pre-installed toolchain is:

```bash
curl https://sh.rustup.rs -sSf | sh -s -- --default-toolchain none
```
Hi,

just wanted to ask if someone made `cargo-tarpaulin` working in this container (or musl in general).
https://github.com/xd009642/tarpaulin

Thanks & regards
Dominik
```gdb
Program received signal SIGSEGV, Segmentation fault.
0x0000000000bff9d3 in libunwind::LocalAddressSpace::get32(unsigned long) ()
(gdb) bt
#0  0x0000000000bff9d3 in libunwind::LocalAddressSpace::get32(unsigned long) ()
#1  0x0000000000c02c80 in libunwind::CFI_Parser<libunwind::LocalAddressSpace>::findFDE(libunwind::LocalAddressSpace&, unsigned long, unsigned long, unsigned int, unsigned long, libunwind::CFI_Parser<libunwind::LocalAddressSpace>::FDE_Info*, libunwind::CFI_Parser<libunwind::LocalAddressSpace>::CIE_Info*) ()
#2  0x0000000000c02417 in libunwind::UnwindCursor<libunwind::LocalAddressSpace, libunwind::Registers_x86_64>::getInfoFromDwarfSection(unsigned long, libunwind::UnwindInfoSections const&, unsigned int) ()
#3  0x0000000000c01e17 in libunwind::UnwindCursor<libunwind::LocalAddressSpace, libunwind::Registers_x86_64>::setInfoBasedOnIPRegister(bool) ()
#4  0x0000000000c01bd9 in libunwind::UnwindCursor<libunwind::LocalAddressSpace, libunwind::Registers_x86_64>::step() ()
#5  0x0000000000c00d6d in unw_step ()
#6  0x0000000000bfefff in _Unwind_Backtrace ()
#7  0x0000000000b5684d in backtrace::backtrace::libunwind::trace::hd633fbf58699793f (cb=...)
    at /root/.cargo/registry/src/github.com-1ecc6299db9ec823/backtrace-0.3.9/src/backtrace/libunwind.rs:53
#8  backtrace::backtrace::trace::hf547bd4c20bd8958 (cb=...) at /root/.cargo/registry/src/github.com-1ecc6299db9ec823/backtrace-0.3.9/src/backtrace/mod.rs:42
#9  0x0000000000b55803 in backtrace::capture::Backtrace::new_unresolved::hb79408d21b35173a () at /root/.cargo/registry/src/github.com-1ecc6299db9ec823/backtrace-0.3.9/src/capture.rs:88
#10 backtrace::capture::Backtrace::new::ha127780e86ae8348 () at /root/.cargo/registry/src/github.com-1ecc6299db9ec823/backtrace-0.3.9/src/capture.rs:63
#11 _$LT$backtrace..capture..Backtrace$u20$as$u20$core..default..Default$GT$::default::hc59e5c652a626061 ()
    at /root/.cargo/registry/src/github.com-1ecc6299db9ec823/backtrace-0.3.9/src/capture.rs:235
#12 0x0000000000b55879 in backtrace::capture::Backtrace::new::ha127780e86ae8348 ()
#13 0x000000000070bf1d in error_chain::make_backtrace::h3de17587d40dd8d9 () at /root/.cargo/registry/src/github.com-1ecc6299db9ec823/error-chain-0.11.0/src/lib.rs:616
#14 0x000000000070bfa5 in _$LT$error_chain..State$u20$as$u20$core..default..Default$GT$::default::h83acd38a3fbdd55d ()
    at /root/.cargo/registry/src/github.com-1ecc6299db9ec823/error-chain-0.11.0/src/lib.rs:710
#15 0x000000000053842f in myapp::Error::from_kind::hf7853880c89cea62 (kind=...) at <impl_error_chain_processed macros>:53
#16 _$LT$myapp..Error$u20$as$u20$core..convert..From$LT$alloc..string..String$GT$$GT$::from::h4fbf2a56c4646783 (s=...) at <impl_error_chain_processed macros>:102
#17 _$LT$T$u20$as$u20$core..convert..Into$LT$U$GT$$GT$::into::h583c99ca38db9c0f (self=...) at /checkout/src/libcore/convert.rs:396
#21 0x000000000040860b in myapp::main::hf2459d8155fbc2b7 () at src/main.rs:256
#22 0x0000000000401043 in std::rt::lang_start::_$u7b$$u7b$closure$u7d$$u7d$::h8404db9011a8df06 () at /checkout/src/libstd/rt.rs:74
#23 0x0000000000bee4d3 in std::rt::lang_start_internal::_$u7b$$u7b$closure$u7d$$u7d$::hb94c47f3eedfaa55 () at libstd/rt.rs:59
#24 std::panicking::try::do_call::h9a1cf6ef7a2bbed3 () at libstd/panicking.rs:310
#25 0x0000000000bfd3fa in __rust_maybe_catch_panic () at libpanic_unwind/lib.rs:105
#26 0x0000000000be0e2e in std::panicking::try::hb22e57d7731fdf53 () at libstd/panicking.rs:289
#27 std::panic::catch_unwind::h813102482f9fd064 () at libstd/panic.rs:392
#28 std::rt::lang_start_internal::h45c8433e0c8ada66 () at libstd/rt.rs:58
```

Noticed on old kernels (CircleCI host) only, works fine on local machine using the musl compiled executable, but on ubuntu 14.04 in circle, non-trivial chain_err iteration cause segfaults.

Upstream issue: https://github.com/rust-lang/rust/issues/47551
ring complains about relocations of their C objects even though i've [tried forking and adding fPIC](https://github.com/clux/ring/commit/c54b2c9b92ed67cb5fbdf315de2799327d522908). 

zesty/stretch validate this (think they link with -pie), and thus we can't upgrade from xenial yet.
Currently not been able to do it due to how it attempts to pull in linux headers, and the ones that musl supply appear to be insufficient. But maybe there's something we can do.

Note that this may not be necessary if hyper is successfully migrating to a native rust tls stack because we can then probably start dropping it from the images altogether as people stop using it. 

People are forced to make a choice with hyper 0.10 anyway as it was pulled out of the hyper crate.