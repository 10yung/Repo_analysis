I have a problem with libcurl, which is giving me inconsistent redirect behavior on Android and Linux.  I'm doing a GET request, which fetches a login page.  I get an HTTP 302 response back, and then a second GET request is made (an automatic redirect).  However, there is a slight difference in that second request on the two platforms.  The one done on Ubuntu works, and that done on Android does not, due to space chars in the URL.

// From Linux (Ubuntu 18.04.3), I get the expected response from this redirected GET request.  It has plus characters on either side of 'profile'
~~~
GET /oauth/authorize?response_type=code&redirect_uri=https://sp.auth.adobe.com/adobe-services/oauth2&state=l3ArqA&scope=openid+profile+https://login.comcast.net/pdp/tve&client_id=adobepass-usa&acr_values=urn:oasis:names:tc:SAML:2.0:ac:classes:InternetProtocol HTTP/1.1
Host: oauth.xfinity.com
Accept: */*
ap_42: anonymous
ap_11: i686
ap_z: Mozilla/5.0 (X11; Linux i686; rv:47.0) Gecko/20100101 Firefox/47.0
User-Agent: Mozilla/5.0 (X11; Linux i686; rv:47.0) Gecko/20100101 Firefox/47.0
Cache-Control: no-cache
~~~

// On Android (libcurl is running in a native C++ module), almost the same redirect request is made.  But instead of plus characters, there are space characters.  This result in a Bad Request 400 response
~~~
GET /oauth/authorize?response_type=code&redirect_uri=https://sp.auth.adobe.com/adobe-services/oauth2&state=pzz8kz&scope=openid profile https://login.comcast.net/pdp/tve&client_id=adobepass-usa&acr_values=urn:oasis:names:tc:SAML:2.0:ac:classes:InternetProtocol HTTP/1.1
    Host: oauth.xfinity.com
    Accept: */*
    ap_42: anonymous
    ap_11: i686
    ap_z: Mozilla/5.0 (X11; Linux i686; rv:47.0) Gecko/20100101 Firefox/47.0
    User-Agent: Mozilla/5.0 (X11; Linux i686; rv:47.0) Gecko/20100101 Firefox/47.0
    Cache-Control: no-cache
~~~

The Android library is newer:  7.64.0.  The Linux library is 7.58.0
    linux:    curl version 73a00
    android:  curl version 74000

Headers are the same, the original requests are byte-for-byte the same. The original GET request and headers is this:
https://sp.auth.adobe.com/adobe-services/authenticate/saml/4065696?noflash=true&mso_id=Comcast_SSO&requestor_id=usa&no_iframe=false&domain_name=adobe.com&redirect_url=https%3A%2F%2Fwww.usanetwork.com%2Fmrrobot%2Fvideos%2F408-request-timeout
~~~
     add HTTP header: ap_42: anonymous
     add HTTP header: ap_11: i686
     add HTTP header: ap_z: Mozilla/5.0 (X11; Linux i686; rv:47.0) Gecko/20100101 Firefox/47.0
     add HTTP header: User-Agent: Mozilla/5.0 (X11; Linux i686; rv:47.0) Gecko/20100101 Firefox/47.0
     add HTTP header: Cache-Control: no-cache
~~~

On Linux (as on Android), when the HTTP 302 response comes after the first request, there are spaces in the Location field.  These are then converted to plus chars (only on Linux), and the "Issue another request to this URL" has correctly formed URL. 
~~~
< HTTP/1.1 302 Found
< Access-Control-Allow-Credentials: true
< Access-Control-Allow-Headers: ap_11,ap_42,ap_z,ap_19,ap_23,authorization
< Access-Control-Allow-Methods: POST,GET,OPTIONS,DELETE
< Cache-Control: No-Cache
< Content-Type: text/plain
< Date: Sat, 18 Jan 2020 10:47:53 GMT
< Location: https://oauth.xfinity.com/oauth/authorize?response_type=code&redirect_uri=https://sp.auth.adobe.com/adobe-services/oauth2&state=42IvhG&scope=openid profile https://login.comcast.net/pdp/tve&client_id=adobepass-usa&acr_values=urn:oasis:names:tc:SAML:2.0:ac:classes:InternetProtocol
< P3P: CP="NOI DSP COR CURa ADMa DEVa OUR BUS IND UNI COM NAV STA"
< Server: api-gateway/1.9.3.1
< Set-Cookie: passgw=gw-ap-prod-uw2; Path=/; HttpOnly
< Set-Cookie: AWSALB=XBWIX/jlQgrqYNPB9iCpC6gV7fIU22V8z4ZsU+4JDmDOkMpZeex91+Tu4XXqLhFkgkoM/BmA3d1w8Fz9GWv/74yJfbkS8siR1wRhIzITTw34gBYmJMe4tUOeSQfY; Expires=Sat, 25 Jan 2020 10:47:53 GMT; Path=/
< Set-Cookie: JSESSIONID=036106E0B98A44D73BE4E7DD979FAEF7; Path=/; HttpOnly
< Set-Cookie: redirect_url=https%3A%2F%2Fwww.usanetwork.com%2Fmrrobot%2Fvideos%2F408-request-timeout; Expires=Thu, 05-Feb-2088 14:02:00 GMT; Path=/; Secure
< Set-Cookie: client_type=html5; Expires=Thu, 05-Feb-2088 14:02:00 GMT; Path=/; Secure
< Set-Cookie: client_version=2.35; Expires=Thu, 05-Feb-2088 14:02:00 GMT; Path=/; Secure
< X-Request-Id: 7cuu8Oqs4MBzug8CgVS0qRGqOP0WeI94
< Content-Length: 0
< Connection: keep-alive
<  Connection #1 to host sp.auth.adobe.com left intact
< Issue another request to this URL: 'https://oauth.xfinity.com/oauth/authorize?response_type=code&redirect_uri=https://sp.auth.adobe.com/adobe-services/oauth2&state=42IvhG&scope=openid+profile+https://login.comcast.net/pdp/tve&client_id=adobepass-usa&acr_values=urn:oasis:names:tc:SAML:2.0:ac:classes:InternetProtocol'
~~~

I'm at a loss with how to get past this.

Thanks all, and greetings from Innsbruck!


The README file has incorrect info on how to build CURL.

### I did this
Downloaded source from github. Read the file README, which told me to see the file INSTALL for how-to-build instructions.

### I expected the following
To find an INSTALL file. Failing that, a "configure" file.
After some research, I found https://curl.haxx.se/docs/install.html which had the correct build instructions.

### curl/libcurl version
7.68.0

### operating system
Xubuntu

<!-- Only file bugs here! Ask questions on the mailing lists https://curl.haxx.se/mail/

     SECURITY RELATED? Post it here: https://hackerone.com/curl

     There are collections of known issues to be aware of:
     https://curl.haxx.se/docs/knownbugs.html
     https://curl.haxx.se/docs/todo.html       -->

### I did this

I did not use curl_multi_wait in my app

### I expected the following

For curl not to allocate a socketpair for each multi handle

### curl/libcurl version

master

[curl -V output]

### operating system

linux

Ideally Curl should allow one or more of these options:

1) configure switch to decide if you want to enable socketpairs for waking up the multi
2) make socket pairs on demand with multi_opt to toggle enabledness

regards


<!-- Only file bugs here! Ask questions on the mailing lists https://curl.haxx.se/mail/

     SECURITY RELATED? Post it here: https://hackerone.com/curl

     There are collections of known issues to be aware of:
     https://curl.haxx.se/docs/knownbugs.html
     https://curl.haxx.se/docs/todo.html       -->

### I did this
I tried SMTP with IDN in sender email, but I got a syntax error
```
220  ESMTP q20si0ins.0 - gsmtp

EHLO insq20

250- at your service, [2002:a05:6600:2c54::]

250-SIZE 35882577

250-8BITMIME

250-STARTTLS

250-ENHANCEDSTATUSCODES

250-PIPELINING

250-CHUNKING

250 SMTPUTF8

MAIL FROM:<envelopefrom@好的idn.ws>

555 5.5.2 Syntax error. q20si0ins.0 - gsmtp

MAIL failed: 555
QUIT

221 2.0.0 closing connection q20si0ins.0 - gsmtp
```


### I expected the following

I expected SMTP to support IDN in both sender and recipient addresses to have IDN (similar python library does).

### curl/libcurl version

[curl -V output]

### operating system

Linux
There is a large changes how libcurl uploading chunked encoding data (between 7.39 and 7.68).  
No static 16k buffer anymore, user is allowed to set it between 16k and 2mb in current version with CURLOPT_UPLOAD_BUFFERSIZE.
BUT it is limited in url.h and setopt.c to be not smaller than UPLOADBUFFER_MIN.
Sadly, but chunked real-time uploading of small data (1-6k) is NOT possible anymore in libcurl. only large and super-duper-fast transfers allowed.
libcurl for years was like swiss army knife in networking. it can do anything.... but not anymore :(

im doing http posting uploading with callback function and multipart-formdata chunked encoding.
in **7.39** 
read callback is flushing 1k of data to the network without problems withing milliseconds:
[13:25:16.722  size=1028 off=0
[13:25:16.844  size=1032 off=1028
[13:25:16.968  size=1032 off=2060
[13:25:17.088  size=1204 off=3092
[13:25:17.218  size=1032 off=4296
[13:25:17.337  size=1032 off=5328
no seconds lag between libcurl callback function invocation. 

in **7.68** (with CURLOPT_UPLOAD_BUFFERSIZE set to UPLOADBUFFER_MIN) 
[13:29:46.607 size=8037 off=0
[13:29:46.609 size=6408 off=8037
[13:29:46.610 size=1778 off=14445
[13:29:48.607 size=8190 off=16223
[13:29:48.609 size=7884 off=24413
[13:29:48.610 size=298 off=32297
see the gap between 46 and 48 second.  It's not real time anymore, and no option to set buffer sizes below 16k.


get the Bearer token from the old_conn struct since it may be new for this request even when we re-use an existing connection
"*** WARNING: curl_easy_setopt_ccsid() should be reworked ***" appears at runtime on OS400 when using curl_easy_setopt_ccsid() because runtime checks in ccsidcurl.c did not account for conditional directives.

As discussed in pull request #4789, a better way to handle this would be to remove the conditional directives so that the enumeration indices don't change with compiler options, also remove the runtime check and replace with a build time check. 
Building curl 7.68.0 under Mac OS 10.15.2 with gcc-9 with the Secure Transport enabled fails with the following errors:

```
In file included from /Library/Developer/CommandLineTools/SDKs/MacOSX10.15.sdk/System/Library/Frameworks/Security.framework/Headers/AuthSession.h:32,
                 from /Library/Developer/CommandLineTools/SDKs/MacOSX10.15.sdk/System/Library/Frameworks/Security.framework/Headers/Security.h:42,
                 from vtls/sectransp.c:45:
/Library/Developer/CommandLineTools/SDKs/MacOSX10.15.sdk/System/Library/Frameworks/Security.framework/Headers/Authorization.h:193:7: error: variably modified 'bytes' at file scope
  193 |  char bytes[kAuthorizationExternalFormLength];
      |       ^~~~~
vtls/sectransp.c: In function 'show_verbose_server_cert':
vtls/sectransp.c:2713:6: error: 'SecTrustEvaluateAsync' undeclared (first use in this function); did you mean 'SecTrustEvaluate'?
 2713 |   if(SecTrustEvaluateAsync != NULL) {
      |      ^~~~~~~~~~~~~~~~~~~~~
      |      SecTrustEvaluate
vtls/sectransp.c:2713:6: note: each undeclared identifier is reported only once for each function it appears in
```

### I did this
```
% curl -O https://curl.haxx.se/download/curl-7.68.0.tar.gz
% tar xf curl-7.68.0.tar.gz
% cd curl-7.68.0
% CC=gcc-9 ./configure --with-darwinssl
% make
```

### I expected the following

I expected to successfully build curl.

### curl/libcurl version

7.68.0

### operating system

Mac OS 10.15.2

### I did this

Run test 582 in a wolfssh build. It fails.

### I expected the following

The test should run fine.

### curl/libcurl version

git master
When *ABORT is returned from the callback, the transfer must stop
immediately and the return code must be passed back to the parent all
the way up to Curl_fillreadbuffer().

Test 644 was supposed to verify this but it wasn't done right. Now it
makes sure the callback is never called again after CURL_READFUNC_ABORT
is returned and it also makes sure the data transfer is actually
stopped as instructed.

Also removed the 'flaky' keyword since the test is now modified.

Fixes #4813
Reported-by: MrdUkk on github