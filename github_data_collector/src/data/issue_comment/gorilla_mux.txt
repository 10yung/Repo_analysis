Repro:
* Add a Host route with a var and without the port;
* Make a query with a host that contains a port;
* See that the route matches;

Actual:
The var is not present in the route vars, even thou the expected handler is triggered

Expected:
The var should be there.

Hello,
My project begin to growth and i'm asking myself about documentation generator, do you know if they are existing generator of api documentation ( with annotation maybe ? ) or if it's planned to integreate API generator by routes or by annotation ?


Best regards,
Henri
**Describe the bug**

I'm using a PathPrefix subrouter /product, and it has a handler / (example taken from the mux readme).
I'm not sure if this is a bug or not, is not what I expected since StrictSlash is set to false.

…

**Versions**
> Go version: go version go1.13.5 linux/amd64
> package version: v1.7.3

…


**Steps to Reproduce**
> How can the bug be triggered?

See attached code.
…


**Expected behavior**
> What output or behaviour were you expecting instead?

One of:
* Both requests work
* The first is 200 OK, the second is 301 redirected to the first

…

**Code Snippets**
> A minimum viable code snippet can be useful! (use backticks to format it).

```go
package main

import (
	"fmt"
	"log"
	"net/http"
	"time"

	"github.com/gorilla/mux"
)

func ProductsHandler(w http.ResponseWriter, r *http.Request) {
	fmt.Println("handler called!")
}

func main() {
	r := mux.NewRouter()
	s := r.PathPrefix("/products").Subrouter()
	s.HandleFunc("/", ProductsHandler)

	go func() {
		log.Fatal(http.ListenAndServe(":3333", r))
	}()

	time.Sleep(time.Second)

	res, err := http.Get("http://localhost:3333/products")
	if err != nil {
		log.Fatal(err)
	}
	fmt.Printf("Status code: %s\n", res.Status) // 404 not found

	res, err = http.Get("http://localhost:3333/products/")
	if err != nil {
		log.Fatal(err)
	}
	fmt.Printf("Status code: %s\n", res.Status) // 200 ok
}
```
…

**Describe the bug**

`Path()` before `Subrouter()` must have a trailing slash for the subrouter's handlers to be invoked. Even more, the request path also must contain the trailing slash, otherwise the handlers are never invoked.


**Versions**

go version go1.13.4 linux/amd64
github.com/gorilla/mux v1.7.3



**Steps to Reproduce**

``` go
package main

import (
	"fmt"
	"github.com/gorilla/mux"
	"log"
	"net/http"
	"time"
)

func handler(w http.ResponseWriter, r *http.Request) {
	fmt.Println("PATH =", r.URL.Path)
}

func main() {
	root := mux.NewRouter()

	// Only if both paths end with / the handler is invoked.
	const pathToMatch = "/xxx"
	const pathToGet = "/xxx"
	sr := root.Path(pathToMatch).Subrouter()

	sr.HandleFunc("/{_:.*}", handler)

	go func() {
		log.Fatal(http.ListenAndServe(":3333", root))
	}()

	time.Sleep(time.Second)

	if _, err := http.Get("http://localhost:3333" + pathToGet); err != nil {
		log.Fatal(err)
	}
}
```

The handler is invoked only if both `pathToMatch` and `pathToGet` end with a trailing slash.

**Expected behavior**

Any combination of "/xxx" and "/xxx/" works, as it does without the subrouter:

``` go
package main

import (
	"fmt"
	"github.com/gorilla/mux"
	"log"
	"net/http"
	"time"
)

func handler(w http.ResponseWriter, r *http.Request) {
	fmt.Println("PATH =", r.URL.Path)
}

func main() {
	r := mux.NewRouter()

	// Try adding a trailing slash to any of the paths or both of them.
	// The handler is invoked in any of the four cases.
	const pathToMatch = "/xxx"
	const pathToGet = "/xxx"

	r.HandleFunc(pathToMatch, handler)

	go func() {
		log.Fatal(http.ListenAndServe(":3333", r))
	}()

	time.Sleep(time.Second)

	if _, err := http.Get("http://localhost:3333" + pathToGet); err != nil {
		log.Fatal(err)
	}
}
```

In the README there is an example to serve SPA.
This example works fine on Linux, but not on Windows.

This seems to be the problem:
```
// get the absolute path to prevent directory traversal
path, err := filepath.Abs(r.URL.Path)
```
This seems to work like this:
Linux: `/favicon.ico` -> `/favicon.ico `
Windows: `/favicon.ico` -> `C:\favicon.ico`

The result on windows is a path like this: `public\C:\favicon.ico`
**Describe the bug**
> A clear and concise description of what the bug is.

We have an application running in kubernetes with url www.example.com and subpath /customer/someone.

In this application we use the mux as follows:
```
import (
	"net/http"
	//etc...

	"github.com/gorilla/mux"
)

func queryHandler(w http.ResponseWriter, r *http.Request) {
	w.Header().Set("content-type", "text/plain")

	code, err := w.Write([]byte("status ok"))
	if err != nil {
		logrus.Errorf("Can't deliver response: %v (status %v)", err, code)
	}
}

func main() {
	router := mux.NewRouter()
	router.StrictSlash(true)
	router.Methods(http.MethodPost).Path("/query/").Handler(http.HandlerFunc(queryHandler))
}
```

Now if a request to www.example.com/customer/someone/query is done the strictslash sees a missing slash and replies with a 301 REDIRECT to www.example.com/query/ thus omitting the subpath and this is not recognised by our ingress so we get a 404 eventually. I would expect the URL to go to www.example.com/customer/someone/query/

**Versions**
> Go version: `go version`
> package version: run `git rev-parse HEAD` inside the repo

Go version: 

> go version go1.12.6 windows/amd64

> package version: d83b6ffe499a29cc05fc977988d0392851779620

**Steps to Reproduce**
> How can the bug be triggered?

Run a pod in kubernetes (or something similar) with an ingress that redirects the subpath to a certain pod. Inside that pod the code describe above causes an issue if a path without a slash is queried. 


**Expected behavior**
> What output or behaviour were you expecting instead?

I was expecting the path to stay after the redirect.

**Code Snippets**
> A minimum viable code snippet can be useful! (use backticks to format it).

see original description

**Summary of Changes**

1. Add a line that makes first example work


For me first example didn't work until I added `ListenAndServe`, if this is not needed feel free to close the pr.

**Describe the problem you're having**
> A clear and concise description of what the bug is.

```
	router := mux.NewRouter()
	router.Path("/token/create-orphan").
		Methods("POST").
		Schemes("https").
		Headers("Content-Type", "application/json").
		HandlerFunc(CreateOrphanTokenHandler)
...
	srv := &http.Server{
		Handler: router,
...
```

When I do a POST to https://localhost:[myport]/token/create-orphan everything works as expected.

However, after I do a `go mod init; go build` then re-run my project, the POST fails with a 404. 

The only way I can get it work work after the `go mod init` change is when I comment out the `Schemes()` call.... which seems odd

When I remove the `go.mod/go.sum` and rebuild, then it works again with the `Schemes()` re-enabled.

**Versions**

mux: 1.7.3
go version go1.13.3 darwin/amd64

go.mod
```
...
require (
	github.com/asaskevich/govalidator v0.0.0-20190424111038-f61b66f89f4a
	github.com/gorilla/mux v1.7.3
	github.com/shurcooL/httpfs v0.0.0-20190707220628-8d4bc4ba7749 // indirect
	github.com/shurcooL/vfsgen v0.0.0-20181202132449-6a9ea43bcacd // indirect
	github.com/sirupsen/logrus v1.4.2
	github.com/tidwall/gjson v1.3.4
)
```

**"Show me the code!"**

See above

**Describe the bug**

About: Matching Routes - Host

> https://github.com/gorilla/mux#matching-routes

The docs:

```go
r := mux.NewRouter()
// Only matches if domain is "www.example.com".
r.Host("www.example.com") // this
// Matches a dynamic subdomain.
r.Host("{subdomain:[a-z]+}.example.com")
```

It will not work if `the host` is passed in without a scheme.

**Versions**
> Go version: `go version go1.13.4 darwin/amd64`
> package version: `github.com/gorilla/mux v1.7.3`

**Steps to Reproduce / Code Snippets**

This not work:

```go
func main() {
	r := mux.NewRouter()
	r.Host("localhost:8080")
	r.Handle("/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		w.Write([]byte("ok"))
	}))
	http.ListenAndServe(":8080", r)
}
```

This work:

```go
func main() {
	r := mux.NewRouter()
	r.Host("http://localhost:8080")
	r.Handle("/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		w.Write([]byte("ok"))
	}))
	http.ListenAndServe(":8080", r)
}
```

**Expected behavior**

Work without scheme

**Describe the bug**
> A clear and concise description of what the bug is.

On a Windows 10 64 bits platform, create a web application.
Set a breakpoint inside an IDE like LiteIDE.
Install Delve as debugger then start debugging.
The message is 
.... go/pkg/mod/github.com/gorilla/mux@v1.7.3/mux@v1.7.3.debug.exe is not executable

When running the executable directly from command line the message from Windows is even more explicit : 16 bits Application not allowed (translated from the french message on my computer).

**Versions**
> Go version: `go version`
go version go1.13.3 windows/amd64