I found a bunch of these in libexpat:
```Rust
(*parser).m_startElementHandler =
    ::std::mem::transmute::<intptr_t, XML_StartElementHandler>(NULL as intptr_t);
```

where `XML_StartElementHandler` is an `Option<FnSig>`. This would be much much cleaner as `None` assignments.

I'm leaning towards wanting this in the transpiler so that it's much cleaner transpiled code out of the box. And `NULL` is generated as a `const` value, so it might be easy enough to examine.
Hi there,

I've read [this article](https://immunant.com/blog/2020/01/quake3/) about how good C2Rust is. It's a nice post, like it very much... I am author of the Bear and scan-build tools. And would like to learn how these tools would be more useful to this project. I want to understand the use cases for C2Rust.

- I got decided to improve Bear to be working on OSX, so a single tool could do better than two.
- Would be happy to implement the link command capture. I just need how an entry would look like.
- I am interested to know how you treat the compilation entries. Does it matter to keep the full path of the compiler, or that is replaced by one of the tools you developed?
- What would be the ideal install process of it? (Is cmake is more difficult than pip? Would cargo be better?)
- What would be ideal usage of a compilation database generator tool?
- Is it desired to speed up the process by not call the real compiler? (But fake the output to make the build system happy)
- Is it desired to generate entries for include files separately?

Thanks in advance!
Submitted by @Lokathor via email:

> Your need for aligned globals has come up before and the best way to get some aligned static data without making a new struct every single time is to generalize what you did with the SSEMask type:

```rust

#[repr(align(16))]

pub struct Align16<T>(pub T);

 

static ssemask: &[u8; 16] = &Align16([7_u8; 16]).0;

 

#[test]

fn aligned() {

    assert_eq!(ssemask as *const _ as usize % 16, 0);

}

```

I like this approach, we could implement it for a few common aligment values: 16 (common for SSE values), 32, 64 (common for cache-aligned data) and maybe 128.
Hey, I ran the following command on the [rustybox](https://github.com/samuela/rustybox) codebase on [master](https://github.com/samuela/rustybox/tree/b7d7f01bdff8a85dfb7dcf984999b82a8ba0757a):
```bash
$ RUST_BACKTRACE=1 c2rust refactor --cargo -r print select target 'crate; desc(match_expr(2));'
```

And got the following error:
```
thread 'main' panicked at 'mismatch between unexpanded and expanded ASTs', /usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/c2rust-refactor-0.14.0/src/collapse/mac_table.rs:404:23
stack backtrace:
   0: backtrace::backtrace::libunwind::trace
             at /cargo/registry/src/github.com-1ecc6299db9ec823/backtrace-0.3.40/src/backtrace/libunwind.rs:88
   1: backtrace::backtrace::trace_unsynchronized
             at /cargo/registry/src/github.com-1ecc6299db9ec823/backtrace-0.3.40/src/backtrace/mod.rs:66
   2: std::sys_common::backtrace::_print_fmt
             at src/libstd/sys_common/backtrace.rs:84
   3: <std::sys_common::backtrace::_print::DisplayBacktrace as core::fmt::Display>::fmt
             at src/libstd/sys_common/backtrace.rs:61
   4: core::fmt::write
             at src/libcore/fmt/mod.rs:1024
   5: std::io::Write::write_fmt
             at src/libstd/io/mod.rs:1428
   6: std::sys_common::backtrace::_print
             at src/libstd/sys_common/backtrace.rs:65
   7: std::sys_common::backtrace::print
             at src/libstd/sys_common/backtrace.rs:50
   8: std::panicking::default_hook::{{closure}}
             at src/libstd/panicking.rs:193
   9: std::panicking::default_hook
             at src/libstd/panicking.rs:210
  10: rustc_driver::report_ice
  11: <alloc::boxed::Box<F> as core::ops::function::Fn<A>>::call
             at /rustc/6d77e45f01079fe3d40180b3e256e414ab379f63/src/liballoc/boxed.rs:983
  12: proc_macro::bridge::client::<impl proc_macro::bridge::Bridge>::enter::{{closure}}::{{closure}}
             at /rustc/6d77e45f01079fe3d40180b3e256e414ab379f63/src/libproc_macro/bridge/client.rs:305
  13: std::panicking::rust_panic_with_hook
             at src/libstd/panicking.rs:475
  14: std::panicking::begin_panic
  15: <syntax::ast::Item as c2rust_refactor::collapse::mac_table::CollectMacros>::collect_macros
  16: c2rust_refactor::collapse::mac_table::collect_macros_seq
  17: <syntax::ast::Item as c2rust_refactor::collapse::mac_table::CollectMacros>::collect_macros
  18: c2rust_refactor::collapse::mac_table::collect_macros_seq
  19: <syntax::ast::Item as c2rust_refactor::collapse::mac_table::CollectMacros>::collect_macros
  20: c2rust_refactor::collapse::mac_table::collect_macros_seq
  21: c2rust_refactor::collapse::mac_table::collect_macro_invocations
  22: c2rust_refactor::collapse::CollapseInfo::collect
  23: rustc_interface::queries::<impl rustc_interface::interface::Compiler>::enter
  24: <c2rust_refactor::command::DriverCommand<F> as c2rust_refactor::command::Command>::run
  25: c2rust_refactor::command::RefactorState::run
  26: std::thread::local::LocalKey<T>::with
  27: scoped_tls::ScopedKey<T>::set
  28: syntax::with_globals
  29: c2rust_refactor::driver::run_refactoring
  30: <std::panic::AssertUnwindSafe<F> as core::ops::function::FnOnce<()>>::call_once
  31: std::panicking::try::do_call
  32: __rust_maybe_catch_panic
             at src/libpanic_unwind/lib.rs:78
  33: rustc_driver::catch_fatal_errors
  34: c2rust_refactor::lib_main
  35: c2rust_refactor::main
  36: std::rt::lang_start::{{closure}}
  37: std::rt::lang_start_internal::{{closure}}
             at src/libstd/rt.rs:52
  38: std::panicking::try::do_call
             at src/libstd/panicking.rs:292
  39: __rust_maybe_catch_panic
             at src/libpanic_unwind/lib.rs:78
  40: std::panicking::try
             at src/libstd/panicking.rs:270
  41: std::panic::catch_unwind
             at src/libstd/panic.rs:394
  42: std::rt::lang_start_internal
             at src/libstd/rt.rs:51
  43: main
  44: __libc_start_main
  45: _start
note: Some details are omitted, run with `RUST_BACKTRACE=full` for a verbose backtrace.

error: internal compiler error: unexpected panic

error: Unrecognized option: 'cargo'
```

Versions:
```bash
$ c2rust refactor --version
c2rust-refactor 0.9.0
```

I'm running this all in a docker container on macos using the following Dockerfile:
```Dockerfile
FROM rust:1.40

WORKDIR /usr/src

# Install deps
RUN apt update && \
    apt install -y build-essential llvm-6.0 clang-6.0 libclang-6.0-dev cmake libssl-dev pkg-config python3

# Install required rust nightly version
RUN rustup install nightly-2019-12-05 && \
    rustup component add --toolchain nightly-2019-12-05 rustfmt && \
    rustup component add --toolchain nightly-2019-12-05 rustc-dev

# Install c2rust
RUN LLVM_CONFIG_PATH=/usr/lib/llvm-6.0/bin/llvm-config cargo +nightly-2019-12-05 install c2rust

# Install dev tools
RUN apt install -y vim
```
I just ran `c2rust refactor link_funcs --cargo --rewrite-mode inplace` which is an awesome command but unfortunately it also made some "very wrong" changes to my sources. For example,

```rust
// My comment.
assert!(mycondition);
```
became
```rust
if !mycondition {
  {
    ::std::rt::begin_panic(
      "assertion failed: mycondition",
      &("applets/applet_tables.rs", 5467u32, 5u32),
    )
  }
}
```
which produces an error:
```
error[E0658]: use of unstable library feature 'libstd_sys_internals': used by the panic! macro
   --> applets/applet_tables.rs:992:9
    |
992 |         ::std::rt::begin_panic(
    |         ^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: add `#![feature(libstd_sys_internals)]` to the crate attributes to enable
```

In addition, code like
```rust
    #[cfg(feature = "xzcat")]
    appy_mcappface.push(bb_applet {
      name: "xzcat",
      main: "unxz",
      entrypoint: unxz_main,
      install_loc: InstallLoc::DIR_USR_BIN,
      need_suid: SUID::SUID_DROP,
      noexec: false,
      nofork: false,
      usage: std::include_str!("../usage/xzcat"),
    });
```
is deleted completely when the feature flag is not listed as a default! This seems like subtly pernicious behavior that the authors of large-scale refactoring changes could very easily miss.

**Version of `c2rust`:** Latest master (2e656759ee5fe)
**Contents of `compile_commands.json`:**
```json
[
    {
        "arguments": [
            "cc",
            "-c",
            "-march=native",
            "-std=c11",
            "-O2",
            "z_validate.c"
        ],
        "directory": "/sdb/src/rust-isutf8/src/zwegner",
        "file": "z_validate.c"
    }
]
```
**Contents of `z_validate.c`:** https://github.com/zwegner/faster-utf8-validator/blob/master/z_validate.c
**Output of `c2rust transpile compile_commands.json`:**
```
[arni][~/â€¦/rust-isutf8/src/zwegner][master]% c2rust transpile compile_commands.json
Transpiling z_validate.c
z_validate.c:24:10: fatal error: 'immintrin.h' file not found
#include <immintrin.h>
         ^~~~~~~~~~~~~
1 error generated.
Error while processing /sdb/src/rust-isutf8/src/zwegner/z_validate.c.
warning: Missing child 94790605216440 of node AstNode { tag: TagIfStmt, children: [Some(94790605216440), Some(94790605216376), None], loc: SrcSpan { fileid: 5, begin_line: 286, begin_column: 5, end_line: 287, end_column: 16 }, type_id: None, rvalue: LValue, macro_expansions: [], extras: [] }
Exported Clang AST was invalid. Check warnings above for unimplemented features.
--> /sdb/src/rust-isutf8/src/zwegner/z_validate.c:286:5
 [-Wclang-ast]
warning: Missing child 94790605219528 of node AstNode { tag: TagIfStmt, children: [Some(94790605219528), Some(94790605219496), None], loc: SrcSpan { fileid: 5, begin_line: 321, begin_column: 5, end_line: 332, end_column: 5 }, type_id: None, rvalue: LValue, macro_expansions: [], extras: [] }
Exported Clang AST was invalid. Check warnings above for unimplemented features.
--> /sdb/src/rust-isutf8/src/zwegner/z_validate.c:321:5
 [-Wclang-ast]
warning: Missing child 94790605219400 of node AstNode { tag: TagIfStmt, children: [Some(94790605219400), Some(94790605219384), None], loc: SrcSpan { fileid: 5, begin_line: 330, begin_column: 9, end_line: 331, end_column: 20 }, type_id: None, rvalue: LValue, macro_expansions: [], extras: [] }
Exported Clang AST was invalid. Check warnings above for unimplemented features.
--> /sdb/src/rust-isutf8/src/zwegner/z_validate.c:330:9
 [-Wclang-ast]
warning: Missing child 94790605218344 of node AstNode { tag: TagIfStmt, children: [Some(94790605218344), Some(94790605218328), None], loc: SrcSpan { fileid: 5, begin_line: 303, begin_column: 5, end_line: 318, end_column: 5 }, type_id: None, rvalue: LValue, macro_expansions: [], extras: [] }
Exported Clang AST was invalid. Check warnings above for unimplemented features.
--> /sdb/src/rust-isutf8/src/zwegner/z_validate.c:303:5
 [-Wclang-ast]
warning: Missing child 94790605215752 of node AstNode { tag: TagIfStmt, children: [Some(94790605215752), Some(94790605213856), None], loc: SrcSpan { fileid: 5, begin_line: 277, begin_column: 5, end_line: 278, end_column: 16 }, type_id: None, rvalue: LValue, macro_expansions: [], extras: [] }
Exported Clang AST was invalid. Check warnings above for unimplemented features.
--> /sdb/src/rust-isutf8/src/zwegner/z_validate.c:277:5
 [-Wclang-ast]
error: Failed to translate z_validate_utf8: bad condition type

```
I think reorg is now stable enough to be turned on by default. However, I'd like https://github.com/rust-lang/rust/issues/66464 to get fixed before we do. Large codebases (e.g. python2 & nginx) trigger this bug after doing reorg.
c2rust current transpiles `NULL` pointers as `0 as *mut T`, but it would be a bit cleaner and more rust-y to instead produce `std::ptr::null_mut::<T>()`.
We should be able to easily transpile all translation units in parallel, either in separate processes or threads. Just needs to be implemented at some point.