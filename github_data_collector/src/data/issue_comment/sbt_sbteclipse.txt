See: PR #371 Add support for Java Execution Environments 9, 10, 11, 12, 13.

Hi,
I am working on eclipse for last one year. Now I faced an issue in using scala project settings instead of default. Eclipse cannot apply the scala installation.

I attached Screen shot in which my project required scala installation is selected but apply and close button is not working on any type of scala installation.
If anyone can help me?
![screenshot from 2019-02-14 14-40-54](https://user-images.githubusercontent.com/35531627/52777877-9bc9c580-3066-11e9-9fe1-82cc56bc5315.png)

 
I would love to be able to customize the link names created by [`createLinkName`](https://github.com/sbt/sbteclipse/blob/264e4bbbc5ba90839f18b4c7afd9d00da26c3695/src/main/scala-sbt-1.0/com/typesafe/sbteclipse/core/Eclipse.scala#L258).

Currently doing a [crossProject](https://github.com/portable-scala/sbt-crossproject) results in some enormous link names for me. It becomes pretty tedious to tell the different links apart quickly as there is so much redundant path info at the beginning whereas the only meaningful bit is at the end.

Alternatively, instead of full customization, another solution might be to have some builtin link naming convention for known [`CrossTypes`](https://github.com/portable-scala/sbt-crossproject#crosstypes) (ie, `CrossType.Pure` or `CrossType.Full`) that reduces some of the redundancy.

When I link my projects together in a certain way, sbt produces this error when running `sbt eclipse`.
```
[info] About to create Eclipse project files for your project(s).
[error] a required artifact is not listed by module descriptor: *#*!*.*
[error] a required artifact is not listed by module descriptor: *#*!*.*
[error] a required artifact is not listed by module descriptor: *#*!*.*
[error] a required artifact is not listed by module descriptor: *#*!*.*
[error] a required artifact is not listed by module descriptor: *#*!*.*
[error] a required artifact is not listed by module descriptor: *#*!*.*
...
```
Everything else works fine, compiling, building assemblies,... Even the project generation doesn't seem to suffer.

One special thing about the projects is that they transitively depend on other modules in the project.

Say my project has 5 modules, mA, mB, mC, mD, mE.
And one extnernal dependency (which can be used both as a source as a binary dependency) d1.

They depend like this.
```

mA <- mB <- mC <- mD -
       ^     ` <- mE - `
       |               |
        ` d1 < -------Â´
        
```
It goes sour in modules D and E, but if I look at the dependency tree everything looks as expected (e.g. version conflicts are resolved as expected).

One thing I might add is that I systemically use `EclipseKeys.withSource := true`.
And when I run `sbt updateSbtClassifiers`, I get a somewhat unexpected failed download:
```
[warn]  ::::::::::::::::::::::::::::::::::::::::::::::
[warn]  ::              FAILED DOWNLOADS            ::
[warn]  :: ^ see resolution messages for details  ^ ::
[warn]  ::::::::::::::::::::::::::::::::::::::::::::::
[warn]  :: com.typesafe.sbteclipse#sbteclipse-plugin;5.2.4!sbteclipse-plugin.jar(src)
[warn]  ::::::::::::::::::::::::::::::::::::::::::::::
```
I will note, the latter was observed by trying pretty much anything, without any success.
As stated, everything works, I'd just like to get some understanding why it produces the error and ideally how to avoid it, as seeing errors from "build output" hurts the eyes.

sbt: 1.1.4
sbt-eclipse: 5.2.4
scala: 2.12.5

1. motivation: most SBT projects are ignorant of the eclipse environment, 
in the sense, of how things are named in the workspace, and possible name conflicts

2. for example
* scala-js https://github.com/scala-js/scala-js/issues/3176
* scala-native https://github.com/scala-native/scala-native/issues/1193

3. this proposal is to implement better name policy 
* to be supported / provided / enforced by this plugin by default
* similar to the `pr` https://github.com/scala-native/scala-native/pull/1194

I created inner project using guidelines from [Documentation](http://www.scala-sbt.org/1.0/docs/Multi-Project.html)
Project compiles under SBT and runs correctly, but when I invoke ```eclipse``` it:
1) Doesn't honor ```EclipseKeys.withSource := false``` and ```EclipseKeys.withJavadoc := false``` for subproject (it downloads it anyway)
2) In Eclipse folder containing source of a subproject is not being added into ```Source folder``` in Build Path
3) Dependencies for subproject are not being imported into Eclipse despite ```aggregate(backend).dependsOn(backend)```
I'm using the [SBT protobuf plugin](https://github.com/sbt/sbt-protobuf) together with sbteclipse, on SBT 1.0.1.
```
addSbtPlugin("com.github.gseitz" % "sbt-protobuf" % "0.6.3")
addSbtPlugin("com.typesafe.sbteclipse" % "sbteclipse-plugin" % "5.2.2")
```
Now it seems that `sbteclipse` doesn't "see" the extra `managedSources` that `.enablePlugins(ProtobufPlugin)` puts into a project configuration, _unless_ that's explicitly invoked before running `eclipse`.

In other words, in a clean workspace, `sbt eclipse` will generate a correct `.classpath`. But running it again will not have the `src_managed` generated protobuf sources in it. Touching a `.proto` file, opening the SBT console, and typing `compile` _and then_ `eclipse` will once more yield the correct result.

I stumbled onto this when doing an SBT 1.0 upgrade... I'm unsure whether this worked before, or whether I'm just missing something extra in my project. I'd expect that `managedSources` is interrogated by `sbt eclipse` before generating the `.classpath` though, so I don't know what's up.
On Mac Os X, when upgrading an Akka project from sbt 0.13.15 to sbt 1.0.1 I get a java.lang.ClassNotFoundException: scala.Int when starting the actor system (things go smoothly when upgrading non-Akka projects).

[error] java.lang.ClassNotFoundException: scala.Int
[error] 	at sbt.internal.inc.classpath.ClasspathFilter.loadClass(ClassLoaders.scala:74)
[error] 	at java.lang.ClassLoader.loadClass(ClassLoader.java:357)
[error] 	at java.lang.Class.forName0(Native Method)
[error] 	at java.lang.Class.forName(Class.java:348)
[error] 	at akka.actor.ReflectiveDynamicAccess.$anonfun$getClassFor$1(ReflectiveDynamicAccess.scala:21)
[error] 	at scala.util.Try$.apply(Try.scala:209)
[error] 	at akka.actor.ReflectiveDynamicAccess.getClassFor(ReflectiveDynamicAccess.scala:20)
[error] 	at akka.serialization.Serialization.$anonfun$bindings$3(Serialization.scala:311)
[error] 	at scala.collection.TraversableLike$WithFilter.$anonfun$map$2(TraversableLike.scala:739)
[error] 	at scala.collection.immutable.HashMap$HashMap1.foreach(HashMap.scala:231)
[error] 	at scala.collection.immutable.HashMap$HashTrieMap.foreach(HashMap.scala:462)
[error] 	at scala.collection.TraversableLike$WithFilter.map(TraversableLike.scala:738)
[error] 	at akka.serialization.Serialization.<init>(Serialization.scala:309)
[error] 	at akka.serialization.SerializationExtension$.createExtension(SerializationExtension.scala:15)
[error] 	at akka.serialization.SerializationExtension$.createExtension(SerializationExtension.scala:12)
[error] 	at akka.actor.ActorSystemImpl.registerExtension(ActorSystem.scala:880)
[error] 	at akka.actor.ExtensionId.apply(Extension.scala:77)
[error] 	at akka.actor.ExtensionId.apply$(Extension.scala:77)
[error] 	at akka.serialization.SerializationExtension$.apply(SerializationExtension.scala:12)
[error] 	at akka.remote.RemoteActorRefProvider.init(RemoteActorRefProvider.scala:203)
[error] 	at akka.actor.ActorSystemImpl.liftedTree2$1(ActorSystem.scala:796)
[error] 	at akka.actor.ActorSystemImpl._start$lzycompute(ActorSystem.scala:793)
[error] 	at akka.actor.ActorSystemImpl._start(ActorSystem.scala:793)
[error] 	at akka.actor.ActorSystemImpl.start(ActorSystem.scala:809)
[error] 	at akka.actor.ActorSystem$.apply(ActorSystem.scala:244)
[error] 	at akka.actor.ActorSystem$.apply(ActorSystem.scala:287)
[error] 	at akka.actor.ActorSystem$.apply(ActorSystem.scala:232)
[error] 	at ActorDemo$.main(actor.scala:70)
[error] 	at ActorDemo.main(actor.scala)
[error] 	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
[error] 	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
[error] 	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
[error] 	at java.lang.reflect.Method.invoke(Method.java:498)
[error] 	at sbt.Run.invokeMain(Run.scala:89)
[error] 	at sbt.Run.run0(Run.scala:83)
[error] 	at sbt.Run.execute$1(Run.scala:61)
[error] 	at sbt.Run.$anonfun$run$4(Run.scala:73)
[error] 	at scala.runtime.java8.JFunction0$mcV$sp.apply(JFunction0$mcV$sp.java:12)
[error] 	at sbt.util.InterfaceUtil$$anon$1.get(InterfaceUtil.scala:10)
[error] 	at sbt.TrapExit$App.run(TrapExit.scala:252)
[error] 	at java.lang.Thread.run(Thread.java:745)
[error] java.lang.RuntimeException: Nonzero exit code: 1
[error] 	at sbt.Run$.executeTrapExit(Run.scala:120)
[error] 	at sbt.Run.run(Run.scala:73)
[error] 	at sbt.Defaults$.$anonfun$bgRunTask$5(Defaults.scala:1155)
[error] 	at sbt.Defaults$.$anonfun$bgRunTask$5$adapted(Defaults.scala:1150)
[error] 	at sbt.internal.BackgroundThreadPool.$anonfun$run$1(DefaultBackgroundJobService.scala:331)
[error] 	at scala.runtime.java8.JFunction0$mcV$sp.apply(JFunction0$mcV$sp.java:12)
[error] 	at scala.util.Try$.apply(Try.scala:209)
[error] 	at sbt.internal.BackgroundThreadPool$BackgroundRunnable.run(DefaultBackgroundJobService.scala:254)
[error] 	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
[error] 	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
[error] 	at java.lang.Thread.run(Thread.java:745)
[error] (compile:run) Nonzero exit code: 1
[error] Total time: 20 s, completed Sep 5, 2017 6:52:27 PM
I tried using sbteclipse for the project at [CRA's Figaro](https://github.com/p2t2/figaro) but it did not work. I've posted details in [StackOverflow](https://stackoverflow.com/questions/44126204/sbteclipse-failing-for-this-project).
I created two projects, each with a different scalaVersion.
In eclipse, both are seen as 2.10.6,
which gives problems when adding dependencies.

#### build.sbt
~~~scala
lazy val xproject = project.
  settings(
     scalaVersion := "2.10.6"
  )

lazy val yproject = project.
  settings(
     scalaVersion := "2.11.8"
  )
~~~
Test with 
* Scala-IDE 4.6.0-vfinal-2017-05-16T08:49:17Z-Typesafe
* Scala-IDE 4.5.0-vfinal-2016-12-13T10:59:29Z-Typesafe 

on OS X 10.11.6

sbt 0.13.15
sbteclipse 5.1.0
