I followed all the step ofI implement for current version to my kotlin project
    `implementation 'com.github.garretyoder:Colorful:2.3.4'
`
But always failed to build the library. 
I have added Colorful library into my app and ActionMode is broken now. Action toolbar appears above the toolbar. Looks like Colorful style doesn't have or ignore my `windowActionModeOverlay`.

Library initialized as:
```
 CustomThemeColor defaultTheme = new CustomThemeColor(
                this,
                R.style.my_default_primary_color,
                R.style.my_default_rimary_dark_color,
                R.color.colorPrimary,
                R.color.colorPrimary
        );
        Defaults themeDefaults = new Defaults(
                defaultTheme,
                defaultTheme,
                false,
                false,
                R.style.AppTheme
        );
        initColorful(this, themeDefaults);
```
Activity extends `CAppCompatActivity`. But `startSupportActionMode` leads to this:
![screen](https://i.imgur.com/yq90hFG.png)

Do you know how to fix this?

â€¦the readme

Resolves #45
The Readme states:
```
The apply method optionally takes a high-order function as a argument. This serves as a callback that will be triggered once Colorful has finished it's theme changes
```

However, `ThemeEditor#apply()` infers a @NonNull annotation on both of its arguments.
If this is to match the readme, the callback should be optional, and therefore must have a null check before being called.

I believe this will also make things easier for non-Kotlin users to make use of.

Thanks
I have forced to load an style by calling:

```
            Colorful().edit()
                .setPrimaryColor(ThemeColor.RED)
                .setAccentColor(ThemeColor.BLUE)
                .setDarkTheme(false)
                .setTranslucent(false)
                .setCustomThemeOverride(R.style.AppThemeDark)
                .apply(activity!!) { activity!!.recreate() }
```


And set a textAppearance in my style:
<img width="1058" alt="Screen Shot 1397-12-21 at 15 11 45" src="https://user-images.githubusercontent.com/5219339/54197479-4eac0880-44d9-11e9-9392-84be53925622.png">

But nothing seems to take a change in text color of my textviews or buttons.

Is there any guide to how to customize widgets?

As the AndroidX version of AppCompat is stable now, I'd recommend to update.
Please be aware that this pull request was automatically created using [gtf](https://github.com/schneiderl/gtf)

You should be able to merge this with no other problems.
In case the proposed changes do not make sense, I would be glad to hear about it.
I tries build a release build of my app and app crashed while start:

```
Fatal Exception: java.lang.AssertionError: impossible
       at java.lang.Enum$1.create(Enum.java:272)
       at java.lang.Enum$1.create(Enum.java:263)
       at libcore.util.BasicLruCache.get(BasicLruCache.java:58)
       at java.lang.Enum.getSharedConstants(Enum.java:289)
       at java.lang.Enum.valueOf(Enum.java:244)
       at io.multimoon.colorful.ThemeColor.valueOf(Unknown Source:2)
       at io.multimoon.colorful.ThemeColorInterface$Companion.parse(ThemeColor.kt:18)
       at io.multimoon.colorful.ColorfulKt.initColorful(Colorful.kt:29)
       at com.noodoe.nexlogistics.LogisticsApp.onCreate(LogisticsApp.kt:53)
       at android.app.Instrumentation.callApplicationOnCreate(Instrumentation.java:1119)
       at android.app.ActivityThread.handleBindApplication(ActivityThread.java:5740)
       at android.app.ActivityThread.-wrap1(Unknown Source)
       at android.app.ActivityThread$H.handleMessage(ActivityThread.java:1656)
       at android.os.Handler.dispatchMessage(Handler.java:106)
       at android.os.Looper.loop(Looper.java:164)
       at android.app.ActivityThread.main(ActivityThread.java:6494)
       at java.lang.reflect.Method.invoke(Method.java)
       at com.android.internal.os.RuntimeInit$MethodAndArgsCaller.run(RuntimeInit.java:438)
       at com.android.internal.os.ZygoteInit.main(ZygoteInit.java:807)

Caused by java.lang.NoSuchMethodException: values []
       at java.lang.Class.getMethod(Class.java:2068)
       at java.lang.Class.getDeclaredMethod(Class.java:2047)
       at java.lang.Enum$1.create(Enum.java:268)
       at java.lang.Enum$1.create(Enum.java:263)
       at libcore.util.BasicLruCache.get(BasicLruCache.java:58)
       at java.lang.Enum.getSharedConstants(Enum.java:289)
       at java.lang.Enum.valueOf(Enum.java:244)
       at io.multimoon.colorful.ThemeColor.valueOf(Unknown Source:2)
       at io.multimoon.colorful.ThemeColorInterface$Companion.parse(ThemeColor.kt:18)
       at io.multimoon.colorful.ColorfulKt.initColorful(Colorful.kt:29)
       at com.noodoe.nexlogistics.LogisticsApp.onCreate(LogisticsApp.kt:53)
       at android.app.Instrumentation.callApplicationOnCreate(Instrumentation.java:1119)
       at android.app.ActivityThread.handleBindApplication(ActivityThread.java:5740)
       at android.app.ActivityThread.-wrap1(Unknown Source)
       at android.app.ActivityThread$H.handleMessage(ActivityThread.java:1656)
       at android.os.Handler.dispatchMessage(Handler.java:106)
       at android.os.Looper.loop(Looper.java:164)
       at android.app.ActivityThread.main(ActivityThread.java:6494)
       at java.lang.reflect.Method.invoke(Method.java)
       at com.android.internal.os.RuntimeInit$MethodAndArgsCaller.run(RuntimeInit.java:438)
       at com.android.internal.os.ZygoteInit.main(ZygoteInit.java:807)
```

So I added these proguard settings to make app open successfully:

```
-keep class io.multimoon.colorful.** { *; }
-dontwarn io.multimoon.colorful.**
```

Does anyone have other ideas?
@garretyoder I want to use "customTheme", because only in this way can I change `textColorPrimary` color, but now `primaryColor ` and `accentColor ` are not used, this may be misunderstood, but these two values are non-null.

        val defaults:Defaults = Defaults(
                primaryColor = ThemeColor.GREEN,
                accentColor = ThemeColor.BLUE,
                useDarkTheme = false,
                translucent = false,
                customTheme = R.style.AppTheme)
        initColorful(this, defaults)
Resource IDs are not 100% guaranteed to never change and this could potentially cause problems. We should be loading style resources internally by string name over res id int.