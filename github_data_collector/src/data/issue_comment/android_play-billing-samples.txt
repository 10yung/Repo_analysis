When I call playStoreBillingClient? .QuerySkuDetailsAsync (params) method, the internal callback I getSkuDetails () failed. Response code: 6
Then when I call playStoreBillingClient? .ConsumeAsync (params) method, an internal callback occurred. An internal error occurred. I couldn't find the relevant solution, please help me
Several public functions of BillingRepository access the `lateinit` property `playStoreBillingClient`. However, it is optional for this property to be instantiated because `startDataSourceConnections()` is optional to call. 

BillingViewModel actually calls through to one of these functions (`queryPurchasesAsync()`) with its own public function `queryPurchases()`.
## The Problem

After purchase a non-consumable product, uninstall the app and reinstall, the user can't restore their purchase.

Because in order to save the purchase result into the database as an entitlement, the sample code called `playStoreBillingClient.acknowledgePurchase` firstly, but since purchase `isAcknowledge` is true, the response is an internal error.

## In Detail

### What did I do

Using the sample code to implement my own IAP logic, with one managed in-app product that is **non-consumable**.

After installing the app to my device and successfully purchased this product, then acknowledged purchase and update the local database. Everything is Ok.

Then I uninstall the app and reinstall it, after successfully established connection to Google Play,  `onBillingSetupFinished -> queryPurchasesAsync -> processPurchases -> acknowledgeNonConsumablePurchasesAsync` gets called. 

### What happens

The response code in `playStoreBillingClient.acknowledgePurchase` is an internal error because the purchase is already acknowledged, so I can't restore the purchase.

### What should happen (I think)

Maybe in `acknowledgeNonConsumablePurchasesAsync`, we should filter the list of purchases based on its acknowledge status and call `disburseNonConsumableEntitlement` on purchases that are already acknowledged, so the user can restore their purchase on the device without launch billing flow again?

code maybe like:
```
private fun acknowledgeNonConsumablePurchasesAsync(nonConsumables: List<Purchase>) {
    val (alreadyAcknowledged, toAcknowledge) = nonConsumables
            .partition { it.isAcknowledged }

    alreadyAcknowledged.forEach { disburseNonConsumableEntitlement(it) }

    toAcknowledge.forEach { purchase ->
        // call playStoreBillingClient.acknowledgePurchase and handle response
    }
}
```
The Java sample TrivialDrive_v2 was never updated to the new API, as mentioned in #238.

I'm maintaining an older application where I have absolutely no desire to convert to Kotlin. I want to update it to the latest Play billing API, but the lack of a working Java sample makes that task very arduous.

It's ridiculous that such a high profile API, critical for so many developers, does not have a working official Java sample. Please fix this.
I installed classy taxi and back end server, I can log in with google account or email on both app and web app but if I click 'basic' or 'premium' nothing pop's up asking me to purchase? I've set the two iap subscription items correctly. I don't get an error or anything...
2019-11-13 10:42:39.246 32270-32270/com.auntec.photo E/AndroidRuntime: FATAL EXCEPTION: main
    Process: com.auntec.photo, PID: 32270
    java.lang.RuntimeException: Unable to start activity ComponentInfo{com.auntec.photo/com.android.billingclient.api.ProxyBillingActivity}: java.lang.NullPointerException: Attempt to invoke virtual method 'boolean java.lang.Boolean.booleanValue()' on a null object reference
        at android.app.ActivityThread.performLaunchActivity(ActivityThread.java:2893)
        at android.app.ActivityThread.handleLaunchActivity(ActivityThread.java:2971)
        at android.app.ActivityThread.-wrap11(Unknown Source:0)
        at android.app.ActivityThread$H.handleMessage(ActivityThread.java:1675)
        at android.os.Handler.dispatchMessage(Handler.java:106)
        at android.os.Looper.loop(Looper.java:192)
        at android.app.ActivityThread.main(ActivityThread.java:6738)
        at java.lang.reflect.Method.invoke(Native Method)
        at com.android.internal.os.RuntimeInit$MethodAndArgsCaller.run(RuntimeInit.java:550)
        at com.android.internal.os.ZygoteInit.main(ZygoteInit.java:825)
     Caused by: java.lang.NullPointerException: Attempt to invoke virtual method 'boolean java.lang.Boolean.booleanValue()' on a null object reference
        at android.os.Parcel.readException(Parcel.java:2019)
        at android.os.Parcel.readException(Parcel.java:1959)
        at android.app.IActivityManager$Stub$Proxy.startActivityIntentSender(IActivityManager.java:6555)
        at android.app.Activity.startIntentSenderForResultInner(Activity.java:4833)
        at android.app.Activity.startIntentSenderForResult(Activity.java:4809)
        at android.app.Activity.startIntentSenderForResult(Activity.java:4776)
        at com.android.billingclient.api.ProxyBillingActivity.onCreate(ProxyBillingActivity.java:47)
        at android.app.Activity.performCreate(Activity.java:7113)
        at android.app.Activity.performCreate(Activity.java:7104)
        at android.app.Instrumentation.callActivityOnCreate(Instrumentation.java:1220)
        at android.app.ActivityThread.performLaunchActivity(ActivityThread.java:2846)
        at android.app.ActivityThread.handleLaunchActivity(ActivityThread.java:2971) 
        at android.app.ActivityThread.-wrap11(Unknown Source:0) 
        at android.app.ActivityThread$H.handleMessage(ActivityThread.java:1675) 
        at android.os.Handler.dispatchMessage(Handler.java:106) 
        at android.os.Looper.loop(Looper.java:192) 
        at android.app.ActivityThread.main(ActivityThread.java:6738) 
        at java.lang.reflect.Method.invoke(Native Method) 
        at com.android.internal.os.RuntimeInit$MethodAndArgsCaller.run(RuntimeInit.java:550) 
        at com.android.internal.os.ZygoteInit.main(ZygoteInit.java:825) 

PurchaseState value of Purchase object is defined as below.

> Purchase.java (package com.android.billingclient.api)
  @Retention(SOURCE)
  public @interface PurchaseState {
    // Purchase with unknown state.
    int UNSPECIFIED_STATE = 0;
    // Purchase is completed.
    int PURCHASED = 1;
    // Purchase is waiting for payment completion.
    int PENDING = 2;
  }
....
/** Returns the state of purchase. */
  public @PurchaseState int getPurchaseState() {
    switch (mParsedJson.optInt("purchaseState", PurchaseState.PURCHASED)) {
      case 4:
        return PurchaseState.PENDING;
      default:
        return PurchaseState.PURCHASED;
    }

Why is the PurchaseState value of the JsonObject different from the numeric value of the defined State?

 
When you call queryPurchaseHistoryAync (), you receive a list of PurchaseHistoryRecord objects.
There is no state for judging purchase status from PurchaseHistoryRecord object.
It is likely that we need a State value to check whether the purchase of PurchaseHistoryRecord is completed, refunded or consumed.

How can I check this?
`Inventory() { }

    /** Returns the listing details for an in-app product. */
    public SkuDetails getSkuDetails(String sku) {
        return mSkuMap.get(sku);
    }

    /** Returns purchase information for a given product, or null if there is no purchase. */
    public Purchase getPurchase(String sku) {
        return mPurchaseMap.get(sku);
    }`


The user refunded, but getPurchase returns a non-null value.
Hello team.

User uses an account to login into our application and purchase subscription will attach this subscription to his account.
If the user login with another account on the same device, and want to purchase a subscription for his account, it doesn't work, because the previous subscription is acknowledged and stay in the purchase, it cannot be purchased again.

Could you let us know this behaviour is by designed?
The same subscription product can only be purchased one time on the same device?