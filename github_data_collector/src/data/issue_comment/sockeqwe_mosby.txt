This fix is based on similar code fragments in this repository, as described below.
https://github.com/sockeqwe/mosby/blob/7494fcc8693eb93a3a6cce56ec836d5a1a070018/mvp/src/main/java/com/hannesdorfmann/mosby3/mvp/delegate/FragmentMvpDelegateImpl.java#L71-L79
https://github.com/sockeqwe/mosby/blob/7494fcc8693eb93a3a6cce56ec836d5a1a070018/viewstate/src/main/java/com/hannesdorfmann/mosby3/mvp/delegate/FragmentMvpViewStateDelegateImpl.java#L77-L83
Unfortunately Mosby V3 is not compatable with AndroidX as accessing the backstack to see if a fragment is still in use (or presenter can be released) is not possible anymore in androidx as the method  to get this information is "blacklisted" and no accessible from the outside anymore (it was in support.v4 days) see #338  #336  

Any workaround suggested in #338  seems to me fragile.
Therefore I considering the following:
What we actually need is a lifecycle callback that tells us when the Fragment is actually destroyed. We could get this information by using AndroidX `ViewModel,onCleared()`.

This will not be breaking change, rather it's a minor implementation detail under the hood. 

What do you think? 
FragmentManager.toString() occurs NPE when mHost is null since androidx.fragment:fragment:1.2.0-beta01.

```
        java.lang.NullPointerException: Attempt to invoke virtual method 'java.lang.Class java.lang.Object.getClass()' on a null object reference
        at androidx.fragment.app.FragmentManager.toString(FragmentManager.java:1022)
        at java.lang.String.valueOf(String.java:2896)
        at java.lang.StringBuilder.append(StringBuilder.java:132)
        at androidx.fragment.app.Fragment.dump(Fragment.java:2640)
        at androidx.core.app.BackstackAccessor.isInBackStackAndroidX(BackstackAccessor.java:57)
        at androidx.core.app.BackstackAccessor.isFragmentOnBackStack(BackstackAccessor.java:46)
        at com.hannesdorfmann.mosby3.mvp.delegate.FragmentMvpDelegateImpl.retainPresenterInstance(FragmentMvpDelegateImpl.java:163)
        at com.hannesdorfmann.mosby3.mvp.delegate.FragmentMvpDelegateImpl.onDestroy(FragmentMvpDelegateImpl.java:285)
        at com.hannesdorfmann.mosby3.mvp.MvpFragment.onDestroy(MvpFragment.java:103)
```

So this PR uses reflection instead of Fragment.dump().
Need help to solve this error

> java.lang.IllegalAccessError: Method 'boolean androidx.fragment.app.Fragment.isInBackStack()' is inaccessible to class 'androidx.core.app.BackstackAccessor'

I read on release to use **BackstackAccessor.isFragmentOnBackStack(Fragment())**.

where should I use this line of code?
Hi, I faced with some issue and would be very appriciate if you could help with it.
I use ```gradle com.hannesdorfmann.mosby3:viewstate:3.1.1 ```

This is my Activity class:
```kotlin 
class MainActivity : BaseViewStateActivity<MainActivityView, MainActivityPresenter, MainViewState>(), MainActivityView {

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContentView(R.layout.activity_main)
    }

    override fun onPostCreate(savedInstanceState: Bundle?) {
        super.onPostCreate(savedInstanceState)
    }

    override fun onNewViewStateInstance() {
        presenter.nextPage()
    }

    override fun createPresenter(): MainActivityPresenter = MainActivityPresenter()

    override fun createViewState(): MainViewState = MainViewState()
```

and ViewState: 
```kotlin
class MainViewState : RestorableViewState<MainActivityView> {

    private val keyState = "MainViewState.KEY"

    var data = ArrayList<*>()

    override fun saveInstanceState(out: Bundle) {
        out.putString(keyState, "123")
    }

    override fun restoreInstanceState(args: Bundle?): RestorableViewState<MainActivityView> {
        var savedString = args?.getString(keyState)
        return this
    }

    override fun apply(view: MainActivityView?, retained: Boolean) {
        safeLet(view, data) { v, data ->
            v.updateRecycleView(data)
        }
    }

}
```

The problem is that restoreInstanceState is never called.
Could you please explain me the logic in  
https://github.com/sockeqwe/mosby/blob/7f22118c950b5e6fbba0ec42d8e97586dfb08940/viewstate/src/main/java/com/hannesdorfmann/mosby3/mvp/delegate/ActivityMvpViewStateDelegateImpl.java#L75

The first time an Activity is started, restoreInstanceState is not called, because the bundle is null 

```java 
if (bundle != null && viewState instanceof RestorableViewState) {
    ...
      RestorableViewState restoredViewState =
          ((RestorableViewState) viewState).restoreInstanceState(bundle);
    ...
}
```
 
but after rotate the screen, the method does not call as the program stops at line 92 (where return  is called)

```java 
if (mosbyViewId != null) {
      VS viewState = PresenterManager.getViewState(activity, mosbyViewId);
      if (viewState != null) {
        //
        // ViewState restored from PresenterManager
        //
        setViewState(viewState, true, true);
        if (DEBUG) {
          Log.d(DEBUG_TAG, "ViewState reused from Mosby internal cache for view: "
              + delegateCallback.getMvpView()
              + " viewState: "
              + viewState);
        }

        return;
      }
    }
```
why is "return" called?

thank you in advance, 
Regards!
Hi, this is just a feature request that will make code a bit cleaner and easier to write.

let's say we have 

```
ifViewAttached { 
    val message = it.getStringFromId(R.string.some_id)
    showError(message)
 } 
```

This will become

```
val message =  ifViewAttached { it.getStringFromId(R.string.some_id) }
showError(message)
```

here `ifViewAttached` returned the value returned by function `getStringFromId`.
This works very similar to let function in Kotlin.
Steps to reproduce bug:
1. Create view which is inherited from for example `MvpFrameLayout`
2. Add view to any `ViewGroup`
3. Remove from the `ViewGroup` (`detachView()` and `destroy()` methods from `MvpPresenter` will be called)
4. Add view again to `ViewGroup`
5. Remove view from `ViewGroup`
6. `detachView()` and `destroy()` methods from `MvpPresenter` not will be called
Allow mosby to support view without activity:
**Reference ticket:** https://github.com/sockeqwe/mosby/issues/281

Alternatively, we can just remove the Exception when there is no activity and switch automatically to Window-mode for ViewGroup base DelegateCallback. But I guess if we add this feature we would like it to be enforced and managed.
So the user will need to implement "public boolean isViewOnActivity()"
It basically switch to a mod where it does not expect to save a state nor detach a view without destroying.


From a user perspective, a CustomView can be use alternatively by a Activity or a Window directly, an easy way to support that would be to implement:

`
public boolean isViewOnActivity() {
   return PresenterManager.getActivity(delegateCallback.getContext()) != null
}
`
https://github.com/sockeqwe/mosby/issues/318#issuecomment-448232882
**Mosby Version:** 3.1.1-SNAPSHOT (just upgraded from 3.0.4)

**Expected behavior** View should load it's content after reusing retained fragment

**Actual behavior (include a stacktrace if crash)** It does not

Hello :). I'm not sure if this is a bug report or a question. When i build and install my apk while devices screen is off, since 3.1.0 my retained fragment creates it's viewState, calls presenter.loadData BUT it is detached before view.setData/showContent is called. Then, when i turn screen on I'm stuck on loading state so I'd expect it to reload data but applyViewState == true, applyViewStateFromMemory == true so when onViewStateInstanceRestored is called with instanceStateRetainedInMemory == true, nothing happens. Is this a bug? If you could confirm it I can start working on solution, but I'm not sure if I understand problem correctly. Thanks!!

`@Override public void onViewStateInstanceRestored(boolean instanceStateRetainedInMemory) {
    if (!instanceStateRetainedInMemory && viewState.isLoadingState()) {
      loadData(viewState.isPullToRefreshLoadingState());
    }
  }`

Edit: I've just tried to use QueueingPresenter but after long migration it seems like it changes my apps behavior (ViewPagers losing index after rotation etc.). Currently as a hotfix I need to fork 3.0.4 to repair BackStackAccessor but maybe you could suggest me a better solution..? I'd be really grateful.

Edit2: I've successfully recreated all needed functionality and will stick to QueuingPresenter for now.