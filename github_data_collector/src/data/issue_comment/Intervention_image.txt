This is a great library, but I'm really missing a "smart crop" feature! There's a handful of PHP libraries that do this, but it would be great to be integrated into this code.

Here's some example code for doing just the smart crop: https://github.com/xymak/smartcrop.php

Here's an example of an alternative image processing library that has smart crop built in: https://kosinix.github.io/grafika/smart-crop.html

This is a lighter weight version of doing full on face detection as described in #75 since it is just looking for "interestingness" in the image.

It'd be super great if this were built in!
hi
this is my code for Upload image from any format to jpg
```
$filename = Carbon::now()->timestamp;
$path = "images/".$filename;
$image = Image::make($file);
$image->save($path , 80 , 'jpg' );
```

but it's not working!!
file uploaded without extension!!
why ?
I am working with image cropping and its working file but in case of png files it generates black background. 

public static function ImageCrop($file,$arDetails = array())
    {

        $arReturn = array(); 
        if(!empty($file))
        {
           //get filename with extension
           $filenamewithextension = $file->getClientOriginalName();

            //get filename without extension
            $filename = pathinfo($filenamewithextension, PATHINFO_FILENAME);
    
            //get file extension
            $extension = $file->getClientOriginalExtension();
    
            //filename to store
            $filenametostore = $filename.'_'.time().'.'.$extension;
            
            //make Directory
            if(!file_exists(public_path($arDetails['szUploadDirectory']))) {
                mkdir(public_path($arDetails['szUploadDirectory']), 777);
            }
            //make crop Directory
            if(!file_exists(public_path($arDetails['szUploadDirectory'].'/crop'))) {
                mkdir(public_path($arDetails['szUploadDirectory'].'/crop'), 777 );
            }
            ///$file->move(public_path($arDetails['szUploadDirectory']), $filenametostore);
            $path = public_path($arDetails['szUploadDirectory'].'/'.$filenametostore); 
            $image = Image::make($file);
            $image->rotate($arDetails['rotation']); 
            $image->save($path);
        
            // crop image
            $img = Image::make(public_path($arDetails['szUploadDirectory'].'/'.$filenametostore));
            $croppath = public_path($arDetails['szUploadDirectory'].'/crop/'.$filenametostore);
            $img->crop((int)$arDetails['width'], (int)$arDetails['height'], (int)$arDetails['x'], (int)$arDetails['y']);
            $img->save($croppath);
            // you can save crop image path below in database
            $szImagePath =$croppath;
            $arReturn['szImagePath'] = ($arDetails['szUploadDirectory'].'/crop/'.$filenametostore);
            $arReturn['szImageName'] = $filenametostore; 
           return $arReturn; 
        }
    }
Please, guys, I'm yet to fish out the problem in my laravel 6 app.

Keeps saying image source not readable. I have followed all the solutions I find online to avail.

Please check and help me. Thanks 


https://stackoverflow.com/q/59622089/10535517
When launching a generation of a lot of A4 pictures. I have randomly some pictures with a grey background or a rotated images (I don't have any script that rotate a picture and the picture is good).

Does anybody have an idea of what might causing this kind of issue randomly ? And how I can fix this bug ?

Here is a sample of kind of manipulations I make : 

    $canva = ImageIntervention::make($imagePath);
    $image = ImageIntervention::make($image2Path);
    $image->crop($w, $h, $x, $y);
    $canva->insert($blockImage);
    $canva->save();

The script works 99% of the times but sometimes I have something like :

![Grey background](https://www.evernote.com/shard/s119/sh/f264f826-7b77-49be-a2b1-5cccc3279d24/7886e192016fbfbf300454f6888b7e15/res/70a29da1-7367-42bc-a0d3-4a84a7f059fa/skitch.png)

And here :

![Rotated picture](https://www.evernote.com/shard/s119/res/13d77999-f68a-4703-9142-a11e7012753d/skitch.png)
The requested package laravel/framework (locked at v5.7.28, required as 5.8.*) is satisfiable by laravel/framework[v5.7.28] but these conflict with your requirements or minimum-stability.
Would be nice if you could add "drop shadow" effect on texts 👍 
I have strange opacity bug after appling fit() function to the image:

```php
$img = Image::make(Storage::get($savePath . 'background_original.jpg'));
$img->fit($puzzleImage->width, $puzzleImage->height);
		$img->rectangle($x - $s, $y - $s, $x + $s, $y + $s, function ($draw) {
			$draw->background('rgba(0, 0, 0, 0.5)');
		});
Storage::put($savePath . "/background_resized.jpg", (string) $img->encode('jpg', 92));
//$img = Image::make(Storage::get($savePath . 'background_resized.jpg'));
$img->rectangle(100, 100, 200, 200, function ($draw) {
	$draw->background('rgba(0, 0, 0, 0.5)');
});
Storage::put($savePath . "/background.jpg", (string) $img->encode('jpg', 92));
```
in this code I have black square instead of translucent. But if i uncomment ```//$img = Image::make(Storage::get($savePath . 'background_resized.jpg'));``` (or comment $img->fit ) the result is ok.
Also it begin work fine if I draw text **with ttf font** before drawing rectangle. May be in some other cases too.
Currently the first parameter `$base` is a string that could be: `top-left` (default), `bottom-right` or `transparent` as the [doc: trim()](http://image.intervention.io/api/trim).

There some way to trim by color? In my case, I need trim transparent and/or white color, only. Eg.: `trim([ 'transparent', 'white', '#FF0000'])` to trim transparent, white and red. The problem is that first parameter is string.
I have created images(Link below) using Intervention in laravel. 
https://i.stack.imgur.com/DPmee.jpg
https://i.stack.imgur.com/HycjA.jpg

But I need to add curve text(URL) above and below QR like the image below(see black QR tag): https://i.stack.imgur.com/PaSPt.jpg

Here is the code for creating images.
 
```
public function tag()
     {

        $bgColor = '#000000';
        $textColor = '#ffffff';
    
        $img = Image::canvas(192, 192);
        $img->circle(192, 96, 96, function ($draw) use ($bgColor) {
            $draw->background($bgColor);
        });
        $img1 = Image::canvas(192, 192);
        $img1->circle(192, 96, 96, function ($draw) use ($bgColor) {
            $draw->background($bgColor);
        });


        $fontPathExtraBold = public_path('fonts/Raleway/Raleway-ExtraBold.ttf');
        $fontPathBold = public_path('fonts/Raleway/Raleway-Bold.ttf');
        $fontPathSemiBold = public_path('fonts/Raleway/Raleway-SemiBold.ttf');
        $fontPathLight = public_path('fonts/Raleway/Raleway-Light.ttf');


        $img1->text('ROCCO', 96, 50, function ($font) use ($fontPathExtraBold, $textColor) {
            $font->file($fontPathExtraBold);
            $font->size(18);
            $font->color($textColor);
            $font->align('center');
        });

        $img1->text('12345', 96, 75, function ($font) use ($textColor, $fontPathExtraBold) {
            $font->file($fontPathExtraBold);
            $font->size(16);
            $font->color($textColor);
            $font->align('center');
        });
        $img1->text('SCAN OR BROWSE:', 96, 100, function ($font) use ($textColor, $fontPathExtraBold) {
            $font->file($fontPathExtraBold);
            $font->size(16);
            $font->color($textColor);
            $font->align('center');
        });
        $img1->text('PET-ID.APP/RFP/12345', 96, 125, function ($font) use ($textColor, $fontPathExtraBold) {
            $font->file($fontPathExtraBold);
            $font->size(13);
            $font->color($textColor);
            $font->align('center');
        });
      
        //QR Code
        $qrCode = url('/qrcode.png');
        // Insert QR Code
        $insertQr = Image::make($qrCode)->resize(122, 122);
        $img->insert($insertQr, 'center');

  

        $fileName = uniqid('', true);
        $fileName1 = uniqid('', true);
        $fileName2 = uniqid('', true);

        $saveimg = storage_path('app/public/tag/image/' . $fileName . '.jpg');
        $saveimg1 = storage_path('app/public/tag/image/' . $fileName1 . '.jpg');
  
        $img->save($saveimg);
        $img1->save($saveimg1);

        $savepdf = storage_path('app/public/wallpaper/' . $fileName . '.pdf');
        $savepdf1 = storage_path('app/public/wallpaper/' . $fileName1 . '.pdf');

        PDF::loadHTML("<img src='" . $saveimg . "'>")->save($savepdf);
        PDF::loadHTML("<img src='" . $saveimg1 . "'>")->save($savepdf1);
        return 'done';
    }

```