I'm not sure if it's already mentioned or not in the readme, but I think it's worth to be mentioned here.

I already built the administration back-end, and also made the basic blogging feature within it. Now if I want to migrate to Canvas, I would expect that there will be 2 back-ends (one for my administration site, and another one for Canvas).

Is there any way to integrate Canvas back-end into my existing administration sites without using iframe?

Thanks :)
@austintoddj 
This repository is wonderful!
I would like to know how I can contribute to the development of the project? Have you considered the next features?
Does this project accept donation or sponsorship?
This is a beautiful blog. But is better to it can keep the space and TAB of the beginning of the article, it is better to center the picture👍
On Canvas panel there are some translate issues. It takes timezone successfully but the texts are not localized.
e.g.
moment(post.created_at).fromNow() ==> this will produce english text 
I want to build blog site and canvas is just perfect for me. But I have some question and didn't find any answer or document or something.

-  Is there any document?
-  How to switch theme like dark mode in suggested by canvas.io site.
-  Is there any search option for posts?
-  Is there filter for post because I have to give right for some user to post?
- How to add editor functionality like List and table?
Personally a nice-to-have for me, but would be cool.
See https://github.com/adam-p/markdown-here/wiki/Markdown-Here-Cheatsheet

[Liquid Tags](https://shopify.github.io/liquid/) were introduced by shopify and have been widely adopted in a lot of editors, CMS's and comment editors online. Liquid tags allow for a really rich publishing and consumption experience.

To that end, it would be really cool if Cnvs was able to do something like this:
https://dev.to/new#liquidtags (make sure you click on the '?' icon on the bottom to see the liquid tags guide, where this is adopted from)

The goal being to be able to allow embeds of any of the following:
### Internal:
1. Article/Posts (Ex: [here](https://dev.to/devteam/medium-was-never-meant-to-be-a-part-of-the-developer-ecosystem-25a0))
2. Comments.(Ex: https://dev.to/rhymes/comment/e07o)
3. Tags
4. Topics
5. Users (ex: https://dev.to/devteam/expanding-the-dev-core-team-5b0g)

### External:
(popular ones only listed below)
1. Videos like Youtube
2. Twitter posts
3. Medium posts
4. Slideshare slides
5. Soundcloud audio snippet
6. Spotify song or audio snippet

## Internal:
1. Article/Post Embeds (Ex: https://dev.to/devteam/medium-was-never-meant-to-be-a-part-of-the-developer-ecosystem-25a0)
```
using the full link of the article:

{% link https://www.mydomain.com/kazz/boost-your-productivity-using-markdown-1be %}

using the slug like this:

{% link kazz/boost-your-productivity-using-markdown-1be %}
```

2. Comment Embeds (example: https://dev.to/rhymes/comment/e07o)
```
All you need is the ID at the end of a comment URL. To get the comment link, click either the timestamp or the menu button in the top right corner on a comment and then click "Permalink". Here's an example:

{% devcomment 2d1a %}
```

4. Tag Embeds
```
All you need is the tag name:

{% tag git %}
```

5. Topic Embeds
```
All you need is the topic name:

{% topic ux %}
```

6. User Embeds: Example [here](https://dev.to/devteam/expanding-the-dev-core-team-5b0g)
```
All you need is the username:

{% user jess %}
```


## External:
(I took the most popular ones that made sense to me):

1. Video Embeds
```
All you need is the id from the URL.

YouTube: {% youtube dQw4w9WgXcQ %}
Vimeo: {% vimeo 193110695 %}
```

2. Twitter Embeds
```
Using the Twitter Liquid tag will allow the tweet to pre-render from the server, providing your reader with a better experience. All you need is the tweet id from the url.

{% twitter 834439977220112384 %}
```

3. Medium Embeds
```
Just enter the full URL of the Medium article you are trying to embed.

{% medium https://medium.com/s/story/boba-science-how-can-i-drink-a-bubble-tea-to-ensure-that-i-dont-finish-the-tea-before-the-bobas-7fc5fd0e442d %}

```

4. SlideShare Embed
```
All you need is the SlideShare key

{% slideshare rdOzN9kr1yK5eE %}
```

5. Soundcloud Embed
```
Just enter the full URL of the Soundcloud track you are trying to embed.

{% soundcloud https://soundcloud.com/user-261265215/dev-to-review-episode-1 %}
```

6. Spotify Embed
```
Enter the Spotify URI of the Spotify track / playlist / album / artist / podcast episode you are trying to embed.

      {% spotify spotify:episode:5V4XZWqZQJvbddd31n56mf %}
```


See this PR here:
https://github.com/writingink/wink/pull/194
I know we have since added 'topics' to cnvs based on this ticket
https://github.com/cnvs/canvas/issues/434

But I think topics could greatly benefit from having a tree structure with topics/sub-topics (of course, those that don't need to make use of that functionality wont!) but for a lot of content sites, this would be useful to have. For example, see these URLs:

https://www.huffpost.com/news/politics
https://www.huffpost.com/entertainment/comedy
You could have several sub-topics under 'news', like 'world', 'US', 'financial', 'politics' etc. Same applies to entertainment and other topics/sub-topics.

As mentioned earlier, with tags you dont have a hierarchy, with topics you do...and topics give you a lot of flexibility and allow the user to browse content by looking through the topic/subtopic tree - which can be presented in a multitude of ways, in menus, in sidebars, etc). Topics can also be shown in URLs like my.blog/travel/international/trip-to-cyprus, or: my.blog/recipes/easybake/my-favorite-soup, where travel and recipes are category slugs.

As far as back-end admin of topics and sub-topics, it could look like how wordpress does it here: https://prnt.sc/m4jnjs
(I'm not a huge fan of wordpress but this is one feature they do well on)

@austintoddj  I hope this sufficiently explains the background behind the ask, and I hope this feature will make it into cnvs, which imo is the best laravel cms at the moment!

@austintoddj this is more of a question for you.

Here's another real use-case I ran into:
I am trying to update the authors (users table) by adding new fields for image, author username, bio, etc.
```
$post->author->image = '/img/authors/kp.jpg'; // author image URL (relative or absolute)
$post->author->url = '/author/kp123'; // author URL, so front-end can point to http://127.0.0.1:8001/author/kp123
$post->author->bio = 'KP is the founder of .......'; // author bio
```

Also, I am trying to update the posts table with additional fields, like so:
```$post->isPremium=1; // 0 or 1, for free/paid content, for example```

I still want to be able to inherit all the goodness of this package as it's development continues, by simply running 'composer update' to update my version of cnvs going forward. This means I want to extend these tables in a way that does not involve forking cnvs or modifying the source code. Is what I need as simple as just creating 2 migration files for 'users' and 'posts'? Your thoughts are appreciated. Btw I still think #509 is highly desirable, no matter what the answer to this one :)
ps. you really should make me a core member of cnvs at this point...lol