Gradle: 6.0.1
Kotlin: 1.3.61

I am getting the following failure when attempting to use the plugin against any of the sub-projects:

* What went wrong:
An exception occurred applying plugin request [id: 'org.jetbrains.intellij.inspections', artifact: 'org.jetbrains.intellij.plugins:inspection-plugin:0.3.2']
> Failed to apply plugin [id 'org.jetbrains.intellij.inspections']
   > Could not create task ':api:checkInspectionsMain'.
      > Could not create task of type 'CheckInspectionsTask'.
         > org.gradle.api.reporting.internal.TaskReportContainer.<init>(Ljava/lang/Class;Lorg/gradle/api/Task;)V

Not much detail here but I notice the colon's in the task name ':api:checkInspectionsMain' and wonder if that would cause a problem?

Any idea how I can debug this further?
The `gradlew` script was checked in with non-executable permissions, which means unix users can't use it out-of-the-box.  To fix:

```
git add --chmod=+x -- gradlew
git commit -m "make gradlew executable"
```

Only happens when a repo is started by a windows user.  It will stay fixed even after updating the gradlew wrapper on a windows machine in the future.  You can run the commands above on a windows or unix machine.
Tried to follow the example project for Android.
That crashed, so I tried to clone the project.

Only change was switching local.properties to point to my SDK.

I get the following crash.

> org.gradle.api.tasks.TaskExecutionException: Execution failed for task ':app:inspections'.
>         at org.jetbrains.intellij.tasks.AbstractInspectionsTask.run(AbstractInspectionsTask.kt:295)
>         at org.gradle.internal.reflect.JavaMethod.invoke(JavaMethod.java:73)
>         at org.gradle.api.internal.project.taskfactory.StandardTaskAction.doExecute(StandardTaskAction.java:46)
>         at org.gradle.api.internal.project.taskfactory.StandardTaskAction.execute(StandardTaskAction.java:39)
>         at org.gradle.api.internal.project.taskfactory.StandardTaskAction.execute(StandardTaskAction.java:26)
>         at org.gradle.api.internal.AbstractTask$TaskActionWrapper.execute(AbstractTask.java:794)
>         at org.gradle.api.internal.AbstractTask$TaskActionWrapper.execute(AbstractTask.java:761)
>         at org.gradle.api.internal.tasks.execution.ExecuteActionsTaskExecuter$1.run(ExecuteActionsTaskExecuter.java:131)
>         at org.gradle.internal.operations.DefaultBuildOperationExecutor$RunnableBuildOperationWorker.execute(DefaultBuildOperationExecutor.java:317)
>         at org.gradle.internal.operations.DefaultBuildOperationExecutor$RunnableBuildOperationWorker.execute(DefaultBuildOperationExecutor.java:309)
>         at org.gradle.internal.operations.DefaultBuildOperationExecutor.execute(DefaultBuildOperationExecutor.java:185)
>         at org.gradle.internal.operations.DefaultBuildOperationExecutor.run(DefaultBuildOperationExecutor.java:97)
>         at org.gradle.internal.operations.DelegatingBuildOperationExecutor.run(DelegatingBuildOperationExecutor.java:31)
>         at org.gradle.api.internal.tasks.execution.ExecuteActionsTaskExecuter.executeAction(ExecuteActionsTaskExecuter.java:120)
>         at org.gradle.api.internal.tasks.execution.ExecuteActionsTaskExecuter.executeActions(ExecuteActionsTaskExecuter.java:99)
>         at org.gradle.api.internal.tasks.execution.ExecuteActionsTaskExecuter.execute(ExecuteActionsTaskExecuter.java:77)
>         at org.gradle.api.internal.tasks.execution.OutputDirectoryCreatingTaskExecuter.execute(OutputDirectoryCreatingTaskExecuter.java:51)
>         at org.gradle.api.internal.tasks.execution.SkipUpToDateTaskExecuter.execute(SkipUpToDateTaskExecuter.java:59)
>         at org.gradle.api.internal.tasks.execution.ResolveTaskOutputCachingStateExecuter.execute(ResolveTaskOutputCachingStateExecuter.java:54)
>         at org.gradle.api.internal.tasks.execution.ValidatingTaskExecuter.execute(ValidatingTaskExecuter.java:59)
>         at org.gradle.api.internal.tasks.execution.SkipEmptySourceFilesTaskExecuter.execute(SkipEmptySourceFilesTaskExecuter.java:101)
>         at org.gradle.api.internal.tasks.execution.FinalizeInputFilePropertiesTaskExecuter.execute(FinalizeInputFilePropertiesTaskExecuter.java:44)
>         at org.gradle.api.internal.tasks.execution.CleanupStaleOutputsExecuter.execute(CleanupStaleOutputsExecuter.java:91)
>         at org.gradle.api.internal.tasks.execution.ResolveTaskArtifactStateTaskExecuter.execute(ResolveTaskArtifactStateTaskExecuter.java:62)
>         at org.gradle.api.internal.tasks.execution.SkipTaskWithNoActionsExecuter.execute(SkipTaskWithNoActionsExecuter.java:59)
>         at org.gradle.api.internal.tasks.execution.SkipOnlyIfTaskExecuter.execute(SkipOnlyIfTaskExecuter.java:54)
>         at org.gradle.api.internal.tasks.execution.ExecuteAtMostOnceTaskExecuter.execute(ExecuteAtMostOnceTaskExecuter.java:43)
>         at org.gradle.api.internal.tasks.execution.CatchExceptionTaskExecuter.execute(CatchExceptionTaskExecuter.java:34)
>         at org.gradle.api.internal.tasks.execution.EventFiringTaskExecuter$1.run(EventFiringTaskExecuter.java:51)
>         at org.gradle.internal.operations.DefaultBuildOperationExecutor$RunnableBuildOperationWorker.execute(DefaultBuildOperationExecutor.java:317)
>         at org.gradle.internal.operations.DefaultBuildOperationExecutor$RunnableBuildOperationWorker.execute(DefaultBuildOperationExecutor.java:309)
>         at org.gradle.internal.operations.DefaultBuildOperationExecutor.execute(DefaultBuildOperationExecutor.java:185)
>         at org.gradle.internal.operations.DefaultBuildOperationExecutor.run(DefaultBuildOperationExecutor.java:97)
>         at org.gradle.internal.operations.DelegatingBuildOperationExecutor.run(DelegatingBuildOperationExecutor.java:31)
>         at org.gradle.api.internal.tasks.execution.EventFiringTaskExecuter.execute(EventFiringTaskExecuter.java:46)
>         at org.gradle.execution.taskgraph.DefaultTaskExecutionGraph$ExecuteTaskAction.execute(DefaultTaskExecutionGraph.java:262)
>         at org.gradle.execution.taskgraph.DefaultTaskExecutionGraph$ExecuteTaskAction.execute(DefaultTaskExecutionGraph.java:246)
>         at org.gradle.execution.taskgraph.DefaultTaskPlanExecutor$TaskExecutorWorker$1.execute(DefaultTaskPlanExecutor.java:136)
>         at org.gradle.execution.taskgraph.DefaultTaskPlanExecutor$TaskExecutorWorker$1.execute(DefaultTaskPlanExecutor.java:130)
>         at org.gradle.execution.taskgraph.DefaultTaskPlanExecutor$TaskExecutorWorker.execute(DefaultTaskPlanExecutor.java:201)
>         at org.gradle.execution.taskgraph.DefaultTaskPlanExecutor$TaskExecutorWorker.executeWithTask(DefaultTaskPlanExecutor.java:192)
>         at org.gradle.execution.taskgraph.DefaultTaskPlanExecutor$TaskExecutorWorker.run(DefaultTaskPlanExecutor.java:130)
>         at org.gradle.internal.concurrent.ExecutorPolicy$CatchAndRecordFailures.onExecute(ExecutorPolicy.java:63)
>         at org.gradle.internal.concurrent.ManagedExecutorImpl$1.run(ManagedExecutorImpl.java:46)
>         at org.gradle.internal.concurrent.ThreadFactoryImpl$ManagedThreadRunnable.run(ThreadFactoryImpl.java:55)
> Caused by: java.lang.NullPointerException
>         at org.jetbrains.intellij.ProxyRunner.<init>(ProxyRunner.kt:78)
>         at org.jetbrains.intellij.ProxyRunner.<init>(ProxyRunner.kt:14)
>         at org.jetbrains.intellij.tasks.AbstractInspectionsTask$run$runner$1.invoke(AbstractInspectionsTask.kt:278)
>         at org.jetbrains.intellij.tasks.AbstractInspectionsTask$run$runner$1.invoke(AbstractInspectionsTask.kt:25)
>         at org.jetbrains.intellij.tasks.AbstractInspectionsTask$Runner.getOrInit(AbstractInspectionsTask.kt:315)
>         at org.jetbrains.intellij.tasks.AbstractInspectionsTask.run(AbstractInspectionsTask.kt:276)
>         ... 44 more

Running on MacOS 10.15.1
Hi! I'm trying to get this plugin working with a mpp project. Here are the additions I've made to my gradle configuration to try to get this setup:
```gradle
buildscript {
    repositories {
        maven { url 'https://dl.bintray.com/kotlin/kotlin-dev' }
    }
    dependencies {
        classpath "org.jetbrains.intellij.plugins:inspection-plugin:0.3.2"
    }
}

apply plugin: 'org.jetbrains.intellij.inspections'

inspections {
    inheritFromIdea = true
    idea.version 'ideaIC:2019.1.4'
    plugins.kotlin.version '1.3.50'
}
```

With this configuration, I'm not seeing any of the sourceSet-specific inspection or check tasks show up. I'm not sure what I'm doing wrong. A sample mpp project that uses this plugin would be helpful. Thanks!
IntelliJ IDEA zip file that is being used for running inspections is downloaded during configuration time. It should instead be downloaded during task execution

<img width="650" alt="Screen Shot 2019-11-17 at 12 41 02 AM" src="https://user-images.githubusercontent.com/763339/69000635-0c8e5e80-08d3-11ea-9519-56600ffaf776.png">

Concerning the reformat tasks: In a CI environment, it is rarely desirable that source files are modified. However, it would still be helpful if there would be a task which only checks whether the source files comply to the coding styles (formatting, organize imports, etc.) specified in the IDEA project. Having a task which actually applies the coding style is still useful for the developers locally.

Consider using Gradle's incremental task inputs so that only files are checked which where actually changed.

Thanks! I'd love to have a well working and fast IDEA integration for Gradle so that our team could switch from a many inspection plugins solution to a single one and convincing them of the many benefits of IDEA.
There is a deprecation warning when the plugin (version 0.3.0 RC3) is added to a project:

```
$ ./gradlew --warning-mode all

> Configure project :
Internal API constructor TaskReportContainer(Class<T>, Task) has been deprecated. This is scheduled to be removed in Gradle 6.0.
        at build_3pwg2df9d7i73h29fwg5jz0bp.run(/home/bjrke/projects/euler/build.gradle:14)
        (Run with --stacktrace to get the full stack trace of this deprecation warning.)

> Task :help

Welcome to Gradle 5.4.1.

To run a build, run gradlew <task> ...

To see a list of available tasks, run gradlew tasks

To see a list of command-line options, run gradlew --help

To see more detail about a task, run gradlew help --task <task>

For troubleshooting, visit https://help.gradle.org

BUILD SUCCESSFUL in 0s
1 actionable task: 1 executed
```
When I started https://github.com/bentolor/idea-cli-inspector there was no other, easy option to leverage the benefits from the IDEA inspections.

My colleague just pointed me toward this project and as an author of the nuts and bolts solution I'm very interested in this plugin.

I have yet not thrown a deep look into this plugin, but I assume that there might be a few concepts and learning from idea-cli-inspector which might be beneficial for this project, too.

A rough idea of how my script works might give the [`.ideainspect`](https://github.com/bentolor/idea-cli-inspector/blob/master/.ideainspect) configuration file. 

Things I still have no good solution to are:

* Improve analysis speed, major by
** Proper scope to excluded all the unwanted stuff
** Re-using the IDEA index (while actually have to delete it because it gets broken/delivers wrong results on re-analysing the same code base over and over again
* Proper Container/Docker Support
* Supporting UE featureset
* Update & Installing plugins (for correct/extended analysis support). Currently I'm doing this my manually installing/maintaining/injecting the proper `~/.IntelliJIdea201xx.x/config/` parts into the installation

I'd be very interested in the scope of this project: Can anybody give me a rought outline over the scope, plans, roadmap and priority of this plugin?

Make the following tasks cacheable and support up to date checks.

- unzip-idea
- download-kotlin-plugin
- unzip-kotlin-plugin