just upgrading libraries - everything exists for 2.13 except product-collections
I would like to give 2 suggestions:

1 - Give the option of using the case classes fields as header of the CSV file using reflection

2 - Option to persist string fields with/without delimiters such as "" that sometimes could be unnecessary

Can I do this and submit the PR?  
Upgrading to latest opencsv as v2.3 is quite old.
Also updated some scala and sbt dependencies.
use readCsvFromFileName
This adds a module for the refined project.

I moved the purecsv main code into its own directory to provide a clearer separation of the purecsv core and the modules.
Sometimes an application only needs to produce or consume CSV, but not both. 

Splitting the converter trait into a reader and a writer trait would allow applications which need to work with custom types (but only in one direction) to avoid writing unnecessary code or leaving methods unimplemented. Converter would still stick around as a combination of reader and writer. 

If there's interest, I'll implement this when I have some free time. 
I first have to thank you for this awesome library. I read through the shapeless guide and got to understand HList. I however want to try out this library for a specific use case where the csv fields look like this:

```
MeterId,Date,00:30,01:00,01:30,02:00,02:30,03:00,03:30,04:00
8814791409,08/02/2017,0,0,0,0,0,0,170.153
```

I want to parse this into a case class like:

class MeterData(meterId: String, dateTime: DateTime, meterReadings: Map[String, Double])

where meterReadings are 00:30 -> 0, 01:00 -> 0, 01:30 -> 0 and so on...

I just tried doing this bluntly with the PureCSV library and as expected it fails

```
scala> CSVReader[MeterData].readCSVFromFile("meter.csv")
<console>:16: error: could not find implicit value for parameter rfcImp: purecsv.unsafe.converter.RawFieldsConverter[MeterData]
       CSVReader[MeterData].readCSVFromFile("meter.csv")
```

I guess I need to spin up my own implicit converter, but I could not figure out how. Would you mind throwing some light on this?
Given the following data structure:

case class Foo(a : Int, b : String)

This fails on pure parsing:

"A", 1

but this passes

"A",1

Notice the space after the comma in the first example.

Is the library behaving as expected here?

Hi,

Is it possible to return an iterator using readCSVFromFile? If I am correct, it returns a List() with all contents of the file loaded into memory. Ideally I would like to get something like getLines from io.Source which returns an iterator.

Complex hierarchy look like not properly handled by PureCSV 
