

The argument -Dplug:default was stopping sound working; removing it makes it
work again.

Rather to my surprise, it also worked with the rest of the arguments
removed. This seems odd given that it claims to be downloading a raw audio
file, but removing -q showed that the audio data aplay was being fed is in
fact a WAV file, and downloading the file and checking it confirms this.

Hence, refer to “wav audio” rather than “raw audio”, and remove all
command-line arguments to aplay. Win!
Fixes #21
When I run `./roll.sh` on Fedora 27, the audio and video are out of sync because `aplay` plays the audio at half speed ([see code](https://github.com/keroserene/rickrollrc/blob/00edc2f2054d089d5516ee00172cf821f24738f5/roll.sh#L66)). The rate should be increased from 8000 Hz to 16000 Hz.
Hey!

This is very fun, but could it be made to work offline for cases where the user running may have restricted internet?
Added a slightly obfuscated version of the command to the readme :) 
It does exactly the same as the command above. The link however is in hex.

Warning: This was only tested on Linux.

On Linux, the cached copies are stored in $XDG_CACHE_HOME (or its
default, ~/.cache) according to the XDG specification.
On Mac, the cache dir is ~/Library/Caches.
On Windows, the cache dir remains /tmp.
In all cases, a new subfolder under the cache dir named "astley" is made
and the files are stored there.

The integrity of the cached copies is verified using MD5 hashes.

Mac has md5 and Linux and Cygwin should have md5sum as part of
coreutils. This catches the case where the file was only partially
downloaded, and if so, it will refetch the file.

Resolves #14 

I did not have aplay on my system and the audio did not work. Added a line to play the audio with paplay (which is PulseAudio's replacement for aplay) and to actually prefer it over aplay since many modern Linux systems have PulseAudio as their sound system.
