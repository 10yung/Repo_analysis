在Unity上Inject之后，可以运行Hotfix代码.但是出包之后hotfix就失败.
cs_generator的返回值 实际上是一个luaTable, 而测试6中c#端使用StartCoroutine的参数是 IEnumerator或者string.
想请问一下 这个类型转化的是在哪里进行的 或者是我哪里没有理解到吗 谢谢
签名工具，作者案例是可以运行的，然后按着文档操作，也生成了签名文档，但是按照文档操作，提示无效签名。很是困惑，是不是作者做了其他操作，没有在文档上进行说明。
签名工具可以在FAQ中写一下吗？无法使用？
请问hotfix flag有详细一点的文档吗，比如state那个函数是什么意思
热更代码是去重写类的一个autoplay的属性，只有get。调用的是xlua.hotfix
![image](https://user-images.githubusercontent.com/15363918/71152140-8c13a280-2270-11ea-8793-62fe11873bc3.png)

![image](https://user-images.githubusercontent.com/15363918/71151966-17406880-2270-11ea-8f35-5415985e2d5c.png)

Unity2018下使用示例代码 02_U3DScripting ，在LuaBehaviour的OnDestroy函数最后添加一句luaEnv.Dispose(); 结束运行后，报这个异常。
![image](https://user-images.githubusercontent.com/9821409/70675094-1ed99d80-1cc3-11ea-8846-acbee17c8669.png)

我这边打断点调试来看，虽然在luaEnv.Dispose()执行之前luaOnDestroy就被置空了，但是实际上luaOnDestroy引用的delegatebridges是在luaEnv.Dispose()执行之后才被回收的。
但是相同代码在Unity2017中不会有这个问题。
在运行时报了这个错

NotSupportedException: System.AppDomain::DefineDynamicAssembly
  at System.AppDomain.DefineDynamicAssembly (System.Reflection.AssemblyName name, System.Reflection.Emit.AssemblyBuilderAccess access) [0x00000] in <00000000000000000000000000000000>:0 
  at XLua.CodeEmit.get_CodeEmitModule () [0x00000] in <00000000000000000000000000000000>:0 
  at XLua.CodeEmit.EmitDelegateImpl (System.Collections.Generic.IEnumerable`1[T] groups) [0x00000] in <00000000000000000000000000000000>:0 
  at XLua.ObjectTranslator.initCSharpCallLua () [0x00000] in <00000000000000000000000000000000>:0 
  at XLua.ObjectTranslator..ctor (XLua.LuaEnv luaenv, System.IntPtr L) [0x00000] in <00000000000000000000000000000000>:0 
  at XLua.LuaEnv..ctor () [0x00000] in <00000000000000000000000000000000>:0 
  at GameApp.LuaManage..ctor () [0x00000] in <00000000000000000000000000000000>:0 
  at GameApp.LuaManage.get_Instance () [0x00000] in <00000000000000000000000000000000>:0 
  at GameApp.GameManage.GameInit () [0x00000] in <00000000000000000000000000000000>:0 
  at GameApp.MainApp.Start () [0x00000] in <00000000000000000000000000000000>:0 
 
我大概看了一下，凡是有XLUA_GENERAL的宏基本都用的Emit，我把这个宏去掉或者换成.Net 2.0是否也可以正常运行xlua？

你好，
我尝试在xlua中使用unirx，但是我遇到一个糟糕的问题。
![image](https://user-images.githubusercontent.com/24834613/69854607-725fea80-12c4-11ea-858b-f429da4adfd6.png)
我尝试配置了luacallcsharp和csharpcalllua，然后在lua中使用它们。但是我收到一个错误信息。
![image](https://user-images.githubusercontent.com/24834613/69854667-9e7b6b80-12c4-11ea-905a-f0bc314aa23f.png)
![image](https://user-images.githubusercontent.com/24834613/69854691-a89d6a00-12c4-11ea-9db6-fcef20195dd1.png)

Unity 2019.1.11f1生成代码时使用的ExampleConfig里的配置，并且打开了热补丁自动化配置里的所有内容，DelegatesGensBridge里会生成<>f__AnonymousType1<System.Type, System.Reflection.MethodInfo>这样的代码，<>f__AnonymousType1不知道是什么？