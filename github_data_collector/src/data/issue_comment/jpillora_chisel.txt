I tried to capture the packet and confirmed that chisel uses websocket to transmit TCP traffic., like this:
![image](https://user-images.githubusercontent.com/4661804/71391705-42e09b80-2640-11ea-80b9-1d72efcade2a.png)
If the firewall only allows HTTP traffic and websocket is not allowed, chisel will not work.
Can chisel only use HTTP?
I find a similar thing called Bidirectional-streams Over Synchronous HTTP (BOSH).
https://en.wikipedia.org/wiki/BOSH_(protocol)
Currently supports two encryption method: sha256 and sha512. Can be added on compile time.

User can create a hashed password with `mkpasswd --method=sha-512`, Server will get the usernames and password as usual, client will supply a hashed password:
`chisel client --auth user:'$6$QYGHuvnm1c29b0cm$IzOCBgI39CrAphCfRHSwWkpYLGW0f7/gUUXyzjG6W6gjKdggZ3qh4x6CD7H9ixmyOHYwZaYqGdqJKSZpeSw9J1' `

Server will try to create a Crypter with the given password prefix ($5$ is sha256 and $6$ is sha512) and try to decrypt it. If a Crypter not available, it will try a plaintext authentication.
This PR adds a new optional flag to the client `--ca-file` which can be used to verify certificate of the server when using `wss` or `https`.

The server is also capable of serving TLS via `--tls-cert-file` and `--tls-keyfile` flags.

Fixes #34 and it's a more secure alternative of #116.
When i try to connect my server via --hostname option and custom ip adress in http everything is work well but when i try to connect via https, client doesnt connect server.
```bash
#Example start  commad
chisel client --max-retry-interval 1s --hostname www.example.com --pid https://8.8.8.8/ 8080';
```

But when I add hostname to hosts file and replace ip adress with hostname everything is fine.

Ä° think this program tries to ip adress as certificate domain and dont use the --hostname variable
Our proxy terminates websockets after 48 hours.   ( --keepalive just helped a "bit", so that the proxy won't close after 180 seconds )

The inner (tunneled) connections will also get terminated. It would be nice, to have a reconnection option within a window of a few seconds.

This way the inner (tunneled) connections would not suffer a termination.
I am getting the following error when trying to run behind an nginx proxy with letsencrypt:

```
2019/10/30 23:48:14 client: Connecting to wss://[...]:443/chisel
2019/10/30 23:48:15 client: Handshaking...
2019/10/30 23:48:15 client: Fingerprint ee:8f[...]
2019/10/30 23:48:15 client: Sending config
2019/10/30 23:48:15 client: Connected (Latency 37.957001ms)
2019/10/30 23:48:15 client: conn#1: Remote failed (dial tcp 0.0.0.0:6002: connect: connection refused)
2019/10/30 23:48:15 client: conn#2: Remote failed (dial tcp 0.0.0.0:6002: connect: connection refused)
[...]
```

Any ideas why this happens?

This allows to add custom Http/s headers. In our case, we need this because we have the server behind a basic auth secured reverse proxy.
Hi,
I have this error after 2 months of constant running:

2019/09/24 02:37:40 http: panic serving 10.39.0.0:41388: runtime error: invalid memory address or nil pointer dereference
goroutine 906693 [running]:
net/http.(*conn).serve.func1(0xc0002281e0)
	/usr/local/go/src/net/http/server.go:1746 +0xd0
panic(0x7d38e0, 0xb52480)
	/usr/local/go/src/runtime/panic.go:513 +0x1b9
github.com/jpillora/chisel/server.(*Server).handleWebsocket(0xc0000b4600, 0x8b1fe0, 0xc0001a80e0, 0xc000862200)
	/src/server/handler.go:87 +0x47e
github.com/jpillora/chisel/server.(*Server).handleClientHandler(0xc0000b4600, 0x8b1fe0, 0xc0001a80e0, 0xc000862200)
	/src/server/handler.go:23 +0x40f
github.com/jpillora/chisel/server.(*Server).handleClientHandler-fm(0x8b1fe0, 0xc0001a80e0, 0xc000862200)
	/src/server/server.go:146 +0x48
net/http.HandlerFunc.ServeHTTP(0xc00009d450, 0x8b1fe0, 0xc0001a80e0, 0xc000862200)
	/usr/local/go/src/net/http/server.go:1964 +0x44
net/http.serverHandler.ServeHTTP(0xc0000a3110, 0x8b1fe0, 0xc0001a80e0, 0xc000862200)
	/usr/local/go/src/net/http/server.go:2741 +0xab
net/http.(*conn).serve(0xc0002281e0, 0x8b2360, 0xc0004fc480)
	/usr/local/go/src/net/http/server.go:1847 +0x646
created by net/http.(*Server).Serve
	/usr/local/go/src/net/http/server.go:2851 +0x2f5

It seems to be coming from the internals of go...
Hi everyone,

I'm wondering, is there any way to store authentication details encrypted. Chisel doesn't have as far as I can find but maybe with a 3rd party application it can be done. 

Also how hard would it be to implement this feature? I want to look into it. 
I am having this same issue just with Flask behind chisel:
https://github.com/omab/django-social-auth/issues/157
Is there a way to configure the chisel proxy like in nginx, something like this:
```
location / {
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header Host $http_host;
        proxy_pass http://127.0.0.1:1234;
 }
```