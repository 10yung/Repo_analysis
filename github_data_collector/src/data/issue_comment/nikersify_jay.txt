This will allow you to press shift + enter by maintaining a queue of 2 keycodes from last pressed keys.

I had to use `iohook` library to be able to capture JUST shift key presses. I did not take a ton of time to set it up properly, so it does not teardown listener and has a memory leak.

Also, I cant get the evaluate to work properly with multiline, but this is a good start I think.

```ts
		ioHook.on('keypress', (event: IOHookEvent) => {
			if (lastKeys.length < 2) lastKeys.push(event)
		          else {
				lastKeys.pop()
				lastKeys.unshift(event)
			}
		});
```

```ts
			else if (name === 'return') {
				const lastKey = lastKeys.concat().pop()
				if (lastKey!.shiftKey) {
					stdout.write('\n')
					rl.write('\n')
				} 
```
It's the first attempt to work with cli utils so I probably haven't considered all the possible issues.
Feel free to close it if it's completely inappropriate.
By the way thank you for the awesome project 👍 
Entering the following causes jay to exit immediately (without an error):

```javascript
p = new Promise(() => {})
```

It works fine in node's REPL:

```javascript
p = new Promise(() => {}) // => Promise { <pending> }
```

### Possibly Related

- https://github.com/nikersify/jay/issues/17

### Environment

- jay: 0.2.2
- node: v12.13.0
- OS: Linux (Arch)
I can't start jay

When I first tried starting it, I got this:

```
$ npx -p jay-repl jay
npx: installed 175 in 19.921s
node v10.9.0 npm@6.2.0 jay-repl@0.2.2
jay is getting plugin support! Help us make the API suit you: https://github.com/nikersify/jay/pull/18
(node:20672) UnhandledPromiseRejectionWarning: Error: process.stdin.setRawMode does not exist
    at resolve (C:\Users\tobbe\AppData\Roaming\npm-cache\_npx\36004\node_modules\jay-repl\dist\prompt.js:67:19)
    at new Promise (<anonymous>)
    at Object.promptLine [as default] (C:\Users\tobbe\AppData\Roaming\npm-cache\_npx\36004\node_modules\jay-repl\dist\prompt.js:63:12)
    at C:\Users\tobbe\AppData\Roaming\npm-cache\_npx\36004\node_modules\jay-repl\dist\cli.js:112:66
    at Generator.next (<anonymous>)
    at C:\Users\tobbe\AppData\Roaming\npm-cache\_npx\36004\node_modules\jay-repl\dist\cli.js:8:71
    at new Promise (<anonymous>)
    at __awaiter (C:\Users\tobbe\AppData\Roaming\npm-cache\_npx\36004\node_modules\jay-repl\dist\cli.js:4:12)
    at processPrompt (C:\Users\tobbe\AppData\Roaming\npm-cache\_npx\36004\node_modules\jay-repl\dist\cli.js:111:20)
    at C:\Users\tobbe\AppData\Roaming\npm-cache\_npx\36004\node_modules\jay-repl\dist\cli.js:172:9
(node:20672) UnhandledPromiseRejectionWarning: Unhandled promise rejection. This error originated either by throwing inside of an async function without a catch block, or by rejecting a promise which was not handled with .catch(). (rejection id: 2)
(node:20672) [DEP0018] DeprecationWarning: Unhandled promise rejections are deprecated. In the future, promise rejections that are not handled will terminate the Node.js process with a non-zero exit code.
```

Thought that maybe it was because I was on an old version of Node, so I upgraded. Still getting the same error :( 

```
$ npx -p jay-repl jay
npx: installed 175 in 15.339s
node v13.0.1 npm@6.12.0 jay-repl@0.2.2
jay is getting plugin support! Help us make the API suit you: https://github.com/nikersify/jay/pull/18
(node:35284) UnhandledPromiseRejectionWarning: Error: process.stdin.setRawMode does not exist
    at C:\Users\tobbe\AppData\Roaming\npm-cache\_npx\27480\node_modules\jay-repl\dist\prompt.js:67:19
    at new Promise (<anonymous>)
    at Object.promptLine [as default] (C:\Users\tobbe\AppData\Roaming\npm-cache\_npx\27480\node_modules\jay-repl\dist\prompt.js:63:12)
    at C:\Users\tobbe\AppData\Roaming\npm-cache\_npx\27480\node_modules\jay-repl\dist\cli.js:112:66
    at Generator.next (<anonymous>)
    at C:\Users\tobbe\AppData\Roaming\npm-cache\_npx\27480\node_modules\jay-repl\dist\cli.js:8:71
    at new Promise (<anonymous>)
    at __awaiter (C:\Users\tobbe\AppData\Roaming\npm-cache\_npx\27480\node_modules\jay-repl\dist\cli.js:4:12)
    at processPrompt (C:\Users\tobbe\AppData\Roaming\npm-cache\_npx\27480\node_modules\jay-repl\dist\cli.js:111:20)
    at C:\Users\tobbe\AppData\Roaming\npm-cache\_npx\27480\node_modules\jay-repl\dist\cli.js:172:9
(node:35284) UnhandledPromiseRejectionWarning: Unhandled promise rejection. This error originated either by throwing inside of an async function without a catch block, or by rejecting a promise which was not handled with .catch(). (rejection id: 2)
(node:35284) [DEP0018] DeprecationWarning: Unhandled promise rejections are deprecated. In the future, promise rejections that are not handled will terminate the Node.js process with a non-zero exit code.
```

Windows 10, git-bash
It would be nice if we could programmatically call the jay repl and also inject our own variables inside. Basically emulate the node `repl` library but with the features of Jay. Would this be possible?
Simply running `jay` from the console on Windows hangs for about 3 minutes before eventually displaying the node, npm, and jay-repl versions (and prompt). This only happens when behind a network proxy. I've done some investigation and the code that causes this to hang is the following line in `cli.ts`.

`version('npm', execa.sync('npm', ['-v']).stdout)`

It appears that this is [caused by a "bug" in npm](https://github.com/nodejs/node/issues/21632). Apparently, version 4.4.0 of npm added an update check feature. When running npm commands via `child_process` the network proxy is not observed and thus a network timeout occurs after 3 minutes. 

A workaround for this is to set the `NO_UPDATE_NOTIFIER` environment variable to false. I tested the following code that resolves this issue:

```javascript
function getNpmVersion() {
	const env = {
		...process.env,
		NO_UPDATE_NOTIFIER: "true",
	};

	const result = execa.sync('npm', ['-v'], { env });

	return result.stdout;
}
```

Could you fix this? I tried cloning the repo to do a pull request but I am getting errors doing that too (which also appear to be network proxy related!).

node v10.13.0 
npm v6.4.1 
jay-repl v0.2.2

Thanks,
Jonathan

This pull request adds plugin support to Jay, allowing for deep extensibility of Jay's render, keybinding and evaluation systems.

# Overview

The plugin syntax is trivial - the two available methods are `jay.on(event, cb)` and `jay.one(event, cb)`. `.on`
listens for events continuously, `.one` just for one, both calling `cb` when an event is fired.

Event listeners are called in the same order they're registered in and act as "reducers" - the value returned from the first listener will be passed to the second, the value returned from the second to the third, etc.

`cb` takes a signature of `(arg?, stop?) => arg`. It is expected to return a value of the same type as `arg` (or `undefined` if `arg` is not provided for the given event type), or `stop(arg)`, which will make the current event listener the last in the chain (think `e.preventDefault()`).

This architecture allows for powerful extensibility - [almost all of jay's core features have been rebuilt with plugins](https://github.com/nikersify/jay/blob/plugins/source/plugins/index.ts) (all of which can easily be disabled individually by removing them from `jayrc.js` in the config directory).

# `jayrc.js`
`jayrc.js` is a configuration file that will be loaded every time Jay is started via the CLI. It's a standard JavaScript file, which should have a default export of a single function that takes `jay` as a parameter, which acts as the "API" which plugins use to modify Jay's behavior.ts` in this PR).

https://github.com/nikersify/jay/blob/f1aef2026d71fc74b78d8ca67aca0335e4e9b961/source/types.ts#L62-L70
https://github.com/nikersify/jay/blob/f1aef2026d71fc74b78d8ca67aca0335e4e9b961/source/types.ts#L52-L60

See more in this file:
https://github.com/nikersify/jay/blob/plugins/source/types.ts

No plugins are loaded outside of `jayrc.js` - if no plugins get loaded there and since almost all of Jay's core is implemented via plugins, Jay won't know how to handle any keybinds, render any output or how to evaluate any code.

If no `jayrc.js` exists, we will generate a default one that will contain logic to load all default plugins, along with some help comments explaining what a user can do inside of the file.

Inside of the function exported from `jayrc.js` the user is expected to add their own plugins, along with configuring/removing the built-in ones.

Example `jayrc.js`:

```js
module.exports = jay => {
	// Add an explosion before a line is executed
	// [Include a third party plugin]
	require('jay-plugin-explosions')(jay)

	// [Quick inline plugin]
	jay.on('line', line => line.replace('var', 'const'))

	// [Default plugins]
	// Bracket/quote pair completion, adds the second " after just typing one "
	require('jay-repl/plugin/pairs')(jay)

	// Input code highlighting
	require('jay-repl/plugin/colors')(jay)

	// Remote npm require
	require('jay-repl/plugin/npm-require')(jay)

	// Dropdown completion
	require('jay-repl/plugin/dropdown-completion')(jay)

	// Fallback key handler
	require('jay-repl/plugin/readline-input')(jay)
}
```

# Example plugins:

All examples are in the format of:
- implementation
- repl input (optionally)
- repl output

## Code replacement
```js
jay.on('line', (line, stop) => {
	return line.replace('cats are ugly', 'cats are pretty')
})
```
```js
> console.log('cats are ugly')
```
```js
< 'cats are pretty'
```

## Input doubler
```js
jay.on('keypress', (key, stop) => {
	// `ctrl+y`
	if (ctrl && name === 'y') {
		jay.prompt.readline.write(jay.prompt.readline.line)

		// Since the key is handled we don't want to have any
		// further handlers be executed with an already handled key
		return stop(key)
	}

	return key
})
```
```js
> 'programming is fun' + <ctrl+y>
```
```js
> 'programming is fun' + 'programming is fun' 
```

## Display input length
```js
jay.on('render', ([output, cursor]) => {
	const length = jay.prompt.readline.line.length
	const prepend = `(${length})`
	return [
		prepend + output,
		// Need to offset the cursor by the amount of characters added
		cursor + prepend.length
	]
})
```
```js
(20) > 'programming is fun'
```
```js
(25) > 'programming is very fun'
```

## Events
At the moment, the following events are emitted from Jay:

### `line: string`

Emitted every time a prompt instance is finished and the input is ready to be passed into evaluators - event useful for inspecting/modifying input on the fly, evaluating it, etc.

### `keypress: Key`

https://github.com/DefinitelyTyped/DefinitelyTyped/blob/217f9fc253e9a9dd367c5960f1324fba685d8037/types/node/readline.d.ts#L5-L11

Emitted every time a key is pressed in the prompt - useful for registering, well, keybinds!

### `render: [output: string, cursor: number]`

Every time a render is about to occur. `output` is a string that will be written to the screen, `cursor` is a number that defines the offset of the displayed cursor - e.g. `cursor = 5` the cursor will be placed `5` characters to the right of the (0, 0) coordinate.

Obviously useful for modifying, appending, removing things from the output.

# TODO

Things that **need** to be done:
- [x] `plugger.one` method
- [x] Add eager eval to evaluate plugin
- [x] Bracket completion plugin
- [x] `ctrl+l` plugin
- [x] `ctrl+z` plugin
- [x] `hello` plugin (greetings message that shows jay, node, npm versions etc.)
- [x] `jay.help()` plugin
- [x] Load `$config/jayrc.js` - especially define `require`'s behavior - we want to support third party modules in the config file, what would be a the nicest way of accomplishing that?
- [ ] Completion plugin
- [ ] Display information on how to edit the rc file when launching Jay
- [ ] User documentation
- [ ] Fix tests

Nice to haves:
- [ ] Test most plugins individually
- [ ] increase acorn's ecmaVersion's (support BigInt)
- [ ] BigInt syntax highlighting
- [ ] Improve results promise resolution in `prompt.ts` (at the time of writing it's just a dirty `EventEmitter` hack, would be nice to have type safety there)
- [ ] `plugins/smart-require` improvements
	- [ ] Break loop if user answers "no" to installing a package (better UX)
	- [ ] `stop()` execution if there's a "no" answer given, preventing an ugly "module not found" error
- [ ] Extract repl history into a plugin
- [ ] Move some plugin-specific logic into the plugins themselves (e.g. `ask.ts` to `plugins/smart-require.ts` since it's not used anywhere else)
- [ ] Prettify types in `plugger.ts`
	- [ ] Return `unknown` type from `on`'s callback - since it touches vanilla javascript code it needs to be type checked at runtime (could use `io-ts` maybe?)
	- [ ] `CArrayLike` is a giant ugly union with 1 item, 2 item, 3 item, ..., 9 item array - would be nice to prettify it if possible
- [ ] Try to improve `plugger`'s performance
- [ ] Dropdown menu in completion plugin

---

I would greatly appreciate any feedback & help related to this PR, thanks in advance!
Input:
```
Promise.resolve(5)
```
Output: 
```
5
```
Expected: 
```
Promise { 5 }
```
If QUIT_W_C (quit with c) variable exists, switch the exit command from CTRL+D to CTRL+C

There's definitely a nicer way to do this, but it means that an alias can be set up for example, and that ctrl+d remains the default.

Personally, I'm in the habit of hitting ctrl+c a few times, and doing the same with ctrl+d often ends in accidentally terminating my bash session, so being able to switch it to ctrl+c is preferable.