Thanks for this pretty useful library. In the docs, events (like cropend) show supported options like mouseup, pointercancel etc. How do I use these options? Any examples would be great. 

Also saw this [SO post](https://stackoverflow.com/q/52207478/1526703) with a similar question.
It is a "bug" or is there a necessary code step required to avoid the creation of additional ".cropper-container" elements?

Thanks,
MaccabeeY
Hello, i don't know touch rotating is possible or already enabled. If still is not it is featured. Can you please add it too? If it is already existed then how i can implement it?
I am trying to crop an image before uploading it in react-typescript and it works fine on smaller images. However when I try to work with large images (9.5 mb, 6000x4000), it moves out of the canvas and doesn't follow the style rules. It just stays at a smaller size (2700x1800) which is set after a crop event is triggered AFTER the ready event. 

Two crop events happen before the ready event and the size comes what is expected around 480x320, however I don't understand why another crop event is being triggered after the ready event even though I am not doing anything which sets the image to 2700 x 1800.

If I try to set the canvas size using setCanvasData() in the crop event after the ready event, it says "too much recursion" and if I try to zoom in using the slider, the zoom starts from the initial position and zooms in assuming the image is back to 2700x1800.

Here is the gist: https://gist.github.com/2DSharp/7d570c66571b7f51b7e2060ffdd513b9
Firefox (v70.0.1 (64 bit) on Windows 10, moving or dragging the crop box with the mouse isn't working.

Did a bit of javascript tracing:
'action' attribute value is not persisting between 'cropStart' and 'CropMove'

I can see 'this.action' being assigned the correct value in line 1911 (cropper.js v1.5.6) but
it's empty again at the start of the 'cropMove' on line 1920.

<!-- Please don't delete this template -->

<!-- PULL REQUEST TEMPLATE -->
<!-- (Update "[ ]" to "[x]" to check a box) -->

**Summary**

**What kind of change does this PR introduce?** (check at least one)

- [x] Bugfix
- [ ] Feature
- [ ] Code style update
- [x] Refactor
- [ ] Docs
- [ ] Build-related changes
- [ ] Other, please describe:

If changing the UI of default theme, please provide the **before/after** screenshot:

**Does this PR introduce a breaking change?** (check one)

- [x] Yes
- [ ] No

If yes, please describe the impact and migration path for existing applications:

All the TypeScript type definitions has been rewritten.
The migration path could involve some fixes on the user codebase typings; by the way the new types should be already "battle-tested" because they should be already used by many users through [DefinitelyTyped](https://github.com/DefinitelyTyped/DefinitelyTyped/tree/master/types/cropperjs).

**The PR fulfills these requirements:**

- [ ] When resolving a specific issue, it's referenced in the PR's title (e.g. `fix #xxx[,#xxx]`, where "xxx" is the issue number)

You have tested in the following browsers: (Providing a detailed version will be better.)

- [ ] Chrome
- [ ] Firefox
- [ ] Safari
- [ ] Edge
- [ ] IE

If adding a **new feature**, the PR's description includes:

- [ ] A convincing reason for adding this feature
- [ ] Related documents have been updated
- [ ] Related tests have been updated

To avoid wasting your time, it's best to open a **feature request issue** first and wait for approval before working on it.

**Other information:**

One of the main reason of this PR is about the type definitions of [react-cropper on DefinitelyTyped](https://github.com/DefinitelyTyped/DefinitelyTyped/tree/master/types/react-cropper) because it depends on this module.
From a recent update it depends on a new version of cropperjs which includes the type definitions, and they conflicts with the ones defined in @types/react-cropper
I tried last 1.5.4 version as well as 2.0.0-alpha, but the problem is always the same.

Used settings:
```
    (...)
     cropper = new Cropper(img,{
          viewMode: 2,
          aspectRatio: targetWidth/targetHeight, // for 300/400 = 0.75
          zoomable: false,
     });
```

Image used to test with the above settings:

![18-test2](https://user-images.githubusercontent.com/3294841/61695246-1ca39080-ad6e-11e9-93f6-cb01bed66853.jpg)

Result cropped image:

![18-test2-result](https://user-images.githubusercontent.com/3294841/61695358-5379a680-ad6e-11e9-9d2a-43f87fef8a75.jpg)

**Describe the bug**
I'm unable to find the right Typescript import that will allow me to do a "new Cropper()" and also give me Typescript typing while coding.

**To Reproduce**
I'm trying to get this to work:
```
const cropper: Cropper = new Cropper(this.$element[0], {
                    aspectRatio: 16 / 9,
                    viewMode: 1,
                    crop(event) {
                        console.log(event.detail.x);
                        console.log(event.detail.y);
                        console.log(event.detail.width);
                        console.log(event.detail.height);
                        console.log(event.detail.rotate);
                        console.log(event.detail.scaleX);
                        console.log(event.detail.scaleY);
                    },
                });
```
These are the various imports I've tried with the results:
```
import Cropper from "cropperjs/dist/cropper.esm.js";

The "new Cropper" works, but then I have no intellisense typing
```
```
import Cropper from "cropperjs";

I get intellisense typing, but a runtime exception:
Uncaught (in promise) TypeError: cropperjs_1.default is not a constructor
```
```
import * as Cropper from "cropperjs";

I get intellisense typing, but a webpack build error: 
TS2351: Cannot use 'new' with an expression whose type lacks a call or construct signature.
```

Which version should give me a working "new Cropper()" and Typescript typing? What am I missing?

**Desktop (please complete the following information):**
 - OS: Windows 10
 - Browser: Chrome
 - Version: 74.0.3729.169

**Additional context**
Cropperjs v1.5.1
Typescript v3.4.2
My tsconfig.json is:
```
{
  "awesomeTypescriptLoaderOptions": {
    "forkChecker": true,
    "resolveGlobs": true
  },
  "buildOnSave": false,
  "compileOnSave": false,
  "compilerOptions": {
    "allowJs": true,
    "allowSyntheticDefaultImports": true,
    "baseUrl": "./src",
    "declaration": false,
    "emitDecoratorMetadata": true,
    "experimentalDecorators": true,
    "inlineSources": false,
    "lib": [
      "dom",
      "dom.iterable",
      "es2016"
    ],
    "listFiles": false,
    "mapRoot": "./",
    "module": "commonjs",
    "moduleResolution": "node",
    "noEmitHelpers": false,
    "noImplicitAny": false,
    "paths": {
      "@app/*": [ "app/*" ],
      "@shared/*": [ "shared/*" ]
    },
    "preserveConstEnums": true,
    "pretty": true,
    "removeComments": false,
    "sourceMap": true,
    "suppressExcessPropertyErrors": true,
    "suppressImplicitAnyIndexErrors": true,
    "target": "es5",
    "typeRoots": [
      "./node_modules/@types"
    ]
  }
}
```

How to use it in mpvue
### Feature request
So, now there is only a single script like cropper.js, cropper.min.js and etc. in built library.

**Describe the solution you'd like**
Consider splitting one file to multiple ones like in your src folder at least. Or, for example, take a look at `tinymce` editor. Each plugin for it has separate js and css file, which is very convenient as I use about 20% features of this editor and would be convenient in cropperjs case, because I use like 50-60% of features.