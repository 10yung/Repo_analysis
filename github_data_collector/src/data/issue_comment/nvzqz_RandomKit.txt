With Xcode9.3, If I change `Show` checkbox on scheme management window,
Xcode make a little diff on xccheme files.

I use this library by gitsubmodule + carthage and add xcodeproj to xcworkspace for application development.
So this diff makes work repository state dirty.
Please merge this.

This PR includes my other PR (#56)
# My environment

macOS High Sierra 10.13.4
Xcode9.3

# Problem

I just cloned master and got compile error below.

```
/Users/omochi/github/omochi/RandomKit/Sources/RandomKit/Extensions/Swift/Collection+RandomKit.swift:100:17: Invalid redeclaration of 'uncheckedRandom(in:using:)'
/Users/omochi/github/omochi/RandomKit/Sources/RandomKit/Extensions/Swift/Collection+RandomKit.swift:75:17: 'uncheckedRandom(in:using:)' previously declared here
/Users/omochi/github/omochi/RandomKit/Sources/RandomKit/Extensions/Swift/Collection+RandomKit.swift:106:73: Type 'Collection.IndexDistance' (aka 'Int') in conformance requirement does not refer to a generic parameter or associated type
```

The lines with error is in macro section for Swift less than 4.1.
And a xcodeproj set swift version to 3.

# Solution

This PR changes Swift version from 3 to 4 and avoid this error.

When using the latest Xcode (9.3) I get this error:

RandomKit/Sources/RandomKit/Extensions/Swift/Collection+RandomKit.swift:90:73: Type 'Collection.IndexDistance' (aka 'Int') in conformance requirement does not refer to a generic parameter or associated type

in:

```
extension Collection where Self: RandomRetrievableInRange, IndexDistance: RandomToValue {

    /// Returns a random element of `self`, or `nil` if `self` is empty.
    public func uncheckedRandom<R: RandomGenerator>(in range: Range<Index>, using randomGenerator: inout R) -> Iterator.Element {
        let upper = range.upperBound
        let lower = range.lowerBound
        let elementIndex = IndexDistance.random(to: distance(from: lower, to: upper), using: &randomGenerator)
        return self[index(lower, offsetBy: elementIndex)]
    }

}
```
When using the latest Xcode (9.3) I get this error:

RandomKit/Sources/RandomKit/Extensions/Swift/Collection+RandomKit.swift:84:17:` Invalid redeclaration of 'uncheckedRandom(in:using:)

in: 

```
extension RandomRetrievableInRange where Self: Collection, Self.Index: RandomInRange, Self.IndexDistance: RandomToValue {

    /// Returns a random element in range without checking whether self or range is empty.
    public func uncheckedRandom<R: RandomGenerator>(in range: Range<Index>, using randomGenerator: inout R) -> Iterator.Element {
        return self[Index.uncheckedRandom(in: range, using: &randomGenerator)]
    }

}
```
Currently master will not build via Carthage as the Xcode projects contain reference to a version of Swift pre 4.1.


I'm waiting for a new version on the podspec for migration to Swift4.1 if possible.
Thank you!
From the docs:
"It's recommended to not call withThreadLocal(_:) or get the threadLocal pointer each individual time it's needed. Retrieving the thread-local instance incurs avoidable overhead."

That means right now I'm passing the:
`let threadLocal = Xoroshiro.threadLocal`

From the thread into my functions e.g.:
`init(_ theadLocalRandom: UnsafeMutablePointer<Xoroshiro>) { ..`

Is there a better way? Could RandomKit cache the UnsafeMutablePointer for each thread so that the application programmer didn't have to think about passing the thread owned pointer to each function called by the thread?

Thanks for the awesome repository and software üëç 
Sometimes it might be helpful to be able to log seed that was used to create generator.
So we can reproduce same random sequence using that seed we know.

For example it can be logged for test suit session whose data is generated randomly.
And if some tests fail, we can fix them and re-run test suit using that seed to verify it on the same 'random' data.
Hi! 
I'm about to use RandomKit for unit-testing.
Is there any way to save current seed and be able to create generator with the same seed next time in order to reproduce tests with same generated values?

Something like this, but not to do whole thing every time.
```swift
let x = UInt64.random(using: &Xoroshiro.default) // 10836192520054005588
let y = UInt64.random(using: &Xoroshiro.default) // 11819366441135859839

var r = Xoroshiro(seed: (x, y))
let z = UInt64.random(using: &r)                 // 4208814887480313811
```

So basically, for Xoroshiro, it would be exposing `_state` variable for read-only purposes.
This turns all `RandomBytesGenerator` into infinite `Sequence`s of their `Bytes` type.

This type allows for consuming and iterating over a RandomBytesGenerator without having to call `randomBytes()` directly. This mainly serves as a convenience.

This is different than `Randoms-` types because it doesn't take a mutable pointer to the source `RandomGenerator`. So, unless the iterator is shared, there is unique access to the generator.