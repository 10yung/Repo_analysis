There is no activity in this repo for over a year. Is someone actually maintaining this?
We have a case where we have some really long parameter names, which in the default formatting wraps all the descriptions into a single column. We work around this by specifying 120 columns, but a better solution would be if the formatter recognized that the names were over some threshold and then placed the description on the next line. So instead of the following:

```
required arguments:
  --messaging-internal-format-uri MESSAGING_INTERNAL_FORMAT_URI                     Uri to publish messages in the
                                                                                    internal format. e.g.
                                                                                    rabbit://user:pass@localhost:5672
                                                                                    ?exchange=some-name

  --messaging-internal-format-with-raw-uri MESSAGING_INTERNAL_FORMAT_WITH_RAW_URI   Uri to publish messages in the
                                                                                    internal format plus the raw
                                                                                    message. e.g.
                                                                                    rabbit://user:pass@localhost:5672
                                                                                    ?exchange=some-other-name
```

It could look like the following:

```
required arguments:
  --messaging-internal-format-uri MESSAGING_INTERNAL_FORMAT_URI                     
        Uri to publish messages in the internal format. e.g.
        rabbit://user:pass@localhost:5672?exchange=some-name

  --messaging-internal-format-with-raw-uri MESSAGING_INTERNAL_FORMAT_WITH_RAW_URI   
        Uri to publish messages in the internal format plus the raw message. e.g.
        rabbit://user:pass@localhost:5672?exchange=some-other-name
```

When using the `mainBody`, the system performs a `exitProcess` when e.h. `--help` is used. 
This brings down my whole unit test VM, so it would be nice to have the possibility to influence the exit behaviour like telling it that no exit should be performed. 

The default of course is, that the `exitProcess` is done.
I've added a `--version` option in the same manner as the `--help` option.

The version can be provided in the ArgParser constructor if needed. If it is not provided, no `--version` option will be added. This makes the change fully compatible with older versions of the ArgParser.

I've also added a `-v` option for the version, but I'm unsure if this is wanted. Let me know, and I can remove it. 
When using a missing argument multiple times, the lambda that provides a default value was called at every use of the delegate. In some cases, like asking the user to input the value on command line, this behaviour can be undesirable.
I'd expect the following bits to be legit but for some reason they are not:

```kotlin
class MyArgs(parser: ArgParser) {

    val imageDirectory by parser.positional("directory", "The directory which should be scanned for orphan images")

    val markdownFiles by parser.positionalList("<md files>", "Markdown files to be used as reference to detect orphans")
}
```

```
Exception in thread "main" java.lang.IllegalArgumentException: directory is not a valid argument name
	at com.xenomachina.argparser.PositionalDelegate.<init>(PositionalDelegate.kt:33)
	at com.xenomachina.argparser.ArgParser.positionalList(ArgParser.kt:315)
	at com.xenomachina.argparser.ArgParser.positional(ArgParser.kt:263)
	at com.xenomachina.argparser.ArgParser.positional(ArgParser.kt:246)
	at MyArgs.<init>(orphimg.kt:15)
	at OrphimgKt$main$args$1$1.invoke(orphimg.kt:20)
	at OrphimgKt$main$args$1$1.invoke(orphimg.kt)
	at com.xenomachina.argparser.ArgParser.parseInto(ArgParser.kt:469)
```
For some reason the `PositionalDelegate` is overly strict (just captialized letters) when it comes to naming my parameter.
```
Kotlin version 1.2.60-release-76 (JRE 10.0.2+13)
com.xenomachina:kotlin-argparser:2.0.7
```

I (unfortunately) write Python almost every day at work, and we use Argparse there most of the time.

Argparse has wonderful support for subparsers, but it seems fairly tedious to do with this library.

Say I'm writing a cli for a program like this:

```bash
$ timetracker-client -h
usage: [-h] [-l LOGIN] [-r REGISTER] [--verbose] [--quiet] [--status]
       [--add-task ADD_TASK]...

optional arguments:
  -h, --help             show this help message and exit

  -l LOGIN,              Initialize client with user info and log in. User
  --login LOGIN          info passed in as properties file with format:
                         email=<EMAIL> password=<PASSWORD>

  --add-task ADD_TASK,   Add a task.
  -a ADD_TASK

```

And I want a separate parser for `--add-task`. It will have its own positional arguments and its own help menu. Something like this:

```bash
$ timetracker-client --add-task --help
usage: [-h] TASK CATEGORY START_TIME END_TIME [PROPERTIES]...

optional arguments:
  -h, --help   show this help message and exit


positional arguments:
  TASK         Name of task being stored

  CATEGORY     Category of task to store

  START_TIME   Start time of a task in the format yyyy/mm/dd-hh:mm

  END_TIME     End time of a task in the format yyyy/mm/dd-hh:mm

  PROPERTIES   Extra properties desired to be saved in the format:
               prop1:Property prop2:property
```

Doesn't seem too unreasonable I think.

But from going through the docs, it doesn't appear this functionality is built in. To add this functionality on my own, I end up doing a bunch of array splicing, and then sending that task to the parser I want to run.

It's not particularly nice, but I'm getting it done with this code:
https://gitlab.com/time-tracker-utils/TerminalTimetrackerClient/blob/master/src/main/kotlin/Client.kt#L9
I'm aware I could use a positional list for the -a option, but that surrenders more control.

It would be very nice if I could do something like this:

```kotlin
val addTask: TaskParser by parser.subparser("--add-task", "-a",
        help = "Add a task.\n")
```

Where TaskParser is something like this:

```
class TaskParser(parser: ArgParser) {
    val task: String by parser.positional("TASK",
            help = "Name of task being stored")

    val category: String by parser.positional("CATEGORY",
            help = "Category of task to store")
// ABBREVIATED
}
```

But this does not seem to be very easy.

I'm currently using this library for a personal project here: https://gitlab.com/time-tracker-utils/TerminalTimetrackerClient/tree/master and it's been great so far, but this was a large gripe that cost me a few hours today trying to understand a good way of adding subparsers.

In the end, I couldn't find one.

Please advise - and if it doesn't exist, I might make my own PR in the coming weeks.
I guess there is no real consistent scheme, but quite a few tools capitalize the help section headers. 
So maybe a flag could be added to do the same when using kotlin-argparser. 

So showiing
```
Usage: [-h] [-a] IMAGE-DIRECTORY MARKDOWN-FILES...

Optional arguments:
  -h, --help        show this help message and exit

  -a, --auto        Automatically remove orphan images


Positional arguments:
```
instead of 
```
usage: [-h] [-a] IMAGE-DIRECTORY MARKDOWN-FILES...

optional arguments:
  -h, --help        show this help message and exit

  -a, --auto        Automatically remove orphan images


positional arguments:
```
I have lately been exploring kotlin for scripting purposes, using https://github.com/holgerbrandl/kscript.
Kotlin-argparsers really shines in scripts because it's concise and still provides nice error messages.

On of the differences between regular Kotlin code and a KScript is that the script does not contain a main method. Instead it gets executed from top to bottom. Not having a main method suddenly makes the `mainBody` lambda look ugly, because I always have write something like this:

```
val parsedArgs = mainBody {
    ArgParser(args).parseInto(::Args)
}
```

The `mainBody` has to be there because otherwise we get ugly stacktraces instead of a simple error message like "missing option X". It would be much nicer if there was a method like parseInto() that would already contain the exception handling part so we could simply write:

```
val parsedArgs = ArgParser(args).parseIntoOrExit(::Args)
```

[here is a full example](https://github.com/xenomachina/kotlin-argparser/files/2357065/example.kts.txt)


`val url1 by parser.storing(help = "jdbc url. Example: jdbc:postgresql://localhost:5432/db1")`

results in:

`Exception in thread "main" java.lang.IllegalArgumentException: URL1 is not a valid argument name`

Not sure if this is by design or a bug. Changing to the following fixes the issue:

`val url_1 by parser.storing(help = "jdbc url. Example: jdbc:postgresql://localhost:5432/db1")`


