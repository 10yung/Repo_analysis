Bumps [handlebars](https://github.com/wycats/handlebars.js) from 2.0.0 to 4.5.3.
<details>
<summary>Changelog</summary>

*Sourced from [handlebars's changelog](https://github.com/wycats/handlebars.js/blob/master/release-notes.md).*

> ## v4.5.3 - November 18th, 2019
> Bugfixes:
> 
> - fix: add "no-prototype-builtins" eslint-rule and fix all occurences - f7f05d7
> - fix: add more properties required to be enumerable - 1988878
> 
> Chores / Build:
> - fix: use !== 0 instead of != 0 - c02b05f
> - add chai and dirty-chai and sinon, for cleaner test-assertions and spies, 
>   deprecate old assertion-methods  - 93e284e, 886ba86, 0817dad, 93516a0
> 
> Security:
> 
> - The properties `__proto__`, `__defineGetter__`, `__defineSetter__` and `__lookupGetter__` 
>   have been added to the list of "properties that must be enumerable".
>   If a property by that name is found and not enumerable on its parent, 
>   it will silently evaluate to `undefined`. This is done in both the compiled template and the "lookup"-helper. 
>   This will prevent new Remote-Code-Execution exploits that have been
>   published recently.
> 
> Compatibility notes: 
> 
> - Due to the security-fixes. The semantics of the templates using
>   `__proto__`, `__defineGetter__`, `__defineSetter__` and `__lookupGetter__` in the respect that those expression now return 
>   `undefined` rather than their actual value from the proto.
> - The semantics have not changed in cases where the properties are  enumerable, as in:
> 
> ```js
> {
>   __proto__: 'some string'
> }
> ```
> 
> - The change may be breaking in that respect, but we still only 
>   increase the patch-version, because the incompatible use-cases
>   are not intended, undocumented and far less important than fixing
>   Remote-Code-Execution exploits on existing systems.
> 
> 
> 
> [Commits](https://github.com/wycats/handlebars.js/compare/v4.5.2...v4.5.3)
> 
> ## v4.5.2 - November 13th, 2019
> # Bugfixes
> 
> - fix: use String(field) in lookup when checking for "constructor" - d541378
> - test: add fluent API for testing Handlebars - c2ac79c
> 
> Compatibility notes:
> - no incompatibility are to be expected
></tr></table> ... (truncated)
</details>
<details>
<summary>Commits</summary>

- [`c819c8b`](https://github.com/wycats/handlebars.js/commit/c819c8b533934d2ac18001d7eb27a3205b00c2f3) v4.5.3
- [`827c9d0`](https://github.com/wycats/handlebars.js/commit/827c9d0747bef7d7f89829779523b6b2dcf3051d) Update release notes
- [`f7f05d7`](https://github.com/wycats/handlebars.js/commit/f7f05d7558e674856686b62a00cde5758f3b7a08) fix: add "no-prototype-builtins" eslint-rule and fix all occurences
- [`1988878`](https://github.com/wycats/handlebars.js/commit/198887808780bbef9dba67a8af68ece091d5baa7) fix: add more properties required to be enumerable
- [`886ba86`](https://github.com/wycats/handlebars.js/commit/886ba86c2f9cc71b7d99b9018fbe2d72a57085cc) test/chore: add chai/expect and sinon to "runtime"-environment
- [`0817dad`](https://github.com/wycats/handlebars.js/commit/0817dad7e72c51d07f7700547d0c69aa79a4976b) test: add sinon as global variable to eslint in the specs
- [`93516a0`](https://github.com/wycats/handlebars.js/commit/93516a0b07026ebd23c84fddf270a0c8b570bc59) test: add sinon.js for spies, deprecate current assertions
- [`93e284e`](https://github.com/wycats/handlebars.js/commit/93e284ed9be1e38c5e6945f15af1ccd689f2ada6) chore: add chai and dirty-chai for better test assertions
- [`c02b05f`](https://github.com/wycats/handlebars.js/commit/c02b05fa819f46bb66c878bebc6e8006408ebd5c) fix: use !== 0 instead of != 0
- [`8de121d`](https://github.com/wycats/handlebars.js/commit/8de121d21c88a6ab877e3a0eec9daaac483f3bf0) v4.5.2
- Additional commits viewable in [compare view](https://github.com/wycats/handlebars.js/compare/v2.0.0...v4.5.3)
</details>
<details>
<summary>Maintainer changes</summary>

This version was pushed to npm by [knappi](https://www.npmjs.com/~knappi), a new releaser for handlebars since your current version.
</details>
<br />

[![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=handlebars&package-manager=npm_and_yarn&previous-version=2.0.0&new-version=4.5.3)](https://help.github.com/articles/configuring-automated-security-fixes)

Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.

[//]: # (dependabot-automerge-start)
[//]: # (dependabot-automerge-end)

---

<details>
<summary>Dependabot commands and options</summary>
<br />

You can trigger Dependabot actions by commenting on this PR:
- `@dependabot rebase` will rebase this PR
- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it
- `@dependabot merge` will merge this PR after your CI passes on it
- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it
- `@dependabot cancel merge` will cancel a previously requested merge and block automerging
- `@dependabot reopen` will reopen this PR if it is closed
- `@dependabot ignore this [patch|minor|major] version` will close this PR and stop Dependabot creating any more for this minor/major version (unless you reopen the PR or upgrade to it yourself)
- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)
- `@dependabot use these labels` will set the current labels as the default for future PRs for this repo and language
- `@dependabot use these reviewers` will set the current reviewers as the default for future PRs for this repo and language
- `@dependabot use these assignees` will set the current assignees as the default for future PRs for this repo and language
- `@dependabot use this milestone` will set the current milestone as the default for future PRs for this repo and language

You can disable automated security fix PRs for this repo from the [Security Alerts page](https://github.com/segmentio/metalsmith/network/alerts).

</details>

when i run an upgrade to upgrade the packages from my metalsmith project i got at least this warnings. is there any maintaining of metalsmith or should i move on to a newer/other static generator? (gatsby e.g.)
```
warning metalsmith > gray-matter > coffee-script@1.12.7: CoffeeScript on NPM has moved to "coffeescript" (no hyphen)
warning metalsmith-assets > recursive-readdir > minimatch@0.3.0: Please update to minimatch 3.0.2 or higher to avoid a RegExp DoS issue
```

thank you
Update package dependencies. Remove index.js to generate site (obsolete)
and do so with `metalsmith` CLI and `metalsmith.json`.

Update `src` to use Markdown (not HTML source),
and update links to link to the generated `*.html` files.
Make the links relative so you can preview file: pages in the browser
Hi @Ajedi32, @Zearin! üëã 

This PR swaps chalk for [Turbocolor](https://github.com/jorgebucaran/turbocolor).

Turbocolor will give you a small perf boost as it loads _>20x_ faster and applies styles _>18x_ faster than chalk for the same API.

<pre>
# Load Time
chalk: 15.190ms
turbocolor: 0.777ms

# All Colors
chalk √ó 8,729 ops/sec
turbocolor √ó 158,383 ops/sec

# Chained Colors
chalk √ó 1,838 ops/sec
turbocolor √ó 39,830 ops/sec

# Nested Colors
chalk √ó 4,049 ops/sec
turbocolor √ó 59,833 ops/sec
</pre>

Cheers!
# Summary

I have [refactored Metalsmith to use `async`/`await`](https://github.com/Zearin/metalsmith/tree/refactor/async-await).

_I‚Äôm looking for feedback._  **What do you think?**


# Motivations

- **ES6 `class`**. I find these classes much easier to read, write, and understand.  
  - _**Notes:** Although it was temping to convert methods like `clean()` to use getters and setters, I did not alter their current API.  No arguments _returns_ the value, and passing arguments _sets_ the value._

- **ES6 `const`/`let`**.  I love the certainty that `const` provides.  I love the predictable scope that `let` provides.  (I never liked how `var` lends itself to occasionally surprising and hard-to-debug behavior, or ‚Äúclever‚Äù code that intentionally leverages such behavior, which is a barrier to understanding the code quickly.)

- **`async`/`await`**. I find `async` and `await` code easier to read, write, and understand.  It reads top to bottom, clearly marks which operations are asynchronous, and make normal use of `try‚Ä¶catch`.
    - _**Notes (generators):** I think generators are cool, and simple to understand in principle‚Ä¶but sometimes difficult to understand in practice.  Switching to `async`/`await` also removes the need for `unyield` and `thunkify` dependencies, which both made it harder for me to understand how Metalsmith worked (although they are also cool, and allowed *unbelievable* performance gains in Metalsmith 2)._ 
    - _**Notes (promises):** I similarly feel that Promises are simple to understand in principle, but often difficult to understand in practice.  Nesting and callbacks force me to constantly read back and forth through scopes to understand what‚Äôs going on, instead of top to bottom like plain, ‚Äúboring‚Äù synchronous code.  The fact that `async`/`await` is built on Promises while allowing such a radically simpler code structure is pretty fantastic. ‚òª_


I haven‚Äôt converted _all_ the syntax (i.e. I‚Äôm still using `require()` and `module.exports` instead of `import` and `export`.


# Last Remarks

- **No changes to Metalsmith‚Äôs API.**

- **All existing tests pass.** (‚Ä¶Except _one_! I couldn‚Äôt get the ‚Äúno `new` required‚Äù test to pass. However, you can definitely omit `new` when calling `Metalsmith()`, and all the other tests do so.)

- **Performance seems to be about the same** (But I am *not* an expert at performance analysis/ benchmarks/metrics, or any of that other math-y stuff.  If you are good at that stuff, I‚Äôd love to get performance data that‚Äôs more detailed than what the test suite shows.)



----

If this is a good candidate for Metalsmith v3.0, let me know.  
I'm unable to understand the output of even specialized log plug-ins like metalsmith-logger.

I seem to end up with multiple [object Object] files in which I can't seem to resolve..

How does one figure out what data is being passed internally? 

GraphQL does this part really well... 
Encountering this error:
````
(node:728) [DEP0018] DeprecationWarning: Unhandled promise rejections are deprecated. 
In the future, promise rejections that are not handled will terminate the Node.js process with a non-zero exit code.
````
It is coming from:
````
6:26:35 AM: (node:728) UnhandledPromiseRejectionWarning: Unhandled promise rejection (rejection id: 1): 
Error: ENOENT: no such file or directory, scandir '/opt/build/repo/app/company/content'
````
due to this code
````
module.exports = Metalsmith(__dirname)  
	.source(path.resolve(__dirname, '../app/company/content')) // source directory
````
the source path `../app/company/content` ofcourse doesn't exist. But the promise rejection should be gracefully handled and not let the node process crash (as the warning seem to indicate which would start to happen in the upcoming node versions).

PS: However, it is not clear if Metalsmith core can take care of this kind of promise rejections, or if user should do something about it. 
Issue #202 
Hi there,

It would be great to allow dealing with metalsmith plugins in a more functional way by allowing plugins to return a modified `files` object (and/or global `metadata` object) rather than modifying it in place.

This would allow this type of concise syntax with arrow functions and the lodash pickBy function for the [example draft plugin](https://github.com/segmentio/metalsmith/blob/master/examples/drafts-plugin/index.js#L14-L20) for instance:
```
var pickBy = require('lodash/pickBy')

function plugin(){
  return function(files){
    return pickBy(files, file => file.draft);
  };
}
```

I think this could be made a sufficiently backward compatible modification (although I imagine not all plugins return null currently):
 - if the plugin return null then assume the files array and metadata object are globally mutated
 - if the plugin returns an Object of the form `{ files: Array, metadata: Object}` then assume that both the files array and metadata object are passed in a functional style.
 - if the plugin returns another Oject then assume the files Object is passed in a functional style.
 - if the plugin is async, then do the same thing with the result passed to the callback.

Of course it's already possible to add a bit of boilerplate to plugins to do the same thing like so:
```
var pickBy = require('lodash/pickBy')

function plugin(){
  return function(files){
    var newFiles = pickBy(files, file => file.draft);
    Object.keys(files).forEach(key => {
      if (newFiles[key]) {
        files[key] = newFiles[key];
      } else {
        delete files[key];
      }
    });
  };
}
```

But it would be great if the API encouraged a more modern approach!

Let me know what you think!

Jun