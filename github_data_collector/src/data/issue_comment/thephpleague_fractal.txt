I'm trying to figure out how to specify  which fields to select when including a resource. But I can't get it to work. I've been looking through the Manager-class and I found this:

https://github.com/thephpleague/fractal/blob/a38f0b7cbf82af950ccc5bf6432b35be80698de1/src/Manager.php#L194-L214

Request I'm sending
```
GET /api-endpoint/producers?include=owner(id|name)
```

I've also tried the below formats
```
GET /api-endpoint/producers?include=owner:fields(id|name)
```
```
GET /api-endpoint/producers?include=owner:field(id|name)
```

I found that syntax from another issue: #386 

How is it supposed to work?


check if $date is null
if the $data is null it will give error 
Argument 1 passed to Transformers\ExampleTransformer::transform() must be an instance of App\Models\Example, null given, called in ../league/fractal/src/Scope.php on line 407

`$transformedData = is_null($data) ? [] : $transformer->transform($data);`
I try to get data from database then order them according to the sort type that is sent so I do that

```
public function getStoreProducts($store_id): array
    {
        $products = Product::with('translation', 'image', 'price', 'group.translation', 'group.subcategory.subCategoryTranslations','store')
            ->where('store_id',$store_id)->where('product_status', '=', 2)
            ->groupBy('group_id');
        if (request()->has('sort') && !empty(request()->get('sort'))) {
            if (request()->get('sort') === 'date') {
                $products = $products->orderBy('created_at', 'DESC');
            }elseif (request()->get('sort') == 'price'){
                $products = $products->whereHas('price')->with(array('price'=>function($query){
                    $query->orderBy('sell_price','asc');
                }));
            }elseif (request()->get('sort') == 'price-desc'){
                $products = $products->whereHas('price')->with(array('price'=>function($query){
                    $query->orderBy('sell_price','desc');
                }));
            }
        }


        return $this->toArray($products->paginate(15));
    }
```
so the data get sorted but when I pass them to the fractal transformer it got unsort so how can i prevent this operation

```
$products = $this->repository->getStoreProducts($store_id);

        $data = FractalFacade::collection($products["data"])
            ->transformWith(new ProductTransformer())
            ->parseIncludes(['translation', 'price', 'images', 'group.sub_category_translation', 'group.group_translation'])
            ->toArray();
        dd($data); 
```
But I noticed that this problem happens when the sort is on the relation So, for example 
when I sort based on the created_at which is field in product the Products get out sort as it entered but when sort the data based on the price which is the relation with the products 
so the entered sorted but it get out unsorted so How can I solve this problem
With this feature, "include" will be available like this ?include=foo:limit(10|1).bar,baz

Response example:
```json
{
  "data": {
    "name": "lorem",
    "foo": {
      "data": [
        {"name": "ipsum", "bar": {"data": {"name": "dolor"}}},
        {"name": "ipsum", "bar": {"data": {"name": "dolor"}}}
      ],
      "meta": {
        "pagination": {}
      }
    },
    "baz": {}
  }
}
```

This PR will not add any new feature. This will make the test setup more like real world app implementation. If agree I am happy to update all tests :)  
Any chance we can have Hydra support http://www.hydra-cg.com
Fractal ships with the following paginators:

* Doctrine
* Phlacon
* Laravel
* PagerFanta
* Zend

I think we should make a basic paginator class, and move these 5 to separate repositories that can be suggested via Composer. 

Thoughts?
Fractal is currently responsible for the pagination and serialisation of data, which is continually growing and clouding the core functionality of Fractal.

A lot of the issues and pull requests are to do with a specific serialiser, which means to change something on one serialiser requires a minor version bump which might update the package for people who aren't using the serialiser.

I believe we need to seperate the serialisers into their own self-contained packages:

`fractal-jsonapi`
`fractal-csv`
`fractal-{package}`

Utilising one of these packages should provide a Fractal manager using the specific serialiser.

The Fractal package would still provide the basic data-array serialiser, and an interface to implement another custom serialiser.

Also, the paginators are not within the scope of the core project, the interfaces would still be provided by the package and the current paginators would be extracted into their own packages.

By doing this and narrowing the scope of the Fractal core, we would create a more maintainable, concise package, focussed on managing the transformation of data. The issues and PR's for the serialisers and pagination would not be part of the Fractal core package, meaning that updating the JSON-API serialiser would not require people using the other serialisers to update the package. It would also enable people to create their own serialisation and pagination, and publish them in a recommended format. The unit tests for the packages and core would be smaller and easier to maintain too.