Hello

This is not a bug report but a short note to describe how to compile a project using the **rust-zmq** crate on **Windows 10** with **cargo**. It ended up being easy but took me a while to figure out so I thought I would share:

1. Install **vcpkg**: instructions on https://github.com/microsoft/vcpkg
2. Install **zeromq** usign *vcpkg*: `vcpkg install zeromq`
3. Create a copy called zmq.lib of the libzmq-mt-*.lib file created your *path\to\vcpkg\installed\x64-windows\lib* directory 
4. Create an environment variable called **LIBZMQ_PREFIX** pointing to *path\to\vcpkg\installed\x64-windows*

You can now build your project using rust-zmq using cargo.

P.S: I am using an x64 environment, if you are not, you will probably have to readjust the path to the *vcpkg* libraries mentioned above
This should be quite simple to add, so I'll leave this open in case someone feels like trying their hand.
Now that we require libzmq 4.1+, `zmq::has()` always returns `Some(bool)`, so it should return a plain `bool`, without wrapping it in an option. This is a breaking change, so it needs to be done in the next API-breaking release (i.e., 0.10.0 at the time of writing).
The flag is `ZMQ_INVERT_MATCHING`.
While âˆ…MQ has its own design, it is tailored for C and requires passing in the socket parameters as a string. We could do better! We have `SocketAddr` and all sorts of other cool ways to make the API less stringly.
Functions like set_subscribe() logically change the state in a Socket.  Doesn't  that mean that it should be declared like "fn set_subscribe(&mut self, value: &[u8]) -> Result<()>"?  I understand that the rust type checker might not force you to do that because you're mutating state behind a native pointer, but logically shouldn't it?  More importantly, are there optimizations that the compiler might make that are incorrect, because it's assuming nothing related to the socket is changing?  
I'm attempting to write wrappers around this library for use with Tokio's event loop, and there are certain cases where it is important that the Message not be destroyed.

If `Sendable::send()` in 0.9 or `Socket::send_msg()` in 0.8 fail to send with `EAGAIN`, it just means the socket is currently busy, and we can try again, however, these methods both consume the `Message` and don't give it back, making it impossible to try again.

With my wrapper's current logic, this state should be impossible, but it is still possible to express this state with code, so I'd like to be able to properly handle it.

A possible solution could be to make `Error::EAGAIN` into `Error::EAGAIN(Option<T>)`. `T` could be `Message`, but I haven't looked around ZeroMQ enough to know if there are other situations where this could be important.
How difficult would it be to allow creation of a ZMQ context with more than one IO thread? I don't know if Rust has any special considerations, though I would expect it is just a different call to the context initialization.
I was able to setup an encrypted connection with #167, but I couldn't find anything on how to do actual authentication. Currently, only the server is authenticated but any client can connect and send messages.

It would be nice if it'd be possible to add a list of public keys which I trust to send messages.
A had an idea about a possible improvement and I'd like to know what people think about it.

I was wondering if it made some sense to provide an `.into_iter()` method for the socket. Especially if there was a corresponding send_all (or something) for the receiving socket. I think it would be more comfortable to use an iterator like this:

```rust
let src = context.socket(zmq::PULL).unwrap();
src.bind("tcp://127.0.0.1:1234");
let dst = context.socket(zmq::PUSH).unwrap();
dst.bind("tcp://127.0.0.1:1234");
let processed = src.filter_map(|msg| {
        unimplemented!();
    })
    .map(other_conversion);
dst.send_all(dst);
```

instead:

```rust
loop {
    let msg = src.recv_msg().unwrap();
    unimplemented!();
    if have_answer() {
        dst.send(&answer).unwrap();
    }
}
```

On the other hand, it doesn't follow the original C api and, once ready, the [tokio-zmq](https://github.com/rotty/zmq-tokio) would provide something very similar with streams and sinks (which is basically where the idea comes from anyway), so I'm not sure if it's worth trying to implement it. What do you think, should I try putting some code together, or is it a daft idea and I better spend the time somewhere else?

(And no, I haven't yet thought about all the details, like what to do with multipart messages)