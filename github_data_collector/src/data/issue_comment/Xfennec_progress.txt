When coreutils is compiled with the `--enable-single-binary` option, all the individual commands are just symlinks to a larger single binary named "coreutils", the same way that a typical busybox binary works. In this situation, `progress` gets back the name "coreutils" instead of, for example, "dd" when reading `/proc/[pid]/exe`.

Unfortunately this means that, on systems with single-binary coreutils, all of your running commands will show up as "coreutils" instead of the command you actually typed.
Instead of hard coding interesting proc names, we could have a config file `/etc/progress.conf` holding them.
https://github.com/Xfennec/progress/blob/092a650c0a2a1fa374361bddd5cf4ae51effa688/progress.c#L60-L68
it seems `progress` is not able to get the progression of a piped command

for example:
```
❯ progress -c xz
[ 7525] xz …/signal-desktop-bin/signal-desktop-bin-1.23.1-1-x86_64.pkg.tar.xz
	100.0% (53.1 MiB / 53.1 MiB)

❯ progress -wc xz
[ 7525] xz …/signal-desktop-bin/signal-desktop-bin-1.23.1-1-x86_64.pkg.tar.xz
	100.0% (70.2 MiB / 70.2 MiB) 295.9 KiB/s

❯ ps -o args 7525
COMMAND
xz -c -z -
```
I wasn't able to find what was piped to xz because the process terminated before I had time to investigate, but I was running arch update through [`yay`](https://github.com/Jguer/yay).
From a `top` output, I suppose this was piped from a `bsdtar` command, but I do not have its details.

Should progress be able to monitor process receiving their input from piped command (I suppose it should be possible to follow the pipe, but I don't know at all how complex this could be)
Support for the download utility aria2 would be appreciated.
This is a new feature
`progress -g -p <pid>` will show the current progress of &lt;pid> and all the processes (max 32 compile-time constant) that are in &lt;pid>'s process group (ps -o pgrp). And `progress -m -g -p <pid>` will monitor the group till  &lt;pid> exits. This can be useful when monitoring shell scripts that copy data using several basic commands, e.g.,

    ./script & xterm -e progress -m -g -p $! & wait     # from command line
    xterm -e progress -m -g -p $$ &     # from inside the script

The second line above can be added inside any script that monitors its own copy progress.

Note: Implemented for Linux only. The `__APPLE__` define branch has a stub.
This commit also adds zip, unzip, pixz, pigz, pbzip2 to the list.

Knowing when an archive is finally unzipped would be greatly appreciated :)
Everything works fine when copying and moving files on local partitions. Progress is updated after specified times (for example with using `watch progress -q`). 

When copying and moving files to a NAS over the network connection, the progress is not shown. More specifically, no process to be watched is recognised at all by `progress` and so nothing at all is displayed until the very end of the copy/move process where a 100% is shown. Not even the time of the `watch progress -q` call is updated during the run of `cp` and `mv` until the very end.
Thinking this could have to do with process priority, I changed the niceness of the running `watch` and `progress` calls in different constellations but to no effect.

This was tested on ArchLinux and Ubuntu 17.04 with file sizes of above 2-4GB so that the process should have been long enough.

Help in clarifying this issue is greatly appreciated.
Indenting all the project with sublime to make it more readable.