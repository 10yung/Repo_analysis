Please provide a solution for authenticating with jaeger collector. nodejs and java clients supports some kind of authentication support. 
##  Use Case
https://github.com/opentracing/opentracing-go/issues/92 has the tag Help Wanted.
I and others want to help you solve such issues.

## Problem
There is currently no contributing guide (CONTRIBUTING.md, example: https://github.com/prometheus/prometheus/blob/master/CONTRIBUTING.md) which makes it hard to know how this repository accepts contributions, what steps to perform and so on.

## Proposal
It would be beneficial to have a contributing guide in this repository to explain what steps need to be taken to contribute to the project, what issues not project maintainers should consider helping with and so on.

## Questions to address (if any)
- Should this repository have a contributing guide?
- What sections should it contain?



I've been working on lots of tracing where data is exchanged via a message broker, so we're always wanting to start spans as followsFrom rather than ChildOf. As far as I can see, there isn't anything out of the box that deals with this so I've added the functions that would do it here, just in case you think this would be useful.
hello, could i call the span.Finish() with a conditionï¼Ÿ 
for exampleï¼š time span more than 5 second  from StartSpan() ?
<!--
Welcome to the OpenTracing Go repo! ðŸ‘‹ðŸŽ‰

- Please be respectful and considerate of others when commenting on issues.
- Please search for existing issues in order to ensure we don't have duplicate bugs/feature requests.
- If you have a question please ask it on our Gitter chat https://gitter.im/opentracing/public instead of creating an issue.
- Please provide as much information as possible so we all understand the issue.
-->


## Use Case

example code: 
```
span.LogFields(log.Object("args", args))  // args is a map
```

## Problem
Because span is sent asynchronously, it is possible that this map will also be modified.  
```
runtime.throw(0x135b75b, 0x26)
        /usr/local/go/src/runtime/panic.go:616 +0x81 fp=0xc4227d75e0 sp=0xc4227d75c0 pc=0x42ca31
runtime.mapiternext(0xc4229ccf00)
        /usr/local/go/src/runtime/hashmap.go:747 +0x55c fp=0xc4227d7670 sp=0xc4227d75e0 pc=0x40aaac
reflect.mapiternext(0xc4229ccf00)
        /usr/local/go/src/runtime/hashmap.go:1223 +0x2b fp=0xc4227d7688 sp=0xc4227d7670 pc=0x40bbcb
reflect.Value.MapKeys(0x11b60e0, 0xc4200ae720, 0x1b5, 0x1479900, 0x11b60e0, 0x3)
        /usr/local/go/src/reflect/value.go:1134 +0x13f fp=0xc4227d7730 sp=0xc4227d7688 pc=0x4b7e6f
fmt.(*pp).printValue(0xc42003cfc0, 0x11b60e0, 0xc4200ae720, 0x1b5, 0x76, 0x2)
        /usr/local/go/src/fmt/print.go:746 +0xc94 fp=0xc4227d7900 sp=0xc4227d7730 pc=0x4cc784
fmt.(*pp).printValue(0xc42003cfc0, 0x12ffa00, 0xc4200ae680, 0x199, 0xc400000076, 0x1)
        /usr/local/go/src/fmt/print.go:783 +0x1ace fp=0xc4227d7ad0 sp=0xc4227d7900 pc=0x4cd5be
fmt.(*pp).printValue(0xc42003cfc0, 0x12f99c0, 0xc4200ae680, 0x16, 0x76, 0x0)
        /usr/local/go/src/fmt/print.go:853 +0x1919 fp=0xc4227d7ca0 sp=0xc4227d7ad0 pc=0x4cd409
fmt.(*pp).printArg(0xc42003cfc0, 0x12f99c0, 0xc4200ae680, 0xc400000076)
        /usr/local/go/src/fmt/print.go:689 +0x1ce fp=0xc4227d7d18 sp=0xc4227d7ca0 pc=0x4cb34e
fmt.(*pp).doPrintf(0xc42003cfc0, 0x1346f9b, 0x16, 0xc4227d7e90, 0x3, 0x3)
        /usr/local/go/src/fmt/print.go:1003 +0x157 fp=0xc4227d7e00 sp=0xc4227d7d18 pc=0x4cead7
fmt.Sprintf(0x1346f9b, 0x16, 0xc4227d7e90, 0x3, 0x3, 0x6e6f697461636f4c, 0x3431633178302829)
        /usr/local/go/src/fmt/print.go:203 +0x66 fp=0xc4227d7e58 sp=0xc4227d7e00 pc=0x4c7ec6
context.(*valueCtx).String(0xc42042e300, 0x13c6e88, 0xc42003cf00)
        /usr/local/go/src/context/context.go:485 +0xab fp=0xc4227d7ed0 sp=0xc4227d7e58 pc=0x50793b
fmt.(*pp).handleMethods(0xc42003cf00, 0x76, 0x1)
        /usr/local/go/src/fmt/print.go:603 +0x275 fp=0xc4227d7f60 sp=0xc4227d7ed0 pc=0x4caf45
fmt.(*pp).printArg(0xc42003cf00, 0x121c1e0, 0xc42042e300, 0xc400000076)
        /usr/local/go/src/fmt/print.go:686 +0x15d fp=0xc4227d7fd8 sp=0xc4227d7f60 pc=0x4cb2dd
fmt.(*pp).doPrintf(0xc42003cf00, 0x1346f9b, 0x16, 0xc4227d8150, 0x3, 0x3)
        /usr/local/go/src/fmt/print.go:1003 +0x157 fp=0xc4227d80c0 sp=0xc4227d7fd8 pc=0x4cead7
fmt.Sprintf(0x1346f9b, 0x16, 0xc4227d8150, 0x3, 0x3, 0x69462e676f6c5d5b, 0x2e676f6c7b646c65)
        /usr/local/go/src/fmt/print.go:203 +0x66 fp=0xc4227d8118 sp=0xc4227d80c0 pc=0x4c7ec6
context.(*valueCtx).String(0xc42003b200, 0x13c6e88, 0xc42003c840)
        /usr/local/go/src/context/context.go:485 +0xab fp=0xc4227d8190 sp=0xc4227d8118 pc=0x50793b
fmt.(*pp).handleMethods(0xc42003c840, 0x76, 0x1)
        /usr/local/go/src/fmt/print.go:603 +0x275 fp=0xc4227d8220 sp=0xc4227d8190 pc=0x4caf45
fmt.(*pp).printArg(0xc42003c840, 0x121c1e0, 0xc42003b200, 0xc400000076)
        /usr/local/go/src/fmt/print.go:686 +0x15d fp=0xc4227d8298 sp=0xc4227d8220 pc=0x4cb2dd
fmt.(*pp).doPrintf(0xc42003c840, 0x133bafc, 0xd, 0xc4227d8410, 0x1, 0x1)
        /usr/local/go/src/fmt/print.go:1003 +0x157 fp=0xc4227d8380 sp=0xc4227d8298 pc=0x4cead7
fmt.Sprintf(0x133bafc, 0xd, 0xc4227d8410, 0x1, 0x1, 0xc422a7ff70, 0xc421db0440)
       /usr/local/go/src/fmt/print.go:203 +0x66 fp=0xc4227d83d8 sp=0xc4227d8380 pc=0x4c7ec6
context.(*cancelCtx).String(0xc4208fc680, 0x13c6e88, 0xc42003c780)
        /usr/local/go/src/context/context.go:342 +0x7d fp=0xc4227d8430 sp=0xc4227d83d8 pc=0x506c0d
fmt.(*pp).handleMethods(0xc42003c780, 0x76, 0x1)
        /usr/local/go/src/fmt/print.go:603 +0x275 fp=0xc4227d84c0 sp=0xc4227d8430 pc=0x4caf45
fmt.(*pp).printArg(0xc42003c780, 0x122b980, 0xc4208fc680, 0xc400000076)
        /usr/local/go/src/fmt/print.go:686 +0x15d fp=0xc4227d8538 sp=0xc4227d84c0 pc=0x4cb2dd
fmt.(*pp).doPrintf(0xc42003c780, 0x133bafc, 0xd, 0xc4227d86b0, 0x1, 0x1)
        /usr/local/go/src/fmt/print.go:1003 +0x157 fp=0xc4227d8620 sp=0xc4227d8538 pc=0x4cead7
fmt.Sprintf(0x133bafc, 0xd, 0xc421db06b0, 0x1, 0x1, 0xc422a7ff20, 0xc421db06e0)
        /usr/local/go/src/fmt/print.go:203 +0x66 fp=0xc4227d8678 sp=0xc4227d8620 pc=0x4c7ec6
context.(*cancelCtx).String(0xc420bdc6c0, 0x13c6e88, 0xc42003c6c0)
        /usr/local/go/src/context/context.go:342 +0x7d fp=0xc4227d86d0 sp=0xc4227d8678 pc=0x506c0d
fmt.(*pp).handleMethods(0xc42003c6c0, 0x76, 0x1)
        /usr/local/go/src/fmt/print.go:603 +0x275 fp=0xc4227d8760 sp=0xc4227d86d0 pc=0x4caf45
fmt.(*pp).printArg(0xc42003c6c0, 0x122b980, 0xc420bdc6c0, 0xc400000076)
        /usr/local/go/src/fmt/print.go:686 +0x15d fp=0xc4227d87d8 sp=0xc4227d8760 pc=0x4cb2dd
fmt.(*pp).doPrintf(0xc42003c6c0, 0x1346f9b, 0x16, 0xc4227d8950, 0x3, 0x3)
        /usr/local/go/src/fmt/print.go:1003 +0x157 fp=0xc4227d88c0 sp=0xc4227d87d8 pc=0x4cead7
fmt.Sprintf(0x1346f9b, 0x16, 0xc421db0950, 0x3, 0x3, 0xc420378dc0, 0xc4208073e0)
        /usr/local/go/src/fmt/print.go:203 +0x66 fp=0xc4227d8918 sp=0xc4227d88c0 pc=0x4c7ec6
context.(*valueCtx).String(0xc4208d65a0, 0x13c6e88, 0xc42268cb40)
        /usr/local/go/src/context/context.go:485 +0xab fp=0xc4227d8990 sp=0xc4227d8918 pc=0x50793b
fmt.(*pp).handleMethods(0xc42268cb40, 0xc400000076, 0xc421db1d01)
        /usr/local/go/src/fmt/print.go:603 +0x275 fp=0xc4227d8a20 sp=0xc4227d8990 pc=0x4caf45
fmt.(*pp).printArg(0xc42268cb40, 0x121c1e0, 0xc4208d65a0, 0x76)
        /usr/local/go/src/fmt/print.go:686 +0x15d fp=0xc4227d8a98 sp=0xc4227d8a20 pc=0x4cb2dd
fmt.(*pp).doPrintf(0xc42268cb40, 0x1346f9b, 0x16, 0xc4227d8c10, 0x3, 0x3)
        /usr/local/go/src/fmt/print.go:1003 +0x157 fp=0xc4227d8b80 sp=0xc4227d8a98 pc=0x4cead7
fmt.Sprintf(0x1346f9b, 0x16, 0xc421db0c10, 0x3, 0x3, 0x222c303a22746e75, 0x6f74536c61636f4c)
        /usr/local/go/src/fmt/print.go:203 +0x66 fp=0xc4227d8bd8 sp=0xc4227d8b80 pc=0x4c7ec6
context.(*valueCtx).String(0xc4208d65d0, 0x13c6e88, 0xc42268c000)
        /usr/local/go/src/context/context.go:485 +0xab fp=0xc4227d8c50 sp=0xc4227d8bd8 pc=0x50793b
fmt.(*pp).handleMethods(0xc42268c000, 0x6c61697400000076, 0x3a22746964657201)
        /usr/local/go/src/fmt/print.go:603 +0x275 fp=0xc4227d8ce0 sp=0xc4227d8c50 pc=0x4caf45
fmt.(*pp).printArg(0xc42268c000, 0x121c1e0, 0xc4208d65d0, 0x76)
        /usr/local/go/src/fmt/print.go:686 +0x15d fp=0xc4227d8d58 sp=0xc4227d8ce0 pc=0x4cb2dd
fmt.(*pp).doPrintf(0xc42268c000, 0x1346f9b, 0x16, 0xc4227d8ed0, 0x3, 0x3)
        /usr/local/go/src/fmt/print.go:1003 +0x157 fp=0xc4227d8e40 sp=0xc4227d8d58 pc=0x4cead7
fmt.Sprintf(0x1346f9b, 0x16, 0xc421db0ed0, 0x3, 0x3, 0x51736245616d6769, 0x22797469746e6175)
        /usr/local/go/src/fmt/print.go:203 +0x66 fp=0xc4227d8e98 sp=0xc4227d8e40 pc=0x4c7ec6
context.(*valueCtx).String(0xc4208d6690, 0x13c6e88, 0xc4225d6000)
        /usr/local/go/src/context/context.go:485 +0xab fp=0xc4227d8f10 sp=0xc4227d8e98 pc=0x50793b
fmt.(*pp).handleMethods(0xc4225d6000, 0x3a22746e00000076, 0x6c61636f4c222c01)
        /usr/local/go/src/fmt/print.go:603 +0x275 fp=0xc4227d8fa0 sp=0xc4227d8f10 pc=0x4caf45
fmt.(*pp).printArg(0xc4225d6000, 0x121c1e0, 0xc4208d6690, 0x76)
        /usr/local/go/src/fmt/print.go:686 +0x15d fp=0xc4227d9018 sp=0xc4227d8fa0 pc=0x4cb2dd
fmt.(*pp).doPrintf(0xc4225d6000, 0x1346f9b, 0x16, 0xc4227d9190, 0x3, 0x3)
        /usr/local/go/src/fmt/print.go:1003 +0x157 fp=0xc4227d9100 sp=0xc4227d9018 pc=0x4cead7
fmt.Sprintf(0x1346f9b, 0x16, 0xc421db1190, 0x3, 0x3, 0x49d7a6, 0xc4220e7e68)
        /usr/local/go/src/fmt/print.go:203 +0x66 fp=0xc4227d9158 sp=0xc4227d9100 pc=0x4c7ec6
context.(*valueCtx).String(0xc4208d66f0, 0x13c6e88, 0xc420338f00)
        /usr/local/go/src/context/context.go:485 +0xab fp=0xc4227d91d0 sp=0xc4227d9158 pc=0x50793b
fmt.(*pp).handleMethods(0xc420338f00, 0x76, 0xc4220e7e01)
        /usr/local/go/src/fmt/print.go:603 +0x275 fp=0xc4227d9260 sp=0xc4227d91d0 pc=0x4caf45
fmt.(*pp).printArg(0xc420338f00, 0x121c1e0, 0xc4208d66f0, 0x76)
        /usr/local/go/src/fmt/print.go:686 +0x15d fp=0xc4227d92d8 sp=0xc4227d9260 pc=0x4cb2dd
fmt.(*pp).doPrintf(0xc420338f00, 0x1346f9b, 0x16, 0xc4227d9450, 0x3, 0x3)
        /usr/local/go/src/fmt/print.go:1003 +0x157 fp=0xc4227d93c0 sp=0xc4227d92d8 pc=0x4cead7
fmt.Sprintf(0x1346f9b, 0x16, 0xc421db1450, 0x3, 0x3, 0xc4220e7e68, 0xc421db1490)
        /usr/local/go/src/fmt/print.go:203 +0x66 fp=0xc4227d9418 sp=0xc4227d93c0 pc=0x4c7ec6
context.(*valueCtx).String(0xc421db8600, 0x13c6e88, 0xc4220e7e00)
        /usr/local/go/src/context/context.go:485 +0xab fp=0xc4227d9490 sp=0xc4227d9418 pc=0x50793b
fmt.(*pp).handleMethods(0xc4220e7e00, 0xc400000076, 0x1)
        /usr/local/go/src/fmt/print.go:603 +0x275 fp=0xc4227d9520 sp=0xc4227d9490 pc=0x4caf45
fmt.(*pp).printValue(0xc4220e7e00, 0x121c1e0, 0xc421db8600, 0x16, 0x76, 0x1)
        /usr/local/go/src/fmt/print.go:700 +0x26bb fp=0xc4227d96f0 sp=0xc4227d9520 pc=0x4ce1ab
fmt.(*pp).printValue(0xc4220e7e00, 0x132f680, 0xc421aef8c0, 0x99, 0x76, 0x0)
        /usr/local/go/src/fmt/print.go:783 +0x1ace fp=0xc4227d98c0 sp=0xc4227d96f0 pc=0x4cd5be
fmt.(*pp).printArg(0xc4220e7e00, 0x132f680, 0xc421aef8c0, 0xc400000076)
        /usr/local/go/src/fmt/print.go:689 +0x1ce fp=0xc4227d9938 sp=0xc4227d98c0 pc=0x4cb34e
fmt.(*pp).doPrintf(0xc4220e7e00, 0x1332017, 0x3, 0xc4227d9ac8, 0x1, 0x1)
        /usr/local/go/src/fmt/print.go:1003 +0x157 fp=0xc4227d9a20 sp=0xc4227d9938 pc=0x4cead7
fmt.Sprintf(0x1332017, 0x3, 0xc421db1ac8, 0x1, 0x1, 0x0, 0xc420247400)
        /usr/local/go/src/fmt/print.go:203 +0x66 fp=0xc4227d9a78 sp=0xc4227d9a20 pc=0x4c7ec6
example.com/xxx/aaa/vendor/github.com/uber/jaeger-client-go.(*tags).EmitObject(0xc4213ac140, 0x1335e03, 0x7, 0x132f680, 0xc421aef8c0)
        /home/admin/.GOPATH/src/example.com/xxx/aaa/vendor/github.com/uber/jaeger-client-go/jaeger_tag.go:78 +0x92 fp=0xc4227d9ae8 sp=0xc4227d9a78 pc=0xf7d062
example.com/xxx/aaa/vendor/github.com/opentracing/opentracing-go/log.Field.Marshal(0x1335e03, 0x7, 0xa, 0x0, 0x0, 0x0, 0x132f680, 0xc421aef8c0, 0x1470f20, 0xc4213ac140)
        /home/admin/.GOPATH/src/example.com/xxx/aaa/vendor/github.com/opentracing/opentracing-go/log/field.go:223 +0x3d0 fp=0xc4227d9b28 sp=0xc4227d9ae8 pc=0xe9d790
example.com/xxx/aaa/vendor/github.com/uber/jaeger-client-go.ConvertLogsToJaegerTags(0xc42247bd40, 0x1, 0x1, 0xc4202efa58, 0x0, 0x1)
        /home/admin/.GOPATH/src/example.com/xxx/aaa/vendor/github.com/uber/jaeger-client-go/jaeger_tag.go:31 +0x127 fp=0xc4227d9c20 sp=0xc4227d9b28 pc=0xf7c1a7
example.com/xxx/aaa/vendor/github.com/uber/jaeger-client-go.buildLogs(0xc4222feed0, 0x1, 0x1, 0x100, 0xc4213ac100, 0x3)
        /home/admin/.GOPATH/src/example.com/xxx/aaa/vendor/github.com/uber/jaeger-client-go/jaeger_thrift_span.go:80 +0x196 fp=0xc4227d9d40 sp=0xc4227d9c20 pc=0xf7dcd6
example.com/xxx/aaa/vendor/github.com/uber/jaeger-client-go.BuildJaegerThrift(0xc4220e3400, 0x0)
        /home/admin/.GOPATH/src/example.com/xxx/aaa/vendor/github.com/uber/jaeger-client-go/jaeger_thrift_span.go:42 +0x18f fp=0xc4227d9e08 sp=0xc4227d9d40 pc=0xf7d3af
example.com/xxx/aaa/trace.(*HTTPTransportWithCache).Append(0xc420308540, 0xc4220e3400, 0xc421db1f10, 0x0, 0x0)
        /home/admin/.GOPATH/src/example.com/xxx/aaa/trace/transport.go:68 +0x45 fp=0xc4227d9e70 sp=0xc4227d9e08 pc=0xfb7785
example.com/xxx/aaa/vendor/github.com/uber/jaeger-client-go.(*remoteReporter).processQueue(0xc420318550)
        /home/admin/.GOPATH/src/example.com/xxx/aaa/vendor/github.com/uber/jaeger-client-go/reporter.go:280 +0x1e8 fp=0xc4227d9fd8 sp=0xc4227d9e70 pc=0xf81858
runtime.goexit()
        /usr/local/go/src/runtime/asm_amd64.s:2361 +0x1 fp=0xc4227d9fe0 sp=0xc4227d9fd8 pc=0x45bca1
created by example.com/xxx/aaa/vendor/github.com/uber/jaeger-client-go.NewRemoteReporter
        /home/admin/.GOPATH/src/example.com/xxx/aaa/vendor/github.com/uber/jaeger-client-go/reporter.go:215 +0x16b
```

## Proposal

Maybe i need to copy one before using it. What do you think?


<!--
Welcome to the OpenTracing Go repo! ðŸ‘‹ðŸŽ‰

- Please be respectful and considerate of others when commenting on issues.
- Please search for existing issues in order to ensure we don't have duplicate bugs/feature requests.
- If you have a question please ask it on our Gitter chat https://gitter.im/opentracing/public instead of creating an issue.
- Please provide as much information as possible so we all understand the issue.
-->

## Use Case

Not all requests need to trace, and for now, you have to mark these requests somehow to avoid new spans creation. Even if those spans will be skipped with the sampler.

## Proposal

No need to create the new spans from context if there is no parent span.

```go
func StartSpanFromContext(ctx context.Context, operationName string, opts ...StartSpanOption) (Span, context.Context) {
	return startSpanFromContextWithTracer(ctx, GlobalTracer(), operationName, opts...)
}
```

Operation of the creation of root span is always explicit and made in middleware *tracer.StartSpan(operationName, opts...)* with the tracer object. And I await that if no parent in the context then it means that we don't have to trace it at all.

Besides this will allow not to use **~GlobalTracer()~** at all because we could be sure that it will be at the context in any case, and the global tracker could be completely removed as redundant.

## Questions

 * What could be a reason to use ```StartSpanFromContext``` to create the root span?
 * Can we remove the * GlobalTracer* "singletons"? If it will really need to someone he can define it in his own module.

Hi, we updated some exported function comments based on best practices from [Effective Go](https://golang.org/doc/effective_go.html#commentary). Itâ€™s admittedly a relatively minor fix up. Does this help you?
Hi.

I have a custom error type (which implements Error interface) and use it in [log.Error](https://godoc.org/github.com/opentracing/opentracing-go/log#Error)

When I was looking at this error through `jaeger-ui`, I see it is not the `err.Error()` I see, but the struct representation.

[this](https://github.com/opentracing/opentracing-go/blob/master/log/field.go#L268) may be the culprit of this issue

```
func (lf Field) String() string {
	return fmt.Sprint(lf.key, ":", lf.Value())
}
```
`Sprint` doesn't call the `Error()` method if the actual interface is an error, but a struct representation. as I see [here](https://play.golang.org/p/wHsYfgCdE3i) 

I am not sure [Marshal](https://github.com/opentracing/opentracing-go/blob/master/log/field.go#L196) formats it differently, but as far as I see, my trace log doesn't have some of the private info I add through `Error` method.

Please guide me if you think it may be because I use the API wrongly.

```
        fields := []log.Field {log.Error(myCustomError)}
	fields = append(fields, log.String("message", msg))
	fields = append(fields, log.String("level", "info"))
	span := opentracing.SpanFromContext(ctx) 
         span.LogFields(fields...)
```

Hello folks! Thanks for all the work you did.

## Use Case
I would like to expose the `trace_id` out from a Span mainly over HTTP header, and I would also like to attach it to the logs that my application generates.

Mainly for support purpose. A developer or a system integrator will be able to communicate the trace_id back to the support team, and it will easy for them to understand what is going on.

## Problem
I looked around, and it seems like this information is not accessible from the SpanContext but I had a quick chat with @yurishkuro in the mailing list, and it looks like the specification now covers this use case:

https://github.com/opentracing/specification/blob/master/rfc/trace_identifiers.md#specification-changes

## Proposal
I opened this issue to figure out together how we should update the SpanContext interface to cover this use case.

```golang
// SpanContext represents Span state that must propagate to descendant Spans and across process
// boundaries (e.g., a <trace_id, span_id, sampled> tuple).
type SpanContext interface {
	// ForeachBaggageItem grants access to all baggage items stored in the
	// SpanContext.
	// The handler function will be called for each baggage key/value pair.
	// The ordering of items is not guaranteed.
	//
	// The bool return value indicates if the handler wants to continue iterating
	// through the rest of the baggage items; for example if the handler is trying to
	// find some baggage item by pattern matching the name, it can return false
	// as soon as the item is found to stop further iterations.
	ForeachBaggageItem(handler func(k, v string) bool)

        SpanID() string
        TraceID() string
}
```
We can probably add two simple method `SpanID()` and `TraceID()` to the `SpanContext`.


## Use Case
I am using open-tracing for all distributed tracing.

## Problem
When I log an error with 
```
errors.WithStack(err) 
ext.Error.Set(span, true) 
span.LogFields(log.Error(e))
```
It just gives the error string rather than stack trace or any supporting information.

## Proposal
Treat errors as objects not strings
github.com/opentracing/opentracing-go/log/field.go
replace 
```
case errorType:
		if err, ok := lf.interfaceVal.(error); ok {
			visitor.EmitString(lf.key, err.Error())
		} else {
			visitor.EmitString(lf.key, "<nil>")
		}
```
with 
```
case errorType:
		if err, ok := lf.interfaceVal.(error); ok {
			visitor.EmitObject(lf.key, err)
		} else {
			visitor.EmitString(lf.key, "<nil>")
		}
```
the implementers are then free to use https://godoc.org/github.com/pkg/errors#hdr-Formatted_printing_of_errors just like is used in jaeger for EmitObject

```
func (ml fieldsAsMap) EmitObject(key string, value interface{}) {
	ml[key] = fmt.Sprintf("%+v", value)
}
```
Which will give all the information

## Questions to address (if any)

