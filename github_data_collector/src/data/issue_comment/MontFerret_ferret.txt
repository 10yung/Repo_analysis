**Describe the bug**
When running my script I run into the 'element detached' error after 2 loops.
The same logic for another website does work. Error is:
element detached: INNER_HTML(doc,'html') at 24:25: 

**To Reproduce**
Steps to reproduce the behavior:
```
LET match_urls = (
    FOR match IN ELEMENTS(doc, 'table[frame=lhs] a')
        RETURN CONCAT("<FULL URL>", match.attributes.href)
)

LET unique_match_urls = UNIQUE(match_urls)

LET links = (
    FOR match_url IN unique_match_urls
        WAIT(RAND(1000))
        NAVIGATE(doc, match_url, 20000)
        WAIT(RAND(1000))

        LET match_html = INNER_HTML(doc, 'html')
        WAIT(RAND(1000))

        NAVIGATE_BACK(doc)
        WAIT(RAND(1000))
        RETURN {url: match_url, html: match_html}
)
```
--

I added the RAND(1000) for debugging purposes.

**Expected behavior**
I expect for every loaded URL the HTML returned.

**Screenshots**

**Desktop (please complete the following information):**
 - OS: Windows 10 Pro
 - Browser Chrome 79.0.3945.117
 - Version: latest from master

**Additional context**
If I replace the loop with a DOCUMENT call like this, the code works (although very inefficiently by opening a new tab for every page):
```
LET links = (
    FOR match_url IN unique_match_urls
        WAIT(RAND(1000))
        LET inner_doc = DOCUMENT(match_url, {
            driver: "cdp",
            userAgent: "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_14_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/76.0.3809.87 Safari/537.36",
            keepCookies: false
        })

        WAIT(RAND(1000))

        LET match_html = INNER_HTML(inner_doc, 'html')
        WAIT(RAND(1000))

        NAVIGATE_BACK(doc)
        WAIT(RAND(1000))
        RETURN {url: match_url, html: match_html}
)
```
# github.com/MontFerret/ferret/pkg/drivers/cdp
go\src\github.com\MontFerret\ferret\pkg\drivers\cdp\driver.go:31:12: undefined: target.BrowserContextID
I'm testing the PAGINATION() function on some sites. What I've noticed is that it doesn't always work and it's not clear to me why.

Here 2 very similar examples:

1. Here the pagination works like expected:

```
LET doc = DOCUMENT("https://gtmetrix.com/top1000.html", {
    driver: "cdp"
})
WAIT_ELEMENT(doc, '.t1k-rank.sorting_1', 10000)
LET nextBtnSelector = 'a[class="paginate_button next"]'
LET listingBlock = ELEMENT(doc, '#top-1000 > tbody')
LET rowBlocks = ELEMENTS(listingBlock, 'tr')
LET objs = (
    FOR pageNum IN PAGINATION(doc, nextBtnSelector)
        LIMIT 35,40
        WAIT(2000)
        LET url = ELEMENT(doc, 'span.bt-content a').innerText
        LET rank = ELEMENT(doc, 'td.t1k-rank.sorting_1 > span').innerText
        PRINT("url:", url)
        RETURN {"url": url, "rank": rank}
)
RETURN objs

// Output (First entries of the last 5 pages):
//[{"rank":"881","url":"http://www.sing365.com/"},{"rank":"906","url":"http://www.kijiji.ca/"},{"rank":"931","url":"http://www.acrobat.com/"},{"rank":"956","url":"http://www.kompas.com/"},{"rank":"981","url":"http://www.mcssl.com/"}]
```


2. Here the pagination doesn't work. Ferret does not move to the next page:

```
LET listingPage = DOCUMENT("https://www.foxsports.com/nfl/players", {
    driver: "cdp",
    userAgent: "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_14_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/76.0.3809.87 Safari/537.36"
})
//WAIT(5000)

LET nextBtnSelector = 'div.wisbb_paginator a.xh-highlight'
LET resultListSelector = 'div.wisbb_playersTable a.wisbb_fullPlayer > span'

WAIT_ELEMENT(listingPage, resultListSelector, 10000)


LET namesList = (
    FOR pageNum IN PAGINATION(listingPage, nextBtnSelector)
        //WAIT(5000)
        LET wait = pageNum > 0 ? WAIT_NAVIGATION(listingPage) : false
        LET waitSelector = wait ? WAIT_ELEMENT(listingPage, resultListSelector) : false
        LET ElmList = ELEMENTS(listingPage, resultListSelector)
        FOR name IN ElmList
            RETURN name.innerText
)
RETURN namesList

// Output (Only 1st page):
//["Abdullah, Ameer","Abdullah, Ameer ","Abernathy, Micah","Abernathy, Micah ","Aboushi, Oday","Aboushi, Oday ","Abram, Johnathan","Abram, Johnathan ","Acho, Sam","Acho, Sam ","Adams, Andrew","Adams, Andrew ","Adams, Davante","Adams, Davante ","Adams, Jamal","Adams, Jamal ","Adams, Jerell","Adams, Jerell ","Adams, Josh","Adams, Josh ","Adams, Keion","Adams, Keion ","Adams, Matthew","Adams, Matthew ","Adams, Mike","Adams, Mike ","Adams, Montravius","Adams, Montravius ","Adams, Paul","Adams, Paul ","Adams, Tony","Adams, Tony ","Adams, Tyrell","Adams, Tyrell ","Addae, Jahleel","Addae, Jahleel ","Adderley, Nasir","Adderley, Nasir ","Addison, Mario","Addison, Mario ","Adeboyejo, Quincy","Adeboyejo, Quincy ","Adeniyi, Olasunkanmi","Adeniyi, Olasunkanmi ","Adeoye, Aaron","Adeoye, Aaron ","Adewusi, Tenny","Adewusi, Tenny ","Afriyie, Pat","Afriyie, Pat "]
```


EDIT 2:
-------------
Maybe this is more appropriate for the 2nd example:

```
LET doc = DOCUMENT("https://www.foxsports.com/nfl/players", {
    driver: "cdp"
})

LET nextBtnSelector = '#wisfoxbox > section.wisbb_body > div > div.wisbb_paginator > a:nth-child(5)'
WAIT(5000)

LET objs = (
    FOR pageNum IN PAGINATION(doc, nextBtnSelector)
        LIMIT 0,1
        WAIT(5000)
        LET name = ELEMENT(doc, 'td.wisbb_text.wisbb_fixedColumn').innerText
        RETURN name
)
RETURN objs
```

The selector breaks after the 2nd page but I think  with `LIMIT 0,1` it should work for the first iteration. Here comes up another issue though. It's a pain to work only with CSS Selectors. I have no idea how to make the selector work for all pages.
I've made a feature request for XPath and jQuery Selectors here: [https://github.com/MontFerret/ferret/issues/427](https://github.com/MontFerret/ferret/issues/427)

**Is your feature request related to a problem? Please describe.**

All provided functions (e.g. PAGINATION()) in ferret support only CSS Selectors and these cannot cover all use cases.
For example, in:
[https://www.foxsports.com/nfl/players](https://www.foxsports.com/nfl/players)
I wanted to select the next button based on the text ("Next"), but selecting an element based on the text as I've seen isn't supported by CSS selectors.


**Describe the solution you'd like**

It would be better to support XPath and jQuery Selectors in the functions and give the user the option to choose the type of selectors he wants to use.

E.g.:
`LET nextBtnSelectorElement = XPATH(doc, "//a[contains(text(),'Next')]")`
and then:
`FOR pageNum IN PAGINATION(listingPage, nextBtnSelectorElement, "xpath")`

I sometimes get "element detached" error and I don't understand why. Here an example:

```
LET listingPage = DOCUMENT("https://www.foxsports.com/nfl/players", {
    driver: "cdp",
    userAgent: "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_14_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/76.0.3809.87 Safari/537.36"
})
WAIT(5000)
LET nextBtnSelector = '#wisfoxbox > section.wisbb_body > div > div.wisbb_paginator > a:nth-child(5)'
LET listingBlock = ELEMENT(listingPage, '#wisfoxbox > section.wisbb_body > div > div.wisbb_playersTable > div > table')
LET blocks = ELEMENTS(listingBlock, 'tr')
LET myObjs = (
    FOR pageNum IN PAGINATION(listingPage, nextBtnSelector)
        //WAIT(3000)
        LET wait = pageNum > 0 ? WAIT_NAVIGATION(listingPage) : false
        LET waitSelector = wait ? WAIT_ELEMENT(listingPage, listingBlock) : false
        PRINT(ELEMENT(listingPage, 'body'))
        FOR block IN blocks
            PRINT("blockText:", block.innerText)
            RETURN {"blockText": block.innerText}

)
RETURN myObjs
```

and the error:

```
Failed to execute the query
element detached: FORpageNumINPAGINATION(listingPage,nextBtnSelector)LETwait=pageNum>0?WAIT_NAVIGATION(listingPage):falseLETwaitSelector=wait?WAIT_ELEMENT(listingPage,listingBlock):falsePRINT(ELEMENT(listingPage,'body'))FORblockINblocksPRINT("blockText:",block.innerText)RETURN{"blockText":block.innerText} at 10:4
```

How can I fix it? 
What I'm trying to do is get the listing and the links in each row, the details for each row and of course for all pages.

At this moment, we can only handle navigation events of an entire page, but there are some situations when we need to handle the event of an individual iframe of the page.
Is it possible to paginate within an iframe?
I tried  several times with the CLICK() function as well as with the PAGINATION() function but neither of them worked. 
Example for CLICK():

```
LET page = DOCUMENT("https://www.w3schools.com/html/html_iframe.asp", {
    driver: "cdp",
    userAgent: "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_14_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/76.0.3809.87 Safari/537.36"
})
WAIT(3000)
LET nextBtnSelector = 'a.w3-right.w3-btn'
LET frame1 = page.frames[1]
LET frameTitleSelector = '#main > h1 > span'
LET frameTitle = ELEMENT(frame1, frameTitleSelector).innerText
PRINT(frameTitle)
PRINT(ELEMENT(frame1, "#main > div.w3-panel.w3-info.intro > p:nth-child(1)").innerText)
CLICK(frame1, nextBtnSelector)
WAIT(3000)
//WAIT_ELEMENT(frame1, "#main > ul:nth-child(7) > li:nth-child(7)", 10000)
PRINT(frameTitle)
RETURN "DONE"
```

I see in the logs only the title of the first page ("Tutorial"). Ferret doesn't move to the next page ("Introduction"). 
I need help with running chrome with CLI --proxy-server settings.
When I set up a proxy server **from chrome GUI settings** (Settings/Advanced/Open your computer's proxy settings/Use manually specified proxy configuration) **it works fine** (checked on whatismyproxy.com). 
But, when I **set the proxy from command line** chrome **does not load any page**:

`google-chrome --proxy-server="https://206.246.75.178:3129"`

The same (main) problem is with headless or with dockerised alpeware/chrome-headless-stable:

`google-chrome-stable --headless --disable-gpu --remote-debugging-port=9222 --force-device-scale-factor=1 --no-first-run --no-default-browser-check  --no-sandbox http://www.chromestatus.com --proxy-server="https://206.246.75.178:3129"`

Have anyone experienced this problem?
I am using Kubuntu.
Thanks


**Describe the bug**
When using the cdp driver, during closing of a browser page, this error sometimes appears.

```
{"level":"warn","time":"x","url":"x","error":"rpcc: the connection is closing","time":"x","message":"failed to close browser page"}
{"level":"error","time":"x","error":": rpcc: the connection is closing: session: detach timed out for session 5C391DF4E758E985AE3CBAA03774E562","time":"x","message":"closing root scope"}
```

**To Reproduce**
Steps to reproduce the behavior:
Run a single program 10-50 times, 2 - 4 instances in parallel. Observe the error (sometimes).

**Expected behavior**
No error should be printed.

**Desktop (please complete the following information):**
 - OS: Windows 10
 - Browser: Chrome 77
 - Version: latest

**Additional context**
I only observed this issue when I had multiple programs running in parallel (2 to 4 instances at a time).

I'm not sure the library even needs to close the page manually. [Here](https://github.com/MontFerret/ferret/blob/master/pkg/drivers/cdp/page.go), on line 377 the page is closed manually. This looks weird because of the `context.Background()` passed in as the parameter. At the end of the function the page's connection is closed. I think that this should be enough to close the page.

Let's add functions that implement IO operations.

We need to cover 2 areas for now:

- File system
- Network (HTTP)

Each of the areas must be in a dedicated namespace:

- ``IO::FS::READ(path: string)``, ``IO::FS::WRITE(path: string, data: []bytes)``
- ``IO::NET::HTTP::GET(url: string, params?: object)``, ``IO::NET::HTTP::POST(params: object)``, ``IO::NET::HTTP::PUT(params: object)``, ``IO::NET::HTTP::DELETE(url: string, params?: object)``

Did I miss something?

More detailed API will be discussed later.

Here is a list of things we need to add for starters:
- [x] IO::FS::READ
- [x] IO::FS::WRITE
- [ ] IO::FS::DELETE (do we need it?)
- [ ] IO::NET::HTTP::GET
- [ ] IO::NET::HTTP::POST
- [ ] IO::NET::HTTP::PUT
- [ ] IO::NET::HTTP::DELETE