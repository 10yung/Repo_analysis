Depends on #1258 

Draft to test targets other than MacOS and Linux.
## Motivation

This PR introduces `sys::Socket` that is internal to Mio and consolidates all the existing socket system calls into a single type.

There has been a lot of discussion about how Mio should provide additional methods for setting certain socket options. Currently, it is left up to the user to pull in an additional dependency (`socket2-rs`/`net2`) and use the provided `As`/`From`/`Into` socket impls.

There are however various system calls for working with sockets in Mio that are specific to setting non-blocking behavior and using as few system calls as possible. They include functionality that creat sockets to be non-blocking by default, using `accept4` on targets that provide it, and relying on inheriting certain socket statuses where possible.

## Solution

`Socket` is a `RawFd`/`RawSocket` wrapper type that provides the necessary methods for consolidating all the `sys::target::net` socket sytem calls into a single type.

Since `Socket` works at the target's socket layer, any future changes related to additional functionality or reported bugs can take place in these methods and apply to all the types that use them.

**Additionally**, `Socket` provides the necessary building block for providing a public `net` socket types. This will allow users of Mio to set additional socket options without worrying about separate system calls for setting non-blocking mode, and avoid pulling in additional dependencies. An example of the public socket type can be found #1259.

Signed-off-by: Kevin Leimkuhler <kleimkuhler@icloud.com>

Ref: https://github.com/tokio-rs/tokio/issues/1543

There is no way to call `bind()` before `connect()` when creating `TcpStream`. This is a very common method to tell operating system to connect the target address with a specific local address (mostly for using a specific network interface).

Proposal, adding a static method for `TcpStream`:

```rust
fn bind_connect(bind_addr: &SocketAddr, target_addr: &SocketAddr) -> io::Result<TcpStream> {
    // ...
}
```

Other candicate names:

1. `connect_with`
2. `connect_from`
3. `connect_by`

I could send a PR for this, if it is Ok.
The std lib API accepts the addresses by reference, i.e. `&Ipv4Addr`, Mio however takes it by value `Ipv4Addr`. I think we should match the standard library API, although its inconsistent with `UdpSocket::bind`, which takes the address by value.
Closes #977
This is to prevent #1226 from happening too some extend, see the docs of `NO_TIMEOUT` in `tests/util/mod.rs`.
After #1192 Mio makes much more use of features, but these are only documented shortly in [`Cargo.toml`](https://github.com/tokio-rs/mio/blob/3ebce3e276f58126c25bdf9b606fe4676c0013c1/Cargo.toml#L26-L38). When documentation is generated, such as for doc.rs, all features are enabled so it might be surprising for new users that the need to enable a bunch of features.

I propose two solutions two this:
* Add documentation about the available features in the main crate docs, i.e. in `lib.rs`. This ways its clear for users when the open the documentation the first type.
* Add the required feature(s) per type.
  Preferably we add a box like the boxes added for unstable/nightly features (e.g. the yellow nightly-only box https://doc.rust-lang.org/std/mem/union.MaybeUninit.html#associatedconstant.UNINIT). But I don't think that is possible to do for user code atm.
  The alternative is just adding a notes section to each type to let the user know what feature(s) are required.
To ease the the update from 0.6 to 0.7 we should write an upgrade guide.

Related #1217.
Since 0.6 Mio has changed a lot. Many types come and gone and in general behaviour has changed. But this hasn't yet been documented in the changelog.
â€¦nstead keep the err sock states and just retry them later.

This is a partial fix for 0.7 because it just handles the errors, and makes the sockstates available next poll instead of panicking. Pushing the error to user is more complicated as it would require new api added. I'd suggest to leave this part until custom IOCP handlers are implemented and  #1195 is merged.