void spi_send_bytes_tts(uint8_t *data, uint32_t len) {
//SPI2

	spi_transaction_t t;
	if (len == 0)
		return;             //no need to send anything
	memset(&t, 0, sizeof(t));       //Zero out the transaction

//	t.rxlength=0;
//	t.flags=SPI_TRANS_MODE_DIOQIO_ADDR;
	while (len) {
		if (len > 256) {
			t.tx_buffer = data;
			t.user = (void*) 1;                //D/C needs to be set to 1
			t.length = 2048;
			//8192; //10240*8;                 //Len is in bytes, transaction length is in bits.
			t.flags = 0;
			//SPI_TRANS_USE_TXDATA;
			//0;
			spi_device_queue_trans(spitts, &t,portMAX_DELAY); //Transmit //			assert(ret==ESP_OK);            //Should have had no issues.
			len -= 256;
			//1024;
			data += 256;
			//1024;
		}
		else
		{
			t.length = len * 8; //Len is in bytes, transaction length is in bits.
			 spi_device_polling_transmit(spitts, &t);  //Transmit!
//			assert(ret==ESP_OK);            //Should have had no issues.
			len = 0;
		}

	}

//	gpio_set_level(PIN_NUM_DC, 0);


	//   EXIT_CRITICAL();
}


how  can  it  work  faster stably？
I was adding **AVRCP absolute volume commands**, facing an error while trying to increase volume using absolute volume commands as passthrough volume commands are not supporter by android. i was able to PLAY and PAUSE music using passthrough commands, cant change volume with the same.


I want to increase or decrease the music volume in Phone using buttons connected to Board.
```
 esp_avrc_ct_send_set_absolute_volume_cmd(1, 0);
```
This command should mute the sound on Phone(android), but the following error arises : 
```
W (46988) BT_BTC: handle_rc_metamsg_rsp: code 10 error 0x0
```

Board : ESP32
ESP-IDF version : 4
Thanks
Tarun Narain
#4100 
''' Environment

- Development Kit:      NA, but I'm using Hiletgo
- Module or chip used:  ESP32-WROOM-32S
- IDF version v4.1-dev-1795-gca8fac876
- Build System:        idf.py
- Compiler version: xtensa-esp32-elf-gcc.exe (crosstool-NG esp-2019r2) 8.2.0
- Operating System:   Windows
- (Windows only) environment type: PowerShell
- Using an IDE?: VSCode
- Power Supply:         USB

## Problem Description
btc_ble_gattc_get_attr_count takes a uint16_t* for count.  It, in turn, calls BTA_GATTC_GetDBSizeByType and casts as an int*.  As an int is 32 bits and uint16 is 16, the result overwrites part of the stack by 16 bytes.

This code change in fixes the issue for me

```
diff --git a/components/bt/host/bluedroid/btc/profile/std/gatt/btc_gattc.c b/components/bt/host/bluedroid/btc/profile/std/gatt/btc_gattc.c
index 73214a67d..f3a412a9c 100644
--- a/components/bt/host/bluedroid/btc/profile/std/gatt/btc_gattc.c
+++ b/components/bt/host/bluedroid/btc/profile/std/gatt/btc_gattc.c
                                                uint16_t char_handle,
                                                uint16_t *count)
 {
+    int c = *count;
     if (type == ESP_GATT_DB_ALL) {
-        BTA_GATTC_GetDBSize(conn_id, start_handle, end_handle, (int *)count);
+        BTA_GATTC_GetDBSize(conn_id, start_handle, end_handle, (int *)&c);
     } else {
-        BTA_GATTC_GetDBSizeByType(conn_id, type, start_handle, end_handle, char_handle, (int *)count);
+        BTA_GATTC_GetDBSizeByType(conn_id, type, start_handle, end_handle, char_handle, (int *)&c);
     }

+    *count = c;
+
     return ESP_GATT_OK;
 }
```

### Expected Behavior
A call to btc_ble_gattc_get_attr_count should not affect local variables.

### Actual Behavior
When I called btc_ble_gattc_get_attr_count, it would overwrite a local variable on the stack.  Similar to the gattc_multi_connect example, I would set notify_en=1.  In some cases the value would be reset to 0 when btc_ble_gattc_get_attr_count is called.

### Steps to reproduce
Debug gattc_multi_connect  into BTA_GATTC_GetDBSizeByType and see how the stack is overwritten.

### Code to reproduce this issue
You can use gattc_multi_connect and debug into btc_ble_gattc_get_attr_count in the case ESP_GATTC_REG_FOR_NOTIFY_EVT.


## Problem Description
The provided docker image contains the wrong CMake version.
-> Expected version: 3.13.4
(compare: https://github.com/espressif/esp-idf/blob/release/v4.0/tools/tools.json)
-> Actual version: 3.10.2
(compare: docker run -it espressif/idf:release-v4.0 cmake --version)

### Expected Behavior
It is expected, that all provided build environments utilize the exact same tools.

### Actual Behavior
Docker container uses a version of cmake which is deviated from the given tools.json file.


### Steps to reproduce
1. docker run -it espressif/idf:release-v4.0 cmake --version
## Environment

Module or chip used: ESP32-WROOM-32D
IDF version: v4.0-beta1-279-g0a03a55
Build System: Make
Compiler version: 8.2.0
Operating System: Linux
Power Supply: external 3.3V

## Problem Description

Calling esp_mqtt_destroy_client leaks a lot of memory of memory because outbox is not correctly freed.

The leak is generated inside outbox_cleanup() function, which dequeues only messages that have been tagged with the pending state CONFIRMED.
The application wil leak an amount of bytes tied to the queued message length.

### Expected Behavior
When mqtt client is destroyed, all resources allocated by the outbox should be freed. 
### Actual Behavior

### Steps to reproduce

1. connect to mqtt broker
2. publish on some topics
3. stop mqtt client after message has been published
4. destroy client
5. loop

### Code to reproduce this issue

```cpp
esp_err_t outbox_cleanup(outbox_handle_t outbox, int max_size)
{
    //outbox size is 1458 byte
    while (outbox_get_size(outbox) > max_size) {
        //THIS LINE WILL DEQUEUE ONLY MESSAGES IN CONFIRMED STATE
        outbox_item_handle_t item = outbox_dequeue(outbox, CONFIRMED, NULL);
        //Item is always NULL
        if (item == NULL) { 
            printf("Item NULL, LEAK!!!!!!!!!!!!!\r\n");
            return ESP_FAIL;
        }
        STAILQ_REMOVE(outbox, item, outbox_item, next);
        free(item->buffer);
        free(item);
    }
    return ESP_OK;
}
```
## Debug Logs

```cpp
DEQUEUE OUTBOX SIZE 1458
Item NULL, LEAK!!!!!!!!!!!!!

[..]

36 bytes (@ 0x3ffdbc8c) allocated CPU 0 ccount 0x61d97bb0 caller 0x40150531:0x4014f5d0:0x401502e5:0x400e9ad1
0x40150531: outbox_enqueue at /media/paolo/Data/working/FW/esp32/esp-idf/components/mqtt/esp-mqtt/lib/mqtt_outbox.c:36
0x4014f5d0: mqtt_enqueue at /media/paolo/Data/working/FW/esp32/esp-idf/components/mqtt/esp-mqtt/mqtt_client.c:817
0x401502e5: esp_mqtt_client_publish at /media/paolo/Data/working/FW/esp32/esp-idf/components/mqtt/esp-mqtt/mqtt_client.c:1434
0x400e9ad1: MQTTDRV_Publish at /media/paolo/Data/working/FW/esp32/2018_fw_wifi_esp32_v2/wifi_esp32_prj/components/Mqtt/MqttDrv.c:238

899 bytes (@ 0x3ffdc6c8) allocated CPU 0 ccount 0x61d98a10 caller 0x4015058c:0x4014f5d0:0x401502e5:0x400e9ad1
0x4015058c: outbox_enqueue at /media/paolo/Data/working/FW/esp32/esp-idf/components/mqtt/esp-mqtt/lib/mqtt_outbox.c:45 (discriminator 2)
0x4014f5d0: mqtt_enqueue at /media/paolo/Data/working/FW/esp32/esp-idf/components/mqtt/esp-mqtt/mqtt_client.c:817
0x401502e5: esp_mqtt_client_publish at /media/paolo/Data/working/FW/esp32/esp-idf/components/mqtt/esp-mqtt/mqtt_client.c:1434
0x400e9ad1: MQTTDRV_Publish at /media/paolo/Data/working/FW/esp32/2018_fw_wifi_esp32_v2/wifi_esp32_prj/components/Mqtt/MqttDrv.c:238

36 bytes (@ 0x3ffdbcb4) allocated CPU 0 ccount 0x626b947c caller 0x40150531:0x4014f5d0:0x401502e5:0x400e9ad1
0x40150531: outbox_enqueue at /media/paolo/Data/working/FW/esp32/esp-idf/components/mqtt/esp-mqtt/lib/mqtt_outbox.c:36
0x4014f5d0: mqtt_enqueue at /media/paolo/Data/working/FW/esp32/esp-idf/components/mqtt/esp-mqtt/mqtt_client.c:817
0x401502e5: esp_mqtt_client_publish at /media/paolo/Data/working/FW/esp32/esp-idf/components/mqtt/esp-mqtt/mqtt_client.c:1434
0x400e9ad1: MQTTDRV_Publish at /media/paolo/Data/working/FW/esp32/2018_fw_wifi_esp32_v2/wifi_esp32_prj/components/Mqtt/MqttDrv.c:238

559 bytes (@ 0x3ffdca50) allocated CPU 0 ccount 0x626ba150 caller 0x4015058c:0x4014f5d0:0x401502e5:0x400e9ad1
0x4015058c: outbox_enqueue at /media/paolo/Data/working/FW/esp32/esp-idf/components/mqtt/esp-mqtt/lib/mqtt_outbox.c:45 (discriminator 2)
0x4014f5d0: mqtt_enqueue at /media/paolo/Data/working/FW/esp32/esp-idf/components/mqtt/esp-mqtt/mqtt_client.c:817
0x401502e5: esp_mqtt_client_publish at /media/paolo/Data/working/FW/esp32/esp-idf/components/mqtt/esp-mqtt/mqtt_client.c:1434
0x400e9ad1: MQTTDRV_Publish at /media/paolo/Data/working/FW/esp32/2018_fw_wifi_esp32_v2/wifi_esp32_prj/components/Mqtt/MqttDrv.c:238

[...]


1909 bytes 'leaked' in trace (29 allocations)
total allocations 1165 total frees 18476
```

When library users call `esp_stop_ppp()`, it is expected that the PPP link
is closed and the DCE is moved into command mode.

If the STOP event is not posted into the event loop, then the PPP stack
would not be turned off, resulting in the impossibility to switch into
command mode, as the modem is still sending PPP binary data.

Signed-off-by: Francesco Giancane <francesco.giancane@accenture.com>
## Environment

- Development Kit: Adafruit HUZZAH32
- Module or chip used:  ESP32-WROOM-32
- IDF version: v4.0-beta2
- Build System: CMake
- Compiler version: 8.2.0
- Operating System: Linux
- Using an IDE?: Yes: Eclipse with Espressif IDF Plugins
- Power Supply: USB

## Problem Description

When using the spi_master driver with two devices on the same bus - one half-duplex and one full-duplex - the driver seems to drive the SPI device for longer than expected: When sending a first transaction to the half-duplex device and then sending a second transaction to the full-duplex device, the driver holds SCK low for longer than expected on the second transaction: It seems like it treats the second transaction as half-duplex, even though the device is configured as full-duplex.

To reproduce the issue, no actual SPI device has to be connected to the bus, since it is reproducible without any external device interaction.

I reported this before [on the forums](https://esp32.com/viewtopic.php?f=14&t=13719), but got no response.

### Expected Behavior

The second transaction should be treated as a proper full-duplex one. In the code below, the second transaction should only last for a length of three bytes: one address byte and two data bytes (t.length = 16).

### Actual Behavior

The second transaction looks like a half-duplex one. In the code below, it lasts for 5 bytes: One address byte, two bytes of proper data, and (presumably) the extra two bytes for the response (t.rxlength = 16).

The following shows the two transactions on the bus from the example code below on a logic analyzer:

![esp32-spi-bug](https://user-images.githubusercontent.com/8158077/72597965-2702a980-390f-11ea-8805-c1341936a81a.png)

### Steps to reproduce

1. Change the TEST_*_PIN defines in the example code below to match the board config.
2. Compile and flash the minimal example code below.
3. (No actual SPI devices need to be connected to reproduce the behavior.)
4. Watch the SCK and MOSI lines on the SPI bus.

### Code to reproduce this issue

[Minimal example here](https://gist.github.com/alemariusnexus/b5ba735e81350b827295f5888982e805)

## Debug Logs

```
I (28) boot: ESP-IDF v4.0-beta2-dirty 2nd stage bootloader
I (29) boot: compile time 18:44:54
I (29) boot: Enabling RNG early entropy source...
I (34) boot: SPI Speed : 40MHz
I (38) boot: SPI Mode : DIO
I (42) boot: SPI Flash Size : 2MB
I (46) boot: Partition Table:
I (50) boot: ## Label Usage Type ST Offset Length
I (57) boot: 0 nvs WiFi data 01 02 00009000 00006000
I (65) boot: 1 phy_init RF data 01 01 0000f000 00001000
I (72) boot: 2 factory factory app 00 00 00010000 00100000
I (80) boot: End of partition table
I (84) esp_image: segment 0: paddr=0x00010020 vaddr=0x3f400020 size=0x0717c ( 29052) map
I (103) esp_image: segment 1: paddr=0x000171a4 vaddr=0x3ffb0000 size=0x0207c ( 8316) load
I (107) esp_image: segment 2: paddr=0x00019228 vaddr=0x40080000 size=0x00400 ( 1024) load
0x40080000: _WindowOverflow4 at /opt/esp-idf/components/freertos/xtensa_vectors.S:1778

I (111) esp_image: segment 3: paddr=0x00019630 vaddr=0x40080400 size=0x069e0 ( 27104) load
I (131) esp_image: segment 4: paddr=0x00020018 vaddr=0x400d0018 size=0x14640 ( 83520) map
0x400d0018: _stext at ??:?

I (161) esp_image: segment 5: paddr=0x00034660 vaddr=0x40086de0 size=0x03aa0 ( 15008) load
0x40086de0: rtc_clk_cpu_freq_get_config at /opt/esp-idf/components/soc/esp32/rtc_clk.c:650

I (174) boot: Loaded app from partition at offset 0x10000
I (174) boot: Disabling RNG early entropy source...
I (175) cpu_start: Pro cpu up.
I (178) cpu_start: Application information:
I (183) cpu_start: Project name: app-template
I (189) cpu_start: App version: 1
I (193) cpu_start: Compile time: Jan 4 2020 18:44:43
I (199) cpu_start: ELF file SHA256: 78fef31c0db07f90...
I (205) cpu_start: ESP-IDF: v4.0-beta2-dirty
I (211) cpu_start: Starting app cpu, entry point is 0x400810a0
0x400810a0: call_start_cpu1 at /opt/esp-idf/components/esp32/cpu_start.c:272

I (0) cpu_start: App cpu up.
I (221) heap_init: Initializing. RAM available for dynamic allocation:
I (228) heap_init: At 3FFAE6E0 len 00001920 (6 KiB): DRAM
I (234) heap_init: At 3FFB30A8 len 0002CF58 (179 KiB): DRAM
I (240) heap_init: At 3FFE0440 len 00003AE0 (14 KiB): D/IRAM
I (247) heap_init: At 3FFE4350 len 0001BCB0 (111 KiB): D/IRAM
I (253) heap_init: At 4008A880 len 00015780 (85 KiB): IRAM
I (259) cpu_start: Pro cpu start user code
I (277) spi_flash: detected chip: generic
I (278) spi_flash: flash io: dio
W (278) spi_flash: Detected size(4096k) larger than the size in the binary image header(2048k). Using the size in the binary image header.
I (289) cpu_start: Chip Revision: 1
W (293) cpu_start: Chip revision is higher than the one configured in menuconfig. Suggest to upgrade it.
I (303) cpu_start: Starting scheduler on PRO CPU.
I (0) cpu_start: Starting scheduler on APP CPU.
Starting in 2s...
```

No further logs are generated. In particular, there are no errors or warnings about the SPI transactions.
esp32 runs normally without error prompts. However, the server cannot receive the message reported by esp32. It is normal for the server to test with other tools.

Fix that the server can receive the message and can return it. But it can't be displayed. I wonder if there are any properties set by the esp library that caused the server to fail to display. (Other test tools test the server, the server can display the message normally, but the esp32 can't display it)

There is no error message on the ESP32 side. The sending procedure is as follows:
    char data[32];
    int i = 0;
    while (1)
    {
        if (esp_websocket_client_is_connected(client))
        {
            int len = sprintf(data, "hello %04d", i++);
            ESP_LOGI(TAG, "Sending:%s", data);
            int err = esp_websocket_client_send_bin(client, data, len, portMAX_DELAY);
            if (err == ESP_FAIL)
                printf("ESP_FAIL\r\n");
            else
                printf("len:%d\r\n",err);
        }
        vTaskDelay(1000 / portTICK_RATE_MS);
    }
//////////////////////////////////////////////////////////////////////////////////////////////////////////////
ESP32 side running log is as follows:
W (252089) user_main: Received=kkjk
W (252099) user_main: Total payload length=4, data_len=4, current payload offset=0

I (252599) user_main: WEBSOCKET_EVENT_DATA
I (252599) user_main: Received opcode=1
W (252599) user_main: Received=kkjk
W (252609) user_main: Total payload length=4, data_len=4, current payload offset=0

I (252759) user_main: Sending:hello 0245
len:10
I (253759) user_main: Sending:hello 0246
len:10
///////////////////////////////////////////////////////////////////////////////////////////////////////////////
The server-side operation log is as follows:
<----- 接收：2020-01-17 14:28:18
连接：ws://192.168.191.3:8443/ - 192.168.191.7:61271
<----- 接收：2020-01-17 14:28:18
connection:Upgrade
host:192.168.191.3:8443
sec-websocket-key:HudC7xAIDs7v7lNg99CDdg==
sec-websocket-version:13
upgrade:websocket
user-agent:ESP32 Websocket Client
-----> 发送：2020-01-17 14:32:22
192.168.191.7:61271: kkjk
-----> 发送：2020-01-17 14:32:23
192.168.191.7:61271: kkjk
-----> 发送：2020-01-17 14:32:23
192.168.191.7:61271: kkjk





Add NETIF_PPP_AUTHTYPE_NONE to esp_netif_auth_type_t and allow
esp_netif_ppp_set_auth to set auth_type with NETIF_PPP_AUTHTYPE_NONE.
## Environment

- Development Kit:      ESP32-DevKitC
- Kit version (for WroverKit/PicoKit/DevKitC): v4
- Module or chip used:  ESP32-WROOM-32D
- IDF version (run ``git describe --tags`` to find it):
    v4.1-dev-1086-g93a8603c5
- Build System:         idf.py
- Compiler version (run ``xtensa-esp32-elf-gcc --version`` to find it):
    xtensa-esp32-elf-gcc (crosstool-NG esp-2019r2) 8.2.0
- Operating System:     Linux
- Using an IDE?: Visual Studio Code 
- Power Supply:         USB

## Problem Description

BLE module causes abort() was called at PC 0x40082ea6 on core 0
0x40082ea6: lock_acquire_generic at /home/jonhunterking/esp/esp-idf/components/newlib/locks.c:143 when I read values from my flash. This happens after case 7 completes. 

If I do not call BLE init I do not have this issue. 

### Code to reproduce this issue

Please note that not all the code from each of my files is posted here. Its thousands of lines. This is just the relevant code. So if you think you need more let me know. 

MAIN CODE

```cpp
void app_main()
{
  esp_log_level_set(TAG, ESP_LOG_DEBUG);
  createWifiStruct();
  bleInit();
  xTaskCreate(&main_task, "MAIN", 1024 *15, NULL, 2, NULL);
}

void main_task(void * params){
    uint64_t sleepTime = 5000000;
    int x = 4;
    uint32_t i = 0;
    //char * ssid = "VENTURES";
    //char * password = "2y!ardTypecolumn1";
    int flashStatus = 0;
    bool calibrationStatus = false;
    bool bleStatus = false;
    char * ssid_test;
    char * password_test;
    while(true)
    {
        printf("Oto state is %d\n", x);
        printf("In Main task\n");
        switch(x){
            case 0:
                ESP_LOGI(TAG, "Sending Indiciation");
                ble_indicateTwo(i);
                i++;
                if (i == 360){
                    i = 3;
                }
                calibrationStatus = returnStatus();
                if (calibrationStatus){
                    ESP_LOGI(TAG, "Calibration Complete");
                    x = 3;
                }
                vTaskDelay(100/portTICK_PERIOD_MS);
                break;
            case 1:
                ESP_LOGI(TAG, "Asking for password and SSID");
                ssid_test = returnSSID();
                password_test = returnPassword();
                printf("Returned SSID is: %s\n", ssid_test);
                printf("Returned Password is: %s\n", password_test);
                x = 2;
                vTaskDelay(1000/portTICK_PERIOD_MS);
                break;
            case 2:
                while(!wifiInit(ssid_test, password_test))
                {
                    ESP_LOGI(TAG, "Waiting for wifi to initialize");
                }
                updateStatus();
                x = 6;
                break;            
            case 3:
                pollServer();
                ESP_LOGI(TAG, "Polling Server");
                vTaskDelay(2000/portTICK_PERIOD_MS);
                bleStatus = returnBLEStatus();
                if (bleStatus){
                    printf("BLE Reconnected\n");
                    x = 4;
                }

                else{
                    printf("BLE is not connected\n");
                    x = 8;
                }
                break;
            case 4: //Initialize Flash Storage
                ESP_LOGI(TAG, "Checking if flash storage is initialized");
                initFlash();
                vTaskDelay(1000/portTICK_PERIOD_MS);
                x = 7;
                break;
            case 5: //Check status
                flashStatus = returnFlashStatus();
                if (flashStatus == 0)
                {
                    ESP_LOGI(TAG, "Wifi credentials have not been saved");
                    x = 6;
                }
                else
                {
                    ESP_LOGI(TAG, "Wifi credentials have already been saved");
                    x = 7;
                }
                break;
            case 6: //Save structure
                save_struct("TestSSID", "TestPassword", 1);
                vTaskDelay(1000/portTICK_PERIOD_MS);
                x = 8;
                break;
            case 7: //Return SSID and Password from flash storage
                ssid_test = returnFlashSSID();
                password_test = returnFlashPassword();
                printf("Returned values -> s: %s p: %s\n", ssid_test, password_test);
                x = 4;
                //vTaskDelay(1000/portTICK_PERIOD_MS);
                break;
            case 8: //sleep
                init_hibernation(sleepTime);
                printf("Going to sleep\n");
                esp_deep_sleep_start();
                break;
            default:
                    break;
        }
    }
}
```
FLASH CODE 
```cpp
char * returnFlashSSID(void)
{
  size_t size_ssid;
  char key[50] = "flash_key";
  flash_storage store;
  vTaskDelay(1000 / portTICK_PERIOD_MS);

  ESP_ERROR_CHECK(nvs_flash_init_partition("MyNvs"));

  nvs_handle handle_ssid;
  ESP_ERROR_CHECK(nvs_open_from_partition("MyNvs", "store", NVS_READONLY, &handle_ssid));
  esp_err_t result_ssid = nvs_get_blob(handle_ssid, key, (void *)&store, &size_ssid);
    switch (result_ssid)
  {
    case ESP_OK:
      ESP_LOGI(TAG, "SSID: %s",store.ssid);
      memset(out_ssid,0,strlen(out_ssid));
      for (int i = 0; i<= sizeof(store.ssid); i++){
          out_ssid[i] = (char) store.ssid[i];
      }
      break;
    default:
      ESP_LOGE(TAG, "Error (%s) opening NVS handle!\n", esp_err_to_name(result_ssid));
      break;
  }
  nvs_close(handle_ssid);
  return out_ssid;
}

char * returnFlashPassword(void)
{
  size_t size_password;
  char key[50] = "flash_key";
  flash_storage store;
  vTaskDelay(1000 / portTICK_PERIOD_MS);

  ESP_ERROR_CHECK(nvs_flash_init_partition("MyNvs"));

  nvs_handle handle_password;
  ESP_ERROR_CHECK(nvs_open_from_partition("MyNvs", "store", NVS_READONLY, &handle_password));
  esp_err_t result_password = nvs_get_blob(handle_password, key, (void *)&store, &size_password);
    switch (result_password)
  {
    case ESP_OK:
      ESP_LOGI(TAG, "Password: %s",store.password);
      memset(out_password,0,strlen(out_password));
      for (int i = 0; i<= sizeof(store.password); i++){
          out_password[i] = (char) store.password[i];
      }
      break;
    default:
      ESP_LOGE(TAG, "Error (%s) opening NVS handle!\n", esp_err_to_name(result_password));
      break;
  }
  nvs_close(handle_password);
  return out_password;
}
```
BLE CODE
```cpp
void bleInit(){
    esp_err_t ret;
    // Initialize NVS.
    ret = nvs_flash_init();
    if (ret == ESP_ERR_NVS_NO_FREE_PAGES) {
        ESP_ERROR_CHECK(nvs_flash_erase());
        ret = nvs_flash_init();
    }
    ESP_ERROR_CHECK( ret );

    ESP_ERROR_CHECK(esp_bt_controller_mem_release(ESP_BT_MODE_CLASSIC_BT));

    esp_bt_controller_config_t bt_cfg = BT_CONTROLLER_INIT_CONFIG_DEFAULT();
    ret = esp_bt_controller_init(&bt_cfg);
    if (ret) {
        ESP_LOGE(GATTS_TAG, "%s initialize controller failed\n", __func__);
        return;
    }

    ret = esp_bt_controller_enable(ESP_BT_MODE_BLE);
    if (ret) {
        ESP_LOGE(GATTS_TAG, "%s enable controller failed\n", __func__);
        return;
    }
    ret = esp_bluedroid_init();
    if (ret) {
        ESP_LOGE(GATTS_TAG, "%s init bluetooth failed\n", __func__);
        return;
    }
    ret = esp_bluedroid_enable();
    if (ret) {
        ESP_LOGE(GATTS_TAG, "%s enable bluetooth failed\n", __func__);
        return;
    }

    ret = esp_ble_gatts_register_callback(gatts_event_handler);
    if (ret){
        ESP_LOGE(GATTS_TAG, "gatts register error, error code = %x", ret);
        return;
    }
    ret = esp_ble_gap_register_callback(gap_event_handler);
    if (ret){
        ESP_LOGE(GATTS_TAG, "gap register error, error code = %x", ret);
        return;
    }
    ret = esp_ble_gatts_app_register(PROFILE_A_APP_ID);
    if (ret){
        ESP_LOGE(GATTS_TAG, "gatts app register error, error code = %x", ret);
        return;
    }
//    ret = esp_ble_gatts_app_register(PROFILE_B_APP_ID);
//   if (ret){
//        ESP_LOGE(GATTS_TAG, "gatts app register error, error code = %x", ret);
//        return;
//    }
    esp_err_t local_mtu_ret = esp_ble_gatt_set_local_mtu(500);
    if (local_mtu_ret){
        ESP_LOGE(GATTS_TAG, "set local  MTU failed, error code = %x", local_mtu_ret);
    }

}
```

## Debug Logs

```
abort() was called at PC 0x40082ea6 on core 0
0x40082ea6: lock_acquire_generic at /home/jonhunterking/esp/esp-idf/components/newlib/locks.c:143


ELF file SHA256: a250b523af995ae2d355e01c6a31d72c7ab4c56709c3ee47e7fee2c5e095faf0

Backtrace: 0x400966ed:0x3ffb59b0 0x40096a75:0x3ffb59d0 0x40082ea6:0x3ffb59f0 0x40082fc9:0x3ffb5a20 0x4019b971:0x3ffb5a40 0x40193fe1:0x3ffb5d00 0x40193f69:0x3ffb5d50 0x4009abb5:0x3ffb5d80 0x400d8b1c:0x3ffb5da0 0x400df376:0x3ffb5dc0 0x400df469:0x3ffb5df0 0x400e142b:0x3ffb5e20 0x4011af96:0x3ffb5e40 0x40099745:0x3ffb5e70
0x400966ed: invoke_abort at /home/jonhunterking/esp/esp-idf/components/esp32/panic.c:157

0x40096a75: abort at /home/jonhunterking/esp/esp-idf/components/esp32/panic.c:174

0x40082ea6: lock_acquire_generic at /home/jonhunterking/esp/esp-idf/components/newlib/locks.c:143

0x40082fc9: _lock_acquire_recursive at /home/jonhunterking/esp/esp-idf/components/newlib/locks.c:171

0x4019b971: _vfiprintf_r at /builds/idf/crosstool-NG/.build/xtensa-esp32-elf/src/newlib/newlib/libc/stdio/vfprintf.c:853 (discriminator 2)

0x40193fe1: fiprintf at /builds/idf/crosstool-NG/.build/xtensa-esp32-elf/src/newlib/newlib/libc/stdio/fiprintf.c:48

0x40193f69: __assert_func at /builds/idf/crosstool-NG/.build/xtensa-esp32-elf/src/newlib/newlib/libc/stdlib/assert.c:58 (discriminator 8)

0x4009abb5: vPortCPUAcquireMutexIntsDisabledInternal at /home/jonhunterking/esp/esp-idf/components/freertos/portmux_impl.inc.h:105
 (inlined by) vPortCPUAcquireMutexIntsDisabled at /home/jonhunterking/esp/esp-idf/components/freertos/portmux_impl.h:100
 (inlined by) vTaskEnterCritical at /home/jonhunterking/esp/esp-idf/components/freertos/tasks.c:4200

0x400d8b1c: periph_module_enable at /home/jonhunterking/esp/esp-idf/components/driver/periph_ctrl.c:33 (discriminator 2)

0x400df376: esp_phy_rf_init at /home/jonhunterking/esp/esp-idf/components/esp_wifi/src/phy_init.c:163

0x400df469: esp_modem_sleep_exit at /home/jonhunterking/esp/esp-idf/components/esp_wifi/src/phy_init.c:324

0x400e142b: btdm_sleep_exit_phase3_wrapper at /home/jonhunterking/esp/esp-idf/components/bt/controller/bt.c:873

0x4011af96: btdm_controller_task at ??:?

0x40099745: vPortTaskWrapper at /home/jonhunterking/esp/esp-idf/components/freertos/port.c:143
```

