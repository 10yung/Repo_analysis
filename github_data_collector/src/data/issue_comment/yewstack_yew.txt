**Problem**
Hi, I am new to web-assembly in Rust, and maybe this is a wasm question, but I tried to test Yew, and wrote an update function for a model using Arc<Mutex<T>>  variable, and tried to start a background process using std::thread. - Now i know this is not the way things work, but the point: the compiler compiled the code without any warning, and I found the bug opening the browser console.

I tried the std::thread::sleep, but turned out I cannot use thread at all. But why the compiler let me do this stupid thing?

***Question***

Do you know any solution to set the compiler right and let me do just wasm allowed/approved things?

Are there any other restrictions that the compiler allows, but will cause crash?

I used cargo web start --auto-reload, and cargo web build commands.

Thank you in advance.

***BTW***

Yew is awesome, just love it. Congrat for the whole team!
<!-- Thanks for filing a yew issue! We appreciate it :-) -->

#### Description
Integrating `web-sys` support has allowed `yew` to depend on `gloo` for ergonomic web APIs. However at the time of writing, `gloo` hasn't implemented the [proposed api for files](https://github.com/rustwasm/gloo/blob/master/rfcs/001-mid-level-file-api.md)

#### Proposed Solution
We should consider upstreaming `ReaderService` changes from https://github.com/yewstack/yew/pull/868 to the `gloo` project
**Problem**
The `Task` interface has a method called `cancel` which is intended to allow devs to cancel long running tasks. However, this API is easy to misuse accidentally. For example, our examples encourage risky usage [here](https://github.com/yewstack/yew/blob/master/examples/dashboard/src/lib.rs#L170) and [here](https://github.com/yewstack/yew/blob/master/examples/timer/src/lib.rs#L80). These are risky because the task should first be check using `is_active()` before canceling.

Related to https://github.com/yewstack/yew/issues/371
<!-- A clear and concise description of what the bug is. -->

**Proposed behavior**
We should rely on `Drop` to cancel the task and remove the `cancel` method from the `Task` interface.
@jstarry This turned out to be a little trickier than I thought. I've verified that exposing the macros allows people to write their own extensions, but I couldn't really come up with any examples that weren't from real-life, so I just refer to the source filenames, which I think is a bad cop-out.

If you'd like, I can pull in the actual source from json.rs into macros.rs and rework it so it's an actual compiling documentation example. Replicated code feels bad to me though, although perhaps as an example it wouldn't be horrible if it got out of phase with the actual implementation of json.rs. I definitely didn't want to include the code I'm using to get the more compact representation for CBOR. However, I thought that mentioning the form of the macro that I used to get what I wanted might be useful, although I'm not a good judge.

So, I fully expect to do more work on this PR, but with a little additional guidance. However, I'm in no rush to get it merged.
Fix #775

Similar to #879 , but default values are specified by paths to functions, instead of expressions:

```rust
#[derive(Clone, Properties)]
struct MyProps {
    #[props(default = "default_value")]
    value: u32,
    #[props(default = "always_true")]
    enabled: bool
}

fn default_value() -> u32 {
  100
}

fn always_true() -> bool {
  true
}
```

<details>

<summary><s>But there is a minor problem: </s> Fixed.</summary>

If the function has incompatible type:

```rust
#[derive(Clone, Properties)]
pub struct Props {
    // ERROR: the function returns incompatible types
    #[props(default = "foo")]
    value: String,
}

fn foo() -> i32 {
    100
}
```

It might produce an error message with a misleading "help":

```plaintext
error[E0308]: mismatched types
   --> $DIR/fail.rs:112:27
    |
112 |         #[props(default = "foo")]
    |                           ^^^^^
    |                           |
    |                           expected struct `std::string::String`, found i32
    |                           help: try using a conversion method: `"foo".to_string()`
    |
    = note: expected type `std::string::String`
               found type `i32`
```

I don't know how to fix this.

The expression version (#879 ) has a similar problem.

</details>

@mdtusz @jstarry @hgzimmerman

Fix #775

We will be able to provide default values to properties, using a syntax like:

```rust
#[derive(Properties)]
struct MyProps {
    #[props(default = "50 + 50")]
    value: u32,
    #[props(default = "true")]
    enabled: bool
}
```

The syntax is based on @mdtusz's suggestion, but it takes an expression instead of a path to a function. 
This work-in-progress PR represents an attempt to statically convert a VNode into an HTML string, for the purposes of SSR support (#41). Please note that I'm not sure this will be the approach I end up going with, as it may turn out infeasible with nodes such as VComp (currently investigating alternative approaches now); it should be considered an experiment.
**Problem**
I'm getting the following warning when switching between different routes using yew_router.  I have 5 different components that I switch between when route changes using `Router::render`. One of the components has a table with 100 rows, this warning returns ~100 times when I switch off that route.  Whereas one route is just an index page with static text, and it returns the warning 4 times when switched off that route.

```
WARN:yew::agent -- The Id of the handler: 0, while present in the slab, is not associated with a callback.
```

**Steps To Reproduce**
Steps to reproduce the behavior:
1. Use yew_router
2. Use `Router::render` to render different components, ex: below

There is nothing special about these components. `IndexPage` for example just renders static text in a `<p>` tag, yet still produces the above warning 4 times when route changes and different component is then rendered.

```rust
html! {
	<Router<AppRoute, ()>
		render = Router::render(move |switch: AppRoute| {
			match switch {
				AppRoute::Index => html!{<IndexPage />},
				AppRoute::Songs => html! {<SongsPage />},
				AppRoute::Artist(id) => html!{<ArtistPage artist_id=id />},
				AppRoute::Artists => html!{<ArtistsPage />},
				AppRoute::Queue => html!{<QueuePage />},
				AppRoute::NotFound(Permissive(None)) => html!{"Page not found"},
				AppRoute::NotFound(Permissive(Some(missed_route))) => html!{format!("Page '{}' not found", missed_route)},
				_ => html!{"Page not found"},
			}
		})
		redirect = Router::redirect(|route: Route| {
			AppRoute::NotFound(Permissive(Some(route.route)))
		})
	/>
}
```

**Environment:**
 - Yew version `v0.11`
 - Yew-router version `v0.8.1`
 - Rust version `1.40.0`
 - Target `wasm32-unknown-unknown`
 - `stdweb` version
 - OS: linux
 - Browser: firefox
 - Browser version 72.0.1

**Questionnaire**
<!-- Developing Yew is a community effort! -->
<!-- If you feel up to the challenge, please check one of the boxes below: -->
- [x] I'm interested in fixing this myself but don't know where to start
- [ ] I would like to fix and I have a solution
- [ ] I don't have time to fix this right now, but maybe later

Split from #827.

Cc #558, #827, #841, #862, #867.
Split from #827.

Cc #558, #827, #841, #862, #868.