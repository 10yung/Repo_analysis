I sometimes want to preemptively add a directory and the entire directory structure starting from it. This has to be done manually, one layer at a time; for example, `fasd -A */*/*` will add all things three layers deep, but not two layers or four. A `**` indicating all files beneath it (i.e. now the `*` matches `/` as well as all other characters) would be helpful and probably would not conflict with anything else.
Currently different linux based distro uses the different package manager. Snapcraft has brought the abstraction over it. I found it very suitable while playing with multiple linux distro. So, this is small addition to this from me.

Now, it is available on [snapcraft store](https://snapcraft.io/fasd) under beta channel. Though it is published under my name. I'm fine with moving it under snapcrafter or @clvv for maintaining it.

Signed-off-by: Swapnil Mhamane <swapnilgmhamane@gmail.com>
Manually editing `~/.fasd` is tedious and deleting it to rebuild it once in a while is not great either. However `~/.fasd` accumulates invalid paths as files and directories get deleted, renamed, or moved around.

@clvv mentioned [here](https://github.com/clvv/fasd/issues/14) that he is not keen on implementing such functionality, but I think that it would be a great addition to fasd.

One downside, as mentioned by @clvv, is that paths to unplugged external devices will be purged. But I feel that it is up to people to be careful about this and not run the purge functionality when the devices are not plugged, or stay clear of that functionality altogether, or accept to lose the data base for the unplugged external devices. This downside does not, in my opinion, justify the much larger downside of not having the functionality.

[autojump](https://github.com/wting/autojump) as a `--purge` flag which does exactly this (with the same downside for unplugged external drives) and it is a great thing to have.

This repository does not seem to be maintained at the moment, but if it becomes active again in the future (as I hope it will as this is a really great project!!), maybe this is something to think about.

Thanks!
I am using `zsh` (version: 5.7.1, framework: oh-my-zsh) on both macOS and Arch Linux, and have `eval $(fasd --init auto)` in my `.zshrc`. I've defined a global alias: `alias -g F='| fzf'`, but it won't work properly. (I cannot conveniently do something like `ls F` but have to do `ls | fzf` when there is `eval $(fasd --init auto)`.)

First I thought it has something to do with letter `F` or `f`, and tested it with other letters, e.g `alias -g Y='| fzf'` or `alias -g U=' | fzf'`(with a space before the pipeline), but still the same problem.

Why is this happening? And how can I avoid it? Thanks!

Edit: other zsh global aliases like `alias -g L='| less'` works fine in the same environment.

```
$ fasd --version                                                                                                 1
1.0.1
$ zsh -f
Fereidoons-MacBook-Pro% eval "$(fasd --init auto)"
Fereidoons-MacBook-Pro% sssj() a=evil
Fereidoons-MacBook-Pro% typeset -p a
typeset a=evil
Fereidoons-MacBook-Pro% a=good ; typeset -p a
typeset a=good
Fereidoons-MacBook-Pro% typeset -p a
typeset a=evil
Fereidoons-MacBook-Pro%
```


This fix tries to address #139, for now for bash shell only.
> [liquidprompt](https://github.com/nojhan/liquidprompt)

One of the features that I love about liquidprompt is that if any command ends with an error, then the prompt displays the error code (error code of the last command gets added to the next prompt). 

I've been using fasd and liquidprompt together for a while now, and I recently noticed that the above mentioned feature in liquidprompt is broken by fasd. 

Any suggestions on how I could fix this (I'll be happy to code, test and send you a PR) or how I could get a work around for this issue. 

More context on [this issue that I created in the liquidprompt project](https://github.com/nojhan/liquidprompt/issues/568)

Sorry to post what might be a newb question here, but wondering how I might install this on Amazon Linux, which uses `yum`.

I am being forced to use Amazon Linux as a dev environment, and can't quite find the right repository to load and install.
When executing `z somedir` and somedir doesn't exist or the directory otherwise isn't changed to, the return value from `fasd_cd` should be an error, but we get `0`. This makes it difficult to use in scripts, as well as also making it harder to use because you need to double check that your directory change worked each time.
The synopsis section of the manpage has:

`fasd [-A|-D] [paths ...]`

Later, under Compatibility, the `-A` option is described:

> ` In shells  without  prompt  command  or prompt  command  substitution  (tcsh for instance), you can add entries manually with "fasd -A"`

However, the `-D` option isn't described at all. Presumably, it removes entries?