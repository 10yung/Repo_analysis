Solved #722 
Resolves #750

```
sources:
  - path: example.mp4
    resourceTags: ["example", "movie"]
```

If the file exists directly under `Foo` and `Foo` is specified in the sources, need to use excluded.

```
sources:
  - path: Foo
    excludes:
      - "example.mp4"
  - path: Foo/example.mp4
    resourceTags: ["example", "movie"]
```
Is there way to setting on-demand-resource tags?

<img width="251" alt="2020-01-06 18 59 24" src="https://user-images.githubusercontent.com/40229310/71810923-d4c3bc00-30b6-11ea-95e1-2567bda3becc.png">

Hey! I seem to have ran into a bug with the SwiftPM package integration for static libraries. When a static library depends on an SDK (e.g. Foundation, UIKit, â€¦) all SwiftPM packages will also be linked into it. Adding other types of dependencies doesnâ€™t seem to have any impact. It seems like itâ€™s only when a static library depends on both a SwiftPM package and an SDK that the issue occurs.

In my case it caused just over 3000 duplicate symbol errors. As both my app and static library target linked with Alamofire from SwiftPM ðŸ˜…

I was able to reproduce with latest master. See an example sing this small modification of the SPM test fixture:

```yaml
name: SPM
packages:
  Codability:
    url: https://github.com/yonaskolb/Codability
    majorVersion: 0.2.1
localPackages:
 - ../../.. #XcodeGen itself
targets:
  App:
    type: application
    platform: iOS
    sources: [SPM]
    scheme: {}
    dependencies:
      - package: Codability
      - target: StaticLibrary
  StaticLibrary:
    type: library.static
    platform: iOS
    sources: StaticLibrary
    dependencies:
      - package: Codability
      - sdk: UIKit.framework # <- the addition
```

## Screenshot
![Screenshot of Xcode with the incorrect linkage of the SwiftPM package](https://user-images.githubusercontent.com/23453/71688412-ce0f0f00-2d6d-11ea-9d01-c08f9ec42876.png)
I have a use case where I want my unit test targets to not set their `TEST_HOST` automatically to a product target that is a dependency to the test target and, if possible, set it to "None".

Would it be a good idea to maybe creating an optional spec configuration to set the `TEST_HOST` manually to a specific target/none if present and bypass the automatic one?
https://github.com/yonaskolb/XcodeGen/blob/4339007e666f8c0e83a5b2a7eefeb91f2b17d2a3/Sources/XcodeGenKit/PBXProjGenerator.swift#L938
(Xcodegen version 2.10.1)

Hey!

I'm trying to migrate our iOS project that uses Xcodegen, to start using a SwiftPM library we use internally. As part of doing this, I am specifying, in my `project.yml`, the SwiftPM dependency to use.
However, in trying to attempt this, I run into the following problem that is fundamentally at odds with Xcodegen:
1. From [this article](https://developer.apple.com/documentation/xcode/adding_package_dependencies_to_your_app?language=objc) I understand that the `Package.resolved` file--used for making sure all developers are using the same version of packages is stored in the `.xcodeproj` directory. Here's the relevant quote:
> You can find the Package.resolved file inside your .xcodeproj directory at [appName].xcodeproj/project.workspace/xcshareddata/swiftpm/Package.resolved

2. However, the premise of using Xcodegen is that the repository is able to discard the `.xcodeproj` folder and related artefacts. So the `Package.resolved` file can also not be checked in.
3. How then do developers of a repository get deterministically same versions of their dependencies? I may be missing something here.
I've been able to use XcodeGen to create a today extension, but when I create another target with app-extension.intents-service, the info-plist fails to generate and the extension is not recognized as an intents extension. Here is what my target looks like, and i've embedded this into the container app as follows:
```
targets:
  ExtensionIntents:
    type: app-extension.intents-service
    deploymentTarget: 11.0
    platform: iOS
    templates:
      - ExtensionIntentsTemplate
    settings:
      base:
        PRODUCT_BUNDLE_IDENTIFIER: co.project.Intents
        INFOPLIST_FILE: Info/Extensions/ExtensionIntentsInfo.plist
    sources:
      - path: Intents
Main App:

MainApp:
  [...]
  dependencies:
      - target: IntentsExtension
         embed: true
        codeSign: false
        buildPhase:
          copyFiles:
            destination: plugins
```
And yes, an info.plist does exist at that path. When I create the intents target manually through xcode, everything looks good, but for my use case this extension needs to be regenerated every time.
## Motivation
I want to sort files sort by type as we can with Xcode.

## Description
I added code to sort by type before sorting by name.
We should consider adding as optional. Do you have any ideas?
Using the current [TestProject](https://github.com/yonaskolb/XcodeGen/tree/master/Tests/Fixtures/TestProject) I am unable to install and run the watchOS app scheme.

The error message is: "Could not install at this time. No WatchKit 1.0 app bundle found for app com.project.app.watch.extension".

XCode - Version 11.2.1 (11B500)
Latest version of XcodeGen
moved from https://github.com/yonaskolb/XcodeGen/pull/682

## Implementation status

- [x] Write Project to a yaml file
- [ ] Generate Project from XcodeProj
  - roughly done
  - some project settings are not treated yet
- [ ] Remove default values from yaml
- [ ] Change to proper command names and CLI improvements
- [ ] Fix to find C header files appropriate way

About the last item. As far as I know, C header files are not added to the build phase on the application target, so we have to find them from the group. Currently I am adding all header files in the group as sources, but if the group doesn't match the target it will cause problems.