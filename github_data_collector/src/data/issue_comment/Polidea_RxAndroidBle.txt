## Steps

1. Start listening connection states:
```kotlin
.flatMapObservable { rxBleDevice -> rxBleDevice.observeConnectionStateChanges() }
.observeOn(scheduler)
.doOnSubscribe { SLog.d(TAG, "[listenConnection] subscribed(%s)", address) }
.doOnNext { SLog.v(TAG, "[listenConnection] next(%s): %s", address, it) }
.doOnDispose { SLog.v(TAG, "[listenConnection] disposed(%s)", address) }
.doFinally { SLog.v(TAG, "[listenConnection] finished(%s)", address) }
```

2. Get connected to `ble device`
3. Turn off `ble device`
4. Get disconnected (`RxBleConnectionState.DISCONNECTED`)
5. Schedule reconnection in 2 seconds
6. Repeat from stage 4.

## Actual result
After `N` attempts of reconnections `observeConnectionStateChanges()` emits nothing.

## Expected result
After `N` attempts of reconnections `observeConnectionStateChanges()` still emits `RxBleConnectionState` events.

### Investigation:
My `Disposable` from the stage **1** is still alive because I didn't see such a message in the `Logcat`:
```kotlin 
SLog.v(TAG, "[listenConnection] disposed(%s)", address)
``` 
Finally, I've figured out that starting at some connection retry the `subscribers` array inside `BehaviorRelay` is empty.

#### Screenshots:
- `BehaviorRelay` has subscribers:
![Screen Shot 2020-01-10 at 4 33 24 PM](https://user-images.githubusercontent.com/1286516/72156588-fbd80180-33c6-11ea-92de-cf873cd1584b.png)

- `BehaviorRelay` has **NO** subscribers:
![Screen Shot 2020-01-10 at 4 33 06 PM](https://user-images.githubusercontent.com/1286516/72156662-245ffb80-33c7-11ea-933a-f3859a60c218.png)

## Logs:
```
2020-01-10 12:07:03.515 4088-4198/ru.starlinex.lib.testapp W/SleManager: (sle-1-t-1:3203) [scheduleReconnect] address: CA:5F:21:15:CB:74
2020-01-10 12:07:05.519 4088-4198/ru.starlinex.lib.testapp I/SleManager: (sle-1-t-1:3203) [scheduleReconnect] time to connect: CA:5F:21:15:CB:74
2020-01-10 12:07:05.541 4088-4201/ru.starlinex.lib.testapp D/RxBle#ClientOperationQueue: (RxBleThread-1:3206) QUEUED   ConnectOperation(267538281)
2020-01-10 12:07:05.543 4088-4193/ru.starlinex.lib.testapp D/RxBle#ClientOperationQueue: (Thread-6:3201) STARTED  ConnectOperation(267538281)
2020-01-10 12:07:05.545 4088-4193/ru.starlinex.lib.testapp I/RxBle#ClientOperationQueue: (Thread-6:3201) RUNNING  ConnectOperation{MAC='CA:5F:21:15:CB:74', autoConnect=false}
2020-01-10 12:07:05.549 4088-4202/ru.starlinex.lib.testapp V/RxBle#BleConnectionCompat: (pool-1-thread-1:3207) Connecting without reflection
2020-01-10 12:07:05.549 4088-4198/ru.starlinex.lib.testapp V/SleManager: (sle-1-t-1:3203) [listenConnection] next(CA:5F:21:15:CB:74): RxBleConnectionState{CONNECTING}
2020-01-10 12:07:05.551 4088-4202/ru.starlinex.lib.testapp D/BluetoothAdapter: STATE_ON
2020-01-10 12:07:05.555 4088-4202/ru.starlinex.lib.testapp D/BluetoothGatt: connect() - device: CA:5F:21:15:CB:74, auto: false
2020-01-10 12:07:05.555 4088-4202/ru.starlinex.lib.testapp D/BluetoothAdapter: isSecureModeEnabled
2020-01-10 12:07:05.557 4088-4202/ru.starlinex.lib.testapp D/BluetoothGatt: registerApp()
2020-01-10 12:07:05.557 4088-4202/ru.starlinex.lib.testapp D/BluetoothGatt: registerApp() - UUID=5a585778-6475-4751-8e43-8a5a8c644b34
2020-01-10 12:07:05.563 4088-4112/ru.starlinex.lib.testapp D/BluetoothGatt: onClientRegistered() - status=0 clientIf=10
2020-01-10 12:07:10.591 4088-4112/ru.starlinex.lib.testapp D/BluetoothGatt: onClientConnectionState() - status=133 clientIf=10 device=CA:5F:21:15:CB:74
2020-01-10 12:07:10.601 4088-4112/ru.starlinex.lib.testapp I/RxBle#GattCallback: (Binder:4088_2:3192) MAC='CA:5F:21:15:CB:74'  onConnectionStateChange(), status=133, value=0
2020-01-10 12:07:10.606 4088-4112/ru.starlinex.lib.testapp D/RxBle#ConnectionOperationQueue: (Binder:4088_2:3192) Connection operations queue to be terminated (MAC='CA:5F:21:15:CB:74')
    com.polidea.rxandroidble2.exceptions.BleDisconnectedException: Disconnected from MAC='CA:5F:21:15:CB:74' with status 133 (GATT_ERROR)
        at com.polidea.rxandroidble2.internal.connection.RxBleGattCallback$2.onConnectionStateChange(RxBleGattCallback.java:81)
        at android.bluetooth.BluetoothGatt$1$4.run(BluetoothGatt.java:313)
        at android.bluetooth.BluetoothGatt.runOrQueueCallback(BluetoothGatt.java:876)
        at android.bluetooth.BluetoothGatt.access$200(BluetoothGatt.java:43)
        at android.bluetooth.BluetoothGatt$1.onClientConnectionState(BluetoothGatt.java:308)
        at android.bluetooth.IBluetoothGattCallback$Stub.onTransact(IBluetoothGattCallback.java:71)
        at android.os.Binder.execTransact(Binder.java:739)
2020-01-10 12:07:10.608 4088-4200/ru.starlinex.lib.testapp V/RxBle#Executors: (pool-3-thread-1:3205) Terminated (MAC='CA:5F:21:15:CB:74')
2020-01-10 12:07:10.612 4088-4112/ru.starlinex.lib.testapp D/RxBle#ClientOperationQueue: (Binder:4088_2:3192) QUEUED   DisconnectOperation(99379484)
2020-01-10 12:07:10.616 4088-4193/ru.starlinex.lib.testapp D/RxBle#ClientOperationQueue: (Thread-6:3201) FINISHED ConnectOperation(267538281) in 5072 ms
2020-01-10 12:07:10.617 4088-4193/ru.starlinex.lib.testapp D/RxBle#ClientOperationQueue: (Thread-6:3201) STARTED  DisconnectOperation(99379484)
2020-01-10 12:07:10.620 4088-4193/ru.starlinex.lib.testapp I/RxBle#ClientOperationQueue: (Thread-6:3201) RUNNING  DisconnectOperation{MAC='CA:5F:21:15:CB:74'}
2020-01-10 12:07:10.622 4088-4202/ru.starlinex.lib.testapp D/BluetoothManager: getConnectionState()
2020-01-10 12:07:10.622 4088-4202/ru.starlinex.lib.testapp D/BluetoothManager: getConnectedDevices
2020-01-10 12:07:10.623 4088-4198/ru.starlinex.lib.testapp V/SleManager: (sle-1-t-1:3203) [listenConnection] next(CA:5F:21:15:CB:74): RxBleConnectionState{DISCONNECTING}
2020-01-10 12:07:10.629 4088-4202/ru.starlinex.lib.testapp D/BluetoothGatt: close()
2020-01-10 12:07:10.640 4088-4202/ru.starlinex.lib.testapp D/BluetoothGatt: unregisterApp() - mClientIf=10
2020-01-10 12:07:10.646 4088-4198/ru.starlinex.lib.testapp V/SleManager: (sle-1-t-1:3203) [listenConnection] next(CA:5F:21:15:CB:74): RxBleConnectionState{DISCONNECTED}
2020-01-10 12:07:10.647 4088-4193/ru.starlinex.lib.testapp D/RxBle#ClientOperationQueue: (Thread-6:3201) FINISHED DisconnectOperation(99379484) in 28 ms



2020-01-10 12:07:10.648 4088-4198/ru.starlinex.lib.testapp W/SleManager: (sle-1-t-1:3203) [scheduleReconnect] address: CA:5F:21:15:CB:74
2020-01-10 12:07:12.651 4088-4198/ru.starlinex.lib.testapp I/SleManager: (sle-1-t-1:3203) [scheduleReconnect] time to connect: CA:5F:21:15:CB:74
2020-01-10 12:07:12.686 4088-4201/ru.starlinex.lib.testapp D/RxBle#ClientOperationQueue: (RxBleThread-1:3206) QUEUED   ConnectOperation(53183137)
2020-01-10 12:07:12.688 4088-4193/ru.starlinex.lib.testapp D/RxBle#ClientOperationQueue: (Thread-6:3201) STARTED  ConnectOperation(53183137)
2020-01-10 12:07:12.691 4088-4193/ru.starlinex.lib.testapp I/RxBle#ClientOperationQueue: (Thread-6:3201) RUNNING  ConnectOperation{MAC='CA:5F:21:15:CB:74', autoConnect=false}
2020-01-10 12:07:12.696 4088-4202/ru.starlinex.lib.testapp V/RxBle#BleConnectionCompat: (pool-1-thread-1:3207) Connecting without reflection
2020-01-10 12:07:12.698 4088-4198/ru.starlinex.lib.testapp V/SleManager: (sle-1-t-1:3203) [listenConnection] next(CA:5F:21:15:CB:74): RxBleConnectionState{CONNECTING}
2020-01-10 12:07:12.700 4088-4202/ru.starlinex.lib.testapp D/BluetoothAdapter: STATE_ON
2020-01-10 12:07:12.704 4088-4202/ru.starlinex.lib.testapp D/BluetoothGatt: connect() - device: CA:5F:21:15:CB:74, auto: false
2020-01-10 12:07:12.704 4088-4202/ru.starlinex.lib.testapp D/BluetoothAdapter: isSecureModeEnabled
2020-01-10 12:07:12.707 4088-4202/ru.starlinex.lib.testapp D/BluetoothGatt: registerApp()
2020-01-10 12:07:12.707 4088-4202/ru.starlinex.lib.testapp D/BluetoothGatt: registerApp() - UUID=6c03c2eb-82a5-4892-bae4-c27771faebd1
2020-01-10 12:07:12.712 4088-4112/ru.starlinex.lib.testapp D/BluetoothGatt: onClientRegistered() - status=0 clientIf=10
2020-01-10 12:07:17.741 4088-4112/ru.starlinex.lib.testapp D/BluetoothGatt: onClientConnectionState() - status=133 clientIf=10 device=CA:5F:21:15:CB:74
2020-01-10 12:07:17.751 4088-4112/ru.starlinex.lib.testapp I/RxBle#GattCallback: (Binder:4088_2:3192) MAC='CA:5F:21:15:CB:74'  onConnectionStateChange(), status=133, value=0
2020-01-10 12:07:17.756 4088-4112/ru.starlinex.lib.testapp D/RxBle#ConnectionOperationQueue: (Binder:4088_2:3192) Connection operations queue to be terminated (MAC='CA:5F:21:15:CB:74')
    com.polidea.rxandroidble2.exceptions.BleDisconnectedException: Disconnected from MAC='CA:5F:21:15:CB:74' with status 133 (GATT_ERROR)
        at com.polidea.rxandroidble2.internal.connection.RxBleGattCallback$2.onConnectionStateChange(RxBleGattCallback.java:81)
        at android.bluetooth.BluetoothGatt$1$4.run(BluetoothGatt.java:313)
        at android.bluetooth.BluetoothGatt.runOrQueueCallback(BluetoothGatt.java:876)
        at android.bluetooth.BluetoothGatt.access$200(BluetoothGatt.java:43)
        at android.bluetooth.BluetoothGatt$1.onClientConnectionState(BluetoothGatt.java:308)
        at android.bluetooth.IBluetoothGattCallback$Stub.onTransact(IBluetoothGattCallback.java:71)
        at android.os.Binder.execTransact(Binder.java:739)
2020-01-10 12:07:17.758 4088-4200/ru.starlinex.lib.testapp V/RxBle#Executors: (pool-3-thread-1:3205) Terminated (MAC='CA:5F:21:15:CB:74')
2020-01-10 12:07:17.761 4088-4112/ru.starlinex.lib.testapp D/RxBle#ClientOperationQueue: (Binder:4088_2:3192) QUEUED   DisconnectOperation(22200244)
2020-01-10 12:07:17.765 4088-4193/ru.starlinex.lib.testapp D/RxBle#ClientOperationQueue: (Thread-6:3201) FINISHED ConnectOperation(53183137) in 5076 ms
2020-01-10 12:07:17.767 4088-4193/ru.starlinex.lib.testapp D/RxBle#ClientOperationQueue: (Thread-6:3201) STARTED  DisconnectOperation(22200244)
2020-01-10 12:07:17.768 4088-4193/ru.starlinex.lib.testapp I/RxBle#ClientOperationQueue: (Thread-6:3201) RUNNING  DisconnectOperation{MAC='CA:5F:21:15:CB:74'}
2020-01-10 12:07:17.769 4088-4202/ru.starlinex.lib.testapp D/BluetoothManager: getConnectionState()
2020-01-10 12:07:17.769 4088-4202/ru.starlinex.lib.testapp D/BluetoothManager: getConnectedDevices
2020-01-10 12:07:17.772 4088-4198/ru.starlinex.lib.testapp V/SleManager: (sle-1-t-1:3203) [listenConnection] next(CA:5F:21:15:CB:74): RxBleConnectionState{DISCONNECTING}
2020-01-10 12:07:17.775 4088-4202/ru.starlinex.lib.testapp D/BluetoothGatt: close()
2020-01-10 12:07:17.782 4088-4202/ru.starlinex.lib.testapp D/BluetoothGatt: unregisterApp() - mClientIf=10
2020-01-10 12:07:17.788 4088-4198/ru.starlinex.lib.testapp V/SleManager: (sle-1-t-1:3203) [listenConnection] next(CA:5F:21:15:CB:74): RxBleConnectionState{DISCONNECTED}
2020-01-10 12:07:17.788 4088-4193/ru.starlinex.lib.testapp D/RxBle#ClientOperationQueue: (Thread-6:3201) FINISHED DisconnectOperation(22200244) in 21 ms


2020-01-10 12:07:17.789 4088-4198/ru.starlinex.lib.testapp W/SleManager: (sle-1-t-1:3203) [scheduleReconnect] address: CA:5F:21:15:CB:74
2020-01-10 12:07:19.793 4088-4198/ru.starlinex.lib.testapp I/SleManager: (sle-1-t-1:3203) [scheduleReconnect] time to connect: CA:5F:21:15:CB:74
2020-01-10 12:07:19.827 4088-4201/ru.starlinex.lib.testapp D/RxBle#ClientOperationQueue: (RxBleThread-1:3206) QUEUED   ConnectOperation(8447193)
2020-01-10 12:07:19.829 4088-4193/ru.starlinex.lib.testapp D/RxBle#ClientOperationQueue: (Thread-6:3201) STARTED  ConnectOperation(8447193)
2020-01-10 12:07:19.831 4088-4193/ru.starlinex.lib.testapp I/RxBle#ClientOperationQueue: (Thread-6:3201) RUNNING  ConnectOperation{MAC='CA:5F:21:15:CB:74', autoConnect=false}
2020-01-10 12:07:19.837 4088-4198/ru.starlinex.lib.testapp V/SleManager: (sle-1-t-1:3203) [listenConnection] next(CA:5F:21:15:CB:74): RxBleConnectionState{CONNECTING}
2020-01-10 12:07:19.837 4088-4202/ru.starlinex.lib.testapp V/RxBle#BleConnectionCompat: (pool-1-thread-1:3207) Connecting without reflection
2020-01-10 12:07:19.841 4088-4202/ru.starlinex.lib.testapp D/BluetoothAdapter: STATE_ON
2020-01-10 12:07:19.845 4088-4202/ru.starlinex.lib.testapp D/BluetoothGatt: connect() - device: CA:5F:21:15:CB:74, auto: false
2020-01-10 12:07:19.846 4088-4202/ru.starlinex.lib.testapp D/BluetoothAdapter: isSecureModeEnabled
2020-01-10 12:07:19.846 4088-4202/ru.starlinex.lib.testapp D/BluetoothGatt: registerApp()
2020-01-10 12:07:19.847 4088-4202/ru.starlinex.lib.testapp D/BluetoothGatt: registerApp() - UUID=20d03657-39b6-4ab4-8183-4a62284a9b14
2020-01-10 12:07:19.853 4088-4112/ru.starlinex.lib.testapp D/BluetoothGatt: onClientRegistered() - status=0 clientIf=10
2020-01-10 12:07:24.879 4088-4112/ru.starlinex.lib.testapp D/BluetoothGatt: onClientConnectionState() - status=133 clientIf=10 device=CA:5F:21:15:CB:74
2020-01-10 12:07:24.887 4088-4112/ru.starlinex.lib.testapp I/RxBle#GattCallback: (Binder:4088_2:3192) MAC='CA:5F:21:15:CB:74'  onConnectionStateChange(), status=133, value=0
2020-01-10 12:07:24.895 4088-4112/ru.starlinex.lib.testapp D/RxBle#ConnectionOperationQueue: (Binder:4088_2:3192) Connection operations queue to be terminated (MAC='CA:5F:21:15:CB:74')
    com.polidea.rxandroidble2.exceptions.BleDisconnectedException: Disconnected from MAC='CA:5F:21:15:CB:74' with status 133 (GATT_ERROR)
        at com.polidea.rxandroidble2.internal.connection.RxBleGattCallback$2.onConnectionStateChange(RxBleGattCallback.java:81)
        at android.bluetooth.BluetoothGatt$1$4.run(BluetoothGatt.java:313)
        at android.bluetooth.BluetoothGatt.runOrQueueCallback(BluetoothGatt.java:876)
        at android.bluetooth.BluetoothGatt.access$200(BluetoothGatt.java:43)
        at android.bluetooth.BluetoothGatt$1.onClientConnectionState(BluetoothGatt.java:308)
        at android.bluetooth.IBluetoothGattCallback$Stub.onTransact(IBluetoothGattCallback.java:71)
        at android.os.Binder.execTransact(Binder.java:739)
2020-01-10 12:07:24.897 4088-4200/ru.starlinex.lib.testapp V/RxBle#Executors: (pool-3-thread-1:3205) Terminated (MAC='CA:5F:21:15:CB:74')
2020-01-10 12:07:24.898 4088-4112/ru.starlinex.lib.testapp D/RxBle#ClientOperationQueue: (Binder:4088_2:3192) QUEUED   DisconnectOperation(136991052)
2020-01-10 12:07:24.902 4088-4193/ru.starlinex.lib.testapp D/RxBle#ClientOperationQueue: (Thread-6:3201) FINISHED ConnectOperation(8447193) in 5073 ms
2020-01-10 12:07:24.903 4088-4193/ru.starlinex.lib.testapp D/RxBle#ClientOperationQueue: (Thread-6:3201) STARTED  DisconnectOperation(136991052)
2020-01-10 12:07:24.904 4088-4193/ru.starlinex.lib.testapp I/RxBle#ClientOperationQueue: (Thread-6:3201) RUNNING  DisconnectOperation{MAC='CA:5F:21:15:CB:74'}
2020-01-10 12:07:24.906 4088-4202/ru.starlinex.lib.testapp D/BluetoothManager: getConnectionState()
2020-01-10 12:07:24.906 4088-4202/ru.starlinex.lib.testapp D/BluetoothManager: getConnectedDevices
2020-01-10 12:07:24.907 4088-4198/ru.starlinex.lib.testapp V/SleManager: (sle-1-t-1:3203) [listenConnection] next(CA:5F:21:15:CB:74): RxBleConnectionState{DISCONNECTING}
2020-01-10 12:07:24.914 4088-4202/ru.starlinex.lib.testapp D/BluetoothGatt: close()
2020-01-10 12:07:24.923 4088-4202/ru.starlinex.lib.testapp D/BluetoothGatt: unregisterApp() - mClientIf=10
2020-01-10 12:07:24.931 4088-4198/ru.starlinex.lib.testapp V/SleManager: (sle-1-t-1:3203) [listenConnection] next(CA:5F:21:15:CB:74): RxBleConnectionState{DISCONNECTED}
2020-01-10 12:07:24.931 4088-4193/ru.starlinex.lib.testapp D/RxBle#ClientOperationQueue: (Thread-6:3201) FINISHED DisconnectOperation(136991052) in 27 ms


2020-01-10 12:07:24.933 4088-4198/ru.starlinex.lib.testapp W/SleManager: (sle-1-t-1:3203) [scheduleReconnect] address: CA:5F:21:15:CB:74
2020-01-10 12:07:26.936 4088-4198/ru.starlinex.lib.testapp I/SleManager: (sle-1-t-1:3203) [scheduleReconnect] time to connect: CA:5F:21:15:CB:74
2020-01-10 12:07:26.973 4088-4201/ru.starlinex.lib.testapp D/RxBle#ClientOperationQueue: (RxBleThread-1:3206) QUEUED   ConnectOperation(191452689)
2020-01-10 12:07:26.975 4088-4193/ru.starlinex.lib.testapp D/RxBle#ClientOperationQueue: (Thread-6:3201) STARTED  ConnectOperation(191452689)
2020-01-10 12:07:26.982 4088-4193/ru.starlinex.lib.testapp I/RxBle#ClientOperationQueue: (Thread-6:3201) RUNNING  ConnectOperation{MAC='CA:5F:21:15:CB:74', autoConnect=false}
2020-01-10 12:07:26.988 4088-4202/ru.starlinex.lib.testapp V/RxBle#BleConnectionCompat: (pool-1-thread-1:3207) Connecting without reflection
2020-01-10 12:07:26.990 4088-4202/ru.starlinex.lib.testapp D/BluetoothAdapter: STATE_ON
2020-01-10 12:07:26.994 4088-4202/ru.starlinex.lib.testapp D/BluetoothGatt: connect() - device: CA:5F:21:15:CB:74, auto: false
2020-01-10 12:07:26.995 4088-4202/ru.starlinex.lib.testapp D/BluetoothAdapter: isSecureModeEnabled
2020-01-10 12:07:26.996 4088-4202/ru.starlinex.lib.testapp D/BluetoothGatt: registerApp()
2020-01-10 12:07:26.996 4088-4202/ru.starlinex.lib.testapp D/BluetoothGatt: registerApp() - UUID=dbbf89c4-c2b2-4926-b07c-236250b8e46e
2020-01-10 12:07:27.003 4088-4112/ru.starlinex.lib.testapp D/BluetoothGatt: onClientRegistered() - status=0 clientIf=10
2020-01-10 12:07:32.032 4088-4112/ru.starlinex.lib.testapp D/BluetoothGatt: onClientConnectionState() - status=133 clientIf=10 device=CA:5F:21:15:CB:74
2020-01-10 12:07:32.040 4088-4112/ru.starlinex.lib.testapp I/RxBle#GattCallback: (Binder:4088_2:3192) MAC='CA:5F:21:15:CB:74'  onConnectionStateChange(), status=133, value=0
2020-01-10 12:07:32.045 4088-4112/ru.starlinex.lib.testapp D/RxBle#ConnectionOperationQueue: (Binder:4088_2:3192) Connection operations queue to be terminated (MAC='CA:5F:21:15:CB:74')
    com.polidea.rxandroidble2.exceptions.BleDisconnectedException: Disconnected from MAC='CA:5F:21:15:CB:74' with status 133 (GATT_ERROR)
        at com.polidea.rxandroidble2.internal.connection.RxBleGattCallback$2.onConnectionStateChange(RxBleGattCallback.java:81)
        at android.bluetooth.BluetoothGatt$1$4.run(BluetoothGatt.java:313)
        at android.bluetooth.BluetoothGatt.runOrQueueCallback(BluetoothGatt.java:876)
        at android.bluetooth.BluetoothGatt.access$200(BluetoothGatt.java:43)
        at android.bluetooth.BluetoothGatt$1.onClientConnectionState(BluetoothGatt.java:308)
        at android.bluetooth.IBluetoothGattCallback$Stub.onTransact(IBluetoothGattCallback.java:71)
        at android.os.Binder.execTransact(Binder.java:739)
2020-01-10 12:07:32.047 4088-4200/ru.starlinex.lib.testapp V/RxBle#Executors: (pool-3-thread-1:3205) Terminated (MAC='CA:5F:21:15:CB:74')
2020-01-10 12:07:32.051 4088-4112/ru.starlinex.lib.testapp D/RxBle#ClientOperationQueue: (Binder:4088_2:3192) QUEUED   DisconnectOperation(167738852)
2020-01-10 12:07:32.054 4088-4193/ru.starlinex.lib.testapp D/RxBle#ClientOperationQueue: (Thread-6:3201) FINISHED ConnectOperation(191452689) in 5080 ms
2020-01-10 12:07:32.056 4088-4193/ru.starlinex.lib.testapp D/RxBle#ClientOperationQueue: (Thread-6:3201) STARTED  DisconnectOperation(167738852)
2020-01-10 12:07:32.057 4088-4193/ru.starlinex.lib.testapp I/RxBle#ClientOperationQueue: (Thread-6:3201) RUNNING  DisconnectOperation{MAC='CA:5F:21:15:CB:74'}
2020-01-10 12:07:32.058 4088-4202/ru.starlinex.lib.testapp D/BluetoothManager: getConnectionState()
2020-01-10 12:07:32.058 4088-4202/ru.starlinex.lib.testapp D/BluetoothManager: getConnectedDevices
2020-01-10 12:07:32.063 4088-4202/ru.starlinex.lib.testapp D/BluetoothGatt: close()
2020-01-10 12:07:32.070 4088-4202/ru.starlinex.lib.testapp D/BluetoothGatt: unregisterApp() - mClientIf=10
2020-01-10 12:07:32.079 4088-4193/ru.starlinex.lib.testapp D/RxBle#ClientOperationQueue: (Thread-6:3201) FINISHED DisconnectOperation(167738852) in 21 ms
```
Hey,

Android 10 introduced problems with connecting to multiple BLE devices for me. Linked topics may be related:
https://stackoverflow.com/questions/58299507/android-10-ble-connection-issue
https://issuetracker.google.com/issues/141188862

I managed to find solution by forcing this config on connection:
```
bluetoothDevice.connectGatt(
                context,
                false, // auto connect set to false
                connectCallback,
                BluetoothDevice.TRANSPORT_AUTO,
                BluetoothDevice.PHY_LE_CODED
            )
```
But RxAndroidBle don't exposes possibility to set `transport` and `phy`. Have you considered exposing those settings?
### Summary
It seems that setting
`ScanFitler.Builder().setManufacturerData(/* int manufacturerId */ 0x0123, /* byte[] manufacturerData */ null)` will not pass any advertisements with the specified `manufacturerId`.
More fitting solution would be to pass all advertisements with this id no matter the data.

### Library version
`1.10.3` (not a library issue)

#### Preconditions
Have a peripheral advertising data with `manufacturerId = 0x0123`

#### Steps to reproduce actual result
<br />1. Set `ScanFitler.Builder().setManufacturerData(/* int manufacturerId */ 0x0123, /* byte[] manufacturerData */ null)`
<br />2. Scan peripheral that advertises `manufacturerId = 0x0123`
<br />3. Observe results

#### Actual result
No `ScanResult` is emitted

#### Expected result
A `ScanResult` with the given `manufacturerId` is emitted

#### Minimum code snippet reproducing the issue
```
        val scanSettings = ScanSettings.Builder()
            .setScanMode(ScanSettings.SCAN_MODE_LOW_LATENCY)
            .setCallbackType(ScanSettings.CALLBACK_TYPE_ALL_MATCHES)
            .build()

        val manuId = 0xBEEF
        val scanFilter = ScanFilter.Builder()
            .setManufacturerData(manuId, null)
            .build()

        return rxBleClient.scanBleDevices(scanSettings, scanFilter)
```

#### Logs from the application running with settings:
```java
RxBleClient.updateLogOptions(new LogOptions.Builder()
        .setLogLevel(LogConstants.DEBUG)
        .setMacAddressLogSetting(LogConstants.MAC_ADDRESS_FULL)
        .setUuidsLogSetting(LogConstants.UUIDS_FULL)
        .setShouldLogAttributeValues(true)
        .build()
);
```

```
// no logs as Android OS does not match anything
```

When I update my `rxandroidble-parent` project in Android Studio to v. 1.10.2, I get these "cannot resolve symbol" errors in the file `RxBleGattCallback.java`: `bleshadow` (lines 26 & 27), `Inject` (line 59), and `Named` (line 60). 

Everything else compiles OK. 
# Summary

Currently, `ScanSettings`'s `matchMode`, `reportDelayinMillis` and `mNumOfMatchesPerFilter` are all commented out (see [here](https://github.com/Polidea/RxAndroidBle/blob/c3ae0bf3a0949da3397afed6e4ad7584409ac72b/rxandroidble/src/main/java/com/polidea/rxandroidble2/scan/ScanSettings.java#L290)). This is a quite annoying oversight that has not been fixed for the past two years, and doesn't even require that much of a change.

However the hindered functionality is quite high priority in quite a few cases, and makes timed updates impossible to create (e.g. if one wants low latency scan results, but batched so every update is delivered at a 2 second interval).

### Library version
`1.10.1`

#### Preconditions

None, the code bits are intentionally commented out

#### Steps to reproduce actual result
<br />1. Add RxAndroidBle to project
<br />2. Try to create a ScanSettings instance with report delay
<br />3. The call is not present on `ScanSettings.Builder`

#### Actual result

The calls are not present on `ScanSettings.Builder`

#### Expected result

The calls should be available

#### Solution

Uncomment the three mentioned `ScanSettings.Builder` methods

Regarding the MacAddressLogSetting enums, could we get a version that truncates or blanks the first 3 octets (Organizationally unique identifier) instead?

Something like this:

    /**
     * Truncated MAC address will be logged i.e. 'XX:XX:XX:44:55:66'
     */
    public static final int MAC_ADDRESS_OUI_REMOVED = DEBUG;

Our devices all start with the same first 3 octets that are a BT SIG assigned constant, only the last three octets are necessary to uniquely identify a device. Ideally I would just like to see the 3 octets in logs...
### Summary
Android's `android.bluetooth.le.ScanRecord#parseFromBytes` has changed between versions. `com.polidea.rxandroidble2.internal.util.UUIDUtil#parseFromBytes` function is not up-to-date with the implementation. This causes inconsistencies.

Additionally Android's native implementations also differ when wrapped by the library

### Library version
`1.10.0`

### Preconditions
Scan a peripheral that advertises data not parsable by Android <8.0 i.e. Service Data with UUIDs longer than 16 bits

#### Steps to reproduce actual result
<br />1. Take a phone that uses Android 4.3<x<8.0 and Android >=8.0
<br />2. Run BLE scan using the new API
<br />3. Observe inconsistencies in `ScanResult#getServiceData` if the service UUID is longer than 16 bits

#### Actual result
Inconsistencies. On Android <8.0 the `ScanResult#getServiceData()` can return an empty map where on Android 8.0 it will contain entries

#### Expected result
On all Android system versions `ScanResult#getServiceData()` should return the same non-empty data
Ble allows "reliable writes' as a series of writes that are treated atomically so they are all garaunteed to succeed or fail together. It would be helpful to be able to take advantage of that functionality through RxBle
Hello! First of all, thanks for the amazing library.

I am using it in one of my projects and I came across this [situation I've mentioned in a Stackoverflow question](https://stackoverflow.com/questions/53398556/rxandroidble-change-operation-timeout-after-establishing-connection). To sum up, **what I want to achieve is to change the operation timeout after the connection is already established.**  

However, after taking a look at different commits made in the past to address the issues #118 and #321 ,  I've also come up with the idea that, instead of being able to change the timeout for the whole connection after being established, it would be even better to have an extra method for writing/reading characteristics that accepts a `timeout` parameter for that specific operation. Then, if it is not provided, will use the one that was set while establishing the connection or the default 30s.

PD: I would love to be able to help adding this functionality by myself and make a PR, but I am not confident enough with my programming skills. I feel I could do it in this version of the code #118, but I got lost after the changes made in #321 .

Just an idea, maybe it is not possible to do.
Cheers,
Diego.

### Summary
Rapid connect/disconnect sequence fails to properly disconnect from BLE device.

When creating subscription to RxBleDevice.establishConnection() and cancelling it prior to connection being established, the physical BLE device remains in connected state (verified through JLink debugger output). This only happens when unsubscribe is called prior to fully establishing connection. If delay is inserted between subscribe/unsubscribe calls, then connect and disconnect sequence works properly.

### Library version
implementation "com.polidea.rxandroidble:rxandroidble:1.6.0"

#### Preconditions
 - Unsubscribe has to be called prior to connection being established.

#### Steps to reproduce actual result
1. Create subscription to rxbledevice.establishConnection()
2. Wait 0.2s
3. Call subscription.unsubscribe()
4. On Android: app log shows connection and disconnect operations completing successfully.
5. On BLE Device: JLink debugger output shows that device is still connected.

#### Minimum code snippet reproducing the issue

#### Logs from the application running with setting `RxBleLog.setLogLevel(RxBleLog.VERBOSE)`
```
09-18 12:48:54.670 17038-17173/com.livindi.resident I/RxBle#CancellableSubscription: Scan operation is requested to stop.
09-18 12:48:54.673 17038-17173/com.livindi.resident D/BluetoothAdapter: isLeEnabled(): ON
    
    --------- beginning of system
09-18 12:48:54.702 17038-17096/com.livindi.resident D/RxBle#ClientOperationQueue: QUEUED   ScanOperationApi21(185464561)
09-18 12:48:54.703 17038-17092/com.livindi.resident D/RxBle#ClientOperationQueue: STARTED  ScanOperationApi21(185464561)
09-18 12:48:54.704 17038-17173/com.livindi.resident I/RxBle#QueueOperation: Scan operation is requested to start.
09-18 12:48:54.706 17038-17173/com.livindi.resident D/BluetoothAdapter: isLeEnabled(): ON
09-18 12:48:54.709 17038-17051/com.livindi.resident D/BluetoothLeScanner: onScannerRegistered() - status=0 scannerId=7 mScannerId=0
09-18 12:48:54.715 17038-17092/com.livindi.resident D/RxBle#ClientOperationQueue: FINISHED ScanOperationApi21(185464561) in 12 ms
09-18 12:48:54.733 17038-17173/com.livindi.resident I/RxBle#CancellableSubscription: Scan operation is requested to stop.
09-18 12:48:54.734 17038-17173/com.livindi.resident D/BluetoothAdapter: isLeEnabled(): ON
09-18 12:48:54.885 17038-17197/com.livindi.resident D/RxBle#ClientOperationQueue: QUEUED   ConnectOperation(237633332)
09-18 12:48:54.885 17038-17092/com.livindi.resident D/RxBle#ClientOperationQueue: STARTED  ConnectOperation(237633332)
09-18 12:48:54.888 17038-17173/com.livindi.resident V/RxBle#BleConnectionCompat: Connecting without reflection
09-18 12:48:54.889 17038-17173/com.livindi.resident D/BluetoothGatt: connect() - device: DC:C5:05:C6:9E:0E, auto: false
    registerApp()
    registerApp() - UUID=bf9c3cc7-0ee0-4e7d-8221-6ec65bab636e
09-18 12:48:54.891 17038-17051/com.livindi.resident D/BluetoothGatt: onClientRegistered() - status=0 clientIf=7
09-18 12:48:55.555 17038-17095/com.livindi.resident D/RxBle#ClientOperationQueue: QUEUED   ScanOperationApi21(167195673)
09-18 12:48:55.911 17038-17197/com.livindi.resident D/RxBle#ClientOperationQueue: QUEUED   DisconnectOperation(217206097)
09-18 12:48:55.912 17038-17197/com.livindi.resident I/RxBle#ConnectionOperationQueue: Connection operations queue to be terminated (DC:C5:05:C6:9E:0E)
09-18 12:48:55.913 17038-17196/com.livindi.resident D/RxBle#Executors$RunnableAdapter: Terminated.
09-18 12:48:55.915 17038-17092/com.livindi.resident D/RxBle#ClientOperationQueue: FINISHED ConnectOperation(237633332) in 1029 ms
09-18 12:48:55.916 17038-17092/com.livindi.resident D/RxBle#ClientOperationQueue: STARTED  ScanOperationApi21(167195673)
09-18 12:48:55.918 17038-17173/com.livindi.resident I/RxBle#QueueOperation: Scan operation is requested to start.
09-18 12:48:55.920 17038-17173/com.livindi.resident D/BluetoothAdapter: isLeEnabled(): ON
09-18 12:48:55.925 17038-17051/com.livindi.resident D/BluetoothLeScanner: onScannerRegistered() - status=0 scannerId=8 mScannerId=0
09-18 12:48:55.930 17038-17092/com.livindi.resident D/RxBle#ClientOperationQueue: FINISHED ScanOperationApi21(167195673) in 14 ms
09-18 12:48:55.932 17038-17092/com.livindi.resident D/RxBle#ClientOperationQueue: STARTED  DisconnectOperation(217206097)
09-18 12:48:55.933 17038-17173/com.livindi.resident D/BluetoothManager: getConnectionState()
    getConnectedDevices
09-18 12:48:55.939 17038-17173/com.livindi.resident D/BluetoothGatt: close()
    unregisterApp() - mClientIf=7
09-18 12:48:55.941 17038-17092/com.livindi.resident D/RxBle#ClientOperationQueue: FINISHED DisconnectOperation(217206097) in 10 ms
```
#### Actual result
BLE Device indicates it is still in connected state and never receives DISCONNECTED event.
INFO [main] on_ble_evt: CONNECTED 

#### Expected result
BLE Device receives DISCONNECTED event
INFO [ble] on_ble_evt: DISCONNECTED. Reason: 0x13 

#### [Edit @dariuszseweryn] Notes:
Related bug on Google's Issue Tracker: https://issuetracker.google.com/issues/37121223
