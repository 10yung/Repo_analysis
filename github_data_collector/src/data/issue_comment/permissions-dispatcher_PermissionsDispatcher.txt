## FAQs

<!--
Before you add the issue, please make sure to read over the following Frequently Asked Questions:

**"XxxPermissionsDispatcher class is not generated"**

- Did you add `@RuntimePermissions` to your class, and `@NeedsPermission` to your method?
- Did you try a Rebuild? (Sync is not Rebuild!)
- Don't mix `apt` and `annotationProcessor`!
- If you're in Kotlin, use `kapt`!
- If you're using Realm 1.x., please consider upgrading to 2.x (refer to Issue #270: https://github.com/hotchemi/PermissionsDispatcher/issues/270)
- If you checked all these steps, and the generated classes are still not showing up, then attach your Activity/Fragment class, and build.gradle.
-->
 
___

## Overview

- When this library is applied to Fragment and  run on Android 8.0, "System UI has stopped" is displayed.

### Expected

- Works on Android 8.0

### Actual

- Doesnâ€™t work on Android 8.0. 

## Environment

- Which library version are you using?
    - 4.5.0
- On which devices do you observe the issue?
    - Android8.0

- Note any other information that might be useful
    - The following versions will work:
        - 6.0.1
        - 7.0
        - 7.1.1
        - 8.1
        - 9.0
        - 10
    - I think you should use ActivityCompat#requestPermissions method on Fragment
        - https://github.com/permissions-dispatcher/PermissionsDispatcher/blob/master/processor/src/main/kotlin/permissions/dispatcher/processor/impl/kotlin/KotlinFragmentProcessorUnit.kt#L22
        - On Activity, you use it 
             https://github.com/permissions-dispatcher/PermissionsDispatcher/blob/master/processor/src/main/kotlin/permissions/dispatcher/processor/impl/kotlin/KotlinActivityProcessorUnit.kt#L23

## Reproducible steps
1. Ready on Android8.0 device ( What I saw was an emulator.)
2. Run the following branch.
https://github.com/kwmt/PermissionsDispatcher/tree/system-stop-on-fragment

This is a difference.
https://github.com/kwmt/PermissionsDispatcher/pull/1



## FAQs

<!--
Before you add the issue, please make sure to read over the following Frequently Asked Questions:

**"XxxPermissionsDispatcher class is not generated"**

- Did you add `@RuntimePermissions` to your class, and `@NeedsPermission` to your method?
- Did you try a Rebuild? (Sync is not Rebuild!)
- Don't mix `apt` and `annotationProcessor`!
- If you're in Kotlin, use `kapt`!
- If you're using Realm 1.x., please consider upgrading to 2.x (refer to Issue #270: https://github.com/hotchemi/PermissionsDispatcher/issues/270)
- If you checked all these steps, and the generated classes are still not showing up, then attach your Activity/Fragment class, and build.gradle.
-->
 
___

## Overview
ACCESS_BACKGROUND_LOCATION is not handled for Android API less than 29.

- Describe the issue briefly

Compile and target SDK 29
From Android Q, special permission is required for accessing location in background. This did works well for Android Q but when its less than Android Q, even though user has given `Allow` permission for location, it consider failure (deny) for ACCESS_BACKGROUND_LOCATION 

### Expected

- What is the expected behavior?

- When Android API less than 29, when user has given `Allow`  permission for location, it should consider success for ACCESS_BACKGROUND_LOCATION.

### Actual

- What is the actual behavior?

- When Android API less than 29, when user has given `Allow` permission for location, it consider failure (deny) for ACCESS_BACKGROUND_LOCATION.

## Environment

- Which library version are you using?
4.5.0
- On which devices do you observe the issue?
All which has OS less than 29.

- Note any other information that might be useful

## Reproducible steps

- While it's not required, it'd be perfect to add a link to a sample project where you encounter the issue

Please guide.

Thanking you in advance,
TankJK


https://github.com/permissions-dispatcher/PermissionsDispatcher/issues/602#issuecomment-496225878
Sometimes it is useful for apps to know when the permission dialog was actually shown. Currently it is not possible with annotations, because `@NeedsPermission` methods are also called when the permission was granted before, and the dialog is not shown - but this is expected. I am suggesting to create a new `@OnRequestPermission` (or such) annotation, which can be put on methods which are only called when we the permission dialog is actually presented to the user.

In our app the real use case is to send analytics when the permission dialog is shown.
## Overview

The library ask for permissions even if the user permanently denied it before (checked "Do not ask again"). This adds an unnecessary call, and also notifies the app about a user action which is not happening (the permission dialog is not shown actually). 

### Expected

If we detekt the user already denied the permission with never ask again, we should not call `requestPermissions()`.

### Actual

Currently we always call `requestPermissions()`, regardless the user denied it permanetly before or not.

###  Pseudo solution
```kotlin
fun WelcomeScreenFragment.welcomeButtonClickedWithPermissionCheck() {
    if (PermissionUtils.hasSelfPermissions(this.requireActivity(),
                    *PERMISSION_WELCOMEBUTTONCLICKED)) {
        welcomeButtonClicked()
    } else {
        if (PermissionUtils.shouldShowRequestPermissionRationale(this,
                        *PERMISSION_WELCOMEBUTTONCLICKED)) {
            this.requestPermissions(PERMISSION_WELCOMEBUTTONCLICKED, REQUEST_WELCOMEBUTTONCLICKED)
        }
    }
}
```