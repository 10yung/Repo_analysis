spark 20125 19562 20250 20125 19562 19437 20062 20062 20125 20187 show me :
▆▂█▆▂▁▆▆▆▇
This value are really higher from zero. Would it be possible to avoid that all values are shifted so that the minimum value is 0 ?
Data `0 1 19 20` should print ▁▁██ but prints  ▁▁▇█

The problem is the number 7 in your character index calculation.   A working formula for the index is `int( 8 * (n-min)/(max-min) )` with `n==max` special-cased to give 7.

See also https://rosettacode.org/wiki/Talk:Sparkline_in_unicode#Most_of_these_are_buggy 
a='▂▄▆█'; s=$(iwconfig wlp61s0 | sed -E-n 's/[^0-9]*=([0-9]\{1,\})\/70.*$/\1/p') ; : ${s:='-18'}; echo ${a:0:$(( ( $s / 18 ) + 1 ))}

call to spark is useless and code is unsightly (even for bash)

furthermore, sparks 0 1 2 3 4, and spark 1 2 3 4 0, differs from spark 1 2 3 4 

I thought this might be a useful addition at least for some people. I find that I often have numbers that benefit from log transformation, and this changeset solves that for me. 

All tests appear to be passing, and in my own testing it seems like things work well. It works with negative values as well, though results are going to be suspect.

Hopefully you'll find this useful. Thanks!
```
spark: Generates sparklines for a set of data.
  it_shows_help_with_no_argv:                      [PASS]
  it_graphs_argv_data:                             [PASS]
  it_charts_pipe_data:                             [PASS]
  it_charts_spaced_data:                           [PASS]
  it_charts_way_spaced_data:                       [PASS]
  it_handles_decimals:                             [PASS]
  it_charts_100_lt_300:                            [PASS]
  it_charts_50_lt_100:                             [PASS]
  it_charts_4_lt_8:                                [PASS]
  it_charts_no_tier_0:                             [PASS]
  it_equalizes_at_midtier_on_same_data:            [PASS]
=========================================================
Tests:   11 | Passed:  11 | Failed:   0
```
Does it assume certain terminal or shell?
Here's how the code shows when I open it using `less`:
```bash
     16 # Examples:
     17 #
     18 #   spark 1 5 22 13 53
     19 #   # => <E2><96><81><E2><96><81><E2><96><83><E2><96><82><E2><96><87>

> ./spark 1 5 22
âââ
```
I'm using Putty (default options) and bash.
This small patch interprets 'x' in the input as an unknown value, showing '×' in the output:

```
$ echo 1 4 2 x 6 10 | ./spark 
▁▃▁×▄█
$
```
Inspiration and Attribution:

Shout out to Alexandre Pretto Nunes (https://github.com/apretto)!  Alexandre's PR (https://github.com/holman/spark/pull/88/commits/206a69d8d076cfaa4114eb6f9fc30e90445a3442) with the "fire" palette was the inspiration behind these features.  Much thanks!

Additional shout out to user79743 for the ansi color table code from:  http://unix.stackexchange.com/questions/269077/tput-setaf-color-table-how-to-determine-color-codes

Thank you both kindly!

Description:

I use sparkline every day.  Usually to provide quick and dirty graphs for spot checking peaks/valleys in data returned from various tools' apis (splunk, tealeaf, etc).
Many of these tools can also return thresholds with the data and I often find that min/max must be checked in order to understand the scale of the peaks vs. valleys.
Additionally, I like ansi colors in general - bash is life.

This commit provides a middle class (eat the rich) feature set to compel spark's output to be more pleasant on the eyes and potentially speed up analysis of data from the shell.

Features: Graph Name/Title, Threshold, Threshold Color, Threshold Inversion, Ansi Color Table, and Color Palettes

Feature Details:

Graph Name/Title (-n "<graph_name>"): Optional graph header with customizable title and min/max value.
-- usage example:  ./spark -n "The Graph Title" <data>

Color Palette (-p <color_palette|ansi_csv): Multiple pre-existing palettes to add color to each tick.  Palettes can also be specified as an 8 element comma-seperated list of ansi integer color codes (to be passed to tput).
- Built-in color palettes: fire, ice, earth, smoke, pride, lolcat
-- usage example:  ./spark -p ice <data>
- Customizable color palette: Comma-separated 8 element list ansi color codes (0-255)
-- usage example:  ./spark -p 212,213,214,215,216,217,218,219 <data>

Threshold Value (-t <threshold_value>): All values greater than or equal (or less than or equal with the inversion switch - see below) to the threshold value will result in ticks of the specified threshold color (see below).

Threshold Color (-c <color|ansi_integer>): Apply color to all ticks for values exceeding threshold.  This will override any colors specified in the color palette.  As with the color palette option, the threshold color option supports ansi integer color codes.
-- usage example:  ./spark -c red -t 5 <data>
-- usage example:  ./spark -c 1 -t 5 <data>

Threshold Inversion (-i): Invert the threshold logic from "greater than or equal" to "less than or equal".
-- usage example:  ./spark -c red -t 5 -i

Ansi Color Table (-a): Output a table of ansi colors for ease of color lookups.
-- usage example:  ./spark -a
when feeding spark with numbers that have leading zeroes bash will eventually report an error when encountering numbers with 8 and 9 (e.g. 08, 09 etc) because bash automatically considers zero-leaded numbers as octals.

possible solution: strip leading zeroes. i have modified the spark() function in my testing spark fork:

```
    n=${n%%.*}
    # These 3 lines strip leading zeroes and fix error parsing octal-like numbers (008 etc) / tivasyk
    shopt -s extglob
    n=${n##+(0)}
    shopt -u extglob
    # Fix empty n if it was 0
    if [[ $n -eq "" ]]; then
      n=0
    fi
```
it works, sorry for lame code.

**p.s.** great script! love it absolutely. i had to add scaling option (e.g. spark -s 100 <data>) to do things like cpu load gauges for conky etc. to be able to represent percentage data (0..100) in a meaningfull way.

I love this little script!

See [bpkg](https://github.com/bpkg/bpkg) for more information.

We also built something more generic for drawing in the terminal. Check out [term](https://github.com/bpkg/term)
