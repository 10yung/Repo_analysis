Ruby: 2.4
Rails 4.2
Everything working perfactly even response is also correct but didn't get the notification

```
#<Rpush::Client::ActiveRecord::Apns::Notification id: 13823, badge: nil, device_token: "xyz...", sound: "default", alert: "New care request has been created by dipak client.", data: "test", expiry: 86400, delivered: true, delivered_at: "2020-01-15 13:27:12", failed: false, failed_at: nil, error_code: nil, error_description: nil, deliver_after: nil, created_at: "2020-01-15 13:27:11", updated_at: "2020-01-15 13:27:11", alert_is_json: false, type: "Rpush::Client::ActiveRecord::Apns::Notification", collapse_key: nil, delay_while_idle: false, registration_ids: nil, app_id: 13, retries: 0, uri: nil, fail_after: nil, processing: false, priority: nil, url_args: nil, category: nil, content_available: false, notification: nil>
```

Please help me for this where I can debug 

**Describe the bug**

* Some notifications incorrectly marked as invalid due to payload size.
* APNS v1 imposes a validation payload size limit of 2kb. On APNS2, the payload limit increases to 4kb.
* When using APNS2, Rpush is validating the notification payload size based on APNS v1 size limits (2kb), rather than APNS v2 size limits (4kb).

**To Reproduce**

Steps to reproduce the behavior:
1. Create an APNS2 notification, where the `record.payload.bytesize` is greater than 2kb, but less than 4kb.
1. The notification is not sent, because it has the [following validation error](https://github.com/rpush/rpush/blob/5405439a83b87cd9e28999795bdfb8bf71c90c51/lib/rpush/client/active_model/apns/binary_notification_validator.rb#L6-L10): "APN notification cannot be larger than 2048 bytes. Try condensing your alert and device attributes."

**Expected behavior**

The notification payload should be valid, because APNS2 imposes a notification payload size of 4kb.

**Actual Behavior**

The notification payload is marked as invalid, because the `record.payload.bytesize` is greater than 2kb (even though APNS2 has a size limit of 4kb).

**Logs and other output**

N/A

**System configuration (please complete the following information):**

 - OS: macOS 
 - OS version: 10.14.6
 - Ruby version: ruby-2.5.0
 - Rails version: Rails 5.1.6.2
 - Rpush version: Rpush 3.0.2

**Additional context**

* Here's a [Link to Apple's docs](https://developer.apple.com/library/archive/documentation/NetworkingInternet/Conceptual/RemoteNotificationsPG/CreatingtheNotificationPayload.html) describing the payload sizes for APNS v1 and v2.

This section of the docs *might* be relevant to the issue I'm encountering:

> If you are using the legacy APNs binary interface to send notifications instead of an HTTP/2 request, the maximum payload size is 2KB (2048 bytes)

* Is it possible that I'm using the legacy APNs binary, and that's why the 2kb limit is being imposed? In that case, this may not be an Rpush bug at all, and I'd be curious how to change my Rpush config to stop using the legacy binary interface.

**Workarounds (and potential solutions)**

* I've patched my `config/initializers/rpush.rb`, to override [the `MAX_BYTES` constant](https://github.com/rpush/rpush/blob/5405439a83b87cd9e28999795bdfb8bf71c90c51/lib/rpush/client/active_model/apns/binary_notification_validator.rb#L6) so it's 4kb:
`Rpush::Client::ActiveModel::Apns::BinaryNotificationValidator::MAX_BYTES = 4.kilobytes` (obviously, I'd prefer not overriding a constant, especially one set in a gem).
* Locally, I've tested replacing [this line](https://github.com/rpush/rpush/blob/master/lib/rpush/client/active_model/apns/notification.rb#L18) with  `validates_with Rpush::Client::ActiveModel::PayloadDataSizeValidator, limit: 4096`. This change *does* seem to resolve the issue. If a PR along these lines would be appropriate, please let me know.
I've experienced an effect  where the notification is received by the user ~15 minutes after the `delivered_at` attribute would suggest. This seems to only happen when a lot of notification records are created at once, and effects the notifications later in the queue.

After looking in the Rpush docs, it seemed like the bottleneck would be the [APNs timeout](https://github.com/rpush/rpush/wiki/Why-open-multiple-connections-to-the-APNs%3F). I had previously set `App.connections = 1`. I've now set it to `8` in case this is the issue.

My problem is this: after looking into the Rpush source code, it looks like `delivered_at` it set  after receiving the `ok` response from APNs. This implies `delivered_at` should always be correct, regardless of the timeout between requests.

 Is there another reason why there could be such a delay in sending the notification after `delivered_at` is set? I have gotten this complaint from a number of users, so it seems unlikely to be a user connection issue.

```
rpush: 4.1.0
rails: 5.2.3
ruby: 2.5.1
```
**Describe the bug**
Following instructions for using Redis, but while I can create a Rpush::Apnsp8::App, I cannot subsequently call Rpush::Apnsp8::App.find_by_name(...) per the README

**To Reproduce**
Run rails console and call Rpush::Apnsp8::App.find_by_name('test') and receive the following error:

```
2.6.5 :013 > Rpush::Apnsp8::App.find_by_name('test')
Traceback (most recent call last):
        1: from (irb):13
NoMethodError (undefined method `find_by_name' for Rpush::Client::Redis::Apnsp8::App:Class)
Did you mean?  find_all
```

**Expected behavior**
Expect `find_by_name` to work just like before using ActiveRecord.

**Logs and other output**
N/A

**System configuration (please complete the following information):**
 - OS: macOS
 - OS version: 10.14.6
 - Ruby version: 2.6.5
 - Rails version: 5.2.2.1
 - Rpush version: 4.1.1

**Additional context**
Add any other context about the problem here.

**Describe the bug**
Seeing the following in several environments -- DEV, INTEGRATION, PROD -- with otherwise successful deliveries but occasionally the following errors and related "rpush_notifications" records show "delivered = false, failed = false":

```
[2019-11-07 03:46:56] [ERROR] Errno::ECONNRESET, Connection reset by peer
/usr/local/lib/ruby/2.6.0/openssl/buffering.rb:182:in `sysread_nonblock'
/usr/local/lib/ruby/2.6.0/openssl/buffering.rb:182:in `read_nonblock'
/usr/local/bundle/gems/net-http2-0.18.2/lib/net-http2/client.rb:141:in `block in socket_loop'
/usr/local/bundle/gems/net-http2-0.18.2/lib/net-http2/client.rb:138:in `loop'
/usr/local/bundle/gems/net-http2-0.18.2/lib/net-http2/client.rb:138:in `socket_loop'
/usr/local/bundle/gems/net-http2-0.18.2/lib/net-http2/client.rb:110:in `block (2 levels) in ensure_open'
```

**To Reproduce**
Not sure, it's intermittent.

**Expected behavior**
Not sure, either finally marking the record as "failed" or "delivered".

**Logs and other output**
See above.

**System configuration (please complete the following information):**
 - OS: ubuntu
 - OS version: 16.04.6 LTS
 - Ruby version: 2.6.3
 - Rails version: 5.2.2.1
 - Rpush version: 4.1.1

**Additional context**
Using APNS P8 and FCM -- only problems w/ APNS P8...

Fixed https://github.com/rpush/rpush/issues/529

Changes
- Updated rspec version
I tried this a few times, but even updating from 3.4.0 to 3.5.0 fails for me and I have no idea why. Maybe I was just unlucky and now it will just work. :)

https://github.com/rpush/rpush/pull/429
https://github.com/rpush/rpush/pull/482
- bump .ruby_version to 2.6.4
- fix simplecov deprecation warning
- use shared examples to share tests between spec/unit/client/active_record and spec/unit/client/redis 
- fix two bugs in redis client classes
- use skipped tests to highlight two potential bugs in redis client classes
Hello, I am working on implementing this gem to send our push notifications but I am running into an issue when trying to get info from rpush running as a daemon.

The config has a comment saying that info can be retrieved by using this method:
`Rpush::Daemon::AppRunner.runners.each do |app_id, runner|`
    `    runner.app`
    `    runner.queue_size`
`end`

but this returns an error stating 
`NoMethodError (undefined method `runners' for `Rpush::Daemon::AppRunner:Class)`

I was wondering what the current method for retrieving this information is.
