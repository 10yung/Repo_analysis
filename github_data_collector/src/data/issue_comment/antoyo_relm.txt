the `window` field of `Win` has the same name as the variable used in the initialization, therefore it doesn't need to specify the field explicitly. Just like the `model` field on the line above
Hello! I'm finding TreeViews a bit unintuitive to use with `#[widget]`.

1. In issue #50 you gave some example code for connecting a child's signals which sounds great, but the branch was deleted. Is this still a goal, or is it already possible? I couldn't see any examples or obvious implementation.

2. In issue #181 and in the async example the solution for using `connect!` on a TreeSelection is to store a clone of the relm object in the model to use later on, but it doesn't feel nice - maybe `init_view` could be given a `&Relm<T>` or the relm's stream?

3. Is setting up CellRenderers and TreeViewColumns declaratively a future goal or is it a bad approach?


Thanks :).
Hi! Thank you for your hard work on this project. I'd love to help with making it more approachable for outsiders. Where I'd like to see changes first, is in the initial documentation explaining the framework(why it exists, how it makes things good, etc.) and comments in the examples.

The website https://eugenkiss.github.io/7guis/ is great when making a GUI framework. At the very least, the 7 examples in there would be great to have. At the very most, writing some documentation in regards to the current dimensions of evaluation, would be very helpful for people choosing a GUI framework, and provide a solid foundation for people wanting to contribute(explaining how and what relm does, and why, makes it easy to consider contributing or finding another project).

On a side note, I'd like to note how I'm unsure if everything done with relm can be done with the `view!` macro. I've tried to make a tree-view and couldn't figure how to initialize the model with the view! macro. My point being that some explanation of what the `view!` macro actually is and what it inhibits would be great. Personally, I like the 'standard' method more, as it's easier to modulate the structure and handle the components/widgets.
I have this code based on the widget-list example, except it uses a ListBox and a custom HeaderBar.
```Rust
pub struct CounterModel {
    counter: i32,
}

#[derive(Msg)]
pub enum CounterMsg {
    Decrement,
    Increment,
}

#[widget]
impl Widget for Counter {
    fn model() -> CounterModel {
        CounterModel { counter: 0 }
    }

    fn update(&mut self, event: CounterMsg) {
        match event {
            Decrement => self.model.counter -= 1,
            Increment => self.model.counter += 1,
        }
    }

    view! {
        gtk::ListBoxRow{
                gtk::Box {
                orientation: Horizontal,
                gtk::Button {
                    label: "+",
                    name: "inc_button",
                    clicked => Increment,
                },
                gtk::Label {
                    label: "0",
                    name: "label",
                    text: &self.model.counter.to_string(),
                },
                gtk::Button {
                    label: "-",
                    clicked => Decrement,
                },
                gtk::Button {
                    label: "Remove",
                    //Remove this widget from the ListBox and destroy it
                    clicked => unimplemented!(),
                }
            },
        },
    }
}

#[derive(Msg)]
pub enum Msg {
    Add,
    Quit,
    Remove,
}

pub struct Model {
    counters: Vec<Component<Counter>>,
}

#[widget]
impl Widget for Win {
    fn model() -> Model {
        Model { counters: vec![] }
    }

    fn init_view(&mut self) {
        self.window.set_titlebar(&self.titlebar);
    }

    fn update(&mut self, event: Msg) {
        match event {
            Add => {
                let widget = self.lbox.add_widget::<Counter>(());
                self.model.counters.push(widget);
            }
            Quit => gtk::main_quit(),
            Remove => {
                if let Some(counter) = self.model.counters.pop() {
                    self.lbox.remove_widget(counter);
                }
            }
        }
    }

    view! {
        #[name="window"]
        gtk::Window {
            gtk::ScrolledWindow{
                propagate_natural_height: true,
                min_content_height: 400,
                min_content_width: 200,
                #[name="lbox"]
                gtk::ListBox {
                    selection_mode: gtk::SelectionMode::None,
                    activate_on_single_click: true,
                    //Increment the counter that was activated
                    row_activated(_,_) => !unimplemented!(),
                },
            },            
            #[name="titlebar"]
            gtk::HeaderBar{
                title: "Title",
                show_close_button: true,
                #[name="add_button"]
                gtk::Button {
                    label: "Add",
                    clicked => Add,
                },
                #[name="remove_button"]
                gtk::Button {
                    label: "Remove",
                    clicked => Remove,
                },
            },
            delete_event(_, _) => (Quit, Inhibit(false)),
        }
    }
}

fn main() {
    Win::run(()).expect("Win::run failed");
}
```


I want to make activating (clicking on) a row of the`ListBox` send a message to the `ListBoxRow` that was activated and increment its `Counter`.


I also want to add a new button to the `Counter` named `Remove`. I want clicking on this button to send a message to `ListBox` to remove this specific counter.

There are examples and tests that show how to achieve similar effect with a fixed amount of children but none that explain how to do it with a dynamically changing children located in a `Vec` in the `Model`.
Let's say I have this view
```rust
view! {
  gtk::Window {
    
  }
}
```
And i want to append a GTK object based on what it's in my model, how would i do it? I'd like to do something similar to this.
```rust
view! {
  gtk::Window {
    model.active_box
  }
}
```
where model.active_box is of type gtk::Box that gets swapped at runtime

or something like
```rust
view! {
  gtk::Window {
    match model.active_box {
        This -> gtk::Box {}
        That -> gtk::Box {}
    }
  }
}
```
where model.active_box is an enum.
Coming from Elm, this would feels like the natural way to do things in declerative style. 

Fix #127.
Hey @antoyo, thanks for this library! Do you think it would make sense to add an example showing how to create a `gtk::Dialog` using the `view!` macro?

In particular, I'm wondering how to replicate the `Dialog::new_with_buttons` function. I think the default constructor is kind of deprecated.
https://github.com/antoyo/relm/blob/7e1baa6a62b2db5917720a1d871ade6d21486ad0/examples/widget-list.rs#L113

It is very hard to understand how examples work.
You use `widget` attribute in your examples, and it is very annoying. Need to understand all code generation. What is hbox in your example? How to see where it is created? What is Counter? What fields included in counter? And what type of these fields?  What is this:  #[name="remove_button"] ? 

Boilerplate code is maybe not needed in real projects, but without it it is really hard to understand your code.

**Description:**
Calling `DrawHandler<DrawingArea>::get_context()` seems to trigger an extra draw event. Using it in the event handler, as in the [drawing.rs](https://github.com/antoyo/relm/blob/541e1dcac24101abbae39cbaa46456ea12c0b985/examples/drawing.rs) example, causes a feedback loop where each draw event triggers a new one.

An example showing the issue is given below.

**Setup:**
- Use nightly Rust
- `cargo init --bin relmissue`
- Replace `main.rs` with the code given below.
- Add dependencies to Cargo.toml:
```
[dependencies]
gtk = "0.4.1"
relm = { git = "https://github.com/antoyo/relm.git", rev = "541e1dcac24101abbae39cbaa46456ea12c0b985"}
relm-attributes = { git = "https://github.com/antoyo/relm.git", rev = "541e1dcac24101abbae39cbaa46456ea12c0b985"}
relm-derive = { git = "https://github.com/antoyo/relm.git", rev = "541e1dcac24101abbae39cbaa46456ea12c0b985"}
```

**Running the example:**
- `cargo run`
_Observed behavior:_ "Updating UpdateDrawBuffer" is printed many times per second.
_Expected behavior:_ "Updating UpdateDrawBuffer" should be printed only when the widget needs to be repainted, for instance when the window is resized.

**Tweaking the example:**
- Change the constant TRIGGER_INFINITE_EVENTS to false, to disable the call to `DrawHandler<DrawingArea>::get_context()`.
- `cargo run`
_Observed and expected behavior:_ "Updating UpdateDrawBuffer" is printed only when the widget needs to be repainted, for instance when the window is resized.

**Example code (`main.rs`):**
```
#![feature(use_extern_macros)]

extern crate gtk;
#[macro_use]
extern crate relm;
extern crate relm_attributes;
#[macro_use]
extern crate relm_derive;

use std::time::SystemTime;
use gtk::{
    DrawingArea,
    Inhibit,
    WidgetExt,
};
use relm::{
    DrawHandler,
    Widget,
};
use relm_attributes::widget;
use self::Msg::*;

const TRIGGER_INFINITE_EVENTS : bool = true;

pub struct Model {
    draw_handler: DrawHandler<DrawingArea>,
}

#[derive(Msg, Debug)]
pub enum Msg {
    UpdateDrawBuffer,
}

#[widget]
impl Widget for Win {
    fn init_view(&mut self) {
        self.model.draw_handler.init(&self.drawing_area);
    }

    fn model() -> Model {
        Model {
            draw_handler: DrawHandler::new().unwrap(),
        }
    }

    fn update(&mut self, event: Msg) {
        println!("{:?} Updating {:?}", SystemTime::now(), event);
        if(TRIGGER_INFINITE_EVENTS){
            let _ = self.model.draw_handler.get_context();
        }
    }

    view! {
        gtk::Window {
            #[name="drawing_area"]
            gtk::DrawingArea {
                draw(_, _) => (UpdateDrawBuffer, Inhibit(false)),
            },
        }
    }
}

fn main() {
    Win::run(()).unwrap();
}
```
Reading the http example, I was curious about who manages the lifetime of the http component ([created here](https://github.com/antoyo/relm/blob/e8ea2c64a7e0a381c66b831b0a2e7606861be072/examples/http/src/main.rs#L132)), and it seems that the component itself is moved into the stream's callback, and kept there.

Who's supposed to drop the component when it's outlived its purpose? Even closing the returned stream does not cause the component to get dropped. I managed to drop it by replacing the stream's callback (`http.set_callback(|_| ());`). This seems very unergonomic. Am I doing it wrong? Any input is appreciated.