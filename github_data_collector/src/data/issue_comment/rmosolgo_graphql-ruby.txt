This is a WIP PR currently. There are a few checks that I put in place where there is some odd behaviour around some methods not existing.

However, the idea behind the implementation is there and I would like to make sure I am on the right track and also get some assistance in fixing these problems as I have gotten a bit stuck.

I also need to implement more tests to check to make sure inheritance is working correctly between interfaces, as well as querying for fields on hidden interfaces, rather than just the introspection query.

I have decided to go about this in a similar way to https://github.com/rmosolgo/graphql-ruby/pull/2391 which sets a `type_membership` on an interface, and any types that implement that interface can pass in some params for when it should be visible. For example:

```ruby
class PrivateMembership < GraphQL::Schema::TypeMembership
  def initialize(*args, visibility: nil, **kwargs)
    @visiblity = visibility
    super(*args, **kwargs)
  end

  def visible?(ctx)
    return true if @visibility.nil?

    @visibility[:private] && @context[:private]
  end
end

class MyInterface
  include GraphQL::Schema::Interface

  type_membership_class PrivateMembership

  field :secret_field, String, null: false
end

class MyObject < GraphQL::Schema::Object
  implements MyInterface, visibility: { private: true }

  field :public_field, String, null: false
end
```

In this case, if `context[:private]` is true, then the `secret_field` will show up when Querying for `MyObject`.
Schema.to_definition doesn't include enum using in directive.

Directory ruby file:
```ruby
class Directives::Locale < GraphQL::Schema::Directive
  class LangEnum < GraphQL::Schema::Enum
    I18n.available_locales.each do |locale|
      value locale.to_s
    end
  end
  locations GraphQL::Schema::Directive::FIELD

  argument :lang, LangEnum, required: true
  # ...
end
```

Schema.to_definition generates:
```graphql
directive @locale(lang: LangEnum!) on FIELD
```

And It should generate definition for LangEnum: 
```graphql
enum LangEnum {
  en
  ru
}
```
But it doesn't happen.

Gem version: 1.9.18. Below gem versions work fine.
Thank you for making this library!
add `GraphQL::Tracing::AppOpticsTracing` including documentation and tests


I had a mutation with an interface as the return type, but forgot to add the `implements MyInterface` declaration to any types. As a result, when I tried to call the mutation, I got back an error that there was no such field.

My bad for forgetting to add the declarations, but I wish that there would have been some kind of a warning or error instead of silently ignoring the mutation type
Fix a few issues with the previous code: 

- It only supported one chunk. (I haven't heard of this being an issue, but it _could_ be!)
- It didn't log the response with `verbose`
#2323 fixed `loads:` on nested input objects, but if your `Schema.object_from_id` function returns a lazy value, it won't be resolved by the time the mutation's `#resolve` function is called.
I hope this is no dumb question (maybe I misunderstood the use case of directives):

In my API a user can have multiple roles like admin or manager. Depending on this roles, I'm using CanCan's `accessible_by` to scope results to the users abilities.

Now the use case popped up, that I want results for a specific role, e.g. a manager. My first solution was to include an argument which I can use to create the right ability for this role

```
query {
  articles(role: "manager") { title }
}
```

The problem is, when I query multiple resources, I have to include the role argument multiple times

```
query {
  articles(role: "manager") { title }
  comments(role: "manager") { id }
}
```

My idea was to use a custom directive for this, that is defined for the whole query

```
query @ability(role: "manager") {
  articles { title }
  comments { id }
}
```

```
class Ability < Schema::Directive
  locations(GraphQL::Schema::Directive::QUERY)

  argument :role, String, required: true

  def self.resolve(object, arguments, context)
    # ...
  end
end
```

But this does not seem to work:

1. The `resolve` method is never called, only when I use `locations(GraphQL::Schema::Directive::FIELD)`
2. From the arguments of the `resolve` method I guess that it is too late to scope the result, as the objects are already loaded, am I right?
3. Is a directive the right tool for such an use case? Or are there any other ways to manipulate a context (e.g. `context.fetch(:current_ability)`) for a whole query?
We're trying to add some custom behavior to the default execution strategy. The strategy itself is working fine, except `execute` now returns a `Hash` instead of a `Query::Result` for some reason. 

**Issue**

When calling `Schema.execute` in the default ActionCable `GraphQLChannel` [from the documentation](https://graphql-ruby.org/api-doc/1.9.17/GraphQL/Subscriptions/ActionCableSubscriptions), the standard return looks like this:

```ruby
>> result
=> #<GraphQL::Query::Result @query=... @to_h={"data"=>nil}>
```

When doing the same thing after customizing the execution strategies...

```ruby
class CustomExecutionStrategy < GraphQL::Execution::Execute # or < GraphQL::Schema.default_execution_strategy
  # This is not snipped - just simply subclassing it breaks
end

class MySchema < GraphQL::Schema
  query_execution_strategy CustomExecutionStrategy
  mutation_execution_strategy CustomExecutionStrategy
  subscription_execution_strategy CustomExecutionStrategy
end
```

The result of `execute` is a hash, which breaks a bunch of things because `result.subscription?` and `result.context` no longer exist.

```ruby
>> result
=> { "data" => nil }
```

Note, just sub-classing the execution strategy without any other code causes this issue.

**Expected**

Simply subclassing the default execution strategy should not modify the return result type. 
We need some way to handle a situation like this: 

```graphql
... on Something {
  items {
    id 
  }
  things {
    # ... stuff 
  }
}
```

Where `things` can be optimized if `items` has exactly one selection, `id`. 

This can kind of be hacked, by injecting a `lookahead` into every field that returns `Something`, and passing it down with scoped_context, but that's error-prone. 