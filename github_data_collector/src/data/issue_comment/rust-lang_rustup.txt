**Problem**
On Windows, using WSL 2, `rustup doc --std` (or any other `rustup doc` command) opens firefox correctly (because I have `BROWSER=firefox.exe`), but the browser does not load a file; the browser is empty/blank.  

I found the rustup docs here:
```
~/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/share/doc/rust/html/index.html
```

I could open this manually like this:
```
firefox.exe file://///wsl$/Ubuntu/home/kobenauf/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/share/doc/rust/html/index.html
```
Or like this:
```
firefox.exe `wslpath -w ~/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/share/doc/rust/html/index.html`
```

**Possible Solution(s)**
Consider making `rustup doc` aware of how to open files on WSL so they open the docs as expected.

**Notes**

Output of `rustup --version`: 
rustup 1.21.1 (7832b2ebe 2019-12-20)

Output of `rustup show`:
Default host: x86_64-unknown-linux-gnu
rustup home:  /home/kobenauf/.rustup

installed toolchains
--------------------

stable-x86_64-unknown-linux-gnu
nightly-x86_64-unknown-linux-gnu (default)

installed targets for active toolchain
--------------------------------------

wasm32-unknown-unknown
x86_64-pc-windows-gnu
x86_64-unknown-linux-gnu

active toolchain
----------------

nightly-x86_64-unknown-linux-gnu (default)
rustc 1.42.0-nightly (689fca01c 2020-01-17)

The curl *proto* option is not necessary (since target URL is https), hence it should be dropped.
**Problem**

Rocket's Windows CI (Azure Pipelines) started failing between 27 and 4 days ago. We run this command:

```
curl -sSf -o rustup-init.exe https://win.rustup.rs
rustup-init.exe -y --default-toolchain $(rust_version)
```

And the output looks like this:
```
========================== Starting Command Output ===========================
"C:\windows\system32\cmd.exe" /D /E:ON /V:OFF /S /C "CALL "d:\a\_temp\8545808c-7a04-4daf-ad75-cd45a608d93d.cmd""
info: profile set to 'default'
info: default host triple is i686-pc-windows-msvc
error: toolchain 'stable' is not installed
error: caused by: not a directory: 'C:\Users\VssAdministrator\.rustup\toolchains\stable-i686-pc-windows-msvc'
##[error]Cmd.exe exited with code '1'.
Finishing: Install Rust (nightly)
```

In a previous successful run, this was the output:
```
========================== Starting Command Output ===========================
"C:\windows\system32\cmd.exe" /D /E:ON /V:OFF /S /C "CALL "D:\a\_temp\60e92b2b-f745-49cf-b841-7987dd621bcc.cmd""
info: profile set to 'default'
info: default host triple is x86_64-pc-windows-msvc
info: updating existing rustup installation
```

**Steps**

I have not attempted to reproduce this yet. I'll try locally first, but I would not be surprised if there's some kind of caching going on from a previous installation that will make reproduction difficult.

**Analysis**

Two things about this seem really odd to me: `i686` (maybe related to #2179?) and `stable` when the requested version was `nightly`. I don't know if it's trying to find the stable toolchain before or during a self-update, assuming it is trying to do one.

Any hints before I go and try this on bare metal?
After a successful `rustup update` (or maybe even after each successful rustup command), the `RUSTUP_HOME` directory should be in a "clean" state. 

Example of a non-"clean" state:

```
ls .rustup/downloads
0018255b94a01c42bcf6f4c3f2b2cb008d9e870811abd7b491c1a5decc7dcef8         9704de3c1ddf5711026a6e76e4a74564314a56d192f94c6e9be73f53e128bd0a
0d1e77d383480dde5cd1ef00d4edf711ea8366e28995ff5b37856a292c0efb6d         a85620550390318cef250ef36e174c4922ab83848ab2502dfb74bfaa50b5267a
14a696cd425757956f0edbcaaa887c5e4c6b8b3248c1a5a88fbad27741411ece         a998c2af9af897c8ee288683fc4ac15222bea6ded995f0933f54f921c708053b
1642bc5f123f61c9bb8e99a2600f7adf68e6c21c960b482a0dcb6382332fff3e         a9a541657ad067c823d7436ef875ff2e6b5da67fabe38b874527d0efe8b46799
25d95e34bc33065dfd5c5452f8ebf87c63b74bc73873cd0dd76f0ab709f0a3da         b5cee0b7be3803c7c194bb6a3bfe85c5857d1696c84f1408a46d74b42471f976
279e047a5f91cde4767366c446bb38e3584cb81a531003624aa90bff4e9a78ef         b74e2a2b7192429478a819f5ddc27f17bacd75fdea62e8e941fa9adb174d678d
3633caab24d17af3a2679aefad736a9a43c40a75688ff849fcfcd6b86b5098dd         c15f37fc933c09359ae5fa8d33865379a4c7f23328fee09bb5e8871edc6e6fff
3e1d35f15a7f164f4cbfdc0f9f3797f81841498f5c9d9219373a74d62a495c89         c2ee290ad72ec327f43febc3e47e962eefa3f71bd7ea1af83b7c555995992fc7.partial
5e1e4b41fb275751115cf110c1b9b488c0b2a28d5cfced0d931e4b411111df2e.partial d2863fdab15e37a069d3372f529c1f4d4019860f272f5d437d52e5cb24f7b1e9
6641bfba31ef754b331bacc91b94ff45aba2394258fba5ead11479465ee95305         e2695c482277e33af377fce7fd8ca066ed8ab8d6ec482915ca4b774e11e519a2
7185fe0838b512eb87096b23e95b8c5a76fd0c962cbddfb2c34ed0eec0841e5a.partial e76515c5b75da508745259d145d513384fd33fdbe38918aa955e795a26db075c
7243706338030c46adbad4b387d493003e2cd01cfa5226dffdc8975bbccbd396         ec0e28cc0452b871c0b57289560dc30f49ff026d5b2513d9fc3071ef3d0d67ad
7525b45aca040b3d8c0dcb532128dfc0c09cf603746e507d2e0d940bd9e3ce20         ede4f03d16fdec8a88706fce1f52c0bfc34744dfbdc01dc0b1fa058ea71836af
8700c284bc6d61fdd4d0ef26cd68fe2b65f625701709493c106ca5f46e85d1b8         ef0e0bb8abf76b81f0999816595a56982a50791e58ee2895540969a5036a53bd
89b368af8f1a8fd94c70b249cf93dbb0ee2513585e2f84992e888fee1904049a         f20b176e10fec12b15fd7b9a172c4113150d416bf3b682e1f4e5fe7d4992d678

du -h ~/.rustup/downloads/
2.5G /Users/gnzlbg/.rustup/downloads/
```

That's 2.5 Gb of useless files.

---

Ideally, 

* we would have a definition of what "clean" means for the `RUSTUP_HOME` directory,
* APIs to e.g. iterate over all files that would need to be removed for the `RUSTUP_HOME` directory to become clean
* Decide which `rustup` commands, on success, should enforce that the `RUSTUP_HOME` directory is clean (e.g. `rustup update`, `rustup self update`, etc.) - I think we should try hard to avoid a `rustup clean` command, since users should not be required to know that such a command exists to avoid wasting multiple Gbs of files. 
* Tests that make sure that whatever gets implemented works.
If the user specifies any of --default-toolchain (not none)
or --target or --component when invoking `rustup-init` then
we will update the existing installation toolchains, rather
than the previous behaviour which was to skip toolchain
installation.  This is nominally a breaking change but likely
ends up adhering closer to the principle of least surprise.

At this point, the profile will not be applied, so a change
of profile from minimal to default will not cause additional
components to end up being installed.

In theory this fixes #2194 but will need checking with @flaviojs
**Problem**
If a crate contains a `rust-toolchain` file, the default toolchain is used if `cargo install --path ...` is run from outside of the crate's directory.  I expected it to use the toolchain specified in `rust-toolchain`.

**Steps**
1. `rustup default stable`
2. `cargo new foo`
3. `echo nightly >foo/rust-toolchain`
4. `sed -i '1i#![feature(exact_size_is_empty)]' foo/src/main.rs`
5. `cargo install --path foo`

`cd foo && cargo install --path .` does work.

**Notes**

Output of `rustup --version`: `rustup 1.21.1 (7832b2ebe 2019-12-20)`
Output of `rustup show`:
```
Default host: x86_64-pc-windows-msvc
rustup home:  C:\Users\mkraai\.rustup

installed toolchains
--------------------

stable-x86_64-pc-windows-msvc
nightly-x86_64-pc-windows-msvc

active toolchain
----------------

stable-x86_64-pc-windows-msvc (default)
rustc 1.40.0 (73528e339 2019-12-16)
```

About the wmemchr change: I don't have Windows machine to bench
but from https://bugzilla.mozilla.org/show_bug.cgi?id=1003726#c5,
it may be a 11% improvement.
Closes #2191 

I haven't been able to test this at all, but I still wanted to create this PR so someone could test for me before I find time to do it myself.
**Describe the problem you are trying to solve**

This is a followup to #2188.
Since `rustup-init` shouldn't be used to set up cross-compiling with mingw, at the very least it should warn when an argument is ignored/changed.

Without a warning I would think that everything is setup as expected.
This leads to wasting a lot of time trying to figure out what is wrong when a problem arises.

**Describe the solution you'd like**

I'm not sure what the stated reasons should be but I would like a warning with enough information.

Examples:
 * for --default-toolchain=1.36.0-x86_64-pc-windows-gnu
    ```
    default toolchain changed to 1.36.0-x86_64-unknown-linux-gnu: reason
    ```
 * for --default-toolchain=1.36.0 --target=x86_64-pc-windows-gnu
    ```
    target x86_64-pc-windows-gnu was ignored: reason
    ```

Maybe something else would be appropriate but this is all I can think of without knowledge of the internals.