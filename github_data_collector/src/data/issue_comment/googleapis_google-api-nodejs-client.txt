#### Environment details

  - OS: macOS Catalina 10.15.1
  - Node.js version: 11.14.0
  - npm version: 6.13.4
  - `googleapis` version:46.0.0

#### Issue
Gmail threads fine from the sender's account but doesn't thread in the recipient's gmail account.

#### Steps to reproduce
1. First tried adding the headers in the payload object
```
const msgId = // Some gmail message id

const mimeDraftEncodedMessage = base64url(`To:test@gmail.com\r\n` +
      `From:test@gmail.com\r\n` +
      `Subject:sample subject\r\n` +
      `Content-Type: text/html; charset=utf-8\r\n` +
      `MIME-Version: 1.0\r\n\r\ntest message`;)

const params = {
      userId: 'me',
      requestBody: {
        message: {
          raw: mimeDraftEncodedMessage,
          threadId,
          payload: {
            headers: [
              { name: 'In-Reply-To', value: `<${msgId}>` },
              { name: 'References', value: `<${msgId}>` },
            ],
          },
        },
      },
    }

gmail.users.drafts.create(params)
```

2. Then tried adding the headers to the MIME encoded message itself

```
const msgId = // Some gmail message id

const mimeDraftEncodedMessage = base64url(`To:test@gmail.com\r\n` +
      `From:test@gmail.com\r\n` +
      `Subject:sample subject\r\n` +
      `In-Reply-To:${msgId}\r\n` +
      `References:${msgId}\r\n` +
      `Content-Type: text/html; charset=utf-8\r\n` +
      `MIME-Version: 1.0\r\n\r\ntest message`;)

const params = {
      userId: 'me',
      requestBody: {
        message: {
          raw: mimeDraftEncodedMessage,
          threadId,
        },
      },
    }

gmail.users.drafts.create(params)

```

Any help would be greatly appreciated. Thanks!

I am trying to generate a [Cloud Commerce Partner Procurement API](https://cloud.google.com/marketplace/docs/partners/commerce-procurement-api/reference/rest/) Client from this [discovery doc](https://cloudcommerceprocurement.googleapis.com/$discovery/rest?version=v1) using the [generator script](https://github.com/googleapis/google-api-nodejs-client/blob/master/src/generator/generate.ts) but ran into some permission issues:

```
  'https://cloudcommerceprocurement.googleapis.com/$discovery/rest?version=v1' => [ 'Attempting first generateAPI call...',
    'Starting discovery doc request...',
    'https://cloudcommerceprocurement.googleapis.com/$discovery/rest?version=v1',
    'Discovery doc request complete.',
    'Generating templates...',
    'Step 1...',
    'Making fragment request...',
 
    'Fragment request err: Error: <?xml version=\'1.0\' encoding=\'UTF-8\'?><Error><Code>AccessDenied</Code><Message>Access denied.</Message><Details>Anonymous caller does not have storage.objects.get access to apisnippets-staging/public/cloudcommerceprocurement/v1/0/cloudcommerceprocurement.providers.entitlements.rejectPlanChange.frag.json.</Details></Error>',
    'Ignoring error.',
    'Fragment request err: Error: <?xml version=\'1.0\' encoding=\'UTF-8\'?><Error><Code>AccessDenied</Code><Message>Access denied.</Message><Details>Anonymous caller does not have storage.objects.get access to apisnippets-staging/public/cloudcommerceprocurement/v1/0/cloudcommerceprocurement.providers.entitlements.list.frag.json.</Details></Error>',
    'Ignoring error.',
    'Fragment request err: Error: <?xml version=\'1.0\' encoding=\'UTF-8\'?><Error><Code>AccessDenied</Code><Message>Access denied.</Message><Details>Anonymous caller does not have storage.objects.get access to apisnippets-staging/public/cloudcommerceprocurement/v1/0/cloudcommerceprocurement.providers.entitlements.approve.frag.json.</Details></Error>',
    'Ignoring error.',
    'Fragment request err: Error: <?xml version=\'1.0\' encoding=\'UTF-8\'?><Error><Code>AccessDenied</Code><Message>Access denied.</Message><Details>Anonymous caller does not have storage.objects.get access to apisnippets-staging/public/cloudcommerceprocurement/v1/0/cloudcommerceprocurement.providers.entitlements.suspend.frag.json.</Details></Error>',
    'Ignoring error.',
    'Fragment request err: Error: <?xml version=\'1.0\' encoding=\'UTF-8\'?><Error><Code>AccessDenied</Code><Message>Access denied.</Message><Details>Anonymous caller does not have storage.objects.get access to apisnippets-staging/public/cloudcommerceprocurement/v1/0/cloudcommerceprocurement.providers.entitlements.reject.frag.json.</Details></Error>',
    'Ignoring error.',
    'Fragment request err: Error: <?xml version=\'1.0\' encoding=\'UTF-8\'?><Error><Code>AccessDenied</Code><Message>Access denied.</Message><Details>Anonymous caller does not have storage.objects.get access to apisnippets-staging/public/cloudcommerceprocurement/v1/0/cloudcommerceprocurement.providers.entitlements.approvePlanChange.frag.json.</Details></Error>'
,
    'Ignoring error.',
    'Fragment request err: Error: <?xml version=\'1.0\' encoding=\'UTF-8\'?><Error><Code>AccessDenied</Code><Message>Access denied.</Message><Details>Anonymous caller does not have storage.objects.get access to apisnippets-staging/public/cloudcommerceprocurement/v1/0/cloudcommerceprocurement.providers.accounts.reject.frag.json.</Details></Error>',
    'Ignoring error.',
    'Fragment request err: Error: <?xml version=\'1.0\' encoding=\'UTF-8\'?><Error><Code>AccessDenied</Code><Message>Access denied.</Message><Details>Anonymous caller does not have storage.objects.get access to apisnippets-staging/public/cloudcommerceprocurement/v1/0/cloudcommerceprocurement.providers.accounts.list.frag.json.</Details></Error>',
    'Ignoring error.',
    'Fragment request err: Error: <?xml version=\'1.0\' encoding=\'UTF-8\'?><Error><Code>AccessDenied</Code><Message>Access denied.</Message><Details>Anonymous caller does not have storage.objects.get access to apisnippets-staging/public/cloudcommerceprocurement/v1/0/cloudcommerceprocurement.providers.accounts.approve.frag.json.</Details></Error>',
    'Ignoring error.',
    'Fragment request err: Error: <?xml version=\'1.0\' encoding=\'UTF-8\'?><Error><Code>AccessDenied</Code><Message>Access denied.</Message><Details>Anonymous caller does not have storage.objects.get access to apisnippets-staging/public/cloudcommerceprocurement/v1/0/cloudcommerceprocurement.providers.entitlements.patch.frag.json.</Details></Error>',
    'Ignoring error.',
    'Fragment request err: Error: <?xml version=\'1.0\' encoding=\'UTF-8\'?><Error><Code>AccessDenied</Code><Message>Access denied.</Message><Details>Anonymous caller does not have storage.objects.get access to apisnippets-staging/public/cloudcommerceprocurement/v1/0/cloudcommerceprocurement.providers.accounts.get.frag.json.</Details></Error>',
    'Ignoring error.',
    'Fragment request err: Error: <?xml version=\'1.0\' encoding=\'UTF-8\'?><Error><Code>AccessDenied</Code><Message>Access denied.</Message><Details>Anonymous caller does not have storage.objects.get access to apisnippets-staging/public/cloudcommerceprocurement/v1/0/cloudcommerceprocurement.providers.entitlements.get.frag.json.</Details></Error>',
    'Ignoring error.',
    'Fragment request err: Error: <?xml version=\'1.0\' encoding=\'UTF-8\'?><Error><Code>AccessDenied</Code><Message>Access denied.</Message><Details>Anonymous caller does not have storage.objects.get access to apisnippets-staging/public/cloudcommerceprocurement/v1/0/cloudcommerceprocurement.providers.accounts.reset.frag.json.</Details></Error>',
    'Ignoring error.',
    'Step 2...',
    'GenerateAPI call failed with error: Error: template not found: /usr/local/google/home/masabrina/pollstar/web/node_modules/googleapis/src/generator/templates/api-endpoint.njk, moving on.' ] }
```

I'm a Googler and have filed a bug with the relevant team. Is there anything I could do in the meantime? Thanks.
#### Environment details

  - OS: MacOS Catalina
  - Node.js version: 11.8.0
  - npm version: 6.13.4
  - `googleapis` version: 46.0.0

#### Steps to reproduce

  1. `npm i googleapis`
  2. 
```
import { google } from "googleapis";
const sqladmin = google.sqladmin("v1beta4");
```
This is exactly how the documentation [here](https://googleapis.dev/nodejs/googleapis/latest/sqladmin/classes/Sqladmin.html) says to use this library, but when I try to bundle my code with webpack it throws the following error.
```
TS2349: This expression is not not callable.
Type 'Readonly<any>' has no call signatures.
```

This is preventing me from building my code. Is the documentation I found out of date, or is this actually a bug?

Thanks!

Replacing text with text is straight forward and well documenten.
But how do we change text with an image? it seems like you can only change image with a image.

This is necessary for adding images at a specific position in the document.
Hi!

Up until now I have been calling sheets.spreadsheets.batchUpdate() and then sheets.spreadsheets.values.append() in order to put values on the newly created sheet. I was wondering if I could insert a second request within the "requests: []" when calling the batchUpdate since it can hold more than one request at I time, in order to append the values right after creating the new sheet without having to make an additional api call of sheets.spreadsheets.values.append() to be able to put values in it.

I have been fiddling around and I feel I am close enough, but got to the following:

```
"requests": [
          {
            "addSheet": {
              "properties": {
                "title": "Prueba",
                "sheetId": 9
              }
            }
          },
          {
            "appendCells": {
              "rows": [
                {
                  "values": [
                    {
                      "userEnteredValue": {
                        "stringValue": "Work"
                      }
                    }
                  ]
                }
              ],
              "fields": "userEnteredValue",
              "sheetId": 9
            }
          }
        ]
```

The problem here is that since "sheetId" will be unknown until the sheet gets created and given a sheetId value, I am force to give myself an id for the appendCells to be able to find the sheet I just created. Is there any documentation/idea on how to achieve this without having to manually specify the sheetId myself?


The authentication section describes service-to-service auth:

> Service <--> Service - In this model, your application talks directly to Google APIs using a Service Account. It's useful when you have a backend application that will talk directly to Google APIs from the backend.

The "Learn more" link goes to https://github.com/googleapis/google-api-nodejs-client#service-to-service-authentication

But this section does not seem to be about authenticating service accounts. Instead it is about auto-detecting what kind of auth credential you need for your runtime environment.



#### Environment details

  - OS: OSX 10.15.2
  - Node.js version: v11.10.1
  - npm version: 6.13.4
  - `googleapis` version: 46.0.0

#### Steps to reproduce

  1. Upload a plain text file that has only whitespace and some characters in double quotes, like this one:

https://drive.google.com/file/d/15RszQHSm4kmKwbAKXXrfq_IWYs2_QErx/view?usp=sharing

  2. Load it using `alt: 'media'` using `files.get`:

```var gapi = require('googleapis').google;

var client = new gapi.auth.OAuth2(
"<client id>",
"<client secret>",
"ignore"
);
var access_token = "<access token>"

client.setCredentials({
  access_token: access_token
});

var drive = gapi.drive({ version: 'v3', auth: client });
drive.files.get({fileId: '15RszQHSm4kmKwbAKXXrfq_IWYs2_QErx', alt: 'media'}).then(function(result) {
  console.log(result);
}).catch(function(e) {
  console.error("Failed: ", e);
});

```

Expected result – `result.data` is the string `"\n\n\n\"just a string\"\n\n\n\n\n"`
Actual result – `result.data` is the string `"just a string"` (note the lack of quotes in the string data itself)

Here's the full output of the log that I see:

```{ config:
   { url:
      'https://www.googleapis.com/drive/v3/files/15RszQHSm4kmKwbAKXXrfq_IWYs2_QErx?alt=media',
     method: 'GET',
     paramsSerializer: [Function],
     headers:
      { 'x-goog-api-client': 'gdcl/3.2.0 gl-node/11.10.1 auth/5.7.0',
        'Accept-Encoding': 'gzip',
        'User-Agent': 'google-api-nodejs-client/3.2.0 (gzip)',
        Authorization:
         'Bearer y...',
        Accept: 'application/json' },
     params: [Object: null prototype] { alt: 'media' },
     validateStatus: [Function],
     retry: true,
     responseType: 'json' },
  data: 'just a string',
  headers:
   { 'alt-svc':
      'quic=":443"; ma=2592000; v="46,43",h3-Q050=":443"; ma=2592000,h3-Q049=":443"; ma=2592000,h3-Q048=":443"; ma=2592000,h3-Q046=":443"; ma=2592000,h3-Q043=":443"; ma=2592000',
     'cache-control': 'private, max-age=0, must-revalidate',
     connection: 'close',
     'content-disposition': 'attachment',
     'content-length': '23',
     'content-type': 'text/plain',
     date: 'Tue, 31 Dec 2019 19:24:08 GMT',
     expires: 'Tue, 31 Dec 2019 19:24:08 GMT',
     server: 'UploadServer',
     vary: 'Origin, X-Origin',
     'x-goog-hash': '...',
     'x-guploader-uploadid':
      '...' },
  status: 200,
  statusText: 'OK',
  request:
   { responseURL:
      'https://www.googleapis.com/drive/v3/files/15RszQHSm4kmKwbAKXXrfq_IWYs2_QErx?alt=media' } }
```

If I add other characters on other lines, I get the expected result. For example, if I add an `a` or `"a"` at the end of the file, I get the result I expect.

Happy to hear if I'm mis-using the API. I ran into this when I was updating from a much older, pre-25 version of the gapi and had some uses with explicit `alt: 'media'` configuration parameters.

Thanks!


Using `googleapis@46.0.0`, I can only get to `compute.zoneOperations.wait()` if I use `google.compute('alpha')`, but then I can't access it anyway because alpha APIs require special permissions. If I try to use 'beta' the `wait` function doesn't exist. 
But I believe `compute.zoneOperations.wait()` is now in beta, see: https://cloud.google.com/compute/docs/reference/rest/beta/zoneOperations/wait

So can this be moved into the beta API?

My code is something like this:
```typescript
import { google } from 'googleapis'
// ...
  const compute = google.compute('beta') // or try "alpha"
  const authClient = await google.auth.getClient({
    scopes: [...]
  })
  const projectId = await google.auth.getProjectId()
  const request = {
    project: projectId,
    zone: zone,
    resource: vmConfig,
    auth: authClient,
  };
  const response = await compute.instances.insert(request)
  const operationId = response.data.id
  if (!operationId)
    throw new Error(`createInstance: Error creating instance ${vmName}`)

  // Wait for the instance to be created: this is where it fails
  const status = await compute.zoneOperations.wait({operation: operationId})
```
The error I get with the above above in 'beta' is `TypeError: compute.zoneOperations.wait is not a function`. In 'alpha' I get the error `Error: Required 'Alpha Access' permission for 'Compute API'`
What's not working: there is no documentation for the `compute` API in the API docs, although this repo's README says "This library has a full set of API Reference Documentation". 

To repro: go to https://googleapis.dev/nodejs/googleapis/latest and look for `compute` or anything like that. Notice that there's nothing there.

(It was suggested in https://github.com/googleapis/google-cloud-node/issues/952 that I check out this lib for accessing the compute API from Typescript because `@google-cloud/compute` will not be getting Typescript type decls.)

None