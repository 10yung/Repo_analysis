Hi , Can we use a URL as json "source"? 
like
`data := "http://mysupercooljson.com/path/to/source"`

Thanks for replying 
**Description**:
In master, EachKey cannot extract from an array of strings. Specifying `foo.[0]` would return nothing for `{"foo": ["a","b"]}`, because EachKey calls the Get function twice and in the case of strings inside arrays, the first Get strips quotes and the second then cannot recognize that it has been passed a string.

This PR appears to make extraction from arrays of strings work properly without breaking any existing tests. It includes a test which failed on master but passes with the changes.

**Benchmark before change**: Neither benchmark worked:

```
$ go test -test.benchmem -bench JsonParser ./benchmark/ -benchtime 5s -v
go: directory benchmark is outside main module
```

```
$ make bench
docker run -v `pwd`:/go/src/github.com/buger/jsonparser -i -t jsonparser go test  -test.benchmem -bench JsonParser ./benchmark/  -benchtime 5s -v
Unable to find image 'jsonparser:latest' locally
docker: Error response from daemon: pull access denied for jsonparser, repository does not exist or may require 'docker login': denied: requested access to the resource is denied.
See 'docker run --help'.
make: *** [Makefile:16: bench] Error 125
```
The following code makes a panic in searchKeys function:

```go
package fuzz

import (
	"testing"

	"github.com/buger/jsonparser"
)

func TestFuzzCrasher(t *testing.T) {
	crasher := []byte(`{{{"":`)
	jsonparser.GetInt(crasher, "a", "b")
}
```

Here is the panic output
```
panic: runtime error: index out of range [2] with length 2

goroutine 1 [running]:
github.com/buger/jsonparser.searchKeys(0x4010000, 0x6, 0x6, 0xc000088e50, 0x2, 0x2, 0xffffffffffffffff)
	/Users/thomasleroy/Software/go/src/github.com/buger/jsonparser/parser.go:264 +0xef5
github.com/buger/jsonparser.internalGet(0x4010000, 0x6, 0x6, 0xc000088e50, 0x2, 0x2, 0x0, 0xc000000180, 0xc000088d70, 0x1031f50, ...)
	/Users/thomasleroy/Software/go/src/github.com/buger/jsonparser/parser.go:876 +0x3b5
github.com/buger/jsonparser.Get(0x4010000, 0x6, 0x6, 0xc000088e50, 0x2, 0x2, 0x1052a72, 0x10442bc, 0x1054ab0, 0xc000088e08, ...)
	/Users/thomasleroy/Software/go/src/github.com/buger/jsonparser/parser.go:870 +0x8b
github.com/buger/jsonparser.GetInt(0x4010000, 0x6, 0x6, 0xc000088e50, 0x2, 0x2, 0x1a22912800000000, 0x5daa1a76, 0xc000088e70)
	/Users/thomasleroy/Software/go/src/github.com/buger/jsonparser/parser.go:1140 +0x8b
_/Users/thomasleroy/Security/Fuzzing/Go-fuzz.Fuzz(0x4010000, 0x6, 0x6, 0x3)
	/Users/thomasleroy/Security/Fuzzing/Go-fuzz/jsonparser.go:8 +0x95
go-fuzz-dep.Main(0xc000088f48, 0x1, 0x1)
	go-fuzz-dep/main.go:36 +0x1ad
main.main()
	_/Users/thomasleroy/Security/Fuzzing/Go-fuzz/go.fuzz.main/main.go:15 +0x52
exit status 2
```

The function also crashes if you call GetInt(crasher, "a")
The following test will cause a panic:

```
func TestJsonLibrary(t *testing.T) {
		cb := func(idx int, val []byte, vt jsonparser.ValueType, err error) {
		}
		badval = []byte(`{"foo": [{"bar": "baz"}]}`)
		jsonparser.EachKey(badval, cb, []string{"foo", "["})
}
```

```
--- FAIL: TestJsonLibrary (0.00s)
panic: runtime error: slice bounds out of range [1:0] [recovered]
	panic: runtime error: slice bounds out of range [1:0]

goroutine 20 [running]:
testing.tRunner.func1(0xc000118200)
	/usr/local/go/src/testing/testing.go:874 +0x3a3
panic(0x768280, 0xc0000fa140)
	/usr/local/go/src/runtime/panic.go:679 +0x1b2
github.com/buger/jsonparser.EachKey(0xc0000fa120, 0x19, 0x19, 0x7adf40, 0xc00004cf48, 0x1, 0x1, 0x0)
	/home/john/go/pkg/mod/github.com/buger/jsonparser@v0.0.0-20191004114745-ee4c978eae7e/parser.go:492 +0x10af
```

I acknowledge that it is bad code, but I managed to trigger it via careless parsing on my end
https://github.com/buger/jsonparser/blob/bf1c66bbce23153d89b23f8960071a680dbef54b/parser.go#L943-L957
how to indicate that **cb** return an error for ArrayEach, like ObjectEach do.
https://github.com/buger/jsonparser/blob/bf1c66bbce23153d89b23f8960071a680dbef54b/parser.go#L1053-L1060
Currently I use this code to get len. Is there any way more directly?
```
func getObjectLen(value []byte) (int, error) {
    ret := 0
    objectCallback := func(key []byte, value []byte, dataType jsonparser.ValueType, offset int) error {
        ret++
        return nil
    }
    if err := jsonparser.ObjectEach(value, objectCallback); err != nil {
        return 0, fmt.Errorf("getObjectLen ObjectEach error: %v", err)
    }
    return ret, nil
}
```
```
func getArrayLen(value []byte) (int, error) {
    ret := 0
    arrayCallback := func(value []byte, dataType jsonparser.ValueType, offset int, err error) {
        ret++
    }
    if _, err := jsonparser.ArrayEach(value, arrayCallback); err != nil {
        return 0, fmt.Errorf("getArrayLen ArrayEach error: %v", err)
    }
    return ret, nil
}
```
Greetings, 
i have two json objects like below.
First One. 
```
[
  {
    "data_header": {
      "callid": "wwt3l4@127.0.0.1_b2b-1"
    },
    "id": 676,
    "protocol_header": {
      "captureId": "2001"
    }
  }
]
```
Second One. 
```
[
  {
    "id": 54,
    "protocol_header": {
      "captureId": "2002"
    },
    "data_header": {
      "callid": "aa@127.0.0.1",
      "node": "2001"
    }
  }
]
```

I would like to merge them so they like below. 

```
[
  {
    "id": 54,
    "protocol_header": {
      "captureId": "2002"
    },
    "data_header": {
      "callid": "aa@127.0.0.1",
      "node": "2001"
    }
  },
  {
    "data_header": {
      "callid": "wwt3l4@127.0.0.1_b2b-1"
    },
    "id": 676,
    "protocol_header": {
      "captureId": "2001"
    }
  }
]
```

Any hint how can I achieve the above result?

Br, Aqs. 
Iâ€™m interested in getting the dimensions of the JSON structure or obtaining a difference between two structures to know if the match or not.
the "root" json 
     maybe as  { ... }
     maybe as [ .... ]

how get the "root" json type?

How to use from json file?