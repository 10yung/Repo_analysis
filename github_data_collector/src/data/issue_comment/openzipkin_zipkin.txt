![image](https://user-images.githubusercontent.com/37392164/72242538-af89fd00-3624-11ea-9695-c3be38243fd4.png)
Because the field type is object, elasticsearch cannot query it as a conditional line. You need to change the object type to nested
Can we change "showing:" to substitute the way of counting the total number of entries? This will help us to see the number of accesses to each interface，
Today, Zipkin online has the following problems. At present, it is suspected that the access client writes too fast (but the sampling rate is only 0.1% about 5K / mins). The UI interface is particularly slow. Read the log and report an error as follows. What is this Armeria bag for? I can't find out why I reported this mistake.




> 2020-01-07 16:19:57.359  WARN 1 --- [ng-tasks-1-1307] z.s.i.BodyIsExceptionMessage             : Unexpected error handling request.

com.linecorp.armeria.client.ResponseTimeoutException: null
	at com.linecorp.armeria.client.ResponseTimeoutException.get(ResponseTimeoutException.java:36) ~[armeria-0.97.0.jar!/:?]
	at com.linecorp.armeria.client.HttpResponseDecoder$HttpResponseWrapper.run(HttpResponseDecoder.java:197) ~[armeria-0.97.0.jar!/:?]
	at io.netty.util.concurrent.PromiseTask.runTask(PromiseTask.java:98) ~[netty-common-4.1.43.Final.jar!/:4.1.43.Final]
	at io.netty.util.concurrent.ScheduledFutureTask.run(ScheduledFutureTask.java:150) ~[netty-common-4.1.43.Final.jar!/:4.1.43.Final]
	at io.netty.util.concurrent.AbstractEventExecutor.safeExecute(AbstractEventExecutor.java:163) ~[netty-common-4.1.43.Final.jar!/:4.1.43.Final]
	at io.netty.util.concurrent.SingleThreadEventExecutor.runAllTasks(SingleThreadEventExecutor.java:510) ~[netty-common-4.1.43.Final.jar!/:4.1.43.Final]
	at io.netty.channel.epoll.EpollEventLoop.run(EpollEventLoop.java:413) ~[netty-transport-native-epoll-4.1.43.Final-linux-x86_64.jar!/:4.1.43.Final]
	at io.netty.util.concurrent.SingleThreadEventExecutor$6.run(SingleThreadEventExecutor.java:1050) ~[netty-common-4.1.43.Final.jar!/:4.1.43.Final]
	at io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74) ~[netty-common-4.1.43.Final.jar!/:4.1.43.Final]
	at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30) [netty-common-4.1.43.Final.jar!/:4.1.43.Final]
	at java.lang.Thread.run(Thread.java:748) [?:1.8.0_151]
2020-01-07 16:19:57.363  WARN 1 --- [ng-tasks-1-1307] z.s.i.BodyIsExceptionMessage             : Unexpected error handling request.

com.linecorp.armeria.common.ClosedSessionException: null

2020-01-07 16:20:51.282  WARN 1 --- [rker-epoll-2-14] z.s.i.BodyIsExceptionMessage             : Unexpected error handling request.

com.linecorp.armeria.common.ClosedSessionException: null

2020-01-07 16:20:55.870  WARN 1 --- [ng-tasks-1-1307] z.s.i.BodyIsExceptionMessage             : Unexpected error handling request.

com.linecorp.armeria.common.ClosedSessionException: null

2020-01-07 16:22:21.003  WARN 1 --- [rker-epoll-2-17] z.s.i.BodyIsExceptionMessage             : Unexpected error handling request.

com.linecorp.armeria.common.ClosedSessionException: null

2020-01-07 16:22:21.369  WARN 1 --- [ng-tasks-1-1337] z.s.i.BodyIsExceptionMessage             : Unexpected error handling request.

com.linecorp.armeria.common.ClosedSessionException: null

2020-01-07 16:27:03.984  WARN 1 --- [rker-epoll-2-28] z.s.i.BodyIsExceptionMessage             : Unexpected error handling request.

com.linecorp.armeria.common.ClosedSessionException: null

2020-01-07 16:27:04.537  WARN 1 --- [ng-tasks-1-1508] z.s.i.BodyIsExceptionMessage             : Unexpected error handling request.

com.linecorp.armeria.common.ClosedSessionException: null
**Feature:**

Currently, when service names are too long, service name components of the trace tree is displayed as follows:

<img width="200" alt="current-long-service-name" src="https://user-images.githubusercontent.com/19551419/71519661-d1cd0c80-28fb-11ea-87cd-374f33ae4fb9.png">

This is very confusing, so we should show ellipsis as below:

<img width="200" alt="long-service-name" src="https://user-images.githubusercontent.com/19551419/71519740-24a6c400-28fc-11ea-9434-4c8a9450f0ca.png">

And we should show tooltips that tell users the complete service name when hovered.
**Feature:**

Currently Zipkin-lens uses React Hooks APIs, there are almost no custom hooks.
We should actively use custom hooks for better readability and code reusability.
Using custom hooks is good from a SoC point of view, because it can separate the logic and the view of components.
**Feature:**

Use TypeScript in the process of coverting fetched trace data.
Especially in this directory (https://github.com/openzipkin/zipkin/tree/master/zipkin-lens/src/zipkin)

**Rational**

Fetched trace data is converted before it is displayed on the screen.
This conversion process is quite complicated (Please see https://github.com/openzipkin/zipkin/tree/master/zipkin-lens/src/zipkin).
In this case, I think types are useful.
when spring cloud greenwich upgrade  to spring cloud hoxton,  the main tread get stuck.
https://github.com/spring-projects/spring-boot/issues/19432#issuecomment-568636879

there is a sample https://github.com/spring-projects/spring-boot/files/3997033/testp.zip

related issues  https://github.com/spring-projects/spring-boot/issues/19432
It's easy for Jackson artifacts to get misaligned due to its multiple artifacts and our may transitive dependency paths. We've already had to manually manage it once to fix a security issue and now it's happening again. Let's go ahead and manage the Jackson version permanently since we use it directly now anyways after the moshi migration, and it's API tends to be fairly stable.

Fixes #2941 
**Feature:**
Update jackson-databind version in zipkin-server-*-exec.jar to fix CVEs

**Rational**
Hello, I noticed that current zipkin-server-*-exec.jar includes com.fasterxml.jackson.core:jackson-databind:jar:2.7.9.3 that has numerous CVEs including the one that was previously fixed in https://github.com/openzipkin/zipkin/pull/2771 . It looks like it was caused by cassandra-driver-core update to 3.8.0 (https://github.com/openzipkin/zipkin/commit/325e39703152a0c587df7ca229ae88852a35b2e7#diff-600376dffeb79835ede4a0b285078036 ) since it now comes with jackson-databind: 

```
[INFO] io.zipkin.zipkin2:zipkin-storage-cassandra:jar:2.19.3-SNAPSHOT
[INFO] +- com.google.auto.value:auto-value-annotations:jar:1.7:compile
[INFO] +- com.google.auto.value:auto-value:jar:1.7:provided
[INFO] +- com.datastax.cassandra:cassandra-driver-core:jar:3.8.0:compile
[INFO] |  +- io.netty:netty-handler:jar:4.0.56.Final:compile
[INFO] |  |  +- io.netty:netty-buffer:jar:4.0.56.Final:compile
[INFO] |  |  |  \- io.netty:netty-common:jar:4.0.56.Final:compile
[INFO] |  |  +- io.netty:netty-transport:jar:4.0.56.Final:compile
[INFO] |  |  \- io.netty:netty-codec:jar:4.0.56.Final:compile
[INFO] |  +- com.google.guava:guava:jar:19.0:compile
[INFO] |  +- io.dropwizard.metrics:metrics-core:jar:3.2.2:compile
[INFO] |  +- org.slf4j:slf4j-api:jar:1.7.28:compile
[INFO] |  +- com.github.jnr:jnr-ffi:jar:2.1.7:compile
[INFO] |  |  +- com.github.jnr:jffi:jar:1.2.16:compile
[INFO] |  |  +- com.github.jnr:jffi:jar:native:1.2.16:runtime
[INFO] |  |  +- org.ow2.asm:asm:jar:5.0.3:compile
[INFO] |  |  +- org.ow2.asm:asm-commons:jar:5.0.3:compile
[INFO] |  |  +- org.ow2.asm:asm-analysis:jar:5.0.3:compile
[INFO] |  |  +- org.ow2.asm:asm-tree:jar:5.0.3:compile
[INFO] |  |  +- org.ow2.asm:asm-util:jar:5.0.3:compile
[INFO] |  |  \- com.github.jnr:jnr-x86asm:jar:1.0.2:compile
[INFO] |  +- com.github.jnr:jnr-posix:jar:3.0.44:compile
[INFO] |  |  \- com.github.jnr:jnr-constants:jar:0.9.9:compile
[INFO] |  \- com.fasterxml.jackson.core:jackson-databind:jar:2.7.9.3:compile
[INFO] |     +- com.fasterxml.jackson.core:jackson-annotations:jar:2.7.0:compile
[INFO] |     \- com.fasterxml.jackson.core:jackson-core:jar:2.7.9:compile
[INFO] +- com.datastax.cassandra:cassandra-driver-mapping:jar:3.8.0:compile
```

Updating cassandra-driver-core should also change jackson-databind version( https://github.com/openzipkin/zipkin/issues/2405 ), but for now maybe it is possible to revert cassandra-driver-core version to 3.7.2 ? Or maybe specify jackson-databind version directly?
The code had a check to only show the client's remote service name when the span doesn't have any children.

Problem is described in https://github.com/openzipkin/zipkin/issues/2932

Basically, when reactive HTTP client (Java in my case) is used, CLIENT spans are created in hierarchical order.

Use case:

```
Incoming request:
Two parallel operations:
1. Fetch user A, update user A
2. Fetch user B, update user B
Wait for completion...
```
Is producing CLIENT spans in hierarchical order:
```
-> Main span 
  -> "Fetch user A" CLIENT span -> `update user A` CLIENT span
  -> "Fetch user B" CLIENT span -> `update user B` CLIENT span
```
But UI doesn't support it.






