calling `stop` right after loading the movie doesn't have any effect, same after `loadAsync`

```
#include "ofApp.h"
ofVideoPlayer mPlayer;

//--------------------------------------------------------------
void ofApp::dragEvent(ofDragInfo dragInfo){
    mPlayer.loadAsync( dragInfo.files[0] );
    mPlayer.stop(); // <-- this doesn't do anything
}

//--------------------------------------------------------------
void ofApp::setup(){

}

//--------------------------------------------------------------
void ofApp::update(){
    
    if( mPlayer.isLoaded() )
        mPlayer.update();
}

//--------------------------------------------------------------
void ofApp::draw(){
    
    
    
    if( mPlayer.isLoaded() ){
        mPlayer.draw(0,0);
    }
}
```

I am using macos 10.14.6, xcode 11.2.1 and the current OF master.
When trying to use ofGstVideoPlayer  and calling `setFrameByFrame(true)` on it,  I get a wrongly decoded image. See below.
<img width="1171" alt="Screen Shot 2020-01-08 at 15 46 43" src="https://user-images.githubusercontent.com/974878/72014742-81747980-322e-11ea-81c9-29098774131d.png">

And when I do not call `setFrameByFrame(true)` I get the movie decoded properly, as seen in the following image
<img width="1026" alt="Screen Shot 2020-01-08 at 15 49 37" src="https://user-images.githubusercontent.com/974878/72014820-a5d05600-322e-11ea-893b-62ad6cd77e4e.png">

I don't have any previous experience with GStreamer, and it seems massive. Out of looking at some of its examples and the `ofGstVideoPlayer`'s code I found out that the code in the update function was being done wrong, so I replaced with some of the code used in `GstFlowReturn ofGstVideoUtils::process_sample(shared_ptr<GstSample> sample)` which is the function that properly decoded the movie when not using the frame by frame feature. 
Copying and pasting code is a super bad idea and a function should be used instead on both instances, but as I do not know if what I changed is correct from the GStreamer point of view, I opted for leaving it like this for know. As well I am not sure how this change would affect other platforms.



ofOpenALSoundPlayer::play() calls glGetError() so if I run it in a thread, it crashes. Is there a reason this is there or can I make a pull request removing it?
I've made a post on the forum, but i'm reporting here too, because i think it's a bug.
With Raspberry Pi4/buster, when i create a TCPServer listening for incoming connections, when a client connect, the app slow down a lot (from 60FPS to ~20/25).
You can test this behaviour with the TCPServer example ([https://github.com/openframeworks/openFrameworks/tree/patch-release/examples/communication/networkTcpServerExample](url))
Just run it, and connect (even from the same machine, with nc, or maybe (not tested) with the companion example TCPClient). So it's not a network issue.
Same app in other linux distros runs fine.
As reported 1 year ago in the forum, ofLog() messages do not show up in debugging console. I have the same issue on win10 vs2017 of0.11 (downloadpage). 
I have set ofSetLogLevel(OF_LOG_VERBOSE);

Is this known or resolved?
see
https://forum.openframeworks.cc/t/debug-exe-screen-not-showing-oflog-messages/30693
On Windows using Microsoft Visual Studio Community 2017, and OF 0.10.1 (nightly code from 10/31/2019: of_v20191031_android_nightly.tar.gz).

This also happens using OF 0.11.0 on Windows using Microsoft Visual Studio Community 2017.

I'm trying to use ofURLFileLoader UFL::handleRequestAsync to send a PUT request.

Admittedly, ofURLFileLoader UFL::handleRequestAsync has no documentation, but I have got ofURLFileLoader UFL::handleRequest (the synchronous version of essentially the same thing) to work just fine with nearly-identical code.

The POST call is being made, it's just that an unhandled exception gets thrown after, I think when it is trying to do the notification of completion:
> Exception thrown: read access violation.
> _Mtx_internal_imp_t::_get_cs(...)-> was 0xDDDDDDDD.

Stack:

> >	msvcp140d.dll!mtx_do_lock(_Mtx_internal_imp_t * mtx, const xtime * target) Line 99	C++
>  	msvcp140d.dll!_Mtx_lock(_Mtx_internal_imp_t * mtx) Line 188	C++
>  	handleRequestAsyncBugDemo_debug.exe!std::_Mtx_lockX(_Mtx_internal_imp_t * _Mtx) Line 72	C++
>  	handleRequestAsyncBugDemo_debug.exe!std::_Mutex_base::lock() Line 49	C++
>  	handleRequestAsyncBugDemo_debug.exe!std::unique_lock<std::mutex>::unique_lock<std::mutex>(std::mutex & _Mtx) Line 151	C++
>  	handleRequestAsyncBugDemo_debug.exe!ofThreadChannel<ofHttpResponse>::tryReceive(ofHttpResponse & sentValue) Line 116	C++
>  	handleRequestAsyncBugDemo_debug.exe!ofURLFileLoaderImpl::update(ofEventArgs & args) Line 266	C++
>  	handleRequestAsyncBugDemo_debug.exe!ofEvent<ofEventArgs,std::recursive_mutex>::make_function::__l2::<lambda>(const void * __formal, ofEventArgs & t) Line 479	C++
>  	[External Code]	
>  	handleRequestAsyncBugDemo_debug.exe!of::priv::Function<ofEventArgs,std::recursive_mutex>::notify(const void * s, ofEventArgs & t) Line 91	C++
>  	handleRequestAsyncBugDemo_debug.exe!ofEvent<ofEventArgs,std::recursive_mutex>::notify(ofEventArgs & param) Line 578	C++
>  	handleRequestAsyncBugDemo_debug.exe!ofNotifyEvent<ofEvent<ofEventArgs,std::recursive_mutex>,ofEventArgs>(ofEvent<ofEventArgs,std::recursive_mutex> & event, ofEventArgs & args) Line 215	C++
>  	handleRequestAsyncBugDemo_debug.exe!ofCoreEvents::notifyUpdate() Line 286	C++
>  	handleRequestAsyncBugDemo_debug.exe!ofAppGLFWWindow::update() Line 437	C++
>  	handleRequestAsyncBugDemo_debug.exe!ofMainLoop::loopOnce() Line 144	C++
>  	handleRequestAsyncBugDemo_debug.exe!ofMainLoop::loop() Line 126	C++
>  	handleRequestAsyncBugDemo_debug.exe!ofRunMainLoop() Line 200	C++
>  	handleRequestAsyncBugDemo_debug.exe!ofRunApp(ofBaseApp * OFSA) Line 177	C++
>  	handleRequestAsyncBugDemo_debug.exe!main() Line 11	C++
> 

I have tried adding a pointer to a function to the ofHttpRequest::done member, but while that compiles, it does not seem to help - the exception happens without the handler yet being called. And trying to hook it up there to the ofApp::urlResponse handler... well I failed to find a syntax to do that, it doesn't seem like the right way to do that anyway, and there seems to be [another bug](https://github.com/openframeworks/openFrameworks/issues/6504) with registering that.

For a minimal example to reproduce this, you can add the following code to, say, the ofApp::keyReleased handler of a clean ofApp, so you can test it by pressing a key. e.g.:
```
void ofApp::keyReleased(int key){
    ofURLFileLoader UFL;
    ofHttpRequest request;

    request.url = "http://www.FriendlyURL.org/";
    request.body = "content";
    request.saveTo = false;
    request.contentType = "application/x-www-form-urlencoded";
    request.method = ofHttpRequest::POST;
    request.timeoutSeconds = 10;

    UFL.handleRequestAsync(request);
}
```
On Windows using Microsoft Visual Studio Community 2017, and OF 0.10.1 (nightly code from 10/31/2019: of_v20191031_android_nightly.tar.gz).

This also happens using OF 0.11.0 on Windows using Microsoft Visual Studio Community 2017.

Trying to follow the example here: https://openframeworks.cc/documentation/utils/ofURLFileLoader/#show_ofLoadURLAsync

The line is ofApp::Setup():
`ofRegisterURLNotification(this);`

Seems to cause compilation errors in ofEvent.h line 535:
> Error C2672 'ofEvent<ofHttpResponse,std::recursive_mutex>::addNoToken': no matching overloaded function found
> Error C2661 'ofEvent<ofHttpResponse,std::recursive_mutex>::make_function': no overloaded function takes 3 arguments	
> in handleRequestAsyncBugDemo c:\of0.10.1vs2017\libs\openframeworks\events\ofevent.h	line 535	


Even when simply adding that line and an urlResponse handler function of a clean ofApp class created by the ProjectGenerator.

i.e. I simply added:

in ofApp.h:
`void` urlResponse(const ofHttpResponse & response);

in ofApp.cpp:
```
void ofApp::setup(){
    ofRegisterURLNotification(this);
}

void ofApp::urlResponse(const ofHttpResponse & response) {}
```
Just noticed a typo: ofArduino "EI2CDataRec**ie**ved" should be "EI2CDataRec**ei**ved" and this typo is also manifest in the ofArduino.cpp log print strings ala "recieved."

EDIT: I imagine the safest course of action is to shadow the ofEvent with the correct name and deprecate the mispelled event. It could then be removed in the next deprecation purge.
When compiling, many warnings emitted :

```
N:/openFrameworks/libs/glm/include/glm/gtc/packing.inl:506:37: warning: 'void* memcpy(void*, const void*, size_t)' writing to an object of type 'glm::i16vec4' {aka 'struct glm::vec<4, short int, glm::packed_highp>'} with no trivial copy-assignment; use copy-assignment or copy-initialization instead [-Wclass-memaccess]
  506 |   memcpy(&Unpack, &v, sizeof(Unpack));
      |                                     ^
```

Undefining GLM_FORCE_CTOR_INIT in ofConstants.h solve the problem.
Seems like a GLM issue g-truc/glm#854