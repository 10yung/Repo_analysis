I want to be able to change whether this view is dismissable and change it on the fly. So for example when I press a button it stops dismissal and when I press another button it re-enables dismissal.
Let's add support for SPM in Xcode 11! I've been using this from my own fork and would love to contribute it back.
I am integrating this lib into my project and it works perfect until I got this problem with keyboard:
- setup a viewcontroller with textfield and keyboard is showing
- click on a button to present this new viewcontroller with this decktransition. The keyboard will hide automatically but very laggy

The keyboard is glitching/laggy when hiding. I am sure it is this lib because I compare this lib with ios default presenting modal view.

I hope this one could be fixed because this glitching make smooth animation become glitchy 
Hey all,

Sorry it’s been a while, this took a bit longer than I’d expected, and then iOS 13 hit and that made it take a bit longer.

Originally, I was planning address some different issues with this major update, however in light of the transition changes in iOS 13, I’ve had to made some changes to the plans. While custom transitions and variable height presentations were to be the main focus, I’ve decided to push those back in favour of prioritising bringing the design and implementation up to par with Apple’s.

The goal for now is to essentially make `DeckTransition` functionally identical to the default iOS 13 transitions which will enable backporting the new UI for now, and then building in features which Apple doesn’t have yet such as the two mentioned above, better customisability on iPads, and so on.

Here’s a list of all the changes I’m hoping to get in:
- The swipe-to-dismiss gesture should use an interactive transition.
- View controllers should be able to dynamically specify when a dismissal is allowed.
- The corner radius handling needs improvement. On devices and features with rounded corners (so the X-series iPhones, newer iPad Pros, and split view on iPads) the presenting card should animate from the device’s corners.
- The iPad UI needs a complete rethink. It should essentially be a 1:1 match of Apple’s designs which scales up from a page sheet to the current style based on the user’s dynamic type settings.

The iPhone part of this changelog is relatively trivial. The iPad part will take significant work, especially given the smart things Apple is doing with handling corner radii in split view, for example.

Additionally, I think I’ve found solutions to some prevalent bugs such as the weird transforms for certain `UITableView` rows and some others.

It should be possible to retain support for upto iOS 11, however iOS 9 and 10 will likely have to be dropped.

The plan is to have a draft of this change in within a few weeks, time permitting.

I’d love to hear any thoughts people using this library have about these planned changes or any ideas.
Will be cool to have it.
In my app I have a `UISplitViewController` as the base. Now, when I present a `UIViewController` as a card on top of it, the view will look like this.

<img width="545" alt="image" src="https://user-images.githubusercontent.com/8407498/55640905-dfba8a80-57cc-11e9-8399-582031128285.png">

However, when I rotate the device and then rotate back, the layout breaks and it will look like this.

<img width="545" alt="image" src="https://user-images.githubusercontent.com/8407498/55640935-f06b0080-57cc-11e9-9d16-6bc88df31e54.png">

When I then rotate once more and once more back, the app will crash, throwing this:

    Terminating app due to uncaught exception 'NSInternalInconsistencyException', reason: 'Multiplier is not finite!  That's illegal.  multiplier:-inf'
    *** First throw call stack:
    (
	0   CoreFoundation                      0x000000010759a6fb __exceptionPreprocess + 331
	1   libobjc.A.dylib                     0x0000000106b3eac5 objc_exception_throw + 48
	2   CoreFoundation                      0x000000010759a482 +[NSException raise:format:arguments:] + 98
	3   Foundation                          0x000000010658c927 -[NSAssertionHandler handleFailureInMethod:object:file:lineNumber:description:] + 194
	4   Foundation                          0x000000010679255e -[NSLayoutConstraint _setMultiplier:] + 336
	5   Foundation                          0x000000010679949f +[NSLayoutConstraint constraintWithAnchor:relatedBy:toAnchor:multiplier:constant:] + 575
	6   DeckTransition                      0x000000010319992b $s14DeckTransition0A22PresentationControllerC29updateSnapshotViewAspectRatio33_71FA53A27BEAE2D482201C2CF371A196LLyyF + 1931
	7   DeckTransition                      0x000000010319a09a $s14DeckTransition0A22PresentationControllerC31containerViewWillLayoutSubviewsyyF + 298
	8   DeckTransition                      0x000000010319a644 $s14DeckTransition0A22PresentationControllerC31containerViewWillLayoutSubviewsyyFTo + 36
	9   UIKitCore                           0x0000000111070905 -[UIView(CALayerDelegate) layoutSublayersOfLayer:] + 1229

Any ideas as to what could be causing this? I have a feeling it's a layout issue in the library, but I have no clue where to start looking...
I can slide to dismiss and all the functionalities work. The issue is when I present the VC with decktransition, it just covers the whole screen and the top corners are not rounded. Any suggestions? 
When scrolling down fast the view can sometimes be dismissed by accident. Having an option to adjust the sensitivity would assist.
@HarshilShah 

Would it be possible to add callbacks for events `willDismiss` and `didDismiss` to run code on or during those events. For Instance, I use the `Hero` transition library for certain transitions and it conflicts with `DeckTransition`. I would like to be able to turn it off so it's behavior doesn't interrupt DeckTransition's dismiss animation.
On iPad, since the screen is so tall, I'd like the "card" view to only take up 1/3–1/2 of the screen. Is it possible to adjust the height of the view being transitioned to (or its inset to achieve the same)?