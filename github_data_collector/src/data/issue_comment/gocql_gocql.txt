Please answer these questions before submitting your issue. Thanks!

### What version of Cassandra are you using?
Amazon Managed Cassandra - version 3.11.2

### What version of Gocql are you using?
v0.0.0-20200103014340-68f928edb90a

### What did you do?
Tried to connect to Amazon Managed Cassandra using gocql

```
clusterConfig := gocql.NewCluster("cassandra.us-east-1.amazonaws.com:9142")
clusterConfig.Authenticator = gocql.PasswordAuthenticator{Username: username, Password: password}
clusterConfig.SslOpts = &gocql.SslOptions{
		CaPath: "AmazonRootCA1.pem",
	}

clusterConfig.Keyspace = "test"
session, err := clusterConfig.CreateSession()
```

### What did you expect to see?
Successful gocql Session creation

### What did you see instead?
{"error": "gocql: unable to create session: control: unable to setup connection: Column family TableIdentifier(ksName=system, cfName=local) is not writable"}

---

If you are having connectivity related issues please share the following additional information

### Describe your Cassandra cluster
please provide the following information

- output of `nodetool status`
nodetool: Failed to connect to 'cassandra.us-east-1.amazonaws.com:9142' - ConnectIOException: 'non-JRMP server at remote endpoint'.

- output of `SELECT peer, rpc_address FROM system.peers`

peer | rpc_address
3.83.170.140 | null
3.83.168.142 | null
3.83.169.141 | null
3.83.170.152 | null
3.83.168.154 | null
3.83.169.153 | null
3.83.168.143 | null
3.83.170.151 | null
3.83.171.143 | null


- rebuild your application with the `gocql_debug` tag and post the output

2020-01-13T16:53:55.664-0500	ERROR	filter/filter.go:65	error:	{"error": "gocql: unable to create session: control: unable to setup connection: Column family TableIdentifier(ksName=system, cfName=local) is not writable"}

### What version of Cassandra are you using?

3.11.5

### What version of Gocql are you using?

68f928edb90a8a33cc6a91eb5f8c4361edba73d4

### What did you do?

With a token aware host policy:

* Modified a keyspace with `NetworkTopologyStrategy` to have 0 replicas in one if its datacenter 
* Tried to create a session with the same keyspace set in the `ClusterConfig`

### What did you expect to see?

No panics

### What did you see instead?

A panic in gocql.

I have a keyspace in a cluster with two datacenters, DC1 and DC2. We wanted to remove the data for this keyspace from DC2, to do that I ran this query:

    alter KEYSPACE vincent_test WITH replication = {'class': 'NetworkTopologyStrategy', 'DC1': '2', 'DC2': '0'};

This triggered a keyspace changed event and cause a panic in gocql:

```
panic: invalid replication_factor 0. Is the "vincent_test:dc=DC2" keyspace configured correctly?

goroutine 131 [running]:
github.com/gocql/gocql.getReplicationFactorFromOpts(0xc00030c180, 0x13, 0x6b3fe0, 0xc000140340, 0x4)
        /home/vincent/dev/go/src/github.com/gocql/gocql/topology.go:67 +0x2bd
github.com/gocql/gocql.getStrategy(0xc000188a00, 0xc, 0xc000188a00)
        /home/vincent/dev/go/src/github.com/gocql/gocql/topology.go:86 +0x1de
github.com/gocql/gocql.(*tokenAwareHostPolicy).updateReplicas(0xc0000f0460, 0xc00017c540, 0xc00014f620, 0xc)
        /home/vincent/dev/go/src/github.com/gocql/gocql/policies.go:455 +0x228
github.com/gocql/gocql.(*tokenAwareHostPolicy).KeyspaceChanged(0xc0000f0460, 0xc00014f620, 0xc, 0xc00014f5f5, 0x7)
        /home/vincent/dev/go/src/github.com/gocql/gocql/policies.go:443 +0xac
github.com/gocql/gocql.(*Session).handleKeyspaceChange(0xc0000a9500, 0xc00014f620, 0xc, 0xc00014f5f5, 0x7)
        /home/vincent/dev/go/src/github.com/gocql/gocql/events.go:127 +0x77
github.com/gocql/gocql.(*Session).handleSchemaEvent(0xc0000a9500, 0xc0001402c0, 0x1, 0x1)
        /home/vincent/dev/go/src/github.com/gocql/gocql/events.go:112 +0x2f3
created by github.com/gocql/gocql.(*eventDebouncer).flush
        /home/vincent/dev/go/src/github.com/gocql/gocql/events.go:64 +0x5f
```

The cause is [here](https://sourcegraph.com/github.com/gocql/gocql/-/blob/topology.go#L66-68).

Additionnally, the same panic can be triggered by forcing the keyspace in the [ClusterConfig](https://godoc.org/github.com/gocql/gocql#ClusterConfig):

```
panic: invalid replication_factor 0. Is the "vincent_test:dc=DC2" keyspace configured correctly?

goroutine 1 [running]:
github.com/gocql/gocql.getReplicationFactorFromOpts(0xc0001de120, 0x13, 0x6b3fe0, 0xc0000120e0, 0x4)
        /home/vincent/dev/go/src/github.com/gocql/gocql/topology.go:67 +0x2bd
github.com/gocql/gocql.getStrategy(0xc000156960, 0xc, 0xc000156960)
        /home/vincent/dev/go/src/github.com/gocql/gocql/topology.go:86 +0x1de
github.com/gocql/gocql.(*tokenAwareHostPolicy).updateReplicas(0xc0000f4460, 0xc000148390, 0x720088, 0xc)
        /home/vincent/dev/go/src/github.com/gocql/gocql/policies.go:455 +0x228
github.com/gocql/gocql.(*tokenAwareHostPolicy).KeyspaceChanged(0xc0000f4460, 0x720088, 0xc, 0x0, 0x0)
        /home/vincent/dev/go/src/github.com/gocql/gocql/policies.go:443 +0xac
github.com/gocql/gocql.(*Session).init(0xc00009d880, 0xc0000f44d0, 0x0)
        /home/vincent/dev/go/src/github.com/gocql/gocql/session.go:280 +0x5ca
github.com/gocql/gocql.NewSession(0xc0000aa920, 0x1, 0x1, 0x71e4b4, 0x5, 0x0, 0x23c34600, 0x23c34600, 0x2352, 0x720088, ...)
        /home/vincent/dev/go/src/github.com/gocql/gocql/session.go:166 +0x7fd
github.com/gocql/gocql.(*ClusterConfig).CreateSession(...)
        /home/vincent/dev/go/src/github.com/gocql/gocql/cluster.go:185
main.main()
        /home/vincent/tmp/gocql-rf0-repro/main.go:22 +0x340
```

But if I _don't_ force the keyspace and leave it blank, everything works fine.

I don't think this should panic because:
* this use case is legitimate
* gocql is fine with a RF of 0 in some cases
* the java driver doesn't have a problem with a RF of 0

Here is the code I used to reproduce the bug:

```go
package main

import (
	"log"
	"os"
	"time"

	"github.com/gocql/gocql"
	"github.com/sirupsen/logrus"
)

func main() {
	gocql.Logger = log.New(os.Stderr, "gocql", 0)

	cfg := gocql.NewCluster("127.0.10.1:9042")
	cfg.HostFilter = gocql.DataCentreHostFilter("DC1")
	cfg.Keyspace = "vincent_test"

	fallback := gocql.RoundRobinHostPolicy()
	cfg.PoolConfig.HostSelectionPolicy = gocql.TokenAwareHostPolicy(fallback)

	session, err := cfg.CreateSession()
	if err != nil {
		logrus.Fatal(err)
	}

	for range time.Tick(5 * time.Second) {
		iter := session.Query("SELECT * FROM vincent_test.foobar").Iter()
		var (
			id       gocql.UUID
			username string
		)
		for iter.Scan(&id, &username) {
			logrus.Printf("id: %s username: %s", id, username)
		}

		if err := iter.Close(); err != nil {
			logrus.Fatal(err)
		}
	}
}

```

and the schema:

```
CREATE KEYSPACE vincent_test WITH replication = {'class': 'NetworkTopologyStrategy', 'DC1': '2', 'DC2': '0'}  AND durable_writes = true;
CREATE TABLE vincent_test.foobar ( id uuid PRIMARY KEY, username text );
```

I tested this with a cluster of 4 nodes, 2 in DC1 and 2 in DC2 on a local machine.

Happy to provide more information if necessary
Can an owner please make a release of code as it stands so I can better pin my go modules to that release? I do not want referring modules to keep updating to head as commits happen.
Using GetCustomPayload() for the first time, I mistakenly called the function after I had called Close() on the Iter. This resulted in a panic. I think it would be better for it to work similar to the Warnings() function and return nil in the case where the framer is nil.
I was trying hardly to code a working transaction query and failed.
Please add/give example code for it, thanks!
[cqlsh 5.0.1 | Cassandra 3.11.4 | CQL spec 3.4.4 | Native protocol v4]

sql := "TRUNCATE table configurationdetails"
err = gocql.Session.Query(sql).Exec()
when call Session.Query to truncate my table,but this don`t work,also don`t return an err.is this a bug? please help me .
Please answer these questions before submitting your issue. Thanks!

### What version of Cassandra are you using?
Scylla 3.1.1

### What version of Gocql are you using?
1982a06ad6b987c24beec15336019914d71b2e31

### What did you do?
Here's reproducer

Schema
```sql
create keyspace t with replication = { 'class' : 'SimpleStrategy', 'replication_factor' : 1 };
create table t(c1 text primary key);
insert into t(c1) values('1');
insert into t(c1) values('2');
insert into t(c1) values('3');
insert into t(c1) values('4');
```

Source
```go
package main

import (
	"github.com/gocql/gocql"
)

func query(session *gocql.Session) {
	var c1 string
	q := session.Query("select * from t").PageSize(2)
	defer q.Release()
	iter := q.Iter()
	count := 0
	for iter.Scan(&c1) {
		count++
		if count == 2 {
			break
		}
	}
	if err := iter.Close(); err != nil {
		panic(err)
	}
}

func main() {
	cluster := gocql.NewCluster("127.0.0.1")
	cluster.Keyspace = "t"
	session, err := cluster.CreateSession()
	if err != nil {
		panic(err)
	}

	go func() {
		for {
			query(session)
		}
	}()

	for {
		query(session)
	}
}
```

The following is important:
* Requests should execute in parallel
* Custom page size
* Iterating over rows but interrupting before next page. Other combinations of page size and count do not seem to work but I suspect this is due to how page prefetching works. In production I read single partition 1000 rows long and can reproduce the issue with count in range of 10 to 300. Everything else is working fine.

### What did you expect to see?
No panic

### What did you see instead?
```
panic: runtime error: invalid memory address or nil pointer dereference
[signal SIGSEGV: segmentation violation code=0x1 addr=0x0 pc=0x1268352]

goroutine 131 [running]:
github.com/gocql/gocql.(*queryMetrics).addAttempts(0x0, 0x1, 0xc000088780, 0x0)
        /Users/creker/Downloads/test/vendor/github.com/gocql/gocql/session.go:736 +0x22
github.com/gocql/gocql.(*Query).attempt(0xc00034e000, 0x130a148, 0x1, 0xbf750d7e77e91c40, 0xd1abeb2, 0x1524e60, 0xbf750d7e777c0e48, 0xcadb433, 0x1524e60, 0xc000168a20, ...)
        /Users/creker/Downloads/test/vendor/github.com/gocql/gocql/session.go:958 +0x60
github.com/gocql/gocql.(*queryExecutor).attemptQuery(0xc0000a6de0, 0x136eaa0, 0xc000092008, 0x1371aa0, 0xc00034e000, 0xc00015e200, 0x0)
        /Users/creker/Downloads/test/vendor/github.com/gocql/gocql/query_executor.go:32 +0x123
github.com/gocql/gocql.(*queryExecutor).do(0xc0000a6de0, 0x136eaa0, 0xc000092008, 0x1371aa0, 0xc00034e000, 0x0)
        /Users/creker/Downloads/test/vendor/github.com/gocql/gocql/query_executor.go:112 +0x1c0
github.com/gocql/gocql.(*queryExecutor).executeQuery(0xc0000a6de0, 0x1371aa0, 0xc00034e000, 0x0, 0x0, 0x0)
        /Users/creker/Downloads/test/vendor/github.com/gocql/gocql/query_executor.go:60 +0x437
github.com/gocql/gocql.(*Session).executeQuery(0xc000099880, 0xc00034e000, 0x0)
        /Users/creker/Downloads/test/vendor/github.com/gocql/gocql/session.go:431 +0xb7
github.com/gocql/gocql.(*nextIter).fetch.func1()
        /Users/creker/Downloads/test/vendor/github.com/gocql/gocql/session.go:1497 +0x3e
sync.(*Once).doSlow(0xc000080a90, 0xc0003577b0)
        /usr/local/go/src/sync/once.go:66 +0xe3
sync.(*Once).Do(...)
        /usr/local/go/src/sync/once.go:57
github.com/gocql/gocql.(*nextIter).fetch(0xc000080a80, 0x1503e14)
        /Users/creker/Downloads/test/vendor/github.com/gocql/gocql/session.go:1496 +0x6e
created by github.com/gocql/gocql.(*Iter).Scan
        /Users/creker/Downloads/test/vendor/github.com/gocql/gocql/session.go:1394 +0x4cc
exit status 2
```

This is just one of the panic examples. In production I was able to get all kinds of panics. Here's a few more:
```
panic: runtime error: invalid memory address or nil pointer dereference
[signal SIGSEGV: segmentation violation code=0x1 addr=0x348 pc=0x13c00ab]

goroutine 163 [running]:
sync.(*RWMutex).RLock(...)
        /usr/local/go/src/sync/rwmutex.go:48
github.com/gocql/gocql.(*Session).Closed(0x0, 0x100000001)
        /proj/vendor/github.com/gocql/gocql/session.go:419 +0x2b
github.com/gocql/gocql.(*Session).executeQuery(0x0, 0xc000169e60, 0xbc237a68bd389)
        /proj/vendor/github.com/gocql/gocql/session.go:427 +0x2f
github.com/gocql/gocql.(*nextIter).fetch.func1()
        /proj/vendor/github.com/gocql/gocql/session.go:1497 +0x3e
sync.(*Once).doSlow(0xc00021cdc0, 0xc00028cfb0)
        /usr/local/go/src/sync/once.go:66 +0xe3
sync.(*Once).Do(...)
        /usr/local/go/src/sync/once.go:57
github.com/gocql/gocql.(*nextIter).fetch(0xc00021cdb0, 0x19189a0)
        /proj/vendor/github.com/gocql/gocql/session.go:1496 +0x6e
created by github.com/gocql/gocql.(*Iter).Scan
        /proj/vendor/github.com/gocql/gocql/session.go:1394 +0x4cc
exit status 2
```
```
panic: runtime error: index out of range [0] with length 0

goroutine 109 [running]:
github.com/gocql/gocql.createRoutingKey(0xc0000a51a0, 0x0, 0x0, 0x0, 0x34, 0xc0000a51a0, 0x0, 0x0, 0x0)
        /proj/vendor/github.com/gocql/gocql/session.go:1759 +0x420
github.com/gocql/gocql.(*Query).GetRoutingKey(0xc0002286c0, 0x0, 0x0, 0x0, 0x0, 0x0)
        /proj/vendor/github.com/gocql/gocql/session.go:1015 +0xf7
github.com/gocql/gocql.(*tokenAwareHostPolicy).Pick(0xc0001fd0a0, 0x1a54fc0, 0xc0002286c0, 0x0)
        /proj/vendor/github.com/gocql/gocql/policies.go:584 +0x52
github.com/gocql/gocql.(*queryExecutor).do(0xc00015f720, 0x1a4ab00, 0xc0000aa000, 0x1a54fc0, 0xc0002286c0, 0x0)
        /proj/vendor/github.com/gocql/gocql/query_executor.go:87 +0x63
github.com/gocql/gocql.(*queryExecutor).executeQuery(0xc00015f720, 0x1a54fc0, 0xc0002286c0, 0x0, 0x0, 0x0)
        /proj/vendor/github.com/gocql/gocql/query_executor.go:60 +0x437
github.com/gocql/gocql.(*Session).executeQuery(0xc000214380, 0xc0002286c0, 0xbc26296cd34fd)
        /proj/vendor/github.com/gocql/gocql/session.go:431 +0xb7
github.com/gocql/gocql.(*nextIter).fetch.func1()
        /proj/vendor/github.com/gocql/gocql/session.go:1497 +0x3e
sync.(*Once).doSlow(0xc00014f0f0, 0xc0002d9fb0)
        /usr/local/go/src/sync/once.go:66 +0xe3
sync.(*Once).Do(...)
        /usr/local/go/src/sync/once.go:57
github.com/gocql/gocql.(*nextIter).fetch(0xc00014f0e0, 0x19189a0)
        /proj/vendor/github.com/gocql/gocql/session.go:1496 +0x6e
created by github.com/gocql/gocql.(*Iter).Scan
        /proj/vendor/github.com/gocql/gocql/session.go:1394 +0x4cc
exit status 2
```
```
panic: runtime error: invalid memory address or nil pointer dereference
[signal SIGSEGV: segmentation violation code=0x1 addr=0x20 pc=0x13c05c8]

goroutine 150 [running]:
sync.(*Mutex).Lock(...)
        /usr/local/go/src/sync/mutex.go:74
github.com/gocql/gocql.(*Session).routingKeyInfo(0x0, 0x1a4ab00, 0xc0000aa000, 0x0, 0x0, 0x0, 0x0, 0x0)
        /proj/vendor/github.com/gocql/gocql/session.go:480 +0x58
github.com/gocql/gocql.(*Query).GetRoutingKey(0xc00021a360, 0x0, 0x0, 0x0, 0x0, 0x0)
        /proj/vendor/github.com/gocql/gocql/session.go:1010 +0x92
github.com/gocql/gocql.(*tokenAwareHostPolicy).Pick(0xc0001d25b0, 0x1a54fc0, 0xc00021a360, 0x0)
        /proj/vendor/github.com/gocql/gocql/policies.go:584 +0x52
github.com/gocql/gocql.(*queryExecutor).do(0xc0001ec020, 0x1a4ab00, 0xc0000aa000, 0x1a54fc0, 0xc00021a360, 0x0)
        /proj/vendor/github.com/gocql/gocql/query_executor.go:87 +0x63
github.com/gocql/gocql.(*queryExecutor).executeQuery(0xc0001ec020, 0x1a54fc0, 0xc00021a360, 0x0, 0x0, 0x0)
        /proj/vendor/github.com/gocql/gocql/query_executor.go:60 +0x437
github.com/gocql/gocql.(*Session).executeQuery(0xc0000d3500, 0xc00021a360, 0x0)
        /proj/vendor/github.com/gocql/gocql/session.go:431 +0xb7
github.com/gocql/gocql.(*nextIter).fetch.func1()
        /proj/vendor/github.com/gocql/gocql/session.go:1497 +0x3e
sync.(*Once).doSlow(0xc0001d9b10, 0xc0001e2fb0)
        /usr/local/go/src/sync/once.go:66 +0xe3
sync.(*Once).Do(...)
        /usr/local/go/src/sync/once.go:57
github.com/gocql/gocql.(*nextIter).fetch(0xc0001d9b00, 0x19189a0)
        /proj/vendor/github.com/gocql/gocql/session.go:1496 +0x6e
created by github.com/gocql/gocql.(*Iter).Scan
        /proj/vendor/github.com/gocql/gocql/session.go:1394 +0x4cc
exit status 2
```

I suspect I could get a few more but they all would have the same origin as the above
```
created by github.com/gocql/gocql.(*Iter).Scan
        /proj/vendor/github.com/gocql/gocql/session.go:1394 +0x4cc
```
Please answer these questions before submitting your issue. Thanks!

### What version of Cassandra are you using?
3.4.4

### What version of Gocql are you using?
github.com/gocql/gocql v0.0.0-20191126110522-1982a06ad6b9

### What did you do?
Create session failed:
session, err := cluster.CreateSession()
err is not nil.
I am able to connect to the same host:port via telnet, netcat, or golang net.Dial.

### What did you expect to see?
Create session should succeed.

### What did you see instead?
unable to create session: unable to discover protocol version: gocql: no response to connection startup within timeout
---

If you are having connectivity related issues please share the following additional information

### Describe your Cassandra cluster
please provide the following information

- output of `nodetool status`
```
./nodetool status
Datacenter: eu-ireland
======================
Status=Up/Down
|/ State=Normal/Leaving/Joining/Moving
--  Address         Load       Tokens       Owns (effective)  Host ID                               Rack
UN  192.168.23.160  103.63 KiB  256          100.0%            c2950c74-2ac8-498a-9de3-6af325842c19  1c
```

- output of `SELECT peer, rpc_address FROM system.peers`
```
cassandra@cqlsh> SELECT peer, rpc_address FROM system.peers;

 peer | rpc_address
------+-------------

(0 rows)
```

- rebuild your application with the `gocql_debug` tag and post the output
```
Would you please tell me how to rebuild your application with the `gocql_debug` tag ?
```

I think everything is in the title. In fact, a `CreatedAt` field name would result to be `createdat` instead of anything custom such as `created_at` or `CreatedAt`

```
package models

import (
	"github.com/gocql/gocql"
	"time"
)

type CMessage struct {
	ID            *gocql.UUID `protobuf:"bytes,1,opt,name=ID,proto3" json:"ID,omitempty" cql:"ID"`
	IsArchived    bool        `protobuf:"varint,2,opt,name=IsArchived,proto3" json:"IsArchived,omitempty" cql:"IsArchived"`
	CreatedAt     time.Time   `protobuf:"bytes,3,opt,name=CreatedAt,proto3" json:"CreatedAt,omitempty" cql:"CreatedAt"`
	UpdatedAt     time.Time   `protobuf:"bytes,4,opt,name=UpdatedAt,proto3" json:"UpdatedAt,omitempty" cql:"UpdatedAt"`
	ThreadID      string      `protobuf:"bytes,5,opt,name=ThreadID,proto3" json:"ThreadID,omitempty" cql:"ThreadID"`
	MessageStatus int32       `protobuf:"varint,6,opt,name=MessageStatus,proto3" json:"MessageStatus,omitempty" cql:"MessageStatus"`
	SentAt        time.Time   `protobuf:"bytes,7,opt,name=SentAt,proto3" json:"SentAt,omitempty" cql:"SentAt"`
	SenderID      string      `protobuf:"bytes,8,opt,name=SenderID,proto3" json:"SenderID,omitempty" cql:"SenderID"`
	MessageType   int32       `protobuf:"varint,9,opt,name=MessageType,proto3" json:"MessageType,omitempty" cql:"MessageType"`
	UserIDWhoLeft string      `protobuf:"bytes,10,opt,name=UserWhoLeft,proto3" json:"UserIDWhoLeft,omitempty" cql:"UserIDWhoLeft"`
	Content       string      `protobuf:"bytes,11,opt,name=Content,proto3" json:"Content,omitempty" cql:"Content"`
}
```
I'd like to inject net.Dialer from outside of this package.
I added an option to receive net.Dialer in ClusterConfig.