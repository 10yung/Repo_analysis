We should be able to simplify the Kodein-DI modules by merging modules:

> kodein-di-core
> kodein-di-erased 
> kodein-di-gemeric-jvm

into 

> kodien-di

- Use `typeOf` in to handle erased type in `AllNative` targets
- Keep the use of `generic()` for `JVM` targets
I'm not sure if this warrants a fix, because it technically only can happen when something else is causing issues. 

[There's a bug in R8](https://issuetracker.google.com/issues/147386014) (the Android code shrinker) that could in rare occasions cause `Class<T>.getGenericInterfaces` to return an array that contains `T`.

Kodein could fix it as a sanity check (basically put a filter before `any` to ensure that `typeToken` isn't in the returned array), or just let R8 get fixed. I leave it to the maintainers to decide :smile: 
Following up from 2017 (https://github.com/Kodein-Framework/Kodein-DI/issues/62) can we please get sources included?
Use case:

```
class MetricsServiceProvider(
    private val configuration: Configuration,
    private val shutdownManager: ShutdownManager
) : Provider<MetricsService> {
    ovveride fun get(): MetricsService {
        //.. code that initializes and setups MetricsService
    }
}
```

I moved service initialization in class with dependencies, I'd like to do something like this:

```
bind<MetricsService>() with provider<MetricsServiceProvider>()
```

right now, only way is:

```
bind<MetricsService>() with singleton { MetricsServiceProvider(instance(), instance()).get() }
```

This is common pattern in [guice](https://github.com/google/guice/wiki/ProviderBindings)/[spring](https://docs.spring.io/spring-javaconfig/docs/1.0.0.M4/reference/html/ch02s02.html).
I have a Kotlin multiplatform project with kotlin native (iOS) as one of the targets.

When I try to compile the iOS code in XCode I get the following errors:

`Cannot find protocol declaration for 'AppKodein_di_coreDKodein'; did you mean 'AppKodein_di_coreKodein'?`

On the lines marked with a comment below:

```objectivec
__attribute__((swift_name("Kodein_di_coreDKodeinAware")))
@protocol AppKodein_di_coreDKodeinAware
@required
/* Error on this line */ @property (readonly) id<AppKodein_di_coreDKodein> dkodein __attribute__((swift_name("dkodein")));
@end;

__attribute__((swift_name("Kodein_di_coreDKodeinBase")))
@protocol AppKodein_di_coreDKodeinBase <AppKodein_di_coreDKodeinAware>
@required
- (id (^)(id _Nullable))FactoryArgType:(id<AppKodein_di_coreTypeToken>)argType type:(id<AppKodein_di_coreTypeToken>)type tag:(id _Nullable)tag __attribute__((swift_name("Factory(argType:type:tag:)")));
- (id (^ _Nullable)(id _Nullable))FactoryOrNullArgType:(id<AppKodein_di_coreTypeToken>)argType type:(id<AppKodein_di_coreTypeToken>)type tag:(id _Nullable)tag __attribute__((swift_name("FactoryOrNull(argType:type:tag:)")));
- (id)InstanceType:(id<AppKodein_di_coreTypeToken>)type tag:(id _Nullable)tag __attribute__((swift_name("Instance(type:tag:)")));
- (id)InstanceArgType:(id<AppKodein_di_coreTypeToken>)argType type:(id<AppKodein_di_coreTypeToken>)type tag:(id _Nullable)tag arg:(id _Nullable)arg __attribute__((swift_name("Instance(argType:type:tag:arg:)")));
- (id _Nullable)InstanceOrNullType:(id<AppKodein_di_coreTypeToken>)type tag:(id _Nullable)tag __attribute__((swift_name("InstanceOrNull(type:tag:)")));
- (id _Nullable)InstanceOrNullArgType:(id<AppKodein_di_coreTypeToken>)argType type:(id<AppKodein_di_coreTypeToken>)type tag:(id _Nullable)tag arg:(id _Nullable)arg __attribute__((swift_name("InstanceOrNull(argType:type:tag:arg:)")));
/* ...and on this line */- (id<AppKodein_di_coreDKodein>)OnContext:(id<AppKodein_di_coreKodeinContext>)context __attribute__((swift_name("On(context:)")));
- (id (^)(void))ProviderType:(id<AppKodein_di_coreTypeToken>)type tag:(id _Nullable)tag __attribute__((swift_name("Provider(type:tag:)")));
- (id (^)(void))ProviderArgType:(id<AppKodein_di_coreTypeToken>)argType type:(id<AppKodein_di_coreTypeToken>)type tag:(id _Nullable)tag arg:(id _Nullable (^)(void))arg __attribute__((swift_name("Provider(argType:type:tag:arg:)")));
- (id (^ _Nullable)(void))ProviderOrNullType:(id<AppKodein_di_coreTypeToken>)type tag:(id _Nullable)tag __attribute__((swift_name("ProviderOrNull(type:tag:)")));
- (id (^ _Nullable)(void))ProviderOrNullArgType:(id<AppKodein_di_coreTypeToken>)argType type:(id<AppKodein_di_coreTypeToken>)type tag:(id _Nullable)tag arg:(id _Nullable (^)(void))arg __attribute__((swift_name("ProviderOrNull(argType:type:tag:arg:)")));
@property (readonly) id<AppKodein_di_coreKodeinContainer> container __attribute__((swift_name("container")));
@property (readonly) id<AppKodein_di_coreKodein> kodein __attribute__((swift_name("kodein")));
@property (readonly) id<AppKodein_di_coreKodein> lazy __attribute__((swift_name("lazy")));
@end;
```

**Gradle version:** 5.3.1

```properties
# File: gradle.properties

kotlin.code.style=official

# versions
gradle_android_version = 3.2.0

kotlin_version = 1.3.40
kotlin_native_version = 1.3.40
ktor_version = 1.2.2
kotlinx_coroutines_version = 1.2.2
kotlinx_serialization_version = 0.11.1
kodein_version = 6.3.0
```

```groovy
// File: settings.gradle

pluginManagement {
    resolutionStrategy {
        eachPlugin {
            if (requested.id.id == "kotlin-multiplatform") {
                useModule("org.jetbrains.kotlin:kotlin-gradle-plugin:${requested.version}")
            }
        }
    }

}
enableFeaturePreview('GRADLE_METADATA')

rootProject.name = 'DemoProject'

include ':app'
```

```groovy
// File: build.gradle in root
buildscript {
    repositories {
        jcenter()
        google()
    }
    dependencies {
        classpath "com.android.tools.build:gradle:$gradle_android_version"
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath "org.jetbrains.kotlin:kotlin-serialization:$kotlin_version"
    }
}
repositories {
    google()
    jcenter()
}
```

```groovy
// FIle: build.gralde in app

plugins {
    id 'kotlin-multiplatform'
    id 'kotlinx-serialization'
}
repositories {
    google()
    jcenter()
    mavenCentral()
}

apply plugin: 'com.android.application'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'

android {
    compileSdkVersion 28
    defaultConfig {
        applicationId 'com.example.DemoProject'
        minSdkVersion 23
        targetSdkVersion 28
        versionCode 1
        versionName '0.1'
        testInstrumentationRunner 'android.support.test.runner.AndroidJUnitRunner'
    }
    buildTypes {
        release {
            minifyEnabled false
        }
    }
    packagingOptions {
        exclude 'META-INF/*.kotlin_module'
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation "androidx.appcompat:appcompat:$appcompat_version"
    implementation "androidx.recyclerview:recyclerview:$recycleview_version"
    implementation "androidx.constraintlayout:constraintlayout:$constraint_layout_version"
    androidTestImplementation 'com.android.support.test:runner:1.0.2'
}

kotlin {

    targets {
        fromPreset(presets.android, 'android')
        fromPreset(presets.iosX64, 'ios') {
            binaries {
                framework {
                    baseName = "app"
                }
            }
        }
    }

    sourceSets {
        sourceSets {
            commonMain {
                dependencies {
                    implementation kotlin('stdlib-common')
                    implementation "io.ktor:ktor-client-core:$ktor_version"
                    implementation "io.ktor:ktor-client-json:$ktor_version"
                    implementation "io.ktor:ktor-client-serialization:$ktor_version"

                    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core-common:$kotlinx_coroutines_version"
                    implementation "org.jetbrains.kotlinx:kotlinx-serialization-runtime:$kotlinx_serialization_version"

                    implementation "org.kodein.di:kodein-di-erased:$kodein_version"
                }
            }
            commonTest {
                dependencies {
                    implementation kotlin('test-common')
                    implementation kotlin('test-annotations-common')
                }
            }
            androidMain {
                dependencies {
                    implementation kotlin('stdlib')
                    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:$kotlinx_coroutines_version"

                    implementation "org.jetbrains.kotlinx:kotlinx-serialization-runtime:$kotlinx_serialization_version"
                    
                    implementation "io.ktor:ktor-client-core-jvm:$ktor_version"
                    implementation "io.ktor:ktor-client-json-jvm:$ktor_version"
                    implementation "io.ktor:ktor-client-serialization-jvm:$ktor_version"
                    implementation "io.ktor:ktor-client-android:$ktor_version"
                }
            }
            androidTest {
                dependencies {
                    implementation kotlin('test')
                    implementation kotlin('test-junit')
                }
            }
            iosMain {
                dependencies {
                    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core-native:$kotlinx_coroutines_version"
                    implementation "org.jetbrains.kotlinx:kotlinx-serialization-runtime-native:$kotlinx_serialization_version"

                    implementation "io.ktor:ktor-client-ios-iosx64:$ktor_version"
                    implementation "io.ktor:ktor-client-ios:$ktor_version"
                    implementation "io.ktor:ktor-client-core-native:$ktor_version"
                    implementation "io.ktor:ktor-client-json-native:$ktor_version"
                    implementation "io.ktor:ktor-client-serialization-iosx64:$ktor_version"
                }
            }
            iosTest {
            }
        }
    }
}

// This task attaches native framework built from ios module to Xcode project
// (see iosApp directory). Don't run this task directly,
// Xcode runs this task itself during its build process.
// Before opening the project from iosApp directory in Xcode,
// make sure all Gradle infrastructure exists (gradle.wrapper, gradlew).
task copyFramework {
    def buildType = project.findProperty('kotlin.build.type') ?: 'DEBUG'
    def target = project.findProperty('kotlin.target') ?: 'ios'
    dependsOn kotlin.targets."$target".binaries.getFramework(buildType).linkTask

    doLast {
        def srcFile = kotlin.targets."$target".binaries.getFramework(buildType).outputFile
        def targetDir = getProperty('configuration.build.dir')
        def frameworkName = kotlin.targets."$target".binaries.getFramework(buildType).baseName

        print("srcFile.parent $srcFile.parent")
        print("targetDir $targetDir")
        print("frameworkName $frameworkName")

        copy {
            from srcFile.parent
            into targetDir
            include "${frameworkName}.framework/**"
            include "${frameworkName}.framework.dSYM"
        }
    }
}

```
I have this code in kodein erased, wich returns all instances of Foo. 

` 
Bind(erasedComp1<List<Foo>, Foo>()) with singleton {
            val key = Kodein.Key(kodein.kodeinContext.anyType, UnitToken, erased<Foo>(), null)
            kodein.container.allProviders(key, context).map { it.invoke() }
}`

My project is android ios multiplatform, and this code is working on Android, but crashes on iOS.

Do you know why?