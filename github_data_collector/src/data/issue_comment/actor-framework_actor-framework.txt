Closes #1013.
Sorry to bother you and feel free to close this issue if it's not a right place for it.

While working with https://github.com/zeek/zeek I decided that I want to handle workers using `go` and they use `caf` for connection of external programs (https://github.com/zeek/broker), hence I was wondering is it possible to connect to actor framework from other languages (at the moment I'm interested at go). What I need to do this is either minimal API that will handle network layer for me, or some info on wire protocol (Is there docs somewhere? Is it stable?). 

Sure, full bindings are an option as well, but `go` has it's own actor system and it wouldn't be welcomed by community to have some threads being ran by `C++` code and our own pool of goroutines next to it (and not very efficient either, I think). I feel like connecting will be more idiomatic way of doing it.
```
caf::uri path = caf::uri_builder().scheme("file").host("localhost").path("/tmp/test/test.{:04d}.exr").make()
std::cout << to_string(path) << std::endl;
std::cout << to_string(*caf::make_uri(to_string(path))) << std::endl;
```
returns
file://localhost/tmp/test/test.{%3A04d}.exr
the second cout segfaults.

As far as I'm aware "{ }" aren't valid url characters and should be % escaped. I suspect that is the root of the problem.

Also it doesn't seem to support 
"file:///" prefix, which is valid AFAIK.

cheers.



The choose policy simply picks the first valid result for a fan-out request and ignores all other responses.
Inbound paths call `erase_later` when receiving a `close` message. This ultimately removes the queue for incoming stream traffic in WDRR queue's `cleanup`. However, if this removes the final path a stream manger, then the manager won't get removed from the actor. This potentially delays `scheduled_actor::cleanup` forever, causing the actor to never terminate.
Having an issue with warning C4244 when building in level 4.

Build output, removed paths with [...] to clarify. :

C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.24.28314\include\utility(149,16): **warning C4244**: 'initializing': conversion from '_Ty' to '_Ty1', possible loss of data
1>        with
1>        [
1>            _Ty=int
1>        ]
1>        and
1>        [
1>            _Ty1=uint16_t
1>        ]
[...]\include\caf\detail\tuple_vals.hpp(78): message : see reference to function template instantiation 'std::pair<uint16_t,const type_info *>::pair<int,const type_info*,0>(_Other1 &&,_Other2 &&) noexcept' being compiled
1>        with
1>        [
1>            _Other1=int,
1>            _Other2=const type_info *
1>        ]
[...]\include\caf\detail\tuple_vals.hpp(78): message : see reference to function template instantiation 'std::pair<uint16_t,const type_info *>::pair<int,const type_info*,0>(_Other1 &&,_Other2 &&) noexcept' being compiled
1>        with
1>        [
1>            _Other1=int,
1>            _Other2=const type_info *
1>        ]
[...]\include\caf\detail\tuple_vals.hpp(77): message : while compiling class template member function 'caf::type_erased_tuple::rtti_pair caf::detail::tuple_vals_type_helper<mipactors::ClientPhysicalId,0>::get(void) noexcept'
[...]\include\caf\detail\tuple_vals.hpp(110): message : see reference to function template instantiation 'caf::type_erased_tuple::rtti_pair caf::detail::tuple_vals_type_helper<mipactors::ClientPhysicalId,0>::get(void) noexcept' being compiled
[...]\include\caf\detail\tuple_vals.hpp(110): message : see reference to class template instantiation 'caf::detail::tuple_vals_type_helper<mipactors::ClientPhysicalId,0>' being compiled
[...]\include\caf\mailbox_element.hpp(120): message : see reference to function template instantiation 'caf::detail::tuple_vals_impl<caf::type_erased_tuple,mipactors::ClientPhysicalId>::tuple_vals_impl<const mipactors::ClientPhysicalId&>(const mipactors::ClientPhysicalId &)' being compiled
[...]\include\caf\mailbox_element.hpp(119): message : see reference to function template instantiation 'caf::detail::tuple_vals_impl<caf::type_erased_tuple,mipactors::ClientPhysicalId>::tuple_vals_impl<const mipactors::ClientPhysicalId&>(const mipactors::ClientPhysicalId &)' being compiled
[...]\include\caf\mailbox_element.hpp(213): message : see reference to function template instantiation 'caf::mailbox_element_vals<mipactors::ClientPhysicalId>::mailbox_element_vals<const mipactors::ClientPhysicalId&>(caf::strong_actor_ptr &&,caf::message_id,caf::mailbox_element::forwarding_stack &&,const mipactors::ClientPhysicalId &)' being compiled
[...]\include\caf\mailbox_element.hpp(212): message : see reference to function template instantiation 'caf::mailbox_element_vals<mipactors::ClientPhysicalId>::mailbox_element_vals<const mipactors::ClientPhysicalId&>(caf::strong_actor_ptr &&,caf::message_id,caf::mailbox_element::forwarding_stack &&,const mipactors::ClientPhysicalId &)' being compiled
[...]\include\caf\abstract_actor.hpp(120): message : see reference to function template instantiation 'std::unique_ptr<caf::mailbox_element,caf::detail::disposer> caf::make_mailbox_element<const mipactors::ClientPhysicalId&,>(caf::strong_actor_ptr,caf::message_id,caf::mailbox_element::forwarding_stack,T)' being compiled
1>        with
1>        [
1>            T=const mipactors::ClientPhysicalId &
1>        ]
[...]\include\caf\mixin\sender.hpp(84): message : see reference to function template instantiation 'void caf::abstract_actor::eq_impl<const mipactors::ClientPhysicalId&>(caf::message_id,caf::strong_actor_ptr,caf::execution_unit *,const mipactors::ClientPhysicalId &)' being compiled
[...]): message : see reference to function template instantiation 'void caf::mixin::sender<B,D>::send<caf::message_priority::high,caf::actor,const mipactors::ClientPhysicalId&>(const Dest &,const mipactors::ClientPhysicalId &)' being compiled
1>        with
1>        [
1>            B=caf::mixin::requester<caf::local_actor,caf::blocking_actor>,
1>            D=caf::blocking_actor,
1>            Dest=caf::actor
1>        ]
[...] message : see reference to function template instantiation 'void caf::mixin::sender<B,D>::send<caf::message_priority::high,caf::actor,const mipactors::ClientPhysicalId&>(const Dest &,const mipactors::ClientPhysicalId &)' being compiled
1>        with
1>        [
1>            B=caf::mixin::requester<caf::local_actor,caf::blocking_actor>,
1>            D=caf::blocking_actor,
1>            Dest=caf::actor
1>        ]

The issue seems caused by returning an int instead of a uint16_t in **tuple_vals.hpp**:

template <class T>
struct tuple_vals_type_helper<T, 0> {
  static typename message_data::rtti_pair get() noexcept {
    return {0, &typeid(T)};
  }
};

and **type_erased_value_impl.hpp**:

  static rtti_pair type(std::integral_constant<uint16_t, 0>) {
    return { 0, &typeid(value_type)};
  }

This is phase one of the messaging overhaul (see #1006). Dropping the custom atom type is the first step for refactoring the pattern matching and ultimately `caf::message`.

Most changes are straightforward, only the current iteration of BASP's named receiver feature feels quicke hacky. However, `caf_net` already provides a better way for talking to well-known remote actors via URI path resolution. Hence, I think this workaround in `caf_io` is OK since the module is going to become deprecated (hopefully later this year).
From our [blog](http://blog.actor-framework.org/2019-11/breaking-changes):

> Over the course of the last years of developing CAF, we came to understand       
> `message` as a `variant`-like type able to hold any tuple type used for actor 
> messaging. The current design can play that role, but the implementation is a 
> highly flexible container that holds arbitrary data, offers views and even       
> enables composing messages in tree-like structures. This flexibility comes at a
> cost. Obvious costs through virtual dispatch, but also runtime overhead for      
> matching message handler signatures to the content of incoming messages.         
> Further, because a message can essentially hold anything, CAF has to include a 
> lot of meta data in each message on the wire. This increases size overhead on 
> the wire but also makes deserializing messages costly.                        
>                                                                               
> Streamlining the messaging layer in CAF has the potential to improve performance
> significantly. First prototypes for a new messaging layer speed up the matching
> of messages to handlers as well as deserializing messages by a factor of 3. The
> downside of that design is that users have to enumerate all allowed types in the
> system. We did not reach full agreement whether we want to go down that route,
> but it would also allow CAF to better target embedded systems, as the new     
> messaging layer would no longer require RTTI and stores less meta data. 

We can break down this vision into a series of steps:

- Remove `caf::atom`. The *concept* of atoms is still useful, but we can use tag types instead.
- Drop the current iteration of `uniform_type_info_map`. We are going to care about user-defined type numbers only. This means we can get rid of anything related to `std::type_info`.
- Streamline `caf::message` and get rid of type-erased tuples and values. Inspecting a `caf::message` is costly and requires many virtual function calls. All meta information we're going to need is a simple list of type numbers.
After commit #9053a3afe5b86186621a2e80db546f2c0c0aa1b7 that is related to #908 and #902 `caf::result` now have the following constructor:
```C++
  // clang-format off
  template <class... Us,
            class = detail::enable_if_tt<
                     detail::all_constructible<
                       detail::type_list<Ts...>,
                       detail::type_list<detail::decay_t<Us>...>>>>
  // clang-format on
  result(Us&&... xs) : flag(rt_value) {
    value = make_message(Ts{std::forward<Us>(xs)}...);
  }
```

Now, let's consider that I have a *non-serializable* `tape` with similar gready perfect-forwarding constructor (that later dispatches to a set of private constructors) and a *serializable* `tape_box` that can be constructed from `tape` instance:
```C++
struct tape {
  template<typename... Ts> tape(Ts&&... ts) { ... }
};

struct tape_box {
  tape_box(const tape& t) { ... }
};
```

Then, returning `response_promise<tape_box>` from message handler will fail:
```C++
...
[=](int value) -> result<tape_box> {
  auto res = make_response_promise<tape_box>(...);
  return res; // <- compile error here
},
...
```
because compiler tries to check if `result<tape_box>` can be constructed from `response_promise&`, to do that it tries to evaluate constructor `tape(response_promise&)` and that check will succeed, because `tape` has perfect-forwarding constructor.
After that a compile error is produced on line `value = make_message(Ts{std::forward<Us>(xs)}...);` because `tape` doesn't expect `caf::response_promise`.

Maybe it's better to whitelist predefined types like `response_promise`, `typed_response_promise<...>`, `delegated<...>` in greedy `result` constructor?
Once I run `add_outbound_path(...)`, none of my actors behaviors trigger anymore until I've generated at least one event. This includes the _exit/down handlers_ of my actor, which means I cannot properly shut down any more. 

I think what's needed here is some sort of `yield()` function for the `stream_source` that checks if there's anything else to do for the parent actor, and then calls `advance()` or returns to the _next element handler_ in some other way.

While looking at this I also noticed that the _done handler_ is not called when calling `advance()`, which might be a bug.

Relevant source code for reproduction https://github.com/tenzir/vast/blob/master/libvast/vast/system/source.hpp#L184

I'd like to add a `if (produced == 0) st.mgr.yield()` below L184 in the linked snippet to return the control flow to the parent actor in order for it to check its _exit/down handler_.

For testing: After compiling, run `echo | vast -N -v debug import zeek` and try quitting with SIGINT, which hangs indefinitely because the source actor never checks for any exit or down messages.