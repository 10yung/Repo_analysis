Android Version(s): 9
Android Device(s): Galaxy Note 9, Galaxy S8, s10
Oboe Version: 1.3.0+

**Short Description**
Samsung phones (Note9, Galaxy s8, s10) are not able to get stereo microphone signal when a TRRS cable is plugged in.

**Steps To Reproduce**
This can be tested using the LiveEffect sample app. Note these settings are required to get a stereo signal on the Note9: "->setInputPreset(oboe::InputPreset::Camcorder)->setPerformanceMode(oboe::PerformanceMode::None)". Select the first microphone in the list for "Recording device" and plug a pair of TRRS headphones.

**Expected behavior**
Should get a stereo signal of phone's built-in microphones.
Requesting a stereo microphone stream with the "setDeviceId()" of one of the built-in microphones should work when TRRS headphones are plugged in.

**Actual behavior**
The same data of only one of the phone's microphones appears in both channels.
Stereo can only be gotten with TRS headphones.

**Additional context**
Note that the "Samsung Voice Recorder" cannot record in "interview" mode when TRRS cable is plugged in.  
Pixel 1, 3, 3a do not have such issues. A stereo mic signal can be gotten with TRRS headphones when selecting either of the phone's build-in mics.

Any ideas of how to get around this are appreciated!
Android Version(s): Various
Android Device(s): Pixel 2
Oboe Version: 1.3

**Short Description**

After my app is running her a long time (hours potentially), it will eventually get a `onErrorAfterClose` callback with `ErrorTimeout` result. I've seen most examples restart the stream on 'ErrorDisconnected', but I don't see any examples of what to do on other errors like 'ErrorTimeout'. Once this happens, the app stops audio input/output. Should we generally restart the stream on any error?
do not merge please, just a test.
Use smaller buffer sizes for lower rates.
Base on 20 msec period common on Android.
Pass mSampleRate so caller can guarantee it is set.

Fixes #751
DrumThumper pull request, #757, is failing Travis but it is not clear why. Logs just says the other samples, eg. MegaDrone,  failed to build.

I pulled down DrumThumper locally and could build individual modules. But could build the Project. This might be a clue or unrelated. Failure is related to a LintCheck on the new wavlib.

Caused by: org.gradle.api.tasks.TaskExecutionException: Execution failed for task ':wavlib:extractDebugAnnotations'.
Caused by: org.gradle.api.internal.artifacts.ivyservice.DefaultLenientConfiguration$ArtifactResolveException: Could not resolve all files for configuration ':wavlib:lintClassPath'.
Caused by: org.gradle.internal.resolve.ArtifactResolveException: Could not download lint-checks.jar (com.android.tools.lint:lint-checks:26.5.3)
Caused by: org.gradle.api.resources.ResourceException: Could not get resource 'https://dl.google.com/dl/android/maven2/com/android/tools/lint/lint-checks/26.5.3/lint-checks-26.5.3.jar'.


when change the sampling rate with setSampleRate(8000), let the numFrames parameter of onAudioReady() be 20ms frame buffer size(160FPS).
Determine the timing profile for the DSP.
This only works on versions of Android
that support "aaudio.out_mmap_offset_usec" property.


Android Version(s): 8.0.0
Android Device(s): Samsung galaxy s7
Oboe Version: 1.3

**Short Description**
when I change the sampling rate with setSampleRate(), the numFrames parameter of onAudioReady() will not be reflected at the same rate.

**Steps To Reproduce**
When open oboe input stream, set the builder like followings.
```cpp
oboe::AudioStreamBuilder builder;
builder.setDirection(oboe::Direction::Input);
builder.setPerformanceMode(oboe::PerformanceMode::LowLatency);
builder.setSampleRate(8000);
builder.setFramesPerCallback(160);
```

**Expected behavior**
when I set sample rate as 8000, I want onAudioReady() 's numFrames to be 160.

**Actual behavior**
numFrames is always 960.

**Additional context**
when I modify configureBufferSizes() function in AudioStreamOpenSLES.cpp like following, It works.

```cpp
    // For high latency streams, use a larger buffer size.
    // Performance Mode support was added in N_MR1 (7.1)

    int32_t framesPerHighLatencyBurstWithResamplingRate = kFramesPerHighLatencyBurst;
    if (mSampleRate > 0 && mSampleRate < DefaultStreamValues::SampleRate) {
        framesPerHighLatencyBurstWithResamplingRate = kFramesPerHighLatencyBurst * mSampleRate / DefaultStreamValues::SampleRate;
    }

    if (getSdkVersion() >= __ANDROID_API_N_MR1__
        && mPerformanceMode != PerformanceMode::LowLatency
        && mFramesPerBurst < framesPerHighLatencyBurstWithResamplingRate) {
        // Find a multiple of framesPerBurst >= resampleFramesPerHighLatencyBurst.
        int32_t numBursts = (framesPerHighLatencyBurstWithResamplingRate + mFramesPerBurst - 1) / mFramesPerBurst;
        mFramesPerBurst *= numBursts;
        LOGD("AudioStreamOpenSLES:%s() NOT low latency, set mFramesPerBurst = %d",
             __func__, mFramesPerBurst);
    }
    mFramesPerCallback = mFramesPerBurst;
```
As you can see, I set the performance mode to PerformanceMode::LowLatency, but when check mPerformanceMode value, it isn't PerformanceMode::LowLatency.
so, I add upper code.

when I see the AudioStreamOpenSLES::updateStreamParameters(), It calls GetConfiguration() like following.
```cpp
result = (*configItf)->GetConfiguration(configItf, SL_ANDROID_KEY_PERFORMANCE_MODE,
                                                &performanceModeSize, &performanceMode);
```
but, returned performanceMode value is 0.
```cpp
mPerformanceMode = convertPerformanceMode(performanceMode);
```
so, mPerformanceMode will be PerformanceMode::None.
 
If applicable, please attach a recording of the sound.
