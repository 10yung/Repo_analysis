Hi，
What is the role of ‘seed’ parameter in tungsten.exe script？Is it used to control the texture of the material or to controlthe position of randomly generated light（spp）?
Hi!
I'm trying to build the project with Visual Studio 2013 and a recent CMake version but I have some errors. The first one is that the function in ImageIO.cpp line 457 is not recognised: "Attempting to reference a deleted function". Then I have 7 similar errors, all related to Debug/core.lib saying that the file doesn't exist for hdrmanip, obj2json, scenemanip, json2xml, tungsten, tungsten_server and editor projects. How can I solve this? Many thanks in advance
Hi,
Thank you for your excellent job！ I built the tungsten by myself, but found out that it is running much slower than the binary version shipped by KPCN project.
I wonder was there any settings I didn't make correctly? 
And also why it doesn't output the auxiliary features EXRs even if I specified that in the scene description Json file. ( But the binary version behaves correctly with the same scene json.)

Thank you very much.
MSVC 18.0.40629.0

error 184	error C2280: “std::unique_ptr<Tungsten::uint8 [],void (__cdecl *)(void *)>::unique_ptr<Tungsten::uint8*,Tungsten::ImageIO::loadJpg::<lambda_41d26953b87997855605709ea805a7f3>>(_Ptr2,_Dx2)”: Attempt to refer to deleted functions C:\Users\X\Desktop\tungsten-master\src\core\io\ImageIO.cpp	459	1	core

In ObjLoader.cpp `std::shared_ptr<Bsdf> ObjLoader::convertObjMaterial(const ObjMaterial &mat)`:

line 305 `PathPtr path = std::make_shared<Path>(mat.alphaMap);` should be `PathPtr path = std::make_shared<Path>(mat.bumpMap);`

Hi, 

I am trying to understand how rotation works in Tungsten. I notice that there are 2 rotation functions in `Mat4f`, namely `rotXYZ()` and `rotYXZ()`. I did not find documentation for the formula so I tried to compose 3 rotation matrices (w.r.t. x, y, and z axes) to reconstruct these 2 functions. However, I found some inconsistency between these 2 functions.

For a certain rotation vector `[x_angle, y_angle, z_angle]`, Assume the rotation matrices are named `rot_x(x_angle)`, `rot_y(y_angle)` and `rot_z(z_angle)`. Also assume that `rot_*.dot(v)` is the correct way to rotate a vector `v` (same convention as in Tungsten). The `rotXYZ()` function can be reconstructed as `rot_z.dot(rot_y).dot(rot_x)`. However, the `rotYXZ()` function cannot be reconstructed as `rot_z.dot(rot_x).dot(rot_y)`, as expected, but can be reconstructed by `rot_y.transpose().dot(rot_x).dot(rot_z)`. 

Could anyone explain the reason of having 2 different rotation functions that are formulated inconsistently?

Thanks in advance.
Hi Benedikt.
How about make test with your Tungsten for rendering "Moana Island Scene"?
Big thanks.
I'm trying to build *Tungsten* in Arch Linux (testing repositories enabled) and I have this error:
```
empty@Xanadu:~/git/tungsten/build/debug $ make
[  1%] Building CXX object src/thirdparty/embree/kernels/CMakeFiles/embree_sse42.dir/geometry/grid_soa.cpp.o
In file included from /usr/lib/gcc/x86_64-pc-linux-gnu/8.1.0/include/xmmintrin.h:1252,
                 from /usr/lib/gcc/x86_64-pc-linux-gnu/8.1.0/include/immintrin.h:29,
                 from /home/empty/git/tungsten/src/thirdparty/embree/include/../common/sys/intrinsics.h:25,
                 from /home/empty/git/tungsten/src/thirdparty/embree/include/../common/sys/mutex.h:20,
                 from /home/empty/git/tungsten/src/thirdparty/embree/include/../common/sys/thread.h:20,
                 from /home/empty/git/tungsten/src/thirdparty/embree/kernels/geometry/../common/default.h:21,
                 from /home/empty/git/tungsten/src/thirdparty/embree/kernels/geometry/../common/ray.h:19,
                 from /home/empty/git/tungsten/src/thirdparty/embree/kernels/geometry/grid_soa.h:19,
                 from /home/empty/git/tungsten/src/thirdparty/embree/kernels/geometry/grid_soa.cpp:17:
/home/empty/git/tungsten/src/thirdparty/embree/include/../common/simd/vboolf4_sse2.h: In function ‘const vboolf4 embree::shuffle(const vboolf4&)’:
/home/empty/git/tungsten/src/thirdparty/embree/include/../common/simd/vboolf4_sse2.h:121:12: error: could not convert ‘(__m128i)(__builtin_ia32_pshufd((__v4si)((__m128i)(a)), (int)(((((i3 << 6) | (i2 << 4)) | (i1 << 2)) | i0))))’ from ‘__m128i’ {aka ‘__vector(2) long long int’} to ‘const vboolf4’ {aka ‘const embree::vboolf<4>’}
     return _mm_shuffle_epi32(a, _MM_SHUFFLE(i3, i2, i1, i0));
            ^~~~~~~~~~~~~~~~~
make[2]: *** [src/thirdparty/embree/kernels/CMakeFiles/embree_sse42.dir/build.make:63: src/thirdparty/embree/kernels/CMakeFiles/embree_sse42.dir/geometry/grid_soa.cpp.o] Error 1
make[1]: *** [CMakeFiles/Makefile2:812: src/thirdparty/embree/kernels/CMakeFiles/embree_sse42.dir/all] Error 2
make: *** [Makefile:152: all] Error 2
2|empty@Xanadu:~/git/tungsten/build/debug $
```
GCC version:
```                                                     
gcc (GCC) 8.1.0
Copyright (C) 2018 Free Software Foundation, Inc.
This is free software; see the source for copying conditions.  There is NO
warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
```
Do you support GCC v8 yet?

EDIT: it builds fine in Debian stable.
Hi, Benedikt(@tunabrain)

Thanks for your rendering resources and papers at first, which I used and learned a lot from. I am implementing your Disney Hair/Fur BSDF(BCSDF), and I found some difference between your implementation in tungsten and pbrt's implementation when sampling the longitudinal M.

As mentioned in an open [issue](https://github.com/mmp/pbrt-v3/issues/121) of pbrt, your implementation and the paper [Importance Sampling for Physically-based Hair Fiber Models](http://cg.ibds.kit.edu/publications/pubhanika/2013_hairbrief.pdf) both firstly tilt the angle, and then sampling the M. However, pbrt's version is sampling M and then tilting. I think that your implementation and the paper's way are correct. 

Please let me know if my opinion is wrong. Thank you very much for your attention.

Zejian Wang
If anyone is trying to build this one macOS:

```
brew install eigen openexr libbtbb  
# possibly others, check what is missing at the end of CMake

brew uninstall openvdb
# it doesn't build with openvdb, probably this can be switched off in CMake with a switch

export CMAKE_PREFIX_PATH=/Users/../Qt/5.10.1/clang_64

rm -rf build
mkdir build
cd build

mkdir release
cd release
cmake -DCMAKE_BUILD_TYPE=Release ../..

make -j8
```

I don't know what OpenVDB is used for, but making sure it's not included makes it compile without errors.