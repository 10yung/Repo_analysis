I, I've written this tiny Dockerfile that someone can find useful to play githug without having prerequisites problems.
https://github.com/pomarc/githug-docker

have fun.
m
Also provides some practice using revision ranges!
I have installed ruby:
```
$ ruby -v
ruby 2.6.3p62 (2019-04-16 revision 67580) [x86_64-linux]

```
and then `github` (with sudo), but I can't get `githug` command to work. My terminal tells me that it does't exist:
```
$ githug
zsh: command not found: githug
```
I have read all threads in which someone had problems with installation but nothing had helped me. It would be grateful if sombody could help me with this one because, honestly, I have no idea what's going on. It should work but it does not.
Hello people.

While solving levels, exactly by the 18th level, I didn't do anything but typing "githug play" and I passed the level, without even trying commands in order to solve the specific task.


![image](https://user-images.githubusercontent.com/26772887/59996135-2ac49b00-9662-11e9-9aff-977d889cf49f.png)

As far as I can see, I have correctly solved level 45, however it does not pass the test from githug.

Steps to reproduce:
1. `githug reset 45`
2. `git rebase --interactive HEAD^^`
3. remove second "o" from the upper commit message, using the "reword" command
4. `githug play`
5. It says: "Sorry, this solution is not quite right!"

The output from `git log` looks like the following:

```
commit 3ef8e2ff4a65c8ce4492249dfe1ddd4dca34b618 (HEAD -> master)
Author: Florian Lüdiger <xxx@xxx>
Date:   Thu May 2 21:18:42 2019 +0200

    Second commit

commit 279921357b0966bf049a6c38284900bb2db533f6
Author: Florian Lüdiger <xxx@xxx>
Date:   Thu May 2 21:18:42 2019 +0200

    First commit

commit df3de1fc3d6254e3806169a829505513fe7856c6
Author: Florian Lüdiger <xxx@xxx>
Date:   Thu May 2 21:18:42 2019 +0200

    Initial commit
```

I have checked the [problem definition](https://github.com/Gazler/githug/blob/master/levels/rename_commit.rb) and the solution only requires the commit message to be "First commit", which it is in my case.

I have not had problems with any of the previous levels.
I was unable to complete this level because `repo.commits[1]` was not the correct commit to be checking the message of.

When setting up the level "First coommit" does exist at `repo.commits[1]` but after renaming it via rebase it was always the first commit in the list (`repo.commits.first`).

It looks like the solution for this level used to work in a similar way - you can see where it was changed from using `.first` to using `[1]` here: https://github.com/Gazler/githug/commit/7dcc3ab8640a2958b892515d19113e5e5ff05bed

This pull request fixes #255 
Hi,

We have problem statement as 'Correct the typo in the message of your first (non-root) commit.'
I'm assuming this points to second log "First coommit" entry from bellow list with typo:

    `~/githug-test/git_hug$ git log 
    commit 5ae6bca7768104998ac8aaa93d40ad6f42b3dd90 (HEAD -> master)
    Author: vikrant pawar
    Date:   Sat Feb 16 20:30:15 2019 +0530

    Second commit

    commit f877b1e0aa22ed94907de7d06d3b2c470581bb32
    Author: vikrant pawar
    Date:   Sat Feb 16 20:30:15 2019 +0530

    First coommit

    commit f03505f0316ea3eae2eaa8533bd044a79883fd8f
    Author: vikrant pawar 
    Date:   Sat Feb 16 20:30:15 2019 +0530

    Initial commit

However even after fixing it, code doesn't mark it as success .. 
While digging code I found we are using 
`repo.commits[1].message == "First commit"`
which is checking string 'Second commit' to 'First commit'.

wanted to confirm if I'm missing anything




After using `git diff` or `gitk` to see changes and running `githug` command once again there is a question:

> What is the number of the line which has changed?

According to [this stackoverflow answer](https://stackoverflow.com/a/24456418) there's no way for `git diff` to show a line number.
It is not clear that user should use another software (like vim) to get the answer.
Sometimes the branch and commit order changes when the `merge_squash` level is reset.

This is what it looked like when the level was:
- Reset (`githug reset merge_squash`)
- Logged (`git log --all --oneline`)

twice.

![powershell_2019-02-13_21-17-31](https://user-images.githubusercontent.com/13420573/52741575-f535e400-2fd5-11e9-87dd-6793b8c0ff9f.png)

The same thing is seen with `git log --all`, it was just more compact to show them with `--oneline`.

Is it just an issue with how `git log` works when several commits have the same time (hh:mm:ss), which probably happens because `github reset <level>` creates the commits quickly.

Maybe the commits are read in a random order and since the next read commit has the same time stamp, they end up in a random order.

However `git log --all --graph --online` shows them in the correct order after every reset:
```
* 603c7cd (long-feature-branch) Time
* 96bcbd3 Takes
* a9a8600 Developing new features
| * bc5e60d (HEAD -> master) Second commit
|/
* 321e479 First commit
```
Resolves #248