Is there any documentation about the state of the system when `_start` function is invoked by the bootloader? For example, what features are enabled, what is the layout of memory, what state are the processors in?
Is it always index `0`? Should this be passed in the `BootInfo` struct?
Would it be possible to have support to boot using PXE or iPXE (with iPXE downloading the bootimage.bin using TFTP for instance).

This would require changing the logic to load the files in memory (which iPXE probably takes care of).

This could be poretty helpful for development on real hardware, as it wuld allow to network boot instead of going through the write to USB manipulations.
We currently only test the bootloader without the SSE feature. We should add an additional test kernel that makes use of it.
The bootloader currently sets up huge stack for the kernel by default (512 pages = 2MB). Now that the stack size is configurable, we should probably reduce the default.

cc @64 
The current entry point is hardcoded to `_start` (or the `entry_point!` macro). This provides a single entry point to the code.

When bootstrapping SMP, the new processor starts up at a given physical address in the IPI (Inter-Processor Interrupt) in 16 bit mode. This requires us to start at 16 bit code and enable 64 bit mode again. Please provide a way to define multiple "entry points" which defaults to the current `_start` but can also be used to bootstrap SMP.
cc https://github.com/phil-opp/blog_os/issues/403#issuecomment-516832927.

@Mendess2526 let's continue the discussion here.

This will need src/stage_3.s to be adapted to stay in protected mode and to setup non-PAE page tables. It will then need at least changes to the rust part to handle non-PAE page tables.
Currently we only provide some minimal build instructions in the Readme. We should also document advanced patterns such as:

- [ ] Creating a higher half kernel
- [x] ~~Chainloading with GRUB (see #49)~~ Completed in #66

I think the best approach for now is to just create a `doc` folder with markdown files in it and link it from the Readme.
Hello all, this PR checks if VESA 2.0 or 3.0 is supported and then enables it with fixed 800x600. This is very rough, so please let me know what else we need to do.

TODO:

- [ ] Proper color handling
- [ ] Query the framebuffer address from hardware instead of hardcoding it (if possible)
- [ ] Pass the framebuffer address in BootInfo
Hello there! I need to start by saying that this project is awesome and I strongly believe it will spark the creation of some very creative pieces of software!

Nevertheless, I think it would have being awesome to add support for choosing one of the available VESA modes. Right now, you have to do it in real-time mode, while bootloader switches the processor to go to 64-bits and therefore, if you need to work with it, then you need to somehow go back to 16-bits in the kernel (or 32-bits with emulation?) and do the setup. Making bootloader do it might be the best idea (as well as give it an option to automatically choose the highest option).

As far as I understand, it can be quite a challenge, considering you have to fit it into 16-bit processor mode memory (512 first bytes?), but as far as I know, it is rather doable.

I think that [this implementation](https://github.com/redox-os/bootloader/blob/master/x86_64/vesa.asm) from Redox OS can serve as a good example.

Cheers, Alex!