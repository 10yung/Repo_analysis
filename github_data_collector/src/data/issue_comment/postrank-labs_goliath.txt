Rack is now on 2.0.7, but Goliath currently does not support 2.x

```ruby
  s.add_dependency 'rack', '>=1.2.2'
  s.add_development_dependency 'rack', '< 2'
```

Are there any plans to update support for Rack 2.x?
If the connection has been closed, there is no point in continuing iterating over the response body and continuing to send data, because it will never get written to the socket anyway. This saves on performance.

Also, once `#close` has been called on the response body, continuing to iterate over it might raise an exception. Imagine a scenario where the body is a lazy enumerable that retrieves chunks from an open file, and `#close` closes the file.
In [tus-ruby-server](https://github.com/janko-m/tus-ruby-server) I'm handling large file uploads. When the user makes a PATCH request with a chunk of the file, the app first validates request headers, and if they're invalid it returns, it returns an error response without even reading the request body.

I'm using [goliath-rack_proxy](https://github.com/janko-m/goliath-rack_proxy/blob/master/lib/goliath/rack_proxy.rb) as a glue between Goliath and the tus-ruby-server Rack app, and I'm trying to figure out how to return the response early with Goliath. The reason I want that is because I would like to avoid happily accepting multiple gigabytes of request body from a client, only to return an error response because the request headers were invalid. I would like to utilize Goliath's ability to act as soon as request headers are received.

The problem is that `.succeed` is called on the `Goliath::Request` only after all request body has been receved, and all of the `env[ASYNC_*]` procs use `callback { }`, which means they will send the response only after all request data has been received (e.g. I tried using `env[ASYNC_CALLBACK]`). I wrote the following proof-of-concept, which uses hacks to access the `Goliath::Request` object (already discussed in https://github.com/postrank-labs/goliath/pull/341) and use `Goliath::Connection#send_data` directly:

```rb
require "goliath"

class App < Goliath::API
  def on_headers(env, headers)
    request    = env[ASYNC_CALLBACK].receiver
    connection = request.conn
    response   = request.response

    response.status = 200
    response.headers = { "Foo" => "Bar" }
    response.body = "This is a response"

    response.each { |data| connection.send_data(data) }
    connection.terminate_request(false)
  end

  def response(env)
  end
end
```

I'm pretty sure that returning a response early is valid HTTP interaction, because `curl`-ing this app returns the response without any errors.

Are you open to support this in Goliath? If yes, I could come up with a PR.
Dear
how do I change the message "An error happened" when status is 500?
I need to put a customized message
I don't think the Ruby version matters here, but just in case:

```
Last login: Thu May 26 13:15:15 on ttys004
/tmp$ bundle exec ruby -v
ruby 2.3.0p0 (2015-12-25 revision 53290) [x86_64-darwin13]
/tmp$
```

I've set up a minimal repro in a gist:

```
/tmp$ git clone git@gist.github.com:e72726e947b1db9387541369ec3b389e.git repro
Cloning into 'repro'...
remote: Counting objects: 12, done.
remote: Compressing objects: 100% (8/8), done.
remote: Total 12 (delta 4), reused 9 (delta 3), pack-reused 0
Receiving objects: 100% (12/12), done.
Resolving deltas: 100% (4/4), done.
Checking connectivity... done.
/tmp$ cd repro
/tmp/repro$
```

Goliath declares a dependency on [`eventmachine >= 1.0.0.beta.4`](https://github.com/postrank-labs/goliath/blob/c3f1f953692c9eb8f2f6673de72ca1edbb035ef5/goliath.gemspec#L17). If your Gemfile does not lock to a particular eventmachine version, `bundle update` (or even your initial `bundle install`) can wind up installing eventmachine 1.2.0.1 (which, as of this writing is their latest version). This version of EM causes (at the very least) `Goliath::TestHelper` to fail mysteriously:

```
/tmp/repro$ bundle update && bundle exec ruby test.rb
Fetching git@github.com:postrank-labs/goliath.git
Fetching gem metadata from https://rubygems.org/..........
Fetching version metadata from https://rubygems.org/...
Fetching dependency metadata from https://rubygems.org/..
Resolving dependencies...
Using addressable 2.4.0
Using rack 1.6.4
Using cookiejar 0.3.0
Using einhorn 0.7.1
Using eventmachine 1.2.0.1
Using http_parser.rb 0.6.0
Using git-version-bump 0.15.1
Using log4r 1.1.10
Using multi_json 1.12.1
Using rack-accept-media-types 0.9
Using minitest 5.9.0
Using bundler 1.11.2
Using async-rack 0.5.1
Using em-socksify 0.3.1
Using em-synchrony 1.0.5
Using em-websocket 0.3.8
Using rack-contrib 1.4.0
Using rack-respond_to 0.9.8
Using em-http-request 1.1.3
Using goliath 1.0.4 from git@github.com:postrank-labs/goliath.git (at 1aeb2ae@1aeb2ae)
Bundle updated!
Run options: --seed 32896

# Running:

E

Finished in 0.011878s, 84.1900 runs/s, 0.0000 assertions/s.

  1) Error:
Test#test_reproducing_em_dependency_issue:
RuntimeError: API request failed
    /Users/avondrak/.rvm/gems/ruby-2.3.0/bundler/gems/goliath-1aeb2ae7e6d9/lib/goliath/test_helper.rb:30:in `block in <module:TestHelper>'
    /Users/avondrak/.rvm/gems/ruby-2.3.0/gems/eventmachine-1.2.0.1/lib/em/deferrable.rb:74:in `errback'
    /Users/avondrak/.rvm/gems/ruby-2.3.0/bundler/gems/goliath-1aeb2ae7e6d9/lib/goliath/test_helper.rb:110:in `hookup_request_callbacks'
    /Users/avondrak/.rvm/gems/ruby-2.3.0/bundler/gems/goliath-1aeb2ae7e6d9/lib/goliath/test_helper.rb:131:in `get_request'
    test.rb:10:in `block in test_reproducing_em_dependency_issue'
    /Users/avondrak/.rvm/gems/ruby-2.3.0/bundler/gems/goliath-1aeb2ae7e6d9/lib/goliath/server.rb:105:in `block in start'
    /Users/avondrak/.rvm/gems/ruby-2.3.0/gems/em-synchrony-1.0.5/lib/em-synchrony.rb:39:in `block (2 levels) in synchrony'

1 runs, 0 assertions, 0 failures, 1 errors, 0 skips
/tmp/repro$
```

I **do not** know what the bug is, but it seems to have been introduced by EM 1.2.0.1. If I lock the Gemfile to the previously released version, 1.0.9.1, I do not get these errors:

```
/tmp/repro$ LOCK_EM_VERSION=1 bundle update && bundle exec ruby test.rb
Fetching git@github.com:postrank-labs/goliath.git
Fetching gem metadata from https://rubygems.org/..........
Fetching version metadata from https://rubygems.org/...
Fetching dependency metadata from https://rubygems.org/..
Resolving dependencies...
Using addressable 2.4.0
Using rack 1.6.4
Using cookiejar 0.3.0
Using einhorn 0.7.1
Using eventmachine 1.0.9.1 (was 1.2.0.1)
Using http_parser.rb 0.6.0
Using git-version-bump 0.15.1
Using log4r 1.1.10
Using multi_json 1.12.1
Using rack-accept-media-types 0.9
Using minitest 5.9.0
Using bundler 1.11.2
Using async-rack 0.5.1
Using em-socksify 0.3.1
Using em-synchrony 1.0.5
Using em-websocket 0.3.8
Using rack-contrib 1.4.0
Using rack-respond_to 0.9.8
Using em-http-request 1.1.3
Using goliath 1.0.4 from git@github.com:postrank-labs/goliath.git (at 1aeb2ae@1aeb2ae)
Bundle updated!
Run options: --seed 54290

# Running:

.

Finished in 0.010082s, 99.1886 runs/s, 99.1886 assertions/s.

1 runs, 1 assertions, 0 failures, 0 errors, 0 skips
/tmp/repro$
```

At the very least, Goliath's `>=` dependency is too permissive. I don't know how to make Goliath compatible with EM 1.2.0.1, but I do know that a recent `bundle update` on my project has broken basically all of the tests. (Also, I get runtime errors when I don't [declare an `em-http-request`](https://gist.github.com/ajvondrak/e72726e947b1db9387541369ec3b389e#file-gemfile-L9) dependency - should this be added explicitly to the Goliath gemspec?)

Hi, One of the apps at my org is deployed on heroku. While monitoring the logs on heroku we observed 
an exception and the app stops/goes to sleep. 
It is accompanied by exception like this one:

» 2 Feb 2016 18:03:22.821 2016-02-02 07:03:22.485131+00:00 heroku web.1 - - Idling
» 2 Feb 2016 18:03:22.902 2016-02-02 07:03:22.485131+00:00 heroku web.1 - - State changed from up to down
» 2 Feb 2016 18:03:26.587 2016-02-02 07:03:26.441335+00:00 heroku web.1 - - Stopping all processes with SIGTERM
» 2 Feb 2016 18:03:28.209 2016-02-02 07:03:27.893080+00:00 app web.1 - - /app/vendor/ruby-2.0.0/lib/ruby/2.0.0/monitor.rb:185:in lock': can't be called from trap context (ThreadError) from /app/vendor/ruby-2.0.0/lib/ruby/2.0.0/monitor.rb:185:inmon_enter' from /app/vendor/ruby-2.0.0/lib/ruby/2.0.0/monitor.rb:209:in mon_synchronize' from /app/vendor/bundle/ruby/2.0.0/gems/log4r-1.1.10/lib/log4r/outputter/outputter.rb:130:insynch' from /app/vendor/bundle/ruby/2.0.0/gems/log4r-1.1.10/lib/log4r/outputter/outputter.rb:110:in canonical_log' from (eval):3:ininfo' from (eval):8:in block in info' from (eval):8:ineach' from (eval):8:in info' from /app/vendor/bundle/ruby/2.0.0/gems/goliath-1.0.3/lib/goliath/server.rb:110:instop' from /app/vendor/bundle/ruby/2.0.0/gems/goliath-1.0.3/lib/goliath/server.rb:75:in block (2 levels) in start' from /app/vendor/bundle/ruby/2.0.0/gems/eventmachine-1.0.3/lib/eventmachine.rb:187:incall' from /app/vendor/bundle/ruby/2.0.0/gems/eventmachine-1.0.3/lib/eventmachine.rb:187:in run_machine' from /app/vendor/bundle/ruby/2.0.0/gems/eventmachine-1.0.3/lib/eventmachine.rb:187:inrun' from /app/vendor/bundle/ruby/2.0.0/gems/em-synchrony-1.0.3/lib/em-synchrony.rb:38:in synchrony' from /app/vendor/bundle/ruby/2.0.0/gems/goliath-1.0.3/lib/goliath/server.rb:73:instart' from /app/vendor/bundle/ruby/2.0.0/gems/goliath-1.0.3/lib/goliath/runner.rb:304:in run_server' from /app/vendor/bundle/ruby/2.0.0/gems/goliath-1.0.3/lib/goliath/runner.rb:224:inrun' from /app/vendor/bundle/ruby/2.0.0/gems/goliath-1.0.3/lib/goliath/application.rb:111:in run!' from /app/vendor/bundle/ruby/2.0.0/gems/goliath-1.0.3/lib/goliath/application.rb:133:inblock in module:Goliath' Exception
» 2 Feb 2016 18:03:29.169 2016-02-02 07:03:28.920747+00:00 heroku web.1 - - Process exited with status 143

We got to know from support that this line in goliath is causing the issue ->  https://github.com/postrank-labs/goliath/blob/v1.0.3/lib/goliath/server.rb#L110

Can you guys help to resolve this one?  Not with ruby background so any detail will be greatly appreciated. 

Thanks

Hi,
I am getting the following error after adding Goliath to my Gemfile. I am getting this error when I am trying to run my app using webrick in development mode. Please help.

``````
Exiting
/Users/nikhilbansal/.rvm/gems/ruby-2.1.2/gems/rack-1.5.2/lib/rack/handler.rb:43:in `pick': Couldn't find handler for: thin, puma, webrick. (LoadError)
        from /Users/nikhilbansal/.rvm/gems/ruby-2.1.2/gems/rack-1.5.2/lib/rack/handler.rb:57:in `default'
        from /Users/nikhilbansal/.rvm/gems/ruby-2.1.2/gems/rack-1.5.2/lib/rack/server.rb:268:in `server'
        from /Users/nikhilbansal/.rvm/gems/ruby-2.1.2/gems/railties-4.1.5/lib/rails/commands/server.rb:112:in `print_boot_information'
        from /Users/nikhilbansal/.rvm/gems/ruby-2.1.2/gems/railties-4.1.5/lib/rails/commands/server.rb:64:in `start'
        from /Users/nikhilbansal/.rvm/gems/ruby-2.1.2/gems/railties-4.1.5/lib/rails/commands/commands_tasks.rb:81:in `block in server'
        from /Users/nikhilbansal/.rvm/gems/ruby-2.1.2/gems/railties-4.1.5/lib/rails/commands/commands_tasks.rb:76:in `tap'
        from /Users/nikhilbansal/.rvm/gems/ruby-2.1.2/gems/railties-4.1.5/lib/rails/commands/commands_tasks.rb:76:in `server'
        from /Users/nikhilbansal/.rvm/gems/ruby-2.1.2/gems/railties-4.1.5/lib/rails/commands/commands_tasks.rb:40:in `run_command!'
        from /Users/nikhilbansal/.rvm/gems/ruby-2.1.2/gems/railties-4.1.5/lib/rails/commands.rb:17:in `<top (required)>'
        from bin/rails:8:in `require'
        from bin/rails:8:in `<main>'```
``````

So, I had accidentally put a typo into

```
  def on_close(env) 
```

on my Goliath::API class and noticed the app would (after crashing) remain running but on a different port (9000).
I tested locally and noticed that it does not happen if we use the --daemonize flag.
(We don't use --daemonize flag bc of how we have upstart configured.)

So, long story short I realized that what was happening was that the app was being restarted with the default configuration by this flag:

```
   Goliath.run_app_on_exit
```

So, I am wondering.. what is the purpose of this flag? and why is it true by default?

Cheers

I add this to my api.rb

```
use Goliath::Rack::Validation::CoerceValue, :key => 'url', :as => ValidUrl
```

And required this class   /libs/valid_url.rb in my runner.rb.

```
class ValidUrl

  def coerce value, opts ={}
    raise Goliath::Rack::Validation::FailedCoerce.new([400, {}, "URL is invalid"])
  end
end
```

The exception is never thrown. Am I missing something else?

examples/http_log.rb is very helpful for me.
I noticed that the response header handling can be more simple by using `EventMachine::HttpResponseHeader#raw`. [(definition here)](http://www.rubydoc.info/github/igrigorik/em-http-request/EventMachine%2FHttpResponseHeader%3Araw)
