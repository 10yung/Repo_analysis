(Thanks Pratyush for the help w/ this)

FpParameter's Inv:

The current comment is incorrect.
The updated comment should be correct independent of hardware. This is because the integers used are explicitly declared as u64 throughout the library.

I've confirmed this equation matches what is in edwards_bls12.

Edwards_bls12:
Fix the mismatch between comment and generator

Field generator:
Remove redundant information about it being a quadratic non-residue. 

A quadratic residue is the square of an element. As we are in a non-binary field, the order of the multiplicative subgroup is even. Therefore any element with a quadratic residue cannot be a multiplicative generator.
Currently the polynomial library does not support an API to multiply more than two polynomials together efficiently.

For `n` polynomials the API would ideally:

- Add up their degrees
- create a new domain with the degrees
- FFT the polynomials with the new domain
- multiply all of the polynomials in their eval form
- IFFT using the new domain
 
The derive macros defer to the versions implemented on `Self`-type references.
This eliminates a lot of the impl boilerplate (& might go away when Rust figures out how to to autoref/deref on operators).

Hopefully this also serves as inspiration for extension of the approach to Sub, Neg ...
Uses `#[rustfmt::skip]` annotations on field constants and numerical definitions.
This should help us build more confidence in avoiding accidental
performance-impacting copies.
FFTs in the library are all nlog(n). However they could be nlog(d), which is an efficiency improvement when doing polynomial multiplication. 

This can be taken advantage of in two possible ways:
* Split up the FFT into n/d independent FFTs operating over the same polynomial, but evaluating on distinct cosets. Both of these sub-FFTs are dlog(d). At the end concatenate these two vectors.
* Skip the first few rounds of butterflying / arithmetic in the current FFT algorithm, and just copy the polynomial coefficients into the correct positions. This is implemented in libiop.

This probably doesn't matter for the current pairing based SNARKs as they are dominated by MSM time. 
This is a straight forward s/ConstraintSystem/R1CS/. `cargo test` passes. If anything beyond this was implied by the item in #50 let me know. (Maybe renaming all the `cs: CS`?)

This is one of the critical missing pieces for this library. A sketch of the design I have in mind is to make `CanonicalSerialize` and `CanonicalDeserialize` traits:
```rust
pub trait CanonicalSerialize {
	type Output: Iterator<Item = u8>
	fn serialize(&self) -> Output;
}

pub trait CanonicalDeserialize: CanonicalSerialize {
	fn deserialize(&Self::Output) -> Self;
}
```
The idea would then be to implement these directly for the final instantiated curves, e.g. for `Bls12_381_G1`. (I don't see an easy way to have a generic implementation that works for all base fields.)



`algebra`:

- [ ] Move curve specific modules to their own crates. (Reduces compilation time)
- [ ] Investigate how to make `ToBytes` and `FromBytes` `no_std` compatible.
- [ ] Possibly replace identity functions in `Field`, `Group`, and `{Projective,Affine}Curve` traits with `One`/`Zero` traits from `num_traits`..
- [ ] Possibly add `impl Add<Self> for Self` (besides just `impl Add<&Self> for Self>`).
- [ ] Add a generic trait for Point Compression for `AffineCurve` elements (#51).

`bench-utils`:
- [ ] Check whether it can be replaced/integrated with [`tracing`](https://github.com/tokio-rs/tracing).
- [ ] Move into `algebra` behind a `trace` feature?

`r1cs-core`:
- [ ] Refactor `ConstraintSystem`, `ConstraintVar`, `LinearCombination`, and `Variable` APIs as per #34 and #43
- [ ] Rename `ConstraintSystem` to `R1CS`.
- [ ] Prefer `ConstraintSystem::enter_ns` and `ConstraintSystem::leave_ns` to `ConstraintSystem::ns`. Additionally, refactor `Namespace` struct to be just a guard struct which automatically decrements the scope when dropped.

`r1cs-std`:
- [ ] Make `FieldVar`, `GroupVar`, and other variable structs generic over `CS: ConstraintSystem<F>` as well. This enables getting rid of `cs: CS` arguments to various functions like `add`, `mul`, etc. In turn, this allows `impl Add<Self> for FieldVar<...>` impls.
- [ ] impl new `impl {Add, Mul}<Self::Constant> for FieldVar<...>`, impls with the constants. (This might not be possible due to coherence rules, might have to use `enum`-based approach)
- [ ] standardize `UInt{8, 16, 32, 64}`.

`crypto-primitives`:
- [ ] Make gadget APIs consistent with above conventions.
