(Perhaps mainly for myself, who keeps forgetting)
PR #110 notoriously lacked support in `polonius-parser` for the new facts used in liveness computations.
This PR mainly implements move error reporting. It also:

- No longer assumes `child` is transitive (i.e. actually maps some ancestor relation); children are now direct children, i.e `child(Daughter, Mother)` but not `child(Daughter, Grandmother)`. This means it is now safe to simplify the generation code in Rust. This closes the Polonius part of #120.
- Does the [elaboration of move paths mentioned by Niko](https://github.com/rust-lang/polonius/pull/110#discussion_r318568319).
- Removes the strictly unnecessary imprecision with regards to move paths (addressed in [the review of my previous PR](https://github.com/rust-lang/polonius/pull/110#discussion_r318565467)).

The principle is this:
1. compute the transitive closure of move paths (a move of x moves all of its children, an initialisation initialises its children, and an access to x accesses all of its children). Note that this should only compute closures over actually accessed paths (as they are generated from Rust).
2. use this to figure out which move paths are: maybe initialised (used in drop-liveness), maybe moved after being initialised
3. use those to compute *definitely* initialised paths by simply doing definitely_initialised = maybe-initialised - maybe_moved
4. use those to compute move errors: move_errors = accessed_at - definitely_initialised

Left to figure out:
- [x] *Should we* elaborate path accesses to include their children? My gut feeling is both "no" and "doesn't make any difference".
- [x] How should we report move errors from Polonius?

Left to do:
- [x] Verify that move error reporting actually works (that small thing)
- [x] Verify that the revamped, more precise move path tracking doesn't break the drop-liveness part of region-live-at
- [ ] Writing at least some tests
- [ ] Document everything in the book (this would also address #116, #119)


Of course, all of this massively steps on the toes of PR #134.

This is more or less blocked by #134, which would make it easier to report back move errors.
This PR starts describing the input relations "pre-liveness". More details about the liveness relations and atoms will be coming later.

Marked WIP as I'm unsure about a couple places specifically, and could use feedback in general.

r? @nikomatsakis 


Polonius should emit events for Rustc's mid-level profiling, at least capturing how long it spends in the various calculation phases.
I propose something like this:
![polonius-refactor](https://user-images.githubusercontent.com/102855/64233812-5206d680-cef5-11e9-998a-ab1b3b0388f4.png)

Green is new, red is removed, bold is a module, and regular font is a fact.

Facts are grouped based on the inputs they require to compute.
As mentioned in this review comment, the function generating the `var_maybe_initialized_on_exit` relation needs to be documented. https://github.com/rust-lang/polonius/pull/110#discussion_r318557584
Currently, the each Poloniu `Algorithm`'s `compute()` method performs initialisation analysis, then liveness calculations, and then the actual Polonius implementation. This means a lot of code duplication and in the case of the hybrid algorithm that all of this happens twice.

I suggest the following for a minimal modification to the current setup:
- the publicly visible `compute()` method still takes the gigantonormous `AllFacts` for now
- internally, these facts are split up into internal data structures consumed by the various `compute()` methods
- the calls initiating initialisation and liveness calculations happen in `output::compute()`