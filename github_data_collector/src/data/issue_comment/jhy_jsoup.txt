added new param in Jsoup.connect method in order to connect to IDN. This translates the URL to Punycode and at the end return the Document with data.
Document doc = Jsoup.connect("http://en.wikipedia.org/").get();

if you pass the string to the connect() method with the cyrillic url in it (ex. "http://что-угодно.рф"), the jsoup throws the UnknownHostException with the passed link encoded to another encoding.

Any work arounds?
When a script content contains a HTML variable with "<script>" tags, obtained content by Element.html() is not correct.

HTML Example:
`<script>var html = "<script>console.log('Test');</script><div>Example</div>";</script>`

The result of calling Jsoup.parse() is:
```
<html>
 <head></head>
 <body> 
  <script>var html = "<script>console.log('Test');</script>
  <div>
   Example
  </div>";   
 </body>
</html>

```
Here, parser has detected the end script tag inside HTML variable as the end of main script tag.
And selecting script element, the output for html() is:
`<script>var html = "<script>console.log('Test');</script>`

The expected result is obtain all content:
`<script>var html = "<script>console.log('Test');</script><div>Example</div>";</script>`
adopt@1.8.212-04
amazon-corretto@1.8.212-04.2
The JVM version above is no longer provided by jabba.
Recently I want to do a feature to anti XSS, using Jsoup Cleaner, the requirement is: only supports url which starts with `http`, `https` or `data:image` (base64 image);

I use the following code like:

```
whitelist.addProtocols("img", "src", "http", "https", "data:image")
Jsoup.clean(html, whitelist);
```
I found it works well with ordinary urls, but removed `src` attribute which contains base64 image ; I look into the source code, found that it compare urls in this way:
```
 url.startWith(protocol:xxxxxx)
```
the extra `:` makes `data:image:` setting not match;

but if I set it into ` ("http", "https", "data")`, other data url like `data:text/html, <script>alert('xss')</script>`  would be allowed, which is dangerous.

I have to override the `isSafeAttribute(String tagName, Element el, Attribute attr)` method to implement my requirement.

Is there any better ideas?
 
Given the markup in the example from https://www.w3.org/TR/2001/REC-ruby-20010531/#complex:
```
<ruby>
  <rbc>
    <rb>10</rb>
    <rb>31</rb>
    <rb>2002</rb>
  </rbc>
  <rtc>
    <rt>Month</rt>
    <rt>Day</rt>
    <rt>Year</rt>
  </rtc>
  <rtc>
    <rt rbspan="3">Expiration Date</rt>
  </rtc>
</ruby>
```

the jsoup parser treats the `rtc` element as an unknown element that gets closed immediately. This causes it to serialize in xml mode as:

    <rtc></rtc><rt>Month</rt><rt>Day</rt><rt>Year</rt>

I have checked the behaviour of Firefox and Chrome, and they preserve the `rtc` element structure, e.g.:

    <rtc><rt>Month</rt><rt>Day</rt><rt>Year</rt></rtc>

The `rtc` element is supported in the W3C HTML spec [1], but not the WHATWG spec. Also, even though the `rbc` element is not listed in either of those (only in the Ruby Annotations specification), the jsoup parser preserves the `rbc` element structure.

[1] https://www.w3.org/TR/2014/REC-html5-20141028/text-level-semantics.html#the-rtc-element
The following Kotlin script reads and then writes an XML file.

```kotlin
#!/usr/bin/env kscript

@file:DependsOn("org.jsoup:jsoup:1.12.1")

import java.io.File
import org.jsoup.Jsoup
import org.jsoup.parser.Parser

val pom = Jsoup.parse(File("pom.xml").readText(), "", Parser.xmlParser())
pom.outputSettings().prettyPrint(false)

File("pom.xml").writeText(pom.html())
```

`jsoup` seems to keep the formatting, comments, and even attribute order, which is really nice but somehow messes up the root (`<project>`) element, as shown by the `git` diff

```
-<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
-         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
+<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
```

The original element has a line break after the `xmlns` attribute but `jsoup` somehow seems to remove it.

Any way to keep the linebreak?
<span class='currentEl'>
    <span class='child'></span>
</span>
There is no easy way in the Element to find out a number of children available via the method child(int). The method childNodeSize() acts on list of all children while child(int) acts on the filtered list of the children. This trivial patch adds new method childrenCount() that is complementary to child(int) as it works on the same filtered list. A unit test is provided.

My observation: https://stackoverflow.com/questions/59547574/jsoup-how-to-find-out-elements-size

Thank you for this wonderful library and for consideration of merging this proposal.
Version 1.12.1

When a css class name contains white spaces (at the end), the following exception is thrown.
I am not sure whether white spaces at the end of a class name represent valid css syntax, however I have seen it in a real live case.

Stack Trace and sample files attached.

[bug_report.zip](https://github.com/jhy/jsoup/files/4006474/bug_report.zip)
 


Exception in thread "main" org.jsoup.select.Selector$SelectorParseException: Could not parse query '': unexpected token at ''
	at org.jsoup.select.QueryParser.findElements(QueryParser.java:206)
	at org.jsoup.select.QueryParser.parse(QueryParser.java:59)
	at org.jsoup.select.QueryParser.parse(QueryParser.java:42)
	at org.jsoup.select.QueryParser.combinator(QueryParser.java:87)
	at org.jsoup.select.QueryParser.parse(QueryParser.java:69)
	at org.jsoup.select.QueryParser.parse(QueryParser.java:42)
	at org.jsoup.select.Selector.select(Selector.java:91)
	at org.jsoup.nodes.Element.select(Element.java:372)
	at JsoupBug.main(JsoupBug.java:14)