I added a basic example into the `url-signing.md` document that outlines what each step of the signing would look like. As I read over the document I realized that there were examples for just url image signing but not for signing with options.

I could convert this into a code example but I feel like it should be language-agnostic, and I can make whatever grammatical changes necessary.
Add support to have multiple signature key, according to https://github.com/willnorris/imageproxy/issues/206 .

This is useful to rotate keys without breaking existing clients.
## This PR:

Gives user the option to override the remote image hosting's expire date.

```
imageproxy -override-cache-control="public" -override-expires="Sat, 28 Dec 2199 04:09:32 GMT"
```

closes https://github.com/willnorris/imageproxy/issues/207
Thanks for this neat tool ! I have a feature request, that once my app has cached an image locally. it should be able to load the image without having to talk the remote if I unplug my internet.

some remote hosting websites have a too short of cache expiration and it causes the proxy to keep fetching the image from remote.

current error is :
```
Error fetching remote image: Get https: ...: no such host

```
Hi there,
I'd like to know if there is a way to rotate a signature key. I'd like my image proxy to work with two keys, so while I'm upgrading it on my services, it keeps responding to requests.
Any idea?
Any other solution?
I have a nginx running in front of it, so I can accept other alternatives.
Thanks!
Is it possible to run imageproxy in an AWS Lambda (or other serverless function)?
http://127.0.0.1:8080/0x0,q50/upload/2019/11/13/WATERMARK.jpg

use ImageProxy to decrease image quality.

This is origin Image.
![WATERMARK](https://user-images.githubusercontent.com/22338989/68762790-d7bfa480-0651-11ea-9679-6c5df754b3e0.jpg)


-----------below is error msg-------------------
2019/11/13 19:32:33 http: panic serving 127.0.0.1:6027: runtime error: slice bounds out of range
goroutine 80 [running]:
net/http.(*conn).serve.func1(0xc00007a1e0)
        c:/go/src/net/http/server.go:1769 +0x140
panic(0xd29880, 0x16916f0)
        c:/go/src/runtime/panic.go:522 +0x1c3
github.com/rwcarlsen/goexif/exif.(*readerToReaderAt).ReadAt(0xc0002b5cb0, 0xc00002a0e8, 0x2, 0x4, 0x8400dc1d, 0xcc1660, 0x1, 0xc00002a0e8)
        C:/Users/Administrator/go/pkg/mod/github.com/rwcarlsen/goexif@v0.0.0-20190318171057-76e3344f7516/exif/readerAt.go:27 +0x308
github.com/rwcarlsen/goexif/exif.(*offsetReaderAt).ReadAt(0xc000322060, 0xc00002a0e8, 0x2, 0x4, 0x8400dbff, 0x0, 0x0, 0x0)
        C:/Users/Administrator/go/pkg/mod/github.com/rwcarlsen/goexif@v0.0.0-20190318171057-76e3344f7516/exif/exif.go:147 +0x66
github.com/rwcarlsen/goexif/tiff.DecodeDir(0xfe9b60, 0xc000322060, 0x10057c0, 0x16c2de0, 0x8400dbff, 0xc00023e020, 0x1, 0x2, 0x0)
        C:/Users/Administrator/go/pkg/mod/github.com/rwcarlsen/goexif@v0.0.0-20190318171057-76e3344f7516/tiff/tiff.go:150 +0xbf
github.com/rwcarlsen/goexif/tiff.LazyDecode(0xfe9b60, 0xc000322060, 0xc0002b5cb0, 0x540000001e, 0x0)
        C:/Users/Administrator/go/pkg/mod/github.com/rwcarlsen/goexif@v0.0.0-20190318171057-76e3344f7516/tiff/tiff.go:97 +0x324
github.com/rwcarlsen/goexif/exif.LazyDecode(0xfe9ba0, 0xc0002b5cb0, 0x10, 0x18, 0xc000322040)
        C:/Users/Administrator/go/pkg/mod/github.com/rwcarlsen/goexif@v0.0.0-20190318171057-76e3344f7516/exif/exif.go:289 +0x4f9
github.com/rwcarlsen/goexif/exif.Decode(0xfea4a0, 0xc000322040, 0x20, 0xd6f660, 0xffffffffffffff01)
        C:/Users/Administrator/go/pkg/mod/github.com/rwcarlsen/goexif@v0.0.0-20190318171057-76e3344f7516/exif/exif.go:222 +0x75
willnorris.com/go/imageproxy.exifOrientation(0xfea4a0, 0xc000322040, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, ...)
        C:/Users/Administrator/Downloads/imageproxy-0.9.0/transform.go:238 +0x5b
willnorris.com/go/imageproxy.Transform(0xc00057e000, 0x355af, 0x3fe00, 0x0, 0x0, 0x0, 0x0, 0x0, 0x32, 0x0, ...)
        C:/Users/Administrator/Downloads/imageproxy-0.9.0/transform.go:66 +0x1fe
willnorris.com/go/imageproxy.(*TransformingTransport).RoundTrip(0xc000005e00, 0xc000106000, 0x0, 0x0, 0x0)
        C:/Users/Administrator/Downloads/imageproxy-0.9.0/imageproxy.go:438 +0x36d
github.com/gregjones/httpcache.(*Transport).RoundTrip(0xc0002fced0, 0xc000106000, 0xc0002fced0, 0x0, 0x0)
        C:/Users/Administrator/go/pkg/mod/github.com/gregjones/httpcache@v0.0.0-20190212212710-3befbb6ad0cc/httpcache.go:214 +0x799
net/http.send(0xc000106000, 0xfe9ac0, 0xc0002fced0, 0x0, 0x0, 0x0, 0xc000006100, 0x0, 0x1, 0x0)
        c:/go/src/net/http/client.go:250 +0x468
net/http.(*Client).send(0xc0002fcea0, 0xc000106000, 0x0, 0x0, 0x0, 0xc000006100, 0x0, 0x1, 0x2000)
        c:/go/src/net/http/client.go:174 +0x102
net/http.(*Client).do(0xc0002fcea0, 0xc000106000, 0x0, 0x0, 0x0)
        c:/go/src/net/http/client.go:641 +0x280
net/http.(*Client).Do(...)
        c:/go/src/net/http/client.go:509
willnorris.com/go/imageproxy.(*Proxy).serveImage(0xc000304340, 0xffb820, 0xc0003180e0, 0xc00030e000)
        C:/Users/Administrator/Downloads/imageproxy-0.9.0/imageproxy.go:168 +0x3b0
net/http.HandlerFunc.ServeHTTP(0xc000062f60, 0xffb820, 0xc0003180e0, 0xc00030e000)
        c:/go/src/net/http/server.go:1995 +0x4b
willnorris.com/go/imageproxy.(*Proxy).ServeHTTP(0xc000304340, 0xffb820, 0xc0003180e0, 0xc00030e000)
        C:/Users/Administrator/Downloads/imageproxy-0.9.0/imageproxy.go:139 +0x1a5
net/http.serverHandler.ServeHTTP(0xc000304410, 0xffb820, 0xc0003180e0, 0xc00030e000)
        c:/go/src/net/http/server.go:2774 +0xaf
net/http.(*conn).serve(0xc00007a1e0, 0xffec20, 0xc0005c64c0)
        c:/go/src/net/http/server.go:1878 +0x858
created by net/http.(*Server).Serve
        c:/go/src/net/http/server.go:2884 +0x2fb
this is original image url, original size is 7.16MB
https://imgs.takeno.app/0x0/upload/2019/11/01/42349584306327.gif

after processing,size is 20.2MB
just quality is 50%
https://imgs.takeno.app/0x0,q50/upload/2019/11/01/42349584306327.gif

On my opinion, file size should decrease as other image format.
Please advise.
When loading a web page with a lot of proxy URLs so that the browser attempts to download them all immediately, the process is killed because it's out of memory. I don't know how to get around this, since it's not something I can control in browsers. It seems like imageproxy should be rate limiting these requests at some point to avoid OOM issues.

_Originally posted by @aaronpk in https://github.com/willnorris/imageproxy/issues/97#issuecomment-546747249_
imgproxy_1            | 2019/09/03 11:21:04 error transforming image https://image.tmdb.org/t/p/originalnull#170x0: image: unknown format
imgproxy_1            | 2019/09/03 11:21:04 content-type not allowed: "text/html"
web_imgproxy_1 exited with code 137

