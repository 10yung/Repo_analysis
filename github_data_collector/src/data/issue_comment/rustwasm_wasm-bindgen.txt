I wanted to use [CanvasRenderingContext2D.getTransform()](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/getTransform) but noticed that it's currently missing.

### Describe the Bug

A clear and concise description of what the bug is.
Following the example in the wasm-bindgen reference/docs, when I compile (part of) the example code, it throws a compilation error.
### Steps to Reproduce

1. Copy the sample code
2. Compile using wasm-pack
3. Check JavaScript console to see error

If applicable, add a link to a test case (as a zip file or link to a repository we can clone).

### Expected Behavior

It should print the current time in milliseconds 

### Actual Behavior

```Failed to compile.

./src/build/index.js
  Line 265:19:  'globalThis' is not defined  no-undef
  Line 274:19:  Unexpected use of 'self'     no-restricted-globals
```

If applicable, add screenshots to help explain your problem.

### Additional Context
I am using this with React and while this changes nothing, its just noteworthy.
Here is the copied code:
```rust
#[wasm_bindgen(start)]
pub fn run_perf() {
  let window = web_sys::window().expect("should have a window in this context");
  let performance = window
    .performance()
    .expect("performance should be available");

  console_log!("the current time (in ms) is {}", performance.now());
}
```
and Cargo.toml
```toml
[dependencies]
wasm-bindgen = "0.2.58"
image = { version = "0.22.3"}
humantime = "1"

[dependencies.web-sys]
version = "0.3.4"
features = ['Window', 'Performance', 'PerformanceTiming', 'console']
```
If there's something I am not doing right, I'd appreciate some help.
Given code that looks like this:

```rust
use wasm_bindgen::prelude::*;

#[wasm_bindgen]
pub fn bar(val: JsValue) -> Result<u64, JsValue> {
    foo(&mut 0);
    Err(val)
}

#[inline(never)]
pub fn foo(a: &mut u128) {
    *a = 1;
}
```

we can build and run it with:

```
$ wasm-pack build --target nodejs
```

and run it with:

```js
const { bar } = require('./pkg/wasm_repro.js');

const err = new Error();
for (let j = 0; j < 100000; j++) {
  try {
    bar(err);
  } catch (e) {
    if (e === err) {
      continue;
    }
    console.log('iteration', j);
    throw e;
  }
}
```

to yield:

```
iteration 65536
/home/alex/code/wasm-memory-test/index.js:12
    throw e;
    ^

RuntimeError: memory access out of bounds
    at bar (wasm-function[1]:0x94)
    at module.exports.bar (/home/alex/code/wasm-memory-test/pkg/wasm_repro.js:50:10)
    at Object.<anonymous> (/home/alex/code/wasm-memory-test/index.js:6:5)
    at Module._compile (internal/modules/cjs/loader.js:1063:30)
    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1103:10)
    at Module.load (internal/modules/cjs/loader.js:914:32)
    at Function.Module._load (internal/modules/cjs/loader.js:822:14)
    at Function.Module.runMain (internal/modules/cjs/loader.js:1143:12)
    at internal/main/run_main_module.js:16:11
```

The problem here is apparent when we diassemble the wasm output:

```wat
(module
  (type (;0;) (func (param i32)))
  (type (;1;) (func (param i32 i32)))
  (import "./wasm_repro.js" "__wbindgen_rethrow" (func $__wbindgen_rethrow (type 0)))
  (func $bar (type 1) (param i32 i32)
    (local i32)
    global.get 0
    i32.const 16
    i32.sub
    local.tee 2
    global.set 0
    local.get 2
    i64.const 0
    i64.store offset=8
    local.get 2
    i64.const 0
    i64.store
    local.get 2
    call $wasm_repro::foo::h2ba1f0de78e4c442
    local.get 1
    call $wasm_bindgen::throw_val::h4d534fc8bf695b07
    unreachable)
  (func $wasm_repro::foo::h2ba1f0de78e4c442 (type 0) (param i32)
    local.get 0
    i64.const 0
    i64.store offset=8
    local.get 0
    i64.const 1
    i64.store)
  (func $wasm_bindgen::throw_val::h4d534fc8bf695b07 (type 0) (param i32)
    local.get 0
    call $__wbindgen_rethrow
    unreachable)
  (memory (;0;) 17)
  (global (;0;) (mut i32) (i32.const 1048576))
  (export "memory" (memory 0))
  (export "bar" (func $bar))
  (data (;0;) (i32.const
```

Here the problem we can see is that the export and function `bar` allocate 16 bytes of stack space, but this stack space is never released. This means that our global stack pointer is constantly decreasing, and will never get bumped back up.

The **tl;dr;** is that every time an error is thrown/return from a Rust/wasm function it runs the risk of not reclaiming used stack space, and this is clearly a bug we need to fix!
i'm passing `ArrayBuffer` from browser window to worker thread, and then to wasm module function compiled with rust and `wasm-pack`, but rust always receives buffer of zero length.

rust function:
```rust
#[wasm_bindgen]
pub fn process_array_buffer(buffer: &[u8]) -> i32 {
    buffer.len() as i32
}
```

generated glue js:

```js
function passArray8ToWasm0(arg, malloc) {
    const ptr = malloc(arg.length * 1);
    getUint8Memory0().set(arg, ptr / 1);
    WASM_VECTOR_LEN = arg.length;
    return ptr;
}
/**
* @param {Uint8Array} buffer
* @returns {number}
*/
export function process_array_buffer(buffer) {
    var ptr0 = passArray8ToWasm0(buffer, wasm.__wbindgen_malloc);
    var len0 = WASM_VECTOR_LEN;
    var ret = wasm.process_array_buffer(ptr0, len0);
    return ret;
}
```

worker.js:

```js
if (e.data instanceof ArrayBuffer) {
  const res = wasm.process_array_buffer(e.data);
  console.log('worker: res', res); // returns 0
}
```

so glue js expects typed array `Uint8Array`, but i'm passing `ArrayBuffer`, which doesn't have `.length`  prop but `.byteLength`, etc.

i'm working with `ArrayBuffer` because it's [Transferable](https://developer.mozilla.org/en-US/docs/Web/API/Transferable), and `Uint8Array` is not.

as a workaround i can receive `ArrayBuffer` in worker, wrap it into `Uint8Array` there and pass to wasm.

but i believe glue js can check type of argument with `instanceof ArrayBuffer`, and pass it to wasm memory correctly.
The generated functions are not specialized for all possible variants. There is function `tex_image_2d_with_i32_and_i32_and_i32_and_format_and_type_and_opt_u8_array` but there are not functions for other array types (sure we can do it via the JsObject casting). According to [MDN docs](https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/texImage2D) we can provide much more specialized types here.
This PR adds support for using `wasm-bindgen-cli` for Electron apps through the addition of two flags: `--omit-imports` and `--preloads`. See #1928 for context (the "Alternatives" section at the end of the OP).

@alexcrichton I think this is a better approach since it doesn't require adding a new target. I've also cleaned up the implementation and included your feedback from the original PR. If you think this looks good, we could go with this PR and I'll close the old one.

I'm also open to renaming the flags or modifying the documentation if you have thoughts about that.
### Motivation

Web IDL now allows to define constructors in such way:

```webidl
interface InterfaceWithConstructor {
  [Throws]
  constructor(long a);
};
```
[spec](https://heycam.github.io/webidl/#idl-constructors),[example from gecko-dev](https://github.com/mozilla/gecko-dev/commit/1128b8dee8a369710edb28fbd5da961849efa8df#diff-a51e6b1a90d7281993a986bede267468R82-R85).

rustwasm/weedle is already updated but not released (https://github.com/rustwasm/weedle/pull/33)

Major difference is that new constructors may or may not be marked as `[Throws]`. Atm all constructors return `Result<Self, JsValue>`, [doc](https://github.com/rustwasm/wasm-bindgen/blob/62fee13a46b54896310db0395a634aefe3694845/crates/webidl/src/util.rs#L496-L508). 

### Proposed Solution

Binding generator should support new constructors and all web-sys's WebIDL's should be updated. And that is going to be a big BC-break.

### Alternatives

Keep backward compatibility with constructors defined as attributes thus not changing any WebIDL's. 
That would not break BC and allow adding new WebIDL's. 

But, it seems to me that is not spec compliant that every web-sys's interface constructor can throw, since specs explicitly specify whether constructor can throw, and now it is represented in WebIDL's.
I hope there is a macro that converts currently unsupported types automatically to `JsValue`.

For example, the following
```rust
#[wasm_bindgen(serde)]
pub fn foo(arg0: bool, arg1: Vec<usize>) {
  ...
}
```
should be equivalent to
```rust
#[wasm_bindgen]
pub fn foo(arg0: bool, arg1: JsValue) -> Result<(), serde_json::Error> {
  let arg1: Vec<usize> = JsValue::into_serde(arg1)?;
  ...
  ()
}
```
This is intended to be a tracking issue to pull together a number of requests from a few different locations.

The basic problem is that browsers will ship features before fully stabilized. Often these features are behind flags or some other gating mechanism, but once the gates are all unlocked some pages are able to use these features, and Rust/wasm often want to use the features as well!

Currently we are not adding these unstable WebIDL definitions to web-sys because they are almost guaranteed to change. This means that we'd have to ship breaking changes which we would prefer not to do. We do, however, want to make it easier to consume these WebIDL files!

Split across a number of PRs, there's two possible solutions I think we have right now for supporting this:

1. First we can use `--cfg` flags to support everything in `web-sys` itself. The general idea is that `web-sys` would grow all the unstable WebIDL files, but you'd have to compile with `RUSTFLAGS=--cfg=web_sys_unstable` to actually get anything to show up. This sort of "explicit opt in" would be required by everyone building a crate.
  * The pro of this approach is that it centralizes all the WebIDL into this repository, taking the maintenance burden away from users
  * The cons of this approach is that it's difficult to build for users and it puts more maintenance burden ehre.

2. An alternative to putting these WebIDL annotations in `web-sys` itself would be to encourage users to publish their own crates synthesized from WebIDL. The general idea here is that this repository would publish a stable crate (or tool) which can be used to synthesize a crate from WebIDL. That way users could publish their own `webxr-sys` (for example) and it would not be maintained in this repository. Once the specification stabilizes we'd move the WebIDL into `web-sys` itself.
  * The pro of this approach is that it doesn't have much maintenance burden on us in this repository. It also allows anyone to build their own crate with raw WebIDL in the same manner web-sys is built. This approach is also pretty easy for users to consume, they'd basically just depend on a crate.
  * The cons of this approach are pretty bad though. This involves a relatively significant amount of infrastructure which doesn't exists, so would be difficult to start out. For example these new crates probably want to depend on `web-sys` for basic types to start, which `web-sys` itself doesn't do at all (cross-crate dependencies). Additionally it puts the maintenance burden on users.

I'm still somewhat tempted to go with (1) myself, but we've had enough proposals running around here for awhile that I wanted to get this all written down myself!