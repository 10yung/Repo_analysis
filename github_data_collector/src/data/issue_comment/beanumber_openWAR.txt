bis_boxscore.xml is not available for games this season.  For example, this directory has no bis_boxscore.xml which is a file this library depends on to build out war:  http://gd2.mlb.com/components/game/mlb/year_2019/month_03/day_29/gid_2019_03_29_anamlb_oakmlb_1/

I'm looking at working around this, but wondering if anyone has some info on why gameday at mlb.com isn't providing this file anymore?
(https://github.com/edgararuiz/tidypredict)
> ds = getData(start = "2013-06-30")

Retrieving data from 2013-06-30 ...

...found 0 games

Error in grouped_df_impl(data, unname(vars), drop) : 
  Column `gameId` is unknown

So the update by znmeb fixes part of this, but now I get: 

> ds = getData(start = "2018-04-01")

Retrieving data from 2018-04-01 ...

...found 13 games

day_01/gid_2018_04_01_anamlb_o
day_01/gid_2018_04_01_bosmlb_t
day_01/gid_2018_04_01_chamlb_k
day_01/gid_2018_04_01_chnmlb_m
day_01/gid_2018_04_01_clemlb_s
day_01/gid_2018_04_01_houmlb_t
day_01/gid_2018_04_01_minmlb_b
day_01/gid_2018_04_01_nyamlb_t
day_01/gid_2018_04_01_pitmlb_d
day_01/gid_2018_04_01_pitmlb_d
day_01/gid_2018_04_01_sfnmlb_l
day_01/gid_2018_04_01_slnmlb_n
day_01/gid_2018_04_01_wasmlb_c
Error in grouped_df_impl(data, unname(vars), drop) : 
  Column `gameId` is unknown


It looks like MLB gameday has changed the game ids in their anchor tags. The urls from game day are including the day_xx portion of the url in the gameid now, this is causing an issue in getUrls where it tries to parse out the year, month, and date. readData was returning 404s due to this issue. 
I received this error when retrieving data for the 2012 regular season. When I change the line of code in `getData(...)` from,

`out <- dplyr::bind_rows(ds.list)`

to

`out <- do.call(rbind, lapply(ds.list, data.frame, stringsAsFactors=FALSE))`

the code completes without an error, though `balls` and `strikes` are of type character so they need to be converted to integer: `out <- transform(out, balls = as.integer(balls), strikes = as.integer(strikes))`


I compared running `makeWAR()` on the May data set to the MayProcessed data set and noticed that the `delta.field` and `delta.pitch` columns in the New MayProcessed data set differed from the original MayProcessed data set. They actually look transposed which you can see below. I did this using `dplyr 0.5.0`, but I first noticed it when testing `makeWAR()` after refactoring for `dplyr 0.7.0` . 

```
>NewMayProcessed <- makeWAR(May)
>head(NewMayProcessed$openWARPlays[,c(1:5,16, 19:23)])
  batterId start1B start2B start3B pitcherId                         gameId      delta delta.field delta.pitch    delta.br  delta.bat
1   476704    <NA>    <NA>    <NA>    450351 gid_2013_05_01_anamlb_oakmlb_1  0.3789624          NA  0.37896244          NA  0.3789624
2   519083  476704    <NA>    <NA>    450351 gid_2013_05_01_anamlb_oakmlb_1 -0.2055008 -0.04671768 -0.15878313  0.03238909 -0.2378899
3   452234    <NA>  476704    <NA>    450351 gid_2013_05_01_anamlb_oakmlb_1 -0.3296470          NA -0.32964703  0.04026076 -0.3699078
4   493316    <NA>  476704    <NA>    450351 gid_2013_05_01_anamlb_oakmlb_1  0.2032371  0.11692098  0.08631608 -0.53123407  0.7344711
5   518626  493316    <NA>  476704    450351 gid_2013_05_01_anamlb_oakmlb_1  0.1956572          NA  0.19565721 -0.01790497  0.2135622
6   474384  518626  493316  476704    450351 gid_2013_05_01_anamlb_oakmlb_1 -0.7097701 -0.36090191 -0.34886821  0.01234560 -0.7221157

> head(MayProcessed$openWARPlays[,c(1:5,16, 19:23)])
  batterId start1B start2B start3B pitcherId                         gameId      delta delta.field delta.pitch    delta.br  delta.bat
1   476704    <NA>    <NA>    <NA>    450351 gid_2013_05_01_anamlb_oakmlb_1  0.3789624          NA   0.3789624          NA  0.3789624
2   519083  476704    <NA>    <NA>    450351 gid_2013_05_01_anamlb_oakmlb_1 -0.2055008  -0.1588469  -0.0466539  0.03238909 -0.2378899
3   452234    <NA>  476704    <NA>    450351 gid_2013_05_01_anamlb_oakmlb_1 -0.3296470          NA  -0.3296470  0.04026076 -0.3699078
4   493316    <NA>  476704    <NA>    450351 gid_2013_05_01_anamlb_oakmlb_1  0.2032371   0.1169279   0.0863092 -0.53123407  0.7344711
5   518626  493316    <NA>  476704    450351 gid_2013_05_01_anamlb_oakmlb_1  0.1956572          NA   0.1956572 -0.01790497  0.2135622
6   474384  518626  493316  476704    450351 gid_2013_05_01_anamlb_oakmlb_1 -0.7097701  -0.3487953  -0.3609748  0.01234560 -0.7221157
```

 The original MayProcessed data set was added over 2 years ago, and there have been quite a few changes to `makeWAR()` since then. I imagine this happened when `openWAR` and dplyrized. I'm pretty sure it has to do with [Line 140].(https://github.com/beanumber/openWAR/blob/master/R/makeWAR.R#L140)

```
x$data <- mutate_(x$data, delta.pitch = ~ifelse(is.na(delta.field), delta, delta - delta.field))
```

So I guess it boils down to which data set is correct? Is it the original MayProcessed data set?
I received the above error when running:

dat16 <- openWAR::getData(start = "2016-01-01", end = "2016-10-25")

The error occurred after going through all dates, and no "dat16" resulted.

(https://github.com/hrbrmstr/ggalt)

JSS prefers to publish papers about packages where the package is on CRAN and has been there long enough to have matured (i.e., obvious bugs ironed out and a few active users). This is partly because we have so many submissions that it helps to filter some out and this approach provides some basic quality checks. So I suggest you begin by developing the package for CRAN. This is a preference rather than a requirement, and it is not stated anywhere in the JSS rules. A paper describing a package that has only recently been put on CRAN will still be considered, but the probability of it getting through the reviewing process is smaller.
(http://robjhyndman.com/hyndsight/jss-rpackages/)

Are the replacement levels robust? Can the robustness of these estimates be improved with data from multiple seasons?
