I just noticed that `debugPgClient` is called only on `postgraphile(…)` "library usage", but not with `createPostGraphileSchema`/`withPostgraphileContext`. Would it be possible (or make sense) to install the same "enhancer" on its pool?

If this cannot properly be fixed, please a) export `debugPgClient` so that one can install it on own pools and b) document it on the *Debugging* page.
Split JWT verification functionality to the separate module making it available for use in plugins
I'm submitting a ... <!-- check one with "x" -->

* [ ] bug report
* [x] feature request
* [ ] question <!-- alternatively, ask on Discord (http://discord.gg/graphile) -->

I often write custom mutations via Postgres functions, and would like to return extra context and logging from the function that doesn't easily fit into the return type, which is most often a record or set of records from a table.

A solution would be to return Postgres logs generated via [`RAISE` statements ](https://www.postgresql.org/docs/current/plpgsql-errors-and-messages.html) to the client, so the standard mutation payload would include:
```
{
    "data": ...,
    "errors": ...,
    "logs": [
        {"level": "notice", "message": ...},
        ...
    ]
}
```

Ideally the order of the logs would match the order in which the raise statements were executed.

This would be possible for `DEBUG`, `LOG`, `INFO`, `NOTICE`, `WARNING` – `EXEPTION` would still include the result in `errors`.

Happy to work on this with a little guidance!
As discussed in this thread: https://github.com/APIs-guru/graphql-over-http/issues/5
I'm submitting a 

* [x] feature request

PostGraphile version: 4.4.4

**Current behavior:**

Currently no cache for `PostGraphileContext`. Each time create PostGraphileContext take about `0.8~1.2ms`, some times this step even slow then real `PG query` request which may `0.4~0.6ms`. So if create a LRU cache for recent access user, it can improve performance and latency.

ENV: CPU i7 4790K, single nodejs without cluster, single Postgresql 11 DB on the same machine.

current performance:

```
Finished 10000 requests
Concurrency Level:      10
Time taken for tests:   5.348 seconds
Complete requests:      10000
Failed requests:        0
Keep-Alive requests:    10000
Total transferred:      7130035 bytes
Total body sent:        6350000
HTML transferred:       2160000 bytes
Requests per second:    1869.72 [#/sec] (mean)
Time per request:       5.348 [ms] (mean)
Time per request:       0.535 [ms] (mean, across all concurrent requests)
Transfer rate:          1301.87 [Kbytes/sec] received
                        1159.45 kb/s sent
                        2461.32 kb/s total

Connection Times (ms)
              min  mean[+/-sd] median   max
Connect:        0    0   0.0      0       0
Processing:     3    5   0.6      5      14
Waiting:        3    5   0.6      5      14
Total:          3    5   0.6      5      14

Percentage of the requests served within a certain time (ms)
  50%      5
  66%      5
  75%      5
  80%      6
  90%      6
  95%      6
  98%      7
  99%      7
 100%     14 (longest request)
```

**Expected behavior:**

add cache for `PostGraphileContext`

after add cache performance:
```
Finished 10000 requests
Concurrency Level:      10
Time taken for tests:   4.926 seconds
Complete requests:      10000
Failed requests:        0
Keep-Alive requests:    10000
Total transferred:      7130016 bytes
Total body sent:        6350000
HTML transferred:       2160000 bytes
Requests per second:    2030.00 [#/sec] (mean)
Time per request:       4.926 [ms] (mean)
Time per request:       0.493 [ms] (mean, across all concurrent requests)
Transfer rate:          1413.47 [Kbytes/sec] received
                        1258.84 kb/s sent
                        2672.31 kb/s total

Connection Times (ms)
              min  mean[+/-sd] median   max
Connect:        0    0   0.0      0       0
Processing:     3    5   0.6      5      12
Waiting:        3    5   0.6      5      12
Total:          3    5   0.6      5      12

Percentage of the requests served within a certain time (ms)
  50%      5
  66%      5
  75%      5
  80%      5
  90%      5
  95%      6
  98%      6
  99%      7
 100%     12 (longest request)

```

Hack on `node_modules\postgraphile\build\postgraphile\withPostGraphileContext.js`:
```
//roytan
//beginning
const lru_1 = require("@graphile/lru");
const crypto = require("crypto");
const { createHash } = crypto;
const _contextCache = new lru_1.default({
    maxLength: 2000,
});
//......in function withDefaultPostGraphileContext

    const operationType = operation != null ? operation.operation : null;
    //roytan
    let lastArgs = JSON.stringify({
        jwtToken,
        jwtSecret,
        jwtAudiences,
        jwtRole,
        jwtVerifyOptions,
        pgDefaultRole,
        pgSettings,
    })
    let lastHash = createHash('sha1').update(lastArgs).digest('base64');
    let hashObj = _contextCache.get(lastHash)
    if (!hashObj) {

         //......
        const needTransaction = pgForceTransaction ||
                !!sqlSettingsQuery ||
                (operationType !== 'query' && operationType !== 'subscription');
        //roytan
        _contextCache.set(lastHash, {
            pgRole,
            jwtClaims,
            sqlSettingsQuery,
            needTransaction,
        });
    }
    else {
        // console.log(`withPostGraphileContext-144 get from _contextCache: `, )
    }
    hashObj = _contextCache.get(lastHash)
    const {pgRole, jwtClaims, sqlSettingsQuery, needTransaction} = hashObj
```

Are there any work/plans to support declarative partitioning introduced in PostgreSQL 11?

Current behaviour is lets say i have got "fruit" table partitioned by type with separate partitions for each type ("apple", "banana", etc.)

Postgraphile generates schema for child tables and not for parent one :/
I'm submitting a ... <!-- check one with "x" -->

* [x] bug report
* [ ] feature request
* [ ] question <!-- alternatively, ask on Discord (http://discord.gg/graphile) -->

PostGraphile version: 4.4.1

<!-- CLI: `postgraphile --version`; Library: package version -->

<!--
  For bug reports, please complete the rest of this form.
  For all other issues, you can delete the rest of this form.
-->

Minimal SQL file that can be loaded into a clean database:

```sql
CREATE DOMAIN test_domain AS text[];
CREATE TABLE array_test (
  some_array test_domain;  -- text[] underneath
);
INSERT INTO array_test VALUES ('{one,two,three}');
```

Steps to reproduce:

<!-- Please describe how you are running PostGraphile (CLI: full `postgraphile` command line; Library: relevant code) and include any relevant GraphQL queries that demonstrate the issue. -->

1. `npx postgraphile -c "postgres://user:password@localhost/db"`

2. Make a GraphQL query from a table, including an array column.

```graphql
{
  allArrayTests {
    nodes {
      someArray
    }
  }
}
```

Current behavior:
Query works as expected, but an exception is thrown and logged on the console on every query.

```
Error: Internal graphile-build-pg error: should not attempt to tweak an array, please process array before tweaking (type: "pg_catalog._text")
    at pgTweakFragmentForTypeAndModifier (/Users/mileselam/.npm/_npx/91656/lib/node_modules/postgraphile/node_modules/graphile-build-pg/node8plus/plugins/PgTypesPlugin.js:265:23)
    at pgTweakFragmentForTypeAndModifier (/Users/mileselam/.npm/_npx/91656/lib/node_modules/postgraphile/node_modules/graphile-build-pg/node8plus/plugins/PgTypesPlugin.js:263:16)
    at Object.getSelectValueForFieldAndTypeAndModifier (/Users/mileselam/.npm/_npx/91656/lib/node_modules/postgraphile/node_modules/graphile-build-pg/node8plus/plugins/PgColumnsPlugin.js:47:18)
    at Array.pgQuery (/Users/mileselam/.npm/_npx/91656/lib/node_modules/postgraphile/node_modules/graphile-build-pg/node8plus/plugins/PgColumnsPlugin.js:110:37)
    at Object.<anonymous> (/Users/mileselam/.npm/_npx/91656/lib/node_modules/postgraphile/node_modules/graphile-build-pg/node8plus/queryFromResolveDataFactory.js:52:17)
    at queryBuilder.select (/Users/mileselam/.npm/_npx/91656/lib/node_modules/postgraphile/node_modules/graphile-build-pg/node8plus/plugins/pgField.js:44:27)
    at callIfNecessary (/Users/mileselam/.npm/_npx/91656/lib/node_modules/postgraphile/node_modules/graphile-build-pg/node8plus/QueryBuilder.js:22:12)
    at QueryBuilder.lock (/Users/mileselam/.npm/_npx/91656/lib/node_modules/postgraphile/node_modules/graphile-build-pg/node8plus/QueryBuilder.js:650:22)
    at QueryBuilder.lockEverything (/Users/mileselam/.npm/_npx/91656/lib/node_modules/postgraphile/node_modules/graphile-build-pg/node8plus/QueryBuilder.js:721:10)
    at QueryBuilder.build (/Users/mileselam/.npm/_npx/91656/lib/node_modules/postgraphile/node_modules/graphile-build-pg/node8plus/QueryBuilder.js:549:10)
```

The immediately preceding log line begins:
```
0 error(s) in 91.55ms :: query IntrospectionQuery {
```


Expected behavior:
No exception. (Exceptions are expensive performance-wise.)
I'm submitting a ... <!-- check one with "x" -->

* [ ] bug report
* [x] feature request
* [ ] question <!-- alternatively, ask on Discord (http://discord.gg/graphile) -->

PostGraphile version: v4.4.0

Given the following SQL
```sql
CREATE TABLE languages("id" SMALLINT PRIMARY KEY);
CREATE TABLE foo("id" SMALLINT PRIMARY KEY);
CREATE TABLE foo_names
(
    "foo_id" SMALLINT NOT NULL REFERENCES foo(id),
    "language_id" SMALLINT NOT NULL REFERENCES languages(id),
    "name" VARCHAR (16) NOT NULL UNIQUE,
    PRIMARY KEY(foo_id, language_id)
);
```
I would like to be able to request resources with a composite key referencing the current object by just the other fields in the composite key.
```gql
{
  # Without `pg-simplify-inflector` renames to show more clearly
  allFoos {
    nodes {
      # Current solution
      fooNamesByFooId(condition: { languageId: 1 }) {
        # Will always return a list with asingle element since 
        # (languageId, fooId) is the key for fooNames
        nodes {
          name
        }
      }
      # What I want to do here:
      fooNamesByFooIdAndLanguageId(languageId: 1) {
        # Returning the element directly
        name
      }
    }
  }
}
```

I could not find any way to accomplish this currently. Is this something that you would be interested in a PR/plugin for?


I'm submitting a ... <!-- check one with "x" -->

* [ ] bug report
* [x] feature request
* [ ] question <!-- alternatively, ask on Discord (http://discord.gg/graphile) -->

PostGraphile version: v4.4.0

For deployments within containerized environments, it would be convenient if the server exposed a default health check endpoint (conventionally `/healthz` in Kubernetes). A simple `200`/`500` status code with an empty response would be enough, but it might make sense to expose some basic metadata as well. At minimum, I think this endpoint should check for:

- schema build errors (`200` if recoverable)
- connection to postgres
- successful startup of `postgraphile`

Some examples:

```js
// status: 200
{
  "schema": true,
  "postgraphile": true,
  "database": true
}
```

```js
// recoverable schema errors
// status: 200
{
  "schema": false,
  "postgraphile": true,
  "database": true
}
```

```js
// fail to connect to postgres
// status: 500
{
  "schema": false,
  "postgraphile": true,
  "database": false
}
```
I'm submitting a ... <!-- check one with "x" -->

* [ ] bug report
* [x] feature request
* [ ] question <!-- alternatively, ask on Discord (http://discord.gg/graphile) -->

It is fairly trivial to expose `graphql-voyager` yourself if you are already consuming `postgraphile` as a library. Doing so is roughly as easy as:

```ts
import * as express from 'express';
import { express as voyagerMiddleware } from 'graphql-voyager/middleware';
import { postgraphile } from 'postgraphile';

const app = express();

app.use(postgraphile(PG_POOL, PG_SCHEMA, graphileConfig));
app.use('/voyager', voyagerMiddleware({
  endpointUrl: `${graphileConfig.externalUrlBase || ''}/graphql`,
  displayOptions: {
    hideRoot: true,
    skipDeprecated: true,
    skipRelay: true,
  },
}));

app.listen(PORT, () => {
  console.log(`Listening on localhost:${PORT}`);
});
```

It would be nice to have Voyager bundled for a couple reasons, namely:

1. easier for CLI users to explore their schema graphically
1. possibility for tighter integration with our custom GraphiQL interface (i.e. [deep linking](https://github.com/APIs-guru/graphql-voyager/issues/12), which is not yet supported by Voyager)
1. could be loaded at the same `/graphiql` endpoint