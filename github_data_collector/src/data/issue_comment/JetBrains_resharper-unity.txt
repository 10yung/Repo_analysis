As you know, the order in which fields are laid out in a class is the order they will be shown in an Inspector.

Since the attribute is not available in Unity, the only way to prevent code formatting reordering these fields is to wrap them all in a region.

Will NoReorder be supported at some point in the future ?




This can get quite confusing as method will never be called.

https://docs.unity3d.com/ScriptReference/ScriptableObject.html
The warning is issued for == and != but not for implicit bool operator.


Event functions (Awake etc.) should be not public by default as they are invoked by Unity and there is very little reason to invoke them yourselves.

An inspection and quick fix should be created to let the user know and easily fix this.
fix RIDER-38126
Packages added via Package Manager are compiled by the Unity editor and cached in `Library/ScriptAssemblies`, together with their `.pdb` file. These assemblies are referenced in the generated C# project files as binary references.

Unity does not create the `.xml` documentation files, so there is no Quick Doc tooltip support for types or type members defined in packages. E.g. `Unity.Entities.IComponentData` has a lot of XML documentation in the source, but because there is no `.xml` file generated, this documentation is not used.

Rider cannot get the information from the source files because it doesn't really know about the source files. We do show the in Unity Explorer, but they're not part of a project. The best we can do is navigate to the file based on `.pdb` information. But there is no semantic parsing and caching applied to these files.

Ideally, Unity will generate `.xml` files when resolving packages. In this case, Quick Doc tooltips will Just Work(tm). But this wouldn't help in earlier versions of Unity.

Can Rider get this information? Use the source information from the `.pdb` to locate types and members and load/cache the XML documentation from those files? Would this be too slow to do on demand - would a caching step be required? Build the `.xml` files from source whenever the cached `.dll` changes? There could be problems with inactive pre-processor branches...
Unity appears to follow a standard URL scheme for API documentation for their own packages. Rider should navigate to this documentation with F1 help.

If a type or type member is defined in a package, then the API URL is going to be:

```
https://docs.unity3d.com/Packages/{package_name}@{package_version}/api/{namespace}.{type_name}.html#{type_member_name}
```

This is only true for packages that begin `com.unity`. 

* `{package_name}` can be discovered by looking at the project name (for packages in the `Packages` folder, or added as `.asmdef` projects). Or by looking at the location of the source file for the declaration. We should be able to get the source location because packages are compiled by Unity, from source with debug information, and added as references. If the package is in `Library/PackageCache/{package_name}@{full_package_version}`, then we can parse out the package name. We might also have this information as part of what we display in the `Packages` node of Unity Explorer.
* `{pacakge_version}` is the major.minor of the full version. E.g. `0.3.1-preview10` will have a version of `0.3`
* `{namespace}` and `{type_name}` are obvious
* `{type_member_name}` is the name of an anchor on the doc page. This is constructed as the fully qualified type member name, i.e. namespace, type, type member, parameter types. Fields have no parameter types. Methods appear to be written as fully qualified, then all punctuation is replaced by `_`, such as parentheses, commas and angle brackets for generics. This can lead to double underscores. Parameter types are fully qualified, and primitive types such as `int` are written as `System.Int32`.

E.g. The API docs for `Unity.Rendering.LODGroupExtensions.LODParams.GetHashCode(LODGroupExtensions.LODParams obj)` in the `com.unity.rendering.hybrid` package are at:

```
https://docs.unity3d.com/Packages/com.unity.rendering.hybrid@0.3/api/Unity.Rendering.LODGroupExtensions.LODParams.html#Unity_Rendering_LODGroupExtensions_LODParams_GetHashCode_Unity_Rendering_LODGroupExtensions_LODParams_
```


Also, `Unity.Rendering.InstancedRenderMeshBatchGroup.AddBatch(FrozenRenderSceneTag, Int32, Int32, NativeArray<ArchetypeChunk>, NativeArray<Int32>, Int32, Int32, Boolean, EditorRenderData)`:

```
https://docs.unity3d.com/Packages/com.unity.rendering.hybrid@0.3/api/Unity.Rendering.InstancedRenderMeshBatchGroup.html#Unity_Rendering_InstancedRenderMeshBatchGroup_AddBatch_Unity_Rendering_FrozenRenderSceneTag_System_Int32_System_Int32_NativeArray_ArchetypeChunk__NativeArray_System_Int32__System_Int32_System_Int32_System_Boolean_EditorRenderData_
```

* Some types are not fully qualified. In the example above, `NativeArray<T>` and `ArchetypeChunk` are not fully qualified. Perhaps because they are in a different package? Or namespace?
* Research what happens with type generic methods, and operators such as `==`.
* Research Editor and Tests projects. AFAICT, there is no API documentation for these projects
* It's not a huge issue if the type member name is incorrect, as the main page will be correctly loaded
* Do we need/can we have a fallback if the page isn't found? I'm not sure that there is an online search page for these APIs.
Don't show `UnityBugReporter`. Also review the way we're filtering processes - will we ever debug anything other than `unity.exe` or `unity`?

<img width="762" alt="Screenshot 2020-01-08 at 11 46 41" src="https://user-images.githubusercontent.com/222659/71975771-b5d73e00-320c-11ea-9113-03b800b83512.png">

Environment: **2018.4 LTS**

Valid (overwrites `padding-bottom`, `padding-top`, ...)
```css
Button {
    padding-right: 1px;
    padding-top: 1px;
    padding-left: 1px;
    padding-bottom: 1px;
}
```

Invalid (doesn't overwrite `padding-bottom`, `padding-top`, ...)
```css
Button {
   padding: 1px
}
```

Obviously like in CSS you would shorthand the first block to `padding: 1px`. Sadly this does not work. Rider is still suggesting this.

This is fixed in newer versions (at least 19.3) but LTS still has a relevant user base.
If setting both `_transform.position` and `_transform.rotation` in the same code section, suggest using [`_transform.SetPositionAndRotation`](https://docs.unity3d.com/ScriptReference/Transform.SetPositionAndRotation.html)