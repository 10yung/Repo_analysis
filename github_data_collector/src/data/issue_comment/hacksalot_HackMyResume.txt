When I'm trying to clone the project or a forked repo of the project it is giving the below error, after trying to find a reason of what can be the issue I landed up on this [link](https://stackoverflow.com/questions/56479104/retrieving-the-original-files-from-git-lfs-files-in-a-repository) saying the project git setup may not be stable, please advice.
```
 Siddharths-MacBook-Pro:github siddharthsharma$ git clone git@github.com:hearsid/HackMyResume.git
Cloning into 'HackMyResume'...
remote: Enumerating objects: 5468, done.
remote: Total 5468 (delta 0), reused 0 (delta 0), pack-reused 5468
Receiving objects: 100% (5468/5468), 3.17 MiB | 338.00 KiB/s, done.
Resolving deltas: 100% (3758/3758), done.
git-lfs filter-process: git-lfs: command not found
fatal: the remote end hung up unexpectedly
warning: Clone succeeded, but checkout failed.
You can inspect what was checked out with 'git status'
and retry with 'git restore --source=HEAD :/
```

Just checking to see if this project is still being developed? I tried to pull from the registry and a no go there. I looked on AUR and it shows that there has been no updates since over a year ago. So I just wanted to see if this project has been sent to the **Island of Broken Toys** so don't end up wasting time.
Duplicate of #201

Hi, looks as though the domain in your repo description is no longer valid: https://mxtoolbox.com/domain/fluentdesk.com/

It takes me to a malicious site when I visit

- When using JRS themes to generate a PDF resume anything added to `summary` is outputted as `@@@@<del></del>@@@@` in the generated PDF html
- Include `summary` as a field that is included in the transformer function call to fix the above
I'm using this tool in api in the below way. But how do i get this tool to work without saving the file to a temp location?
```
const express = require("express");
const bodyParser = require("body-parser");
const multer = require("multer");
const { exec } = require('child_process');

// create express app
const app = express();

// parse requests of content-type - application/x-www-form-urlencoded
app.use(bodyParser.urlencoded({ extended: true }));

// parse requests of content-type - application/json
app.use(bodyParser.json());

// Setup server port
var port = process.env.PORT || 8080;

var upload = multer().single("resume");

// Send message for default URL
app.get("/", (req, res) => {
  res.json({
    message: "Hello World"
  });
});

app.post("/resume", function(req, res) {
  upload(req, res, function(err) {
    if (err instanceof multer.MulterError) {
      // A Multer error occurred when uploading.
      console.log("mult err occured", err);
    } else if (err) {
      // An unknown error occurred when uploading.
      console.log("unknown err occured");
    }
    // Everything went fine.
    console.log(req.file)
    exec(
      "hackmyresume build " + req.file.buffer + " TO out/resume.html out/resume.doc",
      (err, stdout, stderr) => {
        if (err) {
          console.error(`An error occurred: ${err.message}`);
          return;
        } else {
          console.log(`Result: ${stdout}`);
          if (stderr) {
            console.error(`stderr: ${stderr}`);
          }
        }
      }
    );
  });
});

// listen for requests
app.listen(port, () => {
  console.log("Server is listening on port ", port);
});
```
Current one was older.
Taken from official repo.
https://github.com/jsonresume/resume-schema/edit/v1.0.0/schema.json
Hi there,

Can I add a PR to also validate URI and email formats?

https://github.com/hacksalot/HackMyResume/blob/ab6e7ee1a0f55608b531f4e644c298426291bb17/src/verbs/validate.js#L84

Thanks.
I developed a theme which relies on "promisedHandlebars" because it converts remote images to base64 which runs async. Does this project supports JSON resume themes returning Promises in their render methods ? The Json-resume-cli already utilizes async-await
When I run the tests with `grunt test` today (on 2019-02-07), 11 tests fail. When I change the system date to 2018-02-07, all the tests pass. It seems that only tests related to dates are affected.

See the test output on `master` [here](https://travis-ci.org/filipbartek/HackMyResume/jobs/490159847).
Fixes #219

I verified the correctness by running the tests with `grunt test`. The output shows the same 11 test failures as when run on `dev`. Moreover, I tested the fixed functionality manually by generating a HTML resume with an ampersand (`&`) character in a job title.