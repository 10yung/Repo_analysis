https://github.com/ethereum/solidity/pull/7843 most probably made the rule list split hack obsolete - we should verify that and can potentially merge the rule list back together.
### Description
While working on #8164 I noticed two minor issues in `yulopti`:
- `ConditionalUnsimplifier` step was not available in the tool but present in `OptimiserSuite::allSteps()`. I suspect it might have been added later and nobody remembered to add it to the tool.
- A typo: repeated `f` in `(f)flatten`.

### Checklist
- [x] Code compiles correctly
- [x] All tests are passing
- [ ] New tests have been created which fail without the change (if possible)
- [ ] README / documentation was extended, if necessary
- [ ] Changelog entry (if change is visible to the user)
- [x] Used meaningful commit messages

I'm not sure it this change requires anything in README or Changelog. As for tests, the tool is just a single `.cpp` file and therefore does not have any as far as I can tell. Please let me know if any of these should be added after all.

### Description
This is the initial part of the implementation of #7806.

It provides a command-line application (`tools/yul-phaser`) which can already load `.yul` source code, apply optimizations and rank the resulting programs by their size. It runs a trivial (completely randomized) genetic algorithm and prints the result of each round to the console. The pull request includes a few unit tests but the coverage is still minimal.

This is still work in progress.

#### Structure
- `Program` class encapsulates all the details of source code parsing, analysis and application of optimizations. An instance represents a syntax tree after a few hard-coded transformations (disambiguation, grouping, hoisting, etc.) and ready for arbitrary optimizations.
- `Chromosome` class defines a sequence of optimization steps. Provides methods for generating, changing and accessing its sequence. It does not know about `Program` and does not interact with it directly.
- `Population` class runs the genetic algorithm. It stores a set of chromosomes and refines it in subsequent algorithm rounds. It's mostly concerned with controlling the flow of the algorithm and does not itself do anything complicated. It uses `Chromosome` and `Program` to evaluate fitness of sequences.

#### Not yet implemented
1. No mutation or crossover yet. The algorithm just drops the worse half of the population in each round and refills it with randomized chromosomes.
2. No way to specify the seed for the random number generator yet.
3. Needs more unit tests. For now I have tests only for `Chromosome`.
4. No saving and reloading of algorithm state. When interrupted, the state is lost.
5. A sequence is applied to the program only once. It's supposed to be applied a few times in a loop.
6. `Program` is loaded from file and parsed each time it's being evaluated. I should keep one initialized instance and make a copy when I need to apply optimizations to it.
7. Lots of stuff is still hard-coded. The program is not flexible enough for experimenting yet.

#### Known issues
1. `VarNameCleaner` is disabled for now because it throws `Source needs to be disambiguated` even though it is already disambiguated. `FullInliner` used to fail for me in the same way. `SSATransform` too but on `yulAssert()` instead. Both went away when I changed how I pass AST and other objects around (by value vs smart pointers/references). It's likely that I'm using it wrong or copying something that should not really be copied. I need to take a closer look at this.

#### Questions
1. Should I worry about moving vectors of `std::string`s around? I realized that I could make almost all of them `char const*` and save some dynamic allocations because step names are just `constexpr`s but I'm not sure it's worth the time. It won't be a bottleneck anyway.
2. Is it OK to use plain `assert()` for sanity checks? `solAssert()` looks more like a normal check to me. It throws exceptions and does not get removed in release builds so I'm a bit reluctant to use it for heavier checks for invariants, preconditions and generally stuff that should not happen unless there is actually a bug in the code.
3. Since `yul-phaser` is not a library, I had to list all the necessary `.cpp` files again in `test/CMakeLists.txt` to have `soltest` link properly. This does not seem like a very good solution. Should I store those paths in some cmake variable? Or maybe try to create a library out of the classes I want to test?
4. Tests for `tools/yul_phaser/` seem like they should go into a subdirectory in `test/tools/` but that directory already exists and contains extra tools for testing so. It did not seem right to me to mix them with test cases so I put them in `tests/yul_phaser/` instead. Is that OK?

### Checklist
- [x] Code compiles correctly
- [x] All tests are passing
- [x] New tests have been created which fail without the change (if possible)
- [ ] README / documentation was extended, if necessary
- [ ] Changelog entry (if change is visible to the user)
- [x] Used meaningful commit messages

From the [`abstract` documentation](https://solidity.readthedocs.io/en/latest/contracts.html#abstract-contracts), it seems like what the keyword does is mark the contract as non-deployable (i.e. it needs to be inherited from). Because contracts missing function implementations are always non-deployable, they require `abstract`.

If this is the case, shouldn't `abstract` be required also for contracts with `constructor() internal`?
Depends on https://github.com/ethereum/solidity/pull/8068
Part of  #7070
## Abstract

Hey, I am trying to  standardize `appended compact signatures` in top of what GnosisSafe did (https://github.com/gnosis/safe-contracts/blob/892448e93f6203b530630f20de45d8a55fde7463/contracts/GnosisSafe.sol#L189).

There is interesting things happening in https://github.com/ethereum/EIPs/pull/2126, but it also seems to lack to standardize the signature format.

We have 3 formats I know:  
- Canonical: 68 bytes size;
- Compact 65 bytes size (v is padded to a single byte); 
- Super compact 64 size (v is embedded in r bitwise https://eips.ethereum.org/EIPS/eip-2098)... 
 I think that maybe would be interesting to solidity have a type `signature` to create a new standard out of all, and we could use something like `function checkSig(signature memory signatures)` 

I think that if anything is done, it should be looked into what GnosisSafe done and how we could improve in solidity for this implementation be more "elegant". 


## Motivation

However I think that this is such common thing that solidity should have it embedded, so it becomes easier for all wallets understand the format of signature (and that is a signature, or multiple supported).

I know ya going to say to use Struct and Libraries, and yes, that's what I would have to use if this don't gets approved.

## Specification

WIP / Brainstorm

Signatures should:
- Dynamic Size;
- Depending on the type, Can be nested, a signature can contain other signatures that themselves can contain other signatures,
- Have type accessible to contracts know what to do;
- Can check against msg.sender
- Can be null (check against application logic) 

## Backwards Compatibility

Could be part of ABIV2Encoder, so its under experimental features. 
The solidity javascript library created using Emscripten defaults the namespace to "Module", this is can cause a conflict with other libraries that use the same namespace (still using the default).

A suggestion of a new namespace could be "Solidity", emphasis on suggestion :).

## Backwards Compatibility
The emscripten library is wrapped by solcjs and with the new WebAssembly ouput I assume that will be required to change as well. This may the ideal opportunity to do the change, as that will be the main library affected for the majority of end users.

Thanks!!
```
Compiling all test contracts into bytecode...

Traceback (most recent call last):

  File "/home/travis/build/ethereum/solidity/scripts/bytecodecompare/prepare_report.py", line 29, in <module>

    (out, err) = proc.communicate(json.dumps(input_json))

  File "/usr/lib/python3.4/subprocess.py", line 960, in communicate

    stdout, stderr = self._communicate(input, endtime, timeout)

  File "/usr/lib/python3.4/subprocess.py", line 1602, in _communicate

    input_view = memoryview(self._input)

TypeError: memoryview: str object does not have the buffer interface
```
References https://github.com/ethereum/solidity/issues/8154
Direct access to the stack is not allowed any more, so we can remove most of the stack height checks.

Remove:

 - [x] AsmAnalysisInfo::stackHeightInfo
 - [ ] AsmAnalyzer::m_stackHeight (some errors have to be checked differently, but we should also rephrase the error messages since they are all talking about the stack)