Hi all,

Is there a timeframe for promoting the Python base containers from `experimental` to `production ready`?
In distroless/pythong2.7:debian10:latest, python 2.7.16-2 suffers the following published CVE's;

https://security-tracker.debian.org/tracker/CVE-2019-9948
https://security-tracker.debian.org/tracker/CVE-2019-9740
https://security-tracker.debian.org/tracker/CVE-2018-20852
https://security-tracker.debian.org/tracker/CVE-2019-9947
https://security-tracker.debian.org/tracker/CVE-2019-16056
https://security-tracker.debian.org/tracker/CVE-2019-16935
https://security-tracker.debian.org/tracker/CVE-2019-10160

Seems the python2.7-debian10 is not picking up the fixes for CVE's along side the Debian Buster release cycle, as these are fixed in 2.7.16-2+deb10u1.

EDIT:
python2.7-debian10:latest also suffers CVE-2019-17594 and CVE-2019-17595 in libncursesw6 6.1+20181013-2+deb10u1. Both are fixed in in Debian Buster in libncursesw6  6.1+20181013-2+deb10u2

https://security-tracker.debian.org/tracker/CVE-2019-17594
https://security-tracker.debian.org/tracker/CVE-2019-17595

Testing with gcr.io/distroless/python2.7-debian10@sha256:81a088a8c82979e37e5ae8079c4d081c8fee0b9aeba5c0813150b557d4218929 (debug from 28th October 2019);
```bash
# python
Python 2.7.16 (default, Apr  6 2019, 01:42:57) 
[GCC 8.3.0] on linux2
Type "help", "copyright", "credits" or "license" for more information.
>>> import gzip
>>> import shutil
>>> with gzip.open('/usr/share/doc/python2.7-minimal/changelog.Debian.gz') as f_in:
...     with open('/usr/share/doc/python2.7-minimal/changelog.Debian', 'wb') as f_out:
...             shutil.copyfileobj(f_in, f_out)
... 
>>> 
# cd /usr/share/doc/python2.7-minimal
# ls
README.Debian        changelog.Debian     changelog.Debian.gz  copyright
# cat changelog.Debian
python2.7 (2.7.16-2) unstable; urgency=high

  [ Matthias Klose ]
  * CVE-2019-9636. Fix issue #36216: Add check for characters in netloc that
    normalize to separators. Closes: #924073.
  * CVE-2019-9948. Fix issue #35907: Stop urllib exposing the local_file schema
    (file://).

  [ Dimitri John Ledkov ]
  * Bump Build-Depedency and Dependency of libssl-dev and libss1.1 to
    1.1.1 or higher. As TLS1.3 constants leak into ssl module, thus one
    shouldn't mix and match python2.7 & libssl1.1. LP: #1808476

 -- Matthias Klose <doko@debian.org>  Sat, 06 Apr 2019 03:42:57 +0200
...
```
Testing with python installed on debian:buster;
```bash
# gunzip /usr/share/doc/python2.7-minimalchangelog.Debian.gz
# head -n 50 /usr/share/doc/python2.7-minimalchangelog.Debian
# head -n 50 changelog.Debian
python2.7 (2.7.16-2+deb10u1) buster; urgency=medium

  * CVE-2018-20852
  * CVE-2019-10160
  * CVE-2019-16056 (Closes: #940901)
  * CVE-2019-16935
  * CVE-2019-9740
  * CVE-2019-9947

 -- Moritz MÃ¼hlenhoff <jmm@debian.org>  Fri, 11 Oct 2019 00:02:15 +0200

python2.7 (2.7.16-2) unstable; urgency=high

  [ Matthias Klose ]
  * CVE-2019-9636. Fix issue #36216: Add check for characters in netloc that
    normalize to separators. Closes: #924073.
  * CVE-2019-9948. Fix issue #35907: Stop urllib exposing the local_file schema
    (file://).

  [ Dimitri John Ledkov ]
  * Bump Build-Depedency and Dependency of libssl-dev and libss1.1 to
    1.1.1 or higher. As TLS1.3 constants leak into ssl module, thus one
    shouldn't mix and match python2.7 & libssl1.1. LP: #1808476

 -- Matthias Klose <doko@debian.org>  Sat, 06 Apr 2019 03:42:57 +0200
```

It would be very useful if it were easier to add custom ca certs. PR #272 aims to do that.
 Failed to execute goal com.google.cloud.tools:jib-maven-plugin:1.8.0:build (default) on project td-provider: Tried to pull image manifest for gcr.io/distroless/java-debian10:latest but failed because: Failed to fetch "latest" from request "/v2/distroless/java-debian10/manifests/latest". | If this is a bug, please file an issue at https://github.com/GoogleContainerTools/jib/issues/new: 404 Not Found
with https://github.com/GoogleContainerTools/distroless/pull/446 , the full openjdk is included in the debug image to get the debug binarys.

This increases the size from 196 to 423 MB!

Is it neccesary include the full jdk with alls sources, modules etc. ?
maybe its better to only include the binarys itself (only a few (~5) MB)? 

What do you think?

I tested this manuelly and it does work 




While looking to adopt distroless for an application, I wanted to know how to run my application as a non root user. It took me a while to discover that there is a `nonroot` and `nobody` uid/gid in the images.

Document the availability of `nonroot` and `nobody`. Also document the differences between them, and when they should be used.


[v12.14.0 Release Notes](https://github.com/nodejs/node/blob/master/doc/changelogs/CHANGELOG_V12.md#12.14.0)
Custom jre built with jlink provides substantial image size reduction

In [Our custom base image](https://github.com/pragmasoft-ua/spring-boot-base-docker-image) we're trying to use distroless base as a base image for jlink, but it seems is missing important libraries, which are java specific, like fontconfig, as e.g. was reported here #321

Can't we make a distroless java dependency hierarchy two level instead of one level, ie instead of

base -> java

make it

base -> java-base -> java

where java-base includes required native libs but does not include jre itself?



It looks like the :latest version is not labeled on GCR.
I've already cleaned up the `BUILD` file in #430 that can now publish Java Debian 10 images.

Now I only need to do this on the `cloudbuild.yaml` file, and we should be good.

However, I realized the problem that `cloudbuild.yaml` cannot have more than 100 steps. @donmccasland can we break it up into two files, `cloudbuild1.yaml` and `cloudbuild2.yaml`?