#original code
src/main/java/redis/clients/jedis/util/Sharded.java



  private void initialize(List<S> shards) {
    nodes = new TreeMap<Long, S>();

    for (int i = 0; i != shards.size(); ++i) {
      final S shardInfo = shards.get(i);
      if (shardInfo.getName() == null) for (int n = 0; n < 160 * shardInfo.getWeight(); n++) {
        nodes.put(this.algo.hash("SHARD-" + i + "-NODE-" + n), shardInfo);
      }
      else for (int n = 0; n < 160 * shardInfo.getWeight(); n++) {
        nodes.put(this.algo.hash(shardInfo.getName() + "*" + n), shardInfo);
      }
      resources.put(shardInfo, shardInfo.createResource());
    }
  }

# proposal


  private void initialize(List<S> shards) {
    nodes = new TreeMap<Long, S>();

    for (int i = 0; i != shards.size(); ++i) {
      final S shardInfo = shards.get(i);
      int N =  160 * shardInfo.getWeight();
      if (shardInfo.getName() == null) for (int n = 0; n < N; n++) {
        nodes.put(this.algo.hash("SHARD-" + i + "-NODE-" + n), shardInfo);
      }
      else for (int n = 0; n < N; n++) {
        nodes.put(this.algo.hash(shardInfo.getName() + "*" + n), shardInfo);
      }
      resources.put(shardInfo, shardInfo.createResource());
    }
  }

it avoid repeattly call shardInfo.getWeight() unnecessarily.
and new code shorter and terse.
Fixes #2126 
Added support for 'client id' command

**Reference** [client-id command doc](https://redis.io/commands/client-id): 
**Command**: > client id
**Return**: Integer - id of the client
**Test**: response from 'client id' should match the 'client list' self filter
### Expected behavior 
when kill 7000 master node , the code will appear exception,  
wait a moment, the slave instead of 7000 master node, the exception should be disappear.
but still pose exception .

### Java code 
public static void clusterConnJedis() {
        Set<HostAndPort> clusterNodes = new HashSet<HostAndPort>();
        HostAndPort hp7000 = new HostAndPort("172.16.1.41", 7000);
        HostAndPort hp7001 = new HostAndPort("172.16.1.41", 7001);
        HostAndPort hp7002 = new HostAndPort("172.16.1.41", 7002);
        HostAndPort hp7003 = new HostAndPort("172.16.1.41", 7003);
        HostAndPort hp7004 = new HostAndPort("172.16.1.41", 7004);
        HostAndPort hp7005 = new HostAndPort("172.16.1.41", 7005);
        clusterNodes.add(hp7000);
        clusterNodes.add(hp7001);
        clusterNodes.add(hp7002);
        clusterNodes.add(hp7003);
        clusterNodes.add(hp7004);
        clusterNodes.add(hp7005);
        JedisCluster clusterPool = null;
        while (true) {
            try {
                clusterPool = new JedisCluster(clusterNodes, 5000, new JedisPoolConfig());
                int index = new Random().nextInt(100000);
                String key = "k-" + index;
                String value = "v-" + index;
                clusterPool.set(key, value);
                System.out.println("key:value=" + key + ":" + clusterPool.get(key));
                TimeUnit.MILLISECONDS.sleep(500);
            } catch (Exception e) {
                e.printStackTrace();
            } finally {
                if (null != clusterPool) {
                    clusterPool.close();
                }
            }
        }
    }

### Actual behavior and Steps to reproduce:

Redis cluster just installed and runing, run TestClass.clusterConnJedis(); in main method. everything is ok , I find the right pint key:value=k-RandomNum:v-RandomNum per 500 MILLISECONDS in conole.

But when I command ' kill -p ${hp7000_ pid}' , 7000 master node be killed. I find the console print
JedisClusterMaxAttemptsException several normal print  intervals.
exception details:
redis.clients.jedis.exceptions.JedisClusterMaxAttemptsException: No more cluster attempts left.
	at redis.clients.jedis.JedisClusterCommand.runWithRetries(JedisClusterCommand.java:86)
	at redis.clients.jedis.JedisClusterCommand.runWithRetries(JedisClusterCommand.java:124)
	at redis.clients.jedis.JedisClusterCommand.runWithRetries(JedisClusterCommand.java:124)
	at redis.clients.jedis.JedisClusterCommand.runWithRetries(JedisClusterCommand.java:124)
	at redis.clients.jedis.JedisClusterCommand.runWithRetries(JedisClusterCommand.java:124)
	at redis.clients.jedis.JedisClusterCommand.runWithRetries(JedisClusterCommand.java:124)
	at redis.clients.jedis.JedisClusterCommand.run(JedisClusterCommand.java:25)
	at redis.clients.jedis.JedisCluster.set(JedisCluster.java:143)
	at Test.clusterConnJedis(Test.java:69)
	at Test.main(Test.java:11)
exception picture:
![image](https://user-images.githubusercontent.com/8557230/71959327-74a35600-322d-11ea-88f4-3c7163029103.png)

### Redis / Jedis Configuration
see code clusterConnJedis()
#### Jedis version:
jedis-3.2.0
#### Redis version:
redis-5.0.7 cluster
#### Java version:
jdk1.8.0.211




### Expected behavior
we have a redis cluster in aws elasticache.it has multi endpoint. our service should be connect different endpoint when service restart.

### Actual behavior
in our service node A, it alway connected redis cluster endpoint B. always.

### Steps to reproduce:
we found jedis getaddress use InetAddress.getByName(hostname),it always return same ip(if dns server return ip list).it happend in ipv6 environment.if we close ipv6,it's not problem.
we found the result.
https://xhao.io/2018/09/getaddrinfo/
```
import java.net.InetAddress;
import java.util.Random;
public class JavaInetAddressGetByAddressExample1_1 {
  public static void main(String[] args) {
    try {
      InetAddress[] ia = InetAddress.getAllByName("buss-subsribe-main.l5pqk4.clustercfg.apse1.cache.amazonaws.com");
      for(int i = 0; i< ia.length; i++){
          System.out.println(ia[i].getHostAddress());
      }
      System.out.println("-------------------------------------------");
      int a = new Random().nextInt(ia.length);
      InetAddress randomip = ia[a];
      System.out.println(randomip.getHostAddress());
      System.out.println("-------------------------------------------");
      InetAddress ip1=InetAddress.getByName("buss-subsribe-main.l5pqk4.clustercfg.apse1.cache.amazonaws.com");
      System.out.println(ip1.getHostAddress());
    } catch (Exception ex) {
      System.err.println(ex);
    }
  }
}
```
so we can use Random() to get ipadddr as above.
run in:
https://compiler.javatpoint.com/opr/test.jsp?filename=JavaInetAddressGetByAddressExample1_1
### Redis / Jedis Configuration

#### Jedis version:

#### Redis version:

#### Java version:
JDK 8




![image](https://user-images.githubusercontent.com/13274079/71538486-dc19f580-2951-11ea-9922-c2daedce4929.png)

The docs imply that we should somehow at runtime detect that master has gone down and we should promote a slave. 

I'm creating a pretty traditional REST API server with Ktor and using jedis to cache API responses. This means that before every access to jedis, I have to confirm whether the instances are up and manage master/slave promotions. This would not be ideal when handling thousands of API calls/minute.

Also, is there a way to dynamically create new instances? This would be great for development on localhost (whereas during deployment to, e.g AWS, Elasticache manages the pool on it's own)
please implements clientId() method!

thank you very much !
#### Jedis version:3.1

#### Java version:1.8

java.lang.ClassCastException: [B cannot be cast to java.util.List
        at redis.clients.jedis.BuilderFactory$7.build(BuilderFactory.java:111) ~[jedis-3.1.0.jar:na]
        at redis.clients.jedis.BuilderFactory$7.build(BuilderFactory.java:107) ~[jedis-3.1.0.jar:na]
        at redis.clients.jedis.Response.build(Response.java:61) ~[jedis-3.1.0.jar:na]
        at redis.clients.jedis.Response.get(Response.java:37) ~[jedis-3.1.0.jar:na]


avoid getting redis.clients.jedis.JedisDataException:NOAUTH Authentication required.
### Expected behavior

Successful increment or get.

### Actual behavior

Thrown exception:
 redis.clients.jedis.exceptions.JedisDataException: ERR Command disallowed

### Steps to reproduce:

I have a code which when connects to local Redis doesn't have this exception thrown (although many others are occasionally). When I connect to AWS Redis this happens very often when running commands. 

### Redis / Jedis Configuration
JedisPool with 1 min, 1max, 1 idle.
#### Jedis version:
3.2.0
#### Redis version:
?
#### Java version:
1.8.x




please implements xinfo() method!