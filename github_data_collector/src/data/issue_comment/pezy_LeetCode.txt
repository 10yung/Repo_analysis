Leetcode LRU Cache Problem

https://leetcode.com/problems/string-to-integer-atoi/

May I ask you for the solution of problem 8 string-to-integer-atoi ?

```C++
class Solution {
    public:
    // 一种新的思路，供大家参考
    // 改进二分查找，并通过修改target的值，使得最多经两次二分查找即可获得元素所在的区间
    // 复杂度O(logn) ~ O(2logn), 处于O(logn)级别，符合题目要求
    // 该算法最后的if-else判断应该还可以改进，如有好的想法请回复
    vector<int> searchRange(vector<int>& nums, int target) {
        if (nums.empty())
            return {-1, -1};
        int min_rank = -1, max_rank = -1;
        int lo = 0, hi = nums.size();
        while (lo < hi) { // 改进二分查找，使其总能返回多个命中元素的秩最大者。耗时O(logn)
            int mi = lo + ((hi - lo) >> 1);
            (target < nums[mi]) ? hi = mi : lo = mi + 1;
        } // 循环结束时，lo为大于target的元素的最小秩，故 --lo 即不大于target的元素的最大秩
        if (--lo != -1 && nums[lo] == target) { // 如target不存在可提前退出
            max_rank = lo; // 此时的lo即为target的最大秩（如存在）
            --target; hi = lo; lo = 0; // 第二次二分查找查找对象变为target - 1，查找区间缩小至[0, max_rank)
            while (lo < hi) { // 耗时O(log(max_rank + 1))
                int mi = lo + ((hi - lo) >> 1);
                (target < nums[mi]) ? hi = mi : lo = mi + 1;
            } // 循环结束时，lo为大于 target - 1 的元素的最小秩，即target的最小秩（如存在）
            min_rank = lo; // 此时的lo即为target的最小秩（如存在）
        }
        if (min_rank == -1)
            return {-1, -1};
        else
            return {min_rank, max_rank};
    }
};
```