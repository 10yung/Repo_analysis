**Describe the bug**
The `run|debug` option is moving to weird positions and not just above the `App` entry point.
See screenshot.

**To Reproduce**
Steps to reproduce the behavior:
1. Use the following code:
```scala
trait Foo  {
  val a = 1 * 1
  val b = 1
  val c = 1     * 1
}

object Lab0 extends App 
```
The spaces are very (weirdly) important for the bug. 
2. Make sure that the file name will be `Lab0.scala`

**Expected behavior**
The `run|debug` should appear only above the entry point.

**Screenshots**
![image](https://user-images.githubusercontent.com/8167952/72671357-9385c180-3a51-11ea-9584-6553d94c3c63.png)

**Installation:**
- Operating system: Windows
- Editor: Visual Studio Code
- Metals version: v0.8.0

**Additional context**
None

**Describe the bug**
Undo (ctrl+z) doesn't revert changes made by "Rename symbol" on different files

**To Reproduce**
Steps to reproduce the behavior:

Create a case class in one file and second case class in another file.

File1.scala
```
case class Note(value: String)
```

File2.scala
```
case class Test(note: Note)
```
Then use the feature "Rename Symbol" or F2 to rename `Note` to a different name.

After the rename use "Undo" or Ctrl+Z to revert back the name to the original `Note`

**Expected behavior**
All occurrences of the symbol across all files should be reverted back

**Installation:**
- Operating system: Windows
- Editor: Visual Studio Code
- Metals version: v0.8.0

**Search terms**
refactor, rename, undo

**Describe the bug**
When trying to compile a project cross-built against Scala Native, the import fails with an error message:

```
INFO  [error] no clang++8, clang++-8, clang++80, clang++-8.0, clang++7, clang++-7, clang++70, clang++-7.0, clang++60, clang++-6.0, clang++50, clang++-5.0, clang++40, clang++-4.0, clang++39, clang++-3.9, clang++38, clang++-3.8, clang++37, clang++-3.7, clang++ found in $PATH. Install clang (http://www.scala-native.org/en/latest/user/setup.html)
```

**To Reproduce**
Steps to reproduce the behavior:
1. Open VS Code with an application cross-built against Scala Native (I experienced when working on ZIO)
2. Import build
3. Check logs
4. See error

**Expected behavior**
Would expect build to be successfully imported and normal functionality to be available including run and debug.

**Installation:**
- Operating system: macOS
- Editor: Visual Studio Code
- Metals version: v0.8.0

**Additional context**
Was working fine on last version of Metals. @ekrich reported that he was experiencing the issue as well.

```
adamfraser@Adams-MacBook Desktop % /usr/bin/clang++ --version              
Apple clang version 11.0.0 (clang-1100.0.33.8)
Target: x86_64-apple-darwin19.2.0
Thread model: posix
InstalledDir: /Library/Developer/CommandLineTools/usr/bin
```

**Search terms**
Scala Native, 0.8.0, Run, Debug, Import Build

As mentioned recently on gitter. Please assign to me so I don't forget to contribute this :) 
**Describe the bug**
<!-- A clear and concise description of what the bug is. -->

**To Reproduce**
Steps to reproduce the behavior:
1. Set up the new Pants integration by setting `metals.pants-targets=something::`.
2. Attempt to import the build (`lsp-metals-build-import` in Emacs).
3. Pants get invoked with the `--concurrent` option, which is not supported in older versions of Pants, causing the import to fail.

**Expected behavior**
Build imported and out-of-file completion available.

**Installation:**
- Metals version: v0.8.0

**Additional context**
The solution would be to either add an option to toggle the `--concurrent` option, or have metals auto-detect if Pants supports `--concurrent` before invoking it.

**Search terms**
Pants
0.8.0
v0.8.0
Build
**Describe the bug**
When I've updated my metals installation to 0.8.0 (and 0.8.0 snapshot) I'm unable to properly import my project. I suspect that the issue may be related with my custom cacerts. For previous version (0.7.6) it worked fine. 

When I run my emacs, after some time I get this error:
```
INFO  started: Metals version 0.8.0+17-572f819c-SNAPSHOT in workspace '<my_workspace>'
INFO  time: initialize in 0.76s
INFO  running '/nix/store/wilpyg2acq8fglcchd1gh2340gl1hb8f-jetbrainsjdk-152b1248.6/jre/bin/java -Djline.terminal=jline.UnsupportedTerminal -Dsbt.log.noformat=true -Dfile.encoding=UTF-8 -Djavax.net.ssl.trustStore=<path_to_my_cacerts> -Djavax.net.ssl.trustStorePassword=changeit -Xss2048K -jar /tmp/metals1763162161274481289/sbt-launch.jar -Dbloop.export-jar-classifiers=sources bloopInstall'

...

[D] Waiting for a connection at local:///tmp/bsp-launcher1339486761166939038/bsp.socket...
The server is listening for incoming connections at local:///tmp/bsp-launcher1339486761166939038/bsp.socket...
Starting thread that pumps stdin and redirects it to the bsp server...
Starting thread that pumps server stdout and redirects it to the client stdout...
INFO  tracing is disabled for protocol BSP, to enable tracing of incoming and outgoing JSON messages create an empty file at <my_home>/.cache/metals/bsp.trace.json
ERROR Timeout waiting for 'build/initialize' response
ERROR Failed to connect with build server, no functionality will work.
java.util.concurrent.TimeoutException
	at java.util.concurrent.CompletableFuture.timedGet(CompletableFuture.java:1771)
	at java.util.concurrent.CompletableFuture.get(CompletableFuture.java:1915)
	at scala.meta.internal.metals.BuildServerConnection$.initialize(BuildServerConnection.scala:259)
	at scala.meta.internal.metals.BuildServerConnection$.$anonfun$fromSockets$1(BuildServerConnection.scala:203)
	at scala.util.Success.$anonfun$map$1(Try.scala:255)
	at scala.util.Success.map(Try.scala:213)
	at scala.concurrent.Future.$anonfun$map$1(Future.scala:292)
	at scala.concurrent.impl.Promise.liftedTree1$1(Promise.scala:33)
	at scala.concurrent.impl.Promise.$anonfun$transform$1(Promise.scala:33)
	at scala.concurrent.impl.CallbackRunnable.run(Promise.scala:64)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
	at java.lang.Thread.run(Thread.java:745)

WARN  Stopped configuration of SemanticDB in Scala 2.12.10 projects: Error downloading org.scalameta:semanticdb-scalac_2.12.10:4.3.0
  not found: <myhomedir>/.ivy2/local/org.scalameta/semanticdb-scalac_2.12.10/4.3.0/ivys/ivy.xml
  download error: Caught javax.net.ssl.SSLHandshakeException: sun.security.validator.ValidatorException: PKIX path building failed: sun.security.provider.certpath.SunCertPathBuilderException: unable to find valid certification path to requested target (sun.security.validator.ValidatorException: PKIX path building failed: sun.security.provider.certpath.SunCertPathBuilderException: unable to find valid certification path to requested target) while downloading https://repo1.maven.org/maven2/org/scalameta/semanticdb-scalac_2.12.10/4.3.0/semanticdb-scalac_2.12.10-4.3.0.pom
  not found: https://dl.bintray.com/scalacenter/releases/org/scalameta/semanticdb-scalac_2.12.10/4.3.0/semanticdb-scalac_2.12.10-4.3.0.pom
Jan 16, 2020 10:49:31 AM org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint notify
WARNING: Unsupported notification method: textDocument/willSave
```

**Steps to reproduce the behavior:**

This is how metals was installed (I tried both - snapshot and release):
```
coursier -J-Djavax.net.ssl.trustStore=<path_to_my_cacerts> -J-Djavax.net.ssl.trustStorePassword=changeit bootstrap \
  --java-opt -Xss4m \
  --java-opt -Xms100m \
  --java-opt -Dmetals.client=emacs \
  --java-opt -Djavax.net.ssl.trustStore=<path_to_my_cacerts> \
  --java-opt -Djavax.net.ssl.trustStorePassword=changeit \
  org.scalameta:metals_2.12:0.8.0+17-572f819c-SNAPSHOT \
  -r bintray:scalacenter/releases \
  -r sonatype:snapshots \
  -o $HOME/bin/metals-emacs -f
```

I've never used custom bloop installation. It was always embedded one. I suspect that something (bloop?) no longer respects -Djavax.net.ssl.trustStore option (or it wasn't passed somehow there?). Of course I've placed .jvmopts file in the root of my project with the following content (it worked with metals < 0.8.0):
```
-Djavax.net.ssl.trustStore=<path_to_my_cacerts>
-Djavax.net.ssl.trustStorePassword=changeit
```

Moreover, I see that something has changed when it comes to sbt-bloop installation and from now on you use additional .sbt file.
```
$ git status
On branch master
Your branch is up to date with 'origin/master'.

Untracked files:
  (use "git add <file>..." to include in what will be committed)

	project/metals.sbt

nothing added to commit but untracked files present (use "git add" to track)
```

**Installation:**

Operating system: nixos
Editor: emacs
Metals version: v0.8.0 or 0.8.0+17-572f819c-SNAPSHOT

**Search terms:**
build import, javax.net.ssl.trustStore, .jvmopts
**Question**

Metals import sbt build failed to work on VSCode when using remote-SSH to a CentOS machine.
```log
INFO  [warn] 	::::::::::::::::::::::::::::::::::::::::::::::
INFO  [warn] 	::          UNRESOLVED DEPENDENCIES         ::
INFO  [warn] 	::::::::::::::::::::::::::::::::::::::::::::::
INFO  [warn] 	:: ch.epfl.scala#sbt-bloop;1.4.0-RC1: not found
INFO  [warn] 	::::::::::::::::::::::::::::::::::::::::::::::
INFO  [warn] 
INFO  [warn] 	Note: Some unresolved dependencies have extra attributes.  Check that these dependencies exist with the requested attributes.
INFO  [warn] 		ch.epfl.scala:sbt-bloop:1.4.0-RC1 (scalaVersion=2.10, sbtVersion=0.13)
INFO  [warn] 
INFO  [warn] 	Note: Unresolved dependencies path:
INFO  [warn] 		ch.epfl.scala:sbt-bloop:1.4.0-RC1 (scalaVersion=2.10, sbtVersion=0.13) (/mnt/ssd/liushi/spark-source/project/metals.sbt#L4-5)
INFO  [warn] 		  +- default:spark-source-build:0.1-SNAPSHOT (scalaVersion=2.10, sbtVersion=0.13)
INFO  sbt.ResolveException: unresolved dependency: ch.epfl.scala#sbt-bloop;1.4.0-RC1: not found
INFO  	at sbt.IvyActions$.sbt$IvyActions$$resolve(IvyActions.scala:320)
...(omitted)
```

**Installation:**

- Operating system: CentOS 7 (via remote-SSH from a macOS machine)
- Editor: Visual Studio Code
- Metals version: v1.7.2

**Describe the bug**
Taking the same multiline string in both a `.scala` file and a `*.worksheet.sc` file are returning different indentations with the worksheet one being off by one.

Given the following in a worksheet, you'll get the wrong indentation.
```scala
val x = """|
          |""".stripMargin

//"newText": "          |"  <-- this was returned in a .sc file
//"newText": "           |" <-- this was return in the scala file for the same thing
```
**To Reproduce**
Steps to reproduce the behavior:
1. Make sure you have the correct editor settings to enable onTypeFormatting
2. Create a `val x = """|""".stripMargin`
3. `val x = """|<enter>""".stripMargin`
4. See the wrong indentation

**Expected behavior**
I'd expect the `newText` being returned from Metals to have the correct indentation

**Screenshots**
![2020-01-15 20 23 58](https://user-images.githubusercontent.com/13974112/72464123-fe769480-37d4-11ea-949a-3a3fc1737af7.gif)

**Installation:**
- Operating system: macOS
- Editor: Visual Studio Code and coc-metals with Neovim
- Metals version: v0.8.0

**Search terms**
worksheets, multiline strings, onTypeFormatting, indentation

Previously, there was not way to override all of the build plugins Bloop versions. Now we add a unified setting for doing so - one setting should be enough since for each workspace we can only use one build tool. 

Or do we want to have a separate setting for each build tool? That would be for 3 different ones: Sbt, Gradle and Maven.

I also promoted some setting to LSP ones.
**Describe the bug**
I am trying to use the new Metals functionality with Caliban (https://github.com/ghostdogpr/caliban). I am able to import the build successfully but when I do so I don't see the `run` and `debug` options that I see when creating a new workspace from scratch. I think it may have to do with the project being cross built against JVM and ScalaJS. On one occasion I did see the option but since then it has not reappeared despite numerous attempts including deleting `.bloop` and `.metals` folders and uninstalling and reinstalling Metals.

**To Reproduce**
Steps to reproduce the behavior:
1. Fork Caliban
2. Import the build in Visual Studio Code.
3. Navigate to an executable file (e.g. `ExampleApp.scala`)
4. See that there is no debug or run option above the definition.

**Expected behavior**
I would expect the run and debug options to be available and execute the program.

**Installation:**
- Operating system: MacOS
- Editor: Visual Studio Code
- Metals version: v0.8.0