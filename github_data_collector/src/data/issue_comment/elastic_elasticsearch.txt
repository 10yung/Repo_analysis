The new test verifies that FrozenEngine correctly opens indices created in the previous major version with or without soft-deletes.

Relates #50775
This issue is a placeholder issue to track changes that are needed to prepare autoscaling for release.

- [ ] register the `xpack.autoscaling.enabled` setting in release builds (cf. #51161)
- [ ] include the autoscaling docs in release builds (cf. #51190)
Since autoscaling is currently only under development, this commit causes the autoscaling docs to be excluded any time that release docs are being built.

We can use Lucene index exclusively in peer recoveries and primary-replica resync in 8.0.

Relates #50775
Related to https://github.com/elastic/elasticsearch/pull/49827

This PR updates the elasticsearch-certutil command reference (https://www.elastic.co/guide/en/elasticsearch/reference/master/certutil.html) with the new http parameter.
I caused a serialization bug in #50873. It is kind of tricky to get:
* Run a date_histogram aggregation
* On a shard on 7.6
* That shard doesn't return any results
* The coordinating node is before 7.6

### Changes
* Rewrites 'Text analysis' page intro as high-level definition.
  Adds guidance on when users should configure text analysis
* Rewrites and splits index/search analysis content:
  * Conceptual content -> 'Index and search analysis' under 'Concepts'
  * Task-based content -> 'Specify an analyzer' under 'Configure...'
* Adds detailed examples for when to use the same index/search analyzer
  and when not.
* Adds new example snippets for specifying search analyzers

### Previews
* **Text analysis intro:**
   http://elasticsearch_51184.docs-preview.app.elstc.co/guide/en/elasticsearch/reference/master/analysis.html
* **Index and search analysis (concepts):**
   http://elasticsearch_51184.docs-preview.app.elstc.co/guide/en/elasticsearch/reference/master/analysis-index-search-time.html
* **Specify an analyzer (task):**
   http://elasticsearch_51184.docs-preview.app.elstc.co/guide/en/elasticsearch/reference/master/specify-analyzer.html

I've recently had a build fail due to test failures in RecoveryIT and IndexingIT. Looking into these test failures, the cluster and indices being tested fail to reach the green state within the timeout period. Ultimately the issue is caused by a tripped assertion, which causes a node to stop:

```
ERROR][o.e.b.ElasticsearchUncaughtExceptionHandler] [v7.6.0-2] fatal error in thread [elasticsearch[v7.6.0-2][clusterApplierService#updateTask][T#1]], exiting | Â 
java.lang.AssertionError: {task=DocumentMapper{mapperService=org.elasticsearch.index.mapper.MapperService@77c1e129, type='task', typeText=task, mappingSource={"task":{"dynamic":"strict","_meta":{"version":3},"properties":{"completed":{"type":"boolean"},"error":{"type":"object","enabled":false},"response":{"type":"object","enabled":false},"task":{"properties":{"action":{"type":"keyword"},"cancellable":{"type":"boolean"},"description":{"type":"text"},"headers":{"type":"object","enabled":false},"id":{"type":"long"},"node":{"type":"keyword"},"parent_task_id":{"type":"keyword"},"running_time_in_nanos":{"type":"long"},"start_time_in_millis":{"type":"long"},"status":{"type":"object","enabled":false},"type":{"type":"keyword"}}}}}}, mapping={"task":{"dynamic":"strict","_meta":{"version":3},"properties":{"completed":{"type":"boolean"},"error":{"type":"object","enabled":false},"response":{"type":"object","enabled":false},"task":{"properties":{"action":{"type":"keyword"},"cancellable":{"type":"boolean"},"description":{"type":"text"},"headers":{"type":"object","enabled":false},"id":{"type":"long"},"node":{"type":"keyword"},"parent_task_id":{"type":"keyword"},"running_time_in_nanos":{"type":"long"},"start_time_in_millis":{"type":"long"},"status":{"type":"object","enabled":false},"type":{"type":"keyword"}}}}}}, documentParser=org.elasticsearch.index.mapper.DocumentParser@35774e22, fieldMappers=org.elasticsearch.index.mapper.DocumentFieldMappers@3a085607, objectMappers={task.headers=org.elasticsearch.index.mapper.ObjectMapper@6b3be457, task=org.elasticsearch.index.mapper.ObjectMapper@130b88b0, response=org.elasticsearch.index.mapper.ObjectMapper@1c82c2ad, task.status=org.elasticsearch.index.mapper.ObjectMapper@64421754, error=org.elasticsearch.index.mapper.ObjectMapper@50ef5ed7}, hasNestedObjects=false, deleteTombstoneMetadataFieldMappers=[org.elasticsearch.index.mapper.IdFieldMapper@1f6e0272, org.elasticsearch.index.mapper.SeqNoFieldMapper@15f33c98, org.elasticsearch.index.mapper.TypeFieldMapper@617f71c5, org.elasticsearch.index.mapper.VersionFieldMapper@4bcc82db], noopTombstoneMetadataFieldMappers=[org.elasticsearch.index.mapper.SeqNoFieldMapper@15f33c98, org.elasticsearch.index.mapper.VersionFieldMapper@4bcc82db]}}
at org.elasticsearch.index.mapper.MapperService.assertMappingVersion(MapperService.java:280) ~[elasticsearch-7.7.0-SNAPSHOT.jar:7.7.0-SNAPSHOT]
```

Build scans: https://gradle-enterprise.elastic.co/s/j5iirqv2bcpi6
https://gradle-enterprise.elastic.co/s/t76crudkugcq4
https://gradle-enterprise.elastic.co/s/5534denm6kbek
https://gradle-enterprise.elastic.co/s/slb4rr2btp626
https://gradle-enterprise.elastic.co/s/jcscjs7jtiegq

If I looked at emails of build failures correctly, it appears that this started on Jan 14th. I am not sure if this is related or not but there was a change, https://github.com/elastic/elasticsearch/pull/50960, that changed the DocumentMapper that day and this change was in the first failure I saw that manifested that way. @romseygeek do you think that change could be the cause of the tripped assertion?
This is mostly moving the agg construction code into the registry model, without making many changes to the way the aggs are constructed.  I think there is an opportunity to refactor how we're using the `ExecutionMode` enum to delegate some construction details, but didn't want to clutter the PR with unrelated changes (and wanted to keep it simple to minimize test failures).

Also added a basic `AggregatorTestCase` for an untested code path.  We'll need to convert the rests of the tests over eventually, ala https://github.com/elastic/elasticsearch/issues/42893
Allows ML datafeeds to work with time fields that have
the "date_nanos" type.  (Previously datafeeds only
worked with time fields that had the "date" type.)