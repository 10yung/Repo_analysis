The idea, is to add attributes to `System.Diagnostics.CodeAnalysis` namespace.
These attribute would be:
```
[AttributeUsage(AttributeTargets.Parameter, Inherited = false)]
sealed class NotNullAfterAttribute : Attribute { }
```
This Attribute would behave in a way similar to `NotNullWhenAttribute`, but would guaranty that the parameter isn't null if the function returns. 

This would be used to handle cases like the following
```
private void ValidateParams([NotNullAfter] object? param1)
{
    if (param1 == null)
        throw new Exception();
}
```
Another set of attributes would be similar to `NotNullWhenAttribute` and `NotNullAfterAttribute`, but would work on members of the class, instead of function parameters
```
[AttributeUsage(AttributeTargets.Method, AllowMultiple = true, Inherited = false)]
sealed class MemberNotNullWhenAttribute: Attribute
{
    public MemberNotNullWhenAttribute(string memberName, bool returnValue)
    {
         MemberName = memberName;
         ReturnValue = returnValue;
    }
    public string MemberName { get; }
    public bool ReturnValue { get; }
}

[AttributeUsage(AttributeTargets.Method, AllowMultiple = true, Inherited = false)]
sealed class MemberNotNullAfterAttribute: Attribute
{
    public MemberNotNullAfterAttribute(string memberName) => MemberName = memberName;
    public string MemberName { get; }
}
```
The reason for such attributes would be to handle (very common) code like the following (pseudo-code)
```
[MemberNotNullAfter("field1")]
[MemberNotNullAfter("field2")]
[MemberNotNullAfter("Property")]
private void ValidateState()
{
   if (field1 == null)
      throw new NotInitializedEception();
   if (field2 == null)
      throw new ObjectDisposedException();
   if (Property == null)
      Property = new object();
    //...
}

[MemberNotNullWhen("field1", true)]
[MemberNotNullWhen("field2", true)]
[MemberNotNullWhen("Property", true)]
private void IsValid()
{
    if (field1 == null)
        return false;
    if (field2 == null)
      return false;
    if (Property == null)
      return false;
    return true;
}
```
With the above, the compiler would know in code like
```
void Method()
{
    ValidateState();
    field1.DoSomething();
    field2.DoSomethingElse();
    Property.DoAgain();
}

void Method2()
{
    if (IsValid())
    {
        field1.DoSomething();
        field2.DoSomethingElse();
        Property.DoAgain();
    }
}
```
Even if field1, field2, and Property may be null, as per their definition, not to give any warning.

Another use for this, is if there is a method `Initialize` which initializes all fields, such a method could be called from constructors, to initialize Non Null references. In this case also the compiler shouldn't give any warnings

E:\Downloads\coreclr-3.1.0>build.cmd
BUILD: Starting Build at 15:58:14.03
BUILD: Searching for Visual Studio 2017 or later installation
BUILD: "C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\Common7\Tools\VsDevCmd.bat"
**********************************************************************
** Visual Studio 2019 Developer Command Prompt v16.4.1
** Copyright (c) 2019 Microsoft Corporation
**********************************************************************
BUILD: Commencing CoreCLR product build
BUILD: Checking prerequisites
BUILD: Number of processor cores 4
  未能从“https://dotnetfeed.blob.core.windows.net/dotnet-core/flatcontainer/microsoft.net.compilers.toolset/3.3.0-beta2-19367-02/microsoft.net.compilers.toolset.3.3.0-beta2-19367-02.nupkg”下载包“Microsoft.Net.Compilers.Toolset.3.3.0-beta2-19367-02”。
  由于在 60000 毫秒内未接收到数据，“https://dotnetfeed.blob.core.windows.net/dotnet-core/flatcontainer/microsoft.net.compilers.toolset/3.3.0-beta2-19367-02/microsoft.net.compilers.toolset.3.3.0-beta2-19367-02.nupkg”的下载超时。
    Exception of type 'System.TimeoutException' was thrown.
  未能从“https://dotnetfeed.blob.core.windows.net/dotnet-core/flatcontainer/microsoft.net.compilers.toolset/3.3.0-beta2-19367-02/microsoft.net.compilers.toolset.3.3.0-beta2-19367-02.nupkg”下载包“Microsoft.Net.Compilers.Toolset.3.3.0-beta2-19367-02”。
  The SSL connection could not be established, see inner exception.
    Unable to read data from the transport connection: 远程主机强迫关闭了一个现有的连接。.
    远程主机强迫关闭了一个现有的连接。
  E:\Downloads\coreclr-3.1.0\eng\empty.csproj 的还原在 17.91 min 内完成。
E:\Downloads\coreclr-3.1.0\.packages\microsoft.build.tasks.git\1.0.0-beta2-19367-01\build\Microsoft.Build.Tasks.Git.targets(24,5): error : 无法定位包含目录 'E:\Downloads\coreclr-3.1.0\eng' 的存储库。 [E:\Downloads\coreclr-3.1.0\eng\empty.csproj]
E:\Downloads\coreclr-3.1.0\.packages\microsoft.dotnet.arcade.sdk\1.0.0-beta.19461.7\tools\Version.targets(53,5): error : SourceRevisionId is not set, which means the SourceLink targets are not included in the build. Those are needed to produce a correct sha for our build outputs. [E:\Downloads\coreclr-3.1.0\eng\empty.csproj]

生成失败。

E:\Downloads\coreclr-3.1.0\.packages\microsoft.build.tasks.git\1.0.0-beta2-19367-01\build\Microsoft.Build.Tasks.Git.targets(24,5): error : 无法定位包含目录 'E:\Downloads\coreclr-3.1.0\eng' 的存储库。 [E:\Downloads\coreclr-3.1.0\eng\empty.csproj]
E:\Downloads\coreclr-3.1.0\.packages\microsoft.dotnet.arcade.sdk\1.0.0-beta.19461.7\tools\Version.targets(53,5): error : SourceRevisionId is not set, which means the SourceLink targets are not included in the build. Those are needed to produce a correct sha for our build outputs. [E:\Downloads\coreclr-3.1.0\eng\empty.csproj]
    0 个警告
    2 个错误

已用时间 00:17:55.82
Build failed.
BUILD: Error: Failed to generate version headers.
This is the fix for #27924. This is a GC hole bug that was found externally, #27590.
The cause is that the JIT was using the target type of the subtract when it needed
to make a copy of the source, but it needs to use the source type.

## Customer Impact
Corruption of state that is non-deterministic and hard to track down.

## Regression?
Not a recent regression, but exposed by Unsafe.ByteOffset.

## Testing
The fix has been verified in the runtime repo.

## Risk
Low: The fix is straightfoward and only impacts 3 lines of code.

## Code Reviewer
@jaschook and @jkotas
Port of dotnet/runtime#1389 to 3.1 branch.  Applications may crash in GC code due to GC heap corruption caused by incorrect padding size calculation on ARM.

## Customer Impact
Unexpected and hard to diagnose crashes.

## Regression?
No.

## Testing
The fix has been verified in the runtime repo.

## Risk
Low: one-line fix of the incorrect calculation.
Port of dotnet/runtime#258 to 3.1 branch.
This is the fix for #27937. The manifestation is an AV in the JIT. Although it isn't SBCG, it is difficult for the developer to track down that this is a JIT bug, rather than caused by something in their code.

## Customer Impact
Unexpected and hard to diagnose crashes.

## Regression?
No.

## Testing
The fix has been verified in the runtime repo.

## Risk
Low: The fix is straightforward and only prevents the AV case.

## Code Reviewers
Authored by @saucecontrol, reviewed by @CarolEidt and @swaroop-sridhar 
Port of dotnet/runtime#1279 to 3.1 branch.
This is the fix for dotnet/runtime#1241. This is a SBCG bug reported externally. When a struct is partially written, the JIT fails to invalidate assertions (in this case that the entire struct had been zero'd). This results in incorrect optimization. The fix is to invalidate the assertions in the partial write case.

## Customer Impact
SBCG resulting in incorrect behavior.

## Regression?
Not a recent regression, but exposed by doing more optimizations on structs.

## Testing
The fix has been verified in the runtime repo.

## Risk
Low: The fix is straightforward and kills assertions which only disables optimizations.

## Code Reviewer
@briansull and @BruceForstall 
# System.Threading.Timer Not Running On Ubuntu server


# General
Created a worker service project, used a background service to create a timer function that followed:
https://docs.microsoft.com/en-us/aspnet/core/fundamentals/host/hosted-services?view=aspnetcore-3.0&tabs=visual-studio


When executing: running locally on windows, timer events trigger as expected.

Deployed to ubuntu server: timer events are never triggered.
Verified that the app is running, and no issues instantiating the timer, it just never actually triggers the timer.

I was surprised it's not handled in `morph`, e.g. `-a + b` => `b - a`.
```csharp
int M1(int a, int b) => -a +  b; // optimize to  "b - a"
int M2(int a, int b) =>  a + -b; // optimize to  "a - b"
int M3(int a, int b) =>  a - -b; // optimize to  "a + b"
int M4(int a, int b) => -a - -b; // optimize to  "b - a"
```
Current codegen:
```asm
; Method CC:M1(int,int):int:this
G_M48868_IG02:
       mov      eax, edx
       neg      eax
       add      eax, r8d

; Method CC:M2(int,int):int:this
G_M15271_IG02:
       mov      eax, r8d
       neg      eax
       add      eax, edx

; Method CC:M3(int,int):int:this
G_M13857_IG02:
       mov      eax, r8d
       neg      eax
       sub      edx, eax
       mov      eax, edx

; Method CC:M4(int,int):int:this
G_M28384_IG02:
       mov      eax, edx
       neg      eax
       mov      edx, r8d
       neg      edx
       sub      eax, edx
```
Expected codegen: https://godbolt.org/z/nmZxv8

Also:
```csharp

int M5(int a) =>  -a / 10;  // optimize to  "a / -10"
int M6(int a) => -(a / 10); // optimize to  "a / -10"
int M7(int a) =>  -a * 10;  // optimize to  "a * -10"
int M8(int a) => -(a * 10); // optimize to  "a * -10"
```

category:cq
theme:basic-cq
skill-level:beginner
cost:small
I can create a program like this:

~~~cs
using System;
class App {
   static void Main() {
      int[] a1 = {10, 20};
      Console.WriteLine(a1);
   }
}
~~~

but it doesnt give expected output:

~~~
System.Int32[]
~~~

I checked online:

https://stackoverflow.com/questions/16265247

and people suggest to loop through the array. Is that really necessary? Many
other languages dont require that, like Go:

~~~go
package main
import "fmt"
func main() {
   a1 := []int{10, 20}
   fmt.Println(a1)
}
~~~

Nim:

~~~nim
var a1 = [10, 20]
echo a1
~~~

D:

~~~d
import std.stdio;
void main() {
   auto a1 = [10, 20];
   a1.writeln;
}
~~~

JavaScript:

~~~js
let a1 = [10, 20];
console.log(a1);
~~~

Python:

~~~py
a1 = [10, 20]
print(a1)
~~~

I have a .NET Core app that's a fairly basic gRPC service (unfortunately not open source yet, so I can't link to the source at the moment). On one particular server, it's throwing a segmentation fault as soon as I run it:
```
ASPNETCORE_ENVIRONMENT=Production ASPNETCORE_URLS=http://*:54561 ./TestApp
info: Microsoft.Hosting.Lifetime[0]
      Now listening on: http://[::]:54561
info: Microsoft.Hosting.Lifetime[0]
      Application started. Press Ctrl+C to shut down.
info: Microsoft.Hosting.Lifetime[0]
      Hosting environment: Production
info: Microsoft.Hosting.Lifetime[0]
      Content root path: /opt/exampleapp-worker
Segmentation fault
```

In fact, I'm seeing this for a very basic ASP.NET website too (just one custom middleware using `app.Run`).

Backtrace from lldb + SOS:
```
* thread #7, name = 'TestApp', stop reason = signal SIGSEGV: invalid address (fault address: 0x0)
  * frame #0: 0x00007ffff7019b3d libcoreclr.so`ThreadpoolMgr::GetRecycledMemory(ThreadpoolMgr::MemType) [inlined] ThreadpoolMgr::RecycledListInfo::Remove() at win32threadpool.h:655
    frame #1: 0x00007ffff7019aa5 libcoreclr.so`ThreadpoolMgr::GetRecycledMemory(memType=<unavailable>) at win32threadpool.cpp:1674
    frame #2: 0x00007ffff715e464 libcoreclr.so`UnManagedPerAppDomainTPCount::QueueUnmanagedWorkRequest(unsigned int (*)(void*), void*) [inlined] ThreadpoolMgr::MakeWorkRequest(unsigned int (*)(void*), void*) at win32threadpool.h:367
    frame #3: 0x00007ffff715e45a libcoreclr.so`UnManagedPerAppDomainTPCount::QueueUnmanagedWorkRequest(this=0x00007ffff75dd640, function=(libcoreclr.so`ThreadpoolMgr::AsyncTimerCallbackCompletion(void*) at win32threadpool.cpp:4765), context=0x0000000000738290)(void*), void*) at threadpoolrequest.cpp:356
    frame #4: 0x00007ffff701d100 libcoreclr.so`ThreadpoolMgr::FireTimers() at win32threadpool.cpp:855
    frame #5: 0x00007ffff701d088 libcoreclr.so`ThreadpoolMgr::FireTimers() at win32threadpool.cpp:4710
    frame #6: 0x00007ffff701cd41 libcoreclr.so`ThreadpoolMgr::TimerThreadFire() at win32threadpool.cpp:4598
    frame #7: 0x00007ffff701cc15 libcoreclr.so`ThreadpoolMgr::TimerThreadStart(p=<unavailable>) at win32threadpool.cpp:4569
    frame #8: 0x00007ffff732c86d libcoreclr.so`CorUnix::CPalThread::ThreadEntry(pvParam=0x0000000000737530) at thread.cpp:1807
    frame #9: 0x00007ffff7fb1fa3 libpthread.so.0`start_thread(arg=<unavailable>) at pthread_create.c:486
    frame #10: 0x00007ffff7bbc4cf libc.so.6`__GI___clone at clone.S:95
```

Debian stable (buster)

```
$ apt list --installed | grep dotnet

WARNING: apt does not have a stable CLI interface. Use with caution in scripts.

dotnet-host/buster,now 3.0.1-1 amd64 [installed,automatic]
dotnet-hostfxr-3.0/buster,now 3.0.1-1 amd64 [installed,automatic]
dotnet-runtime-3.0/buster,now 3.0.1-1 amd64 [installed]
dotnet-runtime-deps-3.0/buster,now 3.0.1-1 amd64 [installed,automatic]
```