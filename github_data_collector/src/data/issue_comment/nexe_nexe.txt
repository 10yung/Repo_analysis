<!-- Please use this template while reporting a bug and provide as much info as possible. Not doing so may result in your bug not being addressed in a timely manner. Thanks!
-->

**What happened**:
I'm trying to create an executable for my script which uses puppeteer.

I used

```sh
npx nexe@next --target 12.9.1
```

and once I run  the executable while `node_modules` are present, everything is fine.

However, once the node_modules aren't there, I get the following error:

```console
(node:388446) UnhandledPromiseRejectionWarning: Error: Chromium revision is not downloaded. Run "npm install" or "yarn install"
    at Launcher.launch (/home/kipras/privateprojects/node_modules/puppeteer/lib/Launcher.js:119:15)
    at async latestCarSnitcher (/home/kipras/privateprojects/latestCarSnitcher.js:40:18)
(node:388446) UnhandledPromiseRejectionWarning: Unhandled promise rejection. This error originated either by throwing inside of an async function without a catch block, or by rejecting a promise which was not handled with .catch(). (rejection id: 1)
(node:388446) [DEP0018] DeprecationWarning: Unhandled promise rejections are deprecated. In the future, promise rejections that are not handled will terminate the Node.js process with a non-zero exit code.
```

**What you expected to happen**:
I expect the executable to run independently of `node_modules`

**How to reproduce it (as minimally and precisely as possible)**:

```sh
mkdir example
cd example
npm init -y && npm i puppeteer -S

cat <<EOL > index.js
const puppeteer = require("puppeteer");

async function go() {
        const browser = await puppeteer.launch({ headless: false });
}

go();
EOL

npx nexe@next --target 12.9.1

./example # works (close the browser to continue)

rm -rf node_modules

./example # error
```

**Anything else we need to know?**:

**Environment**:
- Platform(OS/Version):

```sh
$ uname -a
Linux arch-usb 5.4.11-arch1-1 #1 SMP PREEMPT Sun, 12 Jan 2020 12:15:27 +0000 x86_64 GNU/Linux
```

- Host Node Version:

```sh
$ node --version
v13.6.0
```

keep in mind I used `--target 12.9.1` (the latest 12.x.y target, available from this repo's releases)

- Target Node Version:

`12.9.1`

- Nexe version:

```sh
$ nexe --version
3.3.2
```

- Python Version:

```sh
$ python --version
Python 3.8.1
```

Edit:
See also https://github.com/zeit/pkg/issues/204
**What happened**:

I'm using nexe to build a node CLI into a binary. It works fine, except for the fact that my CLI has a local dependency. So in my `package.json` I have

```
"dependencies": {
    "@core": "file:../core",
    ...
}
```

The binary builds just fine, but when I try to execute it the local dependency doesn't get bundled with it. So if I try to run the binary while it's not adjacent to a `node_modules` directory that has the local dependency inside it then the binary immediately throws a module not found error

```
internal/modules/cjs/loader.js:583
    throw err;
    ^

Error: Cannot find module '@core'
    at Function.Module._resolveFilename (internal/modules/cjs/loader.js:581:15)
    ...
```

Running the binary while I'm adjacent to a proper `node_modules` allows it to execute perfectly.

I found [this issue](https://github.com/nexe/nexe/issues/642) where it's explained that dependencies are discovered based on file extension. This doesn't work for me since my local dependency is an entire directory (a node package itself), and so doesn't have a single file extension. I'm also not able to point to the webpack bundle of the local dependency as a local dependency in a `package.json` must be either a directory or a tarball.


**What you expected to happen**:

I would expect any local dependencies to also be bundled with the executable so that the binary can be run from anywhere.

**How to reproduce it (as minimally and precisely as possible)**:

- Build a library with a local dependency
- Use nexe to bundle the library
- Run the executable while not adjacent to a `node_modules` directory that has the local dependency in it

**Anything else we need to know?**:

**Environment**:
- Platform(OS/Version): macos Catalina
- Host Node Version: 11.8.0
- Target Node Version: 10.10.0
- Nexe version: 3.3.2
- Python Version: 2.7.16

<!-- Please only use this template for submitting feature requests -->

**What would you like to be added**: Code obfuscation feautre.

**Why is this needed**: When I tried to open the exe (express web app built using nexe), I found all the codes were visible. It would be better to have some code encryption feature before building the final exe. 

When using `nexe -t <platform>` it tries to download everything from the `3.0.0` tagged release, whereas newer versions of nodejs are not contained within there. The nexe version I'm using is the latest (`4.0.0-beta.3`).

```bash
Error: https://github.com/nexe/nexe/releases/download/v3.0.0/windows-x64-13.5.0 is not available, create it using the --build flag
```

Should this be the default behaviour? I'm guessing that nexe hosts all the compiled binaries there because `4.0` isn't released yet, but currently it seems as I'm not able to build everything with node.js 13.5.0 here.

Is there a way to verify build setup requirements (e.g. library dependencies in C ABI compatibility sense)?

Platform used: Arch Linux, up-to-date, 64 Bit
Version 4!

A new year... time for a new version...

Things that I want to address:

- Code Structure: make more imperative, simpler to grok, update tooling
- ✅ Simplify bundling: rely on NCC (webpack).
- ✅ Emit notes for native nodules (already done in `@next` with `--bundle`
- ✅ Typescript support by default: what even is JavaScript. (done with NCC)
- Fix longstanding windows/linux filesystem bugs. This will be greatly simplified by using ncc and having significantly less files.
- ✅ Allow the use of something like resolve-dependencies since the VFS will still be present.

Meta release things...
- Adopt lerna, because they baked in conventional commits, changelogs, conventional bumps.
- Move to Github Actions. Schedules dont really work on Azure Pipelines. GH actions is basically Azure Pipelines with a github UI so the machines will work the same..
- Only support LTS branches of Node.

Bonuses
- Update Documentation: simplify to level of CLI - have CLI API parity
- Remove RC capabilities defer to rcedit cli tool

CC @bruce-one, @jaredallard 
<!-- Please use this template while reporting a bug and provide as much info as possible. Not doing so may result in your bug not being addressed in a timely manner. Thanks!
-->

**What happened**:
Hi:
I noted that required files that have classes definitions are not added in the final executable.

For example:
```
library.js
class MyClass {
  qwe = 123
}
```

```
index.js
require('./library.js')
```

Then compile using "nexe" and run the file in another directory, get that:
```
internal/modules/cjs/loader.js:716
    throw err;
    ^

Error: Cannot find module './library.js'
Require stack:
- D:\index.js
[90m    at Function.Module._resolveFilename (internal/modules/cjs/loader.js:713:15)[39m
[90m    at Function.Module._load (internal/modules/cjs/loader.js:618:27)[39m
[90m    at Module.require (internal/modules/cjs/loader.js:771:19)[39m
[90m    at require (internal/modules/cjs/helpers.js:68:18)[39m
    at Object.<anonymous> (D:\index.js:1:1)
[90m    at Module._compile (internal/modules/cjs/loader.js:868:30)[39m
[90m    at Object.Module._extensions..js (internal/modules/cjs/loader.js:879:10)[39m
[90m    at Module.load (internal/modules/cjs/loader.js:731:32)[39m
[90m    at Function.Module._load (internal/modules/cjs/loader.js:644:12)[39m
[90m    at Function.Module.runMain (internal/modules/cjs/loader.js:931:10)[39m {
  code: [32m'MODULE_NOT_FOUND'[39m,
  requireStack: [ [32m'D:\\index.js'[39m ]
}
```

The file must be present in the same directory. But I comment the class definition, the file is added.

**What you expected to happen**:
The files with classses definition must be added to executable.

**How to reproduce it (as minimally and precisely as possible)**:

**Anything else we need to know?**:

**Environment**:
- Platform(OS/Version): Windows 10
- Host Node Version: 12.8.0
- Target Node Version: 12.8.0
- Nexe version: 3.3.2
- Python Version: ---

Thanks

**What happened**:
nexe fails to build.

```
C:\Users\user\.nexe\13.5.0\src\histogram-inl.h(46,33): warning C4244: 'return': conversion from 'int 64_t' to 'double', possible loss of data [C:\Users\user\.nexe\13.5.0\libnode.vcxproj]
C:\Users\user\.nexe\13.5.0\src\histogram-inl.h(54,18): warning C4244: 'initializing': conversion fro m 'int64_t' to 'double', possible loss of data [C:\Users\user\.nexe\13.5.0\libnode.vcxproj]
C:\Users\user\.nexe\13.5.0\src\node_revert.h(37,3): warning C4065: switch statement contains 'defaul t' but no 'case' labels [C:\Users\user\.nexe\13.5.0\libnode.vcxproj]
C:\Users\user\.nexe\13.5.0\src\node.cc(868,66): error C2059: syntax error: ')' [C:\Users\user\.nexe\13.5.0\libnode.vcxproj]
C:\Users\user\.nexe\13.5.0\src\node.cc(876,67): error C2059: syntax error: ')' [C:\Users\user\.nexe\13.5.0\libnode.vcxproj]
C:\Users\user\.nexe\13.5.0\src\node.cc(1028,48): warning C4244: 'argument': conversion from 'int64_t ' to 'int', possible loss of data [C:\Users\user\.nexe\13.5.0\libnode.vcxproj]
```

What `node.cc` looks like:

```c++
    const int exit_code = 0;//ProcessGlobalArgs(&env_argv,
                                            nullptr,
                                            errors,
                                            kAllowedInEnvironment);
```

**What you expected to happen**:
nexe works.

**How to reproduce it (as minimally and precisely as possible)**:
On Windows:

    echo console.log('hello world'); > index.js && nexe --build --verbose index.js

**Anything else we need to know?**:
The `ProcessGlobalArgs` changes in `node.cc` seem to have been introduced in 13.2.0.

**Environment**:
- Platform(OS/Version): Windows 10 Version 1903 (OS Build 18362.535)
- Host Node Version: 13.5.0
- Target Node Version: 13.5.0
- Nexe version: 3.3.2
- Python Version: 3.8.1
**What happened**:

`fs.readdir()` and `fs.readdirSync()` don't seem to work properly on any directory in the application’s path.

For example, if the application is in `~/GitHub/javascript-experiments/nexe-test`, attempting to read any parent directory returns only the directory names which are part of the application's path.

**What you expected to happen**:

When running the test code via node, the complete contents of my home directory are shown correctly:
```
[ Dirent { name: '.ICEauthority', [Symbol(type)]: 1 },
  Dirent { name: '.bash_history', [Symbol(type)]: 1 },
  Dirent { name: '.bash_logout', [Symbol(type)]: 1 },
  Dirent { name: '.bashrc', [Symbol(type)]: 1 },
  Dirent { name: '.cache', [Symbol(type)]: 2 },
  Dirent { name: '.config', [Symbol(type)]: 2 },
  Dirent { name: '.dbus', [Symbol(type)]: 2 },
  Dirent { name: '.gnupg', [Symbol(type)]: 2 },
  Dirent { name: '.local', [Symbol(type)]: 2 },
  Dirent { name: '.mozilla', [Symbol(type)]: 2 },
  Dirent { name: '.nexe', [Symbol(type)]: 2 },
  Dirent { name: '.node_repl_history', [Symbol(type)]: 1 },
  Dirent { name: '.npm', [Symbol(type)]: 2 },
  Dirent { name: '.pkg-cache', [Symbol(type)]: 2 },
  Dirent { name: '.pki', [Symbol(type)]: 2 },
  Dirent { name: '.profile', [Symbol(type)]: 1 },
  Dirent { name: '.ssh', [Symbol(type)]: 2 },
  Dirent { name: 'Desktop', [Symbol(type)]: 2 },
  Dirent { name: 'Documents', [Symbol(type)]: 2 },
  Dirent { name: 'Downloads', [Symbol(type)]: 2 },
  Dirent { name: 'GitHub', [Symbol(type)]: 2 },
  Dirent { name: 'Music', [Symbol(type)]: 2 },
  Dirent { name: 'Pictures', [Symbol(type)]: 2 },
  Dirent { name: 'Public', [Symbol(type)]: 2 },
  Dirent { name: 'Templates', [Symbol(type)]: 2 },
  Dirent { name: 'Videos', [Symbol(type)]: 2 } ]
```

Output of compiled application shows only the next directory in the application's path and returns an array of strings, instead of `Dirent` objects.
```
[ 'GitHub' ]
```

If I move the application's executable file outside my home directory, or if I change the code to read another directory (like /var), the output is correct.

**How to reproduce it (as minimally and precisely as possible)**:
```
const fs = require('fs');
const homedir = require('os').homedir();

entries = fs.readdirSync( homedir, { withFileTypes: true } );

console.log( entries );
```

**Environment**:
- Platform(OS/Version): **Debian 10**
- Host Node Version: **12.14.0**
- Target Node Version: **12.14.0**
- Nexe version: **3.3.2**
- Python Version: **2.7.16**

Reporting here as well as I was able to replicate the same issue I’m having with `pkg`. https://github.com/zeit/pkg/issues/816

> Hi, I'm using `express-http-context` that uses node `async_hooks` to store data for each single request, it's a Next.js app with a custom express server.
> Now after running the build command I can run my app using `NODE_ENV=production node server.js` (using node 12.13.1) and everything works as expected, I can get the right data using `httpContext.get('WHATEV')`.
>If I then run `pkg` (using node 12.13.1) and start the binary file `httpContext.get('WHATEV')` always returns `undefined`.
>I couldn't find a way to debug it... is it the node version you are using? Is it because it's an experimental feature? https://nodejs.org/docs/latest-v12.x/api/async_hooks.html
>Maybe something during the patch in https://github.com/zeit/pkg-fetch
>Maybe related: zeit/pkg-fetch#75
**What happened**:

The app does not start properly when compiled with nexe:
```console
/zwave2mqtt # ./zwave2mqtt
  z2m:App Application path:/zwave2mqtt +0ms
/zwave2mqtt/lib/jsonStore.js:50
  if (storage_helper.store[model.file]) { return storage_helper.store[model.file] } else { throw Error('Requested file not present in store: ' + model.file) }
                                                                                           ^

Error: Requested file not present in store: /config/settings.json
    at StorageHelper.get (/zwave2mqtt/lib/jsonStore.js:50:98)
    at startGateway (/zwave2mqtt/app.js:41:28)
    at Object.<anonymous> (/zwave2mqtt/app.js:201:1)
    at Module._compile (internal/modules/cjs/loader.js:959:30)
    at Object.Module._extensions..js (internal/modules/cjs/loader.js:995:10)
    at Module.load (internal/modules/cjs/loader.js:815:32)
    at Function.Module._load (internal/modules/cjs/loader.js:727:14)
    at Function.Module.runMain (internal/modules/cjs/loader.js:1047:10)
    at internal/main/run_main_module.js:17:11
```

**What you expected to happen**:

The same behaviour as npm start. The binary hasn't been moved so all the system libs and node_modules are still in the expected place.

```console
/zwave2mqtt # npm start

> zwave2mqtt@2.0.6 start /zwave2mqtt
> node bin/www

  z2m:Store nodes.json not found +0ms
  z2m:Store scenes.json not found +4ms
  z2m:App Application path:/zwave2mqtt +0ms
Initialising OpenZWave 1.6.992 binary addon for Node.JS.
        OpenZWave Security API is ENABLED
        ZWave device db    : /usr/local/etc/openzwave/
        User settings path : /data
        Option Overrides : --Logging undefined --ConsoleOutput undefined --QueueLogLevel 6 --DriverMaxAttempts 9999 --SaveConfiguration false --PollInterval 1000 --NetworkKey 0xC7,0xC1,0x2C,0xBD,0x8E,0x0B,0xE2,0x66,0x05,0xA0,0x2A,0x06,0xA0,0x72,0x61,0x8D --AssumeAwake true
  z2m:Zwave Connecting to /dev/ttyACM0 +0ms
2019-12-18 13:33:08.630 Error, Cannot find a path to the configuration files at /usr/local/etc/openzwave/, Using config/ instead...
2019-12-18 13:33:08.631 Warning, Failed to Parse config/options.xml: Failed to open file
2019-12-18 13:33:08.631 Warning, Failed to Parse /data/options.xml: Failed to open file
```
**How to reproduce it (as minimally and precisely as possible)**:

Steps to reproduce (docker needed):

```
git clone --branch nexe-bug-report https://github.com/LANsible/docker-zwave2mqtt.git
cd docker-zwave2mqtt
docker build --build-arg ARCHITECTURE=amd64 -t test . --no-cache
docker run -it test
# ./zwave2mqtt
```

**Anything else we need to know?**:

I straced (`strace -fff -e trace=open,close,read,write,connect,accept,stat ./zwave2mqtt`) the binary and the errors seems to relate to `body-parser`. It can't find the qs file:

```console
[pid    13] write(19, "  \33[35;1mz2m:App \33[0mApplication"..., 64  z2m:App Application path:/zwave2mqtt +0ms
) = 64
[pid    13] stat("/zwave2mqtt/node_modules/body-parser/node_modules/qs", 0x7ffc1c40f330) = -1 ENOENT (No such file or directory)
[pid    13] stat("/zwave2mqtt/node_modules/body-parser/node_modules/qs.js", 0x7ffc1c40f260) = -1 ENOENT (No such file or directory)
[pid    13] stat("/zwave2mqtt/node_modules/body-parser/node_modules/qs.json", 0x7ffc1c40f260) = -1 ENOENT (No such file or directory)
[pid    13] stat("/zwave2mqtt/node_modules/body-parser/node_modules/qs.node", 0x7ffc1c40f260) = -1 ENOENT (No such file or directory)
[pid    13] stat("/zwave2mqtt/node_modules/body-parser/node_modules/qs.mjs", 0x7ffc1c40f260) = -1 ENOENT (No such file or directory)
/zwave2mqtt/lib/jsonStore.js:50
  if (storage_helper.store[model.file]) { return storage_helper.store[model.file] } else { throw Error('Requested file not present in store: ' + model.file) }
                                                                                           ^

Error: Requested file not present in store: /config/settings.json
    at StorageHelper.get (/zwave2mqtt/lib/jsonStore.js:50:98)
    at startGateway (/zwave2mqtt/app.js:41:28)
    at Object.<anonymous> (/zwave2mqtt/app.js:201:1)
    at Module._compile (internal/modules/cjs/loader.js:959:30)
    at Object.Module._extensions..js (internal/modules/cjs/loader.js:995:10)
    at Module.load (internal/modules/cjs/loader.js:815:32)
    at Function.Module._load (internal/modules/cjs/loader.js:727:14)
    at Function.Module.runMain (internal/modules/cjs/loader.js:1047:10)
    at internal/main/run_main_module.js:17:11
```

I tried to symlinking the qs file the location:
```
ln -sf /zwave2mqtt/node_modules/qs /zwave2mqtt/node_modules/body-parser/node_modules/qs
```

```console
[pid   252] write(19, "  \33[35;1mz2m:App \33[0mApplication"..., 64  z2m:App Application path:/zwave2mqtt +0ms
) = 64
[pid   252] stat("/zwave2mqtt/node_modules/body-parser/node_modules/qs", {st_mode=S_IFDIR|0755, st_size=4096, ...}) = 0
[pid   252] stat("/zwave2mqtt/node_modules/body-parser/node_modules/qs.js", 0x7fff9be92a50) = -1 ENOENT (No such file or directory)
[pid   252] stat("/zwave2mqtt/node_modules/body-parser/node_modules/qs.json", 0x7fff9be92a50) = -1 ENOENT (No such file or directory)
[pid   252] stat("/zwave2mqtt/node_modules/body-parser/node_modules/qs.node", 0x7fff9be92a50) = -1 ENOENT (No such file or directory)
[pid   252] stat("/zwave2mqtt/node_modules/body-parser/node_modules/qs.mjs", 0x7fff9be92a50) = -1 ENOENT (No such file or directory)
[pid   252] open("/zwave2mqtt/node_modules/body-parser/node_modules/qs/package.json", O_RDONLY|O_CLOEXEC) = 20
[pid   252] close(20)                   = 0
[pid   252] stat("/zwave2mqtt/node_modules/body-parser/node_modules/qs/lib/index.js", {st_mode=S_IFREG|0644, st_size=211, ...}) = 0
[pid   252] stat("/zwave2mqtt/node_modules/body-parser/node_modules/qs", {st_mode=S_IFDIR|0755, st_size=4096, ...}) = 0
/zwave2mqtt/lib/jsonStore.js:50
  if (storage_helper.store[model.file]) { return storage_helper.store[model.file] } else { throw Error('Requested file not present in store: ' + model.file) }
                                                                                           ^

Error: Requested file not present in store: /config/settings.json
    at StorageHelper.get (/zwave2mqtt/lib/jsonStore.js:50:98)
    at startGateway (/zwave2mqtt/app.js:41:28)
    at Object.<anonymous> (/zwave2mqtt/app.js:201:1)
    at Module._compile (internal/modules/cjs/loader.js:959:30)
    at Object.Module._extensions..js (internal/modules/cjs/loader.js:995:10)
    at Module.load (internal/modules/cjs/loader.js:815:32)
    at Function.Module._load (internal/modules/cjs/loader.js:727:14)
    at Function.Module.runMain (internal/modules/cjs/loader.js:1047:10)
    at internal/main/run_main_module.js:17:11
```

This solves the file not being found but not the issue we are trying to fix.
Then I found #639 and #639 I suspect this being an issue with Nexe but the issue doesn't seem to be the same since this isn't related to native modules.

Added some debug in the startup code but the file is present at the location:
```javascript
const find = require('shelljs').find;
debug(find('/config').slice(0));
```

```console
/zwave2mqtt # ./zwave2mqtt
  z2m:App [ '/config', '/config/settings.json' ] +17ms
  z2m:App Application path:/zwave2mqtt +6ms
/zwave2mqtt/lib/jsonStore.js:50
  if (storage_helper.store[model.file]) { return storage_helper.store[model.file] } else { throw Error('Requested file not present in store: ' + model.file) }
                                                                                           ^

Error: Requested file not present in store: /config/settings.json
    at StorageHelper.get (/zwave2mqtt/lib/jsonStore.js:50:98)
    at startGateway (/zwave2mqtt/app.js:45:28)
    at Object.<anonymous> (/zwave2mqtt/app.js:205:1)
    at Module._compile (internal/modules/cjs/loader.js:959:30)
    at Object.Module._extensions..js (internal/modules/cjs/loader.js:995:10)
    at Module.load (internal/modules/cjs/loader.js:815:32)
    at Function.Module._load (internal/modules/cjs/loader.js:727:14)
    at Function.Module.runMain (internal/modules/cjs/loader.js:1047:10)
    at internal/main/run_main_module.js:17:11
```



**Environment**:
- Platform(OS/Version): Alpine:edge (Docker)
- Host Node Version: v12.13.1
- Target Node Version: v12.13.1
- Nexe version: 4.0.0-beta.3
- Python Version: 3.8.0

Related: #635? #639

Please let me know if I can provide some more information or help developing a fix ❤️ 