
  If I want to add ConcreteProductC, I have to modify ProductFactory . This will break the Open-Closed Principle. 
  So, I suggest rewriting factory_method like my pull request. We can add any  ConcreteProduct,but not modify ProductFactory . 
feel free to make suggestion  and improvements based on the approach.
I think prototype pattern is reduce resource consumption.
Use` Object.create(Prototype.prototype)  ` wouldn't it be better?

Hi,

Since node/javascript does not have the problem that a builder pattern fixes, since you can just pass along an object literal, why would you want to apply all this overhead?

If we take a look at the example: https://github.com/torokmark/design_patterns_in_typescript/blob/master/builder/builder.ts  

We could just use an object literal instead:  

```javascript
// user.js
const create = args => {
  const options = Object.assign({}, defaultOptions, args); // Normalize the options
  return {
    name: options.name,
    age: options.age,
    phone: options.phone, 
    address: options.address
  }
}

module.exports.create = create;

// test.js
const user = require('user.js');

const myUser = user.create({
  name: 'a name',
  age: 30
});
```

This achieves the same thing as the builder pattern. The main difference here is that user.js is a lot smaller than the builder.ts example.  (10 lines vs 60+)
Passing along an object literal, which is very common in node, is just as readable as with a builder, but with a lot less overhead or boilerplate.


So my question is: why would you do this?
Hi Torok,
It is a question and not an issue. I wonder if you could describe how to debug step by step
each design pattern. Maybe generating map files would be usefull?

Thanks.

Hi Torok,

I suggest you structure the 23 design patterns into 3 categories : 
- Creational Patterns
- Structural Patterns
- Behavioral Patterns

Thanks

Aim is to implement examples using the design patterns.
