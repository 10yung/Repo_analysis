Updated to Kotlin 1.3.50
Updated to Ktor 1.2.5
babel-loader@8.0.2 requires @babel/core@^7.0.0 which was renamed to @babel/core from babel-core
solves `Error: Cannot find module '@babel/core'`
https://stackoverflow.com/a/52067984
```
$ ./gradlew build 
Starting a Gradle Daemon (subsequent builds will be faster)
<==========---> 78% EXECUTING [94h 23m 48s]
> :frontend:webpack-bundle

```

Should I wait a little bit more? =)
I cloned the repo and ran both services (`./gradlew backend:run` and `./gradlew frontend:run`)

Both servers start successfully but it seems the backend is unable to load the resource : `/frontend/frontend.bundle.js`

```
22:26:40.615 [ktor-pool-1-thread-1] TRACE Thinkter - Unhandled: GET - /frontend/frontend.bundle.js
```


This upgrade also includes the upgrade of kotlin to 1.2.x.

This also make the PR #29 obsolete and also resolves Issue #27 

This is a very great project for pepole want to use kotlin to develop frontend and backend, but two major problem must be sloved to satisfy those pepole:
1. update this project to working with ktor 0.9
2. a guide to how to config this to run on idea 

Thanks for the open source effort again, learn so much
Hi

npm-install takes a very long time:

```bash
$> ./gradlew build
<====---------> 34% EXECUTING [2m 04s]
> :frontend:npm-install
```

And finally fails and says the error is loged at `~/.npm/_logs/blabla_debug.log` which contains: 

```bash
error path ~/kotlin-fullstack-sample/frontend/build/node_modules/.staging/babel-runtime-1f1cbe22/package.json
error code ENOENT                                                                  
error errno -2                                                                     
error syscall open                                                                 
error enoent ENOENT: no such file or directory, open '~/kotlin-fullstack-sample/frontend/build/node_modules/.staging/babel-runtime-1f1cbe22/package.json'
error enoent This is most likely not a problem with npm itself                     
error enoent and is related to npm not being able to find a file.                  
verbose exit [ -2, true ]
```

Any ideas?
Add some common module, or common code somewhere, that both frontend and backend has a dependency on.

I have read these two discussions:
https://discuss.kotlinlang.org/t/kotlin-to-javascript-and-kotlin-to-jvm-servlets-in-one-project/2600
https://discuss.kotlinlang.org/t/compiling-kotlin-to-both-java-and-javascript-from-the-same-module/1944

The second one contained a link to a project which modifies the `main.kotlin.srcDirs` by adding `project(':').file('src/main/kotlin')`, this however lead me to an issue with compiler errors in IntelliJ, which can be seen here: https://github.com/C06A/KUrlet/issues/1

So a clear example of how to actually share code between JS and JVM is appreciated.