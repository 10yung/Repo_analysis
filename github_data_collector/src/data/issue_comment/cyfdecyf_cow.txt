比如说 
[xx:xx:xx] aaa.com proxy
[xx:xx:xx] aaa.com direct


你好我想问一下COW是否可以用在OPENVPN上呢？我有两个X86和一个openwrt的arm路由器，使用的是openvpn来上网，有没有办法使用COW进行分流呢？
之前为了使用go get，安装了cow。使用过一次cow之后，我的UE4就没法连接我的服务器，调试发现我的UE4尝试连接127.0.0.1:7777，然后我打开cow之后，UE4正常连接。现在本地除了浏览器是OK的，其他程序都会连接127.0.0.1:7777，逼得我每天都要打开cow
Add support for chacha20-ietf-poly1305 encryption method, providered by [go-shadowsocks2](github.com/shadowsocks/go-shadowsocks2)
[>>>>>] 2019/04/11 16:55:38 DIRECT 127.0.0.1:54635 CONNECT console.aliyun.com:443                                                                                                                                                                                     [193/1961]
fatal error: concurrent map read and map write

goroutine 13435 [running]:
runtime.throw(0x12f6431, 0x21)
        /usr/local/go/src/runtime/panic.go:608 +0x72 fp=0xc0003ebcd0 sp=0xc0003ebca0 pc=0x102bbb2
runtime.mapaccess1_faststr(0x12a1680, 0xc0000947b0, 0xc0002a0160, 0x17, 0x1)
        /usr/local/go/src/runtime/map_faststr.go:21 +0x418 fp=0xc0003ebd40 sp=0xc0003ebcd0 pc=0x10130f8
main.(*DomainList).judge(0xc00009e440, 0xc0002d2320, 0xc00010a360)
        /Users/gsh/go/src/github.com/netheril96/MEOW/directlist.go:34 +0xed fp=0xc0003ebdd0 sp=0xc0003ebd40 pc=0x124526d
main.(*clientConn).getServerConn(0xc000020300, 0xc00011c090, 0x0, 0x0, 0x0)
        /Users/gsh/go/src/github.com/netheril96/MEOW/proxy.go:653 +0x50 fp=0xc0003ebe70 sp=0xc0003ebdd0 pc=0x1256c50
main.(*clientConn).serve(0xc000020300)
        /Users/gsh/go/src/github.com/netheril96/MEOW/proxy.go:470 +0x18b fp=0xc0003ebfd8 sp=0xc0003ebe70 pc=0x1254e3b
runtime.goexit()
        /usr/local/go/src/runtime/asm_amd64.s:1333 +0x1 fp=0xc0003ebfe0 sp=0xc0003ebfd8 pc=0x1057ef1
created by main.(*httpProxy).Serve
        /Users/gsh/go/src/github.com/netheril96/MEOW/proxy.go:181 +0x518

goroutine 1 [semacquire, 169 minutes]:
sync.runtime_Semacquire(0xc0000a6494)
        /usr/local/go/src/runtime/sema.go:56 +0x39
sync.(*WaitGroup).Wait(0xc0000a6494)
        /usr/local/go/src/sync/waitgroup.go:130 +0x64
main.main()
        /Users/gsh/go/src/github.com/netheril96/MEOW/main.go:50 +0x1da

goroutine 20 [sleep, 2 minutes]:
time.Sleep(0x45d964b800)
        /usr/local/go/src/runtime/time.go:105 +0x14f
github.com/shadowsocks/shadowsocks-go/shadowsocks.newReqList.func1(0xc0000928e0)
        /Users/gsh/go/src/github.com/shadowsocks/shadowsocks-go/shadowsocks/udprelay.go:82 +0x2d
created by github.com/shadowsocks/shadowsocks-go/shadowsocks.newReqList
        /Users/gsh/go/src/github.com/shadowsocks/shadowsocks-go/shadowsocks/udprelay.go:80 +0x73

goroutine 24 [IO wait]:
internal/poll.runtime_pollWait(0x4254f00, 0x72, 0x0)
        /usr/local/go/src/runtime/netpoll.go:173 +0x66
internal/poll.(*pollDesc).wait(0xc00012af98, 0x72, 0xc000020a00, 0x0, 0x0)
        /usr/local/go/src/internal/poll/fd_poll_runtime.go:85 +0x9a
internal/poll.(*pollDesc).waitRead(0xc00012af98, 0xffffffffffffff00, 0x0, 0x0)
        /usr/local/go/src/internal/poll/fd_poll_runtime.go:90 +0x3d
internal/poll.(*FD).Accept(0xc00012af80, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0)
        /usr/local/go/src/internal/poll/fd_unix.go:384 +0x1a0
net.(*netFD).accept(0xc00012af80, 0x4254fd0, 0x2000, 0x2000)
        /usr/local/go/src/net/fd_unix.go:238 +0x42
net.(*TCPListener).accept(0xc0000ae0e0, 0xc000113b70, 0xc000113b78, 0x8)
        /usr/local/go/src/net/tcpsock_posix.go:139 +0x2e
net.(*TCPListener).Accept(0xc0000ae0e0, 0x12ff468, 0xc000020300, 0xc0000a8300, 0xc000020300)
        /usr/local/go/src/net/tcpsock.go:260 +0x47
main.(*httpProxy).Serve(0xc0000a8300, 0xc0000a6494)
        /Users/gsh/go/src/github.com/netheril96/MEOW/proxy.go:171 +0x30b
created by main.main
        /Users/gsh/go/src/github.com/netheril96/MEOW/main.go:48 +0x1ba

goroutine 13456 [runnable]:
net._C2func_getaddrinfo(0xc00030e3e0, 0x0, 0xc00038e780, 0xc00000e090, 0x0, 0x0, 0x0)
        _cgo_gotypes.go:98 +0x55
net.cgoLookupIPCNAME.func1(0xc00030e3e0, 0x0, 0xc00038e780, 0xc00000e090, 0x13, 0x13, 0x1006caf)
        /usr/local/go/src/net/cgo_unix.go:149 +0x131
net.cgoLookupIPCNAME(0xc0002a0140, 0x12, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0)
        /usr/local/go/src/net/cgo_unix.go:149 +0x153
release 中的二进制在MAC上运行错误

failed MSpanList_Insert 0x704000 0x436fc852f7ae 0x0 0x0
fatal error: MSpanList_Insert

runtime stack:
runtime.throw(0x320e30, 0x10)
	/usr/local/go/src/runtime/panic.go:530 +0x90 fp=0x7ffeefbff5d0 sp=0x7ffeefbff5b8
runtime.(*mSpanList).insert(0x46c5c8, 0x704000)
	/usr/local/go/src/runtime/mheap.go:933 +0x293 fp=0x7ffeefbff600 sp=0x7ffeefbff5d0
runtime.(*mheap).freeSpanLocked(0x46bdc0, 0x704000, 0x100, 0x0)
	/usr/local/go/src/runtime/mheap.go:809 +0x4be fp=0x7ffeefbff668 sp=0x7ffeefbff600
runtime.(*mheap).grow(0x46bdc0, 0x8, 0x0)
	/usr/local/go/src/runtime/mheap.go:675 +0x2a0 fp=0x7ffeefbff6c0 sp=0x7ffeefbff668
runtime.(*mheap).allocSpanLocked(0x46bdc0, 0x1, 0x0)
	/usr/local/go/src/runtime/mheap.go:553 +0x4e3 fp=0x7ffeefbff718 sp=0x7ffeefbff6c0
runtime.(*mheap).alloc_m(0x46bdc0, 0x1, 0x15, 0x0)
	/usr/local/go/src/runtime/mheap.go:437 +0x119 fp=0x7ffeefbff748 sp=0x7ffeefbff718
runtime.(*mheap).alloc.func1()
	/usr/local/go/src/runtime/mheap.go:502 +0x41 fp=0x7ffeefbff778 sp=0x7ffeefbff748
runtime.systemstack(0x7ffeefbff798)
	/usr/local/go/src/runtime/asm_amd64.s:307 +0xab fp=0x7ffeefbff780 sp=0x7ffeefbff778
runtime.(*mheap).alloc(0x46bdc0, 0x1, 0x10000000015, 0x5a29f)
	/usr/local/go/src/runtime/mheap.go:503 +0x63 fp=0x7ffeefbff7c8 sp=0x7ffeefbff780
runtime.(*mcentral).grow(0x46d9c0, 0x0)
	/usr/local/go/src/runtime/mcentral.go:209 +0x93 fp=0x7ffeefbff830 sp=0x7ffeefbff7c8
runtime.(*mcentral).cacheSpan(0x46d9c0, 0x4679d8)
	/usr/local/go/src/runtime/mcentral.go:89 +0x47d fp=0x7ffeefbff870 sp=0x7ffeefbff830
runtime.(*mcache).refill(0x700000, 0x15, 0x7ffeefbff8d8)
	/usr/local/go/src/runtime/mcache.go:119 +0xcc fp=0x7ffeefbff8a8 sp=0x7ffeefbff870
runtime.mallocgc.func2()
	/usr/local/go/src/runtime/malloc.go:642 +0x2b fp=0x7ffeefbff8c8 sp=0x7ffeefbff8a8
runtime.systemstack(0x7ffeefbff968)
	/usr/local/go/src/runtime/asm_amd64.s:307 +0xab fp=0x7ffeefbff8d0 sp=0x7ffeefbff8c8
runtime.mallocgc(0x180, 0x2e8c00, 0x0, 0x800000000)
	/usr/local/go/src/runtime/malloc.go:643 +0x869 fp=0x7ffeefbff9a8 sp=0x7ffeefbff8d0
runtime.newobject(0x2e8c00, 0x468050)
	/usr/local/go/src/runtime/malloc.go:781 +0x42 fp=0x7ffeefbff9d0 sp=0x7ffeefbff9a8
runtime.malg(0x8000, 0x4682c0)
	/usr/local/go/src/runtime/proc.go:2634 +0x27 fp=0x7ffeefbffa08 sp=0x7ffeefbff9d0
runtime.mpreinit(0x468820)
	/usr/local/go/src/runtime/os1_darwin.go:140 +0x1f fp=0x7ffeefbffa20 sp=0x7ffeefbffa08
runtime.mcommoninit(0x468820)
	/usr/local/go/src/runtime/proc.go:494 +0x105 fp=0x7ffeefbffa68 sp=0x7ffeefbffa20
runtime.schedinit()
	/usr/local/go/src/runtime/proc.go:434 +0x79 fp=0x7ffeefbffab0 sp=0x7ffeefbffa68
runtime.rt0_go(0x7ffeefbffae8, 0x1, 0x7ffeefbffae8, 0x0, 0x0, 0x1, 0x7ffeefbffc00, 0x0, 0x7ffeefbffc06, 0x7ffeefbffc22, ...)
	/usr/local/go/src/runtime/asm_amd64.s:138 +0x132 fp=0x7ffeefbffab8 sp=0x7ffeefbffab0


CentOS 7.2 交叉编译后即可正常运行


在配置文件设置`alwaysProxy = true`实现了全局代理，
但是本地DMA服务便无法正常访问。把`alwaysProxy`关闭后可以正常访问DMA服务。
尝试在`~/.cow/direct`添加,但未能生效：
```
127.0.0.1
127.0.0.0/8
172.16.0.0/12
192.168.0.0/16
```
我又尝试了将`alwaysProxy`关闭，通过blocked 和direct来制定IP段科学上网，但是尝试了下想让某个App科学上网，并不能完整的全局代理（该App使用不同域名，可能遗漏哪个域名，导致App不可用）。

我的设备（Apple TV4）只能通过Http代理进行科学上网，没办法在设备上对本地IP进行区分。请问，我应该如何设置才能实现“除本地网络外的全局代理”？
Docker for Mac is a useful toolset, especially kubernetes support.

I use the cow transform socks5(go-shadowsocks2) protocol into HTTP(s) proxy and set the HTTP proxy in docker for mac. Then deploy kubernetes in docker for mac, the docker hangs forever.

After that, I install shadowsocksX-ng which integrate proxioy as http proxy tool, the kubernetes deployed correctly.

Then, I try `docker pull k8s.gcr.io/pause-amd64:3.0` at these two networks environment, Wireshark shows the cow hangs a connection.

<img width="1333" alt="default" src="https://user-images.githubusercontent.com/2841254/51374970-8b91f980-1b3f-11e9-9985-25c6bca7b829.png">

$ ./cow 
failed MSpanList_Insert 0x604000 0xd08831cf55b 0x0 0x0
fatal error: MSpanList_Insert

runtime stack:
runtime.throw(0x320e30, 0x10)
        /usr/local/go/src/runtime/panic.go:530 +0x90 fp=0x7ffeefbff430 sp=0x7ffeefbff418
runtime.(*mSpanList).insert(0x46c5c8, 0x604000)
        /usr/local/go/src/runtime/mheap.go:933 +0x293 fp=0x7ffeefbff460 sp=0x7ffeefbff430
runtime.(*mheap).freeSpanLocked(0x46bdc0, 0x604000, 0x100, 0x0)
        /usr/local/go/src/runtime/mheap.go:809 +0x4be fp=0x7ffeefbff4c8 sp=0x7ffeefbff460
runtime.(*mheap).grow(0x46bdc0, 0x8, 0x0)
        /usr/local/go/src/runtime/mheap.go:675 +0x2a0 fp=0x7ffeefbff520 sp=0x7ffeefbff4c8
runtime.(*mheap).allocSpanLocked(0x46bdc0, 0x1, 0x0)
        /usr/local/go/src/runtime/mheap.go:553 +0x4e3 fp=0x7ffeefbff578 sp=0x7ffeefbff520
runtime.(*mheap).alloc_m(0x46bdc0, 0x1, 0x15, 0x0)
        /usr/local/go/src/runtime/mheap.go:437 +0x119 fp=0x7ffeefbff5a8 sp=0x7ffeefbff578
runtime.(*mheap).alloc.func1()
        /usr/local/go/src/runtime/mheap.go:502 +0x41 fp=0x7ffeefbff5d8 sp=0x7ffeefbff5a8
runtime.systemstack(0x7ffeefbff5f8)
        /usr/local/go/src/runtime/asm_amd64.s:307 +0xab fp=0x7ffeefbff5e0 sp=0x7ffeefbff5d8
runtime.(*mheap).alloc(0x46bdc0, 0x1, 0x10000000015, 0x5a29f)
        /usr/local/go/src/runtime/mheap.go:503 +0x63 fp=0x7ffeefbff628 sp=0x7ffeefbff5e0
runtime.(*mcentral).grow(0x46d9c0, 0x0)
        /usr/local/go/src/runtime/mcentral.go:209 +0x93 fp=0x7ffeefbff690 sp=0x7ffeefbff628
runtime.(*mcentral).cacheSpan(0x46d9c0, 0x4679d8)
        /usr/local/go/src/runtime/mcentral.go:89 +0x47d fp=0x7ffeefbff6d0 sp=0x7ffeefbff690
runtime.(*mcache).refill(0x600000, 0x15, 0x7ffeefbff738)
        /usr/local/go/src/runtime/mcache.go:119 +0xcc fp=0x7ffeefbff708 sp=0x7ffeefbff6d0
runtime.mallocgc.func2()
        /usr/local/go/src/runtime/malloc.go:642 +0x2b fp=0x7ffeefbff728 sp=0x7ffeefbff708
runtime.systemstack(0x7ffeefbff7c8)
        /usr/local/go/src/runtime/asm_amd64.s:307 +0xab fp=0x7ffeefbff730 sp=0x7ffeefbff728
runtime.mallocgc(0x180, 0x2e8c00, 0x0, 0x800000000)
        /usr/local/go/src/runtime/malloc.go:643 +0x869 fp=0x7ffeefbff808 sp=0x7ffeefbff730
runtime.newobject(0x2e8c00, 0x468050)
        /usr/local/go/src/runtime/malloc.go:781 +0x42 fp=0x7ffeefbff830 sp=0x7ffeefbff808
runtime.malg(0x8000, 0x4682c0)
        /usr/local/go/src/runtime/proc.go:2634 +0x27 fp=0x7ffeefbff868 sp=0x7ffeefbff830
runtime.mpreinit(0x468820)
        /usr/local/go/src/runtime/os1_darwin.go:140 +0x1f fp=0x7ffeefbff880 sp=0x7ffeefbff868
runtime.mcommoninit(0x468820)
        /usr/local/go/src/runtime/proc.go:494 +0x105 fp=0x7ffeefbff8c8 sp=0x7ffeefbff880
runtime.schedinit()
        /usr/local/go/src/runtime/proc.go:434 +0x79 fp=0x7ffeefbff910 sp=0x7ffeefbff8c8
runtime.rt0_go(0x7ffeefbff948, 0x1, 0x7ffeefbff948, 0x0, 0x0, 0x1, 0x7ffeefbffa70, 0x0, 0x7ffeefbffa76, 0x7ffeefbffab8, ...)
        /usr/local/go/src/runtime/asm_amd64.s:138 +0x132 fp=0x7ffeefbff918 sp=0x7ffeefbff910