Updates the printer for status to use reset escape codes after setting color instead of setting it to a specific color. This should both address the problem where the output doesn't look correct for a terminal with white background and the issue where the terminal color doesn't go back to the default after the command has completed.

Fixes #2124

@pwittrock 
I have one problem with latest release version of kustomize (v 3.5.4). This version deletes all empty lines from ConfigMaps generated by configMapGenerator. Previous version(s) did not do this. 

Example:
```
$ ./kustomize-3.5.3 version
{Version:kustomize/v3.5.3 GitCommit:5ba90fe5ef1dc4599e359edd41d1d0e6373b247d BuildDate:2019-12-17T21:57:37Z GoOs:linux GoArch:amd64}
$ ./kustomize-3.5.4 version
{Version:kustomize/v3.5.4 GitCommit:3af514fa9f85430f0c1557c4a0291e62112ab026 BuildDate:2020-01-11T03:12:59Z GoOs:linux GoArch:amd64}
$ ./kustomize-3.5.3 build . > build.3.5.3.yaml
$ ./kustomize-3.5.4 build . > build.3.5.4.yaml
$ diff -urN build.3.5.3.yaml build.3.5.4.yaml 
--- build.3.5.3.yaml    2020-01-17 12:41:30.026148995 +0100
+++ build.3.5.4.yaml    2020-01-17 12:41:26.058072165 +0100
@@ -3,33 +3,22 @@
   nginx.conf: |
     user  nginx;
     worker_processes  1;
-
     error_log  /var/log/nginx/error.log warn;
     pid        /var/run/nginx.pid;
-
-
     events {
         worker_connections  1024;
     }
-
-
     http {
         include       /etc/nginx/mime.types;
         default_type  application/octet-stream;
-
         log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                           '$status $body_bytes_sent "$http_referer" '
                           '"$http_user_agent" "$http_x_forwarded_for"';
-
         access_log  /var/log/nginx/access.log  main;
-
         sendfile        on;
         #tcp_nopush     on;
-
         keepalive_timeout  65;
-
         #gzip  on;
-
         include /etc/nginx/conf.d/*.conf;
     }
 kind: ConfigMap
```

Files used for kustomize build can be found at https://gist.github.com/kantica/95b2b7f491cc2cb99d4307c80d947be9
The command changes the console colors, and when it exits, it leaves them changed
Not sure what the extra row is that says completed

     status events helloworld

```
ResourceUpdate   Unknown     apps/v1/Deployment                     helloworld-gke        Current     Resource has been deleted                           
ResourceUpdate   Current     v1/Service                             helloworld-gke        Current     Resource has been deleted                           
Completed        Current     
```
Should figure out if the table will fit, and it if won't then either drop columns or fallback on another display mode
Even though the resources exist, it still prints the message they are deleted

```
EVENT TYPE       AGG STATUS  TYPE                  NAMESPACE        NAME                  STATUS      MESSAGE                                             
ResourceUpdate   Unknown     apps/v1/Deployment                     helloworld-gke        Current     Resource has been deleted                           
ResourceUpdate   Current     v1/Service                             helloworld-gke        Current     Resource has been deleted                           
Completed        Current     
```

and later this even though they exist...

```
TYPE                       NAMESPACE        NAME                  STATUS      MESSAGE                                 
apps/v1/Deployment                          helloworld-gke        Current     Resource does not exist                 
v1/Service                                  helloworld-gke        Current     Resource does not exist 
```
We run `kustomize` in our CI to compile `kustomization.yaml` files instead of handcrafting them and realized that our process was not deterministic - resource files were often missing at the end of the process from the `kustomization.yaml`.

Script to easily reproduce the situation. Run inside an empty directory.

```sh
#!/bin/env sh

echo "" > kustomization.yaml

for i in {1..10}
do
   touch $i-manifest.yaml
done

# add all the resources to kustomization.yaml
for i in {1..10}
do
   kustomize edit add resource $i-manifest.yaml &
   pids[${i}]=$!
done

# wait for all pids
for pid in ${pids[*]}; do
    wait $pid
done

cat kustomization.yaml
```

Probably a classic problem with concurrency: files are read before writes happen and processes overwrite the state of each other.
The same issue would happen if there are two users on the same machine or in the case when N=2: run `kustomize edit ... & kustomize edit ...`.

cc: @kanolato
Rather than making functions implement logic to merge Resources, we should simplify them by merging the Resources for them by default.


Add `filters.Merge{}` to the list of filters here:
https://github.com/kubernetes-sigs/kustomize/blob/master/kyaml/runfn/runfn.go#L73

Support `NoMerge bool` field on `RunFns` to disable this behavior

Support `--no-merge` commandline option to `config run` that is passed through to `RunFns`

Consider making this part of the function API itself so it is specified per-function.
This puts the code that performs the apply and computes status into a separate goroutine that reports back progress through events on channel. This will allow us to support different output formats, including in-place progress updates for apply, status and prune. It is also a step towards being able to provide apply as a library since a client could listen for the events.

Some known limitations that we need to address in follow up PRs:
- Clean up the handling of cobra flags. The current setup is confusing and we probably need a somewhat different set of flags than the original kubectl.
- More output formats. Currently this only supports a single format and the `--output` flag is not being honored. 
- Continue to clean up the structure to allow for easier testing.

@monopole @seans3 @pwittrock 
The following example reproduces my issue.

Setup:
```bash
EXAMPLE=$(mktemp -d)
mkdir -p ${EXAMPLE}/base
cat <<'EOF' >${EXAMPLE}/base/kustomization.yaml
namePrefix: app-
EOF
cat <<'EOF' >${EXAMPLE}/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: web
spec:
  selector:
    matchLabels:
      app: web
  template:
    metadata:
      labels:
        app: web
    spec:
      containers:
      - image: test
        name: test
EOF
cat <<'EOF' >${EXAMPLE}/kustomization.yaml
nameSuffix: -staging

resources:
  - base
  - deployment.yaml
EOF

```

```
{Version:3.5.4 GitCommit:3af514fa9f85430f0c1557c4a0291e62112ab026 BuildDate:2020-01-11T06:57:29+00:00 GoOs:darwin GoArch:amd64}
```

Test:
```bash
kustomize build ${EXAMPLE}
```

Result:
```
apiVersion: apps/v1
kind: Deployment
metadata:
  name: web-staging
spec:
  selector:
    matchLabels:
      app: web
  template:
    metadata:
      labels:
        app: web
    spec:
      containers:
      - image: test
        name: test
```

Expectations:
I expected name to be `app-web-staging` - applying both the namePrefix from base and nameSuffix from overlay.
Resources added to the base get both the prefix and suffix, resources in overlay don't get the prefix. Additional namePrefix specified in overlay applies to all resources.