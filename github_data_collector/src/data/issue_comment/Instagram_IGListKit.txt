This is an error produced when building the latest version of IGListKit from the master branch. It occurs in `IGListBindingSingleSectionController.m` on the code `IGAssertNonnull(cell);`.
Summary: This assert causes crashes on debug builds. While it's known that this algorithm is slow with a large number of items to work through, it doesn't seem to have been an issue for most when working with IGListKit. Removing this assertion to avoid crashes for others.

Reviewed By: bdotdub

Differential Revision: D19251924


In Class `IGListAdapter`, method `_updateObjects_:dataSource:`, there has a piece of code:
```
// push the view controller and collection context into a local thread container so they are available on init
// for IGListSectionController subclasses after calling [super init]
IGListSectionControllerPushThread(self.viewController, self);
```

I want to know what will happen if don't do this, thanks!

In other words, if `self.viewController` and/or `self` is released when executing this method, what will happen?

## New issue checklist

- [x] I have reviewed the [`README`](https://github.com/Instagram/IGListKit/blob/master/README.md) and [documentation](http://instagram.github.io/IGListKit)
- [x] I have searched [existing issues](https://github.com/Instagram/IGListKit/issues/1209) and this is not a duplicate
- [x] I have attempted to reproduce the issue and include an example project.

### General information

- `IGListKit` version:
- iOS version(s): 13.1
- CocoaPods/Carthage version:
- Xcode version: 11
- Devices/Simulators affected: iphone 11
- Reproducible in the demo project? (Yes/No): n/a
- Related issues: n/a

So this isn't really so much an issue and more of a how to. Thanks to this guide https://instagram.github.io/IGListKit/modeling-and-binding.html I was able to take my Event object and render it using a ListBindingSectionController with the accompanying view models attached to the accompanying cells. Here is what my object looks like:

```
`class Event:NSObject{
    var key: String?
    let name: String
    let promoVideo: String
    var eventImages: [String]
    let eventDescription: String
    var weather: Weather?
    let streetAddress: String
    let city: String
    let state: String
    let zipCode: Int
    let price: Double
    let startTime: Date
    let endTime: Date
    var category: String
    var attendCount: Int
    var isAttending = false
    var eventTags: [String]?
    var userHost: [String]?
    var orgHost: [String]?
    var attendingUsers: [Attend]?
    var actions: [Action]?
    
    //init for event submission
    init?(key:String, name:String, eventImage:[String],promoVideo:String,eventDescription:String,streetAddress:String,city:String,state: String,zipCode: Int,startTime: Date, endTime: Date,price: Double,category: String,attendCount: Int,tags: [String]?,userHost: [String]?) {
        
        self.key = key
        self.name = name
        self.eventImages = eventImage
        self.promoVideo = promoVideo
        self.eventDescription = eventDescription
        self.streetAddress = streetAddress
        self.city = city
        self.state = state
        self.zipCode = zipCode
        self.startTime = startTime
        self.endTime = endTime
        self.price = price
        self.category = category
        self.attendCount = attendCount
        self.eventTags = tags
        self.userHost = userHost
    }
    
    init?(snapshot: DataSnapshot) {
        guard let dict = snapshot.value as? [String : Any],
            let name = dict["eventName"] as? String,
            let eventDescription = dict["eventDescription"] as? String,
            let promoVideo = dict["eventPromo"] as? String,
            let eventImages = dict["eventImageURL"] as? [String],
            let category = dict["eventCategory"] as? String,
            let streetAddress = dict["eventStreetAddress"] as? String,
            let city = dict["eventCity"] as? String,
            let state = dict["eventState"] as? String,
            let zipCode = dict["eventZip"] as? Int,
            let attendCount = dict["attend:count"] as? Int,
            let price = dict["eventPrice"] as? Double,
            let eventTime = dict["eventDatetime"] as? [String: Any],
            let startTime = eventTime["start"] as? Double,
            let endTime = eventTime["end"] as? Double
            else { return nil }
        self.key = snapshot.key
        self.name = name
        self.eventDescription = eventDescription
        self.eventImages = eventImages
        self.promoVideo = promoVideo
        self.streetAddress = streetAddress
        self.city = city
        self.state = state
        self.zipCode = zipCode
        self.attendCount = attendCount
        self.category = category
        self.price = price
        self.startTime = Date(timeIntervalSince1970: startTime)
        self.endTime =  Date(timeIntervalSince1970: endTime)
        //tags
        if let tags = dict["tags"] as? [String] {
            self.eventTags = tags
        }
        //user host
        if let users = dict["host_user"] as? [String] {
            self.userHost = users
        }
        //org host
        if let orgs = dict["host_org"] as? [String] {
            self.orgHost = orgs
        }
    }
    
    var eventDictionary: [String: Any]{
          let timeDict = ["endTime":endTime.timeIntervalSince1970, "startTime": startTime.timeIntervalSince1970]
          
          return ["name":name,"images" : eventImages,
                  "eventDescription": eventDescription, "attendCount": attendCount,
                  "streetAddress": streetAddress,"zipCode": zipCode,"price":price,
                  "state": state, "city": city, "promoVideo": promoVideo, "category":category,"eventDatetime": timeDict]
      }
    
}

extension Event {
    static public func ==(rhs: Event, lhs: Event) ->Bool{
        return rhs.key == lhs.key
    }
}

extension Event: ListDiffable{
    public func diffIdentifier() -> NSObjectProtocol {
        return key! as NSObjectProtocol
    }
    public func isEqual(toDiffableObject object: ListDiffable?) ->Bool{
        guard let object = object as? Event else {
            return false
        }
        return  self.key==object.key
    }
}`
```

As you can see there are certain properties that are arrays such as eventImages,attendingUsers,eventTags, etc. This means that I would need to implement multiple nested collectionViews/ list adapters inside the context of this EventDetailViewController. I was able to follow the code in the NestedAdapterViewController example in addition to this issue (https://github.com/Instagram/IGListKit/issues/1209) to achieve this task for eventImages but how would I do that for the rest of the nested collectionviews/adapters that will be present on this detail screen. 

I mean I know it wouldn't be feasible to try to create multiple adapters so im really not sure where to start when it comes to creating more of these nested collectionViews and not completely screw something up.

Im thinking of doing some type of switch statement on the viewModel but im not entirely sure how that would work. Does anyone have any example code or is anyone able to point me in the right direction. If more of the code is needed to answer me properly lmk but most of my code looks similar to the mentioned examples.

An collectionview contains three groups: A, B, and C, When I call the [self.collectionContext invalidateLayoutForSectionController:self completion:nil] method in group A, The following ,The layoutSubviews methods of all other group subviews are all called
## New issue checklist

- [x] I have reviewed the [`README`](https://github.com/Instagram/IGListKit/blob/master/README.md) and [documentation](http://instagram.github.io/IGListKit)
- [x] I have searched [existing issues](https://github.com/Instagram/IGListKit/issues) and this is not a duplicate
- [x] I have attempted to reproduce the issue and include an example project.

### General information

- `IGListKit` version:  4.0.0
- iOS version(s): 13.3
- CocoaPods/Carthage version: CocoaPods 1.8.3
- Xcode version: 11.3
- Devices/Simulators affected: iPhone Xr
- Reproducible in the demo project? (Yes/No): NO
- Related issues:  https://github.com/Instagram/IGListKit/issues/1314

When I call `[self.adapter scrollToObject:self.items.lastObject supplementaryKinds:nil scrollDirection:UICollectionViewScrollDirectionVertical scrollPosition:UICollectionViewScrollPositionBottom animated:NO];` App crashed with:

```
*** Assertion failure in -[IGListWorkingRangeHandler _updateWorkingRangesWithListAdapter:](), /Users/tracyyih/Documents/GitHub/PeekabooMoments/Pods/IGListKit/Source/IGListKit/Internal/IGListWorkingRangeHandler.mm:127
IGAssert(workingRangeSectionControllers.size() < 1000, @"This algorithm is way too slow with so many objects:%lu", workingRangeSectionControllers.size());
```

### Debug information

[IGListDebugger dump]: 

```bash
IGListAdapter 0x281238ea0:
  Updater type: IGListAdapterUpdater
  Data source: <BBTimelineViewController: 0x1118c5000>
  Collection view delegate: (null)
  Scroll view delegate: <BBTimelineViewController: 0x1118c5000>
  Is in update block: No
  View controller: <BBTimelineViewController: 0x1118c5000>
  Is prefetching enabled: No
  Registered cell identifiers:
  	{(
		"BBUserTipCell",
		"BBTagsLettersVisitorsCell",
		"BBAlbumSwitchCell",
		"BBNoMoreCell",
		"BBTimelineMomentCell",
		"BBTimelineMessageCell",
		"BBTimelineDatetimeCell",
	)}
  IGListAdapterUpdater instance 0x280265730:
    Moves as deletes+inserts: No
    Allows background reloading: Yes
    Has queued reload data: No
    Queued update is animated: Yes
    State: Idle
  Section map details:
    Object and section controller at section: 0:
      BBOtherStaticAlbumSwitch
      <BBOtherSectionController: 0x281838c80>
    Object and section controller at section: 1:
      BBOtherStaticTagsLettersVisitors
      <BBOtherSectionController: 0x28183e580>
    Object and section controller at section: 2:
      <BBSystemTip: 0x280d6c240>
      <BBOtherSectionController: 0x281f88280>
    IGListBindingSectionController 0x281e3d760:
  Data source: <BBTimelineSectionController: 0x281e3d760>
  Selection delegate: (null)
  Object: <BBTimelineModel: 0x280a41f40>
  View models:
  <BBTimelineDatetimeViewModel: 0x282b50b20>: BBTimelineDatetimeViewModel790337710799803273
  <BBTimelineEventViewModel: 0x282b502a0>: BBTimelineEventViewModel790337710799803273
  <BBTimelineMessageViewModel: 0x282b50660>: <BBTimelineMessageViewModel: 0x282b50660>
  Number of items: 3
  View controller: <BBTimelineViewController: 0x1118c5000>
  Collection context: <IGListAdapter: 0x281238ea0>
  Section: 3
  Is first section: No
  Is last section: No
  Supplementary view source: (null)
  Display delegate: <BBTimelineViewController: 0x1118c5000>
  Working range delegate: (null)
  Scroll delegate: (null)
    IGListBindingSectionController 0x281e20420:
  Data source: <BBTimelineSectionController: 0x281e20420>
  Selection delegate: (null)
  Object: <BBTimelineModel: 0x280a45540>
  View models:
  <BBTimelineDatetimeViewModel: 0x282b57570>: BBTimelineDatetimeViewModel790164608509891502
  <BBTimelineEventViewModel: 0x282b575b0>: BBTimelineEventViewModel790164608509891502
  <BBTimelineMessageViewModel: 0x282b575c0>: <BBTimelineMessageViewModel: 0x282b575c0>
  Number of items: 3
  View controller: <BBTimelineViewController: 0x1118c5000>
  Collection context: <IGListAdapter: 0x281238ea0>
  Section: 4
  Is first section: No
  Is last section: No
  Supplementary view source: (null)
  Display delegate: <BBTimelineViewController: 0x1118c5000>
  Working range delegate: (null)
  Scroll delegate: (null)
    IGListBindingSectionController 0x281e204d0:
  Data source: <BBTimelineSectionController: 0x281e204d0>
  Selection delegate: (null)
  Object: <BBTimelineModel: 0x280a42170>
  View models:
  <BBTimelineDatetimeViewModel: 0x282b52d90>: BBTimelineDatetimeViewModel790164617980629948
  <BBTimelineEventViewModel: 0x282b50e50>: BBTimelineEventViewModel790164617980629948
  <BBTimelineMessageViewModel: 0x282b52e20>: <BBTimelineMessageViewModel: 0x282b52e20>
  Number of items: 3
  View controller: <BBTimelineViewController: 0x1118c5000>
  Collection context: <IGListAdapter: 0x281238ea0>
  Section: 5
  Is first section: No
  Is last section: No
  Supplementary view source: (null)
  Display delegate: <BBTimelineViewController: 0x1118c5000>
  Working range delegate: (null)
  Scroll delegate: (null)
    IGListBindingSectionController 0x281e20580:
  Data source: <BBTimelineSectionController: 0x281e20580>
  Selection delegate: (null)
  
  ......(a long long list)
  
 
  Object: <BBTimelineModel: 0x280aede50>
  View models:
  <BBTimelineDatetimeViewModel: 0x282b583c0>: BBTimelineDatetimeViewModel790073133310759313
  <BBTimelineEventViewModel: 0x282b58400>: BBTimelineEventViewModel790073133310759313
  <BBTimelineMessageViewModel: 0x282b58410>: <BBTimelineMessageViewModel: 0x282b58410>
  Number of items: 3
  View controller: <BBTimelineViewController: 0x1118c5000>
  Collection context: <IGListAdapter: 0x281238ea0>
  Section: 1303
  Is first section: No
  Is last section: No
  Supplementary view source: (null)
  Display delegate: <BBTimelineViewController: 0x1118c5000>
  Working range delegate: (null)
  Scroll delegate: (null)
    IGListBindingSectionController 0x281e30210:
  Data source: <BBTimelineSectionController: 0x281e30210>
  Selection delegate: (null)
  Object: <BBTimelineModel: 0x280aedf90>
  View models:
  <BBTimelineDatetimeViewModel: 0x282b59fe0>: BBTimelineDatetimeViewModel790097699928101518
  <BBTimelineEventViewModel: 0x282b5a020>: BBTimelineEventViewModel790097699928101518
  <BBTimelineMessageViewModel: 0x282b5a030>: <BBTimelineMessageViewModel: 0x282b5a030>
  Number of items: 3
  View controller: <BBTimelineViewController: 0x1118c5000>
  Collection context: <IGListAdapter: 0x281238ea0>
  Section: 1304
  Is first section: No
  Is last section: No
  Supplementary view source: (null)
  Display delegate: <BBTimelineViewController: 0x1118c5000>
  Working range delegate: (null)
  Scroll delegate: (null)
    Object and section controller at section: 1305:
      BBOtherStaticNoMore
      <BBOtherSectionController: 0x281fc6940>
  Collection view details:
    Class: UICollectionView, instance: 0x111071800
    Data source: <IGListAdapter: 0x281238ea0>
    Delegate: <IGListAdapterProxy: 0x28295ba40>
    Layout: <UICollectionViewFlowLayout: 0x11089eea0>
    Frame: {{0, 0}, {414, 813}}, bounds: {{0, 499360.5}, {414, 813}}
    Number of sections: 1306
      1 items in section 0
      1 items in section 1
      1 items in section 2
      3 items in section 3
      3 items in section 4
      3 items in section 5
      ......(a long long list)
      3 items in section 1303
      3 items in section 1304
      1 items in section 1305
    Visible cell details:
```

thread backtrace:

```
* thread #1, queue = 'com.apple.main-thread', stop reason = breakpoint 1.1
    frame #0: 0x00000001b2080fec libobjc.A.dylib`objc_exception_throw
    frame #1: 0x00000001b22654fc CoreFoundation`+[NSException raise:format:arguments:] + 100
    frame #2: 0x00000001b26f84e4 Foundation`-[NSAssertionHandler handleFailureInFunction:file:lineNumber:description:] + 108
  * frame #3: 0x0000000107f09ab0 IGListKit`::-[IGListWorkingRangeHandler _updateWorkingRangesWithListAdapter:](self=0x0000000280d14de0, _cmd="_updateWorkingRangesWithListAdapter:", listAdapter=0x0000000281238ea0) at IGListWorkingRangeHandler.mm:127:5
    frame #4: 0x0000000107f08c4c IGListKit`::-[IGListWorkingRangeHandler willDisplayItemAtIndexPath:forListAdapter:](self=0x0000000280d14de0, _cmd="willDisplayItemAtIndexPath:forListAdapter:", indexPath=0xcae03a9580f13ba8, listAdapter=0x0000000281238ea0) at IGListWorkingRangeHandler.mm:79:5
    frame #5: 0x0000000107ecd42c IGListKit`-[IGListAdapter(self=0x0000000281238ea0, _cmd="collectionView:willDisplayCell:forItemAtIndexPath:", collectionView=0x0000000111071800, cell=0x000000012336fd10, indexPath=0xcae03a9580f13ba8) collectionView:willDisplayCell:forItemAtIndexPath:] at IGListAdapter+UICollectionView.m:160:5
    frame #6: 0x00000001b5c87e4c UIKitCore`-[UICollectionView _notifyWillDisplayCellIfNeeded:forIndexPath:] + 160
    frame #7: 0x00000001b5c888fc UIKitCore`-[UICollectionView _createPreparedCellForItemAtIndexPath:withLayoutAttributes:applyAttributes:isFocused:notify:] + 2380
    frame #8: 0x00000001b5c8cb54 UIKitCore`-[UICollectionView _updateVisibleCellsNow:] + 4476
    frame #9: 0x00000001b5c916b0 UIKitCore`-[UICollectionView layoutSubviews] + 324
    frame #10: 0x00000001b6909b1c UIKitCore`-[UIView(CALayerDelegate) layoutSublayersOfLayer:] + 2156
    frame #11: 0x00000001b207ca4c libobjc.A.dylib`-[NSObject performSelector:withObject:] + 68
    frame #12: 0x00000001b8f1fa9c QuartzCore`-[CALayer layoutSublayers] + 292
    frame #13: 0x00000001b8f1feec QuartzCore`CA::Layer::layout_if_needed(CA::Transaction*) + 484
    frame #14: 0x00000001b8f32614 QuartzCore`CA::Layer::layout_and_display_if_needed(CA::Transaction*) + 140
    frame #15: 0x00000001b8e771c4 QuartzCore`CA::Context::commit_transaction(CA::Transaction*, double) + 308
    frame #16: 0x00000001b8ea1fd0 QuartzCore`CA::Transaction::commit() + 684
    frame #17: 0x00000001b8ddb7bc QuartzCore`CA::Display::DisplayLink::dispatch_items(unsigned long long, unsigned long long, unsigned long long) + 888
    frame #18: 0x00000001b8ea9cc8 QuartzCore`display_timer_callback(__CFMachPort*, void*, long, void*) + 268
    frame #19: 0x00000001b22b9dac CoreFoundation`__CFMachPortPerform + 176
    frame #20: 0x00000001b22e47c4 CoreFoundation`__CFRUNLOOP_IS_CALLING_OUT_TO_A_SOURCE1_PERFORM_FUNCTION__ + 60
    frame #21: 0x00000001b22e3e90 CoreFoundation`__CFRunLoopDoSource1 + 448
    frame #22: 0x00000001b22deac8 CoreFoundation`__CFRunLoopRun + 2144
    frame #23: 0x00000001b22ddf40 CoreFoundation`CFRunLoopRunSpecific + 480
    frame #24: 0x00000001bc55b534 GraphicsServices`GSEventRunModal + 108
    frame #25: 0x00000001b6456a60 UIKitCore`UIApplicationMain + 1940
    frame #26: 0x00000001050adfe8 TimeHut`main(argc=1, argv=0x000000016bb237b0) at main.m:14:16
    frame #27: 0x00000001b215ce18 libdyld.dylib`start + 4
```
[self.collectionContext performBatchAnimated:true updates:^(id<IGListBatchContext>  _Nonnull batchContext) {
            [batchContext reloadInSectionController:self atIndexes:[NSIndexSet indexSetWithIndex:1]];
        } completion:^(BOOL finished) {
            
        }];

Refresh the current group as follows，Other groups will be affected，
## Changes in this pull request

Issue fixed: #

### Checklist

- [x] All tests pass. Demo project builds and runs.
- [ ] I added tests, an experiment, or detailed why my change isn't tested.
- [ ] I added an entry to the `CHANGELOG.md` for any breaking changes, enhancements, or bug fixes.
- [x] I have reviewed the [contributing guide](https://github.com/Instagram/IGListKit/blob/master/.github/CONTRIBUTING.md)

## Changes in this pull request
On macOS Catalina when pod install on Example.
have an error at podspce file when run scrip "Version.sh"


defaults read is fail on macOS 10.15. not find Info

    filepath  Domains may also be specified as a path to an arbitrary plist file, with or without the '.plist' extension. For example:

                     defaults read ~/Library/Containers/com.apple.TextEdit/Data/Library/Preferences/com.apple.TextEdit.plist

               normally gives the same result as the two previous examples.  In the following example:

                     defaults write ~/Desktop/TestFile foo bar

               will write the key 'foo' with the value 'bar' into the plist file 'TestFile.plist' that is on the user's desktop. If the file does not exist, it will
               be created. If it does exist, the key-value pair will be added, overwriting the value of 'foo' if it already existed.

               WARNING: The defaults command will be changed in an upcoming major release to only operate on preferences domains. General plist manipulation utili-
               ties will be folded into a different command-line program.


So update to other cmd. Use plutil
Issue fixed: #

### Checklist

- [x] All tests pass. The demo project builds and runs.
- [x] I added tests, an experiment, or detailed why my change isn't tested.
- [ ] I added an entry to the `CHANGELOG.md` for any breaking changes, enhancements, or bug fixes.
- [x] I have reviewed the [contributing guide](https://github.com/Instagram/IGListKit/blob/master/.github/CONTRIBUTING.md)

## New issue checklist

- [x] I have reviewed the [`README`](https://github.com/Instagram/IGListKit/blob/master/README.md) and [documentation](http://instagram.github.io/IGListKit)
- [x] I have searched [existing issues](https://github.com/Instagram/IGListKit/issues) and this is not a duplicate
- [x] I have attempted to reproduce the issue and include an example project.

### General information

- `IGListKit` version: 4.0.0
- iOS version(s): Any
- CocoaPods/Carthage version: None
- Xcode version: Xcode 11.2.1
- Devices/Simulators affected: Any
- Reproducible in the demo project? (Yes/No): Yes
- Related issues:

### Debug information

```bash
# Please include debug logs using the following lldb command:
po [IGListDebugger dump]
```

Just two screenshots, enough to say the issues...

![image](https://user-images.githubusercontent.com/6919743/70725758-eb852600-1d37-11ea-8713-e790bb26acf5.png)

![image](https://user-images.githubusercontent.com/6919743/70725765-ef18ad00-1d37-11ea-87cb-5786b9fa4101.png)
