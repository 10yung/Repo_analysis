Hey,

I was confused how I should use `Oj`. The README is pointing out to use the `dump` method. 
But using `Oj.dump` is not what I was looking for.

```ruby
my_hash = { a: 2, b: 'super cool' }
# => {:a=>2, :b=>"super cool"}

Oj.dump(my_hash)
# => "{\":a\":2,\":b\":\"super cool\"}"

Oj.generate(my_hash)
# => "{\"a\":2,\"b\":\"super cool\"}"
```

I never used `JSON.generate` before I wrote this issue. My usage in the past was `{}.to_json`. 
When I would use `Oj.dump`?
I've got a 32 bit SmartOS machine which ran into problems when upgrading from 3.9.2 to 3.10.0.  It used to be able to encode `Time.now.to_i` as an integer, but it now encodes it as a string:

```ruby
require 'bundler/inline'
gemfile do
  source 'https://rubygems.org'
  # gem 'oj', '3.9.2'
  gem 'oj', '3.10.0'
end
puts Oj::Rails::Encoder.new.encode(t: Time.now.to_i) # => {"t":"1575892189"}
```

The cutoff point seems to be 1073741824 (2**30).  Was this an intentional change?

When using  http://www.ohler.com/oj/doc/file.Encoding.html to stream data that contains references, the referenced value must include an ID (the `^i` tag) before a reference (the `^r` tag) is used. This is problematic when streaming since it isn't known if a streamed value will be referenced or not as the streaming progresses. Other encoding solutions solves this problem by giving each value that is streamed an implicit ID which is the value's index in the stream. Since the receiver reads the values in the same order as they were written, their implicit ID is known at the receiver end too.

Let's assume that the special tag `^R` was used to denote this implicit ID. The example in the encoding document:
```
{"^o":"Oj::Bag","^i":1,"x":["^i2",true],"me":"^r1"}
```
could then be rewritten as:
```
{"^o":"Oj::Bag","x":[true],"me":"^R0"}
```
`"^R0"` here means "object with index zero in the stream", i.e. the first `object`. If the stream were to reference the `[true]` array, it would use `"^R2"` (assuming that the index denotes the non-encoded values)

0 = the `Oj::Bag` instance
1 = the `"x"` key
2 = the `[true]` array
3 = the `true` in the `[true]` array
4 = the `"me"` key
5 = the reference




We're still at Rails 4.2 so maybe all of this is outdated, but still.
It's documented that :bigdecimal_as_decimal isn't available for mode: :rails. However, if I run it like this:
```ruby
Oj.optimize_rails
Oj.default_options = { mode: :rails, bigdecimal_as_decimal: true }
```
It does the job - Oj dumps BigDecimal as number.
If I later add `bigdecimal_as_decimal: true` explicitely in the `dump` it works for single number dump, but not for Hash.
```ruby
Oj.dump(BigDecimal('1.2')) # => "1.2"
Oj.dump({a: BigDecimal('1.2')}) # => "{\"a\":1.2}"
Oj.dump(BigDecimal('1.2'), bigdecimal_as_decimal: true) # => "1.2"
Oj.dump({a: BigDecimal('1.2')}, bigdecimal_as_decimal: true) # => "{\"a\":\"1.2\"}" - unexpected
```

Also when I remove running `Oj.optimize_rails`, Oj ignores `bigdecimal_as_decimal` and dumps BigDecimal as string.

Currently, it works OK for me, just wanted to check what's the expected behavior and if it should be aware when upgrading Rails or Oj.

Tested with latest Oj.

Thanks
On if you click on a link like "Rails" https://rubydoc.info/gems/oj, you are taken to https://rubydoc.info/gems/oj/file/Rails.md which is a 404. This works on ohler.com http://www.ohler.com/oj/doc/file.Rails.html.

Is there a way to have both working?
Rails v4.2
When using `ascii_only: true` on a hash that includes HashWithIndifferentAccess as one of the values, Unicode string values of HashWithIndifferentAccess are not escaped. However, it has something to do with 'active_support/json/encoding' - without it, all works well.
```
require 'oj'
require 'active_support/hash_with_indifferent_access'
require "active_support/json/encoding"

Oj.dump(ActiveSupport::HashWithIndifferentAccess.new(a:"ðŸ¤ž"), ascii_only: true, mode: :compat)`
# => "{\"a\":\"\\ud83e\\udd1e\"}" 
Oj.dump({a:ActiveSupport::HashWithIndifferentAccess.new(a:"ðŸ¤ž")}, ascii_only: true, mode: :compat)
# => "{\"a\":{\"a\":\"ðŸ¤ž\"}}" 
```

Hi,

I see this issue has come many times, but it looks like floating point float deserialization stroke again.

I still get a similar issue as #181 in `3.7.12`, macos `10.14.3` and also heroku machines (`4.4.0-1042-aws #45-Ubuntu`) (Ruby `2.5.3`, although I guess it doesn't matter):

```rb
> Oj.strict_load("48.949268")
 => 48.949268000000004 
```

If need be, I can give you any more information that bash has. I'd be ready to help, but C in not where I am the best.
```ruby
require 'active_support/json/encoding.rb'
require 'json'

class Foo
  def to_json(*)
    '{"foo":"bar"}'
  end
end

puts JSON.generate([Foo.new])
# => [{"foo":"bar"}]
puts JSON.generate(Foo.new)
# => {"foo":"bar"}

require 'oj'
Oj.optimize_rails

puts JSON.generate([Foo.new])
# => [{"foo":"bar"}]
puts JSON.generate(Foo.new)
# => "#<Foo:0x007fecc810ad30>"
```
This might be related to https://github.com/ohler55/oj/issues/244 but I'm not sure.

I can override as_json but as our API also returns XML we have to override serializable_hash so both json/xml is the same.

The problem it seems is due to serializable_hash getting passed an argument (nil) while as_json it not (and thus is able to my default value for the argument). This results in serializable_hash choking when merging the hash (nil object).

So this is solvable by doing `options ||= {}` but I guess this is a bug? Just started implementing Oj so not sure what the expected usage here is.

Works:
```ruby
def as_json(options={})
  options = { :only => [:id] }.deep_merge(options)
  super(options)
end
```

Does not work:
```ruby
def serializable_hash(options={})
  options = { :only => [:id] }.deep_merge(options)
  super(options)
end
```

The latter does work without using Oj.