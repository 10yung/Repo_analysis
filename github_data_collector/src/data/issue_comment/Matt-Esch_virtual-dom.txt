Hello @Matt-Esch 

We have currently a project where all ui are based on virtual-dom (and pretty happy)
We want to insert ,in one of this project' screen, a component developped in React (for another project).
Do you think we can we do that ? and be sure that no future problems will occur ?

thanks 
Hi,
I have a state object which contains an array which is used to show tab view. The array generates an array of widget in the UI. If i close the second element or the first element always the last element is destroyed.
I am trying to create virtual table rows with a loop, but they don't appear.

The rendering works, but only to the `tbody`. This is the resulting HTML.

    <div>
        <table>
            <tbody></tbody>
        </table>
    </div>

The code

    var h = require('virtual-dom/h');
    var createElement = require('virtual-dom/create-element');

    function view(state) {

        function renderRows() {
            var rows = []
            for (var i = 0; i < state.items.length; i++) {
                var item = state.items[i]
                rows.push(
                    h('tr', [
                        h('td', item.documentDate),
                        h('td', item.documentKey)
                    ])
                )
            }
            return rows
        }

        let tableRows = renderRows()

        return h('div', [
            h('table', [
                h('tbody', tableRows)
            ])
        ]);
    }

    var tree = view(state);
    var rootNode = createElement(tree);
    document.getElementById("app").appendChild(rootNode);

How can I get this to work?
Phantomjs is an unmaintained project. Removed phantomjs dependency from package.json.
run-browser supports phantomjs hence removed it from devdependency.

Signed-off-by: ossdev07 <ossdev@puresoftware.com>
When I change the 'keys' test case as follows, the 'getReorderPatch' function doesn't work, because the patch returned from 'diff' is an Array.

```javascript
test("keys get reordered", function (assert) {
    var leftNode = h("div", [
        h("div"),
        h("div", { key: 1 }),
        h("div"),
        h("div", { key: 2 }),
    ])
    var rightNode = h("div", [
        h("div", { key: 1 }),
        h("div"),
        h("div", { key: 3 }),
        h("div"),
    ]);
    var rootNode = render(leftNode)

    var patches = diff(leftNode, rightNode)
    assert.equal(patchCount(patches), 2)
    assertReorderEquals(assert, patches, {
        removes: [
            {from: 1, key: '1' },
            {from: 2, key: null },
            {from: 2, key: '3' },
        ],
        inserts: [
            {to: 0, key: '1' },
            {to: 2, key: '3' },
        ]
    })
})
```
This PR:

* Bumps deps (`npm i` givers error in windows now).
* Allows for string-like values for inputs in https://github.com/Matt-Esch/virtual-dom/pull/377.
* Invokes hooks after properties, that resolves class of issues https://github.com/Matt-Esch/virtual-dom/issues/228
* Splits `test/main.js` into `test/h.js`, `test/render.js`, `test/widget.js`, `test/vnode.js` and `test/patch.js` (that allows for better tests navigation).
* Adds `use strict` directives (to avoid mistakes & typos).
* Enables gentle eslint config and fixes all errors.
* Bumps nodejs for travis

cc @Matt-Esch @Raynos @Zolmeister 

If you prefer I can split thit PR into multiple.

I am going to create a transform converting react to virtual-dom (alike to preact), so I can devote some time fixing issues/PRs, if you have no time to run this repository you can provide contributor access to it.

There is a datavis project coming similar to [rect-vis](https://github.com/uber/react-vis), hoped to base it on virtual-dom, so looking forward to this PR not being ignored :)
What's the relationship between  virtual-dom and react virtual-dom? 
Since new passive scroll listeners Chrome virtual-dom triggers new viloation in chrome:
`[Violation] Added non-passive event listener to a scroll-blocking 'wheel' event. Consider marking event handler as 'passive' to make the page more responsive. See https://www.chromestatus.com/feature/5745543795965952`

Can you please look into it?
If render a snippet of HTML like so:

`<input type='text' value='foo' />`

and then update the snippet to an empty string:

`<input type='text' value='' />`

the updated DOM retains the 'foo' value
You seem to test the same equality {keys.length} times rather than testing equality for each key.