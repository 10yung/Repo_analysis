
It's quite possible this is covered in Chapter 2 or elsewhere, and I missed it, because I am lazy. If so, apologies!

Based on my C++ background, I believe I completely understand how Go handles your type-assertion example [here](https://github.com/teh-cmc/go-internals/blob/421db12/chapter2_interfaces/README.md#type-assertions). It can just, as you say, compare `Eface._type` with `type.uint32`.

But I cannot fathom how the following code works!

```
type Craft interface { Float() }

type Car struct {}
type Boat struct {}

func (c Boat) Drive() {}
func (c Boat) Float() {}
func (c Car) Drive() {}

var vface interface { Drive() }
var cface interface { Float() }

func main() {
  b := Boat{}
  vface = b
  cface = vface.(Craft)
}
```

On the line `cface = vface.(Craft)`, all the compiler knows about `vface` is that it is some kind of `Vehicle`. (Incidentally, its `_type` compares equal to `type.Boat`; but nobody said anything about `Boat` on this line, so that can't be relevant to anything.) So how does the runtime know how to convert an arbitrary `Vehicle` into a `Craft`?

If you initialize `b := Car{}` instead, then you get `panic: interface conversion: main.Car is not main.Craft: missing method Float` at runtime — which is exactly what I would expect — but, I don't understand how the runtime figured that out. Does the `_type` structure for `Car` contain a list of the names and signatures of every one of its methods, and then the interface-conversion code walks through that whole list at runtime to collect the needed methods to populate a `Craft` itab (or panic)?

In C++ terms, your `Eface.(uint32)` example is simply a `std::any_cast` — relatively cheap — but the `vface.(Craft)` example seems much wilder, much more dynamic and costly — so costly that it can't be done at all in C++. Is that right?


I actually got surprised that type switches are O(N).

> "how else could it work?"

I would assume that since the list of hashes is known at compile time, the compiler could find a perfect hashing function and just do a few arithmetic ops to get the address on which to jump<sup>1</sup>. At least if the size of switch exceeds some threshold.

If finding perfect hash would be too [time-consuming,](https://xkcd.com/303/) it could at least sort the hashes and do a binary search.

I guess the answer is that this is one of the optimizations Go is still awaiting...

EDIT: <sup>1</sup> Actually it would need to get just an index and lookup the target address; compiler knows the list of target hashes but not all input hashes.
bugfix
