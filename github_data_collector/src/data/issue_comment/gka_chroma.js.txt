Would you accept a pull request adding tint and shade functions? These would mix the colour with white and black respectively, at a given percentage.
[CSS Color Level 4](https://drafts.csswg.org/css-color/#the-hwb-notation) adds the [HWB space](https://en.wikipedia.org/wiki/HWB_color_model) to CSS.

It would be nice to add it to chroma.js. Would you accept a pull request for this?

(Issue #204 suggests making HWB an alias for HSV, but I don't think this makes sense.)

I tried to deploy the library as a webjar on [https://www.webjars.org/](https://www.webjars.org/) as I want to use it in a Vaadin project.

Unfortunately the license is not recognized and the deploy is not possible.

Is it somehow possible to standardize the license and use a single license instead of the both licenses specified right now?
It would be nice to have a method `colorFormat(string)` or `colorModel(string)` to be able to find out what color model is used in a given (CSS) string.
Like this: https://github.com/bgrins/TinyColor#readability

Specifically the functionality would be useful for automated checking of readability. I assume there are other ways to achieve this with Chroma, however it would be nice to have semantic methods/properties that convey the intent of the functionality.
chroma( {r:255, g:45, b:33, a:0.5} ) will work fine. We can see the alpha channel properly set in the chroma object and chroma( {r:255, g:45, b:33, a:0.5} ).alpha() returns 0.5.

BUT

chroma({ h:120, s:0.8, l:0.75, a:0.5}) will not consider the value a:0.5. We can see the alpha channel set to 1 instead of 0.5 in the chroma object and chroma({ h:120, s:1, l:0.75, a:0.5}).alpha() returns 1.
Hi!

I'm doing a website that should analyze pictures of a Rubik's cube and extract its colors (to reach a solution).

In order to do that I am taking the average color of every square of the cube (6 faces x 9 squares per face, resulting in 54 colors).

My problem was: how to find the color of each one of the faces?
I tryed some stuff and got this:

The function receives all the colors (54 in my case) and the size of each color group (9 in my case, the amount of extracted colors that belong to a cube face).

It will return 6 colors (54 divided by 9), representing each face of the cube.

```javascript
groupCloseColors(colorsRgb: IRGB[], groupSize: number) {
    const resultColors: chroma.Color[] = []
    let colors = colorsRgb.map(({ r, g, b}) => chroma.rgb(r, g, b))

    new Array(colors.length / groupSize)
      .fill(groupSize)
      .forEach(() => {
        const sample = colors.splice(0, 1)[0]
        const colorsCloserToSample = colors
          .map(color => ({
            color,
            distance: chroma.distance(color, sample)
          }))
          .sort((a, b) => a.distance - b.distance)
          .slice(0, groupSize - 1)
          .map(({ color }) => color)

        colors = colors.filter((c) => colorsCloserToSample.every(cs => cs !== c))
        const result = chroma.average([...colorsCloserToSample, sample])
        resultColors.push(result)
      })

    return resultColors
  }
```
Example of input and output:
![image](https://user-images.githubusercontent.com/26925730/55908111-f71fbc00-5bae-11e9-9e8b-8e7dc886d3eb.png)


I think that maybe this would be a good addition to chroma.js, what you guys think?
In a Vue / Typescript project, `hue()` is not found on Cubehelix:
```
59:8 Property 'hue' does not exist on type 'Cubehelix'.
    57 |       .start(0)
    58 |       .rotations(1)
  > 59 |       .hue(3)
       |        ^
    60 |       .gamma(0.4)
    61 |       .lightness([0.6, 0.6])
    62 |       .scale()
Version: typescript 3.3.1, tslint 5.12.1
```

In node, no problem:
```
> chroma.cubehelix().start(0).rotations(1).hue(3).gamma(0.4).lightness([0.6, 0.6]).scale().colors(5)
[ '#ffab97', '#a4f96d', '#73f5ff', '#fca7ff', '#ffab97' ]
```

package.json:
```
"chroma-js": "^2.0.3",
"@types/chroma-js": "^1.4.1",
```

I think the `hue()` function signature is just missing from `@types/chroma-js` [here](https://github.com/DefinitelyTyped/DefinitelyTyped/blob/30e9238945e38fa0f3b3eb7360f0f33cd8f90b9e/types/chroma-js/index.d.ts#L450-L476) though I didn't dig far.

After modifying `@types/chroma-js/index.d.ts`, things appears to be compiling OK:
```
interface Cubehelix {
  ...
  hue(h: number): Cubehelix;
  ...
}
```
Say I have the colour "red" and an array of colours ["black", "white", "burgundy"]. Is it possible to do this:

const resembles = chroma.resembles("red",  ["black", "white", "burgundy"] )
// resembles === "burgundy"

