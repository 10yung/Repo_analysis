Reference an older Newtonsoft.Json package, because some clients depend on lower versions.
ndexResponse should be indexResponse

Signed-off-by: oneoneonepig <peihuachu1112@gmail.com>
**NEST/Elasticsearch.Net version**:
6.8.3
**Elasticsearch version**:
6.8.3
**Description of the problem including expected versus actual behavior**:

I'm having an issue with NEST loading index using `await client.GetIndexAsync(indexName)` method if the index has alias setup with certain filter format. Cluster accepts the filter, but NEST client fails.

Alias with filter:
```json
{ "actions": [
	{
            "add": {
                "index": ".es-test-repro",
                "alias": ".es-test-repro-alias1",
                "filter": {
                    "bool": { "must_not": { "exists": { "field": "field1" } } }
                }
            }
	} ]
}
```

Error:
```
Cannot deserialize the current JSON object (e.g. {"name":"value"}) into type 'System.Collections.Generic.IEnumerable`1[Nest.QueryContainer]' because the type requires a JSON array (e.g. [1,2,3]) to deserialize correctly.
To fix this error either change the JSON to a JSON array (e.g. [1,2,3]) or change the deserialized type so that it is a normal .NET type (e.g. not a primitive type like integer, not a collection type like an array or List<T>) that can be deserialized from a JSON object. JsonObjectAttribute can also be added to the type to force it to deserialize from a JSON object.
Path '['.es-test-repro'].aliases['.es-test-repro-alias1'].filter.bool.must_not.exists', line 1, position 90.
Cannot deserialize the current JSON object (e.g. {"name":"value"}) into type 'System.Collections.Generic.IEnumerable`1[Nest.QueryContainer]' because the type requires a JSON array (e.g. [1,2,3]) to deserialize correctly.
To fix this error either change the JSON to a JSON array (e.g. [1,2,3]) or change the deserialized type so that it is a normal .NET type (e.g. not a primitive type like integer, not a collection type like an array or List<T>) that can be deserialized from a JSON object. JsonObjectAttribute can also be added to the type to force it to deserialize from a JSON object.
Path '['.es-test-repro'].aliases['.es-test-repro-alias1'].filter.bool.must_not.exists', line 1, position 90.
```

Repro project: https://github.com/opnarius/nest-alias-filter-repro

I can get around the error by reformatting the filter as follow:
```
 "filter": {
  "bool": 
    { 
      "must_not": [ { "exists": { "field": "field1" } }  ]
     } 
}
```

Should Nest support this alias filter if cluster is allowing it?
Hi every one,
Iâ€™m playing around with ElasticSearch(7.4.0) in combination with NEST(7.3.1) in my C# project. My use case includes several indices with different document mapping which I query separately so far. Now I wanna implement a global search function which queries against all existing indices.
So my question: How do I accomplish that by using NEST?
Maybe for a better understanding, this is the query I wanna realize with NEST:
` 
          
        var queryContainers = new List<QueryContainer>();
           
            if (totalFilter.HasTextFilter())
            {
                queryContainers.Add(QueryContainerHelper.GetQueryStringQuery($"*{totalFilter.Search}*",null));
            }

            
            var accountQueryContainers = new List<QueryContainer>();

            if (!totalFilter.UserIds.IsNullOrEmpty())
            {
                accountQueryContainers.Add(new BoolQuery()
                {
                    Must = new List<QueryContainer>()
                    {
                        new BoolQuery()
                        {
                            Filter = new List<QueryContainer>()
                            {
                                QueryContainerHelper.GetTermsQuery(totalFilter.InstagrmUserIds.OfType<object>().ToList(),Infer.Field<User>(i=>i.UserId)),
                                QueryContainerHelper.GetTermQuery(UserEntityType.Customer,Infer.Field<User>(i=>i.UserEntityType))
                            }
                        }
                    }
                });
            }
            
            var shouldAccountQuery = new BoolQuery()
            {
                Should = accountQueryContainers

            };

            queryContainers.Add(shouldAccountQuery);

            var mustQuery = new BoolQuery()
            {
                Must = queryContainers
            };
            var searchResponse = await _elasticClient.SearchAsync<object>(s => s.Query(q => mustQuery));
            
        
`
### NEST/Elasticsearch.Net version:
7.5.1
### Elasticsearch version:
7.5.0
### Description of the problem including expected versus actual behavior:

Hi , I have the following situation.
I want to create an index from elasticsearch into an c# classs.The problem is that one of the 
column  from the index is different from my class property name.index column name is : synonyms_path and my class property name is SynonymsPath .
1.
```
   public class DynamicRemoteSynonymTokenFilter : TokenFilterBase
    {
        public DynamicRemoteSynonymTokenFilter() : base("dynamic_synonym")
        {
        }

        [DataMember(Name = "synonyms_path")]
        public string SynonymsPath { get; set; }
    }
```

2.
```
var de = new CreateIndexDescriptor(indexName)
                .Settings(
                    b => b
                        .NumberOfShards(3)
                        .NumberOfReplicas(0)
                        .Analysis(
                        c => c.Analyzers(d => d.
                                Custom("ik", e => e.Tokenizer("ik_max_word").Filters("remote_synonym"))                           
                            )
                            .TokenFilters(tf => tf
                                //.Synonym("local_synonym", sf => sf.SynonymsPath("analysis/synonym.txt"))
                                .UserDefined("remote_synonym", new DynamicRemoteSynonymTokenFilter { SynonymsPath = synonymsPath }) 
                            )
                        )
                        .RefreshInterval(-1)
                    )
                .Map<Goods>(ms => ms.AutoMap());
            var result = this.Client.Indices.Create(de);
```

 3.
```
{	
	"settings": {
		"index.refresh_interval": -1,
		"analysis": {
			"analyzer": {
				"ik": {
					"filter": ["remote_synonym"],
					"tokenizer": "ik_max_word",
					"type": "custom"
				}				
			},
			"filter": {
				"remote_synonym": {
					"type": "dynamic_synonym"
				}
			}
		},
		"index.number_of_shards": 3
	}
}
```

4.why "synonyms_path" fields can not be serializer?

Can you give an advice ? What am I doing wrong ?
Thank you.
**Context:**

Currently, `BulkOperationsCollection<T>` is implemented using a `private IList<T>`, along with some locking. The summary tag explains this:

>  This class is used by \<see cref="IBulkRequest.Operations" /\> which needs thread safe adding \<see cref="ICollection{T}.Add" /\> as well as an equivalent of \<see cref="List{T}.AddRange"/\>. Because operations from Elasticsearch are executed in order none of the types in System.Collection.Concurrent can't be used for this. We need to preserve insert order and exposed indexed index because \<see cref="BulkResponse.Items"/\> is ordered and lines up with \<see cref="BulkRequest.Operations"/\> allowing one to zip the two together.

That's fairly concise and specific, but I'm a bit confused by it.

It's pretty trivial in the scheme of things, but I can't help but notice the limitation this propriety type imposes.

**Questions:** 

1. What exactly is it about `IBulkRequest.Operations` that makes this thread-safe adding necessary? It's a nice enough helper class in general, but isn't it true that by the time it gets to the request itself, it's going to be effectively read-only? I wouldn't expect someone to add to the collection after they've called `BulkAsync`.

Here's the formatter, showing that it's just looping over the contents.

https://github.com/elastic/elasticsearch-net/blob/c646b98c5e5278ad122cd686fa27c45cbb18b919/src/Nest/Document/Multiple/Bulk/BulkRequestFormatter.cs#L26

2. Pending that, would it be possible to change `IBulkRequest.Operations` to be an `IList<IBulkOperation>`? Existing implementations should remain in-tact, but I could use (and re-use) an `IBulkOperation[]`.
3. If that's not possible, would it be possible to at least expose the `List<T>(int capacity)` constructor, so that I can avoid some unnecessary list expansion?
**NEST/Elasticsearch.Net version**:
7.4.2
**Elasticsearch version**:
7.3.1

**Description of the problem including expected versus actual behavior**:
If I set a class that inherits Exception to the value of `Dictionary<string, object>` and post it to index, the following InvalidCastException is thrown.

```
Message: Unable to cast object of type 'Elasticsearch.Net.ExceptionFormatter' to type  'Elasticsearch.Net.Utf8Json.IJsonFormatter`1 [System.NullReferenceException]'.
StackTrace: Elasticsearch.Net.ExceptionFormatterResolver.GetFormatter<T>()
	Elasticsearch.Net.ElasticsearchNetFormatterResolver.InnerResolver.GetFormatter.AnonymousMethod__4_0<T>(System.Type)
	System.Collections.Concurrent.ConcurrentDictionary<TKey, TValue>.GetOrAdd(TKey, System.Func<TKey, TValue>)
	Elasticsearch.Net.ElasticsearchNetFormatterResolver.InnerResolver.GetFormatter<T>()
```

I hope it can be sent without problems.

**Steps to reproduce**:
Since it occurs at the time of serializing `PostData`, i attach the reproduction code
```csharp
var settings = new ConnectionConfiguration();

var dic = new Dictionary<string, object>()
{
    ["Exception"] = new NullReferenceException(),
};

var data = PostData.Serializable(dic);
using var ms = new MemoryStream();
data.Write(ms, settings); // Exception is thrown!!
```

A number of users are asking how to mock/stub/unit/integration test using the client.

It would be good to have a story (unit-testing.md?) where we can point users, and potentially look to release this as a blog post in order to reach a wider audience.
The current ApiGenerator project uses the old REST API JSON structure, and passes the new structure through a transformation process:

https://github.com/elastic/elasticsearch-net/blob/1fb218fc5fed94c0a18eea2b94d597a03455e42a/src/CodeGeneration/ApiGenerator/Generator/ApiEndpointFactory.cs#L126

This was implemented in `7.4.0` as a means of ensuring the client release was not impeded, but we ought to move the project to use the new format directly.
https://dev.azure.com/azure3/elasticsearch-net/_build/results?buildId=2691&view=logs&j=af1244d0-ddd1-5499-9483-8c2268ee60c5&t=e48b7b35-0818-5a16-4e6d-76f8e5477019