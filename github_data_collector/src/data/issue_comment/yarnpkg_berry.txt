- [ ] I'd be willing to implement a fix

**Describe the bug**

cache didn't use config `cacheFolder`

it save cache at `C:\Users\User\AppData\Local\Yarn\Berry\cache`

**To Reproduce**

The _minimal_ information needed to reproduce your issue (ideally a package.json with a single dep). Note that bugs without minimal reproductions might be closed.

IMPORTANT: We strongly prefer reproductions that use Sherlock. Please check our documentation for more information: https://next.yarnpkg.com/advanced/sherlock

**Screenshots**

If applicable, add screenshots to help explain your problem.

**Environment if relevant (please complete the following information):**

 - OS: [e.g. OSX, Linux, Windows, ...]
 - Node version [e.g. 8.15.0, 10.15.1, ...]
 - Yarn version [e.g. 2.0.0-rc1, ...]

**Additional context**

Add any other context about the problem here.

- [ ] I'd be willing to implement a fix

**Describe the bug**

Installing `@yarnpkg/core`, `@yarnpkg/pnpify` etc. only installs javascript files. There are no typescript definitions in the published packages.

**To Reproduce**

```js repro
const {promises: {writeFile}} = require(`fs`);

await packageJsonAndInstall({
  devDependencies: {
    [`@yarnpkg/core`]: `^2.0.0-rc.19`,
    [`typescript`]: `^3.6.3`
  }
});

await writeFile(`index.ts`, `
import {Plugin} from '@yarnpkg/core';

// note: wrong code on purpose, because we expect a compilation failure below
const foo: Plugin = 'not a plugin';
`);

await expect(yarn(`tsc`, `--noImplicitAny`, `index.ts`)).rejects.not.toThrow(
  /Could not find a declaration file for module '@yarnpkg\/core'/
);
```

**Screenshots**

![image](https://user-images.githubusercontent.com/821510/72671406-f3786a00-3a49-11ea-8856-a8a518838dbf.png)

- [ ] I'd be willing to implement a fix

**Describe the bug**

This code worked in RC-19, but not works in RC-23.

```
const fs = require("fs");

const rc = `---
root: true

extends:
    - 'eslint:recommended'
`;

fs.writeFileSync('./.eslintrc.yaml', rc);

fs.writeFileSync('./1.js', '');

await yarn(`add`, `eslint`);

await yarn(`eslint`, `1.js`);
```
- [x] I'd be willing to implement this feature
- [ ] This feature can already be implemented through a plugin

**Describe the user story**

As a developer I have a build step in my package but I want to publish a flat package.

For example, my package's typescript sources are in a `src` subfolder. In the published package I don't want there to be a `dist` or `lib` folder with the resulting javascript files. I want the javascript files to be in the root of the published package. See also: the angular package format ([spec](https://goo.gl/jB3GVv))
On the other hand, I don't want to have these javascript files dirty my workspace. Our current approach is to have a `dist` folder which contains the built javascript files, the package manifest and any assets, which then gets published instead of publishing the workspace folder.

**Describe the solution you'd like**

I'd like to be able to use `yarn npm publish` and `yarn pack` to publish folders that are not a workspace.

I can see two ways for this to work at first glance:

- Like in yarn v1 make the `yarn pack` and `yarn npm publish` commands work in any folder, regardless of whether it's a workspace
- Add a property to tell yarn that we run pack/publish in a workspace, it should actually run in a different folder. This could be
  - a command parameter, but we'd have to pass it with every execution which is annoying and error-prone
  - a property in package.json, but then we'd be adding custom properties to the package.json&hellip;
  - a configuration variable, but this folder isn't necessarily the same for every package (e.g. we've currently got `<repo root>/dist/@scope/package` as output folder)

**Describe the drawbacks of your solution**

- Extra complexity in the pack/publish commands
- Allowing pack/publish everywhere is another way for people to make mistakes + it changes what happens if you run `yarn pack` in a subfolder of a package

**Describe alternatives you've considered**

- Not using yarn 2 (e.g. npm) to pack &amp; publish
- Making the build output the package folder, but that looks messy and it breaks our setup where we've got an `index.js` that loads `ts-node` and then re-exports the `src/index.ts` file to allow us to run our workspace packages from source within the workspace.
- Publishing non-flat packages. This is actually what we did in our original project setup four years ago, and it led to issues with secondary entrypoints in packages (`@scope/package/entry-point`)
- Implement this as a plugin. This is the most viable alternative imo, but also leads to duplicating a lot of yarn logic

- [x] I'd be willing to implement a fix (if I actually found a root cause ðŸ˜‚)

**Describe the bug**

As mentioned in https://github.com/yarnpkg/berry/pull/681#issuecomment-573558043. As from the latest version of `gatsby`, yarn berry no longer work properly with it. `yarn build` works perfectly, but `yarn start` will result in an error shown below.

```
 ERROR #98123  WEBPACK

Generating development JavaScript bundle failed

Failed to load config "react-app" to extend from.
Referenced from: BaseConfig

File: .cache/app.js

failed Building development bundle - 0.460s
```

**To Reproduce**

Update the `gatsby` dependency to the latest version by running

```bash
yarn workspace @yarnpkg/gatsby add gatsby
```

Then run the development server

```bash
yarn workspace @yarnpkg/gatsby start
```

We can also reproduce it by creating a new gatsby project

```bash
yarn dlx gatsby new berry-gatsby
cd berry-gatsby
yarn start
```

We only covered `yarn build` in our [e2e test](https://github.com/yarnpkg/berry/blob/edc336da0fa806f8be5217a06955a4ec24bf028e/.github/workflows/e2e-gatsby-workflow.yml#L34), so it didn't catch that. 

Sherlock:
```js repro
const path = require('path');

await yarn('dlx', 'gatsby', 'new', 'berry-gatsby');
process.chdir(path.resolve(process.cwd(), 'berry-gatsby'));
await yarn('build');
await yarn('dlx', 'start-server-and-test', '"yarn start"', ':8000', '"curl -s localhost:8000 | grep \"<h1>Hi people</h1>\""');
```

**Screenshots**

![image](https://user-images.githubusercontent.com/7753001/72312844-5a052d00-36c4-11ea-951f-2a812f081374.png)


**Environment if relevant (please complete the following information):**

 - OS: macOS 10.15.2
 - Node version: 10.15.3
 - Yarn version: 2.0.0-rc.21

**Additional context**

Note that it's not happening with the current version we used in our website (2.13.6). Looks like the problem is with `eslint-loader` or more specifically how gatsby uses it. By filtering out the `eslint-loader` rule in webpack config can no longer reproduce the issue. I haven't looked into the source or diff the versions to find the root cause yet. I'll continue try to find it, it's fun!

**Update 1:**

~I'm able to pin point the problem to `eslint-config-react-app`. Downgrading it to `^4` fixes the issue. I'll continue to try to find what goes wrong.~

**Update 2:**

Seems like it's happening because of `eslint` actually. Especially in this [line](https://github.com/eslint/eslint/blob/a1d999c6b4e51c317ad409110be7be214ff9f7c6/lib/cli-engine/config-array-factory.js#L845) when it tries to call `Module.createRequire('CWD/__placeholder__.js').require('eslint-config-react-app')` will results in a failure. I'll try to create a minimal reproduce steps for eslint.

**Update 3:**

Since that gatsby bundles `eslint-config-react-app` inside the `gatsby` package, so that the user won't have to install that package themselves. However, requiring the package is handled by `eslint`, which requires from `cwd`, i.e. the user package root, hence the error.
I have no idea how to fix it now though, I'm sure that it's something happens a lot in other packages too, maybe @arcanis has an idea?
**What's the problem this PR addresses?**

These changes are not obviously wrong so much as non-idiomatic.

**How did you fix it?**

By correcting the phrasing to be more idiomatic.
- [ ] I'd be willing to implement this feature
- [ ] This feature can already be implemented through a plugin

**Describe the user story**

When a user is trying to build an electron project using [electron-builder](https://github.com/electron-userland/electron-builder) the build fails because Windows can't execute an `exe` file within a zip archive

**Describe the solution you'd like**

That Yarn would detect that a dependency has executeable files and automatically unplug said dependency

**Describe the drawbacks of your solution**

Yarn would have to do more work at install time

**Describe alternatives you've considered**

- Opening a PR upstream to add a empty postinstall script just to have yarn unplug it automatically, this would only solve the problem for this one dependency.
- Running `yarn unplug` on the offending package(s), creates another hurdle for PnP adoptation

**Additional context**
Where electron-builder spawns the package
https://github.com/electron-userland/electron-builder/blob/e1a7ec9f3f7dde69b99dc8c809aac688803ee9a9/packages/builder-util/src/util.ts#L337-L369
The package that needs to be unplugged:
https://github.com/Loller79/app-builder-bin
- [*] I'd be willing to implement a fix

**Describe the bug**
I think, that Sherlock is useless for windows, so I will not use it for this issue.

When the project is located in the folder, which is symbolic link, and I perform ```yarn install``` or ```yarn add``` from this folder - it creates ```.pnp.js``` file with incorrect ```packageLocation``` for dependencies.
```packageLocation``` created related to the symbolic link, but it should be related to the original location. 
Under linux yarn resolves symbolic links during ```.pnp.js``` creation, but under windows - not (seems, you forgot to do this).

I think, I can fix it, if you give me directions, where I should look for a code, responding for ```.pnp.js``` generation under windows.

Here is the script, that setup folders structure and reproduce the issue, it should be executed with admin permissions, because ```mklink``` under windows requires elevated permissions:

```
:: create original project location
rmdir /S /Q 1
mkdir 1\2\3\project

:: create symbolic link to the project
rmdir project
mklink /D project 1\2\3\project

:: init project
cd %~dp0\project
call yarn init
call yarn add eslint

:: test
call yarn eslint --version

cd %~dp0

pause
```
- [ ] I'd be willing to implement a fix

**Describe the bug**

I have a library that depends on `rxjs` as a peer dependency, but it also has tests inside it. 

If I add `rxjs` as a normal dependency, tests run properly. If instead I run:

`yarn add --peer --dev rxjs`

My tests will complain about: `Cannot find module 'rxjs' from '...'`

Note that I'm also using typescript and `ts-jest`. 

Ideally, the dependency should be available to both peer and dev dependencies.

**To Reproduce**

```js repro
const {promises: {readFile}} = require(`fs`);

await packageJsonAndInstall({
  devDependencies: {},
});

await yarn(`add`, `--dev`, `rxjs`);
await yarn(`add`, `--peer`, `rxjs`);

const pkgJson = JSON.parse(await readFile(`package.json`, `utf8`));
expect(pkgJson).toHaveProperty(`peerDependencies`);
expect(pkgJson).toHaveProperty(`devDependencies`);
expect(pkgJson.peerDependencies).toHaveProperty(`rxjs`);
expect(pkgJson.devDependencies).toHaveProperty(`rxjs`);
```

**Additional context**

This is also a bug in yarn v1: https://github.com/yarnpkg/yarn/issues/5287

- [ ] I'd be willing to implement a fix

**Describe the bug**

See:
- [proposal-pkg-exports](https://github.com/jkrems/proposal-pkg-exports)
- [Node 13 Documentation](https://nodejs.org/api/esm.html#esm_package_exports)

[Node ^12.7.0](https://github.com/nodejs/node/blob/master/doc/changelogs/CHANGELOG_V12.md#12.7.0) with the `--experimental-modules` flag and [Node ^13.0.0](https://github.com/nodejs/node/blob/master/doc/changelogs/CHANGELOG_V13.md#13.0.0) without the flag resolves modules differently than Yarn@2.0.0-rc19 with PNP 

**To Reproduce**

See this project:
https://github.com/sparebytes/yarn2-pnp-exports-example

```
// packages/package-with-exports/package.json
{
    "name": "package-with-exports",
    "version": "1.0.0",
    "exports": {
        ".": "./main.js",
        "./sub/other": "./other.js"
    }
}

// Example 1
// Expected: packages/package-with-exports/main.js
// Actual: packages/package-with-exports/index.js
require("package-with-exports");

// Example 2
// Expected: packages/package-with-exports/other.js
// Actual: throws error
require("package-with-exports/sub/other");
```

**Environment**

 - OS: Windows
 - Node version ^12.7.0
 - Yarn version 2.0.0-rc19
