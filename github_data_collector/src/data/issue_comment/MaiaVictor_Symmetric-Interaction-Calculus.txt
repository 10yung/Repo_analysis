I modified the project a little bit to run `example.rs` with `cargo test`:

```diff
diff --git a/src/example.rs b/src/example.rs
index 85ff15f..bbcaaeb 100644
--- a/src/example.rs
+++ b/src/example.rs
@@ -7,8 +7,7 @@
 // - [-] stands for an erased (unused) lambda or let variable
 // - [/a b c] inlines all occurrences of [a] by the closed term [b]

-mod term;
-mod net;
+use term;

 pub fn example() {
     let example = term::from_string(b"
diff --git a/src/main.rs b/src/main.rs
index d518a19..5387cda 100644
--- a/src/main.rs
+++ b/src/main.rs
@@ -4,6 +4,7 @@ use clap::{Arg, App};
 mod term;
 mod net;
 mod extra;
+mod example;

 use term::*;
 use extra::*;
@@ -104,3 +105,12 @@ fn main() -> io::Result<()> {

     Ok(())
 }
+
+mod tests {
+    use super::example::*;
+
+    #[test]
+    fn test_example() {
+        example();
+    }
+}
```

After that, I did `cargo test` and it gives me

```
thread 'tests::test_example' has overflowed its stack
error: test failed, to rerun pass '--bin sic'
```

Is `example.rs` a working example?
Is there an implementation of amb agent for representing non-deterministic computations?
The readme mentions

https://github.com/MaiaVictor/Symmetric-Interaction-Calculus/blob/1e74be3666bf616fe2fc2b3b401db72d67a22c2d/README.md#L17

I've read the blogpost and the linked paper but were not able to find specifics about this. The reason I ask is because I'd love to visualize programs in the combinator form to build intuition. Can you clarify?
I think it will grate if there is a list of benchmarks to show the advantage compared to existing languages/platforms, such as Solidity/EVM, Haskell, etc. For example, some parallel example that cannot be easily implemented in blockchain because it is hard to eliminate non-deterministic behaviour caused by data race.

The paper https://medium.com/@maiavictor/the-abstract-calculus-fe8c46bcf39c is very good, but simple examples can be more intuitive and be more convincible. Some simple examples will be easier for me to convince my boss. :-)
If anyone has a suggestion for a better name (since Abstract Calculus seems to be impopular) please let me know. Symmetric Lambda Calculus (since it is isomorphic to Symmetric Interaction Combinators) may be a good option. Thoughts?