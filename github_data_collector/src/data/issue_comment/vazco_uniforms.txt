This pull request answers the need for faster reproductions #587.

Codesandbox is able to pull data directly from github repository to create sandboxes. I've set it to pull from the master branch and reproductions directory. This will ensure that reproductions are always up to date with the master branch.
- Created boilerplate code for presenting code samples.
- Added link to codesandbox when creating github issue.

Hi, the `readonly` attribute of an html input doesn't seem to be supported. I want to use it in the case where one of the fields is calculated from others, so that the user sees and submits the value but can't modify it via the UI.

The `disabled` attribute doesn't fit my case as I want it to be styled appropriately via bootstrap themes and submitted accordingly.

edit: I'm using SimpleSchema and Bootstrap 3.
Hi!

I've recently written a component that adds reordering items to ListField and improves look of buttons (IconButon with fullWidth is not good-looking in my opinion :)). 

It is written only for Material-UI, so I didn't do a PR. Maybe I should? If so - as a new component or modifying ListField?

Check it out here (code and demo) -> https://bit.dev/amazingdesign/uniforms/list-field-reorder

I am quite new to this project, so I hope to hear feedback about my modifications :)
To simplify the work- and information flow, we've decided to keep [the changelog](https://github.com/vazco/uniforms/blob/v3/CHANGELOG.md) up to date as much as possible and treat it as a kind of _log_ of the work.

You can install the latest version with `npm install uniforms@next`.

<details>
<summary>Previous content</summary>

We are finally sure how to approach the new release. I've already mentioned it in a few places, like #405, #588, #605, and #644. So, how it's going to look like:

* **Version 2.x is still actively maintained!** We'll try to limit the number of added features.
* _Frequent_ releases of preview versions. Probably `3.0.0-alpha.n`. As the SemVer states, not everything is guaranteed to work, and breaking changes may happen.
* We'll try to keep you up to date with the changes in this issue and in the changelog on [`v3` branch](https://github.com/vazco/uniforms/tree/v3).


The first version should be released by the end of November 2019.

Status (2019-11-13):
* [x] New context API (#405).
  Already implemented, all tests are passing. The new context tries to stay in align with v2, so an additional wrapper is needed. It's going to be changed.
* [ ] Custom hooks (#588).
  Not started yet.
* [ ] Deprecated lifecycle methods (#605).
  Not started yet.
* [ ] Way to simplify making custom themes (#640).
  Not started yet.
* [ ] Rethink bridges error handling (#644).
  Not started yet.
* [ ] Complete typings.
  There are more types than in v2, but there's a lot to be done.

</details>
Validators currently work by throwing an object that is at a minimum `{ details: arrayOfErrors}`

This is not best practice as validation errors are not actually runtime errors but the proper result of a working validator against a currently invalid model.

In future versions it would be better to handle this via returning errors directly (versus returning nothing to indicate success), using promises, error first callbacks, etc.

**Side note:** 

The current system also requires throwing a somewhat nonstandard Error object that cannot be created via the Error() constructor alone.  If I am using, for instance the JSONSchemaBridge and want to throw a standard Error object (as to appease a linter) I would need the following code:

```
throw Object.assign(new Error('Validation Error'), { details: validator.errors })
```

Of course one could argue throwing a standard Error object is perhaps worse because, once again, this is not an actual error condition.  In my case I settle on just disabling ESLint for the line in question.

If you just want to replace one field (e.g. replace the ListField with a custom one for all schemas), you need to reimplement the whole AutoField.

It would probably easier, if you could pass a `getFieldComponent` to a AutoForm, which would hook into here: https://github.com/vazco/uniforms/blob/master/packages/uniforms-material/src/AutoField.tsx#L24 and would take `props` and could return a Component. If no component is returned, it would fallback to the normal logic.


> Warning: componentWillMount has been renamed, and is not recommended for use. See https://fb.me/react-async-component-lifecycle-hooks for details.
>
> * Move code with side effects to componentDidMount, and set initial state in the constructor.
> * Rename componentWillMount to UNSAFE_componentWillMount to suppress this warning in non-strict mode. In React 17.x, only the UNSAFE_ name will work. To rename all deprecated lifecycles to their new names, you can run `npx react-codemod rename-unsafe-lifecycles` in your project source folder.
>
> Please update the following components: AutoValidatedQuickUnstyledForm, BoolField, ErrorField, SideEffect(NullComponent), TextField

I'm using React v16.8 and I'm getting a lot of such and similar warnings in the console. Because of this, it's really hard to see any new warning.

I understand that uniforms supports react all the way down to v0.14 (wow!)

I hope uniforms v3.0 can drop support for at least some of these older react versions. I'm also looking forward for uniforms with hooks. That will be amazing addition! https://github.com/vazco/uniforms/issues/588

Thanks!

Recursive JSON schemas such as this one (where the recursi e property is not required) make this library crash. It should not, ideally.

```
{
  "definitions": {
    "address": {
      "type": "object",
      "properties": {
        "billing_address": {
          "title": "Billing address",
          "$ref": "#/definitions/address"
        },
        "street_address": {
          "type": "string"
        },
        "city": {
          "type": "string"
        },
        "state": {
          "type": "string"
        }
      },
      "required": [
        "street_address",
        "city",
        "state"
      ]
    }
  },
  "type": "object",
  "properties": {
    "billing_address": {
      "title": "Billing address",
      "$ref": "#/definitions/address"
    }
  }
}
```
I've started to use hooks, and they make a lot of sense. Here's what I suggest, some ideas:

1. AutoForm to accept the prop ref as a `useRef()`
```
const form = useRef();
<AutoForm ref={form}>...</AutoForm>
```

2. ConnectField:
```
() => {
  const { onChange } = useUnifield()

  // would something like this even work?
}
```

3. Sub components (especially on large forms) should be able to have access AutoForm parent reference

```
() => {
     const uniforms = useUniforms();
}
```

It would be nice if you could do something like: https://codesandbox.io that includes a dummy setup of Uniforms running.

So if someone wants to show a bug or something automatically forks your sandbox and leaves the link inside GitHub. 