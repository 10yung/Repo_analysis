Fix #7835 including unit tests
### Summary

I'm using [an OIDC Provider](https://github.com/panva/node-oidc-provider) that supports [OIDC Back-channel Logout Spec](https://openid.net/specs/openid-connect-backchannel-1_0.html). However the current version of Spring Security doesn't implement this functionality.

### Actual Behavior

There's no way to have single sign out.

### Expected Behavior

Single sign out from all RPs in which the user has authenticated with SSO.

### Configuration

---

### Version

5.2
### Summary

When using Annotation based method security, Spring Boot does not provide a way to whitelist controller methods by default, it is blacklist based instead. E.g. if an annotation for a controller method is omitted then the authorization scheme form HttpSecurity configuration is applied. 

### Sample

By using the custom MethodSecurityMetadataSource provided by this package, all requests to controller methods that are not explicitly annotated will be denied by default. This provides better security in situations where developers forget to annotate controller methods.  

https://github.com/rkuijt/spring-security-method-whitelisting

<!--
For Security Vulnerabilities, please use https://pivotal.io/security#reporting
-->

### Summary

I ❤️ the new `OidcClientInitiatedServerLogoutSuccessHandler` in Spring Security 5.2! The only problem I see with it is you have to set a `postLogoutRedirectUri` property. This will likely vary between development, test, and production, so it seems like kind of a pain to have to maintain a new property that could be calculated.

By default, it'd be nice if the `postLogoutRedirectUri` defaulted to the current context path (`/`). If people wanted to override it, it'd be cool if they could use a relative URL (that starts with `/`) or an absolute URL (current behavior).

I'm entering this here as requested by @jgrandja on [Stack Overflow](https://stackoverflow.com/questions/59650868/how-do-i-logout-when-using-spring-webflux-and-oauth-2-0-login).

### Actual Behavior

You need to set a `postLogoutRedirectUri`.

### Expected Behavior

I'd like this value to default to `/`.

### Configuration

OIDC with Okta and Keycloak (because JHipster).

### Version

Spring Security 5.2


This ticket addresses the Servlet implementation of #7699
### Summary

`BasicAuthenticationConverter` in `BasicAuthenticationFilter` ignores given credentials charset.

### Actual Behavior

We try to override the credential charset using an `ObjectPostProcessor`:
```java
httpSecurity
     .httpBasic()
     .addObjectPostProcessor(
          new ObjectPostProcessor<BasicAuthenticationFilter>() {
               @Override
                public <O extends BasicAuthenticationFilter> O postProcess(O filter) {
                    filter.setCredentialsCharset("ISO-8859-1"); // <-- try to override default charset
                    return filter;
                }
           }
      );
```
Actual implementation of `BasicAuthenticationFilter#setCredentialsCharset`:

```java
public void setCredentialsCharset(String credentialsCharset) {
    Assert.hasText(credentialsCharset, "credentialsCharset cannot be null or empty");
    this.credentialsCharset = credentialsCharset;
}
```
However, the given `credentialCharset` is never used in `BasicAuthenticationFilter` and especially not in `BasicAuthenticationFilter#BasicAuthenticationConverter`. So, the token is read with the default charset UTF-8 and not as needed with ISO-8859-1.

### Expected Behavior

Corrected `BasicAuthenticationFilter#setCredentialsCharset`:

```java
public void setCredentialsCharset(String credentialsCharset) {
    Assert.hasText(credentialsCharset, "credentialsCharset cannot be null or empty");
    this.credentialsCharset = credentialsCharset; // <-- is never used
    authenticationConverter.setCredentialsCharset(credentialsCharset); // <-- bugfix
}
```

### Version

v5.2.0 - v5.2.1

Currently, `JwtAuthenticationToken` always pass one `Jwt` instance to super constructor (`AbstractOAuth2TokenAuthenticationToken`) as `token`, `principal` and `credentials`. So, that implies that all three values must always be a jwt token itself.

I don't see any reason why `principal` in JWT token must always be the token itself. It already represents both `token` and `credentials`. But for `principal` I want more flexibility: an ability to also load user (represented by JWT "sub" claim) from DB or external service.

In my application I want to use a JWT token, but I also want to create a custom class that will represent a principal, like `UserDetials` implementation or just a new custom class.

`AbstractOAuth2TokenAuthenticationToken` has a constructor, that takes `token`, `principal` and `credentials` separately.

It would be good, if `JwtAuthenticationToken` also have a constructor, that at least takes `principal` separately.

If this will be added, then it will also be good if `JwtAuthenticationConverter` will have an optional property

```
Converter<Jwt, Object> jwtPrincipalConverter;
```

which, if set, will be used to convert `Jwt` to `principal` (by loading it from DB, external service, or just by creating a more application-friendly `User` object from `Jwt` token) before calling new `JwtAuthenticationToken` constructor.
### Summary

When using LDAP, if a file matching "*.ldif" exists on the classpath, then it should be used, if no other LDIF file is specified.
However, when using "unboundid" mode, the file on the classpath is not picked up unless explicitly specified.

### Sample

This issue can be demonstrated using the [LDAP sample](https://github.com/spring-projects/spring-security/tree/master/samples/xml/ldap) with a few modifications.
Firstly, to make the application use "unboundid" mode, replace `runtime apachedsDependencies` with `compile "com.unboundid:unboundid-ldapsdk"` in the gradle file.
Then, remove `ldif="classpath:users.ldif"` from the `s:ldap-server` element.
The integration tests will fail.
### Summary

The documentation section  "\<ldap-server\> Attributes" describes the default LDIF file resource as "classpath*:*.ldiff", and gives the example "classpath:init.ldiff".

Both have an incorrect extension. 
They should instead be  "classpath*:*.ldif" and  "classpath:init.ldif" respectively.


Related to #7712 - just the reactive equivalent