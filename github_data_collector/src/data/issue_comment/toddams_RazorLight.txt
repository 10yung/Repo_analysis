â€¦ an Assembly as the Assembly name isn't always the same as the namespace (it was the same in the unit tests that's why it worked there).

This change requires that projects that has the same namespace as the project name has to have the full namespace passed into the root namespace, I have updated the affected unit tests.
When I'm using the constructor of `EmbeddedRazorProjectItem` it's setting the template key to assembly.GetName().Name, which will not include the namespace. So the embedded views aren't found, and there's no way to override it.

I believe the issue is in this line:
https://github.com/toddams/RazorLight/blob/744f545227083f17c63bcdef989bd5c2017ef53b/src/RazorLight/Razor/EmbeddedRazorProjectItem.cs#L23

There is also an issue that both the RootNamespace and Assembly properties that are exposed in the class have the setter exposed, but changing them won't do anything, the `fullTemplateKey` is only set in the constructor.

Suggested fixes:
1. Fix the constructor that takes an assembly so the full namespace is included, or require the root namespace to be specified (and overriding the full key)
2. Either remove the settings on the properties, or implement it properly so setting them will change the `fullTemplateKey`.

This was my suggestion to make the TemplateRenderer stateless to avoid the issues that caused the failure of Layout to be rendered when using await IncludeAsync: https://github.com/toddams/RazorLight/issues/287
I have created a few tests which cover common cases which I frequently use in my projects that leverage Razorlight project which include:

   * IncludeAsync
   * Sections
       - Simple case of one non-required section
       - Case of non-required and required sections
       - Case of section which uses IncludeAsync
       - Case of a nested partial; IncludeAsync being used within a template being rendered with IncludeAsync

Also I added a new dependency for the Tests project which is Snapper to testing the rendered results easier by using snapshot testing.

**Describe the bug**
Since upgrading to the latest version of Razorlight official release (I was using unofficial before) I am experience the issue that sections aren't working anymore. I keep getting the error: ` The name 'section' does not exist in the current context`. 

**To Reproduce**
I am working on a unit test which coverage this breakage

**Expected behavior**

**Information (please complete the following information):**
 - OS: Ubuntu 
 - Platform .net Core 3.0
 - RazorLight version 2.0-beta4
 - Are you using the OFFICIAL RazorLight package? Yes
 - Visual Studio version I am using Rider 2019.3

**Additional context**
I had to upgrade from the unofficial package to the official beta 4 because it has net core 3 support before I was using the .net core 2.2 which worked happilly
The current RazorLight (excellent library, thank you!) supports the Razor 2.2 language syntax. 

With ASP.NET Core 3.0 an updated language syntax and base library 3.0.0 and 3.1.0 have been introduced with `Microsoft.AspNetCore.Razor.Language` - is there any plan to upgrade RazorLight to support this?

Example of new language feature: local functions (a `@Helper` replacement)
```
<div>
@Hello()
</div>

@functions 
{
   void Hello() 
   {
       <p>Hello world</p>
   }
}
```

**Is your feature request related to a problem? Please describe.**
.cshtml files layout pages definitions are enforced to be rooted per site root. For file system configuration, the basic relative access should be supported.

**Describe the solution you'd like**
```
@{
    Layout = "../Layout.cshtml";
}
```
Above layout statement does not work. 

**Additional context**
A solution proposal:
TemplateRenderer.RenderLayoutAsync calls _engineHandler.CompileTemplateAsync
with a single parameter. A second parameter can be added to this call in order to give the relative information from the previousPage.Layout. Then CompileTemplateAsync function would be able to create relative path.

This proposal requires significant change on a public API. Hence I am not creating a PR.



After analyzing the open (and closed) issues for RazorLight, they really fall into two categories:

* Wanting to use RazorLight and plain old strings to HTML use case
* Wanting to use RazorLight in some deployment scenario we didn't think of

I think taking PRs to fix the first issue is straight forward, but to fix the second issue requires detailed understanding of how .NET Core / .NET Framework "links" dependencies.  The FAQ tries to help dummy some of this stuff down, but in reality, I don't even know all the permutations (_I doubt Microsoft does either!_), hence why I've pinned #299 as a key issue for RazorLight.

Plan is to use Dockerfile to manage the default build pipeline, but then create "Dockerfile overloads" for the various environments we might target.

### Open Questions
#### How should we manage the permutations?
There is no good way to detect specific verison of .NET Framework, and Microsoft doesn't seem interested in tackling such detection as the old .NET Framework is out of the door.  Thus, the following Dockerfile conventions while robust might be unrealistic to get right:

```
net48.Wpf.Dockerfile
net472.Wpf.Dockerfile
net461.Wpf.Dockerfile
net48.Console.Dockerfile
net472.Console.Dockerfile
net461.Console.Dockerfile
```
A simpler approach might be to simply have:
```
netFramework.Wpf.Dockerfile
netFramework.Console.Docker
```
etc...
I am trying to follow this tutorial as i want to inject in my layout file. https://github.com/toddams/RazorLight/wiki/ASP.NET-MVC-Core-integration, but when i try to add razorLight in my startup file i get this error
"Reference to type 'IEngineConfiguration' claims it is defined in 'RazorLight', but it could not be found."


I have an layout file (this is the file i want to inject) that looks like this:
`<head><style>some style</style><head>`
`<body>`
`   <div id="content">@RenderBody()</div>`
`</body>`

My template is like this:
`@{ Layout = layoutfile}`
`<table>`
`   content for table`
`</table>`

I have downloaded razorlight.MVC and using it in Startup file like this, but then i get the error.
![image](https://user-images.githubusercontent.com/26963478/71069980-23e29500-217a-11ea-9cdc-43fc3a6bc971.png)


@toddams It seems OrchardCMS has defined a build matrix explaining some of the ways they configure things: https://github.com/OrchardCMS/OrchardCore/issues/1156#issuecomment-351590087

Their scenario is similar, in that they support non Razor.

This might be a rabbit trail but my thought is there are a bunch of different knobs we're turning to get RazorLight to work right, all for difference reasons.