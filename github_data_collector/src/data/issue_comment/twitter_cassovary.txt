The readme run example is incorrect. Fixing the naming.
Looks like last commit was in 2016.  Is this project still active?  Superseded by some other project?
If we look at the Node API, we have:

`def randomOutboundNodeSet(numResults: Int, rnd: Random): Seq[Int]`:
https://github.com/twitter/cassovary/blob/master/cassovary-core/src/main/scala/com/twitter/cassovary/graph/Node.scala#L123

`def outboundNodes(): CSeq[Int]`:
https://github.com/twitter/cassovary/blob/master/cassovary-core/src/main/scala/com/twitter/cassovary/graph/Node.scala#L89

Note that one returns a `CSeq` and the other returns a `Seq`. Should this be made consistent?
Hello, I'd like to experiment cassovary, but I need a property graph in which properties would be used during traversals -- am I on the right track?

I may have not read the documentation mentioning this case, if any, so sorry if it's a RTFM :-)

Thanks
andy

Similar to #214 

Would be fun to implement Giraph (e.g., Pregel) API on top of Cassovary - once again, testing scale up vs. scale out.

Might be fun to try and implement the GraphX API on Cassovary. Then we can compare scale up vs. scale out.

We should rename Node to Vertex in the API. Two main reasons:
1. Vertex makes you sound smarter... :)
2. If we want to start playing with partitioning, we want to reserve "Node" for logical/physical machine nodes, so `getNode` and `getVertex` can be easily disambiguated.

Just like there's a Spark shell for interactively playing around, we should write a Cassovary shell that support interactive manipulation of the graphs. I've started prototyping something in my clone, under `repl` branch.

Better yet, instead of the current server, we should have a backend server process that loads a potentially large graph, and multiple frontend shells can connect to it and access the graph. We could use the same mechanism that Spark uses for serializing closures for execution on the backend.

Thoughts?

Refactor to not have a dependency on finagle-stats. Causes problems like in #209 plus it is not a great idea to have metrics / stats be done inside the core of the library.

Is there any update to the issue #180?

I have code which depends on `"com.twitter" %% "cassovary-core" % "6.3.0"` and when I try to compile it or do `sbt update`, I get unresolved dependency 
`com.twitter.common#metrics;0.0.37: not found`

I think in the past retrying has worked, but I just tried three times and all tries failed.  I also hit this bug a few months ago when I tried to help another PhD student use my code, and I didn't know how to fix the problem then (I think retries eventually worked).  Is there a work-around?  Which part of cassovary needs finagle-stats, and would make sense to move that out of cassovary-core?

Thanks!
