## Issue
Often bots need to:
- Check if a person is part of a particular conversation
- Gain additional information about a person in a conversation when the bot only has an ID

Right now the only way to handle this is to retrieve the entire set of members for the conversation, then search through them for the person you're looking for. For large teams (particularly for Teams teams in excess of 20k) this becomes prohibitively expensive.

## Proposed change
**Preferred implementation**
Add a GET call to this endpoint:

/v3/conversations/{conversationId}/members/{memberId}

Where ID is one of (below is specific to the Teams channel, not sure if the format of the ID is relevant for the core SDK):

- Encrypted user MRI (29:)
- Unencrypted user MRI (8:orgid:)
-	AAD object id (GUID)
-	UPN (mostly it's email)

**Potential alternative implementation**
Allow the below endpoint to be filtered (not sure if any actual work would be necessary for this option?)

GET /v3/conversations/{conversationId}/activities/{activityId}/members

with something like ?id=<id>. I'm not sure if it would make sense in this instance to distinguish between the various types of valid IDs.

## Component Impact 


## Customer Impact 
The ability to lookup a single member of a conversation is necessary for large teams in the Teams channel. This will impact all Teams bots that expect to operate in such a team.

## Tracking Status
**Dotnet SDK**
- [ ] PR
- [ ] Merged

**Javascript SDK**
- [ ] PR
- [ ] Merged

**Java SDK**
- [ ] PR
- [ ] Merged

**Python SDK**
- [ ] PR
- [ ] Merged

**Emulator**
- [ ] PR
- [ ] Merged

**Samples**
- [ ] PR
- [ ] Merged


**Docs**
- [ ] PR
- [ ] Merged


**Tools**
- [ ] PR
- [ ] Merged

[dcr]

Hello!
IÂ´m using bot framework v4.7.1 and built a facebook messenger bot.
The problem is, that suddenly my bot is not persisting the userprofile states anymore.

After I modified the data I save it as follows:

```
public override async Task OnTurnAsync(ITurnContext turnContext, CancellationToken cancellationToken = default(CancellationToken))
        {
            await base.OnTurnAsync(turnContext, cancellationToken).ConfigureAwait(false);

            await conversationState.SaveChangesAsync(turnContext, true, cancellationToken).ConfigureAwait(false);
            await userState.SaveChangesAsync(turnContext, true, cancellationToken).ConfigureAwait(false);
        }
```

Well, after that the file that is being generated on my Azure Blob Storage is truely a null storage:
```
{ 
"$type":"System.Collections.Concurrent.ConcurrentDictionary`2[[System.String, System.Private.CoreLib],[System.Object, System.Private.CoreLib]], System.Collections.Concurrent",
"UserProfile":{ 
"$type":"Microsoft.BotBuilderSamples.Models.UserProfile, Facebook-Events-Bot",
"MessageFlowType":0,
"OtherQuestionMessage":null,
"InsuranceCompanyName":null,
"YearOfSignContract":null,
"IsActiveOrCanceled":null,
"FavourOfPhoneTime":null,
"PhoneNumber":null,
"CurrentStep":null,
"CustomerServiceBotPerson":null,
"ExpertNameBotPerson":null,
"WasOptin":false,
"FacebookProfile":null
}
}
```

The bot is saving nothing, and I can't explain it, no exceptions, no errors or strange events in ApplicationInsights. 

## This is not for asking questions or filing bugs

To get help with an issue with your bot
* ["How To"](https://stackoverflow.com/help/how-to-ask) questions should be submitted on [Stack Overflow](https://stackoverflow.com/questions/tagged/botframework) where there is a robust community to help you

To file an issue against a component please go to the components repo
* [Create Azure Bot Framework Service or Channel issue](https://github.com/Microsoft/botframework-services/issues/new/choose)
* [Create Bot Builder Tools issue](https://github.com/Microsoft/botbuilder-tools/issues/new/choose)
* [Create Bot Builder SDK V3 (.NET or Javascript) issue](https://github.com/Microsoft/botbuilder-V3/issues/new/choose)
* [Create Bot Builder SDK V4 .NET issue](https://github.com/Microsoft/botbuilder-dotnet/issues/new/choose)
* [Create Bot Builder SDK V4 Javascript issue](https://github.com/Microsoft/botbuilder-js/issues/new/choose)
* [Create Bot Builder SDK V4 Java issue](https://github.com/Microsoft/botbuilder-java/issues/new/choose)
* [Create Bot Builder SDK V4 Python issue](https://github.com/Microsoft/botbuilder-python/issues/new/choose)

Directline/Web Chatbot generated ARM Template adds Channels that cause an error when redeploying from Azure CLI to a new resource group.

![image](https://user-images.githubusercontent.com/2498998/72460918-9f882f80-3782-11ea-96dc-16542bbef601.png)

It looks like the channels in the ARM template are causing an issue:

```json
{
            "type": "Microsoft.BotService/botServices/channels",
            "apiVersion": "2018-07-12",
            "name": "[concat(parameters('botServices_chatbot_name'), '/DirectLineChannel')]",
            "location": "global",
            "dependsOn": [
                "[resourceId('Microsoft.BotService/botServices', parameters('botServices_chatbot_name'))]"
            ],
            "properties": {}
        },
        {
            "type": "Microsoft.BotService/botServices/channels",
            "apiVersion": "2018-07-12",
            "name": "[concat(parameters('botServices_chatbot_name'), '/WebChatChannel')]",
            "location": "global",
            "dependsOn": [
                "[resourceId('Microsoft.BotService/botServices', parameters('botServices_chatbot_name'))]"
            ],
            "properties": {}
        },
```


Hi all,

This is stemming from one previous issue I posted regarding how to get Chat Logs from a ChatBot conversation (as in where does the conversation end, when does a client leave from the convo, what is the human user sending to the bot, etc..)

I know now that I require Telemetry insights for the bot, but following this link:
https://docs.microsoft.com/en-us/azure/bot-service/bot-builder-telemetry?view=azure-bot-service-4.0#visualizing-your-telemetry-data-in-application-insights

it is all done in C#.
The bot I have developed using Bot Framework is using node.js. Is there any instructions/samples on how to add these insights via node.js?

Please let me know! This will be helpful
## Issue
The WebApp bots created via the Azure CLI already have the webSocket code, but the setting `"webSocketsEnabled"` on the AppService is not configured.

## Proposed change
Update ARM templates in Azure CLI with same changes as per this commit: https://github.com/microsoft/BotBuilder-Samples/commit/5d9b26b25a56d8875701a047c71aee6e056e3afc.

Hi,

Quick question regarding a future project.
Is it possible to have an option with the dialog of the ChatBot to hand off the existing state of the conversation to an actual human - connected via Cisco UCCX? 


## Issue

(Including @swagatmishra2007. We talked about this offline. But I believe this is less likely to require a fix on the channel side.)

> This is a problem because the combination of SDK and Direct Line channel. It may not apply to other channels.

> Client = DLJS, Web Chat, or any ABS clients

Today's characteristics:

- Activities could arrive at the client at pseudo-random order
   - Given U1 is the activity from user, B1 and B2 is the first and second activity from bot
   - Sending U1 to the bot, the bot will reply with B1 and B2
   - The order of activity arrive at the client, most of the time, it is: B1, B2, U1
      - User is expected to perceive it as U1, B1, B2, instead.
   - Sometimes, it can be a bit random due to polling
   - To support transcript-based client, the client need some knowledge to reorder the activities
- Direct Line channel will put a timestamp on the user message and echo it back to the client
   - This is considered as read receipt
- Web Chat use this timestamp to sort messages

The problem is:

- The timestamp for bot activity can be random because Direct Line channel is on a server farm, B1 and B2 could have a timestamp that would reorder into B2 then B1
- Same for user activity
- We cannot timestamp on the client side because the client has no knowledge of the real order of the activities
   - We know B1 and B2 is a reply of U1
   - We don't know B1 is before B2

## Proposed change

We could timestamp both bot and user activities on bot side. Since U1, B1, B2 should be processed on the same box. This will make the timestamp for all these activities more "trueful".

For proactive messages, I think it is fair to say the timestamp may be slightly off because of its distributed nature. Given B3P is a proactive message, it will have very slight chance to make B3P chronologically appear before B1 and B2.

## Component Impact 

(Requires devs input)

## Customer Impact 

Web Chat.

If both the bot and user send activities to each other very rapidly, the out-of-order behavior can be observed.

## Tracking Status
**Dotnet SDK**
- [ ] PR
- [ ] Merged

**Javascript SDK**
- [ ] PR
- [ ] Merged

**Java SDK**
- [ ] PR
- [ ] Merged

**Python SDK**
- [ ] PR
- [ ] Merged

**Emulator**
- [ ] PR
- [ ] Merged

**Samples**
- [ ] PR
- [ ] Merged


**Docs**
- [ ] PR
- [ ] Merged


**Tools**
- [ ] PR
- [ ] Merged

[dcr]

Relates to #5592 

This PR is a preview for the skill manifest schema 2.1. It includes the follow changes:

- Adds a dispatchModels property for defining lu modes and intent mappings to activities.
- Adds a activitiesSent property for defining proactive messages that can be sent by a bot

To review, the easiest thing is to probably look at [the sample](https://github.com/microsoft/botframework-sdk/blob/gabog/SkillSchema21/schemas/skills/samples/complex-skillmanifest-2.1.preview-0.json) and see if that meets your needs. 

You can also check the schema and descriptions for each new property.

Please review and provide any comments. 
## Issue
The README.md has not been updated (says the current version is 4.5, and that 4.6 is in preview)

## Proposed change
Update to reflect the current version. Might make sense to wait until 4.7 at this point.

## Tracking Status
**Dotnet SDK**
- [ ] PR
- [ ] Merged

**Javascript SDK**
- [ ] PR
- [ ] Merged

**Java SDK**
- [ ] PR
- [ ] Merged

**Python SDK**
- [ ] PR
- [ ] Merged

**Emulator**
- [ ] PR
- [ ] Merged

**Samples**
- [ ] PR
- [ ] Merged


**Docs**
- [ ] PR
- [ ] Merged


**Tools**
- [ ] PR
- [ ] Merged

[dcr]
