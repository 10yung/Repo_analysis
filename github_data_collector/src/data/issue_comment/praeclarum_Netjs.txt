Included Items:

- Fix minor typos
- Fix header hyperlinks
- Add details regarding WebAssembly/Mono as a modern alternative to portability
- Add additional limitations
This PR adds functionality that was previously not present in the TypeScript BCL implementation.
Currently generated code and mscorlib assume they will be used as "internal modules", which is nowadays discouraged / hard to use in new Typescript code:
- reference to mscorlib is done through ///<reference path='mscorlib.ts' />
- generated classes are not exported

Such modules seems to be impossible to consume using "import" statements.
It would be nice to have an command line switch to make the generated code export its classes. Ideally mscorlib should albo be exporting its classes (and then generated code would consume them by importing them first), but that would break compatibility with old generated code, which uses ///<reference.. to mscorlib.
Looks like the only way to include mscorlib.ts into a project is to download it from github and then add it as part of my project's source code.
I would rather have it as dependency, e.g. add a versioned package to npm's package.json and make it land in node_modules/netjs/

This might have some implications on how it's referenced from generated code though
TypeScript handles compatibility

If you think about .net scope, it follows the let keyword scope, and not the functional scope of var
When compiling a C#-dll, in which Generics are used for accessing (for example) an object's properties, the tsc-Compiler throws an error for the generated ts-file.

In my case, this happened for using an `Optional` in C#, which looked like this

`Optional<DateTime>.None`

and looked like this in the ts-file

`Optional<DateTime>.None`

which couldn't be compiled by tsc.

It should compile to `Option.None` to work.
This looks neat! I see the example of using the Person class from js, but can you monkey around with the dom directly from C#? Or is that not the point of the project?
I want to use NetJS to have some shared code between my typescript and csharp codebase. I am however using --strictNullChecks in typescript 2.0 and would like to keep using that.

netjs generates "AddIntegrationRequest: string = null;" for fields, while for typescript 2.0 this should be 
"AddIntegrationRequest: (string | null) = null;"

I already fixed these errors manually for the mscorlib.ts, but i cannot do this for the generated code easily.

Is there some  workaround for this problem or a plan to solve?