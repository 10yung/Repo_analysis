I am trying to run fuzix on z80pack

Here is how i created the disk images:

`dd if=bootblock.bin of=drivea.cpm conv=notrunc`
`dd if=fuzix.bin of=drivea.cpm bs=1 seek=193024 conv=notrunc`

`./build-mini-filesystem  drivei.cpm 64 2880`

and here is the output of ./cpmsim:

`FUZIX version 0.4pre1`
`Copyright (c) 1988-2002 by H.F.Bower, D.Braun, S.Nitschke, H.Peraza`
`Copyright (c) 1997-2001 by Arcady Schekochikhin, Adriano C. R. da Cunha1`
`Copyright (c) 2013-2015 Will Sowerbutts <will@sowerbutts.com>`
`Copyright (c) 2014-2019 Alan Cox <alan@etchedpixels.co.uk>`
`Devboot`
`484kB total RAM, 420kB available to processes (15 processes max)`
`Enabling interrupts ... ok.`
`bootdev: 0`
`Mounting root fs (root_dev=0, ro): OK`
`Starting /init`
`init version 0.9.0ac#1`
`Checking root file system.`
`0049_switchin: FAIL`

`panic: MMU trap/bad stack`
`Op-code trap at c916 ed 81`

Am I doing something wrong?
I'm getting some build errors on platform-sc126, looks like it's missing LOADFIRST and ROTATE definitions. I can try the definitions from `platform-rc2014/kernel.def`, but not sure the I/O bits are compatible.

BTW, this for trying out FUZIX on an SC130, which has no LEDs (shrug), but also no built-in RTC. Will this be an issue? As far as I can tell, ds1302.asm will check for presence of the chip on I2C.
The presence of a tab character seems to confuse vi's rendering.

Steps to reproduce: run vi, enter insert mode (i), type a single tab, and then start typing a sentence. Half the letters are missing.

It is presumably unaware that a tab is 8 spaces, although I don't quite have a mental model that explains why half the letters show up and the other half don't.
I've tried to boot zx+3-boot-0.3.dsk on the real ZX Spectrum +3e (Garry Lancaster's ROM v1.43) with ZXMMC interface and 4GB MMC storage installed. Unfortunately, after a while of reading from floppy it stops with usual "Insert tape and press PLAY" message. I have no problem with booting ZX CP/M 2.2, CP/M Plus or my own forever-work-in-progress OS from the same floppy drive. Strangely, I can boot the same image on Fuse emulator with the same +3e (v1.43) ROM installed, yet it ends at "no card found" messages with "bootdev:" prompt (note that emulation of ZXMMC, although it can be enabled in Fuse, it never worked for me).
I wonder, do I need to install some files on the MMC card before I boot 0.3 disk image? Currently I have Workbench +3e installed and as I found it cool (especially with its use of Kempston mouse), I want to still have it there in workable state.

On some platforms map_* need to know if they must force interrupts off and back on. Right now we call the map_save before we set the int_disabled flag correctly.

For 0.3 workarounds are done. For 0.4 we need to bite the bullet verify all the platforms have the int_disabled in the right segments and fix it for both Z80 and banked Z80. Non Z80 related platforms do it differently so should be ok.

At the moment we have a single scroll routine for full screen scroll. For most platforms it is almost no code to support passing a start, length pair for the scrolls.

There are a tiny number of exceptions where we do hardware scroll and for those we'd need new paths.

The same routines also give us insert line (scroll down current line to bottom) and delete line (scroll up current line to bottom)

That would make a big difference for editors and some other applications.

a set of fixes for yaz180:

- ensure ram is mapped in contiguous banks
- match config to physical RAM
- a bit of tidying on the way through
A botched inittab respawn line bogs the system down to 0.  Is there room in init to squeeze a "respawning too fast" failsafe? Or can we pass a -s on init's commandline?
From inspection it appears we have paths where we update the atime and write it back even though the timestamp has not changed.

Provide a way to set a file system to 'noatime', set an inode c_flags for it and catch it in setftime.

