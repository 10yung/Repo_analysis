Suggesting 'production' as alias for new instance could be misleading. Better is to use web01
â€¦ded globally anymore.  Having rubber here also causes problems for folks using git/unreleased versions of rubber
Hi, I'm using rubber - 2.12.2. At the end of the deploy, it tries to restart apache. And it appears to succeed. But then the server remains down and I'll need to run `rubber:apache:start` separately to get it back up again. 

here is the log of the deploy with relevant bits - 

```
    command finished in 1002ms
  * 2017-10-20 16:53:26 executing `rubber:apache:reload'
  * 2017-10-20 16:53:26 executing `rubber:apache:serial_reload'
  * 2017-10-20 16:53:26 executing `rubber:apache:_serial_task_serial_reload_production-app01'
  * executing "sudo -p 'sudo password: '  bash -l -c 'if ! ps ax | grep -v grep | grep -c apache2 &> /dev/null; then service apache2 start; else service apache2 reload; fi'"
    servers: ["production-app01.foo.com"]
    [production-app01.foo.com] executing command
 ** [out :: production-app01.foo.com] * Reloading web server config apache2
 ** [out :: production-app01.foo.com]                                  
 ** [out :: production-app01.foo.com] 
 ** [out :: production-app01.foo.com] 
 ** [out :: production-app01.foo.com]                            
 ** [out :: production-app01.foo.com] [ OK ]
    command finished in 1581ms
  * 2017-10-20 16:53:28 executing `rubber:apache:_serial_task_serial_reload_production-app03'
  * executing "sudo -p 'sudo password: '  bash -l -c 'if ! ps ax | grep -v grep | grep -c apache2 &> /dev/null; then service apache2 start; else service apache2 reload; fi'"
    servers: ["production-app03.foo.com"]
    [production-app03.foo.com] executing command
 ** [out :: production-app03.foo.com] * Reloading web server config apache2
 ** [out :: production-app03.foo.com]                                  
 ** [out :: production-app03.foo.com] 
 ** [out :: production-app03.foo.com] 
 ** [out :: production-app03.foo.com]                            
 ** [out :: production-app03.foo.com] [ OK ]
    command finished in 1653ms
  * 2017-10-20 16:53:29 executing `rubber:post_restart'
    triggering after callbacks for `rubber:post_restart'
  * 2017-10-20 16:53:29 executing `rubber:monit:start'
  * executing multiple commands in parallel
    -> "else" :: "sudo -p 'sudo password: '  bash -l -c 'service monit status || service monit start'"
    -> "else" :: "sudo -p 'sudo password: '  bash -l -c 'service monit status || service monit start'"
    servers: ["production-app01.foo.com", "production-app03.foo.com"]
    [production-app01.foo.com] executing command
    [production-app03.foo.com] executing command
 ** [out :: production-app03.foo.com] * monit is not running
 ** [out :: production-app03.foo.com] Please, use START variable in /etc/default/monit
 ** [out :: production-app03.foo.com] to enable/disable monit startup.
 ** [out :: production-app03.foo.com] * Starting daemon monitor monit
 ** [out :: production-app01.foo.com] * monit is not running
 ** [out :: production-app03.foo.com]                                  
 ** [out :: production-app03.foo.com] 
 ** [out :: production-app01.foo.com] Please, use START variable in /etc/default/monit
 ** [out :: production-app01.foo.com] to enable/disable monit startup.
 ** [out :: production-app03.foo.com] 
 ** [out :: production-app03.foo.com]                            
 ** [out :: production-app03.foo.com] [ OK ]
 ** [out :: production-app01.foo.com] * Starting daemon monitor monit
 ** [out :: production-app01.foo.com]                                  
 ** [out :: production-app01.foo.com] 
 ** [out :: production-app01.foo.com] 
 ** [out :: production-app01.foo.com]                            
 ** [out :: production-app01.foo.com] [ OK ]
    command finished in 1292ms
    triggering after callbacks for `deploy'
  * 2017-10-20 16:53:31 executing `cleanup'
  * executing multiple commands in parallel
```

Let me know if I need to provide any more debugging details :)


`cap rubber:bootstrap`
failed: "/bin/bash -l -c 'sudo -p '\\''sudo password: '\\''  bash -l /tmp/enable_multiverse'"

After ssh, I run below command manully at server:
`sudo -p '\\''sudo password: '\\''  bash -l /tmp/enable_multiverse`
/tmp/enable_multiverse: line 3: /etc/apt/sources.list.d/rubber-multiverse-source.list: No such file or directory
cat: /etc/apt/sources.list: No such file or directory

**Rubber Template**
`$ rubber vulcanize complete_passenger_nginx`

**AWS Image details**
    image_type: t2.micro
    image_id: ami-c58c1dd3

**Since machines are region specific, you can use below region:**
region: us-east-1
Hi, I'm trying to deploy to new droplet on Digital Ocean and running into the following notice about a deprecated APIv1. 

```shell
:~/dev/openbound rebrand-openbound * $ cap rubber:create
    triggering load callbacks
  * 2017-02-28 09:22:49 executing `rubber:init'
  * 2017-02-28 09:22:50 executing `rubber:create'
Instance alias (e.g. web01 or web01~web05,web09): web01
Instance roles (e.g. web,app,db:primary=true): web,app,db:primary=true
 ** Creating instance 14.04 x64/512MB/openbound_production_default,openbound_production_web/New York 2
/Users/ia/.rvm/gems/ruby-2.2.2@rstacks_production/gems/excon-0.45.4/lib/excon/middlewares/expects.rb:6:in `response_call': Expected([200]) <=> Actual(410 Gone) (Excon::Errors::Gone)
excon.error.response
  :body          => "{\"status\":\"ERROR\",\"error_message\":\"API v1 has reached end-of-life. Please use API v2.\",\"message\":\"API v1 has reached end-of-life. Please use API v2.\"}"
  :headers       => {
    "CF-RAY"                 => "338278c33e5d46f8-EWR"
    "Cache-Control"          => "no-cache"
    "Connection"             => "keep-alive"
    "Content-Length"         => "150"
    "Content-Type"           => "application/json; charset=utf-8"
    "Date"                   => "Tue, 28 Feb 2017 08:22:57 GMT"
    "Server"                 => "cloudflare-nginx"
    "Set-Cookie"             => "__cfduid=d994f8f07582d29024fb071fb2eead6091488270177; expires=Wed, 28-Feb-18 08:22:57 GMT; path=/; domain=.digitalocean.com; HttpOnly"
    "X-Content-Type-Options" => "nosniff"
    "X-Frame-Options"        => "SAMEORIGIN"
    "X-Gateway"              => "Edge Gateway"
    "X-Request-Id"           => "1ec1de07-c442-45bc-898c-a98c7e43e8a2"
    "X-Runtime"              => "0.086849"
    "X-Xss-Protection"       => "1; mode=block"
  }
  :local_address => "10.40.87.170"
  :local_port    => 52492
  :reason_phrase => "Gone"
  :remote_ip     => "104.16.25.4"
  :status        => 410
  :status_line   => "HTTP/1.1 410 Gone\r\n"
	from /Users/ia/.rvm/gems/ruby-2.2.2@rstacks_production/gems/excon-0.45.4/lib/excon/middlewares/response_parser.rb:8:in `response_call'
	from /Users/ia/.rvm/gems/ruby-2.2.2@rstacks_production/gems/excon-0.45.4/lib/excon/connection.rb:372:in `response'
	from /Users/ia/.rvm/gems/ruby-2.2.2@rstacks_production/gems/excon-0.45.4/lib/excon/connection.rb:236:in `request'
	from /Users/ia/.rvm/gems/ruby-2.2.2@rstacks_production/gems/fog-core-1.32.1/lib/fog/core/connection.rb:81:in `request'
	from /Users/ia/.rvm/gems/ruby-2.2.2@rstacks_production/gems/fog-xml-0.1.2/lib/fog/xml/connection.rb:9:in `request'
	from /Users/ia/.rvm/gems/ruby-2.2.2@rstacks_production/gems/fog-1.35.0/lib/fog/digitalocean/compute.rb:88:in `block in request'
	from /Users/ia/.rvm/gems/ruby-2.2.2@rstacks_production/gems/fog-1.35.0/lib/fog/digitalocean/compute.rb:115:in `retry_event_lock'
	from /Users/ia/.rvm/gems/ruby-2.2.2@rstacks_production/gems/fog-1.35.0/lib/fog/digitalocean/compute.rb:88:in `request'
	from /Users/ia/.rvm/gems/ruby-2.2.2@rstacks_production/gems/fog-1.35.0/lib/fog/digitalocean/requests/compute/list_regions.rb:6:in `list_regions'
	from /Users/ia/.rvm/gems/ruby-2.2.2@rstacks_production/gems/fog-1.35.0/lib/fog/digitalocean/models/compute/regions.rb:11:in `all'
	from /Users/ia/.rvm/gems/ruby-2.2.2@rstacks_production/gems/fog-core-1.32.1/lib/fog/core/collection.rb:113:in `lazy_load'
	from /Users/ia/.rvm/gems/ruby-2.2.2@rstacks_production/gems/fog-core-1.32.1/lib/fog/core/collection.rb:17:in `each'
	from /Users/ia/.rvm/gems/ruby-2.2.2@rstacks_production/gems/rubber-3.1.0/lib/rubber/cloud/digital_ocean.rb:37:in `find'
	from /Users/ia/.rvm/gems/ruby-2.2.2@rstacks_production/gems/rubber-3.1.0/lib/rubber/cloud/digital_ocean.rb:37:in `create_instance'
	from /Users/ia/.rvm/gems/ruby-2.2.2@rstacks_production/gems/rubber-3.1.0/lib/rubber/thread_safe_proxy.rb:13:in `method_missing'
	from /Users/ia/.rvm/gems/ruby-2.2.2@rstacks_production/gems/rubber-3.1.0/lib/rubber/recipes/rubber/instances.rb:312:in `create_instance'
	from /Users/ia/.rvm/gems/ruby-2.2.2@rstacks_production/gems/rubber-3.1.0/lib/rubber/recipes/rubber/instances.rb:230:in `block (2 levels) in create_instances'
```

Using `gem 'rubber', '3.1.0'`
I have a hardened instance with IPtables rules.
The keyserver should use port 80 (which is more alowed)
https://github.com/rubber/rubber/blob/03141a362b026ef120931bcdeeef2af7e9087f3a/templates/passenger_nginx/config/rubber/deploy-passenger_nginx.rb#L10

 apt-key adv --keyserver keyserver.ubuntu.com:80 --recv-keys 561F9B9CAC40B2F7

OR: add a list of ports that must be opened (in certain stages) bootstrap, deploy, etc.
I'm trying to break apart our single installation into different servers. The first is a new database server. We are on DigitalOcean.
Using Ubuntu 14.04.5 (I know that 16 is not working in Rubber it seems) I do
ALIAS=db01 ROLES=db:primary=true, mysql_master,monit cap rubber:create

But things fail on bootstrap, trying to install mysql, or more accurately, reconfigure mysql.
`failed: "/bin/bash -l -c 'sudo -p '\\''sudo password: '\\''  bash -l /tmp/reconfigure-mysql'" on zmdb1.xxxx.com`

It seems the install of mysql is not right. It won't start.

We're on the Master branch of rubber.

We're deep in the doo doo now, as we had banked on rubber being able to spin up new servers for us. Help!

These templates make two new roles available:

`filebeat`
`filebeat_logz`

The later role only installs the logz.io TLS certificates 
Hello Kevin and rubber crew!

We have started using Filebeat along with logz.io and the logstasher gem for consolidated, awesome logging :)  I want to integrate this into our Rubber environment and I'd like to do it the correct way so that we can add the template to this repo when were done (via a PR of course).

My main question is: can we do a custom template that DOESN'T use a apt package?  We have a current setup script which does the following installation:
```
curl -L -O https://artifacts.elastic.co/downloads/beats/filebeat/filebeat-5.0.2-amd64.deb
sudo dpkg -i filebeat-5.0.2-amd64.deb
wget https://raw.githubusercontent.com/cloudflare/cfssl_trust/master/intermediate_ca/COMODORSADomainValidationSecureServerCA.crt
sudo mkdir -p /etc/pki/tls/certs
sudo cp COMODORSADomainValidationSecureServerCA.crt /etc/pki/tls/certs/
```
and then we have monit files and a custom `filebeat.yml` file which which can easily be created with a `config/rubber/filebeat/` files.    But using something OTHER than a package for the main template (i.e.: `rubber-filebeat.yml`) has me a bit confused.  Please let me know how to proceed.

Thanks!
