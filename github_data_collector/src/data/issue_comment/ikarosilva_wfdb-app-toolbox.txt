I tried both examples of wrann function. but , no .test was generated in current directory. 
Help me
`>> wfdbdemo
Reading samples ECG signal from MIT-BIH Arrhythmia Database
Reference to non-existent field 'WFDB_CUSTOMLIB'.

Error in getWfdbClass (line 34)
javaWfdbExec=javaObject('org.physionet.wfdb.Wfdbexec',commandName,config.WFDB_CUSTOMLIB);

Error in rdsamp (line 87)
    [javaWfdbExec,config]=getWfdbClass('rdsamp');

Error in wfdbdemo (line 12)
[tm,ecg]=rdsamp('mitdb/100',1,N);`
rdann.m adds 1 to chan number, to comply with Matlab's 1-based indexing, but wrann.m does not subtract 1 to revert back to 0-based indexing.

A fix could be to modify line 145 of wrann.m:
chan = num2chararray(chan-1, 'chan', N);
First, ensure that 'make check' will actually exit with non-zero
status if any of the tests fail.

Second, add a rule for quickly running a single unit test.

If standard error is connected to a pipe and nobody reads from the
pipe, bad stuff happens.
Currently, standard error output is ignored, so this option is doing
nothing except slowing things down and causing the program to freeze
when the pipe buffer fills up.
This has some security fixes:
https://curl.haxx.se/docs/CVE-2018-16890.html
https://curl.haxx.se/docs/CVE-2019-3822.html
Long record names are not parsed properly by `ecgpuwave` resulting in failed annotations. I have discovered the issue on the PhysioNet [ECGRDVQ](https://www.physionet.org/physiobank/database/ecgrdvq/) database, where the record names have a form **XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX.<dat/hea>** that is also prepended by the path name of **ecgrdvq/raw/10[01-22]**.

To reproduce:

run `ecgpuwave` on the 1st record in the ecgrdvq database by:

```
ecgpuwave('ecgrdvq/raw/1001/00ed2097-cd14-4f03-ab33-853da5be5550','ann')
```

The resulting annotation file is `ecgrdvq/raw/1001/00ed2097-cd14-4?.ann`. Note the question mark **?** in the file name. So, the full file name without the extension and **?** is 32 symbols long. (The non-Matlab (Unix-based) version of `ecgpuwave` returns a similar result.)

I have discovered that the original `ecgpuwave` implementation (Fortran code, found at
<https://www.physionet.org/physiotools/ecgpuwave/src/ecgpuwave-1.3.3/ecgpuwave.f>, ver. 1.3.3) has the line (92):

```
      character*32 arg, f, fname, desc, units
```

which seems to be limiting the length of a record name. Simple change to:

```
      character*64 arg, f, fname, desc, units
```

solves the problem.

P.S. I do not know where to file the issue, as it seems being an issue
for `ecgpuwave` not the toolbox itself. However, there is no issue
tracking system for the original Fortran code of `ecgpuwave`.

Additionally, I could not find any similar issue on other or even the same database, although it seems to be quite easily discoverable (no one annotating ECGRDVQ database ever?).

Another solution would be to rename all the files in this particular database (>5000 records), which is quite unreasonable in this case.

---

GNU Octave, version 3.8.2 on x86_64-redhat-linux-gnu

An updated link to Sassi's webpage in the help of ecgpuwave. The new link is believed to be corresponding to the old one.