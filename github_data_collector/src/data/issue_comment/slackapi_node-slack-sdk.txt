### Description
When I use `web.chat.update()` like below code, the `icon_emoji` and `username` information used in `web.chat.postMessage()` are disappear.

### What type of issue is this? (place an `x` in one of the `[ ]`)
- [x] bug
- [ ] enhancement (feature request)
- [ ] question
- [ ] documentation related
- [ ] testing related
- [ ] discussion

### Requirements (place an `x` in each of the `[ ]`)
* [x] I've read and understood the [Contributing guidelines](https://github.com/slackapi/node-slack-sdk/blob/master/.github/contributing.md) and have done my best effort to follow them.
* [x] I've read and agree to the [Code of Conduct](https://slackhq.github.io/code-of-conduct).
* [x] I've searched for any related issues and avoided creating a duplicate issue.

---

### Bug Report

#### Packages:

Select all that apply:

- [x] `@slack/web-api`
- [ ] `@slack/events-api`
- [ ] `@slack/interactive-messages`
- [ ] `@slack/rtm-api`
- [ ] `@slack/webhooks`
- [ ] I don't know

#### Reproducible in:

package version:
```
    "@slack/web-api": "^5.7.0",
```

node version:
```
v10.18.1
```

OS version(s):
```
macOS Mojave 10.14.6
```

#### Expected result:
The icon_emoji and username information used in postMessage () should be maintained.

#### Actual result:
When I use `web.chat.update()` like below code, the `icon_emoji` and `username` information used in `web.chat.postMessage()` are disappear.

```javascript
import { WebClient } from '@slack/web-api'

const web = new WebClient(group.accessToken)
// object contains the same icon_emoji, username information used in `web.chat.postMessage()`
const arg = { ... }
web.chat.update(arg)
```

On the other hand, if I use `axios` with `response_url` like:

```
axios.post(response_url, arg)
```

It works well.

#### Attachments:
![2020-01-19 21 26 28](https://user-images.githubusercontent.com/15520015/72681799-7fea6180-3b0a-11ea-8bb2-27d697a167e9.gif)

üëç button is handled by `axios`,
üö® button is handled by 'web.chat.update()`

###  Summary

Updating the documentation in preparation for granular bot permissions. Also added a warning for RTM users not to update. 

Related to #938 

### Requirements (place an `x` in each `[ ]`)

* [x] I've read and understood the [Contributing Guidelines](https://github.com/slackapi/node-slack-sdk/blob/master/.github/contributing.md) and have done my best effort to follow them.
* [x] I've read and agree to the [Code of Conduct](https://slackhq.github.io/code-of-conduct).

### Description

If a user creates a new Slack app using the granular permission model, they will not be able to use the RTM API. Also, if a user "updates scopes" of an existing app, they will lose the ability to use the RTM API. This is the situation in #921.

We should call out these situations proactively in the documentation for `@slack/rtm-api`.

### Requirements (place an `x` in each of the `[ ]`)
* [x] I've read and understood the [Contributing guidelines](https://github.com/slackapi/node-slack-sdk/blob/master/.github/contributing.md) and have done my best effort to follow them.
* [x] I've read and agree to the [Code of Conduct](https://slackhq.github.io/code-of-conduct).
* [x] I've searched for any related issues and avoided creating a duplicate issue.

### Description

Describe your issue here.

### What type of issue is this? (place an `x` in one of the `[ ]`)
- [x] bug
- [ ] enhancement (feature request)
- [ ] question
- [ ] documentation related
- [ ] testing related
- [ ] discussion

### Requirements (place an `x` in each of the `[ ]`)
* [x] I've read and understood the [Contributing guidelines](https://github.com/slackapi/node-slack-sdk/blob/master/.github/contributing.md) and have done my best effort to follow them.
* [x] I've read and agree to the [Code of Conduct](https://slackhq.github.io/code-of-conduct).
* [x] I've searched for any related issues and avoided creating a duplicate issue.

---

### Bug Report

Filling out the following details about bugs will help us solve your issue sooner.

#### Packages:

Select all that apply:

- [ ] `@slack/web-api`
- [ ] `@slack/events-api`
- [x] `@slack/interactive-messages`
- [ ] `@slack/rtm-api`
- [ ] `@slack/webhooks`
- [ ] I don't know

#### Reproducible in:

package version: 1.4.0

node version: v12.13.0

OS version(s): Linux Ubuntu 16.04

#### Steps to reproduce:

1. Send an user a message with this blocks:

```[
  {
    "type": "section",
    "text": {
      "type": "mrkdwn",
      "text": "The results of your search are now available"
    },
    "accessory": {
      "type": "button",
      "text": {
        "type": "plain_text",
        "text": "Show my options",
        "emoji": true
      },
      "value": "{searchId}",
      "action_id": "show_search_results"
    }
  }
]
```

2. Pressing the button will produce a payload of this kind:

```
{
  "type": "block_actions",
  "team": {
    "id": "************",
    "domain": "************"
  },
  "user": {
    "id": "************",
    "username": "************",
    "name": "************",
    "team_id": "************"
  },
  "api_app_id": "************",
  "token": "************",
  "container": {
    "type": "message",
    "message_ts": "************",
    "channel_id": "************",
    "is_ephemeral": false
  },
  "trigger_id": "************",
  "channel": {
    "id": "************",
    "name": "directmessage"
  },
  "message": {
    "type": "message",
    "subtype": "bot_message",
    "text": "This+content+can't+be+displayed.",
    "ts": "************",
    "username": "************",
    "bot_id": "************",
    "blocks": [
      {
        "type": "section",
        "block_id": "4Kzy+",
        "text": {
          "type": "mrkdwn",
          "text": "The+results+of+your+search+are+now+available",
          "verbatim": false
        },
        "accessory": {
          "type": "button",
          "action_id": "show-available-options",
          "text": {
            "type": "plain_text",
            "text": "Show+my+options",
            "emoji": true
          },
          "value": "0"
        }
      }
    ]
  },
  "response_url": "https:\/\/hooks.slack.com\/************",
  "actions": [
    {
      "action_id": "show-available-options",
      "block_id": "4Kzy+",
      "text": {
        "type": "plain_text",
        "text": "Show+my+options",
        "emoji": true
      },
      "value": "0",
      "type": "button",
      "action_ts": "************"
    }
  ]
}
```

3. The handler of this action (show-available-options) is not called. Thorough debugging shows that the dispatching process causes an exception in the matchCallback method of adapter.ts (search for SlackMessageAdapter.prototype.matchCallback = function, currently line 418).

4. Wrapping the code inside this.callbacks.find with a try-catch that returns false in case of exception solves the issue.

#### Expected result:

The action handler specified by me for this payload should have been called

#### Actual result:

The payload was processed as valid but was not dispatched to the right handler because of a silent internal exception

#### Attachments:

You can see from the log, the last message printed is "request signing verification success". After that the dispatching process fails.

```
Thu, 19 Dec 2019 10:33:13 GMT express:router dispatching POST /slack/interactions
Thu, 19 Dec 2019 10:33:13 GMT express:router query  : /slack/interactions
Thu, 19 Dec 2019 10:33:13 GMT express:router expressInit  : /slack/interactions
Thu, 19 Dec 2019 10:33:13 GMT express:router initialize  : /slack/interactions
Thu, 19 Dec 2019 10:33:13 GMT express:router trim prefix (/slack/interactions) from url /slack/interactions
Thu, 19 Dec 2019 10:33:13 GMT express:router <anonymous> /slack/interactions : /slack/interactions
2019-12-19T10:33:13.791Z @slack/interactive-messages:http-handler request received - method: POST, path: /
2019-12-19T10:33:13.791Z @slack/interactive-messages:http-handler Parsing raw request
2019-12-19T10:33:13.791Z @slack/interactive-messages:http-handler request signing verification success
```

###  Summary

This is just a new PR for the work by @clavin in https://github.com/slackapi/node-slack-sdk/pull/831. 

I've fixed the issue with `web-api` not generating a model and rebased from master.

Still need to add some info about this process to the readme.

@clavin also had a nice potential enhancement for inline interfaces (nested interfaces?) he would like added which he describes over at https://github.com/slackapi/node-slack-sdk/pull/831#issuecomment-561499414

### Requirements (place an `x` in each `[ ]`)

* [x] I've read and understood the [Contributing Guidelines](https://github.com/slackapi/node-slack-sdk/blob/master/.github/contributing.md) and have done my best effort to follow them.
* [x] I've read and agree to the [Code of Conduct](https://slackhq.github.io/code-of-conduct).

I am creating a service to add and remove bots in slack channels but I'm not receiving any events for member_left_channel.

```
function registerListeners(rtm, slackService) {
    rtm.on('member_joined_channel', async (event) => {
        return await botJoinedChannel(slackService, event)
    });
    rtm.on('member_left_channel', async (event) => {
        console.log(event)
        return await botLeftChannel(slackService, event)
    });
}
```
### Description

While first working with the `@slack/interactive-messages` library and the new Slack App patterns I misunderstood the role of the `callback_id`. Now I understand `callback_id` as a way to uniquely identify which workflow step is sending a given callback to easily route the callbacks to the correct handlers. Originally, however, I thought that the `callback_id` was used to tie together several steps in a workflow so was using the same `callback_id` value for both message actions and view submissions.

Given that there are registration handlers for different types of callback payloads I was surprised when a handler I had registered through the `viewSubmission(...)` method started intercepting `message_action` payloads.

e.g.

- the `action(...)` registration method implies a `"type": "message_action"` constraint;
- the `viewSubmission(...)` registration method implies a `"type": "view_submission"` constraint;

but these implied constraints don't seem to get applied.

### What type of issue is this? (place an `x` in one of the `[ ]`)
- [x] bug
- [ ] enhancement (feature request)
- [ ] question
- [ ] documentation related
- [ ] testing related
- [ ] discussion

### Requirements (place an `x` in each of the `[ ]`)
* [x] I've read and understood the [Contributing guidelines](https://github.com/slackapi/node-slack-sdk/blob/master/.github/contributing.md) and have done my best effort to follow them.
* [x] I've read and agree to the [Code of Conduct](https://slackhq.github.io/code-of-conduct).
* [x] I've searched for any related issues and avoided creating a duplicate issue.

---

### Bug Report

Filling out the following details about bugs will help us solve your issue sooner.

#### Packages:

Select all that apply:

- [ ] `@slack/web-api`
- [ ] `@slack/events-api`
- [x] `@slack/interactive-messages`
- [ ] `@slack/rtm-api`
- [ ] `@slack/webhooks`
- [ ] I don't know

#### Reproducible in:

package version:

- `@slack/interactive-messages@1.4.0`

node version:

- `v10.16.0`

OS version(s):

#### Steps to reproduce:

1. create a slack app and configure a message interaction to send an `order_pizza` callback id
2. create an api using `@slack/interactive-messages@1.4.0` to handle callbacks from this slack app
3. register a `message_action` handler using the `action(...)`
    ```js
    slackInteractions.action({ type: 'message_action': callback_id: 'order_pizza' }, openPizzaOptionsModal);
    ```
    return a view payload to open a modal view with the view `callback_id` set to `order_pizza` (because it's part of the same workflow)

4. initiate the action in the slack app
5. verify that the "Pizza Options" modal dialog opens
7. add a new handler _before_ the action handler (because sometimes scanning folders for files reads and registers `dialogHandlers.js` before `messageHandlers.js`)
    ```js
    slackInteractions.action('order_pizza', pizzaOrderSubmitted);
    ```
8. initiate the action in the slack app

#### Expected result:

- the `openPizzaOptionsModal` handler fires, opening the "Pizza Options" dialog
- on submission of the "Pizza Options" dialog the `pizzaOrderSubmitted` handler fires

#### Actual result:

- the `pizzaOrderSubmitted` handler fires on the initial `message_action`, throws an error because it expects the payload to match the `view_submission` schema
- no dialog gets opened
- the slack user gets no feedback about why clicking on the message action had no effect.


###  Summary

https://github.com/slackapi/node-slack-sdk/issues/922

### Requirements (place an `x` in each `[ ]`)

* [X ] I've read and understood the [Contributing Guidelines](https://github.com/slackapi/node-slack-sdk/blob/master/.github/contributing.md) and have done my best effort to follow them.
* [X ] I've read and agree to the [Code of Conduct](https://slackhq.github.io/code-of-conduct).

###  Summary

There is an imported type from 'http' that doesn't exist. The changes will remove the non-existing import and replaces with the proper types.
Fixes https://github.com/slackapi/node-slack-sdk/issues/872

### Requirements

* [x] I've read and understood the [Contributing Guidelines](https://github.com/slackapi/node-slack-sdk/blob/master/.github/contributing.md) and have done my best effort to follow them.
* [x] I've read and agree to the [Code of Conduct](https://slackhq.github.io/code-of-conduct).
### Description

when installing the library in a typescript project and building it I am getting an error:

Conflicting definitions for 'node' found at '/home/ubuntu/<PROJECT>/node_modules/@slack/webhook/node_modules/@types/node/ts3.2/index.d.ts' and '/home/ubuntu/<PROJECT>/node_modules/@types/node/index.d.ts'. Consider installing a specific version of this library to resolve the conflict.

### What type of issue is this? (place an `x` in one of the `[ ]`)
- [X ] bug
- [ ] enhancement (feature request)
- [ ] question
- [ ] documentation related
- [ ] testing related
- [ ] discussion

### Requirements (place an `x` in each of the `[ ]`)
* [X ] I've read and understood the [Contributing guidelines](https://github.com/slackapi/node-slack-sdk/blob/master/.github/contributing.md) and have done my best effort to follow them.
* [X ] I've read and agree to the [Code of Conduct](https://slackhq.github.io/code-of-conduct).
* [ X] I've searched for any related issues and avoided creating a duplicate issue.

---

### Bug Report

Filling out the following details about bugs will help us solve your issue sooner.

#### Packages:

- [ ] `@slack/web-api`
- [ ] `@slack/events-api`
- [ ] `@slack/interactive-messages`
- [ ] `@slack/rtm-api`
- [ X] `@slack/webhooks`
- [ ] I don't know

#### Reproducible in:

package version: 5.0.2

node version: latest

OS version(s): ubunutu + mac OS-X

#### Steps to reproduce:

1. create a node project
2. npm i @slack/webhook
3. run tsc

#### Expected result:

The project should run

#### Actual result:

The build failed.


#### Attachments:

`Conflicting definitions for 'node' found at '/home/ubuntu/<PROJECT>/node_modules/@slack/webhook/node_modules/@types/node/ts3.2/index.d.ts' and '/home/ubuntu/<PROJECT>/node_modules/@types/node/index.d.ts'. Consider installing a specific version of this library to resolve the conflict.`

When looking into package-lock file or yarn.lock, the requirements for node for the webhooks package are:
```
 "requires": {
        "@types/node": ">=8.9.0"
      }
```

while on most libraries it's:
```
 "requires": {
        "@types/node": "*"
      }
```
