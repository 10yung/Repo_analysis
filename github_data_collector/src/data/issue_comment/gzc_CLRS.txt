problem:  a more complicated but elegant solution that uses no stack but assumes that two point- ers can be tested for equality.

how to solve the other way
you can see Morris Traversal

[Morris Inorder Tree Traversal](https://www.youtube.com/watch?v=wGXB9OWhPTg)
[二叉树的非递归遍历（不用栈、O(1)空间）](https://blog.csdn.net/cyuyanenen/article/details/51620559)
伪代码第一个if判prev == root->parent成立后

缺少prev=root;

当然给出的示例[implementation](https://github.com/gzc/CLRS/blob/master/C10-Elementary-Data-Structures/exercise_code/traversal.cpp)是不缺少的
Give an efficient algorithm for computing the transition function δ for the string-matching automaton corresponding to a given pattern P. Your algorithm should run in time O(m |Σ|). (Hint: Prove that δ(q, a) = δ(π[q], a) if q = m or P[q + 1] ≠ a.)

You can find answer on [根据前缀函数构建一个自动机](https://oi-wiki.org/string/kmp/#_12)  

``` CPP
void compute_transition_function(char P[], vector<char> Sigma)
{
    int m = strlen(P);
    vector<int> pi = compute_prefix_function(P);
    for(int q = 0; q <= m; q++)
        for(int i = 0; i < Sigma.size(); i++)
        {
            char& a = Sigma[i];
            //int k = min(m, q + 1);
            //while(!is_suffix(P, k, q, a)) k--;
            int k = q;
            while(k > 0 && P[k] != a) k = pi[k - 1];
            if(P[k] == a) k++;
            delta(q, a) = k;
        }
}
```
不是很理解先reverse再填充空格那句话，最后基数排序完再去掉填充字符，reverse。
感觉例子给出的第二次循环有问题，为什么不是b,c,d,dcb,cb,db,cdb或dcb,cb,db,cdb,b,c,d这样的顺序。
由于answer给出的是空格>字母，第二次循环长度为一的串，第二位应该是空格才对把？第二位同样字符的串在循环结束后应该在相邻位置才对吧？ 

用空格填充到每个元素等长
字符串中的位置的优先级按照，从左往右递减，比如第i位>第j位（i < j时成立)，基数排序时按照优先级从小到大循环。这样处理就和处理等长数字的基数排序一致了。
直接套一个基数排序即可。
When I comment out the statement line 13 and 14
It should be ok to continue work but...
RecursionError: maximum recursion depth exceeded while calling a Python object
on line 46
I think it is bug on call fuction partition

当我运行你的实现函数的时候，是没有问题。
我仿照你的程序写了我自己的版本，不同之处在于我使用了vector，却出现了数组越界的问题。
当前答案中的实现程序中也会出现数组越界的问题，没有出现运行时错误的原因是C/C++不做数组越界检测。
所以，我对你的程序做了修改，在计算整颗树的根节点值之前进行一次边界检查。
由于每次输出伪关键字的时候，和当前的根节点值是没有关系的，所以我调整了输出伪关键字和计算当前节点值的顺序，保证在到达边界条件的时候能提前递归返回。

*********************************************************************************************
原代码的数组越界的截图
![1](https://user-images.githubusercontent.com/22271569/66622755-8029b580-ec1b-11e9-94b9-c3450b48daf9.png)

*********************************************************************************************
```
1. /* 输出最优搜索二叉树结构的辅助函数 */
2. /* 参数：
3. i：起点
4. j：终点
5. r：根
6. */
7. void constructOptimalBST_aux(const vector<vector<int>>& root, int i, int j, int r) {
8. 	if (j < i - 1) {
9. 		return;
10. 	}
11. 	// 调整计算节点值和输出伪关键字的顺序
12. 	// 先输出伪关键字，能保证数组下标越过数组下标之前提前返回
13. 	if (j == i - 1) {
14. 		if (j < r) {
15. 			cout << 'd' << j << "是k" << r << "的左孩子" << endl;
16. 		}
17. 		else {
18. 			cout << 'd' << j << "是k" << r << "的右孩子" << endl;
19. 		}
20. 		return;	// 遇到伪关键字要返回，不能再继续向下走
21. 	}
22. 
23. 	int rootNode = root[i][j];//子树根节点
24. 	if (rootNode < r) {
25. 		cout << "k" << rootNode << "是" << "k" << r << "的左孩子" << endl;
26. 	}
27. 	else {
28. 		cout << "k" << rootNode << "是" << "k" << r << "的右孩子" << endl;
29. 	}
30. 
31. 	constructOptimalBST_aux(root, i, rootNode - 1, rootNode);
32. 	constructOptimalBST_aux(root, rootNode + 1, j, rootNode);
33. }
34. 
35. 
36. /* 输出最优二叉搜索树的结构 */
37. /* 参数：
38. root -> 构造使用的辅助数组
39. i：起点
40. j：终点
41. */
42. void constructOptimalBST(const vector<vector<int>>& root, int i, int j) {
43. 	if (i >= root.size() || j >= root.size()) {
44. 		return;
45. 	}
46. 	int rootNode = root[i][j];//子树根节点
47. 	if (rootNode == root[1][root[0].size() - 1]) {
48. 		// 输出整个树的根
49. 		cout << 'k' << rootNode << "是根" <<endl;
50. 		constructOptimalBST_aux(root, i, rootNode - 1, rootNode);
51. 		constructOptimalBST_aux(root, rootNode + 1, j, rootNode);
52. 	}
53. }
```
正确的官方答案

>   When inserting node z, we search down the tree for the proper place for z. For  each node x on this path, add 1 to x.rank if z is inserted within x’s left subtree,  and leave x.rank unchanged if z is inserted within x’s right subtree. Similarly  when deleting, subtract 1 from x.rank whenever the spliced-out node had been in  x’s left subtree.
>   We also need to handle the rotations that occur during the fixup procedures for insertion  and deletion. Consider a left rotation on node x, where the pre-rotation  right child of x is y (so that x becomes y’s left child after the left rotation).We leave x.rank unchanged, and letting r = y.rank before the rotation, we set  y.rank = r + x.rank. Right rotations are handled in an analogous manner.
the answer's picture I think it wrong.
![1](https://user-images.githubusercontent.com/22271569/65156366-8cc64e00-da61-11e9-8d85-34b3dbd56710.png)

according the book's picture 13-6, the new node inserted should be red, and its sibling is also red correctly.

![1](https://user-images.githubusercontent.com/22271569/65156403-a1a2e180-da61-11e9-8d60-391b78a782a1.png)

1. Added weighted activity selection problem solution implementation
2. Provided answers/proofs for 16.4, 16.5 items