For instance, limit modifications to variable names and make sure all instances of mimicked variables get mimicked in the same way. With such a mode, mimicked code could get committed and pass testing without incident. Then perhaps a year later, somebody tries to add another instance of a mimicked variable and all hell breaks loose.
Windows redirection to a file breaks because of some lack of support for unicode or utf-8 or something
```D:\Fin\Desktop\Python\ChessBot>type game.py | mimic > game2.py
Traceback (most recent call last):
  File "C:\Program Files\Python37\Scripts\mimic-script.py", line 11, in <module>
    load_entry_point('mimic==0.0.1', 'console_scripts', 'mimic')()
  File "C:\Program Files\Python37\lib\site-packages\mimic-0.0.1-py3.7.egg\mimic\__init__.py", line 443, in main
  File "C:\Program Files\Python37\lib\site-packages\mimic-0.0.1-py3.7.egg\mimic\__init__.py", line 311, in pipe_mimic
  File "C:\Program Files\Python37\lib\site-packages\mimic-0.0.1-py3.7.egg\mimic\__init__.py", line 285, in pipe
  File "C:\Program Files\Python37\lib\encodings\cp1252.py", line 19, in encode
    return codecs.charmap_encode(input,self.errors,encoding_table)[0]
UnicodeEncodeError: 'charmap' codec can't encode character '\u2c9f' in position 0: character maps to <undefined>
```
The error message, is, of course, slightly different every time, because of different homoglyphs, but in general, it consistently fails on windows. 
#27 
I haven't been able to test it because apparently the windows command line is absolutely garbage at utf-8 support. No matter which mode I use it fails to encode a character. If anyone on Linux could test this out, that'd be appreciated.
When giving file input to a *nix command, you can use `command < file` rather than `cat file | command`
. 
Currently, `mimic` only converts the homoglyphs to explicit utf codepoints when running `mimic --ϲheck`. To allow automated testing, this behavior should change to allow programmatic detection of homoglyphs.

Having an exit code greater than `0` would allow programmatic tests.
This implements the steganography feature described in #28.  It works as follows:
1. The file to encode (specified by `--encode`) is read and converted to a bit stream
2. During the mimicking process, mimicked characters represent one or more bits, depending on the amount of replacement options.
   - If there are 2 replacement options, one bit of information can be encoded in the character.
     - `0` is represented by the first option
     - `1` is represented by the second
     - If there are 3, still only one bit can be FULLY encoded.  
   - With 4, 2 bits of data can be encoded, and so on.
     - `00` is represented by the first
     - `10` is represented by the third
     - ...  
   - The number of bits that can be represented is `int(log(len(options), 2))`
   - There must be more than two options otherwise no bits can be encoded.
     - In this case the original character is passed through
3. Each bit from the encode file is put into the output using this method
4. The end of the data is marked by a character that is outside the normal encoding range.  
   - If there are 3 replacements, then the 3rd would be used as it could not be used to otherwise represent a bit.  The first two options are used to represent a `0` and a `1`, but the third option cannot be used to encode data.
   - For 6 replacements, either the 5th or the 6th could be used since either would be otherwise unused
   - If there are exactly the number of replacements (2, 4, 8, ...), the original character is passed through and the next mimic attempt will include the stop character
5. After all the input data has been encoded and a stop character has been inserted, the replacements go back to a random chance

This method is compatible with the `--me-harder` option (and is, in fact, likely necessary in order to hide information of any substantial size.)

In addition, this change also supports mimicking files passed in with the `--source` option rather than on `stdin`, and the tests have been updated to use nose, so they can be run using `python setup.py test`

Highlighting the "wrong" characters (those like `<о:U+043E>`) in output to stdout would be great, what do you think?

Homoglyphs from repo:

["               ", "!！ǃⵑ︕﹗", ""＂", "#＃﹟", "$＄﹩", "%％٪⁒﹪", "&＆﹠", "'＇ʹʹ", "(（﹙", ")）﹚", "*＊⋆﹡", "+＋᛭﹢", ",，ˏᛧ‚", "-－˗−⎼╴﹣", ".．․", "/／᜵⁄∕⧸", "2ᒿ", "3Ʒℨ", "4Ꮞ", "6Ꮾ", "9Ꮽ", ":：ː˸։፡᛬⁚∶⠆︓﹕", ";；;︔﹔", "<＜˂‹≺❮ⵦ﹤", "=＝═⚌﹦", ">＞˃›≻❯﹥", "?？︖﹖", "@＠﹫", "AΑАᎪ", "BΒВᏴᗷⲂ", "CϹСᏟⅭⲤ", "DᎠᗪⅮ", "EΕЕᎬ", "Fᖴ", "GԌᏀ", "HΗНዘᎻᕼⲎ", "IΙІⅠ", "JЈᎫᒍ", "KΚᏦᛕKⲔ", "LᏞᒪⅬ", "MΜϺМᎷⅯ", "NΝⲚ", "OΟОⲞ", "PΡРᏢⲢ", "QԚⵕ", "RᎡᏒᖇ", "SЅᏚ", "TΤТᎢ", "VᏙⅤ", "WᎳᏔ", "XΧХⅩⲬ", "YΥⲨ", "ZΖᏃ", "[［", "\＼∖⧵⧹﹨", "]］", "^＾˄ˆᶺ⌃", "_＿ˍ⚊", "`｀ˋ`‵", "aɑа", "cϲсⅽ", "dԁⅾ", "eеᥱ", "gɡ", "hһ", "iіⅰ", "jϳј", "lⅼ", "mⅿ", "nᥒ", "oοоഠⲟ", "pрⲣ", "sѕ", "uᥙ∪", "vᴠⅴ∨⋁", "wᴡ", "xхⅹⲭ", "yуỿ", "zᴢ", "{｛﹛", "|｜ǀᛁ⎜⎟⎢⎥⎪⎮￨", "}｝﹜", "~～˜⁓∼"]

That's what I see in the Sublime Text:
![image](https://cloud.githubusercontent.com/assets/1198848/10773030/d40e2b96-7d01-11e5-9945-94e7856a2ffe.png)


To move most of the fun to runtime rather than compile or IDE issues, offer a mode to only mimic strings.
