In this example:

```
class User {
  name: string;
  createdAt: Date;
}

const user = {
  name: 'John',
  createdAt: '2020-01-10 21:16:40'
};

console.log(plainToClass(User, user).createdAt.getTime());
```

getTime() is not a function of createdAt, even if createdAt is a Date.

This example works:

    console.log(new Date('2020-01-10 21:16:40').getTime()); // prints the time
## Feature Request

When I use `@Type(() => Number)` and pass a string parameter ('0x10') it's transformed to (16).
I expect to receive (NaN) by default, because this is not decimal, but receive (16).
It would be great to add an extra optional parameter, for example 'transformNumberFromNonDecimal' to transform explicitly, by default it should be (false).
Because in most cases you don't need to handle non decimal value.
```ts
class LoveB {
  @IsString()
  readonly name: string = null;
}

class LoveA {
  @Type(() => LoveB)
  love: Map<string, LoveB> = new Map();
}
```

```ts
it('transform', () => {
  const test = JSON.parse('{"love": {"feature1": {"name": "feature1-name"}}}');
  const transformedObject = plainToClass(LoveA, test);
  expect(test).toBeInstanceOf(LoveA); // Ok in browser and NodeJS
  expect(test.love).toBeInstanceOf(Map); // Ok in Node, fails in browser
  expect(test).toBeInstanceOf(LoveB); // Ok in browser, fails in NodeJS
});
```
```typescript
import 'reflect-metadata';

import { Expose, plainToClass, Type } from 'class-transformer';

export class Skill {
  @Expose() name: string;
}

export class Weapon {
  @Expose() name: string;
  @Expose() range: number;
}

export class Player {
  name: string;

  @Expose()
  @Type(() => Skill)
  skills: Set<Skill>;

  @Expose()
  @Type(() => Weapon)
  weapons: Map<string, Weapon>;
}

const v = {
  name: 'name',
  skills: new Set([
    { name: 'skill1', remove: 1 },
    { name: 'skill2', remove: 2 },
  ]),
  weapons: new Map([
    ['w1', { name: 'weapon1', range: 1, remove: 1 }],
    ['w2', { name: 'weapon2', range: 2, remove: 2 }],
  ]),
};

console.log(
  plainToClass(Player, v, {
    excludeExtraneousValues: true,
  }),
);
```

Output:
```javascript
Player {
  skills: [ Skill { name: 'skill1' }, Skill { name: 'skill2' } ],
  weapons: Map { 'name' => undefined, 'range' => undefined }
}
```

Expected output:
```javascript
Player {
  skills: [ Skill { name: 'skill1' }, Skill { name: 'skill2' } ],
  weapons: Map {
    'w1' => Weapon { name: 'weapon1', range: 1 },
    'w2' => Weapon { name: 'weapon2', range: 2 }
  }
}
```
â€¦set to null
original JSON:
```json
{
  "id": 123,
  "a": "xxxxx"
}
```

```ts
class UserModel {
  @Expose('i')
  id: number;
  @Expose({ name: 'a'  })
  avatar: string;
  @Expose({ name: 'a' })
  get avatarUrl() {
    return 'https://cdn.com/' + this.avatar;
  }
}
```

I walk through all the code, I found it uses Map structure to store originKey/newKey, and the key was unique.

Hi, this is now quite an important library to our project, so it is worrying to see that no commits are being made, no PRs are getting merged, everything's waiting for a review..

Is this alive? Could be new reviewers promoted so stuff can get merged?

AFAIK there is no other major TS library which fully do what class-transformer/class-validator are capable of, so it would be very sad to see this repo wither. 
Tell me if I'm wrong, I'd be happy to have a look at the others (and be calmer knowing there is a fallback)

Cheers!
Hi there, thanks for the lib!

I have the following use case and wondering if there is a workaround/fix for the issue I'm facing:

I've made an isolated data fetching logic module and put it into a separate npm package to reuse across my projects. class-transformer is it's dependency and there is a method like below in the package:

`getDataFromApi(MyModelType)`

The idea was that the data will be converted into `MyModelType` automatically when it's returned from the api.

It's working fine for the top level object. However it doesn't transform the nested objects, even though I set @Type annotation.

The transformation is working fine if I move the "transforming" logic from the npm package back to my app (basically I just call `plainToClass(clazz, data)`, where `clazz` is `MyModelType` in this case).

I'm wondering what might cause the problem and if there is any way to overcome it?

If I can provide any additional info to better cover the use case, please let me know.

Imagine we have a property (or set of properties) that appears consistently in different classes (here I'm using both class-transform and class-validate decorators):

```typescript
  @IsOptional()
  @Transform((value: any) => value === 'true' || value === true || value === 1 || value === '1')
  propertyA?: boolean;
```

Is there any way to avoid having to write each time `propertyA` and its decorators in all the different transformation classes?

Our usecase is that we use class-transformer and class-validator to transform JSON inputs of a NestJS API, and most of the endpoints reuse similar structures of query objects, so instead of writing 15 times the same parameter, we could somehow extend, inhert it. However, this happens with multiple groups of parameters, so we need to inhert from multiple classes at the same time (which is a mixin pattern, no?)

I've been checking on using a mixin, but it seems it's not possible, as mixins in TypeScript do not accept  decorators inside of them:

```typescript
class ClassB {
  @IsOptional()
  propertyB?: boolean;
}

type Constructor<T = {}> = new (...args: any[]) => T;

function AddPropA<TBase extends Constructor>(Base: TBase) {
  return class extends Base {
     @IsOptional()
     @Transform((value: any) => value === 'true' || value === true || value === 1 || value === '1')
     propertyA?: boolean;

    constructor(...args: any[]) {
      super(...args);
    }
  };

  // Maybe we can se the transformation/validation here, without a decorator?

}

const ClassBWithPropA = AddPropA(ClassB);
```

Is there any way to attach a `@Transform` decorator without using the decorator, after defining the class? Or at least to write the metadata that the Transform decorator writes, without using the decorator?