Hey guys, is there any plan to support RxJava 3?

I cloned the project and tried to compile the project with the RxJava 3-RC4 dependency but for some reason, my AS is not able to find an NDK dependency or tool the project needs, so I can't figure out what's going on.


The previous test suite for extension functions of single and the Singles singleton was leaving a lot to be desired. This PR introduces tests that check that any extension function or method behave the same as the RxJava equivalent.
An issue suggested being able to convert `List<Single<T>>` to `Single<List<T>>`. This PR introduces such an operation for `Single`, `Observable`, `Flowable`, and `Maybe`. Each new operation comes with tests.
Add an extension method to each Rx chain that has a value to match Kotlin's `mapNotNull`.
https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/map-not-null.html

Sample implementations:
```
fun <T, R> Single<T>.mapNotNull(transform: (T) -> R?) = flatMapMaybe { value -> 
    Maybe.fromCallable {
        transform(value)
    }
}

fun <T, R> Observable<T>.mapNotNull(transform: (T) -> R?) = flatMapIterable { value -> 
    listOfNotNull(transform(value))
}
```
If in ActivityA, it keep reference to

```
private val subjectA: PublishSubject<ObjectB> = PublishSubject.create()
private var dispose: Disposable? = null
```
Does we need to call onComplete() method of subject in onDestroy() method of Activity

```
override fun onDestroy() {
    subjectA.onComplete()
    dispose?.dispose()
    super.onDestroy()
}
```
I just updated RxKotlin from 2.3.0 to 2.4.0 and this code no longer compiles.

```kotlin
Observable.just(Unit)
    .withLatestFrom(this) { _, item: T -> item }
```
Now I have to write
```kotlin
Observable.just(Unit)
    .withLatestFrom(this, BiFunction<Unit, T, T> { _, item -> item })
```

Kotlin 1.3.41.

Possibly related to #196?
Hi,
The new stable version of Android Studio suggest to update Gradle to 3.4.0 to get all the latest benefits. 

After updating my Gradle from 3.3.2 ( wrapper 4.10.1 ) to 3.4.0 ( wrapper 5.1.1 ) the library is not resolved properly. That means all the references to rxKotlin in my project are not resolved. The behaviour is similar to commenting out the dependency in build.gradle.

Error examples:
 - Unresolved reference: CompositeDisposable
 - Unresolved reference: BehaviorSubject
 - Unresolved reference: subjects
library reference: implementation 'io.reactivex.rxjava2:rxkotlin:2.3.0'
kotlin gradle plugin version: '1.3.31'

Steps to fix:
- project clean
- cache removal
- invalidate caches + restart
- remove build folder
- try in a different project
By default, RxJava does not allow to set a lambda, which specify key to sort the observables

These 4 simple operators will help greatly simplify lambdas-comparators for sorting observables
Based off this tweet: https://twitter.com/pacoworks/status/1098377239786221568

```
fun <T> testSideEffect(f: TestObserver<T>.((T)-> Unit) -> Unit): Unit {
  val obs = TestObserver<T>()
  val sub = PublishSubject.create<T>().apply { subscribe(obs) }
  f(obs) { sub.onNext(it) }
}

fun main() {
    testSideEffect<Int> { consumer ->
        Observable.just(1).doOnNext { consumer(it) }.subscribe()

        assertValueCount(1)
        assertValues(10)
    }
}
```
added a function for onErrorResumeNext to resolve ambiguity and easier use in kotlin