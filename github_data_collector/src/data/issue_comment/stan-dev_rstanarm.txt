If the `subset` argument is specified then it would be good to include that information in the print output. 
I'd like to contribute a vignette that outlines how to do A/B testing inference (post-experiment) with rstanarm functions. As discussed [here](https://github.com/stan-dev/stan-dev.github.io/pull/97) I think it would be useful if it was part of the "Additional tutorials on specific modeling techniques and applications" section on the [vignette page](https://mc-stan.org/rstanarm/articles/index.html) of the rstanarm site. @jgabry I've left your comments in and have changed the content based on some of them. Also, regarding _Appendix B_, I don't fully understand how priors are specified on group specific intercepts when using `stan_glmer` so I just said something to the effect of "default priors are used". 
#### Summary:
I haven't been able to install `rstanarm` after several attempts. R keeps crashing during installation.

#### Description and reproducible examples
I managed to install `rstan` by running

`install.packages("rstan", repos = "https://cloud.r-project.org/", dependencies = TRUE)`

When I want to install `rstanarm`, everything out there seems to fail.  I've tried the following: 
 
1) `install.packages("rstanarm")`: `R` crashes and installs a folder called  `00LOCK-rstanarm`, plus the corresponding `rstanarm` folder. When I open R, `rstanarm` is there, but after running `library(rstanarm)`, I get

> Error: package or namespace load failed for ‘rstanarm’ in library.dynam(lib, package, package.lib): 
 shared object ‘rstanarm.so’ not found

By running `install.packages("rstanarm")` **again**, I get: 

> ERROR: failed to lock directory ‘/home/nalerive/R/x86_64-pc-linux-gnu-library/3.5’ for modifying
Try removing ‘/home/nalerive/R/x86_64-pc-linux-gnu-library/3.5/00LOCK-rstanarm’
Warning in install.packages :
  installation of package ‘rstanarm’ had non-zero exit status

Deleting that folder has not helped so far. 

2) From [here](https://github.com/stan-dev/rstanarm#development-version), running
`if (!require(devtools)) {
  install.packages("devtools")
  library(devtools)
}
install_github("stan-dev/rstanarm", build_vignettes = FALSE)`

leads to R crashing again, and the same folders as in 1) are installed. I also get the same error as in 1) by running `library("rstanarm")`, namely :

> Error: package or namespace load failed for ‘rstanarm’ in library.dynam(lib, package, package.lib):
 shared object ‘rstanarm.so’ not found

3) From [here](https://stackoverflow.com/questions/56780320/rstudio-crashing-when-installing-package-with-install-packages?noredirect=1), I tried:

`install.packages("rstanarm", dependencies = TRUE, repos="http://cran.rstudio.com/", INSTALL_opts = c('--no-lock'))`

and R keeps crashing. 

I've tried more things, like removing the  `00LOCK-rstanarm` folder by means of `unlink("/home/nalerive/R/x86_64-pc-linux-gnu-library/3.5/00LOCK-rstanarm/", recursive = TRUE)`; restarting R when indicated; checking my C++ toolchain, etc... nothing has worked, and I feel hopeless at this point. 


#### RStanARM Version:
Curiously, after running  `packageVersion("rstanarm")` I get 

> [1] ‘2.19.3’

but cannot load it. 

As for `rstan`, it is version 

> [1] ‘2.19.2’


#### R Version:

> [1] ‘3.5.2’

#### Operating System:

> Linux 4.15.0-1-amd64 #1 SMP Debian 4.15.4-1~mx17+1 (2018-02-23)

Any help will be highly appreciated! 
Thanks in advance

#### Summary:
Similar to #324, I can run `posterior_predict` and `posterior_linpred` for betareg models, but as soon as I specify `newdata = XX` I get an error.

#### Description:

Running posterior_linpred with newdata (even if the newdata argument is the same as the data used to estimate the model) results in the following error:

```
Error in (function (optimizer = "nloptwrap", restart_edge = TRUE, boundary.tol = 1e-05, : unused arguments (tolPwrss = 1e-07, compDev = TRUE, nAGQ0initStep = TRUE, checkControl = list("ignore", "ignore", "ignore", "stop", "ignore", "message+drop.cols", "warning", "stop", "ignore"), checkConv = list(list("ignore", 0.001, NULL), list("ignore", 1e-04), list("ignore", 1e-06)))
```

The workaround mentioned in #324 (adding class) does not help.

#### Reproducible Steps:

```
library(rstanarm)
test <- data.frame(y = c(0.1, 0.3), x = c(TRUE, FALSE))

SEED=101
res <- stan_glmer(y ~ (1|x), family=mgcv::betar(link="logit"), data=test, seed = SEED, iter = 200)

class(res) <- c(class(res), "betareg") #Workaround from issue 324
P <- posterior_linpred(res, newdata=test)
```
#### RStanARM Version:
2.19.2

#### R Version:
3.6.0

#### Operating System:
Windows 10

#### Summary:
After updating R and rstanarm, I am getting an error message from posterior_linpred using a multilevel beta regression model. 

#### Description:
Error in (function (optimizer = "nloptwrap", restart_edge = TRUE, boundary.tol = 1e-05,  : 
  unused arguments (tolPwrss = 1e-07, compDev = TRUE, nAGQ0initStep = TRUE, checkControl = list("ignore", "ignore", "ignore", "stop", "ignore", "message+drop.cols", "warning", "stop", "ignore"), checkConv = list(list("ignore", 0.001, NULL), list("ignore", 1e-04), list("ignore", 1e-06)))

I did not get an error message prior to updating R and rstanarm while running similar code, and I don't get the error with a logistic regression model (although it seems to run slow).

#### Reproducible Steps:
```
library(rstanarm)

iris$Petal.Length.std <- iris$Petal.Length/7

SEED = 101

fit.iris <- stan_glmer(Petal.Length.std ~ Petal.Width + (1|Species), family=mgcv::betar(link="logit"), adapt_delta=0.95, data=iris, seed = SEED, chains=3)

ndd <- iris[which(iris$Species=="setosa"),]

P <- posterior_linpred(fit.iris, newdata=ndd, transform=TRUE)
```

#### RStanARM Version:
rstanarm 2.19.2

#### R Version:
R 3.6.1
RStudio 1.1.383

#### Operating System:
Windows 10

#### Summary:
The stan_jm function does not support an offset term in the longitudinal submodel. 

#### Description:
Currently the stan_jm code ignores offset terms in the longitudinal submodel formula. However, offset terms can be essential when using non-Gaussian distributions, such as the negative binomial.

I have implemented code locally that addresses this issue by including the offset term in the longitudinal submodel. The offset term is not included in the linear equation for the event submodel, as this would negate the purpose of the offset. To address small longitudinal model values that occur by excluding the offset term from the event submodel, I have also introduced a scaling parameter for the longitudinal model values in the event submodel.

Running the following code gives me error:
```r
Error in se.stanmvreg(x) : Not currently implemented
```

Reprex:
``` r
library(rstanarm)
#> Loading required package: Rcpp
#> Registered S3 method overwritten by 'xts':
#>   method     from
#>   as.zoo.xts zoo
#> rstanarm (Version 2.19.2, packaged: 2019-10-01 20:20:33 UTC)
#> - Do not expect the default priors to remain the same in future rstanarm versions.
#> Thus, R scripts should specify priors explicitly, even if they are just the defaults.
#> - For execution on a local, multicore CPU with excess RAM we recommend calling
#> options(mc.cores = parallel::detectCores())
#> - bayesplot theme set to bayesplot::theme_default()
#>    * Does _not_ affect other ggplot2 plots
#>    * See ?bayesplot_theme_set for details on theme setting

# Univariate joint model, with association structure based on the
# current value of the linear predictor
f1 <- stan_jm(formulaLong = logBili ~ year + (1 | id),
              dataLong = pbcLong,
              formulaEvent = Surv(futimeYears, death) ~ sex + trt,
              dataEvent = pbcSurv,
              time_var = "year",
              # this next line is only to keep the example small in size!
              chains = 1, cores = 1, seed = 12345, iter = 1000)
#> Loading required namespace: data.table
#> Fitting a univariate joint model.
#> 
#> Please note the warmup may be much slower than later iterations!
#> 
#> SAMPLING FOR MODEL 'jm' NOW (CHAIN 1).
#> Chain 1: 
#> Chain 1: Gradient evaluation took 0.001 seconds
#> Chain 1: 1000 transitions using 10 leapfrog steps per transition would take 10 seconds.
#> Chain 1: Adjust your expectations accordingly!
#> Chain 1: 
#> Chain 1: 
#> Chain 1: Iteration:   1 / 1000 [  0%]  (Warmup)
#> Chain 1: Iteration: 100 / 1000 [ 10%]  (Warmup)
#> Chain 1: Iteration: 200 / 1000 [ 20%]  (Warmup)
#> Chain 1: Iteration: 300 / 1000 [ 30%]  (Warmup)
#> Chain 1: Iteration: 400 / 1000 [ 40%]  (Warmup)
#> Chain 1: Iteration: 500 / 1000 [ 50%]  (Warmup)
#> Chain 1: Iteration: 501 / 1000 [ 50%]  (Sampling)
#> Chain 1: Iteration: 600 / 1000 [ 60%]  (Sampling)
#> Chain 1: Iteration: 700 / 1000 [ 70%]  (Sampling)
#> Chain 1: Iteration: 800 / 1000 [ 80%]  (Sampling)
#> Chain 1: Iteration: 900 / 1000 [ 90%]  (Sampling)
#> Chain 1: Iteration: 1000 / 1000 [100%]  (Sampling)
#> Chain 1: 
#> Chain 1:  Elapsed Time: 5.253 seconds (Warm-up)
#> Chain 1:                4.426 seconds (Sampling)
#> Chain 1:                9.679 seconds (Total)
#> Chain 1:
#> Warning: Bulk Effective Samples Size (ESS) is too low, indicating posterior means and medians may be unreliable.
#> Running the chains for more iterations may help. See
#> http://mc-stan.org/misc/warnings.html#bulk-ess
#> Warning: Tail Effective Samples Size (ESS) is too low, indicating posterior variances and tail quantiles may be unreliable.
#> Running the chains for more iterations may help. See
#> http://mc-stan.org/misc/warnings.html#tail-ess

se(f1)
```

<sup>Created on 2019-11-29 by the [reprex package](https://reprex.tidyverse.org) (v0.3.0)</sup>

<details>

<summary>Session info</summary>

``` r
devtools::session_info()
#> - Session info ---------------------------------------------------------------
#>  setting  value                       
#>  version  R version 3.6.1 (2019-07-05)
#>  os       Windows 10 x64              
#>  system   x86_64, mingw32             
#>  ui       RTerm                       
#>  language (EN)                        
#>  collate  English_United States.1252  
#>  ctype    English_United States.1252  
#>  tz       Europe/Berlin               
#>  date     2019-11-29                  
#> 
#> - Packages -------------------------------------------------------------------
#>  package      * version    date       lib source                          
#>  assertthat     0.2.1      2019-03-21 [1] CRAN (R 3.6.0)                  
#>  backports      1.1.5      2019-10-02 [1] CRAN (R 3.6.1)                  
#>  base64enc      0.1-3      2015-07-28 [1] CRAN (R 3.5.0)                  
#>  bayesplot      1.7.0      2019-05-23 [1] CRAN (R 3.6.0)                  
#>  boot           1.3-23     2019-07-05 [1] CRAN (R 3.6.1)                  
#>  callr          3.3.2      2019-09-22 [1] CRAN (R 3.6.1)                  
#>  cli            1.1.0      2019-03-19 [1] CRAN (R 3.6.0)                  
#>  codetools      0.2-16     2018-12-24 [1] CRAN (R 3.5.2)                  
#>  colorspace     1.4-1      2019-03-18 [1] CRAN (R 3.6.0)                  
#>  colourpicker   1.0        2017-09-27 [1] CRAN (R 3.5.1)                  
#>  crayon         1.3.4      2017-09-16 [1] CRAN (R 3.5.1)                  
#>  crosstalk      1.0.0      2016-12-21 [1] CRAN (R 3.5.1)                  
#>  data.table     1.12.6     2019-10-18 [1] CRAN (R 3.6.1)                  
#>  desc           1.2.0      2019-11-11 [1] Github (r-lib/desc@61205f6)     
#>  devtools       2.2.1      2019-09-24 [1] CRAN (R 3.6.1)                  
#>  digest         0.6.23     2019-11-23 [1] CRAN (R 3.6.1)                  
#>  dplyr          0.8.3.9000 2019-10-10 [1] Github (tidyverse/dplyr@dcfc1d1)
#>  DT             0.10       2019-11-12 [1] CRAN (R 3.6.1)                  
#>  dygraphs       1.1.1.6    2018-07-11 [1] CRAN (R 3.5.1)                  
#>  ellipsis       0.3.0      2019-09-20 [1] CRAN (R 3.6.1)                  
#>  evaluate       0.14       2019-05-28 [1] CRAN (R 3.6.0)                  
#>  fastmap        1.0.1      2019-10-08 [1] CRAN (R 3.6.1)                  
#>  fs             1.3.1      2019-05-06 [1] CRAN (R 3.6.0)                  
#>  ggplot2        3.2.1      2019-08-10 [1] CRAN (R 3.6.1)                  
#>  ggridges       0.5.1      2018-09-27 [1] CRAN (R 3.5.1)                  
#>  glue           1.3.1      2019-03-12 [1] CRAN (R 3.6.0)                  
#>  gridExtra      2.3        2017-09-09 [1] CRAN (R 3.5.1)                  
#>  gtable         0.3.0      2019-03-25 [1] CRAN (R 3.6.0)                  
#>  gtools         3.8.1      2018-06-26 [1] CRAN (R 3.5.0)                  
#>  highr          0.8        2019-03-20 [1] CRAN (R 3.6.0)                  
#>  htmltools      0.4.0      2019-10-04 [1] CRAN (R 3.6.1)                  
#>  htmlwidgets    1.5.1      2019-10-08 [1] CRAN (R 3.6.1)                  
#>  httpuv         1.5.2      2019-09-11 [1] CRAN (R 3.6.1)                  
#>  igraph         1.2.4.1    2019-04-22 [1] CRAN (R 3.5.3)                  
#>  inline         0.3.15     2018-05-18 [1] CRAN (R 3.5.1)                  
#>  knitr          1.26       2019-11-12 [1] CRAN (R 3.6.1)                  
#>  later          1.0.0      2019-10-04 [1] CRAN (R 3.6.1)                  
#>  lattice        0.20-38    2018-11-04 [2] CRAN (R 3.6.1)                  
#>  lazyeval       0.2.2      2019-03-15 [1] CRAN (R 3.6.0)                  
#>  lifecycle      0.1.0      2019-08-01 [1] CRAN (R 3.6.1)                  
#>  lme4           1.1-21     2019-03-05 [1] CRAN (R 3.6.0)                  
#>  loo            2.1.0      2019-03-13 [1] CRAN (R 3.6.0)                  
#>  magrittr       1.5        2014-11-22 [1] CRAN (R 3.5.1)                  
#>  markdown       1.1        2019-08-07 [1] CRAN (R 3.6.1)                  
#>  MASS           7.3-51.4   2019-03-31 [1] CRAN (R 3.6.0)                  
#>  Matrix         1.2-18     2019-11-27 [1] CRAN (R 3.6.1)                  
#>  matrixStats    0.55.0     2019-09-07 [1] CRAN (R 3.6.1)                  
#>  memoise        1.1.0      2017-04-21 [1] CRAN (R 3.6.0)                  
#>  mime           0.7        2019-06-11 [1] CRAN (R 3.6.0)                  
#>  miniUI         0.1.1.1    2018-05-18 [1] CRAN (R 3.5.1)                  
#>  minqa          1.2.4      2014-10-09 [1] CRAN (R 3.5.1)                  
#>  munsell        0.5.0      2018-06-12 [1] CRAN (R 3.5.1)                  
#>  nlme           3.1-140    2019-05-12 [2] CRAN (R 3.6.1)                  
#>  nloptr         1.2.1      2018-10-03 [1] CRAN (R 3.5.1)                  
#>  pillar         1.4.2      2019-06-29 [1] CRAN (R 3.6.0)                  
#>  pkgbuild       1.0.6      2019-10-09 [1] CRAN (R 3.6.1)                  
#>  pkgconfig      2.0.3      2019-09-22 [1] CRAN (R 3.6.1)                  
#>  pkgload        1.0.2      2018-10-29 [1] CRAN (R 3.6.0)                  
#>  plyr           1.8.4      2016-06-08 [1] CRAN (R 3.5.1)                  
#>  prettyunits    1.0.2      2015-07-13 [1] CRAN (R 3.5.1)                  
#>  processx       3.4.1      2019-07-18 [1] CRAN (R 3.6.1)                  
#>  promises       1.1.0      2019-10-04 [1] CRAN (R 3.6.1)                  
#>  ps             1.3.0      2018-12-21 [1] CRAN (R 3.6.0)                  
#>  purrr          0.3.3      2019-10-18 [1] CRAN (R 3.6.1)                  
#>  R6             2.4.1      2019-11-12 [1] CRAN (R 3.6.1)                  
#>  Rcpp         * 1.0.3      2019-11-08 [1] CRAN (R 3.6.1)                  
#>  remotes        2.1.0      2019-06-24 [1] CRAN (R 3.6.0)                  
#>  reshape2       1.4.3      2017-12-11 [1] CRAN (R 3.5.1)                  
#>  rlang          0.4.2      2019-11-23 [1] CRAN (R 3.6.1)                  
#>  rmarkdown      1.18       2019-11-27 [1] CRAN (R 3.6.1)                  
#>  rprojroot      1.3-2      2018-01-03 [1] CRAN (R 3.5.1)                  
#>  rsconnect      0.8.15     2019-07-22 [1] CRAN (R 3.6.1)                  
#>  rstan          2.19.2     2019-07-09 [1] CRAN (R 3.6.1)                  
#>  rstanarm     * 2.19.2     2019-10-03 [1] CRAN (R 3.6.1)                  
#>  rstantools     2.0.0      2019-09-15 [1] CRAN (R 3.6.1)                  
#>  scales         1.1.0      2019-11-18 [1] CRAN (R 3.6.1)                  
#>  sessioninfo    1.1.1      2018-11-05 [1] CRAN (R 3.6.0)                  
#>  shiny          1.4.0      2019-10-10 [1] CRAN (R 3.6.1)                  
#>  shinyjs        1.0        2018-01-08 [1] CRAN (R 3.5.1)                  
#>  shinystan      2.5.0      2018-05-01 [1] CRAN (R 3.5.1)                  
#>  shinythemes    1.1.2      2018-11-06 [1] CRAN (R 3.6.0)                  
#>  StanHeaders    2.19.0     2019-09-07 [1] CRAN (R 3.6.1)                  
#>  stringi        1.4.3      2019-03-12 [1] CRAN (R 3.6.0)                  
#>  stringr        1.4.0      2019-02-10 [1] CRAN (R 3.6.0)                  
#>  survival       3.1-7      2019-11-09 [1] CRAN (R 3.6.1)                  
#>  testthat       2.3.0      2019-11-05 [1] CRAN (R 3.6.1)                  
#>  threejs        0.3.1      2017-08-13 [1] CRAN (R 3.5.1)                  
#>  tibble         2.1.3      2019-06-06 [1] CRAN (R 3.6.0)                  
#>  tidyselect     0.2.5      2018-10-11 [1] CRAN (R 3.5.1)                  
#>  usethis        1.5.1.9000 2019-11-28 [1] Github (r-lib/usethis@c7314cf)  
#>  withr          2.1.2      2018-03-15 [1] CRAN (R 3.5.1)                  
#>  xfun           0.11       2019-11-12 [1] CRAN (R 3.6.1)                  
#>  xtable         1.8-4      2019-04-21 [1] CRAN (R 3.5.3)                  
#>  xts            0.11-2     2018-11-05 [1] CRAN (R 3.6.0)                  
#>  yaml           2.2.0      2018-07-25 [1] CRAN (R 3.5.1)                  
#>  zoo            1.8-6      2019-05-28 [1] CRAN (R 3.6.0)                  
#> 
#> [1] C:/Users/inp099/Documents/R/win-library/3.6
#> [2] C:/Program Files/R/R-3.6.1/library
```

</details>

Had a conversation with @lauken13 and for e.g., logistic regression or other models where we may not want a long-tailed prior on the sigmas for the "random effects" it could be nice to allow a half-normal or something like that instead of requiring a gamma distribution on tau^2 in the decov prior. 
#### Summary:
It appears that in `stan_lm()`, `singular.ok` does the opposite of what it is supposed to do. I think the logic is backwards somewhere.

#### Description:
In the example below, I deleted a cell from the data which creates a singularity. With `singular = TRUE`, `stan_lm()` exits with an error while `singular = FALSE`, a coefficient is discarded. This is the opposite of what is done in `lm()`.

#### Reproducible Steps:
```r
> packageVersion("rstanarm")
[1] ‘2.19.2’

> ### stan_lm tests ###
> stan_lmT <- stan_lm(breaks ~ wool*tension, data = warpbreaks, 
+     subset = -(9:18), seed = 1776, prior = R2(0.5), singular.ok = TRUE)
Error in backsolve(R, diag(K)) : 
  singular matrix in 'backsolve'. First zero in diagonal [5]

> stan_lmF <- stan_lm(breaks ~ wool*tension, data = warpbreaks, 
+     subset = -(9:18), seed = 1776, prior = R2(0.5), singular.ok = FALSE)
> coef(stan_lmF)
   (Intercept)          woolB       tensionM       tensionH woolB:tensionH 
    40.1165632    -11.8845024      0.5421783    -15.2374347      6.9444381

> ### stats::lm tests -- just the opposite ###
> stats_lmT <- lm(breaks ~ wool*tension, data = warpbreaks, 
+     subset = -(9:18), singular.ok = TRUE)
> coef(stats_lmT)
   (Intercept)          woolB       tensionM       tensionH woolB:tensionM woolB:tensionH 
    41.7500000    -13.5277778      0.5555556    -17.1944444             NA      7.7500000 

> stats_lmF <- lm(breaks ~ wool*tension, data = warpbreaks, 
+     subset = -(9:18), singular.ok = FALSE)
Error in lm.fit(x, y, offset = offset, singular.ok = singular.ok, ...) : 
  singular fit encountered

> ### stan_aov has no singular.ok but discards variables when singular ###
> stan_aov_ <- stan_aov(breaks ~ wool*tension, data = warpbreaks, 
+     subset = -(9:18), seed = 1776, prior = R2(0.5))
> coef(stan_aov_)
   (Intercept)          woolB       tensionM       tensionH woolB:tensionH 
    40.1165632    -11.8845024      0.5421783    -15.2374347      6.9444381 
```


#### RStanARM Version:
2.19.2

#### R Version:
3.6.1

#### Operating System:
Windows 10 v 1903


#### Summary:
A simple model runs fast (as expected) in Stan but runs extremely slowly in rstanarm.

#### Description:
It's a regression model with collinear predictors and a proper and reasonably strong prior.  The posterior is fine and well behaved, but rstanarm mistakenly does some computations with the likelihood (rather than the posterior, or prior-augmented likelihood), causing major problems.

#### Reproducible Steps:

Here's the R code.
```
Ilibrary("rstanarm")
library("rstan")
library("cmdstanr")
x1 <- 1:5
x2 <- 1:5
y <- c(1,5,2,3,4)

stan_data <- list(N=length(y), y=y, x1=x1, x2=x2, mu_b=c(0,0,0), sigma_b=c(1,1,1))
model <- cmdstan_model("linear.stan")
fit_1 <- model$sample(data=stan_data, num_chains=4)
fit_1$diagnose()
fit_1$summary()

fake <- data.frame(x1, x2, y)
fit <- stan_glm(y ~ x1 + x2, data=fake, prior_intercept=normal(0, 1, autoscale=FALSE), prior=normal(0, 1, autoscale=FALSE))
```

And here's the Stan program, linear.stan:

```
data {
  int N;
  vector[N] x1;
  vector[N] x2;
  vector[N] y;
  vector[3] mu_b;
  vector<lower=0> [3] sigma_b;
}
parameters {
  vector[3] b;
  real<lower=0> sigma;
}
model {
  y ~ normal(b[1] + b[2]*x1 + b[3]*x2, sigma);
  b ~ normal(mu_b, sigma_b);
}
```

#### RStanARM Version:
Version 2.19.2

#### R Version:
R version 3.6.1

#### Operating System:
macOS Catalina, 10.15.1 (but the problem occurs under other operating systems as well)
