GitHub supports GitHub Package to release private gem nowadays. You may not need to host your own private rubygems server with geminabox. Check it out.
https://help.github.com/github/managing-packages-with-github-packages/configuring-rubygems-for-use-with-github-packages
Hello,

I was wondering if there is any plan to add support for `GET - /api/v1/gems/[GEM NAME].(json|yaml)` API  

https://guides.rubygems.org/rubygems-org-api/#gem-methods


I updated the GUI to: 

* [Boostrap 4](https://getbootstrap.com/)
* [jQuery Datatables](https://datatables.net/examples/styling/bootstrap4)
* [RestfulizerJs](https://github.com/Ifnot/RestfulizerJs)

Also made some small modifications to the Sinatra app so it redirects properly using Bootstrap.
A great tool - but one deficiency we have come across is this:

Maintaining an application longer term sees the OS platform migrate through consecutive versions.

A subset of gems require compilation. To avoid the need for build env / tools in application docker images, such gems can be compiled once, and both the uncompiled and compiled version pushed to geminabox. This works out-of the-box, the two resulting gems are differentiated by a platform tag added by the build process. The geminabox UI displays:

```
gem install nokogiri -v "1.6.8.1" x86_64-linux
gem install nokogiri -v "1.6.8.1"
```

So far so good - but we need to maintain builds on different OS versions of the same platform (eg SLES&lt;x&gt;SP&lt;y&gt;). This introduces a name clash. The workaround used is to maintain separate instances of geminabox for each OS flavour, with the associated maintenance overhead.

Can geminabox be enhanced to cater for this? Maybe one optional directory level and corresponding segregation in internal the storage can be added to the url  (I've not tested if this works, but the idea would be to add such a dir in the `source` field of the apps Gemfile?).

```
http://my_geminabox/sles11SP3
http://my_geminabox/sles12SP1
```

 



It seems that there is no _official_ image for geminabox on Docker Hub.
I can find only [various inofficial ones](https://hub.docker.com/search?q=geminabox&type=image).

Having official images would probably help everyone looking for a proper geminabox installation that won't be outdated soonish.
Thank you for Gem in a box.

It would be nice if the Dockerfile would create a non privileged user instead of root.

For example [like described here](https://medium.com/@mccode/processes-in-containers-should-not-run-as-root-2feae3f0df3b).
We ran into the issue that if geminabox is configured as proxy and multiple clients are connecting the service becomes completely unresponsive as geminabox downloads the index and merges it for every single request.

I implemented some simple caching by using the gem 'cachy' which can use different backend based on the requirements of the deployment. It can simply use moneta with a file store if geminabox is running on a single node or something like memcached if the cache should be shared among multiple nodes.

The implementation is pretty simple and if nothing is configured everything will behave as it currently does.

I'm not sure if this is something you even want to include, but I thought if others have the same issue there is at least a patch available or an idea how this can be solved. We are running this in production for almost a year now and so far we had no issues.
Hi,

we run a geminabox-Server in our company. When deleting the Gemfile.lock and running `bundle install --verbose` on our projects, we're getting the following error:

`
Running 'bundle install --verbose' with bundler 2.0.1
Found changes from the lockfile, re-resolving dependencies because bundler is unlocking gems: (OUR_GEM), ruby
HTTP GET http://OUR_GEMSERVER:3000/versions
HTTP 404 Not Found http://OUR_GEMSERVER:3000/versions
Bundler::Fetcher::FallbackError: Net::HTTPNotFound
C:/Ruby24/lib/ruby/gems/2.4.0/gems/bundler-2.0.1/lib/bundler/fetcher/downloader.rb:40:in 'fetch'
  C:/Ruby24/lib/ruby/gems/2.4.0/gems/bundler-2.0.1/lib/bundler/fetcher/compact_index.rb:117:in 'call'
  C:/Ruby24/lib/ruby/gems/2.4.0/gems/bundler-2.0.1/lib/bundler/compact_index_client/updater.rb:53:in 'block in update'
  C:/Ruby24/lib/ruby/2.4.0/tmpdir.rb:89:in 'mktmpdir'
  C:/Ruby24/lib/ruby/gems/2.4.0/gems/bundler-2.0.1/lib/bundler/compact_index_client/updater.rb:31:in 'update'
  C:/Ruby24/lib/ruby/gems/2.4.0/gems/bundler-2.0.1/lib/bundler/compact_index_client.rb:82:in 'update'
  C:/Ruby24/lib/ruby/gems/2.4.0/gems/bundler-2.0.1/lib/bundler/compact_index_client.rb:69:in 'update_and_parse_checksums!'
  C:/Ruby24/lib/ruby/gems/2.4.0/gems/bundler-2.0.1/lib/bundler/fetcher/compact_index.rb:69:in 'available?'
  C:/Ruby24/lib/ruby/gems/2.4.0/gems/bundler-2.0.1/lib/bundler/fetcher/compact_index.rb:16:in 'call'
  C:/Ruby24/lib/ruby/gems/2.4.0/gems/bundler-2.0.1/lib/bundler/fetcher/compact_index.rb:16:in 'block in compact_index_request'
  C:/Ruby24/lib/ruby/gems/2.4.0/gems/bundler-2.0.1/lib/bundler/fetcher.rb:158:in 'use_api'
  C:/Ruby24/lib/ruby/gems/2.4.0/gems/bundler-2.0.1/lib/bundler/source/rubygems.rb:382:in 'block in api_fetchers'
  C:/Ruby24/lib/ruby/gems/2.4.0/gems/bundler-2.0.1/lib/bundler/source/rubygems.rb:382:in 'select'
[...]
`

The Gemfile only uses our geminabox-Server:

`
source 'http://OUR_GEMSERVER:3000'
[...]
`

The path to /versions on our geminabox-Server does not exist, so we're getting this error. 

What could we do, what is wrong?
I'm getting `NameError - uninitialized constant Gem::Util:` with the latest version 1.1.1 on rubygems.org

```
2019-04-16 17:45:55 - NameError - uninitialized constant Gem::Util:
	/var/lib/gems/2.3.0/gems/geminabox-1.1.1/lib/geminabox/server.rb:247:in `block in all_gems_with_duplicates'
	/var/lib/gems/2.3.0/gems/geminabox-1.1.1/lib/geminabox/server.rb:245:in `map'
	/var/lib/gems/2.3.0/gems/geminabox-1.1.1/lib/geminabox/server.rb:245:in `all_gems_with_duplicates'
	/var/lib/gems/2.3.0/gems/geminabox-1.1.1/lib/geminabox/server.rb:241:in `all_gems'
	/var/lib/gems/2.3.0/gems/geminabox-1.1.1/lib/geminabox/server.rb:269:in `load_gems'
	/var/lib/gems/2.3.0/gems/geminabox-1.1.1/lib/geminabox/server.rb:90:in `block in <class:Server>'
	/var/lib/gems/2.3.0/gems/sinatra-2.0.5/lib/sinatra/base.rb:1635:in `call'
	/var/lib/gems/2.3.0/gems/sinatra-2.0.5/lib/sinatra/base.rb:1635:in `block in compile!'
	/var/lib/gems/2.3.0/gems/sinatra-2.0.5/lib/sinatra/base.rb:992:in `block (3 levels) in route!'
	/var/lib/gems/2.3.0/gems/sinatra-2.0.5/lib/sinatra/base.rb:1011:in `route_eval'
	/var/lib/gems/2.3.0/gems/sinatra-2.0.5/lib/sinatra/base.rb:992:in `block (2 levels) in route!'
	/var/lib/gems/2.3.0/gems/sinatra-2.0.5/lib/sinatra/base.rb:1040:in `block in process_route'
	/var/lib/gems/2.3.0/gems/sinatra-2.0.5/lib/sinatra/base.rb:1038:in `catch'
	/var/lib/gems/2.3.0/gems/sinatra-2.0.5/lib/sinatra/base.rb:1038:in `process_route'
	/var/lib/gems/2.3.0/gems/sinatra-2.0.5/lib/sinatra/base.rb:990:in `block in route!'
	/var/lib/gems/2.3.0/gems/sinatra-2.0.5/lib/sinatra/base.rb:989:in `each'
	/var/lib/gems/2.3.0/gems/sinatra-2.0.5/lib/sinatra/base.rb:989:in `route!'
	/var/lib/gems/2.3.0/gems/sinatra-2.0.5/lib/sinatra/base.rb:1097:in `block in dispatch!'
	/var/lib/gems/2.3.0/gems/sinatra-2.0.5/lib/sinatra/base.rb:1076:in `block in invoke'
	/var/lib/gems/2.3.0/gems/sinatra-2.0.5/lib/sinatra/base.rb:1076:in `catch'
	/var/lib/gems/2.3.0/gems/sinatra-2.0.5/lib/sinatra/base.rb:1076:in `invoke'
	/var/lib/gems/2.3.0/gems/sinatra-2.0.5/lib/sinatra/base.rb:1094:in `dispatch!'
	/var/lib/gems/2.3.0/gems/sinatra-2.0.5/lib/sinatra/base.rb:924:in `block in call!'
	/var/lib/gems/2.3.0/gems/sinatra-2.0.5/lib/sinatra/base.rb:1076:in `block in invoke'
	/var/lib/gems/2.3.0/gems/sinatra-2.0.5/lib/sinatra/base.rb:1076:in `catch'
	/var/lib/gems/2.3.0/gems/sinatra-2.0.5/lib/sinatra/base.rb:1076:in `invoke'
	/var/lib/gems/2.3.0/gems/sinatra-2.0.5/lib/sinatra/base.rb:924:in `call!'
	/var/lib/gems/2.3.0/gems/sinatra-2.0.5/lib/sinatra/base.rb:913:in `call'
	/var/lib/gems/2.3.0/gems/sinatra-2.0.5/lib/sinatra/base.rb:971:in `forward'
	/var/lib/gems/2.3.0/gems/sinatra-2.0.5/lib/sinatra/base.rb:1056:in `route_missing'
	/var/lib/gems/2.3.0/gems/sinatra-2.0.5/lib/sinatra/base.rb:1006:in `route!'
	/var/lib/gems/2.3.0/gems/sinatra-2.0.5/lib/sinatra/base.rb:1002:in `route!'
	/var/lib/gems/2.3.0/gems/sinatra-2.0.5/lib/sinatra/base.rb:1097:in `block in dispatch!'
	/var/lib/gems/2.3.0/gems/sinatra-2.0.5/lib/sinatra/base.rb:1076:in `block in invoke'
	/var/lib/gems/2.3.0/gems/sinatra-2.0.5/lib/sinatra/base.rb:1076:in `catch'
	/var/lib/gems/2.3.0/gems/sinatra-2.0.5/lib/sinatra/base.rb:1076:in `invoke'
	/var/lib/gems/2.3.0/gems/sinatra-2.0.5/lib/sinatra/base.rb:1094:in `dispatch!'
	/var/lib/gems/2.3.0/gems/sinatra-2.0.5/lib/sinatra/base.rb:924:in `block in call!'
	/var/lib/gems/2.3.0/gems/sinatra-2.0.5/lib/sinatra/base.rb:1076:in `block in invoke'
	/var/lib/gems/2.3.0/gems/sinatra-2.0.5/lib/sinatra/base.rb:1076:in `catch'
	/var/lib/gems/2.3.0/gems/sinatra-2.0.5/lib/sinatra/base.rb:1076:in `invoke'
	/var/lib/gems/2.3.0/gems/sinatra-2.0.5/lib/sinatra/base.rb:924:in `call!'
	/var/lib/gems/2.3.0/gems/sinatra-2.0.5/lib/sinatra/base.rb:913:in `call'
	/var/lib/gems/2.3.0/gems/rack-protection-2.0.5/lib/rack/protection/xss_header.rb:18:in `call'
	/var/lib/gems/2.3.0/gems/rack-protection-2.0.5/lib/rack/protection/path_traversal.rb:16:in `call'
	/var/lib/gems/2.3.0/gems/rack-protection-2.0.5/lib/rack/protection/json_csrf.rb:26:in `call'
	/var/lib/gems/2.3.0/gems/rack-protection-2.0.5/lib/rack/protection/base.rb:50:in `call'
	/var/lib/gems/2.3.0/gems/rack-protection-2.0.5/lib/rack/protection/base.rb:50:in `call'
	/var/lib/gems/2.3.0/gems/rack-protection-2.0.5/lib/rack/protection/frame_options.rb:31:in `call'
	/var/lib/gems/2.3.0/gems/rack-2.0.7/lib/rack/null_logger.rb:9:in `call'
	/var/lib/gems/2.3.0/gems/rack-2.0.7/lib/rack/head.rb:12:in `call'
	/var/lib/gems/2.3.0/gems/sinatra-2.0.5/lib/sinatra/show_exceptions.rb:22:in `call'
	/var/lib/gems/2.3.0/gems/sinatra-2.0.5/lib/sinatra/base.rb:194:in `call'
	/var/lib/gems/2.3.0/gems/sinatra-2.0.5/lib/sinatra/base.rb:1957:in `call'
	/var/lib/gems/2.3.0/gems/rack-protection-2.0.5/lib/rack/protection/xss_header.rb:18:in `call'
	/var/lib/gems/2.3.0/gems/rack-protection-2.0.5/lib/rack/protection/path_traversal.rb:16:in `call'
	/var/lib/gems/2.3.0/gems/rack-protection-2.0.5/lib/rack/protection/json_csrf.rb:26:in `call'
	/var/lib/gems/2.3.0/gems/rack-protection-2.0.5/lib/rack/protection/base.rb:50:in `call'
	/var/lib/gems/2.3.0/gems/rack-protection-2.0.5/lib/rack/protection/base.rb:50:in `call'
	/var/lib/gems/2.3.0/gems/rack-protection-2.0.5/lib/rack/protection/frame_options.rb:31:in `call'
	/var/lib/gems/2.3.0/gems/rack-2.0.7/lib/rack/null_logger.rb:9:in `call'
	/var/lib/gems/2.3.0/gems/rack-2.0.7/lib/rack/head.rb:12:in `call'
	/var/lib/gems/2.3.0/gems/rack-2.0.7/lib/rack/method_override.rb:22:in `call'
	/var/lib/gems/2.3.0/gems/sinatra-2.0.5/lib/sinatra/show_exceptions.rb:22:in `call'
	/var/lib/gems/2.3.0/gems/sinatra-2.0.5/lib/sinatra/base.rb:194:in `call'
	/var/lib/gems/2.3.0/gems/sinatra-2.0.5/lib/sinatra/base.rb:1957:in `call'
	/var/lib/gems/2.3.0/gems/sinatra-2.0.5/lib/sinatra/base.rb:1502:in `block in call'
	/var/lib/gems/2.3.0/gems/sinatra-2.0.5/lib/sinatra/base.rb:1729:in `synchronize'
	/var/lib/gems/2.3.0/gems/sinatra-2.0.5/lib/sinatra/base.rb:1502:in `call'
	/var/lib/gems/2.3.0/gems/rack-2.0.7/lib/rack/auth/basic.rb:25:in `call'
	/var/lib/gems/2.3.0/gems/rack-2.0.7/lib/rack/tempfile_reaper.rb:15:in `call'
	/var/lib/gems/2.3.0/gems/rack-2.0.7/lib/rack/lint.rb:49:in `_call'
	/var/lib/gems/2.3.0/gems/rack-2.0.7/lib/rack/lint.rb:37:in `call'
	/var/lib/gems/2.3.0/gems/rack-2.0.7/lib/rack/show_exceptions.rb:23:in `call'
	/var/lib/gems/2.3.0/gems/rack-2.0.7/lib/rack/common_logger.rb:33:in `call'
	/var/lib/gems/2.3.0/gems/sinatra-2.0.5/lib/sinatra/base.rb:231:in `call'
	/var/lib/gems/2.3.0/gems/rack-2.0.7/lib/rack/chunked.rb:54:in `call'
	/var/lib/gems/2.3.0/gems/rack-2.0.7/lib/rack/content_length.rb:15:in `call'
	/var/lib/gems/2.3.0/gems/rack-2.0.7/lib/rack/handler/webrick.rb:86:in `service'
	/usr/lib/ruby/2.3.0/webrick/httpserver.rb:140:in `service'
	/usr/lib/ruby/2.3.0/webrick/httpserver.rb:96:in `run'
	/usr/lib/ruby/2.3.0/webrick/server.rb:296:in `block in start_thread'
```

I'm trying to start geminabox using `rackup --host 0.0.0.0 config.ru`.
My `config.ru` is straight-forward as provided in the [readme](https://github.com/geminabox/geminabox#server-setup) with the following changes :
* `Geminbox.data` pointing to my actual data directory (obviously)
* `Rack::Auth:Basic`

I don't face this issue on version 1.1.0
I've been getting a HTTP 400 Bad Request whenever I'm trying to upload a gem via the gem push command while having the Basic Auth configured as per README/Wiki. 

What I've found out is that the the gem command will happily use HTTP basic auth for GET operations against a gem server, the gem push command specifically ignores any configured basic auth and will use any configured rubygems.org API key instead, resulting Rack::Auth::Basic throwing a 400 (instead of a 401/403 which I'd have expected in that case).

Looking at lib/ruby/2.6.0/rubygems/commands/push_command.rb:133 it seems there is no way to tell the gem push command to use basic auth instead of the API Key; which means in a company where lots of developers have their own gems which they maintain privately, there is no way to push gems to geminabox via the gem push command without gathering the API keys of each developer.

I think this caveat should be prominently displayed at the start of the basic auth documentations, since this interaction and behavior of gems isn't really intuitive or expected.