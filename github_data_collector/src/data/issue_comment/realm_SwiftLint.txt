GitHub Pages is made in #3016.
It would be nice to be able to open in browser easily.

In this PR, `path/to/swiftlint show-docs` command will open https://realm.github.io/SwiftLint in default browser.
### New Issue Checklist

- [x] Updated SwiftLint to the latest version
- [x] I searched for [existing GitHub issues](https://github.com/realm/SwiftLint/issues)

### Describe the bug

When the `indentation_width` is enabled, it would give warning on a multiple cases in different lines for switch-case statement:

Sample:

```swift

switch enumValue {
	case .value1,
	     .value2:
		print("warning above")

	case .value3:
		print("No warning on this")
}

```

##### Complete output when running SwiftLint, including the stack trace and command used

```bash
$ swiftlint lint
```

```
file.swift:32:1: warning: Indentation Width Violation: Code should be indented with tabs or 4 spaces, but not both in the same line. (indentation_width)
```
### Environment

* SwiftLint version (run `swiftlint version` to be sure)? `0.38.2`
* Installation method used (Homebrew, CocoaPods, building from source, etc)? `CocoaPods`
* Paste your configuration file:

```
excluded: # paths to ignore during linting. Takes precedence over `included`.
  - Carthage
  - Pods

opt_in_rules:
  - anyobject_protocol
  - array_init
  - attributes
  - block_based_kvo
  - class_delegate_protocol
  - closing_brace
  - closure_body_length
  - closure_end_indentation
  - closure_parameter_position
  - closure_spacing
  - collection_alignment
  - colon
  - comma
  - compiler_protocol_init
  - conditional_returns_on_newline
  - contains_over_filter_count
  - contains_over_filter_is_empty
  - contains_over_first_not_nil
  - contains_over_range_nil_comparison
  - control_statement
  - convenience_type
  - custom_rules
  - cyclomatic_complexity
  - discarded_notification_center_observer
  - discouraged_direct_init
  #- discouraged_object_literal
  #- discouraged_optional_boolean
  #- discouraged_optional_collection
  - duplicate_imports
  - dynamic_inline
  - empty_collection_literal
  - empty_count
  - empty_enum_arguments
  - empty_parameters
  - empty_parentheses_with_trailing_closure
  - empty_string
  - empty_xctest_method
  - enum_case_associated_values_count
  - expiring_todo
  #- explicit_acl
  #- explicit_enum_raw_value
  - explicit_init
  - explicit_self
  # - explicit_top_level_acl
  #- explicit_type_interface
  #- extension_access_modifier
  - fallthrough
  - fatal_error_message
  #- file_header
  - file_length
  - file_name
  - file_name_no_space
  #- file_types_order
  - first_where
  - flatmap_over_map_reduce
  - for_where
  - force_cast
  - force_try
  - force_unwrapping
  - function_body_length
  - function_default_parameter_at_end
  - function_parameter_count
  - generic_type_name
  - identical_operands
  - identifier_name
  - implicit_getter
  - implicit_return
  - implicitly_unwrapped_optional
  - indentation_width
  - inert_defer
  - is_disjoint
  - joined_default_parameter
  - large_tuple
  - last_where
  - leading_whitespace
  - legacy_cggeometry_functions
  - legacy_constant
  - legacy_constructor
  - legacy_hashing
  - legacy_multiple
  - legacy_nsgeometry_functions
  - legacy_random
  - let_var_whitespace
  - line_length
  - literal_expression_end_indentation
  - lower_acl_than_parent
  - mark
  - missing_docs
  - modifier_order
  - multiline_arguments
  - multiline_arguments_brackets
  - multiline_function_chains
  - multiline_literal_brackets
  - multiline_parameters
  - multiline_parameters_brackets
  - multiple_closures_with_trailing_closure
  - nesting
  - nimble_operator
  #- no_extension_access_modifier
  - no_fallthrough_only
  - no_grouping_extension
  - notification_center_detachment
  - number_separator
  - nslocalizedstring_key
  - object_literal
  - opening_brace
  - operator_usage_whitespace
  - operator_whitespace
  - optional_enum_case_matching
  - overridden_super_call
  #- override_in_extension
  - pattern_matching_keywords
  - prefer_self_type_over_type_of_self
  - prefixed_toplevel_constant
  - private_action
  - private_outlet
  - private_over_fileprivate
  - private_unit_test
  # - prohibited_interface_builder
  - prohibited_super_call
  - protocol_property_accessors_order
  - quick_discouraged_call
  - quick_discouraged_focused_test
  - quick_discouraged_pending_test
  - raw_value_for_camel_cased_codable_enum
  - reduce_boolean
  - reduce_into
  - redundant_discardable_let
  - redundant_nil_coalescing
  - redundant_objc_attribute
  - redundant_optional_initialization
  - redundant_set_access_control
  - redundant_string_enum_value
  - redundant_type_annotation
  - redundant_void_return
  # - required_deinit
  - required_enum_case
  - return_arrow_whitespace
  - shorthand_operator
  - single_test_class
  - sorted_first_last
  - sorted_imports
  - statement_position
  - static_operator
  - strict_fileprivate
  - strong_iboutlet
  - superfluous_disable_command
  - switch_case_alignment
  - switch_case_on_newline
  - syntactic_sugar
  - todo
  - toggle_bool
  - trailing_closure
  - trailing_comma
  - trailing_newline
  - trailing_semicolon
  - trailing_whitespace
  - type_body_length
  #- type_contents_order
  - type_name
  - unavailable_function
  - unneeded_break_in_switch
  - unneeded_parentheses_in_closure_argument
  - unowned_variable_capture
  - untyped_error_in_catch
  - unused_capture_list
  - unused_closure_parameter
  - unused_control_flow_label
  - unused_declaration
  - unused_enumerated
  - unused_import
  - unused_optional_binding
  - unused_setter_value
  - valid_ibinspectable
  - vertical_parameter_alignment
  - vertical_parameter_alignment_on_call
  - vertical_whitespace
  - vertical_whitespace_between_cases
  - vertical_whitespace_closing_braces
  - vertical_whitespace_opening_braces
  - void_return
  - weak_delegate
  - xctfail_message
  - xct_specific_matcher
  - yoda_condition


# rule parameters


indentation: 4

#conditional_returns_on_newline:
#  if_only: true

file_length:
  warning: 600
  error: 1000
  ignore_comment_only_lines: true

cyclomatic_complexity:
  ignores_case_statements: true
  warning: 10
  error: 20

nesting:
  type_level:
    warning: 6
  statement_level:
    warning: 6

function_body_length:
  warning: 40
  error: 100

line_length: 150

type_body_length:
  warning: 400
  error: 500

large_tuple:
  warning: 4
  error: 6

identifier_name:
  excluded:
    - to
    - id
    - by
    - of
    - at
    - !str on
    - x
    - y
    - L
    - mr
    - ms
    - dr

private_outlet:
  allow_private_set: true
  allows_public_getter: true

indentation: tabs

multiline_arguments:
  only_enforce_after_first_closure_on_first_line: true

```

```yml
# insert yaml contents here
```

* Are you using [nested configurations](https://github.com/realm/SwiftLint#nested-configurations)?
  If so, paste their relative paths and respective contents. `No`
* Which Xcode version are you using (check `xcodebuild -version`)? `Xcode 11.3`
* Do you have a sample that shows the issue? Run `echo "[string here]" | swiftlint lint --no-cache --use-stdin --enable-all-rules`
  to quickly test if your example is really demonstrating the issue. If your example is more
  complex, you can use `swiftlint lint --path [file here] --no-cache --enable-all-rules`.

```swift

switch enumValue {
	case .value1,
	     .value2: // This triggers a violation:
		print("warning above")

	case .value3:
		print("No warning on this")
}

```

Is it still possible to write compiling Swift code that overrides in an extension? I tried this code sample and Xcode generates an error, (Swift 5.1)
```
import Foundation

@objc class Class: NSObject {
  @objc func str() -> String {
    return "Hello, playground"
  }
}

class Subclass: Class {

}

extension Subclass {
  override func str() -> String {
    return "Hi"
  }
}
```
Error: `Cannot override a non-dynamic class declaration from an extension`
### New Issue Checklist

- [x] Updated SwiftLint to the latest version
- [x] I searched for [existing GitHub issues](https://github.com/realm/SwiftLint/issues)

### Describe the bug

The `optional_enum_case_matching` rule is triggered when switching over an optional `struct` with cases that are `static` members of the `struct`.  In these instances, removing the `?` on the `case` results in code that doesn't compile (Xcode 11.1).

##### Complete output when running SwiftLint, including the stack trace and command used

```bash
$ swiftlint lint --use-stdin --enable-all-rules
/// Test struct
public struct Foo: Equatable {
    public static let bar: Foo = .init(foo: "bar")

    public let foo: String
}

/// Test variable
public var something: Foo?

switch something {
case .bar?:
    print("bar")

default:
    print("default")
}
<nopath>:12:10: warning: Optional Enum Case Match Violation: Matching an enum case against an optional enum without '?' is supported on Swift 5.1 and above.  (optional_enum_case_matching)
Done linting! Found 1 violation, 0 serious in 1 file.
```

### Environment

* SwiftLint version (run `swiftlint version` to be sure)?  
**0.38.2**
* Installation method used (Homebrew, CocoaPods, building from source, etc)?  
**CocoaPods**
* Paste your configuration file  
**n/a**
* Are you using [nested configurations](https://github.com/realm/SwiftLint#nested-configurations)?
  If so, paste their relative paths and respective contents.  
**n/a**
* Which Xcode version are you using (check `xcodebuild -version`)?  
**Xcode 11.1, Build version 11A1027**
* Do you have a sample that shows the issue? Run `echo "[string here]" | swiftlint lint --no-cache --use-stdin --enable-all-rules`
  to quickly test if your example is really demonstrating the issue. If your example is more
  complex, you can use `swiftlint lint --path [file here] --no-cache --enable-all-rules`.  
**see above**
### New Issue Checklist

- [x] Updated SwiftLint to the latest version
- [x] I searched for [existing GitHub issues](https://github.com/realm/SwiftLint/issues)

### New rule request

Currently the `opening_brace` rule works for methods to enforce the following condition:
```
func foo() {
    // some code
}
```

But in the case where the method name and/or parameters exceeds you column limit, some folks will have this automatically/manually wrap to the next line. This is quite common when using Cocoa types as they have very descriptive and long names (eg: `NSAccessibility.ParameterizedAttribute.layoutPointForScreenPoint`)
```
func aReallyLongMethod(named: String, with: Int, many: String
    vars: ACrazyLongLongReallyLongProtocolNameDelegate) {
    // some code
}
```

In the above instance I find to improve [local reasoning](http://iosbrain.com/blog/2018/03/28/protocol-oriented-programming-in-swift-is-it-better-than-object-oriented-programming/) that having the curly brace on the next line makes it much easier to read:
```
func aReallyLongMethod(named: String, with: Int, many: String
    vars: ACrazyLongLongReallyLongProtocolNameDelegate) 
{
    // some code
}
```

Granted, I could just disable this rule for this instance. But I have to add the following comments:
```
// swiftlint:disable opening_brace
func aReallyLongMethod(named: String, with: Int, many: String
    vars: ACrazyLongLongReallyLongProtocolNameDelegate) 
{
// swiftlint:enable opening_brace
    // some code
}
```

Obviously I could clean that up, but it just eats up vertical space and makes it even harder to read. I have no clue how to write this custom rule, but it would be great to have this as a parameter in the `opening_brace` rule that the user can enable. I imagine this would be an opt-in parameter.

I'm open to thoughts and discussion about this proposal, and I'm happy to put the work in on the programming side to help make it happen.

Thanks,
GW

Hi :)

What do you think about this configuration option? I'm open to rename the options `top` and `bottom` to `first` and `last`.
Fixes #3035 

- [x] Make it work.
- [x] Finish adding `Example` literal init to all strings and remove `ExpressibleByStringLiteral` conformance from `Example` type.
- [x] Find out whether we can remove trailing `\n` from the many test cases that have them.
- [x] ~Remove trailing newlines from all examples where possible.~ rolled back because it was too invasive
- [x] Resolve file and line length warnings.
- [x] fix broken tests
- [ ] merge https://github.com/ZevEisenberg/SwiftLint/pull/1

@jpsim here's a start! I took a pretty lazy approach to converting files over to the new format, opting for an `ExpressibleByStringLiteral` band-aid (that [doesn't even partially work](https://bugs.swift.org/browse/SR-12034)) just so I can get it up and running. Before merging, we'll need to go through and add an explicit `Example(...)` initializer to literally every example.

I've also been pretty liberal with smashing things in order to get it all compiling, so I'm very open to ideas if you have suggestions for how to make the PR more conservative.

I have two open questions that I'd love some feedback on:

1. A ton of examples have a trailing `\n`, but not all of them do. Do you know why it's there? Can I delete those newlines? Here's an example: `"public func a() {}\n"`.
1. Some of the file and line length warnings don't seem that useful on a project like this, where file length isn't a good indicator of code complexity. it's just a bunch of "data"-like string literals, and sometimes the file gets longer just because we wrap lines to make them clearer. However, I'm not the project owner, so I'd appreciate any guidance you have on how to get around those warnings.
### New Issue Checklist

- [x] Updated SwiftLint to the latest version
- [x] I searched for [existing GitHub issues](https://github.com/realm/SwiftLint/issues)

### Describe the bug

At Codacy, we are using SwiftLint to analyse Swift code.

We are trying to use a custom configuration file by passing it to `--config` param.
If the source code directory contains a `.swiftlint.yml` file and we run SwiftLint with a custom configuration on 2 or more specific files (by passing them as param to the command), it ignores the custom the configuration and uses `.swiftlint.yml` file present inside the source code directory.

If I run the same command but specifying only 1 file or a directory with multiple files inside, it uses the custom configuration file we are providing.

##### Example

As an example, we have a `/src` folder with the following files:

* `dynamic_inline.swift` - with dynamic_inline violation:
```swift

    class C {
    @inline(__always) dynamic func f() {}
    }

    class C {
    @inline(__always) public dynamic func f() {}
    }

    class C {
    @inline(__always) dynamic internal func f() {}
    }

    class C {
    @inline(__always)
    dynamic func f() {}
    }

    class C {
    @inline(__always)
    dynamic
    func f() {}
    }
```
* `closing_brace.swift` - with closing_brace violation:
```swift
    [].map({ } )

    [].map({ }	)


```

* `.test.yml` file:

```
whitelist_rules:
  - dynamic_inline
```
* `.swiftlint.yml` file:

```
whitelist_rules:
  - closing_brace
```

With this source folder, we are making these tests:

1) Custom configuration file (`.test.yml`) and analysing 1 file - returns the expected result

```bash
$ swiftlint lint --config /src/.test.yml /src/dynamic_inline.swift

Loading configuration from '/src/.test.yml'
Linting Swift files at paths /src/dynamic_inline.swift
Linting 'dynamic_inline.swift' (1/1)
/src/dynamic_inline.swift:3:31: error: Dynamic Inline Violation: Avoid using 'dynamic' and '@inline(__always)' together. (dynamic_inline)
/src/dynamic_inline.swift:7:38: error: Dynamic Inline Violation: Avoid using 'dynamic' and '@inline(__always)' together. (dynamic_inline)
/src/dynamic_inline.swift:11:40: error: Dynamic Inline Violation: Avoid using 'dynamic' and '@inline(__always)' together. (dynamic_inline)
/src/dynamic_inline.swift:16:13: error: Dynamic Inline Violation: Avoid using 'dynamic' and '@inline(__always)' together. (dynamic_inline)
/src/dynamic_inline.swift:22:5: error: Dynamic Inline Violation: Avoid using 'dynamic' and '@inline(__always)' together. (dynamic_inline)
Done linting! Found 5 violations, 5 serious in 1 file.
```

2) Custom configuration file (`.test.yml`) and analysing entire *src* folder - returns the expected result

```bash
$ swiftlint lint --config /src/.test.yml /src/

Loading configuration from '/src/.test.yml'
Linting Swift files at paths /src/dynamic_inline.swift
Linting 'dynamic_inline.swift' (1/1)
/src/dynamic_inline.swift:3:31: error: Dynamic Inline Violation: Avoid using 'dynamic' and '@inline(__always)' together. (dynamic_inline)
/src/dynamic_inline.swift:7:38: error: Dynamic Inline Violation: Avoid using 'dynamic' and '@inline(__always)' together. (dynamic_inline)
/src/dynamic_inline.swift:11:40: error: Dynamic Inline Violation: Avoid using 'dynamic' and '@inline(__always)' together. (dynamic_inline)
/src/dynamic_inline.swift:16:13: error: Dynamic Inline Violation: Avoid using 'dynamic' and '@inline(__always)' together. (dynamic_inline)
/src/dynamic_inline.swift:22:5: error: Dynamic Inline Violation: Avoid using 'dynamic' and '@inline(__always)' together. (dynamic_inline)
Done linting! Found 5 violations, 5 serious in 1 file.
```

3) Custom configuration file (`.test.yml`) and analysing 2 or more files - returns result different from the expected

```bash
$ swiftlint lint --config /src/.test.yml /src/dynamic_inline.swift /src/closing_brace.swift

Loading configuration from '/src/.test.yml'
Linting Swift files at paths /src/dynamic_inline.swift, /src/closing_brace.swift
Linting 'closing_brace.swift' (1/2)
Linting 'dynamic_inline.swift' (2/2)
/src/closing_brace.swift:1:14: warning: Closing Brace Spacing Violation: Closing brace with closing parenthesis should not have any whitespaces in the middle. (closing_brace)
/src/closing_brace.swift:3:14: warning: Closing Brace Spacing Violation: Closing brace with closing parenthesis should not have any whitespaces in the middle. (closing_brace)
Done linting! Found 2 violations, 0 serious in 2 files.
```


### Environment

* SwiftLint version: 0.38.2

### New Issue Checklist

- [- ] Updated SwiftLint to the latest version
- [ -] I searched for [existing GitHub issues](https://github.com/realm/SwiftLint/issues)

### Describe the bug

hello-1.swift is not excluded when execute swiftlint in /tmp dir:

```bash
$  tree /tmp/swiftlint-excluded-issue
/tmp/swiftlint-excluded-issue
├── 1.swift
├── 2.swift
├── config.yaml
└── hello-1.swift

0 directories, 4 files

$  cd /tmp && swiftlint --path /tmp/swiftlint-excluded-issue --config /tmp/swiftlint-excluded-issue/config.yaml
Loading configuration from '/tmp/swiftlint-excluded-issue/config.yaml'
Linting Swift files at paths /tmp/swiftlint-excluded-issue
Linting '2.swift' (1/2)
Linting 'hello-1.swift' (2/2)
Done linting! Found 0 violations, 0 serious in 2 files.

$ cd /tmp/swiftlint-excluded-issue && swiftlint --path /tmp/swiftlint-excluded-issue --config /tmp/swiftlint-excluded-issue/config.yaml
Loading configuration from '/tmp/swiftlint-excluded-issue/config.yaml'
Linting Swift files at paths /tmp/swiftlint-excluded-issue
Linting '2.swift' (1/1)
Done linting! Found 0 violations, 0 serious in 1 file.

```

### Environment

* SwiftLint version: 0.38.2 
* Installation method used Homebrew
* Paste your configuration file:

```yml
excluded:
  - 1.swift
  - "hello-*.swift"
```
### New Issue Checklist

- [x] Updated SwiftLint to the latest version
- [x] I searched for [existing GitHub issues](https://github.com/realm/SwiftLint/issues)

### Describe the bug

When developing rules and fixing bugs, trying to correlate the test output with the code can be difficult. It would be nicer if incorrectly triggered or ignored examples were highlighted in Xcode like other test failures.

This would be possible with the technique I describe in this blog post: [XCTest Line by Line](https://www.rightpoint.com/rplabs/2019/03/xctest-line-by-line/)

As a quick sketch, it would transform the test case declarations from this:

```swift
public static let description = RuleDescription(
    identifier: "foo",
    name: "Foo",
    description: "some description",
    kind: .idiomatic,
    minSwiftVersion: .fourDotOne,
    nonTriggeringExamples: [
        """
        enum SomeExample { }
        """, // etc
```

to something more like this:

```swift
public static let description = RuleDescription(
    identifier: "foo",
    name: "Foo",
    description: "some description",
    kind: .idiomatic,
    minSwiftVersion: .fourDotOne,
    nonTriggeringExamples: [
        Example("""
        enum SomeExample {}
        """), // etc etc
```

The addition of the `Example` wrapper struct would capture the file and line number, which would be passed to the `XCTest` methods, ensuring that failures are reflected on the correct line. The initializer of the `Example` struct would have to look like this:

```swift
// "example" parameter could also be a StaticString if you want to encourage
// passing string literals to aid in debugging
init(_ example: String, file: StaticString = #file, line: Uint = #line)
```

I'd be interested in contributing a PR to address this.