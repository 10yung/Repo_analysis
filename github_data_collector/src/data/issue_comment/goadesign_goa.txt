from Line comments to General comments.
Panic in the processing of the Attribute of the endpoint that refers to the parent of the parent.

# Example design

calc -> parent -> ancestor

```go
package design

import (
	. "goa.design/goa/v3/dsl"
)

var _ = Service("ancestor", func() {
	Method("show", func() {
		Payload(func() {
			Attribute("p")
		})
		HTTP(func() {
			GET("/ancestor/{p}")
		})
	})
})

var _ = Service("parent", func() {
	HTTP(func() {
		Parent("ancestor")
	})
	Method("show", func() {
		Payload(func() {
			Attribute("x")
		})
		HTTP(func() {
			GET("/parent/{x}")
		})
	})
})

var _ = Service("calc", func() {
	HTTP(func() {
		Parent("parent")

	})

	Method("add", func() {
		Payload(func() {
			Attribute("a")
		})
		HTTP(func() {
			GET("/add/{a}")
		})
	})
})
```

```shellsession
$ goa gen calc/design
exit status 2
panic: runtime error: invalid memory address or nil pointer dereference
[signal SIGSEGV: segmentation violation code=0x1 addr=0x60 pc=0x130c6a3]

goroutine 1 [running]:
goa.design/goa/v3/expr.(*dupper).DupAttribute(0xc0001e4b88, 0x0, 0xc000348680)
	/Users/ikawaha/go/src/goa.design/goa/expr/dup.go:41 +0x73
goa.design/goa/v3/expr.(*dupper).DupType(0xc0001e4b88, 0x17d4b40, 0xc0003485c0, 0x0, 0x20)
	/Users/ikawaha/go/src/goa.design/goa/expr/dup.go:78 +0x117
goa.design/goa/v3/expr.Dup(0x17d4b40, 0xc0003485c0, 0xc0003485c0, 0x1309558)
	/Users/ikawaha/go/src/goa.design/goa/expr/dup.go:7 +0x11f
goa.design/goa/v3/expr.NewMappedAttributeExpr(0xc0001e4e98, 0xc0003465de)
	/Users/ikawaha/go/src/goa.design/goa/expr/mapped_attribute.go:53 +0x1d1
goa.design/goa/v3/expr.(*HTTPEndpointExpr).PathParams(0xc000286240, 0x3)
	/Users/ikawaha/go/src/goa.design/goa/expr/http_endpoint.go:129 +0x290
goa.design/goa/v3/http/codegen.ServicesData.analyze(0xc0002307b0, 0xc00027a160, 0x4)
	/Users/ikawaha/go/src/goa.design/goa/http/codegen/service_data.go:672 +0x146e
goa.design/goa/v3/http/codegen.ServicesData.Get(0xc0002307b0, 0x16904b5, 0x4, 0x8)
	/Users/ikawaha/go/src/goa.design/goa/http/codegen/service_data.go:598 +0xb1
goa.design/goa/v3/http/codegen.serverFile(0xc0001ef0f0, 0x8, 0xc00027a160, 0xc000229d80)
	/Users/ikawaha/go/src/goa.design/goa/http/codegen/server.go:28 +0x62
goa.design/goa/v3/http/codegen.ServerFiles(0xc0001ef0f0, 0x8, 0x1bcff80, 0xc0000bccd0, 0x50, 0x50)
	/Users/ikawaha/go/src/goa.design/goa/http/codegen/server.go:18 +0xcf
goa.design/goa/v3/codegen/generator.Transport(0xc0001ef0f0, 0x8, 0xc0002974a0, 0x2, 0x2, 0x9, 0x10, 0x9, 0x0, 0x0)
	/Users/ikawaha/go/src/goa.design/goa/codegen/generator/transport.go:26 +0x168
goa.design/goa/v3/codegen/generator.Generate(0x7ffeefbff64e, 0x1, 0x168ef38, 0x3, 0x0, 0x0, 0x0, 0x0, 0x0)
	/Users/ikawaha/go/src/goa.design/goa/codegen/generator/generate.go:82 +0x55e
main.main()
	/Users/ikawaha/go/src/github.com/ikawaha/calc/goa984547159/main.go:59 +0x20c
```

# What caused the bug?

We have a test case with a similar design, but this test worked.
* https://github.com/goadesign/goa/blob/e3bc3dd6322d9258fb07e886ef0c59681f8688b4/expr/http_endpoint_test.go#L132-L169
* https://github.com/goadesign/goa/blob/e3bc3dd6322d9258fb07e886ef0c59681f8688b4/expr/testdata/endpoint_dsls.go#L254-L305

It seems that `NewMappedAttributeExpr ()` panics by duplicating attributes containing nil.

```go
// DupType creates a copy of the given data type.
func (d *dupper) DupType(t DataType) DataType {
	if t == Empty {
		// Don't dup Empty so that code may check against it.
		return t
	}
	switch actual := t.(type) {
	case Primitive:
		return t
	case *Array:
		return &Array{ElemType: d.DupAttribute(actual.ElemType)}
	case *Object:
		res := &Object{}
		for _, nat := range *actual {
			fmt.Printf("\tnat: %#+v\n", nat)
			if nat.Attribute == nil {
				fmt.Println("↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑")
			}
			res.Set(nat.Name, d.DupAttribute(nat.Attribute))
		}
		return res
```

```shellsession
...snip
	nat: &expr.NamedAttributeExpr{Name:"p", Attribute:(*expr.AttributeExpr)(nil)}
↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑
panic: runtime error: invalid memory address or nil pointer dereference
[signal SIGSEGV: segmentation violation code=0x1 addr=0x60 pc=0x130c6a3]
```
This is unrelated to recent changes to headers processing, but I hope it'd be fixed. It's not fixed yet and I don't know the minimal example, but there is a real example:

```go

			HTTP(func() {
				POST("/rest/getStuff")

				Response(StatusOK, withRespHeaders("Success"))
				Response("bad_request", StatusBadRequest, withRespHeaders("Validation error"))
				Response("not_found", StatusNotFound, withRespHeaders("Not found"))
				Response("rate_limit", StatusTooManyRequests, withRespHeaders("Too many requests - Rate limit exceeded"))
				Response("internal", StatusInternalServerError, withRespHeaders("Internal Server Error"))
				Response("not_implemented", StatusNotImplemented, withRespHeaders("Not implemented"))
			})
		})
	}
})

func withRespHeaders(desc string) func() {
	return func() {
		Description(desc)

		Header("rLimitLimit:X-Rate-Limit-Limit", Int)
		Header("rLimitRemaining:X-Rate-Limit-Remaining", Int)
		Header("rLimitReset:X-Rate-Limit-Reset", Int)
	}
}
```

Results in panic:


```
panic: runtime error: invalid memory address or nil pointer dereference
[signal SIGSEGV: segmentation violation code=0x1 addr=0x10 pc=0x14a3fcd]

goroutine 1 [running]:
goa.design/goa/v3/codegen.(*AttributeContext).IsPrimitivePointer(0xc00035aff0, 0x16f5f46, 0xb, 0xc000329b80, 0x10)
	/Users/xlab/Documents/dev/go/pkg/mod/goa.design/goa/v3@v3.0.9/codegen/transformer.go:184 +0x8d
goa.design/goa/v3/http/codegen.extractHeaders.func1(0x16f5f46, 0xb, 0x16f5f52, 0x12, 0x0, 0xc0003e5600, 0xa0, 0xa0)
	/Users/xlab/Documents/dev/go/pkg/mod/goa.design/goa/v3@v3.0.9/http/codegen/service_data.go:2306 +0x82e
goa.design/goa/v3/codegen.WalkMappedAttr(0xc0003dcf20, 0xc000558998, 0x0, 0x14a2753)
	/Users/xlab/Documents/dev/go/pkg/mod/goa.design/goa/v3@v3.0.9/codegen/walk.go:29 +0x130
goa.design/goa/v3/http/codegen.extractHeaders(0xc0003dcf20, 0xc000329b80, 0xc00035aff0, 0xc00025ca80, 0x4, 0xc0004e3260, 0x57)
	/Users/xlab/Documents/dev/go/pkg/mod/goa.design/goa/v3@v3.0.9/http/codegen/service_data.go:2274 +0x9b
goa.design/goa/v3/http/codegen.buildErrorsData(0xc000396000, 0xc0004f70e0, 0xc00054e380, 0x174, 0xc0004f4140)
	/Users/xlab/Documents/dev/go/pkg/mod/goa.design/goa/v3@v3.0.9/http/codegen/service_data.go:1587 +0x1161
goa.design/goa/v3/http/codegen.ServicesData.analyze(0xc0002762a0, 0xc000329ad0, 0x7)
	/Users/xlab/Documents/dev/go/pkg/mod/goa.design/goa/v3@v3.0.9/http/codegen/service_data.go:821 +0x2a87
goa.design/goa/v3/http/codegen.ServicesData.Get(0xc0002762a0, 0x16c2003, 0x7, 0xc00023ccc0)
	/Users/xlab/Documents/dev/go/pkg/mod/goa.design/goa/v3@v3.0.9/http/codegen/service_data.go:598 +0xb1
goa.design/goa/v3/http/codegen.serverFile(0xc000538030, 0x2f, 0xc000329ad0, 0xc000419120)
	/Users/xlab/Documents/dev/go/pkg/mod/goa.design/goa/v3@v3.0.9/http/codegen/server.go:28 +0x62
goa.design/goa/v3/http/codegen.ServerFiles(0xc000538030, 0x2f, 0x1c1c1c0, 0xc0002679f0, 0x50, 0x50)
	/Users/xlab/Documents/dev/go/pkg/mod/goa.design/goa/v3@v3.0.9/http/codegen/server.go:18 +0xcf
goa.design/goa/v3/codegen/generator.Transport(0xc000538030, 0x2f, 0xc00047a080, 0x3, 0x4, 0x9, 0x10, 0x9, 0x0, 0x0)
	/Users/xlab/Documents/dev/go/pkg/mod/goa.design/goa/v3@v3.0.9/codegen/generator/transport.go:26 +0x168
goa.design/goa/v3/codegen/generator.Generate(0x7ffeefbffa16, 0x9, 0x16b76df, 0x3, 0x0, 0x0, 0x0, 0x0, 0x0)
	/Users/xlab/Documents/dev/go/pkg/mod/goa.design/goa/v3@v3.0.9/codegen/generator/generate.go:82 +0x55e
main.main()
```

The code in question:

```go
// IsPrimitivePointer returns true if the attribute with the given name is a
// primitive pointer in the given parent attribute.
func (a *AttributeContext) IsPrimitivePointer(name string, att *expr.AttributeExpr) bool {
	if at := att.Find(name); at != nil && at.Type == expr.Any || at.Type == expr.Bytes { // panics here
		return false
	}
	if a.Pointer {
		return true
	}
	if a.IgnoreRequired {
		return false
	}
	return att.IsPrimitivePointer(name, a.UseDefault)
}
```
Hello! I'm trying to generate API spec for a design like this:

```go
package design

import (
	. "goa.design/goa/v3/dsl"
)

var _ = API("APITest", func() {

})

var _ = Service("ServiceTest", func() {
	Method("Main", func() {
		Payload(func() {
			Attribute("field1", String, func() {
				Example("0xffff")
			})
			Attribute("field2", String, func() {
				Example(`"0xffff"`)
			})
			Attribute("field3", String, func() {
				Example("0xf47261b0000000000000000000000000e41d2489571d322189246dafa5ebde1f4699f498")
			})
			Attribute("field4", String, func() {
				Example(`"0xf47261b0000000000000000000000000e41d2489571d322189246dafa5ebde1f4699f498"`)
			})
		})

		HTTP(func() {
			GET("/")
		})
	})
})
```

The problem is that the generated Swagger spec looks like this:

```yaml
  ServiceTestMainRequestBody:
    title: ServiceTestMainRequestBody
    type: object
    properties:
      field1:
        type: string
        example: "0xffff"
      field2:
        type: string
        example: '"0xffff"'
      field3:
        type: string
        example: 0xf47261b0000000000000000000000000e41d2489571d322189246dafa5ebde1f4699f498
      field4:
        type: string
        example: '"0xf47261b0000000000000000000000000e41d2489571d322189246dafa5ebde1f4699f498"'
    example:
      field1: "0xffff"
      field2: '"0xffff"'
      field3: 0xf47261b0000000000000000000000000e41d2489571d322189246dafa5ebde1f4699f498
      field4: '"0xf47261b0000000000000000000000000e41d2489571d322189246dafa5ebde1f4699f498"'
```

As you can see, for some reason `field3` is treated as a number! Which will affect the generated documentation later. And for some reason `field1` is treated correctly.

So that's clearly a bug, I'm not sure why Goa tries to dynamically detect type if it is declared as `String` already in the spec. @raphael I need your help at this point :)
I have an endpoint that receives and saves an array of files. This is the endpoint Payload:

```
var FileBatchInputPayload = Type("FileBatchInputPayload", func() {
	Attribute("files", ArrayOf(File), "uploaded files")
	Required("files")
})
```

But it gives me this error

`
goa\app\controllers.go:3279:16: cannot use tmpFiles (type []interface {}) as type []multipart.FileHeader in assignment
`

The generated code where the error is:
```
// unmarshalAddBatchPurchaseOrderFilesPayload unmarshals the request body into the context request data Payload field.
func unmarshalAddBatchPurchaseOrderFilesPayload(ctx context.Context, service *goa.Service, req *http.Request) error {
	var err error
	var payload fileBatchInputPayload
	rawFiles := req.Form["files[]"]
	tmpFiles := make([]interface{}, len(rawFiles))
	for i := 0; i < len(rawFiles); i++ {
		tmp, err2 := (interface{})(nil), (error)(nil)
		if err2 != nil {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("files", rawFiles, "[]interface{}"))
			break
		}
		tmpFiles[i] = tmp
	}
	payload.Files = tmpFiles // <--- line 3279
	if err != nil {
		return err
	}
	if err := payload.Validate(); err != nil {
		// Initialize payload with private data structure so it can be logged
		goa.ContextRequest(ctx).Payload = payload
		return err
	}
	goa.ContextRequest(ctx).Payload = payload.Publicize()
	return nil
}
```

I'm using goa v1

Thanks
Follow-on to #2399 

When adding a validator to an attribute containing the `Meta("struct:field:type"...)` call, the generated code fails to compile.

```
gen/http/bug/server/types.go:39:62: cannot use *body.Bug (type types.Bug) as type string in argument to goa.ValidatePattern
gen/http/bug/client/cli.go:28:66: cannot use body.Bug (type types.Bug) as type string in argument to goa.ValidatePattern
```

It seems like this could be a pretty simple fix. What appears to be missing is simple type conversions.

If we have a custom type, it is almost always going to be defined as `type MyType <builtin>`, where `<builtin>` is one of the base types, like `string` or `int`.

Given that, the conversion code could be extrapolated from the base type in the Attribute.

For example:

```go
Attribute("bug", String, "bug", func() {
				Meta("struct:field:type", "types.Bug", "github.com/outdoorsy/goabug/types")
				MinLength(3)
				MaxLength(4)
				Pattern("^.*$")
			})
```

The attribute knows it is a `String` base type, with an override of `types.Bug`. The generator could check that base type and generate the appropriate conversions where necessary.

Currently, we have:

```go
if body.Bug != nil {
	err = goa.MergeErrors(err, goa.ValidatePattern("body.bug", *body.Bug, "^.*$"))
}
```

What we appear to need is:

```go
if body.Bug != nil {
	err = goa.MergeErrors(err, goa.ValidatePattern("body.bug", string(*body.Bug), "^.*$"))
}
```

I've attached an updated example zip file that demonstrates the issue. This change would need to affect all validators.

[goabug.zip](https://github.com/goadesign/goa/files/3923625/goabug.zip)

When Body DSL is specified in the response of HTTP transport, the behavior seems strange. I did not know the cause, so I will report it.

### Base design

```go
var CalcResult = ResultType("application/vnd.calc+json", func() {
        Attribute("x", Int)
        Attribute("y", Int)
        Required("x", "y")
})
var _ = Service("calc", func() {
        Description("The calc service performs operations on numbers.")
        Method("add", func() {
                Payload(func() {
                        Attribute("a", Int)
                        Attribute("b", Int)
                        Required("a", "b")
                })
                Result(CalcResult)
                HTTP(func() {
                        GET("/add/{a}/{b}")
                        Response(StatusOK)
                })
        })
})
```

**Server response**

```shellsession
$ curl -iii -XGET 'http://localhost:8000/add/1/2'
HTTP/1.1 200 OK
Content-Type: application/json
Date: Wed, 04 Dec 2019 07:52:51 GMT
Content-Length: 14
{"x":0,"y":0}
```
It's OK!

### Add `Body` DSL to the HTTP Response

```go
...snip
        Method("add", func() {
                Payload(func() {
                        Attribute("a", Int)
                        Attribute("b", Int)
                        Required("a", "b")
                })
                Result(CalcResult)
                HTTP(func() {
                        GET("/add/{a}/{b}")
                        Response(StatusOK, func() {
                                Body(func() {            // ← ★ 
                                        Attribute("x")
                                })
                        })
                })
        })
})
```

**Server response**

```shellsession
$ curl -iii -XGET 'http://localhost:8000/add/1/2'
HTTP/1.1 200 OK
Content-Type: application/json
Date: Wed, 04 Dec 2019 07:51:41 GMT
Content-Length: 14
{"X":0,"Y":0}
```

I was expecting `{"x":0}` to return, but `{"X":0, "Y":0}` returned. The key is capitalized for some reason. 🤔 

### In addition, when there is 'View' DSL in `ResultType`.

```go
var CalcResult = ResultType("application/vnd.calc+json", func() {
   Attribute("x", Int)
   Attribute("y", Int)
   Required("x", "y")

   View("default", func() {
      Attribute("x")
      Attribute("y")
   })

   View("small", func() {
      Attribute("x")
   })
})

var _ = Service("calc", func() {
   Description("The calc service performs operations on numbers.")

   Method("add", func() {
      Payload(func() {
         Attribute("a", Int)
         Attribute("b", Int)
         Required("a", "b")
      })
      Result(CalcResult)
      HTTP(func() {
         GET("/add/{a}/{b}")
         Response(StatusOK, func() {
            Body(func() {
               Attribute("x")
            })
         })
      })
   })
})
```

**goa gen**
```
$ goa gen calc/design
exit status 1
template: response-encoder:54:16: executing "response" at <$vsb.Init.Name>: nil pointer evaluating *codegen.InitData.Name
```
DSL code
```
var _ = Service("user", func() {
	Method("Show", func() {
		Payload(String, "user id")
		GRPC(func() {})
	})
})
```

generate code
```
// BuildShowPayload builds the payload for the user Show endpoint from CLI
// flags.
func BuildShowPayload(userShowMessage string) (string, error) {
	var err error
	var message userpb.ShowRequest
	{
		if userShowMessage != "" {
			err = json.Unmarshal([]byte(userShowMessage), &message)
			if err != nil {
				return nil, fmt.Errorf("invalid JSON for message, example of valid JSON:\n%s", "'{\n      \"field\": \"Ipsa beatae laudantium quod similique.\"\n   }'")
			}
		}
	}
	v := message.Field
	return v, nil
}
```

build dump outpu message
> gen/grpc/user/client/cli.go:49:5: cannot use nil as type string in return argument


*What does this PR change?*

Brings in Zero into the DSL and the gRPC transformation logic. This means that:

- if no zero value is defined, then just put the default zero value, but if one is defined, then we set that instead, i.e. I set a zero val of -10000, I get a protobuf request in, the zero value of that field defined is now -10000 (reword this once this PR is out of drafts!)

I'm still fixing up the validation, hence why this PR will not be ready to review until I get this sorted. If anyone is interested in fighting through Go templates with me, feel free to give me a shout in the comments :) this is more for tracking stuff for me :) 
When Extend is used in ResultType, expanded Attribute is not displayed in OpenAPI document.

These Attributes will be displayed if they are specified in View.
There is no problem when using Extend in Payload. 

### Example design

```go
package design

import (
	. "goa.design/goa/v3/dsl"
)

var AddResult = Type("AddResult", func() {
	Attribute("result", Int, func() {
		Description("add result")
	})
	Required("result")
})

var CalcResult = ResultType("application/vnd.hoge+json", func() {
	Attributes(func() {
		Attribute("x", Int)
		Attribute("y", Int)
		Extend(AddResult)   // ← import `result` attribute
	})
})

var _ = Service("calc", func() {
	Description("The calc service performs operations on numbers.")

	Method("add", func() {
		Payload(func() {
			Attribute("a", Int, "Left operand")
			Attribute("b", Int, "Right operand")
		})
		Result(CalcResult)
		HTTP(func() {
			GET("/add/{a}/{b}")
		})
	})
})
```

### goa gen openapi.yaml

`CalcAddResponseBody` does not contain `result` propety.

<details>

<summary> openapi.yaml

```
definitions:
  CalcAddResponseBody:
    title: 'Mediatype identifier: application/vnd.hoge+json; view=default'
    type: object
    properties:
      x:
        type: integer
        example: 5401762099778430809
        format: int64
      "y":
        type: integer
        example: 1918630006328122782
        format: int64
    description: AddResponseBody result type (default view)
    example:
      x: 4288748512599820841
      "y": 4212629202012168060

```

</summary>

```
swagger: "2.0"
info:
  title: ""
  version: ""
host: localhost:80
consumes:
- application/json
- application/xml
- application/gob
produces:
- application/json
- application/xml
- application/gob
paths:
  /add/{a}/{b}:
    get:
      tags:
      - calc
      summary: add calc
      operationId: calc#add
      parameters:
      - name: a
        in: path
        description: Left operand
        required: true
        type: integer
      - name: b
        in: path
        description: Right operand
        required: true
        type: integer
      responses:
        "200":
          description: OK response.
          schema:
            $ref: '#/definitions/CalcAddResponseBody'
      schemes:
      - http
definitions:
  CalcAddResponseBody:
    title: 'Mediatype identifier: application/vnd.hoge+json; view=default'
    type: object
    properties:
      x:
        type: integer
        example: 5401762099778430809
        format: int64
      "y":
        type: integer
        example: 1918630006328122782
        format: int64
    description: AddResponseBody result type (default view)
    example:
      x: 4288748512599820841
      "y": 4212629202012168060
```

</details>

# Expected

The response body contains the `result` property.

<details>

<summary> openapi.yaml

```
definitions:
  CalcAddResponseBody:
    title: 'Mediatype identifier: application/vnd.hoge+json; view=default'
    type: object
    properties:
      result:
        type: integer
        description: add result
        example: 4212629202012168060
        format: int64
      x:
        type: integer
        example: 1918630006328122782
        format: int64
      "y":
        type: integer
        example: 4288748512599820841
        format: int64
    description: AddResponseBody result type (default view)
    example:
      result: 5855163322465186600
      x: 1698882017578366363
      "y": 6747375795581831989
    required:
    - result
```

</summary>

```
swagger: "2.0"
info:
  title: ""
  version: ""
host: localhost:80
consumes:
- application/json
- application/xml
- application/gob
produces:
- application/json
- application/xml
- application/gob
paths:
  /add/{a}/{b}:
    get:
      tags:
      - calc
      summary: add calc
      operationId: calc#add
      parameters:
      - name: a
        in: path
        description: Left operand
        required: true
        type: integer
      - name: b
        in: path
        description: Right operand
        required: true
        type: integer
      responses:
        "200":
          description: OK response.
          schema:
            $ref: '#/definitions/CalcAddResponseBody'
      schemes:
      - http
definitions:
  CalcAddResponseBody:
    title: 'Mediatype identifier: application/vnd.hoge+json; view=default'
    type: object
    properties:
      result:
        type: integer
        description: add result
        example: 4212629202012168060
        format: int64
      x:
        type: integer
        example: 1918630006328122782
        format: int64
      "y":
        type: integer
        example: 4288748512599820841
        format: int64
    description: AddResponseBody result type (default view)
    example:
      result: 5855163322465186600
      x: 1698882017578366363
      "y": 6747375795581831989
    required:
    - result
```

</details>

🤔 Although it is not related to this case, why is only the letter `y` quoted in the above example openapi.yaml?

