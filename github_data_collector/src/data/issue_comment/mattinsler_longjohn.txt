Fix a few minor typos.
I tried using this by requiring the library in the aws lambda handler but i do not see the longer stack trace information. 
Seeing an issue where .once( 'data' ... ) on a stream will only be hit if there is an .on( 'data'... ) call somewhere on the same eventemitter object.

I've spent an hour or so in the code trying to figure out the issue, but I am stumped. Could you give me any guidance on why a .once() would not be hit unless there's a .on() for the same event type?

Specifically I am seeing this using the node-postgres module with longjohn included. In their connection module, I tracked it down to this:

``` javascript
  // without this, .once below seems inconsistent
  this.stream.on( 'data', function() {
    var nop = 1;
  });

  this.stream.once('data', function(buffer) {
    var responseCode = buffer.toString('utf8');
    if(responseCode != 'S') {
      return self.emit('error', new Error('The server does not support SSL connections'));
    }
    var tls = require('tls');
    self.stream = tls.connect({
      socket: self.stream,
      servername: host,
      rejectUnauthorized: self.ssl.rejectUnauthorized,
      ca: self.ssl.ca,
      pfx: self.ssl.pfx,
      key: self.ssl.key,
      passphrase: self.ssl.passphrase,
      cert: self.ssl.cert,
      NPNProtocols: self.ssl.NPNProtocols
    });
    self.attachListeners(self.stream);
    self.emit('sslconnect');

    self.stream.on('error', function(error){
      self.emit('error', error);
    });
  });
```

If I don't add the .on( 'data'...) the .once( 'data'... will never be hit while longjohn is loaded.

All I get is:

```
    at Promise.resolve.then (/usr/src/app/lib/promises/index.js:61:15)
    at process._tickDomainCallback (internal/process/next_tick.js:129:7)
```

Is this project still alive?

I'm using TypeScript and would like to use longjohn conditionally just in dev mode. Documentation suggests using conditional require:

```
if (process.env.NODE_ENV !== 'production'){
  require('longjohn');
}
```

However, TypeScript imports are restricted to top-level, making it impossible to do such conditional check without falling back to commonJS-style require.

There is also a related issue: https://github.com/mattinsler/longjohn/issues/61 - having the ability to disable longjohn after require would be a sufficient fix.

I'm writing some tests where I want longjohn on and others when it should be off. I could just run the non long john tests first, but it'd be nice to just be able to turn it on and off depending on the sub test suite.

Is there a way?

Thanks in advance,
Francois

The way how longjohn wraps EventEmitter is incompatible with other modules doing a similar/same wrapping.
I tested by creating a clone of longjohn (incl. modifiny the 'longjohn' property of on()) and used it together with unmodified longjohn in following script:

``` javascript
require('longjohn');

var assert = require('assert');
var EventEmitter = require('events').EventEmitter;

function onListener() {}
function onceListener() {}

function test() {
    var emitter = new EventEmitter;
    emitter.on('xxx', onListener);
    emitter.once('xxx', onceListener);
    assert.equal(emitter.listenerCount('xxx'), 2);

    emitter.removeListener('xxx', onListener);
    // fails on second call as onListener was not removed
    assert.equal(emitter.listenerCount('xxx'), 1);

    emitter.removeListener('xxx', onceListener);
    assert.equal(emitter.listenerCount('xxx'), 0);
}

test();

require('longjohn-clone');

test();
```

For events registered via once() the listener() API returns different result if longjohn is used or not.

Reproducer:

``` javascript
var assert = require('assert');
var EventEmitter = require('events').EventEmitter;

function onListener() {}
function onceListener() {}

function test() {
    var eventEmitter = new EventEmitter();

    eventEmitter.on('TheEvent', onListener);
    eventEmitter.once('TheEvent', onceListener);

    var listeners = eventEmitter.listeners('TheEvent');
    assert.equal(listeners[0], onListener);
    assert.equal(listeners[1].listener, onceListener);
    // the following assert passes for longlohn case
    //assert.equal(listeners[1], onceListener); 
}

test();

require('longjohn');

test();
```

Looks like the longlohn implementation unwraps one level too much in listen() for once listeners.

hello,

when i run my script with longjohn, i receive the following

``` js
TypeError: Cannot read property 'apply' of undefined
    at Timer.listOnTimeout (timers.js:92:15)
---------------------------------------------
    at JavascriptComputation.computationRegistry._doAdd.local.remote.fn (/Users/cdieringer/node/coinstac-common/test/models/pipeline/runner/pool/.test-pool-utils.js:187:41)
    at JavascriptComputation.run (/Users/cdieringer/node/coinstac-common/src/models/computation/javascript-computation.js:29:10)
    at /Users/cdieringer/node/coinstac-common/src/models/pipeline/pipeline.js:51:26
    at Pipeline.run.Pipeline._handleRunComplete.Pipeline.tryNext.cb [as tryNext] (/Users/cdieringer/node/coinstac-common/src/models/pipeline/pipeline.js:126:32)
    at Pipeline.run.cb.tryNext [as run] (/Users/cdieringer/node/coinstac-common/src/models/pipeline/pipeline.js:48:10)
    at RemotePipelineRunner.run.async.parallel.userResults.RemotePipelineRunner._run.cb [as _run] (/Users/cdieringer/node/coinstac-common/src/models/pipeline/runner/remote-pipeline-runner.js:81:19)
    at /Users/cdieringer/node/coinstac-common/src/models/pipeline/runner/remote-pipeline-runner.js:59:14
    at /Users/cdieringer/node/coinstac-common/node_modules/async/lib/async.js:726:13
    at /Users/cdieringer/node/coinstac-common/node_modules/async/lib/async.js:52:16
    at done (/Users/cdieringer/node/coinstac-common/node_modules/async/lib/async.js:246:17)
    at /Users/cdieringer/node/coinstac-common/node_modules/async/lib/async.js:44:16
    at /Users/cdieringer/node/coinstac-common/node_modules/async/lib/async.js:723:17
    at /Users/cdieringer/node/coinstac-common/node_modules/async/lib/async.js:167:37
    at /Users/cdieringer/node/coinstac-common/src/models/pipeline/runner/pipeline-runner.js:70:19
    at process._tickCallback (node.js:406:9)
```

i think it's a nodejs internal error?  any clue?

thx!

Noticed that the latest release (0.2.10) is using util.isFunction in the code. Problem is that if you are running Node 0.10.x, this function is not available in the util package.

Seems like this latest version is not a backwards-compatible patch and should be a major version. Also, the node engine attribute in package.json should be bumped up to note that Longjohn will only work when running Node > 4.x. (I don't think util.isFunction was added until 4.x).
