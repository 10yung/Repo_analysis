My goal is to get an image of currently used text input. Here's my code:

```
ObjC.import('Carbon');
ObjC.import('Cocoa');

var currentSource = $.TISCopyCurrentKeyboardInputSource();
var iconRef = $.TISGetInputSourceProperty(currentSource, $.kTISPropertyIconRef);
var image = $.NSImage.alloc.initWithIconRef(iconRef);
```

However I'm getting an error "Ref has incompatible type" when I pass `iconRef` to `initWithIconRef`.

Similar code in swift works:
```
import Carbon
import Cocoa

let currentSource = TISCopyCurrentKeyboardInputSource()?.takeUnretainedValue()
let iconRef = OpaquePointer(TISGetInputSourceProperty(currentSource, kTISPropertyIconRef)) as IconRef
let image = NSImage(iconRef: iconRef)
```
<img width="344" alt="screen shot 2018-12-09 at 12 19 43 am" src="https://user-images.githubusercontent.com/1967999/49691688-27dfde00-fb48-11e8-89bf-ff29e59a2b0d.png">

In case of Objective-C I'd also need to cast:

```
TISInputSourceRef currentSource = TISCopyCurrentKeyboardInputSource();
IconRef iconRef = (IconRef)TISGetInputSourceProperty(currentSource, kTISPropertyIconRef);
NSImage *image = [[NSImage alloc] initWithIconRef:iconRef];
```

Is it possible that during this `(IconRef)` casting something going on behind the scenes? Is it possible to achieve the same with JXA?
Since I upgraded to macOS 10.14, `$.NSMakeRect` now always throws `NSInvalidArgumentException` with reason: `NSGetSizeAndAlignment(): unsupported type encoding spec 'G' at 'GPoint}"size"{CGSize}}' in '{CGPoint}"size"{CGSize}}'` ... wat?!

Anybody else run into this? Ideas on what's going on?

Program:
```
#!/usr/bin/env osascript -l JavaScript
ObjC.import("Cocoa");

function run(argv) {
    var r = $.NSMakeRect(0, 0, 100, 100);
}
```
Result:
```
2018-10-16 11:16:52.101 osascript[53689:2461150] *** Terminating app due to uncaught exception 'NSInvalidArgumentException', reason: 'NSGetSizeAndAlignment(): unsupported type encoding spec 'G' at 'GPoint}"size"{CGSize}}' in '{CGPoint}"size"{CGSize}}''
*** First throw call stack:
(
        0   CoreFoundation                      0x00007fff2f762571 __exceptionPreprocess + 256
        1   libobjc.A.dylib                     0x00007fff5b70fefb objc_exception_throw + 48
        2   CoreFoundation                      0x00007fff2f6b4bf0 __NSGetSizeAndAlignment + 1093
        3   CoreFoundation                      0x00007fff2f6b4a60 __NSGetSizeAndAlignment + 693
        4   CoreFoundation                      0x00007fff2f6c17d5 NSGetSizeAndAlignment + 33
        5   JavaScriptAppleEvents               0x00007fff4db298ba JSOCObjCTypeIterateTypes + 136
        6   JavaScriptAppleEvents               0x00007fff4db299ae JSOCObjCTypeIterateStructElements + 131
        7   JavaScriptAppleEvents               0x00007fff4db490a7 +[JSOCType typeWithObjCType:] + 457
        8   JavaScriptAppleEvents               0x00007fff4db276af -[JSOCBridgeSupport typeForArgumentInfo:fallbackObjCType:] + 475
        9   JavaScriptAppleEvents               0x00007fff4db27751 -[JSOCBridgeSupport typeForFunctionInfo:isBlock:] + 99
        10  JavaScriptAppleEvents               0x00007fff4db282ac -[JSOCBridgeSupport functionPointerForFunctionWithName:] + 89
        11  JavaScriptAppleEvents               0x00007fff4db22f92 __JSOCFunctionConstructorBlock_block_invoke + 304
        12  CoreFoundation                      0x00007fff2f6b80ec __invoking___ + 140
        13  CoreFoundation                      0x00007fff2f6b7fb7 -[NSInvocation invoke] + 311
        14  JavaScriptCore                      0x00007fff32d0cde8 _ZN3JSC24ObjCCallbackFunctionImpl4callEP9JSContextP13OpaqueJSValuemPKPKS3_PS6_ + 440
        15  JavaScriptCore                      0x00007fff32d0c81c _ZN3JSCL34objCCallbackFunctionCallAsFunctionEPK15OpaqueJSContextP13OpaqueJSValueS4_mPKPKS3_PS6_ + 236
        16  JavaScriptCore                      0x00007fff32d0c0ec _ZN3JSC19APICallbackFunction4callINS_20ObjCCallbackFunctionEEExPNS_9ExecStateE + 492
        17  JavaScriptCore                      0x00007fff32cf4d63 vmEntryToNative + 241
        18  JavaScriptCore                      0x00007fff32b1e7fe _ZN3JSC11Interpreter11executeCallEPNS_9ExecStateEPNS_8JSObjectENS_8CallTypeERKNS_8CallDataENS_7JSValueERKNS_7ArgListE + 542
        19  JavaScriptCore                      0x00007fff33546051 _ZN3JSC12profiledCallEPNS_9ExecStateENS_15ProfilingReasonENS_7JSValueENS_8CallTypeERKNS_8CallDataES3_RKNS_7ArgListE + 177
        20  JavaScriptCore                      0x00007fff32b1e474 JSObjectCallAsFunction + 468
        21  JavaScriptCore                      0x00007fff32c84763 -[JSValue callWithArguments:] + 291
        22  JavaScriptAppleEvents               0x00007fff4db30215 __JSOCDollarObject_block_invoke_2 + 357
        23  CoreFoundation                      0x00007fff2f6b80ec __invoking___ + 140
        24  CoreFoundation                      0x00007fff2f6b7fb7 -[NSInvocation invoke] + 311
        25  JavaScriptCore                      0x00007fff32d0cde8 _ZN3JSC24ObjCCallbackFunctionImpl4callEP9JSContextP13OpaqueJSValuemPKPKS3_PS6_ + 440
        26  JavaScriptCore                      0x00007fff32d0c81c _ZN3JSCL34objCCallbackFunctionCallAsFunctionEPK15OpaqueJSContextP13OpaqueJSValueS4_mPKPKS3_PS6_ + 236
        27  JavaScriptCore                      0x00007fff32d0c0ec _ZN3JSC19APICallbackFunction4callINS_20ObjCCallbackFunctionEEExPNS_9ExecStateE + 492
        28  JavaScriptCore                      0x00007fff32cf4d63 vmEntryToNative + 241
        29  JavaScriptCore                      0x00007fff32b1e7fe _ZN3JSC11Interpreter11executeCallEPNS_9ExecStateEPNS_8JSObjectENS_8CallTypeERKNS_8CallDataENS_7JSValueERKNS_7ArgListE + 542
        30  JavaScriptCore                      0x00007fff33546051 _ZN3JSC12profiledCallEPNS_9ExecStateENS_15ProfilingReasonENS_7JSValueENS_8CallTypeERKNS_8CallDataES3_RKNS_7ArgListE + 177
        31  JavaScriptCore                      0x00007fff32b1e474 JSObjectCallAsFunction + 468
        32  JavaScriptAppleEvents               0x00007fff4db2fd0e GetProperty + 309
        33  JavaScriptCore                      0x00007fff32d27361 _ZN3JSC16JSCallbackObjectINS_20JSDestructibleObjectEE14callbackGetterEPNS_9ExecStateExNS_12PropertyNameE + 225
        34  JavaScriptCore                      0x00007fff32ca1876 llint_slow_path_get_by_id + 5302
        35  JavaScriptCore                      0x00007fff32cf7a73 llint_entry + 11449
        36  JavaScriptCore                      0x00007fff32cf4c45 vmEntryToJavaScript + 235
        37  JavaScriptCore                      0x00007fff32b1e7b6 _ZN3JSC11Interpreter11executeCallEPNS_9ExecStateEPNS_8JSObjectENS_8CallTypeERKNS_8CallDataENS_7JSValueERKNS_7ArgListE + 470
        38  JavaScriptCore                      0x00007fff33546051 _ZN3JSC12profiledCallEPNS_9ExecStateENS_15ProfilingReasonENS_7JSValueENS_8CallTypeERKNS_8CallDataES3_RKNS_7ArgListE + 177
        39  JavaScriptCore                      0x00007fff32b1e474 JSObjectCallAsFunction + 468
        40  JavaScriptCore                      0x00007fff32c84763 -[JSValue callWithArguments:] + 291
        41  JavaScriptOSA                       0x00007fff4db71927 -[JSStorage(JSProcedures) handleEvent:inContext:modeFlags:resultingResultID:] + 3551
        42  CoreFoundation                      0x00007fff2f6b80ec __invoking___ + 140
        43  CoreFoundation                      0x00007fff2f6b7fb7 -[NSInvocation invoke] + 311
        44  JavaScript                          0x0000000117c517bc JavaScriptComponent + 1140
        45  OpenScripting                       0x00007fff2ece12da OSAExecuteEvent + 52
        46  osascript                           0x000000010c73b565 osascript + 9573
        47  libdyld.dylib                       0x00007fff5c7d6085 start + 1
)
libc++abi.dylib: terminating with uncaught exception of type NSException
Abort trap: 6
```
In the cookbook examples using `app.windows.push(app.Window())` leads to `Error: Wrong index`

I recommend changing the examples to use`app.Window().make();`
So, the documentation is a little sparse about *what* is exposed when `Library` access a “Script Library” file:

> To use scripts as libraries, store them in ~/Library/Script Libraries/.
> 
> Suppose you have a script library named toolbox.scpt, which contains the following code:
> 
>     function log(message) {
>         TextEdit = Application('TextEdit')
>         doc = TextEdit.documents['Log.rtf']
>         doc.text = message
>     }

So, I ran a [little test][1] on my own:

```es6
// The documented approach
function one(){                     return true }

// Identifier bindings
         two = function(){          return true }
     var three = function(){        return true }
     let four = function(){         return true }

// Explicit property creation
    this.five = function(){         return true }
;(function(){ return this })()
        .six = function(){          return true }
```

```
> ./test.sh
✓ 1. Function declaration of the global environment
✓ 2. Implicit propery of the objective global environment
✓ 3. Identifier binding on the objective global environment
✗ 4. Identifier binding on the declarative global environment
✓ 5. Explicit property of the objective global environment (via `this` self-ref)
✓ 6. Explicit property of the objective global environment (via anon func)
```

I suppose this should have been obvious, but I was afraid Apple was doing some jiggery-pokery on the backend, specifically and exclusively extracting *only* function-declarations from the global environment or something like that.

Thought this might belong in the Cookbook!

   [1]: https://gist.github.com/ELLIOTTCABLE/12e33473dfb325c9374d0cc873bb5356 "JXA (JavaScript for Automation) ‘Script Library’ exports-test"
Seems there are some thing missing like setTimeout? Is it delay() ?

Following the very helpful ObjC example at:

https://github.com/myshov/xkbswitch-macosx/blob/master/xkbswitch/main.m

and testing snippets like these in JXA:

```
(function () {
    'use strict';

    ObjC.import('Carbon');
    ObjC.import('stdio');

    var sourceList = $.TISCreateInputSourceList(null, false);

    var current_source = $.TISCopyCurrentKeyboardInputSource();

    var cfs = $.TISGetInputSourceProperty(current_source, $.kTISPropertyInputSourceID);
    var cfn = $.TISGetInputSourceProperty(current_source, $.kTISPropertyLocalizedName)

    var sourceCount = $.CFArrayGetCount(sourceList)

    return $.CFArrayGetValueAtIndex(sourceList, 0)
})();
```

One quickly hits the challenge of how to read an [object Ref] to CF objects like CFString.

Does anyone have an insight into how that can be done ?

In Applescript we can evaluate

``` applescript
the clipboard as record
```

and get an object with keys to any RTF, HTML utf8 etc data

The Javascript view of the StandardAdditions.sdef documentation suggests something similar, but doesn't (I think) define the set of accepted `type class` arguments.

```
theClipboard method : Return the contents of an application’s clipboard. Use in a ‘tell’ block after activating the application
theClipboard
[as: type class] : the type of data desired
→ any : the data
```

It might be good, if anyone can unlock JXA access to HTML and RTF clipboard contents, to have a clipboard section of this Wiki … 

( `.clipbboardInfo()` returns an array of byte sizes for various types of clipboard data, but offers only `undefined` where one might expect to see the type class names. Perhaps ObjC access to NSPasteBoard is the route to take … )

There are tons of resources and existing scripts for AppleScript on the web, but not so many for JXA. It would be nice to see some examples with equivalent scripts written in both JXA and AppleScript, so that newbies could see how the languages map to one another. 
