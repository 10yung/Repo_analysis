## Resource

- https://medium.com/over-engineering/setting-up-a-material-components-theme-for-android-fbf7774da739

### Context
With all the recent changes in the jetpack (and others) the current version of the dependencies is falling behind.

It would also be interesting to install the widely used gradle plugin to check for these

For AndroidX/ktx
- https://developer.android.com/kotlin/ktx

Plugin
- https://github.com/ben-manes/gradle-versions-plugin
### Example article

- https://proandroiddev.com/no-more-sms-call-log-permissions-now-what-9b8226de7827
## Context

- There are `PendingIntent` params for `sentIntent` and `deliveryIntent` that we might be useful to know which sms code was sent, this was there is no need to "block" or "queue" requests since the OS might be able to handle all that ðŸŽ‰ 

```
SmsManager#sendTextMessage()
```


---------------

The javadoc

```
/**
     * Send a text based SMS.
     *
     * <p class="note"><strong>Note:</strong> Using this method requires that your app has the
     * {@link android.Manifest.permission#SEND_SMS} permission.</p>
     *
     * <p class="note"><strong>Note:</strong> Beginning with Android 4.4 (API level 19), if
     * <em>and only if</em> an app is not selected as the default SMS app, the system automatically
     * writes messages sent using this method to the SMS Provider (the default SMS app is always
     * responsible for writing its sent messages to the SMS Provider). For information about
     * how to behave as the default SMS app, see {@link android.provider.Telephony}.</p>
     *
     *
     * @param destinationAddress the address to send the message to
     * @param scAddress is the service center address or null to use
     *  the current default SMSC
     * @param text the body of the message to send
     * @param sentIntent if not NULL this <code>PendingIntent</code> is
     *  broadcast when the message is successfully sent, or failed.
     *  The result code will be <code>Activity.RESULT_OK</code> for success,
     *  or one of these errors:<br>
     *  <code>RESULT_ERROR_GENERIC_FAILURE</code><br>
     *  <code>RESULT_ERROR_RADIO_OFF</code><br>
     *  <code>RESULT_ERROR_NULL_PDU</code><br>
     *  For <code>RESULT_ERROR_GENERIC_FAILURE</code> the sentIntent may include
     *  the extra "errorCode" containing a radio technology specific value,
     *  generally only useful for troubleshooting.<br>
     *  The per-application based SMS control checks sentIntent. If sentIntent
     *  is NULL the caller will be checked against all unknown applications,
     *  which cause smaller number of SMS to be sent in checking period.
     * @param deliveryIntent if not NULL this <code>PendingIntent</code> is
     *  broadcast when the message is delivered to the recipient.  The
     *  raw pdu of the status report is in the extended data ("pdu").
     *
     * @throws IllegalArgumentException if destinationAddress or text are empty
     */
```
## Context

- This will be a very simple settings screen mostly to demo/try out the `Preferences API`

## Resource

**AndroidDev summit 2018 talk**
- https://www.youtube.com/watch?v=PS9jhuHECEQ
## Context

- For the target audicence, there's a high possiblity users with some a11y issues, mainly visual impared. Designing all features with a11y in mind is paramount!


- [ ] Ask for a11y during onboarding

- [ ] Easy UX enable/disable state switch

- [ ] Test with Google talkback

- [ ] Remove images if this option is enabled
  - Another option is to add a "Description text" but imo just adds unecessary clutter.

--------------------------

### Resources

**Designing for Global Accessibility (3 part blog)**
- https://design.google/library/designing-global-accessibility-part-1/?utm_source=Google&utm_medium=Newsletter&utm_campaign=Q32018

**Android Dev Summit 2018 talk about a11y**
- https://www.youtube.com/watch?v=R2NftUX7rDM
## Context

- Run lint checks and run [Danger](https://danger.systems/guides/getting_started.html) to comment some code style related issues, this way it's possible to get some quick feedback on PRs for simple tasks

### Resources

- Awesome article by Joe Birch 
  https://blog.bitrise.io/automating-code-review-tasks-for-multi-module-android-projects
This will help explain, give more context on what this project is.
Give more technical explanation of how things are wired.
## Context

Instead of depending on the Rx library we can leverage the built-in Kotlin tech.

### Good resource/tutorial by Chris Banes

- https://www.youtube.com/watch?v=P7ov_r1JZ1g&feature=youtu.be

### Article with `UseCase`

- https://proandroiddev.com/i-exchanged-rxjava-for-coroutines-in-my-android-application-why-you-probably-should-do-the-same-5526dfb38d0e
## Context

After all checks pass on the CI, the generated artifacts should be distributed to the Playstore Internal/Firebase Beta channel.

## Sources

- https://devcenter.bitrise.io/code-signing/android-code-signing/android-code-signing-using-bitrise-sign-apk-step/

- https://devcenter.bitrise.io/tips-and-tricks/android-tips-and-tricks/?utm_source=transactional&utm_medium=email&utm_campaign=welcome_v1_A&utm_content=text_link

_Other refs: #72, #19 #20_