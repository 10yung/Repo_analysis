I tryed this code:
```cs
using System;

class Program
{
    static void Main()
    {
        ((IComparable<int>)0).CompareTo(1);
        ((IEquatable<int>)0).Equals(1);
    }
}
```
the exception I got was:
```
Unbreakable.AssemblyGuardException: Type System.IEquatable`1 is not allowed.

   at Unbreakable.Internal.AssemblyValidator.EnsureAllowed(TypeReference type, String memberName)

   at Unbreakable.Internal.AssemblyValidator.EnsureAllowed(TypeReference type, String memberName)

   at Unbreakable.Internal.AssemblyValidator.ValidateMemberReference(MemberReference reference)

   at Unbreakable.AssemblyGuard.ValidateAndRewriteMethod(MethodDefinition method, RuntimeGuardReferences guard, AssemblyValidator validator, AssemblyGuardSettings settings)

   at Unbreakable.AssemblyGuard.ValidateAndRewriteType(TypeDefinition type, RuntimeGuardReferences guard, AssemblyValidator validator, AssemblyGuardSettings settings)

   at Unbreakable.AssemblyGuard.Rewrite(AssemblyDefinition assembly, AssemblyGuardSettings settings)

   at SharpLab.Server.Execution.Executor.Execute(CompilationStreamPair streams, IWorkSession session) in C:\projects\sharplab\source\Server\Execution\Executor.cs:line 72

   at SharpLab.Server.MirrorSharp.SlowUpdate.ProcessAsync(IWorkSession session, IList`1 diagnostics, CancellationToken cancellationToken) in C:\projects\sharplab\source\Server\MirrorSharp\SlowUpdate.cs:line 103

   at MirrorSharp.Internal.Handlers.SlowUpdateHandler.ExecuteAsync(AsyncData data, WorkSession session, ICommandResultSender sender, CancellationToken cancellationToken)

   at MirrorSharp.Internal.Connection.ReceiveAndProcessInternalAsync(CancellationToken cancellationToken)

   at MirrorSharp.Internal.Connection.ReceiveAndProcessAsync(CancellationToken cancellationToken)
```

I think these interfaces are safe.
This is an awesome project, and a lot of Roslyn issues are being filed linking to sharplab as a fast and effective test bed for repros.
I just filed [one](https://github.com/dotnet/roslyn/issues/40331) myself but though I linked to sharplab, it didn't effectively show the error because IDE0009 has to be turned on for the bug to manifest. 

Can SharpLab offer a way to turn on certain analyzer rules?
Hello, congrats for the project, it's incredibly well done and I've been using it for months, it has become an incredibly valuable tool for me and I appreciate your hard work on it! ðŸ˜„

I was wondering if it'd be possible to make sharplab.io a proper PWA, so that it could be installed on devices that support the feature (eg. Android devices). Right now trying to add sharplab.io to the home page results in a simple shortcut being added to the home page, and clicking on it simply opens the website in a browser tab. This is the expected behavior for websites that don't properly support the minimum PWA specifications, otherwise the website should be opened in a standalone window (eg. like Twitter on mobile). I've tried both with Chrome and Edge Chromium, same result.

I've run a test on the website using Lighthouse and [got this report](https://googlechrome.github.io/lighthouse/viewer/?psiurl=https%3A%2F%2Fsharplab.io%2F&strategy=mobile&category=performance&category=accessibility&category=best-practices&category=seo&category=pwa&utm_source=lh-chrome-ext):

![image](https://user-images.githubusercontent.com/10199417/70160200-673cfe00-16ba-11ea-8955-154e65ca46c5.png)

Here's the [checklists guide](https://developers.google.com/web/progressive-web-apps/checklist?utm_source=lighthouse&utm_medium=unknown) from Google on PWAs.
Looks like simply adding a manifest should fix most of the issues and hopefully that'll be enough to have the app open in a standalone window.

Thanks again for your hard work!
May be I do not know something about `[CompilerGenerated]` classes but the follow code is decompiled to invalid code (as I think):

```csharp
using System;

namespace Program
{
    public sealed class Handle
    {
        private readonly Func<int> _func;
        public Handle(Func<int> func)
        {          
            _func = func;
        }
    }

    public static class Program
    {
        private static void Main()
        {
            int F() => 42;
            var handle = new Handle(F);
        }
    }
}
```

The decompiled code has class `<>c` with method `<Main>g__F|0_0` which is inaccessible due to its protection level in `Program.Main` method.

```csharp
using System;
using System.Diagnostics;
using System.Reflection;
using System.Runtime.CompilerServices;
using System.Security;
using System.Security.Permissions;

[assembly: CompilationRelaxations(8)]
[assembly: RuntimeCompatibility(WrapNonExceptionThrows = true)]
[assembly: Debuggable(DebuggableAttribute.DebuggingModes.Default | DebuggableAttribute.DebuggingModes.DisableOptimizations | DebuggableAttribute.DebuggingModes.IgnoreSymbolStoreSequencePoints | DebuggableAttribute.DebuggingModes.EnableEditAndContinue)]
[assembly: SecurityPermission(SecurityAction.RequestMinimum, SkipVerification = true)]
[assembly: AssemblyVersion("0.0.0.0")]
[module: UnverifiableCode]
namespace Program
{
    public sealed class Handle
    {
        private readonly Func<int> _func;
        public Handle(Func<int> func)
        {
            _func = func;
        }
    }
    public static class Program
    {
        [Serializable]
        [CompilerGenerated]
        private sealed class <>c
        {
            public static readonly <>c <>9 = new <>c();
            private int <Main>g__F|0_0()
            {
                return 42;
            }
        }

        private static void Main()
        {
            Handle handle = new Handle(new Func<int>(<>c.<>9.<Main>g__F|0_0));
        }
    }
}
```

Should be:

```csharp
internal int <Main>g__F|0_0()
{
    return 42;
}
```

Sometimes to check output i copy paste my code from my IDE
But it messup indentation
Would be cool to have a button to format the code automatically
Thanks

Hello!

Currently, there is no support to use older versions.
Once 2.1 is actually current LTS (before 3.1 came out) it would be really cool to be able to switch between different frameworks, starting e.g. from 2.1

Thanks!
Hello!

Once 2.2 and 3.0 support tiered jit it would be really cool to control explicitly how the code is jitted.
Otherwise, you never know how the code was optimized.

Thanks!
C# has no syntax for attributes on generic type parameter constraints, but doesn't ILAsm syntax let you express that? It was causing a lot of confusion in when decoding nullability attributes emitted by Roslyn: https://github.com/ApiApprover/ApiApprover/issues/54#issuecomment-546739595.

I would have expected to see `.custom instance` somewhere in https://sharplab.io/#v2:EYLgxg9gTgpgtADwGwBYA0AXEBLANgHwGIA7AV11wENhcYACGY62gWACh2ABAJgEZ2uAZjqdeSEdzoBhdgG92dRSOGjxnFHQBiECLwA8AFQB8ACgCUdAO4ALGLDoG6IOgEkAItgDOABwifm9LJ0AL4KSpwqYiIa2hDchqYWNnb0js7uXr7+NDAA/HRBoWxFQA===

```
.class public auto ansi abstract sealed beforefieldinit C
    extends [System.Private.CoreLib]System.Object
{
    // Methods
    .method public hidebysig static 
        void Foo1<([System.Private.CoreLib]System.IDisposable) T> () cil managed 
    {
        // Method begins at RVA 0x207f
        // Code size 1 (0x1)
        .maxstack 8

        IL_0000: ret
    } // end of method C::Foo1

    .method public hidebysig static 
        void Foo2<([System.Private.CoreLib]System.IDisposable) T> () cil managed 
    {
        // Method begins at RVA 0x207f
        // Code size 1 (0x1)
        .maxstack 8

        IL_0000: ret
    } // end of method C::Foo2

} // end of class C
```

If it's not possible in ILAsm syntax, could you add it as comments?
Actually, could it be added to the decompiled C# as comments, too?

```cs
public static class C
{
    public static void Foo1<T>() 
        where T : IDisposable // [constraint: NullableAttribute(1)]
    {
    }

    public static void Foo2<T>()
        where T : IDisposable // [constraint: NullableAttribute(2)]
    {
    }
}

```
