Currently, when moving rainmeter to a different system you'll have to manually copy the rainmeter folders in "roaming" and "documents". Especially for less versed users, it would be great to have an included import/export option to easily move a fully configured and customized rainmeter installation from system to system.
Hello Rainmeter team.
The desktop wallpaper is not part of what Rainmeter skins.
So wallpaper doesn't embed in `.rmSkin` file and I have to set wallpaper manually.
Please add wallpaper support.
Best regards
Hello, I don't like to see my widgets on the desktop.

Please add below feature:
- Show widgets "Peek at desktop" only (like MacOS Dashboard)
This PR will allow future Plugins to add new Meters and Measures instead of only new Measures.

- Plugins will be able to add custom meters.
- The functions to add a new Meter are completely optional.
- The PR doesnt make any breaking changes to the plugin API whatsoever.
- Plugin Meters can bind with any Measure available.
- If a Plugin Meter binds with a Plugin Measure, it gets access to the pluginData of the measure too.

The Plugin will be able to use following new additional functions:

- MeterInitialize
    - Initialize your Meter here
    - Parameters:
        - `void** pluginData`: Same purpose as in normal Initialize().
        - `void* rm`: Same purpose as in normal Initialize().
- MeterFinalize
    - Finalize your Meter here
    - Parameters:
        - `void* pluginData`: Same purpose as in normal Finalize().
- MeterReload
    - Reload meter options here
    - Parameters:
        - `void* pluginData`: Same purpose as in normal Reload().
        - `void* rm`: Same purpose as in normal Reload().
- MeterUpdate
    - Update the meter here
    - Parameters:
        - `void* pluginData`: The pluginData that was initialized in MeterInitialize().
        - `void* pluginMeasureData`: If the measure that is bound to the meter is from the same plugin, the pluginData that was initialized in the Measure Initialize() is supplied too.
        - `double value`: The double value from the bound measure.
        - `LPCWSTR string`: The string value from the bound measure.
- MeterDraw
    - Draw the meter here
    - Parameters:
        - `void* pluginData`: The pluginData that was initialized in MeterInitialize().
        - `void* pluginMeasureData`: If the measure that is bound to the meter is from the same plugin, the pluginData that was initialized in the Measure Initialize() is supplied too.
        - `ID2D1DeviceContext* target`: The target to draw the measure on.
    - The ID2D1DeviceContext is handled from Gfx::Canvas. Passing a Gfx::Canvas ponter would be better but is not possible because Gfx::Canvas is unable to be compiled standalone (has too many dependencies in Library)

Here is a small example of the functions:

<img width="845" alt="Screenshot_86" src="https://user-images.githubusercontent.com/38666407/62493581-c86ac880-b7d1-11e9-9ceb-2c8c9cf573b9.png">

The usage of MeterPlugin is quite similar to MeasurePlugin. Here is an example:
<img width="258" alt="Screenshot_87" src="https://user-images.githubusercontent.com/38666407/62495330-dae70100-b7d5-11e9-8dd6-b9f2d0101425.png">

I hope you like this idea, have a good day! 👍 





This has been annoying me for a while now, but I had assumed it's already well known and probably hard to fix given how long it has apparently been this way. I'm reporting this here now as while I was trying to make some other changes, I found that this was actually not that hard to fix and fixed it for myself.

Anyway, the initial state for the loop that is used to set the FFT bands is incorrect, resulting in the first band incorrectly including the FFT points below the user-set minimum frequency. This means that the first band pretty much always has a higher value than it should, and it ends up being especially noticeable when using a lot of bands (and presumably also when using a high minimum frequency).

The correct initial state should be this:
```c++
int iBin = (int)roundf((float)m->m_freqMin / df);
int iBand = 0;
float f0 = (float)m->m_freqMin;
```
(This is at approximately line 720 in `Plugins/PluginAudioLevel/PluginAudioLevel.cpp`, in case that saves anyone a bit of time)

I'd have created a pull request instead, but as I'm still rather inexperienced with C++ in addition to this being the first time I've actually looked at any of this code, there's a good change there might be some possible issues with what I did that I might have overlooked. I'm also assuming that freqMin can't _actually_ have a value where iBin would be set to a value below 0, but if that's possible I think that would be a bit worse than the current issue.
I'm using rainmeter apps on secondary display (as system monitor, etc.) [like this](https://i.imgur.com/2J2aGma.png). Each time applications on primary/main monitor goes exclusive fullscreen (even in native resolution) DesktopWorkArea disables itself and windows are covering my rainmeter apps. Same for even momentary, slight change in desktop layout such as taskbar resize. I have to manually hit "refresh" to get DesktopWorkArea to work again.

After second thought: I don't know why DesktopWorkArea is not accessible through "Manage" page. It's pretty useful and deserves more attention than that.
I had a Problem for near by several years now and I figured out that rainmeter was the reason for this. Especialy when I used the audio level plugin.

when I use chrome not in full screen mode and I am watching Videos or using BabylonJS everything is fine. But when I use Chrome in fullscreen mode, it begins to stutter after a few seconds. The FPS drops to 50FPS  every second. When I turn off Rainmeter, everything works fine.

I think there is an update interval for the elements which must be redrawn? May be Rainmeter should deactivate this loop if something is in fullscreen. Other Programs do not affect chrome. To turn off hardware acceleration in Chrome works to fix videos, but is not a valid option when I use BabylonJS.
I have many rmskin files, but I forgot how they look like. Nowadays I just google, their names but it is too time consuming. It is like browsing Play Store or iTunes Store without screenshots and description.

Alternative: skin browser (which downloads screenshots and description itself, almost all skins are from deviantart website) for downloaded files
When I discovered the new UsageMonitor plugin, I immediately started playing around with it. One of the first things I tried to make was a bar meter that showed total CPU usage (using Alias=CPU), and had colored regions within it showing how much of that usage was caused by each of the top 5 processes (using the Index= option). For the most part, the skin seems to work fine. However, it will occasionally find values for those 5 top processes which add up to more than the total usage (reported by Index=0). This always only lasts until the next time the skin updates, at which point all the values return to believable levels.

The incorrect results vary wildly from occurrence to occurrence. Sometimes, the reported total is higher than any individual process, but is lower than the sum of the first 5 indexed programs (for example, Index=0 might report 55% total usage, while Index=1-5 sums to a value closer to 62%). Other times (and this actually seems to be the more common occurrence), the total usage with be reported as 100%, and at least one of the individual processes will also show at 100% usage, with the remaining processes all showing values considerably larger than the 0% they would need for that to make sense. Once, I even managed to capture Rainmeter reporting 100% usage for ALL FIVE of the individual processes I was tracking.

![all programs at 100 cpu 6-13-18](https://user-images.githubusercontent.com/11366179/42479079-3d1ed6ec-83a5-11e8-9076-a2bfb0a500fa.PNG)

One thing I have noticed is that the Index=0 (total) value is never less than any of the individual process values (although it can be equal, as I said above, when both the total and some of the processes report 100%). It's only when you add together the process values that they exceed the "total".

This error seems to occur most often when there are several processes using moderate amounts of CPU and one of them suddenly spikes (ex. when I reload a tab in Chrome while my PC backup program is running in the background), although this does not always cause it to occur. This error seems to most often occur when Chrome is the program at Index=1, but that is likely just because Chrome is the program that most often occupies that slot while I am working. The erroneous results appear regardless of whether the Rollup= option is set to 0 or 1. I have been seeing this error for the past several versions (ever since I updated to 4.2), and it is still present in the 4.2 Final Release version. I have even tried rebuilding the performance counter database using the instructions on the UsageMonitor documentation page, which seemed to have no effect on the issue.
Well, title says it pretty much, but when clearing the recycle bin using the `EmptyBin` bang for `RecycleManager` measures, Rainmeter is blocked during the process, which might take noticeable amounts of time, depending on the amount of data in the recycle bin.
From what I can see, this is presumably caused by the measure's command handler directly delegating to the `SHEmptyRecycleBin()` function, which blocks for the duration it takes to empty the recycle bin.