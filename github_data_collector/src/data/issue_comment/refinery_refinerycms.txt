### Context

For full Zeitwerk support, we require all gems that currently depend on
something in Refinery by requiring the gem's name to update the require
to a path inside the gem.

For example, if a gem had:

    require 'refinerycms-pages'

This has to change to:

    require 'refinery/pages'

Not a huge code change, but needs to be done everywhere.

### Changes

Applies the above suggestion to code that lives inside this repository.

### Considerations

One issue is that this kind of violates the namespace expectation of a 
gem called `refinerycms-core`, which should have `lib/refinerycms/core.rb`.

Perhaps this is worth a lot of consideration as an alternative.

Resolves #3464 
Hi @parndt !

I've tried to fix all flaky tests with wait for ajax or sleep. It looks like it works but i'm not a big fan of this solution. 

Do you have something better to recommand? 
Waiting for @parndt sponsor
Hi

Few months ago I wrote tutorial, how to run Refinery CMS app on rpi4 in Docker.  I see, that in Refinery CMS documentation there is no guide about Refinery CMS and Docker. So, if you want, feel free to copy paste or reuse only some sections, fix grammar and put it to documentation. Let me know, what do you think about it. The link is https://github.com/Matho/dockerize_raspberry_pi

Have a nice day,
Martin  
I cannot find a version of https://github.com/refinery/refinerycms/blob/4.0.0/core/refinerycms-core.gemspec that allows Rails 5.2.

...Is this intentional? Is there no support for Rails 5.2 in Refinery CMS?
We were reordering a lot of pages on our production server recently (Ruby 2.4.7, Rails 5.1.7, Refinery 4-0-stable branch), and the production server crashed outright and needed to be rebooted. I can't really prove reordering was what did it, but going from the logs, it seems likely. (The reorder ended in a 500, and after that the log was full of Active Record errors until we rebooted. I couldn't even reach the server for a puma restart, had to go full reboot.)

I'm trying various ways of reordering on development now to test. My simplest test case: With a dump of my entire production db (approx 700 pages), I move one root-level page one position up. None of the pages that are affected by reordering have child pages. 

Still, this takes 12603ms and writes more than 8500 lines of log entries. That's from moving one page without children. 

If we can't make this less taxing on the SQL queries, I fear I need to decouple our news and staff pages into different models (probably using an engine or extension), and then use a different frontend ordering scheme for them. Which is doable, but a lot of work for what's basically a workaround - I actually prefer that the pages belong to the standard refinery page model (e.g. I reuse the view templates for non-news pages), and just reordering when needed. But if the CMS can't handle it, then it's back to the drawing board.

This is not a new issue. When we were still on Refinery 2.1.5 and using Unicorn, I had to manually raise the Unicorn timeout just for page reordering, and even then it was error-prone. I frequently had the server giving up midway through the reordering, with extremely unpredictable results. (Back then we probably had 400 pages or less.) I'm aware of this PR https://github.com/refinery/refinerycms/pull/2747, and I haven't had the incorrect order after failed job/timeout since then, but it's still extremely taxing and I can see a huge disk usage write spike (30x more than a normal session) on our server logs from the time it happened. 

Any ideas how/if this can be made more efficient somehow?


This is a very short PR.

It puts in place the basic features needed to implement a **duplicate** action.

The default duplicate action is very naive - it copies the item and opens the copy to be edited.
There is no attempt to copy any associations apart from `:belongs_to`, which is held on the model.

_A full implementation of a duplicate action will need a more sophisticated duplicate method - it will depend on the model and the implementor. Although the example below,  using refinerycms-pages,  adds some more steps, a true duplicator for refinerycms-pages needs attention paid to translations and other associations added by refinery extensions. I don't think it is ready to be submitted as a PR yet. 

Each model will have different considerations - starting with whether it is appropriate to duplicate at all.
_

For an extension to implement the duplicate action it will need to 
* add a route to the action
* change index/model view to add a link for the action
* perhaps override the default `duplicate` method to extend the duplication to copy associations.

### To implement 'duplicate' in an extension
This is still a simple duplication. 
### Adding a route
```
# refinerycms/pages/config/routes/rb
...
namespace :admin, path: Refinery::Core.backend_route do
  get 'pages/*path/edit', to: 'pages#edit', as: 'edit_page'
  get 'pages/*path/duplicate', to: 'pages#duplicate', as: 'duplicate_page'
...
```

### Override the default duplicate action so page-parts are duplicated
```
# refinerycms/pages/app/controllers/refinery/admin/pages_controller.rb
module Refinery
  module Admin
    class PagesController < Refinery::AdminController
...
def duplicate
  original_page = @page
  @page = original_page.dup
  @page.title += ' copy'
  original_page.parts.each |page_part| do
      @page.parts << page_part.dup
   end
   @page.save
  render :edit
end
```

### add a link to the duplicate action in the admin/index
```
# refinerycms/pages/app/views/refinery/admin/pages/_page.html.erb
...
<%= action_icon(:duplicate, refinery.admin_duplicate_page_path(page.nested_url),  t('duplicate',   scope: 'refinery.admin.pages' ) ) %>
```
#### Note
The example duplicate action saves the page before sending it to be edited. Seems to work.

**Finally**, I tried to write a routing test but didn't manage to get it working. Help appreciated.

I am wondering if it is possible to show / display the default locale in the URL bar.
For example:

https://localhost:3000/en
and not only 
https://localhost:3000

If "en" is the default locale.

Thanks in advance,
Hendry Iskandar