Added [Altair GraphQL Client](https://altair.sirmuel.design/) to docs.
I want to test my entire scheme by testing each type individually to decouple testing process and make it more expressive. mock root element and then instantiate the one I want to test. something like this:

```
public function testTestCarOwnerIsCorect() {

$expected = [
    'id' => '2342',
    'name' => 'Alex',
    'age' => 21,

];
$car = Car::query()->where('id', 22)->get()->first();

$carGraphqlType = $this->app->get(CarGraphqlType::class);
$ownerResolver = $carGraphqlType->owner;
$owner = $ownerResolver($car);

self::assertEquals($expected, $owner);
}
```

if I define resolver explicitly on CarGraphqlType for "owner filed" I can easily get it and resolve the owner field.

```
$carGraphqlType = $this->app->get(CarGraphqlType::class);
$ownerResolver = $carGraphqlType->owner;
$owner = $ownerResolver($car);
```

Is there a way to get a default resolver from a field through its Type instance, if the resolver is not defined explicitly. There gotta be a way to do it since It works well when I query it through graphql endpoint. (while resolver for owners is not defined on the CarGraphqlType under the hood it somehow resolve it using default resolver).

```
query {
    cars(id:3) {
        id
        owner{
            id
            name
            age
        }
    }
}
```

So. Is there some way to do so, without explicitly defining resolver for "owner" on "CarGraphqlType".

$carGraphqlType = $this->app->get(CarGraphqlType::class);
$ownerResolver = $carGraphqlType->owner;
$owner = $ownerResolver($car);
The specification recently included a new keyword `repeatable` that allows specifying directives that may be defined multiple times.

https://github.com/graphql/graphql-spec/pull/472

Reading multiple directives already works fine, so that part should not be too hard. We will have to add support for the new keyword and adapt the validation steps to handle it.

Partial support was already added to the reference implementation: https://github.com/graphql/graphql-js/pull/1965

Full support is underway, too: https://github.com/graphql/graphql-js/pull/1541
I want to take my SQL database and create a GraphQL endpoint for it. So, I am trying out graphql-php.

Is there any tool that you know of which can make it easier to define types? 

Let me explain: I can go to my database, pull out all the records from a given table, and create php objects from each row and its fields. I can then JSON encode that and send it over an HTTP endpoint.

Is there anything that will take a sample JSON object, and generate / infer the graphql-php type from that?
- Replace XDebug by PCOV (faster for coverage)
- Upgrade PHPUnit to v8 (keep v7 for EOLed PHP 7.1)
- Run coverage on PHP 7.2
- Fix PHPUnit v8 deprecations
- Port assertArraySubset() from dms/phpunit-arraysubset-asserts for the method in PHPUnit it's deprecated. Also library does not support PHP 7.1, therefore must be ported
- enabled extension installer so we do not need to reference extension includes for extensions supporting it
- added baseline so no more violations can be added while there's no need to fix current ones right now
- few violation fixes

To regenerate baseline there's a new script in Composer `phpstan-baseline`.
https://github.com/webonyx/graphql-php/issues/574#issuecomment-569678316

GA test:

- [x] test CS break
- [x] test PHPStan break
- [x] test unit test break

To compare with Travis run https://travis-ci.org/webonyx/graphql-php/builds/632608253
Hello, Vladimir!
I am tried to use Query batching how described at https://webonyx.github.io/graphql-php/executing-queries/#query-batching

My endpoint code is:
` $schema = new Schema(['query' => Types::query(), 'mutation' => Types::mutation()]);
  $config = ServerConfig::create()->setSchema($schema)->setDebug(true)->setQueryBatching(true);
  $server = new StandardServer($config);
  $server->handleRequest();`

The code works well with query: 
`query {event(id: 27) {id}}`

But don't work with batching query:
`[{"query": "{event(id: 27) {external_id content}}"}]`

There is an error:
`{
  "errors": [
    {
      "message": "Syntax Error: Unexpected [",
      "extensions": {
        "category": "graphql"
      },
      "locations": [
        {
          "line": 1,
          "column": 1
        }
      ]
    }
  ]
}`

Please, help me how to use query batching.




I don't know whether this is an implementation bug or just incorrect documentation.

The documentation for enum type's value entries is stating:
```
Type: mixed
Notes: Internal representation of enum item in your application (could be any value, including complex objects or callbacks)
```

But "any value" is incorrect as [arrays are not allowed](https://github.com/webonyx/graphql-php/blob/master/src/Type/Definition/EnumType.php#L103). If you pass in an array as value it's simply ignored and the name of the enum value is used instead. So it's basically everything **except** and array.
ServerRequestInterface is not needed, parent RequestInterface is sufficient  
Replaced custom PSR-7 test stubs with nyholm/psr-7 implementation  
Fixed reading body contents  

- `ServerRequestInterface extends RequestInterface` so for this case I think it's not a BC break.
- Rephrasing exception message might be considered a BC break I guess.