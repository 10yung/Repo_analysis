**Describe the feature:**
The default tests include a check on the root filesystem, verifying it is mounted with usage under 25%.  This is not always the case in real life.

**Describe the solution you'd like**
Change the test to be <95% so that tests can be expected to pass on most systems.

**Describe alternatives you've considered**
I've changed it temporarily for now so I can work but it is a small change that would make contributing easier

<!--
Thank you for your pull request. Please provide a description above and review
the requirements below.

Bug fixes and new features should include tests and possibly benchmarks.

Contributors guide: ./CONTRIBUTING.md
-->

<!-- _Please make sure to review and check all of these items:_ -->


##### Checklist
<!-- Remove items that do not apply. For completed items, change [ ] to [x]. -->

- [x] `make test-all` (UNIX) passes. CI will also test this
- [x] unit and/or integration tests are included (if applicable)
- [x] documentation is changed or added (if applicable)

<!-- _NOTE: these things are not required to open a PR and can be done afterward / while the PR is open._ -->

### Description of change
<!--
Please provide a description of the change here. Be sure to use issue references when applicable:
https://help.github.com/en/github/managing-your-work-on-github/closing-issues-using-keywords
-->

Add `--vars-inline` to dynamically pass variables which can overwrite variables sourced from `--vars`, but with no deep merging.

Closes #439

<!--
Thank you for your pull request. Please provide a description above and review
the requirements below.

Bug fixes and new features should include tests and possibly benchmarks.

Contributors guide: ./CONTRIBUTING.md
-->

<!-- _Please make sure to review and check all of these items:_ -->


##### Checklist
<!-- Remove items that do not apply. For completed items, change [ ] to [x]. -->

- [x] `make test-all` (UNIX) passes. CI will also test this
- [x] documentation is changed or added
- [ ] update `CC_TEST_REPORTER_ID` with Goss token **(maintainer task)**

<!-- _NOTE: these things are not required to open a PR and can be done afterward / while the PR is open._ -->

### Description of change
<!--
Please describe the change here. Be sure to use issue references when applicable:
https://help.github.com/en/github/managing-your-work-on-github/closing-issues-using-keywords
-->

Add Code Coverage support to perform Static Code Analysis as discussed on #524. This is just the initial setup. When everyone has visibility into the code problems within Goss the contributors can see how their changes affect the overall quality and the maintainers can make informed decisions. 

**The Code Climate PR actions will only be active on PRs that are created after Code Climate is configured and this PR is merged.**

Closes #524.

### Setup Code Climate:

1. [Sign up](https://codeclimate.com/oauth_signups/new) for free to Code Climate for OSS via GitHub
2. Add the Goss Repository on the [OSS Dashboard](https://codeclimate.com/oss/dashboard)
3. Install [Code Climate GitHub App](https://github.com/apps/codeclimate)
4. Locate the `Repo Settings` menu on the [Code Climate Repo Page](https://codeclimate.com/github/aelsabbahy/goss)
5. Locate the `GitHub` menu on the `Repo Settings` page
6. Enable `Summary comments` and `Delete outdated comments and post a new one`
7. Disable `Inline issue comments`
8. Activate `Pull request status updates`
9. Install the `Webhook on GitHub` 
10. Locate the `Test coverage` menu on the `Repo Settings` page
11. Disable `Enforce Diff Coverage` and `Enforce Total Coverage` then save.
12. Generate a new `TEST REPORTER ID` and copy it
13. Replace the `CC_TEST_REPORTER_ID` in this PR's `.travis.yml` with the previous Id
14. Verify the Code Climate Webhook is installed on [GitHub](https://github.com/aelsabbahy/goss/settings/hooks)
**Describe the bug**
new semver version match if match is format 9.99 it fails but if format is 9.99.9 passes 

**How To Reproduce**

package:
   <mypkgmasked>:
      installed: true
      versions:
         and:
            - have-len: 1
            - contain-element:
                 semver-constraint: ">=1.10"

   kernel:
    installed: true
    versions:
        and:
          - have-len: 1
          - contain-element:
              semver-constraint: ">=3.10.0"

mypkg info 
-bash-4.2$ rpm -qa <mypkgmasked> --info
Name        : <mypkgmasked>
Version     : 1.11
Release     : 1.lrh7


**Expected Behavior**
expect package to pass 

**Actual Behavior**
-bash-4.2$ /usr/local/bin/goss -g package-version.yaml validate -f tap
1..4
ok 1 - Package: <mypkgmasked>: installed: matches expectation: [true]
not ok 2 - <mypkgmasked>: version: Error: Expected a valid semver constraint.  Got:
    <string>: >=1.10
ok 3 - Package: kernel: installed: matches expectation: [true]
ok 4 - Package: kernel: version: matches expectation: []


**Environment:**
 - v.0.3.9
 - RHEL7
<!--
Some things to note prior to opening a Goss feature request:
* Goss is intended to be quick and easy to learn.
* Goss is focused on the 20% of the 80/20 rule. In other words, Goss focuses on the 20% of features that cover the core aspects of OS testing and benefit 80% of users.
* Goss provides a generic [command](https://github.com/aelsabbahy/goss/blob/master/docs/manual.md#command) runner to allow users to cover more nuanced test cases.

If after reading the above, you believe your feature is valid within the project scope please submit this feature request.

Once a feature is submitted, it will be reviewed. Upon approval, the issue can be worked on and PRs can be submitted that implement this new feature.
-->

**Describe the feature:**
<!-- A clear and concise description of what the feature/problem. -->
Golint should find 0 problems or fail the CI build.

**Describe the solution you'd like**
<!-- A clear and concise description of what you want to happen. Please provide examples of how you would like this feature to work. -->
While it's non-functional, it's worrying that golint finds a high quantity of problems during builds.
Since most problems seem to be documentation, it will double as a method to lower the entry barrier to understand Goss internals.

**Describe alternatives you've considered**
<!-- A clear and concise description of any alternative solutions or features you've considered (if applicable). -->
Some actions can be taken to minimize the issue:
- Increasing golint problem confidence. 
- Ignoring certain types of golint problems.
- Simply removing golint.

Go vet should also be enabled as part of the build. 
**Describe the feature:**

Updating the README.md (Installation section) with the proper links to the latest release would improve the usability a lot. The described solution can also improve the install script and avoid copy/paste confusion.

**Describe the solution you'd like**

Update the links to _VERSION_ according to <https://help.github.com/en/github/administering-a-repository/linking-to-releases>

```
/owner/name/releases/latest/download/asset-name.zip
```

**Describe alternatives you've considered**

Alternatively, you can link to the latest release version (v0.3.8 atm).

Hi, I am trying to use a command validation to run a database migration as part of controlling container start/stop in a docker compose environment. The process is working well so far but I notice that all I get in the output is the result of the tests:

```
artisan_1    | Failures/Skipped:
artisan_1    |
artisan_1    | Command: db-migrate: exit-status:
artisan_1    | Expected
artisan_1    |     <int>: 1
artisan_1    | to equal
artisan_1    |     <int>: 0
artisan_1    |
artisan_1    | Total Duration: 0.119s
artisan_1    | Count: 1, Failed: 1, Skipped: 0
artisan_1    | Retrying in 2s (elapsed/timeout time: 4.418s/30s)
```

I'd like to know how to get the stderr from the command to show up after the tests run. I noticed there was `stdout` & `stderr` optional parameters in the guide, but I don't quite understand how to use those. 

Thanks! This is a great tool!
**Describe the feature:**
Currently, DNS checks specify the hostname to resolve as a key.  The server name to use for resolving is an attribute.  However, if you want to test the same item resolving on multiple DNS servers you cannot do it as the resolving hostname is a unique key in the heira.

**Describe the solution you'd like**
As previously done with the exec resource, I would like to add a new attribute 'resolve' which optionally holds the hostname to resolve, overriding the key.   This will allow structures such as:

```
dns:
  primaryserver:
    resolve: myhost.company.com
    server: ns0.company.com
    resolveable: yes
  secondaryserver:
    resolve: myhost.company.com
    server: ns1.company.com
    resolveable: yes
```

which will allow you to check correct name resolution from multiple DNS hosts, which is not currently possible.

I also believe that keeping the keys as symbolic only is a better way to work, with all the test definition held in the attributes, as this allows better control when merging.

**Describe alternatives you've considered**
It would be possible to use different resolution targets on different DNS servers, but this seems untidy, and may cause automation or scaling problems.
Hi,

I am using podman for some time now and am starting to use goss as validator / verifier for ansible and my containers. For docker, you have the dgoss, dcgoss wrapper, which is already working fine.

I request to either:

- extend the existing wrapper to support podman via cli switch
- add pgos and bgoss for podman and buildah
- provide cgoss, which is a general container+goss wrapper with support for docker, podman, etc.

After a confirmation of one of the above, I can help to develop this wrapper in the way, you prefer.
Currently, all tests are run in parallel, which is faster and efficient.  However, some tests may not be able to run in parallel with others, or may need to test output created by previous tests.

Can we add optional scheduling attributes 'before' and 'after' to indicate when a test should not be started until the (successful) completion of another test?

This might be a bit of a can-o-worms as it then requires checks for circular dependencies, and a method to start a new thread once its requirements are completed.