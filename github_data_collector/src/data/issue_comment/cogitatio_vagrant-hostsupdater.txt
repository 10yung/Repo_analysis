I ran into the following issue after updating to Fedora 31 from Fedora 30. I was running Vagrant 2.2.5 and then updated contextually to 2.2.6.

When doing a `vagrant up`, Vagrant threw some error about plugins needing attention, so I tried first to repair. That wasn't enough so I tried to reinstall - at that point I got this error:

```shell
Vagrant failed to properly resolve required dependencies. These
errors can commonly be caused by misconfigured plugin installations
or transient network issues. The reported error is:

conflicting dependencies listen (~> 3.0.0) and listen (= 3.1.5)
  Activated listen-3.1.5
  which does not match conflicting dependency (~> 3.0.0)

  Conflicting dependency chains:
    listen (= 3.1.5), 3.1.5 activated

  versus:
    middleman-core (= 4.2.1), 4.2.1 activated, depends on
    listen (~> 3.0.0)
```

I am not sure who introduced that dependency but the only way I could solve it was to re-install the plugin with:

```shell
$ VAGRANT_DISABLE_STRICT_DEPENDENCY_ENFORCEMENT=1 vagrant plugin install vagrant-hostsupdater
```

The `VAGRANT_DISABLE_STRICT_DEPENDENCY_ENFORCEMENT=1` made it pass.

Perhaps this is something you should be aware of.

Thank you and happy new year
System: macOS Mojave 10.14.6

I updated the sudoers file as recommended in README, but it does not work for **removing** hosts. For adding the hosts it works. I changed it directly to my username Andi as it didn't work with the admin group:

```
# Allow passwordless startup of Vagrant with vagrant-hostsupdater.
Cmnd_Alias VAGRANT_HOSTS_ADD = /bin/sh -c echo "*" >> /etc/hosts
Cmnd_Alias VAGRANT_HOSTS_REMOVE = /bin/sed -i -e /*/ d /etc/hosts
Andi ALL=(root) NOPASSWD: VAGRANT_HOSTS_ADD, VAGRANT_HOSTS_REMOVE
```

```
➜  homestead git:(master) ✗ vagrant destroy
    platreform: Are you sure you want to destroy the 'platreform' VM? [y/N] y
==> platreform: Forcing shutdown of VM...
==> platreform: Destroying VM and associated drives...
==> platreform: Pruning invalid NFS exports. Administrator privileges will be required...
==> platreform: [vagrant-hostsupdater] Removing hosts
Password:
```

Does anyone know how the correct command in the sudoers file would be?

With vagrant recently upgraded to 2.2.5, 

    vagrant plugin install vagrant-hostsupdater --local

repeatedly fails with:

```
Unable to resolve dependency: user requested 'vagrant-bindfs (= 1.1.0)'
```
When 2 vagrants with different ip addresses assigned in their Vagrantfile's, but the same domain configured and up, I see
2 entries for the same domain in hosts /etc/hosts, for instance

10.0.0.38  ldap.example.com  # VAGRANT: 8786....
10.0.0.39  ldap.example.com  # VAGRANT: bb25...

Shouldn't hostsupdater detect this? What should be done?  A warning shown during vagrant up? Just asking.
Hi

This doesn't work for me or my colleagues on windows 7 and 10 machines - so I took a look at the code, and I'm a little confused how this is working for Windows users in its current setup (unless they have made their systems open to attack by modifying their 'hosts' attributes)...

## addToHosts

The line  ```if !File.writable_real?(@@hosts_path)``  is used and passes its bash commands to the sudo function. Since Windows 'hosts' files should be read-only for security reasons our machines pass the bash commands to the 'sudo' windows function, which of course fails (there is no sh command).

The windows '''elsif Vagrant::Util::Platform.windows?''' never triggers because of the first ```if`` test is true, so the hosts never updates. Now if we modify this section to allow the windows actions to happen we also have to add in code to make 'hosts' file temporarily writable e.g.

```
      def addToHosts(entries)
        return if entries.length == 0
        content = entries.join("\n").strip

        @ui.info "[vagrant-hostsupdater] Writing the following entries to (#@@hosts_path)"
        @ui.info "[vagrant-hostsupdater]   " + entries.join("\n[vagrant-hostsupdater]   ")
        if !File.writable_real?(@@hosts_path)
          @ui.info "[vagrant-hostsupdater] This operation requires administrative access. You may " +
                       "skip it by manually adding equivalent entries to the hosts file."
          if Vagrant::Util::Platform.windows?
            @ui.info "[vagrant-hostsupdater] Windows platform create hosts"
            require 'tmpdir'
            uuid = @machine.id || @machine.config.hostsupdater.id
            tmpPath = File.join(Dir.tmpdir, 'hosts-' + uuid + '.cmd')
            File.delete(tmpPath) if File.exist?(tmpPath)
            File.open(tmpPath, "w") do |tmpFile|
              tmpFile.puts "attrib -R \"#{@@hosts_path}\""
              entries.each { |line| tmpFile.puts(">>\"#{@@hosts_path}\" echo #{line}") }
              tmpFile.puts "attrib +R \"#{@@hosts_path}\""
            end
            sudo(tmpPath)
            #File.delete(tmpPath)
          elsif !sudo(%Q(sh -c 'echo "#{content}" >> #{@@hosts_path}'))
              @ui.error "[vagrant-hostsupdater] Failed to add hosts, could not use sudo"
              adviseOnSudo
          end
        else
          content = "\n" + content + "\n"
          hostsFile = File.open(@@hosts_path, "a")
          hostsFile.write(content)
          hostsFile.close()
        end
      end
```

You'll notice I had to comment out ```File.delete(tmpPath)```. We found that ruby does not wait for win32ole to complete its action - so while you are typing in your admin credentials ruby has continued and already deleted the temporary file!


## removeFromHosts

Now this one is stranger as again the test if the 'hosts' file is not writable is true so the bash 'SED' command is again sent to the windows part of the 'sudo' function. SED is not native to windows and all my standalone tests show this command does not work with win32ole.  In the cmd windows the '@ui.error' is shown - which is not surprising .  But after being asked my admin credentials, my hosts file does get the entries removed! I really cannot work out why that happens!! Inserting @ui.info comments show the alternative 'else' actions are not triggered. The final thing - and it might be a clue about what is happening - is that the removal of the entries converts my 'hosts' file from CRLF to LF. If anyone can explain this to me I would love to hear how ```removeFromHosts``` is working on Windows.

Thanks






Hello, I already posted this issue on the VVV repo. When I try to install the hostsupdater Plugin, I get this error message:
`
Vagrant has detected project local plugins configured for this
project which are not installed.

  vagrant-hostsupdater
Install local plugins (Y/N) [N]: Y
Installing the 'vagrant-hostsupdater' plugin. This can take a few minutes...
C:/HashiCorp/Vagrant/embedded/mingw64/lib/ruby/2.4.0/win32/registry.rb:652:in `encode': incomplete "\x00" on UTF-16LE (Encoding::InvalidByteSequenceError)
        from C:/HashiCorp/Vagrant/embedded/mingw64/lib/ruby/2.4.0/win32/registry.rb:652:in `read'
        from C:/HashiCorp/Vagrant/embedded/mingw64/lib/ruby/2.4.0/win32/resolv.rb:67:in `read_s'
        from C:/HashiCorp/Vagrant/embedded/mingw64/lib/ruby/2.4.0/win32/resolv.rb:119:in `block (5 levels) in get_info'
        from C:/HashiCorp/Vagrant/embedded/mingw64/lib/ruby/2.4.0/win32/resolv.rb:117:in `each'
        from C:/HashiCorp/Vagrant/embedded/mingw64/lib/ruby/2.4.0/win32/resolv.rb:117:in `find'
        from C:/HashiCorp/Vagrant/embedded/mingw64/lib/ruby/2.4.0/win32/resolv.rb:117:in `block (4 levels) in get_info'
        from C:/HashiCorp/Vagrant/embedded/mingw64/lib/ruby/2.4.0/win32/registry.rb:435:in `open'
        from C:/HashiCorp/Vagrant/embedded/mingw64/lib/ruby/2.4.0/win32/registry.rb:542:in `open'
        from C:/HashiCorp/Vagrant/embedded/mingw64/lib/ruby/2.4.0/win32/resolv.rb:116:in `block (3 levels) in get_info'
        from C:/HashiCorp/Vagrant/embedded/mingw64/lib/ruby/2.4.0/win32/registry.rb:612:in `each_key'
        from C:/HashiCorp/Vagrant/embedded/mingw64/lib/ruby/2.4.0/win32/resolv.rb:115:in `block (2 levels) in get_info'
        from C:/HashiCorp/Vagrant/embedded/mingw64/lib/ruby/2.4.0/win32/registry.rb:435:in `open'
        from C:/HashiCorp/Vagrant/embedded/mingw64/lib/ruby/2.4.0/win32/registry.rb:542:in `open'
        from C:/HashiCorp/Vagrant/embedded/mingw64/lib/ruby/2.4.0/win32/resolv.rb:114:in `block in get_info'
        from C:/HashiCorp/Vagrant/embedded/mingw64/lib/ruby/2.4.0/win32/registry.rb:435:in `open'
        from C:/HashiCorp/Vagrant/embedded/mingw64/lib/ruby/2.4.0/win32/registry.rb:542:in `open'
        from C:/HashiCorp/Vagrant/embedded/mingw64/lib/ruby/2.4.0/win32/resolv.rb:91:in `get_info'
        from C:/HashiCorp/Vagrant/embedded/mingw64/lib/ruby/2.4.0/win32/resolv.rb:21:in `get_resolv_info'
        from C:/HashiCorp/Vagrant/embedded/mingw64/lib/ruby/2.4.0/resolv.rb:1002:in `default_config_hash'
        from C:/HashiCorp/Vagrant/embedded/mingw64/lib/ruby/2.4.0/resolv.rb:1019:in `block in lazy_initialize'
        from C:/HashiCorp/Vagrant/embedded/mingw64/lib/ruby/2.4.0/resolv.rb:1012:in `synchronize'
        from C:/HashiCorp/Vagrant/embedded/mingw64/lib/ruby/2.4.0/resolv.rb:1012:in `lazy_initialize'
        from C:/HashiCorp/Vagrant/embedded/mingw64/lib/ruby/2.4.0/resolv.rb:358:in `block in lazy_initialize'
        from C:/HashiCorp/Vagrant/embedded/mingw64/lib/ruby/2.4.0/resolv.rb:356:in `synchronize'
        from C:/HashiCorp/Vagrant/embedded/mingw64/lib/ruby/2.4.0/resolv.rb:356:in `lazy_initialize'
        from C:/HashiCorp/Vagrant/embedded/mingw64/lib/ruby/2.4.0/resolv.rb:516:in `fetch_resource'
        from C:/HashiCorp/Vagrant/embedded/mingw64/lib/ruby/2.4.0/resolv.rb:510:in `each_resource'
        from C:/HashiCorp/Vagrant/embedded/mingw64/lib/ruby/2.4.0/resolv.rb:491:in `getresource'
        from C:/HashiCorp/Vagrant/embedded/mingw64/lib/ruby/2.4.0/rubygems/remote_fetcher.rb:105:in `api_endpoint'
        from C:/HashiCorp/Vagrant/embedded/mingw64/lib/ruby/2.4.0/rubygems/source.rb:47:in `api_uri'
        from C:/HashiCorp/Vagrant/embedded/mingw64/lib/ruby/2.4.0/rubygems/source.rb:183:in `load_specs'
        from C:/HashiCorp/Vagrant/embedded/gems/2.2.4/gems/vagrant-2.2.4/lib/vagrant/bundler.rb:429:in `block in validate_configured_sources!'
        from C:/HashiCorp/Vagrant/embedded/mingw64/lib/ruby/2.4.0/rubygems/source_list.rb:98:in `each'
        from C:/HashiCorp/Vagrant/embedded/mingw64/lib/ruby/2.4.0/rubygems/source_list.rb:98:in `each_source'
        from C:/HashiCorp/Vagrant/embedded/gems/2.2.4/gems/vagrant-2.2.4/lib/vagrant/bundler.rb:427:in `validate_configured_sources!'
        from C:/HashiCorp/Vagrant/embedded/gems/2.2.4/gems/vagrant-2.2.4/lib/vagrant/bundler.rb:335:in `internal_install'
        from C:/HashiCorp/Vagrant/embedded/gems/2.2.4/gems/vagrant-2.2.4/lib/vagrant/bundler.rb:133:in `install'
        from C:/HashiCorp/Vagrant/embedded/gems/2.2.4/gems/vagrant-2.2.4/lib/vagrant/plugin/manager.rb:138:in `block in install_plugin'
        from C:/HashiCorp/Vagrant/embedded/gems/2.2.4/gems/vagrant-2.2.4/lib/vagrant/plugin/manager.rb:148:in `install_plugin'
        from C:/HashiCorp/Vagrant/embedded/gems/2.2.4/gems/vagrant-2.2.4/lib/vagrant/environment.rb:972:in `block in process_configured_plugins'
        from C:/HashiCorp/Vagrant/embedded/gems/2.2.4/gems/vagrant-2.2.4/lib/vagrant/environment.rb:963:in `each'
        from C:/HashiCorp/Vagrant/embedded/gems/2.2.4/gems/vagrant-2.2.4/lib/vagrant/environment.rb:963:in `process_configured_plugins'
        from C:/HashiCorp/Vagrant/embedded/gems/2.2.4/gems/vagrant-2.2.4/lib/vagrant/environment.rb:179:in `initialize'
        from C:/HashiCorp/Vagrant/embedded/gems/2.2.4/gems/vagrant-2.2.4/bin/vagrant:145:in `new'
        from C:/HashiCorp/Vagrant/embedded/gems/2.2.4/gems/vagrant-2.2.4/bin/vagrant:145:in `<main>'`

I checked the spelling, but it its correct. I removed vagrant from my system and installed it again. No change. It seems to be a problem with the ruby gems install. I am clueless...

Thanks in advance!
My hosts file had gotten messy (unrelated to hostsupdater) so I figured the simplest remedy was to delete it, assuming hostsupdater would recreate it if needed.

But instead `%WINDIR%\System32\drivers\etc\hosts` not existing lead to hostsupdater crashing, in turn causing vagrant to fail during provisioning. I've attached a textfile with the error output. As a sidenote, I was running vagrant from an elevated command prompt.

[hostsupdater error output.txt](https://github.com/cogitatio/vagrant-hostsupdater/files/3137529/hostsupdater.error.output.txt)

Please let me know if I can contribute in any way to solving this or narrowing down the cause.
Previously, only aliases for IPs that had been previously captured in network config in Vagrantfile were added. From now on, all the hash map of aliases is added regardless of the IP.
For example, if a machine had private network configured (for example, with IP 192.168.33.10), and map of aliases such as the following was provided, alias for 127.0.0.1, which wasn't directly mentioned in Vagrantfile, was omitted: 
```
config.hostsupdater.aliases = {
    '192.168.33.10' => ['example.org'],
    '127.0.0.1' => ['external.example.org'],
}
```

This pull request traverses through all the items in the hash map with aliases, and adds all of them, regardless of the ip, which seems more natural for the case when hash map is provided.
```
vagrant plugin install vagrant-hostsupdater
Installing the 'vagrant-hostsupdater' plugin. This can take a few minutes...
/usr/share/gems/gems/psych-3.0.2/lib/psych.rb:232: warning: already initialized constant Psych::LIBYAML_VERSION
/usr/share/ruby/psych.rb:232: warning: previous definition of LIBYAML_VERSION was here
/usr/share/gems/gems/psych-3.0.2/lib/psych.rb:234: warning: already initialized constant Psych::FALLBACK
/usr/share/ruby/psych.rb:234: warning: previous definition of FALLBACK was here
Bundler, the underlying system Vagrant uses to install plugins,
reported an error. The error is shown below. These errors are usually
caused by misconfigured plugin installations or transient network
issues. The error from Bundler is:

conflicting dependencies vagrant-hostsupdater (= 1.0.1) and vagrant-hostsupdater (= 1.0.2)
  Activated vagrant-hostsupdater-1.0.2
  which does not match conflicting dependency (= 1.0.1)

  Conflicting dependency chains:
    vagrant-hostsupdater (= 1.0.2), 1.0.2 activated

  versus:
    vagrant-hostsupdater (= 1.0.1)

  Gems matching vagrant-hostsupdater (= 1.0.1):
    vagrant-hostsupdater-1.0.1
```

how to get rid of that?

I tried removing/uninstalling all plugins and/or vagrant itself, how to proceed here?


Gem with spec version 1.1.1.160 actually contains version 1.0.2 of the plugin.
Here's how to see the difference:

```sh
gem fetch vagrant-hostsupdater
gem unpack vagrant-hostsupdater-1.1.1.160.gem
curl -L -O https://github.com/cogitatio/vagrant-hostsupdater/releases/download/1.1.1/vagrant-hostsupdater.gem
gem unpack vagrant-hostsupdater.gem
```

The snippet above produces 2 directories:
```
.
├── vagrant-hostsupdater # From github
└── vagrant-hostsupdater-1.1.1.160 # gem fetch 
```

[diff.txt](https://github.com/cogitatio/vagrant-hostsupdater/files/2449693/diff.txt) is a difference between the two (`diff -r vagrant-hostsupdater vagrant-hostsupdater-1.1.1.160`; left side is github version,  right side is from rubygems).

I expected that 1.1.1 from rubygems would match 1.1.1 from github. Could you update the gem on ruygems?
