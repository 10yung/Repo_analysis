Story so far
```
/home/rhodges/github/boostorg/boost/libs/beast/cmake-build-debug/test/beast/core/tests-beast-core
beast.core.async_base
beast.core.base64
beast.core.basic_stream
beast.core.bind_handler
beast.core.buffer
beast.core.buffer_traits
beast.core.buffered_read_stream
beast.core.buffers_adaptor
beast.core.buffers_cat
beast.core.buffers_prefix
beast.core.buffers_range
beast.core.buffers_suffix
beast.core.buffers_to_string
beast.core.clamp
beast.core.detect_ssl
beast.core.error
beast.core.file_posix
beast.core.file_stdio
beast.core.flat_buffer
beast.core.flat_static_buffer
beast.core.flat_stream
beast.core.get_io_context
beast.core.make_printable
beast.core.multi_buffer
beast.core.ostream
beast.core.rate_policy
beast.core.read
beast.core.read_size
beast.core.saved_handler
beast.core.sha1
beast.core.span
beast.core.static_buffer
beast.core.static_string
beast.core.stream_traits
beast.core.string_param
beast.core.tcp_stream
beast.core.tuple
beast.core.variant
beast.core.varint
291ms, 39 suites, 39 cases, 134956 tests total, 0 failures
```

### Version of Beast

1.72.0

### Steps necessary to reproduce the problem

Create a lightweight proxy to hold a reference to a `boost::asio::dynamic_string_buffer` compiled with the following preprocessor symbol defined: `BOOST_ASIO_NO_DYNAMIC_BUFFER_V1`

### All relevant compiler information

gcc 9, fedora 31

### To reproduce

```
std::string store;
auto dynbuf = boost::asio::dynamic_buffer(store);
auto os = boost::beast::ostream(LightWeightProxy(dynbuf));
os << "foo";
```

### Outcome

std library throws an exception, followed by segfault

### Investigation

`beast::ostream` creates a specialisation of `beast::detail::ostream_helper` which in turn references a `beast::detail::ostream_buffer`.

`beast::detail::ostream_buffer` is derived from std::ostream and overrides member functions `overflow` and `sync`.

The problem is that when handling the first character, `overflow` is called, which calls `sync`. `sync` then calls `commit(0)` on the underlying buffer. However, contrary to the requirements of asio v1 dynamic buffers, `prepare()` has not yet been called at this stage.

Beast's dynamic buffers are resilient to this incorrect code sequence, but asio's V1 dynamic string buffer is not.

### Solution

Add a call to `b_.prepare(0);` in the constructor of `beast::detail::ostream_buffer`.

Even though conceptually this is a no-op, it serves to satisfy the precondition of calling `b_.commit()`. The internal state of `asio::dynamic_string_buffer` is subtly modified even though the no difference is observed by calls to the `size()` member function by user code.


Hello,

I am exploring desing options with the client system I am building and because it is not possible to have multiple http::async_writes with beast on the same http stream, at this moment I am queuing my writes.
However, it might turn out that I will not need to explicitly process inbound responses in http stream with beast (which also includes parsing http response header), and instead I might just get away with pulling in data from http stream and even discarding it in case of 200 OK.

I tried boost::asio::async_read on http stream and either it reads only some of the inbound data or it fails (depending on invocation). I my naivety I expected this to just read whatever data the server sent in the response.
I also tried asio::async_read_until but I don't seem to make it work at all.
One detail: I was trying to do the above with flat_static_buffer.
I was hoping maybe you have some advice on what is the best approach if one just needs to drain inbound http stream to collect unparsed response data to either discard it or to apply some limited inspection?
Thank you.
This would enable convenient looping like

    for (auto const & [name, value] : fields) { ... }

See [spec](http://eel.is/c++draft/dcl.struct.bind) and [example](http://eel.is/c++draft/pair.astuple).
Hello everyone!

I'd like to implement an asynchronous HTTP client with `Keep-Alive` feature using `Boost::Beast`.
My idea is to create Client object, resolve and connect to the host, and then send get/post/delete requests asynchronously (`io_context` will be working because of `io_context::work` object). But I have a question, about how does it works on lower layer.

Say, I have two requests:
`Req1` - time to handle on the server is 10 seconds;
`Req2` - time to handle on the server is 5 seconds;

and I'm doing two requests immediately:
```
client->Get(Req1, ...);
client->Get(Req2, ...);
```

Note that I suppose to have one connected socket into the client object and use `Keep-Alive` mechanism, and I have the one certain thread running `io_context::run()`.

Is it guaranteed that the sequence of async calls for `Req1` will be totally completed before the sequence of async calls for `Req2` will be started? Otherwise I risk to get response for `Req2` earlier than response for `Req1`.  Not entirely sure how does it work...
Ubuntu 14.04
GCC 4.9.4
Boost 1.72

I have taken your sample and built it against boost 1.72 with gcc 4.9.4. According to boost documentation, I believe this should compile but I am receiving an error. The sample I am using is https://github.com/boostorg/beast/tree/develop/example/websocket/server/chat-multi

Thoughts on why it doesn't compile? Thanks in advance.

```In file included from ext/linux/x86-64/release/include/boost_1.72.0/boost/beast/websocket.hpp:18:0,
                 from ext/linux/x86-64/release/include/boost_1.72.0/boost/beast.hpp:18,
                 from ./misc/beastsocket/./common/include/beast_common/beast.h:13,
                 from ./misc/beastsocket/./server/include/beast_server/websocket_session.h:14,
                 from /home/repos/misc/beastsocket/server/source/websocket_session.cpp:10:
ext/linux/x86-64/release/include/boost_1.72.0/boost/beast/websocket/stream.hpp: In instantiation of ‘class boost::beast::websocket::stream<boost::beast::basic_stream<boost::asio::ip::tcp, boost::asio::executor, boost::beast::unlimited_rate_policy> >’:
./misc/beastsocket/./server/include/beast_server/websocket_session.h:30:42:   required from here
ext/linux/x86-64/release/include/boost_1.72.0/boost/beast/websocket/stream.hpp:883:5: internal compiler error: in tsubst, at cp/pt.c:11743
     async_handshake(
     ^
0x5ed04c tsubst(tree_node*, tree_node*, int, tree_node*)
	../../../gcc-4.9.4/gcc/cp/pt.c:11743
0x5f1442 tsubst_template_args
	../../../gcc-4.9.4/gcc/cp/pt.c:10018
0x5ebf9b tsubst(tree_node*, tree_node*, int, tree_node*)
	../../../gcc-4.9.4/gcc/cp/pt.c:11939
0x5ec50b tsubst(tree_node*, tree_node*, int, tree_node*)
	../../../gcc-4.9.4/gcc/cp/pt.c:11589
0x5f1442 tsubst_template_args
	../../../gcc-4.9.4/gcc/cp/pt.c:10018
0x5ebf9b tsubst(tree_node*, tree_node*, int, tree_node*)
	../../../gcc-4.9.4/gcc/cp/pt.c:11939
0x5ec32d tsubst(tree_node*, tree_node*, int, tree_node*)
	../../../gcc-4.9.4/gcc/cp/pt.c:11581
0x5ed615 tsubst_template_parm
	../../../gcc-4.9.4/gcc/cp/pt.c:10149
0x5ed615 tsubst_template_parms
	../../../gcc-4.9.4/gcc/cp/pt.c:10110
0x5f3629 tsubst_decl
	../../../gcc-4.9.4/gcc/cp/pt.c:10474
0x5ec4af tsubst(tree_node*, tree_node*, int, tree_node*)
	../../../gcc-4.9.4/gcc/cp/pt.c:11555
0x5fddd1 instantiate_class_template_1
	../../../gcc-4.9.4/gcc/cp/pt.c:9135
0x5fddd1 instantiate_class_template(tree_node*)
	../../../gcc-4.9.4/gcc/cp/pt.c:9449
0x656b8d complete_type(tree_node*)
	../../../gcc-4.9.4/gcc/cp/typeck.c:134
0x5d855e grokdeclarator(cp_declarator const*, cp_decl_specifier_seq*, decl_context, int, tree_node**)
	../../../gcc-4.9.4/gcc/cp/decl.c:10594
0x61631c grokfield(cp_declarator const*, cp_decl_specifier_seq*, tree_node*, bool, tree_node*, tree_node*)
	../../../gcc-4.9.4/gcc/cp/decl2.c:852
0x62929e cp_parser_member_declaration
	../../../gcc-4.9.4/gcc/cp/parser.c:20556
0x62cae0 cp_parser_member_specification_opt
	../../../gcc-4.9.4/gcc/cp/parser.c:20105
0x62cae0 cp_parser_class_specifier_1
	../../../gcc-4.9.4/gcc/cp/parser.c:19333
0x62cae0 cp_parser_class_specifier
	../../../gcc-4.9.4/gcc/cp/parser.c:19560
Please submit a full bug report,
with preprocessed source if appropriate.
Please include the complete backtrace with any bug report.
See <http://gcc.gnu.org/bugs.html> for instructions.
make: *** [beastsocket/server/source/websocket_session.o] Error 1
```
I have an HTTPS server built off beast. At seemingly random times, an assertion inside timeout_handler (within basic_stream.hpp) that asserts that state.timeout is false fails, and kills my server. My program is basically the example HTTPS server with POST handling added, and I'm really not sure what the source of the issue is. I provided some code that may be related.

Does anybody have any idea how it would be possible for state.timeout to sometimes fail to be reset to "false"? Looking through the code the timeout appears to only be set directly after this assertion, and in two other areas within basic_stream.hpp. I cannot seem to find anybody else experiencing this error. Could it have something to do with using a do_close() function? Or could it have something to do with using a thread pool?

I have been struggling with this all day and would appreciate any input!

### beast code where assertion fails:


```
template<class Protocol, class Executor, class RatePolicy>
struct basic_stream<Protocol, Executor, RatePolicy>::
    timeout_handler
{
    op_state& state;
    boost::weak_ptr<impl_type> wp;
    tick_type tick;

    void
    operator()(error_code ec)
    {
        // timer canceled
        if(ec == net::error::operation_aborted)
            return;
        BOOST_ASSERT(! ec);

        auto sp = wp.lock();

        // stream destroyed
        if(! sp)
            return;

        // stale timer
        if(tick < state.tick)
            return;
        BOOST_ASSERT(tick == state.tick);

        // timeout
        BOOST_ASSERT(! state.timeout); // <---- ASSERTION FAILS HERE
        sp->close();
        state.timeout = true;
    }
};
```

### Some server code

Used in the async_write callback:

```
if (sp->need_eof())
{
	return session_ptr->do_close();
	session_ptr->res_ = nullptr;
} else {
	session_ptr->res_ = nullptr;
	session_ptr->do_read();
}
```

async_read's callback includes these lines:

```
if (ec == boost::beast::http::error::end_of_stream || ec == boost::asio::error::connection_reset)
	return do_close();
```

And do_close looks like:

```
void http_server_session::do_close()
{
	boost::system::error_code ec;
	socket_.shutdown(tcp::socket::shutdown_send, ec);
}
```

And my thread pool initialization looks like:

```
for (auto i = thread_count - 1; i > 0; --i) {
		threads.emplace_back([&io_context] {
		io_context.run();
	});
}
```

### Version of Beast

I'm using Boost 1.70.0

### All relevant compiler information

Microsoft Visual Studio 2017
@vinniefalco thanks for the amazing ws library. I've been using this for many projects. However, for a strange reason it doesn't seem to work for the Bria softphone desktop API after their 5.8 update. The socket connection establishes without any issues but when I write to it, it doesn't seem to transfer. When I try to read, it fails with "Error: The WebSocket stream was gracefully closed at both endpoints".
One thing to note that, Bria API accepts connections to any target and if the target is incorrect, this behaviour is desirable I guess. But I'm using the exact same target they provided and also javascript test with same target seems to work just fine.
I'm attaching the test codes for both C++ and Javascript for you to check. I'd be thankful if you can help.

C++:
`

        auto host = "cpclientapi.softphone.com", endpoint = "/counterpath/socketapi/v1", port = "9002";
        net::io_context ioc;
        ssl::context ctx{ssl::context::tls_client};
        websocket::stream<ssl::stream<tcp::socket>> m_websocket{ioc, ctx};

        tcp::resolver resolver{ioc};

        const auto resolved = resolver.resolve(host, port);

        boost::asio::connect(m_websocket.next_layer().next_layer(), resolved.begin(), resolved.end());

        m_websocket.next_layer().handshake(ssl::stream_base::client);
        m_websocket.handshake(host, endpoint);

        std::string request = "GET/bringToFront\n"
                       "User-Agent: TestApp\n"
                       "Transaction-ID: AE26f998027\n"
                       "Content-Type: application/xml\n"
                       "Content-Length: 0";
        m_websocket.write(boost::asio::buffer(request));

        beast::flat_buffer m_resBuffer;
        m_websocket.read(m_resBuffer);

        std::cout << beast::buffers_to_string(m_resBuffer.data()) << std::endl;

        m_websocket.close(websocket::close_code::normal);`


Javascript:
`

    const  ws = new WebSocket("wss://cpclientapi.softphone.com:9002/counterpath/socketapi/v1");

    ws.addEventListener('message', function (event) {
        console.log(event.data);
    });
    
    ws.addEventListener('open', function (event) {
        ws.send("GET/bringToFront\n" +
            "User-Agent: MyApplication\n" +
            "Transaction-ID: AE26f998027\n" +
            "Content-Type: application/xml\n" +
            "Content-Length: 0")
    });`

PS: This is the output I get from BOOST_ASIO_ENABLE_HANDLER_TRACKING, if that helps.

_@asio|1578194069.501070|0|resolver@0x7ffee37681f0.cancel
@asio|1578194069.556133|0|resolver@0x7ffee3769738.cancel
@asio|1578194069.556544|0|socket@0x7fc9a880a260.close
Error: The WebSocket stream was gracefully closed at both endpoints
@asio|1578194069.557341|0|socket@0x7fc9a8008660.close_
Hi all. @vinniefalco thank you for that wonderful library. I'm wondering what will be the most popular rest framework on top of beast at the moment? The only one I've found so far is that https://github.com/0xdead4ead/BeastHttp which is way less popular than the beast project itself :(. I'm wondering if exists something simular with better adoption. I'm looking for a popular library that provides ease of development and high performance.