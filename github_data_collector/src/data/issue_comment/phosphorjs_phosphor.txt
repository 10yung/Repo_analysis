The `GridLayout` class should have tests. A good place to start is with `boxlayout.spec.ts`.
This is a rewrite of the existing `virtualdom` package, to be compatible with JSX/TSX. The JSX typings are assembled from Preact (mostly) and React (some), with some custom tweaks as needed.

The typings right now are good, but it assumes every HTML element has *all* attributes available. We can improve this in the future.

The typings support SVG, but I'm 99% sure it's not going to work yet. I'm sure I'll need to add some code to handle SVG elements properly.

It supports intrinsic elements and now *also* function components. I still don't think we need support for class-based components, since we already have widgets with their own life-cycle paradigm. The purpose of this package is to provide a tool for easily rendering leaf content out-of-the-box with Phosphor.

This code is *fast*. On my machine, the included example takes just 15us to render updates.

For Phosphor 2.0, my plan is to deprecate the `virtualdom` package and replace it with this. For core widgets which make use of custom renderers, I will make the renderer interface more generic so that users can implement their own renderers using any third party package (React, Vue, lit-html, etc...). The default renderers will use this package.

@blink1073 @afshin @ellisonbg @jasongrout @telamonian

Hi @sccolbert (cc. @jasongrout, @blink1073, @afshin, @ellisonbg, @SylvainCorlay) I have been working on adding editing capabilities to DataGrid and trying to have a flexible design so that it is possibly something that can be merged to upstream and useful for everyone. It is still a work in progress and I would appreciate any feedback.

In a short summary, it adds a new DataModel (MutableDataModel), ICellEditorController interface with a concrete implementation and ICellEditor interface with several editor implementations and ICellInputValidator interface with concrete implementations for some types. I also added cursor movement using Tab & Enter keys within body or confined to selections when there are any.

Editing is possible if data model is of type MutableDataModel and there is a selection model. It is triggered using double click or typing. Editing can also be triggered programmatically, optionally with a custom editor and validator. Editor type to use is inferred from metadata if the metadata follows the schema defined in https://frictionlessdata.io/specs/table-schema/, otherwise if cell data is a primitive type TextCellEditor is used.

Cell editors to used can be set/overridden based on cell data type or metadata key-value pair match.

DataGrid example is modified to present most of the editing features including a custom cell editor.

![CellEditing](https://user-images.githubusercontent.com/40003442/67236984-4f662f00-f418-11e9-94a1-be92adcbe7f5.gif)

Some Documentation to help with PR
----------

Cursor movement
- Tab -> right, Shift + Tab -> left
- Enter -> down, Shift + Enter -> up
- Editing starts at cursor position and cursor moves to next column / next row when next move step requires so
- Cursor moves within selection rectangles and jumps to next rectangle when next move step requires so
![CursorMovement](https://user-images.githubusercontent.com/40003442/67237114-994f1500-f418-11e9-8d53-f4402bb69186.gif)

Deleting Cell values (setting to null) using Delete key

MutableDataModel which defines new method setData

Cell Editor
- If cells have metadata information (based on schema at https://frictionlessdata.io/specs/table-schema/), type information is used to choose best cell editor for a cell

TextCellEditor
- Default editor unless there is a better match and cell data type is primitive
- Editor for cells of type string, displayed as a text input
- Field Metadata `{type: 'string'}`

NumberCellEditor
- Editor for real number typed cells, displayed as a text input
- Field Metadata `{type: 'number'}`

IntegerCellEditor
- Editor for integer typed cells, displayed as a spinner input
- Field Metadata `{type: 'integer'}`

BooleanCellEditor
- Editor for boolean typed cells, displayed as a checkbox
- Field Metadata `{type: 'boolean'}`

DateCellEditor
- Editor for date typed cells, displayed as a date picker
- Field Metadata `{type: 'date'}`

OptionCellEditor
- Editor for cell with data types that have enum options, displayed as a drop down list
- Field Metadata `{type: any, constraint: {enum: [list of options]}}`

DynamicOptionCellEditor
- Editor for cell with data types that have options from previously entered values in the same column, displayed as an autocomplete drop down list
- Field Metadata `{type: any, constraint: {enum: 'dynamic'}}`. This is not a standard schema format, I extended it.

Editor Controller
- Manages editor overrides and instances
- Editors can be overridden based on cell data type and metadata key-value pair match
- Controller makes sure there is only one editor active at a time

Validators
- Before values input are committed, they are serialized and validated if a validator is available. Validation error messages are shown using standard HTML form validation system.

TextInputValidator
- Checks for valid text entry
- Can check for min/max text length and regex pattern match requirements

NumberInputValidator
- Checks for valid real number entry
- Can check for min/max bounds

IntegerInputValidator
- Checks for valid integer entry
- Can check for min/max bounds
Forcing Phosphor to be a singleton on the page is "not nice" for projects which consume Phosphor. It means new functionality in Phosphor is not available for the users of those downstream projects until those projects update their dependencies. For Phosphor 2.0 (which should hopefully be the last *major* version of Phosphor) I think we can do better.

One idea that I have is to leverage `Symbol.for('@phosphor/widgets@2.x')` and tag the `Widget` prototype with that Symbol for each minor release. Since the Symbol is guaranteed to be global on the page, it would let duplicate prototypes function just fine, because we could guarantee they have the needed API. Instead of using the `instanceof` operator, we could have some convenience functions for checking the presence of the symbols.

This idea may have holes, but it's a good starting point I think.

CC @afshin @blink1073 @jasongrout 
For BoxLayout and SplitLayout, these properties should be initialized when the sizer is created (if possible). In some cases, the widget will be resized before the fit request is processed. This means the initial layout will have stale data. In the case of the SplitLayout, this causes the initial layout to be completely wrong when one widget has a stretch factor of zero.

https://github.com/phosphorjs/phosphor/blob/master/packages/widgets/src/splitlayout.ts#L297
I'm using OS X 10.14, and the latest version of Firefox (69). On master, I recently noticed that a few dozen of the unittest for the `FocusTracker` and `TabBar` widgets were failing:

```
SUMMARY:
✔ 760 tests completed
✖ 34 tests failed

FAILED TESTS:
  @phosphor/widgets
    FocusTracker
      #currentChanged
        ✖ should be emitted when the current widget has changed
          Firefox 69.0.0 (Mac OS X 10.14.0)
        expected null to not equal null
        AssertionError@build/bundle.test.js:21511:13
        module.exports/Assertion.prototype.assert@build/bundle.test.js:39332:13
        assertEqual@build/bundle.test.js:39849:12
        module.exports/ctx[name]@build/bundle.test.js:43285:25
        @build/bundle.test.js:31062:48


      #activeChanged
        ✖ should be emitted when the active widget has changed
          Firefox 69.0.0 (Mac OS X 10.14.0)
        expected null to not equal null
        AssertionError@build/bundle.test.js:21511:13
        module.exports/Assertion.prototype.assert@build/bundle.test.js:39332:13
        assertEqual@build/bundle.test.js:39849:12
        module.exports/ctx[name]@build/bundle.test.js:43285:25
        @build/bundle.test.js:31093:48

...
```

The strange thing is that I don't see these failures when testing using Chrome, and I don't see the failures in the CI run on the commits I made in PR #437, even though the CI also uses Firefox. Not sure what's going on.



<details> 
<summary>The rest of the unittest failure log</summary>

        ✖ should be emitted when the active widget is set to null
          Firefox 69.0.0 (Mac OS X 10.14.0)
        expected null to not equal null
        AssertionError@build/bundle.test.js:21511:13
        module.exports/Assertion.prototype.assert@build/bundle.test.js:39332:13
        assertEqual@build/bundle.test.js:39849:12
        module.exports/ctx[name]@build/bundle.test.js:43285:25
        @build/bundle.test.js:31107:48


      #currentWidget
        ✖ should be set to the widget that gained focus
          Firefox 69.0.0 (Mac OS X 10.14.0)
        expected { Object (_flags, _layout, ...) } to equal { Object (_flags, _layout, ...) }
        AssertionError@build/bundle.test.js:21511:13
        module.exports/Assertion.prototype.assert@build/bundle.test.js:39332:13
        assertEqual@build/bundle.test.js:39849:12
        module.exports/ctx[name]@build/bundle.test.js:43285:25
        @build/bundle.test.js:31146:57


        ✖ should revert to the previous widget if the current widget is removed
          Firefox 69.0.0 (Mac OS X 10.14.0)
        expected { Object (_flags, _layout, ...) } to equal { Object (_flags, _layout, ...) }
        AssertionError@build/bundle.test.js:21511:13
        module.exports/Assertion.prototype.assert@build/bundle.test.js:39332:13
        assertEqual@build/bundle.test.js:39849:12
        module.exports/ctx[name]@build/bundle.test.js:43285:25
        @build/bundle.test.js:31156:57


      #activeWidget
        ✖ should be set to `null` when the active widget loses focus
          Firefox 69.0.0 (Mac OS X 10.14.0)
        expected { Object (_flags, _layout, ...) } to equal null
        AssertionError@build/bundle.test.js:21511:13
        module.exports/Assertion.prototype.assert@build/bundle.test.js:39332:13
        assertEqual@build/bundle.test.js:39849:12
        module.exports/ctx[name]@build/bundle.test.js:43285:25
        @build/bundle.test.js:31186:56


        ✖ should be set to the widget that gained focus
          Firefox 69.0.0 (Mac OS X 10.14.0)
        expected { Object (_flags, _layout, ...) } to equal { Object (_flags, _layout, ...) }
        AssertionError@build/bundle.test.js:21511:13
        module.exports/Assertion.prototype.assert@build/bundle.test.js:39332:13
        assertEqual@build/bundle.test.js:39849:12
        module.exports/ctx[name]@build/bundle.test.js:43285:25
        @build/bundle.test.js:31197:56


      #focusNumber()
        ✖ should give the highest number for the currentWidget
          Firefox 69.0.0 (Mac OS X 10.14.0)
        expected -1 to equal 1
        AssertionError@build/bundle.test.js:21511:13
        module.exports/Assertion.prototype.assert@build/bundle.test.js:39332:13
        assertEqual@build/bundle.test.js:39849:12
        module.exports/ctx[name]@build/bundle.test.js:43285:25
        @build/bundle.test.js:31236:64


        ✖ should update when a widget gains focus
          Firefox 69.0.0 (Mac OS X 10.14.0)
        expected 0 to equal 2
        AssertionError@build/bundle.test.js:21511:13
        module.exports/Assertion.prototype.assert@build/bundle.test.js:39332:13
        assertEqual@build/bundle.test.js:39849:12
        module.exports/ctx[name]@build/bundle.test.js:43285:25
        @build/bundle.test.js:31257:64


      #remove()
        ✖ should set the currentWidget to the previous one if the widget is the currentWidget
          Firefox 69.0.0 (Mac OS X 10.14.0)
        expected { Object (_flags, _layout, ...) } to equal { Object (_flags, _layout, ...) }
        AssertionError@build/bundle.test.js:21511:13
        module.exports/Assertion.prototype.assert@build/bundle.test.js:39332:13
        assertEqual@build/bundle.test.js:39849:12
        module.exports/ctx[name]@build/bundle.test.js:43285:25
        @build/bundle.test.js:31318:57


    TabBar
      #tabMoved
        ✖ should be emitted when a tab is moved right by the user
          Firefox 69.0.0 (Mac OS X 10.14.0)
        Timeout of 2000ms exceeded. For async tests and hooks, ensure "done()" is called; if returning a Promise, ensure it resolves.

        ✖ should be emitted when a tab is moved left by the user
          Firefox 69.0.0 (Mac OS X 10.14.0)
        Timeout of 2000ms exceeded. For async tests and hooks, ensure "done()" is called; if returning a Promise, ensure it resolves.

      #tabActivateRequested
        ✖ should be emitted when a tab is left pressed by the user
          Firefox 69.0.0 (Mac OS X 10.14.0)
        expected false to equal true
        AssertionError@build/bundle.test.js:21511:13
        module.exports/Assertion.prototype.assert@build/bundle.test.js:39332:13
        assertEqual@build/bundle.test.js:39849:12
        module.exports/ctx[name]@build/bundle.test.js:43285:25
        @build/bundle.test.js:35414:42


        ✖ should make the tab current and emit the `currentChanged` signal
          Firefox 69.0.0 (Mac OS X 10.14.0)
        expected 1 to equal 2
        AssertionError@build/bundle.test.js:21511:13
        module.exports/Assertion.prototype.assert@build/bundle.test.js:39332:13
        assertEqual@build/bundle.test.js:39849:12
        module.exports/ctx[name]@build/bundle.test.js:43285:25
        @build/bundle.test.js:35424:52


        ✖ should emit even if the pressed tab is the current tab
          Firefox 69.0.0 (Mac OS X 10.14.0)
        expected false to equal true
        AssertionError@build/bundle.test.js:21511:13
        module.exports/Assertion.prototype.assert@build/bundle.test.js:39332:13
        assertEqual@build/bundle.test.js:39849:12
        module.exports/ctx[name]@build/bundle.test.js:43285:25
        @build/bundle.test.js:35435:42


      #tabCloseRequested
        ✖ should be emitted when a tab close icon is left clicked
          Firefox 69.0.0 (Mac OS X 10.14.0)
        expected false to equal true
        AssertionError@build/bundle.test.js:21511:13
        module.exports/Assertion.prototype.assert@build/bundle.test.js:39332:13
        assertEqual@build/bundle.test.js:39849:12
        module.exports/ctx[name]@build/bundle.test.js:43285:25
        @build/bundle.test.js:35458:42


        ✖ should be emitted when a tab is middle clicked
          Firefox 69.0.0 (Mac OS X 10.14.0)
        expected false to equal true
        AssertionError@build/bundle.test.js:21511:13
        module.exports/Assertion.prototype.assert@build/bundle.test.js:39332:13
        assertEqual@build/bundle.test.js:39849:12
        module.exports/ctx[name]@build/bundle.test.js:43285:25
        @build/bundle.test.js:35471:42


      #tabDetachRequested
        ✖ should be emitted when a tab is dragged beyond the detach threshold
          Firefox 69.0.0 (Mac OS X 10.14.0)
        expected false to equal true
        AssertionError@build/bundle.test.js:21511:13
        module.exports/Assertion.prototype.assert@build/bundle.test.js:39332:13
        assertEqual@build/bundle.test.js:39849:12
        module.exports/ctx[name]@build/bundle.test.js:43285:25
        @build/bundle.test.js:35512:42


        ✖ should be handled by calling `releaseMouse` and removing the tab
          Firefox 69.0.0 (Mac OS X 10.14.0)
        expected false to equal true
        AssertionError@build/bundle.test.js:21511:13
        module.exports/Assertion.prototype.assert@build/bundle.test.js:39332:13
        assertEqual@build/bundle.test.js:39849:12
        module.exports/ctx[name]@build/bundle.test.js:43285:25
        @build/bundle.test.js:35524:42


        ✖ should only be emitted once per drag cycle
          Firefox 69.0.0 (Mac OS X 10.14.0)
        expected 0 to equal 1
        AssertionError@build/bundle.test.js:21511:13
        module.exports/Assertion.prototype.assert@build/bundle.test.js:39332:13
        assertEqual@build/bundle.test.js:39849:12
        module.exports/ctx[name]@build/bundle.test.js:43285:25
        @build/bundle.test.js:35536:42


        ✖ should add the `p-mod-dragging` class to the tab and the bar
          Firefox 69.0.0 (Mac OS X 10.14.0)
        expected false to equal true
        AssertionError@build/bundle.test.js:21511:13
        module.exports/Assertion.prototype.assert@build/bundle.test.js:39332:13
        assertEqual@build/bundle.test.js:39849:12
        module.exports/ctx[name]@build/bundle.test.js:43285:25
        @build/bundle.test.js:35550:42


      #allowDeselect
        ✖ should determine whether a tab can be deselected by the user
          Firefox 69.0.0 (Mac OS X 10.14.0)
        expected 2 to equal -1
        AssertionError@build/bundle.test.js:21511:13
        module.exports/Assertion.prototype.assert@build/bundle.test.js:39332:13
        assertEqual@build/bundle.test.js:39849:12
        module.exports/ctx[name]@build/bundle.test.js:43285:25
        @build/bundle.test.js:35595:52


      #handleEvent()
        left click
          ✖ should emit a tab close requested signal
            Firefox 69.0.0 (Mac OS X 10.14.0)
          expected false to equal true
          AssertionError@build/bundle.test.js:21511:13
          module.exports/Assertion.prototype.assert@build/bundle.test.js:39332:13
          assertEqual@build/bundle.test.js:39849:12
          module.exports/ctx[name]@build/bundle.test.js:43285:25
          @build/bundle.test.js:35968:46


        middle click
          ✖ should emit a tab close requested signal
            Firefox 69.0.0 (Mac OS X 10.14.0)
          expected false to equal true
          AssertionError@build/bundle.test.js:21511:13
          module.exports/Assertion.prototype.assert@build/bundle.test.js:39332:13
          assertEqual@build/bundle.test.js:39849:12
          module.exports/ctx[name]@build/bundle.test.js:43285:25
          @build/bundle.test.js:36010:46


        mousedown
          ✖ should add event listeners if the tabs are movable
            Firefox 69.0.0 (Mac OS X 10.14.0)
          expected -1 to not equal -1
          AssertionError@build/bundle.test.js:21511:13
          module.exports/Assertion.prototype.assert@build/bundle.test.js:39332:13
          assertEqual@build/bundle.test.js:39849:12
          module.exports/ctx[name]@build/bundle.test.js:43285:25
          @build/bundle.test.js:36044:75


        mousemove
          ✖ should do nothing if there is a drag in progress
            Firefox 69.0.0 (Mac OS X 10.14.0)
          expected 0 to equal 1
          AssertionError@build/bundle.test.js:21511:13
          module.exports/Assertion.prototype.assert@build/bundle.test.js:39332:13
          assertEqual@build/bundle.test.js:39849:12
          module.exports/ctx[name]@build/bundle.test.js:43285:25
          @build/bundle.test.js:36084:46


          ✖ should emit the detach requested signal if the threshold is exceeded
            Firefox 69.0.0 (Mac OS X 10.14.0)
          expected false to equal true
          AssertionError@build/bundle.test.js:21511:13
          module.exports/Assertion.prototype.assert@build/bundle.test.js:39332:13
          assertEqual@build/bundle.test.js:39849:12
          module.exports/ctx[name]@build/bundle.test.js:43285:25
          @build/bundle.test.js:36112:46


          ✖ should bail if the signal handler aborted the drag
            Firefox 69.0.0 (Mac OS X 10.14.0)
          expected false to equal true
          AssertionError@build/bundle.test.js:21511:13
          module.exports/Assertion.prototype.assert@build/bundle.test.js:39332:13
          assertEqual@build/bundle.test.js:39849:12
          module.exports/ctx[name]@build/bundle.test.js:43285:25
          @build/bundle.test.js:36123:46


          ✖ should update the positions of the tabs
            Firefox 69.0.0 (Mac OS X 10.14.0)
          expected false to equal true
          AssertionError@build/bundle.test.js:21511:13
          module.exports/Assertion.prototype.assert@build/bundle.test.js:39332:13
          assertEqual@build/bundle.test.js:39849:12
          module.exports/ctx[name]@build/bundle.test.js:43285:25
          @build/bundle.test.js:36134:46


        mouseup
          ✖ should emit the `tabMoved` signal
            Firefox 69.0.0 (Mac OS X 10.14.0)
          Timeout of 2000ms exceeded. For async tests and hooks, ensure "done()" is called; if returning a Promise, ensure it resolves.

          ✖ should move the tab to its final position
            Firefox 69.0.0 (Mac OS X 10.14.0)
          Timeout of 2000ms exceeded. For async tests and hooks, ensure "done()" is called; if returning a Promise, ensure it resolves.

          ✖ should cancel a middle mouse release
            Firefox 69.0.0 (Mac OS X 10.14.0)
          expected false to equal true
          AssertionError@build/bundle.test.js:21511:13
          module.exports/Assertion.prototype.assert@build/bundle.test.js:39332:13
          assertEqual@build/bundle.test.js:39849:12
          module.exports/ctx[name]@build/bundle.test.js:43285:25
          @build/bundle.test.js:36159:49


        keydown
          ✖ should prevent default
            Firefox 69.0.0 (Mac OS X 10.14.0)
          expected false to equal true
          AssertionError@build/bundle.test.js:21511:13
          module.exports/Assertion.prototype.assert@build/bundle.test.js:39332:13
          assertEqual@build/bundle.test.js:39849:12
          module.exports/ctx[name]@build/bundle.test.js:43285:25
          @build/bundle.test.js:36167:49


        contextmenu
          ✖ should prevent default
            Firefox 69.0.0 (Mac OS X 10.14.0)
          expected false to equal true
          AssertionError@build/bundle.test.js:21511:13
          module.exports/Assertion.prototype.assert@build/bundle.test.js:39332:13
          assertEqual@build/bundle.test.js:39849:12
          module.exports/ctx[name]@build/bundle.test.js:43285:25
          @build/bundle.test.js:36181:49

</details> 
As it says on the tin.

https://skia.org/user/modules/canvaskit

This could be a way to get rid of our `GraphicsContext` wrapper which tries to minimize state changes. The Skia API is stateless, so we should get a nice performance boost from just that. Nevermind cutting out the whole browser translation layer.
I'd like to create a keybinding that only works on macs. Intuitively, I might imagine something like 
```json
           {
               "command": "notebook:create-console",
               "selector": ".jp-Notebook:focus",
               "macKeys": ["Cmd Shift ."]
           }
```
but I think that won't work in the current code (we assume keys is an array throughout the code, and this would make it undefined on non-Mac platforms). I could do this:
```json
           {
               "command": "notebook:create-console",
               "selector": ".jp-Notebook:focus",
               "keys": [],
               "macKeys": ["Cmd Shift ."]
           }
```
but that assumes that the matching function at https://github.com/phosphorjs/phosphor/blob/7a87d35111bd0ebf0118bba3637a274d62106bf1/packages/commands/src/index.ts#L1356-L1369 is *never* called with userKeys being an empty list. I think that's valid - are we guaranteed that?

Note that I can't do
```json
           {
               "command": "notebook:create-console",
               "selector": ".jp-Notebook:focus",
               "keys": ["Cmd Shift ."]
           }
```
because this would be translated to "Shift ." on non-mac platforms, which is not intuitive to me. I think the current behavior of ignoring Cmd on non-mac platforms should be changed to invalidating a keybinding if it contains Cmd on a non-mac platform.
Fixes #395, #436, and probably a bunch of other issues.

This PR adds the `hpass` function and `VirtualElementPass` class described in #436. There are still a number of unanswered questions as to the detials of their implementations. For example, should `VirtualElementPass` allow for children and, if so, how should they be handled?
Following up on a suggestion made by @jasongrout during the latest Phosphor session/call, I think we should add a "pass thru" vdom element that renders a real DOM element using a callback. This could act like an escape hatch from Phosphor's vdom and allow for composition with vdom elements from other libraries (like React, hint, hint).

Given the structure of the `virtualdom` package and the [`updateContent`](https://github.com/phosphorjs/phosphor/blob/master/packages/virtualdom/src/index.ts#L1046) function, I think it would make sense to implement this via an `hpass` function with the following signature:

```typescript
export function hpass(callback: (host: HTMLElement) => void): VirtualElementPass {
  ...
}
```

This could exist alongside the extant `h` function. During `updateContent`, when a node with:

```typescript
node.type === 'passthru'
```

is encountered, `node.callback(host)` will be invoked, and from that point on any diffing/updating will be the responsibility of the callback.

I think the most important/urgent use case for this is allowing for the blending of React vdom into Phosphor vdom. The above pattern can mesh very nicely with `ReactDOM.render(host, Component)`, since that function does its own diffing. This would allow Phosphor to better accommodate React while still avoiding any dependency on it.

I'm currently prepping a PR based on the above.

cc @jasongrout @blink1073 @sccolbert 