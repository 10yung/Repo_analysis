Elaborated on here: https://superuser.com/questions/1030329/better-to-block-a-host-to-0-0-0-0-than-to-127-0-0-1

The short version: Windows designates 0.0.0.0 as a non-routable meta-address used to designate an invalid, unknown, or non-applicable target. It is not subject to timeout resolution and does not interfere with local web servers.
Profiles (essentially "host file fragments") would allow entire blocks of IP addresses to be saved and applied/removed from the system hosts file. Primary use case are swapping entire sets of domains between different environments (or to bypass a load balancer), or simply shipping a set of "dev" host entries along with an application.

Initial thoughts on Cmdlets:

`Export-HostsProfile -Hosts @("hosta", "hostb*") -Profile SomeProfile`
`Remove-HostsProfile -Profile SomeProfile` - Essentially just `Remove-Item` on the file
`Publish-HostsProfile -Profile SomeProfile` - Merges a hosts profile into the hosts file, basically calling `Set-HostEntry -Force` for each of them.
`Unpublish-HostsProfile -Profile SomeProfile` - Removes all host entries specified by a profile (no attempt to restore previous values)

(`Profile` is either a path to a file or potentially just be a name, in which case it will be stored in `Documents\PsHosts\Profiles`)

It's probably unnecessary for any of these cmdlets to be C#, since they are all wrapping basic functionality around the core hosts cmdlets.
Because writes to the hosts file aren't committed until `EndProcessing`, piping together write operations fail. For example, the following test fails `Set` re-reads the hosts file and doesn't find the added entry (because it hasn't been saved yet). It would also cause undefined side effects as both cmdlets would attempt to save _their_ copy of the hosts file.

I'm not sure the best way to resolve this problem (particularly since it's quite unlikely that someone would pipe the write operations together), but I thought it was worth documenting.

```PowerShell
Describe "Add-HostEntry" {
    Context "Piping into Set" {
        BeforeEach {
            Add-TestHostEntry -Name "hostname" -Loopback -HostsPath $hostsFile | `
                Set-TestHostEntry -Address "127.0.0.2" -HostsPath $hostsFile
        }

        It "Should update new entry" {
            $results = Get-TestHostEntry hostname -HostsPath $hostsFile

            $results.Length | Should be 1
        }
    }
}
```
Can we add a `-Backup` flag (or maybe it takes a path)? e.g. `hosts.bak` is created before write operations? This would act as a nice failsafe when anything goes wrong.
The hosts format actually uses:

127.0.0.1 host.local alias1.host.local alias2.host.local

- [ ] Add an Aliases property to HostEntry
- [ ] Add a third parameter (`-Aliases`) to Add-HostEntry that can either be a string or an array
- [ ] Have Get-HostEntry match against aliases
- [ ] Have Remove-HostEntry remove an alias when not matched against the primary

TODO: Should the entire entry still be removed when the primary host is removed, even though there are aliases remaining? I'm thinking yes...