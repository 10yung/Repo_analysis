When I try to remove the last element of a list, I expect rlist to return an empty list `list()`. However, it errors out. Is this by design?

`list("a" = c(1,2,3)) %>% rlist::list.remove("a")`
`Error in apply(m, 1L, any) : dim(X) must have a positive length`
Both your `rlist` and `pipeR` packages look ultra-interesting, but I am failing to understand exactly how different they are from other packages, namely `magrittr` and `purrr`.

I do not understand, for instance, how `pipeR::%>>%` differs from `magrittr:%>%`.

Similarly, I would appreciate a comparison of how list operations differs in `purrr` and `rlist`, as well as a discussion of how well both packages might work together, if they accomplish different things.

Last, and this is purely cosmetic, but how about making aliases with underscores in function names, e.g. `list_filter`, in order to have your package blend nicely with packages in which underscores are used to separate the package prefix from the verb (e.g. `stringr`)?

Thanks in advance for your time, and again, congratulations for writing up these interesting packages.
Please see example below, I tried list.map and list.first, I'm pretty sure it applies to most of the functions.

I'm wondering if this is an expected behavior.

Having a NULL as the first element of the List of List could happen when I am saving the interim filtered result. Applying list.clean before any operation I want to do seems to be a bit excessive.

Can you suggest a better way of handling my situation?

```
> t <- list(a = NULL, b = list(x=1,y=2),c=list(x=2,y=5,z=4))
> t1 <- list(b = list(x=1,y=2),c=list(x=2,y=5,z=4))
> t %>% list.map(y)
Error in eval(expr, envir, enclos) : object 'y' not found
> t1 %>% list.map(y)
$b
[1] 2

$c
[1] 5

> t %>% list.first()
NULL
> t1 %>% list.first()
$x
[1] 1

$y
[1] 2
```
Hello and thanks for providing this package.
I find myself constantly in the need of updating a list with another list, like [a=1, b=2] <-- [c=1, b=20] would add c=1 to the first list and update b to 20.
I do the following

```
function(old, new=list()){
        for(name in names(new)){
                if(name %in% names(old)){
                        #testing for identical here allows to NOT remove NULL element if we update with same NULL
                        #element
                        if( !identical(old[[name]], new[[name]]) ){
                                old[[name]] <- new[[name]]
                        }
                }else{
                        #this allows to ADD (not update) with list(myName=NULL), else it would remove the 
                        #element as list$something = NULL is same as delete
                        old <- c(old, new[name])
                }
        }
        return(old)
}
```

I'd like to use your package for similar functionality, but can't find it in the vignette. DO I missed it ? If not would you consider adding similar functionality ?

Quite often we have R5 objects instead of lists and we want to access a particular field of a list of objects. But this package doesn't seem compatible of doing it.

Here is an example:

```
x <- list(A = list(balance = 100), B = list(balance = 200))
list.map(x, balance)

track <- setRefClass("Account", fields = list(balance = "numeric"))
y <- list(A = track$new(balance = 100), B = track$new(balance = 200))
list.map(y, balance)
**Error in dots[[1L]][[1L]] : object of type 'closure' is not subsettable**
```

Hi @renkun-ken ,
Thank you for this very helpful package!
I was wondering if there is any plan to add mutating capabilities in `rlist`. For instance, shouldn't be possible to `list.update` in-place ? _e.g._: after doing this

```
yyy <- list(foo = list(a = 0, b = 1))
list.update(yyy, a = a + 10)
```

have the following as the result:
`print(yyy)`

``` Text
$foo
$foo$a
[1] 10

$foo$b
[1] 1
```

```
Sys.info()
                                                                                          sysname
                                                                                         "Darwin"
                                                                                          release
                                                                                         "14.5.0"
                                                                                          version
"Darwin Kernel Version 14.5.0: Tue Sep  1 21:23:09 PDT 2015; root:xnu-2782.50.1~1/RELEASE_X86_64"
                                                                                         nodename
                                                                                 "harryzhu.local"
                                                                                          machine
                                                                                         "x86_64"
                                                                                            login
                                                                                       "harryzhu"
                                                                                             user
                                                                                       "harryzhu"
                                                                                   effective_user
                                                                                       "harryzhu"
```

```
R --version
R version 3.2.2 (2015-08-14) -- "Fire Safety"
Copyright (C) 2015 The R Foundation for Statistical Computing
Platform: x86_64-apple-darwin14.5.0 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under the terms of the
GNU General Public License versions 2 or 3.
For more information about these matters see
http://www.gnu.org/licenses/.
```

```
uname -a
Darwin harryzhu.local 14.5.0 Darwin Kernel Version 14.5.0: Tue Sep  1 21:23:09 PDT 2015; root:xnu-2782.50.1~1/RELEASE_X86_64 x86_64
```

After I install rlist from github, I got the error like title puts. Need your help.

```
devtools::install_github("renkun-ken/rlist")
```

Hi,

I was experimenting on d3radar package and encountered the following transformation need. I'm wondering if rlist has a more efficient way of achieving the same?
The approach might have wider application as it's json like.

Thanks.

mtcars %>%
  add_rownames( var = "key" ) %>%
  mutate_each(funs(rescale), -key) %>%
  #limit to 8 rows for manageability
  head(8) %>%
  by_row(
    function(row){
      list(
        key = row[["key"]],
        values = lapply(
          names(row)[-match("key",names(row))],
          function(nm){
            list(
              "axis" = nm,
              "value" = row[[nm]]
            )
          }
        )
      )
    }
  )

http://www.buildingwidgets.com/blog/2015/12/9/week-49-d3radarr

Here is an enhancement. 

`aa <- list(A=c(1, 3, 4), B=c(3,5,7,7,8))`

results in a data.frame:

```
A B
1 3
3 5
4 7
NA 7
NA 8
```

https://github.com/jeroenooms/jsonlite/issues/112

The example provided by @timelyportfolio should be very helpful.
