When attempting to use, these were the fixes I made in order to get the app to run on macOS Sierra. I didn't test on windows or linux (I don't have either machine handy) but since I'm not changing any functionality I'm pretty sure both should still work.

Also, a really neat way to kick off the project:
```
`node -e "console.log(require('electron'))"` . 
```
I'm confused, is this an Electron UI for Neovim or a way to integrate Neovim into Atom? I mean, I know Atom uses Electron, but that is not the same thing...

Would be super nice if you could make `command` send `ctrl` key in OS X so it's easy to use command key as ctrl key (similar to the popular iTerm2 app for OS X).

So we can do

``` sh
npm install -g neovim-e # claim on npmjs.com before someone else!
nvim-e some-file-to-edit.js # or similar
```

Is it possible to change the line height?

I'm running on Windows with HEAD of electron and neovim-e

To reproduce:
Open neovim-e
press `<C-w><C-s>`
observe that neovim-e has crashed

the error message I get is this: `[13252:1009/122332:ERROR:ipc_channel_win.cc(435)] pipe error: 232` (Not very specific, sorry)

I confirmed that the js is sending command keyboard events to neovim but apparently neovim doesn't respond at all to them. What is going on inside of neovim?

Attempting to use `<c-w>` for window commands closes the Neovim-e window in Linux (similar to web browsers).

I took a look at `ui.coffee` and it seems like supporting ligatures would be within reach. Ligatures are great because modern programming fonts are beginning to include support for awesome symbols for functional languages etc.:

For example, see https://github.com/tonsky/FiraCode

It looks like the canvas drawText API that you're using supports ligatures but it merely requires that you draw the two/three characters in one call to `drawText`. I saw that `neovim-e` draws one character at a time, however.

Should there be some intermediate representation that `neovim-e` keeps track of instead of just executing raw single character draw/put commands? Could `neovim-e` maintain an up to date representation of the entire screen so that when anything changes, something like a "mini react" can find the characters that are likely dirty and draw only those lines (and the entire lines so that ligatures will render correctly)?

Have you noticed this?
When the popup menu refreshes while typing, it flickers subtly.
