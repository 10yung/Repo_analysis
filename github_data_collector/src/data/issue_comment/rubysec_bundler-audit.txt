This change converts the input `uri` to a string within the `internal_source?` method to avoid the `ArgumentError` issue from #235.
We are using Rails 5.2.4 and Ruby 2.5.x and your awesome gem as well. After some gem updates the `thor` gem version was updated to `0.20.3` and when I try to run a rake command like `bundle exec rake -T` got this error: `TypeError: NameErrorCheckers is not a module`

After a long investigation I realised that the `thor` gem caused this because they start to support `did_you_mean` library. The problem is that this support is old and in the mean time the `did_you_mean` library was changed from
https://github.com/ruby/did_you_mean/blob/v1.1.3/lib/did_you_mean/spell_checkers/name_error_checkers.rb (this is using Ruby 2.4)
to
https://github.com/ruby/did_you_mean/blob/v1.2.0/lib/did_you_mean/spell_checkers/name_error_checkers.rb (this is using Ruby 2.5)

The `thor` gem was updated so version `1.x` can solve the issue, but your gem does not let us to update this gem. The `thor` gem should stay on `0.20.0` because of that.

Could you update your `thor` support, please?
https://www.ruby-lang.org/en/news/2019/12/25/ruby-2-7-0-released/
Thor changelog:
https://github.com/erikhuda/thor/blob/master/CHANGELOG.md
Trying to use bundler-audit with Bundler 2.1.1 fails because
`Scanner#internal_source?` gets passed a `Bundler::URI::HTTP` instance.

```
uri/common.rb:745:in `URI': bad argument (expected URI object or URI string) (ArgumentError)
```

This patch uses `#to_s` on the passed object to work around that issue.
bundler-audit starts failing today at CI: 

```
$ cd /app && bundle exec bundle-audit update && bundle exec bundle-audit
Updating ruby-advisory-db ...
Cloning into '/home/app/.local/share/ruby-advisory-db'...
Updated ruby-advisory-db
ruby-advisory-db: 422 advisories
bundler: failed to load command: bundle-audit (/app/vendor/bundle/ruby/2.6.0/bin/bundle-audit)
ArgumentError: bad argument (expected URI object or URI string)
  /usr/local/lib/ruby/2.6.0/uri/common.rb:739:in `URI'
  /app/vendor/bundle/ruby/2.6.0/gems/bundler-audit-0.6.1/lib/bundler/audit/scanner.rb:170:in `internal_source?'
  /app/vendor/bundle/ruby/2.6.0/gems/bundler-audit-0.6.1/lib/bundler/audit/scanner.rb:113:in `block (2 levels) in scan_sources'
  /app/vendor/bundle/ruby/2.6.0/gems/bundler-audit-0.6.1/lib/bundler/audit/scanner.rb:112:in `each'
  /app/vendor/bundle/ruby/2.6.0/gems/bundler-audit-0.6.1/lib/bundler/audit/scanner.rb:112:in `block in scan_sources'
  /app/vendor/bundle/ruby/2.6.0/gems/bundler-audit-0.6.1/lib/bundler/audit/scanner.rb:102:in `map'
  /app/vendor/bundle/ruby/2.6.0/gems/bundler-audit-0.6.1/lib/bundler/audit/scanner.rb:102:in `scan_sources'
  /app/vendor/bundle/ruby/2.6.0/gems/bundler-audit-0.6.1/lib/bundler/audit/scanner.rb:74:in `scan'
  /app/vendor/bundle/ruby/2.6.0/gems/bundler-audit-0.6.1/lib/bundler/audit/cli.rb:44:in `check'
  /app/vendor/bundle/ruby/2.6.0/gems/thor-0.19.4/lib/thor/command.rb:27:in `run'
  /app/vendor/bundle/ruby/2.6.0/gems/thor-0.19.4/lib/thor/invocation.rb:126:in `invoke_command'
  /app/vendor/bundle/ruby/2.6.0/gems/thor-0.19.4/lib/thor.rb:369:in `dispatch'
  /app/vendor/bundle/ruby/2.6.0/gems/thor-0.19.4/lib/thor/base.rb:444:in `start'
  /app/vendor/bundle/ruby/2.6.0/gems/bundler-audit-0.6.1/bin/bundle-audit:10:in `<top (required)>'
  /app/vendor/bundle/ruby/2.6.0/bin/bundle-audit:23:in `load'
  /app/vendor/bundle/ruby/2.6.0/bin/bundle-audit:23:in `<top (required)>'
ERROR: Job failed: exit code 1
```
The gem found the [vulnerability](https://github.com/rubysec/ruby-advisory-db/blob/c668902e7da0caea64a536b0b1ead59eb537c4ea/gems/yard/GHSA-xfhh-rx56-rxcr.yml) and printed out the information
```
Updated ruby-advisory-db
ruby-advisory-db: 421 advisories
Name: yard
Version: 0.9.19
Advisory: Criticality: Unknown
URL: https://github.com/lsegal/yard/security/advisories/GHSA-xfhh-rx56-rxcr
Title: Possible arbitrary path traversal and file access via `yard server`
Solution: upgrade to >= 0.9.20

Vulnerabilities found!
```

It's really interesting because the vulnerability hasn't advisory (such a CVE-2019-*****). I opened the source code and saw that the gem allows to ignore vulnerabilities by CVE or OSVDB. But it doesn't contain any information about it. How to ignore the current vulnerability? ðŸ¤”
I updated the submodules. This should normally fix the specs.
Closes #201 

CI failures are not related to my PR.
Closes #158 