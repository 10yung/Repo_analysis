On Hamster's `Hamster.from` documentation, there's no mention that `Struct` will be converted to a hash, and indeed it is really strange:

```ruby
class SomeClass < Struct.new(:foo, :bar); end
obj = SomeClass.new(10, 20)
irb(main):014:0> Hamster.from({obj: obj})
# => Hamster::Hash[:obj => Hamster::Hash[:bar => 20, :foo => 10]]
```

The problem is that `SomeClass` is not a hash, it is a struct, so this will fail:

```ruby
a = {obj: SomeClass.new(10, 20)}
b = {obj: SomeClass.new(10, 20)}
Hamster.to_ruby(Hamster.from(a)) == b
# => false

# While these are true:
a == b
Hamster.to_ruby(Hamster.from(a)) == Hamster.to_ruby(Hamster.from(b))
```

The problem is that `Hamster.from` loses the struct information, so it's impossible to get back the original object, and the documentation doesn't mention anything.
Fixes #247.
I was working on a project, then I've found a case when `a == b` is true but `b == a` is false.

Minimum code that I could find the error:

```ruby
require 'hamster'
require 'bigdecimal'

a = Hamster.from({
  items: [{
    amount: 0.0,
    quantity: 1
  }]
})

b = Hamster.from({
  items: [{
    amount: BigDecimal('0.0'),
    quantity: 1
  }]
})

a == b
# => false
b == a
# => true
```
When using a `SortedSet`, there is a method called `uniq_by_comparator!`: https://github.com/hamstergem/hamster/blob/core/lib/hamster/sorted_set.rb#L88-L103

It assumes that items with the same sort position, `a <=> b == 0`, are actually the same object. That's not true. This causes `SortedSet`s with non-unique sort orders to not work correctly.

Imagine a comparator of `.size` where we are sorting on the length of some class. If the size is ever the same, they will be considered equal by Hamster.

For now, I'm working around this by adding `object_id` to my comparator, but that's definitely code smell:

```
      def <=>(other)
        [self.priority, self.object_id] <=> [other.priority, other.object_id]
      end
```

Hope this is an ok place to ask, didn't see anything sending me anywhere else in the README or FAQ...

Is there a reason `#difference` (aliased as `#-` for Ruby's `Array`) is not implemented for `Vector` and/or `List`? Recommended alternative / work around?

Just taking the lib for spin so I'm not yet familiar with the implementation details. Seems great so far though, thanks!

Also, FYI, the link to the `List` API docs is broken:

http://www.rubydoc.info/github/hamstergem/hamster/master/Hamster/List


This is a follow-up to #189. The [Ruby core issue](https://bugs.ruby-lang.org/issues/11451) that gave rise to that ticket has been patched since last August. It's probably still worth discussing whether any releases missing the patches should be supported.

In addition to reverting the [original patch](https://github.com/hamstergem/hamster/commit/44d979a4f6beb046a75074077b7ff9fd6f191153) for #189., this aims to remove unneeded `&block` parameters throughout.

My benchmark results on `bench/hash/each_bench.rb` are too variable to say anything too conclusive. Still, I modified the file with `b.warmup = 10; b.time = 60`, and here are my results. They, at least, point to this making a measurable difference:

```
On branch use-yield

Warming up --------------------------------------
          each small    44.652k i/100ms
         each medium   113.000  i/100ms
          each large     1.000  i/100ms
Calculating -------------------------------------
          each small    693.754k (± 4.2%) i/s -     41.482M
         each medium      1.095k (± 3.7%) i/s -     65.653k
          each large      1.211  (± 0.0%) i/s -     73.000 

Warming up --------------------------------------
          each small    75.119k i/100ms
         each medium   115.000  i/100ms
          each large     1.000  i/100ms
Calculating -------------------------------------
          each small      1.906M (± 6.4%) i/s -    113.505M
         each medium      1.106k (± 5.6%) i/s -     66.125k
          each large      1.247  (± 0.0%) i/s -     75.000 
```

```
Switched to branch 'core'

Warming up --------------------------------------
          each small    44.839k i/100ms
         each medium   120.000  i/100ms
          each large     1.000  i/100ms
Calculating -------------------------------------
          each small    972.978k (± 7.1%) i/s -     57.887M
         each medium      1.255k (± 5.7%) i/s -     75.000k
          each large      1.728  (± 0.0%) i/s -    104.000 

Warming up --------------------------------------
          each small    37.133k i/100ms
         each medium   120.000  i/100ms
          each large     1.000  i/100ms
Calculating -------------------------------------
          each small    579.215k (± 9.8%) i/s -     34.274M
         each medium      1.208k (± 6.0%) i/s -     72.120k
          each large      1.651  (± 0.0%) i/s -     99.000
```

It seems that using a [Rope data structure](https://en.wikipedia.org/wiki/Rope_%28data_structure%29) is efficient for string operations. Maybe holding string parts in a Hamster::Vector achieves the same tree-like idea?

Before starting any implementation, I started this issue as a place for discussion.

A new paper on HAMTs by Michael J. Steindorfer and Jurgen J. Vinju shows how to make HAMT implementations “lean”, meaning they consume less memory, and “efficient”, meaning speedier performance. The paper claims to make iteration and equality checks about 80 – 100% faster. 

See http://bendyworks.com/leveling-clojures-hash-maps/ which links the paper.

Design the HAMT using this paper.
