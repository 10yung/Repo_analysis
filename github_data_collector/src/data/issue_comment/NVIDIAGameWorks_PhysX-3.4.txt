From time to time i've got assertion failure in this line: 

https://github.com/NVIDIAGameWorks/PhysX-3.4/blob/5e42a5f112351a223c19c17bb331e6c55037b8eb/PhysX_3.4/Source/GeomUtils/src/pcm/GuPCMContactGenBoxConvex.cpp#L337


PhysX use "require" to name some variable, eg  "NpRigidDynamic::requires". This is a keyword for C ++ 2a concepts and will make C ++ 2a project fail to compile. Any advise to fix it? (If a patch provided, that's would be great.)
No matter Ue4 or PhysX Visual Debugger, I can't debug the heightfield hole. When they render static rigid body, they just ignore the 

/**
\brief Special material index values for height field samples.

@see PxHeightFieldSample.materialIndex0 PxHeightFieldSample.materialIndex1
*/
struct PxHeightFieldMaterial
{
	enum Enum
	{
		eHOLE = 127  //!< A material indicating that the triangle should be treated as a hole in the mesh.
	};
};

material. in PxHeightFieldSample.h
Hey,

I'm using 3DS Max 2009 and the PhysX Plugin for 3DS max v1.0.5.
I added Triangle collision to objects and everything works fine.
The only thing I have problems with is the Camera Collision Detection.
Its a third person game and if u are right next to a wall u can look trough it.
I read a documentation which said that I need to adjust the skin width in the gamebryo Process Script (Physx Extractor Plugin), but that doesnt helped.

The exportet file is a .nif

![Toolbar PhysX](https://user-images.githubusercontent.com/47224840/68505874-98b3dc80-0268-11ea-93ca-bb0efba8a657.png)

![PhysX Extractor](https://user-images.githubusercontent.com/47224840/68505908-ab2e1600-0268-11ea-837a-2738be33b858.png)
I'm using 3D Studio Max DCC plug-in for PhysX 3-4-2 and 3ds Max 2015

My using steps:
1. Create Dynamic Rig
2. select the left knee joint which is between the left thigh and the left calf.
3. set Constraint Limits as Hard Limits
4. Start simulation

I can see the thigh and the calf moves exceeding the Swing Y Limits.

I also exported PhysXScene to see the parameters
```
nvpx.PrepExportPhysXScene true "RepX"
nvpx.PrepExportPhysXProj true
nvpx.ExportPhysXProject "test" "exported" ""
```


The exported file shows the knee joint's Stiffness and Damping of SwingLimit are always 0.1 and 0.2, like this
```
<SwingLimit >
    <Restitution >0</Restitution>
    <BounceThreshold >0.5</BounceThreshold>
    <Stiffness >0.1</Stiffness>
    <Damping >0.2</Damping>
    <ContactDistance >0.0617253</ContactDistance>
    <YAngle >1.23451</YAngle>
    <ZAngle >1.17549e-038</ZAngle>
</SwingLimit>
```


After trying all parameters combination I found that there is no way to set a limited joint's contraint limits as hard limits, or say there is no way to change Stiffness and Damping of SwingLimit
Hi ,
I'm trying multi client, and  I find that PxControllerManager::createController adds actor into the scene without calling setOwnerClient

Is there any way to call setOwnerClient before controller adds actor into the scene?
Is APEX source code provided in this and PhysX-3.3 repositories full? I'm not seeing many parts such as particles, force fields, turbulence.

Could it be possible to see full APEX source code? Even though it's deprecated it has nice features that could be brought along.
I got a crash inside NpScene::fetchResults on Android.  The call stack is 

```
Operating system: Android
                  0.0.0 Linux 4.9.148 #1 SMP PREEMPT Wed Jun 26 04:38:26 CST 2019 armv8l
CPU: arm
     ARMv1 ARM part(0x4100d0b0) features: half,thumb,fastmult,vfpv2,edsp,neon,vfpv3,tls,vfpv4,idiva,idivt
     8 CPUs

GPU: UNKNOWN

Crash reason:  SIGSEGV /0x00000000
Crash address: 0x95880000
Process uptime: not available

Thread 29 (crashed)
 0  libclient.so!physx::Sq::AABBPruner::updateObjectsAndInflateBounds(unsigned int const*, unsigned int const*, physx::PxBounds3 const*, unsigned int) [PsUnixNeonInlineAoS.h : 524 + 0x0]
     r0 = 0x9587fff4    r1 = 0x00000001    r2 = 0xb9350eb0    r3 = 0x9587e800
     r4 = 0x00000001    r5 = 0xb1393474    r6 = 0xb1393464    r7 = 0xc728d700
     r8 = 0xb1393470    r9 = 0xb48ef700   r10 = 0xb9350ea8   r12 = 0x92906400
     fp = 0xb1393460    sp = 0xc728d690    lr = 0xc728d6c0    pc = 0xc4677c18
    Found by: given as instruction pointer in context
 1  libclient.so!physx::Sq::DynamicBoundsSync::sync(unsigned int const*, unsigned int const*, physx::PxBounds3 const*, unsigned int) [SqSceneQueryManager.cpp : 495 + 0x9]
     r4 = 0xc4677bb1    r5 = 0xc6dc4fd4    r6 = 0x00000002    r7 = 0xc452d9d1
     r8 = 0xc441f449    r9 = 0xc6dc4fd4   r10 = 0xb7c0a020    fp = 0xc728d77c
     sp = 0xc728d718    pc = 0xc452d9e3
    Found by: call frame info
 2  libclient.so!physx::Sc::SqBoundsManager::syncBounds(physx::Sc::SqBoundsSync&, physx::Sc::SqRefFinder&, physx::PxBounds3 const*, unsigned long long) [ScSqBoundsManager.cpp : 112 + 0x5]
     r4 = 0xbc6733c0    r5 = 0x00000000    r6 = 0xbf819648    r7 = 0xc452d9d1
     r8 = 0xc441f449    r9 = 0xc6dc4fd4   r10 = 0xb7c0a020    fp = 0xc728d77c
     sp = 0xc728d730    pc = 0xc455f745
    Found by: call frame info
 3  libclient.so!physx::Sc::Scene::syncSceneQueryBounds(physx::Sc::SqBoundsSync&, physx::Sc::SqRefFinder&) [ScScene.cpp : 3659 + 0x7]
     r4 = 0xc6dc3800    r5 = 0x00000000    r6 = 0xc6dc3820    r7 = 0xc441b871
     r8 = 0x00000000    r9 = 0x00000001   r10 = 0x0000000a    fp = 0xc81d3000
     sp = 0xc728d760    pc = 0xc454fb15
    Found by: call frame info
 4  libclient.so!physx::NpScene::fetchResultsPostContactCallbacks() [NpScene.cpp : 2273 + 0x5]
     r4 = 0xc6dc3800    r5 = 0xc6dc3820    r6 = 0xc6dc3820    r7 = 0xc441b871
     r8 = 0x00000000    r9 = 0x00000001   r10 = 0x0000000a    fp = 0xc81d3000
     sp = 0xc728d778    pc = 0xc441bb8d
    Found by: call frame info
 5  libclient.so!physx::NpScene::fetchResults(bool, unsigned int*) [NpScene.cpp : 2308 + 0x5]
     r4 = 0xc6dc3800    r5 = 0x00000000    r6 = 0xc6dc3820    r7 = 0xc441b871
     r8 = 0x00000000    r9 = 0x00000001   r10 = 0x0000000a    fp = 0xc81d3000
     sp = 0xc728d798    pc = 0xc441bd39
    Found by: call frame info
```

The Android SDK level is 28 and the OS is Android 9.0.
The last call (line 0) is in file PsUnixNeonInlineAoS.h but I can not find this file in PhysX 3.4 sources. It seems like a really rare kind of crash as I can not find anything useful from Internet.

<a href="https://ibb.co/gPmQpst"><img src="https://i.ibb.co/61rGx6D/physx.png" alt="physx" border="0"></a>

```
		auto rigidBody = m_pPxActor->is<physx::PxRigidDynamic>();
		rigidBody->setGlobalPose(m_Transform);
		m_Scene->addActor(*m_pPxActor);
		rigidBody->setGlobalPose(m_Transform);

		auto transform2 = rigidBody->getGlobalPose();

		if(fabs(transform2.p.y) > 10.0f)
			transform2 = transform2;
```

How is that possible that transformation after a set is so strange different?
Hi, I just added PhysX to my game and trying to resolve collisions, unfortunately, I have a crash on the contact of 2 dynamic objects here:
`	struct PxCollisionBitMap
	{
		PX_INLINE PxCollisionBitMap() : enable(true) {}

>>		bool operator()() const { return enable; }
		bool& operator= (const bool &v) { enable = v; return enable; } 

		private:
		bool enable;
	};
`

Callstack:
>	Totem3IACW2_Battle.exe!`anonymous namespace'::PxCollisionBitMap::operator()() Line 52	C++
 	Totem3IACW2_Battle.exe!physx::PxDefaultSimulationFilterShader(unsigned int attributes0, physx::PxFilterData filterData0, unsigned int attributes1, physx::PxFilterData filterData1, physx::PxFlags<enum physx::PxPairFlag::Enum,unsigned short> & pairFlags, const void * constantBlock, unsigned int constantBlockSize) Line 284	C++
 	PhysX3DEBUG_x86.dll!physx::Sc::NPhaseCore::runFilterShader(const physx::Sc::ElementSim & e0, const physx::Sc::ElementSim & e1, unsigned int & attr0, physx::PxFilterData & filterData0, unsigned int & attr1, physx::PxFilterData & filterData1, physx::PxFilterInfo & filterInfo) Line 1166	C++
 	PhysX3DEBUG_x86.dll!physx::Sc::NPhaseCore::runFilter(const physx::Sc::ElementSim & e0, const physx::Sc::ElementSim & e1, unsigned int filterPairIndex, bool doCallbacks) Line 1200	C++
 	PhysX3DEBUG_x86.dll!physx::Sc::NPhaseCore::filterRbCollisionPairSecondStage(const physx::Sc::ShapeSim & s0, const physx::Sc::ShapeSim & s1, const physx::Sc::BodySim * b0, const physx::Sc::BodySim * b1, unsigned int filterPairIndex, bool runCallbacks) Line 1271	C++
 	PhysX3DEBUG_x86.dll!physx::Sc::NPhaseCore::filterRbCollisionPair(const physx::Sc::ShapeSim & s0, const physx::Sc::ShapeSim & s1, unsigned int filterPairIndex, unsigned int & isTriggerPair, bool runCallbacks) Line 1362	C++
 	PhysX3DEBUG_x86.dll!physx::Sc::NPhaseCore::onOverlapFilter(physx::Sc::ElementSim * volume0, physx::Sc::ElementSim * volume1) Line 204	C++
 	PhysX3DEBUG_x86.dll!OverlapFilterTask::runInternal() Line 6344	C++
 	PhysX3DEBUG_x86.dll!physx::Cm::Task::run() Line 67	C++

Can you direct me what can I check to resolve this? It just looks like here:

`	// Collision Group
	if (!gCollisionTable[filterData0.word0][filterData1.word0]())
	{
		return PxFilterFlag::eSUPPRESS;
	}
`
word0 == 65537