Addresses #1177. The idea is to enable Danger to be run from a subdirectory within a git repository without it complaining that the current path is not a git repository. Instead, it should do an educated guess about what we intended to do, and look up the top level git directory (by calling git).

To ensure backward compatibility, we only do this lookup in the special case that is currently causing Danger to fail (when doing the initial diff on `.`), but the functionality is exposed in `GitRepo` so is in principle reusable.

The two added tests serve to illustrate the new behaviour.
I'd basically like to re-open #219, for the following reason. We are trying to set up a build in a mono repo, where each project might have its own Dangerfile, or even no Dangerfile at all. We'd like each Dangerfile to be able to assume that it is in the root of the project, so in the following diagram, we want to run `danger` from `./project1`, rather than from `.`.
```
.
â”œâ”€â”€ .git
â”œâ”€â”€ project1
â”‚     â”œâ”€â”€ Dangerfile
â”‚     â”†
â”‚     â””â”€â”€ ...
â””â”€â”€ project2
      â”œâ”€â”€ Dangerfile
      â”†
      â””â”€â”€ ...
```

**Current behaviour**
Running `danger` in a subdirectory of a git repository results in an error like the following:
```
/path/to/repo/project1/.git: path does not exist (ArgumentError)
```

**Desired behaviour**
Running `danger` in a subdirectory of a git repository just looks up the root of the git repository itself.

**Suggested fix**
It seems that the fix suggested in #219 actually does work: changing
```diff
     def diff_for_folder(folder, from: "master", to: "HEAD")
       self.folder = folder
-      repo = Git.open self.folder
+      repo = Git.open exec("rev-parse --show-toplevel")

       ensure_commitish_exists!(from)
       ensure_commitish_exists!(to)

       merge_base = find_merge_base(repo, from, to)
       commits_in_branch_count = commits_in_branch_count(from, to)

-      self.diff = repo.diff(merge_base, to)
+      self.diff = repo.diff(merge_base, to).path(folder)
       self.log = repo.log(commits_in_branch_count).between(from, to)
     end
```
in `/lib/danger/scm_source/git_repo.rb` seems to do the trick.
# Report

## What did you do?

```
bundle exec danger local --verbose
```

## What did you expect to happen?

Just want it to work with no exceptions ðŸ’”

## What happened instead?

```
ca1-p1r12-bld002:MyWorkspace_MyRepo_PR-4006 jenkins$ bundle exec danger local --verbose
NOTE: Inheriting Faraday::Error::ClientError is deprecated; use Faraday::ClientError instead. It will be removed in or after version 1.0
Faraday::Error::ClientError.inherited called from /Users/jenkins/hop/MyRepo/gem/ruby/2.5.0/gems/octokit-4.14.0/lib/octokit/middleware/follow_redirects.rb:14.
Running your Dangerfile against this PR - https://github.svc.internal.zone/MyWorkspace/MyRepo/pull/4000

bundler: failed to load command: danger (/Users/jenkins/hop/MyRepo/gem/ruby/2.5.0/bin/danger)
Faraday::SSLError: SSL_connect returned=1 errno=0 state=error: certificate verify failed (self signed certificate in certificate chain)
  /Users/jenkins/.rbenv/versions/2.5.3/lib/ruby/2.5.0/net/protocol.rb:44:in `connect_nonblock'
  /Users/jenkins/.rbenv/versions/2.5.3/lib/ruby/2.5.0/net/protocol.rb:44:in `ssl_socket_connect'
  /Users/jenkins/.rbenv/versions/2.5.3/lib/ruby/2.5.0/net/http.rb:981:in `connect'
  /Users/jenkins/.rbenv/versions/2.5.3/lib/ruby/2.5.0/net/http.rb:920:in `do_start'
  /Users/jenkins/.rbenv/versions/2.5.3/lib/ruby/2.5.0/net/http.rb:909:in `start'
  /Users/jenkins/.rbenv/versions/2.5.3/lib/ruby/2.5.0/net/http.rb:1455:in `request'
  /Users/jenkins/.rbenv/versions/2.5.3/lib/ruby/2.5.0/net/http.rb:1213:in `get'
  /Users/jenkins/hop/MyRepo/gem/ruby/2.5.0/gems/faraday-0.17.1/lib/faraday/adapter/net_http.rb:85:in `perform_request'
  /Users/jenkins/hop/MyRepo/gem/ruby/2.5.0/gems/faraday-0.17.1/lib/faraday/adapter/net_http.rb:43:in `block in call'
  /Users/jenkins/hop/MyRepo/gem/ruby/2.5.0/gems/faraday-0.17.1/lib/faraday/adapter/net_http.rb:92:in `with_net_http_connection'
  /Users/jenkins/hop/MyRepo/gem/ruby/2.5.0/gems/faraday-0.17.1/lib/faraday/adapter/net_http.rb:38:in `call'
  /Users/jenkins/hop/MyRepo/gem/ruby/2.5.0/gems/faraday-0.17.1/lib/faraday/response.rb:8:in `call'
  /Users/jenkins/hop/MyRepo/gem/ruby/2.5.0/gems/faraday-http-cache-2.0.0/lib/faraday/http_cache.rb:290:in `fetch'
  /Users/jenkins/hop/MyRepo/gem/ruby/2.5.0/gems/faraday-http-cache-2.0.0/lib/faraday/http_cache.rb:195:in `process'
  /Users/jenkins/hop/MyRepo/gem/ruby/2.5.0/gems/faraday-http-cache-2.0.0/lib/faraday/http_cache.rb:142:in `call!'
  /Users/jenkins/hop/MyRepo/gem/ruby/2.5.0/gems/faraday-http-cache-2.0.0/lib/faraday/http_cache.rb:115:in `call'
  /Users/jenkins/hop/MyRepo/gem/ruby/2.5.0/gems/faraday-0.17.1/lib/faraday/rack_builder.rb:143:in `build_response'
  /Users/jenkins/hop/MyRepo/gem/ruby/2.5.0/gems/faraday-0.17.1/lib/faraday/connection.rb:387:in `run_request'
  /Users/jenkins/hop/MyRepo/gem/ruby/2.5.0/gems/faraday-0.17.1/lib/faraday/connection.rb:138:in `get'
  /Users/jenkins/hop/MyRepo/gem/ruby/2.5.0/gems/sawyer-0.8.2/lib/sawyer/agent.rb:94:in `call'
  /Users/jenkins/hop/MyRepo/gem/ruby/2.5.0/gems/octokit-4.14.0/lib/octokit/connection.rb:156:in `request'
  /Users/jenkins/hop/MyRepo/gem/ruby/2.5.0/gems/octokit-4.14.0/lib/octokit/connection.rb:19:in `get'
  /Users/jenkins/hop/MyRepo/gem/ruby/2.5.0/gems/octokit-4.14.0/lib/octokit/client/pull_requests.rb:33:in `pull_request'
  /Users/jenkins/hop/MyRepo/gem/ruby/2.5.0/gems/danger-6.1.0/lib/danger/request_sources/github/github.rb:117:in `fetch_details'
  /Users/jenkins/hop/MyRepo/gem/ruby/2.5.0/gems/danger-6.1.0/lib/danger/commands/local_helpers/local_setup.rb:37:in `setup'
  /Users/jenkins/hop/MyRepo/gem/ruby/2.5.0/gems/danger-6.1.0/lib/danger/commands/local.rb:55:in `run'
  /Users/jenkins/hop/MyRepo/gem/ruby/2.5.0/gems/claide-1.0.3/lib/claide/command.rb:334:in `run'
  /Users/jenkins/hop/MyRepo/gem/ruby/2.5.0/gems/danger-6.1.0/bin/danger:5:in `<top (required)>'
  /Users/jenkins/hop/MyRepo/gem/ruby/2.5.0/bin/danger:23:in `load'
  /Users/jenkins/hop/MyRepo/gem/ruby/2.5.0/bin/danger:23:in `<top (required)>'
```

## Your Environment

* Which CI are you running on? 

Jenkins.

* Are you running the latest version of Danger?

Yes.

```
$ bundle exec danger --version
NOTE: Inheriting Faraday::Error::ClientError is deprecated; use Faraday::ClientError instead. It will be removed in or after version 1.0
Faraday::Error::ClientError.inherited called from /Users/jenkins/hop/cupertino/gem/ruby/2.5.0/gems/octokit-4.14.0/lib/octokit/middleware/follow_redirects.rb:14.
6.1.0
```

* What is your Dangerfile?

I don't think this matter and I revert it back to the orignal default danger file generated by `danger init`:

  ```ruby
# Sometimes it's a README fix, or something like that - which isn't relevant for
# including in a project's CHANGELOG for example
declared_trivial = github.pr_title.include? "#trivial"

# Make it more obvious that a PR is a work in progress and shouldn't be merged yet
warn("PR is classed as Work in Progress") if github.pr_title.include? "[WIP]"

# Warn when there is a big PR
warn("Big PR") if git.lines_of_code > 500

# Don't let testing shortcuts get into master by accident
fail("fdescribe left in tests") if `grep -r fdescribe specs/ `.length > 1
fail("fit left in tests") if `grep -r fit specs/ `.length > 1
  ```

# Report
I'm using danger on our AppCenter CI for iOS builds, with the simple setup described in the website (pretty much providing `DANGER_GITHUB_API_TOKEN` and running `bundle exec danger`)

Everything was always working fine, but after updating danger to the latest version (6.1.0), the danger command during build started to give an error. 

Just in case, I reverted back to the previous version published on rubygems (6.0.9) and everything started to work fine again.

## What did you do?
Run danger on AppCenter CI: `bundle exec danger`

## What did you expect to happen?
For build to work properly like it was on version 6.0.9

## What happened instead?
Here's the failing log:
```
bundler: failed to load command: danger (/usr/local/lib/ruby/gems/2.6.0/bin/danger)
RuntimeError: Credentials not available. Provide DANGER_BITBUCKETCLOUD_USERNAME and DANGER_BITBUCKETCLOUD_PASSWORD as environment variables.
  /usr/local/lib/ruby/gems/2.6.0/gems/danger-6.1.0/lib/danger/request_sources/bitbucket_cloud_api.rb:99:in `fetch_json'
  /usr/local/lib/ruby/gems/2.6.0/gems/danger-6.1.0/lib/danger/request_sources/bitbucket_cloud_api.rb:78:in `fetch_pr_from_branch'
  /usr/local/lib/ruby/gems/2.6.0/gems/danger-6.1.0/lib/danger/request_sources/bitbucket_cloud_api.rb:15:in `initialize'
  /usr/local/lib/ruby/gems/2.6.0/gems/danger-6.1.0/lib/danger/request_sources/bitbucket_cloud.rb:27:in `new'
  /usr/local/lib/ruby/gems/2.6.0/gems/danger-6.1.0/lib/danger/request_sources/bitbucket_cloud.rb:27:in `initialize'
  /usr/local/lib/ruby/gems/2.6.0/gems/danger-6.1.0/lib/danger/danger_core/environment_manager.rb:37:in `new'
  /usr/local/lib/ruby/gems/2.6.0/gems/danger-6.1.0/lib/danger/danger_core/environment_manager.rb:37:in `block in initialize'
  /usr/local/Cellar/ruby/2.6.5/lib/ruby/2.6.0/set.rb:338:in `each_key'
  /usr/local/Cellar/ruby/2.6.5/lib/ruby/2.6.0/set.rb:338:in `each'
  /usr/local/lib/ruby/gems/2.6.0/gems/danger-6.1.0/lib/danger/danger_core/environment_manager.rb:34:in `initialize'
  /usr/local/lib/ruby/gems/2.6.0/gems/danger-6.1.0/lib/danger/danger_core/executor.rb:25:in `new'
  /usr/local/lib/ruby/gems/2.6.0/gems/danger-6.1.0/lib/danger/danger_core/executor.rb:25:in `run'
  /usr/local/lib/ruby/gems/2.6.0/gems/danger-6.1.0/lib/danger/commands/runner.rb:72:in `run'
  /usr/local/lib/ruby/gems/2.6.0/gems/claide-1.0.3/lib/claide/command.rb:334:in `run'
  /usr/local/lib/ruby/gems/2.6.0/gems/danger-6.1.0/bin/danger:5:in `<top (required)>'
  /usr/local/lib/ruby/gems/2.6.0/bin/danger:23:in `load'
  /usr/local/lib/ruby/gems/2.6.0/bin/danger:23:in `<top (required)>'
```

As you can see, for some reason it thinks that I'm using bitbucket cloud without credentials, although we are actually using GitHub. All env var are properly set, as everything is working fine with version 6.0.9. 
Below I'll post a complete list of env vars set by us and app-center itself when running the build, if it helps in debugging.


## Your Environment
<details><summary>App Center Env Vars</summary>
<p>

```
SYSTEM_TEAMFOUNDATIONCOLLECTIONURI
BUILD_SOURCEBRANCH
SYSTEM_TASKDEFINITIONSURI
AGENT_VERSION
SYSTEM_JOBATTEMPT
DANGER_GITHUB_API_TOKEN
BUILD_QUEUEDBY
SYSTEM_HOSTTYPE
SYSTEM_COLLECTIONURI
BUILD_REPOSITORY_GIT_SUBMODULECHECKOUT
SYSTEM_JOBPARALLELISMTAG
ANDROID_HOME
NVM_CD_FLAGS
MD_APPLE_SDK_ROOT
SHELL
MOBILECENTER_SOURCE_DIRECTORY
APPLE_CERTIFICATE_KEYCHAIN
BUILD_STAGINGDIRECTORY
AGENT_MACHINENAME
TMPDIR
PR_CHECK_ID
COMMON_TESTRESULTSDIRECTORY
APPCENTER_BRANCH
SYSTEM_WORKFOLDER
AGENT_JOBNAME
APPCENTER_XCODE_PROJECT
MSDEPLOY_HTTP_USER_AGENT
FASTLANE_PASSWORD
XCODE_9_DEVELOPER_DIR
RCT_NO_LAUNCH_PACKAGER
JAVA_HOME_8_X64
MOBILECENTER_XCODE_PROJECT
AGENT_OSARCHITECTURE
MATCH_PASSWORD
BUILD_REQUESTEDFOREMAIL
SONOMA_API_SERVER
NUNIT_BASE_PATH
RUNNER_PERFLOG
AGENT_ACCEPTTEEEULA
MOBILEPROVISION
SYSTEM_STAGEATTEMPT
LC_ALL
NUNIT3_PATH
GIT_TERMINAL_PROMPT
SYSTEM_DEFINITIONNAME
SYSTEM_CULTURE
INPUT_ARGS
FASTLANE_TEAM_ID
JAVA_HOME_11_X64
AGENT_TEMPDIRECTORY
BUILD_REPOSITORY_PROVIDER
BUILD_SOURCEBRANCHNAME
MOBILEPROVISIONSECUREFILEID
BUILD_REPOSITORY_CLEAN
NVM_DIR
USER
SYSTEM_JOBIDENTIFIER
USER-DEFINED_AWS_REGION
XCODE_10_DEVELOPER_DIR
SYSTEM_TEAMFOUNDATIONSERVERURI
TF_BUILD
SYSTEM_TASKDISPLAYNAME
BUILD_QUEUEDBYID
AZURE_HTTP_USER_AGENT
SYSTEM_STAGENAME
SONOMA_API_VERSION
APPLE_CERTIFICATE_SIGNING_IDENTITY
APPCENTER_API_TOKEN
APPCENTER_OUTPUT_DIRECTORY
APPCENTER_XCODE_SCHEME
AGENT_DISABLELOGPLUGIN_TESTRESULTLOGPLUGIN
SSH_AUTH_SOCK
APPEXTENSIONPROVISIONSECUREFILES
SYSTEM_TEAMPROJECTID
VSTS_PROCESS_LOOKUP_ID
AGENT_ROOTDIRECTORY
BUILDSCRIPTS_TOOLSET
HOMEBREW_NO_AUTO_UPDATE
__CF_USER_TEXT_ENCODING
MOBILECENTER_BUILD_ID
SYSTEM_TEAMPROJECT
AGENT_HOMEDIRECTORY
AGENT_TOOLSDIRECTORY
BUILD_REPOSITORY_ID
BUILD_REPOSITORY_LOCALPATH
SYSTEM_JOBDISPLAYNAME
BUILD_REASON
AGENT_BUILDDIRECTORY
SYSTEM_PIPELINESTARTTIME
SYSTEM
BUILD_SOURCESDIRECTORY
SDK
AGENT_OS
PATH
SYSTEM_PHASEATTEMPT
MOBILECENTER_OUTPUT_DIRECTORY
SYSTEM_ISSCHEDULED
SYSTEM_DEBUG
MOBILECENTER_XCODE_SCHEME
MOBILEPROVISIONFILENAME
MOBILECENTER_BRANCH
PERFLOG_LOCATION_SETTING=RUNNER_PERFLOG
BUILD_BUILDURI
SYSTEM_PULLREQUEST_ISFORK
DOTNET_ROOT
PWD
CONDA
SYSTEM_DEFINITIONID
JAVA_HOME
AGENT_DISABLELOGPLUGIN_TESTFILEPUBLISHERPLUGIN
SYSTEM_STAGEID
AWS_SECRET_ACCESS_KEY
JAVA_HOME_12_X64
JAVA_HOME_7_X64
LASTCOMMITMESSAGE
MOBILECENTER_TRIGGER
USER-DEFINED_FASTLANE_TEAM_ID
LANG
APPCENTER_BUILD_ID
SYSTEM_TASKINSTANCENAME
APPLE_PROV_PROFILE_UUID

SYSTEM_PHASEDISPLAYNAME
AWS_REGION
SECRET_P12PASSWORD
BUILD_REPOSITORY_NAME
SYSTEM_SERVERTYPE
XPC_FLAGS
PIPELINE_WORKSPACE
BUILD_REPOSITORY_URI
TESTSDK
AGENT_WORKFOLDER
BUILD_DEFINITIONNAME
SYSTEM_JOBNAME
BUILD_REQUESTEDFOR
XPC_SERVICE_NAME
SYSTEM_TIMELINEID
SYSTEM_ARTIFACTSDIRECTORY
AWS_ACCESS_KEY_ID
AGENT_ID
SHLVL
HOME
VSMOBILECENTERUPLOAD_CONTINUEIFSYMBOLSNOTFOUND
AGENT_RETAINDEFAULTENCODING
APPCENTER_TRIGGER
SYSTEM_JOBPOSITIONINPHASE
BUILD_ARTIFACTSTAGINGDIRECTORY
BUILD_BINARIESDIRECTORY
BUILD_REQUESTEDFORID
BUILD_BUILDID
SYSTEM_TASKINSTANCEID
P12SECUREFILEID
SONOMA_TAGS
LOGNAME
BUILD_SOURCEVERSION
LC_CTYPE
JAVA_HOME_13_X64
PKG_CONFIG_PATH
SYSTEM_DEFAULTWORKINGDIRECTORY
SYSTEM_JOBID
ANDROID_NDK_HOME
SYSTEM_TOTALJOBSINPHASE
SYSTEM_STAGEDISPLAYNAME
AGENT_NAME
XCODE_11_DEVELOPER_DIR
SYSTEM_PLANID
BUILD_DEFINITIONVERSION
SYSTEM_PHASEID
TASK_DISPLAYNAME
SYSTEM_COLLECTIONID
AGENT_JOBSTATUS
ENDPOINT_URL_SYSTEMVSSCONNECTION
APPCENTER_SOURCE_DIRECTORY
BUILD_BUILDNUMBER
SYSTEM_PHASENAME
BUILD_CONTAINERID
GH_TOKEN
```

</p>
</details>

Hi there,

This PR adds support for Bamboo CI to Danger. 
Currently, it is only integrated with Bitbucket Server, as this is what I could test it against.
# Report
Using latest Danger in BitRise with on-prem BitBucket Server.  This never passes, always fails with below trace.  I have set DANGER_BITBUCKETSERVER_HOST, DANGER_BITBUCKETSERVER_USERNAME, and DANGER_BITBUCKETSERVER_PASSWORD in the BitRise secrets for the workflow. Verified proper workflow. Verified script step has access to the secrets, dump shows REDACTED.  Same secrets used elsewhere as well.  This PoC is NOT using fastlane wrappers yet, plan to add that after this works.  Git clone step works properly on same repo as Danger is pointed to of course.  How can I debug more?

Note if I run this from local desktop, I see debug output and everything working, but no comment actual added to the PR

## What did you do?
In a script step I executed this in bash
bundle exec danger --verbose --dangerfile=fastlane/Dangerfile

I added this in the Bash script as well for S&Gs, no luck
export DANGER_BITBUCKETSERVER_HOST="my host"
export DANGER_BITBUCKETSERVER_PASSWORD="mypass"
export DANGER_BITBUCKETSERVER_USERNAME= "myuser"

I also added a cURL call in the Bash script just before the Danger call that queries for the PR JSON and it works fine.  Seems like the environment vars are not available to the Danger scripts, not sure if this is a bitrise thing, other scripts I have work fine, or a Danger thing. 

## What did you expect to happen?
Expecting simple hello world to work.

## What happened instead? fails here, code indicates branch is not retrieved. But no log data even with --verbose set
...
Fetching danger 6.1.0
Installing danger 6.1.0
...

```
+ bundle exec danger --verbose --dangerfile=fastlane/Dangerfile
bundler: failed to load command: danger (/Users/vagrant/.rbenv/versions/2.6.3/bin/danger)
NoMethodError: undefined method `[]' for nil:NilClass
  /Users/vagrant/.rbenv/versions/2.6.3/lib/ruby/gems/2.6.0/gems/danger-6.1.0/lib/danger/request_sources/bitbucket_server.rb:50:in `setup_danger_branches'
  /Users/vagrant/.rbenv/versions/2.6.3/lib/ruby/gems/2.6.0/gems/danger-6.1.0/lib/danger/danger_core/environment_manager.rb:58:in `ensure_danger_branches_are_setup'
  /Users/vagrant/.rbenv/versions/2.6.3/lib/ruby/gems/2.6.0/gems/danger-6.1.0/lib/danger/danger_core/dangerfile.rb:259:in `setup_for_running'
  /Users/vagrant/.rbenv/versions/2.6.3/lib/ruby/gems/2.6.0/gems/danger-6.1.0/lib/danger/danger_core/dangerfile.rb:270:in `run'
  /Users/vagrant/.rbenv/versions/2.6.3/lib/ruby/gems/2.6.0/gems/danger-6.1.0/lib/danger/danger_core/executor.rb:29:in `run'
  /Users/vagrant/.rbenv/versions/2.6.3/lib/ruby/gems/2.6.0/gems/danger-6.1.0/lib/danger/commands/runner.rb:72:in `run'
  /Users/vagrant/.rbenv/versions/2.6.3/lib/ruby/gems/2.6.0/gems/claide-1.0.3/lib/claide/command.rb:334:in `run'
  /Users/vagrant/.rbenv/versions/2.6.3/lib/ruby/gems/2.6.0/gems/danger-6.1.0/bin/danger:5:in `<top (required)>'
  /Users/vagrant/.rbenv/versions/2.6.3/bin/danger:23:in `load'
  /Users/vagrant/.rbenv/versions/2.6.3/bin/danger:23:in `<top (required)>'
==> Script finished with exit code: 1

```
## Your Environment

* Which CI are you running on?   BitRise
* Are you running the latest version of Danger? Yes, 6.1.0
* What is your Dangerfile?
  ```ruby
  message("Hello, this worked!!!!")

  ```

# Report

## What did you do?

Tried to use Dangerfile with configuration: 
```ruby
danger.import_dangerfile(gitlab: "mobile/ci", branch: "develop", path: "ios/Dangerfile")
```

## What did you expect to happen?

To get running with danger imported from gitlab repo. Or at least show any error on fail.

## What happened instead?

CI ran danger without any messages
```
$ bundle exec danger



Job succeeded
```
And didn't post anything to MR.
There is a message on start inside remote Dangerfile. No message were there.

## Your Environment

* Which CI are you running on?
Gitlab CI
* Are you running the latest version of Danger?
Yes
* What is your Dangerfile?

```ruby
danger.import_dangerfile(gitlab: "mobile/ci", branch: "develop", path: "ios/Dangerfile")
```

Gitlab seems to not work with import_dangerfile

As in https://gitlab.com/gitlab-org/gitlab-foss/issues/55081 said - this was unintentional feature to use private token inside query params. 

Now they require to use an api method https://docs.gitlab.com/ee/api/repository_files.html#get-raw-file-from-repository

There are no proper messages on failed import. Had to run more than 10+ times to test this behaviour.

Finally this works on [my fork](https://github.com/AgapovOne/danger) with 2 changes:
- [added header](https://github.com/AgapovOne/danger/commit/94f4447d27408e4e798ff15e04d6abcd5b149d5d)
- [changed gitlab api url](https://github.com/AgapovOne/danger/commit/68ecb3582c09e286727abfa67fe45582dbae7a02)

This works with Dangerfile:
```ruby
danger.import_dangerfile(gitlab: 4020, branch: "develop", path: "ios%2FDangerfile")
```

I can use project_id or slug. But path has to be url encoded. Otherwise it doesn't work.

I'm interested if someone have the same issues on gitlab ci with mr's.

Latest issue with gitlab I found was on #1132 - May 21. So I suppose it worked back then.

Now I'm using danger gem from my git.

apparently, it's not possible to import `Dangerfile` from plain http url:

- https://danger.systems/reference.html
- https://danger.systems/guides/faq.html#i-want-to-run-danger-across-multiple-repos

even looked source code and `file:` only loads local files, not urls:
- https://github.com/danger/danger/blob/v6.1.0/lib/danger/danger_core/plugins/dangerfile_danger_plugin.rb

the actual problem i'm having that danger is unable to import `Dockerfile` from private gitlab instance. Found similar issues for github and seems these are not resolved either:
- https://github.com/danger/danger/issues/819
- https://github.com/danger/danger/issues/770
Danger has good codebase to talk to pull-request/merge-request. However I have a great idea to add more "messages" from other CI jobs via danger library:

Status message of some (custom) deployment, Perhaps something like:
```
$ superapp-cli deploy > deployment.log
$ danger report --warn "Tests were not updated" --sticky=false < deployment.log
```
# Report

## What did you do?

1. Create a MR on Gitlab containing 1 commit
2. push another commit to the MR
3. squash both commits localy and push -f to the MR. MR now only contains 1 commit
4. git.commits contains now at least the last 2 commits (maybe even 3)

This occures because i have 
```
# Ensure a clean commits history
if git.commits.any? { |c| c.message =~ /^Merge branch/ }
  fail('Please rebase to get rid of the merge commits in this PR')
end
```

in my Dangerfile. The warning appears on the MR when the commits were squashed.

## What did you expect to happen?

Only load the commits which are currently in the MR

## What happened instead?

Commits out of the MR are contained in git.commits

## Your Environment

- GitLab (selfhosted)
- Jenkins (selfhosted)
- latest verison

Dangerfile example above

## Annotations

Maybe this issue is connected to #838 