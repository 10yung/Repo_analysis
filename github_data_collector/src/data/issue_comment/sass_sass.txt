When I switch from using @import to @use and not change anything else, my styling breaks. Webpack doesn't complain or anything but the app just has no styling
- [ ] [Proposal](https://github.com/sass/sass/pull/2812)
- [ ] Specs
- [x] ~Documentation~ *(Too small to warrant explicit documentation)*
- [ ] [Dart Sass](https://github.com/sass/dart-sass/issues/934)
- [ ] [LibSass](https://github.com/sass/libsass/issues/2807)

---

Although typically partial URLs are written in `@use` rules without the leading underscore, it's possible to write them with the underscore. Currently, the spec and Dart Sass both treat the underscore as part of the `@use` rule's default namespace, so `@use "_example"` has the default namespace `_example` rather than `example`. This is a bug in the spec; the default namespace should be the same regardless of whether the URL has an underscore or not.

Unfortunately since this is a backwards-incompatible change, it won't be able to go through the fast track process and will require a full proposal.
I wonder if it would make sense to somehow allow using @use to import only the imported module's members (variables, mixins, functions) but not the imported module's styles.

Here is my use case:

Supposing this is my master Sass file...

```scss
@use "components/_alert.scss";
@use "components/_button.scss";
```

...and this is _alert.scss...

```scss
@use "button";

.alert {
  background-color: button.$bg-color;
}
```

...and this is _button.scss...

```scss
$bg-color: blue;

.button {
  background-color: $bg-color;
}
```

.. the CSS compiled from the master Sass file would be:

```css
.button {
  background-color: blue;
}

.alert {
  background-color: blue;
}
```

Note that the compiled CSS for `.button` appears before that of `.alert`, despite the order of the `@use` statements in the master Sass file. As the documentation states, "Any styles loaded [using `@use`] will be included exactly once in the compiled CSS output, no matter how many times those styles are loaded," so this behavior is not unexpected. However, I do think it would be valuable to allow for using `@use` to import only members because this would give Sass authors some flexibility to use different organizational/architectural approaches.

Perhaps the syntax could be consistent with the syntax for controlling visibility with `@forward`, e.g.:

`@use "button" hide "styles";`

and

`@use "button" show "mixins", "functions", $bg-color;`

and

`@use "button" show "variables";`

where all of the above would result in styles not being imported but the `$bg-color` variable being imported (the strings are just example keywords that might make it easier to include/exclude members by type rather than having to do so individually).

I think it's useful to draw a comparison with JS modules here. Conceptually, importing a Sass file using `@use` seems to be similar to importing a JS module that has a side effect, in this case the side effect being that the styles are outputted. Basically I think it'd be useful to be able to opt out of this side effect given that importing Sass modules has value beyond the outputting of styles (usage of locally scoped members).
*Added by @nex3*

- [ ] Proposal
- [ ] Specs
- [ ] [Dart Sass](https://github.com/sass/dart-sass/issues/894)
- [ ] [LibSass](https://github.com/sass/libsass/issues/3042)

---

Hi @nex3 and friends! I've noticed that there are a few gaps between CSS's specified syntax and what dart-sass will parse, one area in particular is parsing `@supports` conditions. The following examples should all be valid in CSS syntax but each generate parsing errors in dart-sass:

```css
@supports (a b) {}
@supports c(d) {}
@supports (e(f)) {}
```

The syntax for `@supports` conditions in CSS is defined here: https://drafts.csswg.org/css-conditional-3/#typedef-supports-condition

```perl
<supports-condition> = not <supports-in-parens>
                     | <supports-in-parens> [ and <supports-in-parens> ]*
                     | <supports-in-parens> [ or <supports-in-parens> ]*
<supports-in-parens> = ( <supports-condition> ) | <supports-feature> | <general-enclosed>
<supports-feature> = <supports-decl>
<supports-decl> = ( <declaration> )
```

One thing that seems missing is that the CSS syntax allows [`<general-enclosed>`](https://drafts.csswg.org/mediaqueries-4/#typedef-general-enclosed) productions, which are very open-ended in what they can contain.

```perl
<general-enclosed> = [ <function-token> <any-value> ) ] | ( <ident> <any-value> )
```

It looks like [this might be the section](https://github.com/sass/dart-sass/blob/master/lib/src/parse/stylesheet.dart#L3269-L3356) of the dart-sass parser where these conditions are read, but I'm not sure right now how to fix this or improve the code that's there.

When tokenized as CSS, `@supports c(d) {}` should look like this:

```json
{
  "type": "AT-RULE",
  "value": {
    "type": "BLOCK",
    "value": [],
    "name": "{"
  },
  "name": "supports",
  "prelude": [
    {
      "token": "WHITESPACE"
    },
    {
      "type": "FUNCTION",
      "value": [
        {
          "token": "IDENT",
          "value": "d"
        }
      ],
      "name": "c"
    },
    {
      "token": "WHITESPACE"
    }
  ]
}
```

You can use [this tool](https://tomhodgins.com/demo/cssom/) to check what different browsers will parse out of a string of CSS input. Or run this code to parse and re-stringify a string of CSS in any browser to see the same kind of result:

```js
import('https://unpkg.com/cssomtools').then(({parse, stringify}) =>
  console.log(
    stringify(
      parse`
         @supports c(d) {}
      `
    )
  )
)
```

It looks like Safari struggles with `@supports` conditions that aren't inside `()` parens, but Chrome and Firefox both seem to follow the spec a little more closely:

**Safari**

<img width="616" alt="safari-mostly-works" src="https://user-images.githubusercontent.com/955601/69577417-47ac2400-0f9c-11ea-9939-ddc14e172bdc.png">

**Firefox**

<img width="447" alt="firerox-all-work" src="https://user-images.githubusercontent.com/955601/69577428-4c70d800-0f9c-11ea-9a57-3bea29721f7b.png">

It would be great if dart-sass could parse CSS more accurately in this area, please let me know if there's any way I can be of further help in identifying or testing this.

Thanks <3

- [x] [Proposal](https://github.com/sass/sass/pull/2773)
- [x] [Specs](https://github.com/sass/sass-spec/pull/1497)
- [x] [Documentation](https://github.com/sass/sass-site/issues/410)
- [x] [Dart Sass](https://github.com/sass/dart-sass/issues/882)
- [ ] [LibSass](https://github.com/sass/libsass/issues/3040)

---

If a library like the following:
```scss
// _library.scss (original)
$lib-color: red !default;
a { color: $lib-color; }
```
removes the `lib-` prefix when migrating to the module system, it will add an import-only stylesheet like so to preserve the manually prefixed names for downstream users still using `@import`.
```scss
// _library.scss (migrated)
$color: red !default;
a { color: $color; }

// _library.import.scss
@forward "library" as lib-*;
```
But this currently breaks downstream stylesheets like:
```scss
// downstream.scss
$lib-color: green;
@import "library";
```
which compiled to `a { color: green; }` prior to migration and `a {color: red; }` after.

It seems like this is due to `@import`-style configuration not propagating through a `@forward`.
When using sass libraries with react/vue components and building with webpack. Every imported file (in the component) is processed individually which requires the shared libraries to reload for every file. 

Ideally, JavaScript API can create ImportCache/AsyncImportCache by importing some shared files and libraries and pass this cache to every render/compile call.
*Edited by @nex3*

- [x] [Proposal](https://github.com/sass/sass/blob/master/accepted/forward-with.md)
- [x] [Specs](https://github.com/sass/sass-spec/pull/1499)
- [x] [Documentation](https://github.com/sass/sass-site/issues/383)
- [x] [Dart Sass](https://github.com/sass/dart-sass/issues/846)
- [ ] [LibSass](https://github.com/sass/libsass/issues/3004)

The current plan is to add a `with` clause to `@forward`. This would work like the same clause in `@use`, except that unconfigured variables or variables set with the `!default` flag would still be configurable by the modules loading the module in which the `@forward` appears. For example:

```scss
@forward "unopinionated" with (
  $hue: 0 !default, // Can be overridden by upstream users.
  $saturation: 50% // Cannot be overridden by upstream users.
);
```

---

I've been moving my Sass packages over to the module system, but I keep hitting a problem I can't figure out. I usually have a central set of configuration variables that need to:

- be configurable by users
- be used by all the internal modules

But any time I make an internal file available to other files, I lose the ability to take user-configurations:

```
Error: This module was already loaded, so it can't be configured using "with".
```

I've tried adding duplicate `!default` settings in each file that needs, but then I get:

```
Error: Module sass/_config.scss and the new module both forward a variable named $setting.
```

As far as I can tell, everything that uses a particular default variable has to live in the same file?

Is this how it's meant to work? How would you recommend handling global package config shared among partials?
There's currently no standard way for Sass users to import packages from dependencies. There are a number of domain-specific solutions, such as Webpack's [tilde-based imports](https://github.com/webpack-contrib/sass-loader#resolving-import-at-rules), `npm-sass`'s [load-path-like functionality](https://www.npmjs.com/package/npm-sass), or Dart Sass's support for Dart's `package:` URLs.

Most of these have the disadvantage of needing to be explicitly opted-into, and all of them make it difficult to share stylesheets across different contexts. For example, if package A depends on package B, how can A import B in a way that will work in both Webpack and in Dart?

This is the kind of situation where centralization is a boon. If we can build into the Sass language a notion of a "package import" that's flexible enough to work across contexts, we can make it usable by all stylesheets with confidence that even if they're used by different build runners or even ported to a different package manager their dependencies will continue to work.

## What does it look like?

The [Sass specification](https://github.com/sass/sass/blob/master/spec/at-rules/import.md#loading-an-import) talks about imports in terms of URLs. The current JS API deals with them as a combination of raw strings and filesystem paths, but I'd like to move away from that as part of #2509.

The current most popular solution for package imports is probably `sass-loader`'s, which passes any import that begins with `~` through Webpack's built-in resolution infrastructure. We could re-use this syntax, but it doesn't work well with URL semantics. A string beginning with a tilde is syntactically a relative URL, which means we'd need to check for the relative path `~package` first before passing the URL to the package importer.

We'd have a similar problem if we automatically added `node_modules` to the load path. Every instance of `@use "bootstrap"` would need to check the relative path first, as well as potentially every load path, before checking the package importer. It also makes package stylesheets less visually distinctive, which can be confusing for readers.

As such, I propose that we use the URL scheme `pkg:` to indicate Sass package imports, so users would write `@use "pkg:bootstrap"`. This doesn't conflict with any existing syntax and so producing backwards-compatibility headaches, and it nicely mirrors the syntax of Sass's core libraries (`@use "sass:color"`).

## What does it do?

The purpose of a standard package importer is in fact to *avoid* specifying the exact behavior of the importer, so that it can do something sensible for each context. However, since Node.js is by far the most popular context in which Sass is used, we should figure out what it does in that particular case.

When resolving a URL, I think it should check `node_modules` folders as described [in Node's documentation](https://nodejs.org/api/modules.html#modules_loading_from_node_modules_folders), beginning from the parent directory of the module in which Sass is invoked (if it's invoked as a library from JS) or the parent directory of the entrypoint file (if Sass is invoked via the command line).

There's a convention of npm packages declaring their Sass entrypoints using `"style"` or `"sass"` keys in their `package.json`. While it's definitely useful to be able to write `@import "bootstrap"` rather than `@import "bootstrap/scss/bootstrap"`, I actually think we shouldn't support this. Instead, I think we should encourage packages to define an `_index.scss` file that acts as the entrypoint. This will ensure that even if the package ends up on the load path, or installed through some way other than `node_modules`, it can still be imported correctly without needing to parse `package.json`.
- [x] ~Proposal~ *(The spec is already correct)*
- [x] ~Documentation~ *(Too much of an edge case)*
- [x] [Specs](https://github.com/sass/sass-spec/pull/1460)
- [x] [Dart Sass](https://github.com/sass/dart-sass/issues/815)
- [ ] [LibSass](https://github.com/sass/libsass/issues/2987)

---

Reproduction:
```
:root{
  --10: #333
}

p{
  color: var(--10)
}
```
I'm opening this as a meta-issue to track the holistic problem that the [Bolt design system](https://github.com/bolt-design-system/bolt) is seeing with very slow build times. I'd like to provide tools to help make it faster, and in doing so hopefully improve the performance for all users with similar use cases.

## Analysis

At @sghoweri's suggestion, I've been testing performance on the [`test/sass-compile-test` branch](https://github.com/bolt-design-system/bolt/compare/test/sass-compile-test), with the following results:

* LibSass with a monolithic entrypoint file: about 40s for initial compilation and rebuilds, no matter what file was changed.
* LibSass with many different entrypoints combined via Webpack: about 17s for initial compilation, 17s for rebuilds when `@bolt/core/styles/index.scss` is modified, and 1s for rebuilds when an individual component is modified.
* Dart Sass with a monolithic entrypoint file: about 47s for initial compilation and rebuilds, no matter what file was changed.
* Dart Sass with many different entrypoints combined via Webpack: about 47s for initial compilation, 47s for rebuilds when `@bolt/core/styles/index.scss` is modified, and 1s for rebuilds when an individual component is modified.

> Note: when compiling with Dart Sass, I'm using [my own branch](https://github.com/nex3/bolt/compare/test/sass-compile-test) as well as a local version of Dart Sass with a fix for https://github.com/sass/dart-sass/issues/811. I'm compiling with Fibers enabled to trigger the much-faster synchronous code path.

It's not surprising that Dart Sass is slower than LibSass for monolithic compilations, since pure JS is always going to be somewhat slower than C++, but it *is* surprising that LibSass benefits from multiple entrypoints while Dart Sass does not. @mgreter or @xzyfer, do you have any insight into why that could be? Is LibSass doing some sort of caching across compilations, or is it able to run multiple compilations in parallel?

I then attached a profiler to the Dart Sass compilation to see if I could determine where it's spending all that time. It looks like by far the biggest culprit—about 40% of the total compilation time—is spent resolving `@import`s. Most of this is spent waiting for filesystem calls to determine exactly which files exist. The remaining time is spent doing mostly bread-and-butter interpreter stuff, with a slight emphasis on built-in map manipulation functions.

### Command-Line Compilation

As an experiment, I also set up [a version of the repo](https://github.com/nex3/bolt/compare/benchmarkable) where the monolithic entrypoint can be compiled from the command-line. Compiling this with the native-code Dart Sass (using `sass -I node_modules docs-site/sass-compile-test.scss > /dev/null`) takes about 11s, although of course it has no caching across compilations so incremental compilations would be much more expensive.

Interestingly, SassC takes about 19s for the same compilation, which is also much faster than the monolithic compilation when driven via Webpack. It's not clear to me what's causing this major discrepancy... the command-line run comments out the `export-data()` function, but commenting it out in the Webpack run doesn't substantially increase its performance. It's possible that some of it is just performance improvements to LibSass itself between the version available through Node Sass (3.5.5) and the version I was testing with (3.6.1-9-gc713).

When profiling the Dart VM compilation, it looks like it's spending *vastly* less time (about 4.5% of the total compilation time) checking the filesystem. I think this is because Dart Sass's import semantics, especially in the presence of importers, are subtly different from the JavaScript API's in a way that allows it to cache the vast majority of lookups.

## Possible Solutions

**Note: any solution we come up with should avoid substantially regressing the single-component-recompilation case.**

### Embedded Dart Sass

This is likely to be by far the easiest solution. Dart Sass is currently easiest to use from JS as a pure-JS package, but as mentioned above JS as a language imposes a considerable amount of overhead. We're planning on launching an embedded mode that will run the Dart VM as a subprocess (https://github.com/sass/dart-sass/issues/248), which should substantially improve performance relative to the pure JS version. It's hard to say exactly how much benefit this would provide (especially because it depends on which precise importer and caching semantics we decide on), but my guess is it would at least make Dart Sass's performance competitive with LibSass's.

### Better Caching Semantics

As I mentioned earlier, Dart Sass running in JS library mode doesn't cache its import resolution within a single compilation. This is necessary to maintain strict compatibility with Node Sass, but it doesn't have to be locked in place forever. As part of https://github.com/sass/sass/issues/2509, we should look into defining a new set of semantics (like those in native Dart Sass) that are more amenable to caching.

### Module System

One of the features of the [new module system](https://github.com/sass/sass/blob/master/accepted/module-system.md) is ensuring that a given file is only loaded once. How much this will help depends on how much the current setup is importing the same files multiple times, though.

### Cross-Compilation Caching

The current compilation setup compiles many different entrypoints and then uses Webpack to combine them. This has the benefit of allowing Webpack to avoid unnecessary recompilation when an individual component is modified, but it currently means that Sass (or at least Dart Sass) doesn't share any state across compilations of each separate entrypoint.

In general, it's not safe for Sass to assume that separate compilations have anything in common—the entire filesystem could have changed between two calls to `render()`. But when Webpack kicks off a batch of compilations, it's aware that they're all expected to work the same filesystem state. Sass could provide some API—perhaps a `Compiler` object—that makes the assumption that nothing changes across multiple compilations, so it can share cached import resolutions between them.

We could even go a step further and provide the ability for the `Compiler` to be informed when changes *do* happen, so that the cache can be invalidated only as much as necessary. Dart Sass already has support for this internally for `--watch` mode; we'd just need to provide an API for it. I'm not sure if Webpack exposes this information, though—maybe @evilebottnawi can provide insight here.

### Loaded Module Caching

This is the furthest-reaching possibility, but also one that could get monolithic compilation to within the speed of file-by-file compilation for a single modified component. The module system defines a clear notion of the loaded state of a module, and we could cache this state across compilations and avoid even evaluating a module again once it's loaded.

The major complexity here is that loading a module can have side effects, including changing the state of another loaded module. We'd need to have some way of marking modules—as well as anything downstream from them—as uncachable when this happens. But uncachable modules are likely to be a small minority, so this should still provide considerable benefits.