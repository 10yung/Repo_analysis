Thank you for creating the issue!

- [X] Yes, I'm using a binary release within 2 latest major releases. Only such installations are supported.
- [X] Yes, I've searched similar issues on GitHub and didn't find any.
- [X] Yes, I've included all information below (version, config, etc).

Please include the following information:

<details><summary>Version of golangci-lint</summary>

```console
$ golangci-lint --version
golangci-lint has version 1.22.2 built from cb2f8ba on 2019-12-30T19:26:28Z
```

</details>

<details><summary>Config file</summary>

```console
$ cat .golangci.yml
```
```yaml
run:
    concurrency: 4
    deadline: 5m
    tests: true
    issues-exit-code: 0

output:
    format: json

linters:
    enable-all: true
```

</details>

<details><summary>Go environment</summary>

```console
$ go version && go env

go version go1.12.10 linux/amd64

GOARCH="amd64"
GOBIN=""
GOCACHE="home/.cache/go-build"
GOEXE=""
GOFLAGS=""
GOHOSTARCH="amd64"
GOHOSTOS="linux"
GOOS="linux"
GOPATH="home/go"
GOPROXY=""
GORACE=""
GOROOT="/opt/go"
GOTMPDIR=""
GOTOOLDIR="/opt/go/pkg/tool/linux_amd64"
GCCGO="gccgo"
CC="gcc"
CXX="g++"
CGO_ENABLED="1"
GOMOD=""
CGO_CFLAGS="-g -O2"
CGO_CPPFLAGS=""
CGO_CXXFLAGS="-g -O2"
CGO_FFLAGS="-g -O2"
CGO_LDFLAGS="-g -O2"
PKG_CONFIG="pkg-config"
GOGCCFLAGS="-fPIC -m64 -pthread -fmessage-length=0 -fdebug-prefix-map=/tmp/go-build194903170=/tmp/go-build -gno-record-gcc-switches"
```

</details>

<details><summary>Verbose output of running</summary>

```console
$ golangci-lint run -v

INFO [config_reader] Config search paths: [./ SNIP ]                                                                                                 INFO [config_reader] Used config file ../.golangci.yml                                                                                                                                                                                       INFO [lintersdb] Active 37 linters: [bodyclose deadcode depguard dogsled dupl errcheck funlen gochecknoglobals gochecknoinits gocognit goconst gocritic gocyclo gofmt goimports golint gomnd gosec gosimple govet ineffassign interfacer lll maligned misspell nakedret prealloc scopelint staticcheck structcheck stylecheck typecheck unconvert unparam unused varcheck whitespace]                                                                                                     INFO [lintersdb] Active 37 linters: [bodyclose deadcode depguard dogsled dupl errcheck funlen gochecknoglobals gochecknoinits gocognit goconst gocritic gocyclo gofmt goimports golint gomnd gosec gosimple govet ineffassign interfacer lll maligned misspell nakedret prealloc scopelint staticcheck structcheck stylecheck typecheck unconvert unparam unused varcheck whitespace]                                                                                                     INFO [loader] Go packages loading at mode 575 (types_sizes|files|exports_file|imports|name|compiled_files|deps) took 673.594828ms                                                                                                            INFO [runner/filename_unadjuster] Pre-built 0 adjustments in 18.83548ms                                                                                                                                                                      INFO [runner/goanalysis_metalinter/goanalysis] analyzers took 15.906811129s with top 10 stages: buildssa: 4.166893315s, dupl: 1.38021793s, unconvert: 513.395826ms, goimports: 451.541576ms, isgenerated: 416.379726ms, maligned: 368.477252m
s, fact_deprecated: 353.220491ms, lll: 340.817917ms, errcheck: 328.726056ms, varcheck: 328.511102ms                                                                                                                                          INFO [runner/unused/goanalysis] analyzers took 730.325384ms with top 10 stages: buildssa: 559.125688ms, U1000: 171.199696ms
INFO [runner/max_same_issues] 16/19 issues with text "mnd: Magic number: 1, in <argument> detected" were hidden, use --max-same-issues                                                                                                       INFO [runner/max_same_issues] 14/17 issues with text "unnecessary leading newline" were hidden, use --max-same-issues                                                                                                                        INFO [runner/max_same_issues] 3/6 issues with text "mnd: Magic number: 500, in <assign> detected" were hidden, use --max-same-issues                                                                                                         INFO [runner/max_same_issues] 1/4 issues with text "mnd: Magic number: 200, in <argument> detected" were hidden, use --max-same-issues                                                                                                       INFO [runner/max_same_issues] 1/4 issues with text "mnd: Magic number: 404, in <argument> detected" were hidden, use --max-same-issues                                                                                                       INFO [runner/max_same_issues] 1/4 issues with text "unnecessary trailing newline" were hidden, use --max-same-issues                                                                                                                         INFO [runner/max_same_issues] 1/4 issues with text "mnd: Magic number: 200, in <assign> detected" were hidden, use --max-same-issues                                                                                                         INFO [runner/max_same_issues] 1/4 issues with text "mnd: Magic number: 7090, in <assign> detected" were hidden, use --max-same-issues                                                                                                        INFO [runner] Issues before processing: 394, after processing: 55                                                                                                                                                                            INFO [runner] Processors filtering stat (out/in): path_prettifier: 394/394, autogenerated_exclude: 394/394, nolint: 95/128, source_code: 55/55, filename_unadjuster: 394/394, exclude-rules: 128/128, uniq_by_line: 93/95, max_same_issues: 55/93, max_from_linter: 55/55, skip_dirs: 394/394, skip_files: 394/394, identifier_marker: 394/394, exclude: 128/394, diff: 93/93, max_per_file_from_linter: 93/93, path_shortener: 55/55, cgo: 394/394
INFO [runner] processing took 68.366144ms with stages: nolint: 26.032043ms, exclude: 18.124557ms, identifier_marker: 9.423378ms, autogenerated_exclude: 6.653684ms, path_prettifier: 3.58617ms, source_code: 3.274165ms, skip_dirs: 479.066µs
, cgo: 439.821µs, max_same_issues: 206.725µs, filename_unadjuster: 76.153µs, uniq_by_line: 34.664µs, max_from_linter: 13.598µs, path_shortener: 12.02µs, max_per_file_from_linter: 7.973µs, diff: 932ns, skip_files: 766ns, exclude-rules: 42
9ns
INFO [runner] linters took 3.023316898s with stages: goanalysis_metalinter: 2.454231757s, unused: 500.531546ms

{...}

INFO Memory: 39 samples, avg is 162.1MB, max is 271.4MB
INFO Execution took 3.747310149s
```

</details>

Some linters, like `godox` and `wsl` don't properly escape quotes. I've had to disable these in my config.

Other linters don't properly escape characters between `0x00` and `0x1F` (like newlines and tabs). All of these result in corrupt JSON files. I've had to pre-process the JSON file to fix these, before it can be parsed using e.g. `jq`.
I have been seeing the following warning quite frequently in both our CI environment and on my local development machine:

```
level=warning msg="[runner/goanalysis_metalinter/goanalysis] Failed to get persisted facts: failed to get data from low-level cache by key printf/facts for package trace: failed to stat file /home/greg/.cache/golangci-lint/af/aff20f6cd29342c0f0dcc2ea1acf50b374a6cf1954a9287664287e2d313d7244-d: stat /home/greg/.cache/golangci-lint/af/aff20f6cd29342c0f0dcc2ea1acf50b374a6cf1954a9287664287e2d313d7244-d: no such file or directory"
```

There isn't anything else running that should be deleting these files and we aren't running multiple instances of `golangci-lint` concurrently.

This has been going on for a month or so, likely starting around the time I upgraded to 1.22.0.

Please let me know if I can supply any additional information.

---

Thank you for creating the issue!

- [X] Yes, I'm using a binary release within 2 latest major releases. Only such installations are supported.
- [X] Yes, I've searched similar issues on GitHub and didn't find any.
- [X] Yes, I've included all information below (version, config, etc).

Please include the following information:

<details><summary>Version of golangci-lint</summary>

```console
$ golangci-lint --version
golangci-lint has version 1.22.2 built from cb2f8ba on 2019-12-30T19:26:28Z
```

</details>

<details><summary>Config file</summary>

```console
$ cat .golangci.tonl
[run]
  deadline = "10m"

  modules-download-mode = "vendor"

  skip-files = [
    "_easyjson\\.go$",
    "_easyjson_test\\.go$",
  ]

  tests = true

[linters]
  disable-all = true
  enable = [
    "deadcode",
    "depguard",
    "errcheck",
    "goconst",
    "gocyclo",
    "gocritic",
    "gofmt",
    "golint",
    "gosec",
    "gosimple",
    "ineffassign",
    "maligned",
    "misspell",
    "nakedret",
    # https://github.com/golangci/golangci-lint/issues/287
    # "safesql",
    "staticcheck",
    "structcheck",
    "typecheck",
    "unconvert",
    "unparam",
    "varcheck",
    "vet",
    "vetshadow",
  ]

[linters-settings.depguard]
  list-type = "blacklist"
  include-go-root = true
  packages = [
    # This library panics frequently on invalid input. Please use
    # github.com/pelletier/go-toml instead.
    "github.com/BurntSushi/toml",

    # The performance of this library is absolutely abysmal. Consider
    # using github.com/avct/uasurfer instead.
    "github.com/ua-parser/uap-go/uaparser",

    # This package is frozen and has a number of issues. We use
    # github.com/RackSec/srslog instead.
    "log/syslog"
  ]

[issues]
exclude-use-default = false
```

</details>

<details><summary>Go environment</summary>

```console
$ go version && go env
go version go1.13.5 linux/amd64
GO111MODULE="on"
GOARCH="amd64"
GOBIN=""
GOCACHE="/home/greg/.cache/go-build"
GOENV="/home/greg/.config/go/env"
GOEXE=""
GOFLAGS=""
GOHOSTARCH="amd64"
GOHOSTOS="linux"
GONOPROXY=""
GONOSUMDB=""
GOOS="linux"
GOPATH="/home/greg/MaxMind/go"
GOPRIVATE=""
GOPROXY="https://proxy.golang.org,direct"
GOROOT="/usr/local/go"
GOSUMDB="sum.golang.org"
GOTMPDIR=""
GOTOOLDIR="/usr/local/go/pkg/tool/linux_amd64"
GCCGO="gccgo"
AR="ar"
CC="gcc"
CXX="g++"
CGO_ENABLED="1"
GOMOD="/dev/null"
CGO_CFLAGS="-g -O2"
CGO_CPPFLAGS=""
CGO_CXXFLAGS="-g -O2"
CGO_FFLAGS="-g -O2"
CGO_LDFLAGS="-g -O2"
PKG_CONFIG="pkg-config"
GOGCCFLAGS="-fPIC -m64 -pthread -fmessage-length=0 -fdebug-prefix-map=/tmp/go-build036139998=/tmp/go-build -gno-record-gcc-switches"
```

</details>

<details><summary>Verbose output of running</summary>

```console
$ golangci-lint run -v
INFO [config_reader] Config search paths: [./ /home/greg/MaxMind/go/src/github.maxmind.com/maxmind/mm_website.git /home/greg/MaxMind/go/src/github.maxmind.com/maxmind /home/greg/MaxMind/go/src/github.maxmind.com /home/greg/MaxMind/go/src /home/greg/MaxMind/go /home/greg/MaxMind /home/greg /home /] 
INFO [config_reader] Used config file .golangci.toml 
INFO [lintersdb] Active 21 linters: [deadcode depguard errcheck goconst gocritic gocyclo gofmt golint gosec gosimple govet ineffassign maligned misspell nakedret staticcheck structcheck typecheck unconvert unparam varcheck] 
INFO [lintersdb] Active 21 linters: [deadcode depguard errcheck goconst gocritic gocyclo gofmt golint gosec gosimple govet ineffassign maligned misspell nakedret staticcheck structcheck typecheck unconvert unparam varcheck] 
INFO [loader] Go packages loading at mode 575 (imports|name|types_sizes|compiled_files|deps|exports_file|files) took 2.437594027s 
ERRO Running error: context loading failed: no go files to analyze 
INFO Memory: 26 samples, avg is 68.9MB, max is 68.9MB 
INFO Execution took 2.441272329s                  
```

</details>

When the `misspell` linter tries to go over a line that is too long, it will show a warning. This warning will appear even if `misspell` is excluded for that file.

Thank you for creating the issue!

- [x] Yes, I'm using a binary release within 2 latest major releases. Only such installations are supported.
- [x] Yes, I've searched similar issues on GitHub and didn't find any.
- [x] Yes, I've included all information below (version, config, etc).

Please include the following information:

<details><summary>Version of golangci-lint</summary>

```console
$ golangci-lint --version
golangci-lint has version v1.22.2 built from (unknown, mod sum: "h1:iaihss3Tf6NvZVjun3lHimKSgofPV1+FqE/cbehoiRQ=") on (unknown)
```

</details>

<details><summary>Config file</summary>

```console
$ cat .golangci.yml
# This file configures github.com/golangci/golangci-lint.

run:
  timeout: 2m
  tests: true
  # default is true. Enables skipping of directories:
  #   vendor$, third_party$, testdata$, examples$, Godeps$, builtin$
  skip-dirs-use-default: true
  skip-files:
    - core/genesis_alloc.go

linters:
  disable-all: true
  enable:
    - deadcode
    - goconst
    - goimports
    - gosimple
    - govet
    - ineffassign
    - misspell
    # - staticcheck
    - unconvert
    # - unused
    - varcheck

linters-settings:
  gofmt:
    simplify: true
  goconst:
    min-len: 3 # minimum length of string constant
    min-occurrences: 6 # minimum number of occurrences

issues:
  exclude-rules:
    - path: crypto/blake2b/
      linters:
        - deadcode
    - path: crypto/bn256/cloudflare
      linters:
        - deadcode
    - path: p2p/discv5/
      linters:
        - deadcode
    - path: core/vm/instructions_test.go
      linters:
        - goconst
    - path: cmd/faucet/
      linters:
        - deadcode
    - path: core/genesis_alloc.go
      linters:
        - misspell
```

</details>

<details><summary>Go environment</summary>

```console
$ go version && go env
go version go1.13 linux/arm64
GO111MODULE=""
GOARCH="arm64"
GOBIN=""
GOCACHE="/home/gballet/.cache/go-build"
GOENV="/home/gballet/.config/go/env"
GOEXE=""
GOFLAGS=""
GOHOSTARCH="arm64"
GOHOSTOS="linux"
GONOPROXY=""
GONOSUMDB=""
GOOS="linux"
GOPATH="/home/gballet/go"
GOPRIVATE=""
GOPROXY="https://proxy.golang.org,direct"
GOROOT="/usr/local/go"
GOSUMDB="sum.golang.org"
GOTMPDIR=""
GOTOOLDIR="/usr/local/go/pkg/tool/linux_arm64"
GCCGO="gccgo"
AR="ar"
CC="gcc"
CXX="g++"
CGO_ENABLED="1"
GOMOD="/home/gballet/go/src/github.com/ethereum/go-ethereum/go.mod"
CGO_CFLAGS="-g -O2"
CGO_CPPFLAGS=""
CGO_CXXFLAGS="-g -O2"
CGO_FFLAGS="-g -O2"
CGO_LDFLAGS="-g -O2"
PKG_CONFIG="pkg-config"
GOGCCFLAGS="-fPIC -pthread -fmessage-length=0 -fdebug-prefix-map=/tmp/go-build350194322=/tmp/go-build -gno-record-gcc-switches"
```

</details>

<details><summary>Verbose output of running</summary>

```console
>>> build/cache/golangci-lint-1.22.2-linux-amd64/golangci-lint run --config .golangci.yml ./...

WARN [runner] Can't process result by autogenerated_exclude processor: can't filter issue result.Issue{FromLinter:"misspell", Text:"`ect` is a misspelling of `etc`", SourceLines:[]string(nil), Replacement:(*result.Replacement)(0xc00f0098f0), Pkg:(*packages.Package)(0xc001691770), LineRange:(*result.Range)(nil), Pos:token.Position{Filename:"core/genesis_alloc.go", Offset:0, Line:24, Column:64842}, HunkPos:0}: failed to get doc of file core/genesis_alloc.go: failed to scan file: bufio.Scanner: token too long 
```

</details>

Fixes partly #897 
hi,
sometimes it's usefull to see all linters, that was triggered by the line
so i have added new param for this
Hi, Thank you very much for the wonderful functionality provided.
Please advise if it would be possible to pass in command a threshold to be used by a linter. 
Example:
```console
golangci-lint run --disable-all -E gocyclo
```
Runs gocyclo with 30 as threshold. What if I would like to run gocyclo with a smaller value?
How could I pass this to the linter in the command line?
Thank you again.
Thank you for creating the issue!

- [x] Yes, I'm using a binary release within 2 latest major releases. Only such installations are supported.
- [x] Yes, I've searched similar issues on GitHub and didn't find any.
- [x] Yes, I've included all information below (version, config, etc).

Please include the following information:

<details><summary>Version of golangci-lint</summary>
```console
$ golangci-lint --version
golangci-lint has version (devel) built from (unknown, mod sum: "") on (unknown)
```

</details>

<details><summary>Config file</summary>

```console
$ cat .golangci.yml
linters:
  disable-all: true
  enable:
    - unused
linters-settings:
  unused:
    check-exported: true
```


</details>

<details><summary>Go environment</summary>

```console
$ go version && go env
# paste output here
```

</details>

<details><summary>Verbose output of running</summary>

```console
$ golangci-lint run -v
# paste output here
```

</details>
i get an error "Running error: context loading failed: package github.com/golangci/golangci-lint/pkg/commands: no go files to analyze" even when there are go files in the location.
It looks like excluding internal analysers, as was done in #763, is causing my config to fail, because `linters-settings.govet.settings.printf` no longer exists.

<details><summary>Version of golangci-lint</summary>

```console
$ golangci-lint --version
golangci-lint has version v1.22.2 built from (unknown, mod sum: "h1:iaihss3Tf6NvZVjun3lHimKSgofPV1+FqE/cbehoiRQ=") on (unknown)
```

</details>

<details><summary>Config file</summary>

```console
$ cat .golangci.toml
[linters]
disable-all = true
enable = [ "govet" ]

[linters-settings.govet.settings.printf]
funcs = [
  "warnf",
  "infof",
  "errorf",
  "logf",
  "printf",
  "warningf",
  "fatalf",
  "sprintf",
  "fprintf",
  "panicf",
]
```

</details>

<details><summary>Go environment</summary>

```console
$ go version && go env
go version go1.13.6 linux/amd64
GO111MODULE="on"
GOARCH="amd64"
GOBIN=""
GOCACHE="/home/user/.cache/go-build"
GOENV="/home/user/.config/go/env"
GOEXE=""
GOFLAGS=""
GOHOSTARCH="amd64"
GOHOSTOS="linux"
GOOS="linux"
GOPATH="/home/user/go"
GOPROXY="https://proxy.golang.org,direct"
GOROOT="/home/user/.local/share/umake/go/go-lang"
GOSUMDB="sum.golang.org"
GOTMPDIR=""
GOTOOLDIR="/home/user/local/share/umake/go/go-lang/pkg/tool/linux_amd64"
GCCGO="gccgo"
AR="ar"
CC="gcc"
CXX="g++"
CGO_ENABLED="1"
CGO_CFLAGS="-g -O2"
CGO_CPPFLAGS=""
CGO_CXXFLAGS="-g -O2"
CGO_FFLAGS="-g -O2"
CGO_LDFLAGS="-g -O2"
PKG_CONFIG="pkg-config"
GOGCCFLAGS="-fPIC -m64 -pthread -fmessage-length=0 -fdebug-prefix-map=/tmp/go-build142817576=/tmp/go-build -gno-record-gcc-switches"
```

</details>

<details><summary>Verbose output of running</summary>

```console
$ golangci-lint run -v
INFO [config_reader] Used config file .golangci.toml 
INFO [lintersdb] Active 1 linters: [govet]        
INFO [lintersdb] Active 1 linters: [govet]        
INFO [loader] Go packages loading at mode 575 (files|types_sizes|compiled_files|deps|name|exports_file|imports) took 1.819537546s 
INFO [runner/filename_unadjuster] Pre-built 0 adjustments in 163.287254ms 
WARN [runner] Can't run linter govet: failed to configure analyzers: settings key "printf" must be valid analyzer name, valid analyzers: [asmdecl assign atomic bools buildtag cgocall composites copylocks errorsas httpresponse loopclosure lostcancel nilfunc shift stdmethods structtag tests unmarshal unreachable unsafeptr unusedresult] 
INFO [runner] processing took 4.181µs with stages: max_same_issues: 1.344µs, filename_unadjuster: 435ns, nolint: 349ns, skip_dirs: 341ns, max_from_linter: 247ns, cgo: 168ns, path_prettifier: 168ns, identifier_marker: 149ns, path_shortener: 145ns, source_code: 139ns, diff: 134ns, skip_files: 133ns, autogenerated_exclude: 129ns, exclude: 81ns, uniq_by_line: 79ns, max_per_file_from_linter: 72ns, exclude-rules: 68ns 
INFO [runner] linters took 245.841µs with stages: govet: 161.417µs 
ERRO Running error: failed to configure analyzers: settings key "printf" must be valid analyzer name, valid analyzers: [asmdecl assign atomic bools buildtag cgocall composites copylocks errorsas httpresponse loopclosure lostcancel nilfunc shift stdmethods structtag tests unmarshal unreachable unsafeptr unusedresult] 
INFO Memory: 21 samples, avg is 68.9MB, max is 69.3MB 
INFO Execution took 1.994757397s
```

</details>

Draft attempt to fix sporadic type errors.

Relates #885 
Thank you for creating the issue!

- [x] Yes, I'm using a binary release within 2 latest major releases. Only such installations are supported.
- [x] Yes, I've searched similar issues on GitHub and didn't find any.
- [x] Yes, I've included all information below (version, config, etc).

Please include the following information:

<details><summary>Version of golangci-lint</summary>

```console
$ golangci-lint version
golangci-lint has version 1.22.2 built from cb2f8ba on 2019-12-30T19:26:28Z```
```

</details>

<details><summary>Config file</summary>

```console
$ cat .golangci.yml
linters:
  # please, do not use `enable-all`: it's deprecated and will be removed soon.
  # inverted configuration with `enable-all` and `disable` is not scalable during updates of golangci-lint
  disable-all: true
  enable:
    #notskip- bodyclose
    #notskip-  deadcode
    #notskip- depguard
    #- dogsled
    #- dupl
    #notskip- errcheck
    #- funlen
    #- gochecknoinits
    #- goconst
    #notskip- gocritic
    #- gocyclo
    #- gofmt
    #- goimports
    #- golint
    #notskip- gosec
    #notskip- gosimple
    #notskip- govet
    #- ineffassign
    #notskip- interfacer
    #- lll
    #- misspell
    #- nakedret
    #- scopelint
    #notskip- staticcheck
    #notskip- structcheck
    #notskip- stylecheck
    #- typecheck
    - unconvert
    #notskip- unparam
    #notskip- unused
    #notskip- varcheck
    #- whitespace

    # don't enable:
    #- gochecknoglobals
    #- gocognit
    #- godox
    #notskip- maligned
    #- prealloc

run:
  skip-dirs:
    - api
    - vendor
```

</details>

<details><summary>Go environment</summary>

```console
$ go version && go env
GOHOSTARCH="amd64"
GOHOSTOS="linux"
GOOS="linux"
GOPATH="/repo/go:/k10/go"
GOPROXY=""
GORACE=""
GOROOT="/usr/local/go"
GOTMPDIR=""
GOTOOLDIR="/usr/local/go/pkg/tool/linux_amd64"
GCCGO="gccgo"
CC="gcc"
CXX="g++"
CGO_ENABLED="1"
GOMOD="/repo/go.mod"
CGO_CFLAGS="-g -O2"
CGO_CPPFLAGS=""
CGO_CXXFLAGS="-g -O2"
CGO_FFLAGS="-g -O2"
CGO_LDFLAGS="-g -O2"
PKG_CONFIG="pkg-config"
GOGCCFLAGS="-fPIC -m64 -pthread -fmessage-length=0 -fdebug-prefix-map=/tmp/go-build302036891=/tmp/go-build -gno-record-gcc-switches"
```

</details>

<details><summary>Verbose output of running</summary>

```console
$ golangci-lint run -v
INFO [config_reader] Config search paths: [./ /repo/go/src /repo/go /repo /] 
INFO [config_reader] Used config file ../../.golangci.yml 
INFO [lintersdb] Active 1 linters: [unconvert]    
INFO [lintersdb] Active 1 linters: [unconvert]    
INFO [loader] Go packages loading at mode 575 (deps|types_sizes|compiled_files|exports_file|files|imports|name) took 2.72833563s 
INFO [runner/filename_unadjuster] Pre-built 0 adjustments in 76.405679ms 
INFO [runner/unconvert/goanalysis] analyzers took 85.820662ms with top 10 stages: unconvert: 85.820662ms 
WARN [runner] Can't run linter unconvert: unconvert: analysis skipped: errors in package: [/repo/go/src/api/.../run.go:57:19: client.Actions undefined (type client.Interface has no field or method Actions) /repo/go/src/api/.../run.go:51:19: client.Actions undefined (type client.Interface has no field or method Actions) /repo/go/src/api/.../retire.go:57:19: client.Actions undefined (type client.Interface has no field or method Actions) /repo/go/src/api/.../retire.go:51:19: client.Actions undefined (type client.Interface has no field or method Actions) /repo/go/src/api/.../restore.go:58:19: client.Actions undefined (type client.Interface has no field or method Actions) /repo/go/src/api/.../restore.go:52:19: client.Actions undefined (type client.Interface has no field or method Actions) /repo/go/src/api/.../import.go:58:19: client.Actions undefined (type client.Interface has no field or method Actions) /repo/go/src/api/.../import.go:52:19: client.Actions undefined (type client.Interface has no field or method Actions) /repo/go/src/api/.../export.go:58:19: client.Actions undefined (type client.Interface has no field or method Actions) /repo/go/src/api/.../export.go:52:19: client.Actions undefined (type client.Interface has no field or method Actions) /repo/go/src/api/.../backup.go:58:19: client.Actions undefined (type client.Interface has no field or method Actions) /repo/go/src/api/.../backup.go:52:19: client.Actions undefined (type client.Interface has no field or method Actions)] 
INFO [runner] processing took 2.531µs with stages: max_same_issues: 558ns, skip_dirs: 288ns, nolint: 253ns, max_from_linter: 237ns, cgo: 198ns, path_prettifier: 108ns, autogenerated_exclude: 107ns, skip_files: 104ns, filename_unadjuster: 102ns, exclude-rules: 101ns, max_per_file_from_linter: 100ns, diff: 99ns, identifier_marker: 99ns, uniq_by_line: 48ns, exclude: 46ns, source_code: 42ns, path_shortener: 41ns 
INFO [runner] linters took 1.729615347s with stages: unconvert: 1.729587635s 
ERRO Running error: unconvert: analysis skipped: errors in package: [/repo/go/src/api/.../run.go:57:19: client.Actions undefined (type client.Interface has no field or method Actions) /repo/go/src/api/.../run.go:51:19: client.Actions undefined (type client.Interface has no field or method Actions) /repo/go/src/api/.../retire.go:57:19: client.Actions undefined (type client.Interface has no field or method Actions) /repo/go/src/api/.../retire.go:51:19: client.Actions undefined (type client.Interface has no field or method Actions) /repo/go/src/api/.../restore.go:58:19: client.Actions undefined (type client.Interface has no field or method Actions) /repo/go/src/api/.../restore.go:52:19: client.Actions undefined (type client.Interface has no field or method Actions) /repo/go/src/api/.../import.go:58:19: client.Actions undefined (type client.Interface has no field or method Actions) /repo/go/src/api/.../import.go:52:19: client.Actions undefined (type client.Interface has no field or method Actions) /repo/go/src/api/.../export.go:58:19: client.Actions undefined (type client.Interface has no field or method Actions) /repo/go/src/api/.../export.go:52:19: client.Actions undefined (type client.Interface has no field or method Actions) /repo/go/src/api/.../backup.go:58:19: client.Actions undefined (type client.Interface has no field or method Actions) /repo/go/src/api/.../backup.go:52:19: client.Actions undefined (type client.Interface has no field or method Actions)] 
INFO Memory: 47 samples, avg is 176.6MB, max is 404.3MB 
INFO Execution took 4.545652859s 
```
</details>

<details><summary>Linters that adhere to skip-dirs</summary>

```console
  dogsled
  dupl
  funlen
  gochecknoinits
  goconst
  gocyclo
  gofmt
  goimports
  golint
  ineffassign
  lll
  misspell
  nakedret
  scopelint
  typecheck
  whitespace
  gochecknoglobals
  gocognit
  godox
  prealloc
```
</details>

<details><summary>Linters that ignore to skip-dirs</summary>

```console
  bodyclose
  deadcode
  depguard
  errcheck
  gocritic
  gosec
  gosimple
  govet
  interfacer
  staticcheck
  structcheck
  stylecheck
  unconvert
  unparam
  unused
  varcheck
  maligned
```
</details>

Perhaps that there is a reason that skip-dirs is ignored with some linters and a non-zero value is returned for errors in those directories, but I cannot seem to find one. Any help would be very welcome.