
Does font-kit support being built in Docker using the [rust-musl-bulider](https://github.com/emk/rust-musl-builder)?  I am trying to produce a fully static binary to be used on an Alpine Linux image.  I am currently unable to get my application to build when I include font-kit as a dependency.  Any help you can offer would be greatly appreciated. 

The executable seems to build, but it seems to be dynamically linking against libfontconfig and libfreetype, here is the output of ldd from the docker image:

```
/usr/local/bin # ldd optimus-prime
        /lib/ld64.so.1 (0x7fe47f989000)
Error loading shared library libfontconfig.so.1: No such file or directory (needed by optimus-prime)
Error loading shared library libfreetype.so.6: No such file or directory (needed by optimus-prime)
Error relocating optimus-prime: FT_Init_FreeType: symbol not found
Error relocating optimus-prime: FcObjectSetCreate: symbol not found
Error relocating optimus-prime: FcPatternDestroy: symbol not found
Error relocating optimus-prime: FT_Set_Char_Size: symbol not found
Error relocating optimus-prime: FcPatternGetInteger: symbol not found
Error relocating optimus-prime: FcPatternCreate: symbol not found
Error relocating optimus-prime: FcInitLoadConfigAndFonts: symbol not found
Error relocating optimus-prime: FcPatternAddString: symbol not found
Error relocating optimus-prime: FT_Done_Face: symbol not found
Error relocating optimus-prime: FcObjectSetDestroy: symbol not found
Error relocating optimus-prime: FT_New_Memory_Face: symbol not found
Error relocating optimus-prime: FcPatternGetString: symbol not found
Error relocating optimus-prime: FcObjectSetAdd: symbol not found
Error relocating optimus-prime: FcFontList: symbol not found
Error relocating optimus-prime: FcFontSetDestroy: symbol not found
```

@pcwalton 
This is kind of an RFC. In general I've started to prefer `pathfinder_geometry` over `euclid` because it supports SIMD, even on stable Rust, and it has less weird conventions (column major everywhere). But `euclid` is more commonly used in the ecosystem.
Currently building a game with amethyst.rs, and any time I attempt to use the `lld` linker to speed up my iteration, I get the following error trying to load fonts:
```
Message("unknown variant TTF, there are no variants")
```
Loading no fonts explicitly -- and trying to fallback to the system default yields a spew of errors like the following, before failing to load any fonts:
```
"/etc/fonts/fonts.conf", line 6: invalid attribute 'translate'...
```

A small bit of investigation revealed this may be due to the this package -- or a dependency -- using a bundled, incompatible `fontconfig` instead of the system's. 
See https://github.com/servo/core-foundation-rs/pull/347.
Title says it all. Outlines are a must for readability against noisy backgrounds, such as when drawing subtitles on top of video. Combined with colors and gradients they also make for very easy fancy effects so there's that use case too. As far as I know all the platform-specific APIs support stroking glyph outlines in addition to rendering filled glyphs.
In CSS, the `serif`, `sans-serif`, `cursive`, `fantasy`, and `monospace` keywords when used without quotes have a different meaning than other keywords (which are space-joined into a single string) or quoted strings. They are "generic" font families.

Currently `Source::select_family_by_generic_name` allows looking up concrete font families from those keywords, but it is `#[doc(hidden)]` with a FIXME comment about returning multiple families.

In the specification:

https://drafts.csswg.org/css-fonts/#generic-font-families
> All five generic font families must always result in at least one matched font face, for all CSS implementations. However, the generics may be composite faces (with different typefaces based on such things as the Unicode range of the character, the language of the containing element, user preferences and system settings, among others). They are also not guaranteed to always be different from each other. 

https://drafts.csswg.org/css-fonts/#font-style-matching
>  User agents may choose the generic font family to use based on the language of the containing element or the Unicode range of the character.

Based on other uses, the spec appears to misuse "character" to mean Unicode code point. But then “[When text contains characters such as combining marks](https://drafts.csswg.org/css-fonts/#cluster-matching)” there’s specific handling based on grouping by grapheme cluster.

So perhaps `Source::select_family_by_generic_name` should be unhidden, but after some API change. Would an input "character" (perhaps a `char` code point, or a `&str` grapheme cluster?) be useful to any of the backends? What about an optional language tag?
Servo would like to implement CSS on top of font-kit. The spec (relevant bits below):

* Is very specific about (case-insensitive) string comparison for font family names
* Requires accepting alternative (localized) family names of any given font

[`Source::select_family_by_name`](https://docs.rs/font-kit/0.4.0/font_kit/source/trait.Source.html#tymethod.select_family_by_name) looks like the appropriate API for looking up system fonts matching a given family name string.  Some research is needed, to figure out whether the underlying APIs (fontconfig/CoreText/DirectWrite) of the respective default `Source` for each supported platform behaves as CSS requires on these two points, or if can be configured to do so.

An alternative could be to enumerate all available fonts and their family names, and maintain a Rust (hash?) map where keys are normalized with [default case fold](https://docs.rs/caseless/0.2.1/caseless/fn.default_case_fold_str.html). But I suspect this would have significant startup cost.

----

https://drafts.csswg.org/css-fonts/#font-family-casing
> User agents must match these names case insensitively, using the "Default Caseless Matching" algorithm outlined in the Unicode specification [UNICODE]. This algorithm is detailed in section 3.13 entitled "Default Case Algorithms". Specifically, the algorithm must be applied without normalizing the strings involved and without applying any language-specific tailorings. The case folding method specified by this algorithm uses the case mappings with status field ‘C’ or ‘F’ in the CaseFolding.txt file of the Unicode Character Database [UNICODE]. 

[…]

> Implementors should take care to verify that a given caseless string comparison implementation uses this precise algorithm and not assume that a given platform string matching routine follows it, as many of these have locale-specific behavior or use some level of string normalization [UAX15]. 

https://drafts.csswg.org/css-fonts/#font-style-matching
> On systems containing fonts with multiple localized font family names, user agents must match any of these names independent of the underlying system locale or platform API used.

https://drafts.csswg.org/css-fonts/#family-name-value
> Some font formats allow fonts to carry multiple localizations of the family name. User agents must recognize and correctly match all of these names independent of the underlying platform localization, system API used or document encoding: 
>
> <img src=https://www.w3.org/TR/2018/REC-css-fonts-3-20180920/localizedfamilynames.png>

There are font families like `MS Shell Dlg 2` which will not be resolved at the moment:

```
> cargo run --example match-font -- "MS Shell Dlg 2"
Error: NotFound
```

I'm not sure if it's possible to resolve them via winapi, but they are defined here: `Computer\HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows NT\CurrentVersion\FontSubstitutes\`
WebRender and Raqote don't need any of the font matching/searching code so it would be nice to have a separate font rendering crate.