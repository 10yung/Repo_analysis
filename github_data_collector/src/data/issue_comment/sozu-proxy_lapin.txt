Sometimes could be useful avoiding to declare queue from program.
Hi, i got a couple questions.

This method [with_kind](https://docs.rs/lapin/0.28.4/lapin/protocol/basic/struct.AMQPProperties.html#method.with_kind) sets the [type](https://www.rabbitmq.com/releases/rabbitmq-java-client/v3.5.4/rabbitmq-java-client-javadoc-3.5.4/com/rabbitmq/client/AMQP.BasicProperties.Builder.html#type(java.lang.String))`rabbitmq` variable? 
If so, it wouldn't be better to call it `with_type` instead?

hi, i found out the lapin from the rabbitmq/examples , and in that repo, the lapin's example is too old for current version(^0.28), but using current repo, i just found out something very simple which lack 

- fanout model 
- direct routing
- topic 

and both without something like "queue_bind", "exchange" which can't be ignore 

and in future's example, the code is in "0.27" which not compact with current stage

thanks
I am trying to check if a queue/exchange is already declared by using passive_flag.
When the queue does not exist, an error is returned (this is expected) and the channel is closed (by rabbit), however also the connection is closed by the lapin client as a result of channel close . Is this expected?


I get this with `0.28.3`

The snippets are:
```
let channel_queue = session.create_channel().wait().expect("create_channel");
  let queue = channel_queue.queue_declare(
      amqp_entity.clone(),
      QueueDeclareOptions{
        passive: true,
        durable: false, 
        exclusive: false,
        auto_delete: false, 
        nowait: false, 
        ..Default::default()
      }, 
      FieldTable::default())
    .wait();
  channel_queue.close(200,"").wait().ok();
```

this code generates:

```
[2019-11-25T20:55:31Z DEBUG lapin::channels] create channel with id 2
[2019-11-25T20:55:31Z ERROR lapin::channel] Channel 2 closed by 50:10 => Soft(NOTFOUND) => NOT_FOUND - no queue 'amq.topic' in vhost '/'
[2019-11-25T20:55:31Z ERROR lapin::connection] Connection error
```

and in rabbitmq i see
```
2019-11-25 20:55:31.394 [error] <0.617.0> Channel error on connection <0.605.0> (172.18.0.1:34500 -> 172.18.0.3:5672, vhost: '/', user: 'admin'), channel 2:  operation queue.declare caused a channel exception not_found: no queue 'amq.topic' in vhost '/'
2019-11-25 20:55:31.396 [warning] <0.605.0> closing AMQP connection <0.605.0> (172.18.0.1:34500 -> 172.18.0.3:5672, vhost: '/', user: 'admin'): client unexpectedly closed TCP connection
```


Thank you
Executing the following code on Windows and Linux (actually WSL running on the same machine to demonstrate that network/firewall are not at fault) and with rabbitmq halted, the Windows executable blocks forever or at least until interrupted with control-c.

Under Linux it will, as expected, return immediately and produce output: "Connection failed: ConnectionRefused"

This was tested with lapin 0.28.1.

```
use lapin::{Connection, ConnectionProperties};

fn main() {
   match Connection::connect("amqp://127.0.0.1:5672/%2f", ConnectionProperties::default()).wait() {
       Ok(_conn) => println!("Connected"),
       Err(e) => println!("Connection failed: {:?}", e) ,
   };
}
```
In Lapin 0.28.1, when i call channel.close(200, "Normal shutdown").wait() i get a connection error and then a invalid channel state error, the trace log (note that with the last line at the top e. g. output of journalctl -r) follows (only from when the close message was written to the channel):
```
Oct 12 05:10:20 hyperion worker[244381]: Error: InvalidChannelState(Error)
Oct 12 05:10:20 hyperion worker[244381]: [ERROR lapin::connection] Connection error
Oct 12 05:10:20 hyperion worker[244381]: [TRACE lapin::connection] will handle frame: Method(1, Channel(CloseOk(CloseOk)
))
Oct 12 05:10:20 hyperion worker[244381]: [TRACE lapin::io_loop] read 12 bytes
Oct 12 05:10:20 hyperion worker[244381]: [TRACE lapin::io_loop] wrote 0 bytes
Oct 12 05:10:20 hyperion worker[244381]: [TRACE lapin::io_loop] io_loop do_run; can_read=true, can_write=true, has_data=
true
Oct 12 05:10:20 hyperion worker[244381]: [TRACE lapin::io_loop] io_loop poll done
Oct 12 05:10:20 hyperion worker[244381]: [TRACE lapin::io_loop] io_loop poll
Oct 12 05:10:20 hyperion worker[244381]: [TRACE lapin::io_loop] io_loop run
Oct 12 05:10:20 hyperion worker[244381]: [TRACE lapin::io_loop] io_loop do_run done; can_read=false, can_write=true, has
_data=true, status=Setup
Oct 12 05:10:20 hyperion worker[244381]: [TRACE lapin::io_loop] io_loop send continue; can_read=false, can_write=true, h
as_data=true
Oct 12 05:10:20 hyperion worker[244381]: [TRACE lapin::io_loop] wrote 34 bytes
```
When Channel object is dropped, channel is not closed on rabbit. Is it desired behavior or we need to somehow register channel id to close on drop  and on later iteration of io-loop send corresponding command to rabbit to not leak resources?
All releases after 0.17.0 are lacking tags.
Hi !

I've been faced to strange connection error.
After investigating I've found that using a queue declared by another channel as an argument to `basic_consume` produces a connection error (because not registered in channel's queues).
This behavior isn't documented, and I don't think it is a limitation of AMQP protocol (as it only needs a queue name).
Using a queue declared by the same channel solves the problem.
It's not bad, but it should at least be documented.

Moreover I found that it was particularly difficult to find the origin of this error.
I know you're doing a lot of refactoring, but when done it would be nice to have more traces and a better error reporting system, to know exactly what goes wrong.
It would be nice to split
- reactor interactions trait
- default reactor
- the rest of the io_loop

This would allow using lapin with a better integration with other reactors