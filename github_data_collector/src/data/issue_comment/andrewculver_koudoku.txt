(Creating this PR in anticipation of #199, which  we're going to merge into `master`.)

I'm using Rails 5.2 and Ruby 2.4.4
```

Fetching bluecloth 2.2.0
Installing bluecloth 2.2.0 with native extensions
Gem::Ext::BuildError: ERROR: Failed to build gem native extension.

current directory:
C:/Ruby24-x64/lib/ruby/gems/2.4.0/gems/bluecloth-2.2.0/ext
C:/Ruby24-x64/bin/ruby.exe -r ./siteconf20181125-7940-akh0pa.rb extconf.rb
checking for srand()... yes
checking for random()... no
checking for rand()... yes
checking for bzero() in string.h,strings.h... no
checking for strcasecmp()... yes
checking for strncasecmp()... yes
checking for mkdio.h... yes
checking for ruby/encoding.h... yes
creating extconf.h
creating Makefile

current directory: C:/Ruby24-x64/lib/ruby/gems/2.4.0/gems/bluecloth-2.2.0/ext
make "DESTDIR=" clean

current directory: C:/Ruby24-x64/lib/ruby/gems/2.4.0/gems/bluecloth-2.2.0/ext
make "DESTDIR="
generating bluecloth_ext-x64-mingw32.def
compiling Csio.c
compiling bluecloth.c
In file included from bluecloth.h:10,
                 from bluecloth.c:25:
config.h:18:14: error: duplicate 'unsigned'
 #define BYTE unsigned char
              ^~~~~~~~
config.h:18:23: error: two or more data types in declaration specifiers
 #define BYTE unsigned char
                       ^~~~
config.h:15:15: error: duplicate 'unsigned'
 # define WORD unsigned int
               ^~~~~~~~
config.h:14:16: error: duplicate 'unsigned'
 # define DWORD unsigned long
                ^~~~~~~~
In file included from C:/Ruby24-x64/include/ruby-2.4.0/ruby.h:33,
                 from bluecloth.h:14,
                 from bluecloth.c:25:
C:/Ruby24-x64/include/ruby-2.4.0/ruby/ruby.h:631:1: warning: 'const' attribute
on function returning 'void' [-Wattributes]
 CONSTFUNC(void rb_secure_update(VALUE));
 ^~~~~~~~~
In file included from C:/Ruby24-x64/include/ruby-2.4.0/ruby/ruby.h:2012,
                 from C:/Ruby24-x64/include/ruby-2.4.0/ruby.h:33,
                 from bluecloth.h:14,
                 from bluecloth.c:25:
C:/Ruby24-x64/include/ruby-2.4.0/ruby/intern.h:257:1: warning: 'const' attribute

on function returning 'void' [-Wattributes]
 CONSTFUNC(void rb_error_untrusted(VALUE));
 ^~~~~~~~~
C:/Ruby24-x64/include/ruby-2.4.0/ruby/intern.h:259:1: warning: 'const' attribute

on function returning 'void' [-Wattributes]
 CONSTFUNC(void rb_check_trusted(VALUE));
 ^~~~~~~~~
make: *** [Makefile:242: bluecloth.o] Error 1

make failed, exit code 2

Gem files will remain installed in
C:/Ruby24-x64/lib/ruby/gems/2.4.0/gems/bluecloth-2.2.0 for inspection.
Results logged to
C:/Ruby24-x64/lib/ruby/gems/2.4.0/extensions/x64-mingw32/2.4.0/bluecloth-2.2.0/g
em_make.out

An error occurred while installing bluecloth (2.2.0), and Bundler
cannot continue.
Make sure that `gem install bluecloth -v '2.2.0' --source
'https://rubygems.org/'` succeeds before bundling.

In Gemfile:
  koudoku was resolved to 2.0.0, which depends on
    bluecloth

Process finished with exit code 5
```

I'm just checking out Koudoku's demo & readme / quick start guide. While it's great to see that there are built-in forms to collect credit card, I would love to see an _even simpler_ implementation that relies on [Stripe Checkout](https://stripe.com/payments/checkout) (using their modal to collect card details) or [Stripe Elements](https://stripe.com/payments/elements), rather than having a fully custom or Bootstrap form that frankly isn't as nice or trust-enducing as Stripe's own forms.

Has anyone done this already? Sharing an example of this would be highly appreciated.
People frequently ask whether Koudoku is still maintained because `master` hasn't received much attention for a long time. Many people _are_ still actively using Koudoku, but most of my personal efforts with development on it are now limited to keeping it working well in the context of [Bullet Train](https://bullettrain.co/) specifically. This work is much easier for me and much less time consuming because I control so much more of the context of the apps that are built on top of Bullet Train (e.g. Rails version, Devise, CanCanCan, Bootstrap, UI, etc.) It also doesn't hurt that I'm compensated financially by folks who run into issues or need new features (e.g. the support we recently added for Rewardful and Link Mink affiliate programs.)

I've kept many of these updates in a separate branch until now. In the short term, this PR can help people understand which things have changed in the `bullet-train` branch of Koudoku. It's possible that using this branch will help Koudoku work better in modern Rails apps, but I can't be sure because the only modern Rails apps I work on anymore are Bullet Train-based.

The only thing not included in this branch are lots of modifications and customizations made to the `.html.erb` views. All of those are specific to Bullet Train's UI CSS and are only contained in the private Bullet Train repo. I have no idea off the top of my head what state the views in this repository are in, or which version of Bootstrap they use, etc. If someone wants to provide fixing updates for the latest version of Bootstrap, please send a PR!
I'm getting `wrong number of arguments (given <number>, expected 0)` 
from `<%= BlueCloth.new(plan.features.gsub(/\n/, "\n\n")).to_html.gsub(/<(\/?)p>/, '<\1li>').html_safe %>`

`<%= BlueCloth.new("test") %>` is giving the same error.

Rails 5.2.0
Also clones stripe customer ID to subscription owner (Team), too. This keeps backwards compatibility by naming the attribute `Subscription#stripe_subscription_id` rather than repurposing `Subscription#stripe_id` (which is really the stripe customer ID).

I didn't see any tests for this concern so please advise if there's a preferred test approach.

So when i  choose a plan as a user in my project,  stripe registers it and the new subscription is visible in the stripe dashboard. This seem to be working just fine.

However, when i try to edit the plan as the user inside my project (via  ` <%= link_to "Check profile", koudoku.owner_subscriptions_path(@user) %>`), i always get the unauthorized page. 

Association between subscription & user is working, in rails c: 

Subscription.last: 

`=> #<Subscription id: 5, stripe_id: "cus_not_important, plan_id: 1, last_four: "4242", coupon_id: nil, card_type: "undefined", current_price: 20.0, user_id: 6, created_at: "2018-03-10 10:20:20", updated_at: "2018-03-10 10:20:20">`



User.last:

`
=> #<User id: 6, email: "test6@test.com", created_at: "2018-03-10 10:19:32", updated_at: "2018-03-10 10:19:33", name: "Test8", provider: nil, uid: nil, image: nil, description: nil, plan_id: nil>
`

So this seems to be working just fine. 

Im using devise and when i installed koudoku i used: 

` rails g koudoku:install user`


Inside Koudoku.rb:
```

Koudoku.setup do |config|

  
  config.subscriptions_owned_by = :user
  config.stripe_publishable_key = ENV[#]
  config.stripe_secret_key = ENV[#]

  Stripe.api_version = '2017-08-15' # Making sure the API version used is compatible.
  # config.prorate = false # Default is true, set to false to disable prorating subscriptions
  # config.free_trial_length = 30

  # Specify layout you want to use for the subscription pages, default is application
  config.layout = 'application'

  # you can subscribe to additional webhooks here
  # we use stripe_event under the hood and you can subscribe using the
  # stripe_event syntax on the config object:
  # config.subscribe 'charge.failed', Koudoku::ChargeFailed

end
```


Any ideas whats going on? 


//EDIT:

When i add 

```

<h1><%= t('koudoku.failure.unauthorized') %></h1>



<%= @owner.name %>

```


to the unauthorized.html.erb file, the owner names is displayed correctly. If this may help. 
fixes #186