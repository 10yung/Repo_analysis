Updates [org.scala-sbt:sbt](https://github.com/sbt/sbt) [from 1.3.6 to 1.3.7](https://github.com/sbt/sbt/compare/v1.3.6...v1.3.7).
[Release Notes/Changelog](https://github.com/sbt/sbt/releases/tag/v1.3.7)

I'll automatically update this PR to resolve conflicts as long as you don't change it yourself.

If you'd like to skip this version, you can just close this PR. If you have any feedback, just mention me in the comments below.

Have a fantastic day writing Scala!

<details>
<summary>Ignore future updates</summary>

Add this to your `.scala-steward.conf` file to ignore future updates of this dependency:
```
updates.ignore = [ { groupId = "org.scala-sbt", artifactId = "sbt" } ]
```
</details>

labels: library-update, semver-patch
I cloned the repository and checked out tag "5.0.0". I have no local changes. None of the sample work.

```
bash-3.2$ uname -a
Darwin MBP2012.local 18.7.0 Darwin Kernel Version 18.7.0: Thu Jun 20 18:42:21 PDT 2019; root:xnu-4903.270.47~4/RELEASE_X86_64 x86_64
```

basic-sample fails on the first request with
```
[basic-sample] $ run

--- (Running the application, auto-reloading is enabled) ---

[info] p.c.s.AkkaHttpServer - Listening for HTTP on /0:0:0:0:0:0:0:0:9000

(Server started, use Enter to stop and go back to the console...)

[error] p.a.h.DefaultHttpErrorHandler -

! @7eeoml55h - Internal server error, for (GET) [/] ->

play.api.UnexpectedException: Unexpected exception[RuntimeException: No application loader is configured. Please configure an application loader either using the play.application.loader configuration property, or by depending on a module that configures one. You can add the Guice support module by adding "libraryDependencies += guice" to your build.sbt.]
	at play.core.server.DevServerStart$$anon$1.reload(DevServerStart.scala:210)
	at play.core.server.DevServerStart$$anon$1.get(DevServerStart.scala:141)
	at play.core.server.AkkaHttpServer.handleRequest(AkkaHttpServer.scala:296)
	at play.core.server.AkkaHttpServer.$anonfun$createServerBinding$1(AkkaHttpServer.scala:186)
	at akka.stream.impl.fusing.MapAsync$$anon$30.onPush(Ops.scala:1261)
	at akka.stream.impl.fusing.GraphInterpreter.processPush(GraphInterpreter.scala:541)
	at akka.stream.impl.fusing.GraphInterpreter.execute(GraphInterpreter.scala:423)
	at akka.stream.impl.fusing.GraphInterpreterShell.runBatch(ActorGraphInterpreter.scala:624)
	at akka.stream.impl.fusing.GraphInterpreterShell$AsyncInput.execute(ActorGraphInterpreter.scala:501)
	at akka.stream.impl.fusing.GraphInterpreterShell.processEvent(ActorGraphInterpreter.scala:599)
Caused by: java.lang.RuntimeException: No application loader is configured. Please configure an application loader either using the play.application.loader configuration property, or by depending on a module that configures one. You can add the Guice support module by adding "libraryDependencies += guice" to your build.sbt.
	at scala.sys.package$.error(package.scala:27)
	at play.api.ApplicationLoader$.play$api$ApplicationLoader$$loaderNotFound(ApplicationLoader.scala:51)
	at play.api.ApplicationLoader$.apply(ApplicationLoader.scala:159)
	at play.core.server.DevServerStart$$anon$1.$anonfun$reload$3(DevServerStart.scala:188)
	at play.utils.Threads$.withContextClassLoader(Threads.scala:21)
	at play.core.server.DevServerStart$$anon$1.reload(DevServerStart.scala:181)
	at play.core.server.DevServerStart$$anon$1.get(DevServerStart.scala:141)
	at play.core.server.AkkaHttpServer.handleRequest(AkkaHttpServer.scala:296)
	at play.core.server.AkkaHttpServer.$anonfun$createServerBinding$1(AkkaHttpServer.scala:186)
	at akka.stream.impl.fusing.MapAsync$$anon$30.onPush(Ops.scala:1261)
```


computer-database-sample fails to apply the evolution. After clicking the "Apply this script now" button I end up at the same place.
```
[computer-database-sample] $ run

--- (Running the application, auto-reloading is enabled) ---

[info] p.c.s.AkkaHttpServer - Listening for HTTP on /0:0:0:0:0:0:0:0:9000

(Server started, use Enter to stop and go back to the console...)

[error] p.a.h.DefaultHttpErrorHandler -

! @7eeompa5i - Internal server error, for (GET) [/] ->

play.api.db.evolutions.InvalidDatabaseRevision: Database 'default' needs evolution![An SQL script need to be run on your database.]
	at play.api.db.evolutions.EvolutionsWebCommands.$anonfun$handleWebCommand$5(ApplicationEvolutions.scala:523)
	at play.api.db.evolutions.EvolutionsWebCommands.$anonfun$handleWebCommand$5$adapted(ApplicationEvolutions.scala:516)
	at play.api.db.evolutions.ApplicationEvolutions$.$anonfun$runEvolutions$1(ApplicationEvolutions.scala:208)
	at play.api.db.evolutions.ApplicationEvolutions$.withLock(ApplicationEvolutions.scala:229)
	at play.api.db.evolutions.ApplicationEvolutions$.runEvolutions(ApplicationEvolutions.scala:199)
	at play.api.db.evolutions.EvolutionsWebCommands.$anonfun$handleWebCommand$4(ApplicationEvolutions.scala:516)
	at play.api.db.evolutions.EvolutionsWebCommands.$anonfun$handleWebCommand$4$adapted(ApplicationEvolutions.scala:511)
	at scala.collection.immutable.List.foreach(List.scala:305)
	at play.api.db.evolutions.EvolutionsWebCommands.handleWebCommand(ApplicationEvolutions.scala:511)
	at play.core.DefaultWebCommands.$anonfun$handleWebCommand$1(WebCommands.scala:41)

--- (RELOAD) ---

[error] p.a.h.DefaultHttpErrorHandler -

! @7eeompnmp - Internal server error, for (GET) [/] ->

play.api.db.evolutions.InvalidDatabaseRevision: Database 'default' needs evolution![An SQL script need to be run on your database.]
	at play.api.db.evolutions.EvolutionsWebCommands.$anonfun$handleWebCommand$5(ApplicationEvolutions.scala:523)
	at play.api.db.evolutions.EvolutionsWebCommands.$anonfun$handleWebCommand$5$adapted(ApplicationEvolutions.scala:516)
	at play.api.db.evolutions.ApplicationEvolutions$.$anonfun$runEvolutions$1(ApplicationEvolutions.scala:208)
	at play.api.db.evolutions.ApplicationEvolutions$.withLock(ApplicationEvolutions.scala:229)
	at play.api.db.evolutions.ApplicationEvolutions$.runEvolutions(ApplicationEvolutions.scala:199)
	at play.api.db.evolutions.EvolutionsWebCommands.$anonfun$handleWebCommand$4(ApplicationEvolutions.scala:516)
	at play.api.db.evolutions.EvolutionsWebCommands.$anonfun$handleWebCommand$4$adapted(ApplicationEvolutions.scala:511)
	at scala.collection.immutable.List.foreach(List.scala:305)
	at play.api.db.evolutions.EvolutionsWebCommands.handleWebCommand(ApplicationEvolutions.scala:511)
	at play.core.DefaultWebCommands.$anonfun$handleWebCommand$1(WebCommands.scala:41)
```


streams-sample fails with 
```
[computer-database-sample] $ project streams-sample
[info] Set current project to iteratee-sample (in build file:/Users/kostar/Downloads/play-slick/)
[iteratee-sample] $ run

--- (Running the application, auto-reloading is enabled) ---

[info] p.c.s.AkkaHttpServer - Listening for HTTP on /0:0:0:0:0:0:0:0:9000

(Server started, use Enter to stop and go back to the console...)

[debug] s.j.J.statement - Preparing statement: select count(1) from "RECORDS"
[error] p.a.h.DefaultHttpErrorHandler -

! @7eeon438f - Internal server error, for (GET) [/] ->

play.api.UnexpectedException: Unexpected exception[CreationException: Unable to create injector, see the following errors:

1) Error injecting constructor, org.h2.jdbc.JdbcSQLSyntaxErrorException: Table "RECORDS" not found; SQL statement:
select count(1) from "RECORDS" [42102-200]
  at modules.InitialData.<init>(InitialData.scala:20)
  at modules.InitialDataModule.configure(InitialData.scala:15) (via modules: com.google.inject.util.Modules$OverrideModule -> modules.InitialDataModule)
  while locating modules.InitialData

1 error]
	at play.core.server.DevServerStart$$anon$1.reload(DevServerStart.scala:210)
	at play.core.server.DevServerStart$$anon$1.get(DevServerStart.scala:141)
	at play.core.server.AkkaHttpServer.handleRequest(AkkaHttpServer.scala:296)
	at play.core.server.AkkaHttpServer.$anonfun$createServerBinding$1(AkkaHttpServer.scala:186)
	at akka.stream.impl.fusing.MapAsync$$anon$30.onPush(Ops.scala:1261)
	at akka.stream.impl.fusing.GraphInterpreter.processPush(GraphInterpreter.scala:541)
	at akka.stream.impl.fusing.GraphInterpreter.execute(GraphInterpreter.scala:423)
	at akka.stream.impl.fusing.GraphInterpreterShell.runBatch(ActorGraphInterpreter.scala:624)
	at akka.stream.impl.fusing.GraphInterpreterShell$AsyncInput.execute(ActorGraphInterpreter.scala:501)
	at akka.stream.impl.fusing.GraphInterpreterShell.processEvent(ActorGraphInterpreter.scala:599)
Caused by: com.google.inject.CreationException: Unable to create injector, see the following errors:

1) Error injecting constructor, org.h2.jdbc.JdbcSQLSyntaxErrorException: Table "RECORDS" not found; SQL statement:
select count(1) from "RECORDS" [42102-200]
  at modules.InitialData.<init>(InitialData.scala:20)
  at modules.InitialDataModule.configure(InitialData.scala:15) (via modules: com.google.inject.util.Modules$OverrideModule -> modules.InitialDataModule)
  while locating modules.InitialData

1 error
	at com.google.inject.internal.Errors.throwCreationExceptionIfErrorsExist(Errors.java:543)
	at com.google.inject.internal.InternalInjectorCreator.injectDynamically(InternalInjectorCreator.java:186)
	at com.google.inject.internal.InternalInjectorCreator.build(InternalInjectorCreator.java:109)
	at com.google.inject.Guice.createInjector(Guice.java:87)
	at com.google.inject.Guice.createInjector(Guice.java:78)
	at play.api.inject.guice.GuiceBuilder.injector(GuiceInjectorBuilder.scala:200)
	at play.api.inject.guice.GuiceApplicationBuilder.build(GuiceApplicationBuilder.scala:155)
	at play.api.inject.guice.GuiceApplicationLoader.load(GuiceApplicationLoader.scala:21)
	at play.core.server.DevServerStart$$anon$1.$anonfun$reload$3(DevServerStart.scala:189)
	at play.utils.Threads$.withContextClassLoader(Threads.scala:21)
Caused by: org.h2.jdbc.JdbcSQLSyntaxErrorException: Table "RECORDS" not found; SQL statement:
select count(1) from "RECORDS" [42102-200]
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:453)
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:429)
	at org.h2.message.DbException.get(DbException.java:205)
	at org.h2.message.DbException.get(DbException.java:181)
	at org.h2.command.Parser.readTableOrView(Parser.java:7628)
	at org.h2.command.Parser.readTableFilter(Parser.java:1970)
	at org.h2.command.Parser.parseSelectFromPart(Parser.java:2827)
	at org.h2.command.Parser.parseSelect(Parser.java:2959)
	at org.h2.command.Parser.parseQuerySub(Parser.java:2817)
	at org.h2.command.Parser.parseSelectUnion(Parser.java:2649)
```
Here is an example where Cyrillic "C" is used instead of Latin in `СREATE` keyword 
```sql
СREATE TABLE table1(col1 VARCHAR(64))
```

No error is thrown which makes it difficult to find out why migration script is not applied.

Slick version is `2.0.0`
When i try to refresh my application running on sbt, it seems like the connection pool is not releasing connections.

Here is the error 
```
[debug] com.zaxxer.hikari.pool.HikariPool - Cannot acquire connection from data source
org.postgresql.util.PSQLException: The connection attempt failed.
	at org.postgresql.core.v3.ConnectionFactoryImpl.openConnectionImpl(ConnectionFactoryImpl.java:292)
	at org.postgresql.core.ConnectionFactory.openConnection(ConnectionFactory.java:49)
	at org.postgresql.jdbc.PgConnection.<init>(PgConnection.java:195)
	at org.postgresql.Driver.makeConnection(Driver.java:454)
	at org.postgresql.Driver.connect(Driver.java:256)
	at com.zaxxer.hikari.util.DriverDataSource.getConnection(DriverDataSource.java:117)
	at com.zaxxer.hikari.util.DriverDataSource.getConnection(DriverDataSource.java:123)
	at com.zaxxer.hikari.pool.PoolBase.newConnection(PoolBase.java:365)
	at com.zaxxer.hikari.pool.PoolBase.newPoolEntry(PoolBase.java:194)
	at com.zaxxer.hikari.pool.HikariPool.createPoolEntry(HikariPool.java:460)
Caused by: java.net.SocketException: Bad file descriptor (Write failed)
	at java.net.SocketOutputStream.socketWrite0(Native Method)
	at java.net.SocketOutputStream.socketWrite(SocketOutputStream.java:111)
	at java.net.SocketOutputStream.write(SocketOutputStream.java:155)
	at java.io.BufferedOutputStream.flushBuffer(BufferedOutputStream.java:82)
	at java.io.BufferedOutputStream.flush(BufferedOutputStream.java:140)
	at org.postgresql.core.PGStream.flush(PGStream.java:527)
	at org.postgresql.core.v3.ConnectionFactoryImpl.sendStartupPacket(ConnectionFactoryImpl.java:480)
	at org.postgresql.core.v3.ConnectionFactoryImpl.tryConnect(ConnectionFactoryImpl.java:138)
	at org.postgresql.core.v3.ConnectionFactoryImpl.openConnectionImpl(ConnectionFactoryImpl.java:192)
	at org.postgresql.core.ConnectionFactory.openConnection(ConnectionFactory.java:49)
```

The config we use is this : 

```slick.dbs.default {
  profile = "utils.MyPostgresProfile$"
  db {
    url = "jdbc:postgresql://localhost:5432/<dbname>?currentSchema=app&loggerLevel=TRACE&loggerFile=./log_pgsql.log&connectTimeout=3&socketTimeout=5&tcpKeepAlive=true&sslmode=disable&ssl=false&"
    properties.driver = "org.postgresql.Driver"
    user = <myuser>
    password = <mypassword>
    poolName = <mypoolname>
    registerMbeans = false
    connectionTimeout = 10s
    connectionInitSql = "SELECT 1"
    connectionTestQuery = "SELECT 1"
    validationTimeout = 5000
    idleTimeout = 300000
    maxLifetime = 50000
    minimumIdle = 10
    leakDetectionThreshold=2000
    maximumPoolSize = 25
    initializationFailTimeout = 0
  }
}
```

which is then taken under by Hikari and it looks like this 
```
[warn] com.zaxxer.hikari.HikariConfig - The initializationFailFast propery is deprecated, see initializationFailTimeout
[warn] com.zaxxer.hikari.HikariConfig - app - idleTimeout is close to or more than maxLifetime, disabling it.
[debug] com.zaxxer.hikari.HikariConfig - app - configuration:
[debug] com.zaxxer.hikari.HikariConfig - allowPoolSuspension.............false
[debug] com.zaxxer.hikari.HikariConfig - autoCommit......................true
[debug] com.zaxxer.hikari.HikariConfig - catalog.........................none
[debug] com.zaxxer.hikari.HikariConfig - connectionInitSql..............."SELECT 1"
[debug] com.zaxxer.hikari.HikariConfig - connectionTestQuery............."SELECT 1"
[debug] com.zaxxer.hikari.HikariConfig - connectionTimeout...............10000
[debug] com.zaxxer.hikari.HikariConfig - dataSource......................none
[debug] com.zaxxer.hikari.HikariConfig - dataSourceClassName.............none
[debug] com.zaxxer.hikari.HikariConfig - dataSourceJNDI..................none
[debug] com.zaxxer.hikari.HikariConfig - dataSourceProperties............{password=<masked>, driver=org.postgresql.Driver}
[debug] com.zaxxer.hikari.HikariConfig - driverClassName.................none
[debug] com.zaxxer.hikari.HikariConfig - healthCheckProperties...........{}
[debug] com.zaxxer.hikari.HikariConfig - healthCheckRegistry.............none
[debug] com.zaxxer.hikari.HikariConfig - idleTimeout.....................0
[debug] com.zaxxer.hikari.HikariConfig - initializationFailFast..........false
[debug] com.zaxxer.hikari.HikariConfig - initializationFailTimeout.......-1
[debug] com.zaxxer.hikari.HikariConfig - isolateInternalQueries..........false
[debug] com.zaxxer.hikari.HikariConfig - jdbc4ConnectionTest.............false
[debug] com.zaxxer.hikari.HikariConfig - jdbcUrl.........................jdbc:postgresql://localhost:5432/<mydbname>?currentSchema=app&loggerLevel=TRACE&loggerFile=./log_pgsql.log&connectTimeout=3&socketTimeout=5&tcpKeepAlive=true&sslmode=disable&ssl=false&
[debug] com.zaxxer.hikari.HikariConfig - leakDetectionThreshold..........2000
[debug] com.zaxxer.hikari.HikariConfig - maxLifetime.....................50000
[debug] com.zaxxer.hikari.HikariConfig - maximumPoolSize.................100
[debug] com.zaxxer.hikari.HikariConfig - metricRegistry..................none
[debug] com.zaxxer.hikari.HikariConfig - metricsTrackerFactory...........none
[debug] com.zaxxer.hikari.HikariConfig - minimumIdle.....................20
[debug] com.zaxxer.hikari.HikariConfig - password........................<masked>
[debug] com.zaxxer.hikari.HikariConfig - poolName........................<mypoolname>
[debug] com.zaxxer.hikari.HikariConfig - readOnly........................false
[debug] com.zaxxer.hikari.HikariConfig - registerMbeans..................false
[debug] com.zaxxer.hikari.HikariConfig - scheduledExecutor...............none
[debug] com.zaxxer.hikari.HikariConfig - scheduledExecutorService........internal
[debug] com.zaxxer.hikari.HikariConfig - schema..........................none
[debug] com.zaxxer.hikari.HikariConfig - threadFactory...................internal
[debug] com.zaxxer.hikari.HikariConfig - transactionIsolation............default
[debug] com.zaxxer.hikari.HikariConfig - username........................<myuser>
[debug] com.zaxxer.hikari.HikariConfig - validationTimeout...............5000
```

And its always, always happening after 5 refresh. No matter what I set in maxConnections, numThreads, etc etc etc.

Any idea ?!


Currently on play 2.6 with play-slick 3.0.1, I’ve been running into an issue during load testing where the app is consuming tons of db connections from the pool and not returning them. I have narrowed it down to the use of `transactionally`, but have still not been able to pin point the exact cause.

As proof of this, when I increase the db connection pool to 340 (our max_connections is 350), I can hit up to 28k rpm on one server. But with a pool of only 100, it almost instantly crashes under the same load with the connections timing out waiting for a connection from the pool. I can confirm that the database transactions are happening rapidly. When I enable hikari connection leak detection, I can see that some connections are taking > 60s to be returned, yet the database is showing nothing over 5 seconds. From everything I’ve read, we should be able to configure this to run with a much smaller pool. When I remove the use of `transactionally`, the behaviour of the pool returns to normal.

Here are some logs:
with pool of 100 and transactionally enabled

> com.zaxxer.hikari.pool.HikariPool - db - Timeout failure stats (total=100, active=100, idle=0, waiting=33)

with pool of 340 and transactionally enabled

> com.zaxxer.hikari.pool.HikariPool - db - After cleanup stats (total=340, active=244, idle=96, waiting=0)


Some errors with pool of 100 and transactionally enabled:

> java.sql.SQLTransientConnectionException: db - Connection is not available, request timed out after 10000ms.
> at com.zaxxer.hikari.pool.HikariPool.createTimeoutException(HikariPool.java:548)
> at com.zaxxer.hikari.pool.HikariPool.getConnection(HikariPool.java:186)
> at com.zaxxer.hikari.pool.HikariPool.getConnection(HikariPool.java:145)
> at com.zaxxer.hikari.HikariDataSource.getConnection(HikariDataSource.java:83)
> at slick.jdbc.hikaricp.HikariCPJdbcDataSource.createConnection(HikariCPJdbcDataSource.scala:14)
> at slick.jdbc.JdbcBackend$BaseSession.(JdbcBackend.scala:438)
> at slick.jdbc.JdbcBackend$DatabaseDef.createSession(JdbcBackend.scala:46)
> at slick.jdbc.JdbcBackend$DatabaseDef.createSession(JdbcBackend.scala:37)
> at slick.basic.BasicBackend$DatabaseDef.acquireSession(BasicBackend.scala:216)
> at slick.basic.BasicBackend$DatabaseDef.acquireSession$(BasicBackend.scala:215)

NewRelic is also showing these requests spending the majority of their time waiting on `com.zaxxer.hikari.HikariDataSource.getConnection()`

Here is an example of the code that is causing the issue:
```
def _insertIfNotExists(partner: Partner, accountId: String): DBIO[Account] = {
    accounts
      .filter(_.account_id === accountId)
      .filter(_.partner === partner)
      .result.headOption.flatMap {
      case Some(account) => DBIO.successful(account) // no-op
      case _ => {
        accounts.returning(accounts.map(_.id)).into((account, id) => account.copy(id = Some(id))) += Account(None, partner, accountId)
      }
    }
  }

  def createWithDeviceIfNotExists(partner: Partner, accountId: String, deviceId: String): Future[Device] = {
    db.run(
      _insertIfNotExists(partner, accountId).flatMap { account =>
        devices._insertIfNotExists(deviceId, account.id.get) // this looks exactly like the _insertIfNotExists above
      }.transactionally
    )
  }
```

I am unable to reproduce this at low load or locally by manually causing the queries to fail. But something about using `transactionally` here is causing connections to not be returned to the pool for a very long time. There are reports that `Previously reported leaked connection com.mysql.jdbc.JDBC4Connection@795acb1e was returned to the pool (unleaked)` but often after several minutes.



Evolutions fail without error when using special characters like ö. It just keeps asking to run the evolution. I have included a reproduction script below.

Now I've tried to change the character set of the play_evolutions table to utf8 but as that doesn't make any difference at all I'm assuming this is due to something in the code somewhere. Furthermore the special character needs to be removed entirely from the script. Commenting out is not enough.

Play version: 2.6.11
Play-slick version: 3.0.2
Mysql-connector-java version: 5.1.44

Reproduction evolution script:

```sql
# --- !Ups
CREATE TABLE whatever (
    text    VARCHAR(255)    NOT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

INSERT INTO whatever (text) VALUES ('ö'); # Remove to succeed
INSERT INTO whatever (text) VALUES ('o');

# --- !Downs
DROP TABLE IF EXISTS whatever;
```


I had a tough time getting the computer database example to run.  I've seen 2 issues about this one here https://github.com/playframework/play-slick/issues/427 and one here https://github.com/playframework/play-slick/issues/374 it would be nice (especially as new comers to Scala and the Play framework) to see working examples in their own project to hack around with and understand.  I've already got a separate computer database example running [here](https://github.com/decapo01/play-slick-computer-database).
This line https://github.com/playframework/play-slick/blob/master/samples/basic/build.sbt#L3 seems to give error when running sample play app. Here's how you can reproduce the error:

```$ git clone git@github.com:playframework/play-slick.git
$ cd basic
$ sbt run
[info] Updated file /tmp/play-slick/samples/basic/project/build.properties: set sbt.version to 1.0.4
/tmp/play-slick/samples/basic/build.sbt:3: error: not found: value PlayKeys
PlayKeys.playOmnidoc := false
^
[error] Type error in expression
Project loading failed: (r)etry, (q)uit, (l)ast, or (i)gnore?`

NB: Offline evolutions are those without a running application.

Currently DefaultSlickApi has two dependencies that are hard to satisfy in a non-application context: `environment: Environment` and `lifecycle: ApplicationLifecycle`.

`environment` is a bogus dependency; it is unused, and should be dropped.

`lifecycle` implements behavior that is pretty easy to ignore if there's no lifecycle - just don't add the stop hooks. This dependency should either be made into a `Option[ApplicationLifecycle]` (don't know if that's doable with generic `javax.inject`) for both DefaultSlickApi and `DatabaseConfigFactory`; or, DefaultSlickApi/DatabaseConfigFactory should extend an OfflineSlickApi does the same thing but without the stop hook. In this case, the user would need some other way to initiate a shutdown.
Hi there I am runing Play 2.6.5 and play-slick 3.0.1. When I run my inetgration tests I am getting the following exception. (Reverting back to 3.0.0 stops it)

```
A needed class was not found. This could be due to an error in your runpath. Missing class: slick/lifted/MappedProjection$
java.lang.NoClassDefFoundError: slick/lifted/MappedProjection$
	at daos.PendingInviteDao$PendingInviteTable.$times(PendingInviteDao.scala:63)
	at slick.lifted.AbstractTable.toNode(AbstractTable.scala:43)
	at slick.lifted.RepShape$.toNode(Shape.scala:114)
	at slick.lifted.RepShape$.toNode(Shape.scala:106)
	at slick.lifted.ShapedValue.toNode(Shape.scala:276)
	at slick.lifted.TableQuery.toNode$lzycompute(Query.scala:301)
	at slick.lifted.TableQuery.toNode(Query.scala:301)
	at slick.jdbc.JdbcProfile$API$class.queryDeleteActionExtensionMethods(JdbcProfile.scala:54)
	at slick.jdbc.JdbcProfile$$anon$1.queryDeleteActionExtensionMethods(JdbcProfile.scala:67)
	at daos.PendingInviteDao.deleteAll(PendingInviteDao.scala:21)
	at helper.IntegrationHelperWithDB$$anonfun$1.apply$mcV$sp(IntegrationHelper.scala:58)
	at helper.IntegrationHelperWithDB$$anonfun$1.apply(IntegrationHelper.scala:48)
	at helper.IntegrationHelperWithDB$$anonfun$1.apply(IntegrationHelper.scala:48)
	at org.scalatest.BeforeAndAfter$class.runTest(BeforeAndAfter.scala:195)
	at services.UserServiceSpec.runTest(UserServiceSpec.scala:14)
	at org.scalatest.WordSpecLike$$anonfun$runTests$1.apply(WordSpecLike.scala:1021)
	at org.scalatest.WordSpecLike$$anonfun$runTests$1.apply(WordSpecLike.scala:1021)
	at org.scalatest.SuperEngine$$anonfun$traverseSubNodes$1$1.apply(Engine.scala:413)
	at org.scalatest.SuperEngine$$anonfun$traverseSubNodes$1$1.apply(Engine.scala:401)
	at scala.collection.immutable.List.foreach(List.scala:381)
	at org.scalatest.SuperEngine.traverseSubNodes$1(Engine.scala:401)
	at org.scalatest.SuperEngine.org$scalatest$SuperEngine$$runTestsInBranch(Engine.scala:390)
	at org.scalatest.SuperEngine$$anonfun$traverseSubNodes$1$1.apply(Engine.scala:427)
	at org.scalatest.SuperEngine$$anonfun$traverseSubNodes$1$1.apply(Engine.scala:401)
	at scala.collection.immutable.List.foreach(List.scala:381)
	at org.scalatest.SuperEngine.traverseSubNodes$1(Engine.scala:401)
	at org.scalatest.SuperEngine.org$scalatest$SuperEngine$$runTestsInBranch(Engine.scala:396)
	at org.scalatest.SuperEngine.runTestsImpl(Engine.scala:483)
	at org.scalatest.WordSpecLike$class.runTests(WordSpecLike.scala:1021)
	at org.scalatest.WordSpec.runTests(WordSpec.scala:1881)
	at org.scalatest.Suite$class.run(Suite.scala:1424)
	at org.scalatest.WordSpec.org$scalatest$WordSpecLike$$super$run(WordSpec.scala:1881)
	at org.scalatest.WordSpecLike$$anonfun$run$1.apply(WordSpecLike.scala:1067)
	at org.scalatest.WordSpecLike$$anonfun$run$1.apply(WordSpecLike.scala:1067)
	at org.scalatest.SuperEngine.runImpl(Engine.scala:545)
	at org.scalatest.WordSpecLike$class.run(WordSpecLike.scala:1067)
	at services.UserServiceSpec.org$scalatestplus$play$OneAppPerSuite$$super$run(UserServiceSpec.scala:14)
	at org.scalatestplus.play.OneAppPerSuite$class.run(OneAppPerSuite.scala:143)
	at services.UserServiceSpec.org$scalatest$BeforeAndAfter$$super$run(UserServiceSpec.scala:14)
	at org.scalatest.BeforeAndAfter$class.run(BeforeAndAfter.scala:241)
	at services.UserServiceSpec.run(UserServiceSpec.scala:14)
	at org.scalatest.tools.SuiteRunner.run(SuiteRunner.scala:55)
	at org.scalatest.tools.Runner$$anonfun$doRunRunRunDaDoRunRun$3.apply(Runner.scala:2563)
	at org.scalatest.tools.Runner$$anonfun$doRunRunRunDaDoRunRun$3.apply(Runner.scala:2557)
	at scala.collection.immutable.List.foreach(List.scala:381)
	at org.scalatest.tools.Runner$.doRunRunRunDaDoRunRun(Runner.scala:2557)
	at org.scalatest.tools.Runner$$anonfun$runOptionallyWithPassFailReporter$2.apply(Runner.scala:1044)
	at org.scalatest.tools.Runner$$anonfun$runOptionallyWithPassFailReporter$2.apply(Runner.scala:1043)
	at org.scalatest.tools.Runner$.withClassLoaderAndDispatchReporter(Runner.scala:2722)
	at org.scalatest.tools.Runner$.runOptionallyWithPassFailReporter(Runner.scala:1043)
	at org.scalatest.tools.Runner$.run(Runner.scala:883)
	at org.scalatest.tools.Runner.run(Runner.scala)
	at org.jetbrains.plugins.scala.testingSupport.scalaTest.ScalaTestRunner.runScalaTest2(ScalaTestRunner.java:138)
	at org.jetbrains.plugins.scala.testingSupport.scalaTest.ScalaTestRunner.main(ScalaTestRunner.java:28)
Caused by: java.lang.ClassNotFoundException: slick.lifted.MappedProjection$
	at java.net.URLClassLoader.findClass(URLClassLoader.java:381)
	at java.lang.ClassLoader.loadClass(ClassLoader.java:424)
	at sun.misc.Launcher$AppClassLoader.loadClass(Launcher.java:335)
	at java.lang.ClassLoader.loadClass(ClassLoader.java:357)
	... 54 more
```


And line 63 that is referencing in the exception is:
```scala
 def * = (id,email,inviteToken,userId, createdAt) <> (PendingInvite.tupled, PendingInvite.unapply _)
```