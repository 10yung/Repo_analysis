Since Blessed isn't been maintain can this be used with neo-blessed?
Why does canvas compute its size in this way, quadrupling height and doubling width and subtracting... 12?

```
Canvas.prototype.calcSize = function() {
  this.canvasSize = {width: this.width*2-12, height: this.height*4};
};
```

Before this, `options.file` had to be a `String`, `Buffer`, or `URL` (though only a URL on the local filesystem) as it was passed directly to `createReadStream`. I added in a duck typing to only create a read stream if it is not already a stream.

This feature allows for downloading files from a remote URL and passing the readable stream to the picture widget instead of actually downloading a file to some tmpfs location. The only other way I could think of doing this without downloading the file to the filesystem was to convert the fetched file to base64 and use the `options.base64` option picture supports. But this is much more convenient and more efficient to boot.
Hi, thx a lot for the project, is there any documentation related to syntax of the logger (bold, colors etc)?
As the title says, the `Grid` is always created using the 100% of the screen size.

Sometimes we could want more complex layout where some part of the screen is fixed (let's say a navigation bar of always 3 columns height x 100% width in the top of the screen, and the rest of the screen to be filled with the Grid.

The proposal is for the `Grid` to accept position and size parameters like the basics widgets in `blessed`. This would allow the kind of layouts as explained before.

**Note**:
The TypeScript interface for `GridOptions` has already `top`, `left`, `right`, `bottom` defined as optional `TPosition`s but they are not read from the constructor.
`Grid` is meant to be used with number of columns, which means percentage of the width/height of the screen.

This means the real size of a grid cell is not available (which is ok for responsive designs).
But when creating a `Table`, `columnsWidth` is required to be specified in absolute values, which makes no sense if the width of the table inside a grid is specified in screen percentage.

This issue is to allow `columnsWidth` to accept relative values like
```ts
const table = grid.set(0, 0, 1, 1, contrib.table, { columnsWidth: ['20%', '50%', '30%'] });
```
Typescript definitions of `columnWidth` is written as an optional `number[]`, but if you don't specify this parameter it will throw an error:

> Error: A table must get columnWidth as a property. Please refer to the README.
I have a lot of bars in the Stacked bar graph, but they are hidden by borders. Is it possible to scroll the stacked bar horizontally to the left and to the right? 

Thanks in advance. 
![image (1)](https://user-images.githubusercontent.com/51053878/62615810-5055ed00-b90e-11e9-89ff-af4e09823140.png)


Is there a possibility to update data in  the tree widget and not to setData every time? When there is data upcoming, I have to update my tree. Right now I am updating my tree using the function setData with the interval. Using this approach, I have problem with the tree. If I was looking at the node extension and the interval ended, tree closed the node extension. So I need to look for this node and open it again.

I'm trying to set the Carousel layout to the lower-half of the screen to toggle between a few sub-views, and another widget on the top.  The carousel example includes a nested grid, but I'm not seeing a way to reverse that and place the Carousel inside a Grid layout.  

How can I achieve this behavior?  

Thanks