When running some legacy code with RSpec, I noticed that sometimes the option provided is called `"fetch"` instead of `:fetch`. This PR fixes the issue.
First creating the instance, then applying the parameters allows us to work around a quirk in `active_record` where the relations aren't established on the object until after the parameters are applied. This means if any of our attribute setters reference the relation, they will fail if we don't seperate these steps.

Points to consider:
- The `attributes` method may not exist on non-active_record exposures. Are we assuming too much?
- In your feature spec file, the `BirdsController` isn't thrown away between each test, so redefining something like `expose :bird` can break other tests in a non-deterministic way (due to test ordering). It hasn't been exposed yet because you don't redefine any exposures in your tests, but just wanted to give a heads-up as I ran into this when trying to redefine `:bird`. A seperate controller class per test would probably work best to avoid this problem.
- I had to adjust a lot of controller tests to cope with the new expectation that we'll always call `new` without arguments, and then subsequently call `attributes=`.

Fixes #191
What would you think of separating these two steps?

https://github.com/hashrocket/decent_exposure/blob/master/lib/decent_exposure/behavior.rb#L64

So instead:

```
def build(params, scope)
  instance = scope.new
  instance.attribiutes = params

  instance
end
```

The reason is subtle, but the build association is not accessible until after the object has been initialised, so if something wants access to the association in any of the attribute assignment methods it won't have it yet.

In my specific case, I have a Paperclip processor that needs something from the instance's associated parent object, and Paperclip processors do all their work when the parameter is applied rather than waiting until the instance is saved, and thus because the association isn't available yet, it all blows up.

The above code is basically functionally identical to the existing code except that it allows the instance to initialise (and assign its parent association), then assigns the attributes after that.
This is the same underlying problem as the #183, but I don't think the model can always reliably be inferred from scope, so I didn't want to vote it for fear it might be further dismissed, even if the underlying issue is valid and solvable.

It is possible to specify a `has_many` with a `class_name` on a parent class, which is necessary when the name of the resulting accessor does not automatically map to the correct class name for the model.

As such, it seems decent_exposure should allow `parent` and `model` to both be specified. When the above configuration is used with the current code, the `parent` short-cut cannot be used (even though it would seem natural), because the `model` method in `behavior.rb` fails to automatically determine the correct model name.

Raise `ArgumentError` when exposing an attribute that will overwrite a helper defined by `ActionView`.

This PR will prevent `expose :tag` from silently overwriting the `tag` helper defined by `ActionView::Helpers::TagHelper `.

See https://github.com/hashrocket/decent_exposure/issues/180.
Currently if I have:

```
expose :thing, parent: :current_user
# equivalent to:
expose :thing, scope: ->{ current_user.things }
```

`thing` needs to have the model class `Thing` or things blow up. We can't use the `:model` configuration with `:parent` because apparently that doesn't make sense so we're forced to use the more verbose `:scope` method instead in order to additionally override the `:model`.

In more complicated systems sometimes the model class name is not the same as the the relationship name. Is it conceivable that we could better infer the model name directly from the scope? Do you think this is a good idea?
The [documentation](https://apidock.com/rails/AbstractController/Base/action_methods/class) for `AbstractController::Base#action_methods` says that it is a "list of method names that should be considered actions" and that [`#hidden_actions`](https://apidock.com/rails/AbstractController/Base/hidden_actions/class) can be used to remove methods that shouldn't be considered actions.

Concrete example:
```ruby
class PrizesController < ApplicationController
  expose :prize

  def new; end

  def create
    if prize.save
      redirect_to admin_dashboards_show_path, notice: t('.success')
    else
      render 'new'
    end
  end

  ...
end
```

```
[2] pry(main)> PrizesController.action_methods
=> #<Set: {"new", "create", "prize", "prize="}>
```

If you guys will have time to review a PR for this, I can start working on it. Just let me know ðŸ™‚  I'm thinking about applying to work with your company and this would be a good chance to get to know each other.
I'm having an incredibly hard time upgrading an app that was using version 2.

Can you add a mode where it raises if expose(:obj) is called without an obj_params method?  Having silent failures is killer.

Obviously it would be better if this was a "compile" time error, although I understand that it would probably be much easier to implement as a run time error.

