I am using the "transform" with this setup

```
[update]
tasks = ["transform", "normalize"]

[update.interfaces]
path = "Wynton/"
defaultToBase = true
ignoreEmptyStrings = true
unstripped = false

[update.code]
codePath = "Wynton/"
localizablePath = "."
defaultToKeys = true
additive = false
unstripped = false

[update.transform]
codePath = "Wynton/"
localizablePath = "Wynton/Localization"
transformer = "swiftgenStructured"
supportedLanguageEnumPath = "Wynton/Localization"
typeName = "BartyCrouch"
translateMethodName = "translate"

[update.normalize]
path = "Wynton/Localization"
sourceLocale = "en"
harmonizeWithSource = true
sortByKeys = false

[lint]
path = "Wynton/Localization"
duplicateKeys = true
emptyValues = true
```

Now when i create new localized text like this 

```
        textView.text = BartyCrouch.translate(key: "something went wront",
                                              translations: [.english: "Something went wrong"],
                                              comment: "Something went wrong message bla bla")
```

Then this value only shows up in the `english` translation. But is it possible to make a default text to all other languages or to use the base langauge (like en here) for all languages. 

For QA its a bit strange if the text is empty and not something obviously wrong. Because if they test the app, then they just dont see a label e.g. and think the screen is fine. But if there would be a default string like `<untranslated>` or just the english translation (e.g. in an chinese app) then they would instantly see that something is buggy/not yet translated.

**Is there a way to set a default string when generating a new entry in the strings files?**
Support strings to ignore in the translation.

Ex: May want to not translate certain substrings in a localization like:

Company Name
Person Name
\(swiftVar), %d, %@, etc...

This could also potentially be accomplished by allowing the developer to extend the before/after parse of the translation. Ex: give a callback function for the string before it is translated for mutation, and/or a callback function for the string after it is translated.

Thanks for any help!!!
I use a Pod called "MapboxGeocoder.swift". When running BartyCrouch this seems to break the "update code" task since extractLocStrings thinks the folder is a file.

```
➜ bartycrouch update
Starting Task 'Update Interfaces' ...
2019-12-30 14:16:44.658: ✅  ./ABC/Base.lproj/SubscriptionViewController.xib:  Successfully updated strings file(s) of Storyboard or XIB file.
Task 'Update Interfaces' took 4.452 seconds.
Starting Task 'Update Code' ...
extractLocStrings: error: failed to read input file /Users/tomislav/Documents/Projects/ABC/ABC-ios/Pods/Target Support Files/MapboxGeocoder.swift
2019-12-30 14:16:46.193: ❌  Could not extract strings from Code in directory '.'.
Task 'Update Code' took 1.438 seconds.
Starting Task 'Normalize' ...
Task 'Normalize' took 0.242 seconds.
```
I have included the below in an Xcode project but it doesnt seem to be making the translate request. I have tested my API secret and that seems to be working fine, does anyone have any experience with the translate request?

[update]
tasks = ["interfaces", "code", "translate"]

[update.translate]
path = "."
secret = "XXX"
sourceLocale = "en"
A lot of custom project setups contain Different targets in root folder. Frameworks, External included subprojects (git submodules) and so on.

With this config all of them are scanned.

```
[update.code]
codePath = "."
```

Instead of adding support for multiple pathes like mentioned here:
[Use multiple `codePath` locations](https://github.com/Flinesoft/BartyCrouch/issues/155 )

I would prefer another approach. The git ignore way.

If one could either add an empty .bc-ignore file to each folder that shouldn't be scanned (recursively) OR add a .bc-ignore file at root level with pathes to be ignored.
Is there any way to set multiple codePath locations? My project structure looks like this:

-/Project
----------/FrameworkA
----------/FrameworkB
----------/App
----------/Pod

I want bartycrouch to update the localization file in `APP` and include the folders `FrameworkA` and `FrameworkB`, but the `Pod` should be ignored. Is this possible? It didn't find a working solution.
Happens every time I build. I have to perform a clean build folder before building in order to run the app. Any Ideas what is causing it? Bartycrouch installed via Homebrew, Xcode 11.1.

/Users/xxxxx/xxxxx/xxxxx/xxxxx/Build/Intermediates/xxxxx.build/Debug-iphoneos/xxxxx.build/Script-61962FBF23631A6400AC3F60.sh: line 7: 34489 Illegal instruction: 4  bartycrouch update -x
/Users/xxxxx/xxxxx/xxxxx/xxxxx/Build/Intermediates/xxxxx.build/Debug-iphoneos/xxxxx.build/Script-61962FBF23631A6400AC3F60.sh: line 7: 34527 Illegal instruction: 4  bartycrouch lint -x
Command PhaseScriptExecution failed with a nonzero exit code

Scrip I'm running in build phases:

```
if which bartycrouch > /dev/null; then
    bartycrouch update -x
    bartycrouch lint -x
else
    echo "warning: BartyCrouch not installed, download it from https://github.com/Flinesoft/BartyCrouch"
fi
```

When there's no comment, extractlocstrings will generate entries like 
`/* No comment provided by engineer. */` all over the place. These comments should be removed by default on normalization. There might even be an option to remove comments alltogether.
I have an app which supports Siri Shortcuts, therefore I have a `.intentdefinition` file. This file is also translated, but it looks like, BartyCrouch ignores this file.
Handling long list of arguments for extractLocStrings by writing them in a arguments plist file. 

This solves errors that causes crash with Exception: 'Couldn't posix_spawn: error 7'.

Fixes Flinesoft/BartyCrouch#92
This PR with minor modifications can also fix Flinesoft/BartyCrouch#99
