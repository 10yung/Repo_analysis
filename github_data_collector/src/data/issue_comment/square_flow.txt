Hello dev:

How to get result in current Screen from previous Screen?  Just like startActivityForResult

@Zhuinden
```
In co.recharge.consumer.debug:1.15.2:96.
* flow.InternalLifecycleIntegration has leaked:
* static FontsContract.sContext
* ↳ DebugConsumerApp.injectedAuthenticatedStuff
* ↳ ConsumerApp$InjectedAuthenticatedStuff.onSignedInHelper
* ↳ OnSignedInHelper.signInHooks
* ↳ array OnSignedIn[].[4]
* ↳ PlaceDirections.placeIDToDirectionsRelays
* ↳ LinkedHashMap.tail
* ↳ LinkedHashMap$LinkedHashMapEntry.value
* ↳ BehaviorRelay.state
* ↳ RelaySubscriptionManager.value
* ↳ RelaySubscriptionManager$State.observers
* ↳ array RelaySubscriptionManager$RelayObserver[].[0]
* ↳ RelaySubscriptionManager$RelayObserver.actual
* ↳ OperatorObserveOn$ObserveOnSubscriber.child
* ↳ OnSubscribeOnAssembly$OnAssemblySubscriber.actual
* ↳ SafeSubscriber.actual
* ↳ ActionSubscriber.onNext
* ↳ WalkingTimeView$setPlace$1.this$0 (anonymous implementation of rx.functions.Action1)
* ↳ WalkingTimeView.!(mContext)!
* ↳ FlowContextWrapper.!(mBase)!
* ↳ MainActivity.mFragments
* ↳ FragmentController.mHost
* ↳ Activity$HostCallbacks.mFragmentManager
* ↳ FragmentManagerImpl.mAdded
* ↳ ArrayList.elementData
* ↳ array Object[].[0]
* ↳ InternalLifecycleIntegration
```

A fun thing I learned today is that Flow uses Fragments for some reason?  I'm looking at the `InternalLifecycleIntegration` code and I'm pretty much baffled by what's going on.  Looks like it attaches a fragment to the Activity in onCreate, but then somehow `FragmentManager` is keeping a reference to it even after the activity has been destroyed?  

LeakCanary 1.6.2, fwiw
Hasn't been a commit or really much activity in some time and it remains in Alpha. 
how to implement BottomNavigationView and view pager ，it must use Fragment， how can I implement it by using flow （Screen）
I'm interested in using Flow in my next app, but I'm concerned that its been in alpha for a long time. Is Flow still under active development? If so, would it be possible to provide a rough ETA for a 1.0 release?

Just bump android plugin and libraries version.
The builder constructor checks that keyChanger is never null, so we don't need a default value.
I try to use RestClient in square flow. This is my step :
```
Example:
1. Main screen call rest api in presenter. And then go to screen 2
2. On screen 2, call goBack. 
```
Why when go back to screen 1, rest api is called? 
How prevent rest client running when goBack?
Why is a view with id `0` a [*View with no id*][2] but a view with id `-1` is treated as View with id?

As far as I can see in the documentation [`View.NO_ID` is `-1`][1]. Even more, reading the source code Android ignores the state of any view with no id:

```java
    protected void dispatchSaveInstanceState(SparseArray<Parcelable> container) {
        if (mID != NO_ID && (mViewFlags & SAVE_DISABLED_MASK) == 0) {
            // stuff
        }
    }
```

I'm not sure if this is a bug or I'm missing something...

 [1]: https://developer.android.com/reference/android/view/View.html#NO_ID
 [2]: https://github.com/square/flow/blob/master/flow/src/main/java/flow/State.java#L74-L81
`1.0.0-alpha3`

1. user taps back button.  we're on the loading screen, so we just pass along the call to `Activity.onBackPressed()`
2. `LoadingScreenView` finishes loading its data, kicks off a call to transition from `LoadingScreen`->`MapScreen`
3. `Activity.onPause` fires
4. `Activity.onDestroy` fires, `KeyManager.tearDown()` is called
5. transition finishes and tries to also tear down the `LoadingScreen` key, crashes

This is the first call to `KeyManager.tearDown`:
```
flow.KeyManager.decrementAndMaybeRemoveKey(KeyManager.java:131)
flow.KeyManager.tearDown(KeyManager.java:97)
flow.InternalLifecycleIntegration.onDestroy(InternalLifecycleIntegration.java:163)
android.app.Fragment.performDestroy(Fragment.java:2587)
android.app.FragmentManagerImpl.moveToState(FragmentManager.java:1121)
android.app.FragmentManagerImpl.moveToState(FragmentManager.java:1171)
android.app.FragmentManagerImpl.moveToState(FragmentManager.java:1153)
android.app.FragmentManagerImpl.dispatchDestroy(FragmentManager.java:2067)
android.app.FragmentController.dispatchDestroy(FragmentController.java:242)
android.app.Activity.performDestroy(Activity.java:6883)
```
And the actual crash:
```
                         E  Caused by: java.lang.NullPointerException: Attempt to read from field 'int flow.KeyManager$ManagedServices.uses' on a null object reference
                         E      at flow.KeyManager.decrementAndMaybeRemoveKey(KeyManager.java:131)
                         E      at flow.KeyManager.tearDown(KeyManager.java:97)
                         E      at flow.Flow$PendingTraversal.onTraversalCompleted(Flow.java:348)
                         E      at co.recharge.consumer.transition.FlowKeyChanger$startTransition$1.onNext(FlowKeyChanger.kt:336)
                         E      at co.recharge.consumer.transition.FlowKeyChanger$startTransition$1.onNext(FlowKeyChanger.kt:333)
                         E      at rx.observers.SafeSubscriber.onNext(SafeSubscriber.java:134)
                         E      at rx.internal.operators.OnSubscribeOnAssembly$OnAssemblySubscriber.onNext(OnSubscribeOnAssembly.java:124)
                         E      at rx.internal.operators.OperatorObserveOn$ObserveOnSubscriber.call(OperatorObserveOn.java:224)
                         E      at rx.android.schedulers.LooperScheduler$ScheduledAction.run(LooperScheduler.java:107)
```
I'm not at all sure what the real fix is here.