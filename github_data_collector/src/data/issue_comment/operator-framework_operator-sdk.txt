## Feature Request

**Is your feature request related to a problem? Please describe.**
This is a followup from https://github.com/operator-framework/operator-sdk/issues/2372 , where that issue was actually quite convenient during development where the reconcile loop stops when Ansible fails unexpectedly.

**Describe the solution you'd like**
It would be nice if the watches.yaml file would let us toggle that behavior, for example by using a `strict` or `any_errors_fatal` attribute. By default this would be false, and when it is true, the reconcile stops on ansible failure.  
The doc/sdk-cli-reference.md has no longer the same purpose since the cli doc are gen automatically now and it is probably outdated. However,

By @joelanford  

> There are some things on the CLI reference that don't exist anywhere else (e.g. the operator-sdk new --type=helm usages.
> 
> We should probably do a scrub and make sure we don't lose helpful info. It probably makes the most sense to move things like that to the actual cobra examples in the cmd subcommand definitions.

This task was raised for we get it done. Please, feel free to collab with. 


## Type of question
Operator-sdk scorecard testing 

## Question
What exactly does this new test actually test with the bundle as I can't seem to get it to fail.  

**What did you do?**
I've tried to force a failure with incorrect data in my package.yaml but the only thing that generates a failure is if I change my version directory to something like 0.0.2.

Here is my bundle structure...
$ tree -L 4
.
├── crds
│   ├── cache.example.com_memcacheds_crd.yaml
│   └── cache.example.com_v1alpha1_memcached_cr.yaml
├── olm-catalog
│   └── memcached-operator
│       ├── 0.0.1
│       │   ├── cache.example.com_memcacheds_crd.yaml
│       │   └── memcached-operator.v0.0.1.clusterserviceversion.yaml
│       └── memcached-operator.package.yaml
├── operator.yaml
├── role.yaml
├── role_binding.yaml
└── service_account.yaml

removed values from memcached-operator.package.yaml 
```
$ cat memcached-operator.package.yaml 
channels:
- currentCSV: 
  name: 
defaultChannel: 
packageName: 
```

Running the following always returns pass 

```
operator-sdk scorecard -b deploy/olm-catalog/ namespace default --selector=test=bundlevalidationtest

INFO[0000] Using config file: /home/jpd/go/src/github.ibm.com/jdockter/operator-sdk-samples/ansible/memcached-repo/stable/memcached-case-bundle/operators/memcached-operator/.osdk-scorecard.yaml 
olm:
        Bundle Validation Test              : pass
        Labels: 
                "test":"bundlevalidationtest"
                "necessity":"required"
                "suite":"olm"
        Log:
                time="2020-01-17T17:03:09-06:00" level=info msg="loading Bundles" dir=deploy/olm-catalog/
time="2020-01-17T17:03:09-06:00" level=info msg=directory dir=deploy/olm-catalog/ file=olm-catalog load=bundles
time="2020-01-17T17:03:09-06:00" level=info msg=directory dir=deploy/olm-catalog/ file=memcached-operator load=bundles
time="2020-01-17T17:03:09-06:00" level=info msg=directory dir=deploy/olm-catalog/ file=0.0.1 load=bundles
time="2020-01-17T17:03:09-06:00" level=info msg="found csv, loading bundle" dir=deploy/olm-catalog/ file=memcached-operator.v0.0.1.clusterserviceversion.yaml load=bundles
time="2020-01-17T17:03:09-06:00" level=info msg="loading bundle file" dir=deploy/olm-catalog/memcached-operator/0.0.1 file=cache.example.com_memcacheds_crd.yaml load=bundle
time="2020-01-17T17:03:09-06:00" level=info msg="loading bundle file" dir=deploy/olm-catalog/memcached-operator/0.0.1 file=memcached-operator.v0.0.1.clusterserviceversion.yaml load=bundle
time="2020-01-17T17:03:09-06:00" level=info msg="loading Packages and Entries" dir=deploy/olm-catalog/
time="2020-01-17T17:03:09-06:00" level=info msg=directory dir=deploy/olm-catalog/ file=olm-catalog load=package
time="2020-01-17T17:03:09-06:00" level=info msg=directory dir=deploy/olm-catalog/ file=memcached-operator load=package
time="2020-01-17T17:03:09-06:00" level=info msg=directory dir=deploy/olm-catalog/ file=0.0.1 load=package
```

**What did you expect to see?**
From this doc, https://github.com/operator-framework/operator-registry#manifest-format

When loading manifests into the database, the following invariants are validated:
    Every package has at least one channel
    Every ClusterServiceVersion pointed to by a channel in a package exists
    Every bundle has exactly one ClusterServiceVersion.
    If a ClusterServiceVersion owns a CRD, that CRD must exist in the bundle.
    If a ClusterServiceVersion replaces another, both the old and the new must exist in the package.

**What did you see instead? Under which circumstances?**
Always passed test

**Environment**
* operator-sdk version 0.14.0

operator-sdk version
operator-sdk version: "v0.14.0", commit: "4fb185b9d45682473b4951c9788f845ba2fa5b12", go version: "go1.13.3 linux/amd64"

* Kubernetes version information:

Client Version: version.Info{Major:"1", Minor:"14", GitVersion:"v1.14.6", GitCommit:"96fac5cd13a5dc064f7d9f4f23030a6aeface6cc", GitTreeState:"clean", BuildDate:"2019-08-19T11:13:49Z", GoVersion:"go1.12.9", Compiler:"gc", Platform:"linux/amd64"}
Server Version: version.Info{Major:"1", Minor:"14+", GitVersion:"v1.14.6+dea7fb9", GitCommit:"dea7fb9", GitTreeState:"clean", BuildDate:"2019-11-19T17:18:37Z", GoVersion:"go1.12.12", Compiler:"gc", Platform:"linux/amd64"}

* Kubernetes cluster kind: 

**Additional context**
Add any other context about the question here.



**Description of the change:**

this PR removes the v1alpha1 API from the scorecard logic, tests, and documentation.  The
v1alpha2 version with this PR is the only scorecard API.  Other subsequent PRs will further
remove remants of the v1alpha1 code but this PR if merged will leave the scorecard in
a working and releasable condition by itself.

**Motivation for the change:**

the v1alpha2 version was developed to replace the v1alpha1 version, removal of v1alpha1 was planned as part of the v1alpha2 roadmap.


## Type of question

Trying to follow tutorial w/o success.

## Question

**What did you do?**

```
[kube@abbey-road go]$ mkdir -p $HOME/projects
[kube@abbey-road go]$ cd $HOME/projects
[kube@abbey-road projects]$ operator-sdk new memcached-operator --repo=github.com/example-inc/memcached-operator
INFO[0000] Creating new Go operator 'memcached-operator'. 
INFO[0000] Created go.mod                               
INFO[0000] Created tools.go                             
INFO[0000] Created cmd/manager/main.go                  
INFO[0000] Created build/Dockerfile                     
INFO[0000] Created build/bin/entrypoint                 
INFO[0000] Created build/bin/user_setup                 
INFO[0000] Created deploy/service_account.yaml          
INFO[0000] Created deploy/role.yaml                     
INFO[0000] Created deploy/role_binding.yaml             
INFO[0000] Created deploy/operator.yaml                 
INFO[0000] Created pkg/apis/apis.go                     
INFO[0000] Created pkg/controller/controller.go         
INFO[0000] Created version/version.go                   
INFO[0000] Created .gitignore                           
INFO[0000] Validating project                           
INFO[0006] Project validation successful.               
INFO[0006] Project creation complete.                   
[kube@abbey-road projects]$ cd memcached-operator
[kube@abbey-road memcached-operator]$ operator-sdk add api --api-version=cache.example.com/v1alpha1 --kind=Memcached
INFO[0000] Generating api version cache.example.com/v1alpha1 for kind Memcached. 
INFO[0000] Created pkg/apis/cache/group.go              
INFO[0000] Created pkg/apis/cache/v1alpha1/memcached_types.go 
INFO[0000] Created pkg/apis/addtoscheme_cache_v1alpha1.go 
INFO[0000] Created pkg/apis/cache/v1alpha1/register.go  
INFO[0000] Created pkg/apis/cache/v1alpha1/doc.go       
INFO[0000] Created deploy/crds/cache.example.com_v1alpha1_memcached_cr.yaml 
INFO[0000] Running deepcopy code-generation for Custom Resource group versions: [cache:[v1alpha1], ] 
F0117 13:49:14.820903   20069 deepcopy.go:885] Hit an unsupported type invalid type for invalid type, from ./pkg/apis/cache/v1alpha1.Memcached
```


**What did you expect to see?**
Success.

**What did you see instead? Under which circumstances?**
Error.  See above.


**Environment**
* operator-sdk version:

```
[kube@abbey-road memcached-operator]$ operator-sdk version
operator-sdk version: "v0.14.0", commit: "4fb185b9d45682473b4951c9788f845ba2fa5b12", go version: "go1.13.3 linux/amd64"
```

* Kubernetes version information:

```
[kube@abbey-road memcached-operator]$ kubectl version
Client Version: version.Info{Major:"1", Minor:"17", GitVersion:"v1.17.1", GitCommit:"d224476cd0730baca2b6e357d144171ed74192d6", GitTreeState:"clean", BuildDate:"2020-01-14T21:04:32Z", GoVersion:"go1.13.5", Compiler:"gc", Platform:"linux/amd64"}
Server Version: version.Info{Major:"1", Minor:"17", GitVersion:"v1.17.1", GitCommit:"d224476cd0730baca2b6e357d144171ed74192d6", GitTreeState:"clean", BuildDate:"2020-01-14T20:56:50Z", GoVersion:"go1.13.5", Compiler:"gc", Platform:"linux/amd64"}
```

* Kubernetes cluster kind: 

Not using minikube.

**Additional context**

```
[kube@abbey-road memcached-operator]$ env | grep GO
GO111MODULE=
GOPROXY=https://proxy.golang.org,direct
GOPATH=/home/kube/go
[kube@abbey-road memcached-operator]$ go version
go version go1.13.3 linux/amd64

```


**Description of the change:**
- Removes the build/test-framework directory
- Removes the test-cluster molecule scenario
- Adds new `cluster` scenario that can be used to test against an existing cluster
- There is no longer any Ansible templating done in the `deploy/` directory, any templates used for testing will be located in `molecule/templates/` instead.
- The scaffolded molecule.yml files now use the Ansible verifier. All asserts.yml files were renamed to verify.yml to reflect this.
- The prepare/converge/verify tasks now make use of the new `k8s` `wait` option to simplify the deployment logic.

**Motivation for the change:**
There have been a number of features added and lessons learned since the Ansible scaffolding was first written. This PR should bring things more in line with what we recommend users do.

**Still TODO**
- [ ] Update tests
  - [ ] Make existing tests pass
  - [ ] Add a new test for the cluster scenario
- [ ] Update docs
**Description of the change:**
- The tests were been executed with the `--sort` which as not running all scenarios
- The only test that will not work in the CI is the ansible/proxy_test.go so it has been ignored 

**Motivation for the change:**
- Have a more accurate %
- Ensure that all tests which can be executed will use in the CI as well. 


The `make gen-cli-doc` will generate the cli docs automatically which is great. Because now we can be focused to do improvements the helper's commands and then it will provide better documentation as well. 

However, some characters used in the commands can not be rendered properly or not at all in the Markdown.
So, my suggestion is to format the description/usage of the commands with content that will work for both situations.   



**Description of the change:**
- Improve the command controller help 
- Make clear how to use and what is the purpose of the flag `--custom-api-import flag`

**Motivation for the change:**

Closes #2415


**Description of the change:**
add unit tests for the Generator

