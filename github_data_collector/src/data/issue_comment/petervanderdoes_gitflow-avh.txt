Hi gitflow-avh ppl!

The version out on apt in Ubuntu 18.04 is currently 1.11.0-1.

Now, we find ourselves in the same boat as back with #336, where the main package-manager for a major linux distro is using an almost 3 year old version of git-flow avh edition.

The [manual steps](https://github.com/petervanderdoes/gitflow-avh/wiki/Installing-on-Linux,-Unix,-etc.) to install 1.12.3 works fine, but seems unnecessary in this day and age.

..also, you end up with 2 version installed; where Ubuntu opts to use the default one _(which is 1.11.0-1)_ unless you remember to `sudo apt remove git-flow` and that is not too obvious or user friendly, not for me at least.

So, I was just wondering if there are any plans on updating the apt version of git-flow for Ubuntu 18.04 bionic beaver this time around too? (:

..or are you waiting to for [20.04 LTS](https://ubuntu.com/about/release-cycle), and put it in there?

cheers
Basma
One of the great things about using gitflow command line tools is that it takes several git commands and bundles them together.

However, as soon as you affect the repo outside of using the command line tools, some of the benefit is lost. The specific situation, which is common, is when you push your feature branch to origin, create a PR, have it reviewed, and then use github to merge (and squash) the PR. The reason why we might do this is to get the nice commit message in the merge that references the PR. Plus most teams are going to be dealing with GitHub directly for PR releated activities.

This brings me to my feature request (if you like the idea, I'm willing to submit a PR). I would like a `clean` command or flag. It would do everything that finish does but without the merge (because it's already done). Basically just delete the local and remote feature branches.

```
$ git flow feature clean [feature-name]
or
$ git flow feature finish --no-merge
or 
$ git flow feature finish --delete-only
```

Thoughts?
Hello,
We are currently using Gitflow AVH Edition. 
We are going to edit it a bit so it will work with our current server.
In order to test all the cases, we would like to create tests for Gitflow. 
Before starting to write those tests, we are looking for already existed tests that we can use and avoid additional code written.
Are there any tests that check the gitflow-avh that we could use? How do you check your code when you merge a new feature?
Thanks,
Robert
### Install of gitflow-avh into alpine

If using BusyBox, readlink uses -f and not -e, see [code](https://github.com/petervanderdoes/gitflow-avh/blob/develop/git-flow#L49)

## Stupid fix

When using _Dockerfile_

RUN git clone git://github.com/petervanderdoes/gitflow.git /tmp/gitflow && cd /tmp/gitflow && sed -i 's/readlink -e/readlink -f/g' git-flow && make install

## Question

Maybe add detection for busybox?
Old issue #393 that was solved but is still not working for me.
Did not work with a repo either initialized or not initialized
git flow was installed on ubuntu via apt-get install [git-flow]
git flow version : 1.12.0 (AVH Edition)
Is there any reason, why git flow init cannot be used in a dirty repository but git flow config can? This hits me quite often when automizing tasks.
Please make the `--pushtag` option to `git flow release finish` push only the tag for the release, _not_ all tags in the repo.

Pushing all tags is unexpected and undesirable behavior. It's unexpected because it is inconsistent with the context of the actions being performed, and also because the option name is singular (`--pushtag`, not `--pushtags`). It's undesirable because I maintain local tags which I have no intent to ever push. (e.g. `temp`, `experiment`, etc.)

Thanks.
When running git flow init, I'd like to have a way to set/edit the "Initial commit" message to something else before the commit, without having to amend the commit and reposition the master branch afterwards.
Best solution would be to make git-flow-init ask for the initial commit message, allowing that [Initial commit] (or whatever else is configured) as default. That's a good solution because it also makes it clear to the user that an initial commit is going to be made.
Using: 1.12.4-dev0 (according to changelog)

I have the remote branch: hotfix/2.0.3

I run: git flow hotfix start 2.0.4

and this is created locally without any error

I run: git flow hotfix start 2.0.5

and this fails because it checks I already have a local branch starting with hotfix/

So it appears to me hotfix start is not checking remote branches too.

I tried using: git flow hotfix start -F 2.0.4

thinking that might help but it didn't change the behaviour.
`git flow release finish -m "tag commit" 1.0.0` seems to checkout the master branch, merge the release branch, tag, checkout the develop branch, merge the master branch.

`git flow hotfix finish -m "tag commit" 1.0.0` seems to tag first, which will place the tag on whatever branch you currently have checked out, then do all the merging. For example, if I currently have the develop branch checked out with new features (for whatever reason), it will place the tag on the latest commit which would be a feature that is NOT currently in the master branch. 

can we get git flow hotfix finish to mirror the git flow release finish logic?