Scala 2.10 contained a bug that failed to outlaw use of default arguments in more than one overloaded alternative when the alternatives involve type parameters.

Thyme exploits the compiler bug in the following overloads, and as such doesn't build under 2.11

```
  /** Order handling.  See `order` for details of parameters.  Returns a tuple containing a result from `f`; prints a benchmarking report. */
  def porder[A,B](resource: Int => Thyme.Resource[B])(f: Thyme.Resource[B] => A)(n0: Int, title: String = "", pr: String => Unit = Thyme.printer): A = {
    val bo = Thyme.Scaled.empty
    val ans = order(resource)(f)(bo,n0)
    bo.title = title
    pr(bo.toString)
    ans
  }

  /** Order handling.  Packs functions into `Resource` automatically. (Args for `f` are `start`, `n`, `data`.) Returns a tuple containing a result from `f`; prints a benchmarking report. */
  def porder[A,B](resource: Int => B)(f: (Int,Int,B) => A)(n0: Int, title: String = "", pr: String => Unit = Thyme.printer): A = {
    val bo = Thyme.Scaled.empty
    val ans = order(Thyme.Resource(resource))(Thyme.Resource.inline(f))(bo, n0)
    bo.title = title
    pr(bo.toString)
    ans
  }

```

I love Thyme and use it extensively in my private and work projects. I would like to use it more in spire.

However, the current situation in spire is less than optimal. Thyme is downloaded from the private webserver of @non . 

```
      // thyme
      "ichi.bench" % "thyme" % "0.1.0" from "http://plastic-idolatry.com/jars/thyme-0.1.0.jar",
```

In my private and work projects I have an unmanaged test-lib project and check in thyme.jar into git. Which is also far from optimal.

The obvious solution would be to publish Thyme on maven. 

Fixed 

[error] /private/tmp/thyme/bench/Thyme.scala:1499: type mismatch;
[error]  found   : Any
[error]  required: Double
[error]     def done(dt: Double) = f"done in ${if (dt>=1) dt else dt*1e3}%.2f ${if (dt>=1) "s" else "ms"}\n"
[error]         

And 

error] /private/tmp/thyme/bench/Thyme.scala:84: in class Thyme, multiple overloaded alternatives of method porder define default arguments.
[error] class Thyme(val accuracyTarget: Double = 0.03, watchLoads: Boolean = true, watchGarbage: Boolean = true, watchMemory: Boolean = true) { self =>
[error]       ^
[error] one error found

Using the jar provided with the source:

```
âžœ  jsonbmark  scala -cp ./lib/thyme.jar
Welcome to Scala version 2.10.2 (Java HotSpot(TM) 64-Bit Server VM, Java 1.7.0).
Type in expressions to have them evaluated.
Type :help for more information.

scala> [init] error: error while loading <root>, error in opening zip file

Failed to initialize compiler: object scala.runtime in compiler mirror not found.
** Note that as of 2.8 scala does not assume use of the java classpath.
** For the old behavior pass -usejavacp to scala, or if using a Settings
** object programatically, settings.usejavacp.value = true.


Failed to initialize the REPL due to an unexpected error.
This is a bug, please, report it along with the error diagnostics printed below.
java.lang.NullPointerException
    at scala.tools.nsc.interpreter.ExprTyper$codeParser$.applyRule(ExprTyper.scala:24)
    at scala.tools.nsc.interpreter.ExprTyper$codeParser$.stmts(ExprTyper.scala:35)
    at scala.tools.nsc.interpreter.ExprTyper$$anonfun$parse$2.apply(ExprTyper.scala:43)
    at scala.tools.nsc.interpreter.ExprTyper$$anonfun$parse$2.apply(ExprTyper.scala:42)
    at scala.tools.nsc.reporters.Reporter.withIncompleteHandler(Reporter.scala:51)
    at scala.tools.nsc.interpreter.ExprTyper$class.parse(ExprTyper.scala:42)
    at scala.tools.nsc.interpreter.IMain$exprTyper$.parse(IMain.scala:1074)
    at scala.tools.nsc.interpreter.IMain.parse(IMain.scala:1078)
    at scala.tools.nsc.interpreter.IMain$$anonfun$showCodeIfDebugging$1.apply(IMain.scala:1168)
    at scala.tools.nsc.interpreter.IMain$$anonfun$showCodeIfDebugging$1.apply(IMain.scala:1168)
    at scala.tools.nsc.interpreter.IMain.beSilentDuring(IMain.scala:238)
    at scala.tools.nsc.interpreter.IMain.showCodeIfDebugging(IMain.scala:1168)
    at scala.tools.nsc.interpreter.IMain$ReadEvalPrint.compileAndSaveRun(IMain.scala:800)
    at scala.tools.nsc.interpreter.IMain$ReadEvalPrint.compile(IMain.scala:761)
    at scala.tools.nsc.interpreter.IMain.bind(IMain.scala:618)
    at scala.tools.nsc.interpreter.IMain.bind(IMain.scala:661)
    at scala.tools.nsc.interpreter.IMain$$anonfun$quietBind$1.apply(IMain.scala:660)
    at scala.tools.nsc.interpreter.IMain$$anonfun$quietBind$1.apply(IMain.scala:660)
    at scala.tools.nsc.interpreter.IMain.beQuietDuring(IMain.scala:232)
    at scala.tools.nsc.interpreter.IMain.quietBind(IMain.scala:660)
    at scala.tools.nsc.interpreter.ILoop$$anonfun$process$1$$anonfun$apply$mcZ$sp$2.apply$mcV$sp(ILoop.scala:838)
    at scala.tools.nsc.interpreter.ILoopInit$class.runThunks(ILoopInit.scala:122)
    at scala.tools.nsc.interpreter.ILoop.runThunks(ILoop.scala:42)
    at scala.tools.nsc.interpreter.ILoopInit$class.postInitialization(ILoopInit.scala:95)
    at scala.tools.nsc.interpreter.ILoop.postInitialization(ILoop.scala:42)
    at scala.tools.nsc.interpreter.ILoopInit$$anonfun$createAsyncListener$1.apply$mcV$sp(ILoopInit.scala:63)
    at scala.tools.nsc.interpreter.ILoopInit$$anonfun$createAsyncListener$1.apply(ILoopInit.scala:60)
    at scala.tools.nsc.interpreter.ILoopInit$$anonfun$createAsyncListener$1.apply(ILoopInit.scala:60)
    at scala.tools.nsc.io.package$$anon$3.call(package.scala:40)
    at java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:334)
    at java.util.concurrent.FutureTask.run(FutureTask.java:166)
    at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1110)
    at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:603)
    at java.lang.Thread.run(Thread.java:722)
```

There was a report of a 140s pbench attempt, which turned out not to agree particularly well with most other measurements.  Some sort of warning is in order, as Thyme is not intended to run for that long.  Something is likely awry.

I love how complete the analysis of Distribution is, but sometimes I just want to export the runtimes to pull into an external tool, eg. for making a boxplot with R.  `TsvPrinter` makes that easy.

The current reporting assumes that all GC activity takes place during the measured call.  This assumption is not valid of a concurrent-mark-sweep or other concurrent garbage collector is used.  It would be valuable to detect this state of affairs and print warnings and/or omit garbage collection times.

Rarely (<1% of the time?), `Thyme.warmup()` will fail to complete.  No stack trace yet.

May throw an out of bounds error.  Example:

``` bash
$ scala -cp Thyme.jar
Welcome to Scala version 2.10.1 (Java HotSpot(TM) 64-Bit Server VM, Java 1.6.0_37).
Type in expressions to have them evaluated.
Type :help for more information.

scala> val th = new ichi.bench.Thyme
java.lang.ArrayIndexOutOfBoundsException: -1
    at ichi.maths.package$Distribution$.compute$mDc$sp(package.scala:1600)
    at ichi.bench.Thyme$$anonfun$7.apply$mcDI$sp(Thyme.scala:889)
    at ichi.bench.Thyme$$anonfun$7.apply(Thyme.scala:875)
    at ichi.bench.Thyme$$anonfun$7.apply(Thyme.scala:875)
    at scala.collection.TraversableLike$$anonfun$map$1.apply(TraversableLike.scala:244)
    at scala.collection.TraversableLike$$anonfun$map$1.apply(TraversableLike.scala:244)
    at scala.collection.immutable.Range.foreach(Range.scala:141)
    at scala.collection.TraversableLike$class.map(TraversableLike.scala:244)
    at scala.collection.AbstractTraversable.map(Traversable.scala:105)
    at ichi.bench.Thyme.<init>(Thyme.scala:875)
    at .<init>(<console>:7)
    at .<clinit>(<console>)
    at .<init>(<console>:7)
    at .<clinit>(<console>)
    at $print(<console>)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
    at java.lang.reflect.Method.invoke(Method.java:597)
    at scala.tools.nsc.interpreter.IMain$ReadEvalPrint.call(IMain.scala:734)
    at scala.tools.nsc.interpreter.IMain$Request.loadAndRun(IMain.scala:983)
    at scala.tools.nsc.interpreter.IMain.loadAndRunReq$1(IMain.scala:573)
    at scala.tools.nsc.interpreter.IMain.interpret(IMain.scala:604)
    at scala.tools.nsc.interpreter.IMain.interpret(IMain.scala:568)
    at scala.tools.nsc.interpreter.ILoop.reallyInterpret$1(ILoop.scala:745)
    at scala.tools.nsc.interpreter.ILoop.interpretStartingWith(ILoop.scala:790)
    at scala.tools.nsc.interpreter.ILoop.command(ILoop.scala:702)
    at scala.tools.nsc.interpreter.ILoop.processLine$1(ILoop.scala:566)
    at scala.tools.nsc.interpreter.ILoop.innerLoop$1(ILoop.scala:573)
    at scala.tools.nsc.interpreter.ILoop.loop(ILoop.scala:576)
    at scala.tools.nsc.interpreter.ILoop$$anonfun$process$1.apply$mcZ$sp(ILoop.scala:867)
    at scala.tools.nsc.interpreter.ILoop$$anonfun$process$1.apply(ILoop.scala:822)
    at scala.tools.nsc.interpreter.ILoop$$anonfun$process$1.apply(ILoop.scala:822)
    at scala.tools.nsc.util.ScalaClassLoader$.savingContextLoader(ScalaClassLoader.scala:135)
    at scala.tools.nsc.interpreter.ILoop.process(ILoop.scala:822)
    at scala.tools.nsc.MainGenericRunner.runTarget$1(MainGenericRunner.scala:83)
    at scala.tools.nsc.MainGenericRunner.process(MainGenericRunner.scala:96)
    at scala.tools.nsc.MainGenericRunner$.main(MainGenericRunner.scala:105)
    at scala.tools.nsc.MainGenericRunner.main(MainGenericRunner.scala)
```
