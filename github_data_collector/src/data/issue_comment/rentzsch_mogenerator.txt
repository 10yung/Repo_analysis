Hello

In addition to Homebrew, could you support MacPorts as a distribution method? 

Homebrew is widely used by freelancers but is a complete mess to use at scale with managed fleet of Macs. And the Homebrew team repeatedly shown disrespect to Apple guidelines leading their system to break other software on the device.

Homebrew has a long history of issue proving it's not an enterprise grade distribution system unlike MacPorts.

With support for MacPorts, Mac Admins would also be able to generate a pkg from your port to distribute it via fleet management solution, without the need of a port solution on the endpoint.

That would be a really great addition to the long standing reference mogenerator.

And thanks a lot for your work!
### Summary of Changes

This incorporates a variety of updates to generated Swift code. Objective-C generated code is not affected by this PR. Changes are listed in the updated README and below.

This does not include [Codable support for `NSManagedObject` subclasses](https://github.com/rentzsch/mogenerator/issues/377), which has been shelved for now.

### Addresses

* [NEW] Update Swift templates for better Swift style ([Aleksandar Vacić](https://github.com/rentzsch/mogenerator/pull/368))

* [FIX] Fixed invalid call of `NSManagedObject.fetchRequest()` ([Vincent Esche](https://github.com/rentzsch/mogenerator/pull/372))

* [NEW] Add support for URI and UUID attribute types ([Trevor Squires](https://github.com/rentzsch/mogenerator/pull/370))

* [NEW] Expose information when custom type is set through userInfo ([Aleksandar Vacić](https://github.com/rentzsch/mogenerator/pull/369))

* [NEW] Add Codable property support via a new attributeCodableTypeName user info key ([Tom Harrington](https://github.com/rentzsch/mogenerator/issues/375))

* [CHANGE] Nullability annotations for generated primitive accessors ([Michael Babin](https://github.com/rentzsch/mogenerator/pull/363))

* [FIX] Support for “Uses Scalar Type” ([Rok Gregorič](https://github.com/rentzsch/mogenerator/pull/352))

* [FIX] Swift 3 `NSData` to `Data` ([Christopher Rogers](https://github.com/rentzsch/mogenerator/pull/350))

* [FIX] Add specialized `fetchRequest()` func to Swift's machine generated files ([0xpablo](https://github.com/rentzsch/mogenerator/pull/358))

* [FIX] Correct Swift machine template for singleton (fetchOne…) fetch request results ([Warren Burton](https://github.com/rentzsch/mogenerator/pull/359))

* [FIX] Expose allAttributes and allRelationships ([Trevor Squires](https://github.com/rentzsch/mogenerator/pull/360))
### Summary of Changes

Remove the leading period from representedClassName when parsing NSEntityDescription as it signifies the user has selected the current module for scope. If this is left in the generated class names get mangled, but it is important for core data to have this information when going back and forth between a swift module and an ObjC module, such as happens when your model is in a swift framework.

### Addresses

#339

### Feature Request

I'd like to see the template create +fetch\<Foo\>Request methods that return an NSFetchRequest so that I can modify it, in code, before executing it.

### Additional Information

I have a modified template pair that does this. Are you interested in a PR? Should I wrap it in a template variable (to optionally disable/enable it)?

Hi there,

the generated classes do have the NSNumber type for bool an double values. In xcode there is a way to check "Use scalar properties for primitive data types" - is there a way to realize this with mogenerator, too?

I want to use `model.isCkecked = YES` to set the value for a bool.
### Feature Request

I think it would be extremely useful if Swift developers could use Codable attributes in Core Data.

Core Data has long supported transformable properties, which work transparently with any type that conforms to `NSCoding`. Supporting `Codable` is conceptually the same thing: values are stored in a binary form and converted to/from a deserialized value as needed. Core Data doesn't have support for this (see rdar://37708071 if you can), but in the meantime we can do something about it.

Note that this issue is only about `Codable` for attributes. Implementing `Codable` for managed object subclasses is a very different question, addressed in #377 

### The Plan

I'm working on the following scheme and would appreciate any feedback people might have.

1. Declare an attribute as "binary".

2. In the attribute's `userInfo`, include a new key to be named `attributeCodableTypeName`. The value is any Swift type name where the type conforms to `Codable`.

3. `mogenerator` generates custom accessor code for the property that converts to/from the `Codable` type. The code can use any valid binary encoding so long as it's the same going in and coming out. I'm testing this with `JSONEncoder`/`JSONDecoder` but the property list versions would work too.

For example, given the following Swift type:

```swift
public enum EventType: UInt16, Codable {
    case party
    case concert
    case birthday
    case presentation
}
```

One could add a binary attribute `type` to an entity, and include `attributeCodableTypeName` = `EventType` in user info. The generated code for this property would be:

```swift
public var type: EventType? {
	get {
		let key = Event.Attributes.type
		willAccessValue(forKey: key)
		defer { didAccessValue(forKey: key) }

		guard let primitiveValue = primitiveValue(forKey: key) as? Data else {
			return nil
		}

		return try? JSONDecoder().decode(EventType.self, from: primitiveValue)
	}
	set {
		let key = Event.Attributes.type
		willChangeValue(forKey: key)
		defer { didChangeValue(forKey: key) }

		let primitiveValue = try? JSONEncoder().encode(newValue)
		setPrimitiveValue(primitiveValue, forKey: key)
	}
}
```

[Note that in this example, `Event.Attributes` is defined as a `struct` as in the current swift42 branch, thanks to PR #368.]

With this change, values of `EventType` can be assigned to the `type` attribute in the same manner as tranformables are now.

### Limitation

This might be **too** similar to transformables, in that it would be generally impossible to use values of these attributes in predicates. Usually that's not an issue, but with Codables it might be more problematic. In this example, for instance, there's no support for fetching all objects with a given `EventType` value.

I'd really like to get Codable support in, though, so any comments pro or con are appreciated.

There is a crash during conversion of compoundIndex created on child entity which contains attributes from parent entity.

It crashes there: [currentCompoundIndex addObject:compoundIndexProperty];
line 92 @ NSEntityDescription+momcom.m

and crash look just this:
Caught: NSInvalidArgumentException: *** -[__NSArrayM insertObject:atIndex:]: object cannot be nil

There should be a message that indexes on inherited attributes are not supported.
### Reproduce:

1. Create simple Core Data model with two entities…

```
╭───────╮       ╭───────╮
│ Alpha │       │ Beta  │
├───────┤       ├───────┤
│ betas │ <-->> │ alpha │
╰───────╯       ╰───────╯
```

…with `betas` being optional, while `alpha` being mandatory.

2. Set `Codegen` of entities to `Manual/None`.

3. Generate source code via mogenerator:

```
mogenerator --model ${SRCROOT}/MogeneratorCrash/MogeneratorCrash.xcdatamodeld/MogeneratorCrash.xcdatamodel --human-dir ${SRCROOT}/MogeneratorCrash/Human --machine-dir ${SRCROOT}/MogeneratorCrash/Machine --swift
```

4. Add generated code files to project.

5. Create entities:
```
guard let appDelegate = NSApplication.shared().delegate as? AppDelegate else {
    fatalError("Could not find AppDelegate")
}

appDelegate.persistentContainer.performBackgroundTask { context in
    let alpha = Alpha(context: context)
    let beta = Beta(context: context)

    alpha.addBetasObject(beta)
}
```

6. Run app.

### Expected Behavior

Shouldn't crash.

### Actual Behavior

Crashes:

```
2017-04-03 18:13:50.752753 MogeneratorCrash[28856:15552094] *** Terminating app due to uncaught exception 'NSInvalidArgumentException', reason: 'An NSManagedObject of class 'Alpha' must have a valid NSEntityDescription.'
*** First throw call stack:
(
	0   CoreFoundation                      0x00007fff9aeefe7b __exceptionPreprocess + 171
	1   libobjc.A.dylib                     0x00007fffafacfcad objc_exception_throw + 48
	2   CoreData                            0x00007fff9aa828c0 -[NSManagedObject initWithEntity:insertIntoManagedObjectContext:] + 528
	3   MogeneratorCrash                    0x0000000100005b8c _TFC16MogeneratorCrash6_AlphacfT6entityCSo19NSEntityDescription10insertIntoGSqCSo22NSManagedObjectContext__S0_ + 76
	4   MogeneratorCrash                    0x00000001000017d7 _TFC16MogeneratorCrash5AlphacfT6entityCSo19NSEntityDescription10insertIntoGSqCSo22NSManagedObjectContext__S0_ + 71
	5   MogeneratorCrash                    0x0000000100001892 _TToFC16MogeneratorCrash5AlphacfT6entityCSo19NSEntityDescription10insertIntoGSqCSo22NSManagedObjectContext__S0_ + 66
	6   CoreData                            0x00007fff9aaf4031 -[NSManagedObject initWithContext:] + 721
	7   MogeneratorCrash                    0x0000000100003334 _TTOFCSo15NSManagedObjectcfT7contextCSo22NSManagedObjectContext_S_ + 36
	8   MogeneratorCrash                    0x0000000100002ca1 _TFCSo15NSManagedObjectCfT7contextCSo22NSManagedObjectContext_S_ + 65
	9   MogeneratorCrash                    0x0000000100002bd3 _TFFC16MogeneratorCrash14ViewController11viewDidLoadFT_T_U_FCSo22NSManagedObjectContextT_ + 51
	10  MogeneratorCrash                    0x0000000100002cec _TTRXFo_oCSo22NSManagedObjectContext__XFdCb_dS___ + 60
	11  CoreData                            0x00007fff9aba9144 __47-[NSPersistentContainer performBackgroundTask:]_block_invoke + 20
	12  CoreData                            0x00007fff9aab7fa5 developerSubmittedBlockToNSManagedObjectContextPerform + 165
	13  libdispatch.dylib                   0x00000001009f0f5c _dispatch_client_callout + 8
	14  libdispatch.dylib                   0x0000000100a08a59 _dispatch_queue_serial_drain + 205
	15  libdispatch.dylib                   0x00000001009fa489 _dispatch_queue_invoke + 1174
	16  libdispatch.dylib                   0x0000000100a01707 _dispatch_queue_override_invoke + 656
	17  libdispatch.dylib                   0x00000001009f31d7 _dispatch_root_queue_drain + 671
	18  libdispatch.dylib                   0x00000001009f2ee8 _dispatch_worker_thread3 + 114
	19  libsystem_pthread.dylib             0x0000000100a6889a _pthread_wqthread + 1299
	20  libsystem_pthread.dylib             0x0000000100a68375 start_wqthread + 13
)
libc++abi.dylib: terminating with uncaught exception of type NSException
```

Further more mogenerator doesn't seem to respect the "Optional" flag or relationships:
It generates `@NSManaged open var betas: NSSet` which should be `@NSManaged open var betas: NSSet?`, no?

### Additional Information

Xcode 8.3, mogenerator 1.31

A sample project can be found here: https://github.com/regexident/MogeneratorCrash
### Question

when settings min value to 0 for an attribute of type "Integer 64", mogenerator generates value accessors with uint64_t primitive types. 

### Expected Behavior

Core Data internally uses int64_t (remember: "Integer 64") so mogenerator value accessors should respect that and expose int64_t types.

### Actual Behavior

mogenerator probably look at the constraints (min value set 0 let it think it's an unsigned value), and decides to expose uint64_t primitive types in value accessors. This is wrong as internally Core Data will use int64_t anyway (you can see that using their new code generation)

### Additional Information

iOS 10 / Xcode 8

### Question

I need the option for scalar / non-scalar types and the optional checkbox in my application, but mogenerator ignores both options.
checking unchecking of Use Scalar and Optional flag of an Int32 defined Value in the datamodel does not affect its generation, its always an NSNumber? Type in the machine file (_Entity.swift)

Does anybody has the same problem, or am i doing the generation wrong?
mogenerator --swift --model "CoreData/CoreDataFile.xcdatamodeld/CoreDataName.xcdatamodel" -O CoreData/ -M CoreData/Machine

best reagards

