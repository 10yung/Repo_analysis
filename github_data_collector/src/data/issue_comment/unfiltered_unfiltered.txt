There is a confusion with the description for the file-upload-modules:

1. The README says nothing about `unfiltered-filter-uploads`, but it is the module that I needed to get the things done.

2. The README only refers to `unfiltered-uploads`, but with a wrong description `Provides extractors for multipart posts using the servlet API.` But the extractor `MultiPart` is in `unfiltered-filter-uploads`


Would be very helpful for tooling to autopublish swagger/openapi from our web apps. Right now we're manually editing the yaml for our endpoints and it's difficult to keep the docs up to date the with the apps.
We should probably expose an api to set headers not just add.

See for instance: https://github.com/unfiltered/unfiltered/blob/0.10.x/filter/src/main/scala/bindings.scala#L38
Now `HttpRequest[A]` and `HttpResponse[B]` are tightly integrated with `java.io.InputStream` and `java.io.OutputStream`, We should remove that hard requirement to be able to have a non-blocking interface.

These operations should still be possible, but we should try to make them obsolete. Inspiration from Http4s could be useful here.
We should be able to match on different resources paths than just the root + queried path.

From RFC-7159:

https://tools.ietf.org/html/rfc7159#section-8

>JSON text SHALL be encoded in UTF-8, UTF-16, or UTF-32.  The default
   encoding is UTF-8, and JSON texts that are encoded in UTF-8 are
   interoperable in the sense that they will be read successfully by the
   maximum number of implementations; there are many implementations
   that cannot successfully read texts in other encodings (such as
   UTF-16 and UTF-32).

https://tools.ietf.org/html/rfc7159#section-11

>  The MIME media type for JSON text is application/json.

   Type name:  application

   Subtype name:  json

   Required parameters:  n/a

   Optional parameters:  n/a

No parameters are allowed, meaning that specifying `charset` should not be possible.
You cant really use the basic auth kit if you are using the Async or Future apis.
We should support the different options to make them more useful.
This part of the Oauth2 spec was never finalized and we should remove it.
See https://github.com/unfiltered/unfiltered/issues/317

https://github.com/unfiltered/website/blob/master/src/paradox/10/b.md#deference-has-its-memory-limits still references MemoryAwareThreadPoolExecutor.

This no longer exists in netty 4.x. There's no replacement functionality.

We need to provide an example to people on how to run a netty cycle based service without it running out of memory/dying.
...where it makes sense. Feedback I've gotten in the past was that it was not straight forward to find things w/o the aid of an ide or ack. It may make this library more approachable to rethink the naming scheme for files. 