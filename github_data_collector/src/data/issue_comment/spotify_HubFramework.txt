

on #58 & 94 & 157
Plus some minor fixes (proposal)
[OCLint](http://oclint.org) is another static analysis tool that focuses on reducing complexity, confusion, and redundant code. It has a [ton](http://oclint-docs.readthedocs.io/en/stable/rules/index.html) of rules. This PR knocks out some of the simpler ones.

The tool also handles analyzing [cyclomatic complexity](https://en.wikipedia.org/wiki/Cyclomatic_complexity) and [npath complexity](https://modess.io/npath-complexity-cyclomatic-complexity-explained), which could help identify places that could probably use a refactor or reduction in complexity.

Many of the rules are conventional but could also be useful (method length, line length, class length, etc.)
Create a collection view layout in the collection view factory when we create the collection view, and absolve the view controller of that responsibility. The VC now also doesn't need to create a "temporary" `UICollectionViewLayout` class for the collection view.
@cerihughes and I discussed the fact that subclassing HubViewController in order to define a contract (i.e. act as a protocol) was a bit strange. 

The argument against it was that Swift will look at UIViewController<HubViewController> as just a UIViewController and there will be lots of casting in the Swift code. 

That's true (for now).

However,  Swift looks at id<HubViewController> as a HubViewController protocol. 

Going with this approach, there's only one line of casting in the Swift code and that's only to make UIKit happy. I think that's acceptable. 
Traversing the view hierarchy in search of specific class that handle touches is not really scalable. 

This is an alternative solution. 
Fixes https://github.com/spotify/HubFramework/issues/164.

There are several things going on here:
- Made HubFramework compile for tvOS (lots of compile flags).
- Added support for the focus engine (a little trickier than expected, especially with nested collection views).
- Added a HubComponentWithFocusState protocol so that a component can update its view when in focus. 
- Added a tvOS test target. 
- Updated the podspec.

Missing:
- I did not update the CI setup. I'm not super familiar with using fastlane for this (often use a simple shell script) and wanted to avoid breaking something. 
- A tvOS demo app (to come in a separate PR later on).
Always use `XCTAssertEqualObjects` when comparing objects for equality. `XCTAssertEqual` was causing some issues with `NSIndexPath` equality on 32 bit architectures (possibly because 64-bit architectures pool instances that are equal?)