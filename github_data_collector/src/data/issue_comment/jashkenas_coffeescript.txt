@GeoffreyBooth re-opening against `master`

See original PR: #5068 
@GeoffreyBooth re-opening against `master`

See original PR: #5081 
@GeoffreyBooth re-opening against `master`

See original PR: #5264 
This allows code passing the output on to other tools to correctly identify the `sourceType` of the output.

---
_This PR was started by: [git wf pr](https://github.com/groupon/git-workflow/releases/tag/v1.0.4)_
<!--
Before making a PR please make sure to read our contributing guidelines:
https://coffeescript.org/#contributing

For issue references: Add a comma-separated list of a
[closing word](https://help.github.com/articles/closing-issues-via-commit-messages/) followed by
the ticket number fixed by the PR. It should be underlined in the preview if done correctly.

All new features require tests. All but the most trivial bug fixes should also have new or updated tests.

Ensure that all new code you add to the compiler can be run in the minimum version of Node listed in
`package.json`. New tests can require newer Node runtimes, but you may need to ensure that such tests
only run in supported runtimes; see `Cakefile` for examples of how to filter out certain tests in
runtimes that donâ€™t support them.

Please follow the code style of the rest of the CoffeeScript codebase. Write comments in complete
sentences using Markdown, as the comments become the [annotated source](https://coffeescript.org/#annotated-source).
For tests proving a bug is fixed, please mention the issue number in the test description (see examples
in the codebase).

Describe your changes below in as much detail as possible.
-->
- Fixes #5164 
- Remove error for capital E from lexer
- Change tests to match
### [Input Code](https://coffeescript.org/#try:%23%20methods%0Ao%20%3D%0A%20%20x%3A%20f%201%0A%20%20.m%202%0A%0A%23%20properties%0Ao%20%3D%0A%20%20x%3A%20a%0A%20%20%20%20.b%0A%0A%23%20mixed%20chaining%20style%0Ao%20%3D%0A%20%20x%3A%20a.%0A%20%20%20%20b%0A%20%20%20%20.c%0A%0A%23%20parens%20around%20function%20expression%0Ao%20%3D%0A%20%20x%3A%20(-%3E%201)%0A%20%20.call(t)%0A%0A%23%20parens%20around%20function%20expression%20passed%20as%20an%20argument%20to%20another%20function%0Ao%20%3D%0A%20%20x%3A%20f(-%3E%201)%0A%20%20.m%202%0A%0A%23%20or%20parens%20around%20the%20whole%20property%20value%0Ao%20%3D%0A%20%20x%3A%20(f%20-%3E%201)%0A%20%20.m%202)

#### Single-line object literals followed by chaining

```coffee
# methods
o =
  x: f 1
  .m 2

# properties
o =
  x: a
    .b

# mixed chaining style
o =
  x: a.
    b
    .c
```

There are examples with different indentation for chaining entities, just because expected behavior for them should be the same once their indentation has reached the level of the corresponding object property (or its value if it's on a new line), or even goes further. According to correct behavior examples (see below).

<h4>
Single-line object literals<br>
ending with a function expression used with parens
</h4>

(these are counterexamples to correct behaviour when used without parens, see below)

```coffee
# parens around function expression
o =
  x: (-> 1)
  .call(t)

# parens around function expression passed as an argument to another function
o =
  x: f(-> 1)
  .m 2

# or parens around the whole property value
o =
  x: (f -> 1)
  .m 2
```

### Expected Behavior

Expected compilation result (omitting var):

```js
// methods
o = {
  x: f(1).m(2)
};

// properties
o = {
  x: a.b
};

// mixed chaining style
o = {
  x: a.b.c
};
```

```js
// parens around function expression
o = {
  x: (function() {
    return 1;
  }).call(t)
};

// parens around function expression passed as an argument to another function
o = {
  x: f(function() {
    return 1;
  }).m(2)
};

// or parens around the whole property value
o = {
  x: f(function() {
    return 1;
  }).m(2)
};
```

### Current Behavior

Current compilation result (omitting var):

```js
// methods
o = {
  x: f(1)
}.m(2);

// properties
o = {
  x: a
}.b;

// mixed chaining style
o = {
  x: a.b
}.c;
```

```js
// parens around function expression
o = {
  x: (function() {
    return 1;
  })
}.call(t);

// parens around function expression passed as an argument to another function
o = {
  x: f(function() {
    return 1;
  })
}.m(2);

// or parens around the whole property value
o = {
  x: f(function() {
    return 1;
  })
}.m(2);
```

---

### [Correct Behavior](https://coffeescript.org/#try:%23%20methods%0Ao%20%3D%0A%20%20x%3A%20f%201%0A%20%20y%3A%20f%201%0A%20%20.m%202%0A%0A%23%20properties%0Ao%20%3D%0A%20%20x%3A%20a%0A%20%20y%3A%20a%0A%20%20%20%20.b%0A%0A%23%20mixed%20chaining%20style%0Ao%20%3D%0A%20%20x%3A%20a%0A%20%20y%3A%20a.%0A%20%20%20%20b%0A%20%20%20%20.c%0A%0A%23%20multi-line%20single%20property%20object%0Ao%20%3D%0A%20%20x%3A%0A%20%20%20%20a%0A%20%20%20%20.b%0A%0A%23%20same%20with%20mixed%20chaining%20style%0Ao%20%3D%0A%20%20x%3A%0A%20%20%20%20a.%0A%20%20%20%20b%0A%20%20%20%20.c%0A%0A%23%20no%20parens%20around%20function%20expression%0Ao%20%3D%0A%20%20x%3A%20-%3E%201%0A%20%20.call(t)%0A%0A%23%20no%20parens%20around%20function%20expression%20passed%20as%20an%20argument%20to%20another%20function%0A%23%20no%20parens%20around%20the%20whole%20property%20value%0Ao%20%3D%0A%20%20x%3A%20f%20-%3E%201%0A%20%20.m%202)

Compare with currently working examples of correct behavior.

#### Multi-line multi property object literals followed by chaining

```coffee
# methods
o =
  x: f 1
  y: f 1
  .m 2

# properties
o =
  x: a
  y: a
    .b

# mixed chaining style
o =
  x: a
  y: a.
    b
    .c
```

#### Multi-line *single property* object literals

(value is on a new line)

```coffee
# multi-line single property object
o =
  x:
    a
    .b

# same with mixed chaining style
o =
  x:
    a.
    b
    .c
```

<h4>
Single-line single property object literals<br>
ending with a function expression but now without parens
</h4>

```coffee
# no parens around function expression
o =
  x: -> 1
  .call(t)

# no parens around function expression passed as an argument to another function
# no parens around the whole property value
o =
  x: f -> 1
  .m 2
```

Compilation result (omitting var):

```js
// methods
o = {
  x: f(1),
  y: f(1).m(2)
};

// properties
o = {
  x: a,
  y: a.b
};

// mixed chaining style
o = {
  x: a,
  y: a.b.c
};
```

```js
// multi-line single property object
o = {
  x: a.b
};

// same with mixed chaining style
o = {
  x: a.b.c
};
```

```js
// no parens around function expression
o = {
  x: (function() {
    return 1;
  }).call(t)
};

// no parens around function expression passed as an argument to another function
// no parens around the whole property value
o = {
  x: f(function() {
    return 1;
  }).m(2)
};
```

---

### Environment

* CoffeeScript version: 2.4.1

### Related issues

I saw a similar bug in #4533 with the same consequences, but caused by another case. Single-line single property object literals weren't investigated there.
But they were mentioned e.g. in this comment to another issue: https://github.com/jashkenas/coffeescript/issues/4035#issuecomment-121226387

I see a lot of mentions and discussions of chaining in general, so I understand that this topic is not an easy one for CoffeeScript syntax. But I guess, there still should be consistency in parsing regardless of the number of object properties or the presence of parens inside them.

---

### Context

Initially I noticed this issue while playing with my class extensions with chaining syntax. I encountered a problem with `constructor` declaration, which for some reason is treated here as a single-line object literal instead of a class member declaration (maybe this is another bug as well? or it's caused exactly by chaining). And then described issue happens:

```coffee
class Example
  constructor: @extension

  .private
    a: 1
```

[which produces](https://coffeescript.org/#try:class%20Example%0A%20%20constructor%3A%20%40extension%0A%0A%20%20.private%0A%20%20%20%20a%3A%201) wrong class declaration:

```js
  class Example {};

  ({
    constructor: Example.extension
  }).private({
    a: 1
  });
```

And here is rewritten constructor in a multi-line notation (with a value on a new line):

```coffee
class Example
  constructor:
    @extension

    .private
      a: 1
```

[which produces](https://coffeescript.org/#try:class%20Example%0A%20%20constructor%3A%0A%20%20%20%20%40extension%0A%0A%20%20%20%20.private%0A%20%20%20%20%20%20a%3A%201) correct result:

```js
  class Example {
    constructor() {
      return ctor.apply(this, arguments);
    }

  };

  ctor = Example.extension.private({
    a: 1
  });
```

But unfortunately this workaround with constructor leads to indent level increase in further chaining lines, which sometimes is notably undesirable (complex functions/objects/classes, mixing with native syntax of class member declaration, etc).

<details>
  <summary>Detailed example</summary>

[Detailed example](https://coffeescript.org/#try:extension%20%3D%20(Class)%20-%3E%0A%20%20%23%20default%20constructor%0A%20%20constructor%20%3D%20-%3E%0A%20%20%23%20real%20constructor%0A%20%20ext%20%3D%20(args...)%20-%3E%0A%20%20%20%20constructor.apply(this%2C%20args)%0A%20%20%20%20return%20this%20%23%20always%20return%20class%20instance%0A%20%20ext.constructor%20%3D%20(arg)%20-%3E%0A%20%20%20%20%23%20put%20new%20constructor%0A%20%20%20%20constructor%20%3D%20arg%0A%20%20%20%20return%20ext%0A%20%20ext.public%20%3D%20(arg)%20-%3E%0A%20%20%20%20%23%20put%20public%20members%0A%20%20%20%20return%20ext%0A%20%20ext.private%20%3D%20(arg)%20-%3E%0A%20%20%20%20%23%20put%20private%20members%0A%20%20%20%20return%20ext%0A%20%20ext.private.static%20%3D%20(arg)%20-%3E%0A%20%20%20%20%23%20put%20private%20static%20members%0A%20%20%20%20return%20ext%0A%20%20ext.get%20%3D%20(arg)%20-%3E%0A%20%20%20%20%23%20put%20getters%0A%20%20%20%20return%20ext%0A%20%20ext.set%20%3D%20(arg)%20-%3E%0A%20%20%20%20%23%20put%20setters%0A%20%20%20%20return%20ext%0A%20%20%23%20explicit%20public%20getters%2Fsetters%0A%20%20ext.public.get%20%3D%20ext.get%0A%20%20ext.public.set%20%3D%20ext.set%0A%20%20return%20ext%0A%0A%23%20if%20you%20don't%20wanna%20extend%20native%20Function%20object%0A%23%20then%20put%20direct%20call%20%22extension%20%40%22%20%2F%20%22extension%20this%22%20in%20class%20constructor%0A%23%20instead%20of%20accessing%20a%20property%20%22%40extension%22%0AObject.defineProperty%20Function.prototype%2C%20'extension'%2C%0A%20%20configurable%3A%20true%0A%20%20enumerable%3A%20false%0A%20%20get%3A%20-%3E%20extension(this)%0A%0Aclass%20Example%0A%20%20constructor%3A%0A%20%20%20%20%40extension%0A%0A%20%20%20%20.constructor%20(%40a)%20-%3E%0A%0A%20%20%20%20.private%0A%20%20%20%20%20%20a%3A%201%0A%0A%20%20%20%20.private%20.static%0A%20%20%20%20%20%20b%3A%202%0A%0A%20%20%20%20.get%0A%20%20%20%20%20%20a%3A%20-%3E%20%40a%0A%20%20%20%20.set%0A%20%20%20%20%20%20a%3A%20(a)%20-%3E%20%40a%20%3D%20a%0A%0Ae%20%3D%20new%20Example%20123%0Aalert%20e.a) of class extension with chaining syntax (most implementation omitted):

```coffee
extension = (Class) ->
  # default constructor
  constructor = ->
  # real constructor
  ext = (args...) ->
    constructor.apply(this, args)
    return this # always return class instance
  ext.constructor = (arg) ->
    # put new constructor
    constructor = arg
    return ext
  ext.public = (arg) ->
    # put public members
    return ext
  ext.private = (arg) ->
    # put private members
    return ext
  ext.private.static = (arg) ->
    # put private static members
    return ext
  ext.get = (arg) ->
    # put getters
    return ext
  ext.set = (arg) ->
    # put setters
    return ext
  # explicit public getters/setters
  ext.public.get = ext.get
  ext.public.set = ext.set
  return ext

# if you don't wanna extend native Function object
# then put direct call "extension @" / "extension this" in class constructor
# instead of accessing a property "@extension"
Object.defineProperty Function.prototype, 'extension',
  configurable: true
  enumerable: false
  get: -> extension(this)

class Example
  constructor:
    @extension

    .constructor (@a) ->

    .private
      a: 1

    .private .static
      b: 2

    .get
      a: -> @a
    .set
      a: (a) -> @a = a

e = new Example 123
alert e.a
```

</details>
I just stumbled upon this: https://github.com/tc39/proposal-optional-catch-binding
It's a stage 4 proposal which allows js code like
```js
try {
  // ...
} catch {
  // ...
}
```

### Input Code
```coffee
try obj = JSON.parse '{"a": "1"}'
console.log obj ? "failed to parse json"
```

### Current Behavior
```coffee
var obj;

try {
  obj = JSON.parse('{"a": "1"}');
} catch (error) {}

console.log(obj != null ? obj : "failed to parse json");
```

### New Behavior
```coffee
var obj;

try {
  obj = JSON.parse('{"a": "1"}');
} catch {}

console.log(obj != null ? obj : "failed to parse json");
```

Support already looks good too:
https://caniuse.com/#feat=mdn-javascript_statements_try_catch_optional_catch_binding
https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/try...catch#Browser_compatibility

Just dropping this here so it can be looked at whether or not this should be output by CoffeeScript.
This is more in line with the [spec](https://sourcemaps.info/spec.html) which says "the generated code may include a line at the end of the source, with the following form: `//# sourceMappingURL=<url>`" and "there exists a `//# sourceURL` comment in the generated code". It also looks better since the `sourceMappingURL` is very long. This was motivated by mishoo/UglifyJS2#3441.
While upgrading an application to CS2 we ran into the following issue in an obscure usage of nested classes.

![Screenshot 2019-07-18 at 16 33 10](https://user-images.githubusercontent.com/604618/61463194-960d3e80-a97c-11e9-9117-5df68fcc9b06.png)

As you can see, the nested bound method thought it's `this` is the parent class. This seems to happen on a "parse" level, because it's replaced in the code. This lead to tricky to catch bug on our side.
In what I believe is a bug, line numbers in stack traces from errors thrown by CoffeeScript code executed via `CoffeeScript.eval()` (in NodeJS) give the JavaScript line numbers instead of the CoffeeScript line numbers.

### Simple example

```coffee
CoffeeScript = require 'coffeescript'
CoffeeScript.eval '''
  if undefined.foo
    weird = true # cause var hoist to shift lines
'''
```

The resulting stack trace and initial message uses a line number of 3 (**current behavior**) instead of 1 (**expected behavior**):

```
evalmachine.<anonymous>:3
if ((void 0).foo) {
             ^

TypeError: Cannot read property 'foo' of undefined
    at evalmachine.<anonymous>:3:14
    at Script.runInThisContext (vm.js:91:20)
    at Object.runInThisContext (vm.js:298:38)
    at Object.CoffeeScript.eval (...\node_modules\coffeescript\lib\coffeescript\index.js:127:17)
    at repl:2:28
    at repl:3:3
...
```

### More real example with filename
In my application, the eval'd string actually comes from a `.coffee` file, and I can get the **filename** to appear correctly with enough options to `CoffeeScript.eval` (though admittedly I don't understand why so many arguments are needed for this to happen), yet the **line numbers** remain the same.

```coffee
CoffeeScript.eval 'if undefined.foo then weird = true',
  filename: 'test.coffee'
  sourceFiles: ['test.coffee']
  inlineMap: true
```
results in:
```
test.coffee:3
if ((void 0).foo) {
             ^

TypeError: Cannot read property 'foo' of undefined
    at evalmachine.<anonymous>:3:14
```

### Workaround

In my application, I constructed [a workaround](https://github.com/edemaine/svgtiler/blob/c44edcf5fdf5a7f30711732e6a30fb9df08c4c4f/src/svgtiler.coffee#L327-L347) that corrects the line number in the initial message by using `CoffeeScript.compile` to get a source map, looking up/mapping the line number, and modifying the error's stack trace.

### Proposed Solution

I think it would make sense for `CoffeeScript.eval` to do this kind of mangling of error stack traces.  The [REPL](https://github.com/jashkenas/coffeescript/blob/master/src/repl.coffee#L66-L69) already does mangling of `SyntaxError`s via [`helpers.updateSyntaxError`](https://github.com/jashkenas/coffeescript/blob/master/src/helpers.coffee#L200-L237), and some of this code can probably be shared. (It was the inspiration for my workaround.)

### Related issues

Possibly related to #5129 and #4645. In particular, errors from the REPL seem to start every error with `repl:2` whereas `repl:1` would make more sense. I believe this is the same issue, so would also get fixed (though REPL seems less important to me).

### Environment
* CoffeeScript version: 2.3.1
* Node.js version: 10.8.0
* Operating system: Windows 10