I was wondering how I would edit the table of contents? I was using this example as a guideline: https://chrisjsewell.github.io/ipypublish/Example.view_pdf.html. However, under the contents section I don't know how make these contents my own. My guess was to edit the Example.aux file,however, when I use nbpublish it does not update the pdf. What is the best way for me to edit table of contents? Thanks!
Hi,
The issue is related to the resulting image size produced by: images_vconcat() and images_hconcat() in nb_setup.py
I believe that the (width, height) argument of thumbnail() should be set to:
   new_im.thumbnail((width, height), pimage.ANTIALIAS) should be replaced by:
   new_im.thumbnail((total_width,max_height), pimage.ANTIALIAS)

Thanks for validating and updating your code if correct

**Is your feature request related to a problem? Please describe.**
The export plugins that ship contain many duplicated properties.  Moreover, the documentation states that the procedure for creating a new export plugin is to manually copy one of the existing .json files, and then add or amend properties in the new file.  This makes it hard to maintain export configurations, as it violates the once-and-only-once principle.    

**Describe the solution you'd like**
Allow export configurations to inherit properties from a parent.  This would make it simpler to maintain and configure export plugins.

**Describe alternatives you've considered**
Manually copying and/or updating all related .json files whenever a change is made. 

**Additional context**
Add any other context or screenshots about the feature request here.

Fix for bug #119.  A new SkipIgnored preprocessor has been added, and this preprocessor is now configured in the export plugins (exluding the standard formats). 
# Bug Report

## Describe the bug

The documentation seems to imply that the ipub.ignore cell metadata applies for all formats, but in fact it is only used by slides_from_markdown preprocessor. 

## To Reproduce

Mark a cell to be ignored in a notebook, and publish it to a non-slide format, e.g. latex.

## Expected Behaviour

The converted notebook should not contain any slides whose metadata has ipub.ignore=true.

## Runtime Information

(please complete the following information)

- IPyPublish: [e.g. 0.10.10]
- Python: [e.g. 3.7.3]
- OS: [e.g. Linux Mint 18.03]
- Pandoc: [ 2.7.3]

- (optional for pdf issues) texlive: [run `tex`]
- (optional for pdf issues) latexmk: [run `latexmk --version`]

I am trying to add raw latex into the tex document when converting with nbpublish -pdf, but I cannot figure out what metadata I need to add, either in the document or cell level, to get nbpublish to recognize the latex when `"cell_type" : "raw"`. It seems nbpublish ignores the raw cells, as designed in the ['opt in' philosophy](https://github.com/chrisjsewell/ipypublish/blob/master/docs/source/nb_conversion.rst#user-content-built-in-export-configurations). Which I agree with, just want raw latex cells to opt in when needed. =)

I can inject raw latex into the tex document when the cell type is markdown, but having the raw cell_type with the a metadata tag would be good .
When I was playing around with reproducing the figures shown in the docs, it took me an embarrassing  amount of time to realize how the metadata inside the cell was vital to controlling the output.

A clearer example to reproduce the code snippets seen in the [docs](https://ipypublish.readthedocs.io/en/latest/code_cells.html) might be show the code with the corresponding metadata.

Paring the code with the metadata might also help with explaining the workflow. When I first stumbled onto the package I was a little loss with putting everything together. The [Getting Started](https://ipypublish.readthedocs.io/en/latest/getting_started.html#) page does have an [**Important**](https://github.com/chrisjsewell/ipypublish/blob/master/docs/source/getting_started.Rmd#LC140) tag related to this concern. But it's so far down the page, and it took me reading a majority of the docs to realize the significance. 

# Bug Report

## Describe the bug

When using nbpublish with the -o option, specifying a relative path such as `./` results in the following error message:

~~~
ERROR:write-text-file:the post-processor requires an absolute folder path
~~~
## To Reproduce

Steps to reproduce the behavior:

Specify a relative path when using nbpublish; e.g.:

~~~bash
nbpublish -log debug -f slides_ipypublish_all bayes-slides.ipynb -o ./target
~~~~

(for extended explanation, use the additional context section)

## Minimal Notebook Example

If possible, please create a minimal Jupyter Notebook to replicate the issue.
Then rename its file extension to `.txt` (since Github rejects .ipynb),
and drag and drop it here.

## Expected Behaviour

nbpublish should write the published files to the `target/` folder in the current working directory.

## Runtime Information

(please complete the following information)

- IPyPublish: [e.g. 0.10.10]
- Python: [e.g. 3.7.3]
- OS: [e.g. Ubuntu 18.04.3 LTS ]
- Pandoc: [2.2.3.2]

- (optional for pdf issues) texlive: [run `tex`]
- (optional for pdf issues) latexmk: [run `latexmk --version`]

- Versions of any other relevant python packages

## Additional context

This makes it difficult to automate the publication process using build tools such as Make. 

Note that although by default nbpublish will construct an absolute path, this path is still relative to the location of the source file.    Consider a simple example use-case where we want files to be written to the directory `target/`, relative to the source files, instead of the default `converted/`.  The only way to achieve this without relative paths currently is to specify the absolute path of the project, thus creating additional (but potentially unnecessary) configuration maintenance.   



## Logging

~~~
(base) sphelps@sphelps-OptiPlex-9010:~/vcs/teaching/high-frequency/slides/bayes-slides$ nbpublish -log debug -f slides_ipypublish_all bayes-slides.ipynb -o ./
INFO:ipypublish:started ipypublish v0.10.10 at Tue Nov 19 12:03:32 2019
INFO:ipypublish:logging to: ./bayes-slides.nbpub.log
INFO:ipypublish:running for ipynb(s) at: bayes-slides.ipynb
INFO:ipypublish:with conversion configuration: slides_ipypublish_all
INFO:nbmerge:Reading notebook
DEBUG:ipypublish:notebooks meta path: bayes-slides.ipynb
INFO:ipypublish:finding conversion configuration: slides_ipypublish_all
INFO:ipypublish:loading conversion configuration
INFO:ipypublish:creating exporter
INFO:ipypublish:creating template and loading filters
DEBUG:template:overwrite keys: []
DEBUG:template:overwrite keys: []
DEBUG:template:overwrite keys: []
DEBUG:template:overwrite keys: []
DEBUG:template:overwrite keys: ['notebook_all']
DEBUG:template:overwrite keys: ['notebook_output', 'notebook_all', 'notebook_input_markdown', 'notebook_input_code', 'notebook_input_code_pre', 'notebook_input_code_post', 'notebook_output_text', 'notebook_output_stream_stderr', 'notebook_output_stream_stdout']
DEBUG:template:overwrite keys: ['notebook_all', 'html_body_start', 'notebook_input_markdown']
INFO:ipypublish:creating process configuration
INFO:ipypublish:running nbconvert
DEBUG:traitlets:Applying preprocessor: TagRemovePreprocessor
DEBUG:traitlets:Applying preprocessor: RegexRemovePreprocessor
DEBUG:traitlets:Applying preprocessor: coalesce_streams
DEBUG:traitlets:Applying preprocessor: CSSHTMLHeaderPreprocessor
DEBUG:traitlets:Applying preprocessor: HighlightMagicsPreprocessor
DEBUG:traitlets:Applying preprocessor: MetaDefaults
INFO:root:adding ipub defaults to notebook
DEBUG:traitlets:Applying preprocessor: SplitOutputs
INFO:root:splitting outputs into separate cells
DEBUG:traitlets:Applying preprocessor: LatexDocLinks
INFO:resolve_links:resolving external file paths in ipub metadata to: bayes-slides.ipynb
DEBUG:traitlets:Applying preprocessor: LatexDocHTML
INFO:root:processing notebook for html output in ipub metadata to: bayes-slides.ipynb
DEBUG:traitlets:Applying preprocessor: LatexTagsToHTML
INFO:root:converting latex tags to html
DEBUG:traitlets:Applying preprocessor: LatexCaptions
INFO:captions:extracting caption cells
DEBUG:traitlets:Applying preprocessor: MarkdownSlides
INFO:root:creating slides based on markdown and existing slide tags
DEBUG:root:No toc.base_numbering in notebook metadata; starting at 1
DEBUG:traitlets:Attempting to load template template_file
DEBUG:traitlets:    template_path: .
DEBUG:remove-trailing-space:skipping incorrect mime type: text/html
ERROR:write-text-file:the post-processor requires an absolute folder path
ERROR:nbpublish:Run Failed: the post-processor requires an absolute folder path
~~~

nbconvert 6.0 is in the works: jupyter/nbconvert#1045

One thing this will definitely break is the Jinja template names (jupyter/nbconvert#1056), which are changing to e.g. `display_priority.tpl` -> `display_priority.j2`  (see also jupyter/nbconvert#1119)
 
I'm trying to use `images_gridconcat` to display a few images that I have stored locally. However, once they are displayed in a Jupyter notebook their resolution becomes much worse, probably owing to their new size. Is there a way to have them being shown with another size inline?

Adjusting `width` or `height` in `nb_setup.images_gridconcat(images, width=3000, height=2000)` does not change their inline display.

I was also able to use:

> mygrid=nb_setup.images_gridconcat(images)
> mygrid.resize((3000,2000), PIL.Image.ANTIALIAS)

But the resolution issue is still there.