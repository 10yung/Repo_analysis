homepage says you support >=5.0.0 with the current client. What's the most recent release that supports eventstore 4.x?
I have a persistent subscription and a scala consumer. My issue is that no matter what settings I set in the subscription or the client application.conf I can't seem to get more than 10 in-flight messages. 

Here is my code:

```
import java.util.concurrent.Executors
import _root_.akka.actor.{Actor, ActorLogging, ActorSystem, Props}
import eventstore.ResolvedEvent
import eventstore.akka.PersistentSubscriptionActor.ManualAck
import eventstore.akka.{EventStoreExtension, LiveProcessingStarted, PersistentSubscriptionActor}
import eventstore.core.EventStream

import scala.concurrent.duration._
import scala.concurrent.{ExecutionContext, Future}
import scala.sys.process._

trait Globals {
  implicit val system = ActorSystem()
  implicit val ec =  ExecutionContext.fromExecutor(Executors.newFixedThreadPool(30))
}

object PersistentSubscriptionExample extends App with Globals{

  val actor = system.actorOf(Props[CountPersistentStream])
  val extension = EventStoreExtension(system)

  val sub = system.actorOf(
    PersistentSubscriptionActor.props(
      connection = extension.actor,
      client = actor,
      streamId = EventStream.Id("$ce-test"),
      groupName = "test1",
      credentials = None,
      settings = extension.settings,
      autoAck = false
    ))
}

class CountPersistentStream extends Actor with ActorLogging with Globals {
  context.setReceiveTimeout(1.second)

  def receive: Receive = {
    case e: ResolvedEvent =>
      val currentSender = sender()
      Future {
        log.info(s"${e.streamId.toString}")
        Thread.sleep(1000)
        currentSender ! ManualAck(e.linkEvent.data.eventId)
      }
    case LiveProcessingStarted => log.info("live processing started")
  }
}
```

I can see that only 10 threads do work at any given time by looking at visualvm. Now if I set autoack=true, then all 30 threads will do work. 
If I use the http api `curl 'localhost:2113/subscriptions/%24ce-test/test1/15?embed=TryHarder' -H "Accept: application/vnd.eventstore.competingatom+json"` then I do get 15 in-flight.
Am I missing some configuration?
No need to maintain an example project if we can use https://scalameta.org/mdoc/
Title page says https://geteventstore.com - it should be https://eventstore.org
If EventStore receive the event twice due to a timeout or whatever, the future received for the EsConnection is null, it would be nice have an more detailed response like an object to represent it.
I'd like to send a NotAcknoledge message when for some reason I need the message to be reprocessed by a persistent subscriber, instead of only wait for the timeout...is there a way?
Hi,

I'm looking for a way to force the library to resolve DNS name after it changes. 

To recreate:

1. Start ES locally, listening on localhost.
2. Add `127.0.0.1 eventstore` to `/etc/hosts`
3. Start ConnectionActor connecting to `eventstore` domain.
4. Stop eventstore to start getting `Connection failed to eventstore/127.0.0.1:1113` errors.
5. Change `/etc/hosts`' entry so `eventstore` points to `127.0.0.2` (or whatever).

PROBLEM: ConnectionActor uses the resolved IP address, and never tries `127.0.0.2`.

What's the easiest way to force it to resolve again? Thanks!

Does anyone know if using competing consumers with persistent subscriptions is possible via the akka streams interface?
I have the system '$by_category' projection running, thus, there's a stream for each category, looking like '$ce-something'. But when I try to subscribe to it, I get an error:

>eventstore.tcp.ConnectionActor - Cannot deliver SubscribeToStreamCompleted(9834711395,Some(EventNumber(13))), client not found for correlationId: 55cc4281-00b5-4b17-a591-92ce4d47aab1, unsubscribing

Am I missing something?
I'm using version 4.1.1.
Problem
--------
When `EventStore.JVM` client subscribes too early before EventStore is fully functional (has built all of its indexes, etc), the subscription never gets notified of new additions to the stream.

The problem might be in the client, or might be in the server, but since I am not familiar with the internals, it is hard for me to gauge. 

Versions
---------
- `akka:2.5.1`
- `akka-http:10.0.5`
- `eventstore-client:4.1.0`
- `eventstore:4.0.1`

How to reproduce
-------------------

See: https://gist.github.com/samidalouche/4eaeb891dcd9c51ad987c1f87386b6d2

1. Start a fresh `EventStore` instance
2. In parallel
  - Execute `ListenForChanges` => will display just the 1,000,000th element to acknowledge it saw everything that was created by PushData
  - Execute PushData => will create 1,000,000 elements
3. Stop EventStore
4. `rm -rf /var/lib/eventstore/index`
5. Start EventStore
6. Wait for EventStore to have recreated all of its indexes (`tail -f /var/log/eventstore/DATE/*.log`)
7. Execute PushData => will create another 1,000,000 elements in the stream

At that point, `ListenForChanges` should be displaying all of the new elements. But nothing happens. 

Alternative execution paths:
- The code will work fine in the following cases if `PushData` is re-executed without steps 3 to 6 (restart `EventStore`  and remove indexes)
- The code will generally (not sure how reliably) work fine if the indexes are not removed but EventStore is restarted. Note the `generally`, since I am quite sure I have observed the same issue in production without manually removing indexes (but EventStore might have decided to rebuild its indexes for some reason).
