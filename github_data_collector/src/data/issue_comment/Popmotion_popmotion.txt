Open PR for the Popmotion 9 branch. This is a WIP and no decisions are final.

[Framer Motion](https://framer.com/motion)'s existence as a high-level API has freed space for Popmotion to be even more low-level than it currently is. Certain upcoming Framer product requirements and upcoming browser APIs like the Animation Worklet have opened up the need for access to "for `t` (time)", synchronous animation functions.

The current thrust of this PR is to move Popmotion away from the stream-heavy approach of 8 to a place where it doesn't have an opinion about how each animation runs and to break it down even further as an animation toolset. 

```javascript
const animation = tween({ from: 0, to: 1, duration: 100, ease: linear })
animation(50) // 0.5
```

It might be that there is a function added to Popmotion that is capable of taking these t-based pure functions and converting them into reactive or similar streams.

To support the more toolset-y approach of this API and to improve maintainability of the library I'm moving Popcorn's utility functions and `@popmotion/easing` back into Popmotion. Stylefire, being a DOM-specific renderer, is finally being moved out.

To recognise the deprecation of Pose this PR currently removes them from the monorepo and as links from the Popmotion homepage.
Looks like it was introduced by mistake in https://github.com/Popmotion/popmotion/commit/cf76a9a782788b731f67018bc41ad3a4dcafa7d2
Move `rollup-plugin-typescript2` and `typescript` to devDependency

---

Background: I update popmotion, got those warning

```
warning "react-pose > popmotion-pose > pose-core > rollup-plugin-typescript2@0.25.3" has unmet peer dependency "rollup@>=1.26.3".
```

It's because `rollup-plugin-typescript2` included `dependency` and it's not need on user.
## Ensure you're using the latest version
CodeSandbox examples might not always be using the latest version of Pose.

## Add the package name to bug title
"Popmotion: Object does not support 'find' method on IE 11"

## Describe the bug
Using es6 Array.prototype.find but https://popmotion.io/api/faqs/#faqs-browser-support not list it.
<img width="443" alt="image" src="https://user-images.githubusercontent.com/8586286/71228672-bc654a80-231d-11ea-8592-815cc2edd3f7.png">


## How to reproduce
Steps to reproduce the behavior:
1. Go to '...'
2. Click on '....'
3. Scroll down to '....'
4. See error

## Expected behaviour
no errors

## Link to CodePen example (or similar)

## Device information
In which environment are you reproducing the bug?
 - Device: [e.g. iPhone6]
 - OS: Windows 10
 - Browser: IE
 - Version: 11

## Additional context
Add any other context about the problem here.

style-values-type is detecting like valid color object that is not like `color.test({ red: '' })`
I create a pull request that fix this issue and many others.

https://github.com/Popmotion/popmotion/pull/854


I'm fixing several color validations for missing cases like `color.test({ red: '' }) === false` or transforms like `hsla.transform({ lightness: 45, alpha: 1 }) === 'hsla(0, 0%, 45%, 1)'`. All cases where data is missing or incorrectly assumed like a valid color input value.

**Is your feature request related to a problem? Please describe.**

I'd like to be able to style a component when hovering on it's parent and also when hovering on  the component itself. 

E.g. show a button when hovering on the parent, and then change the background colour/animate when hovering over the button.

I've made a quick example: https://codesandbox.io/s/musing-knuth-g07e6

```js
const Parent = posed.div({
  hoverable: true
})
const Child = posed.div({
  hover: {} // parent hover pose
  // if I set this, the parent's pose gets overridden
  // hoverable: true
}
```

**Describe the solution you'd like**

One idea is to add a `posePrefix` config item. I've [implemented this here](https://github.com/Popmotion/popmotion/compare/master...Bonobolabs:posePrefix?expand=1)

```js
const Parent = posed.div({
  hoverable: true,
  posePrefix: 'parent'
})
const Child = posed.div({
  parenthover: {} // parent hover pose
  hoverable: true,
  hover: {} // child hover pose
}
```

**Describe alternatives you've considered**
It would be possible to do a simplified version of this with css transitions instead, however I'd like to use react-pose's transitions.

I was trying to use the pathLength property Stylefire provides, with no luck. Stylefire's documentation reads: 
```These are all set as a progress of the total path length, from 0 to 100, which is automatically measured by Stylefire.```
This seems to be wrong, it should be '0 to 1'.
**Is your feature request related to a problem? Please describe.**
I'm trying to smoothly animate the height of a div that contains div to a new height after we replace the divs. For example, initially `div:height=500` and after changing children, `div:height=200` (of course, those values would really depend on the children).

https://codesandbox.io/s/mystifying-fog-p67w6 basically, animate between the two states displayed in the codesandbox.

I've tried to use what's described in https://popmotion.io/pose/api/dom-pose/ in the section **Explicit FLIP methods** but it's not a react solution and also, since it sets the element style as `position:absolute`, the parents ignore the animation and just switch instantaneously to the final state.

**Describe the solution you'd like**
I want the element to smoothly animate to a new height every time that it changes.

**Describe alternatives you've considered**
I've tried also, apart from this library, capturing the initial height, rendering the new height, set back the old height and then, animate to the new one, but the code was a bit too verbose. That's why I decided to go with a library.

**Additional context**
No


It seems that at some point there was collision detection on popmotion, but now it's dead: https://github.com/Popmotion/collision-detector .

I'd like to know if there is an alternative or something. Or when will collision detection be available?
To have things like shown on https://brm.io/matter-js/ : objects falling and reacting with each other, etc.