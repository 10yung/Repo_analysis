We should add more refactoring techniques.

So far, we just have one best practice for pure Ruby.

Looking forward to see more best practices.

In "Idiomatic Ruby / Combine..." the first statement is extraneous. 

```
hash = {}     # not needed, even misleading
values.inject({}) do |hash, value|
  hash.merge(value => value ** 2)
end
```

In older versions of ruby, the **hash** var would collide with the block arg; in modern ruby, they're scoped, so the hash being injected is the {} arg to **inject**, not the variable.

A more idiomatic version might be:

```
result = values.inject({}) do |hash, value|
  hash.merge(value => value ** 2)
end 
```

It would also be useful to note that the use of **merge** with **inject** is a bit tricky, and only works because merge returns the hash itself. If the last expression in the block doesn't return the injected value, the **inject** will fail in weird ways. A less error-prone way to code it is to always return the injected value:

```
result = values.inject({}) do |hash, value|
  hash[value] = value ** 2
  hash
end
```

or, as a one-liner:

```
result = values.inject({}) {|hash, value| hash[value] = value ** 2; hash}
```

The chapter on combining objects suggests that reduce and inject are different methods for different tasks.

As started [here](https://github.com/franzejr/ruby-tricks/issues/8). We should probably have categories for a bunch of tricks. We may start using some categories, such as: https://youtu.be/aBgnlBoIkVM?t=2m29s

Probably add a description in the file.
