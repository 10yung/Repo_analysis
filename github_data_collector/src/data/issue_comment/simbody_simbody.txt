Hi,

I'm refactoring my program, and I have a strange behavior: if I use the (dynamic) libraries created with RelWithDebInfo it ends with an error "free(): invalid pointer", but if I run the debug version the error is different:
```
/home/andrea/simbody/simbody/SimTKmath/Geometry/include/simmath/internal/GCVSPLUtil.h:95: static SimTK::Vec<MM, double, 1> SimTK::GCVSPLUtil::splder(int, int, SimTK::Real, const Vector&, const SimTK::Vector_<SimTK::Vec<MM, double, 1> >&) [with int K = 1; SimTK::Real = double; SimTK::Vector = SimTK::Vector_<double>]: Assertion `t >= x[0] && t <= x[x.size()-1]' failed.
```
I tested different build options (-Ox, -gx, -DNDEBUG) but the result is always the same: the program using RelWithDebInfo aborts on free() while with Debug it fails the assertion.

Let me know if you need me to test something specific.
When using SimBody in a .cu file being compiled with cuda 10.0 and gcc/g++ 7.4.0 the following error pops up regarding "conformingAdd" and "conformingSubtract" in "Vec.h":

simbody/include/simbody/SimTKcommon/internal/Vec.h(54): error: more than one instance of overloaded function "SimTK::Impl::conformingAdd" matches the argument list:
            function template "void SimTK::Impl::conformingAdd(const SimTK::Vec<1, E1, S1> &, const SimTK::Vec<1, E2, S2> &, SimTK::Vec<1, SimTK::CNT<E1>::Result<E2>::Add, 1> &)"
            function template "void SimTK::Impl::conformingAdd(const SimTK::Vec<N, E1, S1> &, const SimTK::Vec<N, E2, S2> &, SimTK::Vec<N, SimTK::CNT<E1>::Result<E2>::Add, 1> &)"
            argument types are: (const SimTK::Vec<1, SimTK::Real, 1>, const SimTK::Vec<1, SimTK::Real, 1>, SimTK::Vec<1, SimTK::Real, 1>)
          detected during:
            instantiation of "void SimTK::Impl::conformingAdd(const SimTK::Vec<N, E1, S1> &, const SimTK::Vec<N, E2, S2> &, SimTK::Vec<N, SimTK::CNT<E1>::Result<E2>::Add, 1> &) [with N=2, E1=SimTK::Real, S1=1, E2=SimTK::Real, S2=1]"


I tried to use different compilers but did not help.


This class is similar to Constraint::PrescribedMotion. 
It constrain one u of a MobilizedBody.

<!-- Reviewable:start -->
---
This change is [<img src="https://reviewable.io/review_button.svg" height="34" align="absmiddle" alt="Reviewable"/>](https://reviewable.io/reviews/simbody/simbody/671)
<!-- Reviewable:end -->

We are trying to upgrade our development system into Mojave, however we found that the calculation results differs (slightly but noticeable) from that in other platform (High Sierra or Ubuntu) so our unit test failed. Anybody has same experience or any insight about it? 
The program used MultibodySystem, TimeStepper, RungeKuttaMersonIntegrator etc., and the change happens when first TimeStepper::stepTo() function was called.

Remove manually set permissions when installing targets and files.
Addresses #658.

Signed-off-by: Rich Mattes <richmattes@gmail.com>

<!-- Reviewable:start -->
---
This change is [<img src="https://reviewable.io/review_button.svg" height="34" align="absmiddle" alt="Reviewable"/>](https://reviewable.io/reviews/simbody/simbody/660)
<!-- Reviewable:end -->

libSimTKmath calls `exit` in several places:
```
$ git grep 'exit(' .
Optimizers/src/CMAESOptimizer.cpp:    cmaes_exit(&evo);
Optimizers/src/IpOpt/IpIpoptApplication.cpp:        exit(-1);
Optimizers/src/IpOpt/IpIpoptApplication.cpp:        exit(-1);
Optimizers/src/IpOpt/IpIpoptApplication.cpp:      exit(-1);
Optimizers/src/IpOpt/IpIpoptApplication.cpp:      exit(-1);
Optimizers/src/IpOpt/IpIpoptApplication.cpp:      exit(-1);
Optimizers/src/c-cmaes/cmaes.c:void   cmaes_random_exit(cmaes_random_t *);
Optimizers/src/c-cmaes/cmaes.c:void cmaes_readpara_exit(cmaes_readpara_t *);
Optimizers/src/c-cmaes/cmaes.c:                     "; use cmaes_exit() first",0,0);
Optimizers/src/c-cmaes/cmaes.c:cmaes_exit(cmaes_t *t)
Optimizers/src/c-cmaes/cmaes.c:} /* cmaes_exit() */
Optimizers/src/c-cmaes/cmaes.c:cmaes_random_exit(cmaes_random_t *t)
Optimizers/src/c-cmaes/cmaes.c:void cmaes_readpara_exit(cmaes_readpara_t *t)
Optimizers/src/c-cmaes/cmaes.c:  exit(1);
Optimizers/src/c-cmaes/cmaes.c:      exit(1);
Optimizers/src/c-cmaes/cmaes_interface.h:void cmaes_exit(cmaes_t *);
Optimizers/src/c-cmaes/docfunctions.txt:cmaes_exit(cmaes_t *) releases the dynamically allocated memory, 
Optimizers/src/c-cmaes/docfunctions.txt:             the execution by calling exit(1). This behavoir can 
tests/adhoc/nlpqlp.cpp:            exit(0);
tests/adhoc/nlpqlp.cpp:                exit(0);
tests/adhoc/nlpqlp.cpp:                exit(0);
tests/adhoc/nlpqlp.cpp:                    exit(0);
```

Calling `exit` in a shared libary is generally considered bad practice, as the caller has no way to catch the call, and you will be exiting the main application (the caller). It's also a blocker for getting this package into Fedora.

I would suggest to replace all `exit` calls by throwing an exception. If the exception is not caught, the behavior will be the same as it is now, but a caller has the option to catch the exception and react appropriately.
After installation, a number of files is group-writable, which is uncommon. The affected files:
```
/usr/lib64/libSimTKcommon.so.3.6
/usr/lib64/libSimTKmath.so.3.6
/usr/lib64/libSimTKsimbody.so.3.6
/usr/libexec/simbody/simbody-visualizer
```

Is there a particular reason for this?

Background: I'm currently packaging simbody for Fedora, and this was noticed by `rpmlint`. I can fix this downstream, but  I'd prefer to fix this upstream. I can submit a PR if you're interested.


<!-- Reviewable:start -->
This change is [<img src="https://reviewable.io/review_button.svg" height="34" align="absmiddle" alt="Reviewable"/>](https://reviewable.io/reviews/simbody/simbody/654)
<!-- Reviewable:end -->

The original issue was resolved by #672, but another bug was reported in the comments below. I have retitled the issue to reflect the remaining problem.

Original report:
```
        Start  21: TestPlugin
 21/107 Test  #21: TestPlugin .....................................***Failed    0.01 sec
```

FreeBSD 11.2