Please help this error
error: specified package `rustlearn v0.5.0` has no binaries
In the examples shown using iris dataset, y is a vector of dimension 1 which is essentially a labelencoded vector. Running that on a one-hot encoded vector for y is not working out for me. please help on this. Below is an example code.

```use rustlearn::prelude::*;

use rustlearn::ensemble::random_forest::Hyperparameters;
use rustlearn::trees::decision_tree;

fn main() {
    let data = Array::from(&vec![vec![0.0, 1.0], vec![2.0, 3.0], vec![3.0, 4.0], vec![5.0, 6.0], vec![7.0, 8.0], vec![9.0, 10.0]]);
    let target = Array::from(&vec![vec![0.0, 1.0], vec![0.0, 1.0], vec![0.0, 1.0], vec![1.0, 0.0], vec![1.0, 0.0], vec![1.0, 0.0]]);
    let test = Array::from(&vec![vec![0.0, 1.0]]);

    println!("{:?}", data);
    println!("{:?}", target);

    let mut tree_params = decision_tree::Hyperparameters::new(data.cols());
    tree_params.min_samples_split(2)
        .max_features(2);

    let mut model = Hyperparameters::new(tree_params, 2)
        .one_vs_rest();

    model.fit(&data, &target).unwrap();

    let prediction = model.predict(&test).unwrap();
    print!("{:?}", prediction);
}
```

The output of this code is 

```
Array { rows: 6, cols: 2, order: RowMajor, data: [0.0, 1.0, 2.0, 3.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0] }
Array { rows: 6, cols: 2, order: RowMajor, data: [0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0] }
Array { rows: 1, cols: 1, order: RowMajor, data: [0.0] }
```

As you can see the dimension of the predicted values is only 1.
Correct me if I'm wrong, but it appears that for both features and classes in the fitting of decision tress, rustlearn only supports arrays of `f32` values.  Is there a reason for this limitation?   I would think that features simply need to have the `Ordering `trait and classes have the `Eq` trait.  It would be useful to have at least `f32`, `f64`, `i32`, `i64`, and `bool` I think.
If no feature indices are detected, clasifier will panic

```
   9:     0x56419f61951b - <core::option::Option<T>>::unwrap::hd8b8ff2812a12642
                               at /checkout/src/libcore/macros.rs:20
  10:     0x56419f61206a - rustlearn::trees::decision_tree::FeatureIndices::new::h713ea4d48acd865b
                               at /home/rico/.cargo/git/checkouts/rustlearn-1ee86889f45d433e/2ef4de2/src/trees/decision_tree.rs:58
  11:     0x56419f613345 - <rustlearn::trees::decision_tree::DecisionTree as rustlearn::traits::SupervisedModel<&'a rustlearn::array::dense::Array>>::fit::hcc2df1c85dd330cc
                               at /home/rico/.cargo/git/checkouts/rustlearn-1ee86889f45d433e/2ef4de2/src/trees/decision_tree.rs:323
  12:     0x56419f603adf - <rustlearn::ensemble::random_forest::RandomForest as rustlearn::traits::SupervisedModel<&'a rustlearn::array::dense::Array>>::fit::hba6d79b944d21aa4
                               at /home/rico/.cargo/git/checkouts/rustlearn-1ee86889f45d433e/2ef4de2/src/ensemble/random_forest.rs:119

```
According to the readme:

> Model serialization is supported via rustc_serialize. This will probably change to serde once compiler plugins land in stable.

Serde is stable now, so this should be ready to go.
I'm getting the error: "Invalid labels: target data is not either 0.0 or 1.0" which implies to me that only classification is supported

when the input is a `Vec<f32>` or a `Vec<Vec<f32>>`,  one uses move, the another uses reference, this is not consistent.

This is for performance, but make this clearly in docs is better.

``` rust
let array = Array::from(vec![0.0, 1.0, 2.0, 3.0]);
let array = Array::from(&vec![vec![0.0, 1.0],
                              vec![2.0, 3.0]]);
```

- [ ] a TODO.md
- [ ] bindings to cudnn
- [ ] an alternative interface to cudnn that uses OpenCL or Cilk or Rust's concurrency
- [ ] an API for NNs Ã  la Caffe
  ?

I am learning Rust, I know functional programming more than OO.
I'd love to help. Also I can write some OpenCL code too
