Commit 992ab0ec added a regexp for variable substitution but the pattern only matches digits and upper case letters. Why not lower case letters too? (I see earlier code only supported upper case too.)

I added a-z to the pattern and it made the package work on my env variables and did not break any of the unit tests. Turns out all the unit tests are for upper case variables so far. The go package doesn't have problems with lower case or mixed case variables, nor does bash.

If this is intentional, perhaps a comment in the README stating only upper case are supported for canonical reasons or something like that.

Should go without saying but just in case ... nice package. Thanks for making it available to the go community!
Fixes #78 
Using `syscall.Exec` makes the process tree simpler and is useful when you want the child process to handle the signal.

For example, the `direnv` program internally uses` syscall.Exec`.

https://github.com/direnv/direnv/blob/5b8f7d0ade4248e04899015e8628408b6f4becf3/cmd_exec.go#L67

How about it?
I get the error `(EXTRA *os.PathError=open .env: no such file or directory)` when I don't include any arguments in `Load()`. My env file is called `local.env`. It works if I hardcode `Load("local.env")`

I stick my `local.env` in the same directory as my `main.go`.  Any ideas on what I'm doing wrong? Thank you.
Hi @joho ,
I've added LoadString function to load string when I want to set environment variables from string.

In the case that I'm deploying my service, I don't want to set .env file on Dockerfile.
I'm currently using AWS parameter store. It returns a string value like below

```
FIRST_ENV="this is first value"
SECRET_VALUE="this is secret value"
```

So, I need to load from string and add a function to support that.

Please check this PR soon.

Thank you.
https://github.com/joho/godotenv/pull/54 introduced a change that meant substitution of variables from the real environment (i.e. not that derived from `.env` itself) was possible.

It looks like https://github.com/joho/godotenv/pull/58 removed this behaviour, in particular the deletion of `os.LookupEnv` - https://github.com/joho/godotenv/pull/58/files#diff-224f281bd0a4cfe0e7dcb394e8c7a585L299. Unfortunately it isn't clear from the PR if that was intended. Any chance someone can clarify?
```
// now
_test := os.Getenv("TEST_INT")
# _test = "5" || _test = ""

// feature
_test := godotenv.GetPanic("TEST_INT")
# _test = "5" || panic("TEST_INT")

// int value
_test, err := godotenv.GetInt("NATS_test")
// _test = 5
// err = nil

env TEST_INTS=1 2 3 5
// list value
_test := godotenv.GetsPanic("TEST_INTS")
# _test =["1", "2", "3", "5"] || panic("TEST_INTS")

_test := godotenv.GetIntsPanic("TEST_INTS")
# _test = [1, 2, 3, 5] || panic("TEST_INTS")

```

https://github.com/alexsuslov/godotenv/blob/master/load.go
Hi,
I've added support for substitutions for global env vars.
I should've mentioned in #70 that it'd conflict with #69 ðŸ˜¬

Didn't actually break anything, but it wasted some CPU cycles ðŸ˜‰

Signed-off-by: Dave Henderson <dhenderson@gmail.com>
It's time to support [go modules](https://github.com/golang/go/wiki/Modules). Because I don't love having to change import path on breaking changes there's a bit of a TODO list.

## Must do
- [x] Fix #66 
- [ ] Fix #64
- [ ] Add #10 
- [ ] Actually make the go module file

## Maybe
- [ ] Change behaviour in #37
- [ ] Add #38