Hi !
I noticed an issue with `/chain` endpoint, with an incomplete output in the following case : 

Given this request
```
{
    "ressource": "predict",
    "calls": [
        {
            "service": "face_detection",
            "data": [
                "https://www.vishopper.com/images/products/maxxmax/PE/10635_a-large-crowd-standing-and-listening-to-a-concert.jpg"
            ],
            "parameters": {
                "input": {
                    "connector": "image",
                    "keep_orig": true
                },
                "output": {
                    "confidence_threshold": 0.7,
                    "bbox": true
                },
                "mllib": {
                    "gpu": true,
                    "net": {
                        "test_batch_size": 1
                    }
                }
            },
            "parent_id": ""
        },
        {
            "id": "face_crop",
            "action": {
                "type": "crop"
            }
        },
        {
            "service": "age",
            "parameters": {
                "input": {
                    "connector": "image",
                    "keep_orig": true
                },
                "output": {
                    "best": 100,
                    "confidence_threshold": 0.001
                },
                "mllib": {
                    "gpu": true,
                    "net": {
                        "test_batch_size": 1
                    }
                }
            },
            "parent_id": "face_crop"
        }
    ]
}
```

if no faces are detected, then the final output will be like : 

```
{"status":{"code":200,"msg":"OK"},"head":{"method":"/chain","time":1132.0},"body":{}}
```

But I expected at least to have the list of images in the response, like /predict ressource, even if there's in the end classes is empty, like for instance :

```
{
    "status": {
        "code": 200,
        "msg": "OK"
    },
    "head": {
        "method": "/chain",
        "time": 1132.0
    },
    "body": {
        "predictions": [
            {
                "uri": "https://www.vishopper.com/images/products/maxxmax/PE/10635_a-large-crowd-standing-and-listening-to-a-concert.jpg",
                "classes": [
                ]
            }
        ]
    }
}
```

## Configuration

DeepDetect version : `commit 2b61a52ce132202bf62283eccac1b40b48398dd8`, on Docker (  ubuntu 16.04 based image )
GPU : Nvidia T4 with Cuda 10.1

FIX https://github.com/jolibrain/deepdetect/issues/674

- ymin and ymax were previoulsy swapped, ie ymin was > ymax 
- this patch correctly set ymin and ymax so that it respects caffe detection_ouput layer semantics as for instance in https://github.com/jolibrain/caffe/blob/master/src/caffe/layers/detection_output_layer.cpp#L368

- when using output of detection models, if ymin and ymax are used as is, then problems are to be exepcted, but if they are used with somthing like height = abs(ymin-ymax) , then this patch will not change anything. 
#### Configuration
- Version of DeepDetect:
    - Locally compiled on Ubuntu 18.04 LTS
- Commit (shown by the server when starting):
    - Branch `Master`, a68b6c26ee92dbde047d240d3e1506c9732b681a
- GPUS:
    - 1 x Nvidia GTX Titan X (Maxwell)

#### Your question / the problem you're facing:
I have an issue when I want to make a chain prediction using a pipeline consisting of:

- Detection 
- Crop
- Classification

The issue occurs when the crop layer tries to crop bounding boxes that are out of the image.

#### Error message (if any) / steps to reproduce the problem:
- Launch Dede

Api call
```
./dede --port 8080
```
Serveur log output
```
DeepDetect [ commit a68b6c26ee92dbde047d240d3e1506c9732b681a ]
[2020-01-15 14:20:27.723] [api] [info] Running DeepDetect HTTP server on localhost:8080

```

- Create generic detection model
```
curl -X PUT "http://localhost:8080/services/generic_det" -d '{
       "mllib":"caffe",
       "description":"object detection service",
       "type":"supervised",
       "parameters":{
         "input":{
           "connector":"image",
           "height": 300,
           "width": 300
         },
         "mllib":{
           "nclasses":2,
           "gpu": true,
           "gpuid": 0,
           "net":{
            "test_batch_size": 1
           }
         }
       },
       "model":{
         "repository":"/models/generic-detection"
       }
     }'
```

- Create generic classification model
```
curl -X PUT "http://localhost:8080/services/generic_classification" -d '{
       "mllib":"caffe",
       "description":"object detection service",
       "type":"supervised",
       "parameters":{
         "input":{
           "connector":"image",
           "height": 300,
           "width": 300
         },
         "mllib":{
           "nclasses":2,
           "gpu": true,
           "gpuid": 0,
           "net":{
            "test_batch_size": 1
           }
         }
       },
       "model":{
         "repository":"/models/generic-classification"
       }
     }'
```
- Then make a chain call

Api call
```
curl -X POST 'http://localhost:8080/chain/test_bboxes' -d '{
    "chain": {
            "resource": "predict",
            "calls": [
            {
                "data": ["https://i.stack.imgur.com/o1z7p.jpg"],
                "parameters": {
                    "input": {
                        "connector": "image",
                        "keep_orig": true
                    },
                    "mllib": {
                        "gpu": true,
                        "net":{
                            "test_batch_size": 1
                        }
                    },
                    "output": {
                        "bbox": true,
                        "confidence_threshold": 0.0
                    }
                },
            "service": "generic_det"
            },
            {
                "id":"face_crop",
                "action": {
                    "type": "crop"
                }
            },
            {
                "parent_id": "face_crop",
                "parameters": {
                    "input": {"connector": "image", "keep_orig": true},
                    "mllib": {"gpu": true},
                    "output": {"best": -1}
                },
                "service": "classification"
            }
      ]
   }
}'

```
Serveur log output
```
[2020-01-15 14:22:48.028] [test_bboxes] [info] number of calls=3
[2020-01-15 14:22:48.028] [test_bboxes] [info] [0] / executing predict on service generic_det
[2020-01-15 14:22:48.170] [test_bboxes] [info] [1] / executing action crop
OpenCV Error: Assertion failed (0 <= roi.x && 0 <= roi.width && roi.x + roi.width <= m.cols && 0 <= roi.y && 0 <= roi.height && roi.y + roi.height <= m.rows) in Mat, file /build/opencv-L2vuMj/opencv-3.2.0+dfsg/modules/core/src/matrix.cpp, line 522
[2020-01-15 14:22:48.171] [api] [error] 127.0.0.1 "POST /chain/test_bboxes" 500 143
```

If I make a prediction using only the detection service I have some bounding boxes out of ranges. Here are a few examples:
```
{"bbox":{"ymin":1712.296630859375,"xmax":1959.0,"xmin":7876.951171875,"ymax":246.5074462890625},"cat":"cl1","prob":0.11549062281847}
{"bbox":{"ymin":1959.0,"xmax":1959.0,"xmin":8162.67041015625,"ymax":7838.86865234375},"cat":"cl1","prob":0.12499533593654633}
```

The generic detection model is not well trained on purpose to see what happens when it generates some weird bounding boxes. It would be nice to have a check for the bounding box before cropping in order to avoid this
output logits in raw measure
#### Configuration
- Building on Ubuntu 18.04 in docker, CPU only, with Caffe+TF enabled. 
- Deepdetect v0.9.5

#### Steps to reproduce the problem:
```
cmake .. -DUSE_TF=ON -DUSE_TF_CPU_ONLY=ON -DUSE_DLIB=ON  -DUSE_DLIB_CPU_ONLY=ON -DUSE_CAFFE_CPU_ONLY=ON
make
```

#### Build error
```
/opt/deepdetect/build/tensorflow_cc/src/tensorflow_cc/tensorflow_cc/build/tensorflow/tensorflow/core/framework/device_base.h: In member function 'virtual tensorflow::Allocator* tensorflow::DeviceBase::GetAllocator(tensorflow::AllocatorAttributes)':
/opt/deepdetect/build/tensorflow_cc/src/tensorflow_cc/tensorflow_cc/build/tensorflow/tensorflow/core/framework/device_base.h:184:14: error: invalid initialization of reference of type 'const string& {aka const std::__cxx11::basic_string<char>&}' from expression of type 'const int'
     LOG(FATAL) << "GetAllocator() is not implemented.";
              ^
In file included from /opt/deepdetect/build/caffe_dd/src/caffe_dd/include/caffe/common.hpp:7:0,
                 from /opt/deepdetect/build/caffe_dd/src/caffe_dd/include/caffe/blob.hpp:8,
                 from /opt/deepdetect/build/caffe_dd/src/caffe_dd/include/caffe/caffe.hpp:7,
                 from /opt/deepdetect/src/backends/caffe/caffeinputconns.h:30,
                 from /opt/deepdetect/src/imginputfileconn.h:735,
                 from /opt/deepdetect/src/backends/tf/tflib.cc:24:
/opt/deepdetect/build/caffe_dd/src/caffe_dd/include/caffe/llogging.h:199:20: note: in passing argument 1 of 'CaffeLogger LOG(const string&)'
 inline CaffeLogger LOG(const std::string &severity)
                    ^~~
In file included from /opt/deepdetect/build/tensorflow_cc/src/tensorflow_cc/tensorflow_cc/build/tensorflow/tensorflow/core/framework/op_kernel.h:28:0,
                 from /opt/deepdetect/build/tensorflow_cc/src/tensorflow_cc/tensorflow_cc/build/tensorflow/tensorflow/core/framework/function.h:26,
                 from /opt/deepdetect/build/tensorflow_cc/src/tensorflow_cc/tensorflow_cc/build/tensorflow/tensorflow/core/graph/graph.h:44,
                 from /opt/deepdetect/build/tensorflow_cc/src/tensorflow_cc/tensorflow_cc/build/tensorflow/tensorflow/cc/framework/ops.h:23,
                 from /opt/deepdetect/build/tensorflow_cc/src/tensorflow_cc/tensorflow_cc/build/tensorflow/tensorflow/cc/ops/const_op.h:19,
                 from /opt/deepdetect/src/backends/tf/tfinputconns.h:29,
                 from /opt/deepdetect/src/imginputfileconn.h:739,
                 from /opt/deepdetect/src/backends/tf/tflib.cc:24:
/opt/deepdetect/build/tensorflow_cc/src/tensorflow_cc/tensorflow_cc/build/tensorflow/tensorflow/core/framework/device_base.h: In member function 'virtual tensorflow::Allocator* tensorflow::DeviceBase::GetScopedAllocator(tensorflow::AllocatorAttributes, tensorflow::int64)':
/opt/deepdetect/build/tensorflow_cc/src/tensorflow_cc/tensorflow_cc/build/tensorflow/tensorflow/core/framework/device_base.h:199:14: error: invalid initialization of reference of type 'const string& {aka const std::__cxx11::basic_string<char>&}' from expression of type 'const int'
     LOG(FATAL) << "Device does not implement GetScopedAllocator()";
              ^
In file included from /opt/deepdetect/build/caffe_dd/src/caffe_dd/include/caffe/common.hpp:7:0,
                 from /opt/deepdetect/build/caffe_dd/src/caffe_dd/include/caffe/blob.hpp:8,
                 from /opt/deepdetect/build/caffe_dd/src/caffe_dd/include/caffe/caffe.hpp:7,
                 from /opt/deepdetect/src/backends/caffe/caffeinputconns.h:30,
                 from /opt/deepdetect/src/imginputfileconn.h:735,
                 from /opt/deepdetect/src/backends/tf/tflib.cc:24:
/opt/deepdetect/build/caffe_dd/src/caffe_dd/include/caffe/llogging.h:199:20: note: in passing argument 1 of 'CaffeLogger LOG(const string&)'
 inline CaffeLogger LOG(const std::string &severity)
```

This seems to be an issue when building with Caffe+TF enabled, where the TF version is v0.15.0 (and bazel v0.24.0). When following the same steps with TF v0.13.1 and bazel v0.21.0, there is no error.

I'm not sure if any of the changes in #684 are related. I see that the travis builds worked, but I'm not sure if Caffe+TF are built in docker in those builds the same way.

These are the differences in https://github.com/FloopCZ/tensorflow_cc between v0.13.1 and v0.15.0: https://github.com/FloopCZ/tensorflow_cc/compare/v1.13.1...v1.15.0

at test time : 
- remove useless iteration over outputblobs 
- get blob by name 

tested OK on car detection 
This allows finetuning strong OCR models from pre-trained squeeze-excitation ResNet architectures.
- Bazel version 0.24 for TF builds
- Maintainer name update
- All builds based on CUDA 9 to avoid unsupported ops in CUDA 8.
this PR 
- cleans up cmake build file in order to build cleanly against TensorRT 5, 6 and 7 
- allows to build agains oss parts of tensorRT + closed tensorRT 

compile dede with : 
- `-DUSE_TENSORRT=ON` for full closed source version and 
- `-DUSE_TENSORRT=ON -DUSE_TENSORRT_OSS=ON` for tensorrt + open source parts

have you test the resnet18+ctc+blstm net？
