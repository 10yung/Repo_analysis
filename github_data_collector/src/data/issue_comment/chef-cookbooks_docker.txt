Hi,

Would it be possible to add an ability to configure the reload signal? eg. `reload_signal` like it's possible to configure the `signal` for "kill". Currently it's hardcoded here:

https://github.com/chef-cookbooks/docker/blob/8a323a346e9d5f301342de82ad4ef3c55c179266/libraries/docker_container.rb#L646

But for some containers, eg. PHP-FPM containers the process needs a `USR2` signal to reload configuration changes, and not `SIGHUP`.

Thanks.
### Cookbook version
docker@4.11.0

### Chef-client version
Chef 12.18.31

### Platform Details
x86_64-linux, Ubuntu 16.04 / xenial

### Scenario:
The docker service will no longer start. It returns the errors:

```sudo systemctl start docker
Failed to start docker.service: Unit containerd.service not found.```

```journalctl -u docker
-- Logs begin at Mon 2019-12-23 19:33:56 UTC, end at Tue 2019-12-24 00:44:19 UTC. --
systemd[1]: Starting Docker Application Container Engine...
sysctl[1143]: net.ipv4.ip_forward = 1
sysctl[1174]: net.ipv6.conf.all.forwarding = 1
dockerd[1183]: time="2019-12-23T19:33:59.636335349Z" level=info msg="parsed scheme: \"unix\"" module=grpc
dockerd[1183]: time="2019-12-23T19:33:59.636382928Z" level=info msg="scheme \"unix\" not registered, fallback to default schem
dockerd[1183]: time="2019-12-23T19:33:59.636538034Z" level=info msg="ccResolverWrapper: sending new addresses to cc: [{unix://
dockerd[1183]: time="2019-12-23T19:33:59.636556612Z" level=info msg="ClientConn switching balancer to \"pick_first\"" module=g
dockerd[1183]: time="2019-12-23T19:33:59.636590979Z" level=info msg="pickfirstBalancer: HandleSubConnStateChange: 0xc4201f2790
dockerd[1183]: time="2019-12-23T19:34:20.087425946Z" level=warning msg="grpc: addrConn.createTransport failed to connect to {u
dockerd[1183]: time="2019-12-23T19:34:20.087567189Z" level=info msg="pickfirstBalancer: HandleSubConnStateChange: 0xc4201f2790
dockerd[1183]: time="2019-12-23T19:34:20.088252926Z" level=info msg="pickfirstBalancer: HandleSubConnStateChange: 0xc4201f2790
dockerd[1183]: time="2019-12-23T19:34:40.088511385Z" level=warning msg="grpc: addrConn.createTransport failed to connect to {u
dockerd[1183]: time="2019-12-23T19:34:40.089207558Z" level=info msg="pickfirstBalancer: HandleSubConnStateChange: 0xc4201f2790
dockerd[1183]: time="2019-12-23T19:34:40.089592965Z" level=info msg="pickfirstBalancer: HandleSubConnStateChange: 0xc4201f2790
dockerd[1183]: Failed to connect to containerd: failed to dial "/run/containerd/containerd.sock": context deadline exceeded
systemd[1]: docker.service: Main process exited, code=exited, status=1/FAILURE
systemd[1]: Failed to start Docker Application Container Engine.
systemd[1]: docker.service: Unit entered failed state.
systemd[1]: docker.service: Failed with result 'exit-code'.
systemd[1]: docker.service: Service hold-off time over, scheduling restart.
systemd[1]: docker.service: Failed to schedule restart job: Unit containerd.service not found.
systemd[1]: docker.service: Unit entered failed state.
systemd[1]: docker.service: Failed with result 'resources'.```

The cookbook's installed package `docker-ce` doesn't automatically install `containerd` but now the cookbook writes a systemd service which expects it. Here's the installed package's spec which doesn't include `containerd`:

```dpkg-query -s docker-ce
Package: docker-ce
Status: install ok installed
Priority: optional
Section: admin
Installed-Size: 193092
Maintainer: Docker <support@docker.com>
Architecture: amd64
Version: 18.06.1~ce~3-0~ubuntu
Replaces: docker-engine
Depends: iptables, init-system-helpers (>= 1.18~), lsb-base (>= 4.1+Debian11ubuntu7), libc6 (>= 2.17), libdevmapper1.02.1 (>= 2:1.02.97), libltdl7 (>= 2.4.6), libseccomp2 (>= 2.3.0), libsystemd0
Recommends: aufs-tools, ca-certificates, cgroupfs-mount | cgroup-lite, git, pigz, xz-utils, apparmor
Conflicts: docker (<< 1.5~), docker-ee, docker-engine, docker-engine-cs, docker.io, lxc-docker, lxc-docker-virtual-package
Conffiles:
 /etc/default/docker 82d6a44e99db1a3b74f7835e4f5e1b01
 /etc/init.d/docker e593c2ca26facbf89018d4c708738c97
 /etc/init/docker.conf 123f7e2b4078fa11b4eecc4c4f9bdc25
Description: Docker: the open-source application container engine
 Docker is an open source project to build, ship and run any application as a
 lightweight container
 .
 Docker containers are both hardware-agnostic and platform-agnostic. This means
 they can run anywhere, from your laptop to the largest cloud compute instance and
 everything in between - and they don't require you to use a particular
 language, framework or packaging system. That makes them great building blocks
 for deploying and scaling web apps, databases, and backend services without
 depending on a particular stack or provider.
Homepage: https://www.docker.com```

### Steps to Reproduce:
1. run recipe[docker::default]
2. `systemctl start docker`

### Expected Result:
I expect docker to be running.

### Actual Result:
Docker is not running. It can be fixed by manually installing `containerd` and restarting.

```sudo apt install containerd
sudo systemctl start docker # works now```

This cookbook shouldn't depend on containerd or should provide it.

### Description

See the issue linked below.  Set the default ipc_mode to "shareable" - tested clean (non-cookbook) installs of docker version 19.03.5-3 on both ubuntu and fedora and default ipc_mode was "shareable."
https://github.com/docker/go-docker/blob/4daae26030ad00e348edddff9767924ae57a3b82/api/swagger.yaml#L696-L697
```
                    If not specified, daemon default is used, which can either be `"private"`
                    or `"shareable"`, depending on daemon version and configuration.
```
Default memory_swap of 0 should be fine per https://docs.docker.com/config/containers/resource_constraints/#--memory-swap-details

Also updated resource params per the chef true/false style introduced in chef 15.6.0:
https://github.com/chef/cookstyle/blob/master/config/cookstyle.yml#L110-L116
https://github.com/chef/cookstyle/pull/462

### Issues Resolved

https://github.com/chef-cookbooks/docker/issues/1083

### Check List

- [X ] All tests pass. See <https://github.com/chef-cookbooks/community_cookbook_documentation/blob/master/TESTING.MD>
- [X ] New functionality includes testing.
- [X ] New functionality has been documented in the README if applicable
- [X ] All commits have been signed for the Developer Certificate of Origin. See <https://github.com/chef-cookbooks/community_cookbook_documentation/blob/master/CONTRIBUTING.MD>

### Cookbook version
4.10.0

### Chef-client version
14.8.12

### Platform Details
Ubuntu 19.10

### Scenario:
Install docker-ce on Ubuntu 19.10.

For what it's worth, it doesn't look like there's a eoan repo yet. https://download.docker.com/linux/ubuntu/dists/

### Steps to Reproduce:
Run a `docker_installation_package 'default'` on an Ubuntu 19.10 instance.

### Expected Result:
Install docker-ce

### Actual Result:
https://gist.github.com/jlosito/354a3b08682bfa65546bd80ddd1e52a6

### Cookbook version
4.10.0 and below

### Chef-client version
15.4 and greater

### Platform Details
n/a

### Scenario:
See - https://github.com/chef/chef/blob/master/RELEASE_NOTES.md#converge_if_changed-improvements 
This has a major impact to the docker_container resource which will result in the containers being redeployed upon each converge.
```
- update your_container
    -   set ipc_mode    to "" (was "shareable")
    -   set memory_swap to 0 (was -1)
```
https://github.com/chef-cookbooks/docker/blob/master/libraries/docker_container.rb#L32
`property :ipc_mode, String, default: ''`
https://github.com/chef-cookbooks/docker/blob/master/libraries/docker_container.rb (edited) 
`property :memory_swap, [String, Integer], coerce: proc { |v| coerce_to_bytes(v) }, default: 0`

it's now taking into consideration the default values and restarting the containers.
chef < 15.4 return ipc_mode shareable and memory_swap -1 but do not converge/restart.

this cookbook will require investigation/fixes into default value handling.

### Steps to Reproduce:
run the docker_container resource with chef-client > 15.4

### Expected Result:
converge_if_changed says there are no changes and the container does not restart

### Actual Result:
converge_if_changed says there ARE changes (default values) and the container restarts upon every converge

### Cookbook version
All versions.

### Chef-client version
14.8.12

### Platform Details
Ubuntu 18.04

### Scenario:
A `docker_exec` invocation should fail if the underlying command fails, but instead the failure is silently ignored.

### Steps to Reproduce:

Execute the following recipe in a cookbook depending on the docker-cookbook

    docker_container 'test_container' do
        image 'ubuntu'
        tag '18.04'
        command ['tail', '-f', '/dev/null']
    end

    docker_exec 'should_fail' do
       cmd ['false']
       container 'test_container'
    end

### Expected Result:
The Chef run should abort with an error.
 
### Actual Result:
No error is signalled to the chef run, so a failing command in `docker_exec` is silently ignored.

### Offending code
It can easily be seen, that the return value from the Docker API containing the return code is simply ignored: <https://github.com/chef-cookbooks/docker/blob/master/libraries/docker_exec.rb#L16>. Also, it would be nice if `docker_exec` would (optionally?) stream the stdout and stderr of the executed command to the log.

The resource should have a `returns` property, that sets which return codes are acceptable, and error out otherwise. To not break the compatibility with existing code, we could let `returns` default to `nil`, which would keep the current semantics of ignoring the return code. This should, however, be fixed at the next major release.
### Cookbook version
v4.9.3

### Chef-client version
14.13.11

### Platform Details
CentOS 7 running on AWS EC2

### Scenario:
Run the container recipe and provide env_file attribute for a file that does not yet exist on the filesystem.

I am running the Docker cookbook via a wrapper cookbook I wrote: https://github.com/USGS-CIDA/chef-cookbook-owi-docker/blob/master/recipes/docker_container.rb

Part of my wrapper cookbook includes a recipe that pulls files down from remote locations: https://github.com/USGS-CIDA/chef-cookbook-owi-docker/blob/master/recipes/file_utils.rb

I am trying to run file_utils *then* docker_container in order because on a new system,the file_utils recipe will pull down a config file from s3 which I then use as the env_file attribute within the container recipe.

Unfortunately, during the cookbook compile phase, I am seeing the following error:

`Errno::ENOENT: No such file or directory @ rb_sysopen - /root/configuration/sonarqube.env`

And this stack trace:

```
/var/chef/cache/cookbooks/docker/libraries/docker_container.rb:315:in `readlines'
/var/chef/cache/cookbooks/docker/libraries/docker_container.rb:315:in `block in coerce_env_file'
/var/chef/cache/cookbooks/docker/libraries/docker_container.rb:315:in `map'
/var/chef/cache/cookbooks/docker/libraries/docker_container.rb:315:in `coerce_env_file'
/var/chef/cache/cookbooks/docker/libraries/docker_container.rb:25:in `block in <class:DockerContainer>'
/opt/chef/embedded/lib/ruby/gems/2.5.0/gems/chef-14.13.11/lib/chef/property.rb:696:in `instance_exec'
/opt/chef/embedded/lib/ruby/gems/2.5.0/gems/chef-14.13.11/lib/chef/property.rb:696:in `exec_in_resource'
/opt/chef/embedded/lib/ruby/gems/2.5.0/gems/chef-14.13.11/lib/chef/property.rb:493:in `coerce'
/opt/chef/embedded/lib/ruby/gems/2.5.0/gems/chef-14.13.11/lib/chef/property.rb:725:in `coerce_and_validate'
/opt/chef/embedded/lib/ruby/gems/2.5.0/gems/chef-14.13.11/lib/chef/property.rb:709:in `input_to_stored_value'
/opt/chef/embedded/lib/ruby/gems/2.5.0/gems/chef-14.13.11/lib/chef/property.rb:428:in `set'
/opt/chef/embedded/lib/ruby/gems/2.5.0/gems/chef-14.13.11/lib/chef/property.rb:350:in `call'
/opt/chef/embedded/lib/ruby/gems/2.5.0/gems/chef-14.13.11/lib/chef/property.rb:571:in `env_file'
/var/chef/cache/cookbooks/owi_docker/recipes/docker_container.rb:27:in `block (2 levels) in from_file'
/opt/chef/embedded/lib/ruby/gems/2.5.0/gems/chef-14.13.11/lib/chef/resource_builder.rb:66:in `instance_eval'
/opt/chef/embedded/lib/ruby/gems/2.5.0/gems/chef-14.13.11/lib/chef/resource_builder.rb:66:in `build'
/opt/chef/embedded/lib/ruby/gems/2.5.0/gems/chef-14.13.11/lib/chef/dsl/declare_resource.rb:314:in `build_resource'
/opt/chef/embedded/lib/ruby/gems/2.5.0/gems/chef-14.13.11/lib/chef/dsl/declare_resource.rb:271:in `declare_resource'
/opt/chef/embedded/lib/ruby/gems/2.5.0/gems/chef-14.13.11/lib/chef/dsl/resources.rb:38:in `docker_container'
/var/chef/cache/cookbooks/owi_docker/recipes/docker_container.rb:8:in `block in from_file'
/var/chef/cache/cookbooks/owi_docker/recipes/docker_container.rb:7:in `each'
/var/chef/cache/cookbooks/owi_docker/recipes/docker_container.rb:7:in `from_file'
/opt/chef/embedded/lib/ruby/gems/2.5.0/gems/chef-14.13.11/lib/chef/mixin/from_file.rb:34:in `instance_eval'
/opt/chef/embedded/lib/ruby/gems/2.5.0/gems/chef-14.13.11/lib/chef/mixin/from_file.rb:34:in `from_file'
/opt/chef/embedded/lib/ruby/gems/2.5.0/gems/chef-14.13.11/lib/chef/cookbook_version.rb:199:in `load_recipe'
/opt/chef/embedded/lib/ruby/gems/2.5.0/gems/chef-14.13.11/lib/chef/run_context.rb:350:in `load_recipe'
/opt/chef/embedded/lib/ruby/gems/2.5.0/gems/chef-14.13.11/lib/chef/run_context/cookbook_compiler.rb:166:in `block in compile_recipes'
/opt/chef/embedded/lib/ruby/gems/2.5.0/gems/chef-14.13.11/lib/chef/run_context/cookbook_compiler.rb:163:in `each'
/opt/chef/embedded/lib/ruby/gems/2.5.0/gems/chef-14.13.11/lib/chef/run_context/cookbook_compiler.rb:163:in `compile_recipes'
/opt/chef/embedded/lib/ruby/gems/2.5.0/gems/chef-14.13.11/lib/chef/run_context/cookbook_compiler.rb:79:in `compile'
/opt/chef/embedded/lib/ruby/gems/2.5.0/gems/chef-14.13.11/lib/chef/run_context.rb:199:in `load'
/opt/chef/embedded/lib/ruby/gems/2.5.0/gems/chef-14.13.11/lib/chef/policy_builder/expand_node_object.rb:97:in `setup_run_context'
/opt/chef/embedded/lib/ruby/gems/2.5.0/gems/chef-14.13.11/lib/chef/client.rb:515:in `setup_run_context'
/opt/chef/embedded/lib/ruby/gems/2.5.0/gems/chef-14.13.11/lib/chef/client.rb:281:in `run'
/opt/chef/embedded/lib/ruby/gems/2.5.0/gems/chef-14.13.11/lib/chef/application.rb:321:in `block in fork_chef_client'
/opt/chef/embedded/lib/ruby/gems/2.5.0/gems/chef-14.13.11/lib/chef/application.rb:309:in `fork'
/opt/chef/embedded/lib/ruby/gems/2.5.0/gems/chef-14.13.11/lib/chef/application.rb:309:in `fork_chef_client'
/opt/chef/embedded/lib/ruby/gems/2.5.0/gems/chef-14.13.11/lib/chef/application.rb:274:in `block in run_chef_client'
/opt/chef/embedded/lib/ruby/gems/2.5.0/gems/chef-14.13.11/lib/chef/local_mode.rb:44:in `with_server_connectivity'
/opt/chef/embedded/lib/ruby/gems/2.5.0/gems/chef-14.13.11/lib/chef/application.rb:261:in `run_chef_client'
/opt/chef/embedded/lib/ruby/gems/2.5.0/gems/chef-14.13.11/lib/chef/application/client.rb:484:in `sleep_then_run_chef_client'
/opt/chef/embedded/lib/ruby/gems/2.5.0/gems/chef-14.13.11/lib/chef/application/client.rb:473:in `block in interval_run_chef_client'
/opt/chef/embedded/lib/ruby/gems/2.5.0/gems/chef-14.13.11/lib/chef/application/client.rb:472:in `loop'
/opt/chef/embedded/lib/ruby/gems/2.5.0/gems/chef-14.13.11/lib/chef/application/client.rb:472:in `interval_run_chef_client'
/opt/chef/embedded/lib/ruby/gems/2.5.0/gems/chef-14.13.11/lib/chef/application/client.rb:456:in `run_application'
/opt/chef/embedded/lib/ruby/gems/2.5.0/gems/chef-14.13.11/lib/chef/application.rb:66:in `run'
/opt/chef/embedded/lib/ruby/gems/2.5.0/gems/chef-14.13.11/bin/chef-client:25:in `<top (required)>'
```

What this tells me is that the compile phase for the Docker cookbook checks if a file specified in env_file is present. I don't expect this file to exist during the compile phase. I expect this file to appear during a normal Chef run.

Thoughts?
### Description

The docker_installation_package resource omits the "3" epoch number on versions >= 18.09 which causes yum's version comparison to get confused and think that a version is older than the installed version even if the primary version number if greater. This means you can't install one version and then upgrade it later. Instead you get a warning like the following:

```
yum_package[docker-ce] action install[2019-09-12T00:00:01+00:00] WARN:
yum_package[docker-ce] docker-ce has installed version 3:18.09.7-3.el7.x86_64,
which is newer than available version 19.03.2-3.el7. Skipping...)
```

Best I can tell, the epoch number is currently static at 3 in the docker-ce RPM spec (see https://github.com/docker/docker-ce-packaging/blob/master/rpm/SPECS/docker-ce.spec) so I've kept the same approach as with Debian/Ubuntu distros.

### Issues Resolved

#1065 (Partly anyway. There may be additional work on Ubuntu. Not much context for that issue)

### Check List

- [ ] All tests pass. See <https://github.com/chef-cookbooks/community_cookbook_documentation/blob/master/TESTING.MD>
- [x] New functionality includes testing.
- [ ] New functionality has been documented in the README if applicable
- [x] All commits have been signed for the Developer Certificate of Origin. See <https://github.com/chef-cookbooks/community_cookbook_documentation/blob/master/CONTRIBUTING.MD>

### Description

[Describe what this change achieves]

### Issues Resolved

[List any existing issues this PR resolves]

### Check List

- [ ] All tests pass. See <https://github.com/chef-cookbooks/community_cookbook_documentation/blob/master/TESTING.MD>
- [ ] New functionality includes testing.
- [ ] New functionality has been documented in the README if applicable
- [ ] All commits have been signed for the Developer Certificate of Origin. See <https://github.com/chef-cookbooks/community_cookbook_documentation/blob/master/CONTRIBUTING.MD>

The CI is broken because it waits for user interaction to accept the license for chef 15 (this is changed behaviour of the chef installation scripts). See, for example, this CI run: <https://travis-ci.org/chef-cookbooks/docker/jobs/572659070>. This runs in a timeout and causes all CI checks to fail spuriously. This means that the environment variable set in your `.travis.yml` (which follows the solution here <https://docs.chef.io/chef_license_accept.html>) does not work as intended.