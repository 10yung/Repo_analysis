In Opera when the fix is applied and `deleteCount` is missing no elements are deleted. This is incorrect and when `deleteCount` is missing the behaviour should be to delete all elements from `start` onwards
https://github.com/es-shims/es5-shim/blob/d5297adf9a9ca5669b3d43153fa2d8092e879f9c/es5-shim.js#L307

```js
function f () {}
var b = f.bind({});
new f instanceof b;// true in native, but false in shim
```
When we traverse the prototype chain of `obj`, as follows
```
var obj = {};
while (obj) {
  obj = Object.getPrototypeOf(obj);
}
```
The method `getPrototypeOf` always return a `prototypeOfObject` that cause the endless loop
See https://github.com/Microsoft/ChakraCore/issues/3929 and https://github.com/Microsoft/ChakraCore/issues/4421 .  Reproducible example:

```js
(-6.9e-11).toExponential(4);
```

Pretty much every other JS engine, even IE8+, give the expected `"-6.9000e-11"` but Edge 15/16 give `"-6.8000e-11"`

ping @ljharb
https://bugs.webkit.org/show_bug.cgi?id=170264

Can be detected and fixed I believe? Quite large numbers of people affected that are using libraries such as big.js, bignumber.js and decimal.js. https://github.com/MikeMcl/bignumber.js/issues/120

Anyway, just a heads up.
__IE__
![image](https://user-images.githubusercontent.com/7333669/29328121-201e4134-81fa-11e7-8273-147434b7a919.png)

__Other browsers__
![image](https://user-images.githubusercontent.com/7333669/29328140-33dea7ea-81fa-11e7-8db3-12e7c6696136.png)

Hello devs, 

Would you please be kind enough to make clear what is the role of the licenses in the contributors.md file?From a legal point of view, what should we understand by the copyrights described into that file? As the whole component is licensed under MIT, does those copyrights influence the global license in any way? Are there any specific snippets from the source code that are under those licenses found in contributirs.md file? 

Thank you in advance!

Br,
Alexandru
The new version of Firefox (52) broke the parseInt() behavior on the test `if (parseInt(ws + '08') !== 8 || parseInt(ws + '0x16') !== 22)` (line 1956) because of wrong whitespace characters ; returning NaN for both instead of 8 and 22.

Thus parseInt() is redefined by your shim. However, the case `parseInt()` (empty parameter, or undefined, or null) throws an exception while using `trim(string)` (line 1962) instead of returning NaN (as default behavior) - trim() should never be called with undefined or null as parameter.

This fixes the issue : `if (str === undefined || str === null) str = "";` (to add before line 1962) ; Do not attempt to return NaN directly instead as it has bad side effects on some libraries (such as PerfectScrollbar) - I don't know why but it does.

_Full example:_
```javascript
// ES-5 15.1.2.2
/* eslint-disable radix */
if (parseInt(ws + '08') !== 8 || parseInt(ws + '0x16') !== 22) {
/* eslint-enable radix */
    /* global parseInt: true */
    parseInt = (function (origParseInt) {
        var hexRegex = /^[\-+]?0[xX]/;
        return function parseInt(str, radix) {
            if (str === undefined || str === null) str = "" ; // Fix here
            var string = trim(str);
            var defaultedRadix = $Number(radix) || (hexRegex.test(string) ? 16 : 10);
            return origParseInt(string, defaultedRadix);
        };
    }(parseInt));
}
```

The redefined function parseFloat() should have the same fix too (before line 1974).

----

I've reported the parseInt() issue to Bugzilla, and here is the answer : https://bugzilla.mozilla.org/show_bug.cgi?id=1347869

To sum up, `\u180E` is no longer supported in Unicode 9 as a whitespace. This particular test should be removed in the `ws` variable (line 1903).

@ljharb I have added two tests which show thin places of both decisions in FF versions > 34 (current one and my previous one) [from line 39 on](https://github.com/YLeight/es5-shim/blob/issue%23412/tests/spec/s-string.js#L39)
My current solution is a littlle bit difficult, but I have not found more simple one yet.
In case when we have regular expression with assertion `?=`, the `wrappedReplaceValue`, which decorate the original `replaceValue` function, can't define correct arguments, because the coincidence which was passed to `replaceValue` function don't match the RegExp pattern and the final arguments have just only two values - the offset of the matched sub-string within the whole string being examined, and the whole string being examined.
There is a certain problem, when whole RegExp don't match with found coincidence, but in fact, there is a coincidence [StringPrototype.replace polyfill](https://github.com/es-shims/es5-shim/blob/master/es5-shim.js#L1892)
