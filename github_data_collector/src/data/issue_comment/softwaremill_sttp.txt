Updates [org.scala-sbt:sbt](https://github.com/sbt/sbt) [from 1.3.6 to 1.3.7](https://github.com/sbt/sbt/compare/v1.3.6...v1.3.7).
[Release Notes/Changelog](https://github.com/sbt/sbt/releases/tag/v1.3.7)

I'll automatically update this PR to resolve conflicts as long as you don't change it yourself.

If you'd like to skip this version, you can just close this PR. If you have any feedback, just mention me in the comments below.

Have a fantastic day writing Scala!

<details>
<summary>Ignore future updates</summary>

Add this to your `.scala-steward.conf` file to ignore future updates of this dependency:
```
updates.ignore = [ { groupId = "org.scala-sbt", artifactId = "sbt" } ]
```
</details>

labels: library-update, semver-patch
Currently `OpenTracingBackend` relies on span marked as active in the `Tracer` when creating a new span. This is correct yet not very convenient for use cases which dont use this method of span propagation. 
Alternative could be to have a specific sttp tag used for setting up the span which should be used a parent and fallback to tracer when its missing.

WDYT?
Updates [com.squareup.okhttp3:okhttp](https://github.com/square/okhttp) from 4.2.2 to 4.3.1.
[Release Notes/Changelog](https://github.com/square/okhttp/blob/master/CHANGELOG.md)

I'll automatically update this PR to resolve conflicts as long as you don't change it yourself.

If you'd like to skip this version, you can just close this PR. If you have any feedback, just mention me in the comments below.

Have a fantastic day writing Scala!

<details>
<summary>Ignore future updates</summary>

Add this to your `.scala-steward.conf` file to ignore future updates of this dependency:
```
updates.ignore = [ { groupId = "com.squareup.okhttp3", artifactId = "okhttp" } ]
```
</details>

labels: library-update, semver-minor
The safe `Uri.parse` function does not fail on invalid URIs.

Examples:
-  `Uri.parse(" ")` returns `Right(http://%20)`
- `Uri.parse("https:/ /uri")` returns `Right(http://https%3A%2F%20%2Furi)`

Expected: `Left("Invalid URI")` or some similar message

Also, not sure if this is expected behavior, but this prefixes invalid protocol with valid protocol and also succeeds:
- `Uri.parse("ttps:/www.google.com")` returns `Right(http://ttps%3A%2Fwww.google.com)`
Updates [org.http4s:http4s-blaze-client](https://github.com/http4s/http4s) [from 0.21.0-M5 to 0.21.0-M6](https://github.com/http4s/http4s/compare/v0.21.0-M5...v0.21.0-M6).
[Release Notes/Changelog](https://github.com/http4s/http4s/releases/tag/v0.21.0-M6)

I'll automatically update this PR to resolve conflicts as long as you don't change it yourself.

If you'd like to skip this version, you can just close this PR. If you have any feedback, just mention me in the comments below.

Have a fantastic day writing Scala!

<details>
<summary>Ignore future updates</summary>

Add this to your `.scala-steward.conf` file to ignore future updates of this dependency:
```
updates.ignore = [ { groupId = "org.http4s", artifactId = "http4s-blaze-client" } ]
```
</details>

labels: library-update, semver-pre-release
Updates com.twitter:finagle-http from 19.1.0 to 19.12.0.


I'll automatically update this PR to resolve conflicts as long as you don't change it yourself.

If you'd like to skip this version, you can just close this PR. If you have any feedback, just mention me in the comments below.

Have a fantastic day writing Scala!

<details>
<summary>Ignore future updates</summary>

Add this to your `.scala-steward.conf` file to ignore future updates of this dependency:
```
updates.ignore = [ { groupId = "com.twitter", artifactId = "finagle-http" } ]
```
</details>

labels: library-update, semver-minor
Updates [com.squareup.okhttp3:okhttp](https://github.com/square/okhttp) from 4.2.2 to 4.3.0.
[Release Notes/Changelog](https://github.com/square/okhttp/blob/master/CHANGELOG.md)

I'll automatically update this PR to resolve conflicts as long as you don't change it yourself.

If you'd like to skip this version, you can just close this PR. If you have any feedback, just mention me in the comments below.

Have a fantastic day writing Scala!

<details>
<summary>Ignore future updates</summary>

Add this to your `.scala-steward.conf` file to ignore future updates of this dependency:
```
updates.ignore = [ { groupId = "com.squareup.okhttp3", artifactId = "okhttp" } ]
```
</details>

labels: library-update, semver-minor
Updates [com.softwaremill.sttp.model:core](https://github.com/softwaremill/core) from 1.0.0-RC1 to 1.0.0-RC2.


I'll automatically update this PR to resolve conflicts as long as you don't change it yourself.

If you'd like to skip this version, you can just close this PR. If you have any feedback, just mention me in the comments below.

Have a fantastic day writing Scala!

<details>
<summary>Ignore future updates</summary>

Add this to your `.scala-steward.conf` file to ignore future updates of this dependency:
```
updates.ignore = [ { groupId = "com.softwaremill.sttp.model", artifactId = "core" } ]
```
</details>

labels: library-update, semver-pre-release
When I use `val json = asJson[Xxx]`, this warts is triggered :
I don't understand why `Any` is detected here â€¦

```
[wartremover:Any] Inferred type containing Any: Any
[error]   val json = asJson[Xxx]
```
As a developer, I greatly appreciate the interop with http4s. However, I would prefer if sttp wasn't forcing the Blaze client onto my classpath

Would you consider either : 

 * Remove the hard dependency on the blaze-client artifact, in favour of the generic client artifact ? That'd be my personal preference, but it would mean a non-backward compatible change in the sense that a couple helper constructors would have to be removed. 
*  If you're absolutely against making this small breaking change, make the blaze-client dependency "% Optional" ? 