# Feature request: scale but keep thickness or change thickness but keep bounding box size

the gif below is close to my intent. thanks

![intent](https://user-images.githubusercontent.com/27437178/72209930-2935b580-3482-11ea-901b-34be033da0c4.gif)

Resolves #1015
# Bug report
1/
This example from your docs doesnt work at all:
`image.on('load', function (e) {
  console.log(e.naturalWidth, e.naturalHeight)
})`
e.naturalWidth/e.naturalHeight are undefined

2/
I tried to use something like this:
`var img = svg.image("url-to-image");
img.on('load',function(){
    console.log(this.image.node.width.baseVal.value);
     console.log(this.image.width());
})
`
BUT sometimes i get zeros in both console outputs (same page reload without code change).  I think mine load-handler is in same order-level as your internal handler which fills those values.

tested on Chrome , webpack + typescript
# Bug report

There is no type definition for the Runner.persist method, which prevents a Typescript project from building when using that method. A persist method also exists on the Timeline class with slightly different comment about what the value should be though the function declarations are the same.

Runner

    // Stores how long a runner is stored after beeing [sic] done
    this._persist = this._isDeclarative ? true : null

Timeline

    // Determines how long a runner is hold in memory. Can be a dt or true/false
    this._persist = 0

## Fiddle

https://jsfiddle.net/5voqcz46/

(Uncomment the persist usage line)

## Explanation

- Expect: [Persist method exists that takes an optional boolean](https://svgjs.com/docs/3.0/animating/#svg-runner) on Runner and Timeline classes in svg.js.d.ts.
- Actual: Typescript compile fails to compile a typescript file that has Runner.persist usage.
- Error: `error TS2339: Property 'persist' does not exist on type 'Runner'.`

`scale()`'s documentation looks like this:

> `scale()`
> returns itself
> animate yes
>
> The `scale()` method will take an `x` and `y` value:
>
> ```
> // scale(x, y)
> element.scale(0.5, -1)
> ```

[Looking at the code](https://github.com/svgdotjs/svg.js/blob/4ffb59abe80ff6815866a37447db62933b064813/src/modules/optional/sugar.js#L72-L77), `scale()` in fact takes an optional two-coordinate center of scaling (vanishing point).  It can be called in these ways:

* `scale(factor)`
* `scale(xFactor, yFactor)`
* `scale(factor, centerX, centerY)`
* `scale(xFactor, yFactor, centerX, centerY)`

`rotate()`'s documentation mentions the center argument, so `scale()`'s should too.

I personally find it confusing that `scale()` scales relative to the center of the object by default (different from a raw SVG transform), so I'd suggest also mentioning that the default is relative to the center of the element, like `rotate()`'s documentation does.

Happy to submit a PR if you can remind me where the documentation lives.
# Bug report

svg.use.center() will set the wrong position

## Fiddle

[fiddle here](http://jsfiddle.net/wvL1gbc9/2/) with svg.js 3.0.16

the two symbols (blue squares) should be at the same position

## Explanation

situation:
we define a svg.symbol
we svg.use that symbol
we svg.use.center() the symbol-use

problem 1:
use.center() behaves like use.move()
and svg.use ends up at the wrong position

speculation:
use has no bbox or size
and symbol size dont propagate to symbol-use size

problem 2:
use.bbox() (red squares) is wrong
the bounding-box has a wrong x/y position

## Notes

move() should be used when possible (faster)
center() should be used only when necessary (slower)

this took me some hours to get it right
and i guess its worth to document

situation:
we have a rect, filled with a pattern
and we want to drag the rect

problem:
the pattern will not move with the rect

solution:
put the rect inside a "nested SVG document"
and make that draggable

why:
cos the pattern position is relative 
to its first parent SVG document

[fiddle](http://jsfiddle.net/59qtm1cn/4/) / [stackoverflow](https://stackoverflow.com/questions/14407240/how-to-make-svg-image-pattern-fill-move-with-object)

```js
// create canvas
var draw = SVG().size(200, 200).addTo('#canvas')

// pattern of checkerboard
var patt = draw.pattern(20, 20)
patt.rect(20, 20).fill({color: '#fff'})
patt.rect(10, 10)
patt.rect(10, 10).move(10, 10)

// nested svg document
var nested = draw.nested()

// rect + pattern
nested.rect(80, 80).fill(patt)

// drag on
nested.draggable()
```

bad solution:
use the dragmove handler, to update the pattern origin

```js
// this works too, but its slow:

// group + draggable
var group = draw.group().draggable()

// move handler
group.on('dragmove', (e) => {
  const {x, y} = e.detail.box
  patt.move(x, y)
})

// rect with pattern
var r = group.rect(80, 80).fill(patt)

// not helping:
patt.attr({
  //patternContentUnits: 'objectBoundingBox',
  //patternUnits: 'objectBoundingBox',
})
```

I don't know if it's a bug, really. But the ForeignObject element does not seem to work as expected for me.

I tried this pretty simple code :
```javascript
var draw = SVG().addTo('body').size(400, 400);

var forObj = draw.foreignObject(200, 200);
var text = SVG('<textarea>Foo example</textarea>');

forObj.add(text);
```
Here is the code running in Fiddle : [https://jsfiddle.net/MrJeanJean/hxdptc75/](https://jsfiddle.net/MrJeanJean/hxdptc75/)

On my browsers (Chrome & Firefox), the textarea element is not showing at all.

The weird thing here, is that the textarea exists in the DOM (I can inspect it and see it in the DOM tree), but it's not considered as html element by the browser (no CSS default styles applied, not editable, content is not displayed...).

Maybe I did something wrong. 
Thanks.
# Feature request: deep delete objects
Im a long time user of svgjs and am really appreciative of your effort. I know I can remove an element using remove(), but somehow it still takes up processing to edit items in the containing container after the element has been removed.

I use svg js as part of a dynamic UI with lots of zooming and rearranging, and although I try where I can to modify existing elements, sometimes I feel the need to remove old ones that are no longer used, especially in long sessions when things start to slow down.

Also perhaps a related request: I use paths + markers to make arrowed lines and it seems they take longer to update than to make from scratch. Can this be mitigated?

## Benefits
- memory savings for long running programs

I think the syntax to achieve this should be:

```js
rect.destroy()
```
