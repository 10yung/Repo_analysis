 Fix a regression. On Ubuntu 19_10. Gnome terminal does not work caused by 4e270fb. Change it back. 

Follow below steps to reproduce the regression:
1. Build and Make install codelite on Ubuntu 19_10.  Start this codelite and create a C++ console application.
2. Compile & Run.  Error happens when gnome starts up.
When i click attach to process and select process nothing happens. if gdb is selected codelite just flieckers and thats it. when i select lldb new terminal pops up codelite flickers and terminal closes down and thats it. Where can i see logs atleast to start digging into the problem?

using: codelite 13.0.0
reproduction rate: 100%
-- Generating done
-- Build files have been written to: /Users/xukev/Projects/GIT_SRC/Codelite/codelite/build-release
[  0%] Built target sqlite3lib
[  1%] Built target wxcLib
[  1%] Built target codelite-cc
[  2%] Built target LLDBProtocol
[  6%] Built target codelite_indexer
[  6%] Built target codelite-echo
[  8%] Built target PHPParser
[ 10%] Built target codelite_cppcheck
[ 11%] Built target wxsqlite3
[ 12%] Built target databaselayersqlite
[ 14%] Built target wxshapeframework
[ 14%] Linking CXX shared library ../lib/liblibcodelite.dylib
ld: cannot link directly with dylib/framework, your binary is not an allowed client of /usr/lib/libcrypto.dylib for architecture x86_64


Seems it is APPLE's new rule. we can not directly link to libs in /usr/lib.  You can see https://forums.developer.apple.com/thread/124782

I recently downloaded codelite. It was working great for a while until recently. I clicked to try and open codelite and the icon's app appeared on the side flashing and my cursor was a loading symbol. The icon then disappeared and codelite never opened. I've tried turning off my machine and turning it back on. I have uninstalled and reinstalled codelite from the source website and still it been doing the same thing as before. Any help as to why this is occurring and how to fix it would be greatly appreciated. I am using codelite on windows 10. What hould I do?
The LLDB Setting menu when opened comes up with everything smaller than the screen size itself.
This is happening on Windows 10 and Codelite version 13.0.7

![image](https://user-images.githubusercontent.com/1034709/71667575-b4e96c80-2d33-11ea-914f-66f10320028f.png)

https://i.imgur.com/8A8TEiZ.png

https://i.imgur.com/tOKQ1Ri.png
Hi I am in 13.0.7 under Mint-16, and autocomplete works, sometimes only ,
I write pri , expecting to be complete to prinf but it  does't happend , when I type pri it'hint complete to private. How solve it ?
Codelite 13.0.0 for Windows and MinGW GCC.

It looks like code completion doesn't work for types declared with "using" keyword. In particular it doesn't recognize std::string_view, but recognizes std::basic_string_view<char>.

To demontrate try the following:

using mystring = std::string;
std::string s1;
mystring s2;

s1. - code completion works
s2. - code completion doesn't work
wxcrafter: in wxPGProperty there is no support for wxUIntProperty
Using the latest Manjaro Gnome and CodeLite build via AUR.

Copy and paste is erratic, mostly never copying correctly.  Copying things from outside the IDE will paste into the IDE with 100% success.  Copying something within the IDE will only work about 50% of the time.  When it does copy, if it's a lot of text at once, it will only copy about 70% of the text.

Using the getter/setter generation and the Implement All Unimplemented Functions feature will not work if there are more than half a dozen things to generate.  If the .cpp file is too big, it will generate a bunch of foreign characters on a single line, erasing about half the file in the process, instead.

It's been suggested that I use a different clipboard manager.  This doesn't do any good, and the CodeLite IDE is the only thing I have trouble with copying and pasting.

It has also been suggested that I increase buffer size, but this seems to be unrelated to the issue at hand.

The third suggestion I was given is to not use Gnome.  I'm down for this option, but it would actually make like easier if I could get around this and get the issue fixed, instead.