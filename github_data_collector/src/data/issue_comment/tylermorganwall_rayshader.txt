```{r}
Installing package into ....
(as ‘lib’ is unspecified)
ERROR: dependency 'rayrender' is not available for package 'rayshader'
* removing ....
In R CMD INSTALL
Error in i.p(...) : 
  (converted from warning) installation of package ...rayshader_0.13.3.tar.gz’ 
  had non-zero exit status
```

I installed `rayrender` manually but just wanted to inform you
Hello,

Firstly - thanks so much for your time in developing this package. I think I'm going to be a heavy user of this package over the coming months and years!

This is a general question rather than an issue/feature request. I was wondering how easy it would be to simulate trees/woodland/forest using `rayshader`? I am an ecologist working with bats and I'm looking at ways of representing the locations of bat roosts in individual trees across a landscape. I have a DEM of my area of extent and point data of the location of individual trees important to the study. It would be good if I could add a generic tree (or even a simple cone) on the landscape at these points to represent each roost. I can then label these features with the built-in annotation functionality.

Many thanks,
Simon


I was wondering about 3d printing some graphs so blind people could "feel the data", but the text on plots (labels, axis text, title...) won't pass to the .stl file. So, this is my suggestion: is  there any possibility of giving the text some relief so we could print the complete graph? Maybe even changing  the font to Braille and making it in relief,  so it's perfect for blind people. 

Any other ideas?
Not sure if this is a bug, or the way plot_gg interacts with ggplot2 themes and axis lines etc. which isn't clear to me.  Producing a plot_gg plot with the **cowplot** package loaded produces axis lines which extend away from the plot. 

Expected result:

![image](https://user-images.githubusercontent.com/1160363/66723950-68487080-ee6b-11e9-947d-a93aa62533bf.png)

Result when **cowplot** is loaded:

![image](https://user-images.githubusercontent.com/1160363/66723959-7ac2aa00-ee6b-11e9-9069-c6d32485ad51.png)

```
library(ggplot2)
library(rayshader)

# Fake some data
years <- 1990:2018
days <- 1:365
df <- expand.grid(years,days)
df$val <- rnorm(nrow(df),5,2)

# ggplot
p <- ggplot(df,aes(x=Var2,y=Var1,fill=val)) + geom_raster() + scale_fill_distiller(palette = 7)

# GL rayshader plot
plot_gg(p,multicore=TRUE,width=5,height=5,scale=250)

# Load cowplot, and plot_gg again
library(cowplot)
plot_gg(p,multicore=TRUE,width=5,height=5,scale=250)
```

Session Info:

````
R version 3.6.0 (2019-04-26)
Platform: x86_64-w64-mingw32/x64 (64-bit)
Running under: Windows 10 x64 (build 18362)

Matrix products: default

locale:
[1] LC_COLLATE=English_Australia.1252  LC_CTYPE=English_Australia.1252   
[3] LC_MONETARY=English_Australia.1252 LC_NUMERIC=C                      
[5] LC_TIME=English_Australia.1252    

attached base packages:
[1] stats     graphics  grDevices utils     datasets  methods   base     

other attached packages:
[1] cowplot_0.9.4    rayshader_0.11.5 ggplot2_3.2.0   

loaded via a namespace (and not attached):
 [1] progress_1.2.2          tidyselect_0.2.5        xfun_0.8               
 [4] purrr_0.3.2             colorspace_1.4-1        miniUI_0.1.1.1         
 [7] htmltools_0.3.6         rlang_0.4.0             manipulateWidget_0.10.0
[10] pillar_1.4.2            later_0.8.0             glue_1.3.1             
[13] withr_2.1.2             RColorBrewer_1.1-2      jpeg_0.1-8             
[16] foreach_1.4.4           plyr_1.8.4              stringr_1.4.0          
[19] munsell_0.5.0           gtable_0.3.0            htmlwidgets_1.3        
[22] codetools_0.2-16        labeling_0.3            knitr_1.23             
[25] doParallel_1.0.14       httpuv_1.5.1            crosstalk_1.0.0        
[28] parallel_3.6.0          Rcpp_1.0.1              xtable_1.8-4           
[31] scales_1.0.0            promises_1.0.1          webshot_0.5.1          
[34] jsonlite_1.6            mime_0.7                hms_0.4.2              
[37] bmp_0.3                 png_0.1-7               packrat_0.5.0          
[40] digest_0.6.20           stringi_1.4.3           tiff_0.1-5             
[43] dplyr_0.8.1             shiny_1.3.2             grid_3.6.0             
[46] tools_3.6.0             magrittr_1.5            rgl_0.100.30           
[49] lazyeval_0.2.2          tibble_2.1.3            crayon_1.3.4           
[52] readbitmap_0.1.5        pkgconfig_2.0.2         prettyunits_1.0.2      
[55] imager_0.41.2           assertthat_0.2.1        rstudioapi_0.10        
[58] iterators_1.0.10        R6_2.4.0                igraph_1.2.4.1         
[61] compiler_3.6.0 
```
https://github.com/tylermorganwall/rayshader/blob/f3b284e378d8221fd7e796b9464deb628437bec7/R/add_overlay.R#L54

I think the dims are passed in the incorrect order. This breaks my overlay. I describe the issue here 

https://github.com/tylermorganwall/rayshader/issues/46#issuecomment-517912781
See #74 
There is a `wateralpha` argument but for some bathymetry  applications it would be nice to "see through" the land. I can get part of the way there by "cutting out" the land but this requires some careful manipulations (https://twitter.com/tylermorganwall/status/1074652024187351041?s=20). Is it possible to set a `solidalpha`?
I'm fairly new to R, but managed to get a working R environment running in a Jupyter notebook. I'm able to plot my dataset with ggplot2 just fine, but plot_gg hangs at the same point after loading the X window. I've attached an image for reference. I can supply extra environment information if you let me know what to do.
Thanks.
![2019-08-25-142240_1375x887_scrot](https://user-images.githubusercontent.com/7442575/63654168-aca97100-c744-11e9-9b1c-e594aaba6feb.png)

Hello, 

I am currently working on an x,y,z data set that I would like to render as a map. I attempted to create one on Matlab using a kriging option but requires omission of more than 50% of the data points. I ran into one of your examples but am wondering how I can modify the script to accommodate for my data set? The following image is somewhat of what I want to create. 
![5](https://user-images.githubusercontent.com/39643123/61265991-aab4c100-a747-11e9-9066-863b247c1ce4.JPG)
![7](https://user-images.githubusercontent.com/39643123/61265999-b1dbcf00-a747-11e9-89c0-2654bfd44e20.jpg)
![6](https://user-images.githubusercontent.com/39643123/61266001-b43e2900-a747-11e9-8f3d-fab7a5c8fdde.jpg)

As [chronicled on Twitter](https://twitter.com/palewire/status/1149701830391152641), I've been able to use Rayshader to create a 3D map of earthquake intensity data. I'd love map this on top of a traditional terrain elevation file. Is it possible to combine two layers into one 3D map?