The timezone login was refactored for more code readability. I made sure that all the tess have passed.
I'm setting the timezone  site-wide by using `date_default_timezone_set('UTC');`.

If this is set, some nextRunDates are wrong, seemingly randomly. 

`$cron = Cron\CronExpression::factory('* 20 * * * *');`, then `getNextRunDate()` returns `2017-05-15 20:00:00` (currently correct).

`$cron = Cron\CronExpression::factory('* 19 * * * *');`, then `getNextRunDate()` returns `2017-05-15 19:44:00` (The hour is correct, but it's adding minutes).

All other hours seem to be correct.

If I comment out `date_default_timezone_set('UTC');`, then it works correctly.
If the result of getPreviousRunDate happens to be within the "missing" hour during DST change, an "Impossible CRON expression" error is thrown. 
I'm getting an 'impossible cron expression' error which seems to be a combination of day of the week, the Sydney timezone, and the particular 'current date' of 3/27.

```php
$dateTime = Cron\CronExpression::factory('0 0 * * 1')->getNextRunDate(Carbon\Carbon::create(2017, 3, 27, 0, 0, 0, 'UTC')->timezone('Australia/Sydney'));
```
If both fields are restricted (for day of month and day of week) a cron should match for either case, as per the cron man:

>      Note: The day of a command's execution can be specified by two fields --
>      day of month, and day of week.  If both fields are restricted (ie, are
>      not *), the command will be run when either field matches the current
>      time.  For example, ``30 4 1,15 * 5'' would cause a command to be run at
>      4:30 am on the 1st and 15th of each month, plus every Friday.

However, in a test with the following expression:

> 0 16 4 * fri *

The expected behavior is every Friday OR every month on the 4th.

However, when running this, it matches if it is a Friday AND it is the forth: here is sample output:

> Next: Fri, 04 Nov 2016 16:00:00 +0000
> Last: Fri, 04 Mar 2016 16:00:00 +0000

Great library otherwise.
I didn't notice anything in the source handling daylight savings time. Cron's consideration for this is that any time changes less than 3 hours should be considered daylight savings time.

Not handling this would mean that hour-based runs could run more than they are suppose to. For example if something were scheduled for 2AM it would run twice when rolling back.

See: https://www.pantz.org/software/cron/croninfo.html

So I pulled #41 and added a test

Added a method to get run dates in a date range and some minor optimizations.
