Some error struct have `Cause() error` method indicating the cause of
the error, but that method could return nil indicating that that itself
is the root cause in the error chain

look at this struct
```go
type myError struct {
  message string
  cause   error
}

func (m *myError) Error() string { ... }

func (m *myError) Cause() error {
  return m.cause
}

func New(message string) error {
  return &myError{message: message}
}
```
At the moment, there is no way to provide a custom stack trace for an error -- the stack trace is captured at `Wrapf` (or other such wrapping) time. While this is totally acceptable for pure-Go code, it would be useful to be able to add a stacktrace from a non-Go library which generates its own stacktraces.

The usecase that drives this is https://github.com/openSUSE/libpathrs -- it's a Rust library for which I'm writing some Go bindings. The fundamental cause of the error is within Rust code, but the Rust code provides (through C FFI) a full backtrace at the point the error occurred. Being able to produce loss-free Go errors would be pretty useful IMHO.

This proposal basically boils down to having something as simple as:

```
func (*stack) WithCustomStacktrace(s StackTrace) { /* ... */ }
```
Need method to check if error is wrapped
When using errors.Wrap the default delimiter is ": ".
But for me at least it seem like it should be "| ", with that I can wrap errors like this:

errors.Wrapf(err, "Error while trying to open file: %s", fileName)

I thing that instead of hard-coded delimiter we should be able to configure it with:

errors.SetDelimiter (string)
`Wrap()` and `Wrapf()` are good example of annotating error with stack trace and given error message. `Wrap()` and `Wrapf()` are best option if errors comes in different labels(different function). If errors are in same label(same function) then we can have an option to merge those errors in a single error annotating with extra message.

How do you see the future of pkg/errors after the proposal for go1.13 ?
https://go.googlesource.com/proposal/+/master/design/29934-error-values.md
That will even works with older version of go https://godoc.org/golang.org/x/xerrors
https://golang.org/doc/go1.12#compiler requires changes to the way the stack is analysed.

See https://github.com/pkg/errors/blob/ba968bfe8b2f7e042a574c888954fccecfa385b4/stack.go#L136 in v0.8.1 for example.
As requested in https://github.com/pkg/errors/pull/150 - I made the minimal changes here you requested.

Small note: it would be nice if the standard library https://github.com/golang/go/blob/master/src/fmt/print.go#L186 implemented `type Grower interface { Grow(n int) }` so we could assert for it instead, but no idea if that would be considered or not.

----

```console
benchmark                                    old ns/op     new ns/op     delta
BenchmarkStackFormatting/%+v-stack-10-24     20692         16377         -20.85%
BenchmarkStackFormatting/%+v-stack-30-24     43502         30200         -30.58%
BenchmarkStackFormatting/%+v-stack-60-24     43166         29790         -30.99%

benchmark                                    old allocs     new allocs     delta
BenchmarkStackFormatting/%+v-stack-10-24     19             6              -68.42%
BenchmarkStackFormatting/%+v-stack-30-24     33             3              -90.91%
BenchmarkStackFormatting/%+v-stack-60-24     33             3              -90.91%

benchmark                                    old bytes     new bytes     delta
BenchmarkStackFormatting/%+v-stack-10-24     1427          2942          +106.17%
BenchmarkStackFormatting/%+v-stack-30-24     3341          6261          +87.40%
BenchmarkStackFormatting/%+v-stack-60-24     3341          6261          +87.40%
```
For this issue https://github.com/pkg/errors/issues/173