

We have a wallet with dozens of thousands addresses, recently one user report that his deposit is not recorded. After some investigation, we found we lost the transaction, please help to investigate it. Thanks.

1. Related transaction:
transaction hash: **fd3c1ed7cf69a085c1c3309a63143ef577a4aa6684d80ab0b7f5b9b9342cb8b9**
to address: **8BSmATdC5om2BwxNFBoXkUa2hN8SYKoWmDw5BBJpNEakica1nh2RHVtSBR2NZpccocVCooNmrRho21quPbzaReRHDsz8q1H**
transaction key: **64ad5215d1e849aa3429da7f315052ce9a196da5491257ecbf0b652ce2b3e401**
block height: **2011462**

2. when we tried to get transfers by post following data to the wallet, we got empty response:
`{
  "jsonrpc":"2.0",
  "id":"0",
  "method":"get_transfers",
  "params":{
    "in": true,
    "out": true,
    "pending": true,
    "pool": true,
    "failed": true,
    "filter_by_height":true,
    "min_height": 2011461,
    "max_height":2011463
  }
}`

3. when we post the following data to **another wallet** to verify the transaction reported by the user:
`{
	"jsonrpc":"2.0",
	"id":"0",
	"method":"check_tx_key",
	"params":
	{
		"txid":"fd3c1ed7cf69a085c1c3309a63143ef577a4aa6684d80ab0b7f5b9b9342cb8b9",
		"tx_key":"64ad5215d1e849aa3429da7f315052ce9a196da5491257ecbf0b652ce2b3e401",
		"address":"8BSmATdC5om2BwxNFBoXkUa2hN8SYKoWmDw5BBJpNEakica1nh2RHVtSBR2NZpccocVCooNmrRho21quPbzaReRHDsz8q1H"
	}
}`
we got response:
`{
    "id": "0",
    "jsonrpc": "2.0",
    "result": {
        "confirmations": 1607,
        "in_pool": false,
        "received": 200000000000
    }
}`

4. I'm sure the address **8BSmATdC5om2BwxNFBoXkUa2hN8SYKoWmDw5BBJpNEakica1nh2RHVtSBR2NZpccocVCooNmrRho21quPbzaReRHDsz8q1H** belongs to the wallet

5. _./monero-wallet-rpc --version_
Monero 'Carbon Chamaeleon' (v0.15.0.1-release)


Because the user might do this for reasons unknown.
Values beyond l-1 will be reduced, so are accepted.

Reported by who-biz.

We all understand the importance of verifying a PGP/GPG signature, which is followed by verifying the checksum of a certain release, so I will not keep talking about it.

Also, you understand how important it is to educate the average user about the importance of these checks. If checking of the checksum is not that difficult, then the GPG-thing is more complicated, even with the good manuals that we have:

* https://web.getmonero.org/resources/user-guides/verification-windows-beginner.html
* https://web.getmonero.org/resources/user-guides/verification-allos-advanced.html

The average user doesn't have a GPG-client installed, and he doesn't understand what it is at all. And when he sees a recommendation from the community that the GPG-signature should be checked for a new release, and he sees one of these manuals... let me put it this way, the manuals are really good, but honestly, it's not a user friendly experience. What's more, you can skip these steps, and simplify the GPG-signature verification process itself to copy-paste in the browser.

Even when the average user understands what steps he needs to take to verify a GPG-signature correctly, this is where laziness comes in. Even in our [XMR.RU](https://xmr.ru/) community, where there are a lot of technically people, and even after the CLI binary was compromised, there were messages like, "_So, has someone already checked the GPG signature? Are the hashes correct? Does it match?_"

There is a solution, and it's called: [Keybase](https://keybase.io/)
You've probably seen it before.

The thing is, if the signer has a Keybase-account, it becomes incredibly easy to check someone's GPG-signature (just in two steps), and there is no need to download the client, create yourself a GPG-key, search and import the GPG-key that created the signature, certify it, and so on. The average user just needs to:

1. Go here: https://keybase.io/verify
2. Paste a signed message and click on the "**Verify**" button

#### What I propose

As there have been some recent changes: https://web.getmonero.org/2019/12/16/technical-responsibilities-update.html

I suggest to the community members who will sign future releases (CLI, GUI, etc) to create Keybase-accounts to make it easier for average users to verify GPG signatures.

---

P.S. To make sure yourself how easy it is to verify a GPG-signature without installing the GPG-client (which you probably have), without importing my key, etc., you see a signed message below, copy it, go to https://keybase.io/verify, paste the signed message, and click "**Verify**":

```
-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA256

Hello.
I'm TheFuzzStone from XMR.RU-team and this is a test signature.

Today is: 13/01/2019

-----BEGIN PGP SIGNATURE-----

iQIzBAEBCAAdFiEERDx3gnlqI2Zj2EzGL72d6KiMLLMFAl4ceAsACgkQL72d6KiM
LLPRag/+Ln5K45w1PNq02oOkyCEC/MX6zCWay0XUPDJsEGYcL89AE3zqtbl1c+eb
X9ABAN106QoV2UrRiSRk+9eEmqGsqQOZqEah4KCfuJNjMTDaipBEbWrtuUBH+h7t
j9PqPgzPbOUvs4ITjsX6VnSxCHjh4hHjn7bHS3bNqxLlYIaZfc9dEQh7mb9c9V5x
s0QHWlc09EBPJJTatBn+no/M01hiw/1uNf/W9eNFpbb8VWkoAPBFrgT8b9NBBBHZ
3rya6twx1W2IRx3x2P9iQ92+YvXIdXspB1X7y9dOct/V1Ki12EKlcrWVaeizA2w+
P/4VVXjCjaBFQf7feurqEKEoGDgh46MBpCfmRp4mrXCmFSmgzDGKCrswYqmJgyXy
T71CmYlR0dEWCuQEZWcjKNZoExuNOHUJ8n0cZ9q9nR87evYcq/Kp3dQqNC4eBJMi
EcOoJrWxRXFsaah7ipcZ9ZNxYicvhmXRHRBYLHPd3wI8LW7McvX/4a2ppuk6vQLB
NMfW1OHFJ084Y/xzn8MeCjZoT6ZXvJXi03gHIgbsLAA3Ufim2d3sRRsJM5Bm//MQ
kqgPf81Mh/f/WVpQ8I+jIVekQMxtyzvbTn/f4csejrM1RfNkhYvj6TFSzX5CX3fw
y00IIHCBXWXcMNPiXscj1ripRkB24lpE/qrnU7MHIpZkmTpUbFM=
=798k
-----END PGP SIGNATURE-----

```
Using latest version 0.15.0.1. (Edit : on Ubuntu 18.04)
After the CLI wallet was locked, the prompt showed the password in clear while typing.
I'm not a big CLI user so this happened only twice so far, but I thought it's worth reporting this issue.
Not sure if a screenshot is useful, but here's one below anyway.

![image](https://user-images.githubusercontent.com/16813929/72224145-2e286100-3577-11ea-9f1c-2ad5f143a2c6.png)

The previous version was not working correctly as [subprocess.call](https://docs.python.org/2/library/subprocess.html#subprocess.call) returns the exit status (aka `returncode`) of the command executed.  The exit status will be `0` if the command succeeds, which is interpreted as `False`, then negated by the preceding `not`.

Exit status will be something other than `0` if it fails (eg `1`, `128`, etc) so we just catch them all.

The script should fail if `--docker` is specified, but the command is not available.

Finally, `shell=False` is the default, so no need to specify.

New version will correctly test if `docker` command is available and fail with a nice message if not.

**Note:** Let me know if you'd prefer this be switched to use the `which` command.  I was trying not to modify anything unnecessarily.

