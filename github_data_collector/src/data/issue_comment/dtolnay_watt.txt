Panics seem to get printed decently by the interpreted runtime, but not the JIT runtime.

To reproduce, cherry-pick 149ca1a421e461ecb1f88cb1b37fcceb9dd6b653 and then:

```console
$ cargo build --release --target wasm32-unknown-unknown --manifest-path demo/impl/Cargo.toml && cargo run --manifest-path demo/caller/Cargo.toml

error: proc-macro derive panicked
 --> demo/caller/src/main.rs:3:10
  |
3 | #[derive(Demo)]
  |          ^^^^
  |
  = help: message: panicked at 'oh no!', src/lib.rs:5:5


$ cargo build --release --target wasm32-unknown-unknown --manifest-path demo/impl/Cargo.toml && WATT_JIT=/git/wasmtime/target/release/libwasmtime_api.so cargo run --manifest-path demo/caller/Cargo.toml

fatal runtime error: failed to initiate panic, error 5
error: could not compile `watt-demo-caller`.
```
In the non-JIT runtime let's time how long each macro call takes and print a message if any one takes too long, pointing to the JIT installation instructions and explaining that it would likely improve your compile time.

We'll want the warning to somehow appear only once per compilation if possible. Also we'll want some way to silence it in case the user can't install JIT for some reason.
Right now there's rudimentary support for executing code in a JIT loaded through a dynamic library which exposes a wasm C API. Unfortunately though there's not really a great way to download this runtime for your platform or configure this. It'd be good to have a "run this command" style thing to accelerate macro invocations locally.
Hello

Maybe this is just a paranoia on my side. However, currently if I want to do an audit of my dependencies, I can download and extract the crate source downloaded from crates.io and read it. There are even tools promoting such approach, like [cargo-crev](https://crates.io/crates/cargo-crev).

But if the crate contains the binary wasm code, reading it and understanding what it does gets much harder. I understand that the compiled code can't do arbitrary stuff to the system itself, but it could still produce malicious code into its output, or simply be buggy and produce wrong code.

So I wonder, would it be possible to somehow make it possible (by some tooling) to automatically bundle both the original source code and the wasm and have a way to opt into the longer compile time, but making sure it is indeed from the given sources?
More than half of the (uncompressed) .wasm file of `wa-serde-derive` is made up of the debug info section.
It seems that panic information is still compiled into the wasm file.

The crate file can be downloaded from this [link](https://d19xqa3lc3clo8.cloudfront.net/crates/wa-serde-derive/wa-serde-derive-0.1.101.crate). It contains the wasm file (2.7 MB uncompressed). If you run strings on the wasm file, you see some paths included. This is caused by panic information still being compiled in. Mostly, for proc macros such info is irrelevant. With a custom panic handler, the linker should be able to optimize it out.

Although I'm not sure, it might even be wanted: https://github.com/dtolnay/watt/blob/335dd49b107848d24469079c5fd85efa74fa10f1/src/lib.rs#L65
This project is brilliant! I've wanted some way to pre-compile build tools like this for a while. I've got a fairly hefty feature request, though.

Currently, Watt is designed to completely sandbox the input. However, I've worked on several non-proc-macro build tools that need to access the filesystem (e.g. to locate non-Rust input files). These projects would still be amenable to pre-compilation; the output binaries don't need to link with them. Unfortunately, Watt currently can't address this use case, since it can only read and write `TokenStream`s.

It would be neat if there was a way to invoke Watt from a `build.rs` file. and allow it to access more of the external environment.

One route to implement this would be through [WASI](https://github.com/CraneStation/wasmtime/blob/master/docs/WASI-intro.md). WASI is a wasm "syscall" ABI -- a set of functions implemented in the wasm runtime, which access the external system. (It's defined [here](https://github.com/CraneStation/wasmtime/blob/master/docs/WASI-api.md).) All that would be needed to support this would be to implement these functions and link them into the Watt runtime.

Rust code can then be compiled with the `wasm32-wasi` target, and standard library operations will then be routed through these "syscalls" in the compiled wasm module. So build tools could be written using standard Rust APIs, and transparently run through Watt. 

You could still retain some sandboxing, since WASI is designed to be explicitly initialized with a set of capabilities -- for example, you could explicitly pass in the paths the build tool is allowed to access in your `build.rs` file.

You *could* also allow using WASI syscalls in the proc-macro runtime. I'm not sure if non-deterministic proc-macros are permitted by Rust, though.

Downsides of this approach: it would add some compile time to the runtime, and it adds some complexity.
From some rough tests, Watt macro expansion when compiling the runtime in release mode is about 15x faster than when the runtime is compiled in debug mode.

Maybe we can set it up such that users can run something like `cargo install watt-runtime` and then our debug-mode runtime can detect whether that optimized runtime is installed; if it is, then handing off the program to it.
We'll want to take some representative proc macro(s) to compile to wasm, and set up a benchmark that times how long it takes to expand some representative inputs.

This would be a necessary first step toward beginning to optimize the Watt runtime.