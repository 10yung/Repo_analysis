Hello, I want to change the height of all fields(search and all rows  Product Variants ) in module product_product.

what should I do for this? Thx
![d](https://user-images.githubusercontent.com/60047264/72670305-ebc2c080-3a5d-11ea-894d-90d41d2ae68f.png)



Impacted versions: 13 local server install

Steps to reproduce: Open the app

Current behavior: In the webbrowser Odoo can visualize 2 Companies at the same time or just one if you deselect the other. The functionality of selecting them both gives you the possibility to have a CRM overview of both companies at the same time.

Expected behavior: In the mobile app you can select only one company at the time, this could be improved by also visualizing the both companies. but this is not possible 


Video/Screenshot link (optional):

Double selection in webbrowser:

![image](https://user-images.githubusercontent.com/60045518/72669373-4abe1080-3a31-11ea-946f-c6cc9d510c5f.png)

single selection in App:

![Screenshot_20200118-203134_Odoo](https://user-images.githubusercontent.com/60045518/72669425-d3d54780-3a31-11ea-804a-da1db0200951.jpg)

Hope this can be improved.

Kind regards,

Maikel

Impacted versions:
13.0

Steps to reproduce:
1. chose a demo vendor bill
2. make a partial refund and validate it
3. go back to the vendor bill
4. create a ne partial refund

Current behavior:
* this error is raised:
```
Duplicated vendor reference detected. You probably encoded twice the same vendor bill/credit note:
Azure Interior - Reversal of: BILL/2018/0001 - 01/18/2020
```

Expected behavior:
* No error raised

Video/Screenshot link (optional):
* Check in [this video](https://drive.google.com/file/d/1Q0f-b3f56cyDXbkurgePgxu4pW63M7E5/view)

Adding a method to allow changing the date of the Tax Cash Basis Entry. 
There are localizations that could not allow to create the CABA Entry in a date other than the maximum between the Journal Items being reconciled. And for that case other workarounds have to implemented. But not creating the CABA for those Journal Items at present date or having to use other means.

--
I confirm I have signed the CLA and read the PR guidelines at www.odoo.com/submit-pr

Impacted versions:13.0 

Steps to reproduce: 
1.go Accounting >Customers >Invoices
2.Create an invoice and enter multiple lines of text in the LABEL of the invoice details
3.Print report "invoices"or"invoices without Payment"

Current behavior:
account invoice report can not print label have  multi-line like gif

Expected behavior:
Like previous versions can print multiple lines

Video/Screenshot link (optional):
![錄製_2020_01_18_06_29_52_361](https://user-images.githubusercontent.com/38001362/72650699-2b38d080-39bc-11ea-802c-51af244f9aad.gif)


[FIX] account: Better Wording at button_cancel() method
-

When Unposting several Journal Entries with button_cancel() method there
could be some JE that cannot be unposted but information provide gives
no clue on which journal entry the UserError arises.


--
I confirm I have signed the CLA and read the PR guidelines at www.odoo.com/submit-pr

### Description of the issue/feature this PR addresses:

The refund wizard is not compatible with the LATAM document types. This PR try to extend the original wizard to be able to properly create credit notes and invoices ("modify" option in the wizard).

There are multiples fixes so we enumerate the errors bellow, each one has their own commit

### Current behavior before PR:

1. We are not able to set Document type in the Refund wizard.
2. When selecting "modify" option in the Refund wizard it raise and error "can not create credit note" and do not let us to create neither the credit note. or the new invoice. 
3. Credit note is been created in the default journal of the system and not in the same journal of the original invoice.

### Desired behavior after PR is merged:

1. We are able to select  Document type in the Refund wizard when creating a credit note.
2. When selecting "modify" option now we can create both the credit note and the new invoice, each one now has the proper document type.
3. Credit note now is created in the same journal of the original invoice.

--
I confirm I have signed the CLA and read the PR guidelines at www.odoo.com/submit-pr

* website_event

Commit https://github.com/odoo/odoo/commit/a153ed42a09f8b7f5e0865112eb7d5affc22a353
solved a big problem which was that when an undo/redo is performed, the
whole DOM was reconstructed breaking all the JS relying on the old one.
For example, the latest blog posts which are dynamically loaded in JS
were not removed before saving since the JS relied on the old DOM... and
this broke the page because that dynamic content contained non-valid
XML markup. The solution was to destroy all JS widgets before applying
an undo/redo and rebuilding them all afterwards. Ideally this operation
should be done on the undo recording action but this would have a huge
flickering impact since many DOM would be destroyed each time the user
types text (flickering which is also bad on undo/redo but it is more
acceptable).

The problem now is the following: if a widget, like many, is declared
like this:

```
start: function () {
    this.$el.append(/* Some dynamic content on page loading */);
},
destroy: function () {
    this.$el.find(/* Dynamic content to remove */).remove();
},
```

Then it works in all standard cases: dynamic content is loaded on page
load and is removed when saving the editor. But this happens with the
undo/redo system:

1. The users types text, we record an undo, which is the whole page
   current DOM, containing all the dynamic contents.

2. The users hits CTRL-Z:

    a. We destroy all JS widgets, calling destroy, the dynamic content
       is removed from the page.

    b. We replace the whole DOM with the one that was saved. That one
       contains the dynamic content DOM.

    c. The JS widgets are recreated, calling start... creating the
       dynamic content again.

Result: the dynamic content appears duplicated. On save, depending on
how the destroy was implemented only the last generated content may be
removed or both... but in any case it appears duplicated during edition.

Hopefully, our current stable version do not contain that many dynamic
content so a perfect amelioration of all of this can be found in master.
As a fix, this commit introduces an extra step between (a) and (b):
we remove the dynamic content of the DOM-to-re-apply before applying it.
For this to work, widgets have to mark their dynamic content with the
class 'o_temp_auto_element' when creating it. They also must add the
content they replace on the 'data-temp-auto-element-original-content'
attribute.

Forward-Port-Of: odoo/odoo#43496
* website_event

Commit https://github.com/odoo/odoo/commit/a153ed42a09f8b7f5e0865112eb7d5affc22a353
solved a big problem which was that when an undo/redo is performed, the
whole DOM was reconstructed breaking all the JS relying on the old one.
For example, the latest blog posts which are dynamically loaded in JS
were not removed before saving since the JS relied on the old DOM... and
this broke the page because that dynamic content contained non-valid
XML markup. The solution was to destroy all JS widgets before applying
an undo/redo and rebuilding them all afterwards. Ideally this operation
should be done on the undo recording action but this would have a huge
flickering impact since many DOM would be destroyed each time the user
types text (flickering which is also bad on undo/redo but it is more
acceptable).

The problem now is the following: if a widget, like many, is declared
like this:

```
start: function () {
    this.$el.append(/* Some dynamic content on page loading */);
},
destroy: function () {
    this.$el.find(/* Dynamic content to remove */).remove();
},
```

Then it works in all standard cases: dynamic content is loaded on page
load and is removed when saving the editor. But this happens with the
undo/redo system:

1. The users types text, we record an undo, which is the whole page
   current DOM, containing all the dynamic contents.

2. The users hits CTRL-Z:

    a. We destroy all JS widgets, calling destroy, the dynamic content
       is removed from the page.

    b. We replace the whole DOM with the one that was saved. That one
       contains the dynamic content DOM.

    c. The JS widgets are recreated, calling start... creating the
       dynamic content again.

Result: the dynamic content appears duplicated. On save, depending on
how the destroy was implemented only the last generated content may be
removed or both... but in any case it appears duplicated during edition.

Hopefully, our current stable version do not contain that many dynamic
content so a perfect amelioration of all of this can be found in master.
As a fix, this commit introduces an extra step between (a) and (b):
we remove the dynamic content of the DOM-to-re-apply before applying it.
For this to work, widgets have to mark their dynamic content with the
class 'o_temp_auto_element' when creating it. They also must add the
content they replace on the 'data-temp-auto-element-original-content'
attribute.

Forward-Port-Of: odoo/odoo#43496
Left panel widgets can define the widgets they depend on to be visible.
Up to now, if such a dependency was defined but that the related widget
was not found, the dependency was considered as not met. Now, it acts
as if that particular dependency was not defined at all.

This is useful for controlling the visibility of a generic option in the
case of a specific snippet without having to duplicate and restrict that
generic option.

E.g. There is a generic "color" option on all snippets. For my snippet
"hello" I only want that generic "color" option to be visible if my
"world" option is enabled. I then add `data-dependencies="world"` on the
generic "color" option. In the case, any other snippet than "hello" is
used, since the "world" option does not exist there, the "color" option
acts as if it had no dependency.
