Hi, this implements an oauth connector, which could be used for generic authentication following OAuth2.0 framework.
so client can get access to Dex resources e.g. forwarding auth request and performing token exchange while handling callback from Dex.
The list of groups is paginated (default page is 200), so when a user
has more than 200 groups, only the first 200 are retrieve.
This change is retrieving all the groups for a user by querying all the
pages.
Rudimentary support for using an SQL database for authentication (i.e. having a table of users, groups and passwords).

Requires #1620 (or something to the same effect) to work with Postgres (and others that use `$` for placeholders).
Before the PR, Dex will break if `PrometheusRegistry` is not provided. IMHO that field doesn't need to be required unless there is a specfic reason (?).

With this PR, if user is not interesting at collecting Dex metric through Prometheus, one could config a Dex server without `PrometheusRegistry`. 
Support for authenticating against [CloudFoundry](https://www.cloudfoundry.org/)

Documentation of [CloudFoundry UAA server](https://docs.cloudfoundry.org/api/uaa/version/74.4.0/index.html#overview)

cc @pivotal-jwinters 

When Azure Active Directory is synchronized with an on-premises directory, the
boolean configuration parameter `useOnPremSamAccountName` can be set to get the
on-premises samAccountName as the `preferred_username` claim.

Fixes #1618 

As per comment https://github.com/dexidp/dex/pull/1163#issuecomment-572975220, this PR from [ConcourseCI](https://github.com/concourse) team is a rework of https://github.com/dexidp/dex/pull/1163 since the original PR is outdated and its author allowed us to continue his work. 

cc @pivotal-jwinters 

@bonifaido thanks!

 
Reflect over and walk the loaded configuration and replace any $ENV keys
with their corresponding environment variable, but only of the whole key
matches.

This makes it possible to include '$' in configuration keys (e.g.
configured passwords; see #1619). It also removes the possibility for
injecting further JSON/yaml in the middle of a document through
env-expansion (see #1099).

On the flip-side, this makes it impossible to do env-expansion on
anything non-string (i.e. numbers) through environment variables, as
`"$name"` is an invalid number.

Previously, this was done by running the JSON through os.ExpandEnv(),
which does not do escaping, making it impossible to embed a '$' anywhere
in the storage or connector configurations.
I've been playing with adding a SQL (Posgres) connector, as we have internal users there. To make that re-usable, I figured the query should be configurable, say:

```yaml
connectors:
- type: sql
  id: authdb
  name: Internal Auth DB 
  config:
    connection: host=localhost password=test ...
    query: "SELECT userId, ... WHERE username = $1 AND pwhash = crypt($2, pwhash)"
    groupQuery: ...
```

But the SQL placeholders (`$1` and `$2`) vanish because of the environment-expansion done in `cmd/dex/config.go`:

```go
connConfig := f()
if len(conn.Config) != 0 {
	data := []byte(os.ExpandEnv(string(conn.Config))) // - Here
	if err := json.Unmarshal(data, connConfig); err != nil {
		return fmt.Errorf("parse connector config: %v", err)
	}
}
```
I can see there's some vaguely related work going on in https://github.com/dexidp/dex/issues/1099

This could be fixed by forking `os.ExpandEnv` to leave unknown env's alone (which would break if anyone set `1=foo`) OR break out the reflection-package, walk the config-tree and check every string-key for starting with a `$` and matching some env name.