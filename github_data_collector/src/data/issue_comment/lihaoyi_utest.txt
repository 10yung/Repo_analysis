https://github.com/lihaoyi/utest/blob/374e408119efffae085e9e0d53dff3bebb9253dc/utest/native/src/utest/PlatformShims.scala#L16

https://github.com/lihaoyi/utest/blob/374e408119efffae085e9e0d53dff3bebb9253dc/utest/js/src/utest/PlatformShims.scala#L14

https://github.com/lihaoyi/utest/blob/374e408119efffae085e9e0d53dff3bebb9253dc/utest/src/utest/framework/Model.scala#L27
Even if SN 0.4.0-M2 is a milestone, it is quite stable and now used as a target for several projects.
It would thus be great to consider to release a version of utest compatible with this Scala Native version.

Thanks.

Hi Folks,

Thanks for the great library!

This change is to avoid the 2.13 deprecation warning for TestPath macros.

```
method copyArrayToImmutableIndexedSeq in class LowPriorityImplicits2 is deprecated (since 2.13.0): Implicit conversions from Array to immutable.IndexedSeq are implemented by copying; Use the more efficient non-copying ArraySeq.unsafeWrapArray or an explicit toIndexedSeq call
```

[`TestPath` accepts a `Seq`](https://github.com/lihaoyi/utest/blob/374e408119efffae085e9e0d53dff3bebb9253dc/utest/src/utest/framework/Model.scala#L10), so it probably makes sense to switch anyway.

Please let me know if you want any further changes.
This is more a feature request. We had some tests that hung forever on our CI and a timeout support seems to be missing in the lib. This can of course he handled inside the test case but it's rather boilerplaty.

Does utest have some internal scheduler that could be used for implementing this?
This issue is about providing simple functionalities for ignored and pending test cases.

> I would like to contribute to uTest but I'm not sure if my suggestion would qualify to the skimmed down nature of uTest. I'm copying/pasting the overall idea here before submitting a PR, but only if I get approval from the project administrator. Otherwise, I will create a separate project. So, please let me know if my suggestion qualifies. 

This is the overall idea:

1. You mark test cases the same way as you would do in ScalaTest:
```scala
"This is an ignored test case" - ignored {
   // this is the test code
   assert(false)
}

"This test case is ignored when running by Jenkins" - ignoredif(jenkins) {
   // this test has requirements which Jenkins is not going to fulfill, for whatever reason
   assert(false)
}
```

2. This is the barebones of how to provide the feature:

```scala
trait uTestActions {
  def ignored(action: ⇒ Unit): Unit = ignored
  def ignoredif(condition: Boolean)(action: ⇒ Unit): Unit = if(condition) ignored else action
  def pending(action: ⇒ Unit): Unit = {
    try {
      action
      pending("PENDING", new TestPendingException)
    } catch {
      case t: Throwable => pending("FAILED", new TestFailedException(t))
    }
  }

  private def ignored: Unit = {
    val t = new TestIgnoredException
    val it = t.getStackTrace.iterator
    val e = (1 to 5).map(_ => it.next).last
    report("IGNORED", e)
  }

  private def pending(state: String, t: Throwable): Unit = {
    val pos = t.getStackTrace.zipWithIndex.find(p => p._1.getMethodName == "pending").get._2
    val it = t.getStackTrace.iterator
    val e = (1 to pos+4).map(_ => it.next).last
    report(state, e)
  }

  private def report(state: String, e: StackTraceElement): Unit = {
    val _class  = e.getClassName
    val _method = e.getMethodName
    val _file   = e.getFileName
    val _line   = e.getLineNumber
    System.err.println(s"@@@@@@@@ ${state}:: ${_class}.${_method} at ${_file}:${_line}")
  }
}
class TestPendingException extends Exception
class TestIgnoredException extends Exception
class TestFailedException(cause: Throwable) extends Exception(cause)
```

We should be able to collapse them using an algorithm like https://cs.stackexchange.com/questions/102463/looking-for-an-algorithm-to-identify-contiguous-repeated-series-of-lines-in-a-lo, making it much easier to debug them without constantly scrolling through thousands of lines of duplicate stack frames
I want to use this framework in Maven Scala project, but it seems Maven does not detect tests, however it detects test class.
I'd like to write a custom assertion that compares two strings for equality, highlighting their differences.  For example, writing

```
      val s = "My relatively long string with a difference in the middle"
      "verify" - {
        verify(s).equals("My relatively long string With a difference in the middle")
      }
```
to produce `'...long string [w]ith a differ...' != '...long string [W]ith a differ...'` is not hard with uTest out of the box.

However, I'd really like the `[w]` and `[W]` to be set in red using the fansi library.  I can do that now by passing a fansi-formatted string to the exception AND setting `exceptionMsgColor = Attrs.Empty`.  However, that means that all the rest of the error messages are uncoloured.

I propose adding a marker trait, `FansiErrorMarker` to the utest.  In formatException, test for that trait and, if present, print the message unchanged.  Otherwise apply the usual exception message colour:
```
            current.getMessage match {
              case null => exCls
              case nonNull =>
                current match {
                  case e: FansiErrorMarker ⇒ ufansi.Str.join(exCls, ": ", nonNull)
                  case e ⇒ ufansi.Str.join(exCls, ": ", exceptionMsgColor(nonNull))
                }
            },
```

Then users can `throw new AssertionError(fansiMsg) with FansiErrorMarker` with their fansi-formatted message in a backwards compatible way.

Would the maintainers welcome a pull request with these changes?
Here are some example stack traces in utest output:

```
X example.HelloSpec.test3 0ms 
  java.lang.IndexOutOfBoundsException: 10
    scala.collection.LinearSeqOptimized.apply(LinearSeqOptimized.scala:63)
    scala.collection.LinearSeqOptimized.apply$(LinearSeqOptimized.scala:61)
    scala.collection.immutable.List.apply(List.scala:85)
    example.HelloSpec$.$anonfun$tests$4(HelloSpec.scala:29)
X example.HelloSpec.test4 3ms 
  java.lang.AssertionError: assertion failed: ==> assertion failed: 1 != 2
    scala.Predef$.assert(Predef.scala:219)
    utest.asserts.Asserts$ArrowAssert.$eq$eq$greater(Asserts.scala:193)
    example.HelloSpec$.$anonfun$tests$5(HelloSpec.scala:33)
```

I think most of the time the part of the trace from utest itself (`utest.asserts.Assert`) and the scala library (`scala.*`) aren't useful.

Would the project maintainers welcome a pull request that added a feature where the user could provide a function to filter the stack trace?  It would probably be modelled on `exceptionStackFrameHighlighter` with `exceptionIncludeStackTraceElement(s:StackTraceElement):Boolean = true` as the default.