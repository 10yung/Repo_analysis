A different variation on the segfault errors suggested [here](https://github.com/knausb/vcfR/issues/79) and [here](https://github.com/knausb/vcfR/issues/137) maybe?

I have an annotated vcf file, that I am attempting to convert to a tidy format using vcfR2Tidy so that I can filter easily on a number of different fields, from that standard format vcf region and from that annotated version. 

When I attempt to convert it, I get: 
```
vcf = read.vcfR( "minimal.vcf" , verbose = FALSE )
vcfT = vcfR2tidy(vcf, format_fields = c("GT", "DP"))
*** caught segfault *** address 0x50, cause 'memory not mapped'
```
Which then sometimes (but not always) dumps me completely out of R. I've updated my installation of vcfR from the github master branch using 
`devtools::install_github(repo="knausb/vcfR")`

I'll paste my sessionInfo in at the bottom. 

The vcf has been pre-filtered (using the VariantAnnotation package) on one of the annotation fields, to reduce it to ~71,000 variants. When I try to use it unfiltered (with or without annotations) it hangs, probably because at that stage of the proceedings there's ~400,000 variants. 

In attempting to figure out if it was a size issue, I made a minimal example, with ~100 variants in it. It worked, so I'm guessing it's not a formatting thing, which made me suspect a memory problem. However, I'm doing this on the doing this on the landing node of a cluster so -
```
$ free -h
              total        used        free      shared  buff/cache   available
Mem:           503G        122G        349G        4.2G         32G        374G
Swap:           15G          0B         15G
```
As I increase the size of the minimal example, it falls over on anything over ~2500 variants. On a different machine (my laptop) it falls over with anything over ~4500 variants though, and that has much less memory -
```
 $free -h
              total        used        free      shared  buff/cache   available
Mem:            15G        8.5G        1.5G        1.5G        5.5G        5.2G
Swap:           15G        3.5G         12G
```
So I have no idea what it might be. Doesn't appear to be formatting (works with minimal example),  doesn't appear to be memory (works better on a smaller machine) and doesn't appear to be specific to a particular location within the file (can do ~2500 or ~4500 on different machines). I even checked the page on [memory usage](https://knausb.github.io/vcfR_documentation and I should easily have sufficient for 10^7ish variants. 

Any suggestions would be much appreciated - getting vcf's into a tidy format is a bit of a holy grail at the moment. 

Ben. 

```

> sessionInfo()
R version 3.5.3 (2019-03-11)
Platform: x86_64-pc-linux-gnu (64-bit)
Running under: CentOS Linux 7 (Core)

Matrix products: default
BLAS/LAPACK: /scale_wlg_persistent/filesets/opt_nesi/CS400_centos7_bdw/imkl/2018.4.274-gimpi-2018b/compilers_and_libraries_2018.5.274/linux/mkl/lib/intel64_lin/libmkl_gf_lp64.so

locale:
 [1] LC_CTYPE=en_NZ.UTF-8       LC_NUMERIC=C              
 [3] LC_TIME=en_NZ.UTF-8        LC_COLLATE=en_NZ.UTF-8    
 [5] LC_MONETARY=en_NZ.UTF-8    LC_MESSAGES=en_NZ.UTF-8   
 [7] LC_PAPER=en_NZ.UTF-8       LC_NAME=C                 
 [9] LC_ADDRESS=C               LC_TELEPHONE=C            
[11] LC_MEASUREMENT=en_NZ.UTF-8 LC_IDENTIFICATION=C       

attached base packages:
[1] stats4    parallel  stats     graphics  grDevices utils     datasets 
[8] methods   base     

other attached packages:
 [1] vcfR_1.8.0.9000             VariantAnnotation_1.28.13  
 [3] Rsamtools_1.34.1            Biostrings_2.50.2          
 [5] XVector_0.22.0              SummarizedExperiment_1.12.0
 [7] DelayedArray_0.8.0          BiocParallel_1.16.6        
 [9] matrixStats_0.54.0          Biobase_2.42.0             
[11] GenomicRanges_1.34.0        GenomeInfoDb_1.18.2        
[13] IRanges_2.16.0              S4Vectors_0.20.1           
[15] BiocGenerics_0.28.0         forcats_0.4.0              
[17] stringr_1.4.0               dplyr_0.8.3                
[19] purrr_0.3.3                 readr_1.3.1                
[21] tidyr_0.8.3                 tibble_2.1.3               
[23] ggplot2_3.1.1               tidyverse_1.2.1           




```

Hello Brian,

I'm using SLiM 3 to generate vcf files which I am analysing in R, however occasionally read.vcfR() was causing my R session to 'encounter a fatal error' and abort. I followed your advice to determine the problem and it seems it is crashing because the vcf file has two completely blank lines in it. I appreciate this may be more of an issue with SLiM but I was hoping it might be possible for vcfR to accommodate this, or if you have any other suggestions? 

I have attached two files - blankrow346.vcf contains blank lines before POS=346 and causes R to abort when read.vcfR() is run, and clean.vcf is of a similar size and style but works fine. The files are being automatically generated so unfortunately I can't manually edit them. I'm using the most recent GitHub version of vcfR.

[Blanklineex.zip](https://github.com/knausb/vcfR/files/3372953/Blanklineex.zip)

Many thanks,
Tom
I am processing VCF file to split the columns until the INFO field (columns 1-9) into tab separated columns. The example input has 250K variants.

To do this i am using the below code:

```
###STEP1: Reading the VCF file took upto approx ˜4min (196 sec)####
system.time(pop_vcfinput <- vcfR::read.vcfR("pop.vcf.gz"))
   user  system elapsed 
196.416   5.611 202.040

###STEP2: Extracting all the key/value pairs in INFO  field #####
my_INFOs <- grep("INFO", queryMETA(pop_vcf), value = TRUE)
my_INFOs <- sub("INFO=ID=", "", my_INFOs)


### STEP3a: Using lapply function to extract the values for all the keys in INFO column. This took ˜5 min (302sec) for the below function####

system.time(my_INFOm <- matrix(unlist(lapply(my_INFOs, function(x){ extract.info(pop_vcf, element = x) })),
                   ncol = length(my_INFOs), byrow = FALSE))
                   
 user  system elapsed 
302.210   0.092 302.336 

### STEP3b: The same was implemented with mclapply function and this took ˜5 min (316 sec) ####
system.time(my_INFOm <- matrix(unlist(mclapply(my_INFOs, function(x){ extract.info(pop_vcf, element = x) })),
                   ncol = length(my_INFOs), byrow = FALSE))
                   
   user  system elapsed 
316.789   1.800 170.253

###STEP4: The INFO fields are combined with columns 1-8 to get the final output####
colnames(my_INFOm) = as.character(my_INFOs)
popcount_out <- cbind(getFIX(pop_vcf), my_INFOm)
```

The input dataset with 250K variants is taking ˜10min for executing the code in STEP1 + STEP3a or STEP1+ STEP3b. And the run time is increasing with increase in variants in the input VCF file. Is it possible to reduce the runtime with some parallel processing methods in R so that it performs better with the size of the input VCF? I am not familiar with parallel processing methods, in the above code i have used lapply and mclapply for STEP3 which do not have a significant improvement.

Any suggestions to improve performance while reading the file in STEP1 and STEP3a/3b?
Since this has been a performance issue and not a bug in the package to show a reproducible example, i am not able to share any input file. 

Hello - 

I have annotated my VCF files with VEP. I love the vcfR2tidy function which parses out the vcf file into different data frames for visualization and downstream analysis. However, I noticed that the CSQ column (where all the VEP functional annotation is added separated by "|") does not parse out into the individual columns, even though the meta data frame shows the details of all the annotations present in this column. Please advice. 

# Convert to tidy dataframe
test2 <- vcfR2tidy(vcfv, info_only = TRUE) 
names(test)
test2 <- extract_info_tidy(vcfv, info_fields = NULL, info_types = TRUE)

The CSQ column still looks like this :                                                                                                                                                                                                                                     
[3] "-|downstream_gene_variant|MODIFIER|PERM1|ENSG00000187642|Transcript|ENST00000341290|protein_coding||||||||||rs773396084|2952|-1||deletion|HGNC|HGNC:28208||2|A2||ENSP00000343864|Q5SV97||UPI000022DAF4||||||||||||4.879e-05|9.151e-05|3.645e-05|0|0|7.49e-05|5.849e-05|0|4.991e-05|9.151e-05|gnomAD_AFR||||||||,-|intron_variant|MODIFIER|PLEKHN1|ENSG00000187583|Transcript|ENST00000379407|protein_coding||9/14||||||||rs773396084||1||deletion|HGNC|HGNC:25284||1|A2|CCDS53256.1|ENSP00000368717|Q494U1||UPI00005764FF||||||||||||4.879e-05|9.151e-05|3.645e-05|0|0|7.49e-05|5.849e-05|0|4.991e-05|9.151e-05|gnomAD_AFR||||||||,-|intron_variant|MODIFIER|PLEKHN1|ENSG00000187583|Transcript|ENST00000379409|protein_coding||8/14||||||||rs773396084||1||deletion|HGNC|HGNC:25284||2|A2||ENSP00000368719|Q494U1||UPI0000D61E06||||||||||||4.879e-05|9.151e-05|3.645e-05|0|0|7.49e-05|5.849e-05|0|4.991e-05|9.151e-05|gnomAD_AFR||||||||,-|intron_variant|MODIFIER|PLEKHN1|ENSG00000187583|Transcript|ENST00000379410|protein_coding||9/15||||||||rs773396084||1||deletion|HGNC|HGNC:25284|YES|1|P3|CCDS4.1|ENSP00000368720|Q494U1||UPI00001416D8||||||||||||4.879e-05|9.151e-05|3.645e-05|0|0|7.49e-05|5.849e-05|0|4.991e-05|9.151e-05|gnomAD_AFR||||||||,-|downstream_gene_variant|MODIFIER|PERM1|ENSG00000187642|Transcript|ENST00000433179|protein_coding||||||||||rs773396084|2953|-1||deletion|HGNC|HGNC:28208|YES|5|P2|CCDS76083.1|ENSP00000414022|Q5SV97||UPI0003E30FA7||||||||||||4.879e-05|9.151e-05|3.645e-05|0|0|7.49e-05|5.849e-05|0|4.991e-05|9.151e-05|gnomAD_AFR||||||||,-|downstream_gene_variant|MODIFIER|PERM1|ENSG00000187642|Transcript|ENST00000479361|retained_intron||||||||||rs773396084|2953|-1||deletion|HGNC|HGNC:28208||1||||||||||||||||||4.879e-05|9.151e-05|3.645e-05|0|0|7.49e-05|5.849e-05|0|4.991e-05|9.151e-05|gnomAD_AFR||||||||,-|downstream_gene_variant|MODIFIER|PLEKHN1|ENSG00000187583|Transcript|ENST00000480267|retained_intron||||||||||rs773396084|729|1||deletion|HGNC|HGNC:25284||3||||||||||||||||||4.879e-05|9.151e-05|3.645e-05|0|0|7.49e-05|5.849e-05|0|4.991e-05|9.151e-05|gnomAD_AFR||||||||,-|upstream_gene_variant|MODIFIER|PLEKHN1|ENSG00000187583|Transcript|ENST00000491024|protein_coding||||||||||rs773396084|1260|1|cds_start_NF|deletion|HGNC|HGNC:25284||3|||ENSP00000462558||J3KSM5|UPI000268AE1F||||||||||||4.879e-05|9.151e-05|3.645e-05|0|0|7.49e-05|5.849e-05|0|4.991e-05|9.151e-05|gnomAD_AFR||||||||"

Hi Brian,

When using `vcfR2genlight()` with a very small dataset, the function may set different ploidy for each sample. This behavior comes from the automatic determination of the ploidy when creating an object of genlight class (see ploidy section from the [genlight-class documentation](https://www.rdocumentation.org/packages/adegenet/versions/2.0.1/topics/genlight-class)). Below a reproducible example and a solution.

### The reproducible example

```R
library(adegenet)
data(vcfR_test)

# Conversion
gl <- vcfR2genlight(vcfR_test)

# Ploidy of each sample (all should be 2)
ploidy(gl)
#NA00001 NA00002 NA00003 
#      1       1       2 

# The genotype data with only biallelic sites
vcfR_test[ !grepl(",", vcfR_test@fix[,5]), ]@gt
#     FORMAT        NA00001          NA00002          NA00003       
#[1,] "GT:GQ:DP:HQ" "0|0:48:1:51,51" "1|0:48:8:51,51" "1/1:43:5:.,."
#[2,] "GT:GQ:DP:HQ" "0|0:49:3:58,50" "0|1:3:5:65,3"   "0/0:41:3"    
#[3,] "GT:GQ:DP:HQ" "0|0:54:7:56,60" "0|0:48:4:51,51" "0/0:61:2"    
```

When `vcfR2genlight()` translates the genotypes in binary code, the maximum allele code will be 0 (`0|0`), 1 (`1|0` or `0|1`), and 2 (`1/1`) for the first, second and third sample, respectively. So genlight will determine that the two first samples are haploid and the second is diploid.

### The solution
The ploidy can be indicated when creating a genlight object. So the solution is to add this argument in the `vcfR_conversion.R` file:
```R
# Line 145 should be:
x <- new('genlight', t(x), n.cores=n.cores, ploidy=2)
```
But I think it would be better to have the `ploidy` as an argument of the `vcfR2genlight()`. This would allow:
* someone who has "diploidized" the data to specify the ploidy of the organism (this can sometimes be the case when you work on malaria).
* someone who has samples with different ploidy (like in yeast).

If the `ploidy` is an argument, a warning message about mixed ploidy in the resulting genlight object could be a plus.

### Comment
A more elegant way could be to determine the ploidy from the data. I wonder if it would be worth writing a general function to estimate the ploidy from the VCF because this has been raised several times (#106, #117, #121).

Fred
Hi Brian,

I found another unexpected behavior when using `vcfR2DNAbin()` which is not related to #122.  When data have indels with missing data and these indels are kept, a DNAbin object of list type is created (due to the generation of sequences of different lengths) but labels are missing. Below a reproducible example and a solution.

### The reproducible example
```R
library(ape)
data(vcfR_test)

# Create an example reference sequence.
nucs <- c('a','c','g','t')
set.seed(9)
myRef <- as.DNAbin(matrix(nucs[round(runif(n=20, min=0.5, max=4.5))], nrow=1))

# Recode the POS data for a smaller example.
set.seed(99)
vcfR_test@fix[,'POS'] <- sort(sample(10:20, size=length(getPOS(vcfR_test))))

# Conversion to DNAbin object
vcfR2DNAbin(vcfR_test, extract.indels=FALSE, unphased_as_NA=FALSE)
# This data has no missing data so sequences of same length can be created
# and DNAbin of matrix type is generated

# Introduction of missing data
vcfR_test@gt[5,2] <- "./.:35:4"

# Conversion to DNAbin object
vcfR2DNAbin(vcfR_test, extract.indels=FALSE, unphased_as_NA=FALSE)
# DNAbin of list type is generated
# Labels are missing
```

### The solution

The problem comes from the transposition when generating the DNAbin object at the end of `vcfR2DNAbin()`. But this transposition is only needed when a matrix is converted.

Here is the modification proposed:
```R
# Replace line 299 with this block
if (is.matrix(x)) { x <- t(x) }
x <- ape::as.DNAbin(x)
```

Fred
This is similar to issue #107.

We would like an interface where one can specify chromosome + region, and obtains only the parts of the VCF that correspond to this query. This would most likely mean supporting tabix indexed vcf files. Reading the whole VCF is simply not going to happen.

The current `skip` and `nrows` parameters are not useful to us. To know those values, we would first have to index the vcf somehow - exactly the job for Tabix.
Excellent package!
I have prototyped a few solutions to use this to apply ML classification of called variants and do filtering. 

This is more of a feature request. Just wanted to add that VCFs should block gzipped(bgzf) and not standard gzip. The former is necessary to index the VCF using bcftools and is widely considered a standard. 
https://samtools.github.io/bcftools/bgzf-aes-encryption.html

Thanks for all your efforts in making vcfR available. 
Hi Brian,

I found an unexpected behavior of `vcfR2DNAbin()`. I would not qualify this as a bug *per se* because it is coming from a particular behavior of a DNAbin object created by one function from the `ape` package (but I don't know if this is a bug in this function as I don't know the specifications of the DNAbin class). Anyway I found a solution for `vcfR` to handle all cases.

### The unexpected behavior

I wanted to include my variants in a reference sequence using `vcfR2DNAbin()`. This reference sequence was extracted from a reference genome imported using `read.dna()` from the `ape` package. The result produced by `vcfR2DNAbin()` contained a sequence of the right length but with `NA` for all the invariant bases instead of the expected reference bases. When using the example of the `vcfR` manual, everything worked perfectly fine.

### The explanation

The behavior occurs only when the sequence is stored as a list in the DNAbin object. The list is used when sequences of different lengths are loaded in the same DNAbin object which is the case of my reference genome. A sequence extracted from the reference genome will inherit the list type. But the behavior also depends on what function is used for creating the list: if `as.DNAbin()` is used, everything works fine with `vcfR2DNAbin()` but if `read.dna()` is used, the behavior occurs.

Here is a reproducible example inspired from `vcfR` manual:
```R
library(ape)
data(vcfR-test)

set.seed(9)

vcfR_test@fix[,'POS'] <- sort(sample(10:20, size=length(getPOS(vcfR_test))))

# Reference sequence
nucs <- c('a','c','g','t')
mySeq <- nucs[round(runif(n=20, min=0.5, max=4.5))]

myRef.mat <- matrix(mySeq, nrow=1)
rownames(myRef.mat) <- "test"

myRef.ls <- list(mySeq)
names(myRef.ls) <- "test"

## Fasta file for read.dna()
cat(">test",
    paste(mySeq, collapse=""),
    file = "exdna.fas", sep="\n")

# Loading reference sequence as matrix
myRef.db <- as.DNAbin(myRef.mat)
myRef.rd <- read.dna("exdna.fas", format="fasta")

# Do both methods produce the same object?
identical(myRef.db, myRef.rd)
# TRUE

# Loading reference sequence as list
myRef.db <- as.DNAbin(myRef.ls)
myRef.rd <- read.dna("exdna.fas", format="fasta", as.matrix=FALSE)

# Do both methods produce the same object?
identical(myRef.db, myRef.rd)
# FALSE

# Results from vcfR2DNA
myDNA.db <- vcfR2DNAbin(vcfR_test, ref.seq=myRef.db)
myDNA.rd <- vcfR2DNAbin(vcfR_test, ref.seq=myRef.rd)

as.character(myDNA.db)
as.character(myDNA.rd)
```

The problem comes from the way the data is accessible from each object. This has a big impact on `vcfR2DNAbin()`. The data loaded with `as.DNAbin()` is never directly accessible (`myRef.db[[1]]`) contrary to the data loaded with `read.dna()` (`myRef.rd[[1]]`). So when `as.character()` is used ([line 262 of  `vcfR2DNAbin()`](https://github.com/knausb/vcfR/blob/c76017b6bb66db44b4d84a3a61a1dc27fa53a8ec/R/vcfR2DNAbin.R#L262)), the binary code is translated in nucleotides in the first case but it is kept as is in the second case. When `vcfR2DNAbin()` recreates a DNAbin object, in the first case, it translates back the nucleotides into binary code but in the second case, as the binary code is already present, it translates the binary numbers into `NA` because they do not correspond to any nucleotides.

Here is an illustration:
```R
as.character(myRef.db[[1]])
as.character(myRef.rd[[1]])
```

### The remedy

As I wrote, it might be a bug from `read.dna()` but I found a work around to accommodate any cases when a DNAbin object is of list type. The first step is is to convert the first item of the list to a sequence without trying to access the item itself (so the sequence will still be of list type), unlist the sequence and store the vector for later use. This implies also to modify the `if` statement of the `is.matrix(ref.seq)` to obtain the sequence and to modify the way the matrix of reference sequences is created. 

Here are the modifications proposed:
```R
# Replace lines 159-162 with this block
if (is.list(ref.seq)) {
    ref.seq <- unlist(as.character(ref.seq[1]), use.names=FALSE)
}

# Replace lines 163-166 with this block
if (is.matrix(ref.seq)) {
	ref.seq <- ref.seq[1, ]
	ref.seq <- ref.seq[1:ncol(ref.seq)]
	ref.seq <- as.character(ref.seq)
}

# Replace line 262 with this line
x <- matrix(ref.seq, nrow = length(ref.seq),
```

Fred

Hello,

I have an issue related to missing data with the function `extract.haps()`. I have diploid data that was processed by different tools before being loaded in R. One of the tools seems to recode the filtered out data with a single `.` and not `./.`. This has some consequences when this coded missing data is the first value of the dataset: the ploidy is not recognized and the function returns an unexpected result.

Here is a reproducible example:
```R
data(vcfR_test)

extract.haps(vcfR_test, unphased_as_NA=F)
#Variant 3 processed
#           NA00001_0 NA00001_1 NA00002_0 NA00002_1 NA00003_0 NA00003_1
#rs6054257  "G"       "G"       "A"       "G"       "A"       "A"
#20_17330   "T"       "T"       "T"       "A"       "T"       "T"
#rs6040355  "G"       "T"       "T"       "G"       "T"       "T"
#20_1230237 "T"       "T"       "T"       "T"       "T"       "T"
#microsat1  "GTC"     "G"       "GTC"     "GTCT"    "G"       "G"

# Replacing first cell of sample data with missing data coded by a single dot
vcfR_test@gt[1,2] <- ".:.:.:.,."

extract.haps(vcfR_test, unphased_as_NA=F)
#           NA00001 NA00002 NA00003
#rs6054257  NA      "1|0"   "1/1"
#20_17330   NA      "0|1"   "0/0"
#rs6040355  "1|2"   "2|1"   "2/2"
#20_1230237 "0|0"   "0|0"   "0/0"
#microsat1  "0/1"   "0/2"   "1/1"
```


Here is the code that leads to this behavior:
https://github.com/knausb/vcfR/blob/c76017b6bb66db44b4d84a3a61a1dc27fa53a8ec/R/extract_gt.R#L174-L177

A solution would be to not search for the first non `NA` value but to actually search for the genotype separator (`/` or `|` or `:` if haploid data). Here is the piece of code that fixes it:
```R
first.gt <- unlist(strsplit(x@gt[,-1][grep("^[0-9]*[\\|/:]",x@gt[,-1])][1], ":"))[1] 
```

This is different from #29 which, if I am right, is the C function that will actually extract the haplotypes.

Anyway, thank you for fixing this.

Fred