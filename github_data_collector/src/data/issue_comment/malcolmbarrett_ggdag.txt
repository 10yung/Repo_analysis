
The new version of ggplot2 has an updated `use_defaults()` method in `Geom`. As you overwrite this method it result in an error.

The new implementation is a bit more involved, so rather than completely overwriting it I'd suggest calling the parent method using `ggproto_parent()` and then do any additional modification you need
dagitty allows to specify a single control point when drawing edges, e.g.

```
dag {
bb="-3,-0.5,2,1.2"
D [outcome,pos="1.000,1.000"]
E [exposure,pos="-2.000,1.000"]
Z [pos="-0.500,0.500"]
D <-> Z [pos="1.000,-1.000"]
E -> D
E <-> Z [pos="-2.000,-1.000"]
}
```

The edge control points are currently not imported by ggdag, which would be convenient for users who use the dagitty web interface to initially build dogs.


I think the coordinates API is unclear, as several people (myself included) have stumbled over it or missed it altogether. I think this needs a few changes:

- [ ] Examples in the new customizing DAGs vignette
- [ ] A separate function that can specify coordinates, something like `dag_coords()` that will override `dagitty` object coords and, if it's already tidied, update the `tidy_dag` coords.

However, I need to think about the second item more

ggraph 2.0.0 now uses `strength` instead of `curvature`. It may make sense to be consistent with this in ggdag
With some DAGs it's helpful to plot them horizontally rather than vertically (e.g. saving space in journals and reports). Flipping the plots is easy enough with `coord_flip()`, but there are a couple problems with doing that.

Here's a reprex:

``` r
library(tidyverse)
library(ggdag)

example <- dagify(Y ~ X,
                  X ~ A + B) %>% 
  tidy_dagitty(layout = "sugiyama")

# Normal top-down graph
ggdag(example)
```

![](https://i.imgur.com/Sc8m62P.png)

Flipping this is as easy as adding `coord_flip()`:

``` r
# Flipped x and y axis so that the DAG is horizontal
ggdag(example) +
  coord_flip()
```

![](https://i.imgur.com/1onAYcC.png)

However, this now reads from right to left, rather than left to right. It would be nice to have A and B on the left and Y on the right since English reads left to right, top to bottom. 

The only way to do this now is to add `scale_y_reverse()` to flip the y axis (which is now horizontal thanks to `coord_flip()`. Doing this creates a message, though, since `scale_y_continuous()` is already set as part of `scale_dag()`:

    Scale for 'y' is already present. Adding another scale for 'y', which will replace the existing scale.

It's easy enough to live with the message and not worry, but `scale_y_reverse()` also needs additional arguments to make it equivalent to just using `scale_dag()`. Without `expand = expand_scale(c(0.1, 0.1))`, the nodes appear too close to the edge of the plot. Adding the `expand` argument works fine and the DAG flips without issues (except for the message):

``` r
ggdag(example) +
  coord_flip() + 
  scale_y_reverse(expand = expand_scale(c(0.1, 0.1)))
#> Scale for 'y' is already present. Adding another scale for 'y', which
#> will replace the existing scale.
```

![](https://i.imgur.com/TltJ7Dg.png)

It would be cool if there were a more systematic way of doing this, like `scale_dag(flip = TRUE)` or something. I don't know the best approach, though, and I don't know if an addition like that fits with the overall philosophy of the package. Plus in some situations, not reversing the y axis could be helpful (Arabic/Hebrew DAGs that should read right to left horizontally). 

<sup>Created on 2019-05-21 by the [reprex package](https://reprex.tidyverse.org) (v0.2.1)</sup>
Thanks for the package. It took me some time to manage to use option `use_labels` in `ggdag`. Consider
```
dag <- dagify(y ~ x, 
  labels = c(y = "outcome", x = "exposure"), 
  outcome = "y", exposure = "x")
```
Then
```
dag %>% tidy_dagitty %>% ggdag(text = FALSE, use_labels = "label")
```
works whereas
```
dag %>% tidy_dagitty %>% ggdag(text = FALSE, use_labels = "labels")
```
does not (**one** difference, `label` versus `labels`). Is something subtle happening?

I'm using `R` (version 3.4.4) and both the CRAN and development version of the package.
