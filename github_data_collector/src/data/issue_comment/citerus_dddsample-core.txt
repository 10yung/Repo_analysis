https://github.com/citerus/dddsample-core/blob/master/src/main/java/se/citerus/dddsample/application/impl/BookingServiceImpl.java#L38

```java
    final TrackingId trackingId = cargoRepository.nextTrackingId();
    final Location origin = locationRepository.find(originUnLocode);
    final Location destination = locationRepository.find(destinationUnLocode);
    final RouteSpecification routeSpecification = new RouteSpecification(origin, destination, arrivalDeadline);

    final Cargo cargo = new Cargo(trackingId, routeSpecification);

    cargoRepository.store(cargo);
```

Here the `Location` is an entity, actually it looks like an aggregate root. Still you pass it as a parameter to the `RouteSpecification`.  Afaik. aggregates cannot access each other directly. You should have added only a verified `LocationId` to the `RouteSpecification`, which is not necessarily the `UnLocode` you use for finding it. But correct me if I am wrong.
Hi guys,

Just a short commit renaming the location Hangzhou. Hope it helps.
> mvn spring-boot:run
Error: org.hibernate.tool.schema.spi.CommandAcceptanceException: Error executing DDL via JDBC Statement
ignore the configuration of intellij+all,mac,windows and eclipse.

in class  SampleLocations, "HANGZOU" is not correcttly spelled,  pls change it to "HANGZHOU" 
After doing some research, I got confirmation that _folder-by-feature_ is superior to _folder-by-layer_ in the majority of cases. To get some arguments we can read among others, [this article](https://hackernoon.com/package-by-features-not-layers-2d076df1964d), [this one](http://www.javapractices.com/topic/TopicAction.do?Id=205), or even [this answer](https://softwareengineering.stackexchange.com/a/338610/210827).

I think that the code of DDDSample should be refactored to follow this approach, or even using [modules](https://www.culttt.com/2014/12/10/modules-domain-driven-design/).

What do you think?


To run the project using Java 9 or 10, I had to add the following configuration;

```
            <plugin>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-maven-plugin</artifactId>
                <configuration>
                    <jvmArguments>--add-modules java.xml.bind,java.xml.ws</jvmArguments>
                </configuration>
            </plugin>
```

Unfortunately, this will break Java 8 support.
With this commit the project gets a Maven Wrapper from Takari. This way
the project is more self-contained.