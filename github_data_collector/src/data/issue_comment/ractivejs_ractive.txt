## Description:
The 60 second setup in the [Wiki](https://github.com/RactiveJS/Ractive/wiki/60-second-setup), link to where the guide is supposed to be hosted, points to nowhere when you go there, also the link seems to be not correct, as the correct path would be to point to the actual website url (https://ractive.js.org/)

## Versions affected:
N/A
## Platforms affected:
N/A
## Reproduction:
N/A
## Description:
When 'on-tap' is on radio button, even if the button is tapped the button is not be 'checked'.
## Versions affected:
0.9.11
## Platforms affected:
Safari(cordova ios webview)
## Reproduction:
HTML:
`<input type="radio"  name="{{r_su}}" value="1" on-tap="['r_su_changed', '1']">`
`<input type="radio"  name="{{r_su}}" value="2" on-tap="['r_su_changed', '2']">`



JS:
`
					r_su_changed: (e, arg) => {

						if(arg == '1') {

							this.data.playinfo.r_su = 1;
							this.data.playinfo.half2_no = '0';
							this.ractive.set({
								half2_info: {
									half2_no: this.data.playinfo.half2_no,
									half2_course: [{
										c_no: '0',
										c_name: 'なし',
									}],
								},
								playinfo: this.data.playinfo,
								select_hidden: (common.isEmpty(this.data.course)),								});
						} else {
							this.data.playinfo.r_su = 2;
							if(! common.isEmpty(this.data.course)) {
								this.data.playinfo.half2_no = this.data.course[0].c_no;
								this.ractive.set({
									half2_info: {
										half2_no: this.data.playinfo.half2_no,
										half2_course: half2_course,
									},
									select_hidden: false,
									playinfo: this.data.playinfo,
								});
							}
						}
						return true;
					},
`
## Description:
I'm dynamically loading in ractive components with webpack's `import(...)` and then using `Ractive.attachChild(lazyLoadedComponentInstance, 'anchor-name')`. But the dynamically-attached child component doesn't seem to get torn down.

The parent component that owns the anchor `<# anchor-name>` tears down when it's hidden, but the dynamically attached child doesn't (example code below).

Docs for [attachChild](https://ractive.js.org/legacy/0.9/api/#ractiveattachchild) indicate that the parent will manage the attached child's render/unrender cycle. Does that cycle include teardown?

## Versions affected:
1.3.6

## Reproduction:
This code demonstrates how dynamically-attached child components don't teardown, but non-dynamically-attached children _do_ teardown.

```
<!DOCTYPE html>
<html lang="en">
<head>
    <title>Ractive Dynamic Components</title>
</head>
<body>
</body>
<script src="https://cdn.jsdelivr.net/npm/ractive"></script>
<script>
    Page1 = Ractive.extend({
        template: `Page 1 {{msg}}`,
        onteardown() {
            console.log('tearing down page 1')
        }
    })

    Page2 = Ractive.extend({
        template: `Page 2 {{something}}`,
        onteardown() {
            console.log('tearing down page 2')
        }
    })

    AppRoutesDynamic = Ractive.extend({
        template: `
        <h1>Dynamic page components</h1>
        <button on-click="@.set('active', 'page1')">Page 1</button>
        <button on-click="@.set('active', 'page2')">Page 2</button>
        <div>
            {{#if active === 'page1'}}<# page1 msg="yay" />{{/if}}
            {{#if active === 'page2'}}<# page2 something="yep" />{{/if}}
        </div>`,

        oninit() {
            console.log('AppRoutesDynamic initing')
            this.page1 = null
            this.page2 = null
            this.observe('active', active => {
                if (active == null)
                    return
                // if page component isn't yet attached, attach it
                if (active === 'page1' && this.page1 == null) {
                    this.page1 = Page1()
                    this.attach(this.page1, 'page1')
                } else if (active === 'page2' && this.page2 == null) {
                    this.page2 = Page2()
                    this.attach(this.page2, 'page2')
                }
            })
        },

        onteardown() {
            console.log('AppRoutesDynamic tearing down')
        },

        goTo (componentName) {
            if (componentName === 'page1') {
                if (this.page1 == null)
                    this.page1 = Page1()
                this.attach(this.page1, 'page1')
            } else {
                if (this.page2 == null)
                    this.page2 = Page2()
                this.attach(this.page2, 'page2')
            }
        },

        attach(pageInstance, target) {
            this.attachChild(pageInstance, { target })
        }
    })

    AppRoutes = Ractive.extend({
        template: `
        <h1>Static page components</h1>
        <button on-click="@.set('active', 'page1')">Page 1</button>
        <button on-click="@.set('active', 'page2')">Page 2</button>
        <div>
            {{#if active === 'page1'}}<Page1 msg="yay" />{{/if}}
            {{#if active === 'page2'}}<Page2 something="yep" />{{/if}}
        </div>`,

        components: {
            Page1,
            Page2
        },

        data() {
            return {
                active: null
            }
        },

        onteardown() {
            console.log('AppRoutes tearing down')
        }
    })

    Ractive({
        el: document.body,
        template: `
            <button on-click="@.toggle('show')">Toggle page components' parent</button><br/><br/>
            {{#if show}}
                <!-- <AppRoutes /> this works as expected -->
                <AppRoutesDynamic /> <!-- this one doesn't call teardown on page components -->
            {{else}}
                AppRoutes hidden, so expecting currently-shown page component to tear down
            {{/if}}
        `,
        components: {
            //AppRoutes,
            AppRoutesDynamic
        },
        data() {
            return {
                show: true
            }
        }
    })
</script>
</html>
```
I'm new to ractive and looking at the table sort tutorial at https://ractive.js.org/tutorials/iterative-sections/#step-5

I see this in my console: **Overriding Ractive prototype function 'sort' without calling the '/\b_super\b/' method can be very dangerous.**

Am I doing something wrong?
Is there any way to stop event propagation with event delegation in iterative sections on?
Hi,

I have this code example:
```javascript
const MyComponentA = Ractive.extend({
    template: '<h1>Hello from my custom component A</h1>'
});

const MyComponentB = Ractive.extend({
    template: '<h1>Hello from my custom component B</h1>'
});

const InnerComponent = Ractive.extend({
    template: '<div class="custom">{{yield}}</div>'
});

const OuterComponent = Ractive.extend({
    components: {
        InnerComponent
    },
    template: '<div class="outer">{{>content}}</div>'
});

const app = new Ractive({
    components: {
        MyComponentA,
        MyComponentB,
        OuterComponent
    },
    el: document.body,
    template: `<div class="app">
        <OuterComponent>
                <InnerComponent>
                    <MyComponentA/>
                </InnerComponent>
                <InnerComponent>
                    <MyComponentB/>
                </InnerComponent>
        </OuterComponent>
    </div>`
});
```

I know that this code won't render **MyComponentA** neither **MyComponentB** as ```{{yield}}``` keyword actually sets the context to **OuterComponent** which doesn't know how to resolve them.

Is there a way to move ```{{yield}}``` context multiple levels up or am I just doing the whole thing terribly wrong?

Thanks!
Currently you can use computeds with get() and set() keys as the syntax. I'd love to also see a compare() key. The compare key allows you to define a custom comparator for new and old values to see whether downstream dependencies and observers should fire.

I could be wrong, but right now all non-literal computeds seem to always fire observers when their upstream values change. This change would allow me to stop non-changes to objects from trickling downstream unnecessarily.

For example:
```
computed: {
    myObj: {
        get() {
            const foo = this.get('mySourceObj')
            return Object.assign({}, foo)
        }
        compare: JSON.stringify,
    }
}
```

This would use `JSON.stringify(val) === JSON.stringify(oldVal)` instead of `val === oldVal`
Hi,

the example is here:

https://dagnelies.github.io/ractive-examples/editor4panes.html?url=widgets/simple-grid.html

There are two tables. The first is plainly in the template. With an `on-click="@.link(@keypath, 'selectedBis')"` and the other basically the same but wrapped inside a component. You can see that clicking on the first table propagates the binding to the second table (it's the same data), but if you click on the second table wrapped in a component, the  `on-click="@.link(@keypath, 'selectedBis')"` appears to break the "link".
In order to keep Ractive rocking, I think providing examples is a good way to go forward:

https://dagnelies.github.io/ractive-examples/

Contributions welcome, make it even greater. Possibly even linking it in the main site. Sorry if the style is not up to date. Most of it was done pre-theme-change.
Hi,

I noticed that a recent update from `https://cdn.jsdelivr.net/npm/ractive` (I assume it's "latest" and gone from 0.9 to 0.10) changed how event methods are handled.

Following snippet:

    <button on-click="doSomething(this)"></button>

doesn't work anymore and just throws a cryptic exception.
Instead it should apparently now be replaced with the more unambiguous:

    <button on-click="@this.doSomething(this)"></button>

Due to the widespread usage of calls like `on-click="set('my.key.path', 'foo')"`, I think placing a warning if such methods don't start with a `@...` would be very helpful. Otherwise, people have no clue what's going on when updating.