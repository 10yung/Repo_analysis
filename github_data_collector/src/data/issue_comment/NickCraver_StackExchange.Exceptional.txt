Dear Mr Craver, i have implemented a datastore to Oracle-DB. I hope  this will help other develpers in future if the need oracle support. Maybe you are interested to include it to your great Exceptional lib.  What i don't know is if the oracle licence for the oracle client (Nuget Oracle.ManagedDataAccess.Core) is a problem for the licence of your project.
Hi, I came across this strange issue when publishing `StackExchange.Exceptional` as part of a .NET Core Worker service, making it fail to run.

When a worker project references the `StackExchange.Exceptional.AspNetCore` package ([as in docs](https://nickcraver.com/StackExchange.Exceptional/ConsoleDotNetCore)), its published `project.runtimeconfig.json` file includes the framework name as `Microsoft.AspNetCore.App` instead of `Microsoft.NETCore.App`.

Actual error message when worker is run on a machine with .NET Core runtime (worker project shouldn't need the ASP.NET Core runtime):

```
It was not possible to find any compatible framework version
The framework 'Microsoft.AspNetCore.App', version '3.1.0' was not found.
  - No frameworks were found.

You can resolve the problem by installing the specified framework and/or SDK.

The specified framework can be found at:
  - https://aka.ms/dotnet-core-applaunch?framework=Microsoft.AspNetCore.App&framework_version=3.1.0&arch=x64&rid=ubuntu.18.04-x64
```

Any idea why this happens, and how to fix it?

Environment:
* .NET Core 3.1 and SDK 3.1.100
* StackExchange.Exceptional v2.1.0 (latest)
* Tested on Windows 10 64bit and Ubuntu Server 18.04 64bit

Steps to reproduce:

1. Create new worker project:
```
dotnet new sln
dotnet new Worker -n MyWorker
dotnet sln add MyWorker
```

2. Add the Exceptional package reference to the `MyWorker.csproj` project file:
```
<ItemGroup>
    <PackageReference Include="StackExchange.Exceptional.AspNetCore" Version="2.1.0" />
</ItemGroup>
```

3. Build and publish the project:
```
dotnet build --configuration Release
dotnet publish MyWorker -c Release -o publish\worker
```

4. Open the `publish\worker\MyWorker.runtimeconfig.json` file, which will show the incorrect framework name as `Microsoft.AspNetCore.App`:
```
{
  "runtimeOptions": {
    "tfm": "netcoreapp3.1",
    "framework": {
      "name": "Microsoft.AspNetCore.App",
      "version": "3.1.0"
    }
  }
}
```

Without the Exceptional package reference, the build and publish step generate a valid runtime config (with framework name as `Microsoft.NETCore.App`).
Currently the docs for [ASP.NET Core usage](https://nickcraver.com/StackExchange.Exceptional/AspDotNetCore#middleware) with regards to `UseExceptional` middleware say:

> Note that you should call this before anything you want handled, as exceptions will ‚Äúbubble up‚Äù to this point.

But Exceptional doesn't log anything when the app is also using the inbuilt `UseExceptionHandler` middleware (as shown below).

```csharp
public void Configure(IApplicationBuilder app)
{
    app.UseExceptional();
    app.UseExceptionHandler("/Error");
}
```

Please make a note in the docs that when using `UseExceptionHandler`, `UseExceptional` must be called after it (not before), for both to work.
I was playing around with implementing an error store for [elmah.io](https://elmah.io) during the weekend. While I could get it working, I stumbled across a couple of issues that needed "hacks" in order to implement. Like error stores need a connection string, which doesn't make a lot of sense for cloud-hosted services. These typically use some kind of authentication and an API to log errors.

What are your thoughts about this? Does it make sense to implement cloud-hosted error stores or is Exceptional geared towards databases only? Also, cloud services typically have their own UI to present errors why implementing all of the getters and deletes feels redundant. Would give the user a choice to use either the cloud service UI or something like Opserver, of course.
Using v2.0.0 im initialising the MemoryErrorStore like so:
However the ApplicationName setting is not respecting the log UI still shows "My Application"

``` 
settings.DefaultStore = new StackExchange.Exceptional.Stores.MemoryErrorStore(new ErrorStoreSettings()
                {
                    ApplicationName = "Test",
                    RollupPeriod = TimeSpan.FromMinutes(30),
                    Size = 5000
                });
```

Note that this is in an asp.net (netFull) application. And im not using any of the web.config stuff other then the httpmodule initialisation.

Note that using the config setting:

```
<Exceptional applicationName="Test name">
  </Exceptional>
```
Does work.
Not sure if this is intentional or not but currently the GetHash function only includes the `Exception.ToString()` and optionally `MachineName` but it does not consider custom Exception metadata - for example (from opserver):

![image](https://user-images.githubusercontent.com/2363642/52942743-7ccb7c00-3363-11e9-8590-9eff253813f1.png)

Source for the `GetHash` function: https://github.com/NickCraver/StackExchange.Exceptional/blob/107b8641ac12bd41ae9c3f1378509892034111ff/src/StackExchange.Exceptional.Shared/Error.cs#L230-L244

We find this information helpful to recover from what happened here but what seems to happen is that multiple errors with different information get rolled up into one and only one of the exception's message remains and the others are lost

That's cool if this was intended but thought I'd check, may be worth at least having an option for it like the `MachineName`

Happy to do a PR to implement this if you agree that it always should / should have an option to üòÑ 


When trying to use the MySQL error store on a dotnet core 2.2 application I get the following error:

> Exception: Could not find error store type: MySQL
> StackExchange.Exceptional.ErrorStore.Get(ErrorStoreSettings settings)
> StackExchange.Exceptional.Internal.ExceptionalSettingsBase.get_DefaultStore()
> StackExchange.Exceptional.ExceptionalMiddleware.HandleRequestAsync(HttpContext context)
> ProjectName.AdminController.Exceptions() in AdminController.cs
> +
>         public async Task Exceptions() => await ExceptionalMiddleware.HandleRequestAsync(HttpContext); 

After a bit of investigation it looks like it might be having trouble finding the StackExchange.Exceptional.MySQL.dll

[https://github.com/NickCraver/StackExchange.Exceptional/blob/107b8641ac12bd41ae9c3f1378509892034111ff/src/StackExchange.Exceptional.Shared/ErrorStore.cs#L571](https://github.com/NickCraver/StackExchange.Exceptional/blob/107b8641ac12bd41ae9c3f1378509892034111ff/src/StackExchange.Exceptional.Shared/ErrorStore.cs#L571)

On my machine the dll is in the .nuget folder `/Users/johnboker/.nuget/packages/stackexchange.exceptional.mysql/2.0.0/lib/netstandard2.0`

The bin folder in the project only contains my dlls and a `ProjectName.deps.json` that references dependencies.  I'm guessing since it's not in the same folder as the loading assembly it wont find it correctly.

A bit below the above referenced line there is a call to  `AppDomain.CurrentDomain.GetAssemblies()`

I thought that might get what was needed but when I put that in Main the following is output:

```
List of assemblies loaded in current AppDomain:

System.Private.CoreLib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e
ProjectName, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
System.Runtime, Version=4.2.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a
System.Runtime.Extensions, Version=4.2.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a
System.Console, Version=4.1.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a
Microsoft.AspNetCore.Hosting.Abstractions, Version=2.2.0.0, Culture=neutral, PublicKeyToken=adb9793829ddae60
netstandard, Version=2.0.0.0, Culture=neutral, PublicKeyToken=cc7b13ffcd2ddd51
Microsoft.AspNetCore.Hosting, Version=2.2.0.0, Culture=neutral, PublicKeyToken=adb9793829ddae60 
```

Here's my config:

```
"Exceptional": {
    "Store": {
      "ApplicationName": "ProjectName",
      "Type": "MySQL",
      "ConnectionString": "server=myserver;port=3306;database=exceptional;uid=xxxx;password=xxxx;"
    }
```

In the csproj I have:

```
  <ItemGroup>
    ...
    <PackageReference Include="MySql.Data" Version="8.0.13" /> 
    <PackageReference Include="StackExchange.Exceptional.MySQL" Version="2.0.0" />
    <PackageReference Include="StackExchange.Exceptional.AspNetCore" Version="2.0.0" />
  </ItemGroup>
```


So, what am I doing wrong?

For a project at my company I am making a package that has to be installed to a bunch of different websites. We want to get errors from error loggers if they are installed. And are currently willing to support Elmah and Exceptional.

My boss however, also wants to only distribute 1 package for 3 different possibilities, these being:

 1. Website with exception logger installed
 2. Website with StackExchange.Exceptional installed
 3. Website with Elmah installed

To make these possible I'm trying to dynamically load the dll's of these logger packages and invoke methods needed or get the parameter.

This working perfectly fine for Elmah by doing for example the following:
```cs
Assembly assembly = Assembly.LoadFile(HostingEnvironment.MapPath("~/bin/Elmah.dll"));

    Type type = assembly.GetType("Elmah.ErrorLog");

    object[] parameters = new object[1];
    parameters[0] = null;

    var customResult = type.InvokeMember("GetDefault", BindingFlags.InvokeMethod, null, type, parameters);

    Type myType = customResult.GetType();
    IList<PropertyInfo> props = new List<PropertyInfo>(myType.GetProperties());

    string result = "";

    foreach (PropertyInfo prop in props)
    {
        if (prop.Name == "Name")
            result = prop.GetValue(customResult, null).ToString();
    }
```
Which right now simply gets the name of the default ErrorLog

Then getting to Exceptional and trying a similar approach:

```cs
Assembly assembly = Assembly.LoadFile(HostingEnvironment.MapPath("~/bin/StackExchange.Exceptional.dll"));

    Type type = assembly.GetType("StackExchange.Exceptional.ExceptionalModule");

    object objectInstance = Activator.CreateInstance(type);

    PropertyInfo info = type.GetProperty("ErrorStore");
    foreach(PropertyInfo property in type.GetProperties())
    {
        LogHelper.Info<Exceptional>(property.Name + ": " + property.GetValue(objectInstance, null));
    }
```

This piece of code is to try and get the name of the ErrorStore of the Default ErrorStore used. With some logging for testing and such.

However the moment it has to do anything with the "Default" parameter of the "ErrorStore" class which is supposed to return the default ErrorStore. I always get an exception thrown:

```
System.Reflection.TargetInvocationException: Exception has been thrown by the target of an invocation. ---> System.ArgumentOutOfRangeException: ErrorStore 'type' must be specified
    Parameternaam: settings
    bij StackExchange.Exceptional.ErrorStore.GetFromSettings(ErrorStoreSettings settings)
    bij StackExchange.Exceptional.ErrorStore.GetErrorStoreFromConfig()
    bij StackExchange.Exceptional.ErrorStore.get_Default()
    bij StackExchange.Exceptional.ExceptionalModule.get_ErrorStore()
    --- Einde van intern uitzonderingsstackpad ---
    bij System.RuntimeMethodHandle.InvokeMethod(Object target, Object[] arguments, Signature sig, Boolean constructor)
    bij System.Reflection.RuntimeMethodInfo.UnsafeInvokeInternal(Object obj,   Object[] parameters, Object[] arguments)
    bij System.Reflection.RuntimeMethodInfo.Invoke(Object obj, BindingFlags invokeAttr, Binder binder, Object[] parameters, CultureInfo culture)
    bij System.Reflection.RuntimePropertyInfo.GetValue(Object obj, BindingFlags invokeAttr, Binder binder, Object[] index, CultureInfo culture)
    bij System.Reflection.RuntimePropertyInfo.GetValue(Object obj, Object[] index)
    bij h5ysr_package.Exceptions.Exceptional.ExceptionalErrors()
    bij h5ysr_package.DataCollectorSender.<StartCollection>d__3.MoveNext()
```

Which brought me to the part of the code that is throwing the error:

```cs
if (settings.Type.IsNullOrEmpty())
            throw new ArgumentOutOfRangeException(nameof(settings), "ErrorStore 'type' must be specified");
```

This being part of the Exceptional package and therefore accessible by me via code.

Is there anyway to make sure type gets specified when loading the StackExchange.Exceptional dll dynamically? Or is just not doable?
Requests such as `/test<illegal.jpg` throw a `System.Web.HttpException` exception

```
[HttpException (0x80004005): A potentially dangerous Request.Path value was detected from the client (*).]
   System.Web.HttpRequest.ValidateInputIfRequiredByConfig() +9939972
   System.Web.PipelineStepManager.ValidateHelper(HttpContext context) +53
```

Exceptional does catch these exceptions, but it is lacking information such as the actual Url. We can trace this down to https://github.com/NickCraver/StackExchange.Exceptional/blob/master/src/StackExchange.Exceptional/AspNetExtensions.cs#L145 where in this case the `context.Handler == null`.

![image](https://user-images.githubusercontent.com/864524/46091157-3c831b80-c180-11e8-986f-c3ceb3b96eaa.png)

ASP.NET core 2.1

```
            services.AddExceptional(options =>
            {
                options.DefaultStore.Settings.ApplicationName = "Business Trips API";
                options.Email.FromDisplayName = "StackExcange.Exceptional";
                options.Email.FromAddress = "xxx@xxx.ru";
                options.Email.ToAddress = "xxx@xxx.ru";
                options.Email.SMTPHost = "smtp.yandex.com";
                options.Email.SMTPPort = 465;
                options.Email.SMTPUserName = "xxx@xxx.ru";
                options.Email.SMTPPassword = "xxxxx";
            });
```