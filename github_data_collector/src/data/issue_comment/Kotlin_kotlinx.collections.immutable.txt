FEATURE REQUEST

A parameterless version of `persistentHashMapOf()` to avoid creating a useless builder and varargs parameter when the code is just going to create its own builder anyway.

```
fun <K, V> persistentHashMapOf(): PersistentMap<K, V> = PersistentHashMap.emptyOf<K,V>()
```

Parameter-less versions of `persistentSetOf` and `persistentListOf()` already exist. It seems odd that this is missing.
The current proposal document is undecided about whether to expose implementation types in the API. I'm confused about that. If only interface types are exposed, how can consumers be sure the collection objects they are dealing with are really immutable? Relying on adherence to the contract seems fragile. A buggy "smart" custom implementation can cause hard-to-diagnose problems far from the source of the error. It defeats the encapsulation benefits of using immutable types in APIs.
the name of the `mutate` extension could be a bit misleading, since it is returning a new collection with the given modification and not mutating the existing collection. 

In this way, it is similar to the `copy` method on data classes, so maybe we could change  `mutate` to be `copy` ? 

or some other name that indicates that a new collection is being returned and the existing collection is unmodified. 
Iterable<T>.intersect(other: Iterable<T>) takes a very long time to complete when called with a PersistentList as a parameter. Same function works faster with other iterables like List and Set. It is minutes with PersistentList and milliseconds with List.

I couldn't find the exact reason for that, but it seems that Collection.retainAll does something with the persistent list which takes ages to complete.

Here are some examples:

        (0..147853).toList().intersect((0..147853).toList()) // takes milliseconds
        (0..147853).toList().intersect((0..147853).toPersistentList()) // takes minutes
        (0..147853).toList().intersect((0..147853).toPersistentList().toSet()) // takes milliseconds

        (0..147853).toMutableList().retainAll((0..147853).toPersistentList()) // takes minutes
        (0..147853).toMutableList().retainAll((0..147853).toPersistentList().toList()) // takes milliseconds


My main blocking issue is that https://github.com/Kotlin/kotlinx.serialization is not supported :(
`immutable*Of(…)` functions shouldn't be deprecated.

They should return `Immutable*` instead of `Persistent*`.

e.g.:

```
val x = immutableSetOf(1, 2, 3)
val y: ImmutableSet<Int> = immutableSetOf(1, 2, 3)

// x is PersistentSet<Int>
// y is ImmutableSet<Int>
```

If I want an `Immutable*`, why force me to write an explicit type?

It's not like `immutable*Of(…)` functions are difficult to create or maintain…
For example, here is a `ConcurrentSet`.

```kotlin
import kotlinx.collections.immutable.PersistentSet
import kotlinx.collections.immutable.persistentSetOf
import kotlinx.collections.immutable.toPersistentSet
import java.util.concurrent.atomic.AtomicReference

class ConcurrentSet<E>(initialValue: Set<E> = persistentSetOf()) : MutableSet<E> {
    private val set = AtomicReference(initialValue.toPersistentSet())
    
    fun get() = set.get()
    fun modify(operation: (PersistentSet<E>) -> PersistentSet<E>): Boolean {
        while (true) {
            val old = set.get()
            val new = operation(old)
            if (old === new) return false
            if (set.compareAndSet(old, new)) return true
        }
    }

    override fun iterator(): MutableIterator<E> = object : MutableIterator<E>, Iterator<E> by set.get().iterator() {
        override fun remove() = throw UnsupportedOperationException()
    }

    override fun add(element: E) = modify { it.add(element) }
    override fun addAll(elements: Collection<E>) = modify { it.addAll(elements) }
    override fun clear() {
        modify { persistentSetOf() }
    }
    override fun remove(element: E) = modify { it.remove(element) }
    override fun removeAll(elements: Collection<E>) = modify { it.removeAll(elements) }
    override fun retainAll(elements: Collection<E>): Boolean {
        TODO()
    }

    /**
     * Refrain from using these methods if concurrent safety is required.
     * Use get() instead.
     */
    override val size get() = set.get().size
    override fun contains(element: E) = set.get().contains(element)
    override fun containsAll(elements: Collection<E>) = set.get().containsAll(elements)
    override fun isEmpty() = set.get().isEmpty()
}
```
Benchmark parameters adjustment and benchmark result files will be removed before merging.

Introducing `CollisionTrieNode` for collision nodes (polymorphism approach) adds significant performance losses, see hashSet regressions: https://teamcity.jetbrains.com/viewLog.html?buildId=2469110&buildTypeId=KotlinTools_KotlinxCollectionsImmutable_BenchmarkHashIterations&tab=artifacts#%2FbenchmarkResults
Thus, collision nodes and normal nodes were not separated into different entities.

Final benchmark results: https://teamcity.jetbrains.com/viewLog.html?buildId=2469130&buildTypeId=KotlinTools_KotlinxCollectionsImmutable_BenchmarkHashIterations&tab=artifacts


Canonicalization of collision nodes may help.