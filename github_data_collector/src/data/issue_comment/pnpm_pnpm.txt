manifest's dependencies property must be an object, otherwise it will return an error message

Close #1296
### pnpm version: 4.7.2

### Code to reproduce the issue:

Suppose there are a workspace:
```
|-packages
|  |- bar/package.json # @workspace/foo depends on @workspace/bar@workspace:*
|  |- foo/package.json # @workapace/bar bumped to a prerelease version, e.g. 1.0.0-1
| ...
```
And run `pnpm recursive exec -- pwd`
### Expected behavior:
Command `pwd` runs for `@workspace/foo` before `@workspace/bar`. pnpm sort packages correctly by default, despite the version of packages.
### Actual behavior:
Command `pwd` runs for `@workspace/bar` before `@workspace/foo`. 

### Additional information:
OS: OSX

Sometime I want to update all dependencies in all of my projects and `prune` away unused/outdated versions of packages.
Linking doesn't seem to work anymore. It did work with PNPM 3.x.
I did recreate the node-modules directories after upgrading to 4.x.

### pnpm version: 4.7.2

### Code to reproduce the issue:

```
cd foo
pnpm link
cd ../bar
pnpm link foo
```

### Expected behavior:

It should link `foo` to `bar` instead of throwing an error.

### Actual behavior:

Receiving the following error:
```json
{
  "0 debug pnpm:scope": {
    "selected": 1
  },
  "1 debug pnpm": {
    "isCaseSensitive": false,
    "store": "C:\\Users\\RoelVB\\.pnpm-store\\2"
  },
  "2 error pnpm": {
    "message": {
      "code": "ERR_PNPM_UNEXPECTED_VIRTUAL_STORE",
      "expected": "C:\\Users\\RoelVB\\Documents\\Development\\foo\\node_modules\\.pnpm",
      "actual": "C:\\Users\\RoelVB\\AppData\\Roaming\\npm\\pnpm-global\\node_modules\\foo\\node_modules\\.pnpm",
      "modulesDir": "C:\\Users\\RoelVB\\Documents\\Development\\foo\\node_modules"
    },
    "err": {
      "name": "Error",
      "message": "Unexpected virtual store location",
      "code": "ERR_PNPM_UNEXPECTED_VIRTUAL_STORE",
      "stack": "Error: Unexpected virtual store location\n    at Object.checkCompatibility [as default] (C:\\Users\\RoelVB\\AppData\\Roaming\\npm\\pnpm-global\\3\\node_modules\\.pnpm\\registry.npmjs.org\\pnpm\\4.7.2\\node_modules\\pnpm\\lib\\node_modules\\@pnpm\\get-context\\lib\\checkCompatibility\\index.js:21:15)\n    at Promise.all.projects.map (C:\\Users\\RoelVB\\AppData\\Roaming\\npm\\pnpm-global\\3\\node_modules\\.pnpm\\registry.npmjs.org\\pnpm\\4.7.2\\node_modules\\pnpm\\lib\\node_modules\\@pnpm\\get-context\\lib\\index.js:137:41)\n    at Array.map (<anonymous>)\n    at validateNodeModules (C:\\Users\\RoelVB\\AppData\\Roaming\\npm\\pnpm-global\\3\\node_modules\\.pnpm\\registry.npmjs.org\\pnpm\\4.7.2\\node_modules\\pnpm\\lib\\node_modules\\@pnpm\\get-context\\lib\\index.js:135:32)\n    at Object.getContext [as default] (C:\\Users\\RoelVB\\AppData\\Roaming\\npm\\pnpm-global\\3\\node_modules\\.pnpm\\registry.npmjs.org\\pnpm\\4.7.2\\node_modules\\pnpm\\lib\\node_modules\\@pnpm\\get-context\\lib\\index.js:20:15)\n    at process._tickCallback (internal/process/next_tick.js:68:7)"
    }
  }
}
```

### Additional information:

 - `node -v` prints: v10.16.3
 - Windows, OS X, or Linux?: Windows

<!--
**Please only file bugs/feature requests for pnpm here.**

If you have a question that is not answered in the FAQ section of the README
then it is best to post your question on StackOverflow under the pnpm tag:
https://stackoverflow.com/questions/tagged/pnpm
or ask it in our Gitter chatroom:
https://gitter.im/pnpm/pnpm

If your issue is a bug, please follow the format below:
-->

I've done some investigation into the issue, and I think it stems from this change: https://github.com/pnpm/pnpm/commit/70b5c50b6218521604099a138ad9c48615788611#diff-d1b685eea7a01a36d55534bf94486fceL5

Now instead of trying to read a package.json from a relative location, it's trying to resolve the `pnpm` package and read that package.json. The problem with this is in our projects we use the self-installer to save pnpm into our own specific cache, and so it never gets installed into the node_modules folder it's being run in. This breaks the resolution of `require.resolve(pnpm)`.

### pnpm version: 4.x

### Code to reproduce the issue:
Using the self-installer, install pnpm somewhere
Try getting the pnpm version from `pnpm.js`: `node path/to/lib/bin/pnpm.js -v`

<!--
If there was a fatal error also include a gist of your pnpm-debug.log file.
-->

### Expected behavior:
`node path/to/lib/bin/pnpm.js -v` Outputs the pnpm version

### Actual behavior:
Outputs the following stack trace:

```
(node:98772) UnhandledPromiseRejectionWarning: Error: Cannot find module 'pnpm/package.json'
    at Function.Module._resolveFilename (internal/modules/cjs/loader.js:636:15)
    at Function.resolve (internal/modules/cjs/helpers.js:33:19)
    at Object.<anonymous> (/Users/josephschmitt/development/uc-frontend/.pnpm/4.5.0/lib/node_modules/@pnpm/cli-utils/lib/pnpmPkgJson.js:4:43)
    at Module._compile (internal/modules/cjs/loader.js:778:30)
    at Object.Module._extensions..js (internal/modules/cjs/loader.js:789:10)
    at Module.load (internal/modules/cjs/loader.js:653:32)
    at tryModuleLoad (internal/modules/cjs/loader.js:593:12)
    at Function.Module._load (internal/modules/cjs/loader.js:585:3)
    at Module.require (internal/modules/cjs/loader.js:692:17)
    at require (internal/modules/cjs/helpers.js:25:18)
```

### Additional information:
- Any NodeJS
- macOS 10.15.x
<!--
**Please only file bugs/feature requests for pnpm here.**

If you have a question that is not answered in the FAQ section of the README
then it is best to post your question on StackOverflow under the pnpm tag:
https://stackoverflow.com/questions/tagged/pnpm
or ask it in our Gitter chatroom:
https://gitter.im/pnpm/pnpm

If your issue is a bug, please follow the format below:
-->

### pnpm version:
4.7.1
### Code to reproduce the issue:
`pnpm install`
<!--
If there was a fatal error also include a gist of your pnpm-debug.log file.
-->
[pnpm-debug.log](https://github.com/pnpm/pnpm/files/4045969/pnpm-debug.log)

### Expected behavior:
pnpm installs dependencies and does not error
### Actual behavior:
pnpm first gets stuck for a while saying
```
Packages: +12
++++++++++++
Resolving: total 12, reused 11, downloaded 0
```
Then exits with the following
```
Packages: +12
++++++++++++
 ERROR  ENOENT: no such file or directory, open 'C:\Users\dionn\.pnpm-store\2\registry.npmjs.org\static-route\0.1.2\_tmp_4480_510faaf1c9072bafe5321bd3dab33281\test\weird filename$_..        
newline'
Resolving: total 12, reused 11, downloaded 0
```
packages were not updated
this still occurs after deleting node_modules
### Additional information:
Package.json dependencies
```
  "devDependencies": {
    "httpserver": "^0.3.0",
    "typescript": "^3.4.3"
  }
```
 - `node -v` prints:
v13.3.0
 - Windows, OS X, or Linux?:
Windows 10
<!--
**Please only file bugs/feature requests for pnpm here.**

If you have a question that is not answered in the FAQ section of the README
then it is best to post your question on StackOverflow under the pnpm tag:
https://stackoverflow.com/questions/tagged/pnpm
or ask it in our Gitter chatroom:
https://gitter.im/pnpm/pnpm

If your issue is a bug, please follow the format below:
-->

### pnpm version: 4.7.1

### Code to reproduce the issue
```sh
pnpm add dreamopt@0.6.0
```

<!--
If there was a fatal error also include a gist of your pnpm-debug.log file.
-->

### Expected behavior:
The package is installed instantly.

### Actual behavior:
pnpm prints following error and exits after approx. 70s

> Packages: +2
 ++
 ERROR  Unexpected end of data
at _final                     .nvm/versions/node/v12.14.1/lib/node_modules/pnpm/lib/node_modules/tar-stream/extract.js:253                                            if (this._partial) retur…
at callFinal                  .nvm/versions/node/v12.14.1/lib/node_modules/pnpm/lib/node_modules/tar-stream/node_modules


`tail -n 20 pnpm-debug.log` gives
```
    "downloaded": 20480,
    "packageId": "registry.npmjs.org/dreamopt/0.6.0",
    "status": "in_progress"
  },
  "82 warn pnpm:package-requester": {
    "message": "Fetching registry.npmjs.org/dreamopt/0.6.0 failed!",
    "prefix": "/home/ec2-user"
  },
  "83 error pnpm": {
    "message": {
      "attempts": 3,
      "resource": "https://registry.npmjs.org/dreamopt/-/dreamopt-0.6.0.tgz"
    },
    "err": {
      "name": "Error",
      "message": "Unexpected end of data",
      "stack": "Error: Unexpected end of data\n    at Extract._final (/home/ec2-user/.nvm/versions/node/v12.14.1/lib/node_modules/pnpm/lib/node_modules/tar-stream/extract.js:253:42)\n    at callFinal (/home/ec2-user/.nvm/versions/node/v12.14.1/lib/node_modules/pnpm/lib/node_modules/tar-stream/node_modules/readable-stream/lib/_stream_writable.js:586:10)\n    at processTicksAndRejections (internal/process/task_queues.js:81:21)"
    }
  }
}
```

### Additional information:

 - `node -v` prints: v12.14.1
 - Windows, OS X, or Linux?: repros on all

- not a network or package issue
### pnpm version: 4
Hello. I've already posted question on gitter related to that issue, but after further investigation I think this worth mentioning in tracker.

Previous discussion:
Strider:
> @zkochan, hello. I've found another strange behavior specific for no-save users. When I'm using `pnpm i -g foo` then `pnpm i -g bar`, after 2nd `foo` will be deleted. I can workaround this with `-S` but this creates package.json for my global packages.
This may be intended behavior, but it is strange for me using this no-save scenario. Both pnpm and npm works normal way for a long time, that you can manually install any package globally without interrupting other global packages. Might be worth to note on this channel.

Zoltan:
> well, foo should not be deleted
there is a global package.json and both foo and bar should be added as dependencies to it

You gave me answer, but today I compared that behavior to npm's behavior.
Basically, I have `save=false` in npmrc, so both npm and pnpm use this settings.
When I install something with `npm i -g foo` it does not teardown anything previously installed.
I think, npm's behavior is correct. It may be formulated like: when using global mode, install any package and treat everything previously installed as manually installed, so keep it too, even if no package.json present or if it's empty.

With pnpm it's not possible to have `save=false` and install bunch of global tools. After installing second tool, 1st will be torn down. So, in any time point only one tool can be installed. To workaround this, no-save users will must always append `-S` to their global installs.
Often I'd like to install/build/test a package, all its dependencies, and all its dependents. This is useful for local development, but also as an optimization in CI builds to constrain what packages need to be verified.

pnpm filtering supports this to an extent with the `...<pkg>...` syntax, but the current functionality isn't quite complete. I'm not sure if this is by design or a bug, but it does not recurse through dependents to include their dependencies.

Take the following monorepo, where X -> Y declares that X depends on Y.

```
@local/b -> @local/a
@local/c -> @local/b
@local/c -> @local/z
```

Running `pnpm run -r build --filter ...@local/b...` will execute the "build" script in a, b, and c, but not z. This breaks the build in c because z hasn't been built.

Either as a bug fix or a new flag, I'd like to have a mechanism that recurses to include z here (and properly orders the execution so that z runs before c).
[Original comment](https://github.com/pnpm/pnpm/issues/1994#issuecomment-539413523)
Users of docker can benifit from it, by changing their Dockerfile to
```dockerfile
ADD pnpm-lock.yaml ./
RUN pnpm install --ci --only-from-lockfile # Proposed option for this feature
ADD package.json ./
RUN pnpm test-lockfile # Need to verify the lockfile is correct
ADD . ./
```
instead of the current popular pattern:
```Dockerfile
ADD package.json pnpm-lock.yaml ./
RUN pnpm install --frozen-lockfile
ADD . ./
```
The new Dockerfile pattern will allow pnpm install --ci --only-from-lockfile layer be reused even when package.json is modified, as long as lockfile is not modified, e.g. version bump.