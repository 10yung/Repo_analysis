<!-- Provide a detailed description of the behavior you'd like to see -->
<!-- What is the motivation / use case for changing the behavior? -->
Hi @Syomus,

Thanks for creating the amazing project. I'm the creator of [OpenUPM](https://openupm.com), a public upm registry with automatic build pipelines that publish new package bundle based on valid git tags. You can read [the announcement](https://www.patreon.com/posts/openupm-beta-is-32544176) to get the basic idea, so far it hosts 77 packages as of December 2019,

I've added [ProceduralToolkit ](https://openupm.com/packages/com.syomus.proceduraltoolkit/) to the platform, however since the package.json was newly added this year, not included in any GitHub releases (git tags) yet, the service can not generate a working bundle. **Would you please create a new release *v.0.2.3*?** The build pipeline will notice it and generate a bundle in a short time. (3-10mins).

If this looks interesting for you, you can consider adding [the badge](https://openupm.com/docs/adding-badge.html) to README. Here's an example project https://github.com/favoyang/unity-addressable-importer

BR
Favo



`MeshDraft.ToMesh(ref Mesh mesh)` could be fully replaced with `MeshDraft.ToMesh(Mesh mesh)`.
There is no use to use any ref here and it just makes code more ineffective and unintuitive.
It might be possible to replicate the uvmap from the Unity's capsule.
https://github.com/Syomus/ProceduralToolkit/blob/02e59f92fb38b69d873c2080906d2f83b3539d08/Scripts/MeshDraftPrimitives.cs#L670-L784
Create the following methods and appropriate overloads for DebugE, GizmosE and GLE:
`WireCircleSectorXY(Vector3 position, float radius)`
`WireCircleSectorXY(Vector3 position, Quaternion rotation, float radius)`
`WireCircleSectorXZ(Vector3 position, float radius)`
`WireCircleSectorXZ(Vector3 position, Quaternion rotation, float radius)`
`WireCircleSectorYZ(Vector3 position, float radius)`
`WireCircleSectorYZ(Vector3 position, Quaternion rotation, float radius)`
Create the following methods and appropriate overloads for DebugE, GizmosE and GLE:
`WirePolygon(List<Vector3>)`
`WirePolygonXY(List<Vector2>)`
`WirePolygonXZ(List<Vector2>)`
`WirePolygonYZ(List<Vector2>)`
Create the following methods and appropriate overloads for DebugE, GizmosE and GLE:
`WirePolyline(List<Vector3>)`
`WirePolylineXY(List<Vector2>)`
`WirePolylineXZ(List<Vector2>)`
`WirePolylineYZ(List<Vector2>)`
[Add missing Geometry algorithms](https://github.com/Syomus/ProceduralToolkit/issues/12)
- [ ] Distance
- [ ] Distance tests
- [ ] Closest point
- [ ] Closest point tests
- [ ] Intersection
- [ ] Intersection tests
[Add missing Geometry algorithms](https://github.com/Syomus/ProceduralToolkit/issues/12)
- [ ] Distance
- [ ] Distance tests
- [ ] Closest point
- [ ] Closest point tests
- [ ] Intersection
- [ ] Intersection tests
[Add missing Geometry algorithms](https://github.com/Syomus/ProceduralToolkit/issues/12)
- [ ] Distance
- [ ] Distance tests
- [ ] Closest point
- [ ] Closest point tests
- [ ] Intersection
- [ ] Intersection tests
[Add missing Geometry algorithms](https://github.com/Syomus/ProceduralToolkit/issues/12)
- [ ] Distance
- [ ] Distance tests
- [ ] Closest point
- [ ] Closest point tests
- [ ] Intersection
- [ ] Intersection tests