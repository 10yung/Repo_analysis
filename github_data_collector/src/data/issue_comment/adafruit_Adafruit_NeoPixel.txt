I cannot compile my code using the `NEO_KHZ400` argument for the Digispark. It works only with the `NEO_KHZ800` argument. It works perfect fine with the `NEO_KHZ400` argument, when I try to compile it for my Arduino Uno. I'm running the latest Arduino IDE version (1.8.10) on Windows 10 and have the latest version of the NeoPixel.

I also wrote a [forum post](https://forum.arduino.cc/index.php?topic=642175.msg4345023#msg4345023) earlier on the Arduino forum, since I thought it would be my failure, but it seems, something is wrong.
Having issues similar to this:
https://github.com/adafruit/Adafruit_Seesaw/issues/20

clear() doesn't appear to clear the buffer but only the local state of the pixels. I seems like this was fixed for the Seesaw project but not the Neopixel cpp.

I found this to be a problem when I have an interrupt pin setup to switch routines (such as Rainbow or Chase, etc.). It switches routines but will continue the previous routine afterwards until it has finish the remainder of the buffer. Having clear() in the loop doesn't work as expected. 
This change adds initial Apollo3 support.

The majority of the functionality is contained in the new `apollo3.cpp` file, but some minor modifications were made to `Adafruit_NeoPixel.cpp` in the `setPin()` function (support for Apollo3 fast GPIO configuration).  Function prototypes were added to `Adafruit_NeoPixel.h`.

Changes to existing code have been wrapped in a `AM_PART_APOLLO3` definition check, so existing platforms should not be affected.

I would note that this is a very initial implementation, using the `noop` timing hack.  I would prefer to have a more robust timing implementation (interrupts, DMA, etc).  We should be able to put this out there for folks to use in the short term, and transparently swap out the timing implementation when a better solution is in place.

This code was tested using a SparkFun RedBoard Artemis Nano, with the `simple` and `strandtest` example apps.
Would be nice to have NeoPixel support for SparkFun Artemis based boards that use the Ambiq Apollo3.

I have Neopixel enabled in Marlin as follows:

// Support for Adafruit Neopixel LED driver
#define NEOPIXEL_LED
#if ENABLED(NEOPIXEL_LED)
#define NEOPIXEL_TYPE NEO_GRBW // NEO_GRBW / NEO_GRB - four/three channel driver type (defined in Adafruit_NeoPixel.h)
#define NEOPIXEL_PIN 5 // LED driving pin on motherboard 4 => D4 (EXP2-5 on Printrboard) / 30 => PC7 (EXP3-13 on Rumba)
#define NEOPIXEL_PIXELS 3 // Number of LEDs in the strip
//#define NEOPIXEL_IS_SEQUENTIAL // Sequential display for temperature change - LED by LED. Disable to change all LEDs at once.
#define NEOPIXEL_BRIGHTNESS 200 // Initial brightness (0-255)
#define NEOPIXEL_STARTUP_TEST // Cycle through colors at startup
#endif

#if ENABLED(BLINKM) || ENABLED(RGB_LED) || ENABLED(RGBW_LED) || ENABLED(PCA9632) || ENABLED(NEOPIXEL_LED)
#define PRINTER_EVENT_LEDS
#endif

**When I use only one LED in a strip - everything works perfectly.** Color is changing when warming up and can be controlled with Gcode M150.

**BUT, when I have 3 LED:s in a row only first LED is "controllable", the other two have other colors.** 

If I send M150 R200 the first goes RED, second goes BLUE and third goes OFF. 
If i send M150 B200, the first goes BLUE, second goes OFF and third goes GREEN. 
If I send M150 U200, the first goes GREEN, second goes RED and third goes BLUE

How can I have all three with the same color and change as the first one?

I have imported Adafruit Neopixel in the library and connected it to SERVO2 on my MKS Gen L board. It is connected to SERVO_PIN 5 (which corresponds to SERVO2 in pins.h.
~This PR implements empirically derived timing values for the DUE (SAM3X8E) board.~

~If F_CPU is 84MHz then the empirically derived values are used.  If different then the calculated values are used.~

This takes care of a problem I was seeing with a DUE + RAMPS_FD_V1 + Fysetc MINIPANEL12864 rev 2.1 system.  The neopixel portion of the display was not working due to missing pulses and pulses of 62.5nS (the resolution of my logic analyzer).


In my application I would like to highlight just one pixel by having it blink between full brightness and half-brightness.  My assumption was that if I used all even RGBW values for that pixel's color, I could: get the pixel color, >>1 to divide all colors by 2, then save the dimmer pixel color.  However, even when using even color values I'm getting leakage into adjacent colors, ie a fully bright green pixel blinks to cyan, a fully red pixel blinks to yellow.

It appears the "getPixelColor()" does NOT return the "previously set pixel color" as indicated by the method description but instead scales it by brightness.  This means simply fetching the color through getPixelColor() and then resetting it through setPixelColor() changes the pixel color depending on the brightness setting.

The work-around that I found worked was to set brightness to 127, fetch the color, reset brightness back to the original value, then set the pixel color to >>1 color value.
    strip.setBrightness(127);
    uint32_t dim_color=strip.getPixelColor(blinking_index)>>1;
    strip.setBrightness(original_brightness);
    if(millis()&0x100) strip.setPixelColor(blinking_index,dim_color);
I'm attempting to compile Marlin Firmware on my MKS Sbase 1.3 board which is based on LPC1768.  I am unable to turn on Neopixel support because Adafruit_NeoPixel which doesn't have support built for LPC1768 platform.
Hi,

For the holidays I was working on a WS2811 LED strip (5 meter, 3 LEDs per WS2811 chip) together with a Wemos D1 mini (ESP8266) as a controller.

The Neopixel library offers the NEO_KHZ400 option to drive WS2811 type strips, since these don't use a 800 KHz pulse freq like the WS2812x do.

For some reason however the NEO_KHZ400 option is ignored when I use a board based on the ESP8266 mcu. I've tried to run a simple script (just turn on 1 led based on serial input) with an Arduino UNO and the LED strip performs as expected. Using the same exact code on the Wemos got no response. (I'm aware the Wemos has a 3.3v output voltage so I used a logic level converter to turn it into 5v)

Minimal test script:
```
// Based on NeoPixel Ring simple sketch (c) 2013 Shae Erisson
// released under the GPLv3 license to match the rest of the AdaFruit NeoPixel library

#include <Adafruit_NeoPixel.h>

#define PIN D2 //For the Wemos D1 mini
//#define PIN 5 //For the Arduino UNO

// How many NeoPixels are attached to the Arduino?
#define NUMPIXELS      50
#define brightness     100

// When we setup the NeoPixel library, we tell it how many pixels, and which pin to use to send signals.
// Note that for older NeoPixel strips you might need to change the third parameter--see the strandtest
// example for more information on possible values.
Adafruit_NeoPixel pixels = Adafruit_NeoPixel(NUMPIXELS, PIN, NEO_GRB + NEO_KHZ400);

void setup() {
  pinMode(PIN, OUTPUT);
  Serial.begin(115200);
  pixels.begin(); // This initializes the NeoPixel library.
  pixels.setPixelColor(0, pixels.Color(0,0,0));
  pixels.show();
}
void loop() {
    // Tigger on serial input to synchronize UNO and Wemos sending the same Neopixel command.
    if (Serial.available() > 0) {
        Serial.println(1, BIN);
        pixels.setPixelColor(0, pixels.Color(brightness,brightness,brightness));
        pixels.show();
        Serial.read(); // Read value to reset Serial.available
        delay(1000); // Debounce delay         
    }
}
```

I started debugging and after (quite) some time found the following difference in signal output:

<img width="600" alt="normal_400khz" src="https://user-images.githubusercontent.com/19150076/50399955-68b03780-0783-11e9-99f8-75f0f6a65762.PNG">

After zooming in a little bit you can clearly see a difference in the length of 1 bit between the UNO and the Wemos:

Arduino UNO:
<img width="600" alt="normal_400khz_closeup_uno" src="https://user-images.githubusercontent.com/19150076/50399977-82ea1580-0783-11e9-898d-bb59e211fc54.PNG">

Wemos:
<img width="600" alt="normal_400khz_closeup_wemos" src="https://user-images.githubusercontent.com/19150076/50399981-8b425080-0783-11e9-8a62-bb644e4f4ca9.PNG">

The UNO uses the expected frequency of 400KHz but the Wemos is using the 800KHz frequency.

After some digging around I found the following section in esp8266.c that is related to the timing of these signals. It should change the frequencies based on a boolean named "is800KHz". 

```
#define CYCLES_800_T0H  (F_CPU / 2500000) // 0.4us
#define CYCLES_800_T1H  (F_CPU / 1250000) // 0.8us
#define CYCLES_800      (F_CPU /  800000) // 1.25us per bit
#define CYCLES_400_T0H  (F_CPU / 2000000) // 0.5uS
#define CYCLES_400_T1H  (F_CPU /  833333) // 1.2us
#define CYCLES_400      (F_CPU /  400000) // 2.5us per bit

  uint8_t *p, *end, pix, mask;
  uint32_t t, time0, time1, period, c, startTime, pinMask;

  pinMask   = _BV(pin);
  p         =  pixels;
  end       =  p + numBytes;
  pix       = *p++;
  mask      = 0x80;
  startTime = 0;

#ifdef NEO_KHZ400
  if(is800KHz) {
#endif
    time0  = CYCLES_800_T0H;
    time1  = CYCLES_800_T1H;
    period = CYCLES_800;
#ifdef NEO_KHZ400
  } else { // 400 KHz bitstream
    time0  = CYCLES_400_T0H;
    time1  = CYCLES_400_T1H;
    period = CYCLES_400;
  }
#endif
```

However it does not. If I force the use of the 400KHz timing scheme by changing the 800KHz to match the 400KHz ones like this:
```
#define CYCLES_800_T0H  (F_CPU / 2000000) 
#define CYCLES_800_T1H  (F_CPU /  833333) 
#define CYCLES_800      (F_CPU /  400000) 
#define CYCLES_400_T0H  (F_CPU / 2000000) 
#define CYCLES_400_T1H  (F_CPU /  833333) 
#define CYCLES_400      (F_CPU /  400000)
```

It does work and I get the following output on my logic analyser:

Overview:
<img width="600" alt="forced_400khz" src="https://user-images.githubusercontent.com/19150076/50399994-ab720f80-0783-11e9-8989-7217ffbd60e9.PNG">

Arduio UNO:
<img width="600" alt="forced_400khz_closeup_uno" src="https://user-images.githubusercontent.com/19150076/50399997-af059680-0783-11e9-830b-89ab9405bd2e.PNG">

Wemos:
<img width="600" alt="forced_400khz_closeup_wemos" src="https://user-images.githubusercontent.com/19150076/50399999-b167f080-0783-11e9-955e-bbe70a79d64c.PNG">

Now the signals seem to match in terms of frequency. Both on 400KHz. 

I have the feeling it has to do with this "is800KHz" boolean that is not being set correctly somewhere. But I cannot seem to find if the problem lies in the esp8266.c itself or in Adafruit_NeoPixel.cpp that calls it. 

Does anyone know where to look for the cause? Or am I missing something?

Arduino board:  Wemos D1 Mini (ESP8266), Arduino UNO (genuine)
Arduino IDE version:  1.8.5
Neopixel library version: 2.4.2




The changes allows the using of Adafruit Neopixel with Infineon XMC1100.

Parts of the code modified:
In Adafruit_NeoPixel.cpp: A new part "#elif defined (XMC1)" has been added in "void Adafruit_NeoPixel::show(void)"
In README.md: The Infineon microcontrollers supported has been included.
In the examples: "#include sbrk.h" has been added. 
The file "sbrk.h" had been included.