This is still WIP and in RFC state.

It implements reverse dynamic forwarding added in OpenSSH 7.5.

https://www.openssh.com/releasenotes.html

>  * ssh(1): add support for reverse dynamic forwarding. In this mode,
>    ssh will act as a SOCKS4/5 proxy and forward connections
>    to destinations requested by the remote SOCKS client. This mode
>    is requested using extended syntax for the -R and RemoteForward
>    options and, because it is implemented solely at the client,
>    does not require the server be updated to be supported.

Usage is the same like in the ssh(1) commandline tool (https://man.openbsd.org/ssh.1)

```
using (var client = new SshClient("localhost", 22, "username", "password"))
{
    client.Connect();
    var forwarding = new ForwardedPortRemote("127.0.0.1", 5555);
    client.AddForwardedPort(forwarding);

    forwarding.Start();
}
```
Add support to parse OpenSSH Keys with ECDSA 256/384/521 and RSA.

Change-Id: Iaa9cce0f2522e5fee377a82cb252f81f0b7cc563
Currently SSH.NET only supports MD5, with the big-ish struggles right not being that `FingerPrint` being just a bite array, so something we can't easily add new algorithm support to.

We're currently calculating our own fingerprint for SHA256 support, but ideally having the library support this out of the box would be best.

To prevent breaking backwards comparability we can:

- Make additional properties per algorithm (not the best, easy though, accessible, matches current "convention")
- Make a new property that allows us to look up by algorithm, all algorithms need to be checked up-front and stored, but we can add more
- Make a method that takes an algorithm that we'll return the thumbprint for, internal implementation may cache this

What probably makes the most sense? Or does everyone just roll their own and it's not really a big deal?

It would be great if there was an async version of the Connect() method, as that would allow non-blocking behavior which can be very useful when dealing with unresponsive devices that cause the connection timeout to be triggered, wasting precious thread time.
Sending a command and receiving the response I cannot open `nano` I can use `vi` but I get the output of that but then I can't perform in edits to it because all I am receiving is the output of that command.

How do you create an environment like putty using SSH.NET?

Is it possible to create an environment like putty?

Hello, I am using SSH.net to connect to a unix server, it works very well, but I have a problem, when trying to execute the following command

sqr -RS file.sqr username / password

It sends me an error since it does not recognize sqr as a valid command.

This is because when logging in with ssh.net it does not load the * .profile of the user who is logging on.

Can you tell me what can I do?
Hi,

We use SSH.NET to establish a tunnel with [node-http-proxy](https://github.com/http-party/node-http-proxy).

It works perfectly by using shell SSH client.
With SSH.NET, the connection will drop unexpectedly with the error: ProtocolError data packet referred to nonexistent channel 3.

This will happen easily if multiple channels are open and closed rapidly, then the whole session will be dropped unexpectedly.

Any idea?

Hi I am new to SSH.NET and C# too. I have question about use of SshClient.
I am using Visual studio 2017 community.
I am connecting from win 10 pc to Raspberry pi 4B - Buster. Everything works fine.
But do I always have to connect client like:

` private void GON_Click(object sender, EventArgs e)
        {
            using (var client = new SshClient("101.100.100.100", "pi", "Rpi4"))
            {
              client.Connect();
              client.RunCommand("gpio mode 7 out");
              client.Disonnect();
            }
           }`

Can I just somewhere initialize  

`var client= new SshClient("101.100.100.100", "pi", "Rpi4")
client.Connect();`

And then use it in other classes - for example in the buttons click?
` private void BUTOPEN_Click(object sender, EventArgs e)
{client.RunCommand("gpio write 7 1")}`
Thanks in advance for your reply.
          


There is an issue where the session is closed and ErrorOccured will not be triggered.
We have inserted the logging to the library and attached here in the issue.

We found that at 2019-12-13 09:18:07.319, the client sent 'ChannelCloseMessage' to the server but after that from 2019-12-13 09:18:07.410 onwards, the client again sent a few 'ChannelDataMessage' to the server again. 

Finally at 2019-12-13 09:18:07.521, the server replied 'DisconnectMessage' and the client closed the SSH session completely without returning any events.

[issue_nonexistent_channel.txt](https://github.com/sshnet/SSH.NET/files/3972442/issue_nonexistent_channel.txt)

Hi, 

for an succesful connection to my DUT I would need Key Exchange Method
diffie-hellman-group14-sha256

is there a chance for a new version that supports that method in the next time?